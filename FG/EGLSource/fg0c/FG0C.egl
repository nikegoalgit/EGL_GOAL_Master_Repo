package fg0c;

import corpcom1.CACHGFL;
import corpcom2.XPCREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPFF001;
import corpcom3.XPXPC01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS01;
import corpcom4.XSFFS10;
import corpcom4.XSFFS11;
import corpcom4.XSFFS20;
import corpcom4.XSFFS30;
import corpcom4.XSFFS52;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XPCTBL;
import corpy2.YPGTBL;
import ff.common.FF1REC;
import ff.common.FF7REC;
import ff.common.FFFREC;
import ff.common.FFWREC;
import ff.common.FFXREC;
import ff.common.FFZREC;
import fh.common.FH6REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=FG0C ****
// This application allows the user to set the projected
// shipment of nil/misc quantities.  It shows the historical
// shipments for one and two years ago.  The displayed shipment
// data may be actual shipment amounts.  The program uses the
// invoice cut off date to determine if the future shipped
// quantity should be used or the actual shipped quantity from
// the history database should be used.
// 
// The user must specify the range, type, category and div
// group.  The user can enter the total amount and the program
// will spread the amount over the number of (projected)
// months in the date range.  Also, the user has the option of
// changing the amount for a particular month. when the monthly
// qty has been changed the program will recalculate the
// subtotal and total.  The database may be updated with these
// values, if the user presses a pf key requesting the update.
// 
// If the user doesn't know the code for a type or category,
// he/she can enter a '?' to ask for help.  The program
// will bring up a pop-up window to show a list of types or
// categories so that the user can chose.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from either of the screens.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          03/15/90  rgilli  New application.
// FF1119   06/26/92  LDELUH  When add MCAT for makeups set
//                            fill rt & futr rto to 100.
// FF402    05/04/93  JJUCH   Default inline fill rate to 92
//                            when insert a new MCAT row.
// FF175    12/12/96  DSMITH  Changed the date range fill
//                            character to '0'.
// *********************
Program FG0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF1REC FF1REC; // record
  FF7REC FF7REC; // record
  FFFREC FFFREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  FG0CW00 FG0CW00; // record
  FG0CW01 FG0CW01; // record
  FH6REC FH6REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPCTBL; // table
  use YPGTBL; // table
  use FG0CM.FG0CM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FFFREC empty;
    set FG0CM001 initial; /* M001 input/output*/
    set FG0CW00 empty; /* Working storage*/
    set FG0CW01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine work area*/
    set TA5REC empty; /* temp storage queue area*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    FG0CW00.FG0CWSWR = "N"; /* Request for data switch*/
    FG0CW00.FG0CWSWF = "Y"; /* format screen data switch*/
    ;
     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/
    ;
     /* ------------------------------------------------------------*/
     /* product type group*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.YPGCD == " ")
      FFWREC.YPGCD = "01";
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end
    ;
     /* ------------------------------------------------------------*/
     /* determine if data is to be loaded*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.FFABEGMO != 0
     && FFWREC.FFAENDMO != 0
     && FFWREC.XPCCD != " ")
      FFZREC.FFZBEGMO = FFWREC.FFABEGMO;
      FFZREC.FFZENDMO = FFWREC.FFAENDMO;
      FG0CW00.FG0CWSWR = "Y"; /* set data request flag*/
    end
    ;
     /* ------------------------------------------------------------*/
     /* Clear unused FFWREC fields.*/
     /* ------------------------------------------------------------*/
    ;
    FFWREC.XPLCD = " "; /* Clear line code*/
    FFWREC.XPLABRV = " "; /* Clear line name*/
    FFWREC.SYBSTGNB = " "; /* Clear style grp code*/
    FFWREC.SYBSTGNM = " "; /* Clear style grp name*/
    FFWREC.SY1STNBR = " "; /* Clear style code*/
    FFWREC.SY1SSTNM = " "; /* Clear style name*/
    FFWREC.YSMXDV = "10"; /* Default div grp code*/
    FFWREC.YSMSMDSC = "DOMSTC"; /* Default div grp name*/
    ;
     /* ------------------------------------------------------------*/
     /* converse main process*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0C001; /* Converse the main process*/
    ;
    FG0C001: FG0C001();
     /* ------------------------------------------------------------*/
     /* flow to converse the main process used to display a map*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0C001; /* converse the main process*/
    ;
  end // end main
end // end FG0C

// set proj ship for nil/misc
Function FG0C001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FG0C100(); /* Obtain the data to display*/
  ;
  FG0C200(); /* Format and display the map*/
  ;
  FG0C300(); /* Check attention identifier*/
  ;
  FG0C400(); /* Reset fields to normal intensity*/
  ;
  FG0C500(); /* Verify the entered data*/
  ;
  FG0C600(); /* Process valid input request*/
  ;
  ;
end // end FG0C001

// Obtain data for display
Function FG0C100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0CW00.FG0CWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* init working storage*/
   /* ------------------------------------------------------------*/
  ;
  set FG0CW01 empty; /* init w/s*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain current date using routine XX0XS01, calculate*/
   /* current date minus one month and historical date ranges.*/
   /* ------------------------------------------------------------*/
  ;
  FG0C110(); /* Process dates*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain quantities for historical data 1 year ago*/
   /* ------------------------------------------------------------*/
  ;
  FG0C120();
  ;
   /* ------------------------------------------------------------*/
   /* Obtain quantities for historical data 2 years ago*/
   /* ------------------------------------------------------------*/
  ;
  FG0C130();
  ;
   /* ------------------------------------------------------------*/
   /* Obtain monthly headings and qtys for projected shipments*/
   /* ------------------------------------------------------------*/
  ;
  FG0C140();
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  FG0CW00.FG0CWNMO = FG0CW00.FG0CWLIX;
  FG0CW01.CACHGFL = "Y"; /* set data loaded flag*/
  FG0CW00.FG0CWSWR = "N"; /* Request for data switch*/
  ;
end // end FG0C100

// Process dates
Function FG0C110()
   /* ------------------------------------------------------------*/
   /* Obtain current date.*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01();
  ;
   /* ------------------------------------------------------------*/
   /* Calculate current minus 1 date.*/
   /* ------------------------------------------------------------*/
  ;
  FG0CW00.FG0CWCWD = XX0XW01.XX0XWDAT; /* current work dt ccyymmdd*/
  FG0CW00.FG0CWCRD = XX0XW01.XX0XWCYM; /* current date ccyymm*/
  FG0CW00.FG0CWWDT = XX0XW01.XX0XWCYM; /* work date*/
  ;
  if (FG0CW00.FG0CWWMM == 1)
    FG0CW00.FG0CWWMM = 12;
    ;
    if (FG0CW00.FG0CWWYY == 0) /* If year is 2000*/
      FG0CW00.FG0CWWYY = 99; /* move 99 to year*/
      FG0CW00.FG0CWWCC = 19; /* move 19 to century*/
    else
      FG0CW00.FG0CWWYY = FG0CW00.FG0CWWYY - 1; /* subtract 1 from year*/
    end
    ;
  else
    FG0CW00.FG0CWWMM = FG0CW00.FG0CWWMM - 1; /* subtract 1 from month*/
  end
  ;
  FG0CW00.FG0CWCD1 = FG0CW00.FG0CWWDT; /* current date minus 1 month*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate historical date ranges(1yr ago/2yr ago)*/
   /* ------------------------------------------------------------*/
  ;
  FG0CW00.FG0CWWBD = FFWREC.FFABEGMO; /* user req begin range*/
  FG0CW00.FG0CWWED = FFWREC.FFAENDMO; /* user req end range*/
  ;
  FG0CW00.FG0CWIDX = 1; /* init index*/
  while (FG0CW00.FG0CWIDX <= 2) /* calculate historical date ranges*/
    ;
    /* ------------------------------------------------------------*/
     /* Calculate beginning month of range.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0CW00.FG0CWBYY == 0) /* If year is 2000*/
      FG0CW00.FG0CWBYY = 99; /* move 99 to year*/
      FG0CW00.FG0CWBCC = 19; /* move 19 to century*/
    else
      FG0CW00.FG0CWBYY = FG0CW00.FG0CWBYY - 1; /* subtract 1 from year*/
    end
    FG0CW01.FG0CWPBD[FG0CWIDX] = FG0CW00.FG0CWWBD; /* prior beg date*/
    ;
    /* ------------------------------------------------------------*/
     /* Calculate ending month of range.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0CW00.FG0CWEYY == 0) /* If year is 2000*/
      FG0CW00.FG0CWEYY = 99; /* move 99 to year*/
      FG0CW00.FG0CWECC = 19; /* move 19 to century*/
    else
      FG0CW00.FG0CWEYY = FG0CW00.FG0CWEYY - 1; /* subtract 1 from year*/
    end
    FG0CW01.FG0CWPED[FG0CWIDX] = FG0CW00.FG0CWWED; /* prior end date*/
    ;
    /* ------------------------------------------------------------*/
     /* Add to counter.*/
    /* ------------------------------------------------------------*/
    ;
    FG0CW00.FG0CWIDX = FG0CW00.FG0CWIDX + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Obtain invoice date from FFCTL.*/
   /* ------------------------------------------------------------*/
  ;
  FG0C111(); /* get invoice cutoff date*/
  ;
  FG0CW00.FG0CWICD = FF1REC.FF1IVCDT;
  ;
  ;
end // end FG0C110

// Select FFCTL
Function FG0C111()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  ;
  set FF1REC empty; /* Clear row storage area*/
  ;
   /* ------------------------------------------------------------*/
   /* Select FFCTL for invoice cutoff date.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "111"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VFFCTL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF1REC.FF1GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0C111

// Load historical data 1 yr ago
Function FG0C120()
   /* ------------------------------------------------------------*/
   /* obtain all months within range 1 yr ago*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty;
  ;
  FFZREC.FFZBEGMO = FG0CW01.FG0CWPBD[1];
  FFZREC.FFZENDMO = FG0CW01.FG0CWPED[1];
  ;
  FG0CS01(); /* get months within range*/
  ;
   /* ------------------------------------------------------------*/
   /* obtain historical actual/forecast proj ship qtys 1 yr ago*/
   /* ------------------------------------------------------------*/
  ;
  FG0CW00.FG0CWLIX = 1; /* load index*/
  FG0CW00.FG0CWIDX = 1; /* init index*/
  FG0CW00.FG0CWUTT = 0; /* total qty*/
  ;
  while (FG0CW00.FG0CWIDX <= FFZREC.FFZNUMMO
   && FFZREC.FFZINDMO[FG0CWIDX] <= FG0CW01.FG0CWPED[1])
    ;
    if (FG0CW00.FG0CWLIX == 7)
      FFXREC.FFXNUMB = FG0CW00.FG0CWUTT;
      XSFFS10();
      FG0CW01.FG0CWHQ1[FG0CWLIX] = FFXREC.FFXCHAR;
      FG0CW00.FG0CWLIX = FG0CW00.FG0CWLIX + 1;
    end
    ;
    if (FFZREC.FFZINDMO[FG0CWIDX] < FG0CW00.FG0CWCD1)
      ;
      FG0CS02(); /* get actuals*/
      ;
      FG0CW01.FG0CWUQ1[FG0CWLIX] = FG0CW00.FG0CWUPS;
      FFXREC.FFXNUMB = FG0CW00.FG0CWUPS;
      XSFFS10();
      FG0CW01.FG0CWHQ1[FG0CWLIX] = FFXREC.FFXCHAR;
      ;
    else
      if (FFZREC.FFZINDMO[FG0CWIDX] == FG0CW00.FG0CWCD1
       && FG0CW00.FG0CWCYM == FG0CW00.FG0CWIYM
       && FG0CW00.FG0CWCWD >= FG0CW00.FG0CWICD)
        ;
        FG0CS02(); /* get actuals*/
        ;
        FG0CW01.FG0CWUQ1[FG0CWLIX] = FG0CW00.FG0CWUPS;
        FFXREC.FFXNUMB = FG0CW00.FG0CWUPS;
        XSFFS10();
        FG0CW01.FG0CWHQ1[FG0CWLIX] = FFXREC.FFXCHAR;
        ;
      else
        ;
        set FF7REC empty; /* init dfcast.vmcat001*/
        FF7REC.FF4FCTMO = FFZREC.FFZINDMO[FG0CWIDX];
        ;
        FG0CS03(); /* select dfcast.vmcat001*/
        ;
        FG0CW00.FG0CWUPS = FF7REC.FF7NLSHP;
        FG0CW01.FG0CWUQ1[FG0CWLIX] = FF7REC.FF7NLSHP;
        FFXREC.FFXNUMB = FF7REC.FF7NLSHP;
        XSFFS10();
        FG0CW01.FG0CWHQ1[FG0CWLIX] = FFXREC.FFXCHAR;
        ;
      end
    end
    ;
    FG0CW00.FG0CWUTT = FG0CW00.FG0CWUPS + FG0CW00.FG0CWUTT;
    ;
    FG0CW00.FG0CWIDX = FG0CW00.FG0CWIDX + 1;
    FG0CW00.FG0CWLIX = FG0CW00.FG0CWLIX + 1;
    ;
  end
  ;
  FFXREC.FFXNUMB = FG0CW00.FG0CWUTT;
  XSFFS10(); /* Translation number*/
  FG0CW01.FG0CWHQ1[FG0CWLIX] = FFXREC.FFXCHAR;
  ;
  ;
end // end FG0C120

// Load historical data 2 yrs ago
Function FG0C130()
   /* ------------------------------------------------------------*/
   /* obtain all months within range 2 yr ago*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty;
  ;
  FFZREC.FFZBEGMO = FG0CW01.FG0CWPBD[2];
  FFZREC.FFZENDMO = FG0CW01.FG0CWPED[2];
  ;
  FG0CS01(); /* get months within range*/
  ;
   /* ------------------------------------------------------------*/
   /* obtain historical actual/forecast proj ship qtys 2 yr ago*/
   /* ------------------------------------------------------------*/
  ;
  FG0CW00.FG0CWLIX = 1; /* load index*/
  FG0CW00.FG0CWIDX = 1; /* init index*/
  FG0CW00.FG0CWUTT = 0; /* init total qty*/
  ;
  while (FG0CW00.FG0CWIDX <= FFZREC.FFZNUMMO
   && FFZREC.FFZINDMO[FG0CWIDX] <= FG0CW01.FG0CWPED[2])
    ;
    if (FG0CW00.FG0CWLIX == 7)
      FFXREC.FFXNUMB = FG0CW00.FG0CWUTT;
      XSFFS10();
      FG0CW01.FG0CWHQ2[FG0CWLIX] = FFXREC.FFXCHAR;
      FG0CW00.FG0CWLIX = FG0CW00.FG0CWLIX + 1;
    end
    ;
    if (FFZREC.FFZINDMO[FG0CWIDX] < FG0CW00.FG0CWCD1)
      ;
      FG0CS02(); /* get actuals*/
      ;
      FG0CW01.FG0CWUQ2[FG0CWLIX] = FG0CW00.FG0CWUPS;
      FFXREC.FFXNUMB = FG0CW00.FG0CWUPS;
      XSFFS10();
      FG0CW01.FG0CWHQ2[FG0CWLIX] = FFXREC.FFXCHAR;
      ;
    else
      if (FFZREC.FFZINDMO[FG0CWIDX] == FG0CW00.FG0CWCD1
       && FG0CW00.FG0CWCYM == FG0CW00.FG0CWIYM
       && FG0CW00.FG0CWCWD >= FG0CW00.FG0CWICD)
        ;
        FG0CS02(); /* get actuals*/
        ;
        FG0CW01.FG0CWUQ2[FG0CWLIX] = FG0CW00.FG0CWUPS;
        FFXREC.FFXNUMB = FG0CW00.FG0CWUPS;
        XSFFS10();
        FG0CW01.FG0CWHQ2[FG0CWLIX] = FFXREC.FFXCHAR;
        ;
      else
        ;
        set FF7REC empty;
        FF7REC.FF4FCTMO = FFZREC.FFZINDMO[FG0CWIDX];
        ;
        FG0CS03(); /* select dfcast.vmcat001*/
        ;
        FG0CW00.FG0CWUPS = FF7REC.FF7NLSHP;
        FG0CW01.FG0CWUQ2[FG0CWLIX] = FF7REC.FF7NLSHP;
        FFXREC.FFXNUMB = FF7REC.FF7NLSHP;
        XSFFS10();
        FG0CW01.FG0CWHQ2[FG0CWLIX] = FFXREC.FFXCHAR;
        ;
      end
    end
    ;
    FG0CW00.FG0CWUTT = FG0CW00.FG0CWUPS + FG0CW00.FG0CWUTT;
    ;
    FG0CW00.FG0CWIDX = FG0CW00.FG0CWIDX + 1;
    FG0CW00.FG0CWLIX = FG0CW00.FG0CWLIX + 1;
    ;
  end
  ;
  FFXREC.FFXNUMB = FG0CW00.FG0CWUTT;
  XSFFS10(); /* Translation number*/
  FG0CW01.FG0CWHQ2[FG0CWLIX] = FFXREC.FFXCHAR;
  ;
  ;
end // end FG0C130

// Load projected shipment data
Function FG0C140()
   /* ------------------------------------------------------------*/
   /* Expand current range for calls.*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty;
  ;
  FFZREC.FFZBEGMO = FFWREC.FFABEGMO;
  FFZREC.FFZENDMO = FFWREC.FFAENDMO;
  ;
  FG0CS01(); /* get months within range*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain historical actual/forecast proj ship*/
   /* ------------------------------------------------------------*/
  ;
  FG0CW00.FG0CWLIX = 1; /* load index*/
  FG0CW00.FG0CWIDX = 1; /* init index*/
  FG0CW00.FG0CWUTT = 0; /* total qty*/
  ;
  while (FG0CW00.FG0CWIDX <= FFZREC.FFZNUMMO
   && FFZREC.FFZINDMO[FG0CWIDX] <= FFWREC.FFAENDMO)
    ;
    if (FG0CW00.FG0CWLIX == 7)
      FG0CW01.FG0CWHDG[FG0CWLIX] = "SUBTOT";
      FFXREC.FFXNUMB = FG0CW00.FG0CWUTT;
      XSFFS10();
      FG0CW01.FG0CWQTP[FG0CWLIX] = FFXREC.FFXCHAR;
      FG0CW00.FG0CWLIX = FG0CW00.FG0CWLIX + 1;
    end
    ;
    FG0CW01.FG0CWHDD[FG0CWLIX] = FFZREC.FFZINDMO[FG0CWIDX];
    if (FFZREC.FFZINDMO[FG0CWIDX] < FG0CW00.FG0CWCD1)
      ;
      FG0CS02(); /* get actuals*/
      ;
      FG0CW01.FG0CWUQP[FG0CWLIX] = FG0CW00.FG0CWUPS;
      FFXREC.FFXNUMB = FG0CW00.FG0CWUPS;
      XSFFS10();
      FG0CW01.FG0CWQTP[FG0CWLIX] = FFXREC.FFXCHAR;
      ;
    else
      if (FFZREC.FFZINDMO[FG0CWIDX] == FG0CW00.FG0CWCD1
       && FG0CW00.FG0CWCYM == FG0CW00.FG0CWIYM
       && FG0CW00.FG0CWCWD >= FG0CW00.FG0CWICD)
        ;
        FG0CS02(); /* get actuals*/
        ;
        FG0CW01.FG0CWUQP[FG0CWLIX] = FG0CW00.FG0CWUPS;
        FFXREC.FFXNUMB = FG0CW00.FG0CWUPS;
        XSFFS10();
        FG0CW01.FG0CWQTP[FG0CWLIX] = FFXREC.FFXCHAR;
        ;
      else
        ;
        set FF7REC empty;
        FF7REC.FF4FCTMO = FFZREC.FFZINDMO[FG0CWIDX];
        ;
        FG0CS03(); /* select dfcast.vmcat001*/
        ;
        FG0CW00.FG0CWUPS = FF7REC.FF7NLSHP;
        FG0CW01.FG0CWFCF[FG0CWLIX] = "Y"; /* set forecast flag*/
        FG0CW01.FG0CWUQP[FG0CWLIX] = FF7REC.FF7NLSHP;
        FFXREC.FFXNUMB = FF7REC.FF7NLSHP;
        XSFFS10();
        FG0CW01.FG0CWQTP[FG0CWLIX] = FFXREC.FFXCHAR;
        ;
      end
    end
    ;
    FG0CW00.FG0CWUTT = FG0CW00.FG0CWUPS + FG0CW00.FG0CWUTT;
    ;
    FG0CW00.FG0CWIDX = FG0CW00.FG0CWIDX + 1;
    FG0CW00.FG0CWLIX = FG0CW00.FG0CWLIX + 1;
    ;
  end
  ;
  FG0CW00.FG0CWIDX = FG0CW00.FG0CWLIX - 1;
  if (FG0CW01.FG0CWFCF[FG0CWIDX] == "Y")
                                   /* allow entry if at least on fcst mo*/
    FG0CW01.FG0CWFCF[FG0CWLIX] = "Y";
  end
  FG0CW01.FG0CWHDG[FG0CWLIX] = " TOTAL";
  ;
  FFXREC.FFXNUMB = FG0CW00.FG0CWUTT;
  XSFFS10(); /* Translation number*/
  FG0CW01.FG0CWQTP[FG0CWLIX] = FFXREC.FFXCHAR;
  ;
  ;
end // end FG0C140

// Format and converse the map
Function FG0C200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0CW00.FG0CWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (FG0CW00.FG0CWSWF == "Y") /* Map must be formatted*/
      FG0C210(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FG0CM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FG0CM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG0CM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (FFWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FG0CM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    FG0CM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    ;
    set FG0CM001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FG0CM001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = FG0CM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG0CM001.CAITEM; /* Application data*/
  ;
  ;
end // end FG0C200

// Format the display data
Function FG0C210()
  ;
   /* ------------------------------------------------------------*/
   /* init map fg0cm001*/
   /* ------------------------------------------------------------*/
  ;
  set FG0CM001 initial; /* m001 input/ouput area*/
  ;
  FG0CW00.FG0CWSWF = "N"; /* init map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Format fg0cm001 using passed data*/
   /* ------------------------------------------------------------*/
  ;
  FG0CW00.FG0CWWDT = FFWREC.FFABEGMO; /* w/s date field*/
  FG0CM001.FG0CMBRG = FG0CW00.FG0CWWYM; /* begin month range*/
  FG0CW00.FG0CWWDT = FFWREC.FFAENDMO; /* w/s date field*/
  FG0CM001.FG0CMERG = FG0CW00.FG0CWWYM; /* end month range*/
  ;
  FG0CM001.YPGCD = FFWREC.YPGCD; /* product type group*/
  FG0CM001.YPGABRV = FFWREC.YPGABRV; /* product type group abrv*/
  ;
  FG0CM001.XPCCD = FFWREC.XPCCD; /* category code*/
  FG0CM001.XPCABRV = FFWREC.XPCABRV; /* category code abrv*/
  ;
  FG0CM001.YSMXDV = FFWREC.YSMXDV; /* div group*/
  FG0CM001.YSMSMDSC = FFWREC.YSMSMDSC; /* div group abrv*/
  ;
  if (FG0CW01.CACHGFL != "Y")
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* determine which descriptions to display*/
   /* ------------------------------------------------------------*/
  ;
  set FG0CM001.FG0CMHD1[1] skip; /* historical data 1 yr ago desc*/
  set FG0CM001.FG0CMHD2[1] skip; /* historical data 2 yr ago desc*/
  set FG0CM001.FG0CMHPS[1] skip; /* projected shipment desc*/
  ;
  if (FG0CW00.FG0CWNMO > 7)
    set FG0CM001.FG0CMHD1[2] skip; /* historical data 1 yr ago desc*/
    set FG0CM001.FG0CMHD2[2] skip; /* historical data 2 yr ago desc*/
    set FG0CM001.FG0CMHPS[2] skip; /* projected shipment desc*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* load monthly quantities/subtotal/total for hist 1 yr ago*/
   /* ------------------------------------------------------------*/
  ;
  FG0CW00.FG0CWIDX = 1;
  while (FG0CW00.FG0CWIDX <= FG0CW00.FG0CWNMO) /* nbr of mos loaded*/
    ;
    FG0CM001.FG0CMHQ1[FG0CWIDX] = FG0CW01.FG0CWHQ1[FG0CWIDX];
    ;
    FG0CW00.FG0CWIDX = FG0CW00.FG0CWIDX + 1; /* increment index*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* load monthly quantities/subtotal/total for hist 2 yr ago*/
   /* ------------------------------------------------------------*/
  ;
  FG0CW00.FG0CWIDX = 1;
  while (FG0CW00.FG0CWIDX <= FG0CW00.FG0CWNMO) /* nbr of mos loaded*/
    ;
    FG0CM001.FG0CMHQ2[FG0CWIDX] = FG0CW01.FG0CWHQ2[FG0CWIDX];
    ;
    FG0CW00.FG0CWIDX = FG0CW00.FG0CWIDX + 1; /* increment index*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* load monthly headings/quantities/subtotal/total for*/
   /* user requested projected qtys*/
   /* ------------------------------------------------------------*/
  ;
  FG0CW00.FG0CWIDX = FG0CW00.FG0CWNMO;
  while (FG0CW00.FG0CWIDX > 0) /* nbr of mos loaded*/
    ;
    if (FG0CW01.FG0CWHDG[FG0CWIDX] == "SUBTOT"
     || FG0CW01.FG0CWHDG[FG0CWIDX] == " TOTAL")
      FG0CM001.FG0CMHDG[FG0CWIDX] = FG0CW01.FG0CWHDG[FG0CWIDX];
    else
      FG0CM001.FG0CMHDG[FG0CWIDX] = FG0CW01.FG0CWDH1[FG0CWIDX];
    end
    set FG0CM001.FG0CMHDG[FG0CWIDX] skip;
    ;
    FG0CM001.FG0CMQTP[FG0CWIDX] = FG0CW01.FG0CWQTP[FG0CWIDX];
    if (FG0CW01.FG0CWFCF[FG0CWIDX] != "Y")
      set FG0CM001.FG0CMQTP[FG0CWIDX] skip;
    else
      set FG0CM001.FG0CMQTP[FG0CWIDX] cursor, normal;
    end
    ;
    FG0CW00.FG0CWIDX = FG0CW00.FG0CWIDX - 1; /* increment index*/
    ;
  end
  ;
  ;
end // end FG0C210

// Check attention identifier
Function FG0C300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    converseLib.clearScreen();
     /* refresh map*/
    ;
    FG0CW00.FG0CWSWF = "Y"; /* format screen m001*/
    FG0CW00.FG0CWSWR = "N"; /* request for data*/
    ;
    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0CM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
      FG0CW00.FG0CWSWF = "Y"; /* format screen m001*/
      FG0CW00.FG0CWSWR = "N"; /* request for data*/
      ;
      set FG0CM001.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG0CM001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF03"; /* TO application*/
    end
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    FG0CW00.FG0CWSWF = "Y"; /* format screen m001*/
    FG0CW00.FG0CWSWR = "N"; /* request for data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf13) /* pf13 was not pressed*/
    ;
    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FG0C300

// Reset highlighted fields
Function FG0C400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FG0CM001.FG0CMBRG initialAttributes; /* begin range*/
  set FG0CM001.FG0CMERG initialAttributes; /* end range*/
  set FG0CM001.XPCCD initialAttributes; /* category code*/
  set FG0CM001.YPGCD initialAttributes; /* product type group*/
  set FG0CM001.YSMXDV initialAttributes; /* division group*/
  ;
  if (FG0CW01.CACHGFL == "Y")
    ;
    set FG0CM001.FG0CMHD1[1] skip; /* historical 1 yr ago desc*/
    set FG0CM001.FG0CMHD2[1] skip; /* historical 2 yr ago desc*/
    set FG0CM001.FG0CMHPS[1] skip; /* projected shipment desc*/
    ;
    if (FG0CW00.FG0CWNMO > 7)
      set FG0CM001.FG0CMHD1[2] skip; /* historical 1 yr ago desc*/
      set FG0CM001.FG0CMHD2[2] skip; /* historical 2 yr ago desc*/
      set FG0CM001.FG0CMHPS[2] skip; /* projected shipment desc*/
    end
    ;
    FG0CW00.FG0CWIDX = 1;
    while (FG0CW00.FG0CWIDX <= FG0CW00.FG0CWNMO)
      ;
      if (FG0CW01.FG0CWFCF[FG0CWIDX] != "Y")
        set FG0CM001.FG0CMQTP[FG0CWIDX] skip;
      else
        set FG0CM001.FG0CMQTP[FG0CWIDX] normal;
      end
      ;
      FG0CW00.FG0CWIDX = FG0CW00.FG0CWIDX + 1;
      ;
    end
  end
  ;
  set FG0CM001.CATOAP initialAttributes;
  set FG0CM001.CAITEM initialAttributes;
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0CM001.XPCCD == "?" /* categroy code*/
   || FG0CM001.YPGCD == "?") /* product type group*/
    ;
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  else
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0CM001.XPCCD == "?") /* product category list*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "CATEGORY "; /* Heading*/
    ;
    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0CM001.XPCCD = FFWREC.XPCCD; /* product category*/
      XPCREC.XPCCD = FFWREC.XPCCD; /* product category*/
      XPCREC.XGPCD = COMMAREA.XGPCD; /* gpc code*/
      if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
        FG0CM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
      end
    else
      FG0CM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FG0CM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG0CM001.XPCCD cursor; /* Establish cursor position*/
    ;
  end
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type group codes*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0CM001.YPGCD == "?") /* product type grp list*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "TYPE"; /* Heading*/
    XX0XW02.YPGFFFL = "Y";
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0CM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FG0CM001.YPGABRV = FFWREC.YPGABRV; /* Restore prior code*/
    else
      FG0CM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FG0CM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG0CM001.YPGCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0C400

// Verify the entered data
Function FG0C500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FG0CM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* request for update of projected shipment qtys*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf13)
    ;
    FG0CS04(); /* verify modifiable fields*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate entry fields*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter)
    ;
    FG0C510(); /* validate entry fields*/
    ;
    /* ------------------------------------------------------*/
     /* if key data changed check modifiable fields*/
    /* ------------------------------------------------------*/
    ;
    FG0CW00.FG0CWWBD = FFWREC.FFABEGMO;
    FG0CW00.FG0CWWED = FFWREC.FFAENDMO;
    ;
    if (FG0CM001.YSMXDV != FFWREC.YSMXDV      /* div grp chg*/
     || FG0CM001.YSMXDV == " "                /* div grp chg*/
     || FG0CM001.YPGCD != FFWREC.YPGCD        /* product type grp chg*/
     || FG0CM001.YPGCD == " "                 /* product type grp chg*/
     || FG0CM001.XPCCD != FFWREC.XPCCD        /* product category chg*/
     || FG0CM001.XPCCD == " "                 /* product category chg*/
     || FG0CM001.FG0CMBRG != FG0CW00.FG0CWBYM /* beg range changed*/
     || FG0CM001.FG0CMBRG == 0                /* beg range changed*/
     || FG0CM001.FG0CMERG != FG0CW00.FG0CWEYM /* end range changed*/
     || FG0CM001.FG0CMERG == 0)               /* end range changed*/
      ;
      if (FG0CW01.CACHGFL == "Y")
        FG0CS04(); /* verify modifiable fields*/
      end
      ;
      if (converseVar.validationMsgNum == 0)
        FG0CW00.FG0CWSWR = "Y"; /* request data request*/
      end
    end
  end
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end
  ;
  ;
end // end FG0C500

// validate modifiable data
Function FG0C510()
  ;
   /* ------------------------------------------------------------*/
   /* init work fields*/
   /* ------------------------------------------------------------*/
  ;
  FG0CW00.FG0CWTCF = "N"; /* init total change flag*/
  FG0CW00.FG0CWMCF = "N"; /* init monthly change flag*/
  FG0CW00.FG0CWNM1 = 0; /* init numeric work field*/
  ;
   /* ------------------------------------------------------------*/
   /* validate user entered projected shipment qtys:*/
  ;
   /* if the total field was modified verify if entries were made*/
   /* in the monthly fields, if so, these fields are in error.*/
   /* if the total field was NOT modified verify the qtys entered*/
   /* in the monthly fields*/
   /* ------------------------------------------------------------*/
  if (FG0CW01.CACHGFL == "Y")
    ;
    if (FG0CW01.FG0CWQTP[FG0CWNMO] != FG0CM001.FG0CMQTP[FG0CWNMO])
      ;
      FG0CW00.FG0CWIDX = FG0CW00.FG0CWNMO - 1;
      while (FG0CW00.FG0CWIDX > 0)
        ;
        /* -------------------------------------------------*/
         /* determine if entry field changed*/
        /* -------------------------------------------------*/
        ;
        if (FG0CW01.FG0CWQTP[FG0CWIDX] != FG0CM001.FG0CMQTP[FG0CWIDX])
          converseLib.validationFailed(233);
          FFWREC.XXXMODID = "510";
          set FG0CM001.FG0CMQTP[FG0CWNMO] bold;
          set FG0CM001.FG0CMQTP[FG0CWIDX] cursor, bold;
        end
        ;
        /* -------------------------------------------------*/
         /* accumulate actual qtys*/
        /* -------------------------------------------------*/
        ;
        if (FG0CW01.FG0CWFCF[FG0CWIDX] != "Y" /* actual qtys*/
         && FG0CW01.FG0CWHDG[FG0CWIDX] != "SUBTOT"
         && FG0CW01.FG0CWHDG[FG0CWIDX] != " TOTAL")
          FG0CW00.FG0CWNM1 = FG0CW01.FG0CWUQP[FG0CWIDX] + FG0CW00.FG0CWNM1;
        end
        ;
        FG0CW00.FG0CWIDX = FG0CW00.FG0CWIDX - 1;
      end
      ;
      if (converseVar.validationMsgNum == 0)
        FFXREC.FFXCHAR = FG0CM001.FG0CMQTP[FG0CWNMO];
        XSFFS11();
        if (FFXREC.FFXRTNCD != 0)
          converseLib.validationFailed(10);
          FFWREC.XXXMODID = "510";
          set FG0CM001.FG0CMQTP[FG0CWNMO] cursor, bold;
        else
          if (FFXREC.FFXNUMB < FG0CW00.FG0CWNM1) /* lt total actual qty*/
            converseLib.validationFailed(149);
            FFWREC.XXXMODID = "510";
            set FG0CM001.FG0CMQTP[FG0CWNMO] cursor, bold;
          else
            if (FFXREC.FFXNUMB < 0) /* negative amount*/
              converseLib.validationFailed(117);
              FFWREC.XXXMODID = "510";
              set FG0CM001.FG0CMQTP[FG0CWNMO] cursor, bold;
            else
              FG0CW00.FG0CWTCF = "Y"; /* set total change flag*/
            end
          end
        end
      end
    else
      FG0CW00.FG0CWIDX = FG0CW00.FG0CWNMO;
      while (FG0CW00.FG0CWIDX > 0)
        ;
        if (FG0CW01.FG0CWQTP[FG0CWIDX] != FG0CM001.FG0CMQTP[FG0CWIDX]
         && FG0CW01.FG0CWHDG[FG0CWIDX] != "SUBTOT"
         && FG0CW01.FG0CWHDG[FG0CWIDX] != " TOTAL")
          ;
          FG0CW00.FG0CWMCF = "Y"; /* monthly change flag*/
          FFXREC.FFXCHAR = FG0CM001.FG0CMQTP[FG0CWIDX];
          XSFFS11();
          if (FFXREC.FFXRTNCD != 0)
            converseLib.validationFailed(10);
            FFWREC.XXXMODID = "510";
            set FG0CM001.FG0CMQTP[FG0CWIDX] cursor, bold;
          else
            if (FFXREC.FFXNUMB < 0)
              converseLib.validationFailed(117);
              FFWREC.XXXMODID = "510";
              set FG0CM001.FG0CMQTP[FG0CWIDX] cursor, bold;
            end
          end
        end
        ;
        FG0CW00.FG0CWIDX = FG0CW00.FG0CWIDX - 1;
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate div group using routine xsffs20*/
   /* ------------------------------------------------------------*/
  ;
  set YSMREC empty;
  YSMREC.YSMSUMCD = FG0CM001.YSMXDV;
  TA1REC.TA1PGMNM = "FG0C510";
  ;
  XSFFS20(); /* validate/get division group data*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    FG0CM001.YSMSMDSC = YSMREC.YSMSMDSC;
  else
    FG0CM001.YSMSMDSC = " ";
    converseLib.validationFailed(10);
    FFWREC.XXXMODID = "510";
    set FG0CM001.YSMXDV cursor, bold;
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate product category code*/
   /* ------------------------------------------------------------*/
  ;
  XPCREC.XGPCD = COMMAREA.XGPCD;
  XPCREC.XPCCD = FG0CM001.XPCCD;
  if (XPCREC.XPCKEY in XPCTBL.XPCKEY
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    FG0CM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
  else
    FG0CM001.XPCABRV = " ";
    converseLib.validationFailed(118);
    FFWREC.XXXMODID = "510";
    set FG0CM001.XPCCD cursor, bold;
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate product type group*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0CM001.YPGCD in YPGTBL.YPGCD
   && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    FG0CM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
  else
    FG0CM001.YPGABRV = " ";
    converseLib.validationFailed(118);
    FFWREC.XXXMODID = "510";
    set FG0CM001.YPGCD cursor, bold;
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate end yymm range and begin yymm range*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty;
  ;
  FFZREC.FFZSRANG = "Y";
  FFZREC.FFZBYYMM = FG0CM001.FG0CMBRG;
  FFZREC.FFZEYYMM = FG0CM001.FG0CMERG;
  ;
  XSFFS30(); /* edit date range*/
  ;
  if (FFZREC.FFZENDRC == "1")
    set FG0CM001.FG0CMERG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "510";
  else
    if (FFZREC.FFZENDRC == "2")
      set FG0CM001.FG0CMERG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "510";
    else
      if (FFZREC.FFZENDRC == "3")
        set FG0CM001.FG0CMERG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "510";
      end
    end
  end
  ;
  if (FFZREC.FFZBEGRC == "1")
    set FG0CM001.FG0CMBRG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "510";
  else
    if (FFZREC.FFZBEGRC == "2")
      set FG0CM001.FG0CMBRG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "510";
    else
      if (FFZREC.FFZBEGRC == "3")
        set FG0CM001.FG0CMBRG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "510";
      end
    end
  end
  ;
  ;
end // end FG0C510

// Process valid input request
Function FG0C600()
   /* ------------------------------------------------------------*/
   /* Indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/
  ;
  FG0CW00.FG0CWSWF = "Y"; /* set format map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA/ffwrec*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.YSMXDV = FG0CM001.YSMXDV; /* div group code*/
  FFWREC.YSMSMDSC = FG0CM001.YSMSMDSC; /* div group desc*/
  ;
  FFWREC.XPCCD = FG0CM001.XPCCD; /* product category code*/
  FFWREC.XPCABRV = FG0CM001.XPCABRV; /* product category abrv desc*/
  ;
  FFWREC.YPGCD = FG0CM001.YPGCD; /* product type grp code*/
  FFWREC.YPGABRV = FG0CM001.YPGABRV; /* product type grp abrv desc*/
  ;
  FFWREC.FFABEGMO = FFZREC.FFZBEGMO;
  FFWREC.FFAENDMO = FFZREC.FFZENDMO;
  ;
  if (FG0CW00.FG0CWSWR == "Y") /* KEY DATA MODIFIED*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if projected shipment data changed and pf13 was pressed*/
   /* update dfcast.vmcat001 projected shipment qtys*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf13
   && FFWREC.FFWMODSW == "Y") /* data modified switch*/
    ;
    XX0XS01(); /* get current date and time*/
    ;
    FG0CW00.FG0CWIDX = 1;
    while (FG0CW00.FG0CWIDX <= FG0CW00.FG0CWNMO) /* nbr of months loaded*/
      ;
      if (FG0CW01.FG0CWHDG[FG0CWIDX] != "SUBTOT"
       && FG0CW01.FG0CWHDG[FG0CWIDX] != " TOTAL")
        ;
        set FF7REC empty;
        FF7REC.FF4FCTMO = FG0CW01.FG0CWHDD[FG0CWIDX];
        ;
        FG0CS03(); /* Select MCAT*/
        ;
        FF7REC.FF7NLSHP = FG0CW01.FG0CWUQP[FG0CWIDX];
        ;
        if (SQLCA.VAGen_SQLCODE == 0) /* If row was found*/
          FG0C610(); /* Update MCAT*/
        else
          FG0C620(); /* Add MCAT*/
        end
        ;
      end
      FG0CW00.FG0CWIDX = FG0CW00.FG0CWIDX + 1;
    end
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();
    ;
    FFWREC.XXXMSGNO = 33;
    FFWREC.XXXMODID = "600";
    FFWREC.FFWMODSW = "N";
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Update working storage fields, if data has changed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0CW00.FG0CWTCF == "Y" /* Total entry changed*/
   || FG0CW00.FG0CWMCF == "Y") /* Monthly entry changed*/
    ;
    FFWREC.FFWMODSW = "Y"; /* Data modified switch*/
    ;
    FG0C630(); /* Process changed data*/
    ;
  end
  ;
  ;
end // end FG0C600

// Update MCAT
Function FG0C610()
   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/
  ;
  FF7REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF7REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
   /* ------------------------------------------------------------*/
   /* Update MCAT.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3700" ("U ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      FG0CW00.FG0CWSWR = "Y"; /* Request for data switch*/
      ;
      FFWREC.XXXMODID = "610"; /* Module identification*/
      FFWREC.XXXMSGNO = 20; /* Indicate updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "610"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE DFCAST.VMCAT001 TABLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0C610

// Add MCAT
Function FG0C620()
   /* ------------------------------------------------------------*/
   /* Format data.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.YPGCD == "01") /* if inlines*/
    FF7REC.FF7FURAT = 0;
    FF7REC.FF7FLLRT = 92;
  else
    if (FFWREC.YPGCD == "02") /* if makeups*/
      FF7REC.FF7FURAT = 100;
      FF7REC.FF7FLLRT = 100;
    end
  end
  ;
  FF7REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  FF7REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF7REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
   /* ------------------------------------------------------------*/
   /* Update MCAT.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3700" ("A ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "620"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0C620

// Process changed data
Function FG0C630()
   /* --------------------------------------------------*/
   /* Process changed data.*/
   /* --------------------------------------------------*/
  ;
  if (FG0CW00.FG0CWTCF == "Y") /* total entry changed*/
    ;
    FFXREC.FFXCHAR = FG0CM001.FG0CMQTP[FG0CWNMO];
    XSFFS11(); /* numeric value 'FFXREC.FFXNUMB'*/
    ;
    /* ----------------------------------------------*/
     /* Subtract actual qtys from the MAP total field*/
    /* ----------------------------------------------*/
    ;
    FG0CW00.FG0CWNFM = 0; /* init nbr of fcst mos*/
    FG0CW00.FG0CWIDX = 1; /* init index*/
    while (FG0CW00.FG0CWIDX <= FG0CW00.FG0CWNMO) /* nbr of months loaded*/
      ;
      if (FG0CW01.FG0CWHDG[FG0CWIDX] != "SUBTOT"
       && FG0CW01.FG0CWHDG[FG0CWIDX] != " TOTAL")
        ;
        if (FG0CW01.FG0CWFCF[FG0CWIDX] != "Y") /* actual qty*/
          FFXREC.FFXNUMB = FFXREC.FFXNUMB - FG0CW01.FG0CWUQP[FG0CWIDX];
        else
          FG0CW00.FG0CWNFM = FG0CW00.FG0CWNFM + 1;
        end
      end
      FG0CW00.FG0CWIDX = FG0CW00.FG0CWIDX + 1;
    end
    ;
    /* -----------------------------------------------------*/
     /* Calculate monthly qtys: map total / nbr of fcst mos*/
    /* -----------------------------------------------------*/
    ;
    FG0CW00.FG0CWNM1 = FFXREC.FFXNUMB; /* total entry*/
    FG0CW00.FG0CWIDX = 1; /* init index*/
    while (FG0CW00.FG0CWIDX <= FG0CW00.FG0CWNMO) /* nbr of months loaded*/
      ;
      if (FG0CW01.FG0CWHDG[FG0CWIDX] != "SUBTOT"
       && FG0CW01.FG0CWHDG[FG0CWIDX] != " TOTAL")
        ;
        if (FG0CW01.FG0CWFCF[FG0CWIDX] == "Y") /* fcst qty*/
          FG0CW01.FG0CWUQP[FG0CWIDX] = mathLib.round(FG0CW00.FG0CWNM1 / FG0CW00.FG0CWNFM, -mathLib.decimals(FG0CW01.FG0CWUQP[FG0CWIDX]));
          FFXREC.FFXNUMB = FG0CW01.FG0CWUQP[FG0CWIDX]; /* units*/
          XSFFS10();
          FG0CW01.FG0CWQTP[FG0CWIDX] = FFXREC.FFXCHAR; /* 1000*/
        end
      end
      FG0CW00.FG0CWIDX = FG0CW00.FG0CWIDX + 1;
    end
  end
  ;
   /* --------------------------------------------------*/
   /* Process MONTHLY entries*/
   /* --------------------------------------------------*/
  ;
  if (FG0CW00.FG0CWMCF == "Y") /* monthly entries changed*/
    ;
    /* ----------------------------------------------*/
     /* Load new monthly qtys*/
    /* ----------------------------------------------*/
    ;
    FG0CW00.FG0CWIDX = 1; /* init index*/
    while (FG0CW00.FG0CWIDX <= FG0CW00.FG0CWNMO) /* nbr of months loaded*/
      ;
      if (FG0CW01.FG0CWHDG[FG0CWIDX] != "SUBTOT"
       && FG0CW01.FG0CWHDG[FG0CWIDX] != " TOTAL")
        ;
        if (FG0CW01.FG0CWFCF[FG0CWIDX] == "Y") /* fcst qty*/
          ;
          FFXREC.FFXCHAR = FG0CM001.FG0CMQTP[FG0CWIDX];
          XSFFS11(); /* numeric value*/
          FG0CW01.FG0CWUQP[FG0CWIDX] = FFXREC.FFXNUMB; /* units*/
          XSFFS10();
          FG0CW01.FG0CWQTP[FG0CWIDX] = FFXREC.FFXCHAR; /* 1000*/
        end
      end
      FG0CW00.FG0CWIDX = FG0CW00.FG0CWIDX + 1;
    end
  end
  ;
   /* -----------------------------------------------------*/
   /* Recalculate subtotals and total qtys*/
   /* -----------------------------------------------------*/
  ;
  FG0CW00.FG0CWUTT = 0; /* init numeric work field*/
  FG0CW00.FG0CWIDX = 1; /* init index*/
  while (FG0CW00.FG0CWIDX < FG0CW00.FG0CWNMO) /* nbr of months loaded*/
    ;
    if (FG0CW01.FG0CWHDG[FG0CWIDX] == "SUBTOT")
      FG0CW01.FG0CWUQP[FG0CWIDX] = FG0CW00.FG0CWUTT;
      FFXREC.FFXNUMB = FG0CW00.FG0CWUTT;
      XSFFS10();
      FG0CW01.FG0CWQTP[FG0CWIDX] = FFXREC.FFXCHAR;
    end
    ;
    if (FG0CW01.FG0CWHDG[FG0CWIDX] != "SUBTOT"
     && FG0CW01.FG0CWHDG[FG0CWIDX] != " TOTAL")
      ;
      FG0CW00.FG0CWUTT = FG0CW01.FG0CWUQP[FG0CWIDX] + FG0CW00.FG0CWUTT;
    end
    ;
    FG0CW00.FG0CWIDX = FG0CW00.FG0CWIDX + 1;
  end
  ;
  FFXREC.FFXNUMB = FG0CW00.FG0CWUTT;
  XSFFS10();
  FG0CW01.FG0CWQTP[FG0CWIDX] = FFXREC.FFXCHAR;
  ;
  FG0CW00.FG0CWTCF = "N"; /* init total chg flag*/
  FG0CW00.FG0CWMCF = "N"; /* monthly chg flag*/
  ;
  ;
end // end FG0C630

// Expand date ranges
Function FG0CS01()
   /* ------------------------------------------------------------*/
   /* get all months within requested date range*/
   /* ------------------------------------------------------------*/
  ;
  FFZREC.FFZMONTH = 1;
  FFZREC.FFZSRANG = "Y";
  ;
  XSFFS30();
  ;
  if (FFZREC.FFZENDRC == "1")
    set FG0CM001.FG0CMERG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "S01";
  else
    if (FFZREC.FFZENDRC == "2")
      set FG0CM001.FG0CMERG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "S01";
    else
      if (FFZREC.FFZENDRC == "3")
        set FG0CM001.FG0CMERG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "S01";
      end
    end
  end
  ;
  if (FFZREC.FFZBEGRC == "1")
    set FG0CM001.FG0CMBRG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "S01";
  else
    if (FFZREC.FFZBEGRC == "2")
      set FG0CM001.FG0CMBRG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "S01";
    else
      if (FFZREC.FFZBEGRC == "3")
        set FG0CM001.FG0CMBRG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "S01";
      end
    end
  end
  ;
  ;
end // end FG0CS01

// Get actual proj ship qtys
Function FG0CS02()
  ;
   /* ------------------------------------------------------------*/
   /* obtain historical actual proj ship quantities.*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFBEGMO = FFZREC.FFZINDMO[FG0CWIDX];
  FFFREC.FFFENDMO = FFZREC.FFZINDMO[FG0CWIDX];
  ;
  set FH6REC empty;
  ;
  FH6REC.XPCCD = FFWREC.XPCCD; /* product category*/
  FH6REC.XDVCD = FFWREC.YSMXDV; /* division code*/
  FH6REC.XPRCD = FFWREC.YPGCD; /* product type code*/
  FH6REC.XLCCD = "10"; /* life cycle code*/
  FH6REC.XCTCD = "USA"; /* country code*/
  FH6REC.XQACD = "01"; /* quality code*/
  FH6REC.YSMXOT = "*"; /* sum code*/
  FH6REC.XDSCD = "*"; /* direct ship code*/
  TA1PGMNM = "FG0CS02"; /* calling process*/
  ;
   /* --------------------------------------------------*/
   /* select sum on dfhist.vctshp01 table*/
   /* --------------------------------------------------*/
  ;
  XSFFS52();
  ;
  FG0CW00.FG0CWUPS = FH6REC.FH5MSHQT - FH6REC.FH5RTSQT;
  ;
  ;
end // end FG0CS02

// Select MCAT
Function FG0CS03()
  ;
   /* ------------------------------------------------------------*/
   /* obtain fcst projected shipment qtys*/
   /* ------------------------------------------------------------*/
  ;
  FF7REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF7REC.XCTCD = "USA"; /* Foreign country code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* Product categroy code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  ;
   /* ------------------------------------------------------------*/
   /* select dfcast.vmcat001*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or zero total, return to the previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* selection not found*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indisgrpe that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S03"; /* Module identifisgrpion*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indisgrpe not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indisgrpe system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VMCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program applisgrpion*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0CS03

// verify modifiable fields
Function FG0CS04()
   /* -----------------------------------------------------*/
   /* verify entry fields*/
   /* -----------------------------------------------------*/
  ;
  FG0CW00.FG0CWIDX = 1;
  while (FG0CW00.FG0CWIDX <= FG0CW00.FG0CWNMO) /* nbr of months loaded*/
    ;
    if (FG0CM001.FG0CMQTP[FG0CWIDX] != FG0CW01.FG0CWQTP[FG0CWIDX])
      set FG0CM001.FG0CMQTP[FG0CWIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S04";
    end
    ;
    FG0CW00.FG0CWIDX = FG0CW00.FG0CWIDX + 1;
    ;
  end
  ;
  if (converseVar.eventKey not enter)
    ;
    if (FG0CM001.YSMXDV != FFWREC.YSMXDV)
      set FG0CM001.YSMXDV cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S04";
    end
    ;
    if (FG0CM001.XPCCD != FFWREC.XPCCD)
      set FG0CM001.XPCCD cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S04";
    end
    ;
    if (FG0CM001.YPGCD != FFWREC.YPGCD)
      set FG0CM001.YPGCD cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S04";
    end
    ;
    FG0CW00.FG0CWWED = FFWREC.FFAENDMO;
    if (FG0CM001.FG0CMERG != FG0CW00.FG0CWEYM)
      set FG0CM001.FG0CMERG cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S04";
    end
    ;
    FG0CW00.FG0CWWBD = FFWREC.FFABEGMO;
    if (FG0CM001.FG0CMBRG != FG0CW00.FG0CWBYM)
      set FG0CM001.FG0CMBRG cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S04";
    end
  end
  ;
  ;
end // end FG0CS04

//*** RECORD=FG0CW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FG0CW00 type basicRecord
  10 FG0CWSWR FG0CWSWR ; 
  10 FG0CWSWF FG0CWSWF ; 
  10 FG0CWMCF FG0CWMCF ; 
  10 FG0CWTCF FG0CWTCF ; 
  10 FG0CWUTT FG0CWUTT ; 
  10 FG0CWUPS FG0CWUPS ; 
  10 FG0CWNFM FG0CWNFM ; 
  10 FG0CWNMO FG0CWNMO ; 
  10 FG0CWNM1 FG0CWNM1 ; 
  10 FG0CWNM2 FG0CWNM2 ; 
  10 FG0CWIDX FG0CWIDX ; 
  10 FG0CWLIX FG0CWLIX ; 
  10 FG0CWWDT FG0CWWDT ; 
    15 * num(3) ; 
    15 FG0CWWCC FG0CWWCC ; 
    15 FG0CWWYM FG0CWWYM ; 
      20 FG0CWWYY FG0CWWYY ; 
      20 FG0CWWMM FG0CWWMM ; 
  10 FG0CWWBD FG0CWWBD ; 
    15 * num(3) ; 
    15 FG0CWBCC FG0CWBCC ; 
    15 FG0CWBYM FG0CWBYM ; 
      20 FG0CWBYY FG0CWBYY ; 
      20 FG0CWBMM FG0CWBMM ; 
  10 FG0CWWED FG0CWWED ; 
    15 * num(3) ; 
    15 FG0CWECC FG0CWECC ; 
    15 FG0CWEYM FG0CWEYM ; 
      20 FG0CWEYY FG0CWEYY ; 
      20 FG0CWEMM FG0CWEMM ; 
  10 FG0CWICD FG0CWICD ; 
    15 FG0CWIYM FG0CWIYM ; 
      20 FG0CWICC FG0CWICC ; 
      20 FG0CWIYY FG0CWIYY ; 
      20 FG0CWIMM FG0CWIMM ; 
    15 FG0CWIDD FG0CWIDD ; 
  10 FG0CWCWD FG0CWCWD ; 
    15 FG0CWCYM FG0CWCYM ; 
      20 FG0CWCCC FG0CWCCC ; 
      20 FG0CWCYY FG0CWCYY ; 
      20 FG0CWCMM FG0CWCMM ; 
    15 FG0CWCDD FG0CWCDD ; 
  10 FG0CWCRD FG0CWCRD ; 
  10 FG0CWCD1 FG0CWCD1 ; 
end // end FG0CW00

//*** RECORD=FG0CW01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// ***********************
Record FG0CW01 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 FG0CWPBD FG0CWPBD [2] ; 
  10 FG0CWPED FG0CWPED [2] ; 
  10 FG0CWHDG FG0CWHDG [14] ; 
    15 FG0CWHDD FG0CWHDD ; 
      20 * num(5) ; 
      20 FG0CWDH1 FG0CWDH1 ; 
  10 FG0CWUQ1 FG0CWUQ1 [14] ; 
  10 FG0CWHQ1 FG0CWHQ1 [14] ; 
  10 FG0CWUQ2 FG0CWUQ2 [14] ; 
  10 FG0CWHQ2 FG0CWHQ2 [14] ; 
  10 FG0CWFCF FG0CWFCF [14] ; 
  10 FG0CWUQP FG0CWUQP [14] ; 
  10 FG0CWQTP FG0CWQTP [14] ; 
end // end FG0CW01

// begin century
DataItem FG0CWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range month
DataItem FG0CWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year and month
DataItem FG0CWBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range year
DataItem FG0CWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work century
DataItem FG0CWCCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date - 1 month
DataItem FG0CWCD1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current work day
DataItem FG0CWCDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work month
DataItem FG0CWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date
DataItem FG0CWCRD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date ccyymmdd
DataItem FG0CWCWD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current work ccyymm
DataItem FG0CWCYM num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work year
DataItem FG0CWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0CWDH1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end century
DataItem FG0CWECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range month
DataItem FG0CWEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end year and month
DataItem FG0CWEYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range year
DataItem FG0CWEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// proj ship fcst qty
DataItem FG0CWFCF char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// monthly date ccyymm
DataItem FG0CWHDD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// monthly/subtotal/total hdgs
DataItem FG0CWHDG char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// historical qtys 1 yrs 1000
DataItem FG0CWHQ1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// historical qtys 2 yrs 1000
DataItem FG0CWHQ2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// invoice work century
DataItem FG0CWICC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice compare date
DataItem FG0CWICD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// invoice work day
DataItem FG0CWIDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem FG0CWIDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice work month
DataItem FG0CWIMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice ccyymm
DataItem FG0CWIYM num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice work year
DataItem FG0CWIYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// load index
DataItem FG0CWLIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// monthly change flag
DataItem FG0CWMCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nbr of fcst months
DataItem FG0CWNFM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 1
DataItem FG0CWNM1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 2
DataItem FG0CWNM2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nbr of months loaded
DataItem FG0CWNMO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical begin date ranges
DataItem FG0CWPBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// historical end date ranges
DataItem FG0CWPED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// projected shipment 1000
DataItem FG0CWQTP char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FG0CWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FG0CWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total change flag
DataItem FG0CWTCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// proj ship work field
DataItem FG0CWUPS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical qtys 1 yrs units
DataItem FG0CWUQ1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical qtys 2 yrs units
DataItem FG0CWUQ2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// projected shipment units
DataItem FG0CWUQP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total work field
DataItem FG0CWUTT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work begin date
DataItem FG0CWWBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work century
DataItem FG0CWWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date
DataItem FG0CWWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work begin date
DataItem FG0CWWED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work month
DataItem FG0CWWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year and month
DataItem FG0CWWYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FG0CWWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

