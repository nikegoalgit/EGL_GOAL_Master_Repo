package fg0n;

import corpcom1.CACHGFL;
import corpcom2.XPCREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFF001;
import corpcom3.XPXPC01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS-FF5570;
import corpcom4.XSFFS01;
import corpcom4.XSFFS10;
import corpcom4.XSFFS30;
import corpcom4.XSFFS54;
import corpcom4.XSFFS56;
import corpcom4.XSFFS65;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XDMCD;
import corpx1.XPCTBL;
import corpy2.YPGTBL;
import ff.common.FF1REC;
import ff.common.FF2REC;
import ff.common.FF3REC;
import ff.common.FF8REC;
import ff.common.FF9REC;
import ff.common.FFFREC;
import ff.common.FFW-ND-SHP-IND;
import ff.common.FFWREC;
import ff.common.FFXREC;
import ff.common.FFZREC;
import fh.common.FH1REC;
import fh.common.FH5REC;
import pg.common.PG2REC;
import pg.common.PG4REC;
import pg.common.PG7REC;
import sy.common.SY1STNBR;
import sy.common.SY2CLRID;
import sy.common.SYBSTGNB;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=FG0N ****
// This application allows a user to inquire the monthly long
// range sales forecast by style color for a given range
// of months. The required range could be any period of time,
// past, current or furture. The user may inquire the forecast
// by type grp, category, and need month or ship month.
// 
// All quanitites on the screen are in thousands.
// 
// The user can specify the number of months in the season and
// he has the flexibility to view 4 months, or 6 month seasons
// with varying subtotals.
// 
// The user may use appropriate attention key to scroll the
// screen backwards, forwards, left and right.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from either of the screens.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          02/15/90  RGILLI  New application.
// FF#18    05/30/90  JJUCH   Display sales fcst on closeout
//                            month at style color level
//          08/01/90  RHETRI  Chg display sty nm to sty nbr
// FF#134   08/21/90  SFORD   Set job completed msg flag = 'y'
// Fix      08/23/90  JJUCH   Zero out the qtys which are after
//                            the closeout month.
// FF1037   09/26/90  RHETRI  Re-wrote obtain data section.
// Fix      10/04/90  JJUCH   - Skip the stygrp and styclr with
//                              no actual qtys.
//                            - Fixed the problem of dropping
//                              stygrps and styclrs.
// Fix      10/15/90  JJUCH   Qualify category code when access
//                            DFHIST.VSYSHP01 with "SG" func.
// Fix      10/25/90  MDANG   Add new select to Max price table
//                            for NIL to make sure the proper
//                            Max price and Close out month are
//                            selected.
// Fix      03/28/91  JJUCH   Stop reporting the sales qty in
//                            the actual closeout month.
// Fix      04/04/91  JJUCH   Fixed the problem of showing
//                            apperal categories in pop-up
//                            window.
// FF1095   09/19/91  LDELUH  Chg calls to SYDVL to include
//                            product type.
// FF1106   02/06/92  LDELUH  Allow combined countries & div.
// FFMAINT  02/21/92  LDELUH  Remove sales region logic.
// FF1111   05/06/92  JJUCH   Allow varying length season.
// FF301    05/20/92  JJUCH   Remove proj clsout mo restriction
// Fix      06/23/92  JJUCH   Stop reporting clsout stygrp.
// FF329    08/06/92  JJUCH   Fixed PCT calculated problem
//                            when stygrp cross two pages and
//                            scrolling was performed.
// FF394    03/23/93  JJUCH   Change to send report to BUNDLE.
// FF367    03/29/93  JJUCH   Change to accommodate the NIL
//                            management region process.
//          09/10/93  JJUCH   Convert to CSP V4.1 version.
// ff-409   04/04/94  mwalke  Enhancement for dmnd based sales.
//                            Deleted print function.
//                            Deleted ctry cd and desc and
//                            summary division cd and desc.
//                            Added need/ship month indicator.
// FF175    12/10/96  DSMITH  Changed the date range fill
//                            character to '0'.
// *********************
Program FG0N type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF3REC FF3REC; // record
  FF8REC FF8REC; // record
  FF9REC FF9REC; // record
  FFFREC FFFREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  FG0NW00 FG0NW00; // record
  FG0NW01 FG0NW01; // record
  FG0NW02 FG0NW02; // record
  FG0NW03 FG0NW03; // record
  FG0NW05 FG0NW05; // record
  FH1REC FH1REC; // record
  FH5REC FH5REC; // record
  PG2REC PG2REC; // record
  PG4REC PG4REC; // record
  PG7REC PG7REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPCTBL; // table
  use YPGTBL; // table
  use FG0NM.FG0NM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FFFREC empty; /* Special function parameters*/
    set FG0NM001 initial; /* M001 input/output*/
    set FG0NW00 empty; /* Working storage*/
    set FG0NW01 empty; /* m001 display storage*/
    set FG0NW02 empty; /* M001 temporary storage*/
    set FG0NW03 empty; /* M001 totals display storage*/
    set FG0NW05 empty; /* m001 detail format*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine work area*/
    set TA5REC empty; /* temp storage queue area*/
    set TA6REC empty; /* jcl submit work area*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    FG0NW00.XXXTSLEN = 2042; /* temp storage length*/
    ;
    FG0NW00.FG0NWSWR = "N"; /* Request for data switch*/
    FG0NW00.FG0NWSWF = "Y"; /* format screen data switch*/
    FG0NW00.FG0NW-NEXT = "N"; /* next season flag*/
    move "N" to FG0NW00.FG0NW-PMON[1] for all; /* print remaining month flag*/
    FG0NW00.FG0NWSWD = "1"; /* map switch*/
    FG0NW00.FG0NWSNX = 1; /* season index*/
    FG0NW00.FG0NWPGX = 1; /* page index*/
    FG0NW00.XXXTSPAG = 1; /* page number*/
    ;
     /* ---------------------------------------------------*/
     /* Clear unused fields*/
     /* ---------------------------------------------------*/
    ;
    FFWREC.XPLCD = " "; /* Clear product line code*/
    FFWREC.XPLABRV = " "; /* Clear product line abrv*/
    FFWREC.SYBSTGNB = " "; /* Clear style group number*/
    FFWREC.SYBSTGNM = " "; /* Clear style group name*/
    FFWREC.SY1STNBR = " "; /* Clear style number*/
    FFWREC.SY2CLRID = " "; /* Clear color id*/
    FFWREC.XDMCD = " "; /* Clear dimension code*/
    FFWREC.SY1SSTNM = " "; /* Clear short style name*/
    FFWREC.SY2CLRAB = " "; /* Clear color abrv*/
    FFWREC.XDMABRV = " "; /* Clear dimension abrv*/
    ;
     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.FFW-ND-SHP-IND == " ")
      FFWREC.FFW-ND-SHP-IND = "N";
    end
    ;
     /* ------------------------------------------------------------*/
     /* product type group*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.YPGCD == " ")
      FFWREC.YPGCD = "01";
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end
    ;
     /* ------------------------------------------------------------*/
     /* number of months per season*/
     /* ------------------------------------------------------------*/
    ;
    FG0NW00.FG0NWSIN = 6; /* default months per season*/
    ;
     /* ------------------------------------------------------------*/
     /* determine if data is to be loaded*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.FFABEGMO != 0
     && FFWREC.FFAENDMO != 0
     && FFWREC.XPCCD != " "
     && FFWENDM1 != 0)
      FG0NW00.FG0NWSWR = "Y"; /* set data request flag*/
    end
    ;
     /* ------------------------------------------------------------*/
     /* Flow to first time through date validation*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0N000; /* Converse the main process*/
    ;
    FG0N000: FG0N000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0N001; /* Converse the main process*/
    ;
    FG0N001: FG0N001();
     /* ------------------------------------------------------------*/
     /* flow to converse the main process used to display a map*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0N001; /* converse the main process*/
    ;
  end // end main
end // end FG0N

// fetch vsyshp01 sty grp sls
Function FG0N-1411()
   /* ------------------------------------------------------------*/
   /* Obtain historical need month based sales quantities.*/
   /* Load fh5rec record - dfhist.vsyshp01, note:  ffabegmo and*/
   /* ffaendmo loaded in fg0n140.*/
   /* ------------------------------------------------------------*/
  ;
  set FH5REC empty;
  ;
  FH5REC.XLCCD = "10"; /* life cycle code*/
  FH5REC.XQACD = "01"; /* quality code*/
  FH5REC.YSMXOT = "*"; /* sum code*/
  FH5REC.FH1PNAC = "*"; /* national account flag*/
  FH5REC.XPRCD = FFWREC.YPGCD; /* product code*/
  ;
   /* sty grp nbr is passed to subroutine through style number*/
  FH5REC.SY1STNBR = PG7REC.SYBSTGNB;
  ;
   /* catg cd is passed to subroutine through division code*/
  FH5REC.XDVCD = FFWREC.XPCCD;
  ;
  TA1PGMNM = "FG0N141"; /* calling process*/
  ;
   /* --------------------------------------------------*/
   /* select on dfhist.vsyshp01 table*/
   /* --------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "SN";
  ;
  XSFFS54();
  ;
  ;
end // end FG0N-1411

// fetch carryover qty
Function FG0N-1413()
   /* ------------------------------------------------------------*/
   /* Obtain carryover quantities from dfhist.voqcat01*/
   /* Beginning and ending dates are set in fg0n140.*/
   /* ------------------------------------------------------------*/
  ;
   /* use sty nbr to pass the sty grp nbr to the subroutine*/
  FH1REC.SY1STNBR = PG7REC.SYBSTGNB; /* style number*/
  ;
   /* use div cd to pass the catg cd to the subroutine*/
  FH1REC.XDVCD = FFWREC.XPCCD; /* category code*/
  ;
   /* use dim cd to pass the type group cd to the subroutine*/
  FH1REC.XDMCD = FFWREC.YPGCD; /* product type group code*/
  ;
  FH1REC.XLCCD = "10"; /* life cycle code*/
  FH1REC.XQACD = "01"; /* quality code*/
  FH1REC.FH1PNAC = "*"; /* product national acct fl*/
  ;
  TA1REC.TA1PGMNM = "N-1413 "; /* calling processing*/
  ;
  FFFREC.FFFFUNCD = "SG"; /* Summarize by style group*/
  ;
  XSFFS-FF5570();
  ;
  ;
end // end FG0N-1413

// Decl & open cursor on vffsty01
Function FG0N-1451()
   /* ------------------------------------------------------------*/
   /* Format keys for call to dfcast.vffsty01.*/
   /* ------------------------------------------------------------*/
  ;
  FF3REC.YPGCD = FFWREC.YPGCD; /* type group code*/
  FF3REC.XLCCD = "10"; /* life cycle code*/
  FF3REC.YSMXDV = "10"; /* Dom*/
  ;
   /* ------------------------------------------------------------*/
   /* Open DFCAST.VFFSTY01.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3990" ("S1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
    return;
    ;
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "145"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S1 ON DFCAST.VFFSTY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0N-1451

// Get 1st rec from vffsty01
Function FG0N-1452()
   /* ------------------------------------------------------------*/
   /* Fetch dfcast.vffsty01 record.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3990" ("N1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "145"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DFCAST.VFFSTY01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0N-1452

// close cursor vffsty01
Function FG0N-1453()
   /* ------------------------------------------------------------*/
   /* Close dfcast.vffsty01 cursor.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3990" ("C1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
    return;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "145"; /* Module identification*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE S1 DFCAST.VFFSTY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0N-1453

// fetch vmsgrp01 rec
Function FG0N-1461()
   /* ------------------------------------------------------------*/
   /* Select sum on dfcast.vmsgrp01 table.*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "SS"; /* function code*/
  ;
   /* ------------------------------------------------------------*/
   /* load ff8rec record - dfcast.vmsgrp001*/
   /* ------------------------------------------------------------*/
  ;
  set FF8REC empty; /* Clear row storage area*/
  ;
  FF8REC.YSMXDV = "10";
  FF8REC.XCTCD = "*";
  FF8REC.YPGCD = FFWREC.YPGCD; /* type group code*/
  FF8REC.SYBSTGNB = PG7REC.SYBSTGNB; /* style grp nbr*/
  ;
   /* ------------------------------------------------------------*/
   /* select sum dfcast.vmsgrp001*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3730" (FFFREC, SQLCA, FF8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or zero total, return to the previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* zero total returned*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indisgrpe that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "146"; /* Module identifisgrpion*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indisgrpe not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indisgrpe system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUM TABLE DFCAST.VMSGRP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF8REC.FF8KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0N-1461

// Calc product nd mo sales
Function FG0N-1731()
   /* ------------------------------------------------------------*/
   /* Obtain historical need month based sales quantities.*/
   /* Load FH5REC record - dfhist.vsyshp01, note:  ffabegmo and*/
   /* ffaendmo loaded in calling process.*/
   /* ------------------------------------------------------------*/
  ;
  FG0NS02();
  ;
  FG0NW00.FG0NWUHS = FG0NW00.FG0NWUHS + FH5REC.FH5MSHQT;
  ;
   /* --------------------------------------------------------*/
   /* Check for carryover*/
   /* --------------------------------------------------------*/
  ;
  if (FFZREC.FFZINDMO[FG0NWPIX] <= FG0NW00.FG0NW-CURR-MO-MINUS1
   && FFZREC.FFZINDMO[FG0NWPIX] >= FG0NW00.FG0NW-CURR-MO-MINUS4)
    ;
    ;
    if (FFZREC.FFZINDMO[FG0NWPIX] == FG0NW00.FG0NW-CURR-MO-MINUS3
     || FFZREC.FFZINDMO[FG0NWPIX] == FG0NW00.FG0NW-CURR-MO-MINUS4)
      set FH1REC empty;
      FH1REC.YSMXOT = "*";
      FG0NS03(); /* get open qtys from voqsty01*/
      FH1REC.FH1PAQTY = FH1REC.FH1ALQTY + FH1REC.FH1PAQTY;
      FH1REC.FH1PAQTY = mathLib.round(FH1REC.FH1PAQTY * .5, -mathLib.decimals(FH1REC.FH1PAQTY));
      FG0NW00.FG0NWUHS = FG0NW00.FG0NWUHS + FH1REC.FH1PAQTY;
    end
    ;
    ;
    if (FFZREC.FFZINDMO[FG0NWPIX] == FG0NW00.FG0NW-CURR-MO-MINUS2)
      set FH1REC empty;
      FH1REC.YSMXOT = "FT";
      FG0NS03(); /* get open qtys from voqsty01*/
      FH1REC.FH1PAQTY = mathLib.round((FH1REC.FH1PAQTY + FH1REC.FH1ALQTY)       * FF2REC.FFQOCOFP / 100, -mathLib.decimals(FH1REC.FH1PAQTY));
      FG0NW00.FG0NWUHS = FG0NW00.FG0NWUHS + FH1REC.FH1PAQTY;
      ;
      set FH1REC empty;
      FH1REC.YSMXOT = "PR";
      FG0NS03(); /* get open qtys from voqsty01*/
      FH1REC.FH1PAQTY = mathLib.round((FH1REC.FH1PAQTY + FH1REC.FH1ALQTY)       * FF2REC.FFQOCOPP / 100, -mathLib.decimals(FH1REC.FH1PAQTY));
      FG0NW00.FG0NWUHS = FG0NW00.FG0NWUHS + FH1REC.FH1PAQTY;
      ;
    end
    ;
    ;
    if (FFZREC.FFZINDMO[FG0NWPIX] == FG0NW00.FG0NW-CURR-MO-MINUS1)
      set FH1REC empty;
      FH1REC.YSMXOT = "FT";
      FG0NS03(); /* get open qtys from voqsty01*/
      FH1REC.FH1PAQTY = mathLib.round((FH1REC.FH1PAQTY + FH1REC.FH1ALQTY)       * FF2REC.FFQLCOFP / 100, -mathLib.decimals(FH1REC.FH1PAQTY));
      FG0NW00.FG0NWUHS = FG0NW00.FG0NWUHS + FH1REC.FH1PAQTY;
      ;
      set FH1REC empty;
      FH1REC.YSMXOT = "PR";
      FG0NS03(); /* get open qtys from voqsty01*/
      FH1REC.FH1PAQTY = mathLib.round((FH1REC.FH1PAQTY + FH1REC.FH1ALQTY)       * FF2REC.FFQLCOPP / 100, -mathLib.decimals(FH1REC.FH1PAQTY));
      FG0NW00.FG0NWUHS = FG0NW00.FG0NWUHS + FH1REC.FH1PAQTY;
      ;
    end
  end
  ;
  ;
end // end FG0N-1731

// one time validation process
Function FG0N000()
  ;
   /* ------------------------------------------------------------*/
   /* validate begin and end dates if request for data switch*/
   /* has been set to yes*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0NW00.FG0NWSWR != "Y")
    ;
    return;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* verify begin and end dates passed using xsffs30*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty;
  FFZREC.FFZMONTH = 1;
  FFZREC.FFZSRANG = "Y";
  FFZREC.FFZBEGMO = FFWREC.FFABEGMO;
  FFZREC.FFZENDMO = FFWREC.FFAENDMO;
  ;
  XSFFS30();
  ;
  if (FFZREC.FFZENDRC == "1")
    set FG0NM001.FG0NMERG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "000";
  else
    if (FFZREC.FFZENDRC == "2")
      set FG0NM001.FG0NMERG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "000";
    else
      if (FFZREC.FFZENDRC == "3")
        set FG0NM001.FG0NMERG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "000";
      end
    end
  end
  ;
  if (FFZREC.FFZBEGRC == "1")
    set FG0NM001.FG0NMBRG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "000";
  else
    if (FFZREC.FFZBEGRC == "2")
      set FG0NM001.FG0NMBRG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "000";
    else
      if (FFZREC.FFZBEGRC == "3")
        set FG0NM001.FG0NMBRG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "000";
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* if date range is in error load default field values*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0)
    FG0NM001.YPGCD = FFWREC.YPGCD;
    FG0NM001.YPGABRV = FFWREC.YPGABRV;
    FG0NM001.XPCCD = FFWREC.XPCCD;
    FG0NM001.XPCABRV = FFWREC.XPCABRV;
    FG0NM001.FFW-ND-SHP-IND = FFWREC.FFW-ND-SHP-IND;
    FG0NW00.FG0NWPIX = 1;
    while (FG0NW00.FG0NWPIX <= 4)
      FG0NM001.FG0NMSEM[FG0NWPIX] = FG0NW00.FG0NWSEM[FG0NWPIX];
      FG0NW00.FG0NWPIX = FG0NW00.FG0NWPIX + 1;
    end
  end
  ;
  ;
end // end FG0N000

// L.R. forecast style/colr inq
Function FG0N001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FG0N100(); /* Obtain the data to display*/
  ;
  FG0N200(); /* Format and display the map*/
  ;
  FG0N300(); /* Check attention identifier*/
  ;
  FG0N400(); /* Reset fields to normal intensity*/
  ;
  FG0N500(); /* Verify the entered data*/
  ;
  FG0N600(); /* Process valid input request*/
  ;
  ;
end // end FG0N001

// Obtain data for display
Function FG0N100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0NW00.FG0NWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Calculate no of seasons and no of months in each season.*/
   /* ------------------------------------------------------------*/
  ;
  FG0NS33();
  ;
   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  ;
  FG0NS01(); /* Purge any temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain current date using routine xx0xs01.*/
   /* Obtain invoice cutoff date from dfcast.vffctl01.*/
   /* Calculate program dates.*/
   /* ------------------------------------------------------------*/
  ;
  FG0N110();
  ;
   /* ------------------------------------------------------------*/
   /* Select carryover percentages from dfcast.vffxrf01 if requested*/
   /* date range within current minus one month or current minus*/
   /* two months.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0NW00.FG0NW-CURR-MO-MINUS1 >= FFWREC.FFABEGMO
   && FG0NW00.FG0NW-CURR-MO-MINUS1 <= FFWREC.FFAENDMO)
    FG0N115();
  else
    if (FG0NW00.FG0NW-CURR-MO-MINUS2 >= FFWREC.FFABEGMO
     && FG0NW00.FG0NW-CURR-MO-MINUS2 <= FFWREC.FFAENDMO)
      FG0N115();
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Obtain all style group and style color numbers for the*/
   /* requested type group and catg.*/
   /* ------------------------------------------------------------*/
  ;
  FG0NW00.FG0NWIDX = 1; /* init index*/
  FG0NW00.FG0NWTIX = FFZREC.FFZNUMMO + 1; /* load total index*/
  ;
  FG0N120(); /* Select MXPRC*/
  FG0N130(); /* Fetch MXPRC*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0) /* process unitl end of MXPRC*/
    ;
    FG0N140(); /* process sty grp info*/
    ;
    /* ------------------------------------------------------------*/
    /* Obtain detail sales quantities if it is an all forecast*/
    /* requested date range*/
    /* if the first sales month is < or = to the ending month*/
    /* Fetch sales quantity*/
    /* Otherwise, it is a mixed or all actual date range*/
    /* if style group total quantity not = 0*/
    /* Fetch sales quantity for either an all actual date*/
    /* range or a mixed range*/
    /* ------------------------------------------------------------*/
    ;
    if (FFWREC.FFABEGMO >= FG0NW00.FG0NW-CURR-MO)
      if (FG0NW00.FG0NWACT == "Y"
       && PG7REC.PG7MINSM <= FFWREC.FFAENDMO)
        FG0N150(); /* process sty clr all fcst mo*/
      end
    else /* total qty not = 0*/
      if (FG0NW00.FG0NWUTQ != 0)
        if (FFWREC.FFAENDMO < FG0NW00.FG0NW-CURR-MO)
          FG0N160(); /* process sty clr all actl mo*/
        else
          FG0N170(); /* process sty clr mixed range*/
        end
      end
    end
    ;
    FG0N130(); /* Fetch dfcast.vmxprc01*/
    ;
  end
  ;
  FG0N180(); /* Close MXPRC*/
  ;
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0NW00.FG0NWIDX > 1) /* Page was formatted*/
    FG0NW02.FG0NWNLD = FG0NW00.FG0NWIDX - 1;
    FG0NS04(); /* Add page to temp storage*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0NW00.TA5TSQIX == 0) /* No pages formatted*/
    ;
    FFWREC.XXXMODID = "100"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/
    ;
    return; /* Exit to continue processing*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Calculate monthly percents (column percents)*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0NW03.FG0NWUMT[FG0NWTIX] != 0)
    ;
    FG0NW00.FG0NWNM1 = FG0NW03.FG0NWUMT[FG0NWTIX];
    FG0NW00.FG0NWIDX = 1;
    while (FG0NW00.FG0NWIDX <= FFZREC.FFZNUMMO) /* nbr months loaded*/
      ;
      FG0NW00.FG0NWNM2 = FG0NW03.FG0NWUMT[FG0NWIDX] * 100;
      FG0NW03.FG0NWMPT[FG0NWIDX] = mathLib.round(FG0NW00.FG0NWNM2 / FG0NW00.FG0NWNM1, -mathLib.decimals(FG0NW03.FG0NWMPT[FG0NWIDX]));
      ;
      FG0NW00.FG0NWIDX = FG0NW00.FG0NWIDX + 1;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  FG0NW00.XXXTSPAG = 1; /* Desired page number*/
  FG0NW00.FG0NWPGX = 1; /* Page index*/
  FG0NW00.FG0NW-PAGP[1] = 1; /* Starting point of the page*/
  FG0NW00.FG0NW-PAGS[1] = 1; /* Season of the page*/
  FG0NW00.FG0NWSWR = "N"; /* Request for data switch*/
  FG0NW01.CACHGFL = "Y"; /* data is available for change*/
  ;
  ;
end // end FG0N100

// Calc date & obtain cutoff dt
Function FG0N110()
   /* ------------------------------------------------------------*/
   /* Obtain current date using routine xx0xs01.*/
   /* Obtain invoice cutoff date from dfcast.vffctl01.*/
   /* Calculate:*/
   /* - current month*/
   /* - current month minus 1 month*/
   /* - current month minus 2 months*/
   /* - current month minus 3 months*/
   /* - current month minus 4 months*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------*/
   /* Get current date*/
   /* ------------------------*/
  ;
  XX0XS01();
  ;
   /* ------------------------------------------------------------*/
   /* Obtain invoice date from dfcast.vffctl01.*/
   /* ------------------------------------------------------------*/
  ;
  FG0N111();
  ;
   /* ------------------------------------------------------------*/
   /* Calculate current month.*/
   /* ------------------------------------------------------------*/
  ;
  FG0NW00.FG0NWCWD = FF1REC.FF1IVCDT; /* work date*/
  ;
  if (XX0XW01.XX0XWDAT < FF1REC.FF1IVCDT)
    if (FG0NW00.FG0NWCMM == 1)
      FG0NW00.FG0NWCMM = 12;
      if (FG0NW00.FG0NWCYY == 00)
        FG0NW00.FG0NWCYY = 99;
        FG0NW00.FG0NWCCC = FG0NW00.FG0NWCCC - 1;
      else
        FG0NW00.FG0NWCYY = FG0NW00.FG0NWCYY - 1;
      end
    else
      FG0NW00.FG0NWCMM = FG0NW00.FG0NWCMM - 1;
    end
  end
  ;
  FG0NW00.FG0NW-CURR-MO = FG0NW00.FG0NWCYM; /* curr date ccyymm*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate current month minus 1 month*/
   /* ------------------------------------------------------------*/
  ;
  FG0NW00.FG0NWWDT = FG0NW00.FG0NW-CURR-MO;
  ;
  if (FG0NW00.FG0NWWMM == 1)
    FG0NW00.FG0NWWMM = 12;
    if (FG0NW00.FG0NWWYY == 00)
      FG0NW00.FG0NWWYY = 99;
      FG0NW00.FG0NWWCC = FG0NW00.FG0NWWCC - 1;
    else
      FG0NW00.FG0NWWYY = FG0NW00.FG0NWWYY - 1;
    end
  else
    FG0NW00.FG0NWWMM = FG0NW00.FG0NWWMM - 1;
  end
  ;
  FG0NW00.FG0NW-CURR-MO-MINUS1 = FG0NW00.FG0NWWDT;
  ;
  ;
  if (FFWREC.FFW-ND-SHP-IND == "N")
    /* ------------------------------------------------------------*/
    /* Calculate current month minus 2 months*/
    /* ------------------------------------------------------------*/
    ;
    FG0NW00.FG0NWWDT = FG0NW00.FG0NW-CURR-MO-MINUS1;
    ;
    if (FG0NW00.FG0NWWMM == 1)
      FG0NW00.FG0NWWMM = 12;
      if (FG0NW00.FG0NWWYY == 00)
        FG0NW00.FG0NWWYY = 99;
        FG0NW00.FG0NWWCC = FG0NW00.FG0NWWCC - 1;
      else
        FG0NW00.FG0NWWYY = FG0NW00.FG0NWWYY - 1;
      end
    else
      FG0NW00.FG0NWWMM = FG0NW00.FG0NWWMM - 1;
    end
    ;
    FG0NW00.FG0NW-CURR-MO-MINUS2 = FG0NW00.FG0NWWDT;
    ;
    /* ------------------------------------------------------------*/
    /* Calculate current month minus 3 months*/
    /* ------------------------------------------------------------*/
    ;
    FG0NW00.FG0NWWDT = FG0NW00.FG0NW-CURR-MO-MINUS2;
    ;
    if (FG0NW00.FG0NWWMM == 1)
      FG0NW00.FG0NWWMM = 12;
      if (FG0NW00.FG0NWWYY == 00)
        FG0NW00.FG0NWWYY = 99;
        FG0NW00.FG0NWWCC = FG0NW00.FG0NWWCC - 1;
      else
        FG0NW00.FG0NWWYY = FG0NW00.FG0NWWYY - 1;
      end
    else
      FG0NW00.FG0NWWMM = FG0NW00.FG0NWWMM - 1;
    end
    ;
    FG0NW00.FG0NW-CURR-MO-MINUS3 = FG0NW00.FG0NWWDT;
    ;
    /* ------------------------------------------------------------*/
    /* Calculate current month minus 4 months*/
    /* ------------------------------------------------------------*/
    ;
    FG0NW00.FG0NWWDT = FG0NW00.FG0NW-CURR-MO-MINUS3;
    ;
    if (FG0NW00.FG0NWWMM == 1)
      FG0NW00.FG0NWWMM = 12;
      if (FG0NW00.FG0NWWYY == 00)
        FG0NW00.FG0NWWYY = 99;
        FG0NW00.FG0NWWCC = FG0NW00.FG0NWWCC - 1;
      else
        FG0NW00.FG0NWWYY = FG0NW00.FG0NWWYY - 1;
      end
    else
      FG0NW00.FG0NWWMM = FG0NW00.FG0NWWMM - 1;
    end
    ;
    FG0NW00.FG0NW-CURR-MO-MINUS4 = FG0NW00.FG0NWWDT;
    ;
  end
  ;
  ;
end // end FG0N110

// Select dfcast.vffctl01 row
Function FG0N111()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  ;
  set FF1REC empty; /* Clear row storage area*/
  ;
   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/
  ;
  FF1REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FF1REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
   /* ------------------------------------------------------------*/
   /* Select FFCTL.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "111"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VFFCTL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF1REC.FF1GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0N111

// Get carryover percentages
Function FG0N115()
   /* ------------------------------------------------------------*/
   /* Select unique on dfcast.vffxrf01 table.*/
   /* Load ff2rec record - dfcast.vffxrf01*/
   /* ------------------------------------------------------------*/
  ;
  set FF2REC empty; /* Clear row storage area*/
  ;
  FF2REC.YSMXDV = "10"; /* div grp code*/
  FF2REC.XPCCD = FFWREC.XPCCD; /* product catg cd*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* product type group*/
  ;
  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
    return;
    ;
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "115"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S  ON DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0N115

// Open MXPRC
Function FG0N120()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  ;
  set PG7REC empty; /* Clear copybook.*/
  ;
   /* ------------------------------------------------------------*/
   /* Format FFFREC.*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "S1"; /* Function code*/
  ;
  FFFREC.FFFBEGMO = 000000000; /* Beg month*/
  FFFREC.FFFENDMO = 999999999; /* End month*/
  ;
   /* ------------------------------------------------------------*/
   /* Format DPRODG.VMXPRC01.*/
   /* ------------------------------------------------------------*/
  ;
  PG7REC.XPCCD = FFWREC.XPCCD; /* product line*/
  PG7REC.YPGCD = FFWREC.YPGCD; /* product type group*/
  PG7REC.PG7MAXPR = 99999.99; /* max price*/
  ;
  PG7REC.YSMXDV = "10"; /* Dom*/
  ;
   /* ------------------------------------------------------------*/
   /* select set dprodg.vmxprc01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO5100" (FFFREC, SQLCA, PG7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
    return;
    ;
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "120"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S1 ON DPRODG.VMXPRC01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMXPRC01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG7REC.PG7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0N120

// Fetch MXPRC
Function FG0N130()
   /* ------------------------------------------------------------*/
   /* Fetch DPRODG.VMXPRC01.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO5100" ("N1", SQLCA, PG7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "130"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DPRODG.VMXPRC01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMXPRC01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG7REC.PG7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0N130

// Process style grp
Function FG0N140()
   /* ------------------------------------------------------------*/
   /* Process style groups.*/
   /* ------------------------------------------------------------*/
  ;
  FG0NW02.FG0NWRCT[FG0NWIDX] = "1";
  FG0NW02.FG0NWDSC[FG0NWIDX] = PG7REC.SYBSTGNM;
  FG0NW00.SYBSTGNB = PG7REC.SYBSTGNB;
  ;
   /* ------------------------------------------------------------*/
   /* For each month in range obtain the sales quantities for this*/
   /* style group.*/
   /* ------------------------------------------------------------*/
  ;
  FG0NW00.FG0NWUTQ = 0; /* init w/s style grp total*/
  FG0NW00.FG0NWPIX = 1; /* init process index*/
  ;
  while (FG0NW00.FG0NWPIX <= FFZREC.FFZNUMMO)
    ;
    FG0NW00.FG0NWUHS = 0;
    ;
    FFFREC.FFFBEGMO = FFZREC.FFZINDMO[FG0NWPIX];
    FFFREC.FFFENDMO = FFZREC.FFZINDMO[FG0NWPIX];
    ;
    /* ------------------------------------------------------------*/
    /* If the month within the requested range is an actual month*/
    /* process for either need or business month based sales*/
    /* save quantity in temporary storage*/
    /* Otherwise, the month is forecasted*/
    /* check dfcast.vffsty01 to see if the style group is active*/
    /* if it is, fetch sales forecast*/
    /* ------------------------------------------------------------*/
    if (FFZREC.FFZINDMO[FG0NWPIX] < FG0NW00.FG0NW-CURR-MO)
      ;
      if (FFWREC.FFW-ND-SHP-IND == "N") /* need mo sales requested*/
        FG0N141(); /* fetch sty grp sales*/
      else /* business mo sales requested*/
        FG0N143(); /* fetch sty grp sales*/
      end
      ;
      FG0N147(); /* save in temp storage*/
      ;
    else
      FG0N145(); /* check if stygrp active in ffsty*/
      ;
      if (FG0NW00.FG0NWACT == "Y")
        FG0N146();
        FG0N147(); /* save in temp storage*/
      end
    end
    ;
    FG0NW00.FG0NWPIX = FG0NW00.FG0NWPIX + 1;
    ;
  end
  ;
    /* ------------------------------------------------------------*/
    /* If the total qty = 0*/
    /* If it is an all forecast range*/
    /* and if the first sales month is < or = to the ending month*/
    /* in the requested range*/
    /* save quantity in temporary storage*/
    /* Otherwise, the total qty not = 0*/
    /* save quantity in temporary storage*/
    /* ------------------------------------------------------------*/
  if (FG0NW00.FG0NWUTQ == 0)
    if (FFWREC.FFABEGMO >= FG0NW00.FG0NW-CURR-MO) /* all fcst range*/
      if (FG0NW00.FG0NWACT == "Y"
       && PG7REC.PG7MINSM <= FFWREC.FFAENDMO) /* 1st sls mo*/
        FG0N149(); /* save in temp storage*/
      end
    end
  else
    FG0N149(); /* save in temp storage*/
  end
  ;
end // end FG0N140

// Fetch sty grp nd mo sales
Function FG0N141()
   /* ------------------------------------------------------------*/
   /* Obtain historical need month based sales quantities.*/
   /* Load FH5REC record - dfhist.vsyshp01, note:  ffabegmo and*/
   /* ffaendmo loaded in fg0n140.*/
   /* ------------------------------------------------------------*/
  ;
  FG0N-1411();
  ;
  FG0NW00.FG0NWUHS = FG0NW00.FG0NWUHS + FH5REC.FH5MSHQT;
  ;
   /* --------------------------------------------------------*/
   /* Check for carryover*/
   /* --------------------------------------------------------*/
  ;
  if (FFZREC.FFZINDMO[FG0NWPIX] <= FG0NW00.FG0NW-CURR-MO-MINUS1
   && FFZREC.FFZINDMO[FG0NWPIX] >= FG0NW00.FG0NW-CURR-MO-MINUS4)
    ;
    ;
    if (FFZREC.FFZINDMO[FG0NWPIX] == FG0NW00.FG0NW-CURR-MO-MINUS3
     || FFZREC.FFZINDMO[FG0NWPIX] == FG0NW00.FG0NW-CURR-MO-MINUS4)
      set FH1REC empty;
      FH1REC.YSMXOT = "*";
      FG0N-1413(); /* get open qtys from voqsty01*/
      FH1REC.FH1PAQTY = FH1REC.FH1ALQTY + FH1REC.FH1PAQTY;
      FH1REC.FH1PAQTY = mathLib.round(FH1REC.FH1PAQTY * .5, -mathLib.decimals(FH1REC.FH1PAQTY));
      FG0NW00.FG0NWUHS = FG0NW00.FG0NWUHS + FH1REC.FH1PAQTY;
    end
    ;
    ;
    if (FFZREC.FFZINDMO[FG0NWPIX] == FG0NW00.FG0NW-CURR-MO-MINUS2)
      set FH1REC empty;
      FH1REC.YSMXOT = "FT";
      FG0N-1413(); /* get open qtys from voqsty01*/
      FH1REC.FH1PAQTY = mathLib.round((FH1REC.FH1PAQTY + FH1REC.FH1ALQTY)       * FF2REC.FFQOCOFP / 100, -mathLib.decimals(FH1REC.FH1PAQTY));
      FG0NW00.FG0NWUHS = FG0NW00.FG0NWUHS + FH1REC.FH1PAQTY;
      ;
      set FH1REC empty;
      FH1REC.YSMXOT = "PR";
      FG0N-1413(); /* get open qtys from voqsty01*/
      FH1REC.FH1PAQTY = mathLib.round((FH1REC.FH1PAQTY + FH1REC.FH1ALQTY)       * FF2REC.FFQOCOPP / 100, -mathLib.decimals(FH1REC.FH1PAQTY));
      FG0NW00.FG0NWUHS = FG0NW00.FG0NWUHS + FH1REC.FH1PAQTY;
      ;
    end
    ;
    ;
    if (FFZREC.FFZINDMO[FG0NWPIX] == FG0NW00.FG0NW-CURR-MO-MINUS1)
      set FH1REC empty;
      FH1REC.YSMXOT = "FT";
      FG0N-1413(); /* get open qtys from voqsty01*/
      FH1REC.FH1PAQTY = mathLib.round((FH1REC.FH1PAQTY + FH1REC.FH1ALQTY)       * FF2REC.FFQLCOFP / 100, -mathLib.decimals(FH1REC.FH1PAQTY));
      FG0NW00.FG0NWUHS = FG0NW00.FG0NWUHS + FH1REC.FH1PAQTY;
      ;
      set FH1REC empty;
      FH1REC.YSMXOT = "PR";
      FG0N-1413(); /* get open qtys from voqsty01*/
      FH1REC.FH1PAQTY = mathLib.round((FH1REC.FH1PAQTY + FH1REC.FH1ALQTY)       * FF2REC.FFQLCOPP / 100, -mathLib.decimals(FH1REC.FH1PAQTY));
      FG0NW00.FG0NWUHS = FG0NW00.FG0NWUHS + FH1REC.FH1PAQTY;
      ;
    end
  end
  ;
  ;
end // end FG0N141
// fetch bus mo sty grp sls
Function FG0N143()
   /* ------------------------------------------------------------*/
   /* Obtain actual business month sales from dfhist.vsyshp01.*/
   /* Load fh5rec record - dfhist.vsyshp01, note:  ffabegmo and*/
   /* ffaendmo loaded in fg0n140.*/
   /* ------------------------------------------------------------*/
  ;
  set FH5REC empty;
  ;
  FH5REC.XLCCD = "10"; /* life cycle code*/
  FH5REC.XQACD = "01"; /* quality code*/
  FH5REC.YSMXOT = "*"; /* sum code*/
  FH5REC.FH1PNAC = "*"; /* national account flag*/
  FH5REC.XPRCD = FFWREC.YPGCD; /* product code*/
  ;
   /* sty grp nbr is passed to subroutine through style number*/
  FH5REC.SY1STNBR = PG7REC.SYBSTGNB;
  ;
   /* catg cd is passed to subroutine through division code*/
  FH5REC.XDVCD = FFWREC.XPCCD;
  ;
  TA1PGMNM = "FG0N143"; /* calling process*/
  ;
   /* --------------------------------------------------*/
   /* select on dfhist.vsyshp01 table*/
   /* --------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "SG";
  ;
  XSFFS54();
  ;
  FG0NW00.FG0NWUHS = FG0NW00.FG0NWUHS + FH5REC.FH5MSHQT - FH5REC.FH5RTSQT;
  ;
  ;
end // end FG0N143

// Fetch dfcast.vffsty01 rec
Function FG0N145()
   /* -----------------------------------------------------*/
   /* If sty grp nbr from VMXPRC01 is not in vffsty01*/
   /* then this style group has been closed out.*/
   /* -----------------------------------------------------*/
  ;
  FG0NW00.FG0NWACT = "N";
  ;
  set FF3REC empty;
  ;
  FF3REC.SYBSTGNB = PG7REC.SYBSTGNB;
  ;
  FG0N-1451(); /* open ffsty*/
  ;
  FG0N-1452(); /* fetch ffsty*/
  if (SQLCA.VAGen_SQLCODE == 0)
    FG0NW00.FG0NWACT = "Y";
  end
  ;
  FG0N-1453(); /* close ffsty*/
  ;
end // end FG0N145

// calc sls fcst qty
Function FG0N146()
   /* --------------------------------------------------------*/
   /* obtain domestic forecast sale quantities*/
   /* --------------------------------------------------------*/
  ;
  FG0N-1461(); /* obtain mltyp sales qty*/
  ;
  FG0NW00.FG0NWUHS = FF8REC.FF6SLFCT;
  ;
    /* --------------------------------------------------------*/
    /* If need month sales requested and processing current mo*/
    /* Back out carryover.*/
    /* --------------------------------------------------------*/
  if (FFWREC.FFW-ND-SHP-IND == "N"
   && FG0NW00.FG0NW-CURR-MO == FFFREC.FFFBEGMO)
    ;
    FFFREC.FFFBEGMO = FG0NW00.FG0NW-CURR-MO-MINUS1;
    FFFREC.FFFENDMO = FG0NW00.FG0NW-CURR-MO-MINUS1;
    FG0N-1461(); /* obtain mltyp sales qty*/
    FG0NW00.FG0NWUHS = FG0NW00.FG0NWUHS - FF8REC.FF6SLFCT;
    FFFREC.FFFBEGMO = FFZREC.FFZINDMO[FG0NWPIX];
    FFFREC.FFFENDMO = FFZREC.FFZINDMO[FG0NWPIX];
  end
  ;
  ;
end // end FG0N146

// Save monthly qty
Function FG0N147()
   /* ------------------------------------------------------------*/
   /* Load style group monthly sales qtys into temp storage*/
   /* ------------------------------------------------------------*/
  ;
  FG0NW00.FG0NWUQT[FG0NWPIX] = FG0NW00.FG0NWUHS;
  FFXREC.FFXNUMB = FG0NW00.FG0NWUHS;
  XSFFS10();
  FG0NW00.FG0NWQTY[FG0NWPIX] = FFXREC.FFXCHAR;
  ;
   /* ---------------------------------------------------*/
   /* Accumulate style group qty total*/
   /* ---------------------------------------------------*/
  ;
  FG0NW00.FG0NWUTQ = FG0NW00.FG0NWUHS + FG0NW00.FG0NWUTQ;
  ;
   /* ---------------------------------------------------------*/
   /* Accumulate monthly sales qty totals (column totals)*/
   /* ---------------------------------------------------------*/
  ;
  FG0NW00.FG0NWNM1 = FG0NW03.FG0NWUMT[FG0NWPIX];
  FG0NW03.FG0NWUMT[FG0NWPIX] = FG0NW00.FG0NWUHS + FG0NW00.FG0NWNM1;
  FFXREC.FFXNUMB = FG0NW03.FG0NWUMT[FG0NWPIX];
  XSFFS10();
  FG0NW03.FG0NWMTQ[FG0NWPIX] = FFXREC.FFXCHAR;
  ;
  ;
end // end FG0N147

// save info in temp stor
Function FG0N149()
   /* ------------------------------------------------------------*/
   /* Load style group total sales qty (last entry in t/s)*/
   /* ------------------------------------------------------------*/
  ;
  FG0NW00.FG0NWUQT[FG0NWTIX] = FG0NW00.FG0NWUTQ;
  FFXREC.FFXNUMB = FG0NW00.FG0NWUTQ;
  XSFFS10();
  FG0NW00.FG0NWQTY[FG0NWTIX] = FFXREC.FFXCHAR;
  ;
   /* ------------------------------------------------------------*/
   /* Load temporary storage record with style group detail and*/
   /* total quntities.*/
   /* ------------------------------------------------------------*/
  ;
  FG0NW02.FG0NWQTS[FG0NWIDX] = FG0NW00.FG0NWLQT;
  ;
   /* ------------------------------------------------------------*/
   /* Accumulate monthly sales qty total (last entry in w/s).*/
   /* ------------------------------------------------------------*/
  ;
  FG0NW00.FG0NWNM1 = FG0NW03.FG0NWUMT[FG0NWTIX];
  FG0NW03.FG0NWUMT[FG0NWTIX] = FG0NW00.FG0NWNM1 + FG0NW00.FG0NWUTQ;
  FFXREC.FFXNUMB = FG0NW03.FG0NWUMT[FG0NWTIX];
  XSFFS10();
  FG0NW03.FG0NWMTQ[FG0NWTIX] = FFXREC.FFXCHAR;
  ;
  FG0NW00.FG0NWSGT = FG0NW00.FG0NWUTQ; /* Save style group total*/
  ;
   /* ------------------------------------------------------------*/
   /* If the page is full, add the page to the storage queue.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0NW00.FG0NWIDX > 12) /* Page is full*/
    FG0NW02.FG0NWNLD = FG0NW00.FG0NWIDX; /* nbr of lines loaded*/
    FG0NS04(); /* Add page to temp storage*/
  else
    ;
    FG0NW00.FG0NWIDX = FG0NW00.FG0NWIDX + 1;
  end
  ;
end // end FG0N149

// Process all fcst range
Function FG0N150()
   /* ------------------------------------------------------------*/
   /* Process products from dfcast.vffsty01 for an all fcst range.*/
   /* ------------------------------------------------------------*/
  ;
  FG0N151(); /* Open FFSTY*/
  ;
  FG0N152(); /* Fetch FFSTY*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0) /* Process unitl end of FFSTY*/
    ;
    /* ------------------------------------------------------------*/
     /* Save data.*/
    /* ------------------------------------------------------------*/
    ;
    FG0NW02.FG0NWRCT[FG0NWIDX] = "2";
    FG0NW00.SY1STNBR = FF3REC.SY1STNBR;
    FG0NW00.SY2CLRID = FF3REC.SY2CLRID;
    FG0NW00.XDMCD = FF3REC.XDMCD;
    FG0NW00.FG0NWDH1 = "-";
    FG0NW00.FG0NWDH2 = "-";
    FG0NW02.FG0NWDSC[FG0NWIDX] = FG0NW00.FG0NWDSC;
    ;
    /* ------------------------------------------------------------*/
    /* Fetch this prodcut's ff-sls-fcst for the requested date range.*/
    /* ------------------------------------------------------------*/
    ;
    FG0NW00.FG0NWUTQ = 0; /* init w/s style grp total*/
    FG0NW00.FG0NWPIX = 1; /* init process index*/
    ;
    while (FG0NW00.FG0NWPIX <= FFZREC.FFZNUMMO)
      ;
      FFFREC.FFFBEGMO = FFZREC.FFZINDMO[FG0NWPIX];
      FFFREC.FFFENDMO = FFZREC.FFZINDMO[FG0NWPIX];
      ;
      FG0NW00.FG0NWUHS = 0;
      ;
        /* --------------------------------------------*/
        /* Select dfcast.vmsty001 sales qtys*/
        /* --------------------------------------------*/
      FG0NS07(); /* Select MSTY*/
      ;
      /* ---------------------------------------------------*/
      /* Load style color monthly sales qtys*/
      /* Accumulate style color qty total*/
      /* ---------------------------------------------------*/
      ;
      FG0NW00.FG0NWUQT[FG0NWPIX] = FG0NW00.FG0NWUHS;
      FFXREC.FFXNUMB = FG0NW00.FG0NWUHS;
      XSFFS10();
      FG0NW00.FG0NWQTY[FG0NWPIX] = FFXREC.FFXCHAR;
      ;
      FG0NW00.FG0NWUTQ = FG0NW00.FG0NWUHS + FG0NW00.FG0NWUTQ;
      ;
      FG0NW00.FG0NWPIX = FG0NW00.FG0NWPIX + 1;
      ;
    end
    ;
      /* ---------------------------------------------------*/
      /* If the sales forecast = 0*/
      /* If the first sales month > or = the requested date*/
      /* Load temp storage with sty clr detail and total qtys*/
      /* Else the sales forecast not = 0*/
      /* Load temp storage with sty clr detail and total qtys*/
      /* ---------------------------------------------------*/
    ;
    if (FG0NW00.FG0NWUTQ == 0)
      if (FF3REC.SY2FDSMO <= FFWREC.FFAENDMO)
        ;
        FG0NW00.FG0NWUQT[FG0NWTIX] = FG0NW00.FG0NWUTQ;
        FFXREC.FFXNUMB = FG0NW00.FG0NWUTQ;
        XSFFS10();
        FG0NW00.FG0NWQTY[FG0NWTIX] = FFXREC.FFXCHAR;
        ;
        FG0NW02.FG0NWQTS[FG0NWIDX] = FG0NW00.FG0NWLQT;
        FG0NW02.FG0NW-STYGRP-TOT[FG0NWIDX] = FG0NW00.FG0NWSGT;
        ;
        if (FG0NW00.FG0NWIDX > 12) /* Page is full*/
          FG0NW02.FG0NWNLD = FG0NW00.FG0NWIDX; /* # of lines loaded*/
          FG0NS04(); /* Add page to temp storage*/
        else
          FG0NW00.FG0NWIDX = FG0NW00.FG0NWIDX + 1;
        end
      end
    else
      ;
      FG0NW00.FG0NWUQT[FG0NWTIX] = FG0NW00.FG0NWUTQ;
      FFXREC.FFXNUMB = FG0NW00.FG0NWUTQ;
      XSFFS10();
      FG0NW00.FG0NWQTY[FG0NWTIX] = FFXREC.FFXCHAR;
      ;
      FG0NW02.FG0NWQTS[FG0NWIDX] = FG0NW00.FG0NWLQT;
      FG0NW02.FG0NW-STYGRP-TOT[FG0NWIDX] = FG0NW00.FG0NWSGT;
      ;
      if (FG0NW00.FG0NWIDX > 12) /* Page is full*/
        FG0NW02.FG0NWNLD = FG0NW00.FG0NWIDX; /* # of lines loaded*/
        FG0NS04(); /* Add page to temp storage*/
      else
        FG0NW00.FG0NWIDX = FG0NW00.FG0NWIDX + 1;
      end
    end
    ;
    FG0N152(); /* fetch 'n1' dfcast.vffsty01*/
    ;
  end
  ;
  ;
  FG0N154(); /* close 'c1' dfcast.vffsty01*/
  ;
  ;
end // end FG0N150

// Open FFSTY
Function FG0N151()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  ;
  set FF3REC empty; /* Clear row storage area*/
  ;
   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/
  ;
  FF3REC.SYBSTGNB = FG0NW00.SYBSTGNB; /* style group*/
  FF3REC.YPGCD = FFWREC.YPGCD; /* type group code*/
  FF3REC.XLCCD = "10"; /* life cycle code*/
  ;
  FF3REC.YSMXDV = "10"; /* Dom*/
  ;
   /* ------------------------------------------------------------*/
   /* Open DFCAST.VFFSTY01.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3990" ("S1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
    return;
    ;
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "151"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S1 ON DFCAST.VFFSTY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0N151

// Fetch FFSTY
Function FG0N152()
   /* ------------------------------------------------------------*/
   /* Fetch FFSTY.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3990" ("N1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "152"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DFCAST.VFFSTY01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0N152

// Close dfcast.vffsty01
Function FG0N154()
   /* ------------------------------------------------------------*/
   /* Close FFSTY.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3990" ("C1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
    return;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "154"; /* Module identification*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE S1 DFCAST.VFFSTY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0N154

// Process all actl range
Function FG0N160()
   /* ------------------------------------------------------------*/
   /* Process products from dprodg.vsyclr01 for an all actual range.*/
   /* ------------------------------------------------------------*/
  ;
  FG0NS09(); /* Open SYCLR*/
  ;
  FG0NS10(); /* Fetch SYCLR*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0) /* Process unitl end of SYCLR*/
    ;
      /* ------------------------------------------------------------*/
      /* Save data.*/
      /* ------------------------------------------------------------*/
    ;
    FG0NW02.FG0NWRCT[FG0NWIDX] = "2";
    FG0NW00.SY1STNBR = PG2REC.SY1STNBR;
    FG0NW00.SY2CLRID = PG2REC.SY2CLRID;
    FG0NW00.XDMCD = PG2REC.XDMCD;
    FG0NW00.FG0NWDH1 = "-";
    FG0NW00.FG0NWDH2 = "-";
    FG0NW02.FG0NWDSC[FG0NWIDX] = FG0NW00.FG0NWDSC;
    ;
      /* ------------------------------------------------------------*/
      /* Fetch either need month sales or business month sales for*/
      /* the requested date range.*/
      /* ------------------------------------------------------------*/
    ;
    FG0NW00.FG0NWUTQ = 0; /* init w/s style grp total*/
    FG0NW00.FG0NWPIX = 1; /* init process index*/
    ;
    while (FG0NW00.FG0NWPIX <= FFZREC.FFZNUMMO)
      ;
      FFFREC.FFFBEGMO = FFZREC.FFZINDMO[FG0NWPIX];
      FFFREC.FFFENDMO = FFZREC.FFZINDMO[FG0NWPIX];
      ;
      FG0NW00.FG0NWUHS = 0;
      ;
      if (FFWREC.FFW-ND-SHP-IND == "N") /* need month sls requested*/
        FG0N165();
      else /* business month sls requested*/
        FG0NS06();
      end
      ;
        /* ---------------------------------------------------*/
        /* load style color monthly sales qtys*/
        /* ---------------------------------------------------*/
      ;
      FG0NW00.FG0NWUQT[FG0NWPIX] = FG0NW00.FG0NWUHS;
      FFXREC.FFXNUMB = FG0NW00.FG0NWUHS;
      XSFFS10();
      FG0NW00.FG0NWQTY[FG0NWPIX] = FFXREC.FFXCHAR;
      ;
        /* ---------------------------------------------------*/
        /* Accumulate style color qty total*/
        /* ---------------------------------------------------*/
      ;
      FG0NW00.FG0NWUTQ = FG0NW00.FG0NWUHS + FG0NW00.FG0NWUTQ;
      ;
      FG0NW00.FG0NWPIX = FG0NW00.FG0NWPIX + 1;
      ;
    end
    ;
     /* ------------------------------------------------------------*/
     /* If the total quantity for this product is not = 0*/
     /* Load style color total sales qty (last entry in t/s)*/
     /* Load temporary storage record with style color detail*/
     /* and total qtys*/
     /* ------------------------------------------------------------*/
    ;
    if (FG0NW00.FG0NWUTQ != 0)
      FG0NW00.FG0NWUQT[FG0NWTIX] = FG0NW00.FG0NWUTQ;
      FFXREC.FFXNUMB = FG0NW00.FG0NWUTQ;
      XSFFS10();
      FG0NW00.FG0NWQTY[FG0NWTIX] = FFXREC.FFXCHAR;
      ;
      FG0NW02.FG0NWQTS[FG0NWIDX] = FG0NW00.FG0NWLQT;
      ;
        /* ------------------------------------------------------------*/
        /* Save style group total into each style color entry*/
        /* ------------------------------------------------------------*/
      ;
      FG0NW02.FG0NW-STYGRP-TOT[FG0NWIDX] = FG0NW00.FG0NWSGT;
      ;
        /* ------------------------------------------------------------*/
        /* If the page is full, add the page to the storage queue.*/
        /* ------------------------------------------------------------*/
      ;
      if (FG0NW00.FG0NWIDX > 12) /* Page is full*/
        FG0NW02.FG0NWNLD = FG0NW00.FG0NWIDX; /* # of lines loaded*/
        FG0NS04(); /* Add page to temp storage*/
      else
        FG0NW00.FG0NWIDX = FG0NW00.FG0NWIDX + 1;
      end
    end
    ;
    FG0NS10(); /* Fetch SYCLR*/
    ;
  end
  ;
  FG0NS11(); /* Close SYCLR*/
  ;
  ;
end // end FG0N160

// Deter need mo sls
Function FG0N165()
   /* ------------------------------------------------------------*/
   /* Obtain historical need month based sales quantities.*/
   /* Load FH5REC record - dfhist.vsyshp01, note:  ffabegmo and*/
   /* ffaendmo loaded in fg0n160.*/
   /* ------------------------------------------------------------*/
  ;
  FG0NS02();
  ;
  FG0NW00.FG0NWUHS = FG0NW00.FG0NWUHS + FH5REC.FH5MSHQT;
  ;
   /* --------------------------------------------------------*/
   /* check for carryover*/
   /* --------------------------------------------------------*/
  ;
  if (FFZREC.FFZINDMO[FG0NWPIX] <= FG0NW00.FG0NW-CURR-MO-MINUS1
   && FFZREC.FFZINDMO[FG0NWPIX] >= FG0NW00.FG0NW-CURR-MO-MINUS4)
    ;
    ;
    if (FFZREC.FFZINDMO[FG0NWPIX] == FG0NW00.FG0NW-CURR-MO-MINUS3
     || FFZREC.FFZINDMO[FG0NWPIX] == FG0NW00.FG0NW-CURR-MO-MINUS4)
      set FH1REC empty;
      FH1REC.YSMXOT = "*";
      FG0NS03(); /* get open qtys from voqsty01*/
      FH1REC.FH1PAQTY = FH1REC.FH1ALQTY + FH1REC.FH1PAQTY;
      FH1REC.FH1PAQTY = mathLib.round(FH1REC.FH1PAQTY * .5, -mathLib.decimals(FH1REC.FH1PAQTY));
      FG0NW00.FG0NWUHS = FG0NW00.FG0NWUHS + FH1REC.FH1PAQTY;
    end
    ;
    ;
    if (FFZREC.FFZINDMO[FG0NWPIX] == FG0NW00.FG0NW-CURR-MO-MINUS2)
      set FH1REC empty;
      FH1REC.YSMXOT = "FT";
      FG0NS03(); /* get open qtys from voqsty01*/
      FH1REC.FH1PAQTY = mathLib.round((FH1REC.FH1PAQTY + FH1REC.FH1ALQTY)       * FF2REC.FFQOCOFP / 100, -mathLib.decimals(FH1REC.FH1PAQTY));
      FG0NW00.FG0NWUHS = FG0NW00.FG0NWUHS + FH1REC.FH1PAQTY;
      ;
      set FH1REC empty;
      FH1REC.YSMXOT = "PR";
      FG0NS03(); /* get open qtys from voqsty01*/
      FH1REC.FH1PAQTY = mathLib.round((FH1REC.FH1PAQTY + FH1REC.FH1ALQTY)       * FF2REC.FFQOCOPP / 100, -mathLib.decimals(FH1REC.FH1PAQTY));
      FG0NW00.FG0NWUHS = FG0NW00.FG0NWUHS + FH1REC.FH1PAQTY;
      ;
    end
    ;
    ;
    if (FFZREC.FFZINDMO[FG0NWPIX] == FG0NW00.FG0NW-CURR-MO-MINUS1)
      set FH1REC empty;
      FH1REC.YSMXOT = "FT";
      FG0NS03(); /* get open qtys from voqsty01*/
      FH1REC.FH1PAQTY = mathLib.round((FH1REC.FH1PAQTY + FH1REC.FH1ALQTY)       * FF2REC.FFQLCOFP / 100, -mathLib.decimals(FH1REC.FH1PAQTY));
      FG0NW00.FG0NWUHS = FG0NW00.FG0NWUHS + FH1REC.FH1PAQTY;
      ;
      set FH1REC empty;
      FH1REC.YSMXOT = "PR";
      FG0NS03(); /* get open qtys from voqsty01*/
      FH1REC.FH1PAQTY = mathLib.round((FH1REC.FH1PAQTY + FH1REC.FH1ALQTY)       * FF2REC.FFQLCOPP / 100, -mathLib.decimals(FH1REC.FH1PAQTY));
      FG0NW00.FG0NWUHS = FG0NW00.FG0NWUHS + FH1REC.FH1PAQTY;
      ;
    end
  end
  ;
  ;
end // end FG0N165

// Process mixed range
Function FG0N170()
   /* ------------------------------------------------------------*/
   /* Process products from dprodg.vsyclr01 and dprodg.vsydvl01*/
   /* for a mixed date range.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* Process products from dprodg.vsyclr01.*/
   /* ------------------------------------------------------------*/
  FG0NS09(); /* Open SYCLR*/
  ;
  FG0NS10(); /* Fetch SYCLR*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0) /* Process unitl end of SYCLR*/
    ;
      /* ------------------------------------------------------------*/
      /* Save data.*/
      /* ------------------------------------------------------------*/
    ;
    FG0NW02.FG0NWRCT[FG0NWIDX] = "2";
    FG0NW00.SY1STNBR = PG2REC.SY1STNBR;
    FG0NW00.SY2CLRID = PG2REC.SY2CLRID;
    FG0NW00.XDMCD = PG2REC.XDMCD;
    FG0NW00.FG0NWDH1 = "-";
    FG0NW00.FG0NWDH2 = "-";
    FG0NW02.FG0NWDSC[FG0NWIDX] = FG0NW00.FG0NWDSC;
    ;
      /* ------------------------------------------------------------*/
      /* Fetch sales for all months in the requested range.*/
      /* ------------------------------------------------------------*/
    ;
    FG0NW00.FG0NWUTQ = 0; /* init w/s style grp total*/
    FG0NW00.FG0NWPIX = 1; /* init process index*/
    ;
    while (FG0NW00.FG0NWPIX <= FFZREC.FFZNUMMO)
      ;
      FFFREC.FFFBEGMO = FFZREC.FFZINDMO[FG0NWPIX];
      FFFREC.FFFENDMO = FFZREC.FFZINDMO[FG0NWPIX];
      ;
      FG0NW00.FG0NWUHS = 0;
      ;
      if (FFZREC.FFZINDMO[FG0NWPIX] >= FG0NW00.FG0NW-CURR-MO)
        if (PG2REC.PG-CURR-XLC-CD == "05"
         || PG2REC.PG-CURR-XLC-CD == "10")
          FG0N173(); /* Obtain sales info*/
        end
      else
        FG0N173(); /* Obtain sales info*/
      end
      ;
       /* ---------------------------------------------------*/
       /* Load style color monthly sales qtys*/
       /* Accumulate style color qty total*/
       /* ---------------------------------------------------*/
      FG0NW00.FG0NWUQT[FG0NWPIX] = FG0NW00.FG0NWUHS;
      FFXREC.FFXNUMB = FG0NW00.FG0NWUHS;
      XSFFS10();
      FG0NW00.FG0NWQTY[FG0NWPIX] = FFXREC.FFXCHAR;
      ;
      FG0NW00.FG0NWUTQ = FG0NW00.FG0NWUHS + FG0NW00.FG0NWUTQ;
      ;
      FG0NW00.FG0NWPIX = FG0NW00.FG0NWPIX + 1;
      ;
    end
    ;
    /* ---------------------------------------------------*/
    /* Save info in temp storage, if total qty not = 0*/
    /* ---------------------------------------------------*/
    if (FG0NW00.FG0NWUTQ != 0)
      FG0N179(); /* Accum & load prod into ts*/
    end
    ;
    FG0NS10(); /* Fetch SYCLR*/
    ;
  end
  ;
  FG0NS11(); /* Close SYCLR*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Process products from dprodg.vsydvl01.*/
   /* ------------------------------------------------------------*/
  FG0N175(); /* Open SYDVL*/
  ;
  FG0N176(); /* Fetch SYDVL*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0)
    ;
    FF3REC.SY1STNBR = PG4REC.PG4STNBR; /* style number*/
    FF3REC.SY2CLRID = " "; /* color id*/
    FF3REC.XDMCD = " "; /* dim code*/
    PG2REC.SY2FDSMO = PG4REC.PG4FSLMO; /* 1st sales month*/
    ;
      /* ------------------------------------------------------------*/
      /* Save data in working storage fields.*/
      /* ------------------------------------------------------------*/
    ;
    FG0NW02.FG0NWRCT[FG0NWIDX] = "2";
    FG0NW00.SY1STNBR = FF3REC.SY1STNBR;
    FG0NW00.SY2CLRID = FF3REC.SY2CLRID;
    FG0NW00.XDMCD = FF3REC.XDMCD;
    FG0NW00.FG0NWDH1 = "-";
    FG0NW00.FG0NWDH2 = "-";
    FG0NW02.FG0NWDSC[FG0NWIDX] = FG0NW00.FG0NWDSC;
    ;
      /* ------------------------------------------------------------*/
      /* Fetch sales for all months in the requested range.*/
      /* ------------------------------------------------------------*/
    ;
    FG0NW00.FG0NWUTQ = 0; /* init w/s style grp total*/
    FG0NW00.FG0NWPIX = 1; /* init process index*/
    ;
    while (FG0NW00.FG0NWPIX <= FFZREC.FFZNUMMO)
      ;
      FFFREC.FFFBEGMO = FFZREC.FFZINDMO[FG0NWPIX];
      FFFREC.FFFENDMO = FFZREC.FFZINDMO[FG0NWPIX];
      ;
      FG0NW00.FG0NWUHS = 0;
      ;
      if (FFZREC.FFZINDMO[FG0NWPIX] >= FG0NW00.FG0NW-CURR-MO)
        FG0NS07(); /* Obtain sales info*/
        ;
          /* ---------------------------------------------------*/
          /* Load style color monthly sales qtys*/
          /* Accumulate style color qty total*/
          /* ---------------------------------------------------*/
        FG0NW00.FG0NWUQT[FG0NWPIX] = FG0NW00.FG0NWUHS;
        FFXREC.FFXNUMB = FG0NW00.FG0NWUHS;
        XSFFS10();
        FG0NW00.FG0NWQTY[FG0NWPIX] = FFXREC.FFXCHAR;
        ;
        FG0NW00.FG0NWUTQ = FG0NW00.FG0NWUHS + FG0NW00.FG0NWUTQ;
        ;
      end
      ;
      FG0NW00.FG0NWPIX = FG0NW00.FG0NWPIX + 1;
      ;
    end
    ;
     /* ---------------------------------------------------*/
     /* Save info in temp storage, if total qty not = 0*/
     /* ---------------------------------------------------*/
    if (FG0NW00.FG0NWUTQ != 0)
      FG0N179(); /* Accum & load prod into ts*/
    end
    ;
    FG0N176(); /* Fetch SYDVL*/
    ;
  end
  ;
  FG0N178(); /* Close SYDVL*/
  ;
end // end FG0N170

// Obtain sales amounts
Function FG0N173()
   /* ------------------------------------------------------------*/
   /* Determine whether month is forecast or actual.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFZREC.FFZINDMO[FG0NWPIX] < FG0NW00.FG0NW-CURR-MO)
    ;
    if (FFWREC.FFW-ND-SHP-IND == "N")
      FG0N-1731(); /* get need mo actl sales*/
    else
      FG0NS06(); /* get bus mo actl sales*/
    end
    ;
  else
    ;
    /* --------------------------------------------------------*/
    /* Obtain domestic forecast sales quantities*/
    /* Exclude nil only and promo only products.*/
    /* --------------------------------------------------------*/
    ;
    if (PG2REC.XDVCD == "02"
     || PG2REC.XDVCD == "03"
    )
      /* skip this product*/
      ;
    else
      FF3REC.SY1STNBR = PG2REC.SY1STNBR;
      FF3REC.SY2CLRID = PG2REC.SY2CLRID;
      FF3REC.XDMCD = PG2REC.XDMCD;
      FG0NS07();
    end
    ;
  end
  ;
end // end FG0N173

// Open 's1' dprodg.vsydvl01 csr
Function FG0N175()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  ;
  set PG4REC empty; /* Clear copybook*/
  ;
   /* ------------------------------------------------------------*/
   /* Format FFFREC. Use 0 for begin mo, so that all*/
   /* history will show regardless of closeout month.*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "S1"; /* Function code*/
  FFFREC.FFFBEGMO = 0; /* Beg month*/
  FFFREC.FFFENDMO = 999999999; /* End month*/
  ;
   /* ------------------------------------------------------------*/
   /* Open SYdvl.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1PGMNM = "FG0N175"; /* Calling process*/
  ;
  PG4REC.SYBSTGNB = PG7REC.SYBSTGNB; /* style group*/
  PG4REC.XPRCD = FFWREC.YPGCD; /* type group code*/
  PG4REC.XDVCD = "10"; /* division group code*/
  PG4REC.XPCCD = FFWREC.XPCCD; /* category code*/
  ;
   /* ------------------------------------------------------------*/
   /* Call XSFFS65.*/
   /* ------------------------------------------------------------*/
  ;
  XSFFS65(); /* Open SYDVL*/
  ;
  ;
end // end FG0N175

// Fetch 'n1' vsydvl01 row
Function FG0N176()
   /* ------------------------------------------------------------*/
   /* Format call.*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "N1"; /* Function code*/
  TA1REC.TA1PGMNM = "FG0N176"; /* Calling process*/
  ;
   /* ------------------------------------------------------------*/
   /* Fetch SYDVL.*/
   /* ------------------------------------------------------------*/
  ;
  XSFFS65(); /* Fetch dprodg.vsydvl01 row*/
  ;
end // end FG0N176

// Close 'c1' vsydvl01
Function FG0N178()
   /* ------------------------------------------------------------*/
   /* Format call.*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "C1"; /* Function code*/
  TA1REC.TA1PGMNM = "FG0N178"; /* Calling process*/
  ;
   /* ------------------------------------------------------------*/
   /* Close SYDVL.*/
   /* ------------------------------------------------------------*/
  ;
  XSFFS65(); /* Fetch dprodg.vsydvl01 row*/
  ;
  ;
end // end FG0N178

// Accum & load prod info in ts
Function FG0N179()
   /* ------------------------------------------------------------*/
   /* Load style color total sales qty (last entry in t/s)*/
   /* ------------------------------------------------------------*/
  ;
  FG0NW00.FG0NWUQT[FG0NWTIX] = FG0NW00.FG0NWUTQ;
  FFXREC.FFXNUMB = FG0NW00.FG0NWUTQ;
  XSFFS10();
  FG0NW00.FG0NWQTY[FG0NWTIX] = FFXREC.FFXCHAR;
  ;
    /* ------------------------------------------------------------*/
   /* Load temporary storage record with style color detail*/
   /* and total qtys*/
   /* ------------------------------------------------------------*/
  ;
  FG0NW02.FG0NWQTS[FG0NWIDX] = FG0NW00.FG0NWLQT;
  ;
   /* ------------------------------------------------------------*/
   /* Save style group total into each style color entry.*/
   /* ------------------------------------------------------------*/
  ;
  FG0NW02.FG0NW-STYGRP-TOT[FG0NWIDX] = FG0NW00.FG0NWSGT;
  ;
   /* ------------------------------------------------------------*/
   /* If the page is full, add the page to the storage queue.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0NW00.FG0NWIDX > 12) /* Page is full*/
    FG0NW02.FG0NWNLD = FG0NW00.FG0NWIDX; /* # of lines loaded*/
    FG0NS04(); /* Add page to temp storage*/
  else
    FG0NW00.FG0NWIDX = FG0NW00.FG0NWIDX + 1;
  end
  ;
  ;
end // end FG0N179

// Close MXPRC
Function FG0N180()
   /* ------------------------------------------------------------*/
   /* Close DPRODG.VMXPRC01 table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO5100" ("C1", SQLCA, PG7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
    return;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "180"; /* Module identification*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE S1 DPRODG.VMXPRC01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMXPRC01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG7REC.PG7KEY; /* table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0N180

// Format and converse the map
Function FG0N200()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* if no errors format map*/
    ;
    set FG0NM001 initial; /* m001 input/ouput area*/
    ;
    /* ------------------------------------------------------------*/
     /* Format fg0nm001 using passed data*/
    /* ------------------------------------------------------------*/
    ;
    FG0NW00.FG0NWWDT = FFWREC.FFABEGMO; /* w/s date field*/
    FG0NM001.FG0NMBRG = FG0NW00.FG0NWWYM; /* begin month range*/
    FG0NW00.FG0NWWDT = FFWREC.FFAENDMO; /* w/s date field*/
    FG0NM001.FG0NMERG = FG0NW00.FG0NWWYM; /* end month range*/
    ;
    FG0NM001.YPGCD = FFWREC.YPGCD; /* product type group*/
    FG0NM001.YPGABRV = FFWREC.YPGABRV; /* product type group abrv*/
    ;
    FG0NM001.XPCCD = FFWREC.XPCCD; /* product line code*/
    FG0NM001.XPCABRV = FFWREC.XPCABRV; /* product line abrv*/
    ;
    FG0NM001.FFW-ND-SHP-IND = FFWREC.FFW-ND-SHP-IND;
    ;
    FG0NM001.FG0NMSEM[1] = FFWREC.FFWENDM1; /* season end month*/
    FG0NM001.FG0NMSEM[2] = FFWREC.FFWENDM2; /* season end month*/
    FG0NM001.FG0NMSEM[3] = FFWREC.FFWENDM3; /* season end month*/
    FG0NM001.FG0NMSEM[4] = FFWREC.FFWENDM4; /* season end month*/
    ;
    /* ------------------------------------------------------------*/
     /* format screen*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0NW00.FG0NWSWF == "Y") /* map must be formatted*/
      FG0N210(); /* Format the data on the map*/
    end
    ;
  else
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* load message number*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format page, date, and FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0NW00.TA5TSQIX > 0)
    set FG0NM001.XXXLITPG skip;
    FG0NM001.XXXTSPAG = FG0NW00.XXXTSPAG; /* Current page*/
    set FG0NM001.XXXLITOF skip;
    FG0NM001.TA5TSQIX = FG0NW00.TA5TSQIX; /* max pages*/
  end
  ;
  FG0NM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FG0NM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG0NM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* error message number*/
    FG0NM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    set FG0NM001 alarm; /* Indicate sound alarm*/
  end
  ;
  converse FG0NM001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0;
  ;
  COMMAREA.CATOAP = FG0NM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG0NM001.CAITEM; /* Application data*/
  ;
  ;
end // end FG0N200

// Format the display data
Function FG0N210()
  ;
  FG0NW00.FG0NWSWF = "N"; /* init map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* if data has not been loaded bypass load map fiecds*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0NW01.CACHGFL != "Y")
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* load monthly headings yymm*/
   /* ------------------------------------------------------------*/
  ;
  set FG0NM001.FG0NMSGH skip; /* style group literal*/
  set FG0NM001.FG0NMSCH skip; /* style color literal*/
  ;
  FG0NW00.FG0NWLIX = 1;
  FG0NW00.FG0NWIDX = FG0NW00.FG0NW-PAGP[FG0NWPGX];
  ;
  if (FG0NW00.FG0NW-PMON[FG0NWPGX] == "Y") /* print remaining month check*/
    FG0N211();
  else
    FG0N212();
    FG0N213();
  end
  ;
   /* ------------------------------------------------------------*/
   /* obtain style grp/style color  sale qtys from t/s*/
   /* ------------------------------------------------------------*/
  ;
  FG0NS16(); /* read temporary storage*/
  ;
  FG0NW00.FG0NWPIX = 1;
  while (FG0NW00.FG0NWPIX <= FG0NW02.FG0NWNLD) /* process temp storage*/
    ;
    FG0NW05.FG0NWDSC = FG0NW02.FG0NWDSC[FG0NWPIX];
    ;
    FG0NW00.FG0NWLQT = FG0NW02.FG0NWQTS[FG0NWPIX];
    ;
    /* ----------------------------------------------------------*/
     /* reformat detail quantities using working storage*/
     /* and calculate detail subtotal*/
    /* ----------------------------------------------------------*/
    ;
    FG0NW00.FG0NWLIX = 1; /* load index*/
    move 0 to FG0NW00.FG0NWUST[1] for all; /* product line subtotal*/
    FG0NW00.FG0NWIDX = FG0NW00.FG0NW-PAGP[FG0NWPGX];
    move " " to FG0NW00.FG0NWWQT[1] for all; /* clear w/s display table*/
    ;
    if (FG0NW00.FG0NW-PMON[FG0NWPGX] == "Y") /* print remaining month check*/
      FG0N214();
    else
      FG0N215();
      FG0N216();
    end
    ;
    /* ----------------------------------------------------------*/
     /* load detail quantities to m001*/
    /* ----------------------------------------------------------*/
    ;
    FG0NW05.FG0NWQ01 = FG0NW00.FG0NWWQT[1];
    FG0NW05.FG0NWQ02 = FG0NW00.FG0NWWQT[2];
    FG0NW05.FG0NWQ03 = FG0NW00.FG0NWWQT[3];
    FG0NW05.FG0NWQ04 = FG0NW00.FG0NWWQT[4];
    FG0NW05.FG0NWQ05 = FG0NW00.FG0NWWQT[5];
    FG0NW05.FG0NWQ06 = FG0NW00.FG0NWWQT[6];
    FG0NW05.FG0NWQ07 = FG0NW00.FG0NWWQT[7];
    FG0NW05.FG0NWQ08 = FG0NW00.FG0NWWQT[8];
    FG0NW05.FG0NWQ09 = FG0NW00.FG0NWWQT[9];
    FG0NW05.FG0NWQ10 = FG0NW00.FG0NWWQT[10];
    ;
    FG0NM001.FG0NMDTL[FG0NWPIX] = FG0NW05.FG0NWGP5;
    ;
    FG0NW00.FG0NWPIX = FG0NW00.FG0NWPIX + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* load monthly totals*/
   /* ------------------------------------------------------------*/
  ;
  FG0NW05.FG0NWDSC = "TOTAL QTY     ";
  ;
  FG0NW00.FG0NWUMT = 0;
  move " " to FG0NW00.FG0NWWQT[1] for all; /* clear w/s display table*/
  FG0NW00.FG0NWLIX = 1; /* load index*/
  FG0NW00.FG0NWIDX = FG0NW00.FG0NW-PAGP[FG0NWPGX];
  ;
  if (FG0NW00.FG0NW-PMON[FG0NWPGX] == "Y") /* print remaining month check*/
    FG0N217();
  else
    FG0N218();
    FG0N219();
  end
  ;
   /* ----------------------------------------------------------*/
   /* load style grp monthly total quantities to m001*/
   /* ----------------------------------------------------------*/
  ;
  FG0NW05.FG0NWQ01 = FG0NW00.FG0NWWQT[1];
  FG0NW05.FG0NWQ02 = FG0NW00.FG0NWWQT[2];
  FG0NW05.FG0NWQ03 = FG0NW00.FG0NWWQT[3];
  FG0NW05.FG0NWQ04 = FG0NW00.FG0NWWQT[4];
  FG0NW05.FG0NWQ05 = FG0NW00.FG0NWWQT[5];
  FG0NW05.FG0NWQ06 = FG0NW00.FG0NWWQT[6];
  FG0NW05.FG0NWQ07 = FG0NW00.FG0NWWQT[7];
  FG0NW05.FG0NWQ08 = FG0NW00.FG0NWWQT[8];
  FG0NW05.FG0NWQ09 = FG0NW00.FG0NWWQT[9];
  FG0NW05.FG0NWQ10 = FG0NW00.FG0NWWQT[10];
  ;
  FG0NM001.FG0NMDTL[FG0NWPIX] = FG0NW05.FG0NWGP5;
  ;
  FG0NW00.FG0NWPIX = FG0NW00.FG0NWPIX + 1;
  ;
   /* ------------------------------------------------------------*/
   /* load monthly percents*/
   /* ------------------------------------------------------------*/
  ;
  FG0NW05.FG0NWDSC = "TOTAL PCT     ";
  ;
  move " " to FG0NW00.FG0NWWQT[1] for all; /* clear w/s display table*/
  FG0NW00.FG0NWLIX = 1; /* load index*/
  FG0NW00.FG0NWIDX = FG0NW00.FG0NW-PAGP[FG0NWPGX];
  ;
  if (FG0NW00.FG0NW-PMON[FG0NWPGX] == "Y") /* print remaining month check*/
    FG0N220();
  else
    FG0N221();
    FG0N222();
  end
  ;
   /* ----------------------------------------------------------*/
   /* load monthly total percents*/
   /* ----------------------------------------------------------*/
  ;
  FG0NW05.FG0NWQ01 = FG0NW00.FG0NWWQT[1];
  FG0NW05.FG0NWQ02 = FG0NW00.FG0NWWQT[2];
  FG0NW05.FG0NWQ03 = FG0NW00.FG0NWWQT[3];
  FG0NW05.FG0NWQ04 = FG0NW00.FG0NWWQT[4];
  FG0NW05.FG0NWQ05 = FG0NW00.FG0NWWQT[5];
  FG0NW05.FG0NWQ06 = FG0NW00.FG0NWWQT[6];
  FG0NW05.FG0NWQ07 = FG0NW00.FG0NWWQT[7];
  FG0NW05.FG0NWQ08 = FG0NW00.FG0NWWQT[8];
  FG0NW05.FG0NWQ09 = FG0NW00.FG0NWWQT[9];
  FG0NW05.FG0NWQ10 = FG0NW00.FG0NWWQT[10];
  ;
  FG0NM001.FG0NMDTL[FG0NWPIX] = FG0NW05.FG0NWGP5;
  ;
  ;
end // end FG0N210

// Print remaining month heading
Function FG0N211()
   /* ----------------------------------------------------------------------*/
   /* Print whatever are left from the previous page.*/
   /* (Month headings, Percent, Range total and Percent or subtotal,*/
   /* Range total and percent)*/
   /*  */
   /* load subtotal/total/percent literals*/
   /*  */
   /* ----------------------------------------------------------------------*/
  ;
  FG0NW00.FG0NWREM = FG0NW00.FG0NWSIN[FG0NWSNX] - 6; /* remaining mos*/
  ;
  while (FG0NW00.FG0NWIDX <= FFZREC.FFZNUMMO /* nbr of mos loaded*/
   && FG0NW00.FG0NWLIX <= FG0NW00.FG0NWREM) /* nbr of mos left*/
    ;
    FG0NM001.FG0NMHD2[FG0NWLIX] = FFZREC.FFZIYYMM[FG0NWIDX];
    set FG0NM001.FG0NMHD2[FG0NWLIX] skip;
    ;
    FG0NW00.FG0NWIDX = FG0NW00.FG0NWIDX + 1; /* increment index*/
    FG0NW00.FG0NWLIX = FG0NW00.FG0NWLIX + 1; /* increment load index*/
    ;
  end
  ;
  FG0NS20(); /* load heading literals*/
  ;
end // end FG0N211

// move monthly heading
Function FG0N212()
  ;
  while (FG0NW00.FG0NWIDX <= FFZREC.FFZNUMMO /* nbr of mos loaded*/
   && FG0NW00.FG0NWLIX <= FG0NW00.FG0NWSIN[FG0NWSNX]
   && FG0NW00.FG0NWLIX <= 6)
    ;
    FG0NM001.FG0NMHD2[FG0NWLIX] = FFZREC.FFZIYYMM[FG0NWIDX];
    set FG0NM001.FG0NMHD2[FG0NWLIX] skip;
    ;
    FG0NW00.FG0NWIDX = FG0NW00.FG0NWIDX + 1; /* increment index*/
    FG0NW00.FG0NWLIX = FG0NW00.FG0NWLIX + 1; /* increment load index*/
    ;
  end
end // end FG0N212

// move total and pct heading
Function FG0N213()
   /* --------------------------------------------------------*/
   /* move the totals and pct headings*/
   /* --------------------------------------------------------*/
  ;
  if (FG0NW00.FG0NWLIX > FG0NW00.FG0NWSIN[FG0NWSNX]) /* load the whole sesn*/
    ;
    FG0NS20(); /* load heading literals*/
    ;
  end
  ;
end // end FG0N213

// Move the remaining month
Function FG0N214()
  ;
   /* ----------------------------------------------------------------------*/
   /* Print whatever are left from the previous page.*/
   /* (Month, Percent, Range total and Percent or subtotal, Range total*/
   /* percent)*/
   /*  */
   /* load subtotal/total/percent*/
   /*  */
   /* ----------------------------------------------------------------------*/
  ;
   /* --------------------------------------------------------------*/
   /* print remaining months, subtotal, range total and pct fields*/
   /* --------------------------------------------------------------*/
  ;
  ;
  FG0NW00.FG0NWSIX = FG0NW00.FG0NWIDX - 6;
  while (FG0NW00.FG0NWSIX < FG0NW00.FG0NWIDX)
    FG0NW00.FG0NWUST[FG0NWPIX] = FG0NW00.FG0NWUQT[FG0NWSIX] +                                 FG0NW00.FG0NWUST[FG0NWPIX];
    FG0NW00.FG0NWSIX = FG0NW00.FG0NWSIX + 1;
  end
  ;
   /* remaining mos*/
  FG0NW00.FG0NWREM = FG0NW00.FG0NWSIN[FG0NWSNX] - 6;
  while (FG0NW00.FG0NWIDX <= FFZREC.FFZNUMMO  /* nbr of mos loaded*/
   && FG0NW00.FG0NWLIX <= FG0NW00.FG0NWREM /* nbr of mos left*/
   && FG0NW00.FG0NWLIX <= 6) /* right end*/
    ;
    FG0NW00.FG0NWWQT[FG0NWLIX] = FG0NW00.FG0NWQTY[FG0NWIDX];
    ;
    FG0NW00.FG0NWUST[FG0NWPIX] = FG0NW00.FG0NWUQT[FG0NWIDX] +                                FG0NW00.FG0NWUST[FG0NWPIX];
    ;
    FG0NW00.FG0NWIDX = FG0NW00.FG0NWIDX + 1; /* increment work index*/
    FG0NW00.FG0NWLIX = FG0NW00.FG0NWLIX + 1; /* increment load index*/
    ;
  end
  ;
  FG0NS30(); /* subtotal and range total*/
  ;
end // end FG0N214

// Move the monthly qty
Function FG0N215()
  ;
  while (FG0NW00.FG0NWIDX <= FFZREC.FFZNUMMO /* nbr mos loaded*/
   && FG0NW00.FG0NWLIX <= FG0NW00.FG0NWSIN[FG0NWSNX]
   && FG0NW00.FG0NWLIX <= 6)
    ;
    FG0NW00.FG0NWWQT[FG0NWLIX] = FG0NW00.FG0NWQTY[FG0NWIDX];
    ;
    FG0NW00.FG0NWUST[FG0NWPIX] = FG0NW00.FG0NWUQT[FG0NWIDX] +                                  FG0NW00.FG0NWUST[FG0NWPIX];
    ;
    FG0NW00.FG0NWIDX = FG0NW00.FG0NWIDX + 1; /* increment save index*/
    FG0NW00.FG0NWLIX = FG0NW00.FG0NWLIX + 1; /* increment load index*/
    ;
  end
  ;
end // end FG0N215

// Move the total line
Function FG0N216()
  if (FG0NW00.FG0NWLIX > FG0NW00.FG0NWSIN[FG0NWSNX]) /* load the whole sesn*/
    ;
    FG0NS30(); /* move subtotal, total and pcts*/
    ;
  end
end // end FG0N216

// Move the remaining month total
Function FG0N217()
  ;
   /* ----------------------------------------------------------------------*/
   /* Print whatever are left from the previous page.*/
   /* (Month, Percent, Range total and Percent or subtotal, Range total*/
   /* percent)*/
   /*  */
   /* load subtotal/total/percent for the total line*/
   /*  */
   /* ----------------------------------------------------------------------*/
  ;
   /* --------------------------------------------------------------*/
   /* print remaining months, subtotal, range total and pct fields*/
   /* --------------------------------------------------------------*/
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* since pf10 is going backward to the 1st page and subtotal*/
   /* will still be 0. So if pf10 and the 2nd (right) page is*/
   /* reached, then the calculation of subtotal in the 1st*/
   /* page is necessary.*/
   /* ---------------------------------------------------------------*/
  ;
  FG0NW00.FG0NWSIX = FG0NW00.FG0NWIDX - 6;
  while (FG0NW00.FG0NWSIX < FG0NW00.FG0NWIDX)
    FG0NW00.FG0NWUMT = FG0NW03.FG0NWUMT[FG0NWSIX] +                      FG0NW00.FG0NWUMT;
    FG0NW00.FG0NWSIX = FG0NW00.FG0NWSIX + 1;
  end
  ;
  FG0NW00.FG0NWREM = FG0NW00.FG0NWSIN[FG0NWSNX] - 6; /* remaining mos*/
  ;
  while (FG0NW00.FG0NWIDX <= FFZREC.FFZNUMMO  /* nbr of mos loaded*/
   && FG0NW00.FG0NWLIX <= FG0NW00.FG0NWREM /* nbr of mos left*/
   && FG0NW00.FG0NWLIX <= 6) /* right end*/
    ;
    FG0NW00.FG0NWWQT[FG0NWLIX] = FG0NW03.FG0NWMTQ[FG0NWIDX];
    FG0NW00.FG0NWUMT = FG0NW03.FG0NWUMT[FG0NWIDX] + FG0NW00.FG0NWUMT;
    ;
    FG0NW00.FG0NWIDX = FG0NW00.FG0NWIDX + 1; /* increment work index*/
    FG0NW00.FG0NWLIX = FG0NW00.FG0NWLIX + 1; /* increment load index*/
    ;
  end
  ;
  FG0NS40(); /* process tots for total line*/
  ;
end // end FG0N217

// Move the monthly total
Function FG0N218()
  ;
  while (FG0NW00.FG0NWIDX <= FFZREC.FFZNUMMO /* nbr mos loaded*/
   && FG0NW00.FG0NWLIX <= FG0NW00.FG0NWSIN[FG0NWSNX]
   && FG0NW00.FG0NWLIX <= 6)
    ;
    FG0NW00.FG0NWWQT[FG0NWLIX] = FG0NW03.FG0NWMTQ[FG0NWIDX];
    FG0NW00.FG0NWUMT = FG0NW03.FG0NWUMT[FG0NWIDX] + FG0NW00.FG0NWUMT;
    ;
    FG0NW00.FG0NWIDX = FG0NW00.FG0NWIDX + 1; /* increment save index*/
    FG0NW00.FG0NWLIX = FG0NW00.FG0NWLIX + 1; /* increment load index*/
    ;
  end
  ;
end // end FG0N218

// Move subtot & tot for tot line
Function FG0N219()
   /* --------------------------------------------------------*/
   /* move the totals and pct*/
   /* --------------------------------------------------------*/
  ;
  if (FG0NW00.FG0NWLIX > FG0NW00.FG0NWSIN[FG0NWSNX]) /* load the whole sesn*/
    ;
    FG0NS40(); /* translate and load subtotal and total*/
    ;
  end
end // end FG0N219

// Move the remaining month pct
Function FG0N220()
   /* ----------------------------------------------------------------------*/
   /* Print whatever are left from the previous page.*/
   /* (Monthly percent or subtotal percent)*/
   /*  */
   /* load subtotal percent for the percent line*/
   /*  */
   /* ----------------------------------------------------------------------*/
  ;
   /* --------------------------------------------------------------*/
   /* print remaining months and subtotal*/
   /* --------------------------------------------------------------*/
  ;
  FG0NW00.FG0NWREM = FG0NW00.FG0NWSIN[FG0NWSNX] - 6; /* remaining mos*/
  ;
  while (FG0NW00.FG0NWIDX <= FFZREC.FFZNUMMO  /* nbr of mos loaded*/
   && FG0NW00.FG0NWLIX <= FG0NW00.FG0NWREM /* nbr of mos left*/
   && FG0NW00.FG0NWLIX <= 6) /* right end*/
    ;
    if (FG0NW03.FG0NWUMT[FG0NWTIX] != 0)
      FG0NW00.FG0NWNM1 = FG0NW03.FG0NWUMT[FG0NWIDX] * 100;
      FG0NW00.FG0NWNPT = mathLib.round(FG0NW00.FG0NWNM1 /       FG0NW03.FG0NWUMT[FG0NWTIX], -mathLib.decimals(FG0NW00.FG0NWNPT));
      ;
      /* ----------------------------------------------------------*/
       /* zero suppress the percent field*/
      /* ----------------------------------------------------------*/
      ;
      if (FG0NW00.FG0NWNPT != 0)
        if (FG0NW00.FG0NWNPT < 0) /* percent is negative*/
          FG0NW00.FG0NWNPT = FG0NW00.FG0NWNPT * -1;
        end
        ;
        FG0NW00.FG0NWPTW = FG0NW00.FG0NWNP1;
        FG0NW00.FG0NWPTP = ".";
        FG0NW00.FG0NWPTD = FG0NW00.FG0NWNP2;
        ;
        if (FG0NW00.FG0NWPT1 == "0")
          FG0NW00.FG0NWPT1 = " ";
          if (FG0NW00.FG0NWPT2 == "0")
            FG0NW00.FG0NWPT2 = " ";
          end
        end
        ;
        if (FG0NW03.FG0NWUMT[FG0NWIDX] < 0
         && FG0NW03.FG0NWUMT[FG0NWTIX] < 0)
          ;
           /* both quantities are negative; positive percent*/
          ;
        else /* one or the other qty are negative*/
          if (FG0NW03.FG0NWUMT[FG0NWTIX] < 0
           || FG0NW03.FG0NWUMT[FG0NWIDX] < 0)
            ;
            if (FG0NW00.FG0NWNPT > 99.9) /* reformat pct w/o fraction*/
              FG0NW00.FG0NWPTD = FG0NW00.FG0NWPT3;
              FG0NW00.FG0NWPTP = FG0NW00.FG0NWPT2;
              FG0NW00.FG0NWPT3 = FG0NW00.FG0NWPT1;
              FG0NW00.FG0NWPT2 = "-";
              FG0NW00.FG0NWPT1 = " ";
              ;
            else /* percent < or = -99.9*/
              if (FG0NW00.FG0NWPT2 == " ")
                FG0NW00.FG0NWPT2 = "-";
              else
                if (FG0NW00.FG0NWPT1 == " ")
                  FG0NW00.FG0NWPT1 = "-";
                end
              end
            end
          end
        end
        ;
        FG0NW00.FG0NWWQT[FG0NWLIX] = FG0NW00.FG0NWPCT;
        ;
      end
    end
    ;
    FG0NW00.FG0NWIDX = FG0NW00.FG0NWIDX + 1; /* increment work index*/
    FG0NW00.FG0NWLIX = FG0NW00.FG0NWLIX + 1; /* increment load index*/
    ;
  end
  ;
  FG0NS50(); /* translate and load subtotal*/
  ;
  FG0NW00.FG0NW-NEXT = "Y"; /* next season*/
  ;
end // end FG0N220

// Move the monthly pct
Function FG0N221()
  while (FG0NW00.FG0NWIDX <= FFZREC.FFZNUMMO /* nbr mos loaded*/
   && FG0NW00.FG0NWLIX <= FG0NW00.FG0NWSIN[FG0NWSNX]
   && FG0NW00.FG0NWLIX <= 6)
    ;
    /* ----------------------------------------------------------*/
     /* calculate/load monthly percents*/
    /* ----------------------------------------------------------*/
    ;
    if (FG0NW03.FG0NWUMT[FG0NWTIX] != 0)
      FG0NW00.FG0NWNM1 = FG0NW03.FG0NWUMT[FG0NWIDX] * 100;
      FG0NW00.FG0NWNPT = mathLib.round(FG0NW00.FG0NWNM1 / FG0NW03.FG0NWUMT[FG0NWTIX], -mathLib.decimals(FG0NW00.FG0NWNPT));
      ;
      /* ----------------------------------------------------------*/
       /* zero suppress the percent field*/
      /* ----------------------------------------------------------*/
      ;
      if (FG0NW00.FG0NWNPT != 0)
        if (FG0NW00.FG0NWNPT < 0) /* percent is negative*/
          FG0NW00.FG0NWNPT = FG0NW00.FG0NWNPT * -1;
        end
        ;
        FG0NW00.FG0NWPTW = FG0NW00.FG0NWNP1;
        FG0NW00.FG0NWPTP = ".";
        FG0NW00.FG0NWPTD = FG0NW00.FG0NWNP2;
        ;
        if (FG0NW00.FG0NWPT1 == "0")
          FG0NW00.FG0NWPT1 = " ";
          if (FG0NW00.FG0NWPT2 == "0")
            FG0NW00.FG0NWPT2 = " ";
          end
        end
        ;
        if (FG0NW03.FG0NWUMT[FG0NWTIX] < 0
         && FG0NW03.FG0NWUMT[FG0NWIDX] < 0)
          ;
          /* both quantities are negative; positive percent*/
          ;
        else /* one or the other qty are negative*/
          if (FG0NW03.FG0NWUMT[FG0NWIDX] < 0
           || FG0NW03.FG0NWUMT[FG0NWTIX] < 0)
            ;
            if (FG0NW00.FG0NWNPT > 99.9) /* reformat pct w/o fraction*/
              FG0NW00.FG0NWPTD = FG0NW00.FG0NWPT3;
              FG0NW00.FG0NWPTP = FG0NW00.FG0NWPT2;
              FG0NW00.FG0NWPT3 = FG0NW00.FG0NWPT1;
              FG0NW00.FG0NWPT2 = "-";
              FG0NW00.FG0NWPT1 = " ";
              ;
            else /* percent < or = -99.9*/
              if (FG0NW00.FG0NWPT2 == " ")
                FG0NW00.FG0NWPT2 = "-";
              else
                if (FG0NW00.FG0NWPT1 == " ")
                  FG0NW00.FG0NWPT1 = "-";
                end
              end
            end
          end
        end
        ;
        FG0NW00.FG0NWWQT[FG0NWLIX] = FG0NW00.FG0NWPCT;
        ;
      end
    end
    ;
    FG0NW00.FG0NWIDX = FG0NW00.FG0NWIDX + 1; /* increment save index*/
    FG0NW00.FG0NWLIX = FG0NW00.FG0NWLIX + 1; /* increment load index*/
    ;
  end
  ;
end // end FG0N221

// Move the total pct
Function FG0N222()
   /* --------------------------------------------------------*/
   /* move the totals and pct*/
   /* --------------------------------------------------------*/
  ;
  if (FG0NW00.FG0NWLIX > FG0NW00.FG0NWSIN[FG0NWSNX]) /* load the whole sesn*/
    ;
    FG0NS50(); /* translate and load subtotal*/
    ;
    if (FG0NW00.FG0NWIDX > FFZREC.FFZNUMMO) /* Reach the no of mo reqstd*/
      ;
    else
      FG0NW00.FG0NW-NEXT = "Y"; /* next season*/
    end
    ;
  else
    ;
    FG0NW00.FG0NWSIX = FG0NW00.FG0NWPGX + 1;
    FG0NW00.FG0NW-PMON[FG0NWSIX] = "Y";
    ;
  end
end // end FG0N222

// Check attention identifier
Function FG0N300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    converseLib.clearScreen();
     /* refresh map*/
    ;
    FG0NW00.FG0NWSWF = "Y"; /* format screen m001*/
    FG0NW00.FG0NWSWR = "N"; /* request for data*/
    ;
    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0NM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      FG0NS01(); /* purge temp storage*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
      FG0NW00.FG0NWSWF = "Y"; /* format screen m001*/
      FG0NW00.FG0NWSWR = "N"; /* request for data*/
      ;
      set FG0NM001.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FFWREC.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG0NM001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FG0A"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FG0K"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FG0L"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "FG0M"; /* TO application*/
    end
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    FG0NW00.FG0NWSWF = "Y"; /* format screen m001*/
    FG0NW00.FG0NWSWR = "N"; /* request for data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* pf7 was not pressed*/
   && converseVar.eventKey not pf8   /* pf8 was not pressed*/
   && converseVar.eventKey not pf10  /* pf10 was not pressed*/
   && converseVar.eventKey not pf11  /* pf11 was not pressed*/
  )                                 
    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FG0N300

// Reset highlighted fields
Function FG0N400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FG0NM001.FG0NMBRG initialAttributes; /* begin range*/
  set FG0NM001.FG0NMERG initialAttributes; /* end range*/
  set FG0NM001.YPGCD initialAttributes; /* product type group*/
  set FG0NM001.XPCCD initialAttributes; /* product line code*/
  set FG0NM001.FFW-ND-SHP-IND initialAttributes; /* need / ship mo indicator*/
  set FG0NM001.FG0NMSEM[1] initialAttributes; /* nbr of months per season*/
  set FG0NM001.FG0NMSEM[2] initialAttributes; /* nbr of months per season*/
  set FG0NM001.FG0NMSEM[3] initialAttributes; /* nbr of months per season*/
  set FG0NM001.FG0NMSEM[4] initialAttributes; /* nbr of months per season*/
  ;
  set FG0NM001.CATOAP initialAttributes;
  set FG0NM001.CAITEM initialAttributes;
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0NM001.XPCCD == "?" /* product category*/
   || FG0NM001.YPGCD == "?") /* product type group*/
    ;
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  else
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type group codes*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0NM001.XPCCD == "?") /* product type grp list*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT CATEGORY CODES"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* gpc code*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      XPCREC.XPCCD = FFWREC.XPCCD; /* product line code*/
      XPCREC.XGPCD = COMMAREA.XGPCD; /* gpc code*/
      if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
        FG0NM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
      end
    else
      FG0NM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FG0NM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG0NM001.XPCCD cursor; /* Establish cursor position*/
    ;
  end
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type group codes*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0NM001.YPGCD == "?") /* product type grp list*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT TYPE GROUP"; /* Heading*/
    ;
    XX0XW02.YPGFFFL = "Y"; /* init flag*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0NM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FG0NM001.YPGABRV = FFWREC.YPGABRV; /* Restore prior code*/
    else
      FG0NM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FG0NM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG0NM001.YPGCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0N400

// Verify the entered data
Function FG0N500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FG0NM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* verify request to scroll forward(pf7) or backwards(pf8)*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    ;
    FG0N510(); /* verify scroll fwrd/back request*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* verify request to scroll right(pf11) or left(pf10)*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10
   || converseVar.eventKey is pf11)
    ;
    FG0N520(); /* verify scroll left/right*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if ezeaid not equal enter verify modifiable data*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter)
    ;
    FG0N530(); /* verify modifiable data*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate entry fields*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter)
    ;
    FG0NW00.FG0NWWYM = FFWREC.FFABEGMO;
    FG0NW00.FG0NW-WYM1 = FFWREC.FFAENDMO;
    ;
    if (FG0NM001.FG0NMSEM[1] != FG0NW00.FG0NWSEM[1]       
     || FG0NM001.FG0NMSEM[1] == 0                         
     || FG0NM001.FG0NMSEM[2] != FG0NW00.FG0NWSEM[2]       
     || FG0NM001.FG0NMSEM[2] == 0                         
     || FG0NM001.FG0NMSEM[3] != FG0NW00.FG0NWSEM[3]       
     || FG0NM001.FG0NMSEM[3] == 0                         
     || FG0NM001.FG0NMSEM[4] != FG0NW00.FG0NWSEM[4]       
     || FG0NM001.FG0NMSEM[4] == 0                         
     || FG0NM001.FFW-ND-SHP-IND != FG0NW00.FFW-ND-SHP-IND /* nd/shp mo ind*/
     || FG0NM001.FFW-ND-SHP-IND == " "                    /* nd/shp mo ind*/
     || FG0NM001.YPGCD != FFWREC.YPGCD                    /* product type grp chg*/
     || FG0NM001.YPGCD == " "                             /* product type grp chg*/
     || FG0NM001.XPCCD != FFWREC.XPCCD                    /* product category chg*/
     || FG0NM001.XPCCD == " "                             /* product category changed*/
     || FG0NM001.FG0NMBRG != FG0NW00.FG0NWWYM             /* beg range changed*/
     || FG0NM001.FG0NMBRG == 0                            /* beg range changed*/
     || FG0NM001.FG0NMERG != FG0NW00.FG0NW-WYM1           /* end range changed*/
     || FG0NM001.FG0NMERG == 0)                           /* end range changed*/
      ;
      FG0NW00.FG0NWSNX = 1; /* season index*/
      FG0NW00.FG0NWPGX = 1; /* page index*/
      FG0NW00.XXXTSPAG = 1; /* page no*/
      FG0NW00.FG0NW-NEXT = "N"; /* next season flag*/
      move "N" to FG0NW00.FG0NW-PMON[1] for all; /* print remaining month flag*/
      FG0NW00.FG0NWUMT = 0;
      move 0 to FG0NW00.FG0NWUST[1] for all;
      ;
    end
    ;
    FG0N540(); /* validate entry fields*/
    ;
    /* ------------------------------------------------------*/
     /* if key data changed check modifiable fields*/
    /* ------------------------------------------------------*/
    ;
    FG0NW00.FG0NWWYM = FFWREC.FFABEGMO;
    FG0NW00.FG0NW-WYM1 = FFWREC.FFAENDMO;
    ;
    if (FG0NM001.FG0NMSEM[1] != FG0NW00.FG0NWSEM[1]       
     || FG0NM001.FG0NMSEM[2] != FG0NW00.FG0NWSEM[2]       
     || FG0NM001.FG0NMSEM[3] != FG0NW00.FG0NWSEM[3]       
     || FG0NM001.FG0NMSEM[4] != FG0NW00.FG0NWSEM[4]       
     || FG0NM001.FFW-ND-SHP-IND != FG0NW00.FFW-ND-SHP-IND /* nd/shp mo ind*/
     || FG0NM001.FFW-ND-SHP-IND == " "                    /* nd/shp mo ind*/
     || FG0NM001.YPGCD != FFWREC.YPGCD                    /* product type grp chg*/
     || FG0NM001.YPGCD == " "                             /* product type grp chg*/
     || FG0NM001.XPCCD != FFWREC.XPCCD                    /* product category chg*/
     || FG0NM001.XPCCD == " "                             /* product category changed*/
     || FG0NM001.FG0NMBRG != FG0NW00.FG0NWWYM             /* beg range changed*/
     || FG0NM001.FG0NMBRG == 0                            /* beg range changed*/
     || FG0NM001.FG0NMERG != FG0NW00.FG0NW-WYM1           /* end range changed*/
     || FG0NM001.FG0NMERG == 0)                           /* end range changed*/
      ;
      if (converseVar.validationMsgNum == 0)
        FG0NW00.FG0NWSWR = "Y"; /* request data request*/
      end
      ;
    end
  end
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end
  ;
  ;
end // end FG0N500

// verify scroll fwrd/back
Function FG0N510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FG0NW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FG0NW00.XXXTSPAG >= FG0NW00.TA5TSQIX) /* and no more pages*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/
    ;
  end
  ;
  ;
end // end FG0N510

// verify scroll left/right
Function FG0N520()
   /* ------------------------------------------------------------*/
   /* If scroll left was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* Scroll left request*/
    if (FG0NW00.FG0NWPGX == 1) /* and no previous pages*/
      ;
      FFWREC.XXXMODID = "520"; /* Module identification*/
      converseLib.validationFailed(23); /* No previous page to display*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll right was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11 /* Scroll right request*/
   && FG0NW00.FG0NWIDX > FFZREC.FFZNUMMO) /* and no more pages*/
    ;
    FFWREC.XXXMODID = "520"; /* Module identification*/
    converseLib.validationFailed(24); /* No more pages to display*/
    ;
  end
  ;
  ;
end // end FG0N520

// Verify header modifible fields
Function FG0N530()
   /* -----------------------------------------------------*/
   /* Verify header modifiable fields*/
   /* -----------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter)
    FG0NW00.FG0NWPIX = 1;
    while (FG0NW00.FG0NWPIX <= 4)
      if (FG0NM001.FG0NMSEM[FG0NWPIX] != FG0NW00.FG0NWSEM[FG0NWPIX])
        set FG0NM001.FG0NMSEM[FG0NWPIX] cursor, bold;
        converseLib.validationFailed(111);
        FFWREC.XXXMODID = "530";
      end
      FG0NW00.FG0NWPIX = FG0NW00.FG0NWPIX + 1;
    end
  end
  ;
  if (FG0NM001.FFW-ND-SHP-IND != FFWREC.FFW-ND-SHP-IND)
    set FG0NM001.FFW-ND-SHP-IND cursor, bold;
    converseLib.validationFailed(10);
    FFWREC.XXXMODID = "530";
  end
  ;
  if (FG0NM001.XPCCD != FFWREC.XPCCD)
    set FG0NM001.XPCCD cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "530";
  end
  ;
  if (FG0NM001.YPGCD != FFWREC.YPGCD)
    set FG0NM001.YPGCD cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "530";
  end
  ;
  FG0NW00.FG0NWWED = FFWREC.FFAENDMO;
  if (FG0NM001.FG0NMERG != FG0NW00.FG0NWEYM)
    set FG0NM001.FG0NMERG cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "530";
  end
  ;
  FG0NW00.FG0NWWBD = FFWREC.FFABEGMO;
  if (FG0NM001.FG0NMBRG != FG0NW00.FG0NWBYM)
    set FG0NM001.FG0NMBRG cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "530";
  end
  ;
  ;
end // end FG0N530

// validate modifiable data
Function FG0N540()
  ;
  set FFZREC empty;
  ;
  FFZREC.FFZMONTH = 1;
  FFZREC.FFZSRANG = "Y";
  FFZREC.FFZBYYMM = FG0NM001.FG0NMBRG;
  FFZREC.FFZEYYMM = FG0NM001.FG0NMERG;
  ;
  XSFFS30(); /* edit date range*/
  ;
   /* ------------------------------------------------------------*/
   /* validate season end months*/
   /* ------------------------------------------------------------*/
  ;
  XPCREC.XGPCD = COMMAREA.XGPCD;
  XPCREC.XPCCD = FG0NM001.XPCCD;
  if (FG0NM001.XPCCD != " "
   && XPCREC.XPCKEY in XPCTBL.XPCKEY
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    ;
    FG0N541();
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate need/ship month indicator*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0NM001.FFW-ND-SHP-IND == "N"
   || FG0NM001.FFW-ND-SHP-IND == "S")
    ;
    /* valid entry*/
    ;
  else
    converseLib.validationFailed(10);
    FFWREC.XXXMODID = "540";
    set FG0NM001.FFW-ND-SHP-IND cursor, bold;
  end
   /* ------------------------------------------------------------*/
   /* validate product category code*/
   /* ------------------------------------------------------------*/
  ;
  XPCREC.XGPCD = COMMAREA.XGPCD;
  XPCREC.XPCCD = FG0NM001.XPCCD;
  if (XPCREC.XPCKEY in XPCTBL.XPCKEY
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    FG0NM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
  else
    FG0NM001.XPCABRV = " ";
    converseLib.validationFailed(118);
    FFWREC.XXXMODID = "540";
    set FG0NM001.XPCCD cursor, bold;
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate product type group*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0NM001.YPGCD in YPGTBL.YPGCD
   && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    FG0NM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
  else
    FG0NM001.YPGABRV = " ";
    converseLib.validationFailed(118);
    FFWREC.XXXMODID = "540";
    set FG0NM001.YPGCD cursor, bold;
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate end yymm range and begin yymm range*/
   /* ------------------------------------------------------------*/
  ;
  if (FFZREC.FFZENDRC == "1")
    set FG0NM001.FG0NMERG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "540";
  else
    if (FFZREC.FFZENDRC == "2")
      set FG0NM001.FG0NMERG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "540";
    else
      if (FFZREC.FFZENDRC == "3")
        set FG0NM001.FG0NMERG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "540";
      end
    end
  end
  ;
  if (FFZREC.FFZBEGRC == "1")
    set FG0NM001.FG0NMBRG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "540";
  else
    if (FFZREC.FFZBEGRC == "2")
      set FG0NM001.FG0NMBRG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "540";
    else
      if (FFZREC.FFZBEGRC == "3")
        set FG0NM001.FG0NMBRG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "540";
      end
    end
  end
  ;
end // end FG0N540

// Verify season end month
Function FG0N541()
  ;
   /* ------------------------------------------------------------*/
   /* validate season end months*/
   /* ------------------------------------------------------------*/
  ;
  if (FFZREC.FFZENDMO == 0) /* passed from other application*/
    FG0NW00.FG0NWWBD = FFWREC.FFABEGMO; /* beginning date*/
    FG0NW00.FG0NWWED = FFWREC.FFAENDMO; /* ending date*/
  else
    FG0NW00.FG0NWWBD = FFZREC.FFZBEGMO; /* beginning date*/
    FG0NW00.FG0NWWED = FFZREC.FFZENDMO; /* ending date*/
  end
  ;
   /* figure out number of seasons*/
  ;
  FG0NW00.FG0NWPIX = 4; /* index*/
  while (FG0NW00.FG0NWPIX > 0)
    ;
    FG0NW00.FG0NWSEM[FG0NWPIX] = 0;
    FG0NW00.FG0NWSMO[FG0NWPIX] = 0;
    FG0NW00.FG0NWSIN[FG0NWPIX] = 0;
    ;
    FG0NW00.FG0NWPIX = FG0NW00.FG0NWPIX - 1;
    /*  */
  end
  ;
  FG0NW00.FG0NWNSS = 0; /* reset number of seasons*/
  FG0NW00.FG0NWPIX = 4; /* index*/
  while (FG0NW00.FG0NWPIX > 0)
    if (FG0NM001.FG0NMSEM[FG0NWPIX] > 0)
      FG0NW00.FG0NWNSS = FG0NW00.FG0NWPIX; /* number of seasons*/
      FG0NW00.FG0NWPIX = FG0NW00.FG0NWPIX - 4; /* force out of loop*/
      ;
    else
      ;
      FG0NW00.FG0NWPIX = FG0NW00.FG0NWPIX - 1;
    end
    ;
  end
  ;
   /* check for no seasons entered*/
  ;
  if (FG0NW00.FG0NWNSS == 0) /* no season lengths found*/
    FG0NS60(); /* obtain default season end months*/
  end
  ;
   /* If no season end month entered then check the length of the range,*/
   /* if <= 6 months use default (end month of the range)*/
  ;
  if (FG0NW00.FG0NWNSS == 0) /* no season lengths found*/
    if (FG0NW00.FG0NWBYY == FG0NW00.FG0NWEYY) /* same year*/
      FG0NW00.FG0NWNM1 = FG0NW00.FG0NWEMM - FG0NW00.FG0NWBMM + 1;
    else
      FG0NW00.FG0NWNM1 = FG0NW00.FG0NWEMM + 12 - FG0NW00.FG0NWBMM + 1;
    end
    ;
    if (FG0NW00.FG0NWNM1 <= 6)
      FG0NW00.FG0NWNSS = 1;
      FG0NM001.FG0NMSEM[1] = FG0NW00.FG0NWEMM; /* range end month*/
    end
  end
  ;
  if (FG0NW00.FG0NWNSS == 0)
    FFWREC.XXXMODID = "531"; /* Module identification*/
    set FG0NM001.FG0NMSEM[1] cursor, bold; /* Highlight*/
    converseLib.validationFailed(442); /* required field*/
    return;
  end
  ;
   /* check for embedded zeros*/
  ;
  FG0NW00.FG0NWPIX = FG0NW00.FG0NWNSS; /* index*/
  while (FG0NW00.FG0NWPIX > 0)
    if (FG0NM001.FG0NMSEM[FG0NWPIX] == 0) /* check for embedded zeros*/
      FFWREC.XXXMODID = "531"; /* Module identification*/
      set FG0NM001.FG0NMSEM[FG0NWPIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(440); /* required field*/
    end
    FG0NW00.FG0NWPIX = FG0NW00.FG0NWPIX - 1;
  end
  ;
  if (converseVar.validationMsgNum > 0)
    return;
  end
  ;
   /* check for invalid season end months*/
  ;
  FG0NW00.FG0NWPIX = FG0NW00.FG0NWNSS; /* index*/
  while (FG0NW00.FG0NWPIX > 0)
    ;
    if (FG0NM001.FG0NMSEM[FG0NWPIX] < 1 /* check for month error*/
     || FG0NM001.FG0NMSEM[FG0NWPIX] > 12)
      FFWREC.XXXMODID = "531"; /* Module identification*/
      set FG0NM001.FG0NMSEM[FG0NWPIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(010); /* required field*/
      return;
    end
    ;
    if (FG0NM001.FG0NMSEM[FG0NWPIX] != FG0NW00.FG0NWEMM
     && FG0NW00.FG0NWPIX == FG0NW00.FG0NWNSS) /* last end month*/
      FFWREC.XXXMODID = "531"; /* Module identification*/
      set FG0NM001.FG0NMSEM[FG0NWPIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(447); /* required field*/
      return;
      ;
    else
      ;
      FG0NS70(); /* check for invalid entry*/
      ;
    end
    ;
    FG0NW00.FG0NWPIX = FG0NW00.FG0NWPIX - 1;
    ;
  end
  ;
  FG0NW00.FG0NWPIX = FG0NW00.FG0NWNSS;
  while (FG0NW00.FG0NWPIX > 0) /* nbr of seasons*/
    FG0NW00.FG0NWLIX = FG0NW00.FG0NWPIX - 1;
    if (FG0NW00.FG0NWLIX != 0)
      if (FG0NW00.FG0NWSMO[FG0NWLIX] >= FG0NW00.FG0NWSMO[FG0NWPIX])
        FFWREC.XXXMODID = "531"; /* Module identification*/
        set FG0NM001.FG0NMSEM[FG0NWLIX] cursor, bold; /* Highlight*/
        converseLib.validationFailed(444); /* sesn end mo > next sesn end mo*/
      end
    end
    FG0NW00.FG0NWPIX = FG0NW00.FG0NWPIX - 1;
  end
  ;
  FG0NW00.FG0NWPIX = FG0NW00.FG0NWNSS;
  FG0NW00.FG0NWNM1 = 0; /* clear total months work area*/
  while (FG0NW00.FG0NWPIX > 0) /* nbr of seasons*/
    FG0NW00.FG0NWSEM[FG0NWPIX] = FG0NM001.FG0NMSEM[FG0NWPIX];
    FG0NS80(); /* calculate no of mos in each sesn*/
    FG0NW00.FG0NWPIX = FG0NW00.FG0NWPIX - 1;
  end
  ;
  ;
end // end FG0N541

// Process valid input request
Function FG0N600()
   /* ------------------------------------------------------------*/
   /* indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/
  ;
  FG0NW00.FG0NWSWF = "Y"; /* set format map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA/ffwrec*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.FFW-ND-SHP-IND = FG0NM001.FFW-ND-SHP-IND;
  FG0NW00.FFW-ND-SHP-IND = FG0NM001.FFW-ND-SHP-IND;
  ;
  FFWREC.XPCCD = FG0NM001.XPCCD; /* product category*/
  FFWREC.XPCABRV = FG0NM001.XPCABRV; /* product category abrv desc*/
  ;
  FFWREC.YPGCD = FG0NM001.YPGCD; /* product type grp code*/
  FFWREC.YPGABRV = FG0NM001.YPGABRV; /* product type grp abrv desc*/
  ;
  if (FFWREC.FFWENDM1 != FG0NW00.FG0NWSMO[1]
   && FFWREC.FFWENDM1 == 0)
    FG0NW00.FG0NWSWR = "Y"; /* request for data switch*/
  end
  ;
  FFWREC.FFWENDM1 = FG0NW00.FG0NWSMO[1]; /* season end month*/
  FFWREC.FFWENDM2 = FG0NW00.FG0NWSMO[2]; /* season end month*/
  FFWREC.FFWENDM3 = FG0NW00.FG0NWSMO[3]; /* season end month*/
  FFWREC.FFWENDM4 = FG0NW00.FG0NWSMO[4]; /* season end month*/
  ;
  FFWREC.FFABEGMO = FFZREC.FFZBEGMO;
  FFWREC.FFAENDMO = FFZREC.FFZENDMO;
  ;
  if (converseVar.eventKey is enter
   && FG0NW00.FG0NWSWR == "Y") /* KEY DATA MODIFIED*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* request to scroll backwards*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* display next season*/
    FG0NW00.XXXTSPAG = FG0NW00.XXXTSPAG - 1;
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* request to scroll foward*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* display next season*/
    FG0NW00.XXXTSPAG = FG0NW00.XXXTSPAG + 1;
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* request to scroll left*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* display prior season*/
    ;
    FG0NW00.FG0NWPGX = FG0NW00.FG0NWPGX - 1; /* page index*/
    FG0NW00.FG0NWSNX = FG0NW00.FG0NW-PAGS[FG0NWPGX]; /* sesn index*/
    FG0NW00.FG0NW-NEXT = "N";
    ;
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* request to scroll right*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11) /* display next season*/
    ;
    FG0NW00.FG0NWPGX = FG0NW00.FG0NWPGX + 1;
    FG0NW00.FG0NW-PAGP[FG0NWPGX] = FG0NW00.FG0NWIDX;
    if (FG0NW00.FG0NW-NEXT == "Y")
      FG0NW00.FG0NWSNX = FG0NW00.FG0NWSNX + 1;
      FG0NW00.FG0NW-NEXT = "N";
    end
    FG0NW00.FG0NW-PAGS[FG0NWPGX] = FG0NW00.FG0NWSNX;
    ;
    return;
  end
  ;
  ;
end // end FG0N600

// Purge temporary storage
Function FG0NS01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FG0NW01 empty; /* header data*/
  set FG0NW02 empty; /* M001 temporary storage detail*/
  set FG0NW03 empty; /* columns totals*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FG0NW00.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FG0NW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0NS01

// Fetch vsyshp01 nd mo sls
Function FG0NS02()
   /* ------------------------------------------------------------*/
   /* Obtain historical need month based sales quantities.*/
   /* Load fh5rec record - dfhist.vsyshp01, note:  ffabegmo and*/
   /* ffaendmo loaded in calling process.*/
   /* ------------------------------------------------------------*/
  ;
  set FH5REC empty;
  ;
  FH5REC.SY1STNBR = PG2REC.SY1STNBR;
  FH5REC.SY2CLRID = PG2REC.SY2CLRID;
  FH5REC.XDMCD = PG2REC.XDMCD;
  FH5REC.XLCCD = "10"; /* life cycle code*/
  FH5REC.XQACD = "01"; /* quality code*/
  FH5REC.YSMXOT = "*"; /* sum code*/
  FH5REC.FH1PNAC = "*"; /* national account flag*/
  FH5REC.XPRCD = FFWREC.YPGCD; /* product code*/
  ;
  TA1PGMNM = "FG0NS02"; /* calling process*/
  ;
   /* --------------------------------------------------*/
   /* select on dfhist.vsyshp01 table*/
   /* --------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "NS";
  ;
  XSFFS54();
  ;
  ;
end // end FG0NS02

// Fetch voqsty01 caov qtys
Function FG0NS03()
   /* ------------------------------------------------------------*/
   /* Obtain carryover quantities from dfhist.voqcat01*/
   /* Beginning and ending dates are set in calling process.*/
   /* ------------------------------------------------------------*/
  ;
  FH1REC.SY1STNBR = PG2REC.SY1STNBR; /* style number*/
  FH1REC.SY2CLRID = PG2REC.SY2CLRID; /* color cd*/
  FH1REC.XDMCD = PG2REC.XDMCD; /* dim cd*/
  FH1REC.XLCCD = "10"; /* life cycle code*/
  FH1REC.XQACD = "01"; /* quality code*/
  FH1REC.FH1PNAC = "*"; /* product national acct fl*/
  ;
  TA1REC.TA1PGMNM = "FG0NS03"; /* calling process*/
  ;
  FFFREC.FFFFUNCD = "SC"; /* Summarize by style group*/
  ;
  XSFFS-FF5570();
  ;
  ;
end // end FG0NS03

// Add to temporary storage
Function FG0NS04()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FG0NW02.XXXTSLEN = FG0NW00.XXXTSLEN;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (FG0NW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FG0NW02 empty; /* M001 display storage*/
    ;
    FG0NW00.FG0NWIDX = 1; /* Display line index*/
    ;
    FG0NW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S04"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0NS04

// Calc product bus mo sales
Function FG0NS06()
   /* ------------------------------------------------------------*/
   /* Obtain actual business month sales from dfhist.vsyshp01.*/
   /* Load fh5rec record - dfhist.vsyshp01, note:  ffabegmo and*/
   /* ffaendmo loaded in calling process.*/
   /* ------------------------------------------------------------*/
  ;
  set FH5REC empty;
  ;
  FH5REC.SY1STNBR = PG2REC.SY1STNBR;
  FH5REC.SY2CLRID = PG2REC.SY2CLRID;
  FH5REC.XDMCD = PG2REC.XDMCD;
  FH5REC.XLCCD = "10"; /* life cycle code*/
  FH5REC.XQACD = "01"; /* quality code*/
  FH5REC.YSMXOT = "*"; /* sum code*/
  FH5REC.FH1PNAC = "*"; /* national account flag*/
  ;
  TA1PGMNM = "FG0NS06"; /* calling process*/
  ;
   /* --------------------------------------------------*/
   /* select on dfhist.vsyshp01 table*/
   /* --------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "SS";
  ;
  XSFFS54();
  ;
  FG0NW00.FG0NWUHS = FG0NW00.FG0NWUHS + FH5REC.FH5MSHQT - FH5REC.FH5RTSQT;
  ;
  ;
end // end FG0NS06

// Calc vmsty001 sls fcst
Function FG0NS07()
   /* --------------------------------------------------------*/
   /* Obtain domestic forecast sales quantities*/
   /* --------------------------------------------------------*/
  ;
   /* --------------------------------------------------------*/
   /* Use ff3rec to access dfcast.vmsty001 call*/
   /* --------------------------------------------------------*/
  ;
  FG0NS08(); /* obtain msty sales qty*/
  ;
  FG0NW00.FG0NWUHS = FF9REC.FF6SLFCT;
  ;
    /* --------------------------------------------------------*/
    /* If need month sales requested and processing current mo*/
    /* Back out carryover.*/
    /* --------------------------------------------------------*/
  if (FFWREC.FFW-ND-SHP-IND == "N"
   && FG0NW00.FG0NW-CURR-MO == FFFREC.FFFBEGMO)
    ;
    FFFREC.FFFBEGMO = FG0NW00.FG0NW-CURR-MO-MINUS1;
    FFFREC.FFFENDMO = FG0NW00.FG0NW-CURR-MO-MINUS1;
    FG0NS08(); /* obtain msty sales qty*/
    FG0NW00.FG0NWUHS = FG0NW00.FG0NWUHS - FF9REC.FF6SLFCT;
    FFFREC.FFFBEGMO = FFZREC.FFZINDMO[FG0NWPIX];
    FFFREC.FFFENDMO = FFZREC.FFZINDMO[FG0NWPIX];
  end
  ;
  ;
end // end FG0NS07

// Fetch VMSTY001 sls fcst
Function FG0NS08()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  ;
  set FF9REC empty; /* Clear row storage area*/
  ;
   /* ------------------------------------------------------------*/
   /* Format FFFREC.  (Range month already set.)*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "SS"; /* function code*/
  ;
   /* ------------------------------------------------------------*/
   /* Select DFCAST.VMSTY001*/
   /* ------------------------------------------------------------*/
  ;
  FF9REC.YSMXDV = "10"; /* div code*/
  ;
  FF9REC.XCTCD = "*"; /* country code*/
  ;
  FF9REC.SY1STNBR = FF3REC.SY1STNBR; /* style nbr*/
  FF9REC.SY2CLRID = FF3REC.SY2CLRID; /* style color*/
  FF9REC.XDMCD = FF3REC.XDMCD; /* dimension code*/
  ;
   /* ------------------------------------------------------------*/
   /* Select sum FFSTY.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3740" (FFFREC, SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* or not found*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indisgrpe that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S08"; /* Module identifisgrpion*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indisgrpe not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indisgrpe system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUM TABLE DFCAST.VMSTY001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0NS08

// open 's1' vsyclr01 cursor
Function FG0NS09()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  ;
  set PG2REC empty; /* Clear copybook*/
  ;
   /* ------------------------------------------------------------*/
   /* Format FFFREC. Use 0 for beg mo so that all history*/
   /* will appear regardless of closeout month.*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "S2"; /* Function code*/
  FFFREC.FFFBEGMO = 0; /* Beg month*/
  FFFREC.FFFENDMO = 999999999; /* End month*/
  ;
   /* ------------------------------------------------------------*/
   /* Open SYCLR.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1PGMNM = "FG0NS09"; /* Calling process*/
  ;
  PG2REC.SYBSTGNB = PG7REC.SYBSTGNB; /* style group*/
  PG2REC.XPCCD = FFWREC.XPCCD; /* category code*/
  PG2REC.XPRCD = FFWREC.YPGCD; /* type group code*/
  ;
   /* ------------------------------------------------------------*/
   /* Call XSFFS56.*/
   /* ------------------------------------------------------------*/
  ;
  XSFFS56(); /* Open SYCLR*/
  ;
end // end FG0NS09

// fetch 'n1' vsyclr01
Function FG0NS10()
   /* ------------------------------------------------------------*/
   /* Format call.*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "N2"; /* Function code*/
  TA1REC.TA1PGMNM = "FG0NS10"; /* Calling process*/
  ;
   /* ------------------------------------------------------------*/
   /* Fetch SYCLR.*/
   /* ------------------------------------------------------------*/
  ;
  XSFFS56(); /* Fetch dprodg.vsyclr01 row*/
  ;
end // end FG0NS10

// close 'c1' vsyclr01
Function FG0NS11()
   /* ------------------------------------------------------------*/
   /* Format call.*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "C2"; /* Function code*/
  TA1REC.TA1PGMNM = "FG0NS11"; /* Calling process*/
  ;
   /* ------------------------------------------------------------*/
   /* Close SYCLR.*/
   /* ------------------------------------------------------------*/
  ;
  XSFFS56(); /* close dprodg.vsyclr01 cursor*/
  ;
end // end FG0NS11

// Read temporary storage
Function FG0NS16()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  FG0NW02.XXXTSLEN = FG0NW00.XXXTSLEN;
  TA5REC.TA5TSQIX = FG0NW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FG0NW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S16"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0NS16

// Move the heading literals
Function FG0NS20()
  ;
   /* ------------------------------------------------------------*/
   /* load heading literals*/
   /* ------------------------------------------------------------*/
  ;
   /* subtotal*/
  ;
  FG0NM001.FG0NMHD1[7] = " SUB ";
  set FG0NM001.FG0NMHD1[7] skip;
  FG0NM001.FG0NMHD2[7] = "TOTAL";
  set FG0NM001.FG0NMHD2[7] skip;
  ;
   /* range total*/
  ;
  FG0NM001.FG0NMHD1[8] = "RANGE";
  set FG0NM001.FG0NMHD1[8] skip;
  FG0NM001.FG0NMHD2[8] = "TOTAL";
  set FG0NM001.FG0NMHD2[8] skip;
  ;
   /* percent*/
  ;
  FG0NM001.FG0NMHD2[9] = " PCT ";
  set FG0NM001.FG0NMHD2[9] skip;
  ;
end // end FG0NS20

// Load subtotal and total
Function FG0NS30()
    /* ----------------------------------------------------------*/
     /* translate/load detail subtotal*/
    /* ----------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FG0NW00.FG0NWUST[FG0NWPIX];
  XSFFS10();
  FG0NW00.FG0NWWQT[7] = FFXREC.FFXCHAR;
  ;
    /* ----------------------------------------------------------*/
     /* load detail range total*/
    /* ----------------------------------------------------------*/
  ;
  FG0NW00.FG0NWWQT[8] = FG0NW00.FG0NWQTY[FG0NWTIX];
  if (FG0NW02.FG0NWRCT[FG0NWPIX] == "1") /* Style group record*/
    ;
    FG0NW00.FG0NWSGT = FG0NW00.FG0NWUQT[FG0NWTIX]; /* save stygrp tot*/
    ;
  end
  ;
    /* ----------------------------------------------------------*/
     /* calculate/load total percent*/
    /* ----------------------------------------------------------*/
  ;
    /* ----------------------------------------------*/
     /* process style group total percent*/
    /* ----------------------------------------------*/
  if (FG0NW02.FG0NWRCT[FG0NWPIX] == "1")
    ;
    if (FG0NW03.FG0NWUMT[FG0NWTIX] != 0)
      FG0NW00.FG0NWNM1 = FG0NW00.FG0NWUQT[FG0NWTIX] * 100;
      FG0NW00.FG0NWNPT = mathLib.round(FG0NW00.FG0NWNM1 / FG0NW03.FG0NWUMT[FG0NWTIX], -mathLib.decimals(FG0NW00.FG0NWNPT));
        /* --------------------------------------------------------*/
         /* zero suppress the percent field*/
        /* --------------------------------------------------------*/
      ;
      if (FG0NW00.FG0NWNPT != 0)
        if (FG0NW00.FG0NWNPT < 0) /* percent is negative*/
          FG0NW00.FG0NWNPT = FG0NW00.FG0NWNPT * -1;
        end
        ;
        FG0NW00.FG0NWPTW = FG0NW00.FG0NWNP1;
        FG0NW00.FG0NWPTP = ".";
        FG0NW00.FG0NWPTD = FG0NW00.FG0NWNP2;
        ;
        if (FG0NW00.FG0NWPT1 == "0")
          FG0NW00.FG0NWPT1 = " ";
          if (FG0NW00.FG0NWPT2 == "0")
            FG0NW00.FG0NWPT2 = " ";
          end
        end
        ;
        if (FG0NW00.FG0NWUQT[FG0NWTIX] < 0
         && FG0NW03.FG0NWUMT[FG0NWTIX] < 0)
          ;
          /* both quantities are negative; positive percent*/
          ;
        else /* if one or the other qty are neg*/
          if (FG0NW00.FG0NWUQT[FG0NWTIX] < 0
           || FG0NW03.FG0NWUMT[FG0NWTIX] < 0)
            ;
            if (FG0NW00.FG0NWNPT > 99.9) /* reformat pct w/o friction*/
              FG0NW00.FG0NWPTD = FG0NW00.FG0NWPT3;
              FG0NW00.FG0NWPTP = FG0NW00.FG0NWPT2;
              FG0NW00.FG0NWPT3 = FG0NW00.FG0NWPT1;
              FG0NW00.FG0NWPT2 = "-";
              FG0NW00.FG0NWPT1 = " ";
              ;
            else /* percent < or = -99.9*/
              if (FG0NW00.FG0NWPT2 == " ")
                FG0NW00.FG0NWPT2 = "-";
              else
                FG0NW00.FG0NWPT1 = "-";
              end
            end
          end
        end
        ;
        FG0NW00.FG0NWWQT[9] = FG0NW00.FG0NWPCT;
        ;
      end
    end
    ;
  else
    ;
      /* ----------------------------------------------*/
       /* process style color total percent*/
      /* ----------------------------------------------*/
    ;
    FG0NW00.FG0NWSGT = FG0NW02.FG0NW-STYGRP-TOT[FG0NWPIX];
    ;
    if (FG0NW00.FG0NWSGT != 0)
      FG0NW00.FG0NWNM1 = FG0NW00.FG0NWUQT[FG0NWTIX] * 100;
      FG0NW00.FG0NWNPT = mathLib.round(FG0NW00.FG0NWNM1 / FG0NW00.FG0NWSGT, -mathLib.decimals(FG0NW00.FG0NWNPT));
      ;
        /* --------------------------------------------------------*/
         /* zero suppress the percent field*/
        /* --------------------------------------------------------*/
      ;
      if (FG0NW00.FG0NWNPT != 0)
        if (FG0NW00.FG0NWNPT < 0) /* percent is negative*/
          FG0NW00.FG0NWNPT = FG0NW00.FG0NWNPT * -1;
        end
        ;
        FG0NW00.FG0NWPTW = FG0NW00.FG0NWNP1;
        FG0NW00.FG0NWPTP = ".";
        FG0NW00.FG0NWPTD = FG0NW00.FG0NWNP2;
        ;
        if (FG0NW00.FG0NWPT1 == "0")
          FG0NW00.FG0NWPT1 = " ";
          if (FG0NW00.FG0NWPT2 == "0")
            FG0NW00.FG0NWPT2 = " ";
          end
        end
        ;
        if (FG0NW00.FG0NWUQT[FG0NWTIX] < 0
         && FG0NW00.FG0NWSGT < 0)
          ;
          /* both quantities are negative; positive percent*/
          ;
        else /* if one or the other qty are neg*/
          if (FG0NW00.FG0NWSGT < 0
           || FG0NW00.FG0NWUQT[FG0NWTIX] < 0)
            ;
            if (FG0NW00.FG0NWNPT > 99.9) /* reformat pct w/o friction*/
              FG0NW00.FG0NWPTD = FG0NW00.FG0NWPT3;
              FG0NW00.FG0NWPTP = FG0NW00.FG0NWPT2;
              FG0NW00.FG0NWPT3 = FG0NW00.FG0NWPT1;
              FG0NW00.FG0NWPT2 = "-";
              FG0NW00.FG0NWPT1 = " ";
              ;
            else /* percent < or = -99.9*/
              if (FG0NW00.FG0NWPT2 == " ")
                FG0NW00.FG0NWPT2 = "-";
              else
                FG0NW00.FG0NWPT1 = "-";
              end
            end
          end
        end
        ;
        FG0NW00.FG0NWWQT[9] = FG0NW00.FG0NWPCT;
      end
    end
  end
  ;
    /* ----------------------------------------------------------*/
     /* if record type eq 1 (style group record ) display '*'*/
    /* ----------------------------------------------------------*/
  ;
  FG0NW00.FG0NWLIX = FG0NW00.FG0NWLIX + 1;
  if (FG0NW02.FG0NWRCT[FG0NWPIX] == "1")
    FG0NW00.FG0NWWQT[10] = " *   ";
  end
  ;
end // end FG0NS30

// Cal no of sesn and mos in sesn
Function FG0NS33()
  ;
   /* ------------------------------------------------------------*/
   /* validate season end months*/
   /* ------------------------------------------------------------*/
  ;
  FG0NW00.FG0NWWBD = FFWREC.FFABEGMO; /* beginning date*/
  FG0NW00.FG0NWWED = FFWREC.FFAENDMO; /* ending date*/
  ;
  FG0NW00.FG0NWSMO[1] = FFWREC.FFWENDM1;
  FG0NW00.FG0NWWDT = FFWREC.FFWENDM1;
  FG0NW00.FG0NWSEM[1] = FG0NW00.FG0NWWMM;
  ;
  FG0NW00.FG0NWSMO[2] = FFWREC.FFWENDM2;
  FG0NW00.FG0NWWDT = FFWREC.FFWENDM2;
  FG0NW00.FG0NWSEM[2] = FG0NW00.FG0NWWMM;
  ;
  FG0NW00.FG0NWSMO[3] = FFWREC.FFWENDM3;
  FG0NW00.FG0NWWDT = FFWREC.FFWENDM3;
  FG0NW00.FG0NWSEM[3] = FG0NW00.FG0NWWMM;
  ;
  FG0NW00.FG0NWSMO[4] = FFWREC.FFWENDM4;
  FG0NW00.FG0NWWDT = FFWREC.FFWENDM4;
  FG0NW00.FG0NWSEM[4] = FG0NW00.FG0NWWMM;
  ;
   /* figure out number of seasons*/
  ;
  FG0NW00.FG0NWPIX = 4; /* index*/
  while (FG0NW00.FG0NWPIX > 0)
    ;
    FG0NW00.FG0NWSIN[FG0NWPIX] = 0;
    ;
    FG0NW00.FG0NWPIX = FG0NW00.FG0NWPIX - 1;
    /*  */
  end
  ;
  FG0NW00.FG0NWNSS = 0; /* reset number of seasons*/
  FG0NW00.FG0NWPIX = 4; /* index*/
  while (FG0NW00.FG0NWPIX > 0)
    if (FG0NW00.FG0NWSEM[FG0NWPIX] > 0)
      FG0NW00.FG0NWNSS = FG0NW00.FG0NWPIX; /* number of seasons*/
      FG0NW00.FG0NWPIX = FG0NW00.FG0NWPIX - 4; /* force out of loop*/
      ;
    else
      ;
      FG0NW00.FG0NWPIX = FG0NW00.FG0NWPIX - 1;
    end
    ;
  end
  ;
  FG0NW00.FG0NWPIX = FG0NW00.FG0NWNSS;
  while (FG0NW00.FG0NWPIX > 0) /* nbr of seasons*/
    FG0NS80(); /* calculate no of mos in each sesn*/
    FG0NW00.FG0NWPIX = FG0NW00.FG0NWPIX - 1;
  end
  ;
  ;
end // end FG0NS33

// Load subtot & tot for tot line
Function FG0NS40()
  ;
   /* ----------------------------------------------------------*/
   /* translate/load monthly subtotal*/
   /* ----------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FG0NW00.FG0NWUMT;
  XSFFS10();
  FG0NW00.FG0NWWQT[7] = FFXREC.FFXCHAR;
  ;
   /* --------------------------------------------------------*/
   /* load monthly range total*/
   /* --------------------------------------------------------*/
  ;
  FG0NW00.FG0NWWQT[8] = FG0NW03.FG0NWMTQ[FG0NWTIX];
  ;
end // end FG0NS40

// Load total for pct line
Function FG0NS50()
   /* ----------------------------------------------------------*/
   /* calculate/load monthly total percent*/
   /* ----------------------------------------------------------*/
  ;
  if (FG0NW03.FG0NWUMT[FG0NWTIX] != 0)
    FG0NW00.FG0NWNM1 = FG0NW00.FG0NWUMT * 100;
    FG0NW00.FG0NWNPT = mathLib.round(FG0NW00.FG0NWNM1 / FG0NW03.FG0NWUMT[FG0NWTIX], -mathLib.decimals(FG0NW00.FG0NWNPT));
    ;
    /* ----------------------------------------------------------*/
     /* zero suppress the percent field*/
    /* ----------------------------------------------------------*/
    ;
    if (FG0NW00.FG0NWNPT != 0)
      if (FG0NW00.FG0NWNPT < 0) /* percent is negative*/
        FG0NW00.FG0NWNPT = FG0NW00.FG0NWNPT * -1;
      end
      ;
      FG0NW00.FG0NWPTW = FG0NW00.FG0NWNP1;
      FG0NW00.FG0NWPTP = ".";
      FG0NW00.FG0NWPTD = FG0NW00.FG0NWNP2;
      ;
      if (FG0NW00.FG0NWPT1 == "0")
        FG0NW00.FG0NWPT1 = " ";
        if (FG0NW00.FG0NWPT2 == "0")
          FG0NW00.FG0NWPT2 = " ";
        end
      end
      ;
      if (FG0NW03.FG0NWUMT[FG0NWTIX] < 0
       && FG0NW00.FG0NWUMT < 0)
        ;
        /* both quantities are negative; positive percent*/
        ;
      else /* one or the other qty are neg*/
        if (FG0NW00.FG0NWUMT < 0
         || FG0NW03.FG0NWUMT[FG0NWTIX] < 0)
          ;
          if (FG0NW00.FG0NWNPT > 99.9) /* reformat pct w/o fraction*/
            FG0NW00.FG0NWPTD = FG0NW00.FG0NWPT3;
            FG0NW00.FG0NWPTP = FG0NW00.FG0NWPT2;
            FG0NW00.FG0NWPT3 = FG0NW00.FG0NWPT1;
            FG0NW00.FG0NWPT2 = "-";
            FG0NW00.FG0NWPT1 = " ";
            ;
          else /* percent < or = -99.9*/
            if (FG0NW00.FG0NWPT2 == " ")
              FG0NW00.FG0NWPT2 = "-";
            else
              if (FG0NW00.FG0NWPT1 == " ")
                FG0NW00.FG0NWPT1 = "-";
              end
            end
          end
        end
      end
      ;
      FG0NW00.FG0NWWQT[7] = FG0NW00.FG0NWPCT;
      ;
    end
  end
  ;
end // end FG0NS50

// Obtain default season end mon
Function FG0NS60()
  if (FFZREC.FFZNUMMO == 12) /* check if 12 months in the reqstd range*/
    ;
    FG0NS61(); /* obtain season begin month*/
    FG0NW00.FG0NWWDT = FF2REC.FF2SEASN[1]; /* season begin month*/
    ;
    if (FG0NW00.FG0NWBYM == FG0NW00.FG0NWWYM) /* begin month yymm match*/
      ;
      FG0NS62(); /* calculate season end month*/
      ;
    else
      if (FG0NW00.FG0NWBMM == FG0NW00.FG0NWWMM) /* begin month mm match*/
        ;
        FG0NS64(); /* calculate season end mo*/
        ;
      end
    end
  end
  ;
end // end FG0NS60

// Obtain sesn beg mo from FFXRF
Function FG0NS61()
   /* ------------------------------------------------------------*/
   /* Select set on dfcast.vffxrf01 table.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* load ff2rec record - dfcast.vffxrf01*/
   /* ------------------------------------------------------------*/
  ;
  set FF2REC empty; /* Clear row storage area*/
  ;
  FF2REC.YSMXDV = "10"; /* div grp code*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* product type group*/
  FF2REC.XPCCD = FG0NM001.XPCCD; /* product category*/
  ;
   /* ------------------------------------------------------------*/
   /* select set dfcast.vffxrf01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
    return;
    ;
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S61"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S2 ON DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0NS61

// Calc sesn end mo for same year
Function FG0NS62()
  ;
   /* --------------------------------------*/
   /* calculate no of season*/
   /* --------------------------------------*/
  ;
  FG0NW00.FG0NWPIX = 4;
  ;
  while (FG0NW00.FG0NWPIX > 0)
    ;
    if (FF2REC.FF2SEASN[FG0NWPIX] == 0)
      FG0NW00.FG0NWPIX = FG0NW00.FG0NWPIX - 1;
    else
      FG0NW00.FG0NWSMO[FG0NWPIX] = FG0NW00.FG0NWEYM; /* sesn end mo*/
      FG0NM001.FG0NMSEM[FG0NWPIX] = FG0NW00.FG0NWEMM;
      FG0NW00.FG0NWNSS = FG0NW00.FG0NWPIX; /* no. of seasons*/
      FG0NW00.FG0NWPIX = 0; /* force out the loop*/
    end
    ;
  end
  ;
   /* --------------------------------------*/
   /* calculate season end month*/
   /* --------------------------------------*/
  ;
  FG0NW00.FG0NWPIX = FG0NW00.FG0NWNSS;
  ;
  while (FG0NW00.FG0NWPIX > 1)
    ;
    FG0NW00.FG0NW-WDT1 = FF2REC.FF2SEASN[FG0NWPIX];
    FG0NS63(); /* get end month of the season*/
    FG0NW00.FG0NWSIX = FG0NW00.FG0NWPIX - 1;
    FG0NW00.FG0NWSMO[FG0NWSIX] = FG0NW00.FG0NW-WDT1;
    FG0NM001.FG0NMSEM[FG0NWSIX] = FG0NW00.FG0NW-WMM1;
    FG0NW00.FG0NWPIX = FG0NW00.FG0NWPIX - 1;
    ;
  end
end // end FG0NS62

// Get end mo of the sesn-same yr
Function FG0NS63()
  if (FG0NW00.FG0NW-WMM1 == 1)
    FG0NW00.FG0NW-WMM1 = 12;
    if (FG0NW00.FG0NW-WYY1 == 0)
      FG0NW00.FG0NW-WYY1 = 99;
      FG0NW00.FG0NW-WCC1 = FG0NW-WCC1 - 1;
    else
      FG0NW00.FG0NW-WYY1 = FG0NW00.FG0NW-WYY1 - 1;
    end
  else
    FG0NW00.FG0NW-WMM1 = FG0NW00.FG0NW-WMM1 - 1;
  end
end // end FG0NS63

// Calc sesn end mo for diff year
Function FG0NS64()
   /* --------------------------------------*/
   /* calculate no of season*/
   /* --------------------------------------*/
  ;
  FG0NW00.FG0NWPIX = 4;
  ;
  while (FG0NW00.FG0NWPIX > 0)
    ;
    if (FF2REC.FF2SEASN[FG0NWPIX] == 0)
      FG0NW00.FG0NWPIX = FG0NW00.FG0NWPIX - 1;
    else
      FG0NW00.FG0NWSMO[FG0NWPIX] = FG0NW00.FG0NWEYM; /* sesn end mo*/
      FG0NM001.FG0NMSEM[FG0NWPIX] = FG0NW00.FG0NWEMM;
      FG0NW00.FG0NWNSS = FG0NW00.FG0NWPIX; /* no. of seasons*/
      FG0NW00.FG0NWPIX = 0; /* force out the loop*/
    end
    ;
  end
  ;
   /* --------------------------------------*/
   /* calculate season end month*/
   /* --------------------------------------*/
  ;
  FG0NW00.FG0NWPIX = FG0NW00.FG0NWNSS;
  ;
  while (FG0NW00.FG0NWPIX > 1)
    ;
    FG0NW00.FG0NW-WDT1 = FF2REC.FF2SEASN[FG0NWPIX];
    FG0NS65(); /* get end month of the season*/
    FG0NW00.FG0NWSIX = FG0NW00.FG0NWPIX - 1;
    FG0NW00.FG0NWSMO[FG0NWSIX] = FG0NW00.FG0NW-WDT1;
    FG0NM001.FG0NMSEM[FG0NWSIX] = FG0NW00.FG0NW-WMM1;
    FG0NW00.FG0NWPIX = FG0NW00.FG0NWPIX - 1;
    ;
  end
end // end FG0NS64

// Get end mo of the sesn-diff yr
Function FG0NS65()
   /* -------------------------------------------------------------------*/
   /* Plug in the ccyy from requested range and use the same month from*/
   /* the dfcast.vffxrf01 table.*/
   /* -------------------------------------------------------------------*/
  ;
  if (FG0NW00.FG0NWBMM <= FG0NW00.FG0NW-WMM1) /* same year*/
    ;
    FG0NW00.FG0NW-WYY1 = FG0NW00.FG0NWBYY; /* year*/
    FG0NW00.FG0NW-WCC1 = FG0NW00.FG0NWBCC; /* century*/
    ;
  else /* different year*/
    ;
    if (FG0NW00.FG0NWBYY == 99)
      FG0NW00.FG0NW-WYY1 = 0; /* year*/
      FG0NW00.FG0NW-WCC1 = FG0NW00.FG0NWBCC + 1; /* century*/
    else
      FG0NW00.FG0NW-WYY1 = FG0NW00.FG0NWBYY + 1; /* year*/
      FG0NW00.FG0NW-WCC1 = FG0NW00.FG0NWBCC; /* century*/
    end
    ;
  end
  ;
  if (FG0NW00.FG0NW-WMM1 == 1)
    FG0NW00.FG0NW-WMM1 = 12;
    if (FG0NW00.FG0NW-WYY1 == 0)
      FG0NW00.FG0NW-WYY1 = 99;
      FG0NW00.FG0NW-WCC1 = FG0NW-WCC1 - 1;
    else
      FG0NW00.FG0NW-WYY1 = FG0NW00.FG0NW-WYY1 - 1;
    end
  else
    FG0NW00.FG0NW-WMM1 = FG0NW00.FG0NW-WMM1 - 1;
  end
end // end FG0NS65

// Verify entered end month
Function FG0NS70()
  ;
   /* --------------------------------------------------------*/
   /* beginning date and ending date are in the same year*/
   /* --------------------------------------------------------*/
  ;
  if (FG0NW00.FG0NWBYY == FG0NW00.FG0NWEYY) /* beg year = end year*/
    ;
    if (FG0NM001.FG0NMSEM[FG0NWPIX] >= FG0NW00.FG0NWBMM /* >= beg month*/
     && FG0NM001.FG0NMSEM[FG0NWPIX] <= FG0NW00.FG0NWEMM) /* <= end month*/
      ;
      FG0NW00.FG0NWWCC = FG0NW00.FG0NWBCC; /* plug in centry*/
      FG0NW00.FG0NWWYY = FG0NW00.FG0NWBYY; /* plug in year*/
      FG0NW00.FG0NWWMM = FG0NM001.FG0NMSEM[FG0NWPIX]; /* plug in month*/
      ;
    else
      ;
      FFWREC.XXXMODID = "S70"; /* module identification*/
      converseLib.validationFailed(010); /* invalid data*/
      set FG0NM001.FG0NMSEM[FG0NWPIX] cursor, bold;
      ;
    end
    ;
  else
    ;
      /* --------------------------------------------------------*/
      /* beginning date and ending date are in the different years*/
      /* --------------------------------------------------------*/
    ;
      /* season end month falls in the same year as begin month*/
    ;
    if (FG0NM001.FG0NMSEM[FG0NWPIX] >= FG0NW00.FG0NWBMM) /* >= beg mo*/
      ;
      FG0NW00.FG0NWWCC = FG0NW00.FG0NWBCC; /* plug in centry*/
      FG0NW00.FG0NWWYY = FG0NW00.FG0NWBYY; /* plug in year*/
      FG0NW00.FG0NWWMM = FG0NM001.FG0NMSEM[FG0NWPIX]; /* plug in month*/
    else
      ;
        /* * season end month falls in the same year as end month*/
      ;
      if (FG0NM001.FG0NMSEM[FG0NWPIX] <= FG0NW00.FG0NWEMM) /* <= end mo*/
        FG0NW00.FG0NWWCC = FG0NW00.FG0NWECC; /* plug in centry*/
        FG0NW00.FG0NWWYY = FG0NW00.FG0NWEYY; /* plug in year*/
        FG0NW00.FG0NWWMM = FG0NM001.FG0NMSEM[FG0NWPIX]; /* plug in month*/
      else
        ;
        FFWREC.XXXMODID = "S70"; /* module identification*/
        converseLib.validationFailed(010); /* invalid data*/
        set FG0NM001.FG0NMSEM[FG0NWPIX] cursor, bold;
        ;
      end
      ;
    end
    ;
  end
  ;
  if (converseVar.validationMsgNum == 0)
    FG0NW00.FG0NWSMO[FG0NWPIX] = FG0NW00.FG0NWWDT; /* save ccyymm*/
  end
  ;
end // end FG0NS70

// Calculate no of mos in season
Function FG0NS80()
  FG0NW00.FG0NWWDT = FG0NW00.FG0NWSMO[FG0NWPIX]; /* sesn end mo*/
  ;
  if (FG0NW00.FG0NWPIX == 1) /* 1st season*/
    ;
    if (FG0NW00.FG0NWWMM >= FG0NW00.FG0NWBMM) /* in the same year*/
      FG0NW00.FG0NWSIN[FG0NWPIX] = FG0NW00.FG0NWWDT -                                    FG0NW00.FG0NWWBD + 1;
    else /* in the different year*/
      FG0NW00.FG0NWSIN[FG0NWPIX] = FG0NW00.FG0NWWMM + 12 -                                    FG0NW00.FG0NWBMM + 1;
    end
    ;
  else /* other season*/
    ;
    FG0NW00.FG0NWLIX = FG0NW00.FG0NWPIX - 1;
    FG0NW00.FG0NW-WDT1 = FG0NW00.FG0NWSMO[FG0NWLIX]; /* prev sesn mo*/
    if (FG0NW00.FG0NWWMM > FG0NW00.FG0NW-WMM1) /* in the same year*/
      FG0NW00.FG0NWSIN[FG0NWPIX] = FG0NW00.FG0NWWMM - FG0NW00.FG0NW-WMM1;
    else /* in the different year*/
      FG0NW00.FG0NWSIN[FG0NWPIX] = FG0NW00.FG0NWWMM + 12 -                                    FG0NW00.FG0NW-WMM1;
    end
    ;
  end
  ;
end // end FG0NS80

//*** RECORD=FG0NW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FG0NW00 type basicRecord
  10 FG0NWNSS FG0NWNSS ; 
  10 FG0NWSIN FG0NWSIN [4] ; 
  10 FG0NWSEM FG0NWSEM [4] ; 
  10 FG0NWSMO FG0NWSMO [4] ; 
  10 SYBSTGNB SYBSTGNB ; 
  10 FG0NWDSC FG0NWDSC ; 
    15 * char(1) ; 
    15 FG0NWGRP FG0NWGRP ; 
      20 SY1STNBR SY1STNBR ; 
      20 FG0NWDH1 FG0NWDH1 ; 
      20 SY2CLRID SY2CLRID ; 
      20 FG0NWDH2 FG0NWDH2 ; 
      20 XDMCD XDMCD ; 
  10 FG0NWSWR FG0NWSWR ; 
  10 FG0NWSWF FG0NWSWF ; 
  10 FG0NWSWD FG0NWSWD ; 
  10 FG0NWACT FG0NWACT ; 
  10 FG0NWNM1 FG0NWNM1 ; 
  10 FG0NWNM2 FG0NWNM2 ; 
  10 FG0NWNPT FG0NWNPT ; 
    15 FG0NWNP1 FG0NWNP1 ; 
    15 FG0NWNP2 FG0NWNP2 ; 
  10 FG0NWPCT FG0NWPCT ; 
    15 FG0NWPTW FG0NWPTW ; 
      20 FG0NWPT1 FG0NWPT1 ; 
      20 FG0NWPT2 FG0NWPT2 ; 
      20 FG0NWPT3 FG0NWPT3 ; 
    15 FG0NWPTP FG0NWPTP ; 
    15 FG0NWPTD FG0NWPTD ; 
  10 FG0NWUTQ FG0NWUTQ ; 
  10 FG0NWUMT FG0NWUMT ; 
  10 FG0NWUST FG0NWUST [13] ; 
  10 FG0NWUHS FG0NWUHS ; 
  10 FG0NWSGT FG0NWSGT ; 
  10 FG0NWWQT FG0NWWQT [10] ; 
  10 FG0NWLQT FG0NWLQT ; 
    15 FG0NWUQT FG0NWUQT [13] ; 
    15 FG0NWQTY FG0NWQTY [13] ; 
  10 FG0NWIDX FG0NWIDX ; 
  10 FG0NWTIX FG0NWTIX ; 
  10 FG0NWSIX FG0NWSIX ; 
  10 FG0NWLIX FG0NWLIX ; 
  10 FG0NWPIX FG0NWPIX ; 
  10 FG0NWPGX FG0NWPGX ; 
  10 FG0NWSNX FG0NWSNX ; 
  10 FG0NWCWD FG0NWCWD ; 
    15 FG0NWCYM FG0NWCYM ; 
      20 FG0NWCCC FG0NWCCC ; 
      20 FG0NWCYY FG0NWCYY ; 
      20 FG0NWCMM FG0NWCMM ; 
    15 FG0NWCDD FG0NWCDD ; 
  10 * num(1) ; 
  10 FG0NWWDT FG0NWWDT ; 
    15 * num(3) ; 
    15 FG0NWWCC FG0NWWCC ; 
    15 FG0NWWYM FG0NWWYM ; 
      20 FG0NWWYY FG0NWWYY ; 
      20 FG0NWWMM FG0NWWMM ; 
  10 FG0NW-WDT1 FG0NW-WDT1 ; 
    15 * num(3) ; 
    15 FG0NW-WCC1 FG0NW-WCC1 ; 
    15 FG0NW-WYM1 FG0NW-WYM1 ; 
      20 FG0NW-WYY1 FG0NW-WYY1 ; 
      20 FG0NW-WMM1 FG0NW-WMM1 ; 
  10 FG0NWWBD FG0NWWBD ; 
    15 * num(3) ; 
    15 FG0NWBCC FG0NWBCC ; 
    15 FG0NWBYM FG0NWBYM ; 
      20 FG0NWBYY FG0NWBYY ; 
      20 FG0NWBMM FG0NWBMM ; 
  10 FG0NWWED FG0NWWED ; 
    15 * num(3) ; 
    15 FG0NWECC FG0NWECC ; 
    15 FG0NWEYM FG0NWEYM ; 
      20 FG0NWEYY FG0NWEYY ; 
      20 FG0NWEMM FG0NWEMM ; 
  10 FG0NW-CURR-MO FG0NW-CURR-MO ; 
  10 FG0NW-CURR-MO-MINUS1 FG0NW-CURR-MO-MINUS1 ; 
  10 FG0NW-CURR-MO-MINUS2 FG0NW-CURR-MO-MINUS2 ; 
  10 FG0NW-CURR-MO-MINUS3 FG0NW-CURR-MO-MINUS3 ; 
  10 FG0NW-CURR-MO-MINUS4 FG0NW-CURR-MO-MINUS4 ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FG0NW-PAGP FG0NW-PAGP [10] ; 
  10 FG0NW-PAGS FG0NW-PAGS [10] ; 
  10 FG0NW-PMON FG0NW-PMON [10] ; 
  10 FG0NWREM FG0NWREM ; 
  10 FG0NW-NEXT FG0NW-NEXT ; 
  10 FFW-ND-SHP-IND FFW-ND-SHP-IND ; 
end // end FG0NW00

//*** RECORD=FG0NW01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// ***********************
Record FG0NW01 type basicRecord
  10 CACHGFL CACHGFL ; 
end // end FG0NW01

//*** RECORD=FG0NW02 ****
// -------------------------
// map 001 temporary storage
// -------------------------
// ***********************
Record FG0NW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(2042) ; 
    10 FG0NWNLD FG0NWNLD ; 
    10 FG0NWRCT FG0NWRCT [15] ; 
    10 FG0NWDSC FG0NWDSC [15] ; 
    10 FG0NWQTS FG0NWQTS [15] ; 
      15 FG0NWU01 FG0NWU01 ; 
      15 FG0NWQ01 FG0NWQ01 ; 
      15 FG0NWU02 FG0NWU02 ; 
      15 FG0NWQ02 FG0NWQ02 ; 
      15 FG0NWU03 FG0NWU03 ; 
      15 FG0NWQ03 FG0NWQ03 ; 
      15 FG0NWU04 FG0NWU04 ; 
      15 FG0NWQ04 FG0NWQ04 ; 
      15 FG0NWU05 FG0NWU05 ; 
      15 FG0NWQ05 FG0NWQ05 ; 
      15 FG0NWU06 FG0NWU06 ; 
      15 FG0NWQ06 FG0NWQ06 ; 
      15 FG0NWU07 FG0NWU07 ; 
      15 FG0NWQ07 FG0NWQ07 ; 
      15 FG0NWU08 FG0NWU08 ; 
      15 FG0NWQ08 FG0NWQ08 ; 
      15 FG0NWU09 FG0NWU09 ; 
      15 FG0NWQ09 FG0NWQ09 ; 
      15 FG0NWU10 FG0NWU10 ; 
      15 FG0NWQ10 FG0NWQ10 ; 
      15 FG0NWU11 FG0NWU11 ; 
      15 FG0NWQ11 FG0NWQ11 ; 
      15 FG0NWU12 FG0NWU12 ; 
      15 FG0NWQ12 FG0NWQ12 ; 
      15 FG0NWU13 FG0NWU13 ; 
      15 FG0NWQ13 FG0NWQ13 ; 
    10 FG0NW-STYGRP-TOT FG0NW-STYGRP-TOT [15] ; 
end // end FG0NW02

//*** RECORD=FG0NW03 ****
// ------------------------------
// map 001 totals display storage
// ------------------------------
// ***********************
Record FG0NW03 type basicRecord
  5 FG0NWGP3 FG0NWGP3 ; 
    10 FG0NWUMT FG0NWUMT [13] ; 
    10 FG0NWMTQ FG0NWMTQ [13] ; 
    10 FG0NWMPT FG0NWMPT [13] ; 
end // end FG0NW03

//*** RECORD=FG0NW05 ****
// --------------------------------
// Parameters to be sent to FF6401.
// --------------------------------
// ***********************
Record FG0NW05 type basicRecord
  5 FG0NWGP5 FG0NWGP5 ; 
    10 FG0NWDSC FG0NWDSC ; 
    10 * char(1) ; 
    10 FG0NWQ01 FG0NWQ01 ; 
    10 * char(1) ; 
    10 FG0NWQ02 FG0NWQ02 ; 
    10 * char(1) ; 
    10 FG0NWQ03 FG0NWQ03 ; 
    10 * char(1) ; 
    10 FG0NWQ04 FG0NWQ04 ; 
    10 * char(1) ; 
    10 FG0NWQ05 FG0NWQ05 ; 
    10 * char(1) ; 
    10 FG0NWQ06 FG0NWQ06 ; 
    10 * char(1) ; 
    10 FG0NWQ07 FG0NWQ07 ; 
    10 * char(1) ; 
    10 FG0NWQ08 FG0NWQ08 ; 
    10 * char(1) ; 
    10 FG0NWQ09 FG0NWQ09 ; 
    10 * char(1) ; 
    10 FG0NWQ10 FG0NWQ10 ; 
end // end FG0NW05

// current date
DataItem FG0NW-CURR-MO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date -1 month
DataItem FG0NW-CURR-MO-MINUS1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date -2 months
DataItem FG0NW-CURR-MO-MINUS2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date -3 months
DataItem FG0NW-CURR-MO-MINUS3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date -4 months
DataItem FG0NW-CURR-MO-MINUS4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// Next season flag
DataItem FG0NW-NEXT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Starting point of the season
DataItem FG0NW-PAGP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Processing season of the page
DataItem FG0NW-PAGS num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Print remaining month flag
DataItem FG0NW-PMON char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style group total
DataItem FG0NW-STYGRP-TOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work century
DataItem FG0NW-WCC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date
DataItem FG0NW-WDT1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work month
DataItem FG0NW-WMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year and month
DataItem FG0NW-WYM1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FG0NW-WYY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// active style group flag
DataItem FG0NWACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// begin century
DataItem FG0NWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range month
DataItem FG0NWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year and month
DataItem FG0NWBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range year
DataItem FG0NWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work century
DataItem FG0NWCCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work day
DataItem FG0NWCDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work month
DataItem FG0NWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work ccyymmdd
DataItem FG0NWCWD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current work ccyymm
DataItem FG0NWCYM num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work year
DataItem FG0NWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dash
DataItem FG0NWDH1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash
DataItem FG0NWDH2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style-color-dim
DataItem FG0NWDSC char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end century
DataItem FG0NWECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range month
DataItem FG0NWEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end year and month
DataItem FG0NWEYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range year
DataItem FG0NWEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fg0nw03 group level
DataItem FG0NWGP3 char(169)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fg0nw05 group level
DataItem FG0NWGP5 char(74)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sty grp
DataItem FG0NWGRP char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index
DataItem FG0NWIDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// load  index
DataItem FG0NWLIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product line qtys
DataItem FG0NWLQT char(117)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// monthly percent
DataItem FG0NWMPT bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// monthly sale qtys
DataItem FG0NWMTQ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of lines per page
DataItem FG0NWNLD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 1
DataItem FG0NWNM1 num(15)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 2
DataItem FG0NWNM2 num(15)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0NWNP1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0NWNP2 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric percent field
DataItem FG0NWNPT num(4,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nbr of seasons
DataItem FG0NWNSS num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// char percent field
DataItem FG0NWPCT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// page index
DataItem FG0NWPGX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// process index
DataItem FG0NWPIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0NWPT1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG0NWPT2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG0NWPT3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG0NWPTD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG0NWPTP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG0NWPTW char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 1
DataItem FG0NWQ01 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 2
DataItem FG0NWQ02 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 3
DataItem FG0NWQ03 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 4
DataItem FG0NWQ04 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG0NWQ05 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end
// fcst qty char column 6
DataItem FG0NWQ06 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 7
DataItem FG0NWQ07 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 8
DataItem FG0NWQ08 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 9
DataItem FG0NWQ09 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 10
DataItem FG0NWQ10 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 11
DataItem FG0NWQ11 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 12
DataItem FG0NWQ12 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 13
DataItem FG0NWQ13 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product line monthly qtys
DataItem FG0NWQTS char(117)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sale qty 1000
DataItem FG0NWQTY char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record type '1' '2'
DataItem FG0NWRCT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Remaining month flag
DataItem FG0NWREM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season end month - mm
DataItem FG0NWSEM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style group total save area
DataItem FG0NWSGT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nbr of months in season
DataItem FG0NWSIN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save index
DataItem FG0NWSIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season end month - ccyymm
DataItem FG0NWSMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season index
DataItem FG0NWSNX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display map switch
DataItem FG0NWSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FG0NWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FG0NWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total index
DataItem FG0NWTIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 1
DataItem FG0NWU01 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 2
DataItem FG0NWU02 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 3
DataItem FG0NWU03 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 4
DataItem FG0NWU04 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 5
DataItem FG0NWU05 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0NWU06 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end
// fcst qty units column 7
DataItem FG0NWU07 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 8
DataItem FG0NWU08 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 9
DataItem FG0NWU09 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 10
DataItem FG0NWU10 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 11
DataItem FG0NWU11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 12
DataItem FG0NWU12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 13
DataItem FG0NWU13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales units
DataItem FG0NWUHS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// unit monthly sale qty
DataItem FG0NWUMT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sale qty units
DataItem FG0NWUQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// unit sale qty sub total
DataItem FG0NWUST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w/s product range total
DataItem FG0NWUTQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work begin date
DataItem FG0NWWBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work century
DataItem FG0NWWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date
DataItem FG0NWWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work begin date
DataItem FG0NWWED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work month
DataItem FG0NWWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w/s detail lines
DataItem FG0NWWQT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work year and month
DataItem FG0NWWYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FG0NWWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

