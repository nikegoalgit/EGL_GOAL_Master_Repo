package fg02;

import corpcom1.CACHGFL;
import corpcom2.XPCREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPFF001;
import corpcom3.XPXPC01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS01;
import corpcom4.XSFFS10;
import corpcom4.XSFFS11;
import corpcom4.XSFFS20;
import corpcom4.XSFFS30;
import corpcom4.XSFFS52;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XPCTBL;
import corpy2.YPGTBL;
import ff.common.*;
import fh.common.FH6REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=FG02 ****
// This application allows the user to set return to stock
// quantities.  It shows the historical return to stock qtys
// one and two years ago.  The displayed return stock data
// may be actual returned amounts.  The program uses the
// invoice cut off date to determine if the future returned
// quantity should be used or the actual returned quantity
// from the history database should be used.
// 
// The user must specify the range, type, category and div
// group.  The user can enter the total amount and the program
// will spread the amount over the number of (projected)
// months in the date range.  Also, the user has the option of
// changing the amount for a particular month. when the monthly
// qty has been changed the program will recalculate the
// subtotal and total.  The database may be updated with these
// values, if the user presses a pf key requesting the update.
// 
// If the user doesn't know the code for a type or category,
// he/she can enter a '?' to ask for help.  The program
// will bring up a pop-up window to show a list of types or
// categories so that the user can chose.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from either of the screens.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          03/16/90  rgilli  New application.
// FF1119   06/26/92  LDELUH  When add MCAT for makeups set
//                            fill rt & futr rto to 100.
// FF402    05/05/93  JJUCH   Default inline fill rate to 92
//                            when insert a new MCAT row.
// FF175    12/12/96  DSMITH  Changed the date range fill
//                            character to '0'.
// *********************
Program FG02 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF1REC FF1REC; // record
  FF7REC FF7REC; // record
  FFFREC FFFREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  FG02W00 FG02W00; // record
  FG02W01 FG02W01; // record
  FH6REC FH6REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPCTBL; // table
  use YPGTBL; // table
  use FG02M.FG02M001, // form
  		FG02M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FFFREC empty;
    set FG02M001 initial; /* M001 input/output*/
    set FG02W00 empty; /* Working storage*/
    set FG02W01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine work area*/
    set TA5REC empty; /* temp storage queue area*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FG02W00.FG02WSWR = "N"; /* Request for data switch*/
    FG02W00.FG02WSWF = "Y"; /* format screen data switch*/

     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/

     /* ------------------------------------------------------------*/
     /* product type group*/
     /* ------------------------------------------------------------*/

    if (FFWREC.YPGCD == " ")
      FFWREC.YPGCD = "01";
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end

     /* ------------------------------------------------------------*/
     /* determine if data is to be loaded*/
     /* ------------------------------------------------------------*/

    if (FFWREC.FFABEGMO != 0
     && FFWREC.FFAENDMO != 0
     && FFWREC.XPCCD != " ")
      FFZREC.FFZBEGMO = FFWREC.FFABEGMO;
      FFZREC.FFZENDMO = FFWREC.FFAENDMO;
      FG02W00.FG02WSWR = "Y"; /* set data request flag*/
    end

     /* ------------------------------------------------------------*/
     /* Clear unused FFWREC fields.*/
     /* ------------------------------------------------------------*/

    FFWREC.XPLCD = " "; /* Clear line code*/
    FFWREC.XPLABRV = " "; /* Clear line name*/
    FFWREC.SYBSTGNB = " "; /* Clear style grp code*/
    FFWREC.SYBSTGNM = " "; /* Clear style grp name*/
    FFWREC.SY1STNBR = " "; /* Clear style code*/
    FFWREC.SY1SSTNM = " "; /* Clear style name*/
    FFWREC.YSMXDV = "10"; /* Default div grp code*/
    FFWREC.YSMSMDSC = "DOMSTC"; /* Default div grp name*/

     /* ------------------------------------------------------------*/
     /* converse main process*/
     /* ------------------------------------------------------------*/

    goto FG02001; /* Converse the main process*/

    FG02001: FG02001();
     /* ------------------------------------------------------------*/
     /* flow to converse the main process used to display a map*/
     /* ------------------------------------------------------------*/

    goto FG02001; /* converse the main process*/

  end // end main
end // end FG02

// set return to stock qtys
Function FG02001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FG02100(); /* Obtain the data to display*/

  FG02200(); /* Format and display the map*/

  FG02300(); /* Check attention identifier*/

  FG02400(); /* Reset fields to normal intensity*/

  FG02500(); /* Verify the entered data*/

  FG02600(); /* Process valid input request*/


end // end FG02001

// obtain data for display
Function FG02100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FG02W00.FG02WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Initialize working storage.*/
   /* ------------------------------------------------------------*/

  set FG02W01 empty; /* init w/s*/

   /* ------------------------------------------------------------*/
   /* Obtain current date using routine XX0XS01.  Calculate*/
   /* current date minus one month and historical date ranges.*/
   /* ------------------------------------------------------------*/

  FG02110(); /* Process dates*/

   /* ------------------------------------------------------------*/
   /* Obtain quantities for historical data 1 year ago*/
   /* ------------------------------------------------------------*/

  FG02120();

   /* ------------------------------------------------------------*/
   /* Obtain quantities for historical data 2 years ago*/
   /* ------------------------------------------------------------*/

  FG02130();

   /* ------------------------------------------------------------*/
   /* Obtain monthly headings and qtys for return to stock*/
   /* ------------------------------------------------------------*/

  FG02140();

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FG02W00.FG02WNMO = FG02W00.FG02WLIX;
  FG02W01.CACHGFL = "Y"; /* set data loaded flag*/
  FG02W00.FG02WSWR = "N"; /* Request for data switch*/


end // end FG02100

// Process dates
Function FG02110()
   /* ------------------------------------------------------------*/
   /* Obtain current date.*/
   /* ------------------------------------------------------------*/

  XX0XS01();

   /* ------------------------------------------------------------*/
   /* Calculate current date minus one month.*/
   /* ------------------------------------------------------------*/

  FG02W00.FG02WCWD = XX0XW01.XX0XWDAT; /* current work dt ccyymmdd*/
  FG02W00.FG02WCRD = XX0XW01.XX0XWCYM; /* current date ccyymm*/
  FG02W00.FG02WWDT = XX0XW01.XX0XWCYM; /* work date*/

  if (FG02W00.FG02WWMM == 1)
    FG02W00.FG02WWMM = 12;

    if (FG02W00.FG02WWYY == 0) /* If year is 2000*/
      FG02W00.FG02WWYY = "99"; /* move 99 to year*/
      FG02W00.FG02WWCC = "19"; /* move 19 to century*/
    else
      FG02W00.FG02WWYY = FG02W00.FG02WWYY - 1;
    end

  else
    FG02W00.FG02WWMM = FG02W00.FG02WWMM - 1;
  end

  FG02W00.FG02WCD1 = FG02W00.FG02WWDT; /* current date minus 1 month*/

   /* ------------------------------------------------------------*/
   /* Calculate historical date ranges(1yr ago/2yr ago)*/
   /* ------------------------------------------------------------*/

  FG02W00.FG02WWBD = FFWREC.FFABEGMO; /* user req begin range*/
  FG02W00.FG02WWED = FFWREC.FFAENDMO; /* user req end range*/

  FG02W00.FG02WIDX = 1; /* init index*/
  while (FG02W00.FG02WIDX <= 2) /* calculate historical date ranges*/

    /* ------------------------------------------------------------*/
     /* Calculate beginning date of range.*/
    /* ------------------------------------------------------------*/

    if (FG02W00.FG02WBYY == 0) /* If year is 2000*/
      FG02W00.FG02WBYY = "99"; /* move 99 to year*/
      FG02W00.FG02WBCC = "19"; /* move 19 to century*/
    else
      FG02W00.FG02WBYY = FG02W00.FG02WBYY - 1;
    end
    FG02W01.FG02WPBD[FG02WIDX] = FG02W00.FG02WWBD; /* prior beg date*/

    /* ------------------------------------------------------------*/
     /* Calculate ending date of range.*/
    /* ------------------------------------------------------------*/

    if (FG02W00.FG02WEYY == 0) /* If year is 2000*/
      FG02W00.FG02WEYY = "99"; /* move 99 to year*/
      FG02W00.FG02WECC = "19"; /* move 19 to century*/
    else
      FG02W00.FG02WEYY = FG02W00.FG02WEYY - 1;
    end
    FG02W01.FG02WPED[FG02WIDX] = FG02W00.FG02WWED; /* prior end date*/

    /* ------------------------------------------------------------*/
     /* Add one to counter.*/
    /* ------------------------------------------------------------*/

    FG02W00.FG02WIDX = FG02W00.FG02WIDX + 1;

  end

   /* ------------------------------------------------------------*/
   /* Obtain invoice date from FFCTL.*/
   /* ------------------------------------------------------------*/

  FG02111(); /* get invoice cutoff date*/

  FG02W00.FG02WICD = FF1REC.FF1IVCDT;


end // end FG02110

// Select FFCTL
Function FG02111()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set FF1REC empty; /* Clear row storage area*/

   /* ------------------------------------------------------------*/
   /* Select FFCTL.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "110"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VFFCTL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF1REC.FF1GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG02111

// load historical data 1 yr ago
Function FG02120()
   /* ------------------------------------------------------------*/
   /* obtain all months within range 1 yr ago*/
   /* ------------------------------------------------------------*/

  set FFZREC empty;

  FFZREC.FFZBEGMO = FG02W01.FG02WPBD[1];
  FFZREC.FFZENDMO = FG02W01.FG02WPED[1];

  FG02S01(); /* get months within range*/

   /* ------------------------------------------------------------*/
   /* obtain historical actual/forecast rtn stock qtys 1 yr ago*/
   /* ------------------------------------------------------------*/

  FG02W00.FG02WLIX = 1; /* load index*/
  FG02W00.FG02WIDX = 1; /* init index*/
  FG02W00.FG02WUTT = 0; /* total qty*/

  while (FG02W00.FG02WIDX <= FFZREC.FFZNUMMO
   && FFZREC.FFZINDMO[FG02WIDX] <= FG02W01.FG02WPED[1])

    if (FG02W00.FG02WLIX == 7)
      FFXREC.FFXNUMB = FG02W00.FG02WUTT;
      XSFFS10();
      FG02W01.FG02WHQ1[FG02WLIX] = FFXREC.FFXCHAR;
      FG02W00.FG02WLIX = FG02W00.FG02WLIX + 1;
    end

    if (FFZREC.FFZINDMO[FG02WIDX] < FG02W00.FG02WCD1)

      FG02S02(); /* get actuals*/

      FG02W01.FG02WUQ1[FG02WLIX] = FG02W00.FG02WURS;
      FFXREC.FFXNUMB = FG02W00.FG02WURS;
      XSFFS10();
      FG02W01.FG02WHQ1[FG02WLIX] = FFXREC.FFXCHAR;

    else
      if (FFZREC.FFZINDMO[FG02WIDX] == FG02W00.FG02WCD1
       && FG02W00.FG02WCYM == FG02W00.FG02WIYM
       && FG02W00.FG02WCWD >= FG02W00.FG02WICD)

        FG02S02(); /* get actuals*/

        FG02W01.FG02WUQ1[FG02WLIX] = FG02W00.FG02WURS;
        FFXREC.FFXNUMB = FG02W00.FG02WURS;
        XSFFS10();
        FG02W01.FG02WHQ1[FG02WLIX] = FFXREC.FFXCHAR;

      else

        set FF7REC empty; /* init dfcast.vmcat001*/
        FF7REC.FF4FCTMO = FFZREC.FFZINDMO[FG02WIDX];

        FG02S03(); /* select dfcast.vmcat001*/

        FG02W00.FG02WURS = FF7REC.FF7RTSQY;
        FG02W01.FG02WUQ1[FG02WLIX] = FF7REC.FF7RTSQY;
        FFXREC.FFXNUMB = FF7REC.FF7RTSQY;
        XSFFS10();
        FG02W01.FG02WHQ1[FG02WLIX] = FFXREC.FFXCHAR;

      end
    end

    FG02W00.FG02WUTT = FG02W00.FG02WURS + FG02W00.FG02WUTT;

    FG02W00.FG02WIDX = FG02W00.FG02WIDX + 1;
    FG02W00.FG02WLIX = FG02W00.FG02WLIX + 1;

  end

  FFXREC.FFXNUMB = FG02W00.FG02WUTT;
  XSFFS10();
  FG02W01.FG02WHQ1[FG02WLIX] = FFXREC.FFXCHAR;


end // end FG02120

// load historical data 2 yrs ago
Function FG02130()
   /* ------------------------------------------------------------*/
   /* obtain all months within range 2 yr ago*/
   /* ------------------------------------------------------------*/

  set FFZREC empty;
  FFZREC.FFZBEGMO = FG02W01.FG02WPBD[2];
  FFZREC.FFZENDMO = FG02W01.FG02WPED[2];

  FG02S01(); /* get months within range*/

   /* ------------------------------------------------------------*/
   /* obtain historical actual/forecast rtn stock qtys 2 yr ago*/
   /* ------------------------------------------------------------*/

  FG02W00.FG02WLIX = 1; /* load index*/
  FG02W00.FG02WIDX = 1; /* init index*/
  FG02W00.FG02WUTT = 0; /* init total qty*/

  while (FG02W00.FG02WIDX <= FFZREC.FFZNUMMO
   && FFZREC.FFZINDMO[FG02WIDX] <= FG02W01.FG02WPED[2])

    if (FG02W00.FG02WLIX == 7)
      FFXREC.FFXNUMB = FG02W00.FG02WUTT;
      XSFFS10();
      FG02W01.FG02WHQ2[FG02WLIX] = FFXREC.FFXCHAR;
      FG02W00.FG02WLIX = FG02W00.FG02WLIX + 1;
    end

    if (FFZREC.FFZINDMO[FG02WIDX] < FG02W00.FG02WCD1)

      FG02S02(); /* get actuals*/

      FG02W01.FG02WUQ2[FG02WLIX] = FG02W00.FG02WURS;
      FFXREC.FFXNUMB = FG02W00.FG02WURS;
      XSFFS10();
      FG02W01.FG02WHQ2[FG02WLIX] = FFXREC.FFXCHAR;

    else
      if (FFZREC.FFZINDMO[FG02WIDX] == FG02W00.FG02WCD1
       && FG02W00.FG02WCYM == FG02W00.FG02WIYM
       && FG02W00.FG02WCWD >= FG02W00.FG02WICD)

        FG02S02(); /* get actuals*/

        FG02W01.FG02WUQ2[FG02WLIX] = FG02W00.FG02WURS;
        FFXREC.FFXNUMB = FG02W00.FG02WURS;
        XSFFS10();
        FG02W01.FG02WHQ2[FG02WLIX] = FFXREC.FFXCHAR;

      else

        set FF7REC empty;
        FF7REC.FF4FCTMO = FFZREC.FFZINDMO[FG02WIDX];

        FG02S03(); /* select dfcast.vmcat001*/

        FG02W00.FG02WURS = FF7REC.FF7RTSQY;
        FG02W01.FG02WUQ2[FG02WLIX] = FF7REC.FF7RTSQY;
        FFXREC.FFXNUMB = FF7REC.FF7RTSQY;
        XSFFS10();
        FG02W01.FG02WHQ2[FG02WLIX] = FFXREC.FFXCHAR;

      end
    end

    FG02W00.FG02WUTT = FG02W00.FG02WURS + FG02W00.FG02WUTT;

    FG02W00.FG02WIDX = FG02W00.FG02WIDX + 1;
    FG02W00.FG02WLIX = FG02W00.FG02WLIX + 1;

  end

  FFXREC.FFXNUMB = FG02W00.FG02WUTT;
  XSFFS10();
  FG02W01.FG02WHQ2[FG02WLIX] = FFXREC.FFXCHAR;


end // end FG02130

// load return to stock qtys
Function FG02140()
   /* ------------------------------------------------------------*/
   /* obtain all months within user requested range*/
   /* ------------------------------------------------------------*/

  set FFZREC empty;

  FFZREC.FFZBEGMO = FFWREC.FFABEGMO;
  FFZREC.FFZENDMO = FFWREC.FFAENDMO;

  FG02S01(); /* get months within range*/

   /* ------------------------------------------------------------*/
   /* obtain actual/forecast return to stock*/
   /* ------------------------------------------------------------*/

  FG02W00.FG02WLIX = 1; /* load index*/
  FG02W00.FG02WIDX = 1; /* init index*/
  FG02W00.FG02WUTT = 0; /* total qty*/

  while (FG02W00.FG02WIDX <= FFZREC.FFZNUMMO
   && FFZREC.FFZINDMO[FG02WIDX] <= FFWREC.FFAENDMO)

    if (FG02W00.FG02WLIX == 7)
      FG02W01.FG02WHDG[FG02WLIX] = "SUBTOT";
      FFXREC.FFXNUMB = FG02W00.FG02WUTT;
      XSFFS10();
      FG02W01.FG02WQTR[FG02WLIX] = FFXREC.FFXCHAR;
      FG02W00.FG02WLIX = FG02W00.FG02WLIX + 1;
    end

    FG02W01.FG02WHDD[FG02WLIX] = FFZREC.FFZINDMO[FG02WIDX];
    if (FFZREC.FFZINDMO[FG02WIDX] < FG02W00.FG02WCD1)

      FG02S02(); /* get actuals*/

      FG02W01.FG02WUQR[FG02WLIX] = FG02W00.FG02WURS;
      FFXREC.FFXNUMB = FG02W00.FG02WURS;
      XSFFS10();
      FG02W01.FG02WQTR[FG02WLIX] = FFXREC.FFXCHAR;

    else
      if (FFZREC.FFZINDMO[FG02WIDX] == FG02W00.FG02WCD1
       && FG02W00.FG02WCYM == FG02W00.FG02WIYM
       && FG02W00.FG02WCWD >= FG02W00.FG02WICD)

        FG02S02(); /* get actuals*/

        FG02W01.FG02WUQR[FG02WLIX] = FG02W00.FG02WURS;
        FFXREC.FFXNUMB = FG02W00.FG02WURS;
        XSFFS10();
        FG02W01.FG02WQTR[FG02WLIX] = FFXREC.FFXCHAR;

      else

        set FF7REC empty;
        FF7REC.FF4FCTMO = FFZREC.FFZINDMO[FG02WIDX];

        FG02S03(); /* select dfcast.vmcat001*/

        FG02W00.FG02WURS = FF7REC.FF7RTSQY;
        FG02W01.FG02WFCF[FG02WLIX] = "Y"; /* set forecast flag*/
        FG02W01.FG02WUQR[FG02WLIX] = FF7REC.FF7RTSQY;
        FFXREC.FFXNUMB = FF7REC.FF7RTSQY;
        XSFFS10();
        FG02W01.FG02WQTR[FG02WLIX] = FFXREC.FFXCHAR;

      end
    end

    FG02W00.FG02WUTT = FG02W00.FG02WURS + FG02W00.FG02WUTT;

    FG02W00.FG02WIDX = FG02W00.FG02WIDX + 1;
    FG02W00.FG02WLIX = FG02W00.FG02WLIX + 1;

  end

  FG02W00.FG02WIDX = FG02W00.FG02WLIX - 1;
  if (FG02W01.FG02WFCF[FG02WIDX] == "Y")
                                   /* allow entry if at least on fcst mo*/
    FG02W01.FG02WFCF[FG02WLIX] = "Y";
  end
  FG02W01.FG02WHDG[FG02WLIX] = " TOTAL";
  FFXREC.FFXNUMB = FG02W00.FG02WUTT;
  XSFFS10();
  FG02W01.FG02WQTR[FG02WLIX] = FFXREC.FFXCHAR;


end // end FG02140

// Format and converse the map
Function FG02200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (FG02W00.FG02WSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FG02W00.FG02WSWF == "Y") /* Map must be formatted*/
      FG02210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FG02M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FG02M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG02M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (FFWREC.XXXMSGNO != 0) /* Message to display*/

      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FG02M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    FG02M001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/

    set FG02M001 alarm; /* Indicate sound alarm*/

  end

  converse FG02M001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = FG02M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG02M001.CAITEM; /* Application data*/


end // end FG02200

// Format the display data
Function FG02210()

   /* ------------------------------------------------------------*/
   /* init map fg02m001*/
   /* ------------------------------------------------------------*/

  set FG02M001 initial; /* m001 input/ouput area*/

  FG02W00.FG02WSWF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* Format fg02m001 using passed data*/
   /* ------------------------------------------------------------*/

  FG02W00.FG02WWDT = FFWREC.FFABEGMO; /* w/s date field*/
  FG02M001.FG02MBRG = FG02W00.FG02WWYM; /* begin month range*/
  FG02W00.FG02WWDT = FFWREC.FFAENDMO; /* w/s date field*/
  FG02M001.FG02MERG = FG02W00.FG02WWYM; /* end month range*/

  FG02M001.YPGCD = FFWREC.YPGCD; /* product type group*/
  FG02M001.YPGABRV = FFWREC.YPGABRV; /* product type group abrv*/

  FG02M001.XPCCD = FFWREC.XPCCD; /* category code*/
  FG02M001.XPCABRV = FFWREC.XPCABRV; /* category code abrv*/

  FG02M001.YSMXDV = FFWREC.YSMXDV; /* div group*/
  FG02M001.YSMSMDSC = FFWREC.YSMSMDSC; /* div group abrv*/

  if (FG02W01.CACHGFL != "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* determine which descriptions to display*/
   /* ------------------------------------------------------------*/

  set FG02M001.FG02MHD1[1] skip; /* historical data 1 yr ago desc*/
  set FG02M001.FG02MHD2[1] skip; /* historical data 2 yr ago desc*/
  set FG02M001.FG02MHRS[1] skip; /* projected shipment desc*/

  if (FG02W00.FG02WNMO > 7)
    set FG02M001.FG02MHD1[2] skip; /* historical data 1 yr ago desc*/
    set FG02M001.FG02MHD2[2] skip; /* historical data 2 yr ago desc*/
    set FG02M001.FG02MHRS[2] skip; /* projected shipment desc*/
  end

   /* ------------------------------------------------------------*/
   /* load monthly quantities/subtotal/total for hist 1 yr ago*/
   /* ------------------------------------------------------------*/

  FG02W00.FG02WIDX = 1;
  while (FG02W00.FG02WIDX <= FG02W00.FG02WNMO) /* nbr of mos loaded*/

    FG02M001.FG02MHQ1[FG02WIDX] = FG02W01.FG02WHQ1[FG02WIDX];

    FG02W00.FG02WIDX = FG02W00.FG02WIDX + 1; /* increment index*/

  end

   /* ------------------------------------------------------------*/
   /* load monthly quantities/subtotal/total for hist 2 yr ago*/
   /* ------------------------------------------------------------*/

  FG02W00.FG02WIDX = 1;
  while (FG02W00.FG02WIDX <= FG02W00.FG02WNMO) /* nbr of mos loaded*/

    FG02M001.FG02MHQ2[FG02WIDX] = FG02W01.FG02WHQ2[FG02WIDX];

    FG02W00.FG02WIDX = FG02W00.FG02WIDX + 1; /* increment index*/

  end

   /* ------------------------------------------------------------*/
   /* load monthly headings/quantities/subtotal/total for*/
   /* user requested return to stock qtys*/
   /* ------------------------------------------------------------*/

  FG02W00.FG02WIDX = FG02W00.FG02WNMO;
  while (FG02W00.FG02WIDX > 0) /* nbr of mos loaded*/

    if (FG02W01.FG02WHDG[FG02WIDX] == "SUBTOT"
     || FG02W01.FG02WHDG[FG02WIDX] == " TOTAL")
      FG02M001.FG02MHDG[FG02WIDX] = FG02W01.FG02WHDG[FG02WIDX];
    else
      FG02M001.FG02MHDG[FG02WIDX] = FG02W01.FG02WDH1[FG02WIDX];
    end
    set FG02M001.FG02MHDG[FG02WIDX] skip;

    FG02M001.FG02MQTR[FG02WIDX] = FG02W01.FG02WQTR[FG02WIDX];
    if (FG02W01.FG02WFCF[FG02WIDX] != "Y")
      set FG02M001.FG02MQTR[FG02WIDX] skip;
    else
      set FG02M001.FG02MQTR[FG02WIDX] cursor, normal;
    end

    FG02W00.FG02WIDX = FG02W00.FG02WIDX - 1; /* increment index*/

  end


end // end FG02210

// Check attention identifier
Function FG02300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* refresh map*/

    FG02W00.FG02WSWF = "Y"; /* format screen m001*/
    FG02W00.FG02WSWR = "N"; /* request for data*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FG02M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      FG02W00.FG02WSWF = "Y"; /* format screen m001*/
      FG02W00.FG02WSWR = "N"; /* request for data*/

      set FG02M001.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf17) /* or PF17 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG02M001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF03"; /* TO application*/
    end

    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "FF01"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    FG02W00.FG02WSWF = "Y"; /* format screen m001*/
    FG02W00.FG02WSWR = "N"; /* request for data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf16) /* pf16 was not pressed*/

    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FG02300

// Reset highlighted fields
Function FG02400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FG02M001.FG02MBRG initialAttributes; /* begin range*/
  set FG02M001.FG02MERG initialAttributes; /* end range*/
  set FG02M001.XPCCD initialAttributes; /* category code*/
  set FG02M001.YPGCD initialAttributes; /* product type group*/
  set FG02M001.YSMXDV initialAttributes; /* division group*/

  if (FG02W01.CACHGFL == "Y")

    set FG02M001.FG02MHD1[1] skip; /* historical 1 yr ago desc*/
    set FG02M001.FG02MHD2[1] skip; /* historical 2 yr ago desc*/
    set FG02M001.FG02MHRS[1] skip; /* return to stock desc*/

    if (FG02W00.FG02WNMO > 7)
      set FG02M001.FG02MHD1[2] skip; /* historical 1 yr ago desc*/
      set FG02M001.FG02MHD2[2] skip; /* historical 2 yr ago desc*/
      set FG02M001.FG02MHRS[2] skip; /* return to stock desc*/
    end

    FG02W00.FG02WIDX = 1;
    while (FG02W00.FG02WIDX <= FG02W00.FG02WNMO)

      if (FG02W01.FG02WFCF[FG02WIDX] != "Y")
        set FG02M001.FG02MQTR[FG02WIDX] skip;
      else
        set FG02M001.FG02MQTR[FG02WIDX] normal;
      end

      FG02W00.FG02WIDX = FG02W00.FG02WIDX + 1;

    end
  end

  set FG02M001.CATOAP initialAttributes;
  set FG02M001.CAITEM initialAttributes;

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FG02M001.XPCCD == "?" /* categroy code*/
   || FG02M001.YPGCD == "?") /* product type group*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes*/
   /* ------------------------------------------------------------*/

  if (FG02M001.XPCCD == "?") /* product category list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD;

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FG02M001.XPCCD = FFWREC.XPCCD; /* product category*/
      XPCREC.XPCCD = FFWREC.XPCCD; /* product category*/
      XPCREC.XGPCD = COMMAREA.XGPCD; /* gpc code*/
      if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
        FG02M001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
      end
    else
      FG02M001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FG02M001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Selected code*/

    end

    set FG02M001.XPCCD cursor; /* Establish cursor position*/

  end
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type group codes*/
   /* ------------------------------------------------------------*/

  if (FG02M001.YPGCD == "?") /* product type grp list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "TYPE"; /* Heading*/
    XX0XW02.YPGFFFL = "Y"; /* init flag*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FG02M001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FG02M001.YPGABRV = FFWREC.YPGABRV; /* Restore prior code*/
    else
      FG02M001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FG02M001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Selected code*/

    end

    set FG02M001.YPGCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FG02400

// Verify the entered data
Function FG02500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FG02M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* request for update of return to stock qtys*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16)

    FG02S04(); /* verify modifiable fields*/

  end

   /* ------------------------------------------------------------*/
   /* validate entry fields*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)

    FG02510(); /* validate entry fields*/

    /* ------------------------------------------------------*/
     /* if key data changed check modifiable fields*/
    /* ------------------------------------------------------*/

    FG02W00.FG02WWBD = FFWREC.FFABEGMO;
    FG02W00.FG02WWED = FFWREC.FFAENDMO;

    if (FG02M001.YSMXDV != FFWREC.YSMXDV      /* div grp chg*/
     || FG02M001.YSMXDV == " "                /* div grp chg*/
     || FG02M001.YPGCD != FFWREC.YPGCD        /* product type grp chg*/
     || FG02M001.YPGCD == " "                 /* product type grp chg*/
     || FG02M001.XPCCD != FFWREC.XPCCD        /* product category chg*/
     || FG02M001.XPCCD == " "                 /* product category chg*/
     || FG02M001.FG02MBRG != FG02W00.FG02WBYM /* beg range changed*/
     || FG02M001.FG02MBRG == 0                /* beg range changed*/
     || FG02M001.FG02MERG != FG02W00.FG02WEYM /* end range changed*/
     || FG02M001.FG02MERG == 0)               /* end range changed*/

      if (FG02W01.CACHGFL == "Y")
        FG02S04(); /* verify modifiable fields*/
      end

      if (converseVar.validationMsgNum == 0)
        FG02W00.FG02WSWR = "Y"; /* request data request*/
      end
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end


end // end FG02500

// Validate modifiable data
Function FG02510()
   /* ------------------------------------------------------------*/
   /* init work fields*/
   /* ------------------------------------------------------------*/

  FG02W00.FG02WTCF = "N"; /* init total change flag*/
  FG02W00.FG02WMCF = "N"; /* init monthly change flag*/
  FG02W00.FG02WNM1 = 0; /* init numeric work field*/

   /* ------------------------------------------------------------*/
   /* validate user entered return to stock qtys:*/

   /* if the total field was modified verify if entries were made*/
   /* in the monthly fields, if so, these fields are in error.*/
   /* if the total field was NOT modified verify the qtys entered*/
   /* in the monthly fields*/
   /* ------------------------------------------------------------*/
  if (FG02W01.CACHGFL == "Y")

    if (FG02W01.FG02WQTR[FG02WNMO] != FG02M001.FG02MQTR[FG02WNMO])

      FG02W00.FG02WIDX = FG02W00.FG02WNMO - 1;
      while (FG02W00.FG02WIDX > 0)

        /* -------------------------------------------------*/
         /* determine if entry field changed*/
        /* -------------------------------------------------*/

        if (FG02W01.FG02WQTR[FG02WIDX] != FG02M001.FG02MQTR[FG02WIDX])
          converseLib.validationFailed(233);
          FFWREC.XXXMODID = "510";
          set FG02M001.FG02MQTR[FG02WNMO] bold;
          set FG02M001.FG02MQTR[FG02WIDX] cursor, bold;
        end

        /* -------------------------------------------------*/
         /* accumulate actual qtys*/
        /* -------------------------------------------------*/

        if (FG02W01.FG02WFCF[FG02WIDX] != "Y" /* actual qtys*/
         && FG02W01.FG02WHDG[FG02WIDX] != "SUBTOT"
         && FG02W01.FG02WHDG[FG02WIDX] != " TOTAL")
          FG02W00.FG02WNM1 = FG02W01.FG02WUQR[FG02WIDX] + FG02W00.FG02WNM1;
        end

        FG02W00.FG02WIDX = FG02W00.FG02WIDX - 1;
      end

      if (converseVar.validationMsgNum == 0)
        FFXREC.FFXCHAR = FG02M001.FG02MQTR[FG02WNMO];
        XSFFS11();
        if (FFXREC.FFXRTNCD != 0)
          converseLib.validationFailed(10);
          FFWREC.XXXMODID = "510";
          set FG02M001.FG02MQTR[FG02WNMO] cursor, bold;
        else
          if (FFXREC.FFXNUMB < FG02W00.FG02WNM1) /* lt total actual qty*/
            converseLib.validationFailed(149);
            FFWREC.XXXMODID = "510";
            set FG02M001.FG02MQTR[FG02WNMO] cursor, bold;
          else
            if (FFXREC.FFXNUMB < 0) /* negative amount*/
              converseLib.validationFailed(117);
              FFWREC.XXXMODID = "510";
              set FG02M001.FG02MQTR[FG02WNMO] cursor, bold;
            else
              FG02W00.FG02WTCF = "Y"; /* set total change flag*/
            end
          end
        end
      end
    else
      FG02W00.FG02WIDX = FG02W00.FG02WNMO;
      while (FG02W00.FG02WIDX > 0)

        if (FG02W01.FG02WQTR[FG02WIDX] != FG02M001.FG02MQTR[FG02WIDX]
         && FG02W01.FG02WHDG[FG02WIDX] != "SUBTOT"
         && FG02W01.FG02WHDG[FG02WIDX] != " TOTAL")

          FG02W00.FG02WMCF = "Y"; /* monthly change flag*/
          FFXREC.FFXCHAR = FG02M001.FG02MQTR[FG02WIDX];
          XSFFS11();
          if (FFXREC.FFXRTNCD != 0)
            converseLib.validationFailed(10);
            FFWREC.XXXMODID = "510";
            set FG02M001.FG02MQTR[FG02WIDX] cursor, bold;
          else
            if (FFXREC.FFXNUMB < 0)
              converseLib.validationFailed(117);
              FFWREC.XXXMODID = "510";
              set FG02M001.FG02MQTR[FG02WIDX] cursor, bold;
            end
          end
        end

        FG02W00.FG02WIDX = FG02W00.FG02WIDX - 1;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate div group using routine xsffs20*/
   /* ------------------------------------------------------------*/

  set YSMREC empty;
  YSMREC.YSMSUMCD = FG02M001.YSMXDV;
  TA1REC.TA1PGMNM = "FG02510";

  XSFFS20(); /* validate/get division group data*/

  if (SQLCA.VAGen_SQLCODE == 0)
    FG02M001.YSMSMDSC = YSMREC.YSMSMDSC;
  else
    FG02M001.YSMSMDSC = " ";
    converseLib.validationFailed(10);
    FFWREC.XXXMODID = "510";
    set FG02M001.YSMXDV cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate product category code*/
   /* ------------------------------------------------------------*/

  XPCREC.XGPCD = COMMAREA.XGPCD;
  XPCREC.XPCCD = FG02M001.XPCCD;
  if (XPCREC.XPCKEY in XPCTBL.XPCKEY
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    FG02M001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
  else
    FG02M001.XPCABRV = " ";
    converseLib.validationFailed(118);
    FFWREC.XXXMODID = "510";
    set FG02M001.XPCCD cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate product type group*/
   /* ------------------------------------------------------------*/

  if (FG02M001.YPGCD in YPGTBL.YPGCD
   && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    FG02M001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
  else
    FG02M001.YPGABRV = " ";
    converseLib.validationFailed(118);
    FFWREC.XXXMODID = "510";
    set FG02M001.YPGCD cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate end yymm range and begin yymm range*/
   /* ------------------------------------------------------------*/

  set FFZREC empty;

  FFZREC.FFZSRANG = "Y";
  FFZREC.FFZBYYMM = FG02M001.FG02MBRG;
  FFZREC.FFZEYYMM = FG02M001.FG02MERG;

  XSFFS30(); /* edit date range*/

  if (FFZREC.FFZENDRC == "1")
    set FG02M001.FG02MERG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "510";
  else
    if (FFZREC.FFZENDRC == "2")
      set FG02M001.FG02MERG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "510";
    else
      if (FFZREC.FFZENDRC == "3")
        set FG02M001.FG02MERG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "510";
      end
    end
  end

  if (FFZREC.FFZBEGRC == "1")
    set FG02M001.FG02MBRG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "510";
  else
    if (FFZREC.FFZBEGRC == "2")
      set FG02M001.FG02MBRG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "510";
    else
      if (FFZREC.FFZBEGRC == "3")
        set FG02M001.FG02MBRG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "510";
      end
    end
  end


end // end FG02510

// Process valid input request
Function FG02600()
   /* ------------------------------------------------------------*/
   /* indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/

  FG02W00.FG02WSWF = "Y"; /* set format map switch*/

   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA/ffwrec*/
   /* ------------------------------------------------------------*/

  FFWREC.YSMXDV = FG02M001.YSMXDV; /* div group code*/
  FFWREC.YSMSMDSC = FG02M001.YSMSMDSC; /* div group desc*/

  FFWREC.XPCCD = FG02M001.XPCCD; /* product category code*/
  FFWREC.XPCABRV = FG02M001.XPCABRV; /* product category abrv desc*/

  FFWREC.YPGCD = FG02M001.YPGCD; /* product type grp code*/
  FFWREC.YPGABRV = FG02M001.YPGABRV; /* product type grp abrv desc*/

  FFWREC.FFABEGMO = FFZREC.FFZBEGMO;
  FFWREC.FFAENDMO = FFZREC.FFZENDMO;

  if (FG02W00.FG02WSWR == "Y") /* KEY DATA MODIFIED*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* if return to stock data changed and pf16 was pressed*/
   /* update dfcast.vmcat001 return to stock qtys*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16
   && FFWREC.FFWMODSW == "Y") /* data modified switch*/

    XX0XS01(); /* get current date and time*/

    FG02W00.FG02WIDX = 1;
    while (FG02W00.FG02WIDX <= FG02W00.FG02WNMO) /* nbr of months loaded*/

      if (FG02W01.FG02WHDG[FG02WIDX] != "SUBTOT"
       && FG02W01.FG02WHDG[FG02WIDX] != " TOTAL")

        set FF7REC empty;
        FF7REC.FF4FCTMO = FG02W01.FG02WHDD[FG02WIDX];

        FG02S03(); /* Select MCAT*/

        FF7REC.FF7RTSQY = FG02W01.FG02WUQR[FG02WIDX];

        if (SQLCA.VAGen_SQLCODE == 0) /* If row found*/
          FG02610(); /* Update MCAT*/
        else
          FG02620(); /* Add MCAT*/
        end

      end
      FG02W00.FG02WIDX = FG02W00.FG02WIDX + 1;
    end

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();

    FFWREC.XXXMSGNO = 33;
    FFWREC.XXXMODID = "600";
    FFWREC.FFWMODSW = "N";

  end

   /* ------------------------------------------------------------*/
   /* Update working storage fields, if data has changed.*/
   /* ------------------------------------------------------------*/

  if (FG02W00.FG02WTCF == "Y" /* total entry changed*/
   || FG02W00.FG02WMCF == "Y") /* monthly entry changed*/

    FFWREC.FFWMODSW = "Y"; /* data modified switch*/

    FG02630(); /* Process changed data*/

  end


end // end FG02600

// Update MCAT
Function FG02610()
   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/

  FF7REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF7REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update MCAT.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" ("U ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FG02W00.FG02WSWR = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "610"; /* Module identification*/
      FFWREC.XXXMSGNO = 20; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "610"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE DFCAST.VMCAT001 TABLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG02610

// Add MCAT
Function FG02620()
   /* ------------------------------------------------------------*/
   /* Format data.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.YPGCD == "01") /* If inlines*/
    FF7REC.FF7FURAT = 0;
    FF7REC.FF7FLLRT = 92;
  else
    if (FFWREC.YPGCD == "02") /* If makeups*/
      FF7REC.FF7FURAT = 100;
      FF7REC.FF7FLLRT = 100;
    end
  end

  FF7REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  FF7REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF7REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Insert MCAT.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" ("A ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "620"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG02620

// Process changed data
Function FG02630()
   /* --------------------------------------------------*/
   /* Process changed data.*/
   /* --------------------------------------------------*/

  if (FG02W00.FG02WTCF == "Y") /* total entry changed*/

    FFXREC.FFXCHAR = FG02M001.FG02MQTR[FG02WNMO];
    XSFFS11(); /* numeric value 'FFXREC.FFXNUMB'*/

    /* ----------------------------------------------*/
     /* Subtract actual qtys from the MAP total field*/
    /* ----------------------------------------------*/

    FG02W00.FG02WNFM = 0; /* init nbr of fcst mos*/
    FG02W00.FG02WIDX = 1; /* init index*/
    while (FG02W00.FG02WIDX <= FG02W00.FG02WNMO) /* nbr of months loaded*/

      if (FG02W01.FG02WHDG[FG02WIDX] != "SUBTOT"
       && FG02W01.FG02WHDG[FG02WIDX] != " TOTAL")

        if (FG02W01.FG02WFCF[FG02WIDX] != "Y") /* actual qty*/
          FFXREC.FFXNUMB = FFXREC.FFXNUMB - FG02W01.FG02WUQR[FG02WIDX];
        else
          FG02W00.FG02WNFM = FG02W00.FG02WNFM + 1;
        end
      end
      FG02W00.FG02WIDX = FG02W00.FG02WIDX + 1;
    end

    /* -----------------------------------------------------*/
     /* Calculate monthly qtys: map total / nbr of fcst mos*/
    /* -----------------------------------------------------*/

    FG02W00.FG02WNM1 = FFXREC.FFXNUMB; /* total entry*/
    FG02W00.FG02WIDX = 1; /* init index*/
    while (FG02W00.FG02WIDX <= FG02W00.FG02WNMO) /* nbr of months loaded*/

      if (FG02W01.FG02WHDG[FG02WIDX] != "SUBTOT"
       && FG02W01.FG02WHDG[FG02WIDX] != " TOTAL")

        if (FG02W01.FG02WFCF[FG02WIDX] == "Y") /* fcst qty*/
          FG02W01.FG02WUQR[FG02WIDX] = mathLib.round(FG02W00.FG02WNM1 / FG02W00.FG02WNFM, -mathLib.decimals(FG02W01.FG02WUQR[FG02WIDX]));
          FFXREC.FFXNUMB = FG02W01.FG02WUQR[FG02WIDX]; /* units*/
          XSFFS10();
          FG02W01.FG02WQTR[FG02WIDX] = FFXREC.FFXCHAR; /* 1000*/
        end
      end
      FG02W00.FG02WIDX = FG02W00.FG02WIDX + 1;
    end
  end

   /* --------------------------------------------------*/
   /* Process MONTHLY entries*/
   /* --------------------------------------------------*/

  if (FG02W00.FG02WMCF == "Y") /* monthly entries changed*/

    /* ----------------------------------------------*/
     /* Load new monthly qtys*/
    /* ----------------------------------------------*/

    FG02W00.FG02WIDX = 1; /* init index*/
    while (FG02W00.FG02WIDX <= FG02W00.FG02WNMO) /* nbr of months loaded*/

      if (FG02W01.FG02WHDG[FG02WIDX] != "SUBTOT"
       && FG02W01.FG02WHDG[FG02WIDX] != " TOTAL")

        if (FG02W01.FG02WFCF[FG02WIDX] == "Y") /* fcst qty*/

          FFXREC.FFXCHAR = FG02M001.FG02MQTR[FG02WIDX];
          XSFFS11(); /* numeric value*/
          FG02W01.FG02WUQR[FG02WIDX] = FFXREC.FFXNUMB; /* units*/
          XSFFS10();
          FG02W01.FG02WQTR[FG02WIDX] = FFXREC.FFXCHAR; /* 1000*/
        end
      end
      FG02W00.FG02WIDX = FG02W00.FG02WIDX + 1;
    end
  end

   /* -----------------------------------------------------*/
   /* Recalculate subtotals and total qtys*/
   /* -----------------------------------------------------*/

  FG02W00.FG02WUTT = 0; /* init numeric work field*/
  FG02W00.FG02WIDX = 1; /* init index*/
  while (FG02W00.FG02WIDX < FG02W00.FG02WNMO) /* nbr of months loaded*/

    if (FG02W01.FG02WHDG[FG02WIDX] == "SUBTOT")
      FG02W01.FG02WUQR[FG02WIDX] = FG02W00.FG02WUTT;
      FFXREC.FFXNUMB = FG02W00.FG02WUTT;
      XSFFS10();
      FG02W01.FG02WQTR[FG02WIDX] = FFXREC.FFXCHAR;
    end

    if (FG02W01.FG02WHDG[FG02WIDX] != "SUBTOT"
     && FG02W01.FG02WHDG[FG02WIDX] != " TOTAL")

      FG02W00.FG02WUTT = FG02W01.FG02WUQR[FG02WIDX] + FG02W00.FG02WUTT;
    end

    FG02W00.FG02WIDX = FG02W00.FG02WIDX + 1;
  end

  FFXREC.FFXNUMB = FG02W00.FG02WUTT;
  XSFFS10();
  FG02W01.FG02WQTR[FG02WIDX] = FFXREC.FFXCHAR;

  FG02W00.FG02WTCF = "N"; /* init total chg flag*/
  FG02W00.FG02WMCF = "N"; /* init monthly chg flag*/


end // end FG02630

// get monthly headings xsffs30
Function FG02S01()
   /* ------------------------------------------------------------*/
   /* get all months within requested date range*/
   /* ------------------------------------------------------------*/

  FFZREC.FFZMONTH = 1;
  FFZREC.FFZSRANG = "Y";

  XSFFS30();

  if (FFZREC.FFZENDRC == "1")
    set FG02M001.FG02MERG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "S01";
  else
    if (FFZREC.FFZENDRC == "2")
      set FG02M001.FG02MERG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "S01";
    else
      if (FFZREC.FFZENDRC == "3")
        set FG02M001.FG02MERG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "S01";
      end
    end
  end

  if (FFZREC.FFZBEGRC == "1")
    set FG02M001.FG02MBRG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "S01";
  else
    if (FFZREC.FFZBEGRC == "2")
      set FG02M001.FG02MBRG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "S01";
    else
      if (FFZREC.FFZBEGRC == "3")
        set FG02M001.FG02MBRG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "S01";
      end
    end
  end


end // end FG02S01

// get actual rtn stock qtys
Function FG02S02()

   /* ------------------------------------------------------------*/
   /* obtain historical actual rtn stock quantities.*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFBEGMO = FFZREC.FFZINDMO[FG02WIDX];
  FFFREC.FFFENDMO = FFZREC.FFZINDMO[FG02WIDX];

  set FH6REC empty;

  FH6REC.XPCCD = FFWREC.XPCCD; /* product category*/
  FH6REC.XDVCD = FFWREC.YSMXDV; /* division code*/
  FH6REC.XPRCD = FFWREC.YPGCD; /* product type code*/
  FH6REC.XLCCD = "10"; /* life cycle code*/
  FH6REC.XCTCD = "USA"; /* country code*/
  FH6REC.XQACD = "01"; /* quality code*/
  FH6REC.YSMXOT = "*"; /* sum code*/
  FH6REC.XDSCD = "*"; /* direct ship code*/
  TA1PGMNM = "FG02S02"; /* calling process*/

   /* --------------------------------------------------*/
   /* select sum on dfhist.vctshp01 table*/
   /* --------------------------------------------------*/

  XSFFS52();

  FG02W00.FG02WURS = FH6REC.FH5RTSQT;


end // end FG02S02

// Select MCAT
Function FG02S03()
   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/

  FF7REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF7REC.XCTCD = "USA"; /* Foreign country code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* Product categroy code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/

   /* ------------------------------------------------------------*/
   /* Select MCAT.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or zero total, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* selection not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indisgrpe that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S03"; /* Module identifisgrpion*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indisgrpe not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indisgrpe system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VMCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program applisgrpion*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG02S03

// Verify modifiable fields
Function FG02S04()
   /* -----------------------------------------------------*/
   /* verify entry fields*/
   /* -----------------------------------------------------*/

  FG02W00.FG02WIDX = 1;
  while (FG02W00.FG02WIDX <= FG02W00.FG02WNMO) /* nbr of months loaded*/

    if (FG02M001.FG02MQTR[FG02WIDX] != FG02W01.FG02WQTR[FG02WIDX])
      set FG02M001.FG02MQTR[FG02WIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S04";
    end

    FG02W00.FG02WIDX = FG02W00.FG02WIDX + 1;

  end

  if (converseVar.eventKey not enter)

    if (FG02M001.YSMXDV != FFWREC.YSMXDV)
      set FG02M001.YSMXDV cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S04";
    end

    if (FG02M001.XPCCD != FFWREC.XPCCD)
      set FG02M001.XPCCD cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S04";
    end

    if (FG02M001.YPGCD != FFWREC.YPGCD)
      set FG02M001.YPGCD cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S04";
    end

    FG02W00.FG02WWED = FFWREC.FFAENDMO;
    if (FG02M001.FG02MERG != FG02W00.FG02WEYM)
      set FG02M001.FG02MERG cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S04";
    end

    FG02W00.FG02WWBD = FFWREC.FFABEGMO;
    if (FG02M001.FG02MBRG != FG02W00.FG02WBYM)
      set FG02M001.FG02MBRG cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S04";
    end
  end


end // end FG02S04

//*** RECORD=FG02W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FG02W00 type basicRecord
  10 FG02WSWR FG02WSWR ; 
  10 FG02WSWF FG02WSWF ; 
  10 FG02WMCF FG02WMCF ; 
  10 FG02WTCF FG02WTCF ; 
  10 FG02WUTT FG02WUTT ; 
  10 FG02WURS FG02WURS ; 
  10 FG02WNFM FG02WNFM ; 
  10 FG02WNMO FG02WNMO ; 
  10 FG02WNM1 FG02WNM1 ; 
  10 FG02WNM2 FG02WNM2 ; 
  10 FG02WIDX FG02WIDX ; 
  10 FG02WLIX FG02WLIX ; 
  10 FG02WWDT FG02WWDT ; 
    15 * num(3) ; 
    15 FG02WWCC FG02WWCC ; 
    15 FG02WWYM FG02WWYM ; 
      20 FG02WWYY FG02WWYY ; 
      20 FG02WWMM FG02WWMM ; 
  10 FG02WWBD FG02WWBD ; 
    15 * num(3) ; 
    15 FG02WBCC FG02WBCC ; 
    15 FG02WBYM FG02WBYM ; 
      20 FG02WBYY FG02WBYY ; 
      20 FG02WBMM FG02WBMM ; 
  10 FG02WWED FG02WWED ; 
    15 * num(3) ; 
    15 FG02WECC FG02WECC ; 
    15 FG02WEYM FG02WEYM ; 
      20 FG02WEYY FG02WEYY ; 
      20 FG02WEMM FG02WEMM ; 
  10 FG02WICD FG02WICD ; 
    15 FG02WIYM FG02WIYM ; 
      20 FG02WICC FG02WICC ; 
      20 FG02WIYY FG02WIYY ; 
      20 FG02WIMM FG02WIMM ; 
    15 FG02WIDD FG02WIDD ; 
  10 FG02WCWD FG02WCWD ; 
    15 FG02WCYM FG02WCYM ; 
      20 FG02WCCC FG02WCCC ; 
      20 FG02WCYY FG02WCYY ; 
      20 FG02WCMM FG02WCMM ; 
    15 FG02WCDD FG02WCDD ; 
  10 FG02WCRD FG02WCRD ; 
  10 FG02WCD1 FG02WCD1 ; 
end // end FG02W00

//*** RECORD=FG02W01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// ***********************
Record FG02W01 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 FG02WPBD FG02WPBD [2] ; 
  10 FG02WPED FG02WPED [2] ; 
  10 FG02WHDG FG02WHDG [14] ; 
    15 FG02WHDD FG02WHDD ; 
      20 * num(5) ; 
      20 FG02WDH1 FG02WDH1 ; 
  10 FG02WUQ1 FG02WUQ1 [14] ; 
  10 FG02WHQ1 FG02WHQ1 [14] ; 
  10 FG02WUQ2 FG02WUQ2 [14] ; 
  10 FG02WHQ2 FG02WHQ2 [14] ; 
  10 FG02WFCF FG02WFCF [14] ; 
  10 FG02WUQR FG02WUQR [14] ; 
  10 FG02WQTR FG02WQTR [14] ; 
end // end FG02W01

// begin century
DataItem FG02WBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range month
DataItem FG02WBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year and month
DataItem FG02WBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range year
DataItem FG02WBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work century
DataItem FG02WCCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date - 1 month
DataItem FG02WCD1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current work day
DataItem FG02WCDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work month
DataItem FG02WCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date
DataItem FG02WCRD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date ccyymmdd
DataItem FG02WCWD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current work ccyymm
DataItem FG02WCYM num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work year
DataItem FG02WCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG02WDH1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end century
DataItem FG02WECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range month
DataItem FG02WEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end year and month
DataItem FG02WEYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range year
DataItem FG02WEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// rtn stcok fcst qty
DataItem FG02WFCF char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// monthly date ccyymm
DataItem FG02WHDD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// monthly/subtotal/total hdgs
DataItem FG02WHDG char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// historical qtys 1 yrs 1000
DataItem FG02WHQ1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// historical qtys 2 yrs 1000
DataItem FG02WHQ2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// invoice work century
DataItem FG02WICC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice compare date
DataItem FG02WICD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// invoice work day
DataItem FG02WIDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem FG02WIDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice work month
DataItem FG02WIMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice ccyymm
DataItem FG02WIYM num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice work year
DataItem FG02WIYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// load index
DataItem FG02WLIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// monthly change flag
DataItem FG02WMCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nbr of fcst months
DataItem FG02WNFM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 1
DataItem FG02WNM1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 2
DataItem FG02WNM2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nbr of months loaded
DataItem FG02WNMO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical begin date ranges
DataItem FG02WPBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// historical end date ranges
DataItem FG02WPED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// rtn stock shipment 1000
DataItem FG02WQTR char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FG02WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FG02WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total change flag
DataItem FG02WTCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// historical qtys 1 yrs units
DataItem FG02WUQ1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical qtys 2 yrs units
DataItem FG02WUQ2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// rtn stock shipment units
DataItem FG02WUQR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// return to stock work field
DataItem FG02WURS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total work field
DataItem FG02WUTT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work begin date
DataItem FG02WWBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work century
DataItem FG02WWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date
DataItem FG02WWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work begin date
DataItem FG02WWED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work month
DataItem FG02WWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year and month
DataItem FG02WWYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FG02WWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

