package fg0b;

import corpcom2.XPCREC;
import corpcom2.XPLREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPFF001;
import corpcom3.XPXCT01;
import corpcom3.XPXPC01;
import corpcom3.XPXPL01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS01;
import corpcom4.XSFFS20;
import corpcom4.XSFFS22;
import corpcom4.XSFFS30;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpcom7.ZZZSTM;
import corpx1.XCTTBL;
import corpx1.XDMCD;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx2.XXXUSRID;
import corpy2.YPGTBL;
import corpz3.ZZZSDT;
import ff.common.*;
import sy.common.SY1STNBR;
import sy.common.SY2CLRID;
import sy.common.SYBSTGNB;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
//*** PROGRAM=FG0B ****
// This application allows a user to select an existing sales
// forecast range and choose the level at which a forecast is
// to be displayed.
// 
// A list of ranges or a specific range will be displayed
// according to the user's request.  The user may scroll
// forward and backward to view all the ranges.  The screen
// will show the user at what level forecasts exist and when
// they were created.  If the user selects a forecast in the
// list, control is transferred to the appropriate application
// for the user to view/modify the forecast.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          07/31/89  SPOPA   New application.
// Fix      07/31/90  JJUCH   Fixed the highlight problem when
//                            error comes up.
//                            Put out the line code and abrv
//                            when fastpath and cat specified.
// FF1004   08/01/90  JJUCH   Added the delete wrksht function.
// FF1070   08/24/90  JJUCH   Changed to only displayed the
//                            specified type group wrksheets.
// Fix      11/20/90  JJUCH   Fixed the display month group
//                            flag problem.
// Fix      04/25/91  JJUCH   Correct the bug of not displaying
//                            line fcst flag when no type grp
//                            fcst worksheet.
// FF1100   10/28/91  LDELUH  Add edit to delete to check for
//                            multiple typgrps in wrksht.
// FF1115   03/04/92  LDELUH  When request specific cat or sgrp
//                            want to only see worksheets for
//                            that cat or sgrp not for line.
// FF382    03/04/93  JJUCH   Change to accomodate VWDGRP01
//                            table change. (add user id)
//                            Only allow last user to delete
//                            the worksheet. (chng in FF6110)
//                            Only bring in the requested range
// FF415    07/21/93  JJUCH   Add date range 12 month editing.
//          09/16/94  JALLE1  Fix date edit problems.
// FF175    12/10/96  DSMITH  Changed the date range fill
//                            character to '0'.
// *********************
Program FG0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF2REC FF2REC; // record
  FF3REC FF3REC; // record
  FFEREC FFEREC; // record
  FFFREC FFFREC; // record
  FFGREC FFGREC; // record
  FFHREC FFHREC; // record
  FFIREC FFIREC; // record
  FFJREC FFJREC; // record
  FFKREC FFKREC; // record
  FFLREC FFLREC; // record
  FFMREC FFMREC; // record
  FFNREC FFNREC; // record
  FFOREC FFOREC; // record
  FFWREC FFWREC; // record
  FFZREC FFZREC; // record
  FG0BW00 FG0BW00; // record
  FG0BW01 FG0BW01; // record
  FG0BW02 FG0BW02; // record
  FG0BW03 FG0BW03; // record
  FG0BW04 FG0BW04; // record
  FG0BW05 FG0BW05; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use YPGTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use FG0BM.FG0BM001, // form
  		FG0BM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FG0BM001 initial; /* M001 input/output*/
    set FG0BW00 empty; /* Working storage*/
    set FG0BW01 empty; /* M001 display storage*/
    set FG0BW02 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FG0BW00.FG0BWSWF = "Y"; /* Format the map switch*/
    FG0BW00.FG0BWSWR = "N"; /* Request for data switch*/
    FG0BW00.FG0BWSWD = "N"; /* Deletion flag*/

    XPLREC.XGPCD = COMMAREA.XGPCD;
    XPCREC.XGPCD = COMMAREA.XGPCD;

     /* ---------------------------------------------------*/
     /* Clear unused fields*/
     /* ---------------------------------------------------*/

    FFWREC.SY1STNBR = " "; /* Clear style number*/
    FFWREC.SY2CLRID = " "; /* Clear color id*/
    FFWREC.XDMCD = " "; /* Clear dimension code*/
    FFWREC.SY1SSTNM = " "; /* Clear short style name*/
    FFWREC.SY2CLRAB = " "; /* Clear color abrv*/
    FFWREC.XDMABRV = " "; /* Clear dimension abrv*/
    FFWREC.ZRGCD = " "; /* Clear region code*/
    FFWREC.ZRGABRV = " "; /* Clear region abrv*/

     /* ------------------------------------------------------------*/
     /* Default key fields that are blank in FF system commarea.*/
     /* ------------------------------------------------------------*/

    if (FFWREC.XCTCD == " " /* Foreign country blank*/
     && FFWREC.YSMXDV == "10") /* and Domestic*/

      FFWREC.XCTCD = "USA"; /* Foreign country code*/
      if (FFWREC.XCTCD in XCTTBL.XCTCD)
        FFWREC.XCTABRV = XCTTBL.XCTABRV[sysVar.arrayIndex];
      end

    end

    if (FFWREC.YPGCD == " ") /* Type group blank*/

      FFWREC.YPGCD = "01"; /* Type group code*/
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end /* Abbreviation*/

    end

     /* ------------------------------------------------------------*/
     /* If key fields were passed in FFWREC, indicate obtain data.*/
     /* ------------------------------------------------------------*/

    if (FFWREC.FFABEGMO > 0 /* Beginning month passed*/
     && FFWREC.FFAENDMO > 0 /* and ending month passed*/
     && FFWREC.XCTCD > " "  /* and foreign country passed*/
     && FFWREC.YSMXDV > " ") /* and division group code passed*/

      FG0BW00.FG0BWSWR = "Y"; /* Request for data switch*/

    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FG0B001; /* Converse the main process*/


    FG0B001: FG0B001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FG0B001; /* Converse the main process*/


  end // end main
end // end FG0B

// Main process to display a map
Function FG0B001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FG0B100(); /* Obtain the data to display*/

  FG0B200(); /* Format and display the map*/

  FG0B300(); /* Check attention identifier*/

  FG0B400(); /* Reset fields to normal intensity*/

  FG0B500(); /* Verify the entered data*/

  FG0B600(); /* Process valid input request*/


end // end FG0B001

// Obtain the data to display
Function FG0B100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FG0BW00.FG0BWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  FG0BW00.XXXTSLEN = 467; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  FG0B110(); /* Purge any temporary storage*/
  set FG0BW02 empty; /* Empty the other temp storage rec*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  FG0B120(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Load product line if category and type group specified.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.YPGCD > " " /* Type gorup entered*/
   && FFWREC.XPCCD > " " /* Category entered*/
   && FFWREC.YSMXDV > " ") /* Domestic*/
    FG0BS96(); /* Select DFCAST.VFFXRF01*/
  end

   /* ------------------------------------------------------------*/
   /* Load style group table if only specified category.*/
   /* ------------------------------------------------------------*/
  if (FFWREC.YPGCD > " "     /* Type gorup entered*/
   && FFWREC.XPCCD > " "     /* Category entered*/
   && FFWREC.SYBSTGNB == " " /* No style group entered*/
   && FFWREC.YSMXDV == "10") /* Domestic*/
    FG0BS15(); /* Load style group list for cat*/
  end

   /* ------------------------------------------------------------*/
   /* Load styclr table if specified style group and category.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.YPGCD > " "    /* Type gorup entered*/
   && FFWREC.XPCCD > " "    /* Category entered*/
   && FFWREC.SYBSTGNB > " " /* Style group entered*/
   && FFWREC.YSMXDV == "10") /* Domestic*/

    FG0BS18(); /* load style color for style group*/

  end

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  while (FG0BW00.FG0BWSWC == "N") /* Until end of cursor*/

    FG0B130(); /* Fetch selected rows*/

    FG0B140(); /* Save data in display storage*/

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (FG0BW00.FG0BWIXM > 12) /* Page is full*/
      FG0B150(); /* Add page to temporary storage*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (FG0BW00.FG0BWIXM > 1) /* Page was formatted*/
    FG0B150(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  FG0B160(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FG0BW00.TA5TSQIX == 0) /* No pages formatted*/

    FFWREC.XXXMODID = "100"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/

    return; /* Exit to continue processing*/

  end

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO == 0) /* No message to display*/

    FG0BW00.XXXTSPAG = 1;
    FG0B211(); /* Read the 1st tsq page*/

    /* ------------------------------------------------------------*/
     /* Re-organize the TSQ working storage W01.*/
     /* And append the re-organized queue (W02) at the end of (W01)*/
     /* in Temporary storage queue.*/
    /* ------------------------------------------------------------*/

    FG0BW00.FG0BWIXM = 1; /* Initialize line index*/

    while (FG0BW00.XXXTSPAG <= FG0BW00.TA5TSQIX /* Until reach highest page*/
     && FG0BW00.TA5TSQIX != 0)

      FG0BW00.FG0BWIX2 = 1; /* Initialize map index*/
      set FG0BW02 empty; /* Clear w02*/

      FG0BW02.FFZBYYMM = FG0BW01.FFZBYYMM; /* Beginning month*/
      FG0BW02.FFZEYYMM = FG0BW01.FFZEYYMM; /* Ending month*/

      FG0B170(); /* Re-organize the tsq work area*/

      FG0B180(); /* Add in new page to W02*/

    end

    FG0BW00.FG0BWTSQ = FG0BW00.TA5TSQIX; /* Save last pos. of 1st queue*/
    FG0BW00.XXXTSPAG = FG0BW00.TA5TSQIX + 1; /* Starting point of 2nd queue*/
    FG0BW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Set highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FG0BW00.FG0BWSWR = "N"; /* Request for data switch*/


end // end FG0B100

// Purge any tsq page w01
Function FG0B110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FG0BW01 empty; /* M001 display storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FG0BW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FG0BW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "110"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0B110

// Select set and open cursor
Function FG0B120()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set FFEREC empty; /* Clear row storage area*/

  FFEREC.YSMXDV = FFWREC.YSMXDV; /* Division group*/
  FFEREC.XCTCD = FFWREC.XCTCD; /* Country*/
  FFEREC.FFABEGMO = FFWREC.FFABEGMO; /* Beginning month*/
  FFEREC.FFAENDMO = FFWREC.FFAENDMO; /* Ending month*/

  try
    call "IO3850" ("S2", SQLCA, FFEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    FG0BW00.FG0BWIXM = 1; /* Display line index*/
    FG0BW00.FG0BWSWC = "N"; /* End of cursor switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWDGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFEREC.FFEKEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0B120

// Fetch next row in the cursor
Function FG0B130()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3850" ("N2", SQLCA, FFEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      FG0BW00.FG0BWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWDGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFEREC.FFEKEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0B130

// Save data in display storage
Function FG0B140()
   /* ------------------------------------------------------------*/
   /* If first line on page, save beginning and ending months.*/
   /* ------------------------------------------------------------*/

  if (FG0BW00.FG0BWIXM == 1) /* First line on page*/
    FG0BW01.FFZBEGMO = FFWREC.FFABEGMO; /* Beginning month*/
    FG0BW01.FFZENDMO = FFWREC.FFAENDMO; /* Ending month*/
  end

   /* ------------------------------------------------------------*/
   /* If end of cursor, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FG0BW00.FG0BWSWC == "Y") /* End of cursor*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Check the existence of the indicator at the specified level*/
   /* ------------------------------------------------------------*/
  if (FFWREC.YSMXDV == "10") /* Domestic*/

    FG0BW00.FG0BWLNX = "N"; /* Init. line wrksht exist flag*/
    FG0BW00.FG0BWMLX = "N"; /* Init. mo line wrksht exist flg*/
    FG0BW00.FG0BWTPX = "N"; /* Init. type wrksht exist flag*/
    FG0BW00.FG0BWCAX = "N"; /* Init. cat wrksht exist flag*/
    FG0BW00.FG0BWMCX = "N"; /* Init. mo cat wrksht exist flag*/
    FG0BW00.FG0BWGPX = "N"; /* Init. grp wrksht exist flag*/
    FG0BW00.FG0BWMGX = "N"; /* Init. mo grp wrksht exist flag*/
    FG0BW00.FG0BWCLX = "N"; /* Init. clr wrksht exist flag*/
    FG0BW00.FG0BWMSX = "N"; /* Init. mo clr wrksht exist flag*/

    if (FFWREC.YPGCD > "  "
     && FFWREC.XPCCD > "  "
     && FFWREC.SYBSTGNB > "      ")
      FG0B141(); /* Process specified style group*/
      FG0B145(); /* Reset flags in display storage*/
      if (FG0BW00.FG0BWGPX == "Y") /* If wrksht found for sgrp*/
        FG0B146(); /* Save non-flag row data*/
        FG0BW00.FG0BWIXM = FG0BW00.FG0BWIXM + 1; /* Incremrnt line idx*/
      end
    end

    if (FFWREC.YPGCD > "  "
     && FFWREC.XPCCD > "  "
     && FFWREC.SYBSTGNB == "      ")
      FG0B142(); /* Process specified type group & cat*/
      FG0B145(); /* Reset flags in display storage*/
      if (FG0BW00.FG0BWCAX == "Y") /* If wrksht found for cat*/
        FG0B146(); /* Save non-flag row data*/
        FG0BW00.FG0BWIXM = FG0BW00.FG0BWIXM + 1; /* Increment line idx*/
      end
    end

    if (FFWREC.XPLCD > "  "
     && FFWREC.YPGCD > "  "
     && FFWREC.XPCCD == "  "
     && FFWREC.SYBSTGNB == "      ")
      FG0B143(); /* Process specified line & type group*/
      FG0B145(); /* Reset flags in display storage*/
      FG0B146(); /* Save non-flag row data*/
      FG0BW00.FG0BWIXM = FG0BW00.FG0BWIXM + 1; /* Increment line idx*/
    end

    if (FFWREC.XPLCD > "  "
     && FFWREC.YPGCD == "  ")
      FG0B144(); /* Process specified line*/
      FG0B145(); /* Reset flags in display storage*/
      FG0B146(); /* Save non-flag row data*/
      FG0BW00.FG0BWIXM = FG0BW00.FG0BWIXM + 1; /* Increment line idx*/
    end

    if (FFWREC.YPGCD > "  "
     && FFWREC.XPLCD == "  "
     && FFWREC.XPCCD == "  "
     && FFWREC.SYBSTGNB == "      ")
      FG0BW01.FFELINFL[FG0BWIXM] = FFEREC.FFELINFL;
      FG0BW01.FFELMOFL[FG0BWIXM] = FFEREC.FFELMOFL;
      FG0BW01.FFECATFL[FG0BWIXM] = FFEREC.FFECATFL;
      FG0BW01.FFECMOFL[FG0BWIXM] = FFEREC.FFECMOFL;
      FG0BW01.FFEGRPFL[FG0BWIXM] = FFEREC.FFEGRPFL;
      FG0BW01.FFEGMOFL[FG0BWIXM] = FFEREC.FFEGMOFL;
      FG0BW01.FFECLRFL[FG0BWIXM] = FFEREC.FFECLRFL;
      FG0BW01.FFESMOFL[FG0BWIXM] = FFEREC.FFESMOFL;
      FG0B146(); /* Save non-flag row data*/
      FG0BW00.FG0BWIXM = FG0BW00.FG0BWIXM + 1; /* Increment line idx*/
    end

  end


end // end FG0B140

// Process specified style group
Function FG0B141()

   /* ------------------------------------------------------------*/
   /* If type group and category are specified, check the*/
   /* type group flag, category flag and month category flag.*/
   /* If the flag is on, then check the existence of the type*/
   /* group worksheet, category worksheet or monthly category*/
   /* worksheet.*/

   /* If product line was specified, check the line worksheet and*/
   /* monthly line worksheet as well.*/

   /* ------------------------------------------------------------*/

  if (FFWREC.XPLCD > "  ") /* Product line specified*/

    if (FFEREC.FFELINFL == "Y") /* Fcst exist at line level*/

      FG0BS50(); /* Check line worksheet*/

    end

    if (FFEREC.FFELMOFL == "Y") /* Fcst exist at mo line level*/

      FG0BS51(); /* Check month line worksheet*/

    end

    if (FFEREC.FFETYPFL == "Y") /* Fcst exist at type grp level*/

      FG0BS40(); /* Check type group worksheet*/

    end

  end

  if (FFEREC.FFECATFL == "Y") /* Fcst exist at category level*/

    FG0BS30(); /* Check category worksheet*/

  end

  if (FFEREC.FFECMOFL == "Y") /* Fcst exist at category level*/

    FG0BS31(); /* Check monthly category worksheet*/

  end

   /* ------------------------------------------------------------*/
   /* If style group is specified, check the existence of the*/
   /* style gorup worksheet, monthly style group worksheet, style*/
   /* color worksheet and monthly style color worksheet.*/
   /* ------------------------------------------------------------*/

  if (FFEREC.FFEGRPFL == "Y")

    FG0BS20(); /* Check style group worksheet*/

  end

  if (FFEREC.FFEGMOFL == "Y")

    FG0BS21(); /* Check monthly style group worksheet*/

  end

  FG0BW00.FG0BWSWX = "N"; /* Initialize end of cursor switch*/
  FG0BW00.FG0BWIDX = 1;

  while (FG0BW00.FG0BWSWX == "N" /* Until end of cursor*/
   && FG0BW00.FG0BWIDX <= 100 /* or end of table*/
   && FG0BW04.SY1STNBR[FG0BWIDX] != " ")

    if (FFEREC.FFECLRFL == "Y" /* Color wrksht exists*/
     && FG0BW00.FG0BWCLX == "N") /* Color wrksht not found yet*/

      FF3REC.SY1STNBR = FG0BW04.SY1STNBR[FG0BWIDX]; /* style number*/
      FF3REC.SY2CLRID = FG0BW04.SY2CLRID[FG0BWIDX]; /* color id*/
      FF3REC.XDMCD = FG0BW04.XDMCD[FG0BWIDX]; /* dim code*/

      FG0BS10(); /* Check style color worksheet*/

    end

    if (FFEREC.FFESMOFL == "Y" /* Mo clr wrksht exists*/
     && FG0BW00.FG0BWMSX == "N") /* Mo clr wrksht not found yet*/

      FF3REC.SY1STNBR = FG0BW04.SY1STNBR[FG0BWIDX]; /* style number*/
      FF3REC.SY2CLRID = FG0BW04.SY2CLRID[FG0BWIDX]; /* color id*/
      FF3REC.XDMCD = FG0BW04.XDMCD[FG0BWIDX]; /* dim code*/

      FG0BS11(); /* Check monthly style color worksheet*/

    end

    if (FFEREC.FFECLRFL == "Y"  /* Color wrksht exists*/
     && FFEREC.FFESMOFL == "Y"  /* Mo clr wrksht exists*/
     && FG0BW00.FG0BWCLX == "Y" /* Color worksheet found*/
     && FG0BW00.FG0BWMSX == "Y") /* Monthly color worksheet found*/

      FG0BW00.FG0BWSWX = "Y"; /* End the process*/

    else
      if (FFEREC.FFECLRFL == "Y" /* Color wrksht exists*/
       && FG0BW00.FG0BWCLX == "Y") /* Color worksheet found*/

        FG0BW00.FG0BWSWX = "Y"; /* End the process*/

      else
        if (FFEREC.FFESMOFL == "Y" /* Mo clr wrksht exists*/
         && FG0BW00.FG0BWMSX == "Y") /* Monthly color worksheet found*/

          FG0BW00.FG0BWSWX = "Y"; /* End the process*/

        end
      end
    end

    FG0BW00.FG0BWIDX = FG0BW00.FG0BWIDX + 1;

  end


end // end FG0B141

// Process specified type & cat
Function FG0B142()

   /* ------------------------------------------------------------*/
   /* If type group and category are specified, check the*/
   /* type group flag, category flag and month category flag.*/
   /* If the flag is on, then check the existence of the type*/
   /* group worksheet, category worksheet or monthly category*/
   /* worksheet.*/

   /* Also need to check style group worksheet, monthly style*/
   /* group worksheet, style color worksheet and monthly style*/
   /* color worksheet. Use VFFSTY001 table to get all the*/
   /* related style groups and style colors.*/

   /* If product line was specified, check the line worksheet and*/
   /* monthly line worksheet as well.*/

   /* ------------------------------------------------------------*/

  if (FFWREC.XPLCD > "  ") /* Product line specified*/

    if (FFEREC.FFELINFL == "Y") /* Fcst exist at line level*/

      FG0BS50(); /* Check line worksheet*/

    end

    if (FFEREC.FFELMOFL == "Y") /* Fcst exist at mo line level*/

      FG0BS51(); /* Check month line worksheet*/

    end

    if (FFEREC.FFETYPFL == "Y") /* Fcst exist at type grp level*/

      FG0BS40(); /* Check type group worksheet*/

    end

  end

  if (FFEREC.FFECATFL == "Y") /* Fcst exist at category level*/

    FG0BS30(); /* Check category worksheet*/

  end

  if (FFEREC.FFECMOFL == "Y") /* Fcst exist at category level*/

    FG0BS31(); /* Check monthly category worksheet*/

  end

  if (FFWREC.YSMXDV == "10") /* Domestic*/
    if (FFEREC.FFEGRPFL == "Y" /* Fcst exist at sty grp level*/
     || FFEREC.FFEGMOFL == "Y") /* Fcst exist at month grp lvl*/

      FG0BS16(); /* Process Domestic style group*/

    end

  else

    if (FFEREC.FFESMOFL == "Y") /* Fcst exist at month clr lvl*/
      FG0BS17(); /* Process NIL style color*/
    end

  end


end // end FG0B142

// Process specified line & type
Function FG0B143()

   /* ------------------------------------------------------------*/
   /* If line and type group are specified, check the existence*/
   /* of the line worksheet and type group worksheet, look up the*/
   /* VFFXRF01 table to obtain all related categories, use each*/
   /* category to check the cateogry flag and month category*/
   /* flag. If the flag is on, then check the existence of the*/
   /* category worksheet or category monthly worksheet.*/
   /* ------------------------------------------------------------*/

  if (FFEREC.FFELINFL == "Y")
                                   /* Fcst exist at type group level*/

    FG0BS50(); /* Check line worksheet*/

  end

  if (FFEREC.FFELMOFL == "Y")
                                   /* Fcst exist at type group level*/

    FG0BS51(); /* Check monthly line worksheet*/

  end

  if (FFEREC.FFETYPFL == "Y")
                                   /* Fcst exist at type group level*/

    FG0BS40(); /* Check type group worksheet*/

  end

  if (FFEREC.FFECATFL == "Y" /* Fcst exist at category level*/
   || FFEREC.FFECMOFL == "Y") /* Fcst exist at month cat level*/

    FG0BS80(); /* Select and open cursor for VFFXRF01*/

    FG0BW00.FG0BWSWX = "N"; /* Initialize the end of cursor switch*/
    FG0BW00.FG0BWCAX = "N"; /* Initialize the forecast exist flag*/
    FG0BW00.FG0BWMCX = "N"; /* Initialize the monthly fcst exst flg*/

    FG0BS81(); /* Fetch next row*/

    while (FG0BW00.FG0BWSWX == "N") /* Until end of cursor*/


      if (FFEREC.FFECATFL == "Y" /* Cat wrksht exists*/
       && FG0BW00.FG0BWCAX == "N") /* Cat wrksht not found yet*/

        FG0BS30(); /* Check category worksheet*/

      end

      if (FFEREC.FFECMOFL == "Y" /* Mo cat wrksht exists*/
       && FG0BW00.FG0BWMCX == "N") /* Mo cat wrksht not found yet*/

        FG0BS31(); /* Check monthly category worksheet*/

      end

      if (FG0BW00.FG0BWCAX == "Y" /* Fcst worksheet found*/
       && FG0BW00.FG0BWMCX == "Y") /* Monthly fcst worksheet found*/

        FG0BW00.FG0BWSWX = "Y"; /* End the process*/

      end

      FG0BS81(); /* Fetch next row*/

    end

    FG0BS82(); /* Close the cursor for VFFXRF01*/

  end


end // end FG0B143

// Process specified line
Function FG0B144()

   /* ------------------------------------------------------------*/
   /* If product line is specified and the header shows forecast*/
   /* exists at line level, then check the existence of the*/
   /* worksheet for the specified line.*/
   /* ------------------------------------------------------------*/

  if (FFEREC.FFELINFL == "Y") /* Forecast exist at line level*/

    FG0BS50(); /* Check line worksheet*/

  end

  if (FFEREC.FFELMOFL == "Y")
                                   /* Fcst exist at line month level*/

    FG0BS51(); /* Check monthly line worksheet*/

  end


end // end FG0B144

// Set flags in display storage
Function FG0B145()

  if (FG0BW00.FG0BWLNX == "N") /* Line worksheet not exist*/
    FG0BW01.FFELINFL[FG0BWIXM] = "N";
  else
    FG0BW01.FFELINFL[FG0BWIXM] = FFEREC.FFELINFL;
  end

  if (FG0BW00.FG0BWMLX == "N") /* Monthly line worksheet not exist*/
    FG0BW01.FFELMOFL[FG0BWIXM] = "N";
  else
    FG0BW01.FFELMOFL[FG0BWIXM] = FFEREC.FFELMOFL;
  end

  if (FG0BW00.FG0BWCAX == "N") /* Category worksheet not exist*/
    FG0BW01.FFECATFL[FG0BWIXM] = "N";
  else
    FG0BW01.FFECATFL[FG0BWIXM] = FFEREC.FFECATFL;
  end

  if (FG0BW00.FG0BWMCX == "N") /* Monthly category worksheet not exist*/
    FG0BW01.FFECMOFL[FG0BWIXM] = "N";
  else
    FG0BW01.FFECMOFL[FG0BWIXM] = FFEREC.FFECMOFL;
  end

  if (FG0BW00.FG0BWGPX == "N") /* Style group worksheet not exist*/
    FG0BW01.FFEGRPFL[FG0BWIXM] = "N";
  else
    FG0BW01.FFEGRPFL[FG0BWIXM] = FFEREC.FFEGRPFL;
  end

  if (FG0BW00.FG0BWMGX == "N") /* Monthly sty grp worksheet not exist*/
    FG0BW01.FFEGMOFL[FG0BWIXM] = "N";
  else
    FG0BW01.FFEGMOFL[FG0BWIXM] = FFEREC.FFEGMOFL;
  end

  if (FG0BW00.FG0BWCLX == "N") /* Style color worksheet not exist*/
    FG0BW01.FFECLRFL[FG0BWIXM] = "N";
  else
    FG0BW01.FFECLRFL[FG0BWIXM] = FFEREC.FFECLRFL;
  end

  if (FG0BW00.FG0BWMSX == "N") /* Monthly sty clr worksheet not exist*/
    FG0BW01.FFESMOFL[FG0BWIXM] = "N";
  else
    FG0BW01.FFESMOFL[FG0BWIXM] = FFEREC.FFESMOFL;
  end

  if (FG0BW00.FG0BWTPX == "N") /* Type group worksheet not exist*/
    FG0BW01.FFETYPFL[FG0BWIXM] = "N";
    FG0BW01.FFECATFL[FG0BWIXM] = "N";
    FG0BW01.FFECMOFL[FG0BWIXM] = "N";
    FG0BW01.FFEGRPFL[FG0BWIXM] = "N";
    FG0BW01.FFEGMOFL[FG0BWIXM] = "N";
    FG0BW01.FFECLRFL[FG0BWIXM] = "N";
    FG0BW01.FFESMOFL[FG0BWIXM] = "N";
  end


end // end FG0B145

// Save non-flag data into W01
Function FG0B146()
   /* ------------------------------------------------------------*/
   /* Save non-flag row data into display storage.*/
   /* ------------------------------------------------------------*/

  FG0BW01.FFEWSNBR[FG0BWIXM] = FFEREC.FFEWSNBR; /* Worksheet number*/

  FG0BW01.FFABEGMO[FG0BWIXM] = FFEREC.FFABEGMO; /* Beginning month*/
  FG0BW01.FFAENDMO[FG0BWIXM] = FFEREC.FFAENDMO; /* Ending month*/

  FG0BW01.ZZZSDT[FG0BWIXM] = FFEREC.ZZZSDT; /* Created date*/
  FG0BW01.ZZZSTM[FG0BWIXM] = FFEREC.ZZZSTM; /* Created time*/

  FG0BW01.XXXUSRID[FG0BWIXM] = FFEREC.XXXUSRID; /* User id*/

end // end FG0B146

// Add page to temporary storage
Function FG0B150()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FG0BW01.XXXTSLEN = FG0BW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FG0BW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FG0BW01 empty; /* M001 display storage*/

    FG0BW00.FG0BWIXM = 1; /* Display line index*/

    FG0BW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "150"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0B150

// Close selected set cursor
Function FG0B160()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3850" ("C2", SQLCA, FFEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "160"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWDGRP01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0B160

// Re-organize tsq work area w01
Function FG0B170()

  while (FG0BW00.FG0BWIX2 <= 12 /* Until screen is full*/
   && FG0BW00.XXXTSPAG <= FG0BW00.TA5TSQIX) /* Reach the last page*/

    if (FG0BW00.FG0BWIXM > 13
     || FG0BW01.FFABEGMO[FG0BWIXM] == 0) /* or end of data*/

      if (FG0BW00.XXXTSPAG < FG0BW00.TA5TSQIX) /* Reach the last page*/

        FG0BW00.FG0BWIXM = 1; /* Initialize w01 index*/

        FG0BW00.XXXTSPAG = FG0BW00.XXXTSPAG + 1;
        FG0B211(); /* Obtain tsq page*/
        FG0BW02.FFZBYYMM = FG0BW01.FFZBYYMM; /* Beginning month*/
        FG0BW02.FFZEYYMM = FG0BW01.FFZEYYMM; /* Ending month*/

      else

        FG0BW00.XXXTSPAG = FG0BW00.XXXTSPAG + 1;

      end

    else

      if (FG0BW01.FFELINFL[FG0BWIXM] != "Y"
       && FG0BW01.FFETYPFL[FG0BWIXM] != "Y"
       && FG0BW01.FFECATFL[FG0BWIXM] != "Y"
       && FG0BW01.FFEGRPFL[FG0BWIXM] != "Y"
       && FG0BW01.FFECLRFL[FG0BWIXM] != "Y"
       && FG0BW01.FFELMOFL[FG0BWIXM] != "Y"
       && FG0BW01.FFECMOFL[FG0BWIXM] != "Y"
       && FG0BW01.FFEGMOFL[FG0BWIXM] != "Y"
       && FG0BW01.FFESMOFL[FG0BWIXM] != "Y")

      else

        FG0BW02.FFEWSNBR[FG0BWIX2] = FG0BW01.FFEWSNBR[FG0BWIXM];
        FG0BW02.FFABEGMO[FG0BWIX2] = FG0BW01.FFABEGMO[FG0BWIXM];
        FG0BW02.FFAENDMO[FG0BWIX2] = FG0BW01.FFAENDMO[FG0BWIXM];

        FG0BW02.ZZZSDT[FG0BWIX2] = FG0BW01.ZZZSDT[FG0BWIXM];
        FG0BW02.ZZZSTM[FG0BWIX2] = FG0BW01.ZZZSTM[FG0BWIXM];

        FG0BW02.XXXUSRID[FG0BWIX2] = FG0BW01.XXXUSRID[FG0BWIXM];

        if (FG0BW01.FFELINFL[FG0BWIXM] == "Y") /* Forecast exists*/
          FG0BW02.FFELINFL[FG0BWIX2] = FG0BW01.FFELINFL[FG0BWIXM];
        end

        if (FG0BW01.FFETYPFL[FG0BWIXM] == "Y") /* Forecast exists*/
          FG0BW02.FFETYPFL[FG0BWIX2] = FG0BW01.FFETYPFL[FG0BWIXM];
        end

        if (FG0BW01.FFECATFL[FG0BWIXM] == "Y") /* Forecast exists*/
          FG0BW02.FFECATFL[FG0BWIX2] = FG0BW01.FFECATFL[FG0BWIXM];
        end

        if (FG0BW01.FFEGRPFL[FG0BWIXM] == "Y") /* Forecast exists*/
          FG0BW02.FFEGRPFL[FG0BWIX2] = FG0BW01.FFEGRPFL[FG0BWIXM];
        end

        if (FG0BW01.FFECLRFL[FG0BWIXM] == "Y") /* Forecast exists*/
          FG0BW02.FFECLRFL[FG0BWIX2] = FG0BW01.FFECLRFL[FG0BWIXM];
        end

        if (FG0BW01.FFELMOFL[FG0BWIXM] == "Y") /* Forecast exists*/
          FG0BW02.FFELMOFL[FG0BWIX2] = FG0BW01.FFELMOFL[FG0BWIXM];
        end

        if (FG0BW01.FFECMOFL[FG0BWIXM] == "Y") /* Forecast exists*/
          FG0BW02.FFECMOFL[FG0BWIX2] = FG0BW01.FFECMOFL[FG0BWIXM];
        end

        if (FG0BW01.FFEGMOFL[FG0BWIXM] == "Y") /* Forecast exists*/
          FG0BW02.FFEGMOFL[FG0BWIX2] = FG0BW01.FFEGMOFL[FG0BWIXM];
        end

        if (FG0BW01.FFESMOFL[FG0BWIXM] == "Y") /* Forecast exists*/
          FG0BW02.FFESMOFL[FG0BWIX2] = FG0BW01.FFESMOFL[FG0BWIXM];
        end

        FG0BW00.FG0BWIX2 = FG0BW00.FG0BWIX2 + 1; /* Increment map index*/

      end

      FG0BW00.FG0BWIXM = FG0BW00.FG0BWIXM + 1; /* Increment line index*/

    end

  end

end // end FG0B170

// Insert new page to W02 tsq
Function FG0B180()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FG0BW02.XXXTSLEN = FG0BW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FG0BW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FG0BW02 empty; /* M001 display storage*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "216"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0B180

// Format and converse the map
Function FG0B200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FG0BW00.FG0BWSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FG0BW00.FG0BWSWF == "Y") /* Map must be formatted*/
      FG0B210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FG0BM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FG0BM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG0BM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FG0BM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FG0BM001 alarm; /* Indicate sound alarm*/

  end

  converse FG0BM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = FG0BM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG0BM001.CAITEM; /* Application data*/


end // end FG0B200

// Format the display data
Function FG0B210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FG0BM001 initial; /* M001 input/output area*/

  FG0BW00.FG0BWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (FG0BW00.TA5TSQIX > 0 /* Pages were formatted*/
   && FG0BW00.FG0BWSWR == "N") /* 2nd tsq storage is saved*/

    FG0B212(); /* Obtain temporary storage page*/

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set FG0BM001.XXXLITPG skip; /* "PAGE" literal*/
    FG0BM001.XXXTSPAG = FG0BW00.XXXTSPAG - FG0BW00.FG0BWTSQ;
    set FG0BM001.XXXLITOF skip; /* "OF" literal*/
    FG0BM001.TA5TSQIX = FG0BW00.TA5TSQIX - FG0BW00.FG0BWTSQ;

  end


   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  FG0BM001.FFZBYYMM = FFWREC.FFABEGMO; /* Beginning month*/
  FG0BM001.FFZEYYMM = FFWREC.FFAENDMO; /* Ending month*/

  FG0BM001.XCTCD = FFWREC.XCTCD; /* Foreign country*/
  FG0BM001.XCTABRV = FFWREC.XCTCD; /* Abbreviation*/

  FG0BM001.YSMXDV = FFWREC.YSMXDV; /* Division group*/
  FG0BM001.YSMSMDSC = FFWREC.YSMSMDSC; /* Abbreviation*/

  FG0BM001.XPLCD = FFWREC.XPLCD; /* Product line*/
  FG0BM001.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/

  FG0BM001.YPGCD = FFWREC.YPGCD; /* Type group*/
  FG0BM001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/

  FG0BM001.XPCCD = FFWREC.XPCCD; /* Product category*/
  FG0BM001.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/

  FG0BM001.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  FG0BM001.SYBSTGNM = FFWREC.SYBSTGNM; /* Style group name*/

  FG0BW00.FG0BWIXM = 1; /* Initialize line index*/
  FG0BW00.FG0BWIX2 = 1; /* Initialize map index*/

  while (FG0BW00.FG0BWIX2 <= 12         /* Until screen is full*/
   && FG0BW02.FFABEGMO[FG0BWIXM] > 0 /* or end of data*/
   && FG0BW00.TA5TSQIX > 0           /* formated data*/
   && FG0BW00.FG0BWSWR == "N") /* 2nd tsq storage is saved*/

    set FG0BM001.FG0BMDEL[FG0BWIX2] normal; /* delete option*/

    FG0BM001.FG0BM-USRID[FG0BWIX2] = FG0BW02.XXXUSRID[FG0BWIXM];

    /* MOVE FG0BW02.FFABEGMO(FG0BWIXM) TO FG0BM001.FFABEGMO(FG0BWIX2);*/
    /* SET FG0BM001.FG0BMRDL(FG0BWIX2) AUTOSKIP; /* Range dash literal*/
    /* MOVE FG0BW02.FFAENDMO(FG0BWIXM) TO FG0BM001.FFAENDMO(FG0BWIX2);*/

    FG0BM001.ZZZSDT[FG0BWIX2] = FG0BW02.ZZZSDT[FG0BWIXM];
    FG0BM001.ZZZSTM[FG0BWIX2] = FG0BW02.ZZZSTM[FG0BWIXM];

    if (FG0BW02.FFELINFL[FG0BWIXM] == "Y") /* Forecast exists*/
      FG0BM001.FFELINFL[FG0BWIX2] = FG0BW02.FFELINFL[FG0BWIXM];
      set FG0BM001.FG0BMLIN[FG0BWIX2] normal; /* Selection flag*/
    end

    if (FG0BW02.FFETYPFL[FG0BWIXM] == "Y") /* Forecast exists*/
      FG0BM001.FFETYPFL[FG0BWIX2] = FG0BW02.FFETYPFL[FG0BWIXM];
    end

    if (FG0BW02.FFECATFL[FG0BWIXM] == "Y") /* Forecast exists*/
      FG0BM001.FFECATFL[FG0BWIX2] = FG0BW02.FFECATFL[FG0BWIXM];
      if (FG0BM001.XPLCD > " ") /* Product line was entered*/
        set FG0BM001.FG0BMCAT[FG0BWIX2] normal; /* Selection flag*/
      else
        set FG0BM001.FG0BMCAT[FG0BWIX2] protect, invisible; /* Selection flag*/
      end
    end

    if (FG0BW02.FFEGRPFL[FG0BWIXM] == "Y") /* Forecast exists*/
      FG0BM001.FFEGRPFL[FG0BWIX2] = FG0BW02.FFEGRPFL[FG0BWIXM];
      if (FG0BM001.XPCCD > " ") /* Category was entered*/
        set FG0BM001.FG0BMGRP[FG0BWIX2] normal; /* Selection flag*/
      else
        set FG0BM001.FG0BMGRP[FG0BWIX2] protect, invisible; /* Selection flag*/
      end
    end

    if (FG0BW02.FFECLRFL[FG0BWIXM] == "Y") /* Forecast exists*/
      FG0BM001.FFECLRFL[FG0BWIX2] = FG0BW02.FFECLRFL[FG0BWIXM];
      if (FG0BM001.XPCCD > " " /* Category was entered*/
       || FG0BM001.SYBSTGNB > " ") /* Style group was entered*/
        set FG0BM001.FG0BMCLR[FG0BWIX2] normal; /* Selection flag*/
      else
        set FG0BM001.FG0BMCLR[FG0BWIX2] protect, invisible; /* Selection flag*/
      end
    end

    if (FG0BW02.FFELMOFL[FG0BWIXM] == "Y") /* Forecast exists*/
      FG0BM001.FFELMOFL[FG0BWIX2] = FG0BW02.FFELMOFL[FG0BWIXM];
      if (FG0BM001.XPLCD > " ") /* Product line was entered*/
        set FG0BM001.FG0BMLMO[FG0BWIX2] normal; /* Selection flag*/
      else
        set FG0BM001.FG0BMLMO[FG0BWIX2] protect, invisible; /* Selection flag*/
      end
    end

    if (FG0BW02.FFECMOFL[FG0BWIXM] == "Y") /* Forecast exists*/
      FG0BM001.FFECMOFL[FG0BWIX2] = FG0BW02.FFECMOFL[FG0BWIXM];
      if (FG0BM001.XPLCD > " ") /* Product line was entered*/
        set FG0BM001.FG0BMCMO[FG0BWIX2] normal; /* Selection flag*/
      else
        set FG0BM001.FG0BMCMO[FG0BWIX2] protect, invisible; /* Selection flag*/
      end
    end

    if (FG0BW02.FFEGMOFL[FG0BWIXM] == "Y") /* Forecast exists*/
      FG0BM001.FFEGMOFL[FG0BWIX2] = FG0BW02.FFEGMOFL[FG0BWIXM];
      if (FG0BM001.XPCCD > " ") /* Category was entered*/
        set FG0BM001.FG0BMGMO[FG0BWIX2] normal; /* Selection flag*/
      else
        set FG0BM001.FG0BMGMO[FG0BWIX2] protect, invisible; /* Selection flag*/
      end
    end

    if (FG0BW02.FFESMOFL[FG0BWIXM] == "Y") /* Forecast exists*/
      FG0BM001.FFESMOFL[FG0BWIX2] = FG0BW02.FFESMOFL[FG0BWIXM];
      if (FG0BM001.XPCCD > " " /* Category was entered*/
       || FG0BM001.SYBSTGNB > " ") /* Style group was entered*/
        set FG0BM001.FG0BMSMO[FG0BWIX2] normal; /* Selection flag*/
      else
        set FG0BM001.FG0BMSMO[FG0BWIX2] protect, invisible; /* Selection flag*/
      end
    end

    FG0BW00.FG0BWIX2 = FG0BW00.FG0BWIX2 + 1; /* Increment map index*/
    FG0BW00.FG0BWIXM = FG0BW00.FG0BWIXM + 1; /* Increment line index*/

  end

end // end FG0B210

// Read tsq page w01
Function FG0B211()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FG0BW01.XXXTSLEN = FG0BW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FG0BW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FG0BW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "211"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0B211

// Read tsq page w02
Function FG0B212()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FG0BW02.XXXTSLEN = FG0BW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FG0BW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FG0BW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "212"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0B212

// Check attention identifier
Function FG0B300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (FG0BW00.FG0BWSWR == "Y") /* Request for data*/
      set FG0BW01 empty; /* M001 display storage*/
      set FG0BW02 empty;
    end

    FG0BW00.FG0BWSWF = "Y"; /* Format the map switch*/
    FG0BW00.FG0BWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FG0BM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (FG0BM001.CATOAP == "FG0P"
       || FG0BM001.CATOAP == "FG0Q"
       || FG0BM001.CATOAP == "FG0R"
       || FG0BM001.CATOAP == "FG0S"
       || FG0BM001.CATOAP == "FG0G")

        set FG0BM001.CATOAP cursor, bold; /* Highlight*/
        FFWREC.XXXMODID = "300"; /* Module identification*/
        converseLib.validationFailed(189); /* No fast path allowed*/

      else

        FG0B110(); /* Purge temporary storage*/

        FFWREC.FFEWSNBR = 0; /* Clear worksheet number*/

        XSFFS01(); /* Exit to another application*/

        set FG0BM001.CATOAP cursor, bold; /* Highlight*/

      end

    else

      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG0BM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FG0A"; /* TO application*/
    end

    FG0B110(); /* Purge temporary storage*/

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FG0B300

// Reset highlighted fields
Function FG0B400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FG0BM001.FFZBYYMM initialAttributes; /* Beginning month*/
  set FG0BM001.FFZEYYMM initialAttributes; /* Ending month*/
  set FG0BM001.XCTCD initialAttributes; /* Country*/
  set FG0BM001.YSMXDV initialAttributes; /* Division group*/
  set FG0BM001.XPLCD initialAttributes; /* Product line*/
  set FG0BM001.YPGCD initialAttributes; /* Type group*/
  set FG0BM001.XPCCD initialAttributes; /* Category*/
  set FG0BM001.SYBSTGNB initialAttributes; /* Style group*/

  FG0BW00.FG0BWIXM = 1; /* Initialize line index*/

  while (FG0BW00.FG0BWIXM <= 12 /* Until end of lines*/
   && FG0BM001.ZZZSDT[FG0BWIXM] > 0) /* or end of display*/

    set FG0BM001.FG0BMDEL[FG0BWIXM] normal; /* delete option*/

    if (FG0BM001.FFELINFL[FG0BWIXM] == "Y") /* Forecast exists*/
      set FG0BM001.FG0BMLIN[FG0BWIXM] normal; /* Reset select flag*/
    end

    if (FG0BM001.FFECATFL[FG0BWIXM] == "Y") /* Forecast exists*/
      if (FG0BM001.XPLCD > " ") /* product line was entered*/
        set FG0BM001.FG0BMCAT[FG0BWIXM] normal; /* Reset select flag*/
      else
        set FG0BM001.FG0BMCAT[FG0BWIXM] protect, invisible; /* Reset sel flag*/
      end
    end

    if (FG0BM001.FFEGRPFL[FG0BWIXM] == "Y") /* Forecast exists*/
      if (FG0BM001.XPCCD > " ") /* Category was entered*/
        set FG0BM001.FG0BMGRP[FG0BWIXM] normal; /* Reset select flag*/
      else
        set FG0BM001.FG0BMGRP[FG0BWIXM] protect, invisible; /* Reset sel flag*/
      end
    end

    if (FG0BM001.FFECLRFL[FG0BWIXM] == "Y") /* Forecast exists*/
      if (FG0BM001.XPCCD > " " /* Category was entered*/
       || FG0BM001.SYBSTGNB > " ") /* or style grp was entered*/
        set FG0BM001.FG0BMCLR[FG0BWIXM] normal; /* Reset select flag*/
      else
        set FG0BM001.FG0BMCLR[FG0BWIXM] protect, invisible; /* Reset sel flag*/
      end
    end

    if (FG0BM001.FFELMOFL[FG0BWIXM] == "Y") /* Forecast exists*/
      if (FG0BM001.XPLCD > " ") /* product line was entered*/
        set FG0BM001.FG0BMLMO[FG0BWIXM] normal; /* Reset select flag*/
      else
        set FG0BM001.FG0BMLMO[FG0BWIXM] protect, invisible; /* Reset select flag*/
      end
    end

    if (FG0BM001.FFECMOFL[FG0BWIXM] == "Y") /* Forecast exists*/
      if (FG0BM001.XPLCD > " ") /* product line was entered*/
        set FG0BM001.FG0BMCMO[FG0BWIXM] normal; /* Reset select flag*/
      else
        set FG0BM001.FG0BMCMO[FG0BWIXM] protect, invisible; /* Reset select flag*/
      end
    end

    if (FG0BM001.FFEGMOFL[FG0BWIXM] == "Y") /* Forecast exists*/
      if (FG0BM001.XPCCD > " ") /* Category was entered*/
        set FG0BM001.FG0BMGMO[FG0BWIXM] normal; /* Reset select flag*/
      else
        set FG0BM001.FG0BMGMO[FG0BWIXM] protect, invisible; /* Reset select flag*/
      end
    end

    if (FG0BM001.FFESMOFL[FG0BWIXM] == "Y") /* Forecast exists*/
      if (FG0BM001.XPCCD > " " /* Category was entered*/
       || FG0BM001.SYBSTGNB > " ") /* or style grp was entered*/
        set FG0BM001.FG0BMSMO[FG0BWIXM] normal; /* Reset select flag*/
      else
        set FG0BM001.FG0BMSMO[FG0BWIXM] protect, invisible; /* Reset sel flag*/
      end
    end

    FG0BW00.FG0BWIXM = FG0BW00.FG0BWIXM + 1; /* Increment line index*/

  end

  set FG0BM001.CATOAP initialAttributes; /* TO application*/
  set FG0BM001.CAITEM initialAttributes; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FG0BM001.XCTCD == "?" /* Country list requested*/
   || FG0BM001.XPLCD == "?" /* Product line list requested*/
   || FG0BM001.YPGCD == "?" /* Type group list requested*/
   || FG0BM001.XPCCD == "?") /* Category list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of country codes.*/
   /* ------------------------------------------------------------*/

  if (FG0BM001.XCTCD == "?") /* GPC list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CTRY"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCT01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FG0BM001.XCTCD = FFWREC.XCTCD; /* Restore prior code*/
      FG0BM001.XCTABRV = FFWREC.XCTABRV; /* Abbreviation*/
    else
      FG0BM001.XCTCD = XCTTBL.XCTCD[XX0XWPIX]; /* Selected code*/
      FG0BM001.XCTABRV = XCTTBL.XCTABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FG0BM001.XCTCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes*/
   /* ------------------------------------------------------------*/

  if (FG0BM001.XPLCD == "?") /* Product line list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  LIN"; /* Heading*/
    XX0XW02.XGPCD = XPLREC.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FG0BM001.XPLCD = FFWREC.XPLCD; /* Restore prior code*/
      FG0BM001.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/
    else
      FG0BM001.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FG0BM001.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FG0BM001.XPLCD cursor; /* Establish cursor position*/

  end


   /* ------------------------------------------------------------*/
   /* If requested, display the list of type group codes*/
   /* ------------------------------------------------------------*/

  if (FG0BM001.YPGCD == "?") /* Type group list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  TYPE GRP"; /* Heading*/
    XX0XW02.YPGFFFL = "Y";

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FG0BM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FG0BM001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
    else
      FG0BM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FG0BM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FG0BM001.YPGCD cursor; /* Establish cursor position*/

  end


   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes*/
   /* ------------------------------------------------------------*/

  if (FG0BM001.XPCCD == "?") /* Category list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CAT"; /* Heading*/
    XX0XW02.XGPCD = XPCREC.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FG0BM001.XPCCD = FFWREC.XPCCD; /* Restore prior code*/
      FG0BM001.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
    else
      FG0BM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FG0BM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FG0BM001.XPCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FG0B400

// Verify the entered data
Function FG0B500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FG0BM001.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FG0BM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    FG0B510(); /* Verify scroll request*/

  else

    /* ------------------------------------------------------------*/
     /* If the search key was changed, verify the key fields.*/
    /* ------------------------------------------------------------*/

    if (FG0BM001.FFZBYYMM != FG0BW02.FFZBYYMM /* Beginning date changed*/
     || FG0BM001.FFZEYYMM != FG0BW02.FFZEYYMM /* or ending date changed*/
     || FG0BM001.XCTCD != FFWREC.XCTCD        /* or foreign country changed*/
     || FG0BM001.YSMXDV != FFWREC.YSMXDV      /* or division group changed*/
     || FG0BM001.XPLCD != FFWREC.XPLCD        /* or product line changed*/
     || FG0BM001.YPGCD != FFWREC.YPGCD        /* or type group changed*/
     || FG0BM001.XPCCD != FFWREC.XPCCD        /* or category changed*/
     || FG0BM001.SYBSTGNB != FFWREC.SYBSTGNB) /* or style group changed*/

      FG0B520(); /* Verify the key fields*/

    else

      /* ------------------------------------------------------------*/
       /* Otherwise, if page was formatted, verify data in the line.*/
      /* ------------------------------------------------------------*/

      if (FG0BW00.TA5TSQIX > 0) /* Page was formatted*/

        FG0BW00.FG0BWIXM = 12; /* Initialize line index*/

        while (FG0BW00.FG0BWIXM > 0) /* Until end of lines*/

          FG0B530(); /* Verify data in the line*/

          FG0BW00.FG0BWIXM = FG0BW00.FG0BWIXM - 1; /* Decrement line number*/

        end

        if ("D" in FG0BM001.FG0BMDEL /* Deletion was requested*/
         && converseVar.eventKey is enter) /* and ENTER was pressed*/
          if (converseVar.validationMsgNum == 0) /* and no errors found*/

            if (FG0BW00.FG0BWSWD == "N") /* Delete message flag*/

              FFWREC.XXXMODID = "530"; /* Module identification*/
              converseLib.validationFailed(370); /* Confirm the delete action*/
              FG0BW00.FG0BWSWD = "Y"; /* Delete msg flag shown once*/

            end

          else
            if (converseVar.validationMsgNum == 430) /* Multiple type groups*/
              FG0BW00.FG0BWSWD = "Y"; /* Show delt msg*/
            end
          end

        end

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FG0B500

// Verify scroll request
Function FG0B510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  FG0BW00.FG0BWSCL = FG0BW00.FG0BWTSQ + 1;

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FG0BW00.XXXTSPAG == FG0BW00.FG0BWSCL) /* and no previous pages*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FG0BW00.XXXTSPAG >= FG0BW00.TA5TSQIX) /* and no more pages*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Highlight any selection that was entered.*/
   /* ------------------------------------------------------------*/

  FG0B511(); /* Highlight any selection*/

   /* ------------------------------------------------------------*/
   /* Highlight any key field that was changed.*/
   /* ------------------------------------------------------------*/

  if (FG0BM001.YSMXDV != FFWREC.YSMXDV) /* Division group changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG0BM001.YSMXDV cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/

  end

  if (FG0BM001.XCTCD != FFWREC.XCTCD) /* Foreign country changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG0BM001.XCTCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/

  end

  if (FG0BM001.FFZEYYMM != FG0BW02.FFZEYYMM) /* Ending date changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG0BM001.FFZEYYMM cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/

  end

  if (FG0BM001.FFZBYYMM != FG0BW02.FFZBYYMM) /* Beginning date changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG0BM001.FFZBYYMM cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/

  end


end // end FG0B510

// Highlight any selection
Function FG0B511()
   /* ------------------------------------------------------------*/
   /* Indicate an error for any selection that was entered.*/
   /* ------------------------------------------------------------*/

  FG0BW00.FG0BWIXM = 12; /* Initialize line index*/

  while (FG0BW00.FG0BWIXM > 0) /* Until end of lines*/

    if (FG0BM001.FG0BMDEL[FG0BWIXM] > " ") /* delection entered*/

      FFWREC.XXXMODID = "511"; /* Module identification*/
      set FG0BM001.FG0BMDEL[FG0BWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    if (FG0BM001.FG0BMSMO[FG0BWIXM] > " ") /* Selection entered*/

      FFWREC.XXXMODID = "511"; /* Module identification*/
      set FG0BM001.FG0BMSMO[FG0BWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    if (FG0BM001.FG0BMGMO[FG0BWIXM] > " ") /* Selection entered*/

      FFWREC.XXXMODID = "511"; /* Module identification*/
      set FG0BM001.FG0BMGMO[FG0BWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    if (FG0BM001.FG0BMCMO[FG0BWIXM] > " ") /* Selection entered*/

      FFWREC.XXXMODID = "511"; /* Module identification*/
      set FG0BM001.FG0BMCMO[FG0BWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    if (FG0BM001.FG0BMLMO[FG0BWIXM] > " ") /* Selection entered*/

      FFWREC.XXXMODID = "511"; /* Module identification*/
      set FG0BM001.FG0BMLMO[FG0BWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    if (FG0BM001.FG0BMCLR[FG0BWIXM] > " ") /* Selection entered*/

      FFWREC.XXXMODID = "511"; /* Module identification*/
      set FG0BM001.FG0BMCLR[FG0BWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    if (FG0BM001.FG0BMGRP[FG0BWIXM] > " ") /* Selection entered*/

      FFWREC.XXXMODID = "511"; /* Module identification*/
      set FG0BM001.FG0BMGRP[FG0BWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    if (FG0BM001.FG0BMCAT[FG0BWIXM] > " ") /* Selection entered*/

      FFWREC.XXXMODID = "511"; /* Module identification*/
      set FG0BM001.FG0BMCAT[FG0BWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    if (FG0BM001.FG0BMTYP[FG0BWIXM] > " ") /* Selection entered*/

      FFWREC.XXXMODID = "511"; /* Module identification*/
      set FG0BM001.FG0BMTYP[FG0BWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    if (FG0BM001.FG0BMLIN[FG0BWIXM] > " ") /* Selection entered*/

      FFWREC.XXXMODID = "511"; /* Module identification*/
      set FG0BM001.FG0BMLIN[FG0BWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/

    end

    FG0BW00.FG0BWIXM = FG0BW00.FG0BWIXM - 1; /* Decrement line number*/

  end


end // end FG0B511

// Verify the key fields
Function FG0B520()
   /* ------------------------------------------------------------*/
   /* Highlight any selection that was entered.*/
   /* ------------------------------------------------------------*/

  FG0B511(); /* Highlight any selection*/

   /* ------------------------------------------------------------*/
   /* Verify the style group number that was entered.*/
   /* ------------------------------------------------------------*/

  FG0B521();

   /* ------------------------------------------------------------*/
   /* Verify the category code that was entered.*/
   /* ------------------------------------------------------------*/

  FG0B522();

   /* ------------------------------------------------------------*/
   /* Verify the type group code that was entered.*/
   /* ------------------------------------------------------------*/

  FG0B523();

   /* ------------------------------------------------------------*/
   /* Verify the product line code that was entered.*/
   /* ------------------------------------------------------------*/

  FG0B524();

   /* ------------------------------------------------------------*/
   /* Verify the division group code that was entered.*/
   /* ------------------------------------------------------------*/

  set YSMREC empty; /* Row storage area*/

  YSMREC.YSMSUMCD = FG0BM001.YSMXDV; /* Division group code*/
  TA1REC.TA1PGMNM = "FG0B520 "; /* Calling program*/

  XSFFS20(); /* Verify division group*/

   /* ------------------------------------------------------------*/
   /* If not found, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Table row found*/

    FG0BM001.YSMSMDSC = YSMREC.YSMSMDSC; /* Abbreviation*/

  else

    FG0BM001.YSMSMDSC = " "; /* Abbreviation*/

    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FG0BM001.YSMXDV cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the foreign country code that was entered.*/
   /* ------------------------------------------------------------*/

  if (FG0BM001.XCTCD in XCTTBL.XCTCD /* Code in table*/
   && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    FG0BM001.XCTABRV = XCTTBL.XCTABRV[sysVar.arrayIndex]; /* Abbreviation*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    FG0BM001.XCTABRV = " "; /* Abbreviation*/

    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FG0BM001.XCTCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the foreign country code for NIL and DOM.*/
   /* ------------------------------------------------------------*/

  if (FG0BM001.YSMXDV == "20" /* Division group code*/
   && FG0BM001.XCTCD == "USA") /* Country code*/

    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FG0BM001.XCTCD cursor, bold; /* Highlight*/
    set FG0BM001.YSMXDV bold; /* Highlight*/
    converseLib.validationFailed(203); /* Inconsistent relationship*/

  end

  if (FG0BM001.YSMXDV == "10" /* Division group code*/
   && FG0BM001.XCTCD != "USA") /* Country code*/

    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FG0BM001.XCTCD cursor, bold; /* Highlight*/
    set FG0BM001.YSMXDV bold; /* Highlight*/
    converseLib.validationFailed(203); /* Inconsistent relationship*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the beginning and ending dates in the entered range.*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* Subroutine parameters*/

  FFZREC.FFZMONTH = 1; /* Beginning month offset*/
  FFZREC.FFZCHK12 = "Y"; /* Not limited to 12 months*/
  FFZREC.FFZBYYMM = FG0BM001.FFZBYYMM; /* Beginning date*/
  FFZREC.FFZEYYMM = FG0BM001.FFZEYYMM; /* Ending date*/

  XSFFS30(); /* Verify the range*/

   /* ------------------------------------------------------------*/
   /* If not zero return code, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FFZREC.FFZENDRC != "0") /* Ending date error*/

    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FG0BM001.FFZEYYMM cursor, bold; /* Highlight*/

    if (FFZREC.FFZENDRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else

      if (FFZREC.FFZENDRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else

        converseLib.validationFailed(151); /* Date is out of range*/

      end

    end

  end

  if (FFZREC.FFZBEGRC != "0") /* Beginning date error*/

    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FG0BM001.FFZBYYMM cursor, bold; /* Highlight*/

    if (FFZREC.FFZBEGRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else

      if (FFZREC.FFZBEGRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else

        converseLib.validationFailed(151); /* Date is out of range*/

      end

    end

  end


end // end FG0B520

// Verify style group entered
Function FG0B521()

  if (FG0BM001.SYBSTGNB == "      ") /* No style group entered*/

    FG0BM001.SYBSTGNM = "            "; /* Clear style group name*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the style group code that was entered.*/
   /* ------------------------------------------------------------*/

  set FF3REC empty; /* Row storage area*/

  FF3REC.SYBSTGNB = FG0BM001.SYBSTGNB; /* Style group number*/
  if (FG0BM001.YSMXDV == "10")
    FF3REC.YSMXDV = FG0BM001.YSMXDV; /* div group*/
  else
    FF3REC.YSMXDV = "*"; /* div group*/
  end

  FF3REC.YPGCD = FG0BM001.YPGCD; /* Type group code*/
  FF3REC.XLCCD = "*"; /* Life cycle code*/
  TA1REC.TA1PGMNM = "FG0B521"; /* Calling program*/

  XSFFS22(); /* Verify style group*/

   /* ------------------------------------------------------------*/
   /* If not found, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Table row found*/

    FG0BM001.SYBSTGNM = FF3REC.SYBSTGNM; /* Abbreviation*/

    if (FF3REC.XPCCD != FG0BM001.XPCCD
     || FF3REC.YPGCD != FG0BM001.YPGCD)

      FFWREC.XXXMODID = "521"; /* Module identification*/
      converseLib.validationFailed(203); /* Inconsistent relationship*/

      if (FF3REC.XPCCD != FG0BM001.XPCCD)

        set FG0BM001.XPCCD cursor, bold; /* Highlight*/
        set FG0BM001.SYBSTGNB bold; /* Highlight*/

      end

      if (FF3REC.YPGCD != FG0BM001.YPGCD)

        set FG0BM001.YPGCD cursor, bold; /* Highlight*/
        set FG0BM001.XPCCD bold; /* Highlight*/
        set FG0BM001.SYBSTGNB bold; /* Highlight*/

      end

    end

  else

    FG0BM001.SYBSTGNM = " "; /* Abbreviation*/

    FFWREC.XXXMODID = "521"; /* Module identification*/
    set FG0BM001.SYBSTGNB cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/

  end


end // end FG0B521

// Verify category entered
Function FG0B522()


  if (FG0BM001.XPCCD == "  ") /* No category entered*/

    FG0BM001.XPCABRV = "      "; /* Clear the abbreviation*/

    return; /* Return to the previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  XPCREC.XPCCD = FG0BM001.XPCCD;

  FG0BM001.XPCABRV = "******";

  if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* Code in table*/
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    FG0BM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];

    FG0BS90(); /* Select & open VFFXRF01 table*/

    FG0BS91(); /* Fetch the next in VFFXRF01 table*/

    FG0BS92(); /* Close the cursor in VFFXRF01 table*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    FFWREC.XXXMODID = "521"; /* Module identification*/

    set FG0BM001.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/

  end

end // end FG0B522

// Verify type group entered
Function FG0B523()

  if (FG0BM001.YPGCD == " ") /* No type group*/

    FG0BM001.YPGABRV = "      "; /* Clear the abbreviation*/

    return; /* Return to the previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  FG0BM001.YPGABRV = "******";

  if (FG0BM001.YPGCD in YPGTBL.YPGCD           /* Code in table*/
   && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
   && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and active for FF system*/

    FG0BM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    FFWREC.XXXMODID = "523"; /* Module identification*/

    set FG0BM001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/

  end

end // end FG0B523

// Verify product line entered
Function FG0B524()

  if (FG0BM001.XPLCD == "  ") /* No product line entered*/

    FG0BM001.XPLABRV = "      "; /* Clear the abbreviation*/

    return; /* Return to the previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  XPLREC.XPLCD = FG0BM001.XPLCD;

  FG0BM001.XPLABRV = "******";

  if (XPLREC.XPLKEY in XPLTBL.XPLKEY /* Code in table*/
   && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    FG0BM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];

    if (FG0BM001.XPCCD == " ") /* Category was not specified*/

      FG0BS93(); /* Select and open cursor for VFFXRF01*/

      FG0BS94(); /* Fetch the first row in VFFXRF01*/

      FG0BS95(); /* Close the cursor*/

    end

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    FFWREC.XXXMODID = "524"; /* Module identification*/

    set FG0BM001.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/

  end

end // end FG0B524

// Verify data in the line
Function FG0B530()
   /* ------------------------------------------------------------*/
   /* If deletion was requested, ensure an "d" was entered.*/
   /* ------------------------------------------------------------*/

  if (FG0BM001.FG0BMDEL[FG0BWIXM] == "D")
    if (FG0BM001.FG0BM-USRID[FG0BWIXM] != COMMAREA.CAUSERID
     && FG0BM001.FG0BM-USRID[FG0BWIXM] != " ")
      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FG0BM001.FG0BMDEL[FG0BWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(483); /* Indicate can't perform delete*/
    else
      if (FG0BW00.FG0BWSWD == "N") /* Delete msg not shown*/
        FG0BS84(); /* Get other YPG's*/
        if (FG0BW00.FG0BWYPG != " ") /* Other YPG's found*/
          FG0BS85(); /* Check WLTYP for other YPG's*/
          if (SQLCA.VAGen_SQLCODE == 0) /* Other YPG WLTYP found*/
            FFWREC.XXXMODID = "530"; /* Module identification*/
            set FG0BM001.FG0BMDEL[FG0BWIXM] cursor, bold; /* Highlight*/
            converseLib.validationFailed(430); /* Indicate multiple YPG's*/
          end
        end
      end
    end
  else
    if (FG0BM001.FG0BMDEL[FG0BWIXM] != " ")
      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FG0BM001.FG0BMDEL[FG0BWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Indicate invalid value entered*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If SMO was selected, ensure an "S" and no prior selections.*/
   /* ------------------------------------------------------------*/

  if (FG0BM001.FG0BMSMO[FG0BWIXM] > " ") /* Selection was entered*/

    if (FG0BM001.FG0BMSMO[FG0BWIXM] != "S") /* Valid selection character*/

      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FG0BM001.FG0BMSMO[FG0BWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(41); /* Indicate only "S" may be used*/

    end

    FG0BW00.FG0BWSWS = "N"; /* Initialize selection switch*/

    FG0B531(); /* Check for prior GMO selection*/
    FG0B532(); /* Check for prior CMO selection*/
    FG0B533(); /* Check for prior LMO selection*/
    FG0B534(); /* Check for prior CLR selection*/
    FG0B535(); /* Check for prior GRP selection*/
    FG0B536(); /* Check for prior CAT selection*/
    FG0B537(); /* Check for prior LIN selection*/
    FG0B538(); /* Check for prior line selection*/

    if (FG0BW00.FG0BWSWS == "Y") /* Prior selection found*/

      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FG0BM001.FG0BMSMO[FG0BWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(73); /* More than one selection*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If GMO was selected, ensure an "S" and no prior selections.*/
   /* ------------------------------------------------------------*/

  if (FG0BM001.FG0BMGMO[FG0BWIXM] > " ") /* Selection was entered*/

    if (FG0BM001.FG0BMGMO[FG0BWIXM] != "S") /* Valid selection character*/

      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FG0BM001.FG0BMGMO[FG0BWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(41); /* Indicate only "S" may be used*/

    end

    FG0BW00.FG0BWSWS = "N"; /* Initialize selection switch*/

    FG0B532(); /* Check for prior CMO selection*/
    FG0B533(); /* Check for prior LMO selection*/
    FG0B534(); /* Check for prior CLR selection*/
    FG0B535(); /* Check for prior GRP selection*/
    FG0B536(); /* Check for prior CAT selection*/
    FG0B537(); /* Check for prior LIN selection*/
    FG0B538(); /* Check for prior line selection*/

    if (FG0BW00.FG0BWSWS == "Y") /* Prior selection found*/

      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FG0BM001.FG0BMGMO[FG0BWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(73); /* More than one selection*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If CMO was selected, ensure an "S" and no prior selections.*/
   /* ------------------------------------------------------------*/

  if (FG0BM001.FG0BMCMO[FG0BWIXM] > " ") /* Selection was entered*/

    if (FG0BM001.FG0BMCMO[FG0BWIXM] != "S") /* Valid selection character*/

      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FG0BM001.FG0BMCMO[FG0BWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(41); /* Indicate only "S" may be used*/

    end

    FG0BW00.FG0BWSWS = "N"; /* Initialize selection switch*/

    FG0B533(); /* Check for prior LMO selection*/
    FG0B534(); /* Check for prior CLR selection*/
    FG0B535(); /* Check for prior GRP selection*/
    FG0B536(); /* Check for prior CAT selection*/
    FG0B537(); /* Check for prior LIN selection*/
    FG0B538(); /* Check for prior line selection*/

    if (FG0BW00.FG0BWSWS == "Y") /* Prior selection found*/

      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FG0BM001.FG0BMCMO[FG0BWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(73); /* More than one selection*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If LMO was selected, ensure an "S" and no prior selections.*/
   /* ------------------------------------------------------------*/

  if (FG0BM001.FG0BMLMO[FG0BWIXM] > " ") /* Selection was entered*/

    if (FG0BM001.FG0BMLMO[FG0BWIXM] != "S") /* Valid selection character*/

      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FG0BM001.FG0BMLMO[FG0BWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(41); /* Indicate only "S" may be used*/

    end

    FG0BW00.FG0BWSWS = "N"; /* Initialize selection switch*/

    FG0B534(); /* Check for prior CLR selection*/
    FG0B535(); /* Check for prior GRP selection*/
    FG0B536(); /* Check for prior CAT selection*/
    FG0B537(); /* Check for prior LIN selection*/
    FG0B538(); /* Check for prior line selection*/

    if (FG0BW00.FG0BWSWS == "Y") /* Prior selection found*/

      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FG0BM001.FG0BMLMO[FG0BWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(73); /* More than one selection*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If CLR was selected, ensure an "S" and no prior selections.*/
   /* ------------------------------------------------------------*/

  if (FG0BM001.FG0BMCLR[FG0BWIXM] > " ") /* Selection was entered*/

    if (FG0BM001.FG0BMCLR[FG0BWIXM] != "S") /* Valid selection character*/

      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FG0BM001.FG0BMCLR[FG0BWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(41); /* Indicate only "S" may be used*/

    end

    FG0BW00.FG0BWSWS = "N"; /* Initialize selection switch*/

    FG0B535(); /* Check for prior GRP selection*/
    FG0B536(); /* Check for prior CAT selection*/
    FG0B537(); /* Check for prior LIN selection*/
    FG0B538(); /* Check for prior line selection*/

    if (FG0BW00.FG0BWSWS == "Y") /* Prior selection found*/

      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FG0BM001.FG0BMCLR[FG0BWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(73); /* More than one selection*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If GRP was selected, ensure an "S" and no prior selections.*/
   /* ------------------------------------------------------------*/

  if (FG0BM001.FG0BMGRP[FG0BWIXM] > " ") /* Selection was entered*/

    if (FG0BM001.FG0BMGRP[FG0BWIXM] != "S") /* Valid selection character*/

      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FG0BM001.FG0BMGRP[FG0BWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(41); /* Indicate only "S" may be used*/

    end

    FG0BW00.FG0BWSWS = "N"; /* Initialize selection switch*/

    FG0B536(); /* Check for prior CAT selection*/
    FG0B537(); /* Check for prior LIN selection*/
    FG0B538(); /* Check for prior line selection*/

    if (FG0BW00.FG0BWSWS == "Y") /* Prior selection found*/

      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FG0BM001.FG0BMGRP[FG0BWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(73); /* More than one selection*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If CAT was selected, ensure an "S" and no prior selections.*/
   /* ------------------------------------------------------------*/

  if (FG0BM001.FG0BMCAT[FG0BWIXM] > " ") /* Selection was entered*/

    if (FG0BM001.FG0BMCAT[FG0BWIXM] != "S") /* Valid selection character*/

      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FG0BM001.FG0BMCAT[FG0BWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(41); /* Indicate only "S" may be used*/

    end

    FG0BW00.FG0BWSWS = "N"; /* Initialize selection switch*/

    FG0B537(); /* Check for prior LIN selection*/
    FG0B538(); /* Check for prior line selection*/

    if (FG0BW00.FG0BWSWS == "Y") /* Prior selection found*/

      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FG0BM001.FG0BMCAT[FG0BWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(73); /* More than one selection*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If LIN was selected, ensure an "S" and no prior selections.*/
   /* ------------------------------------------------------------*/

  if (FG0BM001.FG0BMLIN[FG0BWIXM] > " ") /* Selection was entered*/

    if (FG0BM001.FG0BMLIN[FG0BWIXM] != "S") /* Valid selection character*/

      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FG0BM001.FG0BMLIN[FG0BWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(41); /* Indicate only "S" may be used*/

    end

    FG0BW00.FG0BWSWS = "N"; /* Initialize selection switch*/

    FG0B538(); /* Check for prior line selection*/

    if (FG0BW00.FG0BWSWS == "Y") /* Prior selection found*/

      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FG0BM001.FG0BMLIN[FG0BWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(73); /* More than one selection*/

    end

  end

end // end FG0B530

// Check for prior GMO selection
Function FG0B531()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the GMO was selected on the same line.*/
   /* ------------------------------------------------------------*/

  if (FG0BM001.FG0BMGMO[FG0BWIXM] > " ") /* GMO selected*/
    FG0BW00.FG0BWSWS = "Y"; /* Indicate prior selection*/
  end


end // end FG0B531

// Check for prior CMO selection
Function FG0B532()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the CMO was selected on the same line.*/
   /* ------------------------------------------------------------*/

  if (FG0BM001.FG0BMCMO[FG0BWIXM] > " ") /* CMO selected*/
    FG0BW00.FG0BWSWS = "Y"; /* Indicate prior selection*/
  end


end // end FG0B532

// Check for prior LMO selection
Function FG0B533()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the LMO was selected on the same line.*/
   /* ------------------------------------------------------------*/

  if (FG0BM001.FG0BMLMO[FG0BWIXM] > " ") /* LMO selected*/
    FG0BW00.FG0BWSWS = "Y"; /* Indicate prior selection*/
  end


end // end FG0B533

// Check for prior CLR selection
Function FG0B534()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the CLR was selected on the same line.*/
   /* ------------------------------------------------------------*/

  if (FG0BM001.FG0BMCLR[FG0BWIXM] > " ") /* CLR selected*/
    FG0BW00.FG0BWSWS = "Y"; /* Indicate prior selection*/
  end


end // end FG0B534

// Check for prior GRP selection
Function FG0B535()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the GRP was selected on the same line.*/
   /* ------------------------------------------------------------*/

  if (FG0BM001.FG0BMGRP[FG0BWIXM] > " ") /* GRP selected*/
    FG0BW00.FG0BWSWS = "Y"; /* Indicate prior selection*/
  end


end // end FG0B535

// Check for prior CAT selection
Function FG0B536()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the CAT was selected on the same line.*/
   /* ------------------------------------------------------------*/

  if (FG0BM001.FG0BMCAT[FG0BWIXM] > " ") /* CAT selected*/
    FG0BW00.FG0BWSWS = "Y"; /* Indicate prior selection*/
  end


end // end FG0B536

// Check for prior LIN selection
Function FG0B537()
   /* ------------------------------------------------------------*/
   /* Indicate an error if the LIN was selected on the same line.*/
   /* ------------------------------------------------------------*/

  if (FG0BM001.FG0BMLIN[FG0BWIXM] > " ") /* LIN selected*/
    FG0BW00.FG0BWSWS = "Y"; /* Indicate prior selection*/
  end


end // end FG0B537

// Check for prior line selection
Function FG0B538()
   /* ------------------------------------------------------------*/
   /* Indicate an error if selection was entered on a prior line.*/
   /* ------------------------------------------------------------*/

  FG0BW00.FG0BWIX2 = FG0BW00.FG0BWIXM - 1; /* Prior line number*/

  while (FG0BW00.FG0BWSWS == "N" /* Until selection found*/
   && FG0BW00.FG0BWIX2 > 0) /* or end of lines*/

    if (FG0BM001.FG0BMSMO[FG0BWIX2] > " " /* SMO selected*/
     || FG0BM001.FG0BMGMO[FG0BWIX2] > " " /* or GMO selected*/
     || FG0BM001.FG0BMCMO[FG0BWIX2] > " " /* or CMO selected*/
     || FG0BM001.FG0BMLMO[FG0BWIX2] > " " /* or LMO selected*/
     || FG0BM001.FG0BMCLR[FG0BWIX2] > " " /* or CLR selected*/
     || FG0BM001.FG0BMGRP[FG0BWIX2] > " " /* or GRP selected*/
     || FG0BM001.FG0BMCAT[FG0BWIX2] > " " /* or CAT selected*/
     || FG0BM001.FG0BMTYP[FG0BWIX2] > " " /* or TYP selected*/
     || FG0BM001.FG0BMLIN[FG0BWIX2] > " ") /* or LIN selected*/

      FG0BW00.FG0BWSWS = "Y"; /* Indicate prior selection*/

    end

    FG0BW00.FG0BWIX2 = FG0BW00.FG0BWIX2 - 1; /* Decrement line number*/

  end


end // end FG0B538

// Process valid input request
Function FG0B600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FG0BW00.FG0BWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/

  if (FG0BM001.FFZBYYMM != FG0BW02.FFZBYYMM /* Beginning month changed*/
   || FG0BM001.FFZEYYMM != FG0BW02.FFZEYYMM /* or ending month changed*/
   || FG0BM001.XCTCD != FFWREC.XCTCD        /* or country changed*/
   || FG0BM001.YSMXDV != FFWREC.YSMXDV      /* or division group changed*/
   || FG0BM001.XPLCD != FFWREC.XPLCD        /* or product line changed*/
   || FG0BM001.YPGCD != FFWREC.YPGCD        /* or type group changed*/
   || FG0BM001.XPCCD != FFWREC.XPCCD        /* or categor changed*/
   || FG0BM001.SYBSTGNB != FFWREC.SYBSTGNB) /* or style group changed*/

    FFWREC.FFABEGMO = FFZREC.FFZBEGMO; /* Beginning month*/
    FFWREC.FFAENDMO = FFZREC.FFZENDMO; /* Ending month*/
    FFWREC.XCTCD = FG0BM001.XCTCD; /* Country code*/
    FFWREC.XCTABRV = FG0BM001.XCTABRV; /* Abbreviation*/
    FFWREC.YSMXDV = FG0BM001.YSMXDV; /* Division group code*/
    FFWREC.YSMSMDSC = FG0BM001.YSMSMDSC; /* Abbreviation*/
    FFWREC.XPLCD = FG0BM001.XPLCD; /* Product line code*/
    FFWREC.XPLABRV = FG0BM001.XPLABRV; /* Abbreviation*/
    FFWREC.YPGCD = FG0BM001.YPGCD; /* Type group code*/
    FFWREC.YPGABRV = FG0BM001.YPGABRV; /* Abbreviation*/
    FFWREC.XPCCD = FG0BM001.XPCCD; /* Category code*/
    FFWREC.XPCABRV = FG0BM001.XPCABRV; /* Abbreviation*/
    FFWREC.SYBSTGNB = FG0BM001.SYBSTGNB; /* Style group number*/
    FFWREC.SYBSTGNM = FG0BM001.SYBSTGNM; /* Style group name*/

    FG0BW00.FG0BWSWR = "Y"; /* Request for data switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    FG0BW00.XXXTSPAG = FG0BW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    FG0BW00.XXXTSPAG = FG0BW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If by line was selected, transfer to display the forecast.*/
   /* ------------------------------------------------------------*/

  if ("S" in FG0BM001.FG0BMLIN) /* Line forecast selected*/

    COMMAREA.CATOAP = "FG0F"; /* TO application*/

    FG0B610(); /* Transfer to display forecast*/

  end

   /* ------------------------------------------------------------*/
   /* If by type was selected, transfer to display the forecast.*/
   /* ------------------------------------------------------------*/

  if ("S" in FG0BM001.FG0BMTYP) /* Type forecast selected*/

    COMMAREA.CATOAP = "FG0G"; /* TO application*/

    FG0B610(); /* Transfer to display forecast*/

  end

   /* ------------------------------------------------------------*/
   /* If by category selected, transfer to display the forecast.*/
   /* ------------------------------------------------------------*/

  if ("S" in FG0BM001.FG0BMCAT) /* Category forecast selected*/

    COMMAREA.CATOAP = "FG0H"; /* TO application*/

    FG0B610(); /* Transfer to display forecast*/

  end

   /* ------------------------------------------------------------*/
   /* If by style group selected, transfer to display forecast.*/
   /* ------------------------------------------------------------*/

  if ("S" in FG0BM001.FG0BMGRP) /* Style group forecast selected*/

    COMMAREA.CATOAP = "FG0I"; /* TO application*/

    FG0B610(); /* Transfer to display forecast*/

  end

   /* ------------------------------------------------------------*/
   /* If by style/color selected, transfer to display forecast.*/
   /* ------------------------------------------------------------*/

  if ("S" in FG0BM001.FG0BMCLR) /* Style/color forecast selected*/

    COMMAREA.CATOAP = "FG0J"; /* TO application*/

    FG0B610(); /* Transfer to display forecast*/

  end

   /* ------------------------------------------------------------*/
   /* If by line/month selected, transfer to display forecast.*/
   /* ------------------------------------------------------------*/

  if ("S" in FG0BM001.FG0BMLMO) /* Line/month forecast selected*/

    COMMAREA.CATOAP = "FG0P"; /* TO application*/

    FG0B610(); /* Transfer to display forecast*/

  end

   /* ------------------------------------------------------------*/
   /* If category/month selected, transfer to display forecast.*/
   /* ------------------------------------------------------------*/

  if ("S" in FG0BM001.FG0BMCMO) /* Category/month forecast selected*/

    COMMAREA.CATOAP = "FG0Q"; /* TO application*/

    FG0B610(); /* Transfer to display forecast*/

  end

   /* ------------------------------------------------------------*/
   /* If style group/month selected, transfer to display forecast*/
   /* ------------------------------------------------------------*/

  if ("S" in FG0BM001.FG0BMGMO) /* Style group/month forecast selected*/

    COMMAREA.CATOAP = "FG0R"; /* TO application*/

    FG0B610(); /* Transfer to display forecast*/

  end

   /* ------------------------------------------------------------*/
   /* If style/color/month selected, transfer to display forecast*/
   /* ------------------------------------------------------------*/

  if ("S" in FG0BM001.FG0BMSMO) /* Style/color/month forecast selected*/

    COMMAREA.CATOAP = "FG0S"; /* TO application*/

    FG0B610(); /* Transfer to display forecast*/

  end

   /* ------------------------------------------------------------*/
   /* If deletion was requested, delete the worksheet.*/
   /* ------------------------------------------------------------*/

  if ("D" in FG0BM001.FG0BMDEL) /* Deletion requested*/

    FG0B620(); /* Delete worksheet*/

  end

   /* ------------------------------------------------------------*/
   /* If deletion request is changed, move 'D' to W02 work area.*/
   /* ------------------------------------------------------------*/

  FG0BW00.FG0BWIXM = 1; /* initialize line index*/
  while (FG0BW00.FG0BWIXM <= 12) /* until end of page*/

    if (FG0BM001.FG0BMDEL[FG0BWIXM] == "D")
      FG0BW02.FFABEGMO[FG0BWIXM] = 0;
      FG0BW02.FFAENDMO[FG0BWIXM] = 0;
      FG0BW02.ZZZSDT[FG0BWIXM] = 0;
      FG0BW02.ZZZSTM[FG0BWIXM] = 0;
      FG0BW02.XXXUSRID[FG0BWIXM] = " ";
      FG0BW02.FFELINFL[FG0BWIXM] = " ";
      FG0BW02.FFETYPFL[FG0BWIXM] = " ";
      FG0BW02.FFECATFL[FG0BWIXM] = " ";
      FG0BW02.FFEGRPFL[FG0BWIXM] = " ";
      FG0BW02.FFECLRFL[FG0BWIXM] = " ";
      FG0BW02.FFELMOFL[FG0BWIXM] = " ";
      FG0BW02.FFECMOFL[FG0BWIXM] = " ";
      FG0BW02.FFEGMOFL[FG0BWIXM] = " ";
      FG0BW02.FFESMOFL[FG0BWIXM] = " ";
    end

    FG0BW00.FG0BWIXM = FG0BW00.FG0BWIXM + 1;
  end

  if ("D" in FG0BM001.FG0BMDEL)
    FG0BS98(); /* Re-organize tsq w02*/
  end

  FG0BW00.FG0BWSWD = "N"; /* Reset delete msg flag*/


end // end FG0B600

// Transfer to display forecast
Function FG0B610()
   /* ------------------------------------------------------------*/
   /* Save the worksheet number, purge any temporary storage and*/
   /* transfer control to the forecast application.*/
   /* ------------------------------------------------------------*/

  FFWREC.FFEWSNBR = FG0BW02.FFEWSNBR[sysVar.arrayIndex]; /* Worksheet number*/
  FFWREC.FFABEGMO = FG0BW02.FFABEGMO[sysVar.arrayIndex]; /* Beginning month*/
  FFWREC.FFAENDMO = FG0BW02.FFAENDMO[sysVar.arrayIndex]; /* Ending month*/


  FG0B110(); /* Purge any temporary storage*/

  XSFFS01(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* If the request failed, display the returned error message.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CATOAP = " "; /* TO application*/

  exit stack; /* Exit to display map*/

end // end FG0B610

// Delete worksheets
Function FG0B620()
  FG0BW00.FG0BWIXM = 1; /* index for w02*/
  set FFEREC empty; /* Clear storage row*/

  while (FG0BW00.FG0BWIXM <= 12)
    if (FG0BM001.FG0BMDEL[FG0BWIXM] == "D")

      FFEREC.FFEWSNBR = FG0BW02.FFEWSNBR[FG0BWIXM];
      FFEREC.XXXUSRID = COMMAREA.CAUSERID;
      FG0BS97(); /* delete worksheet*/

    end

    FG0BW00.FG0BWIXM = FG0BW00.FG0BWIXM + 1;

  end

end // end FG0B620

// Check style color worksheet
Function FG0BS10()

  set FFNREC empty; /* Clear the storage row*/

  FFNREC.FFEWSNBR = FFEREC.FFEWSNBR; /* Worksheet number*/
  FFNREC.SY1STNBR = FF3REC.SY1STNBR; /* Style number*/
  FFNREC.SY2CLRID = FF3REC.SY2CLRID; /* Color id*/
  FFNREC.XDMCD = FF3REC.XDMCD; /* Dimension code*/

   /* ------------------------------------------------------------*/
   /* Select the requested row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3860" ("S ", SQLCA, FFNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FG0BW00.FG0BWCLX = "Y"; /* Turn on the color fcst exist flag*/
      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If no record found, return to previous process*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFNREC.FFNKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS10

// Check monthly sty clr wrksht
Function FG0BS11()

  FG0BS12(); /* Select and open cursor for VWSMTH01*/

  FG0BW00.FG0BWSWM = "N"; /* Initialize end of cursor switch*/

  while (FG0BW00.FG0BWSWM == "N" /* Until end of cursor*/
   && FG0BW00.FG0BWMSX == "N") /* or worksheet found*/

    FG0BS13(); /* Fetch next row*/

  end

  FG0BS14(); /* Close the cursor for VWSMTH01*/

end // end FG0BS11

// Select & open cursor VWSMTH01
Function FG0BS12()

  set FFOREC empty; /* Clear the storage row*/

  FFOREC.FFEWSNBR = FFEREC.FFEWSNBR; /* Worksheet number*/
  FFOREC.SY1STNBR = FF3REC.SY1STNBR; /* Style number*/
  FFOREC.SY2CLRID = FF3REC.SY2CLRID; /* Color id*/
  FFOREC.XDMCD = FF3REC.XDMCD; /* Dimension code*/

  FFFREC.FFFBEGMO = FFWREC.FFABEGMO; /* Beginning month of the range*/
  FFFREC.FFFENDMO = FFWREC.FFAENDMO; /* Ending month of the range*/
  FFFREC.FFFFUNCD = "S1"; /* Function code*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4070" (FFFREC, SQLCA, FFOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S12"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWSMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFOREC.FFOKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS12

// Fetch next row in VWSMTH01
Function FG0BS13()

   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4070" ("N1", SQLCA, FFOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FG0BW00.FG0BWMSX = "Y"; /* Turn on the mo grp fcst exist flag*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/

      FG0BW00.FG0BWSWM = "Y";

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S13"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWSMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFOREC.FFOKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS13

// Close the cursor for VSMTH01
Function FG0BS14()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4070" ("C1", SQLCA, FFOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S14"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWSMTH01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS14

// Load Dom style group- cat
Function FG0BS15()
  set FG0BW03 empty; /* Clear working storage*/

  FG0BS70(); /* Select and open cursor for VFFSTY01*/

  FG0BS71(); /* Fetch the next row in VFFSTY01*/

  FG0BW00.FG0BWIDX = 1;
  while (SQLCA.VAGen_SQLCODE != +100) /* Until end of cursor*/
    FG0BW03.SYBSTGNB[FG0BWIDX] = FF3REC.SYBSTGNB;
    FG0BS71(); /* Fetch the next row in VFFSTY01*/
    FG0BW00.FG0BWIDX = FG0BW00.FG0BWIDX + 1;
  end

  FG0BS72(); /* Close the cursor for VFFSTY01*/

end // end FG0BS15

// Process Dom style group
Function FG0BS16()
  FG0BW00.FG0BWSWX = "N"; /* Initialize end of cursr switch*/

  FG0BW00.FG0BWIDX = 1;

  while (FG0BW00.FG0BWIDX <= 500 /* Until end of table*/
   && FG0BW03.SYBSTGNB[FG0BWIDX] != " "
   && FG0BW00.FG0BWSWX == "N") /* or wrksht found*/

    if (FFEREC.FFEGRPFL == "Y" /* Grp wrksht exists*/
     && FG0BW00.FG0BWGPX == "N") /* Grp wrksht not found yet*/

      FF3REC.SYBSTGNB = FG0BW03.SYBSTGNB[FG0BWIDX];
      FG0BS20(); /* Check style group worksheet*/

    end

    if (FFEREC.FFEGMOFL == "Y" /* Mo grp wrksht exists*/
     && FG0BW00.FG0BWMGX == "N") /* Mo grp wrksht not found yet*/

      FF3REC.SYBSTGNB = FG0BW03.SYBSTGNB[FG0BWIDX];
      FG0BS21(); /* Check monthly style group worksheet*/

    end

    if (FFEREC.FFEGRPFL == "Y"  /* Grp wrksht exists*/
     && FFEREC.FFEGMOFL == "Y"  /* Mo grp wrksht exists*/
     && FG0BW00.FG0BWGPX == "Y" /* Fcst worksheet found*/
     && FG0BW00.FG0BWMGX == "Y") /* Mo grp fcst worksheet found*/

      FG0BW00.FG0BWSWX = "Y"; /* End the process*/

    else
      if (FFEREC.FFEGRPFL == "Y" /* Grp wrksht exists*/
       && FFEREC.FFEGMOFL == "N" /* Mo grp wrksht not exist*/
       && FG0BW00.FG0BWGPX == "Y") /* Fcst worksheet found*/

        FG0BW00.FG0BWSWX = "Y"; /* End the process*/

      else

        if (FFEREC.FFEGRPFL == "N" /* Grp wrksht exists*/
         && FFEREC.FFEGMOFL == "Y" /* Mo grp wrksht exists*/
         && FG0BW00.FG0BWMGX == "Y") /* Mo grp fcst worksheet found*/

          FG0BW00.FG0BWSWX = "Y"; /* End the process*/

        end
      end
    end

    FG0BW00.FG0BWIDX = FG0BW00.FG0BWIDX + 1;

  end

end // end FG0BS16

// Process Nil style color
Function FG0BS17()
  FG0BS73(); /* Select and open cursor for VFFSTY01*/

  FG0BW00.FG0BWSWX = "N"; /* Initialize end of cursr switch*/

  FG0BS74(); /* Fetch the next row in VFFSTY01*/

  while (FG0BW00.FG0BWSWX == "N") /* Until end of cursor*/

    if (FFEREC.FFESMOFL == "Y" /* Mo clr wrksht exists*/
     && FG0BW00.FG0BWMSX == "N") /* Mo clr wrksht not found yet*/

      FG0BS11(); /* Check monthly style color worksheet*/

    end

    if (FG0BW00.FG0BWMSX == "Y") /* Mo clr worksheet found*/

      FG0BW00.FG0BWSWX = "Y"; /* End the process*/

    end

    FG0BS74(); /* Fetch the next row in VFFSTY01*/

  end

  FG0BS75(); /* Close the cursor for VFFSTY01*/

end // end FG0BS17

// load Dom style color - stygrp
Function FG0BS18()

  set FG0BW04 empty; /* Clear working storage*/

  FG0BS76(); /* Select and open cursor for VFFSTY01*/

  FG0BS77(); /* Fetch the next row in VFFSTY01*/

  FG0BW00.FG0BWIDX = 1;
  while (SQLCA.VAGen_SQLCODE != +100) /* Until end of cursor*/
    FG0BW04.SY1STNBR[FG0BWIDX] = FF3REC.SY1STNBR;
    FG0BW04.SY2CLRID[FG0BWIDX] = FF3REC.SY2CLRID;
    FG0BW04.XDMCD[FG0BWIDX] = FF3REC.XDMCD;
    FG0BS77(); /* Fetch the next row in VFFSTY01*/
    FG0BW00.FG0BWIDX = FG0BW00.FG0BWIDX + 1;
  end

  FG0BS78(); /* Close the cursor for VFFSTY01*/

end // end FG0BS18

// Check style group worksheet
Function FG0BS20()

  set FFLREC empty; /* Clear the storage row*/

  FFLREC.FFEWSNBR = FFEREC.FFEWSNBR; /* Worksheet number*/

  if (FFWREC.SYBSTGNB == "      ") /* No style group entered*/

    FFLREC.SYBSTGNB = FF3REC.SYBSTGNB; /* Sty grp from VFFSTY01*/

  else

    FFLREC.SYBSTGNB = FFWREC.SYBSTGNB; /* Sty grp from screen*/

  end

  FFLREC.YPGCD = FFWREC.YPGCD; /* Type group code*/

   /* ------------------------------------------------------------*/
   /* Select the requested row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3880" ("S ", SQLCA, FFLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FG0BW00.FG0BWGPX = "Y"; /* Turn on the group fcst exist flag*/
      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If no record found, return to previous process*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S20"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFLREC.FFLKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS20

// Check monthly sty grp wrksht
Function FG0BS21()

  FG0BS22(); /* Select and open cursor for VWGMTH01*/

  FG0BW00.FG0BWSWM = "N"; /* Initialize end of cursor switch*/

  while (FG0BW00.FG0BWSWM == "N" /* Until end of cursor*/
   && FG0BW00.FG0BWMGX == "N") /* or worksheet found*/

    FG0BS23(); /* Fetch next row*/

  end

  FG0BS24(); /* Close the cursor for VWGMTH01*/

end // end FG0BS21

// Select & open cursor VWGMTH01
Function FG0BS22()

  set FFMREC empty; /* Clear the storage row*/

  FFMREC.FFEWSNBR = FFEREC.FFEWSNBR; /* Worksheet number*/
  if (FFWREC.SYBSTGNB == "      ") /* No style group entered*/
    FFMREC.SYBSTGNB = FF3REC.SYBSTGNB; /* Sty grp from VFFSTY01*/
  else
    FFMREC.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  end

  FFMREC.YPGCD = FFWREC.YPGCD; /* Type group code*/

  FFFREC.FFFBEGMO = FFWREC.FFABEGMO; /* Beginning month of the range*/
  FFFREC.FFFENDMO = FFWREC.FFAENDMO; /* Ending month of the range*/
  FFFREC.FFFFUNCD = "S1"; /* Function code*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3870" (FFFREC, SQLCA, FFMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S22"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWGMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFMREC.FFMKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS22

// Fetch next row in VMGMTH01
Function FG0BS23()

   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3870" ("N1", SQLCA, FFMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FG0BW00.FG0BWMGX = "Y"; /* Turn on the mo grp fcst exist flag*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/

      FG0BW00.FG0BWSWM = "Y";

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S23"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWGMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFMREC.FFMKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS23

// Close the cursor for VWGMTH01
Function FG0BS24()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3870" ("C1", SQLCA, FFMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S24"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWGMTH01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS24

// Check category worksheet
Function FG0BS30()

  set FFJREC empty; /* Clear the storage row*/

  FFJREC.FFEWSNBR = FFEREC.FFEWSNBR; /* Worksheet number*/
  FFJREC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  if (FFWREC.XPCCD == "  ") /* No category code entered*/

    FFJREC.XPCCD = FF2REC.XPCCD; /* Category from VFFXRF01 table*/
  else
    FFJREC.XPCCD = FFWREC.XPCCD; /* Categoryfrom screen*/
  end

   /* ------------------------------------------------------------*/
   /* Select the requested row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3840" ("S ", SQLCA, FFJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FG0BW00.FG0BWCAX = "Y"; /* Turn on the cat fcst exist flag*/
      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If no record found, return to previous process*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S30"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFJREC.FFJKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS30

// Check monthly cat worksheet
Function FG0BS31()

  FG0BS32(); /* Select and open cursor for VWGMTH01*/

  FG0BW00.FG0BWSWM = "N"; /* Initialize end of cursor switch*/

  while (FG0BW00.FG0BWSWM == "N" /* Until end of cursor*/
   && FG0BW00.FG0BWMCX == "N") /* or worksheet found*/

    FG0BS33(); /* Fetch next row*/

  end

  FG0BS34(); /* Close the cursor for VWGMTH01*/

end // end FG0BS31

// Select & open cursor VWCMTH01
Function FG0BS32()

  set FFKREC empty; /* Clear the storage row*/

  FFKREC.FFEWSNBR = FFEREC.FFEWSNBR; /* Worksheet number*/
  FFKREC.YPGCD = FFWREC.YPGCD; /* Type group code*/

  if (FFWREC.XPCCD == "  ") /* No category entered*/

    FFKREC.XPCCD = FF2REC.XPCCD; /* Category from VFFXRF01 table*/

  else

    FFKREC.XPCCD = FFWREC.XPCCD; /* Category from screen*/

  end

  FFFREC.FFFBEGMO = FFWREC.FFABEGMO; /* Beginning month of the range*/
  FFFREC.FFFENDMO = FFWREC.FFAENDMO; /* Ending month of the range*/
  FFFREC.FFFFUNCD = "S1"; /* Function code*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3830" (FFFREC, SQLCA, FFKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S32"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFKREC.FFKKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS32

// Fetch next row in VWCMTH01
Function FG0BS33()

   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3830" ("N1", SQLCA, FFKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FG0BW00.FG0BWMCX = "Y"; /* Turn on the mo cat fcst exist flag*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/

      FG0BW00.FG0BWSWM = "Y";

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S33"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFKREC.FFKKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS33

// Close the cursor for VWCMTH01
Function FG0BS34()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3830" ("C1", SQLCA, FFKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S34"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWCMTH01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS34

// Check type group worksheet
Function FG0BS40()

  set FFIREC empty; /* Clear the storage row*/

  FFIREC.FFEWSNBR = FFEREC.FFEWSNBR; /* Worksheet number*/
  FFIREC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FFIREC.YPGCD = FFWREC.YPGCD; /* Type group code*/

   /* ------------------------------------------------------------*/
   /* Select the requested row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3910" ("S ", SQLCA, FFIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FG0BW00.FG0BWTPX = "Y"; /* Turn on the cat fcst exist flag*/
      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If no record found, return to previous process*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S40"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFIREC.FFIKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS40

// Check line worksheet
Function FG0BS50()

  set FFGREC empty; /* Clear the storage row*/

  FFGREC.FFEWSNBR = FFEREC.FFEWSNBR; /* Worksheet number*/
  FFGREC.XPLCD = FFWREC.XPLCD; /* Product line*/

   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3890" ("S ", SQLCA, FFGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FG0BW00.FG0BWLNX = "Y"; /* Turn on line fcst exist flag*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, clear the exist flag.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/


      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S50"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFGREC.FFGKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS50

// Check monthly line worksheet
Function FG0BS51()

  FG0BS52(); /* Select and open cursor for VWGMTH01*/

  FG0BW00.FG0BWSWM = "N"; /* Initialize end of cursor switch*/

  while (FG0BW00.FG0BWSWM == "N" /* Until end of cursor*/
   && FG0BW00.FG0BWMLX == "N") /* or worksheet found*/

    FG0BS53(); /* Fetch next row*/

  end

  FG0BS54(); /* Close the cursor for VWGMTH01*/

end // end FG0BS51

// Select & open cursor VWLMTH01
Function FG0BS52()

  set FFHREC empty; /* Clear the storage row*/

  FFHREC.FFEWSNBR = FFEREC.FFEWSNBR; /* Worksheet number*/
  FFHREC.XPLCD = FFWREC.XPLCD; /* Product line*/

  FFFREC.FFFBEGMO = FFWREC.FFABEGMO; /* Beginning month of the range*/
  FFFREC.FFFENDMO = FFWREC.FFAENDMO; /* Ending month of the range*/
  FFFREC.FFFFUNCD = "S1"; /* Function code*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3900" (FFFREC, SQLCA, FFHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S52"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFHREC.FFHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS52

// Fetch next row in VWLMTH01
Function FG0BS53()

   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3900" ("N1", SQLCA, FFHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FG0BW00.FG0BWMLX = "Y"; /* Turn on the mo line fcst exist flag*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/

      FG0BW00.FG0BWSWM = "Y";

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S53"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFHREC.FFHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS53

// Close the cursor in VWLMTH01
Function FG0BS54()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3900" ("C1", SQLCA, FFHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S54"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLMTH01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS54

// Select 's2' csr VFFSTY01 - Dom
Function FG0BS70()
  set FF3REC empty; /* Clear storage row*/

  FF3REC.XPCCD = FFWREC.XPCCD; /* Category code*/
  FF3REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF3REC.YSMXDV = FFWREC.YSMXDV; /* div group*/
  FF3REC.XLCCD = "*"; /* Life cycle code*/
  FF3REC.SY2SSCIN = "*"; /* Safety stock class indicator*/


   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("S2", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S70"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY3; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS70

// Fetch 'n2' row VFFSTY01 - Dom
Function FG0BS71()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("N2", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S71"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY3; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS71

// Close 'c2' csr VFFSTY01 - Dom
Function FG0BS72()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("C2", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S72"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS72

// Select 's3' csr VFFSTY01 - Nil
Function FG0BS73()

  set FF3REC empty; /* Clear the storage row*/

  FF3REC.XPCCD = FFWREC.XPCCD; /* Category code*/
  FF3REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF3REC.YSMXDV = FFWREC.YSMXDV; /* div group*/
  FF3REC.XLCCD = "*"; /* Life cycle code*/
  FF3REC.SY2SSCIN = "*"; /* Safety stock class indicator*/


   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("S3", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S73"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY3; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS73

// Fetch 'n3' row VFFSTY01 - Nil
Function FG0BS74()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("N3", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      FG0BW00.FG0BWSWX = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S74"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY3; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS74

// Close 'c3' csr VFFSTY01 - Nil
Function FG0BS75()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("C3", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S75"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS75

// Select 's1' csr VFFSTY01 - Dom
Function FG0BS76()
  set FF3REC empty; /* Clear storage row*/

  FF3REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF3REC.YSMXDV = FFWREC.YSMXDV; /* div group*/
  FF3REC.SYBSTGNB = FFWREC.SYBSTGNB; /* Style gorup*/
  FF3REC.XLCCD = "*"; /* Life cycle code*/


   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("S1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S70"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY3; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS76

// Fetch 'n1' row VFFSTY01 - Dom
Function FG0BS77()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("N1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S77"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY3; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS77

// Close 'c1' csr VFFSTY01 - Dom
Function FG0BS78()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("C1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S78"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS78

// Select & open cursor VFFXRF01
Function FG0BS80()

  set FF2REC empty; /* Clear the storage row*/

  FF2REC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF2REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S80"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS80

// Fetch next row in VFFXRF01
Function FG0BS81()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      FG0BW00.FG0BWSWX = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S81"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS81

// Close cursor for VFFXRF01
Function FG0BS82()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S82"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS82

// Get any other YPG code
Function FG0BS84()

  FG0BW00.FG0BWYPG = " "; /* Clear other YPG field*/

  FG0BW00.FG0BWTIX = 1; /* Init table index for other YPG's*/

  while (FG0BW00.FG0BWTIX <= 10         /**/
   && YPGTBL.YPGCD[FG0BWTIX] != "99" /**/
   && FG0BW00.FG0BWYPG == " ") /**/

    if (YPGTBL.XXXSTAT[FG0BWTIX] == "A" /**/
     && YPGTBL.YPGFFFL[FG0BWTIX] == "Y" /**/
     && YPGTBL.YPGCD[FG0BWTIX] != FG0BM001.YPGCD) /**/
      FG0BW00.FG0BWYPG = YPGTBL.YPGCD[FG0BWTIX]; /**/
    end

    FG0BW00.FG0BWTIX = FG0BW00.FG0BWTIX + 1; /**/

  end


end // end FG0BS84

// Check WLTYP for other YPG's
Function FG0BS85()

  set FFIREC empty; /* Clear the storage row*/

  FFIREC.FFEWSNBR = FG0BW02.FFEWSNBR[FG0BWIXM]; /* Worksheet number*/
  FFIREC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FFIREC.YPGCD = FG0BW00.FG0BWYPG; /* Type group code*/

   /* ------------------------------------------------------------*/
   /* Select the requested row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3910" ("S ", SQLCA, FFIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* Row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S85"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFIREC.FFIKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS85

// Select & open in VFFXRF01
Function FG0BS90()

  set FF2REC empty; /* Clear the storage row*/

  FF2REC.XPCCD = FG0BM001.XPCCD; /* Category code*/
  FF2REC.YPGCD = FG0BM001.YPGCD; /* Type group code*/
  FF2REC.YSMXDV = "10"; /* Division group code*/
  if (FG0BM001.XPLCD == " ")
    FF2REC.XPLCD = "*"; /* Wild card*/
  else
    FF2REC.XPLCD = FG0BM001.XPLCD; /* Product line code*/
  end

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S90"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS90

// Fetch the 1st row in VFFXRF01
Function FG0BS91()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FG0BM001.XPLCD = FF2REC.XPLCD; /* save line code*/
      if (FF2REC.XPLCD in XPLTBL.XPLCD)
        FG0BM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
      end /* abbrev.*/

      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* or end of select set*/
      converseLib.validationFailed(170); /* Indicate inconsistent*/
      FFWREC.XXXMODID = "S91"; /* Module identification*/
      set FG0BM001.YSMXDV cursor, bold; /* Highlight*/
      set FG0BM001.XPLCD bold; /* Highlight*/
      set FG0BM001.YPGCD bold; /* Highlight*/
      set FG0BM001.XPCCD bold; /* Highlight*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S91"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS91

// Close the cursor in VFFXRF01
Function FG0BS92()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S92"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS92

// Select & open in VFFXRF01
Function FG0BS93()

  set FF2REC empty; /* Clear the storage row*/

  FF2REC.XPCCD = "*"; /* Category code*/
  FF2REC.XPLCD = FG0BM001.XPLCD; /* Product line code*/
  FF2REC.YPGCD = FG0BM001.YPGCD; /* Type group code*/
  FF2REC.YSMXDV = "10"; /* Division group code*/

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S93"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS93

// Fetch the 1st row in VFFXRF01
Function FG0BS94()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* or end of select set*/
      converseLib.validationFailed(203); /* Indicate invalid value*/
      FFWREC.XXXMODID = "S94"; /* Module identification*/
      set FG0BM001.YSMXDV cursor, bold; /* Highlight*/
      set FG0BM001.XPLCD bold; /* Highlight*/
      set FG0BM001.YPGCD bold; /* Highlight*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S94"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS94

// Close the cursor in VFFXRF01
Function FG0BS95()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S95"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS95

// Select 'S ' VFFXRF01
Function FG0BS96()

  set FF2REC empty; /* Clear the storage row*/

  FF2REC.XPCCD = FFWREC.XPCCD; /* Category code*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF2REC.YSMXDV = "10"; /* Division group code*/

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FFWREC.XPLCD = FF2REC.XPLCD; /* save line code*/
      if (FF2REC.XPLCD in XPLTBL.XPLCD)
        FFWREC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
      end /* abbrev.*/

      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* or end of select set*/
      converseLib.validationFailed(170); /* Indicate inconsistent*/
      FFWREC.XXXMODID = "S96"; /* Module identification*/
      set FG0BM001.YSMXDV cursor, bold; /* Highlight*/
      set FG0BM001.YPGCD bold; /* Highlight*/
      set FG0BM001.XPCCD bold; /* Highlight*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S96"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS96

// Call FF6110 to delete wrkshts
Function FG0BS97()
   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/

   /* ------------------------------------------------------------*/
   /* Call the purge Long range worksheet Subroutine.*/
   /* ------------------------------------------------------------*/

  try
    call "FF6110" (FFEREC, SQLCA, TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If call was successful, return to the calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, indicate data in use by another.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "S97"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    converseLib.validationFailed(47); /* Data in use by another*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100     /* and normal return*/
   && TA1REC.TA1TBLVU != "VWDGRP01") /* Wrksheet header not found*/

    return;

  else

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1LOC = "PURGE L.R. WRKSHEETS";
    TAEREC.TAEDESC1 = "SUBROUTINE FF6110 CALL WAS NOT SUCCESSFUL";

    if (SQLCA.VAGen_SQLCODE == 100 /* and normal return*/
     && TA1REC.TA1TBLVU == "VWDGRP01") /* Wrksheet header not found*/
      TAEREC.TAEDESC2 = "DFCAST.VWDGRP01 NOT FOUND";
    else
      TAEREC.TAEDESC2 = sysVar.errorCode; /* CSP return code*/
    end

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  converseLib.validationFailed(1); /* System error occurred*/

  exit stack; /* Exit to display map*/


end // end FG0BS97

// Re-organize tsq page w02
Function FG0BS98()
  set FG0BW05 empty; /* Clear work area*/
  FG0BW00.FG0BWIXM = 1; /* index for w02*/
  FG0BW00.FG0BWIX2 = 1; /* index for w05*/

  FG0BW05.FFZBEGMO = FG0BW02.FFZBEGMO; /* Beginning month*/
  FG0BW05.FFZENDMO = FG0BW02.FFZENDMO; /* ending month*/

  while (FG0BW00.FG0BWIXM <= 12)
    if (FG0BW02.FFABEGMO[FG0BWIXM] > 0)
      FG0BW05.FFEWSNBR[FG0BWIX2] = FG0BW02.FFEWSNBR[FG0BWIXM];
      FG0BW05.FFABEGMO[FG0BWIX2] = FG0BW02.FFABEGMO[FG0BWIXM];
      FG0BW05.FFAENDMO[FG0BWIX2] = FG0BW02.FFAENDMO[FG0BWIXM];
      FG0BW05.ZZZSDT[FG0BWIX2] = FG0BW02.ZZZSDT[FG0BWIXM];
      FG0BW05.ZZZSTM[FG0BWIX2] = FG0BW02.ZZZSTM[FG0BWIXM];
      FG0BW05.XXXUSRID[FG0BWIX2] = FG0BW02.XXXUSRID[FG0BWIXM];
      FG0BW05.FFELINFL[FG0BWIX2] = FG0BW02.FFELINFL[FG0BWIXM];
      FG0BW05.FFETYPFL[FG0BWIX2] = FG0BW02.FFETYPFL[FG0BWIXM];
      FG0BW05.FFECATFL[FG0BWIX2] = FG0BW02.FFECATFL[FG0BWIXM];
      FG0BW05.FFEGRPFL[FG0BWIX2] = FG0BW02.FFEGRPFL[FG0BWIXM];
      FG0BW05.FFECLRFL[FG0BWIX2] = FG0BW02.FFECLRFL[FG0BWIXM];
      FG0BW05.FFELMOFL[FG0BWIX2] = FG0BW02.FFELMOFL[FG0BWIXM];
      FG0BW05.FFECMOFL[FG0BWIX2] = FG0BW02.FFECMOFL[FG0BWIXM];
      FG0BW05.FFEGMOFL[FG0BWIX2] = FG0BW02.FFEGMOFL[FG0BWIXM];
      FG0BW05.FFESMOFL[FG0BWIX2] = FG0BW02.FFESMOFL[FG0BWIXM];
      FG0BW00.FG0BWIX2 = FG0BW00.FG0BWIX2 + 1;
    end

    FG0BW00.FG0BWIXM = FG0BW00.FG0BWIXM + 1;

  end

  set FG0BW02 empty; /* Clear tsq page*/

  FG0BW02.FFZBEGMO = FG0BW05.FFZBEGMO; /* Beginning month*/
  FG0BW02.FFZENDMO = FG0BW05.FFZENDMO; /* ending month*/

   /* re-load organized data*/

  move FG0BW05.FFEWSNBR to FG0BW02.FFEWSNBR[1] for all;
  move FG0BW05.FFABEGMO to FG0BW02.FFABEGMO[1] for all;
  move FG0BW05.FFAENDMO to FG0BW02.FFAENDMO[1] for all;
  move FG0BW05.ZZZSDT to FG0BW02.ZZZSDT[1] for all;
  move FG0BW05.ZZZSTM to FG0BW02.ZZZSTM[1] for all;
  move FG0BW05.XXXUSRID to FG0BW02.XXXUSRID[1] for all;
  move FG0BW05.FFELINFL to FG0BW02.FFELINFL[1] for all;
  move FG0BW05.FFETYPFL to FG0BW02.FFETYPFL[1] for all;
  move FG0BW05.FFECATFL to FG0BW02.FFECATFL[1] for all;
  move FG0BW05.FFEGRPFL to FG0BW02.FFEGRPFL[1] for all;
  move FG0BW05.FFECLRFL to FG0BW02.FFECLRFL[1] for all;
  move FG0BW05.FFELMOFL to FG0BW02.FFELMOFL[1] for all;
  move FG0BW05.FFECMOFL to FG0BW02.FFECMOFL[1] for all;
  move FG0BW05.FFEGMOFL to FG0BW02.FFEGMOFL[1] for all;
  move FG0BW05.FFESMOFL to FG0BW02.FFESMOFL[1] for all;

  FG0BS99(); /* Update tsq page w02*/

end // end FG0BS98

// Update tsq page w02
Function FG0BS99()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  FG0BW02.XXXTSLEN = FG0BW00.XXXTSLEN; /* page length*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (FG0BW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S99"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0BS99

//*** RECORD=FG0BW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FG0BW00 type basicRecord
  10 FG0BWIXM FG0BWIXM ; 
  10 FG0BWIX2 FG0BWIX2 ; 
  10 FG0BWIDX FG0BWIDX ; 
  10 FG0BWTIX FG0BWTIX ; 
  10 FG0BWSWC FG0BWSWC ; 
  10 FG0BWSWX FG0BWSWX ; 
  10 FG0BWSWM FG0BWSWM ; 
  10 FG0BWSWF FG0BWSWF ; 
  10 FG0BWSWR FG0BWSWR ; 
  10 FG0BWSWS FG0BWSWS ; 
  10 FG0BWSWD FG0BWSWD ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FG0BWTSQ FG0BWTSQ ; 
  10 FG0BWSCL FG0BWSCL ; 
  10 FG0BWLNX FG0BWLNX ; 
  10 FG0BWMLX FG0BWMLX ; 
  10 FG0BWTPX FG0BWTPX ; 
  10 FG0BWCAX FG0BWCAX ; 
  10 FG0BWMCX FG0BWMCX ; 
  10 FG0BWGPX FG0BWGPX ; 
  10 FG0BWMGX FG0BWMGX ; 
  10 FG0BWCLX FG0BWCLX ; 
  10 FG0BWMSX FG0BWMSX ; 
  10 FG0BWYPG FG0BWYPG ; 
end // end FG0BW00

//*** RECORD=FG0BW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FG0BW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(467) ; 
    10 FFZBEGMO FFZBEGMO ; 
      15 * char(2) ; 
      15 FFZBYYMM FFZBYYMM ; 
    10 FFZENDMO FFZENDMO ; 
      15 * char(2) ; 
      15 FFZEYYMM FFZEYYMM ; 
    10 FFEWSNBR FFEWSNBR [13] ; 
    10 FFABEGMO FFABEGMO [13] ; 
    10 FFAENDMO FFAENDMO [13] ; 
    10 ZZZSDT ZZZSDT [13] ; 
    10 ZZZSTM ZZZSTM [13] ; 
    10 XXXUSRID XXXUSRID [13] ; 
    10 FFELINFL FFELINFL [13] ; 
    10 FFETYPFL FFETYPFL [13] ; 
    10 FFECATFL FFECATFL [13] ; 
    10 FFEGRPFL FFEGRPFL [13] ; 
    10 FFECLRFL FFECLRFL [13] ; 
    10 FFELMOFL FFELMOFL [13] ; 
    10 FFECMOFL FFECMOFL [13] ; 
    10 FFEGMOFL FFEGMOFL [13] ; 
    10 FFESMOFL FFESMOFL [13] ; 
end // end FG0BW01

//*** RECORD=FG0BW02 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FG0BW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(467) ; 
    10 FFZBEGMO FFZBEGMO ; 
      15 * char(2) ; 
      15 FFZBYYMM FFZBYYMM ; 
    10 FFZENDMO FFZENDMO ; 
      15 * char(2) ; 
      15 FFZEYYMM FFZEYYMM ; 
    10 FFEWSNBR FFEWSNBR [13] ; 
    10 FFABEGMO FFABEGMO [13] ; 
    10 FFAENDMO FFAENDMO [13] ; 
    10 ZZZSDT ZZZSDT [13] ; 
    10 ZZZSTM ZZZSTM [13] ; 
    10 XXXUSRID XXXUSRID [13] ; 
    10 FFELINFL FFELINFL [13] ; 
    10 FFETYPFL FFETYPFL [13] ; 
    10 FFECATFL FFECATFL [13] ; 
    10 FFEGRPFL FFEGRPFL [13] ; 
    10 FFECLRFL FFECLRFL [13] ; 
    10 FFELMOFL FFELMOFL [13] ; 
    10 FFECMOFL FFECMOFL [13] ; 
    10 FFEGMOFL FFEGMOFL [13] ; 
    10 FFESMOFL FFESMOFL [13] ; 
end // end FG0BW02

//*** RECORD=FG0BW03 ****
// ------------------------
// Style group table.
// ------------------------
// ***********************
Record FG0BW03 type basicRecord
  5 SYBSTGNB SYBSTGNB [500] ; 
end // end FG0BW03

//*** RECORD=FG0BW04 ****
// ------------------------
// Style color table.
// ------------------------
// ***********************
Record FG0BW04 type basicRecord
  10 SY1STNBR SY1STNBR [100] ; 
  10 SY2CLRID SY2CLRID [100] ; 
  10 XDMCD XDMCD [100] ; 
end // end FG0BW04

//*** RECORD=FG0BW05 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FG0BW05 type basicRecord
  10 FFZBEGMO FFZBEGMO ; 
    15 * char(2) ; 
    15 FFZBYYMM FFZBYYMM ; 
  10 FFZENDMO FFZENDMO ; 
    15 * char(2) ; 
    15 FFZEYYMM FFZEYYMM ; 
  10 FFEWSNBR FFEWSNBR [13] ; 
  10 FFABEGMO FFABEGMO [13] ; 
  10 FFAENDMO FFAENDMO [13] ; 
  10 ZZZSDT ZZZSDT [13] ; 
  10 ZZZSTM ZZZSTM [13] ; 
  10 XXXUSRID XXXUSRID [13] ; 
  10 FFELINFL FFELINFL [13] ; 
  10 FFETYPFL FFETYPFL [13] ; 
  10 FFECATFL FFECATFL [13] ; 
  10 FFEGRPFL FFEGRPFL [13] ; 
  10 FFECLRFL FFECLRFL [13] ; 
  10 FFELMOFL FFELMOFL [13] ; 
  10 FFECMOFL FFECMOFL [13] ; 
  10 FFEGMOFL FFEGMOFL [13] ; 
  10 FFESMOFL FFESMOFL [13] ; 
end // end FG0BW05

// Category fcst exist flag
DataItem FG0BWCAX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style color fcst exist flag
DataItem FG0BWCLX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style group fcst exist flag
DataItem FG0BWGPX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index
DataItem FG0BWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Secondary index for map fields
DataItem FG0BWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FG0BWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Line fcst exist flag
DataItem FG0BWLNX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// monthly cat fcst exist flag
DataItem FG0BWMCX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// monthly grp fcst exist flag
DataItem FG0BWMGX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// monthly line fcst exist flag
DataItem FG0BWMLX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// monthly clr fcst exist flag
DataItem FG0BWMSX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// top page for the scrolling
DataItem FG0BWSCL num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem FG0BWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Delete message flag
DataItem FG0BWSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FG0BWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem FG0BWSWM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FG0BWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prior selection entered switch
DataItem FG0BWSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem FG0BWSWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for other YPG's
DataItem FG0BWTIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Type group fcst exist flag
DataItem FG0BWTPX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last position of the 1st queue
DataItem FG0BWTSQ num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Saved other YPG
DataItem FG0BWYPG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

