package fg0r;

import corpcom2.XX0XW01;
import corpcom3.XPFF001;
import corpcom4.XSFFS01;
import corpcom4.XSFFS10;
import corpcom4.XSFFS11;
import corpcom4.XSFFS30;
import corpcom4.XSFFS59;
import corpcom4.XSNOWAY;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import ff.common.*;
import pg.common.PG7REC;
import sy.common.SYBSTGNB;
import sy.common.SYBSTGNM;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
//*** PROGRAM=FG0R ****
// This program provides the user with the ability to view and
// change the monthly style group forecast quantities
// 
// The user can come to this screen either from the forecast by
// style grp screen (FG0I) by pressing the explode sty grp key
// or from the long rang worksheet select screen. If it is from
// the forecast screen, the forecast quantities will be spread
// out based on the demand index. If it is from the worksheet
// select screen, the existing monthly forecast will be brought
// up. The user can change the quantities by typing over them,
// whenever the 'ENTER' is pressed, the worksheet will be
// updated.
// 
// The user can specify the number of month in the season and
// he has the flexibility to view 3 month, 4 month or 6 month
// season with varying subtotals. The user may use appropriate
// attention key to scroll left and right.
// 
// If the user is satisfied with the forecast quantities on the
// screen, he can make these sales forecasts as master by
// pressing PF15. The system will then update the master sales
// forecast in the database.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          10/31/89  JJUCH   New application.
// FF1006   08/03/90  JJUCH   Added a message to remind users
//                            to save fcsts as master before
//                            they leave this application.
// FF1027   10/25/90  MDANG   Changed to make sure a style grp
//                            is one has been exploded before
//                            displaying it on the screen.
// FF1111   07/06/92  JJUCH   Changes for varying seasons.
// FF347    09/04/92  JJUCH   Fixed the problem of updating
//                            the fcsts when the season cross
//                            2 pages and no scrolling being
//                            done and causing vwsty001 fcst
//                            qty being updated incorrectly.
// FF382    03/18/93  JJUCH   Update the user id on VWDGRP01
//                            when the worksheet is updated.
// FF175    12/10/96  DSMITH  Changed the date range fill
//                            character to '0'.
// *********************
Program FG0R type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF2REC FF2REC; // record
  FFCREC FFCREC; // record
  FFEREC FFEREC; // record
  FFFREC FFFREC; // record
  FFGREC FFGREC; // record
  FFIREC FFIREC; // record
  FFJREC FFJREC; // record
  FFKREC FFKREC; // record
  FFLREC FFLREC; // record
  FFMREC FFMREC; // record
  FFSREC FFSREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  FG0RW00 FG0RW00; // record
  FG0RW01 FG0RW01; // record
  PG7REC PG7REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FG0RM.FG0RM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FG0RM001 initial; /* M001 input/output*/
    set FG0RW00 empty; /* Working storage*/
    set FG0RW01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FG0RW00.FG0RWSWF = "N"; /* Format the map switch*/
    FG0RW00.FG0RWSWO = "N"; /* Data obtained switch*/
    FG0RW00.FG0RWSWR = "N"; /* Request for data switch*/
    FG0RW00.FG0RWSW1 = "Y"; /* First time through switch*/
    FG0RW00.FG0RWSWL = "N"; /* Last row switch*/
    FG0RW00.FG0RW-NEXT = "N"; /* Next season switch*/
    move "N" to FG0RW00.FG0RW-MON-LEFT[1] for all; /* Month left on the 2nd page switch*/

    FG0RW00.FG0RWLEF = 1; /* Scrolling left index*/

    FG0RW00.FG0RWSNX = 1; /* Season index*/
    FG0RW00.FG0RWPGX = 1; /* Page index*/
    FG0RW00.FG0RW-PAGS[1] = 1; /* season on the 1st page*/

    if (FFWREC.FFABEGMO != 0 /* begin month*/
     && FFWREC.FFAENDMO != 0 /* end month*/
     && FFWREC.YPGCD != " "  /* type group code*/
     && FFWREC.XPCCD != " "  /* category code*/
     && FFWREC.YSMXDV != " ") /* division group code*/
      FG0RW00.FG0RWSWR = "Y"; /* Request for data switch*/
    end

    FG0RW01.FG0RWBMO = FFWREC.FFABEGMO; /* Begin month*/
    FG0RW01.FG0RWEMO = FFWREC.FFAENDMO; /* End month*/
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FG0R000; /* Converse the main process*/

    FG0R000: FG0R000();
     /* ------------------------------------------------------------*/
      /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FG0R001; /* Converse the main process*/

    FG0R001: FG0R001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FG0R001; /* Converse the main process*/


  end // end main
end // end FG0R

// Check the FROM application
Function FG0R000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "FG0B" /* From allowed application*/
   || COMMAREA.CAFROMAP == "FG0I" 
   || COMMAREA.CAFROMAP == "FG0R") /* or same application*/

    FG0RS01(); /* Process the date range*/

  else

    /* ------------------------------------------------------------*/
     /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/

    XSNOWAY(); /* Invalid transfer was attempted*/

  end


end // end FG0R000

// List the rows in the table
Function FG0R001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FG0R100(); /* Obtain the data to display*/

  FG0R200(); /* Format and display the map*/

  FG0R300(); /* Check attention identifier*/

  FG0R400(); /* Reset fields to normal intensity*/

  FG0R500(); /* Verify the entered data*/

  FG0R600(); /* Process valid input request*/


end // end FG0R001

// Obtain the data to display
Function FG0R100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FG0RW00.FG0RWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

  if (FG0RW00.FG0RWSEM[1] == 0) /* No seas end month*/
    FG0RS02(); /* Obtain default season end month*/
  end

  if (FG0RW00.FG0RWSEM[1] == 0) /* No seas end month*/
    if (FFZREC.FFZNUMMO <= 6)
      FG0RW00.FG0RWNSS = 1; /* no. of season*/
      FG0RW00.FG0RWSMO[1] = FG0RW00.FG0RWWED; /* seas end mo-ccyymm*/
      FG0RW00.FG0RWSEM[1] = FG0RW00.FG0RWEMM; /* seas end mo-mm*/
      FG0RW00.FG0RWSIN[1] = FFZREC.FFZNUMMO; /* no. of mo in seas*/
    else
      return;
    end
  end

  FG0R101(); /* Build up temporary storage*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FG0RW00.TA5TSQIX == 0) /* No pages formatted*/

    FFWREC.XXXMODID = "100"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/

    return; /* Exit to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO == 0) /* No message to display*/
    FG0RW00.XXXTSPAG = 1; /* Desired page number*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FG0RW00.FG0RWPGX = 1; /* Page index*/
  FG0RW00.FG0RW-PAGS[1] = 1; /* Season on the 1st page*/

  FG0RW00.FG0RWSWR = "N"; /* Request for data switch*/
  FG0RW00.FG0RWSWF = "Y"; /* Format data switch*/
  FG0RW00.FG0RWSWO = "Y"; /* Data obtained switch*/


end // end FG0R100

// Build up temporary storage
Function FG0R101()
   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  FG0RW00.XXXTSLEN = 3214; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  FG0R110(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Save the search key informations in the map*/
   /* ------------------------------------------------------------*/

  FG0RW01.FG0RWBMO = FFWREC.FFABEGMO; /* Beginning date*/
  FG0RW01.FG0RWEMO = FFWREC.FFAENDMO; /* Ending date*/

  FG0RW00.FG0RWIXW = FG0RW00.FG0RWNSS;
  while (FG0RW00.FG0RWIXW > 0) /* No. of seasons*/

    FG0RS05(); /* Calculate no of months in each season*/
    FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW - 1;

  end

   /* ------------------------------------------------------------*/
   /* Load the month heading*/
   /* ------------------------------------------------------------*/

  FG0R115();

   /* ------------------------------------------------------------*/
   /* Obtain the category target from DFCAST.VWCAT001 table*/
   /* ------------------------------------------------------------*/

  FG0R120();

   /* ------------------------------------------------------------*/
   /* Obtain the demand incator and indices from DFCAST.VRCAT001.*/
   /* ------------------------------------------------------------*/

  FG0R130();
                                   /* Obtain the demand index from VRCAT001*/

   /* ------------------------------------------------------------*/
   /* Obtain a list of style group from DPRODG.VMXPRC01 table.*/
   /* Then, use each style grp to retrieve the existing monthly*/
   /* style group fcsts from DFCAST.VWGMTH01 table.*/
   /* ------------------------------------------------------------*/

  FG0R140(); /* Select and open the cursor for VMXPRC01*/

  FG0RW00.FG0RWCR1 = "N"; /* Initialize end of cursor switch*/
  FG0RW00.FG0RWIXM = 1; /* Initialize the map index*/

  while (FG0RW00.FG0RWCR1 == "N") /* Until end of cursor*/
    FG0R141(); /* Fetch the next row in VMXPRC01*/
    if (FG0RW00.FG0RWCR1 == "N" /* Record found*/
     && PG7REC.PG7MAXCM != FFWREC.FFABEGMO) /* Begin mo not = closeout mo*/
      FG0R142(); /* Open & select cursor for VWGMTH01*/
      FG0R143(); /* Fetch first row in VWGMTH01*/
      if (SQLCA.VAGen_SQLCODE == 100)
        FG0R144(); /* Close the cursor for VWGMTH01*/
      else
        FG0RW01.SYBSTGNB[FG0RWIXM] = PG7REC.SYBSTGNB; /* Style grp number*/
        FG0RW01.SYBSTGNM[FG0RWIXM] = PG7REC.SYBSTGNM; /* Stylw grp name*/
        FG0RW00.FG0RWCR2 = "N"; /* Initialize end of cursor switch*/
        while (FG0RW00.FG0RWCR2 == "N") /* Until end of cursor*/
          FG0RS40(); /* Calc grand total for each stygrp*/
          FG0R143(); /* Fetch next row in VWGMTH01*/
        end
        FG0R144(); /* Close the cursor for VWGMTH01*/
        FG0RW00.FG0RWIXM = FG0RW00.FG0RWIXM + 1;
        if (FG0RW00.FG0RWIXM > 14)
          FG0R150(); /* Calculate the grand totals*/
          FG0R160(); /* Add page to temporary storage*/
        end
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for DPRODG.VMXPRC01 table.*/
   /* ------------------------------------------------------------*/

  FG0R145();

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (FG0RW00.FG0RWIXM > 1) /* Page was formatted*/
    FG0R150(); /* Calculate the grand totals*/
    FG0R160(); /* Add page to temporary storage*/
  end

end // end FG0R101

// Purge temporary storage
Function FG0R110()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (TA5REC.TA5FNCCD == "P") /* Last function was purge*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FG0RW01 empty; /* M001 display storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FG0RW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FG0RW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "110"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0R110

// Load the month heading
Function FG0R115()

  FG0RW00.FG0RWEND = 0; /* Initialize end of range index*/
  FG0RW00.FG0RWIXM = 1; /* Initialize the map index*/
  FG0RW00.FG0RWHDG[1] = FG0RW01.FG0RWBMO; /* First month*/
  if (FG0RW01.FG0RWBMO == FG0RW01.FG0RWEMO) /* one month range*/
    FG0RW00.FG0RWEND = FG0RW00.FG0RWIXM; /* Set end of rang index*/
  else
    while (FG0RW00.FG0RWIXM <= 12 /* Until reach 12 months*/
     && FG0RW00.FG0RWHDG[FG0RWIXM] < FG0RW01.FG0RWEMO)
                                   /* or end of range*/

      FG0RW00.FG0RWIXM = FG0RW00.FG0RWIXM + 1; /* Increment the heading index*/

      FG0RW00.FG0RWDAT = FG0RW01.FG0RWBMO + FG0RW00.FG0RWIXM - 1;

      if (FG0RW00.FG0RWDMM > 12)
        FG0RW00.FG0RWDMM = FG0RW00.FG0RWDMM - 12;
        FG0RW00.FG0RWDYY = FG0RW00.FG0RWDYY + 1; /* Next year*/

        if (FG0RW00.FG0RWDYY == 0) /* Into next century*/

          FG0RW00.FG0RWDCC = FG0RW00.FG0RWDCC + 1; /* Next century*/

        end

      end

      FG0RW00.FG0RWHDG[FG0RWIXM] = FG0RW00.FG0RWDAT;
      FG0RW00.FG0RWEND = FG0RW00.FG0RWIXM; /* Set end of rang index*/

    end
  end

end // end FG0R115

// Obtain target from VWCAT001
Function FG0R120()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set FFJREC empty; /* Clear up the storage row*/

  FFJREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFJREC.XPCCD = FFWREC.XPCCD; /* Category code*/
  FFJREC.YPGCD = FFWREC.YPGCD; /* Type group code*/

  try
    call "IO3840" ("S ", SQLCA, FFJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FFXREC.FFXNUMB = FFJREC.FFEFCTGT;
      XSFFS10(); /* Convert from NUM to CHAR*/
      FG0RW01.FG0RWTGT = FFXREC.FFXCHAR; /* Save style group target*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FG0RW01.FG0RWTGT = " "; /* Style group target*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "120"; /* MODULE IDENTIFICATION*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLCAT01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFJREC.FFJKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0R120

// Obtain dmd index from VRCAT001
Function FG0R130()
   /* ------------------------------------------------------------*/
   /* Select the row to obtain the demand indicator.*/
   /* ------------------------------------------------------------*/

  set FFCREC empty; /* Clear up the storage row*/

  FFCREC.FFABEGMO = FFWREC.FFABEGMO; /* Beginning month*/
  FFCREC.FFAENDMO = FFWREC.FFAENDMO; /* Ending month*/
  FFCREC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FFCREC.XPCCD = FFWREC.XPCCD; /* Category code*/

  try
    call "IO3760" ("S ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FG0RW01.FFCDMIND = FFCREC.FFCDMIND; /* Save dmd ind*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FG0RW01.FFCDMIND = " "; /* Save dmd ind*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "130"; /* MODULE IDENTIFICATION*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0R130

// Sel & open cursor for VMXPRC01
Function FG0R140()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set FFFREC empty; /* Clear row storage area*/

  FFFREC.FFFFUNCD = "S1"; /* Function code*/
  FFFREC.FFFBEGMO = FFWREC.FFABEGMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFWREC.FFAENDMO; /* Ending month*/

  set PG7REC empty; /* Clear row storage area*/

  PG7REC.XPCCD = FFWREC.XPCCD; /* Category code*/
  PG7REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  PG7REC.YSMXDV = FFWREC.YSMXDV; /* Division group*/
  PG7REC.PG7MAXPR = 99999.99; /* Max price*/

  try
    call "IO5100" (FFFREC, SQLCA, PG7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful , return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "140"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMXPRC01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG7REC.PG7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0R140

// Fetch next row in VMXPRC01
Function FG0R141()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5100" ("N1", SQLCA, PG7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FG0RW00.FG0RWCR1 = "Y"; /* End of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "141"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMXPRC01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG7REC.PG7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0R141

// Sel & open cursor for VWGMTH01
Function FG0R142()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set FFMREC empty; /* Clear row storage area*/

  FFMREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFMREC.SYBSTGNB = PG7REC.SYBSTGNB; /* Style group code*/
  FFMREC.YPGCD = FFWREC.YPGCD; /* Type group cdoe*/

  set FFFREC empty; /* Clear row storage area*/

  FFFREC.FFFBEGMO = FFWREC.FFABEGMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFWREC.FFAENDMO; /* Ending month*/
  FFFREC.FFFFUNCD = "S1"; /* Function code*/

  try
    call "IO3870" (FFFREC, SQLCA, FFMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "142"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWGMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFMREC.FFMKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0R142

// Fetch next row in VWGMTH01
Function FG0R143()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3870" ("N1", SQLCA, FFMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (FFMREC.FF4FCTMO in FG0RW00.FG0RWHDG)

        FG0RWIXF = FG0RWIXM - 1; /* Find the row it is at*/
        FG0RWIXF = FG0RWIXF * 12 + sysVar.arrayIndex; /* find the position it is at*/
        FG0RW01.FG0RWFCS[FG0RWIXF] = FFMREC.FF6SLFCT;
                                   /* Save the fcst*/
        FG0RW01.FG0RWCNT[FG0RWIXF] = FFMREC.ZZZCHGCT; /* Save chng count*/

        FFXREC.FFXNUMB = FFMREC.FF6SLFCT;
        XSFFS10(); /* Convert the value from NUM to CHAR*/
        if (FFXREC.FFXCHAR == "0")
          FG0RW01.FG0RMFCS[FG0RWIXF] = " ";
        else
          FG0RW01.FG0RMFCS[FG0RWIXF] = FFXREC.FFXCHAR;
        end

      end

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FG0RW00.FG0RWCR2 = "Y"; /* End of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "143"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWGMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFMREC.FFMKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0R143

// Close cursor for VWGMTH01
Function FG0R144()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "C1"; /* Function code*/

  try
    call "IO3870" (FFFREC, SQLCA, FFMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "144"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWGMTH01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0R144

// Close cursor for VMXPRC01
Function FG0R145()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5100" ("C1", SQLCA, PG7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "145"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMXPRC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0R145

// Calculate the grand total
Function FG0R150()

   /* -------------------------------------------------------*/
   /* Calculate the total forecast for each month.*/
   /* -------------------------------------------------------*/

  FG0RW00.FG0RWIXM = 1; /* Initialize the map index*/

  while (FG0RW00.FG0RWIXM <= 14 /* Until end of page*/
   && FG0RW01.SYBSTGNB[FG0RWIXM] > " ")

    FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXM - 1;
    FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF * 12 + 1;
    FG0RW00.FG0RWIXE = FG0RW00.FG0RWIXF + FG0RW00.FG0RWEND - 1;

    FG0RW00.FG0RWIXW = 1; /* Initialize grand total fld index*/

    while (FG0RW00.FG0RWIXF <= FG0RW00.FG0RWIXE)

      FG0RW00.FG0RWTOT = FG0RW00.FG0RWGDT[FG0RWIXW]; /* Total qty*/
      FG0RW00.FG0RWFCS = FG0RW01.FG0RWFCS[FG0RWIXF]; /* Mo. fcst qty*/
      FG0RW00.FG0RWGDT[FG0RWIXW] = FG0RW00.FG0RWTOT + FG0RW00.FG0RWFCS;
      FG0RW00.FG0RWGQT = FG0RW00.FG0RWGQT + FG0RW00.FG0RWFCS;

      FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF + 1;
      FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW + 1;

    end

    FG0RW00.FG0RWIXM = FG0RW00.FG0RWIXM + 1;

  end

  FG0RS40(); /* Calc grand total for category*/
end // end FG0R150

// Add page to temporary storage
Function FG0R160()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FG0RW01.XXXTSLEN = FG0RW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  if (FG0RW00.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P") /* and last function purge*/

    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/

  end

  try
    call "TA0050" (FG0RW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FG0RW01 empty; /* M001 display storage*/
    move "    0" to FG0RW01.FG0RMFCS[1] for all; /* Initialize the forecast qty field*/

    /* ---------------------------------------------------------*/
     /* Save the search information in map display storage queue*/
    /* ---------------------------------------------------------*/
    FG0RW01.FG0RWBMO = FFWREC.FFABEGMO; /* Beginning month*/
    FG0RW01.FG0RWEMO = FFWREC.FFAENDMO; /* Ending month*/
    FG0RW01.FFCDMIND = FFCREC.FFCDMIND; /* indicator*/

    FG0RW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    FG0RW00.FG0RWIXM = 1; /* Display line number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "160"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0R160

// Format and converse the map
Function FG0R200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FG0RW00.FG0RWSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    set FG0RM001 initial; /* M001 input/output area*/

    FG0RM001.FG0RMBMO = FG0RW01.FG0RMBMO; /* Beginning month*/
    FG0RM001.FG0RMEMO = FG0RW01.FG0RMEMO; /* Ending month*/
    FG0RM001.FG0RWTGT = FG0RW01.FG0RWTGT; /* Category target*/
    FG0RM001.FFCDMIND = FG0RW01.FFCDMIND; /* Demand indicator*/
    FG0RM001.FG0RMSEM[1] = FG0RW00.FG0RWSEM[1]; /* season end month*/
    FG0RM001.FG0RMSEM[2] = FG0RW00.FG0RWSEM[2];
    FG0RM001.FG0RMSEM[3] = FG0RW00.FG0RWSEM[3];
    FG0RM001.FG0RMSEM[4] = FG0RW00.FG0RWSEM[4];
    FG0RM001.YPGCD = FFWREC.YPGCD; /* Type group code*/
    FG0RM001.YPGABRV = FFWREC.YPGABRV; /* Type group abbrv*/
    FG0RM001.XPCCD = FFWREC.XPCCD; /* Category code*/
    FG0RM001.XPCABRV = FFWREC.XPCABRV; /* Category abbrv*/
    FG0RM001.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
    FG0RM001.YSMSMDSC = FFWREC.YSMSMDSC; /* Division group desc*/

    if (FG0RW00.FG0RWSWF == "Y") /* Map must be formatted*/
      FG0R210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FG0RM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FG0RM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG0RM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FG0RM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FG0RM001 alarm; /* Indicate sound alarm*/

  end

  converse FG0RM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = FG0RM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG0RM001.CAITEM; /* Application data*/

end // end FG0R200

// Format the display data
Function FG0R210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  FG0RW00.FG0RWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (FG0RW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (FG0RW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (FG0RW00.FG0RWSWU == "Y") /* Current page was changed*/

        FG0RS03(); /* Update temporary storage page*/

        FG0RW00.FG0RWSWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (FG0RW00.XXXTSPAG > FG0RW00.TA5TSQIX) /* Desired greater highest*/
        FG0RW00.XXXTSPAG = FG0RW00.TA5TSQIX; /* Default to highest*/
      end

      TA5REC.TA5TSQIX = FG0RW00.XXXTSPAG; /* Page number*/

      FG0RS04(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set FG0RM001.XXXLITPG skip; /* "PAGE" literal*/
    FG0RM001.XXXTSPAG = FG0RW00.XXXTSPAG; /* Current page*/
    set FG0RM001.XXXLITOF skip; /* "OF" literal*/
    FG0RM001.TA5TSQIX = FG0RW00.TA5TSQIX; /* Highest page*/

  end

   /* -------------------------------------------------------*/
   /* Darken all the fcst fields on the screen*/
   /* -------------------------------------------------------*/

  FG0RW00.FG0RWIXM = 1;

  while (FG0RW00.FG0RWIXM <= 14)
    FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXM - 1; /* map index*/
    FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF * 6 + 1;
    FG0RW00.FG0RWIXE = FG0RW00.FG0RWIXF + 6 - 1;

    while (FG0RW00.FG0RWIXF <= FG0RW00.FG0RWIXE) /* End of screen*/
      set FG0RM001.FG0RMFCS[FG0RWIXF] initialAttributes;
      FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF + 1;
    end

    FG0RW00.FG0RWIXM = FG0RW00.FG0RWIXM + 1;

  end

   /* ------------------------------------------------------*/
   /* Move the heading*/
   /* ------------------------------------------------------*/

  FG0RW00.FG0RWIXF = 1; /* Initialize the heading index*/
  FG0RW00.FG0RWIXM = FG0RW00.FG0RWLEF; /* Initialize the map index*/

  if (FG0RW00.FG0RW-MON-LEFT[FG0RWPGX] == "Y") /* wnd page of the season*/
    FG0RW00.FG0RWREM = FG0RW00.FG0RWSIN[FG0RWSNX] - 6;
    FG0RW00.FG0RWRIG = FG0RW00.FG0RWLEF + FG0RW00.FG0RWREM - 1;
  else
    if (FG0RW00.FG0RWSIN[FG0RWSNX] <= 6)
      FG0RW00.FG0RWRIG = FG0RW00.FG0RWLEF + FG0RW00.FG0RWSIN[FG0RWSNX] - 1;
    else
      FG0RW00.FG0RWRIG = FG0RW00.FG0RWLEF + 6 - 1;
    end
  end

  while (FG0RW00.FG0RWIXF <= 6) /* Until end of page*/
    if (FG0RW00.FG0RWIXM <= FG0RW00.FG0RWRIG) /* end of range*/

      FG0RM001.FG0RMHDG[FG0RWIXF] = FG0RW00.FG0RWHYM[FG0RWIXM];
      set FG0RM001.FG0RMHDG[FG0RWIXF] skip;

    else
      set FG0RM001.FG0RMHDG[FG0RWIXF] initialAttributes;
    end

    FG0RW00.FG0RWIXM = FG0RW00.FG0RWIXM + 1; /* Increment the heading index*/
    FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF + 1; /* Increment the heading index*/

  end

   /* ------------------------------------------------------*/
   /* Move detail lines*/
   /* ------------------------------------------------------*/

  FG0RW00.FG0RWIXM = 1; /* Initialize the map index*/
  FG0RW00.FG0RWSQT = 0; /* Initialize the sub total field*/

  while (FG0RW00.FG0RWIXM <= 14
   && FG0RW01.SYBSTGNB[FG0RWIXM] > " ")

    FG0RM001.SYBSTGNM[FG0RWIXM] = FG0RW01.SYBSTGNM[FG0RWIXM];

    /* -------------------------------------------------*/
     /* Move forecast quantity fields*/
    /* -------------------------------------------------*/

    if (FG0RW00.FG0RW-MON-LEFT[FG0RWPGX] == "Y") /* 2nd page of the season*/
      FG0RW00.FG0RWREM = FG0RW00.FG0RWSIN[FG0RWSNX] - 6;
      FG0RS07(); /* calculate subtotal from 1st page of the season*/
    else
      if (FG0RW00.FG0RWSIN[FG0RWSNX] <= 6)
        FG0RW00.FG0RWREM = FG0RW00.FG0RWSIN[FG0RWSNX];
      else
        FG0RW00.FG0RWREM = 6;
      end
      FG0RW00.FG0RWTSB[FG0RWIXM] = 0;
    end

    FG0RW00.FG0RWIXN = 1; /* no. of month processed*/

    FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXM - 1;
    FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF * 6 + 1; /* Initial value for fcs fld*/
    FG0RW00.FG0RWIXE = FG0RW00.FG0RWIXF + 6 - 1;

    FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXM - 1;
    FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW * 12 + FG0RW00.FG0RWLEF; /* Disp indx*/
    FG0RW00.FG0RWIXT = FG0RW00.FG0RWIXM - 1;
    FG0RW00.FG0RWIXT = FG0RW00.FG0RWIXT * 12 + FG0RW00.FG0RWEND;
                                   /* Range indx*/

    while (FG0RW00.FG0RWIXF <= FG0RW00.FG0RWIXE)
                                   /* Until end of page(right end)*/
      if (FG0RW00.FG0RWIXN <= FG0RW00.FG0RWREM)

        FG0RM001.FG0RMFCS[FG0RWIXF] = FG0RW01.FG0RMFCS[FG0RWIXW];
        FG0RW00.FG0RWTSB[FG0RWIXM] = FG0RW00.FG0RWTSB[FG0RWIXM] +                                    FG0RW01.FG0RWFCS[FG0RWIXW];
                                     /* Subtotal for each style group*/
        FG0RW00.FG0RWSQT = FG0RW00.FG0RWSQT + FG0RW01.FG0RWFCS[FG0RWIXW];
                                     /* Total for all subtotals*/

      end

      FG0RS08(); /* Unprotec the fcst fields*/

      FG0RW00.FG0RWIXN = FG0RW00.FG0RWIXN + 1;
      FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF + 1;
      FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW + 1;

    end

    /* -----------------------------------------------------*/
    /* If reach the end of the page and next page doesn't*/
    /* have any month within the same season,*/
    /* then show the subtotal & total on the current page.*/
    /* -----------------------------------------------------*/

    if (FG0RW00.FG0RWIXF > FG0RW00.FG0RWIXE /* end of page*/
     || FG0RW00.FG0RWIXN > FG0RW00.FG0RWSIN[FG0RWSNX]) /* end of season*/

      if (FG0RW00.FG0RWIXN > FG0RW00.FG0RWSIN[FG0RWSNX])
        FG0RS09(); /* Process total*/
      else
        if (FG0RW00.FG0RW-MON-LEFT[FG0RWPGX] == "Y") /* 2nd page of seas*/
          FG0RS09(); /* Process total*/
        else
          set FG0RM001.FG0RMSHD[1] initialAttributes; /* Subtotal*/
          set FG0RM001.FG0RMSHD[2] initialAttributes;
          set FG0RM001.FG0RMSHP[1] initialAttributes; /* Subtotal pct*/
          set FG0RM001.FG0RMSHP[2] initialAttributes;
          set FG0RM001.FG0RMGHD[1] initialAttributes; /* Grand total*/
          set FG0RM001.FG0RMGHD[2] initialAttributes;
          set FG0RM001.FG0RMGHP[1] initialAttributes; /* Grand total pct*/
          set FG0RM001.FG0RMGHP[2] initialAttributes;
          FG0RW00.FG0RWNPG = FG0RW00.FG0RWPGX + 1;
          FG0RW00.FG0RW-MON-LEFT[FG0RWNPG] = "Y";
        end
      end

    end

    FG0RW00.FG0RWIXM = FG0RW00.FG0RWIXM + 1;

  end

  FG0RW00.FG0RWIND = FG0RW00.FG0RWIXM; /* Save the last row*/

   /* ----------------------------------------------------*/
   /* Move the total line*/
   /* ----------------------------------------------------*/

  FG0R211(); /* Process the total line*/

end // end FG0R210

// Calculate total & pct
Function FG0R211()

  FG0RM001.SYBSTGNM[FG0RWIXM] = "   TOTAL";

  FG0RW00.FG0RWSQT = 0; /* Initialize the total of subtotals*/

  if (FG0RW00.FG0RW-MON-LEFT[FG0RWPGX] == "Y") /* 2nd page of the season*/
    FG0RW00.FG0RWREM = FG0RW00.FG0RWSIN[FG0RWSNX] - 6;
    FG0RS20(); /* calculate subtotal from 1st page of the season*/
  else
    if (FG0RW00.FG0RWSIN[FG0RWSNX] <= 6)
      FG0RW00.FG0RWREM = FG0RW00.FG0RWSIN[FG0RWSNX];
    else
      FG0RW00.FG0RWREM = 6;
    end
  end

  FG0RW00.FG0RWIXN = 1; /* no. of month processed*/

  FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXM - 1;
  FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF * 6 + 1; /* Initial value for fcs fld*/
  FG0RW00.FG0RWIXE = FG0RW00.FG0RWIXF + FG0RW00.FG0RWREM - 1;

  FG0RW00.FG0RWIXW = FG0RW00.FG0RWLEF;
                                   /* Initialize grand total index*/

  while (FG0RW00.FG0RWIXF <= FG0RW00.FG0RWIXE)
                                   /* Until end of page(right end)*/
    if (FG0RW00.FG0RWIXN <= FG0RW00.FG0RWREM)

      FFXREC.FFXNUMB = FG0RW00.FG0RWGDT[FG0RWIXW];
      XSFFS10();
      FG0RM001.FG0RMFCS[FG0RWIXF] = FFXREC.FFXCHAR;

      set FG0RM001.FG0RMFCS[FG0RWIXF] skip;

      FG0RW00.FG0RWSQT = FG0RW00.FG0RWSQT + FG0RW00.FG0RWGDT[FG0RWIXW];

    end

    FG0RW00.FG0RWIXN = FG0RW00.FG0RWIXN + 1;
    FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF + 1;
    FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW + 1;

  end

  if (FG0RW00.FG0RWIXF > FG0RW00.FG0RWIXE /* End of page*/
   || FG0RW00.FG0RWIXN > FG0RW00.FG0RWSIN[FG0RWSNX]) /* End of season*/

    if (FG0RW00.FG0RWIXN > FG0RW00.FG0RWSIN[FG0RWSNX]) /* End of season*/
      FG0RS15(); /* Unprotect the fields*/
    else /* End of page*/
      if (FG0RW00.FG0RW-MON-LEFT[FG0RWPGX] == "Y") /* 2nd page of the seas*/
        FG0RS15();
      else
        set FG0RM001.FG0RMSUB[FG0RWIXM] initialAttributes;
        set FG0RM001.FG0RMGND[FG0RWIXM] initialAttributes;
        set FG0RM001.FG0RWSPT[FG0RWIXM] initialAttributes;
        set FG0RM001.FG0RMSHD[1] initialAttributes;
        set FG0RM001.FG0RMSHD[2] initialAttributes;
        set FG0RM001.FG0RMSHP[1] initialAttributes;
        set FG0RM001.FG0RMSHP[2] initialAttributes;
        set FG0RM001.FG0RMGHD[1] initialAttributes;
        set FG0RM001.FG0RMGHD[2] initialAttributes;
        set FG0RM001.FG0RMGHP[1] initialAttributes;
        set FG0RM001.FG0RMGHP[2] initialAttributes;
        FG0RS17(); /* Darken the subtot % for each stygrp*/
      end
    end
  end
end // end FG0R211

// Check attention identifier
Function FG0R300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (FG0RW00.FG0RWSWR == "Y") /* Request for data*/
      set FG0RW01 empty; /* M001 display storage*/
    end

    FG0RW00.FG0RWSWF = "Y"; /* Format the map switch*/
    FG0RW00.FG0RWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FG0RM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (FG0RW00.FG0RWMST == "Y")

        FG0R110(); /* Purge temporary storage*/

        XSFFS01(); /* Exit to another application*/

        set FG0RM001.CATOAP cursor, bold; /* Highlight*/

      else

        if (FG0RW00.FG0RWERR == "Y")
                                   /* Warning msg already shown once*/

          FG0RW00.FG0RWERR = "N"; /* Clear the error switch*/
          FG0R110(); /* Purge temporary storage*/
          XSFFS01(); /* Exit to another application*/
          set FG0RM001.CATOAP cursor, bold; /* Highlight*/

        else

          COMMAREA.CATOAP = " "; /* TO application*/
          FFWREC.XXXMODID = "300"; /* Module identification*/
          converseLib.validationFailed(369); /* Indicate update master fcst*/
          FG0RW00.FG0RWERR = "Y"; /* Set the error switch*/

        end

      end

    else

      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/

      if (COMMAREA.CAFROMAP == "FG0B") /* From application*/
        COMMAREA.CACURRAP = "FG0B"; /* Return to application*/
      else
        COMMAREA.CACURRAP = "FG0I"; /* Return to application*/
      end

      COMMAREA.CAITEM = "FG0RM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      if (COMMAREA.CAFROMAP == "FG0B") /* From application*/
        COMMAREA.CATOAP = "FG0B"; /* TO application*/
      else
        COMMAREA.CATOAP = "FG0I"; /* TO application*/
      end
    end

    if (FG0RW00.FG0RWMST == "Y")

      FG0R110(); /* Purge temporary storage*/

      XSFFS01(); /* Exit to another application*/

    else

      if (FG0RW00.FG0RWERR == "Y") /* Warning msg already shown once*/

        FG0RW00.FG0RWERR = "N"; /* Clear the error switch*/
        FG0R110(); /* Purge temporary storage*/
        XSFFS01(); /* Exit to another application*/

      else

        COMMAREA.CATOAP = " "; /* TO application*/
        FFWREC.XXXMODID = "300"; /* Module identification*/
        converseLib.validationFailed(369); /* Indicate update master fcst*/
        FG0RW00.FG0RWERR = "Y"; /* Set the error switch*/

      end

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, reset the error message switch.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FG0RW00.FG0RWERR = "N";
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf15) /* and PF15 was not pressed*/

    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

end // end FG0R300

// Reset highlighted fields
Function FG0R400()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FG0RM001.FG0RMSEM[1] initialAttributes; /* Season end month*/
  set FG0RM001.FG0RMSEM[2] initialAttributes;
  set FG0RM001.FG0RMSEM[3] initialAttributes;
  set FG0RM001.FG0RMSEM[4] initialAttributes;

  set FG0RM001.CATOAP initialAttributes; /* Commarea TO application*/
  set FG0RM001.CAITEM initialAttributes; /* Commarea application data*/

  if (FG0RW00.FG0RW-MON-LEFT[FG0RWPGX] == "Y") /* 2nd season of the page*/
    FG0RW00.FG0RWREM = FG0RW00.FG0RWSIN[FG0RWSNX] - 6;
    FG0RW00.FG0RWIXT = FG0RW00.FG0RWREM + 1;
  else
    if (FG0RW00.FG0RWSIN[FG0RWSNX] <= 6)
      FG0RW00.FG0RWIXT = FG0RW00.FG0RWSIN[FG0RWSNX] + 1;
    else
      FG0RW00.FG0RWIXT = 7;
    end
  end

  if (" " in FG0RM001.FG0RMHDG) /* Find the position of end of range*/
    FG0RW00.FG0RWIXT = sysVar.arrayIndex;
  end

  FG0RW00.FG0RWIXM = 1;

  while (FG0RW00.FG0RWIXM <= 14 /* Until end of page*/
   && FG0RM001.SYBSTGNM[FG0RWIXM] > " ") /* or end of the list*/

    FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXM - 1;
    FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF * 6 + 1;

    if (FG0RW00.FG0RW-MON-LEFT[FG0RWPGX] == "Y") /* 2nd season of the page*/
      FG0RW00.FG0RWIXE = FG0RW00.FG0RWIXF + FG0RW00.FG0RWREM - 1;
    else
      if (FG0RW00.FG0RWSIN[FG0RWSNX] <= 6)
        FG0RW00.FG0RWIXE = FG0RW00.FG0RWIXF + FG0RW00.FG0RWSIN[FG0RWSNX] - 1;
      else
        FG0RW00.FG0RWIXE = FG0RW00.FG0RWIXF + 6 - 1;
      end
    end

    FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXM - 1;
    FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW * 6 + FG0RW00.FG0RWIXT;

    while (FG0RW00.FG0RWIXF <= FG0RW00.FG0RWIXE
     /* Until end of page(left end)*/
     && FG0RW00.FG0RWIXF < FG0RW00.FG0RWIXW) /* or end of range*/

      set FG0RM001.FG0RMFCS[FG0RWIXF] normal; /* Forecast quantity field*/

      FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF + 1;

    end

    FG0RW00.FG0RWIXM = FG0RW00.FG0RWIXM + 1;

  end
end // end FG0R400

// Verify the entered data
Function FG0R500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FG0RM001.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FG0RM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7  /* Scroll back request*/
   || converseVar.eventKey is pf8  /* or scroll forward request*/
   || converseVar.eventKey is pf10 /* or scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/

    FG0R510(); /* Verify scroll request*/

  else

    /* ------------------------------------------------------------*/
     /* Verify data in the line.*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is enter /* ENTER was pressed*/
     && FG0RW00.FG0RWSWO == "Y")      /* Indicate data was obtained*/

      FG0R520(); /* Verify forecast quantity*/

    else

      FG0R530(); /* Verify data changed for PF15*/

    end

  end
   /* ------------------------------------------------------------*/
   /* Verify season end months.*/
   /* ------------------------------------------------------------*/

  FG0R540();

   /* ------------------------------------------------------------*/
   /* Verify the passed keys.*/
   /* ------------------------------------------------------------*/

  FG0R550();

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FG0R500

// Verify scroll request
Function FG0R510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FG0RW00.XXXTSPAG < 2)       /* and no previous pages*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FG0RW00.XXXTSPAG >= FG0RW00.TA5TSQIX) /* and no more pages*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left request*/

    if (FG0RW00.FG0RWPGX == 1) /* current page is the 1st page*/

      FFWREC.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(23); /* No more columns to display*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If scroll right was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right request*/

    if (FG0RW00.FG0RWRIG == FFZREC.FFZNUMMO) /* and no more months*/

      FFWREC.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(24); /* No more columns to display*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  FG0RW00.FG0RWIXM = 14; /* Initialize display index*/

  while (FG0RW00.FG0RWIXM >= 1) /* Until end of the page*/

    if (FG0RW01.SYBSTGNB[FG0RWIXM] > " ")

      FG0RW00.FG0RWIXE = FG0RW00.FG0RWIXM - 1;
      FG0RW00.FG0RWIXE = FG0RW00.FG0RWIXE * 6 + 1;

      if (FG0RW00.FG0RW-MON-LEFT[FG0RWPGX] == "Y") /* 2nd page of season*/

        FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXM - 1;
        FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF * 6 +                           FG0RW00.FG0RWSIN[FG0RWSNX] - 6;

        FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXM - 1;
        FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW * 12 + FG0RW00.FG0RWLEF;
        FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW +                           FG0RW00.FG0RWSIN[FG0RWSNX] - 6 - 1;

      else

        FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXM - 1;

        if (FG0RW00.FG0RWSIN[FG0RWSNX] <= 6)
          FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF * 6 +                              FG0RW00.FG0RWSIN[FG0RWSNX];
        else
          FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF * 6 + 6;
        end

        FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXM - 1;
        FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW * 12 + FG0RW00.FG0RWLEF;

        if (FG0RW00.FG0RWSIN[FG0RWSNX] <= 6)
          FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW +                              FG0RW00.FG0RWSIN[FG0RWSNX] - 1;
        else
          FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW + 6 - 1;
        end

      end

      while (FG0RW00.FG0RWIXF >= FG0RW00.FG0RWIXE)

        if (FG0RM001.FG0RMFCS[FG0RWIXF] != FG0RW01.FG0RMFCS[FG0RWIXW]
         && FFWREC.YSMXDV == "10")

          FFWREC.XXXMODID = "510"; /* Module identification*/
          set FG0RM001.FG0RMFCS[FG0RWIXF] cursor, bold; /* Highlight*/
          converseLib.validationFailed(5); /* Modifications not allowed*/

        end

        FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF - 1; /* Decrement map index*/
        FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW - 1; /* Decrement storage index*/

      end
    end

    FG0RW00.FG0RWIXM = FG0RW00.FG0RWIXM - 1; /* Decrement disply index*/

  end

  if (FG0RM001.FG0RMSEM[4] != FG0RW00.FG0RWSEM[4]) /* Season end mo chng*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG0RM001.FG0RMSEM[4] cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/

  end

  if (FG0RM001.FG0RMSEM[3] != FG0RW00.FG0RWSEM[3]) /* Season end mo chng*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG0RM001.FG0RMSEM[3] cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/

  end

  if (FG0RM001.FG0RMSEM[2] != FG0RW00.FG0RWSEM[2]) /* Season end mo chng*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG0RM001.FG0RMSEM[2] cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/

  end

  if (FG0RM001.FG0RMSEM[1] != FG0RW00.FG0RWSEM[1]) /* Season end mo chng*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG0RM001.FG0RMSEM[1] cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/

  end

end // end FG0R510

// Verify data in the line
Function FG0R520()
   /* ------------------------------------------------------------*/
   /* Convert the entered quantities from CHAR format to NUM*/
   /* format.*/
   /* Check the quantities to make sure they are not negative*/
   /* values.*/
   /* ------------------------------------------------------------*/

  FG0RW00.FG0RWIXM = 14; /* Initialize disp index*/

  while (FG0RW00.FG0RWIXM >= 1) /* Until end of the page*/

    if (FG0RW01.SYBSTGNB[FG0RWIXM] > " ")

      FG0RW00.FG0RWIXE = FG0RW00.FG0RWIXM - 1;
      FG0RW00.FG0RWIXE = FG0RW00.FG0RWIXE * 6 + 1;

      FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXM - 1;

      FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXM - 1;
      FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW * 12 + FG0RW00.FG0RWLEF;

      if (FG0RW00.FG0RW-MON-LEFT[FG0RWPGX] == "Y") /* 2nd page of the seas*/

        FG0RW00.FG0RWREM = FG0RW00.FG0RWSIN[FG0RWSNX] - 6;
        FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF * 6 + FG0RW00.FG0RWREM;
        FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW + FG0RW00.FG0RWREM - 1;
        FG0RW00.FG0RWIXT = FG0RW00.FG0RWLEF + FG0RW00.FG0RWREM - 1;

      else
        if (FG0RW00.FG0RWSIN[FG0RWSNX] <= 6)
          FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF * 6 +                             FG0RW00.FG0RWSIN[FG0RWSNX];
          FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW +                             FG0RW00.FG0RWSIN[FG0RWSNX] - 1;
          FG0RW00.FG0RWIXT = FG0RW00.FG0RWLEF +                             FG0RW00.FG0RWSIN[FG0RWSNX] - 1;
        else
          FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF * 6 + 6;
          FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW + 6 - 1;
          FG0RW00.FG0RWIXT = FG0RW00.FG0RWLEF + 6 - 1;
        end
      end

      while (FG0RW00.FG0RWIXF >= FG0RW00.FG0RWIXE)

        if (FG0RM001.FG0RMFCS[FG0RWIXF] > " "
         && FG0RM001.FG0RMFCS[FG0RWIXF] != FG0RW01.FG0RMFCS[FG0RWIXW])

          FG0RW00.FG0RWMST = "N";

          FFXREC.FFXCHAR = FG0RM001.FG0RMFCS[FG0RWIXF];
          XSFFS11(); /* Translate value format*/

          if (FFXREC.FFXRTNCD == "0") /* Normal return*/

            if (FFXREC.FFXNUMB < 0) /* Negative value*/

              FFWREC.XXXMODID = "520"; /* Module identification*/
              converseLib.validationFailed(10); /* Invalid value entered*/
              set FG0RM001.FG0RMFCS[FG0RWIXF] cursor, bold; /* Highlighted*/

            else

              FG0R521(); /* Update grand total areas*/

            end

          else

            FFWREC.XXXMODID = "520"; /* Module identification*/
            converseLib.validationFailed(10); /* Indicate invalid value entered*/
            set FG0RM001.FG0RMFCS[FG0RWIXF] cursor, bold; /* Highlighted*/

          end

        else

          if (FG0RM001.FG0RMFCS[FG0RWIXF] == " ")

            if (FG0RM001.FG0RMFCS[FG0RWIXF] != FG0RW01.FG0RMFCS[FG0RWIXW])

              FG0RW00.FG0RWMST = "N";

            end

            FFXREC.FFXNUMB = 0;

            FG0R521(); /* Update grand totals & change flags*/

          end

        end

        FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF - 1; /* Decrement map index*/
        FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW - 1; /* Decrement storage index*/
        FG0RW00.FG0RWIXT = FG0RW00.FG0RWIXT - 1;
                                   /* Decrement grand tot indx*/

      end

    end

    FG0RW00.FG0RWIXM = FG0RW00.FG0RWIXM - 1; /* decrement display index*/

  end


end // end FG0R520

// Update grand tots & chng flags
Function FG0R521()

  if (FG0RM001.FG0RMFCS[FG0RWIXF] != FG0RW01.FG0RMFCS[FG0RWIXW])

    /* -------------------------------------------------------*/
      /* Turn on the change flags.*/
    /* -------------------------------------------------------*/

    FG0RW01.FG0RWFCH[FG0RWIXW] = "Y"; /* Mo fcst changed*/
    FG0RW01.FG0RWSCH[FG0RWIXM] = "Y"; /* GRP tot changed*/
    FG0RW00.FG0RWGCH[FG0RWIXT] = "Y"; /* Monthly grand tot changed*/
    FFWREC.FFWMODSW = "Y"; /* Indicate data modified*/
    FG0RW00.FG0RWSWU = "Y"; /* Storage update switch*/

    /* -------------------------------------------------------*/
      /* Rounding the updated field.*/
    /* -------------------------------------------------------*/

    XSFFS10();

    /* -------------------------------------------------------*/
      /* Update the grand total and monthly grand totals by*/
      /* subtracting the old forecast and adding the new one.*/
    /* -------------------------------------------------------*/

    FG0RW00.FG0RWFCS = FG0RW01.FG0RWFCS[FG0RWIXW];

    FG0RW00.FG0RWGQT = FG0RW00.FG0RWGQT - FG0RW00.FG0RWFCS;
    FG0RW00.FG0RWGQT = FG0RW00.FG0RWGQT + FFXREC.FFXNUMB;

    FG0RW00.FG0RWTOT = FG0RW01.FG0RWGND[FG0RWIXM];
    FG0RW01.FG0RWGND[FG0RWIXM] = FG0RW00.FG0RWTOT - FG0RW00.FG0RWFCS;
    FG0RW00.FG0RWTOT = FG0RW01.FG0RWGND[FG0RWIXM];
    FG0RW01.FG0RWGND[FG0RWIXM] = FG0RW00.FG0RWTOT + FFXREC.FFXNUMB;

    FG0RW00.FG0RWTOT = FG0RW00.FG0RWGDT[FG0RWIXT];
    FG0RW00.FG0RWGDT[FG0RWIXT] = FG0RW00.FG0RWTOT - FG0RW00.FG0RWFCS;
    FG0RW00.FG0RWTOT = FG0RW00.FG0RWGDT[FG0RWIXT];
    FG0RW00.FG0RWGDT[FG0RWIXT] = FG0RW00.FG0RWTOT + FFXREC.FFXNUMB;

    FG0RW01.FG0RWFCS[FG0RWIXW] = FFXREC.FFXNUMB;
    FG0RW01.FG0RMFCS[FG0RWIXW] = FFXREC.FFXCHAR;

  end

end // end FG0R521

// Verify data changed for PF15
Function FG0R530()

  FG0RW00.FG0RWIXM = 14; /* Initialize disp index*/

  while (FG0RW00.FG0RWIXM >= 1) /* Until end of the page*/

    if (FG0RW01.SYBSTGNB[FG0RWIXM] > " ")

      FG0RW00.FG0RWIXE = FG0RW00.FG0RWIXM - 1;
      FG0RW00.FG0RWIXE = FG0RW00.FG0RWIXE * 6 + 1;

      FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXM - 1;
      FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXM - 1;
      FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW * 12 + FG0RW00.FG0RWLEF;

      if (FG0RW00.FG0RW-MON-LEFT[FG0RWPGX] == "Y") /* 2nd page of seas*/
        FG0RW00.FG0RWREM = FG0RW00.FG0RWSIN[FG0RWSNX] - 6;
        FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF * 6 + FG0RW00.FG0RWREM;
        FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW + FG0RW00.FG0RWREM - 1;
      else
        if (FG0RW00.FG0RWSIN[FG0RWSNX] <= 6)
          FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF * 6 +                              FG0RW00.FG0RWSIN[FG0RWSNX];
          FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW +                              FG0RW00.FG0RWSIN[FG0RWSNX] - 1;
        else
          FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF * 6 + 6;
          FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW + 6 - 1;
        end
      end

      while (FG0RW00.FG0RWIXF >= FG0RW00.FG0RWIXE)

        if (FG0RM001.FG0RMFCS[FG0RWIXF] != FG0RW01.FG0RMFCS[FG0RWIXW])

          FFWREC.XXXMODID = "530"; /* Module identification*/
          converseLib.validationFailed(247); /* Invalid value entered*/
          set FG0RM001.FG0RMFCS[FG0RWIXF] cursor, bold; /* Highlighted*/

        end

        FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF - 1; /* Decrement map index*/
        FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW - 1; /* Decrement storage index*/

      end

    end

    FG0RW00.FG0RWIXM = FG0RW00.FG0RWIXM - 1; /* decrement display index*/

  end


end // end FG0R530

// Verify months in season
Function FG0R540()
   /* ------------------------------------------------------------*/
   /* If season end month changed, re-position the cursor*/
   /* ------------------------------------------------------------*/

  if (FG0RM001.FG0RMSEM[1] != FG0RW00.FG0RWSEM[1] /* seas end month changed*/
   || FG0RM001.FG0RMSEM[2] != FG0RW00.FG0RWSEM[2] 
   || FG0RM001.FG0RMSEM[3] != FG0RW00.FG0RWSEM[3] 
   || FG0RM001.FG0RMSEM[4] != FG0RW00.FG0RWSEM[4])

    FG0RW00.FG0RWLEF = 1; /* Left index*/
    FG0RW00.FG0RWSNX = 1; /* season index*/
    FG0RW00.FG0RWPGX = 1; /* page index*/
    FG0RW00.XXXTSPAG = 1; /* page no.*/
    move 0 to FG0RW00.FG0RW-PAGS[1] for all; /* season on each page*/
    FG0RW00.FG0RW-PAGS[1] = 1; /* season on the 1st page*/
    move "N" to FG0RW00.FG0RW-MON-LEFT[1] for all; /* 2nd page of seas flag*/
    FG0RW00.FG0RW-NEXT = "N"; /* next season flag*/
    move 0 to FG0RW00.FG0RWTSB[1] for all; /* subtotal*/

    if (FG0RW00.FG0RWSEM[1] == 0) /* 1st time thru*/
      FG0RW00.FG0RWSWR = "Y"; /* request for data switch*/
    end

    FG0RW00.FG0RWSWF = "Y"; /* Format data switch*/

    if (converseVar.validationMsgNum == 0) /* no error*/
      move 0 to FG0RW00.FG0RWSEM[1] for all; /* season end month - mm*/
      move 0 to FG0RW00.FG0RWSMO[1] for all; /* season end month - ccyymm*/
      move 0 to FG0RW00.FG0RWSIN[1] for all; /* no. of months in season*/
    end

  end

   /* ------------------------------------------------------------*/
   /* validate season end months*/
   /* ------------------------------------------------------------*/

  FG0RW00.FG0RWWBD = FFWREC.FFABEGMO; /* beginning date*/
  FG0RW00.FG0RWWED = FFWREC.FFAENDMO; /* ending date*/

   /* figure out number of seasons*/

  FG0RW00.FG0RWNSS = 0; /* reset number of seasons*/
  FG0RW00.FG0RWIXW = 4; /* index*/
  while (FG0RW00.FG0RWIXW > 0)
    if (FG0RM001.FG0RMSEM[FG0RWIXW] > 0)
      FG0RW00.FG0RWNSS = FG0RW00.FG0RWIXW; /* number of seasons*/
      FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW - 4; /* force out of loop*/

    else

      FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW - 1;
    end

  end

   /* check for no seasons entered*/

  if (FG0RW00.FG0RWNSS == 0) /* no season lengths found*/
    FG0RS02(); /* obtain default season end months*/
  end

   /* If no season end month entered then check the length of the range,*/
   /* if <= 6 months use default (end month of the range)*/

  if (FG0RW00.FG0RWNSS == 0) /* no season lengths found*/
    if (FG0RW00.FG0RWBYY == FG0RW00.FG0RWEYY) /* same year*/
      FG0RW00.FG0RWMOS = FG0RW00.FG0RWEMM - FG0RW00.FG0RWBMM + 1;
    else
      FG0RW00.FG0RWMOS = FG0RW00.FG0RWEMM + 12 - FG0RW00.FG0RWBMM + 1;
    end

    if (FG0RW00.FG0RWMOS <= 6)
      FG0RW00.FG0RWNSS = 1;
      FG0RM001.FG0RMSEM[1] = FG0RW00.FG0RWEMM; /* range end month*/
    end
  end

  if (FG0RW00.FG0RWNSS == 0)
    FFWREC.XXXMODID = "540"; /* Module identification*/
    set FG0RM001.FG0RMSEM[1] cursor, bold; /* Highlight*/
    converseLib.validationFailed(442); /* required field*/
    return;
  end

   /* check for embedded zeros*/

  FG0RW00.FG0RWIXW = FG0RW00.FG0RWNSS; /* index*/
  while (FG0RW00.FG0RWIXW > 0)
    if (FG0RM001.FG0RMSEM[FG0RWIXW] == 0) /* check for embedded zeros*/
      FFWREC.XXXMODID = "540"; /* Module identification*/
      set FG0RM001.FG0RMSEM[FG0RWIXW] cursor, bold; /* Highlight*/
      converseLib.validationFailed(440); /* required field*/
    end
    FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW - 1;
  end

  if (converseVar.validationMsgNum > 0)
    return;
  end

   /* check for invalid season end months*/

  FG0RW00.FG0RWIXW = FG0RW00.FG0RWNSS; /* index*/
  while (FG0RW00.FG0RWIXW > 0)

    if (FG0RM001.FG0RMSEM[FG0RWIXW] < 1 /* check for month error*/
     || FG0RM001.FG0RMSEM[FG0RWIXW] > 12)
      FFWREC.XXXMODID = "540"; /* Module identification*/
      set FG0RM001.FG0RMSEM[FG0RWIXW] cursor, bold; /* Highlight*/
      converseLib.validationFailed(010); /* required field*/
      return;
    end

    if (FG0RM001.FG0RMSEM[FG0RWIXW] != FG0RW00.FG0RWEMM
     && FG0RW00.FG0RWIXW == FG0RW00.FG0RWNSS) /* last end month*/
      FFWREC.XXXMODID = "540"; /* Module identification*/
      set FG0RM001.FG0RMSEM[FG0RWIXW] cursor, bold; /* Highlight*/
      converseLib.validationFailed(447); /* required field*/
      return;

    else

      FG0RS30(); /* check for invalid entry*/

    end

    FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW - 1;

  end

  FG0RW00.FG0RWIXW = FG0RW00.FG0RWNSS;
  while (FG0RW00.FG0RWIXW > 0) /* nbr of seasons*/
    FG0RW00.FG0RWIXN = FG0RW00.FG0RWIXW - 1;
    if (FG0RW00.FG0RWIXN != 0)
      if (FG0RW00.FG0RWSMO[FG0RWIXN] >= FG0RW00.FG0RWSMO[FG0RWIXW])
        FFWREC.XXXMODID = "540"; /* Module identification*/
        set FG0RM001.FG0RMSEM[FG0RWIXN] cursor, bold; /* Highlight*/
        converseLib.validationFailed(444); /* sesn end mo > next sesn end mo*/
      end
    end
    FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW - 1;
  end

  FG0RW00.FG0RWIXW = FG0RW00.FG0RWNSS;
  FG0RW00.FG0RWMOS = 0; /* clear total months work area*/
  while (FG0RW00.FG0RWIXW > 0) /* nbr of seasons*/
    FG0RW00.FG0RWSEM[FG0RWIXW] = FG0RM001.FG0RMSEM[FG0RWIXW];
    FG0RS05(); /* calculate no of mos in each sesn*/
    FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW - 1;
  end

   /* ---------------------------------------------------------*/
      /* Calculate the right cursor*/
   /* ---------------------------------------------------------*/
  if (FG0RW00.FG0RWSWO == "Y") /* Data obtained already*/
    if (FG0RW00.FG0RW-MON-LEFT[FG0RWPGX] == "Y") /* 2nd page of the season*/
      FG0RW00.FG0RWREM = FG0RW00.FG0RWSIN[FG0RWSNX] - 6;
      FG0RW00.FG0RWRIG = FG0RW00.FG0RWLEF + FG0RW00.FG0RWREM - 1;
    else /* 1st page of the season*/
      if (FG0RW00.FG0RWSIN[FG0RWSNX] <= 6)
        FG0RW00.FG0RWRIG = FG0RW00.FG0RWLEF + FG0RW00.FG0RWSIN[FG0RWSNX]         - 1;
      else
        FG0RW00.FG0RWRIG = FG0RW00.FG0RWLEF + 6 - 1;
      end
    end
  else /* data hasn't been obtained yet*/
    FG0RW00.FG0RWRIG = 1;
  end

end // end FG0R540

// Verify passed keys
Function FG0R550()

  if (FFWREC.FFABEGMO == 0  /* Beginning month not passed*/
   || FFWREC.FFAENDMO == 0  /* Ending month not passed*/
   || FFWREC.YSMXDV == "  " /* Division group not passed*/
   || FFWREC.XPCCD == "  "  /* Category not passed*/
   || FFWREC.YPGCD == "  ") /* Type group not passed*/

    FFWREC.XXXMODID = "550"; /* Module identification*/
    converseLib.validationFailed(01); /* Indicate system error*/

  end

end // end FG0R550

// Process valid input request
Function FG0R600()
   /* ------------------------------------------------------------*/
   /* If season end months are changed, update FFWREC*/
   /* ------------------------------------------------------------*/

  if (FFWREC.FFWENDM1 != FG0RW00.FG0RWSMO[1]
   || FFWREC.FFWENDM2 != FG0RW00.FG0RWSMO[2]
   || FFWREC.FFWENDM3 != FG0RW00.FG0RWSMO[3]
   || FFWREC.FFWENDM4 != FG0RW00.FG0RWSMO[4])
    FFWREC.FFWENDM1 = FG0RW00.FG0RWSMO[1];
    FFWREC.FFWENDM2 = FG0RW00.FG0RWSMO[2];
    FFWREC.FFWENDM3 = FG0RW00.FG0RWSMO[3];
    FFWREC.FFWENDM4 = FG0RW00.FG0RWSMO[4];
  end

  if (converseVar.eventKey is pf7  /* Scroll back requested*/
   || converseVar.eventKey is pf8  /* Scroll foreward requested*/
   || converseVar.eventKey is pf10 /* Scroll left requested*/
   || converseVar.eventKey is pf11) /* Scroll right requested*/
    FG0RW00.FG0RWSWF = "Y"; /* Format data switch*/
  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    FG0RW00.XXXTSPAG = FG0RW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    FG0RW00.XXXTSPAG = FG0RW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll left was requested, increment the scrolling*/
   /* index and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left requested*/

    /* ---------------------------*/
    /* Right cursor*/
    /* ---------------------------*/

    if (FG0RW00.FG0RW-MON-LEFT[FG0RWPGX] == "Y") /* 2nd page of the seas*/

      FG0RW00.FG0RWREM = FG0RW00.FG0RWSIN[FG0RWSNX] - 6;
      FG0RW00.FG0RWRIG = FG0RW00.FG0RWRIG - FG0RW00.FG0RWREM;

    else /* 1st page of the season*/

      if (FG0RW00.FG0RWSIN[FG0RWSNX] <= 6)

        FG0RW00.FG0RWRIG = FG0RW00.FG0RWRIG - FG0RW00.FG0RWSIN[FG0RWSNX];

      else

        FG0RW00.FG0RWRIG = FG0RW00.FG0RWRIG - 6;

      end
    end

    FG0RW00.FG0RWPGX = FG0RW00.FG0RWPGX - 1;
    FG0RW00.FG0RWSNX = FG0RW00.FG0RW-PAGS[FG0RWPGX];
                                    /* Season on previous page*/

    /* ---------------------------*/
    /* Left cursor*/
    /* ---------------------------*/

    if (FG0RW00.FG0RW-MON-LEFT[FG0RWPGX] == "Y") /* 2nd page of the seas*/

      FG0RW00.FG0RWREM = FG0RW00.FG0RWSIN[FG0RWSNX] - 6;
      FG0RW00.FG0RWLEF = FG0RW00.FG0RWLEF - FG0RW00.FG0RWREM;

    else /* 1st page of the season*/

      if (FG0RW00.FG0RWSIN[FG0RWSNX] <= 6)

        FG0RW00.FG0RWLEF = FG0RW00.FG0RWLEF - FG0RW00.FG0RWSIN[FG0RWSNX];

      else

        FG0RW00.FG0RWLEF = FG0RW00.FG0RWLEF - 6;

      end
    end

    FG0RW00.FG0RW-NEXT = "N"; /* Reset next season flag*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll right was requested, increment the scrolling*/
   /* index and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right requested*/

    if (FG0RW00.FG0RW-MON-LEFT[FG0RWPGX] == "Y") /* 2nd page of the seas*/

      FG0RW00.FG0RWREM = FG0RW00.FG0RWSIN[FG0RWSNX] - 6;
      FG0RW00.FG0RWLEF = FG0RW00.FG0RWLEF + FG0RW00.FG0RWREM;

    else /* 1st page of the season*/

      if (FG0RW00.FG0RWSIN[FG0RWSNX] <= 6)

        FG0RW00.FG0RWLEF = FG0RW00.FG0RWLEF + FG0RW00.FG0RWSIN[FG0RWSNX];

      else

        FG0RW00.FG0RWLEF = FG0RW00.FG0RWLEF + 6;

      end
    end

    FG0RW00.FG0RWPGX = FG0RW00.FG0RWPGX + 1;

    if (FG0RW00.FG0RW-NEXT == "Y") /* next season*/
      FG0RW00.FG0RWSNX = FG0RW00.FG0RWSNX + 1;
      FG0RW00.FG0RW-NEXT = "N"; /* reset next season flag*/
    end

   /* Season on next page*/
    FG0RW00.FG0RW-PAGS[FG0RWPGX] = FG0RW00.FG0RWSNX;
    return; /* Return to previous process*/

  end

  if (FG0RW00.FG0RWSWO == "Y") /* Indicate data was obtained*/

     /* ------------------------------------------------------------*/
      /* If ENTER was pressed and any forecast being updated, then*/
      /* update the worksheets(style group, style group by month,*/
      /* category, category by month, type group and line).*/
     /* ------------------------------------------------------------*/

    FG0RW00.FG0RWSWF = "Y"; /* Format data switch*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      FG0R610(); /* Process Domestic*/

    end

     /* ------------------------------------------------------------*/
      /* if PF15 was pressed, save the forecasts into master tables.*/
     /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/

      FG0R630(); /* Process PF15 for DOM*/

    end

  end

end // end FG0R600

// Process ENTER key
Function FG0R610()

  FG0RW00.FG0RWVAR = 0; /* initialize variance*/

   /* -----------------------------------------------------*/
   /* Update worksheet by style group by month table*/
   /* -----------------------------------------------------*/

  FG0RW00.FG0RWIXM = 1; /* Initialize map index*/

  while (FG0RW00.FG0RWIXM <= 14
   && FG0RW01.SYBSTGNB[FG0RWIXM] > " ")

    FG0RW00.FG0RWIXW = 1; /* Initialize month index*/

    FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXM - 1;
    FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF * 12 + 1;
    FG0RW00.FG0RWIXE = FG0RW00.FG0RWIXF + 11;

    while (FG0RW00.FG0RWIXF <= FG0RW00.FG0RWIXE)

      if (FG0RW01.FG0RWFCH[FG0RWIXF] == "Y")

        FG0R611(); /* Read DFCAST.VWGMTH01 table*/

        if (FFMREC.ZZZCHGCT != FG0RW01.FG0RWCNT[FG0RWIXF]) /* Recd was changed*/

          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* Roll back all changes*/

          FG0RW00.FG0RWSWR = "Y"; /* Request for data switch*/
          FG0RW00.FG0RWSWU = "N"; /* Reset update switch*/
          FFWREC.XXXMODID = "610"; /* Module identification*/
          FFWREC.XXXMSGNO = 46; /* Indicate update by another*/

          exit stack; /* Exit to display map*/

        else

          FG0R612(); /* Update DFCAST.VWGMTH01 table*/
          FG0RW01.FG0RWCNT[FG0RWIXF] = FFMREC.ZZZCHGCT;
                                   /* save chg cnt*/

        end
      end

      FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF + 1; /* Increment fcst index*/
      FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW + 1; /* Increment month index*/

    end

    FG0RW00.FG0RWIXM = FG0RW00.FG0RWIXM + 1; /* Increment map index*/

  end
   /* -----------------------------------------------------*/
   /* Update worksheet by style group table*/
   /* -----------------------------------------------------*/

  FG0RW00.FG0RWIXM = 1; /* Initialize fcst index*/

  while (FG0RW00.FG0RWIXM <= 14 /* Until end of the page*/
   && FG0RW01.SYBSTGNB[FG0RWIXM] > " ")

    if (FG0RW01.FG0RWSCH[FG0RWIXM] == "Y") /* Grand total for each grp chgd*/

      FG0R613(); /* Read DFCAST.VWSGRP01 table*/
      if (SQLCA.VAGen_SQLCODE == +100)
        FG0R623(); /* Insert DFCAST.VWSGRP01 table*/
      else
        FG0R614(); /* Update DFCAST.VWSGRP01 table*/
      end

    end

    FG0RW00.FG0RWIXM = FG0RW00.FG0RWIXM + 1; /* Increment fcst index*/

  end

   /* -----------------------------------------------------*/
   /* Update worksheets of upper levels.*/
   /* -----------------------------------------------------*/

  if ("Y" in FG0RW00.FG0RWGCH) /* Grand total changed*/

    /* -----------------------------------------------------*/
     /* Update worksheet by category by month table*/
    /* -----------------------------------------------------*/

    FG0RW00.FG0RWIXM = 1; /* Initialize map index*/

    FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXM - 1;
    FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF * 12 + 1;
    FG0RW00.FG0RWIXE = FG0RW00.FG0RWIXF + 11;

    FG0RW00.FG0RWIXW = 1; /* Initialize month index*/

    while (FG0RW00.FG0RWIXF <= FG0RW00.FG0RWIXE)

      if (FG0RW00.FG0RWGCH[FG0RWIXF] == "Y")
                                   /* Grand tot for the month chngd*/

        FG0R615(); /* Read DFCAST.VWCMTH01 table*/

        if (SQLCA.VAGen_SQLCODE == 0) /* If record exists*/

          FG0R616(); /* Update DFCAST.VWCMTH01 table*/

        end
      end

      FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF + 1; /* Increment fcst index*/
      FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW + 1; /* Increment month index*/

    end

    FG0R617(); /* Read DFCAST.VWCAT001 table*/
    FG0R618(); /* Update DFCAST.VWCAT001 table*/

    FG0R619(); /* Read DFCAST.VWTYP01 table*/
    FG0R620(); /* Update DFCAST.VWTYP01 table*/

    FG0R621(); /* Read DFCAST.VWLINE01 table*/
    FG0R622(); /* Update DFCAST.VWLINE01 table*/

    FG0R624(); /* Read DFCAST.VWDGRP01 table*/
    FG0R625(); /* Update DFCAST.VWDGRP01 table*/

  end

   /* ----------------------------------------------------*/
   /* Commit all changes to protected resources.*/
   /* ----------------------------------------------------*/

  if ("Y" in FG0RW01.FG0RWFCH) /* Change has been made*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all changes*/

    FFWREC.XXXMODID = "610"; /* Module identification*/
    FFWREC.XXXMSGNO = 32;
                                   /* Indicate update complete successfully*/
    FFWREC.FFWMODSW = "N"; /* Indicat the data no need to be saved*/
    move "N" to FG0RW01.FG0RWFCH[1] for all; /* Reset the fcst chng flag*/
    move "N" to FG0RW01.FG0RWSCH[1] for all; /* Reset the cat tot chng flag*/
    FG0RW00.FG0RWGCH = "N"; /* Reset the grand total chng flag*/

  end

end // end FG0R610

// Read DFCAST.VWGMTH01 table
Function FG0R611()

  set FFMREC empty; /* Clear the storage row*/

  FFMREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFMREC.YPGCD = FFWREC.YPGCD; /* Type group*/
  FFMREC.SYBSTGNB = FG0RW01.SYBSTGNB[FG0RWIXM]; /* style group*/

  FFMREC.FF4FCTMO = FG0RW00.FG0RWHDG[FG0RWIXW]; /* Forecasted month*/

  try
    call "IO3870" ("S ", SQLCA, FFMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "611"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "READ THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWGMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFMREC.FFMKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0R611

// Update DFCAST.VWGMTH01 table
Function FG0R612()

  FFMREC.FF6SLFCT = FG0RW01.FG0RWFCS[FG0RWIXF]; /* Sales forecast*/

  XX0XS01(); /* Obtain current date and time*/

  FFMREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFMREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO3870" ("U ", SQLCA, FFMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FG0RW00.FG0RWSWR = "Y"; /* Request for data switch*/
      FG0RW00.FG0RWSWU = "N"; /* Reset update switch*/

      FFWREC.XXXMODID = "612"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "612"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWGMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFMREC.FFMKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0R612

// Read DFCAST.VWSGRP001 table
Function FG0R613()

  set FFLREC empty; /* Clear the storage row*/

  FFLREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFLREC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FFLREC.SYBSTGNB = FG0RW01.SYBSTGNB[FG0RWIXM]; /* Style group number*/

  try
    call "IO3880" ("S ", SQLCA, FFLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FG0RW00.FG0RWVAR = FG0RW00.FG0RWVAR + FG0RW01.FG0RWGND[FG0RWIXM] -                        FFLREC.FF6SLFCT;
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "613"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "READ THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFLREC.FFLKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0R613

// Update DFCAST.VWSGRP01 table
Function FG0R614()

  FFLREC.FF6SLFCT = FG0RW01.FG0RWGND[FG0RWIXM]; /* Sales forecast*/

  XX0XS01(); /* Obtain current date and time*/

  FFLREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFLREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO3880" ("U ", SQLCA, FFLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FG0RW00.FG0RWSWR = "Y"; /* Request for data switch*/
      FG0RW00.FG0RWSWU = "N"; /* Reset update switch*/
      FFWREC.XXXMODID = "614"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "614"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFLREC.FFLKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0R614

// Read DFCAST.VWCMTH01 table
Function FG0R615()

  set FFKREC empty; /* Clear the storage row*/

  FFKREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFKREC.XPCCD = FFWREC.XPCCD; /* Category code*/
  FFKREC.YPGCD = FFWREC.YPGCD; /* Type group code*/

  FFKREC.FF4FCTMO = FG0RW00.FG0RWHDG[FG0RWIXW]; /* Forecasted month*/

  try
    call "IO3830" ("S ", SQLCA, FFKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or record not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "615"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "READ THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFKREC.FFKKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0R615

// Update DFCAST.VWCMTH01 table
Function FG0R616()

  FFKREC.FF6SLFCT = FG0RW00.FG0RWGDT[FG0RWIXF]; /* Sales forecast*/

  XX0XS01(); /* Obtain current date and time*/

  FFKREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFKREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO3830" ("U ", SQLCA, FFKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FG0RW00.FG0RWSWR = "Y"; /* Request for data switch*/
      FG0RW00.FG0RWSWU = "N"; /* Reset update switch*/

      FFWREC.XXXMODID = "616"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "616"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFKREC.FFKKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0R616

// Read DFCAST.VWCAT001 table
Function FG0R617()

  set FFJREC empty; /* Clear the storage row*/

  FFJREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFJREC.XPCCD = FFWREC.XPCCD; /* Category code*/
  FFJREC.YPGCD = FFWREC.YPGCD; /* Type group code*/

  try
    call "IO3840" ("S ", SQLCA, FFJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "617"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "READ THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFJREC.FFJKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0R617

// Update DFCAST.VWCAT001 table
Function FG0R618()

  FFJREC.FFECLRFL = "N"; /* Color forecast flag*/

  FFJREC.FF6SLFCT = FFJREC.FF6SLFCT + FG0RW00.FG0RWVAR;

  XX0XS01(); /* Obtain current date and time*/

  FFJREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFJREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO3840" ("U ", SQLCA, FFJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FG0RW00.FG0RWSWR = "Y"; /* Request for data switch*/
      FG0RW00.FG0RWSWU = "N"; /* Reset update switch*/
      FFWREC.XXXMODID = "618"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "618"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFJREC.FFJKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0R618

// Read DFCAST.VWTYP001 table
Function FG0R619()

  set FFIREC empty; /* Clear the storage row*/

  FFIREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFIREC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FFIREC.YPGCD = FFWREC.YPGCD; /* Type group code*/

  try
    call "IO3910" ("S ", SQLCA, FFIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FFIREC.FF6SLFCT = FFIREC.FF6SLFCT + FG0RW00.FG0RWVAR;
                                   /* Apply the var*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "619"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "READ THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWTYP001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFIREC.FFIKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0R619

// Update DFCAST.VWTYP001 table
Function FG0R620()

  XX0XS01(); /* Obtain current date and time*/

  FFIREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFIREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO3910" ("U ", SQLCA, FFIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FG0RW00.FG0RWSWR = "Y"; /* Request for data switch*/
      FG0RW00.FG0RWSWU = "N"; /* Reset update switch*/
      FFWREC.XXXMODID = "620"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "620"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWTYP001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFIREC.FFIKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0R620

// Read DFCAST.VWLINE01 table
Function FG0R621()
   /* ------------------------------------------------------------*/
   /* Select the row to obtain forecast quantity by line.*/
   /* ------------------------------------------------------------*/

  set FFGREC empty; /* Clear up the storage row*/

  FFGREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFGREC.XPLCD = FFWREC.XPLCD; /* Product line code*/

  try
    call "IO3890" ("S ", SQLCA, FFGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FFGREC.FF6SLFCT = FFGREC.FF6SLFCT + FG0RW00.FG0RWVAR; /* Apply variance*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "621"; /* MODULE IDENTIFICATION*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "READ THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFGREC.FFGKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0R621

// Update DFCAST.VWLINE01 table
Function FG0R622()

  XX0XS01(); /* Obtain current date and time*/

  FFGREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFGREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO3890" ("U ", SQLCA, FFGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FG0RW00.FG0RWSWR = "Y"; /* Request for data switch*/
      FG0RW00.FG0RWSWU = "N"; /* Reset update switch*/
      FFWREC.XXXMODID = "622"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "622"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFGREC.FFGKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0R622

// Insert DFCAST.VWSGRP01 table
Function FG0R623()

  FFLREC.FF6SLFCT = FG0RW01.FG0RWGND[FG0RWIXM]; /* Sales forecast*/
  FFLREC.FFGSDIND = "S"; /* Sls/dmd indicator*/
  FFLREC.FFGYRIND = "1"; /* Year option*/
  FFLREC.FFECLRFL = "N"; /* Color flag*/
  FFLREC.FF8DEVFL = "N"; /* Style dev flag*/

  XX0XS01(); /* Obtain current date and time*/

  FFLREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFLREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  FFLREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  FFLREC.ZZZSTM = XX0XW01.XX0XWTIM; /* Setup time*/

  try
    call "IO3880" ("A ", SQLCA, FFLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "623"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFLREC.FFLKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0R623

// Read DFCAST.VWDGRP01 table
Function FG0R624()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vwdgrp01 table row*/
   /* ------------------------------------------------------------*/

  set FFEREC empty; /* Clear row storage area*/

  FFEREC.FFEWSNBR = FFWREC.FFEWSNBR;

  try
    call "IO3850" ("S ", SQLCA, FFEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "624"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWDGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFEREC.FFEKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0R624

// Update DFCAST.VWDGRP01 table
Function FG0R625()
   /* ------------------------------------------------------------*/
   /* update dfcast.vwdgrp01*/
   /* ------------------------------------------------------------*/

  FFEREC.XXXUSRID = COMMAREA.CAUSERID; /* user id*/
  FFEREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFEREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO3850" ("U ", SQLCA, FFEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FG0RW00.FG0RWSWR = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "625"; /* Module identification*/
      FFWREC.XXXMSGNO = 20; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "629"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE DFCAST.VWDGRP01 TABLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWDGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFEREC.FFEKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0R625

// Process PF15 key
Function FG0R630()
   /* ------------------------------------------------------------*/
   /* If the current page has been changed, update the page in*/
   /* storage before obtaining the next one to display.*/
   /* ------------------------------------------------------------*/

  if (FG0RW00.FG0RWSWU == "Y") /* Current page was changed*/

    FG0RS03(); /* Update temporary storage page*/

    FG0RW00.FG0RWSWU = "N"; /* Storage update switch*/

  end

  FG0RW00.FG0RWPAG = 1; /* Initialize current page count*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (FG0RW00.TA5TSQIX > 0) /* Pages were formatted*/

    /* ------------------------------------------------------------*/
     /* If the desired page number is greater than the highest page*/
     /* in storage, default to the highest page number.*/
    /* ------------------------------------------------------------*/

    while (FG0RW00.FG0RWPAG <= FG0RW00.TA5TSQIX) /* Until end of TSQ*/

      TA5REC.TA5TSQIX = FG0RW00.FG0RWPAG; /* Page number*/

      FG0RS04(); /* Obtain temporary storage page*/

      FG0RW00.FG0RWIXM = 1; /* Initialize display index*/

      while (FG0RW00.FG0RWIXM <= 14
       && FG0RW01.SYBSTGNB[FG0RWIXM] > " ")

        FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXM + 1; /* Next row*/

        if (FG0RW00.FG0RWPAG == FG0RW00.TA5TSQIX) /* Last page*/

          if (FG0RW00.FG0RWIXM == 14 /* End of page*/
           || FG0RW01.SYBSTGNB[FG0RWIXW] == " ") /* Last row*/

            FG0RW00.FG0RWSWL = "Y"; /* Turn on the last row sw*/

          end

        end

        FG0RS06(); /* Set the calling parameters*/

        XSFFS59(); /* Update master tables*/

        FG0RW00.FG0RWSW1 = "N"; /* Turn off the 1st time thru switch*/

        FG0RW00.FG0RWIXM = FG0RW00.FG0RWIXM + 1;

      end

      FG0RW00.FG0RWPAG = FG0RW00.FG0RWPAG + 1; /* Increment curr page count*/

    end

  end

  if (FFSREC.FFSRTNCD == "0") /* Normal return code*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all changes*/

    FFWREC.XXXMODID = "630"; /* Module identification*/
    FFWREC.XXXMSGNO = 26; /* Indicate wrksht fcst saved as master*/
    FG0RW00.FG0RWMST = "Y"; /* Turn on master fcst saved switch*/
    FG0RW00.FG0RWERR = "N"; /* Reset error occured switch*/

  end

  TA5REC.TA5TSQIX = FG0RW00.XXXTSPAG; /* Reset current page*/

  FG0RS04(); /* Obtain the current temporary storage page*/

end // end FG0R630

// Process date range
Function FG0RS01()
  set FFZREC empty; /* Clear storage row*/

  FFZREC.FFZBYYMM = FG0RW01.FG0RWBMO; /* Beginning month*/
  FFZREC.FFZEYYMM = FG0RW01.FG0RWEMO; /* Ending month*/

  XSFFS30();

  FG0RW00.FG0RWWBD = FFZREC.FFZBEGMO; /* beg month - ccyymm*/
  FG0RW00.FG0RWWED = FFZREC.FFZENDMO; /* end month - ccyymm*/

end // end FG0RS01

// Obtain default seasn end month
Function FG0RS02()
  if (FFZREC.FFZNUMMO == 12) /* check if 12 months in the reqstd*/
                                   /* range*/

    FG0RS10(); /* obtain season begin month*/
    FG0RW00.FG0RWWDT = FF2REC.FF2SEASN[1]; /* season begin month*/

    if (FG0RW00.FG0RWBYM == FG0RW00.FG0RWWYM) /* begin month yymm match*/

      FG0RS11(); /* calculate season end month*/

    else
      if (FG0RW00.FG0RWBMM == FG0RW00.FG0RWWMM) /* begin month mm match*/

        FG0RS13(); /* calculate season end mo*/

      end
    end
  end

end // end FG0RS02

// Update temporary storage page
Function FG0RS03()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (FG0RW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S03"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0RS03

// Read temporary storage page
Function FG0RS04()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FG0RW01.XXXTSLEN = FG0RW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FG0RW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S04"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0RS04

// Calc no of mos in each season
Function FG0RS05()
  FG0RW00.FG0RWWDT = FG0RW00.FG0RWSMO[FG0RWIXW]; /* sesn end mo*/

  if (FG0RW00.FG0RWIXW == 1) /* 1st season*/

    if (FG0RW00.FG0RWWMM >= FG0RW00.FG0RWBMM) /* in the same year*/
      FG0RW00.FG0RWSIN[FG0RWIXW] = FG0RW00.FG0RWWDT -                                    FG0RW00.FG0RWWBD + 1;
    else /* in the different year*/
      FG0RW00.FG0RWSIN[FG0RWIXW] = FG0RW00.FG0RWWMM + 12 -                                    FG0RW00.FG0RWBMM + 1;
    end

  else /* other season*/

    FG0RW00.FG0RWIXN = FG0RW00.FG0RWIXW - 1;
    FG0RW00.FG0RW-WDT1 = FG0RW00.FG0RWSMO[FG0RWIXN]; /* prev sesn mo*/
    if (FG0RW00.FG0RWWMM > FG0RW00.FG0RW-WMM1) /* in the same year*/
      FG0RW00.FG0RWSIN[FG0RWIXW] = FG0RW00.FG0RWWMM - FG0RW00.FG0RW-WMM1;
    else /* in the different year*/
      FG0RW00.FG0RWSIN[FG0RWIXW] = FG0RW00.FG0RWWMM + 12 -                                    FG0RW00.FG0RW-WMM1;
    end

  end

end // end FG0RS05

// Set the calling parameters
Function FG0RS06()
  set FFSREC empty; /* Clear the storage row*/
  FFSREC.FFS1STFL = FG0RW00.FG0RWSW1; /* 1st time flag*/
  FFSREC.FFSLSTFL = FG0RW00.FG0RWSWL; /* Last row flag*/

  FFSREC.FFABEGMO = FFWREC.FFABEGMO; /* Beginning month of the range*/
  FFSREC.FFAENDMO = FFWREC.FFAENDMO; /* Ending month of the range*/
  FFSREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFSREC.FFSLEVEL = "GRP"; /* Level indicator*/
  FFSREC.XCTCD = "USA "; /* Country code*/
  FFSREC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FFSREC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FFSREC.XPCCD = FFWREC.XPCCD; /* Category code*/
  FFSREC.SYBSTGNB = FG0RW01.SYBSTGNB[FG0RWIXM]; /* Style group number*/

  XX0XS01(); /* Obtain current date and time*/

  FFSREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFSREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/


end // end FG0RS06

// Calculate subtots & tots
Function FG0RS07()
   /* ---------------------------------------------------*/
   /* Calculate the subtotal for each style color.*/
   /* This process is to accumulate all the fcsts from*/
   /* the 1st page and is only for the 2nd page of the*/
   /* season.*/
   /* ---------------------------------------------------*/

  FG0RW00.FG0RWTSB[FG0RWIXM] = 0; /* Initialize the temp subtotal area*/

  FG0RW00.FG0RWIXN = 1;

  FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXM - 1;
  FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF * 12 + FG0RW00.FG0RWLEF - 6;

  while (FG0RW00.FG0RWIXN <= 6) /* end of season*/

    FG0RW00.FG0RWTSB[FG0RWIXM] = FG0RW00.FG0RWTSB[FG0RWIXM] +                                 FG0RW01.FG0RWFCS[FG0RWIXF];

    FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF + 1;
    FG0RW00.FG0RWIXN = FG0RW00.FG0RWIXN + 1; /* no. of month processed*/

  end

end // end FG0RS07

// Unprotect the fcst field
Function FG0RS08()
  if (FG0RW00.FG0RWIXF <= FG0RW00.FG0RWIXE) /* Within the page*/
    if (FG0RW00.FG0RWIXN > FG0RW00.FG0RWREM)
      set FG0RM001.FG0RMFCS[FG0RWIXF] initialAttributes; /* Dark*/
    else
      if (FG0RW00.FG0RWIXN <= FG0RW00.FG0RWREM)
        set FG0RM001.FG0RMFCS[FG0RWIXF] normal; /* Unprotected*/
      else
        set FG0RM001.FG0RMFCS[FG0RWIXF] initialAttributes; /* Dark*/
      end
    end
  end

end // end FG0RS08

// Move subtots & tots
Function FG0RS09()
   /* -------------------------------------------------*/
   /* subtotal*/
   /* -------------------------------------------------*/

  FG0RW01.FG0RWSUB[FG0RWIXM] = FG0RW00.FG0RWTSB[FG0RWIXM];
  FFXREC.FFXNUMB = FG0RW00.FG0RWTSB[FG0RWIXM];
  XSFFS10();
                                   /* Convert the subtotal from NUM to CHAR*/
  FG0RW01.FG0RMSUB[FG0RWIXM] = FFXREC.FFXCHAR;

  FG0RM001.FG0RMSUB[FG0RWIXM] = FG0RW01.FG0RMSUB[FG0RWIXM];

  FG0RW00.FG0RW-NEXT = "Y"; /* next season*/

   /* ---------------------------------------------------*/
   /* Calculate the grand total for each style group.*/
   /* ---------------------------------------------------*/

  FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXM - 1;
  FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF * 12 + 1;
  FG0RW00.FG0RWIXE = FG0RW00.FG0RWIXF + 11;

  FG0RW00.FG0RWTGD = 0; /* Initialize the temp grand total area*/

  while (FG0RW00.FG0RWIXF <= FG0RW00.FG0RWIXE) /* Until end the row*/

    FG0RW00.FG0RWTGD = FG0RW00.FG0RWTGD + FG0RW01.FG0RWFCS[FG0RWIXF];

    FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF + 1;

  end

  FG0RW01.FG0RWGND[FG0RWIXM] = FG0RW00.FG0RWTGD;
  FFXREC.FFXNUMB = FG0RW00.FG0RWTGD;
  XSFFS10();
                                   /* Convert the subtotal from NUM to CHAR*/
  FG0RW01.FG0RMGND[FG0RWIXM] = FFXREC.FFXCHAR;

  FG0RM001.FG0RMGND[FG0RWIXM] = FG0RW01.FG0RMGND[FG0RWIXM];
  set FG0RM001.FG0RMGND[FG0RWIXM] skip; /* Visible*/

   /* -------------------------------------------------*/
   /* % for grand total*/
   /* -------------------------------------------------*/

  if (FG0RW00.FG0RWGQT != 0)
    FG0RW00.FG0RWPCT = FG0RW01.FG0RWGND[FG0RWIXM] / FG0RW00.FG0RWGQT;
    FG0RW01.FG0RWGPT[FG0RWIXM] = FG0RW00.FG0RWPCT * 100;
    FG0RM001.FG0RWGPT[FG0RWIXM] = FG0RW01.FG0RWGPT[FG0RWIXM];
  end

end // end FG0RS09

// Obtain season begin month
Function FG0RS10()
   /* ------------------------------------------------------------*/
   /* Select set on dfcast.vffxrf01 table.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* load ff2rec record - dfcast.vffxrf01*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.YSMXDV = "10"; /* div grp code*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* product type group*/
  FF2REC.XPCCD = FFWREC.XPCCD; /* product category*/

   /* ------------------------------------------------------------*/
   /* select set dfcast.vffxrf01*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S2 ON DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0RS10

// Calc season end mo - same year
Function FG0RS11()

   /* --------------------------------------*/
   /* calculate no of season*/
   /* --------------------------------------*/

  FG0RW00.FG0RWIXW = 4;

  while (FG0RW00.FG0RWIXW > 0)

    if (FF2REC.FF2SEASN[FG0RWIXW] == 0)
      FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW - 1;
    else
      FG0RW00.FG0RWSMO[FG0RWIXW] = FG0RW00.FG0RWEYM; /* sesn end mo*/
      FG0RW00.FG0RWSEM[FG0RWIXW] = FG0RW00.FG0RWEMM;
      FG0RM001.FG0RMSEM[FG0RWIXW] = FG0RW00.FG0RWEMM;
      FG0RW00.FG0RWNSS = FG0RW00.FG0RWIXW; /* no. of seasons*/
      FG0RW00.FG0RWIXW = 0; /* force out the loop*/
    end

  end

   /* --------------------------------------*/
   /* calculate season end month*/
   /* --------------------------------------*/

  FG0RW00.FG0RWIXW = FG0RW00.FG0RWNSS;

  while (FG0RW00.FG0RWIXW > 1)

    FG0RW00.FG0RWWDT = FF2REC.FF2SEASN[FG0RWIXW];
    FG0RS12(); /* get end month of the season*/
    FG0RW00.FG0RWIXN = FG0RW00.FG0RWIXW - 1;
    FG0RW00.FG0RWSMO[FG0RWIXN] = FG0RW00.FG0RWWDT;
    FG0RW00.FG0RWSEM[FG0RWIXN] = FG0RW00.FG0RWWMM;
    FG0RM001.FG0RMSEM[FG0RWIXN] = FG0RW00.FG0RWWMM;
    FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW - 1;

  end
end // end FG0RS11

// Get season end mo - diff year
Function FG0RS12()

  if (FG0RW00.FG0RWWMM == 1)
    FG0RW00.FG0RWWMM = 12;
    if (FG0RW00.FG0RWWYY == 0)
      FG0RW00.FG0RWWYY = 99;
      FG0RW00.FG0RWWCC = FG0RWWCC - 1;
    else
      FG0RW00.FG0RWWYY = FG0RW00.FG0RWWYY - 1;
    end
  else
    FG0RW00.FG0RWWMM = FG0RW00.FG0RWWMM - 1;
  end

end // end FG0RS12

// Calc season end mo - diff year
Function FG0RS13()

   /* --------------------------------------*/
   /* calculate no of season*/
   /* --------------------------------------*/

  FG0RW00.FG0RWIXW = 4;

  while (FG0RW00.FG0RWIXW > 0)

    if (FF2REC.FF2SEASN[FG0RWIXW] == 0)
      FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW - 1;
    else
      FG0RW00.FG0RWSMO[FG0RWIXW] = FG0RW00.FG0RWEYM; /* sesn end mo*/
      FG0RW00.FG0RWSEM[FG0RWIXW] = FG0RW00.FG0RWEMM;
      FG0RM001.FG0RMSEM[FG0RWIXW] = FG0RW00.FG0RWEMM;
      FG0RW00.FG0RWNSS = FG0RW00.FG0RWIXW; /* no. of seasons*/
      FG0RW00.FG0RWIXW = 0; /* force out the loop*/
    end

  end

   /* --------------------------------------*/
   /* calculate season end month*/
   /* --------------------------------------*/

  FG0RW00.FG0RWIXW = FG0RW00.FG0RWNSS;

  while (FG0RW00.FG0RWIXW > 1)

    FG0RW00.FG0RWWDT = FF2REC.FF2SEASN[FG0RWIXW];
    FG0RS14(); /* get end month of the season*/
    FG0RW00.FG0RWIXN = FG0RW00.FG0RWIXW - 1;
    FG0RW00.FG0RWSMO[FG0RWIXN] = FG0RW00.FG0RWWDT;
    FG0RW00.FG0RWSEM[FG0RWIXN] = FG0RW00.FG0RWWMM;
    FG0RM001.FG0RMSEM[FG0RWIXN] = FG0RW00.FG0RWWMM;
    FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW - 1;

  end
end // end FG0RS13

// Get season end mo - diff year
Function FG0RS14()
   /* -------------------------------------------------------------------*/
   /* Plug in the ccyy from requested range and use the same month from*/
   /* the dfcast.vffxrf01 table.*/
   /* -------------------------------------------------------------------*/

  if (FG0RW00.FG0RWBMM <= FG0RW00.FG0RWWMM) /* same year*/

    FG0RW00.FG0RWWYY = FG0RW00.FG0RWBYY; /* year*/
    FG0RW00.FG0RWWCC = FG0RW00.FG0RWBCC; /* century*/

  else /* different year*/

    if (FG0RW00.FG0RWBYY == 99)
      FG0RW00.FG0RWWYY = 0; /* year*/
      FG0RW00.FG0RWWCC = FG0RW00.FG0RWBCC + 1; /* century*/
    else
      FG0RW00.FG0RWWYY = FG0RW00.FG0RWBYY + 1; /* year*/
      FG0RW00.FG0RWWCC = FG0RW00.FG0RWBCC; /* century*/
    end

  end

  if (FG0RW00.FG0RWWMM == 1)
    FG0RW00.FG0RWWMM = 12;
    if (FG0RW00.FG0RWWYY == 0)
      FG0RW00.FG0RWWYY = 99;
      FG0RW00.FG0RWWCC = FG0RWWCC - 1;
    else
      FG0RW00.FG0RWWYY = FG0RW00.FG0RWWYY - 1;
    end
  else
    FG0RW00.FG0RWWMM = FG0RW00.FG0RWWMM - 1;
  end
end // end FG0RS14

// Unprotect the fcst field
Function FG0RS15()
   /* -------------------------------------------------------*/
   /* Convert the subtotal from NUM to CHAR and move to*/
   /* the map.*/
   /* -------------------------------------------------------*/

  FFXREC.FFXNUMB = FG0RW00.FG0RWSQT;
  XSFFS10(); /* Translate the subtotal value*/
  FG0RM001.FG0RMSUB[FG0RWIXM] = FFXREC.FFXCHAR;

   /* -------------------------------------------------------*/
   /* Convert the grand total from NUM to CHAR and move to*/
   /* the map.*/
   /* -------------------------------------------------------*/

  FFXREC.FFXNUMB = FG0RW00.FG0RWGQT;
  XSFFS10(); /* Translate the total value*/
  FG0RM001.FG0RMGND[FG0RWIXM] = FFXREC.FFXCHAR;


   /* -------------------------------------------------------*/
   /* Calculate the percentage of subtotal*/
   /* -------------------------------------------------------*/

  if (FG0RW00.FG0RWSQT > 0)
    FG0RW00.FG0RWPCT = FG0RW00.FG0RWSQT / FG0RW00.FG0RWSQT;
    FG0RM001.FG0RWSPT[FG0RWIXM] = FG0RW00.FG0RWPCT * 100;
  end

   /* -----------------------------------------------------------*/
   /* Heading literal*/
   /* -----------------------------------------------------------*/

   /* -------------------------------------------------*/
   /* subtotal*/
   /* -------------------------------------------------*/

  FG0RM001.FG0RMSHD[1] = "SUB";
  FG0RM001.FG0RMSHD[2] = "TOTAL";
  set FG0RM001.FG0RMSHD[1] skip; /* Visible*/
  set FG0RM001.FG0RMSHD[2] skip; /* Visible*/

   /* -------------------------------------------------*/
   /* subtotal % of the grand total for each stygrp*/
   /* -------------------------------------------------*/

  FG0RM001.FG0RMSHP[1] = "% OF";
  FG0RM001.FG0RMSHP[2] = "TOTAL";
  set FG0RM001.FG0RMSHP[1] skip; /* Visible*/
  set FG0RM001.FG0RMSHP[2] skip; /* Visible*/

   /* -------------------------------------------------*/
   /* grand total*/
   /* -------------------------------------------------*/

  FG0RM001.FG0RMGHD[1] = "GRAND";
  FG0RM001.FG0RMGHD[2] = "TOTAL";
  set FG0RM001.FG0RMGHD[1] skip; /* Visible*/
  set FG0RM001.FG0RMGHD[2] skip; /* Visible*/

   /* -------------------------------------------------*/
   /* % for grand total*/
   /* -------------------------------------------------*/

  FG0RMGHP[1] = "% FOR";
  FG0RMGHP[2] = "G-TOT";
  set FG0RM001.FG0RMGHP[1] skip; /* Visible*/
  set FG0RM001.FG0RMGHP[2] skip; /* Visible*/

  FG0RS16(); /* process subtot % for each stygrp*/

end // end FG0RS15

// Calc subtot % for each stygrp
Function FG0RS16()
   /* -------------------------------------------------*/
   /* subtotal % of the grand total for each stygrp*/
   /* -------------------------------------------------*/

  FG0RW00.FG0RWIXW = 1;

  while (FG0RW00.FG0RWIXW <= 14
   && FG0RM001.SYBSTGNM[FG0RWIXW] != "   TOTAL") /* Not total line*/
    if (FG0RW00.FG0RWSQT != 0)
      FG0RW00.FG0RWPCT = FG0RW00.FG0RWTSB[FG0RWIXW] / FG0RW00.FG0RWSQT;
      FG0RW01.FG0RWSPT[FG0RWIXW] = FG0RW00.FG0RWPCT * 100;
      FG0RM001.FG0RWSPT[FG0RWIXW] = FG0RW01.FG0RWSPT[FG0RWIXW];
    end
    FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW + 1;
  end

end // end FG0RS16

// Dark subtot % for each stygrp
Function FG0RS17()

  FG0RW00.FG0RWIXW = 1;

  while (FG0RW00.FG0RWIXW <= 14)
    set FG0RM001.FG0RWSPT[FG0RWIXW] initialAttributes;
    FG0RW00.FG0RWIXW = FG0RW00.FG0RWIXW + 1;
  end

end // end FG0RS17

// Calc grand tot from 1st page
Function FG0RS20()
  FG0RW00.FG0RWIXN = 1;

  FG0RW00.FG0RWIXF = FG0RW00.FG0RWLEF - 6;

  while (FG0RW00.FG0RWIXN <= 6) /* end of season*/

    FG0RW00.FG0RWSQT = FG0RW00.FG0RWSQT +                         FG0RW00.FG0RWGDT[FG0RWIXF];

    FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF + 1;
    FG0RW00.FG0RWIXN = FG0RW00.FG0RWIXN + 1; /* no. of month processed*/

  end

end // end FG0RS20

Function FG0RS30()

   /* --------------------------------------------------------*/
   /* beginning date and ending date are in the same year*/
   /* --------------------------------------------------------*/

  if (FG0RW00.FG0RWBYY == FG0RW00.FG0RWEYY) /* beg year = end year*/

    if (FG0RM001.FG0RMSEM[FG0RWIXW] >= FG0RW00.FG0RWBMM /* >= beg month*/
     && FG0RM001.FG0RMSEM[FG0RWIXW] <= FG0RW00.FG0RWEMM) /* <= end month*/

      FG0RW00.FG0RWWCC = FG0RW00.FG0RWBCC; /* plug in centry*/
      FG0RW00.FG0RWWYY = FG0RW00.FG0RWBYY; /* plug in year*/
      FG0RW00.FG0RWWMM = FG0RM001.FG0RMSEM[FG0RWIXW]; /* plug in month*/

    else

      FFWREC.XXXMODID = "S30"; /* module identification*/
      converseLib.validationFailed(010); /* invalid data*/
      set FG0RM001.FG0RMSEM[FG0RWIXW] cursor, bold;

    end

  else

      /* --------------------------------------------------------*/
      /* beginning date and ending date are in the different years*/
      /* --------------------------------------------------------*/

      /* season end month falls in the same year as begin month*/

    if (FG0RM001.FG0RMSEM[FG0RWIXW] >= FG0RW00.FG0RWBMM) /* >= beg mo*/

      FG0RW00.FG0RWWCC = FG0RW00.FG0RWBCC; /* plug in centry*/
      FG0RW00.FG0RWWYY = FG0RW00.FG0RWBYY; /* plug in year*/
      FG0RW00.FG0RWWMM = FG0RM001.FG0RMSEM[FG0RWIXW]; /* plug in month*/
    else

        /* * season end month falls in the same year as end month*/

      if (FG0RM001.FG0RMSEM[FG0RWIXW] <= FG0RW00.FG0RWEMM) /* <= end mo*/
        FG0RW00.FG0RWWCC = FG0RW00.FG0RWECC; /* plug in centry*/
        FG0RW00.FG0RWWYY = FG0RW00.FG0RWEYY; /* plug in year*/
        FG0RW00.FG0RWWMM = FG0RM001.FG0RMSEM[FG0RWIXW]; /* plug in month*/
      else

        FFWREC.XXXMODID = "S30"; /* module identification*/
        converseLib.validationFailed(010); /* invalid data*/
        set FG0RM001.FG0RMSEM[FG0RWIXW] cursor, bold;

      end

    end

  end

  if (converseVar.validationMsgNum == 0)
    FG0RW00.FG0RWSMO[FG0RWIXW] = FG0RW00.FG0RWWDT; /* save ccyymm*/
  end

end // end FG0RS30

// Calc grand tot for each stygrp
Function FG0RS40()
   /* ---------------------------------------------------*/
   /* Calculate the grand total for each style group.*/
   /* ---------------------------------------------------*/

  FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXM - 1;
  FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF * 12 + 1;
  FG0RW00.FG0RWIXE = FG0RW00.FG0RWIXF + 11;

  FG0RW00.FG0RWTGD = 0; /* Initialize the temp grand total area*/

  while (FG0RW00.FG0RWIXF <= FG0RW00.FG0RWIXE) /* Until end the row*/

    FG0RW00.FG0RWTGD = FG0RW00.FG0RWTGD + FG0RW01.FG0RWFCS[FG0RWIXF];

    FG0RW00.FG0RWIXF = FG0RW00.FG0RWIXF + 1;

  end

  FG0RW01.FG0RWGND[FG0RWIXM] = FG0RW00.FG0RWTGD;
  FFXREC.FFXNUMB = FG0RW00.FG0RWTGD;
  XSFFS10();
                                   /* Convert the grand  from NUM to CHAR*/
  FG0RW01.FG0RMGND[FG0RWIXM] = FFXREC.FFXCHAR;

end // end FG0RS40

//*** RECORD=FG0RW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FG0RW00 type basicRecord
  10 FG0RWIND FG0RWIND ; 
  10 FG0RWIXM FG0RWIXM ; 
  10 FG0RWIXW FG0RWIXW ; 
  10 FG0RWIXF FG0RWIXF ; 
  10 FG0RWIXE FG0RWIXE ; 
  10 FG0RWIXT FG0RWIXT ; 
  10 FG0RWIXN FG0RWIXN ; 
  10 FG0RWCR2 FG0RWCR2 ; 
  10 FG0RWCR1 FG0RWCR1 ; 
  10 FG0RWSWF FG0RWSWF ; 
  10 FG0RWSWO FG0RWSWO ; 
  10 FG0RWSWR FG0RWSWR ; 
  10 FG0RWSWU FG0RWSWU ; 
  10 FG0RWSW1 FG0RWSW1 ; 
  10 FG0RWSWL FG0RWSWL ; 
  10 FG0RWMST FG0RWMST ; 
  10 FG0RWERR FG0RWERR ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 FG0RWPAG FG0RWPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FG0RWLEF FG0RWLEF ; 
  10 FG0RWRIG FG0RWRIG ; 
  10 FG0RWEND FG0RWEND ; 
  10 FG0RWSQT FG0RWSQT ; 
  10 FG0RWGQT FG0RWGQT ; 
  10 FG0RWTSB FG0RWTSB [14] ; 
  10 FG0RWTGD FG0RWTGD ; 
  10 FG0RWTOT FG0RWTOT ; 
  10 FG0RWGDT FG0RWGDT [12] ; 
  10 FG0RWGCH FG0RWGCH [12] ; 
  10 FG0RWFCS FG0RWFCS ; 
  10 FG0RWDAT FG0RWDAT ; 
    15 FG0RWDCC FG0RWDCC ; 
    15 FG0RWDYM FG0RWDYM ; 
      20 FG0RWDYY FG0RWDYY ; 
      20 FG0RWDMM FG0RWDMM ; 
  10 FG0RWWDT FG0RWWDT ; 
    15 * num(3) ; 
    15 FG0RWWCC FG0RWWCC ; 
    15 FG0RWWYM FG0RWWYM ; 
      20 FG0RWWYY FG0RWWYY ; 
      20 FG0RWWMM FG0RWWMM ; 
  10 FG0RW-WDT1 FG0RW-WDT1 ; 
    15 * num(3) ; 
    15 FG0RW-WCC1 FG0RW-WCC1 ; 
    15 FG0RW-WYM1 FG0RW-WYM1 ; 
      20 FG0RW-WYY1 FG0RW-WYY1 ; 
      20 FG0RW-WMM1 FG0RW-WMM1 ; 
  10 FG0RWWBD FG0RWWBD ; 
    15 * num(3) ; 
    15 FG0RWBCC FG0RWBCC ; 
    15 FG0RWBYM FG0RWBYM ; 
      20 FG0RWBYY FG0RWBYY ; 
      20 FG0RWBMM FG0RWBMM ; 
  10 FG0RWWED FG0RWWED ; 
    15 * num(3) ; 
    15 FG0RWECC FG0RWECC ; 
    15 FG0RWEYM FG0RWEYM ; 
      20 FG0RWEYY FG0RWEYY ; 
      20 FG0RWEMM FG0RWEMM ; 
  10 FG0RWHDG FG0RWHDG [12] ; 
    15 FG0RWHCC FG0RWHCC ; 
    15 FG0RWHYM FG0RWHYM ; 
  10 FG0RMMOS FG0RMMOS ; 
  10 FF6SLFCT FF6SLFCT ; 
  10 FG0RWVAR FG0RWVAR ; 
  10 FG0RWPCT FG0RWPCT ; 
  10 FG0RWNSS FG0RWNSS ; 
  10 FG0RWREM FG0RWREM ; 
  10 FG0RWMOS FG0RWMOS ; 
  10 FG0RW-NEXT FG0RW-NEXT ; 
  10 FG0RW-MON-LEFT FG0RW-MON-LEFT [10] ; 
  10 FG0RW-PAGS FG0RW-PAGS [10] ; 
  10 FG0RWNPG FG0RWNPG ; 
  10 FG0RWPGX FG0RWPGX ; 
  10 FG0RWSNX FG0RWSNX ; 
  10 FG0RWSEM FG0RWSEM [4] ; 
  10 FG0RWSMO FG0RWSMO [4] ; 
  10 FG0RWSIN FG0RWSIN [4] ; 
end // end FG0RW00

//*** RECORD=FG0RW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FG0RW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(3214) ; 
    10 FG0RWBMO FG0RWBMO ; 
      15 FG0RWBCC FG0RWBCC ; 
      15 FG0RMBMO FG0RMBMO ; 
    10 FG0RWEMO FG0RWEMO ; 
      15 FG0RWECC FG0RWECC ; 
      15 FG0RMEMO FG0RMEMO ; 
    10 FG0RWTGT FG0RWTGT ; 
    10 FFCDMIND FFCDMIND ; 
    10 SYBSTGNB SYBSTGNB [15] ; 
    10 SYBSTGNM SYBSTGNM [15] ; 
    10 FG0RMFCS FG0RMFCS [180] ; 
    10 FG0RWFCH FG0RWFCH [180] ; 
    10 FG0RWFCS FG0RWFCS [180] ; 
    10 FG0RWCNT FG0RWCNT [180] ; 
    10 FG0RMSUB FG0RMSUB [14] ; 
    10 FG0RWSUB FG0RWSUB [14] ; 
    10 FG0RWSPT FG0RWSPT [14] ; 
    10 FG0RMGND FG0RMGND [14] ; 
    10 FG0RWGND FG0RWGND [14] ; 
    10 FG0RWSCH FG0RWSCH [14] ; 
    10 FG0RWGPT FG0RWGPT [14] ; 
end // end FG0RW01

// Beginning date of the range
DataItem FG0RMBMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Ending date of the range
DataItem FG0RMEMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Forecast enter & display field
DataItem FG0RMFCS char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Grand total
DataItem FG0RMGND char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// No. of month in season
DataItem FG0RMMOS num(1)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Subtotal
DataItem FG0RMSUB char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Month left flag
DataItem FG0RW-MON-LEFT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Next season flag
DataItem FG0RW-NEXT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Processing season of the page
DataItem FG0RW-PAGS num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century
DataItem FG0RW-WCC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0RW-WDT1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem FG0RW-WMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year/month
DataItem FG0RW-WYM1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem FG0RW-WYY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century
DataItem FG0RWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem FG0RWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning date of the range
DataItem FG0RWBMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// year/month
DataItem FG0RWBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem FG0RWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Change count
DataItem FG0RWCNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of cursor for VFFXRF01
DataItem FG0RWCR1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor for VWGMTH01
DataItem FG0RWCR2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Date work area
DataItem FG0RWDAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century work area
DataItem FG0RWDCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MM work area
DataItem FG0RWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YYMM work area
DataItem FG0RWDYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YY work area
DataItem FG0RWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century
DataItem FG0RWECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem FG0RWEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending date of the range
DataItem FG0RWEMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// End of range index
DataItem FG0RWEND num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Error occurred switch
DataItem FG0RWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year/month
DataItem FG0RWEYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem FG0RWEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Forecast changed flag
DataItem FG0RWFCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fcst field work area
DataItem FG0RWFCS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


DataItem FG0RWGCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end
// Grand total for each month
DataItem FG0RWGDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Grand total
DataItem FG0RWGND int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Percent of grand total
DataItem FG0RWGPT num(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Total qty of grand total field
DataItem FG0RWGQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Heading century work area
DataItem FG0RWHCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Heading work area
DataItem FG0RWHDG num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Heading YYMM work area
DataItem FG0RWHYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Indicator of last disp row
DataItem FG0RWIND smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for forecast fields
DataItem FG0RWIXE smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for forecast fields
DataItem FG0RWIXF smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FG0RWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FG0RWIXN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for total fields
DataItem FG0RWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FG0RWIXW smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Scroll left index
DataItem FG0RWLEF num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// No. of month in season
DataItem FG0RWMOS num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Master fcst saved switch
DataItem FG0RWMST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Next TSQ page number
DataItem FG0RWNPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// No. of seasons
DataItem FG0RWNSS num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Curr TSQ page for PF15 process
DataItem FG0RWPAG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Percent work area
DataItem FG0RWPCT decimal(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page index
DataItem FG0RWPGX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Remaining months
DataItem FG0RWREM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Scroll right index
DataItem FG0RWRIG num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Category total change flag
DataItem FG0RWSCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season end month - mm
DataItem FG0RWSEM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// No. of months in each season
DataItem FG0RWSIN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season end month - ccyymm
DataItem FG0RWSMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Season index
DataItem FG0RWSNX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Percent of subtotal
DataItem FG0RWSPT num(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Total qty of subtot field
DataItem FG0RWSQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Subtot
DataItem FG0RWSUB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First time through switch
DataItem FG0RWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FG0RWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Last row switch
DataItem FG0RWSWL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data obtained switch
DataItem FG0RWSWO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FG0RWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem FG0RWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Grand total work area
DataItem FG0RWTGD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FF_FCST_TRGT
DataItem FG0RWTGT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Total field work area
DataItem FG0RWTOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Subtotal work area
DataItem FG0RWTSB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Variance between old & new fcs
DataItem FG0RWVAR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Begin date
DataItem FG0RWWBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century
DataItem FG0RWWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0RWWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End date
DataItem FG0RWWED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem FG0RWWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year/month
DataItem FG0RWWYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem FG0RWWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

