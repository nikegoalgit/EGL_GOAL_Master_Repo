package fg0v;

import corpcom1.CACHGFL;
import corpcom2.XPCREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPFF001;
import corpcom3.XPXPC01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS01;
import corpcom4.XSFFS10;
import corpcom4.XSFFS30;
import corpcom4.XSFFS35;
import corpcom4.XSFFS52;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XPCTBL;
import corpy2.YPGTBL;
import ff.common.FF1REC;
import ff.common.FF7REC;
import ff.common.FFCREC;
import ff.common.FFDREC;
import ff.common.FFFREC;
import ff.common.FFWREC;
import ff.common.FFXREC;
import ff.common.FFZREC;
import fh.common.FH6REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=FG0V ****
// This application provides the user with the ability to
// create a future ship index by referring to the historical
// data or the user can pick a specific historical future ship
// index(1 year ago, 2 year ago, or 3 years ago) for a given
// range and specific category.
// 
// The displayed shipment data may be actual shipment or
// forecasted shipment.  If the requested range is before the
// current month -1 month, the actual future shipped quantity
// will be shown.  If the range is between the current month
// and the next 5 months, the forecasted shipped quantity
// will be shown.  This program needs to use the invoice
// cut off date to determine if the future shipped quantity
// should be used or the actual shipped quantity from the
// the history database should be used.
// 
// The monthly quantities and indices will be displayed.
// If the user created indices didn't add up to 100, then
// the variance will be shown on the top of the screen.  The
// quantites are all in thousand.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from either of the screens.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          02/15/90  rgilli  New application.
// FF1016   07/31/90  JJUCH   Disallowed to fcst current main
//                            buy month and all prior months.
//          05/13/99  CWHITE  set 0 fill for date
// *********************
Program FG0V type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF1REC FF1REC; // record
  FF7REC FF7REC; // record
  FFCREC FFCREC; // record
  FFDREC FFDREC; // record
  FFFREC FFFREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  FG0VW00 FG0VW00; // record
  FG0VW01 FG0VW01; // record
  FH6REC FH6REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPCTBL; // table
  use YPGTBL; // table
  use FG0VM.FG0VM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FFFREC empty;
    set FG0VM001 initial; /* M001 input/output*/
    set FG0VW00 empty; /* Working storage*/
    set FG0VW01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine work area*/
    set TA5REC empty; /* temp storage queue area*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    FG0VW00.FG0VWSWR = "N"; /* Request for data switch*/
    FG0VW00.FG0VWSWF = "Y"; /* format screen data switch*/
    FG0VW00.FG0VWDES = "INDEX HAS NOT BEEN DEFINED";
    ;
     /* ---------------------------------------------------*/
     /* Clear unused fields*/
     /* ---------------------------------------------------*/
    ;
    FFWREC.XPLCD = " "; /* Clear product line code*/
    FFWREC.XPLABRV = " "; /* Clear product line abrv*/
    FFWREC.SYBSTGNB = " "; /* Clear style group number*/
    FFWREC.SYBSTGNM = " "; /* Clear style group name*/
    FFWREC.SY1STNBR = " "; /* Clear style number*/
    FFWREC.SY2CLRID = " "; /* Clear color id*/
    FFWREC.XDMCD = " "; /* Clear dimension code*/
    FFWREC.SY1SSTNM = " "; /* Clear short style name*/
    FFWREC.SY2CLRAB = " "; /* Clear color abrv*/
    FFWREC.XDMABRV = " "; /* Clear dimension abrv*/
    FFWREC.ZRGCD = " "; /* Clear region code*/
    FFWREC.ZRGABRV = " "; /* Clear region abrv*/
    FFWREC.XCTCD = " "; /* Clear country code*/
    FFWREC.XCTABRV = " "; /* Clear country abrv*/
    ;
     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/
    ;
     /* ------------------------------------------------------------*/
     /* product type group*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.YPGCD == " ")
      FFWREC.YPGCD = "01";
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end
    ;
     /* ------------------------------------------------------------*/
     /* determine if data is to be loaded*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.FFABEGMO != 0
     && FFWREC.FFAENDMO != 0
     && FFWREC.XPCCD != " ")
      FFZREC.FFZBEGMO = FFWREC.FFABEGMO;
      FFZREC.FFZENDMO = FFWREC.FFAENDMO;
      FG0VW00.FG0VWSWR = "Y"; /* set data request flag*/
    end
    ;
     /* ------------------------------------------------------------*/
     /* Flow to first time through date validation*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0V001; /* Converse the main process*/
    ;
    FG0V001: FG0V001();
     /* ------------------------------------------------------------*/
     /* flow to converse the main process used to display a map*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0V001; /* converse the main process*/
    ;
  end // end main
end // end FG0V

// maint. historical futr shp idx
Function FG0V001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FG0V100(); /* Obtain the data to display*/
  ;
  FG0V200(); /* Format and display the map*/
  ;
  FG0V300(); /* Check attention identifier*/
  ;
  FG0V400(); /* Reset fields to normal intensity*/
  ;
  FG0V500(); /* Verify the entered data*/
  ;
  FG0V600(); /* Process valid input request*/
  ;
  ;
end // end FG0V001

// obtain data for display
Function FG0V100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0VW00.FG0VWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* init working storage*/
   /* ------------------------------------------------------------*/
  ;
  set FG0VW01 empty; /* init w/s*/
  ;
   /* ------------------------------------------------------------*/
   /* obtain current date using routine xx0xs01, calculate*/
   /* current date minus one month and current date plus five mos*/
   /* ------------------------------------------------------------*/
   /* ------------------------*/
   /* get current date*/
   /* ------------------------*/
  ;
  XX0XS01();
  ;
  FG0VW00.FG0VWCWD = XX0XW01.XX0XWDAT; /* current work dt ccyymmdd*/
  FG0VW00.FG0VWCRD = XX0XW01.XX0XWCYM; /* current date ccyymm*/
  FG0VW00.FG0VWWDT = XX0XW01.XX0XWCYM; /* work date*/
  ;
  if (FG0VW00.FG0VWWMM == 1)
    FG0VW00.FG0VWWMM = 12;
    if (FG0VW00.FG0VWWYY == 00)
      FG0VW00.FG0VWWYY = 99;
      FG0VW00.FG0VWWCC = FG0VW00.FG0VWWCC - 1;
    else
      FG0VW00.FG0VWWYY = FG0VW00.FG0VWWYY - 1;
    end
  else
    FG0VW00.FG0VWWMM = FG0VW00.FG0VWWMM - 1;
  end
  FG0VW00.FG0VWCD1 = FG0VW00.FG0VWWDT; /* current date minus 1 month*/
  ;
  FG0VW00.FG0VWWDT = XX0XW01.XX0XWCYM; /* work date*/
  FG0VW00.FG0VWWMM = FG0VW00.FG0VWWMM + 5;
  if (FG0VW00.FG0VWWMM > 12)
    FG0VW00.FG0VWWMM = FG0VW00.FG0VWWMM - 12;
    if (FG0VW00.FG0VWWYY == 99)
      FG0VW00.FG0VWWCC = FG0VW00.FG0VWWCC + 1;
      FG0VW00.FG0VWWYY = 0;
    else
      FG0VW00.FG0VWWYY = FG0VW00.FG0VWWYY + 1;
    end
  end
  FG0VW00.FG0VWCD5 = FG0VW00.FG0VWWDT; /* current date plus 5 months*/
  ;
   /* ------------------------------------------------------------*/
   /* calculate "user created" heading date range (12 months)*/
   /* ------------------------------------------------------------*/
  ;
  FG0VW00.FG0VWWBD = FFWREC.FFABEGMO; /* user requested begin range*/
  FG0VW00.FG0VWWED = FFWREC.FFABEGMO; /* begin range + 11 months*/
  ;
  FG0VW00.FG0VWEMM = FG0VW00.FG0VWEMM + 11;
  if (FG0VW00.FG0VWEMM > 12)
    FG0VW00.FG0VWEMM = FG0VW00.FG0VWEMM - 12;
    if (FG0VW00.FG0VWEYY == 99)
      FG0VW00.FG0VWECC = FG0VW00.FG0VWECC + 1;
      FG0VW00.FG0VWEYY = 0;
    else
      FG0VW00.FG0VWEYY = FG0VW00.FG0VWEYY + 1;
    end
  end
  FG0VW01.FG0VWHBD[4] = FG0VW00.FG0VWWBD; /* user hdg beg date*/
  FG0VW01.FG0VWHED[4] = FG0VW00.FG0VWWED; /* user hdg end date*/
  ;
   /* ------------------------------------------------------------*/
   /* calculate "historical" heading date ranges (12 months)*/
   /* ------------------------------------------------------------*/
  ;
  FG0VW00.FG0VWIDX = 1; /* init index*/
  while (FG0VW00.FG0VWIDX <= 3) /* calculate historical date ranges*/
    ;
    if (FG0VW00.FG0VWBYY == 00)
      FG0VW00.FG0VWBYY = 99;
      FG0VW00.FG0VWBCC = FG0VW00.FG0VWBCC - 1;
    else
      FG0VW00.FG0VWBYY = FG0VW00.FG0VWBYY - 1;
    end
    FG0VW01.FG0VWHBD[FG0VWIDX] = FG0VW00.FG0VWWBD; /* prior beg date*/
    ;
    if (FG0VW00.FG0VWEYY == 00)
      FG0VW00.FG0VWEYY = 99;
      FG0VW00.FG0VWECC = FG0VW00.FG0VWECC - 1;
    else
      FG0VW00.FG0VWEYY = FG0VW00.FG0VWEYY - 1;
    end
    FG0VW01.FG0VWHED[FG0VWIDX] = FG0VW00.FG0VWWED; /* prior end date*/
    ;
    FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* calculate historical date ranges*/
   /* ------------------------------------------------------------*/
  ;
  FG0VW00.FG0VWWBD = FFWREC.FFABEGMO; /* user req begin range*/
  FG0VW00.FG0VWWED = FFWREC.FFAENDMO; /* user req end range*/
  ;
  FG0VW00.FG0VWIDX = 1; /* init index*/
  while (FG0VW00.FG0VWIDX <= 3) /* calculate historical date ranges*/
    ;
    if (FG0VW00.FG0VWBYY == 00)
      FG0VW00.FG0VWBYY = 99;
      FG0VW00.FG0VWBCC = FG0VW00.FG0VWBCC - 1;
    else
      FG0VW00.FG0VWBYY = FG0VW00.FG0VWBYY - 1;
    end
    FG0VW01.FG0VWPBD[FG0VWIDX] = FG0VW00.FG0VWWBD; /* prior beg date*/
    ;
    if (FG0VW00.FG0VWEYY == 00)
      FG0VW00.FG0VWEYY = 99;
      FG0VW00.FG0VWECC = FG0VW00.FG0VWECC - 1;
    else
      FG0VW00.FG0VWEYY = FG0VW00.FG0VWEYY - 1;
    end
    FG0VW01.FG0VWPED[FG0VWIDX] = FG0VW00.FG0VWWED; /* prior end date*/
    ;
    FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* save user requested date range calculated by xsffs30*/
   /* ------------------------------------------------------------*/
  ;
  FG0VW00.FG0VWWBD = FFZREC.FFZBEGMO; /* save begin range*/
  FG0VW00.FG0VWWED = FFZREC.FFZENDMO; /* save end range*/
  ;
   /* ------------------------------------------------------------*/
   /* obtain invoice date from dfcast.vffctl01. this is used*/
   /* when gathering historical sales information.*/
   /* ------------------------------------------------------------*/
  ;
  FG0V110(); /* get invoice cutoff date*/
  FG0VW00.FG0VWICD = FF1REC.FF1IVCDT;
  ;
   /* ------------------------------------------------------------*/
   /* obtain monthly headings and quantities for historical*/
   /* data 1 year ago*/
   /* ------------------------------------------------------------*/
  ;
  FG0V120();
  ;
   /* ------------------------------------------------------------*/
   /* obtain monthly headings and quantities for historical*/
   /* data 2 years ago*/
   /* ------------------------------------------------------------*/
  ;
  FG0V130();
  ;
   /* ------------------------------------------------------------*/
   /* obtain monthly headings and quantities for historical*/
   /* data 3 years ago*/
   /* ------------------------------------------------------------*/
  ;
  FG0V140();
  ;
   /* ------------------------------------------------------------*/
   /* obtain monthly headings and qtys for user created data*/
   /* ------------------------------------------------------------*/
  ;
  FG0V150();
  ;
   /* ------------------------------------------------------------*/
   /* reloade user requested date range*/
   /* ------------------------------------------------------------*/
  ;
  FFZREC.FFZBEGMO = FG0VW00.FG0VWWBD; /* save begin range*/
  FFZREC.FFZENDMO = FG0VW00.FG0VWWED; /* save end range*/
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  FG0VW01.CACHGFL = "Y"; /* set data loaded flag*/
  FG0VW00.FG0VWSWR = "N"; /* Request for data switch*/
  ;
end // end FG0V100

// Select dfcast.vffctl01 row
Function FG0V110()
   /* ------------------------------------------------------------*/
   /* obtain next work sheet number dfcast.vffctl01*/
   /* ------------------------------------------------------------*/
  ;
  set FF1REC empty; /* Clear row storage area*/
  ;
  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "110"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VFFCTL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF1REC.FF1GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0V110

// load historical data 1 yr ago
Function FG0V120()
   /* ------------------------------------------------------------*/
   /* obtain monthly headings for historical data 1 yr ago*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty;
  ;
  FFZREC.FFZBYYMM = FG0VW01.FG0VWHBY[1];
  FFZREC.FFZEYYMM = FG0VW01.FG0VWHEY[1];
  ;
  FG0VS01(); /* get months within range*/
  ;
  FG0VW00.FG0VWIDX = 1; /* init index*/
  while (FG0VW00.FG0VWIDX <= FFZREC.FFZNUMMO) /* process all months in range*/
    ;
    FG0VW01.FG0VWHD1[FG0VWIDX] = FFZREC.FFZINDMO[FG0VWIDX];
    ;
    FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1;
  end
  ;
   /* ------------------------------------------------------------*/
   /* obtain historical actual/forecast sales 1 yr ago*/
   /* ------------------------------------------------------------*/
  ;
  FG0VW00.FG0VWH1L = "N"; /* init load flag*/
  FG0VW00.FG0VWH1E = "N"; /* init error flag*/
  ;
  FG0VW00.FG0VWUTQ = 0; /* init total quantity*/
  FG0VW00.FG0VWIDX = 1; /* init index*/
  ;
  while (FG0VW00.FG0VWH1L != "Y" /* data load flag*/
   && FG0VW00.FG0VWH1E != "Y" /* data error flag*/
   && FG0VW00.FG0VWIDX <= FFZREC.FFZNUMMO
   && FFZREC.FFZINDMO[FG0VWIDX] <= FG0VW01.FG0VWPED[1])
    ;
    if (FFZREC.FFZINDMO[FG0VWIDX] < FG0VW00.FG0VWCD1)
      FG0VS06(); /* get actuals*/
      ;
      FG0VW01.FG0VWUQ1[FG0VWIDX] = FG0VW00.FG0VWUFS;
      FFXREC.FFXNUMB = FG0VW00.FG0VWUFS;
      XSFFS10();
      FG0VW01.FG0VWQT1[FG0VWIDX] = FFXREC.FFXCHAR;
      ;
      FG0VW00.FG0VWUTQ = FG0VW00.FG0VWUFS + FG0VW00.FG0VWUTQ;
      ;
    else
      if (FFZREC.FFZINDMO[FG0VWIDX] == FG0VW00.FG0VWCD1
       && FG0VW00.FG0VWCYM == FG0VW00.FG0VWIYM
       && FG0VW00.FG0VWCWD >= FG0VW00.FG0VWICD)
        ;
        FG0VS06(); /* get actuals*/
        ;
        FG0VW01.FG0VWUQ1[FG0VWIDX] = FG0VW00.FG0VWUFS;
        FFXREC.FFXNUMB = FG0VW00.FG0VWUFS;
        XSFFS10();
        FG0VW01.FG0VWQT1[FG0VWIDX] = FFXREC.FFXCHAR;
        ;
        FG0VW00.FG0VWUTQ = FG0VW00.FG0VWUFS + FG0VW00.FG0VWUTQ;
        ;
      else
        ;
        set FFCREC empty;
        FFCREC.FFABEGMO = FFZREC.FFZINDMO[FG0VWIDX];
        FFCREC.FFAENDMO = FG0VW01.FG0VWPED[1];
        ;
        FG0VS02(); /* select dfcast.vrcat001*/
        ;
        if (SQLCA.VAGen_SQLCODE == 100
         && FFZREC.FFZINDMO[FG0VWIDX] > FG0VW00.FG0VWCD5)
          FG0VW00.FG0VWH1E = "Y";
        else
          if (SQLCA.VAGen_SQLCODE == 0)
            ;
            FG0VW00.FG0VWSIX = FG0VW00.FG0VWIDX;
            FG0VW00.FG0VWUFS = 0;
            while (FG0VW00.FG0VWIDX <= FFZREC.FFZNUMMO
             && FFZREC.FFZINDMO[FG0VWIDX] <= FG0VW01.FG0VWPED[1])
              ;
              FG0VS07(); /* select dfcast.vmcat001*/
              ;
              FG0VW00.FG0VWNM1 = FF7REC.FF6SLFCT * FF7REC.FF7FURAT / 100;
              FG0VW00.FG0VWUFS = FG0VW00.FG0VWNM1 + FG0VW00.FG0VWUFS;
              ;
              FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1;
              ;
            end
            FG0VW00.FG0VWIDX = FG0VW00.FG0VWSIX;
            ;
            set FFDREC empty;
            ;
            FFFREC.FFFBEGMO = FFCREC.FFABEGMO;
            FFFREC.FFFENDMO = FFCREC.FFAENDMO;
            ;
            FFDREC.FFABEGMO = FFCREC.FFABEGMO;
            FFDREC.FFAENDMO = FFCREC.FFAENDMO;
            ;
            FG0VS03(); /* select dfcast.vrcmth01*/
            FG0VS04(); /* fetch dfcast.vrcmth01*/
            while (SQLCA.VAGen_SQLCODE == 0)
              ;
              FG0VW01.FG0VWUQ1[FG0VWIDX] = mathLib.round(FG0VW00.FG0VWUFS * FFDREC.FFDFSPCT / 100, -mathLib.decimals(FG0VW01.FG0VWUQ1[FG0VWIDX]));
              ;
              FFXREC.FFXNUMB = FG0VW01.FG0VWUQ1[FG0VWIDX];
              XSFFS10();
              FG0VW01.FG0VWQT1[FG0VWIDX] = FFXREC.FFXCHAR;
              ;
              FG0VW00.FG0VWUTQ = FG0VW01.FG0VWUQ1[FG0VWIDX] + FG0VW00.FG0VWUTQ;
              ;
              FG0VS04();
              ;
              FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1;
              ;
            end
            FG0VS05(); /* close dfcast.vrcmth01*/
            FG0VW00.FG0VWH1L = "Y"; /* data loaded*/
          else
            while (FG0VW00.FG0VWIDX <= FFZREC.FFZNUMMO
             && FFZREC.FFZINDMO[FG0VWIDX] <= FG0VW01.FG0VWPED[1])
              ;
              FG0VS07(); /* select dfcast.vmcat001*/
              ;
              FG0VW00.FG0VWUFS = mathLib.round(FF7REC.FF7FUDMD * FF7REC.FF7FLLRT / 100, -mathLib.decimals(FG0VW00.FG0VWUFS));
              ;
              FG0VW01.FG0VWUQ1[FG0VWIDX] = FG0VW00.FG0VWUFS;
              FFXREC.FFXNUMB = FG0VW00.FG0VWUFS;
              XSFFS10();
              FG0VW01.FG0VWQT1[FG0VWIDX] = FFXREC.FFXCHAR;
              ;
              FG0VW00.FG0VWUTQ = FG0VW00.FG0VWUFS + FG0VW00.FG0VWUTQ;
              ;
              FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1;
              ;
            end
            FG0VW00.FG0VWH1L = "Y"; /* set load flag*/
          end
        end
      end
    end
    ;
    FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1;
    ;
  end
  ;
   /* ---------------------------------------------------*/
   /* translate/load historical quantity total*/
   /* ---------------------------------------------------*/
  ;
  FG0VW01.FG0VWUQ1[13] = FG0VW00.FG0VWUTQ;
  FFXREC.FFXNUMB = FG0VW00.FG0VWUTQ;
  XSFFS10();
  FG0VW01.FG0VWQT1[13] = FFXREC.FFXCHAR;
  ;
   /* ------------------------------------------------------------*/
   /* calculate historical monthly percents*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0VW01.FG0VWUQ1[13] != 0) /* (total qty entry)*/
    ;
    FG0VW00.FG0VWNM1 = FG0VW01.FG0VWUQ1[13];
    FG0VW00.FG0VWIDX = 1;
    while (FG0VW00.FG0VWIDX <= FFZREC.FFZNUMMO) /* nbr months loaded*/
      ;
      FG0VW00.FG0VWNM2 = FG0VW01.FG0VWUQ1[FG0VWIDX] * 100;
      FG0VW01.FG0VWIX1[FG0VWIDX] = mathLib.round(FG0VW00.FG0VWNM2 / FG0VW00.FG0VWNM1, -mathLib.decimals(FG0VW01.FG0VWIX1[FG0VWIDX]));
      ;
      FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1;
      ;
    end
  end
  ;
  ;
end // end FG0V120

// load historical data 2 yrs ago
Function FG0V130()
   /* ------------------------------------------------------------*/
   /* obtain monthly headings for historical data 2 yrs ago*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty;
  ;
  FFZREC.FFZBYYMM = FG0VW01.FG0VWHBY[2];
  FFZREC.FFZEYYMM = FG0VW01.FG0VWHEY[2];
  ;
  FG0VS01(); /* get months within range*/
  ;
  FG0VW00.FG0VWIDX = 1; /* init index*/
  while (FG0VW00.FG0VWIDX <= FFZREC.FFZNUMMO) /* process all months in range*/
    ;
    FG0VW01.FG0VWHD2[FG0VWIDX] = FFZREC.FFZINDMO[FG0VWIDX];
    ;
    FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1;
  end
  ;
   /* ------------------------------------------------------------*/
   /* obtain historical actual/forecast sales 2 yrs ago*/
   /* ------------------------------------------------------------*/
  ;
  FG0VW00.FG0VWH2L = "N"; /* init load flag*/
  FG0VW00.FG0VWH2E = "N"; /* init error flag*/
  ;
  FG0VW00.FG0VWUTQ = 0; /* init total quantity*/
  FG0VW00.FG0VWIDX = 1; /* init index*/
  ;
  while (FG0VW00.FG0VWH2L != "Y" /* data load flag*/
   && FG0VW00.FG0VWH2E != "Y" /* data error flag*/
   && FG0VW00.FG0VWIDX <= FFZREC.FFZNUMMO
   && FFZREC.FFZINDMO[FG0VWIDX] <= FG0VW01.FG0VWPED[2])
    ;
    if (FFZREC.FFZINDMO[FG0VWIDX] < FG0VW00.FG0VWCD1)
      FG0VS06(); /* get actuals*/
      ;
      FG0VW01.FG0VWUQ2[FG0VWIDX] = FG0VW00.FG0VWUFS;
      FFXREC.FFXNUMB = FG0VW00.FG0VWUFS;
      XSFFS10();
      FG0VW01.FG0VWQT2[FG0VWIDX] = FFXREC.FFXCHAR;
      ;
      FG0VW00.FG0VWUTQ = FG0VW00.FG0VWUFS + FG0VW00.FG0VWUTQ;
      ;
    else
      if (FFZREC.FFZINDMO[FG0VWIDX] == FG0VW00.FG0VWCD1
       && FG0VW00.FG0VWCYM == FG0VW00.FG0VWIYM
       && FG0VW00.FG0VWCWD >= FG0VW00.FG0VWICD)
        ;
        FG0VS06(); /* get actuals*/
        ;
        FG0VW01.FG0VWUQ2[FG0VWIDX] = FG0VW00.FG0VWUFS;
        FFXREC.FFXNUMB = FG0VW00.FG0VWUFS;
        XSFFS10();
        FG0VW01.FG0VWQT2[FG0VWIDX] = FFXREC.FFXCHAR;
        ;
        FG0VW00.FG0VWUTQ = FG0VW00.FG0VWUFS + FG0VW00.FG0VWUTQ;
        ;
      else
        ;
        set FFCREC empty;
        FFCREC.FFABEGMO = FFZREC.FFZINDMO[FG0VWIDX];
        FFCREC.FFAENDMO = FG0VW01.FG0VWPED[2];
        ;
        FG0VS02(); /* select dfcast.vrcat001*/
        ;
        if (SQLCA.VAGen_SQLCODE == 100
         && FFZREC.FFZINDMO[FG0VWIDX] > FG0VW00.FG0VWCD5)
          FG0VW00.FG0VWH2E = "Y";
        else
          if (SQLCA.VAGen_SQLCODE == 0)
            ;
            FG0VW00.FG0VWSIX = FG0VW00.FG0VWIDX;
            FG0VW00.FG0VWUFS = 0;
            while (FG0VW00.FG0VWIDX <= FFZREC.FFZNUMMO
             && FFZREC.FFZINDMO[FG0VWIDX] <= FG0VW01.FG0VWPED[2])
              ;
              FG0VS07(); /* select dfcast.vmcat001*/
              ;
              FG0VW00.FG0VWNM1 = FF7REC.FF6SLFCT * FF7REC.FF7FURAT / 100;
              FG0VW00.FG0VWUFS = FG0VW00.FG0VWNM1 + FG0VW00.FG0VWUFS;
              ;
              FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1;
              ;
            end
            FG0VW00.FG0VWIDX = FG0VW00.FG0VWSIX;
            ;
            set FFDREC empty;
            ;
            FFFREC.FFFBEGMO = FFCREC.FFABEGMO;
            FFFREC.FFFENDMO = FFCREC.FFAENDMO;
            ;
            FFDREC.FFABEGMO = FFCREC.FFABEGMO;
            FFDREC.FFAENDMO = FFCREC.FFAENDMO;
            ;
            FG0VS03(); /* select dfcast.vrcmth01*/
            FG0VS04(); /* fetch dfcast.vrcmth01*/
            while (SQLCA.VAGen_SQLCODE == 0)
              ;
              FG0VW01.FG0VWUQ2[FG0VWIDX] = mathLib.round(FG0VW00.FG0VWUFS * FFDREC.FFDFSPCT / 100, -mathLib.decimals(FG0VW01.FG0VWUQ2[FG0VWIDX]));
              ;
              FFXREC.FFXNUMB = FG0VW01.FG0VWUQ2[FG0VWIDX];
              XSFFS10();
              FG0VW01.FG0VWQT2[FG0VWIDX] = FFXREC.FFXCHAR;
              ;
              FG0VW00.FG0VWUTQ = FG0VW01.FG0VWUQ2[FG0VWIDX] + FG0VW00.FG0VWUTQ;
              ;
              FG0VS04();
              ;
              FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1;
              ;
            end
            FG0VS05(); /* close dfcast.vrcmth01*/
            FG0VW00.FG0VWH2L = "Y"; /* data loaded*/
          else
            while (FG0VW00.FG0VWIDX <= FFZREC.FFZNUMMO
             && FFZREC.FFZINDMO[FG0VWIDX] <= FG0VW01.FG0VWPED[2])
              ;
              FG0VS07(); /* select dfcast.vmcat001*/
              ;
              FG0VW00.FG0VWUFS = mathLib.round(FF7REC.FF7FUDMD * FF7REC.FF7FLLRT / 100, -mathLib.decimals(FG0VW00.FG0VWUFS));
              ;
              FG0VW01.FG0VWUQ2[FG0VWIDX] = FG0VW00.FG0VWUFS;
              FFXREC.FFXNUMB = FG0VW00.FG0VWUFS;
              XSFFS10();
              FG0VW01.FG0VWQT2[FG0VWIDX] = FFXREC.FFXCHAR;
              ;
              FG0VW00.FG0VWUTQ = FG0VW00.FG0VWUFS + FG0VW00.FG0VWUTQ;
              ;
              FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1;
            end
            FG0VW00.FG0VWH2L = "Y"; /* set load flag*/
          end
        end
      end
    end
    ;
    FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1;
    ;
  end
  ;
   /* ---------------------------------------------------*/
   /* translate/load historical quantity total*/
   /* ---------------------------------------------------*/
  ;
  FG0VW01.FG0VWUQ2[13] = FG0VW00.FG0VWUTQ;
  FFXREC.FFXNUMB = FG0VW00.FG0VWUTQ;
  XSFFS10();
  FG0VW01.FG0VWQT2[13] = FFXREC.FFXCHAR;
  ;
   /* ------------------------------------------------------------*/
   /* calculate historical monthly percents*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0VW01.FG0VWUQ2[13] != 0) /* (total qty entry)*/
    ;
    FG0VW00.FG0VWNM1 = FG0VW01.FG0VWUQ2[13];
    FG0VW00.FG0VWIDX = 1;
    while (FG0VW00.FG0VWIDX <= FFZREC.FFZNUMMO) /* nbr months loaded*/
      ;
      FG0VW00.FG0VWNM2 = FG0VW01.FG0VWUQ2[FG0VWIDX] * 100;
      FG0VW01.FG0VWIX2[FG0VWIDX] = mathLib.round(FG0VW00.FG0VWNM2 / FG0VW00.FG0VWNM1, -mathLib.decimals(FG0VW01.FG0VWIX2[FG0VWIDX]));
      ;
      FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1;
      ;
    end
  end
  ;
  ;
end // end FG0V130

// load historical data 3 yr ago
Function FG0V140()
   /* ------------------------------------------------------------*/
   /* obtain monthly headings for historical data 3 yrs ago*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty;
  ;
  FFZREC.FFZBYYMM = FG0VW01.FG0VWHBY[3];
  FFZREC.FFZEYYMM = FG0VW01.FG0VWHEY[3];
  ;
  FG0VS01(); /* get months within range*/
  ;
  FG0VW00.FG0VWIDX = 1; /* init index*/
  while (FG0VW00.FG0VWIDX <= FFZREC.FFZNUMMO) /* process all months in range*/
    ;
    FG0VW01.FG0VWHD3[FG0VWIDX] = FFZREC.FFZINDMO[FG0VWIDX];
    ;
    FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1;
  end
  ;
   /* ------------------------------------------------------------*/
   /* obtain historical actual/forecast sale 3 yrs ago*/
   /* ------------------------------------------------------------*/
  ;
  FG0VW00.FG0VWH3L = "N"; /* init load flag*/
  FG0VW00.FG0VWH3E = "N"; /* init error flag*/
  ;
  FG0VW00.FG0VWUTQ = 0; /* init total quantity*/
  FG0VW00.FG0VWIDX = 1; /* init index*/
  ;
  while (FG0VW00.FG0VWH3L != "Y" /* data load flag*/
   && FG0VW00.FG0VWH3E != "Y" /* data error flag*/
   && FG0VW00.FG0VWIDX <= FFZREC.FFZNUMMO
   && FFZREC.FFZINDMO[FG0VWIDX] <= FG0VW01.FG0VWPED[3])
    ;
    if (FFZREC.FFZINDMO[FG0VWIDX] < FG0VW00.FG0VWCD1)
      FG0VS06(); /* get actuals*/
      ;
      FG0VW01.FG0VWUQ3[FG0VWIDX] = FG0VW00.FG0VWUFS;
      FFXREC.FFXNUMB = FG0VW00.FG0VWUFS;
      XSFFS10();
      FG0VW01.FG0VWQT3[FG0VWIDX] = FFXREC.FFXCHAR;
      ;
      FG0VW00.FG0VWUTQ = FG0VW00.FG0VWUFS + FG0VW00.FG0VWUTQ;
      ;
    else
      if (FFZREC.FFZINDMO[FG0VWIDX] == FG0VW00.FG0VWCD1
       && FG0VW00.FG0VWCYM == FG0VW00.FG0VWIYM
       && FG0VW00.FG0VWCWD >= FG0VW00.FG0VWICD)
        ;
        FG0VS06(); /* get actuals*/
        ;
        FG0VW01.FG0VWUQ3[FG0VWIDX] = FG0VW00.FG0VWUFS;
        FFXREC.FFXNUMB = FG0VW00.FG0VWUFS;
        XSFFS10();
        FG0VW01.FG0VWQT3[FG0VWIDX] = FFXREC.FFXCHAR;
        ;
        FG0VW00.FG0VWUTQ = FG0VW00.FG0VWUFS + FG0VW00.FG0VWUTQ;
        ;
      else
        ;
        set FFCREC empty;
        FFCREC.FFABEGMO = FFZREC.FFZINDMO[FG0VWIDX];
        FFCREC.FFAENDMO = FG0VW01.FG0VWPED[3];
        ;
        FG0VS02(); /* select dfcast.vrcat001*/
        ;
        if (SQLCA.VAGen_SQLCODE == 100
         && FFZREC.FFZINDMO[FG0VWIDX] > FG0VW00.FG0VWCD5)
          FG0VW00.FG0VWH3E = "Y";
        else
          if (SQLCA.VAGen_SQLCODE == 0)
            ;
            FG0VW00.FG0VWSIX = FG0VW00.FG0VWIDX;
            FG0VW00.FG0VWUFS = 0;
            while (FG0VW00.FG0VWIDX <= FFZREC.FFZNUMMO
             && FFZREC.FFZINDMO[FG0VWIDX] <= FG0VW01.FG0VWPED[3])
              ;
              FG0VS07(); /* select dfcast.vmcat001*/
              ;
              FG0VW00.FG0VWNM1 = FF7REC.FF6SLFCT * FF7REC.FF7FURAT / 100;
              FG0VW00.FG0VWUFS = FG0VW00.FG0VWNM1 + FG0VW00.FG0VWUFS;
              ;
              FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1;
              ;
            end
            FG0VW00.FG0VWIDX = FG0VW00.FG0VWSIX;
            ;
            set FFDREC empty;
            ;
            FFFREC.FFFBEGMO = FFCREC.FFABEGMO;
            FFFREC.FFFENDMO = FFCREC.FFAENDMO;
            ;
            FFDREC.FFABEGMO = FFCREC.FFABEGMO;
            FFDREC.FFAENDMO = FFCREC.FFAENDMO;
            ;
            FG0VS03(); /* select dfcast.vrcmth01*/
            FG0VS04(); /* fetch dfcast.vrcmth01*/
            while (SQLCA.VAGen_SQLCODE == 0)
              ;
              FG0VW01.FG0VWUQ3[FG0VWIDX] = mathLib.round(FG0VW00.FG0VWUFS * FFDREC.FFDFSPCT / 100, -mathLib.decimals(FG0VW01.FG0VWUQ3[FG0VWIDX]));
              ;
              FFXREC.FFXNUMB = FG0VW01.FG0VWUQ3[FG0VWIDX];
              XSFFS10();
              FG0VW01.FG0VWQT3[FG0VWIDX] = FFXREC.FFXCHAR;
              ;
              FG0VW00.FG0VWUTQ = FG0VW01.FG0VWUQ3[FG0VWIDX] + FG0VW00.FG0VWUTQ;
              ;
              FG0VS04();
              ;
              FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1;
              ;
            end
            FG0VS05(); /* close dfcast.vrcmth01*/
            FG0VW00.FG0VWH3L = "Y"; /* data loaded*/
          else
            while (FG0VW00.FG0VWIDX <= FFZREC.FFZNUMMO
             && FFZREC.FFZINDMO[FG0VWIDX] <= FG0VW01.FG0VWPED[3])
              ;
              FG0VS07(); /* select dfcast.vmcat001*/
              ;
              FG0VW00.FG0VWUFS = mathLib.round(FF7REC.FF7FUDMD * FF7REC.FF7FLLRT / 100, -mathLib.decimals(FG0VW00.FG0VWUFS));
              ;
              FG0VW01.FG0VWUQ3[FG0VWIDX] = FG0VW00.FG0VWUFS;
              FFXREC.FFXNUMB = FG0VW00.FG0VWUFS;
              XSFFS10();
              FG0VW01.FG0VWQT3[FG0VWIDX] = FFXREC.FFXCHAR;
              ;
              FG0VW00.FG0VWUTQ = FG0VW00.FG0VWUFS + FG0VW00.FG0VWUTQ;
              ;
              FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1;
            end
            FG0VW00.FG0VWH3L = "Y"; /* set load flag*/
          end
        end
      end
    end
    ;
    FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1;
    ;
  end
  ;
   /* ---------------------------------------------------*/
   /* translate/load historical quantity total*/
   /* ---------------------------------------------------*/
  ;
  FG0VW01.FG0VWUQ3[13] = FG0VW00.FG0VWUTQ;
  FFXREC.FFXNUMB = FG0VW00.FG0VWUTQ;
  XSFFS10();
  FG0VW01.FG0VWQT3[13] = FFXREC.FFXCHAR;
  ;
   /* ------------------------------------------------------------*/
   /* calculate historical monthly percents*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0VW01.FG0VWUQ3[13] != 0) /* (total qty entry)*/
    ;
    FG0VW00.FG0VWNM1 = FG0VW01.FG0VWUQ3[13];
    FG0VW00.FG0VWIDX = 1;
    while (FG0VW00.FG0VWIDX <= FFZREC.FFZNUMMO) /* nbr months loaded*/
      ;
      FG0VW00.FG0VWNM2 = FG0VW01.FG0VWUQ3[FG0VWIDX] * 100;
      FG0VW01.FG0VWIX3[FG0VWIDX] = mathLib.round(FG0VW00.FG0VWNM2 / FG0VW00.FG0VWNM1, -mathLib.decimals(FG0VW01.FG0VWIX3[FG0VWIDX]));
      ;
      FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1;
      ;
    end
  end
  ;
  ;
end // end FG0V140

// load user requested data
Function FG0V150()
  ;
   /* ------------------------------------------------------------*/
   /* obtain monthly headings and quantities for user created*/
   /* data*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty;
  ;
  FFZREC.FFZBYYMM = FG0VW01.FG0VWHBY[4]; /* user beg date*/
  FFZREC.FFZEYYMM = FG0VW01.FG0VWHEY[4]; /* user end date*/
  ;
  FG0VS01(); /* get months within range*/
  ;
  FG0VW00.FG0VWIDX = 1; /* init index*/
  while (FG0VW00.FG0VWIDX <= FFZREC.FFZNUMMO) /* process all months in range*/
    ;
    FG0VW01.FG0VWHD4[FG0VWIDX] = FFZREC.FFZINDMO[FG0VWIDX];
    ;
    FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* verify dfcast.vrcat001 exists and if the future ship*/
   /* indicator equals 'u' (user created), if so,  select all*/
   /* dfcast.vrcmth01 for the user requested date range.*/
   /* ------------------------------------------------------------*/
  ;
  set FFCREC empty;
  ;
  FFCREC.FFABEGMO = FFWREC.FFABEGMO;
  FFCREC.FFAENDMO = FFWREC.FFAENDMO;
  ;
  FG0VS02(); /* select dfcast.vrcat001*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (FFCREC.FFCFSIND == "1" /* history 1 yr ago*/
     && FG0VW00.FG0VWH1E != "Y")
      FG0VW01.FG0VWSEL[1] = "S"; /* data exists*/
    end
    if (FFCREC.FFCFSIND == "2" /* history 2 yr ago*/
     && FG0VW00.FG0VWH2E != "Y")
      FG0VW01.FG0VWSEL[2] = "S"; /* data exists*/
    end
    if (FFCREC.FFCFSIND == "3" /* history 3 yr ago*/
     && FG0VW00.FG0VWH3E != "Y")
      FG0VW01.FG0VWSEL[3] = "S"; /* data exists*/
    end
    if (FFCREC.FFCFSIND == "U") /* user created*/
      ;
      FG0VW01.FG0VWSEL[4] = "S"; /* data exists*/
      ;
      set FFDREC empty;
      ;
      FFFREC.FFFBEGMO = FFWREC.FFABEGMO;
      FFFREC.FFFENDMO = FFWREC.FFAENDMO;
      ;
      FFDREC.FFABEGMO = FFWREC.FFABEGMO;
      FFDREC.FFAENDMO = FFWREC.FFAENDMO;
      ;
      FG0VS03(); /* select 's1' dfcast.vrcmth01*/
      FG0VS04(); /* fetch 'n1' dfcast.vrcmth01*/
      ;
      FG0VW00.FG0VWIDX = 1; /* init index*/
      while (SQLCA.VAGen_SQLCODE == 0) /* process all dfcast.vrcmth01*/
        ;
        FG0VW01.FG0VWIX4[FG0VWIDX] = mathLib.round(FFDREC.FFDFSPCT + 0, -mathLib.decimals(FG0VW01.FG0VWIX4[FG0VWIDX]));
        ;
        FG0VS04(); /* fetch 'n1' dfcast.vrcmth01*/
        ;
        FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1;
        ;
      end
      ;
      FG0VS05(); /* close 'c1' dfcast.vrcmth01*/
      ;
    end
  end
  ;
  ;
end // end FG0V150

// Format and converse the map
Function FG0V200()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* if no errors format map*/
    ;
    /* ------------------------------------------------------------*/
     /* format screen*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0VW00.FG0VWSWF == "Y") /* map must be formatted*/
      FG0V210(); /* Format the data on the map*/
    end
    ;
  else
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* load message number*/
    ;
  end
  ;
  FG0VM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FG0VM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG0VM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* error message number*/
    FG0VM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    set FG0VM001 alarm; /* Indicate sound alarm*/
  end
  ;
  converse FG0VM001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FG0VM001.FG0VMHED[1] = " ";
  FG0VM001.FG0VMHED[2] = " ";
  FG0VM001.FG0VMHED[3] = " ";
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0;
  ;
  COMMAREA.CATOAP = FG0VM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG0VM001.CAITEM; /* Application data*/
  ;
  ;
end // end FG0V200

// Format the display data
Function FG0V210()
  ;
   /* ------------------------------------------------------------*/
   /* init map fg0vm001*/
   /* ------------------------------------------------------------*/
  ;
  set FG0VM001 initial; /* m001 input/ouput area*/
  ;
  FG0VW00.FG0VWSWF = "N"; /* init map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Format fg0vm001 using passed data*/
   /* ------------------------------------------------------------*/
  ;
  FG0VW00.FG0VWWDT = FFWREC.FFABEGMO; /* w/s date field*/
  FG0VM001.FG0VMBRG = FG0VW00.FG0VWWYM; /* begin month range*/
  FG0VW00.FG0VWWDT = FFWREC.FFAENDMO; /* w/s date field*/
  FG0VM001.FG0VMERG = FG0VW00.FG0VWWYM; /* end month range*/
  ;
  FG0VM001.YPGCD = FFWREC.YPGCD; /* product type group*/
  FG0VM001.YPGABRV = FFWREC.YPGABRV; /* product type group abrv*/
  ;
  FG0VM001.XPCCD = FFWREC.XPCCD; /* category code*/
  FG0VM001.XPCABRV = FFWREC.XPCABRV; /* category code abrv*/
  ;
   /* ------------------------------------------------------------*/
   /* if data has not been loaded bypass load map fiecds*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0VW01.CACHGFL != "Y")
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* load monthly headings/index/quantities/total for*/
   /* historical data 1 year ago*/
   /* ------------------------------------------------------------*/
  ;
  FG0VW00.FG0VWIDX = 1;
  while (FG0VW00.FG0VWIDX <= 12) /* nbr of mos loaded*/
    ;
    FG0VM001.FG0VMHD1[FG0VWIDX] = FG0VW01.FG0VWDH1[FG0VWIDX];
    if (FG0VW00.FG0VWH1E != "Y")
      FG0VM001.FG0VMIX1[FG0VWIDX] = FG0VW01.FG0VWIX1[FG0VWIDX];
      FG0VM001.FG0VMQT1[FG0VWIDX] = FG0VW01.FG0VWQT1[FG0VWIDX];
    end
    ;
    FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1; /* increment index*/
    ;
  end
  ;
  if (FG0VW00.FG0VWH1E == "Y")
    FG0VW00.FG0VWEBD = FG0VW01.FG0VWPBD[1];
    FG0VW00.FG0VWEED = FG0VW01.FG0VWPED[1];
    FG0VM001.FG0VMHED[1] = FG0VW00.FG0VWHEM;
  else
    FG0VM001.FG0VMTOT[1] = FG0VW01.FG0VWQT1[13];
    FG0VM001.FG0VMSEL[1] = FG0VW01.FG0VWSEL[1];
    set FG0VM001.FG0VMSEL[1] normal;
  end
  ;
   /* ------------------------------------------------------------*/
   /* load monthly headings/index/quantities/total for*/
   /* historical data 2 year ago*/
   /* ------------------------------------------------------------*/
  ;
  FG0VW00.FG0VWIDX = 1;
  while (FG0VW00.FG0VWIDX <= 12) /* nbr of mos loaded*/
    ;
    FG0VM001.FG0VMHD2[FG0VWIDX] = FG0VW01.FG0VWDH2[FG0VWIDX];
    if (FG0VW00.FG0VWH2E != "Y")
      FG0VM001.FG0VMIX2[FG0VWIDX] = FG0VW01.FG0VWIX2[FG0VWIDX];
      FG0VM001.FG0VMQT2[FG0VWIDX] = FG0VW01.FG0VWQT2[FG0VWIDX];
    end
    ;
    FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1; /* increment index*/
    ;
  end
  ;
  if (FG0VW00.FG0VWH2E == "Y")
    FG0VW00.FG0VWEBD = FG0VW01.FG0VWPBD[2];
    FG0VW00.FG0VWEED = FG0VW01.FG0VWPED[2];
    FG0VM001.FG0VMHED[2] = FG0VW00.FG0VWHEM;
  else
    FG0VM001.FG0VMTOT[2] = FG0VW01.FG0VWQT2[13];
    FG0VM001.FG0VMSEL[2] = FG0VW01.FG0VWSEL[2];
    set FG0VM001.FG0VMSEL[2] normal;
  end
  ;
   /* ------------------------------------------------------------*/
   /* load monthly headings/index/quantities/total for*/
   /* historical data 3 year ago*/
   /* ------------------------------------------------------------*/
  ;
  FG0VW00.FG0VWIDX = 1;
  while (FG0VW00.FG0VWIDX <= 12) /* nbr of mos loaded*/
    ;
    FG0VM001.FG0VMHD3[FG0VWIDX] = FG0VW01.FG0VWDH3[FG0VWIDX];
    if (FG0VW00.FG0VWH3E != "Y")
      FG0VM001.FG0VMIX3[FG0VWIDX] = FG0VW01.FG0VWIX3[FG0VWIDX];
      FG0VM001.FG0VMQT3[FG0VWIDX] = FG0VW01.FG0VWQT3[FG0VWIDX];
    end
    ;
    FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1; /* increment index*/
    ;
  end
  ;
  if (FG0VW00.FG0VWH3E == "Y")
    FG0VW00.FG0VWEBD = FG0VW01.FG0VWPBD[3];
    FG0VW00.FG0VWEED = FG0VW01.FG0VWPED[3];
    FG0VM001.FG0VMHED[3] = FG0VW00.FG0VWHEM;
  else
    FG0VM001.FG0VMTOT[3] = FG0VW01.FG0VWQT3[13];
    FG0VM001.FG0VMSEL[3] = FG0VW01.FG0VWSEL[3];
    set FG0VM001.FG0VMSEL[3] normal;
  end
  ;
   /* ------------------------------------------------------------*/
   /* load user created monthly headings*/
   /* ------------------------------------------------------------*/
  ;
  FG0VW00.FG0VWIDX = 1;
  while (FG0VW00.FG0VWIDX <= 12) /* nbr of mos loaded*/
    ;
    FG0VM001.FG0VMHD4[FG0VWIDX] = FG0VW01.FG0VWDH4[FG0VWIDX];
    ;
    FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1; /* increment index*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if dfcast.vrcmth01 data has been loaded only allow the*/
   /* user to update existing data, if not, allow the user to*/
   /* add up to 12 indexs*/
   /* ------------------------------------------------------------*/
  ;
  FG0VW00.FG0VWIDX = 1;
  while (FG0VW00.FG0VWIDX <= 12
   && FG0VW01.FG0VWHD4[FG0VWIDX] <= FFWREC.FFAENDMO)
    ;
    FG0VM001.FG0VMIX4[FG0VWIDX] = FG0VW01.FG0VWIX4[FG0VWIDX];
    set FG0VM001.FG0VMIX4[FG0VWIDX] normal;
    ;
    FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1; /* increment index*/
    ;
  end
  ;
  FG0VM001.FG0VMSEL[4] = FG0VW01.FG0VWSEL[4];
  set FG0VM001.FG0VMSEL[4] normal;
  ;
  ;
end // end FG0V210

// Check attention identifier
Function FG0V300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    converseLib.clearScreen();
     /* refresh map*/
    ;
    FG0VW00.FG0VWSWF = "Y"; /* format screen m001*/
    FG0VW00.FG0VWSWR = "N"; /* request for data*/
    ;
    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0VM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
      FG0VW00.FG0VWSWF = "Y"; /* format screen m001*/
      FG0VW00.FG0VWSWR = "N"; /* request for data*/
      ;
      set FG0VM001.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG0VM001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FG0A"; /* TO application*/
    end
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    FG0VW00.FG0VWSWF = "Y"; /* format screen m001*/
    FG0VW00.FG0VWSWR = "N"; /* request for data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf13) /* pf13 was not pressed*/
    ;
    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FG0V300

// Reset highlighted fields
Function FG0V400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FG0VM001.FG0VMBRG initialAttributes; /* begin range*/
  set FG0VM001.FG0VMERG initialAttributes; /* end range*/
  set FG0VM001.XPCCD initialAttributes; /* category code*/
  set FG0VM001.YPGCD initialAttributes; /* product type group*/
  ;
  if (FG0VW01.CACHGFL == "Y")
    ;
    set FG0VM001.FG0VMSEL[1] normal;
    set FG0VM001.FG0VMSEL[2] normal;
    set FG0VM001.FG0VMSEL[3] normal;
    set FG0VM001.FG0VMSEL[4] normal;
    ;
    FG0VW00.FG0VWIDX = 1;
    while (FG0VW00.FG0VWIDX <= 12
     && FG0VW01.FG0VWHD4[FG0VWIDX] <= FFWREC.FFAENDMO)
      ;
      set FG0VM001.FG0VMIX4[FG0VWIDX] normal;
      ;
      FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1;
      ;
    end
  end
  ;
  set FG0VM001.CATOAP initialAttributes;
  set FG0VM001.CAITEM initialAttributes;
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0VM001.XPCCD == "?" /* categroy code*/
   || FG0VM001.YPGCD == "?") /* product type group*/
    ;
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  else
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0VM001.XPCCD == "?") /* product category list*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "CATEGORY CODES "; /* Heading*/
    ;
    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0VM001.XPCCD = FFWREC.XPCCD; /* product category*/
      XPCREC.XPCCD = FFWREC.XPCCD; /* product category*/
      XPCREC.XGPCD = COMMAREA.XGPCD; /* gpc code*/
      if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
        FG0VM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
      end
    else
      FG0VM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FG0VM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG0VM001.XPCCD cursor; /* Establish cursor position*/
    ;
  end
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type group codes*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0VM001.YPGCD == "?") /* product type grp list*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT TYPE GROUP"; /* Heading*/
    ;
    XX0XW02.YPGFFFL = "Y"; /* init flag*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0VM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FG0VM001.YPGABRV = FFWREC.YPGABRV; /* Restore prior code*/
    else
      FG0VM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FG0VM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG0VM001.YPGCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0V400

// Verify the entered data
Function FG0V500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FG0VM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* request for transfer*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf13)
    ;
    FG0VS08(); /* verify modifiable fields*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate entry fields*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter)
    ;
    FG0V510(); /* validate entry fields*/
    ;
    /* ------------------------------------------------------*/
     /* if key data changed check modifiable fields*/
    /* ------------------------------------------------------*/
    ;
    FG0VW00.FG0VWWBD = FFWREC.FFABEGMO;
    FG0VW00.FG0VWWED = FFWREC.FFAENDMO;
    ;
    if (FG0VM001.YPGCD != FFWREC.YPGCD        /* product type grp chg*/
     || FG0VM001.YPGCD == " "                 /* product type grp chg*/
     || FG0VM001.XPCCD != FFWREC.XPCCD        /* product category chg*/
     || FG0VM001.XPCCD == " "                 /* product category chg*/
     || FG0VM001.FG0VMBRG != FG0VW00.FG0VWBYM /* beg range changed*/
     || FG0VM001.FG0VMBRG == 0                /* beg range changed*/
     || FG0VM001.FG0VMERG != FG0VW00.FG0VWEYM /* end range changed*/
     || FG0VM001.FG0VMERG == 0)               /* end range changed*/
      ;
      if (FG0VW01.CACHGFL == "Y")
        FG0VS08(); /* verify modifiable fields*/
      end
      ;
      if (converseVar.validationMsgNum == 0)
        FG0VW00.FG0VWSWR = "Y"; /* request data request*/
      end
      ;
    end
  end
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end
  ;
  ;
end // end FG0V500

// validate modifiable data
Function FG0V510()
  ;
   /* ------------------------------------------------------------*/
   /* validate user created index*/
   /* ------------------------------------------------------------*/
  ;
  FG0VW01.FG0VWUVQ = 0;
  FG0VW00.FG0VWIDX = 12;
  while (FG0VW00.FG0VWIDX > 0)
    ;
    FG0VW01.FG0VWUVQ = FG0VW01.FG0VWUVQ + FG0VM001.FG0VMIX4[FG0VWIDX];
    ;
    FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX - 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if user created was selected and the percent total does*/
   /* not equal 100 display variance qty and error message*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0VW01.FG0VWUVQ != 100
   && FG0VW01.FG0VWUVQ != 0)
    converseLib.validationFailed(159);
    FFWREC.XXXMODID = "510";
    FG0VW01.FG0VWUVQ = 100 - FG0VW01.FG0VWUVQ;
    FG0VM001.FG0VMVQT = FG0VW01.FG0VWUVQ;
    set FG0VM001.FG0VMIX4[1] cursor;
  else
    if (FG0VW01.FG0VWUVQ == 0
     && FG0VM001.FG0VMSEL[4] == "S")
      converseLib.validationFailed(159);
      FFWREC.XXXMODID = "510";
      FG0VW01.FG0VWUVQ = 100 - FG0VW01.FG0VWUVQ;
      FG0VM001.FG0VMVQT = FG0VW01.FG0VWUVQ;
      set FG0VM001.FG0VMIX4[1] cursor;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate product category code*/
   /* ------------------------------------------------------------*/
  ;
  XPCREC.XGPCD = COMMAREA.XGPCD;
  XPCREC.XPCCD = FG0VM001.XPCCD;
  if (XPCREC.XPCKEY in XPCTBL.XPCKEY
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    FG0VM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
  else
    FG0VM001.XPCABRV = " ";
    converseLib.validationFailed(118);
    FFWREC.XXXMODID = "510";
    set FG0VM001.XPCCD cursor, bold;
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate product type group*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0VM001.YPGCD != "*")
    if (FG0VM001.YPGCD in YPGTBL.YPGCD
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      FG0VM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
    else
      FG0VM001.YPGABRV = " ";
      converseLib.validationFailed(118);
      FFWREC.XXXMODID = "510";
      set FG0VM001.YPGCD cursor, bold;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate end yymm range and begin yymm range*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty;
  ;
  FFZREC.FFZMONTH = 6;
  FFZREC.FFZBYYMM = FG0VM001.FG0VMBRG;
  FFZREC.FFZEYYMM = FG0VM001.FG0VMERG;
  ;
  XSFFS35(); /* edit date range*/
  ;
  if (FFZREC.FFZENDRC == "1")
    set FG0VM001.FG0VMERG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "510";
  else
    if (FFZREC.FFZENDRC == "2")
      set FG0VM001.FG0VMERG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "510";
    else
      if (FFZREC.FFZENDRC == "3")
        set FG0VM001.FG0VMERG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "510";
      end
    end
  end
  ;
  if (FFZREC.FFZBEGRC == "1")
    set FG0VM001.FG0VMBRG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "510";
  else
    if (FFZREC.FFZBEGRC == "2")
      set FG0VM001.FG0VMBRG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "510";
    else
      if (FFZREC.FFZBEGRC == "3")
        set FG0VM001.FG0VMBRG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "510";
      end
    end
  end
   /* ------------------------------------------------------------*/
   /* validate 's'election field*/
   /* ------------------------------------------------------------*/
  ;
  FG0VW00.FG0VWSLF = "N"; /* init selection flag*/
  ;
  FG0VW00.FG0VWIDX = 4; /* init index*/
  while (FG0VW00.FG0VWIDX >= 1)
    ;
    if (FG0VM001.FG0VMSEL[FG0VWIDX] != " "
     && FG0VM001.FG0VMSEL[FG0VWIDX] != "S")
      converseLib.validationFailed(41);
      FFWREC.XXXMODID = "510";
      set FG0VM001.FG0VMSEL[FG0VWIDX] cursor, bold;
    else
      if (FG0VM001.FG0VMSEL[FG0VWIDX] == "S")
        FG0VW00.FG0VWSLF = "Y";
      end
    end
    ;
    FG0VW00.FG0VWSLC = FG0VW00.FG0VWIDX - 1;
    ;
    while (FG0VW00.FG0VWSLC >= 1)
      ;
      if (FG0VM001.FG0VMSEL[FG0VWSLC] > " "
       && FG0VM001.FG0VMSEL[FG0VWIDX] > " ")
        converseLib.validationFailed(136);
        FFWREC.XXXMODID = "510";
        set FG0VM001.FG0VMSEL[FG0VWIDX] cursor, bold;
      end
      ;
      FG0VW00.FG0VWSLC = FG0VW00.FG0VWSLC - 1;
      ;
    end
    ;
    FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX - 1;
    ;
  end
  ;
  ;
end // end FG0V510

// Process valid input request
Function FG0V600()
  ;
   /* ------------------------------------------------------------*/
   /* indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/
  ;
  FG0VW00.FG0VWSWF = "Y"; /* set format map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA/ffwrec*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XPCCD = FG0VM001.XPCCD; /* product category code*/
  FFWREC.XPCABRV = FG0VM001.XPCABRV; /* product category abrv desc*/
  ;
  FFWREC.YPGCD = FG0VM001.YPGCD; /* product type grp code*/
  FFWREC.YPGABRV = FG0VM001.YPGABRV; /* product type grp abrv desc*/
  ;
  FFWREC.FFABEGMO = FFZREC.FFZBEGMO;
  FFWREC.FFAENDMO = FFZREC.FFZENDMO;
  ;
  if (FG0VW00.FG0VWSWR == "Y") /* KEY DATA MODIFIED*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if user data changed or historical data selected*/
   /* update/add dfcast.vrcat001 dfcast.vrcmth01*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter
   && FG0VW00.FG0VWSLF == "Y") /* data selected for update/add*/
    ;
    XX0XS01(); /* get current date and time*/
    ;
    set FFCREC empty;
    ;
    FFCREC.FFABEGMO = FFWREC.FFABEGMO;
    FFCREC.FFAENDMO = FFWREC.FFAENDMO;
    ;
    FG0VS02(); /* select dfcast.vrcat001 row*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      ;
      FG0V610(); /* update dfcast.vrcat001 row*/
      ;
      set FFDREC empty;
      ;
      FFFREC.FFFBEGMO = FFWREC.FFABEGMO;
      FFFREC.FFFENDMO = FFWREC.FFAENDMO;
      ;
      FFDREC.FFABEGMO = FFWREC.FFABEGMO;
      FFDREC.FFAENDMO = FFWREC.FFAENDMO;
      ;
      FG0VS03(); /* select 's1' dfcast.vrcmth01*/
      FG0VS04(); /* fetch 'n1' dfcast.vrcmth01*/
      ;
      FG0VW00.FG0VWIDX = 1; /* init index*/
      while (SQLCA.VAGen_SQLCODE == 0)
        ;
        FG0V620(); /* update dfcast.vrcmth01*/
        ;
        FG0VS04(); /* fetch 'n1' dfcast.vrcmth01*/
        ;
        FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1;
        ;
      end
    else
      ;
      FG0V630(); /* add dfcast.vrcat001 row*/
      ;
      set FFDREC empty;
      ;
      FFDREC.FFABEGMO = FFWREC.FFABEGMO;
      FFDREC.FFAENDMO = FFWREC.FFAENDMO;
      FFDREC.XPCCD = FFWREC.XPCCD;
      FFDREC.YPGCD = FFWREC.YPGCD;
      ;
      FG0VW00.FG0VWIDX = 1; /* init index*/
      while (FFDREC.FF4FCTMO < FFDREC.FFAENDMO)
        ;
        FG0V640(); /* add dfcast.vrcmth01 row*/
        ;
        FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1;
        ;
      end
    end
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();
    ;
    FFWREC.XXXMSGNO = 33;
    FFWREC.XXXMODID = "600";
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if pf13 transfer to application fg0x*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf13)
    ;
    COMMAREA.CATOAP = "FG0X";
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* load map work record*/
   /* ------------------------------------------------------------*/
  ;
  FG0VW01.FG0VWSEL[1] = FG0VM001.FG0VMSEL[1];
  FG0VW01.FG0VWSEL[2] = FG0VM001.FG0VMSEL[2];
  FG0VW01.FG0VWSEL[3] = FG0VM001.FG0VMSEL[3];
  FG0VW01.FG0VWSEL[4] = FG0VM001.FG0VMSEL[4];
  ;
  FG0VW00.FG0VWIDX = 1; /* init index*/
  while (FG0VW00.FG0VWIDX <= 12
   && FG0VW01.FG0VWHD4[FG0VWIDX] <= FFWREC.FFAENDMO)
    ;
    FG0VW01.FG0VWIX4[FG0VWIDX] = FG0VM001.FG0VMIX4[FG0VWIDX];
    ;
    FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1;
    ;
  end
  ;
  ;
end // end FG0V600

// upd dfcast.vrcat001 row
Function FG0V610()
   /* ------------------------------------------------------------*/
   /* upd dfcast.vrcat001 table row*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0VM001.FG0VMSEL[1] == "S") /* historical data 1 yr ago*/
    FFCREC.FFCFSIND = "1";
  else
    if (FG0VM001.FG0VMSEL[2] == "S") /* historical data 2 yr ago*/
      FFCREC.FFCFSIND = "2";
    else
      if (FG0VM001.FG0VMSEL[3] == "S") /* historical data 3 yr ago*/
        FFCREC.FFCFSIND = "3";
      else
        if (FG0VM001.FG0VMSEL[4] == "S") /* user created data*/
          FFCREC.FFCFSIND = "U";
        end
      end
    end
  end
  ;
  FFCREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFCREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3760" ("U ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      FG0VW00.FG0VWSWR = "Y"; /* Request for data switch*/
      ;
      FFWREC.XXXMODID = "610"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "610"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DFCAST.VRCAT001 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0V610

// upd dfcast.vrcmth01 row
Function FG0V620()
   /* ------------------------------------------------------------*/
   /* upd dfcast.vrcmth01 table row*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0VM001.FG0VMSEL[1] == "S")
    FFDREC.FFDFSPCT = FG0VW01.FG0VWIX1[FG0VWIDX];
  else
    if (FG0VM001.FG0VMSEL[2] == "S")
      FFDREC.FFDFSPCT = FG0VW01.FG0VWIX2[FG0VWIDX];
    else
      if (FG0VM001.FG0VMSEL[3] == "S")
        FFDREC.FFDFSPCT = FG0VW01.FG0VWIX3[FG0VWIDX];
      else
        if (FG0VM001.FG0VMSEL[4] == "S")
          FFDREC.FFDFSPCT = FG0VM001.FG0VMIX4[FG0VWIDX];
        end
      end
    end
  end
  ;
  FFDREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFDREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3770" ("U ", SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      FG0VW00.FG0VWSWR = "Y"; /* Request for data switch*/
      ;
      FFWREC.XXXMODID = "620"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "620"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DFCAST.VRCMTH01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0V620

// add dfcast.vrcat001 row
Function FG0V630()
   /* ------------------------------------------------------------*/
   /* add dfcast.vrcat001 table row*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0VM001.FG0VMSEL[1] == "S") /* historical data 1 yr ago*/
    FFCREC.FFCFSIND = "1";
  else
    if (FG0VM001.FG0VMSEL[2] == "S") /* historical data 2 yr ago*/
      FFCREC.FFCFSIND = "2";
    else
      if (FG0VM001.FG0VMSEL[3] == "S") /* historical data 3 yr ago*/
        FFCREC.FFCFSIND = "3";
      else
        if (FG0VM001.FG0VMSEL[4] == "S") /* user created data*/
          FFCREC.FFCFSIND = "U";
        end
      end
    end
  end
  ;
  FFCREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFCREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFCREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3760" ("A ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "630"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VRCAT001 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0V630

// add dfcast.vrcmth01 row
Function FG0V640()
   /* ------------------------------------------------------------*/
   /* add dfcast.vrcmth01 table row*/
   /* ------------------------------------------------------------*/
  ;
  FFDREC.FF4FCTMO = FG0VW01.FG0VWHD4[FG0VWIDX];
  ;
  if (FG0VM001.FG0VMSEL[1] == "S") /* historical data 1 yr ago*/
    FFDREC.FFDFSPCT = FG0VW01.FG0VWIX1[FG0VWIDX];
  else
    if (FG0VM001.FG0VMSEL[2] == "S") /* historical data 2 yr ago*/
      FFDREC.FFDFSPCT = FG0VW01.FG0VWIX2[FG0VWIDX];
    else
      if (FG0VM001.FG0VMSEL[3] == "S") /* historical data 3 yr ago*/
        FFDREC.FFDFSPCT = FG0VW01.FG0VWIX3[FG0VWIDX];
      else
        if (FG0VM001.FG0VMSEL[4] == "S") /* user created data*/
          FFDREC.FFDFSPCT = FG0VM001.FG0VMIX4[FG0VWIDX];
        end
      end
    end
  end
  ;
  FFDREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFDREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFDREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3770" ("A ", SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "640"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VRCMTH01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0V640

// get monthly headings xsffs30
Function FG0VS01()
   /* ------------------------------------------------------------*/
   /* get all months within requested date range*/
   /* ------------------------------------------------------------*/
  ;
  FFZREC.FFZMONTH = 1;
  FFZREC.FFZSRANG = "Y";
  ;
  XSFFS30();
  ;
  if (FFZREC.FFZENDRC == "1")
    set FG0VM001.FG0VMERG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "S01";
  else
    if (FFZREC.FFZENDRC == "2")
      set FG0VM001.FG0VMERG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "S01";
    else
      if (FFZREC.FFZENDRC == "3")
        set FG0VM001.FG0VMERG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "S01";
      end
    end
  end
  ;
  if (FFZREC.FFZBEGRC == "1")
    set FG0VM001.FG0VMBRG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "S01";
  else
    if (FFZREC.FFZBEGRC == "2")
      set FG0VM001.FG0VMBRG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "S01";
    else
      if (FFZREC.FFZBEGRC == "3")
        set FG0VM001.FG0VMBRG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "S01";
      end
    end
  end
  ;
  ;
end // end FG0VS01

// select dfcast.vrcat001 row
Function FG0VS02()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vrcat001 table.*/
   /* ------------------------------------------------------------*/
  ;
  FFCREC.YPGCD = FFWREC.YPGCD; /* product type code*/
  FFCREC.XPCCD = FFWREC.XPCCD; /* product cat code*/
  ;
  try
    call "IO3760" ("S ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S02"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VRCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0VS02

// select 's1' dfcast.vrcmth01
Function FG0VS03()
   /* ------------------------------------------------------------*/
   /* Select set on dfcast.vrcmth01 table.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* load fffrec record*/
   /* ------------------------------------------------------------*/
  ;
  FFFFUNCD = "S1";
  ;
   /* ------------------------------------------------------------*/
   /* load ffdrec record*/
   /* ------------------------------------------------------------*/
  ;
  FFDREC.YPGCD = FFWREC.YPGCD;
  FFDREC.XPCCD = FFWREC.XPCCD;
  ;
   /* ------------------------------------------------------------*/
   /* select set dfcast.vrcmth01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3770" (FFFREC, SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S03"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET DFCAST.VRCMTH01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0VS03

// fetch 'n1' dfcast.vrcmth01
Function FG0VS04()
   /* ------------------------------------------------------------*/
   /* fetch dfcast.vrcmth01 row*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "N1";
  ;
  try
    call "IO3770" (FFFREC, SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S04"; /* MODULE IDENTIFICATION*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DFCAST.VRCMTH01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0VS04

// close 'c1' dfcast.vrcmth01
Function FG0VS05()
   /* ------------------------------------------------------------*/
   /* close dfcast.vrcmth01 table.*/
   /* ------------------------------------------------------------*/
  FFFREC.FFFFUNCD = "C1";
  ;
  try
    call "IO3770" (FFFREC, SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
    return;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "S05"; /* MODULE IDENTIFICATION*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C1 DFCAST.VRCMTH01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0VS05

// get actual futr ship qtys
Function FG0VS06()
  ;
   /* ------------------------------------------------------------*/
   /* obtain historical actual future ship quantities.*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFBEGMO = FFZREC.FFZINDMO[FG0VWIDX];
  FFFREC.FFFENDMO = FFZREC.FFZINDMO[FG0VWIDX];
  ;
  set FH6REC empty;
  ;
  FH6REC.XPCCD = FFWREC.XPCCD; /* product category*/
  FH6REC.XDVCD = FFWREC.YSMXDV; /* division code*/
  FH6REC.XPRCD = FFWREC.YPGCD; /* product type code*/
  FH6REC.XLCCD = "10"; /* life cycle code*/
  FH6REC.XCTCD = "USA"; /* country code*/
  FH6REC.XQACD = "01"; /* quality code*/
  FH6REC.YSMXOT = "FT"; /* sum code*/
  FH6REC.XDSCD = "*"; /* direct ship code*/
  TA1PGMNM = "FG0VS06"; /* calling process*/
  ;
   /* --------------------------------------------------*/
   /* select sum on dfhist.vctshp01 table*/
   /* --------------------------------------------------*/
  ;
  XSFFS52();
  ;
  FG0VW00.FG0VWUFS = FH6REC.FH5MSHQT - FH6REC.FH5RTSQT;
  ;
  ;
end // end FG0VS06

// select dfcast.vmcat001 row
Function FG0VS07()
  ;
   /* ------------------------------------------------------------*/
   /* select dfcast.vmcat001 to obtain future ship qtys*/
   /* ------------------------------------------------------------*/
  ;
  set FF7REC empty; /* Clear row storage area*/
  ;
  FF7REC.FF4FCTMO = FFZREC.FFZINDMO[FG0VWIDX]; /* fcst month*/
  FF7REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF7REC.XCTCD = "USA"; /* Foreign country code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* Product categroy code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  ;
   /* ------------------------------------------------------------*/
   /* select dfcast.vmcat001*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or zero total, return to the previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* selection not found*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indisgrpe that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S07"; /* Module identifisgrpion*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indisgrpe not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indisgrpe system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VMCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program applisgrpion*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0VS07

// verify modifiable fields
Function FG0VS08()
   /* -----------------------------------------------------*/
   /* verify header modifiable fields*/
   /* -----------------------------------------------------*/
  ;
  FG0VW00.FG0VWIDX = 1;
  while (FG0VW00.FG0VWIDX <= 12
   && FG0VW01.FG0VWHD4[FG0VWIDX] <= FFWREC.FFAENDMO)
    ;
    if (FG0VM001.FG0VMIX4[FG0VWIDX] != FG0VW01.FG0VWIX4[FG0VWIDX])
      set FG0VM001.FG0VMIX4[FG0VWIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S08";
    end
    ;
    FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1;
    ;
  end
  ;
  FG0VW00.FG0VWIDX = 1;
  while (FG0VW00.FG0VWIDX <= 4)
    ;
    if (FG0VM001.FG0VMSEL[FG0VWIDX] != FG0VW01.FG0VWSEL[FG0VWIDX])
      set FG0VM001.FG0VMSEL[FG0VWIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S08";
    end
    ;
    FG0VW00.FG0VWIDX = FG0VW00.FG0VWIDX + 1;
    ;
  end
  ;
  if (converseVar.eventKey not enter)
    ;
    if (FG0VM001.XPCCD != FFWREC.XPCCD)
      set FG0VM001.XPCCD cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S08";
    end
    ;
    if (FG0VM001.YPGCD != FFWREC.YPGCD)
      set FG0VM001.YPGCD cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S08";
    end
    ;
    FG0VW00.FG0VWWED = FFWREC.FFAENDMO;
    if (FG0VM001.FG0VMERG != FG0VW00.FG0VWEYM)
      set FG0VM001.FG0VMERG cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S08";
    end
    ;
    FG0VW00.FG0VWWBD = FFWREC.FFABEGMO;
    if (FG0VM001.FG0VMBRG != FG0VW00.FG0VWBYM)
      set FG0VM001.FG0VMBRG cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S08";
    end
  end
  ;
  ;
end // end FG0VS08

//*** RECORD=FG0VW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FG0VW00 type basicRecord
  10 FG0VWDCF FG0VWDCF ; 
  10 FG0VWHEM FG0VWHEM ; 
    15 FG0VWDES FG0VWDES ; 
    15 * char(1) ; 
    15 FG0VWEBD FG0VWEBD ; 
    15 * char(1) ; 
    15 FG0VWEED FG0VWEED ; 
  10 FG0VWH1L FG0VWH1L ; 
  10 FG0VWH2L FG0VWH2L ; 
  10 FG0VWH3L FG0VWH3L ; 
  10 FG0VWH1E FG0VWH1E ; 
  10 FG0VWH2E FG0VWH2E ; 
  10 FG0VWH3E FG0VWH3E ; 
  10 FG0VWSWR FG0VWSWR ; 
  10 FG0VWSWF FG0VWSWF ; 
  10 FG0VWNM1 FG0VWNM1 ; 
  10 FG0VWNM2 FG0VWNM2 ; 
  10 FG0VWSLC FG0VWSLC ; 
  10 FG0VWSLF FG0VWSLF ; 
  10 FG0VWUFS FG0VWUFS ; 
  10 FG0VWHFS FG0VWHFS ; 
  10 FG0VWIDX FG0VWIDX ; 
  10 FG0VWTIX FG0VWTIX ; 
  10 FG0VWSIX FG0VWSIX ; 
  10 FG0VWCWD FG0VWCWD ; 
    15 FG0VWCYM FG0VWCYM ; 
      20 FG0VWCCC FG0VWCCC ; 
      20 FG0VWCYY FG0VWCYY ; 
      20 FG0VWCMM FG0VWCMM ; 
    15 FG0VWCDD FG0VWCDD ; 
  10 FG0VWICD FG0VWICD ; 
    15 FG0VWIYM FG0VWIYM ; 
      20 FG0VWICC FG0VWICC ; 
      20 FG0VWIYY FG0VWIYY ; 
      20 FG0VWIMM FG0VWIMM ; 
    15 FG0VWIDD FG0VWIDD ; 
  10 FG0VWWDT FG0VWWDT ; 
    15 * num(3) ; 
    15 FG0VWWCC FG0VWWCC ; 
    15 FG0VWWYM FG0VWWYM ; 
      20 FG0VWWYY FG0VWWYY ; 
      20 FG0VWWMM FG0VWWMM ; 
  10 FG0VWWBD FG0VWWBD ; 
    15 * num(3) ; 
    15 FG0VWBCC FG0VWBCC ; 
    15 FG0VWBYM FG0VWBYM ; 
      20 FG0VWBYY FG0VWBYY ; 
      20 FG0VWBMM FG0VWBMM ; 
  10 FG0VWWED FG0VWWED ; 
    15 * num(3) ; 
    15 FG0VWECC FG0VWECC ; 
    15 FG0VWEYM FG0VWEYM ; 
      20 FG0VWEYY FG0VWEYY ; 
      20 FG0VWEMM FG0VWEMM ; 
  10 FG0VWCRD FG0VWCRD ; 
  10 FG0VWCD1 FG0VWCD1 ; 
  10 FG0VWCD5 FG0VWCD5 ; 
  10 FG0VWUTQ FG0VWUTQ ; 
end // end FG0VW00

//*** RECORD=FG0VW01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// ***********************
Record FG0VW01 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 FG0VWSEL FG0VWSEL [4] ; 
  10 FG0VWUVQ FG0VWUVQ ; 
  10 FG0VWHBD FG0VWHBD [4] ; 
    15 * char(5) ; 
    15 FG0VWHBY FG0VWHBY ; 
  10 FG0VWHED FG0VWHED [4] ; 
    15 * char(5) ; 
    15 FG0VWHEY FG0VWHEY ; 
  10 FG0VWPBD FG0VWPBD [3] ; 
    15 * char(5) ; 
    15 FG0VWPBY FG0VWPBY ; 
  10 FG0VWPED FG0VWPED [3] ; 
    15 * char(5) ; 
    15 FG0VWPEY FG0VWPEY ; 
  10 FG0VWHD1 FG0VWHD1 [12] ; 
    15 * num(5) ; 
    15 FG0VWDH1 FG0VWDH1 ; 
  10 FG0VWIX1 FG0VWIX1 [12] ; 
  10 FG0VWUQ1 FG0VWUQ1 [13] ; 
  10 FG0VWQT1 FG0VWQT1 [13] ; 
  10 FG0VWHD2 FG0VWHD2 [12] ; 
    15 * num(5) ; 
    15 FG0VWDH2 FG0VWDH2 ; 
  10 FG0VWIX2 FG0VWIX2 [12] ; 
  10 FG0VWUQ2 FG0VWUQ2 [13] ; 
  10 FG0VWQT2 FG0VWQT2 [13] ; 
  10 FG0VWHD3 FG0VWHD3 [12] ; 
    15 * num(5) ; 
    15 FG0VWDH3 FG0VWDH3 ; 
  10 FG0VWIX3 FG0VWIX3 [12] ; 
  10 FG0VWUQ3 FG0VWUQ3 [13] ; 
  10 FG0VWQT3 FG0VWQT3 [13] ; 
  10 FG0VWHD4 FG0VWHD4 [12] ; 
    15 * num(5) ; 
    15 FG0VWDH4 FG0VWDH4 ; 
  10 FG0VWIX4 FG0VWIX4 [12] ; 
end // end FG0VW01

// begin century
DataItem FG0VWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range month
DataItem FG0VWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year and month
DataItem FG0VWBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range year
DataItem FG0VWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work century
DataItem FG0VWCCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date -1 month
DataItem FG0VWCD1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date +5 month
DataItem FG0VWCD5 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current work day
DataItem FG0VWCDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work month
DataItem FG0VWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date
DataItem FG0VWCRD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current work ccyymmdd
DataItem FG0VWCWD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current work ccyymm
DataItem FG0VWCYM num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work year
DataItem FG0VWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data change flag
DataItem FG0VWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history error desc
DataItem FG0VWDES char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG0VWDH1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0VWDH2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0VWDH3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0VWDH4 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin error date
DataItem FG0VWEBD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// end century
DataItem FG0VWECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end error date
DataItem FG0VWEED num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// end range month
DataItem FG0VWEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end year and month
DataItem FG0VWEYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range year
DataItem FG0VWEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history 1 yr error flag
DataItem FG0VWH1E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history 1 yr load flag
DataItem FG0VWH1L char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history 2 yr error flag
DataItem FG0VWH2E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history 2 yr load flag
DataItem FG0VWH2L char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history 3 yr error flag
DataItem FG0VWH3E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history 3 yr load flag
DataItem FG0VWH3L char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// heading begin date ranges
DataItem FG0VWHBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

DataItem FG0VWHBY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical mthly hds 1 yrs
DataItem FG0VWHD1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical mthly hds 2 yrs
DataItem FG0VWHD2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical mthly hds 3 yrs
DataItem FG0VWHD3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// user created monthly headings
DataItem FG0VWHD4 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// heading end date ranges
DataItem FG0VWHED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// history error msg
DataItem FG0VWHEM char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG0VWHEY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales thousands
DataItem FG0VWHFS char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// invoice work century
DataItem FG0VWICC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice compare date
DataItem FG0VWICD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// invoice work day
DataItem FG0VWIDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem FG0VWIDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice work month
DataItem FG0VWIMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical index 1 yrs
DataItem FG0VWIX1 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical index 2 yrs
DataItem FG0VWIX2 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical index 3 yrs
DataItem FG0VWIX3 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// user created percents
DataItem FG0VWIX4 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice ccyymm
DataItem FG0VWIYM num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice work year
DataItem FG0VWIYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 1
DataItem FG0VWNM1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 2
DataItem FG0VWNM2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical begin date ranges
DataItem FG0VWPBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

DataItem FG0VWPBY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical end date ranges
DataItem FG0VWPED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

DataItem FG0VWPEY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical qtys 1 yrs
DataItem FG0VWQT1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// historical qtys 2 yrs
DataItem FG0VWQT2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// historical qtys 3 yrs
DataItem FG0VWQT3 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection field
DataItem FG0VWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save index
DataItem FG0VWSIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection count
DataItem FG0VWSLC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection flag
DataItem FG0VWSLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FG0VWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FG0VWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total index
DataItem FG0VWTIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history futr ship units
DataItem FG0VWUFS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical qtys 1 yrs units
DataItem FG0VWUQ1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical qtys 2 yrs units
DataItem FG0VWUQ2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical qtys 3 yrs units
DataItem FG0VWUQ3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total histoical qty w/s
DataItem FG0VWUTQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// variance qty
DataItem FG0VWUVQ num(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work begin date
DataItem FG0VWWBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work century
DataItem FG0VWWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date
DataItem FG0VWWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work begin date
DataItem FG0VWWED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work month
DataItem FG0VWWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year and month
DataItem FG0VWWYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FG0VWWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

