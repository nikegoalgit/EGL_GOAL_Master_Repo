package fg0x;

import corpcom2.XPCREC;
import corpcom2.XPLREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFF001;
import corpcom3.XPXPL01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS01;
import corpcom4.XSFFS35;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx2.XPCCD;
import corpx2.XPCSDESC;
import corpy2.YPGTBL;
import ff.common.*;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
//*** PROGRAM=FG0X ****
// This program displays a list of different types of index
// flags along with category codes. The user has to specify
// the range, line code and type group code first, then a list
// of category codes which match these criteria will be
// displayed. The user is able to see where the indicators and
// indicies have been setup by viewing the flag 'Y' under each
// column and he can also make a selection to get into that
// specific index maintaining screen.
// 
// If the user has no idea which line or type group he wants to
// deal with, he can enter a '?' to ask for help. The program
// will bring up a pop up window to show a list of lines or
// type groups, then he can take a pick from that window
// screen.
// 
// The user may scroll forward and backward to view all
// category codes by pressing PF7 and PF8. He may also exit
// to any allowed application via fast path or PF key.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          08/14/89  jjuch   New application.
// FF1016   07/31/90  JJUCH   Disallowed to fcst current main
//                            buy month and all prior months.
// FF175    12/10/96  DSMITH  Changed the date range fill
//                            character to '0'.
// *********************
Program FG0X type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FFCREC FFCREC; // record
  FFWREC FFWREC; // record
  FFZREC FFZREC; // record
  FG0XW00 FG0XW00; // record
  FG0XW01 FG0XW01; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPLTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use YPGTBL {deleteAfterUse = yes}; // table
  use FG0XM.FG0XM001, // form
  		FG0XM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FG0XM001 initial; /* M001 input/output*/
    set FG0XW00 empty; /* Working storage*/
    set FG0XW01 empty; /* M001 display storage*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set TA2REC empty; /* date parameters*/

    FG0XW00.FG0XWSWF = "Y"; /* Format the map switch*/

    XPLREC.XGPCD = COMMAREA.XGPCD; /* GPC code for line*/
    XPCREC.XGPCD = COMMAREA.XGPCD; /* GPC code for category*/

     /* ---------------------------------------------------*/
     /* Clear unused fields*/
     /* ---------------------------------------------------*/

    FFWREC.XPCCD = " "; /* Clear product category code*/
    FFWREC.XPCABRV = " "; /* Clear product category abrv*/
    FFWREC.SYBSTGNB = " "; /* Clear style group number*/
    FFWREC.SYBSTGNM = " "; /* Clear style group name*/
    FFWREC.SY1STNBR = " "; /* Clear style number*/
    FFWREC.SY2CLRID = " "; /* Clear color id*/
    FFWREC.XDMCD = " "; /* Clear dimension code*/
    FFWREC.SY1SSTNM = " "; /* Clear short style name*/
    FFWREC.SY2CLRAB = " "; /* Clear color abrv*/
    FFWREC.XDMABRV = " "; /* Clear dimension abrv*/
    FFWREC.ZRGCD = " "; /* Clear region code*/
    FFWREC.ZRGABRV = " "; /* Clear region abrv*/
    FFWREC.XCTCD = " "; /* Clear country code*/
    FFWREC.XCTABRV = " "; /* Clear country abrv*/

    if (FFWREC.YPGCD == "  ") /* No type group code*/
      FFWREC.YPGCD = "01"; /* Default value*/
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end /* Abbreviation*/
    end

    FG0XW01.FFZBEGMO = FFWREC.FFABEGMO; /* Beginning month*/
    FG0XW01.FFZENDMO = FFWREC.FFAENDMO; /* Ending month*/

    if (FFWREC.FFABEGMO > 0 /* Beginning month*/
     && FFWREC.FFAENDMO > 0 /* Ending month*/
     && FFWREC.XPLCD > "  " /* Product line code*/
     && FFWREC.YPGCD > "  ") /* Type group code*/

      FG0XW00.FG0XWSWR = "Y"; /* Request for data switch*/

    else

      FG0XW00.FG0XWSWR = "N"; /* Request for data switch*/

    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FG0X001; /* Converse the main process*/


    FG0X001: FG0X001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FG0X001; /* Converse the main process*/


  end // end main
end // end FG0X

// Main process to display a map
Function FG0X001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FG0X100(); /* Obtain the data to display*/

  FG0X200(); /* Format and display the map*/

  FG0X300(); /* Check attention identifier*/

  FG0X400(); /* Reset fields to normal intensity*/

  FG0X500(); /* Verify the entered data*/

  FG0X600(); /* Process valid input request*/


end // end FG0X001

// Obtain the data to display
Function FG0X100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FG0XW00.FG0XWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

  FG0X110(); /* Build up the temporary storage*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FG0XW00.TA5TSQIX == 0) /* No pages formatted*/

    FFWREC.XXXMODID = "100"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/

    return; /* Exit to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO == 0) /* No message to display*/
    FG0XW00.XXXTSPAG = 1; /* Desired page number*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FG0XW00.FG0XWSWR = "N"; /* Request for data switch*/


end // end FG0X100

// Build up the temporary storage
Function FG0X110()
   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  FG0XW00.XXXTSLEN = 460; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  FG0X111(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* save the search information in map display storage area.*/
   /* ------------------------------------------------------------*/

  FG0XW01.FFZBEGMO = FFWREC.FFABEGMO; /* Beginning month*/
  FG0XW01.FFZENDMO = FFWREC.FFAENDMO; /* Ending month*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  FG0X112(); /* Select set and open cursor for VFFRXF01*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  FG0XW00.FG0XWIXM = 1; /* initialize line index*/

  while (FG0XW00.FG0XWSWC == "N") /* Until end of cursor*/

    FG0X113(); /* Fetch selected rows*/

    if (SQLCA.VAGen_SQLCODE != 100)

      FG0X114(); /* Fetch indicators and flags from VRCAT01*/

    end

    FG0XW00.FG0XWIXM = FG0XW00.FG0XWIXM + 1; /* increment line index*/

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (FG0XW00.FG0XWIXM > 16) /* Page is full*/
      FG0X115(); /* Add page to temporary storage*/
    end

  end

  FG0XW00.FG0XWIXM = FG0XW00.FG0XWIXM - 1; /* decrement line index*/

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (FG0XW00.FG0XWIXM >= 1) /* Page was formatted*/
    FG0X115(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  FG0X116(); /* Close the selected set cursor*/

end // end FG0X110

// Purge any temporary storage
Function FG0X111()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (TA5REC.TA5FNCCD == "P") /* Last function was purge*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FG0XW01 empty; /* M001 display storage*/

  FG0XW00.FG0XWSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FG0XW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FG0XW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "111"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0X111

// Select set and open cursor
Function FG0X112()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  FG0XW00.FG0XWIXM = 1; /* Display line index*/
  FG0XW00.FG0XWSWC = "N"; /* End of cursor switch*/

  set FF2REC empty; /* clear row storage area*/

  FF2REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF2REC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF2REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0X112

// Fetch next row in the cursor
Function FG0X113()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FG0XS02(); /* Save in display storage*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      FG0XW00.FG0XWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "113"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0X113

// Fetch indicators & flags
Function FG0X114()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicate the key fields.*/
   /* ------------------------------------------------------------*/

  set FFCREC empty; /* Clear row storage area*/

  FFCREC.FFABEGMO = FG0XW01.FFZBEGMO; /* Beginning month*/
  FFCREC.FFAENDMO = FG0XW01.FFZENDMO; /* Ending month*/
  FFCREC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FFCREC.XPCCD = FG0XW01.XPCCD[FG0XWIXM]; /* Category code*/

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3760" ("S ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* IF SUCCESSFUL, RETURN TO THE PREVIOUS PROCESS.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      FG0X120(); /* save indicator and flags*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "114"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0X114

// Add page to temporary storage
Function FG0X115()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FG0XW01.XXXTSLEN = FG0XW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  if (FG0XW00.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P") /* and last function purge*/

    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/

  end

  try
    call "TA0050" (FG0XW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FG0XW01 empty; /* M001 display storage*/

    /* ---------------------------------------------------------*/
     /* Save the search information in map display storage queue*/
    /* ---------------------------------------------------------*/
    FG0XW01.FFZBEGMO = FFWREC.FFABEGMO; /* Beginning month*/
    FG0XW01.FFZENDMO = FFWREC.FFAENDMO; /* Ending month*/

    FG0XW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    FG0XW00.FG0XWIXM = 1; /* Display line number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "115"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0X115

// Close selected set cursor
Function FG0X116()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "116"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0X116

// Turn on flags
Function FG0X120()
  if (FFCREC.FFCDMIND != " ") /* Demand indicator exist*/

    FG0XW01.FG0XMDMF[FG0XWIXM] = "Y"; /* Turn on the demand flag*/

  end

  if (FFCREC.FFCFSIND != " ") /* Future ship indicator exist*/

    FG0XW01.FG0XMFSF[FG0XWIXM] = "Y"; /* Turn on the future ship flag*/

  end

  if (FFCREC.FFCPSIND != " ") /* Prop ship indicator exist*/

    FG0XW01.FG0XMPSF[FG0XWIXM] = "Y"; /* Turn on the prop ship flag*/

  end

  if (FFCREC.FFCFDIND != " ") /* Future demand indicator exist*/

    FG0XW01.FG0XMFDF[FG0XWIXM] = "Y";
                                   /* Turn on the future demand flag*/

  end

  if (FFCREC.FFCPDIND != " ") /* Prop demand indicator exist*/

    FG0XW01.FG0XMPDF[FG0XWIXM] = "Y"; /* Turn on the prop demand flag*/

  end

  if (FFCREC.FFCFRTFL != " ") /* Fill rate exist*/

    FG0XW01.FG0XMFRF[FG0XWIXM] = "Y"; /* Turn on the fill rate flag*/

  end

  if (FFCREC.FFCFUTFL != " ") /* Fill rate exist*/

    FG0XW01.FG0XMFOF[FG0XWIXM] = "Y";
                                   /* Turn on the future ratio flag*/

  end

end // end FG0X120

// Format and converse the map
Function FG0X200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FG0XW00.FG0XWSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FG0XW00.FG0XWSWF == "Y") /* Map must be formatted*/
      FG0X210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH and map*/
   /* information.*/
   /* ------------------------------------------------------------*/

  FG0XM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FG0XM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG0XM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FG0XM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FG0XM001 alarm; /* Indicate sound alarm*/

  end

  converse FG0XM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = "   "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = FG0XM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG0XM001.CAITEM; /* Application data*/

end // end FG0X200

// Format the display data
Function FG0X210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FG0XM001 initial; /* M001 input/output area*/

  FG0XW00.FG0XWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (FG0XW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (FG0XW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (FG0XW00.XXXTSPAG > FG0XW00.TA5TSQIX) /* Desired greater highest*/
        FG0XW00.XXXTSPAG = FG0XW00.TA5TSQIX; /* Default to highest*/
      end

      FG0XS04(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set FG0XM001.XXXLITPG skip; /* "PAGE" literal*/
    set FG0XM001.XXXLITOF skip; /* "OF" literal*/
    FG0XM001.XXXTSPAG = FG0XW00.XXXTSPAG; /* Current page*/
    FG0XM001.TA5TSQIX = FG0XW00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  FG0XM001.FFZBYYMM = FG0XW01.FFZBYYMM; /* beginning month*/
  FG0XM001.FFZEYYMM = FG0XW01.FFZEYYMM; /* ending month*/
  FG0XM001.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FG0XM001.XPLABRV = FFWREC.XPLABRV; /* Line abbreviation*/
  FG0XM001.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FG0XM001.YPGABRV = FFWREC.YPGABRV; /* Type group abrreviation*/

  FG0XW00.FG0XWIXM = 1; /* Initialize line index*/

  while (FG0XW00.FG0XWIXM <= 16 /* Until screen is full*/
   && FG0XW01.XPCCD[FG0XWIXM] > " ") /* or end of data*/

    FG0XM001.FG0XMDMF[FG0XWIXM] = FG0XW01.FG0XMDMF[FG0XWIXM];
    FG0XM001.FG0XMFSF[FG0XWIXM] = FG0XW01.FG0XMFSF[FG0XWIXM];
    FG0XM001.FG0XMPSF[FG0XWIXM] = FG0XW01.FG0XMPSF[FG0XWIXM];
    FG0XM001.FG0XMFDF[FG0XWIXM] = FG0XW01.FG0XMFDF[FG0XWIXM];
    FG0XM001.FG0XMPDF[FG0XWIXM] = FG0XW01.FG0XMPDF[FG0XWIXM];
    FG0XM001.FG0XMFRF[FG0XWIXM] = FG0XW01.FG0XMFRF[FG0XWIXM];
    FG0XM001.FG0XMFOF[FG0XWIXM] = FG0XW01.FG0XMFOF[FG0XWIXM];

    FG0XM001.XPCCD[FG0XWIXM] = FG0XW01.XPCCD[FG0XWIXM];
    FG0XM001.XPCSDESC[FG0XWIXM] = FG0XW01.XPCSDESC[FG0XWIXM];


    if (FG0XW00.FG0XWIXM == 1) /* First select field*/

      set FG0XM001.FG0XMDMS[FG0XWIXM] cursor, normal; /* Position cursor*/
    else
      set FG0XM001.FG0XMDMS[FG0XWIXM] normal; /* Unprotect*/

    end

    set FG0XM001.FG0XMFSS[FG0XWIXM] normal; /* Unprotect*/
    set FG0XM001.FG0XMPSS[FG0XWIXM] normal; /* Unprotect*/
    set FG0XM001.FG0XMFDS[FG0XWIXM] normal; /* Unprotect*/
    set FG0XM001.FG0XMPDS[FG0XWIXM] normal; /* Unprotect*/
    set FG0XM001.FG0XMFRS[FG0XWIXM] normal; /* Unprotect*/
    set FG0XM001.FG0XMFOS[FG0XWIXM] normal; /* Unprotect*/

    FG0XW00.FG0XWIXM = FG0XW00.FG0XWIXM + 1; /* Increment line index*/

  end


end // end FG0X210

// Check attention identifier
Function FG0X300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (FG0XW00.FG0XWSWR == "Y") /* Request for data*/
      set FG0XW01 empty; /* M001 display storage*/
    end

    FG0XW00.FG0XWSWF = "Y"; /* Format the map switch*/
    FG0XW00.FG0XWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FG0XM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      FG0X111(); /* Purge temporary storage*/

      XSFFS01(); /* Exit to another application*/

      set FG0XM001.CATOAP cursor, bold; /* Highlight*/

      FG0XW00.FG0XWSWF = "Y"; /* Format the map switch*/
      FG0XW00.FG0XWSWR = "N"; /* Request for data switch*/

    else

      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG0XM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FG0A"; /* TO application*/
    end

    FG0X111(); /* Purge temporary storage*/

    XSFFS01(); /* Exit to another application*/

    FG0XW00.FG0XWSWF = "Y"; /* Format the map switch*/
    FG0XW00.FG0XWSWR = "N"; /* Request for data switch*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end


end // end FG0X300

// Reset highlighted fields
Function FG0X400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/


  set FG0XM001.FFZBYYMM normal; /* Reset beginning month*/
  set FG0XM001.FFZEYYMM normal; /* Reset ending month*/
  set FG0XM001.XPLCD normal; /* Reset product line code*/
  set FG0XM001.YPGCD normal; /* Reset type group code*/

  FG0XW00.FG0XWIXM = 1; /* Initialize line index*/

  while (FG0XW00.FG0XWIXM <= 16 /* Until end of lines*/
   && FG0XM001.XPCCD[FG0XWIXM] > " ") /* or end of display*/

    set FG0XM001.FG0XMDMS[FG0XWIXM] normal; /* Reset select flag*/
    set FG0XM001.FG0XMFSS[FG0XWIXM] normal; /* Reset select flag*/
    set FG0XM001.FG0XMPSS[FG0XWIXM] normal; /* Reset select flag*/
    set FG0XM001.FG0XMFDS[FG0XWIXM] normal; /* Reset select flag*/
    set FG0XM001.FG0XMPDS[FG0XWIXM] normal; /* Reset select flag*/
    set FG0XM001.FG0XMFRS[FG0XWIXM] normal; /* Reset select flag*/
    set FG0XM001.FG0XMFOS[FG0XWIXM] normal; /* Reset select flag*/

    FG0XW00.FG0XWIXM = FG0XW00.FG0XWIXM + 1; /* Increment line index*/

  end

  set FG0XM001.CATOAP initialAttributes; /* TO application*/
  set FG0XM001.CAITEM initialAttributes; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FG0XM001.XPLCD == "?" /* Line list requested*/
   || FG0XM001.YPGCD == "?") /* Type group list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of Line codes.*/
   /* ------------------------------------------------------------*/

  if (FG0XM001.XPLCD == "?") /* Line list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  LINE"; /* Heading*/
    XX0XW02.XGPCD = XPLREC.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FG0XM001.XPLCD = FFWREC.XPLCD; /* Restore prior code*/
      FG0XM001.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/
    else
      FG0XM001.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FG0XM001.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FG0XM001.XPLCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of ypg codes.*/
   /* ------------------------------------------------------------*/

  if (FG0XM001.YPGCD == "?") /* product list requested*/

    XPXX001(); /* init for pop up window*/

    XX0XW02.XX0XWHDR = "    TYPE GRP";
    XX0XW02.YPGFFFL = "Y";

    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end

    if (XX0XW02.XX0XWPIX > 0)
      FG0XM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FG0XM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FG0XM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FG0XM001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/

end // end FG0X400

// Verify the entered data
Function FG0X500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FG0XM001.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FG0XM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    FG0X510(); /* Verify scroll request*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, if page was formatted, verify data on the top*/
     /* and data in the line.*/
    /* ------------------------------------------------------------*/

    if (FG0XW00.TA5TSQIX > 0) /* Page was formatted*/

      FG0XW00.FG0XWIXM = 16; /* Initialize line index*/

      while (FG0XW00.FG0XWIXM >= 1) /* Until end of page*/

        FG0X520(); /* Verify data in the line*/

        FG0XW00.FG0XWIXM = FG0XW00.FG0XWIXM - 1; /* Decrement line number*/

      end

    end

    FG0X530(); /* verify data on the top*/

  end


   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FG0X500

// Verify scroll request
Function FG0X510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FG0XW00.XXXTSPAG < 2)       /* and no previous pages*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FG0XW00.XXXTSPAG >= FG0XW00.TA5TSQIX) /* and no more pages*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  FG0XW00.FG0XWIXM = 16; /* Initialize line index*/

  while (FG0XW00.FG0XWIXM > 0) /* Until end of lines*/

    if (FG0XM001.FG0XMDMS[FG0XWIXM] != FG0XW01.FG0XMDMS[FG0XWIXM])

      FFWREC.XXXMODID = "510"; /* Module identification*/
      set FG0XM001.FG0XMDMS[FG0XWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(5); /* Modifications not allowed*/

    end

    if (FG0XM001.FG0XMFSS[FG0XWIXM] != FG0XW01.FG0XMFSS[FG0XWIXM])

      FFWREC.XXXMODID = "510"; /* Module identification*/
      set FG0XM001.FG0XMFSS[FG0XWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(5); /* Modifications not allowed*/

    end

    if (FG0XM001.FG0XMPSS[FG0XWIXM] != FG0XW01.FG0XMPSS[FG0XWIXM])

      FFWREC.XXXMODID = "510"; /* Module identification*/
      set FG0XM001.FG0XMPSS[FG0XWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(5); /* Modifications not allowed*/

    end

    if (FG0XM001.FG0XMFDS[FG0XWIXM] != FG0XW01.FG0XMFDS[FG0XWIXM])

      FFWREC.XXXMODID = "510"; /* Module identification*/
      set FG0XM001.FG0XMFDS[FG0XWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(5); /* Modifications not allowed*/

    end

    if (FG0XM001.FG0XMPDS[FG0XWIXM] != FG0XW01.FG0XMPDS[FG0XWIXM])

      FFWREC.XXXMODID = "510"; /* Module identification*/
      set FG0XM001.FG0XMPDS[FG0XWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(5); /* Modifications not allowed*/

    end

    if (FG0XM001.FG0XMFRS[FG0XWIXM] != FG0XW01.FG0XMFRS[FG0XWIXM])

      FFWREC.XXXMODID = "510"; /* Module identification*/
      set FG0XM001.FG0XMFRS[FG0XWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(5); /* Modifications not allowed*/

    end

    if (FG0XM001.FG0XMFOS[FG0XWIXM] != FG0XW01.FG0XMFOS[FG0XWIXM])

      FFWREC.XXXMODID = "510"; /* Module identification*/
      set FG0XM001.FG0XMFOS[FG0XWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(5); /* Modifications not allowed*/

    end

    FG0XW00.FG0XWIXM = FG0XW00.FG0XWIXM - 1; /* Decrement line number*/

  end

  if (FG0XM001.YPGCD != FFWREC.YPGCD) /* Type group changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG0XM001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/

  end

  if (FG0XM001.XPLCD != FFWREC.XPLCD) /* Product line changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG0XM001.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/

  end

  if (FG0XM001.FFZEYYMM != FG0XW01.FFZEYYMM) /* Ending month changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG0XM001.FFZEYYMM cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/

  end

  if (FG0XM001.FFZBYYMM != FG0XW01.FFZBYYMM) /* beginning month changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG0XM001.FFZBYYMM cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/

  end

end // end FG0X510

// verify the data in the lines
Function FG0X520()

   /* ---------------------------------------------------------*/
    /* Future ratio flag*/
   /* ---------------------------------------------------------*/

  FG0XW00.FG0XWSEL = FG0XM001.FG0XMFOS[FG0XWIXM];
                                   /* Save select field*/
  FG0XW00.FG0XWDES = "FOS"; /* Save the flag desc.*/

  FG0X521(); /* Check the entered data in select*/
                                   /* field*/

   /* ---------------------------------------------------------*/
    /* Fill rate flag*/
   /* ---------------------------------------------------------*/

  FG0XW00.FG0XWSEL = FG0XM001.FG0XMFRS[FG0XWIXM];
                                   /* Save select field*/
  FG0XW00.FG0XWDES = "FRS"; /* Save the flag desc.*/

  FG0X521(); /* Check the entered data in select*/
                                   /* field*/

   /* ---------------------------------------------------------*/
    /* Prop demand indicator*/
   /* ---------------------------------------------------------*/

  FG0XW00.FG0XWSEL = FG0XM001.FG0XMPDS[FG0XWIXM];
                                   /* Save select field*/
  FG0XW00.FG0XWDES = "PDS"; /* Save the flag desc.*/

  FG0X521(); /* Check the entered data in select*/
                                   /* field*/

   /* ---------------------------------------------------------*/
    /* Future demand indicator*/
   /* ---------------------------------------------------------*/

  FG0XW00.FG0XWSEL = FG0XM001.FG0XMFDS[FG0XWIXM];
                                   /* Save select field*/
  FG0XW00.FG0XWDES = "FDS"; /* Save the flag desc.*/

  FG0X521(); /* Check the entered data in select*/
                                   /* field*/

   /* ---------------------------------------------------------*/
    /* Prop ship indicator*/
   /* ---------------------------------------------------------*/

  FG0XW00.FG0XWSEL = FG0XM001.FG0XMPSS[FG0XWIXM];
                                   /* Save select field*/
  FG0XW00.FG0XWDES = "PSS"; /* Save the flag desc.*/

  FG0X521(); /* Check the entered data in select*/
                                   /* field*/

   /* ---------------------------------------------------------*/
    /* Future ship indicator*/
   /* ---------------------------------------------------------*/

  FG0XW00.FG0XWSEL = FG0XM001.FG0XMFSS[FG0XWIXM];
                                   /* Save select field*/
  FG0XW00.FG0XWDES = "FSS"; /* Save the flag desc.*/

  FG0X521(); /* Check the entered data in select*/
                                   /* field*/

   /* ---------------------------------------------------------*/
    /* Demand indicator*/
   /* ---------------------------------------------------------*/

  FG0XW00.FG0XWSEL = FG0XM001.FG0XMDMS[FG0XWIXM];
                                   /* Save select field*/
  FG0XW00.FG0XWDES = "DMS"; /* Save the flag desc.*/

  FG0X521(); /* Check the entered data in select*/
                                   /* field*/

end // end FG0X520

// Check the data in select field
Function FG0X521()
   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "S", indicate that*/
   /* only "S" may be used to select a line.*/
   /* ------------------------------------------------------------*/

  if (FG0XW00.FG0XWSEL != " " /* select field is not a ' '*/
   && FG0XW00.FG0XWSEL != "S") /* and is not a "S"*/

    FFWREC.XXXMODID = "521"; /* Module identification*/
    converseLib.validationFailed(41); /* Indicate only "S" may be used*/

    if (FG0XW00.FG0XWDES == "FOS")
      set FG0XM001.FG0XMFOS[FG0XWIXM] cursor, bold; /* Highlight*/
    end

    if (FG0XW00.FG0XWDES == "FRS")
      set FG0XM001.FG0XMFRS[FG0XWIXM] cursor, bold; /* Highlight*/
    end

    if (FG0XW00.FG0XWDES == "PDS")
      set FG0XM001.FG0XMPDS[FG0XWIXM] cursor, bold; /* Highlight*/
    end

    if (FG0XW00.FG0XWDES == "FDS")
      set FG0XM001.FG0XMFDS[FG0XWIXM] cursor, bold; /* Highlight*/
    end

    if (FG0XW00.FG0XWDES == "PSS")
      set FG0XM001.FG0XMPSS[FG0XWIXM] cursor, bold; /* Highlight*/
    end

    if (FG0XW00.FG0XWDES == "FSS")
      set FG0XM001.FG0XMFSS[FG0XWIXM] cursor, bold; /* Highlight*/
    end

    if (FG0XW00.FG0XWDES == "DMS")
      set FG0XM001.FG0XMDMS[FG0XWIXM] cursor, bold; /* Highlight*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Check multiple selections*/
   /* ------------------------------------------------------------*/

  FG0XS06(); /* Check multiple selections for one category*/

  FG0XS07(); /* Check multi-selection for prior categories*/

   /* ------------------------------------------------------------*/
   /* if any field was selected, it is not allowed to change any*/
   /* key field*/
   /* ------------------------------------------------------------*/

  if (FG0XW00.FG0XWSEL == "S") /* One indicator was selected*/

    if (FG0XM001.YPGCD != FFWREC.YPGCD) /* Type group code changed*/

      FFWREC.XXXMODID = "521"; /* Module identification*/
      converseLib.validationFailed(130); /* Indicate no change allowed*/
      set FG0XM001.YPGCD cursor, bold; /* Highlight*/

    end

    if (FG0XM001.XPLCD != FFWREC.XPLCD) /* Product line changed*/

      FFWREC.XXXMODID = "521"; /* Module identification*/
      converseLib.validationFailed(130); /* Indicate no change allowed*/
      set FG0XM001.XPLCD cursor, bold; /* Highlight*/

    end

    if (FG0XM001.FFZEYYMM != FG0XW01.FFZEYYMM) /* Ending month changed*/

      FFWREC.XXXMODID = "521"; /* Module identification*/
      converseLib.validationFailed(130); /* Indicate no change allowed*/
      set FG0XM001.FFZEYYMM cursor, bold; /* Highlight*/

    end

    if (FG0XM001.FFZBYYMM != FG0XW01.FFZBYYMM) /* Beginning month changed*/

      FFWREC.XXXMODID = "521"; /* Module identification*/
      converseLib.validationFailed(130); /* Indicate no change allowed*/
      set FG0XM001.FFZBYYMM cursor, bold; /* Highlight*/

    end

  end
end // end FG0X521

// Verify data on th top
Function FG0X530()

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (FG0XM001.YPGCD == "  ") /* No type group*/
    FG0XM001.YPGABRV = "      ";
  else
    FG0XM001.YPGABRV = "******";
  end

  if (FG0XM001.YPGCD in YPGTBL.YPGCD /* Code in table*/
   && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    FG0XM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    FFWREC.XXXMODID = "530"; /* Module identification*/

    set FG0XM001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/

  end


   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  XPLREC.XPLCD = FG0XM001.XPLCD;

  if (FG0XM001.XPLCD == "  ") /* No product line*/
    FG0XM001.XPLABRV = "      ";
  else
    FG0XM001.XPLABRV = "******";
  end

  if (XPLREC.XPLKEY in XPLTBL.XPLKEY /* Code in table*/
   && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    FG0XM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    FFWREC.XXXMODID = "530"; /* Module identification*/

    set FG0XM001.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/

  end

  if (converseVar.validationMsgNum == 0) /* No error occured*/
    FG0XS01(); /* Verify the line and type group in VFFXRF01*/
  end

   /* ------------------------------------------------------------*/
   /* The beginning month must be greater than the current month*/
   /* and less than or equal to the current plus 30 month*/
   /* The ending month must be greater than or equal to the*/
   /* beginning month, not greater than the beginning plus 11*/
   /* month and not greater than the current plus 30 months.*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* Clear storage row*/

  FFZREC.FFZBYYMM = FG0XM001.FFZBYYMM; /* Beginning month*/
  FFZREC.FFZEYYMM = FG0XM001.FFZEYYMM; /* Ending month*/
  FFZREC.FFZMONTH = 6; /* Number of month*/

  XSFFS35(); /* Verify the range*/

  if (FFZREC.FFZENDRC != "0") /* Check error code*/
    FFWREC.XXXMODID = "530"; /* Module identification*/

    set FG0XM001.FFZEYYMM cursor, bold; /* Hightlight*/

    if (FFZREC.FFZENDRC == "1") /* No ending month entered*/

      converseLib.validationFailed(8); /* Indicate invalid date entered*/

    end

    if (FFZREC.FFZENDRC == "2") /* Invalid ending month entered*/

      converseLib.validationFailed(17); /* Indicate invalid date entered*/

    end

    if (FFZREC.FFZENDRC == "3") /* Ending month out of range*/

      converseLib.validationFailed(151); /* Indicate invalid date entered*/

    end
  end

  if (FFZREC.FFZBEGRC != "0") /* Check error code*/

    FFWREC.XXXMODID = "530"; /* Module identification*/
    set FG0XM001.FFZBYYMM cursor, bold; /* hightlight*/

    if (FFZREC.FFZBEGRC == "1") /* No beginning month entered*/

      converseLib.validationFailed(8); /* Indicate required field*/

    end

    if (FFZREC.FFZBEGRC == "2") /* Invalid beginning month entered*/

      converseLib.validationFailed(17); /* Indicate invalid date entered*/

    end

    if (FFZREC.FFZBEGRC == "3") /* Beginning month out of range*/

      converseLib.validationFailed(151); /* Indicate invalid date entered*/

    end

  end

  if (converseVar.validationMsgNum == 0)

    FFWREC.FFABEGMO = FFZREC.FFZBEGMO; /* Save converted dates into*/
    FFWREC.FFAENDMO = FFZREC.FFZENDMO; /* commarea record*/

  end

end // end FG0X530

// Process valid input request
Function FG0X600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FG0XW00.FG0XWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    FG0XW00.XXXTSPAG = FG0XW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    FG0XW00.XXXTSPAG = FG0XW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/

  if (FG0XM001.FFZBYYMM != FG0XW01.FFZBYYMM /* Beginning month changed*/
   || FG0XM001.FFZEYYMM != FG0XW01.FFZEYYMM /* or ending month changed*/
   || FG0XM001.XPLCD != FFWREC.XPLCD        /* or product line code changed*/
   || FG0XM001.YPGCD != FFWREC.YPGCD)       /* or type group code changed*/

    FG0XW01.FFZBEGMO = FFZREC.FFZBEGMO; /* Beginning month*/
    FG0XW01.FFZENDMO = FFZREC.FFZENDMO; /* Ending month*/
    FFWREC.FFABEGMO = FFZREC.FFZBEGMO; /* Beginning month*/
    FFWREC.FFAENDMO = FFZREC.FFZENDMO; /* Ending month*/
    FFWREC.XPLCD = FG0XM001.XPLCD; /* Product line code*/
    FFWREC.YPGCD = FG0XM001.YPGCD; /* Type group code*/
    FFWREC.XPLABRV = FG0XM001.XPLABRV; /* Product line abbreviation*/
    FFWREC.YPGABRV = FG0XM001.YPGABRV; /* Type group abbreviation*/

    /* ------------------------------------------------------------*/
     /* If a search key was entered, request the data to display.*/
    /* ------------------------------------------------------------*/

    if (FG0XM001.FFZBYYMM > 0 /* beginning month was entered*/
     && FG0XM001.FFZEYYMM > 0 /* ending month was entered*/
     && FG0XM001.XPLCD > "  " /* product line was entered*/
     && FG0XM001.YPGCD > "  ") /* type group code was entered*/

      FG0XW00.FG0XWSWR = "Y"; /* Request for data switch*/

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a line was selected, save the key fields and transfer*/
   /* to the related maintaining index application.*/
   /* ------------------------------------------------------------*/

  if ("S" in FG0XM001.FG0XMDMS /* Line was selected*/
   || "S" in FG0XM001.FG0XMFSS 
   || "S" in FG0XM001.FG0XMPSS 
   || "S" in FG0XM001.FG0XMFDS 
   || "S" in FG0XM001.FG0XMPDS 
   || "S" in FG0XM001.FG0XMFRS 
   || "S" in FG0XM001.FG0XMFOS)

    FFWREC.XPCCD = FG0XM001.XPCCD[sysVar.arrayIndex]; /* Category code*/
    if (FFWREC.XPCCD in XPCTBL.XPCCD)
      FFWREC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
    end /* Abbreviation*/

    /* -----------------------------------------------------*/
     /* Move the appropriate application id to option field*/
    /* -----------------------------------------------------*/

    if ("S" in FG0XM001.FG0XMDMS) /* Line was selected*/

      COMMAREA.CATOAP = "FG0T"; /* set index application*/
      FG0XW00.FG0XWDES = "DMS"; /* Select field description*/

    end

    if ("S" in FG0XM001.FG0XMFSS)

      COMMAREA.CATOAP = "FG0V"; /* set index application*/
      FG0XW00.FG0XWDES = "FSS"; /* Select field description*/

    end

    if ("S" in FG0XM001.FG0XMPSS)

      COMMAREA.CATOAP = "FG0Z"; /* set index application*/
      FG0XW00.FG0XWDES = "PSS"; /* Select field description*/

    end

    if ("S" in FG0XM001.FG0XMFDS)

      COMMAREA.CATOAP = "FG0W"; /* set index application*/
      FG0XW00.FG0XWDES = "FDS"; /* Select field description*/

    end

    if ("S" in FG0XM001.FG0XMPDS)

      COMMAREA.CATOAP = "FG07"; /* set index application*/
      FG0XW00.FG0XWDES = "PDS"; /* Select field description*/

    end

    if ("S" in FG0XM001.FG0XMFRS)

      COMMAREA.CATOAP = "FG08"; /* set index application*/
      FG0XW00.FG0XWDES = "FRS"; /* Select field description*/

    end

    if ("S" in FG0XM001.FG0XMFOS)

      COMMAREA.CATOAP = "FG09"; /* set index application*/
      FG0XW00.FG0XWDES = "FOS"; /* Select field description*/

    end

    XSFFS01();

    /* --------------------------------------------------------*/
     /* Determine the right selection field which caused error*/
    /* --------------------------------------------------------*/

    if (FG0XW00.FG0XWDES == "DMS") /* Demand index*/

      set FG0XM001.FG0XMDMS[sysVar.arrayIndex] cursor, bold; /* highlight*/

    end

    if (FG0XW00.FG0XWDES == "FSS") /* Future ship index*/

      set FG0XM001.FG0XMFSS[sysVar.arrayIndex] cursor, bold; /* highlight*/

    end

    if (FG0XW00.FG0XWDES == "PSS") /* Prop ship index*/

      set FG0XM001.FG0XMPSS[sysVar.arrayIndex] cursor, bold; /* highlight*/

    end

    if (FG0XW00.FG0XWDES == "FDS") /* Future demand index*/

      set FG0XM001.FG0XMFDS[sysVar.arrayIndex] cursor, bold; /* highlight*/

    end

    if (FG0XW00.FG0XWDES == "PDS") /* Prop demand index*/

      set FG0XM001.FG0XMPDS[sysVar.arrayIndex] cursor, bold; /* highlight*/

    end

    if (FG0XW00.FG0XWDES == "FRS") /* Fill rate*/

      set FG0XM001.FG0XMFRS[sysVar.arrayIndex] cursor, bold; /* highlight*/

    end

    if (FG0XW00.FG0XWDES == "FOS") /* Future ratio*/

      set FG0XM001.FG0XMFOS[sysVar.arrayIndex] cursor, bold; /* highlight*/

    end

    FG0XW00.FG0XWSWF = "Y"; /* format the map switch*/
    FG0XW00.FG0XWSWR = "N"; /* request for data switch*/

  end


end // end FG0X600

// Verify line & type in VFFXRF01
Function FG0XS01()

  FG0XS11(); /* Select & open the cursor in VFFXRF01*/

  FG0XS12(); /* Fetch the first row*/

  FG0XS13(); /* Close the cursor*/

end // end FG0XS01

// Save data in display storage
Function FG0XS02()

   /* ------------------------------------------------------------*/
   /* Save the line to be displayed in the display storage area.*/
   /* ------------------------------------------------------------*/

  FG0XW01.XPCCD[FG0XWIXM] = FF2REC.XPCCD; /* Category code*/
  FG0XW01.XPCSDESC[FG0XWIXM] = "************"; /* Inititalize desc.*/
  XPCREC.XPCCD = FF2REC.XPCCD;

  if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* code is in table*/
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    FG0XW01.XPCSDESC[FG0XWIXM] = XPCTBL.XPCSDESC[sysVar.arrayIndex];

  end

end // end FG0XS02

// Read temporary storage page
Function FG0XS04()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FG0XW01.XXXTSLEN = FG0XW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FG0XW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FG0XW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S04"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0XS04

// Check multiple selection
Function FG0XS06()
   /* ------------------------------------------------------------*/
   /* Check multiple selections for the category*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
       /* Future ratio was selected*/
   /* ------------------------------------------------------------*/

  if (FG0XW00.FG0XWDES == "FOS"
   && FG0XW00.FG0XWSEL == "S")

    if (FG0XM001.FG0XMDMS[FG0XWIXM] > " " /* Demand index was selected*/
     || FG0XM001.FG0XMFSS[FG0XWIXM] > " " /* Future ship index selected*/
     || FG0XM001.FG0XMPSS[FG0XWIXM] > " " /* Prop ship index selected*/
     || FG0XM001.FG0XMFDS[FG0XWIXM] > " " /* Future demand index sel*/
     || FG0XM001.FG0XMPDS[FG0XWIXM] > " " /* Prop demand index selected*/
     || FG0XM001.FG0XMFRS[FG0XWIXM] > " ") /* Fill rate was selected*/

      FFWREC.XXXMODID = "S06"; /* Module identification*/
      converseLib.validationFailed(73); /* Indicate more than one option*/
                                   /* selected*/

      set FG0XM001.FG0XMFOS[FG0XWIXM] cursor, bold; /* Highlight*/

    end

  end

   /* ------------------------------------------------------------*/
       /* Fill rate was selected*/
   /* ------------------------------------------------------------*/

  if (FG0XW00.FG0XWDES == "FRS"
   && FG0XW00.FG0XWSEL == "S")

    if (FG0XM001.FG0XMDMS[FG0XWIXM] > " " /* Demand index was selected*/
     || FG0XM001.FG0XMFSS[FG0XWIXM] > " " /* Future ship index selected*/
     || FG0XM001.FG0XMPSS[FG0XWIXM] > " " /* Prop ship index selected*/
     || FG0XM001.FG0XMFDS[FG0XWIXM] > " " /* Future demand index sel*/
     || FG0XM001.FG0XMPDS[FG0XWIXM] > " ") /* Prop demand index selected*/

      FFWREC.XXXMODID = "S06"; /* Module identification*/
      converseLib.validationFailed(73); /* Indicate more than one option*/
                                   /* selected*/

      set FG0XM001.FG0XMFRS[FG0XWIXM] cursor, bold; /* Highlight*/

    end

  end

   /* ------------------------------------------------------------*/
       /* Prop demand was selected*/
   /* ------------------------------------------------------------*/

  if (FG0XW00.FG0XWDES == "PDS"
   && FG0XW00.FG0XWSEL == "S")

    if (FG0XM001.FG0XMDMS[FG0XWIXM] > " " /* Demand index was selected*/
     || FG0XM001.FG0XMFSS[FG0XWIXM] > " " /* Future ship index selected*/
     || FG0XM001.FG0XMPSS[FG0XWIXM] > " " /* Prop ship index selected*/
     || FG0XM001.FG0XMFDS[FG0XWIXM] > " ") /* Future demand index sel*/

      FFWREC.XXXMODID = "S06"; /* Module identification*/
      converseLib.validationFailed(73); /* Indicate more than one option*/
                                   /* selected*/

      set FG0XM001.FG0XMPDS[FG0XWIXM] cursor, bold; /* Highlight*/

    end

  end

   /* ------------------------------------------------------------*/
       /* Future demand was selected*/
   /* ------------------------------------------------------------*/

  if (FG0XW00.FG0XWDES == "FDS"
   && FG0XW00.FG0XWSEL == "S")

    if (FG0XM001.FG0XMDMS[FG0XWIXM] > " " /* Demand index was selected*/
     || FG0XM001.FG0XMFSS[FG0XWIXM] > " " /* Future ship index selected*/
     || FG0XM001.FG0XMPSS[FG0XWIXM] > " ") /* Prop ship index selected*/

      FFWREC.XXXMODID = "S06"; /* Module identification*/
      converseLib.validationFailed(73); /* Indicate more than one option*/
                                   /* selected*/

      set FG0XM001.FG0XMFDS[FG0XWIXM] cursor, bold; /* Highlight*/

    end

  end

   /* ------------------------------------------------------------*/
       /* Prop ship was selected*/
   /* ------------------------------------------------------------*/

  if (FG0XW00.FG0XWDES == "PSS"
   && FG0XW00.FG0XWSEL == "S")

    if (FG0XM001.FG0XMDMS[FG0XWIXM] > " " /* Demand index was selected*/
     || FG0XM001.FG0XMFSS[FG0XWIXM] > " ") /* Future ship index selected*/

      FFWREC.XXXMODID = "S06"; /* Module identification*/
      converseLib.validationFailed(73); /* Indicate more than one option*/
                                   /* selected*/

      set FG0XM001.FG0XMPSS[FG0XWIXM] cursor, bold; /* Highlight*/

    end

  end

   /* ------------------------------------------------------------*/
       /* Future ship was selected*/
   /* ------------------------------------------------------------*/

  if (FG0XW00.FG0XWDES == "FSS"
   && FG0XW00.FG0XWSEL == "S")

    if (FG0XM001.FG0XMDMS[FG0XWIXM] > " ") /* Demand index was selected*/

      FFWREC.XXXMODID = "S06"; /* Module identification*/
      converseLib.validationFailed(73); /* Indicate more than one option*/
                                   /* selected*/

      set FG0XM001.FG0XMFSS[FG0XWIXM] cursor, bold; /* Highlight*/

    end

  end

end // end FG0XS06

// Check multiple selection
Function FG0XS07()

  FG0XW00.FG0XWIND = FG0XW00.FG0XWIXM - 1;

  while (FG0XW00.FG0XWIND >= 1) /* Until first line reach*/

    if (FG0XW00.FG0XWSEL == "S") /* Option selected*/

      if (FG0XM001.FG0XMDMS[FG0XWIND] > " " /* Demand index was selected*/
       || FG0XM001.FG0XMFSS[FG0XWIND] > " " 
       /* Future ship index selected*/
       || FG0XM001.FG0XMPSS[FG0XWIND] > " " /* Prop ship index selected*/
       || FG0XM001.FG0XMFDS[FG0XWIND] > " " /* Future demand index sel*/
       || FG0XM001.FG0XMPDS[FG0XWIND] > " " 
       /* Prop demand index selected*/
       || FG0XM001.FG0XMFRS[FG0XWIND] > " " /* Fill rate was selected*/
       || FG0XM001.FG0XMFOS[FG0XWIND] > " ") /* Future ratio was selected*/

        FFWREC.XXXMODID = "S07"; /* Module identification*/
        converseLib.validationFailed(73); /* Indicate more than one line selected*/

        if (FG0XW00.FG0XWDES == "FOS")
          set FG0XM001.FG0XMFOS[FG0XWIXM] cursor, bold; /* Highlight*/
        end

        if (FG0XW00.FG0XWDES == "FRS")
          set FG0XM001.FG0XMFRS[FG0XWIXM] cursor, bold; /* Highlight*/
        end

        if (FG0XW00.FG0XWDES == "PDS")
          set FG0XM001.FG0XMPDS[FG0XWIXM] cursor, bold; /* Highlight*/
        end

        if (FG0XW00.FG0XWDES == "FDS")
          set FG0XM001.FG0XMFDS[FG0XWIXM] cursor, bold; /* Highlight*/
        end

        if (FG0XW00.FG0XWDES == "PSS")
          set FG0XM001.FG0XMPSS[FG0XWIXM] cursor, bold; /* Highlight*/
        end

        if (FG0XW00.FG0XWDES == "FSS")
          set FG0XM001.FG0XMFSS[FG0XWIXM] cursor, bold; /* Highlight*/
        end

        if (FG0XW00.FG0XWDES == "DMS")
          set FG0XM001.FG0XMDMS[FG0XWIXM] cursor, bold; /* Highlight*/
        end

      end

    end

    FG0XW00.FG0XWIND = FG0XW00.FG0XWIND - 1;
                                   /* Decrement the line select indx*/

  end

end // end FG0XS07

// Select & open cursor VFFXRF01
Function FG0XS11()

  set FF2REC empty; /* Clear the storage row*/

  FF2REC.XPLCD = FG0XM001.XPLCD; /* Product line code*/
  FF2REC.YPGCD = FG0XM001.YPGCD; /* Type group code*/
  FF2REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF2REC.XPCCD = "*"; /* Wild card*/

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0XS11

// Fetch the next row in VFFXRF01
Function FG0XS12()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* or end of select set*/
      converseLib.validationFailed(203); /* Indicate inconsistent*/
      FFWREC.XXXMODID = "S12"; /* Module identification*/
      set FG0XM001.XPLCD cursor, bold; /* Highlight*/
      set FG0XM001.YPGCD bold; /* Highlight*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S12"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0XS12

// Close the cursor in VFFXRF01
Function FG0XS13()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S13"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0XS13

//*** RECORD=FG0XW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FG0XW00 type basicRecord
  10 FG0XWIXM FG0XWIXM ; 
  10 FG0XWIND FG0XWIND ; 
  10 FG0XWSWC FG0XWSWC ; 
  10 FG0XWSWF FG0XWSWF ; 
  10 FG0XWSWR FG0XWSWR ; 
  10 FG0XWSWU FG0XWSWU ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FG0XWSEL FG0XWSEL ; 
  10 FG0XWDES FG0XWDES ; 
end // end FG0XW00

//*** RECORD=FG0XW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FG0XW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(460) ; 
    10 FFZBEGMO FFZBEGMO ; 
      15 FFZBCC FFZBCC ; 
      15 FFZBYYMM FFZBYYMM ; 
    10 FFZENDMO FFZENDMO ; 
      15 FFZECC FFZECC ; 
      15 FFZEYYMM FFZEYYMM ; 
    10 XPCCD XPCCD [16] ; 
    10 XPCSDESC XPCSDESC [16] ; 
    10 FG0XMDMS FG0XMDMS [16] ; 
    10 FG0XMDMF FG0XMDMF [16] ; 
    10 FG0XMFSS FG0XMFSS [16] ; 
    10 FG0XMFSF FG0XMFSF [16] ; 
    10 FG0XMPSS FG0XMPSS [16] ; 
    10 FG0XMPSF FG0XMPSF [16] ; 
    10 FG0XMFDS FG0XMFDS [16] ; 
    10 FG0XMFDF FG0XMFDF [16] ; 
    10 FG0XMPDS FG0XMPDS [16] ; 
    10 FG0XMPDF FG0XMPDF [16] ; 
    10 FG0XMFRS FG0XMFRS [16] ; 
    10 FG0XMFRF FG0XMFRF [16] ; 
    10 FG0XMFOS FG0XMFOS [16] ; 
    10 FG0XMFOF FG0XMFOF [16] ; 
end // end FG0XW01

// Demand index exist flag
DataItem FG0XMDMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Demand index select field
DataItem FG0XMDMS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Futr dmd index exist flag
DataItem FG0XMFDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Futr dmd index select field
DataItem FG0XMFDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Futr ratio exist flag
DataItem FG0XMFOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Futr ratio select field
DataItem FG0XMFOS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fill rate exist flag
DataItem FG0XMFRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fill rate select field
DataItem FG0XMFRS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Futr ship index exist flag
DataItem FG0XMFSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Futr ship index select field
DataItem FG0XMFSS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prop dmd index exist flag
DataItem FG0XMPDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prop dmd index select field
DataItem FG0XMPDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prop ship index exist flag
DataItem FG0XMPSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prop ship index select field
DataItem FG0XMPSS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Select field description
DataItem FG0XWDES char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for line selection
DataItem FG0XWIND num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FG0XWIXM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary select field
DataItem FG0XWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem FG0XWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FG0XWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FG0XWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem FG0XWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

