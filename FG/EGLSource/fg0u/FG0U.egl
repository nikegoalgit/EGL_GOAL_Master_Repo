package fg0u;

import corpcom2.XPCREC;
import corpcom2.XPLREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPFF001;
import corpcom3.XPTA0P;
import corpcom3.XPXPC01;
import corpcom3.XPXPL01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS01;
import corpcom4.XSFFS10;
import corpcom4.XSFFS20;
import corpcom4.XSFFS35;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XDMCD;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx2.XPCCD;
import corpx2.XPLCD;
import corpy2.YPGCD;
import corpy2.YPGTBL;
import ff.common.*;
import sy.common.SY1STNBR;
import sy.common.SY2CLRID;
import sy.common.SYBSTGNB;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
import ta.common.TARJCL;
//*** PROGRAM=FG0U ****
// This application provides the user with the ability to
// create a demand index by referring to the historical
// data or the user can pick a specific historical demand
// index(1 year ago, 2 year ago, or 3 years ago) for a given
// range and specific category.
// 
// The demand index is the percentage of the monthly demand
// quantity over the total demand quantity of the required
// range.  The actual demand quantity is the total quantity of
// the actual prop demand and the actual future demand of the
// next month.
// 
// The monthly quantities and indices will be displayed.
// If the user created indices didn't add up to 100, then
// the variance will be shown on the top of the screen.  The
// quantites are all in thousand.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from either of the screens.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          02/15/90  rgilli  New application.
//          06/12/90  JJUCH   Changed the calculation for the
//                            interval of current thru current
//                            plus 5 month.
// FF1016   07/31/90  JJUCH   Disallowed to fcst current main
//                            buy month and all prior months.
// FF175    09/05/90  LDELUH  Subtract carryover out of sales
//                            in current month for calculating
//                            demand.
// FF#fix   10/31/90  SFORD   calc. of curr month
// TA11/07  11/19/90  JJUCH   Kept the line code and abrv passd
//                            in FFWREC.
// FF175    01/16/91  LDELUH  Chg calc of dmd qty to match FF0F
// FF399    04/26/93  JJUCH   Correct the problem of calculat-
//                            ing fcst dmd in the current month
//          03/21/94  JJUCH   Wildcard line code on the screen.
//          03/21/96  cwhit   added code to treat line 11 items
//                            apart form other lines.  Due to
//                           large eyewear quantites
//          05/29/96  cwhit   allow entry on buy month if buy
//                            flag from MCAT is 'y'
// FF175    12/18/96  DSMITH  Changed the fill characters for
//                            date range to '0'.
//          07/01/96  cwhit1  copied in from fe0n to add ranges
// FF-fix   02/19/98  RKUDPI  Fixed date calcs in FG0U-100 and
//                            FG0U-520 for Y2K compliancy.
// *********************
Program FG0U type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF6REC FF6REC; // record
  FF7REC FF7REC; // record
  FFFREC FFFREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  FG0UW00 FG0UW00; // record
  FG0UW01 FG0UW01; // record
  FG0UW02 FG0UW02; // record
  FG0UW03 FG0UW03; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPCTBL; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use YPGTBL; // table
  use FG0UT01 {deleteAfterUse = yes}; // table
  use FG0UT51 {deleteAfterUse = yes}; // table
  use FG0UM.FG0UM001, // form
  		FG0UM.XX0XM001,
  		FG0UM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FFFREC empty;
    set FFZREC empty;
    set FG0UM001 initial; /* M001 input/output*/
    set FG0UW00 empty; /* Working storage*/
    set FG0UW01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine work area*/
    set TA5REC empty; /* temp storage queue area*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FG0UW00.FG0UW-SWR = "N"; /* Request for data switch*/
    FG0UW00.FG0UW-SWF = "Y"; /* format screen data switch*/

     /* ---------------------------------------------------*/
     /* Clear unused fields*/
     /* ---------------------------------------------------*/

    FFWREC.SYBSTGNB = " "; /* Clear style group number*/
    FFWREC.SYBSTGNM = " "; /* Clear style group name*/
    FFWREC.SY1STNBR = " "; /* Clear style number*/
    FFWREC.SY2CLRID = " "; /* Clear color id*/
    FFWREC.XDMCD = " "; /* Clear dimension code*/
    FFWREC.SY1SSTNM = " "; /* Clear short style name*/
    FFWREC.SY2CLRAB = " "; /* Clear color abrv*/
    FFWREC.XDMABRV = " "; /* Clear dimension abrv*/
    FFWREC.ZRGCD = " "; /* Clear region code*/
    FFWREC.ZRGABRV = " "; /* Clear region abrv*/
    FFWREC.XCTCD = " "; /* Clear country code*/
    FFWREC.XCTABRV = " "; /* Clear country abrv*/

     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/

     /* ------------------------------------------------------------*/
     /* product type group*/
     /* ------------------------------------------------------------*/

    if (FFWREC.YPGCD == " ")
      FFWREC.YPGCD = "01";
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end

     /* ------------------------------------------------------------*/
     /* determine if data is to be loaded*/
     /* ------------------------------------------------------------*/

    if (FFWREC.FFABEGMO != 0
     && FFWREC.FFAENDMO != 0)
      FFZREC.FFZBEGMO = FFWREC.FFABEGMO;
      FFZREC.FFZENDMO = FFWREC.FFAENDMO;
      if (FFWREC.XPLCD != " " /* product line*/
       || FFWREC.XPCCD != " ") /* product category*/
        FG0UW00.FG0UW-SWR = "Y"; /* set data request flag*/
      end
    end

     /* ------------------------------------------------------------*/
     /* product line*/
     /* ------------------------------------------------------------*/

    if (FFWREC.XPLCD == " ")
      FFWREC.XPLCD = "* ";
      FFWREC.XPLABRV = "ALL";
    end

     /* ------------------------------------------------------------*/
     /* determine if data is to be loaded*/
     /* ------------------------------------------------------------*/

    if (FFWREC.FFABEGMO != 0
     && FFWREC.FFAENDMO != 0)
      FFZREC.FFZBEGMO = FFWREC.FFABEGMO;
      FFZREC.FFZENDMO = FFWREC.FFAENDMO;
      if (FFWREC.XPLCD != " " /* product line*/
       || FFWREC.XPCCD != " ") /* product category*/
        FG0UW00.FG0UW-SWR = "Y"; /* set data request flag*/
      end
    end

     /* ------------------------------------------------------------*/
     /* Flow to first time through date validation*/
     /* ------------------------------------------------------------*/

    goto FG0U-001; /* Converse the main process*/

    FG0U-001: FG0U-001();
     /* ------------------------------------------------------------*/
     /* flow to converse the main process used to display a map*/
     /* ------------------------------------------------------------*/

    goto FG0U-001; /* converse the main process*/

  end // end main
end // end FG0U

// sales fcst global update
Function FG0U-001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FG0U-100(); /* Obtain the data to display*/

  FG0U-200(); /* Format and display the map*/

  FG0U-300(); /* Check attention identifier*/

  FG0U-400(); /* Reset fields to normal intensity*/

  FG0U-500(); /* Verify the entered data*/

  FG0U-600(); /* Process valid input request*/


end // end FG0U-001

// obtain data for display
Function FG0U-100()

  if (FG0UW00.FG0UW-SWR == "Y") /* request for data*/
    FG0U-110(); /* verify date range*/
  end

   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FG0UW00.FG0UW-SWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* init working storage*/
   /* ------------------------------------------------------------*/

  set FG0UW01 empty; /* init w/s*/

   /* ------------------------------------------------------------*/
   /* obtain current date using routine xx0xs01*/
   /* ------------------------------------------------------------*/
   /* ------------------------*/
   /* get current date*/
   /* ------------------------*/

  XX0XS01();

  FG0U-120(); /* get data DFCAST.VFFCTL01*/

  FG0U-130(); /* get current date based on invoice*/
                                   /* cutoff date*/
   /* ------------------------------------------------------------*/
   /* clear the MCAT copybook*/
   /* ------------------------------------------------------------*/

  set FF7REC empty;
   /* ------------------------------------------------------------*/
   /* FORMAT CALL*/
   /* ------------------------------------------------------------*/
  FG0UW-DT1 = FF1REC.FF1FUTDT;
  FG0UW-MM1 = FG0UW-MM1 + 5;
  if (FG0UW-MM1 > 12)
    if (FG0UW-YY1 == 99)
      FG0UW-YY1 = 00;
      FG0UW-CC1 = FG0UW-CC1 + 1;
    else
      FG0UW-YY1 = FG0UW-YY1 + 1;
    end
    FG0UW-MM1 = FG0UW-MM1 - 12;
  end

  FG0UW00.FG0UW-BUYMO = FG0UW-CYM;
  FF7REC.FF4FCTMO = FG0UW00.FG0UW-BUYMO; /* BUY MONTH*/
  FF7REC.XPCCD = "30"; /* CATAGORY*/
  FF7REC.YPGCD = "01"; /* TYPE*/
  FF7REC.YSMXDV = "10"; /* DIVISION*/
  FF7REC.XCTCD = "USA"; /* COUNTRY*/
   /* ------------------------------------------------------------*/
   /* SELECT MCAT*/
   /* ------------------------------------------------------------*/
  FG0U-1412();
   /* ------------------------------------------------------------*/

  FG0UW00.FG0UW-IDX = 1; /* init index*/
  while (FG0UW00.FG0UW-IDX <= FFZREC.FFZNUMMO) /* process all months in range*/

    FG0UW01.FG0UW-HDG-CCYYMM[FG0UW-IDX] = FFZREC.FFZINDMO[FG0UW-IDX];
    FG0UW01.FG0UW-HDG-YYMM[FG0UW-IDX] = FFZREC.FFZIYYMM[FG0UW-IDX];

    FG0UW00.FG0UW-IDX = FG0UW00.FG0UW-IDX + 1;

  end

   /* ------------------------------------------------------------*/
   /* Obtain the master forecast for the specified level*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XPCCD != " ") /* category level*/
    FG0U-135(); /* get line code if blank*/
  end

  FG0UW00.FG0UW-IDX = 1; /* init index*/
  while (FG0UW00.FG0UW-IDX <= FFZREC.FFZNUMMO) /* process all month in range*/

    if (FFWREC.XPCCD != " ") /* category level*/
      FG0U-140();
    else
      if (FFWREC.XPLCD != " ") /* line level*/
        FG0U-150();
      else
        FG0U-160(); /* type group level*/
      end
    end

    FG0UW00.FG0UW-IDX = FG0UW00.FG0UW-IDX + 1;

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FG0UW00.FG0UW-SWR = "N"; /* Request for data switch*/


end // end FG0U-100

// Verify date range
Function FG0U-110()

  FG0UW00.FG0UW-WBD = FFWREC.FFABEGMO; /* Beginning date*/
  FG0UW00.FG0UW-WED = FFWREC.FFAENDMO; /* Ending date*/

   /* --------------------------------------------------------------------*/
   /* put the default date range into ffzrec.ffzbegmo and ffzrec.ffzendmo*/
   /* --------------------------------------------------------------------*/

  set FFZREC empty; /* Clear storage row*/
  FFZREC.FFZBYYMM = FG0UW00.FG0UW-BYM; /* Beginning month*/
  FFZREC.FFZEYYMM = FG0UW00.FG0UW-EYM; /* Ending month*/
  FG0UW00.FG0UW-BUYFLAG = FF7REC.FF7CBYFL;
  if (FF7REC.FF7CBYFL == "N"
   && FG0UW00.FG0UW-WBD == FG0UW00.FG0UW-BUYMO)
    FFZREC.FFZMONTH = 5; /* Number of month*/
  else
    FFZREC.FFZMONTH = 6; /* Number of month*/
  end

  XSFFS35(); /* Verify the range*/

  if (FFZREC.FFZENDRC != "0" /* Check error code*/
   || FFZREC.FFZBEGRC != "0")

    FG0UW00.FG0UW-SWR = "N"; /* Don't obtain data*/

  end

  if (FFZREC.FFZENDRC != "0") /* Check error code*/

    FFWREC.XXXMODID = "110"; /* Module identification*/

    set FG0UM001.FG0UM-ERG cursor, bold; /* Hightlight*/

    if (FFZREC.FFZENDRC == "1") /* No ending month entered*/

      converseLib.validationFailed(8); /* Indicate invalid date entered*/

    end

    if (FFZREC.FFZENDRC == "2") /* Invalid ending month entered*/

      converseLib.validationFailed(17); /* Indicate invalid date entered*/

    end

    if (FFZREC.FFZENDRC == "3") /* Ending month out of range*/

      converseLib.validationFailed(151); /* Indicate invalid date entered*/

    end

  end

  if (FFZREC.FFZBEGRC != "0") /* Check error code*/

    FFWREC.XXXMODID = "110"; /* Module identification*/
    set FG0UM001.FG0UM-BRG cursor, bold; /* hightlight*/

    if (FFZREC.FFZBEGRC == "1") /* No beginning month entered*/

      converseLib.validationFailed(8); /* Indicate required field*/

    end

    if (FFZREC.FFZBEGRC == "2") /* Invalid beginning month entered*/

      converseLib.validationFailed(17); /* Indicate invalid date entered*/

    end

    if (FFZREC.FFZBEGRC == "3") /* Beginning month out of range*/

      converseLib.validationFailed(151); /* Indicate invalid date entered*/

    end

  end

end // end FG0U-110

// Retrv futr cutoff dt VFFCTL01
Function FG0U-120()

  set FF1REC empty; /* Clear up the storage row*/

  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0U-120

// Calculate the current month
Function FG0U-130()
   /* ------------------------------------------------------------*/
   /* Curr month calculation , stored in fg0uW00.fg0twcrd*/
   /* ------------------------------------------------------------*/

  if (FF1REC.FF1IVCDT != 0) /* ===> Invoice cutoff date*/
    FG0UW00.FG0UW-DT1 = FF1REC.FF1IVCDT;

    if (XX0XW01.XX0XWDAT > FF1REC.FF1IVCDT) /* ===> curr >  ivc date*/
      FG0UW00.FG0UW-CRD = FG0UW00.FG0UW-CYM;
    else

      if (FG0UW00.FG0UW-MM1 == 1)
        FG0UW00.FG0UW-MM1 = 12;

        if (FG0UW00.FG0UW-YY1 == 0)
          FG0UW00.FG0UW-YY1 = 99;
          FG0UW00.FG0UW-CC1 = FG0UW00.FG0UW-CC1 - 1;
          FG0UW00.FG0UW-CRD = FG0UW00.FG0UW-CYM;
        else
          FG0UW00.FG0UW-YY1 = FG0UW00.FG0UW-YY1 - 1;
          FG0UW00.FG0UW-CRD = FG0UW00.FG0UW-CYM;
        end

      else
        FG0UW00.FG0UW-MM1 = FG0UW00.FG0UW-MM1 - 1;
        FG0UW00.FG0UW-CRD = FG0UW00.FG0UW-CYM;
      end

    end
  else
    FG0UW00.FG0UW-CRD = 0;
  end

end // end FG0U-130

// Obtain line code & abrv
Function FG0U-135()
  if (FFWREC.XPLCD == " ")
    FG0UM001.YPGCD = FFWREC.YPGCD;
    FG0UM001.XPCCD = FFWREC.XPCCD;
    FG0U-521(); /* obtain line code from vffxrf01*/
    FFWREC.XPLCD = FF2REC.XPLCD;
    XPLREC.XGPCD = "02";
    XPLREC.XPLCD = FF2REC.XPLCD;
    if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
      FFWREC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
    end
  end
end // end FG0U-135

// Obtain cat level master fcst
Function FG0U-140()
  if (FFWREC.YSMXDV == "10") /* domestic*/
    FG0U-141();
  else
    FG0U-142(); /* Nil*/
  end

   /* ---------------------------------------------------*/
   /* translate/load monthly quantity*/
   /* ---------------------------------------------------*/

  FG0UW01.FG0UW-MSTR-NUM[FG0UW-IDX] = FF7REC.FF6SLFCT;
  FFXREC.FFXNUMB = FF7REC.FF6SLFCT;
  XSFFS10();
  FG0UW01.FG0UW-MSTR-CHA[FG0UW-IDX] = FFXREC.FFXCHAR;

end // end FG0U-140

// Obtain DOM cat master fcst
Function FG0U-141()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* Clear row storage area*/
  set FFFREC empty; /* Clear row storage area*/

  FF7REC.XPCCD = FFWREC.XPCCD;
  FF7REC.XCTCD = "USA ";
  FF7REC.YSMXDV = "10";

  FG0U-1411(); /* get monthly category fcst*/

end // end FG0U-141

// Select sum 'SS' VMCAT001
Function FG0U-1411()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFBEGMO = FG0UW01.FG0UW-HDG-CCYYMM[FG0UW-IDX];
  FFFREC.FFFENDMO = FG0UW01.FG0UW-HDG-CCYYMM[FG0UW-IDX];
  FF7REC.YPGCD = FFWREC.YPGCD;

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "SS";

  try
    call "IO3700" (FFFREC, SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select rows*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == -305) /* No rows found*/
      FF7REC.FF6SLFCT = 0;
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "141"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN MONTH MSTR BY CAT SUM";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0U-1411

// Select MCAT
Function FG0U-1412()
   /* ------------------------------------------------------------*/
   /* Select MCAT.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process. (Must be there)*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "412"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0U-1412

// Obtain NIL cat master fcst
Function FG0U-142()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* Clear row storage area*/
  set FFFREC empty; /* Clear row storage area*/

  FF7REC.XPCCD = FFWREC.XPCCD;
  FF7REC.XCTCD = "* ";
  FF7REC.YSMXDV = "20";

  FG0U-1411(); /* get monthly category fcst*/

end // end FG0U-142

// Obtain line level master fcst
Function FG0U-150()
  if (FFWREC.YSMXDV == "10") /* domestic*/
    FG0U-151();
  else
    FG0U-152(); /* Nil*/
  end

end // end FG0U-150

// Obtain DOM line master fcst
Function FG0U-151()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FF6REC empty; /* Clear row storage area*/
  set FFFREC empty; /* Clear row storage area*/

  FF6REC.XPLCD = FFWREC.XPLCD;

  FG0U-1511(); /* get monthly line fcst*/

   /* ---------------------------------------------------*/
   /* translate/load monthly quantity*/
   /* ---------------------------------------------------*/

  FG0UW01.FG0UW-MSTR-NUM[FG0UW-IDX] = FF6REC.FF6SLFCT;
  FFXREC.FFXNUMB = FF6REC.FF6SLFCT;
  XSFFS10();
  FG0UW01.FG0UW-MSTR-CHA[FG0UW-IDX] = FFXREC.FFXCHAR;

end // end FG0U-151

// Obtain line level master fcst
Function FG0U-1511()

  FFFREC.FFFBEGMO = FG0UW01.FG0UW-HDG-CCYYMM[FG0UW-IDX];
  FFFREC.FFFENDMO = FG0UW01.FG0UW-HDG-CCYYMM[FG0UW-IDX];
  FF6REC.YPGCD = FFWREC.YPGCD;

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XPLCD == "11")
    FFFREC.FFFFUNCD = "SS";
  else
    FFFREC.FFFFUNCD = "S3";
  end

  try
    call "IO3750" (FFFREC, SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select rows*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == -305) /* No rows found*/
      FF6REC.FF6SLFCT = 0;
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "151"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN MONTH MSTR BY CAT SUM";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF6REC.FF6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0U-1511

// Obtain NIL line master fcst
Function FG0U-152()

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.XPLCD = FFWREC.XPLCD; /* product line*/

  FG0US-01(); /* Open vffxrf01*/
  FG0US-02(); /* Fetch vffxrf01*/

  FG0UW00.FG0UW-XRF-SW = "N";
  FG0UW00.FG0UW-LIN-TOT = 0;

  while (FG0UW00.FG0UW-XRF-SW == "N") /* until end of file*/

    set FF7REC empty; /* Clear row storage area*/
    set FFFREC empty; /* Clear row storage area*/

    FF7REC.XPCCD = FF2REC.XPCCD;
    FF7REC.XCTCD = "*";
    FF7REC.YSMXDV = "20";

    FG0U-1411(); /* get monthly category forecast*/

    FG0UW00.FG0UW-LIN-TOT = FG0UW00.FG0UW-LIN-TOT + FF7REC.FF6PRFCT;
    FG0US-02(); /* Fetch vffxrf01*/

  end

  FG0US-03(); /* Close vffxrf01*/

   /* ---------------------------------------------------*/
   /* translate/load monthly quantity*/
   /* ---------------------------------------------------*/

  FG0UW01.FG0UW-MSTR-NUM[FG0UW-IDX] = FG0UW00.FG0UW-LIN-TOT;
  FFXREC.FFXNUMB = FG0UW00.FG0UW-LIN-TOT;
  XSFFS10();
  FG0UW01.FG0UW-MSTR-CHA[FG0UW-IDX] = FFXREC.FFXCHAR;

end // end FG0U-152

// Process type group level
Function FG0U-160()
  if (FFWREC.YSMXDV == "10") /* domestic*/
    FG0U-161();
  else
    FG0U-162(); /* Nil*/
  end

   /* ---------------------------------------------------*/
   /* translate/load monthly quantity*/
   /* ---------------------------------------------------*/

  FG0UW01.FG0UW-MSTR-NUM[FG0UW-IDX] = FG0UW00.FG0UW-TYP-TOT;
  FFXREC.FFXNUMB = FG0UW00.FG0UW-TYP-TOT;
  XSFFS10();
  FG0UW01.FG0UW-MSTR-CHA[FG0UW-IDX] = FFXREC.FFXCHAR;

end // end FG0U-160

// Obtain DOM typ grp mstr fcst
Function FG0U-161()

  FG0U-1611(); /* Open vffxrf01*/
  FG0U-1612(); /* Fetch vffxrf01*/
  FG0UW00.FG0UW-XRF-SW = "N";
  FG0UW00.FG0UW-TYP-TOT = 0;

  while (FG0UW00.FG0UW-XRF-SW == "N") /* until end of file*/

    set FF6REC empty; /* Clear row storage area*/
    set FFFREC empty; /* Clear row storage area*/

    FF6REC.XPLCD = FF2REC.XPLCD;

    FG0U-1511(); /* get monthly line fcst*/
    FG0UW00.FG0UW-TYP-TOT = FG0UW00.FG0UW-TYP-TOT + FF6REC.FF6SLFCT;
    FG0U-1612(); /* Fetch vffxrf01*/

  end

  FG0U-1613(); /* Close vffxrf01*/
end // end FG0U-161

// Open  'S3' vffxrf01 cursor
Function FG0U-1611()
   /* ------------------------------------------------------------*/
   /* Select set on dfcast.vffxrf01 table.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* load ff2rec record - dfcast.vffxrf01*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.YSMXDV = "10"; /* div grp code*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* product type group*/

   /* ------------------------------------------------------------*/
   /* select set dfcast.vffxrf01*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S3", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "161"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S2 ON DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0U-1611

// Fetch 'N3' vffxrf01 in csr
Function FG0U-1612()
   /* ------------------------------------------------------------*/
   /* fetch dfcast.vffxrf01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N3", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      FG0UW00.FG0UW-XRF-SW = "Y";
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "161"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N2 DFCAST.VFFXRF01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0U-1612

// Close 'C3' vffxrf01 cursor
Function FG0U-1613()
   /* ------------------------------------------------------------*/
   /* close dfcast.vffxrf01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C3", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "161"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE S2 DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0U-1613

// Obtain NIL typ grp mstr fcst
Function FG0U-162()

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.XPLCD = "*"; /* product line*/

  FG0US-01(); /* Open vffxrf01*/
  FG0US-02(); /* Fetch vffxrf01*/

  FG0UW00.FG0UW-XRF-SW = "N";
  FG0UW00.FG0UW-TYP-TOT = 0;

  while (FG0UW00.FG0UW-XRF-SW == "N") /* until end of file*/

    set FF7REC empty; /* Clear row storage area*/
    set FFFREC empty; /* Clear row storage area*/

    FF7REC.XPCCD = FF2REC.XPCCD;
    FF7REC.XCTCD = "*";
    FF7REC.YSMXDV = "20";

    FG0U-1411(); /* get monthly category forecast*/

    FG0UW00.FG0UW-TYP-TOT = FG0UW00.FG0UW-TYP-TOT + FF7REC.FF6SLFCT;
    FG0US-02(); /* Fetch vffxrf01*/

  end

  FG0US-03(); /* Close vffxrf01*/

end // end FG0U-162

// Format and converse the map
Function FG0U-200()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* if no errors format map*/

    /* ------------------------------------------------------------*/
     /* format screen*/
    /* ------------------------------------------------------------*/

    if (FG0UW00.FG0UW-SWF == "Y") /* map must be formatted*/

        /* ------------------------------------------------------------*/
         /* init map fg0um001*/
        /* ------------------------------------------------------------*/

      set FG0UM001 initial; /* m001 input/ouput area*/

        /* ------------------------------------------------------------*/
         /* Format fg0um001 using passed data*/
        /* ------------------------------------------------------------*/

      FG0UW00.FG0UW-WDT = FFWREC.FFABEGMO; /* w/s date field*/
      FG0UM001.FG0UM-BRG = FG0UW00.FG0UW-WYM; /* begin month range*/
      FG0UW00.FG0UW-WDT = FFWREC.FFAENDMO; /* w/s date field*/
      FG0UM001.FG0UM-ERG = FG0UW00.FG0UW-WYM; /* end month range*/

      FG0UM001.YPGCD = FFWREC.YPGCD; /* product type group*/
      FG0UM001.YPGABRV = FFWREC.YPGABRV; /* product type group abrv*/

      FG0UM001.XPLCD = FFWREC.XPLCD; /* line code*/
      FG0UM001.XPLABRV = FFWREC.XPLABRV; /* line abrv*/

      FG0UM001.XPCCD = FFWREC.XPCCD; /* category code*/
      FG0UM001.XPCABRV = FFWREC.XPCABRV; /* category abrv*/

      FG0UM001.YSMXDV = FFWREC.YSMXDV; /* division group*/
      FG0UM001.YSMSMDSC = FFWREC.YSMSMDSC; /* div grp desc*/

      FG0U-210(); /* Format the data on the map*/

    end

  else

    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* load message number*/

  end

  FG0UM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FG0UM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG0UM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* error message number*/
    FG0UM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    set FG0UM001 alarm; /* Indicate sound alarm*/
  end

  converse FG0UM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0;

  COMMAREA.CATOAP = FG0UM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG0UM001.CAITEM; /* Application data*/


end // end FG0U-200

// Format the display data
Function FG0U-210()

  FG0UW00.FG0UW-SWF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* load monthly headings and sales forecast*/
   /* ------------------------------------------------------------*/

  FG0UW00.FG0UW-IDX = 1;
  while (FG0UW00.FG0UW-IDX <= FFZREC.FFZNUMMO) /* nbr of mos loaded*/

    FG0UM001.FG0UM-HDG[FG0UW-IDX] = FG0UW01.FG0UW-HDG-YYMM[FG0UW-IDX];
    FG0UM001.FG0UM-MSTR[FG0UW-IDX] = FG0UW01.FG0UW-MSTR-CHA[FG0UW-IDX];
    FG0UM001.FG0UM-ADJ[FG0UW-IDX] = FG0UW01.FG0UW-ADJ[FG0UW-IDX];
    set FG0UM001.FG0UM-HDG[FG0UW-IDX] skip;
    set FG0UM001.FG0UM-MSTR[FG0UW-IDX] skip;
    set FG0UM001.FG0UM-ADJ[FG0UW-IDX] normal;

    FG0UW00.FG0UW-IDX = FG0UW00.FG0UW-IDX + 1; /* increment index*/

  end

end // end FG0U-210

// Check attention identifier
Function FG0U-300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* refresh map*/

    FG0UW00.FG0UW-SWF = "Y"; /* format screen m001*/
    FG0UW00.FG0UW-SWR = "N"; /* request for data*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FG0UM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      FG0UW00.FG0UW-SWF = "Y"; /* format screen m001*/
      FG0UW00.FG0UW-SWR = "N"; /* request for data*/

      set FG0UM001.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG0UM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FG0A"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    FG0UW00.FG0UW-SWF = "Y"; /* format screen m001*/
    FG0UW00.FG0UW-SWR = "N"; /* request for data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf15) /* pf15 was not pressed*/

    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FG0U-300

// Reset highlighted fields
Function FG0U-400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FG0UM001.FG0UM-BRG initialAttributes; /* begin range*/
  set FG0UM001.FG0UM-ERG initialAttributes; /* end range*/
  set FG0UM001.XPLCD initialAttributes; /* line code*/
  set FG0UM001.XPCCD initialAttributes; /* category code*/
  set FG0UM001.YPGCD initialAttributes; /* product type group*/
  set FG0UM001.YSMXDV initialAttributes; /* division group*/

  FG0UW00.FG0UW-IDX = 1;

  while (FG0UW00.FG0UW-IDX <= FFZREC.FFZNUMMO)

    set FG0UM001.FG0UM-ADJ[FG0UW-IDX] normal;

    FG0UW00.FG0UW-IDX = FG0UW00.FG0UW-IDX + 1;

  end

  set FG0UM001.CATOAP initialAttributes;
  set FG0UM001.CAITEM initialAttributes;

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FG0UM001.XPLCD == "?" /* line code*/
   || FG0UM001.XPCCD == "?" /* category code*/
   || FG0UM001.YPGCD == "?") /* product type group*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of line codes*/
   /* ------------------------------------------------------------*/

  if (FG0UM001.XPLCD == "?") /* product category list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "LINE CODES "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FG0UM001.XPLCD = FFWREC.XPLCD; /* product line*/
      XPLREC.XPLCD = FFWREC.XPLCD; /* product line*/
      XPLREC.XGPCD = COMMAREA.XGPCD; /* gpc code*/
      if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
        FG0UM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
      end
    else
      FG0UM001.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FG0UM001.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Selected code*/

    end

    set FG0UM001.XPLCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes*/
   /* ------------------------------------------------------------*/

  if (FG0UM001.XPCCD == "?") /* product category list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "CATEGORY CODES "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FG0UM001.XPCCD = FFWREC.XPCCD; /* product category*/
      XPCREC.XPCCD = FFWREC.XPCCD; /* product category*/
      XPCREC.XGPCD = COMMAREA.XGPCD; /* gpc code*/
      if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
        FG0UM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
      end
    else
      FG0UM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FG0UM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Selected code*/

    end

    set FG0UM001.XPCCD cursor; /* Establish cursor position*/

  end
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type group codes*/
   /* ------------------------------------------------------------*/

  if (FG0UM001.YPGCD == "?") /* product type grp list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT TYPE GROUP"; /* Heading*/

    XX0XW02.YPGFFFL = "Y"; /* init flag*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FG0UM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FG0UM001.YPGABRV = FFWREC.YPGABRV; /* Restore prior code*/
    else
      FG0UM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FG0UM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Selected code*/

    end

    set FG0UM001.YPGCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FG0U-400

// Verify the entered data
Function FG0U-500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FG0UM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* request for transfer*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15)

    FG0U-510(); /* verify modifiable fields*/

  end

   /* ------------------------------------------------------------*/
   /* validate entry fields*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)

    FG0U-520(); /* validate entry fields*/

  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end


end // end FG0U-500

// Verify the modifiable data
Function FG0U-510()
   /* -----------------------------------------------------*/
   /* verify detail modifiable fields*/
   /* -----------------------------------------------------*/

  FG0UW00.FG0UW-IDX = 1;
  while (FG0UW00.FG0UW-IDX <= FFZREC.FFZNUMMO)

    if (FG0UM001.FG0UM-ADJ[FG0UW-IDX] != FG0UW01.FG0UW-ADJ[FG0UW-IDX])
      set FG0UM001.FG0UM-ADJ[FG0UW-IDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "520";
    end

    FG0UW00.FG0UW-IDX = FG0UW00.FG0UW-IDX + 1;

  end

   /* -----------------------------------------------------*/
   /* verify header modifiable fields*/
   /* -----------------------------------------------------*/

  if (FG0UM001.XPLCD != FFWREC.XPLCD)
    set FG0UM001.XPLCD cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "510";
  end

  if (FG0UM001.XPCCD != FFWREC.XPCCD)
    set FG0UM001.XPCCD cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "510";
  end

  if (FG0UM001.YPGCD != FFWREC.YPGCD)
    set FG0UM001.YPGCD cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "510";
  end

  if (FG0UM001.YSMXDV != FFWREC.YSMXDV)
    set FG0UM001.YSMXDV cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "510";
  end

  FG0UW00.FG0UW-WED = FFWREC.FFAENDMO;
  if (FG0UM001.FG0UM-ERG != FG0UW00.FG0UW-EYM)
    set FG0UM001.FG0UM-ERG cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "510";
  end

  FG0UW00.FG0UW-WBD = FFWREC.FFABEGMO;
  if (FG0UM001.FG0UM-BRG != FG0UW00.FG0UW-BYM)
    set FG0UM001.FG0UM-BRG cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "510";
  end

end // end FG0U-510

// validate modifiable data
Function FG0U-520()

   /* ------------------------------------------------------------*/
   /* validate div group using routine xsffs20*/
   /* ------------------------------------------------------------*/

  set YSMREC empty;
  YSMREC.YSMSUMCD = FG0UM001.YSMXDV;
  TA1REC.TA1PGMNM = "FG0U520";

  XSFFS20(); /* validate/get division group data*/

  if (SQLCA.VAGen_SQLCODE == 0)
    FG0UM001.YSMSMDSC = YSMREC.YSMSMDSC;
  else
    FG0UM001.YSMSMDSC = " ";
    converseLib.validationFailed(10);
    FFWREC.XXXMODID = "520";
    set FG0UM001.YSMXDV cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate product category code*/
   /* ------------------------------------------------------------*/

  XPCREC.XGPCD = COMMAREA.XGPCD;
  XPCREC.XPCCD = FG0UM001.XPCCD;
  if (XPCREC.XPCKEY in XPCTBL.XPCKEY
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    FG0UM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
  else
    FG0UM001.XPCABRV = " ";
    if (FG0UM001.XPCCD == " " /* request line level*/
     && FG0UM001.XPLCD != " ")

    else
      if (FG0UM001.XPCCD == " " /* request type group level*/
       && FG0UM001.YPGCD != " ")

      else
        converseLib.validationFailed(118);
        FFWREC.XXXMODID = "520";
        set FG0UM001.XPCCD cursor, bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product line code*/
   /* ------------------------------------------------------------*/

  if (FG0UM001.XPLCD != "*") /* not wild card*/
    XPLREC.XGPCD = COMMAREA.XGPCD;
    XPLREC.XPLCD = FG0UM001.XPLCD;
    if (XPLREC.XPLKEY in XPLTBL.XPLKEY
     && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      FG0UM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
    else
      FG0UM001.XPLABRV = " ";
      if (FG0UM001.XPCCD != " " /* request category level*/
       && FG0UM001.XPLCD == " ")

        FG0U-521(); /* obtain line code from vffxrf01*/

      else
        if (FG0UM001.XPLCD == " " /* request type group level*/
         && FG0UM001.YPGCD != " ")

        else
          converseLib.validationFailed(118);
          FFWREC.XXXMODID = "520";
          set FG0UM001.XPLCD cursor, bold;
        end
      end
    end
  else
    FG0UM001.XPLABRV = "ALL";
    if (FG0UM001.XPCCD != " " /* request category level*/
     && FG0UM001.XPLCD == "*" 
    )                        
      XPLREC.XGPCD = COMMAREA.XGPCD;
      FG0U-521(); /* obtain line code from vffxrf01*/

    end
  end

   /* ------------------------------------------------------------*/
   /* validate product type group*/
   /* ------------------------------------------------------------*/

  if (FG0UM001.YPGCD != "*")
    if (FG0UM001.YPGCD in YPGTBL.YPGCD
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      FG0UM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
    else
      FG0UM001.YPGABRV = " ";
      converseLib.validationFailed(118);
      FFWREC.XXXMODID = "520";
      set FG0UM001.YPGCD cursor, bold;
    end
  else
    FG0UM001.YPGABRV = "ALL ";
  end

   /* ------------------------------------------------------------*/
   /* validate end yymm range and begin yymm range*/
   /* ------------------------------------------------------------*/
  set FF7REC empty;
  FG0U-120(); /* Get ffctl record*/
  FG0UW-DT1 = FF1REC.FF1FUTDT;
  FG0UW-MM1 = FG0UW-MM1 + 5;
  if (FG0UW-MM1 > 12)
    if (FG0UW-YY1 == 99)
      FG0UW-YY1 = 00;
      FG0UW-CC1 = FG0UW-CC1 + 1;
    else
      FG0UW-YY1 = FG0UW-YY1 + 1;
    end
    FG0UW-MM1 = FG0UW-MM1 - 12;
  end

  FG0UW00.FG0UW-BUYMO = FG0UW-CYM;
  FF7REC.FF4FCTMO = FG0UW00.FG0UW-BUYMO;
  FF7REC.XPCCD = "30";
  FF7REC.YPGCD = "01";
  FF7REC.YSMXDV = "10";
  FF7REC.XCTCD = "USA";
  FG0U-1412();

  set FFZREC empty;

  if (FF7REC.FF7CBYFL == "N")
    FFZREC.FFZMONTH = 5;
  else
    FFZREC.FFZMONTH = 6;
  end
  FFZREC.FFZBYYMM = FG0UM001.FG0UM-BRG;
  FFZREC.FFZEYYMM = FG0UM001.FG0UM-ERG;

  XSFFS35(); /* edit date range*/

  if (FFZREC.FFZENDRC == "1")
    set FG0UM001.FG0UM-ERG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "520";
  else
    if (FFZREC.FFZENDRC == "2")
      set FG0UM001.FG0UM-ERG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "520";
    else
      if (FFZREC.FFZENDRC == "3")
        set FG0UM001.FG0UM-ERG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "520";
      end
    end
  end

  if (FFZREC.FFZBEGRC == "1")
    set FG0UM001.FG0UM-BRG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "520";
  else
    if (FFZREC.FFZBEGRC == "2")
      set FG0UM001.FG0UM-BRG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "520";
    else
      if (FFZREC.FFZBEGRC == "3")
        set FG0UM001.FG0UM-BRG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "520";
      end
    end
  end

end // end FG0U-520

// Obtain line code from vffxrf
Function FG0U-521()
  if (FG0UM001.YPGCD != "*"
   && FG0UM001.YPGCD != " ")

    FG0U-5211(); /* obtain line code from vffxrf01*/
    FG0UM001.XPLCD = FF2REC.XPLCD;
    XPLREC.XPLCD = FF2REC.XPLCD;
    if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
      FG0UM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
    end
  else
    if (FG0UM001.YPGCD == "*")
      FG0UM001.YPGCD = "01";
      FG0U-5211(); /* obtain line code from vffxrf01*/
      FG0UM001.XPLCD = FF2REC.XPLCD;
      XPLREC.XPLCD = FF2REC.XPLCD;
      if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
        FG0UM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
      end
      if (FG0UM001.XPLABRV == " ")
        FG0UM001.YPGCD = "02";
        FG0U-5211(); /* obtain line code from vffxrf01*/
        FG0UM001.XPLCD = FF2REC.XPLCD;
        XPLREC.XPLCD = FF2REC.XPLCD;
        if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
          FG0UM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
        end
      end
      FG0UM001.YPGCD = "* ";
    end

  end

end // end FG0U-521

// Select 'S ' vffxrf01
Function FG0U-5211()
   /* ------------------------------------------------------------*/
   /* Select the line code from dfcast.vffxrf01 table*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.YSMXDV = "10"; /* div grp code*/
  FF2REC.YPGCD = FG0UM001.YPGCD; /* product type group*/
  FF2REC.XPCCD = FG0UM001.XPCCD; /* product category group*/

   /* ------------------------------------------------------------*/
   /* select set dfcast.vffxrf01*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
      return;
    end

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "521"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0U-5211

// Process valid input request
Function FG0U-600()

   /* ------------------------------------------------------------*/
   /* indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/

  FG0UW00.FG0UW-SWF = "Y"; /* set format map switch*/

   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA/ffwrec*/
   /* ------------------------------------------------------------*/

  if (FG0UM001.YPGCD != FFWREC.YPGCD
   || FG0UM001.XPCCD != FFWREC.XPCCD
   || FG0UM001.XPLCD != FFWREC.XPLCD
   || FG0UM001.YSMXDV != FFWREC.YSMXDV
   || FFWREC.FFABEGMO != FFZREC.FFZBEGMO
   || FFWREC.FFAENDMO != FFZREC.FFZENDMO)

    FG0UW00.FG0UW-SWR = "Y"; /* request for data switch*/
    FFWREC.YPGCD = FG0UM001.YPGCD; /* type group*/
    FFWREC.YPGABRV = FG0UM001.YPGABRV;
    FFWREC.XPLCD = FG0UM001.XPLCD; /* line*/
    FFWREC.XPLABRV = FG0UM001.XPLABRV;
    FFWREC.XPCCD = FG0UM001.XPCCD; /* category*/
    FFWREC.XPCABRV = FG0UM001.XPCABRV;
    FFWREC.YSMXDV = FG0UM001.YSMXDV; /* division group*/
    FFWREC.YSMSMDSC = FG0UM001.YSMSMDSC;
    FFWREC.FFABEGMO = FFZREC.FFZBEGMO; /* Save converted dates*/
    FFWREC.FFAENDMO = FFZREC.FFZENDMO;

  end

  if (FG0UW00.FG0UW-SWR == "Y") /* KEY DATA MODIFIED*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* if data changed*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)

    FG0U-610();

  end

  if (converseVar.eventKey is pf15)

    FG0U-620();
    FFWREC.FFWMODSW = "N"; /* Data modified switch*/

  end

end // end FG0U-600

// Process ENTER
Function FG0U-610()

  FG0UW00.FG0UW-IDX = 1; /* init index*/
  while (FG0UW00.FG0UW-IDX <= FFZREC.FFZNUMMO)

    if (FG0UM001.FG0UM-ADJ[FG0UW-IDX] != FG0UW01.FG0UW-ADJ[FG0UW-IDX])
      FFWREC.FFWMODSW = "Y"; /* Data modified switch*/
    end

    FG0UW01.FG0UW-ADJ[FG0UW-IDX] = FG0UM001.FG0UM-ADJ[FG0UW-IDX];

    FG0UW00.FG0UW-IDX = FG0UW00.FG0UW-IDX + 1;

  end

end // end FG0U-610

// Process PF15
Function FG0U-620()
   /* ------------------------------------------------------*/
   /* Call sub-routine to find which environment the*/
   /* program is executing in, development or production.*/
   /* ------------------------------------------------------*/

  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/

    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FG0U-621(); /* format production JCL*/
    else
      FG0U-622(); /* format test JCL*/
    end

  else

    FFWREC.XXXMODID = "620"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print rqst*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/

  FFWREC.XXXMODID = "620"; /* Module identification*/
  FFWREC.XXXMSGNO = 76; /* Indicate wrksht fcst saved as master*/

end // end FG0U-620

// Format production JCL
Function FG0U-621()
   /* ------------------------------------------------------------*/
   /* Submit batch subroutine to update the month master tables.*/
   /* ------------------------------------------------------------*/

  set FG0UW02 empty; /* Subroutine parameters*/
  set FG0UW03 empty; /* Subroutine parameters*/

  FG0UW02.YPGCD = FFWREC.YPGCD; /* Product type group*/
  FG0UW03.YPGCD = FFWREC.YPGCD; /* Product type group*/
  FG0UW02.XPLCD = FFWREC.XPLCD; /* Product line*/
  FG0UW03.XPLCD = FFWREC.XPLCD; /* Product line*/
  FG0UW02.XPCCD = FFWREC.XPCCD; /* Product category*/
  FG0UW03.XPCCD = FFWREC.XPCCD; /* Product category*/
  FG0UW03.FG0UW-BEG-CCYYMM = FFWREC.FFABEGMO; /* begin month*/
  FG0UW03.FG0UW-END-CCYYMM = FFWREC.FFAENDMO; /* end month*/
  move FG0UW01.FG0UW-ADJ to FG0UW03.FG0UW-ADJ[1] for all; /* adjust percents*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FG0UT01.TARTYPE[TA6INDEX] == "Q") /* Para statmt*/

      /* ------------------------------------------------------------*/
       /* Format the worksheet numbers in the parameters statement.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FG0UW02.TARJCL; /* Parameters*/

    else
      if (FG0UT01.TARTYPE[TA6INDEX] == "P") /* PARA STATMT*/

        TA6REC.TARJCL[TA6INDEX] = FG0UW03.TARJCL2; /* Parameters*/
      else
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = FG0UT01.TARJCL[TA6INDEX]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FG0UT01.TARTYPE[TA6INDEX]; /* Type*/

      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FG0UT01.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Submit JCL only*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Background Job Subroutine*/

   /* ------------------------------------------------------------*/
   /* If any error, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD >= "2")        /* or unexpected return code*/

    FFWREC.XXXMODID = "621"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/

    exit stack; /* Exit to display map*/

  end

end // end FG0U-621

// Format test JCL
Function FG0U-622()
   /* ------------------------------------------------------------*/
   /* Submit batch subroutine to update the month master tables.*/
   /* ------------------------------------------------------------*/

  set FG0UW02 empty; /* Subroutine parameters*/

  FG0UW02.YPGCD = FFWREC.YPGCD; /* Product type group*/
  FG0UW03.YPGCD = FFWREC.YPGCD; /* Product type group*/
  FG0UW02.XPLCD = FFWREC.XPLCD; /* Product line*/
  FG0UW03.XPLCD = FFWREC.XPLCD; /* Product line*/
  FG0UW02.XPCCD = FFWREC.XPCCD; /* Product category*/
  FG0UW03.XPCCD = FFWREC.XPCCD; /* Product category*/
  FG0UW03.FG0UW-BEG-CCYYMM = FFWREC.FFABEGMO; /* begin month*/
  FG0UW03.FG0UW-END-CCYYMM = FFWREC.FFAENDMO; /* end month*/
  move FG0UW01.FG0UW-ADJ to FG0UW03.FG0UW-ADJ[1] for all; /* adjust percents*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (FG0UT51.TARTYPE[TA6INDEX] == "Q") /* Para statmnt*/

      /* ------------------------------------------------------------*/
       /* Format the worksheet numbers in the parameters statement.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = FG0UW02.TARJCL; /* Parameters*/

    else

      if (FG0UT51.TARTYPE[TA6INDEX] == "P") /* Para statmnt*/

        TA6REC.TARJCL[TA6INDEX] = FG0UW03.TARJCL2; /* Parameters*/
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      else

        TA6REC.TARJCL[TA6INDEX] = FG0UT51.TARJCL[TA6INDEX]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FG0UT51.TARTYPE[TA6INDEX]; /* Type*/

      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (FG0UT51.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Submit JCL only*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Background Job Subroutine*/

   /* ------------------------------------------------------------*/
   /* If any error, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD >= "2")        /* or unexpected return code*/

    FFWREC.XXXMODID = "622"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/

    exit stack; /* Exit to display map*/

  end

end // end FG0U-622

// Open  'S2' vffxrf01 cursor
Function FG0US-01()
   /* ------------------------------------------------------------*/
   /* Select set on dfcast.vffxrf01 table.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* load ff2rec record - dfcast.vffxrf01*/
   /* ------------------------------------------------------------*/

  FF2REC.YSMXDV = "10"; /* div grp code*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* product type group*/

   /* ------------------------------------------------------------*/
   /* select set dfcast.vffxrf01*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S2 ON DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0US-01

// Fetch 'N2' vffxrf01 in csr
Function FG0US-02()
   /* ------------------------------------------------------------*/
   /* fetch dfcast.vffxrf01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      FG0UW00.FG0UW-XRF-SW = "Y";
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N2 DFCAST.VFFXRF01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0US-02

// Close 'C2' vffxrf01 cursor
Function FG0US-03()
   /* ------------------------------------------------------------*/
   /* close dfcast.vffxrf01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "S03"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE S2 DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0US-03

//*** RECORD=FG0UW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FG0UW00 type basicRecord
  10 FG0UW-SWR FG0UW-SWR ; 
  10 FG0UW-SWF FG0UW-SWF ; 
  10 FG0UW-XRF-SW FG0UW-XRF-SW ; 
  10 FG0UW-LIN-TOT FG0UW-LIN-TOT ; 
  10 FG0UW-TYP-TOT FG0UW-TYP-TOT ; 
  10 FG0UW-IDX FG0UW-IDX ; 
  10 * char(1) ; 
  10 FG0UW-WDT FG0UW-WDT ; 
    15 * num(3) ; 
    15 FG0UW-WCC FG0UW-WCC ; 
    15 FG0UW-WYM FG0UW-WYM ; 
      20 FG0UW-WYY FG0UW-WYY ; 
      20 FG0UW-WMM FG0UW-WMM ; 
  10 * char(1) ; 
  10 FG0UW-DT1 FG0UW-DT1 ; 
    15 * num(1) ; 
    15 FG0UW-CYM FG0UW-CYM ; 
      20 FG0UW-CC1 FG0UW-CC1 ; 
      20 FG0UW-YY1 FG0UW-YY1 ; 
      20 FG0UW-MM1 FG0UW-MM1 ; 
    15 FG0UW-DD1 FG0UW-DD1 ; 
  10 * char(1) ; 
  10 FG0UW-WBD FG0UW-WBD ; 
    15 * num(3) ; 
    15 FG0UW-BCC FG0UW-BCC ; 
    15 FG0UW-BYM FG0UW-BYM ; 
      20 FG0UW-BYY FG0UW-BYY ; 
      20 FG0UW-BMM FG0UW-BMM ; 
  10 FG0UW-WED FG0UW-WED ; 
    15 * num(3) ; 
    15 FG0UW-ECC FG0UW-ECC ; 
    15 FG0UW-EYM FG0UW-EYM ; 
      20 FG0UW-EYY FG0UW-EYY ; 
      20 FG0UW-EMM FG0UW-EMM ; 
  10 FG0UW-CRD FG0UW-CRD ; 
  10 * char(3) ; 
  10 FG0UW-BUYMO FG0UW-BUYMO ; 
  10 FG0UW-BUYFLAG FG0UW-BUYFLAG ; 
end // end FG0UW00

//*** RECORD=FG0UW01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// ***********************
Record FG0UW01 type basicRecord
  10 FG0UW-HDG-CCYYMM FG0UW-HDG-CCYYMM [12] ; 
  10 FG0UW-HDG-YYMM FG0UW-HDG-YYMM [12] ; 
  10 FG0UW-MSTR-NUM FG0UW-MSTR-NUM [12] ; 
  10 FG0UW-MSTR-CHA FG0UW-MSTR-CHA [12] ; 
  10 FG0UW-ADJ FG0UW-ADJ [12] ; 
end // end FG0UW01

//*** RECORD=FG0UW02 ****
// ---------------------------------------------------------
// Parameters passed to FF650D - Update Month Master Tables.
// ---------------------------------------------------------
// ***********************
Record FG0UW02 type basicRecord
  5 TARJCL TARJCL ; 
    10 XPCCD XPCCD ; 
    10 YPGCD YPGCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XPLCD XPLCD ; 
    10 * char(57) ; 
end // end FG0UW02

//*** RECORD=FG0UW03 ****
// ---------------------------------------------------------
// Parameters passed to FF650D - Update Month Master Tables.
// ---------------------------------------------------------
// ***********************
Record FG0UW03 type basicRecord
  5 TARJCL2 TARJCL2 ; 
    10 FG0UW-BEG-CCYYMM FG0UW-BEG-CCYYMM ; 
    10 FG0UW-END-CCYYMM FG0UW-END-CCYYMM ; 
    10 YPGCD YPGCD ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 FG0UW-ADJ FG0UW-ADJ [12] ; 
end // end FG0UW03

// adjusted percent
DataItem FG0UW-ADJ num(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// begin century
DataItem FG0UW-BCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning month of the range
DataItem FG0UW-BEG-CCYYMM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range month
DataItem FG0UW-BMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0UW-BUYFLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Month headings ccyymm
DataItem FG0UW-BUYMO num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year and month
DataItem FG0UW-BYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range year
DataItem FG0UW-BYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work century
DataItem FG0UW-CC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date
DataItem FG0UW-CRD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current work ccyymm
DataItem FG0UW-CYM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work day
DataItem FG0UW-DD1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date
DataItem FG0UW-DT1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// end century
DataItem FG0UW-ECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range month
DataItem FG0UW-EMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending month of the range
DataItem FG0UW-END-CCYYMM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end year and month
DataItem FG0UW-EYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range year
DataItem FG0UW-EYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Month headings ccyymm
DataItem FG0UW-HDG-CCYYMM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Month headings yym
DataItem FG0UW-HDG-YYMM char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index
DataItem FG0UW-IDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Line total
DataItem FG0UW-LIN-TOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work month
DataItem FG0UW-MM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Master fcst qty in thousands
DataItem FG0UW-MSTR-CHA char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Master forecast quantity
DataItem FG0UW-MSTR-NUM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Format the map switch
DataItem FG0UW-SWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FG0UW-SWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Type group total
DataItem FG0UW-TYP-TOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work begin date
DataItem FG0UW-WBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work century
DataItem FG0UW-WCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date
DataItem FG0UW-WDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work begin date
DataItem FG0UW-WED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work month
DataItem FG0UW-WMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year and month
DataItem FG0UW-WYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FG0UW-WYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// VFFXRF01 eof switch
DataItem FG0UW-XRF-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work year
DataItem FG0UW-YY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TARJCL2 char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

