package fg0w;

import corpcom1.CACHGFL;
import corpcom2.XPCREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPFF001;
import corpcom3.XPXPC01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS01;
import corpcom4.XSFFS10;
import corpcom4.XSFFS30;
import corpcom4.XSFFS35;
import corpcom4.XSFFS50;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XPCTBL;
import corpy2.YPGTBL;
import ff.common.*;
import fh.common.FH3REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=FG0W ****
// This application provides the user with the ability to
// create a futr dmnd index by referring to the historical
// data or the user can pick a specific historical futr dmnd
// index(1 year ago, 2 year ago, or 3 years ago) for a given
// range and specific category.
// 
// The futr dmnd idx is the percentage of the monthly futr dmnd
// quantity over the total futr dmnd quantity of the required
// range.
// 
// If the requested historical range is before the current
// month, then the actual futr dmnd qty will be shown.  If it
// is between the current month and current plus 5 months, the
// qty could be actual or forecasted.  If if is after the
// current plus 5 months the forecasted qty will be used.
// 
// The monthly quantities and indices will be displayed.
// If the user created indices didn't add up to 100, then
// the variance will be shown on the top of the screen.  The
// quantites are all in thousand.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from either of the screens.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          02/23/90  rgilli  New application.
// FF1016   07/31/90  JJUCH   Disallowed to fcst current main
//                            buy month and all prior months.
// FH140    02/24/94  JJUCH   Change to use authorized futr dmd
//                            for the actual months.
// FF175    12/12/96  DSMITH  Regenerated for year 2000.
//          05/13/99  CWHITE  put 0 fill in date field
// *********************
Program FG0W type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF1REC FF1REC; // record
  FF7REC FF7REC; // record
  FFCREC FFCREC; // record
  FFDREC FFDREC; // record
  FFFREC FFFREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  FG0WW00 FG0WW00; // record
  FG0WW01 FG0WW01; // record
  FH3REC FH3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPCTBL; // table
  use YPGTBL; // table
  use FG0WM.FG0WM001, // form
  		FG0WM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FFFREC empty;
    set FG0WM001 initial; /* M001 input/output*/
    set FG0WW00 empty; /* Working storage*/
    set FG0WW01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine work area*/
    set TA5REC empty; /* temp storage queue area*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FG0WW00.FG0WWSWR = "N"; /* Request for data switch*/
    FG0WW00.FG0WWSWF = "Y"; /* format screen data switch*/

     /* ---------------------------------------------------*/
     /* Clear unused fields*/
     /* ---------------------------------------------------*/

    FFWREC.XPLCD = " "; /* Clear product line code*/
    FFWREC.XPLABRV = " "; /* Clear product line abrv*/
    FFWREC.SYBSTGNB = " "; /* Clear style group number*/
    FFWREC.SYBSTGNM = " "; /* Clear style group name*/
    FFWREC.SY1STNBR = " "; /* Clear style number*/
    FFWREC.SY2CLRID = " "; /* Clear color id*/
    FFWREC.XDMCD = " "; /* Clear dimension code*/
    FFWREC.SY1SSTNM = " "; /* Clear short style name*/
    FFWREC.SY2CLRAB = " "; /* Clear color abrv*/
    FFWREC.XDMABRV = " "; /* Clear dimension abrv*/
    FFWREC.ZRGCD = " "; /* Clear region code*/
    FFWREC.ZRGABRV = " "; /* Clear region abrv*/
    FFWREC.XCTCD = " "; /* Clear country code*/
    FFWREC.XCTABRV = " "; /* Clear country abrv*/

     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/

     /* ------------------------------------------------------------*/
     /* product type group*/
     /* ------------------------------------------------------------*/

    if (FFWREC.YPGCD == " ")
      FFWREC.YPGCD = "01";
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end

     /* ------------------------------------------------------------*/
     /* determine if data is to be loaded*/
     /* ------------------------------------------------------------*/

    if (FFWREC.FFABEGMO != 0
     && FFWREC.FFAENDMO != 0
     && FFWREC.XPCCD != " ")
      FFZREC.FFZBEGMO = FFWREC.FFABEGMO;
      FFZREC.FFZENDMO = FFWREC.FFAENDMO;
      FG0WW00.FG0WWSWR = "Y"; /* set data request flag*/
    end

     /* ------------------------------------------------------------*/
     /* Flow to first time through date validation*/
     /* ------------------------------------------------------------*/

    goto FG0W001; /* Converse the main process*/

    FG0W001: FG0W001();
     /* ------------------------------------------------------------*/
     /* flow to converse the main process used to display a map*/
     /* ------------------------------------------------------------*/

    goto FG0W001; /* converse the main process*/

  end // end main
end // end FG0W

// maint. historical futr dmd idx
Function FG0W001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FG0W100(); /* Obtain the data to display*/

  FG0W200(); /* Format and display the map*/

  FG0W300(); /* Check attention identifier*/

  FG0W400(); /* Reset fields to normal intensity*/

  FG0W500(); /* Verify the entered data*/

  FG0W600(); /* Process valid input request*/


end // end FG0W001

// obtain data for display
Function FG0W100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FG0WW00.FG0WWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* init working storage*/
   /* ------------------------------------------------------------*/

  set FG0WW01 empty; /* init w/s*/

   /* ------------------------------------------------------------*/
   /* obtain current date using routine xx0xs01, calculate*/
   /* current date plus five mos*/
   /* ------------------------------------------------------------*/
   /* ------------------------*/
   /* get current date*/
   /* ------------------------*/

  XX0XS01();

  FG0WW00.FG0WWCRD = XX0XW01.XX0XWCYM; /* current date ccyymm*/
  FG0WW00.FG0WWWDT = XX0XW01.XX0XWCYM; /* work date*/

  FG0WW00.FG0WWWMM = FG0WW00.FG0WWWMM + 5;
  if (FG0WW00.FG0WWWMM > 12)
    FG0WW00.FG0WWWMM = FG0WW00.FG0WWWMM - 12;
    if (FG0WW00.FG0WWWYY == 99)
      FG0WW00.FG0WWWCC = FG0WW00.FG0WWWCC + 1;
      FG0WW00.FG0WWWYY = 0;
    else
      FG0WW00.FG0WWWYY = FG0WW00.FG0WWWYY + 1;
    end
  end
  FG0WW00.FG0WWCD5 = FG0WW00.FG0WWWDT; /* current date plus 5 months*/

   /* ------------------------------------------------------------*/
   /* calculate "user created" heading date range (12 months)*/
   /* ------------------------------------------------------------*/

  FG0WW00.FG0WWWBD = FFWREC.FFABEGMO; /* user requested begin range*/
  FG0WW00.FG0WWWED = FFWREC.FFABEGMO; /* begin range + 11 months*/

  FG0WW00.FG0WWEMM = FG0WW00.FG0WWEMM + 11;
  if (FG0WW00.FG0WWEMM > 12)
    FG0WW00.FG0WWEMM = FG0WW00.FG0WWEMM - 12;
    if (FG0WW00.FG0WWEYY == 99)
      FG0WW00.FG0WWECC = FG0WW00.FG0WWECC + 1;
      FG0WW00.FG0WWEYY = 0;
    else
      FG0WW00.FG0WWEYY = FG0WW00.FG0WWEYY + 1;
    end
  end
  FG0WW01.FG0WWHBD[4] = FG0WW00.FG0WWWBD; /* beg date*/
  FG0WW01.FG0WWHED[4] = FG0WW00.FG0WWWED; /* end date*/

   /* ------------------------------------------------------------*/
   /* calculate "historical" heading date ranges (12 months)*/
   /* ------------------------------------------------------------*/

  FG0WW00.FG0WWIDX = 1; /* init index*/
  while (FG0WW00.FG0WWIDX <= 3) /* calculate historical date ranges*/

    if (FG0WW00.FG0WWBYY == 00)
      FG0WW00.FG0WWBYY = 99;
      FG0WW00.FG0WWBCC = FG0WW00.FG0WWBCC - 1;
    else
      FG0WW00.FG0WWBYY = FG0WW00.FG0WWBYY - 1;
    end
    FG0WW01.FG0WWHBD[FG0WWIDX] = FG0WW00.FG0WWWBD; /* prior beg date*/

    if (FG0WW00.FG0WWEYY == 00)
      FG0WW00.FG0WWEYY = 99;
      FG0WW00.FG0WWECC = FG0WW00.FG0WWECC - 1;
    else
      FG0WW00.FG0WWEYY = FG0WW00.FG0WWEYY - 1;
    end
    FG0WW01.FG0WWHED[FG0WWIDX] = FG0WW00.FG0WWWED; /* prior end date*/

    FG0WW00.FG0WWIDX = FG0WW00.FG0WWIDX + 1;

  end

   /* ------------------------------------------------------------*/
   /* calculate historical date ranges using the begining and*/
   /* end range specified by the user*/
   /* ------------------------------------------------------------*/

  FG0WW00.FG0WWWBD = FFWREC.FFABEGMO; /* user requested begin range*/
  FG0WW00.FG0WWWED = FFWREC.FFAENDMO; /* user requested end range*/

  FG0WW00.FG0WWIDX = 1; /* init index*/
  while (FG0WW00.FG0WWIDX <= 3) /* calculate historical date ranges*/

    if (FG0WW00.FG0WWBYY == 00)
      FG0WW00.FG0WWBYY = 99;
      FG0WW00.FG0WWBCC = FG0WW00.FG0WWBCC - 1;
    else
      FG0WW00.FG0WWBYY = FG0WW00.FG0WWBYY - 1;
    end
    FG0WW01.FG0WWPBD[FG0WWIDX] = FG0WW00.FG0WWWBD; /* prior beg date*/

    if (FG0WW00.FG0WWEYY == 00)
      FG0WW00.FG0WWEYY = 99;
      FG0WW00.FG0WWECC = FG0WW00.FG0WWECC - 1;
    else
      FG0WW00.FG0WWEYY = FG0WW00.FG0WWEYY - 1;
    end
    FG0WW01.FG0WWPED[FG0WWIDX] = FG0WW00.FG0WWWED; /* prior end date*/

    FG0WW00.FG0WWIDX = FG0WW00.FG0WWIDX + 1;

  end

   /* ------------------------------------------------------------*/
   /* save user requested date range returned from xsffs30*/
   /* ------------------------------------------------------------*/

  FG0WW00.FG0WWWBD = FFZREC.FFZBEGMO;
  FG0WW00.FG0WWWED = FFZREC.FFZENDMO;

   /* ------------------------------------------------------------*/
   /* obtain monthly headings and quantities for user created*/
   /* data*/
   /* ------------------------------------------------------------*/

  set FFZREC empty;

  FFZREC.FFZBYYMM = FG0WW01.FG0WWHBY[4]; /* begin date range*/
  FFZREC.FFZEYYMM = FG0WW01.FG0WWHEY[4]; /* end date range*/

  FG0W110(); /* get months within range*/

  FG0WW00.FG0WWIDX = 1; /* init index*/
  while (FG0WW00.FG0WWIDX <= FFZREC.FFZNUMMO) /* process all months in range*/

    FG0WW01.FG0WWHD4[FG0WWIDX] = FFZREC.FFZINDMO[FG0WWIDX];

    FG0WW00.FG0WWIDX = FG0WW00.FG0WWIDX + 1;
  end

   /* ------------------------------------------------------------*/
   /* verify dfcast.vrcat001 exists and if the future dmnd*/
   /* indicator equals 'u' (user created), if so,  select all*/
   /* dfcast.vrcmth01 for the user requested date range.*/
   /* ------------------------------------------------------------*/

  set FFCREC empty;

  FFCREC.FFABEGMO = FFWREC.FFABEGMO;
  FFCREC.FFAENDMO = FFWREC.FFAENDMO;

  FG0WS01(); /* select dfcast.vrcat001*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (FFCREC.FFCFDIND == "1") /* history 1 yr ago*/
      FG0WW01.FG0WWSEL[1] = "S"; /* user created selection field*/
    end
    if (FFCREC.FFCFDIND == "2") /* history 2 yr ago*/
      FG0WW01.FG0WWSEL[2] = "S"; /* user created selection field*/
    end
    if (FFCREC.FFCFDIND == "3") /* history 3 yr ago*/
      FG0WW01.FG0WWSEL[3] = "S"; /* user created selection field*/
    end
    if (FFCREC.FFCFDIND == "U") /* user created*/

      FG0WW01.FG0WWSEL[4] = "S"; /* user created selection field*/

      set FFDREC empty;

      FFFREC.FFFBEGMO = FFWREC.FFABEGMO;
      FFFREC.FFFENDMO = FFWREC.FFAENDMO;

      FFDREC.FFABEGMO = FFWREC.FFABEGMO;
      FFDREC.FFAENDMO = FFWREC.FFAENDMO;

      FG0WS02(); /* select 's1' dfcast.vrcmth01*/
      FG0WS03(); /* fetch 'n1' dfcast.vrcmth01*/

      FG0WW00.FG0WWIDX = 1; /* init index*/
      while (SQLCA.VAGen_SQLCODE == 0) /* process all dfcast.vrcmth01*/

        FG0WW01.FG0WWIX4[FG0WWIDX] = mathLib.round(FFDREC.FFDFDPCT + 0, -mathLib.decimals(FG0WW01.FG0WWIX4[FG0WWIDX]));

        FG0WS03(); /* fetch 'n1' dfcast.vrcmth01*/

        FG0WW00.FG0WWIDX = FG0WW00.FG0WWIDX + 1;

      end

      FG0WS04(); /* close 'c1' dfcast.vrcmth01*/

    end
  end

   /* ------------------------------------------------------------*/
   /* obtain monthly headings and quantities for historical*/
   /* data 1 year ago*/
   /* ------------------------------------------------------------*/

  set FFZREC empty;

  FFZREC.FFZBYYMM = FG0WW01.FG0WWHBY[1]; /* beg date 1 yr ago*/
  FFZREC.FFZEYYMM = FG0WW01.FG0WWHEY[1]; /* end date 1 yr ago*/

  FG0W110(); /* get months within range*/

  FG0WW00.FG0WWUTQ = 0; /* init total quantity*/
  FG0WW00.FG0WWIDX = 1; /* init index*/
  while (FG0WW00.FG0WWIDX <= FFZREC.FFZNUMMO) /* process all months in range*/

    FG0WW01.FG0WWHD1[FG0WWIDX] = FFZREC.FFZINDMO[FG0WWIDX];

    /* ------------------------------------------------------------*/
     /* obtain actual/forecast sale qtys*/
    /* ------------------------------------------------------------*/

    if (FFZREC.FFZINDMO[FG0WWIDX] <= FG0WW01.FG0WWPED[1])

      FG0W120();

      /* ---------------------------------------------------*/
       /* translate/load historical monthly quantity*/
      /* ---------------------------------------------------*/

      FG0WW01.FG0WWUQ1[FG0WWIDX] = FG0WW00.FG0WWUHD;
      FFXREC.FFXNUMB = FG0WW00.FG0WWUHD;
      XSFFS10();
      FG0WW01.FG0WWQT1[FG0WWIDX] = FFXREC.FFXCHAR;

      /* ---------------------------------------------------*/
       /* accumulate historical total quantity*/
      /* ---------------------------------------------------*/

      FG0WW00.FG0WWUTQ = FG0WW00.FG0WWUHD + FG0WW00.FG0WWUTQ;

    end

    FG0WW00.FG0WWIDX = FG0WW00.FG0WWIDX + 1;

  end

   /* ---------------------------------------------------*/
   /* translate/load historical quantity total*/
   /* ---------------------------------------------------*/

  FG0WW01.FG0WWUQ1[FG0WWIDX] = FG0WW00.FG0WWUTQ;
  FFXREC.FFXNUMB = FG0WW00.FG0WWUTQ;
  XSFFS10();
  FG0WW01.FG0WWQT1[FG0WWIDX] = FFXREC.FFXCHAR;

   /* ------------------------------------------------------------*/
   /* calculate historical monthly percents*/
   /* ------------------------------------------------------------*/

  if (FG0WW01.FG0WWUQ1[FG0WWIDX] != 0) /* (total qty entry)*/

    FG0WW00.FG0WWNM1 = FG0WW01.FG0WWUQ1[FG0WWIDX];
    FG0WW00.FG0WWIDX = 1;
    while (FG0WW00.FG0WWIDX <= FFZREC.FFZNUMMO) /* nbr months loaded*/

      FG0WW00.FG0WWNM2 = FG0WW01.FG0WWUQ1[FG0WWIDX] * 100;
      FG0WW01.FG0WWIX1[FG0WWIDX] = mathLib.round(FG0WW00.FG0WWNM2 / FG0WW00.FG0WWNM1, -mathLib.decimals(FG0WW01.FG0WWIX1[FG0WWIDX]));

      FG0WW00.FG0WWIDX = FG0WW00.FG0WWIDX + 1;

    end
  end

   /* ------------------------------------------------------------*/
   /* obtain monthly headings and quantities for historical*/
   /* data 2 years ago*/
   /* ------------------------------------------------------------*/

  set FFZREC empty;

  FFZREC.FFZBYYMM = FG0WW01.FG0WWHBY[2]; /* beg date 2 yr ago*/
  FFZREC.FFZEYYMM = FG0WW01.FG0WWHEY[2]; /* end date 2 yr ago*/

  FG0W110(); /* get months within range*/

  FG0WW00.FG0WWUTQ = 0; /* init total quantity*/
  FG0WW00.FG0WWIDX = 1; /* init index*/
  while (FG0WW00.FG0WWIDX <= FFZREC.FFZNUMMO) /* process all month in range*/

    FG0WW01.FG0WWHD2[FG0WWIDX] = FFZREC.FFZINDMO[FG0WWIDX];

    /* ------------------------------------------------------------*/
     /* obtain actual/forecast sale qtys*/
    /* ------------------------------------------------------------*/

    if (FFZREC.FFZINDMO[FG0WWIDX] <= FG0WW01.FG0WWPED[2])

      FG0W120();

      /* ---------------------------------------------------*/
       /* translate/load historical monthly quantity*/
      /* ---------------------------------------------------*/

      FG0WW01.FG0WWUQ2[FG0WWIDX] = FG0WW00.FG0WWUHD;
      FFXREC.FFXNUMB = FG0WW00.FG0WWUHD;
      XSFFS10();
      FG0WW01.FG0WWQT2[FG0WWIDX] = FFXREC.FFXCHAR;

      /* ---------------------------------------------------*/
       /* accumulate historical total quantity*/
      /* ---------------------------------------------------*/

      FG0WW00.FG0WWUTQ = FG0WW00.FG0WWUHD + FG0WW00.FG0WWUTQ;

    end

    FG0WW00.FG0WWIDX = FG0WW00.FG0WWIDX + 1;

  end

   /* ---------------------------------------------------*/
   /* translate/load historical quantity total*/
   /* ---------------------------------------------------*/

  FG0WW01.FG0WWUQ2[FG0WWIDX] = FG0WW00.FG0WWUTQ;
  FFXREC.FFXNUMB = FG0WW00.FG0WWUTQ;
  XSFFS10();
  FG0WW01.FG0WWQT2[FG0WWIDX] = FFXREC.FFXCHAR;

   /* ------------------------------------------------------------*/
   /* calculate historical monthly percents*/
   /* ------------------------------------------------------------*/

  if (FG0WW01.FG0WWUQ2[FG0WWIDX] != 0) /* (total qty entry)*/

    FG0WW00.FG0WWNM1 = FG0WW01.FG0WWUQ2[FG0WWIDX];
    FG0WW00.FG0WWIDX = 1;
    while (FG0WW00.FG0WWIDX <= FFZREC.FFZNUMMO) /* nbr months loaded*/

      FG0WW00.FG0WWNM2 = FG0WW01.FG0WWUQ2[FG0WWIDX] * 100;
      FG0WW01.FG0WWIX2[FG0WWIDX] = mathLib.round(FG0WW00.FG0WWNM2 / FG0WW00.FG0WWNM1, -mathLib.decimals(FG0WW01.FG0WWIX2[FG0WWIDX]));

      FG0WW00.FG0WWIDX = FG0WW00.FG0WWIDX + 1;

    end
  end

   /* ------------------------------------------------------------*/
   /* obtain monthly headings and quantities for historical*/
   /* data 3 years ago*/
   /* ------------------------------------------------------------*/

  set FFZREC empty;

  FFZREC.FFZBYYMM = FG0WW01.FG0WWHBY[3]; /* beg date 3 yr ago*/
  FFZREC.FFZEYYMM = FG0WW01.FG0WWHEY[3]; /* end date 3 yr ago*/

  FG0W110(); /* get months within range*/

  FG0WW00.FG0WWUTQ = 0; /* init total quantity*/
  FG0WW00.FG0WWIDX = 1; /* init index*/
  while (FG0WW00.FG0WWIDX <= FFZREC.FFZNUMMO) /* process all month in range*/

    FG0WW01.FG0WWHD3[FG0WWIDX] = FFZREC.FFZINDMO[FG0WWIDX];

    /* ------------------------------------------------------------*/
     /* obtain actual/forecast sale qtys*/
    /* ------------------------------------------------------------*/

    if (FFZREC.FFZINDMO[FG0WWIDX] <= FG0WW01.FG0WWPED[3])

      FG0W120();

      /* ---------------------------------------------------*/
       /* translate/load historical monthly quantity*/
      /* ---------------------------------------------------*/

      FG0WW01.FG0WWUQ3[FG0WWIDX] = FG0WW00.FG0WWUHD;
      FFXREC.FFXNUMB = FG0WW00.FG0WWUHD;
      XSFFS10();
      FG0WW01.FG0WWQT3[FG0WWIDX] = FFXREC.FFXCHAR;

      /* ---------------------------------------------------*/
       /* accumulate historical total quantity*/
      /* ---------------------------------------------------*/

      FG0WW00.FG0WWUTQ = FG0WW00.FG0WWUHD + FG0WW00.FG0WWUTQ;

    end

    FG0WW00.FG0WWIDX = FG0WW00.FG0WWIDX + 1;

  end

   /* ---------------------------------------------------*/
   /* translate/load historical quantity total*/
   /* ---------------------------------------------------*/

  FG0WW01.FG0WWUQ3[FG0WWIDX] = FG0WW00.FG0WWUTQ;
  FFXREC.FFXNUMB = FG0WW00.FG0WWUTQ;
  XSFFS10();
  FG0WW01.FG0WWQT3[FG0WWIDX] = FFXREC.FFXCHAR;

   /* ------------------------------------------------------------*/
   /* calculate historical monthly percents*/
   /* ------------------------------------------------------------*/

  if (FG0WW01.FG0WWUQ3[FG0WWIDX] != 0) /* (total qty entry)*/

    FG0WW00.FG0WWNM1 = FG0WW01.FG0WWUQ3[FG0WWIDX];
    FG0WW00.FG0WWIDX = 1;
    while (FG0WW00.FG0WWIDX <= FFZREC.FFZNUMMO) /* nbr months loaded*/

      FG0WW00.FG0WWNM2 = FG0WW01.FG0WWUQ3[FG0WWIDX] * 100;
      FG0WW01.FG0WWIX3[FG0WWIDX] = mathLib.round(FG0WW00.FG0WWNM2 / FG0WW00.FG0WWNM1, -mathLib.decimals(FG0WW01.FG0WWIX3[FG0WWIDX]));

      FG0WW00.FG0WWIDX = FG0WW00.FG0WWIDX + 1;

    end
  end

   /* ------------------------------------------------------------*/
   /* reload user requested date range*/
   /* ------------------------------------------------------------*/

  FFZREC.FFZBEGMO = FG0WW00.FG0WWWBD;
  FFZREC.FFZENDMO = FG0WW00.FG0WWWED;

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FG0WW01.CACHGFL = "Y"; /* data loaded*/
  FG0WW00.FG0WWSWR = "N"; /* Request for data switch*/


end // end FG0W100

// obtain mthly headings xsffs30
Function FG0W110()

   /* ------------------------------------------------------------*/
   /* get all months within requested date range*/
   /* ------------------------------------------------------------*/

  FFZREC.FFZMONTH = 1;
  FFZREC.FFZSRANG = "Y";

  XSFFS30();

  if (FFZREC.FFZENDRC == "1")
    set FG0WM001.FG0WMERG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "110";
  else
    if (FFZREC.FFZENDRC == "2")
      set FG0WM001.FG0WMERG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "110";
    else
      if (FFZREC.FFZENDRC == "3")
        set FG0WM001.FG0WMERG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "110";
      end
    end
  end

  if (FFZREC.FFZBEGRC == "1")
    set FG0WM001.FG0WMBRG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "110";
  else
    if (FFZREC.FFZBEGRC == "2")
      set FG0WM001.FG0WMBRG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "110";
    else
      if (FFZREC.FFZBEGRC == "3")
        set FG0WM001.FG0WMBRG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "110";
      end
    end
  end


end // end FG0W110

// obtain act/fcst futr dmnd qtys
Function FG0W120()

   /* ------------------------------------------------------------*/
   /* determine if actual/forecast future dmnd qtys are to be*/
   /* obtained*/
   /* ------------------------------------------------------------*/

  FG0WW00.FG0WWUHD = 0;

  if (FFZREC.FFZINDMO[FG0WWIDX] < FG0WW00.FG0WWCRD) /* get actuals*/
    FG0WS05();
  else
    if (FFZREC.FFZINDMO[FG0WWIDX] >= FG0WW00.FG0WWCRD) /* get fcst*/
      FG0WS06(); /* select dfcast.vmcat001 row*/
      if (FFZREC.FFZINDMO[FG0WWIDX] <= FG0WW00.FG0WWCD5) /* cur dt + 5 mo*/
        FG0WW00.FG0WWUHD = FF7REC.FF7FUDMD;
      else
        if (FF7REC.FF7FLLRT != 0)
          FG0WW00.FG0WWUHD = FF7REC.FF6SLFCT * 100 / FF7REC.FF7FLLRT;
          FG0WW00.FG0WWUHD = mathLib.round(FG0WW00.FG0WWUHD * FF7REC.FF7FURAT / 100, -mathLib.decimals(FG0WW00.FG0WWUHD));
        end
      end
    end
  end


end // end FG0W120

// Format and converse the map
Function FG0W200()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* if no errors format map*/

    /* ------------------------------------------------------------*/
     /* format screen*/
    /* ------------------------------------------------------------*/

    if (FG0WW00.FG0WWSWF == "Y") /* map must be formatted*/
      FG0W210(); /* Format the data on the map*/
    end

  else
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* load message number*/

  end

  FG0WM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FG0WM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG0WM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* error message number*/
    FG0WM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    set FG0WM001 alarm; /* Indicate sound alarm*/
  end

  converse FG0WM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0;

  COMMAREA.CATOAP = FG0WM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG0WM001.CAITEM; /* Application data*/


end // end FG0W200

// Format the display data
Function FG0W210()

   /* ------------------------------------------------------------*/
   /* init map fg0wm001*/
   /* ------------------------------------------------------------*/

  set FG0WM001 initial; /* m001 input/ouput area*/

  FG0WW00.FG0WWSWF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* Format fg0wm001 using passed data*/
   /* ------------------------------------------------------------*/

  FG0WW00.FG0WWWDT = FFWREC.FFABEGMO; /* w/s date field*/
  FG0WM001.FG0WMBRG = FG0WW00.FG0WWWYM; /* begin month range*/
  FG0WW00.FG0WWWDT = FFWREC.FFAENDMO; /* w/s date field*/
  FG0WM001.FG0WMERG = FG0WW00.FG0WWWYM; /* end month range*/

  FG0WM001.YPGCD = FFWREC.YPGCD; /* product type group*/
  FG0WM001.YPGABRV = FFWREC.YPGABRV; /* product type group abrv*/

  FG0WM001.XPCCD = FFWREC.XPCCD; /* category code*/
  FG0WM001.XPCABRV = FFWREC.XPCABRV; /* category code abrv*/

  if (FG0WW01.CACHGFL != "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* load monthly headings/index/quantities/total for*/
   /* historical data 1 year ago*/
   /* ------------------------------------------------------------*/

  FG0WW00.FG0WWIDX = 1;
  while (FG0WW00.FG0WWIDX <= 12) /* nbr of mos loaded*/

    FG0WM001.FG0WMHD1[FG0WWIDX] = FG0WW01.FG0WWDH1[FG0WWIDX];
    FG0WM001.FG0WMIX1[FG0WWIDX] = FG0WW01.FG0WWIX1[FG0WWIDX];
    FG0WM001.FG0WMQT1[FG0WWIDX] = FG0WW01.FG0WWQT1[FG0WWIDX];

    FG0WW00.FG0WWIDX = FG0WW00.FG0WWIDX + 1; /* increment index*/

  end

  FG0WM001.FG0WMTOT[1] = FG0WW01.FG0WWQT1[FG0WWIDX];
  FG0WM001.FG0WMSEL[1] = FG0WW01.FG0WWSEL[1];
  set FG0WM001.FG0WMSEL[1] cursor, normal;

   /* ------------------------------------------------------------*/
   /* load monthly headings/index/quantities/total for*/
   /* historical data 2 year ago*/
   /* ------------------------------------------------------------*/

  FG0WW00.FG0WWIDX = 1;
  while (FG0WW00.FG0WWIDX <= 12) /* nbr of mos loaded*/

    FG0WM001.FG0WMHD2[FG0WWIDX] = FG0WW01.FG0WWDH2[FG0WWIDX];
    FG0WM001.FG0WMIX2[FG0WWIDX] = FG0WW01.FG0WWIX2[FG0WWIDX];
    FG0WM001.FG0WMQT2[FG0WWIDX] = FG0WW01.FG0WWQT2[FG0WWIDX];

    FG0WW00.FG0WWIDX = FG0WW00.FG0WWIDX + 1; /* increment index*/

  end

  FG0WM001.FG0WMTOT[2] = FG0WW01.FG0WWQT2[FG0WWIDX];
  FG0WM001.FG0WMSEL[2] = FG0WW01.FG0WWSEL[2];
  set FG0WM001.FG0WMSEL[2] normal;
  if (FG0WW01.FG0WWSEL[2] == "S")
    set FG0WM001.FG0WMSEL[2] cursor, normal;
  end

   /* ------------------------------------------------------------*/
   /* load monthly headings/index/quantities/total for*/
   /* historical data 3 year ago*/
   /* ------------------------------------------------------------*/

  FG0WW00.FG0WWIDX = 1;
  while (FG0WW00.FG0WWIDX <= 12) /* nbr of mos loaded*/

    FG0WM001.FG0WMHD3[FG0WWIDX] = FG0WW01.FG0WWDH3[FG0WWIDX];
    FG0WM001.FG0WMIX3[FG0WWIDX] = FG0WW01.FG0WWIX3[FG0WWIDX];
    FG0WM001.FG0WMQT3[FG0WWIDX] = FG0WW01.FG0WWQT3[FG0WWIDX];

    FG0WW00.FG0WWIDX = FG0WW00.FG0WWIDX + 1; /* increment index*/

  end

  FG0WM001.FG0WMTOT[3] = FG0WW01.FG0WWQT3[FG0WWIDX];
  FG0WM001.FG0WMSEL[3] = FG0WW01.FG0WWSEL[3];
  set FG0WM001.FG0WMSEL[3] normal;
  if (FG0WW01.FG0WWSEL[3] == "S")
    set FG0WM001.FG0WMSEL[3] cursor, normal;
  end

   /* ------------------------------------------------------------*/
   /* load monthly headings/index for user created data*/
   /* ------------------------------------------------------------*/

  FG0WW00.FG0WWIDX = 1;
  while (FG0WW00.FG0WWIDX <= 12) /* load monthly headings*/

    FG0WM001.FG0WMHD4[FG0WWIDX] = FG0WW01.FG0WWDH4[FG0WWIDX];

    FG0WW00.FG0WWIDX = FG0WW00.FG0WWIDX + 1; /* increment index*/

  end

   /* ------------------------------------------------------------*/
   /* if dfcast.vrcmth01 data has been loaded only allow the user*/
   /* to update existing data, if not, allow the user to add up*/
   /* to 12 indexs.*/
   /* ------------------------------------------------------------*/

  FG0WW00.FG0WWIDX = 1; /* init index*/
  while (FG0WW00.FG0WWIDX <= 12
   && FG0WW01.FG0WWHD4[FG0WWIDX] <= FFWREC.FFAENDMO)

    FG0WM001.FG0WMIX4[FG0WWIDX] = FG0WW01.FG0WWIX4[FG0WWIDX];
    set FG0WM001.FG0WMIX4[FG0WWIDX] normal;

    FG0WW00.FG0WWIDX = FG0WW00.FG0WWIDX + 1; /* increment index*/

  end

  FG0WM001.FG0WMSEL[4] = FG0WW01.FG0WWSEL[4];
  set FG0WM001.FG0WMSEL[4] normal;
  if (FG0WW01.FG0WWSEL[4] == "S")
    set FG0WM001.FG0WMSEL[4] cursor, normal;
  end


end // end FG0W210

// Check attention identifier
Function FG0W300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* refresh map*/

    FG0WW00.FG0WWSWF = "Y"; /* format screen m001*/
    FG0WW00.FG0WWSWR = "N"; /* request for data*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FG0WM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSFFS01(); /* Exit to another application*/

      FG0WW00.FG0WWSWF = "Y"; /* format screen m001*/
      FG0WW00.FG0WWSWR = "N"; /* request for data*/

      set FG0WM001.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG0WM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FG0A"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    FG0WW00.FG0WWSWF = "Y"; /* format screen m001*/
    FG0WW00.FG0WWSWR = "N"; /* request for data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf13) /* pf13 was not pressed*/

    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FG0W300

// Reset highlighted fields
Function FG0W400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FG0WM001.FG0WMBRG initialAttributes; /* begin range*/
  set FG0WM001.FG0WMERG initialAttributes; /* end range*/
  set FG0WM001.XPCCD initialAttributes; /* category code*/
  set FG0WM001.YPGCD initialAttributes; /* product type group*/

  if (FG0WW01.CACHGFL == "Y")

    set FG0WM001.FG0WMSEL[1] normal;
    set FG0WM001.FG0WMSEL[2] normal;
    set FG0WM001.FG0WMSEL[3] normal;
    set FG0WM001.FG0WMSEL[4] normal;

    FG0WW00.FG0WWIDX = 1;
    while (FG0WW00.FG0WWIDX <= 12
     && FG0WW01.FG0WWHD4[FG0WWIDX] <= FFWREC.FFAENDMO)

      set FG0WM001.FG0WMIX4[FG0WWIDX] normal;

      FG0WW00.FG0WWIDX = FG0WW00.FG0WWIDX + 1;

    end
  end

  set FG0WM001.CATOAP initialAttributes;
  set FG0WM001.CAITEM initialAttributes;

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FG0WM001.XPCCD == "?" /* categroy code*/
   || FG0WM001.YPGCD == "?") /* product type group*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes*/
   /* ------------------------------------------------------------*/

  if (FG0WM001.XPCCD == "?") /* product category list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "CATEGORY CODES "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FG0WM001.XPCCD = FFWREC.XPCCD; /* product category*/
      XPCREC.XPCCD = FFWREC.XPCCD; /* product category*/
      XPCREC.XGPCD = COMMAREA.XGPCD; /* gpc code*/
      if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
        FG0WM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
      end
    else
      FG0WM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FG0WM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Selected code*/

    end

    set FG0WM001.XPCCD cursor; /* Establish cursor position*/

  end
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type group codes*/
   /* ------------------------------------------------------------*/

  if (FG0WM001.YPGCD == "?") /* product type grp list*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT TYPE GROUP"; /* Heading*/

    XX0XW02.YPGFFFL = "Y"; /* init flag*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FG0WM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FG0WM001.YPGABRV = FFWREC.YPGABRV; /* Restore prior code*/
    else
      FG0WM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FG0WM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Selected code*/

    end

    set FG0WM001.YPGCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FG0W400

// Verify the entered data
Function FG0W500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FG0WM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* request for transfer*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13)

    FG0WS07(); /* verify modifiable fields*/

  end

   /* ------------------------------------------------------------*/
   /* validate entry fields*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)

    FG0W510(); /* validate entry fields*/

    /* ------------------------------------------------------*/
     /* if key data changed check modifiable fields*/
    /* ------------------------------------------------------*/

    FG0WW00.FG0WWWBD = FFWREC.FFABEGMO;
    FG0WW00.FG0WWWED = FFWREC.FFAENDMO;

    if (FG0WM001.YPGCD != FFWREC.YPGCD        /* product type grp chg*/
     || FG0WM001.YPGCD == " "                 /* product type grp chg*/
     || FG0WM001.XPCCD != FFWREC.XPCCD        /* product category chg*/
     || FG0WM001.XPCCD == " "                 /* product category chg*/
     || FG0WM001.FG0WMBRG != FG0WW00.FG0WWBYM /* beg range changed*/
     || FG0WM001.FG0WMBRG == 0                /* beg range changed*/
     || FG0WM001.FG0WMERG != FG0WW00.FG0WWEYM /* end range changed*/
     || FG0WM001.FG0WMERG == 0)               /* end range changed*/

      if (FG0WW01.CACHGFL == "Y")
        FG0WS07(); /* verify modifiable fields*/
      end

      if (converseVar.validationMsgNum == 0)
        FG0WW00.FG0WWSWR = "Y"; /* request data request*/
      end

    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end


end // end FG0W500

// validate modifiable data
Function FG0W510()

   /* ------------------------------------------------------------*/
   /* validate user created index*/
   /* ------------------------------------------------------------*/

  FG0WW01.FG0WWUVQ = 0;
  FG0WW00.FG0WWIDX = 12;
  while (FG0WW00.FG0WWIDX > 0)

    FG0WW01.FG0WWUVQ = FG0WW01.FG0WWUVQ + FG0WM001.FG0WMIX4[FG0WWIDX];

    FG0WW00.FG0WWIDX = FG0WW00.FG0WWIDX - 1;

  end

   /* ------------------------------------------------------------*/
   /* if user created was selected and the percent total does*/
   /* not equal 100 display variance qty and error message*/
   /* ------------------------------------------------------------*/

  if (FG0WW01.FG0WWUVQ != 100
   && FG0WW01.FG0WWUVQ != 0)
    converseLib.validationFailed(159);
    FFWREC.XXXMODID = "510";
    FG0WW01.FG0WWUVQ = 100 - FG0WW01.FG0WWUVQ;
    FG0WM001.FG0WMVQT = FG0WW01.FG0WWUVQ;
    set FG0WM001.FG0WMIX4[1] cursor;
  else
    if (FG0WW01.FG0WWUVQ == 0
     && FG0WM001.FG0WMSEL[4] == "S")
      converseLib.validationFailed(159);
      FFWREC.XXXMODID = "510";
      FG0WW01.FG0WWUVQ = 100 - FG0WW01.FG0WWUVQ;
      FG0WM001.FG0WMVQT = FG0WW01.FG0WWUVQ;
      set FG0WM001.FG0WMIX4[1] cursor;
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product category code*/
   /* ------------------------------------------------------------*/

  XPCREC.XGPCD = COMMAREA.XGPCD;
  XPCREC.XPCCD = FG0WM001.XPCCD;
  if (XPCREC.XPCKEY in XPCTBL.XPCKEY
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    FG0WM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
  else
    FG0WM001.XPCABRV = " ";
    converseLib.validationFailed(118);
    FFWREC.XXXMODID = "510";
    set FG0WM001.XPCCD cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate product type group*/
   /* ------------------------------------------------------------*/

  if (FG0WM001.YPGCD != "*")
    if (FG0WM001.YPGCD in YPGTBL.YPGCD
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      FG0WM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
    else
      FG0WM001.YPGABRV = " ";
      converseLib.validationFailed(118);
      FFWREC.XXXMODID = "510";
      set FG0WM001.YPGCD cursor, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* validate end yymm range and begin yymm range*/
   /* ------------------------------------------------------------*/

  set FFZREC empty;

  FFZREC.FFZMONTH = 6;
  FFZREC.FFZBYYMM = FG0WM001.FG0WMBRG;
  FFZREC.FFZEYYMM = FG0WM001.FG0WMERG;

  XSFFS35(); /* edit date range*/

  if (FFZREC.FFZENDRC == "1")
    set FG0WM001.FG0WMERG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "510";
  else
    if (FFZREC.FFZENDRC == "2")
      set FG0WM001.FG0WMERG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "510";
    else
      if (FFZREC.FFZENDRC == "3")
        set FG0WM001.FG0WMERG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "510";
      end
    end
  end

  if (FFZREC.FFZBEGRC == "1")
    set FG0WM001.FG0WMBRG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "510";
  else
    if (FFZREC.FFZBEGRC == "2")
      set FG0WM001.FG0WMBRG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "510";
    else
      if (FFZREC.FFZBEGRC == "3")
        set FG0WM001.FG0WMBRG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "510";
      end
    end
  end
   /* ------------------------------------------------------------*/
   /* validate 's'election field*/
   /* ------------------------------------------------------------*/

  FG0WW00.FG0WWSLF = "N"; /* init selection flag*/

  FG0WW00.FG0WWIDX = 4; /* init index*/
  while (FG0WW00.FG0WWIDX >= 1)

    if (FG0WM001.FG0WMSEL[FG0WWIDX] != " "
     && FG0WM001.FG0WMSEL[FG0WWIDX] != "S")
      converseLib.validationFailed(41);
      FFWREC.XXXMODID = "510";
      set FG0WM001.FG0WMSEL[FG0WWIDX] cursor, bold;
    else
      if (FG0WM001.FG0WMSEL[FG0WWIDX] == "S")
        FG0WW00.FG0WWSLF = "Y";
      end
    end

    FG0WW00.FG0WWSLC = FG0WW00.FG0WWIDX - 1;

    while (FG0WW00.FG0WWSLC >= 1)

      if (FG0WM001.FG0WMSEL[FG0WWSLC] > " "
       && FG0WM001.FG0WMSEL[FG0WWIDX] > " ")
        converseLib.validationFailed(136);
        FFWREC.XXXMODID = "510";
        set FG0WM001.FG0WMSEL[FG0WWIDX] cursor, bold;
      end

      FG0WW00.FG0WWSLC = FG0WW00.FG0WWSLC - 1;

    end

    FG0WW00.FG0WWIDX = FG0WW00.FG0WWIDX - 1;

  end


end // end FG0W510

// Process valid input request
Function FG0W600()

   /* ------------------------------------------------------------*/
   /* indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/

  FG0WW00.FG0WWSWF = "Y"; /* set format map switch*/

   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA/ffwrec*/
   /* ------------------------------------------------------------*/

  FFWREC.XPCCD = FG0WM001.XPCCD; /* product category code*/
  FFWREC.XPCABRV = FG0WM001.XPCABRV; /* product category abrv desc*/

  FFWREC.YPGCD = FG0WM001.YPGCD; /* product type grp code*/
  FFWREC.YPGABRV = FG0WM001.YPGABRV; /* product type grp abrv desc*/

  FFWREC.FFABEGMO = FFZREC.FFZBEGMO;
  FFWREC.FFAENDMO = FFZREC.FFZENDMO;
  if (FG0WW00.FG0WWSWR == "Y") /* KEY DATA MODIFIED*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* if user data changed or historical data selected*/
   /* update/add dfcast.vrcat001 dfcast.vrcmth01*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter
   && FG0WW00.FG0WWSLF == "Y") /* data selected for update/add*/

    XX0XS01(); /* get current date and time*/

    set FFCREC empty;

    FFCREC.FFABEGMO = FFWREC.FFABEGMO;
    FFCREC.FFAENDMO = FFWREC.FFAENDMO;

    FG0WS01(); /* select dfcast.vrcat001 row*/

    if (SQLCA.VAGen_SQLCODE == 0)

      FG0W610(); /* update dfcast.vrcat001 row*/

      set FFDREC empty;

      FFFREC.FFFBEGMO = FFWREC.FFABEGMO;
      FFFREC.FFFENDMO = FFWREC.FFAENDMO;

      FFDREC.FFABEGMO = FFWREC.FFABEGMO;
      FFDREC.FFAENDMO = FFWREC.FFAENDMO;

      FG0WS02(); /* select 's1' dfcast.vrcmth01*/
      FG0WS03(); /* fetch 'n1' dfcast.vrcmth01*/

      FG0WW00.FG0WWIDX = 1; /* init index*/
      while (SQLCA.VAGen_SQLCODE == 0)

        FG0W620(); /* update dfcast.vrcmth01*/

        FG0WS03(); /* fetch 'n1' dfcast.vrcmth01*/

        FG0WW00.FG0WWIDX = FG0WW00.FG0WWIDX + 1;

      end
    else

      FG0W630(); /* add dfcast.vrcat001 row*/

      set FFDREC empty;

      FFDREC.FFABEGMO = FFWREC.FFABEGMO;
      FFDREC.FFAENDMO = FFWREC.FFAENDMO;
      FFDREC.XPCCD = FFWREC.XPCCD;
      FFDREC.YPGCD = FFWREC.YPGCD;

      FG0WW00.FG0WWIDX = 1; /* init index*/
      while (FFDREC.FF4FCTMO < FFDREC.FFAENDMO)

        FG0W640(); /* add dfcast.vrcmth01 row*/

        FG0WW00.FG0WWIDX = FG0WW00.FG0WWIDX + 1;

      end
    end

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();

    FFWREC.XXXMSGNO = 33;
    FFWREC.XXXMODID = "600";

  end

   /* ------------------------------------------------------------*/
   /* if pf13 transfer to application fg0x*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13)

    COMMAREA.CATOAP = "FG0X";

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* load map work fields*/
   /* ------------------------------------------------------------*/

  FG0WW01.FG0WWSEL[1] = FG0WM001.FG0WMSEL[1];
  FG0WW01.FG0WWSEL[2] = FG0WM001.FG0WMSEL[2];
  FG0WW01.FG0WWSEL[3] = FG0WM001.FG0WMSEL[3];
  FG0WW01.FG0WWSEL[4] = FG0WM001.FG0WMSEL[4];

  FG0WW00.FG0WWIDX = 1; /* init index*/
  while (FG0WW00.FG0WWIDX <= 12
   && FG0WW01.FG0WWHD4[FG0WWIDX] <= FFWREC.FFAENDMO)

    FG0WW01.FG0WWIX4[FG0WWIDX] = FG0WM001.FG0WMIX4[FG0WWIDX];

    FG0WW00.FG0WWIDX = FG0WW00.FG0WWIDX + 1;

  end


end // end FG0W600

// upd dfcast.vrcat001 row
Function FG0W610()
   /* ------------------------------------------------------------*/
   /* upd dfcast.vrcat001 table row*/
   /* ------------------------------------------------------------*/

  if (FG0WM001.FG0WMSEL[1] == "S") /* historical data 1 yr ago*/
    FFCREC.FFCFDIND = "1";
  else
    if (FG0WM001.FG0WMSEL[2] == "S") /* historical data 2 yr ago*/
      FFCREC.FFCFDIND = "2";
    else
      if (FG0WM001.FG0WMSEL[3] == "S") /* historical data 3 yr ago*/
        FFCREC.FFCFDIND = "3";
      else
        if (FG0WM001.FG0WMSEL[4] == "S") /* user created data*/
          FFCREC.FFCFDIND = "U";
        end
      end
    end
  end

  FFCREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFCREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3760" ("U ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FG0WW00.FG0WWSWR = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "610"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "610"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DFCAST.VRCAT001 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0W610

// upd dfcast.vrcmth01 row
Function FG0W620()
   /* ------------------------------------------------------------*/
   /* upd dfcast.vrcmth01 table row*/
   /* ------------------------------------------------------------*/

  if (FG0WM001.FG0WMSEL[1] == "S")
    FFDREC.FFDFDPCT = FG0WW01.FG0WWIX1[FG0WWIDX];
  else
    if (FG0WM001.FG0WMSEL[2] == "S")
      FFDREC.FFDFDPCT = FG0WW01.FG0WWIX2[FG0WWIDX];
    else
      if (FG0WM001.FG0WMSEL[3] == "S")
        FFDREC.FFDFDPCT = FG0WW01.FG0WWIX3[FG0WWIDX];
      else
        if (FG0WM001.FG0WMSEL[4] == "S")
          FFDREC.FFDFDPCT = FG0WM001.FG0WMIX4[FG0WWIDX];
        end
      end
    end
  end

  FFDREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFDREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3770" ("U ", SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FG0WW00.FG0WWSWR = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "620"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "620"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DFCAST.VRCMTH01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0W620

// add dfcast.vrcat001 row
Function FG0W630()
   /* ------------------------------------------------------------*/
   /* add dfcast.vrcat001 table row*/
   /* ------------------------------------------------------------*/

  if (FG0WM001.FG0WMSEL[1] == "S") /* historical data 1 yr ago*/
    FFCREC.FFCFDIND = "1";
  else
    if (FG0WM001.FG0WMSEL[2] == "S") /* historical data 2 yr ago*/
      FFCREC.FFCFDIND = "2";
    else
      if (FG0WM001.FG0WMSEL[3] == "S") /* historical data 3 yr ago*/
        FFCREC.FFCFDIND = "3";
      else
        if (FG0WM001.FG0WMSEL[4] == "S") /* user created data*/
          FFCREC.FFCFDIND = "U";
        end
      end
    end
  end

  FFCREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFCREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFCREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3760" ("A ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "630"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VRCAT001 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0W630

// add dfcast.vrcmth01 row
Function FG0W640()
   /* ------------------------------------------------------------*/
   /* add dfcast.vrcmth01 table row*/
   /* ------------------------------------------------------------*/

  FFDREC.FF4FCTMO = FG0WW01.FG0WWHD4[FG0WWIDX];

  if (FG0WM001.FG0WMSEL[1] == "S") /* historical data 1 yr ago*/
    FFDREC.FFDFDPCT = FG0WW01.FG0WWIX1[FG0WWIDX];
  else
    if (FG0WM001.FG0WMSEL[2] == "S") /* historical data 2 yr ago*/
      FFDREC.FFDFDPCT = FG0WW01.FG0WWIX2[FG0WWIDX];
    else
      if (FG0WM001.FG0WMSEL[3] == "S") /* historical data 3 yr ago*/
        FFDREC.FFDFDPCT = FG0WW01.FG0WWIX3[FG0WWIDX];
      else
        if (FG0WM001.FG0WMSEL[4] == "S") /* user created data*/
          FFDREC.FFDFDPCT = FG0WM001.FG0WMIX4[FG0WWIDX];
        end
      end
    end
  end

  FFDREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFDREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFDREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3770" ("A ", SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "640"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VRCMTH01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0W640

// Determine to use actl/frz futr
Function FG0WS-051()
  FG0WW00.FG0WW-BEG = FFFREC.FFFBEGMO;
  FG0WW00.FG0WW-END = FFFREC.FFFENDMO;

  if (FFFREC.FFFENDMO < 199206) /* Whole range before 199206*/
    FG0WS-0511(); /* use actual future*/
    FG0WW00.FG0WWUHD = FH3REC.FH1PAQTY + FH3REC.FH1ALQTY +     FH3REC.FH2SHP + FH3REC.FH3CNCL;

  else
    if (FFFREC.FFFBEGMO >= 199206) /* Whole range beyond 199206*/
      FG0WS-0511(); /* use frozen future*/
      FG0WW00.FG0WWUHD = FH3REC.FH-FRZ-PRAL-QTY + FH3REC.FH-FRZ-ALOC-QTY +       FH3REC.FH-FRZ-SHP-QTY + FH3REC.FH-FRZ-CNCL-QTY;
    else
      FFFREC.FFFENDMO = 199205;
      FG0WS-0511(); /* use actual future*/
      FG0WW00.FG0WWUHD = FH3REC.FH1PAQTY + FH3REC.FH1ALQTY +       FH3REC.FH2SHP + FH3REC.FH3CNCL;

      FFFREC.FFFBEGMO = 199206;
      FFFREC.FFFENDMO = FG0WW00.FG0WW-END;
      FG0WS-0511(); /* use frozen future*/

      FG0WW00.FG0WWUHD = FG0WW00.FG0WWUHD + FH3REC.FH-FRZ-PRAL-QTY +       FH3REC.FH-FRZ-ALOC-QTY + FH3REC.FH-FRZ-SHP-QTY +       FH3REC.FH-FRZ-CNCL-QTY;
    end
  end


end // end FG0WS-051

// Obtain the future demand
Function FG0WS-0511()

  set FH3REC empty;

  FH3REC.XPCCD = FFWREC.XPCCD; /* product category*/
  FH3REC.XDVCD = FFWREC.YSMXDV; /* division code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* product type code*/
  FH3REC.XLCCD = "10"; /* life cycle code*/
  FH3REC.XCTCD = "USA"; /* country code*/
  FH3REC.XQACD = "01"; /* quality code*/
  FH3REC.YSMXOT = "FT"; /* sum code*/
  FH3REC.FH1PNAC = "*"; /* national account flag*/
  FH3REC.XDSCD = "*"; /* direct ship code*/
  TA1PGMNM = "FG0WS05"; /* calling process*/

   /* --------------------------------------------------*/
   /* select sum on dfhist.vfhcat01 table*/
   /* --------------------------------------------------*/

  XSFFS50();

end // end FG0WS-0511

// select dfcast.vrcat001 row
Function FG0WS01()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vrcat001 table.*/
   /* ------------------------------------------------------------*/

  FFCREC.YPGCD = FFWREC.YPGCD; /* product type code*/
  FFCREC.XPCCD = FFWREC.XPCCD; /* product cat code*/

  try
    call "IO3760" ("S ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VRCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0WS01

// select 's1' dfcast.vrcmth01
Function FG0WS02()
   /* ------------------------------------------------------------*/
   /* Select set on dfcast.vrcmth01 table.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* load fffrec record*/
   /* ------------------------------------------------------------*/

  FFFFUNCD = "S1";

   /* ------------------------------------------------------------*/
   /* load ffdrec record*/
   /* ------------------------------------------------------------*/

  FFDREC.YPGCD = FFWREC.YPGCD;
  FFDREC.XPCCD = FFWREC.XPCCD;

   /* ------------------------------------------------------------*/
   /* select set dfcast.vrcmth01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3770" (FFFREC, SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET DFCAST.VRCMTH01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0WS02

// fetch 'n1' dfcast.vrcmth01
Function FG0WS03()
   /* ------------------------------------------------------------*/
   /* fetch dfcast.vrcmth01 row*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "N1";

  try
    call "IO3770" (FFFREC, SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S03"; /* MODULE IDENTIFICATION*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DFCAST.VRCMTH01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0WS03

// close 'c1' dfcast.vrcmth01
Function FG0WS04()
   /* ------------------------------------------------------------*/
   /* close dfcast.vrcmth01 table.*/
   /* ------------------------------------------------------------*/
  FFFREC.FFFFUNCD = "C1";

  try
    call "IO3770" (FFFREC, SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "S04"; /* MODULE IDENTIFICATION*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C1 DFCAST.VRCMTH01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0WS04

// get actual futr dmnd qtys
Function FG0WS05()

   /* ------------------------------------------------------------*/
   /* obtain historical actual future dmnd quantities.*/
   /* ------------------------------------------------------------*/

  FFFBEGMO = FFZREC.FFZINDMO[FG0WWIDX];
  FFFENDMO = FFZREC.FFZINDMO[FG0WWIDX];

  FG0WS-051(); /* Get futr demand*/

end // end FG0WS05

// select dfcast.vmcat001 row
Function FG0WS06()

   /* ------------------------------------------------------------*/
   /* select dfcast.vmcat001 obtain future dmnd qtys*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* Clear row storage area*/

  FF7REC.FF4FCTMO = FFZREC.FFZINDMO[FG0WWIDX]; /* fcst month*/
  FF7REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF7REC.XCTCD = "USA"; /* Foreign country code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* Product categroy code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/

   /* ------------------------------------------------------------*/
   /* select dfcast.vmcat001*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or zero total, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* selection not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indisgrpe that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S06"; /* Module identifisgrpion*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indisgrpe not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indisgrpe system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VMCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program applisgrpion*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0WS06

// verify modifiable fields
Function FG0WS07()
   /* -----------------------------------------------------*/
   /* verify header modifiable fields*/
   /* -----------------------------------------------------*/

  FG0WW00.FG0WWIDX = 1;
  while (FG0WW00.FG0WWIDX <= 12
   && FG0WW01.FG0WWHD4[FG0WWIDX] <= FFWREC.FFAENDMO)

    if (FG0WM001.FG0WMIX4[FG0WWIDX] != FG0WW01.FG0WWIX4[FG0WWIDX])
      set FG0WM001.FG0WMIX4[FG0WWIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S07";
    end

    FG0WW00.FG0WWIDX = FG0WW00.FG0WWIDX + 1;

  end

  FG0WW00.FG0WWIDX = 1;
  while (FG0WW00.FG0WWIDX <= 4)

    if (FG0WM001.FG0WMSEL[FG0WWIDX] != FG0WW01.FG0WWSEL[FG0WWIDX])
      set FG0WM001.FG0WMSEL[FG0WWIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S07";
    end

    FG0WW00.FG0WWIDX = FG0WW00.FG0WWIDX + 1;

  end


  if (converseVar.eventKey not enter)
    if (FG0WM001.XPCCD != FFWREC.XPCCD)
      set FG0WM001.XPCCD cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S07";
    end

    if (FG0WM001.YPGCD != FFWREC.YPGCD)
      set FG0WM001.YPGCD cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S07";
    end

    FG0WW00.FG0WWWED = FFWREC.FFAENDMO;
    if (FG0WM001.FG0WMERG != FG0WW00.FG0WWEYM)
      set FG0WM001.FG0WMERG cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S07";
    end

    FG0WW00.FG0WWWBD = FFWREC.FFABEGMO;
    if (FG0WM001.FG0WMBRG != FG0WW00.FG0WWBYM)
      set FG0WM001.FG0WMBRG cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S07";
    end
  end


end // end FG0WS07

//*** RECORD=FG0WW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FG0WW00 type basicRecord
  10 FG0WWSWR FG0WWSWR ; 
  10 FG0WWSWF FG0WWSWF ; 
  10 FG0WWNM1 FG0WWNM1 ; 
  10 FG0WWNM2 FG0WWNM2 ; 
  10 FG0WWSLC FG0WWSLC ; 
  10 FG0WWSLF FG0WWSLF ; 
  10 FG0WWUHD FG0WWUHD ; 
  10 FG0WWHDT FG0WWHDT ; 
  10 FG0WWIDX FG0WWIDX ; 
  10 FG0WWWDT FG0WWWDT ; 
    15 * num(3) ; 
    15 FG0WWWCC FG0WWWCC ; 
    15 FG0WWWYM FG0WWWYM ; 
      20 FG0WWWYY FG0WWWYY ; 
      20 FG0WWWMM FG0WWWMM ; 
  10 FG0WWWBD FG0WWWBD ; 
    15 * num(3) ; 
    15 FG0WWBCC FG0WWBCC ; 
    15 FG0WWBYM FG0WWBYM ; 
      20 FG0WWBYY FG0WWBYY ; 
      20 FG0WWBMM FG0WWBMM ; 
  10 FG0WWWED FG0WWWED ; 
    15 * num(3) ; 
    15 FG0WWECC FG0WWECC ; 
    15 FG0WWEYM FG0WWEYM ; 
      20 FG0WWEYY FG0WWEYY ; 
      20 FG0WWEMM FG0WWEMM ; 
  10 FG0WWCRD FG0WWCRD ; 
  10 FG0WWCD5 FG0WWCD5 ; 
  10 FG0WWUTQ FG0WWUTQ ; 
  10 FG0WW-BEG FG0WW-BEG ; 
  10 FG0WW-END FG0WW-END ; 
end // end FG0WW00

//*** RECORD=FG0WW01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// ***********************
Record FG0WW01 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 FG0WWSEL FG0WWSEL [4] ; 
  10 FG0WWHBD FG0WWHBD [4] ; 
    15 * num(5) ; 
    15 FG0WWHBY FG0WWHBY ; 
  10 FG0WWHED FG0WWHED [4] ; 
    15 * num(5) ; 
    15 FG0WWHEY FG0WWHEY ; 
  10 FG0WWPBD FG0WWPBD [3] ; 
    15 * num(5) ; 
    15 FG0WWPBY FG0WWPBY ; 
  10 FG0WWPED FG0WWPED [3] ; 
    15 * num(5) ; 
    15 FG0WWPEY FG0WWPEY ; 
  10 FG0WWUVQ FG0WWUVQ ; 
  10 FG0WWHD1 FG0WWHD1 [12] ; 
    15 * num(5) ; 
    15 FG0WWDH1 FG0WWDH1 ; 
  10 FG0WWIX1 FG0WWIX1 [12] ; 
  10 FG0WWUQ1 FG0WWUQ1 [13] ; 
  10 FG0WWQT1 FG0WWQT1 [13] ; 
  10 FG0WWHD2 FG0WWHD2 [12] ; 
    15 * num(5) ; 
    15 FG0WWDH2 FG0WWDH2 ; 
  10 FG0WWIX2 FG0WWIX2 [12] ; 
  10 FG0WWUQ2 FG0WWUQ2 [13] ; 
  10 FG0WWQT2 FG0WWQT2 [13] ; 
  10 FG0WWHD3 FG0WWHD3 [12] ; 
    15 * num(5) ; 
    15 FG0WWDH3 FG0WWDH3 ; 
  10 FG0WWIX3 FG0WWIX3 [12] ; 
  10 FG0WWUQ3 FG0WWUQ3 [13] ; 
  10 FG0WWQT3 FG0WWQT3 [13] ; 
  10 FG0WWHD4 FG0WWHD4 [12] ; 
    15 * num(5) ; 
    15 FG0WWDH4 FG0WWDH4 ; 
  10 FG0WWIX4 FG0WWIX4 [12] ; 
end // end FG0WW01

// work begin date
DataItem FG0WW-BEG num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work end date
DataItem FG0WW-END num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// begin century
DataItem FG0WWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range month
DataItem FG0WWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year and month
DataItem FG0WWBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range year
DataItem FG0WWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date +5 month
DataItem FG0WWCD5 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date
DataItem FG0WWCRD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

DataItem FG0WWDH1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0WWDH2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0WWDH3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0WWDH4 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end century
DataItem FG0WWECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range month
DataItem FG0WWEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end year and month
DataItem FG0WWEYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range year
DataItem FG0WWEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// heading begin dates
DataItem FG0WWHBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

DataItem FG0WWHBY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical mthly hds 1 yrs
DataItem FG0WWHD1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical mthly hds 2 yrs
DataItem FG0WWHD2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical mthly hds 3 yrs
DataItem FG0WWHD3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// user created monthly headings
DataItem FG0WWHD4 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales thousands
DataItem FG0WWHDT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// heading end dates
DataItem FG0WWHED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

DataItem FG0WWHEY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem FG0WWIDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical index 1 yrs
DataItem FG0WWIX1 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical index 2 yrs
DataItem FG0WWIX2 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical index 3 yrs
DataItem FG0WWIX3 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// user created percents
DataItem FG0WWIX4 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 1
DataItem FG0WWNM1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 2
DataItem FG0WWNM2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history begin dates
DataItem FG0WWPBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

DataItem FG0WWPBY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history end dates
DataItem FG0WWPED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

DataItem FG0WWPEY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical qtys 1 yrs
DataItem FG0WWQT1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// historical qtys 2 yrs
DataItem FG0WWQT2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// historical qtys 3 yrs
DataItem FG0WWQT3 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection fields
DataItem FG0WWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection count
DataItem FG0WWSLC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection flag
DataItem FG0WWSLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FG0WWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FG0WWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history dmnd units
DataItem FG0WWUHD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical qtys 1 yrs units
DataItem FG0WWUQ1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical qtys 2 yrs units
DataItem FG0WWUQ2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical qtys 3 yrs units
DataItem FG0WWUQ3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total histoical qty w/s
DataItem FG0WWUTQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// unit variance qty
DataItem FG0WWUVQ num(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work begin date
DataItem FG0WWWBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work century
DataItem FG0WWWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date
DataItem FG0WWWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work begin date
DataItem FG0WWWED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work month
DataItem FG0WWWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year and month
DataItem FG0WWWYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FG0WWWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

