package fg0l;

import corpcom1.CACHGFL;
import corpcom2.XPCREC;
import corpcom2.XPLREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFF001;
import corpcom3.XPXPL01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS-FF5500;
import corpcom4.XSFFS-FF5520;
import corpcom4.XSFFS01;
import corpcom4.XSFFS10;
import corpcom4.XSFFS30;
import corpcom4.XSFFS50;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx2.XPCCD;
import corpx2.XPCSDESC;
import corpy2.YPGTBL;
import ff.common.*;
import fh.common.FH3REC;
import fh.common.FH6REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=FG0L ****
// This application allows a user to inquire the monthly long
// range sales forecast by product category for a given range
// of months. The required range could be any period of time,
// past, current or furtur. The user may inquire the forecast
// by type grp, line code, and need month or ship month.
// 
// All quanitites on the screen are in thousands.
// 
// The user can specify the number of months in the season and
// he has the flexibility to view 4 months, or 6 month seasons
// with varying subtotals.
// 
// The user may use appropriate attention key to scroll the
// screen backwards, forwards, left and right.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from either of the screens.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          02/01/90  RGILLI  New application.
// FF#134   08/21/90  SFORD   Set job complition msg flag = 'y'
// FF#1106  02/04/92  LDELUH  Allow combined countries & div. '
// FFMAINT  02/21/92  LDELUH  Remove sales region logic.      '
// FF1111   04/16/92  JJUCH   Chng to allow varying len season.
// FF394    03/23/93  JJUCH   Change to send report to BUNDLE.
// FF367    03/29/93  JJUCH   Change to accommodate the NIL
//                            management region process.
//          09/10/93  JJUCH   Convert to CSP V4.1 version.
// ff-409   03/30/94  mwalke  Enhancement for dmnd based sales.
//                            Deleted print function.         .
//                            Deleted ctry cd and desc, and
//                            summary division cd and desc.
//                            Added need/ship month indicator.
// FF175    12/10/96  DSMITH  Changed the date range fill
//                            character to '0'.
// *********************
Program FG0L type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF7REC FF7REC; // record
  FFFREC FFFREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  FG0LW00 FG0LW00; // record
  FG0LW01 FG0LW01; // record
  FG0LW02 FG0LW02; // record
  FG0LW03 FG0LW03; // record
  FH3REC FH3REC; // record
  FH6REC FH6REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPLTBL; // table
  use XPCTBL; // table
  use YPGTBL; // table
  use FG0LM.FG0LM001, // form
  		FG0LM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FFFREC empty; /* Special function parameters*/
    set FG0LM001 initial; /* M001 input/output*/
    set FG0LW00 empty; /* Working storage*/
    set FG0LW01 empty; /* M001 display storage*/
    set FG0LW02 empty; /* M001 temporary storage*/
    set FG0LW03 empty; /* M001 totals display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine work area*/
    set TA5REC empty; /* temp storage queue area*/
    set TA6REC empty; /* jcl submit work area*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    FG0LW00.XXXTSLEN = 1967; /* temp storage length*/
    ;
    FG0LW00.FG0LWSWR = "N"; /* Request for data switch*/
    FG0LW00.FG0LWSWF = "Y"; /* format screen data switch*/
    FG0LW00.FG0LWSWD = "1"; /* map switch*/
    FG0LW00.FG0LWSIX = 1; /* save index*/
    FG0LW00.FG0LWSNX = 1; /* season index*/
    FG0LW00.FG0LWPGX = 1; /* page index*/
    FG0LW00.XXXTSPAG = 1; /* page number*/
    FG0LW00.FG0LW-NEXT = "N"; /* next season flag*/
    move "N" to FG0LW00.FG0LW-PMON[1] for all; /* print remaining month flag*/
    ;
     /* ---------------------------------------------------*/
     /* Clear unused fields*/
     /* ---------------------------------------------------*/
    ;
    FFWREC.XPCCD = " "; /* Clear product category code*/
    FFWREC.XPCABRV = " "; /* Clear product category abrv*/
    FFWREC.SYBSTGNB = " "; /* Clear style group number*/
    FFWREC.SYBSTGNM = " "; /* Clear style group name*/
    FFWREC.SY1STNBR = " "; /* Clear style number*/
    FFWREC.SY2CLRID = " "; /* Clear color id*/
    FFWREC.XDMCD = " "; /* Clear dimension code*/
    FFWREC.SY1SSTNM = " "; /* Clear short style name*/
    FFWREC.SY2CLRAB = " "; /* Clear color abrv*/
    FFWREC.XDMABRV = " "; /* Clear dimension abrv*/
    ;
     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.FFW-ND-SHP-IND == " ")
      FFWREC.FFW-ND-SHP-IND = "N";
    end
    ;
     /* ------------------------------------------------------------*/
     /* product type group*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.YPGCD == " ")
      FFWREC.YPGCD = "01";
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end
    ;
     /* ------------------------------------------------------------*/
     /* determine if data is to be loaded*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.FFABEGMO != 0
     && FFWREC.FFAENDMO != 0
     && FFWREC.XPLCD > " ")
      FG0LW00.FG0LWSWR = "Y"; /* set data request flag*/
    end
    ;
     /* ------------------------------------------------------------*/
     /* Flow to first time through date validation*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0L000; /* Converse the main process*/
    ;
    FG0L000: FG0L000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0L001; /* Converse the main process*/
    ;
    FG0L001: FG0L001();
     /* ------------------------------------------------------------*/
     /* flow to converse the main process used to display a map*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0L001; /* converse the main process*/
    ;
  end // end main
end // end FG0L

// calc need month sales
Function FG0L-141()
   /* ------------------------------------------------------------*/
   /* Obtain historical need month based sales quantities.*/
   /* Load FH6REC record - dfhist.vctshp01, note:  ffabegmo and*/
   /* ffaendmo loaded in fg0l100.*/
   /* ------------------------------------------------------------*/
  ;
  set FH6REC empty;
  ;
  FH6REC.XPCCD = FF2REC.XPCCD; /* product catg code*/
  FH6REC.XPRCD = FFWREC.YPGCD; /* product type code*/
  FH6REC.XLCCD = "10"; /* life cycle code*/
  FH6REC.XQACD = "01"; /* quality code*/
  FH6REC.YSMXOT = "*"; /* quality code*/
  TA1PGMNM = "FG0L141"; /* calling process*/
  ;
   /* --------------------------------------------------*/
   /* select sum on dfhist.vctshp01 table*/
   /* --------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "SN"; /* function code*/
  ;
  XSFFS-FF5520();
  ;
  ;
end // end FG0L-141

// calc 3 & 4 mos ago carryover
Function FG0L-143()
   /* ------------------------------------------------------------*/
   /* Obtain carryover quantities from dfhist.vfhcat01*/
   /* ------------------------------------------------------------*/
  ;
  set FH3REC empty;
  ;
  FH3REC.XPCCD = FF2REC.XPCCD; /* product catg code*/
  FH3REC.XPRCD = FF2REC.YPGCD; /* product type code*/
  FH3REC.XLCCD = "10"; /* life cycle code*/
  FH3REC.XQACD = "01"; /* quality code*/
  FH3REC.YSMXOT = "*"; /* sum code*/
  FH3REC.FH1PNAC = "*"; /* nacct fl*/
  TA1PGMNM = "FG0L143"; /* calling process*/
  ;
   /* --------------------------------------------------*/
   /* select sum on dfhist.vfhcat01 table*/
   /* --------------------------------------------------*/
  ;
  XSFFS50();
  ;
  ;
end // end FG0L-143

// calc 1 & 2 mos ago carryover
Function FG0L-145()
   /* ------------------------------------------------------------*/
   /* Obtain carryover quantities*/
   /* ------------------------------------------------------------*/
  ;
  set FH3REC empty;
  ;
   /* division code is used here to pass line code to ff5500*/
  FH3REC.XDVCD = FF2REC.XPLCD; /* prod line code*/
  FH3REC.XPCCD = FF2REC.XPCCD; /* prod catg code*/
  FH3REC.XPRCD = FF2REC.YPGCD; /* product type code*/
  FH3REC.XLCCD = "10"; /* life cycle code*/
  FH3REC.XQACD = "01"; /* quality code*/
  FH3REC.YSMXOT = "*"; /* xxx-sum-xot-cd*/
  FH3REC.FH1PNAC = "*"; /* nacct fl*/
  TA1PGMNM = "FG0L145"; /* calling process*/
  ;
   /* --------------------------------------------------*/
   /* select sum on dfhist.vfhcat01 table*/
   /* --------------------------------------------------*/
  ;
  XSFFS-FF5500();
  ;
  ;
end // end FG0L-145

// fetch fcst sls from vmcat001
Function FG0L-161()
   /* ------------------------------------------------------------*/
   /* Obtain forecast sales qtys from dfcast.vmcat001.*/
   /* note: ffabegmo and ffaendmo loaded in routine fg0l100.*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "SS";
  ;
   /* ------------------------------------------------------------*/
   /* load ff7rec record - dfcast.vmcat001*/
   /* ------------------------------------------------------------*/
  ;
  set FF7REC empty; /* Clear row storage area*/
  ;
  FF7REC.YSMXDV = "10"; /* Division group code*/
  FF7REC.XCTCD = "USA "; /* Foreign country code*/
  FF7REC.XPCCD = FF2REC.XPCCD; /* Product categroy code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  ;
   /* ------------------------------------------------------------*/
   /* select sum dfcast.vmcat001*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3700" (FFFREC, SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or zero total, return to the previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* zero total returned*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indisgrpe that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "161"; /* Module identifisgrpion*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indisgrpe not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indisgrpe system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUM TABLE DFCAST.VMCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program applisgrpion*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST"; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0L-161

// one time validation process
Function FG0L000()
   /* ------------------------------------------------------------*/
   /* validate begin and end dates if request for data switch*/
   /* has been set*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0LW00.FG0LWSWR != "Y")
    ;
    return;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* verify begin and end dates passed using xsffs30*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty;
  FFZREC.FFZMONTH = 1;
  FFZREC.FFZSRANG = "Y";
  FFZREC.FFZBEGMO = FFWREC.FFABEGMO;
  FFZREC.FFZENDMO = FFWREC.FFAENDMO;
  ;
  XSFFS30();
  ;
  if (FFZREC.FFZENDRC == "1")
    set FG0LM001.FG0LMERG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "000";
  else
    if (FFZREC.FFZENDRC == "2")
      set FG0LM001.FG0LMERG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "000";
    else
      if (FFZREC.FFZENDRC == "3")
        set FG0LM001.FG0LMERG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "000";
      end
    end
  end
  ;
  if (FFZREC.FFZBEGRC == "1")
    set FG0LM001.FG0LMBRG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "000";
  else
    if (FFZREC.FFZBEGRC == "2")
      set FG0LM001.FG0LMBRG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "000";
    else
      if (FFZREC.FFZBEGRC == "3")
        set FG0LM001.FG0LMBRG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "000";
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* if date range is in error load default field values*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0)
    FG0LM001.XPLCD = FFWREC.XPLCD;
    FG0LM001.XPLABRV = FFWREC.XPLABRV;
    FG0LM001.FFW-ND-SHP-IND = FFWREC.FFW-ND-SHP-IND;
    FG0LW00.FG0LWPIX = 1;
    while (FG0LW00.FG0LWPIX <= 4) /* move season end month*/
      FG0LM001.FG0LMSEM[FG0LWPIX] = FG0LW00.FG0LWSEM[FG0LWPIX];
      FG0LW00.FG0LWPIX = FG0LW00.FG0LWPIX + 1;
    end
  end
  ;
end // end FG0L000

// L.R. forecast category inquiry
Function FG0L001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FG0L100(); /* Obtain the data to display*/
  ;
  FG0L200(); /* Format and display the map*/
  ;
  FG0L300(); /* Check attention identifier*/
  ;
  FG0L400(); /* Reset fields to normal intensity*/
  ;
  FG0L500(); /* Verify the entered data*/
  ;
  FG0L600(); /* Process valid input request*/
  ;
  ;
end // end FG0L001

// obtain data for display
Function FG0L100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0LW00.FG0LWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the no of seasons and no of months in each season*/
   /* ------------------------------------------------------------*/
  ;
  FG0LS33();
  ;
   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  ;
  FG0LS01(); /* Purge any temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain current date using routine xx0xs01.*/
   /* Obtain invoice cutoff date from dfcast.vffctl01.*/
   /* Calculate program dates.*/
   /* ------------------------------------------------------------*/
  ;
  FG0L110();
  ;
   /* ------------------------------------------------------------*/
   /* Select all categories for the requested line and type group*/
   /* codes from dfcast.vffxrf01.  Fetch sales quantities.*/
   /* ------------------------------------------------------------*/
  ;
  FG0LW00.FG0LWIDX = 1; /* init index*/
  FG0LW00.FG0LWTIX = FFZREC.FFZNUMMO + 1; /* load total index*/
  ;
  FG0L120(); /* select 's2' on dfcast.vffxrf01*/
  ;
  FG0L130(); /* fetch 'n2' dfcast.vffxrf01 row*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0) /* process unitl end of dfcast.vffxrf01*/
    ;
    FG0LW02.XPCCD[FG0LWIDX] = FF2REC.XPCCD;
    XPCREC.XPCCD = FF2REC.XPCCD;
    XPCREC.XGPCD = COMMAREA.XGPCD;
    if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
      FG0LW02.XPCSDESC[FG0LWIDX] = XPCTBL.XPCSDESC[sysVar.arrayIndex];
    end
    ;
    FG0LW00.FG0LWUTQ = 0; /* init w/s product line total*/
    FG0LW00.FG0LWPIX = 1; /* init process index*/
    ;
    while (FG0LW00.FG0LWPIX <= FFZREC.FFZNUMMO)
      ;
      FFFREC.FFFBEGMO = FFZREC.FFZINDMO[FG0LWPIX];
      FFFREC.FFFENDMO = FFZREC.FFZINDMO[FG0LWPIX];
      ;
      FG0LW00.FG0LWUHS = 0;
      ;
      /* ----------------------------------------------------------*/
      /* If the month in the requested range is an actual month*/
      /* process for either need month based or ship month based*/
      /* otherwise*/
      /* month is forecast*/
      /* ----------------------------------------------------------*/
      ;
      if (FFZREC.FFZINDMO[FG0LWPIX] < FG0LW00.FG0LW-CURR-MO)
        ;
        if (FFWREC.FFW-ND-SHP-IND == "N") /* need month sales*/
          FG0L140();
        else
          FG0L150(); /* bus month sales*/
        end
        ;
      else
        FG0L160(); /* fcst sales*/
      end
      ;
      /* ---------------------------------------------------*/
      /* load category detail sales qtys*/
      /* ---------------------------------------------------*/
      ;
      FG0LW00.FG0LWUQT[FG0LWPIX] = FG0LW00.FG0LWUHS;
      FFXREC.FFXNUMB = FG0LW00.FG0LWUHS;
      XSFFS10();
      FG0LW00.FG0LWQTY[FG0LWPIX] = FFXREC.FFXCHAR;
      ;
      /* ---------------------------------------------------*/
       /* accumulate category sales qty total*/
      /* ---------------------------------------------------*/
      ;
      FG0LW00.FG0LWUTQ = FG0LW00.FG0LWUHS + FG0LW00.FG0LWUTQ;
      ;
      /* ---------------------------------------------------------*/
       /* accumulate monthly sales qty totals(column totals)*/
      /* ---------------------------------------------------------*/
      ;
      FG0LW00.FG0LWNM1 = FG0LW03.FG0LWUMT[FG0LWPIX];
      FG0LW03.FG0LWUMT[FG0LWPIX] = FG0LW00.FG0LWUHS + FG0LW00.FG0LWNM1;
      FFXREC.FFXNUMB = FG0LW03.FG0LWUMT[FG0LWPIX];
      XSFFS10();
      FG0LW03.FG0LWMTQ[FG0LWPIX] = FFXREC.FFXCHAR;
      ;
      FG0LW00.FG0LWPIX = FG0LW00.FG0LWPIX + 1;
      ;
    end
    ;
    /* ------------------------------------------------------------*/
    /* load category total sales qty(last entry in t/s)*/
    /* ------------------------------------------------------------*/
    ;
    FG0LW00.FG0LWUQT[FG0LWTIX] = FG0LW00.FG0LWUTQ;
    FFXREC.FFXNUMB = FG0LW00.FG0LWUTQ;
    XSFFS10();
    FG0LW00.FG0LWQTY[FG0LWTIX] = FFXREC.FFXCHAR;
    ;
    /* ------------------------------------------------------------*/
    /* load temporary storage record with category detail qtys*/
    /* and total qtys*/
    /* ------------------------------------------------------------*/
    ;
    FG0LW02.FG0LWQTS[FG0LWIDX] = FG0LW00.FG0LWLQT;
    ;
    /* ------------------------------------------------------------*/
    /* accumulate monthly sales qty total(last entry in w/s)*/
    /* ------------------------------------------------------------*/
    ;
    FG0LW00.FG0LWNM1 = FG0LW03.FG0LWUMT[FG0LWTIX];
    FG0LW03.FG0LWUMT[FG0LWTIX] = FG0LW00.FG0LWNM1 + FG0LW00.FG0LWUTQ;
    FFXREC.FFXNUMB = FG0LW03.FG0LWUMT[FG0LWTIX];
    XSFFS10();
    FG0LW03.FG0LWMTQ[FG0LWTIX] = FFXREC.FFXCHAR;
    ;
    /* ------------------------------------------------------------*/
    /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0LW00.FG0LWIDX > 12) /* Page is full*/
      FG0LW02.FG0LWNLD = FG0LW00.FG0LWIDX; /* nbr of lines loaded*/
      FG0L170(); /* Add page to temp storage*/
    else
      FG0LW00.FG0LWIDX = FG0LW00.FG0LWIDX + 1;
    end
    ;
    FG0L130(); /* fetch 'n2' dfcast.vffxrf01*/
    ;
  end
  ;
  FG0L180(); /* close 'c2' dfcast.vffxrf01 set*/
  ;
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0LW00.FG0LWIDX > 1) /* Page was formatted*/
    FG0LW02.FG0LWNLD = FG0LW00.FG0LWIDX - 1;
    FG0L170(); /* Add page to temp storage*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0LW00.TA5TSQIX == 0) /* No pages formatted*/
    ;
    FFWREC.XXXMODID = "100"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/
    ;
    return; /* Exit to continue processing*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* calculate monthly percents (column percents)*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0LW03.FG0LWUMT[FG0LWTIX] != 0)
    ;
    FG0LW00.FG0LWNM1 = FG0LW03.FG0LWUMT[FG0LWTIX];
    FG0LW00.FG0LWIDX = 1;
    while (FG0LW00.FG0LWIDX <= FFZREC.FFZNUMMO) /* nbr months loaded*/
      ;
      FG0LW00.FG0LWNM2 = FG0LW03.FG0LWUMT[FG0LWIDX] * 100;
      FG0LW03.FG0LWMPT[FG0LWIDX] = mathLib.round(FG0LW00.FG0LWNM2 / FG0LW00.FG0LWNM1, -mathLib.decimals(FG0LW03.FG0LWMPT[FG0LWIDX]));
      ;
      FG0LW00.FG0LWIDX = FG0LW00.FG0LWIDX + 1;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  FG0LW00.XXXTSPAG = 1; /* Desired page number*/
  FG0LW00.FG0LWPGX = 1; /* Page index*/
  FG0LW00.FG0LW-PAGP[1] = 1; /* Starting point of the 1st page*/
  FG0LW00.FG0LW-PAGS[1] = 1; /* Processed season of the 1st page*/
  FG0LW00.FG0LWSWR = "N"; /* Request for data switch*/
  FG0LW01.CACHGFL = "Y"; /* data is available for change*/
  ;
  ;
end // end FG0L100

// Calc program dates
Function FG0L110()
   /* ------------------------------------------------------------*/
   /* Obtain current date using routine xx0xs01.*/
   /* Obtain invoice date from dfcast.vffctl01.*/
   /* Calculate:*/
   /* - current month*/
   /* - current month - 1 month*/
   /* - current month - 2 months*/
   /* - current month - 3 months*/
   /* - current month - 4 months*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* Get current date*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01();
  ;
   /* ------------------------------------------------------------*/
   /* Obtain invoice cutoff date from dfcast.vffctl01*/
   /* ------------------------------------------------------------*/
  ;
  FG0L111(); /* get invoice cutoff date*/
  ;
   /* ------------------------------------------------------------*/
   /* calculate current month.*/
   /* ------------------------------------------------------------*/
  ;
  FG0LW00.FG0LWCWD = FF1REC.FF1IVCDT; /* work date*/
  ;
  if (XX0XW01.XX0XWDAT < FF1REC.FF1IVCDT)
    if (FG0LW00.FG0LWCMM == 1)
      FG0LW00.FG0LWCMM = 12;
      if (FG0LW00.FG0LWCYY == 00)
        FG0LW00.FG0LWCYY = 99;
        FG0LW00.FG0LWCCC = FG0LW00.FG0LWCCC - 1;
      else
        FG0LW00.FG0LWCYY = FG0LW00.FG0LWCYY - 1;
      end
    else
      FG0LW00.FG0LWCMM = FG0LW00.FG0LWCMM - 1;
    end
  end
  ;
  FG0LW00.FG0LW-CURR-MO = FG0LW00.FG0LWCYM; /* curr date ccyymm*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate current month minus 1 month*/
   /* ------------------------------------------------------------*/
  ;
  FG0LW00.FG0LWWDT = FG0LW00.FG0LW-CURR-MO;
  ;
  if (FG0LW00.FG0LWWMM == 1)
    FG0LW00.FG0LWWMM = 12;
    if (FG0LW00.FG0LWWYY == 00)
      FG0LW00.FG0LWWYY = 99;
      FG0LW00.FG0LWWCC = FG0LW00.FG0LWWCC - 1;
    else
      FG0LW00.FG0LWWYY = FG0LW00.FG0LWWYY - 1;
    end
  else
    FG0LW00.FG0LWWMM = FG0LW00.FG0LWWMM - 1;
  end
  ;
  FG0LW00.FG0LW-CURR-MO-MINUS1 = FG0LW00.FG0LWWDT;
  ;
  ;
  if (FFWREC.FFW-ND-SHP-IND == "N")
    /* ------------------------------------------------------------*/
    /* Calculate current month minus 2 months*/
    /* ------------------------------------------------------------*/
    ;
    FG0LW00.FG0LWWDT = FG0LW00.FG0LW-CURR-MO-MINUS1;
    ;
    if (FG0LW00.FG0LWWMM == 1)
      FG0LW00.FG0LWWMM = 12;
      if (FG0LW00.FG0LWWYY == 00)
        FG0LW00.FG0LWWYY = 99;
        FG0LW00.FG0LWWCC = FG0LW00.FG0LWWCC - 1;
      else
        FG0LW00.FG0LWWYY = FG0LW00.FG0LWWYY - 1;
      end
    else
      FG0LW00.FG0LWWMM = FG0LW00.FG0LWWMM - 1;
    end
    ;
    FG0LW00.FG0LW-CURR-MO-MINUS2 = FG0LW00.FG0LWWDT;
    ;
    /* ------------------------------------------------------------*/
    /* Calculate current month minus 3 months*/
    /* ------------------------------------------------------------*/
    ;
    FG0LW00.FG0LWWDT = FG0LW00.FG0LW-CURR-MO-MINUS2;
    ;
    if (FG0LW00.FG0LWWMM == 1)
      FG0LW00.FG0LWWMM = 12;
      if (FG0LW00.FG0LWWYY == 00)
        FG0LW00.FG0LWWYY = 99;
        FG0LW00.FG0LWWCC = FG0LW00.FG0LWWCC - 1;
      else
        FG0LW00.FG0LWWYY = FG0LW00.FG0LWWYY - 1;
      end
    else
      FG0LW00.FG0LWWMM = FG0LW00.FG0LWWMM - 1;
    end
    ;
    FG0LW00.FG0LW-CURR-MO-MINUS3 = FG0LW00.FG0LWWDT;
    ;
    /* ------------------------------------------------------------*/
    /* Calculate current month minus 4 months*/
    /* ------------------------------------------------------------*/
    ;
    FG0LW00.FG0LWWDT = FG0LW00.FG0LW-CURR-MO-MINUS3;
    ;
    if (FG0LW00.FG0LWWMM == 1)
      FG0LW00.FG0LWWMM = 12;
      if (FG0LW00.FG0LWWYY == 00)
        FG0LW00.FG0LWWYY = 99;
        FG0LW00.FG0LWWCC = FG0LW00.FG0LWWCC - 1;
      else
        FG0LW00.FG0LWWYY = FG0LW00.FG0LWWYY - 1;
      end
    else
      FG0LW00.FG0LWWMM = FG0LW00.FG0LWWMM - 1;
    end
    ;
    FG0LW00.FG0LW-CURR-MO-MINUS4 = FG0LW00.FG0LWWDT;
    ;
  end
  ;
  ;
end // end FG0L110

// get ivc dt from dfcast.vffctl
Function FG0L111()
   /* ------------------------------------------------------------*/
   /* obtain invoice cutoff date from dfcast.vffctl01*/
   /* ------------------------------------------------------------*/
  ;
  set FF1REC empty; /* Clear row storage area*/
  ;
  FF1REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FF1REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "111"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VFFCTL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF1REC.FF1GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0L111

// Select 's2' on dfcast.vffxrf01
Function FG0L120()
   /* ------------------------------------------------------------*/
   /* Select set on dfcast.vffxrf01 table.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* load ff2rec record - dfcast.vffxrf01*/
   /* ------------------------------------------------------------*/
  ;
  set FF2REC empty; /* Clear row storage area*/
  ;
  FF2REC.YSMXDV = "10"; /* div grp code*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* product type group*/
  FF2REC.XPLCD = FFWREC.XPLCD; /* product line group*/
  ;
   /* ------------------------------------------------------------*/
   /* select set dfcast.vffxrf01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("S2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
    return;
    ;
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "120"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S2 ON DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0L120

// fetch n2 dfcast.vffxrf01 row
Function FG0L130()
   /* ------------------------------------------------------------*/
   /* fetch dfcast.vffxrf01 row*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("N2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "130"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N2 DFCAST.VFFXRF01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0L130

// calc actl need mo sales
Function FG0L140()
   /* ------------------------------------------------------------*/
   /* Obtain historical need month based sales quantities.*/
   /* Load FH6REC record - dfhist.vctshp01, note:  ffabegmo and*/
   /* ffaendmo loaded in fg0l100.*/
   /* ------------------------------------------------------------*/
  ;
  FG0L-141();
  ;
  FG0LW00.FG0LWUHS = FG0LW00.FG0LWUHS + FH6REC.FH5MSHQT;
  ;
   /* --------------------------------------------------------*/
   /* check for carryover*/
   /* --------------------------------------------------------*/
  ;
  if (FFZREC.FFZINDMO[FG0LWPIX] <= FG0LW00.FG0LW-CURR-MO-MINUS1
   && FFZREC.FFZINDMO[FG0LWPIX] >= FG0LW00.FG0LW-CURR-MO-MINUS4)
    ;
    ;
    if (FFZREC.FFZINDMO[FG0LWPIX] == FG0LW00.FG0LW-CURR-MO-MINUS3
     || FFZREC.FFZINDMO[FG0LWPIX] == FG0LW00.FG0LW-CURR-MO-MINUS4)
      FG0L-143(); /* get open qtys from vfhcat01*/
      FH3REC.FH1PAQTY = FH3REC.FH1ALQTY + FH3REC.FH1PAQTY;
      FH3REC.FH1PAQTY = mathLib.round(FH3REC.FH1PAQTY * .5, -mathLib.decimals(FH3REC.FH1PAQTY));
      FG0LW00.FG0LWUHS = FG0LW00.FG0LWUHS + FH3REC.FH1PAQTY;
    end
    ;
    ;
    if (FFZREC.FFZINDMO[FG0LWPIX] == FG0LW00.FG0LW-CURR-MO-MINUS2)
      FFFREC.FFFFUNCD = "C2"; /* function code*/
      FG0L-145(); /* get open qtys from vfhcat01*/
      FG0LW00.FG0LWUHS = FG0LW00.FG0LWUHS + FH3REC.FH1PAQTY;
      ;
    end
    ;
    ;
    if (FFZREC.FFZINDMO[FG0LWPIX] == FG0LW00.FG0LW-CURR-MO-MINUS1)
      FFFREC.FFFFUNCD = "C1"; /* function code*/
      FG0L-145(); /* get open qtys from vfhcat01*/
      FG0LW00.FG0LWUHS = FG0LW00.FG0LWUHS + FH3REC.FH1PAQTY;
    end
  end
  ;
  ;
end // end FG0L140

// calc business month sales
Function FG0L150()
   /* ------------------------------------------------------------*/
   /* Obtain historical business (ship) month sales quantities.*/
   /* Load FH6REC record - dfhist.vctshp01, note:  ffabegmo and*/
   /* ffaendmo loaded in fg0l100.*/
   /* ------------------------------------------------------------*/
  ;
  set FH6REC empty;
  ;
  FH6REC.XPCCD = FF2REC.XPCCD; /* product catg code*/
  FH6REC.XPRCD = FF2REC.YPGCD; /* product type code*/
  FH6REC.XLCCD = "10"; /* life cycle code*/
  FH6REC.XQACD = "01"; /* quality code*/
  FH6REC.YSMXOT = "*"; /* sum code*/
  TA1PGMNM = "FG0L150"; /* calling process*/
  ;
   /* --------------------------------------------------*/
   /* select sum on dfhist.vlnshp01 table*/
   /* --------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "SB"; /* function code*/
  ;
  XSFFS-FF5520();
  ;
  FG0LW00.FG0LWUHS = FG0LW00.FG0LWUHS + FH6REC.FH5MSHQT - FH6REC.FH5RTSQT;
  ;
end // end FG0L150

// Calc forecast sales
Function FG0L160()
   /* --------------------------------------------------------*/
   /* obtain domestic forecast sale quantities*/
   /* --------------------------------------------------------*/
  ;
  FG0L-161(); /* obtain mltyp sales qty*/
  ;
  FG0LW00.FG0LWUHS = FF7REC.FF6SLFCT;
  ;
    /* --------------------------------------------------------*/
    /* If need month sales requested and processing current mo*/
    /* Back out carryover.*/
    /* --------------------------------------------------------*/
  if (FFWREC.FFW-ND-SHP-IND == "N"
   && FG0LW00.FG0LW-CURR-MO == FFFREC.FFFBEGMO)
    ;
    FFFREC.FFFBEGMO = FG0LW00.FG0LW-CURR-MO-MINUS1;
    FFFREC.FFFENDMO = FG0LW00.FG0LW-CURR-MO-MINUS1;
    FG0L-161(); /* obtain mltyp sales qty*/
    FG0LW00.FG0LWUHS = FG0LW00.FG0LWUHS - FF7REC.FF6SLFCT;
    FFFREC.FFFBEGMO = FFZREC.FFZINDMO[FG0LWPIX];
    FFFREC.FFFENDMO = FFZREC.FFZINDMO[FG0LWPIX];
  end
  ;
  ;
end // end FG0L160

// add temporary storage
Function FG0L170()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FG0LW02.XXXTSLEN = FG0LW00.XXXTSLEN;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (FG0LW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FG0LW02 empty; /* M001 display storage*/
    ;
    FG0LW00.FG0LWIDX = 1; /* Display line index*/
    ;
    FG0LW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "170"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0L170

// close 'c2' dfcast.vffxrf01
Function FG0L180()
   /* ------------------------------------------------------------*/
   /* close dfcast.vffxrf01 table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("C2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
    return;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "180"; /* Module identification*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE S2 DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0L180

// Format and converse the map
Function FG0L200()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* if no errors format map*/
    ;
    /* ------------------------------------------------------------*/
     /* format screen*/
    /* ------------------------------------------------------------*/
    ;
    set FG0LM001 initial; /* m001 input/ouput area*/
    ;
    /* ------------------------------------------------------------*/
     /* Format fg0lm001 using passed data*/
    /* ------------------------------------------------------------*/
    ;
    FG0LW00.FG0LWWDT = FFWREC.FFABEGMO; /* w/s date field*/
    FG0LM001.FG0LMBRG = FG0LW00.FG0LWWYM; /* begin month range*/
    FG0LW00.FG0LWWDT = FFWREC.FFAENDMO; /* w/s date field*/
    FG0LM001.FG0LMERG = FG0LW00.FG0LWWYM; /* end month range*/
    ;
    FG0LM001.YPGCD = FFWREC.YPGCD; /* product type group*/
    FG0LM001.YPGABRV = FFWREC.YPGABRV; /* product type group abrv*/
    ;
    FG0LM001.XPLCD = FFWREC.XPLCD; /* product line code*/
    FG0LM001.XPLABRV = FFWREC.XPLABRV; /* product line abrv*/
    ;
    FG0LM001.FFW-ND-SHP-IND = FFWREC.FFW-ND-SHP-IND;
    ;
    FG0LM001.FG0LMSEM[1] = FFWREC.FFWENDM1; /* season end month*/
    FG0LM001.FG0LMSEM[2] = FFWREC.FFWENDM2; /* season end month*/
    FG0LM001.FG0LMSEM[3] = FFWREC.FFWENDM3; /* season end month*/
    FG0LM001.FG0LMSEM[4] = FFWREC.FFWENDM4; /* season end month*/
    ;
    if (FG0LW00.FG0LWSWF == "Y") /* map must be formatted*/
      FG0L210(); /* Format the data on the map*/
    end
    ;
  else
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* load message number*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format page, date, and FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0LW00.TA5TSQIX > 0)
    set FG0LM001.XXXLITPG skip;
    FG0LM001.XXXTSPAG = FG0LW00.XXXTSPAG; /* Current page*/
    set FG0LM001.XXXLITOF skip;
    FG0LM001.TA5TSQIX = FG0LW00.TA5TSQIX; /* max pages*/
  end
  ;
  FG0LM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FG0LM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG0LM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* error message number*/
    FG0LM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    set FG0LM001 alarm; /* Indicate sound alarm*/
  end
  ;
  converse FG0LM001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0;
  ;
  COMMAREA.CATOAP = FG0LM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG0LM001.CAITEM; /* Application data*/
  ;
end // end FG0L200

// Format the display data
Function FG0L210()
  ;
  FG0LW00.FG0LWSWF = "N"; /* init map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* if data has not been loaded bypass load map fiecds*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0LW01.CACHGFL != "Y")
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* load monthly headings yymm*/
   /* ------------------------------------------------------------*/
  set FG0LM001.FG0LMSH1 skip; /* catg literal*/
  ;
  FG0LW00.FG0LWLIX = 1;
  FG0LW00.FG0LWIDX = FG0LW00.FG0LW-PAGP[FG0LWPGX];
  ;
  if (FG0LW00.FG0LW-PMON[FG0LWPGX] == "Y") /* print the remaining month check*/
    FG0L211();
  else
    FG0L212();
    FG0L213();
  end
   /* ------------------------------------------------------------*/
   /* obtain category sale qtys from temporary storage*/
   /* ------------------------------------------------------------*/
  ;
  FG0LS05(); /* read temporary storage*/
  ;
  FG0LW00.FG0LWPIX = 1;
  while (FG0LW00.FG0LWPIX <= FG0LW02.FG0LWNLD) /* process temp storage*/
    ;
    FG0LM001.FG0LMCDS[FG0LWPIX] = FG0LW02.XPCSDESC[FG0LWPIX];
    FG0LW00.FG0LWLQT = FG0LW02.FG0LWQTS[FG0LWPIX];
    ;
    /* ----------------------------------------------------------*/
     /* reformat category quantities using working storage*/
     /* and calculate category subtotal*/
    /* ----------------------------------------------------------*/
    ;
    FG0LW00.FG0LWLIX = 1; /* load index*/
    move 0 to FG0LW00.FG0LWUST[1] for all; /* product line subtotal*/
    FG0LW00.FG0LWIDX = FG0LW00.FG0LW-PAGP[FG0LWPGX];
    move " " to FG0LW00.FG0LWWQT[1] for all; /* clear w/s display table*/
    ;
    if (FG0LW00.FG0LW-PMON[FG0LWPGX] == "Y") /* remaining month check*/
      FG0L214(); /* move remaining month*/
    else
      FG0L215(); /* move monthly qtys*/
      FG0L216(); /* move total line qtys*/
    end
    /* ----------------------------------------------------------*/
     /* load category quantities to m001*/
    /* ----------------------------------------------------------*/
    ;
    FG0LM001.FG0LMQ01[FG0LWPIX] = FG0LW00.FG0LWWQT[1];
    FG0LM001.FG0LMQ02[FG0LWPIX] = FG0LW00.FG0LWWQT[2];
    FG0LM001.FG0LMQ03[FG0LWPIX] = FG0LW00.FG0LWWQT[3];
    FG0LM001.FG0LMQ04[FG0LWPIX] = FG0LW00.FG0LWWQT[4];
    FG0LM001.FG0LMQ05[FG0LWPIX] = FG0LW00.FG0LWWQT[5];
    FG0LM001.FG0LMQ06[FG0LWPIX] = FG0LW00.FG0LWWQT[6];
    FG0LM001.FG0LMQ07[FG0LWPIX] = FG0LW00.FG0LWWQT[7];
    FG0LM001.FG0LMQ08[FG0LWPIX] = FG0LW00.FG0LWWQT[8];
    FG0LM001.FG0LMQ09[FG0LWPIX] = FG0LW00.FG0LWWQT[9];
    FG0LM001.FG0LMQ10[FG0LWPIX] = FG0LW00.FG0LWWQT[10];
    ;
    FG0LW00.FG0LWPIX = FG0LW00.FG0LWPIX + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* load category monthly totals*/
   /* ------------------------------------------------------------*/
  ;
  FG0LM001.FG0LMCDS[FG0LWPIX] = "TOTAL QTY   ";
  ;
  FG0LW00.FG0LWUMT = 0;
  move " " to FG0LW00.FG0LWWQT[1] for all; /* clear w/s display table*/
  FG0LW00.FG0LWLIX = 1; /* load index*/
  FG0LW00.FG0LWIDX = FG0LW00.FG0LW-PAGP[FG0LWPGX];
  ;
  if (FG0LW00.FG0LW-PMON[FG0LWPGX] == "Y") /* remaining month check*/
    FG0L217(); /* move remaining month total*/
  else
    FG0L218(); /* move monthly total qtys*/
    FG0L219(); /* move total line total qtys*/
  end
   /* ----------------------------------------------------------*/
   /* load category monthly total quantities to m001*/
   /* ----------------------------------------------------------*/
  ;
  FG0LM001.FG0LMQ01[FG0LWPIX] = FG0LW00.FG0LWWQT[1];
  FG0LM001.FG0LMQ02[FG0LWPIX] = FG0LW00.FG0LWWQT[2];
  FG0LM001.FG0LMQ03[FG0LWPIX] = FG0LW00.FG0LWWQT[3];
  FG0LM001.FG0LMQ04[FG0LWPIX] = FG0LW00.FG0LWWQT[4];
  FG0LM001.FG0LMQ05[FG0LWPIX] = FG0LW00.FG0LWWQT[5];
  FG0LM001.FG0LMQ06[FG0LWPIX] = FG0LW00.FG0LWWQT[6];
  FG0LM001.FG0LMQ07[FG0LWPIX] = FG0LW00.FG0LWWQT[7];
  FG0LM001.FG0LMQ08[FG0LWPIX] = FG0LW00.FG0LWWQT[8];
  FG0LM001.FG0LMQ09[FG0LWPIX] = FG0LW00.FG0LWWQT[9];
  FG0LM001.FG0LMQ10[FG0LWPIX] = FG0LW00.FG0LWWQT[10];
  ;
  FG0LW00.FG0LWPIX = FG0LW00.FG0LWPIX + 1;
  ;
   /* ------------------------------------------------------------*/
   /* load category monthly percents*/
   /* ------------------------------------------------------------*/
  ;
  FG0LM001.FG0LMCDS[FG0LWPIX] = "TOTAL PCT   ";
  ;
  move " " to FG0LW00.FG0LWWQT[1] for all; /* clear w/s display table*/
  FG0LW00.FG0LWLIX = 1; /* load index*/
  FG0LW00.FG0LWIDX = FG0LW00.FG0LW-PAGP[FG0LWPGX];
  ;
  if (FG0LW00.FG0LW-PMON[FG0LWPGX] == "Y") /* remaining month check*/
    FG0L220(); /* move remaining month pct*/
  else
    FG0L221(); /* move monthly pct*/
    FG0L222(); /* move total line pct*/
  end
   /* ----------------------------------------------------------*/
   /* load category monthly percents*/
   /* ----------------------------------------------------------*/
  ;
  FG0LM001.FG0LMQ01[FG0LWPIX] = FG0LW00.FG0LWWQT[1];
  FG0LM001.FG0LMQ02[FG0LWPIX] = FG0LW00.FG0LWWQT[2];
  FG0LM001.FG0LMQ03[FG0LWPIX] = FG0LW00.FG0LWWQT[3];
  FG0LM001.FG0LMQ04[FG0LWPIX] = FG0LW00.FG0LWWQT[4];
  FG0LM001.FG0LMQ05[FG0LWPIX] = FG0LW00.FG0LWWQT[5];
  FG0LM001.FG0LMQ06[FG0LWPIX] = FG0LW00.FG0LWWQT[6];
  FG0LM001.FG0LMQ07[FG0LWPIX] = FG0LW00.FG0LWWQT[7];
  FG0LM001.FG0LMQ08[FG0LWPIX] = FG0LW00.FG0LWWQT[8];
  FG0LM001.FG0LMQ09[FG0LWPIX] = FG0LW00.FG0LWWQT[9];
  FG0LM001.FG0LMQ10[FG0LWPIX] = FG0LW00.FG0LWWQT[10];
  ;
  ;
end // end FG0L210

// Print the remaining month hdg
Function FG0L211()
   /* ----------------------------------------------------------------------*/
   /* Print whatever are left from the previous page.*/
   /* (Month headings, Percent, Range total and Percent or subtotal,*/
   /* Range total and percent)*/
   /*  */
   /* load subtotal/total/percent literals*/
   /*  */
   /* ----------------------------------------------------------------------*/
  ;
  FG0LW00.FG0LWREM = FG0LW00.FG0LWSIN[FG0LWSNX] - 6; /* remaining mos*/
  ;
  while (FG0LW00.FG0LWIDX <= FFZREC.FFZNUMMO /* nbr of mos loaded*/
   && FG0LW00.FG0LWLIX <= FG0LW00.FG0LWREM) /* nbr of mos left*/
    ;
    FG0LM001.FG0LMHD2[FG0LWLIX] = FFZREC.FFZIYYMM[FG0LWIDX];
    set FG0LM001.FG0LMHD2[FG0LWLIX] skip;
    ;
    FG0LW00.FG0LWIDX = FG0LW00.FG0LWIDX + 1; /* increment index*/
    FG0LW00.FG0LWLIX = FG0LW00.FG0LWLIX + 1; /* increment load index*/
    ;
  end
  ;
  FG0LS10(); /* load heading literals*/
  ;
end // end FG0L211

// Move the monthly heading
Function FG0L212()
  ;
  while (FG0LW00.FG0LWIDX <= FFZREC.FFZNUMMO            /* nbr of mos loaded*/
   && FG0LW00.FG0LWLIX <= FG0LW00.FG0LWSIN[FG0LWSNX] /* no of mo in sesn*/
   && FG0LW00.FG0LWLIX <= 6)
    ;
    FG0LM001.FG0LMHD2[FG0LWLIX] = FFZREC.FFZIYYMM[FG0LWIDX];
    set FG0LM001.FG0LMHD2[FG0LWLIX] skip;
    ;
    FG0LW00.FG0LWIDX = FG0LW00.FG0LWIDX + 1; /* increment index*/
    FG0LW00.FG0LWLIX = FG0LW00.FG0LWLIX + 1; /* increment load index*/
    ;
  end
end // end FG0L212

// move total and pct heading
Function FG0L213()
   /* --------------------------------------------------------*/
   /* move the totals and pct headings*/
   /* --------------------------------------------------------*/
  ;
  if (FG0LW00.FG0LWLIX > FG0LW00.FG0LWSIN[FG0LWSNX]) /* load the whole sesn*/
    ;
    FG0LS10(); /* load heading literals*/
    ;
  end
  ;
end // end FG0L213

// Move the remaining month
Function FG0L214()
  ;
   /* ----------------------------------------------------------------------*/
   /* Print whatever are left from the previous page.*/
   /* (Month, Percent, Range total and Percent or subtotal, Range total*/
   /* percent)*/
   /*  */
   /* load subtotal/total/percent*/
   /*  */
   /* ----------------------------------------------------------------------*/
  ;
   /* --------------------------------------------------------------*/
   /* print remaining months, subtotal, range total and pct fields*/
   /* --------------------------------------------------------------*/
  ;
  ;
  FG0LW00.FG0LWSIX = FG0LW00.FG0LWIDX - 6;
  while (FG0LW00.FG0LWSIX < FG0LW00.FG0LWIDX)
    FG0LW00.FG0LWUST[FG0LWPIX] = FG0LW00.FG0LWUQT[FG0LWSIX] +                                 FG0LW00.FG0LWUST[FG0LWPIX];
    FG0LW00.FG0LWSIX = FG0LW00.FG0LWSIX + 1;
  end
  ;
   /* remaining mos*/
  FG0LW00.FG0LWREM = FG0LW00.FG0LWSIN[FG0LWSNX] - 6;
  while (FG0LW00.FG0LWIDX <= FFZREC.FFZNUMMO  /* nbr of mos loaded*/
   && FG0LW00.FG0LWLIX <= FG0LW00.FG0LWREM /* nbr of mos left*/
   && FG0LW00.FG0LWLIX <= 6) /* right end*/
    ;
    FG0LW00.FG0LWWQT[FG0LWLIX] = FG0LW00.FG0LWQTY[FG0LWIDX];
    ;
    FG0LW00.FG0LWUST[FG0LWPIX] = FG0LW00.FG0LWUQT[FG0LWIDX] +                                FG0LW00.FG0LWUST[FG0LWPIX];
    ;
    FG0LW00.FG0LWIDX = FG0LW00.FG0LWIDX + 1; /* increment work index*/
    FG0LW00.FG0LWLIX = FG0LW00.FG0LWLIX + 1; /* increment load index*/
    ;
  end
  ;
  FG0LS20(); /* subtotal and range total*/
  ;
end // end FG0L214

// Move the monthly qty
Function FG0L215()
  ;
  while (FG0LW00.FG0LWIDX <= FFZREC.FFZNUMMO            /* nbr mos loaded*/
   && FG0LW00.FG0LWLIX <= FG0LW00.FG0LWSIN[FG0LWSNX] /* no mos in sesn*/
   && FG0LW00.FG0LWLIX <= 6)
    ;
    FG0LW00.FG0LWWQT[FG0LWLIX] = FG0LW00.FG0LWQTY[FG0LWIDX];
    FG0LW00.FG0LWUST[FG0LWPIX] = FG0LW00.FG0LWUQT[FG0LWIDX] +                                  FG0LW00.FG0LWUST[FG0LWPIX];
    ;
    FG0LW00.FG0LWIDX = FG0LW00.FG0LWIDX + 1; /* increment save index*/
    FG0LW00.FG0LWLIX = FG0LW00.FG0LWLIX + 1; /* increment load index*/
    ;
  end
  ;
end // end FG0L215

// Move the total line
Function FG0L216()
  if (FG0LW00.FG0LWLIX > FG0LW00.FG0LWSIN[FG0LWSNX]) /* load the whole sesn*/
    ;
    FG0LS20(); /* move subtotal, total and pcts*/
    ;
  end
end // end FG0L216

// Move the remaining month total
Function FG0L217()
  ;
   /* ----------------------------------------------------------------------*/
   /* Print whatever are left from the previous page.*/
   /* (Month, Percent, Range total and Percent or subtotal, Range total*/
   /* percent)*/
   /*  */
   /* load subtotal/total/percent for the total line*/
   /*  */
   /* ----------------------------------------------------------------------*/
  ;
   /* --------------------------------------------------------------*/
   /* print remaining months, subtotal, range total and pct fields*/
   /* --------------------------------------------------------------*/
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* since pf10 is going backward to the 1st page and subtotal*/
   /* will still be 0. So if pf10 and the 2nd (right) page is*/
   /* reached, then the calculation of subtotal in the 1st*/
   /* page is necessary.*/
   /* ---------------------------------------------------------------*/
  ;
  FG0LW00.FG0LWSIX = FG0LW00.FG0LWIDX - 6;
  while (FG0LW00.FG0LWSIX < FG0LW00.FG0LWIDX)
    FG0LW00.FG0LWUMT = FG0LW03.FG0LWUMT[FG0LWSIX] +                      FG0LW00.FG0LWUMT;
    FG0LW00.FG0LWSIX = FG0LW00.FG0LWSIX + 1;
  end
  ;
  FG0LW00.FG0LWREM = FG0LW00.FG0LWSIN[FG0LWSNX] - 6; /* remaining mos*/
  ;
  while (FG0LW00.FG0LWIDX <= FFZREC.FFZNUMMO  /* nbr of mos loaded*/
   && FG0LW00.FG0LWLIX <= FG0LW00.FG0LWREM /* nbr of mos left*/
   && FG0LW00.FG0LWLIX <= 6) /* right end*/
    ;
    FG0LW00.FG0LWWQT[FG0LWLIX] = FG0LW03.FG0LWMTQ[FG0LWIDX];
    FG0LW00.FG0LWUMT = FG0LW03.FG0LWUMT[FG0LWIDX] + FG0LW00.FG0LWUMT;
    ;
    FG0LW00.FG0LWIDX = FG0LW00.FG0LWIDX + 1; /* increment work index*/
    FG0LW00.FG0LWLIX = FG0LW00.FG0LWLIX + 1; /* increment load index*/
    ;
  end
  ;
  FG0LS30(); /* process tots for total line*/
  ;
end // end FG0L217

// Move the montly total
Function FG0L218()
  ;
  while (FG0LW00.FG0LWIDX <= FFZREC.FFZNUMMO            /* nbr mos loaded*/
   && FG0LW00.FG0LWLIX <= FG0LW00.FG0LWSIN[FG0LWSNX] /* nbr mos requested*/
   && FG0LW00.FG0LWLIX <= 6)
    ;
    FG0LW00.FG0LWWQT[FG0LWLIX] = FG0LW03.FG0LWMTQ[FG0LWIDX];
    FG0LW00.FG0LWUMT = FG0LW03.FG0LWUMT[FG0LWIDX] + FG0LW00.FG0LWUMT;
    ;
    FG0LW00.FG0LWIDX = FG0LW00.FG0LWIDX + 1; /* increment save index*/
    FG0LW00.FG0LWLIX = FG0LW00.FG0LWLIX + 1; /* increment load index*/
    ;
  end
  ;
end // end FG0L218

// move subtot & tot for tot line
Function FG0L219()
   /* --------------------------------------------------------*/
   /* move the totals and pct*/
   /* --------------------------------------------------------*/
  ;
  if (FG0LW00.FG0LWLIX > FG0LW00.FG0LWSIN[FG0LWSNX]) /* load the whole sesn*/
    ;
    FG0LS30(); /* translate and load subtotal and total*/
    ;
  end
end // end FG0L219

// Move remaining month pct
Function FG0L220()
  ;
   /* ----------------------------------------------------------------------*/
   /* Print whatever are left from the previous page.*/
   /* (Monthly percent or subtotal percent)*/
   /*  */
   /* load subtotal percent for the percent line*/
   /*  */
   /* ----------------------------------------------------------------------*/
  ;
   /* --------------------------------------------------------------*/
   /* print remaining months and subtotal*/
   /* --------------------------------------------------------------*/
  ;
  FG0LW00.FG0LWREM = FG0LW00.FG0LWSIN[FG0LWSNX] - 6; /* remaining mos*/
  ;
  while (FG0LW00.FG0LWIDX <= FFZREC.FFZNUMMO  /* nbr of mos loaded*/
   && FG0LW00.FG0LWLIX <= FG0LW00.FG0LWREM /* nbr of mos left*/
   && FG0LW00.FG0LWLIX <= 6) /* right end*/
    ;
    if (FG0LW03.FG0LWUMT[FG0LWTIX] > 0)
      FG0LW00.FG0LWNM1 = FG0LW03.FG0LWUMT[FG0LWIDX] * 100;
      FG0LW00.FG0LWNPT = mathLib.round(FG0LW00.FG0LWNM1 /                        FG0LW03.FG0LWUMT[FG0LWTIX], -mathLib.decimals(FG0LW00.FG0LWNPT));
      ;
      /* ----------------------------------------------------------*/
       /* zero suppress the percent field*/
      /* ----------------------------------------------------------*/
      ;
      if (FG0LW00.FG0LWNPT != 0)
        FG0LW00.FG0LWPTW = FG0LW00.FG0LWNP1;
        FG0LW00.FG0LWPTP = ".";
        FG0LW00.FG0LWPTD = FG0LW00.FG0LWNP2;
        ;
        if (FG0LW00.FG0LWPT1 == "0")
          FG0LW00.FG0LWPT1 = " ";
          if (FG0LW00.FG0LWPT2 == "0")
            FG0LW00.FG0LWPT2 = " ";
          end
        end
        ;
        FG0LW00.FG0LWWQT[FG0LWLIX] = FG0LW00.FG0LWPCT;
        ;
      end
    end
    ;
    FG0LW00.FG0LWIDX = FG0LW00.FG0LWIDX + 1; /* increment work index*/
    FG0LW00.FG0LWLIX = FG0LW00.FG0LWLIX + 1; /* increment load index*/
    ;
  end
  ;
  FG0LS40(); /* translate and load subtotal*/
  ;
  FG0LW00.FG0LW-NEXT = "Y"; /* next season*/
  ;
end // end FG0L220

// Move the monthly pct
Function FG0L221()
  ;
  while (FG0LW00.FG0LWIDX <= FFZREC.FFZNUMMO            /* nbr mos loaded*/
   && FG0LW00.FG0LWLIX <= FG0LW00.FG0LWSIN[FG0LWSNX] /* nbr mos requested*/
   && FG0LW00.FG0LWLIX <= 6)
    ;
    /* ----------------------------------------------------------*/
     /* calculate and load category monthly percents*/
    /* ----------------------------------------------------------*/
    ;
    if (FG0LW03.FG0LWUMT[FG0LWTIX] > 0)
      FG0LW00.FG0LWNM1 = FG0LW03.FG0LWUMT[FG0LWIDX] * 100;
      FG0LW00.FG0LWNPT = mathLib.round(FG0LW00.FG0LWNM1 / FG0LW03.FG0LWUMT[FG0LWTIX], -mathLib.decimals(FG0LW00.FG0LWNPT));
      ;
      /* ----------------------------------------------------------*/
       /* zero suppress the percent field*/
      /* ----------------------------------------------------------*/
      ;
      if (FG0LW00.FG0LWNPT != 0)
        FG0LW00.FG0LWPTW = FG0LW00.FG0LWNP1;
        FG0LW00.FG0LWPTP = ".";
        FG0LW00.FG0LWPTD = FG0LW00.FG0LWNP2;
        ;
        if (FG0LW00.FG0LWPT1 == "0")
          FG0LW00.FG0LWPT1 = " ";
          if (FG0LW00.FG0LWPT2 == "0")
            FG0LW00.FG0LWPT2 = " ";
          end
        end
        ;
        FG0LW00.FG0LWWQT[FG0LWLIX] = FG0LW00.FG0LWPCT;
        ;
      end
    end
    ;
    FG0LW00.FG0LWIDX = FG0LW00.FG0LWIDX + 1; /* increment work index*/
    FG0LW00.FG0LWLIX = FG0LW00.FG0LWLIX + 1; /* increment load index*/
    ;
  end
  ;
end // end FG0L221

// Move the total pct
Function FG0L222()
  ;
   /* --------------------------------------------------------*/
   /* move the totals and pct*/
   /* --------------------------------------------------------*/
  ;
  if (FG0LW00.FG0LWLIX > FG0LW00.FG0LWSIN[FG0LWSNX]) /* load the whole sesn*/
    ;
    FG0LS40(); /* translate and load subtotal*/
    ;
    if (FG0LW00.FG0LWIDX > FFZREC.FFZNUMMO) /* Reach the no of mo reqstd*/
      ;
    else
      FG0LW00.FG0LW-NEXT = "Y"; /* next season*/
    end
    ;
  else
    ;
    FG0LW00.FG0LWSIX = FG0LW00.FG0LWPGX + 1;
    FG0LW00.FG0LW-PMON[FG0LWSIX] = "Y";
    ;
  end
end // end FG0L222

// Check attention identifier
Function FG0L300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    converseLib.clearScreen();
     /* refresh map*/
    ;
    FG0LW00.FG0LWSWF = "Y"; /* format screen m001*/
    FG0LW00.FG0LWSWR = "N"; /* request for data*/
    ;
    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0LM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      FG0LS01(); /* purge temp storage*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
      FG0LW00.FG0LWSWF = "Y"; /* format screen m001*/
      FG0LW00.FG0LWSWR = "N"; /* request for data*/
      ;
      set FG0LM001.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG0LM001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FG0A"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FG0K"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FG0M"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "FG0N"; /* TO application*/
    end
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    FG0LW00.FG0LWSWF = "Y"; /* format screen m001*/
    FG0LW00.FG0LWSWR = "N"; /* request for data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* pf7 was not pressed*/
   && converseVar.eventKey not pf8   /* pf8 was not pressed*/
   && converseVar.eventKey not pf10  /* pf10 was not pressed*/
   && converseVar.eventKey not pf11  /* pf11 was not pressed*/
  )                                 
    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FG0L300

// Reset highlighted fields
Function FG0L400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FG0LM001.FG0LMBRG initialAttributes; /* begin range*/
  set FG0LM001.FG0LMERG initialAttributes; /* end range*/
  set FG0LM001.XPLCD initialAttributes; /* product line code*/
  set FG0LM001.YPGCD initialAttributes; /* product type group*/
  set FG0LM001.FFW-ND-SHP-IND initialAttributes; /* need/ship month ind*/
  set FG0LM001.FG0LMSEM[1] initialAttributes; /* nbr of months per season*/
  set FG0LM001.FG0LMSEM[2] initialAttributes; /* nbr of months per season*/
  set FG0LM001.FG0LMSEM[3] initialAttributes; /* nbr of months per season*/
  set FG0LM001.FG0LMSEM[4] initialAttributes; /* nbr of months per season*/
  ;
  set FG0LM001.CATOAP initialAttributes;
  set FG0LM001.CAITEM initialAttributes;
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0LM001.YPGCD == "?" /* product type group*/
   || FG0LM001.XPLCD == "?") /* product line code*/
    ;
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  else
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type group codes*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0LM001.YPGCD == "?") /* product type grp list*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT TYPE GROUP"; /* Heading*/
    ;
    XX0XW02.YPGFFFL = "Y"; /* init flag*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0LM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FG0LM001.YPGABRV = FFWREC.YPGABRV; /* Restore prior code*/
    else
      FG0LM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FG0LM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG0LM001.YPGCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type group codes*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0LM001.XPLCD == "?") /* product type grp list*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT LINE CODES"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      XPLREC.XPLCD = FFWREC.XPLCD; /* product line code*/
      XPLREC.XGPCD = COMMAREA.XGPCD; /* gpc code*/
      if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
        FG0LM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
      end
    else
      FG0LM001.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FG0LM001.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG0LM001.XPLCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0L400

// Verify the entered data
Function FG0L500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FG0LM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* verify request to scroll forward(pf7) or backwards(pf8)*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    ;
    FG0L510(); /* verify scroll fwrd/back request*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* verify request to scroll right(pf11) or left(pf10)*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10
   || converseVar.eventKey is pf11)
    ;
    FG0L520(); /* verify scroll left/right*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if ezeaid not equal to enter verify modifiable fields*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter)
    ;
    FG0LS06(); /* verify modifiable fields*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate entry fields*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter)
    ;
    FG0LW00.FG0LWWYM = FFWREC.FFABEGMO; /* begin month*/
    FG0LW00.FG0LW-WYM1 = FFWREC.FFAENDMO; /* end month*/
    ;
    if (FG0LM001.FG0LMSEM[1] != FG0LW00.FG0LWSEM[1] /* sesn end month*/
     || FG0LM001.FG0LMSEM[1] != FG0LW00.FG0LWSEM[2] /* sesn end month*/
     || FG0LM001.FG0LMSEM[2] != FG0LW00.FG0LWSEM[3] 
     || FG0LM001.FG0LMSEM[3] != FG0LW00.FG0LWSEM[4] 
     || FG0LM001.FFW-ND-SHP-IND != FG0LW00.FFW-ND-SHP-IND
     || FG0LM001.FFW-ND-SHP-IND == " "              
     || FG0LM001.XPLCD != FFWREC.XPLCD              /* product line changed*/
     || FG0LM001.XPLCD == "  "                      
     || FG0LM001.YPGCD != FFWREC.YPGCD              /* product type grp chg*/
     || FG0LM001.YPGCD == " "                       /* product type grp chg*/
     || FG0LM001.FG0LMBRG != FG0LW00.FG0LWWYM       /* beg range changed*/
     || FG0LM001.FG0LMBRG == 0                      /* beg range changed*/
     || FG0LM001.FG0LMERG != FG0LW00.FG0LW-WYM1     /* end range changed*/
     || FG0LM001.FG0LMERG == 0)                     /* end range changed*/
      ;
      FG0LW00.FG0LWSNX = 1; /* season index*/
      FG0LW00.FG0LWPGX = 1; /* page index*/
      FG0LW00.XXXTSPAG = 1; /* page number*/
      move "N" to FG0LW00.FG0LW-PMON[1] for all; /* print remaining month flag*/
      FG0LW00.FG0LW-NEXT = "N"; /* next season flag*/
      FG0LW00.FG0LWUMT = 0;
      move 0 to FG0LW00.FG0LWUST[1] for all;
      ;
    end
    ;
    FG0L530(); /* validate entry fields*/
    ;
    /* ------------------------------------------------------*/
     /* if key data changed check modifiable fields*/
    /* ------------------------------------------------------*/
    ;
    FG0LW00.FG0LWWYM = FFWREC.FFABEGMO; /* begin month*/
    FG0LW00.FG0LW-WYM1 = FFWREC.FFAENDMO; /* end month*/
    ;
    if (FG0LM001.XPLCD != FFWREC.XPLCD          /* product line changed*/
     || FG0LM001.XPLCD == "  "                  
     || FG0LM001.YPGCD != FFWREC.YPGCD          /* product type grp chg*/
     || FG0LM001.YPGCD == " "                   /* product type grp chg*/
     || FG0LM001.FFW-ND-SHP-IND != FG0LW00.FFW-ND-SHP-IND
     || FG0LM001.FFW-ND-SHP-IND == " "          
     || FG0LM001.FG0LMBRG != FG0LW00.FG0LWWYM   /* beg range changed*/
     || FG0LM001.FG0LMBRG == 0                  /* beg range changed*/
     || FG0LM001.FG0LMERG != FG0LW00.FG0LW-WYM1 /* end range changed*/
     || FG0LM001.FG0LMERG == 0)                 /* end range changed*/
      ;
      if (converseVar.validationMsgNum == 0)
        FG0LW00.FG0LWSWR = "Y"; /* request data request*/
      end
      ;
    end
    ;
  end
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end
  ;
  ;
end // end FG0L500

// verify scroll fwrd/back
Function FG0L510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FG0LW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FG0LW00.XXXTSPAG >= FG0LW00.TA5TSQIX) /* and no more pages*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/
    ;
  end
  ;
  ;
end // end FG0L510

// verify scroll left/right
Function FG0L520()
   /* ------------------------------------------------------------*/
   /* If scroll left was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* Scroll left request*/
    if (FG0LW00.FG0LWPGX == 1) /* and no previous pages*/
      ;
      FFWREC.XXXMODID = "520"; /* Module identification*/
      converseLib.validationFailed(23); /* No previous page to display*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll right was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11 /* Scroll right request*/
   && FG0LW00.FG0LWIDX > FFZREC.FFZNUMMO) /* and no more pages*/
    ;
    FFWREC.XXXMODID = "520"; /* Module identification*/
    converseLib.validationFailed(24); /* No more pages to display*/
    ;
  end
  ;
  ;
end // end FG0L520

// validate modifiable data
Function FG0L530()
  set FFZREC empty;
  ;
  FFZREC.FFZMONTH = 1;
  FFZREC.FFZSRANG = "Y";
  FFZREC.FFZBYYMM = FG0LM001.FG0LMBRG;
  FFZREC.FFZEYYMM = FG0LM001.FG0LMERG;
  ;
  XSFFS30(); /* edit date range*/
  ;
   /* ------------------------------------------------------------*/
   /* validate season end month*/
   /* ------------------------------------------------------------*/
  ;
  FG0LS50(); /* verify season end month*/
  ;
   /* ------------------------------------------------------------*/
   /* check need / ship indicator*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0LM001.FFW-ND-SHP-IND == "N"
   || FG0LM001.FFW-ND-SHP-IND == "S"
  )
    /* valid entry*/
    ;
  else
    converseLib.validationFailed(10);
    FFWREC.XXXMODID = "530";
    set FG0LM001.FFW-ND-SHP-IND cursor, bold;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate product type group*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0LM001.YPGCD != "*")
    if (FG0LM001.YPGCD in YPGTBL.YPGCD
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      FG0LM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
    else
      FG0LM001.YPGABRV = " ";
      converseLib.validationFailed(118);
      FFWREC.XXXMODID = "530";
      set FG0LM001.YPGCD cursor, bold;
    end
  else
    FG0LM001.YPGABRV = "ALL";
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate product line code*/
   /* ------------------------------------------------------------*/
  ;
  XPLREC.XGPCD = COMMAREA.XGPCD;
  XPLREC.XPLCD = FG0LM001.XPLCD;
  if (XPLREC.XPLKEY in XPLTBL.XPLKEY
   && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    FG0LM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
  else
    FG0LM001.XPLABRV = " ";
    converseLib.validationFailed(118);
    FFWREC.XXXMODID = "530";
    set FG0LM001.XPLCD cursor, bold;
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate end yymm range and begin yymm range*/
   /* ------------------------------------------------------------*/
  ;
  if (FFZREC.FFZENDRC == "1")
    set FG0LM001.FG0LMERG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "530";
  else
    if (FFZREC.FFZENDRC == "2")
      set FG0LM001.FG0LMERG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "530";
    else
      if (FFZREC.FFZENDRC == "3")
        set FG0LM001.FG0LMERG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "530";
      end
    end
  end
  ;
  if (FFZREC.FFZBEGRC == "1")
    set FG0LM001.FG0LMBRG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "530";
  else
    if (FFZREC.FFZBEGRC == "2")
      set FG0LM001.FG0LMBRG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "530";
    else
      if (FFZREC.FFZBEGRC == "3")
        set FG0LM001.FG0LMBRG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "530";
      end
    end
  end
  ;
  ;
end // end FG0L530

// Process valid input request
Function FG0L600()
   /* ------------------------------------------------------------*/
   /* indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/
  ;
  FG0LW00.FG0LWSWF = "Y"; /* set format map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA/ffwrec*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XPLCD = FG0LM001.XPLCD; /* product line code*/
  FFWREC.XPLABRV = FG0LM001.XPLABRV; /* product line abrv desc*/
  ;
  FFWREC.YPGCD = FG0LM001.YPGCD; /* product type grp code*/
  FFWREC.YPGABRV = FG0LM001.YPGABRV; /* product type grp abrv desc*/
  ;
  FG0LW00.FFW-ND-SHP-IND = FG0LM001.FFW-ND-SHP-IND;
  FFWREC.FFW-ND-SHP-IND = FG0LM001.FFW-ND-SHP-IND;
  ;
  FFWREC.FFWENDM1 = FG0LW00.FG0LWSMO[1]; /* season end month*/
  FFWREC.FFWENDM2 = FG0LW00.FG0LWSMO[2]; /* season end month*/
  FFWREC.FFWENDM3 = FG0LW00.FG0LWSMO[3]; /* season end month*/
  FFWREC.FFWENDM4 = FG0LW00.FG0LWSMO[4]; /* season end month*/
  ;
  FFWREC.FFABEGMO = FFZREC.FFZBEGMO;
  FFWREC.FFAENDMO = FFZREC.FFZENDMO;
  ;
  if (converseVar.eventKey is enter
   && FG0LW00.FG0LWSWR == "Y") /* KEY DATA MODIFIED*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* request to scroll backwards*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* display next season*/
    FG0LW00.XXXTSPAG = FG0LW00.XXXTSPAG - 1;
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* request to scroll foward*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* display next season*/
    FG0LW00.XXXTSPAG = FG0LW00.XXXTSPAG + 1;
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* request to scroll left*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* display prior season*/
    ;
    FG0LW00.FG0LWPGX = FG0LW00.FG0LWPGX - 1; /* prev left page*/
    FG0LW00.FG0LWSNX = FG0LW00.FG0LW-PAGS[FG0LWPGX];
    FG0LW00.FG0LW-NEXT = "N";
    ;
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* request to scroll right*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11) /* display next season*/
    ;
    FG0LW00.FG0LWPGX = FG0LW00.FG0LWPGX + 1; /* next right page*/
    FG0LW00.FG0LW-PAGP[FG0LWPGX] = FG0LW00.FG0LWIDX; /* starting point*/
                                  /* of next page*/
    if (FG0LW00.FG0LW-NEXT == "Y") /* next season*/
      FG0LW00.FG0LWSNX = FG0LW00.FG0LWSNX + 1;
      FG0LW00.FG0LW-NEXT = "N";
    end
    ;
    FG0LW00.FG0LW-PAGS[FG0LWPGX] = FG0LW00.FG0LWSNX;
                                   /* sesn of the pag*/
    ;
    return;
  end
  ;
  ;
end // end FG0L600

// purge temporary storage
Function FG0LS01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FG0LW01 empty; /* header data*/
  set FG0LW02 empty; /* M001 temporary storage detail*/
  set FG0LW03 empty; /* columns totals*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FG0LW00.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FG0LW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0LS01

// read temporary storage
Function FG0LS05()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
   /*  */
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  FG0LW02.XXXTSLEN = FG0LW00.XXXTSLEN;
  TA5REC.TA5TSQIX = FG0LW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FG0LW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S05"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0LS05

// verify modifiable fields
Function FG0LS06()
   /* -----------------------------------------------------*/
   /* verify header modifiable fields*/
   /* -----------------------------------------------------*/
   /*  */
  if (converseVar.eventKey not enter)
    FG0LW00.FG0LWPIX = 1;
    while (FG0LW00.FG0LWPIX <= 4)
      if (FG0LM001.FG0LMSEM[FG0LWPIX] != FG0LW00.FG0LWSEM[FG0LWPIX])
        set FG0LM001.FG0LMSEM[FG0LWPIX] cursor, bold;
        converseLib.validationFailed(111);
        FFWREC.XXXMODID = "S06";
      end
      FG0LW00.FG0LWPIX = FG0LW00.FG0LWPIX + 1;
    end
  end
  ;
  if (FG0LM001.FFW-ND-SHP-IND != FFWREC.FFW-ND-SHP-IND)
    set FG0LM001.FFW-ND-SHP-IND cursor, bold;
    converseLib.validationFailed(10); /* invalid entry*/
    FFWREC.XXXMODID = "S06";
  end
  ;
  if (FG0LM001.YPGCD != FFWREC.YPGCD)
    set FG0LM001.YPGCD cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "S06";
  end
  ;
  if (FG0LM001.XPLCD != FFWREC.XPLCD)
    set FG0LM001.XPLCD cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "S06";
  end
  ;
  FG0LW00.FG0LWWED = FFWREC.FFAENDMO;
  if (FG0LM001.FG0LMERG != FG0LW00.FG0LWEYM)
    set FG0LM001.FG0LMERG cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "S06";
  end
  ;
  FG0LW00.FG0LWWBD = FFWREC.FFABEGMO;
  if (FG0LM001.FG0LMBRG != FG0LW00.FG0LWBYM)
    set FG0LM001.FG0LMBRG cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "S06";
  end
  ;
  ;
end // end FG0LS06

// Load heading literals
Function FG0LS10()
   /* subtotal*/
  ;
  FG0LM001.FG0LMHD1[7] = " SUB ";
  set FG0LM001.FG0LMHD1[7] skip;
  FG0LM001.FG0LMHD2[7] = "TOTAL";
  set FG0LM001.FG0LMHD2[7] skip;
  ;
   /* subtotal percent*/
  ;
  FG0LM001.FG0LMHD1[8] = "% OF ";
  set FG0LM001.FG0LMHD1[8] skip;
  FG0LM001.FG0LMHD2[8] = "TOTAL";
  set FG0LM001.FG0LMHD2[8] skip;
  ;
   /* range total*/
  ;
  FG0LM001.FG0LMHD1[9] = "RANGE";
  set FG0LM001.FG0LMHD1[9] skip;
  FG0LM001.FG0LMHD2[9] = "TOTAL";
  set FG0LM001.FG0LMHD2[9] skip;
  ;
   /* range total percent*/
  ;
  FG0LM001.FG0LMHD1[10] = "% FOR";
  set FG0LM001.FG0LMHD1[10] skip;
  FG0LM001.FG0LMHD2[10] = "R-TOT";
  set FG0LM001.FG0LMHD2[10] skip;
  ;
end // end FG0LS10

// Load subtotal & total
Function FG0LS20()
    /* ----------------------------------------------------------*/
     /* translate/load category subtotal*/
    /* ----------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FG0LW00.FG0LWUST[FG0LWPIX];
  XSFFS10();
  FG0LW00.FG0LWWQT[7] = FFXREC.FFXCHAR;
  ;
  FG0LW00.FG0LWSTX[FG0LWPIX] = FG0LW00.FG0LWLIX; /* Save col position*/
  FG0LW00.FG0LWSTQ[FG0LWPIX] = FG0LW00.FG0LWUST[FG0LWPIX]; /* Save sub total*/
  ;
    /* ----------------------------------------------------------*/
     /* load category range total*/
    /* ----------------------------------------------------------*/
  ;
  FG0LW00.FG0LWWQT[9] = FG0LW00.FG0LWQTY[FG0LWTIX];
  ;
    /* ----------------------------------------------------------*/
     /* calculate/load category range total percent*/
    /* ----------------------------------------------------------*/
  ;
  if (FG0LW03.FG0LWUMT[FG0LWTIX] > 0)
    FG0LW00.FG0LWNM1 = FG0LW00.FG0LWUQT[FG0LWTIX] * 100;
    FG0LW00.FG0LWNPT = mathLib.round(FG0LW00.FG0LWNM1 / FG0LW03.FG0LWUMT[FG0LWTIX], -mathLib.decimals(FG0LW00.FG0LWNPT));
    ;
      /* --------------------------------------------------------*/
       /* zero suppress the percent field*/
      /* --------------------------------------------------------*/
    ;
    if (FG0LW00.FG0LWNPT != 0)
      FG0LW00.FG0LWPTW = FG0LW00.FG0LWNP1;
      FG0LW00.FG0LWPTP = ".";
      FG0LW00.FG0LWPTD = FG0LW00.FG0LWNP2;
      ;
      if (FG0LW00.FG0LWPT1 == "0")
        FG0LW00.FG0LWPT1 = " ";
        if (FG0LW00.FG0LWPT2 == "0")
          FG0LW00.FG0LWPT2 = " ";
        end
      end
      ;
      FG0LW00.FG0LWWQT[10] = FG0LW00.FG0LWPCT;
      FG0LW00.FG0LWPCT = 0; /* Clear percent*/
      FG0LW00.FG0LWNPT = 0; /* Clear percent*/
      ;
    end
  end
  ;
end // end FG0LS20

// Load subtot & tot for tot line
Function FG0LS30()
   /* ----------------------------------------------------------*/
   /* translate/load category monthly subtotal*/
   /* ----------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FG0LW00.FG0LWUMT;
  XSFFS10();
  FG0LW00.FG0LWWQT[7] = FFXREC.FFXCHAR;
  ;
   /* ----------------------------------------------------------*/
   /* calculate/load category monthly subtotal percent*/
   /* ----------------------------------------------------------*/
  ;
  FG0LW00.FG0LWNPT = 0; /* Clear percent*/
  FG0LW00.FG0LWPCT = 0; /* Clear percent*/
  ;
  if (FG0LW00.FG0LWUMT > 0)
    FG0LW00.FG0LWNM1 = FG0LW00.FG0LWUMT * 100;
    FG0LW00.FG0LWNPT = mathLib.round(FG0LW00.FG0LWNM1 / FG0LW00.FG0LWUMT, -mathLib.decimals(FG0LW00.FG0LWNPT));
    ;
    /* --------------------------------------------------------*/
     /* zero suppress the percent field*/
    /* --------------------------------------------------------*/
    ;
    if (FG0LW00.FG0LWNPT != 0)
      FG0LW00.FG0LWPTW = FG0LW00.FG0LWNP1;
      FG0LW00.FG0LWPTP = ".";
      FG0LW00.FG0LWPTD = FG0LW00.FG0LWNP2;
      ;
      if (FG0LW00.FG0LWPT1 == "0")
        FG0LW00.FG0LWPT1 = " ";
        if (FG0LW00.FG0LWPT2 == "0")
          FG0LW00.FG0LWPT2 = " ";
        end
      end
      ;
      FG0LW00.FG0LWWQT[8] = FG0LW00.FG0LWPCT;
      FG0LW00.FG0LWPCT = 0; /* Clear percent*/
      FG0LW00.FG0LWNPT = 0; /* Clear percent*/
      ;
    end
  end
  ;
   /* ----------------------------------------------------------*/
   /* calculate/load subtotal percent for each category*/
   /* ----------------------------------------------------------*/
  ;
  FG0LW00.FG0LWPIX = 1; /* Init process index*/
  FG0LW00.FG0LWNPT = 0; /* Clear percent*/
  FG0LW00.FG0LWPCT = 0; /* Clear percent*/
  ;
  while (FG0LW00.FG0LWPIX <= FG0LW02.FG0LWNLD)
    ;
    if (FG0LW00.FG0LWUMT > 0)
      ;
      FG0LW00.FG0LWNM1 = FG0LW00.FG0LWSTQ[FG0LWPIX] * 100;
      FG0LW00.FG0LWNPT = mathLib.round(FG0LW00.FG0LWNM1 / FG0LW00.FG0LWUMT, -mathLib.decimals(FG0LW00.FG0LWNPT));
      ;
    end
    ;
    /* --------------------------------------------------------*/
     /* zero suppress the percent field*/
    /* --------------------------------------------------------*/
    if (FG0LW00.FG0LWNPT != 0)
      ;
      FG0LW00.FG0LWPTW = FG0LW00.FG0LWNP1;
      FG0LW00.FG0LWPTP = ".";
      FG0LW00.FG0LWPTD = FG0LW00.FG0LWNP2;
      ;
      if (FG0LW00.FG0LWPT1 == "0")
        FG0LW00.FG0LWPT1 = " ";
        if (FG0LW00.FG0LWPT2 == "0")
          FG0LW00.FG0LWPT2 = " ";
        end
      end
      ;
      FG0LM001.FG0LMQ08[FG0LWPIX] = FG0LW00.FG0LWPCT;
      ;
    end
    ;
    FG0LW00.FG0LWPIX = FG0LW00.FG0LWPIX + 1;
    ;
  end
  ;
  move 0 to FG0LW00.FG0LWSTX[1] for all; /* Clear subtotal col position*/
  move 0 to FG0LW00.FG0LWSTQ[1] for all; /* Clear subtotal qty*/
  FG0LW00.FG0LWNPT = 0; /* Clear percent*/
  FG0LW00.FG0LWPCT = 0; /* Clear percent*/
  ;
   /* ----------------------------------------------------------*/
   /* load category monthly range total*/
   /* ----------------------------------------------------------*/
  ;
  FG0LW00.FG0LWWQT[9] = FG0LW03.FG0LWMTQ[FG0LWTIX];
  ;
end // end FG0LS30

// Cal no of sesn and mos in sesn
Function FG0LS33()
  ;
   /* ------------------------------------------------------------*/
   /* validate season end months*/
   /* ------------------------------------------------------------*/
  ;
  FG0LW00.FG0LWWBD = FFWREC.FFABEGMO; /* beginning date*/
  FG0LW00.FG0LWWED = FFWREC.FFAENDMO; /* ending date*/
  ;
  FG0LW00.FG0LWSMO[1] = FFWREC.FFWENDM1;
  FG0LW00.FG0LWWDT = FFWREC.FFWENDM1;
  FG0LW00.FG0LWSEM[1] = FG0LW00.FG0LWWMM;
  ;
  FG0LW00.FG0LWSMO[2] = FFWREC.FFWENDM2;
  FG0LW00.FG0LWWDT = FFWREC.FFWENDM2;
  FG0LW00.FG0LWSEM[2] = FG0LW00.FG0LWWMM;
  ;
  FG0LW00.FG0LWSMO[3] = FFWREC.FFWENDM3;
  FG0LW00.FG0LWWDT = FFWREC.FFWENDM3;
  FG0LW00.FG0LWSEM[3] = FG0LW00.FG0LWWMM;
  ;
  FG0LW00.FG0LWSMO[4] = FFWREC.FFWENDM4;
  FG0LW00.FG0LWWDT = FFWREC.FFWENDM4;
  FG0LW00.FG0LWSEM[4] = FG0LW00.FG0LWWMM;
  ;
   /* figure out number of seasons*/
  ;
  FG0LW00.FG0LWPIX = 4; /* index*/
  while (FG0LW00.FG0LWPIX > 0)
    ;
    FG0LW00.FG0LWSIN[FG0LWPIX] = 0;
    ;
    FG0LW00.FG0LWPIX = FG0LW00.FG0LWPIX - 1;
    /*  */
  end
  ;
  FG0LW00.FG0LWNSS = 0; /* reset number of seasons*/
  FG0LW00.FG0LWPIX = 4; /* index*/
  while (FG0LW00.FG0LWPIX > 0)
    if (FG0LW00.FG0LWSEM[FG0LWPIX] > 0)
      FG0LW00.FG0LWNSS = FG0LW00.FG0LWPIX; /* number of seasons*/
      FG0LW00.FG0LWPIX = FG0LW00.FG0LWPIX - 4; /* force out of loop*/
      ;
    else
      ;
      FG0LW00.FG0LWPIX = FG0LW00.FG0LWPIX - 1;
    end
    ;
  end
  ;
  FG0LW00.FG0LWPIX = FG0LW00.FG0LWNSS;
  while (FG0LW00.FG0LWPIX > 0) /* nbr of seasons*/
    FG0LS52(); /* calculate no of mos in each sesn*/
    FG0LW00.FG0LWPIX = FG0LW00.FG0LWPIX - 1;
  end
  ;
  ;
end // end FG0LS33

// Load subtotal for pct line
Function FG0LS40()
  ;
   /* ----------------------------------------------------------*/
   /* calculate and category monthly subtotal percent*/
   /* ----------------------------------------------------------*/
  ;
  if (FG0LW03.FG0LWUMT[FG0LWTIX] > 0)
    FG0LW00.FG0LWNM1 = FG0LW00.FG0LWUMT * 100;
    FG0LW00.FG0LWNPT = mathLib.round(FG0LW00.FG0LWNM1 / FG0LW03.FG0LWUMT[FG0LWTIX], -mathLib.decimals(FG0LW00.FG0LWNPT));
    ;
    /* ----------------------------------------------------------*/
     /* zero suppress the percent field*/
    /* ----------------------------------------------------------*/
    ;
    if (FG0LW00.FG0LWNPT != 0)
      FG0LW00.FG0LWPTW = FG0LW00.FG0LWNP1;
      FG0LW00.FG0LWPTP = ".";
      FG0LW00.FG0LWPTD = FG0LW00.FG0LWNP2;
      ;
      if (FG0LW00.FG0LWPT1 == "0")
        FG0LW00.FG0LWPT1 = " ";
        if (FG0LW00.FG0LWPT2 == "0")
          FG0LW00.FG0LWPT2 = " ";
        end
      end
      ;
      FG0LW00.FG0LWWQT[7] = FG0LW00.FG0LWPCT;
      ;
    end
  end
  ;
  ;
end // end FG0LS40

// Verify season end month
Function FG0LS50()
  ;
   /* ------------------------------------------------------------*/
   /* validate season end months*/
   /* ------------------------------------------------------------*/
  ;
  if (FFZREC.FFZENDMO == 0) /* passed from other application*/
    FG0LW00.FG0LWWBD = FFWREC.FFABEGMO; /* beginning date*/
    FG0LW00.FG0LWWED = FFWREC.FFAENDMO; /* ending date*/
  else
    FG0LW00.FG0LWWBD = FFZREC.FFZBEGMO; /* beginning date*/
    FG0LW00.FG0LWWED = FFZREC.FFZENDMO; /* ending date*/
  end
  ;
   /* figure out number of seasons*/
  ;
  FG0LW00.FG0LWPIX = 4; /* index*/
  while (FG0LW00.FG0LWPIX > 0)
    ;
    FG0LW00.FG0LWSEM[FG0LWPIX] = 0;
    FG0LW00.FG0LWSMO[FG0LWPIX] = 0;
    FG0LW00.FG0LWSIN[FG0LWPIX] = 0;
    ;
    FG0LW00.FG0LWPIX = FG0LW00.FG0LWPIX - 1;
    /*  */
  end
  ;
  FG0LW00.FG0LWNSS = 0; /* reset number of seasons*/
  FG0LW00.FG0LWPIX = 4; /* index*/
  while (FG0LW00.FG0LWPIX > 0)
    if (FG0LM001.FG0LMSEM[FG0LWPIX] > 0)
      FG0LW00.FG0LWNSS = FG0LW00.FG0LWPIX; /* number of seasons*/
      FG0LW00.FG0LWPIX = FG0LW00.FG0LWPIX - 4; /* force out of loop*/
      ;
    else
      ;
      FG0LW00.FG0LWPIX = FG0LW00.FG0LWPIX - 1;
    end
    ;
  end
  ;
   /* If no season end month entered then check the length of the range,*/
   /* if <= 6 months use default (end month of the range)*/
  ;
  if (FG0LW00.FG0LWNSS == 0) /* no season lengths found*/
    if (FG0LW00.FG0LWBYY == FG0LW00.FG0LWEYY) /* same year*/
      FG0LW00.FG0LWNM1 = FG0LW00.FG0LWEMM - FG0LW00.FG0LWBMM + 1;
    else
      FG0LW00.FG0LWNM1 = FG0LW00.FG0LWEMM + 12 - FG0LW00.FG0LWBMM + 1;
    end
    ;
    if (FG0LW00.FG0LWNM1 <= 6)
      FG0LW00.FG0LWNSS = 1;
      FG0LM001.FG0LMSEM[1] = FG0LW00.FG0LWEMM; /* range end month*/
    end
  end
  ;
   /* check for no seasons entered*/
  ;
  if (FG0LW00.FG0LWNSS == 0) /* no season lengths found*/
    FFWREC.XXXMODID = "S50"; /* Module identification*/
    set FG0LM001.FG0LMSEM[1] cursor, bold; /* Highlight*/
    converseLib.validationFailed(448); /* required field*/
    return;
  end
  ;
   /* check for embedded zeros*/
  ;
  FG0LW00.FG0LWPIX = FG0LW00.FG0LWNSS; /* index*/
  while (FG0LW00.FG0LWPIX > 0)
    if (FG0LM001.FG0LMSEM[FG0LWPIX] == 0) /* check for embedded zeros*/
      FFWREC.XXXMODID = "S50"; /* Module identification*/
      set FG0LM001.FG0LMSEM[FG0LWPIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(440); /* required field*/
    end
    FG0LW00.FG0LWPIX = FG0LW00.FG0LWPIX - 1;
  end
  ;
  if (converseVar.validationMsgNum > 0)
    return;
  end
  ;
   /* check for invalid season end months*/
  ;
  FG0LW00.FG0LWPIX = FG0LW00.FG0LWNSS; /* index*/
  while (FG0LW00.FG0LWPIX > 0)
    ;
    if (FG0LM001.FG0LMSEM[FG0LWPIX] < 1 /* check for month error*/
     || FG0LM001.FG0LMSEM[FG0LWPIX] > 12)
      FFWREC.XXXMODID = "S50"; /* Module identification*/
      set FG0LM001.FG0LMSEM[FG0LWPIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(010); /* required field*/
      return;
    end
    ;
    if (FG0LM001.FG0LMSEM[FG0LWPIX] != FG0LW00.FG0LWEMM
     && FG0LW00.FG0LWPIX == FG0LW00.FG0LWNSS) /* last end month*/
      FFWREC.XXXMODID = "S50"; /* Module identification*/
      set FG0LM001.FG0LMSEM[FG0LWPIX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(447); /* required field*/
      return;
      ;
    else
      ;
      FG0LS51(); /* check for invalid entry*/
      ;
    end
    ;
    FG0LW00.FG0LWPIX = FG0LW00.FG0LWPIX - 1;
    ;
  end
  ;
  FG0LW00.FG0LWPIX = FG0LW00.FG0LWNSS;
  while (FG0LW00.FG0LWPIX > 0) /* nbr of seasons*/
    FG0LW00.FG0LWLIX = FG0LW00.FG0LWPIX - 1;
    if (FG0LW00.FG0LWLIX != 0)
      if (FG0LW00.FG0LWSMO[FG0LWLIX] >= FG0LW00.FG0LWSMO[FG0LWPIX])
        FFWREC.XXXMODID = "S50"; /* Module identification*/
        set FG0LM001.FG0LMSEM[FG0LWLIX] cursor, bold; /* Highlight*/
        converseLib.validationFailed(444); /* sesn end mo > next sesn end mo*/
      end
    end
    FG0LW00.FG0LWPIX = FG0LW00.FG0LWPIX - 1;
  end
  ;
  FG0LW00.FG0LWPIX = FG0LW00.FG0LWNSS;
  FG0LW00.FG0LWNM1 = 0; /* clear total months work area*/
  while (FG0LW00.FG0LWPIX > 0) /* nbr of seasons*/
    FG0LW00.FG0LWSEM[FG0LWPIX] = FG0LM001.FG0LMSEM[FG0LWPIX];
    FG0LS52(); /* calculate no of mos in each sesn*/
    FG0LW00.FG0LWPIX = FG0LW00.FG0LWPIX - 1;
  end
  ;
end // end FG0LS50

// Verify entered end month
Function FG0LS51()
  ;
   /* --------------------------------------------------------*/
   /* beginning date and ending date are in the same year*/
   /* --------------------------------------------------------*/
  ;
  if (FG0LW00.FG0LWBYY == FG0LW00.FG0LWEYY) /* beg year = end year*/
    ;
    if (FG0LM001.FG0LMSEM[FG0LWPIX] >= FG0LW00.FG0LWBMM /* >= beg month*/
     && FG0LM001.FG0LMSEM[FG0LWPIX] <= FG0LW00.FG0LWEMM) /* <= end month*/
      ;
      FG0LW00.FG0LWWCC = FG0LW00.FG0LWBCC; /* plug in centry*/
      FG0LW00.FG0LWWYY = FG0LW00.FG0LWBYY; /* plug in year*/
      FG0LW00.FG0LWWMM = FG0LM001.FG0LMSEM[FG0LWPIX]; /* plug in month*/
      ;
    else
      ;
      FFWREC.XXXMODID = "S51"; /* module identification*/
      converseLib.validationFailed(010); /* invalid data*/
      set FG0LM001.FG0LMSEM[FG0LWPIX] cursor, bold;
      ;
    end
    ;
  else
    ;
      /* --------------------------------------------------------*/
      /* beginning date and ending date are in the different years*/
      /* --------------------------------------------------------*/
    ;
      /* season end month falls in the same year as begin month*/
    ;
    if (FG0LM001.FG0LMSEM[FG0LWPIX] >= FG0LW00.FG0LWBMM) /* >= beg mo*/
      ;
      FG0LW00.FG0LWWCC = FG0LW00.FG0LWBCC; /* plug in centry*/
      FG0LW00.FG0LWWYY = FG0LW00.FG0LWBYY; /* plug in year*/
      FG0LW00.FG0LWWMM = FG0LM001.FG0LMSEM[FG0LWPIX]; /* plug in month*/
    else
      ;
        /* * season end month falls in the same year as end month*/
      ;
      if (FG0LM001.FG0LMSEM[FG0LWPIX] <= FG0LW00.FG0LWEMM) /* <= end mo*/
        FG0LW00.FG0LWWCC = FG0LW00.FG0LWECC; /* plug in centry*/
        FG0LW00.FG0LWWYY = FG0LW00.FG0LWEYY; /* plug in year*/
        FG0LW00.FG0LWWMM = FG0LM001.FG0LMSEM[FG0LWPIX]; /* plug in month*/
      else
        ;
        FFWREC.XXXMODID = "S51"; /* module identification*/
        converseLib.validationFailed(010); /* invalid data*/
        set FG0LM001.FG0LMSEM[FG0LWPIX] cursor, bold;
        ;
      end
      ;
    end
    ;
  end
  ;
  if (converseVar.validationMsgNum == 0)
    FG0LW00.FG0LWSMO[FG0LWPIX] = FG0LW00.FG0LWWDT; /* save ccyymm*/
  end
  ;
end // end FG0LS51

// Calculate no of mons in season
Function FG0LS52()
  FG0LW00.FG0LWWDT = FG0LW00.FG0LWSMO[FG0LWPIX]; /* sesn end mo*/
  ;
  if (FG0LW00.FG0LWPIX == 1) /* 1st season*/
    ;
    if (FG0LW00.FG0LWWMM >= FG0LW00.FG0LWBMM) /* in the same year*/
      FG0LW00.FG0LWSIN[FG0LWPIX] = FG0LW00.FG0LWWDT -                                    FG0LW00.FG0LWWBD + 1;
    else /* in the different year*/
      FG0LW00.FG0LWSIN[FG0LWPIX] = FG0LW00.FG0LWWMM + 12 -                                    FG0LW00.FG0LWBMM + 1;
    end
    ;
  else /* other season*/
    ;
    FG0LW00.FG0LWLIX = FG0LW00.FG0LWPIX - 1;
    FG0LW00.FG0LW-WDT1 = FG0LW00.FG0LWSMO[FG0LWLIX]; /* prev sesn mo*/
    if (FG0LW00.FG0LWWMM > FG0LW00.FG0LW-WMM1) /* in the same year*/
      FG0LW00.FG0LWSIN[FG0LWPIX] = FG0LW00.FG0LWWMM - FG0LW00.FG0LW-WMM1;
    else /* in the different year*/
      FG0LW00.FG0LWSIN[FG0LWPIX] = FG0LW00.FG0LWWMM + 12 -                                    FG0LW00.FG0LW-WMM1;
    end
    ;
  end
  ;
end // end FG0LS52

//*** RECORD=FG0LW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FG0LW00 type basicRecord
  10 FG0LWDCF FG0LWDCF ; 
  10 FG0LWNSS FG0LWNSS ; 
  10 FG0LWSIN FG0LWSIN [4] ; 
  10 FG0LWSEM FG0LWSEM [4] ; 
  10 FG0LWSMO FG0LWSMO [4] ; 
  10 FG0LWSWR FG0LWSWR ; 
  10 FG0LWSWF FG0LWSWF ; 
  10 FG0LWSWD FG0LWSWD ; 
  10 FG0LWNM1 FG0LWNM1 ; 
  10 FG0LWNM2 FG0LWNM2 ; 
  10 FG0LWNPT FG0LWNPT ; 
    15 FG0LWNP1 FG0LWNP1 ; 
    15 FG0LWNP2 FG0LWNP2 ; 
  10 FG0LWPCT FG0LWPCT ; 
    15 FG0LWPTW FG0LWPTW ; 
      20 FG0LWPT1 FG0LWPT1 ; 
      20 FG0LWPT2 FG0LWPT2 ; 
      20 FG0LWPT3 FG0LWPT3 ; 
    15 FG0LWPTP FG0LWPTP ; 
    15 FG0LWPTD FG0LWPTD ; 
  10 FG0LWUTQ FG0LWUTQ ; 
  10 FG0LWUMT FG0LWUMT ; 
  10 FG0LWUST FG0LWUST [13] ; 
  10 FG0LWUHS FG0LWUHS ; 
  10 FG0LWWQT FG0LWWQT [10] ; 
  10 FG0LWLQT FG0LWLQT ; 
    15 FG0LWUQT FG0LWUQT [13] ; 
    15 FG0LWQTY FG0LWQTY [13] ; 
  10 FG0LWSTX FG0LWSTX [15] ; 
  10 FG0LWSTQ FG0LWSTQ [15] ; 
  10 FG0LWIDX FG0LWIDX ; 
  10 FG0LWTIX FG0LWTIX ; 
  10 FG0LWSIX FG0LWSIX ; 
  10 FG0LWLIX FG0LWLIX ; 
  10 FG0LWPIX FG0LWPIX ; 
  10 FG0LWPGX FG0LWPGX ; 
  10 FG0LWSNX FG0LWSNX ; 
  10 FG0LWCWD FG0LWCWD ; 
    15 FG0LWCYM FG0LWCYM ; 
      20 FG0LWCCC FG0LWCCC ; 
      20 FG0LWCYY FG0LWCYY ; 
      20 FG0LWCMM FG0LWCMM ; 
    15 FG0LWCDD FG0LWCDD ; 
  10 FG0LWWDT FG0LWWDT ; 
    15 * num(3) ; 
    15 FG0LWWCC FG0LWWCC ; 
    15 FG0LWWYM FG0LWWYM ; 
      20 FG0LWWYY FG0LWWYY ; 
      20 FG0LWWMM FG0LWWMM ; 
  10 FG0LW-WDT1 FG0LW-WDT1 ; 
    15 * num(3) ; 
    15 FG0LW-WCC1 FG0LW-WCC1 ; 
    15 FG0LW-WYM1 FG0LW-WYM1 ; 
      20 FG0LW-WYY1 FG0LW-WYY1 ; 
      20 FG0LW-WMM1 FG0LW-WMM1 ; 
  10 FG0LWWBD FG0LWWBD ; 
    15 * num(3) ; 
    15 FG0LWBCC FG0LWBCC ; 
    15 FG0LWBYM FG0LWBYM ; 
      20 FG0LWBYY FG0LWBYY ; 
      20 FG0LWBMM FG0LWBMM ; 
  10 FG0LWWED FG0LWWED ; 
    15 * num(3) ; 
    15 FG0LWECC FG0LWECC ; 
    15 FG0LWEYM FG0LWEYM ; 
      20 FG0LWEYY FG0LWEYY ; 
      20 FG0LWEMM FG0LWEMM ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FG0LW-PAGP FG0LW-PAGP [10] ; 
  10 FG0LW-PAGS FG0LW-PAGS [10] ; 
  10 FG0LW-PMON FG0LW-PMON [10] ; 
  10 FG0LWREM FG0LWREM ; 
  10 FG0LW-NEXT FG0LW-NEXT ; 
  10 FFW-ND-SHP-IND FFW-ND-SHP-IND ; 
  10 FG0LW-CURR-MO FG0LW-CURR-MO ; 
  10 FG0LW-CURR-MO-MINUS1 FG0LW-CURR-MO-MINUS1 ; 
  10 FG0LW-CURR-MO-MINUS2 FG0LW-CURR-MO-MINUS2 ; 
  10 FG0LW-CURR-MO-MINUS3 FG0LW-CURR-MO-MINUS3 ; 
  10 FG0LW-CURR-MO-MINUS4 FG0LW-CURR-MO-MINUS4 ; 
end // end FG0LW00

//*** RECORD=FG0LW01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// ***********************
Record FG0LW01 type basicRecord
  10 CACHGFL CACHGFL ; 
end // end FG0LW01

//*** RECORD=FG0LW02 ****
// -------------------------
// map 001 temporary storage
// -------------------------
// ***********************
Record FG0LW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(1967) ; 
    10 FG0LWNLD FG0LWNLD ; 
    10 XPCCD XPCCD [15] ; 
    10 XPCSDESC XPCSDESC [15] ; 
    10 FG0LWQTS FG0LWQTS [15] ; 
      15 FG0LWU01 FG0LWU01 ; 
      15 FG0LWQ01 FG0LWQ01 ; 
      15 FG0LWU02 FG0LWU02 ; 
      15 FG0LWQ02 FG0LWQ02 ; 
      15 FG0LWU03 FG0LWU03 ; 
      15 FG0LWQ03 FG0LWQ03 ; 
      15 FG0LWU04 FG0LWU04 ; 
      15 FG0LWQ04 FG0LWQ04 ; 
      15 FG0LWU05 FG0LWU05 ; 
      15 FG0LWQ05 FG0LWQ05 ; 
      15 FG0LWU06 FG0LWU06 ; 
      15 FG0LWQ06 FG0LWQ06 ; 
      15 FG0LWU07 FG0LWU07 ; 
      15 FG0LWQ07 FG0LWQ07 ; 
      15 FG0LWU08 FG0LWU08 ; 
      15 FG0LWQ08 FG0LWQ08 ; 
      15 FG0LWU09 FG0LWU09 ; 
      15 FG0LWQ09 FG0LWQ09 ; 
      15 FG0LWU10 FG0LWU10 ; 
      15 FG0LWQ10 FG0LWQ10 ; 
      15 FG0LWU11 FG0LWU11 ; 
      15 FG0LWQ11 FG0LWQ11 ; 
      15 FG0LWU12 FG0LWU12 ; 
      15 FG0LWQ12 FG0LWQ12 ; 
      15 FG0LWU13 FG0LWU13 ; 
      15 FG0LWQ13 FG0LWQ13 ; 
end // end FG0LW02

//*** RECORD=FG0LW03 ****
// ------------------------------
// map 001 totals display storage
// ------------------------------
// ***********************
Record FG0LW03 type basicRecord
  5 FG0LWGP3 FG0LWGP3 ; 
    10 FG0LWUMT FG0LWUMT [13] ; 
    10 FG0LWMTQ FG0LWMTQ [13] ; 
    10 FG0LWMPT FG0LWMPT [13] ; 
end // end FG0LW03

// curr month
DataItem FG0LW-CURR-MO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// curr month minus 1
DataItem FG0LW-CURR-MO-MINUS1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// curr month minus 2
DataItem FG0LW-CURR-MO-MINUS2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// curr month minus 3
DataItem FG0LW-CURR-MO-MINUS3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// curr month minus 4
DataItem FG0LW-CURR-MO-MINUS4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// Next season flag
DataItem FG0LW-NEXT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Starting point of the page
DataItem FG0LW-PAGP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Processing season of the page
DataItem FG0LW-PAGS num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Print remaining months flag
DataItem FG0LW-PMON char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work century
DataItem FG0LW-WCC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date
DataItem FG0LW-WDT1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work month
DataItem FG0LW-WMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year and month
DataItem FG0LW-WYM1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FG0LW-WYY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin century
DataItem FG0LWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range month
DataItem FG0LWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year and month
DataItem FG0LWBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range year
DataItem FG0LWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work century
DataItem FG0LWCCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work day
DataItem FG0LWCDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work month
DataItem FG0LWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work ccyymmdd
DataItem FG0LWCWD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current work ccyymm
DataItem FG0LWCYM num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work year
DataItem FG0LWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data change flag
DataItem FG0LWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end century
DataItem FG0LWECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range month
DataItem FG0LWEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end year and month
DataItem FG0LWEYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range year
DataItem FG0LWEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fg0lw03 group level
DataItem FG0LWGP3 char(169)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index
DataItem FG0LWIDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// load  index
DataItem FG0LWLIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product line qtys
DataItem FG0LWLQT char(117)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// monthly percent
DataItem FG0LWMPT bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// monthly sale qtys
DataItem FG0LWMTQ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of lines per page
DataItem FG0LWNLD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 1
DataItem FG0LWNM1 num(15)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 2
DataItem FG0LWNM2 num(15)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0LWNP1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0LWNP2 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric percent field
DataItem FG0LWNPT num(4,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// no of seasons
DataItem FG0LWNSS num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// char percent field
DataItem FG0LWPCT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// page index
DataItem FG0LWPGX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// process index
DataItem FG0LWPIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0LWPT1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG0LWPT2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG0LWPT3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG0LWPTD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG0LWPTP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG0LWPTW char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 1
DataItem FG0LWQ01 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 2
DataItem FG0LWQ02 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 3
DataItem FG0LWQ03 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 4
DataItem FG0LWQ04 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 5
DataItem FG0LWQ05 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 6
DataItem FG0LWQ06 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 7
DataItem FG0LWQ07 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 8
DataItem FG0LWQ08 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 9
DataItem FG0LWQ09 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 10
DataItem FG0LWQ10 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 11
DataItem FG0LWQ11 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 12
DataItem FG0LWQ12 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty char column 13
DataItem FG0LWQ13 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product line monthly qtys
DataItem FG0LWQTS char(117)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sale qty 1000
DataItem FG0LWQTY char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Remaining months
DataItem FG0LWREM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season end month - mm
DataItem FG0LWSEM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nbr of months in season
DataItem FG0LWSIN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save index
DataItem FG0LWSIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season end month - ccyymm
DataItem FG0LWSMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season index
DataItem FG0LWSNX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Category subtotal field
DataItem FG0LWSTQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Subtotal column position
DataItem FG0LWSTX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display map switch
DataItem FG0LWSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FG0LWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FG0LWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total index
DataItem FG0LWTIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 1
DataItem FG0LWU01 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 2
DataItem FG0LWU02 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 3
DataItem FG0LWU03 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 4
DataItem FG0LWU04 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 5
DataItem FG0LWU05 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 6
DataItem FG0LWU06 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 7
DataItem FG0LWU07 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 8
DataItem FG0LWU08 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 9
DataItem FG0LWU09 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 10
DataItem FG0LWU10 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 11
DataItem FG0LWU11 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 12
DataItem FG0LWU12 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units column 13
DataItem FG0LWU13 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales units
DataItem FG0LWUHS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// unit monthly sale qty
DataItem FG0LWUMT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sale qty units
DataItem FG0LWUQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// unit sale qty sub total
DataItem FG0LWUST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w/s product range total
DataItem FG0LWUTQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work begin date
DataItem FG0LWWBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work century
DataItem FG0LWWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date
DataItem FG0LWWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work begin date
DataItem FG0LWWED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work month
DataItem FG0LWWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w/s product line qtys
DataItem FG0LWWQT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work year and month
DataItem FG0LWWYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FG0LWWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

