package fg0p;

import corpcom2.XX0XW01;
import corpcom3.XPFF001;
import corpcom4.XSFFS01;
import corpcom4.XSFFS10;
import corpcom4.XSFFS11;
import corpcom4.XSNOWAY;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import ff.common.FF2REC;
import ff.common.FF5REC;
import ff.common.FF6REC;
import ff.common.FF7REC;
import ff.common.FFFREC;
import ff.common.FFHREC;
import ff.common.FFWREC;
import ff.common.FFXREC;
import ta.common.TA1REC;
import ta.common.TAEREC;
//*** PROGRAM=FG0P ****
// This program provides the user with the ability to view and
// change the monthly B-GRADE and CLOSEOUT forecast quantities.
// 
// The user can come to this screen either from the forecast by
// type screen(FG0G) by pressing the explode b-grade & closeout
// key or from the long range worksheet select screen.
// If it is from the forecast screen, the forecast quantities
// will be carried over and spread out basing on the b-grade
// and closeout index. If it is from the worksheet select
// screen, the existing monthly forecast will be brought up.
// 
// If the user is satisfied with the forecast quantities on the
// screen, he can make these sales forecasts as master by
// pressing PF15. The system will then update the master sales
// forecast in the database.
// 
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          10/16/89  JJUCH   New application.
//          06/10/91  JJUCH   Spread the line fcst to category.
//          06/21/91  JJUCH   Correct the mod id in FG0PS09.
//          08/21/91  JJUCH   Default the country cd 'USA'.
// FF1119   06/26/92  LDELUH  When add MCAT for makeups set
//                            fill rt & futr rto to 100.
// ff364    11/25/92  JJUCH   Fix break down b-grade & clsout
//                            fcst bug which copy inline fcst
//                            into makeup fcst.
// Fix       01/15/93 JJUCH   Allow to re-distribute to cat lvl
//                            when b-grade or clsout qty are
//                            zero and want to save as master.
// FF379     01/21/93 JJUCH   Add warning message when zero out
//                            the b-grade and clsout qty and
//                            save as master.
// FF402     05/05/93 JJUCH   Default inline fill rate to 92
//                            when insert a new MCAT row.
// FF175     12/10/96 DSMITH  Changed the date range fill
//                            character to '0'.
// 
// *********************
Program FG0P type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF2REC FF2REC; // record
  FF5REC FF5REC; // record
  FF6REC FF6REC; // record
  FF7REC FF7REC; // record
  FFFREC FFFREC; // record
  FFHREC FFHREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FG0PW00 FG0PW00; // record
  FG0PW01 FG0PW01; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FG0PM.FG0PM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FG0PM001 initial; /* M001 input/output*/
    set FG0PW00 empty; /* Working storage*/
    set FG0PW01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    FG0PW00.FG0PWSWF = "Y"; /* Format the map switch*/
    FG0PW00.FG0PWSWR = "Y"; /* Request for data switch*/
    ;
    FFWREC.XCTCD = "USA "; /* Country code*/
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0P000; /* Converse the main process*/
    ;
    FG0P000: FG0P000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0P001; /* Converse the main process*/
    ;
    FG0P001: FG0P001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0P001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FG0P

// Check the FROM application
Function FG0P000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAFROMAP == "FG0B" /* From allowed application*/
   || COMMAREA.CAFROMAP == "FG0G" 
   || COMMAREA.CAFROMAP == "FG0P") /* or same application*/
    ;
     /* NEXT SENTENCE*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/
    ;
    XSNOWAY(); /* Invalid transfer was attempted*/
    ;
  end
  ;
  ;
end // end FG0P000

// List the rows in the table
Function FG0P001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FG0P100(); /* Obtain the data to display*/
  ;
  FG0P200(); /* Format and display the map*/
  ;
  FG0P300(); /* Check attention identifier*/
  ;
  FG0P400(); /* Reset fields to normal intensity*/
  ;
  FG0P500(); /* Verify the entered data*/
  ;
  FG0P600(); /* Process valid input request*/
  ;
  ;
end // end FG0P001

// Obtain the data to display
Function FG0P100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0PW00.FG0PWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Clear the map display storage area.*/
   /* ------------------------------------------------------------*/
  ;
  set FG0PW01 empty; /* M001 display storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Save the search information*/
   /* ------------------------------------------------------------*/
  ;
  FG0PW01.FG0PWBMO = FFWREC.FFABEGMO; /* Beginning month*/
  FG0PW01.FG0PWEMO = FFWREC.FFAENDMO; /* Ending month*/
  ;
   /* ------------------------------------------------------------*/
   /* Load the month heading*/
   /* ------------------------------------------------------------*/
  ;
  FG0P120();
  ;
   /* ------------------------------------------------------------*/
   /* Obtain the existing forecast from DFCAST.VWLMTH01 table*/
   /* ------------------------------------------------------------*/
  ;
  FG0P130(); /* Open & select cursor for VWCMTH01*/
  ;
  FG0PW00.FG0PWCR1 = "N"; /* Initialize end of cursor switch*/
  ;
  while (FG0PW00.FG0PWCR1 == "N") /* Until end of cursor*/
    ;
    FG0P140(); /* Fetch next row in VWCMTH01*/
    ;
  end
  ;
  FG0P150(); /* Close the cursor for VWCMTH01*/
  ;
  FG0PW00.FG0PWIXM = FG0PW00.FG0PWIXM + 1;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If no error was found, indicate request for data complete.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* No error was found*/
    FG0PW00.FG0PWSWR = "N"; /* Request for data switch*/
  end
  ;
end // end FG0P100

// Load the month heading
Function FG0P120()
  ;
  FG0PW00.FG0PWEND = 0; /* Initialize end of range index*/
  FG0PW00.FG0PWIXM = 1; /* Initialize the map index*/
  FG0PW00.FG0PWHDG[1] = FG0PW01.FG0PWBMO; /* First month*/
  ;
  ;
  while (FG0PW00.FG0PWIXM <= 12 /* Until reach 12 months*/
   && FG0PW00.FG0PWHDG[FG0PWIXM] < FG0PW01.FG0PWEMO) /* or end of range*/
    ;
    FG0PW00.FG0PWIXM = FG0PW00.FG0PWIXM + 1; /* Increment the heading index*/
    ;
    FG0PW00.FG0PWDAT = FG0PW01.FG0PWBMO + FG0PW00.FG0PWIXM - 1;
    ;
    if (FG0PW00.FG0PWDMM > 12)
      FG0PW00.FG0PWDMM = FG0PW00.FG0PWDMM - 12;
      FG0PW00.FG0PWDYY = FG0PW00.FG0PWDYY + 1; /* Next year*/
      ;
      if (FG0PW00.FG0PWDYY == 0) /* Into a new century*/
        ;
        FG0PW00.FG0PWDCC = FG0PW00.FG0PWDCC + 1; /* Next century*/
        ;
      end
      ;
    end
    ;
    FG0PW00.FG0PWHDG[FG0PWIXM] = FG0PW00.FG0PWDAT;
    FG0PW00.FG0PWEND = FG0PW00.FG0PWIXM; /* Set end of rang index*/
    ;
  end
  ;
end // end FG0P120

// Sel & open cursor for VWLMTH01
Function FG0P130()
   /* ------------------------------------------------------------*/
   /* Select the requested set to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FFHREC empty; /* Clear row storage area*/
  ;
  FFHREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFHREC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  ;
  set FFFREC empty; /* Clear row storage area*/
  ;
  FFFREC.FFFBEGMO = FFWREC.FFABEGMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFWREC.FFAENDMO; /* Ending month*/
  FFFREC.FFFFUNCD = "S1"; /* Function code*/
  ;
  try
    call "IO3900" (FFFREC, SQLCA, FFHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "130"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFHREC.FFHKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0P130

// Fetch next row in VWLMTH01
Function FG0P140()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "N1"; /* Function code*/
  ;
  try
    call "IO3900" (FFFREC, SQLCA, FFHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FG0P141(); /* Save date in display storage*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      FG0PW00.FG0PWCR1 = "Y"; /* End of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "140"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFHREC.FFHKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0P140

// Save data into disp storage
Function FG0P141()
  ;
  if (FFHREC.FF4FCTMO in FG0PW00.FG0PWHDG)
    ;
    FG0PW00.FG0PWIXM = sysVar.arrayIndex;
    ;
    if (FG0PW00.FG0PWIXM > 6)
      ;
      FG0PW00.FG0PWIXM = FG0PW00.FG0PWIXM + 2; /* Skip sub & grand tot*/
      ;
    end
    ;
  end
  ;
  FG0PW01.FG0PWCOF[FG0PWIXM] = FFHREC.FF5COFCT; /* Closeout fcst*/
  FG0PW01.FG0PWBGF[FG0PWIXM] = FFHREC.FF5BGFCT; /* B-grade fcst*/
  FG0PW01.FG0PWCNT[FG0PWIXM] = FFHREC.ZZZCHGCT; /* Change count*/
  ;
  FFXREC.FFXNUMB = FFHREC.FF5BGFCT;
  XSFFS10(); /* Convert the value from NUM to CHAR*/
  FG0PW01.FG0PMBGF[FG0PWIXM] = FFXREC.FFXCHAR;
  ;
  FFXREC.FFXNUMB = FFHREC.FF5COFCT;
  XSFFS10(); /* Convert the value from NUM to CHAR*/
  FG0PW01.FG0PMCOF[FG0PWIXM] = FFXREC.FFXCHAR;
  ;
end // end FG0P141

// Close cursor for VWLMTH01
Function FG0P150()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "C1"; /* Function code*/
  ;
  try
    call "IO3900" ("C1", SQLCA, FFHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "150"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLMTH01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0P150

// Format and converse the map
Function FG0P200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    ;
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0PW00.FG0PWSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (FG0PW00.FG0PWSWF == "Y") /* Map must be formatted*/
      FG0P210(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FG0PM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FG0PM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG0PM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    ;
    FG0PM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/
    ;
    set FG0PM001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FG0PM001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/
  ;
  COMMAREA.CATOAP = FG0PM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG0PM001.CAITEM; /* Application data*/
  ;
  ;
end // end FG0P200

// Format the display data
Function FG0P210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set FG0PM001 initial; /* M001 input/output area*/
  ;
  FG0PW00.FG0PWSWF = "N"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FG0PM001.FG0PMBMO = FG0PW01.FG0PMBMO; /* Beginning month*/
  FG0PM001.FG0PMEMO = FG0PW01.FG0PMEMO; /* Ending month*/
  FG0PM001.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FG0PM001.XPLABRV = FFWREC.XPLABRV; /* Product line abbreviation*/
  FG0PM001.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FG0PM001.YSMSMDSC = FFWREC.YSMSMDSC; /* Division group desc*/
  ;
   /* ------------------------------------------------------*/
   /* Move the heading. If there is more than 6 months, the*/
   /* index of the heading for next few months should be*/
   /* incremented by 2 to skip the subtotal and grand total*/
   /* headings.*/
   /* ------------------------------------------------------*/
  ;
  FG0PW00.FG0PWIXM = 1; /* Initialize heading index*/
  FG0PW00.FG0PWIXF = 1; /* Initialize fcst index*/
  ;
  while (FG0PW00.FG0PWIXM <= FG0PW00.FG0PWEND) /* Until end of range*/
    ;
    if (FG0PW00.FG0PWIXF == 7)
      ;
      FG0PW00.FG0PWIXF = FG0PW00.FG0PWIXF + 2;
      ;
    end
    ;
    FG0PM001.FG0PMHD2[FG0PWIXF] = FG0PW00.FG0PWHYM[FG0PWIXM];
    set FG0PM001.FG0PMHD2[FG0PWIXF] skip;
    ;
    FG0PW00.FG0PWIXM = FG0PW00.FG0PWIXM + 1; /* Increment the heading index*/
    FG0PW00.FG0PWIXF = FG0PW00.FG0PWIXF + 1; /* Increment the fcst index*/
    ;
  end
  ;
   /* ------------------------------------------------------*/
   /* Move detail lines*/
   /* ------------------------------------------------------*/
  ;
  if (FG0PW00.FG0PWEND > 6) /* More than 6 months*/
    ;
    set FG0PM001.FG0PMDES[1] skip; /* Show 'CLOSEOUT'*/
    set FG0PM001.FG0PMDES[2] skip; /* Show 'B-GRADE'*/
    ;
  end
  ;
  FG0PW00.FG0PWIXM = 1; /* Initialize the heading index*/
  FG0PW00.FG0PWIXF = 1; /* Initialize the map index*/
  FG0PW00.FG0PWGCO = 0; /* Initialize closeout grand total*/
  FG0PW00.FG0PWGBG = 0; /* Initialize b-grade grand total*/
  ;
  while (FG0PW00.FG0PWIXM <= FG0PW00.FG0PWEND) /* Until end of range*/
    ;
    /* -----------------------------------------------------*/
     /* If reach 6 months, move the subtotal.*/
    /* -----------------------------------------------------*/
    ;
    if (FG0PW00.FG0PWIXF == 7) /* Reach 6 months*/
      ;
      FG0PM001.FG0PMHD1[FG0PWIXF] = " SUB";
      FG0PM001.FG0PMHD2[FG0PWIXF] = "TOTAL";
      set FG0PM001.FG0PMHD1[FG0PWIXF] skip;
      set FG0PM001.FG0PMHD2[FG0PWIXF] skip;
      ;
      FFXREC.FFXNUMB = FG0PW00.FG0PWSCO;
      XSFFS10(); /* Translate the subtotal value*/
      FG0PM001.FG0PMCOF[FG0PWIXF] = FFXREC.FFXCHAR;
      ;
      FFXREC.FFXNUMB = FG0PW00.FG0PWSBG;
      XSFFS10(); /* Translate the subtotal value*/
      FG0PM001.FG0PMBGF[FG0PWIXF] = FFXREC.FFXCHAR;
      ;
      set FG0PM001.FG0PMCOF[FG0PWIXF] skip;
      set FG0PM001.FG0PMBGF[FG0PWIXF] skip;
      ;
      FG0PW00.FG0PWSCO = 0; /* Clear the closeout subtot work area*/
      FG0PW00.FG0PWSBG = 0; /* Clear the B-grade subtot work area*/
      ;
      FG0PW00.FG0PWIXF = FG0PW00.FG0PWIXF + 2; /* Skip total fields*/
      ;
    end
    ;
    FG0PM001.FG0PMCOF[FG0PWIXF] = FG0PW01.FG0PMCOF[FG0PWIXF];
    FG0PM001.FG0PMBGF[FG0PWIXF] = FG0PW01.FG0PMBGF[FG0PWIXF];
    ;
    set FG0PM001.FG0PMCOF[FG0PWIXF] normal; /* Unprotect*/
    set FG0PM001.FG0PMBGF[FG0PWIXF] normal; /* Unprotect*/
    ;
    /* ------------------------------------------------------------*/
     /* Accumulate the subtotal and grand total.*/
    /* ------------------------------------------------------------*/
    ;
    FG0PW00.FG0PWSCO = FG0PW00.FG0PWSCO + FG0PW01.FG0PWCOF[FG0PWIXF];
    FG0PW00.FG0PWGCO = FG0PW00.FG0PWGCO + FG0PW01.FG0PWCOF[FG0PWIXF];
    ;
    FG0PW00.FG0PWSBG = FG0PW00.FG0PWSBG + FG0PW01.FG0PWBGF[FG0PWIXF];
    FG0PW00.FG0PWGBG = FG0PW00.FG0PWGBG + FG0PW01.FG0PWBGF[FG0PWIXF];
    ;
    FG0PW00.FG0PWIXM = FG0PW00.FG0PWIXM + 1; /* Heading index*/
    FG0PW00.FG0PWIXF = FG0PW00.FG0PWIXF + 1; /* Map index*/
    ;
  end
  ;
   /* -------------------------------------------------*/
   /* Move the subtotal. If the whole range is less*/
   /* than 6 months, no subtotal will be shown.*/
   /* -------------------------------------------------*/
  ;
  if (FG0PW00.FG0PWEND > 6)
    ;
    FG0PM001.FG0PMHD1[FG0PWIXF] = " SUB";
    FG0PM001.FG0PMHD2[FG0PWIXF] = "TOTAL";
    set FG0PM001.FG0PMHD1[FG0PWIXF] skip;
    set FG0PM001.FG0PMHD2[FG0PWIXF] skip;
    ;
    FFXREC.FFXNUMB = FG0PW00.FG0PWSCO;
    XSFFS10(); /* Translate the subtotal value*/
    FG0PM001.FG0PMCOF[FG0PWIXF] = FFXREC.FFXCHAR;
    ;
    FFXREC.FFXNUMB = FG0PW00.FG0PWSBG;
    XSFFS10(); /* Translate the subtotal value*/
    FG0PM001.FG0PMBGF[FG0PWIXF] = FFXREC.FFXCHAR;
    ;
    set FG0PM001.FG0PMCOF[FG0PWIXF] skip;
    set FG0PM001.FG0PMBGF[FG0PWIXF] skip;
    ;
    FG0PW00.FG0PWSCO = 0; /* Clear the closeout subtot work area*/
    FG0PW00.FG0PWSBG = 0; /* Clear the B-grade subtot work area*/
    ;
    FG0PW00.FG0PWIXF = FG0PW00.FG0PWIXF + 1;
    ;
  end
  ;
   /* -------------------------------------------------*/
   /* Move the grand total.*/
   /* -------------------------------------------------*/
  ;
  FG0PM001.FG0PMHD1[FG0PWIXF] = "GRAND";
  FG0PM001.FG0PMHD2[FG0PWIXF] = "TOTAL";
  set FG0PM001.FG0PMHD1[FG0PWIXF] skip;
  set FG0PM001.FG0PMHD2[FG0PWIXF] skip;
  ;
  FFXREC.FFXNUMB = FG0PW00.FG0PWGCO;
  XSFFS10(); /* Translate the subtotal value*/
  FG0PM001.FG0PMCOF[FG0PWIXF] = FFXREC.FFXCHAR;
  ;
  FFXREC.FFXNUMB = FG0PW00.FG0PWGBG;
  XSFFS10(); /* Translate the subtotal value*/
  FG0PM001.FG0PMBGF[FG0PWIXF] = FFXREC.FFXCHAR;
  ;
  set FG0PM001.FG0PMCOF[FG0PWIXF] skip;
  set FG0PM001.FG0PMBGF[FG0PWIXF] skip;
  ;
  ;
end // end FG0P210

// Check attention identifier
Function FG0P300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (FG0PW00.FG0PWSWR == "Y") /* Request for data*/
      set FG0PW01 empty; /* M001 display storage*/
    end
    ;
    FG0PW00.FG0PWSWF = "Y"; /* Format the map switch*/
    FG0PW00.FG0PWSWR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0PM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
      set FG0PM001.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      ;
      if (COMMAREA.CAFROMAP == "FG0B") /* From application*/
        COMMAREA.CACURRAP = "FG0B"; /* Return to application*/
      else
        COMMAREA.CACURRAP = "FG0G"; /* Return to application*/
      end
      ;
      COMMAREA.CAITEM = "FG0PM001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      if (COMMAREA.CAFROMAP == "FG0B") /* From application*/
        COMMAREA.CATOAP = "FG0B"; /* TO application*/
      else
        COMMAREA.CATOAP = "FG0G"; /* TO application*/
      end
    end
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf15) /* and PF15 was not pressed*/
    ;
    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FG0P300

// Reset highlighted fields
Function FG0P400()
  ;
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FG0PM001.CATOAP initialAttributes; /* Commarea TO application*/
  set FG0PM001.CAITEM initialAttributes; /* Commarea application data*/
  ;
  FG0PW00.FG0PWIXM = 1; /* Initialize month index*/
  FG0PW00.FG0PWIXF = 1; /* Initialize map index*/
  ;
  while (FG0PW00.FG0PWIXM <= FG0PW00.FG0PWEND) /* Until end of range*/
    ;
    if (FG0PW00.FG0PWIXM == 7) /* Reach subtotal field*/
      ;
      FG0PW00.FG0PWIXF = FG0PW00.FG0PWIXF + 2; /* Skip the total fields*/
      ;
    end
    ;
    set FG0PM001.FG0PMCOF[FG0PWIXF] normal; /* Closeout fcst field*/
    set FG0PM001.FG0PMBGF[FG0PWIXF] normal; /* B-grade fcst field*/
    ;
    FG0PW00.FG0PWIXF = FG0PW00.FG0PWIXF + 1; /* Increment map index*/
    ;
    FG0PW00.FG0PWIXM = FG0PW00.FG0PWIXM + 1; /* Increment month index*/
    ;
  end
end // end FG0P400

// Verify the entered data
Function FG0P500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0PM001.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FG0PM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify data in the line.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    ;
    FG0P510(); /* Verify forecast quantity*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* Verify data changed for PF15.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0PW00.FG0PWGCO == 0
     || FG0PW00.FG0PWGBG == 0)
      if (FG0PW00.FG0PWMSG == "Y") /* Check if warning msg been sent*/
        FG0PW00.FG0PWMSG = "N";
        FG0P520();
      else
        FFWREC.XXXMODID = "500"; /* Module identification*/
        converseLib.validationFailed(477); /* Warning message*/
        FG0PW00.FG0PWMSG = "Y";
      end
    else
      FG0P520();
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify passed keys.*/
   /* ------------------------------------------------------------*/
  ;
  FG0P530();
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end FG0P500

// Verify data in the line
Function FG0P510()
   /* ------------------------------------------------------------*/
   /* Convert the entered quantities from CHAR format to NUM*/
   /* format.*/
   /* Check the quantities to make sure they are not negative*/
   /* values.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* Check the 2nd b-grade and closeout block.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0PW00.FG0PWEND > 6) /* The range is over 6 months*/
    ;
    FG0PW00.FG0PWIXM = FG0PW00.FG0PWEND + 2;
    ;
    while (FG0PW00.FG0PWIXM >= 9) /* Reach the 7th month*/
      ;
      FG0PS01(); /* Verify b-grade forecast*/
      ;
      FG0PW00.FG0PWIXM = FG0PW00.FG0PWIXM - 1; /* decrement display index*/
      ;
    end
    ;
    FG0PW00.FG0PWIXM = FG0PW00.FG0PWEND + 2;
    ;
    while (FG0PW00.FG0PWIXM >= 9) /* Reach the 7th month*/
      ;
      FG0PS02(); /* Verify closeout forecast*/
      ;
      FG0PW00.FG0PWIXM = FG0PW00.FG0PWIXM - 1; /* decrement display index*/
      ;
    end
    ;
    FG0PW00.FG0PWIXM = 6; /* Initialize b-grade index*/
    ;
  else
    ;
    FG0PW00.FG0PWIXM = FG0PW00.FG0PWEND; /* Initialize b-grade index*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Check the 1st b-grade and closeout block.*/
   /* ------------------------------------------------------------*/
  ;
  while (FG0PW00.FG0PWIXM >= 1) /* Until end of the page*/
    ;
    FG0PS01(); /* Verify b-grade forecast*/
    ;
    FG0PW00.FG0PWIXM = FG0PW00.FG0PWIXM - 1; /* decrement display index*/
    ;
  end
  ;
  if (FG0PW00.FG0PWEND > 6)
    ;
    FG0PW00.FG0PWIXM = 6;
    ;
  else
    ;
    FG0PW00.FG0PWIXM = FG0PW00.FG0PWEND;
    ;
  end
  ;
  while (FG0PW00.FG0PWIXM >= 1) /* Until end of the page*/
    ;
    FG0PS02(); /* Verify closout forecast*/
    ;
    FG0PW00.FG0PWIXM = FG0PW00.FG0PWIXM - 1; /* decrement display index*/
    ;
  end
  ;
end // end FG0P510

// Verify data changed for PF15
Function FG0P520()
  ;
   /* ------------------------------------------------------------*/
   /* Check the 2nd b-grade and closeout block.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0PW00.FG0PWEND > 6) /* The range is over 6 months*/
    ;
    FG0PW00.FG0PWIXM = FG0PW00.FG0PWEND + 2;
    ;
    while (FG0PW00.FG0PWIXM >= 9) /* Reach the 7th month*/
      ;
      if (FG0PM001.FG0PMBGF[FG0PWIXM] != FG0PW01.FG0PMBGF[FG0PWIXM])
        ;
        FFWREC.XXXMODID = "520"; /* Module identification*/
        converseLib.validationFailed(247); /* Indicate data change not allowed*/
        set FG0PM001.FG0PMBGF[FG0PWIXM] cursor, bold; /* Highlight*/
        ;
      end
      ;
      FG0PW00.FG0PWIXM = FG0PW00.FG0PWIXM - 1; /* decrement display index*/
      ;
    end
    ;
    FG0PW00.FG0PWIXM = FG0PW00.FG0PWEND + 2;
    ;
    while (FG0PW00.FG0PWIXM >= 9) /* Reach the 7th month*/
      ;
      if (FG0PM001.FG0PMCOF[FG0PWIXM] != FG0PW01.FG0PMCOF[FG0PWIXM])
        ;
        FFWREC.XXXMODID = "520"; /* Module identification*/
        converseLib.validationFailed(247); /* Indicate data change not allowed*/
        set FG0PM001.FG0PMCOF[FG0PWIXM] cursor, bold; /* Highlight*/
        ;
      end
      ;
      FG0PW00.FG0PWIXM = FG0PW00.FG0PWIXM - 1; /* decrement display index*/
      ;
    end
    ;
    FG0PW00.FG0PWIXM = 6; /* Initialize b-grade index*/
    ;
  else
    ;
    FG0PW00.FG0PWIXM = FG0PW00.FG0PWEND; /* Initialize b-grade index*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Check the 1st b-grade and closeout block.*/
   /* ------------------------------------------------------------*/
  ;
  while (FG0PW00.FG0PWIXM >= 1) /* Until end of the page*/
    ;
    if (FG0PM001.FG0PMBGF[FG0PWIXM] != FG0PW01.FG0PMBGF[FG0PWIXM])
      ;
      FFWREC.XXXMODID = "520"; /* Module identification*/
      converseLib.validationFailed(247); /* Indicate data change not allowed*/
      set FG0PM001.FG0PMBGF[FG0PWIXM] cursor, bold; /* Highlight*/
      ;
    end
    ;
    FG0PW00.FG0PWIXM = FG0PW00.FG0PWIXM - 1; /* decrement display index*/
    ;
  end
  ;
  if (FG0PW00.FG0PWEND > 6)
    ;
    FG0PW00.FG0PWIXM = 6;
    ;
  else
    ;
    FG0PW00.FG0PWIXM = FG0PW00.FG0PWEND;
    ;
  end
  ;
  while (FG0PW00.FG0PWIXM >= 1) /* Until end of the page*/
    ;
    if (FG0PM001.FG0PMCOF[FG0PWIXM] != FG0PW01.FG0PMCOF[FG0PWIXM])
      ;
      FFWREC.XXXMODID = "520"; /* Module identification*/
      converseLib.validationFailed(247); /* Indicate data change not allowed*/
      set FG0PM001.FG0PMCOF[FG0PWIXM] cursor, bold; /* Highlight*/
      ;
    end
    ;
    FG0PW00.FG0PWIXM = FG0PW00.FG0PWIXM - 1; /* decrement display index*/
    ;
  end
  ;
  ;
end // end FG0P520

// Verify passed keys
Function FG0P530()
  ;
  if (FFWREC.FFABEGMO == 0  /* Beginning month not passed*/
   || FFWREC.FFAENDMO == 0  /* Ending month not passed*/
   || FFWREC.YSMXDV == "  " /* Division group not passed*/
   || FFWREC.XPLCD == "  "  /* Product line not passed*/
   || FFWREC.FFEWSNBR == 0) /* Worksheet number*/
    ;
    FFWREC.XXXMODID = "530"; /* Module identification*/
    converseLib.validationFailed(01); /* Indicate system error*/
    ;
  end
  ;
end // end FG0P530

// Process valid input request
Function FG0P600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  ;
  FG0PW00.FG0PWSWF = "Y"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If ENTER was pressed and any forecast being updated, then*/
   /* update the worksheet DFCAST.VWLMTH01 table.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    ;
    FG0PW00.FG0PWIXM = 1; /* Initialize the month index*/
    FG0PW00.FG0PWIXF = 1; /* Initialize the fcst index*/
    ;
    while (FG0PW00.FG0PWIXM <= FG0PW00.FG0PWEND) /* Until end of range*/
      ;
      if (FG0PW00.FG0PWIXF == 7) /* Reach subtotal field*/
        ;
        FG0PW00.FG0PWIXF = FG0PWIXF + 2;
        ;
      end
      ;
      if (FG0PW01.FG0PWCCH[FG0PWIXF] == "Y" /* Closeout fcst changed*/
       || FG0PW01.FG0PWBCH[FG0PWIXF] == "Y") /* B-grade fcst changed*/
        ;
        FG0P610(); /* Read DFCAST.VWLMTH01*/
        ;
        if (FFHREC.ZZZCHGCT != FG0PW01.FG0PWCNT[FG0PWIXF]) /* Recd was changed*/
          ;
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* Roll back all the changes*/
          ;
          FG0PW00.FG0PWSWR = "Y"; /* Request for data switch*/
          FFWREC.XXXMODID = "600"; /* Module identification*/
          FFWREC.XXXMSGNO = 46; /* Indicate update by another*/
          ;
          exit stack; /* Exit to display map*/
          ;
        else
          ;
          FG0P620(); /* Update DFCAST.VWLMTH01*/
          ;
        end
      end
      ;
      FG0PW00.FG0PWIXM = FG0PW00.FG0PWIXM + 1; /* Increment the month index*/
      FG0PW00.FG0PWIXF = FG0PW00.FG0PWIXF + 1; /* Increment the fcst index*/
      ;
    end
    ;
    if ("Y" in FG0PW01.FG0PWCCH /* Closeout fcst has been changed*/
     || "Y" in FG0PW01.FG0PWBCH) /* B-grade fcst has been changed*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* Commit all changes*/
      ;
      FFWREC.XXXMODID = "600"; /* Module identification*/
      FFWREC.XXXMSGNO = 32;
                                   /* Indicate update complete successfully*/
      FFWREC.FFWMODSW = "N"; /* Indicat the data no need to be saved*/
      move "N" to FG0PW01.FG0PWCCH[1] for all; /* Reset the closeout chng flag*/
      move "N" to FG0PW01.FG0PWBCH[1] for all; /* Reset the b-grade chng flag*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if PF15 was pressed, save the forecasts into master tables.*/
   /* (DFCAST.VMLINE01)*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf15) /* PF15 was pressed*/
    ;
    FG0PW00.FG0PWIXM = 1; /* Initialize the month index*/
    FG0PW00.FG0PWIXF = 1; /* Initialize the fcst index*/
    ;
    FG0PS03(); /* Obtain all category for the line*/
    ;
    while (FG0PW00.FG0PWIXM <= FG0PW00.FG0PWEND) /* Until end of range*/
      ;
      if (FG0PW00.FG0PWIXF == 7) /* Reach subtotal field*/
        ;
        FG0PW00.FG0PWIXF = FG0PWIXF + 2;
        ;
      end
      ;
      FG0P630(); /* Read DFCAST.VMLINE01*/
      ;
      if (SQLCA.VAGen_SQLCODE == 100) /* Record not found*/
        ;
        FG0P635(); /* Insert DFCAST.VMLINE01*/
        ;
      else
        ;
        FG0P640(); /* Update DFCAST.VMLINE01*/
        ;
      end
      ;
      FG0P650(); /* Process for category level*/
      ;
      FG0PW00.FG0PWIXM = FG0PW00.FG0PWIXM + 1; /* Increment the month index*/
      FG0PW00.FG0PWIXF = FG0PW00.FG0PWIXF + 1; /* Increment the fcst index*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* Commit all changes*/
      ;
      FFWREC.XXXMODID = "600"; /* Module identification*/
      FFWREC.XXXMSGNO = 26; /* Indicate wrksht fcst saved as master*/
      ;
    end
    ;
  end
  ;
end // end FG0P600

// Read DFCAST.VWLMTH01 table
Function FG0P610()
  ;
  set FFHREC empty; /* Clear row storage area*/
  ;
  FFHREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFHREC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FFHREC.FF4FCTMO = FG0PW00.FG0PWHDG[FG0PWIXM]; /* Forecast month*/
  ;
  try
    call "IO3900" ("S ", SQLCA, FFHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not found or not available, return an error message*/
   /* to the user. Ohterwise, indicate that a system error has*/
   /* occured.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "610"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFHREC.FFHKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0P610

// Update DFCAST.VWLMTH01 table
Function FG0P620()
  ;
  FFHREC.FF5COFCT = FG0PW01.FG0PWCOF[FG0PWIXF]; /* Closeout fcst*/
  FFHREC.FF5BGFCT = FG0PW01.FG0PWBGF[FG0PWIXF]; /* B-grade fcst*/
  ;
  XX0XS01(); /* Obtain curretn date and time*/
  ;
  FFHREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFHREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  try
    call "IO3900" ("U ", SQLCA, FFHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "620"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFHREC.FFHKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0P620

// Read DFCAST.VMLINE01 table
Function FG0P630()
  ;
  set FF5REC empty; /* Clear row storage area*/
  ;
  FF5REC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF5REC.FF4FCTMO = FG0PW00.FG0PWHDG[FG0PWIXM]; /* Forecast month*/
  ;
  try
    call "IO3710" ("S ", SQLCA, FF5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or record not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not found or not available, return an error message*/
   /* to the user. Ohterwise, indicate that a system error has*/
   /* occured.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "630"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF5REC.FF5KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0P630

// Insert DFCAST.VMLINE01 table
Function FG0P635()
  set FF5REC empty;
  ;
  FF5REC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF5REC.FF4FCTMO = FG0PW00.FG0PWHDG[FG0PWIXM]; /* Forecast month*/
  ;
  FF5REC.FF5COFCT = FG0PW01.FG0PWCOF[FG0PWIXF]; /* Closeout fcst*/
  FF5REC.FF5BGFCT = FG0PW01.FG0PWBGF[FG0PWIXF]; /* B-grade fcst*/
  FF5REC.FF4BPFFL = "N"; /* Buy flag*/
  FF5REC.FF4RTRGT = 0; /* Production target*/
  ;
  XX0XS01(); /* Obtain curretn date and time*/
  ;
  FF5REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  FF5REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF5REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  try
    call "IO3710" ("A ", SQLCA, FF5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "635"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF5REC.FF5KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0P635

// Update DFCAST.VMLINE01 table
Function FG0P640()
  ;
  FF5REC.FF5COFCT = FG0PW01.FG0PWCOF[FG0PWIXF]; /* Closeout fcst*/
  FF5REC.FF5BGFCT = FG0PW01.FG0PWBGF[FG0PWIXF]; /* B-grade fcst*/
  ;
  XX0XS01(); /* Obtain curretn date and time*/
  ;
  FF5REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF5REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  try
    call "IO3710" ("U ", SQLCA, FF5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "640"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF5REC.FF5KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0P640

// Process for category level
Function FG0P650()
  ;
  FG0P651(); /* Accumulate the category clsout/bgd fcst*/
  ;
   /* -------------------------------------------------------*/
   /* Obtain the inline sales fcst*/
   /* -------------------------------------------------------*/
  ;
  set FF6REC empty; /* Clear storage row*/
  FF6REC.YPGCD = "01"; /* inline*/
  FG0P652(); /* obtain inline sales fcst*/
  FG0PW00.FG0PWLFC = FF6REC.FF6SLFCT;
  FG0PW00.FG0PWITF = FF6REC.FF6SLFCT; /* inline sales fcst*/
  ;
   /* -------------------------------------------------------*/
   /* Obtain the makeup sales fcst*/
   /* -------------------------------------------------------*/
  ;
  FF6REC.YPGCD = "02"; /* inline*/
  FG0P652(); /* obtain makeup sales fcst*/
  FG0PW00.FG0PWLFC = FG0PW00.FG0PWLFC + FF6REC.FF6SLFCT;
  FG0PW00.FG0PWMTF = FF6REC.FF6SLFCT; /* makeup sales fcst*/
  ;
   /* --------------------------------------------------------*/
   /* if bgd/clsout fcst by line is greater than the category*/
   /* summed up, distribute to category level*/
   /* --------------------------------------------------------*/
  ;
  FG0P654();
  ;
  FG0P655();
  ;
end // end FG0P650

// Accum cat bgd/clsout fcst
Function FG0P651()
   /* ------------------------------------------------------------*/
   /* Fetch categories until end of array.*/
   /* ------------------------------------------------------------*/
  ;
  FG0PW00.FG0PWIXC = 1;
  ;
  FG0PW00.FG0PWCCO = 0; /* initialize accum cat closeout fld*/
  FG0PW00.FG0PWCBG = 0; /* initialize accum cat b-grade fld*/
  ;
  while (FG0PW00.FG0PWCAT[FG0PWIXC] != " ") /* Until end of array*/
    ;
    FG0PS07(); /* Select MCAT*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* mcat record found*/
      ;
      /* ------------------------------------------------------------*/
       /* Save the category sales fcst into the array and accumulate*/
       /* the category b-grade and closeout fcst to line/type level*/
      /* ------------------------------------------------------------*/
      ;
      FG0PW00.FG0PWCFC[FG0PWIXC] = FF7REC.FF6SLFCT; /* save sls*/
      FG0PW00.FG0PWCCO = mathLib.round(FG0PW00.FG0PWCCO + FF7REC.FF5COFCT, -mathLib.decimals(FG0PW00.FG0PWCCO));
      FG0PW00.FG0PWCBG = mathLib.round(FG0PW00.FG0PWCBG + FF7REC.FF5BGFCT, -mathLib.decimals(FG0PW00.FG0PWCBG));
      ;
    end
    ;
    FG0PW00.FG0PWIXC = FG0PW00.FG0PWIXC + 1;
    ;
  end
  ;
end // end FG0P651

// obtain line/type sales fcst
Function FG0P652()
  ;
  FF6REC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF6REC.FF4FCTMO = FG0PW00.FG0PWHDG[FG0PWIXM]; /* Forecast month*/
  ;
  try
    call "IO3750" ("S ", SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* or record not found*/
      ;
      FF6REC.FF6SLFCT = 0;
      return; /* Return to previous process*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not found or not available, return an error message*/
   /* to the user. Ohterwise, indicate that a system error has*/
   /* occured.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "652"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF6REC.FF6KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0P652

// Distribute line bgrd to cat
Function FG0P654()
  FG0PW00.FG0PWIXC = 1;
  ;
  while (FG0PW00.FG0PWCAT[FG0PWIXC] != " ") /* Until end of the array*/
    ;
    FG0PW00.FG0PWCRT = 0;
    FG0PW00.FG0PWTRT = 0;
    ;
    if (FG0PW00.FG0PWTYP[FG0PWIXC] == "01") /* Inline*/
      if (FG0PW00.FG0PWITF != 0
       && FG0PW00.FG0PWLFC != 0)
        FG0PW00.FG0PWCRT = mathLib.round(FG0PW00.FG0PWCFC[FG0PWIXC] / FG0PW00.FG0PWITF, -mathLib.decimals(FG0PW00.FG0PWCRT));
        FG0PW00.FG0PWTRT = mathLib.round(FG0PW00.FG0PWITF / FG0PW00.FG0PWLFC, -mathLib.decimals(FG0PW00.FG0PWTRT));
      end
    else /* Makeup*/
      if (FG0PW00.FG0PWMTF != 0
       && FG0PW00.FG0PWLFC != 0)
        FG0PW00.FG0PWCRT = mathLib.round(FG0PW00.FG0PWCFC[FG0PWIXC] / FG0PW00.FG0PWMTF, -mathLib.decimals(FG0PW00.FG0PWCRT));
        FG0PW00.FG0PWTRT = mathLib.round(FG0PW00.FG0PWMTF / FG0PW00.FG0PWLFC, -mathLib.decimals(FG0PW00.FG0PWTRT));
      end
    end
    ;
    FG0PS07(); /* Read VMCAT*/
    ;
    FF7REC.FF5BGFCT = FF5REC.FF5BGFCT * FG0PWCRT * FG0PWTRT;
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      FG0PS09(); /* Insert VMCAT*/
    else
      FG0PS08(); /* Update VMCAT*/
    end
    ;
    FG0PW00.FG0PWIXC = FG0PW00.FG0PWIXC + 1;
    ;
  end
  ;
end // end FG0P654

// Distribute line clsout to cat
Function FG0P655()
  FG0PW00.FG0PWIXC = 1;
  ;
  while (FG0PW00.FG0PWCAT[FG0PWIXC] != " ") /* Until end of the array*/
    ;
    FG0PW00.FG0PWCRT = 0;
    FG0PW00.FG0PWTRT = 0;
    ;
    if (FG0PW00.FG0PWTYP[FG0PWIXC] == "01") /* Inline*/
      if (FG0PW00.FG0PWITF != 0
       && FG0PW00.FG0PWLFC != 0)
        FG0PW00.FG0PWCRT = mathLib.round(FG0PW00.FG0PWCFC[FG0PWIXC] / FG0PW00.FG0PWITF, -mathLib.decimals(FG0PW00.FG0PWCRT));
        FG0PW00.FG0PWTRT = mathLib.round(FG0PW00.FG0PWITF / FG0PW00.FG0PWLFC, -mathLib.decimals(FG0PW00.FG0PWTRT));
      end
    else /* Makeup*/
      if (FG0PW00.FG0PWMTF != 0
       && FG0PW00.FG0PWLFC != 0)
        FG0PW00.FG0PWCRT = mathLib.round(FG0PW00.FG0PWCFC[FG0PWIXC] / FG0PW00.FG0PWMTF, -mathLib.decimals(FG0PW00.FG0PWCRT));
        FG0PW00.FG0PWTRT = mathLib.round(FG0PW00.FG0PWMTF / FG0PW00.FG0PWLFC, -mathLib.decimals(FG0PW00.FG0PWTRT));
      end
    end
    ;
    FG0PS07(); /* Read VMCAT*/
    ;
    FF7REC.FF5COFCT = FF5REC.FF5COFCT * FG0PWCRT * FG0PWTRT;
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      FG0PS09(); /* Insert VMCAT*/
    else
      FG0PS08(); /* Update VMCAT*/
    end
    ;
    FG0PW00.FG0PWIXC = FG0PW00.FG0PWIXC + 1;
    ;
  end
  ;
end // end FG0P655

// Verify b-grade forecast
Function FG0PS01()
  ;
  if (FG0PM001.FG0PMBGF[FG0PWIXM] == " "
   && FG0PM001.FG0PMBGF[FG0PWIXM] != FG0PW01.FG0PMBGF[FG0PWIXM])
    ;
    FG0PW01.FG0PWBCH[FG0PWIXM] = "Y"; /* Turn on bgd chng flag*/
    FG0PM001.FG0PMBGF[FG0PWIXM] = "    0";
    FG0PW01.FG0PMBGF[FG0PWIXM] = "    0";
    FG0PW01.FG0PWBGF[FG0PWIXM] = 0;
    ;
  end
  ;
  if (FG0PM001.FG0PMBGF[FG0PWIXM] > " "
   && FG0PM001.FG0PMBGF[FG0PWIXM] != FG0PW01.FG0PMBGF[FG0PWIXM])
    ;
    FFXREC.FFXCHAR = FG0PM001.FG0PMBGF[FG0PWIXM];
    XSFFS11(); /* Translate value format*/
    ;
    if (FFXREC.FFXRTNCD == "0") /* Normal return*/
      ;
      if (FFXREC.FFXNUMB < 0) /* Negative value*/
        ;
        FFWREC.XXXMODID = "S01"; /* Module identification*/
        converseLib.validationFailed(10); /* Invalid value entered*/
        set FG0PM001.FG0PMBGF[FG0PWIXM] cursor, bold; /* Highlighted*/
        ;
      else
        ;
        FG0PW01.FG0PWBCH[FG0PWIXM] = "Y"; /* Turn on the chng flag*/
        FG0PW01.FG0PWBGF[FG0PWIXM] = FFXREC.FFXNUMB;
        FG0PW01.FG0PMBGF[FG0PWIXM] = FG0PM001.FG0PMBGF[FG0PWIXM];
        ;
      end
      ;
    else
      ;
      FFWREC.XXXMODID = "S01"; /* Module identification*/
      converseLib.validationFailed(10); /* Indicate invalid value entered*/
      set FG0PM001.FG0PMBGF[FG0PWIXM] cursor, bold; /* Highlighted*/
      ;
    end
    ;
  end
  ;
end // end FG0PS01

// Verify closeout forecast
Function FG0PS02()
  ;
  if (FG0PM001.FG0PMCOF[FG0PWIXM] == " "
   && FG0PM001.FG0PMCOF[FG0PWIXM] != FG0PW01.FG0PMCOF[FG0PWIXM])
    ;
    FG0PW01.FG0PWCCH[FG0PWIXM] = "Y"; /* Turn on c/o chng flag*/
    FG0PM001.FG0PMCOF[FG0PWIXM] = "    0";
    FG0PW01.FG0PMCOF[FG0PWIXM] = "    0";
    FG0PW01.FG0PWCOF[FG0PWIXM] = 0;
    ;
  end
  ;
  if (FG0PM001.FG0PMCOF[FG0PWIXM] > " "
   && FG0PM001.FG0PMCOF[FG0PWIXM] != FG0PW01.FG0PMCOF[FG0PWIXM])
    ;
    FFXREC.FFXCHAR = FG0PM001.FG0PMCOF[FG0PWIXM];
    XSFFS11(); /* Translate value format*/
    ;
    if (FFXREC.FFXRTNCD == "0") /* Normal return*/
      ;
      if (FFXREC.FFXNUMB < 0) /* Negative value*/
        ;
        FFWREC.XXXMODID = "S02"; /* Module identification*/
        converseLib.validationFailed(10); /* Invalid value entered*/
        set FG0PM001.FG0PMCOF[FG0PWIXM] cursor, bold; /* Highlighted*/
        ;
      else
        ;
        FG0PW01.FG0PWCCH[FG0PWIXM] = "Y"; /* Turn on c/o chng flag*/
        FG0PW01.FG0PWCOF[FG0PWIXM] = FFXREC.FFXNUMB;
        FG0PW01.FG0PMCOF[FG0PWIXM] = FG0PM001.FG0PMCOF[FG0PWIXM];
        ;
      end
      ;
    else
      ;
      FFWREC.XXXMODID = "S02"; /* Module identification*/
      converseLib.validationFailed(10); /* Indicate invalid value entered*/
      set FG0PM001.FG0PMCOF[FG0PWIXM] cursor, bold; /* Highlighted*/
      ;
    end
    ;
  end
  ;
end // end FG0PS02

// Obtain all category for line
Function FG0PS03()
   /* ------------------------------------------------------------*/
   /* Open FFXRF.*/
   /* ------------------------------------------------------------*/
  ;
  FG0PS04(); /* Open FFXRF*/
  ;
   /* ------------------------------------------------------------*/
   /* Fetch category until end of cursor.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to FG0PW00.FG0PWCAT[1] for all; /* Initialize category array*/
  FG0PW00.FG0PWIXC = 1; /* Initialize category index*/
  ;
  while (FG0PW00.FG0PWSWC == "N") /* Until end of cursor*/
    ;
    FG0PS05(); /* Fetch FFXRF*/
    ;
    if (FG0PW00.FG0PWSWC == "N") /* If category was found*/
      ;
      FG0PW00.FG0PWCAT[FG0PWIXC] = FF2REC.XPCCD; /* save category*/
      FG0PW00.FG0PWTYP[FG0PWIXC] = FF2REC.YPGCD; /* save type group*/
      ;
      FG0PW00.FG0PWIXC = FG0PW00.FG0PWIXC + 1;
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Close the cursor for DFCAST.VFFXRF01.*/
   /* ------------------------------------------------------------*/
  ;
  FG0PS06(); /* Close FFXRF*/
  ;
  ;
end // end FG0PS03

// Select 's1' for VFFXRF01
Function FG0PS04()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  ;
  set FF2REC empty; /* Clear row storage area*/
  ;
   /* ------------------------------------------------------------*/
   /* Formate key.*/
   /* ------------------------------------------------------------*/
  ;
  FF2REC.XPLCD = FFWREC.XPLCD; /* Line*/
  FF2REC.YSMXDV = FFWREC.YSMXDV; /* Division group*/
  FF2REC.YPGCD = "*"; /* Type*/
  FF2REC.XPCCD = "*"; /* category*/
  ;
   /* ------------------------------------------------------------*/
   /* Open cursor for FFXRF.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    FG0PW00.FG0PWSWC = "N"; /* End of cursor switch*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S04"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0PS04

// Fetch  'n1' for VFFXRF01
Function FG0PS05()
   /* ------------------------------------------------------------*/
   /* Fetch FFXRF.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      FG0PW00.FG0PWSWC = "Y"; /* Indicate end of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S05"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0PS05

// Close  'c1' for VFFXRF01
Function FG0PS06()
   /* ------------------------------------------------------------*/
   /* Close FFXRF.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S06"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0PS06

// Select DFCAST.VMCAT001
Function FG0PS07()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area.*/
   /* ------------------------------------------------------------*/
  ;
  set FF7REC empty; /* clear DFCAST.VMCAT001 record.*/
  ;
   /* ------------------------------------------------------------*/
   /* Format keys for call to DFCAST.VMCAT001.*/
   /* ------------------------------------------------------------*/
  ;
  FF7REC.FF4FCTMO = FG0PW00.FG0PWHDG[FG0PWIXM]; /* month*/
  FF7REC.YSMXDV = "10"; /* div grp*/
  FF7REC.YPGCD = FG0PW00.FG0PWTYP[FG0PWIXC]; /* type group code*/
  FF7REC.XPCCD = FG0PW00.FG0PWCAT[FG0PWIXC]; /* category code*/
  FF7REC.XCTCD = FFWREC.XCTCD; /* country code*/
  ;
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S07"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CALL DFCAST.VMLTYP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0PS07

// Update DFCAST.VMCAT001
Function FG0PS08()
   /* ------------------------------------------------------------*/
   /* Format data.*/
   /* ------------------------------------------------------------*/
  ;
  FF7REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF7REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
   /* ------------------------------------------------------------*/
   /* Update DFCAST.VMCAT001.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3700" ("U ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      FFWREC.XXXMODID = "S08"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S08"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0PS08

// Insert DFCAST.VMCAT001
Function FG0PS09()
   /* ------------------------------------------------------------*/
   /* Format data.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0PW00.FG0PWTYP[FG0PWIXC] == "01") /* if inlines*/
    FF7REC.FF7FURAT = 0;
    FF7REC.FF7FLLRT = 92;
  else
    if (FG0PW00.FG0PWTYP[FG0PWIXC] == "02") /* if makeups*/
      FF7REC.FF7FURAT = 100;
      FF7REC.FF7FLLRT = 100;
    end
  end
  ;
  FF7REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  FF7REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF7REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
   /* ------------------------------------------------------------*/
   /* Insert DFCAST.VMCAT001.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3700" ("A ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      FFWREC.XXXMODID = "S09"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S09"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0PS09

//*** RECORD=FG0PW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FG0PW00 type basicRecord
  10 FG0PWIXM FG0PWIXM ; 
  10 FG0PWIXF FG0PWIXF ; 
  10 FG0PWIXC FG0PWIXC ; 
  10 FG0PWCR1 FG0PWCR1 ; 
  10 FG0PWSWC FG0PWSWC ; 
  10 FG0PWSWF FG0PWSWF ; 
  10 FG0PWSWR FG0PWSWR ; 
  10 FG0PWEND FG0PWEND ; 
  10 FG0PWSCO FG0PWSCO ; 
  10 FG0PWSBG FG0PWSBG ; 
  10 FG0PWGCO FG0PWGCO ; 
  10 FG0PWGBG FG0PWGBG ; 
  10 FG0PWDAT FG0PWDAT ; 
    15 FG0PWDCC FG0PWDCC ; 
    15 FG0PWDYM FG0PWDYM ; 
      20 FG0PWDYY FG0PWDYY ; 
      20 FG0PWDMM FG0PWDMM ; 
  10 FG0PWHDG FG0PWHDG [12] ; 
    15 FG0PWHCC FG0PWHCC ; 
    15 FG0PWHYM FG0PWHYM ; 
  10 FG0PWLFC FG0PWLFC ; 
  10 FG0PWITF FG0PWITF ; 
  10 FG0PWMTF FG0PWMTF ; 
  10 FG0PWCCO FG0PWCCO ; 
  10 FG0PWCBG FG0PWCBG ; 
  10 FG0PWARY FG0PWARY ; 
    15 FG0PWCAT FG0PWCAT [50] ; 
    15 FG0PWTYP FG0PWTYP [50] ; 
    15 FG0PWCFC FG0PWCFC [50] ; 
  10 FG0PWCRT FG0PWCRT ; 
  10 FG0PWTRT FG0PWTRT ; 
  10 FG0PWMSG FG0PWMSG ; 
end // end FG0PW00

//*** RECORD=FG0PW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FG0PW01 type basicRecord
  10 FG0PWBMO FG0PWBMO ; 
    15 FG0PWBCC FG0PWBCC ; 
    15 FG0PMBMO FG0PMBMO ; 
  10 FG0PWEMO FG0PWEMO ; 
    15 FG0PWECC FG0PWECC ; 
    15 FG0PMEMO FG0PMEMO ; 
  10 FG0PMCOF FG0PMCOF [16] ; 
  10 FG0PWCOF FG0PWCOF [16] ; 
  10 FG0PWCCH FG0PWCCH [16] ; 
  10 FG0PMBGF FG0PMBGF [16] ; 
  10 FG0PWBGF FG0PWBGF [16] ; 
  10 FG0PWBCH FG0PWBCH [16] ; 
  10 FG0PWCNT FG0PWCNT [16] ; 
end // end FG0PW01

// B-grade fcst display field
DataItem FG0PMBGF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Beginning YYMM
DataItem FG0PMBMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Closeout fcst display field
DataItem FG0PMCOF char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Ending YYMM
DataItem FG0PMEMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Category array
DataItem FG0PWARY char(400)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Century
DataItem FG0PWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// B-grade fcst changed flag
DataItem FG0PWBCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// B-grade fcst entered field
DataItem FG0PWBGF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning date of the range
DataItem FG0PWBMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Category code
DataItem FG0PWCAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Summed category bgrd field
DataItem FG0PWCBG int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Closeout fcst changed flag
DataItem FG0PWCCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Summed category clsout field
DataItem FG0PWCCO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Category sales fcst
DataItem FG0PWCFC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Change count
DataItem FG0PWCNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Closeout fcst entered field
DataItem FG0PWCOF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor for VWLMTH01
DataItem FG0PWCR1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// category/type sales ratio
DataItem FG0PWCRT num(6,5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date work area
DataItem FG0PWDAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century work area
DataItem FG0PWDCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MM work area
DataItem FG0PWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YYMM work area
DataItem FG0PWDYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YY work area
DataItem FG0PWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century
DataItem FG0PWECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending date of the range
DataItem FG0PWEMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// End of range index
DataItem FG0PWEND num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// B-grade grand total work area
DataItem FG0PWGBG int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Coseout grand total work area
DataItem FG0PWGCO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Heading century work area
DataItem FG0PWHCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Heading work area
DataItem FG0PWHDG num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Heading YYMM work area
DataItem FG0PWHYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Inline type sales fcst
DataItem FG0PWITF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for category fields
DataItem FG0PWIXC smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for forecast fields
DataItem FG0PWIXF smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FG0PWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Line sales fcst
DataItem FG0PWLFC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Warning message send flag
DataItem FG0PWMSG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Makeup type sales fcst
DataItem FG0PWMTF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// B-grade subtotal work area
DataItem FG0PWSBG int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Closeout subtotal work area
DataItem FG0PWSCO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of cursor for VFFXRF01
DataItem FG0PWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FG0PWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FG0PWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// type/line sales ratio
DataItem FG0PWTRT num(6,5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// type group code
DataItem FG0PWTYP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

