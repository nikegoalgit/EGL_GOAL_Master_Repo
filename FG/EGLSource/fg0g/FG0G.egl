package fg0g;

import corpcom1.CACHGFL;
import corpcom2.XPLREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFF001;
import corpcom4.XSFFS-FF5500;
import corpcom4.XSFFS-FF5550;
import corpcom4.XSFFS01;
import corpcom4.XSFFS10;
import corpcom4.XSFFS11;
import corpcom4.XSFFS35;
import corpcom4.XSFFS51;
import corpcom4.XSFFS60;
import corpcom4.XSFFS61;
import corpcom4.XSNOWAY;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XPLTBL;
import corpx1.XPRTBL;
import corpx2.XPLSDESC;
import corpy2.YPGABRV;
import corpy2.YPGCD;
import corpy2.YPGTBL;
import ff.common.*;
import fh.common.FH3REC;
import fh.common.FH4REC;
import fh.common.FHAREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=FG0G ****
// This application allows a user to create or inquire on a
// long range sales forecast by product type grp.  This
// application is invoked by selecting existing forecasts
// from a higher-level forecast application, the user may
// inquire on the existing forecast and modify it to create
// a new forecast.
// 
// There are two different screens that may be displayed.
// 
// The first screen displayed to the user shows the forecast
// identification and each product type group in the forecast,
// along with the current forecast quantites compared to either
// the historical sales quantities or the historical demand
// quantities for the prd typ grp.   The user specified whether
// the comparison is to be against sales or demand and the
// number of years to be used for the comparison.  The current
// forecast quantities may be adjusted by the user either by
// quantity or by percentage.
// 
// The forecast may be saved for later viewing by pressing
// the appropriate attention key.  If a line is selected, that
// prd typ grp is passed to another application, FG0H, Long
// Range Forecast By category, to display the forecast for the
// product categories in the type group.
// 
// The second screen is displayed when the appropriate
// attention key is pressed on the first screen.  It shows the
// forecast identification and each prd type grp in the
// forecast, along with historical sales quantities compared to
// the historical demand quantities.  The user may request the
// first screen be displayed by pressing the appropriate
// attention key.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from either of the screens.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          11/10/89  RGILLI  New application.
// FF#53    06/13/90  JJUCH   Fixed the wrong displaying after
//                            saving zero bgrd/clsout fcst.
//          06/25/90  JJUCH   Fixed the problem of missing
//                            historical demand qtys.
// FF1017   07/11/90  SFORD   Added PF19 - worksheet key
// FF1016   07/31/90  JJUCH   Disallowed to fcst current main
//                            buy month and all prior months.
// FF#134   08/21/90  SFORD   Set job completed msg flag = 'y'
// Fix      08/30/90  JJUCH   Fixed -911 clear FFWREC problem.
// FF1029   10/04/90  MDANGE  Fixed to calculate the history
//                            percentages and display on screen
// Fix      10/15/90  MDANGE  Fixed to calculate type group
//                            percents properly.  On first time
//                            total percent and amounts were
//                            being recalculated to 104%.
// FF1073   02/11/91  JJUCH   Consider life cycle '20' and qual
//                            '02' as b-grade.
// Fix      06/01/92  JJUCH   Remove -803 checking for vwlmth01
//                            table and replace with reading,
//                            adding and update logic.
// FF382    03/12/93  KGRAHA  change to accomodate VWDGRP01
//                            table
// FF394    03/23/93  JJUCH   Change to send report to BUNDLE.
//          09/08/93  JJUCH   Convert to CSP V4.1 version.
// FH140    02/10/94  JJUCH   Change to get actual prop and
//                            authorized future seperately and
//                            add them together to get hist dmd
// FF-409   04/27/94  MWALKE  - Switch sales from business
//                              month to need month.
//                            - Delete print function.
//          09/15/94  JALLE1  Fix total fcst error.
//                            Fix blank userid (vwdgrp01) error
// FF175    12/10/96  DSMITH  Changed the date range fill
//                            character to '0'.
// *********************
Program FG0G type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF5REC FF5REC; // record
  FF6REC FF6REC; // record
  FFAREC FFAREC; // record
  FFBREC FFBREC; // record
  FFEREC FFEREC; // record
  FFFREC FFFREC; // record
  FFGREC FFGREC; // record
  FFHREC FFHREC; // record
  FFIREC FFIREC; // record
  FFVREC FFVREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  FG0GW00 FG0GW00; // record
  FG0GW01 FG0GW01; // record
  FG0GW02 FG0GW02; // record
  FG0GW03 FG0GW03; // record
  FH3REC FH3REC; // record
  FH4REC FH4REC; // record
  FHAREC FHAREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPRTBL; // table
  use YPGTBL; // table
  use XPLTBL; // table
  use FG0GM.FG0GM001,  // forms
      FG0GM.FG0GM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();

     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FFFREC empty; /* Special function parameters*/
    set FG0GM001 initial; /* M001 input/output*/
    set FG0GM002 initial; /* M002 input/output*/
    set FG0GW00 empty; /* Working storage*/
    set FG0GW01 empty; /* M001 display storage*/
    set FG0GW02 empty; /* M002 temporary storage*/
    set FG0GW03 empty; /* m002 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine work area*/
    set TA6REC empty; /* jcl submit work area*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FG0GW00.FG0GWSWR = "N"; /* Request for data switch*/
    FG0GW00.FG0GWSWF = "Y"; /* format screen data switch*/
    FG0GW00.FG0GWSWD = "1"; /* map switch*/
    FG0GW00.FG0GW1ST = "Y"; /* 1st time thru flag*/

    FG0GW01.FG0GWYOP = 1; /* default value year option*/
    FG0GW01.FG0GWHOP = "S"; /* default value history option*/

    XPLREC.XPLCD = FFWREC.XPLCD;
    XPLREC.XGPCD = COMMAREA.XGPCD;
    if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
      FG0GW00.XPLSDESC = XPLTBL.XPLSDESC[sysVar.arrayIndex];
    end

    FG0GW00.YPGCD[1] = "01"; /* ftwr fcst valid prd typ grps*/
    FG0GW00.YPGCD[2] = "02";

    FG0GW00.FG0GWYDS[1] = "1 YEAR AGO"; /* year 1 desc*/
    FG0GW00.FG0GWYDS[2] = "2 YEAR AGO"; /* year 2 desc*/
    FG0GW00.FG0GWYDS[3] = "3 YEAR AGO"; /* year 3 desc*/

    FG0GW00.FG0GWHDS[1] = "HIST NEED MO SALES";
    FG0GW00.FG0GWHDS[2] = "HISTORICAL DEMAND ";

     /* ---------------------------------------------------*/
     /* Clear unused fields*/
     /* ---------------------------------------------------*/

    FFWREC.YPGCD = " "; /* Clear type group code*/
    FFWREC.YPGABRV = " "; /* Clear type group abrv*/
    FFWREC.XPCCD = " "; /* Clear product category code*/
    FFWREC.XPCABRV = " "; /* Clear product category abrv*/
    FFWREC.SYBSTGNB = " "; /* Clear style group number*/
    FFWREC.SYBSTGNM = " "; /* Clear style group name*/
    FFWREC.SY1STNBR = " "; /* Clear style number*/
    FFWREC.SY2CLRID = " "; /* Clear color id*/
    FFWREC.XDMCD = " "; /* Clear dimension code*/
    FFWREC.SY1SSTNM = " "; /* Clear short style name*/
    FFWREC.SY2CLRAB = " "; /* Clear color abrv*/
    FFWREC.XDMABRV = " "; /* Clear dimension abrv*/
    FFWREC.ZRGCD = " "; /* Clear region code*/
    FFWREC.ZRGABRV = " "; /* Clear region abrv*/
    FFWREC.XCTCD = " "; /* Clear country code*/
    FFWREC.XCTABRV = " "; /* Clear country abrv*/

     /* ------------------------------------------------------------*/
     /* if work sheet nbr is passed obtain data*/
     /* ------------------------------------------------------------*/

    if (FFWREC.FFABEGMO > 0
     && FFWREC.FFAENDMO > 0)
      FG0GW00.FG0GWSWR = "Y"; /* set data request flag*/
    end

    if (FFWREC.FFEWSNBR > 0)
      FG0GW00.FG0GWSWR = "Y"; /* set data request flag*/
    end


     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FG0G000; /* Converse the main process*/

    FG0G000: FG0G000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FG0G001; /* Converse the main process*/

    FG0G001: FG0G001();
     /* ------------------------------------------------------------*/
     /* flow to converse the main process used to display a map*/
     /* ------------------------------------------------------------*/

    goto FG0G001;

  end // end main
end // end FG0G

// fetch dfcast.vwdgrp01 row
Function FG0G-1111()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vwdgrp01 table row*/
   /* ------------------------------------------------------------*/

  set FFEREC empty; /* Clear row storage area*/

  FFEREC.FFEWSNBR = FFWREC.FFEWSNBR;

  try
    call "IO3850" ("S ", SQLCA, FFEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "111"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWDGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFEREC.FFEKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0G-1111

// fetch dfcast.vwline01 row
Function FG0G-1112()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vwline01 table row*/
   /* ------------------------------------------------------------*/

  set FFGREC empty; /* Clear row storage area*/

  FFGREC.FFEWSNBR = FFWREC.FFEWSNBR; /* wrk sheet nbr*/
  FFGREC.XPLCD = FFWREC.XPLCD; /* product line code*/

  try
    call "IO3890" ("S ", SQLCA, FFGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "111"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VWLINE01 TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFGREC.FFGKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0G-1112

// obtain inv ctoff dt vffctl01
Function FG0G-1121()
   /* ------------------------------------------------------------*/
   /* Obtain invoice cutoff date from dfcast.vffctl01*/
   /* ------------------------------------------------------------*/

  set FF1REC empty; /* Clear row storage area*/

  FF1REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FF1REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* Indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VFFCTL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF1REC.FF1GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0G-1121

// calc curr mo and caov dates
Function FG0G-1122()
   /* ------------------------------------------------------------*/
   /* Current month calculation , stored in fg0gW00.fg0gw-curr-mo*/
   /* ------------------------------------------------------------*/

  if (FF1REC.FF1IVCDT != 0) /* ===> Invoice cutoff date*/
    FG0GW00.FG0GW-CCYYMMDD = FF1REC.FF1IVCDT;

    if (XX0XW01.XX0XWDAT > FF1REC.FF1IVCDT) /* ===> curr >  ivc date*/
      FG0GW00.FG0GW-CURR-MO = FG0GW00.FG0GW-CCYYMM;
    else

      if (FG0GW00.FG0GW-MM == 1)
        FG0GW00.FG0GW-MM = 12;

        FG0GW00.FG0GW-CCYY = FG0GW00.FG0GW-CCYY - 1;
        FG0GW00.FG0GW-CURR-MO = FG0GW00.FG0GW-CCYYMM;

      else
        FG0GW00.FG0GW-MM = FG0GW00.FG0GW-MM - 1;
        FG0GW00.FG0GW-CURR-MO = FG0GW00.FG0GW-CCYYMM;
      end

    end
  else
    FG0GW00.FG0GW-CURR-MO = 0;
  end

   /* ------------------------------------------------------------*/
   /* Calculate:*/
   /* - current date minus 1 month*/
   /* - current date minus 2 months*/
   /* - current date minus 3 months*/
   /* - current date minus 4 months*/
   /* ------------------------------------------------------------*/

  FG0GW00.FG0GWWDT = FG0GW00.FG0GW-CURR-MO; /* work date*/

  if (FG0GW00.FG0GWWMM == 1)
    FG0GW00.FG0GWWMM = 12;
    if (FG0GW00.FG0GWWYY == 00)
      FG0GW00.FG0GWWYY = 99;
      FG0GW00.FG0GWWCC = FG0GW00.FG0GWWCC - 1;
    else
      FG0GW00.FG0GWWYY = FG0GW00.FG0GWWYY - 1;
    end
  else
    FG0GW00.FG0GWWMM = FG0GW00.FG0GWWMM - 1;
  end

  FG0GW00.FG0GW-CURR-MO-MINUS1 = FG0GW00.FG0GWWDT;

  if (FG0GW00.FG0GWWMM == 1)
    FG0GW00.FG0GWWMM = 12;
    if (FG0GW00.FG0GWWYY == 00)
      FG0GW00.FG0GWWYY = 99;
      FG0GW00.FG0GWWCC = FG0GW00.FG0GWWCC - 1;
    else
      FG0GW00.FG0GWWYY = FG0GW00.FG0GWWYY - 1;
    end
  else
    FG0GW00.FG0GWWMM = FG0GW00.FG0GWWMM - 1;
  end

  FG0GW00.FG0GW-CURR-MO-MINUS2 = FG0GW00.FG0GWWDT;

  if (FG0GW00.FG0GWWMM == 1)
    FG0GW00.FG0GWWMM = 12;
    if (FG0GW00.FG0GWWYY == 00)
      FG0GW00.FG0GWWYY = 99;
      FG0GW00.FG0GWWCC = FG0GW00.FG0GWWCC - 1;
    else
      FG0GW00.FG0GWWYY = FG0GW00.FG0GWWYY - 1;
    end
  else
    FG0GW00.FG0GWWMM = FG0GW00.FG0GWWMM - 1;
  end

  FG0GW00.FG0GW-CURR-MO-MINUS3 = FG0GW00.FG0GWWDT;

  if (FG0GW00.FG0GWWMM == 1)
    FG0GW00.FG0GWWMM = 12;
    if (FG0GW00.FG0GWWYY == 00)
      FG0GW00.FG0GWWYY = 99;
      FG0GW00.FG0GWWCC = FG0GW00.FG0GWWCC - 1;
    else
      FG0GW00.FG0GWWYY = FG0GW00.FG0GWWYY - 1;
    end
  else
    FG0GW00.FG0GWWMM = FG0GW00.FG0GWWMM - 1;
  end

  FG0GW00.FG0GW-CURR-MO-MINUS4 = FG0GW00.FG0GWWDT;

end // end FG0G-1122

// Fetch dfcast.vwltyp01 row
Function FG0G-1131()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vwltyp01 table.*/
   /* ------------------------------------------------------------*/

  set FFIREC empty; /* Clear row storage area*/

  FFIREC.FFEWSNBR = FFWREC.FFEWSNBR;
  FFIREC.XPLCD = FFWREC.XPLCD;
  FFIREC.YPGCD = FG0GW01.YPGCD[FG0GWIDX];

   /* ------------------------------------------------------------*/
   /* Select dfcast.vwltyp01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3910" ("S ", SQLCA, FFIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "113"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VWLTYP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFIREC.FFIKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0G-1131

// Proc for inln/mkup sales
Function FG0G-1133()
   /* ------------------------------------------------------------*/
   /* Determine if the date range is all forecast, actual, or*/
   /* mixed.*/
   /* Translate sales quantities from units to thousands using*/
   /* common routine xsffs10.*/
   /* ------------------------------------------------------------*/

  if (FG0GW01.FG0GWPED[FG0GWYIX] < FG0GW00.FG0GW-CURR-MO) /* all actl dts*/
    FG0G-11331(); /* get actual sales qty*/
    FFXREC.FFXNUMB = FG0GW00.FG0GWUHS;
    XSFFS10();
    FG0GW00.FG0GWHSQ = FFXREC.FFXCHAR;

  else
    if (FG0GW01.FG0GWPBD[FG0GWYIX] >= FG0GW00.FG0GW-CURR-MO) /* all fcst dts*/
      FG0G-11333(); /* get fcst sales qty*/
      FFXREC.FFXNUMB = FG0GW00.FG0GWUHS;
      XSFFS10();
      FG0GW00.FG0GWHSQ = FFXREC.FFXCHAR;
    else /* mixed date range*/

      FFFREC.FFFBEGMO = FG0GW01.FG0GWPBD[FG0GWYIX];
      FFFREC.FFFENDMO = FG0GW00.FG0GW-CURR-MO-MINUS1; /* ACTL*/
      FG0G-11331(); /* get actual sales qty*/
      FG0GW00.FG0GWSHS = FG0GW00.FG0GWUHS;

      FFFREC.FFFBEGMO = FG0GW00.FG0GW-CURR-MO; /* FCST*/
      FFFREC.FFFENDMO = FG0GW01.FG0GWPED[FG0GWYIX];
      FG0G-11333(); /* get fcst sales qty*/
      FG0GW00.FG0GWUHS = FG0GW00.FG0GWUHS + FG0GW00.FG0GWSHS;

      FFXREC.FFXNUMB = FG0GW00.FG0GWUHS;
      XSFFS10();
      FG0GW00.FG0GWHSQ = FFXREC.FFXCHAR;

    end

  end

end // end FG0G-1133

// Proc actl inln/mkup sales
Function FG0G-11331()
   /* ------------------------------------------------------------*/
   /* Fetch actual need month sales from dfhist.vlnshp01.*/
   /* Determine if carryover needs to be fetched from dfhist.vfhlin01.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Init work storage quantity fields.*/
   /* ------------------------------------------------------------*/

  FG0GW00.FG0GWUHS = 0; /* init w/s historical sale units*/

   /* ------------------------------------------------------------*/
   /* Obtain historical sales quantities from dfhist.vlnshp01.*/
   /* Note: fffbegmo and fffendmo loaded in fg0g-1161*/
   /* ------------------------------------------------------------*/

  set FHAREC empty;

  FHAREC.XQACD = "01"; /* quality code*/
  FHAREC.XLCCD = "10"; /* life cycle code*/
  FHAREC.XPRCD = FG0GW01.YPGCD[FG0GWIDX]; /* product type code*/

  FG0GS03();

  FG0GW00.FG0GWUHS = FHAREC.FH5MSHQT;

   /* --------------------------------------------------------------*/
   /* Determine if carryover quantities need to be obtained.*/
   /* --------------------------------------------------------------*/

  if (FG0GW00.FG0GW-CURR-MO-MINUS1 <= FFFREC.FFFENDMO
   || FG0GW00.FG0GW-CURR-MO-MINUS4 >= FFFREC.FFFBEGMO)
    FG0G-113313(); /* get carryover qty*/
  end


end // end FG0G-11331

// obtain inline/makeup caov qty
Function FG0G-113313()
   /* ----------------------------------------------------------------*/
   /* Determine date range on carryover quantities.*/
   /* Calculate carryover quantities for the determined date range,*/
   /* from dfhist.vfhlin01 or dfhist.vfhcat01.*/
   /* ----------------------------------------------------------------*/

  FG0GW00.FG0GW-HOLD-END-MO = FFFREC.FFFENDMO;
  FG0GW00.FG0GW-HOLD-BEG-MO = FFFREC.FFFBEGMO;

  if (FG0GW00.FG0GW-CURR-MO-MINUS1 <= FFFREC.FFFENDMO
   && FG0GW00.FG0GW-CURR-MO-MINUS1 >= FFFREC.FFFBEGMO)
    FFFREC.FFFENDMO = FG0GW00.FG0GW-CURR-MO-MINUS1;
    FFFREC.FFFBEGMO = FG0GW00.FG0GW-CURR-MO-MINUS1;

    FFFREC.FFFFUNCD = "C1";
    FG0G-1133131(); /* obtain inline/makeup qtys*/
    FG0GW00.FG0GWUHS = FG0GW00.FG0GWUHS + FH3REC.FH1PAQTY;

    FFFREC.FFFENDMO = FG0GW00.FG0GW-HOLD-END-MO;
    FFFREC.FFFBEGMO = FG0GW00.FG0GW-HOLD-BEG-MO;

  end

  if (FG0GW00.FG0GW-CURR-MO-MINUS2 <= FFFREC.FFFENDMO
   && FG0GW00.FG0GW-CURR-MO-MINUS2 >= FFFREC.FFFBEGMO)
    FFFREC.FFFENDMO = FG0GW00.FG0GW-CURR-MO-MINUS2;
    FFFREC.FFFBEGMO = FG0GW00.FG0GW-CURR-MO-MINUS2;

    FFFREC.FFFFUNCD = "C2";
    FG0G-1133131(); /* obtain inline/makeup qtys*/
    FG0GW00.FG0GWUHS = FG0GW00.FG0GWUHS + FH3REC.FH1PAQTY;

    FFFREC.FFFENDMO = FG0GW00.FG0GW-HOLD-END-MO;
    FFFREC.FFFBEGMO = FG0GW00.FG0GW-HOLD-BEG-MO;
  end

  if (FG0GW00.FG0GW-CURR-MO-MINUS3 <= FFFREC.FFFENDMO
   && FG0GW00.FG0GW-CURR-MO-MINUS3 >= FFFREC.FFFBEGMO)
    FFFREC.FFFENDMO = FG0GW00.FG0GW-CURR-MO-MINUS3;
    FFFREC.FFFBEGMO = FG0GW00.FG0GW-CURR-MO-MINUS3;

    set FH4REC empty;
    FH4REC.XQACD = "01";
    FH4REC.XLCCD = "10";
    FH4REC.YSMXOT = "*";
    FH4REC.XPRCD = FG0GW00.YPGCD[FG0GWIDX];
    FG0GS02(); /* obtain inline/makeup qtys*/
    FH4REC.FH1PAQTY = mathLib.round((FH4REC.FH1PAQTY + FH4REC.FH1ALQTY) * .5, -mathLib.decimals(FH4REC.FH1PAQTY));
    FG0GW00.FG0GWUHS = FG0GW00.FG0GWUHS + FH4REC.FH1PAQTY;

    FFFREC.FFFENDMO = FG0GW00.FG0GW-HOLD-END-MO;
    FFFREC.FFFBEGMO = FG0GW00.FG0GW-HOLD-BEG-MO;

  end

  if (FG0GW00.FG0GW-CURR-MO-MINUS4 <= FFFREC.FFFENDMO
   && FG0GW00.FG0GW-CURR-MO-MINUS4 >= FFFREC.FFFBEGMO)
    FFFREC.FFFENDMO = FG0GW00.FG0GW-CURR-MO-MINUS4;
    FFFREC.FFFBEGMO = FG0GW00.FG0GW-CURR-MO-MINUS4;

    set FH4REC empty;
    FH4REC.XQACD = "01";
    FH4REC.XLCCD = "10";
    FH4REC.YSMXOT = "*";
    FH4REC.XPRCD = FG0GW00.YPGCD[FG0GWIDX];
    FG0GS02(); /* obtain inline/makeup qtys*/
    FH4REC.FH1PAQTY = mathLib.round((FH4REC.FH1PAQTY + FH4REC.FH1ALQTY) * .5, -mathLib.decimals(FH4REC.FH1PAQTY));
    FG0GW00.FG0GWUHS = FG0GW00.FG0GWUHS + FH4REC.FH1PAQTY;

    FFFREC.FFFENDMO = FG0GW00.FG0GW-HOLD-END-MO;
    FFFREC.FFFBEGMO = FG0GW00.FG0GW-HOLD-BEG-MO;
  end

end // end FG0G-113313

// get caov from dfhist.vfhcat01
Function FG0G-1133131()
   /* ------------------------------------------------------------*/
   /* Obtain carryover quantities*/
   /* ------------------------------------------------------------*/

  set FH3REC empty;

   /* division code is used here for passing line code to ff5500*/
  FH3REC.XDVCD = FFWREC.XPLCD; /* prod line code*/
  FH3REC.XPCCD = "*"; /* prod catg code*/
  FH3REC.XPRCD = FG0GW00.YPGCD[FG0GWIDX]; /* product type code*/
  FH3REC.XLCCD = "10"; /* life cycle code*/
  FH3REC.XQACD = "01"; /* quality code*/
  FH3REC.YSMXOT = "*"; /* sum code*/
  FH3REC.FH1PNAC = "*"; /* nacct fl*/
  TA1PGMNM = "1133131"; /* calling process*/

   /* --------------------------------------------------*/
   /* select sum on dfhist.vfhcat01 table*/
   /* --------------------------------------------------*/

  XSFFS-FF5500();


end // end FG0G-1133131

// Proc fcst inln/mkup sales
Function FG0G-11333()
   /* ----------------------------------------------------------*/
   /* Fetch inline/makeup sales quantities from dfcast.vmltyp01*/
   /* ----------------------------------------------------------*/

   /* ----------------------------------------------------------*/
   /* Init numeric work fields*/
   /* ----------------------------------------------------------*/

  FG0GW00.FG0GWUHS = 0;

   /* ----------------------------------------------------------*/
   /* Fetch inline/makeup sales from dfcast.vmltyp01*/
   /* ----------------------------------------------------------*/

  FG0GS01();

  if (SQLCA.VAGen_SQLCODE == 0)
    FG0GW00.FG0GWUHS = FF6REC.FF6SLFCT;
  end

   /* --------------------------------------------------------------*/
   /* Determine if carryover quantities need to be obtained.*/
   /* if so,*/
   /* fetch carryover quantities for the current month from*/
   /* dfcast.vmline01*/
   /* --------------------------------------------------------------*/

  if (FG0GW00.FG0GW-CURR-MO <= FFFREC.FFFENDMO
   && FG0GW00.FG0GW-CURR-MO >= FFFREC.FFFBEGMO)

    FG0GW00.FG0GW-HOLD-END-MO = FFFREC.FFFENDMO;
    FG0GW00.FG0GW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
    FFFREC.FFFENDMO = FG0GW00.FG0GW-CURR-MO-MINUS1;
    FFFREC.FFFBEGMO = FG0GW00.FG0GW-CURR-MO-MINUS1;

    FG0GS01(); /* select dfcast.vmltyp01*/

    if (SQLCA.VAGen_SQLCODE == 0)
      FG0GW00.FG0GWUHS = FG0GW00.FG0GWUHS - FF6REC.FF6SLFCT;
    end

    FFFREC.FFFENDMO = FG0GW00.FG0GW-HOLD-END-MO;
    FFFREC.FFFBEGMO = FG0GW00.FG0GW-HOLD-BEG-MO;
  end


end // end FG0G-11333

// Proc for demand
Function FG0G-1135()
  /* ----------------------------------------------------------------*/
  /* Determine if the date range is all forecast, all actual, or*/
  /* mixed.*/
  /* Translate demand quantities from units to thousands using*/
  /* common routine xsffs10.*/
  /* ----------------------------------------------------------------*/

  if (FG0GW01.FG0GWPED[FG0GWYIX] < FG0GW00.FG0GW-CURR-MO) /* all actl*/
    FG0G-11351(); /* get actual demand qty*/
    FFXREC.FFXNUMB = FG0GW00.FG0GWUHD;
    XSFFS10(); /* translate history demand*/
    FG0GW00.FG0GWHDQ = FFXREC.FFXCHAR;
  else

    if (FG0GW01.FG0GWPBD[FG0GWYIX] >= FG0GW00.FG0GW-CURR-MO) /* all fcst*/
      FG0G-11353(); /* get forecast demand qty*/
      FFXREC.FFXNUMB = FG0GW00.FG0GWUHD;
      XSFFS10(); /* translate history demand*/
      FG0GW00.FG0GWHDQ = FFXREC.FFXCHAR;
    else /* mixed date range*/

      FFFREC.FFFBEGMO = FG0GW01.FG0GWPBD[FG0GWYIX];
      FFFREC.FFFENDMO = FG0GW00.FG0GW-CURR-MO-MINUS1; /* actl*/
      FG0G-11351(); /* get actual demand qty*/
      FG0GW00.FG0GWSHD = FG0GW00.FG0GWUHD;

      FFFREC.FFFBEGMO = FG0GW00.FG0GW-CURR-MO; /* FCST*/
      FFFREC.FFFENDMO = FG0GW01.FG0GWPED[FG0GWYIX];
      FG0G-11353(); /* get forecast demand qty*/
      FG0GW00.FG0GWUHD = FG0GW00.FG0GWUHD + FG0GW00.FG0GWSHD;

      FFXREC.FFXNUMB = FG0GW00.FG0GWUHD;
      XSFFS10(); /* translate history demand*/
      FG0GW00.FG0GWHDQ = FFXREC.FFXCHAR;

    end
  end


end // end FG0G-1135

// Get actl inln/mkup demand qty
Function FG0G-11351()
   /* ------------------------------------------------------------*/
   /* Get actual inline/makeup demand quantities from dfhist.vfhlin01*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Init work storage quantity fields.*/
   /* ------------------------------------------------------------*/

  FG0GW00.FG0GWUHD = 0; /* init w/s historical dmnd units*/

   /* ------------------------------------------------------------*/
   /* Obtain actual inline/makeup future demand quantities*/
   /* If the date range is all before 199206,*/
   /* Fetch accumulated futures demand qty*/
   /* Else If the date range is all after 199205,*/
   /* Fetch frozen authorized futures demand qty*/
   /* Else it's a mixed date range*/
   /* Fetch accumulated futures demand qty, for all dates prior to*/
   /* 199206*/
   /* Fetch frozen authorized futures demand qty, for all dates*/
   /* after 199205*/
   /* ------------------------------------------------------------*/

  if (FFFREC.FFFENDMO < 199206) /* Whole range before 199206*/
    set FH4REC empty;
    FH4REC.XQACD = "01";
    FH4REC.XLCCD = "10";
    FH4REC.YSMXOT = "FT"; /* sum code*/
    FH4REC.XPRCD = FG0GW00.YPGCD[FG0GWIDX]; /* prod typ grp cd*/
    FG0GS02(); /* obtain inline/makeup qtys*/
    FG0GW00.FG0GWUHD = FH4REC.FH1PAQTY + FH4REC.FH1ALQTY +     FH4REC.FH2SHP + FH4REC.FH3CNCL;

  else
    if (FFFREC.FFFBEGMO >= 199206) /* Whole range beyond 199206*/
      set FH4REC empty;
      FH4REC.XQACD = "01";
      FH4REC.XLCCD = "10";
      FH4REC.YSMXOT = "FT"; /* sum code*/
      FH4REC.XPRCD = FG0GW00.YPGCD[FG0GWIDX]; /* prod typ grp cd*/
      FG0GS02(); /* obtain inline/makeup qtys*/
      FG0GW00.FG0GWUHD = FH4REC.FH-FRZ-PRAL-QTY + FH4REC.FH-FRZ-ALOC-QTY +       FH4REC.FH-FRZ-SHP-QTY + FH4REC.FH-FRZ-CNCL-QTY;

    else
      FG0GW00.FG0GW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
      FG0GW00.FG0GW-HOLD-END-MO = FFFREC.FFFENDMO;

      FFFREC.FFFENDMO = 199205;
      set FH4REC empty;
      FH4REC.XQACD = "01";
      FH4REC.XLCCD = "10";
      FH4REC.YSMXOT = "FT"; /* sum code*/
      FH4REC.XPRCD = FG0GW00.YPGCD[FG0GWIDX]; /* prod typ grp cd*/
      FG0GS02(); /* obtain inline/makeup qtys*/
      FG0GW00.FG0GWUHD = FH4REC.FH1PAQTY + FH4REC.FH1ALQTY +       FH4REC.FH2SHP + FH4REC.FH3CNCL;

      FFFREC.FFFBEGMO = 199206;
      FFFREC.FFFENDMO = FG0GW00.FG0GW-HOLD-END-MO;
      set FH4REC empty;
      FH4REC.XQACD = "01";
      FH4REC.XLCCD = "10";
      FH4REC.YSMXOT = "FT"; /* sum code*/
      FH4REC.XPRCD = FG0GW00.YPGCD[FG0GWIDX]; /* prod typ grp cd*/
      FG0GS02(); /* obtain inline/makeup qtys*/
      FG0GW00.FG0GWUHD = FG0GW00.FG0GWUHD + FH4REC.FH-FRZ-PRAL-QTY +       FH4REC.FH-FRZ-ALOC-QTY + FH4REC.FH-FRZ-SHP-QTY +       FH4REC.FH-FRZ-CNCL-QTY;

      FFFREC.FFFBEGMO = FG0GW00.FG0GW-HOLD-BEG-MO; /* Restore dt rng*/
      FFFREC.FFFENDMO = FG0GW00.FG0GW-HOLD-END-MO;
    end
  end

   /* ------------------------------------------------------------*/
   /* Obtain actual inline/makeup prop demand quantities*/
   /* ------------------------------------------------------------*/

  set FH4REC empty;
  FH4REC.XQACD = "01";
  FH4REC.XLCCD = "10";
  FH4REC.YSMXOT = "PR"; /* sum code*/
  FH4REC.XPRCD = FG0GW00.YPGCD[FG0GWIDX]; /* prod typ grp cd*/
  FG0GS02(); /* obtain inline/makeup qtys*/

  FG0GW00.FG0GWUHD = FG0GW00.FG0GWUHD + FH4REC.FH1PAQTY +   FH4REC.FH1ALQTY + FH4REC.FH2SHP + FH4REC.FH3CNCL;


end // end FG0G-11351

// Get fcst inln/mkup demand qty
Function FG0G-11353()
   /* ----------------------------------------------------------*/
   /* Init numeric work fields*/
   /* ----------------------------------------------------------*/

  FG0GW00.FG0GWUHD = 0; /* init w/s historical dmnd unit*/

   /* --------------------------------------------------------*/
   /* Calculate history dmnd  # yr prior: demand fcst(vmline)*/
   /* --------------------------------------------------------*/

  FG0GS01(); /* select/sum dfcast.vmltyp01*/

  if (SQLCA.VAGen_SQLCODE == 0)

    FG0GW00.FG0GWUHD = FG0GW00.FG0GWUHD + FF6REC.FF6DMFCT;

  end


end // end FG0G-11353

// Accum inline/makeup totals
Function FG0G-1136()
   /* ------------------------------------------------------------*/
   /* Accumulate the current master qty subtotal, forecast qty*/
   /* subtotal, historical sales qty subtotal, and historical*/
   /* demand qty subtotal.*/
   /* ------------------------------------------------------------*/

  FG0GW02.FG0GWUMQ = FG0GW01.FG0GWUMQ[FG0GWIDX] + FG0GW02.FG0GWUMQ;
  FG0GW02.FG0GWUFQ = FG0GW01.FG0GWUFQ[FG0GWIDX] + FG0GW02.FG0GWUFQ;

  FG0GW02.FG0GWUHS[1] = FG0GW01.FG0GWUH1[FG0GWIDX] +   FG0GW02.FG0GWUHS[1];
  FG0GW02.FG0GWUHS[2] = FG0GW01.FG0GWUH2[FG0GWIDX] +   FG0GW02.FG0GWUHS[2];
  FG0GW02.FG0GWUHS[3] = FG0GW01.FG0GWUH3[FG0GWIDX] +   FG0GW02.FG0GWUHS[3];

  FG0GW02.FG0GWUHD[1] = FG0GW01.FG0GWUD1[FG0GWIDX] +   FG0GW02.FG0GWUHD[1];
  FG0GW02.FG0GWUHD[2] = FG0GW01.FG0GWUD2[FG0GWIDX] +   FG0GW02.FG0GWUHD[2];
  FG0GW02.FG0GWUHD[3] = FG0GW01.FG0GWUD3[FG0GWIDX] +   FG0GW02.FG0GWUHD[3];

   /* ------------------------------------------------------------*/
   /* Accumulate the current master qty total, forecast qty total,*/
   /* historical sales qty total, and historical demand qty total.*/
   /* ------------------------------------------------------------*/

  FG0GW02.FG0GWTUM = FG0GW01.FG0GWUMQ[FG0GWIDX] + FG0GW02.FG0GWTUM;
  FG0GW02.FG0GWTUF = FG0GW01.FG0GWUFQ[FG0GWIDX] + FG0GW02.FG0GWTUF;

  FG0GW02.FG0GWTUS[1] = FG0GW01.FG0GWUH1[FG0GWIDX] +   FG0GW02.FG0GWTUS[1];
  FG0GW02.FG0GWTUS[2] = FG0GW01.FG0GWUH2[FG0GWIDX] +   FG0GW02.FG0GWTUS[2];
  FG0GW02.FG0GWTUS[3] = FG0GW01.FG0GWUH3[FG0GWIDX] +   FG0GW02.FG0GWTUS[3];

  FG0GW02.FG0GWTUD[1] = FG0GW01.FG0GWUD1[FG0GWIDX] +   FG0GW02.FG0GWTUD[1];
  FG0GW02.FG0GWTUD[2] = FG0GW01.FG0GWUD2[FG0GWIDX] +   FG0GW02.FG0GWTUD[2];
  FG0GW02.FG0GWTUD[3] = FG0GW01.FG0GWUD3[FG0GWIDX] +   FG0GW02.FG0GWTUD[3];


end // end FG0G-1136

// Proc bgrd/clsout sales
Function FG0G-1151()
   /* ------------------------------------------------------------*/
   /* Determine if the date range is all forecast, actual, or*/
   /* mixed.*/
   /* Translate demand quantities from units to thousands using*/
   /* common routine xsffs10.*/
   /* ------------------------------------------------------------*/

  if (FG0GW01.FG0GWPED[FG0GWYIX] < FG0GW00.FG0GW-CURR-MO) /* all actl dts*/
    FG0G-11511(); /* get actual sales qty*/

    FFXREC.FFXNUMB = FG0GW00.FG0GWUSB;
    XSFFS10(); /* translate history sale*/
    FG0GW00.FG0GWHSB = FFXREC.FFXCHAR;

    FFXREC.FFXNUMB = FG0GW00.FG0GWUSC;
    XSFFS10(); /* translate history sale*/
    FG0GW00.FG0GWHSC = FFXREC.FFXCHAR;
  else

    if (FG0GW01.FG0GWPBD[FG0GWYIX] >= FG0GW00.FG0GW-CURR-MO) /* all fcst dts*/
      FG0G-11513(); /* get fcst sales qty*/

      FFXREC.FFXNUMB = FG0GW00.FG0GWUSB;
      XSFFS10(); /* translate history sale*/
      FG0GW00.FG0GWHSB = FFXREC.FFXCHAR;

      FFXREC.FFXNUMB = FG0GW00.FG0GWUSC;
      XSFFS10(); /* translate history sale*/
      FG0GW00.FG0GWHSC = FFXREC.FFXCHAR;
    else /* mixed date range*/

      FFFREC.FFFBEGMO = FG0GW01.FG0GWPBD[FG0GWYIX];
      FFFREC.FFFENDMO = FG0GW00.FG0GW-CURR-MO-MINUS1; /* ACTL*/
      FG0G-11511(); /* get actual sales qty*/
      FG0GW00.FG0GWSSB = FG0GW00.FG0GWUSB; /* actual bgd subtot*/
      FG0GW00.FG0GWSSC = FG0GW00.FG0GWUSC; /* actualc/o subtot*/

      FFFREC.FFFBEGMO = FG0GW00.FG0GW-CURR-MO; /* FCST*/
      FFFREC.FFFENDMO = FG0GW01.FG0GWPED[FG0GWYIX];
      FG0G-11513(); /* get fcst sales qty*/
      FG0GW00.FG0GWUSB = FG0GW00.FG0GWSSB + FG0GW00.FG0GWUSB;
      FG0GW00.FG0GWUSC = FG0GW00.FG0GWSSC + FG0GW00.FG0GWUSC;

      FFXREC.FFXNUMB = FG0GW00.FG0GWUSB;
      XSFFS10(); /* translate history sale*/
      FG0GW00.FG0GWHSB = FFXREC.FFXCHAR;

      FFXREC.FFXNUMB = FG0GW00.FG0GWUSC;
      XSFFS10(); /* translate history sale*/
      FG0GW00.FG0GWHSC = FFXREC.FFXCHAR;

    end

  end

end // end FG0G-1151

// Fetch actl bgrd/clsout sls qty
Function FG0G-11511()
   /* ------------------------------------------------------------*/
   /* Fetch actual bgrade/closeout sales quantities from*/
   /* dfhist.vfhlin01*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Init work storage quantity fields.*/
   /* ------------------------------------------------------------*/

  FG0GW00.FG0GWUSB = 0; /* init w/s historical sale units*/
  FG0GW00.FG0GWUSC = 0; /* init w/s historical sale units*/

   /* ----------------------------------------------------------*/
   /* Accumulate close out history sales using life cycle code*/
   /* 20 and quality code 01*/
   /* ----------------------------------------------------------*/

  set FHAREC empty;

  FHAREC.XQACD = "01"; /* quality code*/
  FHAREC.XLCCD = "20"; /* life cycle code*/
  FHAREC.XPRCD = "*"; /* product type code*/

  FG0GS03();

  FG0GW00.FG0GWUSC = FHAREC.FH5MSHQT;

   /* ----------------------------------------------------------*/
   /* Accumulate b-grade history sales using life cycle code*/
   /* 10 and 20 and quality code of 02.*/
   /* ----------------------------------------------------------*/

  set FHAREC empty;

  FHAREC.XQACD = "02"; /* quality code*/
  FHAREC.XLCCD = "*"; /* life cycle code*/
  FHAREC.XPRCD = "*"; /* product type code*/

  FG0GS03();

  FG0GW00.FG0GWUSB = FHAREC.FH5MSHQT;

   /* --------------------------------------------------------------*/
   /* Determine if carryover quantities need to be obtained.*/
   /* if so*/
   /* Determine date range on carryover quantities.*/
   /* fetch carryover quantities for the determined date range,*/
   /* from dfhist.vfhlin01*/
   /* --------------------------------------------------------------*/

  if (FG0GW00.FG0GW-CURR-MO-MINUS1 <= FFFREC.FFFENDMO
   && FG0GW00.FG0GW-CURR-MO-MINUS1 >= FFFREC.FFFBEGMO)
    FG0GW00.FG0GW-HOLD-END-MO = FFFREC.FFFENDMO;
    FG0GW00.FG0GW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
    FFFREC.FFFBEGMO = FG0GW00.FG0GW-CURR-MO-MINUS1;
    FFFREC.FFFENDMO = FG0GW00.FG0GW-CURR-MO-MINUS1;

    set FH4REC empty;
    FH4REC.XQACD = "01";
    FH4REC.XLCCD = "20";
    FH4REC.YSMXOT = "*";
    FH4REC.XPRCD = "*";
    FG0GS02(); /* obtain closeout qtys*/
    FG0GW00.FG0GWUSC = FG0GW00.FG0GWUSC + FH4REC.FH1PAQTY +     FH4REC.FH1ALQTY;

    set FH4REC empty;
    FH4REC.XQACD = "02";
    FH4REC.XLCCD = "*";
    FH4REC.YSMXOT = "*";
    FH4REC.XPRCD = "*";
    FG0GS02(); /* obtain bgrade qtys*/
    FG0GW00.FG0GWUSB = FG0GW00.FG0GWUSB + FH4REC.FH1PAQTY +     FH4REC.FH1ALQTY;

    FFFREC.FFFENDMO = FG0GW00.FG0GW-HOLD-END-MO; /* restore dt rng*/
    FFFREC.FFFBEGMO = FG0GW00.FG0GW-HOLD-BEG-MO;
  end

  if (FG0GW00.FG0GW-CURR-MO-MINUS2 <= FFFREC.FFFENDMO
   && FG0GW00.FG0GW-CURR-MO-MINUS2 >= FFFREC.FFFBEGMO)
    FG0GW00.FG0GW-HOLD-END-MO = FFFREC.FFFENDMO;
    FG0GW00.FG0GW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
    FFFREC.FFFENDMO = FG0GW00.FG0GW-CURR-MO-MINUS2;
    FFFREC.FFFBEGMO = FG0GW00.FG0GW-CURR-MO-MINUS2;

    set FH4REC empty;
    FH4REC.XQACD = "01";
    FH4REC.XLCCD = "20";
    FH4REC.YSMXOT = "*";
    FH4REC.XPRCD = "*";
    FG0GS02(); /* obtain closeout qtys*/
    FG0GW00.FG0GWUSC = FG0GW00.FG0GWUSC + FH4REC.FH1PAQTY +     FH4REC.FH1ALQTY;

    set FH4REC empty;
    FH4REC.XQACD = "02";
    FH4REC.XLCCD = "*";
    FH4REC.YSMXOT = "*";
    FH4REC.XPRCD = "*";
    FG0GS02(); /* obtain bgrade qtys*/
    FG0GW00.FG0GWUSB = FG0GW00.FG0GWUSB + FH4REC.FH1PAQTY +     FH4REC.FH1ALQTY;

    FFFREC.FFFENDMO = FG0GW00.FG0GW-HOLD-END-MO; /* restore dt rng*/
    FFFREC.FFFBEGMO = FG0GW00.FG0GW-HOLD-BEG-MO;
  end

  if (FG0GW00.FG0GW-CURR-MO-MINUS3 <= FFFREC.FFFENDMO
   && FG0GW00.FG0GW-CURR-MO-MINUS3 >= FFFREC.FFFBEGMO)
    FG0GW00.FG0GW-HOLD-END-MO = FFFREC.FFFENDMO;
    FG0GW00.FG0GW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
    FFFREC.FFFENDMO = FG0GW00.FG0GW-CURR-MO-MINUS3;
    FFFREC.FFFBEGMO = FG0GW00.FG0GW-CURR-MO-MINUS3;

    set FH4REC empty;
    FH4REC.XQACD = "01";
    FH4REC.XLCCD = "20";
    FH4REC.YSMXOT = "*";
    FH4REC.XPRCD = "*";
    FG0GS02(); /* obtain closeout qtys*/
    FG0GW00.FG0GWUSC = FG0GW00.FG0GWUSC + FH4REC.FH1PAQTY +     FH4REC.FH1ALQTY;

    set FH4REC empty;
    FH4REC.XQACD = "02";
    FH4REC.XLCCD = "*";
    FH4REC.YSMXOT = "*";
    FH4REC.XPRCD = "*";
    FG0GS02(); /* obtain bgrade qtys*/
    FG0GW00.FG0GWUSB = FG0GW00.FG0GWUSB + FH4REC.FH1PAQTY +     FH4REC.FH1ALQTY;

    FFFREC.FFFENDMO = FG0GW00.FG0GW-HOLD-END-MO; /* restore dt rng*/
    FFFREC.FFFBEGMO = FG0GW00.FG0GW-HOLD-BEG-MO;
  end

  if (FG0GW00.FG0GW-CURR-MO-MINUS4 <= FFFREC.FFFENDMO
   && FG0GW00.FG0GW-CURR-MO-MINUS4 >= FFFREC.FFFBEGMO)
    FG0GW00.FG0GW-HOLD-END-MO = FFFREC.FFFENDMO;
    FG0GW00.FG0GW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
    FFFREC.FFFENDMO = FG0GW00.FG0GW-CURR-MO-MINUS4;
    FFFREC.FFFBEGMO = FG0GW00.FG0GW-CURR-MO-MINUS4;

    set FH4REC empty;
    FH4REC.XQACD = "01";
    FH4REC.XLCCD = "20";
    FH4REC.YSMXOT = "*";
    FH4REC.XPRCD = "*";
    FG0GS02(); /* obtain closeout qtys*/
    FG0GW00.FG0GWUSC = FG0GW00.FG0GWUSC + FH4REC.FH1PAQTY +     FH4REC.FH1ALQTY;

    set FH4REC empty;
    FH4REC.XQACD = "02";
    FH4REC.XLCCD = "*";
    FH4REC.YSMXOT = "*";
    FH4REC.XPRCD = "*";
    FG0GS02(); /* obtain bgrade qtys*/
    FG0GW00.FG0GWUSB = FG0GW00.FG0GWUSB + FH4REC.FH1PAQTY +     FH4REC.FH1ALQTY;

    FFFREC.FFFENDMO = FG0GW00.FG0GW-HOLD-END-MO; /* restore dt rng*/
    FFFREC.FFFBEGMO = FG0GW00.FG0GW-HOLD-BEG-MO;
  end


end // end FG0G-11511

// Proc fcst bgrd/clsout sls qty
Function FG0G-11513()
   /* ----------------------------------------------------------*/
   /* Fetch bgrd/closeout sales quantities from dfcast.vmline01*/
   /* ----------------------------------------------------------*/

   /* ----------------------------------------------------------*/
   /* Init numeric work fields*/
   /* ----------------------------------------------------------*/

  FG0GW00.FG0GWUSB = 0; /* init w/s history sale b-grade unit*/
  FG0GW00.FG0GWUSC = 0; /* init w/s history sale close out unit*/

   /* --------------------------------------------------------*/
   /* Obtain b-grade/close out historical sale qtys*/
   /* --------------------------------------------------------*/

  FG0GS07(); /* select dfcast.vmline01*/

  if (SQLCA.VAGen_SQLCODE == 0)

    FG0GW00.FG0GWUSB = FF5REC.FF5BGFCT; /* history sale b-grade*/
    FG0GW00.FG0GWUSC = FF5REC.FF5COFCT; /* history sale close out*/

  end

   /* --------------------------------------------------------------*/
   /* Determine if carryover quantities need to be obtained.*/
   /* if so,*/
   /* fetch carryover quantities for the current month from*/
   /* dfcast.vmline01*/
   /* --------------------------------------------------------------*/

  if (FG0GW00.FG0GW-CURR-MO <= FFFREC.FFFENDMO
   && FG0GW00.FG0GW-CURR-MO >= FFFREC.FFFBEGMO)

    FG0GW00.FG0GW-HOLD-END-MO = FFFREC.FFFENDMO;
    FG0GW00.FG0GW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
    FFFREC.FFFENDMO = FG0GW00.FG0GW-CURR-MO-MINUS1;
    FFFREC.FFFBEGMO = FG0GW00.FG0GW-CURR-MO-MINUS1;

    FG0GS07(); /* select dfcast.vmline01*/

    if (SQLCA.VAGen_SQLCODE == 0)

      FG0GW00.FG0GWUSB = FG0GW00.FG0GWUSB - FF5REC.FF5BGFCT;
      FG0GW00.FG0GWUSC = FG0GW00.FG0GWUSC - FF5REC.FF5COFCT;

    end

    FFFREC.FFFENDMO = FG0GW00.FG0GW-HOLD-END-MO;
    FFFREC.FFFBEGMO = FG0GW00.FG0GW-HOLD-BEG-MO;
  end


end // end FG0G-11513

// Proc bgrd/clsout demand
Function FG0G-1153()
   /* ---------------------------------------------------------------*/
   /* Determine if the date range is all forecast, all actual, or*/
   /* mixed.*/
   /* Translate demand quantities from units to thousands using*/
   /* common routine xsffx10.*/
   /* ---------------------------------------------------------------*/

  if (FG0GW01.FG0GWPED[FG0GWYIX] < FG0GW00.FG0GW-CURR-MO) /* all actl*/
    FG0G-11531(); /* get actual demand qty*/

    FFXREC.FFXNUMB = FG0GW00.FG0GWUDB;
    XSFFS10(); /* translate history demand*/
    FG0GW00.FG0GWHDB = FFXREC.FFXCHAR;

    FFXREC.FFXNUMB = FG0GW00.FG0GWUDC;
    XSFFS10(); /* translate history demand*/
    FG0GW00.FG0GWHDC = FFXREC.FFXCHAR;

  else
    if (FG0GW01.FG0GWPBD[FG0GWYIX] >= FG0GW00.FG0GW-CURR-MO) /* all fcst*/
      FG0G-11533(); /* get forecast demand qty*/

      FFXREC.FFXNUMB = FG0GW00.FG0GWUDB;
      XSFFS10(); /* translate history demand*/
      FG0GW00.FG0GWHDB = FFXREC.FFXCHAR;

      FFXREC.FFXNUMB = FG0GW00.FG0GWUDC;
      XSFFS10(); /* translate history demand*/
      FG0GW00.FG0GWHDC = FFXREC.FFXCHAR;

    else
      FFFREC.FFFBEGMO = FG0GW01.FG0GWPBD[FG0GWYIX];
      FFFREC.FFFENDMO = FG0GW00.FG0GW-CURR-MO-MINUS1;
      FG0G-11531(); /* get actual demand qty*/

      FG0GW00.FG0GWSDB = FG0GW00.FG0GWUDB; /* actual bgd subtot*/
      FG0GW00.FG0GWSDC = FG0GW00.FG0GWUDC; /* actual c/o subtot*/

      FFFREC.FFFBEGMO = FG0GW00.FG0GW-CURR-MO; /* FCST*/
      FFFREC.FFFENDMO = FG0GW01.FG0GWPED[FG0GWYIX];
      FG0G-11533(); /* get forecast demand qty*/

      FG0GW00.FG0GWUDB = FG0GW00.FG0GWSDB + FG0GW00.FG0GWUDB;
      FG0GW00.FG0GWUDC = FG0GW00.FG0GWSDC + FG0GW00.FG0GWUDC;

      FFXREC.FFXNUMB = FG0GW00.FG0GWUDB;
      XSFFS10(); /* translate history demand*/
      FG0GW00.FG0GWHDB = FFXREC.FFXCHAR;

      FFXREC.FFXNUMB = FG0GW00.FG0GWUDC;
      XSFFS10(); /* translate history demand*/
      FG0GW00.FG0GWHDC = FFXREC.FFXCHAR;

    end
  end


end // end FG0G-1153

// Proc actl bgrd/clsout demand
Function FG0G-11531()
   /* ------------------------------------------------------------*/
   /* Determine actual bgrade/closeout demand quantities from*/
   /* dfhist.vfhlin01.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Init work storage quantity fields.*/
   /* ------------------------------------------------------------*/

  FG0GW00.FG0GWUDB = 0; /* init w/s historical dmnd units*/
  FG0GW00.FG0GWUDC = 0; /* init w/s historical dmnd units*/

   /* ------------------------------------------------------------*/
   /* Obtain actual closeout demand quantities*/
   /* If the date range is all before 199206*/
   /* Fetch accumulated futures demand*/
   /* Else If the date range is all after 199205*/
   /* Fetch authorized futures demand*/
   /* Else it's a mixed date range*/
   /* Fetch accumulated futures demand, for all dates prior to*/
   /* 199206*/
   /* Fetch authorized futures demand, for all dates after 199205*/
   /* Fetch prop closeout demand quantity*/
   /* ------------------------------------------------------------*/

  if (FFFREC.FFFENDMO < 199206)
    set FH4REC empty;
    FH4REC.XQACD = "01";
    FH4REC.XLCCD = "20";
    FH4REC.YSMXOT = "FT";
    FH4REC.XPRCD = "*";
    FG0GS02();

    FG0GW00.FG0GWUDC = FH4REC.FH1PAQTY + FH4REC.FH1ALQTY +     FH4REC.FH2SHP + FH4REC.FH3CNCL;

  else
    if (FFFREC.FFFBEGMO >= 199206)
      set FH4REC empty;
      FH4REC.XQACD = "01";
      FH4REC.XLCCD = "20";
      FH4REC.YSMXOT = "FT";
      FH4REC.XPRCD = "*";
      FG0GS02();

      FG0GW00.FG0GWUDC = FH4REC.FH-FRZ-PRAL-QTY + FH4REC.FH-FRZ-ALOC-QTY       + FH4REC.FH-FRZ-SHP-QTY + FH4REC.FH-FRZ-CNCL-QTY;

    else
      FG0GW00.FG0GW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
      FG0GW00.FG0GW-HOLD-END-MO = FFFREC.FFFENDMO;

      FFFREC.FFFENDMO = 199205;
      set FH4REC empty;
      FH4REC.XQACD = "01";
      FH4REC.XLCCD = "20";
      FH4REC.YSMXOT = "FT";
      FH4REC.XPRCD = "*";
      FG0GS02();
      FG0GW00.FG0GWUDC = FH4REC.FH1PAQTY + FH4REC.FH1ALQTY +       FH4REC.FH2SHP + FH4REC.FH3CNCL;

      FFFREC.FFFBEGMO = 199206;
      FFFREC.FFFENDMO = FG0GW00.FG0GW-HOLD-END-MO;
      set FH4REC empty;
      FH4REC.XQACD = "01";
      FH4REC.XLCCD = "20";
      FH4REC.YSMXOT = "FT";
      FH4REC.XPRCD = "*";
      FG0GS02();
      FG0GW00.FG0GWUDC = FG0GW00.FG0GWUDC + FH4REC.FH-FRZ-PRAL-QTY +       FH4REC.FH-FRZ-ALOC-QTY + FH4REC.FH-FRZ-SHP-QTY +       FH4REC.FH-FRZ-CNCL-QTY;

      FFFREC.FFFBEGMO = FG0GW00.FG0GW-HOLD-BEG-MO; /* restore dates*/
      FFFREC.FFFENDMO = FG0GW00.FG0GW-HOLD-END-MO;
    end
  end

   /* ------------------------------------------------------------*/
   /* Obtain actual prop closeout demand quantities*/
   /* ------------------------------------------------------------*/

  set FH4REC empty;
  FH4REC.XQACD = "01";
  FH4REC.XLCCD = "20";
  FH4REC.YSMXOT = "PR";
  FH4REC.XPRCD = "*";
  FG0GS02();

  FG0GW00.FG0GWUDC = FG0GW00.FG0GWUDC + FH4REC.FH1PAQTY + FH4REC.FH1ALQTY   + FH4REC.FH2SHP + FH4REC.FH3CNCL;

   /* ------------------------------------------------------------*/
   /* Obtain actual bgrade demand quantities*/
   /* note: no futures exist for bgrades.*/
   /* ------------------------------------------------------------*/

  set FH4REC empty;
  FH4REC.XQACD = "02"; /* quality code*/
  FH4REC.XLCCD = "*"; /* life cycle code*/
  FH4REC.YSMXOT = "PR"; /* sum code*/
  FH4REC.XPRCD = "*"; /* product type code*/

  FG0GS02();

  FG0GW00.FG0GWUDB = FH4REC.FH1PAQTY + FH4REC.FH1ALQTY +   FH4REC.FH2SHP + FH4REC.FH3CNCL;


end // end FG0G-11531

// Proc bgrd/clsout fcst demand
Function FG0G-11533()
   /* ----------------------------------------------------------*/
   /* fetch bgrade/closeout demand quantities from dfcast.vmline01*/
   /* ----------------------------------------------------------*/

   /* ----------------------------------------------------------*/
   /* Init numeric work fields*/
   /* ----------------------------------------------------------*/

  FG0GW00.FG0GWUDB = 0; /* init w/s history dmnd b-grade unit*/
  FG0GW00.FG0GWUDC = 0; /* init w/s history dmnd close out unit*/

   /* --------------------------------------------------------*/
   /* Obtain b-grade/close out historical demand qtys*/
   /* --------------------------------------------------------*/

  FG0GS07(); /* select dfcast.vmline01*/

  if (SQLCA.VAGen_SQLCODE == 0)

    FG0GW00.FG0GWUDB = FF5REC.FF5BGFCT; /* history dmnd b-grade*/
    FG0GW00.FG0GWUDC = FF5REC.FF5COFCT; /* history dmnd close out*/

  end


end // end FG0G-11533

// Check the FROM application
Function FG0G000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "FG0F" /* From allowed application*/
   || COMMAREA.CAFROMAP == "FG0G" /* From allowed application*/
   || COMMAREA.CAFROMAP == "FG0H" /* From allowed application*/
   || COMMAREA.CAFROMAP == "FG0P") /* From allowed application*/

     /* NEXT SENTENCE*/

  else

    /* ------------------------------------------------------------*/
     /* indicate invalid transfer and return to from application*/
    /* ------------------------------------------------------------*/

    XSNOWAY();

  end


end // end FG0G000

// Inquire/maintain a table row
Function FG0G001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (FG0GW00.FG0GWSWD == "1") /* Map 1 was requested*/

    FG0G100(); /* Display map 1*/

  else

    if (FG0GW00.FG0GWSWD == "2") /* Map 2 was requested*/

      FG0G200(); /* Display map 2*/

    else

      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/

      FFWREC.XXXMODID = "001"; /* Module identification*/
      FFWREC.XXXMSGNO = 10; /* Indicate system error*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = FG0GW00.FG0GWSWD; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/

      COMMAREA.CATOAP = "FG0A"; /* TO application*/

      XSFFS01(); /* Exit to another application*/

      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/

      TA1REC.TA1FUNC = "ABND"; /* Termination function*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    end

  end


end // end FG0G001

// Inquire/maintain a table row
Function FG0G100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FG0G110(); /* Obtain the data to display*/

  FG0G120(); /* Format and display the map*/

  FG0G130(); /* Check attention identifier*/

  FG0G140(); /* Reset fields to normal intensity*/

  FG0G150(); /* Verify the entered data*/

  FG0G160(); /* Process valid input request*/

end // end FG0G100

// Obtain the data to display
Function FG0G110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FG0GW00.FG0GWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Init m001 display storage area, set map defaults, and*/
   /* load passed data*/
   /* ------------------------------------------------------------*/

  set FG0GW01 empty; /* init m001 display storage area*/
  set FG0GW02 empty; /* init m001 display storage area*/

  FG0GW01.FG0GWYOP = 1;
  FG0GW01.FG0GWHOP = "S";

  FG0GW01.FG0GWULF = FG0GW00.FG0GWSUT;
  FG0GW01.FG0GWLFT = FG0GW00.FG0GWSTG;

  FG0GW01.FG0GWCDT = VGVar.currentShortGregorianDate; /* ws created date default*/

   /* ------------------------------------------------------------*/
   /* If work sheet number has been passed*/
   /* obtain domestic forecast date range from dfcast.vwdgrp01*/
   /* and forecast line quantities for b-grade and closeout*/
   /* from dfcast.vwline01*/
   /* ------------------------------------------------------------*/

  if (FFWREC.FFEWSNBR != 0)
    FG0G111();
  end

   /* ------------------------------------------------------------*/
   /* Obtain current date using routine xx0xs01*/
   /* Obtain invoice cutoff date from dfcast.vffctl01*/
   /* Calculate:*/
   /* - current date*/
   /* - current date minus 1 month*/
   /* - current date minus 2 months*/
   /* - current date minus 3 months*/
   /* - current date minus 4 months*/
   /* - range dates for 3 years prior to the requested date range*/
   /* Load the default freeze dates.*/
   /* ------------------------------------------------------------*/

  FG0G112();

   /* ------------------------------------------------------------*/
   /* Process footwear forecast product type groups*/
   /* Note: product type group defaults (01,02) were loaded in*/
   /* init flow process*/
   /* ------------------------------------------------------------*/

  FG0G113();

   /* ------------------------------------------------------------*/
   /* indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FG0GW01.CACHGFL == "N") /* No data formatted*/

    FFWREC.XXXMODID = "110"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/

    return; /* Exit to continue processing*/

  end

   /* ------------------------------------------------------------*/
   /* Load subtotal index*/
   /* ------------------------------------------------------------*/

  FG0GW01.FG0GWSIX = FG0GW00.FG0GWIDX;

   /* ------------------------------------------------------------*/
   /* Translate the current master qty subtotal, forecast qty*/
   /* subtotal, historical sales qty subtotal, and historical*/
   /* demand qty subtotal from units to thousands*/
   /* ------------------------------------------------------------*/

  FG0G114();

   /* ------------------------------------------------------------*/
   /* Process footwear forecast b-grade/close outs*/
   /* Fetch b-grade/close outs from dfcast.vmline01*/
   /* ------------------------------------------------------------*/

  FG0G115();

   /* ------------------------------------------------------------*/
   /* Calculate b-grade and close out percents, if the total qty*/
   /* is greater than zero.*/
   /* ------------------------------------------------------------*/

  if (FG0GW02.FG0GWTUF != 0)
    FG0G116();
  end

   /* ------------------------------------------------------------*/
   /* Calculate product type group detail/subtotal percents*/
   /* ------------------------------------------------------------*/

  FG0G117();

   /* ------------------------------------------------------------*/
   /* Translate total master qty*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FG0GW02.FG0GWTUM;
  XSFFS10();
  FG0GW02.FG0GWTMQ = FFXREC.FFXCHAR;

   /* ------------------------------------------------------------*/
   /* Translate total fcst qty*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FG0GW02.FG0GWTUF;
  XSFFS10();
  FG0GW02.FG0GWTFQ = FFXREC.FFXCHAR;

   /* ------------------------------------------------------------*/
   /* Translate the b-grade/close out history sales/dmnd totals*/
   /* ------------------------------------------------------------*/

  FG0GW00.FG0GWIDX = 1;

  while (FG0GW00.FG0GWIDX <= 3)

    FFXREC.FFXNUMB = FG0GW02.FG0GWTUS[FG0GWIDX];
    XSFFS10();
    FG0GW02.FG0GWTSQ[FG0GWIDX] = FFXREC.FFXCHAR;

    FFXREC.FFXNUMB = FG0GW02.FG0GWTUD[FG0GWIDX];
    XSFFS10();
    FG0GW02.FG0GWTDQ[FG0GWIDX] = FFXREC.FFXCHAR;

    FG0GW00.FG0GWIDX = FG0GW00.FG0GWIDX + 1;

  end

   /* ------------------------------------------------------------*/
   /* Calculate variance qty : total forecast qty - target qty*/
   /* ------------------------------------------------------------*/

  FG0GW01.FG0GWUVQ = FG0GW02.FG0GWTUF - FG0GW01.FG0GWULF;

  FFXREC.FFXNUMB = FG0GW01.FG0GWUVQ;
  XSFFS10();
  FG0GW01.FG0GWVQT = FFXREC.FFXCHAR;

   /* ------------------------------------------------------------*/
   /* Caluculate variance percent :*/
   /* (variance qty * 100) / target qty*/
   /* ------------------------------------------------------------*/

  if (FG0GW01.FG0GWULF != 0)
    FG0GW00.FG0GWNM1 = FG0GW01.FG0GWUVQ * 100;
    FG0GW01.FG0GWVPT = mathLib.round(FG0GW00.FG0GWNM1 / FG0GW01.FG0GWULF, -mathLib.decimals(FG0GW01.FG0GWVPT));
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FG0GW00.FG0GWSWR = "N"; /* Request for data switch*/

end // end FG0G110

// Obtain forecast qty
Function FG0G111()
   /* ------------------------------------------------------------*/
   /* Obtain domestic forecast date range from dfcast.vwdgrp01 and*/
   /* forecast line quantities for b-grade and closeoutfrom*/
   /* dfcast.vwline01*/
   /* ------------------------------------------------------------*/

  FG0G-1111(); /* Select dfcast.vwdgrp01 row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    FFWREC.YSMXDV = "10"; /* load sum xdvcd*/
    FFWREC.FFABEGMO = FFEREC.FFABEGMO; /* load begin range*/
    FFWREC.FFAENDMO = FFEREC.FFAENDMO; /* load end range*/
  end

  FG0G-1112(); /* Select dfcast.vwline01 row*/

  if (SQLCA.VAGen_SQLCODE == 0)

    FG0GW01.FG0GWULF = FFGREC.FFEFCTGT; /* line fcst target unit*/
    FG0GW01.FG0GWSUL = FFGREC.FFEFCTGT; /* save fcst target unit*/
    FFXREC.FFXNUMB = FFGREC.FFEFCTGT; /* TRANSLATE*/
    XSFFS10();
    FG0GW01.FG0GWLFT = FFXREC.FFXCHAR; /* line fcst target 100*/

    FG0GW01.FG0GWUFB = FFGREC.FF5BGFCT; /* b-grade fcst unit*/
    FG0GW01.FG0GWUFC = FFGREC.FF5COFCT; /* closeout fcst unit*/

       /* accumulate unit fcst total*/

    FG0GW02.FG0GWTUF = FG0GW01.FG0GWUFB + FG0GW01.FG0GWUFC;

  end

end // end FG0G111

// Obtain program dates
Function FG0G112()
   /* ------------------------------------------------------------*/
   /* Obtain current date using routine xx0xs01.*/
   /* Obtain Invoice cutoff date from dfcast.vffctl01.*/
   /* Calculate:*/
   /* - current date*/
   /* - current date minus 1 month*/
   /* - current date minus 2 months*/
   /* - current date minus 3 months*/
   /* - current date minus 4 months*/
   /* - range dates for 3 years prior to the requested date range*/
   /* three years prior to the requested range date.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Obtain current date using routine xx0xs01.*/
   /* ------------------------------------------------------------*/

  XX0XS01();

  FG0GW00.FG0GWCWD = XX0XW01.XX0XWDAT; /* cur work dt ccyymmdd*/
  FG0GW00.FG0GW-CURR-MO = XX0XW01.XX0XWCYM; /* current date ccyymm*/

   /* ------------------------------------------------------------*/
   /* Obtain invoice date from dfcast.vffctl01.  Used when gathering*/
   /* historical sales/demand information.*/
   /* ------------------------------------------------------------*/

  FG0G-1121();

   /* ------------------------------------------------------------*/
   /* Calculate:*/
   /* - current date*/
   /* - current date minus 1 month*/
   /* - current date minus 2 months*/
   /* - current date minus 3 months*/
   /* - current date minus 4 months*/
   /* - range dates for 3 years prior to the requested date range*/
   /* three years prior to the requested range date.*/
   /* ------------------------------------------------------------*/

  FG0G-1122();

   /* ------------------------------------------------------------*/
   /* Calculate prior date ranges*/
   /* ------------------------------------------------------------*/

  FG0GW00.FG0GWWBD = FFWREC.FFABEGMO;
  FG0GW00.FG0GWWED = FFWREC.FFAENDMO;

  FG0GW00.FG0GWIDX = 1; /* init index*/
  while (FG0GW00.FG0GWIDX <= 3) /* calculate 3 date ranges*/

    if (FG0GW00.FG0GWBYY == 00)
      FG0GW00.FG0GWBYY = 99;
      FG0GW00.FG0GWBCC = FG0GW00.FG0GWBCC - 1;
    else
      FG0GW00.FG0GWBYY = FG0GW00.FG0GWBYY - 1;
    end
    FG0GW01.FG0GWPBD[FG0GWIDX] = FG0GW00.FG0GWWBD; /* prior beg date*/

    if (FG0GW00.FG0GWEYY == 00)
      FG0GW00.FG0GWEYY = 99;
      FG0GW00.FG0GWECC = FG0GW00.FG0GWECC - 1;
    else
      FG0GW00.FG0GWEYY = FG0GW00.FG0GWEYY - 1;
    end
    FG0GW01.FG0GWPED[FG0GWIDX] = FG0GW00.FG0GWWED; /* prior end date*/

    FG0GW00.FG0GWIDX = FG0GW00.FG0GWIDX + 1;

  end

   /* ------------------------------------------------------------*/
   /* Set default ffzrec dates*/
   /* ------------------------------------------------------------*/

  FFZREC.FFZBEGMO = FFWREC.FFABEGMO;
  FFZREC.FFZENDMO = FFWREC.FFAENDMO;

end // end FG0G112

// Process inline/makeup
Function FG0G113()
   /* ------------------------------------------------------------*/
   /* Process footwear forecast product type groups*/
   /* Note: product type group defaults (01,02) were loaded in*/
   /* init flow process*/
   /* ------------------------------------------------------------*/

  FG0GW00.FG0GWIDX = 1; /* init index*/
  FG0GW00.FG0GWTFL = "N"; /* init dfcast.vwltyp01 data flag*/
  FG0GW01.CACHGFL = "N"; /* change flag*/

  while (FG0GW00.FG0GWIDX <= 2) /* process product type groups*/

    if (FG0GW00.YPGCD[FG0GWIDX] in YPGTBL.YPGCD
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A"
     && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y")

      FG0GW01.FG0GWNLD = FG0GW01.FG0GWNLD + 1; /* nbr of line loaded*/
      FG0GW01.CACHGFL = "Y"; /* data found for modification*/

      FG0GW01.YPGCD[FG0GWIDX] = YPGTBL.YPGCD[sysVar.arrayIndex];
      FG0GW01.YPGABRV[FG0GWIDX] = YPGTBL.YPGABRV[sysVar.arrayIndex];

      FFFREC.FFFBEGMO = FFWREC.FFABEGMO; /* current date*/
      FFFREC.FFFENDMO = FFWREC.FFAENDMO;

      FG0GS01(); /* select/sum dfcast.vmltyp01*/

      if (SQLCA.VAGen_SQLCODE == 0)

        FG0GW01.FG0GWUMQ[FG0GWIDX] = FF6REC.FF6SLFCT;

      end

      /* ------------------------------------------------------------*/
      /* translate current sales master qty into thousands*/
      /* ------------------------------------------------------------*/

      FFXREC.FFXNUMB = FG0GW01.FG0GWUMQ[FG0GWIDX];
      XSFFS10();
      FG0GW01.FG0GWMQT[FG0GWIDX] = FFXREC.FFXCHAR;

      /* ------------------------------------------------------------*/
      /* If the work sheet number was passed in*/
      /* obtain the forecast quantities from dfcast.vwltyp01*/
      /* if no record was found*/
      /* default the forecast quantity to zero*/
      /* Also, if dfcast.vwltyp01 record exist, set first time*/
      /* thru flag to 'n' in order to ignore the default value*/
      /* for b-grade and closeout.*/
      /* ------------------------------------------------------------*/

      if (FFWREC.FFEWSNBR != 0)
        FG0G-1131(); /* select dfcast.vwltyp01*/

        if (SQLCA.VAGen_SQLCODE == 0)
          if (FG0GW00.FG0GWIDX == 1) /* first time thru processing*/
            FG0GW01.FG0GWCDT = FFIREC.ZZZSDT; /* w/s date*/
            FG0GW00.FG0GW1ST = "N";
          end
          FG0GW01.FG0GWUFQ[FG0GWIDX] = FFIREC.FF6SLFCT;
          FG0GW01.FG0GWSQT[FG0GWIDX] = FFIREC.FF6SLFCT;
          FFXREC.FFXNUMB = FG0GW01.FG0GWUFQ[FG0GWIDX];
          XSFFS10();
          FG0GW01.FG0GWFQT[FG0GWIDX] = FFXREC.FFXCHAR;
          FG0GW00.FG0GWTFL = "Y"; /* vwltyp01 data found*/
          FG0GW01.FG0GWWKE[FG0GWIDX] = "Y"; /* Set wksht exist flag*/
        end
      end

      /* ------------------------------------------------------------*/
      /* Obtain historical sales and demand qtys for range one year*/
      /* prior to requested range*/
      /* ------------------------------------------------------------*/

      FFFREC.FFFBEGMO = FG0GW01.FG0GWPBD[1]; /* current date*/
      FFFREC.FFFENDMO = FG0GW01.FG0GWPED[1];
      FG0GW00.FG0GWYIX = 1; /* Indicate 1 year ago*/
      FG0G-1133(); /* get sales qty*/

      FFFREC.FFFBEGMO = FG0GW01.FG0GWPBD[1]; /* current date*/
      FFFREC.FFFENDMO = FG0GW01.FG0GWPED[1];
      FG0G-1135(); /* get demand qty*/

      FG0GW01.FG0GWUH1[FG0GWIDX] = FG0GW00.FG0GWUHS;
      FG0GW01.FG0GWHQ1[FG0GWIDX] = FG0GW00.FG0GWHSQ;

      FG0GW01.FG0GWUD1[FG0GWIDX] = FG0GW00.FG0GWUHD;
      FG0GW01.FG0GWDQ1[FG0GWIDX] = FG0GW00.FG0GWHDQ;

      /* ------------------------------------------------------------*/
       /* obtain historical sale and demand qtys for range two years*/
       /* prior to requested range*/
      /* ------------------------------------------------------------*/

      FFFREC.FFFBEGMO = FG0GW01.FG0GWPBD[2]; /* current date*/
      FFFREC.FFFENDMO = FG0GW01.FG0GWPED[2];
      FG0GW00.FG0GWYIX = 2; /* Indicate 2 years ago*/
      FG0G-1133(); /* get sales qty*/

      FFFREC.FFFBEGMO = FG0GW01.FG0GWPBD[2]; /* current date*/
      FFFREC.FFFENDMO = FG0GW01.FG0GWPED[2];
      FG0G-1135(); /* get demand qty*/

      FG0GW01.FG0GWUH2[FG0GWIDX] = FG0GW00.FG0GWUHS;
      FG0GW01.FG0GWHQ2[FG0GWIDX] = FG0GW00.FG0GWHSQ;

      FG0GW01.FG0GWUD2[FG0GWIDX] = FG0GW00.FG0GWUHD;
      FG0GW01.FG0GWDQ2[FG0GWIDX] = FG0GW00.FG0GWHDQ;

      /* ------------------------------------------------------------*/
       /* obtain historical sale and demand qtys for range three*/
       /* years prior to requested range*/
      /* ------------------------------------------------------------*/

      FFFREC.FFFBEGMO = FG0GW01.FG0GWPBD[3]; /* current date*/
      FFFREC.FFFENDMO = FG0GW01.FG0GWPED[3];
      FG0GW00.FG0GWYIX = 3; /* Indicate 3 years ago*/
      FG0G-1133(); /* get sales qty*/

      FFFREC.FFFBEGMO = FG0GW01.FG0GWPBD[3]; /* current date*/
      FFFREC.FFFENDMO = FG0GW01.FG0GWPED[3];
      FG0G-1135(); /* get demand qty*/

      FG0GW01.FG0GWUH3[FG0GWIDX] = FG0GW00.FG0GWUHS;
      FG0GW01.FG0GWHQ3[FG0GWIDX] = FG0GW00.FG0GWHSQ;

      FG0GW01.FG0GWUD3[FG0GWIDX] = FG0GW00.FG0GWUHD;
      FG0GW01.FG0GWDQ3[FG0GWIDX] = FG0GW00.FG0GWHDQ;

      /* ------------------------------------------------------------*/
      /* Accumulate the current master qty subtotal, forecast qty*/
      /* subtotal, historical sales qty subtotal, and historical*/
      /* demand qty subtotal.*/
      /* ------------------------------------------------------------*/

      FG0G-1136();


    end

    FG0GW00.FG0GWIDX = FG0GW00.FG0GWIDX + 1;

  end


end // end FG0G113

// Trans totals to thousand
Function FG0G114()
   /* ------------------------------------------------------------*/
   /* Translate the current master qty subtotal, forecast qty*/
   /* subtotal, historical sales qty subtotal, and historical*/
   /* demand qty subtotal from units to thousands*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FG0GW02.FG0GWUMQ;
  XSFFS10();
  FG0GW02.FG0GWMQT = FFXREC.FFXCHAR;

  if (FG0GW00.FG0GWTFL == "Y") /* if work sheet data found display*/
                                   /* total*/
    FFXREC.FFXNUMB = FG0GW02.FG0GWUFQ;
    XSFFS10();
    FG0GW02.FG0GWFQT = FFXREC.FFXCHAR;
  end

  FG0GW00.FG0GWIDX = 1;
  while (FG0GW00.FG0GWIDX <= 3)
    FFXREC.FFXNUMB = FG0GW02.FG0GWUHS[FG0GWIDX];
    XSFFS10();
    FG0GW02.FG0GWHSQ[FG0GWIDX] = FFXREC.FFXCHAR;
    FG0GW00.FG0GWIDX = FG0GW00.FG0GWIDX + 1;
  end

  FG0GW00.FG0GWIDX = 1;
  while (FG0GW00.FG0GWIDX <= 3)
    FFXREC.FFXNUMB = FG0GW02.FG0GWUHD[FG0GWIDX];
    XSFFS10();
    FG0GW02.FG0GWHDQ[FG0GWIDX] = FFXREC.FFXCHAR;
    FG0GW00.FG0GWIDX = FG0GW00.FG0GWIDX + 1;
  end

end // end FG0G114

// Proc bgrd/clsout
Function FG0G115()
   /* ------------------------------------------------------------*/
   /* Process footwear forecast b-grade/close outs*/
   /* Fetch b-grade/close outs from dfcast.vmline01*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFBEGMO = FFWREC.FFABEGMO; /* requested begin range*/
  FFFREC.FFFENDMO = FFWREC.FFAENDMO; /* requested end range*/

  FG0GS07(); /* select/sum dfcast.vmline01*/

  if (SQLCA.VAGen_SQLCODE == 0)

    FG0GW01.FG0GWUMB = FF5REC.FF5BGFCT; /* mstr b-grade qty unit*/
    FFXREC.FFXNUMB = FF5REC.FF5BGFCT; /* translate*/
    XSFFS10();
    FG0GW01.FG0GWMBQ = FFXREC.FFXCHAR; /* mstr b-grade qty 1000*/

    FG0GW01.FG0GWUMC = FF5REC.FF5COFCT; /* mstr closeout qty unit*/
    FFXREC.FFXNUMB = FF5REC.FF5COFCT; /* translate*/
    XSFFS10();
    FG0GW01.FG0GWMCQ = FFXREC.FFXCHAR; /* mstr closeout qty 1000*/

     /* accumulate total master qty*/

    FG0GW02.FG0GWTUM = FG0GW02.FG0GWTUM + FG0GW01.FG0GWUMB;
    FG0GW02.FG0GWTUM = FG0GW02.FG0GWTUM + FG0GW01.FG0GWUMC;

  end

   /* ------------------------------------------------------------*/
   /* Obtain b-grade/close out historical sales/ demand qtys*/
   /* ------------------------------------------------------------*/

  FG0GW00.FG0GWIDX = 1; /* init index*/

  while (FG0GW00.FG0GWIDX <= 3) /* obtain 3 yrs of history/demand*/

    FFFREC.FFFBEGMO = FG0GW01.FG0GWPBD[FG0GWIDX]; /* current date*/
    FFFREC.FFFENDMO = FG0GW01.FG0GWPED[FG0GWIDX];
    FG0GW00.FG0GWYIX = FG0GW00.FG0GWIDX;

    FG0G-1151(); /* get historical sales qty*/

    FG0G-1153(); /* get historical demand qty*/

    /* --------------------------------------------------------*/
     /* load b-grade and close out history sale/dmnd qtys*/
    /* --------------------------------------------------------*/

    FG0GW01.FG0GWUSB[FG0GWIDX] = FG0GW00.FG0GWUSB;
    FG0GW01.FG0GWHSB[FG0GWIDX] = FG0GW00.FG0GWHSB;
    FG0GW01.FG0GWUDB[FG0GWIDX] = FG0GW00.FG0GWUDB;
    FG0GW01.FG0GWHDB[FG0GWIDX] = FG0GW00.FG0GWHDB;

    FG0GW01.FG0GWUSC[FG0GWIDX] = FG0GW00.FG0GWUSC;
    FG0GW01.FG0GWHSC[FG0GWIDX] = FG0GW00.FG0GWHSC;
    FG0GW01.FG0GWUDC[FG0GWIDX] = FG0GW00.FG0GWUDC;
    FG0GW01.FG0GWHDC[FG0GWIDX] = FG0GW00.FG0GWHDC;

    /* --------------------------------------------------------*/
     /* accumulate b-grade/close out history sale/dmnd totals*/
    /* --------------------------------------------------------*/

    FG0GW00.FG0GWNM1 = FG0GW02.FG0GWTUS[FG0GWIDX];
    FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUSB[FG0GWIDX];
    FG0GW02.FG0GWTUS[FG0GWIDX] = FG0GW00.FG0GWNM1 + FG0GW00.FG0GWNM2;

    FG0GW00.FG0GWNM1 = FG0GW02.FG0GWTUD[FG0GWIDX];
    FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUDB[FG0GWIDX];
    FG0GW02.FG0GWTUD[FG0GWIDX] = FG0GW00.FG0GWNM1 + FG0GW00.FG0GWNM2;

    FG0GW00.FG0GWNM1 = FG0GW02.FG0GWTUS[FG0GWIDX];
    FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUSC[FG0GWIDX];
    FG0GW02.FG0GWTUS[FG0GWIDX] = FG0GW00.FG0GWNM1 + FG0GW00.FG0GWNM2;

    FG0GW00.FG0GWNM1 = FG0GW02.FG0GWTUD[FG0GWIDX];
    FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUDC[FG0GWIDX];
    FG0GW02.FG0GWTUD[FG0GWIDX] = FG0GW00.FG0GWNM1 + FG0GW00.FG0GWNM2;

    FG0GW00.FG0GWIDX = FG0GW00.FG0GWIDX + 1;

  end

end // end FG0G115

// Calc bgrd/clsout percents
Function FG0G116()
   /* ------------------------------------------------------------*/
   /* Calculate b-grade and closeout percent*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If forecast quantity subtotal is greater than zero*/
   /* calculate b-grade percents*/
   /* ------------------------------------------------------------*/

  if (FG0GW01.FG0GWUFB != 0)
    FG0GW00.FG0GWNM1 = FG0GW01.FG0GWUFB * 100;
    FG0GW01.FG0GWFBP = mathLib.round(FG0GW00.FG0GWNM1 / FG0GW02.FG0GWTUF, -mathLib.decimals(FG0GW01.FG0GWFBP));
    FG0GW02.FG0GWTFP = FG0GW02.FG0GWTFP + FG0GW01.FG0GWFBP;
  else
    if (FG0GW01.FG0GWFBP == 0)
      if (FG0GW00.FG0GW1ST == "Y")
        FG0GW01.FG0GWFBP = 1.5;
      else
        FG0GW01.FG0GWFBP = 0.0;
      end
      FG0GW02.FG0GWTFP = FG0GW02.FG0GWTFP + FG0GW01.FG0GWFBP;
      FG0GW00.FG0GWNM1 = FG0GW01.FG0GWFBP * FG0GW01.FG0GWULF; /* frm trgt*/
      FG0GW01.FG0GWUFB = FG0GW00.FG0GWNM1 / 100;
      FG0GW02.FG0GWTUF = FG0GW02.FG0GWTUF + FG0GW01.FG0GWUFB;
    else
      FG0GW02.FG0GWTFP = FG0GW02.FG0GWTFP + FG0GW01.FG0GWFBP;
      FG0GW00.FG0GWNM1 = FG0GW01.FG0GWFBP * FG0GW02.FG0GWTUF; /* frm tot*/
      FG0GW01.FG0GWUFB = FG0GW00.FG0GWNM1 / 100;
      FG0GW02.FG0GWTUF = FG0GW02.FG0GWTUF + FG0GW01.FG0GWUFB;
    end
  end

   /* ------------------------------------------------------------*/
   /* If forecast quantity subtotal is greater than zero*/
   /* calculate close out percents*/
   /* ------------------------------------------------------------*/

  if (FG0GW01.FG0GWUFC != 0)
    FG0GW00.FG0GWNM1 = FG0GW01.FG0GWUFC * 100;
    FG0GW01.FG0GWFCP = mathLib.round(FG0GW00.FG0GWNM1 / FG0GW02.FG0GWTUF, -mathLib.decimals(FG0GW01.FG0GWFCP));
    FG0GW02.FG0GWTFP = FG0GW02.FG0GWTFP + FG0GW01.FG0GWFCP;
  else
    if (FG0GW01.FG0GWFCP == 0)
      if (FG0GW00.FG0GW1ST == "Y")
        FG0GW01.FG0GWFCP = 2.5;
        FG0GW00.FG0GW1ST = "N";
      else
        FG0GW01.FG0GWFCP = 0.0;
      end
      FG0GW02.FG0GWTFP = FG0GW02.FG0GWTFP + FG0GW01.FG0GWFCP;
      FG0GW00.FG0GWNM1 = FG0GW01.FG0GWFCP * FG0GW01.FG0GWULF; /* frm trgt*/
      FG0GW01.FG0GWUFC = FG0GW00.FG0GWNM1 / 100;
      FG0GW02.FG0GWTUF = FG0GW02.FG0GWTUF + FG0GW01.FG0GWUFC;
    else
      FG0GW02.FG0GWTFP = FG0GW02.FG0GWTFP + FG0GW01.FG0GWFCP;
      FG0GW00.FG0GWNM1 = FG0GW01.FG0GWFCP * FG0GW02.FG0GWTUF; /* frm tot*/
      FG0GW01.FG0GWUFC = FG0GW00.FG0GWNM1 / 100;
      FG0GW02.FG0GWTUF = FG0GW02.FG0GWTUF + FG0GW01.FG0GWUFC;
    end
  end

end // end FG0G116

// calc detl and totl percents
Function FG0G117()
   /* ------------------------------------------------------------*/
   /* Calculate product type group detail/subtotal percents*/
   /* ------------------------------------------------------------*/

  FG0GW00.FG0GWIDX = FG0GW01.FG0GWNLD;
  while (FG0GW00.FG0GWIDX >= 1)

    /* ------------------------------------------------------------*/
    /* Calculate current sales prd type grp percent:*/
    /* ------------------------------------------------------------*/

    if (FG0GW02.FG0GWTUF != 0)
      FG0GW00.FG0GWNM1 = FG0GW01.FG0GWUFQ[FG0GWIDX] * 100;
      FG0GW01.FG0GWFPT[FG0GWIDX] = mathLib.round(FG0GW00.FG0GWNM1 / FG0GW02.FG0GWTUF, -mathLib.decimals(FG0GW01.FG0GWFPT[FG0GWIDX]));
      FG0GW01.FG0GWSPT[FG0GWIDX] = mathLib.round(FG0GW00.FG0GWNM1 / FG0GW02.FG0GWTUF, -mathLib.decimals(FG0GW01.FG0GWSPT[FG0GWIDX]));
    end

    /* ------------------------------------------------------------*/
    /* Calculate historical sales percent one year prior:*/
    /* ------------------------------------------------------------*/

    if (FG0GW02.FG0GWTUS[1] != 0)
      FG0GW00.FG0GWNM1 = FG0GW01.FG0GWUH1[FG0GWIDX] * 100;
      FG0GW00.FG0GWNM2 = FG0GW02.FG0GWTUS[1];
      FG0GW01.FG0GWHP1[FG0GWIDX] = mathLib.round(FG0GW00.FG0GWNM1 / FG0GW00.FG0GWNM2, -mathLib.decimals(FG0GW01.FG0GWHP1[FG0GWIDX]));
    end

    /* ------------------------------------------------------------*/
    /* Calculate historical sales percent two years prior:*/
    /* ------------------------------------------------------------*/

    if (FG0GW02.FG0GWTUS[2] != 0)
      FG0GW00.FG0GWNM1 = FG0GW01.FG0GWUH2[FG0GWIDX] * 100;
      FG0GW00.FG0GWNM2 = FG0GW02.FG0GWTUS[2];
      FG0GW01.FG0GWHP2[FG0GWIDX] = mathLib.round(FG0GW00.FG0GWNM1 / FG0GW00.FG0GWNM2, -mathLib.decimals(FG0GW01.FG0GWHP2[FG0GWIDX]));
    end

    /* ------------------------------------------------------------*/
    /* Calculate historical sales percent three years prior:*/
    /* ------------------------------------------------------------*/

    if (FG0GW02.FG0GWTUS[3] != 0)
      FG0GW00.FG0GWNM1 = FG0GW01.FG0GWUH3[FG0GWIDX] * 100;
      FG0GW00.FG0GWNM2 = FG0GW02.FG0GWTUS[3];
      FG0GW01.FG0GWHP3[FG0GWIDX] = mathLib.round(FG0GW00.FG0GWNM1 / FG0GW00.FG0GWNM2, -mathLib.decimals(FG0GW01.FG0GWHP3[FG0GWIDX]));
    end

    /* ------------------------------------------------------------*/
    /* Calculate historical demand percent one year prior:*/
    /* ------------------------------------------------------------*/

    if (FG0GW02.FG0GWTUD[1] != 0)
      FG0GW00.FG0GWNM1 = FG0GW01.FG0GWUD1[FG0GWIDX] * 100;
      FG0GW00.FG0GWNM2 = FG0GW02.FG0GWTUD[1];
      FG0GW01.FG0GWDP1[FG0GWIDX] = mathLib.round(FG0GW00.FG0GWNM1 / FG0GW00.FG0GWNM2, -mathLib.decimals(FG0GW01.FG0GWDP1[FG0GWIDX]));
    end

    /* ------------------------------------------------------------*/
    /* Calculate historical demand percent two years prior:*/
    /* ------------------------------------------------------------*/

    if (FG0GW02.FG0GWTUD[2] != 0)
      FG0GW00.FG0GWNM1 = FG0GW01.FG0GWUD2[FG0GWIDX] * 100;
      FG0GW00.FG0GWNM2 = FG0GW02.FG0GWTUD[2];
      FG0GW01.FG0GWDP2[FG0GWIDX] = mathLib.round(FG0GW00.FG0GWNM1 / FG0GW00.FG0GWNM2, -mathLib.decimals(FG0GW01.FG0GWDP2[FG0GWIDX]));
    end

    /* ------------------------------------------------------------*/
    /* Calculate historical demand percent three years prior:*/
    /* ------------------------------------------------------------*/

    if (FG0GW02.FG0GWTUD[3] != 0)
      FG0GW00.FG0GWNM1 = FG0GW01.FG0GWUD3[FG0GWIDX] * 100;
      FG0GW00.FG0GWNM2 = FG0GW02.FG0GWTUD[3];
      FG0GW01.FG0GWDP3[FG0GWIDX] = mathLib.round(FG0GW00.FG0GWNM1 / FG0GW00.FG0GWNM2, -mathLib.decimals(FG0GW01.FG0GWDP3[FG0GWIDX]));
    end

    /* ------------------------------------------------------------*/
    /* Accumulate current sales percent, historical sales percent,*/
    /* and historical demand percent subtotals*/
    /* ------------------------------------------------------------*/

    FG0GW02.FG0GWFPT = FG0GW01.FG0GWFPT[FG0GWIDX] + FG0GW02.FG0GWFPT;
    FG0GW02.FG0GWHSP[1] = FG0GW01.FG0GWHP1[FG0GWIDX] + FG0GW02.FG0GWHSP[1];
    FG0GW02.FG0GWHSP[2] = FG0GW01.FG0GWHP2[FG0GWIDX] + FG0GW02.FG0GWHSP[2];
    FG0GW02.FG0GWHSP[3] = FG0GW01.FG0GWHP3[FG0GWIDX] + FG0GW02.FG0GWHSP[3];
    FG0GW02.FG0GWHDP[1] = FG0GW01.FG0GWDP1[FG0GWIDX] + FG0GW02.FG0GWHDP[1];
    FG0GW02.FG0GWHDP[2] = FG0GW01.FG0GWDP2[FG0GWIDX] + FG0GW02.FG0GWHDP[2];
    FG0GW02.FG0GWHDP[3] = FG0GW01.FG0GWDP3[FG0GWIDX] + FG0GW02.FG0GWHDP[3];

    /* ------------------------------------------------------------*/
    /* Accumulate current sales percent, historical sales percent,*/
    /* and historical demand percent totals*/
    /* ------------------------------------------------------------*/

    FG0GW02.FG0GWTFP = FG0GW01.FG0GWFPT[FG0GWIDX] + FG0GW02.FG0GWTFP;
    FG0GW02.FG0GWTSP[1] = FG0GW01.FG0GWHP1[FG0GWIDX] + FG0GW02.FG0GWTSP[1];
    FG0GW02.FG0GWTSP[2] = FG0GW01.FG0GWHP2[FG0GWIDX] + FG0GW02.FG0GWTSP[2];
    FG0GW02.FG0GWTSP[3] = FG0GW01.FG0GWHP3[FG0GWIDX] + FG0GW02.FG0GWTSP[3];
    FG0GW02.FG0GWTDP[1] = FG0GW01.FG0GWDP1[FG0GWIDX] + FG0GW02.FG0GWTDP[1];
    FG0GW02.FG0GWTDP[2] = FG0GW01.FG0GWDP2[FG0GWIDX] + FG0GW02.FG0GWTDP[2];
    FG0GW02.FG0GWTDP[3] = FG0GW01.FG0GWDP3[FG0GWIDX] + FG0GW02.FG0GWTDP[3];

    FG0GW00.FG0GWIDX = FG0GW00.FG0GWIDX - 1;

  end

   /* ------------------------------------------------------------*/
   /* Calculate b-grade/close out history percents*/
   /* ------------------------------------------------------------*/

  FG0GW00.FG0GWIDX = 1;
  while (FG0GW00.FG0GWIDX <= 3)

    /* ------------------------------------------------------------*/
    /* Calculate history sale b-grade percent year #*/
    /* ------------------------------------------------------------*/

    if (FG0GW02.FG0GWTUS[FG0GWIDX] != 0)
      FG0GW00.FG0GWNM1 = FG0GW01.FG0GWUSB[FG0GWIDX] * 100;
      FG0GW00.FG0GWNM2 = FG0GW02.FG0GWTUS[FG0GWIDX];
      FG0GW01.FG0GWSBP[FG0GWIDX] = mathLib.round(FG0GW00.FG0GWNM1 / FG0GW00.FG0GWNM2, -mathLib.decimals(FG0GW01.FG0GWSBP[FG0GWIDX]));
    end

    /* ------------------------------------------------------------*/
    /* Calculate history sale close out percent year #*/
    /* ------------------------------------------------------------*/

    if (FG0GW02.FG0GWTUS[FG0GWIDX] != 0)
      FG0GW00.FG0GWNM1 = FG0GW01.FG0GWUSC[FG0GWIDX] * 100;
      FG0GW00.FG0GWNM2 = FG0GW02.FG0GWTUS[FG0GWIDX];
      FG0GW01.FG0GWSCP[FG0GWIDX] = mathLib.round(FG0GW00.FG0GWNM1 / FG0GW00.FG0GWNM2, -mathLib.decimals(FG0GW01.FG0GWSCP[FG0GWIDX]));
    end

    /* ------------------------------------------------------------*/
    /* Calculate history demand b-grade percent year #*/
    /* ------------------------------------------------------------*/

    if (FG0GW02.FG0GWTUD[FG0GWIDX] != 0)
      FG0GW00.FG0GWNM1 = FG0GW01.FG0GWUDB[FG0GWIDX] * 100;
      FG0GW00.FG0GWNM2 = FG0GW02.FG0GWTUD[FG0GWIDX];
      FG0GW01.FG0GWDBP[FG0GWIDX] = mathLib.round(FG0GW00.FG0GWNM1 / FG0GW00.FG0GWNM2, -mathLib.decimals(FG0GW01.FG0GWDBP[FG0GWIDX]));
    end

    /* ------------------------------------------------------------*/
    /* Calculate history demand close out percent year #*/
    /* ------------------------------------------------------------*/

    if (FG0GW02.FG0GWTUD[FG0GWIDX] != 0)
      FG0GW00.FG0GWNM1 = FG0GW01.FG0GWUDC[FG0GWIDX] * 100;
      FG0GW00.FG0GWNM2 = FG0GW02.FG0GWTUD[FG0GWIDX];
      FG0GW01.FG0GWDCP[FG0GWIDX] = mathLib.round(FG0GW00.FG0GWNM1 / FG0GW00.FG0GWNM2, -mathLib.decimals(FG0GW01.FG0GWDCP[FG0GWIDX]));
    end

    /* ------------------------------------------------------------*/
    /* Accumulate historical sales/demand percent totals*/
    /* ------------------------------------------------------------*/

    FG0GW00.FG0GWNM1 = FG0GW02.FG0GWTSP[FG0GWIDX];
    FG0GW00.FG0GWNM2 = FG0GW01.FG0GWSBP[FG0GWIDX];
    FG0GW02.FG0GWTSP[FG0GWIDX] = FG0GW00.FG0GWNM1 + FG0GW00.FG0GWNM2;

    FG0GW00.FG0GWNM1 = FG0GW02.FG0GWTSP[FG0GWIDX];
    FG0GW00.FG0GWNM2 = FG0GW01.FG0GWSCP[FG0GWIDX];
    FG0GW02.FG0GWTSP[FG0GWIDX] = FG0GW00.FG0GWNM1 + FG0GW00.FG0GWNM2;

    FG0GW00.FG0GWNM1 = FG0GW02.FG0GWTDP[FG0GWIDX];
    FG0GW00.FG0GWNM2 = FG0GW01.FG0GWDBP[FG0GWIDX];
    FG0GW02.FG0GWTDP[FG0GWIDX] = FG0GW00.FG0GWNM1 + FG0GW00.FG0GWNM2;

    FG0GW00.FG0GWNM1 = FG0GW02.FG0GWTDP[FG0GWIDX];
    FG0GW00.FG0GWNM2 = FG0GW01.FG0GWDCP[FG0GWIDX];
    FG0GW02.FG0GWTDP[FG0GWIDX] = FG0GW00.FG0GWNM1 + FG0GW00.FG0GWNM2;

    FG0GW00.FG0GWIDX = FG0GW00.FG0GWIDX + 1;

  end

   /* ------------------------------------------------------------*/
   /* Insure 100 percent display total*/
   /* ------------------------------------------------------------*/

  if (FG0GW02.FG0GWTFP > 0)
    FG0GW02.FG0GWTFP = 100;
  end

   /* ------------------------------------------------------------*/
   /* Save/translate b-grade forecast/percent*/
   /* ------------------------------------------------------------*/

  FG0GW01.FG0GWSBQ = FG0GW01.FG0GWUFB;
  FG0GW01.FG0GWSPB = FG0GW01.FG0GWFBP;
  FFXREC.FFXNUMB = FG0GW01.FG0GWUFB; /* TRANSLATE*/
  XSFFS10();
  FG0GW01.FG0GWFBQ = FFXREC.FFXCHAR; /* b-grade fcst 1000*/

   /* ------------------------------------------------------------*/
   /* Save/translate close out forecast/percent*/
   /* ------------------------------------------------------------*/

  FG0GW01.FG0GWSCQ = FG0GW01.FG0GWUFC;
  FG0GW01.FG0GWSPC = FG0GW01.FG0GWFCP;
  FFXREC.FFXNUMB = FG0GW01.FG0GWUFC; /* translate*/
  XSFFS10();
  FG0GW01.FG0GWFCQ = FFXREC.FFXCHAR; /* CLOSEOUT FCST 1000*/

   /* ------------------------------------------------------------*/
   /* Set history total percents*/
   /* ------------------------------------------------------------*/

  FG0GW02.FG0GWTSP[1] = 100;
  FG0GW02.FG0GWTSP[2] = 100;
  FG0GW02.FG0GWTSP[3] = 100;
  FG0GW02.FG0GWTDP[1] = 100;
  FG0GW02.FG0GWTDP[2] = 100;
  FG0GW02.FG0GWTDP[3] = 100;

end // end FG0G117

// Format and converse the map
Function FG0G120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (FG0GW00.FG0GWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FG0GW00.FG0GWSWF == "Y") /* Map must be formatted*/
      FG0G121(); /* Format the data on the map*/
    end

  end

  FG0GM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FG0GM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG0GM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* error message number*/
    FG0GM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    set FG0GM001 alarm; /* Indicate sound alarm*/
  end

  converse FG0GM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0;

  COMMAREA.CATOAP = FG0GM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG0GM001.CAITEM; /* Application data*/


end // end FG0G120

// Format the display data
Function FG0G121()

   /* ------------------------------------------------------------*/
   /* init map fg0gm001*/
   /* ------------------------------------------------------------*/

  set FG0GM001 initial; /* m001 input/ouput area*/

  FG0GW00.FG0GWSWF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* Format fg0gm001 using passed data*/
   /* ------------------------------------------------------------*/

  FG0GW00.FG0GWWDT = FFWREC.FFABEGMO; /* w/s date field*/
  FG0GM001.FG0GMBRG = FG0GW00.FG0GWWYM; /* begin month range*/
  FG0GW00.FG0GWWDT = FFWREC.FFAENDMO; /* w/s date field*/
  FG0GM001.FG0GMERG = FG0GW00.FG0GWWYM; /* end month range*/

  FG0GM001.FG0GMYOP = FG0GW01.FG0GWYOP; /* year option*/
  FG0GM001.FG0GMHOP = FG0GW01.FG0GWHOP; /* history option*/

   /* ------------------------------------------------------------*/
   /* if data has not been loaded bypass load map fields*/
   /* ------------------------------------------------------------*/

  if (FG0GW01.CACHGFL != "Y"
   || converseVar.validationMsgNum != 0)
    return;
  end

   /* ------------------------------------------------------------*/
   /* load map using fg0gw01 work record*/
   /* ------------------------------------------------------------*/

  FG0GM001.FG0GMLFT = FG0GW01.FG0GWLFT; /* line fcst target qty*/
  FG0GM001.FG0GMVQT = FG0GW01.FG0GWVQT; /* variance qty*/
  FG0GM001.FG0GMVPT = FG0GW01.FG0GWVPT; /* variance percent*/
  FG0GM001.FG0GMCDT = FG0GW01.FG0GWCDT; /* wrk sht created date*/
  FG0GM001.FG0GMPBR = FG0GW01.FG0GWPBR[FG0GWYOP]; /* prior beg range yymm*/
  FG0GM001.FG0GMPER = FG0GW01.FG0GWPER[FG0GWYOP]; /* prior end range yymm*/
  FG0GM001.FG0GMYDS = FG0GW00.FG0GWYDS[FG0GWYOP]; /* prior year desc*/
  if (FG0GW01.FG0GWHOP == "S")
    FG0GM001.FG0GMHDS = FG0GW00.FG0GWHDS[1];
  else
    FG0GM001.FG0GMHDS = FG0GW00.FG0GWHDS[2];
  end

  set FG0GM001.FG0GMPR1 skip;
  set FG0GM001.FG0GMDSH skip;
  set FG0GM001.FG0GMPR2 skip;
  set FG0GM001.FG0GMHDS skip;

   /* ------------------------------------------------------------*/
   /* load current sales and historical sales/demand prdtyp grps*/
   /* ------------------------------------------------------------*/

  FG0GM001.FG0GMCLD = FG0GW00.XPLSDESC; /* current line desc*/
  FG0GM001.FG0GMHLD = FG0GW00.XPLSDESC; /* history line desc*/

  FG0GW00.FG0GWIDX = 1;

  while (FG0GW00.FG0GWIDX <= FG0GW01.FG0GWNLD)

    FG0GM001.FG0GMCTD[FG0GWIDX] = FG0GW01.YPGABRV[FG0GWIDX];
    FG0GM001.FG0GMMQT[FG0GWIDX] = FG0GW01.FG0GWMQT[FG0GWIDX];
    FG0GM001.FG0GMFQT[FG0GWIDX] = FG0GW01.FG0GWFQT[FG0GWIDX];
    FG0GM001.FG0GMFPT[FG0GWIDX] = FG0GW01.FG0GWFPT[FG0GWIDX];
    FG0GM001.FG0GMHTD[FG0GWIDX] = FG0GW01.YPGABRV[FG0GWIDX];
    if (FG0GW01.FG0GWHOP == "S") /* load historical sales data*/
      if (FG0GW01.FG0GWYOP == 1)
        FG0GM001.FG0GMHQT[FG0GWIDX] = FG0GW01.FG0GWHQ1[FG0GWIDX];
        FG0GM001.FG0GMHPC[FG0GWIDX] = FG0GW01.FG0GWHP1[FG0GWIDX];
      end
      if (FG0GW01.FG0GWYOP == 2)
        FG0GM001.FG0GMHQT[FG0GWIDX] = FG0GW01.FG0GWHQ2[FG0GWIDX];
        FG0GM001.FG0GMHPC[FG0GWIDX] = FG0GW01.FG0GWHP2[FG0GWIDX];
      end
      if (FG0GW01.FG0GWYOP == 3)
        FG0GM001.FG0GMHQT[FG0GWIDX] = FG0GW01.FG0GWHQ3[FG0GWIDX];
        FG0GM001.FG0GMHPC[FG0GWIDX] = FG0GW01.FG0GWHP3[FG0GWIDX];
      end
    else /* load historical demand data*/
      if (FG0GW01.FG0GWYOP == 1)
        FG0GM001.FG0GMHQT[FG0GWIDX] = FG0GW01.FG0GWDQ1[FG0GWIDX];
        FG0GM001.FG0GMHPC[FG0GWIDX] = FG0GW01.FG0GWDP1[FG0GWIDX];
      end
      if (FG0GW01.FG0GWYOP == 2)
        FG0GM001.FG0GMHQT[FG0GWIDX] = FG0GW01.FG0GWDQ2[FG0GWIDX];
        FG0GM001.FG0GMHPC[FG0GWIDX] = FG0GW01.FG0GWDP2[FG0GWIDX];
      end
      if (FG0GW01.FG0GWYOP == 3)
        FG0GM001.FG0GMHQT[FG0GWIDX] = FG0GW01.FG0GWDQ3[FG0GWIDX];
        FG0GM001.FG0GMHPC[FG0GWIDX] = FG0GW01.FG0GWDP3[FG0GWIDX];
      end
    end

    FG0G158(); /* calculate the history percents*/

    set FG0GM001.FG0GMHPT[FG0GWIDX] normal;
    set FG0GM001.FG0GMSEL[FG0GWIDX] normal;
    set FG0GM001.FG0GMFQT[FG0GWIDX] normal;
    set FG0GM001.FG0GMFPT[FG0GWIDX] normal;
    set FG0GM001.FG0GMCPT[FG0GWIDX] normal;

    FG0GW00.FG0GWIDX = FG0GW00.FG0GWIDX + 1; /* increment load index*/

  end

   /* ------------------------------------------------------------*/
   /* load product type group subtotals*/
   /* ------------------------------------------------------------*/

  FG0GM001.FG0GMCTD[FG0GWSIX] = "SUB TOTAL";
  FG0GM001.FG0GMMQT[FG0GWSIX] = FG0GW02.FG0GWMQT;
  FG0GM001.FG0GMFQT[FG0GWSIX] = FG0GW02.FG0GWFQT;
  FG0GM001.FG0GMFPT[FG0GWSIX] = FG0GW02.FG0GWFPT;
  set FG0GM001.FG0GMFQT[FG0GWSIX] skip;
  set FG0GM001.FG0GMFPT[FG0GWSIX] skip;

  FG0GM001.FG0GMHTD[FG0GWSIX] = "SUB TOTAL";
  if (FG0GW01.FG0GWHOP == "S") /* load historical sales totals*/
    FG0GM001.FG0GMHQT[FG0GWSIX] = FG0GW02.FG0GWHSQ[FG0GWYOP];
    FG0GM001.FG0GMHPC[FG0GWSIX] = FG0GW02.FG0GWHSP[FG0GWYOP];
  else /* load historical demand totals*/
    FG0GM001.FG0GMHQT[FG0GWSIX] = FG0GW02.FG0GWHDQ[FG0GWYOP];
    FG0GM001.FG0GMHPC[FG0GWSIX] = FG0GW02.FG0GWHDP[FG0GWYOP];
  end

   /* ------------------------------------------------------------*/
   /* load current sales and historical sales/demand b-grade qty*/
   /* ------------------------------------------------------------*/

  FG0GM001.FG0GMCBD = "B-GRADE";
  FG0GM001.FG0GMMBQ = FG0GW01.FG0GWMBQ;
  FG0GM001.FG0GMFBQ = FG0GW01.FG0GWFBQ;
  FG0GM001.FG0GMFBP = FG0GW01.FG0GWFBP;
  set FG0GM001.FG0GMFBQ normal;
  set FG0GM001.FG0GMFBP normal;
  set FG0GM001.FG0GMBCP normal;

  FG0GM001.FG0GMHBD = "B-GRADE";
  if (FG0GW01.FG0GWHOP == "S") /* load historical sales totals*/
    FG0GM001.FG0GMHBQ = FG0GW01.FG0GWHSB[FG0GWYOP];
    FG0GM001.FG0GMHBP = FG0GW01.FG0GWSBP[FG0GWYOP];
  else /* load historical demand totals*/
    FG0GM001.FG0GMHBQ = FG0GW01.FG0GWHDB[FG0GWYOP];
    FG0GM001.FG0GMHBP = FG0GW01.FG0GWDBP[FG0GWYOP];
  end
   /* ------------------------------------------------------------*/
   /* load current sales and historical sales/demand close out*/
   /* ------------------------------------------------------------*/

  FG0GM001.FG0GMCCD = "CLOSE OUT";
  FG0GM001.FG0GMMCQ = FG0GW01.FG0GWMCQ;
  FG0GM001.FG0GMFCQ = FG0GW01.FG0GWFCQ;
  FG0GM001.FG0GMFCP = FG0GW01.FG0GWFCP;
  set FG0GM001.FG0GMFCQ normal;
  set FG0GM001.FG0GMFCP normal;
  set FG0GM001.FG0GMCCP normal;

  FG0GM001.FG0GMHCD = "CLOSE OUT";
  if (FG0GW01.FG0GWHOP == "S") /* load historical sales totals*/
    FG0GM001.FG0GMHCQ = FG0GW01.FG0GWHSC[FG0GWYOP];
    FG0GM001.FG0GMHCP = FG0GW01.FG0GWSCP[FG0GWYOP];
  else /* load historical demand totals*/
    FG0GM001.FG0GMHCQ = FG0GW01.FG0GWHDC[FG0GWYOP];
    FG0GM001.FG0GMHCP = FG0GW01.FG0GWDCP[FG0GWYOP];
  end

  FG0G159(); /* calc history percent for b-grade and forecast*/
  set FG0GM001.FG0GMBHP normal;
  set FG0GM001.FG0GMCHP normal;

   /* ------------------------------------------------------------*/
   /* load product type group totals*/
   /* ------------------------------------------------------------*/

  FG0GM001.FG0GMTLD = "TOTAL";
  FG0GM001.FG0GMTMQ = FG0GW02.FG0GWTMQ;
  FG0GM001.FG0GMTFQ = FG0GW02.FG0GWTFQ;
  FG0GM001.FG0GMTFP = FG0GW02.FG0GWTFP;

  FG0GM001.FG0GMTHD = "TOTAL";
  if (FG0GW01.FG0GWHOP == "S") /* load historical sales totals*/
    FG0GM001.FG0GMTHQ = FG0GW02.FG0GWTSQ[FG0GWYOP];
    FG0GM001.FG0GMTHP = 100;
  else /* load historical demand totals*/
    FG0GM001.FG0GMTHQ = FG0GW02.FG0GWTDQ[FG0GWYOP];
    FG0GM001.FG0GMTHP = 100;
  end


end // end FG0G121

// Check attention identifier
Function FG0G130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* refresh map*/

    FG0GW00.FG0GWSWF = "Y"; /* format screen m001*/
    FG0GW00.FG0GWSWR = "N"; /* request for data*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FG0GM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (FG0GM001.CATOAP == "FG0P")
        FFWREC.XXXMODID = "130";
        converseLib.validationFailed(189);
        set FG0GM001.CATOAP cursor, bold;
      else

        XSFFS01(); /* Exit to another application*/

        FFWREC.FFEWSNBR = 0; /* zero out work sheet number*/
        FG0GW00.FG0GWSWF = "Y"; /* format screen m001*/
        FG0GW00.FG0GWSWR = "N"; /* request for data*/

        set FG0GM001.CATOAP cursor, bold; /* Highlight*/

      end
    else

      FFWREC.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14 was pressed*/
   || converseVar.eventKey is pf19) /* or PF19 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG0GM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FG0A"; /* TO application*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FG0Y"; /* TO application*/
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "FG0F"; /* TO application*/
    end

    if (converseVar.eventKey is pf19) /* PF19 was pressed*/
      FFWREC.YPGCD = " "; /* Clear type group code*/
      COMMAREA.CATOAP = "FG0B"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    FG0GW00.FG0GWSWF = "Y"; /* format screen m001*/
    FG0GW00.FG0GWSWR = "N"; /* request for data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf15  /* pf15 was not pressed*/
   && converseVar.eventKey not pf16  /* pf16 was not pressed*/
   && converseVar.eventKey not pf18  /* pf18 was not pressed*/
   && converseVar.eventKey not pf19) /* pf19 was not pressed*/

    FFWREC.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FG0G130

// Reset highlighted fields
Function FG0G140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FG0GM001.FG0GMBRG initialAttributes; /* begin range*/
  set FG0GM001.FG0GMERG initialAttributes; /* end range*/
  set FG0GM001.FG0GMLFT initialAttributes; /* line forecast target*/
  set FG0GM001.FG0GMYOP initialAttributes; /* year option*/
  set FG0GM001.FG0GMHOP initialAttributes; /* history option*/
  set FG0GM001.FG0GMPCT initialAttributes; /* change percent*/
  set FG0GM001.FG0GMCTQ initialAttributes; /* change total qty*/

  if (FG0GW01.CACHGFL == "Y")

    FG0GW00.FG0GWIDX = 1; /* init load index*/
    while (FG0GW00.FG0GWIDX <= FG0GW01.FG0GWNLD)

      set FG0GM001.FG0GMSEL[FG0GWIDX] normal; /* selection field*/
      set FG0GM001.FG0GMFQT[FG0GWIDX] normal; /* current sls fcst qty*/
      set FG0GM001.FG0GMFPT[FG0GWIDX] normal; /* line percent*/
      set FG0GM001.FG0GMHPT[FG0GWIDX] normal; /* history percent*/
      set FG0GM001.FG0GMCPT[FG0GWIDX] normal; /* change percent*/

      FG0GW00.FG0GWIDX = FG0GW00.FG0GWIDX + 1; /* increment load index*/

    end

    /* subtotal*/

    set FG0GM001.FG0GMFQT[FG0GWIDX] skip; /* fcst qty total*/
    set FG0GM001.FG0GMFPT[FG0GWIDX] skip; /* line percent total*/

    /* b-grade*/

    set FG0GM001.FG0GMFBQ normal;
    set FG0GM001.FG0GMFBP normal;
    set FG0GM001.FG0GMBHP normal;
    set FG0GM001.FG0GMBCP normal;

    /* close out*/

    set FG0GM001.FG0GMFCQ normal;
    set FG0GM001.FG0GMFCP normal;
    set FG0GM001.FG0GMCHP normal;
    set FG0GM001.FG0GMCCP normal;

    set FG0GM001.FG0GMPR1 skip;
    set FG0GM001.FG0GMDSH skip;
    set FG0GM001.FG0GMPR2 skip;
    set FG0GM001.FG0GMHDS skip;

  end

  set FG0GM001.CATOAP initialAttributes;
  set FG0GM001.CAITEM initialAttributes;

end // end FG0G140

// Verify the entered data
Function FG0G150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "150"; /* Module identification*/
    set FG0GM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If data loaded, check modifiable fields*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15 /* request to save data(pf15)*/
   || converseVar.eventKey is pf16 /* request to explode bgrd/clo(pf16)*/
   || converseVar.eventKey is pf18) /* request for history (pf18)*/

    if (FG0GW01.CACHGFL != "Y") /* no data loaded*/

      converseLib.validationFailed(18);
      FFWREC.XXXMODID = "150";

    else

      FG0GS08(); /* check modifiable fields*/

      if (converseVar.eventKey is pf16)
        FG0G152(); /* verify bgrd/clo ind*/
      end

      if (converseVar.eventKey is pf18)
        FG0G153(); /* validate year/hist opt*/
      end

    end
  end

   /* ------------------------------------------------------------*/
   /* Verify type group subtotal percent*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15 /* request to save data(pf15)*/
   || converseVar.eventKey is pf16 /* request to explode bgrd/clo(pf16)*/
   || converseVar.eventKey is pf18) /* request for history (pf18)*/

    if (FG0GW02.FG0GWTUF != 0
     && FG0GW02.FG0GWTFP != 100)
      set FG0GM001.FG0GMTFP skip, bold;
      set FG0GM001.FG0GMFPT[1] cursor;
      converseLib.validationFailed(159);
      FFWREC.XXXMODID = "150";
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate entry fields, selection requests, history options,*/
   /* key data, and re-calculate percents*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)

    /* ------------------------------------------------------*/
    /* Calculate the total percent*/
    /* ------------------------------------------------------*/

    if (FG0GM001.FG0GMFPT[1] != FG0GW01.FG0GWFPT[1] /* Inln pct chng*/
     || FG0GM001.FG0GMFPT[2] != FG0GW01.FG0GWFPT[2] /* or mkup pct chng*/
     || FG0GM001.FG0GMFBP != FG0GW01.FG0GWFBP       /* or bgrd pct chng*/
     || FG0GM001.FG0GMFCP != FG0GW01.FG0GWFCP)      /* or clsout pct chng*/

      FG0GW02.FG0GWTFP = 0;
      FG0GW02.FG0GWTFP = FG0GW02.FG0GWTFP + FG0GM001.FG0GMFPT[1];
      FG0GW02.FG0GWTFP = FG0GW02.FG0GWTFP + FG0GM001.FG0GMFPT[2];
      FG0GM001.FG0GMFPT[3] = FG0GW02.FG0GWTFP;
      if (FG0GM001.FG0GMFBP == 0
       && FG0GW00.FG0GW1ST == "Y")
        FG0GM001.FG0GMFBP = 1.5;
        FG0GW02.FG0GWTFP = FG0GW02.FG0GWTFP + 1.5;
      else
        FG0GW02.FG0GWTFP = FG0GW02.FG0GWTFP + FG0GM001.FG0GMFBP;
      end
      if (FG0GM001.FG0GMFCP == 0
       && FG0GW00.FG0GW1ST == "Y")
        FG0GM001.FG0GMFCP = 2.5;
        FG0GW02.FG0GWTFP = FG0GW02.FG0GWTFP + 2.5;
        FG0GW00.FG0GW1ST = "N";
      else
        FG0GW02.FG0GWTFP = FG0GW02.FG0GWTFP + FG0GM001.FG0GMFCP;
      end

      if (FG0GW02.FG0GWTFP == 99.9
       || FG0GW02.FG0GWTFP == 100.1)
        FG0GW02.FG0GWTFP = 100;
        FG0GM001.FG0GMTFP = FG0GW02.FG0GWTFP; /* Update screen total pct*/
      else
        FG0GM001.FG0GMTFP = FG0GW02.FG0GWTFP; /* Update screen total pct*/
      end

    else
      if (FG0GW00.FG0GWFPF == "Y" /* Type pct has changed*/
       && FG0GW02.FG0GWTFP != 100)
        FG0GW02.FG0GWFPT = FG0GW01.FG0GWFPT[1] + FG0GW01.FG0GWFPT[2];
        FG0GW02.FG0GWTFP = FG0GW02.FG0GWFPT;
        FG0GM001.FG0GMFPT[3] = FG0GW02.FG0GWFPT;
        FG0GW02.FG0GWTFP = FG0GW02.FG0GWTFP + FG0GW01.FG0GWFBP;
        FG0GW02.FG0GWTFP = FG0GW02.FG0GWTFP + FG0GW01.FG0GWFCP;
        FG0GM001.FG0GMTFP = FG0GW02.FG0GWTFP;
      end
    end

    FG0G154(); /* validate entry fields*/

    /* ------------------------------------------------------*/
    /* If no errors and data loaded re-calculate percentages*/
    /* ------------------------------------------------------*/

    if (FG0GW01.CACHGFL == "Y"
     && converseVar.validationMsgNum == 0)

      FG0G155(); /* update qtys and pcts*/

      if (FG0GW00.FG0GWDCF == "Y")

        FG0G156(); /* re-calculate/load qtys/percentages*/

      end
    end

    /* ------------------------------------------------------*/
    /* If key data changed check modifiable fields*/
    /* ------------------------------------------------------*/

    FG0GW00.FG0GWWBD = FFWREC.FFABEGMO;
    FG0GW00.FG0GWWED = FFWREC.FFAENDMO;

    if (FG0GM001.FG0GMBRG != FG0GW00.FG0GWBYM /* beg range changed*/
     || FG0GM001.FG0GMBRG == 0                /* beg range changed*/
     || FG0GM001.FG0GMERG != FG0GW00.FG0GWEYM /* end range changed*/
     || FG0GM001.FG0GMERG == 0)               /* end range changed*/

      FG0G157(); /* key chg: ck modifiable fields*/

      if (converseVar.validationMsgNum == 0)
        FG0GW00.FG0GWSWR = "Y"; /* request data request*/
      end

    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end

end // end FG0G150

// verify dfcast.vrline01 b/c ind
Function FG0G152()
   /* ------------------------------------------------------------*/
   /* select dfcast vrline01*/
   /* ------------------------------------------------------------*/

  FG0GS09(); /* select dfcast.vrline01*/

  if (SQLCA.VAGen_SQLCODE == 100
   || FFAREC.FFABCIND == " ")
    converseLib.validationFailed(246);
    FFWREC.XXXMODID = "152";
  end

  if (FFWREC.FFWMODSW == "Y") /* fcst modified*/
    converseLib.validationFailed(296);
    FFWREC.XXXMODID = "152";
  end


end // end FG0G152

// validate year/hist option
Function FG0G153()

   /* ------------------------------------------------------------*/
   /* validate year/history option field*/
   /* ------------------------------------------------------------*/

  if (FG0GM001.FG0GMHOP != FG0GW01.FG0GWHOP)
    if (FG0GM001.FG0GMHOP != "S"
     && FG0GM001.FG0GMHOP != "D")
      converseLib.validationFailed(10);
      FFWREC.XXXMODID = "153";
      set FG0GM001.FG0GMHOP cursor, bold;
    end
  end

  if (FG0GM001.FG0GMYOP != FG0GW01.FG0GWYOP)
    if (FG0GM001.FG0GMYOP != 1
     && FG0GM001.FG0GMYOP != 2
     && FG0GM001.FG0GMYOP != 3)
      converseLib.validationFailed(10);
      FFWREC.XXXMODID = "153";
      set FG0GM001.FG0GMYOP cursor, bold;
    end
  end


end // end FG0G153

// validate modifiable data
Function FG0G154()
   /* ------------------------------------------------------------*/
   /* Init flags*/
   /* ------------------------------------------------------------*/

  FG0GW00.FG0GWERF = "N"; /* error flag*/
  FG0GW00.FG0GWFPF = "N"; /* error flag*/
  FG0GW00.FG0GWSLF = "N"; /* selection flag*/

   /* ------------------------------------------------------------*/
   /* Validate close out fcst qty*/
   /* ------------------------------------------------------------*/

  if (FG0GM001.FG0GMFCQ != FG0GW01.FG0GWFCQ)
    FFXREC.FFXCHAR = FG0GM001.FG0GMFCQ;
    XSFFS11(); /* convert fcst to units*/
    if (FFXREC.FFXRTNCD != "0")
      converseLib.validationFailed(10); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "154";
      set FG0GM001.FG0GMFCQ cursor, bold; /* Highlight*/
    else
      if (FFXREC.FFXNUMB < 0)
        converseLib.validationFailed(10); /* Indicate missing or invalid*/
        FFWREC.XXXMODID = "154";
        set FG0GM001.FG0GMFCQ cursor, bold; /* Highlight*/
      end

      XSFFS10(); /* ; translate units to thousands*/
      FG0GM001.FG0GMFCQ = FFXREC.FFXCHAR;
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate b-grade fcst qty*/
   /* ------------------------------------------------------------*/

  if (FG0GM001.FG0GMFBQ != FG0GW01.FG0GWFBQ)
    FFXREC.FFXCHAR = FG0GM001.FG0GMFBQ;
    XSFFS11(); /* convert fcst to units*/
    if (FFXREC.FFXRTNCD != "0")
      converseLib.validationFailed(10); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "154";
      set FG0GM001.FG0GMFBQ cursor, bold; /* Highlight*/
    else
      if (FFXREC.FFXNUMB < 0)
        converseLib.validationFailed(10); /* Indicate missing or invalid*/
        FFWREC.XXXMODID = "154";
        set FG0GM001.FG0GMFBQ cursor, bold; /* Highlight*/
      end

      XSFFS10(); /* ; translate units to thousands*/
      FG0GM001.FG0GMFBQ = FFXREC.FFXCHAR;
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate product type group qtys*/
   /* ------------------------------------------------------------*/

  FG0GW00.FG0GWIDX = FG0GW01.FG0GWNLD; /* nbr of lines*/

  while (FG0GW00.FG0GWIDX >= 1)

    if (FG0GM001.FG0GMFQT[FG0GWIDX] != FG0GW01.FG0GWFQT[FG0GWIDX])
      FFXREC.FFXCHAR = FG0GM001.FG0GMFQT[FG0GWIDX];
      XSFFS11(); /* convert fcst to units*/
      if (FFXREC.FFXRTNCD != "0")
        converseLib.validationFailed(10); /* Indicate missing or invalid*/
        FFWREC.XXXMODID = "154";
        set FG0GM001.FG0GMFQT[FG0GWIDX] cursor, bold; /* Highlight*/
      else
        if (FFXREC.FFXNUMB < 0)
          converseLib.validationFailed(10); /* Indicate missing or invalid*/
          FFWREC.XXXMODID = "154";
          set FG0GM001.FG0GMFQT[FG0GWIDX] cursor, bold; /* Highlight*/
        end

        XSFFS10(); /* ; translate units to thousands*/
        FG0GM001.FG0GMFQT[FG0GWIDX] = FFXREC.FFXCHAR;
      end
    end

    FG0GW00.FG0GWIDX = FG0GW00.FG0GWIDX - 1;

  end

   /* ------------------------------------------------------------*/
   /* Validate the global change total qty field*/
   /* ------------------------------------------------------------*/

  if (FG0GM001.FG0GMCTQ != " ")
    FFXREC.FFXCHAR = FG0GM001.FG0GMCTQ;
    XSFFS11(); /* global change total to units*/
    if (FFXREC.FFXRTNCD != "0")
      converseLib.validationFailed(10); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "154";
      set FG0GM001.FG0GMCTQ cursor, bold; /* Highlight*/
    else
      if (FFXREC.FFXNUMB < 0)
        converseLib.validationFailed(10); /* cannot be negative number*/
        FFWREC.XXXMODID = "154";
        set FG0GM001.FG0GMCTQ cursor, bold; /* Highlight*/
      else
        if (FG0GW02.FG0GWUFQ == 0)
          converseLib.validationFailed(234); /* total must exist to modify*/
          FFWREC.XXXMODID = "154";
          set FG0GM001.FG0GMCTQ cursor, bold; /* Highlight*/
        end
      end

      XSFFS10();
      FG0GM001.FG0GMCTQ = FFXREC.FFXCHAR;
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate the global change percent field*/
   /* ------------------------------------------------------------*/

  if (FG0GM001.FG0GMPCT != 0)
    if (FG0GM001.FG0GMPCT > 100)
      converseLib.validationFailed(10);
      FFWREC.XXXMODID = "154";
      set FG0GM001.FG0GMPCT cursor, bold;
    else
      if (FG0GW02.FG0GWUFQ == 0)
        converseLib.validationFailed(234); /* total must exist to modify*/
        FFWREC.XXXMODID = "154";
        set FG0GM001.FG0GMPCT cursor, bold; /* Highlight*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate year/history option field*/
   /* ------------------------------------------------------------*/

  if (FG0GM001.FG0GMHOP != FG0GW01.FG0GWHOP
   || FG0GM001.FG0GMYOP != FG0GW01.FG0GWYOP)

    if (FG0GM001.FG0GMHOP != FG0GW01.FG0GWHOP)
      if (FG0GM001.FG0GMHOP != "S"
       && FG0GM001.FG0GMHOP != "D")
        converseLib.validationFailed(10);
        FFWREC.XXXMODID = "154";
        set FG0GM001.FG0GMHOP cursor, bold;
      end
    end

    if (FG0GM001.FG0GMYOP != FG0GW01.FG0GWYOP)
      if (FG0GM001.FG0GMYOP != 1
       && FG0GM001.FG0GMYOP != 2
       && FG0GM001.FG0GMYOP != 3)
        converseLib.validationFailed(10);
        FFWREC.XXXMODID = "154";
        set FG0GM001.FG0GMYOP cursor, bold;
      end
    end

    FG0GS08(); /* check modifiable fields*/

  end

   /* ------------------------------------------------------------*/
   /* Validate forecast target qty*/
   /* ------------------------------------------------------------*/

  if (FG0GM001.FG0GMLFT != FG0GW01.FG0GWLFT)
    FFXREC.FFXCHAR = FG0GM001.FG0GMLFT;
    XSFFS11(); /* forecast target qty*/
    if (FFXREC.FFXRTNCD != "0")
      converseLib.validationFailed(10); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "154";
      set FG0GM001.FG0GMLFT cursor, bold; /* Highlight*/
    else
      if (FFXREC.FFXNUMB < 0)
        converseLib.validationFailed(10); /* Indicate missing or invalid*/
        FFWREC.XXXMODID = "154";
        set FG0GM001.FG0GMLFT cursor, bold; /* Highlight*/
      end

      FG0GW00.FG0GWSUT = FFXREC.FFXNUMB;
      XSFFS10();
      FG0GM001.FG0GMLFT = FFXREC.FFXCHAR;
      FG0GW00.FG0GWSTG = FFXREC.FFXCHAR;
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate end yymm range and begin yymm range*/
   /* ------------------------------------------------------------*/

  set FFZREC empty;

  FFZREC.FFZMONTH = 6;
  FFZREC.FFZBYYMM = FG0GM001.FG0GMBRG;
  FFZREC.FFZEYYMM = FG0GM001.FG0GMERG;

  XSFFS35(); /* edit date range*/

  if (FFZREC.FFZENDRC == "1")
    set FG0GM001.FG0GMERG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "154";
  else
    if (FFZREC.FFZENDRC == "2")
      set FG0GM001.FG0GMERG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "154";
    else
      if (FFZREC.FFZENDRC == "3")
        set FG0GM001.FG0GMERG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "154";
      end
    end
  end

  if (FFZREC.FFZBEGRC == "1")
    set FG0GM001.FG0GMBRG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "154";
  else
    if (FFZREC.FFZBEGRC == "2")
      set FG0GM001.FG0GMBRG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "154";
    else
      if (FFZREC.FFZBEGRC == "3")
        set FG0GM001.FG0GMBRG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "154";
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify if any changes have been made to b-grade/close out*/
   /* entry fields*/
   /* ------------------------------------------------------------*/

  if (FG0GM001.FG0GMCCP != 0
   || FG0GM001.FG0GMBCP != 0)
    if (FG0GM001.FG0GMCHP != FG0GW01.FG0GWCHS
     || FG0GM001.FG0GMFCP != FG0GW01.FG0GWFCP
     || FG0GM001.FG0GMFCQ != FG0GW01.FG0GWFCQ
     || FG0GM001.FG0GMBHP != FG0GW01.FG0GWBHS
     || FG0GM001.FG0GMFBP != FG0GW01.FG0GWFBP
     || FG0GM001.FG0GMFBQ != FG0GW01.FG0GWFBQ
     || FG0GM001.FG0GMCTQ != " "
     || FG0GM001.FG0GMPCT != 0)
      FG0GW00.FG0GWERF = "Y";
    end
  end

  if (FG0GM001.FG0GMCHP != FG0GW01.FG0GWCHS
   || FG0GM001.FG0GMBHP != FG0GW01.FG0GWBHS)
    if (FG0GM001.FG0GMCCP != 0
     || FG0GM001.FG0GMFCP != FG0GW01.FG0GWFCP
     || FG0GM001.FG0GMFCQ != FG0GW01.FG0GWFCQ
     || FG0GM001.FG0GMBCP != 0
     || FG0GM001.FG0GMFBP != FG0GW01.FG0GWFBP
     || FG0GM001.FG0GMFBQ != FG0GW01.FG0GWFBQ
     || FG0GM001.FG0GMCTQ != " "
     || FG0GM001.FG0GMPCT != 0)
      FG0GW00.FG0GWERF = "Y";
    end
  end

  if (FG0GM001.FG0GMFCP != FG0GW01.FG0GWFCP
   || FG0GM001.FG0GMFBP != FG0GW01.FG0GWFBP)
    if (FG0GM001.FG0GMFCQ != FG0GW01.FG0GWFCQ
     || FG0GM001.FG0GMCCP != 0
     || FG0GM001.FG0GMCHP != FG0GW01.FG0GWCHS
     || FG0GM001.FG0GMFBQ != FG0GW01.FG0GWFBQ
     || FG0GM001.FG0GMBCP != 0
     || FG0GM001.FG0GMBHP != FG0GW01.FG0GWBHS
     || FG0GM001.FG0GMCTQ != " "
     || FG0GM001.FG0GMPCT != 0)
      FG0GW00.FG0GWERF = "Y";
    else
      FG0GW00.FG0GWFPF = "Y";
    end
  end

  if (FG0GM001.FG0GMFCQ != FG0GW01.FG0GWFCQ
   || FG0GM001.FG0GMFBQ != FG0GW01.FG0GWFBQ)
    if (FG0GM001.FG0GMCCP != 0
     || FG0GM001.FG0GMCHP != FG0GW01.FG0GWCHS
     || FG0GM001.FG0GMFCP != FG0GW01.FG0GWFCP
     || FG0GM001.FG0GMBCP != 0
     || FG0GM001.FG0GMBHP != FG0GW01.FG0GWBHS
     || FG0GM001.FG0GMFBP != FG0GW01.FG0GWFBP
     || FG0GM001.FG0GMCTQ != " "
     || FG0GM001.FG0GMPCT != 0)
      FG0GW00.FG0GWERF = "Y";
    end
  end

  if (FG0GM001.FG0GMCTQ != " ")
    if (FG0GM001.FG0GMCCP != 0
     || FG0GM001.FG0GMCHP != FG0GW01.FG0GWCHS
     || FG0GM001.FG0GMFCP != FG0GW01.FG0GWFCP
     || FG0GM001.FG0GMFCQ != FG0GW01.FG0GWFCQ
     || FG0GM001.FG0GMBCP != 0
     || FG0GM001.FG0GMBHP != FG0GW01.FG0GWBHS
     || FG0GM001.FG0GMFBP != FG0GW01.FG0GWFBP
     || FG0GM001.FG0GMFBQ != FG0GW01.FG0GWFBQ
     || FG0GM001.FG0GMPCT != 0)
      FG0GW00.FG0GWERF = "Y";
    end
  end

  if (FG0GM001.FG0GMPCT != 0)
    if (FG0GM001.FG0GMCCP != 0
     || FG0GM001.FG0GMCHP != FG0GW01.FG0GWCHS
     || FG0GM001.FG0GMFCP != FG0GW01.FG0GWFCP
     || FG0GM001.FG0GMFCQ != FG0GW01.FG0GWFCQ
     || FG0GM001.FG0GMBCP != 0
     || FG0GM001.FG0GMBHP != FG0GW01.FG0GWBHS
     || FG0GM001.FG0GMFBP != FG0GW01.FG0GWFBP
     || FG0GM001.FG0GMFBQ != FG0GW01.FG0GWFBQ
     || FG0GM001.FG0GMCTQ != " ")
      FG0GW00.FG0GWERF = "Y";
    end
  end

   /* ------------------------------------------------------------*/
   /* If entries were made in more than one column highlight all*/
   /* fields that have changed and display error message*/
   /* ------------------------------------------------------------*/

  if (FG0GW00.FG0GWERF == "Y")

    if (FG0GM001.FG0GMCCP != 0)
      set FG0GM001.FG0GMCCP cursor, bold;
    end

    if (FG0GM001.FG0GMCHP != FG0GW01.FG0GWCHS)
      set FG0GM001.FG0GMCHP cursor, bold;
    end

    if (FG0GM001.FG0GMFCP != FG0GW01.FG0GWFCP)
      set FG0GM001.FG0GMFCP cursor, bold;
    end

    if (FG0GM001.FG0GMFCQ != FG0GW01.FG0GWFCQ)
      set FG0GM001.FG0GMFCQ cursor, bold;
    end

    if (FG0GM001.FG0GMBCP != 0)
      set FG0GM001.FG0GMBCP cursor, bold;
    end

    if (FG0GM001.FG0GMBHP != FG0GW01.FG0GWBHS)
      set FG0GM001.FG0GMBHP cursor, bold;
    end

    if (FG0GM001.FG0GMFBP != FG0GW01.FG0GWFBP)
      set FG0GM001.FG0GMFBP cursor, bold;
    end

    if (FG0GM001.FG0GMFBQ != FG0GW01.FG0GWFBQ)
      set FG0GM001.FG0GMFBQ cursor, bold;
    end

    if (FG0GM001.FG0GMCTQ != " ")
      set FG0GM001.FG0GMCTQ cursor, bold;
    end

    if (FG0GM001.FG0GMPCT != 0)
      set FG0GM001.FG0GMPCT cursor, bold;
    end

    converseLib.validationFailed(233);
    FFWREC.XXXMODID = "154";

  end

   /* ------------------------------------------------------------*/
   /* Init flags*/
   /* ------------------------------------------------------------*/

  FG0GW00.FG0GWERF = "N"; /* error flag*/

   /* ------------------------------------------------------------*/
   /* Verify if any changes have been made to the product type*/
   /* entry fields*/
   /* ------------------------------------------------------------*/

  FG0GW00.FG0GWIDX = FG0GW01.FG0GWNLD; /* nbr of lines*/
  while (FG0GW00.FG0GWIDX >= 1) /* process temp storage*/

    if (FG0GM001.FG0GMCPT[FG0GWIDX] != 0)
      if (FG0GM001.FG0GMHPT[FG0GWIDX] != FG0GW01.FG0GWHPS[FG0GWIDX]
       || FG0GM001.FG0GMFPT[FG0GWIDX] != FG0GW01.FG0GWFPT[FG0GWIDX]
       || FG0GM001.FG0GMFQT[FG0GWIDX] != FG0GW01.FG0GWFQT[FG0GWIDX]
       || FG0GM001.FG0GMCTQ != " "
       || FG0GM001.FG0GMPCT != 0)
        FG0GW00.FG0GWERF = "Y";
      else
        FG0GW00.FG0GWPIX = FG0GW00.FG0GWIDX - 1;
        while (FG0GW00.FG0GWPIX >= 1)
          if (FG0GM001.FG0GMHPT[FG0GWPIX] != FG0GW01.FG0GWHPS[FG0GWPIX]
           || FG0GM001.FG0GMFPT[FG0GWPIX] != FG0GW01.FG0GWFPT[FG0GWPIX]
           || FG0GM001.FG0GMFQT[FG0GWPIX] != FG0GW01.FG0GWFQT[FG0GWPIX])
            FG0GW00.FG0GWERF = "Y";
          end
          FG0GW00.FG0GWPIX = FG0GW00.FG0GWPIX - 1;
        end
      end
    end

    if (FG0GM001.FG0GMHPT[FG0GWIDX] != FG0GW01.FG0GWHPS[FG0GWIDX])
      if (FG0GM001.FG0GMCPT[FG0GWIDX] != 0
       || FG0GM001.FG0GMFPT[FG0GWIDX] != FG0GW01.FG0GWFPT[FG0GWIDX]
       || FG0GM001.FG0GMFQT[FG0GWIDX] != FG0GW01.FG0GWFQT[FG0GWIDX]
       || FG0GM001.FG0GMCTQ != " "
       || FG0GM001.FG0GMPCT != 0)
        FG0GW00.FG0GWERF = "Y";
      else
        FG0GW00.FG0GWPIX = FG0GW00.FG0GWIDX - 1;
        while (FG0GW00.FG0GWPIX >= 1)
          if (FG0GM001.FG0GMCPT[FG0GWPIX] != 0
           || FG0GM001.FG0GMFPT[FG0GWPIX] != FG0GW01.FG0GWFPT[FG0GWPIX]
           || FG0GM001.FG0GMFQT[FG0GWPIX] != FG0GW01.FG0GWFQT[FG0GWPIX])
            FG0GW00.FG0GWERF = "Y";
          end
          FG0GW00.FG0GWPIX = FG0GW00.FG0GWPIX - 1;
        end
      end
    end

    if (FG0GM001.FG0GMFPT[FG0GWIDX] != FG0GW01.FG0GWFPT[FG0GWIDX])
      FG0GW00.FG0GWFPF = "Y";
      if (FG0GM001.FG0GMCPT[FG0GWIDX] != 0
       || FG0GM001.FG0GMHPT[FG0GWIDX] != FG0GW01.FG0GWHPS[FG0GWIDX]
       || FG0GM001.FG0GMFQT[FG0GWIDX] != FG0GW01.FG0GWFQT[FG0GWIDX]
       || FG0GM001.FG0GMCTQ != " "
       || FG0GM001.FG0GMPCT != 0)
        FG0GW00.FG0GWERF = "Y";
      else
        FG0GW00.FG0GWPIX = FG0GW00.FG0GWIDX - 1;
        while (FG0GW00.FG0GWPIX >= 1)
          if (FG0GM001.FG0GMCPT[FG0GWPIX] != 0
           || FG0GM001.FG0GMHPT[FG0GWPIX] != FG0GW01.FG0GWHPS[FG0GWPIX]
           || FG0GM001.FG0GMFQT[FG0GWPIX] != FG0GW01.FG0GWFQT[FG0GWPIX])
            FG0GW00.FG0GWERF = "Y";
          end
          FG0GW00.FG0GWPIX = FG0GW00.FG0GWPIX - 1;
        end
      end
    end

    if (FG0GM001.FG0GMFQT[FG0GWIDX] != FG0GW01.FG0GWFQT[FG0GWIDX])
      if (FG0GM001.FG0GMCPT[FG0GWIDX] != 0
       || FG0GM001.FG0GMHPT[FG0GWIDX] != FG0GW01.FG0GWHPS[FG0GWIDX]
       || FG0GM001.FG0GMFPT[FG0GWIDX] != FG0GW01.FG0GWFPT[FG0GWIDX]
       || FG0GM001.FG0GMCTQ != " "
       || FG0GM001.FG0GMPCT != 0)
        FG0GW00.FG0GWERF = "Y";
      else
        FG0GW00.FG0GWPIX = FG0GW00.FG0GWIDX - 1;
        while (FG0GW00.FG0GWPIX >= 1)
          if (FG0GM001.FG0GMCPT[FG0GWPIX] != 0
           || FG0GM001.FG0GMHPT[FG0GWPIX] != FG0GW01.FG0GWHPS[FG0GWPIX]
           || FG0GM001.FG0GMFPT[FG0GWPIX] != FG0GW01.FG0GWFPT[FG0GWPIX])
            FG0GW00.FG0GWERF = "Y";
          end
          FG0GW00.FG0GWPIX = FG0GW00.FG0GWPIX - 1;
        end
      end
    end
    FG0GW00.FG0GWIDX = FG0GW00.FG0GWIDX - 1; /* decrement table index*/
  end

  if (FG0GM001.FG0GMCTQ != " "
   && FG0GM001.FG0GMPCT != 0)
    FG0GW00.FG0GWERF = "Y";
  end

   /* ------------------------------------------------------------*/
   /* If entries were made in more than one column highlight all*/
   /* fields that have changed and display error message*/
   /* ------------------------------------------------------------*/

  if (FG0GW00.FG0GWERF == "Y")

    FG0GW00.FG0GWIDX = FG0GW01.FG0GWNLD;

    while (FG0GW00.FG0GWIDX >= 1) /* process w/s*/

      if (FG0GM001.FG0GMCPT[FG0GWIDX] != 0)
        set FG0GM001.FG0GMCPT[FG0GWIDX] cursor, bold;
      end

      if (FG0GM001.FG0GMHPT[FG0GWIDX] != FG0GW01.FG0GWHPS[FG0GWIDX])
        set FG0GM001.FG0GMHPT[FG0GWIDX] cursor, bold;
      end

      if (FG0GM001.FG0GMFPT[FG0GWIDX] != FG0GW01.FG0GWFPT[FG0GWIDX])
        set FG0GM001.FG0GMFPT[FG0GWIDX] cursor, bold;
      end

      if (FG0GM001.FG0GMFQT[FG0GWIDX] != FG0GW01.FG0GWFQT[FG0GWIDX])
        set FG0GM001.FG0GMFQT[FG0GWIDX] cursor, bold;
      end

      FG0GW00.FG0GWIDX = FG0GW00.FG0GWIDX - 1;

    end

    if (FG0GM001.FG0GMCTQ != " ")
      set FG0GM001.FG0GMCTQ cursor, bold;
    end

    if (FG0GM001.FG0GMPCT != 0)
      set FG0GM001.FG0GMPCT cursor, bold;
    end

    converseLib.validationFailed(233);
    FFWREC.XXXMODID = "154";

  end

   /* ------------------------------------------------------------*/
   /* Validate forecast target qty/fcst total qty for type pct*/
   /* ------------------------------------------------------------*/

  if (FG0GW00.FG0GWFPF == "Y" /* fcst percent changed*/
   && FG0GW00.FG0GWERF == "N" 
   && FG0GW02.FG0GWUFQ == 0) 
    if (FG0GM001.FG0GMLFT == "    0"
     || FG0GM001.FG0GMLFT == " ")
      converseLib.validationFailed(8); /* required field*/
      FFWREC.XXXMODID = "154";
      set FG0GM001.FG0GMLFT cursor, bold; /* Highlight*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate 's'election field*/
   /* ------------------------------------------------------------*/

  FG0GW00.FG0GWIDX = FG0GW01.FG0GWNLD; /* nbr of lines loaded*/

  while (FG0GW00.FG0GWIDX >= 1)

    if (FG0GM001.FG0GMSEL[FG0GWIDX] != " "
     && FG0GM001.FG0GMSEL[FG0GWIDX] != "S")
      FFWREC.XXXMODID = "154";
      converseLib.validationFailed(41);
      set FG0GM001.FG0GMSEL[FG0GWIDX] cursor, bold;
    else
      if (FG0GM001.FG0GMSEL[FG0GWIDX] == "S")
        if (FG0GM001.FG0GMFQT[FG0GWIDX] == "  ") /* no fcst*/
          FFWREC.XXXMODID = "154";
          converseLib.validationFailed(329);
          set FG0GM001.FG0GMSEL[FG0GWIDX] cursor, bold;
        else
          FFWREC.YPGCD = FG0GW01.YPGCD[FG0GWIDX];
          FG0GW00.FG0GWSLF = "Y"; /* data selected*/
        end
      end
    end

    FG0GW00.FG0GWSLC = FG0GW00.FG0GWIDX - 1;

    while (FG0GW00.FG0GWSLC >= 1)

      if (FG0GM001.FG0GMSEL[FG0GWSLC] > " "
       && FG0GM001.FG0GMSEL[FG0GWIDX] > " ")
        FFWREC.XXXMODID = "154";
        converseLib.validationFailed(136);
        set FG0GM001.FG0GMSEL[FG0GWIDX] cursor, bold;
      end

      FG0GW00.FG0GWSLC = FG0GW00.FG0GWSLC - 1;

    end

    FG0GW00.FG0GWIDX = FG0GW00.FG0GWIDX - 1;

  end

   /* -----------------------------------------------------*/
   /* If product type group selected check modifiable*/
   /* fields*/
   /* -----------------------------------------------------*/

  if (FG0GW00.FG0GWSLF == "Y")

    FG0GS08(); /* check modifiable fields*/

  end

   /* ------------------------------------------------------------*/
   /* Validate type percent total*/
   /* ------------------------------------------------------------*/

  if (FG0GW01.CACHGFL == "Y")

    if (FG0GW00.FG0GWFPF == "Y" /* type percent has changed*/
     && FG0GW02.FG0GWTFP != 100 
     && converseVar.validationMsgNum == 0)

      FG0GW00.FG0GWIDX = FG0GW01.FG0GWNLD;
      while (FG0GW00.FG0GWIDX >= 1) /* process temp storage*/

        if (FG0GM001.FG0GMCPT[FG0GWIDX] != 0)
          set FG0GM001.FG0GMCPT[FG0GWIDX] bold;
        end
        if (FG0GM001.FG0GMHPT[FG0GWIDX] != FG0GW01.FG0GWHPS[FG0GWIDX])
          set FG0GM001.FG0GMHPT[FG0GWIDX] bold;
        end
        if (FG0GM001.FG0GMFPT[FG0GWIDX] != FG0GW01.FG0GWFPT[FG0GWIDX])
          set FG0GM001.FG0GMFPT[FG0GWIDX] bold;
        end
        if (FG0GM001.FG0GMFQT[FG0GWIDX] != FG0GW01.FG0GWFQT[FG0GWIDX])
          set FG0GM001.FG0GMFQT[FG0GWIDX] bold;
        end

        FG0GW00.FG0GWIDX = FG0GW00.FG0GWIDX - 1;

      end

      if (FG0GM001.FG0GMCTQ != " ")
        set FG0GM001.FG0GMCTQ cursor, bold;
      end
      if (FG0GM001.FG0GMPCT != 0)
        set FG0GM001.FG0GMPCT cursor, bold;
      end

      set FG0GM001.FG0GMFPT[1] cursor;
      set FG0GM001.FG0GMTFP skip, bold;
      converseLib.validationFailed(159);
      FFWREC.XXXMODID = "154";

    else
      if (FG0GW00.FG0GWFPF == "Y"
       && FG0GW02.FG0GWTFP != 100
       && converseVar.validationMsgNum == 0)
        set FG0GM001.FG0GMFPT[1] cursor;
        set FG0GM001.FG0GMTFP skip, bold;
        converseLib.validationFailed(159);
        FFWREC.XXXMODID = "154";
      end
    end
  end


end // end FG0G154

// upd temp storage qtys/pcts
Function FG0G155()

   /* ------------------------------------------------------------*/
   /* init qty change flag*/
   /* ------------------------------------------------------------*/

  FG0GW00.FG0GWQTF = "N"; /* prdtyp grp qty flag*/
  FG0GW00.FG0GWBCF = "N"; /* b-grade/close qty flag*/
  FG0GW00.FG0GWDCF = "N"; /* data change flag*/

   /* ------------------------------------------------------------*/
   /* line forecast target qty*/
   /* ------------------------------------------------------------*/

  if (FG0GM001.FG0GMLFT != FG0GW01.FG0GWLFT)

    FFXREC.FFXCHAR = FG0GM001.FG0GMLFT;
    XSFFS11();
    FG0GW01.FG0GWULF = FFXREC.FFXNUMB;
    XSFFS10();
    FG0GW01.FG0GWLFT = FFXREC.FFXCHAR;

    FG0GW00.FG0GWDCF = "Y";

  end

   /* ------------------------------------------------------------*/
   /* global change percent entered*/
   /* ------------------------------------------------------------*/

  if (FG0GM001.FG0GMPCT != 0)

    FG0GW00.FG0GWIDX = FG0GW01.FG0GWNLD;
    while (FG0GW00.FG0GWIDX >= 1)

      if (FG0GW01.FG0GWUFQ[FG0GWIDX] != 0)

         /* calculate the adjustment qty*/

        FG0GW00.FG0GWNM1 = FG0GM001.FG0GMPCT * FG0GW01.FG0GWUFQ[FG0GWIDX];
        FG0GW00.FG0GWNM1 = FG0GW00.FG0GWNM1 / 100; /* adjustment qty*/

         /* calculate the new forecast qty*/

        FFXREC.FFXNUMB = FG0GW01.FG0GWUFQ[FG0GWIDX] + FG0GW00.FG0GWNM1;
        FG0GW01.FG0GWUFQ[FG0GWIDX] = FFXREC.FFXNUMB;
        XSFFS10();
        FG0GW01.FG0GWFQT[FG0GWIDX] = FFXREC.FFXCHAR;

        FG0GW01.FG0GWQUP[FG0GWIDX] = "Y"; /* Set qty updated flag*/

         /* calculate the forecast subtotal and total*/

        FG0GW02.FG0GWUFQ = FG0GW02.FG0GWUFQ + FG0GW00.FG0GWNM1;
        FG0GW02.FG0GWTUF = FG0GW02.FG0GWTUF + FG0GW00.FG0GWNM1;

        FG0GW00.FG0GWDCF = "Y";
        FG0GW00.FG0GWQTF = "Y";

      end
      FG0GW00.FG0GWIDX = FG0GW00.FG0GWIDX - 1;
    end

    if (FG0GW01.FG0GWUFB != 0)

       /* calculate the adjustment qty*/

      FG0GW00.FG0GWNM1 = FG0GM001.FG0GMPCT * FG0GW01.FG0GWUFB;
      FG0GW00.FG0GWNM1 = FG0GW00.FG0GWNM1 / 100; /* adjustment qty*/

       /* calculate the new forecast qty and forecast total qty*/

      FFXREC.FFXNUMB = FG0GW01.FG0GWUFB + FG0GW00.FG0GWNM1;
      FG0GW01.FG0GWUFB = FFXREC.FFXNUMB;
      FG0GW02.FG0GWTUF = FG0GW02.FG0GWTUF + FG0GW00.FG0GWNM1;

      FG0GW00.FG0GWDCF = "Y";
      FG0GW00.FG0GWBCF = "Y";

    end

    if (FG0GW01.FG0GWUFC != 0)

       /* calculate the adjustment qty*/

      FG0GW00.FG0GWNM1 = FG0GM001.FG0GMPCT * FG0GW01.FG0GWUFC;
      FG0GW00.FG0GWNM1 = FG0GW00.FG0GWNM1 / 100; /* adjustment qty*/

       /* calculate the new forecast qty and forecast total qty*/

      FFXREC.FFXNUMB = FG0GW01.FG0GWUFC + FG0GW00.FG0GWNM1;
      FG0GW01.FG0GWUFC = FFXREC.FFXNUMB;
      FG0GW02.FG0GWTUF = FG0GW02.FG0GWTUF + FG0GW00.FG0GWNM1;

      FG0GW00.FG0GWDCF = "Y";
      FG0GW00.FG0GWBCF = "Y";

    end

    return;

  end

   /* ------------------------------------------------------------*/
   /* global change total qty entered*/
   /* ------------------------------------------------------------*/

  if (FG0GM001.FG0GMCTQ != " ")
    /* ----------------------------------------------------------*/
     /* load new forecast total qty*/
    /* ----------------------------------------------------------*/

    FG0GW02.FG0GWUFQ = 0; /* Initialize subtotal qty*/

    FFXREC.FFXCHAR = FG0GM001.FG0GMCTQ;
    XSFFS11();
    FG0GW02.FG0GWTUF = FFXREC.FFXNUMB; /* total fcst qty unit*/

    FG0GW00.FG0GWIDX = FG0GW01.FG0GWNLD;
    while (FG0GW00.FG0GWIDX >= 1)
      if (FG0GW01.FG0GWFPT[FG0GWIDX] != 0)
        /* -------------------------------------------------------*/
         /* calculate new product type group forecast qtys*/
        /* -------------------------------------------------------*/
        FG0GW00.FG0GWNM1 = FG0GW01.FG0GWFPT[FG0GWIDX] * FG0GW02.FG0GWTUF;
        FG0GW00.FG0GWNM1 = FG0GW00.FG0GWNM1 / 100;

        FG0GW01.FG0GWUFQ[FG0GWIDX] = FG0GW00.FG0GWNM1;
        FG0GW02.FG0GWUFQ = FG0GW02.FG0GWUFQ + FG0GW01.FG0GWUFQ[FG0GWIDX];
        FFXREC.FFXNUMB = FG0GW00.FG0GWNM1;
        XSFFS10();
        FG0GW01.FG0GWFQT[FG0GWIDX] = FFXREC.FFXCHAR;

        FG0GW01.FG0GWQUP[FG0GWIDX] = "Y"; /* Set qty updated flag*/

        FG0GW00.FG0GWDCF = "Y";
        FG0GW00.FG0GWQTF = "Y";

      end
      FG0GW00.FG0GWIDX = FG0GW00.FG0GWIDX - 1;
    end

    /* ----------------------------------------------------------*/
     /* calculate b-grade fcst qty using new total fcst qty*/
    /* ----------------------------------------------------------*/
    if (FG0GW01.FG0GWFBP != 0)
      FG0GW00.FG0GWNM1 = FG0GW01.FG0GWFBP * FG0GW02.FG0GWTUF;
      FG0GW00.FG0GWNM1 = FG0GW00.FG0GWNM1 / 100;

      FG0GW01.FG0GWUFB = FG0GW00.FG0GWNM1;

      FG0GW00.FG0GWDCF = "Y";
      FG0GW00.FG0GWBCF = "Y";

    end
    /* ----------------------------------------------------------*/
     /* calculate close out fcst using subtotal fcst qty*/
    /* ----------------------------------------------------------*/
    if (FG0GW01.FG0GWFCP != 0)
      FG0GW00.FG0GWNM1 = FG0GW01.FG0GWFCP * FG0GW02.FG0GWTUF;
      FG0GW00.FG0GWNM1 = FG0GW00.FG0GWNM1 / 100;

      FG0GW01.FG0GWUFC = FG0GW00.FG0GWNM1;

      FG0GW00.FG0GWDCF = "Y";
      FG0GW00.FG0GWBCF = "Y";

    end

    return;

  end

   /* ------------------------------------------------------------*/
   /* process product typ qty/percentages*/
   /* ------------------------------------------------------------*/

  FG0GW00.FG0GWIDX = FG0GW01.FG0GWNLD;
  while (FG0GW00.FG0GWIDX >= 1)

    /* ------------------------------------------------------------*/
     /* change sales forecast quantity if changed*/
    /* ------------------------------------------------------------*/

    if (FG0GM001.FG0GMFQT[FG0GWIDX] != FG0GW01.FG0GWFQT[FG0GWIDX])

       /* calculate the difference between the new and old forecast*/
       /* qtys and adjust the forecast total qty using the difference*/

      FFXREC.FFXCHAR = FG0GM001.FG0GMFQT[FG0GWIDX];
      XSFFS11();
      FG0GW00.FG0GWNM1 = FFXREC.FFXNUMB - FG0GW01.FG0GWUFQ[FG0GWIDX];
      FG0GW02.FG0GWUFQ = FG0GW02.FG0GWUFQ + FG0GW00.FG0GWNM1;
      FG0GW02.FG0GWTUF = FG0GW02.FG0GWTUF + FG0GW00.FG0GWNM1;

       /* load the new forecast qty*/

      FG0GW01.FG0GWUFQ[FG0GWIDX] = FFXREC.FFXNUMB;
      XSFFS10();
      FG0GW01.FG0GWFQT[FG0GWIDX] = FFXREC.FFXCHAR;

      FG0GW01.FG0GWQUP[FG0GWIDX] = "Y"; /* Set qty updated flag*/

      FG0GW00.FG0GWDCF = "Y";
      FG0GW00.FG0GWQTF = "Y";

    end

    /* ------------------------------------------------------------*/
     /* calculate type percent if changed*/
    /* ------------------------------------------------------------*/

    if (FG0GM001.FG0GMFPT[FG0GWIDX] != FG0GW01.FG0GWFPT[FG0GWIDX])

       /* load/calculate type percent*/

      FG0GW00.FG0GWPC1 = FG0GM001.FG0GMFPT[FG0GWIDX];
      FG0GW00.FG0GWPC1 = FG0GW00.FG0GWPC1 - FG0GW01.FG0GWFPT[FG0GWIDX];
      FG0GW02.FG0GWFPT = FG0GW02.FG0GWFPT + FG0GW00.FG0GWPC1;
      FG0GW02.FG0GWTFP = FG0GW02.FG0GWTFP + FG0GW00.FG0GWPC1;
      FG0GW01.FG0GWFPT[FG0GWIDX] = FG0GM001.FG0GMFPT[FG0GWIDX];

       /* calculate the new forecast qty*/

      if (FG0GW02.FG0GWTUF == 0)
        FG0GW00.FG0GWNM2 = FG0GW01.FG0GWFPT[FG0GWIDX] * FG0GW01.FG0GWULF;
        FG0GW00.FG0GWNM2 = FG0GW00.FG0GWNM2 / 100; /* new fcst qty*/
        FG0GW02.FG0GWUFQ = FG0GW02.FG0GWFPT * FG0GW01.FG0GWULF / 100;
      else
        FG0GW00.FG0GWNM2 = FG0GW01.FG0GWFPT[FG0GWIDX] * FG0GW02.FG0GWTUF;
        FG0GW00.FG0GWNM2 = FG0GW00.FG0GWNM2 / 100; /* new fcst qty*/
        FG0GW02.FG0GWUFQ = FG0GW02.FG0GWFPT * FG0GW02.FG0GWTUF / 100;
      end

      FG0GW01.FG0GWUFQ[FG0GWIDX] = FG0GW00.FG0GWNM2; /* fcst qty*/
      FFXREC.FFXNUMB = FG0GW00.FG0GWNM2;
      XSFFS10();
      FG0GW01.FG0GWFQT[FG0GWIDX] = FFXREC.FFXCHAR;

      FG0GW01.FG0GWQUP[FG0GWIDX] = "Y"; /* Set qty updated flag*/

      FG0GW00.FG0GWDCF = "Y";
      FG0GW00.FG0GWQTF = "Y";

    end

    /* ------------------------------------------------------------*/
     /* calculate history percent if entered*/
    /* ------------------------------------------------------------*/

    if (FG0GM001.FG0GMHPT[FG0GWIDX] != FG0GW01.FG0GWHPS[FG0GWIDX])

       /* load fields used for calculations*/

      FG0GW00.FG0GWNM1 = FG0GW01.FG0GWUFQ[FG0GWIDX];
      if (FG0GM001.FG0GMHOP == "S")
        if (FG0GM001.FG0GMYOP == 1)
          FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUH1[FG0GWIDX];
        end
        if (FG0GM001.FG0GMYOP == 2)
          FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUH2[FG0GWIDX];
        end
        if (FG0GM001.FG0GMYOP == 3)
          FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUH3[FG0GWIDX];
        end
      else
        if (FG0GM001.FG0GMYOP == 1)
          FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUD1[FG0GWIDX];
        end
        if (FG0GM001.FG0GMYOP == 2)
          FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUD2[FG0GWIDX];
        end
        if (FG0GM001.FG0GMYOP == 3)
          FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUD3[FG0GWIDX];
        end
      end

       /* calculate the new forecast qty*/

      FG0GW00.FG0GWNM3 = FG0GM001.FG0GMHPT[FG0GWIDX] * FG0GW00.FG0GWNM2;
      FG0GW00.FG0GWNM3 = FG0GW00.FG0GWNM3 / 100; /* new fcst qty*/

       /* calculate the total forecast qty*/

      FG0GW00.FG0GWNM4 = FG0GW00.FG0GWNM3 - FG0GW00.FG0GWNM1; /* difference*/
      FG0GW02.FG0GWUFQ = FG0GW02.FG0GWUFQ + FG0GW00.FG0GWNM4;
      FG0GW02.FG0GWTUF = FG0GW02.FG0GWTUF + FG0GW00.FG0GWNM4;

       /* load new forecast qtys*/

      FG0GW01.FG0GWUFQ[FG0GWIDX] = FG0GW00.FG0GWNM3; /* fcst qty*/
      FFXREC.FFXNUMB = FG0GW00.FG0GWNM3;
      XSFFS10();
      FG0GW01.FG0GWFQT[FG0GWIDX] = FFXREC.FFXCHAR;

      FG0GW01.FG0GWQUP[FG0GWIDX] = "Y"; /* Set qty updated flag*/

      FG0GW00.FG0GWDCF = "Y";
      FG0GW00.FG0GWQTF = "Y";

    end

    /* ------------------------------------------------------------*/
     /* calculate change percent if entered*/
    /* ------------------------------------------------------------*/

    if (FG0GM001.FG0GMCPT[FG0GWIDX] != 0)

      FG0GW00.FG0GWNM1 = FG0GW01.FG0GWUFQ[FG0GWIDX]; /* fcst qty*/

       /* calculate the adjustment qty*/

      FG0GW00.FG0GWNM2 = FG0GM001.FG0GMCPT[FG0GWIDX] * FG0GW00.FG0GWNM1;
      FG0GW00.FG0GWNM2 = FG0GW00.FG0GWNM2 / 100; /* adjustment qty*/

       /* calculate the new forecast qty*/

      FG0GW01.FG0GWUFQ[FG0GWIDX] = FG0GW00.FG0GWNM1 + FG0GW00.FG0GWNM2;
      FFXREC.FFXNUMB = FG0GW00.FG0GWNM1 + FG0GW00.FG0GWNM2;
      XSFFS10();
      FG0GW01.FG0GWFQT[FG0GWIDX] = FFXREC.FFXCHAR;

      FG0GW01.FG0GWQUP[FG0GWIDX] = "Y"; /* Set qty updated flag*/

       /* calculate the new forecast total qty*/

      FG0GW02.FG0GWUFQ = FG0GW02.FG0GWUFQ + FG0GW00.FG0GWNM2;
      FG0GW02.FG0GWTUF = FG0GW02.FG0GWTUF + FG0GW00.FG0GWNM2;

      FG0GW00.FG0GWDCF = "Y";
      FG0GW00.FG0GWQTF = "Y";

    end

    if (FG0GW01.FG0GWQUP[FG0GWIDX] == "Y") /* recalc history percent*/
      FG0G158();
    end

    FG0GW00.FG0GWIDX = FG0GW00.FG0GWIDX - 1; /* line index*/
  end

   /* ------------------------------------------------------------*/

   /* process b-grade qty/percentages*/

   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* change sales forecast quantity if changed*/
   /* ------------------------------------------------------------*/

  if (FG0GM001.FG0GMFBQ != FG0GW01.FG0GWFBQ)

     /* calculate the difference between the new and old forecast*/
     /* qtys and adjust the forecast total qty using the difference*/

    FFXREC.FFXCHAR = FG0GM001.FG0GMFBQ;
    XSFFS11();
    FG0GW00.FG0GWNM1 = FFXREC.FFXNUMB - FG0GW01.FG0GWUFB;
    FG0GW02.FG0GWTUF = FG0GW02.FG0GWTUF + FG0GW00.FG0GWNM1;

     /* load the new forecast qty*/

    FG0GW01.FG0GWUFB = FFXREC.FFXNUMB;

    FG0GW00.FG0GWDCF = "Y";
    FG0GW00.FG0GWBCF = "Y";

  end

   /* ------------------------------------------------------------*/
   /* calculate type percent if changed*/
   /* ------------------------------------------------------------*/

  if (FG0GM001.FG0GMFBP != FG0GW01.FG0GWFBP)

    if (FG0GW01.FG0GWFBP == 0
     && FG0GW00.FG0GW1ST == "Y")

      FG0GW01.FG0GWFBP = FG0GM001.FG0GMFBP;
      FG0GW02.FG0GWTFP = FG0GW02.FG0GWTFP + FG0GW01.FG0GWFBP;
      FG0GW00.FG0GWNM1 = FG0GW01.FG0GWFBP * FG0GW01.FG0GWULF;
      FG0GW00.FG0GWNM1 = FG0GW00.FG0GWNM1 / 100; /* new fcst qty*/

      FG0GW00.FG0GWNM2 = FG0GW00.FG0GWNM1 - FG0GW01.FG0GWUFB;

      FG0GW01.FG0GWUFB = FG0GW00.FG0GWNM1;

    else

       /* load/calculate type percent*/

      FG0GW00.FG0GWPC1 = FG0GM001.FG0GMFBP;
      FG0GW00.FG0GWPC1 = FG0GW00.FG0GWPC1 - FG0GW01.FG0GWFBP;
      FG0GW02.FG0GWTFP = FG0GW02.FG0GWTFP + FG0GW00.FG0GWPC1;
      FG0GW01.FG0GWFBP = FG0GM001.FG0GMFBP;

       /* calculate the new forecast qty*/

      if (FG0GW02.FG0GWTUF == 0)
        FG0GW00.FG0GWNM1 = FG0GW01.FG0GWFBP * FG0GW01.FG0GWULF;
        FG0GW00.FG0GWNM1 = FG0GW00.FG0GWNM1 / 100; /* new fcst qty*/

         /* adjust the total forecast qty*/

        FG0GW00.FG0GWNM2 = FG0GW00.FG0GWNM1 - FG0GW01.FG0GWUFB;

      else
        FG0GW00.FG0GWNM1 = FG0GW01.FG0GWFBP * FG0GW02.FG0GWTUF;
        FG0GW00.FG0GWNM1 = FG0GW00.FG0GWNM1 / 100; /* new fcst qty*/
      end

       /* load new forecast qty*/

      FG0GW01.FG0GWUFB = FG0GW00.FG0GWNM1; /* fcst qty*/

      FG0GW00.FG0GWDCF = "Y";

    end

  else
    if (FG0GW01.FG0GWFBP == 0   
     && FG0GW02.FG0GWUFQ != 0   /* inlin or mkup fcst exist*/
     && FG0GW00.FG0GWQTF != "Y" /* qty field not changed*/
     && FG0GW00.FG0GW1ST == "Y")
      FG0GW01.FG0GWFBP = 1.5; /* Default b-grade pct*/
      FG0GW02.FG0GWTFP = FG0GW02.FG0GWTFP + FG0GW01.FG0GWFBP;
      FG0GW00.FG0GWNM1 = FG0GW01.FG0GWFBP * FG0GW01.FG0GWULF;
      FG0GW00.FG0GWNM1 = FG0GW00.FG0GWNM1 / 100; /* new fcst qty*/

      FG0GW00.FG0GWNM2 = FG0GW00.FG0GWNM1 - FG0GW01.FG0GWUFB;

      FG0GW01.FG0GWUFB = FG0GW00.FG0GWNM1;

    end
  end

   /* ------------------------------------------------------------*/
   /* calculate history percent if entered*/
   /* ------------------------------------------------------------*/

  if (FG0GM001.FG0GMBHP != FG0GW01.FG0GWBHS)

     /* load fields used for calculations*/

    FG0GW00.FG0GWNM1 = FG0GW01.FG0GWUFB;
    if (FG0GM001.FG0GMHOP == "S")
      if (FG0GM001.FG0GMYOP == 1)
        FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUSB[1];
      end
      if (FG0GM001.FG0GMYOP == 2)
        FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUSB[2];
      end
      if (FG0GM001.FG0GMYOP == 3)
        FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUSB[3];
      end
    else
      if (FG0GM001.FG0GMYOP == 1)
        FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUDB[1];
      end
      if (FG0GM001.FG0GMYOP == 2)
        FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUDB[2];
      end
      if (FG0GM001.FG0GMYOP == 3)
        FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUDB[3];
      end
    end

     /* calculate the new forecast qty*/

    FG0GW00.FG0GWNM3 = FG0GM001.FG0GMBHP * FG0GW00.FG0GWNM2;
    FG0GW00.FG0GWNM3 = FG0GW00.FG0GWNM3 / 100; /* new fcst qty*/

     /* calculate the total forecast qty*/

    FG0GW00.FG0GWNM4 = FG0GW00.FG0GWNM3 - FG0GW00.FG0GWNM1; /* difference*/
    FG0GW02.FG0GWTUF = FG0GW02.FG0GWTUF + FG0GW00.FG0GWNM4;

     /* load new forecast qtys*/

    FG0GW01.FG0GWUFB = FG0GW00.FG0GWNM3; /* fcst qty*/

    FG0GW00.FG0GWDCF = "Y";
    FG0GW00.FG0GWBCF = "Y";

  end

   /* ------------------------------------------------------------*/
   /* calculate change percent if entered*/
   /* ------------------------------------------------------------*/

  if (FG0GM001.FG0GMBCP != 0)

    FG0GW00.FG0GWNM1 = FG0GW01.FG0GWUFB; /* fcst qty*/

     /* calculate the adjustment qty*/

    FG0GW00.FG0GWNM2 = FG0GM001.FG0GMBCP * FG0GW00.FG0GWNM1;
    FG0GW00.FG0GWNM2 = FG0GW00.FG0GWNM2 / 100; /* adjustment qty*/

     /* calculate the new forecast qty*/

    FG0GW01.FG0GWUFB = FG0GW00.FG0GWNM1 + FG0GW00.FG0GWNM2;

     /* calculate the new forecast total qty*/

    FG0GW00.FG0GWNM3 = FG0GW01.FG0GWUFB - FG0GW00.FG0GWNM1;
    FG0GW02.FG0GWTUF = FG0GW02.FG0GWTUF + FG0GW00.FG0GWNM3;

    FG0GW00.FG0GWDCF = "Y";
    FG0GW00.FG0GWBCF = "Y";

  end

   /* ------------------------------------------------------------*/

   /* process close out qty/percentages*/

   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* change sales forecast quantity if changed*/
   /* ------------------------------------------------------------*/

  if (FG0GM001.FG0GMFCQ != FG0GW01.FG0GWFCQ)

     /* calculate the difference between the new and old forecast*/
     /* qtys and adjust the forecast total qty using the difference*/

    FFXREC.FFXCHAR = FG0GM001.FG0GMFCQ;
    XSFFS11();
    FG0GW00.FG0GWNM1 = FFXREC.FFXNUMB - FG0GW01.FG0GWUFC;
    FG0GW02.FG0GWTUF = FG0GW02.FG0GWTUF + FG0GW00.FG0GWNM1;

     /* load the new forecast qty*/

    FG0GW01.FG0GWUFC = FFXREC.FFXNUMB;

    FG0GW00.FG0GWDCF = "Y";
    FG0GW00.FG0GWBCF = "Y";

  end

   /* ------------------------------------------------------------*/
   /* calculate type percent if changed*/
   /* ------------------------------------------------------------*/

  if (FG0GM001.FG0GMFCP != FG0GW01.FG0GWFCP)

    if (FG0GW01.FG0GWFCP == 0
     && FG0GW00.FG0GW1ST == "Y")

      FG0GW01.FG0GWFCP = FG0GM001.FG0GMFCP;
      FG0GW02.FG0GWTFP = FG0GW02.FG0GWTFP + FG0GW01.FG0GWFCP;
      FG0GW00.FG0GWNM1 = FG0GW01.FG0GWFCP * FG0GW01.FG0GWULF;
      FG0GW00.FG0GWNM1 = FG0GW00.FG0GWNM1 / 100; /* new fcst qty*/

      FG0GW00.FG0GWNM2 = FG0GW00.FG0GWNM1 - FG0GW01.FG0GWUFC;

      FG0GW01.FG0GWUFC = FG0GW00.FG0GWNM1;

    else

       /* load/calculate type percent*/

      FG0GW00.FG0GWPC1 = FG0GM001.FG0GMFCP;
      FG0GW00.FG0GWPC1 = FG0GW00.FG0GWPC1 - FG0GW01.FG0GWFCP;
      FG0GW02.FG0GWTFP = FG0GW02.FG0GWTFP + FG0GW00.FG0GWPC1;
      FG0GW01.FG0GWFCP = FG0GM001.FG0GMFCP;

       /* calculate the new forecast qty*/

      if (FG0GW02.FG0GWTUF == 0)
        FG0GW00.FG0GWNM1 = FG0GW01.FG0GWFCP * FG0GW01.FG0GWULF;
        FG0GW00.FG0GWNM1 = FG0GW00.FG0GWNM1 / 100; /* new fcst qty*/

         /* calculate the total forecast qty*/

        FG0GW00.FG0GWNM2 = FG0GW00.FG0GWNM1 - FG0GW01.FG0GWUFC;

      else
        FG0GW00.FG0GWNM1 = FG0GW01.FG0GWFCP * FG0GW02.FG0GWTUF;
        FG0GW00.FG0GWNM1 = FG0GW00.FG0GWNM1 / 100; /* new fcst qty*/
      end

       /* load new forecast qtys*/

      FG0GW01.FG0GWUFC = FG0GW00.FG0GWNM1; /* fcst qty*/

      FG0GW00.FG0GWDCF = "Y";

    end
  else
    if (FG0GW01.FG0GWFCP == 0   
     && FG0GW02.FG0GWUFQ != 0   /* inlin or mkup fcst exist*/
     && FG0GW00.FG0GWQTF != "Y" /* qty field not changed*/
     && FG0GW00.FG0GW1ST == "Y")
      FG0GW01.FG0GWFCP = 2.5; /* Default closeout pct*/
      FG0GW02.FG0GWTFP = FG0GW02.FG0GWTFP + FG0GW01.FG0GWFCP;
      FG0GW00.FG0GWNM1 = FG0GW01.FG0GWFCP * FG0GW01.FG0GWULF;
      FG0GW00.FG0GWNM1 = FG0GW00.FG0GWNM1 / 100; /* new fcst qty*/

      FG0GW00.FG0GWNM2 = FG0GW00.FG0GWNM1 - FG0GW01.FG0GWUFC;

      FG0GW01.FG0GWUFC = FG0GW00.FG0GWNM1;

    end
  end

   /* ------------------------------------------------------------*/
   /* calculate history percent if entered*/
   /* ------------------------------------------------------------*/

  if (FG0GM001.FG0GMCHP != FG0GW01.FG0GWCHS)

     /* load fields used for calculations*/

    FG0GW00.FG0GWNM1 = FG0GW01.FG0GWUFC;
    if (FG0GM001.FG0GMHOP == "S")
      if (FG0GM001.FG0GMYOP == 1)
        FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUSC[1];
      end
      if (FG0GM001.FG0GMYOP == 2)
        FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUSC[2];
      end
      if (FG0GM001.FG0GMYOP == 3)
        FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUSC[3];
      end
    else
      if (FG0GM001.FG0GMYOP == 1)
        FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUDC[1];
      end
      if (FG0GM001.FG0GMYOP == 2)
        FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUDC[2];
      end
      if (FG0GM001.FG0GMYOP == 3)
        FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUDC[3];
      end
    end

     /* calculate the new forecast qty*/

    FG0GW00.FG0GWNM3 = FG0GM001.FG0GMCHP * FG0GW00.FG0GWNM2;
    FG0GW00.FG0GWNM3 = FG0GW00.FG0GWNM3 / 100; /* new fcst qty*/

     /* calculate the total forecast qty*/

    FG0GW00.FG0GWNM4 = FG0GW00.FG0GWNM3 - FG0GW00.FG0GWNM1; /* difference*/
    FG0GW02.FG0GWTUF = FG0GW02.FG0GWTUF + FG0GW00.FG0GWNM4;

     /* load new forecast qtys*/

    FG0GW01.FG0GWUFC = FG0GW00.FG0GWNM3; /* fcst qty*/

    FG0GW00.FG0GWDCF = "Y";
    FG0GW00.FG0GWBCF = "Y";

  end

   /* ------------------------------------------------------------*/
   /* calculate change percent if entered*/
   /* ------------------------------------------------------------*/

  if (FG0GM001.FG0GMCCP != 0)

    FG0GW00.FG0GWNM1 = FG0GW01.FG0GWUFC; /* fcst qty*/

     /* calculate the adjustment qty*/

    FG0GW00.FG0GWNM2 = FG0GM001.FG0GMCCP * FG0GW00.FG0GWNM1;
    FG0GW00.FG0GWNM2 = FG0GW00.FG0GWNM2 / 100; /* adjustment qty*/

     /* calculate the new forecast qty and forecast total qty*/

    FG0GW01.FG0GWUFC = FG0GW00.FG0GWNM1 + FG0GW00.FG0GWNM2;
    FG0GW02.FG0GWTUF = FG0GW02.FG0GWTUF + FG0GW00.FG0GWNM2;

    FG0GW00.FG0GWDCF = "Y";
    FG0GW00.FG0GWBCF = "Y";

  end

  if (FG0GW00.FG0GWBCF == "Y")
    FG0G159(); /* recalc b-grd and closeout history percentages*/
  end

  if (FG0GW02.FG0GWTUF == 0 /* percents entered only, move target*/
   && FG0GW02.FG0GWTFP != 0) /* qty to total*/
    FG0GW02.FG0GWTUF = FG0GW01.FG0GWULF;
  end

end // end FG0G155

// re-calculate line percents
Function FG0G156()

   /* ----------------------------------------------------------*/
   /* if qty changed re-calculate product type fcst percentages*/
   /* ----------------------------------------------------------*/

  if (FG0GW00.FG0GWQTF == "Y"
   || FG0GW00.FG0GWBCF == "Y")
    FG0GW02.FG0GWFPT = 0; /* Initialize subtot pct*/
    FG0GW00.FG0GWIDX = FG0GW01.FG0GWNLD;
    while (FG0GW00.FG0GWIDX >= 1)
      if (FG0GW01.FG0GWUFQ[FG0GWIDX] != 0)
        FG0GW00.FG0GWNM1 = FG0GW01.FG0GWUFQ[FG0GWIDX] * 100;
        FG0GW01.FG0GWFPT[FG0GWIDX] = mathLib.round(FG0GW00.FG0GWNM1 / FG0GW02.FG0GWTUF, -mathLib.decimals(FG0GW01.FG0GWFPT[FG0GWIDX]));
      else
        FG0GW01.FG0GWFPT[FG0GWIDX] = 0;
      end
      FG0GW02.FG0GWFPT = FG0GW02.FG0GWFPT + FG0GW01.FG0GWFPT[FG0GWIDX];
      FG0GW00.FG0GWIDX = FG0GW00.FG0GWIDX - 1; /* decrement line index*/
    end
  end


   /* ----------------------------------------------------------*/
   /* if qty changed re-calculate b-grade / close out pecents*/
   /* ----------------------------------------------------------*/

  if (FG0GW00.FG0GWBCF == "Y"
   || FG0GW00.FG0GWQTF == "Y")

    if (FG0GW02.FG0GWTUF == 0)
      FG0GW01.FG0GWFBP = 0; /* fcst bgrd percent*/
      FG0GW01.FG0GWFCP = 0; /* fcst cls percent*/
      FG0GW01.FG0GWUFB = 0; /* fcst bgrd qty*/
      FG0GW01.FG0GWUFC = 0; /* fcst cls qty*/
      FG0GW02.FG0GWTUF = 0; /* fcst total qty*/
      FG0GW02.FG0GWTFP = 0; /* fcst total percent*/
    else
      if (FG0GW01.FG0GWUFB != 0)
        FG0GW00.FG0GWNM1 = FG0GW01.FG0GWUFB * 100;
        FG0GW01.FG0GWFBP = mathLib.round(FG0GW00.FG0GWNM1 / FG0GW02.FG0GWTUF, -mathLib.decimals(FG0GW01.FG0GWFBP));
      else
        FG0GW01.FG0GWFBP = 0;
      end

      if (FG0GW01.FG0GWUFC != 0)
        FG0GW00.FG0GWNM1 = FG0GW01.FG0GWUFC * 100;
        FG0GW01.FG0GWFCP = mathLib.round(FG0GW00.FG0GWNM1 / FG0GW02.FG0GWTUF, -mathLib.decimals(FG0GW01.FG0GWFCP));
      else
        FG0GW01.FG0GWFCP = 0;
      end
    end

    FG0GW02.FG0GWTFP = FG0GW02.FG0GWFPT + FG0GW01.FG0GWFBP;
    FG0GW02.FG0GWTFP = FG0GW02.FG0GWTFP + FG0GW01.FG0GWFCP;

    if (FG0GW02.FG0GWTUF != 0)
      FG0GW02.FG0GWTFP = 100;
    else
      FG0GW02.FG0GWTFP = 0;
    end

  end

   /* ------------------------------------------------------------*/
   /* translate sub total forecast qty*/
   /* ------------------------------------------------------------*/

  FFXNUMB = FG0GW02.FG0GWUFQ;
  XSFFS10();
  FG0GW02.FG0GWFQT = FFXCHAR;

   /* ------------------------------------------------------------*/
   /* translate b-grade forecast qty*/
   /* ------------------------------------------------------------*/

  FFXNUMB = FG0GW01.FG0GWUFB;
  XSFFS10();
  FG0GW01.FG0GWFBQ = FFXCHAR;

   /* ------------------------------------------------------------*/
   /* translate close out forecast qty*/
   /* ------------------------------------------------------------*/

  FFXNUMB = FG0GW01.FG0GWUFC;
  XSFFS10();
  FG0GW01.FG0GWFCQ = FFXCHAR;

   /* ------------------------------------------------------------*/
   /* translate total forecast qty*/
   /* ------------------------------------------------------------*/

  FFXNUMB = FG0GW02.FG0GWTUF;
  XSFFS10();
  FG0GW02.FG0GWTFQ = FFXCHAR;

   /* ------------------------------------------------------------*/
   /* re-calculate variance qty : total forecast qty - target qty*/
   /* ------------------------------------------------------------*/

  FG0GW01.FG0GWUVQ = FG0GW02.FG0GWTUF - FG0GW01.FG0GWULF;

  FFXREC.FFXNUMB = FG0GW01.FG0GWUVQ;
  XSFFS10();
  FG0GW01.FG0GWVQT = FFXREC.FFXCHAR;

   /* ------------------------------------------------------------*/
   /* re-calculate variance percent :*/
     /* (variance qty * 100) / target qty*/
   /* ------------------------------------------------------------*/

  if (FG0GW01.FG0GWULF != 0)
    FG0GW00.FG0GWNM1 = FG0GW01.FG0GWUVQ * 100;
    FG0GW01.FG0GWVPT = FG0GW00.FG0GWNM1 / FG0GW01.FG0GWULF;
  else
    FG0GW01.FG0GWVPT = 0;
  end

   /* -----------------------------------------------------------*/
   /* if type percent fields were changed and total does not*/
   /* equal 0 or 100 display error message*/
   /* ------------------------------------------------------------*/

  if (FG0GW02.FG0GWTUF != 0
   && FG0GW02.FG0GWTFP != 100)

    FG0GM001.FG0GMLFT = FG0GW01.FG0GWLFT; /* forecast target qty*/
    FG0GM001.FG0GMVQT = FG0GW01.FG0GWVQT; /* variance qty*/
    FG0GM001.FG0GMVPT = FG0GW01.FG0GWVPT; /* variance percent*/

    FG0GW00.FG0GWIDX = 1;
    while (FG0GW00.FG0GWIDX <= FG0GW01.FG0GWNLD)

      FG0GM001.FG0GMFQT[FG0GWIDX] = FG0GW01.FG0GWFQT[FG0GWIDX];
      FG0GM001.FG0GMFPT[FG0GWIDX] = FG0GW01.FG0GWFPT[FG0GWIDX];

      FG0GW00.FG0GWIDX = FG0GW00.FG0GWIDX + 1; /* increment load index*/

    end

    FG0GM001.FG0GMFQT[FG0GWSIX] = FG0GW02.FG0GWFQT; /* sub fcst qty*/
    FG0GM001.FG0GMFPT[FG0GWSIX] = FG0GW02.FG0GWFPT; /* sub fcst pct*/

    FG0GM001.FG0GMFBQ = FG0GW01.FG0GWFBQ; /* b-grade qty*/
    FG0GM001.FG0GMFBP = FG0GW01.FG0GWFBP; /* b-grade percent*/
    FG0GM001.FG0GMFCQ = FG0GW01.FG0GWFCQ; /* close qty*/
    FG0GM001.FG0GMFCP = FG0GW01.FG0GWFCP; /* close percent*/

    FG0GM001.FG0GMTFQ = FG0GW02.FG0GWTFQ; /* tot fcst qty*/
    FG0GM001.FG0GMTFP = FG0GW02.FG0GWTFP; /* tot fcst pct*/

    set FG0GM001.FG0GMTFP skip, bold;
    set FG0GM001.FG0GMFPT[1] cursor;
    converseLib.validationFailed(159);
    FFWREC.XXXMODID = "156";

  end


end // end FG0G156

// key chg: ck modifiable fields
Function FG0G157()

   /* -----------------------------------------------------*/
   /* key data change: check all modifiable fields*/
   /* -----------------------------------------------------*/

   /* -----------------------------------------------------*/
   /* verify close out entries*/
   /* -----------------------------------------------------*/

  if (FG0GM001.FG0GMCCP != 0)
    set FG0GM001.FG0GMCCP cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "157";
  end
  if (FG0GM001.FG0GMCHP != FG0GW01.FG0GWCHS)
    set FG0GM001.FG0GMCHP cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "157";
  end
  if (FG0GM001.FG0GMFCP != FG0GW01.FG0GWSPC)
    set FG0GM001.FG0GMFCP cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "157";
  end
  if (FG0GW01.FG0GWUFC != FG0GW01.FG0GWSCQ)
    set FG0GM001.FG0GMFCQ cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "157";
  end

   /* -----------------------------------------------------*/
   /* verify b-grade entries*/
   /* -----------------------------------------------------*/

  if (FG0GM001.FG0GMBCP != 0)
    set FG0GM001.FG0GMBCP cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "157";
  end
  if (FG0GM001.FG0GMBHP != FG0GW01.FG0GWBHS)
    set FG0GM001.FG0GMBHP cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "157";
  end
  if (FG0GM001.FG0GMFBP != FG0GW01.FG0GWSPB)
    set FG0GM001.FG0GMFBP cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "157";
  end
  if (FG0GW01.FG0GWUFB != FG0GW01.FG0GWSBQ)
    set FG0GM001.FG0GMFBQ cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "157";
  end

   /* -----------------------------------------------------*/
   /* verify product type group entries*/
   /* -----------------------------------------------------*/

  FG0GW00.FG0GWIDX = FG0GW01.FG0GWNLD; /* nbr of lines loaded*/
  while (FG0GW00.FG0GWIDX >= 1)

    if (FG0GM001.FG0GMCPT[FG0GWIDX] != 0)
      set FG0GM001.FG0GMCPT[FG0GWIDX] cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "157";
    end
    if (FG0GM001.FG0GMHPT[FG0GWIDX] != FG0GW01.FG0GWHPS[FG0GWIDX])
      set FG0GM001.FG0GMHPT[FG0GWIDX] cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "157";
    end
    if (FG0GM001.FG0GMFPT[FG0GWIDX] != FG0GW01.FG0GWSPT[FG0GWIDX])
      set FG0GM001.FG0GMFPT[FG0GWIDX] cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "157";
    end
    if (FG0GW01.FG0GWUFQ[FG0GWIDX] != FG0GW01.FG0GWSQT[FG0GWIDX])
      set FG0GM001.FG0GMFQT[FG0GWIDX] cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "157";
    end
    if (FG0GM001.FG0GMSEL[FG0GWIDX] != " "
     && FG0GW00.FG0GWSLF != "Y")
      set FG0GM001.FG0GMSEL[FG0GWIDX] cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "157";
    end

    FG0GW00.FG0GWIDX = FG0GW00.FG0GWIDX - 1; /* decrement table index*/

  end

  if (FG0GM001.FG0GMCTQ != " ")
    set FG0GM001.FG0GMCTQ cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "157";
  end

  if (FG0GM001.FG0GMPCT != 0)
    set FG0GM001.FG0GMPCT cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "157";
  end

  if (FG0GM001.FG0GMHOP != FG0GW01.FG0GWHOP)
    set FG0GM001.FG0GMHOP cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "157";
  end

  if (FG0GM001.FG0GMYOP != FG0GW01.FG0GWYOP)
    set FG0GM001.FG0GMYOP cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "157";
  end

  if (FG0GW01.FG0GWULF != FG0GW01.FG0GWSUL)
    set FG0GM001.FG0GMLFT cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "157";
  end


end // end FG0G157

// Calculate history percents
Function FG0G158()

   /* re calculate the history percents to display on screen*/

  if (FG0GM001.FG0GMHOP == "S")
    if (FG0GM001.FG0GMYOP == 1)
      FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUH1[FG0GWIDX];
      FG0GW00.FG0GWTH1 = FG0GW01.FG0GWHQ1[FG0GWIDX];
    end
    if (FG0GM001.FG0GMYOP == 2)
      FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUH2[FG0GWIDX];
      FG0GW00.FG0GWTH1 = FG0GW01.FG0GWHQ2[FG0GWIDX];
    end
    if (FG0GM001.FG0GMYOP == 3)
      FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUH3[FG0GWIDX];
      FG0GW00.FG0GWTH1 = FG0GW01.FG0GWHQ3[FG0GWIDX];
    end
  else
    if (FG0GM001.FG0GMYOP == 1)
      FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUD1[FG0GWIDX];
      FG0GW00.FG0GWTH1 = FG0GW01.FG0GWDQ1[FG0GWIDX];
    end
    if (FG0GM001.FG0GMYOP == 2)
      FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUD2[FG0GWIDX];
      FG0GW00.FG0GWTH1 = FG0GW01.FG0GWDQ2[FG0GWIDX];
    end
    if (FG0GM001.FG0GMYOP == 3)
      FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUD3[FG0GWIDX];
      FG0GW00.FG0GWTH1 = FG0GW01.FG0GWDQ3[FG0GWIDX];
    end
  end

  if (FG0GW00.FG0GWNM2 == 0)
    FG0GW01.FG0GWHPS[FG0GWIDX] = 0;
    FG0GM001.FG0GMHPT[FG0GWIDX] = FG0GW01.FG0GWHPS[FG0GWIDX];
  else
    if (FG0GW00.FG0GWTH1 == FG0GW01.FG0GWFQT[FG0GWIDX]) /* 1000's = move 100%*/
      FG0GW01.FG0GWHPS[FG0GWIDX] = 100;
      FG0GM001.FG0GMHPT[FG0GWIDX] = FG0GW01.FG0GWHPS[FG0GWIDX];
    else
      FG0GW00.FG0GWNM1 = FG0GW01.FG0GWUFQ[FG0GWIDX] * 100;
      FG0GW01.FG0GWHPS[FG0GWIDX] = mathLib.round(FG0GW00.FG0GWNM1 / FG0GW00.FG0GWNM2, -mathLib.decimals(FG0GW01.FG0GWHPS[FG0GWIDX]));
      if (FG0GW01.FG0GWHPS[FG0GWIDX] > 999.9)
        FG0GW01.FG0GWHPS[FG0GWIDX] = 999.9;
        FG0GM001.FG0GMHPT[FG0GWIDX] = FG0GW01.FG0GWHPS[FG0GWIDX];
      else
        FG0GM001.FG0GMHPT[FG0GWIDX] = FG0GW01.FG0GWHPS[FG0GWIDX];
      end
    end
  end
end // end FG0G158

// Calculate hist pct - bgrd,clos
Function FG0G159()

   /* recalculate the b-grade history percentage*/

  if (FG0GM001.FG0GMHOP == "S")
    if (FG0GM001.FG0GMYOP == 1)
      FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUSB[1];
      FG0GW00.FG0GWTH1 = FG0GW01.FG0GWHSB[1];
    end
    if (FG0GM001.FG0GMYOP == 2)
      FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUSB[2];
      FG0GW00.FG0GWTH1 = FG0GW01.FG0GWHSB[2];
    end
    if (FG0GM001.FG0GMYOP == 3)
      FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUSB[3];
      FG0GW00.FG0GWTH1 = FG0GW01.FG0GWHSB[3];
    end
  else
    if (FG0GM001.FG0GMYOP == 1)
      FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUDB[1];
      FG0GW00.FG0GWTH1 = FG0GW01.FG0GWHDB[1];
    end
    if (FG0GM001.FG0GMYOP == 2)
      FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUDB[2];
      FG0GW00.FG0GWTH1 = FG0GW01.FG0GWHDB[2];
    end
    if (FG0GM001.FG0GMYOP == 3)
      FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUDB[3];
      FG0GW00.FG0GWTH1 = FG0GW01.FG0GWHDB[3];
    end
  end

  if (FG0GW00.FG0GWNM2 == 0)
    FG0GW01.FG0GWBHS = 0;
    FG0GM001.FG0GMBHP = FG0GW01.FG0GWBHS;
  else
    if (FG0GW00.FG0GWTH1 == FG0GW01.FG0GWFBQ) /* thousands = move 100%*/
      FG0GW01.FG0GWBHS = 100;
      FG0GM001.FG0GMBHP = FG0GW01.FG0GWBHS;
    else
      FG0GW00.FG0GWNM1 = FG0GW01.FG0GWUFB * 100;
      FG0GW01.FG0GWBHS = mathLib.round(FG0GW00.FG0GWNM1 / FG0GW00.FG0GWNM2, -mathLib.decimals(FG0GW01.FG0GWBHS));
      if (FG0GW01.FG0GWBHS > 999.9) /* screen overflow move 999.9*/
        FG0GW01.FG0GWBHS = 999.9;
        FG0GM001.FG0GMBHP = FG0GW01.FG0GWBHS;
      else
        FG0GM001.FG0GMBHP = FG0GW01.FG0GWBHS;
      end
    end
  end

   /* recalculate the close out history percentage*/

  if (FG0GM001.FG0GMHOP == "S")
    if (FG0GM001.FG0GMYOP == 1)
      FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUSC[1];
      FG0GW00.FG0GWTH1 = FG0GW01.FG0GWHSC[1];
    end
    if (FG0GM001.FG0GMYOP == 2)
      FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUSC[2];
      FG0GW00.FG0GWTH1 = FG0GW01.FG0GWHSC[2];
    end
    if (FG0GM001.FG0GMYOP == 3)
      FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUSC[3];
      FG0GW00.FG0GWTH1 = FG0GW01.FG0GWHSC[3];
    end
  else
    if (FG0GM001.FG0GMYOP == 1)
      FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUDC[1];
      FG0GW00.FG0GWTH1 = FG0GW01.FG0GWHDC[1];
    end
    if (FG0GM001.FG0GMYOP == 2)
      FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUDC[2];
      FG0GW00.FG0GWTH1 = FG0GW01.FG0GWHDC[2];
    end
    if (FG0GM001.FG0GMYOP == 3)
      FG0GW00.FG0GWNM2 = FG0GW01.FG0GWUDC[3];
      FG0GW00.FG0GWTH1 = FG0GW01.FG0GWHDC[3];
    end
  end

  if (FG0GW00.FG0GWNM2 == 0)
    FG0GW01.FG0GWCHS = 0;
    FG0GM001.FG0GMCHP = FG0GW01.FG0GWCHS;
  else
    if (FG0GW00.FG0GWTH1 == FG0GW01.FG0GWFCQ) /* thousands = move 100%*/
      FG0GW01.FG0GWCHS = 100;
      FG0GM001.FG0GMCHP = FG0GW01.FG0GWCHS;
    else
      FG0GW00.FG0GWNM1 = FG0GW01.FG0GWUFC * 100;
      FG0GW01.FG0GWCHS = mathLib.round(FG0GW00.FG0GWNM1 / FG0GW00.FG0GWNM2, -mathLib.decimals(FG0GW01.FG0GWCHS));
      if (FG0GW01.FG0GWCHS > 999.9) /* screen overflow move 999.9*/
        FG0GW01.FG0GWCHS = 999.9;
        FG0GM001.FG0GMCHP = FG0GW01.FG0GWCHS;
      else
        FG0GM001.FG0GMCHP = FG0GW01.FG0GWCHS;
      end
    end
  end
end // end FG0G159

// Process valid input request
Function FG0G160()
   /* ------------------------------------------------------------*/
   /* Indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/

  FG0GW00.FG0GWSWF = "Y"; /* set format map switch*/

   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA/ffwrec*/
   /* ------------------------------------------------------------*/

  FFWREC.FFABEGMO = FFZREC.FFZBEGMO;
  FFWREC.FFAENDMO = FFZREC.FFZENDMO;

  FG0GW01.FG0GWYOP = FG0GM001.FG0GMYOP;
  FG0GW01.FG0GWHOP = FG0GM001.FG0GMHOP;

  if (converseVar.eventKey is enter
   && FG0GW00.FG0GWSWR == "Y") /* KEY DATA MODIFIED*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Request to explode brdg/close out*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* display history data*/

    XX0XS01(); /* Obtain date and time*/

    FG0G161(); /* select set dfcast.vrlmth01*/
    FG0G162(); /* fetch dfcast vrlmth01*/

    while (SQLCA.VAGen_SQLCODE == 0)

      FG0GS60(); /* read dfcast.vwlmth01*/

      if (SQLCA.VAGen_SQLCODE == +100) /* duplicate data*/
        FG0G163(); /* add  dfcast.vwlmth01*/
      else
        FG0GS61(); /* update dfcast.vwlmth01*/
      end


      FG0G162(); /* fetch dfcast vrlmth01*/

    end

    FG0G164(); /* close dfcast vrlmth01*/

    if (FFEREC.FFELMOFL == "N")
      FFEREC.FFELMOFL = "Y"; /* line monthly flag*/
      FG0G167(); /* update dfcast.vwdgrp01*/
    end

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();

    COMMAREA.CATOAP = "FG0P"; /* to application*/

    XSFFS01();

    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* History data requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf18) /* display history data*/

    set FG0GW03 empty; /* init map 002 work record*/

    FG0GW03.FG0GWYO1 = FG0GM001.FG0GMYOP;
    FG0GW03.FG0GWHO1 = FG0GM001.FG0GMHOP;
    FG0GW03.FG0GWSWF = "Y"; /* set format switch*/
    FG0GW00.FG0GWSWD = "2"; /* request fg0gm002 display*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data has been changed and pf15(save) or 's'elect has*/
   /* been requested update database*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15 /* save requested by user*/
   || FG0GW00.FG0GWSLF == "Y")     /* product type selected*/

    if (FFWREC.FFWMODSW == "Y" /* temp storage has been updated*/
     || FFWREC.FFEWSNBR == 0   /* add zero fcst*/
     || FFEREC.FFETYPFL == "N") /* type group fcst does not exist*/

      XX0XS01(); /* Obtain date and time*/

      FG0GW00.FG0GWREP = "N"; /* Init replicate flag*/
      FG0GW00.FG0GWIDX = FG0GW01.FG0GWNLD;
      while (FG0GW00.FG0GWIDX >= 1
       && FG0GW00.FG0GWREP == "N")

        if (FG0GW01.FG0GWWKE[FG0GWIDX] == "Y" /* Worksheet exist*/
         && FG0GW01.FG0GWQUP[FG0GWIDX] == "Y") /* and qty updated*/

          FG0GW00.FG0GWREP = "Y"; /* Set replicate flag*/

        end

        FG0GW00.FG0GWIDX = FG0GW00.FG0GWIDX - 1;

      end

      if (FG0GW00.FG0GWREP == "Y")

        FG0G165(); /* obtain next work sheet nbr*/

        VGVar.handleSysLibraryErrors = 0;
        sysLib.commit();

        FG0G166(); /* replicate wrk shts*/

        FFWREC.FFEWSNBR = FF1REC.FF1WSNBR;

        FG0GS11(); /* re-select dfcast.vwdgrp01 row*/

        FG0GS12(); /* re-select dfcast.vwline01 row*/

      end

      if (FFEREC.FFETYPFL == "N")

        FFEREC.FFETYPFL = "Y"; /* line type  flag*/

        FG0G167(); /* format/update dfcast.vwdgrp01 row*/

      end

      FG0G168(); /* format/update dfcast.vwline01 row*/

      FG0GW00.FG0GWIDX = FG0GW01.FG0GWNLD;
      while (FG0GW00.FG0GWIDX >= 1)

        if (FG0GW01.FG0GWQUP[FG0GWIDX] == "Y")
          FG0GW01.FG0GWQUP[FG0GWIDX] = "N"; /* Reset qty updated flag*/

          FG0G169(); /* format/insert dfcast.vwltyp01 rows*/

        else
          if (FG0GW00.FG0GWREP == "Y"
           && FG0GW01.FG0GWFQT[FG0GWIDX] != " ")

            FG0G169(); /* format/insert dfcast.vwltyp01 rows*/

          end
        end

        FG0GW00.FG0GWIDX = FG0GW00.FG0GWIDX - 1;
      end

      FFWREC.FFWMODSW = "N"; /* init data entered flag*/
      FG0GW00.FG0GWDCF = "N"; /* init data entered flag*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit();

      FG0GS10();
                                   /* purge any excess forecast work sheets*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit();

      FG0GW00.FG0GWSWR = "Y"; /* requested data switch*/

      if (converseVar.eventKey is pf15)
        FFWREC.XXXMSGNO = 33;
        FFWREC.XXXMODID = "160";
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If a product was selected transfer to application*/
   /* fg0h*/
   /* ------------------------------------------------------------*/

  if (FG0GW00.FG0GWSLF == "Y")
    COMMAREA.CATOAP = "FG0H";

    XSFFS01(); /* common exit routine*/

    return;
  end

   /* ------------------------------------------------------------*/
   /* If data was loaded, and temporary storage was modified*/
   /* set ffwrec modified switch yes.*/
   /* ------------------------------------------------------------*/

  if (FG0GW01.CACHGFL == "Y"
   && FG0GW00.FG0GWDCF == "Y")
    FFWREC.FFWMODSW = "Y";
  end


end // end FG0G160

// select set dfcast.vrlmth01
Function FG0G161()
   /* ------------------------------------------------------------*/
   /* Select set on dfcast.vrlmth01 table.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* load fffrec record*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "S1";
  FFFREC.FFFBEGMO = FFWREC.FFABEGMO; /* low month*/
  FFFREC.FFFENDMO = FFWREC.FFAENDMO; /* high month*/

   /* ------------------------------------------------------------*/
   /* load ffbrec record*/
   /* ------------------------------------------------------------*/

  set FFBREC empty;

  FFBREC.FFABEGMO = FFWREC.FFABEGMO;
  FFBREC.FFAENDMO = FFWREC.FFAENDMO;
  FFBREC.XPLCD = FFWREC.XPLCD;

   /* ------------------------------------------------------------*/
   /* select set dfcast.vrlmth01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3790" (FFFREC, SQLCA, FFBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "161"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET DFCAST.VRLMTH01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFBREC.FFBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0G161

// fetch dfcast.vrlmth01 row
Function FG0G162()
   /* ------------------------------------------------------------*/
   /* fetch dfcast.vrlmth01 row*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "N1";

  try
    call "IO3790" (FFFREC, SQLCA, FFBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "162"; /* MODULE IDENTIFICATION*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DFCAST.VRLMTH01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFBREC.FFBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0G162

// add dfcast.vwlmth01 row
Function FG0G163()
   /* ------------------------------------------------------------*/
   /* add dfcast.vwlmth01 table row*/
   /* ------------------------------------------------------------*/
  set FFHREC empty;

  FFHREC.FFEWSNBR = FFWREC.FFEWSNBR;
  FFHREC.XPLCD = FFWREC.XPLCD;
  FFHREC.FF4FCTMO = FFBREC.FF4FCTMO;
  FFHREC.FF5BGFCT = FFBREC.FFBBCPCT * FG0GW01.FG0GWUFB / 100;
  FFHREC.FF5COFCT = FFBREC.FFBBCPCT * FG0GW01.FG0GWUFC / 100;
  FFHREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFHREC.ZZZSTM = XX0XW01.XX0XWTIM;
  FFHREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFHREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3900" ("A ", SQLCA, FFHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -803) /* duplicate*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "163"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VWLMTH01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFHREC.FFHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0G163

// close dfcast.vrlmth01
Function FG0G164()
   /* ------------------------------------------------------------*/
   /* close dfcast.vrlmth01 table.*/
   /* ------------------------------------------------------------*/
  FFFREC.FFFFUNCD = "C1";

  try
    call "IO3790" (FFFREC, SQLCA, FFBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "164"; /* MODULE IDENTIFICATION*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE S2 DFCAST.VRLMTH01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFBREC.FFBKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0G164

// obtain next work sheet nbr
Function FG0G165()
   /* ------------------------------------------------------------*/
   /* obtain next work sheet number dfcast.vffctl01*/
   /* ------------------------------------------------------------*/

  set FF1REC empty; /* Clear row storage area*/

  FF1REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FF1REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3660" ("U3", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "165"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VFFCTL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF1REC.FF1GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0G165

// replicate higher level wrk sht
Function FG0G166()
   /* ------------------------------------------------------------*/
   /* replicate higher level work sheets using xsffs60*/
   /* ------------------------------------------------------------*/
  set FFVREC empty;

  FFVREC.FFVLEVEL = 2;
  FFVREC.FFEWSNBR = FFWREC.FFEWSNBR; /* old wrk sheet nbr*/
  FFVREC.FF1WSNBR = FF1REC.FF1WSNBR; /* new wrk sheet nbr*/
  FFVREC.XPLCD = FFWREC.XPLCD; /* product line code*/
  FFVREC.XXXUSRID = COMMAREA.CAUSERID; /* Userid*/
  FFVREC.ZZZSDT = XX0XW01.XX0XWDAT; /* current date*/
  FFVREC.ZZZSTM = XX0XW01.XX0XWTIM; /* current time*/
  TA1REC.TA1PGMNM = "FG0G166";

  XSFFS60();


end // end FG0G166

// Update dfcast.vwdgrp01 row
Function FG0G167()
   /* ------------------------------------------------------------*/
   /* update dfcast.vwdgrp01*/
   /* ------------------------------------------------------------*/

  FFEREC.XXXUSRID = COMMAREA.CAUSERID;
  FFEREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFEREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO3850" ("U ", SQLCA, FFEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FG0GW00.FG0GWSWR = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "167"; /* Module identification*/
      FFWREC.XXXMSGNO = 20; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "167"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE DFCAST.VWDGRP01 TABLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWDGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFEREC.FFEKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0G167

// upd dfcast.vwline01 row
Function FG0G168()
   /* ------------------------------------------------------------*/
   /* upd dfcast.vwline01 table row*/
   /* ------------------------------------------------------------*/

  FFGREC.FFEFCTGT = FG0GW01.FG0GWULF;
  FFGREC.FF6SLFCT = FG0GW02.FG0GWTUF;
  FFGREC.FF5BGFCT = FG0GW01.FG0GWUFB;
  FFGREC.FF5COFCT = FG0GW01.FG0GWUFC;
  FFGREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFGREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3890" ("U ", SQLCA, FFGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FG0GW00.FG0GWSWR = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "168"; /* Module identification*/
      FFWREC.XXXMSGNO = 20; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "168"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DFCAST.VWLINE01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFGREC.FFGKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0G168

// add dfcast.vwltyp01 row
Function FG0G169()
   /* ------------------------------------------------------------*/
   /* add dfcast.vwltyp01 table row*/
   /* ------------------------------------------------------------*/
  set FFIREC empty;

  FFIREC.FFEWSNBR = FFWREC.FFEWSNBR;
  FFIREC.XPLCD = FFWREC.XPLCD;
  FFIREC.YPGCD = FG0GW01.YPGCD[FG0GWIDX];
  FFIREC.FF6SLFCT = FG0GW01.FG0GWUFQ[FG0GWIDX];
  FFIREC.FFEFCTGT = FG0GW01.FG0GWUFQ[FG0GWIDX];
  FFIREC.FFGYRIND = FG0GW01.FG0GWYOP;
  FFIREC.FFGSDIND = FG0GW01.FG0GWHOP;
  FFIREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFIREC.ZZZSTM = XX0XW01.XX0XWTIM;
  FFIREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFIREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3910" ("A ", SQLCA, FFIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "169"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VWLTYP01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFIREC.FFIKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0G169

// Inquire/maintain a table row
Function FG0G200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FG0G210(); /* Format and display the map*/

  FG0G220(); /* Check attention identifier*/

  FG0G230(); /* Reset fields to normal intensity*/

  FG0G240(); /* Verify the entered data*/

  FG0G250(); /* Process valid input request*/

end // end FG0G200

// Format and converse the map
Function FG0G210()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* if no errors format map*/

    if (FG0GW03.FG0GWSWF == "Y")
      FG0G211(); /* Format the data on the map*/
    end

  else
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* load message number*/

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FG0GM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FG0GM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG0GM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* error message number*/
    FG0GM002.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    set FG0GM002 alarm; /* Indicate sound alarm*/
  end

  converse FG0GM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0;

  COMMAREA.CATOAP = FG0GM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG0GM002.CAITEM; /* Application data*/


end // end FG0G210

// Format the display data
Function FG0G211()
   /* ------------------------------------------------------------*/
   /* Init map*/
   /* ------------------------------------------------------------*/

  set FG0GM002 initial;

  FG0GW03.FG0GWSWF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* Format FG0Gm002 using data from fg0gm002*/
   /* ------------------------------------------------------------*/

  FG0GW00.FG0GWWDT = FFWREC.FFABEGMO; /* w/s date field*/
  FG0GM002.FG0GMBRG = FG0GW00.FG0GWWYM; /* begin month range*/
  FG0GW00.FG0GWWDT = FFWREC.FFAENDMO; /* w/s date field*/
  FG0GM002.FG0GMERG = FG0GW00.FG0GWWYM; /* end month range*/

  FG0GM002.FG0GMYOP = FG0GW03.FG0GWYO1; /* year option*/
  FG0GM002.FG0GMHOP = FG0GW03.FG0GWHO1; /* history option*/

   /* ------------------------------------------------------------*/
   /* Load map using FG0Gw01 work record*/
   /* ------------------------------------------------------------*/

  FG0GM002.FG0GMPBR = FG0GW01.FG0GWPBR[FG0GWYO1]; /* prior beg range yymm*/
  FG0GM002.FG0GMPER = FG0GW01.FG0GWPER[FG0GWYO1]; /* prior end range yymm*/
  FG0GM002.FG0GMYDS = FG0GW00.FG0GWYDS[FG0GWYO1]; /* prior year desc*/

  set FG0GM002.FG0GMPR1 skip;
  set FG0GM002.FG0GMPBR skip;
  set FG0GM002.FG0GMDSH skip;
  set FG0GM002.FG0GMPER skip;
  set FG0GM002.FG0GMPR2 skip;
  set FG0GM002.FG0GMYDS skip;

   /* ------------------------------------------------------------*/
   /* load historical sales / demand product type groups*/
   /* ------------------------------------------------------------*/

  FG0GM002.FG0GMSLD = FG0GW00.XPLSDESC;
  FG0GM002.FG0GMDLD = FG0GW00.XPLSDESC;

  FG0GW00.FG0GWIDX = 1;
  while (FG0GW00.FG0GWIDX <= FG0GW01.FG0GWNLD)

    FG0GM002.FG0GMHSD[FG0GWIDX] = FG0GW01.YPGABRV[FG0GWIDX];
    FG0GM002.FG0GMHDD[FG0GWIDX] = FG0GW01.YPGABRV[FG0GWIDX];
    if (FG0GW03.FG0GWYO1 == 1)
      FG0GM002.FG0GMHSQ[FG0GWIDX] = FG0GW01.FG0GWHQ1[FG0GWIDX];
      FG0GM002.FG0GMHSP[FG0GWIDX] = FG0GW01.FG0GWHP1[FG0GWIDX];
      FG0GM002.FG0GMHDQ[FG0GWIDX] = FG0GW01.FG0GWDQ1[FG0GWIDX];
      FG0GM002.FG0GMHDP[FG0GWIDX] = FG0GW01.FG0GWDP1[FG0GWIDX];
    end
    if (FG0GW03.FG0GWYO1 == 2)
      FG0GM002.FG0GMHSQ[FG0GWIDX] = FG0GW01.FG0GWHQ2[FG0GWIDX];
      FG0GM002.FG0GMHSP[FG0GWIDX] = FG0GW01.FG0GWHP2[FG0GWIDX];
      FG0GM002.FG0GMHDQ[FG0GWIDX] = FG0GW01.FG0GWDQ2[FG0GWIDX];
      FG0GM002.FG0GMHDP[FG0GWIDX] = FG0GW01.FG0GWDP2[FG0GWIDX];
    end
    if (FG0GW03.FG0GWYO1 == 3)
      FG0GM002.FG0GMHSQ[FG0GWIDX] = FG0GW01.FG0GWHQ3[FG0GWIDX];
      FG0GM002.FG0GMHSP[FG0GWIDX] = FG0GW01.FG0GWHP3[FG0GWIDX];
      FG0GM002.FG0GMHDQ[FG0GWIDX] = FG0GW01.FG0GWDQ3[FG0GWIDX];
      FG0GM002.FG0GMHDP[FG0GWIDX] = FG0GW01.FG0GWDP3[FG0GWIDX];
    end

    FG0GW00.FG0GWIDX = FG0GW00.FG0GWIDX + 1; /* increment load index*/

  end

   /* ------------------------------------------------------------*/
   /* Load historical sale/demand product type group subtotals*/
   /* ------------------------------------------------------------*/

  FG0GM002.FG0GMHSD[FG0GWIDX] = "SUBTOT";
  FG0GM002.FG0GMHSQ[FG0GWIDX] = FG0GW02.FG0GWHSQ[FG0GWYO1];
  FG0GM002.FG0GMHSP[FG0GWIDX] = FG0GW02.FG0GWHSP[FG0GWYO1];

  FG0GM002.FG0GMHDD[FG0GWIDX] = "SUBTOT";
  FG0GM002.FG0GMHDQ[FG0GWIDX] = FG0GW02.FG0GWHDQ[FG0GWYO1];
  FG0GM002.FG0GMHDP[FG0GWIDX] = FG0GW02.FG0GWHDP[FG0GWYO1];

   /* ------------------------------------------------------------*/
   /* Load historical sales/demand b-grade qtys*/
   /* ------------------------------------------------------------*/

  FG0GW00.FG0GWIDX = FG0GW00.FG0GWIDX + 1;

  FG0GM002.FG0GMHSD[FG0GWIDX] = "B-GRADE ";
  FG0GM002.FG0GMHSQ[FG0GWIDX] = FG0GW01.FG0GWHSB[FG0GWYO1];
  FG0GM002.FG0GMHSP[FG0GWIDX] = FG0GW01.FG0GWSBP[FG0GWYO1];

  FG0GM002.FG0GMHDD[FG0GWIDX] = "B-GRADE ";
  FG0GM002.FG0GMHDQ[FG0GWIDX] = FG0GW01.FG0GWHDB[FG0GWYO1];
  FG0GM002.FG0GMHDP[FG0GWIDX] = FG0GW01.FG0GWDBP[FG0GWYO1];

   /* ------------------------------------------------------------*/
   /* Load historical sales/demand close out qtys*/
   /* ------------------------------------------------------------*/

  FG0GW00.FG0GWIDX = FG0GW00.FG0GWIDX + 1;

  FG0GM002.FG0GMHSD[FG0GWIDX] = "CLOSE OUT";
  FG0GM002.FG0GMHSQ[FG0GWIDX] = FG0GW01.FG0GWHSC[FG0GWYO1];
  FG0GM002.FG0GMHSP[FG0GWIDX] = FG0GW01.FG0GWSCP[FG0GWYO1];

  FG0GM002.FG0GMHDD[FG0GWIDX] = "CLOSE OUT";
  FG0GM002.FG0GMHDQ[FG0GWIDX] = FG0GW01.FG0GWHDC[FG0GWYO1];
  FG0GM002.FG0GMHDP[FG0GWIDX] = FG0GW01.FG0GWDCP[FG0GWYO1];

   /* ------------------------------------------------------------*/
   /* Load forecast historical sales/demand totals*/
   /* ------------------------------------------------------------*/

  FG0GW00.FG0GWIDX = FG0GW00.FG0GWIDX + 1;

  FG0GM002.FG0GMHSD[FG0GWIDX] = "TOTAL ";
  FG0GM002.FG0GMHSQ[FG0GWIDX] = FG0GW02.FG0GWTSQ[FG0GWYO1];
  FG0GM002.FG0GMHSP[FG0GWIDX] = 100;

  FG0GM002.FG0GMHDD[FG0GWIDX] = "TOTAL ";
  FG0GM002.FG0GMHDQ[FG0GWIDX] = FG0GW02.FG0GWTDQ[FG0GWYO1];
  FG0GM002.FG0GMHDP[FG0GWIDX] = 100;


end // end FG0G211

// Check attention identifier
Function FG0G220()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* refresh screen*/

    FG0GW03.FG0GWSWF = "Y"; /* format screem m002*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FG0GM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (FG0GM002.CATOAP == "FG0P")
        converseLib.validationFailed(189);
        FFWREC.XXXMODID = "220";
        set FG0GM002.CATOAP cursor, bold;
      else

        XSFFS01(); /* Exit to another application*/

        FG0GW03.FG0GWSWF = "Y"; /* format screem m002*/

        set FG0GM002.CATOAP cursor, bold; /* Highlight*/

      end
    else

      FFWREC.XXXMODID = "220"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG0GM002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FG0A"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    FG0GW03.FG0GWSWF = "Y"; /* format screem m002*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf14  /* pf14 was not pressed*/
   && converseVar.eventKey not pf15  /* pf15 was not pressed*/
  )                                 
    FFWREC.XXXMODID = "220"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FG0G220

// Reset highlighted fields
Function FG0G230()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FG0GM002.FG0GMYOP initialAttributes; /* year option*/
  set FG0GM002.FG0GMHOP initialAttributes; /* history option*/

  set FG0GM002.CATOAP initialAttributes;
  set FG0GM002.CAITEM initialAttributes;

end // end FG0G230

// Verify the entered data
Function FG0G240()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "240"; /* Module identification*/
    set FG0GM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* if request for same opt(pf14) or request for chg opt(pf15)*/
   /* or request for print opt(pf19) check modifiable fields*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf19)

    if (FG0GM002.FG0GMHOP != FG0GW03.FG0GWHO1)
      set FG0GM002.FG0GMHOP cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "240";
    end

    if (FG0GM002.FG0GMYOP != FG0GW03.FG0GWYO1)
      set FG0GM002.FG0GMYOP cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "240";
    end

  end

   /* ------------------------------------------------------------*/
   /* validate entry fields, and key data changes*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)

    /* -------------------------------*/
     /* validate history option field*/
    /* -------------------------------*/

    if (FG0GM002.FG0GMHOP != FG0GW03.FG0GWHO1)
      if (FG0GM002.FG0GMHOP != "S"
       && FG0GM002.FG0GMHOP != "D")
        converseLib.validationFailed(10);
        FFWREC.XXXMODID = "240";
        set FG0GM002.FG0GMHOP cursor, bold;
      end
    end

    /* -------------------------------*/
     /* validate year option field*/
    /* -------------------------------*/

    if (FG0GM002.FG0GMYOP != FG0GW03.FG0GWYO1)
      if (FG0GM002.FG0GMYOP != 1
       && FG0GM002.FG0GMYOP != 2
       && FG0GM002.FG0GMYOP != 3)
        converseLib.validationFailed(10);
        FFWREC.XXXMODID = "240";
        set FG0GM002.FG0GMYOP cursor, bold;
      end
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end


end // end FG0G240

// Process valid input request
Function FG0G250()

  FG0GW03.FG0GWSWF = "Y"; /* format map 002*/

   /* ------------------------------------------------------------*/
   /* pf14(same opt) has been requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* same option*/
    FG0GW00.FG0GWSWD = "1"; /* request fg0gm001 display*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* pf15(chng opt) has been requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* same option*/
    FG0GW01.FG0GWYOP = FG0GM002.FG0GMYOP;
    FG0GW01.FG0GWHOP = FG0GM002.FG0GMHOP;
    FG0GW00.FG0GWSWD = "1"; /* request fg0gm001 display*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* save modifiable fields*/
   /* ------------------------------------------------------------*/

  FG0GW03.FG0GWYO1 = FG0GM002.FG0GMYOP;
  FG0GW03.FG0GWHO1 = FG0GM002.FG0GMHOP;


end // end FG0G250

// select 'ss' dfcast.vmltyp01
Function FG0GS01()
   /* ------------------------------------------------------------*/
   /* Select sum on dfcast.vmltyp01 table.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* load fffrec record*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "SS"; /* function code*/

   /* ------------------------------------------------------------*/
   /* load ff6rec record - dfcast.vmltyp01*/
   /* ------------------------------------------------------------*/

  set FF6REC empty; /* Clear row storage area*/

  FF6REC.XPLCD = FFWREC.XPLCD; /* product line code*/
  FF6REC.YPGCD = FG0GW01.YPGCD[FG0GWIDX]; /* product type group*/

   /* ------------------------------------------------------------*/
   /* select sum dfcast.vmltyp01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3750" (FFFREC, SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* zero values returned*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET DFCAST.VMLTYP01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF6REC.FF6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0GS01

// Fetch dfhist.vfhlin01 rec
Function FG0GS02()
   /* ------------------------------------------------------------*/
   /* Obtain carryover quantities from dfhist.vfhlin01*/
   /* ------------------------------------------------------------*/

  FH4REC.XPLCD = FFWREC.XPLCD; /* product line code*/
  FH4REC.FH1PNAC = "*"; /* nacct fl*/
  TA1PGMNM = "FG0GS02"; /* calling process*/

   /* --------------------------------------------------*/
   /* select sum on dfhist.vfhlin01 table*/
   /* --------------------------------------------------*/

  XSFFS51();


end // end FG0GS02

// Fetch actl nd mo sls
Function FG0GS03()
   /* ------------------------------------------------------------*/
   /* Obtain historical sales quantities from dfhist.vlnshp01*/
   /* ------------------------------------------------------------*/

  FHAREC.XPLCD = FFWREC.XPLCD; /* product line code*/
  FHAREC.YSMXOT = "*"; /* sum code*/

  TA1REC.TA1PGMNM = "FG0GS03"; /* calling process*/

  FFFREC.FFFFUNCD = "SN"; /* Function code*/

  XSFFS-FF5550();


end // end FG0GS03

// select 'ss' dfcast.vmline01
Function FG0GS07()
   /* ------------------------------------------------------------*/
   /* Select sum on dfcast.vmline01 table.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* load fffrec record*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "SS"; /* function code*/

   /* ------------------------------------------------------------*/
   /* load ff5rec record - dfcast.vmline01*/
   /* ------------------------------------------------------------*/

  set FF5REC empty; /* Clear row storage area*/

  FF5REC.XPLCD = FFWREC.XPLCD; /* product line code*/

   /* ------------------------------------------------------------*/
   /* select sum dfcast.vmline01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3710" (FFFREC, SQLCA, FF5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or zero total, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* 0 total returned*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S07"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUM TABLE DFCAST.VMLINE01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF5REC.FF5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0GS07

// check modifiable fields
Function FG0GS08()
   /* -----------------------------------------------------*/
   /* Verify close out modifiable fields*/
   /* -----------------------------------------------------*/

  if (FG0GM001.FG0GMCCP != 0)
    set FG0GM001.FG0GMCCP cursor, bold;
    converseLib.validationFailed(111);
    FFWREC.XXXMODID = "S08";
  end
  if (FG0GM001.FG0GMCHP != FG0GW01.FG0GWCHS)
    set FG0GM001.FG0GMCHP cursor, bold;
    converseLib.validationFailed(111);
    FFWREC.XXXMODID = "S08";
  end
  if (FG0GM001.FG0GMFCP != FG0GW01.FG0GWFCP)
    set FG0GM001.FG0GMFCP cursor, bold;
    converseLib.validationFailed(111);
    FFWREC.XXXMODID = "S08";
  end
  if (FG0GM001.FG0GMFCQ != FG0GW01.FG0GWFCQ)
    set FG0GM001.FG0GMFCQ cursor, bold;
    converseLib.validationFailed(111);
    FFWREC.XXXMODID = "S08";
  end

   /* -----------------------------------------------------*/
   /* verify b-grade modifiable fields*/
   /* -----------------------------------------------------*/

  if (FG0GM001.FG0GMBCP != 0)
    set FG0GM001.FG0GMBCP cursor, bold;
    converseLib.validationFailed(111);
    FFWREC.XXXMODID = "S08";
  end
  if (FG0GM001.FG0GMBHP != FG0GW01.FG0GWBHS)
    set FG0GM001.FG0GMBHP cursor, bold;
    converseLib.validationFailed(111);
    FFWREC.XXXMODID = "S08";
  end
  if (FG0GM001.FG0GMFBP != FG0GW01.FG0GWFBP)
    set FG0GM001.FG0GMFBP cursor, bold;
    converseLib.validationFailed(111);
    FFWREC.XXXMODID = "S08";
  end
  if (FG0GM001.FG0GMFBQ != FG0GW01.FG0GWFBQ)
    set FG0GM001.FG0GMFBQ cursor, bold;
    converseLib.validationFailed(111);
    FFWREC.XXXMODID = "S08";
  end

   /* -----------------------------------------------------*/
   /* Verify product type group modifiable fields*/
   /* -----------------------------------------------------*/

  FG0GW00.FG0GWIDX = FG0GW01.FG0GWNLD; /* nbr of lines loaded*/
  while (FG0GW00.FG0GWIDX >= 1)

    if (FG0GM001.FG0GMCPT[FG0GWIDX] != 0)
      set FG0GM001.FG0GMCPT[FG0GWIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S08";
    end
    if (FG0GM001.FG0GMHPT[FG0GWIDX] != FG0GW01.FG0GWHPS[FG0GWIDX])
      set FG0GM001.FG0GMHPT[FG0GWIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S08";
    end
    if (FG0GM001.FG0GMFPT[FG0GWIDX] != FG0GW01.FG0GWFPT[FG0GWIDX])
      set FG0GM001.FG0GMFPT[FG0GWIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S08";
    end
    if (FG0GM001.FG0GMFQT[FG0GWIDX] != FG0GW01.FG0GWFQT[FG0GWIDX])
      set FG0GM001.FG0GMFQT[FG0GWIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S08";
    end
    if (FG0GM001.FG0GMSEL[FG0GWIDX] != " "
     && converseVar.eventKey not enter
     && converseVar.eventKey not pf16)
      set FG0GM001.FG0GMSEL[FG0GWIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S08";
    end

    FG0GW00.FG0GWIDX = FG0GW00.FG0GWIDX - 1; /* decrement table index*/

  end

   /* -----------------------------------------------------*/
   /* Verify header modifiable fields*/
   /* -----------------------------------------------------*/

  if (FG0GM001.FG0GMCTQ != " ")
    set FG0GM001.FG0GMCTQ cursor, bold;
    converseLib.validationFailed(111);
    FFWREC.XXXMODID = "S08";
  end

  if (FG0GM001.FG0GMPCT != 0)
    set FG0GM001.FG0GMPCT cursor, bold;
    converseLib.validationFailed(111);
    FFWREC.XXXMODID = "S08";
  end

  if (converseVar.eventKey not pf18
   && converseVar.eventKey not enter)

    if (FG0GM001.FG0GMHOP != FG0GW01.FG0GWHOP)
      set FG0GM001.FG0GMHOP cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S08";
    end

    if (FG0GM001.FG0GMYOP != FG0GW01.FG0GWYOP)
      set FG0GM001.FG0GMYOP cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S08";
    end

    if (FG0GM001.FG0GMLFT != FG0GW01.FG0GWLFT)
      set FG0GM001.FG0GMLFT cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S08";
    end
  end

  if (converseVar.eventKey not enter)

    FG0GW00.FG0GWWED = FFWREC.FFAENDMO;
    if (FG0GM001.FG0GMERG != FG0GW00.FG0GWEYM)
      set FG0GM001.FG0GMERG cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S08";
    end

    FG0GW00.FG0GWWBD = FFWREC.FFABEGMO;
    if (FG0GM001.FG0GMBRG != FG0GW00.FG0GWBYM)
      set FG0GM001.FG0GMBRG cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S08";
    end
  end


end // end FG0GS08

// select dfcast.vrline01
Function FG0GS09()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vrline01 table.*/
   /* ------------------------------------------------------------*/

  set FFAREC empty; /* Clear row storage area*/

  FFAREC.FFABEGMO = FFWREC.FFABEGMO; /* being dt range*/
  FFAREC.FFAENDMO = FFWREC.FFAENDMO; /* end dt range*/
  FFAREC.XPLCD = FFWREC.XPLCD; /* product line code*/

  try
    call "IO3780" ("S ", SQLCA, FFAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S09"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VRLINE01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFAREC.FFAKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0GS09

// purge excess fcst wrk shts
Function FG0GS10()
   /* ------------------------------------------------------------*/
   /* purge excess forecast work sheets using routine xsffs60*/
   /* ------------------------------------------------------------*/

  FFEREC.YSMXDV = "10"; /* division code*/
  FFEREC.XCTCD = "USA"; /* country code*/
  FFEREC.FFABEGMO = FFWREC.FFABEGMO; /* begin range*/
  FFEREC.FFAENDMO = FFWREC.FFAENDMO; /* end   range*/
  TA1REC.TA1PGMNM = "FG0GS10"; /* process name*/

   /* ------------------------------------------------------------*/
   /* purge !!!!!*/
   /* ------------------------------------------------------------*/

  XSFFS61();


end // end FG0GS10

// select dfcast.vwdgrp01
Function FG0GS11()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vwdgrp01 table row*/
   /* ------------------------------------------------------------*/

  set FFEREC empty; /* Clear row storage area*/

  FFEREC.FFEWSNBR = FFWREC.FFEWSNBR;

  try
    call "IO3850" ("S ", SQLCA, FFEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWDGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFEREC.FFEKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0GS11

// select dfcast.vwline01
Function FG0GS12()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vwline01 table row*/
   /* ------------------------------------------------------------*/

  set FFGREC empty; /* Clear row storage area*/

  FFGREC.FFEWSNBR = FFWREC.FFEWSNBR; /* wrk sheet nbr*/
  FFGREC.XPLCD = FFWREC.XPLCD; /* product line code*/

  try
    call "IO3890" ("S ", SQLCA, FFGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S12"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VWLINE01 TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFGREC.FFGKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0GS12

// read dfcast.vwlmth01 row
Function FG0GS60()
   /* ------------------------------------------------------------*/
   /* add dfcast.vwlmth01 table row*/
   /* ------------------------------------------------------------*/
  set FFHREC empty;

  FFHREC.FFEWSNBR = FFWREC.FFEWSNBR;
  FFHREC.XPLCD = FFWREC.XPLCD;
  FFHREC.FF4FCTMO = FFBREC.FF4FCTMO;

  try
    call "IO3900" ("S ", SQLCA, FFHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* duplicate*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S60"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VWLMTH01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFHREC.FFHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0GS60

// update dfcast.vwlmth01 row
Function FG0GS61()
   /* ------------------------------------------------------------*/
   /* add dfcast.vwlmth01 table row*/
   /* ------------------------------------------------------------*/

  FFHREC.FFEWSNBR = FFWREC.FFEWSNBR;
  FFHREC.XPLCD = FFWREC.XPLCD;
  FFHREC.FF4FCTMO = FFBREC.FF4FCTMO;
  FFHREC.FF5BGFCT = FFBREC.FFBBCPCT * FG0GW01.FG0GWUFB / 100;
  FFHREC.FF5COFCT = FFBREC.FFBBCPCT * FG0GW01.FG0GWUFC / 100;
  FFHREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFHREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3900" ("U ", SQLCA, FFHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S61"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VWLMTH01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFHREC.FFHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0GS61

//*** RECORD=FG0GW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// 
// ML Dangelo- added thousands work field FG0GWTH1.  Increased
// size of FG0GWNM1 - 4.  FF1028, FF1029
// ----------------------------
// ***********************
Record FG0GW00 type basicRecord
  10 YPGCD YPGCD [2] ; 
  10 FG0GWDCF FG0GWDCF ; 
  10 FG0GWBCF FG0GWBCF ; 
  10 FG0GWTFL FG0GWTFL ; 
  10 FG0GWSLC FG0GWSLC ; 
  10 FG0GWSLF FG0GWSLF ; 
  10 FG0GWERF FG0GWERF ; 
  10 FG0GW1ST FG0GW1ST ; 
  10 FG0GWFPF FG0GWFPF ; 
  10 FG0GWQTF FG0GWQTF ; 
  10 FG0GWREP FG0GWREP ; 
  10 FG0GWSWR FG0GWSWR ; 
  10 FG0GWSWF FG0GWSWF ; 
  10 FG0GWSWD FG0GWSWD ; 
  10 XPLSDESC XPLSDESC ; 
  10 FG0GWYDS FG0GWYDS [3] ; 
  10 FG0GWHDS FG0GWHDS [2] ; 
  10 FG0GWNM1 FG0GWNM1 ; 
  10 FG0GWNM2 FG0GWNM2 ; 
  10 FG0GWNM3 FG0GWNM3 ; 
  10 FG0GWNM4 FG0GWNM4 ; 
  10 FG0GWTH1 FG0GWTH1 ; 
  10 FG0GWPC1 FG0GWPC1 ; 
  10 FG0GWSUT FG0GWSUT ; 
  10 FG0GWSTG FG0GWSTG ; 
  10 FG0GWSHS FG0GWSHS ; 
  10 FG0GWSHD FG0GWSHD ; 
  10 FG0GWUMQ FG0GWUMQ ; 
  10 FG0GWSSC FG0GWSSC ; 
  10 FG0GWSSB FG0GWSSB ; 
  10 FG0GWSDC FG0GWSDC ; 
  10 FG0GWSDB FG0GWSDB ; 
  10 FG0GWUFQ FG0GWUFQ ; 
  10 FG0GWUHS FG0GWUHS ; 
  10 FG0GWHSQ FG0GWHSQ ; 
  10 FG0GWUHD FG0GWUHD ; 
  10 FG0GWHDQ FG0GWHDQ ; 
  10 FG0GWUSB FG0GWUSB ; 
  10 FG0GWHSB FG0GWHSB ; 
  10 FG0GWUSC FG0GWUSC ; 
  10 FG0GWHSC FG0GWHSC ; 
  10 FG0GWUDB FG0GWUDB ; 
  10 FG0GWHDB FG0GWHDB ; 
  10 FG0GWUDC FG0GWUDC ; 
  10 FG0GWHDC FG0GWHDC ; 
  10 FG0GWIDX FG0GWIDX ; 
  10 FG0GWPIX FG0GWPIX ; 
  10 FG0GWYIX FG0GWYIX ; 
  10 FG0GWCWD FG0GWCWD ; 
    15 FG0GWCCK FG0GWCCK ; 
      20 FG0GWCDC FG0GWCDC ; 
      20 FG0GWCYY FG0GWCYY ; 
      20 FG0GWCMM FG0GWCMM ; 
    15 FG0GWCDD FG0GWCDD ; 
  10 FG0GWWDT FG0GWWDT ; 
    15 * num(3) ; 
    15 FG0GWWCC FG0GWWCC ; 
    15 FG0GWWYM FG0GWWYM ; 
      20 FG0GWWYY FG0GWWYY ; 
      20 FG0GWWMM FG0GWWMM ; 
  10 FG0GW-CCYYMMDD FG0GW-CCYYMMDD ; 
    15 * num(1) ; 
    15 FG0GW-CCYYMM FG0GW-CCYYMM ; 
      20 FG0GW-CCYY FG0GW-CCYY ; 
      20 FG0GW-MM FG0GW-MM ; 
    15 * num(2) ; 
  10 FG0GWWBD FG0GWWBD ; 
    15 * num(3) ; 
    15 FG0GWBCC FG0GWBCC ; 
    15 FG0GWBYM FG0GWBYM ; 
      20 FG0GWBYY FG0GWBYY ; 
      20 FG0GWBMM FG0GWBMM ; 
  10 FG0GWWED FG0GWWED ; 
    15 * num(3) ; 
    15 FG0GWECC FG0GWECC ; 
    15 FG0GWEYM FG0GWEYM ; 
      20 FG0GWEYY FG0GWEYY ; 
      20 FG0GWEMM FG0GWEMM ; 
  10 FG0GW-CURR-MO FG0GW-CURR-MO ; 
  10 FG0GW-CURR-MO-MINUS1 FG0GW-CURR-MO-MINUS1 ; 
  10 FG0GW-CURR-MO-MINUS2 FG0GW-CURR-MO-MINUS2 ; 
  10 FG0GW-CURR-MO-MINUS3 FG0GW-CURR-MO-MINUS3 ; 
  10 FG0GW-CURR-MO-MINUS4 FG0GW-CURR-MO-MINUS4 ; 
  10 FG0GW-HOLD-BEG-MO FG0GW-HOLD-BEG-MO ; 
  10 FG0GW-HOLD-END-MO FG0GW-HOLD-END-MO ; 
end // end FG0GW00

//*** RECORD=FG0GW01 ****
// -----------------------------------
// map 001 detail display storage area
// -----------------------------------
// 
// 10/4/90 - ML D'Angelo added FG0GWHPS, an array to hold the
// history percentages as displayed on the screen.  Also added
// FG0GWBHS and FG0GWCHS for B-grade and close out history
// percentages as displayed on screen.
// ***********************
Record FG0GW01 type basicRecord
  5 FG0GWGP1 FG0GWGP1 ; 
    10 CACHGFL CACHGFL ; 
    10 FG0GWNLD FG0GWNLD ; 
    10 FG0GWSIX FG0GWSIX ; 
    10 FG0GWYOP FG0GWYOP ; 
    10 FG0GWHOP FG0GWHOP ; 
    10 FG0GWSUL FG0GWSUL ; 
    10 FG0GWULF FG0GWULF ; 
    10 FG0GWLFT FG0GWLFT ; 
    10 FG0GWUVQ FG0GWUVQ ; 
    10 FG0GWVQT FG0GWVQT ; 
    10 FG0GWVPT FG0GWVPT ; 
    10 FG0GWCDT FG0GWCDT ; 
      15 FG0GWMON FG0GWMON ; 
      15 FG0GWDAY FG0GWDAY ; 
      15 FG0GWYER FG0GWYER ; 
    10 FG0GWPBD FG0GWPBD [3] ; 
      15 * char(5) ; 
      15 FG0GWPBR FG0GWPBR ; 
    10 FG0GWPED FG0GWPED [3] ; 
      15 * char(5) ; 
      15 FG0GWPER FG0GWPER ; 
    10 YPGCD YPGCD [2] ; 
    10 YPGABRV YPGABRV [2] ; 
    10 FG0GWUMQ FG0GWUMQ [2] ; 
    10 FG0GWMQT FG0GWMQT [2] ; 
    10 FG0GWSQT FG0GWSQT [2] ; 
    10 FG0GWUFQ FG0GWUFQ [2] ; 
    10 FG0GWFQT FG0GWFQT [2] ; 
    10 FG0GWSPT FG0GWSPT [2] ; 
    10 FG0GWFPT FG0GWFPT [2] ; 
    10 FG0GWHPS FG0GWHPS [2] ; 
    10 FG0GWWKE FG0GWWKE [2] ; 
    10 FG0GWQUP FG0GWQUP [2] ; 
    10 FG0GWUH1 FG0GWUH1 [2] ; 
    10 FG0GWHQ1 FG0GWHQ1 [2] ; 
    10 FG0GWHP1 FG0GWHP1 [2] ; 
    10 FG0GWUH2 FG0GWUH2 [2] ; 
    10 FG0GWHQ2 FG0GWHQ2 [2] ; 
    10 FG0GWHP2 FG0GWHP2 [2] ; 
    10 FG0GWUH3 FG0GWUH3 [2] ; 
    10 FG0GWHQ3 FG0GWHQ3 [2] ; 
    10 FG0GWHP3 FG0GWHP3 [2] ; 
    10 FG0GWUD1 FG0GWUD1 [2] ; 
    10 FG0GWDQ1 FG0GWDQ1 [2] ; 
    10 FG0GWDP1 FG0GWDP1 [2] ; 
    10 FG0GWUD2 FG0GWUD2 [2] ; 
    10 FG0GWDQ2 FG0GWDQ2 [2] ; 
    10 FG0GWDP2 FG0GWDP2 [2] ; 
    10 FG0GWUD3 FG0GWUD3 [2] ; 
    10 FG0GWDQ3 FG0GWDQ3 [2] ; 
    10 FG0GWDP3 FG0GWDP3 [2] ; 
    10 * char(6) ; // this position avail for use
    10 FG0GWUMB FG0GWUMB ; 
    10 FG0GWMBQ FG0GWMBQ ; 
    10 FG0GWSBQ FG0GWSBQ ; 
    10 FG0GWUFB FG0GWUFB ; 
    10 FG0GWFBQ FG0GWFBQ ; 
    10 FG0GWSPB FG0GWSPB ; 
    10 FG0GWFBP FG0GWFBP ; 
    10 FG0GWBHS FG0GWBHS ; 
    10 FG0GWUSB FG0GWUSB [3] ; 
    10 FG0GWHSB FG0GWHSB [3] ; 
    10 FG0GWSBP FG0GWSBP [3] ; 
    10 FG0GWUDB FG0GWUDB [3] ; 
    10 FG0GWHDB FG0GWHDB [3] ; 
    10 FG0GWDBP FG0GWDBP [3] ; 
    10 * char(6) ; // this position avail for use
    10 FG0GWUMC FG0GWUMC ; 
    10 FG0GWMCQ FG0GWMCQ ; 
    10 FG0GWSCQ FG0GWSCQ ; 
    10 FG0GWUFC FG0GWUFC ; 
    10 FG0GWFCQ FG0GWFCQ ; 
    10 FG0GWSPC FG0GWSPC ; 
    10 FG0GWFCP FG0GWFCP ; 
    10 FG0GWCHS FG0GWCHS ; 
    10 FG0GWUSC FG0GWUSC [3] ; 
    10 FG0GWHSC FG0GWHSC [3] ; 
    10 FG0GWSCP FG0GWSCP [3] ; 
    10 FG0GWUDC FG0GWUDC [3] ; 
    10 FG0GWHDC FG0GWHDC [3] ; 
    10 FG0GWDCP FG0GWDCP [3] ; 
end // end FG0GW01

//*** RECORD=FG0GW02 ****
// -------------------------------------------
// map 001 subtotal/total display storage area
// -------------------------------------------
// ***********************
Record FG0GW02 type basicRecord
  5 FG0GWSGP FG0GWSGP ; 
    10 FG0GWUMQ FG0GWUMQ ; 
    10 FG0GWMQT FG0GWMQT ; 
    10 FG0GWUFQ FG0GWUFQ ; 
    10 FG0GWFQT FG0GWFQT ; 
    10 FG0GWFPT FG0GWFPT ; 
    10 FG0GWUHS FG0GWUHS [3] ; 
    10 FG0GWHSQ FG0GWHSQ [3] ; 
    10 FG0GWHSP FG0GWHSP [3] ; 
    10 FG0GWUHD FG0GWUHD [3] ; 
    10 FG0GWHDQ FG0GWHDQ [3] ; 
    10 FG0GWHDP FG0GWHDP [3] ; 
  5 FG0GWTGP FG0GWTGP ; 
    10 FG0GWTUM FG0GWTUM ; 
    10 FG0GWTMQ FG0GWTMQ ; 
    10 FG0GWTUF FG0GWTUF ; 
    10 FG0GWTFQ FG0GWTFQ ; 
    10 FG0GWTFP FG0GWTFP ; 
    10 FG0GWTUS FG0GWTUS [3] ; 
    10 FG0GWTSQ FG0GWTSQ [3] ; 
    10 FG0GWTSP FG0GWTSP [3] ; 
    10 FG0GWTUD FG0GWTUD [3] ; 
    10 FG0GWTDQ FG0GWTDQ [3] ; 
    10 FG0GWTDP FG0GWTDP [3] ; 
end // end FG0GW02

//*** RECORD=FG0GW03 ****
// -----------------------------
// map 002 display storage area
// -----------------------------
// ***********************
Record FG0GW03 type basicRecord
  5 FG0GWGP3 FG0GWGP3 ; 
    10 FG0GWSWF FG0GWSWF ; 
    10 FG0GWYO1 FG0GWYO1 ; 
    10 FG0GWHO1 FG0GWHO1 ; 
end // end FG0GW03

DataItem FG0GW-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0GW-CCYYMM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0GW-CCYYMMDD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date
DataItem FG0GW-CURR-MO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date minus 1 month
DataItem FG0GW-CURR-MO-MINUS1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date minus 2 months
DataItem FG0GW-CURR-MO-MINUS2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date minus 3 months
DataItem FG0GW-CURR-MO-MINUS3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date minus 4 months
DataItem FG0GW-CURR-MO-MINUS4 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// hold beginning date
DataItem FG0GW-HOLD-BEG-MO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// hold ending date
DataItem FG0GW-HOLD-END-MO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

DataItem FG0GW-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first time flag
DataItem FG0GW1ST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// begin century
DataItem FG0GWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bgrd/clo qty change flag
DataItem FG0GWBCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// b-grade history percent
DataItem FG0GWBHS bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range month
DataItem FG0GWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year and month
DataItem FG0GWBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range year
DataItem FG0GWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current century/year/month
DataItem FG0GWCCK num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current century
DataItem FG0GWCDC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current day
DataItem FG0GWCDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work sheet create date
DataItem FG0GWCDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save close out history percent
DataItem FG0GWCHS bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current month
DataItem FG0GWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work date
DataItem FG0GWCWD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current year
DataItem FG0GWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// create day
DataItem FG0GWDAY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// demand b-grd percent
DataItem FG0GWDBP bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data change flag
DataItem FG0GWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// demand clo percent
DataItem FG0GWDCP bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history demand percent yr1
DataItem FG0GWDP1 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history demand percent yr2
DataItem FG0GWDP2 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history demand percent yr3
DataItem FG0GWDP3 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history demand thousand yr1
DataItem FG0GWDQ1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history demand thousand yr2
DataItem FG0GWDQ2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history demand thousand yr3
DataItem FG0GWDQ3 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end century
DataItem FG0GWECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range month
DataItem FG0GWEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error flag
DataItem FG0GWERF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end year and month
DataItem FG0GWEYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range year
DataItem FG0GWEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// b-grade percent
DataItem FG0GWFBP bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst b-grades 1000
DataItem FG0GWFBQ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// close percent
DataItem FG0GWFCP bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst close out 1000
DataItem FG0GWFCQ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst percent flag
DataItem FG0GWFPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// type percent entry field
DataItem FG0GWFPT bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst sales qty 100
DataItem FG0GWFQT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fg0gw01 group level
DataItem FG0GWGP1 char(573)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fg0gw03 group level
DataItem FG0GWGP3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// demand b-grd qty thousand
DataItem FG0GWHDB char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// demand clo qty thousand
DataItem FG0GWHDC char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history demand percent
DataItem FG0GWHDP bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hist demand qty total 1000
DataItem FG0GWHDQ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// historical description
DataItem FG0GWHDS char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history option sales/demand
DataItem FG0GWHO1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history option sales/demand
DataItem FG0GWHOP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history sales percent yr1
DataItem FG0GWHP1 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales percent yr2
DataItem FG0GWHP2 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales percent yr3
DataItem FG0GWHP3 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved history percents
DataItem FG0GWHPS bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales qty thousand yr1
DataItem FG0GWHQ1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history sales qty thousand yr2
DataItem FG0GWHQ2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history sales qty thousand yr3
DataItem FG0GWHQ3 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sale b-grd qty thousand
DataItem FG0GWHSB char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sale clo qty thousand
DataItem FG0GWHSC char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history sale percent
DataItem FG0GWHSP bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sale 1000
DataItem FG0GWHSQ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index
DataItem FG0GWIDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// line fcst target 1000
DataItem FG0GWLFT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// mstr b-grade 1000
DataItem FG0GWMBQ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// mstr close out 1000
DataItem FG0GWMCQ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// create month
DataItem FG0GWMON num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mstr qty 1000
DataItem FG0GWMQT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nbr of lines loaded
DataItem FG0GWNLD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 1
DataItem FG0GWNM1 bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 2
DataItem FG0GWNM2 bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 3
DataItem FG0GWNM3 bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 4
DataItem FG0GWNM4 bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prior begin date
DataItem FG0GWPBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// prior begin yymm
DataItem FG0GWPBR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// percent work field1
DataItem FG0GWPC1 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prior end date
DataItem FG0GWPED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// prior end yymm
DataItem FG0GWPER char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// process index
DataItem FG0GWPIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// qty flag
DataItem FG0GWQTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// qty updated flag
DataItem FG0GWQUP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Replicate flag
DataItem FG0GWREP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sale b-grd percent
DataItem FG0GWSBP bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save b-grade qty
DataItem FG0GWSBQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sale clo percent
DataItem FG0GWSCP bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save close out qty
DataItem FG0GWSCQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subtotal history demand
DataItem FG0GWSDB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subtotal history sale
DataItem FG0GWSDC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subtotal group level
DataItem FG0GWSGP char(100)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// subtotal history demand
DataItem FG0GWSHD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subtotal history sale
DataItem FG0GWSHS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subtotal index
DataItem FG0GWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 's'election count field
DataItem FG0GWSLC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 's'election flag
DataItem FG0GWSLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save b-grade percent
DataItem FG0GWSPB bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save close percent
DataItem FG0GWSPC bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save type percent
DataItem FG0GWSPT bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save fcst sales qty
DataItem FG0GWSQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subtotal history demand
DataItem FG0GWSSB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subtotal history sale
DataItem FG0GWSSC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save char target
DataItem FG0GWSTG char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save line fcst target
DataItem FG0GWSUL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save unit target
DataItem FG0GWSUT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display map switch
DataItem FG0GWSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FG0GWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FG0GWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total history dmnd percent
DataItem FG0GWTDP bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total history dmnd qty 1000
DataItem FG0GWTDQ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// type grp data found flag
DataItem FG0GWTFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total fcst percent entry field
DataItem FG0GWTFP bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total fcst sales qty 100
DataItem FG0GWTFQ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total group level
DataItem FG0GWTGP char(100)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field thousands
DataItem FG0GWTH1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total mstr qty 1000
DataItem FG0GWTMQ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total history sale percent
DataItem FG0GWTSP bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total history sale 1000
DataItem FG0GWTSQ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total history dmnd qty units
DataItem FG0GWTUD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total fcst sales qty units
DataItem FG0GWTUF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total mstr qty units
DataItem FG0GWTUM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total history sales units
DataItem FG0GWTUS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history demand units yr1
DataItem FG0GWUD1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history demand units yr2
DataItem FG0GWUD2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history demand units yr3
DataItem FG0GWUD3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// demand b-grd qty units
DataItem FG0GWUDB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// demand clo qty units
DataItem FG0GWUDC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst b-grades units
DataItem FG0GWUFB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst close out units
DataItem FG0GWUFC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst sales qty total units
DataItem FG0GWUFQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales qty units yr1
DataItem FG0GWUH1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales qty units yr2
DataItem FG0GWUH2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales qty units yr3
DataItem FG0GWUH3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hist demand qty total units
DataItem FG0GWUHD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales units
DataItem FG0GWUHS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// line fcst target units
DataItem FG0GWULF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mstr b-grade units
DataItem FG0GWUMB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mstr close out units
DataItem FG0GWUMC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mstr qty units
DataItem FG0GWUMQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sale b-grd qty units
DataItem FG0GWUSB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sale clo qty units
DataItem FG0GWUSC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// variance qty units
DataItem FG0GWUVQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// variance percent
DataItem FG0GWVPT bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// variance qty thousands
DataItem FG0GWVQT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work begin date
DataItem FG0GWWBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work century
DataItem FG0GWWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date
DataItem FG0GWWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work begin date
DataItem FG0GWWED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// Worksheet exitst flag
DataItem FG0GWWKE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work month
DataItem FG0GWWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year and month
DataItem FG0GWWYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FG0GWWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year(s)  option description
DataItem FG0GWYDS char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// create year
DataItem FG0GWYER num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year index
DataItem FG0GWYIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year option
DataItem FG0GWYO1 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year option
DataItem FG0GWYOP num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

