package fg0f;

import corpcom1.CACHGFL;
import corpcom2.XPLREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFF001;
import corpcom4.XSFFS-FF5500;
import corpcom4.XSFFS-FF5550;
import corpcom4.XSFFS01;
import corpcom4.XSFFS10;
import corpcom4.XSFFS11;
import corpcom4.XSFFS35;
import corpcom4.XSFFS51;
import corpcom4.XSFFS61;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XPLTBL;
import corpx2.XPLCD;
import corpx2.XPLSDESC;
import ff.common.FF1REC;
import ff.common.FF2REC;
import ff.common.FF5REC;
import ff.common.FF6REC;
import ff.common.FFEREC;
import ff.common.FFFREC;
import ff.common.FFGREC;
import ff.common.FFWREC;
import ff.common.FFXREC;
import ff.common.FFZREC;
import fh.common.FH3REC;
import fh.common.FH4REC;
import fh.common.FHAREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=FG0F ****
// This application allows a user to create or inquire on a
// long range sales forecast by product line.  If this
// application is invoked from a menu, the user may only create
// a new forecast.  If this application is invoked by selecting
// from a list of existing forecasts, the user may inquire on
// the existing forecast and modify it to create a new forecast
// 
// There are two different screens that may be displayed.
// 
// The first screen displayed to the user shows the forecast
// identification and each product line in the forecast, along
// with the current forecast quantities compared to either the
// historical sales quantities or the historical demand
// quantities for the product line.  The user specified whether
// the comparison is to be against sales or demand and the
// number of years to be used for the comparison.  The current
// forecast quantities may be adjusted by the user either by
// quantity or by percentage.  The user may scroll forward or
// backward to view all the product lines in the forecast.
// The forecast may be saved for later viewing by pressing
// the appropriate attention key.  If a line is selected, that
// product line is passed to another application, FG0G, Long
// Range Forecast By Type, to display the forecast for the
// products types in the line.
// 
// The second screen is displayed when the appropriate
// attention key is pressed on the first screen.  It shows the
// forecast identification and each product line in the
// forecast, along with historical sales quantities comapred to
// the historical demand quantities.  The user may scroll
// forward and backward to view all the product lines.  The
// user may request the first screen be displayed by pressing
// the appropriate attention key.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from either of the screens.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          10/01/89  rgilli  New application.
//          06/25/90  JJUCH   Fixed the problem of missing
//                            historical demand qtys.
// FF1017   07/11/90  SFORD   Added PF19 - worksheet key
// FF1016   07/31/90  JJUCH   Disallowed to fcst current main
//                            buy month and all prior months.
// FF#134   08/21/90  SFORD   Set job completed msg flag = 'y'
// Fix      08/30/90  JJUCH   Fixed -911 clear FFWREC problem.
// FF1029   10/03/90  MDANG   Calculate history percent and
//                            display on map.
// FF1028   10/08/90  MDANG   fixed various bugs causing line
//                            percent total to not add to 100%
// FF382    03/12/93  KGRAHA  change to accomodate VWDGRP01
//                            table
// FF394    03/23/93  JJUCH   Change to send report to BUNDLE.
// FF396    04/12/93  JJUCH   Fixed the total pct problem of
//                            not adding to 100.
//          09/02/93  JJUCH   Convert to CSP V4.1 version.
// FH140    02/09/94  JJUCH   Change to get actual prop and
//                            authorized future seperately and
//                            add them together to get hist dmd
// FF-409   04/22/94 MWALKE   - Switch sales from businss month
//                              to need month.
//                            - Delete print function
// FF175    12/10/96  DSMITH  Changed the date range fill
//                            character to '0'.
// 
// *********************
Program FG0F type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF5REC FF5REC; // record
  FF6REC FF6REC; // record
  FFEREC FFEREC; // record
  FFFREC FFFREC; // record
  FFGREC FFGREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  FG0FW00 FG0FW00; // record
  FG0FW01 FG0FW01; // record
  FG0FW02 FG0FW02; // record
  FG0FW03 FG0FW03; // record
  FG0FW04 FG0FW04; // record
  FH3REC FH3REC; // record
  FH4REC FH4REC; // record
  FHAREC FHAREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPLTBL; // table
  use FG0FM.FG0FM001,  // forms
      FG0FM.FG0FM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FFFREC empty; /* Special function parameters*/
    set FG0FM001 initial; /* M001 input/output*/
    set FG0FM002 initial; /* M002 input/output*/
    set FG0FW00 empty; /* Working storage*/
    set FG0FW01 empty; /* M001 display storage*/
    set FG0FW02 empty; /* M001 temporary storage*/
    set FG0FW03 empty; /* M001 totals display storage*/
    set FG0FW04 empty; /* M002 temporary storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine work area*/
    set TA5REC empty; /* temp storage queue area*/
    set TA6REC empty; /* jcl submit work area*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    FG0FW00.XXXTSLEN = 1470; /* temp storage length*/
    ;
    FG0FW00.FG0FWSWR = "N"; /* Request for data switch*/
    FG0FW00.FG0FWSWF = "Y"; /* format screen data switch*/
    FG0FW00.FG0FWSWD = "1"; /* map switch*/
    ;
    FG0FW01.FG0FWYOP = 1; /* default value year option*/
    FG0FW01.FG0FWHOP = "S"; /* default value history option*/
    ;
    FG0FW00.FG0FWYDS[1] = "1 YEAR AGO"; /* year 1 desc*/
    FG0FW00.FG0FWYDS[2] = "2 YEAR AGO"; /* year 2 desc*/
    FG0FW00.FG0FWYDS[3] = "3 YEAR AGO"; /* year 3 desc*/
    ;
    FG0FW00.FG0FWHDS[1] = "HIST NEED MO SALES";
    FG0FW00.FG0FWHDS[2] = "HISTORICAL DEMAND ";
    ;
     /* ---------------------------------------------------*/
     /* Clear unused fields*/
     /* ---------------------------------------------------*/
    ;
    FFWREC.XPLCD = " "; /* Clear product line code*/
    FFWREC.XPLABRV = " "; /* Clear product line abrv*/
    FFWREC.YPGCD = " "; /* Clear type group code*/
    FFWREC.YPGABRV = " "; /* Clear type group abrv*/
    FFWREC.XPCCD = " "; /* Clear product category code*/
    FFWREC.XPCABRV = " "; /* Clear product category abrv*/
    FFWREC.SYBSTGNB = " "; /* Clear style group number*/
    FFWREC.SYBSTGNM = " "; /* Clear style group name*/
    FFWREC.SY1STNBR = " "; /* Clear style number*/
    FFWREC.SY2CLRID = " "; /* Clear color id*/
    FFWREC.XDMCD = " "; /* Clear dimension code*/
    FFWREC.SY1SSTNM = " "; /* Clear short style name*/
    FFWREC.SY2CLRAB = " "; /* Clear color abrv*/
    FFWREC.XDMABRV = " "; /* Clear dimension abrv*/
    FFWREC.ZRGCD = " "; /* Clear region code*/
    FFWREC.ZRGABRV = " "; /* Clear region abrv*/
    FFWREC.XCTCD = " "; /* Clear country code*/
    FFWREC.XCTABRV = " "; /* Clear country abrv*/
    ;
     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.FFABEGMO != 0
     && FFWREC.FFAENDMO != 0)
      FG0FW00.FG0FWSWR = "Y"; /* set data request flag*/
    end
    ;
    if (FFWREC.FFEWSNBR != 0)
      FG0FW00.FG0FWSWR = "Y"; /* set data request flag*/
      FG0FW00.FG0FWFCF = "Y"; /* work sheet number passed*/
    end
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0F001; /* Converse the main process*/
    ;
    FG0F001: FG0F001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0F001; /* Converse the main process*/
    ;
  end // end main
end // end FG0F

// Fetch ivc cutoff dt vffctl01
Function FG0F-1121()
   /* ------------------------------------------------------------*/
   /* Obtain invoice cutoff date from dfcast.vffctl01.*/
   /* ------------------------------------------------------------*/
  ;
  set FF1REC empty; /* Clear row storage area*/
  ;
  FF1REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FF1REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "112"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VFFCTL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF1REC.FF1GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0F-1121

// Calc curr mo and caov dates
Function FG0F-1122()
   /* ------------------------------------------------------------*/
   /* Determine current month.*/
   /* ------------------------------------------------------------*/
  ;
  if (FF1REC.FF1IVCDT != 0) /* ===> Invoice cutoff date*/
    FG0FW00.FG0FW-CCYYMMDD = FF1REC.FF1IVCDT;
    ;
    if (XX0XW01.XX0XWDAT > FF1REC.FF1IVCDT) /* ===> curr >  ivc date*/
      FG0FW00.FG0FW-CURR-MO = FG0FW00.FG0FW-CCYYMM;
    else
      ;
      if (FG0FW00.FG0FW-MM == 1)
        FG0FW00.FG0FW-MM = 12;
        ;
        FG0FW00.FG0FW-CCYY = FG0FW00.FG0FW-CCYY - 1;
        FG0FW00.FG0FW-CURR-MO = FG0FW00.FG0FW-CCYYMM;
        ;
      else
        FG0FW00.FG0FW-MM = FG0FW00.FG0FW-MM - 1;
        FG0FW00.FG0FW-CURR-MO = FG0FW00.FG0FW-CCYYMM;
      end
      ;
    end
  else
    FG0FW00.FG0FW-CURR-MO = 0;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Calculate current month minus 1 month.*/
   /* Calculate current month minus 2 months.*/
   /* Calculate current month minus 3 months.*/
   /* Calculate current month minus 4 months.*/
   /* ------------------------------------------------------------*/
  ;
  FG0FW00.FG0FWWDT = FG0FW00.FG0FW-CURR-MO; /* work date*/
  if (FG0FW00.FG0FWWMM == 1)
    FG0FW00.FG0FWWMM = 12;
    if (FG0FW00.FG0FWWYY == 00)
      FG0FW00.FG0FWWYY = 99;
      FG0FW00.FG0FWWCC = FG0FW00.FG0FWWCC - 1;
    else
      FG0FW00.FG0FWWYY = FG0FW00.FG0FWWYY - 1;
    end
  else
    FG0FW00.FG0FWWMM = FG0FW00.FG0FWWMM - 1;
  end
  ;
  FG0FW00.FG0FW-CURR-MO-MINUS1 = FG0FW00.FG0FWWDT;
  ;
  ;
  if (FG0FW00.FG0FWWMM == 1)
    FG0FW00.FG0FWWMM = 12;
    if (FG0FW00.FG0FWWYY == 00)
      FG0FW00.FG0FWWYY = 99;
      FG0FW00.FG0FWWCC = FG0FW00.FG0FWWCC - 1;
    else
      FG0FW00.FG0FWWYY = FG0FW00.FG0FWWYY - 1;
    end
  else
    FG0FW00.FG0FWWMM = FG0FW00.FG0FWWMM - 1;
  end
  ;
  FG0FW00.FG0FW-CURR-MO-MINUS2 = FG0FW00.FG0FWWDT;
  ;
  ;
  if (FG0FW00.FG0FWWMM == 1)
    FG0FW00.FG0FWWMM = 12;
    if (FG0FW00.FG0FWWYY == 00)
      FG0FW00.FG0FWWYY = 99;
      FG0FW00.FG0FWWCC = FG0FW00.FG0FWWCC - 1;
    else
      FG0FW00.FG0FWWYY = FG0FW00.FG0FWWYY - 1;
    end
  else
    FG0FW00.FG0FWWMM = FG0FW00.FG0FWWMM - 1;
  end
  ;
  FG0FW00.FG0FW-CURR-MO-MINUS3 = FG0FW00.FG0FWWDT;
  ;
  ;
  if (FG0FW00.FG0FWWMM == 1)
    FG0FW00.FG0FWWMM = 12;
    if (FG0FW00.FG0FWWYY == 00)
      FG0FW00.FG0FWWYY = 99;
      FG0FW00.FG0FWWCC = FG0FW00.FG0FWWCC - 1;
    else
      FG0FW00.FG0FWWYY = FG0FW00.FG0FWWYY - 1;
    end
  else
    FG0FW00.FG0FWWMM = FG0FW00.FG0FWWMM - 1;
  end
  ;
  FG0FW00.FG0FW-CURR-MO-MINUS4 = FG0FW00.FG0FWWDT;
  ;
  ;
end // end FG0F-1122

// Fetch bgrade/clsout qty
Function FG0F-1151()
   /* ------------------------------------------------------------*/
   /* Select sum on dfcast.vmline01 table.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* Load fffrec record*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "SS"; /* function code*/
  ;
   /* ------------------------------------------------------------*/
   /* load ff5rec record - dfcast.vmline01*/
   /* ------------------------------------------------------------*/
  ;
  set FF5REC empty; /* Clear row storage area*/
  ;
  FF5REC.XPLCD = FF2REC.XPLCD; /* product line code*/
  ;
   /* ------------------------------------------------------------*/
   /* select sum dfcast.vmline01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3710" (FFFREC, SQLCA, FF5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or zero total, return to the previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* zero total returned*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "115"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUM TABLE DFCAST.VMLINE01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF5REC.FF5KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0F-1151

// Fetch inline/makeup qty
Function FG0F-1152()
   /* ------------------------------------------------------------*/
   /* Select sum on dfcast.vmltyp01 table.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* Load fffrec record*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "SS"; /* function code*/
  ;
   /* ------------------------------------------------------------*/
   /* Load ff6rec record - dfcast.vmltyp01*/
   /* ------------------------------------------------------------*/
  ;
  set FF6REC empty; /* Clear row storage area*/
  ;
  FF6REC.XPLCD = FF2REC.XPLCD; /* product line code*/
  FF6REC.YPGCD = "*"; /* type group code*/
  ;
   /* ------------------------------------------------------------*/
   /* Select sum dfcast.vmltyp01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3750" (FFFREC, SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* Record not found*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "115"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET TABLE DFCAST.VMLTYP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF6REC.FF6KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0F-1152

// Select dfcast.vwline01 row
Function FG0F-1153()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vwline01 table row*/
   /* ------------------------------------------------------------*/
  ;
  set FFGREC empty; /* Clear row storage area*/
  ;
  FFGREC.FFEWSNBR = FFWREC.FFEWSNBR; /* wrk sheet nbr*/
  FFGREC.XPLCD = FF2REC.XPLCD; /* product line code*/
  ;
  try
    call "IO3890" ("S ", SQLCA, FFGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "115"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VWLINE01 TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFGREC.FFGKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0F-1153

// Get sales qty
Function FG0F-1161()
   /* ----------------------------------------------------------------*/
   /* Determine if the date range is all forecast, all actual, or*/
   /* mixed.*/
   /* Translate sales quantities from units to thousands using common*/
   /* routine xsffs10.*/
   /* ----------------------------------------------------------------*/
  ;
  if (FG0FW01.FG0FWPED[FG0FWYIX] < FG0FW00.FG0FW-CURR-MO) /* all actual*/
    FG0F-11611(); /* get actual sales qty*/
    FFXREC.FFXNUMB = FG0FW00.FG0FWUHS;
    XSFFS10(); /* translate history sale*/
    FG0FW00.FG0FWHST = FFXREC.FFXCHAR;
    ;
  else
    if (FG0FW01.FG0FWPBD[FG0FWYIX] >= FG0FW00.FG0FW-CURR-MO) /* all fcst*/
      FG0F-11613(); /* get forecasted sales qty*/
      FFXREC.FFXNUMB = FG0FW00.FG0FWUHS;
      XSFFS10(); /* translate history sale*/
      FG0FW00.FG0FWHST = FFXREC.FFXCHAR;
      ;
    else /* mixed date range*/
      ;
      FFFREC.FFFBEGMO = FG0FW01.FG0FWPBD[FG0FWYIX];
      FFFREC.FFFENDMO = FG0FW00.FG0FW-CURR-MO-MINUS1; /* ACTUAL*/
      FG0F-11611(); /* get actual sales qty*/
      FG0FW00.FG0FWSHS = FG0FW00.FG0FWUHS;
      ;
      FFFREC.FFFBEGMO = FG0FW00.FG0FW-CURR-MO; /* FCST*/
      FFFREC.FFFENDMO = FG0FW01.FG0FWPED[FG0FWYIX];
      FG0F-11613(); /* get forecasted sales qty*/
      FG0FW00.FG0FWSHS = FG0FW00.FG0FWUHS + FG0FW00.FG0FWSHS;
      ;
      FG0FW00.FG0FWUHS = FG0FW00.FG0FWSHS;
      FFXREC.FFXNUMB = FG0FW00.FG0FWSHS;
      XSFFS10(); /* translate history sale*/
      FG0FW00.FG0FWHST = FFXREC.FFXCHAR;
      ;
    end
    ;
  end
  ;
end // end FG0F-1161

// Get actual sales qty
Function FG0F-11611()
   /* ------------------------------------------------------------*/
   /* Fetch actual need month sales from dfhist.vlnshp01.*/
   /* Determine if carryover needs to be fetched from dfhist.vfhlin01.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* Init work storage quantity fields.*/
   /* ------------------------------------------------------------*/
  ;
  FG0FW00.FG0FWUHS = 0; /* init w/s historical sale units*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain historical sales quantities from dfhist.vlnshp01.*/
   /* Note: fffbegmo and fffendmo loaded in fg0f-1161*/
   /* ------------------------------------------------------------*/
  ;
  FG0F-116111(); /* get need month sales qty*/
  ;
  FG0FW00.FG0FWUHS = FHAREC.FH5MSHQT;
  ;
   /* --------------------------------------------------------------*/
   /* Determine if carryover quantities need to be obtained.*/
   /* --------------------------------------------------------------*/
  ;
  if (FG0FW00.FG0FW-CURR-MO-MINUS1 <= FFFREC.FFFENDMO
   || FG0FW00.FG0FW-CURR-MO-MINUS4 >= FFFREC.FFFBEGMO)
    FG0F-116113(); /* get carryover qty*/
  end
  ;
  ;
end // end FG0F-11611

// Get dfhist.vlnshp01 qty
Function FG0F-116111()
   /* ------------------------------------------------------------*/
   /* Obtain historical sales quantities from dfhist.vlnshp01.*/
   /* Note: fffbegmo and fffendmo loaded in fg0f-1161*/
   /* ------------------------------------------------------------*/
  ;
  set FHAREC empty;
  ;
  FHAREC.XQACD = "*"; /* quality code*/
  FHAREC.XLCCD = "*"; /* life cycle code*/
  FHAREC.XPRCD = "*"; /* product type code*/
  FHAREC.XPLCD = FF2REC.XPLCD; /* product line code*/
  FHAREC.YSMXOT = "*"; /* sum code*/
  ;
  TA1REC.TA1PGMNM = "-116111"; /* calling process*/
  ;
  FFFREC.FFFFUNCD = "SN"; /* Function code*/
  ;
  XSFFS-FF5550();
  ;
  ;
end // end FG0F-116111

// Get carryover qty
Function FG0F-116113()
   /* ----------------------------------------------------------------*/
   /* Determine date range on carryover quantities.*/
   /* Calculate carryover quantities for the determined date range,*/
   /* from dfhist.vfhlin01 or dfhist.vfhcat01.*/
   /* ----------------------------------------------------------------*/
  ;
  if (FG0FW00.FG0FW-CURR-MO-MINUS1 <= FFFREC.FFFENDMO
   && FG0FW00.FG0FW-CURR-MO-MINUS1 >= FFFREC.FFFBEGMO)
    ;
    FG0FW00.FG0FW-HOLD-END-MO = FFFREC.FFFENDMO;
    FG0FW00.FG0FW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
    FFFREC.FFFENDMO = FG0FW00.FG0FW-CURR-MO-MINUS1;
    FFFREC.FFFBEGMO = FG0FW00.FG0FW-CURR-MO-MINUS1;
    ;
    set FH4REC empty;
    FH4REC.XQACD = "02";
    FH4REC.XLCCD = "*";
    FG0F-1161131(); /* obtain bgrade qtys*/
    FG0FW00.FG0FWUHS = FG0FW00.FG0FWUHS + FH4REC.FH1PAQTY +     FH4REC.FH1ALQTY;
    set FH4REC empty;
    FH4REC.XQACD = "01";
    FH4REC.XLCCD = "20";
    FG0F-1161131(); /* obtain closeout qtys*/
    FG0FW00.FG0FWUHS = FG0FW00.FG0FWUHS + FH4REC.FH1PAQTY +     FH4REC.FH1ALQTY;
    FFFREC.FFFFUNCD = "C1";
    FG0F-1161133(); /* obtain inline/makeup qtys*/
    FG0FW00.FG0FWUHS = FG0FW00.FG0FWUHS + FH3REC.FH1PAQTY;
    ;
    FFFREC.FFFENDMO = FG0FW00.FG0FW-HOLD-END-MO;
    FFFREC.FFFBEGMO = FG0FW00.FG0FW-HOLD-BEG-MO;
    ;
  end
  ;
  if (FG0FW00.FG0FW-CURR-MO-MINUS2 <= FFFREC.FFFENDMO
   && FG0FW00.FG0FW-CURR-MO-MINUS2 >= FFFREC.FFFBEGMO)
    ;
    FG0FW00.FG0FW-HOLD-END-MO = FFFREC.FFFENDMO;
    FG0FW00.FG0FW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
    FFFREC.FFFENDMO = FG0FW00.FG0FW-CURR-MO-MINUS2;
    FFFREC.FFFBEGMO = FG0FW00.FG0FW-CURR-MO-MINUS2;
    ;
    set FH4REC empty;
    FH4REC.XQACD = "02";
    FH4REC.XLCCD = "*";
    FG0F-1161131(); /* obtain bgrade qtys*/
    FG0FW00.FG0FWUHS = FG0FW00.FG0FWUHS + FH4REC.FH1PAQTY +     FH4REC.FH1ALQTY;
    set FH4REC empty;
    FH4REC.XQACD = "01";
    FH4REC.XLCCD = "20";
    FG0F-1161131(); /* obtain closeout qtys*/
    FG0FW00.FG0FWUHS = FG0FW00.FG0FWUHS + FH4REC.FH1PAQTY +     FH4REC.FH1ALQTY;
    FFFREC.FFFFUNCD = "C2";
    FG0F-1161133(); /* obtain inline/makeup qtys*/
    FG0FW00.FG0FWUHS = FG0FW00.FG0FWUHS + FH3REC.FH1PAQTY;
    ;
    FFFREC.FFFENDMO = FG0FW00.FG0FW-HOLD-END-MO;
    FFFREC.FFFBEGMO = FG0FW00.FG0FW-HOLD-BEG-MO;
  end
  ;
  if (FG0FW00.FG0FW-CURR-MO-MINUS3 <= FFFREC.FFFENDMO
   && FG0FW00.FG0FW-CURR-MO-MINUS3 >= FFFREC.FFFBEGMO)
    ;
    FG0FW00.FG0FW-HOLD-END-MO = FFFREC.FFFENDMO;
    FG0FW00.FG0FW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
    FFFREC.FFFENDMO = FG0FW00.FG0FW-CURR-MO-MINUS3;
    FFFREC.FFFBEGMO = FG0FW00.FG0FW-CURR-MO-MINUS3;
    ;
    set FH4REC empty;
    FH4REC.XQACD = "02";
    FH4REC.XLCCD = "*";
    FG0F-1161131(); /* obtain bgrade qtys*/
    FG0FW00.FG0FWUHS = FG0FW00.FG0FWUHS + FH4REC.FH1PAQTY +     FH4REC.FH1ALQTY;
    set FH4REC empty;
    FH4REC.XQACD = "01";
    FH4REC.XLCCD = "20";
    FG0F-1161131(); /* obtain closeout qtys*/
    FG0FW00.FG0FWUHS = FG0FW00.FG0FWUHS + FH4REC.FH1PAQTY +     FH4REC.FH1ALQTY;
    set FH4REC empty;
    FH4REC.XQACD = "01";
    FH4REC.XLCCD = "10";
    FG0F-1161131(); /* obtain inline/makeup qtys*/
    FH4REC.FH1PAQTY = mathLib.round((FH4REC.FH1PAQTY + FH4REC.FH1ALQTY) * .5, -mathLib.decimals(FH4REC.FH1PAQTY));
    FG0FW00.FG0FWUHS = FG0FW00.FG0FWUHS + FH4REC.FH1PAQTY;
    ;
    FFFREC.FFFENDMO = FG0FW00.FG0FW-HOLD-END-MO;
    FFFREC.FFFBEGMO = FG0FW00.FG0FW-HOLD-BEG-MO;
    ;
  end
  ;
  if (FG0FW00.FG0FW-CURR-MO-MINUS4 <= FFFREC.FFFENDMO
   && FG0FW00.FG0FW-CURR-MO-MINUS4 >= FFFREC.FFFBEGMO)
    ;
    FG0FW00.FG0FW-HOLD-END-MO = FFFREC.FFFENDMO;
    FG0FW00.FG0FW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
    FFFREC.FFFENDMO = FG0FW00.FG0FW-CURR-MO-MINUS4;
    FFFREC.FFFBEGMO = FG0FW00.FG0FW-CURR-MO-MINUS4;
    ;
    set FH4REC empty;
    FH4REC.XQACD = "02";
    FH4REC.XLCCD = "*";
    FG0F-1161131(); /* obtain bgrade qtys*/
    FG0FW00.FG0FWUHS = FG0FW00.FG0FWUHS + FH4REC.FH1PAQTY +     FH4REC.FH1ALQTY;
    set FH4REC empty;
    FH4REC.XQACD = "01";
    FH4REC.XLCCD = "20";
    FG0F-1161131(); /* obtain closeout qtys*/
    FG0FW00.FG0FWUHS = FG0FW00.FG0FWUHS + FH4REC.FH1PAQTY +     FH4REC.FH1ALQTY;
    set FH4REC empty;
    FH4REC.XQACD = "01";
    FH4REC.XLCCD = "10";
    FG0F-1161131(); /* obtain inline/makeup qtys*/
    FH4REC.FH1PAQTY = mathLib.round((FH4REC.FH1PAQTY + FH4REC.FH1ALQTY) * .5, -mathLib.decimals(FH4REC.FH1PAQTY));
    FG0FW00.FG0FWUHS = FG0FW00.FG0FWUHS + FH4REC.FH1PAQTY;
    ;
    FFFREC.FFFENDMO = FG0FW00.FG0FW-HOLD-END-MO;
    FFFREC.FFFBEGMO = FG0FW00.FG0FW-HOLD-BEG-MO;
  end
  ;
end // end FG0F-116113

// Fetch dfhist.vfhlin01
Function FG0F-1161131()
   /* ------------------------------------------------------------*/
   /* Obtain carryover quantities from dfhist.vfhlin01*/
   /* ------------------------------------------------------------*/
  ;
  FH4REC.XPLCD = FF2REC.XPLCD; /* product line code*/
  FH4REC.XPRCD = "*"; /* product type code*/
  FH4REC.YSMXOT = "*"; /* sum code*/
  FH4REC.FH1PNAC = "*"; /* nacct fl*/
  TA1PGMNM = "1161131"; /* calling process*/
  ;
   /* --------------------------------------------------*/
   /* select sum on dfhist.vfhlin01 table*/
   /* --------------------------------------------------*/
  ;
  XSFFS51();
  ;
  ;
end // end FG0F-1161131

// Fetch dfhist.vfhcat01
Function FG0F-1161133()
   /* ------------------------------------------------------------*/
   /* Obtain carryover quantities*/
   /* ------------------------------------------------------------*/
  ;
  set FH3REC empty;
  ;
   /* division code is used here for passing line code to ff5500*/
  FH3REC.XDVCD = FF2REC.XPLCD; /* prod line code*/
  FH3REC.XPCCD = "*"; /* prod catg code*/
  FH3REC.XPRCD = "*"; /* product type code*/
  FH3REC.XLCCD = "10"; /* life cycle code*/
  FH3REC.XQACD = "01"; /* quality code*/
  FH3REC.YSMXOT = "*"; /* sum code*/
  FH3REC.FH1PNAC = "*"; /* nacct fl*/
  TA1PGMNM = "1161133"; /* calling process*/
  ;
   /* --------------------------------------------------*/
   /* select sum on dfhist.vfhcat01 table*/
   /* --------------------------------------------------*/
  ;
  XSFFS-FF5500();
  ;
  ;
end // end FG0F-1161133

// Get forecasted sales qty
Function FG0F-11613()
   /* ------------------------------------------------------------*/
   /* Fetch forecast sales; determing if carryover needs to be*/
   /* obtained.*/
   /* ------------------------------------------------------------*/
  ;
   /* ----------------------------------------------------------*/
   /* Init numeric work fields*/
   /* ----------------------------------------------------------*/
  ;
  FG0FW00.FG0FWUHS = 0; /* init w/s historical sale unit*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain forecasted sales quantities from:*/
   /* dfcast.vmline01  Bgrade/Closeout*/
   /* dfcast.vmltyp01  Inline/Makeup*/
   /* Note: fffbegmo and fffendmo loaded in fg0f-1161*/
   /* ------------------------------------------------------------*/
  ;
  FG0FS02(); /* fetch bgrade/Closeout*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    FG0FW00.FG0FWUHS = FF5REC.FF5COFCT + FF5REC.FF5BGFCT;
  end
  ;
  FG0FS03(); /* fetch inline/makeup*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    FG0FW00.FG0FWUHS = FG0FW00.FG0FWUHS + FF6REC.FF6SLFCT;
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Determine if carryover quantities need to be obtained.*/
   /* --------------------------------------------------------------*/
  ;
  if (FG0FW00.FG0FW-CURR-MO <= FFFREC.FFFENDMO
   && FG0FW00.FG0FW-CURR-MO >= FFFREC.FFFBEGMO)
    ;
    FG0FW00.FG0FW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
    FG0FW00.FG0FW-HOLD-END-MO = FFFREC.FFFENDMO;
    FFFREC.FFFBEGMO = FG0FW00.FG0FW-CURR-MO-MINUS1;
    FFFREC.FFFENDMO = FG0FW00.FG0FW-CURR-MO-MINUS1;
    ;
    FG0FS02(); /* get carryover qty*/
    if (SQLCA.VAGen_SQLCODE == 0)
      FG0FW00.FG0FWUHS = FG0FW00.FG0FWUHS - FF5REC.FF5BGFCT -       FF5REC.FF5COFCT;
    end
    ;
    FG0FS03(); /* get carryover qty*/
    if (SQLCA.VAGen_SQLCODE == 0)
      FG0FW00.FG0FWUHS = FG0FW00.FG0FWUHS - FF6REC.FF6SLFCT;
    end
    ;
    FFFREC.FFFBEGMO = FG0FW00.FG0FW-HOLD-BEG-MO;
    FFFREC.FFFENDMO = FG0FW00.FG0FW-HOLD-END-MO;
  end
  ;
  ;
end // end FG0F-11613

// Get demand quantities
Function FG0F-1163()
   /* ---------------------------------------------------------------*/
   /* Determine if the date range is all forecast, all actual, or*/
   /* mixed.*/
   /* Translate demand quantities from units to thousands using*/
   /* common routine xsffs10.*/
   /* ---------------------------------------------------------------*/
  ;
  if (FG0FW01.FG0FWPED[FG0FWYIX] < FG0FW00.FG0FW-CURR-MO) /* all actual*/
    FG0F-11631(); /* get actual demand qty*/
    FFXREC.FFXNUMB = FG0FW00.FG0FWUHD;
    XSFFS10(); /* translate history demand*/
    FG0FW00.FG0FWHDT = FFXREC.FFXCHAR;
    ;
  else
    if (FG0FW01.FG0FWPBD[FG0FWYIX] >= FG0FW00.FG0FW-CURR-MO) /* all fcst*/
      FG0F-11633(); /* get forecasted demand qty*/
      FFXREC.FFXNUMB = FG0FW00.FG0FWUHD;
      XSFFS10(); /* translate history demand*/
      FG0FW00.FG0FWHDT = FFXREC.FFXCHAR;
      ;
    else /* mixed date range*/
      FFFREC.FFFBEGMO = FG0FW01.FG0FWPBD[FG0FWYIX];
      FFFREC.FFFENDMO = FG0FW00.FG0FW-CURR-MO-MINUS1;
      FG0F-11631(); /* get actual demand qty*/
      FG0FW00.FG0FWSHD = FG0FW00.FG0FWUHD;
      ;
      FFFREC.FFFBEGMO = FG0FW00.FG0FW-CURR-MO; /* FCST*/
      FFFREC.FFFENDMO = FG0FW01.FG0FWPED[FG0FWYIX];
      FG0F-11633(); /* get forecasted demand qty*/
      FG0FW00.FG0FWSHD = FG0FW00.FG0FWUHD + FG0FW00.FG0FWSHD;
      ;
      FG0FW00.FG0FWUHD = FG0FW00.FG0FWSHD;
      FFXREC.FFXNUMB = FG0FW00.FG0FWSHD;
      XSFFS10(); /* translate history demand*/
      FG0FW00.FG0FWHDT = FFXREC.FFXCHAR;
      ;
    end
  end
  ;
  ;
end // end FG0F-1163

// Get historical demand qtys
Function FG0F-11631()
   /* ------------------------------------------------------------*/
   /* Get historical demand quantities.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* Init work storage quantity fields.*/
   /* ------------------------------------------------------------*/
  ;
  FG0FW00.FG0FWUHD = 0; /* init w/s historical dmnd units*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain historical demand quantities*/
   /* If the date range is all before 199206*/
   /* Fetch inline/makeup/bgrade/closeout accumulated futures qtys*/
   /* note: no bgrade futures exists*/
   /* Else If the date range is all after 199205*/
   /* Fetch inline/makeup/closeout frozen authorized futures*/
   /* demand qtys*/
   /* note: no bgrade futures exists*/
   /* Else a mixed range exists*/
   /* For dates all before 199206, fetch inline/makeup/closeout*/
   /* accumulated futures qtys*/
   /* For dates all after 199205, fetch inline/makeup/closeout*/
   /* frozen authorized futures*/
   /* note: no bgrade futures exists*/
   /* ------------------------------------------------------------*/
  ;
  if (FFFREC.FFFENDMO < 199206) /* Whole range before 199206*/
    set FH4REC empty; /* get inline/makeup/closeout*/
    FH4REC.XQACD = "01";
    FH4REC.XLCCD = "*";
    FH4REC.YSMXOT = "FT";
    FG0F-116311(); /* use actual demand*/
    FG0FW00.FG0FWUHD = FH4REC.FH1PAQTY + FH4REC.FH1ALQTY +     FH4REC.FH2SHP + FH4REC.FH3CNCL;
    ;
  else
    if (FFFREC.FFFBEGMO >= 199206) /* Whole range beyond 199206*/
      set FH4REC empty; /* get inline/makeup/closeout frz futr*/
      FH4REC.XQACD = "01";
      FH4REC.XLCCD = "*";
      FH4REC.YSMXOT = "FT";
      FG0F-116311(); /* use frozen future*/
      FG0FW00.FG0FWUHD = FH4REC.FH-FRZ-PRAL-QTY + FH4REC.FH-FRZ-ALOC-QTY +       FH4REC.FH-FRZ-SHP-QTY + FH4REC.FH-FRZ-CNCL-QTY;
      ;
    else
      FG0FW00.FG0FW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
      FG0FW00.FG0FW-HOLD-END-MO = FFFREC.FFFENDMO;
      ;
      FFFREC.FFFENDMO = 199205;
      set FH4REC empty; /* get inline/makeup/closeout*/
      FH4REC.XQACD = "01";
      FH4REC.XLCCD = "*";
      FH4REC.YSMXOT = "FT";
      FG0F-116311(); /* use actual future*/
      FG0FW00.FG0FWUHD = FH4REC.FH1PAQTY + FH4REC.FH1ALQTY +       FH4REC.FH2SHP + FH4REC.FH3CNCL;
      ;
      ;
      FFFREC.FFFBEGMO = 199206;
      FFFREC.FFFENDMO = FG0FW00.FG0FW-HOLD-END-MO;
      set FH4REC empty; /* get inline/makeup futures*/
      FH4REC.XQACD = "01";
      FH4REC.XLCCD = "*";
      FH4REC.YSMXOT = "FT";
      FG0F-116311(); /* use frozen future*/
      FG0FW00.FG0FWUHD = FG0FW00.FG0FWUHD + FH4REC.FH-FRZ-PRAL-QTY +       FH4REC.FH-FRZ-ALOC-QTY + FH4REC.FH-FRZ-ALOC-QTY +       FH4REC.FH-FRZ-CNCL-QTY;
      ;
      /* ------------------------------------------------------------*/
      /* Restore beginning and ending date range.*/
      /* ------------------------------------------------------------*/
      ;
      FFFREC.FFFBEGMO = FG0FW00.FG0FW-HOLD-BEG-MO; /* Restore dt rng*/
      FFFREC.FFFENDMO = FG0FW00.FG0FW-HOLD-END-MO;
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Obtain historical prop demand quantities*/
   /* ------------------------------------------------------------*/
  ;
  set FH4REC empty;
  FH4REC.XQACD = "*";
  FH4REC.XLCCD = "*";
  FH4REC.YSMXOT = "PR";
  FG0F-116311(); /* use actual demand*/
  FG0FW00.FG0FWUHD = FG0FW00.FG0FWUHD + FH4REC.FH1PAQTY +   FH4REC.FH1ALQTY + FH4REC.FH2SHP + FH4REC.FH3CNCL;
  ;
  ;
end // end FG0F-11631

// Get demand qty
Function FG0F-116311()
   /* -----------------------------------------------------------*/
   /* Fetch demand quantities from dfhist.vfhlin01*/
   /* -----------------------------------------------------------*/
  ;
   /* -----------------------------------------------------------*/
   /* Load fh4rec record - dfhist.vfhlin01.*/
   /* -----------------------------------------------------------*/
  ;
  FH4REC.XPRCD = "*"; /* product type code*/
  FH4REC.XPLCD = FF2REC.XPLCD; /* product line code*/
  FH4REC.FH1PNAC = "*"; /* product national acct fl*/
  ;
  TA1REC.TA1PGMNM = "FG0F116"; /* calling process*/
  ;
   /* -----------------------------------------------------------*/
   /* Select sum on dfhist.vfhlin01 table.*/
   /* -----------------------------------------------------------*/
  ;
  XSFFS51();
  ;
end // end FG0F-116311

// Get forecasted demand qtys
Function FG0F-11633()
   /* ------------------------------------------------------------*/
   /* Fetch forecast demand from dfcast.vmline01 and dfcast.vmltyp01.*/
   /* ------------------------------------------------------------*/
  ;
   /* ----------------------------------------------------------*/
   /* Init numeric work fields*/
   /* ----------------------------------------------------------*/
  ;
  FG0FW00.FG0FWUHD = 0; /* init w/s historical dmnd unit*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain forecasted demand quantities from:*/
   /* dfcast.vmline01  Bgrade/Closeout*/
   /* dfcast.vmltyp01  Inline/Makeup*/
   /* Note: fffbegmo and fffendmo loaded in fg0f-1161*/
   /* ------------------------------------------------------------*/
  ;
  FG0FS02(); /* fetch bgrade/Closeout*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    FG0FW00.FG0FWUHD = FF5REC.FF5COFCT + FF5REC.FF5BGFCT;
  end
  ;
  FG0FS03(); /* fetch inline/makeup*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    FG0FW00.FG0FWUHD = FG0FW00.FG0FWUHD + FF6REC.FF6DMFCT;
  end
  ;
  ;
end // end FG0F-11633

// Calc product line percentages
Function FG0F-118()
   /* ------------------------------------------------------------*/
   /* Calculate product line percentages*/
   /* ------------------------------------------------------------*/
  ;
  FG0FW00.FG0FWIDX = 1; /* init index*/
  ;
  while (FG0FW00.FG0FWIDX <= FG0FW00.TA5TSQIX)
    ;
    FG0FW00.XXXTSPAG = FG0FW00.FG0FWIDX; /* process temp storage*/
    ;
    FG0FS07(); /* read temp storage*/
    ;
    FG0FW00.FG0FWPIX = 1;
    while (FG0FW00.FG0FWPIX <= FG0FW02.FG0FWNLD)
      ;
      /* ------------------------------------------------------------*/
      /* Caluculate current sales line percent:*/
      /* ------------------------------------------------------------*/
      ;
      if (FG0FW03.FG0FWUQT != 0)
        FG0FW00.FG0FWNM1 = FG0FW02.FG0FWUQT[FG0FWPIX] * 100;
        FG0FW02.FG0FWLPT[FG0FWPIX] = mathLib.round(FG0FW00.FG0FWNM1 / FG0FW03.FG0FWUQT, -mathLib.decimals(FG0FW02.FG0FWLPT[FG0FWPIX]));
        FG0FW02.FG0FWSPT[FG0FWPIX] = mathLib.round(FG0FW00.FG0FWNM1 / FG0FW03.FG0FWUQT, -mathLib.decimals(FG0FW02.FG0FWSPT[FG0FWPIX]));
      end
      ;
      /* ------------------------------------------------------------*/
      /* Caluculate historical sales percent one year prior:*/
      /* ------------------------------------------------------------*/
      ;
      if (FG0FW03.FG0FWUHS[1] != 0)
        FG0FW00.FG0FWNM1 = FG0FW02.FG0FWUH1[FG0FWPIX] * 100;
        FG0FW00.FG0FWNM2 = FG0FW03.FG0FWUHS[1];
        FG0FW02.FG0FWHP1[FG0FWPIX] = mathLib.round(FG0FW00.FG0FWNM1 / FG0FW00.FG0FWNM2, -mathLib.decimals(FG0FW02.FG0FWHP1[FG0FWPIX]));
      end
      ;
      /* ------------------------------------------------------------*/
      /* caluculate historical sales percent two years prior:*/
      /* ------------------------------------------------------------*/
      ;
      if (FG0FW03.FG0FWUHS[2] != 0)
        FG0FW00.FG0FWNM1 = FG0FW02.FG0FWUH2[FG0FWPIX] * 100;
        FG0FW00.FG0FWNM2 = FG0FW03.FG0FWUHS[2];
        FG0FW02.FG0FWHP2[FG0FWPIX] = mathLib.round(FG0FW00.FG0FWNM1 / FG0FW00.FG0FWNM2, -mathLib.decimals(FG0FW02.FG0FWHP2[FG0FWPIX]));
      end
      ;
      /* ------------------------------------------------------------*/
      /* Caluculate historical sales percent three years prior:*/
      /* ------------------------------------------------------------*/
      ;
      if (FG0FW03.FG0FWUHS[3] != 0)
        FG0FW00.FG0FWNM1 = FG0FW02.FG0FWUH3[FG0FWPIX] * 100;
        FG0FW00.FG0FWNM2 = FG0FW03.FG0FWUHS[3];
        FG0FW02.FG0FWHP3[FG0FWPIX] = mathLib.round(FG0FW00.FG0FWNM1 / FG0FW00.FG0FWNM2, -mathLib.decimals(FG0FW02.FG0FWHP3[FG0FWPIX]));
      end
      ;
      /* ------------------------------------------------------------*/
      /* Caluculate historical demand percent one year prior:*/
      /* ------------------------------------------------------------*/
      ;
      if (FG0FW03.FG0FWUHD[1] != 0)
        FG0FW00.FG0FWNM1 = FG0FW02.FG0FWUD1[FG0FWPIX] * 100;
        FG0FW00.FG0FWNM2 = FG0FW03.FG0FWUHD[1];
        FG0FW02.FG0FWDP1[FG0FWPIX] = mathLib.round(FG0FW00.FG0FWNM1 / FG0FW00.FG0FWNM2, -mathLib.decimals(FG0FW02.FG0FWDP1[FG0FWPIX]));
      end
      ;
      /* ------------------------------------------------------------*/
      /* Caluculate historical demand percent two years prior:*/
      /* ------------------------------------------------------------*/
      ;
      if (FG0FW03.FG0FWUHD[2] != 0)
        FG0FW00.FG0FWNM1 = FG0FW02.FG0FWUD2[FG0FWPIX] * 100;
        FG0FW00.FG0FWNM2 = FG0FW03.FG0FWUHD[2];
        FG0FW02.FG0FWDP2[FG0FWPIX] = mathLib.round(FG0FW00.FG0FWNM1 / FG0FW00.FG0FWNM2, -mathLib.decimals(FG0FW02.FG0FWDP2[FG0FWPIX]));
      end
      ;
      /* ------------------------------------------------------------*/
      /* Caluculate historical demand percent three years prior:*/
      /* ------------------------------------------------------------*/
      ;
      if (FG0FW03.FG0FWUHD[3] != 0)
        FG0FW00.FG0FWNM1 = FG0FW02.FG0FWUD3[FG0FWPIX] * 100;
        FG0FW00.FG0FWNM2 = FG0FW03.FG0FWUHD[3];
        FG0FW02.FG0FWDP3[FG0FWPIX] = mathLib.round(FG0FW00.FG0FWNM1 / FG0FW00.FG0FWNM2, -mathLib.decimals(FG0FW02.FG0FWDP3[FG0FWPIX]));
      end
      /* ------------------------------------------------------------*/
      /* Accumulate current sales percent, historical sales percent,*/
      /* and historical demand percent.*/
      /* ------------------------------------------------------------*/
      ;
      FG0FW03.FG0FWLPT = FG0FW02.FG0FWLPT[FG0FWPIX] + FG0FW03.FG0FWLPT;
      FG0FW03.FG0FWHSP[1] = FG0FW02.FG0FWHP1[FG0FWPIX] +       FG0FW03.FG0FWHSP[1];
      FG0FW03.FG0FWHSP[2] = FG0FW02.FG0FWHP2[FG0FWPIX] +       FG0FW03.FG0FWHSP[2];
      FG0FW03.FG0FWHSP[3] = FG0FW02.FG0FWHP3[FG0FWPIX] +       FG0FW03.FG0FWHSP[3];
      FG0FW03.FG0FWHDP[1] = FG0FW02.FG0FWDP1[FG0FWPIX] +       FG0FW03.FG0FWHDP[1];
      FG0FW03.FG0FWHDP[2] = FG0FW02.FG0FWDP2[FG0FWPIX] +       FG0FW03.FG0FWHDP[2];
      FG0FW03.FG0FWHDP[3] = FG0FW02.FG0FWDP3[FG0FWPIX] +       FG0FW03.FG0FWHDP[3];
      ;
      FG0FW00.FG0FWPIX = FG0FW00.FG0FWPIX + 1;
      ;
    end
    ;
    /* ------------------------------------------------------------*/
    /* Update temporary storage with line percentages*/
    /* ------------------------------------------------------------*/
    ;
    FG0FS08(); /* update temporary storage with line*/
                                   /* percentages*/
    ;
    FG0FW00.FG0FWIDX = FG0FW00.FG0FWIDX + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* verify line percent total*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0FW03.FG0FWLPT > 99.5
   && FG0FW03.FG0FWLPT <= 100.5)
    FG0FW03.FG0FWLPT = 100;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Calculate variance qty : total forecast qty - target qty*/
   /* ------------------------------------------------------------*/
  ;
  FG0FW01.FG0FWUVQ = FG0FW03.FG0FWUQT - FG0FW01.FG0FWUFT;
  ;
  FFXREC.FFXNUMB = FG0FW01.FG0FWUVQ;
  XSFFS10();
  FG0FW01.FG0FWVQT = FFXREC.FFXCHAR;
  ;
   /* ------------------------------------------------------------*/
   /* Caluculate variance percent :*/
   /* (variance qty * 100) / target qty*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0FW01.FG0FWUFT != 0)
    FG0FW00.FG0FWNM1 = FG0FW01.FG0FWUVQ * 100;
    FG0FW01.FG0FWVPT = mathLib.round(FG0FW00.FG0FWNM1 / FG0FW01.FG0FWUFT, -mathLib.decimals(FG0FW01.FG0FWVPT));
  end
  ;
  ;
end // end FG0F-118

// Inquire/maintain a table row
Function FG0F001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0FW00.FG0FWSWD == "1") /* Map 1 was requested*/
    ;
    FG0F100(); /* Display map 1*/
    ;
  else
    ;
    if (FG0FW00.FG0FWSWD == "2") /* Map 2 was requested*/
      ;
      FG0F200(); /* Display map 2*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/
      ;
      FFWREC.XXXMODID = "001"; /* Module identification*/
      FFWREC.XXXMSGNO = 10; /* Indicate system error*/
      ;
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = FG0FW00.FG0FWSWD; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
      ;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
      ;
      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/
      ;
      COMMAREA.CATOAP = "FG0A"; /* TO application*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/
      ;
      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      ;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
      ;
    end
    ;
  end
  ;
  ;
end // end FG0F001

// Inquire/maintain a table row
Function FG0F100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FG0F110(); /* Obtain the data to display*/
  ;
  FG0F120(); /* Format and display the map*/
  ;
  FG0F130(); /* Check attention identifier*/
  ;
  FG0F140(); /* Reset fields to normal intensity*/
  ;
  FG0F150(); /* Verify the entered data*/
  ;
  FG0F160(); /* Process valid input request*/
  ;
end // end FG0F100

// Obtain the data to display
Function FG0F110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0FW00.FG0FWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  ;
  FG0FS01(); /* Purge any temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* set map defaults*/
   /* ------------------------------------------------------------*/
  ;
  FG0FW01.FG0FWYOP = 1;
  FG0FW01.FG0FWHOP = "S";
  ;
  FG0FW01.FG0FWUFT = FG0FW00.FG0FWSUT;
  FG0FW01.FG0FWFTG = FG0FW00.FG0FWSTG;
  ;
   /* ------------------------------------------------------------*/
   /* if work sheet number has been passed obtain forecast*/
   /* information (range,div grp, and fcst target) from*/
   /* dfcast.vwdgrp01 for display, else use the div grp code*/
   /* and div grp description passed*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.FFEWSNBR != 0)
    ;
    FG0F111(); /* Select dfcast.vwdgrp01 row*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      FFWREC.YSMXDV = "10"; /* load sum xdvcd*/
      FFWREC.FFABEGMO = FFEREC.FFABEGMO; /* load begin range*/
      FFWREC.FFAENDMO = FFEREC.FFAENDMO; /* load end range*/
      FG0FW01.FG0FWUFT = FFEREC.FFEFCTGT; /* unit fcst target qty*/
      FG0FW01.FG0FWSFT = FFEREC.FFEFCTGT; /* save fcst target qty*/
      FFXREC.FFXNUMB = FFEREC.FFEFCTGT;
      XSFFS10();
      FG0FW01.FG0FWFTG = FFXREC.FFXCHAR; /* 100 fcst target qty*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Obtain current date using routine xx0xs01.*/
   /* Obtain invoice cutoff date from dfcast.vffctl01.*/
   /* Calculate:*/
   /* - current date*/
   /* - current date minus 1 month*/
   /* - current date minus 2 months*/
   /* - current date minus 3 months*/
   /* - current date minus 4 months*/
   /* - range dates for 3 years prior to the requested date range*/
   /* Load the default create data.*/
   /* ------------------------------------------------------------*/
  ;
  FG0F112();
  ;
   /* ------------------------------------------------------------*/
   /* Select all domestic product lines fromdfcast.vffxrf01.*/
   /* ------------------------------------------------------------*/
  ;
  FG0FW00.FG0FWIDX = 1; /* init index*/
  FG0FW00.FG0FWLFL = "N"; /* init wline01 data flag*/
  ;
  FG0F113(); /* select set on dfcast.vffxrf01*/
  ;
  FG0F114(); /* fetch first dfcast.vffxrf01 row*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0) /* process until end of dfcast.vffxrf01*/
    ;
    FG0FW02.XPLCD[FG0FWIDX] = FF2REC.XPLCD;
    XPLREC.XPLCD = FF2REC.XPLCD;
    XPLREC.XGPCD = COMMAREA.XGPCD;
    if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
      FG0FW02.XPLSDESC[FG0FWIDX] = XPLTBL.XPLSDESC[sysVar.arrayIndex];
    end
    ;
    FFFREC.FFFBEGMO = FFWREC.FFABEGMO; /* requested begin range*/
    FFFREC.FFFENDMO = FFWREC.FFAENDMO; /* requested end range*/
    ;
    /* ------------------------------------------------------------*/
    /* Obtain forecast sales information*/
    /* ------------------------------------------------------------*/
    ;
    FG0F115();
    ;
    /* ------------------------------------------------------------*/
    /* Obtain historical sale and demand qtys for range one year*/
    /* prior to requested range*/
    /* ------------------------------------------------------------*/
    ;
    FG0F116();
    ;
    /* ------------------------------------------------------------*/
     /* accumulate the current master qty total, forecast qty*/
     /* total, historical sales qty total, and historical demand*/
     /* qty total.*/
    /* ------------------------------------------------------------*/
    ;
    FG0FW03.FG0FWUCS = FG0FW02.FG0FWUCS[FG0FWIDX] + FG0FW03.FG0FWUCS;
    FG0FW03.FG0FWUQT = FG0FW02.FG0FWUQT[FG0FWIDX] + FG0FW03.FG0FWUQT;
    FG0FW03.FG0FWUHS[1] = FG0FW02.FG0FWUH1[FG0FWIDX] + FG0FW03.FG0FWUHS[1];
    FG0FW03.FG0FWUHS[2] = FG0FW02.FG0FWUH2[FG0FWIDX] + FG0FW03.FG0FWUHS[2];
    FG0FW03.FG0FWUHS[3] = FG0FW02.FG0FWUH3[FG0FWIDX] + FG0FW03.FG0FWUHS[3];
    FG0FW03.FG0FWUHD[1] = FG0FW02.FG0FWUD1[FG0FWIDX] + FG0FW03.FG0FWUHD[1];
    FG0FW03.FG0FWUHD[2] = FG0FW02.FG0FWUD2[FG0FWIDX] + FG0FW03.FG0FWUHD[2];
    FG0FW03.FG0FWUHD[3] = FG0FW02.FG0FWUD3[FG0FWIDX] + FG0FW03.FG0FWUHD[3];
    ;
    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0FW00.FG0FWIDX > 10) /* Page is full*/
      FG0FW02.FG0FWNLD = FG0FW00.FG0FWIDX; /* nbr of lines loaded*/
      FG0FW02.FG0FWTIX = FG0FW02.FG0FWNLD + 1; /* total index*/
      FG0FS06(); /* Add page to temp storage*/
    else
      FG0FW00.FG0FWIDX = FG0FW00.FG0FWIDX + 1;
    end
    ;
    FG0F114(); /* fetch next dfcast.vffxrf01*/
    ;
  end
  ;
  FG0F117(); /* close dfcast.vffxrf01 set*/
  ;
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0FW00.FG0FWIDX > 1) /* Page was formatted*/
    FG0FW02.FG0FWNLD = FG0FW00.FG0FWIDX - 1;
    FG0FW02.FG0FWTIX = FG0FW02.FG0FWNLD + 1; /* total index*/
    FG0FS06(); /* Add page to temp storage*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0FW00.TA5TSQIX == 0) /* No pages formatted*/
    ;
    FFWREC.XXXMODID = "110"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/
    ;
    return; /* Exit to continue processing*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Translate the current master qty total, forecast qty*/
   /* total, historical sales qty total, and historical demand*/
   /* qty total from units to thousands*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FG0FW03.FG0FWUCS;
  XSFFS10();
  FG0FW03.FG0FWCSQ = FFXREC.FFXCHAR;
  ;
  if (FG0FW00.FG0FWLFL == "Y") /* if work sheet data found display*/
                                   /* total*/
    FFXREC.FFXNUMB = FG0FW03.FG0FWUQT;
    XSFFS10();
    FG0FW03.FG0FWQTY = FFXREC.FFXCHAR;
  end
  ;
  FG0FW00.FG0FWIDX = 1;
  while (FG0FW00.FG0FWIDX <= 3)
    FFXREC.FFXNUMB = FG0FW03.FG0FWUHS[FG0FWIDX];
    XSFFS10();
    FG0FW03.FG0FWHSQ[FG0FWIDX] = FFXREC.FFXCHAR;
    FG0FW00.FG0FWIDX = FG0FW00.FG0FWIDX + 1;
  end
  ;
  FG0FW00.FG0FWIDX = 1;
  while (FG0FW00.FG0FWIDX <= 3)
    FFXREC.FFXNUMB = FG0FW03.FG0FWUHD[FG0FWIDX];
    XSFFS10();
    FG0FW03.FG0FWHDQ[FG0FWIDX] = FFXREC.FFXCHAR;
    FG0FW00.FG0FWIDX = FG0FW00.FG0FWIDX + 1;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Calculate product line percentages*/
   /* ------------------------------------------------------------*/
  ;
  FG0F-118();
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  FG0FW00.XXXTSPAG = 1; /* Desired page number*/
  FG0FW00.FG0FWSWR = "N"; /* Request for data switch*/
  FG0FW01.CACHGFL = "Y"; /* data is available for change*/
  ;
end // end FG0F110

// Select dfcast.vwdgrp01 row
Function FG0F111()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vwdgrp01 table row*/
   /* ------------------------------------------------------------*/
  ;
  set FFEREC empty; /* Clear row storage area*/
  ;
  FFEREC.FFEWSNBR = FFWREC.FFEWSNBR;
  ;
  try
    call "IO3850" ("S ", SQLCA, FFEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "111"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWDGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFEREC.FFEKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0F111

// Obtain program dates
Function FG0F112()
   /* ------------------------------------------------------------*/
   /* Obtain current date using routine xx0xs01.*/
   /* Obtain invoice cutoff date from dfcast.vffctl01.*/
   /* Calculate:*/
   /* - current date*/
   /* - current date minus 1 month*/
   /* - current date minus 2 months*/
   /* - current date minus 3 months*/
   /* - current date minus 4 months*/
   /* - range dates for 3 years prior to the requested date range*/
   /* Load the default create data.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain current date using routine xx0xs01.*/
   /* ------------------------------------------------------------*/
  XX0XS01();
  ;
  FG0FW00.FG0FWCWD = XX0XW01.XX0XWDAT; /* curr work dt ccyymmdd*/
  FG0FW00.FG0FW-CURR-MO = XX0XW01.XX0XWCYM; /* curr date ccyymm*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain invoice date from dfcast.vffctl01.  Used when gathering*/
   /* historical demand based sales information.*/
   /* ------------------------------------------------------------*/
  ;
  FG0F-1121(); /* get invoice cutoff date*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate:*/
   /* - current date*/
   /* - current date minus 1 month*/
   /* - current date minus 2 months*/
   /* - current date minus 3 months*/
   /* - current date minus 4 months*/
   /* ------------------------------------------------------------*/
  ;
  FG0F-1122();
  ;
   /* ------------------------------------------------------------*/
   /* Calculate prior ranges if begin and end dates were entered*/
   /* ------------------------------------------------------------*/
  ;
  FG0FW00.FG0FWWBD = FFWREC.FFABEGMO;
  FG0FW00.FG0FWWED = FFWREC.FFAENDMO;
  ;
  FG0FW00.FG0FWIDX = 1; /* init index*/
  while (FG0FW00.FG0FWIDX <= 3) /* calculate 3 date ranges*/
    ;
    if (FG0FW00.FG0FWBYY == 00)
      FG0FW00.FG0FWBYY = 99;
      FG0FW00.FG0FWBCC = FG0FW00.FG0FWBCC - 1;
    else
      FG0FW00.FG0FWBYY = FG0FW00.FG0FWBYY - 1;
    end
    FG0FW01.FG0FWPBD[FG0FWIDX] = FG0FW00.FG0FWWBD; /* prior beg date*/
    ;
    if (FG0FW00.FG0FWEYY == 00)
      FG0FW00.FG0FWEYY = 99;
      FG0FW00.FG0FWECC = FG0FW00.FG0FWECC - 1;
    else
      FG0FW00.FG0FWEYY = FG0FW00.FG0FWEYY - 1;
    end
    FG0FW01.FG0FWPED[FG0FWIDX] = FG0FW00.FG0FWWED; /* prior end date*/
    ;
    FG0FW00.FG0FWIDX = FG0FW00.FG0FWIDX + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* set default create date.*/
   /* note: if dfcast.vwline01 row exists its standard change*/
   /* date will become the create date.*/
   /* ------------------------------------------------------------*/
  ;
  FG0FW01.FG0FWCDT = VGVar.currentShortGregorianDate; /* created date default*/
  ;
   /* ------------------------------------------------------------*/
   /* set default ffzrec dates*/
   /* ------------------------------------------------------------*/
  ;
  FFZREC.FFZBEGMO = FFWREC.FFABEGMO;
  FFZREC.FFZENDMO = FFWREC.FFAENDMO;
  ;
  ;
end // end FG0F112

// Select 's3' on dfcast.vffxrf01
Function FG0F113()
   /* ------------------------------------------------------------*/
   /* Select set on dfcast.vffxrf01 table.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* load ff2rec record - dfcast.vffxrf01*/
   /* ------------------------------------------------------------*/
  ;
  set FF2REC empty; /* Clear row storage area*/
  ;
  FF2REC.YSMXDV = "10"; /* div grp code*/
  FF2REC.YPGCD = "*"; /* product type group*/
  ;
   /* ------------------------------------------------------------*/
   /* select set dfcast.vffxrf01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("S3", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
    return;
    ;
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "113"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S3 ON DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0F113

// Select dfcast.vffxrf01 row
Function FG0F114()
   /* ------------------------------------------------------------*/
   /* fetch dfcast.vffxrf01 row*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("N3", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "114"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N3 DFCAST.VFFXRF01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0F114

// Obtain forecast sales qty
Function FG0F115()
   /* ------------------------------------------------------------*/
   /* Obtain forecast sales information.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* Fetch bgrade/closeout sales quantities.*/
   /* Fetch inline/makeup sales quantities.*/
   /* Format master quantity column.  If no data exists default*/
   /* master quantity to zero.*/
   /* ------------------------------------------------------------*/
  ;
  FG0F-1151(); /* bgrade/closeout qty*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    FG0FW00.FG0FWNM1 = FF5REC.FF5COFCT;
    FG0FW00.FG0FWNM2 = FF5REC.FF5BGFCT;
    FG0FW02.FG0FWUCS[FG0FWIDX] = FG0FW00.FG0FWNM1 + FG0FW00.FG0FWNM2;
  end
  ;
  FG0F-1152(); /* inline/makeup qty*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    FG0FW00.FG0FWNM2 = FG0FW02.FG0FWUCS[FG0FWIDX];
    FG0FW02.FG0FWUCS[FG0FWIDX] = FF6REC.FF6SLFCT + FG0FW00.FG0FWNM2;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Translate current sales master qty into thousands*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FG0FW02.FG0FWUCS[FG0FWIDX];
  XSFFS10();
  FG0FW02.FG0FWCSQ[FG0FWIDX] = FFXREC.FFXCHAR;
  ;
   /* ------------------------------------------------------------*/
   /* If the work sheet number was passed obtain the forecast*/
   /* quantities from dfcast.vwline01.*/
   /* If not found default forecast quantities to zero.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.FFEWSNBR != 0)
    ;
    FG0F-1153(); /* select dfcast.vwline01*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      if (FG0FW00.FG0FWIDX == 1) /* first time thru processing*/
        FG0FW01.FG0FWCDT = FFGREC.ZZZSDT; /* w/s date*/
      end
      FG0FW02.FG0FWSQT[FG0FWIDX] = FFGREC.FF6SLFCT;
      FG0FW02.FG0FWUQT[FG0FWIDX] = FFGREC.FF6SLFCT;
      FFXREC.FFXNUMB = FG0FW02.FG0FWUQT[FG0FWIDX];
      XSFFS10();
      FG0FW02.FG0FWQTY[FG0FWIDX] = FFXREC.FFXCHAR;
      FG0FW00.FG0FWLFL = "Y"; /* vwline01 data found*/
      FG0FW02.FG0FWWKE[FG0FWIDX] = "Y"; /* Set wksht exist flag*/
    end
    ;
  end
  ;
  ;
end // end FG0F115

// Get sales & demand qtys
Function FG0F116()
   /* ------------------------------------------------------------*/
   /* Obtain historical sale and demand qtys for range one year*/
   /* prior to requested range*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFBEGMO = FG0FW01.FG0FWPBD[1]; /* current date*/
  FFFREC.FFFENDMO = FG0FW01.FG0FWPED[1];
  FG0FW00.FG0FWYIX = 1;
  ;
  FG0F-1161(); /* get sales qty*/
  ;
  FG0F-1163(); /* get demand qty*/
  ;
  FG0FW02.FG0FWUH1[FG0FWIDX] = FG0FW00.FG0FWUHS;
  FG0FW02.FG0FWHQ1[FG0FWIDX] = FG0FW00.FG0FWHST;
  ;
  FG0FW02.FG0FWUD1[FG0FWIDX] = FG0FW00.FG0FWUHD;
  FG0FW02.FG0FWDQ1[FG0FWIDX] = FG0FW00.FG0FWHDT;
  ;
   /* ------------------------------------------------------------*/
   /* Obtain historical sale and demand qtys for range two years*/
   /* prior to requested range*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFBEGMO = FG0FW01.FG0FWPBD[2]; /* current date*/
  FFFREC.FFFENDMO = FG0FW01.FG0FWPED[2];
  FG0FW00.FG0FWYIX = 2;
  ;
  FG0F-1161(); /* get sales qty*/
  ;
  FG0F-1163(); /* get demand qty*/
  ;
  FG0FW02.FG0FWUH2[FG0FWIDX] = FG0FW00.FG0FWUHS;
  FG0FW02.FG0FWHQ2[FG0FWIDX] = FG0FW00.FG0FWHST;
  ;
  FG0FW02.FG0FWUD2[FG0FWIDX] = FG0FW00.FG0FWUHD;
  FG0FW02.FG0FWDQ2[FG0FWIDX] = FG0FW00.FG0FWHDT;
  ;
   /* ------------------------------------------------------------*/
   /* Obtain historical sale and demand qtys for range three*/
   /* years prior to requested range*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFBEGMO = FG0FW01.FG0FWPBD[3]; /* current date*/
  FFFREC.FFFENDMO = FG0FW01.FG0FWPED[3];
  FG0FW00.FG0FWYIX = 3;
  ;
  FG0F-1161(); /* get sales qty*/
  ;
  FG0F-1163(); /* get demand qty*/
  ;
  FG0FW02.FG0FWUH3[FG0FWIDX] = FG0FW00.FG0FWUHS;
  FG0FW02.FG0FWHQ3[FG0FWIDX] = FG0FW00.FG0FWHST;
  ;
  FG0FW02.FG0FWUD3[FG0FWIDX] = FG0FW00.FG0FWUHD;
  FG0FW02.FG0FWDQ3[FG0FWIDX] = FG0FW00.FG0FWHDT;
  ;
  ;
end // end FG0F116

// close 'c3' dfcast.vffxrf01
Function FG0F117()
   /* ------------------------------------------------------------*/
   /* close dfcast.vffxrf01 table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("C3", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
    return;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "117"; /* Module identification*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE S3 DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0F117

// Format and converse the map
Function FG0F120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0FW00.FG0FWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (FG0FW00.FG0FWSWF == "Y") /* Map must be formatted*/
      FG0F121(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if processing an existing forecast key data can not !!!*/
   /* be modified*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0FW00.FG0FWFCF == "Y")
    set FG0FM001.FG0FMBRG skip;
    set FG0FM001.FG0FMERG skip;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format page, date, and FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0FW00.TA5TSQIX > 0)
    set FG0FM001.XXXLITPG skip;
    FG0FM001.XXXTSPAG = FG0FW00.XXXTSPAG; /* Current page*/
    set FG0FM001.XXXLITOF skip;
    FG0FM001.TA5TSQIX = FG0FW00.TA5TSQIX; /* max pages*/
  end
  ;
  FG0FM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FG0FM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG0FM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* error message number*/
    FG0FM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    set FG0FM001 alarm; /* Indicate sound alarm*/
  end
  ;
  converse FG0FM001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0;
  ;
  COMMAREA.CATOAP = FG0FM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG0FM001.CAITEM; /* Application data*/
  ;
  ;
end // end FG0F120

// Format the display data
Function FG0F121()
   /* ------------------------------------------------------------*/
   /* Init map fg0fm001*/
   /* ------------------------------------------------------------*/
  ;
  set FG0FM001 initial; /* m001 input/ouput area*/
  ;
  FG0FW00.FG0FWSWF = "N"; /* init map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Format fg0fm001 using passed data*/
   /* ------------------------------------------------------------*/
  ;
  FG0FW00.FG0FWWDT = FFWREC.FFABEGMO; /* w/s date field*/
  FG0FM001.FG0FMBRG = FG0FW00.FG0FWWYM; /* begin month range*/
  FG0FW00.FG0FWWDT = FFWREC.FFAENDMO; /* w/s date field*/
  FG0FM001.FG0FMERG = FG0FW00.FG0FWWYM; /* end month range*/
  ;
  FG0FM001.FG0FMYOP = FG0FW01.FG0FWYOP; /* year option*/
  FG0FM001.FG0FMHOP = FG0FW01.FG0FWHOP; /* history option*/
  ;
   /* ------------------------------------------------------------*/
   /* If data has not been loaded bypass load map fields*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0FW01.CACHGFL != "Y")
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Load map using fg0fw01 work record*/
   /* ------------------------------------------------------------*/
  ;
  FG0FM001.FG0FMFTG = FG0FW01.FG0FWFTG; /* forecast target qty*/
  FG0FM001.FG0FMVQT = FG0FW01.FG0FWVQT; /* variance qty*/
  FG0FM001.FG0FMVPT = FG0FW01.FG0FWVPT; /* variance percent*/
  FG0FM001.FG0FMCDT = FG0FW01.FG0FWCDT; /* wrk sht created date*/
  set FG0FM001.FG0FMPR1 skip;
  FG0FM001.FG0FMPBR = FG0FW01.FG0FWPBR[FG0FWYOP]; /* prior beg range yymm*/
   /* MOVE FG0FW00.FG0FWWYM TO FG0FM001.FG0FMPBR PRIOR BEG RANGE*/
  set FG0FM001.FG0FMDSH skip;
  FG0FM001.FG0FMPER = FG0FW01.FG0FWPER[FG0FWYOP]; /* prior end range yymm*/
   /* MOVE FG0FW00.FG0FWWYM TO FG0FM001.FG0FMPER PRIOR END RANGE*/
  set FG0FM001.FG0FMPR2 skip;
  FG0FM001.FG0FMYDS = FG0FW00.FG0FWYDS[FG0FWYOP]; /* prior year desc*/
  if (FG0FW01.FG0FWHOP == "S")
    FG0FM001.FG0FMHDS = FG0FW00.FG0FWHDS[1];
  else
    FG0FM001.FG0FMHDS = FG0FW00.FG0FWHDS[2];
  end
  set FG0FM001.FG0FMHDS skip;
  ;
   /* ------------------------------------------------------------*/
   /* obtain current sales and historical sales/demand from*/
   /* temporary storage*/
   /* ------------------------------------------------------------*/
  ;
  FG0FW00.FG0FWPIX = 1;
  ;
  FG0FS07(); /* read temporary storage*/
  ;
  while (FG0FW00.FG0FWPIX <= FG0FW02.FG0FWNLD) /* process temp storage*/
    ;
    set FG0FM001.FG0FMSEL[FG0FWPIX] normal;
    FG0FM001.FG0FMCSL[FG0FWPIX] = FG0FW02.XPLSDESC[FG0FWPIX];
    FG0FM001.FG0FMCSQ[FG0FWPIX] = FG0FW02.FG0FWCSQ[FG0FWPIX];
    FG0FM001.FG0FMQTY[FG0FWPIX] = FG0FW02.FG0FWQTY[FG0FWPIX];
    set FG0FM001.FG0FMQTY[FG0FWPIX] normal;
    FG0FM001.FG0FMLPT[FG0FWPIX] = FG0FW02.FG0FWLPT[FG0FWPIX];
    set FG0FM001.FG0FMLPT[FG0FWPIX] normal;
    set FG0FM001.FG0FMCPT[FG0FWPIX] normal;
    FG0FM001.FG0FMHLD[FG0FWPIX] = FG0FW02.XPLSDESC[FG0FWPIX];
    if (FG0FW01.FG0FWHOP == "S") /* load historical sales data*/
      if (FG0FW01.FG0FWYOP == 1)
        FG0FM001.FG0FMHQT[FG0FWPIX] = FG0FW02.FG0FWHQ1[FG0FWPIX];
        FG0FM001.FG0FMHPC[FG0FWPIX] = FG0FW02.FG0FWHP1[FG0FWPIX];
      end
      if (FG0FW01.FG0FWYOP == 2)
        FG0FM001.FG0FMHQT[FG0FWPIX] = FG0FW02.FG0FWHQ2[FG0FWPIX];
        FG0FM001.FG0FMHPC[FG0FWPIX] = FG0FW02.FG0FWHP2[FG0FWPIX];
      end
      if (FG0FW01.FG0FWYOP == 3)
        FG0FM001.FG0FMHQT[FG0FWPIX] = FG0FW02.FG0FWHQ3[FG0FWPIX];
        FG0FM001.FG0FMHPC[FG0FWPIX] = FG0FW02.FG0FWHP3[FG0FWPIX];
      end
    else /* load historical demand data*/
      if (FG0FW01.FG0FWYOP == 1)
        FG0FM001.FG0FMHQT[FG0FWPIX] = FG0FW02.FG0FWDQ1[FG0FWPIX];
        FG0FM001.FG0FMHPC[FG0FWPIX] = FG0FW02.FG0FWDP1[FG0FWPIX];
      end
      if (FG0FW01.FG0FWYOP == 2)
        FG0FM001.FG0FMHQT[FG0FWPIX] = FG0FW02.FG0FWDQ2[FG0FWPIX];
        FG0FM001.FG0FMHPC[FG0FWPIX] = FG0FW02.FG0FWDP2[FG0FWPIX];
      end
      if (FG0FW01.FG0FWYOP == 3)
        FG0FM001.FG0FMHQT[FG0FWPIX] = FG0FW02.FG0FWDQ3[FG0FWPIX];
        FG0FM001.FG0FMHPC[FG0FWPIX] = FG0FW02.FG0FWDP3[FG0FWPIX];
      end
    end
    ;
    FG0F157(); /* calculate history percent to display on screen*/
    set FG0FM001.FG0FMHPT[FG0FWPIX] normal;
    ;
    FG0FW00.FG0FWPIX = FG0FW00.FG0FWPIX + 1; /* increment load index*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* load forecast and current/historical totals*/
   /* ------------------------------------------------------------*/
  ;
  FG0FM001.FG0FMCSL[FG0FWTIX] = "   TOTAL    ";
  FG0FM001.FG0FMCSQ[FG0FWTIX] = FG0FW03.FG0FWCSQ;
  FG0FM001.FG0FMQTY[FG0FWTIX] = FG0FW03.FG0FWQTY;
  set FG0FM001.FG0FMQTY[FG0FWTIX] skip;
  ;
  if (converseVar.eventKey is pa2)
    FG0F158(); /* recalc the line percent total on refresh*/
  end
  FG0FM001.FG0FMLPT[FG0FWTIX] = FG0FW03.FG0FWLPT;
  set FG0FM001.FG0FMLPT[FG0FWTIX] skip;
  ;
  FG0FM001.FG0FMHLD[FG0FWTIX] = "   TOTAL    ";
  if (FG0FW01.FG0FWHOP == "S") /* load historical sales totals*/
    FG0FM001.FG0FMHQT[FG0FWTIX] = FG0FW03.FG0FWHSQ[FG0FWYOP];
    FG0FM001.FG0FMHPC[FG0FWTIX] = 100;
  else /* load historical demand totals*/
    FG0FM001.FG0FMHQT[FG0FWTIX] = FG0FW03.FG0FWHDQ[FG0FWYOP];
    FG0FM001.FG0FMHPC[FG0FWTIX] = 100;
  end
  ;
  ;
end // end FG0F121

// Check attention identifier
Function FG0F130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    converseLib.clearScreen();
     /* refresh map*/
    ;
    FG0FW00.FG0FWSWF = "Y"; /* format screen m001*/
    FG0FW00.FG0FWSWR = "N"; /* request for data*/
    ;
    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0FM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      if (FG0FM001.CATOAP == "FG0G")
        ;
        FFWREC.XXXMODID = "130"; /* Module identification*/
        converseLib.validationFailed(189); /* Indicate PF key not valid*/
        set FG0FM001.CATOAP cursor, bold; /* Highlight*/
        ;
      else
        ;
        FG0FS01(); /* purge temp storage*/
        FFWREC.FFEWSNBR = 0; /* zero out work sheet number*/
        ;
        XSFFS01(); /* Exit to another application*/
        ;
        FG0FW00.FG0FWSWF = "Y"; /* format screen m001*/
        FG0FW00.FG0FWSWR = "N"; /* request for data*/
        ;
        set FG0FM001.CATOAP cursor, bold; /* Highlight*/
        ;
      end
    else
      ;
      FFWREC.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3  was pressed*/
   || converseVar.eventKey is pf5 /* or PF5  was pressed*/
   || converseVar.eventKey is pf19) /* or PF19 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG0FM001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FG0A"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf19) /* PF3 was pressed*/
      FFWREC.XPLCD = " "; /* Clear line code*/
      COMMAREA.CATOAP = "FG0B"; /* TO application*/
    end
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    FG0FW00.FG0FWSWF = "Y"; /* format screen m001*/
    FG0FW00.FG0FWSWR = "N"; /* request for data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* pf7 was not pressed*/
   && converseVar.eventKey not pf8   /* pf8 was not pressed*/
   && converseVar.eventKey not pf15  /* pf15 was not pressed*/
   && converseVar.eventKey not pf18  /* pf18 was not pressed*/
   && converseVar.eventKey not pf19) /* pf19 was not pressed*/
    ;
    FFWREC.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FG0F130

// Reset highlighted fields
Function FG0F140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FG0FM001.FG0FMBRG initialAttributes; /* begin range*/
  set FG0FM001.FG0FMERG initialAttributes; /* end range*/
  set FG0FM001.FG0FMFTG initialAttributes; /* forecast target*/
  set FG0FM001.FG0FMYOP initialAttributes; /* year option*/
  set FG0FM001.FG0FMHOP initialAttributes; /* history option*/
  set FG0FM001.FG0FMPCT initialAttributes; /* change percent*/
  set FG0FM001.FG0FMCTQ initialAttributes; /* change total qty*/
  ;
  if (FG0FW01.CACHGFL == "Y")
    ;
    FG0FW00.FG0FWIDX = 1; /* init load index*/
    while (FG0FW00.FG0FWIDX <= FG0FW02.FG0FWNLD)
      ;
      set FG0FM001.FG0FMSEL[FG0FWIDX] normal; /* selection field*/
      set FG0FM001.FG0FMQTY[FG0FWIDX] normal; /* current sls fcst qty*/
      set FG0FM001.FG0FMLPT[FG0FWIDX] normal; /* line percent*/
      set FG0FM001.FG0FMHPT[FG0FWIDX] normal; /* history percent*/
      set FG0FM001.FG0FMCPT[FG0FWIDX] normal; /* change percent*/
      ;
      FG0FW00.FG0FWIDX = FG0FW00.FG0FWIDX + 1; /* increment load index*/
      ;
    end
    ;
    set FG0FM001.FG0FMQTY[FG0FWTIX] skip; /* fcst qty total*/
    set FG0FM001.FG0FMLPT[FG0FWTIX] skip; /* line percent total*/
    ;
    set FG0FM001.FG0FMPR1 skip; /* historical description*/
    set FG0FM001.FG0FMDSH skip;
    set FG0FM001.FG0FMPR2 skip;
    set FG0FM001.FG0FMHDS skip;
    ;
  end
  ;
  set FG0FM001.CATOAP initialAttributes;
  set FG0FM001.CAITEM initialAttributes;
  ;
end // end FG0F140

// Verify the entered data
Function FG0F150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "150"; /* Module identification*/
    set FG0FM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify request to page forward(pf7) or backwards(pf8), and*/
   /* check modifiable fields*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    ;
    FG0F151(); /* verify scroll request*/
    ;
    FG0FS09(); /* check modifiable fields*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data loaded, verify modifiable fields*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf15 /* request to save data(pf15)*/
   || converseVar.eventKey is pf18) /* request for history(pf18)*/
    ;
    if (FG0FW01.CACHGFL != "Y") /* no data loaded*/
      ;
      converseLib.validationFailed(18);
      FFWREC.XXXMODID = "150";
      ;
    else
      ;
      FG0FS09(); /* check modifiable fields*/
      ;
      if (converseVar.eventKey is pf18)
        FG0F152(); /* validate year/history option*/
      end
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify line percent total*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf15
   || converseVar.eventKey is pf18)
    ;
    if (FG0FW03.FG0FWUQT != 0
     && FG0FW03.FG0FWLPT != 100)
      converseLib.validationFailed(159);
      FFWREC.XXXMODID = "150";
      set FG0FM001.FG0FMLPT[FG0FWTIX] bold;
      set FG0FM001.FG0FMLPT[1] cursor;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Validate entry fields, selection requests, history options,*/
   /* key data, and re-calculate percents*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter)
    ;
    FG0F153(); /* validate entry fields*/
    ;
    if (FG0FW01.CACHGFL == "Y" /* data loaded and no errors*/
     && converseVar.validationMsgNum == 0)
      ;
      FG0F154(); /* upd temp storage qtys and pcts*/
      ;
      if (FG0FW00.FG0FWDCF == "Y") /* if data changed*/
        FG0F155(); /* re-calculate/load qtys/percentages*/
      end
      ;
    end
    ;
    /* ------------------------------------------------------*/
    /* If key data changed check modifiable fields*/
    /* ------------------------------------------------------*/
    ;
    FG0FW00.FG0FWWBD = FFWREC.FFABEGMO;
    FG0FW00.FG0FWWED = FFWREC.FFAENDMO;
    ;
    if (FG0FM001.FG0FMBRG != FG0FW00.FG0FWBYM /* beg range changed*/
     || FG0FM001.FG0FMBRG == 0                /* beg range changed*/
     || FG0FM001.FG0FMERG != FG0FW00.FG0FWEYM /* end range changed*/
     || FG0FM001.FG0FMERG == 0)               /* end range changed*/
      ;
      if (FG0FW01.CACHGFL == "Y") /* data loaded*/
        FG0F156(); /* key chg: ck modifiable fields*/
      end
      ;
      if (converseVar.validationMsgNum == 0)
        FG0FW00.FG0FWSWR = "Y"; /* request data request*/
        if (FG0FW00.FG0FWFCF != "Y")
          FFWREC.FFEWSNBR = 0; /* init work sheet number*/
        end
      end
      ;
    end
  end
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end
  ;
end // end FG0F150

// verify scroll request
Function FG0F151()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FG0FW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    FFWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FG0FW00.XXXTSPAG >= FG0FW00.TA5TSQIX) /* and no more pages*/
    ;
    FFWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/
    ;
  end
  ;
  ;
end // end FG0F151

// validate year/history opt
Function FG0F152()
  ;
   /* -----------------------------------------------------*/
   /* validate year/history option fields*/
   /* -----------------------------------------------------*/
  ;
  if (FG0FM001.FG0FMHOP != FG0FW01.FG0FWHOP)
    if (FG0FM001.FG0FMHOP != "D"
     && FG0FM001.FG0FMHOP != "S")
      set FG0FM001.FG0FMHOP cursor, bold;
      converseLib.validationFailed(10);
      FFWREC.XXXMODID = "152";
    end
  end
  ;
  if (FG0FM001.FG0FMYOP != FG0FW01.FG0FWYOP)
    if (FG0FM001.FG0FMYOP != 1
     && FG0FM001.FG0FMYOP != 2
     && FG0FM001.FG0FMYOP != 3)
      set FG0FM001.FG0FMYOP cursor, bold;
      converseLib.validationFailed(10);
      FFWREC.XXXMODID = "152";
    end
  end
  ;
  ;
end // end FG0F152

// validate modifiable data
Function FG0F153()
   /* ------------------------------------------------------------*/
   /* Init flags*/
   /* ------------------------------------------------------------*/
  ;
  FG0FW00.FG0FWERF = "N"; /* error flag*/
  FG0FW00.FG0FWLPF = "N"; /* line percent entered flag*/
  FG0FW00.FG0FWSLF = "N"; /* selection flag*/
  ;
   /* ------------------------------------------------------------*/
   /* Validate line fcst qtys*/
   /* ------------------------------------------------------------*/
  ;
  FG0FW00.FG0FWIDX = FG0FW02.FG0FWNLD; /* nbr of lines*/
  ;
  while (FG0FW00.FG0FWIDX >= 1) /* process temp storage*/
    ;
    if (FG0FM001.FG0FMQTY[FG0FWIDX] != FG0FW02.FG0FWQTY[FG0FWIDX])
      FFXREC.FFXCHAR = FG0FM001.FG0FMQTY[FG0FWIDX];
      XSFFS11(); /* convert fcst to units*/
      if (FFXREC.FFXRTNCD != "0")
        converseLib.validationFailed(10); /* Indicate missing or invalid*/
        FFWREC.XXXMODID = "153";
        set FG0FM001.FG0FMQTY[FG0FWIDX] cursor, bold; /* Highlight*/
      else
        if (FFXREC.FFXNUMB < 0)
          converseLib.validationFailed(10); /* Indicate missing or invalid*/
          FFWREC.XXXMODID = "153";
          set FG0FM001.FG0FMQTY[FG0FWIDX] cursor, bold; /* Highlight*/
        end
        XSFFS10();
                                   /* ; translate units to thousands*/
        FG0FM001.FG0FMQTY[FG0FWIDX] = FFXREC.FFXCHAR;
      end
    end
    ;
    FG0FW00.FG0FWIDX = FG0FW00.FG0FWIDX - 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Validate the global change total qty field*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0FM001.FG0FMCTQ != " ")
    FFXREC.FFXCHAR = FG0FM001.FG0FMCTQ;
    XSFFS11(); /* global change total to units*/
    if (FFXREC.FFXRTNCD != "0")
      converseLib.validationFailed(10); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "153";
      set FG0FM001.FG0FMCTQ cursor, bold; /* Highlight*/
    else
      if (FFXREC.FFXNUMB < 0)
        converseLib.validationFailed(10); /* cannot be negative number*/
        FFWREC.XXXMODID = "153";
        set FG0FM001.FG0FMCTQ cursor, bold; /* Highlight*/
      else
        if (FG0FW03.FG0FWUQT == 0)
          converseLib.validationFailed(234); /* total must exist to modify*/
          FFWREC.XXXMODID = "153";
          set FG0FM001.FG0FMCTQ cursor, bold; /* Highlight*/
        end
      end
      XSFFS10();
      FG0FM001.FG0FMCTQ = FFXREC.FFXCHAR;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Validate the global change percent field*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0FM001.FG0FMPCT != 0)
    if (FG0FM001.FG0FMPCT > 100)
      converseLib.validationFailed(10);
      FFWREC.XXXMODID = "153";
      set FG0FM001.FG0FMPCT cursor, bold;
    else
      if (FG0FW03.FG0FWUQT == 0)
        converseLib.validationFailed(234); /* total must exist to modify*/
        FFWREC.XXXMODID = "153";
        set FG0FM001.FG0FMPCT cursor, bold; /* Highlight*/
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Validate year/history option field*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0FM001.FG0FMHOP != FG0FW01.FG0FWHOP
   || FG0FM001.FG0FMYOP != FG0FW01.FG0FWYOP)
    ;
    if (FG0FM001.FG0FMHOP != FG0FW01.FG0FWHOP)
      if (FG0FM001.FG0FMHOP != "S"
       && FG0FM001.FG0FMHOP != "D")
        converseLib.validationFailed(10);
        FFWREC.XXXMODID = "153";
        set FG0FM001.FG0FMHOP cursor, bold;
      end
    end
    ;
    if (FG0FM001.FG0FMYOP != FG0FW01.FG0FWYOP)
      if (FG0FM001.FG0FMYOP != 1
       && FG0FM001.FG0FMYOP != 2
       && FG0FM001.FG0FMYOP != 3)
        converseLib.validationFailed(10);
        FFWREC.XXXMODID = "153";
        set FG0FM001.FG0FMYOP cursor, bold;
      end
    end
    ;
    FG0FS09(); /* check modifiable fields*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Validate forecast target qty*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0FM001.FG0FMFTG != FG0FW01.FG0FWFTG)
    FFXREC.FFXCHAR = FG0FM001.FG0FMFTG;
    XSFFS11(); /* forecast target qty*/
    if (FFXREC.FFXRTNCD != "0")
      converseLib.validationFailed(10); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "153";
      set FG0FM001.FG0FMFTG cursor, bold; /* Highlight*/
    else
      if (FFXREC.FFXNUMB < 0)
        converseLib.validationFailed(10); /* Indicate missing or invalid*/
        FFWREC.XXXMODID = "153";
        set FG0FM001.FG0FMFTG cursor, bold; /* Highlight*/
      end
      ;
      FG0FW00.FG0FWSUT = FFXREC.FFXNUMB;
      XSFFS10();
      FG0FM001.FG0FMFTG = FFXREC.FFXCHAR;
      FG0FW00.FG0FWSTG = FFXREC.FFXCHAR;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Validate end yymm range and begin yymm range*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty;
  ;
  FFZREC.FFZMONTH = 6;
  FFZREC.FFZBYYMM = FG0FM001.FG0FMBRG;
  FFZREC.FFZEYYMM = FG0FM001.FG0FMERG;
  ;
  XSFFS35(); /* edit date range*/
  ;
  if (FFZREC.FFZENDRC == "1")
    set FG0FM001.FG0FMERG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "153";
  else
    if (FFZREC.FFZENDRC == "2")
      set FG0FM001.FG0FMERG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "153";
    else
      if (FFZREC.FFZENDRC == "3")
        set FG0FM001.FG0FMERG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "153";
      end
    end
  end
  ;
  if (FFZREC.FFZBEGRC == "1")
    set FG0FM001.FG0FMBRG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "153";
  else
    if (FFZREC.FFZBEGRC == "2")
      set FG0FM001.FG0FMBRG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "153";
    else
      if (FFZREC.FFZBEGRC == "3")
        set FG0FM001.FG0FMBRG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "153";
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify if a mutually exclusive field was entered*/
   /* ------------------------------------------------------------*/
  ;
  FG0FW00.FG0FWIDX = FG0FW02.FG0FWNLD; /* nbr of lines*/
  ;
  while (FG0FW00.FG0FWIDX >= 1) /* process temp storage*/
    ;
    if (FG0FM001.FG0FMCPT[FG0FWIDX] != 0)
      if (FG0FM001.FG0FMHPT[FG0FWIDX] != FG0FW01.FG0FWHPS[FG0FWIDX]
       || FG0FM001.FG0FMLPT[FG0FWIDX] != FG0FW02.FG0FWLPT[FG0FWIDX]
       || FG0FM001.FG0FMQTY[FG0FWIDX] != FG0FW02.FG0FWQTY[FG0FWIDX]
       || FG0FM001.FG0FMCTQ != " "
       || FG0FM001.FG0FMPCT != 0)
        FG0FW00.FG0FWERF = "Y";
      else
        FG0FW00.FG0FWPIX = FG0FW00.FG0FWIDX - 1;
        while (FG0FW00.FG0FWPIX >= 1)
          if (FG0FM001.FG0FMHPT[FG0FWPIX] != FG0FW01.FG0FWHPS[FG0FWPIX]
           || FG0FM001.FG0FMLPT[FG0FWPIX] != FG0FW02.FG0FWLPT[FG0FWPIX]
           || FG0FM001.FG0FMQTY[FG0FWPIX] != FG0FW02.FG0FWQTY[FG0FWPIX])
            FG0FW00.FG0FWERF = "Y";
          end
          FG0FW00.FG0FWPIX = FG0FW00.FG0FWPIX - 1;
        end
      end
    end
    ;
    if (FG0FM001.FG0FMHPT[FG0FWIDX] != FG0FW01.FG0FWHPS[FG0FWIDX])
      if (FG0FM001.FG0FMCPT[FG0FWIDX] != 0
       || FG0FM001.FG0FMLPT[FG0FWIDX] != FG0FW02.FG0FWLPT[FG0FWIDX]
       || FG0FM001.FG0FMQTY[FG0FWIDX] != FG0FW02.FG0FWQTY[FG0FWIDX]
       || FG0FM001.FG0FMCTQ != " "
       || FG0FM001.FG0FMPCT != 0)
        FG0FW00.FG0FWERF = "Y";
      else
        FG0FW00.FG0FWPIX = FG0FW00.FG0FWIDX - 1;
        while (FG0FW00.FG0FWPIX >= 1)
          if (FG0FM001.FG0FMCPT[FG0FWPIX] != 0
           || FG0FM001.FG0FMLPT[FG0FWPIX] != FG0FW02.FG0FWLPT[FG0FWPIX]
           || FG0FM001.FG0FMQTY[FG0FWPIX] != FG0FW02.FG0FWQTY[FG0FWPIX])
            FG0FW00.FG0FWERF = "Y";
          end
          FG0FW00.FG0FWPIX = FG0FW00.FG0FWPIX - 1;
        end
      end
    end
    ;
    if (FG0FM001.FG0FMLPT[FG0FWIDX] != FG0FW02.FG0FWLPT[FG0FWIDX])
      FG0FW00.FG0FWLPF = "Y";
      if (FG0FM001.FG0FMCPT[FG0FWIDX] != 0
       || FG0FM001.FG0FMHPT[FG0FWIDX] != FG0FW01.FG0FWHPS[FG0FWIDX]
       || FG0FM001.FG0FMQTY[FG0FWIDX] != FG0FW02.FG0FWQTY[FG0FWIDX]
       || FG0FM001.FG0FMCTQ != " "
       || FG0FM001.FG0FMPCT != 0)
        FG0FW00.FG0FWERF = "Y";
      else
        FG0FW00.FG0FWPIX = FG0FW00.FG0FWIDX - 1;
        while (FG0FW00.FG0FWPIX >= 1)
          if (FG0FM001.FG0FMCPT[FG0FWPIX] != 0
           || FG0FM001.FG0FMHPT[FG0FWPIX] != FG0FW01.FG0FWHPS[FG0FWPIX]
           || FG0FM001.FG0FMQTY[FG0FWPIX] != FG0FW02.FG0FWQTY[FG0FWPIX])
            FG0FW00.FG0FWERF = "Y";
          end
          FG0FW00.FG0FWPIX = FG0FW00.FG0FWPIX - 1;
        end
      end
    end
    ;
    if (FG0FM001.FG0FMQTY[FG0FWIDX] != FG0FW02.FG0FWQTY[FG0FWIDX])
      if (FG0FM001.FG0FMCPT[FG0FWIDX] != 0
       || FG0FM001.FG0FMHPT[FG0FWIDX] != FG0FW01.FG0FWHPS[FG0FWIDX]
       || FG0FM001.FG0FMLPT[FG0FWIDX] != FG0FW02.FG0FWLPT[FG0FWIDX]
       || FG0FM001.FG0FMCTQ != " "
       || FG0FM001.FG0FMPCT != 0)
        FG0FW00.FG0FWERF = "Y";
      else
        FG0FW00.FG0FWPIX = FG0FW00.FG0FWIDX - 1;
        while (FG0FW00.FG0FWPIX >= 1)
          if (FG0FM001.FG0FMCPT[FG0FWPIX] != 0
           || FG0FM001.FG0FMHPT[FG0FWPIX] != FG0FW01.FG0FWHPS[FG0FWPIX]
           || FG0FM001.FG0FMLPT[FG0FWPIX] != FG0FW02.FG0FWLPT[FG0FWPIX])
            FG0FW00.FG0FWERF = "Y";
          end
          FG0FW00.FG0FWPIX = FG0FW00.FG0FWPIX - 1;
        end
      end
    end
    ;
    FG0FW00.FG0FWIDX = FG0FW00.FG0FWIDX - 1; /* decrement table index*/
    ;
  end
  ;
  if (FG0FM001.FG0FMCTQ != " "
   && FG0FM001.FG0FMPCT != 0)
    FG0FW00.FG0FWERF = "Y";
  end
  ;
   /* ------------------------------------------------------------*/
   /* If mutually exclusive field was entered highlight all*/
   /* fields that have changed*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0FW00.FG0FWERF == "Y")
    ;
    FG0FW00.FG0FWIDX = FG0FW02.FG0FWNLD; /* nbr of lines*/
    ;
    while (FG0FW00.FG0FWIDX >= 1) /* process temp storage*/
      ;
      if (FG0FM001.FG0FMCPT[FG0FWIDX] != 0)
        set FG0FM001.FG0FMCPT[FG0FWIDX] cursor, bold;
      end
      if (FG0FM001.FG0FMHPT[FG0FWIDX] != FG0FW01.FG0FWHPS[FG0FWIDX])
        set FG0FM001.FG0FMHPT[FG0FWIDX] cursor, bold;
      end
      if (FG0FM001.FG0FMLPT[FG0FWIDX] != FG0FW02.FG0FWLPT[FG0FWIDX])
        set FG0FM001.FG0FMLPT[FG0FWIDX] cursor, bold;
      end
      if (FG0FM001.FG0FMQTY[FG0FWIDX] != FG0FW02.FG0FWQTY[FG0FWIDX])
        set FG0FM001.FG0FMQTY[FG0FWIDX] cursor, bold;
      end
      ;
      FG0FW00.FG0FWIDX = FG0FW00.FG0FWIDX - 1;
      ;
    end
    ;
    if (FG0FM001.FG0FMCTQ != " ")
      set FG0FM001.FG0FMCTQ cursor, bold;
    end
    if (FG0FM001.FG0FMPCT != 0)
      set FG0FM001.FG0FMPCT cursor, bold;
    end
    ;
    converseLib.validationFailed(233);
    FFWREC.XXXMODID = "153";
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Validate forecast target qty/fcst total qty for line pct*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0FW00.FG0FWERF != "Y"
   && FG0FW00.FG0FWLPF == "Y"
   && FG0FW03.FG0FWUQT == 0)
    if (FG0FM001.FG0FMFTG == "    0"
     || FG0FM001.FG0FMFTG == " ")
      converseLib.validationFailed(8); /* required field*/
      FFWREC.XXXMODID = "153";
      set FG0FM001.FG0FMFTG cursor, bold; /* Highlight*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Validate 's'election field*/
   /* ------------------------------------------------------------*/
  ;
  FG0FW00.FG0FWIDX = FG0FW02.FG0FWNLD; /* nbr of lines loaded*/
  ;
  while (FG0FW00.FG0FWIDX >= 1)
    ;
    if (FG0FM001.FG0FMSEL[FG0FWIDX] != " "
     && FG0FM001.FG0FMSEL[FG0FWIDX] != "S")
      FFWREC.XXXMODID = "153";
      converseLib.validationFailed(41);
      set FG0FM001.FG0FMSEL[FG0FWIDX] cursor, bold;
    else
      if (FG0FM001.FG0FMSEL[FG0FWIDX] == "S")
        if (FG0FM001.FG0FMQTY[FG0FWIDX] == "  ") /* no fcst*/
          FFWREC.XXXMODID = "153";
          converseLib.validationFailed(329);
          set FG0FM001.FG0FMSEL[FG0FWIDX] cursor, bold;
        else
          FFWREC.XPLCD = FG0FW02.XPLCD[FG0FWIDX];
          FG0FW00.FG0FWSLF = "Y"; /* data selected*/
        end
      end
    end
    ;
    FG0FW00.FG0FWSLC = FG0FW00.FG0FWIDX - 1;
    ;
    while (FG0FW00.FG0FWSLC >= 1)
      ;
      if (FG0FM001.FG0FMSEL[FG0FWSLC] > " "
       && FG0FM001.FG0FMSEL[FG0FWIDX] > " ")
        FFWREC.XXXMODID = "153";
        converseLib.validationFailed(136);
        set FG0FM001.FG0FMSEL[FG0FWIDX] cursor, bold;
      end
      ;
      FG0FW00.FG0FWSLC = FG0FW00.FG0FWSLC - 1;
      ;
    end
    ;
    FG0FW00.FG0FWIDX = FG0FW00.FG0FWIDX - 1;
    ;
  end
  ;
   /* -----------------------------------------------------*/
   /* Check modified fields*/
   /* -----------------------------------------------------*/
  ;
  if (FG0FW00.FG0FWSLF == "Y")
    ;
    FG0FS09();
    ;
  end
  ;
  if (FG0FW01.CACHGFL == "Y")
    FG0F158(); /* recalc the line percent total*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Validate line percent total*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0FW01.CACHGFL == "Y"  
   && FG0FW00.FG0FWERF == "N" /* if no mutually excl. errors were found*/
   && FG0FW03.FG0FWLPT != 100 
   && FG0FW03.FG0FWUQT != 0) 
    ;
    FG0FW00.FG0FWIDX = FG0FW02.FG0FWNLD; /* nbr of lines*/
    while (FG0FW00.FG0FWIDX >= 1) /* process temp storage*/
      ;
      if (FG0FM001.FG0FMCPT[FG0FWIDX] != 0)
        set FG0FM001.FG0FMCPT[FG0FWIDX] bold;
      end
      if (FG0FM001.FG0FMHPT[FG0FWIDX] != FG0FW01.FG0FWHPS[FG0FWIDX])
        set FG0FM001.FG0FMHPT[FG0FWIDX] bold;
      end
      if (FG0FM001.FG0FMLPT[FG0FWIDX] != FG0FW02.FG0FWLPT[FG0FWIDX])
        set FG0FM001.FG0FMLPT[FG0FWIDX] bold;
      end
      if (FG0FM001.FG0FMQTY[FG0FWIDX] != FG0FW02.FG0FWQTY[FG0FWIDX])
        set FG0FM001.FG0FMQTY[FG0FWIDX] bold;
      end
      ;
      FG0FW00.FG0FWIDX = FG0FW00.FG0FWIDX - 1;
      ;
    end
    ;
    if (FG0FM001.FG0FMCTQ != " ")
      set FG0FM001.FG0FMCTQ cursor, bold;
    end
    if (FG0FM001.FG0FMPCT != 0)
      set FG0FM001.FG0FMPCT cursor, bold;
    end
    ;
    set FG0FM001.FG0FMLPT[1] cursor;
    set FG0FM001.FG0FMLPT[FG0FWTIX] skip, bold;
    converseLib.validationFailed(159);
    FFWREC.XXXMODID = "153";
  end
  ;
  ;
end // end FG0F153

// upd temp storage qtys/pcts
Function FG0F154()
  ;
   /* ------------------------------------------------------------*/
   /* init qty change flag*/
   /* ------------------------------------------------------------*/
  ;
  FG0FW00.FG0FWQTF = "N"; /* qty change flag*/
  FG0FW00.FG0FWFTF = "N"; /* fcst target qty flag*/
  ;
   /* ------------------------------------------------------------*/
   /* save current temporary storage page nbr*/
   /* ------------------------------------------------------------*/
  ;
  FG0FW00.FG0FWSTP = FG0FW00.XXXTSPAG;
  ;
   /* ------------------------------------------------------------*/
   /* forecast target qty*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0FM001.FG0FMFTG != FG0FW01.FG0FWFTG)
    ;
    FFXREC.FFXCHAR = FG0FM001.FG0FMFTG;
    XSFFS11();
    FG0FW01.FG0FWUFT = FFXREC.FFXNUMB;
    XSFFS10();
    FG0FW01.FG0FWFTG = FFXREC.FFXCHAR;
    ;
    FG0FW00.FG0FWDCF = "Y";
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* global change percent entered*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0FM001.FG0FMPCT != 0)
    ;
    FG0FW00.FG0FWIDX = 1; /* process all pages in working storage*/
    while (FG0FW00.FG0FWIDX <= FG0FW00.TA5TSQIX)
      ;
      FG0FW00.FG0FWDMF = "N"; /* data modified flag*/
      FG0FW00.XXXTSPAG = FG0FW00.FG0FWIDX;
      ;
      FG0FS07(); /* read temporary storage*/
      ;
      FG0FW00.FG0FWPIX = FG0FW02.FG0FWNLD;
      while (FG0FW00.FG0FWPIX >= 1)
        if (FG0FW02.FG0FWUQT[FG0FWPIX] != 0)
          ;
           /* calculate the adjustment qty*/
          ;
          FG0FW00.FG0FWNM1 = FG0FM001.FG0FMPCT * FG0FW02.FG0FWUQT[FG0FWPIX];
          FG0FW00.FG0FWNM1 = FG0FW00.FG0FWNM1 / 100; /* adjustment qty*/
          ;
           /* calculate the new forecast qty*/
          ;
          FFXREC.FFXNUMB = FG0FW02.FG0FWUQT[FG0FWPIX] + FG0FW00.FG0FWNM1;
          FG0FW02.FG0FWUQT[FG0FWPIX] = FFXREC.FFXNUMB;
          XSFFS10();
          FG0FW02.FG0FWQTY[FG0FWPIX] = FFXREC.FFXCHAR;
          FG0FW02.FG0FWQUP[FG0FWPIX] = "Y"; /* Set qty upd flag*/
          ;
           /* calculate the forecast total qty*/
          ;
          FG0FW03.FG0FWUQT = FG0FW03.FG0FWUQT + FG0FW00.FG0FWNM1;
          ;
          FG0FW00.FG0FWDMF = "Y";
          ;
        end
        ;
        FG0FW00.FG0FWPIX = FG0FW00.FG0FWPIX - 1;
        ;
      end
      ;
      if (FG0FW00.FG0FWDMF == "Y")
        FG0FS08(); /* update temporary storage*/
        FG0FW00.FG0FWDCF = "Y";
        FG0FW00.FG0FWQTF = "Y";
      end
      ;
      FG0FW00.FG0FWIDX = FG0FW00.FG0FWIDX + 1;
      ;
    end
    ;
    return;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* global change total qty entered*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0FM001.FG0FMCTQ != " ")
    ;
     /* load new forecast total qty*/
    ;
    FFXREC.FFXCHAR = FG0FM001.FG0FMCTQ;
    XSFFS11();
    FG0FW03.FG0FWUQT = FFXREC.FFXNUMB; /* tot fcst qty*/
    XSFFS10();
    FG0FW03.FG0FWQTY = FFXREC.FFXCHAR;
    ;
    FG0FW00.FG0FWIDX = 1; /* process all pages in working storage*/
    while (FG0FW00.FG0FWIDX <= FG0FW00.TA5TSQIX)
      ;
      FG0FW00.FG0FWDMF = "N"; /* data modified flag*/
      FG0FW00.XXXTSPAG = FG0FW00.FG0FWIDX;
      ;
      FG0FS07(); /* read temporary storage*/
      ;
      FG0FW00.FG0FWPIX = FG0FW02.FG0FWNLD;
      while (FG0FW00.FG0FWPIX >= 1)
        if (FG0FW02.FG0FWLPT[FG0FWPIX] != 0)
          ;
           /* calculate new forecast qtys*/
          ;
          FG0FW00.FG0FWNM1 = FG0FW02.FG0FWLPT[FG0FWPIX] * FG0FW03.FG0FWUQT;
          FG0FW00.FG0FWNM1 = FG0FW00.FG0FWNM1 / 100;
          ;
          FG0FW02.FG0FWUQT[FG0FWPIX] = FG0FW00.FG0FWNM1;
          FFXREC.FFXNUMB = FG0FW00.FG0FWNM1;
          XSFFS10();
          FG0FW02.FG0FWQTY[FG0FWPIX] = FFXREC.FFXCHAR;
          ;
          FG0FW02.FG0FWQUP[FG0FWPIX] = "Y"; /* Set qty upd flag*/
          FG0FW00.FG0FWDMF = "Y";
          ;
        end
        ;
        FG0FW00.FG0FWPIX = FG0FW00.FG0FWPIX - 1;
        ;
      end
      ;
      if (FG0FW00.FG0FWDMF == "Y")
        FG0FS08(); /* update temporary storage*/
        FG0FW00.FG0FWDCF = "Y";
        FG0FW00.FG0FWQTF = "Y";
      end
      ;
      FG0FW00.FG0FWIDX = FG0FW00.FG0FWIDX + 1;
      ;
    end
    ;
    return;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* process product line qty/percentages*/
   /* ------------------------------------------------------------*/
  ;
  FG0FW00.FG0FWPIX = FG0FW02.FG0FWNLD;
  while (FG0FW00.FG0FWPIX >= 1)
    ;
    /* ------------------------------------------------------------*/
     /* change sales forecast quantity if changed*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0FM001.FG0FMQTY[FG0FWPIX] != FG0FW02.FG0FWQTY[FG0FWPIX])
      ;
       /* calculate the difference between the new and old forecast*/
       /* qtys and adjust the forecast total qty using the difference*/
      ;
      FFXREC.FFXCHAR = FG0FM001.FG0FMQTY[FG0FWPIX];
      XSFFS11();
      FG0FW00.FG0FWNM1 = FFXREC.FFXNUMB - FG0FW02.FG0FWUQT[FG0FWPIX];
      FG0FW03.FG0FWUQT = FG0FW03.FG0FWUQT + FG0FW00.FG0FWNM1;
      ;
       /* load the new forecast qty*/
      ;
      FG0FW02.FG0FWUQT[FG0FWPIX] = FFXREC.FFXNUMB;
      XSFFS10();
      FG0FW02.FG0FWQTY[FG0FWPIX] = FFXREC.FFXCHAR;
      ;
      FG0FW02.FG0FWQUP[FG0FWPIX] = "Y"; /* Set qty upd flag*/
      FG0FW00.FG0FWDCF = "Y";
      FG0FW00.FG0FWQTF = "Y";
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* calculate line percent if changed*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0FM001.FG0FMLPT[FG0FWPIX] != FG0FW02.FG0FWLPT[FG0FWPIX])
      ;
       /* load/calculate line percent*/
      ;
      FG0FW00.FG0FWPC1 = FG0FM001.FG0FMLPT[FG0FWPIX];
      FG0FW00.FG0FWPC1 = FG0FW00.FG0FWPC1 - FG0FW02.FG0FWLPT[FG0FWPIX];
      FG0FW02.FG0FWLPT[FG0FWPIX] = FG0FM001.FG0FMLPT[FG0FWPIX];
      ;
       /* calculate the new forecast qty*/
      ;
      if (FG0FW03.FG0FWUQT == 0)
        FG0FW00.FG0FWNM1 = FG0FW02.FG0FWLPT[FG0FWPIX] * FG0FW01.FG0FWUFT;
        FG0FW00.FG0FWNM1 = FG0FW00.FG0FWNM1 / 100; /* new fcst qty*/
        FG0FW03.FG0FWUQT = FG0FW01.FG0FWUFT;
      else
        FG0FW00.FG0FWNM1 = FG0FW02.FG0FWLPT[FG0FWPIX] * FG0FW03.FG0FWUQT;
        FG0FW00.FG0FWNM1 = FG0FW00.FG0FWNM1 / 100; /* new fcst qty*/
      end
      ;
       /* load new forecast qtys*/
      ;
      FG0FW02.FG0FWUQT[FG0FWPIX] = FG0FW00.FG0FWNM1; /* fcst qty*/
      FFXREC.FFXNUMB = FG0FW00.FG0FWNM1;
      XSFFS10();
      FG0FW02.FG0FWQTY[FG0FWPIX] = FFXREC.FFXCHAR;
      ;
      FG0FW02.FG0FWQUP[FG0FWPIX] = "Y"; /* Set qty upd flag*/
      FG0FW00.FG0FWDCF = "Y";
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* calculate history percent if entered*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0FM001.FG0FMHPT[FG0FWPIX] != FG0FW01.FG0FWHPS[FG0FWPIX])
      ;
       /* load fields used for calculations*/
      ;
      FG0FW00.FG0FWNM1 = FG0FW02.FG0FWUQT[FG0FWPIX];
      if (FG0FM001.FG0FMHOP == "S")
        if (FG0FM001.FG0FMYOP == 1)
          FG0FW00.FG0FWNM2 = FG0FW02.FG0FWUH1[FG0FWPIX];
        end
        if (FG0FM001.FG0FMYOP == 2)
          FG0FW00.FG0FWNM2 = FG0FW02.FG0FWUH2[FG0FWPIX];
        end
        if (FG0FM001.FG0FMYOP == 3)
          FG0FW00.FG0FWNM2 = FG0FW02.FG0FWUH3[FG0FWPIX];
        end
      else
        if (FG0FM001.FG0FMYOP == 1)
          FG0FW00.FG0FWNM2 = FG0FW02.FG0FWUD1[FG0FWPIX];
        end
        if (FG0FM001.FG0FMYOP == 2)
          FG0FW00.FG0FWNM2 = FG0FW02.FG0FWUD2[FG0FWPIX];
        end
        if (FG0FM001.FG0FMYOP == 3)
          FG0FW00.FG0FWNM2 = FG0FW02.FG0FWUD3[FG0FWPIX];
        end
      end
      ;
       /* calculate the new forecast qty*/
      ;
      FG0FW00.FG0FWNM3 = FG0FM001.FG0FMHPT[FG0FWPIX] * FG0FW00.FG0FWNM2;
      FG0FW00.FG0FWNM3 = FG0FW00.FG0FWNM3 / 100; /* new fcst qty*/
      ;
       /* calculate the total forecast qty*/
      ;
      FG0FW00.FG0FWNM4 = FG0FW00.FG0FWNM3 - FG0FW00.FG0FWNM1; /* difference*/
      FG0FW03.FG0FWUQT = FG0FW03.FG0FWUQT + FG0FW00.FG0FWNM4;
      ;
       /* load new forecast qtys*/
      ;
      FG0FW02.FG0FWUQT[FG0FWPIX] = FG0FW00.FG0FWNM3; /* fcst qty*/
      FFXREC.FFXNUMB = FG0FW00.FG0FWNM3;
      XSFFS10();
      FG0FW02.FG0FWQTY[FG0FWPIX] = FFXREC.FFXCHAR;
      ;
      FG0FW02.FG0FWQUP[FG0FWPIX] = "Y"; /* Set qty upd flag*/
      FG0FW00.FG0FWDCF = "Y";
      FG0FW00.FG0FWQTF = "Y";
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* calculate change percent if entered*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0FM001.FG0FMCPT[FG0FWPIX] != 0)
      ;
      FG0FW00.FG0FWNM1 = FG0FW02.FG0FWUQT[FG0FWPIX]; /* fcst qty*/
      ;
       /* calculate the adjustment qty*/
      ;
      FG0FW00.FG0FWNM2 = FG0FM001.FG0FMCPT[FG0FWPIX] * FG0FW00.FG0FWNM1;
      FG0FW00.FG0FWNM2 = FG0FW00.FG0FWNM2 / 100; /* adjustment qty*/
      ;
       /* calculate the new forecast qty*/
      ;
      FG0FW02.FG0FWUQT[FG0FWPIX] = FG0FW00.FG0FWNM1 + FG0FW00.FG0FWNM2;
      FFXREC.FFXNUMB = FG0FW00.FG0FWNM1 + FG0FW00.FG0FWNM2;
      XSFFS10();
      FG0FW02.FG0FWQTY[FG0FWPIX] = FFXREC.FFXCHAR;
      ;
       /* calculate the new forecast total qty*/
      ;
      FG0FW03.FG0FWUQT = FG0FW03.FG0FWUQT + FG0FW00.FG0FWNM2;
      ;
      FG0FW00.FG0FWDCF = "Y";
      FG0FW00.FG0FWQTF = "Y";
      ;
    end
    if (FG0FW02.FG0FWQUP[FG0FWPIX] == "Y")
      FG0F157(); /* recalculate the history percent if qty changed*/
    end
    ;
    FG0FW00.FG0FWPIX = FG0FW00.FG0FWPIX - 1; /* line index*/
    ;
    if (FG0FW00.FG0FWPIX == 0
     && FG0FW00.FG0FWDCF == "Y")
      FG0FS08(); /* update temporary storage*/
    end
  end
  ;
  ;
end // end FG0F154

// re-calculate line percents
Function FG0F155()
  ;
   /* ----------------------------------------------------------*/
   /* if qty changed re-calculate product line fcst percentages*/
   /* ----------------------------------------------------------*/
  ;
  ;
  if (FG0FW00.FG0FWQTF == "Y")
    FG0FW03.FG0FWLPT = 0; /* initialize the line tot pct*/
    FG0FW00.FG0FWIDX = 1; /* init nbr of pages index*/
    while (FG0FW00.FG0FWIDX <= FG0FW00.TA5TSQIX)
      FG0FW00.XXXTSPAG = FG0FW00.FG0FWIDX; /* process temp storage*/
      FG0FS07(); /* read temp storage*/
      FG0FW00.FG0FWPIX = FG0FW02.FG0FWNLD;
      while (FG0FW00.FG0FWPIX >= 1)
        ;
        if (FG0FW02.FG0FWUQT[FG0FWPIX] != 0)
          FG0FW00.FG0FWNM1 = FG0FW02.FG0FWUQT[FG0FWPIX] * 100;
          FG0FW02.FG0FWLPT[FG0FWPIX] = mathLib.round(FG0FW00.FG0FWNM1 / FG0FW03.FG0FWUQT, -mathLib.decimals(FG0FW02.FG0FWLPT[FG0FWPIX]));
        else
          FG0FW02.FG0FWLPT[FG0FWPIX] = 0;
        end
        ;
        FG0FW03.FG0FWLPT = FG0FW03.FG0FWLPT + FG0FW02.FG0FWLPT[FG0FWPIX];
        FG0FW00.FG0FWPIX = FG0FW00.FG0FWPIX - 1; /* decrement line index*/
        ;
      end
      ;
      FG0FS08(); /* update temporary storage*/
      ;
      FG0FW00.FG0FWIDX = FG0FW00.FG0FWIDX + 1; /* increment page index*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* load total forecast qty, and total line percent*/
   /* ------------------------------------------------------------*/
  ;
   /* translate total forecast qty*/
  ;
  FFXNUMB = FG0FW03.FG0FWUQT;
  XSFFS10();
  FG0FW03.FG0FWQTY = FFXCHAR;
  ;
   /* ------------------------------------------------------------*/
   /* re-calculate variance qty : total forecast qty - target qty*/
   /* ------------------------------------------------------------*/
  ;
  FG0FW01.FG0FWUVQ = FG0FW03.FG0FWUQT - FG0FW01.FG0FWUFT;
  ;
  FFXREC.FFXNUMB = FG0FW01.FG0FWUVQ;
  XSFFS10();
  FG0FW01.FG0FWVQT = FFXREC.FFXCHAR;
  ;
   /* ------------------------------------------------------------*/
   /* re-calculate variance percent :*/
     /* (variance qty * 100) / target qty*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0FW01.FG0FWUFT != 0)
    FG0FW00.FG0FWNM1 = FG0FW01.FG0FWUVQ * 100;
    FG0FW01.FG0FWVPT = FG0FW00.FG0FWNM1 / FG0FW01.FG0FWUFT;
  else
    FG0FW01.FG0FWVPT = 0;
  end
  ;
end // end FG0F155

// key chg: ck modifiable fields
Function FG0F156()
  ;
   /* -----------------------------------------------------*/
   /* verify modifiable fields on current page*/
   /* -----------------------------------------------------*/
  ;
  FG0FW00.FG0FWPIX = FG0FW02.FG0FWNLD; /* nbr of lines loaded*/
  ;
  while (FG0FW00.FG0FWPIX >= 1) /* process temp storage*/
    ;
    if (FG0FM001.FG0FMCPT[FG0FWPIX] != 0)
      set FG0FM001.FG0FMCPT[FG0FWPIX] cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "156";
    end
    if (FG0FM001.FG0FMHPT[FG0FWPIX] != FG0FW01.FG0FWHPS[FG0FWPIX])
      set FG0FM001.FG0FMHPT[FG0FWPIX] cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "156";
    end
    if (FG0FM001.FG0FMLPT[FG0FWPIX] != FG0FW02.FG0FWSPT[FG0FWPIX])
      set FG0FM001.FG0FMLPT[FG0FWPIX] cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "156";
    end
    if (FG0FW02.FG0FWUQT[FG0FWPIX] != FG0FW02.FG0FWSQT[FG0FWPIX])
      set FG0FM001.FG0FMQTY[FG0FWPIX] cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "156";
    end
    if (FG0FM001.FG0FMSEL[FG0FWPIX] != " ")
      set FG0FM001.FG0FMSEL[FG0FWPIX] cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "156";
    end
    ;
    FG0FW00.FG0FWPIX = FG0FW00.FG0FWPIX - 1; /* decrement table index*/
    ;
  end
  ;
  if (FG0FM001.FG0FMCTQ != " ")
    set FG0FM001.FG0FMCTQ cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "156";
  end
  ;
  if (FG0FM001.FG0FMPCT != 0)
    set FG0FM001.FG0FMPCT cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "156";
  end
  ;
  if (FG0FM001.FG0FMHOP != FG0FW01.FG0FWHOP)
    set FG0FM001.FG0FMHOP cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "156";
  end
  ;
  if (FG0FM001.FG0FMYOP != FG0FW01.FG0FWYOP)
    set FG0FM001.FG0FMYOP cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "156";
  end
  ;
  if (FG0FW01.FG0FWUFT != FG0FW01.FG0FWSFT)
    set FG0FM001.FG0FMFTG cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "156";
  end
  ;
  if (converseVar.validationMsgNum != 0)
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if nothing was changed on the current page verify*/
   /* additional pages in temporary storage*/
   /* ------------------------------------------------------------*/
  ;
  FG0FW00.FG0FWSTP = FG0FW00.XXXTSPAG; /* save current page*/
  ;
  FG0FW00.FG0FWIDX = 1; /* process all pages in working storage*/
  while (FG0FW00.FG0FWIDX <= FG0FW00.TA5TSQIX)
    ;
    FG0FW00.XXXTSPAG = FG0FW00.FG0FWIDX;
    ;
    FG0FS07(); /* read temporary storage*/
    ;
    /* -----------------------------------------------------*/
     /* verify fcst qty and line percent*/
    /* -----------------------------------------------------*/
    ;
    FG0FW00.FG0FWPIX = FG0FW02.FG0FWNLD; /* nbr of lines loaded*/
    ;
    while (FG0FW00.FG0FWPIX >= 1) /* process temp storage*/
      ;
      if (FG0FW02.FG0FWLPT[FG0FWPIX] != FG0FW02.FG0FWSPT[FG0FWPIX])
        converseLib.validationFailed(238);
        FFWREC.XXXMODID = "156";
      end
      if (FG0FW02.FG0FWUQT[FG0FWPIX] != FG0FW02.FG0FWSQT[FG0FWPIX])
        converseLib.validationFailed(238);
        FFWREC.XXXMODID = "156";
      end
      ;
      FG0FW00.FG0FWPIX = FG0FW00.FG0FWPIX - 1; /* decrement table index*/
      ;
    end
    ;
    FG0FW00.FG0FWIDX = FG0FW00.FG0FWIDX + 1; /* line index*/
    ;
  end
  ;
  FG0FW00.XXXTSPAG = FG0FW00.FG0FWSTP; /* set to current page*/
  ;
  FG0FS07(); /* read temporary storage*/
  ;
  ;
end // end FG0F156

// re-calculate hist percents
Function FG0F157()
  ;
   /* recalculate the history percents if the qty is changed*/
  ;
  if (FG0FM001.FG0FMHOP == "S")
    if (FG0FM001.FG0FMYOP == 1)
      FG0FW00.FG0FWNM2 = FG0FW02.FG0FWUH1[FG0FWPIX];
      FG0FW00.FG0FWTH1 = FG0FW02.FG0FWHQ1[FG0FWPIX];
    end
    if (FG0FM001.FG0FMYOP == 2)
      FG0FW00.FG0FWNM2 = FG0FW02.FG0FWUH2[FG0FWPIX];
      FG0FW00.FG0FWTH1 = FG0FW02.FG0FWHQ2[FG0FWPIX];
    end
    if (FG0FM001.FG0FMYOP == 3)
      FG0FW00.FG0FWNM2 = FG0FW02.FG0FWUH3[FG0FWPIX];
      FG0FW00.FG0FWTH1 = FG0FW02.FG0FWHQ3[FG0FWPIX];
    end
  else
    if (FG0FM001.FG0FMYOP == 1)
      FG0FW00.FG0FWNM2 = FG0FW02.FG0FWUD1[FG0FWPIX];
      FG0FW00.FG0FWTH1 = FG0FW02.FG0FWDQ1[FG0FWPIX];
    end
    if (FG0FM001.FG0FMYOP == 2)
      FG0FW00.FG0FWNM2 = FG0FW02.FG0FWUD2[FG0FWPIX];
      FG0FW00.FG0FWTH1 = FG0FW02.FG0FWDQ2[FG0FWPIX];
    end
    if (FG0FM001.FG0FMYOP == 3)
      FG0FW00.FG0FWNM2 = FG0FW02.FG0FWUD3[FG0FWPIX];
      FG0FW00.FG0FWTH1 = FG0FW02.FG0FWDQ3[FG0FWPIX];
    end
  end
  ;
  if (FG0FW00.FG0FWNM2 == 0)
    FG0FW01.FG0FWHPS[FG0FWPIX] = 0;
    FG0FM001.FG0FMHPT[FG0FWPIX] = FG0FW01.FG0FWHPS[FG0FWPIX];
  else
    if (FG0FW00.FG0FWTH1 == FG0FW02.FG0FWQTY) /* forecast qty = history qty*/
      FG0FW01.FG0FWHPS[FG0FWPIX] = 100;
      FG0FM001.FG0FMHPT[FG0FWPIX] = FG0FW01.FG0FWHPS[FG0FWPIX];
    else
      FG0FW00.FG0FWNM1 = FG0FW02.FG0FWUQT[FG0FWPIX] * 100;
      FG0FW01.FG0FWHPS[FG0FWPIX] = mathLib.round(FG0FW00.FG0FWNM1 / FG0FW00.FG0FWNM2, -mathLib.decimals(FG0FW01.FG0FWHPS[FG0FWPIX]));
      if (FG0FW01.FG0FWHPS[FG0FWPIX] > 999.9)
        FG0FW01.FG0FWHPS[FG0FWPIX] = 999.9;
        FG0FM001.FG0FMHPT[FG0FWPIX] = FG0FW01.FG0FWHPS[FG0FWPIX];
      else
        FG0FM001.FG0FMHPT[FG0FWPIX] = FG0FW01.FG0FWHPS[FG0FWPIX];
      end
    end
  end
end // end FG0F157

// recalc total line percent
Function FG0F158()
   /* ------------------------------------------------------------*/
   /* recalc the line percent total*/
   /* ------------------------------------------------------------*/
  ;
  FG0FW00.FG0FWSTP = FG0FW00.XXXTSPAG; /* save current page*/
  FG0FW03.FG0FWLPT = 0;
  FG0FW00.FG0FWIDX = 1; /* init nbr of pages index*/
  while (FG0FW00.FG0FWIDX <= FG0FW00.TA5TSQIX)
    FG0FW00.XXXTSPAG = FG0FW00.FG0FWIDX; /* process temp storage*/
    FG0FS07(); /* read temp storage*/
    FG0FW00.FG0FWPIX = FG0FW02.FG0FWNLD;
    while (FG0FW00.FG0FWPIX >= 1)
      if (FG0FW00.XXXTSPAG == FG0FW00.FG0FWSTP)
        FG0FW00.FG0FWPC1 = FG0FM001.FG0FMLPT[FG0FWPIX];
      else
        FG0FW00.FG0FWPC1 = FG0FW02.FG0FWLPT[FG0FWPIX];
      end
      FG0FW03.FG0FWLPT = FG0FW03.FG0FWLPT + FG0FW00.FG0FWPC1;
      FG0FW00.FG0FWPIX = FG0FW00.FG0FWPIX - 1; /* decrement line index*/
    end
    FG0FW00.FG0FWIDX = FG0FW00.FG0FWIDX + 1; /* increment page index*/
  end
  ;
  FG0FW00.XXXTSPAG = FG0FW00.FG0FWSTP; /* restore current page*/
  FG0FS07(); /* read temp storage*/
  ;
  if (FG0FW03.FG0FWLPT > 99.5
   && FG0FW03.FG0FWLPT <= 100.5)
    FG0FW03.FG0FWLPT = 100;
    FG0FM001.FG0FMLPT[FG0FWTIX] = FG0FW03.FG0FWLPT;
  else
    FG0FM001.FG0FMLPT[FG0FWTIX] = FG0FW03.FG0FWLPT;
  end
end // end FG0F158

// Process valid input request
Function FG0F160()
   /* ------------------------------------------------------------*/
   /* Indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/
  ;
  FG0FW00.FG0FWSWF = "Y"; /* set format map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA/ffwrec*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.FFABEGMO = FFZREC.FFZBEGMO;
  FFWREC.FFAENDMO = FFZREC.FFZENDMO;
  ;
  FG0FW01.FG0FWYOP = FG0FM001.FG0FMYOP;
  FG0FW01.FG0FWHOP = FG0FM001.FG0FMHOP;
  ;
  if (converseVar.eventKey is enter
   && FG0FW00.FG0FWSWR == "Y") /* KEY DATA MODIFIED*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Request to scroll backwards*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* display next season*/
    FG0FW00.XXXTSPAG = FG0FW00.XXXTSPAG - 1;
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Request to scroll foward*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* display next season*/
    FG0FW00.XXXTSPAG = FG0FW00.XXXTSPAG + 1;
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* History data requested*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf18) /* display history data*/
    ;
    set FG0FW04 empty; /* init map 002 work record*/
    ;
    FG0FW04.FG0FWYO1 = FG0FM001.FG0FMYOP;
    FG0FW04.FG0FWHO1 = FG0FM001.FG0FMHOP;
    FG0FW04.FG0FWSWF = "Y"; /* set format switch*/
    FG0FW00.FG0FWSWD = "2"; /* request fg0fm002 display*/
    ;
    return;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data has been changed and pf15(save) or 's'elect has*/
   /* been requested update database*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pf15 /* save requested by user*/
   || FG0FW00.FG0FWSLF == "Y")     /* product line selected*/
    ;
    if (FFWREC.FFWMODSW == "Y" /* temp storage has been updated*/
     || FFWREC.FFEWSNBR == 0)  /* add zero fcst*/
      ;
      XX0XS01(); /* Obtain date and time*/
      ;
      /* --------------------------------------------*/
       /* Determine if new header need to be created*/
      /* --------------------------------------------*/
      ;
      FG0FW00.FG0FWHDR = "N";
      FG0FW00.XXXTSPAG = 1; /* process temp storage*/
      while (FG0FW00.XXXTSPAG <= FG0FW00.TA5TSQIX
       && FG0FW00.FG0FWHDR == "N")
        ;
        FG0FS07(); /* read temporary storage*/
        ;
        FG0FW00.FG0FWIDX = FG0FW02.FG0FWNLD;
        while (FG0FW00.FG0FWIDX >= 1
         && FG0FW00.FG0FWHDR == "N")
          ;
          if (FG0FW02.FG0FWQUP[FG0FWIDX] == "Y"
           && FG0FW02.FG0FWWKE[FG0FWIDX] != " ")
            ;
            FG0FW00.FG0FWHDR = "Y"; /* Set create header flag*/
            ;
          end
          ;
          FG0FW00.FG0FWIDX = FG0FW00.FG0FWIDX - 1;
        end
        FG0FW00.XXXTSPAG = FG0FW00.XXXTSPAG + 1;
      end
      ;
      /* ---------------------------------------------*/
      /* Create new header or update the existing one*/
      /* ---------------------------------------------*/
      ;
      if (FFWREC.FFEWSNBR == 0
       || FG0FW00.FG0FWHDR == "Y")
        ;
        FG0F161(); /* obtain next work sheet nbr*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.commit();
        ;
        FFWREC.FFEWSNBR = FF1REC.FF1WSNBR;
        FG0F162(); /* format/insert dfcast.vwdgrp01 row*/
      else
        FG0F163(); /* format/update dfcast.vwdgrp01 row*/
      end
      ;
      FG0FW00.XXXTSPAG = 1; /* process temp storage*/
      while (FG0FW00.XXXTSPAG <= FG0FW00.TA5TSQIX)
        ;
        FG0FS07(); /* read temporary storage*/
        ;
        FG0FW00.FG0FWIDX = FG0FW02.FG0FWNLD;
        while (FG0FW00.FG0FWIDX >= 1)
          ;
          if (FG0FW02.FG0FWQUP[FG0FWIDX] == "Y") /* Qty was updated*/
            FG0FW02.FG0FWQUP[FG0FWIDX] = "N"; /* Reset qty upd flag*/
            FG0F164(); /* format/insert dfcast.vwline01 rows*/
          else
            if (FG0FW00.FG0FWHDR == "Y"
             && FG0FW02.FG0FWQTY[FG0FWIDX] != " ")
              FG0F164(); /* format/insert dfcast.vwline01 rows*/
            end
          end
          ;
          FG0FW00.FG0FWIDX = FG0FW00.FG0FWIDX - 1;
        end
        FG0FW00.XXXTSPAG = FG0FW00.XXXTSPAG + 1;
      end
      ;
      FFWREC.FFWMODSW = "N"; /* init data entered flag*/
      FG0FW00.FG0FWDCF = "N"; /* init data entered flag*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit();
      ;
      FG0F165();
                                   /* purge any excess forecast work sheets*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit();
      ;
      FG0FW00.FG0FWSWR = "Y"; /* requested data switch*/
      ;
      if (converseVar.eventKey is pf15)
        FFWREC.XXXMSGNO = 33;
        FFWREC.XXXMODID = "160";
        return;
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a product was selected transfer to application, FG0G*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0FW00.FG0FWSLF == "Y")
    ;
    COMMAREA.CATOAP = "FG0G"; /* to application*/
    ;
    FG0FS01(); /* purge temp storage*/
    ;
    XSFFS01(); /* common exit routine*/
    ;
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data was loaded, and temporary storage was modified*/
   /* set ffwrec modified switch yes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0FW01.CACHGFL == "Y"
   && FG0FW00.FG0FWDCF == "Y")
    FFWREC.FFWMODSW = "Y";
  end
  ;
  ;
end // end FG0F160

// obtain next work sheet nbr
Function FG0F161()
   /* ------------------------------------------------------------*/
   /* obtain next work sheet number dfcast.vffctl01*/
   /* ------------------------------------------------------------*/
  ;
  set FF1REC empty; /* Clear row storage area*/
  ;
  FF1REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FF1REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3660" ("U3", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "161"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VFFCTL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF1REC.FF1GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0F161

// add dfcast.vwdgrp01 row
Function FG0F162()
   /* ------------------------------------------------------------*/
   /* Add dfcast.vwdgrp01 table row*/
   /* ------------------------------------------------------------*/
  ;
  set FFEREC empty; /* Clear row storage area*/
  ;
  FFEREC.FFEWSNBR = FFWREC.FFEWSNBR; /* new wrk sht nbr*/
  FFEREC.YSMXDV = "10"; /* div code*/
  FFEREC.XCTCD = "USA"; /* country code*/
  FFEREC.FFABEGMO = FFWREC.FFABEGMO; /* begin rangeccyymm*/
  FFEREC.FFAENDMO = FFWREC.FFAENDMO; /* end range ccyymm*/
  FFEREC.FFEFCTGT = FG0FW01.FG0FWUFT; /* fcst target qty*/
  FFEREC.FFELINFL = "Y"; /* product line flag*/
  FFEREC.FFETYPFL = "N"; /* product type flag*/
  FFEREC.FFECATFL = "N"; /* category flag*/
  FFEREC.FFEGRPFL = "N"; /* group flag*/
  FFEREC.FFECLRFL = "N"; /* color flag*/
  FFEREC.FFELMOFL = "N"; /* line month flag*/
  FFEREC.FFECMOFL = "N"; /* category month flag*/
  FFEREC.FFEGMOFL = "N"; /* group month flag*/
  FFEREC.FFESMOFL = "N"; /* color flag*/
  FFEREC.XXXUSRID = COMMAREA.CAUSERID;
  FFEREC.ZZZSDT = XX0XW01.XX0XWDAT; /* current date*/
  FFEREC.ZZZSTM = XX0XW01.XX0XWTIM; /* current time*/
  FFEREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* current date*/
  FFEREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* current time*/
  ;
  try
    call "IO3850" ("A ", SQLCA, FFEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "162"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VWDGRP01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWDGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFEREC.FFEKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0F162

// Update dfcast.vwdgrp01 row
Function FG0F163()
   /* ------------------------------------------------------------*/
   /* update dfcast.vwdgrp01*/
   /* ------------------------------------------------------------*/
  ;
  FFEREC.FFELINFL = "Y";
  FFEREC.FFEFCTGT = FG0FW01.FG0FWUFT;
  ;
  FFEREC.XXXUSRID = COMMAREA.CAUSERID;
  FFEREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFEREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  try
    call "IO3850" ("U ", SQLCA, FFEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      FG0FW00.FG0FWSWR = "Y"; /* Request for data switch*/
      ;
      FFWREC.XXXMODID = "163"; /* Module identification*/
      FFWREC.XXXMSGNO = 20; /* Indicate updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "163"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE DFCAST.VWDGRP01 TABLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWDGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFEREC.FFEKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0F163

// add dfcast.vwline01 row
Function FG0F164()
   /* ------------------------------------------------------------*/
   /* add dfcast.vwline01 table row*/
   /* ------------------------------------------------------------*/
  set FFGREC empty;
  ;
  FFGREC.FFEWSNBR = FFWREC.FFEWSNBR;
  FFGREC.XPLCD = FG0FW02.XPLCD[FG0FWIDX];
  FFGREC.FF6SLFCT = FG0FW02.FG0FWUQT[FG0FWIDX];
  FFGREC.FFEFCTGT = FG0FW02.FG0FWUQT[FG0FWIDX];
  FFGREC.FFGYRIND = FG0FW01.FG0FWYOP;
  FFGREC.FFGSDIND = FG0FW01.FG0FWHOP;
  FFGREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFGREC.ZZZSTM = XX0XW01.XX0XWTIM;
  FFGREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFGREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3890" ("A ", SQLCA, FFGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "164"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VWLINE01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFGREC.FFGKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0F164

// purge excess fcst work sheets
Function FG0F165()
   /* ------------------------------------------------------------*/
   /* Purge excess forecast work sheets using routin xsffs60*/
   /* ------------------------------------------------------------*/
  ;
  FFEREC.YSMXDV = "10"; /* division code*/
  FFEREC.XCTCD = "USA"; /* country code*/
  FFEREC.FFABEGMO = FFWREC.FFABEGMO; /* begin range*/
  FFEREC.FFAENDMO = FFWREC.FFAENDMO; /* end   range*/
  TA1REC.TA1PGMNM = "FG0F165"; /* process name*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge !!!!!*/
   /* ------------------------------------------------------------*/
  ;
  XSFFS61();
  ;
end // end FG0F165

// Inquire/maintain a table row
Function FG0F200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FG0F210(); /* Format and display the map*/
  ;
  FG0F220(); /* Check attention identifier*/
  ;
  FG0F230(); /* Reset fields to normal intensity*/
  ;
  FG0F240(); /* Verify the entered data*/
  ;
  FG0F250(); /* Process valid input request*/
  ;
end // end FG0F200

// Format and converse the map
Function FG0F210()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* if no errors format map*/
    ;
    if (FG0FW04.FG0FWSWF == "Y")
      FG0F211(); /* Format the data on the map*/
    end
    ;
  else
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* load message number*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FG0FM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FG0FM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG0FM002.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* load page information*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0FW00.XXXTSPAG > 0)
    set FG0FM002.XXXLITPG skip;
    FG0FM002.XXXTSPAG = FG0FW00.XXXTSPAG;
    set FG0FM002.XXXLITOF skip;
    FG0FM002.TA5TSQIX = FG0FW00.TA5TSQIX;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* error message number*/
    FG0FM002.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    set FG0FM002 alarm; /* Indicate sound alarm*/
  end
  ;
  converse FG0FM002 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0;
  ;
  COMMAREA.CATOAP = FG0FM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG0FM002.CAITEM; /* Application data*/
  ;
  ;
end // end FG0F210

// Format the display data
Function FG0F211()
   /* ------------------------------------------------------------*/
   /* Init map*/
   /* ------------------------------------------------------------*/
  ;
  set FG0FM002 initial;
  ;
  FG0FW04.FG0FWSWF = "N"; /* init map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Format fg0fm002 using passed data*/
   /* ------------------------------------------------------------*/
  ;
  FG0FW00.FG0FWWDT = FFWREC.FFABEGMO; /* w/s date field*/
  FG0FM002.FG0FMBRG = FG0FW00.FG0FWWYM; /* begin month range*/
  FG0FW00.FG0FWWDT = FFWREC.FFAENDMO; /* w/s date field*/
  FG0FM002.FG0FMERG = FG0FW00.FG0FWWYM; /* end month range*/
  ;
  FG0FM002.FG0FMYOP = FG0FW04.FG0FWYO1; /* year option*/
  FG0FM002.FG0FMHOP = FG0FW04.FG0FWHO1; /* history option*/
  ;
   /* ------------------------------------------------------------*/
   /* Load map using fg0fw01 work record*/
   /* ------------------------------------------------------------*/
  ;
  set FG0FM002.FG0FMPR1 skip;
  FG0FM002.FG0FMPBR = FG0FW01.FG0FWPBR[FG0FWYO1]; /* prior beg range yymm*/
  set FG0FM002.FG0FMPBR skip;
  set FG0FM002.FG0FMDSH skip;
  FG0FM002.FG0FMPER = FG0FW01.FG0FWPER[FG0FWYO1]; /* prior end range yymm*/
  set FG0FM002.FG0FMPER skip;
  set FG0FM002.FG0FMPR2 skip;
  FG0FM002.FG0FMYDS = FG0FW00.FG0FWYDS[FG0FWYO1]; /* prior year desc*/
  set FG0FM002.FG0FMYDS skip;
  ;
   /* ------------------------------------------------------------*/
   /* Obtain current historical sales/demand qtys from temp*/
   /* storage*/
   /* ------------------------------------------------------------*/
  ;
  FG0FS07(); /* read temporary storage*/
  ;
  FG0FW00.FG0FWPIX = 1;
  while (FG0FW00.FG0FWPIX <= FG0FW02.FG0FWNLD) /* process temp storage*/
    ;
    FG0FM002.FG0FMHSL[FG0FWPIX] = FG0FW02.XPLSDESC[FG0FWPIX];
    FG0FM002.FG0FMHDL[FG0FWPIX] = FG0FW02.XPLSDESC[FG0FWPIX];
    if (FG0FW04.FG0FWYO1 == 1)
      FG0FM002.FG0FMHSQ[FG0FWPIX] = FG0FW02.FG0FWHQ1[FG0FWPIX];
      FG0FM002.FG0FMHSP[FG0FWPIX] = FG0FW02.FG0FWHP1[FG0FWPIX];
      FG0FM002.FG0FMHDQ[FG0FWPIX] = FG0FW02.FG0FWDQ1[FG0FWPIX];
      FG0FM002.FG0FMHDP[FG0FWPIX] = FG0FW02.FG0FWDP1[FG0FWPIX];
    end
    if (FG0FW04.FG0FWYO1 == 2)
      FG0FM002.FG0FMHSQ[FG0FWPIX] = FG0FW02.FG0FWHQ2[FG0FWPIX];
      FG0FM002.FG0FMHSP[FG0FWPIX] = FG0FW02.FG0FWHP2[FG0FWPIX];
      FG0FM002.FG0FMHDQ[FG0FWPIX] = FG0FW02.FG0FWDQ2[FG0FWPIX];
      FG0FM002.FG0FMHDP[FG0FWPIX] = FG0FW02.FG0FWDP2[FG0FWPIX];
    end
    if (FG0FW04.FG0FWYO1 == 3)
      FG0FM002.FG0FMHSQ[FG0FWPIX] = FG0FW02.FG0FWHQ3[FG0FWPIX];
      FG0FM002.FG0FMHSP[FG0FWPIX] = FG0FW02.FG0FWHP3[FG0FWPIX];
      FG0FM002.FG0FMHDQ[FG0FWPIX] = FG0FW02.FG0FWDQ3[FG0FWPIX];
      FG0FM002.FG0FMHDP[FG0FWPIX] = FG0FW02.FG0FWDP3[FG0FWPIX];
    end
    ;
    FG0FW00.FG0FWPIX = FG0FW00.FG0FWPIX + 1; /* increment load index*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Load forecast historical sales/demand totals*/
   /* ------------------------------------------------------------*/
  ;
  FG0FM002.FG0FMHSL[FG0FWTIX] = "   TOTAL    ";
  FG0FM002.FG0FMHDL[FG0FWTIX] = "   TOTAL    ";
  FG0FM002.FG0FMHSQ[FG0FWTIX] = FG0FW03.FG0FWHSQ[FG0FWYO1];
  FG0FM002.FG0FMHSP[FG0FWTIX] = 100;
  FG0FM002.FG0FMHDQ[FG0FWTIX] = FG0FW03.FG0FWHDQ[FG0FWYO1];
  FG0FM002.FG0FMHDP[FG0FWTIX] = 100;
  ;
  ;
end // end FG0F211

// Check attention identifier
Function FG0F220()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    converseLib.clearScreen();
     /* refresh screen*/
    ;
    FG0FW04.FG0FWSWF = "Y"; /* format screem m002*/
    ;
    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0FM002.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      if (FG0FM002.CATOAP == "FG0G")
        ;
        FFWREC.XXXMODID = "220"; /* Module identification*/
        converseLib.validationFailed(189); /* Indicate PF key not valid*/
        set FG0FM002.CATOAP cursor, bold; /* Highlight*/
        ;
      else
        ;
        FG0FS01(); /* purge temp storage*/
        ;
        XSFFS01(); /* Exit to another application*/
        ;
        FG0FW04.FG0FWSWF = "Y"; /* format screem m002*/
        ;
        set FG0FM002.CATOAP cursor, bold; /* Highlight*/
        ;
      end
    else
      ;
      FFWREC.XXXMODID = "220"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG0FM002"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FG0A"; /* TO application*/
    end
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    FG0FW04.FG0FWSWF = "Y"; /* format screem m002*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* pf7 was not pressed*/
   && converseVar.eventKey not pf8   /* pf8 was not pressed*/
   && converseVar.eventKey not pf14  /* pf14 was not pressed*/
   && converseVar.eventKey not pf15  /* pf15 was not pressed*/
  )                                 
    FFWREC.XXXMODID = "220"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FG0F220

// Reset highlighted fields
Function FG0F230()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FG0FM002.FG0FMYOP initialAttributes; /* year option*/
  set FG0FM002.FG0FMHOP initialAttributes; /* history option*/
  ;
  set FG0FM002.CATOAP initialAttributes;
  set FG0FM002.CAITEM initialAttributes;
  ;
end // end FG0F230

// Verify the entered data
Function FG0F240()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "240"; /* Module identification*/
    set FG0FM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Request to page forward(pf7) or backwards(pf8) verify*/
   /* modifiable fields*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    ;
    FG0F241(); /* verify scroll request*/
    ;
    FG0F242(); /* check modifiable fields*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If request for same opt(pf14) or request for chg opt(pf15),*/
   /* check modifiable fields*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
  )
    FG0F242(); /* check modifiable fields*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Validate entry fields, and key data changes*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter)
    ;
    /* -------------------------------*/
    /* Validate history option field*/
    /* -------------------------------*/
    ;
    if (FG0FM002.FG0FMHOP != FG0FW04.FG0FWHO1)
      if (FG0FM002.FG0FMHOP != "S"
       && FG0FM002.FG0FMHOP != "D")
        converseLib.validationFailed(10);
        FFWREC.XXXMODID = "240";
        set FG0FM002.FG0FMHOP cursor, bold;
      end
    end
    ;
    /* -------------------------------*/
    /* Validate year option field*/
    /* -------------------------------*/
    ;
    if (FG0FM002.FG0FMYOP != FG0FW04.FG0FWYO1)
      if (FG0FM002.FG0FMYOP != 1
       && FG0FM002.FG0FMYOP != 2
       && FG0FM002.FG0FMYOP != 3)
        converseLib.validationFailed(10);
        FFWREC.XXXMODID = "240";
        set FG0FM002.FG0FMYOP cursor, bold;
      end
    end
  end
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end
  ;
end // end FG0F240

// Verify scroll request
Function FG0F241()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FG0FW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    FFWREC.XXXMODID = "241"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FG0FW00.XXXTSPAG >= FG0FW00.TA5TSQIX) /* and no more pages*/
    ;
    FFWREC.XXXMODID = "241"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/
    ;
  end
  ;
end // end FG0F241

// check modifiable fields
Function FG0F242()
  ;
  if (FG0FM002.FG0FMHOP != FG0FW04.FG0FWHO1)
    set FG0FM002.FG0FMHOP cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "242";
  end
  ;
  if (FG0FM002.FG0FMYOP != FG0FW04.FG0FWYO1)
    set FG0FM002.FG0FMYOP cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "242";
  end
  ;
  ;
end // end FG0F242

// Process valid input request
Function FG0F250()
  ;
  FG0FW04.FG0FWSWF = "Y"; /* format map 002*/
  ;
   /* ------------------------------------------------------------*/
   /* Request to scroll backwards*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* display next season*/
    FG0FW00.XXXTSPAG = FG0FW00.XXXTSPAG - 1;
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Request to scroll foward*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* display next season*/
    FG0FW00.XXXTSPAG = FG0FW00.XXXTSPAG + 1;
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* PF14(same opt) has been requested*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf14) /* same option*/
    FG0FW00.FG0FWSWD = "1"; /* request fg0fm001 display*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* PF15(chng opt) has been requested*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf15) /* same option*/
    FG0FW01.FG0FWYOP = FG0FM002.FG0FMYOP;
    FG0FW01.FG0FWHOP = FG0FM002.FG0FMHOP;
    FG0FW00.FG0FWSWD = "1"; /* request fg0fm001 display*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Save modifiable fields*/
   /* ------------------------------------------------------------*/
  ;
  FG0FW04.FG0FWYO1 = FG0FM002.FG0FMYOP;
  FG0FW04.FG0FWHO1 = FG0FM002.FG0FMHOP;
  ;
end // end FG0F250

// purge temporary storage
Function FG0FS01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FG0FW01 empty; /* M001 temporary storage header*/
  set FG0FW02 empty; /* M001 temporary storage detail*/
  set FG0FW03 empty; /* M001 temporary storage totals*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FG0FW00.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FG0FW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0FS01

// select sum dfcast.vmline01
Function FG0FS02()
   /* ------------------------------------------------------------*/
   /* Select sum on dfcast.vmline01 table.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* Load ff5rec record - dfcast.vmline01*/
   /* ------------------------------------------------------------*/
  ;
  set FF5REC empty; /* Clear row storage area*/
  ;
  FF5REC.XPLCD = FF2REC.XPLCD; /* product line code*/
  ;
   /* ------------------------------------------------------------*/
   /* Select sum dfcast.vmline01*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "SS"; /* function code*/
  ;
  try
    call "IO3710" (FFFREC, SQLCA, FF5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or zero total, return to the previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* zero total returned*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S02"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUM TABLE DFCAST.VMLINE01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF5REC.FF5KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0FS02

// select sum dfcast.vmltyp01
Function FG0FS03()
   /* ------------------------------------------------------------*/
   /* Select sum on dfcast.vmltyp01 table.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* load fffrec record*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "SS"; /* function code*/
  ;
   /* ------------------------------------------------------------*/
   /* load ff6rec record - dfcast.vmltyp01*/
   /* ------------------------------------------------------------*/
  ;
  set FF6REC empty; /* Clear row storage area*/
  ;
  FF6REC.XPLCD = FF2REC.XPLCD; /* product line code*/
  FF6REC.YPGCD = "*"; /* type group code*/
  ;
   /* ------------------------------------------------------------*/
   /* select sum dfcast.vmltyp01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3750" (FFFREC, SQLCA, FF6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* Record not found*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S03"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET TABLE DFCAST.VMLTYP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF6REC.FF6KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0FS03

// add page to temporary storage
Function FG0FS06()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FG0FW02.XXXTSLEN = FG0FW00.XXXTSLEN;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (FG0FW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FG0FW02 empty; /* M001 display storage*/
    ;
    FG0FW00.FG0FWIDX = 1; /* Display line index*/
    ;
    FG0FW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S09"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0FS06

// read temporary storage
Function FG0FS07()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  FG0FW02.XXXTSLEN = FG0FW00.XXXTSLEN;
  TA5REC.TA5TSQIX = FG0FW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FG0FW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S10"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0FS07

// update temporary storage
Function FG0FS08()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FG0FW02.XXXTSLEN = FG0FW00.XXXTSLEN;
  TA5REC.TA5APPID = COMMAREA.CACURRAP;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (FG0FW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S11"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0FS08

// check modifiable fields
Function FG0FS09()
   /* -----------------------------------------------------*/
   /* Verify all modifiable fields except year/history*/
   /* option and fcst target qty*/
   /* -----------------------------------------------------*/
  ;
  FG0FW00.FG0FWIDX = FG0FW02.FG0FWNLD; /* nbr of lines loaded*/
  ;
  while (FG0FW00.FG0FWIDX >= 1) /* process temp storage*/
    ;
    if (FG0FM001.FG0FMCPT[FG0FWIDX] != 0)
      set FG0FM001.FG0FMCPT[FG0FWIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S09";
    end
    if (FG0FM001.FG0FMHPT[FG0FWIDX] != FG0FW01.FG0FWHPS[FG0FWIDX])
      set FG0FM001.FG0FMHPT[FG0FWIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S09";
    end
    if (FG0FM001.FG0FMLPT[FG0FWIDX] != FG0FW02.FG0FWLPT[FG0FWIDX])
      set FG0FM001.FG0FMLPT[FG0FWIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S09";
    end
    if (FG0FM001.FG0FMQTY[FG0FWIDX] != FG0FW02.FG0FWQTY[FG0FWIDX])
      set FG0FM001.FG0FMQTY[FG0FWIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S09";
    end
    if (FG0FM001.FG0FMSEL[FG0FWIDX] != " "
     && converseVar.eventKey not enter)
      set FG0FM001.FG0FMSEL[FG0FWIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S09";
    end
    ;
    FG0FW00.FG0FWIDX = FG0FW00.FG0FWIDX - 1; /* decrement table index*/
    ;
  end
  ;
   /* -----------------------------------------------------*/
   /* Verify header modifiable fields*/
   /* -----------------------------------------------------*/
  ;
  if (FG0FM001.FG0FMCTQ != " ")
    set FG0FM001.FG0FMCTQ cursor, bold;
    converseLib.validationFailed(111);
    FFWREC.XXXMODID = "S09";
  end
  ;
  if (FG0FM001.FG0FMPCT != 0)
    set FG0FM001.FG0FMPCT cursor, bold;
    converseLib.validationFailed(111);
    FFWREC.XXXMODID = "S09";
  end
  ;
  if (converseVar.eventKey not pf18
   && converseVar.eventKey not enter)
    ;
    if (FG0FM001.FG0FMHOP != FG0FW01.FG0FWHOP)
      set FG0FM001.FG0FMHOP cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S09";
    end
    ;
    if (FG0FM001.FG0FMYOP != FG0FW01.FG0FWYOP)
      set FG0FM001.FG0FMYOP cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S09";
    end
  end
  ;
  if (converseVar.eventKey not pf7
   && converseVar.eventKey not pf8
   && converseVar.eventKey not pf18
   && converseVar.eventKey not enter)
    if (FG0FM001.FG0FMFTG != FG0FW01.FG0FWFTG)
      set FG0FM001.FG0FMFTG cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S09";
    end
  end
  ;
  if (converseVar.eventKey not enter)
    ;
    FG0FW00.FG0FWWED = FFWREC.FFAENDMO;
    if (FG0FM001.FG0FMERG != FG0FW00.FG0FWEYM)
      set FG0FM001.FG0FMERG cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S09";
    end
    ;
    FG0FW00.FG0FWWBD = FFWREC.FFABEGMO;
    if (FG0FM001.FG0FMBRG != FG0FW00.FG0FWBYM)
      set FG0FM001.FG0FMBRG cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S09";
    end
  end
  ;
  ;
end // end FG0FS09

//*** RECORD=FG0FW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// 
// 10/12/90 - ML Dangelo,  added work field to hold 1000's
// FG0FWTH1.
// Increased size of FG0FWNM1 - 4.  FF1028,FF1029
// ----------------------------
// ***********************
Record FG0FW00 type basicRecord
  10 FG0FWDCF FG0FWDCF ; 
  10 FG0FWDMF FG0FWDMF ; 
  10 FG0FWLFL FG0FWLFL ; 
  10 FG0FWFCF FG0FWFCF ; 
  10 FG0FWERF FG0FWERF ; 
  10 FG0FWLPF FG0FWLPF ; 
  10 FG0FWQTF FG0FWQTF ; 
  10 FG0FWFTF FG0FWFTF ; 
  10 FG0FWHDR FG0FWHDR ; 
  10 FG0FWSWR FG0FWSWR ; 
  10 FG0FWSWF FG0FWSWF ; 
  10 FG0FWSWD FG0FWSWD ; 
  10 FG0FWSLC FG0FWSLC ; 
  10 FG0FWSLF FG0FWSLF ; 
  10 FG0FWYDS FG0FWYDS [3] ; 
  10 FG0FWHDS FG0FWHDS [2] ; 
  10 FG0FWNM1 FG0FWNM1 ; 
  10 FG0FWNM2 FG0FWNM2 ; 
  10 FG0FWNM3 FG0FWNM3 ; 
  10 FG0FWNM4 FG0FWNM4 ; 
  10 FG0FWTH1 FG0FWTH1 ; 
  10 FG0FWPC1 FG0FWPC1 ; 
  10 FG0FWSUT FG0FWSUT ; 
  10 FG0FWSTG FG0FWSTG ; 
  10 FG0FWSHS FG0FWSHS ; 
  10 FG0FWSHD FG0FWSHD ; 
  10 FG0FWUHS FG0FWUHS ; 
  10 FG0FWHST FG0FWHST ; 
  10 FG0FWUHD FG0FWUHD ; 
  10 FG0FWHDT FG0FWHDT ; 
  10 FG0FWIDX FG0FWIDX ; 
  10 FG0FWPIX FG0FWPIX ; 
  10 FG0FWYIX FG0FWYIX ; 
  10 FG0FWCWD FG0FWCWD ; 
  10 FG0FWWDT FG0FWWDT ; 
    15 * num(3) ; 
    15 FG0FWWCC FG0FWWCC ; 
    15 FG0FWWYM FG0FWWYM ; 
      20 FG0FWWYY FG0FWWYY ; 
      20 FG0FWWMM FG0FWWMM ; 
  10 FG0FW-CCYYMMDD FG0FW-CCYYMMDD ; 
    15 * num(1) ; 
    15 FG0FW-CCYYMM FG0FW-CCYYMM ; 
      20 FG0FW-CCYY FG0FW-CCYY ; 
      20 FG0FW-MM FG0FW-MM ; 
    15 * num(2) ; 
  10 FG0FWWBD FG0FWWBD ; 
    15 * num(3) ; 
    15 FG0FWBCC FG0FWBCC ; 
    15 FG0FWBYM FG0FWBYM ; 
      20 FG0FWBYY FG0FWBYY ; 
      20 FG0FWBMM FG0FWBMM ; 
  10 FG0FWWED FG0FWWED ; 
    15 * num(3) ; 
    15 FG0FWECC FG0FWECC ; 
    15 FG0FWEYM FG0FWEYM ; 
      20 FG0FWEYY FG0FWEYY ; 
      20 FG0FWEMM FG0FWEMM ; 
  10 FG0FW-CURR-MO FG0FW-CURR-MO ; 
  10 FG0FW-CURR-MO-MINUS1 FG0FW-CURR-MO-MINUS1 ; 
  10 FG0FW-CURR-MO-MINUS2 FG0FW-CURR-MO-MINUS2 ; 
  10 FG0FW-CURR-MO-MINUS3 FG0FW-CURR-MO-MINUS3 ; 
  10 FG0FW-CURR-MO-MINUS4 FG0FW-CURR-MO-MINUS4 ; 
  10 FG0FW-HOLD-BEG-MO FG0FW-HOLD-BEG-MO ; 
  10 FG0FW-HOLD-END-MO FG0FW-HOLD-END-MO ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 FG0FWSTP FG0FWSTP ; 
  10 TA5TSQIX TA5TSQIX ; 
end // end FG0FW00

//*** RECORD=FG0FW01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// 
// 10/3/90 ML D'Angelo - Added FG0FWHPS array to hold the
// history percents that were displayed on the map so that we
// can determine if they have been changed or not. FF1029
// ***********************
Record FG0FW01 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 FG0FWSFT FG0FWSFT ; 
  10 FG0FWUFT FG0FWUFT ; 
  10 FG0FWFTG FG0FWFTG ; 
  10 FG0FWYOP FG0FWYOP ; 
  10 FG0FWHOP FG0FWHOP ; 
  10 FG0FWUVQ FG0FWUVQ ; 
  10 FG0FWVQT FG0FWVQT ; 
  10 FG0FWVPT FG0FWVPT ; 
  10 FG0FWCDT FG0FWCDT ; 
    15 FG0FWMON FG0FWMON ; 
    15 FG0FWDAY FG0FWDAY ; 
    15 FG0FWYER FG0FWYER ; 
  10 FG0FWPBD FG0FWPBD [3] ; 
    15 * char(5) ; 
    15 FG0FWPBR FG0FWPBR ; 
  10 FG0FWPED FG0FWPED [3] ; 
    15 * char(5) ; 
    15 FG0FWPER FG0FWPER ; 
  10 FG0FWHPS FG0FWHPS [12] ; 
end // end FG0FW01

//*** RECORD=FG0FW02 ****
// -------------------------
// map 001 temporary storage
// -------------------------
// ***********************
Record FG0FW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(1494) ; 
    10 FG0FWNLD FG0FWNLD ; 
    10 FG0FWTIX FG0FWTIX ; 
    10 XPLCD XPLCD [12] ; 
    10 XPLSDESC XPLSDESC [12] ; 
    10 FG0FWUCS FG0FWUCS [12] ; 
    10 FG0FWCSQ FG0FWCSQ [12] ; 
    10 FG0FWSQT FG0FWSQT [12] ; 
    10 FG0FWUQT FG0FWUQT [12] ; 
    10 FG0FWQTY FG0FWQTY [12] ; 
    10 FG0FWQUP FG0FWQUP [12] ; 
    10 FG0FWWKE FG0FWWKE [12] ; 
    10 FG0FWSPT FG0FWSPT [12] ; 
    10 FG0FWLPT FG0FWLPT [12] ; 
    10 FG0FWUH1 FG0FWUH1 [12] ; 
    10 FG0FWHQ1 FG0FWHQ1 [12] ; 
    10 FG0FWHP1 FG0FWHP1 [12] ; 
    10 FG0FWUH2 FG0FWUH2 [12] ; 
    10 FG0FWHQ2 FG0FWHQ2 [12] ; 
    10 FG0FWHP2 FG0FWHP2 [12] ; 
    10 FG0FWUH3 FG0FWUH3 [12] ; 
    10 FG0FWHQ3 FG0FWHQ3 [12] ; 
    10 FG0FWHP3 FG0FWHP3 [12] ; 
    10 FG0FWUD1 FG0FWUD1 [12] ; 
    10 FG0FWDQ1 FG0FWDQ1 [12] ; 
    10 FG0FWDP1 FG0FWDP1 [12] ; 
    10 FG0FWUD2 FG0FWUD2 [12] ; 
    10 FG0FWDQ2 FG0FWDQ2 [12] ; 
    10 FG0FWDP2 FG0FWDP2 [12] ; 
    10 FG0FWUD3 FG0FWUD3 [12] ; 
    10 FG0FWDQ3 FG0FWDQ3 [12] ; 
    10 FG0FWDP3 FG0FWDP3 [12] ; 
end // end FG0FW02

//*** RECORD=FG0FW03 ****
// ------------------------------
// map 001 totals display storage
// ------------------------------
// ***********************
Record FG0FW03 type basicRecord
  5 FG0FWGP3 FG0FWGP3 ; 
    10 FG0FWUCS FG0FWUCS ; 
    10 FG0FWCSQ FG0FWCSQ ; 
    10 FG0FWUQT FG0FWUQT ; 
    10 FG0FWQTY FG0FWQTY ; 
    10 FG0FWLPT FG0FWLPT ; 
    10 FG0FWUHS FG0FWUHS [3] ; 
    10 FG0FWHSQ FG0FWHSQ [3] ; 
    10 FG0FWHSP FG0FWHSP [3] ; 
    10 FG0FWUHD FG0FWUHD [3] ; 
    10 FG0FWHDQ FG0FWHDQ [3] ; 
    10 FG0FWHDP FG0FWHDP [3] ; 
end // end FG0FW03

//*** RECORD=FG0FW04 ****
// -----------------------------
// map 002 display storage area
// -----------------------------
// ***********************
Record FG0FW04 type basicRecord
  5 FG0FWGP5 FG0FWGP5 ; 
    10 FG0FWSWF FG0FWSWF ; 
    10 FG0FWYO1 FG0FWYO1 ; 
    10 FG0FWHO1 FG0FWHO1 ; 
end // end FG0FW04

DataItem FG0FW-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0FW-CCYYMM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0FW-CCYYMMDD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date
DataItem FG0FW-CURR-MO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date -1 month
DataItem FG0FW-CURR-MO-MINUS1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date -2 month
DataItem FG0FW-CURR-MO-MINUS2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date -2 month
DataItem FG0FW-CURR-MO-MINUS3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date -2 month
DataItem FG0FW-CURR-MO-MINUS4 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date -2 month
DataItem FG0FW-HOLD-BEG-MO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date -2 month
DataItem FG0FW-HOLD-END-MO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

DataItem FG0FW-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin century
DataItem FG0FWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range month
DataItem FG0FWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year and month
DataItem FG0FWBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range year
DataItem FG0FWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work sheet create date
DataItem FG0FWCDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current sales mstr qty 1000
DataItem FG0FWCSQ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current work date
DataItem FG0FWCWD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// create day
DataItem FG0FWDAY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// data change flag
DataItem FG0FWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data modified flag
DataItem FG0FWDMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history demand percent yr1
DataItem FG0FWDP1 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history demand percent yr2
DataItem FG0FWDP2 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history demand percent yr3
DataItem FG0FWDP3 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history demand thousand yr1
DataItem FG0FWDQ1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history demand thousand yr2
DataItem FG0FWDQ2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history demand thousand yr3
DataItem FG0FWDQ3 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end century
DataItem FG0FWECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range month
DataItem FG0FWEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error flag
DataItem FG0FWERF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end year and month
DataItem FG0FWEYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range year
DataItem FG0FWEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work sheet number passed
DataItem FG0FWFCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst target flag
DataItem FG0FWFTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// forecast target thousands
DataItem FG0FWFTG char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fg0fw03 group level
DataItem FG0FWGP3 char(100)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fg0fw05 group level
DataItem FG0FWGP5 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// historical demand percent
DataItem FG0FWHDP bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical demand qty thousand
DataItem FG0FWHDQ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Create header flag
DataItem FG0FWHDR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// historical description
DataItem FG0FWHDS char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history demand thousands
DataItem FG0FWHDT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history option sales/demand
DataItem FG0FWHO1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history option sales/demand
DataItem FG0FWHOP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history sales percent yr1
DataItem FG0FWHP1 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales percent yr2
DataItem FG0FWHP2 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales percent yr3
DataItem FG0FWHP3 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold history percents array
DataItem FG0FWHPS bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// history sales qty thousand yr1
DataItem FG0FWHQ1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history sales qty thousand yr2
DataItem FG0FWHQ2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history sales qty thousand yr3
DataItem FG0FWHQ3 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// historical sales percent
DataItem FG0FWHSP bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical sales qty thousand
DataItem FG0FWHSQ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history sales thousands
DataItem FG0FWHST char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index
DataItem FG0FWIDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// line data found flag
DataItem FG0FWLFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line percent flag
DataItem FG0FWLPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line percent entry field
DataItem FG0FWLPT bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// create month
DataItem FG0FWMON num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of lines per page
DataItem FG0FWNLD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 1
DataItem FG0FWNM1 bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 2
DataItem FG0FWNM2 bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 3
DataItem FG0FWNM3 bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 4
DataItem FG0FWNM4 bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prior begin date
DataItem FG0FWPBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// prior begin yymm
DataItem FG0FWPBR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// percent work field 1
DataItem FG0FWPC1 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prior end date
DataItem FG0FWPED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// prior end yymm
DataItem FG0FWPER char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// process index
DataItem FG0FWPIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// qty flag
DataItem FG0FWQTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current sales qty 100
DataItem FG0FWQTY char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// qty updated flag
DataItem FG0FWQUP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save forecast target units
DataItem FG0FWSFT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save hist demand qty units
DataItem FG0FWSHD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save history sales units
DataItem FG0FWSHS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 's'election count field
DataItem FG0FWSLC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 's'election flag
DataItem FG0FWSLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save line percent entry field
DataItem FG0FWSPT bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save cur sales total units
DataItem FG0FWSQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save target char
DataItem FG0FWSTG char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save current temp storage page
DataItem FG0FWSTP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// save target units
DataItem FG0FWSUT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display map switch
DataItem FG0FWSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FG0FWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FG0FWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field -  thousands
DataItem FG0FWTH1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total line index
DataItem FG0FWTIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cur c/o fcst
DataItem FG0FWUCS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history demand units yr1
DataItem FG0FWUD1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history demand units yr2
DataItem FG0FWUD2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history demand units yr3
DataItem FG0FWUD3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// forecast target units
DataItem FG0FWUFT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales qty units yr1
DataItem FG0FWUH1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales qty units yr2
DataItem FG0FWUH2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales qty units yr3
DataItem FG0FWUH3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hist demand qty total units
DataItem FG0FWUHD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales units
DataItem FG0FWUHS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cur sales qty total units
DataItem FG0FWUQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// variance qty units
DataItem FG0FWUVQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// variance percent
DataItem FG0FWVPT bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// variance qty thousands
DataItem FG0FWVQT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work begin date
DataItem FG0FWWBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work century
DataItem FG0FWWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date
DataItem FG0FWWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work begin date
DataItem FG0FWWED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// wrksht exist flag
DataItem FG0FWWKE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work month
DataItem FG0FWWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year and month
DataItem FG0FWWYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FG0FWWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year(s)  option description
DataItem FG0FWYDS char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// create year
DataItem FG0FWYER num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year index
DataItem FG0FWYIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year option
DataItem FG0FWYO1 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year option
DataItem FG0FWYOP num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

