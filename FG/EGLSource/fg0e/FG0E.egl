package fg0e;

import corpcom2.XPCREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFF001;
import corpcom3.XPXCT01;
import corpcom3.XPXPC01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS01;
import corpcom4.XSFFS10;
import corpcom4.XSFFS11;
import corpcom4.XSFFS22;
import corpcom4.XSFFS30;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XCTCD;
import corpx1.XCTTBL;
import corpx1.XDMCD;
import corpx1.XPCTBL;
import corpy2.YPGTBL;
import corpz3.ZRGCD;
import corpz3.ZRGTBL;
import ff.common.*;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import sy.common.SYBSTGNB;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=FG0E ****
// This program provides nil users the ability to view and
// change the monthly style color sales forecast quantities.
// 
// The NIL users can come into this application from two places
//   - LONG RANGE MAIN MENU SCREEN
//   - LONG RANGE WORKSHEET SELECT SCREEN
// 
// The enterable fields on the top of the screen and grand
// total field can only be changed by NIL users. Only the
// forecasts will be displayed for NIL. No worksheet except
// the header will be involved for processing NIL fore-
// cast. Whenever the master forecast is made by the NIL user,
// the long range worksheet header record (DFCAST.VWDGRP01) and
// month master record should be updated.
// 
// The user can specify the number of month in the season and
// he has the flexibility to view 3 months,4 months or 6 months
// seasons with varying subtotals. The user may use appropriate
// attention key to scroll left and right.
// 
// The life cycle on th top of the screen will show the earl-
// iest projected introduction date and latest projected close-
// out date. The program will check the projected intro. date
// and projected closeout date for each product. The forecast
// quantities of those months before the intro. date and after
// the closeout date (exclude the intro. month and include the
// closeout month) will be zeroed out and become non-enterable.
// 
// If the user is satisfied with the forecast quantities on the
// screen, he can make these sales forecasts as master by
// pressing PF15. The system will then update the master sales
// forecast by style color, by style group, by category and by
// type group. For NIL, No master sales forecast by type group
// will be updated. The category update flags in month master
// by category table will be turned on as well, which means all
// products under this category have forecasted and the fore-
// casts at syle group, category and type group levels have all
// been updated with the summarized forecasts.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          03/19/91  MDANGE  New application.
// FF1105   12/02/91  MDANGE  Change to allow months greater
//                            than 12 months beyond the buy
//                            month to be entered.
// FF       03/10/92  MDANGE  Change to use NIL closeout date
//                            from VFFSTY01.
// FF1119   02/26/92  LDELUH  When add MCAT for makeups set
//                            fill rt & futr rto to 100.
// FF1111   07/13/92  JJUCH   Changes for varying seasons.
// FF367    01/14/93  JJUCH   Add edit for management region
//                            which will be entered in the ctry
//                            code field.
// FF402    05/04/93  JJUCH   Default inline fill rate to 92
//                            when insert a new MCAT row.
//          09/10/93  JJUCH   Convert to CSP V4.1 version.
// FF175    12/05/96  DSMITH  Changed date range fill character
//                            to '0' and FG0E557 to increment
//                            century if year = '00'.
// *********************
Program FG0E type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF3REC FF3REC; // record
  FF7REC FF7REC; // record
  FF8REC FF8REC; // record
  FF9REC FF9REC; // record
  FFFREC FFFREC; // record
  FFKREC FFKREC; // record
  FFSREC FFSREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  FG0EW00 FG0EW00; // record
  FG0EW01 FG0EW01; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YPGTBL; // table
  use XPCTBL; // table
  use XCTTBL; // table
  use ZRGTBL {deleteAfterUse = yes}; // table
  use FG0EM.FG0EM001, // form
  		FG0EM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FG0EM001 initial; /* M001 input/output*/
    set FG0EW00 empty; /* Working storage*/
    set FG0EW01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set TA6REC empty; /* Submit batch job parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FG0EW00.FG0EWSWF = "N"; /* Format the map switch*/
    FG0EW00.FG0EWSWR = "N"; /* Request for data switch*/
    FG0EW00.FG0EWSWO = "N"; /* Data obtained switch*/

    XPCREC.XGPCD = COMMAREA.XGPCD; /* GPC code*/

     /* ---------------------------------------------------*/
     /* Clear unused fields*/
     /* ---------------------------------------------------*/

    FFWREC.SY1STNBR = " "; /* Clear style number*/
    FFWREC.SY2CLRID = " "; /* Clear color id*/
    FFWREC.XDMCD = " "; /* Clear dimension code*/
    FFWREC.SY1SSTNM = " "; /* Clear short style name*/
    FFWREC.SY2CLRAB = " "; /* Clear color abrv*/
    FFWREC.XDMABRV = " "; /* Clear dimension abrv*/
    FFWREC.ZRGCD = " "; /* Clear region code*/
    FFWREC.ZRGABRV = " "; /* Clear region abrv*/

    if (FFWREC.YPGCD == " ") /* No type group passed*/

      FFWREC.YPGCD = "01"; /* Default type group code*/
      FFWREC.YPGABRV = "INLINE"; /* Default type group abbreviation*/

    end

    FFWREC.YSMXDV = "20"; /* default to nil*/
    FFWREC.YSMSMDSC = "NIL"; /* default to nil*/


    if (FFWREC.FFABEGMO != 0 /* Beginning month passed*/
     && FFWREC.FFAENDMO != 0 /* Ending month passed*/
     && FFWREC.YPGCD != " "  /* Type group code passed*/
     && FFWREC.XPCCD != " "  /* Category code passed*/
     && FFWREC.XCTCD != " "  /* Country code passed*/
     && FFWREC.YSMXDV != " ") /* Division group passed*/

      FG0EW00.FG0EWSWR = "Y"; /* Request for data switch*/

    end

    FG0EW01.FG0EWBMO = FFWREC.FFABEGMO; /* Beginning month*/
    FG0EW01.FG0EWEMO = FFWREC.FFAENDMO; /* Ending month*/

    FG0EW00.FG0EWLEF = 1; /* Scrolling left index*/
    FG0EW00.FG0EWSNX = 1; /* Season index*/
    FG0EW00.FG0EWPGX = 1; /* Page index*/
    FG0EW00.FG0EW-PAGS[1] = 1; /* Season on the 1st page*/
    FG0EW00.FG0EW-NEXT = "N"; /* Next season*/
    FG0EW00.FG0EW-MON-LEFT = "N"; /* month left flag*/

    FG0EM001.FG0EMALL = "N"; /* Default all styles flag*/
    FG0EW00.FG0EWALL = "N"; /* Default all styles flag in work area*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FG0E000; /* Converse the main process*/

    FG0E000: FG0E000();

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FG0E001; /* Converse the main process*/


    FG0E001: FG0E001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FG0E001; /* Converse the main process*/


  end // end main
end // end FG0E

// Check the FROM application
Function FG0E000()

  FG0ES08(); /* Process the date range*/

end // end FG0E000

// List the rows in the table
Function FG0E001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FG0E100(); /* Obtain the data to display*/

  FG0E200(); /* Format and display the map*/

  FG0E300(); /* Check attention identifier*/

  FG0E400(); /* Reset fields to normal intensity*/

  FG0E500(); /* Verify the entered data*/

  FG0E600(); /* Process valid input request*/


end // end FG0E001

// Obtain the data to display
Function FG0E100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FG0EW00.FG0EWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

  if (FG0EW00.FG0EWSEM[1] == 0) /* No season end month*/
    FG0ES40(); /* Obtain default season end month*/
  end

  if (FG0EW00.FG0EWSEM[1] == 0) /* No default season end month*/
    if (FFZREC.FFZNUMMO <= 6) /* Request mo less than 6 months*/
      FG0EW00.FG0EWNSS = 1; /* Nbr of seasons*/
      FG0EW00.FG0EWSMO[1] = FG0EW00.FG0EWWED; /* seas end mo-ccyymm*/
      FG0EW00.FG0EWSEM[1] = FG0EW00.FG0EWEMM; /* seas end mo-mm*/
      FG0EW00.FG0EWSIN[1] = FFZREC.FFZNUMMO; /* No of mos in seas*/
    else
      return;
    end
  end

  FG0E101(); /* Build up temporary storage*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FG0EW00.TA5TSQIX == 0) /* No pages formatted*/

    FFWREC.XXXMODID = "100"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/

    return; /* Exit to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO == 0) /* No message to display*/
    FG0EW00.XXXTSPAG = 1; /* Desired page number*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FG0EW00.FG0EWPGX = 1; /* Page index*/
  FG0EW00.FG0EW-PAGS[1] = 1; /* Season on the 1st page*/
  FG0EW00.FG0EWSWF = "Y"; /* Format data switch*/
  FG0EW00.FG0EWSWO = "Y"; /* Data obtained switch*/
  FG0EW00.FG0EWSWR = "N"; /* Request for data switch*/

end // end FG0E100

// Build up temporary storage
Function FG0E101()
   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  FG0EW00.XXXTSLEN = 3344; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  FG0E110(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Save the search key informations in the map*/
   /* ------------------------------------------------------------*/

  FG0EW01.FG0EWBMO = FFWREC.FFABEGMO; /* Beginning date*/
  FG0EW01.FG0EWEMO = FFWREC.FFAENDMO; /* Ending date*/
  FG0EW00.FG0EWALL = FG0EM001.FG0EMALL; /* All styles flag*/

  FG0EW00.FG0EWIXW = FG0EW00.FG0EWNSS;
  while (FG0EW00.FG0EWIXW > 0) /* Nbr of season*/
    FG0ES50(); /* Calculate no of months in each season*/
    FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW - 1;
  end

   /* ------------------------------------------------------------*/
   /* Load the month heading*/
   /* ------------------------------------------------------------*/

  FG0E115();

   /* ------------------------------------------------------------*/
   /* If style group was specified, obtain a list of style colors*/
   /* for that style group, otherwise, obtain a list of style*/
   /* groups and style colors for the specified category.*/
   /* Then, use each style color to retrieve the existing monthly*/
   /* style color forecasts from DFCAST.Vmsty001.*/
   /* ------------------------------------------------------------*/

  FG0EW00.FG0EWCR1 = "N"; /* Initialize end of cursor switch*/
  FG0EW00.FG0EWIXM = 1; /* Initialize the map index*/
  FG0EW00.SYBSTGNB = " "; /* Initialize the style group*/
  FG0EW00.FG0EW1SD = 0; /* earliest 1st sales month*/
  FG0EW00.FG0EWCOD = 0; /* latest closeout month*/

  if (FFWREC.SYBSTGNB != " ") /* Style group was specified*/

    /* ----------------------------------------------------------*/
     /* Process the specified style group.*/
     /* Select a sum from VMSTY001 to see if any data exists for*/
     /* style group.  Any month must be used for sum range, not*/
     /* just the range on screen.  This is done to allow data to*/
     /* be entered in months that NIL did not originally load.*/
    /* ----------------------------------------------------------*/

    FG0E130(); /* Select sum VMSTY001 with style group*/
    if (SQLCA.VAGen_SQLCODE == 0 /* if data exists on VMSTY001*/
     || FG0EW00.FG0EWALL == "Y") /* OR NEW STYLES FLAG IS ON*/
      FG0E140(); /* Select and open VFFSTY01 with style group*/
      FG0E141(); /* Fetch next row in VFFSTY01*/

      while (FG0EW00.FG0EWCR1 == "N") /* Until end of cursor*/

        FG0ES07(); /* Process active product*/

        FG0E141(); /* Fetch next row in VFFSTY01*/

      end

      FG0E142(); /* Close VFFSTY01*/
    end

  else

    /* ----------------------------------------------------------*/
     /* Process all style groups within the specified category.*/
    /* ----------------------------------------------------------*/

    FG0E150(); /* Select VFFSTY01 with category*/

    FG0EW00.FG0EWCR2 = "N"; /* Initialize end of cursor switch*/

    FG0E151(); /* Fetch next row in VFFSTY01*/

    while (FG0EW00.FG0EWCR2 == "N") /* Until end of cursor*/

      FG0E130(); /* Select sum VMSTY001 with style group*/
      if (SQLCA.VAGen_SQLCODE == 0 /* if data exists on VMSTY001*/
       || FG0EW00.FG0EWALL == "Y") /* or new styles flag is yes*/
        FFWREC.SYBSTGNB = FF3REC.SYBSTGNB;
                                   /* Save the current style grp*/

        FG0E140(); /* Select and open VFFSTY01 with style grp*/

        FG0EW00.FG0EWCR1 = "N";
                                   /* Reset the end of cursor switch*/
        FG0E141(); /* Fetch next row in VFFSTY01*/
        while (FG0EW00.FG0EWCR1 == "N") /* Until end of cursor*/

          FG0ES07(); /* Process active product*/
          FG0E141(); /* Fetch next row in VFFSTY01*/

        end

        FG0E142(); /* Close VFFSTY01-style group*/
      end

      FG0E151(); /* Fetch next row in VFFSTY01*/

    end

    FFWREC.SYBSTGNB = "      "; /* Clear the style group field*/
    FG0E152(); /* Close VFFSTY01-cat*/

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (FG0EW00.FG0EWIXM > 1) /* Page was formatted*/

    FG0E180(); /* Calculate the grand totals*/
    FG0E190(); /* Add page to temporary storage*/

  else

    if (FG0EW00.FG0EWIXM == 1) /* Page was formatted*/

      /* ---------------------------------------------------*/
       /* Move the month totals from previous page to tsq*/
      /* ---------------------------------------------------*/

      FG0EW00.FG0EWIXT = FG0EW00.FG0EWLEF;
      FG0EW00.FG0EWIXE = FG0EW00.FG0EWIXT + FG0EW00.FG0EWEND - 1;
      FG0EW01.FG0EWDES[1] = "   TOTAL"; /* Total line desc.*/
      FG0EW01.FG0EWGFL[1] = "N"; /* Style group flag*/

      while (FG0EW00.FG0EWIXT <= FG0EW00.FG0EWIXE)

        FG0EW01.FG0EWFCS[FG0EWIXT] = FG0EW00.FG0EWMTL[FG0EWIXT];
        FFXREC.FFXNUMB = FG0EW01.FG0EWFCS[FG0EWIXT];
        XSFFS10();
        FG0EW01.FG0EWFCT[FG0EWIXT] = FFXREC.FFXCHAR;

        FG0EW00.FG0EWMTL[FG0EWIXT] = 0; /* reset month tot chng flag*/
        FG0EW00.FG0EWMTF[FG0EWIXT] = "N"; /* clear month total*/

        FG0EW00.FG0EWIXT = FG0EW00.FG0EWIXT + 1;

      end

      FG0E190(); /* Add page to temporary storage*/
    end

  end

end // end FG0E101

// Purge temporary storage
Function FG0E110()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (TA5REC.TA5FNCCD == "P") /* Last function was purge*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FG0EW01 empty; /* M001 display storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FG0EW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FG0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "110"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0E110

// Load the month heading
Function FG0E115()

  FG0EW00.FG0EWEND = 1; /* Initialize end of range index*/
  FG0EW00.FG0EWIXM = 1; /* Initialize the map index*/
  FG0EW00.FG0EWHDG[1] = FG0EW01.FG0EWBMO; /* First month*/


  while (FG0EW00.FG0EWIXM <= 12 /* Until reach 12 months*/
   && FG0EW00.FG0EWHDG[FG0EWIXM] < FG0EW01.FG0EWEMO) /* or end of range*/

    FG0EW00.FG0EWIXM = FG0EW00.FG0EWIXM + 1; /* Increment the heading index*/

    FG0EW00.FG0EWDAT = FG0EW01.FG0EWBMO + FG0EW00.FG0EWIXM - 1;

    if (FG0EW00.FG0EWDMM > 12)
      FG0EW00.FG0EWDMM = FG0EW00.FG0EWDMM - 12;

      FG0EW00.FG0EWDYY = FG0EW00.FG0EWDYY + 1; /* Next year*/
      if (FG0EW00.FG0EWDYY == 0) /* Intro a new century*/

        FG0EW00.FG0EWDCC = FG0EW00.FG0EWDCC + 1; /* Next century*/

      end

    end

    FG0EW00.FG0EWHDG[FG0EWIXM] = FG0EW00.FG0EWDAT;
    FG0EW00.FG0EWEND = FG0EW00.FG0EWIXM; /* Set end of rang index*/

  end

end // end FG0E115

// Select sum sty group VMSgrp01
Function FG0E130()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set FF8REC empty; /* Clear row storage area*/

  if (FFWREC.XCTCD == " ") /* Country code blank*/
    FF8REC.XCTCD = "*"; /* Country code*/
  else
    FF8REC.XCTCD = FFWREC.XCTCD;
  end

  FF8REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF8REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF8REC.SYBSTGNB = FF3REC.SYBSTGNB; /* Style group number*/

  set FFFREC empty; /* Clear row storage area*/

  FFFREC.FFFBEGMO = 000000; /* Fcst month*/
  FFFREC.FFFENDMO = 999999; /* Fcst month*/
  FFFREC.FFFFUNCD = "SS"; /* Function code*/

  try
    call "IO3730" (FFFREC, SQLCA, FF8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100
     || SQLCA.VAGen_SQLCODE == -305)
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF8REC.FF8KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0E130

// Sel and open VFFSTY01 cursor
Function FG0E140()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set FF3REC empty; /* Clear row storage area*/

  FF3REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF3REC.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group code*/
  FF3REC.XLCCD = "10"; /* Life cycle code*/

  FF3REC.YSMXDV = "*"; /* div group*/

  try
    call "IO3990" ("S1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful , return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "140"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0E140

// Fetch next row in VFFSTY01
Function FG0E141()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("N1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FG0EW00.FG0EWCR1 = "Y"; /* End of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "141"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0E141

// Close cursor for VFFSTY01 grp
Function FG0E142()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("C1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "142"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0E142

// Sel and open VFFSTY01 - CAT
Function FG0E150()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set FF3REC empty; /* Clear row storage area*/

  FF3REC.XPCCD = FFWREC.XPCCD; /* Category code*/
  FF3REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF3REC.XLCCD = "10"; /* Life cycle code*/
  FF3REC.YSMXDV = "*"; /* div group*/

  try
    call "IO3990" ("S2", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful , return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "150"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0E150

// Fetch next row in VFFSTY01
Function FG0E151()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("N2", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FG0EW00.FG0EWCR2 = "Y"; /* End of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "151"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0E151

// Close cursor VFFSTY01 - CAT
Function FG0E152()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("C2", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "152"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0E152

// Access VMSTY001 table
Function FG0E170()
  FG0E171(); /* Select & open cursor for VMSTY001*/

  FG0EW00.FG0EWCR3 = "N"; /* End of cursor switch*/

  FG0E172(); /* Fetch next row in VMSTY001*/

  while (FG0EW00.FG0EWCR3 == "N") /* Until end of cursor*/

    FG0E172(); /* Fetch next row in VMSTY001*/

  end

  FG0E173(); /* Close the cursor for VMSTY001*/


end // end FG0E170

// Sel & open cursor for VMSTY001
Function FG0E171()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set FF9REC empty; /* Clear row storage area*/

  FF9REC.XCTCD = FFWREC.XCTCD; /* Country code*/
  FF9REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF9REC.SY1STNBR = FG0EW01.FG0EWSTY[FG0EWIXM]; /* Style number*/
  FF9REC.SY2CLRID = FG0EW00.SY2CLRID; /* Color id*/
  FF9REC.XDMCD = FG0EW00.XDMCD; /* Dimension code*/

  set FFFREC empty; /* Clear row storage area*/

  FFFREC.FFFBEGMO = FFWREC.FFABEGMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFWREC.FFAENDMO; /* Ending month*/
  FFFREC.FFFFUNCD = "S1"; /* Function code*/

  try
    call "IO3740" (FFFREC, SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "171"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0E171

// Fetch next 's1' VMSTY001
Function FG0E172()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set FF9REC empty;

  try
    call "IO3740" ("N1", SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (FF9REC.FF4FCTMO in FG0EW00.FG0EWHDG)

        FG0EWIXF = FG0EWIXM - 1; /* Find the row it is at*/
        FG0EWIXF = FG0EWIXF * 12 + sysVar.arrayIndex; /* find the position it is at*/
        FG0EW01.FG0EWFCS[FG0EWIXF] = FF9REC.FF6SLFCT;
                                   /* Save the fcst*/
        FG0EW01.FG0EWCNT[FG0EWIXF] = FF9REC.ZZZCHGCT; /* Save chng count*/

        FFXREC.FFXNUMB = FF9REC.FF6SLFCT;
        XSFFS10(); /* Convert the value from NUM to CHAR*/
        FG0EW01.FG0EWFCT[FG0EWIXF] = FFXREC.FFXCHAR;

      end

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FG0EW00.FG0EWCR3 = "Y"; /* End of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "172"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0E172

// Close the 's1' cursor VMSTY001
Function FG0E173()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "C1"; /* Function code*/

  try
    call "IO3740" (FFFREC, SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "173"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0E173

// Access VMSTY001 table - SUM
Function FG0E174()
  FG0EW00.FG0EWIXN = 1; /* set index to 1*/
  while (FG0EW00.FG0EWIXN <= 12) /* Until reach 12 months*/

    if (FG0EW00.FG0EWHDG[FG0EWIXN] > 0) /* month exists*/
      FG0E175(); /* select sum VMSTY001 all ctrys*/
    end
    FG0EW00.FG0EWIXN = FG0EW00.FG0EWIXN + 1;

  end
end // end FG0E174

// Select 'SS' sum VMSTY001
Function FG0E175()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set FF9REC empty; /* Clear row storage area*/

  FF9REC.XCTCD = "*"; /* Country code*/
  FF9REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF9REC.SY1STNBR = FG0EW01.FG0EWSTY[FG0EWIXM]; /* Style number*/
  FF9REC.SY2CLRID = FG0EW00.SY2CLRID; /* Color id*/
  FF9REC.XDMCD = FG0EW00.XDMCD; /* Dimension code*/

  set FFFREC empty; /* Clear row storage area*/

  FFFREC.FFFBEGMO = FG0EW00.FG0EWHDG[FG0EWIXN]; /* Beginning month*/
  FFFREC.FFFENDMO = FG0EW00.FG0EWHDG[FG0EWIXN]; /* Ending month*/
  FFFREC.FFFFUNCD = "SS"; /* Function code*/

  try
    call "IO3740" (FFFREC, SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      FG0EWIXF = FG0EWIXM - 1; /* Find the row it is at*/
      FG0EWIXF = FG0EWIXF * 12 + FG0EWIXN; /* find the position it is at*/
      FG0EW01.FG0EWFCS[FG0EWIXF] = FF9REC.FF6SLFCT; /* Save the fcst*/
      FG0EW01.FG0EWCNT[FG0EWIXF] = FF9REC.ZZZCHGCT; /* Save chng cnt*/

      FFXREC.FFXNUMB = FF9REC.FF6SLFCT;
      XSFFS10(); /* Convert the value from NUM to CHAR*/
      FG0EW01.FG0EWFCT[FG0EWIXF] = FFXREC.FFXCHAR;

      return; /* Return to previous process*/

    else
      if (SQLCA.VAGen_SQLCODE == 100
       || SQLCA.VAGen_SQLCODE == -305)
        return; /* Return to previous process*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "175"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0E175

// Calculate the grand total
Function FG0E180()

   /* --------------------------------------------------------*/
   /* Calculate the total forecast for each month. If the*/
   /* style colors within the style group are across two*/
   /* pages, bring in the accumulate totals and change flags.*/
   /* --------------------------------------------------------*/

  if (FG0EW00.FG0EWIXM == 1)
    FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXM;
  else
    FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXM - 1; /* Initialize map index*/
  end
  FG0EW01.FG0EWSTY[FG0EWIXM] = " ";
  FG0EW01.FG0EWDES[FG0EWIXM] = "   TOTAL"; /* Total line description*/
  FG0EW01.FG0EWGFL[FG0EWIXM] = "N"; /* Style group flag*/

  while (FG0EW00.FG0EWIXW >= 1 /* Until top of the page*/
   && FG0EW01.FG0EWGFL[FG0EWIXW] == "N") /* or reach style grp*/

    FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXW - 1;
    FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXF * 12 + 1;
    FG0EW00.FG0EWIXE = FG0EW00.FG0EWIXF + FG0EW00.FG0EWEND - 1;

    FG0EW00.FG0EWIXT = FG0EW00.FG0EWIXM - 1;
    FG0EW00.FG0EWIXT = FG0EW00.FG0EWIXT * 12 + 1;

    FG0EW00.FG0EWCLM = 1; /* Initialize temp total idx*/

    while (FG0EW00.FG0EWIXF <= FG0EW00.FG0EWIXE)

      FG0EW00.FG0EWTOT = FG0EW01.FG0EWFCS[FG0EWIXT]; /* Total qty*/
      FG0EW00.FG0EWFCS = FG0EW01.FG0EWFCS[FG0EWIXF]; /* Mo. fcst qty*/
      FG0EW01.FG0EWFCS[FG0EWIXT] = FG0EW00.FG0EWTOT + FG0EW00.FG0EWFCS;

      if (FG0EW00.FG0EWMTF[FG0EWCLM] == "Y") /* Month total changed*/

        FG0EW00.FG0EWTOT = FG0EW01.FG0EWFCS[FG0EWIXT]; /* Total qty*/
        FG0EW00.FG0EWFCS = FG0EW00.FG0EWMTL[FG0EWCLM];
                                   /* Mo. fcst qty*/
        FG0EW01.FG0EWFCS[FG0EWIXT] = FG0EW00.FG0EWTOT + FG0EW00.FG0EWFCS;

        FG0EW00.FG0EWMTF[FG0EWCLM] = "N"; /* Reset month tot chng flg*/
        FG0EW00.FG0EWMTL[FG0EWCLM] = 0; /* Clear the month tot*/

      end

      FFXREC.FFXNUMB = FG0EW01.FG0EWFCS[FG0EWIXT];
      XSFFS10(); /* Convert from NUM to CHAR*/
      FG0EW01.FG0EWFCT[FG0EWIXT] = FFXREC.FFXCHAR;

      FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXF + 1;
      FG0EW00.FG0EWIXT = FG0EW00.FG0EWIXT + 1;
      FG0EW00.FG0EWCLM = FG0EW00.FG0EWCLM + 1;

    end

    FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW - 1;

  end

  FG0EW00.FG0EWNPG = 0; /* Clear the next page number*/

  FG0EW00.FG0EWIXM = FG0EW00.FG0EWIXM + 1; /* Increment map index*/

end // end FG0E180

// Add page to temp storage
Function FG0E190()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FG0EW01.XXXTSLEN = FG0EW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  if (FG0EW00.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P") /* and last function purge*/

    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/

  end

  try
    call "TA0050" (FG0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FG0EW01 empty; /* M001 display storage*/
    move "     " to FG0EW01.FG0EWFCT[1] for all; /* Initialize the forecast qty field*/

    /* ---------------------------------------------------------*/
     /* Save the search information in map display storage queue*/
    /* ---------------------------------------------------------*/
    FG0EW01.FG0EWBMO = FFWREC.FFABEGMO; /* Beginning month*/
    FG0EW01.FG0EWEMO = FFWREC.FFAENDMO; /* Ending month*/
    FG0EW00.FG0EWALL = FG0EM001.FG0EMALL; /* All styles flag*/
    FG0EW00.FG0EWSEM[1] = FG0EM001.FG0EMSEM[1]; /* Season end mo*/
    FG0EW00.FG0EWSEM[2] = FG0EM001.FG0EMSEM[2]; /* Season end mo*/
    FG0EW00.FG0EWSEM[3] = FG0EM001.FG0EMSEM[3]; /* Season end mo*/
    FG0EW00.FG0EWSEM[4] = FG0EM001.FG0EMSEM[4]; /* Season end mo*/

    FG0EW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    FG0EW00.FG0EWIXM = 1; /* Display line number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "190"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0E190

// Select sum VMSTY001 any month
Function FG0E195()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set FF9REC empty; /* Clear row storage area*/

  if (FFWREC.XCTCD == " ")
    FF9REC.XCTCD = "*"; /* Country code*/
  else
    FF9REC.XCTCD = FFWREC.XCTCD; /* Country code*/
  end

  FF9REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF9REC.SY1STNBR = FF3REC.SY1STNBR; /* Style number*/
  FF9REC.SY2CLRID = FF3REC.SY2CLRID; /* Color id*/
  FF9REC.XDMCD = FF3REC.XDMCD; /* Dimension code*/

  set FFFREC empty; /* Clear row storage area*/

  FFFREC.FFFBEGMO = 000000; /* Beginning month*/
  FFFREC.FFFENDMO = 999999; /* Ending month*/
  FFFREC.FFFFUNCD = "SS"; /* Function code*/

  try
    call "IO3740" (FFFREC, SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100
     || SQLCA.VAGen_SQLCODE == -305)
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "195"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0E195

// Format and converse the map
Function FG0E200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FG0EW00.FG0EWSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    set FG0EM001 initial; /* M001 input/output area*/

    FG0EM001.FG0EMBMO = FG0EW01.FG0EWBMY; /* Beginning month*/
    FG0EM001.FG0EMEMO = FG0EW01.FG0EWEMY; /* Ending month*/

    FG0EM001.YPGCD = FFWREC.YPGCD; /* Type group code*/
    FG0EM001.YPGABRV = FFWREC.YPGABRV; /* Type group abbreviation*/

    FG0EM001.XPCCD = FFWREC.XPCCD; /* Category code*/
    FG0EM001.XPCABRV = FFWREC.XPCABRV; /* Category abbreviation*/

    FG0EM001.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
    FG0EM001.SYBSTGNM = FFWREC.SYBSTGNM; /* Style group name*/

    FG0EM001.FG0EMALL = FG0EW00.FG0EWALL; /* All styles flag*/

    FG0EM001.XCTCD = FFWREC.XCTCD; /* Country code*/
    FG0EM001.XCTABRV = FFWREC.XCTABRV; /* Country abbreviation*/
    if (FFWREC.XCTCD == " ") /* Country code blank*/
      FG0EM001.XCTABRV = "SUM"; /* Country abbreviation*/
    end

    FG0EM001.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
    FG0EM001.YSMSMDSC = FFWREC.YSMSMDSC; /* Division group desc*/

    FG0EM001.FG0EMSEM[1] = FG0EW00.FG0EWSEM[1]; /* Season end month*/
    FG0EM001.FG0EMSEM[2] = FG0EW00.FG0EWSEM[2]; /* Season end month*/
    FG0EM001.FG0EMSEM[3] = FG0EW00.FG0EWSEM[3]; /* Season end month*/
    FG0EM001.FG0EMSEM[4] = FG0EW00.FG0EWSEM[4]; /* Season end month*/

    set FG0EM001.FG0EMBMO normal; /* Beginning month*/
    set FG0EM001.FG0EMEMO normal; /* Ending month*/
    set FG0EM001.YPGCD normal; /* Type group code*/
    set FG0EM001.XPCCD normal; /* Category code*/
    set FG0EM001.SYBSTGNB normal; /* Style group number*/
    set FG0EM001.FG0EMALL normal; /* All styles flag*/
    set FG0EM001.XCTCD normal; /* Country code*/
    set FG0EM001.FG0EMSEM[1] initialAttributes; /* Season end month*/
    set FG0EM001.FG0EMSEM[2] initialAttributes;
    set FG0EM001.FG0EMSEM[3] initialAttributes;
    set FG0EM001.FG0EMSEM[4] initialAttributes;

    if (FG0EW00.FG0EWSWF == "Y") /* Map must be formatted*/
      FG0E210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FG0EM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FG0EM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG0EM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FG0EM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FG0EM001 alarm; /* Indicate sound alarm*/

  end

  converse FG0EM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = FG0EM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG0EM001.CAITEM; /* Application data*/


end // end FG0E200

// Format the display data
Function FG0E210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  FG0EW00.FG0EWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (FG0EW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (FG0EW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (FG0EW00.FG0EWSWU == "Y") /* Current page was changed*/

        FG0ES03(); /* Update temporary storage page*/

        FG0EW00.FG0EWSWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (FG0EW00.XXXTSPAG > FG0EW00.TA5TSQIX) /* Desired greater highest*/
        FG0EW00.XXXTSPAG = FG0EW00.TA5TSQIX; /* Default to highest*/
      end

      TA5REC.TA5TSQIX = FG0EW00.XXXTSPAG;

      FG0ES04(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set FG0EM001.XXXLITPG skip; /* "PAGE" literal*/
    FG0EM001.XXXTSPAG = FG0EW00.XXXTSPAG; /* Current page*/
    set FG0EM001.XXXLITOF skip; /* "OF" literal*/
    FG0EM001.TA5TSQIX = FG0EW00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  if (FG0EW00.TA5TSQIX != 0) /* If data obtained*/
    FG0EM001.FG0EM1SM = FG0EW00.FG0EW1SM; /* Projected intro. month*/
    FG0EM001.FG0EMCOM = FG0EW00.FG0EWCOM; /* Projected closeout month*/
  end

   /* ------------------------------------------------------*/
   /* Darken all the fcst qty fields on the screen*/
   /* ------------------------------------------------------*/

  FG0EW00.FG0EWIXM = 1;
  while (FG0EW00.FG0EWIXM <= 14)

    FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXM - 1; /* Map index*/
    FG0EW00.FG0EWIXF = FG0EWIXF * 6 + 1;
    FG0EW00.FG0EWIXE = FG0EWIXF + 6 - 1;

    while (FG0EW00.FG0EWIXF <= FG0EW00.FG0EWIXE) /* End of screen*/

     /* SET FG0EM001.FG0EMFCS(FG0EWIXF) DEFINED;*/
      FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXF + 1;

    end
    FG0EW00.FG0EWIXM = FG0EW00.FG0EWIXM + 1;
  end
   /* ------------------------------------------------------*/
   /* Move the heading*/
   /* ------------------------------------------------------*/

  FG0EW00.FG0EWIXF = 1; /* Initialize the map index*/
  FG0EW00.FG0EWIXM = FG0EW00.FG0EWLEF;
                                   /* Initialize the work area index*/

  if (FG0EW00.FG0EW-MON-LEFT[FG0EWPGX] == "Y") /* 2nd page of the season*/
    FG0EW00.FG0EWREM = FG0EW00.FG0EWSIN[FG0EWSNX] - 6;
    FG0EW00.FG0EWRIG = FG0EW00.FG0EWLEF + FG0EW00.FG0EWREM - 1;
  else
    if (FG0EW00.FG0EWSIN[FG0EWSNX] <= 6)
      FG0EW00.FG0EWRIG = FG0EW00.FG0EWLEF + FG0EW00.FG0EWSIN[FG0EWSNX] - 1;
    else
      FG0EW00.FG0EWRIG = FG0EW00.FG0EWLEF + 6 - 1;
    end
  end

  while (FG0EW00.FG0EWIXF <= 6) /* End of page*/
    if (FG0EW00.FG0EWIXM <= FG0EW00.FG0EWRIG)

      FG0EM001.FG0EMHD[FG0EWIXF] = FG0EW00.FG0EWHYM[FG0EWIXM];
      set FG0EM001.FG0EMHD[FG0EWIXF] skip;

    else
      set FG0EM001.FG0EMHD[FG0EWIXF] initialAttributes;
    end
    FG0EW00.FG0EWIXM = FG0EW00.FG0EWIXM + 1; /* Increment the map index*/
    FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXF + 1; /* Increment the work area index*/

  end

   /* ------------------------------------------------------*/
   /* Move detail lines*/
   /* ------------------------------------------------------*/

  FG0EW00.FG0EWIXM = 1; /* Initialize the map index*/

  while (FG0EW00.FG0EWIXM <= 14)
    if (FG0EW01.FG0EWDES[FG0EWIXM] > " "
     || FG0EW01.FG0EWSTY[FG0EWIXM] > " ")

      FG0EM001.FG0EMSTY[FG0EWIXM] = FG0EW01.FG0EWSTY[FG0EWIXM];
      FG0EM001.FG0EMDES[FG0EWIXM] = FG0EW01.FG0EWDES[FG0EWIXM];

      if (FG0EW01.FG0EWGFL[FG0EWIXM] == "Y") /* Process color or total line*/

        FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXM - 1;
        FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXF * 6 + 1;
        FG0EW00.FG0EWIXE = FG0EW00.FG0EWIXF + 6 - 1;

        while (FG0EW00.FG0EWIXF <= FG0EW00.FG0EWIXE)

          set FG0EM001.FG0EMFCS[FG0EWIXF] initialAttributes; /* Dark stygrp line*/
          FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXF + 1;

        end

      else
        /* -------------------------------------------------*/
         /* Move forecast quantity fields. For the first*/
         /* total line on the page, need to check if any*/
         /* monthly fcst within the same style group on the*/
         /* previous page has been updated and accomodate*/
         /* the changes to the total on the current page.*/
        /* -------------------------------------------------*/

        if (FG0EW00.FG0EW-MON-LEFT[FG0EWPGX] == "Y") /* 2nd page of the seas*/
          FG0EW00.FG0EWREM = FG0EW00.FG0EWSIN[FG0EWSNX] - 6;
          FG0ES15(); /* Calc subtot & tot from previous page*/
        else
          if (FG0EW00.FG0EWSIN[FG0EWSNX] <= 6)
            FG0EW00.FG0EWREM = FG0EW00.FG0EWSIN[FG0EWSNX];
          else
            FG0EW00.FG0EWREM = 6;
          end
          FG0EW00.FG0EWTSB[FG0EWIXM] = 0;
        end

        FG0EW00.FG0EWIXN = 1; /* No. of months processed*/

        FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXM - 1;
        FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXF * 6 + 1;
        FG0EW00.FG0EWIXE = FG0EW00.FG0EWIXF + 6 - 1;

        FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXM - 1;
        FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW * 12 + FG0EW00.FG0EWLEF;
        FG0EW00.FG0EWIXT = FG0EW00.FG0EWIXM - 1;
        FG0EW00.FG0EWIXT = FG0EW00.FG0EWIXT * 12 + FG0EW00.FG0EWEND;

        FG0EW00.FG0EWCLM = FG0EW00.FG0EWLEF; /* Initialize accum tot idx*/

        while (FG0EW00.FG0EWIXF <= FG0EW00.FG0EWIXE) /* Until end of page*/
          if (FG0EW00.FG0EWIXN <= FG0EW00.FG0EWREM)

            FG0EM001.FG0EMFCS[FG0EWIXF] = FG0EW01.FG0EWFCT[FG0EWIXW];
            FG0EW00.FG0EWTSB[FG0EWIXM] = FG0EW00.FG0EWTSB[FG0EWIXM] +                                        FG0EW01.FG0EWFCS[FG0EWIXW];

          end

          FG0ES09(); /* Unprotect the qty field*/

          FG0EW00.FG0EWIXN = FG0EW00.FG0EWIXN + 1;
          FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXF + 1;
          FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW + 1;
          FG0EW00.FG0EWCLM = FG0EW00.FG0EWCLM + 1;

        end

        /* ----------------------------------------------------*/
        /* If reach the end of the page and next page doesn't*/
        /* have any month within the same season, then show*/
        /* the totals on the current page.*/
        /* ----------------------------------------------------*/

        if (FG0EW00.FG0EWIXF > FG0EW00.FG0EWIXE /* End of page*/
         || FG0EW00.FG0EWIXN > FG0EW00.FG0EWSIN[FG0EWSNX]) /* or end of seas*/
          if (FG0EW00.FG0EWIXN > FG0EW00.FG0EWSIN[FG0EWSNX])
            FG0ES06(); /* Process totals*/
          else
            if (FG0EW00.FG0EW-MON-LEFT[FG0EWPGX] == "Y") /* 2nd page of seas*/
              FG0ES06(); /* Process totals*/
            else
              set FG0EM001.FG0EMSHD[1] initialAttributes;
              set FG0EM001.FG0EMSHD[2] initialAttributes;
              set FG0EM001.FG0EMGHD[1] initialAttributes;
              set FG0EM001.FG0EMGHD[2] initialAttributes;
              FG0EW00.FG0EWNPG = FG0EW00.FG0EWPGX + 1;
              FG0EW00.FG0EW-MON-LEFT[FG0EWNPG] = "Y";
            end
          end
        end

      end

    end

    FG0EW00.FG0EWIXM = FG0EW00.FG0EWIXM + 1;

  end

   /* -------------------------------------------------------*/
   /* Protect those fields which are under the months before*/
   /* projected intro month and after the projected closeout*/
   /* month (include).*/
   /* -------------------------------------------------------*/

  FG0EW00.FG0EWIXW = 1; /* Initialize fcst field index*/

  while (FG0EW00.FG0EWIXW <= 14) /* Until end of page*/
    if (FG0EW01.FG0EWGFL[FG0EWIXW] == "Y") /* stygrp line*/
      /* next sentence*/
    else
      if (FG0EW01.FG0EWSTY[FG0EWIXW] == " " /* End of list*/
       && FG0EW01.FG0EWDES[FG0EWIXW] == " ")

      else
        if (FG0EW01.FG0EWDES[FG0EWIXW] == "    TOTAL") /* Total line*/
       /* next sentence*/
        else
          FG0EW00.FG0EWIXM = FG0EW00.FG0EWLEF;
                                   /* Initialize heading index*/
          FG0EW00.FG0EWIXF = 1;

          if (FG0EW00.FG0EW-MON-LEFT[FG0EWPGX] == "Y") /* 2nd page of the seas*/
            FG0EW00.FG0EWREM = FG0EW00.FG0EWSIN[FG0EWSNX] - 6;
          else
            if (FG0EW00.FG0EWSIN[FG0EWSNX] <= 6)
              FG0EW00.FG0EWREM = FG0EW00.FG0EWSIN[FG0EWSNX];
            else
              FG0EW00.FG0EWREM = 6;
            end
          end

          while (FG0EW00.FG0EWIXM <= FG0EW00.FG0EWEND /* end of range*/
           && FG0EW00.FG0EWIXF <= FG0EW00.FG0EWREM 
           && FG0EW00.FG0EWIXM <= 6)

            if (FG0EW00.FG0EWHDG[FG0EWIXM] < FG0EW01.FG0EW1SD[FG0EWIXW]
             || FG0EW00.FG0EWHDG[FG0EWIXM] >= FG0EW01.FG0EWCOD[FG0EWIXW])

              FG0EW00.FG0EWIXT = FG0EW00.FG0EWIXW - 1;
              FG0EW00.FG0EWIXT = FG0EW00.FG0EWIXT * 6 + FG0EW00.FG0EWIXF;

              set FG0EM001.FG0EMFCS[FG0EWIXT] skip;

            end

            FG0EW00.FG0EWIXM = FG0EW00.FG0EWIXM + 1; /* Increment the heading index*/
            FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXF + 1;
                                   /* Increment the fcst index*/

          end

        end
      end
    end
    FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW + 1; /* Increment the map index*/

  end

end // end FG0E210

// Check attention identifier
Function FG0E300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (FG0EW00.FG0EWSWR == "Y") /* Request for data*/
      set FG0EW01 empty; /* M001 display storage*/
    end

    FG0EW00.FG0EWSWF = "Y"; /* Format the map switch*/
    FG0EW00.FG0EWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FG0EM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (FG0EW00.FG0EWMST == "Y"
       || FG0EW00.FG0EWMST == " ")

        FG0E110(); /* Purge temporary storage*/

        XSFFS01(); /* Exit to another application*/

        set FG0EM001.CATOAP cursor, bold; /* Highlight*/

      else

        if (FG0EW00.FG0EWERR == "Y")
                                   /* Warning msg already shown once*/

          FG0EW00.FG0EWERR = "N"; /* Clear the error switch*/
          FG0E110(); /* Purge temporary storage*/
          XSFFS01(); /* Exit to another application*/
          set FG0EM001.CATOAP cursor, bold; /* Highlight*/

        else

          COMMAREA.CATOAP = " "; /* TO application*/
          FFWREC.XXXMODID = "300"; /* Module identification*/
          converseLib.validationFailed(369); /* Indicate update master fcst*/
          FG0EW00.FG0EWERR = "Y"; /* Set the error switch*/

        end

      end

    else

      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CACURRAP = "FG0A"; /* Return to appliction*/
      COMMAREA.CAITEM = "FG0EM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      COMMAREA.CATOAP = "FG0A"; /* Return to appliction*/

    end

    if (FG0EW00.FG0EWMST == "Y"
     || FG0EW00.FG0EWMST == " ")

      FG0E110(); /* Purge temporary storage*/

      XSFFS01(); /* Exit to another application*/

    else

      if (FG0EW00.FG0EWERR == "Y") /* Warning msg already shown once*/

        FG0EW00.FG0EWERR = "N"; /* Clear the error switch*/
        FG0E110(); /* Purge temporary storage*/
        XSFFS01(); /* Exit to another application*/

      else

        COMMAREA.CATOAP = " "; /* TO application*/
        FFWREC.XXXMODID = "300"; /* Module identification*/
        converseLib.validationFailed(369); /* Indicate update master fcst*/
        FG0EW00.FG0EWERR = "Y"; /* Set the error switch*/

      end

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, reset the error message switch.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FG0EW00.FG0EWERR = "N";
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf15) /* and PF15 was not pressed*/

    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

end // end FG0E300

// Reset highlighted fields
Function FG0E400()

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FG0EM001.FG0EMSEM[1] initialAttributes; /* Season end month*/
  set FG0EM001.FG0EMSEM[2] initialAttributes; /* Season end month*/
  set FG0EM001.FG0EMSEM[3] initialAttributes; /* Season end month*/
  set FG0EM001.FG0EMSEM[4] initialAttributes; /* Season end month*/

  set FG0EM001.FG0EMBMO normal; /* Beginning month*/
  set FG0EM001.FG0EMEMO normal; /* Ending month*/

  set FG0EM001.YPGCD normal; /* Type group code*/
  set FG0EM001.XPCCD normal; /* Category code*/
  set FG0EM001.SYBSTGNB normal; /* Style group code*/
  set FG0EM001.FG0EMALL normal; /* All styles flag*/
  set FG0EM001.XCTCD normal; /* Country code*/


  set FG0EM001.CATOAP initialAttributes; /* Commarea TO application*/
  set FG0EM001.CAITEM initialAttributes; /* Commarea application data*/

  FG0EW00.FG0EWIXT = 7; /* range index*/

  if (" " in FG0EM001.FG0EMHD) /* Find the position of end of range*/
    FG0EW00.FG0EWIXT = sysVar.arrayIndex;
  end

  FG0EW00.FG0EWIXM = 1;

  while (FG0EW00.FG0EWIXM <= 14 /* Until end of page*/
   && FG0EM001.FG0EMDES[FG0EWIXM] != " ") /* or the last row*/

    if (FG0EM001.FG0EMDES[FG0EWIXM] != " "
     || FG0EW01.FG0EWSTY[FG0EWIXM] != " ")

      if (FG0EW01.FG0EWGFL[FG0EWIXM] == "N") /* Not style group row*/

        FG0E410(); /* Reset the forecast field*/

      end

    end
    FG0EW00.FG0EWIXM = FG0EW00.FG0EWIXM + 1;
  end

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FG0EM001.YPGCD == "?" /* Type group list requested*/
   || FG0EM001.XPCCD == "?" /* Category list requested*/
   || FG0EM001.XCTCD == "?") /* Country list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of ypg codes.*/
   /* ------------------------------------------------------------*/

  if (FG0EM001.YPGCD == "?") /* product list requested*/

    XPXX001(); /* init for pop up window*/

    XX0XW02.XX0XWHDR = "    TYPE GRP";
    XX0XW02.YPGFFFL = "Y";

    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end

    if (XX0XW02.XX0XWPIX > 0)
      FG0EM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FG0EM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FG0EM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FG0EM001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (FG0EM001.XPCCD == "?") /* Category list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CAT"; /* Heading*/
    XX0XW02.XGPCD = XPCREC.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FG0EM001.XPCCD = FFWREC.XPCCD; /* Restore prior code*/
      FG0EM001.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
    else
      FG0EM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FG0EM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FG0EM001.XPCCD cursor; /* Establish cursor position*/

  end


   /* ------------------------------------------------------------*/
   /* If requested, display the list of country codes.*/
   /* ------------------------------------------------------------*/

  if (FG0EM001.XCTCD == "?") /* Country list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CTRY"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCT01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FG0EM001.XCTCD = FFWREC.XCTCD; /* Restore prior code*/
      FG0EM001.XCTABRV = FFWREC.XCTABRV; /* Abbreviation*/
    else
      FG0EM001.XCTCD = XCTTBL.XCTCD[XX0XWPIX]; /* Selected code*/
      FG0EM001.XCTABRV = XCTTBL.XCTABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FG0EM001.XCTCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/

  exit stack; /* Exit to display map*/

end // end FG0E400

// Reset forecast fields
Function FG0E410()

  FG0EW00.FG0EWCLM = 1; /* Initialize column index*/

  FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXM - 1;
  FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXF * 6 + 1;

  if (FG0EW00.FG0EW-MON-LEFT[FG0EWPGX] == "Y") /* 2nd page of the season*/
    FG0EW00.FG0EWREM = FG0EW00.FG0EWSIN[FG0EWSNX] - 6;
    FG0EW00.FG0EWIXE = FG0EW00.FG0EWIXF + FG0EW00.FG0EWREM - 1;
  else
    if (FG0EW00.FG0EWSIN[FG0EWSNX] <= 6)
      FG0EW00.FG0EWIXE = FG0EW00.FG0EWIXF + FG0EW00.FG0EWSIN[FG0EWSNX] - 1;
    else
      FG0EW00.FG0EWIXE = FG0EW00.FG0EWIXF + 6 - 1;
    end
  end

  FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXM - 1;
  FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW * 6 + FG0EW00.FG0EWIXT;

  while (FG0EW00.FG0EWIXF <= FG0EW00.FG0EWIXE /* Until end of page*/
   && FG0EW00.FG0EWIXF < FG0EW00.FG0EWIXW) /* or end of range*/

    if (FG0EM001.FG0EMDES[FG0EWIXM] == "   TOTAL") /* Total line*/

      set FG0EM001.FG0EMFCS[FG0EWIXF] skip; /* total qty field*/

    else

      if (FG0EW00.FG0EWHDG[FG0EWCLM] >= FG0EW00.FG0EW1SD /* After intro. mo*/
       && FG0EW00.FG0EWHDG[FG0EWCLM] < FG0EW00.FG0EWCOD)
                                   /* Before c/o mo*/

        set FG0EM001.FG0EMFCS[FG0EWIXF] normal; /* Fcst qty field*/

      else
        set FG0EM001.FG0EMFCS[FG0EWIXF] skip; /* Forecast quantity fld*/

      end

    end

    FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXF + 1;
    FG0EW00.FG0EWCLM = FG0EW00.FG0EWCLM + 1;

  end
end // end FG0E410

// Verify the entered data
Function FG0E500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FG0EM001.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FG0EM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7  /* Scroll back request*/
   || converseVar.eventKey is pf8  /* or scroll forward request*/
   || converseVar.eventKey is pf10 /* or scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/

    FG0E510(); /* Verify scroll request*/

  else

    /* ------------------------------------------------------------*/
     /* Verify data in the line.*/
    /* ------------------------------------------------------------*/

    if (FG0EW00.FG0EWSWO == "Y") /* Data was obtained*/
      FG0E520(); /* Verify forecast quantity*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Verify the entered keys*/
   /* ------------------------------------------------------------*/

  FG0E550(); /* Verify the entered keys*/

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FG0E500

// Verify scroll request
Function FG0E510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FG0EW00.XXXTSPAG < 2)       /* and no previous pages*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FG0EW00.XXXTSPAG >= FG0EW00.TA5TSQIX) /* and no more pages*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll left was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left request*/

    if (FG0EW00.FG0EWPGX == 1) /* and no more months*/

      FFWREC.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(23); /* No more columns to display*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If scroll right was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right request*/

    if (FG0EW00.FG0EWRIG == FFZREC.FFZNUMMO) /* No more months*/

      FFWREC.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(24); /* No more columns to display*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  FG0EW00.FG0EWIXM = 14; /* Initialize display index*/

  while (FG0EW00.FG0EWIXM >= 1) /* Until end of the page*/

    if (FG0EM001.FG0EMSTY[FG0EWIXM] > " ")

      FG0EW00.FG0EWIXE = FG0EW00.FG0EWIXM - 1;
      FG0EW00.FG0EWIXE = FG0EW00.FG0EWIXE * 6 + 1;

      if (FG0EW00.FG0EW-MON-LEFT[FG0EWPGX] == "Y") /* 2nd page of season*/

        FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXM - 1;
        FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXF * 6 +                           FG0EW00.FG0EWSIN[FG0EWSNX] - 6;

        FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXM - 1;
        FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW * 12 + FG0EW00.FG0EWLEF;
        FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW +                           FG0EW00.FG0EWSIN[FG0EWSNX] - 6 - 1;

      else

        FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXM - 1;

        if (FG0EW00.FG0EWSIN[FG0EWSNX] <= 6)
          FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXF * 6 +                              FG0EW00.FG0EWSIN[FG0EWSNX];
        else
          FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXF * 6 + 6;
        end

        FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXM - 1;
        FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW * 12 + FG0EW00.FG0EWLEF;

        if (FG0EW00.FG0EWSIN[FG0EWSNX] <= 6)
          FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW +                              FG0EW00.FG0EWSIN[FG0EWSNX] - 1;
        else
          FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW + 6 - 1;
        end

      end

      while (FG0EW00.FG0EWIXF >= FG0EW00.FG0EWIXE)

        if (FG0EM001.FG0EMFCS[FG0EWIXF] != FG0EW01.FG0EWFCT[FG0EWIXW])

          FFWREC.XXXMODID = "510"; /* Module identification*/
          set FG0EM001.FG0EMFCS[FG0EWIXF] cursor, bold; /* Highlight*/
          converseLib.validationFailed(5); /* Modifications not allowed*/

        end

        FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXF - 1; /* Decrement map index*/
        FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW - 1; /* Decrement storage index*/

      end
    end

    FG0EW00.FG0EWIXM = FG0EW00.FG0EWIXM - 1; /* Decrement disply index*/

  end


  if (FG0EM001.FG0EMSEM[4] != FG0EW00.FG0EWSEM[4]) /* season end month chnged*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG0EM001.FG0EMSEM[4] cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/

  end

  if (FG0EM001.FG0EMSEM[3] != FG0EW00.FG0EWSEM[3]) /* season end month chnged*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG0EM001.FG0EMSEM[3] cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/

  end

  if (FG0EM001.FG0EMSEM[2] != FG0EW00.FG0EWSEM[2]) /* season end month chnged*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG0EM001.FG0EMSEM[2] cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/

  end

  if (FG0EM001.FG0EMSEM[1] != FG0EW00.FG0EWSEM[1]) /* season end month chnged*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG0EM001.FG0EMSEM[1] cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/

  end

end // end FG0E510

// Verify data in the line
Function FG0E520()

  FG0EW00.FG0EWIXM = 14; /* Initialize disp index*/

  while (FG0EW00.FG0EWIXM >= 1) /* Until end of the page*/

    if (FG0EW01.FG0EWSTY[FG0EWIXM] > " ")

      FG0EW00.FG0EWIXE = FG0EW00.FG0EWIXM - 1;
      FG0EW00.FG0EWIXE = FG0EW00.FG0EWIXE * 6 + 1;

      FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXM - 1;

      FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXM - 1;
      FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW * 12 + FG0EW00.FG0EWLEF;

      if (FG0EW00.FG0EW-MON-LEFT[FG0EWPGX] == "Y") /* 2nd page of the seas*/
        FG0EW00.FG0EWREM = FG0EW00.FG0EWSIN[FG0EWSNX] - 6;
        FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXF * 6 + FG0EW00.FG0EWREM;
        FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW + FG0EW00.FG0EWREM - 1;
      else
        if (FG0EW00.FG0EWSIN[FG0EWSNX] <= 6)
          FG0EW00.FG0EWIXF = FG0EWIXF * 6 + FG0EW00.FG0EWSIN[FG0EWSNX];
          FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW +                              FG0EW00.FG0EWSIN[FG0EWSNX] - 1;
        else
          FG0EW00.FG0EWIXF = FG0EWIXF * 6 + 6;
          FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW + 6 - 1;
        end
      end

      FG0EW00.FG0EWCLM = FG0EW00.FG0EWRIG;
                                   /* Initialize month tot idx*/

      /* ----------------------------------------------------------*/
        /* Find out the position of the total line.*/
      /* ----------------------------------------------------------*/

      FG0EW00.FG0EWIXT = FG0EW00.FG0EWIXM;

      while (FG0EW00.FG0EWIXT <= 14 /* Untile end of page*/
       && FG0EM001.FG0EMSTY[FG0EWIXT] != " ") /* or reach total line*/

        FG0EW00.FG0EWIXT = FG0EW00.FG0EWIXT + 1;

      end

      FG0EW00.FG0EWIND = FG0EW00.FG0EWIXT; /* Save the tot line position*/

      FG0EW00.FG0EWIXT = FG0EW00.FG0EWIXT - 1;
      FG0EW00.FG0EWIXT = FG0EW00.FG0EWIXT * 12 + FG0EW00.FG0EWLEF;
      if (FG0EW00.FG0EW-MON-LEFT[FG0EWPGX] == "Y") /* 2nd page of the seas*/
        FG0EW00.FG0EWIXT = FG0EW00.FG0EWIXT +                           FG0EW00.FG0EWSIN[FG0EWSNX] - 6 - 1;
      else
        if (FG0EW00.FG0EWSIN[FG0EWSNX] <= 6)
          FG0EW00.FG0EWIXT = FG0EW00.FG0EWIXT +                              FG0EW00.FG0EWSIN[FG0EWSNX] - 1;
        else
          FG0EW00.FG0EWIXT = FG0EW00.FG0EWIXT + 6 - 1;
        end
      end

      FG0EW00.FG0EWCLM = FG0EW00.FG0EWRIG; /* Column index*/

      /* ------------------------------------------------------------*/
       /* Convert the entered quantities from CHAR format to NUM*/
       /* format.*/
       /* Check the quantities to make sure they are not negative*/
       /* values.*/
      /* ------------------------------------------------------------*/

      while (FG0EW00.FG0EWIXF >= FG0EW00.FG0EWIXE)

        if (FG0EM001.FG0EMFCS[FG0EWIXF] > " "
         && FG0EM001.FG0EMFCS[FG0EWIXF] != FG0EW01.FG0EWFCT[FG0EWIXW])

          FG0EW00.FG0EWMST = "N";
                                   /* Reset master fcst saved switch*/
          FFXREC.FFXCHAR = FG0EM001.FG0EMFCS[FG0EWIXF];
          XSFFS11(); /* Translate value format*/

          if (FFXREC.FFXRTNCD == "0") /* Normal return*/

            if (FFXREC.FFXNUMB < 0) /* Negative value*/
              if (FG0EM001.XCTCD != "0000") /* not country 0000*/

                FFWREC.XXXMODID = "520"; /* Module identification*/
                converseLib.validationFailed(10); /* Invalid value entered*/
                set FG0EM001.FG0EMFCS[FG0EWIXF] cursor, bold; /* Highlighted*/

              else

                FG0E521(); /* Update grand total areas*/

              end

            else

              FG0E521(); /* Update grand total areas*/

            end

          else

            FFWREC.XXXMODID = "520"; /* Module identification*/
            converseLib.validationFailed(10); /* Indicate invalid value entered*/
            set FG0EM001.FG0EMFCS[FG0EWIXF] cursor, bold; /* Highlighted*/

          end

        else

          if (FG0EM001.FG0EMFCS[FG0EWIXF] == " ")

            if (FG0EM001.FG0EMFCS[FG0EWIXF] != FG0EW01.FG0EWFCT[FG0EWIXW])
              FG0EW00.FG0EWMST = "N"; /* Reset mstr fcst upd switch*/
            end

            FFXREC.FFXNUMB = 0;

            FG0E521(); /* Update grand totals & change flags*/

          end

        end

        FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXF - 1; /* Decrement map index*/
        FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW - 1; /* Decrement storage index*/
        FG0EW00.FG0EWIXT = FG0EW00.FG0EWIXT - 1; /* Decrement grand tot index*/
        FG0EW00.FG0EWCLM = FG0EW00.FG0EWCLM - 1; /* Decrement column idx*/

      end

    end

    FG0EW00.FG0EWIXM = FG0EW00.FG0EWIXM - 1; /* decrement display index*/

  end


end // end FG0E520

// Update Grand tots and chg flag
Function FG0E521()

  if (FG0EM001.FG0EMFCS[FG0EWIXF] != FG0EW01.FG0EWFCT[FG0EWIXW])

    /* -------------------------------------------------------*/
      /* Turn on the change flags.*/
    /* -------------------------------------------------------*/

    FG0EW01.FG0EWFCH[FG0EWIXW] = "Y"; /* Mo fcst changed*/
    FG0EW01.FG0EWSCH[FG0EWIXM] = "Y"; /* CLR tot changed*/
    FFWREC.FFWMODSW = "Y"; /* Indicate data modified*/
    FG0EW00.FG0EWSWU = "Y"; /* Storage update switch*/

    /* -------------------------------------------------------*/
     /* Rounding the updated field.*/
    /* -------------------------------------------------------*/

    XSFFS10();

    /* -------------------------------------------------------*/
      /* Update the grand totals by subtracting the old*/
      /* forecast and adding the new one.*/
    /* -------------------------------------------------------*/

    FG0EW00.FG0EWFCS = FG0EW01.FG0EWFCS[FG0EWIXW];

    /* -----------------------------------------------------------*/
       /* Update the grand total of each style color*/
    /* -----------------------------------------------------------*/

    FG0EW00.FG0EWTOT = FG0EW01.FG0EWGND[FG0EWIXM];
    FG0EW01.FG0EWGND[FG0EWIXM] = FG0EW00.FG0EWTOT - FG0EW00.FG0EWFCS;
    FG0EW00.FG0EWTOT = FG0EW01.FG0EWGND[FG0EWIXM];
    FG0EW01.FG0EWGND[FG0EWIXM] = FG0EW00.FG0EWTOT + FFXREC.FFXNUMB;
    FG0EW01.FG0EWSCH[FG0EWIXM] = "Y"; /* Style group total changed*/

    /* -----------------------------------------------------------*/
       /* Update the monthly grand total. If the total line shows*/
       /* on the next page, need to save the changes and apply to*/
       /* the next page later on (When scrolling).*/
    /* -----------------------------------------------------------*/

    if (FG0EW00.FG0EWIND > 14) /* Total line is in next page*/

       /* next sentence*/

    else

      FG0EW00.FG0EWTOT = FG0EW01.FG0EWFCS[FG0EWIXT];
      FG0EW01.FG0EWFCS[FG0EWIXT] = FG0EW00.FG0EWTOT - FG0EW00.FG0EWFCS;
      FG0EW00.FG0EWTOT = FG0EW01.FG0EWFCS[FG0EWIXT];
      FG0EW01.FG0EWFCS[FG0EWIXT] = FG0EW00.FG0EWTOT + FFXREC.FFXNUMB;
      FG0EW01.FG0EWFCH[FG0EWIXT] = "Y"; /* Monthly grp total changed*/

      FG0EW00.FG0EWTOT = FG0EW01.FG0EWGND[FG0EWIND];
      FG0EW01.FG0EWGND[FG0EWIND] = FG0EW00.FG0EWTOT - FG0EW00.FG0EWFCS;
      FG0EW00.FG0EWTOT = FG0EW01.FG0EWGND[FG0EWIND];
      FG0EW01.FG0EWGND[FG0EWIND] = FG0EW00.FG0EWTOT + FFXREC.FFXNUMB;
      FG0EW01.FG0EWSCH[FG0EWIND] = "Y"; /* Total of mo. grp tot changed*/

    end

    FG0EW00.FF6SLFCT = FG0EW01.FG0EWFCS[FG0EWIXW]; /* Save old fcst*/
    FG0EW00.FG0EWFCS = FFXREC.FFXNUMB; /* Save new fcst*/

    FG0EW01.FG0EWFCS[FG0EWIXW] = FFXREC.FFXNUMB;
    FG0EW01.FG0EWFCT[FG0EWIXW] = FFXREC.FFXCHAR;

    FFXREC.FFXNUMB = FG0EW01.FG0EWFCS[FG0EWIXT];
    XSFFS10(); /* Convert from NUM to CHAR*/
    FG0EW01.FG0EWFCT[FG0EWIXT] = FFXREC.FFXCHAR;

    if (FG0EW00.FG0EWIND > 14) /* Total line is in next page*/

      FG0ES02(); /* Update the first total line in next page*/

    end

  end

end // end FG0E521

// Verify season end month
Function FG0E530()
   /* ------------------------------------------------------------*/
   /* If season end month changed, re-position the cursor*/
   /* ------------------------------------------------------------*/

  if (FG0EM001.FG0EMSEM[1] != FG0EW00.FG0EWSEM[1] /* seas end month changed*/
   || FG0EM001.FG0EMSEM[2] != FG0EW00.FG0EWSEM[2] 
   || FG0EM001.FG0EMSEM[3] != FG0EW00.FG0EWSEM[3] 
   || FG0EM001.FG0EMSEM[4] != FG0EW00.FG0EWSEM[4])

    FG0EW00.FG0EWLEF = 1; /* Left index*/
    FG0EW00.FG0EWSNX = 1; /* season index*/
    FG0EW00.FG0EWPGX = 1; /* page index*/
    FG0EW00.XXXTSPAG = 1; /* page no*/
    move 0 to FG0EW00.FG0EW-PAGS[1] for all; /* season on each page*/
    FG0EW00.FG0EW-PAGS[1] = 1; /* season on the 1st page*/
    move "N" to FG0EW00.FG0EW-MON-LEFT[1] for all; /* 2nd page of seas flag*/
    FG0EW00.FG0EW-NEXT = "N"; /* next season flag*/
    move 0 to FG0EW00.FG0EWTSB[1] for all; /* subtotal*/

    FG0EW00.FG0EWSWF = "Y"; /* Format data switch*/
    if (converseVar.validationMsgNum == 0)
      move 0 to FG0EW00.FG0EWSEM[1] for all; /* season end month - mm*/
      move 0 to FG0EW00.FG0EWSMO[1] for all; /* season end month - ccyymm*/
      move 0 to FG0EW00.FG0EWSIN[1] for all; /* no. of months in season*/
    end

  end

   /* ------------------------------------------------------------*/
   /* validate season end months*/
   /* ------------------------------------------------------------*/

  FFZREC.FFZBYYMM = FG0EM001.FG0EMBMO; /* Beginning month*/
  FFZREC.FFZEYYMM = FG0EM001.FG0EMEMO; /* Ending month*/

  XSFFS30();

  FG0EW00.FG0EWWBD = FFZREC.FFZBEGMO; /* beg month - ccyymm*/
  FG0EW00.FG0EWWED = FFZREC.FFZENDMO; /* end month - ccyymm*/

   /* figure out number of seasons*/

  FG0EW00.FG0EWNSS = 0; /* reset number of seasons*/
  FG0EW00.FG0EWIXW = 4; /* index*/
  while (FG0EW00.FG0EWIXW > 0)
    if (FG0EM001.FG0EMSEM[FG0EWIXW] > 0)
      FG0EW00.FG0EWNSS = FG0EW00.FG0EWIXW; /* number of seasons*/
      FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW - 4; /* force out of loop*/

    else

      FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW - 1;
    end

  end

   /* check for no seasons entered*/

  if (FG0EW00.FG0EWNSS == 0 /* no season lengths found*/
   && FG0EM001.XPCCD != " ") /* category entered*/
    FG0ES40(); /* obtain default season end months*/
  end

   /* If no season end month entered then check the length of the range,*/
   /* if <= 6 months use default (end month of the range)*/

  if (FG0EW00.FG0EWNSS == 0) /* no season lengths found*/
    if (FG0EW00.FG0EWBYY == FG0EW00.FG0EWEYY) /* same year*/
      FG0EW00.FG0EWMOS = FG0EW00.FG0EWEMM - FG0EW00.FG0EWBMM + 1;
    else
      FG0EW00.FG0EWMOS = FG0EW00.FG0EWEMM + 12 - FG0EW00.FG0EWBMM + 1;
    end

    if (FG0EW00.FG0EWMOS <= 6)
      FG0EW00.FG0EWNSS = 1;
      FG0EM001.FG0EMSEM[1] = FG0EW00.FG0EWEMM; /* range end month*/
    end
  end

  if (FG0EW00.FG0EWNSS == 0)
    FFWREC.XXXMODID = "530"; /* Module identification*/
    set FG0EM001.FG0EMSEM[1] cursor, bold; /* Highlight*/
    converseLib.validationFailed(442); /* required field*/
    return;
  end

   /* check for embedded zeros*/

  FG0EW00.FG0EWIXW = FG0EW00.FG0EWNSS; /* index*/
  while (FG0EW00.FG0EWIXW > 0)
    if (FG0EM001.FG0EMSEM[FG0EWIXW] == 0) /* check for embedded zeros*/
      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FG0EM001.FG0EMSEM[FG0EWIXW] cursor, bold; /* Highlight*/
      converseLib.validationFailed(440); /* required field*/
    end
    FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW - 1;
  end

  if (converseVar.validationMsgNum > 0)
    return;
  end

   /* check for invalid season end months*/

  FG0EW00.FG0EWIXW = FG0EW00.FG0EWNSS; /* index*/
  while (FG0EW00.FG0EWIXW > 0)

    if (FG0EM001.FG0EMSEM[FG0EWIXW] < 1 /* check for month error*/
     || FG0EM001.FG0EMSEM[FG0EWIXW] > 12)
      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FG0EM001.FG0EMSEM[FG0EWIXW] cursor, bold; /* Highlight*/
      converseLib.validationFailed(010); /* required field*/
      return;
    end

    if (FG0EM001.FG0EMSEM[FG0EWIXW] != FG0EW00.FG0EWEMM
     && FG0EW00.FG0EWIXW == FG0EW00.FG0EWNSS) /* last end month*/
      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FG0EM001.FG0EMSEM[FG0EWIXW] cursor, bold; /* Highlight*/
      converseLib.validationFailed(447); /* required field*/
      return;

    else

      FG0ES60(); /* check for invalid entry*/

    end

    FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW - 1;

  end

  FG0EW00.FG0EWIXW = FG0EW00.FG0EWNSS;
  while (FG0EW00.FG0EWIXW > 0) /* nbr of seasons*/
    FG0EW00.FG0EWIXN = FG0EW00.FG0EWIXW - 1;
    if (FG0EW00.FG0EWIXN != 0)
      if (FG0EW00.FG0EWSMO[FG0EWIXN] >= FG0EW00.FG0EWSMO[FG0EWIXW])
        FFWREC.XXXMODID = "530"; /* Module identification*/
        set FG0EM001.FG0EMSEM[FG0EWIXN] cursor, bold; /* Highlight*/
        converseLib.validationFailed(444); /* sesn end mo > next sesn end mo*/
      end
    end
    FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW - 1;
  end

  FG0EW00.FG0EWIXW = FG0EW00.FG0EWNSS;
  FG0EW00.FG0EWMOS = 0; /* clear total months work area*/
  while (FG0EW00.FG0EWIXW > 0) /* nbr of seasons*/
    FG0EW00.FG0EWSEM[FG0EWIXW] = FG0EM001.FG0EMSEM[FG0EWIXW];
    FG0ES50(); /* calculate no of mos in each sesn*/
    FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW - 1;
  end

   /* ---------------------------------------------------------*/
      /* Calculate the right cursor*/
   /* ---------------------------------------------------------*/
  if (FG0EW00.FG0EWSWO == "Y") /* Data obtained already*/
    if (FG0EW00.FG0EW-MON-LEFT[FG0EWPGX] == "Y") /* 2nd page of the season*/
      FG0EW00.FG0EWREM = FG0EW00.FG0EWSIN[FG0EWSNX] - 6;
      FG0EW00.FG0EWRIG = FG0EW00.FG0EWLEF + FG0EW00.FG0EWREM - 1;
    else /* 1st page of the season*/
      if (FG0EW00.FG0EWSIN[FG0EWSNX] <= 6)
        FG0EW00.FG0EWRIG = FG0EW00.FG0EWLEF + FG0EW00.FG0EWSIN[FG0EWSNX]         - 1;
      else
        FG0EW00.FG0EWRIG = FG0EW00.FG0EWLEF + 6 - 1;
      end
    end
  else /* data hasn't been obtained yet*/
    FG0EW00.FG0EWRIG = 1;
  end

end // end FG0E530

// Verify entered keys
Function FG0E550()

   /* -------------------------------------------------------*/
     /* Verify all styles flag*/
   /* -------------------------------------------------------*/

  if (FG0EM001.FG0EMALL == " "
   || FG0EM001.FG0EMALL == "Y"
   || FG0EM001.FG0EMALL == "N")
    /* NEXT SENTENCE*/
  else
    FFWREC.XXXMODID = "550"; /* Module identification*/
    converseLib.validationFailed(153); /* Indicate must be a 'y' or 'n'*/
    set FG0EM001.FG0EMALL cursor, bold; /* Highlight*/

  end

   /* -------------------------------------------------------*/
     /* Verify country code*/
   /* -------------------------------------------------------*/

  if (FG0EM001.XCTCD == "USA ")

    FFWREC.XXXMODID = "550"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate invalid value entered*/
    set FG0EM001.XCTCD cursor, bold; /* Highlight*/

  else

    if (FG0EM001.XCTCD != FFWREC.XCTCD) /* Country code changed*/
      if (FG0EM001.XCTCD != " ") /* Country code not blank*/
        FG0E551(); /* Verify country code*/
      else
        FG0EM001.XCTABRV = "SUM";
      end
    end

  end

   /* -------------------------------------------------------*/
     /* Verify category code*/
   /* -------------------------------------------------------*/

  if (FG0EM001.XPCCD == " ") /* No category code entered*/
    FFWREC.XXXMODID = "550"; /* Module identification*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/
    set FG0EM001.XPCCD cursor, bold; /* Highlight*/
  else

    FG0E552(); /* Verify category code in xpctbl*/

  end

   /* -------------------------------------------------------*/
   /* * Verify type group*/
   /* -------------------------------------------------------*/

  if (FG0EM001.YPGCD == "  "
   || FG0EM001.YPGCD == "* ")
    FFWREC.XXXMODID = "550"; /* Module identification*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/
    set FG0EM001.YPGCD cursor, bold; /* Highlight*/
  else
    FG0E553(); /* Verify type group code in ypgtbl*/
  end

   /* -------------------------------------------------------*/
     /* Verify range*/
   /* -------------------------------------------------------*/

  if (FG0EM001.FG0EMBMO != FG0EW01.FG0EWBMY /* Beginning month changed*/
   || FG0EM001.FG0EMEMO != FG0EW01.FG0EWEMY /* Ending month changed*/
   || FG0EM001.FG0EMBMO == 0                /* No beginning month entered*/
   || FG0EM001.FG0EMEMO == 0)               /* No ending month entered*/

    FG0E556(); /* Verify range*/

  end

  if (converseVar.validationMsgNum != 0) /* error found*/
    return;
  end

  if (FG0EM001.SYBSTGNB == " ") /* No style group specified*/

    /* -----------------------------------------------------------*/
       /* Verify the relationship between type group and category*/
    /* -----------------------------------------------------------*/

    if (FG0EM001.XPCCD != " " /* Category exist*/
     && FG0EM001.YPGCD != " ") /* Type group exist*/

      FG0E554(); /* Verify type group and category in VFFXRF01*/

    end

  else

    /* -----------------------------------------------------------*/
       /* Verify the relationship among type group, category and*/
       /* style group.*/
    /* -----------------------------------------------------------*/

    if (FG0EM001.XPCCD != " " /* Category exist*/
     && FG0EM001.YPGCD != " " /* Type group exist*/
     && FG0EM001.SYBSTGNB != " ") /* Style group exist*/

      FG0E555(); /* Verify type grp, cat and sty grp in VFFSTY01*/

    end

  end

   /* -------------------------------------------------------*/
     /* Verify style group code*/
   /* -------------------------------------------------------*/

  if (FG0EM001.SYBSTGNB == " ") /* Style group not entered*/

    FG0EM001.SYBSTGNM = " "; /* Style group name*/

  end

  if (FG0EM001.SYBSTGNB != " ") /* Style group entered*/

    set FF3REC empty; /* Clear the storage row*/

    FF3REC.SYBSTGNB = FG0EM001.SYBSTGNB; /* Style group*/
    FF3REC.YSMXDV = "*";

    FF3REC.XLCCD = "*"; /* Life cycle code*/
    FF3REC.YPGCD = FG0EM001.YPGCD; /* Type group code*/
    TA1REC.TA1PGMNM = "FG0E550"; /* Name of the calling process*/

    XSFFS22(); /* Verify style group code*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Record found*/

      FG0EM001.SYBSTGNM = FF3REC.SYBSTGNM; /* Style group name*/

    else

      FG0EM001.SYBSTGNM = "******"; /* Style group name*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Record not found*/

      FFWREC.XXXMODID = "550"; /* Module identification*/
      converseLib.validationFailed(10); /* Indicate invalid value entered*/
      set FG0EM001.SYBSTGNB cursor, bold; /* Highlight*/
      set FG0EM001.YPGCD normal;
      set FG0EM001.XPCCD normal;

    end

  end

  if (converseVar.validationMsgNum != 0) /* error found*/
    return;
  end

   /* -------------------------------------------------------*/
   /* Verify season end months*/
   /* -------------------------------------------------------*/

  FG0E530(); /* Verify season end month*/

end // end FG0E550

// Verify country code
Function FG0E551()
   /* ------------------------------------------------------------*/
   /* Verify the foreign country code that was entered.*/
   /* ------------------------------------------------------------*/

  if (FG0EM001.XCTCD in XCTTBL.XCTCD /* Code in table*/
   && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    FG0EM001.XCTABRV = XCTTBL.XCTABRV[sysVar.arrayIndex]; /* Abbreviation*/

  else

    /* ------------------------------------------------------------*/
    /* If not found, check the 1st two charaters against the region*/
    /* table, if not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    FG0EW00.XCTCD = FG0EM001.XCTCD; /* move ctry cd to ws*/
    if (FG0EW00.ZRGCD in ZRGTBL.ZRGCD            /* code in zrgtbl*/
     && ZRGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active*/
     && FG0EW00.ZRGCD != "US"                    /* and not 'us' region*/
     && FG0EW00.FG0EWBLK == "  ")                /* and last 2 char be spaces*/
      FG0EM001.XCTABRV = ZRGTBL.ZRGABRV[sysVar.arrayIndex]; /* Abbreviation*/
    else
      FG0EM001.XCTABRV = " "; /* Abbreviation*/

      FFWREC.XXXMODID = "551"; /* Module identification*/
      set FG0EM001.XCTCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(118); /* Indicate missing or invalid*/
    end

  end

end // end FG0E551

// Verify cat in XPCTBL
Function FG0E552()

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  XPCREC.XPCCD = FG0EM001.XPCCD;

  if (FG0EM001.XPCCD == "  ")
    FG0EM001.XPCABRV = "      ";
  else
    FG0EM001.XPCABRV = "******";
  end

  if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* Code in table*/
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    FG0EM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    FFWREC.XXXMODID = "552"; /* Module identification*/

    set FG0EM001.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/

  end


end // end FG0E552

// Verify typ grp code in YPGTBL
Function FG0E553()

   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/

  if (FG0EM001.YPGCD == "  ") /* No type group*/
    FG0EM001.YPGABRV = "      ";
  else
    FG0EM001.YPGABRV = "******";
  end

  if (FG0EM001.YPGCD in YPGTBL.YPGCD           /* Code in table*/
   && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and active status*/
   && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y") /* and active for FF system*/

    FG0EM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    FFWREC.XXXMODID = "553"; /* Module identification*/

    set FG0EM001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/

  end

end // end FG0E553

// Verify typgrp and cat-VFFXRF01
Function FG0E554()
  FG0ES11(); /* Open & select VFFXRF01*/

  FG0ES12(); /* Fetch first row in VFFXRF01*/

  FG0ES13(); /* Close the cursor for VFFXRF01*/

end // end FG0E554

// Verify typ,cat & stgrp VFFSTY0
Function FG0E555()
  set FF3REC empty; /* Clear the storage row*/

  FF3REC.SYBSTGNB = FG0EM001.SYBSTGNB; /* Style group*/
  FF3REC.YSMXDV = "*"; /* Division group code*/

  FF3REC.YPGCD = FG0EM001.YPGCD; /* Type group code*/
  FF3REC.XLCCD = "*"; /* Life cycle code*/
  TA1REC.TA1PGMNM = "FG0E555"; /* Name of the calling process*/

  XSFFS22();

  if (FF3REC.YPGCD == FG0EM001.YPGCD /* Valid type group code*/
   && FF3REC.XPCCD == FG0EM001.XPCCD) /* and valid category code*/

     /* next sentence*/

  else

    FFWREC.XXXMODID = "555"; /* Module identification*/
    converseLib.validationFailed(203); /* Indicate inconsistent relationship*/
    set FG0EM001.YPGCD cursor, bold; /* Highlight*/
    set FG0EM001.XPCCD bold; /* Highlight*/
    set FG0EM001.SYBSTGNB bold; /* Highlight*/

  end

end // end FG0E555

// Verify range
Function FG0E556()
   /* ------------------------------------------------------------*/
   /* The beginning month must be greater than the current month*/
   /* and less than or equal to the current plus 30 month*/
   /* The ending month must be greater than or equal to the*/
   /* beginning month, not greater than the beginning plus 11*/
   /* month and not greater than the current plus 30 months.*/
   /* ------------------------------------------------------------*/

  FG0E557(); /* get buy month*/
  set FFZREC empty; /* Clear storage row*/

  FG0EW00.FG0EW-RNG-ERR = "N"; /* set range error flag*/
  FFZREC.FFZBYYMM = FG0EM001.FG0EMBMO; /* Beginning month*/
  FFZREC.FFZEYYMM = FG0EM001.FG0EMEMO; /* Ending month*/
  FFZREC.FFZMONTH = 1; /* Number of month*/

  XSFFS30(); /* Verify the range*/

  if (FFZREC.FFZENDRC != "0") /* Check error code*/

    FG0EW00.FG0EW-RNG-ERR = "Y"; /* set range error flag*/
    FFWREC.XXXMODID = "556"; /* Module identification*/

    set FG0EM001.FG0EMEMO cursor, bold; /* Hightlight*/

    if (FFZREC.FFZENDRC == "1") /* No ending month entered*/

      converseLib.validationFailed(8); /* Indicate invalid date entered*/

    end

    if (FFZREC.FFZENDRC == "2") /* Invalid ending month entered*/

      converseLib.validationFailed(17); /* Indicate invalid date entered*/

    end

    if (FFZREC.FFZENDRC == "3") /* Ending month out of range*/

      converseLib.validationFailed(151); /* Indicate invalid date entered*/

    end

  end

  if (FFZREC.FFZBEGRC != "0") /* Check error code*/

    FG0EW00.FG0EW-RNG-ERR = "Y"; /* set range error flag*/
    FFWREC.XXXMODID = "556"; /* Module identification*/
    set FG0EM001.FG0EMBMO cursor, bold; /* hightlight*/

    if (FFZREC.FFZBEGRC == "1") /* No beginning month entered*/

      converseLib.validationFailed(8); /* Indicate required field*/

    end

    if (FFZREC.FFZBEGRC == "2") /* Invalid beginning month entered*/

      converseLib.validationFailed(17); /* Indicate invalid date entered*/

    end

    if (FFZREC.FFZBEGRC == "3") /* Beginning month out of range*/

      converseLib.validationFailed(151); /* Indicate invalid date entered*/

    end

  end

  if (converseVar.validationMsgNum == 0)

    FFWREC.FFABEGMO = FFZREC.FFZBEGMO; /* Save converted dates*/
    FFWREC.FFAENDMO = FFZREC.FFZENDMO;

  else

    if (FG0EW00.FG0EW-RNG-ERR == "Y") /* Date range error*/
      move 0 to FG0EW00.FG0EWSIN[1] for all; /* No of mos in season*/
      move 0 to FG0EW00.FG0EWSEM[1] for all; /* Season end month*/
      move 0 to FG0EW00.FG0EWSMO[1] for all; /* Season end month*/
      move " " to FG0EM001.FG0EMSEM[1] for all;
    end

  end
end // end FG0E556

// Calculate the buy month
Function FG0E557()
   /* ------------------------------------------------------------*/
     /* Buy month calculation , stored in fg0eW00.fg0eWCD5*/
   /* ------------------------------------------------------------*/

  FG0E558(); /* get futures cutoff date*/
  FG0EW00.FG0EWDTE = FF1REC.FF1FUTDT;

  FG0EW00.FG0EWDMM = FG0EW00.FG0EWDMM + 5;
  if (FG0EW00.FG0EWDMM > 12)
    FG0EW00.FG0EWDMM = FG0EW00.FG0EWDMM - 12;
    if (FG0EW00.FG0EWDYY == 99)
      FG0EW00.FG0EWDYY = 00;
      FG0EW00.FG0EWDCC = FG0EW00.FG0EWDCC + 1;
    else
      FG0EW00.FG0EWDYY = FG0EW00.FG0EWDYY + 1;
    end
  end

  FG0EW00.FG0EWDYY = FG0EW00.FG0EWDYY + 1; /* one year beyond buy mon*/
  if (FG0EW00.FG0EWDYY == 00)
    FG0EW00.FG0EWDCC = FG0EW00.FG0EWDCC + 1; /* increment century*/
  end
end // end FG0E557

// Get futures cutoff date
Function FG0E558()

  set FF1REC empty; /* Clear up the storage row*/

  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "558"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "GET FUTURES CUTOFF D";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0E558

// Process valid input request
Function FG0E600()
  if (FG0EW00.FG0EWSWO == "Y") /* Data was obtained*/

   /* ------------------------------------------------------------*/
    /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

    FG0EW00.FG0EWSWF = "Y"; /* Format the map switch*/

  end

   /* ------------------------------------------------------------*/
   /* if PF15 was pressed, save the forecasts into master tables.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* PF15 was pressed*/

    FG0E640(); /* Process PF15 for NIL*/

  end

   /* ------------------------------------------------------------*/
   /* if the key field changed, save the search information.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.FFWENDM1 != FG0EW00.FG0EWSMO[1] /* Season end month changed*/
   || FFWREC.FFWENDM2 != FG0EW00.FG0EWSMO[2] 
   || FFWREC.FFWENDM3 != FG0EW00.FG0EWSMO[3] 
   || FFWREC.FFWENDM4 != FG0EW00.FG0EWSMO[4])

    FFWREC.FFWENDM1 = FG0EW00.FG0EWSMO[1];
    FFWREC.FFWENDM2 = FG0EW00.FG0EWSMO[2];
    FFWREC.FFWENDM3 = FG0EW00.FG0EWSMO[3];
    FFWREC.FFWENDM4 = FG0EW00.FG0EWSMO[4];

    FG0EW00.FG0EWRIG = FG0EW00.FG0EWLEF + FG0EW00.FG0EWSEM[1] - 1;

  end

  if (FG0EM001.FG0EMBMO != FG0EW01.FG0EWBMY /* Beginning month changed*/
   || FG0EM001.FG0EMEMO != FG0EW01.FG0EWEMY /* Ending month changed*/
   || FG0EM001.YPGCD != FFWREC.YPGCD        /* Type group changed*/
   || FG0EM001.XPCCD != FFWREC.XPCCD        /* Category changed*/
   || FG0EM001.SYBSTGNB != FFWREC.SYBSTGNB  /* Style group changed*/
   || FG0EM001.FG0EMALL != FG0EW00.FG0EWALL /* All styles flag changed*/
   || FG0EM001.XCTCD != FFWREC.XCTCD)       /* Country changed*/

    FG0EW00.FG0EWSWO = "N"; /* reset data obtained switch*/
    FG0EW00.FG0EWLEF = 1; /* Left index*/
    FG0EW00.FG0EWSNX = 1; /* season index*/
    FG0EW00.FG0EWPGX = 1; /* page index*/
    FG0EW00.XXXTSPAG = 1; /* page no*/
    move 0 to FG0EW00.FG0EW-PAGS[1] for all; /* season on each page*/
    FG0EW00.FG0EW-PAGS[1] = 1; /* season on the 1st page*/
    move "N" to FG0EW00.FG0EW-MON-LEFT[1] for all; /* 2nd page of seas flag*/
    FG0EW00.FG0EW-NEXT = "N"; /* next season flag*/
    move 0 to FG0EW00.FG0EWTSB[1] for all; /* subtotal*/

    if (FG0EW00.FG0EWMST == "Y" /* master has been updated*/
     || FG0EW00.FG0EWMST == " ")

      FG0EW01.FG0EWBMO = FFWREC.FFABEGMO; /* Beginning month*/
      FG0EW01.FG0EWEMO = FFWREC.FFAENDMO; /* Ending month*/
      FG0EW00.FG0EWALL = FG0EM001.FG0EMALL; /* all styles flag*/
      FFWREC.YPGCD = FG0EM001.YPGCD; /* Type group code*/
      FFWREC.YPGABRV = FG0EM001.YPGABRV; /* Type group abbreviation*/
      FFWREC.XPCCD = FG0EM001.XPCCD; /* Category code*/
      FFWREC.XPCABRV = FG0EM001.XPCABRV; /* Category abbreviation*/
      FFWREC.SYBSTGNB = FG0EM001.SYBSTGNB; /* Style group code*/
      FFWREC.SYBSTGNM = FG0EM001.SYBSTGNM; /* Style group short name*/
      FFWREC.XCTCD = FG0EM001.XCTCD; /* Country code*/
      FFWREC.XCTABRV = FG0EM001.XCTABRV; /* Country abbreviation*/
      FG0EW00.FG0EWSWU = "N"; /* Reset TSQ update switch*/
      FG0EW00.FG0EWLEF = 1; /* Reset left index*/
      FG0EW00.FG0EWSWR = "Y"; /* Request for data switch*/
      return; /* Return to previous process*/

    else
      if (FG0EW00.FG0EWUPD == "Y") /* Warning msg already shown once*/
        FG0EW00.FG0EWUPD = "N"; /* Clear the error switch*/
        FG0EW00.FG0EWMST = " "; /* Clear master update switch*/
        FG0EW01.FG0EWBMO = FFWREC.FFABEGMO; /* Beginning month*/
        FG0EW01.FG0EWEMO = FFWREC.FFAENDMO; /* Ending month*/
        FG0EW00.FG0EWALL = FG0EM001.FG0EMALL; /* all styles flag*/
        FFWREC.YPGCD = FG0EM001.YPGCD; /* Type group code*/
        FFWREC.YPGABRV = FG0EM001.YPGABRV; /* Type group abbreviation*/
        FFWREC.XPCCD = FG0EM001.XPCCD; /* Category code*/
        FFWREC.XPCABRV = FG0EM001.XPCABRV; /* Category abbreviation*/
        FFWREC.SYBSTGNB = FG0EM001.SYBSTGNB; /* Style group code*/
        FFWREC.SYBSTGNM = FG0EM001.SYBSTGNM;
                                   /* Style group short name*/
        FFWREC.XCTCD = FG0EM001.XCTCD; /* Country code*/
        FFWREC.XCTABRV = FG0EM001.XCTABRV; /* Country abbreviation*/
        FG0EW00.FG0EWSWU = "N"; /* Reset TSQ update switch*/
        FG0EW00.FG0EWLEF = 1; /* Reset left index*/
        FG0EW00.FG0EWSWR = "Y"; /* Request for data switch*/
        return; /* Return to previous process*/

      else
        FFWREC.XXXMODID = "600"; /* Module identification*/
        converseLib.validationFailed(369); /* Indicate update master fcst*/
        FG0EW00.FG0EWUPD = "Y"; /* Set the error switch*/
        return; /* Return to previous process*/
      end
    end
  end


  if (converseVar.eventKey is pf7  /* Scroll back requested*/
   || converseVar.eventKey is pf8  /* Scroll foreward requested*/
   || converseVar.eventKey is pf10 /* Scroll left requested*/
   || converseVar.eventKey is pf11) /* Scroll right requested*/
    FG0EW00.FG0EWSWF = "Y"; /* Format data switch*/
  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    FG0EW00.XXXTSPAG = FG0EW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    FG0EW00.XXXTSPAG = FG0EW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll left was requested, increment the scrolling*/
   /* index and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll left requested*/

    /* ---------------------------*/
    /* Right cursor*/
    /* ---------------------------*/

    if (FG0EW00.FG0EW-MON-LEFT[FG0EWPGX] == "Y") /* 2nd page of the seas*/

      FG0EW00.FG0EWREM = FG0EW00.FG0EWSIN[FG0EWSNX] - 6;
      FG0EW00.FG0EWRIG = FG0EW00.FG0EWRIG - FG0EW00.FG0EWREM;

    else /* 1st page of the season*/

      if (FG0EW00.FG0EWSIN[FG0EWSNX] <= 6)

        FG0EW00.FG0EWRIG = FG0EW00.FG0EWRIG - FG0EW00.FG0EWSIN[FG0EWSNX];

      else

        FG0EW00.FG0EWRIG = FG0EW00.FG0EWRIG - 6;

      end
    end

    FG0EW00.FG0EWPGX = FG0EW00.FG0EWPGX - 1;
    FG0EW00.FG0EWSNX = FG0EW00.FG0EW-PAGS[FG0EWPGX];
                                    /* Season on previous page*/

    /* ---------------------------*/
    /* Left cursor*/
    /* ---------------------------*/

    if (FG0EW00.FG0EW-MON-LEFT[FG0EWPGX] == "Y") /* 2nd page of the seas*/

      FG0EW00.FG0EWREM = FG0EW00.FG0EWSIN[FG0EWSNX] - 6;
      FG0EW00.FG0EWLEF = FG0EW00.FG0EWLEF - FG0EW00.FG0EWREM;

    else /* 1st page of the season*/

      if (FG0EW00.FG0EWSIN[FG0EWSNX] <= 6)

        FG0EW00.FG0EWLEF = FG0EW00.FG0EWLEF - FG0EW00.FG0EWSIN[FG0EWSNX];

      else

        FG0EW00.FG0EWLEF = FG0EW00.FG0EWLEF - 6;

      end
    end

    FG0EW00.FG0EW-NEXT = "N"; /* Reset next season flag*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll right was requested, increment the scrolling*/
   /* index and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Scroll right requested*/

    if (FG0EW00.FG0EW-MON-LEFT[FG0EWPGX] == "Y") /* 2nd page of the seas*/

      FG0EW00.FG0EWREM = FG0EW00.FG0EWSIN[FG0EWSNX] - 6;
      FG0EW00.FG0EWLEF = FG0EW00.FG0EWLEF + FG0EW00.FG0EWREM;

    else /* 1st page of the season*/

      if (FG0EW00.FG0EWSIN[FG0EWSNX] <= 6)

        FG0EW00.FG0EWLEF = FG0EW00.FG0EWLEF + FG0EW00.FG0EWSIN[FG0EWSNX];

      else

        FG0EW00.FG0EWLEF = FG0EW00.FG0EWLEF + 6;

      end
    end

    FG0EW00.FG0EWPGX = FG0EW00.FG0EWPGX + 1;

    if (FG0EW00.FG0EW-NEXT == "Y") /* next season*/
      FG0EW00.FG0EWSNX = FG0EW00.FG0EWSNX + 1;
      FG0EW00.FG0EW-NEXT = "N"; /* reset next season flag*/
    end

   /* Season on next page*/
    FG0EW00.FG0EW-PAGS[FG0EWPGX] = FG0EW00.FG0EWSNX;
    return; /* Return to previous process*/

  end

end // end FG0E600

// Process PF15 key
Function FG0E640()

   /* ------------------------------------------------------------*/
   /* Update the DFCAST.VMSTY001 table.*/
   /* ------------------------------------------------------------*/

  if (FG0EW00.FG0EWSWU == "Y") /* Data changed*/

    FG0ES03(); /* Update TSQ page*/

    FG0EW00.FG0EWSWU = "N"; /* Reset the update switch*/

  end

  FG0EW00.FG0EWPAG = 1; /* Initialize the page number*/

  while (FG0EW00.FG0EWPAG <= FG0EW00.TA5TSQIX) /* Until reach the last page*/

    TA5REC.TA5TSQIX = FG0EW00.FG0EWPAG; /* Set the page number*/

    FG0ES04(); /* Read TSQ page*/

    FG0E646(); /* Update DFCAST.VMSTY001,VMSGRP01*/

    if ("Y" in FG0EW01.FG0EWFCH) /* Check if any data changed*/

      move "N" to FG0EW01.FG0EWFCH[1] for all;

      FG0ES03(); /* Update TSQ page*/

      FG0EW00.FG0EWSWU = "N"; /* Reset the update switch*/

    end


    FG0EW00.FG0EWPAG = FG0EW00.FG0EWPAG + 1;

  end

  FFWREC.FFWMODSW = "N";
                                   /* Indicate the data no need to be saved*/


   /* ------------------------------------------------------------*/
    /* Update VMCAT001 with the montly variances.*/
   /* ------------------------------------------------------------*/
  FG0E648();

   /* ------------------------------------------------------------*/
    /* Restore the page before calling subroutine.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = FG0EW00.XXXTSPAG; /* Set the page number*/

  FG0ES04(); /* Read TSQ page*/

  if (converseVar.validationMsgNum == 0)
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all changes*/
    FFWREC.XXXMODID = "640"; /* Module identification*/
    FFWREC.XXXMSGNO = 26; /* Indicate wrksht fcst saved as master*/
    FG0EW00.FG0EWMST = "Y"; /* Turned on mstr fcst saved switch*/

  end


end // end FG0E640

// Update Tables
Function FG0E646()

  FG0EW00.FG0EWIXM = 1; /* Initialize the map index*/

  while (FG0EW00.FG0EWIXM <= 14)
    if (FG0EW01.FG0EWDES[FG0EWIXM] == " "
     && FG0EW01.FG0EWSTY[FG0EWIXM] == " ")
      /* NEXT SENTENCE*/
    else
      FG0E647(); /* process row*/
    end

    FG0EW00.FG0EWIXM = FG0EW00.FG0EWIXM + 1; /* Increment the map index*/

  end

end // end FG0E646

// Process update row
Function FG0E647()
  if (FG0EW01.FG0EWGFL[FG0EWIXM] == "Y") /* Save style group*/
    FG0EW00.SYBSTGNB = FG0EW01.FG0EWSTY[FG0EWIXM];
  else
    if (FG0EW01.FG0EWDES[FG0EWIXM] != "   TOTAL")
      FG0E650(); /* process style color change*/
    else
      FG0E651(); /* process style group change*/
    end
  end

end // end FG0E647

// Update DFCAST.VMCAT001
Function FG0E648()

  FG0EW00.FG0EWIXN = 1; /* Initialize heading index*/
  while (FG0EW00.FG0EWIXN <= 12) /* Until end of range*/

    if (FG0EW00.FG0EWCV[FG0EWIXN] != 0) /* VMCAT001 variance exists*/
      FG0ES27(); /* Read DFCAST.VMCAT001*/
      if (SQLCA.VAGen_SQLCODE == 100)
        FG0ES28(); /* Insert DFCAST.VMCAT001*/
      else
        FG0ES29(); /* update DFCAST.VMCAT001*/
      end
      FG0EW00.FG0EWCV[FG0EWIXN] = 0;
    end
    FG0EW00.FG0EWIXN = FG0EW00.FG0EWIXN + 1;
  end

end // end FG0E648

// Process update style color
Function FG0E650()
  FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXM - 1;
  FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW * 12 + 1; /* beginning index val*/
  FG0EW00.FG0EWIXT = FG0EW00.FG0EWIXM - 1;
  FG0EW00.FG0EWIXT = FG0EW00.FG0EWIXT * 12 + FG0EW00.FG0EWEND; /* end index*/
  FG0EW00.FG0EWCLM = 1; /* Initialize heading index*/
  while (FG0EW00.FG0EWIXW <= FG0EW00.FG0EWIXT) /* Until end of range*/
    if (FG0EW01.FG0EWFCH[FG0EWIXW] == "Y") /* Forecast changed*/
      FG0ES20(); /* Read DFCAST.VMSTY001*/
      if (SQLCA.VAGen_SQLCODE == 100)
        FG0ES23(); /* Insert DFCAST.VMSTY001*/
      else
        if (FF9REC.ZZZCHGCT != FG0EW01.FG0EWCNT[FG0EWIXW] /* Recd changed*/
         && FFWREC.XCTCD != " ")                          /* and not a sum of all ctrys*/
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* Roll back all changes*/
          FG0EW00.FG0EWSWR = "Y"; /* Request for data switch*/
          FG0EW00.FG0EWSWU = "N"; /* Reset update switch*/
          FFWREC.XXXMODID = "650"; /* Module identification*/
          FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/
          exit stack; /* Exit to display map*/

        else
          FG0ES22(); /* Update DFCAST.VMSTY001*/
        end
      end
    end
    FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW + 1;
    FG0EW00.FG0EWCLM = FG0EW00.FG0EWCLM + 1;
  end
end // end FG0E650

// Process update style group
Function FG0E651()
  FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXM - 1;
  FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW * 12 + 1; /* beginning index val*/
  FG0EW00.FG0EWIXT = FG0EW00.FG0EWIXM - 1;
  FG0EW00.FG0EWIXT = FG0EW00.FG0EWIXT * 12 + FG0EW00.FG0EWEND; /* end index*/
  FG0EW00.FG0EWCLM = 1; /* Initialize heading index*/
  while (FG0EW00.FG0EWIXW <= FG0EW00.FG0EWIXT) /* Until end of range*/
    if (FG0EW01.FG0EWFCH[FG0EWIXW] == "Y") /* style group changed*/
      FG0ES24(); /* read VMSGRP01*/
      if (SQLCA.VAGen_SQLCODE == 100)
        FG0ES25(); /* add VMSGRP01*/
      else
        FG0ES26(); /* update VMSGRP01*/
      end
    end
    FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW + 1;
    FG0EW00.FG0EWCLM = FG0EW00.FG0EWCLM + 1;
  end
end // end FG0E651

// Accumulate the sty group total
Function FG0ES01()

   /* --------------------------------------------------------*/
   /* Accumulate the style color forecasts for the last style*/
   /* group on the current page, and bring the total to the*/
   /* next page. So, the total line on the next page will*/
   /* include all the style color fcst for the last style*/
   /* group.*/
   /* --------------------------------------------------------*/

  FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXM - 1; /* Initialize map index*/
  move 0 to FG0EW00.FG0EWMTL[1] for all; /* Initialize the month total work area*/
  move "N" to FG0EW00.FG0EWMTF[1] for all; /* Initialize the month tot change flag*/

  while (FG0EW00.FG0EWIXW >= 1 /* Until top of the page*/
   && FG0EW01.FG0EWGFL[FG0EWIXW] == "N") /* or reach style grp*/

    FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXW - 1;
    FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXF * 12 + 1;
    FG0EW00.FG0EWIXE = FG0EW00.FG0EWIXF + FG0EW00.FG0EWEND - 1;

    FG0EW00.FG0EWIXT = 1;

    while (FG0EW00.FG0EWIXF <= FG0EW00.FG0EWIXE)

      FG0EW00.FG0EWTOT = FG0EW00.FG0EWMTL[FG0EWIXT]; /* Total qty*/
      FG0EW00.FG0EWFCS = FG0EW01.FG0EWFCS[FG0EWIXF]; /* Mo. fcst qty*/
      FG0EW00.FG0EWMTL[FG0EWIXT] = FG0EW00.FG0EWTOT + FG0EW00.FG0EWFCS;
      FG0EWMTF[FG0EWIXT] = "Y"; /* Month total changed*/

      FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXF + 1;
      FG0EW00.FG0EWIXT = FG0EW00.FG0EWIXT + 1;

    end

    FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW - 1;

  end


end // end FG0ES01

// Update tot in next page
Function FG0ES02()

   /* ------------------------------------------------------------*/
    /* Update the current page with the changes, obtain next*/
    /* page and apply the changes to the total with the same*/
    /* style group and bring back the original page.*/
   /* ------------------------------------------------------------*/

  if (FG0EW00.FG0EWSWU == "Y") /* Data modified*/

    FG0ES03();
                                   /* Update current temporary storage page*/

    FG0EW00.FG0EWSWU = "N"; /* Reset update switch*/

  end

  FG0EW00.FG0EWNPG = FG0EW00.XXXTSPAG + 1; /* Next page no.*/

  TA5REC.TA5TSQIX = FG0EW00.FG0EWNPG;
  FG0ES04(); /* Obtain next temporary storage page*/

  if ("   TOTAL" in FG0EW01.FG0EWDES) /* Find the first total line*/

    /* ------------------------------------------------------------*/
      /* Update style group grand total*/
    /* ------------------------------------------------------------*/

    FG0EW00.FG0EWTOT = FG0EW01.FG0EWGND[sysVar.arrayIndex];
    FG0EW01.FG0EWGND[sysVar.arrayIndex] = FG0EW00.FG0EWTOT - FG0EW00.FF6SLFCT;
    FG0EW00.FG0EWTOT = FG0EW01.FG0EWGND[sysVar.arrayIndex];
    FG0EW01.FG0EWGND[sysVar.arrayIndex] = FG0EW00.FG0EWTOT + FG0EW00.FG0EWFCS;
    FG0EW01.FG0EWSCH[sysVar.arrayIndex] = "Y";
                                   /* Indicate clr/grp grnd tot chng*/

    /* ------------------------------------------------------------*/
      /* Update style group month total*/
    /* ------------------------------------------------------------*/

    FG0EW00.FG0EWIXN = sysVar.arrayIndex - 1;
    FG0EW00.FG0EWIXN = FG0EW00.FG0EWIXN * 12 + FG0EW00.FG0EWCLM;

    FG0EW00.FG0EWTOT = FG0EW01.FG0EWFCS[FG0EWIXN];
    FG0EW01.FG0EWFCS[FG0EWIXN] = FG0EW00.FG0EWTOT - FG0EW00.FF6SLFCT;
    FG0EW00.FG0EWTOT = FG0EW01.FG0EWFCS[FG0EWIXN];
    FG0EW01.FG0EWFCS[FG0EWIXN] = FG0EW00.FG0EWTOT + FG0EW00.FG0EWFCS;
    FG0EW01.FG0EWFCH[FG0EWIXN] = "Y"; /* Indicate monthly fcst chngd*/

    FFXREC.FFXNUMB = FG0EW01.FG0EWFCS[FG0EWIXN];
    XSFFS10();
    FG0EW01.FG0EWFCT[FG0EWIXN] = FFXREC.FFXCHAR;

  end

  FG0ES03();
                                   /* Update current temporary storage page*/

  FG0EW00.FG0EWSWU = "N"; /* Reset update switch*/

  FG0EW00.FG0EWNPG = 0; /* Clear next page number*/

  TA5REC.TA5TSQIX = FG0EW00.XXXTSPAG; /* Restore previous page*/

  FG0ES04(); /* Restore previou TSQ page*/


end // end FG0ES02

// Update temp storage page
Function FG0ES03()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (FG0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S03"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0ES03

// Read temp storage page
Function FG0ES04()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FG0EW01.XXXTSLEN = FG0EW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FG0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S04"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0ES04

// Calculate subtots and tots
Function FG0ES06()
  FG0EW01.FG0EWSUB[FG0EWIXM] = FG0EW00.FG0EWTSB[FG0EWIXM];
  FFXREC.FFXNUMB = FG0EW00.FG0EWTSB[FG0EWIXM];
  XSFFS10();
                                   /* Convert the subtotal from NUM to CHAR*/
  FG0EW01.FG0EWSBC[FG0EWIXM] = FFXREC.FFXCHAR;

  FG0EM001.FG0EMSUB[FG0EWIXM] = FG0EW01.FG0EWSBC[FG0EWIXM];
  FG0EM001.FG0EMSHD[1] = "SUB";
  FG0EM001.FG0EMSHD[2] = "TOTAL";
  set FG0EM001.FG0EMSHD[1] skip; /* Visible*/
  set FG0EM001.FG0EMSHD[2] skip; /* Visible*/

  FG0EW00.FG0EW-NEXT = "Y"; /* next season*/

   /* ---------------------------------------------------*/
      /* Calculate the grand total for each style color.*/
   /* ---------------------------------------------------*/

  FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXM - 1;
  FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXF * 12 + 1;
  FG0EW00.FG0EWIXE = FG0EW00.FG0EWIXF + 11;

  FG0EW00.FG0EWTGD = 0; /* Initialize the temp grand total area*/

  while (FG0EW00.FG0EWIXF <= FG0EW00.FG0EWIXE) /* Until end the row*/

    FG0EW00.FG0EWTGD = FG0EW00.FG0EWTGD + FG0EW01.FG0EWFCS[FG0EWIXF];

    FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXF + 1;

  end

  FG0EW01.FG0EWGND[FG0EWIXM] = FG0EW00.FG0EWTGD;
  FFXREC.FFXNUMB = FG0EW00.FG0EWTGD;
  XSFFS10();
                                   /* Convert the subtotal from NUM to CHAR*/
  FG0EW01.FG0EWGNC[FG0EWIXM] = FFXREC.FFXCHAR;

  FG0EM001.FG0EMGND[FG0EWIXM] = FG0EW01.FG0EWGNC[FG0EWIXM];
  set FG0EM001.FG0EMGND[FG0EWIXM] skip; /* Visible*/

  FG0EM001.FG0EMGHD[1] = "GRAND";
  FG0EM001.FG0EMGHD[2] = "TOTAL";
  set FG0EM001.FG0EMGHD[1] skip; /* Visible*/
  set FG0EM001.FG0EMGHD[2] skip; /* Visible*/

end // end FG0ES06

// Process the  active product
Function FG0ES07()

   /* If first sales month and projected close out month within range*/
   /* continue, else return to calling process.*/

  if (FF3REC.PG2FPDMO <= FFWREC.FFAENDMO /* First Prod date within range*/
   && FF3REC.SY2PNCMO >= FFWREC.FFABEGMO)
                                   /* Proj. clsout date within range*/
     /* next sentence*/
  else
    return;
  end

  FG0E195(); /* check for any masters VMSTY001*/
  if (SQLCA.VAGen_SQLCODE == 0
   || FG0EW00.FG0EWALL == "Y") /* all styles*/
    /* ------------------------------------------------------------*/
     /* If style group changed, calculate the total for the style*/
     /* group and load the new style group number and style group*/
     /* name into the display storage.*/
    /* ------------------------------------------------------------*/

    if (FF3REC.SYBSTGNB != FG0EW00.SYBSTGNB) /* Style group changed*/

      if (FG0EW00.SYBSTGNB != " ") /* Not 1st time thru*/
        FG0E180(); /* Calculate the totals*/
        if (FG0EW00.FG0EWIXM > 14)
          FG0E190(); /* Add page to temporary storage*/
        end

      end

      FG0EW00.SYBSTGNB = FF3REC.SYBSTGNB; /* Save new style grp*/
      FG0EW01.FG0EWSTY[FG0EWIXM] = FF3REC.SYBSTGNB; /* Stygrp no*/
      FG0EW01.FG0EWDES[FG0EWIXM] = FF3REC.SYBSTGNM; /* Stygrp name*/
      FG0EW01.FG0EWGFL[FG0EWIXM] = "Y"; /* Style group flag*/

      FG0EWIXM = FG0EWIXM + 1;

      if (FG0EW00.FG0EWIXM > 14)

        FG0E190(); /* Add page to temporary storage*/

      end

    end

    /* ---------------------------------------------------------*/
     /* Save the styles data*/
    /* ------------------------------------------------------------*/

    FG0EW01.FG0EWSTY[FG0EWIXM] = FF3REC.SY1STNBR; /* Style number*/
    FG0EW00.SY2CLRID = FF3REC.SY2CLRID; /* Color id*/
    FG0EW00.XDMCD = FF3REC.XDMCD; /* Dimension code*/
    FG0EW00.SY2CLRAB = FF3REC.SY2CLRAB; /* Color abbreviation*/
    FG0EW01.FG0EW1SD[FG0EWIXM] = FF3REC.PG2FPDMO; /* 1st prd month*/
    FG0EW01.FG0EWCOD[FG0EWIXM] = FF3REC.SY2PNCMO; /* Proj. C/O mo*/
    FG0EW01.FG0EWDES[FG0EWIXM] = FG0EW00.FG0EWDES;
    FG0EW01.FG0EWGFL[FG0EWIXM] = "N"; /* style group flag*/

    /* ---------------------------------------------------------*/
     /* Save the earliest projected intro. date and latest closeout*/
     /* date.*/
    /* ------------------------------------------------------------*/

    if (FF3REC.PG2FPDMO < FG0EW00.FG0EW1SD /* 1st prod mon is earlier*/
     || FG0EW00.FG0EW1SD == 0)             /* or no date in work area*/

      FG0EW00.FG0EW1SD = FF3REC.PG2FPDMO; /* Save the earlier prod mon*/

    end

    if (FF3REC.SY2PNCMO > FG0EW00.FG0EWCOD) /* Get the latest closeout dt*/

      FG0EW00.FG0EWCOD = FF3REC.SY2PNCMO; /* Proj. closeout month*/

    end

    if (FFWREC.XCTCD == " ") /* country code blank select sum*/
      FG0E174(); /* Access DFCAST.VMSTY001 table*/
    else
      FG0E170(); /* Access DFCAST.VMSTY001 table*/
    end

    FG0EW00.FG0EWIXM = FG0EW00.FG0EWIXM + 1;

    if (FG0EW00.FG0EWIXM > 14)

      FG0ES01(); /* Accumulate the style group total*/

      FG0E190(); /* Add page to temporary storage*/

    end

  end

end // end FG0ES07

// Process date range
Function FG0ES08()
  set FFZREC empty; /* Clear storage row*/

  FFZREC.FFZBYYMM = FG0EW01.FG0EWBMO; /* Beginning month*/
  FFZREC.FFZEYYMM = FG0EW01.FG0EWEMO; /* Ending month*/

  XSFFS30();

  FG0EW00.FG0EWWBD = FFZREC.FFZBEGMO; /* beg month - ccyymm*/
  FG0EW00.FG0EWWED = FFZREC.FFZENDMO; /* end month - ccyymm*/

end // end FG0ES08

// Unprotect fcst qty fields
Function FG0ES09()
  if (FG0EW00.FG0EWIXF <= FG0EW00.FG0EWIXE) /* Within the page*/
    if (FG0EW00.FG0EWIXN > FG0EW00.FG0EWREM)
      set FG0EM001.FG0EMFCS[FG0EWIXF] initialAttributes; /* Dark*/
    else
      if (FG0EW00.FG0EWIXN <= FG0EW00.FG0EWREM)
        if (FG0EW01.FG0EWDES[FG0EWIXM] != "   TOTAL")
          set FG0EM001.FG0EMFCS[FG0EWIXF] normal; /* Unprotected*/
        else
          set FG0EM001.FG0EMFCS[FG0EWIXF] skip; /* visible*/
        end
      else
        set FG0EM001.FG0EMFCS[FG0EWIXF] initialAttributes; /* Dark*/
      end
    end
  end

end // end FG0ES09

// Sel & open csr for VFFXRF01
Function FG0ES11()

  set FF2REC empty; /* Clear the storage row*/

  FF2REC.XPCCD = FG0EM001.XPCCD; /* Category code*/
  FF2REC.YPGCD = FG0EM001.YPGCD; /* Type group code*/
  FF2REC.YSMXDV = "10"; /* Division group code*/
  FF2REC.XPLCD = "*"; /* Product line code*/

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0ES11

// Fetch next row in VFFXRF01
Function FG0ES12()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* or end of select set*/
      converseLib.validationFailed(203); /* Indicate inconsistent*/
      FFWREC.XXXMODID = "S12"; /* Module identification*/
      set FG0EM001.YPGCD cursor, bold; /* Highlight*/
      set FG0EM001.XPCCD bold; /* Highlight*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S12"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0ES12

// Close the VFFXRF01 cursor
Function FG0ES13()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S13"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0ES13

// Add subtot & tot for prev page
Function FG0ES15()
   /* ---------------------------------------------------*/
   /* Calculate the subtotal for each style color.*/
   /* This process is to accumulate all the fcsts from*/
   /* the 1st page and is only for the 2nd page of the*/
   /* season.*/
   /* ---------------------------------------------------*/

  FG0EW00.FG0EWTSB[FG0EWIXM] = 0; /* Initialize the temp subtotal area*/

  if (FG0EW01.FG0EWSTY[FG0EWIXM] == " " /* End of style*/
   && FG0EW01.FG0EWDES[FG0EWIXM] == " ")

  else

    FG0EW00.FG0EWIXN = 1;

    FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXM - 1;
    FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXF * 12 + FG0EW00.FG0EWLEF - 6;

    while (FG0EW00.FG0EWIXN <= 6) /* end of season*/

      FG0EW00.FG0EWTSB[FG0EWIXM] = FG0EW00.FG0EWTSB[FG0EWIXM] +                                   FG0EW01.FG0EWFCS[FG0EWIXF];

      FG0EW00.FG0EWIXF = FG0EW00.FG0EWIXF + 1;
      FG0EW00.FG0EWIXN = FG0EW00.FG0EWIXN + 1; /* no. of month processed*/

    end

  end

end // end FG0ES15

// Read VMSTY001 row
Function FG0ES20()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/


  if (FFWREC.XCTCD == " ")
    FG0ES21(); /* select old sum quantity*/
    FG0EW00.FF6SLFCT = FF9REC.FF6SLFCT; /* save old sum*/
    set FF9REC empty; /* Clear row storage area*/
    FF9REC.XCTCD = "0000"; /* Country code*/
  else
    set FF9REC empty; /* Clear row storage area*/
    FF9REC.XCTCD = FFWREC.XCTCD; /* Country code*/
  end

  FF9REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF9REC.SY1STNBR = FG0EW01.FG0EWSTY[FG0EWIXM]; /* Style number*/
  FG0EW00.FG0EWDES = FG0EW01.FG0EWDES[FG0EWIXM];
  FF9REC.SY2CLRID = FG0EW00.SY2CLRID; /* Color id*/
  FF9REC.XDMCD = FG0EW00.XDMCD; /* Dimension code*/

  FF9REC.FF4FCTMO = FG0EW00.FG0EWHDG[FG0EWCLM]; /* Fcst month*/

  try
    call "IO3740" ("S ", SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S20"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0ES20

// Select old sum qty. VMSTY001
Function FG0ES21()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set FF9REC empty; /* Clear row storage area*/

  FF9REC.XCTCD = "*"; /* Country code*/
  FF9REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF9REC.SY1STNBR = FG0EW01.FG0EWSTY[FG0EWIXM]; /* Style number*/
  FG0EW00.FG0EWDES = FG0EW01.FG0EWDES[FG0EWIXM];
  FF9REC.SY2CLRID = FG0EW00.SY2CLRID; /* Color id*/
  FF9REC.XDMCD = FG0EW00.XDMCD; /* Dimension code*/

  set FFFREC empty; /* Clear row storage area*/

  FFFREC.FFFBEGMO = FG0EW00.FG0EWHDG[FG0EWCLM]; /* Fcst month*/
  FFFREC.FFFENDMO = FG0EW00.FG0EWHDG[FG0EWCLM]; /* Fcst month*/
  FFFREC.FFFFUNCD = "SS"; /* Function code*/

  try
    call "IO3740" (FFFREC, SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    else
      if (SQLCA.VAGen_SQLCODE == 100
       || SQLCA.VAGen_SQLCODE == -305)
        return; /* Return to previous process*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S21"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0ES21

// Update DFCAST.VMSTY001
Function FG0ES22()

  if (FFWREC.XCTCD == " ") /* country code blank*/
    FG0EW00.FG0EWVAR = FG0EW01.FG0EWFCS[FG0EWIXW] - FG0EW00.FF6SLFCT;
    /* old sum*/
    FF9REC.FF6SLFCT = FF9REC.FF6SLFCT + FG0EW00.FG0EWVAR; /* add to fcst*/
  else
    FG0EW00.FG0EWVAR = FG0EW01.FG0EWFCS[FG0EWIXW] - FF9REC.FF6SLFCT;
    FF9REC.FF6SLFCT = FG0EW01.FG0EWFCS[FG0EWIXW]; /* move new value*/
  end
   /* add variance to category level*/
  FG0EW00.FG0EWCV[FG0EWCLM] = FG0EW00.FG0EWCV[FG0EWCLM] + FG0EW00.FG0EWVAR;

  XX0XS01(); /* Obtain current date and time*/

  FF9REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF9REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  FG0EW01.FG0EWCNT[FG0EWIXW] = FG0EW01.FG0EWCNT[FG0EWIXW] + 1;
                                   /* add 1 chg cnt*/


  try
    call "IO3740" ("U ", SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S22"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0ES22

// Add DFCAST.VMSTY001
Function FG0ES23()
  set FF9REC empty;
  if (FFWREC.XCTCD == " ") /* calculate variance for '0000' prod*/
                                   /* fcst*/
    FF9REC.XCTCD = "0000"; /* Country code*/
    FG0EW00.FG0EWVAR = FG0EW01.FG0EWFCS[FG0EWIXW] - FG0EW00.FF6SLFCT;
    FF9REC.FF6SLFCT = FG0EW00.FG0EWVAR; /* move var to prod fcst*/
  else
    FF9REC.XCTCD = FFWREC.XCTCD; /* Country code*/
    FF9REC.FF6SLFCT = FG0EW01.FG0EWFCS[FG0EWIXW]; /* prod forecast*/
  end

  FF9REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF9REC.SY1STNBR = FG0EW01.FG0EWSTY[FG0EWIXM]; /* Style number*/
  FG0EW00.FG0EWDES = FG0EW01.FG0EWDES[FG0EWIXM];
  FF9REC.SY2CLRID = FG0EW00.SY2CLRID; /* Color id*/
  FF9REC.XDMCD = FG0EW00.XDMCD; /* Dimension code*/

  FF9REC.FF4FCTMO = FG0EW00.FG0EWHDG[FG0EWCLM]; /* Fcst month*/

   /* add variance to category level*/
  FG0EW00.FG0EWCV[FG0EWCLM] = FG0EW00.FG0EWCV[FG0EWCLM] + FF9REC.FF6SLFCT;

  XX0XS01(); /* Obtain current date and time*/

  FF9REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  FF9REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF9REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/


  try
    call "IO3740" ("A ", SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S23"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0ES23

// Read DFCAST.VMSGRP01
Function FG0ES24()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/


  if (FFWREC.XCTCD == " ")
    FG0ES36(); /* select old sum for sty group*/
    FG0EW00.FF6SLFCT = FF8REC.FF6SLFCT; /* save old sum*/
    set FF8REC empty; /* Clear row storage area*/
    FF8REC.XCTCD = "0000"; /* Country code*/
  else
    set FF8REC empty; /* Clear row storage area*/
    FF8REC.XCTCD = FFWREC.XCTCD; /* Country code*/
  end

  FF8REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF8REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF8REC.SYBSTGNB = FG0EW00.SYBSTGNB; /* Style group number*/
  FF8REC.FF4FCTMO = FG0EW00.FG0EWHDG[FG0EWCLM]; /* Fcst month*/

  try
    call "IO3730" ("S ", SQLCA, FF8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S24"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF8REC.FF8KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0ES24

// Add DFCAST.VMSGRP01
Function FG0ES25()

  set FF8REC empty;
  if (FFWREC.XCTCD == " ") /* calculate variance for '0000' prod*/
                                   /* fcst*/
    FF8REC.XCTCD = "0000"; /* Country code*/
    FG0EW00.FG0EWVAR = FG0EW01.FG0EWFCS[FG0EWIXW] - FG0EW00.FF6SLFCT;
    FF8REC.FF6SLFCT = FG0EW00.FG0EWVAR; /* move var to sales fcst*/
  else
    FF8REC.XCTCD = FFWREC.XCTCD; /* Country code*/
    FF8REC.FF6SLFCT = FG0EW01.FG0EWFCS[FG0EWIXW]; /* sales fcst*/
  end
  FF8REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF8REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF8REC.SYBSTGNB = FG0EW00.SYBSTGNB; /* Style group number*/
  FF8REC.FF4FCTMO = FG0EW00.FG0EWHDG[FG0EWCLM]; /* Fcst month*/


  XX0XS01(); /* Obtain current date and time*/

  FF8REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  FF8REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF8REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/


  try
    call "IO3730" ("A ", SQLCA, FF8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S25"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF8REC.FF8KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0ES25

// Update DFCAST.VMSGRP01
Function FG0ES26()

   /* ------------------------------------------------------------*/
   /* calculate the sty group variance and add to current fcst*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XCTCD == " ") /* country code blank*/
    FG0EW00.FG0EWVAR = FG0EW01.FG0EWFCS[FG0EWIXW] - FG0EW00.FF6SLFCT;
                                   /* old sum*/

    FF8REC.FF6SLFCT = FF8REC.FF6SLFCT + FG0EW00.FG0EWVAR; /* add to fcst*/
  else
    FF8REC.FF6SLFCT = FG0EW01.FG0EWFCS[FG0EWIXW]; /* move new value*/
  end

  XX0XS01(); /* Obtain current date and time*/

  FF8REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF8REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/


  try
    call "IO3730" ("U ", SQLCA, FF8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S26"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF8REC.FF8KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0ES26

// Read DFCAST.VMCAT001
Function FG0ES27()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* Clear row storage area*/

  if (FFWREC.XCTCD == " ")
    FF7REC.XCTCD = "0000"; /* Country code*/
  else
    FF7REC.XCTCD = FFWREC.XCTCD; /* Country code*/
  end

  FF7REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* category code*/
  FF7REC.FF4FCTMO = FG0EW00.FG0EWHDG[FG0EWIXN]; /* Fcst month*/

  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S27"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0ES27

// Add DFCAST.VMCAT001
Function FG0ES28()

  if (FFWREC.XCTCD == " ")
    FF7REC.XCTCD = "0000"; /* Country code*/
  else
    FF7REC.XCTCD = FFWREC.XCTCD; /* Country code*/
  end
  FF7REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* Category code*/
  FF7REC.FF4FCTMO = FG0EW00.FG0EWHDG[FG0EWIXN]; /* Fcst month*/

  FF7REC.FF6SLFCT = FG0EW00.FG0EWCV[FG0EWIXN];
                                   /* move cat variance to fcst*/

  if (FFWREC.YPGCD == "01") /* if inlines*/
    FF7REC.FF7FURAT = 0;
    FF7REC.FF7FLLRT = 92;
  else
    if (FFWREC.YPGCD == "02") /* if makeups*/
      FF7REC.FF7FURAT = 100;
      FF7REC.FF7FLLRT = 100;
    end
  end

  XX0XS01(); /* Obtain current date and time*/

  FF7REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  FF7REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF7REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/


  try
    call "IO3700" ("A ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S28"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0ES28

// Update DFCAST.VMCAT001
Function FG0ES29()

  FF7REC.FF6SLFCT = FF7REC.FF6SLFCT + FG0EW00.FG0EWCV[FG0EWIXN]; /* add var*/

  XX0XS01(); /* Obtain current date and time*/

  FF7REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF7REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/


  try
    call "IO3700" ("U ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S29"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0ES29

// Select old sum VMSGRP01
Function FG0ES36()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set FF8REC empty; /* Clear row storage area*/

  FF8REC.XCTCD = "*"; /* Country code*/
  FF8REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF8REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF8REC.SYBSTGNB = FG0EW00.SYBSTGNB; /* Style group number*/

  set FFFREC empty; /* Clear row storage area*/

  FFFREC.FFFBEGMO = FG0EW00.FG0EWHDG[FG0EWCLM]; /* Fcst month*/
  FFFREC.FFFENDMO = FG0EW00.FG0EWHDG[FG0EWCLM]; /* Fcst month*/
  FFFREC.FFFFUNCD = "SS"; /* Function code*/

  try
    call "IO3730" (FFFREC, SQLCA, FF8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    else
      if (SQLCA.VAGen_SQLCODE == 100
       || SQLCA.VAGen_SQLCODE == -305)
        return; /* Return to previous process*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S36"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF8REC.FF8KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0ES36

// Obtain default seasn end month
Function FG0ES40()
  if (FFZREC.FFZNUMMO == 12) /* check if 12 months in the reqstd*/
                                   /* range*/

    FG0ES41(); /* obtain season begin month*/
    FG0EW00.FG0EWWDT = FF2REC.FF2SEASN[1]; /* season begin month*/

    if (FG0EW00.FG0EWBYM == FG0EW00.FG0EWWYM) /* begin month yymm match*/

      FG0ES42(); /* calculate season end month*/

    else
      if (FG0EW00.FG0EWBMM == FG0EW00.FG0EWWMM) /* begin month mm match*/

        FG0ES44(); /* calculate season end mo*/

      end
    end
  end

end // end FG0ES40

// Obtain season begin month
Function FG0ES41()
   /* ------------------------------------------------------------*/
   /* Select set on dfcast.vffxrf01 table.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* load ff2rec record - dfcast.vffxrf01*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.YSMXDV = "10"; /* div grp code*/
  FF2REC.YPGCD = FG0EM001.YPGCD; /* product type group*/
  FF2REC.XPCCD = FG0EM001.XPCCD; /* product category*/

   /* ------------------------------------------------------------*/
   /* select set dfcast.vffxrf01*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S41"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S2 ON DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0ES41

// Calc seas end mo - same year
Function FG0ES42()

   /* --------------------------------------*/
   /* calculate no of season*/
   /* --------------------------------------*/

  FG0EW00.FG0EWIXW = 4;

  while (FG0EW00.FG0EWIXW > 0)

    if (FF2REC.FF2SEASN[FG0EWIXW] == 0)
      FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW - 1;
    else
      FG0EW00.FG0EWSMO[FG0EWIXW] = FG0EW00.FG0EWEYM; /* sesn end mo*/
      FG0EW00.FG0EWSEM[FG0EWIXW] = FG0EW00.FG0EWEMM;
      FG0EM001.FG0EMSEM[FG0EWIXW] = FG0EW00.FG0EWEMM;
      FG0EW00.FG0EWNSS = FG0EW00.FG0EWIXW; /* no. of seasons*/
      FG0EW00.FG0EWIXW = 0; /* force out the loop*/
    end

  end

   /* --------------------------------------*/
   /* calculate season end month*/
   /* --------------------------------------*/

  FG0EW00.FG0EWIXW = FG0EW00.FG0EWNSS;

  while (FG0EW00.FG0EWIXW > 1)

    FG0EW00.FG0EWWDT = FF2REC.FF2SEASN[FG0EWIXW];
    FG0ES43(); /* get end month of the season*/
    FG0EW00.FG0EWIXN = FG0EW00.FG0EWIXW - 1;
    FG0EW00.FG0EWSMO[FG0EWIXN] = FG0EW00.FG0EWWDT;
    FG0EW00.FG0EWSEM[FG0EWIXN] = FG0EW00.FG0EWWMM;
    FG0EM001.FG0EMSEM[FG0EWIXN] = FG0EW00.FG0EWWMM;
    FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW - 1;

  end
end // end FG0ES42

// Get end month - same year
Function FG0ES43()

  if (FG0EW00.FG0EWWMM == 1)
    FG0EW00.FG0EWWMM = 12;
    if (FG0EW00.FG0EWWYY == 0)
      FG0EW00.FG0EWWYY = 99;
      FG0EW00.FG0EWWCC = FG0EWWCC - 1;
    else
      FG0EW00.FG0EWWYY = FG0EW00.FG0EWWYY - 1;
    end
  else
    FG0EW00.FG0EWWMM = FG0EW00.FG0EWWMM - 1;
  end

end // end FG0ES43

// Calc seas end mo - diff year
Function FG0ES44()

   /* --------------------------------------*/
   /* calculate no of season*/
   /* --------------------------------------*/

  FG0EW00.FG0EWIXW = 4;

  while (FG0EW00.FG0EWIXW > 0)

    if (FF2REC.FF2SEASN[FG0EWIXW] == 0)
      FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW - 1;
    else
      FG0EW00.FG0EWSMO[FG0EWIXW] = FG0EW00.FG0EWEYM; /* sesn end mo*/
      FG0EW00.FG0EWSEM[FG0EWIXW] = FG0EW00.FG0EWEMM;
      FG0EM001.FG0EMSEM[FG0EWIXW] = FG0EW00.FG0EWEMM;
      FG0EW00.FG0EWNSS = FG0EW00.FG0EWIXW; /* no. of seasons*/
      FG0EW00.FG0EWIXW = 0; /* force out the loop*/
    end

  end

   /* --------------------------------------*/
   /* calculate season end month*/
   /* --------------------------------------*/

  FG0EW00.FG0EWIXW = FG0EW00.FG0EWNSS;

  while (FG0EW00.FG0EWIXW > 1)

    FG0EW00.FG0EWWDT = FF2REC.FF2SEASN[FG0EWIXW];
    FG0ES45(); /* get end month of the season*/
    FG0EW00.FG0EWIXN = FG0EW00.FG0EWIXW - 1;
    FG0EW00.FG0EWSMO[FG0EWIXN] = FG0EW00.FG0EWWDT;
    FG0EW00.FG0EWSEM[FG0EWIXN] = FG0EW00.FG0EWWMM;
    FG0EM001.FG0EMSEM[FG0EWIXN] = FG0EW00.FG0EWWMM;
    FG0EW00.FG0EWIXW = FG0EW00.FG0EWIXW - 1;

  end
end // end FG0ES44

// Get end month - diff year
Function FG0ES45()
   /* -------------------------------------------------------------------*/
   /* Plug in the ccyy from requested range and use the same month from*/
   /* the dfcast.vffxrf01 table.*/
   /* -------------------------------------------------------------------*/

  if (FG0EW00.FG0EWBMM <= FG0EW00.FG0EWWMM) /* same year*/

    FG0EW00.FG0EWWYY = FG0EW00.FG0EWBYY; /* year*/
    FG0EW00.FG0EWWCC = FG0EW00.FG0EWBCC; /* century*/

  else /* different year*/

    if (FG0EW00.FG0EWBYY == 99)
      FG0EW00.FG0EWWYY = 0; /* year*/
      FG0EW00.FG0EWWCC = FG0EW00.FG0EWBCC + 1; /* century*/
    else
      FG0EW00.FG0EWWYY = FG0EW00.FG0EWBYY + 1; /* year*/
      FG0EW00.FG0EWWCC = FG0EW00.FG0EWBCC; /* century*/
    end

  end

  if (FG0EW00.FG0EWWMM == 1)
    FG0EW00.FG0EWWMM = 12;
    if (FG0EW00.FG0EWWYY == 0)
      FG0EW00.FG0EWWYY = 99;
      FG0EW00.FG0EWWCC = FG0EWWCC - 1;
    else
      FG0EW00.FG0EWWYY = FG0EW00.FG0EWWYY - 1;
    end
  else
    FG0EW00.FG0EWWMM = FG0EW00.FG0EWWMM - 1;
  end
end // end FG0ES45

// Calc nbr of mos in each season
Function FG0ES50()
  FG0EW00.FG0EWWDT = FG0EW00.FG0EWSMO[FG0EWIXW]; /* sesn end mo*/

  if (FG0EW00.FG0EWIXW == 1) /* 1st season*/

    if (FG0EW00.FG0EWWMM >= FG0EW00.FG0EWBMM) /* in the same year*/
      FG0EW00.FG0EWSIN[FG0EWIXW] = FG0EW00.FG0EWWDT -                                    FG0EW00.FG0EWWBD + 1;
    else /* in the different year*/
      FG0EW00.FG0EWSIN[FG0EWIXW] = FG0EW00.FG0EWWMM + 12 -                                    FG0EW00.FG0EWBMM + 1;
    end

  else /* other season*/

    FG0EW00.FG0EWIXN = FG0EW00.FG0EWIXW - 1;
    FG0EW00.FG0EW-WDT1 = FG0EW00.FG0EWSMO[FG0EWIXN]; /* prev sesn mo*/
    if (FG0EW00.FG0EWWMM > FG0EW00.FG0EW-WMM1) /* in the same year*/
      FG0EW00.FG0EWSIN[FG0EWIXW] = FG0EW00.FG0EWWMM - FG0EW00.FG0EW-WMM1;
    else /* in the different year*/
      FG0EW00.FG0EWSIN[FG0EWIXW] = FG0EW00.FG0EWWMM + 12 -                                    FG0EW00.FG0EW-WMM1;
    end

  end

end // end FG0ES50

// Verify season end month
Function FG0ES60()

   /* --------------------------------------------------------*/
   /* beginning date and ending date are in the same year*/
   /* --------------------------------------------------------*/

  if (FG0EW00.FG0EWBYY == FG0EW00.FG0EWEYY) /* beg year = end year*/

    if (FG0EM001.FG0EMSEM[FG0EWIXW] >= FG0EW00.FG0EWBMM /* >= beg month*/
     && FG0EM001.FG0EMSEM[FG0EWIXW] <= FG0EW00.FG0EWEMM) /* <= end month*/

      FG0EW00.FG0EWWCC = FG0EW00.FG0EWBCC; /* plug in centry*/
      FG0EW00.FG0EWWYY = FG0EW00.FG0EWBYY; /* plug in year*/
      FG0EW00.FG0EWWMM = FG0EM001.FG0EMSEM[FG0EWIXW]; /* plug in month*/

    else

      FFWREC.XXXMODID = "S60"; /* module identification*/
      converseLib.validationFailed(010); /* invalid data*/
      set FG0EM001.FG0EMSEM[FG0EWIXW] cursor, bold;

    end

  else

      /* --------------------------------------------------------*/
      /* beginning date and ending date are in the different years*/
      /* --------------------------------------------------------*/

      /* season end month falls in the same year as begin month*/

    if (FG0EM001.FG0EMSEM[FG0EWIXW] >= FG0EW00.FG0EWBMM) /* >= beg mo*/

      FG0EW00.FG0EWWCC = FG0EW00.FG0EWBCC; /* plug in centry*/
      FG0EW00.FG0EWWYY = FG0EW00.FG0EWBYY; /* plug in year*/
      FG0EW00.FG0EWWMM = FG0EM001.FG0EMSEM[FG0EWIXW]; /* plug in month*/
    else

        /* * season end month falls in the same year as end month*/

      if (FG0EM001.FG0EMSEM[FG0EWIXW] <= FG0EW00.FG0EWEMM) /* <= end mo*/
        FG0EW00.FG0EWWCC = FG0EW00.FG0EWECC; /* plug in centry*/
        FG0EW00.FG0EWWYY = FG0EW00.FG0EWEYY; /* plug in year*/
        FG0EW00.FG0EWWMM = FG0EM001.FG0EMSEM[FG0EWIXW]; /* plug in month*/
      else

        FFWREC.XXXMODID = "S60"; /* module identification*/
        converseLib.validationFailed(010); /* invalid data*/
        set FG0EM001.FG0EMSEM[FG0EWIXW] cursor, bold;

      end

    end

  end

  if (converseVar.validationMsgNum == 0)
    FG0EW00.FG0EWSMO[FG0EWIXW] = FG0EW00.FG0EWWDT; /* save ccyymm*/
  end

end // end FG0ES60

//*** RECORD=FG0EW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FG0EW00 type basicRecord
  10 FG0EWIND FG0EWIND ; 
  10 FG0EWIXM FG0EWIXM ; 
  10 FG0EWIXW FG0EWIXW ; 
  10 FG0EWIXF FG0EWIXF ; 
  10 FG0EWIXE FG0EWIXE ; 
  10 FG0EWIXT FG0EWIXT ; 
  10 FG0EWIXN FG0EWIXN ; 
  10 FG0EWCLM FG0EWCLM ; 
  10 FG0EWCR1 FG0EWCR1 ; 
  10 FG0EWCR2 FG0EWCR2 ; 
  10 FG0EWCR3 FG0EWCR3 ; 
  10 FG0EWCR4 FG0EWCR4 ; 
  10 FG0EWSWO FG0EWSWO ; 
  10 FG0EWSWF FG0EWSWF ; 
  10 FG0EWSWR FG0EWSWR ; 
  10 FG0EWSWU FG0EWSWU ; 
  10 FG0EWSW1 FG0EWSW1 ; 
  10 FG0EWSWL FG0EWSWL ; 
  10 FG0EWMST FG0EWMST ; 
  10 FG0EWERR FG0EWERR ; 
  10 FG0EWUPD FG0EWUPD ; 
  10 FG0EW-RNG-ERR FG0EW-RNG-ERR ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 FG0EWPAG FG0EWPAG ; 
  10 FG0EWNPG FG0EWNPG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FG0EWRIG FG0EWRIG ; 
  10 FG0EWLEF FG0EWLEF ; 
  10 FG0EWEND FG0EWEND ; 
  10 FG0EWGQT FG0EWGQT ; 
  10 FG0EWTSB FG0EWTSB [14] ; 
  10 FG0EWTGD FG0EWTGD ; 
  10 FG0EWTOT FG0EWTOT ; 
  10 FG0EWGDT FG0EWGDT [12] ; 
  10 FG0EWFCS FG0EWFCS ; 
  10 FG0EWDTE FG0EWDTE ; 
    15 FG0EWDAT FG0EWDAT ; 
      20 FG0EWDCC FG0EWDCC ; 
      20 FG0EWDYM FG0EWDYM ; 
        25 FG0EWDYY FG0EWDYY ; 
        25 FG0EWDMM FG0EWDMM ; 
    15 FG0EWDAY FG0EWDAY ; 
  10 FG0EWHDG FG0EWHDG [12] ; 
    15 FG0EWHCC FG0EWHCC ; 
    15 FG0EWHYM FG0EWHYM ; 
  10 FG0EWMOS FG0EWMOS ; 
  10 FG0EWALL FG0EWALL ; 
  10 FF6SLFCT FF6SLFCT ; 
  10 FG0EWNM FG0EWNM ; 
  10 FG0EWVAR FG0EWVAR ; 
  10 FG0EWMVR FG0EWMVR [12] ; 
  10 FG0EWCV FG0EWCV [12] ; 
  10 FG0EW1SD FG0EW1SD ; 
    15 FG0EW1SC FG0EW1SC ; 
    15 FG0EW1SM FG0EW1SM ; 
  10 FG0EWCOD FG0EWCOD ; 
    15 FG0EWCOC FG0EWCOC ; 
    15 FG0EWCOM FG0EWCOM ; 
  10 SYBSTGNB SYBSTGNB ; 
  10 FG0EWDES FG0EWDES ; 
    15 SY2CLRID SY2CLRID ; 
    15 * char(1) ; 
    15 XDMCD XDMCD ; 
    15 * char(1) ; 
    15 SY2CLRAB SY2CLRAB ; 
  10 FG0EWMTL FG0EWMTL [12] ; 
  10 FG0EWMTF FG0EWMTF [12] ; 
  10 FG0EWBMO FG0EWBMO ; 
  10 FG0EWEMO FG0EWEMO ; 
  10 FG0EWWBD FG0EWWBD ; 
    15 * num(3) ; 
    15 FG0EWBCC FG0EWBCC ; 
    15 FG0EWBYM FG0EWBYM ; 
      20 FG0EWBYY FG0EWBYY ; 
      20 FG0EWBMM FG0EWBMM ; 
  10 FG0EWWED FG0EWWED ; 
    15 * num(3) ; 
    15 FG0EWECC FG0EWECC ; 
    15 FG0EWEYM FG0EWEYM ; 
      20 FG0EWEYY FG0EWEYY ; 
      20 FG0EWEMM FG0EWEMM ; 
  10 FG0EWWDT FG0EWWDT ; 
    15 * num(3) ; 
    15 FG0EWWCC FG0EWWCC ; 
    15 FG0EWWYM FG0EWWYM ; 
      20 FG0EWWYY FG0EWWYY ; 
      20 FG0EWWMM FG0EWWMM ; 
  10 FG0EW-WDT1 FG0EW-WDT1 ; 
    15 * num(3) ; 
    15 FG0EW-WCC1 FG0EW-WCC1 ; 
    15 FG0EW-WYM1 FG0EW-WYM1 ; 
      20 FG0EW-WYY1 FG0EW-WYY1 ; 
      20 FG0EW-WMM1 FG0EW-WMM1 ; 
  10 FG0EWTGT FG0EWTGT ; 
  10 FFCDMIND FFCDMIND ; 
  10 FG0EW-NEXT FG0EW-NEXT ; 
  10 FG0EW-MON-LEFT FG0EW-MON-LEFT [10] ; 
  10 FG0EW-PAGS FG0EW-PAGS [10] ; 
  10 FG0EWREM FG0EWREM ; 
  10 FG0EWNSS FG0EWNSS ; 
  10 FG0EWSIN FG0EWSIN [4] ; 
  10 FG0EWSEM FG0EWSEM [4] ; 
  10 FG0EWSMO FG0EWSMO [4] ; 
  10 FG0EWSNX FG0EWSNX ; 
  10 FG0EWPGX FG0EWPGX ; 
  10 XCTCD XCTCD ; 
    15 ZRGCD ZRGCD ; 
    15 FG0EWBLK char(2) ; // blank
end // end FG0EW00

//*** RECORD=FG0EW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FG0EW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(3344) ; 
    10 FG0EWBMO FG0EWBMO ; 
      15 FG0EWBCC FG0EWBCC ; 
      15 FG0EWBMY FG0EWBMY ; 
    10 FG0EWEMO FG0EWEMO ; 
      15 FG0EWECC FG0EWECC ; 
      15 FG0EWEMY FG0EWEMY ; 
    10 FG0EWSTY FG0EWSTY [14] ; 
    10 FG0EWDES FG0EWDES [14] ; 
    10 FG0EW1SD FG0EW1SD [14] ; 
    10 FG0EWCOD FG0EWCOD [14] ; 
    10 FG0EWGFL FG0EWGFL [14] ; 
    10 FG0EWFCT FG0EWFCT [180] ; 
    10 FG0EWFCH FG0EWFCH [180] ; 
    10 FG0EWFCS FG0EWFCS [180] ; 
    10 FG0EWCNT FG0EWCNT [180] ; 
    10 FG0EWSBC FG0EWSBC [14] ; 
    10 FG0EWSUB FG0EWSUB [14] ; 
    10 FG0EWGNC FG0EWGNC [14] ; 
    10 FG0EWGND FG0EWGND [14] ; 
    10 FG0EWSCH FG0EWSCH [14] ; 
end // end FG0EW01

// Month left flag
DataItem FG0EW-MON-LEFT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Next season flag
DataItem FG0EW-NEXT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Processing season of the page
DataItem FG0EW-PAGS num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date range error switch
DataItem FG0EW-RNG-ERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Century
DataItem FG0EW-WCC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0EW-WDT1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem FG0EW-WMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year/month
DataItem FG0EW-WYM1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem FG0EW-WYY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century
DataItem FG0EW1SC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First domestic sales date
DataItem FG0EW1SD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First domestic sales month
DataItem FG0EW1SM char(4)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// All styles flag
DataItem FG0EWALL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Century
DataItem FG0EWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem FG0EWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning date of the range
DataItem FG0EWBMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Beginning date of the range
DataItem FG0EWBMY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// year/month
DataItem FG0EWBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem FG0EWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for map fields
DataItem FG0EWCLM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Change count
DataItem FG0EWCNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century
DataItem FG0EWCOC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Projected dom closeout date
DataItem FG0EWCOD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Projected dom closeout month
DataItem FG0EWCOM char(4)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor for VFFXRF01
DataItem FG0EWCR1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor for VFFSTY01
DataItem FG0EWCR2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor for VMSTY001
DataItem FG0EWCR3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor for VWSMTH01
DataItem FG0EWCR4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Category variance for months
DataItem FG0EWCV int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date ccyymm
DataItem FG0EWDAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DD  work area
DataItem FG0EWDAY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century work area
DataItem FG0EWDCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style grp/style color desc
DataItem FG0EWDES char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MM work area
DataItem FG0EWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date ccyymmdd
DataItem FG0EWDTE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YYMM work area
DataItem FG0EWDYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YY work area
DataItem FG0EWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century
DataItem FG0EWECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem FG0EWEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending date of the range
DataItem FG0EWEMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Ending date of the range
DataItem FG0EWEMY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// End of range index
DataItem FG0EWEND num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Error occured switch
DataItem FG0EWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year/month
DataItem FG0EWEYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem FG0EWEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Forecast changed flag
DataItem FG0EWFCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fcst field work area
DataItem FG0EWFCS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Forecast enter & display field
DataItem FG0EWFCT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Cat grand total for each month
DataItem FG0EWGDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style group flag
DataItem FG0EWGFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Grand total
DataItem FG0EWGNC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Grand total
DataItem FG0EWGND int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total qty of grand total field
DataItem FG0EWGQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Heading century work area
DataItem FG0EWHCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Heading work area
DataItem FG0EWHDG num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Heading YYMM work area
DataItem FG0EWHYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Indicator of last disp row
DataItem FG0EWIND smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FG0EWIXE smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FG0EWIXF smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FG0EWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FG0EWIXN smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FG0EWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FG0EWIXW smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Scroll right index
DataItem FG0EWLEF num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// No. of month in season
DataItem FG0EWMOS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Master fcst saved switch
DataItem FG0EWMST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Month total change flag
DataItem FG0EWMTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Month total work area
DataItem FG0EWMTL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Monthly variance for the fcsts
DataItem FG0EWMVR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Numeric work field
DataItem FG0EWNM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Next TSQ page number
DataItem FG0EWNPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// No. of seasons
DataItem FG0EWNSS num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Curr TSQ page for PF15 process
DataItem FG0EWPAG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page index
DataItem FG0EWPGX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Remaining months
DataItem FG0EWREM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Scroll left index
DataItem FG0EWRIG num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Subtotal
DataItem FG0EWSBC char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Style total change flag
DataItem FG0EWSCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season end month - mm
DataItem FG0EWSEM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// No. of months in each season
DataItem FG0EWSIN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season end month - ccyymm
DataItem FG0EWSMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Season index
DataItem FG0EWSNX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style group/style number
DataItem FG0EWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Subtot
DataItem FG0EWSUB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First time through switch
DataItem FG0EWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FG0EWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Last row switch
DataItem FG0EWSWL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data obtained switch
DataItem FG0EWSWO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FG0EWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem FG0EWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Grand total work area
DataItem FG0EWTGD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FF_FCST_TRGT
DataItem FG0EWTGT num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Total field work area
DataItem FG0EWTOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Subtotal work area
DataItem FG0EWTSB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Error occured switch
DataItem FG0EWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Variance between old & new fcs
DataItem FG0EWVAR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0EWWBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century
DataItem FG0EWWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0EWWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0EWWED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem FG0EWWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year/month
DataItem FG0EWWYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem FG0EWWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

