package fg09;

import corpcom1.CACHGFL;
import corpcom2.XPCREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPFF001;
import corpcom3.XPTA0P;
import corpcom3.XPXPC01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS01;
import corpcom4.XSFFS30;
import corpcom4.XSFFS50;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XPCTBL;
import corpy2.YPGTBL;
import ff.common.FF1REC;
import ff.common.FF2REC;
import ff.common.FF3REC;
import ff.common.FF7REC;
import ff.common.FFCREC;
import ff.common.FFDREC;
import ff.common.FFFREC;
import ff.common.FFQREC;
import ff.common.FFRREC;
import ff.common.FFWREC;
import ff.common.FFXREC;
import ff.common.FFZREC;
import fh.common.FH3REC;
import fh.common.FH6REC;
import sy.common.SYBSTGNB;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
import ta.common.TARJCL;
//*** PROGRAM=FG09 ****
// This application provides the user with the ability to
// create a new future ratio by referring to the historical
// data for a giver range.
// 
// The future ratio must be created before setting any other
// indices.
// 
// The user is requested to enter the range, type group code
// and category code.  The system will display the past
// 3 years historical data.
// 
// The future ratio is the percentage of the future demand
// qty over the total demand qty.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from either of the screens.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          02/24/90  rgilli  New application.
// FF#045   06/12/90  rhetri  Increase size of percent field.
// FF1016   08/01/90  JJUCH   Disallowed to fcst current main
//                            buy month and all prior months.
// FF1018   09/05/90  cross   allow chgs to each mth's ratio
// FF#213   01/25/91  LDELUH  Add PF14 key to update the style
//                            S.R. worksheets with category
//                            future ratios.
// FF1099   10/09/91  LDELUH  Chg PF14 to submit batch job not
//                            subroutine.
// FF1108   11/14/91  LDELUH  "Total" pct field on historicals
//                            should be tot fut / tot dmd not
//                            an average.
// FF253    12/06/91  KSANFO  Changed processing to save ratio
//                            on tables when the ENTER key is
//                            pressed, but will NOT update S.R.
//                            worksheets.
// Fix      05/13/92  JJUCH   Stop checking the date when no
//                            category entered.
// Fix      05/14/92  JJUCH   Move obtaining sesn begin month
//                            logic to the place where verify
//                            the category code.
//          09/09/93  JJUCH   Convert to CSP V4.1 version.
// FF434    10/14/93  JJUCH   Change to just display the month
//                            heading as entered range.
// FH140    02/24/94  JJUCH   Change to use authorized future
//                            for the actual month.
// Fix      07/13/94  JJUCH   Fixed date edit to check 12 month
//                            limit.
// FF175    12/06/96  DSMITH  Changed date range fill character
//                            to '0' and included century check
//                            in fg09210.
// FFMAINT  04/01/97  DSMITH  corrected total problem in 210.
//                            totals weren't displaying when
//                            less than 12 mths were requested.
// D980121A 02/11/97  SVARGH  corrected 'date out of range"
//                            error by chging ffzrec.ffzwrmm to
//                            ffzrec.ffzwryy in fg09s08
// *********************
Program FG09 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF3REC FF3REC; // record
  FF7REC FF7REC; // record
  FFCREC FFCREC; // record
  FFDREC FFDREC; // record
  FFFREC FFFREC; // record
  FFQREC FFQREC; // record
  FFRREC FFRREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  FG09W00 FG09W00; // record
  FG09W01 FG09W01; // record
  FG09W02 FG09W02; // record
  FH3REC FH3REC; // record
  FH6REC FH6REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPCTBL; // table
  use YPGTBL; // table
  use FG09T {deleteAfterUse = yes}; // table
  use FG09T5O {deleteAfterUse = yes}; // table
  use FG09M.FG09M001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FFFREC empty;
    set FG09M001 initial; /* M001 input/output*/
    set FG09W00 empty; /* Working storage*/
    set FG09W01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine work area*/
    set TA5REC empty; /* temp storage queue area*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    FG09W00.FG09WSWR = "N"; /* Request for data switch*/
    FG09W00.FG09WSWF = "Y"; /* format screen data switch*/
    ;
     /* ---------------------------------------------------*/
     /* Clear unused fields*/
     /* ---------------------------------------------------*/
    ;
    FFWREC.XPLCD = " "; /* Clear product line code*/
    FFWREC.XPLABRV = " "; /* Clear product line abrv*/
    FFWREC.SYBSTGNB = " "; /* Clear style group number*/
    FFWREC.SYBSTGNM = " "; /* Clear style group name*/
    FFWREC.SY1STNBR = " "; /* Clear style number*/
    FFWREC.SY2CLRID = " "; /* Clear color id*/
    FFWREC.XDMCD = " "; /* Clear dimension code*/
    FFWREC.SY1SSTNM = " "; /* Clear short style name*/
    FFWREC.SY2CLRAB = " "; /* Clear color abrv*/
    FFWREC.XDMABRV = " "; /* Clear dimension abrv*/
    FFWREC.ZRGCD = " "; /* Clear region code*/
    FFWREC.ZRGABRV = " "; /* Clear region abrv*/
    FFWREC.XCTCD = " "; /* Clear country code*/
    FFWREC.XCTABRV = " "; /* Clear country abrv*/
    ;
     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/
    ;
     /* ------------------------------------------------------------*/
     /* product type group*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.YPGCD == " ")
      FFWREC.YPGCD = "01";
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end
    ;
     /* ------------------------------------------------------------*/
     /* determine if data is to be loaded*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.FFABEGMO != 0
     && FFWREC.FFAENDMO != 0
     && FFWREC.XPCCD != " ")
      FFZREC.FFZBEGMO = FFWREC.FFABEGMO;
      FFZREC.FFZENDMO = FFWREC.FFAENDMO;
      FG09W00.FG09WSWR = "Y"; /* set data request flag*/
    end
    ;
     /* ------------------------------------------------------------*/
     /* Flow to first time through date validation*/
     /* ------------------------------------------------------------*/
    ;
    goto FG09001; /* Converse the main process*/
    ;
    FG09001: FG09001();
     /* ------------------------------------------------------------*/
     /* flow to converse the main process used to display a map*/
     /* ------------------------------------------------------------*/
    ;
    goto FG09001; /* converse the main process*/
    ;
  end // end main
end // end FG09

// maint. historical futr ratio
Function FG09001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FG09100(); /* Obtain the data to display*/
  ;
  FG09200(); /* Format and display the map*/
  ;
  FG09300(); /* Check attention identifier*/
  ;
  FG09400(); /* Reset fields to normal intensity*/
  ;
  FG09500(); /* Verify the entered data*/
  ;
  FG09600(); /* Process valid input request*/
  ;
  ;
end // end FG09001

// obtain data for display
Function FG09100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG09W00.FG09WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* init working storage*/
   /* ------------------------------------------------------------*/
  ;
  set FG09W01 empty; /* init w/s*/
  ;
   /* ------------------------------------------------------------*/
   /* obtain current date using routine xx0xs01*/
   /* ------------------------------------------------------------*/
   /* ------------------------*/
   /* get current date*/
   /* ------------------------*/
  ;
  XX0XS01();
  ;
  FG09W00.FG09WCRD = XX0XW01.XX0XWCYM; /* current date ccyymm*/
  FG09W00.FG09WWDT = XX0XW01.XX0XWCYM; /* work date*/
  ;
   /* ------------------------------------------------------------*/
   /* calculate "current" heading date ranges (12 months)*/
   /* ------------------------------------------------------------*/
  ;
  FG09W00.FG09WWBD = FFWREC.FFABEGMO; /* user requested begin range*/
  FG09W00.FG09WWED = FFWREC.FFAENDMO; /* begin range + 11 months*/
  ;
  FG09W01.FG09WHBD[1] = FG09W00.FG09WWBD; /* cur beg date*/
  FG09W01.FG09WHED[1] = FG09W00.FG09WWED; /* cur end date*/
  ;
   /* ------------------------------------------------------------*/
   /* calculate "historical" heading date ranges (12 months)*/
   /* ------------------------------------------------------------*/
  ;
  FG09W00.FG09WIDX = 2; /* init index*/
  while (FG09W00.FG09WIDX <= 4) /* calculate historical date ranges*/
    ;
    if (FG09W00.FG09WBYY == 00)
      FG09W00.FG09WBYY = 99;
      FG09W00.FG09WBCC = FG09W00.FG09WBCC - 1;
    else
      FG09W00.FG09WBYY = FG09W00.FG09WBYY - 1;
    end
    FG09W01.FG09WHBD[FG09WIDX] = FG09W00.FG09WWBD; /* prior beg date*/
    ;
    if (FG09W00.FG09WEYY == 00)
      FG09W00.FG09WEYY = 99;
      FG09W00.FG09WECC = FG09W00.FG09WECC - 1;
    else
      FG09W00.FG09WEYY = FG09W00.FG09WEYY - 1;
    end
    FG09W01.FG09WHED[FG09WIDX] = FG09W00.FG09WWED; /* prior end date*/
    ;
    FG09W00.FG09WIDX = FG09W00.FG09WIDX + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* calculate historical date ranges using the begining and*/
   /* end range specified by the user*/
   /* ------------------------------------------------------------*/
  ;
  FG09W00.FG09WWBD = FFWREC.FFABEGMO; /* user requested begin range*/
  FG09W00.FG09WWED = FFWREC.FFAENDMO; /* user requested end range*/
  ;
  FG09W00.FG09WIDX = 1; /* init index*/
  while (FG09W00.FG09WIDX <= 3) /* calculate historical date ranges*/
    ;
    if (FG09W00.FG09WBYY == 00)
      FG09W00.FG09WBYY = 99;
      FG09W00.FG09WBCC = FG09W00.FG09WBCC - 1;
    else
      FG09W00.FG09WBYY = FG09W00.FG09WBYY - 1;
    end
    FG09W01.FG09WPBD[FG09WIDX] = FG09W00.FG09WWBD; /* prior beg date*/
    ;
    if (FG09W00.FG09WEYY == 00)
      FG09W00.FG09WEYY = 99;
      FG09W00.FG09WECC = FG09W00.FG09WECC - 1;
    else
      FG09W00.FG09WEYY = FG09W00.FG09WEYY - 1;
    end
    FG09W01.FG09WPED[FG09WIDX] = FG09W00.FG09WWED; /* prior end date*/
    ;
    FG09W00.FG09WIDX = FG09W00.FG09WIDX + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* save user requested date range returned from xsffs30*/
   /* ------------------------------------------------------------*/
  ;
  FG09W00.FG09WWBD = FFZREC.FFZBEGMO;
  FG09W00.FG09WWED = FFZREC.FFZENDMO;
  ;
   /* ------------------------------------------------------------*/
   /* obtain monthly headings for "current" data*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty;
  ;
  FFZREC.FFZBYYMM = FG09W01.FG09WHBY[1]; /* beg date current*/
  FFZREC.FFZEYYMM = FG09W01.FG09WHEY[1]; /* end date current*/
  ;
  FG09110(); /* get months within range*/
  ;
  FG09W00.FG09WIDX = 1;
  while (FG09W00.FG09WIDX <= FFZREC.FFZNUMMO) /* process all months in range*/
    ;
    FG09W01.FG09WHDC[FG09WIDX] = FFZREC.FFZINDMO[FG09WIDX];
    ;
    FG09W00.FG09WIDX = FG09W00.FG09WIDX + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* obtain current fill rate for requested date range, type*/
   /* group and category from dfcast.vmcat001*/
   /* ------------------------------------------------------------*/
  ;
  FG09S02(); /* select 's1' dfcast.vmcat001*/
  FG09S03(); /* fetch 'n1' dfcast.vmcat001*/
  ;
  FG09W00.FG09WNMO = 0; /* init nbr of months*/
  FG09W00.FG09WIDX = 1; /* init index*/
  while (SQLCA.VAGen_SQLCODE == 0) /* process all dfcast.vmcat001*/
    ;
    FG09W01.FG09WFRC[FG09WIDX] = mathLib.round(FF7REC.FF7FURAT + 0, -mathLib.decimals(FG09W01.FG09WFRC[FG09WIDX]));
    ;
    FG09W01.FG09WFRC[13] = FG09W01.FG09WFRC[FG09WIDX] +     FG09W01.FG09WFRC[13];
    ;
    FG09S03(); /* fetch 'n1' dfcast.vmcat001*/
    ;
    FG09W00.FG09WIDX = FG09W00.FG09WIDX + 1;
    FG09W00.FG09WNMO = FG09W00.FG09WNMO + 1;
    ;
  end
  ;
  FG09S04(); /* close 'c1' dfcast.vmcat001*/
  ;
  if (FG09W00.FG09WNMO != 0)
    FG09W01.FG09WFRC[13] = mathLib.round(FG09W01.FG09WFRC[13] / FG09W00.FG09WNMO, -mathLib.decimals(FG09W01.FG09WFRC[13]));
  end
  ;
   /* ------------------------------------------------------------*/
   /* obtain monthly headings and quantities for historical*/
   /* data 1 year ago*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty;
  ;
  FFZREC.FFZBYYMM = FG09W01.FG09WHBY[2]; /* beg date 1 yr ago*/
  FFZREC.FFZEYYMM = FG09W01.FG09WHEY[2]; /* end date 1 yr ago*/
  ;
  FG09110(); /* get months within range*/
  ;
  FG09W00.FG09WTFD = 0; /* init futures total*/
  FG09W00.FG09WTDM = 0; /* init demand total*/
  FG09W00.FG09WIDX = 1; /* init index*/
  while (FG09W00.FG09WIDX <= FFZREC.FFZNUMMO) /* process all months in range*/
    ;
    FG09W01.FG09WHD1[FG09WIDX] = FFZREC.FFZINDMO[FG09WIDX];
    ;
    /* ------------------------------------------------------------*/
     /* obtain actual/forecast sale/dmnd qtys*/
    /* ------------------------------------------------------------*/
    ;
    if (FFZREC.FFZINDMO[FG09WIDX] <= FG09W01.FG09WPED[1])
      ;
      FG09120(); /* obtain dmnd qtys*/
      ;
      /* ---------------------------------------------------*/
       /* load historical future ratio*/
      /* ---------------------------------------------------*/
      ;
      FG09W01.FG09WFR1[FG09WIDX] = FG09W00.FG09WUFR;
      ;
    end
    ;
    FG09W00.FG09WIDX = FG09W00.FG09WIDX + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* calculate historical futures ratio total to be total*/
   /* futures / total demand.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG09W00.FG09WTDM != 0)
    FG09W01.FG09WFR1[13] = mathLib.round(FG09W00.FG09WTFD * 100 / FG09W00.FG09WTDM, -mathLib.decimals(FG09W01.FG09WFR1[13]));
  end
  ;
   /* ------------------------------------------------------------*/
   /* obtain monthly headings and quantities for historical*/
   /* data 2 years ago*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty;
  ;
  FFZREC.FFZBYYMM = FG09W01.FG09WHBY[3]; /* beg date 2 yr ago*/
  FFZREC.FFZEYYMM = FG09W01.FG09WHEY[3]; /* end date 2 yr ago*/
  ;
  FG09110(); /* get months within range*/
  ;
  FG09W00.FG09WTFD = 0; /* init futures total*/
  FG09W00.FG09WTDM = 0; /* init demand total*/
  FG09W00.FG09WIDX = 1; /* init index*/
  while (FG09W00.FG09WIDX <= FFZREC.FFZNUMMO) /* process all month in range*/
    ;
    FG09W01.FG09WHD2[FG09WIDX] = FFZREC.FFZINDMO[FG09WIDX];
    ;
    /* ------------------------------------------------------------*/
     /* obtain actual/forecast dmnd qtys*/
    /* ------------------------------------------------------------*/
    ;
    if (FFZREC.FFZINDMO[FG09WIDX] <= FG09W01.FG09WPED[2])
      ;
      FG09120(); /* obtain dmnd qty*/
      ;
      /* ---------------------------------------------------*/
       /* load historical future ratio*/
      /* ---------------------------------------------------*/
      ;
      FG09W01.FG09WFR2[FG09WIDX] = FG09W00.FG09WUFR;
      ;
    end
    ;
    FG09W00.FG09WIDX = FG09W00.FG09WIDX + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* calculate historical futures ratio total to be total*/
   /* futures / total demand.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG09W00.FG09WTDM != 0)
    FG09W01.FG09WFR2[13] = mathLib.round(FG09W00.FG09WTFD * 100 / FG09W00.FG09WTDM, -mathLib.decimals(FG09W01.FG09WFR2[13]));
  end
  ;
   /* ------------------------------------------------------------*/
   /* obtain monthly headings and quantities for historical*/
   /* data 3 years ago*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty;
  ;
  FFZREC.FFZBYYMM = FG09W01.FG09WHBY[4]; /* beg date 3 yr ago*/
  FFZREC.FFZEYYMM = FG09W01.FG09WHEY[4]; /* end date 3 yr ago*/
  ;
  FG09110(); /* get months within range*/
  ;
  FG09W00.FG09WTFD = 0; /* init futures total*/
  FG09W00.FG09WTDM = 0; /* init demand total*/
  FG09W00.FG09WIDX = 1; /* init index*/
  while (FG09W00.FG09WIDX <= FFZREC.FFZNUMMO) /* process all month in range*/
    ;
    FG09W01.FG09WHD3[FG09WIDX] = FFZREC.FFZINDMO[FG09WIDX];
    ;
    /* ------------------------------------------------------------*/
     /* obtain actual/forecast dmnd qtys*/
    /* ------------------------------------------------------------*/
    ;
    if (FFZREC.FFZINDMO[FG09WIDX] <= FG09W01.FG09WPED[3])
      ;
      FG09120(); /* obtain sale qty*/
      ;
      /* ---------------------------------------------------*/
       /* load historical future ratio*/
      /* ---------------------------------------------------*/
      ;
      FG09W01.FG09WFR3[FG09WIDX] = FG09W00.FG09WUFR;
      ;
    end
    ;
    FG09W00.FG09WIDX = FG09W00.FG09WIDX + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* calculate historical futures ratio total to be total*/
   /* futures / total demand.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG09W00.FG09WTDM != 0)
    FG09W01.FG09WFR3[13] = mathLib.round(FG09W00.FG09WTFD * 100 / FG09W00.FG09WTDM, -mathLib.decimals(FG09W01.FG09WFR3[13]));
  end
  ;
   /* ------------------------------------------------------------*/
   /* reload user requested date range*/
   /* ------------------------------------------------------------*/
  ;
  FFZREC.FFZBEGMO = FG09W00.FG09WWBD;
  FFZREC.FFZENDMO = FG09W00.FG09WWED;
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  FG09W01.CACHGFL = "Y"; /* data loaded*/
  FG09W00.FG09WSWR = "N"; /* Request for data switch*/
  ;
  ;
end // end FG09100

// obtain mthly headings xsffs30
Function FG09110()
   /* ------------------------------------------------------------*/
   /* get all months within requested date range*/
   /* ------------------------------------------------------------*/
  ;
  FFZREC.FFZMONTH = 1;
  FFZREC.FFZSRANG = "Y";
  ;
  XSFFS30();
  ;
end // end FG09110

// obtain actual/fcst dmnd qtys
Function FG09120()
  ;
   /* ------------------------------------------------------------*/
   /* determine if actual/fcst dmnd qtys are to be obtained*/
   /* ------------------------------------------------------------*/
  ;
  if (FFZREC.FFZINDMO[FG09WIDX] < FG09W00.FG09WCRD) /* get actual*/
    FG09S05();
    if (FG09W00.FG09WUDM != 0)
      FG09W00.FG09WUFR = mathLib.round(FG09W00.FG09WUFD * 100 / FG09W00.FG09WUDM, -mathLib.decimals(FG09W00.FG09WUFR));
    else
      FG09W00.FG09WUFR = 0;
    end
  else
    FG09S06(); /* select dfcast.vmcat001 row*/
    FG09W00.FG09WUFR = mathLib.round(FF7REC.FF7FURAT + 0, -mathLib.decimals(FG09W00.FG09WUFR));
  end
  ;
  ;
end // end FG09120

// Format and converse the map
Function FG09200()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* if no errors format map*/
    ;
    /* ------------------------------------------------------------*/
     /* format screen*/
    /* ------------------------------------------------------------*/
    ;
    if (FG09W00.FG09WSWF == "Y") /* map must be formatted*/
      FG09210(); /* Format the data on the map*/
    end
    ;
  else
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* load message number*/
    ;
  end
  ;
  FG09M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FG09M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG09M001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* error message number*/
    FG09M001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    set FG09M001 alarm; /* Indicate sound alarm*/
  end
  ;
  converse FG09M001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0;
  ;
  COMMAREA.CATOAP = FG09M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG09M001.CAITEM; /* Application data*/
  ;
  ;
end // end FG09200

// Format the display data
Function FG09210()
   /* ------------------------------------------------------------*/
   /* init map fg09m001*/
   /* ------------------------------------------------------------*/
  ;
  set FG09M001 initial; /* m001 input/ouput area*/
   /* init qty fields to non-enterable*/
  set FG09M001.FG09MFRC[1] skip, invisible;
  set FG09M001.FG09MFRC[2] skip, invisible;
  set FG09M001.FG09MFRC[3] skip, invisible;
  set FG09M001.FG09MFRC[4] skip, invisible;
  set FG09M001.FG09MFRC[5] skip, invisible;
  set FG09M001.FG09MFRC[6] skip, invisible;
  set FG09M001.FG09MFRC[7] skip, invisible;
  set FG09M001.FG09MFRC[8] skip, invisible;
  set FG09M001.FG09MFRC[9] skip, invisible;
  set FG09M001.FG09MFRC[10] skip, invisible;
  set FG09M001.FG09MFRC[11] skip, invisible;
  set FG09M001.FG09MFRC[12] skip, invisible;
  ;
  FG09W00.FG09WSWF = "N"; /* init map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Format fg09m001 using passed data*/
   /* ------------------------------------------------------------*/
  ;
  FG09W00.FG09WWDT = FFWREC.FFABEGMO; /* w/s date field*/
  FG09M001.FG09MBRG = FG09W00.FG09WWYM; /* begin month range*/
  FG09W00.FG09WWDT = FFWREC.FFAENDMO; /* w/s date field*/
  FG09M001.FG09MERG = FG09W00.FG09WWYM; /* end month range*/
  ;
  FG09M001.YPGCD = FFWREC.YPGCD; /* product type group*/
  FG09M001.YPGABRV = FFWREC.YPGABRV; /* product type group abrv*/
  ;
  FG09M001.XPCCD = FFWREC.XPCCD; /* category code*/
  FG09M001.XPCABRV = FFWREC.XPCABRV; /* category code abrv*/
  ;
  if (FG09W01.CACHGFL != "Y")
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* load monthly headings and fill rates for 'current' data*/
   /* ------------------------------------------------------------*/
  ;
  FG09W00.FG09WIDX = 1;
  while (FG09W00.FG09WIDX <= FFZREC.FFZNUMMO) /* load monthly headings*/
    ;
    FG09M001.FG09MHDC[FG09WIDX] = FG09W01.FG09WDHC[FG09WIDX];
  /* IF FG09W01.FG09WDHC(FG09WIDX) GT FG09W00.FG09WWYM; /* mth beyond range*/
    if (FG09W01.FG09WHDC[FG09WIDX] > FG09W00.FG09WWDT) /* mth beyond range*/
       /* next sentence*/
    else
      set FG09M001.FG09MFRC[FG09WIDX] initialAttributes;
      FG09M001.FG09MFRC[FG09WIDX] = FG09W01.FG09WFRC[FG09WIDX];
    end
    ;
    FG09W00.FG09WIDX = FG09W00.FG09WIDX + 1; /* increment index*/
    ;
  end
  ;
  FG09M001.FG09MAVG = FG09W01.FG09WFRC[13];
  ;
   /* ------------------------------------------------------------*/
   /* load monthly headings and fill rates for histiorical data*/
   /* 1 year ago*/
   /* ------------------------------------------------------------*/
  ;
  FG09W00.FG09WIDX = 1;
  while (FG09W00.FG09WIDX <= FFZREC.FFZNUMMO) /* load monthly headings*/
    ;
    FG09M001.FG09MHD1[FG09WIDX] = FG09W01.FG09WDH1[FG09WIDX];
    FG09M001.FG09MFR1[FG09WIDX] = FG09W01.FG09WFR1[FG09WIDX];
    ;
    FG09W00.FG09WIDX = FG09W00.FG09WIDX + 1; /* increment index*/
    ;
  end
  ;
  FG09M001.FG09MFR1[13] = FG09W01.FG09WFR1[13];
  ;
   /* ------------------------------------------------------------*/
   /* load monthly headings and fill rates for historical data*/
   /* 2 years ago*/
   /* ------------------------------------------------------------*/
  ;
  FG09W00.FG09WIDX = 1;
  while (FG09W00.FG09WIDX <= FFZREC.FFZNUMMO) /* load monthly headings*/
    ;
    FG09M001.FG09MHD2[FG09WIDX] = FG09W01.FG09WDH2[FG09WIDX];
    FG09M001.FG09MFR2[FG09WIDX] = FG09W01.FG09WFR2[FG09WIDX];
    ;
    FG09W00.FG09WIDX = FG09W00.FG09WIDX + 1; /* increment index*/
    ;
  end
  ;
  FG09M001.FG09MFR2[13] = FG09W01.FG09WFR2[13];
  ;
   /* ------------------------------------------------------------*/
   /* load monthly headings and fill rates for historical data*/
   /* 3 years ago*/
   /* ------------------------------------------------------------*/
  ;
  FG09W00.FG09WIDX = 1;
  while (FG09W00.FG09WIDX <= FFZREC.FFZNUMMO) /* load monthly headings*/
    ;
    FG09M001.FG09MHD3[FG09WIDX] = FG09W01.FG09WDH3[FG09WIDX];
    FG09M001.FG09MFR3[FG09WIDX] = FG09W01.FG09WFR3[FG09WIDX];
    ;
    FG09W00.FG09WIDX = FG09W00.FG09WIDX + 1; /* increment index*/
    ;
  end
  ;
  FG09M001.FG09MFR3[13] = FG09W01.FG09WFR3[13];
  ;
  ;
end // end FG09210

// Check attention identifier
Function FG09300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    converseLib.clearScreen();
     /* refresh map*/
    ;
    FG09W00.FG09WSWF = "Y"; /* format screen m001*/
    FG09W00.FG09WSWR = "N"; /* request for data*/
    ;
    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG09M001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
      FG09W00.FG09WSWF = "Y"; /* format screen m001*/
      FG09W00.FG09WSWR = "N"; /* request for data*/
      ;
      set FG09M001.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG09M001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FG0A"; /* TO application*/
    end
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    FG09W00.FG09WSWF = "Y"; /* format screen m001*/
    FG09W00.FG09WSWR = "N"; /* request for data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf13  /* pf13 was not pressed*/
   && converseVar.eventKey not pf14  /* pf14 was not pressed*/
   && converseVar.eventKey not pf15) /* pf14 was not pressed*/
    ;
    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FG09300

// Reset highlighted fields
Function FG09400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FG09M001.FG09MBRG initialAttributes; /* begin range*/
  set FG09M001.FG09MERG initialAttributes; /* end range*/
  set FG09M001.XPCCD initialAttributes; /* category code*/
  set FG09M001.YPGCD initialAttributes; /* product type group*/
  ;
  set FG09M001.CATOAP initialAttributes;
  set FG09M001.CAITEM initialAttributes;
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG09M001.XPCCD == "?" /* categroy code*/
   || FG09M001.YPGCD == "?") /* product type group*/
    ;
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  else
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes*/
   /* ------------------------------------------------------------*/
  ;
  if (FG09M001.XPCCD == "?") /* product category list*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "CATEGORY CODES "; /* Heading*/
    ;
    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG09M001.XPCCD = FFWREC.XPCCD; /* product category*/
      XPCREC.XPCCD = FFWREC.XPCCD; /* product category*/
      XPCREC.XGPCD = COMMAREA.XGPCD; /* gpc code*/
      if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
        FG09M001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
      end
    else
      FG09M001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FG09M001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG09M001.XPCCD cursor; /* Establish cursor position*/
    ;
  end
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type group codes*/
   /* ------------------------------------------------------------*/
  ;
  if (FG09M001.YPGCD == "?") /* product type grp list*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT TYPE GROUP"; /* Heading*/
    ;
    XX0XW02.YPGFFFL = "Y"; /* init flag*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG09M001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FG09M001.YPGABRV = FFWREC.YPGABRV; /* Restore prior code*/
    else
      FG09M001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FG09M001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG09M001.YPGCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG09400

// Verify the entered data
Function FG09500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FG09M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* request for transfer*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14)
    ;
    FG09S07(); /* verify modifiable fields*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate entry fields*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14)
    ;
    FG09510(); /* validate entry fields*/
    ;
    /* ------------------------------------------------------*/
     /* if key data changed check modifiable fields*/
    /* ------------------------------------------------------*/
    ;
    FG09W00.FG09WWBD = FFWREC.FFABEGMO;
    FG09W00.FG09WWED = FFWREC.FFAENDMO;
    ;
    if (FG09M001.YPGCD != FFWREC.YPGCD        /* product type grp chg*/
     || FG09M001.YPGCD == " "                 /* product type grp chg*/
     || FG09M001.XPCCD != FFWREC.XPCCD        /* product category chg*/
     || FG09M001.XPCCD == " "                 /* product category chg*/
     || FG09M001.FG09MBRG != FG09W00.FG09WBYM /* beg range changed*/
     || FG09M001.FG09MBRG == 0                /* beg range changed*/
     || FG09M001.FG09MERG != FG09W00.FG09WEYM /* end range changed*/
     || FG09M001.FG09MERG == 0)               /* end range changed*/
      ;
      if (FG09W01.CACHGFL == "Y")
        FG09S07(); /* verify modifiable fields*/
      end
      ;
      if (converseVar.validationMsgNum == 0)
        FG09W00.FG09WSWR = "Y"; /* request data request*/
      end
      ;
    end
  end
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end
  ;
  ;
end // end FG09500

// validate modifiable data
Function FG09510()
  ;
   /* ------------------------------------------------------------*/
   /* validate product category code*/
   /* ------------------------------------------------------------*/
  ;
  XPCREC.XGPCD = COMMAREA.XGPCD;
  XPCREC.XPCCD = FG09M001.XPCCD;
  if (XPCREC.XPCKEY in XPCTBL.XPCKEY
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    FG09M001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
  else
    FG09M001.XPCABRV = " ";
    converseLib.validationFailed(118);
    FFWREC.XXXMODID = "510";
    set FG09M001.XPCCD cursor, bold;
  end
  ;
  FG09S09();
  ;
  if (SQLCA.VAGen_SQLCODE == +100)
    FG09M001.XPCABRV = " ";
    converseLib.validationFailed(118);
    FFWREC.XXXMODID = "510";
    set FG09M001.XPCCD cursor, bold;
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate product type group*/
   /* ------------------------------------------------------------*/
  ;
  if (FG09M001.YPGCD != "*")
    if (FG09M001.YPGCD in YPGTBL.YPGCD
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      FG09M001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
    else
      FG09M001.YPGABRV = " ";
      converseLib.validationFailed(118);
      FFWREC.XXXMODID = "510";
      set FG09M001.YPGCD cursor, bold;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate end yymm range and begin yymm range*/
   /* ------------------------------------------------------------*/
  ;
  FG09W00.FG09W-NUM-MO = FFZREC.FFZNUMMO; /* save no. of months*/
  ;
  set FFZREC empty;
  ;
  FFZREC.FFZMONTH = 6;
  FFZREC.FFZBYYMM = FG09M001.FG09MBRG;
  FFZREC.FFZEYYMM = FG09M001.FG09MERG;
  ;
  FG09S08(); /* edit date range*/
  ;
  if (FFZREC.FFZENDRC == "1")
    set FG09M001.FG09MERG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "510";
  else
    if (FFZREC.FFZENDRC == "2")
      set FG09M001.FG09MERG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "510";
    else
      if (FFZREC.FFZENDRC == "3")
        set FG09M001.FG09MERG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "510";
      end
    end
  end
  ;
  if (FFZREC.FFZBEGRC == "1")
    set FG09M001.FG09MBRG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "510";
  else
    if (FFZREC.FFZBEGRC == "2")
      set FG09M001.FG09MBRG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "510";
    else
      if (FFZREC.FFZBEGRC == "3")
        set FG09M001.FG09MBRG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "510";
      end
    end
  end
  ;
  FFZREC.FFZNUMMO = FG09W00.FG09W-NUM-MO; /* restore no. of month*/
  ;
end // end FG09510

// Process valid input request
Function FG09600()
  ;
   /* ------------------------------------------------------------*/
   /* indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/
  ;
  FG09W00.FG09WSWF = "Y"; /* set format map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA/ffwrec*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XPCCD = FG09M001.XPCCD; /* product category code*/
  FFWREC.XPCABRV = FG09M001.XPCABRV; /* product category abrv desc*/
  ;
  FFWREC.YPGCD = FG09M001.YPGCD; /* product type grp code*/
  FFWREC.YPGABRV = FG09M001.YPGABRV; /* product type grp abrv desc*/
  ;
  FFWREC.FFABEGMO = FFZREC.FFZBEGMO;
  FFWREC.FFAENDMO = FFZREC.FFZENDMO;
  if (FG09W00.FG09WSWR == "Y") /* KEY DATA MODIFIED*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if future ratio changed & enter pressed update screen.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf15)
    ;
    FG09W01.FG09WFRC[13] = 0; /* init total entry*/
    FG09W00.FG09WNMO = 0; /* init nbr mos*/
    FG09W00.FG09WIDX = 1; /* init index*/
    ;
    while (FG09W00.FG09WIDX <= FFZREC.FFZNUMMO)
      if (FG09M001.FG09MFRC[FG09WIDX] != FG09W01.FG09WFRC[FG09WIDX])
        FG09W01.FG09WFRC[FG09WIDX] = FG09M001.FG09MFRC[FG09WIDX];
      end
      FG09W01.FG09WFRC[13] = FG09W01.FG09WFRC[FG09WIDX]       + FG09W01.FG09WFRC[13]; /* Accum for total*/
      FG09W00.FG09WIDX = FG09W00.FG09WIDX + 1;
      FG09W00.FG09WNMO = FG09W00.FG09WNMO + 1;
    end
    ;
    if (FG09W00.FG09WNMO != 0)
      FG09W01.FG09WFRC[13] = mathLib.round(FG09W01.FG09WFRC[13] / FG09W00.FG09WNMO, -mathLib.decimals(FG09W01.FG09WFRC[13]));
    end
    ;
    XX0XS01(); /* get current date and time*/
    FG09S02(); /* select 's1' dfcast.vmcat001*/
    FG09S03(); /* fetch 'n1' dfcast.vmcat001*/
    ;
    set FG09W02 empty; /* clear out here to build pctchg tbl*/
    ;
    FG09W00.FG09WIDX = 1;
    ;
    while (SQLCA.VAGen_SQLCODE == 0)
      FG09640(); /* upd dfcast.vmcat001 row*/
      FG09S03(); /* fetch 'n1' dfcast.vmcat001*/
      FG09W00.FG09WIDX = FG09W00.FG09WIDX + 1;
    end
    ;
    FG09S04(); /* close 'c1' dfcast.vmcat001*/
    ;
    FG09S01(); /* select dfcast.vrcat001*/
    if (SQLCA.VAGen_SQLCODE == 100) /* Record not found*/
      FG09610(); /* Add dfcast.vrcat001 row*/
      FG09620(); /* Add dfcast.vrcmth01 row*/
    else
      FG09630(); /* Upd dfcast.vrcat001 row*/
    end
    ;
    if (converseVar.eventKey is pf15) /* adj futr ratio*/
      ;
      FFWREC.FFWMODSW = "N"; /* Set mod data switch*/
      ;
      /* ------------------------------------------------------*/
      /* Call sub-routine to find which environment the*/
      /* program is executing in, development or production.*/
      /* ------------------------------------------------------*/
      ;
      set TA3REC empty;
      TA3REC.TA3OPTN = "ASSIGN ";
      try
        call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
      end
      ;
      if (sysVar.errorCode == "00000000" /* Call successful*/
       && TA3REC.TA3RTNCD == 0)          /* Good return code*/
        ;
        if (TA3REC.TA3RGNID == "03") /* if on production system*/
          FG09S-10(); /* format production JCL*/
        else
          FG09S-11(); /* format test JCL*/
        end
        ;
      else
        ;
        FFWREC.XXXMODID = "600"; /* module identification*/
        converseLib.validationFailed(87); /* Error encountered with print rqst*/
        ;
      end
      ;
    end
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();
    ;
    FFWREC.FFWMODSW = "N"; /* Set mod data switch*/
    converseLib.validationFailed(32); /* changes saved message*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* if pf13 transfer to application fg0x*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "FG0X";
    XSFFS01(); /* Exit to another application*/
    exit stack; /* Exit to display map*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* if pf14 update dfcast.vmcat001 & submit program to*/
   /* update S.R. Worksheets.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf14)
    ;
    XX0XS01(); /* get current date and time*/
    FG09S02(); /* select 's1' dfcast.vmcat001*/
    FG09S03(); /* fetch 'n1' dfcast.vmcat001*/
    ;
    FG09W00.FG09WIDX = 1;
    ;
    while (SQLCA.VAGen_SQLCODE == 0)
      FG09640(); /* upd dfcast.vmcat001 row*/
      FG09S03(); /* fetch 'n1' dfcast.vmcat001*/
      FG09W00.FG09WIDX = FG09W00.FG09WIDX + 1;
    end
    ;
    FG09S04(); /* close 'c1' dfcast.vmcat001*/
    ;
    FG09S01(); /* select dfcast.vrcat001*/
    if (SQLCA.VAGen_SQLCODE == 100) /* Record not found*/
      FG09610(); /* Add dfcast.vrcat001 row*/
      FG09620(); /* Add dfcast.vrcmth01 row*/
    else
      FG09630(); /* Upd dfcast.vrcat001 row*/
    end
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();
    ;
    FFWREC.FFWMODSW = "N"; /* Set mod data switch*/
    ;
    /* ------------------------------------------------------*/
    /* Call sub-routine to find which environment the*/
    /* program is executing in, development or production.*/
    /* ------------------------------------------------------*/
    ;
    set TA3REC empty;
    TA3REC.TA3OPTN = "ASSIGN ";
    try
      call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
    end
    ;
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && TA3REC.TA3RTNCD == 0)          /* Good return code*/
      ;
      if (TA3REC.TA3RGNID == "03") /* if on production system*/
        FG09S-10(); /* format production JCL*/
      else
        FG09S-11(); /* format test JCL*/
      end
      ;
    else
      ;
      FFWREC.XXXMODID = "600"; /* module identification*/
      converseLib.validationFailed(87); /* Error encountered with print rqst*/
      ;
    end
    ;
  end
  ;
end // end FG09600

// Add dfcast.vrcat001 row
Function FG09610()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vrcat001 table.*/
   /* ------------------------------------------------------------*/
  ;
  set FFCREC empty;
  ;
  FFCREC.FFABEGMO = FFWREC.FFABEGMO;
  FFCREC.FFAENDMO = FFWREC.FFAENDMO;
  FFCREC.YPGCD = FFWREC.YPGCD; /* product type code*/
  FFCREC.XPCCD = FFWREC.XPCCD; /* product cat code*/
  FFCREC.FFCFUTFL = "Y"; /* Future ratio flag*/
  ;
  FFCREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFCREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFCREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  ;
  try
    call "IO3760" ("A ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "610"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD TABLE DFCAST.VRCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG09610

// Process dfcast.vrcmth01
Function FG09620()
  ;
  set FFDREC empty;
  ;
  FFDREC.FFABEGMO = FFWREC.FFABEGMO; /* Beginning month*/
  FFDREC.FFAENDMO = FFWREC.FFAENDMO; /* Ending month*/
  FFDREC.XPCCD = FFWREC.XPCCD;
  FFDREC.YPGCD = FFWREC.YPGCD;
  ;
  FG09W00.FG09WIDX = 1; /* init index*/
  while (FFDREC.FF4FCTMO < FFDREC.FFAENDMO)
    ;
    FG09621(); /* add dfcast.vrcmth01 row*/
    ;
    FG09W00.FG09WIDX = FG09W00.FG09WIDX + 1;
    ;
  end
end // end FG09620

// Add dfcast.vrcmth01 row
Function FG09621()
   /* ------------------------------------------------------------*/
   /* add dfcast.vrcmth01 table row*/
   /* ------------------------------------------------------------*/
  ;
  FFDREC.FF4FCTMO = FG09W01.FG09WHDC[FG09WIDX];
  ;
  FFDREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFDREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFDREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3770" ("A ", SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "621"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VRCMTH01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG09621

// Update dfcast.vrcat001 row
Function FG09630()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vrcat001 table.*/
   /* ------------------------------------------------------------*/
  ;
  FFCREC.FFCFUTFL = "Y"; /* Future ratio flag*/
  ;
  FFCREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFCREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  ;
  try
    call "IO3760" ("U ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "630"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TABLE DFCAST.VRCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG09630

// upd dfcast.vmcat001 row
Function FG09640()
   /* ------------------------------------------------------------*/
   /* upd dfcast.vmcat001 table row*/
   /* ------------------------------------------------------------*/
  ;
  FG09W01.FG09WDIF[FG09WIDX] = FF7REC.FF7FURAT;
                              /* move old fill rt*/
  FG09W01.FG09WDIF[FG09WIDX] = FG09M001.FG09MFRC[FG09WIDX] - FG09W01.FG09WDIF[FG09WIDX];
                              /* new - old*/
  FG09W02.FG09WPCTCHG[FG09WIDX] = FG09W01.FG09WDIF[FG09WIDX];
  ;
  FF7REC.FF7FURAT = FG09M001.FG09MFRC[FG09WIDX]; /* future ratio*/
  ;
  FF7REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FF7REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3700" ("U ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      FG09W00.FG09WSWR = "Y"; /* Request for data switch*/
      ;
      FFWREC.XXXMODID = "640"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "640"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DFCAST.VMCAT001 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG09640

// Determine to use actl/frz futr
Function FG09S-051()
  FG09W00.FG09W-BEG = FFFREC.FFFBEGMO;
  FG09W00.FG09W-END = FFFREC.FFFENDMO;
  ;
  if (FFFREC.FFFENDMO < 199206) /* Whole range before 199206*/
    FG09S-0511(); /* use actual future*/
    FG09W00.FG09WUFD = FH3REC.FH1PAQTY + FH3REC.FH1ALQTY +     FH3REC.FH2SHP + FH3REC.FH3CNCL;
    ;
  else
    if (FFFREC.FFFBEGMO >= 199206) /* Whole range beyond 199206*/
      FG09S-0511(); /* use frozen future*/
      FG09W00.FG09WUFD = FH3REC.FH-FRZ-PRAL-QTY + FH3REC.FH-FRZ-ALOC-QTY +       FH3REC.FH-FRZ-SHP-QTY + FH3REC.FH-FRZ-CNCL-QTY;
    else
      FFFREC.FFFENDMO = 199205;
      FG09S-0511(); /* use actual future*/
      FG09W00.FG09WUFD = FH3REC.FH1PAQTY + FH3REC.FH1ALQTY +       FH3REC.FH2SHP + FH3REC.FH3CNCL;
      ;
      FFFREC.FFFBEGMO = 199206;
      FFFREC.FFFENDMO = FG09W00.FG09W-END;
      FG09S-0511(); /* use frozen future*/
      ;
      FG09W00.FG09WUFD = FG09W00.FG09WUFD + FH3REC.FH-FRZ-PRAL-QTY +       FH3REC.FH-FRZ-ALOC-QTY + FH3REC.FH-FRZ-SHP-QTY +       FH3REC.FH-FRZ-CNCL-QTY;
    end
  end
  ;
end // end FG09S-051

// Get the future demand quantity
Function FG09S-0511()
  set FH3REC empty;
  ;
  FH3REC.XPCCD = FFWREC.XPCCD; /* product category*/
  FH3REC.XDVCD = FFWREC.YSMXDV; /* division code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* product type code*/
  FH3REC.XLCCD = "10"; /* life cycle code*/
  FH3REC.XCTCD = "USA"; /* country code*/
  FH3REC.XQACD = "01"; /* quality code*/
  FH3REC.YSMXOT = "FT"; /* sum code*/
  FH3REC.FH1PNAC = "*"; /* national account flag*/
  FH3REC.XDSCD = "*"; /* direct ship code*/
  TA1PGMNM = "FG09S05"; /* calling process*/
  ;
   /* --------------------------------------------------*/
   /* select dfhist.vfhcat01 table future demand qty*/
   /* --------------------------------------------------*/
  ;
  XSFFS50();
  ;
end // end FG09S-0511

// Format production JCL
Function FG09S-10()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Batch jcl work area*/
  /* T FG09W02 EMPTY;               /* Batch jcl parms*/
  ;
  TA6REC.TA6INDEX = 1; /* Initialize index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FG09T.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      FG09W02.FG09WPBM = FFWREC.FFABEGMO;
      FG09W02.FG09WPEM = FFWREC.FFAENDMO;
      FG09W02.FG09WPTG = FFWREC.YPGCD;
      FG09W02.FG09WPCT = FFWREC.XPCCD;
      FG09W02.FG09WPDT = XX0XW01.XX0XWDAT;
      FG09W02.FG09WPTM = XX0XW01.XX0XWTIM;
      ;
      TA6REC.TARJCL[TA6INDEX] = FG09W02.TARJCL; /* Parameters*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG09T.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FG09T.TARTYPE[TA6INDEX]; /* Type*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG09T.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Message switch*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "S10"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    FFWREC.XXXMSGNO = 76; /* Indicate job was submitted*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    FFWREC.XXXMSGNO = 86; /* Indicate user cancelled*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG09S-10

// Format test JCL
Function FG09S-11()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Batch jcl work area*/
  /* T FG09W02 EMPTY;               /* Batch jcl parms*/
  ;
  TA6REC.TA6INDEX = 1; /* Initialize index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FG09T5O.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      FG09W02.FG09WPBM = FFWREC.FFABEGMO;
      FG09W02.FG09WPEM = FFWREC.FFAENDMO;
      FG09W02.FG09WPTG = FFWREC.YPGCD;
      FG09W02.FG09WPCT = FFWREC.XPCCD;
      FG09W02.FG09WPDT = XX0XW01.XX0XWDAT;
      FG09W02.FG09WPTM = XX0XW01.XX0XWTIM;
      ;
      TA6REC.TARJCL[TA6INDEX] = FG09W02.TARJCL; /* Parameters*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG09T5O.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FG09T5O.TARTYPE[TA6INDEX]; /* Type*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG09T5O.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* Message switch*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "S11"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    FFWREC.XXXMSGNO = 76; /* Indicate job was submitted*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    ;
    FFWREC.XXXMSGNO = 86; /* Indicate user cancelled*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG09S-11

// select dfcast.vrcat001 row
Function FG09S01()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vrcat001 table.*/
   /* ------------------------------------------------------------*/
  ;
  set FFCREC empty;
  ;
  FFCREC.FFABEGMO = FFWREC.FFABEGMO;
  FFCREC.FFAENDMO = FFWREC.FFAENDMO;
  FFCREC.YPGCD = FFWREC.YPGCD; /* product type code*/
  FFCREC.XPCCD = FFWREC.XPCCD; /* product cat code*/
  ;
  try
    call "IO3760" ("S ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S01"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VRCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG09S01

// select 's1' dfcast.vmcat001
Function FG09S02()
   /* ------------------------------------------------------------*/
   /* Select set on dfcast.vmcat001 table.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* load fffrec record*/
   /* ------------------------------------------------------------*/
  ;
  FFFFUNCD = "S1";
  FFFREC.FFFBEGMO = FFWREC.FFABEGMO;
  FFFREC.FFFENDMO = FFWREC.FFAENDMO;
  ;
   /* ------------------------------------------------------------*/
   /* load ff7rec record*/
   /* ------------------------------------------------------------*/
  ;
  set FF7REC empty;
  ;
  FF7REC.YSMXDV = FFWREC.YSMXDV;
  FF7REC.XCTCD = "USA";
  FF7REC.YPGCD = FFWREC.YPGCD;
  FF7REC.XPCCD = FFWREC.XPCCD;
  ;
   /* ------------------------------------------------------------*/
   /* select set dfcast.vmcat001*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3700" (FFFREC, SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S02"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S1 DFCAST.VMCAT001 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG09S02

// fetch 'n1' dfcast.vmcat001
Function FG09S03()
   /* ------------------------------------------------------------*/
   /* fetch dfcast.vmcat001 row*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "N1";
  ;
  try
    call "IO3700" (FFFREC, SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S03"; /* MODULE IDENTIFICATION*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DFCAST.VMCAT001 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG09S03

// close 'c1' dfcast.vmcat001
Function FG09S04()
   /* ------------------------------------------------------------*/
   /* close dfcast.vmcat001 table.*/
   /* ------------------------------------------------------------*/
  FFFREC.FFFFUNCD = "C1";
  ;
  try
    call "IO3700" (FFFREC, SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
    return;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "S04"; /* MODULE IDENTIFICATION*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C1 DFCAST.VMCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG09S04

// get actual dmnd qtys
Function FG09S05()
  ;
   /* ------------------------------------------------------------*/
   /* obtain historical actual dmnd quantities.*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFBEGMO = FFZREC.FFZINDMO[FG09WIDX];
  FFFREC.FFFENDMO = FFZREC.FFZINDMO[FG09WIDX];
  ;
  FG09S-051(); /* get future demand*/
  ;
  FG09W00.FG09WTFD = FG09W00.FG09WTFD + FG09W00.FG09WUFD;
  ;
   /* --------------------------------------------------*/
   /* select sum on dfhist.vfhcat01 table demand qty*/
   /* --------------------------------------------------*/
  ;
  FFFREC.FFFBEGMO = FG09W00.FG09W-BEG; /* Restore begin month*/
  FFFREC.FFFENDMO = FG09W00.FG09W-END; /* Restore end month*/
  ;
  FH3REC.YSMXOT = "PR"; /* sum code*/
  ;
  XSFFS50();
  ;
  FG09W00.FG09WUDM = FH3REC.FH1PAQTY + FH3REC.FH1ALQTY +                    FH3REC.FH2SHP + FH3REC.FH3CNCL +                    FG09W00.FG09WUFD;
  FG09W00.FG09WTDM = FG09W00.FG09WTDM + FG09W00.FG09WUDM;
  ;
  ;
end // end FG09S05

// select 's' dfcast.vmcat001 row
Function FG09S06()
  ;
   /* ------------------------------------------------------------*/
   /* select dfcast.vmcat001*/
   /* ------------------------------------------------------------*/
  ;
  set FF7REC empty; /* Clear row storage area*/
  ;
  FF7REC.FF4FCTMO = FFZREC.FFZINDMO[FG09WIDX]; /* fcst month*/
  FF7REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF7REC.XCTCD = "USA"; /* Foreign country code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* Product categroy code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  ;
   /* ------------------------------------------------------------*/
   /* select dfcast.vmcat001*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or zero total, return to the previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* selection not found*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indisgrpe that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S07"; /* Module identifisgrpion*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indisgrpe not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indisgrpe system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VMCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program applisgrpion*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG09S06

// verify modifiable fields
Function FG09S07()
   /* -----------------------------------------------------*/
   /* verify header modifiable fields*/
   /* -----------------------------------------------------*/
  ;
  FG09W00.FG09WIDX = FFZREC.FFZNUMMO;
  while (FG09W00.FG09WIDX >= 1)
    if (FG09M001.FG09MFRC[FG09WIDX] != FG09W01.FG09WFRC[FG09WIDX])
      set FG09M001.FG09MFRC[FG09WIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S07";
    end
    FG09W00.FG09WIDX = FG09W00.FG09WIDX - 1;
  end
  ;
  if (converseVar.eventKey not enter
   && converseVar.eventKey not pf14)
    if (FG09M001.XPCCD != FFWREC.XPCCD)
      set FG09M001.XPCCD cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S07";
    end
    ;
    if (FG09M001.YPGCD != FFWREC.YPGCD)
      set FG09M001.YPGCD cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S07";
    end
    ;
    FG09W00.FG09WWED = FFWREC.FFAENDMO;
    if (FG09M001.FG09MERG != FG09W00.FG09WEYM)
      set FG09M001.FG09MERG cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S07";
    end
    ;
    FG09W00.FG09WWBD = FFWREC.FFABEGMO;
    if (FG09M001.FG09MBRG != FG09W00.FG09WBYM)
      set FG09M001.FG09MBRG cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S07";
    end
  end
  ;
  ;
end // end FG09S07

// Verify the date range
Function FG09S08()
  ;
   /* ------------------------------------------------------------*/
   /* Buy month < begin month < season begin month + 36*/
   /* begin month <= end month < (begin month + 11) and*/
   /* season begin month + 36*/
   /* ------------------------------------------------------------*/
  ;
  FFZREC.FFZBEGRC = "0"; /* Beginning date return code*/
  FFZREC.FFZENDRC = "0"; /* Ending date return code*/
  ;
  FFZREC.FFZNUMMO = 0; /* Number of months in range*/
  move 0 to FFZREC.FFZINDMO[1] for all; /* Individual month in range*/
  ;
   /* ------------------------------------------------------------*/
   /* Indicate error if the date is zero.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFZREC.FFZBEGMO == 0 /* Beginning date missing*/
   || FFZREC.FFZENDMO == 0) /* or ending date missing*/
    ;
    if (FFZREC.FFZBEGMO == 0) /* Beginning date missing*/
      FFZREC.FFZBEGRC = "1"; /* Indicate no beginning date*/
    end
    ;
    if (FFZREC.FFZENDMO == 0) /* Ending date missing*/
      FFZREC.FFZENDRC = "1"; /* Indicate no ending date*/
    end
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Convert format of beginning month from YYMM to CCYYMM.*/
   /* ------------------------------------------------------------*/
  ;
  set TA2REC empty; /* clear row storage area*/
  ;
  TA2REC.TA2DTOPT = "GREGGREG"; /* option*/
  TA2REC.TA2GRTYP = "E"; /* type*/
  TA2REC.TA2GRGDD = 01; /* dd to be validated*/
  ;
  TA2REC.TA2GRGYM = FFZREC.FFZBYYMM; /* Beginning yymm to be validatd*/
  ;
  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/
  ;
   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA2REC.TA2RTNCD < 888)         /* and subroutine completed*/
    ;
    if (TA2REC.TA2RTNCD == 0) /* Normal return code*/
      ;
      FFZREC.FFZBEGMO = TA2REC.TA2GRCYM; /* Convert beginning month*/
    else
      FFZREC.FFZBEGRC = "2"; /* Indicate invalid date entered*/
      ;
    end
    ;
  else
    ;
    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
    ;
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
    FFWREC.XXXMODID = "S08"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/
    ;
    exit stack; /* exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Convert format of ending month from YYMM to CCYYMM.*/
   /* ------------------------------------------------------------*/
  ;
  TA2REC.TA2CENT = 0; /* Initialize century field*/
  TA2REC.TA2GRGYM = FFZREC.FFZEYYMM; /* Ending yymm to be validated*/
  ;
  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/
  ;
   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA2REC.TA2RTNCD < 888)         /* and subroutine completed*/
    ;
    if (TA2REC.TA2RTNCD == 0) /* Normal return code*/
      ;
      FFZREC.FFZENDMO = TA2REC.TA2GRCYM; /* Convert ending month*/
    else
      FFZREC.FFZENDRC = "2"; /* Indicate invalid date entered*/
      ;
    end
    ;
  else
    ;
    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;
    ;
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
    ;
    FFWREC.XXXMODID = "S08"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/
    ;
    exit stack; /* exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If an error was found, return to the calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFZREC.FFZBEGRC == "2" /* Invalid beginning date*/
   || FFZREC.FFZENDRC == "2") /* or invalid ending date*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Obtain the qualified range which will be used to verify*/
   /* the dates passed over.*/
   /* ------------------------------------------------------------*/
  ;
  FG09S12(); /* obtain future cut off date*/
  ;
  FFZREC.FFZWBEG = FF1REC.FF1FUTDT / 100 + FFZREC.FFZMONTH;
  ;
  if (FFZREC.FFZWBMM > 12) /* month field over 12*/
    ;
    FFZREC.FFZWBMM = FFZREC.FFZWBMM - 12;
    FFZREC.FFZWBYY = FFZREC.FFZWBYY + 1;
    ;
  end
  ;
  FFZREC.FFZWEND = FFZREC.FFZBEGMO + 11; /* Beginning plus 11 months*/
  ;
  if (FFZREC.FFZWEMM > 12) /* month field over 12*/
    ;
    FFZREC.FFZWEMM = FFZREC.FFZWEMM - 12;
    FFZREC.FFZWEYY = FFZREC.FFZWEYY + 1;
    ;
  end
  ;
  FFZREC.FFZWRNG = FF2REC.FF2SEASN[1]; /* initialize range field*/
  FFZREC.FFZWRYY = FFZREC.FFZWRYY + 3; /* begin year plus 3 years*/
  if (FFZREC.FFZWRMM == 1)
    FFZREC.FFZWRYY = FFZREC.FFZWRYY - 1;
   /* BEGIN TCS*/
    /* MOVE 12 TO FFZREC.FFZWRYY;*/
    FFZREC.FFZWRMM = 12;
   /* END TCS*/
  else
    FFZREC.FFZWRMM = FFZREC.FFZWRMM - 1; /* begin month minus 1 month*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate error if the date is out of allowable bounds.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0)
    ;
  else
    if (FFZREC.FFZBEGMO < FFZREC.FFZWBEG /* Less than valid starting mo.*/
     || FFZREC.FFZBEGMO > FFZREC.FFZWRNG) /* or Greater than valid rang*/
      ;
      FFZREC.FFZBEGRC = "3"; /* Indicate invalid date*/
      ;
    end
    ;
    if (FFZREC.FFZENDMO < FFZREC.FFZBEGMO /* less than beginning mo.*/
     || FFZREC.FFZENDMO > FFZREC.FFZWRNG) /* or greater than valid range*/
      ;
      FFZREC.FFZENDRC = "3"; /* Indicate invalid date*/
      ;
    end
  end
  ;
  if (FFZREC.FFZCHK12 == "N") /* Check 12 month limit*/
    ;
    return;
    ;
  else
    ;
    if (FFZREC.FFZENDMO > FFZREC.FFZWEND) /* Over 12 months*/
      FFZREC.FFZENDRC = "3"; /* Indicate invalid date*/
      return;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the array with the individual months in the range.*/
   /* ------------------------------------------------------------*/
  ;
  FFZREC.FFZWBEG = FFZREC.FFZBEGMO; /* Beginning month*/
  ;
  while (FFZREC.FFZWBEG <= FFZREC.FFZENDMO) /* Until end of range*/
    ;
    FFZREC.FFZNUMMO = FFZREC.FFZNUMMO + 1; /* Number of months*/
    ;
    FFZREC.FFZINDMO[FFZNUMMO] = FFZREC.FFZWBEG; /* Individual month*/
    ;
    FFZREC.FFZWBMM = FFZREC.FFZWBMM + 1; /* Increment month*/
    ;
    if (FFZREC.FFZWBMM > 12) /* Month greater than 12*/
      ;
      FFZREC.FFZWBMM = FFZREC.FFZWBMM - 12; /* Decrement month*/
      FFZREC.FFZWBYY = FFZREC.FFZWBYY + 1; /* Increment year*/
      ;
    end
    ;
  end
  ;
  ;
end // end FG09S08

// Obtain the season begin month
Function FG09S09()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vffxrf01 table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF2REC empty; /* Clear row storage area*/
  ;
  FF2REC.YSMXDV = "10";
  FF2REC.YPGCD = FG09M001.YPGCD;
  FF2REC.XPCCD = FG09M001.XPCCD;
  ;
   /* ------------------------------------------------------------*/
   /* select dfcast.vwltyp01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S09"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG09S09

// Obtain the future cutoff date
Function FG09S12()
   /* -------------------------------------------------------*/
   /* Obtain the future cut off date*/
   /* -------------------------------------------------------*/
  ;
  set FF1REC empty; /* Clear row storage area*/
  ;
  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
       /* Next sentence*/
      ;
    end
  else
    ;
    /* ------------------------------------------------------------*/
     /* indicate that a system error has occurred.*/
    /* ------------------------------------------------------------*/
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
    ;
    FFWREC.XXXMODID = "S12"; /* Module identification*/
    ;
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
      ;
      converseLib.validationFailed(47); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(1); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      ;
    end
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT DFCAST.VFFCTL01 ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
    TA1REC.TA1TBLKE = FF1REC.FF1GROUP; /* Table key*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    ;
    exit stack; /* exit to display map*/
    ;
  end
  ;
end // end FG09S12

//*** RECORD=FG09W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FG09W00 type basicRecord
  10 FG09WSWR FG09WSWR ; 
  10 FG09WUPD FG09WUPD ; 
  10 FG09WSWF FG09WSWF ; 
  10 FG09WNMO FG09WNMO ; 
  10 FG09WNM1 FG09WNM1 ; 
  10 FG09WNM2 FG09WNM2 ; 
  10 FG09WUFR FG09WUFR ; 
  10 FG09WUFD FG09WUFD ; 
  10 FG09WUDM FG09WUDM ; 
  10 FG09WIDX FG09WIDX ; 
  10 FG09WWDT FG09WWDT ; 
    15 * num(3) ; 
    15 FG09WWCC FG09WWCC ; 
    15 FG09WWYM FG09WWYM ; 
      20 FG09WWYY FG09WWYY ; 
      20 FG09WWMM FG09WWMM ; 
  10 FG09WWBD FG09WWBD ; 
    15 * num(3) ; 
    15 FG09WBCC FG09WBCC ; 
    15 FG09WBYM FG09WBYM ; 
      20 FG09WBYY FG09WBYY ; 
      20 FG09WBMM FG09WBMM ; 
  10 FG09WWED FG09WWED ; 
    15 * num(3) ; 
    15 FG09WECC FG09WECC ; 
    15 FG09WEYM FG09WEYM ; 
      20 FG09WEYY FG09WEYY ; 
      20 FG09WEMM FG09WEMM ; 
  10 FG09WCRD FG09WCRD ; 
  10 FG09WCD5 FG09WCD5 ; 
  10 FG09WTFD FG09WTFD ; 
  10 FG09WTDM FG09WTDM ; 
  10 FG09W-NUM-MO FG09W-NUM-MO ; 
  10 FG09W-BEG FG09W-BEG ; 
  10 FG09W-END FG09W-END ; 
  10 FG09W-FFSTY-CSR FG09W-FFSTY-CSR ; 
  10 FG09W-SWHDR-CSR FG09W-SWHDR-CSR ; 
  10 FG09W-STYGRP-VAR FG09W-STYGRP-VAR [12] ; 
  10 FG09W-CAT-VAR FG09W-CAT-VAR [12] ; 
  10 FG09WDMD FG09WDMD [12] ; 
  10 FG09WFLL FG09WFLL ; 
  10 SYBSTGNB SYBSTGNB ; 
end // end FG09W00

//*** RECORD=FG09W01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// ***********************
Record FG09W01 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 FG09WFUR FG09WFUR [4] ; 
  10 FG09WHBD FG09WHBD [4] ; 
    15 * num(5) ; 
    15 FG09WHBY FG09WHBY ; 
  10 FG09WHED FG09WHED [4] ; 
    15 * num(5) ; 
    15 FG09WHEY FG09WHEY ; 
  10 FG09WPBD FG09WPBD [3] ; 
    15 * num(5) ; 
    15 FG09WPBY FG09WPBY ; 
  10 FG09WPED FG09WPED [3] ; 
    15 * num(5) ; 
    15 FG09WPEY FG09WPEY ; 
  10 FG09WHDC FG09WHDC [12] ; 
    15 * num(5) ; 
    15 FG09WDHC FG09WDHC ; 
  10 FG09WFRC FG09WFRC [13] ; 
  10 FG09WHD1 FG09WHD1 [12] ; 
    15 * num(5) ; 
    15 FG09WDH1 FG09WDH1 ; 
  10 FG09WFR1 FG09WFR1 [13] ; 
  10 FG09WHD2 FG09WHD2 [12] ; 
    15 * num(5) ; 
    15 FG09WDH2 FG09WDH2 ; 
  10 FG09WFR2 FG09WFR2 [13] ; 
  10 FG09WHD3 FG09WHD3 [12] ; 
    15 * num(5) ; 
    15 FG09WDH3 FG09WDH3 ; 
  10 FG09WFR3 FG09WFR3 [13] ; 
  10 FG09WDIF FG09WDIF [12] ; 
end // end FG09W01

//*** RECORD=FG09W02 ****
// -----------------------------
// Program FF2950 parameters.
// -----------------------------
// ***********************
Record FG09W02 type basicRecord
  10 TARJCL TARJCL ; 
    15 FG09WPBM FG09WPBM ; 
    15 FG09WPEM FG09WPEM ; 
    15 FG09WPTG FG09WPTG ; 
    15 FG09WPCT FG09WPCT ; 
    15 FG09WPDT FG09WPDT ; 
    15 FG09WPTM FG09WPTM ; 
    15 FG09WPCTCHG FG09WPCTCHG [12] ; 
    15 * char(9) ; 
end // end FG09W02

// work begin date
DataItem FG09W-BEG num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

DataItem FG09W-CAT-VAR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work end date
DataItem FG09W-END num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

DataItem FG09W-FFSTY-CSR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Number of months in the range
DataItem FG09W-NUM-MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG09W-STYGRP-VAR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG09W-SWHDR-CSR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// begin century
DataItem FG09WBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range month
DataItem FG09WBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year and month
DataItem FG09WBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range year
DataItem FG09WBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date +5 month
DataItem FG09WCD5 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date
DataItem FG09WCRD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

DataItem FG09WDH1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG09WDH2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG09WDH3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG09WDHC num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG09WDIF bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG09WDMD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end century
DataItem FG09WECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range month
DataItem FG09WEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end year and month
DataItem FG09WEYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range year
DataItem FG09WEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG09WFLL bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical fut ratio 1 yr
DataItem FG09WFR1 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical fut ratio 2 yrs
DataItem FG09WFR2 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical fut ratio 3 yrs
DataItem FG09WFR3 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current future ratio
DataItem FG09WFRC bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// future ratio
DataItem FG09WFUR num(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// heading begin dates
DataItem FG09WHBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

DataItem FG09WHBY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical mthly hds 1 yrs
DataItem FG09WHD1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical mthly hds 2 yrs
DataItem FG09WHD2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical mthly hds 3 yrs
DataItem FG09WHD3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current mthly headings
DataItem FG09WHDC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// heading end dates
DataItem FG09WHED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

DataItem FG09WHEY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem FG09WIDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 1
DataItem FG09WNM1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 2
DataItem FG09WNM2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nbr of months loaded
DataItem FG09WNMO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history begin dates
DataItem FG09WPBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// Parm range beg month
DataItem FG09WPBM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG09WPBY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Parm category code
DataItem FG09WPCT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG09WPCTCHG decimal(4,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Parm updt date
DataItem FG09WPDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history end dates
DataItem FG09WPED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// Parm range end month
DataItem FG09WPEM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG09WPEY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Parm type group code
DataItem FG09WPTG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Parm updt hhmm
DataItem FG09WPTM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Format the map switch
DataItem FG09WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FG09WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Accum total demand
DataItem FG09WTDM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Accum total futures
DataItem FG09WTFD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total demand units
DataItem FG09WUDM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// future demand units
DataItem FG09WUFD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// future ratio
DataItem FG09WUFR bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// update switch
DataItem FG09WUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work begin date
DataItem FG09WWBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work century
DataItem FG09WWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date
DataItem FG09WWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work begin date
DataItem FG09WWED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work month
DataItem FG09WWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year and month
DataItem FG09WWYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FG09WWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

