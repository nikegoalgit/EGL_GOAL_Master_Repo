package fg0q;

import corpcom2.XPCREC;
import corpcom2.XX0XW01;
import corpcom3.XPFF001;
import corpcom4.XSFFS01;
import corpcom4.XSFFS10;
import corpcom4.XSFFS11;
import corpcom4.XSFFS59;
import corpcom4.XSNOWAY;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XPCTBL;
import corpx2.XPCCD;
import corpx2.XPCSDESC;
import ff.common.FF2REC;
import ff.common.FF6SLFCT;
import ff.common.FFCREC;
import ff.common.FFFREC;
import ff.common.FFGREC;
import ff.common.FFIREC;
import ff.common.FFJREC;
import ff.common.FFKREC;
import ff.common.FFSREC;
import ff.common.FFWREC;
import ff.common.FFXREC;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
//*** PROGRAM=FG0Q ****
// This program provides the user with the ability to view and
// change the monthly category forecast quantities.
// 
// The user can come to this screen either from the forecast by
// category screen (FG0H) by pressing the explode category key
// or from the long rang worksheet select screen. If it is from
// the forecast screen, the forecast quantities will be carried
// over and spread out based on the demand index. If it is from
// the worksheet select screen, the existing monthly forecast
// will be brought up. The user can change the quantities by
// typing over them, whenever the 'ENTER' is pressed, the
// worksheet will be updated.
// 
// The user can specify the number of month in the season and
// he has the flexibility to view 3 month, 4 month or 6 month
// season with varying subtotals. The user may use appropriate
// attention key to scroll left and right.
// 
// If the user is satisfied with the forecast quantities on the
// screen, he can make these sales forecasts as master by
// pressing PF15. The system will then update the master sales
// forecast in the database.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          10/02/89  JJUCH   New application.
// FF1006   08/03/90  JJUCH   Added a message to remind users
//                            to save fcsts as master before
//                            they leave this application.
// *********************
Program FG0Q type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF2REC FF2REC; // record
  FFCREC FFCREC; // record
  FFFREC FFFREC; // record
  FFGREC FFGREC; // record
  FFIREC FFIREC; // record
  FFJREC FFJREC; // record
  FFKREC FFKREC; // record
  FFSREC FFSREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FG0QW00 FG0QW00; // record
  FG0QW01 FG0QW01; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPCTBL; // table
  use FG0QM.FG0QM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FG0QM001 initial; /* M001 input/output*/
    set FG0QW00 empty; /* Working storage*/
    set FG0QW01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    FG0QW00.FG0QWSWF = "Y"; /* Format the map switch*/
    FG0QW00.FG0QWSWR = "Y"; /* Request for data switch*/
    FG0QW00.FG0QWSW1 = "Y"; /* First time through switch*/
    FG0QW00.FG0QWSWL = "N"; /* Last row switch*/
    FG0QW00.FG0QWMST = "N"; /* Save master fcst switch*/
    FG0QW00.FG0QWERR = "N"; /* Error occured switch*/
    ;
    XPCREC.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    ;
    FG0QW00.FG0QWLEF = 1; /* Scrolling left index*/
    ;
    FG0QM001.FG0QMMOS = 6; /* Default months in season*/
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0Q000; /* Converse the main process*/
    ;
    FG0Q000: FG0Q000();
     /* ------------------------------------------------------------*/
      /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0Q001; /* Converse the main process*/
    ;
    FG0Q001: FG0Q001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0Q001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FG0Q

// Check the FROM application
Function FG0Q000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAFROMAP == "FG0B" /* From allowed application*/
   || COMMAREA.CAFROMAP == "FG0H" 
   || COMMAREA.CAFROMAP == "FG0Q") /* or same application*/
    ;
     /* NEXT SENTENCE*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/
    ;
    XSNOWAY(); /* Invalid transfer was attempted*/
    ;
  end
  ;
  ;
end // end FG0Q000

// List the rows in the table
Function FG0Q001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FG0Q100(); /* Obtain the data to display*/
  ;
  FG0Q200(); /* Format and display the map*/
  ;
  FG0Q300(); /* Check attention identifier*/
  ;
  FG0Q400(); /* Reset fields to normal intensity*/
  ;
  FG0Q500(); /* Verify the entered data*/
  ;
  FG0Q600(); /* Process valid input request*/
  ;
  ;
end // end FG0Q001

// Obtain the data to display
Function FG0Q100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0QW00.FG0QWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  FG0Q101(); /* Build up temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0QW00.TA5TSQIX == 0) /* No pages formatted*/
    ;
    FFWREC.XXXMODID = "100"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/
    ;
    return; /* Exit to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO == 0) /* No message to display*/
    FG0QW00.XXXTSPAG = 1; /* Desired page number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  FG0QW00.FG0QWSWR = "N"; /* Request for data switch*/
  ;
  ;
end // end FG0Q100

// Build up temporary storage
Function FG0Q101()
   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/
  ;
  FG0QW00.XXXTSLEN = 3112; /* Temporary storage page length*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  ;
  FG0Q110(); /* Purge any temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Save the search key informations in the map*/
   /* ------------------------------------------------------------*/
  ;
  FG0QW01.FG0QWBMO = FFWREC.FFABEGMO; /* Beginning date*/
  FG0QW01.FG0QWEMO = FFWREC.FFAENDMO; /* Ending date*/
  FG0QW00.FG0QMMOS = FG0QM001.FG0QMMOS; /* Months in the season*/
  ;
   /* ------------------------------------------------------------*/
   /* Load the month heading*/
   /* ------------------------------------------------------------*/
  ;
  FG0Q115();
  ;
   /* ------------------------------------------------------------*/
   /* Obtain the type group target from DFCAST.VWLTYP01 table*/
   /* ------------------------------------------------------------*/
  ;
  FG0Q120();
  ;
   /* ------------------------------------------------------------*/
   /* Obtain a list of category codes from DFCAST.VFFXRF01 table.*/
   /* Then, use each category to retrieve the existing monthly*/
   /* category forecasts from DFCAST.VWCMTH01 table.*/
   /* ------------------------------------------------------------*/
  ;
  FG0Q130(); /* Select and open the cursor for VFFXRF01*/
  ;
  FG0QW00.FG0QWCR2 = "N"; /* Initialize end of cursor switch*/
  FG0QW00.FG0QWIXM = 1; /* Initialize the map index*/
  ;
  while (FG0QW00.FG0QWCR2 == "N") /* Until end of cursor*/
    ;
    FG0Q140(); /* Fetch the next row in VFFXRF01*/
    ;
    if (FG0QW00.FG0QWCR2 == "N") /* Record found*/
      ;
      FG0Q141(); /* Obtain the category description*/
      ;
      FG0Q142();
                                   /* Obtain the demand index from VRCAT001*/
      ;
      FG0Q143(); /* Open & select cursor for VWCMTH01*/
      ;
      FG0QW00.FG0QWCR1 = "N"; /* Initialize end of cursor switch*/
      ;
      while (FG0QW00.FG0QWCR1 == "N") /* Until end of cursor*/
        ;
        FG0Q144(); /* Fetch next row in VWCMTH01*/
        ;
      end
      ;
      FG0Q145(); /* Close the cursor for VWCMTH01*/
      ;
      FG0QW00.FG0QWIXM = FG0QW00.FG0QWIXM + 1;
      ;
      if (FG0QW00.FG0QWIXM > 14)
        ;
        FG0Q170(); /* Calculate the grand totals*/
        FG0Q150(); /* Add page to temporary storage*/
        ;
      end
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Close the cursor for DFCAST.VFFXRF01 table.*/
   /* ------------------------------------------------------------*/
  ;
  FG0Q160();
  ;
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0QW00.FG0QWIXM > 1) /* Page was formatted*/
    FG0Q170(); /* Calculate the grand totals*/
    FG0Q150(); /* Add page to temporary storage*/
  end
  ;
end // end FG0Q101

// Purge temporary storage
Function FG0Q110()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (TA5REC.TA5FNCCD == "P") /* Last function was purge*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FG0QW01 empty; /* M001 display storage*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FG0QW00.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FG0QW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "110"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0Q110

// Load the month heading
Function FG0Q115()
  ;
  FG0QW00.FG0QWEND = 0; /* Initialize end of range index*/
  FG0QW00.FG0QWIXM = 1; /* Initialize the map index*/
  FG0QW00.FG0QWHDG[1] = FG0QW01.FG0QWBMO; /* First month*/
  ;
  ;
  while (FG0QW00.FG0QWIXM <= 12 /* Until reach 12 months*/
   && FG0QW00.FG0QWHDG[FG0QWIXM] < FG0QW01.FG0QWEMO) /* or end of range*/
    ;
    FG0QW00.FG0QWIXM = FG0QW00.FG0QWIXM + 1; /* Increment the heading index*/
    ;
    FG0QW00.FG0QWDAT = FG0QW01.FG0QWBMO + FG0QW00.FG0QWIXM - 1;
    ;
    if (FG0QW00.FG0QWDMM > 12)
      FG0QW00.FG0QWDMM = FG0QW00.FG0QWDMM - 12;
      ;
      FG0QW00.FG0QWDYY = FG0QW00.FG0QWDYY + 1; /* Next year*/
      if (FG0QW00.FG0QWDYY == 0) /* Into a new century*/
        ;
        FG0QW00.FG0QWDCC = FG0QW00.FG0QWDCC + 1; /* Next century*/
        ;
      end
      ;
    end
    ;
    FG0QW00.FG0QWHDG[FG0QWIXM] = FG0QW00.FG0QWDAT;
    FG0QW00.FG0QWEND = FG0QW00.FG0QWIXM; /* Set end of rang index*/
    ;
  end
  ;
end // end FG0Q115

// Obtain target from VWLTYP01
Function FG0Q120()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FFIREC empty; /* Clear up the storage row*/
  ;
  FFIREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFIREC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FFIREC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  ;
  try
    call "IO3910" ("S ", SQLCA, FFIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FFXREC.FFXNUMB = FFIREC.FFEFCTGT;
      XSFFS10(); /* Convert from NUM to CHAR*/
      FG0QW01.FG0QWTGT = FFXREC.FFXCHAR; /* Save type group target*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "120"; /* MODULE IDENTIFICATION*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFIREC.FFIKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0Q120

// Sel & open cursor for VFFXRF01
Function FG0Q130()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF2REC empty; /* Clear row storage area*/
  ;
  FF2REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF2REC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  ;
  try
    call "IO4000" ("S2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful , return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "130"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0Q130

// Fetch next row in VFFXRF01
Function FG0Q140()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("N2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FG0QW01.XPCCD[FG0QWIXM] = FF2REC.XPCCD; /* Save category code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      FG0QW00.FG0QWCR2 = "Y"; /* End of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "140"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0Q140

// Obtain category short desc
Function FG0Q141()
  XPCREC.XPCCD = FG0QW01.XPCCD[FG0QWIXM]; /* Category code*/
  FG0QW01.XPCSDESC[FG0QWIXM] = "************";
  ;
  if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
    FG0QW01.XPCSDESC[FG0QWIXM] = XPCTBL.XPCSDESC[sysVar.arrayIndex];
  end
  ;
end // end FG0Q141

// Obtain dmd index from VRCAT001
Function FG0Q142()
   /* ------------------------------------------------------------*/
   /* Select the row to obtain the demand indicator.*/
   /* ------------------------------------------------------------*/
  ;
  set FFCREC empty; /* Clear up the storage row*/
  ;
  FFCREC.FFABEGMO = FFWREC.FFABEGMO; /* Beginning month*/
  FFCREC.FFAENDMO = FFWREC.FFAENDMO; /* Ending month*/
  FFCREC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FFCREC.XPCCD = FG0QW01.XPCCD[FG0QWIXM]; /* Category code*/
  ;
  try
    call "IO3760" ("S ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FG0QW01.FG0QMIND[FG0QWIXM] = FFCREC.FFCDMIND; /* Save dmd ind*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      FG0QW01.FG0QMIND[FG0QWIXM] = " "; /* Save dmd ind*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "142"; /* MODULE IDENTIFICATION*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0Q142

// Sel & open cursor for VWCMTH01
Function FG0Q143()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FFKREC empty; /* Clear row storage area*/
  ;
  FFKREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFKREC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FFKREC.XPCCD = FG0QW01.XPCCD[FG0QWIXM]; /* Category code*/
  ;
  set FFFREC empty; /* Clear row storage area*/
  ;
  FFFREC.FFFBEGMO = FFWREC.FFABEGMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFWREC.FFAENDMO; /* Ending month*/
  FFFREC.FFFFUNCD = "S1"; /* Function code*/
  ;
  try
    call "IO3830" (FFFREC, SQLCA, FFKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "143"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFKREC.FFKKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0Q143

// Fetch next row in VWCMTH01
Function FG0Q144()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3830" ("N1", SQLCA, FFKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      if (FFKREC.FF4FCTMO in FG0QW00.FG0QWHDG)
        ;
        FG0QWIXF = FG0QWIXM - 1; /* Find the row it is at*/
        FG0QWIXF = FG0QWIXF * 12 + sysVar.arrayIndex; /* find the position it is at*/
        FG0QW01.FG0QWFCS[FG0QWIXF] = FFKREC.FF6SLFCT; /* Save the fcst qty*/
        FG0QW01.FG0QWCNT[FG0QWIXF] = FFKREC.ZZZCHGCT; /* Save change count*/
        ;
        FFXREC.FFXNUMB = FFKREC.FF6SLFCT;
        XSFFS10(); /* Convert the value from NUM to CHAR*/
        FG0QW01.FG0QMFCS[FG0QWIXF] = FFXREC.FFXCHAR;
        ;
      end
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      FG0QW00.FG0QWCR1 = "Y"; /* End of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "144"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFKREC.FFKKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0Q144

// Close cursor for VWCMTH01
Function FG0Q145()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3830" ("C1", SQLCA, FFKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "145"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWCMTH01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0Q145

// Add page to temporary storage
Function FG0Q150()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FG0QW01.XXXTSLEN = FG0QW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  ;
  if (FG0QW00.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P") /* and last function purge*/
    ;
    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/
    ;
  end
  ;
  try
    call "TA0050" (FG0QW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FG0QW01 empty; /* M001 display storage*/
    move "    0" to FG0QW01.FG0QMFCS[1] for all; /* Initialize the forecast qty field*/
    ;
    /* ---------------------------------------------------------*/
     /* Save the search information in map display storage queue*/
    /* ---------------------------------------------------------*/
    FG0QW01.FG0QWBMO = FFWREC.FFABEGMO; /* Beginning month*/
    FG0QW01.FG0QWEMO = FFWREC.FFAENDMO; /* Ending month*/
    FG0QW00.FG0QMMOS = FG0QM001.FG0QMMOS; /* Months in season*/
    ;
    FG0QW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    FG0QW00.FG0QWIXM = 1; /* Display line number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "150"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0Q150

// Close cursor for VFFXRF01
Function FG0Q160()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("C2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "160"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0Q160

// Calculate the grand total
Function FG0Q170()
  ;
   /* -------------------------------------------------------*/
   /* Calculate the total forecast for each month.*/
   /* -------------------------------------------------------*/
  ;
  FG0QW00.FG0QWIXM = 1; /* Initialize the map index*/
  ;
  while (FG0QW00.FG0QWIXM <= 14 /* Until end of page*/
   && FG0QW01.XPCSDESC[FG0QWIXM] > "            ")
    ;
    FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXM - 1;
    FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXF * 12 + 1;
    FG0QW00.FG0QWIXE = FG0QW00.FG0QWIXF + FG0QW00.FG0QWEND - 1;
    ;
    FG0QW00.FG0QWIXW = 1; /* Initialize grand total fld index*/
    ;
    while (FG0QW00.FG0QWIXF <= FG0QW00.FG0QWIXE)
      ;
      FG0QW00.FG0QWTOT = FG0QW00.FG0QWGDT[FG0QWIXW]; /* Total qty*/
      FG0QW00.FG0QWFCS = FG0QW01.FG0QWFCS[FG0QWIXF]; /* Mo. fcst qty*/
      FG0QW00.FG0QWGDT[FG0QWIXW] = FG0QW00.FG0QWTOT + FG0QW00.FG0QWFCS;
      FG0QW00.FG0QWGQT = FG0QW00.FG0QWGQT + FG0QW00.FG0QWFCS;
      ;
      FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXF + 1;
      FG0QW00.FG0QWIXW = FG0QW00.FG0QWIXW + 1;
      ;
    end
    ;
    FG0QW00.FG0QWIXM = FG0QW00.FG0QWIXM + 1;
    ;
  end
  ;
end // end FG0Q170

// Format and converse the map
Function FG0Q200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    ;
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0QW00.FG0QWSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (FG0QW00.FG0QWSWF == "Y") /* Map must be formatted*/
      FG0Q210(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FG0QM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FG0QM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG0QM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    ;
    FG0QM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/
    ;
    set FG0QM001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FG0QM001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/
  ;
  COMMAREA.CATOAP = FG0QM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG0QM001.CAITEM; /* Application data*/
  ;
  ;
end // end FG0Q200

// Format the display data
Function FG0Q210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set FG0QM001 initial; /* M001 input/output area*/
  ;
  FG0QW00.FG0QWSWF = "N"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0QW00.TA5TSQIX > 0) /* Pages were formatted*/
    ;
    if (FG0QW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      ;
      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/
      ;
      if (FG0QW00.FG0QWSWU == "Y") /* Current page was changed*/
        ;
        FG0QS03(); /* Update temporary storage page*/
        ;
        FG0QW00.FG0QWSWU = "N"; /* Storage update switch*/
        ;
      end
      ;
      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      ;
      if (FG0QW00.XXXTSPAG > FG0QW00.TA5TSQIX) /* Desired greater highest*/
        FG0QW00.XXXTSPAG = FG0QW00.TA5TSQIX; /* Default to highest*/
      end
      ;
      TA5REC.TA5TSQIX = FG0QW00.XXXTSPAG; /* Page number*/
      ;
      FG0QS04(); /* Obtain temporary storage page*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    ;
    set FG0QM001.XXXLITPG skip; /* "PAGE" literal*/
    FG0QM001.XXXTSPAG = FG0QW00.XXXTSPAG; /* Current page*/
    set FG0QM001.XXXLITOF skip; /* "OF" literal*/
    FG0QM001.TA5TSQIX = FG0QW00.TA5TSQIX; /* Highest page*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FG0QM001.FG0QMBMO = FG0QW01.FG0QMBMO; /* Beginning month*/
  FG0QM001.FG0QMEMO = FG0QW01.FG0QMEMO; /* Ending month*/
  FG0QM001.FG0QWTGT = FG0QW01.FG0QWTGT; /* Type group target*/
  FG0QM001.FG0QMMOS = FG0QW00.FG0QMMOS; /* Months in season*/
  FG0QM001.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FG0QM001.XPLABRV = FFWREC.XPLABRV; /* Product line abbreviation*/
  FG0QM001.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FG0QM001.YPGABRV = FFWREC.YPGABRV; /* Type group abbreviation*/
  FG0QM001.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FG0QM001.YSMSMDSC = FFWREC.YSMSMDSC; /* Division group desc*/
  ;
   /* ------------------------------------------------------*/
   /* Move the heading*/
   /* ------------------------------------------------------*/
  ;
  FG0QW00.FG0QWIXF = 1; /* Initialize the heading index*/
  FG0QW00.FG0QWIXM = FG0QW00.FG0QWLEF; /* Initialize the map index*/
  ;
  FG0QW00.FG0QWRIG = FG0QW00.FG0QWLEF + FG0QW00.FG0QMMOS - 1;
  ;
  while (FG0QW00.FG0QWIXM <= FG0QW00.FG0QWRIG
   /* Until end of page (right end)*/
   && FG0QW00.FG0QWIXM <= FG0QW00.FG0QWEND) /* or end of range*/
    ;
    ;
    FG0QM001.FG0QMHDG[FG0QWIXF] = FG0QW00.FG0QWHYM[FG0QWIXM];
    set FG0QM001.FG0QMHDG[FG0QWIXF] skip;
    ;
    FG0QW00.FG0QWIXM = FG0QW00.FG0QWIXM + 1; /* Increment the heading index*/
    FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXF + 1; /* Increment the heading index*/
    ;
  end
  ;
  FG0Q211(); /* Calculate the total and subtotal*/
  ;
   /* ------------------------------------------------------*/
   /* Move detail lines*/
   /* ------------------------------------------------------*/
  ;
  FG0QW00.FG0QWIXM = 1; /* Initialize the map index*/
  ;
  while (FG0QW00.FG0QWIXM <= 14
   && FG0QW01.XPCSDESC[FG0QWIXM] > " ")
    ;
    FG0QM001.XPCSDESC[FG0QWIXM] = FG0QW01.XPCSDESC[FG0QWIXM];
    FG0QM001.FG0QMIND[FG0QWIXM] = FG0QW01.FG0QMIND[FG0QWIXM];
    ;
    /* -------------------------------------------------*/
     /* Move forecast quantity fields*/
    /* -------------------------------------------------*/
    ;
    FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXM - 1;
    FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXF * 6 + 1; /* Initial value for fcs fld*/
    FG0QW00.FG0QWIXN = FG0QW00.FG0QWIXF + FG0QW00.FG0QMMOS - 1;
    FG0QW00.FG0QWIXE = FG0QW00.FG0QWIXF + 6 - 1;
    ;
    FG0QW00.FG0QWIXW = FG0QW00.FG0QWIXM - 1;
    FG0QW00.FG0QWIXW = FG0QW00.FG0QWIXW * 12 + FG0QW00.FG0QWLEF; /* Disp indx*/
    FG0QW00.FG0QWIXT = FG0QW00.FG0QWIXM - 1;
    FG0QW00.FG0QWIXT = FG0QW00.FG0QWIXT * 12 + FG0QW00.FG0QWEND;
                                   /* Range indx*/
    ;
    while (FG0QW00.FG0QWIXF <= FG0QW00.FG0QWIXE
     /* Until end of page(right end)*/
     && FG0QW00.FG0QWIXW <= FG0QW00.FG0QWIXT) /* or end of range*/
      ;
      FG0QM001.FG0QMFCS[FG0QWIXF] = FG0QW01.FG0QMFCS[FG0QWIXW];
      ;
      if (FG0QW01.XPCCD[FG0QWIXM] != "  ") /* Not total line*/
        ;
        if (FG0QW00.FG0QWIXF <= FG0QW00.FG0QWIXN)
          ;
          set FG0QM001.FG0QMFCS[FG0QWIXF] normal; /* Unprotected*/
          ;
        else
          ;
          set FG0QM001.FG0QMFCS[FG0QWIXF] initialAttributes; /* Dark*/
          ;
        end
        ;
      else
        ;
        if (FG0QW00.FG0QWIXF <= FG0QW00.FG0QWIXN)
          ;
          set FG0QM001.FG0QMFCS[FG0QWIXF] skip; /* Visible*/
          ;
        else
          ;
          set FG0QM001.FG0QMFCS[FG0QWIXF] initialAttributes; /* Dark*/
          ;
        end
        ;
      end
      ;
      FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXF + 1;
      FG0QW00.FG0QWIXW = FG0QW00.FG0QWIXW + 1;
      ;
    end
    ;
    /* ----------------------------------------------------*/
     /* Move subtotal and grand total percent and quantity*/
    /* ----------------------------------------------------*/
    ;
    FG0QM001.FG0QMSUB[FG0QWIXM] = FG0QW01.FG0QMSUB[FG0QWIXM];
    FG0QM001.FG0QMGND[FG0QWIXM] = FG0QW01.FG0QMGND[FG0QWIXM];
    FG0QM001.FG0QWGPT[FG0QWIXM] = FG0QW01.FG0QWGPT[FG0QWIXM];
    ;
    FG0QW00.FG0QWIXM = FG0QW00.FG0QWIXM + 1;
    ;
  end
  ;
   /* ----------------------------------------------------*/
   /* Move the total line*/
   /* ----------------------------------------------------*/
  ;
  FG0QM001.XPCSDESC[FG0QWIXM] = "   TOTAL";
  ;
  FG0QW00.FG0QWSQT = 0; /* Initialize the total of subtotals*/
  ;
  FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXM - 1;
  FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXF * 6 + 1; /* Initial value for fcs fld*/
  FG0QW00.FG0QWIXE = FG0QW00.FG0QWIXF + FG0QW00.FG0QMMOS - 1;
  ;
  FG0QW00.FG0QWIXW = FG0QW00.FG0QWLEF;
                                   /* Initialize grand total index*/
  ;
  while (FG0QW00.FG0QWIXF <= FG0QW00.FG0QWIXE
   && FG0QW00.FG0QWIXW <= FG0QW00.FG0QWEND) /* or end of range*/
    ;
    FFXREC.FFXNUMB = FG0QW00.FG0QWGDT[FG0QWIXW];
    XSFFS10();
    FG0QM001.FG0QMFCS[FG0QWIXF] = FFXREC.FFXCHAR;
    ;
    set FG0QM001.FG0QMFCS[FG0QWIXF] skip;
    ;
    FG0QW00.FG0QWSQT = FG0QW00.FG0QWSQT + FG0QW00.FG0QWGDT[FG0QWIXW];
    ;
    FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXF + 1;
    FG0QW00.FG0QWIXW = FG0QW00.FG0QWIXW + 1;
    ;
  end
  ;
   /* -------------------------------------------------------*/
   /* Convert the subtotal from NUM to CHAR and move to*/
   /* the map.*/
   /* -------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FG0QW00.FG0QWSQT;
  XSFFS10(); /* Translate the subtotal value*/
  FG0QM001.FG0QMSUB[FG0QWIXM] = FFXREC.FFXCHAR;
  ;
   /* -------------------------------------------------------*/
   /* Convert the grand total from NUM to CHAR and move to*/
   /* the map.*/
   /* -------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FG0QW00.FG0QWGQT;
  XSFFS10(); /* Translate the total value*/
  FG0QM001.FG0QMGND[FG0QWIXM] = FFXREC.FFXCHAR;
  ;
   /* -------------------------------------------------------*/
   /* Calculate the percentage of subtotal*/
   /* -------------------------------------------------------*/
  ;
  if (FG0QW00.FG0QWSQT > 0)
    FG0QW00.FG0QWPCT = FG0QW00.FG0QWSQT / FG0QW00.FG0QWSQT;
    FG0QM001.FG0QWSPT[FG0QWIXM] = FG0QW00.FG0QWPCT * 100;
  end
  ;
   /* ---------------------------------------------------*/
   /* Calculate the subtotal percent for each category.*/
   /* ---------------------------------------------------*/
  ;
  FG0QW00.FG0QWIXM = 1; /* Initialize the map index*/
  ;
  while (FG0QW00.FG0QWIXM <= 14 /* Until end of page*/
   && FG0QW01.XPCSDESC[FG0QWIXM] > "            ") /* or end of cat list*/
    ;
    if (FG0QW00.FG0QWSQT > 0)
      FG0QW00.FG0QWPCT = FG0QW01.FG0QWSUB[FG0QWIXM] / FG0QW00.FG0QWSQT;
      FG0QW01.FG0QWSPT[FG0QWIXM] = FG0QW00.FG0QWPCT * 100;
      FG0QM001.FG0QWSPT[FG0QWIXM] = FG0QW01.FG0QWSPT[FG0QWIXM];
    end
    ;
    FG0QW00.FG0QWIXM = FG0QW00.FG0QWIXM + 1;
  end
  ;
end // end FG0Q210

// Calculate total & pct
Function FG0Q211()
  FG0QW00.FG0QWIXM = 1; /* Initialize the map index*/
  ;
  while (FG0QW00.FG0QWIXM <= 14 /* Until end of page*/
   && FG0QW01.XPCSDESC[FG0QWIXM] > "            ") /* or end of cat list*/
    ;
    /* ---------------------------------------------------*/
        /* Calculate the subtotal for each category.*/
    /* ---------------------------------------------------*/
    ;
    FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXM - 1;
    FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXF * 12 + FG0QW00.FG0QWLEF;
    FG0QW00.FG0QWIXE = FG0QW00.FG0QWIXF + FG0QW00.FG0QMMOS - 1;
    ;
    FG0QW00.FG0QWTSB = 0; /* Initialize the temp subtotal area*/
    ;
    while (FG0QW00.FG0QWIXF <= FG0QW00.FG0QWIXE) /* Until end the row*/
      ;
      FG0QW00.FG0QWTSB = FG0QW00.FG0QWTSB + FG0QW01.FG0QWFCS[FG0QWIXF];
      ;
      FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXF + 1;
      ;
    end
    ;
    FG0QW01.FG0QWSUB[FG0QWIXM] = FG0QW00.FG0QWTSB;
    ;
    FFXREC.FFXNUMB = FG0QW00.FG0QWTSB;
    XSFFS10();
                                   /* Convert the subtotal from NUM to CHAR*/
    FG0QW01.FG0QMSUB[FG0QWIXM] = FFXREC.FFXCHAR;
    ;
    /* ---------------------------------------------------*/
        /* Calculate the grand total for each category.*/
    /* ---------------------------------------------------*/
    ;
    FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXM - 1;
    FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXF * 12 + 1;
    FG0QW00.FG0QWIXE = FG0QW00.FG0QWIXF + 11;
    ;
    FG0QW00.FG0QWTGD = 0; /* Initialize the temp grand total area*/
    ;
    while (FG0QW00.FG0QWIXF <= FG0QW00.FG0QWIXE) /* Until end the row*/
      ;
      FG0QW00.FG0QWTGD = FG0QW00.FG0QWTGD + FG0QW01.FG0QWFCS[FG0QWIXF];
      ;
      FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXF + 1;
      ;
    end
    ;
    FG0QW01.FG0QWGND[FG0QWIXM] = FG0QW00.FG0QWTGD;
    FFXREC.FFXNUMB = FG0QW00.FG0QWTGD;
    XSFFS10();
                                   /* Convert the subtotal from NUM to CHAR*/
    FG0QW01.FG0QMGND[FG0QWIXM] = FFXREC.FFXCHAR;
    ;
    FG0QW00.FG0QWIXM = FG0QW00.FG0QWIXM + 1; /* Increment map index*/
    ;
  end
  ;
  FG0QW00.FG0QWIND = FG0QW00.FG0QWIXM; /* Save the position of last row*/
  ;
   /* -------------------------------------------------------*/
   /* Calculate the percentage of the grand total for each*/
   /* category.*/
   /* -------------------------------------------------------*/
  ;
  FG0QW00.FG0QWIXM = 1; /* Initialize the map index*/
  while (FG0QW00.FG0QWIXM < FG0QW00.FG0QWIND) /* Until end of page*/
    ;
    /* -------------------------------------------------------*/
     /* Calculate the percentage of the grand total for each*/
     /* category.*/
    /* -------------------------------------------------------*/
    ;
    FG0QW00.FG0QWTGD = FG0QW01.FG0QWGND[FG0QWIXM];
    ;
    if (FG0QW00.FG0QWGQT > 0)
      ;
      FG0QW00.FG0QWPCT = FG0QW00.FG0QWTGD / FG0QW00.FG0QWGQT;
      FG0QW01.FG0QWGPT[FG0QWIXM] = FG0QW00.FG0QWPCT * 100;
      ;
    end
    ;
    FG0QW00.FG0QWIXM = FG0QW00.FG0QWIXM + 1;
  end
  ;
end // end FG0Q211

// Check attention identifier
Function FG0Q300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (FG0QW00.FG0QWSWR == "Y") /* Request for data*/
      set FG0QW01 empty; /* M001 display storage*/
    end
    ;
    FG0QW00.FG0QWSWF = "Y"; /* Format the map switch*/
    FG0QW00.FG0QWSWR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0QM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      if (FG0QW00.FG0QWMST == "Y")
        ;
        FG0Q110(); /* Purge temporary storage*/
        ;
        XSFFS01(); /* Exit to another application*/
        ;
        set FG0QM001.CATOAP cursor, bold; /* Highlight*/
        ;
      else
        ;
        if (FG0QW00.FG0QWERR == "Y")
                                   /* Warning msg already shown once*/
          ;
          FG0QW00.FG0QWERR = "N"; /* Clear the error switch*/
          FG0Q110(); /* Purge temporary storage*/
          XSFFS01(); /* Exit to another application*/
          set FG0QM001.CATOAP cursor, bold; /* Highlight*/
          ;
        else
          ;
          COMMAREA.CATOAP = " "; /* TO application*/
          FFWREC.XXXMODID = "300"; /* Module identification*/
          converseLib.validationFailed(369); /* Indicate update master fcst*/
          FG0QW00.FG0QWERR = "Y"; /* Set the error switch*/
          ;
        end
        ;
      end
      ;
    else
      ;
      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      ;
      if (COMMAREA.CAFROMAP == "FG0B") /* From application*/
        COMMAREA.CACURRAP = "FG0B"; /* Return tO application*/
      else
        COMMAREA.CACURRAP = "FG0H"; /* Return to application*/
      end
      ;
      COMMAREA.CAITEM = "FG0QM001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      if (COMMAREA.CAFROMAP == "FG0B") /* From application*/
        COMMAREA.CATOAP = "FG0B"; /* TO application*/
      else
        COMMAREA.CATOAP = "FG0H"; /* TO application*/
      end
    end
    ;
    if (FG0QW00.FG0QWMST == "Y")
      ;
      FG0Q110(); /* Purge temporary storage*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
    else
      ;
      if (FG0QW00.FG0QWERR == "Y") /* Warning msg already shown once*/
        ;
        FG0QW00.FG0QWERR = "N"; /* Clear the error switch*/
        FG0Q110(); /* Purge temporary storage*/
        XSFFS01(); /* Exit to another application*/
        ;
      else
        ;
        COMMAREA.CATOAP = " "; /* TO application*/
        FFWREC.XXXMODID = "300"; /* Module identification*/
        converseLib.validationFailed(369); /* Indicate update master fcst*/
        FG0QW00.FG0QWERR = "Y"; /* Set the error switch*/
        ;
      end
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, reset the error message switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FG0QW00.FG0QWERR = "N";
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf15) /* and PF15 was not pressed*/
    ;
    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FG0Q300

// Reset highlighted fields
Function FG0Q400()
  ;
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FG0QM001.FG0QMMOS initialAttributes; /* Months in season*/
  set FG0QM001.CATOAP initialAttributes; /* Commarea TO application*/
  set FG0QM001.CAITEM initialAttributes; /* Commarea application data*/
  ;
  FG0QW00.FG0QWIXT = FG0QM001.FG0QMMOS + 1; /* Initial range index*/
  ;
  if (" " in FG0QM001.FG0QMHDG) /* Find the position of end of range*/
    FG0QW00.FG0QWIXT = sysVar.arrayIndex;
  end
  ;
  FG0QW00.FG0QWIXM = 1;
  ;
  while (FG0QW00.FG0QWIXM <= 14 /* Until end of page*/
   && FG0QM001.XPCSDESC[FG0QWIXM] > " ") /* or end of the list*/
    ;
    FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXM - 1;
    FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXF * 6 + 1;
    FG0QW00.FG0QWIXE = FG0QW00.FG0QWIXF + FG0QM001.FG0QMMOS - 1;
    ;
    FG0QW00.FG0QWIXW = FG0QW00.FG0QWIXM - 1;
    FG0QW00.FG0QWIXW = FG0QW00.FG0QWIXW * 6 + FG0QW00.FG0QWIXT;
    ;
    while (FG0QW00.FG0QWIXF <= FG0QW00.FG0QWIXE
     /* Until end of page(right end)*/
     && FG0QW00.FG0QWIXF < FG0QW00.FG0QWIXW) /* or end of range*/
      ;
      set FG0QM001.FG0QMFCS[FG0QWIXF] normal; /* Forecast quantity field*/
      ;
      FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXF + 1;
      ;
    end
    ;
    FG0QW00.FG0QWIXM = FG0QW00.FG0QWIXM + 1;
    ;
  end
end // end FG0Q400

// Verify the entered data
Function FG0Q500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0QM001.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FG0QM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7  /* Scroll back request*/
   || converseVar.eventKey is pf8  /* or scroll forward request*/
   || converseVar.eventKey is pf10 /* or scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/
    ;
    FG0Q510(); /* Verify scroll request*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* Verify data in the line.*/
    /* ------------------------------------------------------------*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      FG0Q520(); /* Verify forecast quantity*/
      ;
    else
      ;
      FG0Q530(); /* Verify data changed for PF15*/
      ;
    end
    ;
  end
   /* ------------------------------------------------------------*/
   /* Verify the months in the season.*/
   /* ------------------------------------------------------------*/
  ;
  FG0Q540();
  ;
   /* ------------------------------------------------------------*/
   /* Verify the passed keys.*/
   /* ------------------------------------------------------------*/
  ;
  FG0Q550();
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end FG0Q500

// Verify scroll request
Function FG0Q510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FG0QW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FG0QW00.XXXTSPAG >= FG0QW00.TA5TSQIX) /* and no more pages*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll left was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* Scroll left request*/
    ;
    FG0QW00.FG0QWIXW = FG0QW00.FG0QWLEF - FG0QM001.FG0QMMOS;
    ;
    if (FG0QW00.FG0QWIXW < 1) /* and no more months*/
      ;
      FFWREC.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(23); /* No more columns to display*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll right was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11) /* Scroll right request*/
    ;
    FG0QW00.FG0QWIXW = FG0QW00.FG0QWRIG + FG0QM001.FG0QMMOS;
    ;
    if (FG0QW00.FG0QWIXW > 12) /* and no more months*/
      ;
      FFWREC.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(24); /* No more columns to display*/
      ;
    else
      ;
      FG0QW00.FG0QWIXW = FG0QW00.FG0QWLEF + FG0QM001.FG0QMMOS;
      ;
      if (FG0QW00.FG0QWIXW > FG0QW00.FG0QWEND) /* and no more months*/
        ;
        FFWREC.XXXMODID = "510"; /* Module identification*/
        converseLib.validationFailed(24); /* No more columns to display*/
        ;
      end
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/
  ;
  FG0QW00.FG0QWIXM = 14; /* Initialize display index*/
  ;
  while (FG0QW00.FG0QWIXM >= 1) /* Until end of the page*/
    ;
    if (FG0QW01.XPCCD[FG0QWIXM] > " ")
      ;
      FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXM - 1;
      FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXF * 6 + FG0QM001.FG0QMMOS;
      ;
      FG0QW00.FG0QWIXE = FG0QW00.FG0QWIXM - 1;
      FG0QW00.FG0QWIXE = FG0QW00.FG0QWIXE * 6 + 1;
      ;
      FG0QW00.FG0QWIXW = FG0QW00.FG0QWIXM - 1;
      FG0QW00.FG0QWIXW = FG0QW00.FG0QWIXW * 12 + FG0QW00.FG0QWLEF;
      FG0QW00.FG0QWIXW = FG0QW00.FG0QWIXW + FG0QM001.FG0QMMOS - 1;
      ;
      while (FG0QW00.FG0QWIXF >= FG0QW00.FG0QWIXE)
        ;
        if (FG0QM001.FG0QMFCS[FG0QWIXF] != FG0QW01.FG0QMFCS[FG0QWIXW])
          ;
          FFWREC.XXXMODID = "510"; /* Module identification*/
          set FG0QM001.FG0QMFCS[FG0QWIXF] cursor, bold; /* Highlight*/
          converseLib.validationFailed(5); /* Modifications not allowed*/
          ;
        end
        ;
        FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXF - 1; /* Decrement map index*/
        FG0QW00.FG0QWIXW = FG0QW00.FG0QWIXW - 1; /* Decrement storage index*/
        ;
      end
    end
    ;
    FG0QW00.FG0QWIXM = FG0QW00.FG0QWIXM - 1; /* Decrement disply index*/
    ;
  end
  ;
  ;
  if (FG0QM001.FG0QMMOS != FG0QW00.FG0QMMOS) /* Months in season changed*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG0QM001.FG0QMMOS cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/
    ;
  end
  ;
  ;
end // end FG0Q510

// Verify data in the line
Function FG0Q520()
   /* ------------------------------------------------------------*/
   /* If any forecast has been changed, reset the master fcst*/
   /* saved switch. So when leaving the application, a warning*/
   /* message can be sent out.*/
   /* Convert the entered quantities from CHAR format to NUM*/
   /* format.*/
   /* Check the quantities to make sure they are not negative*/
   /* values.*/
   /* ------------------------------------------------------------*/
  ;
  FG0QW00.FG0QWIXM = 14; /* Initialize disp index*/
  ;
  while (FG0QW00.FG0QWIXM >= 1) /* Until end of the page*/
    ;
    if (FG0QW01.XPCCD[FG0QWIXM] > " ")
      ;
      FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXM - 1;
      FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXF * 6 + FG0QW00.FG0QMMOS;
      ;
      FG0QW00.FG0QWIXE = FG0QW00.FG0QWIXM - 1;
      FG0QW00.FG0QWIXE = FG0QW00.FG0QWIXE * 6 + 1;
      ;
      FG0QW00.FG0QWIXW = FG0QW00.FG0QWIXM - 1;
      FG0QW00.FG0QWIXW = FG0QW00.FG0QWIXW * 12 + FG0QW00.FG0QWLEF;
      FG0QW00.FG0QWIXW = FG0QW00.FG0QWIXW + FG0QW00.FG0QMMOS - 1;
      ;
      FG0QW00.FG0QWIXT = FG0QW00.FG0QWLEF + FG0QW00.FG0QMMOS - 1;
      ;
      while (FG0QW00.FG0QWIXF >= FG0QW00.FG0QWIXE)
        ;
        if (FG0QM001.FG0QMFCS[FG0QWIXF] > " "
         && FG0QM001.FG0QMFCS[FG0QWIXF] != FG0QW01.FG0QMFCS[FG0QWIXW])
          ;
          FG0QW00.FG0QWMST = "N";
                                   /* Reset master fcst saved switch*/
          ;
          FFXREC.FFXCHAR = FG0QM001.FG0QMFCS[FG0QWIXF];
          XSFFS11(); /* Translate value format*/
          ;
          if (FFXREC.FFXRTNCD == "0") /* Normal return*/
            ;
            if (FFXREC.FFXNUMB < 0) /* Negative value*/
              ;
              FFWREC.XXXMODID = "520"; /* Module identification*/
              converseLib.validationFailed(10); /* Invalid value entered*/
              set FG0QM001.FG0QMFCS[FG0QWIXF] cursor, bold; /* Highlighted*/
              ;
            else
              ;
              FG0Q521(); /* Update grand total areas*/
              ;
            end
            ;
          else
            ;
            FFWREC.XXXMODID = "520"; /* Module identification*/
            converseLib.validationFailed(10); /* Indicate invalid value entered*/
            set FG0QM001.FG0QMFCS[FG0QWIXF] cursor, bold; /* Highlighted*/
            ;
          end
          ;
        else
          ;
          if (FG0QM001.FG0QMFCS[FG0QWIXF] == " ")
            if (FG0QM001.FG0QMFCS[FG0QWIXF] != FG0QW01.FG0QMFCS[FG0QWIXW])
              ;
              FG0QW00.FG0QWMST = "N"; /* Reset mstr fcst upd switch*/
              ;
            end
            ;
            FFXREC.FFXNUMB = 0;
            ;
            FG0Q521(); /* Update grand totals & change flags*/
            ;
          end
        end
        ;
        FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXF - 1; /* Decrement map index*/
        FG0QW00.FG0QWIXW = FG0QW00.FG0QWIXW - 1; /* Decrement storage index*/
        FG0QW00.FG0QWIXT = FG0QW00.FG0QWIXT - 1;
                                   /* Decrement grand tot indx*/
        ;
      end
      ;
    end
    ;
    FG0QW00.FG0QWIXM = FG0QW00.FG0QWIXM - 1; /* decrement display index*/
    ;
  end
  ;
  ;
end // end FG0Q520

// Update grand tots & chng flags
Function FG0Q521()
  ;
  if (FG0QM001.FG0QMFCS[FG0QWIXF] != FG0QW01.FG0QMFCS[FG0QWIXW])
    ;
    /* -------------------------------------------------------*/
      /* Turn on the change flags.*/
    /* -------------------------------------------------------*/
    ;
    FG0QW01.FG0QWFCH[FG0QWIXW] = "Y"; /* Mo fcst changed*/
    FG0QW01.FG0QWCCH[FG0QWIXM] = "Y"; /* Cat tot changed*/
    FG0QW00.FG0QWGCH[FG0QWIXT] = "Y"; /* Monthly grand tot changed*/
    FFWREC.FFWMODSW = "Y"; /* Indicate data modified*/
    FG0QW00.FG0QWSWU = "Y"; /* Storage update switch*/
    ;
    /* -------------------------------------------------------*/
      /* Rounding the updated field*/
    /* -------------------------------------------------------*/
    ;
    XSFFS10();
    ;
    /* -------------------------------------------------------*/
      /* Update the grand total and monthly grand totals by*/
      /* subtracting the old forecast and adding the new one.*/
    /* -------------------------------------------------------*/
    ;
    FG0QW00.FG0QWFCS = FG0QW01.FG0QWFCS[FG0QWIXW];
    ;
    FG0QW00.FG0QWGQT = FG0QW00.FG0QWGQT - FG0QW00.FG0QWFCS;
    FG0QW00.FG0QWGQT = FG0QW00.FG0QWGQT + FFXREC.FFXNUMB;
    ;
    FG0QW00.FG0QWTOT = FG0QW01.FG0QWGND[FG0QWIXM];
    FG0QW01.FG0QWGND[FG0QWIXM] = FG0QW00.FG0QWTOT - FG0QW00.FG0QWFCS;
    FG0QW00.FG0QWTOT = FG0QW01.FG0QWGND[FG0QWIXM];
    FG0QW01.FG0QWGND[FG0QWIXM] = FG0QW00.FG0QWTOT + FFXREC.FFXNUMB;
    ;
    FG0QW00.FG0QWTOT = FG0QW00.FG0QWGDT[FG0QWIXT];
    FG0QW00.FG0QWGDT[FG0QWIXT] = FG0QW00.FG0QWTOT - FG0QW00.FG0QWFCS;
    FG0QW00.FG0QWTOT = FG0QW00.FG0QWGDT[FG0QWIXT];
    FG0QW00.FG0QWGDT[FG0QWIXT] = FG0QW00.FG0QWTOT + FFXREC.FFXNUMB;
    ;
    FG0QW01.FG0QWFCS[FG0QWIXW] = FFXREC.FFXNUMB;
    FG0QW01.FG0QMFCS[FG0QWIXW] = FFXREC.FFXCHAR;
    ;
  end
  ;
end // end FG0Q521

// Verify data change for PF15
Function FG0Q530()
  ;
  FG0QW00.FG0QWIXM = 14; /* Initialize disp index*/
  ;
  while (FG0QW00.FG0QWIXM >= 1) /* Until end of the page*/
    ;
    if (FG0QW01.XPCCD[FG0QWIXM] > " ")
      ;
      FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXM - 1;
      FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXF * 6 + FG0QM001.FG0QMMOS;
      ;
      FG0QW00.FG0QWIXE = FG0QW00.FG0QWIXM - 1;
      FG0QW00.FG0QWIXE = FG0QW00.FG0QWIXE * 6 + 1;
      ;
      FG0QW00.FG0QWIXW = FG0QW00.FG0QWIXM - 1;
      FG0QW00.FG0QWIXW = FG0QW00.FG0QWIXW * 12 + FG0QW00.FG0QWLEF;
      FG0QW00.FG0QWIXW = FG0QW00.FG0QWIXW + FG0QM001.FG0QMMOS - 1;
      ;
      while (FG0QW00.FG0QWIXF >= FG0QW00.FG0QWIXE)
        ;
        if (FG0QM001.FG0QMFCS[FG0QWIXF] != FG0QW01.FG0QMFCS[FG0QWIXW])
          ;
          FFWREC.XXXMODID = "530"; /* Module identification*/
          converseLib.validationFailed(247); /* Invalid value entered*/
          set FG0QM001.FG0QMFCS[FG0QWIXF] cursor, bold; /* Highlighted*/
          ;
          ;
        end
        ;
        FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXF - 1; /* Decrement map index*/
        FG0QW00.FG0QWIXW = FG0QW00.FG0QWIXW - 1; /* Decrement storage index*/
        ;
      end
      ;
    end
    ;
    FG0QW00.FG0QWIXM = FG0QW00.FG0QWIXM - 1; /* decrement display index*/
    ;
  end
  ;
  ;
end // end FG0Q530

// Verify months in the season
Function FG0Q540()
  ;
  if (FG0QM001.FG0QMMOS != 4 /* 4 months season*/
   && FG0QM001.FG0QMMOS != 6) /* 6 months season*/
    ;
    FFWREC.XXXMODID = "540"; /* Module identification*/
    set FG0QM001.FG0QMMOS cursor, bold; /* Highlighted*/
    converseLib.validationFailed(10); /* Indicate invalid value entered*/
    ;
  else
    ;
    if (FG0QM001.FG0QMMOS != FG0QW00.FG0QMMOS /* Moths in season changed*/
     && FG0QW00.FG0QWLEF != 1)                /* and not the leftmost page*/
      FFWREC.XXXMODID = "540"; /* Module identification*/
      set FG0QM001.FG0QMMOS cursor, bold; /* Highlighted*/
      converseLib.validationFailed(235); /* Indicate not at the very left*/
    end
    ;
  end
  ;
end // end FG0Q540

// Verify passe keys
Function FG0Q550()
  ;
  if (FFWREC.FFABEGMO == 0  /* Beginning month not passed*/
   || FFWREC.FFAENDMO == 0  /* Ending month not passed*/
   || FFWREC.YSMXDV == "  " /* Division group not passed*/
   || FFWREC.XPLCD == "  "  /* Product line not passed*/
   || FFWREC.YPGCD == "  ") /* Type group not passed*/
    ;
    FFWREC.XXXMODID = "550"; /* Module identification*/
    converseLib.validationFailed(01); /* Indicate system error*/
    ;
  end
  ;
end // end FG0Q550

// Process valid input request
Function FG0Q600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  ;
  FG0QW00.FG0QWSWF = "Y"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* if the key field changed, save it to display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0QM001.FG0QMMOS != FG0QW00.FG0QMMOS) /* Months in seasons changed*/
    ;
    FG0QW00.FG0QMMOS = FG0QM001.FG0QMMOS;
    FG0QW00.FG0QWRIG = FG0QW00.FG0QWLEF + FG0QW00.FG0QMMOS - 1;
                                   /* right index*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    FG0QW00.XXXTSPAG = FG0QW00.XXXTSPAG - 1; /* Decrement page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    FG0QW00.XXXTSPAG = FG0QW00.XXXTSPAG + 1; /* Increment page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll left was requested, increment the scrolling*/
   /* index and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* Scroll left requested*/
    ;
    FG0QW00.FG0QWRIG = FG0QW00.FG0QWRIG - FG0QW00.FG0QMMOS;
    FG0QW00.FG0QWLEF = FG0QW00.FG0QWLEF - FG0QW00.FG0QMMOS;
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll right was requested, increment the scrolling*/
   /* index and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11) /* Scroll right requested*/
    ;
    FG0QW00.FG0QWRIG = FG0QW00.FG0QWRIG + FG0QW00.FG0QMMOS;
    FG0QW00.FG0QWLEF = FG0QW00.FG0QWLEF + FG0QW00.FG0QMMOS;
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If ENTER was pressed and any forecast being updated, then*/
   /* update the worksheets( category, category by month, type*/
   /* group and line).*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    ;
    FG0Q610(); /* Process ENTER key*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if PF15 was pressed, save the forecasts into master tables.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf15) /* PF15 was pressed*/
    ;
    FG0Q620(); /* Process PF15*/
    ;
  end
  ;
end // end FG0Q600

// Process ENTER key
Function FG0Q610()
  ;
   /* -----------------------------------------------------*/
   /* Update worksheet by category by month table*/
   /* -----------------------------------------------------*/
  ;
  FG0QW00.FG0QWIXM = 1; /* Initialize map index*/
  ;
  while (FG0QW00.FG0QWIXM <= 14
   && FG0QW01.XPCCD[FG0QWIXM] > "  ")
    ;
    FG0QW00.FG0QWIXW = 1; /* Initialize month index*/
    ;
    FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXM - 1;
    FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXF * 12 + 1;
    FG0QW00.FG0QWIXE = FG0QW00.FG0QWIXF + 11;
    ;
    while (FG0QW00.FG0QWIXF <= FG0QW00.FG0QWIXE)
      ;
      if (FG0QW01.FG0QWFCH[FG0QWIXF] == "Y")
        ;
        FG0Q611(); /* Read DFCAST.VWCMTH01 table*/
        ;
        if (FFKREC.ZZZCHGCT != FG0QW01.FG0QWCNT[FG0QWIXF]) /* Recd was changed*/
          ;
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* Roll back all changes*/
          ;
          FG0QW00.FG0QWSWR = "Y"; /* Request for data switch*/
          FG0QW00.FG0QWSWU = "N"; /* Reset update switch*/
          FFWREC.XXXMODID = "610"; /* Module identification*/
          FFWREC.XXXMSGNO = 46; /* Indicate update by another*/
          ;
          exit stack; /* Exit to display map*/
          ;
        else
          ;
          FG0Q612(); /* Update DFCAST.VWCMTH01 table*/
          FG0QW01.FG0QWCNT[FG0QWIXF] = FFKREC.ZZZCHGCT;
                                   /* upd chg cnt*/
          ;
        end
        ;
      end
      ;
      FG0QW00.FG0QWIXF = FG0QW00.FG0QWIXF + 1; /* Increment fcst index*/
      FG0QW00.FG0QWIXW = FG0QW00.FG0QWIXW + 1; /* Increment month index*/
      ;
    end
    ;
    FG0QW00.FG0QWIXM = FG0QW00.FG0QWIXM + 1; /* Increment map index*/
    ;
  end
   /* -----------------------------------------------------*/
   /* Update worksheet by category table*/
   /* -----------------------------------------------------*/
  ;
  FG0QW00.FG0QWIXM = 1; /* Initialize fcst index*/
  ;
  while (FG0QW00.FG0QWIXM <= 14 /* Until end of the page*/
   && FG0QW01.XPCCD[FG0QWIXM] > "  ")
    ;
    if (FG0QW01.FG0QWCCH[FG0QWIXM] == "Y") /* Grand total for each cat chgd*/
      ;
      FG0Q613(); /* Read DFCAST.VWCAT001 table*/
      if (SQLCA.VAGen_SQLCODE == +100) /* Record not found*/
        FG0Q619(); /* Insert DFCAST.VWCAT001 table*/
      else
        FG0Q614(); /* Update DFCAST.VWCAT001 table*/
      end
      ;
    end
    ;
    FG0QW00.FG0QWIXM = FG0QW00.FG0QWIXM + 1; /* Increment fcst index*/
    ;
  end
  ;
   /* -----------------------------------------------------*/
   /* Update worksheet by type group and by line tables*/
   /* -----------------------------------------------------*/
  ;
  if ("Y" in FG0QW00.FG0QWGCH) /* Grand total changed*/
    ;
    FG0Q615(); /* Read DFCAST.VWTYP01 table*/
    FG0Q616(); /* Update DFCAST.VWTYP01 table*/
    ;
    FG0Q617(); /* Read DFCAST.VWLINE01 table*/
    FG0Q618(); /* Update DFCAST.VWLINE01 table*/
    ;
  end
  ;
   /* ----------------------------------------------------*/
   /* Commit all changes to protected resources.*/
   /* ----------------------------------------------------*/
  ;
  if ("Y" in FG0QW01.FG0QWFCH) /* Change has been made*/
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all changes*/
    ;
    FFWREC.XXXMODID = "610"; /* Module identification*/
    FFWREC.XXXMSGNO = 32;
                                   /* Indicate update complete successfully*/
    FFWREC.FFWMODSW = "N"; /* Indicat the data no need to be saved*/
    move "N" to FG0QW01.FG0QWFCH[1] for all; /* Reset the fcst chng flag*/
    move "N" to FG0QW01.FG0QWCCH[1] for all; /* Reset the cat tot chng flag*/
    FG0QW00.FG0QWGCH = "N"; /* Reset the grand total chng flag*/
    ;
  end
  ;
end // end FG0Q610

// Read DFCAST.VWCMTH01 table
Function FG0Q611()
  ;
  set FFKREC empty; /* Clear the storage row*/
  ;
  FFKREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFKREC.XPCCD = FG0QW01.XPCCD[FG0QWIXM]; /* Category code*/
  FFKREC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  ;
  FFKREC.FF4FCTMO = FG0QW00.FG0QWHDG[FG0QWIXW]; /* Forecasted month*/
  ;
  try
    call "IO3830" ("S ", SQLCA, FFKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "611"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "READ THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFKREC.FFKKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0Q611

// Update DFCAST.VWCMTH01 table
Function FG0Q612()
  ;
  FFKREC.FF6SLFCT = FG0QW01.FG0QWFCS[FG0QWIXF]; /* Sales forecast*/
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FFKREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFKREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  try
    call "IO3830" ("U ", SQLCA, FFKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      FG0QW00.FG0QWSWR = "Y"; /* Request for data switch*/
      FG0QW00.FG0QWSWU = "N"; /* Reset update switch*/
      ;
      FFWREC.XXXMODID = "612"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "612"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFKREC.FFKKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0Q612

// Read DFCAST.VWCAT001 table
Function FG0Q613()
  ;
  set FFJREC empty; /* Clear the storage row*/
  ;
  FFJREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFJREC.XPCCD = FG0QW01.XPCCD[FG0QWIXM]; /* Category code*/
  FFJREC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  ;
  try
    call "IO3840" ("S ", SQLCA, FFJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or record not found*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "613"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "READ THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFJREC.FFJKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0Q613

// Update DFCAST.VWCAT001 table
Function FG0Q614()
  ;
  FFJREC.FF6SLFCT = FG0QW01.FG0QWGND[FG0QWIXM]; /* Sales forecast*/
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FFJREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFJREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  try
    call "IO3840" ("U ", SQLCA, FFJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      FG0QW00.FG0QWSWR = "Y"; /* Request for data switch*/
      FG0QW00.FG0QWSWU = "N"; /* Reset update switch*/
      FFWREC.XXXMODID = "614"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "614"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFJREC.FFJKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0Q614

// Read DFCAST.VWTYP001 table
Function FG0Q615()
  ;
  set FFIREC empty; /* Clear the storage row*/
  ;
  FFIREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFIREC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FFIREC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  ;
  try
    call "IO3910" ("S ", SQLCA, FFIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FG0QW00.FF6SLFCT = FFIREC.FF6SLFCT; /* Save type grp sls fcst*/
      FG0QW00.FG0QWVAR = FG0QW00.FG0QWGQT - FG0QW00.FF6SLFCT;
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "615"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "READ THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWTYP001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFIREC.FFIKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0Q615

// Update DFCAST.VWTYP001 table
Function FG0Q616()
  ;
  FFIREC.FF6SLFCT = FG0QW00.FG0QWGQT; /* Sales forecast*/
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FFIREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFIREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  try
    call "IO3910" ("U ", SQLCA, FFIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      FG0QW00.FG0QWSWR = "Y"; /* Request for data switch*/
      FG0QW00.FG0QWSWU = "N"; /* Reset update switch*/
      FFWREC.XXXMODID = "616"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "616"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWTYP001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFIREC.FFIKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0Q616

// Read DFCAST.VWLINE01 table
Function FG0Q617()
   /* ------------------------------------------------------------*/
   /* Select the row to obtain forecast quantity by line.*/
   /* ------------------------------------------------------------*/
  ;
  set FFGREC empty; /* Clear up the storage row*/
  ;
  FFGREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFGREC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  ;
  try
    call "IO3890" ("S ", SQLCA, FFGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FFGREC.FF6SLFCT = FFGREC.FF6SLFCT + FG0QW00.FG0QWVAR; /* Apply variance*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "617"; /* MODULE IDENTIFICATION*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "READ THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFGREC.FFGKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0Q617

// Update DFCAST.VWLINE01 table
Function FG0Q618()
  ;
  FFGREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFGREC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FFGREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFGREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  try
    call "IO3890" ("U ", SQLCA, FFGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      FG0QW00.FG0QWSWR = "Y"; /* Request for data switch*/
      FG0QW00.FG0QWSWU = "N"; /* Reset update switch*/
      FFWREC.XXXMODID = "618"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "618"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFGREC.FFGKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0Q618

// Insert DFCAST.VWCAT001 table
Function FG0Q619()
  ;
  FFJREC.FF6SLFCT = FG0QW01.FG0QWGND[FG0QWIXM]; /* Sales forecast*/
  FFJREC.FFGSDIND = "S"; /* Sls/dmd indicator*/
  FFJREC.FFGYRIND = "1"; /* Year option*/
  FFJREC.FFECLRFL = "N"; /* Color flag*/
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FFJREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFJREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  FFJREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  FFJREC.ZZZSTM = XX0XW01.XX0XWTIM; /* Setup time*/
  ;
  try
    call "IO3840" ("A ", SQLCA, FFJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "619"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFJREC.FFJKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0Q619

// Process PF15 key
Function FG0Q620()
   /* ------------------------------------------------------------*/
   /* If the current page has been changed, update the page in*/
   /* storage before obtaining the next one to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0QW00.FG0QWSWU == "Y") /* Current page was changed*/
    ;
    FG0QS03(); /* Update temporary storage page*/
    ;
    FG0QW00.FG0QWSWU = "N"; /* Storage update switch*/
    ;
  end
  ;
  ;
  FG0QW00.FG0QWPAG = 1; /* Initialize current page count*/
  ;
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0QW00.TA5TSQIX > 0) /* Pages were formatted*/
    ;
    /* ------------------------------------------------------------*/
     /* If the desired page number is greater than the highest page*/
     /* in storage, default to the highest page number.*/
    /* ------------------------------------------------------------*/
    ;
    while (FG0QW00.FG0QWPAG <= FG0QW00.TA5TSQIX) /* Until end of TSQ*/
      ;
      TA5REC.TA5TSQIX = FG0QW00.FG0QWPAG; /* Page number*/
      ;
      FG0QS04(); /* Obtain temporary storage page*/
      ;
      FG0QW00.FG0QWIXM = 1; /* Initialize display index*/
      ;
      while (FG0QW00.FG0QWIXM <= 14
       && FG0QW01.XPCCD[FG0QWIXM] > " ")
        ;
        FG0QW00.FG0QWIXW = FG0QW00.FG0QWIXM + 1; /* Next row*/
        ;
        if (FG0QW00.FG0QWPAG == FG0QW00.TA5TSQIX) /* Last page*/
          ;
          if (FG0QW00.FG0QWIXM == 14 /* End of page*/
           || FG0QW01.XPCCD[FG0QWIXW] == " ") /* Last row*/
            ;
            FG0QW00.FG0QWSWL = "Y"; /* Turn on the last row sw*/
            ;
          end
          ;
        end
        ;
        FG0QS06(); /* Set the calling parameters*/
        ;
        XSFFS59(); /* Update master tables*/
        ;
        FG0QW00.FG0QWSW1 = "N"; /* Turn off the 1st time thru switch*/
        ;
        FG0QW00.FG0QWIXM = FG0QW00.FG0QWIXM + 1;
        ;
      end
      ;
      FG0QW00.FG0QWPAG = FG0QW00.FG0QWPAG + 1; /* Increment curr page count*/
      ;
    end
    ;
  end
  ;
  if (FFSREC.FFSRTNCD == "0") /* Normal return code*/
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all changes*/
    ;
    FFWREC.XXXMODID = "620"; /* Module identification*/
    FFWREC.XXXMSGNO = 26; /* Indicate wrksht fcst saved as master*/
    FG0QW00.FG0QWMST = "Y"; /* Turn on master fcst saved switch*/
    FG0QW00.FG0QWERR = "N"; /* Reset error occured switch*/
    ;
  end
  ;
  TA5REC.TA5TSQIX = FG0QW00.XXXTSPAG; /* Reset current page*/
  ;
  FG0QS04(); /* Obtain the current temporary storage page*/
  ;
end // end FG0Q620

// Update temporary storage page
Function FG0QS03()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (FG0QW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S03"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0QS03

// Read temporary storage page
Function FG0QS04()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  FG0QW01.XXXTSLEN = FG0QW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FG0QW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S04"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0QS04

// Set the calling parameters
Function FG0QS06()
  ;
  set FFSREC empty; /* Clear the storage row*/
  FFSREC.FFS1STFL = FG0QW00.FG0QWSW1; /* 1st time flag*/
  FFSREC.FFSLSTFL = FG0QW00.FG0QWSWL; /* Last row flag*/
  ;
  FFSREC.FFABEGMO = FFWREC.FFABEGMO; /* Beginning month of the range*/
  FFSREC.FFAENDMO = FFWREC.FFAENDMO; /* Ending month of the range*/
  FFSREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFSREC.FFSLEVEL = "CAT"; /* Level indicator*/
  FFSREC.XCTCD = "USA "; /* Country code*/
  FFSREC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FFSREC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FFSREC.XPCCD = FG0QW01.XPCCD[FG0QWIXM]; /* Category code*/
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FFSREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFSREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
end // end FG0QS06

//*** RECORD=FG0QW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FG0QW00 type basicRecord
  10 FG0QWIND FG0QWIND ; 
  10 FG0QWIXM FG0QWIXM ; 
  10 FG0QWIXW FG0QWIXW ; 
  10 FG0QWIXF FG0QWIXF ; 
  10 FG0QWIXE FG0QWIXE ; 
  10 FG0QWIXT FG0QWIXT ; 
  10 FG0QWIXN FG0QWIXN ; 
  10 FG0QWCR1 FG0QWCR1 ; 
  10 FG0QWCR2 FG0QWCR2 ; 
  10 FG0QWSWF FG0QWSWF ; 
  10 FG0QWSWR FG0QWSWR ; 
  10 FG0QWSWU FG0QWSWU ; 
  10 FG0QWSW1 FG0QWSW1 ; 
  10 FG0QWSWL FG0QWSWL ; 
  10 FG0QWMST FG0QWMST ; 
  10 FG0QWERR FG0QWERR ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 FG0QWPAG FG0QWPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FG0QWLEF FG0QWLEF ; 
  10 FG0QWRIG FG0QWRIG ; 
  10 FG0QWEND FG0QWEND ; 
  10 FG0QWSQT FG0QWSQT ; 
  10 FG0QWGQT FG0QWGQT ; 
  10 FG0QWTSB FG0QWTSB ; 
  10 FG0QWTGD FG0QWTGD ; 
  10 FG0QWTOT FG0QWTOT ; 
  10 FG0QWGDT FG0QWGDT [12] ; 
  10 FG0QWGCH FG0QWGCH [12] ; 
  10 FG0QWFCS FG0QWFCS ; 
  10 FG0QWDAT FG0QWDAT ; 
    15 FG0QWDCC FG0QWDCC ; 
    15 FG0QWDYM FG0QWDYM ; 
      20 FG0QWDYY FG0QWDYY ; 
      20 FG0QWDMM FG0QWDMM ; 
  10 FG0QWHDG FG0QWHDG [12] ; 
    15 FG0QWHCC FG0QWHCC ; 
    15 FG0QWHYM FG0QWHYM ; 
  10 FG0QMMOS FG0QMMOS ; 
  10 FF6SLFCT FF6SLFCT ; 
  10 FG0QWVAR FG0QWVAR ; 
  10 FG0QWPCT FG0QWPCT ; 
end // end FG0QW00

//*** RECORD=FG0QW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FG0QW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(3112) ; 
    10 FG0QWBMO FG0QWBMO ; 
      15 FG0QWBCC FG0QWBCC ; 
      15 FG0QMBMO FG0QMBMO ; 
    10 FG0QWEMO FG0QWEMO ; 
      15 FG0QWECC FG0QWECC ; 
      15 FG0QMEMO FG0QMEMO ; 
    10 FG0QWTGT FG0QWTGT ; 
    10 XPCCD XPCCD [15] ; 
    10 XPCSDESC XPCSDESC [15] ; 
    10 FG0QMIND FG0QMIND [15] ; 
    10 FG0QMFCS FG0QMFCS [180] ; 
    10 FG0QWFCH FG0QWFCH [180] ; 
    10 FG0QWFCS FG0QWFCS [180] ; 
    10 FG0QWCNT FG0QWCNT [180] ; 
    10 FG0QMSUB FG0QMSUB [14] ; 
    10 FG0QWSUB FG0QWSUB [14] ; 
    10 FG0QWSPT FG0QWSPT [14] ; 
    10 FG0QMGND FG0QMGND [14] ; 
    10 FG0QWGND FG0QWGND [14] ; 
    10 FG0QWCCH FG0QWCCH [14] ; 
    10 FG0QWGPT FG0QWGPT [14] ; 
end // end FG0QW01

// Beginning YYMM
DataItem FG0QMBMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Ending YYMM
DataItem FG0QMEMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Forecast enter & display fld
DataItem FG0QMFCS char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Grand total
DataItem FG0QMGND char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season index
DataItem FG0QMIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Month in the season
DataItem FG0QMMOS num(1)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Subtot
DataItem FG0QMSUB char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Century
DataItem FG0QWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning date of the range
DataItem FG0QWBMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Category total change flag
DataItem FG0QWCCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Change count
DataItem FG0QWCNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of cursor for VWCMTH01
DataItem FG0QWCR1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor for VFFXRF01
DataItem FG0QWCR2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Date work area
DataItem FG0QWDAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century work area
DataItem FG0QWDCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MM work area
DataItem FG0QWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YYMM work area
DataItem FG0QWDYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YY work area
DataItem FG0QWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century
DataItem FG0QWECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending date of the range
DataItem FG0QWEMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// End of range index
DataItem FG0QWEND num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Error occured switch
DataItem FG0QWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Forecast changed flag
DataItem FG0QWFCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fcst field work area
DataItem FG0QWFCS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Grand total change flag
DataItem FG0QWGCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Grand total for each month
DataItem FG0QWGDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Grand total
DataItem FG0QWGND int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Percent of grand total
DataItem FG0QWGPT decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total qty of grand total field
DataItem FG0QWGQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Heading century work area
DataItem FG0QWHCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Heading work area
DataItem FG0QWHDG num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Heading YYMM work area
DataItem FG0QWHYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Indicator of last disp row
DataItem FG0QWIND smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for forecast fields
DataItem FG0QWIXE smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for forecast fields
DataItem FG0QWIXF smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FG0QWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FG0QWIXN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for total fields
DataItem FG0QWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FG0QWIXW smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Scroll left index
DataItem FG0QWLEF num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Master fcst saved switch
DataItem FG0QWMST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Curr TSQ page for PF15 process
DataItem FG0QWPAG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Percent work area
DataItem FG0QWPCT decimal(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Scroll right index
DataItem FG0QWRIG num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Percent of subtotal
DataItem FG0QWSPT decimal(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total qty of subtot field
DataItem FG0QWSQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Subtot
DataItem FG0QWSUB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First time through switch
DataItem FG0QWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FG0QWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Last row switch
DataItem FG0QWSWL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FG0QWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem FG0QWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Grand total work area
DataItem FG0QWTGD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Type group target
DataItem FG0QWTGT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Total field work area
DataItem FG0QWTOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Subtotal work area
DataItem FG0QWTSB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Variance between old & new fcs
DataItem FG0QWVAR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

