package fg01;

import corpcom2.XPCREC;
import corpcom2.XPLREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPFF001;
import corpcom3.XPXPL01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS01;
import corpcom4.XSFFS20;
import corpcom4.XSFFS30;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx2.XPCCD;
import corpx2.XPCSDESC;
import corpy2.YPGTBL;
import ff.common.*;
import fh.common.FH3REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
//*** PROGRAM=FG01 ****
// This application allows the user to set the B-grade percent
// by category.  To save the user time, there is a 'default
// percent' field that they can use to enter a default.  The
// program will use this default value to fill any blank per-
// cent fields.  Also, the program will show the percents for
// one and two years ago.  If the range is far enough in the
// future, the historical data might not be in the past.  If
// this occurs, projected amounts will show rather than actual
// amounts.  In any case, the historical data is an 'average'
// of all the months in the range for each category.
// 
// The user must specify the 'RANGE', 'TYPE', 'LINE', and
// 'Division Group'.  He can save any updated information on
// the data base by pressing a PF key.
// 
// If the user doesn't know the code for a 'LINE' or 'TYPE',
// he may enter a '?' to ask for help.  The program will bring
// up a pop-up window to show a list of 'LINES' or 'TYPES', so
// that he can pick one from the window screen.
// 
// The user may scroll forward and backward to view all cate-
// gories by pressing PF7 and PF8.  He may exit to any allowed
// application, via FAST PATH or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          03/24/90  RHETRI  New application.
// FF1119   06/26/92  LDELUH  When add MCAT for makeups set
//                            fill rt & futr rto to 100.
// FF402    05/05/93  JJUCH   Default inline fill rate to 92
//                            when insert a new MCAT row.
// FF175    12/12/96  DSMITH  Changed date range fill character
//                            to '0'.
// *********************
Program FG01 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF7REC FF7REC; // record
  FFFREC FFFREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  FG01W00 FG01W00; // record
  FG01W01 FG01W01; // record
  FG01W02 FG01W02; // record
  FH3REC FH3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPLTBL; // table
  use XPCTBL; // table
  use YPGTBL; // table
  use FG01M.FG01M001, // form
  		FG01M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FG01M001 initial; /* M001 input/output*/
    set FG01W00 empty; /* Working storage*/
    set FG01W01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FG01W00.FG01WSWF = "Y"; /* Format the map switch*/
    FFWREC.XCTCD = "USA"; /* Default country code*/

     /* ------------------------------------------------------------*/
     /* If type is missing, default it to '01'.*/
     /* ------------------------------------------------------------*/

    if (FFWREC.YPGCD == " ") /* Type missing*/

      FFWREC.YPGCD = "01"; /* Default to '01'*/
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end

    end

     /* ------------------------------------------------------------*/
     /* If key exists, request data.*/
     /* ------------------------------------------------------------*/

    if (FFWREC.FFABEGMO > 0 /* Begin month exists*/
     && FFWREC.FFAENDMO > 0 /* End month exists*/
     && FFWREC.XPLCD > " ") /* Line exists*/

      FG01W00.FG01WSWR = "Y"; /* Request for data switch*/

    else

      FG01W00.FG01WSWR = "N"; /* Request for data switch*/

    end

     /* ------------------------------------------------------------*/
     /* Clear unused FFWREC fields.*/
     /* ------------------------------------------------------------*/

    FFWREC.XPCCD = " "; /* Clear cat code*/
    FFWREC.XPCABRV = " "; /* Clear cat name*/
    FFWREC.SYBSTGNB = " "; /* Clear style grp code*/
    FFWREC.SYBSTGNM = " "; /* Clear style grp name*/
    FFWREC.SY1STNBR = " "; /* Clear style code*/
    FFWREC.SY1SSTNM = " "; /* Clear style name*/
    FFWREC.YSMXDV = "10"; /* Default div grp code*/
    FFWREC.YSMSMDSC = "DOMSTC"; /* Default div grp name*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FG01001; /* Converse the main process*/


    FG01001: FG01001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FG01001; /* Converse the main process*/


  end // end main
end // end FG01

// Main process to display a map
Function FG01001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FG01100(); /* Obtain the data to display*/

  FG01200(); /* Format and display the map*/

  FG01300(); /* Check attention identifier*/

  FG01400(); /* Reset fields to normal intensity*/

  FG01500(); /* Verify the entered data*/

  FG01600(); /* Process valid input request*/


end // end FG01001

// Obtain the data to display
Function FG01100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FG01W00.FG01WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  FG01W00.XXXTSLEN = 419; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  FG01S01(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Determine cutoff month and historical dates.*/
   /* ------------------------------------------------------------*/

  FG01110();

   /* ------------------------------------------------------------*/
   /* Obtain categories for display.*/
   /* ------------------------------------------------------------*/

  FG01120(); /* Open FFXRF*/
  FG01130(); /* Fetch FFXRF*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  while (FG01W00.FG01WSWC == "N") /* Until end of cursor*/

    /* ------------------------------------------------------------*/
     /* Obtain B-grade amounts for historical data.*/
    /* ------------------------------------------------------------*/

    FG01140();

    /* ------------------------------------------------------------*/
     /* Obtain current B-grade amounts*/
    /* ------------------------------------------------------------*/

    FG01150(); /* Obtain MCAT*/

    /* ------------------------------------------------------------*/
     /* Save data in display storage.*/
    /* ------------------------------------------------------------*/

    FG01160(); /* Save data*/

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (FG01W00.FG01WIXM > 14) /* Page is full*/
      FG01170(); /* Add page to temporary storage*/
    end

    /* ------------------------------------------------------------*/
     /* Fetch FFXRF.*/
    /* ------------------------------------------------------------*/

    FG01130(); /* Fetch FFXRF*/

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (FG01W00.FG01WIXM > 0) /* Page was formatted*/
    FG01170(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close FFXRF.*/
   /* ------------------------------------------------------------*/

  FG01180(); /* Close FFXRF*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FG01W00.TA5TSQIX == 0) /* No pages formatted*/

    FFWREC.XXXMODID = "100"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/

    return; /* Exit to continue processing*/

  end

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO == 0) /* No message to display*/
    FG01W00.XXXTSPAG = 1; /* Desired page number*/
  end


   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FG01W00.FG01WSWR = "N"; /* Request for data switch*/


end // end FG01100

// Process dates
Function FG01110()
   /* ------------------------------------------------------------*/
   /* Clear work area.*/
   /* ------------------------------------------------------------*/

  set FG01W02 empty; /* Clear W02 fields*/

   /* ------------------------------------------------------------*/
   /* Obtain current date.*/
   /* ------------------------------------------------------------*/

  XX0XS01();

   /* ------------------------------------------------------------*/
   /* Calculate current month minus one.*/
   /* ------------------------------------------------------------*/

  FG01111(); /* Calculate current date minus 1 month*/

   /* ------------------------------------------------------------*/
   /* Obtain century for dates.*/
   /* ------------------------------------------------------------*/

  FG01112(); /* XSFFS30 call*/

   /* ------------------------------------------------------------*/
   /* Calculate historical date ranges, 1yr ago and 2yrs ago.*/
   /* ------------------------------------------------------------*/

  FG01113(); /* Calculate historical ranges*/

   /* ------------------------------------------------------------*/
   /* Select FFCTL for invoice cutoff date.*/
   /* ------------------------------------------------------------*/

  FG01114(); /* Select FFCTL*/

  FG01W02.FG01WICD = FF1REC.FF1IVCDT;

   /* ------------------------------------------------------------*/
   /* Determine first forecast month to be cutoff month.*/
   /* ------------------------------------------------------------*/

  FG01115(); /* Determine cutoff month*/

   /* ------------------------------------------------------------*/
   /* Determine last actual month for calls.*/
   /* ------------------------------------------------------------*/

  FG01116(); /* Determine last actual month*/


end // end FG01110

// Determine current minus one
Function FG01111()
   /* ------------------------------------------------------------*/
   /* Determine current month minus one.*/
   /* ------------------------------------------------------------*/

  FG01W02.FG01WCWD = XX0XW01.XX0XWDAT; /* current work dt ccyymmdd*/
  FG01W02.FG01WWDT = XX0XW01.XX0XWCYM; /* work date*/

  if (FG01W02.FG01WWMM == 1) /* If month is January*/
    FG01W02.FG01WWMM = 12; /* move 12 to month*/

    if (FG01W02.FG01WWYY == 0) /* If year is 2000*/
      FG01W02.FG01WWYY = 99; /* move 99 to year*/
      FG01W02.FG01WWCC = 19; /* move 19 to century*/
    else
      FG01W02.FG01WWYY = FG01W02.FG01WWYY - 1; /* Subtract 1 from year*/
    end

  else
    FG01W02.FG01WWMM = FG01W02.FG01WWMM - 1; /* Subtract 1 from month*/
  end

  FG01W02.FG01WCD1 = FG01W02.FG01WWDT; /* current date minus 1 month*/


end // end FG01111

// Obtain century for month
Function FG01112()
   /* ------------------------------------------------------------*/
   /* Obtain century for month.*/
   /* ------------------------------------------------------------*/

  set FFZREC empty;

   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/

  FFZREC.FFZMONTH = 1;
  FFZREC.FFZSRANG = "Y";

  FFZREC.FFZBEGMO = FFWREC.FFABEGMO;
  FFZREC.FFZENDMO = FFWREC.FFABEGMO;

   /* ------------------------------------------------------------*/
   /* Call XSFFS30 for range.*/
   /* ------------------------------------------------------------*/

  XSFFS30(); /* Call*/


end // end FG01112

// Calculate historical ranges
Function FG01113()
   /* ------------------------------------------------------------*/
   /* Calculate historical dates, 1yr ago and 2yrs ago.*/
   /* ------------------------------------------------------------*/

  FG01W02.FG01WWBD = FFZREC.FFZBEGMO; /* user req begin range*/

  FG01W00.FG01WCNT = 1; /* Set counter*/
  while (FG01W00.FG01WCNT <= 2) /* loop through twice*/

    if (FG01W02.FG01WBYY == 0) /* If year is 2000*/
      FG01W02.FG01WBYY = 99; /* move 99 to year*/
      FG01W02.FG01WBCC = 19; /* move 19 to century*/
    else
      FG01W02.FG01WBYY = FG01W02.FG01WBYY - 1; /* Subtract 1 from year*/
    end

    FG01W02.FG01WPBD[FG01WCNT] = FG01W02.FG01WWBD; /* prior beg date*/

    /* ------------------------------------------------------------*/
     /* Add to counter.*/
    /* ------------------------------------------------------------*/

    FG01W00.FG01WCNT = FG01W00.FG01WCNT + 1;

  end


end // end FG01113

// Select FFCTL
Function FG01114()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set FF1REC empty; /* Clear row storage area*/

   /* ------------------------------------------------------------*/
   /* Obtain FFCTL.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "114"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VFFCTL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF1REC.FF1GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG01114

// Determine cutoff month
Function FG01115()
   /* ------------------------------------------------------------*/
   /* Determine first forecast month.  This is the cutoff month.*/
   /* ------------------------------------------------------------*/

  if (FG01W02.FG01WICD <= FG01W02.FG01WCWD) /* If ivc dt LE curr dt*/

    if (FG01W02.FG01WIMM == FG01W02.FG01WCMM) /* If ivc mo equal curr mo*/

      FG01W02.FG01WCUT = FG01W02.FG01WCYM; /* Curr is 1st fcst month*/

    else

      FG01W02.FG01WCUT = FG01W02.FG01WCD1;
                                   /* curr-1 is 1st fcst month*/

    end

  else

    FG01W02.FG01WCUT = FG01W02.FG01WCD1; /* curr-1 is 1st fcst month*/

  end


end // end FG01115

// Determine last actual month
Function FG01116()
   /* ------------------------------------------------------------*/
   /* Determine last actual month.*/
   /* ------------------------------------------------------------*/

  FG01W02.FG01WWDT = FG01W02.FG01WCUT; /* work date*/

  if (FG01W02.FG01WWMM == 1) /* If month is January*/
    FG01W02.FG01WWMM = 12; /* move 12 to month*/

    if (FG01W02.FG01WWYY == 0) /* If year is 2000*/
      FG01W02.FG01WWYY = 99; /* move 99 to year*/
      FG01W02.FG01WWCC = 19; /* move 19 to century*/
    else
      FG01W02.FG01WWYY = FG01W02.FG01WWYY - 1; /* Subtract 1 from year*/
    end

  else
    FG01W02.FG01WWMM = FG01W02.FG01WWMM - 1; /* Subtract 1 from month*/
  end

  FG01W02.FG01WLAM = FG01W02.FG01WWDT; /* last 'actual' month*/


end // end FG01116

// Open FFXRF
Function FG01120()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

  FF2REC.YSMXDV = FFWREC.YSMXDV; /* Division group*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* Type*/
  FF2REC.XPLCD = FFWREC.XPLCD; /* Line*/

   /* ------------------------------------------------------------*/
   /* Open cursor for FFXRF.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    FG01W00.FG01WIXM = 1; /* Display line index*/
    FG01W00.FG01WSWC = "N"; /* End of cursor switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG01120

// Fetch FFXRF
Function FG01130()
   /* ------------------------------------------------------------*/
   /* Fetch FFXRF.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      FG01W00.FG01WSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG01130

// Obtain historical data
Function FG01140()
   /* ------------------------------------------------------------*/
   /* Clear work fields.*/
   /* ------------------------------------------------------------*/

  FG01W00.FG01W1YA = 0; /* Clear 1 yr amt*/
  FG01W00.FG01W2YA = 0; /* Clear 2 yr amt*/

   /* ------------------------------------------------------------*/
   /* Obtain actual or forecast B-Grade for 1 year ago.*/
   /* ------------------------------------------------------------*/
  if (FG01W02.FG01WPBD[1] < FG01W02.FG01WCUT) /* If mo LT cutoff*/
    /* ------------------------------------------------------------*/
     /* Obtain actual data from history.*/
    /* ------------------------------------------------------------*/

    FG01141(); /* Obtain history*/

  else
    /* ------------------------------------------------------------*/
     /* Obtain MCAT.*/
    /* ------------------------------------------------------------*/

    FG01142(); /* Obtain MCAT*/

  end

   /* ------------------------------------------------------------*/
   /* Obtain actual or forecast B-Grade for 2 years ago.*/
   /* ------------------------------------------------------------*/
  if (FG01W02.FG01WPBD[2] < FG01W02.FG01WCUT) /* If mo LT cutoff*/
    /* ------------------------------------------------------------*/
     /* Obtain actual data from history.*/
    /* ------------------------------------------------------------*/

    FG01143(); /* Obtain history*/

  else
    /* ------------------------------------------------------------*/
     /* Obtain MCAT.*/
    /* ------------------------------------------------------------*/

    FG01144(); /* Obtain MCAT*/

  end


end // end FG01140

// Obtain 1 yr history
Function FG01141()
   /* ------------------------------------------------------------*/
   /* Obtain regular receipts for 1 year history.*/
   /* ------------------------------------------------------------*/

   /* SET Fh-REC EMPTY              ; clear DFhist.Vxxxx001*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

   /* MOVE FG01W02.FG01Wpbd(1) TO FFFREC.FFFBEGMO;  Beg mo*/
   /* MOVE '01' to TO Fh-REC.quality;*/

   /* ------------------------------------------------------------*/
   /* Select*/
   /* ------------------------------------------------------------*/

  FG01S02(); /* Select history*/

   /* ------------------------------------------------------------*/
   /* Save data.*/
   /* ------------------------------------------------------------*/

   /* move fh-rec.amt to fg01w00.fg01w1ya;*/

   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Obtain B-Grade receipts from history.*/
   /* ------------------------------------------------------------*/

   /* SET Fh-REC EMPTY              ; clear DFhist.Vxxxx001*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

   /* MOVE FG01W02.FG01Wpbd(1) TO FFFREC.FFFBEGMO;  Beg mo*/
   /* MOVE '02' to TO Fh-REC.quality;*/

   /* ------------------------------------------------------------*/
   /* Select*/
   /* ------------------------------------------------------------*/

  FG01S02(); /* Select history*/

   /* ------------------------------------------------------------*/
   /* Add amounts.*/
   /* ------------------------------------------------------------*/

   /* fg01w00.fg01w2ya = fg01w00.fg01w2ya + fh-rec.amt;*/

   /* ------------------------------------------------------------*/
   /* Calculate average.*/
   /* ------------------------------------------------------------*/

   /* move 0 to fg01w00.fg01wfda;*/
   /* move 0 to fg01w00.fg01wfdb;*/
   /* fg01w00.fg01wfda = fh-rec.amt * 100-rec.amt;*/
   /* if fg01w00.fg01wfda gt 0;*/
      /* fg01w00.fg01wfdb = fg01w00.fg01wfda / fg01w00.fg01w1ya;*/
   /* end;*/

   /* ------------------------------------------------------------*/
   /* Save data.*/
   /* ------------------------------------------------------------*/

   /* move fg01w00.fg01wfdb to fg01w01.fg01w1yr(fg01wiXM);*/


end // end FG01141

// Obtain 1 yr MCAT
Function FG01142()
   /* ------------------------------------------------------------*/
   /* Obtain forecast month for range.*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* clear DFhist.VMCAT001*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

  FF7REC.FF4FCTMO = FG01W02.FG01WPBD[1]; /* fcst month*/
  FF7REC.XPCCD = FF2REC.XPCCD; /* category code*/
  FF7REC.YSMXDV = FFWREC.YSMXDV; /* div grp*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Type code*/
  FF7REC.XCTCD = FFWREC.XCTCD; /* country code*/

   /* ------------------------------------------------------------*/
   /* Select MCAT*/
   /* ------------------------------------------------------------*/

  FG01S03(); /* Select MCAT*/

   /* ------------------------------------------------------------*/
   /* Save data.*/
   /* ------------------------------------------------------------*/

  FG01W01.FG01W1YR[FG01WIXM] = FF7REC.FF7BGPCT;


end // end FG01142

// Obtain 2 yrs history
Function FG01143()
   /* ------------------------------------------------------------*/
   /* Obtain regular receipts for 2 year history.*/
   /* ------------------------------------------------------------*/

   /* SET Fh-REC EMPTY              ; clear DFhist.Vxxxx001*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

   /* MOVE FG01W02.FG01Wpbd(2) TO FFFREC.FFFBEGMO;  Beg mo*/
   /* MOVE '01' to TO Fh-REC.quality;*/

   /* ------------------------------------------------------------*/
   /* Select*/
   /* ------------------------------------------------------------*/

  FG01S02(); /* Select history*/

   /* ------------------------------------------------------------*/
   /* Save data.*/
   /* ------------------------------------------------------------*/

   /* move fh-rec.amt to fg01w00.fg01w2ya;*/

   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Obtain B-Grade receipts from history.*/
   /* ------------------------------------------------------------*/

   /* SET Fh-REC EMPTY              ; clear DFhist.Vxxxx001*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

   /* MOVE FG01W02.FG01Wpbd(2) TO FFFREC.FFFBEGMO;  Beg mo*/
   /* MOVE '02' to TO Fh-REC.quality;*/

   /* ------------------------------------------------------------*/
   /* Select*/
   /* ------------------------------------------------------------*/

  FG01S02(); /* Select history*/

   /* ------------------------------------------------------------*/
   /* Add amounts.*/
   /* ------------------------------------------------------------*/

   /* fg01w00.fg01w2ya = fg01w00.fg01w2ya + fh-rec.amt;*/

   /* ------------------------------------------------------------*/
   /* Calculate average.*/
   /* ------------------------------------------------------------*/

   /* move 0 to fg01w00.fg01wfda;*/
   /* move 0 to fg01w00.fg01wfdb;*/
   /* fg01w00.fg01wfda = fh-rec.amt * 100-rec.amt;*/
   /* if fg01w00.fg01wfda gt 0;*/
      /* fg01w00.fg01wfdb = fg01w00.fg01wfda / fg01w00.fg01w2ya;*/
   /* end;*/

   /* ------------------------------------------------------------*/
   /* Save data.*/
   /* ------------------------------------------------------------*/

   /* move fg01w00.fg01wfdb to fg01w01.fg01w2yr(fg01wiXM);*/


end // end FG01143

// Obtain 2 yrs MCAT
Function FG01144()
   /* ------------------------------------------------------------*/
   /* Obtain forecast month for range.*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* clear DFhist.VMCAT001*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

  FF7REC.FF4FCTMO = FG01W02.FG01WPBD[2]; /* fcst month*/
  FF7REC.XPCCD = FF2REC.XPCCD; /* category code*/
  FF7REC.YSMXDV = FFWREC.YSMXDV; /* div grp*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Type code*/
  FF7REC.XCTCD = FFWREC.XCTCD; /* country code*/

   /* ------------------------------------------------------------*/
   /* Select MCAT*/
   /* ------------------------------------------------------------*/

  FG01S03(); /* Select MCAT*/

   /* ------------------------------------------------------------*/
   /* Save data.*/
   /* ------------------------------------------------------------*/

  FG01W01.FG01W2YR[FG01WIXM] = FF7REC.FF7BGPCT;


end // end FG01144

// Obtain current MCAT
Function FG01150()
   /* ------------------------------------------------------------*/
   /* Obtain MCAT for month.*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* clear DFCASt.VMCAT001*/

   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

  FF7REC.FF4FCTMO = FFZREC.FFZBEGMO; /* fcst month*/
  FF7REC.XPCCD = FF2REC.XPCCD; /* category code*/
  FF7REC.YSMXDV = FFWREC.YSMXDV; /* div grp*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Type code*/
  FF7REC.XCTCD = FFWREC.XCTCD; /* country code*/

   /* ------------------------------------------------------------*/
   /* Select MCAT*/
   /* ------------------------------------------------------------*/

  FG01S03(); /* Select MCAT*/

   /* ------------------------------------------------------------*/
   /* Save data.*/
   /* ------------------------------------------------------------*/

  FG01W01.FG01WCUR[FG01WIXM] = FF7REC.FF7BGPCT;


end // end FG01150

// Save data in display storage
Function FG01160()
   /* ------------------------------------------------------------*/
   /* First line on page, save beginning and ending months.*/
   /* ------------------------------------------------------------*/

  if (FG01W00.FG01WIXM == 1) /* If first line on page*/
    FG01W01.FFZBYYMM = FG01M001.FFZBYYMM; /* beg month*/
  end

   /* ------------------------------------------------------------*/
   /* If end of cursor, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FG01W00.FG01WSWC == "Y") /* End of cursor*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Save the data in display storage.*/
   /* ------------------------------------------------------------*/

  FG01W01.XPCCD[FG01WIXM] = FF2REC.XPCCD; /* Category code*/
  if (FF2REC.XPCCD in XPCTBL.XPCCD)
    FG01W01.XPCSDESC[FG01WIXM] = XPCTBL.XPCSDESC[sysVar.arrayIndex];
  end

  if (FG01M001.FG01MDPC > 0) /* if default exists*/

    FG01W01.FG01MDPC = FG01M001.FG01MDPC;
    FG01W01.FG01WCUR[FG01WIXM] = FG01M001.FG01MDPC;

  end

   /* ------------------------------------------------------------*/
   /* Add to line counter.*/
   /* ------------------------------------------------------------*/

  FG01W00.FG01WIXM = FG01W00.FG01WIXM + 1; /* Increment set index*/


end // end FG01160

// Add page to temporary storage
Function FG01170()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FG01W01.XXXTSLEN = FG01W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FG01W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FG01W01 empty; /* M001 display storage*/

    FG01W00.FG01WIXM = 1; /* Display line index*/

    FG01W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "170"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG01170

// Close FFXRF
Function FG01180()
   /* ------------------------------------------------------------*/
   /* Close FFXRF.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "180"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG01180

// Format and converse the map
Function FG01200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FG01W00.FG01WSWF == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FG01W00.FG01WSWF == "Y") /* Map must be formatted*/
      FG01210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FG01M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FG01M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG01M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/

    FG01M001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/

    set FG01M001 alarm; /* Indicate sound alarm*/

  end

  converse FG01M001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = FG01M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG01M001.CAITEM; /* Application data*/


end // end FG01200

// Format the display data
Function FG01210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set FG01M001 initial; /* M001 input/output area*/

  FG01W00.FG01WSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (FG01W00.TA5TSQIX > 0) /* Pages were formatted*/

    if (FG01W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (FG01W00.XXXTSPAG > FG01W00.TA5TSQIX) /* Desired greater highest*/
        FG01W00.XXXTSPAG = FG01W00.TA5TSQIX; /* Default to highest*/
      end

      FG01211(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set FG01M001.XXXLITPG skip; /* "PAGE" literal*/
    FG01M001.XXXTSPAG = FG01W00.XXXTSPAG; /* Current page*/
    set FG01M001.XXXLITOF skip; /* "OF" literal*/
    FG01M001.TA5TSQIX = FG01W00.TA5TSQIX; /* Highest page*/

    set FG01M001.FFZBYYMM cursor; /* Place cursor*/

  end

   /* ------------------------------------------------------------*/
   /* Format key.*/
   /* ------------------------------------------------------------*/

  FG01M001.FFZBYYMM = FFWREC.FFABEGMO; /* Beginning month*/
  FG01M001.YPGCD = FFWREC.YPGCD; /* Type code*/
  FG01M001.YPGABRV = FFWREC.YPGABRV; /* Type name*/
  FG01M001.XPLCD = FFWREC.XPLCD; /* Line code*/
  FG01M001.XPLABRV = FFWREC.XPLABRV; /* Line name*/
  FG01M001.YSMXDV = FFWREC.YSMXDV; /* Div grp code*/
  FG01M001.YSMSMDSC = FFWREC.YSMSMDSC; /* Div grp name*/

  FG01M001.FG01MDPC = FG01W01.FG01MDPC; /* Default percent*/

   /* ------------------------------------------------------------*/
   /* Format data.*/
   /* ------------------------------------------------------------*/

  if (FG01W00.TA5TSQIX > 0) /* Pages were formatted*/
    /* ------------------------------------------------------------*/
     /* Format data.*/
    /* ------------------------------------------------------------*/

    FG01W00.FG01WIXM = 1; /* Initialize line index*/
    set FG01M001.FG01WCUR[FG01WIXM] cursor; /* Place cursor*/

    while (FG01W00.FG01WIXM <= 14 /* Until screen is full*/
     && FG01W01.XPCSDESC[FG01WIXM] > " ") /* and category exists*/

      set FG01M001.FG01WCUR[FG01WIXM] normal; /* Make "current %" visable*/

      FG01M001.XPCSDESC[FG01WIXM] = FG01W01.XPCSDESC[FG01WIXM];
      FG01M001.FG01WCUR[FG01WIXM] = FG01W01.FG01WCUR[FG01WIXM];
      FG01M001.FG01W1YR[FG01WIXM] = FG01W01.FG01W1YR[FG01WIXM];
      FG01M001.FG01W2YR[FG01WIXM] = FG01W01.FG01W2YR[FG01WIXM];

      FG01W00.FG01WIXM = FG01W00.FG01WIXM + 1; /* Increment set index*/

    end

  end


end // end FG01210

// Obtain TSQ Record
Function FG01211()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  FG01W01.XXXTSLEN = FG01W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FG01W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FG01W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "211"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG01211

// Check attention identifier
Function FG01300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (FG01W00.FG01WSWR == "Y") /* Request for data*/
      set FG01W01 empty; /* M001 display storage*/
    end

    FG01W00.FG01WSWF = "Y"; /* Format the map switch*/
    FG01W00.FG01WSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FG01M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      FG01S01(); /* Purge temporary storage*/

      XSFFS01(); /* Exit to another application*/

      set FG01M001.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG01M001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF03"; /* TO application*/
    end

    FG01S01(); /* Purge temporary storage*/

    XSFFS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf15) /* and PF15 was not pressed*/

    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FG01300

// Reset highlighted fields
Function FG01400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FG01M001.FFZBYYMM initialAttributes; /* Beginning month*/
  set FG01M001.YPGCD initialAttributes; /* Type code*/
  set FG01M001.XPLCD initialAttributes; /* Line code*/
  set FG01M001.YSMXDV initialAttributes; /* Div grp code*/
  set FG01M001.FG01MDPC initialAttributes; /* Default percent*/

  FG01W00.FG01WIXM = 1; /* Initialize line index*/

  while (FG01W00.FG01WIXM <= 14 /* Until end of lines*/
   && FG01M001.XPCSDESC[FG01WIXM] > " ") /* and line exists*/

    set FG01M001.FG01WCUR[FG01WIXM] normal; /* Reset current % field*/

    FG01W00.FG01WIXM = FG01W00.FG01WIXM + 1; /* Increment line index*/

  end

  set FG01M001.CATOAP initialAttributes; /* TO application*/
  set FG01M001.CAITEM initialAttributes; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FG01M001.XPLCD == "?" /* line list requested*/
   || FG01M001.YPGCD == "?") /* type list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of type codes.*/
   /* ------------------------------------------------------------*/

  if (FG01M001.YPGCD == "?") /* type list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  TYPE"; /* Heading*/
    XX0XW02.YPGFFFL = "Y";

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FG01M001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FG01M001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
    else
      FG01M001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FG01M001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FG01M001.YPGCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of line codes.*/
   /* ------------------------------------------------------------*/

  if (FG01M001.XPLCD == "?") /* Line list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  LINE"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FG01M001.XPLCD = FFWREC.XPLCD; /* Restore prior code*/
      FG01M001.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/
    else
      FG01M001.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FG01M001.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/

    end

    set FG01M001.XPLCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FG01400

// Verify the entered data
Function FG01500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (FG01M001.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FG01M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    FG01510(); /* Verify scroll request*/

  else

    /* ------------------------------------------------------------*/
     /* Verify the current percents.*/
    /* ------------------------------------------------------------*/

    if (FG01W00.TA5TSQIX > 0) /* Page was formatted*/

      FG01W00.FG01WIXM = 14; /* Initialize index*/
      while (FG01W00.FG01WIXM > 0) /* Until end of lines*/

        if (FG01M001.FG01WCUR[FG01WIXM] > 0) /* If greater than 0*/
          if (FG01M001.FG01WCUR[FG01WIXM] > 100) /* If greater than 100*/

            FFWREC.XXXMODID = "500"; /* Module identification*/
            set FG01M001.FG01WCUR[FG01WIXM] cursor, bold; /* Highlight*/
            converseLib.validationFailed(118); /* Indicate invalid*/

          end

        end

        FG01W00.FG01WIXM = FG01W00.FG01WIXM - 1; /* Decrement line number*/

      end

      /* ------------------------------------------------------------*/
       /* If any of the key fields changed, determine if any of the*/
       /* modifiable fields were changed.*/
      /* ------------------------------------------------------------*/

      FG01W00.FG01WCNT = FG01W00.FG01WNBR; /* initalize subscript*/
      while (FG01W00.FG01WCNT > 0) /* count greater than zero*/

        FG01520(); /* Verify current percent fields*/

        FG01W00.FG01WCNT = FG01W00.FG01WCNT - 1; /* subtract from counter*/

      end
    end

    /* ------------------------------------------------------------*/
     /* Verify the default percent.*/
    /* ------------------------------------------------------------*/

    if (FG01M001.FG01MDPC > 100) /* If default greater than 100*/

      FFWREC.XXXMODID = "500"; /* Module identification*/
      set FG01M001.FG01MDPC cursor, bold; /* Highlight*/
      converseLib.validationFailed(118); /* Indicate invalid*/

    end

    /* ------------------------------------------------------------*/
     /* If the search key was changed, verify the key fields.*/
    /* ------------------------------------------------------------*/

    if (FG01M001.FFZBYYMM != FG01W01.FFZBYYMM /* Beginning date changed*/
     || FG01M001.YPGCD != FFWREC.YPGCD        /* or type code changed*/
     || FG01M001.XPLCD != FFWREC.XPLCD        /* or line code changed*/
     || FG01M001.YSMXDV != FFWREC.YSMXDV)     /* or div grp changed*/

      FG01530(); /* Verify div grp*/
      FG01540(); /* Verify line*/
      FG01550(); /* Verify type*/
      FG01560(); /* Verify range*/
      FG01570(); /* Verify relationships*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end FG01500

// Verify scroll request
Function FG01510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FG01W00.XXXTSPAG < 2)       /* and no previous pages*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FG01W00.XXXTSPAG >= FG01W00.TA5TSQIX) /* and no more pages*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Highlight any key field that was changed.*/
   /* ------------------------------------------------------------*/

  if (FG01M001.YSMXDV != FFWREC.YSMXDV) /* Div grp changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG01M001.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/

  end

  if (FG01M001.FG01MDPC != FG01W01.FG01MDPC) /* Default % changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG01M001.FG01MDPC cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/

  end

  if (FG01M001.XPLCD != FFWREC.XPLCD) /* Line changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG01M001.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/

  end

  if (FG01M001.YPGCD != FFWREC.YPGCD) /* Type changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG01M001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/

  end

  if (FG01M001.FFZBYYMM != FG01W01.FFZBYYMM) /* Beginning date changed*/

    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG01M001.FFZBYYMM cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/

  end


end // end FG01510

// Check percent field
Function FG01520()
   /* ------------------------------------------------------------*/
   /* If percent field was changed and the key changed,*/
   /* indicate that the key cannot change when data is changed.*/
   /* ------------------------------------------------------------*/

  if (FG01M001.FG01WCUR[FG01WCNT] != FG01W01.FG01WCUR[FG01WCNT])

    FFWREC.FFWMODSW = "Y"; /* modified data exit switch*/

    if (FG01M001.FFZBYYMM != FG01W01.FFZBYYMM /* range changed*/
     || FG01M001.YPGCD != FFWREC.YPGCD        /* type changed*/
     || FG01M001.XPLCD != FFWREC.XPLCD)       /* line changed*/

      FFWREC.XXXMODID = "520"; /* Module identification*/
      converseLib.validationFailed(130); /* Can't chg key & data together*/

      set FG01M001.FG01WCUR[FG01WCNT] cursor, bold; /* highlight*/

      if (FG01M001.XPLCD != FFWREC.XPLCD) /* line changed*/
        set FG01M001.XPLCD cursor, bold; /* highlight*/
      end

      if (FG01M001.YPGCD != FFWREC.YPGCD) /* type changed*/
        set FG01M001.YPGCD cursor, bold; /* highlight*/
      end

      if (FG01M001.FFZBYYMM != FG01W01.FFZBYYMM) /* range changed*/
        set FG01M001.FFZBYYMM cursor, bold; /* highlight*/
      end

    end

  end

end // end FG01520

// Verify div grp code
Function FG01530()
   /* ------------------------------------------------------------*/
   /* Verify division group code.*/
   /* ------------------------------------------------------------*/

  set YSMREC empty; /* Row storage area*/

  YSMREC.YSMSUMCD = FG01M001.YSMXDV; /* Division group code*/
  TA1REC.TA1PGMNM = "FG01530 "; /* Calling program*/

  XSFFS20(); /* Verify division group*/

   /* ------------------------------------------------------------*/
   /* If not found, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Table row found*/

    FG01M001.YSMSMDSC = YSMREC.YSMSMDSC; /* Abbreviation*/

  else

    FG01M001.YSMSMDSC = " "; /* Abbreviation*/

    FFWREC.XXXMODID = "530"; /* Module identification*/
    set FG01M001.YSMXDV cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/

  end


end // end FG01530

// Verify line code
Function FG01540()
   /* ------------------------------------------------------------*/
   /* Verify line code.*/
   /* ------------------------------------------------------------*/

  XPLREC.XPLCD = FG01M001.XPLCD; /* Format key*/
  XPLREC.XGPCD = COMMAREA.XGPCD; /* Format key*/

  if (XPLREC.XPLKEY in XPLTBL.XPLKEY /* Code in table*/
   && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    FG01M001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    FG01M001.XPLABRV = " "; /* Abbreviation*/

    FFWREC.XXXMODID = "540"; /* Module identification*/
    set FG01M001.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/

  end


end // end FG01540

// Verify type code
Function FG01550()
   /* ------------------------------------------------------------*/
   /* Verify type code.*/
   /* ------------------------------------------------------------*/

  if (FG01M001.YPGCD in YPGTBL.YPGCD /* Code in table*/
   && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    FG01M001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    FG01M001.YPGABRV = " "; /* Abbreviation*/

    FFWREC.XXXMODID = "550"; /* Module identification*/
    set FG01M001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/

  end


end // end FG01550

// Verify range
Function FG01560()
   /* ------------------------------------------------------------*/
   /* Verify the beginning month.*/
   /* ------------------------------------------------------------*/

  set FFZREC empty; /* Subroutine parameters*/

  FFZREC.FFZSRANG = "Y";
  FFZREC.FFZBYYMM = FG01M001.FFZBYYMM; /* Beginning date*/
  FFZREC.FFZEYYMM = FG01M001.FFZBYYMM; /* ending date*/

  XSFFS30(); /* Verify the range*/

   /* ------------------------------------------------------------*/
   /* If not zero return code, indicate missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (FFZREC.FFZBEGRC != "0") /* Beginning date error*/

    FFWREC.XXXMODID = "560"; /* Module identification*/
    set FG01M001.FFZBYYMM cursor, bold; /* Highlight*/

    if (FFZREC.FFZBEGRC == "1") /* No date entered*/
      converseLib.validationFailed(8); /* Required field missing*/
    else

      if (FFZREC.FFZBEGRC == "2") /* Date is invalid*/
        converseLib.validationFailed(17); /* Invalid date entered*/
      else

        converseLib.validationFailed(151); /* Date is out of range*/

      end

    end

  end


end // end FG01560

// Verify relationships
Function FG01570()
   /* ------------------------------------------------------------*/
   /* Verify that key is in FFXRF.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* If there are no errors*/

    /* ------------------------------------------------------------*/
     /* Clear the row storage area.*/
    /* ------------------------------------------------------------*/

    set FF2REC empty; /* clear DFCAST.VFFXRF01 record.*/

    /* ------------------------------------------------------------*/
     /* Format keys for call to DFCAST.VFFXRF01.*/
    /* ------------------------------------------------------------*/

    FF2REC.XPCCD = "*"; /* category*/
    FF2REC.XPLCD = FG01M001.XPLCD; /* line*/
    FF2REC.YPGCD = FG01M001.YPGCD; /* type*/
    FF2REC.YSMXDV = FG01M001.YSMXDV; /* div grp*/

    /* ------------------------------------------------------------*/
     /* Select the row to display from the table.*/
    /* ------------------------------------------------------------*/

    FG01571(); /* Open FFXRF*/

    FG01572(); /* fetch FFXRF*/

    /* ------------------------------------------------------------*/
     /* If successful, close FFXRF.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE != 0) /* Row not found code*/

      /* ------------------------------------------------------------*/
       /* If not found, indicate invalid.*/
      /* ------------------------------------------------------------*/

      FFWREC.XXXMODID = "570"; /* Module identification*/
      set FG01M001.YSMXDV bold; /* Highlight*/
      set FG01M001.YPGCD bold; /* Highlight*/
      set FG01M001.XPLCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(203); /* Indicate invalid relationship*/

    end

    FG01573(); /* close cursor*/

  end


end // end FG01570

// Open  FFXRF
Function FG01571()
   /* ------------------------------------------------------------*/
   /* Open FFXRF.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "571"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG01571

// Fetch FFXRF
Function FG01572()
   /* ------------------------------------------------------------*/
   /* Fetch FFXRF.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "572"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG01572

// Close FFXRF
Function FG01573()
   /* ------------------------------------------------------------*/
   /* Close FFXRF.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "573"; /* Module identification*/

  converseLib.validationFailed(01); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG01573

// Process valid input request
Function FG01600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  FG01W00.FG01WSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the key was changed, update FFWREC, and request data.*/
   /* ------------------------------------------------------------*/

  if (FG01M001.FFZBYYMM != FG01W01.FFZBYYMM /* Beginning month changed*/
   || FG01M001.YPGCD != FFWREC.YPGCD        /* Type changed*/
   || FG01M001.XPLCD != FFWREC.XPLCD        /* Line changed*/
   || FG01M001.YSMXDV != FFWREC.YSMXDV)     /* Div grp changed*/

    /* ------------------------------------------------------------*/
     /* Update the modifiable data in the FF system commarea.*/
    /* ------------------------------------------------------------*/

    FFWREC.FFABEGMO = FFZREC.FFZBEGMO; /* Beginning month*/

    FFWREC.YPGCD = FG01M001.YPGCD; /* Type code*/
    FFWREC.YPGABRV = FG01M001.YPGABRV; /* Type name*/
    FFWREC.XPLCD = FG01M001.XPLCD; /* Line code*/
    FFWREC.XPLABRV = FG01M001.XPLABRV; /* Line name*/
    FFWREC.YSMXDV = FG01M001.YSMXDV; /* Div grp code*/
    FFWREC.YSMSMDSC = FG01M001.YSMSMDSC; /* Div grp name*/

    /* ------------------------------------------------------------*/
     /* Clear default percent and current percent fields.*/
    /* ------------------------------------------------------------*/

    FG01M001.FG01MDPC = 0; /* Default %*/

    FG01W00.FG01WCNT = 1; /* set subscript*/
    while (FG01W00.FG01WCNT <= 14 /* until ^le nbr lines*/
     && FG01M001.XPCSDESC[FG01WCNT] > " ") /* and categories exist*/

      FG01M001.FG01WCUR[FG01WCNT] = 0;

      FG01W00.FG01WCNT = FG01W00.FG01WCNT + 1;

    end

    /* ------------------------------------------------------------*/
     /* Request data and return to previous process.*/
    /* ------------------------------------------------------------*/

    FG01W00.FG01WSWR = "Y"; /* Request for data switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    FG01W00.XXXTSPAG = FG01W00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    FG01W00.XXXTSPAG = FG01W00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If default percent was changed, request data.*/
   /* ------------------------------------------------------------*/

  if (FG01M001.FG01MDPC != FG01W01.FG01MDPC) /* if default % changed*/

    FG01W00.FG01WSWR = "Y"; /* Request for data switch*/

    FG01W01.FG01MDPC = FG01M001.FG01MDPC; /* Default %*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If PF15 was pressed,*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* If PF15 was pressed*/

    /* ------------------------------------------------------------*/
     /* Obtain the current data and time.*/
    /* ------------------------------------------------------------*/

    XX0XS01();

    /* ------------------------------------------------------------*/
     /* Update each category.*/
    /* ------------------------------------------------------------*/

    FG01W00.FG01WIXM = 1; /* set counter*/
    while (FG01W00.FG01WIXM <= 14 /* while counter less or equal 14*/
     && FG01M001.XPCSDESC[FG01WIXM] > " ") /* and categories exist*/

      FG01610(); /* Update MCAT*/

      FG01W00.FG01WIXM = FG01W00.FG01WIXM + 1; /* Add one to counter*/

    end

    if (FFWREC.FFABEGMO < FG01W02.FG01WCUT)
      /* ------------------------------------------------------------*/
       /* Indicate that no updates occurred. (Entire range is actual)*/
      /* ------------------------------------------------------------*/

      FFWREC.FFWMODSW = "N"; /* modified data exit switch*/

      FFWREC.XXXMODID = "600"; /* Module identification*/
      FFWREC.XXXMSGNO = 330; /* Indicate no updates occurred*/

    else
      /* ------------------------------------------------------------*/
       /* Indicate that the updates were successfully completed.*/
      /* ------------------------------------------------------------*/

      FFWREC.FFWMODSW = "N"; /* modified data exit switch*/

      FFWREC.XXXMODID = "600"; /* Module identification*/
      FFWREC.XXXMSGNO = 32; /* Indicate update completed*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Update  Display Storage area.*/
   /* ------------------------------------------------------------*/

  FG01W01.FFZBYYMM = FG01M001.FFZBYYMM; /* Beginning month*/

  FG01W01.FG01MDPC = FG01M001.FG01MDPC; /* Default %*/

  FG01W00.FG01WCNT = 1; /* set subscript*/
  while (FG01W00.FG01WCNT <= 14 /* until ^le nbr lines*/
   && FG01M001.XPCSDESC[FG01WCNT] > " ") /* and categories exist*/

    FG01W01.FG01WCUR[FG01WCNT] = FG01M001.FG01WCUR[FG01WCNT];

    FG01W00.FG01WCNT = FG01W00.FG01WCNT + 1;

  end

   /* ------------------------------------------------------------*/
   /* Commit all changes to protected resources.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/


end // end FG01600

// Update categories
Function FG01610()
   /* ------------------------------------------------------------*/
   /* Update category for month.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.FFABEGMO >= FG01W02.FG01WCUT) /* month GE cutoff*/

    FG01611(); /* Select MCAT*/

    FF7REC.FF7BGPCT = FG01M001.FG01WCUR[FG01WIXM];

    if (SQLCA.VAGen_SQLCODE == 0) /* Row was found for update*/
      FG01612(); /* Update MCAT*/
    else
      if (FG01M001.FG01WCUR[FG01WIXM] > 0) /* If % greater than 0*/
        FG01613(); /* Add MCAT*/
      end
    end

  end


end // end FG01610

// Select MCAT
Function FG01611()
   /* ------------------------------------------------------------*/
   /* Clear the row storage area.*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* clear DFCAST.VMCAT001 record.*/

   /* ------------------------------------------------------------*/
   /* Format keys for call to DFCAST.VMCAT001.*/
   /* ------------------------------------------------------------*/

  FF7REC.FF4FCTMO = FFWREC.FFABEGMO; /* month*/
  FF7REC.YSMXDV = FG01M001.YSMXDV; /* div grp*/
  FF7REC.YPGCD = FG01M001.YPGCD; /* Type code*/
  FF7REC.XPCCD = FG01W01.XPCCD[FG01WIXM]; /* category code*/
  FF7REC.XCTCD = FFWREC.XCTCD; /* country code*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "611"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CALL DFCAST.VMLTYP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG01611

// Update MCAT
Function FG01612()
   /* ------------------------------------------------------------*/
   /* Format data.*/
   /* ------------------------------------------------------------*/

  FF7REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF7REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update DFCAST.VMCAT001.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" ("U ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      FFWREC.XXXMODID = "612"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "613"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG01612

// Add -- MCAT
Function FG01613()
   /* ------------------------------------------------------------*/
   /* Format data.*/
   /* ------------------------------------------------------------*/

  if (FG01M001.YPGCD == "01") /* if inlines*/
    FF7REC.FF7FURAT = 0;
    FF7REC.FF7FLLRT = 92;
  else
    if (FG01M001.YPGCD == "02") /* if makeups*/
      FF7REC.FF7FURAT = 100;
      FF7REC.FF7FLLRT = 100;
    end
  end

  FF7REC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  FF7REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF7REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update DFCAST.VMCAT001.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" ("A ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "613"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG01613

// Purge any temperory storage
Function FG01S01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FG01W01 empty; /* M001 display storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FG01W00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FG01W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG01S01

// Select history
Function FG01S02()
   /* call waiting on creation of D/B table*/
end // end FG01S02

// Select MCAT
Function FG01S03()
   /* ------------------------------------------------------------*/
   /* Select MCAT.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG01S03

//*** RECORD=FG01W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FG01W00 type basicRecord
  10 FG01WSWC FG01WSWC ; 
  10 FG01WSWF FG01WSWF ; 
  10 FG01WSWR FG01WSWR ; 
  10 FF0WWSW1 FF0WWSW1 ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 * num(1) ; 
  10 FG01WIXM FG01WIXM ; 
  10 FG01WIX2 FG01WIX2 ; 
  10 FG01WCNT FG01WCNT ; 
  10 FG01WNBR FG01WNBR ; 
  10 * num(1) ; 
  10 FG01WFDA FG01WFDA ; 
  10 FG01WFDB FG01WFDB ; 
  10 FG01WFDC FG01WFDC ; 
  10 * num(1) ; 
  10 FG01W1YA FG01W1YA ; 
  10 FG01W2YA FG01W2YA ; 
end // end FG01W00

//*** RECORD=FG01W01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FG01W01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(419) ; 
    10 FFZBYYMM FFZBYYMM ; 
    10 FFZEYYMM FFZEYYMM ; 
    10 FG01MDPC FG01MDPC ; 
    10 XPCCD XPCCD [14] ; 
    10 XPCSDESC XPCSDESC [14] ; 
    10 FG01WCUR FG01WCUR [14] ; 
    10 FG01W1YR FG01W1YR [14] ; 
    10 FG01W2YR FG01W2YR [14] ; 
end // end FG01W01

//*** RECORD=FG01W02 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FG01W02 type basicRecord
  10 FG01WWDT FG01WWDT ; 
    15 * num(3) ; 
    15 FG01WWCC FG01WWCC ; 
    15 FG01WWYM FG01WWYM ; 
      20 FG01WWYY FG01WWYY ; 
      20 FG01WWMM FG01WWMM ; 
  10 * num(1) ; 
  10 FG01WWBD FG01WWBD ; 
    15 * num(3) ; 
    15 FG01WBCC FG01WBCC ; 
    15 FG01WBYM FG01WBYM ; 
      20 FG01WBYY FG01WBYY ; 
      20 FG01WBMM FG01WBMM ; 
  10 * num(1) ; 
  10 FG01WICD FG01WICD ; 
    15 FG01WIYM FG01WIYM ; 
      20 FG01WICC FG01WICC ; 
      20 FG01WIYY FG01WIYY ; 
      20 FG01WIMM FG01WIMM ; 
    15 FG01WIDD FG01WIDD ; 
  10 * num(1) ; 
  10 FG01WCWD FG01WCWD ; 
    15 FG01WCYM FG01WCYM ; 
      20 FG01WCCC FG01WCCC ; 
      20 FG01WCYY FG01WCYY ; 
      20 FG01WCMM FG01WCMM ; 
    15 FG01WCDD FG01WCDD ; 
  10 * num(1) ; 
  10 FG01WCD1 FG01WCD1 ; 
  10 FG01WCUT FG01WCUT ; 
  10 FG01WLAM FG01WLAM ; 
  10 * num(1) ; 
  10 FG01WPBD FG01WPBD [2] ; 
end // end FG01W02

// Default percent
DataItem FG01MDPC num(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// One yr amount
DataItem FG01W1YA bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// One year ago B-grade
DataItem FG01W1YR num(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Two years ago B-grade
DataItem FG01W2YR num(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end
// Two yr amount
DataItem FG01W2YA bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// begin century
DataItem FG01WBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range month
DataItem FG01WBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year and month
DataItem FG01WBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range year
DataItem FG01WBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work century
DataItem FG01WCCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date - 1 month
DataItem FG01WCD1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current work day
DataItem FG01WCDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work month
DataItem FG01WCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Counter for loops
DataItem FG01WCNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Current B-grade
DataItem FG01WCUR num(5,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Cutoff month - 1st fcst mo
DataItem FG01WCUT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date ccyymmdd
DataItem FG01WCWD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current work ccyymm
DataItem FG01WCYM num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work year
DataItem FG01WCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work field
DataItem FG01WFDA bin(18,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work field
DataItem FG01WFDB bin(18,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work field
DataItem FG01WFDC bin(18,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// invoice work century
DataItem FG01WICC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice compare date
DataItem FG01WICD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// invoice work day
DataItem FG01WIDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice work month
DataItem FG01WIMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Secondary index for map fields
DataItem FG01WIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FG01WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// invoice ccyymm
DataItem FG01WIYM num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invoice work year
DataItem FG01WIYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Last 'actual' month of range
DataItem FG01WLAM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// True number of months
DataItem FG01WNBR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// historical dates
DataItem FG01WPBD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// Cursor end of file switch
DataItem FG01WSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FG01WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FG01WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work begin date
DataItem FG01WWBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work century
DataItem FG01WWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date
DataItem FG01WWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work month
DataItem FG01WWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year and month
DataItem FG01WWYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FG01WWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

