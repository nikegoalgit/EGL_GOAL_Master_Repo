package fg07;

import corpcom1.CACHGFL;
import corpcom2.XPCREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPFF001;
import corpcom3.XPXPC01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS01;
import corpcom4.XSFFS10;
import corpcom4.XSFFS30;
import corpcom4.XSFFS35;
import corpcom4.XSFFS50;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XPCTBL;
import corpy2.YPGTBL;
import ff.common.*;
import fh.common.FH3REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=FG07 ****
// This application provides the user with the ability to
// create a prop dmmnd index by referring to the historical
// data or the user can pick a specific historical prop dmnd
// index(1 year ago, 2 year ago, or 3 years ago) for a given
// range and specific category.
// 
// The prop dmnd index is the percentage of the monthly prop
// dmnd qty over the total prop dmnd qty.
// 
// If the requested historical range is before the current
// month, then the actual prop dmnd qty will be shown.  If
// if is between the current month and current plus 5 month,
// the qty could be actual or forecasted.  If it is after the
// current plus 5 months, the forecasted qty will be used.
// 
// The monthly quantities and indices will be displayed.
// If the user created indices didn't add up to 100, then
// the variance will be shown on the top of the screen.  The
// quantites are all in thousand.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from either of the screens.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          02/25/90  rgilli  New application.
// FF1016   08/01/90  JJUCH   Disallowed to fcst current main
//                            buy month and all prior months.
// FF1071   02/25/91  JJUCH   Modified the calculation for the
//                            period of current thru buy month.
// FF399    04/21/93  JJUCH   Correct the problem of calculat-
//                            ing fcst demand in current month.
//                            Need to use contemp. month.
// FF399    04/27/93  JJUCH   Change the calculation for prop
//                            fcst beyond the current month.
// FF175    12/12/96  DSMITH  regenerated for the yr 2000 prj
// FF-fix   09/24/99  RKUDPI  changed date flds to be zerofill
// *********************
Program FG07 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF7REC FF7REC; // record
  FFCREC FFCREC; // record
  FFDREC FFDREC; // record
  FFFREC FFFREC; // record
  FFQREC FFQREC; // record
  FFRREC FFRREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  FG07W00 FG07W00; // record
  FG07W01 FG07W01; // record
  FH3REC FH3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPCTBL; // table
  use YPGTBL; // table
  use FG07M.FG07M001, // form
  		FG07M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FFFREC empty;
    set FG07M001 initial; /* M001 input/output*/
    set FG07W00 empty; /* Working storage*/
    set FG07W01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine work area*/
    set TA5REC empty; /* temp storage queue area*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    FG07W00.FG07WSWR = "N"; /* Request for data switch*/
    FG07W00.FG07WSWF = "Y"; /* format screen data switch*/
    ;
     /* ---------------------------------------------------*/
     /* Clear unused fields*/
     /* ---------------------------------------------------*/
    ;
    FFWREC.XPLCD = " "; /* Clear product line code*/
    FFWREC.XPLABRV = " "; /* Clear product line abrv*/
    FFWREC.SYBSTGNB = " "; /* Clear style group number*/
    FFWREC.SYBSTGNM = " "; /* Clear style group name*/
    FFWREC.SY1STNBR = " "; /* Clear style number*/
    FFWREC.SY2CLRID = " "; /* Clear color id*/
    FFWREC.XDMCD = " "; /* Clear dimension code*/
    FFWREC.SY1SSTNM = " "; /* Clear short style name*/
    FFWREC.SY2CLRAB = " "; /* Clear color abrv*/
    FFWREC.XDMABRV = " "; /* Clear dimension abrv*/
    FFWREC.ZRGCD = " "; /* Clear region code*/
    FFWREC.ZRGABRV = " "; /* Clear region abrv*/
    FFWREC.XCTCD = " "; /* Clear country code*/
    FFWREC.XCTABRV = " "; /* Clear country abrv*/
    ;
     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/
    ;
     /* ------------------------------------------------------------*/
     /* product type group*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.YPGCD == " ")
      FFWREC.YPGCD = "01";
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end
    ;
     /* ------------------------------------------------------------*/
     /* determine if data is to be loaded*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.FFABEGMO != 0
     && FFWREC.FFAENDMO != 0
     && FFWREC.XPCCD != " ")
      FFZREC.FFZBEGMO = FFWREC.FFABEGMO;
      FFZREC.FFZENDMO = FFWREC.FFAENDMO;
      FG07W00.FG07WSWR = "Y"; /* set data request flag*/
    end
    ;
     /* ------------------------------------------------------------*/
     /* Flow to first time through date validation*/
     /* ------------------------------------------------------------*/
    ;
    goto FG07001; /* Converse the main process*/
    ;
    FG07001: FG07001();
     /* ------------------------------------------------------------*/
     /* flow to converse the main process used to display a map*/
     /* ------------------------------------------------------------*/
    ;
    goto FG07001; /* converse the main process*/
    ;
  end // end main
end // end FG07

// maint historical prop dmnd idx
Function FG07001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FG07100(); /* Obtain the data to display*/
  ;
  FG07200(); /* Format and display the map*/
  ;
  FG07300(); /* Check attention identifier*/
  ;
  FG07400(); /* Reset fields to normal intensity*/
  ;
  FG07500(); /* Verify the entered data*/
  ;
  FG07600(); /* Process valid input request*/
  ;
  ;
end // end FG07001

// obtain data for display
Function FG07100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG07W00.FG07WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* init working storage*/
   /* ------------------------------------------------------------*/
  ;
  set FG07W01 empty; /* init w/s*/
  ;
   /* ------------------------------------------------------------*/
   /* obtain current date using routine xx0xs01, calculate*/
   /* current date plus five mos*/
   /* ------------------------------------------------------------*/
   /* ------------------------*/
   /* get current date*/
   /* ------------------------*/
  ;
  XX0XS01();
  ;
  FG07W00.FG07WCRD = XX0XW01.XX0XWCYM; /* current date ccyymm*/
  FG07W00.FG07WWDT = XX0XW01.XX0XWCYM; /* work date*/
  ;
  if (FG07W00.FG07WWMM == 01)
    FG07W00.FG07WWMM = 12;
    if (FG07W00.FG07WWYY == 00)
      FG07W00.FG07WWCC = FG07W00.FG07WWCC - 1;
      FG07W00.FG07WWYY = 99;
    else
      FG07W00.FG07WWYY = FG07W00.FG07WWYY - 1;
    end
  else
    FG07W00.FG07WWMM = FG07W00.FG07WWMM - 1;
  end
  ;
  FG07S-10(); /* get contmp month*/
  ;
   /* ------------------------------------------------------------*/
   /* calculate "user created" heading date range (12 months)*/
   /* ------------------------------------------------------------*/
  ;
  FG07W00.FG07WWBD = FFWREC.FFABEGMO; /* user requested begin range*/
  FG07W00.FG07WWED = FFWREC.FFABEGMO; /* begin range + 11 months*/
  ;
  FG07W00.FG07WEMM = FG07W00.FG07WEMM + 11;
  if (FG07W00.FG07WEMM > 12)
    FG07W00.FG07WEMM = FG07W00.FG07WEMM - 12;
    if (FG07W00.FG07WEYY == 99)
      FG07W00.FG07WECC = FG07W00.FG07WECC + 1;
      FG07W00.FG07WEYY = 0;
    else
      FG07W00.FG07WEYY = FG07W00.FG07WEYY + 1;
    end
  end
  FG07W01.FG07WHBD[4] = FG07W00.FG07WWBD; /* beg date*/
  FG07W01.FG07WHED[4] = FG07W00.FG07WWED; /* end date*/
  ;
   /* ------------------------------------------------------------*/
   /* calculate "historical" heading date ranges (12 months)*/
   /* ------------------------------------------------------------*/
  ;
  FG07W00.FG07WIDX = 1; /* init index*/
  while (FG07W00.FG07WIDX <= 3) /* calculate historical date ranges*/
    ;
    if (FG07W00.FG07WBYY == 00)
      FG07W00.FG07WBYY = 99;
      FG07W00.FG07WBCC = FG07W00.FG07WBCC - 1;
    else
      FG07W00.FG07WBYY = FG07W00.FG07WBYY - 1;
    end
    FG07W01.FG07WHBD[FG07WIDX] = FG07W00.FG07WWBD; /* prior beg date*/
    ;
    if (FG07W00.FG07WEYY == 00)
      FG07W00.FG07WEYY = 99;
      FG07W00.FG07WECC = FG07W00.FG07WECC - 1;
    else
      FG07W00.FG07WEYY = FG07W00.FG07WEYY - 1;
    end
    FG07W01.FG07WHED[FG07WIDX] = FG07W00.FG07WWED; /* prior end date*/
    ;
    FG07W00.FG07WIDX = FG07W00.FG07WIDX + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* calculate historical date ranges using the begining and*/
   /* end range specified by the user*/
   /* ------------------------------------------------------------*/
  ;
  FG07W00.FG07WWBD = FFWREC.FFABEGMO; /* user requested begin range*/
  FG07W00.FG07WWED = FFWREC.FFAENDMO; /* user requested end range*/
  ;
  FG07W00.FG07WIDX = 1; /* init index*/
  while (FG07W00.FG07WIDX <= 3) /* calculate historical date ranges*/
    ;
    if (FG07W00.FG07WBYY == 00)
      FG07W00.FG07WBYY = 99;
      FG07W00.FG07WBCC = FG07W00.FG07WBCC - 1;
    else
      FG07W00.FG07WBYY = FG07W00.FG07WBYY - 1;
    end
    FG07W01.FG07WPBD[FG07WIDX] = FG07W00.FG07WWBD; /* prior beg date*/
    ;
    if (FG07W00.FG07WEYY == 00)
      FG07W00.FG07WEYY = 99;
      FG07W00.FG07WECC = FG07W00.FG07WECC - 1;
    else
      FG07W00.FG07WEYY = FG07W00.FG07WEYY - 1;
    end
    FG07W01.FG07WPED[FG07WIDX] = FG07W00.FG07WWED; /* prior end date*/
    ;
    FG07W00.FG07WIDX = FG07W00.FG07WIDX + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* save user requested date range returned from xsffs30*/
   /* ------------------------------------------------------------*/
  ;
  FG07W00.FG07WWBD = FFZREC.FFZBEGMO;
  FG07W00.FG07WWED = FFZREC.FFZENDMO;
  ;
   /* ------------------------------------------------------------*/
   /* obtain monthly headings and quantities for user created*/
   /* data*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty;
  ;
  FFZREC.FFZBYYMM = FG07W01.FG07WHBY[4]; /* begin date range*/
  FFZREC.FFZEYYMM = FG07W01.FG07WHEY[4]; /* end date range*/
  ;
  FG07110(); /* get months within range*/
  ;
  FG07W00.FG07WIDX = 1; /* init index*/
  while (FG07W00.FG07WIDX <= FFZREC.FFZNUMMO) /* process all months in range*/
    ;
    FG07W01.FG07WHD4[FG07WIDX] = FFZREC.FFZINDMO[FG07WIDX];
    ;
    FG07W00.FG07WIDX = FG07W00.FG07WIDX + 1;
  end
  ;
   /* ------------------------------------------------------------*/
   /* verify dfcast.vrcat001 exists and if the prop dmnd*/
   /* indicator equals 'u' (user created), if so,  select all*/
   /* dfcast.vrcmth01 for the user requested date range.*/
   /* ------------------------------------------------------------*/
  ;
  set FFCREC empty;
  ;
  FFCREC.FFABEGMO = FFWREC.FFABEGMO;
  FFCREC.FFAENDMO = FFWREC.FFAENDMO;
  ;
  FG07S01(); /* select dfcast.vrcat001*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (FFCREC.FFCPDIND == "1") /* history one yr ago*/
      FG07W01.FG07WSEL[1] = "S"; /* user created selection field*/
    end
    if (FFCREC.FFCPDIND == "2") /* history two yr ago*/
      FG07W01.FG07WSEL[2] = "S"; /* user created selection field*/
    end
    if (FFCREC.FFCPDIND == "3") /* history three yr ago*/
      FG07W01.FG07WSEL[3] = "S"; /* user created selection field*/
    end
    if (FFCREC.FFCPDIND == "U") /* user created*/
      ;
      FG07W01.FG07WSEL[4] = "S"; /* user created selection field*/
      ;
      set FFDREC empty;
      ;
      FFFREC.FFFBEGMO = FFWREC.FFABEGMO;
      FFFREC.FFFENDMO = FFWREC.FFAENDMO;
      ;
      FFDREC.FFABEGMO = FFWREC.FFABEGMO;
      FFDREC.FFAENDMO = FFWREC.FFAENDMO;
      ;
      FG07S02(); /* select 's1' dfcast.vrcmth01*/
      FG07S03(); /* fetch 'n1' dfcast.vrcmth01*/
      ;
      FG07W00.FG07WIDX = 1; /* init index*/
      while (SQLCA.VAGen_SQLCODE == 0) /* process all dfcast.vrcmth01*/
        ;
        FG07W01.FG07WIX4[FG07WIDX] = mathLib.round(FFDREC.FFDPDPCT + 0, -mathLib.decimals(FG07W01.FG07WIX4[FG07WIDX]));
        ;
        FG07S03(); /* fetch 'n1' dfcast.vrcmth01*/
        ;
        FG07W00.FG07WIDX = FG07W00.FG07WIDX + 1;
        ;
      end
      ;
      FG07S04(); /* close 'c1' dfcast.vrcmth01*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* obtain monthly headings and quantities for historical*/
   /* data 1 year ago*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty;
  ;
  FFZREC.FFZBYYMM = FG07W01.FG07WHBY[1]; /* beg date 1 yr ago*/
  FFZREC.FFZEYYMM = FG07W01.FG07WHEY[1]; /* end date 1 yr ago*/
  ;
  FG07110(); /* get months within range*/
  ;
  FG07W00.FG07WUTQ = 0; /* init total quantity*/
  FG07W00.FG07WIDX = 1; /* init index*/
  while (FG07W00.FG07WIDX <= FFZREC.FFZNUMMO) /* process all months in range*/
    ;
    FG07W01.FG07WHD1[FG07WIDX] = FFZREC.FFZINDMO[FG07WIDX];
    ;
    /* ------------------------------------------------------------*/
     /* obtain actual/forecast sale qtys*/
    /* ------------------------------------------------------------*/
    ;
    if (FFZREC.FFZINDMO[FG07WIDX] <= FG07W01.FG07WPED[1])
      ;
      FG07120();
      ;
      /* ---------------------------------------------------*/
       /* translate/load historical monthly quantity*/
      /* ---------------------------------------------------*/
      ;
      FG07W01.FG07WUQ1[FG07WIDX] = FG07W00.FG07WUDQ;
      FFXREC.FFXNUMB = FG07W00.FG07WUDQ;
      XSFFS10();
      FG07W01.FG07WQT1[FG07WIDX] = FFXREC.FFXCHAR;
      ;
      /* ---------------------------------------------------*/
       /* accumulate historical total quantity*/
      /* ---------------------------------------------------*/
      ;
      FG07W00.FG07WUTQ = FG07W00.FG07WUDQ + FG07W00.FG07WUTQ;
      ;
    end
    ;
    FG07W00.FG07WIDX = FG07W00.FG07WIDX + 1;
    ;
  end
  ;
   /* ---------------------------------------------------*/
   /* translate/load historical quantity total*/
   /* ---------------------------------------------------*/
  ;
  FG07W01.FG07WUQ1[FG07WIDX] = FG07W00.FG07WUTQ;
  FFXREC.FFXNUMB = FG07W00.FG07WUTQ;
  XSFFS10();
  FG07W01.FG07WQT1[FG07WIDX] = FFXREC.FFXCHAR;
  ;
   /* ------------------------------------------------------------*/
   /* calculate historical monthly percents*/
   /* ------------------------------------------------------------*/
  ;
  if (FG07W01.FG07WUQ1[FG07WIDX] != 0) /* (total qty entry)*/
    ;
    FG07W00.FG07WNM1 = FG07W01.FG07WUQ1[FG07WIDX];
    FG07W00.FG07WIDX = 1;
    while (FG07W00.FG07WIDX <= FFZREC.FFZNUMMO) /* nbr months loaded*/
      ;
      FG07W00.FG07WNM2 = FG07W01.FG07WUQ1[FG07WIDX] * 100;
      FG07W01.FG07WIX1[FG07WIDX] = mathLib.round(FG07W00.FG07WNM2 / FG07W00.FG07WNM1, -mathLib.decimals(FG07W01.FG07WIX1[FG07WIDX]));
      ;
      FG07W00.FG07WIDX = FG07W00.FG07WIDX + 1;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* obtain monthly headings and quantities for historical*/
   /* data 2 years ago*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty;
  ;
  FFZREC.FFZBYYMM = FG07W01.FG07WHBY[2]; /* beg date 2 yr ago*/
  FFZREC.FFZEYYMM = FG07W01.FG07WHEY[2]; /* end date 2 yr ago*/
  ;
  FG07110(); /* get months within range*/
  ;
  FG07W00.FG07WUTQ = 0; /* init total quantity*/
  FG07W00.FG07WIDX = 1; /* init index*/
  while (FG07W00.FG07WIDX <= FFZREC.FFZNUMMO) /* process all month in range*/
    ;
    FG07W01.FG07WHD2[FG07WIDX] = FFZREC.FFZINDMO[FG07WIDX];
    ;
    /* ------------------------------------------------------------*/
     /* obtain actual/forecast sale qtys*/
    /* ------------------------------------------------------------*/
    ;
    if (FFZREC.FFZINDMO[FG07WIDX] <= FG07W01.FG07WPED[2])
      ;
      FG07120();
      ;
      /* ---------------------------------------------------*/
       /* translate/load historical monthly quantity*/
      /* ---------------------------------------------------*/
      ;
      FG07W01.FG07WUQ2[FG07WIDX] = FG07W00.FG07WUDQ;
      FFXREC.FFXNUMB = FG07W00.FG07WUDQ;
      XSFFS10();
      FG07W01.FG07WQT2[FG07WIDX] = FFXREC.FFXCHAR;
      ;
      /* ---------------------------------------------------*/
       /* accumulate historical total quantity*/
      /* ---------------------------------------------------*/
      ;
      FG07W00.FG07WUTQ = FG07W00.FG07WUDQ + FG07W00.FG07WUTQ;
      ;
    end
    ;
    FG07W00.FG07WIDX = FG07W00.FG07WIDX + 1;
    ;
  end
  ;
   /* ---------------------------------------------------*/
   /* translate/load historical quantity total*/
   /* ---------------------------------------------------*/
  ;
  FG07W01.FG07WUQ2[FG07WIDX] = FG07W00.FG07WUTQ;
  FFXREC.FFXNUMB = FG07W00.FG07WUTQ;
  XSFFS10();
  FG07W01.FG07WQT2[FG07WIDX] = FFXREC.FFXCHAR;
  ;
   /* ------------------------------------------------------------*/
   /* calculate historical monthly percents*/
   /* ------------------------------------------------------------*/
  ;
  if (FG07W01.FG07WUQ2[FG07WIDX] != 0) /* (total qty entry)*/
    ;
    FG07W00.FG07WNM1 = FG07W01.FG07WUQ2[FG07WIDX];
    FG07W00.FG07WIDX = 1;
    while (FG07W00.FG07WIDX <= FFZREC.FFZNUMMO) /* nbr months loaded*/
      ;
      FG07W00.FG07WNM2 = FG07W01.FG07WUQ2[FG07WIDX] * 100;
      FG07W01.FG07WIX2[FG07WIDX] = mathLib.round(FG07W00.FG07WNM2 / FG07W00.FG07WNM1, -mathLib.decimals(FG07W01.FG07WIX2[FG07WIDX]));
      ;
      FG07W00.FG07WIDX = FG07W00.FG07WIDX + 1;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* obtain monthly headings and quantities for historical*/
   /* data 3 years ago*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty;
  ;
  FFZREC.FFZBYYMM = FG07W01.FG07WHBY[3]; /* beg date 3 yr ago*/
  FFZREC.FFZEYYMM = FG07W01.FG07WHEY[3]; /* end date 3 yr ago*/
  ;
  FG07110(); /* get months within range*/
  ;
  FG07W00.FG07WUTQ = 0; /* init total quantity*/
  FG07W00.FG07WIDX = 1; /* init index*/
  while (FG07W00.FG07WIDX <= FFZREC.FFZNUMMO) /* process all month in range*/
    ;
    FG07W01.FG07WHD3[FG07WIDX] = FFZREC.FFZINDMO[FG07WIDX];
    ;
    /* ------------------------------------------------------------*/
     /* obtain actual/forecast sale qtys*/
    /* ------------------------------------------------------------*/
    ;
    if (FFZREC.FFZINDMO[FG07WIDX] <= FG07W01.FG07WPED[3])
      ;
      FG07120();
      ;
      /* ---------------------------------------------------*/
       /* translate/load historical monthly quantity*/
      /* ---------------------------------------------------*/
      ;
      FG07W01.FG07WUQ3[FG07WIDX] = FG07W00.FG07WUDQ;
      FFXREC.FFXNUMB = FG07W00.FG07WUDQ;
      XSFFS10();
      FG07W01.FG07WQT3[FG07WIDX] = FFXREC.FFXCHAR;
      ;
      /* ---------------------------------------------------*/
       /* accumulate historical total quantity*/
      /* ---------------------------------------------------*/
      ;
      FG07W00.FG07WUTQ = FG07W00.FG07WUDQ + FG07W00.FG07WUTQ;
      ;
    end
    ;
    FG07W00.FG07WIDX = FG07W00.FG07WIDX + 1;
    ;
  end
  ;
   /* ---------------------------------------------------*/
   /* translate/load historical quantity total*/
   /* ---------------------------------------------------*/
  ;
  FG07W01.FG07WUQ3[FG07WIDX] = FG07W00.FG07WUTQ;
  FFXREC.FFXNUMB = FG07W00.FG07WUTQ;
  XSFFS10();
  FG07W01.FG07WQT3[FG07WIDX] = FFXREC.FFXCHAR;
  ;
   /* ------------------------------------------------------------*/
   /* calculate historical monthly percents*/
   /* ------------------------------------------------------------*/
  ;
  if (FG07W01.FG07WUQ3[FG07WIDX] != 0) /* (total qty entry)*/
    ;
    FG07W00.FG07WNM1 = FG07W01.FG07WUQ3[FG07WIDX];
    FG07W00.FG07WIDX = 1;
    while (FG07W00.FG07WIDX <= FFZREC.FFZNUMMO) /* nbr months loaded*/
      ;
      FG07W00.FG07WNM2 = FG07W01.FG07WUQ3[FG07WIDX] * 100;
      FG07W01.FG07WIX3[FG07WIDX] = mathLib.round(FG07W00.FG07WNM2 / FG07W00.FG07WNM1, -mathLib.decimals(FG07W01.FG07WIX3[FG07WIDX]));
      ;
      FG07W00.FG07WIDX = FG07W00.FG07WIDX + 1;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* reload user requested date range*/
   /* ------------------------------------------------------------*/
  ;
  FFZREC.FFZBEGMO = FG07W00.FG07WWBD;
  FFZREC.FFZENDMO = FG07W00.FG07WWED;
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  FG07W01.CACHGFL = "Y"; /* data loaded*/
  FG07W00.FG07WSWR = "N"; /* Request for data switch*/
  ;
  ;
end // end FG07100

// obtain mthly headings xsffs30
Function FG07110()
   /* ------------------------------------------------------------*/
   /* get all months within requested date range*/
   /* ------------------------------------------------------------*/
  ;
  FFZREC.FFZMONTH = 1;
  FFZREC.FFZSRANG = "Y";
  ;
  XSFFS30();
  ;
  if (FFZREC.FFZENDRC == "1")
    set FG07M001.FG07MERG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "110";
  else
    if (FFZREC.FFZENDRC == "2")
      set FG07M001.FG07MERG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "110";
    else
      if (FFZREC.FFZENDRC == "3")
        set FG07M001.FG07MERG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "110";
      end
    end
  end
  ;
  if (FFZREC.FFZBEGRC == "1")
    set FG07M001.FG07MBRG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "110";
  else
    if (FFZREC.FFZBEGRC == "2")
      set FG07M001.FG07MBRG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "110";
    else
      if (FFZREC.FFZBEGRC == "3")
        set FG07M001.FG07MBRG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "110";
      end
    end
  end
  ;
  ;
end // end FG07110

// sel actual/fcst prop dmnd
Function FG07120()
  ;
   /* ------------------------------------------------------------*/
   /* determine if actual/fcst prop dmnd qtys are to be obtained*/
   /* ------------------------------------------------------------*/
  ;
  FG07W00.FG07WUDQ = 0;
  ;
   /* ------------------------------------------------------------*/
   /* If process month < contemp month, use actual prop from hist*/
   /* if process month > contemp month, sum up the prop fcst*/
   /* from s/r worksheet.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFZREC.FFZINDMO[FG07WIDX] < FG07W00.FG07W-CONTP-MO) /* actual*/
    FG07S05(); /* get actual prop*/
  else
    FG07S06(); /* get fcst prop*/
  end
  ;
  ;
end // end FG07120

// Format and converse the map
Function FG07200()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* if no errors format map*/
    ;
    /* ------------------------------------------------------------*/
     /* format screen*/
    /* ------------------------------------------------------------*/
    ;
    if (FG07W00.FG07WSWF == "Y") /* map must be formatted*/
      FG07210(); /* Format the data on the map*/
    end
    ;
  else
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* load message number*/
    ;
  end
  ;
  FG07M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FG07M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG07M001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* error message number*/
    FG07M001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    set FG07M001 alarm; /* Indicate sound alarm*/
  end
  ;
  converse FG07M001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0;
  ;
  COMMAREA.CATOAP = FG07M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG07M001.CAITEM; /* Application data*/
  ;
  ;
end // end FG07200

// Format the display data
Function FG07210()
  ;
   /* ------------------------------------------------------------*/
   /* init map fg07m001*/
   /* ------------------------------------------------------------*/
  ;
  set FG07M001 initial; /* m001 input/ouput area*/
  ;
  FG07W00.FG07WSWF = "N"; /* init map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Format fg07m001 using passed data*/
   /* ------------------------------------------------------------*/
  ;
  FG07W00.FG07WWDT = FFWREC.FFABEGMO; /* w/s date field*/
  FG07M001.FG07MBRG = FG07W00.FG07WWYM; /* begin month range*/
  FG07W00.FG07WWDT = FFWREC.FFAENDMO; /* w/s date field*/
  FG07M001.FG07MERG = FG07W00.FG07WWYM; /* end month range*/
  ;
  FG07M001.YPGCD = FFWREC.YPGCD; /* product type group*/
  FG07M001.YPGABRV = FFWREC.YPGABRV; /* product type group abrv*/
  ;
  FG07M001.XPCCD = FFWREC.XPCCD; /* category code*/
  FG07M001.XPCABRV = FFWREC.XPCABRV; /* category code abrv*/
  ;
  if (FG07W01.CACHGFL != "Y")
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* load monthly headings/index/quantities/total for*/
   /* historical data 1 year ago*/
   /* ------------------------------------------------------------*/
  ;
  FG07W00.FG07WIDX = 1;
  while (FG07W00.FG07WIDX <= 12) /* nbr of mos loaded*/
    ;
    FG07M001.FG07MHD1[FG07WIDX] = FG07W01.FG07WDH1[FG07WIDX];
    FG07M001.FG07MIX1[FG07WIDX] = FG07W01.FG07WIX1[FG07WIDX];
    FG07M001.FG07MQT1[FG07WIDX] = FG07W01.FG07WQT1[FG07WIDX];
    ;
    FG07W00.FG07WIDX = FG07W00.FG07WIDX + 1; /* increment index*/
    ;
  end
  ;
  FG07M001.FG07MTOT[1] = FG07W01.FG07WQT1[FG07WIDX];
  FG07M001.FG07MSEL[1] = FG07W01.FG07WSEL[1];
  set FG07M001.FG07MSEL[1] cursor, normal;
  ;
   /* ------------------------------------------------------------*/
   /* load monthly headings/index/quantities/total for*/
   /* historical data 2 year ago*/
   /* ------------------------------------------------------------*/
  ;
  FG07W00.FG07WIDX = 1;
  while (FG07W00.FG07WIDX <= 12) /* nbr of mos loaded*/
    ;
    FG07M001.FG07MHD2[FG07WIDX] = FG07W01.FG07WDH2[FG07WIDX];
    FG07M001.FG07MIX2[FG07WIDX] = FG07W01.FG07WIX2[FG07WIDX];
    FG07M001.FG07MQT2[FG07WIDX] = FG07W01.FG07WQT2[FG07WIDX];
    ;
    FG07W00.FG07WIDX = FG07W00.FG07WIDX + 1; /* increment index*/
    ;
  end
  ;
  FG07M001.FG07MTOT[2] = FG07W01.FG07WQT2[FG07WIDX];
  FG07M001.FG07MSEL[2] = FG07W01.FG07WSEL[2];
  set FG07M001.FG07MSEL[2] normal;
  if (FG07W01.FG07WSEL[2] == "S")
    set FG07M001.FG07MSEL[2] cursor, normal;
  end
  ;
   /* ------------------------------------------------------------*/
   /* load monthly headings/index/quantities/total for*/
   /* historical data 3 year ago*/
   /* ------------------------------------------------------------*/
  ;
  FG07W00.FG07WIDX = 1;
  while (FG07W00.FG07WIDX <= 12) /* nbr of mos loaded*/
    ;
    FG07M001.FG07MHD3[FG07WIDX] = FG07W01.FG07WDH3[FG07WIDX];
    FG07M001.FG07MIX3[FG07WIDX] = FG07W01.FG07WIX3[FG07WIDX];
    FG07M001.FG07MQT3[FG07WIDX] = FG07W01.FG07WQT3[FG07WIDX];
    ;
    FG07W00.FG07WIDX = FG07W00.FG07WIDX + 1; /* increment index*/
    ;
  end
  ;
  FG07M001.FG07MTOT[3] = FG07W01.FG07WQT3[FG07WIDX];
  FG07M001.FG07MSEL[3] = FG07W01.FG07WSEL[3];
  set FG07M001.FG07MSEL[3] normal;
  if (FG07W01.FG07WSEL[3] == "S")
    set FG07M001.FG07MSEL[3] cursor, normal;
  end
  ;
   /* ------------------------------------------------------------*/
   /* load monthly headings/index for user created data*/
   /* ------------------------------------------------------------*/
  ;
  FG07W00.FG07WIDX = 1;
  while (FG07W00.FG07WIDX <= 12) /* load monthly headings*/
    ;
    FG07M001.FG07MHD4[FG07WIDX] = FG07W01.FG07WDH4[FG07WIDX];
    ;
    FG07W00.FG07WIDX = FG07W00.FG07WIDX + 1; /* increment index*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if dfcast.vrcmth01 data has been loaded only allow the user*/
   /* to update existing data, if not, allow the user to add up*/
   /* to 12 indexs.*/
   /* ------------------------------------------------------------*/
  ;
  FG07W00.FG07WIDX = 1; /* init index*/
  while (FG07W00.FG07WIDX <= 12
   && FG07W01.FG07WHD4[FG07WIDX] <= FFWREC.FFAENDMO)
    ;
    FG07M001.FG07MIX4[FG07WIDX] = FG07W01.FG07WIX4[FG07WIDX];
    set FG07M001.FG07MIX4[FG07WIDX] normal;
    ;
    FG07W00.FG07WIDX = FG07W00.FG07WIDX + 1; /* increment index*/
    ;
  end
  ;
  FG07M001.FG07MSEL[4] = FG07W01.FG07WSEL[4];
  set FG07M001.FG07MSEL[4] normal;
  if (FG07W01.FG07WSEL[4] == "S")
    set FG07M001.FG07MSEL[4] cursor, normal;
  end
  ;
  ;
end // end FG07210

// Check attention identifier
Function FG07300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    converseLib.clearScreen();
     /* refresh map*/
    ;
    FG07W00.FG07WSWF = "Y"; /* format screen m001*/
    FG07W00.FG07WSWR = "N"; /* request for data*/
    ;
    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG07M001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
      FG07W00.FG07WSWF = "Y"; /* format screen m001*/
      FG07W00.FG07WSWR = "N"; /* request for data*/
      ;
      set FG07M001.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG07M001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FG0A"; /* TO application*/
    end
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    FG07W00.FG07WSWF = "Y"; /* format screen m001*/
    FG07W00.FG07WSWR = "N"; /* request for data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf13) /* pf13 was not pressed*/
    ;
    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FG07300

// Reset highlighted fields
Function FG07400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FG07M001.FG07MBRG initialAttributes; /* begin range*/
  set FG07M001.FG07MERG initialAttributes; /* end range*/
  set FG07M001.XPCCD initialAttributes; /* category code*/
  set FG07M001.YPGCD initialAttributes; /* product type group*/
  ;
  if (FG07W01.CACHGFL == "Y")
    ;
    set FG07M001.FG07MSEL[1] normal;
    set FG07M001.FG07MSEL[2] normal;
    set FG07M001.FG07MSEL[3] normal;
    set FG07M001.FG07MSEL[4] normal;
    ;
    FG07W00.FG07WIDX = 1;
    while (FG07W00.FG07WIDX <= 12
     && FG07W01.FG07WHD4[FG07WIDX] <= FFWREC.FFAENDMO)
      ;
      set FG07M001.FG07MIX4[FG07WIDX] normal;
      ;
      FG07W00.FG07WIDX = FG07W00.FG07WIDX + 1;
      ;
    end
  end
  ;
  set FG07M001.CATOAP initialAttributes;
  set FG07M001.CAITEM initialAttributes;
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG07M001.XPCCD == "?" /* categroy code*/
   || FG07M001.YPGCD == "?") /* product type group*/
    ;
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  else
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes*/
   /* ------------------------------------------------------------*/
  ;
  if (FG07M001.XPCCD == "?") /* product category list*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "CATEGORY CODES "; /* Heading*/
    ;
    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG07M001.XPCCD = FFWREC.XPCCD; /* product category*/
      XPCREC.XPCCD = FFWREC.XPCCD; /* product category*/
      XPCREC.XGPCD = COMMAREA.XGPCD; /* gpc code*/
      if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
        FG07M001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
      end
    else
      FG07M001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FG07M001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG07M001.XPCCD cursor; /* Establish cursor position*/
    ;
  end
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type group codes*/
   /* ------------------------------------------------------------*/
  ;
  if (FG07M001.YPGCD == "?") /* product type grp list*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT TYPE GROUP"; /* Heading*/
    ;
    XX0XW02.YPGFFFL = "Y"; /* init flag*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG07M001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FG07M001.YPGABRV = FFWREC.YPGABRV; /* Restore prior code*/
    else
      FG07M001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FG07M001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG07M001.YPGCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG07400

// Verify the entered data
Function FG07500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FG07M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* request for transfer*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf13)
    ;
    FG07S07(); /* verify modifiable fields*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate entry fields*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter)
    ;
    FG07510(); /* validate entry fields*/
    ;
    /* ------------------------------------------------------*/
     /* if key data changed check modifiable fields*/
    /* ------------------------------------------------------*/
    ;
    FG07W00.FG07WWBD = FFWREC.FFABEGMO;
    FG07W00.FG07WWED = FFWREC.FFAENDMO;
    ;
    if (FG07M001.YPGCD != FFWREC.YPGCD        /* product type grp chg*/
     || FG07M001.YPGCD == " "                 /* product type grp chg*/
     || FG07M001.XPCCD != FFWREC.XPCCD        /* product category chg*/
     || FG07M001.XPCCD == " "                 /* product category chg*/
     || FG07M001.FG07MBRG != FG07W00.FG07WBYM /* beg range changed*/
     || FG07M001.FG07MBRG == 0                /* beg range changed*/
     || FG07M001.FG07MERG != FG07W00.FG07WEYM /* end range changed*/
     || FG07M001.FG07MERG == 0)               /* end range changed*/
      ;
      if (FG07W01.CACHGFL == "Y")
        FG07S07(); /* verify modifiable fields*/
      end
      ;
      if (converseVar.validationMsgNum == 0)
        FG07W00.FG07WSWR = "Y"; /* request data request*/
      end
      ;
    end
  end
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end
  ;
  ;
end // end FG07500

// validate modifiable data
Function FG07510()
  ;
   /* ------------------------------------------------------------*/
   /* validate user created index*/
   /* ------------------------------------------------------------*/
  ;
  FG07W01.FG07WUVQ = 0;
  FG07W00.FG07WIDX = 12;
  while (FG07W00.FG07WIDX > 0)
    ;
    FG07W01.FG07WUVQ = FG07W01.FG07WUVQ + FG07M001.FG07MIX4[FG07WIDX];
    ;
    FG07W00.FG07WIDX = FG07W00.FG07WIDX - 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if user created was selected and the percent total does*/
   /* not equal 100 display variance qty and error message*/
   /* ------------------------------------------------------------*/
  ;
  if (FG07W01.FG07WUVQ != 100
   && FG07W01.FG07WUVQ != 0)
    converseLib.validationFailed(159);
    FFWREC.XXXMODID = "510";
    FG07W01.FG07WUVQ = 100 - FG07W01.FG07WUVQ;
    FG07M001.FG07MVQT = FG07W01.FG07WUVQ;
    set FG07M001.FG07MIX4[1] cursor;
  else
    if (FG07W01.FG07WUVQ == 0
     && FG07M001.FG07MSEL[4] == "S")
      converseLib.validationFailed(159);
      FFWREC.XXXMODID = "510";
      FG07W01.FG07WUVQ = 100 - FG07W01.FG07WUVQ;
      FG07M001.FG07MVQT = FG07W01.FG07WUVQ;
      set FG07M001.FG07MIX4[1] cursor;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate product category code*/
   /* ------------------------------------------------------------*/
  ;
  XPCREC.XGPCD = COMMAREA.XGPCD;
  XPCREC.XPCCD = FG07M001.XPCCD;
  if (XPCREC.XPCKEY in XPCTBL.XPCKEY
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    FG07M001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
  else
    FG07M001.XPCABRV = " ";
    converseLib.validationFailed(118);
    FFWREC.XXXMODID = "510";
    set FG07M001.XPCCD cursor, bold;
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate product type group*/
   /* ------------------------------------------------------------*/
  ;
  if (FG07M001.YPGCD != "*")
    if (FG07M001.YPGCD in YPGTBL.YPGCD
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      FG07M001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
    else
      FG07M001.YPGABRV = " ";
      converseLib.validationFailed(118);
      FFWREC.XXXMODID = "510";
      set FG07M001.YPGCD cursor, bold;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate end yymm range and begin yymm range*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty;
  ;
  FFZREC.FFZMONTH = 6;
  FFZREC.FFZBYYMM = FG07M001.FG07MBRG;
  FFZREC.FFZEYYMM = FG07M001.FG07MERG;
  ;
  XSFFS35(); /* edit date range*/
  ;
  if (FFZREC.FFZENDRC == "1")
    set FG07M001.FG07MERG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "510";
  else
    if (FFZREC.FFZENDRC == "2")
      set FG07M001.FG07MERG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "510";
    else
      if (FFZREC.FFZENDRC == "3")
        set FG07M001.FG07MERG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "510";
      end
    end
  end
  ;
  if (FFZREC.FFZBEGRC == "1")
    set FG07M001.FG07MBRG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "510";
  else
    if (FFZREC.FFZBEGRC == "2")
      set FG07M001.FG07MBRG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "510";
    else
      if (FFZREC.FFZBEGRC == "3")
        set FG07M001.FG07MBRG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "510";
      end
    end
  end
   /* ------------------------------------------------------------*/
   /* validate 's'election field*/
   /* ------------------------------------------------------------*/
  ;
  FG07W00.FG07WSLF = "N"; /* init selection flag*/
  ;
  FG07W00.FG07WIDX = 4; /* init index*/
  while (FG07W00.FG07WIDX >= 1)
    ;
    if (FG07M001.FG07MSEL[FG07WIDX] != " "
     && FG07M001.FG07MSEL[FG07WIDX] != "S")
      converseLib.validationFailed(41);
      FFWREC.XXXMODID = "510";
      set FG07M001.FG07MSEL[FG07WIDX] cursor, bold;
    else
      if (FG07M001.FG07MSEL[FG07WIDX] == "S")
        FG07W00.FG07WSLF = "Y";
      end
    end
    ;
    FG07W00.FG07WSLC = FG07W00.FG07WIDX - 1;
    ;
    while (FG07W00.FG07WSLC >= 1)
      ;
      if (FG07M001.FG07MSEL[FG07WSLC] > " "
       && FG07M001.FG07MSEL[FG07WIDX] > " ")
        converseLib.validationFailed(136);
        FFWREC.XXXMODID = "510";
        set FG07M001.FG07MSEL[FG07WIDX] cursor, bold;
      end
      ;
      FG07W00.FG07WSLC = FG07W00.FG07WSLC - 1;
      ;
    end
    ;
    FG07W00.FG07WIDX = FG07W00.FG07WIDX - 1;
    ;
  end
  ;
  ;
end // end FG07510

// Process valid input request
Function FG07600()
  ;
   /* ------------------------------------------------------------*/
   /* indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/
  ;
  FG07W00.FG07WSWF = "Y"; /* set format map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA/ffwrec*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XPCCD = FG07M001.XPCCD; /* product category code*/
  FFWREC.XPCABRV = FG07M001.XPCABRV; /* product category abrv desc*/
  ;
  FFWREC.YPGCD = FG07M001.YPGCD; /* product type grp code*/
  FFWREC.YPGABRV = FG07M001.YPGABRV; /* product type grp abrv desc*/
  ;
  FG07S-13(); /* get line code*/
  ;
  FFWREC.FFABEGMO = FFZREC.FFZBEGMO;
  FFWREC.FFAENDMO = FFZREC.FFZENDMO;
  if (FG07W00.FG07WSWR == "Y") /* KEY DATA MODIFIED*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if user data changed or historical data selected*/
   /* update/add dfcast.vrcat001 dfcast.vrcmth01*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter
   && FG07W00.FG07WSLF == "Y") /* data selected for update/add*/
    ;
    XX0XS01(); /* get current date and time*/
    ;
    set FFCREC empty;
    ;
    FFCREC.FFABEGMO = FFWREC.FFABEGMO;
    FFCREC.FFAENDMO = FFWREC.FFAENDMO;
    ;
    FG07S01(); /* select dfcast.vrcat001 row*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      ;
      FG07610(); /* update dfcast.vrcat001 row*/
      ;
      set FFDREC empty;
      ;
      FFFREC.FFFBEGMO = FFWREC.FFABEGMO;
      FFFREC.FFFENDMO = FFWREC.FFAENDMO;
      ;
      FFDREC.FFABEGMO = FFWREC.FFABEGMO;
      FFDREC.FFAENDMO = FFWREC.FFAENDMO;
      ;
      FG07S02(); /* select 's1' dfcast.vrcmth01*/
      FG07S03(); /* fetch 'n1' dfcast.vrcmth01*/
      ;
      FG07W00.FG07WIDX = 1; /* init index*/
      while (SQLCA.VAGen_SQLCODE == 0)
        ;
        FG07620(); /* update dfcast.vrcmth01*/
        ;
        FG07S03(); /* fetch 'n1' dfcast.vrcmth01*/
        ;
        FG07W00.FG07WIDX = FG07W00.FG07WIDX + 1;
        ;
      end
    else
      ;
      FG07630(); /* add dfcast.vrcat001 row*/
      ;
      set FFDREC empty;
      ;
      FFDREC.FFABEGMO = FFWREC.FFABEGMO;
      FFDREC.FFAENDMO = FFWREC.FFAENDMO;
      FFDREC.XPCCD = FFWREC.XPCCD;
      FFDREC.YPGCD = FFWREC.YPGCD;
      ;
      FG07W00.FG07WIDX = 1; /* init index*/
      while (FFDREC.FF4FCTMO < FFDREC.FFAENDMO)
        ;
        FG07640(); /* add dfcast.vrcmth01 row*/
        ;
        FG07W00.FG07WIDX = FG07W00.FG07WIDX + 1;
        ;
      end
    end
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();
    ;
    FFWREC.XXXMSGNO = 33;
    FFWREC.XXXMODID = "600";
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if pf13 transfer to application fg0x*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf13)
    ;
    COMMAREA.CATOAP = "FG0X";
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* load map work fields*/
   /* ------------------------------------------------------------*/
  ;
  FG07W01.FG07WSEL[1] = FG07M001.FG07MSEL[1];
  FG07W01.FG07WSEL[2] = FG07M001.FG07MSEL[2];
  FG07W01.FG07WSEL[3] = FG07M001.FG07MSEL[3];
  FG07W01.FG07WSEL[4] = FG07M001.FG07MSEL[4];
  ;
  FG07W00.FG07WIDX = 1; /* init index*/
  while (FG07W00.FG07WIDX <= 12
   && FG07W01.FG07WHD4[FG07WIDX] <= FFWREC.FFAENDMO)
    ;
    FG07W01.FG07WIX4[FG07WIDX] = FG07M001.FG07MIX4[FG07WIDX];
    ;
    FG07W00.FG07WIDX = FG07W00.FG07WIDX + 1;
    ;
  end
  ;
  ;
end // end FG07600

// upd dfcast.vrcat001 row
Function FG07610()
   /* ------------------------------------------------------------*/
   /* upd dfcast.vrcat001 table row*/
   /* ------------------------------------------------------------*/
  ;
  if (FG07M001.FG07MSEL[1] == "S") /* historical data 1 yr ago*/
    FFCREC.FFCPDIND = "1";
  else
    if (FG07M001.FG07MSEL[2] == "S") /* historical data 2 yr ago*/
      FFCREC.FFCPDIND = "2";
    else
      if (FG07M001.FG07MSEL[3] == "S") /* historical data 3 yr ago*/
        FFCREC.FFCPDIND = "3";
      else
        if (FG07M001.FG07MSEL[4] == "S") /* user created data*/
          FFCREC.FFCPDIND = "U";
        end
      end
    end
  end
  ;
  FFCREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFCREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3760" ("U ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      FG07W00.FG07WSWR = "Y"; /* Request for data switch*/
      ;
      FFWREC.XXXMODID = "610"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "610"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DFCAST.VRCAT001 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG07610

// upd dfcast.vrcmth01 row
Function FG07620()
   /* ------------------------------------------------------------*/
   /* upd dfcast.vrcmth01 table row*/
   /* ------------------------------------------------------------*/
  ;
  if (FG07M001.FG07MSEL[1] == "S")
    FFDREC.FFDPDPCT = FG07W01.FG07WIX1[FG07WIDX];
  else
    if (FG07M001.FG07MSEL[2] == "S")
      FFDREC.FFDPDPCT = FG07W01.FG07WIX2[FG07WIDX];
    else
      if (FG07M001.FG07MSEL[3] == "S")
        FFDREC.FFDPDPCT = FG07W01.FG07WIX3[FG07WIDX];
      else
        if (FG07M001.FG07MSEL[4] == "S")
          FFDREC.FFDPDPCT = FG07M001.FG07MIX4[FG07WIDX];
        end
      end
    end
  end
  ;
  FFDREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFDREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3770" ("U ", SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      FG07W00.FG07WSWR = "Y"; /* Request for data switch*/
      ;
      FFWREC.XXXMODID = "620"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "620"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DFCAST.VRCMTH01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG07620

// add dfcast.vrcat001 row
Function FG07630()
   /* ------------------------------------------------------------*/
   /* add dfcast.vrcat001 table row*/
   /* ------------------------------------------------------------*/
  ;
  if (FG07M001.FG07MSEL[1] == "S") /* historical data 1 yr ago*/
    FFCREC.FFCPDIND = "1";
  else
    if (FG07M001.FG07MSEL[2] == "S") /* historical data 2 yr ago*/
      FFCREC.FFCPDIND = "2";
    else
      if (FG07M001.FG07MSEL[3] == "S") /* historical data 3 yr ago*/
        FFCREC.FFCPDIND = "3";
      else
        if (FG07M001.FG07MSEL[4] == "S") /* user created data*/
          FFCREC.FFCPDIND = "U";
        end
      end
    end
  end
  ;
  FFCREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFCREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFCREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3760" ("A ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "630"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VRCAT001 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG07630

// add dfcast.vrcmth01 row
Function FG07640()
   /* ------------------------------------------------------------*/
   /* add dfcast.vrcmth01 table row*/
   /* ------------------------------------------------------------*/
  ;
  FFDREC.FF4FCTMO = FG07W01.FG07WHD4[FG07WIDX];
  ;
  if (FG07M001.FG07MSEL[1] == "S") /* historical data 1 yr ago*/
    FFDREC.FFDPDPCT = FG07W01.FG07WIX1[FG07WIDX];
  else
    if (FG07M001.FG07MSEL[2] == "S") /* historical data 2 yr ago*/
      FFDREC.FFDPDPCT = FG07W01.FG07WIX2[FG07WIDX];
    else
      if (FG07M001.FG07MSEL[3] == "S") /* historical data 3 yr ago*/
        FFDREC.FFDPDPCT = FG07W01.FG07WIX3[FG07WIDX];
      else
        if (FG07M001.FG07MSEL[4] == "S") /* user created data*/
          FFDREC.FFDPDPCT = FG07M001.FG07MIX4[FG07WIDX];
        end
      end
    end
  end
  ;
  FFDREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFDREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFDREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3770" ("A ", SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "640"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VRCMTH01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG07640

// obtain contemporaneous month
Function FG07S-10()
  FG07S-11(); /* get invoice cutoff date*/
  ;
  FG07W00.FG07WCD1 = FF1REC.FF1IVCDT;
  ;
  if (XX0XW01.XX0XWDAT < FG07W00.FG07WCD1 /* curr date < inv cutoff date*/
   || XX0XW01.XX0XWCYM > FG07W00.FG07W-WCYM1) /* curr mon  > inv cutoff mon*/
    FG07W00.FG07W-CONTP-MO = FG07W00.FG07W-WCYM; /* prev mo*/
  else
    if (XX0XW01.XX0XWCYM == FG07W00.FG07W-WCYM1) /* curr mon = inv cutoff mon*/
      FG07W00.FG07W-CONTP-MO = XX0XW01.XX0XWCYM; /* curr mo*/
    end
  end
  ;
  FG07W00.FG07W-WCYM = FG07W00.FG07W-CONTP-MO;
  ;
  if (FG07W00.FG07WWMM == 01)
    FG07W00.FG07WWMM = 12;
    if (FG07W00.FG07WWYY == 00)
      FG07W00.FG07WWCC = FG07W00.FG07WWCC - 1;
      FG07W00.FG07WWYY = 99;
    else
      FG07W00.FG07WWYY = FG07W00.FG07WWYY - 1;
    end
  else
    FG07W00.FG07WWMM = FG07W00.FG07WWMM - 1;
  end
  ;
  FG07W00.FG07W-WCYM1 = FG07W00.FG07W-WCYM; /* contmp mo - 1*/
  ;
end // end FG07S-10

// select 's ' dfcast.vffctl01
Function FG07S-11()
   /* ------------------------------------------------------------*/
   /* obtain next work sheet number dfcast.vffctl01*/
   /* ------------------------------------------------------------*/
  ;
  set FF1REC empty; /* Clear row storage area*/
  ;
  FF1REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FF1REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S11"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VFFCTL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF1REC.FF1GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG07S-11

// Close 'C1' FF2930 sum wksht
Function FG07S-12()
   /* ------------------------------------------------------------*/
   /* close summary worksheet cursor*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "FF2930" ("C1", SQLCA, FFQREC, FFRREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful or zero total, return to the previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indisgrpe that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S12"; /* Module identifisgrpion*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indisgrpe not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indisgrpe system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SUMMARY WORKSHEET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program applisgrpion*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG07S-12

// get line code from vffxrf01
Function FG07S-13()
   /* ------------------------------------------------------------*/
   /* key fields are loaded in the calling process*/
   /* ------------------------------------------------------------*/
  ;
  FF2REC.YSMXDV = "10"; /* division group*/
  FF2REC.XPCCD = FFWREC.XPCCD; /* category*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* type group*/
  ;
  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FFWREC.XPLCD = FF2REC.XPLCD;
      return;
      ;
    end
    if (SQLCA.VAGen_SQLCODE == +100) /* record not found*/
      ;
      FFWREC.XPLCD = " ";
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S13"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S2 ON DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG07S-13

// select dfcast.vrcat001 row
Function FG07S01()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vrcat001 table.*/
   /* ------------------------------------------------------------*/
  ;
  FFCREC.YPGCD = FFWREC.YPGCD; /* product type code*/
  FFCREC.XPCCD = FFWREC.XPCCD; /* product cat code*/
  ;
  try
    call "IO3760" ("S ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S01"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VRCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG07S01

// select 's1' dfcast.vrcmth01
Function FG07S02()
   /* ------------------------------------------------------------*/
   /* Select set on dfcast.vrcmth01 table.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* load fffrec record*/
   /* ------------------------------------------------------------*/
  ;
  FFFFUNCD = "S1";
  ;
   /* ------------------------------------------------------------*/
   /* load ffdrec record*/
   /* ------------------------------------------------------------*/
  ;
  FFDREC.YPGCD = FFWREC.YPGCD;
  FFDREC.XPCCD = FFWREC.XPCCD;
  ;
   /* ------------------------------------------------------------*/
   /* select set dfcast.vrcmth01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3770" (FFFREC, SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S02"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET DFCAST.VRCMTH01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG07S02

// fetch 'n1' dfcast.vrcmth01
Function FG07S03()
   /* ------------------------------------------------------------*/
   /* fetch dfcast.vrcmth01 row*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "N1";
  ;
  try
    call "IO3770" (FFFREC, SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S03"; /* MODULE IDENTIFICATION*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DFCAST.VRCMTH01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG07S03

// close 'c1' dfcast.vrcmth01
Function FG07S04()
   /* ------------------------------------------------------------*/
   /* close dfcast.vrcmth01 table.*/
   /* ------------------------------------------------------------*/
  FFFREC.FFFFUNCD = "C1";
  ;
  try
    call "IO3770" (FFFREC, SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
    return;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "S04"; /* MODULE IDENTIFICATION*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C1 DFCAST.VRCMTH01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG07S04

// get actual prop dmnd qtys
Function FG07S05()
  ;
   /* ------------------------------------------------------------*/
   /* obtain historical actual prop dmnd quantities.*/
   /* ------------------------------------------------------------*/
  ;
  FFFBEGMO = FFZREC.FFZINDMO[FG07WIDX];
  FFFENDMO = FFZREC.FFZINDMO[FG07WIDX];
  ;
  set FH3REC empty;
  ;
  FH3REC.XPCCD = FFWREC.XPCCD; /* product category*/
  FH3REC.XDVCD = FFWREC.YSMXDV; /* division code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* product type code*/
  FH3REC.XLCCD = "10"; /* life cycle code*/
  FH3REC.XCTCD = "USA"; /* country code*/
  FH3REC.XQACD = "01"; /* quality code*/
  FH3REC.YSMXOT = "PR"; /* sum code*/
  FH3REC.FH1PNAC = "*"; /* national account flag*/
  FH3REC.XDSCD = "*"; /* direct ship code*/
  TA1PGMNM = "FG07S05"; /* calling process*/
  ;
   /* --------------------------------------------------*/
   /* select sum on dfhist.vfhcat01 table*/
   /* --------------------------------------------------*/
  ;
  XSFFS50();
  ;
  FG07W00.FG07WUDQ = FH3REC.FH1PAQTY + FH3REC.FH1ALQTY;
  FG07W00.FG07WUDQ = FG07W00.FG07WUDQ + FH3REC.FH2SHP + FH3REC.FH3CNCL;
  ;
  ;
end // end FG07S05

// get prop dmd fcst
Function FG07S06()
  ;
  FG07W00.FG07W-EOF = "N";
  ;
  FG07S08(); /* open summary worksheet cursor*/
  ;
  FG07S09(); /* fetch summary worksheet*/
  ;
  while (FG07W00.FG07W-EOF == "N")
    FG07W00.FG07WUDQ = FFRREC.FFRCPRFC; /* prop fcst*/
    FG07S09(); /* fetch summary worksheet*/
  end
  ;
  FG07S-12(); /* close cursor;*/
  ;
end // end FG07S06

// verify modifiable fields
Function FG07S07()
   /* -----------------------------------------------------*/
   /* verify header modifiable fields*/
   /* -----------------------------------------------------*/
  ;
  FG07W00.FG07WIDX = 1;
  while (FG07W00.FG07WIDX <= 12
   && FG07W01.FG07WHD4[FG07WIDX] <= FFWREC.FFAENDMO)
    ;
    if (FG07M001.FG07MIX4[FG07WIDX] != FG07W01.FG07WIX4[FG07WIDX])
      set FG07M001.FG07MIX4[FG07WIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S07";
    end
    ;
    FG07W00.FG07WIDX = FG07W00.FG07WIDX + 1;
    ;
  end
  ;
  FG07W00.FG07WIDX = 1;
  while (FG07W00.FG07WIDX <= 4)
    ;
    if (FG07M001.FG07MSEL[FG07WIDX] != FG07W01.FG07WSEL[FG07WIDX])
      set FG07M001.FG07MSEL[FG07WIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S07";
    end
    ;
    FG07W00.FG07WIDX = FG07W00.FG07WIDX + 1;
    ;
  end
  ;
  ;
  if (converseVar.eventKey not enter)
    if (FG07M001.XPCCD != FFWREC.XPCCD)
      set FG07M001.XPCCD cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S07";
    end
    ;
    if (FG07M001.YPGCD != FFWREC.YPGCD)
      set FG07M001.YPGCD cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S07";
    end
    ;
    FG07W00.FG07WWED = FFWREC.FFAENDMO;
    if (FG07M001.FG07MERG != FG07W00.FG07WEYM)
      set FG07M001.FG07MERG cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S07";
    end
    ;
    FG07W00.FG07WWBD = FFWREC.FFABEGMO;
    if (FG07M001.FG07MBRG != FG07W00.FG07WBYM)
      set FG07M001.FG07MBRG cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S07";
    end
  end
  ;
  ;
end // end FG07S07

// Open 'S1' FF2930 sum wksht csr
Function FG07S08()
   /* ------------------------------------------------------------*/
   /* select summed prop dmnd fcst from S.R. worksheet.*/
   /* ------------------------------------------------------------*/
  ;
  set FFQREC empty; /* vswhdr01 rec*/
  set FFRREC empty; /* vswitm01 rec*/
  ;
  FFQREC.XWSCD = "01"; /* Worksheet type*/
  FFQREC.XPLCD = FFWREC.XPLCD; /* Product categroy code*/
  FFQREC.XPCCD = FFWREC.XPCCD; /* Product categroy code*/
  FFQREC.YPGCD = FFWREC.YPGCD; /* Product type group code*/
  FFQREC.SYBSTGNB = "*"; /* Style group nbr*/
  FFQREC.FFQMBYMO = -1; /* Main buy month*/
  FFQREC.FFQABYMO = -1; /* Actual buy month*/
  FFQREC.ZZZCHGDT = -1; /* Change date*/
  FFQREC.ZZZCHGTM = -1; /* Change time*/
  ;
  FFQREC.FFAENDMO = FFZREC.FFZINDMO[FG07WIDX]; /* end month*/
  FFRREC.FF4FCTMO = FFZREC.FFZINDMO[FG07WIDX]; /* fcst month*/
  ;
   /* ------------------------------------------------------------*/
   /* open summary worksheet cursor*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "FF2930" ("S1", SQLCA, FFQREC, FFRREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful or zero total, return to the previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indisgrpe that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S08"; /* Module identifisgrpion*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indisgrpe not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indisgrpe system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN SUMMARY WORKSHEET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program applisgrpion*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG07S08

// Fetch 'N1' FF2930 next wksht
Function FG07S09()
   /* ------------------------------------------------------------*/
   /* fetch next summary worksheet*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "FF2930" ("N1", SQLCA, FFQREC, FFRREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful or zero total, return to the previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == +100) /* end of cursor*/
      ;
      FG07W00.FG07W-EOF = "Y";
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indisgrpe that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S09"; /* Module identifisgrpion*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indisgrpe not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indisgrpe system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN SUMMARY WORKSHEET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program applisgrpion*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSWHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG07S09

//*** RECORD=FG07W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FG07W00 type basicRecord
  10 FG07WSWR FG07WSWR ; 
  10 FG07WSWF FG07WSWF ; 
  10 FG07W-EOF FG07W-EOF ; 
  10 FG07WNM1 FG07WNM1 ; 
  10 FG07WNM2 FG07WNM2 ; 
  10 FG07WSLC FG07WSLC ; 
  10 FG07WSLF FG07WSLF ; 
  10 FG07WUDQ FG07WUDQ ; 
  10 FG07WUFD FG07WUFD ; 
  10 FG07WHDT FG07WHDT ; 
  10 FG07WIDX FG07WIDX ; 
  10 FG07WWDT FG07WWDT ; 
    15 * num(3) ; 
    15 FG07W-WCYM FG07W-WCYM ; 
      20 FG07WWCC FG07WWCC ; 
      20 FG07WWYM FG07WWYM ; 
        25 FG07WWYY FG07WWYY ; 
        25 FG07WWMM FG07WWMM ; 
  10 FG07WWBD FG07WWBD ; 
    15 * num(3) ; 
    15 FG07WBCC FG07WBCC ; 
    15 FG07WBYM FG07WBYM ; 
      20 FG07WBYY FG07WBYY ; 
      20 FG07WBMM FG07WBMM ; 
  10 FG07WWED FG07WWED ; 
    15 * num(3) ; 
    15 FG07WECC FG07WECC ; 
    15 FG07WEYM FG07WEYM ; 
      20 FG07WEYY FG07WEYY ; 
      20 FG07WEMM FG07WEMM ; 
  10 FG07WCRD FG07WCRD ; 
  10 FG07WCD1 FG07WCD1 ; 
    15 * num(1) ; 
    15 FG07W-WCYM1 FG07W-WCYM1 ; 
      20 FG07W-WCC1 FG07W-WCC1 ; 
      20 FG07W-WYM1 FG07W-WYM1 ; 
        25 FG07W-WYY1 FG07W-WYY1 ; 
        25 FG07W-WMM1 FG07W-WMM1 ; 
    15 FG07W-WDD1 FG07W-WDD1 ; 
  10 FG07W-CONTP-MO FG07W-CONTP-MO ; 
  10 FG07WCD5 FG07WCD5 ; 
  10 FG07WUTQ FG07WUTQ ; 
end // end FG07W00

//*** RECORD=FG07W01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// ***********************
Record FG07W01 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 FG07WSEL FG07WSEL [4] ; 
  10 FG07WHBD FG07WHBD [4] ; 
    15 * num(5) ; 
    15 FG07WHBY FG07WHBY ; 
  10 FG07WHED FG07WHED [4] ; 
    15 * num(5) ; 
    15 FG07WHEY FG07WHEY ; 
  10 FG07WPBD FG07WPBD [3] ; 
    15 * num(5) ; 
    15 FG07WPBY FG07WPBY ; 
  10 FG07WPED FG07WPED [3] ; 
    15 * num(5) ; 
    15 FG07WPEY FG07WPEY ; 
  10 FG07WUVQ FG07WUVQ ; 
  10 FG07WHD1 FG07WHD1 [12] ; 
    15 * num(5) ; 
    15 FG07WDH1 FG07WDH1 ; 
  10 FG07WIX1 FG07WIX1 [12] ; 
  10 FG07WUQ1 FG07WUQ1 [13] ; 
  10 FG07WQT1 FG07WQT1 [13] ; 
  10 FG07WHD2 FG07WHD2 [12] ; 
    15 * num(5) ; 
    15 FG07WDH2 FG07WDH2 ; 
  10 FG07WIX2 FG07WIX2 [12] ; 
  10 FG07WUQ2 FG07WUQ2 [13] ; 
  10 FG07WQT2 FG07WQT2 [13] ; 
  10 FG07WHD3 FG07WHD3 [12] ; 
    15 * num(5) ; 
    15 FG07WDH3 FG07WDH3 ; 
  10 FG07WIX3 FG07WIX3 [12] ; 
  10 FG07WUQ3 FG07WUQ3 [13] ; 
  10 FG07WQT3 FG07WQT3 [13] ; 
  10 FG07WHD4 FG07WHD4 [12] ; 
    15 * num(5) ; 
    15 FG07WDH4 FG07WDH4 ; 
  10 FG07WIX4 FG07WIX4 [12] ; 
end // end FG07W01

// contemporaneous month
DataItem FG07W-CONTP-MO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of file switch
DataItem FG07W-EOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work century
DataItem FG07W-WCC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG07W-WCYM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG07W-WCYM1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work day
DataItem FG07W-WDD1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work month
DataItem FG07W-WMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year and month
DataItem FG07W-WYM1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FG07W-WYY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin century
DataItem FG07WBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range month
DataItem FG07WBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year and month
DataItem FG07WBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range year
DataItem FG07WBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current - 1 month
DataItem FG07WCD1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date +5 month
DataItem FG07WCD5 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date
DataItem FG07WCRD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

DataItem FG07WDH1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG07WDH2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG07WDH3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG07WDH4 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end century
DataItem FG07WECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range month
DataItem FG07WEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end year and month
DataItem FG07WEYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range year
DataItem FG07WEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// heading begin dates
DataItem FG07WHBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

DataItem FG07WHBY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical mthly hds 1 yrs
DataItem FG07WHD1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical mthly hds 2 yrs
DataItem FG07WHD2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical mthly hds 3 yrs
DataItem FG07WHD3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// user created monthly headings
DataItem FG07WHD4 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history dmnd thousands
DataItem FG07WHDT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// heading end dates
DataItem FG07WHED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

DataItem FG07WHEY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem FG07WIDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical index 1 yrs
DataItem FG07WIX1 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical index 2 yrs
DataItem FG07WIX2 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical index 3 yrs
DataItem FG07WIX3 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// user created percents
DataItem FG07WIX4 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 1
DataItem FG07WNM1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 2
DataItem FG07WNM2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history begin dates
DataItem FG07WPBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

DataItem FG07WPBY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history end dates
DataItem FG07WPED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

DataItem FG07WPEY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical qtys 1 yrs
DataItem FG07WQT1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// historical qtys 2 yrs
DataItem FG07WQT2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// historical qtys 3 yrs
DataItem FG07WQT3 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection fields
DataItem FG07WSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection count
DataItem FG07WSLC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection flag
DataItem FG07WSLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FG07WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FG07WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history dmnd  units
DataItem FG07WUDQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history future dmnd
DataItem FG07WUFD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical qtys 1 yrs units
DataItem FG07WUQ1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical qtys 2 yrs units
DataItem FG07WUQ2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical qtys 3 yrs units
DataItem FG07WUQ3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total histoical qty w/s
DataItem FG07WUTQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// unit variance qty
DataItem FG07WUVQ num(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work begin date
DataItem FG07WWBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work century
DataItem FG07WWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date
DataItem FG07WWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work begin date
DataItem FG07WWED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work month
DataItem FG07WWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year and month
DataItem FG07WWYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FG07WWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

