package fg03;

import corpcom2.XPCREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPFF001;
import corpcom3.XPXPC01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS01;
import corpcom4.XSFFS56;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XDMCD;
import corpx1.XPCTBL;
import corpy2.YPGTBL;
import ff.common.FF1REC;
import ff.common.FFFREC;
import ff.common.FFWREC;
import ff.common.FFXREC;
import fg.common.FG1REC;
import fg.common.FG2REC;
import pg.common.PG2REC;
import pg.common.PG4REC;
import pg.common.PG7REC;
import sy.common.SY1STNBR;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import sy.common.SYBSTGNM;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
//*** PROGRAM=FG03 ****
// This application displays a list of product style/colors.
// The user must specify the 'CATEGORY' and 'TYPE'.  The pro-
// will bring back a list of all products meeting the specifi-
// cations.
// 
// If the user doesn't know the code for the 'CATEGORY' or
// the 'TYPE' he wishes to use, he can enter a '?' to ask for
// help.  The program will bring up a pop-up window to show
// all the 'CATEGORIES' or 'TYPES', then the user can select
// the correct code from there.
// 
// The user may scroll forward and backward to view all lines
// by pressing PF7 and PF8.  He may exit to any allowed appli-
// cation, via FAST PATH or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          11/01/89  RHETRI  New application.
//           6/26/91  MDANGE  Change to position on correct
//                            page and next style in the cat
//                            when returning from FF0X.
//           9/24/91  MDANGE  Change to get list of styles from
//                            VSYCLR01 and VSYDVL01.
// *********************
Program FG03 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF1REC FF1REC; // record
  FFFREC FFFREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FG03W00 FG03W00; // record
  FG03W01 FG03W01; // record
  FG1REC FG1REC; // record
  FG2REC FG2REC; // record
  PG2REC PG2REC; // record
  PG4REC PG4REC; // record
  PG7REC PG7REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPCTBL; // table
  use YPGTBL; // table
  use FG03M.FG03M001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FG03M001 initial; /* M001 input/output*/
    set FG03W00 empty; /* Working storage*/
    set FG03W01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    FG03W00.FG03WSWF = "Y"; /* Format the map flag*/
    ;
     /* ------------------------------------------------------------*/
     /* If type is missing, default it to '01'.*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.YPGCD == " ") /* type group code not passed*/
      FFWREC.YPGCD = "01"; /* default to '01'*/
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end
    ;
     /* ------------------------------------------------------------*/
     /* If complete key is present, request data.*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.XPCCD != " " /* If category passed*/
     && FFWREC.YPGCD != " ") /* and type passed*/
      ;
      FG03W00.FG03WSWR = "Y"; /* Request data*/
      ;
    else
      ;
      FG03W00.FG03WSWR = "N"; /* data not requested*/
      ;
    end
    ;
     /* ------------------------------------------------------------*/
     /* Clear unused FFWREC fields.*/
     /* ------------------------------------------------------------*/
    ;
    FFWREC.YSMXDV = "10"; /* Default div grp code*/
    FFWREC.YSMSMDSC = "DOMSTC"; /* Default div grp name*/
    FFWREC.XPLCD = " "; /* Clear line code*/
    FFWREC.XPLABRV = " "; /* Clear line name*/
    FFWREC.SYBSTGNB = " "; /* Clear style grp code*/
    FFWREC.SYBSTGNM = " "; /* Clear style grp name*/
    FFWREC.SY1SSTNM = " "; /* Clear style name*/
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FG03001; /* Converse the main process*/
    ;
    ;
    FG03001: FG03001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FG03001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FG03

// Main process to display a map
Function FG03001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FG03100(); /* Obtain the data to display*/
  ;
  FG03200(); /* Format and display the map*/
  ;
  FG03300(); /* Check attention identifier*/
  ;
  FG03400(); /* Reset fields to normal intensity*/
  ;
  FG03500(); /* Verify the entered data*/
  ;
  FG03600(); /* Process valid input request*/
  ;
  ;
end // end FG03001

// Obtain the data to display
Function FG03100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG03W00.FG03WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  if (FFWREC.YPGCD == " ")
    /* NEXT SENTENCE*/
  else
    if (FFWREC.YPGCD in YPGTBL.YPGCD)
      FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
    end
  end
  if (FFWREC.XPCCD == " ")
    /* NEXT SENTENCE*/
  else
    if (FFWREC.XPCCD in XPCTBL.XPCCD)
      FFWREC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
    end
  end
   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/
  ;
  FG03W00.XXXTSLEN = 555; /* Temporary storage page length*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  ;
  FG03105(); /* Determine date range for PMHDR*/
  FG03107(); /* Get PMHDR*/
  FG03110(); /* Purge any temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain data from VSYCLR01 and VSYDVL01*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain list of style groups from MXPRC table.*/
   /* ------------------------------------------------------------*/
  ;
  FG03W00.FG03WIXM = 1; /* init index*/
  ;
  FG03120(); /* Select MXPRC*/
  FG03130(); /* Fetch MXPRC*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0) /* process unitl end of MXPRC*/
    ;
    /* ------------------------------------------------------------*/
     /* Process all style colors per style group.*/
    /* ------------------------------------------------------------*/
    ;
    FG03170(); /* Process with SYCLR & SYDVL*/
    ;
    FG03130(); /* Fetch MXPRC*/
    ;
  end
  ;
  FG03160(); /* Close MXPRC*/
  ;
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG03W00.FG03WIXM > 1) /* Page was formatted*/
    FG03150(); /* Add page to temporary storage*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG03W00.TA5TSQIX == 0) /* No pages formatted*/
    ;
    FFWREC.XXXMODID = "100"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/
    ;
    return; /* Exit to continue processing*/
    ;
  else
    ;
    FG03W00.XXXTSPAG = 1; /* Desired page number*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  FG03W00.FG03WSWR = "N"; /* Request for data switch*/
  ;
  ;
end // end FG03100

// Determine range for model
Function FG03105()
   /* ------------------------------------------------------------*/
   /* Determine current date as well as beg and end dates for*/
   /* suggested buy model.*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01(); /* get current date*/
  FG03W00.FG03WCWD = XX0XW01.XX0XWDAT; /* save current*/
  FG03106(); /* get futures cutoff date*/
  ;
  FG03W00.FG03WDT1 = FF1REC.FF1FUTDT;
  ;
  FG03W00.FG03WMM1 = FG03W00.FG03WMM1 + 6; /* buy plus one beg date*/
  if (FG03W00.FG03WMM1 > 12)
    FG03W00.FG03WMM1 = FG03W00.FG03WMM1 - 12;
    if (FG03W00.FG03WYY1 == 99)
      FG03W00.FG03WYY1 = FG03W00.FG03WYY1 + 1;
      FG03W00.FG03WYY1 = 00;
    else
      FG03W00.FG03WYY1 = FG03W00.FG03WYY1 + 1;
    end
  end
  ;
  FFWREC.FFABEGMO = FG03W00.FG03WCY1; /* buy month + one month*/
  FFWREC.FFAENDMO = FFWREC.FFABEGMO + 99; /* add 12 months for end month*/
  ;
  ;
end // end FG03105

// Get Futures cutoff
Function FG03106()
  ;
  set FF1REC empty; /* Clear up the storage row*/
  ;
  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "106"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG03106

// Get PMHDR
Function FG03107()
   /* get model header number for the suggested buy model*/
   /* cooresponding to current buy month.*/
  ;
  FG03S07(); /* open PMHDR*/
  FG03S08(); /* fetch PMHDR*/
  if (SQLCA.VAGen_SQLCODE == 100)
    FG03S09(); /* close PMHDR*/
    ;
     /* if model not found subtract one month and try again starting*/
     /* with buy month*/
    ;
    if (FG03W00.FG03WMM1 > 1)
      FG03W00.FG03WMM1 = FG03W00.FG03WMM1 - 1; /* subtract one month*/
    else
      FG03W00.FG03WMM1 = 12;
      if (FG03W00.FG03WYY1 == 00)
        FG03W00.FG03WYY1 = 99;
      else
        FG03W00.FG03WYY1 = FG03W00.FG03WYY1 - 1;
      end
    end
    ;
    FFWREC.FFABEGMO = FG03W00.FG03WCY1; /* buy month*/
    FFWREC.FFAENDMO = FFWREC.FFABEGMO + 99; /* add 12 months for end month*/
    FG03S07(); /* open PMHDR*/
    FG03S08(); /* fetch PMHDR*/
    ;
    ;
  end
  ;
  FG03S09(); /* close PMHDR*/
end // end FG03107

// Purge any temporary storage
Function FG03110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FG03W01 empty; /* M001 display storage*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FG03W00.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FG03W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "110"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG03110

// Open VMXPRC01
Function FG03120()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  ;
  set PG7REC empty; /* Clear copybook.*/
  ;
   /* ------------------------------------------------------------*/
   /* Format FFFREC.*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "S1"; /* Function code*/
  ;
  FFFREC.FFFBEGMO = 0; /* Beg month*/
  FFFREC.FFFENDMO = 999999999; /* End month*/
  ;
   /* ------------------------------------------------------------*/
   /* Format DPRODG.VMXPRC01.*/
   /* ------------------------------------------------------------*/
  ;
  PG7REC.XPCCD = FFWREC.XPCCD; /* product line*/
  PG7REC.YPGCD = FFWREC.YPGCD; /* product type group*/
  PG7REC.PG7MAXPR = 99999.99; /* max price*/
  ;
  PG7REC.YSMXDV = FFWREC.YSMXDV; /* Dom*/
  ;
   /* ------------------------------------------------------------*/
   /* select set dprodg.vmxprc01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO5100" (FFFREC, SQLCA, PG7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
    return;
    ;
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "120"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S1 ON DPRODG.VMXPRC01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMXPRC01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG7REC.PG7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG03120

// Fetch VMXPRC01
Function FG03130()
   /* ------------------------------------------------------------*/
   /* Fetch DPRODG.VMXPRC01.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO5100" ("N1", SQLCA, PG7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "130"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DPRODG.VMXPRC01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMXPRC01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG7REC.PG7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG03130

// Select PMITM
Function FG03135()
   /* ------------------------------------------------------------*/
   /* Clear PMITM copybook.*/
   /* ------------------------------------------------------------*/
  ;
  set FG2REC empty; /* Clear copybook*/
  ;
   /* ------------------------------------------------------------*/
   /* Format call.*/
   /* ------------------------------------------------------------*/
  ;
  FG2REC.FG1MODNB = FG1REC.FG1MODNB; /* Model number*/
  FG2REC.FG2MODMO = FFWREC.FFABEGMO; /* Month*/
  FG2REC.SY1STNBR = PG2REC.SY1STNBR; /* Style number*/
  FG2REC.SY2CLRID = PG2REC.SY2CLRID; /* Color code*/
  FG2REC.XDMCD = PG2REC.XDMCD; /* Dim code*/
  ;
   /* ------------------------------------------------------------*/
   /* Select PMITM.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4020" ("S ", SQLCA, FG2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, set switch, and return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "135"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUM OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG2REC.FG2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG03135

// Save data in display storage
Function FG03140()
  ;
   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG03W00.FG03WSDV == "Y") /* style development*/
    FG03W01.SY1STNBR[FG03WIXM] = PG4REC.PG4STNBR;
    FG03W01.SY2CLRID[FG03WIXM] = " ";
    FG03W01.XDMCD[FG03WIXM] = " ";
    FG03W01.SYBSTGNM[FG03WIXM] = PG4REC.SY1SSTNM;
    FG03W01.SY2CLRAB[FG03WIXM] = " ";
  else
    FG03W01.SY1STNBR[FG03WIXM] = PG2REC.SY1STNBR;
    FG03W01.SY2CLRID[FG03WIXM] = PG2REC.SY2CLRID;
    FG03W01.XDMCD[FG03WIXM] = PG2REC.XDMCD;
    FG03W01.SYBSTGNM[FG03WIXM] = PG2REC.SY1SSTNM;
    FG03W01.SY2CLRAB[FG03WIXM] = PG2REC.SY2CLRAB;
  end
  ;
  FG03W00.FG03WIXM = FG03W00.FG03WIXM + 1; /* Increment line index*/
  ;
   /* ------------------------------------------------------------*/
   /* If the style matches the last style processed in FF0X*/
   /* save the page number and the next column postion on page.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG03W00.FG03WSDV == "Y") /* style development*/
    if (PG4REC.PG4STNBR == FFWREC.SY1STNBR)
      if (FG03W00.FG03WIXM > 15)
        FG03W00.FG03WIDX = 1; /* set column postion*/
        FG03W00.FG03WPAG = FG03W00.TA5TSQIX + 2; /* set page*/
      else
        FG03W00.FG03WIDX = FG03W00.FG03WIXM; /* set column position*/
        FG03W00.FG03WPAG = FG03W00.TA5TSQIX + 1; /* set page*/
      end
    end
  else
    if (PG2REC.SY1STNBR == FFWREC.SY1STNBR
     && PG2REC.SY2CLRID == FFWREC.SY2CLRID
     && PG2REC.XDMCD == FFWREC.XDMCD)
      if (FG03W00.FG03WIXM > 15)
        FG03W00.FG03WIDX = 1; /* set column postion*/
        FG03W00.FG03WPAG = FG03W00.TA5TSQIX + 2; /* set page*/
      else
        FG03W00.FG03WIDX = FG03W00.FG03WIXM; /* set column position*/
        FG03W00.FG03WPAG = FG03W00.TA5TSQIX + 1; /* set page*/
      end
    end
  end
  ;
end // end FG03140

// Add page to temporary storage
Function FG03150()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FG03W01.XXXTSLEN = FG03W00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (FG03W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FG03W01 empty; /* M001 display storage*/
    ;
    FG03W00.FG03WIXM = 1; /* Display line index*/
    ;
    FG03W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "150"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG03150

// Close VMXPRC01
Function FG03160()
   /* ------------------------------------------------------------*/
   /* Close DPRODG.VMXPRC01 table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO5100" ("C1", SQLCA, PG7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
    return;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "160"; /* Module identification*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE S1 DPRODG.VMXPRC01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMXPRC01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG7REC.PG7KEY; /* table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG03160

// Process with VSYCLR01/VSYDVL01
Function FG03170()
   /* ------------------------------------------------------------*/
   /* Load products from SYCLR and SYDVL.*/
   /* ------------------------------------------------------------*/
  ;
  FG03W00.FG03WSDV = "N";
  ;
  FG03171(); /* Open SYCLR*/
  ;
  FG03174(); /* Open SYDVL*/
  ;
  FG03172(); /* Fetch SYCLR*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    ;
    FG03175(); /* Fetch SYDVL*/
    FG03W00.FG03WSDV = "Y"; /* style development table*/
    FG03W00.FG03WSWP = "Y"; /* use product switch*/
    PG2REC.SY1STNBR = PG4REC.PG4STNBR; /* copy to SYCLR fields*/
    PG2REC.SY2CLRID = " ";
    PG2REC.XDMCD = " ";
    ;
  end
  ;
  while (SQLCA.VAGen_SQLCODE == 0) /* Process unitl end of SYCLR and SYDVL*/
    ;
    if (FG03W00.FG03WSDV == "N") /* style color*/
      FG03S06(); /* Check life cycle*/
    end
    ;
    if (FG03W00.FG03WSWP == "Y") /* If use product switch is 'y'*/
      FG03135(); /* select PMITM*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* found on PMITM*/
     && FG03W00.FG03WSWP == "Y") /* If use product switch is 'y'*/
      ;
      /* ------------------------------------------------------------*/
      /* Save data in display storage.*/
      /* ------------------------------------------------------------*/
      ;
      FG03140(); /* Save data*/
      ;
      /* ------------------------------------------------------------*/
      /* If the page is full, add the page to the storage queue.*/
      /* ------------------------------------------------------------*/
      ;
      if (FG03W00.FG03WIXM > 15) /* Page is full*/
        FG03150(); /* Add page to temporary storage*/
      end
      ;
    end
    ;
    FG03172(); /* Fetch SYCLR*/
    ;
    if (SQLCA.VAGen_SQLCODE != 0)
      ;
      FG03175(); /* Fetch SYDVL*/
      FG03W00.FG03WSDV = "Y"; /* style development table*/
      FG03W00.FG03WSWP = "Y"; /* use product switch*/
      PG2REC.SY1STNBR = PG4REC.PG4STNBR; /* copy to SYCLR fields*/
      PG2REC.SY2CLRID = " ";
      PG2REC.XDMCD = " ";
      ;
    end
    ;
  end
  ;
  FG03176(); /* Close SYDVL*/
  FG03177(); /* Close SYCLR*/
  ;
  ;
end // end FG03170

// Open VSYCLR01
Function FG03171()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  ;
  set PG2REC empty; /* Clear copybook*/
  ;
   /* ------------------------------------------------------------*/
   /* Format FFFREC. Use 0 for begin mo, so that all*/
   /* history will show regardless of closeout month.*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "S1"; /* Function code*/
  FFFREC.FFFBEGMO = 0; /* Beg month*/
  FFFREC.FFFENDMO = 999999999; /* End month*/
  ;
   /* ------------------------------------------------------------*/
   /* Open SYCLR.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1PGMNM = "FG03171"; /* Calling process*/
  ;
  PG2REC.XGPCD = COMMAREA.XGPCD; /* gpc code*/
  PG2REC.SYBSTGNB = PG7REC.SYBSTGNB; /* style group*/
  PG2REC.XPRCD = FFWREC.YPGCD; /* type group code*/
  PG2REC.XDVCD1 = FFWREC.YSMXDV; /* division group code*/
  PG2REC.XPCCD = FFWREC.XPCCD; /* category code*/
  ;
   /* ------------------------------------------------------------*/
   /* Call XSFFS56.*/
   /* ------------------------------------------------------------*/
  ;
  XSFFS56(); /* Open SYCLR*/
  ;
  ;
end // end FG03171

// Fetch VSYCLR01
Function FG03172()
   /* ------------------------------------------------------------*/
   /* Format call.*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "N1"; /* Function code*/
  TA1REC.TA1PGMNM = "FG03172"; /* Calling process*/
  ;
   /* ------------------------------------------------------------*/
   /* Fetch SYCLR.*/
   /* ------------------------------------------------------------*/
  ;
  XSFFS56(); /* Fetch dprodg.vsyclr01 row*/
  ;
end // end FG03172

// Open VSYDVL01
Function FG03174()
   /* ------------------------------------------------------------*/
   /* Clear copybook.*/
   /* ------------------------------------------------------------*/
  ;
  set PG4REC empty; /* Clear row storage area*/
  ;
   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/
  ;
  PG4REC.SYBSTGNB = PG7REC.SYBSTGNB; /* style group*/
  ;
   /* ------------------------------------------------------------*/
   /* Select set on dprodg.vsydvl01 table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4390" ("S1", SQLCA, PG4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
    return;
    ;
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "174"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S1 ON DPRODG.VSYDVL01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG4REC.SYBSTGNB; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG03174

// Fetch VSYDVL01
Function FG03175()
   /* ------------------------------------------------------------*/
   /* fetch dprodg.vsydvl01 row*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4390" ("N1", SQLCA, PG4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or not found*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "175"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DPRODG.VSYDVL01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG4REC.SYBSTGNB; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG03175

// Close VSYDVL01
Function FG03176()
   /* close dprodg.vsydvl01 table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4390" ("C1", SQLCA, PG4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
    return;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "176"; /* Module identification*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C1 DPRODG.VSYDVL01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG4REC.SYBSTGNB; /* table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG03176

// Close VSYCLR01
Function FG03177()
   /* ------------------------------------------------------------*/
   /* Format call.*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "C1"; /* Function code*/
  TA1REC.TA1PGMNM = "FG03177"; /* Calling process*/
  ;
   /* ------------------------------------------------------------*/
   /* Close SYCLR.*/
   /* ------------------------------------------------------------*/
  ;
  XSFFS56(); /* Close dprodg.vsyclr01 row*/
  ;
end // end FG03177

// Format and converse the map
Function FG03200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    ;
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG03W00.FG03WSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (FG03W00.FG03WSWF == "Y") /* Map must be formatted*/
      FG03210(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FG03M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FG03M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG03M001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    ;
    FG03M001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/
    ;
    set FG03M001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FG03M001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/
  ;
  COMMAREA.CATOAP = FG03M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG03M001.CAITEM; /* Application data*/
  ;
  ;
end // end FG03200

// Format the display data
Function FG03210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set FG03M001 initial; /* M001 input/output area*/
  ;
  FG03W00.FG03WSWF = "N"; /* Format the map switch*/
  ;
  if (FG03W00.FG03WPAG > 0) /* position on next style if just back from FF0X*/
    FG03W00.XXXTSPAG = FG03W00.FG03WPAG;
    FG03W00.FG03WPAG = 0;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG03W00.TA5TSQIX > 0) /* Pages were formatted*/
    ;
    if (FG03W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      ;
      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      ;
      if (FG03W00.XXXTSPAG > FG03W00.TA5TSQIX) /* Desired greater highest*/
        FG03W00.XXXTSPAG = FG03W00.TA5TSQIX; /* Default to highest*/
      end
      ;
      FG03211(); /* Obtain temporary storage page*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    ;
    set FG03M001.XXXLITPG skip; /* "PAGE" literal*/
    FG03M001.XXXTSPAG = FG03W00.XXXTSPAG; /* Current page*/
    set FG03M001.XXXLITOF skip; /* "OF" literal*/
    FG03M001.TA5TSQIX = FG03W00.TA5TSQIX; /* Highest page*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FG03M001.XPCCD = FFWREC.XPCCD; /* Category*/
  FG03M001.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
  FG03M001.YPGCD = FFWREC.YPGCD; /* Type*/
  FG03M001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
  ;
  if (FG03W00.FG03WIDX > 0) /* check for position of next product*/
    if (FG03W01.SY1STNBR[FG03WIDX] > " ") /* if a prod exists*/
      set FG03M001.FG03MSEL[FG03WIDX] cursor; /* Place cursor*/
    else
      set FG03M001.XPCCD cursor; /* Place cursor*/
    end
    FG03W00.FG03WIDX = 0;
  else
    if (FG03W01.SY1STNBR[1] > " ") /* if a prod exists*/
      set FG03M001.FG03MSEL[1] cursor; /* Place cursor*/
    end
  end
  ;
  FG03W00.FG03WIXM = 1; /* Initialize line index*/
  while (FG03W00.FG03WIXM <= 15 /* Until screen is full*/
   && FG03W01.SY1STNBR[FG03WIXM] > " ") /* and prod exists*/
    ;
    set FG03M001.FG03MSEL[FG03WIXM] normal; /* make 'sel' visable*/
    FG03M001.SY1STNBR[FG03WIXM] = FG03W01.SY1STNBR[FG03WIXM];
    FG03M001.FG03WSTU[FG03WIXM] = FG03W01.FG03WSTU[FG03WIXM];
    FG03M001.SY2CLRID[FG03WIXM] = FG03W01.SY2CLRID[FG03WIXM];
    FG03M001.XDMCD[FG03WIXM] = FG03W01.XDMCD[FG03WIXM];
    FG03M001.SYBSTGNM[FG03WIXM] = FG03W01.SYBSTGNM[FG03WIXM];
    FG03M001.SY2CLRAB[FG03WIXM] = FG03W01.SY2CLRAB[FG03WIXM];
    ;
    FG03W00.FG03WIXM = FG03W00.FG03WIXM + 1; /* Increment line index*/
    ;
  end
  ;
  ;
end // end FG03210

// Obtain TSQ Record
Function FG03211()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  FG03W01.XXXTSLEN = FG03W00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FG03W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FG03W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "211"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG03211

// Check attention identifier
Function FG03300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (FG03W00.FG03WSWR == "Y") /* Request for data*/
      set FG03W01 empty; /* M001 display storage*/
    end
    ;
    FG03W00.FG03WSWF = "Y"; /* Format the map switch*/
    FG03W00.FG03WSWR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG03M001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      FG03110(); /* Purge temporary storage*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
      set FG03M001.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG03M001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FF03"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "FF0X"; /* TO application*/
    end
    ;
    FG03110(); /* Purge temporary storage*/
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/
    ;
    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FG03300

// Reset highlighted fields
Function FG03400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FG03M001.XPCCD initialAttributes; /* category*/
  set FG03M001.YPGCD initialAttributes; /* Type*/
  ;
  set FG03M001.CATOAP initialAttributes; /* TO application*/
  set FG03M001.CAITEM initialAttributes; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG03M001.XPCCD == "?" /* Cat list requested*/
   || FG03M001.YPGCD == "?") /* Type list requested*/
    ;
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  else
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of cat codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG03M001.XPCCD == "?") /* CAt list requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG03M001.XPCCD = FFWREC.XPCCD; /* Restore prior code*/
      FG03M001.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
    else
      FG03M001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FG03M001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FG03M001.XPCCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of type codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG03M001.YPGCD == "?") /* Type list requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  TYPE"; /* Heading*/
    XX0XW02.YPGFFFL = "Y"; /* type flag*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG03M001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FG03M001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
    else
      FG03M001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FG03M001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FG03M001.YPGCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG03400

// Verify the entered data
Function FG03500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG03M001.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FG03M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    ;
    FG03510(); /* Verify scroll request*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* If the search key was changed, verify the key fields.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG03M001.XPCCD != FFWREC.XPCCD /* or cat changed*/
     || FG03M001.YPGCD != FFWREC.YPGCD /* or type changed*/
                                       
     || FG03M001.XPCCD == " "          /* or cat missing*/
     || FG03M001.YPGCD == " ")         /* or type missing*/
      ;
      FG03520(); /* Verify the key fields*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Else, if page was formatted, verify selection.*/
      /* ------------------------------------------------------------*/
      ;
      if (FG03W00.TA5TSQIX > 0) /* Page was formatted*/
        ;
        FG03W00.FG03WIXM = 15; /* Initialize line index*/
        ;
        while (FG03W00.FG03WIXM > 0) /* Until end of lines*/
          ;
          FG03530(); /* Verify selection*/
          ;
          FG03W00.FG03WIXM = FG03W00.FG03WIXM - 1; /* Decrement line number*/
          ;
        end
        ;
      end
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end FG03500

// Verify scroll request
Function FG03510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FG03W00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FG03W00.XXXTSPAG >= FG03W00.TA5TSQIX) /* and no more pages*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Highlight any selection that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  FG03511(); /* Highlight selections*/
  ;
   /* ------------------------------------------------------------*/
   /* Highlight any key field that was changed.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG03M001.XPCCD != FFWREC.XPCCD) /* Cat changed*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG03M001.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
    ;
  end
  ;
  if (FG03M001.YPGCD != FFWREC.YPGCD) /* Type changed*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG03M001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(111); /* Modifications not allowed*/
    ;
  end
  ;
  ;
end // end FG03510

// Highlight any selection
Function FG03511()
   /* ------------------------------------------------------------*/
   /* Indicate an error for any selection that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  FG03W00.FG03WIXM = 15; /* Initialize line index*/
  ;
  while (FG03W00.FG03WIXM > 0) /* Until end of lines*/
    ;
    if (FG03M001.FG03MSEL[FG03WIXM] > " ") /* Selection entered*/
      ;
      FFWREC.XXXMODID = "511"; /* Module identification*/
      set FG03M001.FG03MSEL[FG03WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(219); /* Modifications not allowed*/
      ;
    end
    ;
    ;
    FG03W00.FG03WIXM = FG03W00.FG03WIXM - 1; /* Decrement line number*/
    ;
  end
  ;
  ;
end // end FG03511

// Verify the key fields
Function FG03520()
   /* ------------------------------------------------------------*/
   /* Hightlight any selection that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  FG03511(); /* Highlight selections*/
  ;
   /* ------------------------------------------------------------*/
   /* Verify type.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG03M001.YPGCD in YPGTBL.YPGCD /* Code in table*/
   && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    ;
    FG03M001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
    ;
    FG03M001.YPGABRV = " "; /* Abbreviation*/
    ;
    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FG03M001.YPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify category code.*/
   /* ------------------------------------------------------------*/
  ;
  XPCREC.XPCCD = FG03M001.XPCCD; /* Format key*/
  XPCREC.XGPCD = COMMAREA.XGPCD; /* Format key*/
  ;
  if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* Code in table*/
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    ;
    FG03M001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
    ;
    FG03M001.XPCABRV = " "; /* Abbreviation*/
    ;
    FFWREC.XXXMODID = "520"; /* Module identification*/
    set FG03M001.XPCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/
    ;
  end
  ;
  ;
end // end FG03520

// Verify selection
Function FG03530()
   /* ------------------------------------------------------------*/
   /* If selection was made, ensure an "S" & no prior selections.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG03M001.FG03MSEL[FG03WIXM] > " ") /* Selection was entered*/
    ;
    if (FG03M001.FG03MSEL[FG03WIXM] != "S") /* Valid selection character*/
      ;
      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FG03M001.FG03MSEL[FG03WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(41); /* Indicate only "S" may be used*/
      ;
    else
      ;
      FG03W00.FG03WIX2 = FG03W00.FG03WIXM - 1; /* Set counter*/
      ;
      while (FG03W00.FG03WIX2 > 0) /* While counter greater than 0*/
        if (FG03M001.FG03MSEL[FG03WIX2] > " ") /* Valid selection character*/
          ;
          FFWREC.XXXMODID = "530"; /* Module identification*/
          set FG03M001.FG03MSEL[FG03WIXM] cursor, bold; /* Highlight*/
          converseLib.validationFailed(73); /* More than one selection*/
          ;
        end
        ;
        FG03W00.FG03WIX2 = FG03W00.FG03WIX2 - 1; /* Decrement counter*/
        ;
      end
    end
  end
  ;
  ;
end // end FG03530

// Process valid input request
Function FG03600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  ;
  FG03W00.FG03WSWF = "Y"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If the key was changed, update FFWREC, and request data.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG03M001.XPCCD != FFWREC.XPCCD /* if cat changed*/
   || FG03M001.YPGCD != FFWREC.YPGCD) /* or type changed*/
    ;
    /* ------------------------------------------------------------*/
     /* Update the modifiable data in the FF system commarea.*/
    /* ------------------------------------------------------------*/
    ;
    FFWREC.XPCCD = FG03M001.XPCCD; /* Cat code*/
    FFWREC.YPGCD = FG03M001.YPGCD; /* Type code*/
    ;
    FG03W00.FG03WSWR = "Y"; /* Request for data switch*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    FG03W00.XXXTSPAG = FG03W00.XXXTSPAG - 1; /* Decrement page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    FG03W00.XXXTSPAG = FG03W00.XXXTSPAG + 1; /* Increment page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If line was selected, transfer to display the forecast.*/
   /* ------------------------------------------------------------*/
  ;
  if ("S" in FG03M001.FG03MSEL) /* Line selected*/
    ;
    FFWREC.SY1STNBR = FG03M001.SY1STNBR[sysVar.arrayIndex]; /* style code*/
    FFWREC.SY2CLRID = FG03M001.SY2CLRID[sysVar.arrayIndex]; /* color code*/
    FFWREC.XDMCD = FG03M001.XDMCD[sysVar.arrayIndex]; /* dim code*/
    ;
    COMMAREA.CATOAP = "FF0X"; /* TO application*/
    ;
    FG03610(); /* Transfer to display forecast*/
    ;
  end
  ;
  ;
end // end FG03600

// Transfer to display forecast
Function FG03610()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage and transfer control to the*/
   /* forecast application.*/
   /* ------------------------------------------------------------*/
  ;
  FG03110(); /* Purge any temporary storage*/
  ;
  XSFFS01(); /* Exit to another application*/
  ;
   /* ------------------------------------------------------------*/
   /* If the request failed, display the returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  COMMAREA.CATOAP = " "; /* TO application*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG03610

// Check life cycle dates
Function FG03S06()
   /* ------------------------------------------------------------*/
   /* Check life cycle dates.*/
   /* ------------------------------------------------------------*/
  ;
  FG03W00.FG03WLCC = " "; /* Saved life cycle code*/
  FG03W00.FG03WLCD = 0; /* Saved life cycle date*/
  ;
  if (PG2REC.SY2CEDT1 <= FG03W00.FG03WCWD
   && PG2REC.SY2CEDT1 > FG03W00.FG03WLCD)
    FG03W00.FG03WLCC = PG2REC.XLCCD1; /* Saved life cyc cd*/
    FG03W00.FG03WLCD = PG2REC.SY2CEDT1; /* Saved life cyc dt*/
  end
  ;
  if (PG2REC.SY2CEDT2 <= FG03W00.FG03WCWD
   && PG2REC.SY2CEDT2 > FG03W00.FG03WLCD)
    FG03W00.FG03WLCC = PG2REC.XLCCD2; /* Saved life cyc cd*/
    FG03W00.FG03WLCD = PG2REC.SY2CEDT2; /* Saved life cyc dt*/
  end
  ;
  if (PG2REC.SY2CEDT3 <= FG03W00.FG03WCWD
   && PG2REC.SY2CEDT3 > FG03W00.FG03WLCD)
    FG03W00.FG03WLCC = PG2REC.XLCCD3; /* Saved life cyc cd*/
    FG03W00.FG03WLCD = PG2REC.SY2CEDT3; /* Saved life cyc dt*/
  end
  ;
  if (PG2REC.SY2CEDT4 <= FG03W00.FG03WCWD
   && PG2REC.SY2CEDT4 > FG03W00.FG03WLCD)
    FG03W00.FG03WLCC = PG2REC.XLCCD4; /* Saved life cyc cd*/
    FG03W00.FG03WLCD = PG2REC.SY2CEDT4; /* Saved life cyc dt*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Check life cycle dates.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (FG03W00.FG03WLCC == "15"
   || FG03W00.FG03WLCC == "25"
   || FG03W00.FG03WLCC == "20")
    FG03W00.FG03WSWP = "N"; /* Use product switch*/
    ;
  else
    if (FG03W00.FG03WLCC == "10"
     || FG03W00.FG03WLCC == "05")
      FG03W00.FG03WSWP = "Y"; /* Use product switch*/
    else
      ;
      FG03W00.FG03WSWP = "N"; /* Use product switch*/
      ;
    end
  end
  ;
  ;
  ;
end // end FG03S06

// Open PMHDR
Function FG03S07()
   /* ------------------------------------------------------------*/
   /* Format PMHDR call.*/
   /* ------------------------------------------------------------*/
  ;
  set FG1REC empty; /* Clear row storage area*/
  ;
  FG1REC.FG1BEGMO = FFWREC.FFABEGMO; /* Begin month*/
  FG1REC.FG1ENDMO = FFWREC.FFAENDMO; /* End month*/
  FG1REC.XMSCD = "03"; /* 'Selected' status code*/
  FG1REC.FG1MDIND = "*"; /* Model type indicator*/
  ;
   /* ------------------------------------------------------------*/
   /* Open PMHDR.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4010" ("S1", SQLCA, FG1REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S07"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* 'Resources unavailable'*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFHIST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG1REC.FG1KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG03S07

// Fetch PMHDR
Function FG03S08()
   /* ------------------------------------------------------------*/
   /* Fetch PMHDR.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4010" ("N1", SQLCA, FG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.  The edit*/
   /* assured us that the header exists, otherwise a message was*/
   /* sent to the user from the edit and you would not be here.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S08"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFHIST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = FG1REC.FG1KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG03S08

// Close PMHDR
Function FG03S09()
   /* ------------------------------------------------------------*/
   /* Close PMHDR.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4010" ("C1", SQLCA, FG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S09"; /* Module identification*/
  converseLib.validationFailed(01); /* 'Error - Please nofity programming'*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMHDR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG03S09

//*** RECORD=FG03W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FG03W00 type basicRecord
  10 FG03WIXM FG03WIXM ; 
  10 FG03WIX2 FG03WIX2 ; 
  10 FG03WSWC FG03WSWC ; 
  10 FG03WSWF FG03WSWF ; 
  10 FG03WSWR FG03WSWR ; 
  10 FG03WSDV FG03WSDV ; 
  10 FG03WSWP FG03WSWP ; 
  10 FG03WLCC FG03WLCC ; 
  10 FG03WLCD FG03WLCD ; 
  10 FG03WCWD FG03WCWD ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 * num(1) ; 
  10 FG03WCNT FG03WCNT ; 
  10 FG03WPAG FG03WPAG ; 
  10 FG03WIDX FG03WIDX ; 
  10 * num(1) ; 
  10 FG03WDT1 FG03WDT1 ; 
    15 * num(1) ; 
    15 FG03WCY1 FG03WCY1 ; 
      20 FG03WCC1 FG03WCC1 ; 
      20 FG03WYY1 FG03WYY1 ; 
      20 FG03WMM1 FG03WMM1 ; 
    15 FG03WDD1 FG03WDD1 ; 
end // end FG03W00

//*** RECORD=FG03W01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FG03W01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(555) ; 
    10 SY1STNBR SY1STNBR [15] ; 
    10 FG03WSTU FG03WSTU [15] ; 
    10 SY2CLRID SY2CLRID [15] ; 
    10 XDMCD XDMCD [15] ; 
    10 SYBSTGNM SYBSTGNM [15] ; 
    10 SY2CLRAB SY2CLRAB [15] ; 
end // end FG03W01

// Work cc
DataItem FG03WCC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Counter for loops
DataItem FG03WCNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Save life cycle date
DataItem FG03WCWD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work CCyymm
DataItem FG03WCY1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work dd
DataItem FG03WDD1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work date
DataItem FG03WDT1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Row for next style position
DataItem FG03WIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index two for stored fields
DataItem FG03WIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for map fields
DataItem FG03WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Save life cycle code
DataItem FG03WLCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save life cycle date
DataItem FG03WLCD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work mm
DataItem FG03WMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page for next style position
DataItem FG03WPAG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style development flag
DataItem FG03WSDV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product status
DataItem FG03WSTU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem FG03WSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FG03WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Good style flag
DataItem FG03WSWP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FG03WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work yy
DataItem FG03WYY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

