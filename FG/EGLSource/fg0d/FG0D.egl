package fg0d;

import corpcom2.XPCREC;
import corpcom2.XPLREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPFF001;
import corpcom3.XPTA0P;
import corpcom3.XPXPC01;
import corpcom3.XPXPL01;
import corpcom3.XPXPR01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS01;
import corpcom4.XSFFS11;
import corpcom4.XSFFS30;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XCTTBL;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx1.XPRTBL;
import corpx2.XPCCD;
import corpx2.XPLCD;
import corpx2.XPRCD;
import corpy2.YPGCD;
import corpy2.YPGTBL;
import ff.common.FF2REC;
import ff.common.FFWREC;
import ff.common.FFXREC;
import ff.common.FFZREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
import ta.common.TARJCL;
import ta.common.TARTYPE;
//*** PROGRAM=FG0D ****
// This application displays the Submit Job Request Menu screen
// and subordinate job submission screens.
// 
// The menu is displayed for the user to select the jobs to be
// submitted.  Another available selection allows the user to
// view the available printers and change the printed output
// destination.
// 
// Job Control Language statements are formatted and submitted
// through the Internal Reader Transient Data Queue (INTR).
// The job executes in batch and all output is routed to the
// remote destination specified through this application.
// 
// The JCL for each job is stored as a table.
// There are two formats available for a JCL statement.
// They are either a fixed or a variable format.
// 
// A fixed statement is identified in the table by a blank JCL
// statement type (TARTYPE).  These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted.  They are identified
// by a non-blank statement type.  The type determines the data
// that is to be substituted and the columns into which it is
// to be placed.
// 
// The data in working storage is substituted and the statement
// is written to the internal reader.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from the menu, only.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          01/08/90  SPOPA   New application.
// FF#2     05/29/90  SPOPA   Allow edit and report of NIL
//                            Forecast without DB2 table load.
// FIX      06/21/90  LDELUH  Change level 2 to calculate
//                            proper end month.
// FF#134   08/21/90  SFORD   Set job completed msg flag = 'y'
// FF159   10/25/90   JJUCH   Added option for printing whole-
//                            sale dollar and b-grade/closeout
//                            reports.
// Fix     04/02/91   JJUCH   When select b-grade/clsout rpt,
//                            no need to select 'SEQUENCE BY'
//                            and allow multipe 'S' for 'REPORT
//                            TYPE'.(for 'UNIT' and 'BGD/CLSOUT
//                            ')
// Fix     04/04/91   JJUCH   Make a note to indicate which
//                            wholesale dollar report is over-
//                            night.
// Fix     04/12/91   JJUCH   Add wholesale $ exception reprot.
// Fix     05/30/91   MDANGE  Change parm card for load NIL
//                            Sales and production forecast.
// FFMAINT 02/20/92   LDELUH  Remove sales region.
// FF1111  05/29/92   SMACMI  All screens which had six month
//                            (fixed length) seasons were
//                            changed to variable length seasns
// FF241A  09/22/92   KSTOKK  Add type code processing for
//                            FG0DM002 for style/color rpt.
// Fix     11/11/92   KSTOKK  Edit combine type code indicator
//                            even if no type codes entered.
// FF241C  12/01/92   KSTOKK  Add type code processing for
//                            FG0DM006 for style group report.
// FF241C  01/12/93   KSTOKK  Add type code processing for
//                            FG0DM006 for style/color report.
// FF241C  01/15/93   KSTOKK  Add type code processing for
//                            FG0DM006 for line/category rpt.
// FF349   01/21/93   JJUCH   Add 2 yr sales by need date comp-
//                            arison report.
// FF241A  02/17/92   KSTOKK  Add type code processing for
//                            FG0DM002 for style group and line
//                            cat reports.
// FF394   03/22/93   JJUCH   change to send report to BUNDLE.
// FF394   06/10/93   JJUCH   Enable line and category report.
//         06/25/93   KGRAHA
// FF412   07/08/93   KGRAHA  Remove Wholesale Dollar Reports
//                            from maps and processes.
// Fix     08/17/93   KGRAHA  Fix select field to contain 'C'
//                            when exiting from a selection.
//         09/10/93   JJUCH   Convert to CSP V4.1 version.
// FF409   03/15/94   JJUCH   Change to report demand based sls
// FF409   05/03/94   KGRAHA  Create Seasonal, 2-Year, and
//                            3-Year report submit screens.
// FF409   06/15/94   JJUCH   De-install unused tbls & recs.
//         12/12/94   CWHIT1  add yr 2000 changes
// d980210a 02/13/98  BMUSTI  fix the problem in gen fg0d rpt
//                             when cc = 20 & yy = 00
// *********************
Program FG0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF2REC FF2REC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  FG0DW00 FG0DW00; // record
  FG0DW01 FG0DW01; // record
  FG0DW02 FG0DW02; // record
  FG0DW20 FG0DW20; // record
  FG0DW21 FG0DW21; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use FG0DT02; // table
  use FG0DT03; // table
  use FG0DT08; // table
  use FG0DT5O {deleteAfterUse = yes}; // table
  use FG0DT51 {deleteAfterUse = yes}; // table
  use FG0DT56 {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use YPGTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use FG0DM.FG0DM020,  // forms
      FG0DM.FG0DM030, 
      FG0DM.FG0DM040, 
      FG0DM.FG0DM050, 
      FG0DM.FG0DM099,
      FG0DM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize the working storage areas and variables.*/
     /* ------------------------------------------------------------*/
    ;
    set TA0PM001 initial; /* M001 input/output*/
    set FG0DM020 initial; /* M020 input/output*/
    set FG0DM030 initial; /* M021 input/output*/
    set FG0DM040 initial; /* M022 input/output*/
    set FG0DM050 initial; /* M023 input/output*/
    set FG0DM099 initial; /* M099 input/output*/
    set FG0DW00 empty; /* Working storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA6REC empty; /* Background job subroutine parameters*/
    ;
     /* ---------------------------------------------------*/
     /* Clear unused fields*/
     /* ---------------------------------------------------*/
    ;
    FFWREC.SYBSTGNB = " "; /* Clear style group number*/
    FFWREC.SYBSTGNM = " "; /* Clear style group name*/
    FFWREC.SY1STNBR = " "; /* Clear style number*/
    FFWREC.SY2CLRID = " "; /* Clear color id*/
    FFWREC.XDMCD = " "; /* Clear dimension code*/
    FFWREC.SY1SSTNM = " "; /* Clear short style name*/
    FFWREC.SY2CLRAB = " "; /* Clear color abrv*/
    FFWREC.XDMABRV = " "; /* Clear dimension abrv*/
    ;
     /* ------------------------------------------------------------*/
     /* Indicate that the output destination must be obtained.*/
     /* ------------------------------------------------------------*/
    ;
    TA6REC.TA6SUBSW = "I"; /* Indicate obtain information*/
    ;
     /* ------------------------------------------------------------*/
     /* Indicate the number of selection lines on the menu.*/
     /* ------------------------------------------------------------*/
    ;
    FG0DW00.FG0DWIXL = 5; /* Number of selection lines*/
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0D001; /* Converse the main process*/
    ;
    ;
    FG0D001: FG0D001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0D001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FG0D

// Monthly Sales forecast report
Function FG0D-200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FG0D-210(); /* Format and display the map*/
  ;
  FG0D-220(); /* Check attention identifier*/
  ;
  FG0D-230(); /* Reset fields to normal intensity*/
  ;
  FG0D-240(); /* Verify the data that was entered*/
  ;
  FG0D-250(); /* Process valid input request*/
  ;
  ;
end // end FG0D-200

// Format and display the map
Function FG0D-210()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/
  ;
  FG0DM020.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FG0DM020.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FG0DM020.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FG0DM020.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FG0DM020.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FG0DM020.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (FFWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FG0DM020.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    FG0DM020.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    ;
    set FG0DM020 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FG0DM020 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  ;
end // end FG0D-210

// Check attention identifier
Function FG0D-220()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    FG0DW00.FG0DMSEL[2] = "C"; /* Indicate selection cancelled*/
    ;
    set FG0DM020 initial; /* m020 input/output*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    ;
    FG0DW00.FG0DWSWX = "Y"; /* Indicate exit requested*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf5)  /* PF5 was not pressed*/
    ;
    FFWREC.XXXMODID = "220"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FG0D-220

// Reset highlighted fields
Function FG0D-230()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  FG0DW00.FG0DWIXM = 1; /* Map line index*/
  ;
  while (FG0DW00.FG0DWIXM <= 4) /* Until end of lines*/
    ;
    set FG0DM020.FG0DM-SEQ[FG0DWIXM] initialAttributes; /* Report sequence selection*/
    ;
    FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM + 1; /* Map line index*/
    ;
  end
  ;
  set FG0DM020.FG0DM-NEED-SHIP-SEL initialAttributes; /* need/ship mo selection*/
  ;
  set FG0DM020.FG0DM-BGD-CLS-RPT initialAttributes; /* bgrd/cls mo selection*/
  ;
  set FG0DM020.FG0DM-BEG-MO initialAttributes; /* Beginning month*/
  set FG0DM020.FG0DM-END-MO initialAttributes; /* Ending month*/
  set FG0DM020.XPLCD initialAttributes; /* Product line*/
  set FG0DM020.YPGCD initialAttributes; /* Product type group*/
  set FG0DM020.XPRCD[1] initialAttributes; /* Product type code*/
  set FG0DM020.XPRCD[2] initialAttributes; /* Product type code*/
  set FG0DM020.XPRCD[3] initialAttributes; /* Product type code*/
  set FG0DM020.XPRCD[4] initialAttributes; /* Product type code*/
  set FG0DM020.FG0DM-COMB-TYP-CDS initialAttributes; /* Combine indicator*/
  set FG0DM020.XPCCD initialAttributes; /* Product category*/
  set FG0DM020.FG0DM-SEAS-END-MO[1] initialAttributes; /* season end month*/
  set FG0DM020.FG0DM-SEAS-END-MO[2] initialAttributes; /* season end month*/
  set FG0DM020.FG0DM-SEAS-END-MO[3] initialAttributes; /* season end month*/
  set FG0DM020.FG0DM-SEAS-END-MO[4] initialAttributes; /* season end month*/
  set FG0DM020.FG0DM-SLS-FCST-MIN initialAttributes; /* sales forecast minimum*/
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM020.XPLCD == "?" /* Product line list requested*/
   || FG0DM020.YPGCD == "?" /* or product type group list requested*/
   || FG0DM020.XPRCD == "?" /* or product type code list requested*/
   || FG0DM020.XPCCD == "?" /* or product category list requested*/
  )                        
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      FFWREC.XXXMODID = "230"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  else
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM020.XPLCD == "?") /* Product line list requested*/
    ;
    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  LINE"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0DM020.XPLCD = " "; /* Clear code*/
      FG0DM020.XPLABRV = " "; /* Abbreviation*/
    else
      FG0DM020.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FG0DM020.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FG0DM020.XPLCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type group codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM020.YPGCD == "?") /* Product type group list requested*/
    ;
    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  TYPE GRP"; /* Heading*/
    XX0XW02.YPGFFFL = "Y"; /* Footwear forecasting flag*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0DM020.YPGCD = " "; /* Clear code*/
      FG0DM020.YPGABRV = " "; /* Abbreviation*/
    else
      FG0DM020.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FG0DM020.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FG0DM020.YPGCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type codes*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM020.XPRCD[1] == "?") /* product type requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PROD TYPE"; /* Heading*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0DM020.XPRCD[1] = "  "; /* Clear code*/
    else
      FG0DM020.XPRCD[1] = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG0DM020.XPRCD[1] cursor; /* Establish cursor position*/
    ;
  end
  ;
  ;
  if (FG0DM020.XPRCD[2] == "?") /* product type requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PROD TYPE"; /* Heading*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0DM020.XPRCD[2] = "  "; /* Clear code*/
    else
      FG0DM020.XPRCD[2] = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG0DM020.XPRCD[2] cursor; /* Establish cursor position*/
    ;
  end
  ;
  ;
  if (FG0DM020.XPRCD[3] == "?") /* product type requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PROD TYPE"; /* Heading*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0DM020.XPRCD[3] = "  "; /* Clear code*/
    else
      FG0DM020.XPRCD[3] = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG0DM020.XPRCD[3] cursor; /* Establish cursor position*/
    ;
  end
  ;
  ;
  if (FG0DM020.XPRCD[4] == "?") /* product type requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PROD TYPE"; /* Heading*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0DM020.XPRCD[4] = "  "; /* Clear code*/
    else
      FG0DM020.XPRCD[4] = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG0DM020.XPRCD[4] cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product category codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM020.XPCCD == "?") /* Product category list requested*/
    ;
    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0DM020.XPCCD = " "; /* Clear code*/
      FG0DM020.XPCABRV = " "; /* Abbreviation*/
    else
      FG0DM020.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FG0DM020.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FG0DM020.XPCCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FFWREC.XXXMODID = "230"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0D-230

// Verify the entered data
Function FG0D-240()
   /* ------------------------------------------------------------*/
   /* Verify season end month.*/
   /* ------------------------------------------------------------*/
  ;
  FG0D-241(); /* validate season end months*/
  ;
   /* ------------------------------------------------------------*/
   /* Verify sales forecast minimum*/
   /* ------------------------------------------------------------*/
  ;
  FG0D-243(); /* validate sales fcst minimum*/
  ;
   /* ------------------------------------------------------------*/
   /* Verify product type codes and combine type code indicator.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM020.FG0DM-COMB-TYP-CDS == "N") /* Combine type codes EQ 'N'*/
    ;
    if (FG0DM020.FG0DM-SEQ[1] == "S") /* Report by line/cat*/
      converseLib.validationFailed(324); /* can't print this report*/
      FFWREC.XXXMODID = "240"; /* error module id*/
      set FG0DM020.FG0DM-SEQ[1] cursor, bold; /* highlight*/
      set FG0DM020.FG0DM-COMB-TYP-CDS bold; /* highlight*/
    end
    ;
    if (FG0DM020.FG0DM-BGD-CLS-RPT == "S") /* b-grade/clsout report*/
      converseLib.validationFailed(324); /* can't print this report*/
      FFWREC.XXXMODID = "240"; /* error module id*/
      set FG0DM020.FG0DM-BGD-CLS-RPT cursor, bold; /* highlight*/
      set FG0DM020.FG0DM-COMB-TYP-CDS bold; /* highlight*/
    end
    ;
  end
  ;
  if (FG0DM020.XPRCD[1] == " " /* Type code(s) not entered*/
   && FG0DM020.XPRCD[2] == " " 
   && FG0DM020.XPRCD[3] == " " 
   && FG0DM020.XPRCD[4] == " " 
   && FG0DM020.XPRCD[5] == " ")
    ;
      /* continue*/
    ;
  else /* Type code(s) entered*/
    ;
    if (FG0DM020.FG0DM-SEQ[2] == "S" /* Report by line/cat*/
     || FG0DM020.FG0DM-SEQ[3] == "S" /* Report by style group*/
     || FG0DM020.FG0DM-SEQ[4] == "S") /* Report by style/color*/
      ;
      FG0D-242(); /* Validate type codes*/
      ;
    else
      ;
      FG0DW00.FG0DWIXM = 5;
      while (FG0DW00.FG0DWIXM >= 1)
        if (FG0DM020.XPRCD[FG0DWIXM] > " ") /* Type code entered*/
          set FG0DM020.XPRCD[FG0DWIXM] bold; /* highlight*/
        end
        FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM - 1;
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid product category code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM020.XPCCD > " ") /* Product category entered*/
    ;
    XPCREC.XPCCD = FG0DM020.XPCCD; /* Product category*/
    XPCREC.XGPCD = COMMAREA.XGPCD; /* GPC*/
    ;
    if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      ;
      FG0DM020.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
      ;
    else
      ;
      FG0DM020.XPCABRV = " "; /* Abbreviation*/
      ;
      FFWREC.XXXMODID = "240"; /* Module identification*/
      set FG0DM020.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Invalid value entered*/
      ;
    end
    ;
  else
    ;
    FG0DM020.XPCABRV = " "; /* Abbreviation*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid product type group code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM020.YPGCD > " " /* Product type group entered*/
   && FG0DM020.YPGCD != "*") /* and not wild card*/
    ;
    if (FG0DM020.YPGCD in YPGTBL.YPGCD /* Code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      ;
      FG0DM020.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      ;
    else
      ;
      FG0DM020.YPGABRV = " "; /* Abbreviation*/
      ;
      FFWREC.XXXMODID = "240"; /* Module identification*/
      set FG0DM020.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Invalid value entered*/
      ;
    end
    ;
  else
    ;
    if (FG0DM020.YPGCD == "* ")
      FG0DM020.YPGABRV = "ALL"; /* Abbreviation*/
    else
      ;
      FG0DM020.YPGABRV = " "; /* Abbreviation*/
      ;
      FFWREC.XXXMODID = "240"; /* Module identification*/
      set FG0DM020.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Required field*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid product line code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM020.XPLCD > " " /* Product line entered*/
   && FG0DM020.XPLCD != "* ") /* and not wild card*/
    ;
    XPLREC.XPLCD = FG0DM020.XPLCD; /* Product line*/
    XPLREC.XGPCD = COMMAREA.XGPCD; /* GPC*/
    ;
    if (XPLREC.XPLKEY in XPLTBL.XPLKEY /* Code in table*/
     && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      ;
      FG0DM020.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      ;
    else
      ;
      FG0DM020.XPLABRV = " "; /* Abbreviation*/
      ;
      FFWREC.XXXMODID = "240"; /* Module identification*/
      set FG0DM020.XPLCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Invalid value entered*/
      ;
    end
    ;
  else
    ;
    if (FG0DM020.XPLCD == "*") /* Wild card*/
      FG0DM020.XPLABRV = "ALL"; /* Abbreviation*/
    else
      ;
      FG0DM020.XPLABRV = " "; /* Abbreviation*/
      ;
      if (FG0DM020.FG0DM-SEQ[1] == "S" /* line report was selected*/
       || FG0DM020.FG0DM-SEQ[2] == "S") /* category report was selected*/
        ;
        FFWREC.XXXMODID = "240"; /* Module identification*/
        set FG0DM020.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(8); /* Required field*/
        ;
      end
      ;
      if (FG0DM020.FG0DM-SEQ[3] == "S" /* Style grp rpt was selected*/
       || FG0DM020.FG0DM-SEQ[4] == "S") /* Style clr rpt was selected*/
        ;
        if (FG0DM020.XPCCD == "  ") /* No category entered*/
          ;
          FFWREC.XXXMODID = "240"; /* Module identification*/
          set FG0DM020.XPLCD cursor, bold; /* Highlight*/
          set FG0DM020.XPCCD bold;
          converseLib.validationFailed(8); /* Required field*/
          ;
        end
      end
      ;
    end
    ;
  end
  ;
   /* --------------------------------------------------------------*/
   /* Verify the relationship between line, type group and category*/
   /* --------------------------------------------------------------*/
  ;
  FG0D-244(); /* call ffxrf01 table*/
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid date range was entered.*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty; /* Subroutine parameters*/
  ;
  FFZREC.FFZBYYMM = FG0DM020.FG0DM-BEG-MO; /* Beginning month*/
  FFZREC.FFZEYYMM = FG0DM020.FG0DM-END-MO; /* Ending month*/
  ;
  FFZREC.FFZSRANG = "Y"; /* Accept any beginning month*/
  ;
  TA1REC.TA1PGMNM = "FG0D240"; /* Calling process*/
  ;
  XSFFS30(); /* Edit the date range*/
  ;
  if (FFZREC.FFZENDRC == "0") /* Valid ending month*/
    ;
     /* NEXT SENTENCE*/
    ;
  else
    ;
    FFWREC.XXXMODID = "240"; /* Module identification*/
    set FG0DM020.FG0DM-END-MO cursor, bold; /* Highlight*/
    converseLib.validationFailed(17); /* Invalid date entered*/
    ;
  end
  ;
  if (FFZREC.FFZBEGRC == "0") /* Valid beginning month*/
    ;
     /* NEXT SENTENCE*/
    ;
  else
    ;
    FFWREC.XXXMODID = "240"; /* Module identification*/
    set FG0DM020.FG0DM-BEG-MO cursor, bold; /* Highlight*/
    converseLib.validationFailed(17); /* Invalid date entered*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify combine type*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM020.FG0DM-COMB-TYP-CDS != "N" /* Combine type codes*/
   && FG0DM020.FG0DM-COMB-TYP-CDS != "Y")
    FFWREC.XXXMODID = "240"; /* Module identification*/
    converseLib.validationFailed(10); /* Invalid selection code*/
    set FG0DM020.FG0DM-COMB-TYP-CDS cursor, bold; /* Highlight*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify B-grade/closeout report selection*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM020.FG0DM-BGD-CLS-RPT != "S" /* b-grade/closeout report*/
   && FG0DM020.FG0DM-BGD-CLS-RPT != " ") /* b-grade/closeout report*/
    FFWREC.XXXMODID = "240"; /* Module identification*/
    converseLib.validationFailed(10); /* Invalid selection code*/
    set FG0DM020.FG0DM-BGD-CLS-RPT cursor, bold; /* Highlight*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify need month or ship month selection*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM020.FG0DM-NEED-SHIP-SEL != "N"
   && FG0DM020.FG0DM-NEED-SHIP-SEL != "S")
    FFWREC.XXXMODID = "240"; /* Module identification*/
    converseLib.validationFailed(10); /* Invalid selection code*/
    set FG0DM020.FG0DM-NEED-SHIP-SEL cursor, bold; /* Highlight*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify sequence by selection*/
   /* ------------------------------------------------------------*/
  ;
  FG0DW00.FG0DWIXM = 4;
  while (FG0DW00.FG0DWIXM >= 1)
    if (FG0DM020.FG0DM-SEQ[FG0DWIXM] != "S"
     && FG0DM020.FG0DM-SEQ[FG0DWIXM] != " ") /**/
      FFWREC.XXXMODID = "240"; /* Module identification*/
      converseLib.validationFailed(10); /* Invalid selection code*/
      set FG0DM020.FG0DM-SEQ[FG0DWIXM] cursor, bold; /* Highlight*/
    end
    FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM - 1;
  end
  ;
  if (FG0DM020.FG0DM-SEQ[1] == " "
   && FG0DM020.FG0DM-SEQ[2] == " "
   && FG0DM020.FG0DM-SEQ[3] == " "
   && FG0DM020.FG0DM-SEQ[4] == " "
   && FG0DM020.FG0DM-BGD-CLS-RPT == " ") /* no report selected*/
    FFWREC.XXXMODID = "240"; /* Module identification*/
    converseLib.validationFailed(8); /* required field*/
    set FG0DM020.FG0DM-SEQ[1] cursor, bold; /* Highlight*/
    set FG0DM020.FG0DM-SEQ[2] bold; /* Highlight*/
    set FG0DM020.FG0DM-SEQ[3] bold; /* Highlight*/
    set FG0DM020.FG0DM-SEQ[4] bold; /* Highlight*/
    set FG0DM020.FG0DM-BGD-CLS-RPT bold; /* Highlight*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end
  ;
end // end FG0D-240

// Validate season end months
Function FG0D-241()
   /* ------------------------------------------------------------*/
   /* validate season lengths*/
   /* determine the number of seasons entered, look backwards*/
   /* data found.*/
   /* ------------------------------------------------------------*/
  ;
  move "    " to FG0DW00.FG0DSNDT[1] for all; /* spaces to season end dates*/
  ;
  FG0DW00.FG0DWNSS = 0; /* zero out number of seasons*/
  FG0DW00.FG0DWIXM = 4; /* index*/
  while (FG0DW00.FG0DWIXM > 0)
    if (FG0DM020.FG0DM-SEAS-END-MO[FG0DWIXM] > 0)
      FG0DW00.FG0DWNSS = FG0DW00.FG0DWIXM; /* number of seasons*/
      FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM - 4; /* force out of loop*/
    else
      FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM - 1;
    end
  end
  ;
     /* look for season end months greater than 12*/
  ;
  FG0DWIXM = 1; /* 0 to index*/
  while (FG0DW00.FG0DWIXM <= FG0DWNSS)
    if (FG0DM020.FG0DM-SEAS-END-MO[FG0DWIXM] > 12)
      FFWREC.XXXMODID = "241"; /* Module identification*/
      set FG0DM020.FG0DM-SEAS-END-MO[FG0DWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Invalid data*/
      FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM + 1;
    else
      FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM + 1;
    end
  end
  ;
  if (converseVar.validationMsgNum > 0) /* errors found*/
    return; /* get out*/
  end
  ;
   /* If no season end month entered then check the length of the range,*/
   /* if <= 6 months use default (end month of the range)*/
  ;
  FG0DW00.FG0DBDAT = FG0DM020.FG0DM-BEG-MO;
  FG0DW00.FG0DEDAT = FG0DM020.FG0DM-END-MO;
  ;
  if (FG0DW00.FG0DWNSS == 0) /* no season lengths found*/
    if (FG0DW00.FG0DBYY == FG0DW00.FG0DEYY) /* same year*/
      FG0DW00.FG0DW-MON-COUNT = FG0DW00.FG0DEMM - FG0DW00.FG0DBMM + 1;
    else
      FG0DW00.FG0DW-MON-COUNT = FG0DW00.FG0DEMM + 12 - FG0DW00.FG0DBMM + 1;
    end
    ;
    if (FG0DW00.FG0DW-MON-COUNT <= 6)
      FG0DW00.FG0DWNSS = 1;
      FG0DM020.FG0DM-SEAS-END-MO[1] = FG0DW00.FG0DEMM; /* seas end mo*/
    end
  end
  ;
   /* look for no seasons entered with line report, b-grade report*/
  ;
  if (FG0DW00.FG0DWNSS == 0) /* no season lengths found*/
    if (FG0DM020.FG0DM-SEQ[1] == "S" /* if line/type*/
     || FG0DM020.FG0DM-SEQ[2] == "S" /* or line/cat*/
     || FG0DM020.FG0DM-BGD-CLS-RPT == "S") /* or b-grade rpt*/
      if (FG0DM020.XPCCD == "  ") /* no category entered*/
        FFWREC.XXXMODID = "241"; /* Module identification*/
        set FG0DM020.FG0DM-SEAS-END-MO[1] cursor, bold; /* Highlight*/
        converseLib.validationFailed(448); /* sesn end must be entered w/ no cat*/
        return; /* return to previous routine*/
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* default to category seasons if end months not entered*/
   /* ------------------------------------------------------------*/
  if (FG0DW00.FG0DWNSS == 0) /* no season lengths found*/
    ;
    if (FG0DM020.XPCCD != " ") /* category code entered*/
      set FF2REC empty;
      FF2REC.YPGCD = FG0DM020.YPGCD; /* type group code*/
      FG0D-2411(); /* use sesn end months from*/
                                   /* vffxrf01 table*/
   /* ------------------------------------------------------------*/
   /* determine season lengths from category table*/
   /* ------------------------------------------------------------*/
      if (VAGen_SQLCODE == 0)
        FG0DWIXM = 1;
        FG0DW00.FG0DSNLN = 0; /* zero sesn length*/
        while (FG0DWIXM <= FF2REC.FF2NSEAS)
          FG0DW00.FG0D1DAT = FF2REC.FF2SEASN[FG0DWIXM];
          FG0DW00.FG0DWKMO = FG0DM020.FG0DM-BEG-MO;
          if (FG0DW00.FG0D1MM == FG0DW00.FG0DWKMO) /* category month =*/
                                   /* screen begin month?*/
            FG0DW00.FG0DBDAT = FG0DM020.FG0DM-BEG-MO - 1; /* get sesn end*/
                                   /* from begin dte on screen*/
            if (FG0DBMM == 00)
              FG0DW00.FG0DBDAT = FG0DW00.FG0DBDAT - 88;
            end
            FG0DW00.FG0DWDAT = FG0DW00.FG0DBDAT;
                                   /* save orig sesn end*/
            FG0DWIXM = 1;
            FG0DWIX2 = 2;
            while (FG0DWIX2 <= FF2REC.FF2NSEAS) /* while more cat dates*/
              FG0DW00.FG0D1DAT = FF2REC.FF2SEASN[FG0DWIXM];
              FG0DW00.FG0D2DAT = FF2REC.FF2SEASN[FG0DWIX2];
              if (FG0DW00.FG0D2YY > FG0DW00.FG0D1YY)
                FG0DW00.FG0DWKMO = FG0DW00.FG0D2MM + 12;
              else
                FG0DW00.FG0DWKMO = FG0DW00.FG0D2MM + 0;
              end
                                   /* season length =*/
   /* sesn1 mos - sesn2 mos*/
   /* + sesn length*/
              FG0DW00.FG0DSNLN = FG0DW00.FG0DWKMO - FG0DW00.FG0D1MM               + FG0DW00.FG0DSNLN;
              ;
              FG0DBDAT = FG0DWDAT + FG0DSNLN; /* add sesn1 length to*/
                                   /* get sesn 1 end*/
              if (FG0DBMM > 12)
                FG0DBDAT = FG0DBDAT + 88; /* convert to next year*/
              end
              FG0DM020.FG0DM-SEAS-END-MO[FG0DWIXM] = FG0DBDAT;
              FG0DW00.FG0DSNDT[FG0DWIXM] = FG0DBDAT; /* to w00*/
              ;
              FG0DWIXM = FG0DWIXM + 1;
              FG0DWIX2 = FG0DWIX2 + 1; /* bump indexes*/
            end /* end of nested loop*/
            ;
            FG0DBDAT = FG0DWDAT + 100; /* get last sesn end*/
            ;
            if (FG0DBMM > 12)
              FG0DBDAT = FG0DBDAT + 88; /* convert to next year*/
            end
            FG0DM020.FG0DM-SEAS-END-MO[FG0DWIXM] = FG0DBDAT; /* to map*/
            FG0DW00.FG0DSNDT[FG0DWIXM] = FG0DBDAT; /* to w00*/
            ;
            FG0DWIXM = 6; /* set indx to leave 1st loop*/
            ;
          else
            FG0DWIXM = FG0DWIXM + 1; /* bump index and continue*/
          end
        end /* end of 1st loop*/
        if (FG0DWIXM != 6) /* indx not 6 - no hit on begin date*/
          FFWREC.XXXMODID = "241"; /* Module identification*/
          set FG0DM020.FG0DM-SEAS-END-MO[1] cursor, bold; /* Highlight*/
          converseLib.validationFailed(442); /* begin date ne category date*/
          return; /* return to previous routine*/
        end
      else
        FFWREC.XXXMODID = "241"; /* Module identification*/
        set FG0DM020.XPCCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(174); /* sqlcode = -100*/
        return; /* return to previous routine*/
      end
    else
      FFWREC.XXXMODID = "241"; /* Module identification*/
      set FG0DM020.XPCCD cursor, bold; /* Highlight*/
      set FG0DM020.FG0DM-SEAS-END-MO[1] bold; /* Highlight*/
      converseLib.validationFailed(443); /* no ends mos, no cat entered*/
      return; /* return to previous routine*/
    end
    ;
  else
              /* ** season end months were entered ****/
    ;
    FG0DW00.FG0DWIXM = 1; /* index*/
    while (FG0DW00.FG0DWIXM <= FG0DW00.FG0DWNSS) /* for number of seasons*/
      if (FG0DM020.FG0DM-SEAS-END-MO[FG0DWIXM] == 0)
                                   /* check for embedded zeros*/
        FFWREC.XXXMODID = "241"; /* Module identification*/
        set FG0DM020.FG0DM-SEAS-END-MO[FG0DWIXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(440); /* embedded zero msg*/
        return; /* return to previous routine*/
      else
        FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM + 1;
      end
    end
    ;
      /* ------------------------------------------------------------*/
       /* Verify range end month with the season end month.*/
      /* ------------------------------------------------------------*/
    FG0DW00.FG0DWIXM = FG0DW00.FG0DWNSS; /* last season number*/
    FG0DW00.FG0DWDAT = FG0DM020.FG0DM-END-MO; /* end date to work area*/
    ;
    if (FG0DW00.FG0DWMM != FG0DM020.FG0DM-SEAS-END-MO[FG0DWIXM])
                                   /* end mo <> last sesn mo*/
      FFWREC.XXXMODID = "241"; /* Module identification*/
      set FG0DM020.FG0DM-SEAS-END-MO[FG0DWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(447); /* last season must complete year*/
      return; /* return to previous routine*/
    end
      /* ------------------------------------------------------------*/
       /* Verify that season end months are valid.*/
      /* ------------------------------------------------------------*/
    FG0DWIXM = 1; /* reset index*/
    FG0DW00.FG0DWDAT = FG0DM020.FG0DM-BEG-MO; /* begin date to work*/
    ;
      /* set up season end YYMM in fg0dw02*/
    ;
    FG0DW00.FG0D1DAT = FG0DM020.FG0DM-BEG-MO; /* save begin date*/
    FG0DW00.FG0DSNYY[1] = FG0DW00.FG0DWYY; /* move year*/
    while (FG0DWIXM <= FG0DW00.FG0DWNSS)
      FG0DW00.FG0DSNMM[FG0DWIXM] = FG0DM020.FG0DM-SEAS-END-MO[FG0DWIXM]; /* move month*/
      ;
      if (FG0DW00.FG0DWMM > FG0DW00.FG0DSNMM[FG0DWIXM] /* bgn mo > end*/
       && FG0DW00.FG0D1YY == FG0DW00.FG0DWYY)          /* mo & yr not yet bumpd*/
        FG0DWYY = FG0DWYY + 1; /* bump year by 1*/
      end
      ;
      FG0DW00.FG0DSNYY[FG0DWIXM] = FG0DW00.FG0DWYY; /* move year*/
      FG0DWIXM = FG0DWIXM + 1; /* bump index*/
    end
    ;
    FG0DWIXM = 1;
    FG0DWIX2 = 2;
    ;
    while (FG0DWIX2 <= FG0DW00.FG0DWNSS)
      if (FG0DW00.FG0DSNDT[FG0DWIXM] /* sesn > next sesn*/
       >= FG0DW00.FG0DSNDT[FG0DWIX2])
        /* begin tcs*/
        if (FG0DW00.FG0DSNYY[FG0DWIX2] != 00)
          FFWREC.XXXMODID = "241"; /* Module identification*/
          set FG0DM020.FG0DM-SEAS-END-MO[FG0DWIXM] cursor, bold;
                                   /* Highlight*/
          converseLib.validationFailed(444); /* season must > following season*/
          FG0DWIXM = 0;
        end
        /* end tcs*/
      end
      FG0DWIXM = FG0DWIXM + 1; /* bump index*/
      FG0DWIX2 = FG0DWIX2 + 1; /* bump index2*/
    end
    ;
  end
  ;
end // end FG0D-241

// Read vffxrf01 to get seas mos
Function FG0D-2411()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vffxrf01 table row*/
   /* ------------------------------------------------------------*/
  ;
  FF2REC.XPCCD = FG0DM020.XPCCD;
  FF2REC.YSMXDV = "10";
  ;
  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      return;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "241"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0D-2411

// Validate type code
Function FG0D-242()
   /* ------------------------------------------------------------*/
   /* Validate type codes and combine type code indicator*/
   /* ------------------------------------------------------------*/
  ;
   /* Validate type codes*/
  ;
  if (FG0DM020.YPGCD == " ") /* or type group code blank*/
    FFWREC.XXXMODID = "242"; /* error module id*/
    converseLib.validationFailed(203); /* inconsistent relationship*/
    set FG0DM020.YPGCD cursor, bold; /* highlight*/
    set FG0DM020.XPRCD[1] bold; /* highlight*/
    set FG0DM020.XPRCD[2] bold; /* highlight*/
    set FG0DM020.XPRCD[3] bold; /* highlight*/
    set FG0DM020.XPRCD[4] bold; /* highlight*/
  else /* Specific type group code entered*/
    ;
      /* Validate type code*/
    ;
    FG0DW00.FG0DWIXM = 5;
    while (FG0DW00.FG0DWIXM >= 1)
      if (FG0DM020.XPRCD[FG0DWIXM] > " ") /* type code entered*/
        if (FG0DM020.XPRCD[FG0DWIXM] in XPRTBL.XPRCD) /* type code exists*/
          if (XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* type code status 'A'*/
            if (XPRTBL.YPGCD[sysVar.arrayIndex] == FG0DM020.YPGCD) /* typgrps match*/
                /* continue*/
            else
              if (FG0DM020.YPGCD == "*") /* wildcard type group*/
                if (XPRTBL.YPGCD[sysVar.arrayIndex] == "01"
                 || XPRTBL.YPGCD[sysVar.arrayIndex] == "02")
                  ;
                else /* Type group code doesn't correspond*/
                               /* correctly to type code*/
                  FFWREC.XXXMODID = "242"; /* error module id*/
                  converseLib.validationFailed(203); /* inconsistent relationship*/
                  set FG0DM020.YPGCD cursor, bold; /* highlight*/
                  set FG0DM020.XPRCD[FG0DWIXM] bold; /* highlight*/
                end
              else
                FFWREC.XXXMODID = "242"; /* error module id*/
                converseLib.validationFailed(203); /* inconsistent relationship*/
                set FG0DM020.YPGCD cursor, bold; /* highlight*/
                set FG0DM020.XPRCD[FG0DWIXM] bold; /* highlight*/
              end
            end
          else /* type code status not 'A'*/
            FFWREC.XXXMODID = "242"; /* error module id*/
            converseLib.validationFailed(10); /* invalid value*/
            set FG0DM020.XPRCD[FG0DWIXM] cursor, bold; /* highlight*/
          end
        else
          FFWREC.XXXMODID = "242"; /* error module id*/
          converseLib.validationFailed(10); /* invalid value*/
          set FG0DM020.XPRCD[FG0DWIXM] cursor, bold; /* highlight*/
        end
      end
      FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM - 1;
    end
  end
  ;
   /* Check for embedded blanks*/
  ;
  FG0D-2421();
  ;
   /* Check for duplicates*/
  ;
  FG0D-2422();
  ;
end // end FG0D-242

// Check for embedded blanks
Function FG0D-2421()
   /* ------------------------------------------------------------*/
   /* Check for embedded blanks in the list of type codes*/
   /* ------------------------------------------------------------*/
  ;
   /* Check for embedded blanks*/
  ;
  if (FG0DM020.XPRCD[1] == " ")
    if (FG0DM020.XPRCD[2] == " ")
      if (FG0DM020.XPRCD[3] == " ")
        if (FG0DM020.XPRCD[4] == " ")
          /* continue*/
        else
          FFWREC.XXXMODID = "242"; /* error module id*/
          converseLib.validationFailed(10); /* invalid*/
          set FG0DM020.XPRCD[1] cursor, bold; /* highlight*/
          set FG0DM020.XPRCD[2] bold; /* highlight*/
          set FG0DM020.XPRCD[3] bold; /* highlight*/
        end
      else
        FFWREC.XXXMODID = "242"; /* error module id*/
        converseLib.validationFailed(10); /* invalid*/
        set FG0DM020.XPRCD[1] cursor, bold; /* highlight*/
        set FG0DM020.XPRCD[2] bold; /* highlight*/
      end
    else
      FFWREC.XXXMODID = "242"; /* error module id*/
      converseLib.validationFailed(10); /* invalid*/
      set FG0DM020.XPRCD[1] cursor, bold; /* highlight*/
    end
  else
    if (FG0DM020.XPRCD[2] == " ")
      if (FG0DM020.XPRCD[3] == " ")
        if (FG0DM020.XPRCD[4] == " ")
          /* continue*/
        else
          FFWREC.XXXMODID = "242"; /* error module id*/
          converseLib.validationFailed(10); /* invalid*/
          set FG0DM020.XPRCD[2] cursor, bold; /* highlight*/
          set FG0DM020.XPRCD[3] bold; /* highlight*/
        end
      else
        FFWREC.XXXMODID = "242"; /* error module id*/
        converseLib.validationFailed(10); /* invalid*/
        set FG0DM020.XPRCD[2] cursor, bold; /* highlight*/
      end
    else
      if (FG0DM020.XPRCD[3] == " ")
        if (FG0DM020.XPRCD[4] == " ")
          /* continue*/
        else
          FFWREC.XXXMODID = "242"; /* error module id*/
          converseLib.validationFailed(10); /* invalid*/
          set FG0DM020.XPRCD[3] cursor, bold; /* highlight*/
        end
      end
    end
  end
end // end FG0D-2421
// Check for duplicates
Function FG0D-2422()
   /* ------------------------------------------------------------*/
   /* Check for duplicates in the list of type codes*/
   /* ------------------------------------------------------------*/
  ;
   /* Check for duplicates*/
  ;
  if (FG0DM020.XPRCD[3] > " "
   && FG0DM020.XPRCD[3] == FG0DM020.XPRCD[4])
    FFWREC.XXXMODID = "242"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FG0DM020.XPRCD[3] cursor, bold; /* highlight*/
    set FG0DM020.XPRCD[4] bold; /* highlight*/
  end
  if (FG0DM020.XPRCD[2] > " "
   && FG0DM020.XPRCD[2] == FG0DM020.XPRCD[4])
    FFWREC.XXXMODID = "242"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FG0DM020.XPRCD[2] cursor, bold; /* highlight*/
    set FG0DM020.XPRCD[4] bold; /* highlight*/
  end
  if (FG0DM020.XPRCD[2] > " "
   && FG0DM020.XPRCD[2] == FG0DM020.XPRCD[3])
    FFWREC.XXXMODID = "242"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FG0DM020.XPRCD[2] cursor, bold; /* highlight*/
    set FG0DM020.XPRCD[3] bold; /* highlight*/
  end
  if (FG0DM020.XPRCD[1] > " "
   && FG0DM020.XPRCD[1] == FG0DM020.XPRCD[4])
    FFWREC.XXXMODID = "242"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FG0DM020.XPRCD[1] cursor, bold; /* highlight*/
    set FG0DM020.XPRCD[4] bold; /* highlight*/
  end
  if (FG0DM020.XPRCD[1] > " "
   && FG0DM020.XPRCD[1] == FG0DM020.XPRCD[3])
    FFWREC.XXXMODID = "242"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FG0DM020.XPRCD[1] cursor, bold; /* highlight*/
    set FG0DM020.XPRCD[3] bold; /* highlight*/
  end
  if (FG0DM020.XPRCD[1] > " "
   && FG0DM020.XPRCD[1] == FG0DM020.XPRCD[2])
    FFWREC.XXXMODID = "242"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FG0DM020.XPRCD[1] cursor, bold; /* highlight*/
    set FG0DM020.XPRCD[2] bold; /* highlight*/
  end
  ;
end // end FG0D-2422

// Validate sales fcst minimum
Function FG0D-243()
  FFXREC.FFXCHAR = FG0DM020.FG0DM-SLS-FCST-MIN;
  XSFFS11(); /* Translate value format*/
  ;
  if (FFXREC.FFXRTNCD == "0") /* Normal return*/
    ;
    if (FFXREC.FFXNUMB < 0) /* Negative value*/
      ;
      FFWREC.XXXMODID = "243"; /* Module identification*/
      converseLib.validationFailed(10); /* Invalid value entered*/
      set FG0DM020.FG0DM-SLS-FCST-MIN cursor, bold;
      ;
    end
    ;
  else
    ;
    FFWREC.XXXMODID = "243"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate invalid value entered*/
    set FG0DM020.FG0DM-SLS-FCST-MIN cursor, bold;
    ;
  end
  ;
end // end FG0D-243

// Verify lin,typ,cat relationshp
Function FG0D-244()
  ;
  if (FG0DM020.XPLCD != "*"
   && FG0DM020.XPLCD != " "
   && FG0DM020.XPCCD != " ")
    ;
    set FF2REC empty;
    ;
    if (FG0DM020.YPGCD == "*") /* wild card type group*/
      FF2REC.YPGCD = "01";
      FG0D-2411();
      if (SQLCA.VAGen_SQLCODE == +100) /* not found on vffxrf01*/
        FF2REC.YPGCD = "02";
        FG0D-2411();
        if (SQLCA.VAGen_SQLCODE == +100) /* not found on vffxrf01*/
          FG0DM020.XPLABRV = " "; /* Abbreviation*/
          FFWREC.XXXMODID = "240"; /* Module identification*/
          set FG0DM020.XPLCD cursor, bold; /* Highlight*/
          set FG0DM020.YPGCD bold;
          set FG0DM020.XPCCD bold;
          converseLib.validationFailed(203); /* Inconsistent relationship*/
          ;
        end
      end
    else
      FF2REC.YPGCD = FG0DM020.YPGCD;
      FG0D-2411(); /* read vffxrf01*/
    end
    ;
    if (FG0DM020.XPLCD != FF2REC.XPLCD) /* different line code*/
      ;
      FG0DM020.XPLABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "240"; /* Module identification*/
      set FG0DM020.XPLCD cursor, bold; /* Highlight*/
      set FG0DM020.YPGCD bold;
      set FG0DM020.XPCCD bold;
      converseLib.validationFailed(203); /* Inconsistent relationship*/
      ;
    end
    ;
  end
  ;
end // end FG0D-244

// Process valid input request
Function FG0D-250()
   /* ------------------------------------------------------------*/
   /* Indicate the job identification and forms code to be used.*/
   /* ------------------------------------------------------------*/
  ;
   /* ***********************/
   /* line/type report*/
   /* ***********************/
  ;
  if (FG0DM020.FG0DM-SEQ[1] == "S")
    ;
    if (FG0DM020.FG0DM-NEED-SHIP-SEL == "N") /* Need month*/
      FG0DW00.FG0DWJOB = "3201"; /* Job id*/
      FG0DW00.FG0DW-REPT-TYPE = "DMND"; /* Report type*/
    else
      FG0DW00.FG0DWJOB = "3202"; /* Proc id*/
      FG0DW00.FG0DW-REPT-TYPE = "SHIP"; /* Report type*/
    end
    ;
    FG0DW00.FG0DW-FORM = "30"; /* Forms code*/
    FG0DW00.FG0DW-CNTL-PRGM-ID = "320"; /* control card pgm id*/
    FG0DW00.FG0DW-PROC = "320"; /* Proc id*/
    FG0DW00.FG0DW-REPT-EXT = "MONTH"; /* Report extension*/
    ;
    FG0D-251(); /* process line report*/
    ;
  end
  ;
   /* *************************/
   /* bgrade/closeout report*/
   /* *************************/
  ;
  if (FG0DM020.FG0DM-BGD-CLS-RPT == "S") /* B-grade/closeout report*/
    FG0DW00.FG0DWFOR = "67"; /* Forms code*/
    ;
    if (FG0DM020.FG0DM-NEED-SHIP-SEL == "N") /* Need month*/
      FG0DW00.FG0DWJOB = "6861";
    else
      FG0DW00.FG0DWJOB = "6862";
    end
    FG0D-253(); /* process b-grade/closeout report*/
  end
  ;
   /* *************************/
   /* line/category report*/
   /* style group report*/
   /* style color report*/
   /* *************************/
  ;
  ;
  if (FG0DM020.FG0DM-SEQ[2] == "S" /* By line/category*/
   || FG0DM020.FG0DM-SEQ[3] == "S" /* By style group*/
   || FG0DM020.FG0DM-SEQ[4] == "S") /* By style color*/
    ;
    if (FG0DM020.FG0DM-NEED-SHIP-SEL == "N") /* Need month*/
      FG0DW00.FG0DWJOB = "3301";
      FG0DW00.FG0DW-REPT-TYPE = "DMND"; /* Report type*/
    else
      FG0DW00.FG0DWJOB = "3302";
      FG0DW00.FG0DW-REPT-TYPE = "SHIP"; /* Report type*/
    end
    ;
    FG0DW00.FG0DW-COND1 = 1; /* Initialize condition code*/
    FG0DW00.FG0DW-COND2 = 1; /* Initialize condition code*/
    FG0DW00.FG0DW-COND3 = 1; /* Initialize condition code*/
    ;
    FG0DW00.FG0DW-PROC1 = "330"; /* Proc id*/
    FG0DW00.FG0DW-PROC2 = "340"; /* Proc id*/
    FG0DW00.FG0DW-PROC3 = "350"; /* Proc id*/
    FG0DW00.FG0DW-FORM1 = "31"; /* Forms code*/
    FG0DW00.FG0DW-FORM2 = "32"; /* Forms code*/
    FG0DW00.FG0DW-FORM3 = "33"; /* Forms code*/
    ;
    if (FG0DM020.FG0DM-SEQ[2] == "S") /* By line/category*/
      FG0DW00.FG0DW-COND1 = 0; /* set condition code*/
      FG0DW00.FG0DW-CNTL-PRGM-1 = "330"; /* control card pgm id*/
    end
    ;
    if (FG0DM020.FG0DM-SEQ[3] == "S") /* By style group*/
      FG0DW00.FG0DW-CNTL-PRGM-2 = "340"; /* control card pgm id*/
      FG0DW00.FG0DW-COND2 = 0; /* set condition code*/
    end
    ;
    if (FG0DM020.FG0DM-SEQ[4] == "S") /* By style color*/
      FG0DW00.FG0DW-CNTL-PRGM-3 = "350"; /* control card pgm id*/
      FG0DW00.FG0DW-COND3 = 0; /* set condition code*/
    end
    ;
    FG0DW00.FG0DW-REPT-EXT = "MONTH"; /* Report extension*/
    ;
    FG0D-252(); /* process detail report*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "250"; /* Module identification*/
  ;
  if (converseVar.validationMsgNum != 1) /* Call successful*/
    ;
    FG0DW00.FG0DMSEL[2] = "*"; /* Indicate function completed*/
    ;
    set FG0DM020 initial; /* Clear map output area*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0D-250

// Process line/type report
Function FG0D-251()
  ;
   /* ------------------------------------------------------*/
   /* Call sub-routine to find which environment the*/
   /* program is executing in, development or production.*/
   /* ------------------------------------------------------*/
  ;
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    ;
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FG0D-2511(); /* format production JCL*/
    else
      FG0D-2512(); /* format test JCL*/
    end
    ;
  else
    ;
    FFWREC.XXXMODID = "251"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print rqst*/
    ;
  end
  ;
end // end FG0D-251

// FF3201 production JCL
Function FG0D-2511()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  ;
  FG0DW00.FG0DWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FG0DT02.TARTYPE[FG0DWIXT] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      set FG0DW20 empty; /* Parameters work area*/
      ;
      FG0DW20.FG0DW-BEG-MO = FFZREC.FFZBEGMO; /* Beginning month*/
      FG0DW20.FG0DW-END-MO = FFZREC.FFZENDMO; /* Ending month*/
      FG0DW20.XPLCD = FG0DM020.XPLCD; /* Product line*/
      FG0DW20.YPGCD = "*"; /* Force type group code*/
      FG0DW20.FG0DW-SEAS-END-MO[1] = FG0DW00.FG0DSNDT[1];
      FG0DW20.FG0DW-SEAS-END-MO[2] = FG0DW00.FG0DSNDT[2];
      FG0DW20.FG0DW-SEAS-END-MO[3] = FG0DW00.FG0DSNDT[3];
      FG0DW20.FG0DW-SEAS-END-MO[4] = FG0DW00.FG0DSNDT[4];
      FG0DW20.FG0DW-NEED-SHIP-SEL = FG0DM020.FG0DM-NEED-SHIP-SEL;
      FG0DW20.FG0DW-XQA-CD1 = "01"; /* Quality code*/
      FG0DW20.FG0DW-XQA-CD2 = "02"; /* Quality code*/
      FG0DW20.FG0DW-XLC-CD1 = "10"; /* Life cycle code*/
      FG0DW20.FG0DW-XLC-CD2 = "20"; /* Life cycle code*/
      FG0DW20.FG0DW-3YR-2YR-RPT = 0; /* report type*/
      FG0DW20.FG0DW-USER-ID = COMMAREA.CAUSERID; /* user id*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG0DW20.TARJCL; /* Parameters*/
      TA6REC.TARTYPE[TA6INDEX] = FG0DT02.TARTYPE[FG0DWIXT]; /* Type*/
      ;
    else
      ;
      if (FG0DT02.TARTYPE[FG0DWIXT] == "J" /* Job statement*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "E" /* Proc statement - extract*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "X" /* Proc statement - report*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "1" /* report extension*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "2" /* report sequence*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "3" /* report type*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "T" /* report type*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "4" /* forms code*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "R") /* report control card*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        FG0DW02.TARJCL = FG0DT02.TARJCL[FG0DWIXT]; /* JCL*/
        FG0DW02.TARTYPE = FG0DT02.TARTYPE[FG0DWIXT]; /* Type*/
        ;
        FG0DW00.FG0DW-NEED-SHIP-SEL = FG0DM020.FG0DM-NEED-SHIP-SEL;
        ;
        FG0DS-02(); /* Format variable field*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DW02.TARJCL; /* Parameters*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DW02.TARTYPE; /* Type*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DT02.TARJCL[FG0DWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DT02.TARTYPE[FG0DWIXT]; /* Type*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0DT02.TARJCL[FG0DWIXT] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FG0DW00.FG0DWIXT = FG0DW00.FG0DWIXT + 1; /* Input table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "251"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    ;
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    ;
  end
  ;
end // end FG0D-2511

// FF3201 test JCL
Function FG0D-2512()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  ;
  FG0DW00.FG0DWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FG0DT5O.TARTYPE[FG0DWIXT] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      set FG0DW20 empty; /* Parameters work area*/
      ;
      FG0DW20.FG0DW-BEG-MO = FFZREC.FFZBEGMO; /* Beginning month*/
      FG0DW20.FG0DW-END-MO = FFZREC.FFZENDMO; /* Ending month*/
      FG0DW20.XPLCD = FG0DM020.XPLCD; /* Product line*/
      FG0DW20.YPGCD = "*"; /* Force type group code*/
      FG0DW20.FG0DW-SEAS-END-MO[1] = FG0DW00.FG0DSNDT[1];
      FG0DW20.FG0DW-SEAS-END-MO[2] = FG0DW00.FG0DSNDT[2];
      FG0DW20.FG0DW-SEAS-END-MO[3] = FG0DW00.FG0DSNDT[3];
      FG0DW20.FG0DW-SEAS-END-MO[4] = FG0DW00.FG0DSNDT[4];
      FG0DW20.FG0DW-NEED-SHIP-SEL = FG0DM020.FG0DM-NEED-SHIP-SEL;
      FG0DW20.FG0DW-XQA-CD1 = "01"; /* Quality code*/
      FG0DW20.FG0DW-XQA-CD2 = "02"; /* Quality code*/
      FG0DW20.FG0DW-XLC-CD1 = "10"; /* Life cycle code*/
      FG0DW20.FG0DW-XLC-CD2 = "20"; /* Life cycle code*/
      FG0DW20.FG0DW-3YR-2YR-RPT = 0; /* report type*/
      FG0DW20.FG0DW-USER-ID = COMMAREA.CAUSERID; /* user id*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG0DW20.TARJCL; /* Parameters*/
      TA6REC.TARTYPE[TA6INDEX] = FG0DT5O.TARTYPE[FG0DWIXT]; /* Type*/
      ;
    else
      ;
      if (FG0DT5O.TARTYPE[FG0DWIXT] == "J" /* Job statement*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "E" /* Proc statement - extract*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "X" /* Proc statement - report*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "A" /* Run statement  - extract*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "B" /* Run statement  - report*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "1" /* Report extension*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "2" /* Report sequence*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "3" /* Report sequence*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "T" /* Report type*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "4" /* Forms code*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "R") /* Report control card*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        FG0DW02.TARJCL = FG0DT5O.TARJCL[FG0DWIXT]; /* JCL*/
        FG0DW02.TARTYPE = FG0DT5O.TARTYPE[FG0DWIXT]; /* Type*/
        ;
        FG0DW00.FG0DW-NEED-SHIP-SEL = FG0DM020.FG0DM-NEED-SHIP-SEL;
        ;
        FG0DS-02(); /* Format variable field*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DW02.TARJCL; /* Parameters*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DW02.TARTYPE; /* Type*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DT5O.TARJCL[FG0DWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DT5O.TARTYPE[FG0DWIXT]; /* Type*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0DT5O.TARJCL[FG0DWIXT] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FG0DW00.FG0DWIXT = FG0DW00.FG0DWIXT + 1; /* Input table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "251"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    ;
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    ;
  end
  ;
end // end FG0D-2512

// Process cat,stygrp,styclr rpt
Function FG0D-252()
  ;
   /* ------------------------------------------------------*/
   /* Call sub-routine to find which environment the*/
   /* program is executing in, development or production.*/
   /* ------------------------------------------------------*/
  ;
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    ;
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FG0D-2521(); /* format production JCL*/
    else
      FG0D-2522(); /* format test JCL*/
    end
    ;
  else
    ;
    FFWREC.XXXMODID = "252"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print rqst*/
    ;
  end
  ;
end // end FG0D-252

// FF3301 production JCL
Function FG0D-2521()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  ;
  FG0DW00.FG0DWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FG0DT03.TARTYPE[FG0DWIXT] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      set FG0DW21 empty; /* Parameters work area*/
      ;
      FG0DW21.FG0DW-BEG-MO = FFZREC.FFZBEGMO; /* Beginning month*/
      FG0DW21.FG0DW-END-MO = FFZREC.FFZENDMO; /* Ending month*/
      FG0DW21.XPLCD = FG0DM020.XPLCD; /* Product line*/
      FG0DW21.YPGCD = FG0DM020.YPGCD; /* Product type group*/
      FG0DW21.XPCCD = FG0DM020.XPCCD; /* Product category*/
      FG0DW21.FG0DW-SEAS-END-MO[1] = FG0DW00.FG0DSNDT[1];
      FG0DW21.FG0DW-SEAS-END-MO[2] = FG0DW00.FG0DSNDT[2];
      FG0DW21.FG0DW-SEAS-END-MO[3] = FG0DW00.FG0DSNDT[3];
      FG0DW21.FG0DW-SEAS-END-MO[4] = FG0DW00.FG0DSNDT[4];
      FG0DW21.XPRCD[1] = FG0DM020.XPRCD[1]; /* type code*/
      FG0DW21.XPRCD[2] = FG0DM020.XPRCD[2];
      FG0DW21.XPRCD[3] = FG0DM020.XPRCD[3];
      FG0DW21.XPRCD[4] = FG0DM020.XPRCD[4];
      FG0DW21.XPRCD[5] = FG0DM020.XPRCD[5];
      FG0DW21.FG0DW-NEED-SHIP-SEL = FG0DM020.FG0DM-NEED-SHIP-SEL;
      FG0DW21.FG0DW-COMB-TYPE-CD = FG0DM020.FG0DM-COMB-TYP-CDS;
      ;
      FFXREC.FFXCHAR = FG0DM020.FG0DM-SLS-FCST-MIN; /* sls fcst min*/
      XSFFS11();
      FG0DW21.FG0DW-SLS-FCST-MIN-CHAR = FFXREC.FFXCHAR;
      FG0DW21.FG0DW-SLS-FCST-MIN-NUM = FFXREC.FFXNUMB;
      ;
      FG0DW21.FG0DW-3YR-2YR-RPT = 0; /* report type*/
      FG0DW21.FG0DW-USER-ID = COMMAREA.CAUSERID; /* user id*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG0DW21.TARJCL; /* Parameters*/
      TA6REC.TARTYPE[TA6INDEX] = FG0DT03.TARTYPE[FG0DWIXT]; /* Type*/
      ;
    else
      ;
      if (FG0DT03.TARTYPE[FG0DWIXT] == "J" /* Job statement*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "E" /* Proc statement - extract*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "C" /* Proc statement - cat report*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "G" /* Proc statement - stygrp rpt*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "S" /* Proc statement - styclr rpt*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "5" /* Condition*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "6" /* Condition*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "7" /* Condition*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "1" /* report extension*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "2" /* report sequence*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "3" /* report sequence*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "T" /* report type*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "4" /* forms code*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "R") /* report distribution*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        FG0DW02.TARJCL = FG0DT03.TARJCL[FG0DWIXT]; /* JCL*/
        FG0DW02.TARTYPE = FG0DT03.TARTYPE[FG0DWIXT]; /* Type*/
        ;
        FG0DW00.FG0DW-NEED-SHIP-SEL = FG0DM020.FG0DM-NEED-SHIP-SEL;
        ;
        FG0DS-03(); /* Format variable field*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DW02.TARJCL; /* Parameters*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DW02.TARTYPE; /* Type*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DT03.TARJCL[FG0DWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DT03.TARTYPE[FG0DWIXT]; /* Type*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0DT03.TARJCL[FG0DWIXT] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FG0DW00.FG0DWIXT = FG0DW00.FG0DWIXT + 1; /* Input table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "252"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    ;
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    ;
  end
  ;
end // end FG0D-2521

// FF3301 test JCL
Function FG0D-2522()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  ;
  FG0DW00.FG0DWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FG0DT51.TARTYPE[FG0DWIXT] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      set FG0DW21 empty; /* Parameters work area*/
      ;
      FG0DW21.FG0DW-BEG-MO = FFZREC.FFZBEGMO; /* Beginning month*/
      FG0DW21.FG0DW-END-MO = FFZREC.FFZENDMO; /* Ending month*/
      FG0DW21.XPLCD = FG0DM020.XPLCD; /* Product line*/
      FG0DW21.YPGCD = FG0DM020.YPGCD; /* Product type group*/
      FG0DW21.XPCCD = FG0DM020.XPCCD; /* Product category*/
      FG0DW21.FG0DW-SEAS-END-MO[1] = FG0DW00.FG0DSNDT[1];
      FG0DW21.FG0DW-SEAS-END-MO[2] = FG0DW00.FG0DSNDT[2];
      FG0DW21.FG0DW-SEAS-END-MO[3] = FG0DW00.FG0DSNDT[3];
      FG0DW21.FG0DW-SEAS-END-MO[4] = FG0DW00.FG0DSNDT[4];
      FG0DW21.XPRCD[1] = FG0DM020.XPRCD[1]; /* type code*/
      FG0DW21.XPRCD[2] = FG0DM020.XPRCD[2];
      FG0DW21.XPRCD[3] = FG0DM020.XPRCD[3];
      FG0DW21.XPRCD[4] = FG0DM020.XPRCD[4];
      FG0DW21.XPRCD[5] = FG0DM020.XPRCD[5];
      FG0DW21.FG0DW-NEED-SHIP-SEL = FG0DM020.FG0DM-NEED-SHIP-SEL;
      FG0DW21.FG0DW-COMB-TYPE-CD = FG0DM020.FG0DM-COMB-TYP-CDS;
      ;
      FFXREC.FFXCHAR = FG0DM020.FG0DM-SLS-FCST-MIN; /* sls fcst min*/
      XSFFS11();
      FG0DW21.FG0DW-SLS-FCST-MIN-CHAR = FFXREC.FFXCHAR;
      FG0DW21.FG0DW-SLS-FCST-MIN-NUM = FFXREC.FFXNUMB;
      ;
      FG0DW21.FG0DW-3YR-2YR-RPT = 0; /* report type*/
      FG0DW21.FG0DW-USER-ID = COMMAREA.CAUSERID; /* user id*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG0DW21.TARJCL; /* Parameters*/
      TA6REC.TARTYPE[TA6INDEX] = FG0DT51.TARTYPE[FG0DWIXT]; /* Type*/
      ;
    else
      ;
      if (FG0DT51.TARTYPE[FG0DWIXT] == "J" /* Job statement*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "E" /* Proc statement - extract*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "C" /* Proc statement - cat report*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "G" /* Proc statement - stygrp rpt*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "S" /* Proc statement - styclr rpt*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "5" /* Condition - cat report*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "6" /* Condition - stygrp rpt*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "7" /* Condition - styclr rpt*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "A" /* Run statement  - extract*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "B" /* Run statement  - cat report*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "D" /* Run statement  - stygrp rpt*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "F" /* Run statement  - styclr rpt*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "1" /* Report extension*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "2" /* Report sequence*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "3" /* Report sequence*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "T" /* Report type*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "4" /* Forms code*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "R") /* Report distribution*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        FG0DW02.TARJCL = FG0DT51.TARJCL[FG0DWIXT]; /* JCL*/
        FG0DW02.TARTYPE = FG0DT51.TARTYPE[FG0DWIXT]; /* Type*/
        ;
        FG0DW00.FG0DW-NEED-SHIP-SEL = FG0DM020.FG0DM-NEED-SHIP-SEL;
        ;
        FG0DS-03(); /* Format variable field*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DW02.TARJCL; /* Parameters*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DW02.TARTYPE; /* Type*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DT51.TARJCL[FG0DWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DT51.TARTYPE[FG0DWIXT]; /* Type*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0DT51.TARJCL[FG0DWIXT] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FG0DW00.FG0DWIXT = FG0DW00.FG0DWIXT + 1; /* Input table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "252"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    ;
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    ;
  end
  ;
end // end FG0D-2522

// Process bgrade/clsout report
Function FG0D-253()
  ;
   /* ------------------------------------------------------*/
   /* Call sub-routine to find which environment the*/
   /* program is executing in, development or production.*/
   /* ------------------------------------------------------*/
  ;
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    ;
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FG0D-2531(); /* format production JCL*/
    else
      FG0D-2532(); /* format test JCL*/
    end
    ;
  else
    ;
    FFWREC.XXXMODID = "253"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print rqst*/
    ;
  end
  ;
end // end FG0D-253

// FF6861 production JCL
Function FG0D-2531()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  ;
  FG0DW00.FG0DWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FG0DT08.TARTYPE[FG0DWIXT] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      set FG0DW21 empty; /* Parameters work area*/
      ;
      FG0DW21.FG0DW-BEG-MO = FFZREC.FFZBEGMO; /* Beginning month*/
      FG0DW21.FG0DW-END-MO = FFZREC.FFZENDMO; /* Ending month*/
      FG0DW21.XPLCD = FG0DM020.XPLCD; /* Product line*/
      FG0DW21.YPGCD = FG0DM020.YPGCD; /* Product type group*/
      FG0DW21.XPCCD = FG0DM020.XPCCD; /* Product category*/
      FG0DW21.FG0DW-SEAS-END-MO[1] = FG0DW00.FG0DSNDT[1];
      FG0DW21.FG0DW-SEAS-END-MO[2] = FG0DW00.FG0DSNDT[2];
      FG0DW21.FG0DW-SEAS-END-MO[3] = FG0DW00.FG0DSNDT[3];
      FG0DW21.FG0DW-SEAS-END-MO[4] = FG0DW00.FG0DSNDT[4];
      FG0DW21.XPRCD[1] = FG0DM020.XPRCD[1]; /* type code*/
      FG0DW21.XPRCD[2] = FG0DM020.XPRCD[2];
      FG0DW21.XPRCD[3] = FG0DM020.XPRCD[3];
      FG0DW21.XPRCD[4] = FG0DM020.XPRCD[4];
      FG0DW21.XPRCD[5] = FG0DM020.XPRCD[5];
      FG0DW21.FG0DW-NEED-SHIP-SEL = FG0DM020.FG0DM-NEED-SHIP-SEL;
      FG0DW21.FG0DW-COMB-TYPE-CD = FG0DM020.FG0DM-COMB-TYP-CDS;
      ;
      FFXREC.FFXCHAR = FG0DM020.FG0DM-SLS-FCST-MIN; /* sls fcst min*/
      XSFFS11();
      FG0DW21.FG0DW-SLS-FCST-MIN-CHAR = FFXREC.FFXCHAR;
      FG0DW21.FG0DW-SLS-FCST-MIN-NUM = FFXREC.FFXNUMB;
      ;
      FG0DW21.FG0DW-3YR-2YR-RPT = 0; /* report type*/
      FG0DW21.FG0DW-USER-ID = COMMAREA.CAUSERID; /* user id*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG0DW21.TARJCL; /* Parameters*/
      TA6REC.TARTYPE[TA6INDEX] = FG0DT08.TARTYPE[FG0DWIXT]; /* Type*/
      ;
    else
      ;
      if (FG0DT08.TARTYPE[FG0DWIXT] == "R" /* Report distribution*/
       || FG0DT08.TARTYPE[FG0DWIXT] == "1" /* or JOB statement*/
       || FG0DT08.TARTYPE[FG0DWIXT] == "2" /* or EXEC statement*/
       || FG0DT08.TARTYPE[FG0DWIXT] == "3" /* or RUN statement*/
       || FG0DT08.TARTYPE[FG0DWIXT] == "4" /* or PRINTDS statement*/
       || FG0DT08.TARTYPE[FG0DWIXT] == "7" /* or Bundle statement*/
       || FG0DT08.TARTYPE[FG0DWIXT] == "8") /* or Bundle statement*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        FG0DW01.TARJCL = FG0DT08.TARJCL[FG0DWIXT]; /* JCL*/
        FG0DW01.TARTYPE = FG0DT08.TARTYPE[FG0DWIXT]; /* Type*/
        ;
        FG0DS01(); /* Format variable JCL statements*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DT08.TARJCL[FG0DWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DT08.TARTYPE[FG0DWIXT]; /* Type*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0DT08.TARJCL[FG0DWIXT] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FG0DW00.FG0DWIXT = FG0DW00.FG0DWIXT + 1; /* Input table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "253"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    ;
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    ;
  end
  ;
end // end FG0D-2531

// FF6861 test JCL
Function FG0D-2532()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  ;
  FG0DW00.FG0DWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FG0DT56.TARTYPE[FG0DWIXT] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      set FG0DW21 empty; /* Parameters work area*/
      ;
      FG0DW21.FG0DW-BEG-MO = FFZREC.FFZBEGMO; /* Beginning month*/
      FG0DW21.FG0DW-END-MO = FFZREC.FFZENDMO; /* Ending month*/
      FG0DW21.XPLCD = FG0DM020.XPLCD; /* Product line*/
      FG0DW21.YPGCD = FG0DM020.YPGCD; /* Product type group*/
      FG0DW21.XPCCD = FG0DM020.XPCCD; /* Product category*/
      FG0DW21.FG0DW-SEAS-END-MO[1] = FG0DW00.FG0DSNDT[1];
      FG0DW21.FG0DW-SEAS-END-MO[2] = FG0DW00.FG0DSNDT[2];
      FG0DW21.FG0DW-SEAS-END-MO[3] = FG0DW00.FG0DSNDT[3];
      FG0DW21.FG0DW-SEAS-END-MO[4] = FG0DW00.FG0DSNDT[4];
      FG0DW21.XPRCD[1] = FG0DM020.XPRCD[1]; /* type code*/
      FG0DW21.XPRCD[2] = FG0DM020.XPRCD[2];
      FG0DW21.XPRCD[3] = FG0DM020.XPRCD[3];
      FG0DW21.XPRCD[4] = FG0DM020.XPRCD[4];
      FG0DW21.XPRCD[5] = FG0DM020.XPRCD[5];
      FG0DW21.FG0DW-NEED-SHIP-SEL = FG0DM020.FG0DM-NEED-SHIP-SEL;
      FG0DW21.FG0DW-COMB-TYPE-CD = FG0DM020.FG0DM-COMB-TYP-CDS;
      ;
      FFXREC.FFXCHAR = FG0DM020.FG0DM-SLS-FCST-MIN; /* sls fcst min*/
      XSFFS11();
      FG0DW21.FG0DW-SLS-FCST-MIN-CHAR = FFXREC.FFXCHAR;
      FG0DW21.FG0DW-SLS-FCST-MIN-NUM = FFXREC.FFXNUMB;
      ;
      FG0DW21.FG0DW-3YR-2YR-RPT = 0; /* report type*/
      FG0DW21.FG0DW-USER-ID = COMMAREA.CAUSERID; /* user id*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG0DW21.TARJCL; /* Parameters*/
      TA6REC.TARTYPE[TA6INDEX] = FG0DT56.TARTYPE[FG0DWIXT]; /* Type*/
      ;
    else
      ;
      if (FG0DT56.TARTYPE[FG0DWIXT] == "R" /* Report distribution*/
       || FG0DT56.TARTYPE[FG0DWIXT] == "1" /* or JOB statement*/
       || FG0DT56.TARTYPE[FG0DWIXT] == "2" /* or EXEC statement*/
       || FG0DT56.TARTYPE[FG0DWIXT] == "3" /* or RUN statement*/
       || FG0DT56.TARTYPE[FG0DWIXT] == "4" /* or PRINTDS statement*/
       || FG0DT56.TARTYPE[FG0DWIXT] == "7" /* or Bundle statement*/
       || FG0DT56.TARTYPE[FG0DWIXT] == "8") /* or Bundle statement*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        FG0DW01.TARJCL = FG0DT56.TARJCL[FG0DWIXT]; /* JCL*/
        FG0DW01.TARTYPE = FG0DT56.TARTYPE[FG0DWIXT]; /* Type*/
        ;
        FG0DS01(); /* Format variable JCL statements*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DT56.TARJCL[FG0DWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DT56.TARTYPE[FG0DWIXT]; /* Type*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0DT56.TARJCL[FG0DWIXT] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FG0DW00.FG0DWIXT = FG0DW00.FG0DWIXT + 1; /* Input table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "253"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    ;
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    ;
  end
  ;
end // end FG0D-2532

// Seasonal Sales forecast report
Function FG0D-300()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FG0D-310(); /* Format and display the map*/
  ;
  FG0D-320(); /* Check attention identifier*/
  ;
  FG0D-330(); /* Reset fields to normal intensity*/
  ;
  FG0D-340(); /* Verify the data that was entered*/
  ;
  FG0D-350(); /* Process valid input request*/
  ;
  ;
end // end FG0D-300

// Format and display the map
Function FG0D-310()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/
  ;
  FG0DM030.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FG0DM030.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FG0DM030.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FG0DM030.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FG0DM030.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FG0DM030.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (FFWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FG0DM030.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    FG0DM030.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    ;
    set FG0DM030 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FG0DM030 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  ;
end // end FG0D-310

// Check attention identifier
Function FG0D-320()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    FG0DW00.FG0DMSEL[3] = "C"; /* Indicate selection cancelled*/
    ;
    set FG0DM030 initial; /* m021 input/output*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    ;
    FG0DW00.FG0DWSWX = "Y"; /* Indicate exit requested*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf5)  /* PF5 was not pressed*/
    ;
    FFWREC.XXXMODID = "320"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FG0D-320

// Reset highlighted fields
Function FG0D-330()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  FG0DW00.FG0DWIXM = 1; /* Map line index*/
  ;
  while (FG0DW00.FG0DWIXM <= 4) /* Until end of lines*/
    ;
    set FG0DM030.FG0DM-SEQ[FG0DWIXM] initialAttributes; /* Report sequence selection*/
    ;
    FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM + 1; /* Map line index*/
    ;
  end
  ;
  set FG0DM030.FG0DM-NEED-SHIP-SEL initialAttributes; /* need/ship mo selection*/
  ;
  set FG0DM030.FG0DM-BEG-MO initialAttributes; /* Beginning month*/
  set FG0DM030.XPLCD initialAttributes; /* Product line*/
  set FG0DM030.YPGCD initialAttributes; /* Product type group*/
  set FG0DM030.XPRCD[1] initialAttributes; /* Product type code*/
  set FG0DM030.XPRCD[2] initialAttributes; /* Product type code*/
  set FG0DM030.XPRCD[3] initialAttributes; /* Product type code*/
  set FG0DM030.XPRCD[4] initialAttributes; /* Product type code*/
  set FG0DM030.FG0DM-COMB-TYP-CDS initialAttributes; /* Combine indicator*/
  set FG0DM030.XPCCD initialAttributes; /* Product category*/
  set FG0DM030.FG0DM-SEAS-END-MO[1] initialAttributes; /* season end month*/
  set FG0DM030.FG0DM-SEAS-END-MO[2] initialAttributes; /* season end month*/
  set FG0DM030.FG0DM-SEAS-END-MO[3] initialAttributes; /* season end month*/
  set FG0DM030.FG0DM-SEAS-END-MO[4] initialAttributes; /* season end month*/
  set FG0DM030.FG0DM-SLS-FCST-MIN initialAttributes; /* sales forecast minimum*/
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM030.XPLCD == "?" /* Product line list requested*/
   || FG0DM030.YPGCD == "?" /* or product type group list requested*/
   || FG0DM030.XPRCD == "?" /* or product type code list requested*/
   || FG0DM030.XPCCD == "?" /* or product category list requested*/
  )                        
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      FFWREC.XXXMODID = "330"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  else
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM030.XPLCD == "?") /* Product line list requested*/
    ;
    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  LINE"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0DM030.XPLCD = " "; /* Clear code*/
      FG0DM030.XPLABRV = " "; /* Abbreviation*/
    else
      FG0DM030.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FG0DM030.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FG0DM030.XPLCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type group codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM030.YPGCD == "?") /* Product type group list requested*/
    ;
    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  TYPE GRP"; /* Heading*/
    XX0XW02.YPGFFFL = "Y"; /* Footwear forecasting flag*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0DM030.YPGCD = " "; /* Clear code*/
      FG0DM030.YPGABRV = " "; /* Abbreviation*/
    else
      FG0DM030.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FG0DM030.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FG0DM030.YPGCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type codes*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM030.XPRCD[1] == "?") /* product type requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PROD TYPE"; /* Heading*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0DM030.XPRCD[1] = "  "; /* Clear code*/
    else
      FG0DM030.XPRCD[1] = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG0DM030.XPRCD[1] cursor; /* Establish cursor position*/
    ;
  end
  ;
  ;
  if (FG0DM030.XPRCD[2] == "?") /* product type requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PROD TYPE"; /* Heading*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0DM030.XPRCD[2] = "  "; /* Clear code*/
    else
      FG0DM030.XPRCD[2] = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG0DM030.XPRCD[2] cursor; /* Establish cursor position*/
    ;
  end
  ;
  ;
  if (FG0DM030.XPRCD[3] == "?") /* product type requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PROD TYPE"; /* Heading*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0DM030.XPRCD[3] = "  "; /* Clear code*/
    else
      FG0DM030.XPRCD[3] = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG0DM030.XPRCD[3] cursor; /* Establish cursor position*/
    ;
  end
  ;
  ;
  if (FG0DM030.XPRCD[4] == "?") /* product type requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PROD TYPE"; /* Heading*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0DM030.XPRCD[4] = "  "; /* Clear code*/
    else
      FG0DM030.XPRCD[4] = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG0DM030.XPRCD[4] cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product category codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM030.XPCCD == "?") /* Product category list requested*/
    ;
    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0DM030.XPCCD = " "; /* Clear code*/
      FG0DM030.XPCABRV = " "; /* Abbreviation*/
    else
      FG0DM030.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FG0DM030.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FG0DM030.XPCCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FFWREC.XXXMODID = "330"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0D-330

// Verify the entered data
Function FG0D-340()
   /* ------------------------------------------------------------*/
   /* Verify season end month.*/
   /* ------------------------------------------------------------*/
  ;
  FG0D-341(); /* validate season end months*/
  ;
   /* ------------------------------------------------------------*/
   /* Verify sales forecast minimum*/
   /* ------------------------------------------------------------*/
  ;
  FG0D-343(); /* validate sales fcst minimum*/
  ;
   /* ------------------------------------------------------------*/
   /* Verify product type codes and combine type code indicator.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM030.FG0DM-COMB-TYP-CDS == "N") /* Combine type codes EQ 'N'*/
    ;
    if (FG0DM030.FG0DM-SEQ[1] == "S") /* Report by line/cat*/
      converseLib.validationFailed(324); /* can't print this report*/
      FFWREC.XXXMODID = "340"; /* error module id*/
      set FG0DM030.FG0DM-SEQ[1] cursor, bold; /* highlight*/
      set FG0DM030.FG0DM-COMB-TYP-CDS bold; /* highlight*/
    end
    ;
  end
  ;
  if (FG0DM030.XPRCD[1] == " " /* Type code(s) not entered*/
   && FG0DM030.XPRCD[2] == " " 
   && FG0DM030.XPRCD[3] == " " 
   && FG0DM030.XPRCD[4] == " " 
   && FG0DM030.XPRCD[5] == " ")
    ;
      /* continue*/
    ;
  else /* Type code(s) entered*/
    ;
    if (FG0DM030.FG0DM-SEQ[2] == "S" /* Report by line/cat*/
     || FG0DM030.FG0DM-SEQ[3] == "S" /* Report by style group*/
     || FG0DM030.FG0DM-SEQ[4] == "S") /* Report by style/color*/
      ;
      FG0D-342(); /* Validate type codes*/
      ;
    else
      ;
      FG0DW00.FG0DWIXM = 5;
      while (FG0DW00.FG0DWIXM >= 1)
        if (FG0DM030.XPRCD[FG0DWIXM] > " ") /* Type code entered*/
          set FG0DM030.XPRCD[FG0DWIXM] bold; /* highlight*/
        end
        FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM - 1;
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid product category code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM030.XPCCD > " ") /* Product category entered*/
    ;
    XPCREC.XPCCD = FG0DM030.XPCCD; /* Product category*/
    XPCREC.XGPCD = COMMAREA.XGPCD; /* GPC*/
    ;
    if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      ;
      FG0DM030.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
      ;
    else
      ;
      FG0DM030.XPCABRV = " "; /* Abbreviation*/
      ;
      FFWREC.XXXMODID = "340"; /* Module identification*/
      set FG0DM030.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Invalid value entered*/
      ;
    end
    ;
  else
    ;
    FG0DM030.XPCABRV = " "; /* Abbreviation*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid product type group code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM030.YPGCD > " " /* Product type group entered*/
   && FG0DM030.YPGCD != "*") /* and not wild card*/
    ;
    if (FG0DM030.YPGCD in YPGTBL.YPGCD /* Code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      ;
      FG0DM030.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      ;
    else
      ;
      FG0DM030.YPGABRV = " "; /* Abbreviation*/
      ;
      FFWREC.XXXMODID = "340"; /* Module identification*/
      set FG0DM030.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Invalid value entered*/
      ;
    end
    ;
  else
    ;
    if (FG0DM030.YPGCD == "* ")
      FG0DM030.YPGABRV = "ALL"; /* Abbreviation*/
    else
      ;
      FG0DM030.YPGABRV = " "; /* Abbreviation*/
      ;
      FFWREC.XXXMODID = "340"; /* Module identification*/
      set FG0DM030.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Required field*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid product line code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM030.XPLCD > " " /* Product line entered*/
   && FG0DM030.XPLCD != "* ") /* and not wild card*/
    ;
    XPLREC.XPLCD = FG0DM030.XPLCD; /* Product line*/
    XPLREC.XGPCD = COMMAREA.XGPCD; /* GPC*/
    ;
    if (XPLREC.XPLKEY in XPLTBL.XPLKEY /* Code in table*/
     && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      ;
      FG0DM030.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      ;
    else
      ;
      FG0DM030.XPLABRV = " "; /* Abbreviation*/
      ;
      FFWREC.XXXMODID = "340"; /* Module identification*/
      set FG0DM030.XPLCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Invalid value entered*/
      ;
    end
    ;
  else
    ;
    if (FG0DM030.XPLCD == "*") /* Wild card*/
      FG0DM030.XPLABRV = "ALL"; /* Abbreviation*/
    else
      ;
      FG0DM030.XPLABRV = " "; /* Abbreviation*/
      ;
      if (FG0DM030.FG0DM-SEQ[1] == "S" /* line report was selected*/
       || FG0DM030.FG0DM-SEQ[2] == "S") /* category report was selected*/
        ;
        FFWREC.XXXMODID = "340"; /* Module identification*/
        set FG0DM030.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(8); /* Required field*/
        ;
      end
      ;
      if (FG0DM030.FG0DM-SEQ[3] == "S" /* Style grp rpt was selected*/
       || FG0DM030.FG0DM-SEQ[4] == "S") /* Style clr rpt was selected*/
        ;
        if (FG0DM030.XPCCD == "  ") /* No category entered*/
          ;
          FFWREC.XXXMODID = "340"; /* Module identification*/
          set FG0DM030.XPLCD cursor, bold; /* Highlight*/
          set FG0DM030.XPCCD bold;
          converseLib.validationFailed(8); /* Required field*/
          ;
        end
      end
      ;
    end
    ;
  end
  ;
   /* --------------------------------------------------------------*/
   /* Verify the relationship between line, type group and category*/
   /* --------------------------------------------------------------*/
  ;
  FG0D-344(); /* call ffxrf01 table*/
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid date range was entered.*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty; /* Subroutine parameters*/
  ;
  FFZREC.FFZBYYMM = FG0DM030.FG0DM-BEG-MO; /* Beginning month*/
  ;
  FG0DW00.FG0D3DAT = FG0DM030.FG0DM-BEG-MO; /* Beginning month*/
  FG0DW00.FG0D3MM = FG0DW00.FG0D3MM + 11; /* Calculate ending month*/
  ;
  if (FG0DW00.FG0D3MM > 12)
    FG0DW00.FG0D3MM = FG0DW00.FG0D3MM - 12;
    FG0DW00.FG0D3CY = FG0DW00.FG0D3CY + 1;
  end
  ;
  FFZREC.FFZEYYMM = FG0DW00.FG0D3DAT; /* Ending month*/
  ;
  FFZREC.FFZSRANG = "Y"; /* Accept any beginning month*/
  ;
  TA1REC.TA1PGMNM = "FG0D340"; /* Calling process*/
  ;
  XSFFS30(); /* Edit the date range*/
  ;
  if (FFZREC.FFZBEGRC == "0") /* Valid beginning month*/
    ;
    /* NEXT SENTENCE*/
    ;
  else
    ;
    FFWREC.XXXMODID = "340"; /* Module identification*/
    set FG0DM030.FG0DM-BEG-MO cursor, bold; /* Highlight*/
    converseLib.validationFailed(17); /* Invalid date entered*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify combine type*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM030.FG0DM-COMB-TYP-CDS != "N" /* Combine type codes*/
   && FG0DM030.FG0DM-COMB-TYP-CDS != "Y")
    FFWREC.XXXMODID = "340"; /* Module identification*/
    converseLib.validationFailed(10); /* Invalid selection code*/
    set FG0DM030.FG0DM-COMB-TYP-CDS cursor, bold; /* Highlight*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify need month or ship month selection*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM030.FG0DM-NEED-SHIP-SEL != "N"
   && FG0DM030.FG0DM-NEED-SHIP-SEL != "S")
    FFWREC.XXXMODID = "340"; /* Module identification*/
    converseLib.validationFailed(10); /* Invalid selection code*/
    set FG0DM030.FG0DM-NEED-SHIP-SEL cursor, bold; /* Highlight*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify sequence by selection*/
   /* ------------------------------------------------------------*/
  ;
  FG0DW00.FG0DWIXM = 4;
  while (FG0DW00.FG0DWIXM >= 1)
    if (FG0DM030.FG0DM-SEQ[FG0DWIXM] != "S"
     && FG0DM030.FG0DM-SEQ[FG0DWIXM] != " ") /**/
      FFWREC.XXXMODID = "340"; /* Module identification*/
      converseLib.validationFailed(10); /* Invalid selection code*/
      set FG0DM030.FG0DM-SEQ[FG0DWIXM] cursor, bold; /* Highlight*/
    end
    FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM - 1;
  end
  ;
  if (FG0DM030.FG0DM-SEQ[1] == " "
   && FG0DM030.FG0DM-SEQ[2] == " "
   && FG0DM030.FG0DM-SEQ[3] == " "
   && FG0DM030.FG0DM-SEQ[4] == " ")
    FFWREC.XXXMODID = "340"; /* Module identification*/
    converseLib.validationFailed(8); /* required field*/
    set FG0DM030.FG0DM-SEQ[1] cursor, bold; /* Highlight*/
    set FG0DM030.FG0DM-SEQ[2] bold; /* Highlight*/
    set FG0DM030.FG0DM-SEQ[3] bold; /* Highlight*/
    set FG0DM030.FG0DM-SEQ[4] bold; /* Highlight*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end
  ;
end // end FG0D-340

// Validate season end months
Function FG0D-341()
   /* ------------------------------------------------------------*/
   /* validate season lengths*/
   /* determine the number of seasons entered, look backwards*/
   /* data found.*/
   /* ------------------------------------------------------------*/
  ;
  move "    " to FG0DW00.FG0DSNDT[1] for all; /* spaces to season end dates*/
  ;
  FG0DW00.FG0DWNSS = 0; /* zero out number of seasons*/
  FG0DW00.FG0DWIXM = 4; /* index*/
  while (FG0DW00.FG0DWIXM > 0)
    if (FG0DM030.FG0DM-SEAS-END-MO[FG0DWIXM] > 0)
      FG0DW00.FG0DWNSS = FG0DW00.FG0DWIXM; /* number of seasons*/
      FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM - 4; /* force out of loop*/
    else
      FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM - 1;
    end
  end
  ;
     /* look for season end months greater than 12*/
  ;
  FG0DWIXM = 1; /* 0 to index*/
  while (FG0DW00.FG0DWIXM <= FG0DWNSS)
    if (FG0DM030.FG0DM-SEAS-END-MO[FG0DWIXM] > 12)
      FFWREC.XXXMODID = "341"; /* Module identification*/
      set FG0DM030.FG0DM-SEAS-END-MO[FG0DWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Invalid data*/
      FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM + 1;
    else
      FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM + 1;
    end
  end
  ;
  if (converseVar.validationMsgNum > 0) /* errors found*/
    return; /* get out*/
  end
  ;
   /* If no season end month entered then check the length of the range,*/
   /* if <= 6 months use default (end month of the range)*/
  ;
  FG0DW00.FG0DBDAT = FG0DM030.FG0DM-BEG-MO;
  FG0DW00.FG0DEDAT = FG0DW00.FG0DBDAT + 11; /* calc season end date*/
  ;
  if (FG0DW00.FG0DEMM > 12) /* end mo > 12*/
    FG0DW00.FG0DEMM = FG0DW00.FG0DEMM - 12; /* reset end mo*/
    FG0DW00.FG0DEYY = FG0DW00.FG0DEYY + 1; /* add 1 to end mo year*/
  end
  ;
  if (FG0DW00.FG0DWNSS == 0) /* no season lengths found*/
    if (FG0DW00.FG0DBYY == FG0DW00.FG0DEYY) /* same year*/
      FG0DW00.FG0DW-MON-COUNT = FG0DW00.FG0DEMM - FG0DW00.FG0DBMM + 1;
    else
      FG0DW00.FG0DW-MON-COUNT = FG0DW00.FG0DEMM + 12 - FG0DW00.FG0DBMM + 1;
    end
    ;
    if (FG0DW00.FG0DW-MON-COUNT <= 6)
      FG0DW00.FG0DWNSS = 1;
      FG0DM030.FG0DM-SEAS-END-MO[1] = FG0DW00.FG0DEMM; /* seas end mo*/
    end
  end
  ;
   /* look for no seasons entered*/
  ;
  if (FG0DW00.FG0DWNSS == 0) /* no season lengths found*/
    if (FG0DM030.FG0DM-SEQ[1] == "S" /* if line/type*/
     || FG0DM030.FG0DM-SEQ[2] == "S") /* or line/cat*/
      if (FG0DM030.XPCCD == "  ") /* no category entered*/
        FFWREC.XXXMODID = "341"; /* Module identification*/
        set FG0DM030.FG0DM-SEAS-END-MO[1] cursor, bold; /* Highlight*/
        converseLib.validationFailed(448); /* sesn end must be entered w/ no cat*/
        return; /* return to previous routine*/
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* default to category seasons if end months not entered*/
   /* ------------------------------------------------------------*/
  if (FG0DW00.FG0DWNSS == 0) /* no season lengths found*/
    ;
    if (FG0DM030.XPCCD != " ") /* category code entered*/
      set FF2REC empty;
      FF2REC.YPGCD = FG0DM030.YPGCD; /* type group code*/
      FG0D-3411(); /* use sesn end months from*/
                                   /* vffxrf01 table*/
   /* ------------------------------------------------------------*/
   /* determine season lengths from category table*/
   /* ------------------------------------------------------------*/
      if (VAGen_SQLCODE == 0)
        FG0DWIXM = 1;
        FG0DW00.FG0DSNLN = 0; /* zero sesn length*/
        while (FG0DWIXM <= FF2REC.FF2NSEAS)
          FG0DW00.FG0D1DAT = FF2REC.FF2SEASN[FG0DWIXM];
          FG0DW00.FG0DWKMO = FG0DM030.FG0DM-BEG-MO;
          if (FG0DW00.FG0D1MM == FG0DW00.FG0DWKMO) /* category month =*/
                                   /* screen begin month?*/
            FG0DW00.FG0DBDAT = FG0DM030.FG0DM-BEG-MO - 1; /* get sesn end*/
                                   /* from begin dte on screen*/
            if (FG0DBMM == 00)
              FG0DW00.FG0DBDAT = FG0DW00.FG0DBDAT - 88;
            end
            FG0DW00.FG0DWDAT = FG0DW00.FG0DBDAT;
                                   /* save orig sesn end*/
            FG0DWIXM = 1;
            FG0DWIX2 = 2;
            while (FG0DWIX2 <= FF2REC.FF2NSEAS) /* while more cat dates*/
              FG0DW00.FG0D1DAT = FF2REC.FF2SEASN[FG0DWIXM];
              FG0DW00.FG0D2DAT = FF2REC.FF2SEASN[FG0DWIX2];
              if (FG0DW00.FG0D2YY > FG0DW00.FG0D1YY)
                FG0DW00.FG0DWKMO = FG0DW00.FG0D2MM + 12;
              else
                FG0DW00.FG0DWKMO = FG0DW00.FG0D2MM + 0;
              end
                                   /* season length =*/
   /* sesn1 mos - sesn2 mos*/
   /* + sesn length*/
              FG0DW00.FG0DSNLN = FG0DW00.FG0DWKMO - FG0DW00.FG0D1MM               + FG0DW00.FG0DSNLN;
              ;
              FG0DBDAT = FG0DWDAT + FG0DSNLN; /* add sesn1 length to*/
                                   /* get sesn 1 end*/
              if (FG0DBMM > 12)
                FG0DBDAT = FG0DBDAT + 88; /* convert to next year*/
              end
              FG0DM030.FG0DM-SEAS-END-MO[FG0DWIXM] = FG0DBDAT;
              FG0DW00.FG0DSNDT[FG0DWIXM] = FG0DBDAT; /* to w00*/
              ;
              FG0DWIXM = FG0DWIXM + 1;
              FG0DWIX2 = FG0DWIX2 + 1; /* bump indexes*/
            end /* end of nested loop*/
            ;
            FG0DBDAT = FG0DWDAT + 100; /* get last sesn end*/
            ;
            if (FG0DBMM > 12)
              FG0DBDAT = FG0DBDAT + 88; /* convert to next year*/
            end
            FG0DM030.FG0DM-SEAS-END-MO[FG0DWIXM] = FG0DBDAT; /* to map*/
            FG0DW00.FG0DSNDT[FG0DWIXM] = FG0DBDAT; /* to w00*/
            ;
            FG0DWIXM = 6; /* set indx to leave 1st loop*/
            ;
          else
            FG0DWIXM = FG0DWIXM + 1; /* bump index and continue*/
          end
        end /* end of 1st loop*/
        if (FG0DWIXM != 6) /* indx not 6 - no hit on begin date*/
          FFWREC.XXXMODID = "341"; /* Module identification*/
          set FG0DM030.FG0DM-SEAS-END-MO[1] cursor, bold; /* Highlight*/
          converseLib.validationFailed(442); /* begin date ne category date*/
          return; /* return to previous routine*/
        end
      else
        FFWREC.XXXMODID = "341"; /* Module identification*/
        set FG0DM030.XPCCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(174); /* sqlcode = -100*/
        return; /* return to previous routine*/
      end
    else
      FFWREC.XXXMODID = "341"; /* Module identification*/
      set FG0DM030.XPCCD cursor, bold; /* Highlight*/
      set FG0DM030.FG0DM-SEAS-END-MO[1] bold; /* Highlight*/
      converseLib.validationFailed(443); /* no ends mos, no cat entered*/
      return; /* return to previous routine*/
    end
    ;
  else
              /* ** season end months were entered ****/
    ;
    FG0DW00.FG0DWIXM = 1; /* index*/
    while (FG0DW00.FG0DWIXM <= FG0DW00.FG0DWNSS) /* for number of seasons*/
      if (FG0DM030.FG0DM-SEAS-END-MO[FG0DWIXM] == 0)
                                   /* check for embedded zeros*/
        FFWREC.XXXMODID = "341"; /* Module identification*/
        set FG0DM030.FG0DM-SEAS-END-MO[FG0DWIXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(440); /* embedded zero msg*/
        return; /* return to previous routine*/
      else
        FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM + 1;
      end
    end
    ;
      /* ------------------------------------------------------------*/
       /* Verify range end month with the season end month.*/
      /* ------------------------------------------------------------*/
    FG0DW00.FG0DWIXM = FG0DW00.FG0DWNSS; /* last season number*/
    FG0DW00.FG0DWDAT = FG0DW00.FG0DEDAT; /* end date to work area*/
    ;
    if (FG0DW00.FG0DWMM != FG0DM030.FG0DM-SEAS-END-MO[FG0DWIXM])
                                   /* end mo <> last sesn mo*/
      FFWREC.XXXMODID = "341"; /* Module identification*/
      set FG0DM030.FG0DM-SEAS-END-MO[FG0DWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(447); /* last season must complete year*/
      return; /* return to previous routine*/
    end
      /* ------------------------------------------------------------*/
       /* Verify that season end months are valid.*/
      /* ------------------------------------------------------------*/
    FG0DWIXM = 1; /* reset index*/
    FG0DW00.FG0DWDAT = FG0DM030.FG0DM-BEG-MO; /* begin date to work*/
    ;
      /* set up season end YYMM in fg0dw02*/
    ;
    FG0DW00.FG0D1DAT = FG0DM030.FG0DM-BEG-MO; /* save begin date*/
    FG0DW00.FG0DSNYY[1] = FG0DW00.FG0DWYY; /* move year*/
    while (FG0DWIXM <= FG0DW00.FG0DWNSS)
      FG0DW00.FG0DSNMM[FG0DWIXM] = FG0DM030.FG0DM-SEAS-END-MO[FG0DWIXM]; /* move month*/
      ;
      if (FG0DW00.FG0DWMM > FG0DW00.FG0DSNMM[FG0DWIXM] /* bgn mo > end*/
       && FG0DW00.FG0D1YY == FG0DW00.FG0DWYY)          /* mo & yr not yet bumpd*/
        FG0DWYY = FG0DWYY + 1; /* bump year by 1*/
      end
      ;
      FG0DW00.FG0DSNYY[FG0DWIXM] = FG0DW00.FG0DWYY; /* move year*/
      FG0DWIXM = FG0DWIXM + 1; /* bump index*/
    end
    ;
    FG0DWIXM = 1;
    FG0DWIX2 = 2;
    ;
    while (FG0DWIX2 <= FG0DW00.FG0DWNSS)
      if (FG0DW00.FG0DSNDT[FG0DWIXM] /* sesn > next sesn*/
       >= FG0DW00.FG0DSNDT[FG0DWIX2])
        /* begin tcs*/
        if (FG0DW00.FG0DSNYY[FG0DWIX2] != 00)
          FFWREC.XXXMODID = "341"; /* Module identification*/
          set FG0DM030.FG0DM-SEAS-END-MO[FG0DWIXM] cursor, bold;
                                   /* Highlight*/
          converseLib.validationFailed(444); /* season must > following season*/
          FG0DWIXM = 0;
        end
        /* end tcs*/
      end
      FG0DWIXM = FG0DWIXM + 1; /* bump index*/
      FG0DWIX2 = FG0DWIX2 + 1; /* bump index2*/
    end
    ;
  end
  ;
end // end FG0D-341

// Read vffxrf01 to get seas mos
Function FG0D-3411()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vffxrf01 table row*/
   /* ------------------------------------------------------------*/
  ;
  FF2REC.XPCCD = FG0DM030.XPCCD;
  FF2REC.YSMXDV = "10";
  ;
  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      return;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "341"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0D-3411

// Validate type code
Function FG0D-342()
   /* ------------------------------------------------------------*/
   /* Validate type codes and combine type code indicator*/
   /* ------------------------------------------------------------*/
  ;
   /* Validate type codes*/
  ;
  if (FG0DM030.YPGCD == " ") /* or type group code blank*/
    FFWREC.XXXMODID = "342"; /* error module id*/
    converseLib.validationFailed(203); /* inconsistent relationship*/
    set FG0DM030.YPGCD cursor, bold; /* highlight*/
    set FG0DM030.XPRCD[1] bold; /* highlight*/
    set FG0DM030.XPRCD[2] bold; /* highlight*/
    set FG0DM030.XPRCD[3] bold; /* highlight*/
    set FG0DM030.XPRCD[4] bold; /* highlight*/
  else /* Specific type group code entered*/
    ;
      /* Validate type code*/
    ;
    FG0DW00.FG0DWIXM = 5;
    while (FG0DW00.FG0DWIXM >= 1)
      if (FG0DM030.XPRCD[FG0DWIXM] > " ") /* type code entered*/
        if (FG0DM030.XPRCD[FG0DWIXM] in XPRTBL.XPRCD) /* type code exists*/
          if (XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* type code status 'A'*/
            if (XPRTBL.YPGCD[sysVar.arrayIndex] == FG0DM030.YPGCD) /* typgrps match*/
                /* continue*/
            else
              if (FG0DM030.YPGCD == "*") /* wildcard type group*/
                if (XPRTBL.YPGCD[sysVar.arrayIndex] == "01"
                 || XPRTBL.YPGCD[sysVar.arrayIndex] == "02")
                  ;
                else /* Type group code doesn't correspond*/
                               /* correctly to type code*/
                  FFWREC.XXXMODID = "342"; /* error module id*/
                  converseLib.validationFailed(203); /* inconsistent relationship*/
                  set FG0DM030.YPGCD cursor, bold; /* highlight*/
                  set FG0DM030.XPRCD[FG0DWIXM] bold; /* highlight*/
                end
              else
                FFWREC.XXXMODID = "342"; /* error module id*/
                converseLib.validationFailed(203); /* inconsistent relationship*/
                set FG0DM030.YPGCD cursor, bold; /* highlight*/
                set FG0DM030.XPRCD[FG0DWIXM] bold; /* highlight*/
              end
            end
          else /* type code status not 'A'*/
            FFWREC.XXXMODID = "342"; /* error module id*/
            converseLib.validationFailed(10); /* invalid value*/
            set FG0DM030.XPRCD[FG0DWIXM] cursor, bold; /* highlight*/
          end
        else
          FFWREC.XXXMODID = "342"; /* error module id*/
          converseLib.validationFailed(10); /* invalid value*/
          set FG0DM030.XPRCD[FG0DWIXM] cursor, bold; /* highlight*/
        end
      end
      FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM - 1;
    end
  end
  ;
   /* Check for embedded blanks*/
  ;
  FG0D-3421();
  ;
   /* Check for duplicates*/
  ;
  FG0D-3422();
  ;
end // end FG0D-342

// Check for embedded blanks
Function FG0D-3421()
   /* ------------------------------------------------------------*/
   /* Check for embedded blanks in the list of type codes*/
   /* ------------------------------------------------------------*/
  ;
   /* Check for embedded blanks*/
  ;
  if (FG0DM030.XPRCD[1] == " ")
    if (FG0DM030.XPRCD[2] == " ")
      if (FG0DM030.XPRCD[3] == " ")
        if (FG0DM030.XPRCD[4] == " ")
          /* continue*/
        else
          FFWREC.XXXMODID = "342"; /* error module id*/
          converseLib.validationFailed(10); /* invalid*/
          set FG0DM030.XPRCD[1] cursor, bold; /* highlight*/
          set FG0DM030.XPRCD[2] bold; /* highlight*/
          set FG0DM030.XPRCD[3] bold; /* highlight*/
        end
      else
        FFWREC.XXXMODID = "342"; /* error module id*/
        converseLib.validationFailed(10); /* invalid*/
        set FG0DM030.XPRCD[1] cursor, bold; /* highlight*/
        set FG0DM030.XPRCD[2] bold; /* highlight*/
      end
    else
      FFWREC.XXXMODID = "342"; /* error module id*/
      converseLib.validationFailed(10); /* invalid*/
      set FG0DM030.XPRCD[1] cursor, bold; /* highlight*/
    end
  else
    if (FG0DM030.XPRCD[2] == " ")
      if (FG0DM030.XPRCD[3] == " ")
        if (FG0DM030.XPRCD[4] == " ")
          /* continue*/
        else
          FFWREC.XXXMODID = "342"; /* error module id*/
          converseLib.validationFailed(10); /* invalid*/
          set FG0DM030.XPRCD[2] cursor, bold; /* highlight*/
          set FG0DM030.XPRCD[3] bold; /* highlight*/
        end
      else
        FFWREC.XXXMODID = "342"; /* error module id*/
        converseLib.validationFailed(10); /* invalid*/
        set FG0DM030.XPRCD[2] cursor, bold; /* highlight*/
      end
    else
      if (FG0DM030.XPRCD[3] == " ")
        if (FG0DM030.XPRCD[4] == " ")
          /* continue*/
        else
          FFWREC.XXXMODID = "342"; /* error module id*/
          converseLib.validationFailed(10); /* invalid*/
          set FG0DM030.XPRCD[3] cursor, bold; /* highlight*/
        end
      end
    end
  end
end // end FG0D-3421

// Check for duplicates
Function FG0D-3422()
   /* ------------------------------------------------------------*/
   /* Check for duplicates in the list of type codes*/
   /* ------------------------------------------------------------*/
  ;
   /* Check for duplicates*/
  ;
  if (FG0DM030.XPRCD[3] > " "
   && FG0DM030.XPRCD[3] == FG0DM030.XPRCD[4])
    FFWREC.XXXMODID = "342"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FG0DM030.XPRCD[3] cursor, bold; /* highlight*/
    set FG0DM030.XPRCD[4] bold; /* highlight*/
  end
  if (FG0DM030.XPRCD[2] > " "
   && FG0DM030.XPRCD[2] == FG0DM030.XPRCD[4])
    FFWREC.XXXMODID = "342"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FG0DM030.XPRCD[2] cursor, bold; /* highlight*/
    set FG0DM030.XPRCD[4] bold; /* highlight*/
  end
  if (FG0DM030.XPRCD[2] > " "
   && FG0DM030.XPRCD[2] == FG0DM030.XPRCD[3])
    FFWREC.XXXMODID = "342"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FG0DM030.XPRCD[2] cursor, bold; /* highlight*/
    set FG0DM030.XPRCD[3] bold; /* highlight*/
  end
  if (FG0DM030.XPRCD[1] > " "
   && FG0DM030.XPRCD[1] == FG0DM030.XPRCD[4])
    FFWREC.XXXMODID = "342"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FG0DM030.XPRCD[1] cursor, bold; /* highlight*/
    set FG0DM030.XPRCD[4] bold; /* highlight*/
  end
  if (FG0DM030.XPRCD[1] > " "
   && FG0DM030.XPRCD[1] == FG0DM030.XPRCD[3])
    FFWREC.XXXMODID = "342"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FG0DM030.XPRCD[1] cursor, bold; /* highlight*/
    set FG0DM030.XPRCD[3] bold; /* highlight*/
  end
  if (FG0DM030.XPRCD[1] > " "
   && FG0DM030.XPRCD[1] == FG0DM030.XPRCD[2])
    FFWREC.XXXMODID = "342"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FG0DM030.XPRCD[1] cursor, bold; /* highlight*/
    set FG0DM030.XPRCD[2] bold; /* highlight*/
  end
  ;
end // end FG0D-3422
// Validate sales fcst minimum
Function FG0D-343()
  FFXREC.FFXCHAR = FG0DM030.FG0DM-SLS-FCST-MIN;
  XSFFS11(); /* Translate value format*/
  ;
  if (FFXREC.FFXRTNCD == "0") /* Normal return*/
    ;
    if (FFXREC.FFXNUMB < 0) /* Negative value*/
      ;
      FFWREC.XXXMODID = "343"; /* Module identification*/
      converseLib.validationFailed(10); /* Invalid value entered*/
      set FG0DM030.FG0DM-SLS-FCST-MIN cursor, bold;
      ;
    end
    ;
  else
    ;
    FFWREC.XXXMODID = "343"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate invalid value entered*/
    set FG0DM030.FG0DM-SLS-FCST-MIN cursor, bold;
    ;
  end
  ;
end // end FG0D-343

// Verify lin,typ,cat relationshp
Function FG0D-344()
  ;
  if (FG0DM030.XPLCD != "*"
   && FG0DM030.XPLCD != " "
   && FG0DM030.XPCCD != " ")
    ;
    set FF2REC empty;
    ;
    if (FG0DM030.YPGCD == "*") /* wild card type group*/
      FF2REC.YPGCD = "01";
      FG0D-3411();
      if (SQLCA.VAGen_SQLCODE == +100) /* not found on vffxrf01*/
        FF2REC.YPGCD = "02";
        FG0D-3411();
        if (SQLCA.VAGen_SQLCODE == +100) /* not found on vffxrf01*/
          FG0DM030.XPLABRV = " "; /* Abbreviation*/
          FFWREC.XXXMODID = "340"; /* Module identification*/
          set FG0DM030.XPLCD cursor, bold; /* Highlight*/
          set FG0DM030.YPGCD bold;
          set FG0DM030.XPCCD bold;
          converseLib.validationFailed(203); /* Inconsistent relationship*/
          ;
        end
      end
    else
      FF2REC.YPGCD = FG0DM030.YPGCD;
      FG0D-3411(); /* read vffxrf01*/
    end
    ;
    if (FG0DM030.XPLCD != FF2REC.XPLCD) /* different line code*/
      ;
      FG0DM030.XPLABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "340"; /* Module identification*/
      set FG0DM030.XPLCD cursor, bold; /* Highlight*/
      set FG0DM030.YPGCD bold;
      set FG0DM030.XPCCD bold;
      converseLib.validationFailed(203); /* Inconsistent relationship*/
      ;
    end
    ;
  end
  ;
end // end FG0D-344

// Process valid input request
Function FG0D-350()
   /* ------------------------------------------------------------*/
   /* Indicate the job identification and forms code to be used.*/
   /* ------------------------------------------------------------*/
  ;
   /* ***********************/
   /* line/type report*/
   /* ***********************/
  ;
  if (FG0DM030.FG0DM-SEQ[1] == "S")
    ;
    if (FG0DM030.FG0DM-NEED-SHIP-SEL == "N") /* Need month*/
      FG0DW00.FG0DWJOB = "4401"; /* Job id*/
      FG0DW00.FG0DW-REPT-TYPE = "DMND"; /* Report type*/
    else
      FG0DW00.FG0DWJOB = "4402"; /* Proc id*/
      FG0DW00.FG0DW-REPT-TYPE = "SHIP"; /* Report type*/
    end
    ;
    FG0DW00.FG0DW-FORM = "47"; /* Forms code*/
    FG0DW00.FG0DW-CNTL-PRGM-ID = "440"; /* control card pgm id*/
    FG0DW00.FG0DW-PROC = "440"; /* Proc id*/
    FG0DW00.FG0DW-REPT-EXT = "SEASN"; /* Report extension*/
    ;
    FG0D-351(); /* process line report*/
    ;
  end
  ;
   /* *************************/
   /* line/category report*/
   /* style group report*/
   /* style color report*/
   /* *************************/
  ;
  ;
  if (FG0DM030.FG0DM-SEQ[2] == "S" /* By line/category*/
   || FG0DM030.FG0DM-SEQ[3] == "S" /* By style group*/
   || FG0DM030.FG0DM-SEQ[4] == "S") /* By style color*/
    ;
    if (FG0DM030.FG0DM-NEED-SHIP-SEL == "N") /* Need month*/
      FG0DW00.FG0DWJOB = "4501";
      FG0DW00.FG0DW-REPT-TYPE = "DMND"; /* Report type*/
    else
      FG0DW00.FG0DWJOB = "4502";
      FG0DW00.FG0DW-REPT-TYPE = "SHIP"; /* Report type*/
    end
    ;
    FG0DW00.FG0DW-COND1 = 1; /* Initialize condition code*/
    FG0DW00.FG0DW-COND2 = 1; /* Initialize condition code*/
    FG0DW00.FG0DW-COND3 = 1; /* Initialize condition code*/
    ;
    FG0DW00.FG0DW-PROC1 = "450"; /* Proc id*/
    FG0DW00.FG0DW-PROC2 = "460"; /* Proc id*/
    FG0DW00.FG0DW-PROC3 = "470"; /* Proc id*/
    ;
    FG0DW00.FG0DW-FORM1 = "48"; /* Forms code*/
    FG0DW00.FG0DW-FORM2 = "49"; /* Forms code*/
    FG0DW00.FG0DW-FORM3 = "50"; /* Forms code*/
    ;
    if (FG0DM030.FG0DM-SEQ[2] == "S") /* By line/category*/
      FG0DW00.FG0DW-COND1 = 0; /* set condition code*/
      FG0DW00.FG0DW-CNTL-PRGM-1 = "450"; /* control card pgm id*/
    end
    ;
    if (FG0DM030.FG0DM-SEQ[3] == "S") /* By style group*/
      FG0DW00.FG0DW-CNTL-PRGM-2 = "460"; /* control card pgm id*/
      FG0DW00.FG0DW-COND2 = 0; /* set condition code*/
    end
    ;
    if (FG0DM030.FG0DM-SEQ[4] == "S") /* By style color*/
      FG0DW00.FG0DW-CNTL-PRGM-3 = "470"; /* control card pgm id*/
      FG0DW00.FG0DW-COND3 = 0; /* set condition code*/
    end
    ;
    FG0DW00.FG0DW-REPT-EXT = "SEASN"; /* Report extension*/
    ;
    FG0D-352(); /* process detail report*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "350"; /* Module identification*/
  ;
  if (converseVar.validationMsgNum != 1) /* Call successful*/
    ;
    FG0DW00.FG0DMSEL[3] = "*"; /* Indicate function completed*/
    ;
    set FG0DM030 initial; /* Clear map output area*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0D-350

// Process line/type report
Function FG0D-351()
  ;
   /* ------------------------------------------------------*/
   /* Call sub-routine to find which environment the*/
   /* program is executing in, development or production.*/
   /* ------------------------------------------------------*/
  ;
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    ;
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FG0D-3511(); /* format production JCL*/
    else
      FG0D-3512(); /* format test JCL*/
    end
    ;
  else
    ;
    FFWREC.XXXMODID = "351"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print rqst*/
    ;
  end
  ;
end // end FG0D-351

// FF4401 production JCL
Function FG0D-3511()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  ;
  FG0DW00.FG0DWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FG0DT02.TARTYPE[FG0DWIXT] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      set FG0DW20 empty; /* Parameters work area*/
      ;
      FG0DW20.FG0DW-BEG-MO = FFZREC.FFZBEGMO; /* Beginning month*/
      FG0DW20.FG0DW-END-MO = FFZREC.FFZENDMO; /* Ending month*/
      FG0DW20.XPLCD = FG0DM030.XPLCD; /* Product line*/
      FG0DW20.YPGCD = "*"; /* Force type group code*/
      FG0DW20.FG0DW-SEAS-END-MO[1] = FG0DW00.FG0DSNDT[1];
      FG0DW20.FG0DW-SEAS-END-MO[2] = FG0DW00.FG0DSNDT[2];
      FG0DW20.FG0DW-SEAS-END-MO[3] = FG0DW00.FG0DSNDT[3];
      FG0DW20.FG0DW-SEAS-END-MO[4] = FG0DW00.FG0DSNDT[4];
      FG0DW20.FG0DW-NEED-SHIP-SEL = FG0DM030.FG0DM-NEED-SHIP-SEL;
      FG0DW20.FG0DW-XQA-CD1 = "01"; /* Quality code*/
      FG0DW20.FG0DW-XQA-CD2 = "02"; /* Quality code*/
      FG0DW20.FG0DW-XLC-CD1 = "10"; /* Life cycle code*/
      FG0DW20.FG0DW-XLC-CD2 = "20"; /* Life cycle code*/
      FG0DW20.FG0DW-3YR-2YR-RPT = 1; /* report type*/
      FG0DW20.FG0DW-USER-ID = COMMAREA.CAUSERID; /* user id*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG0DW20.TARJCL; /* Parameters*/
      TA6REC.TARTYPE[TA6INDEX] = FG0DT02.TARTYPE[FG0DWIXT]; /* Type*/
      ;
    else
      ;
      if (FG0DT02.TARTYPE[FG0DWIXT] == "J" /* Job statement*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "E" /* Proc statement - extract*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "X" /* Proc statement - report*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "1" /* report extension*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "2" /* report sequence*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "3" /* report type*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "T" /* report type*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "4" /* forms code*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "R") /* report control card*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        FG0DW02.TARJCL = FG0DT02.TARJCL[FG0DWIXT]; /* JCL*/
        FG0DW02.TARTYPE = FG0DT02.TARTYPE[FG0DWIXT]; /* Type*/
        ;
        FG0DW00.FG0DW-NEED-SHIP-SEL = FG0DM030.FG0DM-NEED-SHIP-SEL;
        ;
        FG0DS-02(); /* Format variable field*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DW02.TARJCL; /* Parameters*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DW02.TARTYPE; /* Type*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DT02.TARJCL[FG0DWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DT02.TARTYPE[FG0DWIXT]; /* Type*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0DT02.TARJCL[FG0DWIXT] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FG0DW00.FG0DWIXT = FG0DW00.FG0DWIXT + 1; /* Input table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "351"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    ;
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    ;
  end
  ;
end // end FG0D-3511

// FF4401 test JCL
Function FG0D-3512()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  ;
  FG0DW00.FG0DWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FG0DT5O.TARTYPE[FG0DWIXT] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      set FG0DW20 empty; /* Parameters work area*/
      ;
      FG0DW20.FG0DW-BEG-MO = FFZREC.FFZBEGMO; /* Beginning month*/
      FG0DW20.FG0DW-END-MO = FFZREC.FFZENDMO; /* Ending month*/
      FG0DW20.XPLCD = FG0DM030.XPLCD; /* Product line*/
      FG0DW20.YPGCD = "*"; /* Force type group code*/
      FG0DW20.FG0DW-SEAS-END-MO[1] = FG0DW00.FG0DSNDT[1];
      FG0DW20.FG0DW-SEAS-END-MO[2] = FG0DW00.FG0DSNDT[2];
      FG0DW20.FG0DW-SEAS-END-MO[3] = FG0DW00.FG0DSNDT[3];
      FG0DW20.FG0DW-SEAS-END-MO[4] = FG0DW00.FG0DSNDT[4];
      FG0DW20.FG0DW-NEED-SHIP-SEL = FG0DM030.FG0DM-NEED-SHIP-SEL;
      FG0DW20.FG0DW-XQA-CD1 = "01"; /* Quality code*/
      FG0DW20.FG0DW-XQA-CD2 = "02"; /* Quality code*/
      FG0DW20.FG0DW-XLC-CD1 = "10"; /* Life cycle code*/
      FG0DW20.FG0DW-XLC-CD2 = "20"; /* Life cycle code*/
      FG0DW20.FG0DW-3YR-2YR-RPT = 1; /* report type*/
      FG0DW20.FG0DW-USER-ID = COMMAREA.CAUSERID; /* user id*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG0DW20.TARJCL; /* Parameters*/
      TA6REC.TARTYPE[TA6INDEX] = FG0DT5O.TARTYPE[FG0DWIXT]; /* Type*/
      ;
    else
      ;
      if (FG0DT5O.TARTYPE[FG0DWIXT] == "J" /* Job statement*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "E" /* Proc statement - extract*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "X" /* Proc statement - report*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "A" /* Run statement  - extract*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "B" /* Run statement  - report*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "1" /* Report extension*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "2" /* Report sequence*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "3" /* Report sequence*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "T" /* Report type*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "4" /* forms code*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "R") /* Report control card*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        FG0DW02.TARJCL = FG0DT5O.TARJCL[FG0DWIXT]; /* JCL*/
        FG0DW02.TARTYPE = FG0DT5O.TARTYPE[FG0DWIXT]; /* Type*/
        ;
        FG0DW00.FG0DW-NEED-SHIP-SEL = FG0DM030.FG0DM-NEED-SHIP-SEL;
        ;
        FG0DS-02(); /* Format variable field*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DW02.TARJCL; /* Parameters*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DW02.TARTYPE; /* Type*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DT5O.TARJCL[FG0DWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DT5O.TARTYPE[FG0DWIXT]; /* Type*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0DT5O.TARJCL[FG0DWIXT] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FG0DW00.FG0DWIXT = FG0DW00.FG0DWIXT + 1; /* Input table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "351"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    ;
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    ;
  end
  ;
end // end FG0D-3512

// Process cat,stygrp,styclr rpt
Function FG0D-352()
  ;
   /* ------------------------------------------------------*/
   /* Call sub-routine to find which environment the*/
   /* program is executing in, development or production.*/
   /* ------------------------------------------------------*/
  ;
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    ;
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FG0D-3521(); /* format production JCL*/
    else
      FG0D-3522(); /* format test JCL*/
    end
    ;
  else
    ;
    FFWREC.XXXMODID = "352"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print rqst*/
    ;
  end
  ;
end // end FG0D-352

// FF3301 production JCL
Function FG0D-3521()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  ;
  FG0DW00.FG0DWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FG0DT03.TARTYPE[FG0DWIXT] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      set FG0DW21 empty; /* Parameters work area*/
      ;
      FG0DW21.FG0DW-BEG-MO = FFZREC.FFZBEGMO; /* Beginning month*/
      FG0DW21.FG0DW-END-MO = FFZREC.FFZENDMO; /* Ending month*/
      FG0DW21.XPLCD = FG0DM030.XPLCD; /* Product line*/
      FG0DW21.YPGCD = FG0DM030.YPGCD; /* Product type group*/
      FG0DW21.XPCCD = FG0DM030.XPCCD; /* Product category*/
      FG0DW21.FG0DW-SEAS-END-MO[1] = FG0DW00.FG0DSNDT[1];
      FG0DW21.FG0DW-SEAS-END-MO[2] = FG0DW00.FG0DSNDT[2];
      FG0DW21.FG0DW-SEAS-END-MO[3] = FG0DW00.FG0DSNDT[3];
      FG0DW21.FG0DW-SEAS-END-MO[4] = FG0DW00.FG0DSNDT[4];
      FG0DW21.XPRCD[1] = FG0DM030.XPRCD[1]; /* type code*/
      FG0DW21.XPRCD[2] = FG0DM030.XPRCD[2];
      FG0DW21.XPRCD[3] = FG0DM030.XPRCD[3];
      FG0DW21.XPRCD[4] = FG0DM030.XPRCD[4];
      FG0DW21.XPRCD[5] = FG0DM030.XPRCD[5];
      FG0DW21.FG0DW-NEED-SHIP-SEL = FG0DM030.FG0DM-NEED-SHIP-SEL;
      FG0DW21.FG0DW-COMB-TYPE-CD = FG0DM030.FG0DM-COMB-TYP-CDS;
      ;
      FFXREC.FFXCHAR = FG0DM030.FG0DM-SLS-FCST-MIN; /* sls fcst min*/
      XSFFS11();
      FG0DW21.FG0DW-SLS-FCST-MIN-CHAR = FFXREC.FFXCHAR;
      FG0DW21.FG0DW-SLS-FCST-MIN-NUM = FFXREC.FFXNUMB;
      ;
      FG0DW21.FG0DW-3YR-2YR-RPT = 1; /* report type*/
      FG0DW21.FG0DW-USER-ID = COMMAREA.CAUSERID; /* user id*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG0DW21.TARJCL; /* Parameters*/
      TA6REC.TARTYPE[TA6INDEX] = FG0DT03.TARTYPE[FG0DWIXT]; /* Type*/
      ;
    else
      ;
      if (FG0DT03.TARTYPE[FG0DWIXT] == "J" /* Job statement*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "E" /* Proc statement - extract*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "C" /* Proc statement - cat report*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "G" /* Proc statement - stygrp rpt*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "S" /* Proc statement - styclr rpt*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "5" /* Condition*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "6" /* Condition*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "7" /* Condition*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "1" /* report extension*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "2" /* report sequence*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "3" /* report sequence*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "T" /* report type*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "4" /* forms code*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "R") /* report distribution*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        FG0DW02.TARJCL = FG0DT03.TARJCL[FG0DWIXT]; /* JCL*/
        FG0DW02.TARTYPE = FG0DT03.TARTYPE[FG0DWIXT]; /* Type*/
        ;
        FG0DW00.FG0DW-NEED-SHIP-SEL = FG0DM030.FG0DM-NEED-SHIP-SEL;
        ;
        FG0DS-03(); /* Format variable field*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DW02.TARJCL; /* Parameters*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DW02.TARTYPE; /* Type*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DT03.TARJCL[FG0DWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DT03.TARTYPE[FG0DWIXT]; /* Type*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0DT03.TARJCL[FG0DWIXT] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FG0DW00.FG0DWIXT = FG0DW00.FG0DWIXT + 1; /* Input table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "352"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    ;
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    ;
  end
  ;
end // end FG0D-3521

// FF3301 test JCL
Function FG0D-3522()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  ;
  FG0DW00.FG0DWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FG0DT51.TARTYPE[FG0DWIXT] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      set FG0DW21 empty; /* Parameters work area*/
      ;
      FG0DW21.FG0DW-BEG-MO = FFZREC.FFZBEGMO; /* Beginning month*/
      FG0DW21.FG0DW-END-MO = FFZREC.FFZENDMO; /* Ending month*/
      FG0DW21.XPLCD = FG0DM030.XPLCD; /* Product line*/
      FG0DW21.YPGCD = FG0DM030.YPGCD; /* Product type group*/
      FG0DW21.XPCCD = FG0DM030.XPCCD; /* Product category*/
      FG0DW21.FG0DW-SEAS-END-MO[1] = FG0DW00.FG0DSNDT[1];
      FG0DW21.FG0DW-SEAS-END-MO[2] = FG0DW00.FG0DSNDT[2];
      FG0DW21.FG0DW-SEAS-END-MO[3] = FG0DW00.FG0DSNDT[3];
      FG0DW21.FG0DW-SEAS-END-MO[4] = FG0DW00.FG0DSNDT[4];
      FG0DW21.XPRCD[1] = FG0DM030.XPRCD[1]; /* type code*/
      FG0DW21.XPRCD[2] = FG0DM030.XPRCD[2];
      FG0DW21.XPRCD[3] = FG0DM030.XPRCD[3];
      FG0DW21.XPRCD[4] = FG0DM030.XPRCD[4];
      FG0DW21.XPRCD[5] = FG0DM030.XPRCD[5];
      FG0DW21.FG0DW-NEED-SHIP-SEL = FG0DM030.FG0DM-NEED-SHIP-SEL;
      FG0DW21.FG0DW-COMB-TYPE-CD = FG0DM030.FG0DM-COMB-TYP-CDS;
      ;
      FFXREC.FFXCHAR = FG0DM030.FG0DM-SLS-FCST-MIN; /* sls fcst min*/
      XSFFS11();
      FG0DW21.FG0DW-SLS-FCST-MIN-CHAR = FFXREC.FFXCHAR;
      FG0DW21.FG0DW-SLS-FCST-MIN-NUM = FFXREC.FFXNUMB;
      ;
      FG0DW21.FG0DW-3YR-2YR-RPT = 1; /* report type*/
      FG0DW21.FG0DW-USER-ID = COMMAREA.CAUSERID; /* user id*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG0DW21.TARJCL; /* Parameters*/
      TA6REC.TARTYPE[TA6INDEX] = FG0DT51.TARTYPE[FG0DWIXT]; /* Type*/
      ;
    else
      ;
      if (FG0DT51.TARTYPE[FG0DWIXT] == "J" /* Job statement*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "E" /* Proc statement - extract*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "C" /* Proc statement - cat report*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "G" /* Proc statement - stygrp rpt*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "S" /* Proc statement - styclr rpt*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "5" /* Condition - cat report*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "6" /* Condition - stygrp rpt*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "7" /* Condition - styclr rpt*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "A" /* Run statement  - extract*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "B" /* Run statement  - cat report*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "D" /* Run statement  - stygrp rpt*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "F" /* Run statement  - styclr rpt*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "1" /* Report extension*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "2" /* Report sequence*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "3" /* Report sequence*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "T" /* Report type*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "4" /* forms code*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "R") /* Report distribution*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        FG0DW02.TARJCL = FG0DT51.TARJCL[FG0DWIXT]; /* JCL*/
        FG0DW02.TARTYPE = FG0DT51.TARTYPE[FG0DWIXT]; /* Type*/
        ;
        FG0DW00.FG0DW-NEED-SHIP-SEL = FG0DM030.FG0DM-NEED-SHIP-SEL;
        ;
        FG0DS-03(); /* Format variable field*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DW02.TARJCL; /* Parameters*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DW02.TARTYPE; /* Type*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DT51.TARJCL[FG0DWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DT51.TARTYPE[FG0DWIXT]; /* Type*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0DT51.TARJCL[FG0DWIXT] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FG0DW00.FG0DWIXT = FG0DW00.FG0DWIXT + 1; /* Input table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "352"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    ;
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    ;
  end
  ;
end // end FG0D-3522

// 2 Year Sales forecast report
Function FG0D-400()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FG0D-410(); /* Format and display the map*/
  ;
  FG0D-420(); /* Check attention identifier*/
  ;
  FG0D-430(); /* Reset fields to normal intensity*/
  ;
  FG0D-440(); /* Verify the data that was entered*/
  ;
  FG0D-450(); /* Process valid input request*/
  ;
  ;
end // end FG0D-400

// Format and display the map
Function FG0D-410()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/
  ;
  FG0DM040.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FG0DM040.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FG0DM040.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FG0DM040.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FG0DM040.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FG0DM040.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (FFWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FG0DM040.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    FG0DM040.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    ;
    set FG0DM040 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FG0DM040 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  ;
end // end FG0D-410

// Check attention identifier
Function FG0D-420()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    FG0DW00.FG0DMSEL[4] = "C"; /* Indicate selection cancelled*/
    ;
    set FG0DM040 initial; /* m022 input/output*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    ;
    FG0DW00.FG0DWSWX = "Y"; /* Indicate exit requested*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf5)  /* PF5 was not pressed*/
    ;
    FFWREC.XXXMODID = "420"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FG0D-420

// Reset highlighted fields
Function FG0D-430()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  FG0DW00.FG0DWIXM = 1; /* Map line index*/
  ;
  while (FG0DW00.FG0DWIXM <= 4) /* Until end of lines*/
    ;
    set FG0DM040.FG0DM-SEQ[FG0DWIXM] initialAttributes; /* Report sequence selection*/
    ;
    FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM + 1; /* Map line index*/
    ;
  end
  ;
  set FG0DM040.FG0DM-NEED-SHIP-SEL initialAttributes; /* need/ship mo selection*/
  ;
  set FG0DM040.FG0DM-BEG-MO initialAttributes; /* Beginning month*/
  set FG0DM040.FG0DM-END-MO initialAttributes; /* Ending month*/
  set FG0DM040.XPLCD initialAttributes; /* Product line*/
  set FG0DM040.YPGCD initialAttributes; /* Product type group*/
  set FG0DM040.XPRCD[1] initialAttributes; /* Product type code*/
  set FG0DM040.XPRCD[2] initialAttributes; /* Product type code*/
  set FG0DM040.XPRCD[3] initialAttributes; /* Product type code*/
  set FG0DM040.XPRCD[4] initialAttributes; /* Product type code*/
  set FG0DM040.FG0DM-COMB-TYP-CDS initialAttributes; /* Combine indicator*/
  set FG0DM040.XPCCD initialAttributes; /* Product category*/
  set FG0DM040.FG0DM-SEAS-END-MO[1] initialAttributes; /* season end month*/
  set FG0DM040.FG0DM-SEAS-END-MO[2] initialAttributes; /* season end month*/
  set FG0DM040.FG0DM-SEAS-END-MO[3] initialAttributes; /* season end month*/
  set FG0DM040.FG0DM-SEAS-END-MO[4] initialAttributes; /* season end month*/
  set FG0DM040.FG0DM-SLS-FCST-MIN initialAttributes; /* sales forecast minimum*/
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM040.XPLCD == "?" /* Product line list requested*/
   || FG0DM040.YPGCD == "?" /* or product type group list requested*/
   || FG0DM040.XPRCD == "?" /* or product type code list requested*/
   || FG0DM040.XPCCD == "?" /* or product category list requested*/
  )                        
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      FFWREC.XXXMODID = "430"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  else
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM040.XPLCD == "?") /* Product line list requested*/
    ;
    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  LINE"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0DM040.XPLCD = " "; /* Clear code*/
      FG0DM040.XPLABRV = " "; /* Abbreviation*/
    else
      FG0DM040.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FG0DM040.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FG0DM040.XPLCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type group codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM040.YPGCD == "?") /* Product type group list requested*/
    ;
    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  TYPE GRP"; /* Heading*/
    XX0XW02.YPGFFFL = "Y"; /* Footwear forecasting flag*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0DM040.YPGCD = " "; /* Clear code*/
      FG0DM040.YPGABRV = " "; /* Abbreviation*/
    else
      FG0DM040.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FG0DM040.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FG0DM040.YPGCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type codes*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM040.XPRCD[1] == "?") /* product type requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PROD TYPE"; /* Heading*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0DM040.XPRCD[1] = "  "; /* Clear code*/
    else
      FG0DM040.XPRCD[1] = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG0DM040.XPRCD[1] cursor; /* Establish cursor position*/
    ;
  end
  ;
  ;
  if (FG0DM040.XPRCD[2] == "?") /* product type requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PROD TYPE"; /* Heading*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0DM040.XPRCD[2] = "  "; /* Clear code*/
    else
      FG0DM040.XPRCD[2] = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG0DM040.XPRCD[2] cursor; /* Establish cursor position*/
    ;
  end
  ;
  ;
  if (FG0DM040.XPRCD[3] == "?") /* product type requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PROD TYPE"; /* Heading*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0DM040.XPRCD[3] = "  "; /* Clear code*/
    else
      FG0DM040.XPRCD[3] = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG0DM040.XPRCD[3] cursor; /* Establish cursor position*/
    ;
  end
  ;
  ;
  if (FG0DM040.XPRCD[4] == "?") /* product type requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PROD TYPE"; /* Heading*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0DM040.XPRCD[4] = "  "; /* Clear code*/
    else
      FG0DM040.XPRCD[4] = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG0DM040.XPRCD[4] cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product category codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM040.XPCCD == "?") /* Product category list requested*/
    ;
    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0DM040.XPCCD = " "; /* Clear code*/
      FG0DM040.XPCABRV = " "; /* Abbreviation*/
    else
      FG0DM040.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FG0DM040.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FG0DM040.XPCCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FFWREC.XXXMODID = "430"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0D-430

// Verify the entered data
Function FG0D-440()
   /* ------------------------------------------------------------*/
   /* Verify season end month.*/
   /* ------------------------------------------------------------*/
  ;
  FG0D-441(); /* validate season end months*/
  ;
   /* ------------------------------------------------------------*/
   /* Verify sales forecast minimum*/
   /* ------------------------------------------------------------*/
  ;
  FG0D-443(); /* validate sales fcst minimum*/
  ;
   /* ------------------------------------------------------------*/
   /* Verify product type codes and combine type code indicator.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM040.FG0DM-COMB-TYP-CDS == "N") /* Combine type codes EQ 'N'*/
    ;
    if (FG0DM040.FG0DM-SEQ[1] == "S") /* Report by line/cat*/
      converseLib.validationFailed(324); /* can't print this report*/
      FFWREC.XXXMODID = "440"; /* error module id*/
      set FG0DM040.FG0DM-SEQ[1] cursor, bold; /* highlight*/
      set FG0DM040.FG0DM-COMB-TYP-CDS bold; /* highlight*/
    end
    ;
  end
  ;
  if (FG0DM040.XPRCD[1] == " " /* Type code(s) not entered*/
   && FG0DM040.XPRCD[2] == " " 
   && FG0DM040.XPRCD[3] == " " 
   && FG0DM040.XPRCD[4] == " " 
   && FG0DM040.XPRCD[5] == " ")
    ;
      /* continue*/
    ;
  else /* Type code(s) entered*/
    ;
    if (FG0DM040.FG0DM-SEQ[2] == "S" /* Report by line/cat*/
     || FG0DM040.FG0DM-SEQ[3] == "S" /* Report by style group*/
     || FG0DM040.FG0DM-SEQ[4] == "S") /* Report by style/color*/
      ;
      FG0D-442(); /* Validate type codes*/
      ;
    else
      ;
      FG0DW00.FG0DWIXM = 5;
      while (FG0DW00.FG0DWIXM >= 1)
        if (FG0DM040.XPRCD[FG0DWIXM] > " ") /* Type code entered*/
          set FG0DM040.XPRCD[FG0DWIXM] bold; /* highlight*/
        end
        FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM - 1;
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid product category code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM040.XPCCD > " ") /* Product category entered*/
    ;
    XPCREC.XPCCD = FG0DM040.XPCCD; /* Product category*/
    XPCREC.XGPCD = COMMAREA.XGPCD; /* GPC*/
    ;
    if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      ;
      FG0DM040.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
      ;
    else
      ;
      FG0DM040.XPCABRV = " "; /* Abbreviation*/
      ;
      FFWREC.XXXMODID = "440"; /* Module identification*/
      set FG0DM040.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Invalid value entered*/
      ;
    end
    ;
  else
    ;
    FG0DM040.XPCABRV = " "; /* Abbreviation*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid product type group code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM040.YPGCD > " " /* Product type group entered*/
   && FG0DM040.YPGCD != "*") /* and not wild card*/
    ;
    if (FG0DM040.YPGCD in YPGTBL.YPGCD /* Code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      ;
      FG0DM040.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      ;
    else
      ;
      FG0DM040.YPGABRV = " "; /* Abbreviation*/
      ;
      FFWREC.XXXMODID = "440"; /* Module identification*/
      set FG0DM040.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Invalid value entered*/
      ;
    end
    ;
  else
    ;
    if (FG0DM040.YPGCD == "* ")
      FG0DM040.YPGABRV = "ALL"; /* Abbreviation*/
    else
      ;
      FG0DM040.YPGABRV = " "; /* Abbreviation*/
      ;
      FFWREC.XXXMODID = "440"; /* Module identification*/
      set FG0DM040.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Required field*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid product line code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM040.XPLCD > " " /* Product line entered*/
   && FG0DM040.XPLCD != "* ") /* and not wild card*/
    ;
    XPLREC.XPLCD = FG0DM040.XPLCD; /* Product line*/
    XPLREC.XGPCD = COMMAREA.XGPCD; /* GPC*/
    ;
    if (XPLREC.XPLKEY in XPLTBL.XPLKEY /* Code in table*/
     && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      ;
      FG0DM040.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      ;
    else
      ;
      FG0DM040.XPLABRV = " "; /* Abbreviation*/
      ;
      FFWREC.XXXMODID = "440"; /* Module identification*/
      set FG0DM040.XPLCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Invalid value entered*/
      ;
    end
    ;
  else
    ;
    if (FG0DM040.XPLCD == "*") /* Wild card*/
      FG0DM040.XPLABRV = "ALL"; /* Abbreviation*/
    else
      ;
      FG0DM040.XPLABRV = " "; /* Abbreviation*/
      ;
      if (FG0DM040.FG0DM-SEQ[1] == "S" /* line report was selected*/
       || FG0DM040.FG0DM-SEQ[2] == "S") /* category report was selected*/
        ;
        FFWREC.XXXMODID = "440"; /* Module identification*/
        set FG0DM040.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(8); /* Required field*/
        ;
      end
      ;
      if (FG0DM040.FG0DM-SEQ[3] == "S" /* Style grp rpt was selected*/
       || FG0DM040.FG0DM-SEQ[4] == "S") /* Style clr rpt was selected*/
        ;
        if (FG0DM040.XPCCD == "  ") /* No category entered*/
          ;
          FFWREC.XXXMODID = "440"; /* Module identification*/
          set FG0DM040.XPLCD cursor, bold; /* Highlight*/
          set FG0DM040.XPCCD bold;
          converseLib.validationFailed(8); /* Required field*/
          ;
        end
      end
      ;
    end
    ;
  end
  ;
   /* --------------------------------------------------------------*/
   /* Verify the relationship between line, type group and category*/
   /* --------------------------------------------------------------*/
  ;
  FG0D-444(); /* call ffxrf01 table*/
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid date range was entered.*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty; /* Subroutine parameters*/
  ;
  FFZREC.FFZBYYMM = FG0DM040.FG0DM-BEG-MO; /* Beginning month*/
  FFZREC.FFZEYYMM = FG0DM040.FG0DM-END-MO; /* Ending month*/
  ;
  FFZREC.FFZSRANG = "Y"; /* Accept any beginning month*/
  ;
  TA1REC.TA1PGMNM = "FG0D440"; /* Calling process*/
  ;
  XSFFS30(); /* Edit the date range*/
  ;
  if (FFZREC.FFZENDRC == "0") /* Valid ending month*/
    ;
     /* NEXT SENTENCE*/
    ;
  else
    ;
    FFWREC.XXXMODID = "440"; /* Module identification*/
    set FG0DM040.FG0DM-END-MO cursor, bold; /* Highlight*/
    converseLib.validationFailed(17); /* Invalid date entered*/
    ;
  end
  ;
  if (FFZREC.FFZBEGRC == "0") /* Valid beginning month*/
    ;
     /* NEXT SENTENCE*/
    ;
  else
    ;
    FFWREC.XXXMODID = "440"; /* Module identification*/
    set FG0DM040.FG0DM-BEG-MO cursor, bold; /* Highlight*/
    converseLib.validationFailed(17); /* Invalid date entered*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify combine type*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM040.FG0DM-COMB-TYP-CDS != "N" /* Combine type codes*/
   && FG0DM040.FG0DM-COMB-TYP-CDS != "Y")
    FFWREC.XXXMODID = "440"; /* Module identification*/
    converseLib.validationFailed(10); /* Invalid selection code*/
    set FG0DM040.FG0DM-COMB-TYP-CDS cursor, bold; /* Highlight*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify need month or ship month selection*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM040.FG0DM-NEED-SHIP-SEL != "N"
   && FG0DM040.FG0DM-NEED-SHIP-SEL != "S")
    FFWREC.XXXMODID = "440"; /* Module identification*/
    converseLib.validationFailed(10); /* Invalid selection code*/
    set FG0DM040.FG0DM-NEED-SHIP-SEL cursor, bold; /* Highlight*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify sequence by selection*/
   /* ------------------------------------------------------------*/
  ;
  FG0DW00.FG0DWIXM = 4;
  while (FG0DW00.FG0DWIXM >= 1)
    if (FG0DM040.FG0DM-SEQ[FG0DWIXM] != "S"
     && FG0DM040.FG0DM-SEQ[FG0DWIXM] != " ") /**/
      FFWREC.XXXMODID = "440"; /* Module identification*/
      converseLib.validationFailed(10); /* Invalid selection code*/
      set FG0DM040.FG0DM-SEQ[FG0DWIXM] cursor, bold; /* Highlight*/
    end
    FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM - 1;
  end
  ;
  if (FG0DM040.FG0DM-SEQ[1] == " "
   && FG0DM040.FG0DM-SEQ[2] == " "
   && FG0DM040.FG0DM-SEQ[3] == " "
   && FG0DM040.FG0DM-SEQ[4] == " ") /* no report selected*/
    FFWREC.XXXMODID = "440"; /* Module identification*/
    converseLib.validationFailed(8); /* required field*/
    set FG0DM040.FG0DM-SEQ[1] cursor, bold; /* Highlight*/
    set FG0DM040.FG0DM-SEQ[2] bold; /* Highlight*/
    set FG0DM040.FG0DM-SEQ[3] bold; /* Highlight*/
    set FG0DM040.FG0DM-SEQ[4] bold; /* Highlight*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end
  ;
end // end FG0D-440

// Validate season end months
Function FG0D-441()
   /* ------------------------------------------------------------*/
   /* validate season lengths*/
   /* determine the number of seasons entered, look backwards*/
   /* data found.*/
   /* ------------------------------------------------------------*/
  ;
  move "    " to FG0DW00.FG0DSNDT[1] for all; /* spaces to season end dates*/
  ;
  FG0DW00.FG0DWNSS = 0; /* zero out number of seasons*/
  FG0DW00.FG0DWIXM = 4; /* index*/
  while (FG0DW00.FG0DWIXM > 0)
    if (FG0DM040.FG0DM-SEAS-END-MO[FG0DWIXM] > 0)
      FG0DW00.FG0DWNSS = FG0DW00.FG0DWIXM; /* number of seasons*/
      FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM - 4; /* force out of loop*/
    else
      FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM - 1;
    end
  end
  ;
     /* look for season end months greater than 12*/
  ;
  FG0DWIXM = 1; /* 0 to index*/
  while (FG0DW00.FG0DWIXM <= FG0DWNSS)
    if (FG0DM040.FG0DM-SEAS-END-MO[FG0DWIXM] > 12)
      FFWREC.XXXMODID = "441"; /* Module identification*/
      set FG0DM040.FG0DM-SEAS-END-MO[FG0DWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Invalid data*/
      FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM + 1;
    else
      FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM + 1;
    end
  end
  ;
  if (converseVar.validationMsgNum > 0) /* errors found*/
    return; /* get out*/
  end
  ;
   /* If no season end month entered then check the length of the range,*/
   /* if <= 6 months use default (end month of the range)*/
  ;
  FG0DW00.FG0DBDAT = FG0DM040.FG0DM-BEG-MO;
  FG0DW00.FG0DEDAT = FG0DM040.FG0DM-END-MO;
  ;
  if (FG0DW00.FG0DWNSS == 0) /* no season lengths found*/
    if (FG0DW00.FG0DBYY == FG0DW00.FG0DEYY) /* same year*/
      FG0DW00.FG0DW-MON-COUNT = FG0DW00.FG0DEMM - FG0DW00.FG0DBMM + 1;
    else
      FG0DW00.FG0DW-MON-COUNT = FG0DW00.FG0DEMM + 12 - FG0DW00.FG0DBMM + 1;
    end
    ;
    if (FG0DW00.FG0DW-MON-COUNT <= 6)
      FG0DW00.FG0DWNSS = 1;
      FG0DM040.FG0DM-SEAS-END-MO[1] = FG0DW00.FG0DEMM; /* seas end mo*/
    end
  end
  ;
   /* look for no seasons entered with line report, b-grade report*/
  ;
  if (FG0DW00.FG0DWNSS == 0) /* no season lengths found*/
    if (FG0DM040.FG0DM-SEQ[1] == "S" /* if line/type*/
     || FG0DM040.FG0DM-SEQ[2] == "S") /* or line/cat*/
      if (FG0DM040.XPCCD == "  ") /* no category entered*/
        FFWREC.XXXMODID = "441"; /* Module identification*/
        set FG0DM040.FG0DM-SEAS-END-MO[1] cursor, bold; /* Highlight*/
        converseLib.validationFailed(448); /* sesn end must be entered w/ no cat*/
        return; /* return to previous routine*/
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* default to category seasons if end months not entered*/
   /* ------------------------------------------------------------*/
  if (FG0DW00.FG0DWNSS == 0) /* no season lengths found*/
    ;
    if (FG0DM040.XPCCD != " ") /* category code entered*/
      set FF2REC empty;
      FF2REC.YPGCD = FG0DM040.YPGCD; /* type group code*/
      FG0D-4411(); /* use sesn end months from*/
                                   /* vffxrf01 table*/
   /* ------------------------------------------------------------*/
   /* determine season lengths from category table*/
   /* ------------------------------------------------------------*/
      if (VAGen_SQLCODE == 0)
        FG0DWIXM = 1;
        FG0DW00.FG0DSNLN = 0; /* zero sesn length*/
        while (FG0DWIXM <= FF2REC.FF2NSEAS)
          FG0DW00.FG0D1DAT = FF2REC.FF2SEASN[FG0DWIXM];
          FG0DW00.FG0DWKMO = FG0DM040.FG0DM-BEG-MO;
          if (FG0DW00.FG0D1MM == FG0DW00.FG0DWKMO) /* category month =*/
                                   /* screen begin month?*/
            FG0DW00.FG0DBDAT = FG0DM040.FG0DM-BEG-MO - 1; /* get sesn end*/
                                   /* from begin dte on screen*/
            if (FG0DBMM == 00)
              FG0DW00.FG0DBDAT = FG0DW00.FG0DBDAT - 88;
            end
            FG0DW00.FG0DWDAT = FG0DW00.FG0DBDAT;
                                   /* save orig sesn end*/
            FG0DWIXM = 1;
            FG0DWIX2 = 2;
            while (FG0DWIX2 <= FF2REC.FF2NSEAS) /* while more cat dates*/
              FG0DW00.FG0D1DAT = FF2REC.FF2SEASN[FG0DWIXM];
              FG0DW00.FG0D2DAT = FF2REC.FF2SEASN[FG0DWIX2];
              if (FG0DW00.FG0D2YY > FG0DW00.FG0D1YY)
                FG0DW00.FG0DWKMO = FG0DW00.FG0D2MM + 12;
              else
                FG0DW00.FG0DWKMO = FG0DW00.FG0D2MM + 0;
              end
                                   /* season length =*/
   /* sesn1 mos - sesn2 mos*/
   /* + sesn length*/
              FG0DW00.FG0DSNLN = FG0DW00.FG0DWKMO - FG0DW00.FG0D1MM               + FG0DW00.FG0DSNLN;
              ;
              FG0DBDAT = FG0DWDAT + FG0DSNLN; /* add sesn1 length to*/
                                   /* get sesn 1 end*/
              if (FG0DBMM > 12)
                FG0DBDAT = FG0DBDAT + 88; /* convert to next year*/
              end
              FG0DM040.FG0DM-SEAS-END-MO[FG0DWIXM] = FG0DBDAT;
              FG0DW00.FG0DSNDT[FG0DWIXM] = FG0DBDAT; /* to w00*/
              ;
              FG0DWIXM = FG0DWIXM + 1;
              FG0DWIX2 = FG0DWIX2 + 1; /* bump indexes*/
            end /* end of nested loop*/
            ;
            FG0DBDAT = FG0DWDAT + 100; /* get last sesn end*/
            ;
            if (FG0DBMM > 12)
              FG0DBDAT = FG0DBDAT + 88; /* convert to next year*/
            end
            FG0DM040.FG0DM-SEAS-END-MO[FG0DWIXM] = FG0DBDAT; /* to map*/
            FG0DW00.FG0DSNDT[FG0DWIXM] = FG0DBDAT; /* to w00*/
            ;
            FG0DWIXM = 6; /* set indx to leave 1st loop*/
            ;
          else
            FG0DWIXM = FG0DWIXM + 1; /* bump index and continue*/
          end
        end /* end of 1st loop*/
        if (FG0DWIXM != 6) /* indx not 6 - no hit on begin date*/
          FFWREC.XXXMODID = "441"; /* Module identification*/
          set FG0DM040.FG0DM-SEAS-END-MO[1] cursor, bold; /* Highlight*/
          converseLib.validationFailed(442); /* begin date ne category date*/
          return; /* return to previous routine*/
        end
      else
        FFWREC.XXXMODID = "441"; /* Module identification*/
        set FG0DM040.XPCCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(174); /* sqlcode = -100*/
        return; /* return to previous routine*/
      end
    else
      FFWREC.XXXMODID = "441"; /* Module identification*/
      set FG0DM040.XPCCD cursor, bold; /* Highlight*/
      set FG0DM040.FG0DM-SEAS-END-MO[1] bold; /* Highlight*/
      converseLib.validationFailed(443); /* no ends mos, no cat entered*/
      return; /* return to previous routine*/
    end
    ;
  else
              /* ** season end months were entered ****/
    ;
    FG0DW00.FG0DWIXM = 1; /* index*/
    while (FG0DW00.FG0DWIXM <= FG0DW00.FG0DWNSS) /* for number of seasons*/
      if (FG0DM040.FG0DM-SEAS-END-MO[FG0DWIXM] == 0)
                                   /* check for embedded zeros*/
        FFWREC.XXXMODID = "241"; /* Module identification*/
        set FG0DM040.FG0DM-SEAS-END-MO[FG0DWIXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(440); /* embedded zero msg*/
        return; /* return to previous routine*/
      else
        FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM + 1;
      end
    end
    ;
      /* ------------------------------------------------------------*/
       /* Verify range end month with the season end month.*/
      /* ------------------------------------------------------------*/
    FG0DW00.FG0DWIXM = FG0DW00.FG0DWNSS; /* last season number*/
    FG0DW00.FG0DWDAT = FG0DM040.FG0DM-END-MO; /* end date to work area*/
    ;
    if (FG0DW00.FG0DWMM != FG0DM040.FG0DM-SEAS-END-MO[FG0DWIXM])
                                   /* end mo <> last sesn mo*/
      FFWREC.XXXMODID = "441"; /* Module identification*/
      set FG0DM040.FG0DM-SEAS-END-MO[FG0DWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(447); /* last season must complete year*/
      return; /* return to previous routine*/
    end
      /* ------------------------------------------------------------*/
       /* Verify that season end months are valid.*/
      /* ------------------------------------------------------------*/
    FG0DWIXM = 1; /* reset index*/
    FG0DW00.FG0DWDAT = FG0DM040.FG0DM-BEG-MO; /* begin date to work*/
    ;
      /* set up season end YYMM in fg0dw02*/
    ;
    FG0DW00.FG0D1DAT = FG0DM040.FG0DM-BEG-MO; /* save begin date*/
    FG0DW00.FG0DSNYY[1] = FG0DW00.FG0DWYY; /* move year*/
    while (FG0DWIXM <= FG0DW00.FG0DWNSS)
      FG0DW00.FG0DSNMM[FG0DWIXM] = FG0DM040.FG0DM-SEAS-END-MO[FG0DWIXM]; /* move month*/
      ;
      if (FG0DW00.FG0DWMM > FG0DW00.FG0DSNMM[FG0DWIXM] /* bgn mo > end*/
       && FG0DW00.FG0D1YY == FG0DW00.FG0DWYY)          /* mo & yr not yet bumpd*/
        FG0DWYY = FG0DWYY + 1; /* bump year by 1*/
      end
      ;
      FG0DW00.FG0DSNYY[FG0DWIXM] = FG0DW00.FG0DWYY; /* move year*/
      FG0DWIXM = FG0DWIXM + 1; /* bump index*/
    end
    ;
    FG0DWIXM = 1;
    FG0DWIX2 = 2;
    ;
    while (FG0DWIX2 <= FG0DW00.FG0DWNSS)
      if (FG0DW00.FG0DSNDT[FG0DWIXM] /* sesn > next sesn*/
       >= FG0DW00.FG0DSNDT[FG0DWIX2])
        /* begin tcs*/
        if (FG0DW00.FG0DSNYY[FG0DWIX2] != 00)
          FFWREC.XXXMODID = "441"; /* Module identification*/
          set FG0DM040.FG0DM-SEAS-END-MO[FG0DWIXM] cursor, bold;
                                   /* Highlight*/
          converseLib.validationFailed(444); /* season must > following season*/
          FG0DWIXM = 0;
        end
        /* end   tcs*/
      end
      FG0DWIXM = FG0DWIXM + 1; /* bump index*/
      FG0DWIX2 = FG0DWIX2 + 1; /* bump index2*/
    end
    ;
  end
  ;
end // end FG0D-441

// Read vffxrf01 to get seas mos
Function FG0D-4411()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vffxrf01 table row*/
   /* ------------------------------------------------------------*/
  ;
  FF2REC.XPCCD = FG0DM040.XPCCD;
  FF2REC.YSMXDV = "10";
  ;
  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      return;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "441"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0D-4411

// Validate type code
Function FG0D-442()
   /* ------------------------------------------------------------*/
   /* Validate type codes and combine type code indicator*/
   /* ------------------------------------------------------------*/
  ;
   /* Validate type codes*/
  ;
  if (FG0DM040.YPGCD == " ") /* or type group code blank*/
    FFWREC.XXXMODID = "442"; /* error module id*/
    converseLib.validationFailed(203); /* inconsistent relationship*/
    set FG0DM040.YPGCD cursor, bold; /* highlight*/
    set FG0DM040.XPRCD[1] bold; /* highlight*/
    set FG0DM040.XPRCD[2] bold; /* highlight*/
    set FG0DM040.XPRCD[3] bold; /* highlight*/
    set FG0DM040.XPRCD[4] bold; /* highlight*/
  else /* Specific type group code entered*/
    ;
      /* Validate type code*/
    ;
    FG0DW00.FG0DWIXM = 5;
    while (FG0DW00.FG0DWIXM >= 1)
      if (FG0DM040.XPRCD[FG0DWIXM] > " ") /* type code entered*/
        if (FG0DM040.XPRCD[FG0DWIXM] in XPRTBL.XPRCD) /* type code exists*/
          if (XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* type code status 'A'*/
            if (XPRTBL.YPGCD[sysVar.arrayIndex] == FG0DM040.YPGCD) /* typgrps match*/
                /* continue*/
            else
              if (FG0DM040.YPGCD == "*") /* wildcard type group*/
                if (XPRTBL.YPGCD[sysVar.arrayIndex] == "01"
                 || XPRTBL.YPGCD[sysVar.arrayIndex] == "02")
                  ;
                else /* Type group code doesn't correspond*/
                               /* correctly to type code*/
                  FFWREC.XXXMODID = "442"; /* error module id*/
                  converseLib.validationFailed(203); /* inconsistent relationship*/
                  set FG0DM040.YPGCD cursor, bold; /* highlight*/
                  set FG0DM040.XPRCD[FG0DWIXM] bold; /* highlight*/
                end
              else
                FFWREC.XXXMODID = "442"; /* error module id*/
                converseLib.validationFailed(203); /* inconsistent relationship*/
                set FG0DM040.YPGCD cursor, bold; /* highlight*/
                set FG0DM040.XPRCD[FG0DWIXM] bold; /* highlight*/
              end
            end
          else /* type code status not 'A'*/
            FFWREC.XXXMODID = "442"; /* error module id*/
            converseLib.validationFailed(10); /* invalid value*/
            set FG0DM040.XPRCD[FG0DWIXM] cursor, bold; /* highlight*/
          end
        else
          FFWREC.XXXMODID = "442"; /* error module id*/
          converseLib.validationFailed(10); /* invalid value*/
          set FG0DM040.XPRCD[FG0DWIXM] cursor, bold; /* highlight*/
        end
      end
      FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM - 1;
    end
  end
  ;
   /* Check for embedded blanks*/
  ;
  FG0D-4421();
  ;
   /* Check for duplicates*/
  ;
  FG0D-4422();
  ;
end // end FG0D-442

// Check for embedded blanks
Function FG0D-4421()
   /* ------------------------------------------------------------*/
   /* Check for embedded blanks in the list of type codes*/
   /* ------------------------------------------------------------*/
  ;
   /* Check for embedded blanks*/
  ;
  if (FG0DM040.XPRCD[1] == " ")
    if (FG0DM040.XPRCD[2] == " ")
      if (FG0DM040.XPRCD[3] == " ")
        if (FG0DM040.XPRCD[4] == " ")
          /* continue*/
        else
          FFWREC.XXXMODID = "442"; /* error module id*/
          converseLib.validationFailed(10); /* invalid*/
          set FG0DM040.XPRCD[1] cursor, bold; /* highlight*/
          set FG0DM040.XPRCD[2] bold; /* highlight*/
          set FG0DM040.XPRCD[3] bold; /* highlight*/
        end
      else
        FFWREC.XXXMODID = "442"; /* error module id*/
        converseLib.validationFailed(10); /* invalid*/
        set FG0DM040.XPRCD[1] cursor, bold; /* highlight*/
        set FG0DM040.XPRCD[2] bold; /* highlight*/
      end
    else
      FFWREC.XXXMODID = "442"; /* error module id*/
      converseLib.validationFailed(10); /* invalid*/
      set FG0DM040.XPRCD[1] cursor, bold; /* highlight*/
    end
  else
    if (FG0DM040.XPRCD[2] == " ")
      if (FG0DM040.XPRCD[3] == " ")
        if (FG0DM040.XPRCD[4] == " ")
          /* continue*/
        else
          FFWREC.XXXMODID = "442"; /* error module id*/
          converseLib.validationFailed(10); /* invalid*/
          set FG0DM040.XPRCD[2] cursor, bold; /* highlight*/
          set FG0DM040.XPRCD[3] bold; /* highlight*/
        end
      else
        FFWREC.XXXMODID = "442"; /* error module id*/
        converseLib.validationFailed(10); /* invalid*/
        set FG0DM040.XPRCD[2] cursor, bold; /* highlight*/
      end
    else
      if (FG0DM040.XPRCD[3] == " ")
        if (FG0DM040.XPRCD[4] == " ")
          /* continue*/
        else
          FFWREC.XXXMODID = "442"; /* error module id*/
          converseLib.validationFailed(10); /* invalid*/
          set FG0DM040.XPRCD[3] cursor, bold; /* highlight*/
        end
      end
    end
  end
end // end FG0D-4421

// Check for duplicates
Function FG0D-4422()
   /* ------------------------------------------------------------*/
   /* Check for duplicates in the list of type codes*/
   /* ------------------------------------------------------------*/
  ;
   /* Check for duplicates*/
  ;
  if (FG0DM040.XPRCD[3] > " "
   && FG0DM040.XPRCD[3] == FG0DM040.XPRCD[4])
    FFWREC.XXXMODID = "442"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FG0DM040.XPRCD[3] cursor, bold; /* highlight*/
    set FG0DM040.XPRCD[4] bold; /* highlight*/
  end
  if (FG0DM040.XPRCD[2] > " "
   && FG0DM040.XPRCD[2] == FG0DM040.XPRCD[4])
    FFWREC.XXXMODID = "442"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FG0DM040.XPRCD[2] cursor, bold; /* highlight*/
    set FG0DM040.XPRCD[4] bold; /* highlight*/
  end
  if (FG0DM040.XPRCD[2] > " "
   && FG0DM040.XPRCD[2] == FG0DM040.XPRCD[3])
    FFWREC.XXXMODID = "442"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FG0DM040.XPRCD[2] cursor, bold; /* highlight*/
    set FG0DM040.XPRCD[3] bold; /* highlight*/
  end
  if (FG0DM040.XPRCD[1] > " "
   && FG0DM040.XPRCD[1] == FG0DM040.XPRCD[4])
    FFWREC.XXXMODID = "442"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FG0DM040.XPRCD[1] cursor, bold; /* highlight*/
    set FG0DM040.XPRCD[4] bold; /* highlight*/
  end
  if (FG0DM040.XPRCD[1] > " "
   && FG0DM040.XPRCD[1] == FG0DM040.XPRCD[3])
    FFWREC.XXXMODID = "442"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FG0DM040.XPRCD[1] cursor, bold; /* highlight*/
    set FG0DM040.XPRCD[3] bold; /* highlight*/
  end
  if (FG0DM040.XPRCD[1] > " "
   && FG0DM040.XPRCD[1] == FG0DM040.XPRCD[2])
    FFWREC.XXXMODID = "442"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FG0DM040.XPRCD[1] cursor, bold; /* highlight*/
    set FG0DM040.XPRCD[2] bold; /* highlight*/
  end
  ;
end // end FG0D-4422

// Validate sales fcst minimum
Function FG0D-443()
  FFXREC.FFXCHAR = FG0DM040.FG0DM-SLS-FCST-MIN;
  XSFFS11(); /* Translate value format*/
  ;
  if (FFXREC.FFXRTNCD == "0") /* Normal return*/
    ;
    if (FFXREC.FFXNUMB < 0) /* Negative value*/
      ;
      FFWREC.XXXMODID = "443"; /* Module identification*/
      converseLib.validationFailed(10); /* Invalid value entered*/
      set FG0DM040.FG0DM-SLS-FCST-MIN cursor, bold;
      ;
    end
    ;
  else
    ;
    FFWREC.XXXMODID = "443"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate invalid value entered*/
    set FG0DM040.FG0DM-SLS-FCST-MIN cursor, bold;
    ;
  end
  ;
end // end FG0D-443

// Verify lin,typ,cat relationshp
Function FG0D-444()
  ;
  if (FG0DM040.XPLCD != "*"
   && FG0DM040.XPLCD != " "
   && FG0DM040.XPCCD != " ")
    ;
    set FF2REC empty;
    ;
    if (FG0DM040.YPGCD == "*") /* wild card type group*/
      FF2REC.YPGCD = "01";
      FG0D-4411();
      if (SQLCA.VAGen_SQLCODE == +100) /* not found on vffxrf01*/
        FF2REC.YPGCD = "02";
        FG0D-4411();
        if (SQLCA.VAGen_SQLCODE == +100) /* not found on vffxrf01*/
          FG0DM040.XPLABRV = " "; /* Abbreviation*/
          FFWREC.XXXMODID = "440"; /* Module identification*/
          set FG0DM040.XPLCD cursor, bold; /* Highlight*/
          set FG0DM040.YPGCD bold;
          set FG0DM040.XPCCD bold;
          converseLib.validationFailed(203); /* Inconsistent relationship*/
          ;
        end
      end
    else
      FF2REC.YPGCD = FG0DM040.YPGCD;
      FG0D-4411(); /* read vffxrf01*/
    end
    ;
    if (FG0DM040.XPLCD != FF2REC.XPLCD) /* different line code*/
      ;
      FG0DM040.XPLABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "440"; /* Module identification*/
      set FG0DM040.XPLCD cursor, bold; /* Highlight*/
      set FG0DM040.YPGCD bold;
      set FG0DM040.XPCCD bold;
      converseLib.validationFailed(203); /* Inconsistent relationship*/
      ;
    end
    ;
  end
  ;
end // end FG0D-444

// Process valid input request
Function FG0D-450()
   /* ------------------------------------------------------------*/
   /* Indicate the job identification and forms code to be used.*/
   /* ------------------------------------------------------------*/
  ;
   /* ***********************/
   /* line/type report*/
   /* ***********************/
  ;
  if (FG0DM040.FG0DM-SEQ[1] == "S")
    ;
    if (FG0DM040.FG0DM-NEED-SHIP-SEL == "N") /* Need month*/
      FG0DW00.FG0DWJOB = "5001"; /* Job id*/
      FG0DW00.FG0DW-REPT-TYPE = "DMND"; /* Report type*/
    else
      FG0DW00.FG0DWJOB = "5002"; /* Proc id*/
      FG0DW00.FG0DW-REPT-TYPE = "SHIP"; /* Report type*/
    end
    ;
    FG0DW00.FG0DW-FORM = "38"; /* Forms code*/
    FG0DW00.FG0DW-CNTL-PRGM-ID = "500"; /* control card pgm id*/
    FG0DW00.FG0DW-PROC = "500"; /* Proc id*/
    FG0DW00.FG0DW-REPT-EXT = "YEAR2"; /* Report extension*/
    ;
    FG0D-451(); /* process line report*/
    ;
  end
  ;
   /* *************************/
   /* line/category report*/
   /* style group report*/
   /* style color report*/
   /* *************************/
  ;
  ;
  if (FG0DM040.FG0DM-SEQ[2] == "S" /* By line/category*/
   || FG0DM040.FG0DM-SEQ[3] == "S" /* By style group*/
   || FG0DM040.FG0DM-SEQ[4] == "S") /* By style color*/
    ;
    if (FG0DM040.FG0DM-NEED-SHIP-SEL == "N") /* Need month*/
      FG0DW00.FG0DWJOB = "5101";
      FG0DW00.FG0DW-REPT-TYPE = "DMND"; /* Report type*/
    else
      FG0DW00.FG0DWJOB = "5102";
      FG0DW00.FG0DW-REPT-TYPE = "SHIP"; /* Report type*/
    end
    ;
    FG0DW00.FG0DW-COND1 = 1; /* Initialize condition code*/
    FG0DW00.FG0DW-COND2 = 1; /* Initialize condition code*/
    FG0DW00.FG0DW-COND3 = 1; /* Initialize condition code*/
    ;
    FG0DW00.FG0DW-PROC1 = "510"; /* Proc id*/
    FG0DW00.FG0DW-PROC2 = "520"; /* Proc id*/
    FG0DW00.FG0DW-PROC3 = "530"; /* Proc id*/
    ;
    FG0DW00.FG0DW-FORM1 = "39"; /* Forms code*/
    FG0DW00.FG0DW-FORM2 = "40"; /* Forms code*/
    FG0DW00.FG0DW-FORM3 = "41"; /* Forms code*/
    ;
    if (FG0DM040.FG0DM-SEQ[2] == "S") /* By line/category*/
      FG0DW00.FG0DW-COND1 = 0; /* set condition code*/
      FG0DW00.FG0DW-CNTL-PRGM-1 = "510"; /* control card pgm id*/
    end
    ;
    if (FG0DM040.FG0DM-SEQ[3] == "S") /* By style group*/
      FG0DW00.FG0DW-CNTL-PRGM-2 = "520"; /* control card pgm id*/
      FG0DW00.FG0DW-COND2 = 0; /* set condition code*/
    end
    ;
    if (FG0DM040.FG0DM-SEQ[4] == "S") /* By style color*/
      FG0DW00.FG0DW-CNTL-PRGM-3 = "530"; /* control card pgm id*/
      FG0DW00.FG0DW-COND3 = 0; /* set condition code*/
    end
    ;
    FG0DW00.FG0DW-REPT-EXT = "YEAR2"; /* Report extension*/
    ;
    FG0D-452(); /* process detail report*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "450"; /* Module identification*/
  ;
  if (converseVar.validationMsgNum != 1) /* Call successful*/
    ;
    FG0DW00.FG0DMSEL[4] = "*"; /* Indicate function completed*/
    ;
    set FG0DM040 initial; /* Clear map output area*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0D-450

// Process line/type report
Function FG0D-451()
  ;
   /* ------------------------------------------------------*/
   /* Call sub-routine to find which environment the*/
   /* program is executing in, development or production.*/
   /* ------------------------------------------------------*/
  ;
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    ;
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FG0D-4511(); /* format production JCL*/
    else
      FG0D-4512(); /* format test JCL*/
    end
    ;
  else
    ;
    FFWREC.XXXMODID = "451"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print rqst*/
    ;
  end
  ;
end // end FG0D-451

// FF5001 production JCL
Function FG0D-4511()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  ;
  FG0DW00.FG0DWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FG0DT02.TARTYPE[FG0DWIXT] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      set FG0DW20 empty; /* Parameters work area*/
      ;
      FG0DW20.FG0DW-BEG-MO = FFZREC.FFZBEGMO; /* Beginning month*/
      FG0DW20.FG0DW-END-MO = FFZREC.FFZENDMO; /* Ending month*/
      FG0DW20.XPLCD = FG0DM040.XPLCD; /* Product line*/
      FG0DW20.YPGCD = "*"; /* Force type group code*/
      FG0DW20.FG0DW-SEAS-END-MO[1] = FG0DW00.FG0DSNDT[1];
      FG0DW20.FG0DW-SEAS-END-MO[2] = FG0DW00.FG0DSNDT[2];
      FG0DW20.FG0DW-SEAS-END-MO[3] = FG0DW00.FG0DSNDT[3];
      FG0DW20.FG0DW-SEAS-END-MO[4] = FG0DW00.FG0DSNDT[4];
      FG0DW20.FG0DW-NEED-SHIP-SEL = FG0DM040.FG0DM-NEED-SHIP-SEL;
      FG0DW20.FG0DW-XQA-CD1 = "01"; /* Quality code*/
      FG0DW20.FG0DW-XQA-CD2 = "02"; /* Quality code*/
      FG0DW20.FG0DW-XLC-CD1 = "10"; /* Life cycle code*/
      FG0DW20.FG0DW-XLC-CD2 = "20"; /* Life cycle code*/
      FG0DW20.FG0DW-3YR-2YR-RPT = 2; /* report type*/
      FG0DW20.FG0DW-USER-ID = COMMAREA.CAUSERID; /* user id*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG0DW20.TARJCL; /* Parameters*/
      TA6REC.TARTYPE[TA6INDEX] = FG0DT02.TARTYPE[FG0DWIXT]; /* Type*/
      ;
    else
      ;
      if (FG0DT02.TARTYPE[FG0DWIXT] == "J" /* Job statement*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "E" /* Proc statement - extract*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "X" /* Proc statement - report*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "1" /* report extension*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "2" /* report sequence*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "3" /* report type*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "T" /* report type*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "4" /* forms code*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "R") /* report control card*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        FG0DW02.TARJCL = FG0DT02.TARJCL[FG0DWIXT]; /* JCL*/
        FG0DW02.TARTYPE = FG0DT02.TARTYPE[FG0DWIXT]; /* Type*/
        ;
        FG0DW00.FG0DW-NEED-SHIP-SEL = FG0DM040.FG0DM-NEED-SHIP-SEL;
        ;
        FG0DS-02(); /* Format variable field*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DW02.TARJCL; /* Parameters*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DW02.TARTYPE; /* Type*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DT02.TARJCL[FG0DWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DT02.TARTYPE[FG0DWIXT]; /* Type*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0DT02.TARJCL[FG0DWIXT] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FG0DW00.FG0DWIXT = FG0DW00.FG0DWIXT + 1; /* Input table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "451"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    ;
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    ;
  end
  ;
end // end FG0D-4511

// FF5001 test JCL
Function FG0D-4512()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  ;
  FG0DW00.FG0DWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FG0DT5O.TARTYPE[FG0DWIXT] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      set FG0DW20 empty; /* Parameters work area*/
      ;
      FG0DW20.FG0DW-BEG-MO = FFZREC.FFZBEGMO; /* Beginning month*/
      FG0DW20.FG0DW-END-MO = FFZREC.FFZENDMO; /* Ending month*/
      FG0DW20.XPLCD = FG0DM040.XPLCD; /* Product line*/
      FG0DW20.YPGCD = "*"; /* Force type group*/
      FG0DW20.FG0DW-SEAS-END-MO[1] = FG0DW00.FG0DSNDT[1];
      FG0DW20.FG0DW-SEAS-END-MO[2] = FG0DW00.FG0DSNDT[2];
      FG0DW20.FG0DW-SEAS-END-MO[3] = FG0DW00.FG0DSNDT[3];
      FG0DW20.FG0DW-SEAS-END-MO[4] = FG0DW00.FG0DSNDT[4];
      FG0DW20.FG0DW-NEED-SHIP-SEL = FG0DM040.FG0DM-NEED-SHIP-SEL;
      FG0DW20.FG0DW-XQA-CD1 = "01"; /* Quality code*/
      FG0DW20.FG0DW-XQA-CD2 = "02"; /* Quality code*/
      FG0DW20.FG0DW-XLC-CD1 = "10"; /* Life cycle code*/
      FG0DW20.FG0DW-XLC-CD2 = "20"; /* Life cycle code*/
      FG0DW20.FG0DW-3YR-2YR-RPT = 2; /* report type*/
      FG0DW20.FG0DW-USER-ID = COMMAREA.CAUSERID; /* user id*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG0DW20.TARJCL; /* Parameters*/
      TA6REC.TARTYPE[TA6INDEX] = FG0DT5O.TARTYPE[FG0DWIXT]; /* Type*/
      ;
    else
      ;
      if (FG0DT5O.TARTYPE[FG0DWIXT] == "J" /* Job statement*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "E" /* Proc statement - extract*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "X" /* Proc statement - report*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "A" /* Run statement  - extract*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "B" /* Run statement  - report*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "1" /* Report extension*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "2" /* Report sequence*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "3" /* Report sequence*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "T" /* Report type*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "4" /* forms code*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "R") /* Report control card*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        FG0DW02.TARJCL = FG0DT5O.TARJCL[FG0DWIXT]; /* JCL*/
        FG0DW02.TARTYPE = FG0DT5O.TARTYPE[FG0DWIXT]; /* Type*/
        ;
        FG0DW00.FG0DW-NEED-SHIP-SEL = FG0DM040.FG0DM-NEED-SHIP-SEL;
        ;
        FG0DS-02(); /* Format variable field*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DW02.TARJCL; /* Parameters*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DW02.TARTYPE; /* Type*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DT5O.TARJCL[FG0DWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DT5O.TARTYPE[FG0DWIXT]; /* Type*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0DT5O.TARJCL[FG0DWIXT] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FG0DW00.FG0DWIXT = FG0DW00.FG0DWIXT + 1; /* Input table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "451"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    ;
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    ;
  end
  ;
end // end FG0D-4512

// Process cat,stygrp,styclr rpt
Function FG0D-452()
  ;
   /* ------------------------------------------------------*/
   /* Call sub-routine to find which environment the*/
   /* program is executing in, development or production.*/
   /* ------------------------------------------------------*/
  ;
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    ;
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FG0D-4521(); /* format production JCL*/
    else
      FG0D-4522(); /* format test JCL*/
    end
    ;
  else
    ;
    FFWREC.XXXMODID = "452"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print rqst*/
    ;
  end
  ;
end // end FG0D-452

// FF3301 production JCL
Function FG0D-4521()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  ;
  FG0DW00.FG0DWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FG0DT03.TARTYPE[FG0DWIXT] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      set FG0DW21 empty; /* Parameters work area*/
      ;
      FG0DW21.FG0DW-BEG-MO = FFZREC.FFZBEGMO; /* Beginning month*/
      FG0DW21.FG0DW-END-MO = FFZREC.FFZENDMO; /* Ending month*/
      FG0DW21.XPLCD = FG0DM040.XPLCD; /* Product line*/
      FG0DW21.YPGCD = FG0DM040.YPGCD; /* Product type group*/
      FG0DW21.XPCCD = FG0DM040.XPCCD; /* Product category*/
      FG0DW21.FG0DW-SEAS-END-MO[1] = FG0DW00.FG0DSNDT[1];
      FG0DW21.FG0DW-SEAS-END-MO[2] = FG0DW00.FG0DSNDT[2];
      FG0DW21.FG0DW-SEAS-END-MO[3] = FG0DW00.FG0DSNDT[3];
      FG0DW21.FG0DW-SEAS-END-MO[4] = FG0DW00.FG0DSNDT[4];
      FG0DW21.XPRCD[1] = FG0DM040.XPRCD[1]; /* type code*/
      FG0DW21.XPRCD[2] = FG0DM040.XPRCD[2];
      FG0DW21.XPRCD[3] = FG0DM040.XPRCD[3];
      FG0DW21.XPRCD[4] = FG0DM040.XPRCD[4];
      FG0DW21.XPRCD[5] = FG0DM040.XPRCD[5];
      FG0DW21.FG0DW-NEED-SHIP-SEL = FG0DM040.FG0DM-NEED-SHIP-SEL;
      FG0DW21.FG0DW-COMB-TYPE-CD = FG0DM040.FG0DM-COMB-TYP-CDS;
      ;
      FFXREC.FFXCHAR = FG0DM040.FG0DM-SLS-FCST-MIN; /* sls fcst min*/
      XSFFS11();
      FG0DW21.FG0DW-SLS-FCST-MIN-CHAR = FFXREC.FFXCHAR;
      FG0DW21.FG0DW-SLS-FCST-MIN-NUM = FFXREC.FFXNUMB;
      ;
      FG0DW21.FG0DW-3YR-2YR-RPT = 2; /* report type*/
      FG0DW21.FG0DW-USER-ID = COMMAREA.CAUSERID; /* user id*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG0DW21.TARJCL; /* Parameters*/
      TA6REC.TARTYPE[TA6INDEX] = FG0DT03.TARTYPE[FG0DWIXT]; /* Type*/
      ;
    else
      ;
      if (FG0DT03.TARTYPE[FG0DWIXT] == "J" /* Job statement*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "E" /* Proc statement - extract*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "C" /* Proc statement - cat report*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "G" /* Proc statement - stygrp rpt*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "S" /* Proc statement - styclr rpt*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "5" /* Condition*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "6" /* Condition*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "7" /* Condition*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "1" /* report extension*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "2" /* report sequence*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "3" /* report sequence*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "T" /* report type*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "4" /* forms code*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "R") /* report distribution*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        FG0DW02.TARJCL = FG0DT03.TARJCL[FG0DWIXT]; /* JCL*/
        FG0DW02.TARTYPE = FG0DT03.TARTYPE[FG0DWIXT]; /* Type*/
        ;
        FG0DW00.FG0DW-NEED-SHIP-SEL = FG0DM040.FG0DM-NEED-SHIP-SEL;
        ;
        FG0DS-03(); /* Format variable field*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DW02.TARJCL; /* Parameters*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DW02.TARTYPE; /* Type*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DT03.TARJCL[FG0DWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DT03.TARTYPE[FG0DWIXT]; /* Type*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0DT03.TARJCL[FG0DWIXT] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FG0DW00.FG0DWIXT = FG0DW00.FG0DWIXT + 1; /* Input table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "452"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    ;
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    ;
  end
  ;
end // end FG0D-4521

// FF3301 test JCL
Function FG0D-4522()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  ;
  FG0DW00.FG0DWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FG0DT51.TARTYPE[FG0DWIXT] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      set FG0DW21 empty; /* Parameters work area*/
      ;
      FG0DW21.FG0DW-BEG-MO = FFZREC.FFZBEGMO; /* Beginning month*/
      FG0DW21.FG0DW-END-MO = FFZREC.FFZENDMO; /* Ending month*/
      FG0DW21.XPLCD = FG0DM040.XPLCD; /* Product line*/
      FG0DW21.YPGCD = FG0DM040.YPGCD; /* Product type group*/
      FG0DW21.XPCCD = FG0DM040.XPCCD; /* Product category*/
      FG0DW21.FG0DW-SEAS-END-MO[1] = FG0DW00.FG0DSNDT[1];
      FG0DW21.FG0DW-SEAS-END-MO[2] = FG0DW00.FG0DSNDT[2];
      FG0DW21.FG0DW-SEAS-END-MO[3] = FG0DW00.FG0DSNDT[3];
      FG0DW21.FG0DW-SEAS-END-MO[4] = FG0DW00.FG0DSNDT[4];
      FG0DW21.XPRCD[1] = FG0DM040.XPRCD[1]; /* type code*/
      FG0DW21.XPRCD[2] = FG0DM040.XPRCD[2];
      FG0DW21.XPRCD[3] = FG0DM040.XPRCD[3];
      FG0DW21.XPRCD[4] = FG0DM040.XPRCD[4];
      FG0DW21.XPRCD[5] = FG0DM040.XPRCD[5];
      FG0DW21.FG0DW-NEED-SHIP-SEL = FG0DM040.FG0DM-NEED-SHIP-SEL;
      FG0DW21.FG0DW-COMB-TYPE-CD = FG0DM040.FG0DM-COMB-TYP-CDS;
      ;
      FFXREC.FFXCHAR = FG0DM040.FG0DM-SLS-FCST-MIN; /* sls fcst min*/
      XSFFS11();
      FG0DW21.FG0DW-SLS-FCST-MIN-CHAR = FFXREC.FFXCHAR;
      FG0DW21.FG0DW-SLS-FCST-MIN-NUM = FFXREC.FFXNUMB;
      ;
      FG0DW21.FG0DW-3YR-2YR-RPT = 2; /* report type*/
      FG0DW21.FG0DW-USER-ID = COMMAREA.CAUSERID; /* user id*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG0DW21.TARJCL; /* Parameters*/
      TA6REC.TARTYPE[TA6INDEX] = FG0DT51.TARTYPE[FG0DWIXT]; /* Type*/
      ;
    else
      ;
      if (FG0DT51.TARTYPE[FG0DWIXT] == "J" /* Job statement*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "E" /* Proc statement - extract*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "C" /* Proc statement - cat report*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "G" /* Proc statement - stygrp rpt*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "S" /* Proc statement - styclr rpt*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "5" /* Condition - cat report*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "6" /* Condition - stygrp rpt*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "7" /* Condition - styclr rpt*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "A" /* Run statement  - extract*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "B" /* Run statement  - cat report*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "D" /* Run statement  - stygrp rpt*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "F" /* Run statement  - styclr rpt*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "1" /* Report extension*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "2" /* Report sequence*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "3" /* Report sequence*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "T" /* Report type*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "4" /* forms code*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "R") /* Report distribution*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        FG0DW02.TARJCL = FG0DT51.TARJCL[FG0DWIXT]; /* JCL*/
        FG0DW02.TARTYPE = FG0DT51.TARTYPE[FG0DWIXT]; /* Type*/
        ;
        FG0DW00.FG0DW-NEED-SHIP-SEL = FG0DM040.FG0DM-NEED-SHIP-SEL;
        ;
        FG0DS-03(); /* Format variable field*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DW02.TARJCL; /* Parameters*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DW02.TARTYPE; /* Type*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DT51.TARJCL[FG0DWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DT51.TARTYPE[FG0DWIXT]; /* Type*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0DT51.TARJCL[FG0DWIXT] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FG0DW00.FG0DWIXT = FG0DW00.FG0DWIXT + 1; /* Input table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "452"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    ;
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    ;
  end
  ;
end // end FG0D-4522

// 3 Year Sales forecast report
Function FG0D-500()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FG0D-510(); /* Format and display the map*/
  ;
  FG0D-520(); /* Check attention identifier*/
  ;
  FG0D-530(); /* Reset fields to normal intensity*/
  ;
  FG0D-540(); /* Verify the data that was entered*/
  ;
  FG0D-550(); /* Process valid input request*/
  ;
  ;
end // end FG0D-500

// Format and display the map
Function FG0D-510()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/
  ;
  FG0DM050.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FG0DM050.XURDEST = TA6REC.XURDEST; /* Print destination*/
  FG0DM050.XRODESC = TA6REC.XRODESC; /* Printer description*/
  FG0DM050.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  FG0DM050.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  FG0DM050.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (FFWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FG0DM050.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    FG0DM050.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    ;
    set FG0DM050 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FG0DM050 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  ;
end // end FG0D-510

// Check attention identifier
Function FG0D-520()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    FG0DW00.FG0DMSEL[5] = "C"; /* Indicate selection cancelled*/
    ;
    set FG0DM050 initial; /* m023 input/output*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    ;
    FG0DW00.FG0DWSWX = "Y"; /* Indicate exit requested*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf5)  /* PF5 was not pressed*/
    ;
    FFWREC.XXXMODID = "520"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FG0D-520

// Reset highlighted fields
Function FG0D-530()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  FG0DW00.FG0DWIXM = 1; /* Map line index*/
  ;
  while (FG0DW00.FG0DWIXM <= 4) /* Until end of lines*/
    ;
    set FG0DM050.FG0DM-SEQ[FG0DWIXM] initialAttributes; /* Report sequence selection*/
    ;
    FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM + 1; /* Map line index*/
    ;
  end
  ;
  set FG0DM050.FG0DM-NEED-SHIP-SEL initialAttributes; /* need/ship mo selection*/
  ;
  set FG0DM050.FG0DM-BGD-CLS-RPT initialAttributes; /* bgrd/cls mo selection*/
  ;
  set FG0DM050.FG0DM-BEG-MO initialAttributes; /* Beginning month*/
  set FG0DM050.FG0DM-END-MO initialAttributes; /* Ending month*/
  set FG0DM050.XPLCD initialAttributes; /* Product line*/
  set FG0DM050.YPGCD initialAttributes; /* Product type group*/
  set FG0DM050.XPRCD[1] initialAttributes; /* Product type code*/
  set FG0DM050.XPRCD[2] initialAttributes; /* Product type code*/
  set FG0DM050.XPRCD[3] initialAttributes; /* Product type code*/
  set FG0DM050.XPRCD[4] initialAttributes; /* Product type code*/
  set FG0DM050.FG0DM-COMB-TYP-CDS initialAttributes; /* Combine indicator*/
  set FG0DM050.XPCCD initialAttributes; /* Product category*/
  set FG0DM050.FG0DM-SEAS-END-MO[1] initialAttributes; /* season end month*/
  set FG0DM050.FG0DM-SEAS-END-MO[2] initialAttributes; /* season end month*/
  set FG0DM050.FG0DM-SLS-FCST-MIN initialAttributes; /* sales forecast minimum*/
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM050.XPLCD == "?" /* Product line list requested*/
   || FG0DM050.YPGCD == "?" /* or product type group list requested*/
   || FG0DM050.XPRCD == "?" /* or product type code list requested*/
   || FG0DM050.XPCCD == "?" /* or product category list requested*/
  )                        
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      FFWREC.XXXMODID = "530"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  else
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM050.XPLCD == "?") /* Product line list requested*/
    ;
    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  LINE"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0DM050.XPLCD = " "; /* Clear code*/
      FG0DM050.XPLABRV = " "; /* Abbreviation*/
    else
      FG0DM050.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FG0DM050.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FG0DM050.XPLCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type group codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM050.YPGCD == "?") /* Product type group list requested*/
    ;
    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  TYPE GRP"; /* Heading*/
    XX0XW02.YPGFFFL = "Y"; /* Footwear forecasting flag*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0DM050.YPGCD = " "; /* Clear code*/
      FG0DM050.YPGABRV = " "; /* Abbreviation*/
    else
      FG0DM050.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FG0DM050.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FG0DM050.YPGCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type codes*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM050.XPRCD[1] == "?") /* product type requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PROD TYPE"; /* Heading*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0DM050.XPRCD[1] = "  "; /* Clear code*/
    else
      FG0DM050.XPRCD[1] = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG0DM050.XPRCD[1] cursor; /* Establish cursor position*/
    ;
  end
  ;
  ;
  if (FG0DM050.XPRCD[2] == "?") /* product type requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PROD TYPE"; /* Heading*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0DM050.XPRCD[2] = "  "; /* Clear code*/
    else
      FG0DM050.XPRCD[2] = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG0DM050.XPRCD[2] cursor; /* Establish cursor position*/
    ;
  end
  ;
  ;
  if (FG0DM050.XPRCD[3] == "?") /* product type requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PROD TYPE"; /* Heading*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0DM050.XPRCD[3] = "  "; /* Clear code*/
    else
      FG0DM050.XPRCD[3] = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG0DM050.XPRCD[3] cursor; /* Establish cursor position*/
    ;
  end
  ;
  ;
  if (FG0DM050.XPRCD[4] == "?") /* product type requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PROD TYPE"; /* Heading*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0DM050.XPRCD[4] = "  "; /* Clear code*/
    else
      FG0DM050.XPRCD[4] = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG0DM050.XPRCD[4] cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product category codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM050.XPCCD == "?") /* Product category list requested*/
    ;
    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0DM050.XPCCD = " "; /* Clear code*/
      FG0DM050.XPCABRV = " "; /* Abbreviation*/
    else
      FG0DM050.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FG0DM050.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FG0DM050.XPCCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FFWREC.XXXMODID = "530"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0D-530

// Verify the entered data
Function FG0D-540()
   /* ------------------------------------------------------------*/
   /* Verify season end month.*/
   /* ------------------------------------------------------------*/
  ;
  FG0D-541(); /* validate season end months*/
  ;
   /* ------------------------------------------------------------*/
   /* Verify sales forecast minimum*/
   /* ------------------------------------------------------------*/
  ;
  FG0D-543(); /* validate sales fcst minimum*/
  ;
   /* ------------------------------------------------------------*/
   /* Verify product type codes and combine type code indicator.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM050.FG0DM-COMB-TYP-CDS == "N") /* Combine type codes EQ 'N'*/
    ;
    if (FG0DM050.FG0DM-SEQ[1] == "S") /* Report by line/cat*/
      converseLib.validationFailed(324); /* can't print this report*/
      FFWREC.XXXMODID = "540"; /* error module id*/
      set FG0DM050.FG0DM-SEQ[1] cursor, bold; /* highlight*/
      set FG0DM050.FG0DM-COMB-TYP-CDS bold; /* highlight*/
    end
    ;
    if (FG0DM050.FG0DM-BGD-CLS-RPT == "S") /* b-grade/clsout report*/
      converseLib.validationFailed(324); /* can't print this report*/
      FFWREC.XXXMODID = "540"; /* error module id*/
      set FG0DM050.FG0DM-BGD-CLS-RPT cursor, bold; /* highlight*/
      set FG0DM050.FG0DM-COMB-TYP-CDS bold; /* highlight*/
    end
    ;
  end
  ;
  if (FG0DM050.XPRCD[1] == " " /* Type code(s) not entered*/
   && FG0DM050.XPRCD[2] == " " 
   && FG0DM050.XPRCD[3] == " " 
   && FG0DM050.XPRCD[4] == " " 
   && FG0DM050.XPRCD[5] == " ")
    ;
      /* continue*/
    ;
  else /* Type code(s) entered*/
    ;
    if (FG0DM050.FG0DM-SEQ[2] == "S" /* Report by line/cat*/
     || FG0DM050.FG0DM-SEQ[3] == "S" /* Report by style group*/
     || FG0DM050.FG0DM-SEQ[4] == "S") /* Report by style/color*/
      ;
      FG0D-542(); /* Validate type codes*/
      ;
    else
      ;
      FG0DW00.FG0DWIXM = 5;
      while (FG0DW00.FG0DWIXM >= 1)
        if (FG0DM050.XPRCD[FG0DWIXM] > " ") /* Type code entered*/
          set FG0DM050.XPRCD[FG0DWIXM] bold; /* highlight*/
        end
        FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM - 1;
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid product category code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM050.XPCCD > " ") /* Product category entered*/
    ;
    XPCREC.XPCCD = FG0DM050.XPCCD; /* Product category*/
    XPCREC.XGPCD = COMMAREA.XGPCD; /* GPC*/
    ;
    if (XPCREC.XPCKEY in XPCTBL.XPCKEY /* Code in table*/
     && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      ;
      FG0DM050.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* Abbreviation*/
      ;
    else
      ;
      FG0DM050.XPCABRV = " "; /* Abbreviation*/
      ;
      FFWREC.XXXMODID = "540"; /* Module identification*/
      set FG0DM050.XPCCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Invalid value entered*/
      ;
    end
    ;
  else
    ;
    FG0DM050.XPCABRV = " "; /* Abbreviation*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid product type group code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM050.YPGCD > " " /* Product type group entered*/
   && FG0DM050.YPGCD != "*") /* and not wild card*/
    ;
    if (FG0DM050.YPGCD in YPGTBL.YPGCD /* Code in table*/
     && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      ;
      FG0DM050.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex]; /* Abbreviation*/
      ;
    else
      ;
      FG0DM050.YPGABRV = " "; /* Abbreviation*/
      ;
      FFWREC.XXXMODID = "540"; /* Module identification*/
      set FG0DM050.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Invalid value entered*/
      ;
    end
    ;
  else
    ;
    if (FG0DM050.YPGCD == "* ")
      FG0DM050.YPGABRV = "ALL"; /* Abbreviation*/
    else
      ;
      FG0DM050.YPGABRV = " "; /* Abbreviation*/
      ;
      FFWREC.XXXMODID = "540"; /* Module identification*/
      set FG0DM050.YPGCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Required field*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid product line code was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM050.XPLCD > " " /* Product line entered*/
   && FG0DM050.XPLCD != "* ") /* and not wild card*/
    ;
    XPLREC.XPLCD = FG0DM050.XPLCD; /* Product line*/
    XPLREC.XGPCD = COMMAREA.XGPCD; /* GPC*/
    ;
    if (XPLREC.XPLKEY in XPLTBL.XPLKEY /* Code in table*/
     && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      ;
      FG0DM050.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
      ;
    else
      ;
      FG0DM050.XPLABRV = " "; /* Abbreviation*/
      ;
      FFWREC.XXXMODID = "540"; /* Module identification*/
      set FG0DM050.XPLCD cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Invalid value entered*/
      ;
    end
    ;
  else
    ;
    if (FG0DM050.XPLCD == "*") /* Wild card*/
      FG0DM050.XPLABRV = "ALL"; /* Abbreviation*/
    else
      ;
      FG0DM050.XPLABRV = " "; /* Abbreviation*/
      ;
      if (FG0DM050.FG0DM-SEQ[1] == "S" /* line report was selected*/
       || FG0DM050.FG0DM-SEQ[2] == "S") /* category report was selected*/
        ;
        FFWREC.XXXMODID = "540"; /* Module identification*/
        set FG0DM050.XPLCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(8); /* Required field*/
        ;
      end
      ;
      if (FG0DM050.FG0DM-SEQ[3] == "S" /* Style grp rpt was selected*/
       || FG0DM050.FG0DM-SEQ[4] == "S") /* Style clr rpt was selected*/
        ;
        if (FG0DM050.XPCCD == "  ") /* No category entered*/
          ;
          FFWREC.XXXMODID = "540"; /* Module identification*/
          set FG0DM050.XPLCD cursor, bold; /* Highlight*/
          set FG0DM050.XPCCD bold;
          converseLib.validationFailed(8); /* Required field*/
          ;
        end
      end
      ;
    end
    ;
  end
  ;
   /* --------------------------------------------------------------*/
   /* Verify the relationship between line, type group and category*/
   /* --------------------------------------------------------------*/
  ;
  FG0D-544(); /* call ffxrf01 table*/
  ;
   /* ------------------------------------------------------------*/
   /* Verify that a valid date range was entered.*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty; /* Subroutine parameters*/
  ;
  FFZREC.FFZBYYMM = FG0DM050.FG0DM-BEG-MO; /* Beginning month*/
  FFZREC.FFZEYYMM = FG0DM050.FG0DM-END-MO; /* Ending month*/
  ;
  FFZREC.FFZSRANG = "Y"; /* Accept any beginning month*/
  ;
  TA1REC.TA1PGMNM = "FG0D540"; /* Calling process*/
  ;
  XSFFS30(); /* Edit the date range*/
  ;
  if (FFZREC.FFZENDRC == "0") /* Valid ending month*/
    ;
     /* NEXT SENTENCE*/
    ;
  else
    ;
    FFWREC.XXXMODID = "540"; /* Module identification*/
    set FG0DM050.FG0DM-END-MO cursor, bold; /* Highlight*/
    converseLib.validationFailed(17); /* Invalid date entered*/
    ;
  end
  ;
  if (FFZREC.FFZBEGRC == "0") /* Valid beginning month*/
    ;
     /* NEXT SENTENCE*/
    ;
  else
    ;
    FFWREC.XXXMODID = "540"; /* Module identification*/
    set FG0DM050.FG0DM-BEG-MO cursor, bold; /* Highlight*/
    converseLib.validationFailed(17); /* Invalid date entered*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify combine type*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM050.FG0DM-COMB-TYP-CDS != "N" /* Combine type codes*/
   && FG0DM050.FG0DM-COMB-TYP-CDS != "Y")
    FFWREC.XXXMODID = "540"; /* Module identification*/
    converseLib.validationFailed(10); /* Invalid selection code*/
    set FG0DM050.FG0DM-COMB-TYP-CDS cursor, bold; /* Highlight*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify B-grade/closeout report selection*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM050.FG0DM-BGD-CLS-RPT != "S" /* b-grade/closeout report*/
   && FG0DM050.FG0DM-BGD-CLS-RPT != " ") /* b-grade/closeout report*/
    FFWREC.XXXMODID = "540"; /* Module identification*/
    converseLib.validationFailed(10); /* Invalid selection code*/
    set FG0DM050.FG0DM-BGD-CLS-RPT cursor, bold; /* Highlight*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify need month or ship month selection*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DM050.FG0DM-NEED-SHIP-SEL != "N"
   && FG0DM050.FG0DM-NEED-SHIP-SEL != "S")
    FFWREC.XXXMODID = "540"; /* Module identification*/
    converseLib.validationFailed(10); /* Invalid selection code*/
    set FG0DM050.FG0DM-NEED-SHIP-SEL cursor, bold; /* Highlight*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify sequence by selection*/
   /* ------------------------------------------------------------*/
  ;
  FG0DW00.FG0DWIXM = 4;
  while (FG0DW00.FG0DWIXM >= 1)
    if (FG0DM050.FG0DM-SEQ[FG0DWIXM] != "S"
     && FG0DM050.FG0DM-SEQ[FG0DWIXM] != " ") /**/
      FFWREC.XXXMODID = "540"; /* Module identification*/
      converseLib.validationFailed(10); /* Invalid selection code*/
      set FG0DM050.FG0DM-SEQ[FG0DWIXM] cursor, bold; /* Highlight*/
    end
    FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM - 1;
  end
  ;
  if (FG0DM050.FG0DM-SEQ[1] == " "
   && FG0DM050.FG0DM-SEQ[2] == " "
   && FG0DM050.FG0DM-SEQ[3] == " "
   && FG0DM050.FG0DM-SEQ[4] == " "
   && FG0DM050.FG0DM-BGD-CLS-RPT == " ") /* no report selected*/
    FFWREC.XXXMODID = "540"; /* Module identification*/
    converseLib.validationFailed(8); /* required field*/
    set FG0DM050.FG0DM-SEQ[1] cursor, bold; /* Highlight*/
    set FG0DM050.FG0DM-SEQ[2] bold; /* Highlight*/
    set FG0DM050.FG0DM-SEQ[3] bold; /* Highlight*/
    set FG0DM050.FG0DM-SEQ[4] bold; /* Highlight*/
    set FG0DM050.FG0DM-BGD-CLS-RPT bold; /* Highlight*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end
  ;
end // end FG0D-540

// Validate season end months
Function FG0D-541()
   /* ------------------------------------------------------------*/
   /* validate season lengths*/
   /* determine the number of seasons entered, look backwards*/
   /* data found.*/
   /* ------------------------------------------------------------*/
  ;
  move "    " to FG0DW00.FG0DSNDT[1] for all; /* spaces to season end dates*/
  ;
  FG0DW00.FG0DWNSS = 0; /* zero out number of seasons*/
  FG0DW00.FG0DWIXM = 2; /* index*/
  while (FG0DW00.FG0DWIXM > 0)
    if (FG0DM050.FG0DM-SEAS-END-MO[FG0DWIXM] > 0)
      FG0DW00.FG0DWNSS = FG0DW00.FG0DWIXM; /* number of seasons*/
      FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM - 2; /* force out of loop*/
    else
      FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM - 1;
    end
  end
  ;
     /* look for season end months greater than 12*/
  ;
  FG0DWIXM = 1; /* 0 to index*/
  while (FG0DW00.FG0DWIXM <= FG0DWNSS)
    if (FG0DM050.FG0DM-SEAS-END-MO[FG0DWIXM] > 12)
      FFWREC.XXXMODID = "541"; /* Module identification*/
      set FG0DM050.FG0DM-SEAS-END-MO[FG0DWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(10); /* Invalid data*/
      FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM + 1;
    else
      FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM + 1;
    end
  end
  ;
  if (converseVar.validationMsgNum > 0) /* errors found*/
    return; /* get out*/
  end
  ;
   /* If no season end month entered then check the length of the range,*/
   /* if <= 6 months use default (end month of the range)*/
  ;
  FG0DW00.FG0DBDAT = FG0DM050.FG0DM-BEG-MO;
  FG0DW00.FG0DEDAT = FG0DM050.FG0DM-END-MO;
  ;
  if (FG0DW00.FG0DWNSS == 0) /* no season lengths found*/
    if (FG0DW00.FG0DBYY == FG0DW00.FG0DEYY) /* same year*/
      FG0DW00.FG0DW-MON-COUNT = FG0DW00.FG0DEMM - FG0DW00.FG0DBMM + 1;
    else
      FG0DW00.FG0DW-MON-COUNT = FG0DW00.FG0DEMM + 12 - FG0DW00.FG0DBMM + 1;
    end
    ;
    if (FG0DW00.FG0DW-MON-COUNT <= 6)
      FG0DW00.FG0DWNSS = 1;
      FG0DM050.FG0DM-SEAS-END-MO[1] = FG0DW00.FG0DEMM; /* seas end mo*/
    end
  end
  ;
   /* look for no seasons entered with line report, b-grade report*/
  ;
  if (FG0DW00.FG0DWNSS == 0) /* no season lengths found*/
    if (FG0DM050.FG0DM-SEQ[1] == "S" /* if line/type*/
     || FG0DM050.FG0DM-SEQ[2] == "S" /* or line/cat*/
     || FG0DM050.FG0DM-BGD-CLS-RPT == "S") /* or b-grade rpt*/
      if (FG0DM050.XPCCD == "  ") /* no category entered*/
        FFWREC.XXXMODID = "541"; /* Module identification*/
        set FG0DM050.FG0DM-SEAS-END-MO[1] cursor, bold; /* Highlight*/
        converseLib.validationFailed(448); /* sesn end must be entered w/ no cat*/
        return; /* return to previous routine*/
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* default to category seasons if end months not entered*/
   /* ------------------------------------------------------------*/
  if (FG0DW00.FG0DWNSS == 0) /* no season lengths found*/
    ;
    if (FG0DM050.XPCCD != " ") /* category code entered*/
      set FF2REC empty;
      FF2REC.YPGCD = FG0DM050.YPGCD; /* type group code*/
      FG0D-5411(); /* use sesn end months from*/
                                   /* vffxrf01 table*/
   /* ------------------------------------------------------------*/
   /* determine season lengths from category table*/
   /* ------------------------------------------------------------*/
      if (VAGen_SQLCODE == 0)
        FG0DWIXM = 1;
        FG0DW00.FG0DSNLN = 0; /* zero sesn length*/
        while (FG0DWIXM <= FF2REC.FF2NSEAS)
          FG0DW00.FG0D1DAT = FF2REC.FF2SEASN[FG0DWIXM];
          FG0DW00.FG0DWKMO = FG0DM050.FG0DM-BEG-MO;
          if (FG0DW00.FG0D1MM == FG0DW00.FG0DWKMO) /* category month =*/
                                   /* screen begin month?*/
            FG0DW00.FG0DBDAT = FG0DM050.FG0DM-BEG-MO - 1; /* get sesn end*/
                                   /* from begin dte on screen*/
            if (FG0DBMM == 00)
              FG0DW00.FG0DBDAT = FG0DW00.FG0DBDAT - 88;
            end
            FG0DW00.FG0DWDAT = FG0DW00.FG0DBDAT;
                                   /* save orig sesn end*/
            FG0DWIXM = 1;
            FG0DWIX2 = 2;
            while (FG0DWIX2 <= FF2REC.FF2NSEAS) /* while more cat dates*/
              FG0DW00.FG0D1DAT = FF2REC.FF2SEASN[FG0DWIXM];
              FG0DW00.FG0D2DAT = FF2REC.FF2SEASN[FG0DWIX2];
              if (FG0DW00.FG0D2YY > FG0DW00.FG0D1YY)
                FG0DW00.FG0DWKMO = FG0DW00.FG0D2MM + 12;
              else
                FG0DW00.FG0DWKMO = FG0DW00.FG0D2MM + 0;
              end
                                   /* season length =*/
   /* sesn1 mos - sesn2 mos*/
   /* + sesn length*/
              FG0DW00.FG0DSNLN = FG0DW00.FG0DWKMO - FG0DW00.FG0D1MM               + FG0DW00.FG0DSNLN;
              ;
              FG0DBDAT = FG0DWDAT + FG0DSNLN; /* add sesn1 length to*/
                                   /* get sesn 1 end*/
              if (FG0DBMM > 12)
                FG0DBDAT = FG0DBDAT + 88; /* convert to next year*/
              end
              FG0DM050.FG0DM-SEAS-END-MO[FG0DWIXM] = FG0DBDAT;
              FG0DW00.FG0DSNDT[FG0DWIXM] = FG0DBDAT; /* to w00*/
              ;
              FG0DWIXM = FG0DWIXM + 1;
              FG0DWIX2 = FG0DWIX2 + 1; /* bump indexes*/
            end /* end of nested loop*/
            ;
            FG0DBDAT = FG0DWDAT + 100; /* get last sesn end*/
            ;
            if (FG0DBMM > 12)
              FG0DBDAT = FG0DBDAT + 88; /* convert to next year*/
            end
            FG0DM050.FG0DM-SEAS-END-MO[FG0DWIXM] = FG0DBDAT; /* to map*/
            FG0DW00.FG0DSNDT[FG0DWIXM] = FG0DBDAT; /* to w00*/
            ;
            FG0DWIXM = 6; /* set indx to leave 1st loop*/
            ;
          else
            FG0DWIXM = FG0DWIXM + 1; /* bump index and continue*/
          end
        end /* end of 1st loop*/
        if (FG0DWIXM != 6) /* indx not 6 - no hit on begin date*/
          FFWREC.XXXMODID = "541"; /* Module identification*/
          set FG0DM050.FG0DM-SEAS-END-MO[1] cursor, bold; /* Highlight*/
          converseLib.validationFailed(442); /* begin date ne category date*/
          return; /* return to previous routine*/
        end
      else
        FFWREC.XXXMODID = "541"; /* Module identification*/
        set FG0DM050.XPCCD cursor, bold; /* Highlight*/
        converseLib.validationFailed(174); /* sqlcode = -100*/
        return; /* return to previous routine*/
      end
    else
      FFWREC.XXXMODID = "541"; /* Module identification*/
      set FG0DM050.XPCCD cursor, bold; /* Highlight*/
      set FG0DM050.FG0DM-SEAS-END-MO[1] bold; /* Highlight*/
      converseLib.validationFailed(443); /* no ends mos, no cat entered*/
      return; /* return to previous routine*/
    end
    ;
  else
              /* ** season end months were entered ****/
    ;
    FG0DW00.FG0DWIXM = 1; /* index*/
    while (FG0DW00.FG0DWIXM <= FG0DW00.FG0DWNSS) /* for number of seasons*/
      if (FG0DM050.FG0DM-SEAS-END-MO[FG0DWIXM] == 0)
                                   /* check for embedded zeros*/
        FFWREC.XXXMODID = "541"; /* Module identification*/
        set FG0DM050.FG0DM-SEAS-END-MO[FG0DWIXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(440); /* embedded zero msg*/
        return; /* return to previous routine*/
      else
        FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM + 1;
      end
    end
    ;
      /* ------------------------------------------------------------*/
       /* Verify range end month with the season end month.*/
      /* ------------------------------------------------------------*/
    FG0DW00.FG0DWIXM = FG0DW00.FG0DWNSS; /* last season number*/
    FG0DW00.FG0DWDAT = FG0DM050.FG0DM-END-MO; /* end date to work area*/
    ;
    if (FG0DW00.FG0DWMM != FG0DM050.FG0DM-SEAS-END-MO[FG0DWIXM])
                                   /* end mo <> last sesn mo*/
      FFWREC.XXXMODID = "541"; /* Module identification*/
      set FG0DM050.FG0DM-SEAS-END-MO[FG0DWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(447); /* last season must complete year*/
      return; /* return to previous routine*/
    end
      /* ------------------------------------------------------------*/
       /* Verify that season end months are valid.*/
      /* ------------------------------------------------------------*/
    FG0DWIXM = 1; /* reset index*/
    FG0DW00.FG0DWDAT = FG0DM050.FG0DM-BEG-MO; /* begin date to work*/
    ;
      /* set up season end YYMM in fg0dw02*/
    ;
    FG0DW00.FG0D1DAT = FG0DM050.FG0DM-BEG-MO; /* save begin date*/
    FG0DW00.FG0DSNYY[1] = FG0DW00.FG0DWYY; /* move year*/
    while (FG0DWIXM <= FG0DW00.FG0DWNSS)
      FG0DW00.FG0DSNMM[FG0DWIXM] = FG0DM050.FG0DM-SEAS-END-MO[FG0DWIXM]; /* move month*/
      ;
      if (FG0DW00.FG0DWMM > FG0DW00.FG0DSNMM[FG0DWIXM] /* bgn mo > end*/
       && FG0DW00.FG0D1YY == FG0DW00.FG0DWYY)          /* mo & yr not yet bumpd*/
        FG0DWYY = FG0DWYY + 1; /* bump year by 1*/
      end
      ;
      FG0DW00.FG0DSNYY[FG0DWIXM] = FG0DW00.FG0DWYY; /* move year*/
      FG0DWIXM = FG0DWIXM + 1; /* bump index*/
    end
    ;
    FG0DWIXM = 1;
    FG0DWIX2 = 2;
    ;
    while (FG0DWIX2 <= FG0DW00.FG0DWNSS)
      if (FG0DW00.FG0DSNDT[FG0DWIXM] /* sesn > next sesn*/
       >= FG0DW00.FG0DSNDT[FG0DWIX2])
        /* begin tcs*/
        if (FG0DW00.FG0DSNYY[FG0DWIX2] != 00)
          FFWREC.XXXMODID = "541"; /* Module identification*/
          set FG0DM050.FG0DM-SEAS-END-MO[FG0DWIXM] cursor, bold;
                                   /* Highlight*/
          converseLib.validationFailed(444); /* season must > following season*/
          FG0DWIXM = 0;
        end
        /* end tcs*/
      end
      FG0DWIXM = FG0DWIXM + 1; /* bump index*/
      FG0DWIX2 = FG0DWIX2 + 1; /* bump index2*/
    end
    ;
  end
  ;
end // end FG0D-541

// Read vffxrf01 to get seas mos
Function FG0D-5411()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vffxrf01 table row*/
   /* ------------------------------------------------------------*/
  ;
  FF2REC.XPCCD = FG0DM050.XPCCD;
  FF2REC.YSMXDV = "10";
  ;
  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      return;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "541"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0D-5411

// Validate type code
Function FG0D-542()
   /* ------------------------------------------------------------*/
   /* Validate type codes and combine type code indicator*/
   /* ------------------------------------------------------------*/
  ;
   /* Validate type codes*/
  ;
  if (FG0DM050.YPGCD == " ") /* or type group code blank*/
    FFWREC.XXXMODID = "542"; /* error module id*/
    converseLib.validationFailed(203); /* inconsistent relationship*/
    set FG0DM050.YPGCD cursor, bold; /* highlight*/
    set FG0DM050.XPRCD[1] bold; /* highlight*/
    set FG0DM050.XPRCD[2] bold; /* highlight*/
    set FG0DM050.XPRCD[3] bold; /* highlight*/
    set FG0DM050.XPRCD[4] bold; /* highlight*/
  else /* Specific type group code entered*/
    ;
      /* Validate type code*/
    ;
    FG0DW00.FG0DWIXM = 5;
    while (FG0DW00.FG0DWIXM >= 1)
      if (FG0DM050.XPRCD[FG0DWIXM] > " ") /* type code entered*/
        if (FG0DM050.XPRCD[FG0DWIXM] in XPRTBL.XPRCD) /* type code exists*/
          if (XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* type code status 'A'*/
            if (XPRTBL.YPGCD[sysVar.arrayIndex] == FG0DM050.YPGCD) /* typgrps match*/
                /* continue*/
            else
              if (FG0DM050.YPGCD == "*") /* wildcard type group*/
                if (XPRTBL.YPGCD[sysVar.arrayIndex] == "01"
                 || XPRTBL.YPGCD[sysVar.arrayIndex] == "02")
                  ;
                else /* Type group code doesn't correspond*/
                               /* correctly to type code*/
                  FFWREC.XXXMODID = "542"; /* error module id*/
                  converseLib.validationFailed(203); /* inconsistent relationship*/
                  set FG0DM050.YPGCD cursor, bold; /* highlight*/
                  set FG0DM050.XPRCD[FG0DWIXM] bold; /* highlight*/
                end
              else
                FFWREC.XXXMODID = "542"; /* error module id*/
                converseLib.validationFailed(203); /* inconsistent relationship*/
                set FG0DM050.YPGCD cursor, bold; /* highlight*/
                set FG0DM050.XPRCD[FG0DWIXM] bold; /* highlight*/
              end
            end
          else /* type code status not 'A'*/
            FFWREC.XXXMODID = "542"; /* error module id*/
            converseLib.validationFailed(10); /* invalid value*/
            set FG0DM050.XPRCD[FG0DWIXM] cursor, bold; /* highlight*/
          end
        else
          FFWREC.XXXMODID = "542"; /* error module id*/
          converseLib.validationFailed(10); /* invalid value*/
          set FG0DM050.XPRCD[FG0DWIXM] cursor, bold; /* highlight*/
        end
      end
      FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM - 1;
    end
  end
  ;
   /* Check for embedded blanks*/
  ;
  FG0D-5421();
  ;
   /* Check for duplicates*/
  ;
  FG0D-5422();
  ;
end // end FG0D-542

// Check for embedded blanks
Function FG0D-5421()
   /* ------------------------------------------------------------*/
   /* Check for embedded blanks in the list of type codes*/
   /* ------------------------------------------------------------*/
  ;
   /* Check for embedded blanks*/
  ;
  if (FG0DM050.XPRCD[1] == " ")
    if (FG0DM050.XPRCD[2] == " ")
      if (FG0DM050.XPRCD[3] == " ")
        if (FG0DM050.XPRCD[4] == " ")
          /* continue*/
        else
          FFWREC.XXXMODID = "542"; /* error module id*/
          converseLib.validationFailed(10); /* invalid*/
          set FG0DM050.XPRCD[1] cursor, bold; /* highlight*/
          set FG0DM050.XPRCD[2] bold; /* highlight*/
          set FG0DM050.XPRCD[3] bold; /* highlight*/
        end
      else
        FFWREC.XXXMODID = "542"; /* error module id*/
        converseLib.validationFailed(10); /* invalid*/
        set FG0DM050.XPRCD[1] cursor, bold; /* highlight*/
        set FG0DM050.XPRCD[2] bold; /* highlight*/
      end
    else
      FFWREC.XXXMODID = "542"; /* error module id*/
      converseLib.validationFailed(10); /* invalid*/
      set FG0DM050.XPRCD[1] cursor, bold; /* highlight*/
    end
  else
    if (FG0DM050.XPRCD[2] == " ")
      if (FG0DM050.XPRCD[3] == " ")
        if (FG0DM050.XPRCD[4] == " ")
          /* continue*/
        else
          FFWREC.XXXMODID = "542"; /* error module id*/
          converseLib.validationFailed(10); /* invalid*/
          set FG0DM050.XPRCD[2] cursor, bold; /* highlight*/
          set FG0DM050.XPRCD[3] bold; /* highlight*/
        end
      else
        FFWREC.XXXMODID = "542"; /* error module id*/
        converseLib.validationFailed(10); /* invalid*/
        set FG0DM050.XPRCD[2] cursor, bold; /* highlight*/
      end
    else
      if (FG0DM050.XPRCD[3] == " ")
        if (FG0DM050.XPRCD[4] == " ")
          /* continue*/
        else
          FFWREC.XXXMODID = "542"; /* error module id*/
          converseLib.validationFailed(10); /* invalid*/
          set FG0DM050.XPRCD[3] cursor, bold; /* highlight*/
        end
      end
    end
  end
end // end FG0D-5421

// Check for duplicates
Function FG0D-5422()
   /* ------------------------------------------------------------*/
   /* Check for duplicates in the list of type codes*/
   /* ------------------------------------------------------------*/
  ;
   /* Check for duplicates*/
  ;
  if (FG0DM050.XPRCD[3] > " "
   && FG0DM050.XPRCD[3] == FG0DM050.XPRCD[4])
    FFWREC.XXXMODID = "542"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FG0DM050.XPRCD[3] cursor, bold; /* highlight*/
    set FG0DM050.XPRCD[4] bold; /* highlight*/
  end
  if (FG0DM050.XPRCD[2] > " "
   && FG0DM050.XPRCD[2] == FG0DM050.XPRCD[4])
    FFWREC.XXXMODID = "542"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FG0DM050.XPRCD[2] cursor, bold; /* highlight*/
    set FG0DM050.XPRCD[4] bold; /* highlight*/
  end
  if (FG0DM050.XPRCD[2] > " "
   && FG0DM050.XPRCD[2] == FG0DM050.XPRCD[3])
    FFWREC.XXXMODID = "542"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FG0DM050.XPRCD[2] cursor, bold; /* highlight*/
    set FG0DM050.XPRCD[3] bold; /* highlight*/
  end
  if (FG0DM050.XPRCD[1] > " "
   && FG0DM050.XPRCD[1] == FG0DM050.XPRCD[4])
    FFWREC.XXXMODID = "542"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FG0DM050.XPRCD[1] cursor, bold; /* highlight*/
    set FG0DM050.XPRCD[4] bold; /* highlight*/
  end
  if (FG0DM050.XPRCD[1] > " "
   && FG0DM050.XPRCD[1] == FG0DM050.XPRCD[3])
    FFWREC.XXXMODID = "542"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FG0DM050.XPRCD[1] cursor, bold; /* highlight*/
    set FG0DM050.XPRCD[3] bold; /* highlight*/
  end
  if (FG0DM050.XPRCD[1] > " "
   && FG0DM050.XPRCD[1] == FG0DM050.XPRCD[2])
    FFWREC.XXXMODID = "542"; /* error module id*/
    converseLib.validationFailed(319); /* invalid*/
    set FG0DM050.XPRCD[1] cursor, bold; /* highlight*/
    set FG0DM050.XPRCD[2] bold; /* highlight*/
  end
  ;
end // end FG0D-5422

// Validate sales fcst minimum
Function FG0D-543()
  FFXREC.FFXCHAR = FG0DM050.FG0DM-SLS-FCST-MIN;
  XSFFS11(); /* Translate value format*/
  ;
  if (FFXREC.FFXRTNCD == "0") /* Normal return*/
    ;
    if (FFXREC.FFXNUMB < 0) /* Negative value*/
      ;
      FFWREC.XXXMODID = "543"; /* Module identification*/
      converseLib.validationFailed(10); /* Invalid value entered*/
      set FG0DM050.FG0DM-SLS-FCST-MIN cursor, bold;
      ;
    end
    ;
  else
    ;
    FFWREC.XXXMODID = "543"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate invalid value entered*/
    set FG0DM050.FG0DM-SLS-FCST-MIN cursor, bold;
    ;
  end
  ;
end // end FG0D-543

// Verify lin,typ,cat relationshp
Function FG0D-544()
  ;
  if (FG0DM050.XPLCD != "*"
   && FG0DM050.XPLCD != " "
   && FG0DM050.XPCCD != " ")
    ;
    set FF2REC empty;
    ;
    if (FG0DM050.YPGCD == "*") /* wild card type group*/
      FF2REC.YPGCD = "01";
      FG0D-5411();
      if (SQLCA.VAGen_SQLCODE == +100) /* not found on vffxrf01*/
        FF2REC.YPGCD = "02";
        FG0D-5411();
        if (SQLCA.VAGen_SQLCODE == +100) /* not found on vffxrf01*/
          FG0DM050.XPLABRV = " "; /* Abbreviation*/
          FFWREC.XXXMODID = "540"; /* Module identification*/
          set FG0DM050.XPLCD cursor, bold; /* Highlight*/
          set FG0DM050.YPGCD bold;
          set FG0DM050.XPCCD bold;
          converseLib.validationFailed(203); /* Inconsistent relationship*/
          ;
        end
      end
    else
      FF2REC.YPGCD = FG0DM050.YPGCD;
      FG0D-5411(); /* read vffxrf01*/
    end
    ;
    if (FG0DM050.XPLCD != FF2REC.XPLCD) /* different line code*/
      ;
      FG0DM050.XPLABRV = " "; /* Abbreviation*/
      FFWREC.XXXMODID = "540"; /* Module identification*/
      set FG0DM050.XPLCD cursor, bold; /* Highlight*/
      set FG0DM050.YPGCD bold;
      set FG0DM050.XPCCD bold;
      converseLib.validationFailed(203); /* Inconsistent relationship*/
      ;
    end
    ;
  end
  ;
end // end FG0D-544

// Process valid input request
Function FG0D-550()
   /* ------------------------------------------------------------*/
   /* Indicate the job identification and forms code to be used.*/
   /* ------------------------------------------------------------*/
  ;
   /* ***********************/
   /* line/type report*/
   /* ***********************/
  ;
  if (FG0DM050.FG0DM-SEQ[1] == "S")
    ;
    if (FG0DM050.FG0DM-NEED-SHIP-SEL == "N") /* Need month*/
      FG0DW00.FG0DWJOB = "4001"; /* Job id*/
      FG0DW00.FG0DW-REPT-TYPE = "DMND"; /* Report type*/
    else
      FG0DW00.FG0DWJOB = "4002"; /* Proc id*/
      FG0DW00.FG0DW-REPT-TYPE = "SHIP"; /* Report type*/
    end
    ;
    FG0DW00.FG0DW-FORM = "34"; /* Forms code*/
    FG0DW00.FG0DW-CNTL-PRGM-ID = "400"; /* control card pgm id*/
    FG0DW00.FG0DW-PROC = "400"; /* Proc id*/
    FG0DW00.FG0DW-REPT-EXT = "YEAR3"; /* Report extension*/
    ;
    FG0D-551(); /* process line report*/
    ;
  end
  ;
   /* *************************/
   /* bgrade/closeout report*/
   /* *************************/
  ;
  if (FG0DM050.FG0DM-BGD-CLS-RPT == "S") /* B-grade/closeout report*/
    ;
    if (FG0DM050.FG0DM-NEED-SHIP-SEL == "N") /* Need month*/
      FG0DW00.FG0DWJOB = "6871"; /* Job id*/
      FG0DW00.FG0DW-REPT-TYPE = "DMND"; /* Report type*/
    else
      FG0DW00.FG0DWJOB = "6872"; /* Proc id*/
      FG0DW00.FG0DW-REPT-TYPE = "SHIP"; /* Report type*/
    end
    ;
    FG0DW00.FG0DWFOR = "68"; /* Forms code*/
    FG0D-553(); /* process b-grade/closeout report*/
  end
  ;
   /* *************************/
   /* line/category report*/
   /* style group report*/
   /* style color report*/
   /* *************************/
  ;
  ;
  if (FG0DM050.FG0DM-SEQ[2] == "S" /* By line/category*/
   || FG0DM050.FG0DM-SEQ[3] == "S" /* By style group*/
   || FG0DM050.FG0DM-SEQ[4] == "S") /* By style color*/
    ;
    if (FG0DM050.FG0DM-NEED-SHIP-SEL == "N") /* Need month*/
      FG0DW00.FG0DWJOB = "4101";
      FG0DW00.FG0DW-REPT-TYPE = "DMND"; /* Report type*/
    else
      FG0DW00.FG0DWJOB = "4102";
      FG0DW00.FG0DW-REPT-TYPE = "SHIP"; /* Report type*/
    end
    ;
    FG0DW00.FG0DW-COND1 = 1; /* Initialize condition code*/
    FG0DW00.FG0DW-COND2 = 1; /* Initialize condition code*/
    FG0DW00.FG0DW-COND3 = 1; /* Initialize condition code*/
    ;
    FG0DW00.FG0DW-PROC1 = "410"; /* Proc id*/
    FG0DW00.FG0DW-PROC2 = "420"; /* Proc id*/
    FG0DW00.FG0DW-PROC3 = "430"; /* Proc id*/
    ;
    FG0DW00.FG0DW-FORM1 = "35"; /* Forms code*/
    FG0DW00.FG0DW-FORM2 = "36"; /* Forms code*/
    FG0DW00.FG0DW-FORM3 = "37"; /* Forms code*/
    ;
    if (FG0DM050.FG0DM-SEQ[2] == "S") /* By line/category*/
      FG0DW00.FG0DW-COND1 = 0; /* set condition code*/
      FG0DW00.FG0DW-CNTL-PRGM-1 = "410"; /* control card pgm id*/
    end
    ;
    if (FG0DM050.FG0DM-SEQ[3] == "S") /* By style group*/
      FG0DW00.FG0DW-CNTL-PRGM-2 = "420"; /* control card pgm id*/
      FG0DW00.FG0DW-COND2 = 0; /* set condition code*/
    end
    ;
    if (FG0DM050.FG0DM-SEQ[4] == "S") /* By style color*/
      FG0DW00.FG0DW-CNTL-PRGM-3 = "430"; /* control card pgm id*/
      FG0DW00.FG0DW-COND3 = 0; /* set condition code*/
    end
    ;
    FG0DW00.FG0DW-REPT-EXT = "YEAR3"; /* Report extension*/
    ;
    FG0D-552(); /* process detail report*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "550"; /* Module identification*/
  ;
  if (converseVar.validationMsgNum != 1) /* Call successful*/
    ;
    FG0DW00.FG0DMSEL[5] = "*"; /* Indicate function completed*/
    ;
    set FG0DM050 initial; /* Clear map output area*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0D-550

// Process line/type report
Function FG0D-551()
  ;
   /* ------------------------------------------------------*/
   /* Call sub-routine to find which environment the*/
   /* program is executing in, development or production.*/
   /* ------------------------------------------------------*/
  ;
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    ;
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FG0D-5511(); /* format production JCL*/
    else
      FG0D-5512(); /* format test JCL*/
    end
    ;
  else
    ;
    FFWREC.XXXMODID = "551"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print rqst*/
    ;
  end
  ;
end // end FG0D-551

// FF4001 production JCL
Function FG0D-5511()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  ;
  FG0DW00.FG0DWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FG0DT02.TARTYPE[FG0DWIXT] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      set FG0DW20 empty; /* Parameters work area*/
      ;
      FG0DW20.FG0DW-BEG-MO = FFZREC.FFZBEGMO; /* Beginning month*/
      FG0DW20.FG0DW-END-MO = FFZREC.FFZENDMO; /* Ending month*/
      FG0DW20.XPLCD = FG0DM050.XPLCD; /* Product line*/
      FG0DW20.YPGCD = "*"; /* Force type group code*/
      FG0DW20.FG0DW-SEAS-END-MO[1] = FG0DW00.FG0DSNDT[1];
      FG0DW20.FG0DW-SEAS-END-MO[2] = FG0DW00.FG0DSNDT[2];
      FG0DW20.FG0DW-NEED-SHIP-SEL = FG0DM050.FG0DM-NEED-SHIP-SEL;
      FG0DW20.FG0DW-XQA-CD1 = "01"; /* Quality code*/
      FG0DW20.FG0DW-XQA-CD2 = "02"; /* Quality code*/
      FG0DW20.FG0DW-XLC-CD1 = "10"; /* Life cycle code*/
      FG0DW20.FG0DW-XLC-CD2 = "20"; /* Life cycle code*/
      FG0DW20.FG0DW-3YR-2YR-RPT = 3; /* report type*/
      FG0DW20.FG0DW-USER-ID = COMMAREA.CAUSERID; /* user id*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG0DW20.TARJCL; /* Parameters*/
      TA6REC.TARTYPE[TA6INDEX] = FG0DT02.TARTYPE[FG0DWIXT]; /* Type*/
      ;
    else
      ;
      if (FG0DT02.TARTYPE[FG0DWIXT] == "J" /* Job statement*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "E" /* Proc statement - extract*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "X" /* Proc statement - report*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "1" /* report extension*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "2" /* report sequence*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "3" /* report type*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "T" /* report type*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "4" /* forms code*/
       || FG0DT02.TARTYPE[FG0DWIXT] == "R") /* report control card*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        FG0DW02.TARJCL = FG0DT02.TARJCL[FG0DWIXT]; /* JCL*/
        FG0DW02.TARTYPE = FG0DT02.TARTYPE[FG0DWIXT]; /* Type*/
        ;
        FG0DW00.FG0DW-NEED-SHIP-SEL = FG0DM050.FG0DM-NEED-SHIP-SEL;
        ;
        FG0DS-02(); /* Format variable field*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DW02.TARJCL; /* Parameters*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DW02.TARTYPE; /* Type*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DT02.TARJCL[FG0DWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DT02.TARTYPE[FG0DWIXT]; /* Type*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0DT02.TARJCL[FG0DWIXT] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FG0DW00.FG0DWIXT = FG0DW00.FG0DWIXT + 1; /* Input table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "551"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    ;
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    ;
  end
  ;
end // end FG0D-5511

// FF4001 test JCL
Function FG0D-5512()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  ;
  FG0DW00.FG0DWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FG0DT5O.TARTYPE[FG0DWIXT] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      set FG0DW20 empty; /* Parameters work area*/
      ;
      FG0DW20.FG0DW-BEG-MO = FFZREC.FFZBEGMO; /* Beginning month*/
      FG0DW20.FG0DW-END-MO = FFZREC.FFZENDMO; /* Ending month*/
      FG0DW20.XPLCD = FG0DM050.XPLCD; /* Product line*/
      FG0DW20.YPGCD = "*"; /* Force type group code*/
      FG0DW20.FG0DW-SEAS-END-MO[1] = FG0DW00.FG0DSNDT[1];
      FG0DW20.FG0DW-SEAS-END-MO[2] = FG0DW00.FG0DSNDT[2];
      FG0DW20.FG0DW-NEED-SHIP-SEL = FG0DM050.FG0DM-NEED-SHIP-SEL;
      FG0DW20.FG0DW-XQA-CD1 = "01"; /* Quality code*/
      FG0DW20.FG0DW-XQA-CD2 = "02"; /* Quality code*/
      FG0DW20.FG0DW-XLC-CD1 = "10"; /* Life cycle code*/
      FG0DW20.FG0DW-XLC-CD2 = "20"; /* Life cycle code*/
      FG0DW20.FG0DW-3YR-2YR-RPT = 3; /* report type*/
      FG0DW20.FG0DW-USER-ID = COMMAREA.CAUSERID; /* user id*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG0DW20.TARJCL; /* Parameters*/
      TA6REC.TARTYPE[TA6INDEX] = FG0DT5O.TARTYPE[FG0DWIXT]; /* Type*/
      ;
    else
      ;
      if (FG0DT5O.TARTYPE[FG0DWIXT] == "J" /* Job statement*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "E" /* Proc statement - extract*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "X" /* Proc statement - report*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "A" /* Run statement  - extract*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "B" /* Run statement  - report*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "1" /* Report extension*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "2" /* Report sequence*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "3" /* Report sequence*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "T" /* Report type*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "4" /* forms code*/
       || FG0DT5O.TARTYPE[FG0DWIXT] == "R") /* Report control card*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        FG0DW02.TARJCL = FG0DT5O.TARJCL[FG0DWIXT]; /* JCL*/
        FG0DW02.TARTYPE = FG0DT5O.TARTYPE[FG0DWIXT]; /* Type*/
        ;
        FG0DW00.FG0DW-NEED-SHIP-SEL = FG0DM050.FG0DM-NEED-SHIP-SEL;
        ;
        FG0DS-02(); /* Format variable field*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DW02.TARJCL; /* Parameters*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DW02.TARTYPE; /* Type*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DT5O.TARJCL[FG0DWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DT5O.TARTYPE[FG0DWIXT]; /* Type*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0DT5O.TARJCL[FG0DWIXT] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FG0DW00.FG0DWIXT = FG0DW00.FG0DWIXT + 1; /* Input table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "551"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    ;
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    ;
  end
  ;
end // end FG0D-5512

// FF3301 production JCL
Function FG0D-5521()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  ;
  FG0DW00.FG0DWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FG0DT03.TARTYPE[FG0DWIXT] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      set FG0DW21 empty; /* Parameters work area*/
      ;
      FG0DW21.FG0DW-BEG-MO = FFZREC.FFZBEGMO; /* Beginning month*/
      FG0DW21.FG0DW-END-MO = FFZREC.FFZENDMO; /* Ending month*/
      FG0DW21.XPLCD = FG0DM050.XPLCD; /* Product line*/
      FG0DW21.YPGCD = FG0DM050.YPGCD; /* Product type group*/
      FG0DW21.XPCCD = FG0DM050.XPCCD; /* Product category*/
      FG0DW21.FG0DW-SEAS-END-MO[1] = FG0DW00.FG0DSNDT[1];
      FG0DW21.FG0DW-SEAS-END-MO[2] = FG0DW00.FG0DSNDT[2];
      FG0DW21.XPRCD[1] = FG0DM050.XPRCD[1]; /* type code*/
      FG0DW21.XPRCD[2] = FG0DM050.XPRCD[2];
      FG0DW21.XPRCD[3] = FG0DM050.XPRCD[3];
      FG0DW21.XPRCD[4] = FG0DM050.XPRCD[4];
      FG0DW21.XPRCD[5] = FG0DM050.XPRCD[5];
      FG0DW21.FG0DW-NEED-SHIP-SEL = FG0DM050.FG0DM-NEED-SHIP-SEL;
      FG0DW21.FG0DW-COMB-TYPE-CD = FG0DM050.FG0DM-COMB-TYP-CDS;
      ;
      FFXREC.FFXCHAR = FG0DM050.FG0DM-SLS-FCST-MIN; /* sls fcst min*/
      XSFFS11();
      FG0DW21.FG0DW-SLS-FCST-MIN-CHAR = FFXREC.FFXCHAR;
      FG0DW21.FG0DW-SLS-FCST-MIN-NUM = FFXREC.FFXNUMB;
      ;
      FG0DW21.FG0DW-3YR-2YR-RPT = 3; /* report type*/
      FG0DW21.FG0DW-USER-ID = COMMAREA.CAUSERID; /* user id*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG0DW21.TARJCL; /* Parameters*/
      TA6REC.TARTYPE[TA6INDEX] = FG0DT03.TARTYPE[FG0DWIXT]; /* Type*/
      ;
    else
      ;
      if (FG0DT03.TARTYPE[FG0DWIXT] == "J" /* Job statement*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "E" /* Proc statement - extract*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "C" /* Proc statement - cat report*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "G" /* Proc statement - stygrp rpt*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "S" /* Proc statement - styclr rpt*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "5" /* Condition*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "6" /* Condition*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "7" /* Condition*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "1" /* report extension*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "2" /* report sequence*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "3" /* report sequence*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "T" /* report type*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "4" /* forms code*/
       || FG0DT03.TARTYPE[FG0DWIXT] == "R") /* report distribution*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        FG0DW02.TARJCL = FG0DT03.TARJCL[FG0DWIXT]; /* JCL*/
        FG0DW02.TARTYPE = FG0DT03.TARTYPE[FG0DWIXT]; /* Type*/
        ;
        FG0DW00.FG0DW-NEED-SHIP-SEL = FG0DM050.FG0DM-NEED-SHIP-SEL;
        ;
        FG0DS-03(); /* Format variable field*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DW02.TARJCL; /* Parameters*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DW02.TARTYPE; /* Type*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DT03.TARJCL[FG0DWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DT03.TARTYPE[FG0DWIXT]; /* Type*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0DT03.TARJCL[FG0DWIXT] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FG0DW00.FG0DWIXT = FG0DW00.FG0DWIXT + 1; /* Input table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "552"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    ;
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    ;
  end
  ;
end // end FG0D-5521

// Process cat,stygrp,styclr rpt
Function FG0D-552()
  ;
   /* ------------------------------------------------------*/
   /* Call sub-routine to find which environment the*/
   /* program is executing in, development or production.*/
   /* ------------------------------------------------------*/
  ;
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    ;
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FG0D-5521(); /* format production JCL*/
    else
      FG0D-5522(); /* format test JCL*/
    end
    ;
  else
    ;
    FFWREC.XXXMODID = "552"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print rqst*/
    ;
  end
  ;
end // end FG0D-552
// FF3301 test JCL
Function FG0D-5522()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  ;
  FG0DW00.FG0DWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FG0DT51.TARTYPE[FG0DWIXT] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      set FG0DW21 empty; /* Parameters work area*/
      ;
      FG0DW21.FG0DW-BEG-MO = FFZREC.FFZBEGMO; /* Beginning month*/
      FG0DW21.FG0DW-END-MO = FFZREC.FFZENDMO; /* Ending month*/
      FG0DW21.XPLCD = FG0DM050.XPLCD; /* Product line*/
      FG0DW21.YPGCD = FG0DM050.YPGCD; /* Product type group*/
      FG0DW21.XPCCD = FG0DM050.XPCCD; /* Product category*/
      FG0DW21.FG0DW-SEAS-END-MO[1] = FG0DW00.FG0DSNDT[1];
      FG0DW21.FG0DW-SEAS-END-MO[2] = FG0DW00.FG0DSNDT[2];
      FG0DW21.XPRCD[1] = FG0DM050.XPRCD[1]; /* type code*/
      FG0DW21.XPRCD[2] = FG0DM050.XPRCD[2];
      FG0DW21.XPRCD[3] = FG0DM050.XPRCD[3];
      FG0DW21.XPRCD[4] = FG0DM050.XPRCD[4];
      FG0DW21.XPRCD[5] = FG0DM050.XPRCD[5];
      FG0DW21.FG0DW-NEED-SHIP-SEL = FG0DM050.FG0DM-NEED-SHIP-SEL;
      FG0DW21.FG0DW-COMB-TYPE-CD = FG0DM050.FG0DM-COMB-TYP-CDS;
      ;
      FFXREC.FFXCHAR = FG0DM050.FG0DM-SLS-FCST-MIN; /* sls fcst min*/
      XSFFS11();
      FG0DW21.FG0DW-SLS-FCST-MIN-CHAR = FFXREC.FFXCHAR;
      FG0DW21.FG0DW-SLS-FCST-MIN-NUM = FFXREC.FFXNUMB;
      ;
      FG0DW21.FG0DW-3YR-2YR-RPT = 3; /* report type*/
      FG0DW21.FG0DW-USER-ID = COMMAREA.CAUSERID; /* user id*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG0DW21.TARJCL; /* Parameters*/
      TA6REC.TARTYPE[TA6INDEX] = FG0DT51.TARTYPE[FG0DWIXT]; /* Type*/
      ;
    else
      ;
      if (FG0DT51.TARTYPE[FG0DWIXT] == "J" /* Job statement*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "E" /* Proc statement - extract*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "C" /* Proc statement - cat report*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "G" /* Proc statement - stygrp rpt*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "S" /* Proc statement - styclr rpt*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "5" /* Condition - cat report*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "6" /* Condition - stygrp rpt*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "7" /* Condition - styclr rpt*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "A" /* Run statement  - extract*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "B" /* Run statement  - cat report*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "D" /* Run statement  - stygrp rpt*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "F" /* Run statement  - styclr rpt*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "1" /* Report extension*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "2" /* Report sequence*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "3" /* Report sequence*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "T" /* Report type*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "4" /* forms code*/
       || FG0DT51.TARTYPE[FG0DWIXT] == "R") /* Report distribution*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        FG0DW02.TARJCL = FG0DT51.TARJCL[FG0DWIXT]; /* JCL*/
        FG0DW02.TARTYPE = FG0DT51.TARTYPE[FG0DWIXT]; /* Type*/
        ;
        FG0DW00.FG0DW-NEED-SHIP-SEL = FG0DM050.FG0DM-NEED-SHIP-SEL;
        ;
        FG0DS-03(); /* Format variable field*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DW02.TARJCL; /* Parameters*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DW02.TARTYPE; /* Type*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DT51.TARJCL[FG0DWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DT51.TARTYPE[FG0DWIXT]; /* Type*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0DT51.TARJCL[FG0DWIXT] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FG0DW00.FG0DWIXT = FG0DW00.FG0DWIXT + 1; /* Input table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "552"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    ;
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    ;
  end
  ;
end // end FG0D-5522

// Process bgrade/clsout report
Function FG0D-553()
  ;
   /* ------------------------------------------------------*/
   /* Call sub-routine to find which environment the*/
   /* program is executing in, development or production.*/
   /* ------------------------------------------------------*/
  ;
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    ;
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FG0D-5531(); /* format production JCL*/
    else
      FG0D-5532(); /* format test JCL*/
    end
    ;
  else
    ;
    FFWREC.XXXMODID = "553"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print rqst*/
    ;
  end
  ;
end // end FG0D-553

// FF6861 production JCL
Function FG0D-5531()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  ;
  FG0DW00.FG0DWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FG0DT08.TARTYPE[FG0DWIXT] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      set FG0DW21 empty; /* Parameters work area*/
      ;
      FG0DW21.FG0DW-BEG-MO = FFZREC.FFZBEGMO; /* Beginning month*/
      FG0DW21.FG0DW-END-MO = FFZREC.FFZENDMO; /* Ending month*/
      FG0DW21.XPLCD = FG0DM050.XPLCD; /* Product line*/
      FG0DW21.YPGCD = FG0DM050.YPGCD; /* Product type group*/
      FG0DW21.XPCCD = FG0DM050.XPCCD; /* Product category*/
      FG0DW21.FG0DW-SEAS-END-MO[1] = FG0DW00.FG0DSNDT[1];
      FG0DW21.FG0DW-SEAS-END-MO[2] = FG0DW00.FG0DSNDT[2];
      FG0DW21.XPRCD[1] = FG0DM050.XPRCD[1]; /* type code*/
      FG0DW21.XPRCD[2] = FG0DM050.XPRCD[2];
      FG0DW21.XPRCD[3] = FG0DM050.XPRCD[3];
      FG0DW21.XPRCD[4] = FG0DM050.XPRCD[4];
      FG0DW21.XPRCD[5] = FG0DM050.XPRCD[5];
      FG0DW21.FG0DW-NEED-SHIP-SEL = FG0DM050.FG0DM-NEED-SHIP-SEL;
      FG0DW21.FG0DW-COMB-TYPE-CD = FG0DM050.FG0DM-COMB-TYP-CDS;
      ;
      FFXREC.FFXCHAR = FG0DM050.FG0DM-SLS-FCST-MIN; /* sls fcst min*/
      XSFFS11();
      FG0DW21.FG0DW-SLS-FCST-MIN-CHAR = FFXREC.FFXCHAR;
      FG0DW21.FG0DW-SLS-FCST-MIN-NUM = FFXREC.FFXNUMB;
      ;
      FG0DW21.FG0DW-3YR-2YR-RPT = 0; /* report type*/
      FG0DW21.FG0DW-USER-ID = COMMAREA.CAUSERID; /* user id*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG0DW21.TARJCL; /* Parameters*/
      TA6REC.TARTYPE[TA6INDEX] = FG0DT08.TARTYPE[FG0DWIXT]; /* Type*/
      ;
    else
      ;
      if (FG0DT08.TARTYPE[FG0DWIXT] == "R" /* Report distribution*/
       || FG0DT08.TARTYPE[FG0DWIXT] == "1" /* or JOB statement*/
       || FG0DT08.TARTYPE[FG0DWIXT] == "2" /* or EXEC statement*/
       || FG0DT08.TARTYPE[FG0DWIXT] == "3" /* or RUN statement*/
       || FG0DT08.TARTYPE[FG0DWIXT] == "4" /* or PRINTDS statement*/
       || FG0DT08.TARTYPE[FG0DWIXT] == "7" /* or Bundle statement*/
       || FG0DT08.TARTYPE[FG0DWIXT] == "8") /* or Bundle statement*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        FG0DW01.TARJCL = FG0DT08.TARJCL[FG0DWIXT]; /* JCL*/
        FG0DW01.TARTYPE = FG0DT08.TARTYPE[FG0DWIXT]; /* Type*/
        ;
        FG0DS01(); /* Format variable JCL statements*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DT08.TARJCL[FG0DWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DT08.TARTYPE[FG0DWIXT]; /* Type*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0DT08.TARJCL[FG0DWIXT] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FG0DW00.FG0DWIXT = FG0DW00.FG0DWIXT + 1; /* Input table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "553"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    ;
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    ;
  end
  ;
end // end FG0D-5531

// FF6861 test JCL
Function FG0D-5532()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  ;
  FG0DW00.FG0DWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FG0DT56.TARTYPE[FG0DWIXT] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/
      ;
      set FG0DW21 empty; /* Parameters work area*/
      ;
      FG0DW21.FG0DW-BEG-MO = FFZREC.FFZBEGMO; /* Beginning month*/
      FG0DW21.FG0DW-END-MO = FFZREC.FFZENDMO; /* Ending month*/
      FG0DW21.XPLCD = FG0DM050.XPLCD; /* Product line*/
      FG0DW21.YPGCD = FG0DM050.YPGCD; /* Product type group*/
      FG0DW21.XPCCD = FG0DM050.XPCCD; /* Product category*/
      FG0DW21.FG0DW-SEAS-END-MO[1] = FG0DW00.FG0DSNDT[1];
      FG0DW21.FG0DW-SEAS-END-MO[2] = FG0DW00.FG0DSNDT[2];
      FG0DW21.XPRCD[1] = FG0DM050.XPRCD[1]; /* type code*/
      FG0DW21.XPRCD[2] = FG0DM050.XPRCD[2];
      FG0DW21.XPRCD[3] = FG0DM050.XPRCD[3];
      FG0DW21.XPRCD[4] = FG0DM050.XPRCD[4];
      FG0DW21.XPRCD[5] = FG0DM050.XPRCD[5];
      FG0DW21.FG0DW-NEED-SHIP-SEL = FG0DM050.FG0DM-NEED-SHIP-SEL;
      FG0DW21.FG0DW-COMB-TYPE-CD = FG0DM050.FG0DM-COMB-TYP-CDS;
      ;
      FFXREC.FFXCHAR = FG0DM050.FG0DM-SLS-FCST-MIN; /* sls fcst min*/
      XSFFS11();
      FG0DW21.FG0DW-SLS-FCST-MIN-CHAR = FFXREC.FFXCHAR;
      FG0DW21.FG0DW-SLS-FCST-MIN-NUM = FFXREC.FFXNUMB;
      ;
      FG0DW21.FG0DW-3YR-2YR-RPT = 0; /* report type*/
      FG0DW21.FG0DW-USER-ID = COMMAREA.CAUSERID; /* user id*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG0DW21.TARJCL; /* Parameters*/
      TA6REC.TARTYPE[TA6INDEX] = FG0DT56.TARTYPE[FG0DWIXT]; /* Type*/
      ;
    else
      ;
      if (FG0DT56.TARTYPE[FG0DWIXT] == "R" /* Report distribution*/
       || FG0DT56.TARTYPE[FG0DWIXT] == "1" /* or JOB statement*/
       || FG0DT56.TARTYPE[FG0DWIXT] == "2" /* or EXEC statement*/
       || FG0DT56.TARTYPE[FG0DWIXT] == "3" /* or RUN statement*/
       || FG0DT56.TARTYPE[FG0DWIXT] == "4" /* or PRINTDS statement*/
       || FG0DT56.TARTYPE[FG0DWIXT] == "7" /* or Bundle statement*/
       || FG0DT56.TARTYPE[FG0DWIXT] == "8") /* or Bundle statement*/
        ;
        /* ------------------------------------------------------------*/
         /* Format the variable fields in the JCL statement.*/
        /* ------------------------------------------------------------*/
        ;
        FG0DW01.TARJCL = FG0DT56.TARJCL[FG0DWIXT]; /* JCL*/
        FG0DW01.TARTYPE = FG0DT56.TARTYPE[FG0DWIXT]; /* Type*/
        ;
        FG0DS01(); /* Format variable JCL statements*/
        ;
      else
        ;
        /* ------------------------------------------------------------*/
         /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/
        ;
        TA6REC.TARJCL[TA6INDEX] = FG0DT56.TARJCL[FG0DWIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = FG0DT56.TARTYPE[FG0DWIXT]; /* Type*/
        ;
      end
      ;
    end
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0DT56.TARJCL[FG0DWIXT] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      FG0DW00.FG0DWIXT = FG0DW00.FG0DWIXT + 1; /* Input table index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "553"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    ;
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    ;
  end
  ;
end // end FG0D-5532

// Main process to display a map
Function FG0D001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Invoke the process for each selection entered on menu.*/
   /* 2) After all selections are processed, display the menu.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DW00.FG0DWSWX != "Y") /* EXIT not requested*/
    ;
    if (FG0DW00.FG0DMSEL[1] == "S" /* Line 1 was selected*/
     || TA6REC.TA6SUBSW == "I")    /* or information requested*/
      ;
      FG0D010(); /* Specify output destination*/
      ;
    end
    ;
    if (FG0DW00.FG0DMSEL[2] == "S") /* Line 2 was selected*/
      FG0D-200(); /* Domestic Monthly Sales Fcst w/*/
    end /* seasonal subtotals*/
    ;
    if (FG0DW00.FG0DMSEL[3] == "S") /* Line 3 was selected*/
      FG0D-300(); /* Domestic Seasonal Forecast Report*/
    end
    ;
    if (FG0DW00.FG0DMSEL[4] == "S") /* Line 4 was selected*/
      FG0D-400(); /* Domestic 2 Year Comparison Report*/
    end
    ;
    if (FG0DW00.FG0DMSEL[5] == "S") /* Line 5 was selected*/
      FG0D-500(); /* Domestic 3 Year Comparison Report*/
    end
    ;
  end
  ;
  FG0DW00.FG0DWSWX = "N"; /* Reset exit requested switch*/
  ;
  FG0D990(); /* Report Request Menu*/
  ;
  ;
end // end FG0D001

// Specify output destination
Function FG0D010()
   /* ------------------------------------------------------------*/
   /* Obtain and/or display the output destination for the user.*/
   /* ------------------------------------------------------------*/
  ;
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, indicate the selected function is completed.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (TA6REC.TA6RTNCD == "0") /* Normal return*/
      ;
      if (TA6REC.TA6SUBSW == "I") /* Obtain information only*/
        ;
        TA6REC.TA6SUBSW = "N"; /* Indicate information obtained*/
      else
        FG0DW00.FG0DMSEL[1] = "*"; /* Indicate function completed*/
        ;
      end
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If user cancelled request, indicate function cancelled.*/
    /* ------------------------------------------------------------*/
    ;
    if (TA6REC.TA6RTNCD == "1") /* User cancelled request*/
      ;
      FG0DW00.FG0DMSEL[1] = "C"; /* Indicate function cancelled*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = "010"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/
  ;
  ;
end // end FG0D010

// Report Request Menu
Function FG0D990()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FG0D991(); /* Format and display the map*/
  ;
  FG0D992(); /* Check attention identifier*/
  ;
  FG0D993(); /* Reset fields to normal intensity*/
  ;
  FG0D994(); /* Verify the data that was entered*/
  ;
  FG0D995(); /* Process valid input request*/
  ;
  ;
end // end FG0D990

// Format and display the map
Function FG0D991()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    ;
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* Otherwise, format the map output area.*/
    /* ------------------------------------------------------------*/
    ;
    set FG0DM099 initial; /* M099 input/output*/
    ;
    FG0DW00.FG0DWIXM = 1; /* Initialize map index*/
    ;
    while (FG0DW00.FG0DWIXM <= FG0DW00.FG0DWIXL) /* Until end of array*/
      ;
      FG0DM099.FG0DMSEL[FG0DWIXM] = FG0DW00.FG0DMSEL[FG0DWIXM];
      ;
      FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM + 1; /* Increment index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FG0DM099.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FG0DM099.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG0DM099.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (FFWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FFWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FFWREC.XXXMSGNO);
      end /* Message number*/
    else
      FG0DM099.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    FG0DM099.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    ;
    set FG0DM099 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FG0DM099 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMSGNO = 0; /* Message number*/
  FFWREC.XXXMODID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = FG0DM099.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG0DM099.CAITEM; /* Application data*/
  ;
  ;
end // end FG0D991

// Check attention identifier
Function FG0D992()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    set FG0DM099 initial; /* M099 input/output*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    FG0DS99(); /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
      set FG0DM099.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FFWREC.XXXMODID = "992"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    FG0DS99(); /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to Production*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG0DM099"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FG0A"; /* TO application*/
    end
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    COMMAREA.CATOAP = " "; /* Clear TO application*/
    ;
    FG0DS99(); /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    ;
    FFWREC.XXXMODID = "992"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    FG0DS99(); /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FG0D992

// Reset highlighted fields
Function FG0D993()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  FG0DW00.FG0DWIXM = 1; /* Initialize index*/
  ;
  while (FG0DW00.FG0DWIXM <= FG0DW00.FG0DWIXL) /* Until all lines are reset*/
    ;
    set FG0DM099.FG0DMSEL[FG0DWIXM] initialAttributes; /* Reset select field*/
    ;
    FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM + 1; /* Increment line index*/
    ;
  end
  ;
  set FG0DM099.CATOAP initialAttributes; /* TO application*/
  set FG0DM099.CAITEM initialAttributes; /* Application data*/
  ;
  ;
end // end FG0D993

// Verify the entered data
Function FG0D994()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "994"; /* Module identification*/
    set FG0DM099.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Check for proper select tag.*/
   /* ------------------------------------------------------------*/
  ;
  FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXL; /* Initialize line index*/
  ;
  while (FG0DW00.FG0DWIXM > 0) /* Until all lines are verified*/
    ;
    /* ------------------------------------------------------------*/
     /* Indicate an error if the line was not selected properly.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0DM099.FG0DMSEL[FG0DWIXM] != FG0DW00.FG0DMSEL[FG0DWIXM]
     && FG0DM099.FG0DMSEL[FG0DWIXM] != " " /* Line was selected*/
     && FG0DM099.FG0DMSEL[FG0DWIXM] != "S") /* and not with an "S"*/
      ;
      FFWREC.XXXMODID = "994"; /* Module identification*/
      set FG0DM099.FG0DMSEL[FG0DWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(41); /* Only "S" is valid*/
      ;
    end
    ;
    FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM - 1; /* Decrement line number*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FG0DS99(); /* Exit to display map*/
  end
  ;
  ;
end // end FG0D994

// Process valid input request
Function FG0D995()
   /* ------------------------------------------------------------*/
   /* Save the selections in the working storage array.*/
   /* ------------------------------------------------------------*/
  ;
  move FG0DM099.FG0DMSEL to FG0DW00.FG0DMSEL[1] for all; /* Menu selections*/
  ;
   /* ------------------------------------------------------------*/
   /* If specify destination selected, indicate to subroutine to*/
   /* display output destination, but, do not submit any JCL.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DW00.FG0DMSEL[1] == "S") /* Specify destination selected*/
    TA6REC.TA6SUBSW = "N"; /* Indicate do not submit JCL*/
  end
  ;
  ;
end // end FG0D995

// Format the variable fields
Function FG0DS-02()
   /* *************************************/
   /* JOB statement*/
   /* *************************************/
  ;
  if (FG0DW02.TARTYPE == "J")
    FG0DW02.FG0DW-JOB = FG0DW00.FG0DWJOB; /* Job id*/
  end
  ;
   /* *************************************/
   /* EXEC statement*/
   /* *************************************/
  ;
  if (FG0DW02.TARTYPE == "E") /* ;/* Extract program proc*/
    ;
    if (FG0DW00.FG0DW-NEED-SHIP-SEL == "N") /* Need month*/
      FG0DW02.FG0DW-PROC-ID = "2"; /* Proc id*/
    else
      FG0DW02.FG0DW-PROC-ID = "4"; /* Proc id*/
    end
    FG0DW00.FG0DW-REPT-SEQ = FG0DW02.FG0DW-PROC-ID; /* extrt file seq*/
    ;
  end
  ;
  if (FG0DW02.TARTYPE == "X") /* ;/* Report program proc*/
    FG0DW02.FG0DW-PROC = FG0DW00.FG0DW-PROC; /* Proc id*/
  end
  ;
   /* *************************************/
   /* RUN statement*/
   /* *************************************/
  ;
  if (FG0DW02.TARTYPE == "A") /* Extract program*/
    if (FG0DW00.FG0DW-NEED-SHIP-SEL == "N") /* Need month*/
      FG0DW02.FG0DW-PRGM-ID = "2"; /* Program id*/
    else
      FG0DW02.FG0DW-PRGM-ID = "4"; /* Program id*/
    end
  end
  ;
  if (FG0DW02.TARTYPE == "B") /* ;/* Report program*/
    FG0DW02.FG0DW-PRGM = FG0DW00.FG0DW-PROC; /* Program*/
  end
  ;
   /* *************************************/
   /* Report file override*/
   /* *************************************/
  ;
  if (FG0DW02.TARTYPE == "1")
    FG0DW02.FG0DW-REPT-EXT = FG0DW00.FG0DW-REPT-EXT; /* report ext*/
  end
  ;
  if (FG0DW02.TARTYPE == "2")
    FG0DW02.FG0DW-REPT-SEQ = FG0DW00.FG0DW-REPT-SEQ; /* report seq*/
  end
  ;
  if (FG0DW02.TARTYPE == "3")
    FG0DW02.FG0DW-RPT-TYPE = FG0DW00.FG0DW-REPT-TYPE; /* report typ*/
  end
  ;
  if (FG0DW02.TARTYPE == "T")
    FG0DW02.FG0DW-REPT-TYPE = FG0DW00.FG0DW-REPT-TYPE; /* report typ*/
    FG0DW02.FG0DW-REPT-ID = FG0DW00.FG0DW-PROC; /* report id*/
  end
  ;
   /* *************************************/
   /* Report control card override*/
   /* *************************************/
  ;
  if (FG0DW02.TARTYPE == "R")
    FG0DW02.FG0DW-FORM = FG0DW00.FG0DW-FORM; /* forms code*/
    FG0DW02.FG0DW-CNTL-PRGM-ID = FG0DW00.FG0DW-CNTL-PRGM-ID; /* pgm id*/
  end
  ;
  if (FG0DW02.TARTYPE == "4") /* forms code*/
    FG0DW02.FG0DW-REPT-FORM = FG0DW00.FG0DW-FORM; /* forms code*/
  end
  ;
end // end FG0DS-02

// Format the variable fields
Function FG0DS-03()
   /* *************************************/
   /* JOB statement*/
   /* *************************************/
  ;
  if (FG0DW02.TARTYPE == "J")
    FG0DW02.FG0DW-JOB = FG0DW00.FG0DWJOB; /* Job id*/
  end
  ;
   /* *************************************/
   /* EXEC statement*/
   /* *************************************/
  ;
  if (FG0DW02.TARTYPE == "E") /* ;/* Extract program proc*/
    if (FG0DW00.FG0DW-NEED-SHIP-SEL == "N") /* Need month*/
      FG0DW02.FG0DW-PROC-ID = "1"; /* Proc id*/
    else
      FG0DW02.FG0DW-PROC-ID = "3"; /* Proc id*/
    end
    FG0DW00.FG0DW-REPT-SEQ = FG0DW02.FG0DW-PROC-ID; /* extrt file seq*/
  end
  ;
  if (FG0DW02.TARTYPE == "C") /* ;/* Category report prgm proc*/
    FG0DW02.FG0DW-PROC = FG0DW00.FG0DW-PROC1; /* Proc id*/
    FG0DW00.FG0DW-PROC = FG0DW00.FG0DW-PROC1;
  end
  ;
  if (FG0DW02.TARTYPE == "G") /* ;/* Stygrp report prgm proc*/
    FG0DW02.FG0DW-PROC = FG0DW00.FG0DW-PROC2; /* Proc id*/
    FG0DW00.FG0DW-PROC = FG0DW00.FG0DW-PROC2;
  end
  ;
  if (FG0DW02.TARTYPE == "S") /* ;/* Styclr report prgm proc*/
    FG0DW02.FG0DW-PROC = FG0DW00.FG0DW-PROC3; /* Proc id*/
    FG0DW00.FG0DW-PROC = FG0DW00.FG0DW-PROC3;
  end
  ;
   /* *************************************/
   /* Condition code override*/
   /* *************************************/
  ;
  if (FG0DW02.TARTYPE == "5") /* ;/* Category report condition*/
    FG0DW02.FG0DW-COND = FG0DW00.FG0DW-COND1; /* Condition code*/
  end
  ;
  if (FG0DW02.TARTYPE == "6") /* ;/* Stygrp report condition*/
    FG0DW02.FG0DW-COND = FG0DW00.FG0DW-COND2; /* Condition code*/
  end
  ;
  if (FG0DW02.TARTYPE == "7") /* ;/* Styclr report condition*/
    FG0DW02.FG0DW-COND = FG0DW00.FG0DW-COND3; /* Condition code*/
  end
  ;
   /* *************************************/
   /* RUN statement*/
   /* *************************************/
  ;
  if (FG0DW02.TARTYPE == "A") /* Extract program*/
    if (FG0DW00.FG0DW-NEED-SHIP-SEL == "N") /* Need month*/
      FG0DW02.FG0DW-PRGM-ID = "1"; /* Program id*/
    else
      FG0DW02.FG0DW-PRGM-ID = "3"; /* Program id*/
    end
  end
  ;
  if (FG0DW02.TARTYPE == "B") /* ;/* Category report program*/
    FG0DW02.FG0DW-PRGM = FG0DW00.FG0DW-PROC1; /* Program*/
  end
  ;
  if (FG0DW02.TARTYPE == "D") /* ;/* Style group report program*/
    FG0DW02.FG0DW-PRGM = FG0DW00.FG0DW-PROC2; /* Program*/
  end
  ;
  if (FG0DW02.TARTYPE == "F") /* ;/* Style color report program*/
    FG0DW02.FG0DW-PRGM = FG0DW00.FG0DW-PROC3; /* Program*/
  end
  ;
   /* *************************************/
   /* Report file override*/
   /* *************************************/
  ;
  if (FG0DW02.TARTYPE == "1")
    FG0DW02.FG0DW-REPT-EXT = FG0DW00.FG0DW-REPT-EXT; /* report ext*/
  end
  ;
  if (FG0DW02.TARTYPE == "2")
    FG0DW02.FG0DW-REPT-SEQ = FG0DW00.FG0DW-REPT-SEQ; /* report seq*/
  end
  ;
  if (FG0DW02.TARTYPE == "3")
    FG0DW02.FG0DW-RPT-TYPE = FG0DW00.FG0DW-REPT-TYPE; /* report type*/
  end
  ;
  if (FG0DW02.TARTYPE == "T")
    FG0DW02.FG0DW-REPT-TYPE = FG0DW00.FG0DW-REPT-TYPE; /* report type*/
    FG0DW02.FG0DW-REPT-ID = FG0DW00.FG0DW-PROC; /* report id*/
  end
  ;
   /* *******************************************/
   /* Report file control card override*/
   /* based on the current proc id to determine*/
   /* the appropriate forms code and prgm id.*/
   /* *******************************************/
  ;
  if (FG0DW02.TARTYPE == "R") /* report distribution*/
    if (FG0DW00.FG0DW-PROC == FG0DW00.FG0DW-PROC1) /* category*/
      FG0DW02.FG0DW-FORM = FG0DW00.FG0DW-FORM1; /* forms code*/
      FG0DW02.FG0DW-CNTL-PRGM-ID = FG0DW00.FG0DW-CNTL-PRGM-1; /* pgm id*/
    end
    ;
    if (FG0DW00.FG0DW-PROC == FG0DW00.FG0DW-PROC2) /* style group*/
      FG0DW02.FG0DW-FORM = FG0DW00.FG0DW-FORM2; /* forms code*/
      FG0DW02.FG0DW-CNTL-PRGM-ID = FG0DW00.FG0DW-CNTL-PRGM-2; /* pgm id*/
    end
    ;
    if (FG0DW00.FG0DW-PROC == FG0DW00.FG0DW-PROC3) /* style color*/
      FG0DW02.FG0DW-FORM = FG0DW00.FG0DW-FORM3; /* forms code*/
      FG0DW02.FG0DW-CNTL-PRGM-ID = FG0DW00.FG0DW-CNTL-PRGM-3; /* pgm id*/
    end
  end
  ;
  if (FG0DW02.TARTYPE == "4") /* report forms code*/
    if (FG0DW00.FG0DW-PROC == FG0DW00.FG0DW-PROC1) /* category*/
      FG0DW02.FG0DW-REPT-FORM = FG0DW00.FG0DW-FORM1;
    end
    ;
    if (FG0DW00.FG0DW-PROC == FG0DW00.FG0DW-PROC2) /* style group*/
      FG0DW02.FG0DW-REPT-FORM = FG0DW00.FG0DW-FORM2;
    end
    ;
    if (FG0DW00.FG0DW-PROC == FG0DW00.FG0DW-PROC3) /* style color*/
      FG0DW02.FG0DW-REPT-FORM = FG0DW00.FG0DW-FORM3;
    end
  end
end // end FG0DS-03

// Format variable JCL statements
Function FG0DS01()
   /* ------------------------------------------------------------*/
   /* Format the variable report distribution information.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DW01.TARTYPE == "R") /* Report distribution*/
    ;
    FG0DW01.FG0DWRFO = FG0DW00.FG0DWFOR; /* Form*/
    FG0DW01.FG0DWRPR = FG0DW00.FG0DWJOB; /* Program*/
    ;
    TA6REC.TARTYPE[TA6INDEX] = FG0DW01.TARTYPE; /* Type*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the variable JOB statement information in 3 and 4.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DW01.TARTYPE == "1") /* JOB statement*/
    FG0DW01.FG0DW1JO = FG0DW00.FG0DWJOB; /* Job cols 3 and 4*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the variable EXEC statement information.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DW01.TARTYPE == "2") /* EXEC statement*/
    FG0DW01.FG0DW2PR = FG0DW00.FG0DWJOB; /* Procedure*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the variable RUN statement information.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DW01.TARTYPE == "3") /* RUN statement*/
    FG0DW01.FG0DW3PR = FG0DW00.FG0DWJOB; /* Program*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the variable PRINTDS statement information.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DW01.TARTYPE == "4") /* PRINTDS statement*/
    FG0DW01.FG0DW4FI = FG0DW00.FG0DWJOB; /* File*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the variable JOB statement information in 6.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DW01.TARTYPE == "5") /* JOB statement*/
    FG0DW01.FG0DW5JO = FG0DW00.FG0DW5JO; /* Job col 6*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the variable DISP statement information.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DW01.TARTYPE == "6") /* DISP statement*/
    FG0DW01.FG0DW6DI = FG0DW00.FG0DW6DI; /* Disposition*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the bundle file information*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DW01.TARTYPE == "7") /* PRINTDS statement*/
    FG0DW01.FG0DWBFI = FG0DW00.FG0DWJOB; /* File*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the bundle form information.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0DW01.TARTYPE == "8") /* PRINTDS statement*/
    FG0DW01.FG0DWBFO = FG0DW00.FG0DWFOR; /* Form*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Move formatted statement to the submit subroutine array.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TARJCL[TA6INDEX] = FG0DW01.TARJCL; /* JCL statement*/
  ;
  ;
end // end FG0DS01

// Clear selections and exit
Function FG0DS99()
   /* ------------------------------------------------------------*/
   /* Reset any pending selections in working storage.*/
   /* ------------------------------------------------------------*/
  ;
  FG0DW00.FG0DWIXM = 1; /* Initialize map index*/
  ;
  while (FG0DW00.FG0DWIXM <= FG0DW00.FG0DWIXL) /* Until end of array*/
    ;
    if (FG0DW00.FG0DMSEL[FG0DWIXM] == "S") /* Entry is selected*/
      FG0DW00.FG0DMSEL[FG0DWIXM] = " "; /* Reset entry*/
    end
    ;
    FG0DW00.FG0DWIXM = FG0DW00.FG0DWIXM + 1; /* Increment index*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Exit to display the selection menu map.*/
   /* ------------------------------------------------------------*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0DS99

//*** RECORD=FG0DW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FG0DW00 type basicRecord
  10 FG0DWFOR FG0DWFOR ; 
  10 FG0DWJOB FG0DWJOB ; 
  10 FG0DW5JO FG0DW5JO ; 
  10 FG0DW6DI FG0DW6DI ; 
  10 FG0DMSEL FG0DMSEL [12] ; 
  10 FG0DWIXL FG0DWIXL ; 
  10 FG0DWIXM FG0DWIXM ; 
  10 FG0DWIX2 FG0DWIX2 ; 
  10 FG0DWIXT FG0DWIXT ; 
  10 FG0DWSWX FG0DWSWX ; 
  10 FG0DSNDT FG0DSNDT [8] ; 
    15 FG0DSNYY FG0DSNYY ; 
    15 FG0DSNMM FG0DSNMM ; 
  10 FG0DWDAT FG0DWDAT ; 
    15 FG0DWYY FG0DWYY ; 
    15 FG0DWMM FG0DWMM ; 
  10 FG0DBDAT FG0DBDAT ; 
    15 FG0DBYY FG0DBYY ; 
    15 FG0DBMM FG0DBMM ; 
  10 FG0DEDAT FG0DEDAT ; 
    15 FG0DEYY FG0DEYY ; 
    15 FG0DEMM FG0DEMM ; 
  10 FG0D1DAT FG0D1DAT ; 
    15 FG0D1CC FG0D1CC ; 
    15 FG0D1YM FG0D1YM ; 
      20 FG0D1YY FG0D1YY ; 
      20 FG0D1MM FG0D1MM ; 
  10 FG0D2DAT FG0D2DAT ; 
    15 FG0D2CC FG0D2CC ; 
    15 FG0D2YM FG0D2YM ; 
      20 FG0D2YY FG0D2YY ; 
      20 FG0D2MM FG0D2MM ; 
  10 FG0D3DAT FG0D3DAT ; 
    15 FG0D3CY FG0D3CY ; 
    15 FG0D3MM FG0D3MM ; 
  10 FG0DWNSS FG0DWNSS ; 
  10 FG0DWKMO FG0DWKMO ; 
  10 FG0DSNLN FG0DSNLN ; 
  10 FG0DWNMO FG0DWNMO ; 
  10 FG0DW-MON-COUNT FG0DW-MON-COUNT ; 
  10 FG0DW-NEED-SHIP-SEL FG0DW-NEED-SHIP-SEL ; 
  10 FG0DW-PROC FG0DW-PROC ; 
  10 FG0DW-PROC1 FG0DW-PROC1 ; 
  10 FG0DW-PROC2 FG0DW-PROC2 ; 
  10 FG0DW-PROC3 FG0DW-PROC3 ; 
  10 FG0DW-REPT-EXT FG0DW-REPT-EXT ; 
  10 FG0DW-REPT-SEQ FG0DW-REPT-SEQ ; 
  10 FG0DW-REPT-TYPE FG0DW-REPT-TYPE ; 
  10 FG0DW-COND1 FG0DW-COND1 ; 
  10 FG0DW-COND2 FG0DW-COND2 ; 
  10 FG0DW-COND3 FG0DW-COND3 ; 
  10 FG0DW-FORM FG0DW-FORM ; 
  10 FG0DW-FORM1 FG0DW-FORM1 ; 
  10 FG0DW-FORM2 FG0DW-FORM2 ; 
  10 FG0DW-FORM3 FG0DW-FORM3 ; 
  10 FG0DW-CNTL-PRGM-ID FG0DW-CNTL-PRGM-ID ; 
  10 FG0DW-CNTL-PRGM-1 FG0DW-CNTL-PRGM-1 ; 
  10 FG0DW-CNTL-PRGM-2 FG0DW-CNTL-PRGM-2 ; 
  10 FG0DW-CNTL-PRGM-3 FG0DW-CNTL-PRGM-3 ; 
end // end FG0DW00

//*** RECORD=FG0DW01 ****
// ------------------------------------------------------------
// Job and form identification variables in the JCL statements.
// ------------------------------------------------------------
// ***********************
Record FG0DW01 type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(4) ; 
    10 FG0DW1JO FG0DW1JO ; 
      15 FG0DWRFO FG0DWRFO ; 
      15 * char(1) ; 
      15 FG0DW5JO FG0DW5JO ; 
    10 * char(1) ; 
    10 FG0DWRPR FG0DWRPR ; 
    10 * char(2) ; 
    10 FG0DW3PR FG0DW3PR ; 
    10 FG0DW2PR FG0DW2PR ; 
      15 * char(1) ; 
      15 FG0DWBFO FG0DWBFO ; 
    10 FG0DW6DI FG0DW6DI ; 
      15 * char(2) ; 
      15 FG0DWBFI FG0DWBFI ; 
      15 * char(1) ; 
    10 * char(2) ; 
    10 FG0DW4FI FG0DW4FI ; 
    10 * char(49) ; 
  5 TARTYPE TARTYPE ; 
end // end FG0DW01

//*** RECORD=FG0DW02 ****
// ------------------------------------------------------------
// Job and form identification variables in the JCL statements.
// ------------------------------------------------------------
// ***********************
Record FG0DW02 type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(4) ; 
    10 FG0DW-JOB FG0DW-JOB ; 
      15 FG0DW-FORM FG0DW-FORM ; 
      15 * char(2) ; 
    10 * char(6) ; 
      15 * char(1) ; 
      15 FG0DW-CNTL-PRGM-ID FG0DW-CNTL-PRGM-ID ; 
      15 * char(2) ; 
    10 FG0DW-PRGM FG0DW-PRGM ; 
      15 * char(2) ; 
      15 FG0DW-PRGM-ID FG0DW-PRGM-ID ; 
    10 FG0DW-PROC FG0DW-PROC ; 
      15 * char(2) ; 
      15 FG0DW-PROC-ID FG0DW-PROC-ID ; 
    10 * char(1) ; 
    10 FG0DW-REPT-EXT FG0DW-REPT-EXT ; 
      15 FG0DW-RPT-TYPE FG0DW-RPT-TYPE ; 
        20 FG0DW-COND FG0DW-COND ; 
        20 * char(1) ; 
        20 FG0DW-REPT-FORM char(2) ; // Report forms code
          25 * char(1) ; 
          25 FG0DW-REPT-SEQ FG0DW-REPT-SEQ ; 
      15 * char(1) ; 
    10 * char(6) ; 
      15 * char(1) ; 
      15 FG0DW-REPT-ID FG0DW-REPT-ID ; 
      15 * char(2) ; 
    10 FG0DW-REPT-TYPE FG0DW-REPT-TYPE ; 
    10 * char(44) ; 
  5 TARTYPE TARTYPE ; 
end // end FG0DW02

//*** RECORD=FG0DW20 ****
// ------------------------------------------------------------
// Parameters for FF3201 - Monthly Forecast By Line/Type
//                FF3301 - Monthly Forecast By Line/Category
//                FF3401 - Monthly Forecast By Style Group
//                FF3501 - Monthly Forecast By Style/Color.
// ------------------------------------------------------------
// ***********************
Record FG0DW20 type basicRecord
  5 TARJCL TARJCL ; 
    10 FG0DW-BEG-MO FG0DW-BEG-MO ; 
    10 FG0DW-END-MO FG0DW-END-MO ; 
    10 YPGCD YPGCD ; 
    10 XPLCD XPLCD ; 
    10 FG0DW-SEAS-END-MO FG0DW-SEAS-END-MO [4] ; 
    10 FG0DW-NEED-SHIP-SEL FG0DW-NEED-SHIP-SEL ; 
    10 FG0DW-XQA-CD1 FG0DW-XQA-CD1 ; 
    10 FG0DW-XQA-CD2 FG0DW-XQA-CD2 ; 
    10 FG0DW-XLC-CD1 FG0DW-XLC-CD1 ; 
    10 FG0DW-XLC-CD2 FG0DW-XLC-CD2 ; 
    10 FG0DW-3YR-2YR-RPT FG0DW-3YR-2YR-RPT ; 
    10 FG0DW-USER-ID FG0DW-USER-ID ; 
    10 * char(22) ; 
end // end FG0DW20

//*** RECORD=FG0DW21 ****
// ------------------------------------------------------------
// Parameters for FF3201 - Monthly Forecast By Line/Type
//                FF3301 - Monthly Forecast By Line/Category
//                FF3401 - Monthly Forecast By Style Group
//                FF3501 - Monthly Forecast By Style/Color.
// ------------------------------------------------------------
// ***********************
Record FG0DW21 type basicRecord
  5 TARJCL TARJCL ; 
    10 FG0DW-BEG-MO FG0DW-BEG-MO ; 
    10 FG0DW-END-MO FG0DW-END-MO ; 
    10 YPGCD YPGCD ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 FG0DW-SEAS-END-MO FG0DW-SEAS-END-MO [4] ; 
    10 XPRCD XPRCD [5] ; 
    10 FG0DW-NEED-SHIP-SEL FG0DW-NEED-SHIP-SEL ; 
    10 FG0DW-COMB-TYPE-CD FG0DW-COMB-TYPE-CD ; 
    10 FG0DW-SLS-FCST-MIN-CHAR FG0DW-SLS-FCST-MIN-CHAR ; 
    10 FG0DW-SLS-FCST-MIN-NUM FG0DW-SLS-FCST-MIN-NUM ; 
    10 FG0DW-3YR-2YR-RPT FG0DW-3YR-2YR-RPT ; 
    10 FG0DW-USER-ID FG0DW-USER-ID ; 
    10 * char(3) ; 
end // end FG0DW21

//      work century
DataItem FG0D1CC num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date work area 1
DataItem FG0D1DAT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//      work mm
DataItem FG0D1MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//      work yymm
DataItem FG0D1YM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//      work yy
DataItem FG0D1YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//      work century
DataItem FG0D2CC num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date work area 2
DataItem FG0D2DAT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//      work mm
DataItem FG0D2MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//      work yymm
DataItem FG0D2YM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//      work yy
DataItem FG0D2YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//      work century
DataItem FG0D3CY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date work area 2
DataItem FG0D3DAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//      work mm
DataItem FG0D3MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin date work area
DataItem FG0DBDAT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   begin month work area
DataItem FG0DBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   begin year work area
DataItem FG0DBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ending date work area
DataItem FG0DEDAT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   ending month work area
DataItem FG0DEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   ending year work area
DataItem FG0DEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Menu selection field
DataItem FG0DMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season end dates
DataItem FG0DSNDT char(4)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

// save length of season
DataItem FG0DSNLN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season end month
DataItem FG0DSNMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//  season end year
DataItem FG0DSNYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 2 yr/3 yr report
DataItem FG0DW-3YR-2YR-RPT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning month field
DataItem FG0DW-BEG-MO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Control card program id - cat
DataItem FG0DW-CNTL-PRGM-1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Control card program id - grp
DataItem FG0DW-CNTL-PRGM-2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Control card program id - clr
DataItem FG0DW-CNTL-PRGM-3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Control card program id
DataItem FG0DW-CNTL-PRGM-ID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Combine type code indicator
DataItem FG0DW-COMB-TYPE-CD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Condition code
DataItem FG0DW-COND num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Category process condition cd
DataItem FG0DW-COND1 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Stygrp process condition cd
DataItem FG0DW-COND2 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Styclr process condition cd
DataItem FG0DW-COND3 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending month field
DataItem FG0DW-END-MO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Forms  code
DataItem FG0DW-FORM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Forms  code - cat
DataItem FG0DW-FORM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Forms  code - stygrp
DataItem FG0DW-FORM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Forms  code - styclr
DataItem FG0DW-FORM3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JOB job identification
DataItem FG0DW-JOB char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// mounth count
DataItem FG0DW-MON-COUNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Need/ship month selection
DataItem FG0DW-NEED-SHIP-SEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Program identification
DataItem FG0DW-PRGM char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Extract program id
DataItem FG0DW-PRGM-ID char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Proc identification
DataItem FG0DW-PROC-ID char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end
// Proc identification
DataItem FG0DW-PROC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Proc identification
DataItem FG0DW-PROC1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Proc identification
DataItem FG0DW-PROC2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Proc identification
DataItem FG0DW-PROC3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Report extension
DataItem FG0DW-REPT-EXT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Report id
DataItem FG0DW-REPT-ID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Report sequence number
DataItem FG0DW-REPT-SEQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Report type
DataItem FG0DW-REPT-TYPE char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Report type
DataItem FG0DW-RPT-TYPE char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Season end month
DataItem FG0DW-SEAS-END-MO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Sales forecast minimum
DataItem FG0DW-SLS-FCST-MIN-CHAR char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sales forecast minimum
DataItem FG0DW-SLS-FCST-MIN-NUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// user id
DataItem FG0DW-USER-ID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Life cycle code 1
DataItem FG0DW-XLC-CD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Life cycle code 2
DataItem FG0DW-XLC-CD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Quality code 1
DataItem FG0DW-XQA-CD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Quality code 2
DataItem FG0DW-XQA-CD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JOB job identification (3,4)
DataItem FG0DW1JO char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// EXEC procedure identification
DataItem FG0DW2PR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RUN program identification
DataItem FG0DW3PR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PRINTDS file identification
DataItem FG0DW4FI char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JOB job identification (6)
DataItem FG0DW5JO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DISP data set disposition
DataItem FG0DW6DI char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Bundle file id
DataItem FG0DWBFI char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Bundle form id
DataItem FG0DWBFO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Date work area
DataItem FG0DWDAT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Forms code
DataItem FG0DWFOR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Secondary index for map fields
DataItem FG0DWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Limit for map fields index
DataItem FG0DWIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FG0DWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for table fields
DataItem FG0DWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Job identification
DataItem FG0DWJOB char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work month for addition
DataItem FG0DWKMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Month work area
DataItem FG0DWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total number of months
DataItem FG0DWNMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total number of seasons
DataItem FG0DWNSS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Report distribution form
DataItem FG0DWRFO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Report distribution program
DataItem FG0DWRPR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Exit requested switch
DataItem FG0DWSWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Year work area
DataItem FG0DWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

