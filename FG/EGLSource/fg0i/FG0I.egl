package fg0i;

import corpcom1.CACHGFL;
import corpcom2.XPCREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFF001;
import corpcom3.XPXPC01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS-FF5500;
import corpcom4.XSFFS-FF5520;
import corpcom4.XSFFS-FF5570;
import corpcom4.XSFFS01;
import corpcom4.XSFFS10;
import corpcom4.XSFFS11;
import corpcom4.XSFFS35;
import corpcom4.XSFFS50;
import corpcom4.XSFFS53;
import corpcom4.XSFFS54;
import corpcom4.XSFFS58;
import corpcom4.XSFFS61;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XPCTBL;
import corpy2.YPGTBL;
import corpz3.ZZZCHGCT;
import ff.common.*;
import fh.common.FH1REC;
import fh.common.FH2REC;
import fh.common.FH3REC;
import fh.common.FH5REC;
import fh.common.FH6REC;
import pg.common.PG7REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=FG0I ****
// This application allows a user to create or inquire on a
// long range sales forecast by product style group.  If this
// application is invoked from a menu, the user may only create
// a new forecast.  If this application is invoked by selecting
// from a list of existing forecasts, the user may inquire on
// the existing forecast and modify it to create a new forecast
// 
// There are two different screens that may be displayed.
// 
// The first screen displayed to the user shows the forecast
// identification and each product style group in the forecast
// along with the current forecast quantities compared to
// either the historical sales quantities or the historical
// demand quantities for the product style group.  Ihe user
// specifies whether the comparison is to be against sales or
// demand and the number of years to be used for the comparison
// The current forecast quantities may be adjusted by the user
// either by quantity of by percentage.  The user may scroll
// forward or backward to view all the product style groups in
// the forecast.  The forecast may be saved for later viewing
// by pressing the appropriate attention key.  If a style group
// is selected that product style group is passed to another
// application, FG0J, Long Range Sales Forecast by Style/Color
// to display the forecast for the product styles in the
// style group.
// 
// The second screen is displayed when the appropriate
// attention key is pressed on the first screen.  It shows the
// forecast identification and each product style group in the
// forecast, along with historical sales quantities compared
// to the historical demand quantities.  The user may scroll
// forward and backward to view all the product style groups.
// The user may request the first screen be displayed by
// pressing the appropriate attention key.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from either of the screens.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          12/01/89  rgilli  New application.
// TA06/20  06/20/90  SPOPA   Set FFFFUNCD before FF5530 call.
// Fix      07/10/90  JJUCH   Improved the response time.
// FF1017   07/11/90  JJUCH   Added PF19 key.
// TA07/13  07/17/90  JJUCH   Fixed reading empty tsq pge error
// Fix      07/30/90  JJUCH   Fixed missing style development
//                            problem.
// FF1016   07/31/90  JJUCH   Disallowed to fcst current main
//                            buy month and all prior months.
// FF#134   08/21/90  SFORD   Set job completed msg = 'y'
// Fix      08/30/90  JJUCH   Fixed -911 clear FFWREC problem.
// FF1037   09/25/90  Rhetri  Send history IO mod current date.
// Fix      10/04/90  JJUCH   Fixed history qty problem.
// Fix      10/08/90  JJUCH   Changed selection criteria for
//                            history to match L.R. reports.
// Fix      10/15/90  JJUCH   Included pre-alloc, alloc qtys
//                            into historical demand qty.
// FF1027   10/22/90  MDANG   Change PF16 explode function.
//                            Allow selection of only certain
//                            style groups for explosion.
// Fix      01/30/91  JJUCH   Correct the sty dev flag value in
//                            VWSGRP01 and VWGMTH01 tables.
// FF1071   02/22/91  JJUCH   Modified the calculation for DMD.
// Fix      03/15/91  JJUCH   Correct the category historical
//                            demand total.
// Fix      03/27/91  JJUCH   Stop reporting sales qty in the
//                            actual closeout month.
// Fix      04/23/91  JJUCH   Fixed cat historical tot didn't
//                            match the tot of stygrps problem.
// FF301    05/18/92  JJUCH   Remove proj clsout mo restriction
// FF1101   07/17/92  LDELUH  Fix "no more pgs" bug (FG0I110)
//                            when PF8.
// FF382    03/12/93  KGRAHA  change to accomodate VWDGRP01
//                            table
// FF394    03/23/93  JJUCH   Change to send report to BUNDLE.
// FF399    04/26/93  JJUCH   Correct the problem of calculat-
//                            ing the fcst dmd in current month
//                            Need to use contmp month.
//          09/08/93  JJUCH   Convert to CSP V4.1 version.
// FH140    02/10/94  JJUCH   Change to get actual prop and
//                            authorized future seperately and
//                            add them together to get hist dmd
// FF409    05/05/94  MWALKE  - Switch to demand based sales.
//                            - Delete print option.
// FF469    10/25/95  DPACK   Remove pf16 and pf17 as valid key
//                            presses from FG0I130
// FF175    12/05/96  DSMITH  Changed date range fill character
//                            to '0' and FG0I-1132 to increment
//                            century if year = '00'.
// FF-FIX   09/24/99  RKUDPI  Regenerated the application to
//                            fix problem with date display
//                            (screen was displaying a range of
//                            0002-0101 as 2000-1010 ??)
// *********************
Program FG0I type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF3REC FF3REC; // record
  FF7REC FF7REC; // record
  FF8REC FF8REC; // record
  FF9REC FF9REC; // record
  FFCREC FFCREC; // record
  FFDREC FFDREC; // record
  FFEREC FFEREC; // record
  FFFREC FFFREC; // record
  FFGREC FFGREC; // record
  FFIREC FFIREC; // record
  FFJREC FFJREC; // record
  FFKREC FFKREC; // record
  FFLREC FFLREC; // record
  FFMREC FFMREC; // record
  FFVREC FFVREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFYREC FFYREC; // record
  FFZREC FFZREC; // record
  FG0IW00 FG0IW00; // record
  FG0IW01 FG0IW01; // record
  FG0IW02 FG0IW02; // record
  FG0IW03 FG0IW03; // record
  FG0IW04 FG0IW04; // record
  FH1REC FH1REC; // record
  FH2REC FH2REC; // record
  FH3REC FH3REC; // record
  FH5REC FH5REC; // record
  FH6REC FH6REC; // record
  PG7REC PG7REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPCTBL; // table
  use YPGTBL; // table
  use FG0IM.FG0IM001,  // forms
      FG0IM.FG0IM002,
      FG0IM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FFFREC empty; /* Special function parameters*/
    set FG0IM001 initial; /* M001 input/output*/
    set FG0IM002 initial; /* M002 input/output*/
    set FG0IW00 empty; /* Working storage*/
    set FG0IW01 empty; /* M001 display storage*/
    set FG0IW02 empty; /* M001 temporary storage*/
    set FG0IW03 empty; /* M001 totals display storage*/
    set FG0IW04 empty; /* M002 temporary storage*/
    set PG7REC empty; /* VMXPRC01 tbl storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine work area*/
    set TA5REC empty; /* temporary storage area*/
    set TA6REC empty; /* jcl submit work area*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FG0IW00.XXXTSLEN = 3222; /* temp storage length*/
    FG0IW00.XXXTSPAG = 1; /* default page no*/

    XPCREC.XGPCD = COMMAREA.XGPCD; /* init category gpcd key*/

    FG0IW00.FG0IWPRC = 99999.99;
    FG0IW00.FG0IWPS1 = 99999.99;
    FG0IW00.FG0IWPS2 = 99999.99;
    FG0IW00.FG0IWPS3 = 99999.99;
    FG0IW00.FG0IWPD1 = 99999.99;
    FG0IW00.FG0IWPD2 = 99999.99;
    FG0IW00.FG0IWPD3 = 99999.99;

    FG0IW00.FG0IWSWR = "N"; /* Request for data switch*/
    FG0IW00.FG0IWSWF = "Y"; /* format screen data switch*/
    FG0IW00.FG0IWSWD = "1"; /* map switch*/
    FG0IW00.FG0IW1ST = "Y"; /* 1st time thru flag*/
    FG0IW00.FG0IWFCL = "N"; /* last forecast record*/
    FG0IW00.FG0IWS1L = "N"; /* last sales record*/
    FG0IW00.FG0IWS2L = "N"; /* last sales record*/
    FG0IW00.FG0IWS3L = "N"; /* last sales record*/
    FG0IW00.FG0IWD1L = "N"; /* last demand record*/
    FG0IW00.FG0IWD2L = "N"; /* last demand record*/
    FG0IW00.FG0IWD3L = "N"; /* last demand record*/

    if (FG0IW01.FG0IWYOP != 1
     && FG0IW01.FG0IWYOP != 2
     && FG0IW01.FG0IWYOP != 3)
      FG0IW01.FG0IWYOP = 1; /* default value year option*/
    end

    if (FG0IW01.FG0IWHOP == " ")
      FG0IW01.FG0IWHOP = "S"; /* default value history option*/
    end

    FG0IW00.FG0IWYDS[1] = "1 YEAR AGO"; /* year 1 desc*/
    FG0IW00.FG0IWYDS[2] = "2 YEAR AGO"; /* year 2 desc*/
    FG0IW00.FG0IWYDS[3] = "3 YEAR AGO"; /* year 3 desc*/

    FG0IW00.FG0IWHDS[1] = "HIST NEED MO SALES";
    FG0IW00.FG0IWHDS[2] = "HISTORICAL DEMAND ";

     /* ---------------------------------------------------*/
     /* Clear unused fields*/
     /* ---------------------------------------------------*/

    FFWREC.SYBSTGNB = " "; /* Clear style group number*/
    FFWREC.SYBSTGNM = " "; /* Clear style group name*/
    FFWREC.SY1STNBR = " "; /* Clear style number*/
    FFWREC.SY2CLRID = " "; /* Clear color id*/
    FFWREC.XDMCD = " "; /* Clear dimension code*/
    FFWREC.SY1SSTNM = " "; /* Clear short style name*/
    FFWREC.SY2CLRAB = " "; /* Clear color abrv*/
    FFWREC.XDMABRV = " "; /* Clear dimension abrv*/
    FFWREC.ZRGCD = " "; /* Clear region code*/
    FFWREC.ZRGABRV = " "; /* Clear region abrv*/
    FFWREC.XCTCD = " "; /* Clear country code*/
    FFWREC.XCTABRV = " "; /* Clear country abrv*/

     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/

    if (FFWREC.YPGCD == " ")
      FFWREC.YPGCD = "01";
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end

    if (FFWREC.FFABEGMO != 0
     && FFWREC.FFAENDMO != 0
     && FFWREC.XPCCD != " ")
      FG0IW00.FG0IWSWR = "Y"; /* set data request flag*/
    end

    if (FFWREC.FFEWSNBR != 0)
      FG0IW00.FG0IWSWR = "Y"; /* set data request flag*/
      FG0IW00.FG0IWFCF = "Y"; /* forecast exists flag*/
    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FG0I001; /* Converse the main process*/

    FG0I001: FG0I001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FG0I001; /* Converse the main process*/

  end // end main
end // end FG0I

// Fetch dfcast.vwdgrp01 row
Function FG0I-1111()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vwdgrp01 table row*/
   /* ------------------------------------------------------------*/

  set FFEREC empty; /* Clear row storage area*/

  FFEREC.FFEWSNBR = FFWREC.FFEWSNBR;

  try
    call "IO3850" ("S ", SQLCA, FFEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "111"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWDGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFEREC.FFEKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0I-1111

// Fetch dfcast.vwline01 row
Function FG0I-1112()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vwline01 table row*/
   /* ------------------------------------------------------------*/

  set FFGREC empty; /* Clear row storage area*/

  FFGREC.FFEWSNBR = FFWREC.FFEWSNBR; /* wrk sheet nbr*/
  FFGREC.XPLCD = FFWREC.XPLCD; /* product line code*/

  try
    call "IO3890" ("S ", SQLCA, FFGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "111"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VWLINE01 TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFGREC.FFGKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0I-1112

// Fetch dfcast.vwltyp01 row
Function FG0I-1113()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vwltyp01 table.*/
   /* ------------------------------------------------------------*/

  set FFIREC empty; /* Clear row storage area*/

  FFIREC.FFEWSNBR = FFWREC.FFEWSNBR;
  FFIREC.XPLCD = FFWREC.XPLCD;
  FFIREC.YPGCD = FFWREC.YPGCD;

   /* ------------------------------------------------------------*/
   /* Select dfcast.vwltyp01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3910" ("S ", SQLCA, FFIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "111"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VWLTYP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFIREC.FFIKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0I-1113

// Fetch dfcast.vwcat001 row
Function FG0I-1114()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vwcat001 table.*/
   /* ------------------------------------------------------------*/

  set FFJREC empty; /* Clear row storage area*/

  FFJREC.FFEWSNBR = FFWREC.FFEWSNBR;
  FFJREC.YPGCD = FFWREC.YPGCD;
  FFJREC.XPCCD = FFWREC.XPCCD;

   /* ------------------------------------------------------------*/
   /* Select dfcast.vwcat001*/
   /* ------------------------------------------------------------*/

  try
    call "IO3840" ("S ", SQLCA, FFJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "111"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VWCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFJREC.FFJKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0I-1114

// Fetch dfcast.vffctl01 row
Function FG0I-1131()
   /* ------------------------------------------------------------*/
   /* Obtain invoice cutoff and futures cutoff date from*/
   /* dfcast.vffctl01.*/
   /* ------------------------------------------------------------*/

  set FF1REC empty; /* Clear row storage area*/

  FF1REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FF1REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* Indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "113"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VFFCTL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF1REC.FF1GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0I-1131

// Calc curr, caov, & buy mos
Function FG0I-1132()
   /* ------------------------------------------------------------*/
   /* Calculate:*/
   /* - current date*/
   /* - current date minus one month*/
   /* - current date minus two months*/
   /* - current date minus three months*/
   /* - current date minus four months*/
   /* - main buy month*/
   /* ------------------------------------------------------------*/

  if (FF1REC.FF1IVCDT != 0) /* invoice cutoff date*/
    FG0IW00.FG0IW-CCYYMMDD = FF1REC.FF1IVCDT;

    if (XX0XW01.XX0XWDAT > FF1REC.FF1IVCDT) /* curr mo > inv cutoff mo*/
      FG0IW00.FG0IW-CURR-MO = FG0IW00.FG0IW-CCYYMM;
    else

      if (FG0IW00.FG0IW-MM == 1)
        FG0IW00.FG0IW-MM = 12;
        FG0IW00.FG0IW-CCYY = FG0IW00.FG0IW-CCYY - 1;
        FG0IW00.FG0IW-CURR-MO = FG0IW00.FG0IW-CCYYMM;
      else

        FG0IW00.FG0IW-MM = FG0IW00.FG0IW-MM - 1;
        FG0IW00.FG0IW-CURR-MO = FG0IW00.FG0IW-CCYYMM;
      end
    end
  else
    FG0IW00.FG0IW-CURR-MO = 0;
  end

   /* ------------------------------------------------------------*/
   /* Calculate current month minus 1 month*/
   /* Calculate current month minus 2 months*/
   /* Calculate current month minus 3 months*/
   /* Calculate current month minus 4 months*/
   /* ------------------------------------------------------------*/

  FG0IW00.FG0IWWDT = FG0IW00.FG0IW-CURR-MO;

  if (FG0IW00.FG0IWWMM == 01)
    FG0IW00.FG0IWWMM = 12;
    if (FG0IW00.FG0IWWYY == 00)
      FG0IW00.FG0IWWCC = FG0IW00.FG0IWWCC - 1;
      FG0IW00.FG0IWWYY = 99;
    else
      FG0IW00.FG0IWWYY = FG0IW00.FG0IWWYY - 1;
    end
  else
    FG0IW00.FG0IWWMM = FG0IW00.FG0IWWMM - 1;
  end

  FG0IW00.FG0IW-CURR-MO-MINUS1 = FG0IW00.FG0IWWDT;


  if (FG0IW00.FG0IWWMM == 1)
    FG0IW00.FG0IWWMM = 12;
    if (FG0IW00.FG0IWWYY == 00)
      FG0IW00.FG0IWWYY = 99;
      FG0IW00.FG0IWWCC = FG0IW00.FG0IWWCC - 1;
    else
      FG0IW00.FG0IWWYY = FG0IW00.FG0IWWYY - 1;
    end
  else
    FG0IW00.FG0IWWMM = FG0IW00.FG0IWWMM - 1;
  end

  FG0IW00.FG0IW-CURR-MO-MINUS2 = FG0IW00.FG0IWWDT;


  if (FG0IW00.FG0IWWMM == 1)
    FG0IW00.FG0IWWMM = 12;
    if (FG0IW00.FG0IWWYY == 00)
      FG0IW00.FG0IWWYY = 99;
      FG0IW00.FG0IWWCC = FG0IW00.FG0IWWCC - 1;
    else
      FG0IW00.FG0IWWYY = FG0IW00.FG0IWWYY - 1;
    end
  else
    FG0IW00.FG0IWWMM = FG0IW00.FG0IWWMM - 1;
  end

  FG0IW00.FG0IW-CURR-MO-MINUS3 = FG0IW00.FG0IWWDT;


  if (FG0IW00.FG0IWWMM == 1)
    FG0IW00.FG0IWWMM = 12;
    if (FG0IW00.FG0IWWYY == 00)
      FG0IW00.FG0IWWYY = 99;
      FG0IW00.FG0IWWCC = FG0IW00.FG0IWWCC - 1;
    else
      FG0IW00.FG0IWWYY = FG0IW00.FG0IWWYY - 1;
    end
  else
    FG0IW00.FG0IWWMM = FG0IW00.FG0IWWMM - 1;
  end

  FG0IW00.FG0IW-CURR-MO-MINUS4 = FG0IW00.FG0IWWDT;

   /* ------------------------------------------------------------*/
   /* Calculate the main buy month*/
   /* ------------------------------------------------------------*/

  FG0IW00.FG0IWBWM = FG0IW00.FG0IWBWM + 5;

  if (FG0IW00.FG0IWBWM > 12)
    FG0IW00.FG0IWBWM = FG0IW00.FG0IWBWM - 12;
    FG0IW00.FG0IWBWY = FG0IW00.FG0IWBWY + 1;
    if (FG0IW00.FG0IWBWY == 00)
      FG0IW00.FG0IWBWC = FG0IW00.FG0IWBWC + 1;
    end
  end


end // end FG0I-1132

// Proc all active products
Function FG0I-1151()
   /* ------------------------------------------------------------*/
   /* Select all active style groups for the requested product*/
   /* category, product type and forecast range from*/
   /* dprodg.vmxprc01 table.*/
   /* ------------------------------------------------------------*/

  set FG0IW02 empty; /* Clear tsq storage area*/

  FG0IW00.FG0IWIDX = 1; /* init index*/
  FG0IW00.FG0IWSGF = "N"; /* init vwsgrp01 data flag*/

  FFFREC.FFFBEGMO = FFWREC.FFABEGMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFWREC.FFAENDMO; /* Ending month*/

  PG7REC.SYBSTGNB = FG0IW00.FG0IWSNB; /* previous style group*/
  PG7REC.PG7MAXPR = FG0IW00.FG0IWPRC; /* previous price*/

  FG0IS-100(); /* select set on dprodg.vmxprc01*/

  FG0IS-200(); /* fetch first dprodg.vmxprc01 row*/

  while (SQLCA.VAGen_SQLCODE == 0 /* process unitl end of dprodg.vmxprc01*/
   && FG0IW00.FG0IWIDX <= 11) /* or end of page*/

    if (PG7REC.PG7MAXCM != FFWREC.FFABEGMO) /* and exclude closeout month*/
      FG0IW02.FG0IWSNB[FG0IWIDX] = PG7REC.SYBSTGNB;
      FG0IW02.FG0IWSNM[FG0IWIDX] = PG7REC.SYBSTGNM;
      FG0IW02.FG0IWPRC[FG0IWIDX] = PG7REC.PG7MAXPR;

      FF3REC.SYBSTGNB = PG7REC.SYBSTGNB;
      FG0IS67(); /* Obtain sty dev flag*/
      FG0IW02.FG0IWDEV[FG0IWIDX] = FF3REC.FF8DEVFL;

      /* ------------------------------------------------------------*/
      /* Select/summarize dfcast.vmsgrp01 to get master qty,*/
      /* If no data exists default the master qty to zero.*/
      /* ------------------------------------------------------------*/

      FFFREC.FFFBEGMO = FFWREC.FFABEGMO; /* requested begin range*/
      FFFREC.FFFENDMO = FFWREC.FFAENDMO; /* requested end range*/
      FFLREC.SYBSTGNB = PG7REC.SYBSTGNB;

      FG0I-11511(); /* select/sum dfcast.vmsgrp01*/

      if (SQLCA.VAGen_SQLCODE == 0)
        FG0IW02.FG0IWUMQ[FG0IWIDX] = FF8REC.FF6SLFCT;
      end

      /* ------------------------------------------------------------*/
      /* Translate current sales master qty into thousands*/
      /* ------------------------------------------------------------*/

      FFXREC.FFXNUMB = FG0IW02.FG0IWUMQ[FG0IWIDX];
      XSFFS10();
      FG0IW02.FG0IWMQT[FG0IWIDX] = FFXREC.FFXCHAR;

      /* ------------------------------------------------------------*/
      /* If the work sheet number was passed*/
      /* Obtain the forecast quantities from dfcast.vwsgrp01*/
      /* If not found, default forecast quantities to zero.*/
      /* ------------------------------------------------------------*/

      if (FFWREC.FFEWSNBR != 0)
        FG0IS03(); /* select dfcast.vwsgrp01*/

        if (SQLCA.VAGen_SQLCODE == 0)
          FG0IW01.FG0IWCDT = FFLREC.ZZZSDT; /* w/s date*/
          if (FFLREC.FFGYRIND > " ")
            FG0IW01.FG0IWYOP = FFLREC.FFGYRIND; /* year option*/
          end
          if (FFLREC.FFGSDIND > " ")
            FG0IW01.FG0IWHOP = FFLREC.FFGSDIND; /* hist option*/
          end
          FG0IW02.FG0IWSQT[FG0IWIDX] = FFLREC.FF6SLFCT;
          FG0IW02.FG0IWUQT[FG0IWIDX] = FFLREC.FF6SLFCT;
          FG0IW02.FG0IWSCL[FG0IWIDX] = FFLREC.FFECLRFL;
          FFXREC.FFXNUMB = FG0IW02.FG0IWUQT[FG0IWIDX];
          XSFFS10();
          FG0IW02.FG0IWFQT[FG0IWIDX] = FFXREC.FFXCHAR;
          FG0IW00.FG0IWSGF = "Y"; /* vwsgrp01 data found*/
        end
      end

      if (FG0IW02.FG0IWSCL[FG0IWIDX] == " ")
        FG0IW02.FG0IWSCL[FG0IWIDX] = "N";
      end

      FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX + 1;

    end
    FG0IS-200(); /* fetch next dprodg.vmxprc01*/
  end

  if (SQLCA.VAGen_SQLCODE == +100) /* Last record*/
    FG0IW00.FG0IWFCL = "Y"; /* Forecast last record*/
  end

  if (FG0IW00.FG0IWIDX > 1)
    FG0IW00.FG0IWPIX = FG0IW00.FG0IWIDX - 1;
    FG0IW00.FG0IWSNB = FG0IW02.FG0IWSNB[FG0IWPIX];
    FG0IW00.FG0IWPRC = FG0IW02.FG0IWPRC[FG0IWPIX];
  end

  FG0IS-300(); /* close dprodg.vmxprc01 set*/


   /* ------------------------------------------------------------*/
   /* Obtain the master qty total and forecast qty total for the*/
   /* whole category from dfcast.vmcat001 and dfcast.vwcat001*/
   /* table respectively.*/
   /* ------------------------------------------------------------*/

  FG0I-11513(); /* Select dfcast.vmcat001 row*/

  FG0IW03.FG0IWUMQ = FF7REC.FF6SLFCT; /* Category master qty*/

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.FG0IWIDX > 1 /* Page was formatted*/
   && FG0IW00.FG0IWFPG == 0) /* First time*/

    FG0IW02.FG0IWNLD = FG0IW00.FG0IWIDX - 1;
    FG0IW02.FG0IWTIX = FG0IW02.FG0IWNLD + 1; /* total index*/

    FG0IS08(); /* Add page to temp storage*/
    FG0IW00.FG0IWFPG = FG0IW00.TA5TSQIX;

  else
    if (FG0IW00.FG0IWIDX > 1) /* Page was formatted*/
      if (FG0IW00.FG0IWFPG < FG0IW00.FG0IWHS1 /* tot pg for yr 1-- sls*/
       || FG0IW00.FG0IWFPG < FG0IW00.FG0IWHS2 /* tot pg for yr 2--sls*/
       || FG0IW00.FG0IWFPG < FG0IW00.FG0IWHS3 /* tot pg for yr 3--sls*/
       || FG0IW00.FG0IWFPG < FG0IW00.FG0IWHD1 /* tot pg for yr 1--dmd*/
       || FG0IW00.FG0IWFPG < FG0IW00.FG0IWHD2 /* tot pg for yr 2--dmd*/
       || FG0IW00.FG0IWFPG < FG0IW00.FG0IWHD3) /* tot pg for yr 3--dmd*/

        if (FG0IW00.FG0IWIDX > FG0IW02.FG0IWNLD)
          FG0IW02.FG0IWNLD = FG0IW00.FG0IWIDX - 1;
          FG0IW02.FG0IWTIX = FG0IW02.FG0IWNLD + 1; /* tot idx*/
        else
          FG0IW02.FG0IWTIX = FG0IW00.FG0IWIDX; /* tot idx*/
        end

        FG0IS11(); /* Update current tsq page*/
        FG0IW00.FG0IWHS1 = FG0IW00.XXXTSPAG; /* Set top page for 1 yr his*/
      else
        FG0IW02.FG0IWNLD = FG0IW00.FG0IWIDX - 1;
        FG0IW02.FG0IWTIX = FG0IW02.FG0IWNLD + 1; /* tot idx for yr 1 hist*/
        FG0IS08(); /* Add page to temp storage*/
        FG0IW00.FG0IWFPG = FG0IW00.TA5TSQIX; /* set top of pg--fcst data*/
      end
    end
  end


end // end FG0I-1151

// Fetch fcst qty from vmsgrp01
Function FG0I-11511()
   /* ------------------------------------------------------------*/
   /* Select sum on dfcast.vmsgrp01 table.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Load fffrec record*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "SS"; /* function code*/

   /* ------------------------------------------------------------*/
   /* Load ff8rec record - dfcast.vmsgrp001*/
   /* ------------------------------------------------------------*/

  set FF8REC empty; /* Clear row storage area*/

  FF8REC.YSMXDV = "10"; /* div code*/
  FF8REC.XCTCD = "USA"; /* country code*/
  FF8REC.YPGCD = FFWREC.YPGCD; /* type group code*/
  FF8REC.SYBSTGNB = FG0IW02.FG0IWSNB[FG0IWIDX]; /* style grp nbr*/

   /* ------------------------------------------------------------*/
   /* Select sum dfcast.vmsgrp001*/
   /* ------------------------------------------------------------*/

  try
    call "IO3730" (FFFREC, SQLCA, FF8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or zero total, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* zero total returned*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indisgrpe that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "114"; /* Module identifisgrpion*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indisgrpe not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indisgrpe system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUM TABLE DFCAST.VMSGRP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program applisgrpion*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF8REC.FF8KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0I-11511

// Select/sum on vmcat001
Function FG0I-11513()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vmcat001 table.*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "SS";

   /* ------------------------------------------------------------*/
   /* load ff7rec record - dfcast.vmcat001*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* Clear row storage area*/

  FF7REC.YSMXDV = "10"; /* div code*/
  FF7REC.XCTCD = "USA"; /* country code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* product type code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* product cat code*/

   /* ------------------------------------------------------------*/
   /* Select dfcast.vmcat001*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" (FFFREC, SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or zero total, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == -305) /* Record not found*/
      FF7REC.FF6SLFCT = 0;
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "114"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE DFCAST.VMCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0I-11513

// Inquire/maintain a table row
Function FG0I001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.FG0IWSWD == "1") /* Map 1 was requested*/

    FG0I100(); /* Display map 1*/

  else

    if (FG0IW00.FG0IWSWD == "2") /* Map 2 was requested*/

      FG0I200(); /* Display map 2*/

    else

      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/

      FFWREC.XXXMODID = "001"; /* Module identification*/
      FFWREC.XXXMSGNO = 10; /* Indicate system error*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = FG0IW00.FG0IWSWD; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/

      COMMAREA.CATOAP = "FG0A"; /* TO application*/

      XSFFS01(); /* Exit to another application*/

      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/

      TA1REC.TA1FUNC = "ABND"; /* Termination function*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    end

  end


end // end FG0I001

// Inquire/maintain a table row
Function FG0I100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FG0I110(); /* Obtain the data to display*/

  FG0I120(); /* Format and display the map*/

  FG0I130(); /* Check attention identifier*/

  FG0I140(); /* Reset fields to normal intensity*/

  FG0I150(); /* Verify the entered data*/

  FG0I160(); /* Process valid input request*/

end // end FG0I100

// Obtain the data to display
Function FG0I110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.FG0IWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.FG0IW1ST == "Y")
    FG0IW00.FG0IWFCL = "N"; /* reset all these fields in case key*/
                                   /* chg*/
    FG0IW00.FG0IWS1L = "N";
    FG0IW00.FG0IWS2L = "N";
    FG0IW00.FG0IWS3L = "N";
    FG0IW00.FG0IWD1L = "N";
    FG0IW00.FG0IWD2L = "N";
    FG0IW00.FG0IWD3L = "N";
    FG0IW00.FG0IWFPG = 0;
    FG0IW00.FG0IWPAG = 0;
    FG0IW00.FG0IWHS1 = 0;
    FG0IW00.FG0IWHS2 = 0;
    FG0IW00.FG0IWHS3 = 0;
    FG0IW00.FG0IWHD1 = 0;
    FG0IW00.FG0IWHD2 = 0;
    FG0IW00.FG0IWHD3 = 0;
    FG0IW00.TA5TSQIX = 0;
    FG0IW00.XXXTSPAG = 1;
    FG0IW00.FG0IWPRC = 99999.99; /* reset host variables held for paging*/
    FG0IW00.FG0IWPS1 = 99999.99;
    FG0IW00.FG0IWPS2 = 99999.99;
    FG0IW00.FG0IWPS3 = 99999.99;
    FG0IW00.FG0IWPD1 = 99999.99;
    FG0IW00.FG0IWPD2 = 99999.99;
    FG0IW00.FG0IWPD3 = 99999.99;
    FG0IW00.FG0IWSNB = " ";
    FG0IW00.FG0IWSN1 = " ";
    FG0IW00.FG0IWSN2 = " ";
    FG0IW00.FG0IWSN3 = " ";
    FG0IW00.FG0IWDN1 = " ";
    FG0IW00.FG0IWDN2 = " ";
    FG0IW00.FG0IWDN3 = " ";
    FG0IS01(); /* Purge any temporary storage*/
    FG0IW01.FG0IWYOP = FG0IM001.FG0IMYOP;
    FG0IW01.FG0IWHOP = FG0IM001.FG0IMHOP;
    FG0IS31(); /* Obtain the stygrp wrksht total*/
    FG0IW00.FG0IW1ST = "N"; /* Turn off first time thru flag*/
  end

   /* ------------------------------------------------------------*/
   /* Set map defaults*/
   /* ------------------------------------------------------------*/

  if (FG0IW01.FG0IWYOP == 0)
    FG0IW01.FG0IWYOP = 1;
  end
  if (FG0IW01.FG0IWHOP == " ")
    FG0IW01.FG0IWHOP = "S";
  end
  FG0IW01.FG0IWUCT = FG0IW00.FG0IWSUT;
  FG0IW01.FG0IWCTG = FG0IW00.FG0IWSTG;

   /* ------------------------------------------------------------*/
   /* If work sheet number has been passed obtain forecast*/
   /* information from dfcast.vwdgrp01 and dfcast.vwltyp01.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.FFEWSNBR != 0)
    FG0I111();
  end

   /* ------------------------------------------------------------*/
   /* Obtain product cat and product group type descriptions*/
   /* ------------------------------------------------------------*/

  XPCREC.XPCCD = FFWREC.XPCCD;
  if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
    FFWREC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
  end

  if (FFWREC.YPGCD in YPGTBL.YPGCD)
    FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
  end

   /* ------------------------------------------------------------*/
   /* Select dfcast.vrcat001 for season code if not found*/
   /* default the season code to blank.*/
   /* ------------------------------------------------------------*/

  FG0I112(); /* select dfcast.vrcat001 row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    FG0IW01.FFCDMIND = FFCREC.FFCDMIND;
  end

   /* ------------------------------------------------------------*/
   /* Obtain current date using routine xx0xs01.*/
   /* Obtain invoice cutoff date from dfcast.vffctl01.*/
   /* Calculate:*/
   /* - current date*/
   /* - current date minus one month*/
   /* - current date minus two months*/
   /* - current date minus three months*/
   /* - current date minus four months*/
   /* - main buy month*/
   /* - range dates for three years prior to he requested date range*/
   /* Load the default create date.*/
   /* ------------------------------------------------------------*/

  FG0I113();

  if (converseVar.eventKey is pf7)
    FG0IW00.FG0IWSWR = "N"; /* Request for data switch*/
    FG0IW01.CACHGFL = "Y"; /* data is available for change*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* If current minus 1 month or current minus 2 months are within*/
   /* the calculated date range.  Note the carryover months will*/
   /* never be within the requested range, since this range must be*/
   /* greater than the buy month.*/
   /* Fetch carryover percentages from dfcast.vffxrf01*/
   /* Save the carryover values in working storage.*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.FG0IW-CURR-MO-MINUS1 >= FG0IW01.FG0IWPBD[1]
   && FG0IW00.FG0IW-CURR-MO-MINUS1 <= FG0IW01.FG0IWPED[1])
    FG0I114();
  else
    if (FG0IW00.FG0IW-CURR-MO-MINUS1 >= FG0IW01.FG0IWPBD[2]
     && FG0IW00.FG0IW-CURR-MO-MINUS1 <= FG0IW01.FG0IWPED[2])
      FG0I114();
    else
      if (FG0IW00.FG0IW-CURR-MO-MINUS1 >= FG0IW01.FG0IWPBD[3]
       && FG0IW00.FG0IW-CURR-MO-MINUS1 <= FG0IW01.FG0IWPED[3])
        FG0I114();
      else
        if (FG0IW00.FG0IW-CURR-MO-MINUS2 >= FG0IW01.FG0IWPBD[1]
         && FG0IW00.FG0IW-CURR-MO-MINUS2 <= FG0IW01.FG0IWPED[1])
          FG0I114();
        else
          if (FG0IW00.FG0IW-CURR-MO-MINUS2 >= FG0IW01.FG0IWPBD[2]
           && FG0IW00.FG0IW-CURR-MO-MINUS2 <= FG0IW01.FG0IWPED[2])
            FG0I114();
          else
            if (FG0IW00.FG0IW-CURR-MO-MINUS2 >= FG0IW01.FG0IWPBD[3]
             && FG0IW00.FG0IW-CURR-MO-MINUS2 <= FG0IW01.FG0IWPED[3])
              FG0I114();
            end
          end
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Select 11 active style groups for the requested product*/
   /* category, product type and forecast range from dprodg.vmxprc01*/
   /* for each page.*/
   /* ------------------------------------------------------------*/

  FG0I115();

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.FG0IWFPG == 0) /* No pages formatted*/

    FFWREC.XXXMODID = "110"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/

    return; /* Exit to continue processing*/

  end

   /* ------------------------------------------------------------*/
   /* Select all historical style groups for the requested category,*/
   /* product type and the requested range using dprodg.vmxprc01 as*/
   /* the driver.*/
   /* ------------------------------------------------------------*/

  FG0I116();

   /* ------------------------------------------------------------*/
   /* Translate the current master qty total, forecast qty total,*/
   /* historical sales qty total, and historical demand qty total*/
   /* from units to thousands.*/
   /* Calculate percents.*/
   /* ------------------------------------------------------------*/

  FG0I117();

   /* ------------------------------------------------------------*/
   /* Calculate variance qty : total forecast qty - target qty*/
   /* ------------------------------------------------------------*/

  FG0IW01.FG0IWUVQ = FG0IW03.FG0IWUQT - FG0IW01.FG0IWUCT;

  FFXREC.FFXNUMB = FG0IW01.FG0IWUVQ;
  XSFFS10();
  FG0IW01.FG0IWVQT = FFXREC.FFXCHAR;

   /* ------------------------------------------------------------*/
   /* Caluculate variance percent :*/
   /* (variance qty * 100) / target qty*/
   /* ------------------------------------------------------------*/

  if (FG0IW01.FG0IWUCT != 0)
    FG0IW00.FG0IWNM1 = FG0IW01.FG0IWUVQ * 100;
    FG0IW01.FG0IWVPT = mathLib.round(FG0IW00.FG0IWNM1 / FG0IW01.FG0IWUCT, -mathLib.decimals(FG0IW01.FG0IWVPT));
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FG0IW00.FG0IWSWR = "N"; /* Request for data switch*/
  FG0IW01.CACHGFL = "Y"; /* data is available for change*/

end // end FG0I110

// Fetch data for passed ws nbr
Function FG0I111()
   /* ------------------------------------------------------------*/
   /* If work sheet number has been passed obtain forecast*/
   /* information from dfcast.vwdgrp01 and dfcast.vwltyp01.*/
   /* ------------------------------------------------------------*/

  FG0I-1111(); /* Select dfcast.vwdgrp01 row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    FFWREC.YSMXDV = FFEREC.YSMXDV; /* load sum xdvcd*/
    FFWREC.FFABEGMO = FFEREC.FFABEGMO; /* load begin range*/
    FFWREC.FFAENDMO = FFEREC.FFAENDMO; /* load end range*/
  end

  FG0I-1112(); /* Select dfcast.vwline01 row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    FFWREC.XPLCD = FFGREC.XPLCD; /* product line*/
  end

  FG0I-1113(); /* Select dfcast.vwltyp01 row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    FFWREC.YPGCD = FFIREC.YPGCD; /* product type group*/
  end

  FG0I-1114(); /* Select dfcast.vwcat001 row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    FFWREC.XPCCD = FFJREC.XPCCD; /* product category*/
    FG0IW01.FG0IWUCT = FFJREC.FFEFCTGT; /* unit cat target qty*/
    FG0IW01.FG0IWSCT = FFJREC.FFEFCTGT; /* save cat target qty*/
    FFXREC.FFXNUMB = FFJREC.FFEFCTGT;
    XSFFS10();
    FG0IW01.FG0IWCTG = FFXREC.FFXCHAR; /* cat target qty 1000*/
  else
    FFJREC.FF6SLFCT = 0; /* initialize wrksht sls fcst*/
  end


end // end FG0I111

// Select dfcast.vrcat001 row
Function FG0I112()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vrcat001 table.*/
   /* ------------------------------------------------------------*/

  set FFCREC empty; /* Clear row storage area*/

  FFCREC.FFABEGMO = FFWREC.FFABEGMO; /* being dt range*/
  FFCREC.FFAENDMO = FFWREC.FFAENDMO; /* end dt range*/
  FFCREC.YPGCD = FFWREC.YPGCD; /* product type code*/
  FFCREC.XPCCD = FFWREC.XPCCD; /* product cat code*/

  try
    call "IO3760" ("S ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VRCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0I112

// Calc program dates
Function FG0I113()
   /* ------------------------------------------------------------*/
   /* Obtain current date using routine xx0xs01.*/
   /* Obtain invoice cutoff and futures cutoff dates from*/
   /* dfcast.vffctl01.*/
   /* Calculate:*/
   /* - current date*/
   /* - current date minus one month*/
   /* - current date minus two months*/
   /* - current date minus three months*/
   /* - current date minus four months*/
   /* - main buy month*/
   /* - range dates for three years prior to he requested date range*/
   /* Load the default create date.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Get current date using routine xx0xs01.*/
   /* ------------------------------------------------------------*/

  XX0XS01();

  FG0IW00.FG0IWCWD = XX0XW01.XX0XWDAT; /* current date ccyymmdd*/
  FG0IW00.FG0IW-CURR-MO = XX0XW01.XX0XWCYM; /* current date ccyymm*/

   /* ------------------------------------------------------------*/
   /* Obtain invoice cutoff and futures cutoff dates from*/
   /* dfcast.vffctl01.*/
   /* ------------------------------------------------------------*/

  FG0I-1131();
  FG0IW00.FG0IWBUY = FF1REC.FF1FUTDT; /* future cutoff date*/

   /* ------------------------------------------------------------*/
   /* Calculate:*/
   /* - current date*/
   /* - current date minus one month*/
   /* - current date minus two months*/
   /* - current date minus three months*/
   /* - current date minus four months*/
   /* - main buy month*/
   /* ------------------------------------------------------------*/

  FG0I-1132();

   /* ------------------------------------------------------------*/
   /* Calculate prior ranges if begin and end dates were entered*/
   /* ------------------------------------------------------------*/

  FG0IW00.FG0IWWBD = FFWREC.FFABEGMO;
  FG0IW00.FG0IWWED = FFWREC.FFAENDMO;

  FG0IW00.FG0IWIDX = 1; /* init index*/
  while (FG0IW00.FG0IWIDX <= 3) /* calculate 3 date ranges*/

    if (FG0IW00.FG0IWBYY == 00)
      FG0IW00.FG0IWBYY = 99;
      FG0IW00.FG0IWBCC = FG0IW00.FG0IWBCC - 1;
    else
      FG0IW00.FG0IWBYY = FG0IW00.FG0IWBYY - 1;
    end
    FG0IW01.FG0IWPBD[FG0IWIDX] = FG0IW00.FG0IWWBD; /* prior beg date*/

    if (FG0IW00.FG0IWEYY == 00)
      FG0IW00.FG0IWEYY = 99;
      FG0IW00.FG0IWECC = FG0IW00.FG0IWECC - 1;
    else
      FG0IW00.FG0IWEYY = FG0IW00.FG0IWEYY - 1;
    end
    FG0IW01.FG0IWPED[FG0IWIDX] = FG0IW00.FG0IWWED; /* prior end date*/

    FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX + 1;

  end

   /* ------------------------------------------------------------*/
   /* Set default create date.*/
   /* Note: If dfcast.vwsgrp01 row exists, its standard change*/
   /* date will become the create date.*/
   /* ------------------------------------------------------------*/

  FG0IW01.FG0IWCDT = VGVar.currentShortGregorianDate; /* created date default*/

   /* ------------------------------------------------------------*/
   /* Set ffzrec default dates*/
   /* ------------------------------------------------------------*/

  FFZREC.FFZBEGMO = FFWREC.FFABEGMO;
  FFZREC.FFZENDMO = FFWREC.FFAENDMO;


end // end FG0I113

// Get caov percent from vffxrf01
Function FG0I114()
   /* ------------------------------------------------------------*/
   /* Select unique on dfcast.vffxrf01 table.*/
   /* Load ff2rec record - dfcast.vffxrf01*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.YSMXDV = "10"; /* div grp code*/
  FF2REC.XPCCD = FFWREC.XPCCD; /* product catg cd*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* product type group*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    FG0IW00.FFQLCOFP = FF2REC.FFQLCOFP;
    FG0IW00.FFQLCOPP = FF2REC.FFQLCOPP;
    FG0IW00.FFQOCOFP = FF2REC.FFQOCOFP;
    FG0IW00.FFQOCOPP = FF2REC.FFQOCOPP;
    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "115"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S  ON DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0I114

// Select 11 active products
Function FG0I115()
   /* ------------------------------------------------------------*/
   /* Select 11 active style groups for the requested product*/
   /* category, product type and forecast range from dprodg.vmxprc01*/
   /* for each page.*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.FG0IWFPG < FG0IW00.XXXTSPAG /* Page has not been obtained*/
   && FG0IW00.FG0IWFCL == "N")            /* and not end of record*/

    FG0I-1151(); /* process forecast data*/
    /* ------------------------------------------------------------*/
    /* Calculate style group percents*/
    /* ------------------------------------------------------------*/

    if (FG0IW00.FG0IWFPG == FG0IW00.XXXTSPAG) /* Page has been obtained*/
      FG0IW00.FG0IWPIX = 1;
      while (FG0IW00.FG0IWPIX <= FG0IW02.FG0IWNLD)

        /* ------------------------------------------------------------*/
        /* Calculate current sales style percent:*/
        /* ------------------------------------------------------------*/

        if (FG0IW03.FG0IWUQT != 0)
          FG0IW00.FG0IWNM1 = FG0IW02.FG0IWUQT[FG0IWPIX] * 100;
          FG0IW02.FG0IWSPC[FG0IWPIX] = mathLib.round(FG0IW00.FG0IWNM1 / FG0IW03.FG0IWUQT, -mathLib.decimals(FG0IW02.FG0IWSPC[FG0IWPIX]));
          FG0IW02.FG0IWSPT[FG0IWPIX] = mathLib.round(FG0IW00.FG0IWNM1 / FG0IW03.FG0IWUQT, -mathLib.decimals(FG0IW02.FG0IWSPT[FG0IWPIX]));
        end

        /* ------------------------------------------------------------*/
        /* Accumulate current sales percent*/
        /* ------------------------------------------------------------*/
        FG0IW03.FG0IWSPT = FG0IW02.FG0IWSPT[FG0IWPIX] + FG0IW03.FG0IWSPT;

        FG0IW00.FG0IWPIX = FG0IW00.FG0IWPIX + 1;

      end
      /* ------------------------------------------------------------*/
      /* If style group worksheet exists, assume total pct is 100.*/
      /* ------------------------------------------------------------*/

      if (FG0IW00.FG0IWSGF == "Y" /* style group worksheet exist;*/
       && FG0IW03.FG0IWUQT > 0)   /* and fcst qty exist*/
        FG0IW03.FG0IWSPT = 100;
      end

      /* ------------------------------------------------------------*/
      /* Update temporary storage with style group percents*/
      /* ------------------------------------------------------------*/
      FG0IS11(); /* updt temp storage with stygrp pcts*/
    end
  else

    if (FG0IW00.FG0IWFCL == "N") /* not end of record*/
      FG0IS10(); /* read tsq page*/
    else

      /* -------------------------------------------*/
      /* If new page, clear up W02 working stroage*/
      /* -------------------------------------------*/

      if (FG0IW00.FG0IWFPG < FG0IW00.XXXTSPAG
       && FG0IW00.FG0IWHS1 < FG0IW00.XXXTSPAG
       && FG0IW00.FG0IWHS2 < FG0IW00.XXXTSPAG
       && FG0IW00.FG0IWHS3 < FG0IW00.XXXTSPAG
       && FG0IW00.FG0IWHD1 < FG0IW00.XXXTSPAG
       && FG0IW00.FG0IWHD2 < FG0IW00.XXXTSPAG
       && FG0IW00.FG0IWHD3 < FG0IW00.XXXTSPAG)
        set FG0IW02 empty; /* Clear w02*/
      else

        FG0IS10(); /* read tsq page*/
      end
    end

  end


end // end FG0I115

// Obtain historical data
Function FG0I116()
   /* ------------------------------------------------------------*/
   /* Select all historical style groups for the requested category,*/
   /* product type and the requested range using dprodg.vmxprc01 as*/
   /* the driver.*/
   /* ------------------------------------------------------------*/

  if (FG0IW01.FG0IWYOP == 1) /* 1 year ago history requested*/
    FG0IS61(); /* Process historical data*/
    if (FG0IM001.FG0IMHOP == "S") /* historical sales*/
      if (converseVar.eventKey is pf8         
       && FG0IW00.XXXTSPAG > FG0IW00.FG0IWHS1 /**/
       && FG0IW00.XXXTSPAG > FG0IW00.FG0IWFPG /**/
       && FG0IW00.FG0IWFCL == "Y"             /* all fcst recs in*/
       && FG0IW00.FG0IWS1L == "Y")            /* all hist sls recs in*/
        FFWREC.XXXMODID = "115";
        converseLib.validationFailed(7);
        FG0IW00.XXXTSPAG = FG0IW00.XXXTSPAG - 1; /* reset current page*/
        return; /* return*/
      end
    else /* ( Historical demand)*/
      if (converseVar.eventKey is pf8         
       && FG0IW00.XXXTSPAG > FG0IW00.FG0IWHD1 
       && FG0IW00.XXXTSPAG > FG0IW00.FG0IWFPG /* no fcst data obtained*/
       && FG0IW00.FG0IWFCL == "Y"             /* all fcst recs in*/
       && FG0IW00.FG0IWD1L == "Y")            /* all hist dmd recs in*/
        FFWREC.XXXMODID = "115";
        converseLib.validationFailed(7);
        FG0IW00.XXXTSPAG = FG0IW00.XXXTSPAG - 1; /* reset current page*/
        return; /* return*/
      end
    end
  end


  if (FG0IW01.FG0IWYOP == 2) /* 2 years ago history requested*/
    FG0IS62(); /* Process historical data*/
    if (FG0IM001.FG0IMHOP == "S") /* historical sales*/
      if (converseVar.eventKey is pf8         
       && FG0IW00.XXXTSPAG > FG0IW00.FG0IWHS2 /* no hist data obtained*/
       && FG0IW00.XXXTSPAG > FG0IW00.FG0IWFPG /* no fcst data obtained*/
       && FG0IW00.FG0IWFCL == "Y"             /* all fcst recs in*/
       && FG0IW00.FG0IWS2L == "Y")            /* all hist sls recs in*/
        FFWREC.XXXMODID = "115";
        converseLib.validationFailed(7);
        FG0IW00.XXXTSPAG = FG0IW00.XXXTSPAG - 1; /* reset current page*/
        return; /* return*/
      end
    else /* ( Historical demand)*/
      if (converseVar.eventKey is pf8         
       && FG0IW00.XXXTSPAG > FG0IW00.FG0IWHD2 
       && FG0IW00.XXXTSPAG > FG0IW00.FG0IWFPG /* no fcst data obtained*/
       && FG0IW00.FG0IWFCL == "Y"             /* all fcst recs in*/
       && FG0IW00.FG0IWD2L == "Y")            /* all hist dmd recs in*/
        FFWREC.XXXMODID = "115";
        converseLib.validationFailed(7);
        FG0IW00.XXXTSPAG = FG0IW00.XXXTSPAG - 1; /* reset current page*/
        return; /* return*/
      end
    end
  end

  if (FG0IW01.FG0IWYOP == 3) /* 3 years ago history requested*/
    FG0IS63(); /* Process historical data*/
    if (FG0IM001.FG0IMHOP == "S") /* historical sales*/
      if (converseVar.eventKey is pf8         
       && FG0IW00.XXXTSPAG > FG0IW00.FG0IWHS3 /* no hist data obtained*/
       && FG0IW00.XXXTSPAG > FG0IW00.FG0IWFPG /* no fcst data obtained*/
       && FG0IW00.FG0IWFCL == "Y"             /* all fcst recs in*/
       && FG0IW00.FG0IWS3L == "Y")            /* all hist sls recs in*/
        FFWREC.XXXMODID = "115";
        converseLib.validationFailed(7);
        FG0IW00.XXXTSPAG = FG0IW00.XXXTSPAG - 1; /* reset current page*/
        return; /* return*/
      end
    else /* ( Historical demand)*/
      if (converseVar.eventKey is pf8         
       && FG0IW00.XXXTSPAG > FG0IW00.FG0IWHD3 
       && FG0IW00.XXXTSPAG > FG0IW00.FG0IWFPG /* no fcst data obtained*/
       && FG0IW00.FG0IWFCL == "Y"             /* all fcst recs in*/
       && FG0IW00.FG0IWD3L == "Y")            /* all hist sls recs in*/
        FFWREC.XXXMODID = "115";
        converseLib.validationFailed(7);
        FG0IW00.XXXTSPAG = FG0IW00.XXXTSPAG - 1; /* reset current page*/
        return; /* return*/
      end
    end
  end


end // end FG0I116

// Convt totl qty to thous,calc %
Function FG0I117()
   /* ------------------------------------------------------------*/
   /* Translate the current master qty total, forecast qty total,*/
   /* historical sales qty total, and historical demand qty total*/
   /* from units to thousands.*/
   /* Calculate percents.*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FG0IW03.FG0IWUMQ;
  XSFFS10();
  FG0IW03.FG0IWMQT = FFXREC.FFXCHAR;

  if (FG0IW00.FG0IWSGF == "Y") /* if work sheet data found display*/
                                   /* total*/
    FFXREC.FFXNUMB = FG0IW03.FG0IWUQT;
    XSFFS10();
    FG0IW03.FG0IWFQT = FFXREC.FFXCHAR;
  end

  FG0IW00.FG0IWIDX = 1;
  while (FG0IW00.FG0IWIDX <= 3)
    if (FG0IW01.FG0IWYOP == FG0IW00.FG0IWIDX)
      FFXREC.FFXNUMB = FG0IW03.FG0IWUHS[FG0IWIDX];
      XSFFS10();
      FG0IW03.FG0IWHSQ[FG0IWIDX] = FFXREC.FFXCHAR;
    end
    FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX + 1;
  end

  FG0IW00.FG0IWIDX = 1;
  while (FG0IW00.FG0IWIDX <= 3)
    if (FG0IW01.FG0IWYOP == FG0IW00.FG0IWIDX)
      FFXREC.FFXNUMB = FG0IW03.FG0IWUHD[FG0IWIDX];
      XSFFS10();
      FG0IW03.FG0IWHDQ[FG0IWIDX] = FFXREC.FFXCHAR;
    end
    FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX + 1;
  end

   /* ------------------------------------------------------------*/
   /* Calculate history style group percents*/
   /* ------------------------------------------------------------*/

  FG0IW00.FG0IWPIX = 1;
  while (FG0IW00.FG0IWPIX <= FG0IW02.FG0IWNLD)

      /* ------------------------------------------------------------*/
      /* Calculate historical sales percent one year prior:*/
      /* ------------------------------------------------------------*/

    if (FG0IW01.FG0IWYOP == 1
     && FG0IW03.FG0IWUHS[1] != 0)
      FG0IW00.FG0IWNM1 = FG0IW02.FG0IWUH1[FG0IWPIX] * 100;
      FG0IW00.FG0IWNM2 = FG0IW03.FG0IWUHS[1];
      FG0IW02.FG0IWHP1[FG0IWPIX] = mathLib.round(FG0IW00.FG0IWNM1 / FG0IW00.FG0IWNM2, -mathLib.decimals(FG0IW02.FG0IWHP1[FG0IWPIX]));
    end

      /* ------------------------------------------------------------*/
      /* Calculate historical sales percent two years prior:*/
      /* ------------------------------------------------------------*/

    if (FG0IW01.FG0IWYOP == 2
     && FG0IW03.FG0IWUHS[2] != 0)
      FG0IW00.FG0IWNM1 = FG0IW02.FG0IWUH2[FG0IWPIX] * 100;
      FG0IW00.FG0IWNM2 = FG0IW03.FG0IWUHS[2];
      FG0IW02.FG0IWHP2[FG0IWPIX] = mathLib.round(FG0IW00.FG0IWNM1 / FG0IW00.FG0IWNM2, -mathLib.decimals(FG0IW02.FG0IWHP2[FG0IWPIX]));
    end

      /* ------------------------------------------------------------*/
      /* Calculate historical sales percent three years prior:*/
      /* ------------------------------------------------------------*/

    if (FG0IW01.FG0IWYOP == 3
     && FG0IW03.FG0IWUHS[3] != 0)
      FG0IW00.FG0IWNM1 = FG0IW02.FG0IWUH3[FG0IWPIX] * 100;
      FG0IW00.FG0IWNM2 = FG0IW03.FG0IWUHS[3];
      FG0IW02.FG0IWHP3[FG0IWPIX] = mathLib.round(FG0IW00.FG0IWNM1 / FG0IW00.FG0IWNM2, -mathLib.decimals(FG0IW02.FG0IWHP3[FG0IWPIX]));
    end

      /* ------------------------------------------------------------*/
      /* Calculate historical demand percent one year prior:*/
      /* ------------------------------------------------------------*/

    if (FG0IW01.FG0IWYOP == 1
     && FG0IW03.FG0IWUHD[1] != 0)
      FG0IW00.FG0IWNM1 = FG0IW02.FG0IWUD1[FG0IWPIX] * 100;
      FG0IW00.FG0IWNM2 = FG0IW03.FG0IWUHD[1];
      FG0IW02.FG0IWDP1[FG0IWPIX] = mathLib.round(FG0IW00.FG0IWNM1 / FG0IW00.FG0IWNM2, -mathLib.decimals(FG0IW02.FG0IWDP1[FG0IWPIX]));
    end

      /* ------------------------------------------------------------*/
      /* Caluculate historical demand percent two years prior:*/
      /* ------------------------------------------------------------*/

    if (FG0IW01.FG0IWYOP == 2
     && FG0IW03.FG0IWUHD[2] != 0)
      FG0IW00.FG0IWNM1 = FG0IW02.FG0IWUD2[FG0IWPIX] * 100;
      FG0IW00.FG0IWNM2 = FG0IW03.FG0IWUHD[2];
      FG0IW02.FG0IWDP2[FG0IWPIX] = mathLib.round(FG0IW00.FG0IWNM1 / FG0IW00.FG0IWNM2, -mathLib.decimals(FG0IW02.FG0IWDP2[FG0IWPIX]));
    end

      /* ------------------------------------------------------------*/
      /* Caluculate historical demand percent three years prior:*/
      /* ------------------------------------------------------------*/

    if (FG0IW01.FG0IWYOP == 2
     && FG0IW03.FG0IWUHD[3] != 0)
      FG0IW00.FG0IWNM1 = FG0IW02.FG0IWUD3[FG0IWPIX] * 100;
      FG0IW00.FG0IWNM2 = FG0IW03.FG0IWUHD[3];
      FG0IW02.FG0IWDP3[FG0IWPIX] = mathLib.round(FG0IW00.FG0IWNM1 / FG0IW00.FG0IWNM2, -mathLib.decimals(FG0IW02.FG0IWDP3[FG0IWPIX]));
    end

    FG0IW00.FG0IWPIX = FG0IW00.FG0IWPIX + 1;

  end

   /* ------------------------------------------------------------*/
   /* Update temporary storage with style group percents*/
   /* ------------------------------------------------------------*/

  if (FG0IW02.FG0IWNLD >= 1) /* nbr of lines per page GE 1*/
    FG0IS11(); /* update temporary storage with stygrp*/
                                   /* pcts*/
  end


end // end FG0I117

// Format and converse the map
Function FG0I120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.FG0IWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FG0IW00.FG0IWSWF == "Y") /* Map must be formatted*/
      FG0I121(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* if processing an existing forecast key data can not !!!*/
   /* be modified*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.FG0IWFCF == "Y")
    set FG0IM001.FG0IMBRG skip; /* fcst begin range*/
    set FG0IM001.FG0IMERG skip; /* fcst end range*/
    set FG0IM001.YPGCD skip; /* product type grp*/
    set FG0IM001.XPCCD skip; /* product category code*/
    set FG0IM001.FG0IMCTG cursor; /* set cursor at category target*/
  end


   /* ------------------------------------------------------------*/
   /* Format page, date, and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.TA5TSQIX > 0)

    set FG0IM001.XXXLITPG skip;
    FG0IM001.XXXTSPAG = FG0IW00.XXXTSPAG; /* Current page*/

  end

  FG0IM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FG0IM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG0IM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* error message number*/
    FG0IM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    set FG0IM001 alarm; /* Indicate sound alarm*/
  end

  converse FG0IM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0;

  COMMAREA.CATOAP = FG0IM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG0IM001.CAITEM; /* Application data*/


end // end FG0I120

// Format the display data
Function FG0I121()
   /* ------------------------------------------------------------*/
   /* init map fg0im001*/
   /* ------------------------------------------------------------*/

  set FG0IM001 initial; /* m001 input/ouput area*/

  FG0IW00.FG0IWSWF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* Format fg0im001 using passed data*/
   /* ------------------------------------------------------------*/

  FG0IW00.FG0IWWDT = FFWREC.FFABEGMO; /* w/s date field*/
  FG0IM001.FG0IMBRG = FG0IW00.FG0IWWYM; /* begin month range*/
  FG0IW00.FG0IWWDT = FFWREC.FFAENDMO; /* w/s date field*/
  FG0IM001.FG0IMERG = FG0IW00.FG0IWWYM; /* end month range*/

  FG0IM001.XPCCD = FFWREC.XPCCD;
  FG0IM001.XPCABRV = FFWREC.XPCABRV;

  FG0IM001.YPGCD = FFWREC.YPGCD;
  FG0IM001.YPGABRV = FFWREC.YPGABRV;

  FG0IM001.FG0IMYOP = FG0IW01.FG0IWYOP; /* year option*/
  FG0IM001.FG0IMHOP = FG0IW01.FG0IWHOP; /* history option*/

   /* ------------------------------------------------------------*/
   /* if data has not been loaded bypass load map fields*/
   /* ------------------------------------------------------------*/

  if (FG0IW01.CACHGFL != "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* load map using fg0iw01 work record*/
   /* ------------------------------------------------------------*/

  FG0IM001.FG0IMCTG = FG0IW01.FG0IWCTG; /* forecast target qty*/
  FG0IM001.FG0IMVQT = FG0IW01.FG0IWVQT; /* variance qty*/
  FG0IM001.FG0IMVPT = FG0IW01.FG0IWVPT; /* variance percent*/
  FG0IM001.FG0IMCDT = FG0IW01.FG0IWCDT; /* wrk sht created date*/
  FG0IM001.FFCDMIND = FG0IW01.FFCDMIND; /* season ind*/
  set FG0IM001.FG0IMPR1 skip;
  FG0IM001.FG0IMPBR = FG0IW01.FG0IWPBR[FG0IWYOP]; /* prior beg range yymm*/
  set FG0IM001.FG0IMDSH skip;
  FG0IM001.FG0IMPER = FG0IW01.FG0IWPER[FG0IWYOP]; /* prior end range yymm*/
  set FG0IM001.FG0IMPR2 skip;
  FG0IM001.FG0IMYDS = FG0IW00.FG0IWYDS[FG0IWYOP]; /* prior year desc*/
  if (FG0IW01.FG0IWHOP == "S")
    FG0IM001.FG0IMHDS = FG0IW00.FG0IWHDS[1];
  else
    FG0IM001.FG0IMHDS = FG0IW00.FG0IWHDS[2];
  end
  set FG0IM001.FG0IMHDS skip;

   /* ------------------------------------------------------------*/
   /* obtain current sales and historical sales/demand from*/
   /* temporary storage*/
   /* ------------------------------------------------------------*/

  FG0IS10(); /* read temporary storage*/

  FG0IW00.FG0IWPIX = 1;
  while (FG0IW00.FG0IWPIX <= 12) /* process temp storage*/

    if (FG0IW02.FG0IWSNB[FG0IWPIX] != " ")
      set FG0IM001.FG0IMSEL[FG0IWPIX] normal;
      FG0IM001.FG0IMSCL[FG0IWPIX] = FG0IW02.FG0IWSCL[FG0IWPIX];
      set FG0IM001.FG0IMFQT[FG0IWPIX] normal;
      set FG0IM001.FG0IMSPT[FG0IWPIX] normal;
      set FG0IM001.FG0IMCPT[FG0IWPIX] normal;
    end

    FG0IM001.FG0IMSNB[FG0IWPIX] = FG0IW02.FG0IWSNB[FG0IWPIX];
    FG0IM001.FG0IMSNM[FG0IWPIX] = FG0IW02.FG0IWSNM[FG0IWPIX];
    FG0IM001.FG0IMMQT[FG0IWPIX] = FG0IW02.FG0IWMQT[FG0IWPIX];
    FG0IM001.FG0IMFQT[FG0IWPIX] = FG0IW02.FG0IWFQT[FG0IWPIX];
    FG0IM001.FG0IMSPT[FG0IWPIX] = FG0IW02.FG0IWSPT[FG0IWPIX];

    if (FG0IW01.FG0IWHOP == "S") /* load historical sales data*/
      if (FG0IW01.FG0IWYOP == 1)
        FG0IM001.FG0IMHNB[FG0IWPIX] = FG0IW02.FG0IWSN1[FG0IWPIX];
        FG0IM001.FG0IMHNM[FG0IWPIX] = FG0IW02.FG0IWSM1[FG0IWPIX];
        FG0IM001.FG0IMHQT[FG0IWPIX] = FG0IW02.FG0IWHQ1[FG0IWPIX];
        FG0IM001.FG0IMHPT[FG0IWPIX] = FG0IW02.FG0IWHP1[FG0IWPIX];
      end
      if (FG0IW01.FG0IWYOP == 2)
        FG0IM001.FG0IMHNB[FG0IWPIX] = FG0IW02.FG0IWSN2[FG0IWPIX];
        FG0IM001.FG0IMHNM[FG0IWPIX] = FG0IW02.FG0IWSM2[FG0IWPIX];
        FG0IM001.FG0IMHQT[FG0IWPIX] = FG0IW02.FG0IWHQ2[FG0IWPIX];
        FG0IM001.FG0IMHPT[FG0IWPIX] = FG0IW02.FG0IWHP2[FG0IWPIX];
      end
      if (FG0IW01.FG0IWYOP == 3)
        FG0IM001.FG0IMHNB[FG0IWPIX] = FG0IW02.FG0IWSN3[FG0IWPIX];
        FG0IM001.FG0IMHNM[FG0IWPIX] = FG0IW02.FG0IWSM3[FG0IWPIX];
        FG0IM001.FG0IMHQT[FG0IWPIX] = FG0IW02.FG0IWHQ3[FG0IWPIX];
        FG0IM001.FG0IMHPT[FG0IWPIX] = FG0IW02.FG0IWHP3[FG0IWPIX];
      end
    else /* load historical demand data*/
      if (FG0IW01.FG0IWYOP == 1)
        FG0IM001.FG0IMHNB[FG0IWPIX] = FG0IW02.FG0IWDN1[FG0IWPIX];
        FG0IM001.FG0IMHNM[FG0IWPIX] = FG0IW02.FG0IWDM1[FG0IWPIX];
        FG0IM001.FG0IMHQT[FG0IWPIX] = FG0IW02.FG0IWDQ1[FG0IWPIX];
        FG0IM001.FG0IMHPT[FG0IWPIX] = FG0IW02.FG0IWDP1[FG0IWPIX];
      end
      if (FG0IW01.FG0IWYOP == 2)
        FG0IM001.FG0IMHNB[FG0IWPIX] = FG0IW02.FG0IWDN2[FG0IWPIX];
        FG0IM001.FG0IMHNM[FG0IWPIX] = FG0IW02.FG0IWDM2[FG0IWPIX];
        FG0IM001.FG0IMHQT[FG0IWPIX] = FG0IW02.FG0IWDQ2[FG0IWPIX];
        FG0IM001.FG0IMHPT[FG0IWPIX] = FG0IW02.FG0IWDP2[FG0IWPIX];
      end
      if (FG0IW01.FG0IWYOP == 3)
        FG0IM001.FG0IMHNB[FG0IWPIX] = FG0IW02.FG0IWDN3[FG0IWPIX];
        FG0IM001.FG0IMHNM[FG0IWPIX] = FG0IW02.FG0IWDM3[FG0IWPIX];
        FG0IM001.FG0IMHQT[FG0IWPIX] = FG0IW02.FG0IWDQ3[FG0IWPIX];
        FG0IM001.FG0IMHPT[FG0IWPIX] = FG0IW02.FG0IWDP3[FG0IWPIX];
      end
    end

    /* ------------------------------------------------------------*/
     /* load forecast and current/historical totals*/
    /* ------------------------------------------------------------*/

    if (FG0IW00.FG0IWPIX == FG0IW02.FG0IWTIX) /* reach total line*/

      FG0IM001.FG0IMSNM[FG0IWPIX] = "   TOTAL    ";
      FG0IM001.FG0IMMQT[FG0IWPIX] = FG0IW03.FG0IWMQT;
      FG0IM001.FG0IMFQT[FG0IWPIX] = FG0IW03.FG0IWFQT;
      set FG0IM001.FG0IMFQT[FG0IWPIX] skip;
      FG0IM001.FG0IMSPT[FG0IWPIX] = FG0IW03.FG0IWSPT;
      set FG0IM001.FG0IMSPT[FG0IWPIX] skip;

    end

    if (FG0IW01.FG0IWHOP == "S" /* load historical sales totals*/
     && FG0IW01.FG0IWYOP == 1   /* 1 year ago history*/
     && FG0IW00.FG0IWPIX == FG0IW02.FG0IWS1X) /* reach total line*/
      FG0IM001.FG0IMHNM[FG0IWPIX] = "   TOTAL    ";
      FG0IM001.FG0IMHQT[FG0IWPIX] = FG0IW03.FG0IWHSQ[1];
      FG0IM001.FG0IMHPT[FG0IWPIX] = 100;
    end

    if (FG0IW01.FG0IWHOP == "D" /* load historical sales totals*/
     && FG0IW01.FG0IWYOP == 1   /* 1 year ago history*/
     && FG0IW00.FG0IWPIX == FG0IW02.FG0IWD1X) /* reach total line*/
      FG0IM001.FG0IMHNM[FG0IWPIX] = "   TOTAL    ";
      FG0IM001.FG0IMHQT[FG0IWPIX] = FG0IW03.FG0IWHDQ[1];
      FG0IM001.FG0IMHPT[FG0IWPIX] = 100;
    end

    if (FG0IW01.FG0IWHOP == "S" /* load historical sales totals*/
     && FG0IW01.FG0IWYOP == 2   /* 2 years ago history*/
     && FG0IW00.FG0IWPIX == FG0IW02.FG0IWS2X) /* reach total line*/
      FG0IM001.FG0IMHNM[FG0IWPIX] = "   TOTAL    ";
      FG0IM001.FG0IMHQT[FG0IWPIX] = FG0IW03.FG0IWHSQ[2];
      FG0IM001.FG0IMHPT[FG0IWPIX] = 100;
    end

    if (FG0IW01.FG0IWHOP == "D" /* load historical sales totals*/
     && FG0IW01.FG0IWYOP == 2   /* 2 years ago history*/
     && FG0IW00.FG0IWPIX == FG0IW02.FG0IWD2X) /* reach total line*/
      FG0IM001.FG0IMHNM[FG0IWPIX] = "   TOTAL    ";
      FG0IM001.FG0IMHQT[FG0IWPIX] = FG0IW03.FG0IWHDQ[2];
      FG0IM001.FG0IMHPT[FG0IWPIX] = 100;
    end

    if (FG0IW01.FG0IWHOP == "S" /* load historical sales totals*/
     && FG0IW01.FG0IWYOP == 3   /* 3 years ago history*/
     && FG0IW00.FG0IWPIX == FG0IW02.FG0IWS3X) /* reach total line*/
      FG0IM001.FG0IMHNM[FG0IWPIX] = "   TOTAL    ";
      FG0IM001.FG0IMHQT[FG0IWPIX] = FG0IW03.FG0IWHSQ[3];
      FG0IM001.FG0IMHPT[FG0IWPIX] = 100;
    end

    if (FG0IW01.FG0IWHOP == "D" /* load historical sales totals*/
     && FG0IW01.FG0IWYOP == 3   /* 3 years ago history*/
     && FG0IW00.FG0IWPIX == FG0IW02.FG0IWD3X) /* reach total line*/
      FG0IM001.FG0IMHNM[FG0IWPIX] = "   TOTAL    ";
      FG0IM001.FG0IMHQT[FG0IWPIX] = FG0IW03.FG0IWHDQ[3];
      FG0IM001.FG0IMHPT[FG0IWPIX] = 100;
    end

    FG0IW00.FG0IWPIX = FG0IW00.FG0IWPIX + 1; /* increment load index*/

  end

end // end FG0I121

// Check attention identifier
Function FG0I130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* refresh map*/

    FG0IW00.FG0IWSWR = "N"; /* request for data*/
    FG0IW00.FG0IWSWF = "Y"; /* format screen m001*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FG0IM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (FG0IM001.CATOAP == "FG0G"
       || FG0IM001.CATOAP == "FG0R")
        converseLib.validationFailed(189);
        FFWREC.XXXMODID = "130";
        set FG0IM001.CATOAP cursor, bold;
      else

        FG0IS01(); /* purge temp storage*/
        FFWREC.FFEWSNBR = 0; /* init work sheet number*/

        XSFFS01(); /* Exit to another application*/

        FG0IW00.FG0IWSWR = "N"; /* request for data*/
        FG0IW00.FG0IWSWF = "Y"; /* format screen m001*/

        set FG0IM001.CATOAP cursor, bold; /* Highlight*/

      end
    else

      FFWREC.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf19) /* or PF19 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG0IM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FG0A"; /* Application find code*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FG0T"; /* TO application*/
    end

    if (converseVar.eventKey is pf19) /* PF19 was pressed*/
      FFWREC.SYBSTGNB = " "; /* clear style group*/
      COMMAREA.CATOAP = "FG0B"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    FG0IW00.FG0IWSWR = "N"; /* request for data*/
    FG0IW00.FG0IWSWF = "Y"; /* format screen m001*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* pf7 was not pressed*/
   && converseVar.eventKey not pf8   /* pf8 was not pressed*/
   && converseVar.eventKey not pf14  /* pf14 was not pressed*/
   && converseVar.eventKey not pf15  /* pf15 was not pressed*/
   /* **D EZEAID NOT PF16             /* pf16 was not pressed*/
   /* **D EZEAID NOT PF17             /* pf17 was not pressed*/
   && converseVar.eventKey not pf18  /* pf18 was not pressed*/
   && converseVar.eventKey not pf19) /* pf19 was not pressed*/

    FFWREC.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FG0I130

// Reset highlighted fields
Function FG0I140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FG0IM001.FG0IMBRG initialAttributes; /* begin range*/
  set FG0IM001.FG0IMERG initialAttributes; /* end range*/
  set FG0IM001.FG0IMCTG initialAttributes; /* cat target*/
  set FG0IM001.FG0IMYOP initialAttributes; /* year option*/
  set FG0IM001.FG0IMHOP initialAttributes; /* history option*/
  set FG0IM001.FG0IMPCT initialAttributes; /* change percent*/
  set FG0IM001.FG0IMCTQ initialAttributes; /* change total qty*/
  set FG0IM001.XPCCD initialAttributes; /* category*/
  set FG0IM001.YPGCD initialAttributes; /* type group*/

  if (FG0IW01.CACHGFL == "Y")

    FG0IW00.FG0IWIDX = 1; /* init load index*/
    while (FG0IW00.FG0IWIDX < FG0IW02.FG0IWTIX
     && FG0IM001.FG0IMSNB[FG0IWIDX] != " ")

      set FG0IM001.FG0IMSEL[FG0IWIDX] normal; /* selection field*/
      set FG0IM001.FG0IMFQT[FG0IWIDX] normal; /* current sls fcst qty*/
      set FG0IM001.FG0IMSPT[FG0IWIDX] normal; /* cat percent*/
      set FG0IM001.FG0IMCPT[FG0IWIDX] normal; /* change percent*/

      FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX + 1; /* increment load index*/

    end

    if (FG0IW02.FG0IWTIX != 0)
      set FG0IM001.FG0IMFQT[FG0IWIDX] skip; /* fcst qty total*/
      set FG0IM001.FG0IMSPT[FG0IWIDX] skip; /* stygrp percent total*/
    end

    set FG0IM001.FG0IMPR1 skip; /* historical description*/
    set FG0IM001.FG0IMDSH skip;
    set FG0IM001.FG0IMPR2 skip;
    set FG0IM001.FG0IMHDS skip;

  end

  set FG0IM001.CATOAP initialAttributes;
  set FG0IM001.CAITEM initialAttributes;

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FG0IM001.YPGCD == "?" /* product type group list req*/
   || FG0IM001.XPCCD == "?") /* or product cat list req*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FFWREC.XXXMODID = "140"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product the group codes*/
   /* ------------------------------------------------------------*/

  if (FG0IM001.YPGCD == "?") /* GPC list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT TYPE GROUP"; /* Heading*/

    XX0XW02.YPGFFFL = "Y"; /* init flag*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FG0IM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FG0IM001.YPGABRV = FFWREC.YPGABRV; /* Restore prior code*/
    else
      FG0IM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FG0IM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Selected code*/

    end

    set FG0IM001.YPGCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes*/
   /* ------------------------------------------------------------*/

  if (FG0IM001.XPCCD == "?") /* product line  requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT CATEGORY "; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FG0IM001.XPCCD = FFWREC.XPCCD; /* Restore prior code*/
      XPCREC.XPCCD = FFWREC.XPCCD; /* Restore prior code*/
      XPCREC.XGPCD = COMMAREA.XGPCD; /* Restore prior code*/
      if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
        FG0IM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
      end
    else
      FG0IM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FG0IM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Selected code*/

    end

    set FG0IM001.XPCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "140"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FG0I140

// Verify the entered data
Function FG0I150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "150"; /* Module identification*/
    set FG0IM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* verify request to page forward(pf7) or backwards(pf8), and*/
   /* check all modifiable fields except fcst target*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)

    FG0I151(); /* verify scroll request*/

    FG0IS12(); /* check modifiable fields*/

  end

   /* ------------------------------------------------------------*/
   /* if request to transfer to category forecast*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* request to transfer(pf14)*/
    if (FFWREC.FFEWSNBR == 0)
      converseLib.validationFailed(44);
      FFWREC.XXXMODID = "150";
    end
  end

   /* ------------------------------------------------------------*/
   /* verify if data loaded, if so check modifiable fields*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15 /* request to save data(pf15)*/
   || converseVar.eventKey is pf16 /* request to explode group(pf16)*/
   || converseVar.eventKey is pf17 /* request to explode color(pf17)*/
   || converseVar.eventKey is pf18) /* request to display history(pf18)*/

    if (FG0IW00.TA5TSQIX == 0) /* no data loaded*/

      converseLib.validationFailed(18);
      FFWREC.XXXMODID = "150";

    else

      FG0IS12(); /* check modifiable fields*/

      if (converseVar.eventKey is pf16
       || converseVar.eventKey is pf17)
        FG0I152(); /* verify style/color indicator*/

        if (converseVar.eventKey is pf16)
          FFWREC.SYBSTGNB = " "; /* clear out style group*/
          FG0I154(); /* verify the selection field*/
        end
        if (converseVar.eventKey is pf17)
          FG0I154(); /* verify the selection field*/
          if (converseVar.validationMsgNum == 0)
            if (FG0IW00.FG0IWSLF == "N")
              converseLib.validationFailed(154); /* if no sel display error message*/
              FFWREC.XXXMODID = "150";
            else
              FG0I159(); /* verify color fcst*/
            end
          end
        end

         /* if fcst modified database update must occur before explode*/

        if (FG0IW01.FFCDMIND == " ")
          converseLib.validationFailed(246);
          FFWREC.XXXMODID = "150";
        else
          if (FFWREC.FFWMODSW == "Y"
           || FFWREC.FFEWSNBR == 0)
            converseLib.validationFailed(296);
            FFWREC.XXXMODID = "150";
          end
        end
      else
        if (converseVar.eventKey is pf18)
          FG0IS30(); /* Validate year/history option*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* verify category percent total*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15 /* request to save data(pf15)*/
   || converseVar.eventKey is pf16 /* request to explode group(pf16)*/
   || converseVar.eventKey is pf17 /* request to explode color(pf17)*/
   || converseVar.eventKey is pf18) /* request to display history(pf18)*/

    if (FG0IW03.FG0IWSPT != 0
     && FG0IW03.FG0IWSPT != 100)
      converseLib.validationFailed(159);
      FFWREC.XXXMODID = "150";
      set FG0IM001.FG0IMSPT[1] cursor;
      set FG0IM001.FG0IMSPT[FG0IWTIX] bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* validate entry fields, selection requests, history options,*/
   /* key data, and re-calculate percents*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)

    FG0I155(); /* validate entry fields*/

    if (FG0IW01.CACHGFL == "Y"
     && converseVar.validationMsgNum == 0)

      FG0I156(); /* upd temp storage qtys and pcts*/

      if (FG0IW00.FG0IWDCF == "Y") /* data changed*/
        FG0I157(); /* re-calculate/load qtys/percentages*/
      end
    end

    /* ------------------------------------------------------*/
     /* if key data changed check modifiable fields*/
    /* ------------------------------------------------------*/

    FG0IW00.FG0IWWBD = FFWREC.FFABEGMO;
    FG0IW00.FG0IWWED = FFWREC.FFAENDMO;

    if (FG0IM001.YPGCD != FFWREC.YPGCD        /* product type group*/
     || FG0IM001.YPGCD == " "                 /* product type group*/
     || FG0IM001.XPCCD != FFWREC.XPCCD        /* product category*/
     || FG0IM001.XPCCD == " "                 /* product category*/
     || FG0IM001.FG0IMBRG != FG0IW00.FG0IWBYM /* beg range changed*/
     || FG0IM001.FG0IMBRG == 0                /* beg range changed*/
     || FG0IM001.FG0IMERG != FG0IW00.FG0IWEYM /* end range changed*/
     || FG0IM001.FG0IMERG == 0                /* end range changed*/
     || FG0IM001.FG0IMYOP != FG0IW01.FG0IWYOP /* Year option changed*/
     || FG0IM001.FG0IMHOP != FG0IW01.FG0IWHOP) /* History option changed*/

      if (FG0IW01.CACHGFL == "Y")
        FG0I158(); /* key chg: ck modifiable fields*/
      end

      if (converseVar.validationMsgNum == 0)
        FG0IW00.FG0IWSWR = "Y"; /* request data request*/
        FG0IW00.FG0IW1ST = "Y"; /* reset for key change*/
        if (FG0IW00.FG0IWFCF != "Y")
          FFWREC.FFEWSNBR = 0;
        end
      end

    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end

end // end FG0I150

// verify scroll request
Function FG0I151()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FG0IW00.XXXTSPAG < 2)       /* and no previous pages*/

    FFWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward request*/

    if (FG0IM001.FG0IMYOP == 1) /* 1 year ago*/
      if (FG0IM001.FG0IMHOP == "S") /* historical sales*/
        if (FG0IW00.FG0IWFPG > FG0IW00.FG0IWHS1  /* less history*/
         && FG0IW00.XXXTSPAG >= FG0IW00.FG0IWFPG /* and no more pages*/
         && FG0IW00.FG0IWFCL == "Y")             /* and all recds are in*/

          FFWREC.XXXMODID = "151"; /* Module identification*/
          converseLib.validationFailed(7); /* No more pages to display*/

        else
          if (FG0IW00.FG0IWFPG < FG0IW00.FG0IWHS1  /* more hist pages*/
           && FG0IW00.XXXTSPAG >= FG0IW00.FG0IWHS1 /* and no more pages*/
           && FG0IW00.FG0IWS1L == "Y")             /* and all recds are in*/

            FFWREC.XXXMODID = "151"; /* Module identification*/
            converseLib.validationFailed(7); /* No more pages to display*/

          else

            if (FG0IW00.FG0IWS1L == "Y"              /* History all recds are in*/
             && FG0IW00.FG0IWFCL == "Y"              /* Fcst all recds are in*/
             && FG0IW00.XXXTSPAG >= FG0IW00.FG0IWHS1 /* no more history*/
             && FG0IW00.XXXTSPAG >= FG0IW00.FG0IWFPG)
                                   /* and no more pages*/

              FFWREC.XXXMODID = "151"; /* Module identification*/
              converseLib.validationFailed(7); /* No more pages to display*/

            end

          end
        end
      else /* ( Historical demand)*/
        if (FG0IW00.FG0IWFPG > FG0IW00.FG0IWHD1  
         && FG0IW00.XXXTSPAG >= FG0IW00.FG0IWFPG /* and no more pages*/
         && FG0IW00.FG0IWFCL == "Y")             /* and all recds are in*/

          FFWREC.XXXMODID = "151"; /* Module identification*/
          converseLib.validationFailed(7); /* No more pages to display*/

        else
          if (FG0IW00.FG0IWFPG < FG0IW00.FG0IWHD1  
           && FG0IW00.XXXTSPAG >= FG0IW00.FG0IWHD1 /* and no more pages*/
           && FG0IW00.FG0IWD1L == "Y")             /* and all recds are in*/

            FFWREC.XXXMODID = "151"; /* Module identification*/
            converseLib.validationFailed(7); /* No more pages to display*/

          else

            if (FG0IW00.FG0IWD1L == "Y"              /* History all recds are in*/
             && FG0IW00.FG0IWFCL == "Y"              /* Fcst all recds are in*/
             && FG0IW00.XXXTSPAG >= FG0IW00.FG0IWHD1 /* no more history*/
             && FG0IW00.XXXTSPAG >= FG0IW00.FG0IWFPG)
                                   /* and no more pages*/

              FFWREC.XXXMODID = "151"; /* Module identification*/
              converseLib.validationFailed(7); /* No more pages to display*/

            end

          end
        end
      end

    end

    if (FG0IM001.FG0IMYOP == 2) /* 2 years ago*/
      if (FG0IM001.FG0IMHOP == "S") /* historical sales*/
        if (FG0IW00.FG0IWFPG > FG0IW00.FG0IWHS2  
         && FG0IW00.XXXTSPAG >= FG0IW00.FG0IWFPG /* and no more pages*/
         && FG0IW00.FG0IWFCL == "Y")             /* and all recds are in*/

          FFWREC.XXXMODID = "151"; /* Module identification*/
          converseLib.validationFailed(7); /* No more pages to display*/

        else
          if (FG0IW00.FG0IWFPG < FG0IW00.FG0IWHS2  
           && FG0IW00.XXXTSPAG >= FG0IW00.FG0IWHS2 /* and no more pages*/
           && FG0IW00.FG0IWS2L == "Y")             /* and all recds are in*/

            FFWREC.XXXMODID = "151"; /* Module identification*/
            converseLib.validationFailed(7); /* No more pages to display*/

          else

            if (FG0IW00.FG0IWS2L == "Y"              /* History all recds are in*/
             && FG0IW00.FG0IWFCL == "Y"              /* Fcst all recds are in*/
             && FG0IW00.XXXTSPAG >= FG0IW00.FG0IWHS2 /* no more history*/
             && FG0IW00.XXXTSPAG >= FG0IW00.FG0IWFPG)
                                   /* and no more pages*/

              FFWREC.XXXMODID = "151"; /* Module identification*/
              converseLib.validationFailed(7); /* No more pages to display*/

            end

          end
        end
      else /* ( Historical demand)*/
        if (FG0IW00.FG0IWFPG > FG0IW00.FG0IWHD2  
         && FG0IW00.XXXTSPAG >= FG0IW00.FG0IWFPG /* and no more pages*/
         && FG0IW00.FG0IWFCL == "Y")             /* and all recds are in*/

          FFWREC.XXXMODID = "151"; /* Module identification*/
          converseLib.validationFailed(7); /* No more pages to display*/

        else
          if (FG0IW00.FG0IWFPG < FG0IW00.FG0IWHD2  
           && FG0IW00.XXXTSPAG >= FG0IW00.FG0IWHD2 /* and no more pages*/
           && FG0IW00.FG0IWD2L == "Y")             /* and all recds are in*/

            FFWREC.XXXMODID = "151"; /* Module identification*/
            converseLib.validationFailed(7); /* No more pages to display*/

          else

            if (FG0IW00.FG0IWD2L == "Y"              /* History all recds are in*/
             && FG0IW00.FG0IWFCL == "Y"              /* Fcst all recds are in*/
             && FG0IW00.XXXTSPAG >= FG0IW00.FG0IWHD2 /* no more history*/
             && FG0IW00.XXXTSPAG >= FG0IW00.FG0IWFPG)
                                   /* and no more pages*/

              FFWREC.XXXMODID = "151"; /* Module identification*/
              converseLib.validationFailed(7); /* No more pages to display*/

            end

          end
        end
      end

    end

    if (FG0IM001.FG0IMYOP == 3) /* 3 years ago*/
      if (FG0IM001.FG0IMHOP == "S") /* historical sales*/
        if (FG0IW00.FG0IWFPG >= FG0IW00.FG0IWHS3 
         && FG0IW00.XXXTSPAG >= FG0IW00.FG0IWFPG /* and no more pages*/
         && FG0IW00.FG0IWFCL == "Y")             /* and all recds are in*/

          FFWREC.XXXMODID = "151"; /* Module identification*/
          converseLib.validationFailed(7); /* No more pages to display*/

        else
          if (FG0IW00.FG0IWFPG < FG0IW00.FG0IWHS3  
           && FG0IW00.XXXTSPAG >= FG0IW00.FG0IWHS3 /* and no more pages*/
           && FG0IW00.FG0IWS3L == "Y")             /* and all recds are in*/

            FFWREC.XXXMODID = "151"; /* Module identification*/
            converseLib.validationFailed(7); /* No more pages to display*/

          else

            if (FG0IW00.FG0IWS3L == "Y"              /* History all recds are in*/
             && FG0IW00.FG0IWFCL == "Y"              /* Fcst all recds are in*/
             && FG0IW00.XXXTSPAG >= FG0IW00.FG0IWHS3 /* no more history*/
             && FG0IW00.XXXTSPAG >= FG0IW00.FG0IWFPG)
                                   /* and no more pages*/

              FFWREC.XXXMODID = "151"; /* Module identification*/
              converseLib.validationFailed(7); /* No more pages to display*/

            end

          end
        end
      else /* ( Historical demand)*/
        if (FG0IW00.FG0IWFPG > FG0IW00.FG0IWHD3  
         && FG0IW00.XXXTSPAG >= FG0IW00.FG0IWFPG /* and no more pages*/
         && FG0IW00.FG0IWFCL == "Y")             /* and all recds are in*/

          FFWREC.XXXMODID = "151"; /* Module identification*/
          converseLib.validationFailed(7); /* No more pages to display*/

        else
          if (FG0IW00.FG0IWFPG < FG0IW00.FG0IWHD3  
           && FG0IW00.XXXTSPAG >= FG0IW00.FG0IWHD3 /* and no more pages*/
           && FG0IW00.FG0IWD3L == "Y")             /* and all recds are in*/

            FFWREC.XXXMODID = "151"; /* Module identification*/
            converseLib.validationFailed(7); /* No more pages to display*/

          else

            if (FG0IW00.FG0IWD3L == "Y"              /* History all recds are in*/
             && FG0IW00.FG0IWFCL == "Y"              /* Fcst all recds are in*/
             && FG0IW00.XXXTSPAG >= FG0IW00.FG0IWHD3 /* no more history*/
             && FG0IW00.XXXTSPAG >= FG0IW00.FG0IWFPG)
                                   /* and no more pages*/

              FFWREC.XXXMODID = "151"; /* Module identification*/
              converseLib.validationFailed(7); /* No more pages to display*/

            end

          end
        end
      end

    end

  end

end // end FG0I151

// validate season indicator
Function FG0I152()

   /* ------------------------------------------------------------*/
   /* validate season indicator on current page*/
   /* ------------------------------------------------------------*/

  FG0IW00.FG0IWPIX = FG0IW02.FG0IWTIX - 1; /* nbr of lines loaded*/

  while (FG0IW00.FG0IWPIX >= 1) /* process temp storage*/

    if (FG0IM001.FG0IMSCL[FG0IWPIX] == " "
     && FG0IM001.FG0IMSNB[FG0IWPIX] != " ")
      converseLib.validationFailed(296);
      FFWREC.XXXMODID = "152";
    end

    FG0IW00.FG0IWPIX = FG0IW00.FG0IWPIX - 1; /* decrement table index*/

  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

   /* ------------------------------------------------------------*/
   /* if no errors found on current page, verify all other pages*/
   /* in temporary storage*/
   /* ------------------------------------------------------------*/

  FG0IW00.FG0IWSTP = FG0IW00.XXXTSPAG; /* save current page*/

  FG0IW00.FG0IWIDX = 1; /* process all pages in temp storage*/
  while (FG0IW00.FG0IWIDX <= FG0IW00.FG0IWFPG)
    FG0IW00.XXXTSPAG = FG0IW00.FG0IWIDX;

    FG0IS10(); /* read temporary storage*/

    FG0IW00.FG0IWPIX = FG0IW02.FG0IWTIX - 1; /* nbr of lines loaded*/
    while (FG0IW00.FG0IWPIX >= 1)
      if (FG0IM001.FG0IMSCL[FG0IWPIX] == " "
       && FG0IM001.FG0IMSNB[FG0IWPIX] != " ")
        converseLib.validationFailed(296);
        FFWREC.XXXMODID = "152";
      end
      FG0IW00.FG0IWPIX = FG0IW00.FG0IWPIX - 1;
    end

    FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX + 1; /* line index*/

  end

  FG0IW00.XXXTSPAG = FG0IW00.FG0IWSTP; /* set to current page*/

  FG0IS10(); /* read temporary storage*/


end // end FG0I152

// verify 'S'el
Function FG0I154()

   /* ------------------------------------------------------------*/
   /* validate 's'election field*/
   /* ------------------------------------------------------------*/

  FG0IW00.FG0IWSLF = "N"; /* init selection flag*/
  FG0IW00.FG0IWIDX = FG0IW02.FG0IWTIX - 1; /* nbr of lines loaded*/

  while (FG0IW00.FG0IWIDX >= 1)

    if (FG0IM001.FG0IMSEL[FG0IWIDX] != " "
     && FG0IM001.FG0IMSEL[FG0IWIDX] != "S")
      converseLib.validationFailed(41);
      FFWREC.XXXMODID = "154";
      set FG0IM001.FG0IMSEL[FG0IWIDX] cursor, bold;
    else
      if (FG0IM001.FG0IMSEL[FG0IWIDX] == "S")
        FG0IW00.FG0IWSLF = "Y";
        FFWREC.SYBSTGNB = FG0IM001.FG0IMSNB[FG0IWIDX];
      end
    end

    FG0IW00.FG0IWSLC = FG0IW00.FG0IWIDX - 1;

    while (FG0IW00.FG0IWSLC >= 1)

      if (FG0IM001.FG0IMSEL[FG0IWSLC] > " "
       && FG0IM001.FG0IMSEL[FG0IWIDX] > " ")
        if (FG0IM001.FG0IMSEL[FG0IWIDX] == "S")
          if (converseVar.eventKey is pf16)
            /* NEXT SENTENCE*/
          else
            converseLib.validationFailed(136);
            FFWREC.XXXMODID = "154";
            set FG0IM001.FG0IMSEL[FG0IWIDX] cursor, bold;
          end
        else
          converseLib.validationFailed(41);
          FFWREC.XXXMODID = "154";
          set FG0IM001.FG0IMSEL[FG0IWIDX] cursor, bold;
        end
      end

      FG0IW00.FG0IWSLC = FG0IW00.FG0IWSLC - 1;

    end

    FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX - 1;

  end
end // end FG0I154

// validate modifiable data
Function FG0I155()
   /* ------------------------------------------------------------*/
   /* init flags*/
   /* ------------------------------------------------------------*/

  FG0IW00.FG0IWERF = "N"; /* error flag*/
  FG0IW00.FG0IWSPF = "N"; /* error flag*/
  FG0IW00.FG0IWSLF = "N"; /* selection flag*/

   /* ------------------------------------------------------------*/
   /* validate style group fcst fqts*/
   /* ------------------------------------------------------------*/

  FG0IW00.FG0IWIDX = FG0IW02.FG0IWTIX - 1; /* nbr of lines*/

  while (FG0IW00.FG0IWIDX >= 1) /* process temp storage*/

    if (FG0IM001.FG0IMFQT[FG0IWIDX] != FG0IW02.FG0IWFQT[FG0IWIDX])
      FFXREC.FFXCHAR = FG0IM001.FG0IMFQT[FG0IWIDX];
      XSFFS11(); /* convert fcst to units*/
      if (FFXREC.FFXRTNCD != "0")
        converseLib.validationFailed(10); /* Indicate missing or invalid*/
        FFWREC.XXXMODID = "155";
        set FG0IM001.FG0IMFQT[FG0IWIDX] cursor, bold; /* Highlight*/
      else
        if (FFXREC.FFXNUMB < 0)
          converseLib.validationFailed(10); /* Indicate missing or invalid*/
          FFWREC.XXXMODID = "155";
          set FG0IM001.FG0IMFQT[FG0IWIDX] cursor, bold; /* Highlight*/
        end

        XSFFS10(); /* ; translate units to thousands*/
        FG0IM001.FG0IMFQT[FG0IWIDX] = FFXREC.FFXCHAR;
      end
    end

    FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX - 1;

  end

   /* ------------------------------------------------------------*/
   /* validate the global change total qty field*/
   /* ------------------------------------------------------------*/

  if (FG0IM001.FG0IMCTQ != " ")
    FFXREC.FFXCHAR = FG0IM001.FG0IMCTQ;
    XSFFS11(); /* global change total to units*/
    if (FFXREC.FFXRTNCD != "0")
      converseLib.validationFailed(10); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "155";
      set FG0IM001.FG0IMCTQ cursor, bold; /* Highlight*/
    else
      if (FFXREC.FFXNUMB < 0)
        converseLib.validationFailed(10); /* cannot be negative number*/
        FFWREC.XXXMODID = "155";
        set FG0IM001.FG0IMCTQ cursor, bold; /* Highlight*/
      else
        if (FG0IW03.FG0IWUQT == 0)
          converseLib.validationFailed(234); /* total must exist to modify*/
          FFWREC.XXXMODID = "155";
          set FG0IM001.FG0IMCTQ cursor, bold; /* Highlight*/
        end
      end

      XSFFS10();
      FG0IM001.FG0IMCTQ = FFXREC.FFXCHAR;
    end
  end

   /* ------------------------------------------------------------*/
   /* validate the global change percent field*/
   /* ------------------------------------------------------------*/

  if (FG0IM001.FG0IMPCT != 0)
    if (FG0IM001.FG0IMPCT > 100)
      converseLib.validationFailed(10);
      FFWREC.XXXMODID = "155";
      set FG0IM001.FG0IMPCT cursor, bold;
    else
      if (FG0IW03.FG0IWUQT == 0)
        converseLib.validationFailed(234); /* total must exist to modify*/
        FFWREC.XXXMODID = "155";
        set FG0IM001.FG0IMPCT cursor, bold; /* Highlight*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate product category code*/
   /* ------------------------------------------------------------*/

  XPCREC.XPCCD = FG0IM001.XPCCD;
  if (XPCREC.XPCKEY in XPCTBL.XPCKEY
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    FG0IM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
  else
    FG0IM001.XPCABRV = " ";
    converseLib.validationFailed(118);
    FFWREC.XXXMODID = "155";
    set FG0IM001.XPCCD cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate product type group code*/
   /* ------------------------------------------------------------*/

  if (FG0IM001.YPGCD in YPGTBL.YPGCD
   && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A"
   && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y")
    FG0IM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
  else
    FG0IM001.YPGABRV = " ";
    converseLib.validationFailed(118);
    FFWREC.XXXMODID = "155";
    set FG0IM001.YPGCD cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate year/history option field*/
   /* ------------------------------------------------------------*/

  FG0IS30();

   /* ------------------------------------------------------------*/
   /* validate forecast target qty*/
   /* ------------------------------------------------------------*/

  if (FG0IM001.FG0IMCTG != FG0IW01.FG0IWCTG)
    FFXREC.FFXCHAR = FG0IM001.FG0IMCTG;
    XSFFS11(); /* forecast target fqt*/
    if (FFXREC.FFXRTNCD != "0")
      converseLib.validationFailed(10); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "155";
      set FG0IM001.FG0IMCTG cursor, bold; /* Highlight*/
    else
      if (FFXREC.FFXNUMB < 0)
        converseLib.validationFailed(10); /* Indicate missing or invalid*/
        FFWREC.XXXMODID = "155";
        set FG0IM001.FG0IMCTG cursor, bold; /* Highlight*/
      end

      FG0IW00.FG0IWSUT = FFXREC.FFXNUMB;
                                   /* save target for first time*/
      XSFFS10();
      FG0IM001.FG0IMCTG = FFXREC.FFXCHAR;
      FG0IW00.FG0IWSTG = FFXREC.FFXCHAR;
    end
  end

   /* ------------------------------------------------------------*/
   /* validate end yymm range and begin yymm range*/
   /* ------------------------------------------------------------*/

  set FFZREC empty;

  FFZREC.FFZMONTH = 6;
  FFZREC.FFZBYYMM = FG0IM001.FG0IMBRG;
  FFZREC.FFZEYYMM = FG0IM001.FG0IMERG;

  XSFFS35(); /* edit date range*/

  if (FFZREC.FFZENDRC == "1")
    set FG0IM001.FG0IMERG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "155";
  else
    if (FFZREC.FFZENDRC == "2")
      set FG0IM001.FG0IMERG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "155";
    else
      if (FFZREC.FFZENDRC == "3")
        set FG0IM001.FG0IMERG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "155";
      end
    end
  end

  if (FFZREC.FFZBEGRC == "1")
    set FG0IM001.FG0IMBRG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "155";
  else
    if (FFZREC.FFZBEGRC == "2")
      set FG0IM001.FG0IMBRG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "155";
    else
      if (FFZREC.FFZBEGRC == "3")
        set FG0IM001.FG0IMBRG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "155";
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* check mutually exclusive entry fields*/
   /* ------------------------------------------------------------*/

  FG0IW00.FG0IWIDX = FG0IW02.FG0IWTIX - 1; /* nbr of lines*/

  while (FG0IW00.FG0IWIDX >= 1) /* process temp storage*/

    if (FG0IM001.FG0IMCPT[FG0IWIDX] != 0)
      if (FG0IM001.FG0IMSPT[FG0IWIDX] != FG0IW02.FG0IWSPT[FG0IWIDX]
       || FG0IM001.FG0IMFQT[FG0IWIDX] != FG0IW02.FG0IWFQT[FG0IWIDX]
       || FG0IM001.FG0IMCTQ != " "
       || FG0IM001.FG0IMPCT != 0)
        FG0IW00.FG0IWERF = "Y";
      else
        FG0IW00.FG0IWPIX = FG0IW00.FG0IWIDX - 1;
        while (FG0IW00.FG0IWPIX >= 1)
          if (FG0IM001.FG0IMSPT[FG0IWPIX] != FG0IW02.FG0IWSPT[FG0IWPIX]
           || FG0IM001.FG0IMFQT[FG0IWPIX] != FG0IW02.FG0IWFQT[FG0IWPIX])
            FG0IW00.FG0IWERF = "Y";
          end
          FG0IW00.FG0IWPIX = FG0IW00.FG0IWPIX - 1;
        end
      end
    end

    if (FG0IM001.FG0IMSPT[FG0IWIDX] != FG0IW02.FG0IWSPT[FG0IWIDX])
      FG0IW00.FG0IWSPF = "Y";
      if (FG0IM001.FG0IMCPT[FG0IWIDX] != 0
       || FG0IM001.FG0IMFQT[FG0IWIDX] != FG0IW02.FG0IWFQT[FG0IWIDX]
       || FG0IM001.FG0IMCTQ != " "
       || FG0IM001.FG0IMPCT != 0)
        FG0IW00.FG0IWERF = "Y";
      else
        FG0IW00.FG0IWPIX = FG0IW00.FG0IWIDX - 1;
        while (FG0IW00.FG0IWPIX >= 1)
          if (FG0IM001.FG0IMCPT[FG0IWPIX] != 0
           || FG0IM001.FG0IMFQT[FG0IWPIX] != FG0IW02.FG0IWFQT[FG0IWPIX])
            FG0IW00.FG0IWERF = "Y";
          end
          FG0IW00.FG0IWPIX = FG0IW00.FG0IWPIX - 1;
        end
      end
    end

    if (FG0IM001.FG0IMFQT[FG0IWIDX] != FG0IW02.FG0IWFQT[FG0IWIDX])
      if (FG0IM001.FG0IMCPT[FG0IWIDX] != 0
       || FG0IM001.FG0IMSPT[FG0IWIDX] != FG0IW02.FG0IWSPT[FG0IWIDX]
       || FG0IM001.FG0IMCTQ != " "
       || FG0IM001.FG0IMPCT != 0)
        FG0IW00.FG0IWERF = "Y";
      else
        FG0IW00.FG0IWPIX = FG0IW00.FG0IWIDX - 1;
        while (FG0IW00.FG0IWPIX >= 1)
          if (FG0IM001.FG0IMCPT[FG0IWPIX] != 0
           || FG0IM001.FG0IMSPT[FG0IWPIX] != FG0IW02.FG0IWSPT[FG0IWPIX])
            FG0IW00.FG0IWERF = "Y";
          end
          FG0IW00.FG0IWPIX = FG0IW00.FG0IWPIX - 1;
        end
      end
    end

    FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX - 1; /* decrement table index*/

  end

  if (FG0IM001.FG0IMCTQ != " "
   && FG0IM001.FG0IMPCT != 0)
    FG0IW00.FG0IWERF = "Y";
  end

   /* ------------------------------------------------------------*/
   /* if entries were made in more than one column highlight all*/
   /* fields that have changed and display error message*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.FG0IWERF == "Y")

    FG0IW00.FG0IWIDX = FG0IW02.FG0IWTIX - 1; /* nbr of lines*/

    while (FG0IW00.FG0IWIDX >= 1) /* process temp storage*/

      if (FG0IM001.FG0IMCPT[FG0IWIDX] != 0)
        set FG0IM001.FG0IMCPT[FG0IWIDX] cursor, bold;
      end

      if (FG0IM001.FG0IMSPT[FG0IWIDX] != FG0IW02.FG0IWSPT[FG0IWIDX])
        set FG0IM001.FG0IMSPT[FG0IWIDX] cursor, bold;
      end

      if (FG0IM001.FG0IMFQT[FG0IWIDX] != FG0IW02.FG0IWFQT[FG0IWIDX])
        set FG0IM001.FG0IMFQT[FG0IWIDX] cursor, bold;
      end

      FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX - 1;

    end

    if (FG0IM001.FG0IMCTQ != " ")
      set FG0IM001.FG0IMCTQ cursor, bold;
    end

    if (FG0IM001.FG0IMPCT != 0)
      set FG0IM001.FG0IMPCT cursor, bold;
    end

    converseLib.validationFailed(233);
    FFWREC.XXXMODID = "155";

  end

   /* ------------------------------------------------------------*/
   /* validate forecast target fqt/fcst total fqt for line pct*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.FG0IWSPF == "Y"
   && FG0IW03.FG0IWUQT == 0)
    if (FG0IM001.FG0IMCTG == "    0"
     || FG0IM001.FG0IMCTG == " ")
      converseLib.validationFailed(8); /* required field*/
      FFWREC.XXXMODID = "155";
      set FG0IM001.FG0IMCTG cursor, bold; /* Highlight*/
    end
  end

   /* ------------------------------------------------------------*/
   /* validate 's'election field*/
   /* ------------------------------------------------------------*/

  FG0I154();

   /* -----------------------------------------------------*/
   /* check all modified fields except selection*/
   /* -----------------------------------------------------*/

  if (FG0IW00.FG0IWSLF == "Y")

    FG0IS12(); /* check modifiable fields*/

  end

   /* ------------------------------------------------------------*/
   /* verify category percent total*/
   /* ------------------------------------------------------------*/

  if (FG0IW03.FG0IWSPT != 0
   && FG0IW03.FG0IWSPT != 100)

    /* ------------------------------------------------------------*/
     /* if category percent is not equal to 100, and an entry*/
     /* was made in another column display error*/
    /* ------------------------------------------------------------*/

    if (FG0IW00.FG0IWSPF != "Y")
      FG0IW00.FG0IWIDX = FG0IW02.FG0IWNLD; /* nbr of lines*/
      while (FG0IW00.FG0IWIDX >= 1) /* process temp storage*/

        if (FG0IM001.FG0IMCPT[FG0IWIDX] != 0)
          set FG0IM001.FG0IMCPT[FG0IWIDX] bold;
        end
        if (FG0IM001.FG0IMSPT[FG0IWIDX] != FG0IW02.FG0IWSPT[FG0IWIDX])
          set FG0IM001.FG0IMSPT[FG0IWIDX] bold;
        end
        if (FG0IM001.FG0IMFQT[FG0IWIDX] != FG0IW02.FG0IWFQT[FG0IWIDX])
          set FG0IM001.FG0IMFQT[FG0IWIDX] bold;
        end
        FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX - 1;
      end

      if (FG0IM001.FG0IMCTQ != " ")
        set FG0IM001.FG0IMCTQ bold;
      end
      if (FG0IM001.FG0IMPCT != 0)
        set FG0IM001.FG0IMPCT bold;
      end

      set FG0IM001.FG0IMSPT[1] cursor;
      set FG0IM001.FG0IMSPT[FG0IWTIX] bold;
      converseLib.validationFailed(159);
      FFWREC.XXXMODID = "155";
    end

    /* ---------------------------------------------------------*/
     /* category percent was change but will not be recalculated*/
     /* because of other errors, must redisplay error message*/
    /* ---------------------------------------------------------*/

    if (FG0IW00.FG0IWSPF == "Y"
     && converseVar.validationMsgNum != 0)

      set FG0IM001.FG0IMSPT[1] cursor;
      set FG0IM001.FG0IMSPT[FG0IWTIX] bold;
      converseLib.validationFailed(159);
      FFWREC.XXXMODID = "155";
    end
  end

   /* ---------------------------------------------------------*/
   /* if key data change verify dfcast.vffxrf01 data exists*/
   /* ---------------------------------------------------------*/

  if (converseVar.validationMsgNum != 118)
    if (FG0IM001.XPCCD != FFWREC.XPCCD
     || FG0IM001.YPGCD != FFWREC.YPGCD)

      FG0IS16(); /* select dfcast.vffxrf01 row*/

      if (SQLCA.VAGen_SQLCODE == 0)
        FFWREC.XPLCD = FF2REC.XPLCD;
      else
        FFWREC.XPLCD = " ";
        set FG0IM001.XPCCD bold;
        set FG0IM001.YPGCD cursor, bold;
        converseLib.validationFailed(203);
        FFWREC.XXXMODID = "155";
      end
    end
  end


end // end FG0I155

// upd temp storage qtys/pcts
Function FG0I156()

   /* ------------------------------------------------------------*/
   /* init qty change flag*/
   /* ------------------------------------------------------------*/

  FG0IW00.FG0IWQTF = "N"; /* fqt change flag*/

   /* ------------------------------------------------------------*/
   /* save current temporary storage page nbr*/
   /* ------------------------------------------------------------*/

  FG0IW00.FG0IWSTP = FG0IW00.XXXTSPAG;

   /* ------------------------------------------------------------*/
   /* forecast target fqt*/
   /* ------------------------------------------------------------*/

  if (FG0IM001.FG0IMCTG != FG0IW01.FG0IWCTG)

    FFXREC.FFXCHAR = FG0IM001.FG0IMCTG;
    XSFFS11();
    FG0IW01.FG0IWUCT = FFXREC.FFXNUMB;
    XSFFS10();
    FG0IW01.FG0IWCTG = FFXREC.FFXCHAR;

    FG0IW00.FG0IWDCF = "Y";

  end

   /* ------------------------------------------------------------*/
   /* global change percent entered*/
   /* ------------------------------------------------------------*/

  if (FG0IM001.FG0IMPCT != 0)

    FG0IW00.FG0IWIDX = 1; /* process all pages in working storage*/
    while (FG0IW00.FG0IWIDX <= FG0IW00.FG0IWFPG)

      FG0IW00.FG0IWDMF = "N"; /* data modified flag*/
      FG0IW00.XXXTSPAG = FG0IW00.FG0IWIDX;

      FG0IS10(); /* read temporary storage*/

      FG0IW00.FG0IWPIX = FG0IW02.FG0IWTIX - 1;

      while (FG0IW00.FG0IWPIX >= 1)
        if (FG0IW02.FG0IWUQT[FG0IWPIX] > 0)

           /* calculate the adjustment fqt*/

          FG0IW00.FG0IWNM1 = FG0IM001.FG0IMPCT * FG0IW02.FG0IWUQT[FG0IWPIX];
          FG0IW00.FG0IWNM1 = FG0IW00.FG0IWNM1 / 100; /* adjustment fqt*/

           /* calculate the new forecast fqt*/

          FFXREC.FFXNUMB = FG0IW02.FG0IWUQT[FG0IWPIX] + FG0IW00.FG0IWNM1;
          FG0IW02.FG0IWUQT[FG0IWPIX] = FFXREC.FFXNUMB;
          XSFFS10();
          FG0IW02.FG0IWFQT[FG0IWPIX] = FFXREC.FFXCHAR;

           /* calculate the forecast total fqt*/

          FG0IW03.FG0IWUQT = FG0IW03.FG0IWUQT + FG0IW00.FG0IWNM1;

          FG0IW00.FG0IWDMF = "Y";

        end

        FG0IW00.FG0IWPIX = FG0IW00.FG0IWPIX - 1;

      end

      if (FG0IW00.FG0IWDMF == "Y")
        FG0IS11(); /* update temporary storage*/
        FG0IW00.FG0IWDCF = "Y";
        FG0IW00.FG0IWQTF = "Y";
      end

      FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX + 1;

    end

    return;

  end

   /* ------------------------------------------------------------*/
   /* global change total fqt entered*/
   /* ------------------------------------------------------------*/

  if (FG0IM001.FG0IMCTQ != " ")

     /* load new forecast total fqt*/

    FFXREC.FFXCHAR = FG0IM001.FG0IMCTQ;
    XSFFS11();
    FG0IW03.FG0IWUQT = FFXREC.FFXNUMB; /* tot fcst fqt*/
    XSFFS10();
    FG0IW03.FG0IWFQT = FFXREC.FFXCHAR;

    FG0IW00.FG0IWIDX = 1; /* process all pages in working storage*/
    while (FG0IW00.FG0IWIDX <= FG0IW00.FG0IWFPG)

      FG0IW00.FG0IWDMF = "N"; /* data modified flag*/
      FG0IW00.XXXTSPAG = FG0IW00.FG0IWIDX;

      FG0IS10(); /* read temporary storage*/

      FG0IW00.FG0IWPIX = FG0IW02.FG0IWTIX - 1;

      while (FG0IW00.FG0IWPIX >= 1)
        if (FG0IW02.FG0IWSPT[FG0IWPIX] > 0)

           /* calculate new forecast fqts*/

          FG0IW00.FG0IWNM1 = FG0IW02.FG0IWSPT[FG0IWPIX] * FG0IW03.FG0IWUQT;
          FG0IW00.FG0IWNM1 = FG0IW00.FG0IWNM1 / 100;

          FG0IW02.FG0IWUQT[FG0IWPIX] = FG0IW00.FG0IWNM1;
          FFXREC.FFXNUMB = FG0IW00.FG0IWNM1;
          XSFFS10();
          FG0IW02.FG0IWFQT[FG0IWPIX] = FFXREC.FFXCHAR;

          FG0IW00.FG0IWDMF = "Y";

        end

        FG0IW00.FG0IWPIX = FG0IW00.FG0IWPIX - 1;

      end

      if (FG0IW00.FG0IWDMF == "Y")
        FG0IS11(); /* update temporary storage*/
        FG0IW00.FG0IWDCF = "Y";
        FG0IW00.FG0IWQTF = "Y";
      end

      FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX + 1;

    end

    return;

  end

   /* ------------------------------------------------------------*/
   /* process product category fqt/percentages*/
   /* ------------------------------------------------------------*/

  FG0IW00.FG0IWPIX = FG0IW02.FG0IWTIX - 1;

  while (FG0IW00.FG0IWPIX >= 1)

    /* ------------------------------------------------------------*/
     /* change sales forecast quantity if changed*/
    /* ------------------------------------------------------------*/

    if (FG0IM001.FG0IMFQT[FG0IWPIX] != FG0IW02.FG0IWFQT[FG0IWPIX])

       /* calculate the difference between the new and old forecast*/
       /* fqts and adjust the forecast total fqt using the difference*/

      FFXREC.FFXCHAR = FG0IM001.FG0IMFQT[FG0IWPIX];
      XSFFS11();
      FG0IW00.FG0IWNM1 = FFXREC.FFXNUMB - FG0IW02.FG0IWUQT[FG0IWPIX];
      FG0IW03.FG0IWUQT = FG0IW03.FG0IWUQT + FG0IW00.FG0IWNM1;

       /* load the new forecast fqt*/

      FG0IW02.FG0IWUQT[FG0IWPIX] = FFXREC.FFXNUMB;
      XSFFS10();
      FG0IW02.FG0IWFQT[FG0IWPIX] = FFXREC.FFXCHAR;

      FG0IW00.FG0IWDCF = "Y";
      FG0IW00.FG0IWQTF = "Y";

    end

    /* ------------------------------------------------------------*/
     /* calculate category percent if changed*/
    /* ------------------------------------------------------------*/

    if (FG0IM001.FG0IMSPT[FG0IWPIX] != FG0IW02.FG0IWSPT[FG0IWPIX])

       /* load/calculate cat percent*/

      FG0IW00.FG0IWPC1 = FG0IM001.FG0IMSPT[FG0IWPIX];
      FG0IW00.FG0IWPC1 = FG0IW00.FG0IWPC1 - FG0IW02.FG0IWSPT[FG0IWPIX];
      FG0IW03.FG0IWSPT = FG0IW03.FG0IWSPT + FG0IW00.FG0IWPC1;
      FG0IW02.FG0IWSPT[FG0IWPIX] = FG0IM001.FG0IMSPT[FG0IWPIX];

       /* calculate the new forecast fqt*/

      if (FG0IW03.FG0IWUQT == 0)
        FG0IW00.FG0IWNM1 = FG0IW02.FG0IWSPT[FG0IWPIX] * FG0IW01.FG0IWUCT;
        FG0IW00.FG0IWNM1 = FG0IW00.FG0IWNM1 / 100; /* new fcst fqt*/
        FG0IW03.FG0IWUQT = FG0IW01.FG0IWUCT;
      else
        FG0IW00.FG0IWNM1 = FG0IW02.FG0IWSPT[FG0IWPIX] * FG0IW03.FG0IWUQT;
        FG0IW00.FG0IWNM1 = FG0IW00.FG0IWNM1 / 100; /* new fcst fqt*/
      end

       /* load new forecast fqts*/

      FG0IW02.FG0IWUQT[FG0IWPIX] = FG0IW00.FG0IWNM1; /* fcst fqt*/
      FFXREC.FFXNUMB = FG0IW00.FG0IWNM1;
      XSFFS10();
      FG0IW02.FG0IWFQT[FG0IWPIX] = FFXREC.FFXCHAR;

      FG0IW00.FG0IWDCF = "Y";

    end

    /* ------------------------------------------------------------*/
     /* calculate change percent if entered*/
    /* ------------------------------------------------------------*/

    if (FG0IM001.FG0IMCPT[FG0IWPIX] != 0)

      FG0IW00.FG0IWNM1 = FG0IW02.FG0IWUQT[FG0IWPIX]; /* fcst fqt*/

       /* calculate the adjustment fqt*/

      FG0IW00.FG0IWNM2 = FG0IM001.FG0IMCPT[FG0IWPIX] * FG0IW00.FG0IWNM1;
      FG0IW00.FG0IWNM2 = FG0IW00.FG0IWNM2 / 100; /* adjustment fqt*/

       /* calculate the new forecast fqt*/

      FG0IW02.FG0IWUQT[FG0IWPIX] = FG0IW00.FG0IWNM1 + FG0IW00.FG0IWNM2;
      FFXREC.FFXNUMB = FG0IW00.FG0IWNM1 + FG0IW00.FG0IWNM2;
      XSFFS10();
      FG0IW02.FG0IWFQT[FG0IWPIX] = FFXREC.FFXCHAR;

       /* calculate the new forecast total fqt*/

      FG0IW03.FG0IWUQT = FG0IW03.FG0IWUQT + FG0IW00.FG0IWNM2;

      FG0IW00.FG0IWDCF = "Y";
      FG0IW00.FG0IWQTF = "Y";

    end

    FG0IW00.FG0IWPIX = FG0IW00.FG0IWPIX - 1; /* line index*/

    if (FG0IW00.FG0IWPIX == 0
     && FG0IW00.FG0IWDCF == "Y")
      FG0IS11(); /* update temporary storage*/
    end
  end


end // end FG0I156

// re-calculate style percents
Function FG0I157()

   /* ----------------------------------------------------------*/
   /* if qty changed re-calculate product category fcst percents*/
   /* ----------------------------------------------------------*/

  if (FG0IW00.FG0IWQTF == "Y")
    FG0IW00.FG0IWIDX = 1; /* init nbr of pages index*/
    while (FG0IW00.FG0IWIDX <= FG0IW00.FG0IWFPG)
      FG0IW00.XXXTSPAG = FG0IW00.FG0IWIDX; /* process temp storage*/
      FG0IS10(); /* read temp storage*/
      FG0IW00.FG0IWPIX = FG0IW02.FG0IWTIX - 1;
      while (FG0IW00.FG0IWPIX >= 1)

        if (FG0IW02.FG0IWUQT[FG0IWPIX] != 0)
          FG0IW00.FG0IWNM1 = FG0IW02.FG0IWUQT[FG0IWPIX] * 100;
          FG0IW02.FG0IWSPT[FG0IWPIX] = mathLib.round(FG0IW00.FG0IWNM1 / FG0IW03.FG0IWUQT, -mathLib.decimals(FG0IW02.FG0IWSPT[FG0IWPIX]));
        else
          FG0IW02.FG0IWSPT[FG0IWPIX] = 0;
        end

        FG0IW00.FG0IWPIX = FG0IW00.FG0IWPIX - 1; /* decrement line index*/

      end

      FG0IS11(); /* update temporary storage*/

      FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX + 1; /* increment page index*/

    end
    if (FG0IW03.FG0IWUQT != 0)
      FG0IW03.FG0IWSPT = 100; /* default percent total to 100*/
    else
      FG0IW03.FG0IWSPT = 0; /* default percent total to 0*/
    end
  end

   /* ------------------------------------------------------------*/
   /* load total forecast qty, and total style grp percent*/
   /* ------------------------------------------------------------*/

   /* translate total forecast qty*/

  FFXNUMB = FG0IW03.FG0IWUQT;
  XSFFS10();
  FG0IW03.FG0IWFQT = FFXCHAR;

   /* ------------------------------------------------------------*/
   /* re-calculate variance qty : total forecast qty - target qty*/
   /* ------------------------------------------------------------*/

  FG0IW01.FG0IWUVQ = FG0IW03.FG0IWUQT - FG0IW01.FG0IWUCT;

  FFXREC.FFXNUMB = FG0IW01.FG0IWUVQ;
  XSFFS10();
  FG0IW01.FG0IWVQT = FFXREC.FFXCHAR;

   /* ------------------------------------------------------------*/
   /* re-calculate variance percent :*/
     /* (variance qty * 100) / target qty*/
   /* ------------------------------------------------------------*/

  if (FG0IW01.FG0IWUCT != 0)
    FG0IW00.FG0IWNM1 = FG0IW01.FG0IWUVQ * 100;
    FG0IW01.FG0IWVPT = FG0IW00.FG0IWNM1 / FG0IW01.FG0IWUCT;
  else
    FG0IW01.FG0IWVPT = 0;
  end

   /* ------------------------------------------------------------*/
   /* obtain current data*/
   /* ------------------------------------------------------------*/

  FG0IW00.XXXTSPAG = FG0IW00.FG0IWSTP;

  FG0IS10(); /* read temporary storage*/

   /* ------------------------------------------------------------*/
   /* if style percent is not equal to 0 or 100 display error*/
   /* data and message*/
   /* ------------------------------------------------------------*/

  FG0IM001.FG0IMCTG = FG0IW01.FG0IWCTG; /* forecast target fqt*/
  FG0IM001.FG0IMVQT = FG0IW01.FG0IWVQT; /* variance fqt*/
  FG0IM001.FG0IMVPT = FG0IW01.FG0IWVPT; /* variance percent*/

  FG0IW00.FG0IWPIX = 1;
  while (FG0IW00.FG0IWPIX < FG0IW02.FG0IWTIX) /* process temp storage*/

    FG0IM001.FG0IMFQT[FG0IWPIX] = FG0IW02.FG0IWFQT[FG0IWPIX];
    FG0IM001.FG0IMSPT[FG0IWPIX] = FG0IW02.FG0IWSPT[FG0IWPIX];

    FG0IW00.FG0IWPIX = FG0IW00.FG0IWPIX + 1; /* increment load index*/

  end

  FG0IM001.FG0IMFQT[FG0IWTIX] = FG0IW03.FG0IWFQT; /* new fcst fqt*/
  FG0IM001.FG0IMSPT[FG0IWTIX] = FG0IW03.FG0IWSPT; /* new cat pct*/

   /* -----------------------------------------------------------*/
   /* if style percent fields were changed and total does not*/
   /* equal 0 or 100 display error message*/
   /* ------------------------------------------------------------*/

  if (FG0IW03.FG0IWSPT != 0
   && FG0IW03.FG0IWSPT != 100)

    set FG0IM001.FG0IMSPT[FG0IWTIX] bold;
    set FG0IM001.FG0IMSPT[1] cursor;
    converseLib.validationFailed(159);
    FFWREC.XXXMODID = "157";

  end


end // end FG0I157

// ck key: modifiable fields
Function FG0I158()

   /* -----------------------------------------------------*/
   /* verify modifiable fields on current page*/
   /* -----------------------------------------------------*/

  FG0IW00.FG0IWPIX = FG0IW02.FG0IWTIX - 1; /* nbr of lines loaded*/

  while (FG0IW00.FG0IWPIX >= 1) /* process temp storage*/

    if (FG0IM001.FG0IMCPT[FG0IWPIX] != 0)
      set FG0IM001.FG0IMCPT[FG0IWPIX] cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "158";
    end
    if (FG0IM001.FG0IMSPT[FG0IWPIX] != FG0IW02.FG0IWSPC[FG0IWPIX])
      set FG0IM001.FG0IMSPT[FG0IWPIX] cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "158";
    end
    if (FG0IW02.FG0IWUQT[FG0IWPIX] != FG0IW02.FG0IWSQT[FG0IWPIX])
      set FG0IM001.FG0IMFQT[FG0IWPIX] cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "158";
    end
    if (FG0IM001.FG0IMSEL[FG0IWPIX] != " ")
      set FG0IM001.FG0IMSEL[FG0IWPIX] cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "158";
    end

    FG0IW00.FG0IWPIX = FG0IW00.FG0IWPIX - 1; /* decrement table index*/

  end

  if (FG0IM001.FG0IMCTQ != " ")
    set FG0IM001.FG0IMCTQ cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "158";
  end

  if (FG0IM001.FG0IMPCT != 0)
    set FG0IM001.FG0IMPCT cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "158";
  end

  if (FG0IW01.FG0IWUCT != FG0IW01.FG0IWSCT)
    set FG0IM001.FG0IMCTG cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "158";
  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

   /* ------------------------------------------------------------*/
   /* if nothing was changed on the current page verify*/
   /* additional pages in temporary storage*/
   /* ------------------------------------------------------------*/

  FG0IW00.FG0IWSTP = FG0IW00.XXXTSPAG; /* save current page*/

  FG0IW00.FG0IWIDX = 1; /* process all pages in working storage*/
  while (FG0IW00.FG0IWIDX <= FG0IW00.FG0IWFPG)

    FG0IW00.XXXTSPAG = FG0IW00.FG0IWIDX;

    FG0IS10(); /* read temporary storage*/

    /* -----------------------------------------------------*/
     /* verify fcst fqt and category percent*/
    /* -----------------------------------------------------*/

    FG0IW00.FG0IWPIX = FG0IW02.FG0IWTIX - 1; /* nbr of lines loaded*/

    while (FG0IW00.FG0IWPIX >= 1) /* process temp storage*/

      if (FG0IW02.FG0IWSPT[FG0IWPIX] != FG0IW02.FG0IWSPC[FG0IWPIX])
        converseLib.validationFailed(238);
        FFWREC.XXXMODID = "158";
      end
      if (FG0IW02.FG0IWUQT[FG0IWPIX] != FG0IW02.FG0IWSQT[FG0IWPIX])
        converseLib.validationFailed(238);
        FFWREC.XXXMODID = "158";
      end

      FG0IW00.FG0IWPIX = FG0IW00.FG0IWPIX - 1; /* decrement table index*/

    end

    FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX + 1; /* line index*/

  end

  FG0IW00.XXXTSPAG = FG0IW00.FG0IWSTP; /* set to current page*/

  FG0IS10(); /* read temporary storage*/


end // end FG0I158

// verify color forecast
Function FG0I159()
   /* ------------------------------------------------------------*/
   /* verify if the style group have been forecasted*/
   /* ------------------------------------------------------------*/

  FG0IW00.FG0IWIDX = FG0IW02.FG0IWTIX - 1;
  while (FG0IW00.FG0IWIDX >= 1)

    if (FG0IM001.FG0IMSEL[FG0IWIDX] == "S")
      if (FFWREC.FFEWSNBR != 0)
        set FFLREC empty;
        FFLREC.SYBSTGNB = FG0IW02.FG0IWSNB[FG0IWIDX];
        FG0IS03(); /* select dfcast.vwsgrp01*/
        if (SQLCA.VAGen_SQLCODE == 100
         || FFLREC.FFECLRFL == "N")
          converseLib.validationFailed(284);
          FFWREC.XXXMODID = "154";
          set FG0IM001.FG0IMSEL[FG0IWIDX] cursor, bold;
        end
      end
    end
    FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX - 1;
  end
end // end FG0I159

// Process valid input request
Function FG0I160()
   /* ------------------------------------------------------------*/
   /* indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/

  FG0IW00.FG0IWSWF = "Y"; /* set format map switch*/

   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA/ffwrec*/
   /* ------------------------------------------------------------*/

  FFWREC.YPGCD = FG0IM001.YPGCD; /* product type group*/
  if (FFWREC.YPGCD in YPGTBL.YPGCD)
    FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
  end

  FFWREC.XPCCD = FG0IM001.XPCCD; /* product category*/
  XPCREC.XPCCD = FG0IM001.XPCCD; /* product category*/
  if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
    FFWREC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
  end

  FFWREC.FFABEGMO = FFZREC.FFZBEGMO;
  FFWREC.FFAENDMO = FFZREC.FFZENDMO;

  FG0IW01.FG0IWYOP = FG0IM001.FG0IMYOP;
  FG0IW01.FG0IWHOP = FG0IM001.FG0IMHOP;

  if (converseVar.eventKey is enter
   && FG0IW00.FG0IWSWR == "Y") /* KEY DATA MODIFIED*/
    FG0IW00.XXXTSPAG = 1; /* Reset current page number*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* request to scroll backwards*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* display next season*/
    FG0IW00.XXXTSPAG = FG0IW00.XXXTSPAG - 1;
    FG0IW00.FG0IWSWR = "Y";
    return;
  end

   /* ------------------------------------------------------------*/
   /* request to scroll foward*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* display next season*/
    FG0IW00.XXXTSPAG = FG0IW00.XXXTSPAG + 1;
    FG0IW00.FG0IWSWR = "Y";
    return;
  end

   /* ------------------------------------------------------------*/
   /* request to transfer to style group pf14*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14)

    COMMAREA.CATOAP = "FG0H"; /* to application*/

    XSFFS01(); /* common exit routine*/

    FG0IW00.FG0IWSWR = "N"; /* request data switch*/
    FG0IW00.FG0IWSWF = "Y"; /* format screen m001*/

    return;

  end

   /* --------------------------------------------------------*/
   /* explode group request pf16*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* explode group request*/

    FG0I170(); /* explode style groups*/
    if (converseVar.validationMsgNum != 0)
      exit stack;
    end
  end

   /* --------------------------------------------------------*/
   /* explode color request pf17*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is pf17) /* explode color request*/

    FG0I165(); /* explode select color*/

    if (converseVar.validationMsgNum != 0) /* duplicate data*/

      FFWREC.XXXMODID = "160";

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll out data changes*/

      exit stack;

    else

      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit();

    end
  end

   /* ------------------------------------------------------------*/
   /* history data requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf18) /* display history data*/

    set FG0IW04 empty; /* init map 002 work record*/

    FG0IW00.XXXTSPAG = 1;
    FG0IW04.FG0IWYO1 = FG0IM001.FG0IMYOP;
    FG0IW04.FG0IWHO1 = FG0IM001.FG0IMHOP;
    FG0IW04.FG0IWSWF = "Y"; /* set format switch*/
    FG0IW04.FG0IWSWR = "Y"; /* set request for data switch*/
    FG0IW00.FG0IWSWD = "2"; /* request fg0im002 display*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* if data has been changed and pf15(save) or 'S'elect*/
   /* has been requested update database*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not pf16 /* explode not requested*/
   && converseVar.eventKey not pf17)

    if (converseVar.eventKey is pf15 /* save requested by user*/
     || FG0IW00.FG0IWSLF == "Y")     /* product cat selected*/

      XX0XS01(); /* Obtain date and time*/

      if (FFWREC.FFEWSNBR == 0)
        FG0I166(); /* obtain next work sheet nbr*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.commit();

        FG0I167(); /* format/insert dfcast.vwdgrp01 row*/
        FG0I168(); /* format/insert dfcast.vwline01 row*/
        FG0I169(); /* format/insert dfcast.vwltyp01 row*/
        FG0IS17(); /* format/insert dfcast.vwcat001 row*/

        FFWREC.FFEWSNBR = FF1REC.FF1WSNBR; /* load new wrk sht nbr*/
      else
        FFEREC.FFEGRPFL = "Y"; /* style group flag*/
        FG0IS18(); /* update dfcast.vwdgrp01 row*/
        FG0IS19(); /* update dfcast.vwline01 row*/
        FG0IS20(); /* update dfcast.vwltyp01 row*/
        FG0IS21(); /* update dfcast.vwcat001 row*/
      end

      /* --------------------------------------------------------*/
       /* format/insert dfcast.vwsgrp01 rows for each style group*/
      /* --------------------------------------------------------*/

      FG0IW00.FG0IWPAG = FG0IW00.XXXTSPAG; /* save the current page*/
      FG0IW00.XXXTSPAG = 1; /* process temp storage*/
      while (FG0IW00.XXXTSPAG <= FG0IW00.FG0IWFPG)

        FG0IS10(); /* read temporary storage*/

        FG0IW00.FG0IWIDX = FG0IW02.FG0IWTIX - 1;
        while (FG0IW00.FG0IWIDX >= 1)

          set FFLREC empty;
          FFLREC.SYBSTGNB = FG0IW02.FG0IWSNB[FG0IWIDX];
          FG0IS03(); /* select dfcast.vwsgrp01 row*/

          if (SQLCA.VAGen_SQLCODE == 0)
            FG0IS22(); /* update dfcast.vwsgrp01 row*/
          else
            FFLREC.FF6SLFCT = FG0IW02.FG0IWUQT[FG0IWIDX];
            FFLREC.FFEFCTGT = FG0IW02.FG0IWUQT[FG0IWIDX];
            FFLREC.FF8DEVFL = FG0IW02.FG0IWDEV[FG0IWIDX];
            FG0IS23(); /* format/insert dfcast.vwsgrp01 rows*/
          end

          FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX - 1;
        end
        FG0IW00.XXXTSPAG = FG0IW00.XXXTSPAG + 1;
      end

      FG0IW00.XXXTSPAG = FG0IW00.FG0IWPAG; /* reset current page*/
      if (FG0IW00.FG0IWFCL == "Y") /* no more style groups exist that*/
                                   /* havent*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.commit(); /* been displayed*/
      else
        FG0IS65(); /* process any remaining style groups*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.commit();
      end

      FG0IS24();
                                   /* purge any excess forecast work sheets*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit();

      FG0IW00.FG0IWSWR = "Y"; /* requested data switch*/
      FFWREC.FFWMODSW = "N"; /* init data entered flag*/
      FG0IW00.FG0IWMOD = "N"; /* init data entered flag*/
      FG0IW00.FG0IWDCF = "N"; /* init data entered flag*/

      if (converseVar.eventKey is pf15) /* save request*/
        FFWREC.XXXMSGNO = 33;
        FFWREC.XXXMODID = "160";
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* if pf16 was pressed transfer to application 'FG0r'*/
   /* if pf17 was pressed transfer to application 'FG0S'*/
   /* if a product was selected transfer to application 'FG0I'*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || FG0IW00.FG0IWSLF == "Y")

    if (converseVar.eventKey is pf16) /* explode category*/
      COMMAREA.CATOAP = "FG0R"; /* to application*/
    else
      if (converseVar.eventKey is pf17) /* explode color*/
        COMMAREA.CATOAP = "FG0S"; /* to application*/
      else /* ; explode color/style grp*/
        COMMAREA.CATOAP = "FG0J"; /* to application*/
      end
    end

    FG0IS01(); /* purge temp storage*/

    XSFFS01(); /* common exit routine*/

    FG0IW00.FG0IWSWR = "N"; /* request data switch*/
    FG0IW00.FG0IWSWF = "Y"; /* format screen m001*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* if data was loaded, and temporary storage was modified*/
   /* set ffwrec modified switch yes.*/
   /* ------------------------------------------------------------*/

  if (FG0IW01.CACHGFL == "Y"
   && FG0IW00.FG0IWDCF == "Y")
    FFWREC.FFWMODSW = "Y";
    FG0IW00.FG0IWMOD = "Y";
  end


end // end FG0I160

// select 's1' dfcast.vrcmth01
Function FG0I161()
   /* ------------------------------------------------------------*/
   /* Select set on dfcast.vrcmth01 table.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* load fffrec record*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "S1";
  FFFREC.FFFBEGMO = FFWREC.FFABEGMO; /* low month*/
  FFFREC.FFFENDMO = FFWREC.FFAENDMO; /* high month*/

   /* ------------------------------------------------------------*/
   /* load ffdrec record*/
   /* ------------------------------------------------------------*/

  set FFDREC empty;

  FFDREC.FFABEGMO = FFWREC.FFABEGMO;
  FFDREC.FFAENDMO = FFWREC.FFAENDMO;
  FFDREC.YPGCD = FFWREC.YPGCD;
  FFDREC.XPCCD = FFWREC.XPCCD;

   /* ------------------------------------------------------------*/
   /* select set dfcast.vrcmth01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3770" (FFFREC, SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "161"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET DFCAST.VRCMTH01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0I161

// fetch 'n1'  dfcast.vrcmth01
Function FG0I162()
   /* ------------------------------------------------------------*/
   /* fetch dfcast.vrcmth01 row*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "N1";

  try
    call "IO3770" (FFFREC, SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "162"; /* MODULE IDENTIFICATION*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DFCAST.VRCMTH01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0I162

// add dfcast.vwgmth01 row
Function FG0I163()
   /* ------------------------------------------------------------*/
   /* add dfcast.vwgmth01 table row*/
   /* ------------------------------------------------------------*/

  FFMREC.FFEWSNBR = FFWREC.FFEWSNBR;
  FFMREC.YPGCD = FFWREC.YPGCD;
  FFMREC.FF4FCTMO = FFDREC.FF4FCTMO;
  FFMREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFMREC.ZZZSTM = XX0XW01.XX0XWTIM;
  FFMREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFMREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3870" ("A ", SQLCA, FFMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -803) /* duplicate data*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "163"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VWGMTH01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWGMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFMREC.FFMKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0I163

// close 'c1' dfcast.vrcmth01
Function FG0I164()
   /* ------------------------------------------------------------*/
   /* close dfcast.vrcmth01 table.*/
   /* ------------------------------------------------------------*/
  FFFREC.FFFFUNCD = "C1";

  try
    call "IO3770" (FFFREC, SQLCA, FFDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "164"; /* MODULE IDENTIFICATION*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE S2 DFCAST.VRCMTH01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFDREC.FFDKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0I164

// explode color/style
Function FG0I165()
   /* ------------------------------------------------------------*/
   /* explode style/color by month using routine xsffs58*/
   /* ------------------------------------------------------------*/

  set FFYREC empty;

  FFYREC.FFYLEVEL = 2;
  FFYREC.FFEWSNBR = FFWREC.FFEWSNBR; /* old wrk sheet nbr*/
  FFYREC.YPGCD = FFWREC.YPGCD; /* product type group*/
  FFYREC.XPCCD = FFWREC.XPCCD; /* product category code*/

  if ("S" in FG0IM001.FG0IMSEL)
    FFYREC.SYBSTGNB = FG0IM001.FG0IMSNB[sysVar.arrayIndex];
                                   /* style group number*/
  end

  FFYREC.XXXUSRID = COMMAREA.CAUSERID;
  FFYREC.ZZZSDT = XX0XW01.XX0XWDAT; /* current date*/
  FFYREC.ZZZSTM = XX0XW01.XX0XWTIM; /* current time*/
  TA1REC.TA1PGMNM = "FG0I165";

  XSFFS58();


end // end FG0I165

// obtain next work sheet nbr
Function FG0I166()
   /* ------------------------------------------------------------*/
   /* obtain next work sheet number dfcast.vffctl01*/
   /* ------------------------------------------------------------*/

  set FF1REC empty; /* Clear row storage area*/

  FF1REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FF1REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3660" ("U3", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "166"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VFFCTL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF1REC.FF1GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0I166

// add dfcast.vwdgrp01 row
Function FG0I167()
   /* ------------------------------------------------------------*/
   /* add dfcast.vwdgrp01 table row*/
   /* ------------------------------------------------------------*/

  set FFEREC empty; /* Clear row storage area*/

  FFEREC.XXXUSRID = COMMAREA.CAUSERID;
  FFEREC.FFEWSNBR = FF1REC.FF1WSNBR; /* new wrk sht nbr*/
  FFEREC.YSMXDV = "10"; /* div code*/
  FFEREC.XCTCD = "USA"; /* country code*/
  FFEREC.FFABEGMO = FFWREC.FFABEGMO; /* begin rangeccyymm*/
  FFEREC.FFAENDMO = FFWREC.FFAENDMO; /* end range ccyymm*/
  FFEREC.FFELINFL = "Y"; /* product line flag*/
  FFEREC.FFETYPFL = "Y"; /* product type flag*/
  FFEREC.FFECATFL = "Y"; /* category flag*/
  FFEREC.FFEGRPFL = "Y"; /* group flag*/
  FFEREC.FFECLRFL = "N"; /* color flag*/
  FFEREC.FFELMOFL = "N"; /* line month flag*/
  FFEREC.FFECMOFL = "N"; /* category month flag*/
  FFEREC.FFEGMOFL = "N"; /* group month flag*/
  FFEREC.FFESMOFL = "N"; /* color flag*/
  FFEREC.ZZZSDT = XX0XW01.XX0XWDAT; /* current date*/
  FFEREC.ZZZSTM = XX0XW01.XX0XWTIM; /* current time*/
  FFEREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* current date*/
  FFEREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* current time*/

  try
    call "IO3850" ("A ", SQLCA, FFEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "167"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VWDGRP01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWDGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFEREC.FFEKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0I167

// add dfcast.vwline01 row
Function FG0I168()
   /* ------------------------------------------------------------*/
   /* add dfcast.vwline01 table row*/
   /* ------------------------------------------------------------*/
  set FFGREC empty;

  FFGREC.FFEWSNBR = FF1REC.FF1WSNBR;
  FFGREC.XPLCD = FFWREC.XPLCD;
  FFGREC.FF6SLFCT = FG0IW03.FG0IWUQT;
  FFGREC.FFGYRIND = FG0IW01.FG0IWYOP;
  FFGREC.FFGSDIND = FG0IW01.FG0IWHOP;
  FFGREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFGREC.ZZZSTM = XX0XW01.XX0XWTIM;
  FFGREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFGREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3890" ("A ", SQLCA, FFGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "168"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VWLINE01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFGREC.FFGKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0I168

// add dfcast.vwltyp01 row
Function FG0I169()
   /* ------------------------------------------------------------*/
   /* add dfcast.vwltyp01 table row*/
   /* ------------------------------------------------------------*/
  set FFIREC empty;

  FFIREC.FFEWSNBR = FF1REC.FF1WSNBR;
  FFIREC.XPLCD = FFWREC.XPLCD;
  FFIREC.YPGCD = FFWREC.YPGCD;
  FFIREC.FF6SLFCT = FG0IW03.FG0IWUQT;
  FFIREC.FFGYRIND = FG0IW01.FG0IWYOP;
  FFIREC.FFGSDIND = FG0IW01.FG0IWHOP;
  FFIREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFIREC.ZZZSTM = XX0XW01.XX0XWTIM;
  FFIREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFIREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3910" ("A ", SQLCA, FFIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "169"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VWLTYP01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFIREC.FFIKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0I169

// explode style groups
Function FG0I170()

   /* --------------------------------------------------------*/
   /* explode group request pf16*/
   /* --------------------------------------------------------*/

  XX0XS01(); /* get current date and time*/
  FG0IW00.FG0IWEXP = "N"; /* init something exploded flag*/
  if (FFWREC.SYBSTGNB == " ") /* all style groups selected*/
    FG0IW00.FG0IWPAG = FG0IW00.XXXTSPAG; /* save the current page*/
    FG0IW00.XXXTSPAG = 1; /* process temp storage*/
    while (FG0IW00.XXXTSPAG <= FG0IW00.FG0IWFPG)
      FG0IS10(); /* read temporary storage*/
      FG0IW00.FG0IWIDX = FG0IW02.FG0IWTIX - 1;
      while (FG0IW00.FG0IWIDX >= 1)
        FG0IW00.FG0IWSAV = FG0IW02.FG0IWSNB[FG0IWIDX]; /* save sty grp*/
        FG0I171(); /* attempt to explode the style group*/
        FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX - 1;
      end
      FG0IW00.XXXTSPAG = FG0IW00.XXXTSPAG + 1;
    end
    FG0IW00.XXXTSPAG = FG0IW00.FG0IWPAG; /* restore current page*/
    FG0IS10(); /* restore current working storage*/
    if (FG0IW00.FG0IWFCL == "N") /* more style groups exist - not displayed*/
      FG0IS66(); /* process any remaining style groups*/
    end
  else
    FG0IW00.FG0IWPIX = FG0IW02.FG0IWTIX - 1;
                                   /* certain style groups selected*/
    while (FG0IW00.FG0IWPIX >= 1)
      if (FG0IM001.FG0IMSEL[FG0IWPIX] == "S") /* if this style group selected*/
        FG0IW00.FG0IWSAV = FG0IW02.FG0IWSNB[FG0IWPIX];
        FG0I171(); /* attempt to explode the style group*/
      end
      FG0IW00.FG0IWPIX = FG0IW00.FG0IWPIX - 1;
    end
  end

  if (FG0IW00.FG0IWEXP == "Y") /* at least one style group exploded*/
    converseLib.validationFailed(0); /* reset error message to xfer to fg0r*/
    FFEREC.FFEGMOFL = "Y"; /* style group monthly flag*/
    FG0IS18(); /* update dfcast.vwdgrp01*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();
  end

end // end FG0I170

// explode a style group
Function FG0I171()
   /* --------------------------------------------------------*/
   /* explode a style group*/
   /* --------------------------------------------------------*/
  FG0I179(); /* edit style group*/
  if (converseVar.validationMsgNum == 0)
    FG0I161(); /* select set dfcast.vrcmth01*/
    FG0I162(); /* fetch dfcast vrcmth01*/
    while (SQLCA.VAGen_SQLCODE == 0)
      set FFMREC empty;
      FFMREC.SYBSTGNB = FG0IW00.FG0IWSAV;
      FG0IW00.FG0IWNM1 = FFLREC.FF6SLFCT * FFDREC.FFDDMPCT;
      FFMREC.FF6SLFCT = FG0IW00.FG0IWNM1 / 100;

      FF3REC.SYBSTGNB = FFMREC.SYBSTGNB;
      FG0IS67(); /* Obtain style dev flag*/
      FFMREC.FF8DEVFL = FF3REC.FF8DEVFL;

      FG0I163(); /* add  dfcast.vwgmth01*/
      FG0I162(); /* fetch dfcast vrcmth01*/
    end
    FG0IW00.FG0IWEXP = "Y"; /* stygrp exploded*/
    FG0I164(); /* close dfcast.vrcmth01*/
  end
end // end FG0I171

// select 's1' dfcast.vwgmth01
Function FG0I175()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/


  FFMREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFMREC.YPGCD = FFWREC.YPGCD; /* Type group code*/

  set FFFREC empty; /* Clear row storage area*/

  FFFREC.FFFBEGMO = FFWREC.FFABEGMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFWREC.FFAENDMO; /* Ending month*/
  FFFREC.FFFFUNCD = "S1"; /* Function code*/

  try
    call "IO3870" (FFFREC, SQLCA, FFMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "175"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWGMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFMREC.FFMKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0I175

// fetch 'n1' dfcast.vwgmth01
Function FG0I176()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3870" ("N1", SQLCA, FFMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "176"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWGMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFMREC.FFMKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0I176

// close 'c1' dfcast.vwgmth01
Function FG0I177()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "C1"; /* Function code*/

  try
    call "IO3870" (FFFREC, SQLCA, FFMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "177"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWGMTH01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0I177

// look for style/color forecasts
Function FG0I178()
   /* ------------------------------------------------------------*/
   /* if request to explode group and the forecast exists*/
   /* at the style/color level display error message.*/
   /* ------------------------------------------------------------*/

  FG0IW00.FG0IWCFL = "N"; /* init flag*/
  FG0IS53(); /* select set dfcast.vffsty01*/
  FG0IS54(); /* fetch first dfcast.vffsty01*/
  while (SQLCA.VAGen_SQLCODE == 0
   && FG0IW00.FG0IWCFL == "N")
    FG0IS56(); /* select sum dfcast.vmsty001*/
    if (FF9REC.FF6SLFCT != 0) /* forecast quantity was found*/
      FG0IW00.FG0IWCFL = "Y";
    else
      FG0IS54(); /* fetch next dfcast.vffsty01*/
    end
  end
  FG0IS55(); /* close dfcast.vffsty01*/

end // end FG0I178

// Edit style groups to explode
Function FG0I179()
  FFLREC.SYBSTGNB = FG0IW00.FG0IWSAV;
  FG0IS03(); /* check for saved forecast*/
  if (SQLCA.VAGen_SQLCODE == 100)
    FFWREC.XXXMODID = "179";
    converseLib.validationFailed(296);
  end

  if (converseVar.validationMsgNum == 0)
    set FF3REC empty;
    FF3REC.SYBSTGNB = FG0IW00.FG0IWSAV;
    FG0I178(); /* check for style/color forecasts*/
    if (FG0IW00.FG0IWCFL == "Y") /* style color masters found*/
      FFWREC.XXXMODID = "179";
      converseLib.validationFailed(158);
    end
  end

  if (converseVar.validationMsgNum == 0)
    set FFMREC empty;
    FFMREC.SYBSTGNB = FG0IW00.FG0IWSAV;
    FG0I175(); /* select 's1' dfcast.vwgmth01 mo range*/
    FG0I176(); /* fetch 's1' dfcast.vwgmth01*/
    if (SQLCA.VAGen_SQLCODE == 0) /* row in month range found*/
      FFWREC.XXXMODID = "179"; /* style group prev exploded*/
      converseLib.validationFailed(294);
    end
    FG0I177(); /* close 'c1' dfcast.vwgmth01*/
  end
end // end FG0I179

// Inquire/maintain a table row
Function FG0I200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FG0I205(); /* Obtain data*/

  FG0I210(); /* Format and display the map*/

  FG0I220(); /* Check attention identifier*/

  FG0I230(); /* Reset fields to normal intensity*/

  FG0I240(); /* Verify the entered data*/

  FG0I250(); /* Process valid input request*/

end // end FG0I200

// Obtain the data to display
Function FG0I205()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FG0IW04.FG0IWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Read temporary storage*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.XXXTSPAG <= FG0IW00.FG0IWFPG
   || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHS1
   || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHD1
   || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHS2
   || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHD2
   || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHS3
   || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHD3)
    FG0IS10();
  else
    set FG0IW02 empty;
  end

   /* ------------------------------------------------------------*/
   /* select all historical style groups for the requested*/
   /* category, product type and the requested range from*/
   /* dprodg.vmxprc01 table.*/
   /* ------------------------------------------------------------*/

  if (FG0IW04.FG0IWYO1 == 1) /* 1 year ago history requested*/
    FG0IS61(); /* Process historical data*/
  end

  if (FG0IW04.FG0IWYO1 == 2) /* 2 years ago history requested*/
    FG0IS62(); /* Process historical data*/
  end

  if (FG0IW04.FG0IWYO1 == 3) /* 3 years ago history requested*/
    FG0IS63(); /* Process historical data*/
  end

   /* ------------------------------------------------------------*/
   /* translate historical sales qty total, and historical demand*/
   /* qty total from units to thousands*/
   /* ------------------------------------------------------------*/

  FG0IW00.FG0IWIDX = 1;
  while (FG0IW00.FG0IWIDX <= 3)
    if (FG0IW04.FG0IWYO1 == FG0IW00.FG0IWIDX)
      FFXREC.FFXNUMB = FG0IW03.FG0IWUHS[FG0IWIDX];
      XSFFS10();
      FG0IW03.FG0IWHSQ[FG0IWIDX] = FFXREC.FFXCHAR;
    end
    FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX + 1;
  end

  FG0IW00.FG0IWIDX = 1;
  while (FG0IW00.FG0IWIDX <= 3)
    if (FG0IW04.FG0IWYO1 == FG0IW00.FG0IWIDX)
      FFXREC.FFXNUMB = FG0IW03.FG0IWUHD[FG0IWIDX];
      XSFFS10();
      FG0IW03.FG0IWHDQ[FG0IWIDX] = FFXREC.FFXCHAR;
    end
    FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX + 1;
  end

   /* ------------------------------------------------------------*/
   /* calculate style group percents*/
   /* ------------------------------------------------------------*/

  FG0IW00.FG0IWPIX = 1;
  while (FG0IW00.FG0IWPIX <= FG0IW02.FG0IWNLD)

    /* ------------------------------------------------------------*/
     /* caluculate historical sales percent one year prior:*/
    /* ------------------------------------------------------------*/

    if (FG0IW04.FG0IWYO1 == 1
     && FG0IW02.FG0IWUH1[FG0IWPIX] != 0
     && FG0IW03.FG0IWUHS[1] != 0)
      FG0IW00.FG0IWNM1 = FG0IW02.FG0IWUH1[FG0IWPIX] * 100;
      FG0IW00.FG0IWNM2 = FG0IW03.FG0IWUHS[1];
      FG0IW02.FG0IWHP1[FG0IWPIX] = mathLib.round(FG0IW00.FG0IWNM1 / FG0IW00.FG0IWNM2, -mathLib.decimals(FG0IW02.FG0IWHP1[FG0IWPIX]));
    end

    /* ------------------------------------------------------------*/
     /* caluculate historical sales percent two years prior:*/
    /* ------------------------------------------------------------*/

    if (FG0IW04.FG0IWYO1 == 2
     && FG0IW02.FG0IWUH2[FG0IWPIX] != 0
     && FG0IW03.FG0IWUHS[2] != 0)
      FG0IW00.FG0IWNM1 = FG0IW02.FG0IWUH2[FG0IWPIX] * 100;
      FG0IW00.FG0IWNM2 = FG0IW03.FG0IWUHS[2];
      FG0IW02.FG0IWHP2[FG0IWPIX] = mathLib.round(FG0IW00.FG0IWNM1 / FG0IW00.FG0IWNM2, -mathLib.decimals(FG0IW02.FG0IWHP2[FG0IWPIX]));
    end

    /* ------------------------------------------------------------*/
     /* caluculate historical sales percent three years prior:*/
    /* ------------------------------------------------------------*/

    if (FG0IW04.FG0IWYO1 == 3
     && FG0IW02.FG0IWUH3[FG0IWPIX] != 0
     && FG0IW03.FG0IWUHS[3] != 0)
      FG0IW00.FG0IWNM1 = FG0IW02.FG0IWUH3[FG0IWPIX] * 100;
      FG0IW00.FG0IWNM2 = FG0IW03.FG0IWUHS[3];
      FG0IW02.FG0IWHP3[FG0IWPIX] = mathLib.round(FG0IW00.FG0IWNM1 / FG0IW00.FG0IWNM2, -mathLib.decimals(FG0IW02.FG0IWHP3[FG0IWPIX]));
    end

    /* ------------------------------------------------------------*/
     /* caluculate historical demand percent one year prior:*/
    /* ------------------------------------------------------------*/

    if (FG0IW04.FG0IWYO1 == 1
     && FG0IW02.FG0IWUD1[FG0IWPIX] != 0
     && FG0IW03.FG0IWUHD[1] != 0)
      FG0IW00.FG0IWNM1 = FG0IW02.FG0IWUD1[FG0IWPIX] * 100;
      FG0IW00.FG0IWNM2 = FG0IW03.FG0IWUHD[1];
      FG0IW02.FG0IWDP1[FG0IWPIX] = mathLib.round(FG0IW00.FG0IWNM1 / FG0IW00.FG0IWNM2, -mathLib.decimals(FG0IW02.FG0IWDP1[FG0IWPIX]));
    end

    /* ------------------------------------------------------------*/
     /* caluculate historical demand percent two years prior:*/
    /* ------------------------------------------------------------*/

    if (FG0IW04.FG0IWYO1 == 2
     && FG0IW02.FG0IWUD2[FG0IWPIX] != 0
     && FG0IW03.FG0IWUHD[2] != 0)
      FG0IW00.FG0IWNM1 = FG0IW02.FG0IWUD2[FG0IWPIX] * 100;
      FG0IW00.FG0IWNM2 = FG0IW03.FG0IWUHD[2];
      FG0IW02.FG0IWDP2[FG0IWPIX] = mathLib.round(FG0IW00.FG0IWNM1 / FG0IW00.FG0IWNM2, -mathLib.decimals(FG0IW02.FG0IWDP2[FG0IWPIX]));
    end

    /* ------------------------------------------------------------*/
     /* caluculate historical demand percent three years prior:*/
    /* ------------------------------------------------------------*/

    if (FG0IW04.FG0IWYO1 == 3
     && FG0IW02.FG0IWUD3[FG0IWPIX] != 0
     && FG0IW03.FG0IWUHD[3] != 0)
      FG0IW00.FG0IWNM1 = FG0IW02.FG0IWUD3[FG0IWPIX] * 100;
      FG0IW00.FG0IWNM2 = FG0IW03.FG0IWUHD[3];
      FG0IW02.FG0IWDP3[FG0IWPIX] = mathLib.round(FG0IW00.FG0IWNM1 / FG0IW00.FG0IWNM2, -mathLib.decimals(FG0IW02.FG0IWDP3[FG0IWPIX]));
    end
    /* ------------------------------------------------------------*/
     /* accumulate historical sales percent and historical demand*/
     /* percent.*/
    /* ------------------------------------------------------------*/

    FG0IW03.FG0IWHSP[1] = FG0IW02.FG0IWHP1[FG0IWPIX] + FG0IW03.FG0IWHSP[1];
    FG0IW03.FG0IWHSP[2] = FG0IW02.FG0IWHP2[FG0IWPIX] + FG0IW03.FG0IWHSP[2];
    FG0IW03.FG0IWHSP[3] = FG0IW02.FG0IWHP3[FG0IWPIX] + FG0IW03.FG0IWHSP[3];
    FG0IW03.FG0IWHDP[1] = FG0IW02.FG0IWDP1[FG0IWPIX] + FG0IW03.FG0IWHDP[1];
    FG0IW03.FG0IWHDP[2] = FG0IW02.FG0IWDP2[FG0IWPIX] + FG0IW03.FG0IWHDP[2];
    FG0IW03.FG0IWHDP[3] = FG0IW02.FG0IWDP3[FG0IWPIX] + FG0IW03.FG0IWHDP[3];

    FG0IW00.FG0IWPIX = FG0IW00.FG0IWPIX + 1;

  end

   /* ------------------------------------------------------------*/
   /* update temporary storage with style group percents*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHS1
   || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHS2
   || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHS3
   || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHD1
   || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHD2
   || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHD3)
    FG0IS11(); /* update temporary storage with stygrp pcts*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FG0IW04.FG0IWYO1 == 1 
   && FG0IW00.FG0IWHS1 == 0 /* No pages formatted*/
   && FG0IW00.FG0IWHD1 == 0)

    FFWREC.XXXMODID = "110"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/

    return; /* Exit to continue processing*/

  end

  if (FG0IW04.FG0IWYO1 == 2 
   && FG0IW00.FG0IWHS2 == 0 /* No pages formatted*/
   && FG0IW00.FG0IWHD2 == 0)

    FFWREC.XXXMODID = "110"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/

    return; /* Exit to continue processing*/

  end

  if (FG0IW04.FG0IWYO1 == 3 
   && FG0IW00.FG0IWHS3 == 0 /* No pages formatted*/
   && FG0IW00.FG0IWHD3 == 0)

    FFWREC.XXXMODID = "110"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/

    return; /* Exit to continue processing*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FG0IW04.FG0IWSWR = "N"; /* Request for data switch*/

   /* ------------------------------------------------------------*/
   /* Check if there is no record obtained on this page.*/
   /* If it is none, show no more page information.*/
   /* Note : The reason of doing editing here is, when the PF8*/
          /* was verified the last record has been reached and*/
          /* the last record was found on the 1st row of next*/
          /* page.*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.XXXTSPAG > FG0IW00.FG0IWHS1
   && FG0IW00.XXXTSPAG > FG0IW00.FG0IWHS2
   && FG0IW00.XXXTSPAG > FG0IW00.FG0IWHS3
   && FG0IW00.XXXTSPAG > FG0IW00.FG0IWHD1
   && FG0IW00.XXXTSPAG > FG0IW00.FG0IWHD2
   && FG0IW00.XXXTSPAG > FG0IW00.FG0IWHD3)
    FFWREC.XXXMODID = "205";
    converseLib.validationFailed(7); /* Indicate no more page*/
    FG0IW04.FG0IWSWF = "N"; /* format switch*/
    FG0IW00.XXXTSPAG = FG0IW00.XXXTSPAG - 1;
  end
end // end FG0I205

// Format and converse the map
Function FG0I210()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* if no errors format map*/

    if (FG0IW04.FG0IWSWF == "Y")
      FG0I211(); /* Format the data on the map*/
    end

  else
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* load message number*/

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FG0IM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FG0IM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG0IM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* load page information*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.XXXTSPAG > 0)

    set FG0IM002.XXXLITPG skip;
    FG0IM002.XXXTSPAG = FG0IW00.XXXTSPAG;

  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* error message number*/
    FG0IM002.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    set FG0IM002 alarm; /* Indicate sound alarm*/
  end

  converse FG0IM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0;

  COMMAREA.CATOAP = FG0IM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG0IM002.CAITEM; /* Application data*/


end // end FG0I210

// Format the display data
Function FG0I211()
   /* ------------------------------------------------------------*/
   /* init map*/
   /* ------------------------------------------------------------*/

  set FG0IM002 initial;

  FG0IW04.FG0IWSWF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* Format fg0im002 using passed data*/
   /* ------------------------------------------------------------*/

  FG0IW00.FG0IWWDT = FFWREC.FFABEGMO; /* w/s date field*/
  FG0IM002.FG0IMBRG = FG0IW00.FG0IWWYM; /* begin month range*/
  FG0IW00.FG0IWWDT = FFWREC.FFAENDMO; /* w/s date field*/
  FG0IM002.FG0IMERG = FG0IW00.FG0IWWYM; /* end month range*/

  FG0IM002.YPGCD = FFWREC.YPGCD; /* product type group*/
  FG0IM002.YPGABRV = FFWREC.YPGABRV; /* product type group abrv*/

  FG0IM002.XPCCD = FFWREC.XPCCD; /* product category*/
  FG0IM002.XPCABRV = FFWREC.XPCABRV; /* product category*/

  FG0IM002.FG0IMYOP = FG0IW04.FG0IWYO1; /* year option*/
  FG0IM002.FG0IMHOP = FG0IW04.FG0IWHO1; /* history option*/

   /* ------------------------------------------------------------*/
   /* load map using fg0iw01 work record*/
   /* ------------------------------------------------------------*/

  set FG0IM002.FG0IMPR1 skip;
  FG0IM002.FG0IMPBR = FG0IW01.FG0IWPBR[FG0IWYO1]; /* prior beg range yymm*/
  set FG0IM002.FG0IMPBR skip;
  set FG0IM002.FG0IMDSH skip;
  FG0IM002.FG0IMPER = FG0IW01.FG0IWPER[FG0IWYO1]; /* prior end range yymm*/
  set FG0IM002.FG0IMPER skip;
  set FG0IM002.FG0IMPR2 skip;
  FG0IM002.FG0IMYDS = FG0IW00.FG0IWYDS[FG0IWYO1]; /* prior year desc*/
  set FG0IM002.FG0IMYDS skip;

   /* ------------------------------------------------------------*/
   /* obtain current historical sales/demand qtys from temp*/
   /* storage*/
   /* ------------------------------------------------------------*/

  FG0IS10(); /* read temporary storage*/

  FG0IW00.FG0IWPIX = 1;
  while (FG0IW00.FG0IWPIX <= 12) /* process temp storage*/

    if (FG0IW04.FG0IWYO1 == 1)
      FG0IM002.FG0IMHSN[FG0IWPIX] = FG0IW02.FG0IWSN1[FG0IWPIX];
      FG0IM002.FG0IMHSM[FG0IWPIX] = FG0IW02.FG0IWSM1[FG0IWPIX];
      FG0IM002.FG0IMHSQ[FG0IWPIX] = FG0IW02.FG0IWHQ1[FG0IWPIX];
      FG0IM002.FG0IMHSP[FG0IWPIX] = FG0IW02.FG0IWHP1[FG0IWPIX];
      FG0IM002.FG0IMHDN[FG0IWPIX] = FG0IW02.FG0IWDN1[FG0IWPIX];
      FG0IM002.FG0IMHDM[FG0IWPIX] = FG0IW02.FG0IWDM1[FG0IWPIX];
      FG0IM002.FG0IMHDQ[FG0IWPIX] = FG0IW02.FG0IWDQ1[FG0IWPIX];
      FG0IM002.FG0IMHDP[FG0IWPIX] = FG0IW02.FG0IWDP1[FG0IWPIX];
    end
    if (FG0IW04.FG0IWYO1 == 2)
      FG0IM002.FG0IMHSN[FG0IWPIX] = FG0IW02.FG0IWSN2[FG0IWPIX];
      FG0IM002.FG0IMHSM[FG0IWPIX] = FG0IW02.FG0IWSM2[FG0IWPIX];
      FG0IM002.FG0IMHSQ[FG0IWPIX] = FG0IW02.FG0IWHQ2[FG0IWPIX];
      FG0IM002.FG0IMHSP[FG0IWPIX] = FG0IW02.FG0IWHP2[FG0IWPIX];
      FG0IM002.FG0IMHDN[FG0IWPIX] = FG0IW02.FG0IWDN2[FG0IWPIX];
      FG0IM002.FG0IMHDM[FG0IWPIX] = FG0IW02.FG0IWDM2[FG0IWPIX];
      FG0IM002.FG0IMHDQ[FG0IWPIX] = FG0IW02.FG0IWDQ2[FG0IWPIX];
      FG0IM002.FG0IMHDP[FG0IWPIX] = FG0IW02.FG0IWDP2[FG0IWPIX];
    end
    if (FG0IW04.FG0IWYO1 == 3)
      FG0IM002.FG0IMHSN[FG0IWPIX] = FG0IW02.FG0IWSN3[FG0IWPIX];
      FG0IM002.FG0IMHDN[FG0IWPIX] = FG0IW02.FG0IWDN3[FG0IWPIX];
      FG0IM002.FG0IMHSQ[FG0IWPIX] = FG0IW02.FG0IWHQ3[FG0IWPIX];
      FG0IM002.FG0IMHSP[FG0IWPIX] = FG0IW02.FG0IWHP3[FG0IWPIX];
      FG0IM002.FG0IMHSM[FG0IWPIX] = FG0IW02.FG0IWSM3[FG0IWPIX];
      FG0IM002.FG0IMHDM[FG0IWPIX] = FG0IW02.FG0IWDM3[FG0IWPIX];
      FG0IM002.FG0IMHDQ[FG0IWPIX] = FG0IW02.FG0IWDQ3[FG0IWPIX];
      FG0IM002.FG0IMHDP[FG0IWPIX] = FG0IW02.FG0IWDP3[FG0IWPIX];
    end

    /* ------------------------------------------------------------*/
     /* load forecast historical sales/demand totals*/
    /* ------------------------------------------------------------*/

    if (FG0IW04.FG0IWYO1 == 1
     && FG0IW00.FG0IWPIX == FG0IW02.FG0IWS1X) /* Reach sales total line*/

      FG0IM002.FG0IMHSM[FG0IWPIX] = "   TOTAL    ";
      FG0IM002.FG0IMHSQ[FG0IWPIX] = FG0IW03.FG0IWHSQ[FG0IWYO1];
      FG0IM002.FG0IMHSP[FG0IWPIX] = 100;

    end

    if (FG0IW04.FG0IWYO1 == 1
     && FG0IW00.FG0IWPIX == FG0IW02.FG0IWD1X) /* Reach demand total line*/

      FG0IM002.FG0IMHDM[FG0IWPIX] = "   TOTAL    ";
      FG0IM002.FG0IMHDQ[FG0IWPIX] = FG0IW03.FG0IWHDQ[FG0IWYO1];
      FG0IM002.FG0IMHDP[FG0IWPIX] = 100;

    end

    if (FG0IW04.FG0IWYO1 == 2
     && FG0IW00.FG0IWPIX == FG0IW02.FG0IWS2X) /* Reach sales total line*/

      FG0IM002.FG0IMHSM[FG0IWPIX] = "   TOTAL    ";
      FG0IM002.FG0IMHSQ[FG0IWPIX] = FG0IW03.FG0IWHSQ[FG0IWYO1];
      FG0IM002.FG0IMHSP[FG0IWPIX] = 100;

    end

    if (FG0IW04.FG0IWYO1 == 2
     && FG0IW00.FG0IWPIX == FG0IW02.FG0IWD2X) /* Reach demand total line*/

      FG0IM002.FG0IMHDM[FG0IWPIX] = "   TOTAL    ";
      FG0IM002.FG0IMHDQ[FG0IWPIX] = FG0IW03.FG0IWHDQ[FG0IWYO1];
      FG0IM002.FG0IMHDP[FG0IWPIX] = 100;

    end

    if (FG0IW04.FG0IWYO1 == 3
     && FG0IW00.FG0IWPIX == FG0IW02.FG0IWS3X) /* Reach sales total line*/

      FG0IM002.FG0IMHSM[FG0IWPIX] = "   TOTAL    ";
      FG0IM002.FG0IMHSQ[FG0IWPIX] = FG0IW03.FG0IWHSQ[FG0IWYO1];
      FG0IM002.FG0IMHSP[FG0IWPIX] = 100;

    end

    if (FG0IW04.FG0IWYO1 == 3
     && FG0IW00.FG0IWPIX == FG0IW02.FG0IWD3X) /* Reach demand total line*/

      FG0IM002.FG0IMHDM[FG0IWPIX] = "   TOTAL    ";
      FG0IM002.FG0IMHDQ[FG0IWPIX] = FG0IW03.FG0IWHDQ[FG0IWYO1];
      FG0IM002.FG0IMHDP[FG0IWPIX] = 100;

    end


    FG0IW00.FG0IWPIX = FG0IW00.FG0IWPIX + 1; /* increment load index*/

  end

end // end FG0I211

// Check attention identifier
Function FG0I220()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* refresh screen*/

    FG0IW04.FG0IWSWF = "Y"; /* format screem m002*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FG0IM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (FG0IM002.CATOAP == "FG0G"
       || FG0IM002.CATOAP == "FG0R")

        FFWREC.XXXMODID = "220"; /* Module identification*/
        converseLib.validationFailed(189); /* Indicate PF key not valid*/
        set FG0IM002.CATOAP cursor, bold; /* Highlight*/

      else

        FG0IS01(); /* purge temp storage*/

        XSFFS01(); /* Exit to another application*/

        FG0IW04.FG0IWSWF = "Y"; /* format screem m002*/

        set FG0IM002.CATOAP cursor, bold; /* Highlight*/

      end
    else

      FFWREC.XXXMODID = "220"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG0IM002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FG0A"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    FG0IW04.FG0IWSWF = "Y"; /* format screem m002*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* pf7 was not pressed*/
   && converseVar.eventKey not pf8   /* pf8 was not pressed*/
   && converseVar.eventKey not pf14  /* pf14 was not pressed*/
   && converseVar.eventKey not pf15  /* pf15 was not pressed*/
  )                                 
    FFWREC.XXXMODID = "220"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FG0I220

// Reset highlighted fields
Function FG0I230()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FG0IM002.FG0IMYOP initialAttributes; /* year option*/
  set FG0IM002.FG0IMHOP initialAttributes; /* history option*/

  set FG0IM002.CATOAP initialAttributes;
  set FG0IM002.CAITEM initialAttributes;

end // end FG0I230

// Verify the entered data
Function FG0I240()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "240"; /* Module identification*/
    set FG0IM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* request to page forward(pf7) or backwards(pf8) verify*/
   /* modifiable fields*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)

    FG0I241(); /* verify scroll request*/

    FG0I242(); /* check modifiable fields*/

  end

   /* ------------------------------------------------------------*/
   /* request for same opt(pf14) or request for chg opt(pf15)*/
   /* or request for print opt(pf19) check modifiable fields*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
  )
    FG0I242(); /* check modifiable fields*/

  end

   /* ------------------------------------------------------------*/
   /* validate entry fields, and key data changes*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)

    /* -------------------------------*/
     /* validate history option field*/
    /* -------------------------------*/

    if (FG0IM002.FG0IMHOP != FG0IW04.FG0IWHO1)
      if (FG0IM002.FG0IMHOP != "S"
       && FG0IM002.FG0IMHOP != "D")
        converseLib.validationFailed(10);
        FFWREC.XXXMODID = "240";
        set FG0IM002.FG0IMHOP cursor, bold;
      end
    end

    /* -------------------------------*/
     /* validate year option field*/
    /* -------------------------------*/

    if (FG0IM002.FG0IMYOP != FG0IW04.FG0IWYO1)
      if (FG0IM002.FG0IMYOP != "1"
       && FG0IM002.FG0IMYOP != "2"
       && FG0IM002.FG0IMYOP != "3")
        converseLib.validationFailed(10);
        FFWREC.XXXMODID = "240";
        set FG0IM002.FG0IMYOP cursor, bold;
      else
        FG0IW00.XXXTSPAG = 1; /* Reset current page number*/
        FG0IW04.FG0IWSWR = "Y"; /* Request data switch*/
      end
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end


end // end FG0I240

// Verify scroll request
Function FG0I241()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FG0IW00.XXXTSPAG < 2)       /* and no previous pages*/

    FFWREC.XXXMODID = "241"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward request*/

    if (FG0IM002.FG0IMYOP == 1) /* 1 year ago*/
      if (FG0IW00.XXXTSPAG >= FG0IW00.FG0IWHS1 /* No more sales*/
       && FG0IW00.XXXTSPAG >= FG0IW00.FG0IWHD1 /* and no more demand*/
       && FG0IW00.FG0IWS1L == "Y"              /* last sales record*/
       && FG0IW00.FG0IWD1L == "Y")             /* last demand record*/

        FFWREC.XXXMODID = "241"; /* Module identification*/
        converseLib.validationFailed(7); /* No more pages to display*/
      end

    end

    if (FG0IM002.FG0IMYOP == 2) /* 2 years ago*/
      if (FG0IW00.XXXTSPAG >= FG0IW00.FG0IWHS2 /* No more sales*/
       && FG0IW00.XXXTSPAG >= FG0IW00.FG0IWHD2 /* and no more demand*/
       && FG0IW00.FG0IWS2L == "Y"              /* last sales record*/
       && FG0IW00.FG0IWD2L == "Y")             /* last demand record*/

        FFWREC.XXXMODID = "241"; /* Module identification*/
        converseLib.validationFailed(7); /* No more pages to display*/
      end

    end

    if (FG0IM002.FG0IMYOP == 3) /* 3 years ago*/
      if (FG0IW00.XXXTSPAG >= FG0IW00.FG0IWHS3 /* No more sales*/
       && FG0IW00.XXXTSPAG >= FG0IW00.FG0IWHD3 /* and no more demand*/
       && FG0IW00.FG0IWS3L == "Y"              /* last sales record*/
       && FG0IW00.FG0IWD3L == "Y")             /* last demand record*/

        FFWREC.XXXMODID = "241"; /* Module identification*/
        converseLib.validationFailed(7); /* No more pages to display*/
      end

    end

  end

end // end FG0I241

// check modifiable fields
Function FG0I242()
   /* ------------------------------------------------------------*/
   /* check modifiable fields*/
   /* ------------------------------------------------------------*/

  if (FG0IM002.FG0IMHOP != FG0IW04.FG0IWHO1)
    set FG0IM002.FG0IMHOP cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "242";
  end

  if (FG0IM002.FG0IMYOP != FG0IW04.FG0IWYO1)
    set FG0IM002.FG0IMYOP cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "242";
  end


end // end FG0I242

// Process valid input request
Function FG0I250()

  FG0IW04.FG0IWSWF = "Y"; /* format map 002*/

  FG0IW04.FG0IWYO1 = FG0IM002.FG0IMYOP; /* year option*/
  FG0IW04.FG0IWHO1 = FG0IM002.FG0IMHOP; /* hist option*/

   /* ------------------------------------------------------------*/
   /* Request to scroll backwards*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* display next season*/
    FG0IW00.XXXTSPAG = FG0IW00.XXXTSPAG - 1;
    FG0IW04.FG0IWSWR = "Y";
    return;
  end

   /* ------------------------------------------------------------*/
   /* Request to scroll foward*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* display next season*/
    FG0IW00.XXXTSPAG = FG0IW00.XXXTSPAG + 1;
    FG0IW04.FG0IWSWR = "Y";
    return;
  end

   /* ------------------------------------------------------------*/
   /* pf14(same opt) has been requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* same option*/
    FG0IW00.XXXTSPAG = 1;
    FG0IW00.FG0IWSWD = "1"; /* request fg0im001 display*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* pf15(chng opt) has been requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* same option*/
    FG0IW00.XXXTSPAG = 1;
    FG0IW01.FG0IWYOP = FG0IM002.FG0IMYOP;
    FG0IW01.FG0IWHOP = FG0IM002.FG0IMHOP;
    FG0IW00.FG0IWSWD = "1"; /* request fg0im001 display*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Save modifiable fields*/
   /* ------------------------------------------------------------*/

  FG0IW04.FG0IWYO1 = FG0IM002.FG0IMYOP;
  FG0IW04.FG0IWHO1 = FG0IM002.FG0IMHOP;


end // end FG0I250

// Open dprodg.vmxprc01 csr
Function FG0IS-100()
   /* ------------------------------------------------------------*/
   /* Select set on dprodg.vmxprc01 table.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Load pg7rec record - dprodg.vmxprc01*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "S1"; /* Function code*/

  PG7REC.XPCCD = FFWREC.XPCCD; /* product line*/
  PG7REC.YPGCD = FFWREC.YPGCD; /* product type group*/
  PG7REC.YSMXDV = "10"; /* division group*/

   /* ------------------------------------------------------------*/
   /* Select set dprodg.vmxprc01*/
   /* ------------------------------------------------------------*/

  try
    call "IO5100" (FFFREC, SQLCA, PG7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S1 ON DPRODG.VMXPRC01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMXPRC01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG7REC.PG7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0IS-100

// Fetch dprodg.vmxprc01 rec
Function FG0IS-200()
   /* ------------------------------------------------------------*/
   /* Fetch dprodg.vmxprc01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO5100" ("N1", SQLCA, PG7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S20"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DPRODG.VMXPRC01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMXPRC01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG7REC.PG7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0IS-200

// Close dprodg.vmxprc01 csr
Function FG0IS-300()
   /* ------------------------------------------------------------*/
   /* Close dprodg.vmxprc01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5100" ("C1", SQLCA, PG7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "S30"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE S1 DPRODG.VMXPRC01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMXPRC01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG7REC.PG7KEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0IS-300

// Proc sales
Function FG0IS-400()
   /* --------------------------------------------------------------------*/
   /* Determine if the date range is all forecast, all actual, or*/
   /* mixed.*/
   /* Translate sales quantities from units to thousands using common*/
   /* routine xsffs10.*/
   /* --------------------------------------------------------------------*/

  if (FG0IW01.FG0IWPED[FG0IWYIX] < FG0IW00.FG0IW-CURR-MO) /* all actual*/
    FG0IS-410();
    FFXREC.FFXNUMB = FG0IW00.FG0IWUHS;
    XSFFS10(); /* translate history sale*/
    FG0IW00.FG0IWHST = FFXREC.FFXCHAR;

  else
    if (FG0IW01.FG0IWPBD[FG0IWYIX] >= FG0IW00.FG0IW-CURR-MO) /* all fcst*/
      FG0IS-430();
      FFXREC.FFXNUMB = FG0IW00.FG0IWUHS;
      XSFFS10(); /* translate history sale*/
      FG0IW00.FG0IWHST = FFXREC.FFXCHAR;

    else
      FFFREC.FFFBEGMO = FG0IW01.FG0IWPBD[FG0IWYIX];
      FFFREC.FFFENDMO = FG0IW00.FG0IW-CURR-MO-MINUS1; /* ACTUAL*/
      FG0IS-410();
      FG0IW00.FG0IWSHS = FG0IW00.FG0IWUHS;

      FFFREC.FFFBEGMO = FG0IW00.FG0IW-CURR-MO; /* FCST*/
      FFFREC.FFFENDMO = FG0IW01.FG0IWPED[FG0IWYIX];
      FG0IS-430();
      FG0IW00.FG0IWUHS = FG0IW00.FG0IWUHS + FG0IW00.FG0IWSHS;

      FFXREC.FFXNUMB = FG0IW00.FG0IWUHS;
      XSFFS10(); /* translate history sale*/
      FG0IW00.FG0IWHST = FFXREC.FFXCHAR;

    end
  end


end // end FG0IS-400

// Obtain actual sales
Function FG0IS-410()
   /* ------------------------------------------------------------*/
   /* Get actual need month sales.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Init work storage quantity fields.*/
   /* ------------------------------------------------------------*/

  FG0IW00.FG0IWUHS = 0; /* init w/s historical sale units*/

   /* ------------------------------------------------------------*/
   /* Obtain actual sales from dfhist.vsyshp01.*/
   /* Note:  routine xsffs54 summarizes totals at the style group*/
   /* level.*/
   /* ------------------------------------------------------------*/

  FG0IS-411();
  FG0IW00.FG0IWUHS = FH5REC.FH5MSHQT;

   /* ----------------------------------------------------------------*/
   /* Determine if carryover quantities need to be obtained.*/
   /* ----------------------------------------------------------------*/

  if (FG0IW00.FG0IW-CURR-MO-MINUS1 <= FFFREC.FFFENDMO
   && FG0IW00.FG0IW-CURR-MO-MINUS1 >= FFFREC.FFFBEGMO)

    FG0IW00.FG0IW-HOLD-END-MO = FFFREC.FFFENDMO;
    FG0IW00.FG0IW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
    FFFREC.FFFENDMO = FG0IW00.FG0IW-CURR-MO-MINUS1;
    FFFREC.FFFBEGMO = FG0IW00.FG0IW-CURR-MO-MINUS1;

    set FH1REC empty;
    FH1REC.YSMXOT = "FT";
    FG0IS-412(); /* get open qty from voqsty01*/
    FH1REC.FH1PAQTY = mathLib.round((FH1REC.FH1PAQTY + FH1REC.FH1ALQTY) *     FG0IW00.FFQLCOFP / 100, -mathLib.decimals(FH1REC.FH1PAQTY));
    FG0IW00.FG0IWUHS = FG0IW00.FG0IWUHS + FH1REC.FH1PAQTY;

    set FH1REC empty;
    FH1REC.YSMXOT = "PR";
    FG0IS-412(); /* get open qty from voqsty01*/
    FH1REC.FH1PAQTY = mathLib.round((FH1REC.FH1PAQTY + FH1REC.FH1ALQTY) *     FG0IW00.FFQLCOPP / 100, -mathLib.decimals(FH1REC.FH1PAQTY));
    FG0IW00.FG0IWUHS = FG0IW00.FG0IWUHS + FH1REC.FH1PAQTY;

    FFFREC.FFFENDMO = FG0IW00.FG0IW-HOLD-END-MO;
    FFFREC.FFFBEGMO = FG0IW00.FG0IW-HOLD-BEG-MO;

  end


  if (FG0IW00.FG0IW-CURR-MO-MINUS2 <= FFFREC.FFFENDMO
   && FG0IW00.FG0IW-CURR-MO-MINUS2 >= FFFREC.FFFBEGMO)

    FG0IW00.FG0IW-HOLD-END-MO = FFFREC.FFFENDMO;
    FG0IW00.FG0IW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
    FFFREC.FFFENDMO = FG0IW00.FG0IW-CURR-MO-MINUS2;
    FFFREC.FFFBEGMO = FG0IW00.FG0IW-CURR-MO-MINUS2;

    set FH1REC empty;
    FH1REC.YSMXOT = "FT";
    FG0IS-412(); /* get open qty from voqsty01*/
    FH1REC.FH1PAQTY = mathLib.round((FH1REC.FH1PAQTY + FH1REC.FH1ALQTY) *     FG0IW00.FFQOCOFP / 100, -mathLib.decimals(FH1REC.FH1PAQTY));
    FG0IW00.FG0IWUHS = FG0IW00.FG0IWUHS + FH1REC.FH1PAQTY;

    set FH1REC empty;
    FH1REC.YSMXOT = "PR";
    FG0IS-412(); /* get open qty from voqsty01*/
    FH1REC.FH1PAQTY = mathLib.round((FH1REC.FH1PAQTY + FH1REC.FH1ALQTY) *     FG0IW00.FFQOCOPP / 100, -mathLib.decimals(FH1REC.FH1PAQTY));
    FG0IW00.FG0IWUHS = FG0IW00.FG0IWUHS + FH1REC.FH1PAQTY;

    FFFREC.FFFENDMO = FG0IW00.FG0IW-HOLD-END-MO;
    FFFREC.FFFBEGMO = FG0IW00.FG0IW-HOLD-BEG-MO;
  end


  if (FG0IW00.FG0IW-CURR-MO-MINUS3 <= FFFREC.FFFENDMO
   && FG0IW00.FG0IW-CURR-MO-MINUS3 >= FFFREC.FFFBEGMO)

    FG0IW00.FG0IW-HOLD-END-MO = FFFREC.FFFENDMO;
    FG0IW00.FG0IW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
    FFFREC.FFFENDMO = FG0IW00.FG0IW-CURR-MO-MINUS3;
    FFFREC.FFFBEGMO = FG0IW00.FG0IW-CURR-MO-MINUS3;

    set FH1REC empty;
    FH1REC.YSMXOT = "*";
    FG0IS-412(); /* get open qty from voqsty01*/
    FH1REC.FH1PAQTY = mathLib.round((FH1REC.FH1PAQTY + FH1REC.FH1ALQTY) * .5, -mathLib.decimals(FH1REC.FH1PAQTY));
    FG0IW00.FG0IWUHS = FG0IW00.FG0IWUHS + FH1REC.FH1PAQTY;

    FFFREC.FFFENDMO = FG0IW00.FG0IW-HOLD-END-MO;
    FFFREC.FFFBEGMO = FG0IW00.FG0IW-HOLD-BEG-MO;

  end


  if (FG0IW00.FG0IW-CURR-MO-MINUS4 <= FFFREC.FFFENDMO
   && FG0IW00.FG0IW-CURR-MO-MINUS4 >= FFFREC.FFFBEGMO)

    FG0IW00.FG0IW-HOLD-END-MO = FFFREC.FFFENDMO;
    FG0IW00.FG0IW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
    FFFREC.FFFENDMO = FG0IW00.FG0IW-CURR-MO-MINUS4;
    FFFREC.FFFBEGMO = FG0IW00.FG0IW-CURR-MO-MINUS4;

    set FH1REC empty;
    FH1REC.YSMXOT = "*";
    FG0IS-412(); /* get open qty from voqsty01*/
    FH1REC.FH1PAQTY = mathLib.round((FH1REC.FH1PAQTY + FH1REC.FH1ALQTY) * .5, -mathLib.decimals(FH1REC.FH1PAQTY));
    FG0IW00.FG0IWUHS = FG0IW00.FG0IWUHS + FH1REC.FH1PAQTY;

    FFFREC.FFFENDMO = FG0IW00.FG0IW-HOLD-END-MO;
    FFFREC.FFFBEGMO = FG0IW00.FG0IW-HOLD-BEG-MO;
  end


end // end FG0IS-410

// Fetch sls from vsyshp01
Function FG0IS-411()
   /* ------------------------------------------------------------*/
   /* Obtain actual sales from dfhist.vsyshp01.*/
   /* Note:  routine xsffs54 summarizes totals at the style group*/
   /* level.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Load fh5rec record - dfhist.vsyshp01*/
   /* ------------------------------------------------------------*/

  set FH5REC empty;

  FH5REC.XLCCD = "10"; /* life cycle code*/
  FH5REC.XQACD = "01"; /* quality code*/
  FH5REC.YSMXOT = "*"; /* sum code*/
  FH5REC.FH1PNAC = "*"; /* national account flag*/
  FH5REC.XPRCD = FFWREC.YPGCD; /* product type group code*/
  FH5REC.SY1STNBR = PG7REC.SYBSTGNB; /* style group number*/
  FH5REC.XDVCD = FFWREC.XPCCD; /* category code*/

  TA1REC.TA1PGMNM = "S-411  "; /* Calling process*/

   /* ------------------------------------------------------------*/
   /* Select sum on dfhist.vsyshp01 table.*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "SN"; /* Summarize by style group*/

  XSFFS54();


end // end FG0IS-411

// Fetch open qty from voqsty01
Function FG0IS-412()
   /* ------------------------------------------------------------*/
   /* Obtain carryover quantities from dfhist.voqcat01*/
   /* ------------------------------------------------------------*/

   /* use sty nbr to pass the sty grp nbr to the subroutine*/
  FH1REC.SY1STNBR = PG7REC.SYBSTGNB;

   /* use div cd to pass the catg cd to the subroutine*/
  FH1REC.XDVCD = FFWREC.XPCCD; /* category code*/

   /* use dim cd to pass the type group cd to the subroutine*/
  FH1REC.XDMCD = FFWREC.YPGCD; /* product type group code*/

  FH1REC.XLCCD = "10"; /* life cycle code*/
  FH1REC.XQACD = "01"; /* quality code*/
  FH1REC.FH1PNAC = "*"; /* product national acct fl*/

  FFFREC.FFFFUNCD = "SG"; /* Summarize by style group*/

  TA1REC.TA1PGMNM = "S-412  ";

  XSFFS-FF5570();

end // end FG0IS-412

// Obtain forecast sales
Function FG0IS-430()
   /* ----------------------------------------------------------*/
   /* Obtain forecasted need month sales from dfcast.vmsgrp01.*/
   /* ----------------------------------------------------------*/

   /* ----------------------------------------------------------*/
   /* Init numeric work fields*/
   /* ----------------------------------------------------------*/

  FG0IW00.FG0IWUHS = 0; /* init w/s historical sale unit*/

  FG0IS-431(); /* select 's' dfcast.vmsgrp01*/
  FG0IW00.FG0IWUHS = FF8REC.FF6SLFCT;

   /* ----------------------------------------------------------*/
   /* If current month with in date range*/
   /* Back out carryover quantities.*/
   /* ----------------------------------------------------------*/

  if (FG0IW00.FG0IW-CURR-MO >= FFFREC.FFFBEGMO
   && FG0IW00.FG0IW-CURR-MO <= FFFREC.FFFENDMO)
    FG0IW00.FG0IW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
    FG0IW00.FG0IW-HOLD-END-MO = FFFREC.FFFENDMO;
    FFFREC.FFFBEGMO = FG0IW00.FG0IW-CURR-MO-MINUS1;
    FFFREC.FFFENDMO = FG0IW00.FG0IW-CURR-MO-MINUS1;

    FG0IS-431(); /* select 's' dfcast.vmsgrp01*/
    FG0IW00.FG0IWUHS = FG0IW00.FG0IWUHS - FF8REC.FF6SLFCT;

    FFFREC.FFFBEGMO = FG0IW00.FG0IW-HOLD-BEG-MO; /* restore date rng*/
    FFFREC.FFFENDMO = FG0IW00.FG0IW-HOLD-END-MO;
  end


end // end FG0IS-430

// Fetch dfcast.vmsgrp01 rec
Function FG0IS-431()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vmsgrp01 row*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Load ff8rec record - dfcast.vmsgrp001*/
   /* ------------------------------------------------------------*/

  set FF8REC empty; /* Clear row storage area*/

  FF8REC.YSMXDV = "10"; /* div code*/
  FF8REC.XCTCD = "*"; /* country code*/
  FF8REC.YPGCD = FFWREC.YPGCD; /* type group code*/
  FF8REC.SYBSTGNB = PG7REC.SYBSTGNB; /* style grp nbr*/

   /* ------------------------------------------------------------*/
   /* Select sum dfcast.vmsgrp001*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "SS"; /* select-sum = function call*/

  try
    call "IO3730" (FFFREC, SQLCA, FF8REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful or zero total, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0    /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100 /* or record not found*/
     || SQLCA.VAGen_SQLCODE == -305) /* or record not found*/

      if (SQLCA.VAGen_SQLCODE == -305) /* or record not found*/
        FF8REC.FF6SLFCT = 0;
      end

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indisgrpe that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "431"; /* Module identifisgrpion*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indisgrpe not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indisgrpe system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE DFCAST.VMSGRP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program applisgrpion*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF8REC.FF8KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0IS-431

// Get catg level sales
Function FG0IS-500()
   /* --------------------------------------------------------------------*/
   /* Determine if the date range is all forecast, all actual, or*/
   /* mixed.*/
   /* --------------------------------------------------------------------*/

  if (FG0IW01.FG0IWPED[FG0IWYIX] < FG0IW00.FG0IW-CURR-MO) /* all actual*/
    FG0IS-510();

  else
    if (FG0IW01.FG0IWPBD[FG0IWYIX] >= FG0IW00.FG0IW-CURR-MO) /* all fcst*/
      FG0IS-530();

    else
      FFFREC.FFFBEGMO = FG0IW01.FG0IWPBD[FG0IWYIX];
      FFFREC.FFFENDMO = FG0IW00.FG0IW-CURR-MO-MINUS1; /* ACTUAL*/
      FG0IS-510();
      FH6REC.FH5MSHQT = FG0IW03.FG0IWUHS[FG0IWYIX];

      FFFREC.FFFBEGMO = FG0IW00.FG0IW-CURR-MO; /* FCST*/
      FFFREC.FFFENDMO = FG0IW01.FG0IWPED[FG0IWYIX];
      FG0IS-530();
      FG0IW03.FG0IWUHS[FG0IWYIX] = FG0IW03.FG0IWUHS[FG0IWYIX] +       FH6REC.FH5MSHQT;

    end
  end


end // end FG0IS-500

// Get actual catg sales
Function FG0IS-510()
   /* ------------------------------------------------------------*/
   /* Obtain historical need month based sales quantities.*/
   /* Load FH6REC record - dfhist.vctshp01, note:  ffabegmo and*/
   /* ffaendmo loaded in fg0i100.*/
   /* ------------------------------------------------------------*/

  FG0IS-511();
  FG0IW03.FG0IWUHS[FG0IWYIX] = FH6REC.FH5MSHQT;

   /* --------------------------------------------------------*/
   /* Check if carryover quantities need to be fetched.*/
   /* --------------------------------------------------------*/

  if (FG0IW00.FG0IW-CURR-MO-MINUS1 >= FFFREC.FFFBEGMO
   && FG0IW00.FG0IW-CURR-MO-MINUS1 <= FFFREC.FFFENDMO)
    FG0IW00.FG0IW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
    FG0IW00.FG0IW-HOLD-END-MO = FFFREC.FFFENDMO;
    FFFREC.FFFBEGMO = FG0IW00.FG0IW-CURR-MO-MINUS1;
    FFFREC.FFFENDMO = FG0IW00.FG0IW-CURR-MO-MINUS1;

    FFFREC.FFFFUNCD = "C1"; /* function code*/
    FG0IS-513(); /* get open qtys from vfhcat01*/
    FG0IW03.FG0IWUHS[FG0IWYIX] = FG0IW03.FG0IWUHS[FG0IWYIX] +     FH3REC.FH1PAQTY;

    FFFREC.FFFBEGMO = FG0IW00.FG0IW-HOLD-BEG-MO;
    FFFREC.FFFENDMO = FG0IW00.FG0IW-HOLD-END-MO;
  end


  if (FG0IW00.FG0IW-CURR-MO-MINUS2 >= FFFREC.FFFBEGMO
   && FG0IW00.FG0IW-CURR-MO-MINUS2 <= FFFREC.FFFENDMO)
    FG0IW00.FG0IW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
    FG0IW00.FG0IW-HOLD-END-MO = FFFREC.FFFENDMO;
    FFFREC.FFFBEGMO = FG0IW00.FG0IW-CURR-MO-MINUS2;
    FFFREC.FFFENDMO = FG0IW00.FG0IW-CURR-MO-MINUS2;

    FFFREC.FFFFUNCD = "C2"; /* function code*/
    FG0IS-513(); /* get open qtys from vfhcat01*/
    FG0IW03.FG0IWUHS[FG0IWYIX] = FG0IW03.FG0IWUHS[FG0IWYIX] +     FH3REC.FH1PAQTY;

    FFFREC.FFFBEGMO = FG0IW00.FG0IW-HOLD-BEG-MO;
    FFFREC.FFFENDMO = FG0IW00.FG0IW-HOLD-END-MO;
  end


  if (FG0IW00.FG0IW-CURR-MO-MINUS3 >= FFFREC.FFFBEGMO
   && FG0IW00.FG0IW-CURR-MO-MINUS3 <= FFFREC.FFFENDMO)
    FG0IW00.FG0IW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
    FG0IW00.FG0IW-HOLD-END-MO = FFFREC.FFFENDMO;
    FFFREC.FFFBEGMO = FG0IW00.FG0IW-CURR-MO-MINUS3;
    FFFREC.FFFENDMO = FG0IW00.FG0IW-CURR-MO-MINUS3;

    FG0IS-515(); /* get open qtys from vfhcat01*/
    FH3REC.FH1PAQTY = mathLib.round((FH3REC.FH1ALQTY + FH3REC.FH1PAQTY) * .5, -mathLib.decimals(FH3REC.FH1PAQTY));
    FG0IW03.FG0IWUHS[FG0IWYIX] = FG0IW03.FG0IWUHS[FG0IWYIX] +     FH3REC.FH1PAQTY;

    FFFREC.FFFBEGMO = FG0IW00.FG0IW-HOLD-BEG-MO;
    FFFREC.FFFENDMO = FG0IW00.FG0IW-HOLD-END-MO;
  end


  if (FG0IW00.FG0IW-CURR-MO-MINUS4 >= FFFREC.FFFBEGMO
   && FG0IW00.FG0IW-CURR-MO-MINUS4 <= FFFREC.FFFENDMO)
    FG0IW00.FG0IW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
    FG0IW00.FG0IW-HOLD-END-MO = FFFREC.FFFENDMO;
    FFFREC.FFFBEGMO = FG0IW00.FG0IW-CURR-MO-MINUS4;
    FFFREC.FFFENDMO = FG0IW00.FG0IW-CURR-MO-MINUS4;

    FG0IS-515(); /* get open qtys from vfhcat01*/
    FH3REC.FH1PAQTY = mathLib.round((FH3REC.FH1ALQTY + FH3REC.FH1PAQTY) * .5, -mathLib.decimals(FH3REC.FH1PAQTY));
    FG0IW03.FG0IWUHS[FG0IWYIX] = FG0IW03.FG0IWUHS[FG0IWYIX] +     FH3REC.FH1PAQTY;

    FFFREC.FFFBEGMO = FG0IW00.FG0IW-HOLD-BEG-MO;
    FFFREC.FFFENDMO = FG0IW00.FG0IW-HOLD-END-MO;
  end


end // end FG0IS-510

// Fetch dfhist.vctshp01 rec
Function FG0IS-511()
   /* ------------------------------------------------------------*/
   /* Obtain historical need month based sales quantities.*/
   /* Load FH6REC record - dfhist.vctshp01, note:  ffabegmo and*/
   /* ffaendmo loaded in fg0i100.*/
   /* ------------------------------------------------------------*/

  set FH6REC empty;

  FH6REC.XPCCD = FFWREC.XPCCD; /* product catg code*/
  FH6REC.XPRCD = FFWREC.YPGCD; /* product type code*/
  FH6REC.XLCCD = "10"; /* life cycle code*/
  FH6REC.XQACD = "01"; /* quality code*/
  FH6REC.YSMXOT = "*"; /* quality code*/
  TA1PGMNM = "S-511  "; /* calling process*/

   /* --------------------------------------------------*/
   /* select sum on dfhist.vctshp01 table*/
   /* --------------------------------------------------*/

  FFFREC.FFFFUNCD = "SN"; /* function code*/

  XSFFS-FF5520();


end // end FG0IS-511

// Get 1 & 2 month caov qty
Function FG0IS-513()
   /* ------------------------------------------------------------*/
   /* Obtain carryover quantities*/
   /* ------------------------------------------------------------*/

  set FH3REC empty;

   /* division code is used here to pass line code to ff5500*/
  FH3REC.XDVCD = FFWREC.XPLCD; /* prod line code*/
  FH3REC.XPCCD = FFWREC.XPCCD; /* prod catg code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* product type code*/
  FH3REC.XLCCD = "10"; /* life cycle code*/
  FH3REC.XQACD = "01"; /* quality code*/
  FH3REC.YSMXOT = "*"; /* xxx-sum-xot-cd*/
  FH3REC.FH1PNAC = "*"; /* nacct fl*/
  TA1PGMNM = "S-513  "; /* calling process*/

   /* --------------------------------------------------*/
   /* Select sum on dfhist.vfhcat01 table*/
   /* --------------------------------------------------*/

  XSFFS-FF5500();


end // end FG0IS-513

// Get 3 & 4 month caov qty
Function FG0IS-515()
   /* ------------------------------------------------------------*/
   /* Obtain carryover quantities from dfhist.vfhcat01*/
   /* ------------------------------------------------------------*/

  set FH3REC empty;

  FH3REC.XPCCD = FFWREC.XPCCD; /* product catg code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* product type code*/
  FH3REC.XLCCD = "10"; /* life cycle code*/
  FH3REC.XQACD = "01"; /* quality code*/
  FH3REC.YSMXOT = "*"; /* sum code*/
  FH3REC.FH1PNAC = "*"; /* nacct fl*/
  TA1PGMNM = "S-515  "; /* calling process*/

   /* --------------------------------------------------*/
   /* select sum on dfhist.vfhcat01 table*/
   /* --------------------------------------------------*/

  XSFFS50();


end // end FG0IS-515

// Get forecasted catg sales
Function FG0IS-530()
   /* ----------------------------------------------------------*/
   /* Obtain forecasted need month sales from dfcast.vmcat001.*/
   /* ----------------------------------------------------------*/

   /* ----------------------------------------------------------*/
   /* Init numeric work fields*/
   /* ----------------------------------------------------------*/

  FG0IS-531();
  FG0IW03.FG0IWUHS[FG0IWYIX] = FF7REC.FF6SLFCT;

   /* ----------------------------------------------------------*/
   /* If current month with in date range*/
   /* Back out carryover quantities.*/
   /* ----------------------------------------------------------*/

  if (FG0IW00.FG0IW-CURR-MO >= FFFREC.FFFBEGMO
   && FG0IW00.FG0IW-CURR-MO <= FFFREC.FFFENDMO)
    FG0IW00.FG0IW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
    FG0IW00.FG0IW-HOLD-END-MO = FFFREC.FFFENDMO;
    FFFREC.FFFBEGMO = FG0IW00.FG0IW-CURR-MO-MINUS1;
    FFFREC.FFFENDMO = FG0IW00.FG0IW-CURR-MO-MINUS1;

    FG0IS-531(); /* select 's' dfcast.vmsgrp01*/
    FG0IW03.FG0IWUHS[FG0IWYIX] = FG0IW03.FG0IWUHS[FG0IWYIX] -     FF7REC.FF6SLFCT;

    FFFREC.FFFBEGMO = FG0IW00.FG0IW-HOLD-BEG-MO; /* restore date rng*/
    FFFREC.FFFENDMO = FG0IW00.FG0IW-HOLD-END-MO;
  end


end // end FG0IS-530

// Get dfcast.vmcat001 rec
Function FG0IS-531()
   /* ------------------------------------------------------------*/
   /* Select sum on dfcast.vmcat001 table.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Load fffrec record*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "SS"; /* function code*/

   /* ------------------------------------------------------------*/
   /* Load ff7rec record - dfcast.vmcat001*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* Clear row storage area*/

  FF7REC.YSMXDV = "10"; /* div code*/
  FF7REC.XCTCD = "USA"; /* country code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* product type code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* product cat code*/

   /* ------------------------------------------------------------*/
   /* Select sum dfcast.vmcat001*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" (FFFREC, SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or zero total, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* zero total returned*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "531"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUM TABLE DFCAST.VMCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0IS-531

// Process actual demand
Function FG0IS-600()
   /* -------------------------------------------------------------*/
   /* Determine if the date range is all forecast, all actual, or*/
   /* mixed.*/
   /* Translate sales quantities from units to thousands using*/
   /* common routine xsffs10.*/
   /* -------------------------------------------------------------*/

  if (FG0IW01.FG0IWPED[FG0IWYIX] < FG0IW00.FG0IW-CURR-MO) /* all actl*/
    FG0IS-610();
    FFXREC.FFXNUMB = FG0IW00.FG0IWUHD;
    XSFFS10(); /* translate history demand*/
    FG0IW00.FG0IWHDT = FFXREC.FFXCHAR;

  else
    if (FG0IW01.FG0IWPBD[FG0IWYIX] >= FG0IW00.FG0IW-CURR-MO) /* all fcst*/
      FG0IS-630();
      FFXREC.FFXNUMB = FG0IW00.FG0IWUHD;
      XSFFS10(); /* translate history demand*/
      FG0IW00.FG0IWHDT = FFXREC.FFXCHAR;

    else
      FFFREC.FFFBEGMO = FG0IW01.FG0IWPBD[FG0IWYIX];
      FFFREC.FFFENDMO = FG0IW00.FG0IW-CURR-MO-MINUS1;
      FG0IS-610();
      FG0IW00.FG0IWSHD = FG0IW00.FG0IWUHD;

      FFFREC.FFFBEGMO = FG0IW00.FG0IW-CURR-MO; /* FCST*/
      FFFREC.FFFENDMO = FG0IW01.FG0IWPED[FG0IWYIX];
      FG0IS-630();
      FG0IW00.FG0IWUHD = FG0IW00.FG0IWUHD + FG0IW00.FG0IWSHD;

      FFXREC.FFXNUMB = FG0IW00.FG0IWUHD;
      XSFFS10(); /* translate history demand*/
      FG0IW00.FG0IWHDT = FFXREC.FFXCHAR;

    end
  end


end // end FG0IS-600

// Get actual demand
Function FG0IS-610()
   /* ------------------------------------------------------------*/
   /* Get style group demand from dfhist.vfhsty01 and dfhist.voqsty01.*/
   /* ----------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* init work storage quantity fields.*/
   /* ------------------------------------------------------------*/

  FG0IW00.FG0IWUHD = 0; /* init w/s historical dmnd units*/

   /* ----------------------------------------------------------------*/
   /* If the ending date LT 199206*/
   /* Get accumulated futures from dfhist.vfhsty01*/
   /* Get open quantities both prop and futures from dfhist.voqsty01*/
   /* Else, if the beginning date GE 199206*/
   /* Get frozen futures from dfhist.vfhsty01*/
   /* Get open quantities prop from dfhist.voqsty01*/
   /* Else*/
   /* Get accumulated futures and open quantities for both prop and*/
   /* futures for any dates lt 199206*/
   /* Get frozen futures and prop open quantities for any dates*/
   /* ge 199206*/
   /* ----------------------------------------------------------------*/

  if (FFFREC.FFFENDMO < 199206) /* Whole range before 199206*/

    set FH2REC empty;
    FH2REC.YSMXOT = "FT";
    FG0IS-611(); /* use actual future*/
    FG0IW00.FG0IWUHD = FH2REC.FH2SHP + FH2REC.FH2CUCXL + FH2REC.FH2CRCXL     + FH2REC.FH2PRCXL + FH2REC.FH2SLCXL;

    set FH1REC empty;
    FH1REC.YSMXOT = "*"; /* get futr & prop open qty*/
    FG0IS-613(); /* use actual future*/
    FG0IW00.FG0IWUHD = FG0IW00.FG0IWUHD + FH1REC.FH1PAQTY +     FH1REC.FH1ALQTY;

  else
    if (FFFREC.FFFBEGMO >= 199206) /* Whole range beyond 199206*/

      set FH2REC empty;
      FH2REC.YSMXOT = "FT";
      FG0IS-611(); /* use frozen futures*/
      FG0IW00.FG0IWUHD = FH2REC.FH-FRZ-PRAL-QTY + FH2REC.FH-FRZ-ALOC-QTY       + FH2REC.FH-FRZ-SHP-QTY + FH2REC.FH-FRZ-CUSTCNCLQTY +       FH2REC.FH-FRZ-CR-CNCL-QTY + FH2REC.FH-FRZ-PRDCTN-CNCL +       FH2REC.FH-FRZ-SLSCNCL-QTY;

      set FH1REC empty;
      FH1REC.YSMXOT = "PR"; /* get prop open qty*/
      FG0IS-613(); /* use actual future*/
      FG0IW00.FG0IWUHD = FG0IW00.FG0IWUHD + FH1REC.FH1PAQTY +       FH1REC.FH1ALQTY;

    else
      FG0IW00.FG0IW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
      FG0IW00.FG0IW-HOLD-END-MO = FFFREC.FFFENDMO;

      FFFREC.FFFENDMO = 199205;
      set FH2REC empty;
      FH2REC.YSMXOT = "FT";
      FG0IS-611(); /* use actual future*/
      FG0IW00.FG0IWUHD = FH2REC.FH2SHP + FH2REC.FH2CUCXL + FH2REC.FH2CRCXL       + FH2REC.FH2PRCXL + FH2REC.FH2SLCXL;

      set FH1REC empty;
      FH1REC.YSMXOT = "*"; /* get futr & prop open qty*/
      FG0IS-613(); /* use actual future*/
      FG0IW00.FG0IWUHD = FG0IW00.FG0IWUHD + FH1REC.FH1PAQTY +       FH1REC.FH1ALQTY;

      FFFREC.FFFBEGMO = 199206;
      FFFREC.FFFENDMO = FG0IW00.FG0IW-HOLD-END-MO;
      set FH2REC empty;
      FH2REC.YSMXOT = "FT";
      FG0IS-611(); /* use frozen futures*/
      FG0IW00.FG0IWUHD = FG0IW00.FG0IWUHD + FH2REC.FH-FRZ-PRAL-QTY +       FH2REC.FH-FRZ-ALOC-QTY + FH2REC.FH-FRZ-SHP-QTY +       FH2REC.FH-FRZ-CUSTCNCLQTY + FH2REC.FH-FRZ-CR-CNCL-QTY +       FH2REC.FH-FRZ-PRDCTN-CNCL + FH2REC.FH-FRZ-SLSCNCL-QTY;

      set FH1REC empty;
      FH1REC.YSMXOT = "PR"; /* get prop open qty*/
      FG0IS-613(); /* use actual future*/
      FG0IW00.FG0IWUHD = FG0IW00.FG0IWUHD + FH1REC.FH1PAQTY +       FH1REC.FH1ALQTY;

      FFFREC.FFFBEGMO = FG0IW00.FG0IW-HOLD-BEG-MO;
      FFFREC.FFFENDMO = FG0IW00.FG0IW-HOLD-END-MO;
    end
  end


   /* ----------------------------------------------------------------*/
   /* Fetch prop deamnd quantities from dfhist.vfhsty01.*/
   /* ----------------------------------------------------------------*/

  set FH2REC empty;
  FH2REC.YSMXOT = "PR";
  FG0IS-611();
  FG0IW00.FG0IWUHD = FG0IW00.FG0IWUHD + FH2REC.FH2SHP + FH2REC.FH2CUCXL +   FH2REC.FH2CRCXL + FH2REC.FH2PRCXL + FH2REC.FH2SLCXL;


end // end FG0IS-610

// Get dfhist.vfhsty01 rec
Function FG0IS-611()
   /* ----------------------------------------------------------------*/
   /* Fetch demand quantities from dfhist.vfhsty01.*/
   /* ----------------------------------------------------------------*/

   /* ----------------------------------------------------------------*/
   /* Load fh2rec record - dfhist.vfhsty01*/
   /* ----------------------------------------------------------------*/

  FH2REC.SY1STNBR = PG7REC.SYBSTGNB; /* style number*/
  FH2REC.XDVCD = FFWREC.XPCCD; /* category code*/
  FH2REC.XDMCD = FFWREC.YPGCD; /* product type code*/
  FH2REC.XLCCD = "10"; /* life cycle code*/
  FH2REC.XQACD = "01"; /* quality code*/
  FH2REC.FH1PNAC = "*"; /* product national acct fl*/

   /* --------------------------------------------------*/
   /* Select sum on dfhist.vfhsty01.*/
   /* --------------------------------------------------*/

  FFFREC.FFFFUNCD = "SN"; /* Summarize by style group*/
  TA1REC.TA1PGMNM = "S-611  "; /* Calling process*/

  XSFFS53();

end // end FG0IS-611

// Get dfhist.voqsty01 rec
Function FG0IS-613()
   /* ---------------------------------------------------------------*/
   /* Fetch dfhist.voqsty01 record.*/
   /* ---------------------------------------------------------------*/

   /* ---------------------------------------------------------------*/
   /* Load fh1rec record - dfhist.voqsty01*/
   /* ---------------------------------------------------------------*/

  FH1REC.SY1STNBR = PG7REC.SYBSTGNB; /* style number*/
  FH1REC.XDVCD = FFWREC.XPCCD; /* category code*/
  FH1REC.XDMCD = FFWREC.YPGCD; /* product type group code*/
  FH1REC.FH1PNAC = "*"; /* product national acct fl*/
  FH1REC.XLCCD = "10"; /* life cycle code*/
  FH1REC.XQACD = "01"; /* quality code*/

  TA1REC.TA1PGMNM = "S-613 "; /* calling process*/

  FFFREC.FFFFUNCD = "SG"; /* Summarize by style group*/

  XSFFS-FF5570(); /* Process dfhist.voqsty01*/


end // end FG0IS-613

// Get forecast demand
Function FG0IS-630()
   /* ----------------------------------------------------------*/
   /* Obtain forecast demand quantities.*/
   /* ----------------------------------------------------------*/

   /* ----------------------------------------------------------*/
   /* init numeric work fields*/
   /* ----------------------------------------------------------*/
  FG0IW00.FG0IWNDP = 0; /* init numeric work field*/
  FG0IW00.FG0IWUHD = 0; /* init w/s historical dmnd unit*/

   /* --------------------------------------------------------*/
   /* Calculate forecasted style group demand quantity from*/
   /* dfcast.ffsty01 and dfcast.vmsty001.*/
   /* --------------------------------------------------------*/

  FG0IW00.FG0IWWDT = FFFREC.FFFBEGMO;

  while (FG0IW00.FG0IWWDT <= FFFREC.FFFENDMO
   && FG0IW00.FG0IWGRP == "Y") /* active style group*/

    FG0IW00.FG0IWNM1 = 0; /* init numeric work field*/

    if (FG0IW00.FG0IWWDT <= FG0IW00.FG0IWBDT) /* <= buy month*/
      FG0IS57(); /* current thru buy month*/
    else
      FG0IS58(); /* after buy month*/
    end

    FG0IW00.FG0IWUHD = FG0IW00.FG0IWUHD + FG0IW00.FG0IWNM1;

    if (FG0IW00.FG0IWWMM == 12)
      FG0IW00.FG0IWWMM = 1;
      if (FG0IW00.FG0IWWYY == 99)
        FG0IW00.FG0IWWYY = 0;
        FG0IW00.FG0IWWCC = FG0IW00.FG0IWWCC + 1;
      else
        FG0IW00.FG0IWWYY = FG0IW00.FG0IWWYY + 1;
      end
    else
      FG0IW00.FG0IWWMM = FG0IW00.FG0IWWMM + 1;
    end
  end


end // end FG0IS-630

// Process catg level demand
Function FG0IS-700()
   /* -------------------------------------------------------------------*/
   /* Determine if the date range is all forecast, all actual, or*/
   /* mixed.*/
   /* -------------------------------------------------------------------*/

  if (FG0IW01.FG0IWPED[FG0IWYIX] < FG0IW00.FG0IW-CURR-MO) /* all act;*/
    FG0IS-710();

  else
    if (FG0IW01.FG0IWPBD[FG0IWYIX] >= FG0IW00.FG0IW-CURR-MO) /* all fcst*/
      FG0IS-730(); /* get forecast demand qty*/
      FG0IW03.FG0IWUHD[FG0IWYIX] = FF7REC.FF6DMFCT;

    else /* mixed range*/
      FFFREC.FFFBEGMO = FG0IW01.FG0IWPBD[FG0IWYIX];
      FFFREC.FFFENDMO = FG0IW00.FG0IW-CURR-MO-MINUS1;
      FG0IS-710();

      FFFREC.FFFBEGMO = FG0IW00.FG0IW-CURR-MO; /* FCST*/
      FFFREC.FFFENDMO = FG0IW01.FG0IWPED[FG0IWYIX];
      FG0IS-730(); /* get forecast demand qtys*/
      FG0IW03.FG0IWUHD[FG0IWYIX] = FG0IW03.FG0IWUHD[FG0IWYIX] +       FF7REC.FF6DMFCT;

    end
  end


end // end FG0IS-700

// Proc actl catg demand
Function FG0IS-710()
   /* ------------------------------------------------------------*/
   /* Obtain actual demand quantities from dfhist.vfhcat01*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If ending date is less than 199206*/
   /* use accumualted futures*/
   /* Else If the beginning date is greater than or equal to 199206*/
   /* use frozen futures*/
   /* Else a mix range exists*/
   /* use accumualted futures for all dates lt 199206*/
   /* use frozen futures for all dates ge 199206*/
   /* ------------------------------------------------------------*/

  if (FFFREC.FFFENDMO < 199206) /* Whole range before 199206*/
    set FH3REC empty;
    FH3REC.YSMXOT = "FT";
    FG0IS-711(); /* use actual future*/
    FG0IW03.FG0IWUHD[FG0IWYIX] = FH3REC.FH1PAQTY + FH3REC.FH1ALQTY +     FH3REC.FH2SHP + FH3REC.FH3CNCL;

  else
    if (FFFREC.FFFBEGMO >= 199206) /* Whole range beyond 199206*/
      set FH3REC empty;
      FH3REC.YSMXOT = "FT";
      FG0IS-711(); /* use actual future*/
      FG0IW03.FG0IWUHD[FG0IWYIX] = FH3REC.FH-FRZ-PRAL-QTY +       FH3REC.FH-FRZ-ALOC-QTY + FH3REC.FH-FRZ-SHP-QTY +       FH3REC.FH-FRZ-CNCL-QTY;

    else
      FG0IW00.FG0IW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
      FG0IW00.FG0IW-HOLD-END-MO = FFFREC.FFFENDMO;

      FFFREC.FFFENDMO = 199205;
      set FH3REC empty;
      FH3REC.YSMXOT = "FT";
      FG0IS-711(); /* use actual future*/
      FG0IW03.FG0IWUHD[FG0IWYIX] = FH3REC.FH1PAQTY + FH3REC.FH1ALQTY +       FH3REC.FH2SHP + FH3REC.FH3CNCL;

      FFFREC.FFFBEGMO = 199206;
      FFFREC.FFFENDMO = FG0IW00.FG0IW-HOLD-END-MO;
      set FH3REC empty;
      FH3REC.YSMXOT = "FT";
      FG0IS-711(); /* use actual future*/
      FG0IW03.FG0IWUHD[FG0IWYIX] = FG0IW03.FG0IWUHD[FG0IWYIX] +       FH3REC.FH-FRZ-PRAL-QTY + FH3REC.FH-FRZ-ALOC-QTY +       FH3REC.FH-FRZ-SHP-QTY + FH3REC.FH-FRZ-CNCL-QTY;

      FFFREC.FFFBEGMO = FG0IW00.FG0IW-HOLD-BEG-MO;
      FFFREC.FFFENDMO = FG0IW00.FG0IW-HOLD-END-MO;
    end
  end


   /* --------------------------------------------------*/
   /* Get prop demand*/
   /* --------------------------------------------------*/

  set FH3REC empty;
  FH3REC.YSMXOT = "PR";
  FG0IS-711(); /* use actual future*/
  FG0IW03.FG0IWUHD[FG0IWYIX] = FG0IW03.FG0IWUHD[FG0IWYIX] + FH3REC.FH1PAQTY   + FH3REC.FH1ALQTY + FH3REC.FH2SHP + FH3REC.FH3CNCL;

end // end FG0IS-710

// Fetch dfhist.vfhcat01 rec
Function FG0IS-711()
   /* ----------------------------------------------------------------*/
   /* Fetch dfhist.vfhcat01 record*/
   /* ----------------------------------------------------------------*/

   /* ----------------------------------------------------------------*/
   /* Load fh3rec record - dfhist.vfhcat01*/
   /* ----------------------------------------------------------------*/

  FH3REC.XPRCD = FFWREC.YPGCD; /* product type code*/
  FH3REC.XPCCD = FFWREC.XPCCD; /* product cat code*/
  FH3REC.XLCCD = "10"; /* life cycle code*/
  FH3REC.XQACD = "01"; /* quality code*/
  FH3REC.FH1PNAC = "*"; /* product national acct fl*/

  TA1PGMNM = "S-711  "; /* calling process*/

   /* --------------------------------------------------*/
   /* select sum on dfhist.vfhcat01 table for life*/
   /* cycle 10 and quality code 01 using routin xsffs50*/
   /* --------------------------------------------------*/

  XSFFS50();

end // end FG0IS-711

// Proc fcst catg demand
Function FG0IS-730()
   /* ----------------------------------------------------------*/
   /* Obtain forecasted demand quantities from dfcast.vmcat001.*/
   /* ----------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Select sum on dfcast.vmcat001 table.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* load fffrec record*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "SS"; /* function code*/

   /* ------------------------------------------------------------*/
   /* load ff7rec record - dfcast.vmcat001*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* Clear row storage area*/

  FF7REC.YSMXDV = "10"; /* div code*/
  FF7REC.XCTCD = "USA"; /* country code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* product type code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* product cat code*/

   /* ------------------------------------------------------------*/
   /* Select sum dfcast.vmcat001*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" (FFFREC, SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or zero total, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* zero total returned*/

      if (SQLCA.VAGen_SQLCODE == -305) /* zero total returned*/
        FF7REC.FF6DMFCT = 0;
      end

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "730"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUM TABLE DFCAST.VMCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0IS-730

// purge temporary storage
Function FG0IS01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FG0IW01 empty; /* M001 temporary storage header*/
  set FG0IW02 empty; /* M001 temporary storage detail*/
  set FG0IW03 empty; /* M001 temporary storage totals*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FG0IW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FG0IW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0IS01

// select dfcast.vwsgrp01 row
Function FG0IS03()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vwsgrp01 table.*/
   /* ------------------------------------------------------------*/

  FFLREC.FFEWSNBR = FFWREC.FFEWSNBR;
  FFLREC.YPGCD = FFWREC.YPGCD;

   /* ------------------------------------------------------------*/
   /* select dfcast.vwsgrp01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3880" ("S ", SQLCA, FFLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indisgrpe that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S03"; /* Module identifisgrpion*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indisgrpe not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indisgrpe system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VWSGRP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program applisgrpion*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFLREC.FFLKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0IS03

// add temporary storage
Function FG0IS08()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FG0IW02.XXXTSLEN = FG0IW00.XXXTSLEN;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FG0IW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    FG0IW00.FG0IWIDX = 1; /* Display line index*/

    FG0IW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S08"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0IS08

// read temporary storage
Function FG0IS10()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  FG0IW02.XXXTSLEN = FG0IW00.XXXTSLEN;
  TA5REC.TA5TSQIX = FG0IW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FG0IW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S10"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0IS10

// update temporary storage
Function FG0IS11()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  FG0IW02.XXXTSLEN = FG0IW00.XXXTSLEN;
  TA5REC.TA5TSQIX = FG0IW00.XXXTSPAG;
  TA5REC.TA5APPID = COMMAREA.CACURRAP;
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (FG0IW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S11"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0IS11

// verify modifiable fields
Function FG0IS12()
   /* -----------------------------------------------------*/
   /* verify all detail modifiable fields except*/
   /* -----------------------------------------------------*/

  FG0IW00.FG0IWIDX = FG0IW02.FG0IWTIX - 1; /* nbr of lines loaded*/

  while (FG0IW00.FG0IWIDX >= 1) /* process temp storage*/

    if (FG0IM001.FG0IMCPT[FG0IWIDX] != 0)
      set FG0IM001.FG0IMCPT[FG0IWIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S12";
    end
    if (FG0IM001.FG0IMSPT[FG0IWIDX] != FG0IW02.FG0IWSPT[FG0IWIDX])
      set FG0IM001.FG0IMSPT[FG0IWIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S12";
    end
    if (FG0IM001.FG0IMFQT[FG0IWIDX] != FG0IW02.FG0IWFQT[FG0IWIDX])
      set FG0IM001.FG0IMFQT[FG0IWIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S12";
    end
    if (FG0IM001.FG0IMSEL[FG0IWIDX] != " "
     && converseVar.eventKey not enter
     && converseVar.eventKey not pf16
     && converseVar.eventKey not pf17)
      set FG0IM001.FG0IMSEL[FG0IWIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S12";
    end

    FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX - 1; /* decrement table index*/

  end

   /* -----------------------------------------------------*/
   /* verify header modifiable fields*/
   /* -----------------------------------------------------*/

  if (FG0IM001.FG0IMCTQ != " ")
    set FG0IM001.FG0IMCTQ cursor, bold;
    converseLib.validationFailed(111);
    FFWREC.XXXMODID = "S12";
  end

  if (FG0IM001.FG0IMPCT != 0)
    set FG0IM001.FG0IMPCT cursor, bold;
    converseLib.validationFailed(111);
    FFWREC.XXXMODID = "S12";
  end

  if (converseVar.eventKey not enter)

    if (FG0IM001.XPCCD != FFWREC.XPCCD)
      set FG0IM001.XPCCD cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S12";
    end

    if (FG0IM001.YPGCD != FFWREC.YPGCD)
      set FG0IM001.YPGCD cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S12";
    end
  end

  if (converseVar.eventKey not pf18
   && converseVar.eventKey not enter)

    if (FG0IM001.FG0IMHOP != FG0IW01.FG0IWHOP)
      set FG0IM001.FG0IMHOP cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S12";
    end

    if (FG0IM001.FG0IMYOP != FG0IW01.FG0IWYOP)
      set FG0IM001.FG0IMYOP cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S12";
    end
  end

  if (converseVar.eventKey not pf7
   && converseVar.eventKey not pf8
   && converseVar.eventKey not pf18
   && converseVar.eventKey not enter)
    if (FG0IM001.FG0IMCTG != FG0IW01.FG0IWCTG)
      set FG0IM001.FG0IMCTG cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S12";
    end
  end

  if (converseVar.eventKey not enter)

    FG0IW00.FG0IWWED = FFWREC.FFAENDMO;
    if (FG0IM001.FG0IMERG != FG0IW00.FG0IWEYM)
      set FG0IM001.FG0IMERG cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S12";
    end

    FG0IW00.FG0IWWBD = FFWREC.FFABEGMO;
    if (FG0IM001.FG0IMBRG != FG0IW00.FG0IWBYM)
      set FG0IM001.FG0IMBRG cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S12";
    end
  end


end // end FG0IS12

// select dfcast.vffxrf01 row
Function FG0IS16()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vffxrf01 table.*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.YSMXDV = "10";
  FF2REC.YPGCD = FG0IM001.YPGCD;
  FF2REC.XPCCD = FG0IM001.XPCCD;

   /* ------------------------------------------------------------*/
   /* select dfcast.vwltyp01*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S16"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0IS16

// add dfcast.vwcat001 row
Function FG0IS17()
   /* ------------------------------------------------------------*/
   /* add dfcast.vwcat001 table row*/
   /* ------------------------------------------------------------*/
  set FFJREC empty;

  FFJREC.FFEWSNBR = FF1REC.FF1WSNBR;
  FFJREC.YPGCD = FFWREC.YPGCD;
  FFJREC.XPCCD = FFWREC.XPCCD;
  FFJREC.FF6SLFCT = FG0IW03.FG0IWUQT;
  FFJREC.FFEFCTGT = FG0IW01.FG0IWUCT;
  FFJREC.FFGYRIND = FG0IW01.FG0IWYOP;
  FFJREC.FFGSDIND = FG0IW01.FG0IWHOP;
  FFJREC.FFECLRFL = "N";
  FFJREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFJREC.ZZZSTM = XX0XW01.XX0XWTIM;
  FFJREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFJREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3840" ("A ", SQLCA, FFJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S17"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VWCAT001 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFJREC.FFJKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0IS17

// update dfcast.vwdgrp01 row
Function FG0IS18()
   /* ------------------------------------------------------------*/
   /* update dfcast.vwdgrp01*/
   /* ------------------------------------------------------------*/

  FFEREC.XXXUSRID = COMMAREA.CAUSERID;
  FFEREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFEREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO3850" ("U ", SQLCA, FFEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FG0IW00.FG0IWSWR = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "S18"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "S18"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE DFCAST.VWDGRP01 TABLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWDGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFEREC.FFEKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0IS18

// update dfcast.vwline01 row
Function FG0IS19()
   /* ------------------------------------------------------------*/
   /* upd dfcast.vwline01 table row*/
   /* ------------------------------------------------------------*/

  FG0IW00.FG0IWNM1 = FG0IW03.FG0IWUQT - FFJREC.FF6SLFCT;
  FFGREC.FF6SLFCT = FFGREC.FF6SLFCT + FG0IW00.FG0IWNM1;
  FFGREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFGREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3890" ("U ", SQLCA, FFGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FG0IW00.FG0IWSWR = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "S19"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S19"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DFCAST.VWLINE01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFGREC.FFGKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0IS19

// update dfcast.vwltyp01 row
Function FG0IS20()
   /* ------------------------------------------------------------*/
   /* upd dfcast.vwltyp01 table row*/
   /* ------------------------------------------------------------*/

  FG0IW00.FG0IWNM1 = FG0IW03.FG0IWUQT - FFJREC.FF6SLFCT;
  FFIREC.FF6SLFCT = FFIREC.FF6SLFCT + FG0IW00.FG0IWNM1;
  FFIREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFIREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3910" ("U ", SQLCA, FFIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FG0IW00.FG0IWSWR = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "S20"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S20"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DFCAST.VWLTYP01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFIREC.FFIKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0IS20

// update dfcast.vwcat001 row
Function FG0IS21()
   /* ------------------------------------------------------------*/
   /* upd dfcast.vwcat001 table row*/
   /* ------------------------------------------------------------*/

  FFJREC.FFEFCTGT = FG0IW01.FG0IWUCT;
  FFJREC.FF6SLFCT = FG0IW03.FG0IWUQT;
  FFJREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFJREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3840" ("U ", SQLCA, FFJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FG0IW00.FG0IWSWR = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "S21"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S21"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DFCAST.VWCAT001 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFJREC.FFJKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0IS21

// upd dfcast.vwsgrp01 row
Function FG0IS22()
   /* ------------------------------------------------------------*/
   /* upd dfcast.vwsgrp01 table row*/
   /* ------------------------------------------------------------*/

  FFLREC.FF6SLFCT = FG0IW02.FG0IWUQT[FG0IWIDX];
  FFLREC.FFEFCTGT = FG0IW02.FG0IWUQT[FG0IWIDX];
  FFLREC.FFGYRIND = FG0IW01.FG0IWYOP;
  FFLREC.FFGSDIND = FG0IW01.FG0IWHOP;
  FFLREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFLREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3880" ("U ", SQLCA, FFLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FG0IW00.FG0IWSWR = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "S22"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S22"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DFCAST.VWSGRP01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFLREC.FFLKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0IS22

// add dfcast.vwsgrp01 row
Function FG0IS23()
   /* ------------------------------------------------------------*/
   /* add dfcast.vwsgrp01 table row*/
   /* ------------------------------------------------------------*/

  FFLREC.FFEWSNBR = FFWREC.FFEWSNBR;
  FFLREC.YPGCD = FFWREC.YPGCD;
  FFLREC.FFGYRIND = FG0IW01.FG0IWYOP;
  FFLREC.FFGSDIND = FG0IW01.FG0IWHOP;
  FFLREC.FFECLRFL = "N";
  FFLREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFLREC.ZZZSTM = XX0XW01.XX0XWTIM;
  FFLREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFLREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3880" ("A ", SQLCA, FFLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S23"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VWSGRP01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFLREC.FFLKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0IS23

// purge excess work sheets
Function FG0IS24()
   /* ------------------------------------------------------------*/
   /* purge excess forecast work sheets using routine xsffs60*/
   /* ------------------------------------------------------------*/

  FFEREC.YSMXDV = FFWREC.YSMXDV; /* division code*/
  FFEREC.XCTCD = "USA"; /* country code*/
  FFEREC.FFABEGMO = FFWREC.FFABEGMO; /* begin range*/
  FFEREC.FFAENDMO = FFWREC.FFAENDMO; /* end   range*/
  TA1REC.TA1PGMNM = "FG0IS24"; /* process name*/

   /* ------------------------------------------------------------*/
   /* purge !!!!!*/
   /* ------------------------------------------------------------*/

  XSFFS61();


end // end FG0IS24

// select 's' dfcast.vmsgrp01
Function FG0IS25()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vmsgrp01 row*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* load ff8rec record - dfcast.vmsgrp001*/
   /* ------------------------------------------------------------*/

  set FF8REC empty; /* Clear row storage area*/

  FF8REC.YSMXDV = "10"; /* div code*/
  FF8REC.XCTCD = "USA"; /* country code*/
  FF8REC.YPGCD = FFWREC.YPGCD; /* type group code*/
  FF8REC.SYBSTGNB = PG7REC.SYBSTGNB; /* style grp nbr*/
  FF8REC.FF4FCTMO = FG0IW00.FG0IWWDT; /* fcst month*/

   /* ------------------------------------------------------------*/
   /* Select sum dfcast.vmsgrp001*/
   /* ------------------------------------------------------------*/

  try
    call "IO3730" ("S ", SQLCA, FF8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or zero total, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* or record not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indisgrpe that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S25"; /* Module identifisgrpion*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indisgrpe not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indisgrpe system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE DFCAST.VMSGRP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program applisgrpion*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF8REC.FF8KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0IS25

// select 's' dfcast.vmcat001
Function FG0IS26()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vmcat001 table.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Load ff7rec record - dfcast.vmcat001*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* Clear row storage area*/

  FF7REC.YSMXDV = "10"; /* div code*/
  FF7REC.XCTCD = "USA"; /* country code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* product type code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* product cat code*/
  FF7REC.FF4FCTMO = FG0IW00.FG0IWWDT; /* fcst month*/

   /* ------------------------------------------------------------*/
   /* Select dfcast.vmcat001*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or zero total, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S26"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE DFCAST.VMCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0IS26

// Validate year/history option
Function FG0IS30()
   /* ------------------------------------------------------------*/
   /* validate year/history option field*/
   /* ------------------------------------------------------------*/

  if (FG0IM001.FG0IMHOP != FG0IW01.FG0IWHOP
   || FG0IM001.FG0IMYOP != FG0IW01.FG0IWYOP)

    if (FG0IM001.FG0IMHOP != FG0IW01.FG0IWHOP)
      if (FG0IM001.FG0IMHOP != "S"
       && FG0IM001.FG0IMHOP != "D")
        converseLib.validationFailed(10);
        FFWREC.XXXMODID = "S30";
        set FG0IM001.FG0IMHOP cursor, bold;
      end
    end

    if (FG0IM001.FG0IMYOP != FG0IW01.FG0IWYOP)
      if (FG0IM001.FG0IMYOP != 1
       && FG0IM001.FG0IMYOP != 2
       && FG0IM001.FG0IMYOP != 3)
        converseLib.validationFailed(10);
        FFWREC.XXXMODID = "S30";
        set FG0IM001.FG0IMYOP cursor, bold;
      end
    end

    FG0IS12(); /* check modifiable fields*/

  end

  if (FG0IM001.FG0IMYOP != FG0IW01.FG0IWYOP /* year option changed*/
   && converseVar.validationMsgNum == 0)   
    FG0IW00.XXXTSPAG = 1; /* Reset the current page number*/
  end
end // end FG0IS30

// Obtain stygrp wrksht fcst tot
Function FG0IS31()
   /* ---------------------------------------------------------------*/
   /* Obtain style group work sheet forecast quantity from*/
   /* dfcast.vwsgrp01 and dprodg.vmxprc01 as the driver.*/
   /* ---------------------------------------------------------------*/

  set PG7REC empty; /* Clear stroage area*/
  FG0IW03.FG0IWUQT = 0; /* Clear fcst total*/

  FFFREC.FFFBEGMO = FFWREC.FFABEGMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFWREC.FFAENDMO; /* Ending month*/

  PG7REC.PG7MAXPR = 99999.99; /* previous price*/

  FG0IS-100(); /* select set on dprodg.vmxprc01*/

  FG0IS-200(); /* fetch first dprodg.vmxprc01 row*/

  while (SQLCA.VAGen_SQLCODE == 0) /* process unitl end of dprodg.vmxprc01*/

    if (PG7REC.PG7MAXCM != FFWREC.FFABEGMO) /* and exclude closeout month*/

      set FFLREC empty; /* Clear storage row*/
      FFLREC.SYBSTGNB = PG7REC.SYBSTGNB;

      /* ------------------------------------------------------------*/
       /* if the work sheet number was passed obtain the forecast*/
       /* qtys from dfcast.vwsgrp01 if not found default forecast*/
       /* qtys to zero.*/
      /* ------------------------------------------------------------*/

      if (FFWREC.FFEWSNBR != 0)

        FG0IS32(); /* select dfcast.vwsgrp01*/

        if (SQLCA.VAGen_SQLCODE == 0)
          FG0IW03.FG0IWUQT = FG0IW03.FG0IWUQT + FFLREC.FF6SLFCT;
        end
      end

    end

    FG0IS-200(); /* fetch first dprodg.vmxprc01 row*/

  end

  FG0IS-300(); /* fetch first dprodg.vmxprc01 row*/

end // end FG0IS31

// Select dfcast.vwsgrp01 row
Function FG0IS32()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vwsgrp01 table.*/
   /* ------------------------------------------------------------*/

  FFLREC.FFEWSNBR = FFWREC.FFEWSNBR;
  FFLREC.YPGCD = FFWREC.YPGCD;

   /* ------------------------------------------------------------*/
   /* Select dfcast.vwsgrp01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3880" ("S ", SQLCA, FFLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indisgrpe that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S32"; /* Module identifisgrpion*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indisgrpe not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indisgrpe system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VWSGRP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program applisgrpion*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFLREC.FFLKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0IS32

// select 's1' dfcast.vffsty01
Function FG0IS53()
   /* ------------------------------------------------------------*/
   /* Format keys.*/
   /* ------------------------------------------------------------*/

  FF3REC.YPGCD = FFWREC.YPGCD; /* type group code*/
  FF3REC.XLCCD = "10"; /* life cycle code*/
  FF3REC.YSMXDV = "10"; /* Dom*/

   /* ------------------------------------------------------------*/
   /* Open DFCAST.VFFSTY01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("S1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S53"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S1 ON DFCAST.VFFSTY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/
end // end FG0IS53

// fetch 's1' dfcast.vffsty01
Function FG0IS54()
   /* ------------------------------------------------------------*/
   /* Fetch FFSTY.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("N1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S54"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DFCAST.VFFSTY01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0IS54

// close 's1' dfcast.vffsty01
Function FG0IS55()
   /* ------------------------------------------------------------*/
   /* Close FFSTY.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("C1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "S55"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE S1 DFCAST.VFFSTY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0IS55

// sel 'ss' sum dfcast.vmsty001
Function FG0IS56()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/


  set FF9REC empty;
  FF9REC.XCTCD = "USA"; /* Country code*/
  FF9REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF9REC.SY1STNBR = FF3REC.SY1STNBR; /* style number*/
  FF9REC.SY2CLRID = FF3REC.SY2CLRID; /* Color id*/
  FF9REC.XDMCD = FF3REC.XDMCD; /* Dimension code*/

  set FFFREC empty; /* Clear row storage area*/

  FFFREC.FFFBEGMO = FFWREC.FFABEGMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFWREC.FFAENDMO; /* Ending month*/
  FFFREC.FFFFUNCD = "SS"; /* Function code*/

  try
    call "IO3740" (FFFREC, SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0   /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100 /* No rows found*/
     || SQLCA.VAGen_SQLCODE == -305) /* No rows exist - sum is null*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S56"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0IS56

// process current thru buy month
Function FG0IS57()
   /* -------------------------------------------------------*/
   /* When the process month is between current and buy*/
   /* month, the demand fcst is accumulated from style*/
   /* color demand fcsts.*/
   /*  */
   /* If it is current month*/
   /* style color dmd = (sls of previous month from VMSTY -*/
   /* sls of current month from VMSTY)*/
   /* / fill rate from VMSTY*/
   /* If it is the current month plus 1 month thru the buy month*/
   /* style color dmd = sls of process month from VMSTY /*/
   /* fill rate from VMSTY*/
   /* -------------------------------------------------------*/

  FG0IW00.FG0IWEOF = "N"; /* initialize the eof flag*/
  FG0IS76(); /* Open 's1' dfcast.vffsty01*/
  FG0IS77(); /* fetch 'n1' dfcast.vffsty01*/

  while (FG0IW00.FG0IWEOF == "N") /* until end of vffsty*/
    if (FG0IW00.FG0IWWDT == FG0IW00.FG0IW-CURR-MO) /* current month;*/
      FG0IS68(); /* process current month*/
    else
      FG0IS69(); /* proc curr + 1 mo thru buy mo*/
    end

    FG0IW00.FG0IWNM1 = FG0IW00.FG0IWNM1 + FG0IW00.FG0IWNM2;

    FG0IS77();

  end

  FG0IS78(); /* close 'c1' dfcast.vffsty01*/

end // end FG0IS57

// process after buy month
Function FG0IS58()
   /* ----------------------------------------------------*/
   /* If the process month is after the buy month, the*/
   /* demand fcst is calculated from sales of style group.*/

   /* demand fcst = sls fcst from VMSGRP01 /*/
                 /* fill rate from VMCAT001*/
   /* ----------------------------------------------------*/

  FG0IS25(); /* select 's' dfcast.vmsgrp01*/

  FG0IS26(); /* select 's' dfcast.vmcat001*/

  if (FF7REC.FF7FLLRT != 0)
    FG0IW00.FG0IWNDP = FF7REC.FF7FLLRT / 100;
    FG0IW00.FG0IWNM1 = FF8REC.FF6SLFCT / FG0IW00.FG0IWNDP;
  else
    FG0IW00.FG0IWNM1 = 0;
  end

end // end FG0IS58

// process 1 year ago history
Function FG0IS61()
   /* ------------------------------------------------------------*/
   /* If the temp storage queue contains no style group information*/
   /* Select all historical style groups for the requested*/
   /* category, product type and range using dprodg.vmxprc01*/
   /* Determine if sales and/or demand information needs to be*/
   /* fetched.*/
   /* If the temp storage queue contains style group information*/
   /* bypass this whole process.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* **** Process historical sales*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.FG0IWSWD == "2") /* 2nd map was requested*/
    if (FG0IW00.FG0IWHS1 < FG0IW00.XXXTSPAG) /* top page of sls < curr page*/
      FG0IS70(); /* Obtain stygrp from vmxprc01 & get hist sls*/
    end
  else
    if (FG0IW01.FG0IWHOP == "S") /* 'S'ales was selected*/
      if (FG0IW00.FG0IWHS1 < FG0IW00.XXXTSPAG)
                                   /* top page of sls < curr page*/
        FG0IS70(); /* Obtain stygrp from vmxprc01 & get hist sls*/
      else
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* **** Process historical demand*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.FG0IWSWD == "2" /* 2nd map was requested*/
   || FG0IW01.FG0IWHOP == "D") /* 'D'ales was selected*/
    if (FG0IW00.FG0IWHD1 < FG0IW00.XXXTSPAG) /* top page of dmd < curr page*/
      FG0IS71(); /* Obtain stygrp from vmxprc01 & get hist dmd*/
    end
  end

end // end FG0IS61

// Process 2 years ago history
Function FG0IS62()
   /* ------------------------------------------------------------*/
   /* If the temp storage queue contains no style group information*/
   /* Select all historical style groups for the requested*/
   /* category, product type and range using dprodg.vmxprc01*/
   /* Determine if sales and/or demand information needs to be*/
   /* fetched.*/
   /* If the temp storage queue contains style group information*/
   /* bypass this whole process.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* **** Process historical sales*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.FG0IWSWD == "2") /* 2nd map was requested*/
    if (FG0IW00.FG0IWHS2 < FG0IW00.XXXTSPAG) /* top page of sls < curr page*/
      FG0IS72(); /* Get stygrp from vmxprc01 & get sls*/
    end
  else
    if (FG0IW01.FG0IWHOP == "S") /* 'S'ales was selected*/
      if (FG0IW00.FG0IWHS2 < FG0IW00.XXXTSPAG)
                                   /* top page of sls < curr page*/
        FG0IS72(); /* Get stygrp from vmxprc01 & get sls*/
      else
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* **** Process historical demand*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.FG0IWSWD == "2" /* 2nd map was requested*/
   || FG0IW01.FG0IWHOP == "D") /* 'D'ales was selected*/
    if (FG0IW00.FG0IWHD2 < FG0IW00.XXXTSPAG) /* top page of dmd < curr page*/
      FG0IS73(); /* Obtain stygrp from vmxprc01 & get*/
                                   /* hist dmd*/
    end
  end

end // end FG0IS62

// Process 3 years ago history
Function FG0IS63()
   /* ------------------------------------------------------------*/
   /* If the temp storage queue contains no style group information*/
   /* Select all historical style groups for the requested*/
   /* category, product type and range using dprodg.vmxprc01*/
   /* Determine if sales and/or demand information needs to be*/
   /* fetched.*/
   /* If the temp storage queue contains style group information*/
   /* bypass this whole process.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* **** Process historical sales*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.FG0IWSWD == "2") /* 2nd map was requested*/
    if (FG0IW00.FG0IWHS3 < FG0IW00.XXXTSPAG) /* top page of sls < curr page*/
      FG0IS74(); /* Obtain stygrp from vmxprc01 & get*/
                                   /* hist sls*/
    end
  else
    if (FG0IW01.FG0IWHOP == "S") /* 'S'ales was selected*/
      if (FG0IW00.FG0IWHS3 < FG0IW00.XXXTSPAG)
                                   /* top page of sls < curr page*/
        FG0IS74(); /* Obtain stygrp from vmxprc01 & get*/
                                   /* hist sls*/
      else
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* **** Process historical demand*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.FG0IWSWD == "2" /* 2nd map was requested*/
   || FG0IW01.FG0IWHOP == "D") /* 'D'ales was selected*/
    if (FG0IW00.FG0IWHD3 < FG0IW00.XXXTSPAG) /* top page of dmd < curr page*/
      FG0IS75(); /* Obtain stygrp from vmxprc01 & get*/
                                   /* hist dmd*/
    end
  end

end // end FG0IS63

// add remaining vwsgrp01 rows
Function FG0IS65()
   /* ------------------------------------------------------------*/
   /* select any remaining style groups for the requested product*/
   /* that have not been displayed on a map and add them to the*/
   /* worksheet.*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFBEGMO = FFWREC.FFABEGMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFWREC.FFAENDMO; /* Ending month*/

  PG7REC.SYBSTGNB = FG0IW00.FG0IWSNB; /* previous style group*/
  PG7REC.PG7MAXPR = FG0IW00.FG0IWPRC; /* previous price*/

  FG0IS-100(); /* select set on dprodg.vmxprc01*/

  FG0IS-200(); /* fetch first dprodg.vmxprc01 row*/

  while (SQLCA.VAGen_SQLCODE == 0) /* process unitl end of dprodg.vmxprc01*/

    if (PG7REC.PG7MAXCM != FFWREC.FFABEGMO) /* and exclude closeout month*/

      /* --------------------------------------------------------*/
       /* format/insert dfcast.vwsgrp01 rows for each style group*/
      /* --------------------------------------------------------*/
      set FFLREC empty;
      FFLREC.SYBSTGNB = PG7REC.SYBSTGNB;
      FG0IS03(); /* select dfcast.vwsgrp01 row*/

      if (SQLCA.VAGen_SQLCODE == 0)
        /* NEXT SENTENCE*/
      else
        FFLREC.FF6SLFCT = 0;
        FFLREC.FFEFCTGT = 0;

        FF3REC.SYBSTGNB = PG7REC.SYBSTGNB;
        FG0IS67(); /* Obtain style dev flag*/
        FFLREC.FF8DEVFL = FF3REC.FF8DEVFL;

        FG0IS23(); /* format/insert dfcast.vwsgrp01 rows*/
      end
    end

    FG0IS-200(); /* fetch next dprodg.vmxprc01*/

  end

  FG0IS-300(); /* close dprodg.vmxprc01 set*/

end // end FG0IS65

// explode remaining sty groups
Function FG0IS66()
   /* ------------------------------------------------------------*/
   /* select any remaining style groups for the requested product*/
   /* that have not been displayed on a map and explode them*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFBEGMO = FFWREC.FFABEGMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFWREC.FFAENDMO; /* Ending month*/

  PG7REC.SYBSTGNB = FG0IW00.FG0IWSNB; /* previous style group*/
  PG7REC.PG7MAXPR = FG0IW00.FG0IWPRC; /* previous price*/

  FG0IS-100(); /* select set on dprodg.vmxprc01*/

  FG0IS-200(); /* fetch first dprodg.vmxprc01 row*/

  while (SQLCA.VAGen_SQLCODE == 0) /* process unitl end of dprodg.vmxprc01*/

    if (PG7REC.PG7MAXCM != FFWREC.FFABEGMO) /* and exclude closeout month*/

      /* --------------------------------------------------------*/
       /* explode for each style group*/
      /* --------------------------------------------------------*/
      FG0IW00.FG0IWSAV = PG7REC.SYBSTGNB; /* save style group*/
      FG0I171(); /* explode style group*/

    end

    FG0IS-200(); /* fetch next dprodg.vmxprc01*/

  end

  FG0IS-300(); /* close dprodg.vmxprc01 set*/

end // end FG0IS66

// Obtain style dev flag
Function FG0IS67()
   /* ---------------------------------------------------------------*/
   /* Obtain style development flag.*/
   /* ---------------------------------------------------------------*/

  FG0IS53(); /* open ffsty*/

  FG0IS54(); /* fetch ffsty*/

  while (SQLCA.VAGen_SQLCODE == 0)
    if (FF3REC.FF8DEVFL == "N") /* Not an in-devl style group*/
      SQLCA.VAGen_SQLCODE = 100;
    else
      FG0IS54(); /* fetch ffsty*/
    end
  end


  FG0IS55(); /* close ffsty*/
end // end FG0IS67

// Process the current month
Function FG0IS68()
   /* -----------------------------------------------------*/
   /* Demand fcst for current month =*/
       /* (sls of current month - sls of previous month) /*/
       /* fill rate from VMSTY01*/
   /* -----------------------------------------------------*/

  FG0IW00.FG0IWNM2 = 0; /* initialize style color fcst field*/
  set FF9REC empty; /* clear table row*/

  FF9REC.FF4FCTMO = FG0IW00.FG0IW-CURR-MO-MINUS1;
  FG0IS79(); /* select 's' dfcast.vmsty001*/
  FG0IW00.FG0IWNM2 = FF9REC.FF6SLFCT;

  FF9REC.FF4FCTMO = FG0IW00.FG0IW-CURR-MO; /* current month*/
  FG0IS79(); /* select 's' dfcast.vmsty001*/

  if (FF9REC.FF7FLLRT != 0)
    FG0IW00.FG0IWNM2 = FF9REC.FF6SLFCT - FG0IW00.FG0IWNM2;
    FG0IW00.FG0IWNM2 = FG0IW00.FG0IWNM2 * 100 / FF9REC.FF7FLLRT;
  else
    FG0IW00.FG0IWNM2 = 0;
  end

end // end FG0IS68

// process mo betwn curr & buy mo
Function FG0IS69()
   /* -----------------------------------------------------*/
   /* Demand fcst for current thru buy month =*/
       /* sls of process month / fill rate from VMSTY01*/
   /* -----------------------------------------------------*/
  set FF9REC empty; /* clear table row*/
  FG0IW00.FG0IWNM2 = 0;

  FF9REC.FF4FCTMO = FG0IW00.FG0IWWDT;
  FG0IS79(); /* select 's' dfcast.vmsty01*/

  if (FF9REC.FF7FLLRT != 0)
    FG0IW00.FG0IWNM2 = FF9REC.FF6SLFCT * 100 / FF9REC.FF7FLLRT;
  else
    FG0IW00.FG0IWNM2 = 0;
  end

end // end FG0IS69

// Obtn sgrp-mxprc & his sls-1 yr
Function FG0IS70()
   /* ------------------------------------------------------------------*/
   /* Using dprodg.vmxprc01 as the driver obtain all style group sales*/
   /* data, both actual and forecasted.*/
   /* ------------------------------------------------------------------*/

  FG0IW00.FG0IWIDX = 1; /* init index*/
  FG0IW00.FG0IWYIX = 1; /* indicate 1 year ago*/

  PG7REC.SYBSTGNB = FG0IW00.FG0IWSN1;
  PG7REC.PG7MAXPR = FG0IW00.FG0IWPS1;

  if (FG0IW01.FG0IWPBD[1] < FG0IW00.FG0IW-CURR-MO) /* all actual range*/
    FFFREC.FFFBEGMO = -999999999; /* Beginning month*/
    FFFREC.FFFENDMO = 999999999; /* Ending month*/

  else /* mixed or all forecasted range*/
    FFFREC.FFFBEGMO = FG0IW01.FG0IWPBD[1];
    FFFREC.FFFENDMO = FG0IW01.FG0IWPED[1];

  end

  FG0IS-100(); /* select set on dprodg.vmxprc01*/

  FG0IS-200(); /* fetch first dprodg.vmxprc01 row*/

  while (SQLCA.VAGen_SQLCODE == 0 /* proc until end of dprodg.vmxprc01*/
   && FG0IW00.FG0IWIDX <= 11) /* or end of page*/

    if (FG0IW01.FG0IWPED[1] < FG0IW00.FG0IW-CURR-MO) /* all actual range*/
      FG0IW00.FG0IWGRP = "Y";
      FG0IS93();
    else /* mixed or all fcst range*/
      FG0IS92(); /* check if stygrp is active in vffsty01*/

      if (FG0IW00.FG0IWGRP == "Y") /* active style group*/
        FG0IS93();
      else /* style group is closed out*/
        if (FG0IW00.FG0IWGRP == "N" /* closed out style group*/
         && PG7REC.PG7MAXCM > FG0IW01.FG0IWPBD[1]) /* clsout mo GT beg mo*/
          FG0IS93();
        end
      end
    end

    FG0IS-200(); /* fetch first dprodg.vmxprc01 row*/

  end

  if (SQLCA.VAGen_SQLCODE == +100)
    FG0IW00.FG0IWS1L = "Y";
  end

  if (FG0IW00.FG0IWIDX > 1)
    FG0IW00.FG0IWPIX = FG0IW00.FG0IWIDX - 1;
    FG0IW00.FG0IWSN1 = FG0IW02.FG0IWSN1[FG0IWPIX];
    FG0IW00.FG0IWPS1 = FG0IW02.FG0IWSP1[FG0IWPIX];
  end

  FG0IS-300(); /* close dprodg.vmxprc01 set*/

   /* ------------------------------------------------------------*/
   /* Obtain the the historical sales total for the category*/
   /* ------------------------------------------------------------*/

  if (FG0IW03.FG0IWUHS[1] == 0)
    FFFREC.FFFBEGMO = FG0IW01.FG0IWPBD[1];
    FFFREC.FFFENDMO = FG0IW01.FG0IWPED[1];
    FG0IS-500();
  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.FG0IWIDX > 1) /* Page was formatted*/
    if (FG0IW00.XXXTSPAG <= FG0IW00.FG0IWFPG /* tot pages of fcst data*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHS2 /* tot pg 2 yr ago sls*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHS3 /* tot pg 3 yr ago sls*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHD1 /* tot pg 1 yr ago dmd*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHD2 /* tot pg 2 yr ago dmd*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHD3) /* tot pg 3 yr ago dmd*/

      if (FG0IW00.FG0IWIDX > FG0IW02.FG0IWNLD)
        FG0IW02.FG0IWNLD = FG0IW00.FG0IWIDX - 1;
        FG0IW02.FG0IWS1X = FG0IW02.FG0IWNLD + 1; /* tot idx for 1 yr ago-sls*/
      else
        FG0IW02.FG0IWS1X = FG0IW00.FG0IWIDX; /* tot idx for 1 yr ago sls*/
      end

      FG0IS11(); /* Update current tsq page*/
      FG0IW00.FG0IWHS1 = FG0IW00.XXXTSPAG; /* Set top page for 1 yr sls*/
    else
      FG0IW02.FG0IWNLD = FG0IW00.FG0IWIDX - 1;
      FG0IW02.FG0IWS1X = FG0IW02.FG0IWNLD + 1; /* tot indx for 1 yr ago sls*/
      FG0IS08(); /* Add page to temp storage*/
      FG0IW00.FG0IWHS1 = FG0IW00.TA5TSQIX;
    end

  end

end // end FG0IS70

// Obtn sgrp-mxprc & his dmd-1 yr
Function FG0IS71()
   /* --------------------------------------------------------------*/
   /* Using dprosg.vmxprc01 was a drive, obtain all style group*/
   /* demand data for both actual and forecasted months.*/
   /* --------------------------------------------------------------*/

  FG0IW00.FG0IWIDX = 1; /* init index*/
  FG0IW00.FG0IWYIX = 1; /* indicate 1 year ago*/

  PG7REC.SYBSTGNB = FG0IW00.FG0IWDN1; /* previous stygrp accessed*/
  PG7REC.PG7MAXPR = FG0IW00.FG0IWPD1; /* previous price*/

  if (FG0IW01.FG0IWPBD[1] < FG0IW00.FG0IW-CURR-MO)

    FFFREC.FFFBEGMO = -999999999; /* Beginning month*/
    FFFREC.FFFENDMO = 999999999; /* Ending month*/

  else

    FFFREC.FFFBEGMO = FG0IW01.FG0IWPBD[1];
    FFFREC.FFFENDMO = FG0IW01.FG0IWPED[1];

  end

  FG0IS-100(); /* select set on dprodg.vmxprc01*/

  FG0IS-200(); /* fetch first dprodg.vmxprc01 row*/

   /* ------------------------------------------------------------*/
   /* Read in the tsq page which contains the fcst information*/
   /* set up in the previous step.*/
   /* ------------------------------------------------------------*/

  while (SQLCA.VAGen_SQLCODE == 0 /* process until end of dprodg.vmxprc01*/
   && FG0IW00.FG0IWIDX <= 11) /* or end of page*/

    if (FG0IW01.FG0IWPED[1] < FG0IW00.FG0IW-CURR-MO) /* all actual range*/
      FG0IW00.FG0IWGRP = "Y"; /* active style group*/
      FG0IS94();
    else /* mixed or all fcst range*/
      FG0IS92(); /* check if stygrp is active in vffsty01*/

      if (FG0IW00.FG0IWGRP == "Y") /* active style group*/
        FG0IS94();
      else /* style group is closed out*/
        if (FG0IW00.FG0IWGRP == "N" /* active style group*/
         && PG7REC.PG7MAXCM > FG0IW01.FG0IWPBD[1]) /* clsout mo GT beg mo*/
          FG0IS94();
        end
      end
    end

    FG0IS-200(); /* fetch next dprodg.vmxprc01*/
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    FG0IW00.FG0IWD1L = "Y";
  end

  if (FG0IW00.FG0IWIDX > 1)
    FG0IW00.FG0IWPIX = FG0IW00.FG0IWIDX - 1;
    FG0IW00.FG0IWDN1 = FG0IW02.FG0IWDN1[FG0IWPIX];
    FG0IW00.FG0IWPD1 = FG0IW02.FG0IWPR1[FG0IWPIX];
  end

  FG0IS-300(); /* close dprodg.vmxprc01 set*/

   /* ------------------------------------------------------------*/
   /* Obtain historical demand totals for the category.*/
   /* ------------------------------------------------------------*/

  if (FG0IW03.FG0IWUHD[1] == 0)
    FFFREC.FFFBEGMO = FG0IW01.FG0IWPBD[1];
    FFFREC.FFFENDMO = FG0IW01.FG0IWPED[1];
    FG0IS-700();
  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.FG0IWIDX > 1) /* Page was formatted*/

    if (FG0IW00.XXXTSPAG <= FG0IW00.FG0IWFPG /* tot pg of fcst data*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHS1 /* tot pg of 1 yr ago dmd*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHS2 /* tot pg of 2 yr ago dmd*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHS3 /* tot pg of 3 yr ago dmd*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHD2 /* tot pg of 2 yr ago dmd*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHD3) /* tot pg of 3 yr ago dmd*/
      if (FG0IW00.FG0IWIDX > FG0IW02.FG0IWNLD)
        FG0IW02.FG0IWNLD = FG0IW00.FG0IWIDX - 1;
        FG0IW02.FG0IWD1X = FG0IW02.FG0IWNLD + 1; /* tot idx for 1 yr ago dmd*/
      else
        FG0IW02.FG0IWD1X = FG0IW00.FG0IWIDX; /* tot idx for 1 yr ago dmd*/
      end

      FG0IS11(); /* Update current tsq page*/
      FG0IW00.FG0IWHD1 = FG0IW00.XXXTSPAG; /* Set top page*/
    else
      FG0IW02.FG0IWNLD = FG0IW00.FG0IWIDX - 1;
      FG0IW02.FG0IWD1X = FG0IW02.FG0IWNLD + 1; /* tot idx for 1 yr ago dmd*/
      FG0IS08(); /* Add page to tsq*/
      FG0IW00.FG0IWHD1 = FG0IW00.TA5TSQIX; /* Set top page*/
    end
  end


end // end FG0IS71

// Obtn sgrp-mxprc & his sls-2 yr
Function FG0IS72()
   /* --------------------------------------------------------------------*/
   /* Using dprodg.vmxpr01 as the driver obtain all style group sales*/
   /* --------------------------------------------------------------------*/

  FG0IW00.FG0IWIDX = 1; /* init index*/
  FG0IW00.FG0IWYIX = 2; /* indicate 2 year ago*/

  PG7REC.SYBSTGNB = FG0IW00.FG0IWSN2;
  PG7REC.PG7MAXPR = FG0IW00.FG0IWPS2;

  if (FG0IW01.FG0IWPBD[2] < FG0IW00.FG0IW-CURR-MO)
    FFFREC.FFFBEGMO = -999999999; /* Beginning month*/
    FFFREC.FFFENDMO = 999999999; /* Ending month*/

  else
    FFFREC.FFFBEGMO = FG0IW01.FG0IWPBD[2];
    FFFREC.FFFENDMO = FG0IW01.FG0IWPED[2];
  end

  FG0IS-100(); /* select set on dprodg.vmxprc01*/

  FG0IS-200(); /* fetch first dprodg.vmxprc01 row*/

  while (SQLCA.VAGen_SQLCODE == 0 /* process until end of dprodg.vmxprc01*/
   && FG0IW00.FG0IWIDX <= 11) /* or end of page*/

    if (FG0IW01.FG0IWPED[2] < FG0IW00.FG0IW-CURR-MO) /* all actl*/
      FG0IW00.FG0IWGRP = "Y";
      FG0IS95();
    else /* mixed or all fcst*/
      FG0IS92(); /* check if stygrp is active in vffsty*/

      if (FG0IW00.FG0IWGRP == "Y") /* active style group*/
        FG0IS95();
      else
        if (FG0IW00.FG0IWGRP == "N" /* closed out style group*/
         && PG7REC.PG7MAXCM > FG0IW01.FG0IWPBD[2]) /* clsout mo GT beg mo*/
          FG0IS95();
        end
      end
    end

    FG0IS-200(); /* fetch next dprodg.vmxprc01*/
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    FG0IW00.FG0IWS2L = "Y";
  end

  if (FG0IW00.FG0IWIDX > 1)
    FG0IW00.FG0IWPIX = FG0IW00.FG0IWIDX - 1;
    FG0IW00.FG0IWSN2 = FG0IW02.FG0IWSN2[FG0IWPIX];
    FG0IW00.FG0IWPS2 = FG0IW02.FG0IWSP2[FG0IWPIX];
  end

  FG0IS-300(); /* close dprodg.vmxprc01 set*/

   /* ------------------------------------------------------------*/
   /* Obtain the the historical sales total for the category*/
   /* ------------------------------------------------------------*/

  if (FG0IW03.FG0IWUHS[2] == 0)
    FFFREC.FFFBEGMO = FG0IW01.FG0IWPBD[2];
    FFFREC.FFFENDMO = FG0IW01.FG0IWPED[2];
    FG0IS-500(); /* process dfhist.vfhcat001*/
  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.FG0IWIDX > 1) /* Page was formatted*/
    if (FG0IW00.XXXTSPAG <= FG0IW00.FG0IWFPG /* <= tot pages of fcst data*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHS1 
     /* <= tot page of 1 yr ago his*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHS3 
     /* <= tot page of 3 yr ago his*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHD1 
     /* <= tot page of 1 yr ago his*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHD2 
     /* <= tot page of 2 yr ago his*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHD3)
                                   /* <= tot page of 3 yr ago his*/

      if (FG0IW00.FG0IWIDX > FG0IW02.FG0IWNLD)
        FG0IW02.FG0IWNLD = FG0IW00.FG0IWIDX - 1;
        FG0IW02.FG0IWS2X = FG0IW02.FG0IWNLD + 1;
                                   /* tot idx for 2 yr ago hist*/
      else
        FG0IW02.FG0IWS2X = FG0IW00.FG0IWIDX; /* tot idx for 2 yr ago hist*/
      end

      FG0IS11(); /* Update current tsq page*/
      FG0IW00.FG0IWHS2 = FG0IW00.XXXTSPAG; /* Set top page for 2 yr his*/
    else
      FG0IW02.FG0IWNLD = FG0IW00.FG0IWIDX - 1;
      FG0IW02.FG0IWS2X = FG0IW02.FG0IWNLD + 1; /* tot indx for 2 yr ago hos*/
      FG0IS08(); /* Add page to temp storage*/
      FG0IW00.FG0IWHS2 = FG0IW00.TA5TSQIX;
    end

  end

end // end FG0IS72

// Obtn sgrp-mxprc & his dmd-2 yr
Function FG0IS73()
   /* -------------------------------------------------------------------*/
   /* Using dprodg.vmxprc01 as the driver obtain all style group demand*/
   /* data, both actual and forecasted.*/
   /* -------------------------------------------------------------------*/

  FG0IW00.FG0IWIDX = 1; /* init index*/
  FG0IW00.FG0IWYIX = 2; /* indicate 2 year ago*/

  PG7REC.SYBSTGNB = FG0IW00.FG0IWDN2; /* previous stygrp accessed*/
  PG7REC.PG7MAXPR = FG0IW00.FG0IWPD2; /* previous price*/

  if (FG0IW01.FG0IWPBD[2] < FG0IW00.FG0IW-CURR-MO)

    FFFREC.FFFBEGMO = -999999999; /* Beginning month*/
    FFFREC.FFFENDMO = 999999999; /* Ending month*/
  else

    FFFREC.FFFBEGMO = FG0IW01.FG0IWPBD[2];
    FFFREC.FFFENDMO = FG0IW01.FG0IWPED[2];
  end

  FG0IS-100(); /* select set on dprodg.vmxprc01*/

  FG0IS-200(); /* fetch first dprodg.vmxprc01 row*/

   /* ------------------------------------------------------------*/
   /* Read in the tsq page which contains the fcst information*/
   /* set up in the previous step.*/
   /* ------------------------------------------------------------*/

  while (SQLCA.VAGen_SQLCODE == 0 /* process until end of dprodg.vmxprc01*/
   && FG0IW00.FG0IWIDX <= 11) /* or end of page*/

    if (FG0IW01.FG0IWPBD[2] < FG0IW00.FG0IW-CURR-MO) /* all actual*/
      FG0IW00.FG0IWGRP = "Y"; /* active style group*/
      FG0IS96();
    else
      FG0IS92(); /* check if stygrp is active in vffsty01*/

      if (FG0IW00.FG0IWGRP == "Y") /* active style group*/
        FG0IS96();
      else
        if (FG0IW00.FG0IWGRP == "N" /* closed out style group*/
         && PG7REC.PG7MAXCM > FG0IW01.FG0IWPBD[2])
                                   /* clsout mo gt beg mo*/
          FG0IS96();
        end
      end
    end

    FG0IS-200(); /* fetch next dprodg.vmxprc01*/

  end

  if (SQLCA.VAGen_SQLCODE == +100) /* last record*/
    FG0IW00.FG0IWD2L = "Y";
  end

  if (FG0IW00.FG0IWIDX > 1)
    FG0IW00.FG0IWPIX = FG0IW00.FG0IWIDX - 1;
    FG0IW00.FG0IWDN2 = FG0IW02.FG0IWDN2[FG0IWPIX];
    FG0IW00.FG0IWPD2 = FG0IW02.FG0IWPR2[FG0IWPIX];
  end

  FG0IS-300(); /* close dprodg.vmxprc01 set*/

   /* ------------------------------------------------------------*/
   /* Obtain historical demand total of the category.*/
   /* ------------------------------------------------------------*/

  if (FG0IW03.FG0IWUHD[2] == 0)

    FFFREC.FFFBEGMO = FG0IW01.FG0IWPBD[2];
    FFFREC.FFFENDMO = FG0IW01.FG0IWPED[2];
    FG0IS-700(); /* Process dfhist.vfhcat01*/

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.FG0IWIDX > 1) /* Page was formatted*/

    if (FG0IW00.XXXTSPAG <= FG0IW00.FG0IWFPG /* <= tot pages of fcst data*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHS1 /* <= tot page of 1 yr ago his*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHS2 /* <= tot page of 2 yr ago his*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHS3 /* <= tot page of 3 yr ago his*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHD1 /* <= tot page of 1 yr ago his*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHD3)
                                   /* <= tot page of 3 yr ago his*/
      if (FG0IW00.FG0IWIDX > FG0IW02.FG0IWNLD)
        FG0IW02.FG0IWNLD = FG0IW00.FG0IWIDX - 1;
        FG0IW02.FG0IWD2X = FG0IW02.FG0IWNLD + 1;
                                   /* tot idx for 2 yr ago hist*/
      else
        FG0IW02.FG0IWD2X = FG0IW00.FG0IWIDX; /* tot idx for 2 yr ago hist*/
      end

      FG0IS11(); /* Update current tsq page*/
      FG0IW00.FG0IWHD2 = FG0IW00.XXXTSPAG; /* Set top page*/

    else
      FG0IW02.FG0IWNLD = FG0IW00.FG0IWIDX - 1;
      FG0IW02.FG0IWD2X = FG0IW02.FG0IWNLD + 1; /* tot indx for 2 yr ago his*/
      FG0IS08(); /* Add page to tsq*/

      FG0IW00.FG0IWHD2 = FG0IW00.TA5TSQIX; /* Set top page*/

    end
  end

end // end FG0IS73

// Obtn sgrp-mxprc & his sls-3 yr
Function FG0IS74()
   /* --------------------------------------------------------------------*/
   /* Using dprodg.vmxprc01 as the driver obtain all style group sales*/
   /* data, both actual and forecasted.*/
   /* --------------------------------------------------------------------*/

  FG0IW00.FG0IWIDX = 1; /* init index*/
  FG0IW00.FG0IWYIX = 3; /* indicate 3 year ago*/

  PG7REC.SYBSTGNB = FG0IW00.FG0IWSN3;
  PG7REC.PG7MAXPR = FG0IW00.FG0IWPS3;

  if (FG0IW01.FG0IWPBD[3] < FG0IW00.FG0IW-CURR-MO)

    FFFREC.FFFBEGMO = -999999999; /* Beginning month*/
    FFFREC.FFFENDMO = 999999999; /* Ending month*/

  else

    FFFREC.FFFBEGMO = FG0IW01.FG0IWPBD[3];
    FFFREC.FFFENDMO = FG0IW01.FG0IWPED[3];

  end

  FG0IS-100(); /* select set on dprodg.vmxprc01*/

  FG0IS-200(); /* fetch first dprodg.vmxprc01 row*/

  while (SQLCA.VAGen_SQLCODE == 0 /* process until end of dprodg.vmxprc01*/
   && FG0IW00.FG0IWIDX <= 11) /* or end of page*/

    if (FG0IW01.FG0IWPED[3] < FG0IW00.FG0IW-CURR-MO)
      FG0IW00.FG0IWGRP = "Y";
      FG0IS97();
    else /* mixed or fcst dates exists*/
      FG0IS92(); /* check if stygrp is active in vffsty*/
      if (FG0IW00.FG0IWGRP == "Y") /* active out style group*/
        FG0IS97();
      else
        if (FG0IW00.FG0IWGRP == "N" /* closed out style group*/
         && PG7REC.PG7MAXCM > FG0IW01.FG0IWPBD[3])
                                   /* clsout mo gt beg mo*/

          FG0IS97();
        end
      end
    end

    FG0IS-200(); /* fetch next dprodg.vmxprc01*/
  end

  if (SQLCA.VAGen_SQLCODE == +100) /* last record*/
    FG0IW00.FG0IWS3L = "Y";
  end

  if (FG0IW00.FG0IWIDX > 1)
    FG0IW00.FG0IWPIX = FG0IW00.FG0IWIDX - 1;
    FG0IW00.FG0IWSN3 = FG0IW02.FG0IWSN3[FG0IWPIX];
    FG0IW00.FG0IWPS3 = FG0IW02.FG0IWSP3[FG0IWPIX];
  end

  FG0IS-300(); /* close dprodg.vmxprc01 set*/

   /* ------------------------------------------------------------*/
   /* Obtain the the historical sales total for the category*/
   /* ------------------------------------------------------------*/

  if (FG0IW03.FG0IWUHS[3] == 0)
    FFFREC.FFFBEGMO = FG0IW01.FG0IWPBD[3];
    FFFREC.FFFENDMO = FG0IW01.FG0IWPED[3];
    FG0IS-500(); /* process dfhist.vfhcat001*/
  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.FG0IWIDX > 1) /* Page was formatted*/
    if (FG0IW00.XXXTSPAG <= FG0IW00.FG0IWFPG /* <= tot pages of fcst data*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHS1 
     /* <= tot page of 1 yr ago his*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHS2 
     /* <= tot page of 2 yr ago his*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHD1 
     /* <= tot page of 1 yr ago his*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHD2 
     /* <= tot page of 2 yr ago his*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHD3)
                                   /* <= tot page of 3 yr ago his*/

      if (FG0IW00.FG0IWIDX > FG0IW02.FG0IWNLD)
        FG0IW02.FG0IWNLD = FG0IW00.FG0IWIDX - 1;
        FG0IW02.FG0IWS3X = FG0IW02.FG0IWNLD + 1;
                                   /* tot idx for 3 yr ago hist*/
      else
        FG0IW02.FG0IWS3X = FG0IW00.FG0IWIDX; /* tot idx for 3 yr ago hist*/
      end

      FG0IS11(); /* Update current tsq page*/
      FG0IW00.FG0IWHS3 = FG0IW00.XXXTSPAG; /* Set top page for 3 yr his*/
    else
      FG0IW02.FG0IWNLD = FG0IW00.FG0IWIDX - 1;
      FG0IW02.FG0IWS3X = FG0IW02.FG0IWNLD + 1; /* tot indx for 3 yr ago hos*/
      FG0IS08(); /* Add page to temp storage*/
      FG0IW00.FG0IWHS3 = FG0IW00.TA5TSQIX;
    end

  end

end // end FG0IS74

// Obtn sgrp-mxprc & his dmd-3 yr
Function FG0IS75()
   /* -------------------------------------------------------------------*/
   /* Use dprodg.vmxprc01 as the driver and obtain both forecasted and*/
   /* actual demand quantities.*/
   /* -------------------------------------------------------------------*/

  FG0IW00.FG0IWIDX = 1; /* init index*/
  FG0IW00.FG0IWYIX = 3; /* indicate 3 year ago*/

  PG7REC.SYBSTGNB = FG0IW00.FG0IWDN3; /* previous stygrp accessed*/
  PG7REC.PG7MAXPR = FG0IW00.FG0IWPD3; /* previous price*/

  if (FG0IW01.FG0IWPBD[3] < FG0IW00.FG0IW-CURR-MO)

    FFFREC.FFFBEGMO = -999999999; /* Beginning month*/
    FFFREC.FFFENDMO = 999999999; /* Ending month*/
  else
    FFFREC.FFFBEGMO = FG0IW01.FG0IWPBD[3];
    FFFREC.FFFENDMO = FG0IW01.FG0IWPED[3];
  end

  FG0IS-100(); /* select set on dprodg.vmxprc01*/

  FG0IS-200(); /* fetch first dprodg.vmxprc01 row*/

   /* ------------------------------------------------------------*/
   /* Read in the tsq page which contains the fcst information*/
   /* set up in the previous step.*/
   /* ------------------------------------------------------------*/

  while (SQLCA.VAGen_SQLCODE == 0 /* process unitl end of dprodg.vmxprc01*/
   && FG0IW00.FG0IWIDX <= 11) /* or end of page*/

    if (FG0IW01.FG0IWPED[3] < FG0IW00.FG0IW-CURR-MO)
      FG0IW00.FG0IWGRP = "Y"; /* stygrp is active*/
      FG0IS98();
    else

      FG0IS92(); /* check if stygrp active is in vffsty*/

      if (FG0IW00.FG0IWGRP == "Y") /* stygrp is active*/
        FG0IS98();
      else
        if (FG0IW00.FG0IWGRP == "N" /* closed out style group*/
         && PG7REC.PG7MAXCM > FG0IW01.FG0IWPBD[3]) /* clsout mo GT beg mo*/
          FG0IS98();
        end
      end
    end

    FG0IS-200(); /* fetch next dprodg.vmxprc01*/

  end

  if (SQLCA.VAGen_SQLCODE == +100)
    FG0IW00.FG0IWD3L = "Y";
  end

  if (FG0IW00.FG0IWIDX > 1)
    FG0IW00.FG0IWPIX = FG0IWIDX - 1;
    FG0IW00.FG0IWDN3 = FG0IW02.FG0IWDN3[FG0IWPIX];
    FG0IW00.FG0IWPD3 = FG0IW02.FG0IWPR3[FG0IWPIX];
  end

  FG0IS-300(); /* close dprodg.vmxprc01 set*/

   /* ------------------------------------------------------------*/
   /* Obtain historical demand total of the category.*/
   /* ------------------------------------------------------------*/

  if (FG0IW03.FG0IWUHD[3] == 0)
    FFFREC.FFFBEGMO = FG0IW01.FG0IWPBD[3];
    FFFREC.FFFENDMO = FG0IW01.FG0IWPED[3];
    FG0IS-700(); /* Process dfhist.vfhcat01*/
  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.FG0IWIDX > 1) /* Page was formatted*/

    if (FG0IW00.XXXTSPAG <= FG0IW00.FG0IWFPG /* <= tot pages of fcst data*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHS1 /* <= tot page of 1 yr ago his*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHS2 /* <= tot page of 2 yr ago his*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHS3 /* <= tot page of 3 yr ago his*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHD1 /* <= tot page of 1 yr ago his*/
     || FG0IW00.XXXTSPAG <= FG0IW00.FG0IWHD2)
                                   /* <= tot page of 2 yr ago his*/
      if (FG0IW00.FG0IWIDX > FG0IW02.FG0IWNLD)
        FG0IW02.FG0IWNLD = FG0IW00.FG0IWIDX - 1;
        FG0IW02.FG0IWD3X = FG0IW02.FG0IWNLD + 1;
                                   /* tot idx for 3 yr ago hist*/
      else
        FG0IW02.FG0IWD3X = FG0IW00.FG0IWIDX; /* tot idx for 3 yr ago hist*/
      end

      FG0IS11(); /* Update current tsq page*/

      FG0IW00.FG0IWHD3 = FG0IW00.XXXTSPAG; /* Set top page*/

    else

      FG0IW02.FG0IWNLD = FG0IW00.FG0IWIDX - 1;
      FG0IW02.FG0IWD3X = FG0IW02.FG0IWNLD + 1; /* tot indx for 3 yr ago his*/
      FG0IS08(); /* Add page to tsq*/

      FG0IW00.FG0IWHD3 = FG0IW00.TA5TSQIX; /* Set top page*/

    end
  end

end // end FG0IS75

// open 's1' dfcast.vffsty01
Function FG0IS76()
   /* ------------------------------------------------------------*/
   /* Select set on dfcast.vffsty01 table.*/
   /* ------------------------------------------------------------*/
  set FF3REC empty;

  FF3REC.SYBSTGNB = PG7REC.SYBSTGNB; /* style group number*/
  FF3REC.YSMXDV = "10";
  FF3REC.YPGCD = FFWREC.YPGCD;
  FF3REC.XLCCD = "10";

  try
    call "IO3990" ("S1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S76"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    if (FG0IW00.FG0IWSWD == "1")
      converseLib.clearScreen();
       /* Clear screen before display*/
    else
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S1 ON DFCAST.VFFSTY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0IS76

// fetch 'n1' dfcast.vffsty01
Function FG0IS77()
   /* ------------------------------------------------------------*/
   /* fetch dfcast.vffsty01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("N1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      FG0IW00.FG0IWEOF = "Y"; /* end of file*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S77"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    if (FG0IW00.FG0IWSWD == "1")
      converseLib.clearScreen();
       /* Clear screen before display*/
    else
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DFCAST.VFFSTY01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0IS77

// close 'c1' dfcast.vffsty01
Function FG0IS78()
   /* ------------------------------------------------------------*/
   /* close dfcast.vffsty01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("C1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "S78"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C1 DFCAST.VFFSTY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0IS78

// select 's ' dfcast.vmsty001
Function FG0IS79()
   /* ------------------------------------------------------------*/
   /* Load fffrec record*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "S "; /* function code*/

   /* ------------------------------------------------------------*/
   /* Load ff9rec record - dfcast.vmsty0001*/
   /* ------------------------------------------------------------*/

  FF9REC.SY1STNBR = FF3REC.SY1STNBR; /* style nbr*/
  FF9REC.SY2CLRID = FF3REC.SY2CLRID; /* style color id*/
  FF9REC.XDMCD = FF3REC.XDMCD; /* dimension code*/
  FF9REC.XCTCD = "USA"; /* country code*/
  FF9REC.YSMXDV = "10"; /* div code*/

   /* ------------------------------------------------------------*/
   /* Select sum dfcast.vmsty0001*/
   /* ------------------------------------------------------------*/

  try
    call "IO3740" (FFFREC, SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or zero total, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* zero total returned*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indisty0e that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S79"; /* Module identifisty0ion*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indisty0e not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indisty0e system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    if (FG0IW00.FG0IWSWD == "1")
      converseLib.clearScreen();
       /* Clear screen before display*/
    else
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUM TABLE DFCAST.VMSTY001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program applisty0ion*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0IS79

// verify stygrp in vffsty01
Function FG0IS92()
   /* ----------------------------------------------------------------*/
   /* If the style group from VMXPRC01 is not in dfcast.vffsty01*/
   /* then this style group has closed out, and no associated*/
   /* VMSGRP01 row exists; if there is one, it is not maintained and*/
   /* is inaccurate.*/
   /* ----------------------------------------------------------------*/

  FG0IW00.FG0IWGRP = "N"; /* valid style group flag*/

  set FF3REC empty;
  FF3REC.SYBSTGNB = PG7REC.SYBSTGNB;

  FG0IS53(); /* open ffsty*/

  FG0IS54(); /* fetch ffsty*/
  if (SQLCA.VAGen_SQLCODE == 0)
    FG0IW00.FG0IWGRP = "Y";
  end

  FG0IS55(); /* close ffsty*/

end // end FG0IS92

// Process 1 yr ago hist sales
Function FG0IS93()
   /* ----------------------------------------------------------------*/
   /* Process 1 year ago date range for sales.*/
   /* ----------------------------------------------------------------*/

  FG0IW02.FG0IWSN1[FG0IWIDX] = PG7REC.SYBSTGNB; /* style grp no.*/
  FG0IW02.FG0IWSM1[FG0IWIDX] = PG7REC.SYBSTGNM; /* style grp name*/
  FG0IW02.FG0IWSP1[FG0IWIDX] = PG7REC.PG7MAXPR; /* style grp price*/

  FG0IW00.FG0IWSHS = 0;

  FFFREC.FFFBEGMO = FG0IW01.FG0IWPBD[1];
  FFFREC.FFFENDMO = FG0IW01.FG0IWPED[1];
  FG0IW00.FG0IWEND = FG0IW01.FG0IWPED[1];

   /* ----------------------------------------------------------------*/
   /* If the style group has closed out and if the close out month*/
   /* is less than the ending date range*/
   /* Subtract one from the closeout month, this will be the new*/
   /* ending date.*/
   /* ----------------------------------------------------------------*/

  if (FG0IW00.FG0IWGRP == "N" /* closeout style group*/
   && PG7REC.PG7MAXCM <= FFFREC.FFFENDMO) /* closeout mo before end mo*/

    FG0IW00.FG0IWWDT = PG7REC.PG7MAXCM;

    if (FG0IW00.FG0IWWMM == 1)
      FG0IW00.FG0IWWMM = 12;
      if (FG0IW00.FG0IWWYY == 00)
        FG0IW00.FG0IWWYY = 99;
        FG0IW00.FG0IWWCC = FG0IW00.FG0IWWCC - 1;
      else
        FG0IW00.FG0IWWYY = FG0IW00.FG0IWWYY - 1;
      end
    else
      FG0IW00.FG0IWWMM = FG0IW00.FG0IWWMM - 1;
    end

    FFFREC.FFFENDMO = FG0IW00.FG0IWWDT;
    FG0IW01.FG0IWPED[1] = FG0IW00.FG0IWWDT;
  end

  FG0IS-400(); /* get historical sales qty*/

  FG0IW01.FG0IWPED[1] = FG0IW00.FG0IWEND; /* restore end mo of range*/

   /* ------------------------------------------------------------*/
   /* If the total quantity = 0*/
   /* If it is an all forecast range*/
   /* and if the first sales month < or = the ending month in*/
   /* the requested range*/
   /* save this style group in temp storage*/
   /* else, total quantity is not = 0*/
   /* save this style group in temp storage*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.FG0IWUHS == 0)
    if (FG0IW01.FG0IWPBD[1] >= FG0IW00.FG0IW-CURR-MO) /* all fcst range*/
      if (FG0IW00.FG0IWGRP == "Y" /* active style group*/
       && PG7REC.PG7MINSM <= FG0IW01.FG0IWPED[1]) /* 1st sls mo*/

        FG0IW02.FG0IWUH1[FG0IWIDX] = FG0IW00.FG0IWUHS;
        FG0IW02.FG0IWHQ1[FG0IWIDX] = FG0IW00.FG0IWHST;
        FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX + 1;
      else
        FG0IW02.FG0IWSN1[FG0IWIDX] = " "; /* style group no.*/
        FG0IW02.FG0IWSM1[FG0IWIDX] = " "; /* style group name*/
      end
    else /* beg dt is actual, qty is 0;*/
                                   /* don't display stygrp*/
      FG0IW02.FG0IWSN1[FG0IWIDX] = " "; /* style group no.*/
      FG0IW02.FG0IWSM1[FG0IWIDX] = " "; /* style group name*/
    end

  else /* qty not = 0*/

    FG0IW02.FG0IWUH1[FG0IWIDX] = FG0IW00.FG0IWUHS;
    FG0IW02.FG0IWHQ1[FG0IWIDX] = FG0IW00.FG0IWHST;
    FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX + 1;
  end

end // end FG0IS93

// Process 1 yr ago hist demand
Function FG0IS94()
   /* ------------------------------------------------------------------*/
   /* Process 1 year ago for demand quantities.*/
   /* ------------------------------------------------------------------*/

  FG0IW02.FG0IWDN1[FG0IWIDX] = PG7REC.SYBSTGNB; /* stygrp nbr*/
  FG0IW02.FG0IWDM1[FG0IWIDX] = PG7REC.SYBSTGNM; /* stygrp name*/
  FG0IW02.FG0IWPR1[FG0IWIDX] = PG7REC.PG7MAXPR; /* stygrp price*/

  FG0IW00.FG0IWSHD = 0;

  FFFREC.FFFBEGMO = FG0IW01.FG0IWPBD[1];
  FFFREC.FFFENDMO = FG0IW01.FG0IWPED[1];
  FG0IW00.FG0IWEND = FG0IW01.FG0IWPED[1];

  if (FG0IW00.FG0IWGRP == "N" /* closed out style group*/
   && PG7REC.PG7MAXCM <= FFFREC.FFFENDMO)
    FG0IW00.FG0IWWDT = PG7REC.PG7MAXCM;

    if (FG0IW00.FG0IWWMM == 1)
      FG0IW00.FG0IWWMM = 12;
      if (FG0IW00.FG0IWWYY == 00)
        FG0IW00.FG0IWWYY = 99;
        FG0IW00.FG0IWWCC = FG0IW00.FG0IWWCC - 1;
      else
        FG0IW00.FG0IWWYY = FG0IW00.FG0IWWYY - 1;
      end
    else
      FG0IW00.FG0IWWMM = FG0IW00.FG0IWWMM - 1;
    end

    FFFREC.FFFENDMO = FG0IW00.FG0IWWDT;
    FG0IW01.FG0IWPED[1] = FG0IW00.FG0IWWDT;
  end

  FG0IS-600(); /* get historical demand qty*/

  FG0IW01.FG0IWPED[1] = FG0IW00.FG0IWEND; /* restore range end mo*/

   /* ------------------------------------------------------------*/
   /* If the processed range is in the past partially or wholly,*/
   /* need to check the qty of the range. If it is zero, it will*/
   /* not be displayed.*/
   /* ------------------------------------------------------------*/

  if (FG0IW01.FG0IWPBD[1] < FG0IW00.FG0IW-CURR-MO
   && FG0IW00.FG0IWUHD == 0)

    FG0IW02.FG0IWDN1[FG0IWIDX] = " "; /* style group no.*/
    FG0IW02.FG0IWDM1[FG0IWIDX] = " "; /* style group name*/
  else

    FG0IW02.FG0IWUD1[FG0IWIDX] = FG0IW00.FG0IWUHD;
    FG0IW02.FG0IWDQ1[FG0IWIDX] = FG0IW00.FG0IWHDT;

    FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX + 1;
  end

end // end FG0IS94

// Process 2 yrs ago hist sales
Function FG0IS95()
   /* ---------------------------------------------------------------*/
   /* Process 2 years ago from the specifed date range.*/
   /* ---------------------------------------------------------------*/

  FG0IW02.FG0IWSN2[FG0IWIDX] = PG7REC.SYBSTGNB; /* style grp no.*/
  FG0IW02.FG0IWSM2[FG0IWIDX] = PG7REC.SYBSTGNM; /* style grp name*/
  FG0IW02.FG0IWSP2[FG0IWIDX] = PG7REC.PG7MAXPR; /* stygrp price*/

  FFFREC.FFFBEGMO = FG0IW01.FG0IWPBD[2];
  FFFREC.FFFENDMO = FG0IW01.FG0IWPED[2];
  FG0IW00.FG0IWEND = FG0IW01.FG0IWPED[2];

  if (FG0IW00.FG0IWGRP == "N" /* closed out style group*/
   && PG7REC.PG7MAXCM <= FFFREC.FFFENDMO) /* closed out mo before end mo*/
    FG0IW00.FG0IWWDT = PG7REC.PG7MAXCM;

    if (FG0IW00.FG0IWWMM == 1)
      FG0IW00.FG0IWWMM = 12;
      if (FG0IW00.FG0IWWYY == 00)
        FG0IW00.FG0IWWYY = 99;
        FG0IW00.FG0IWWCC = FG0IW00.FG0IWWCC - 1;
      else
        FG0IW00.FG0IWWYY = FG0IW00.FG0IWWYY - 1;
      end
    else
      FG0IW00.FG0IWWMM = FG0IW00.FG0IWWMM - 1;
    end

    FFFREC.FFFENDMO = FG0IW00.FG0IWWDT;
    FG0IW01.FG0IWPED[2] = FG0IW00.FG0IWWDT;
  end

  FG0IS-400(); /* get historical sales qty*/

  FG0IW01.FG0IWPED[2] = FG0IW00.FG0IWEND; /* restore end mo of range*/

   /* ------------------------------------------------------------*/
   /* If the processed range is in the past partially or wholly,*/
   /* need to check the qty of the range. If it is zero, it will*/
   /* not be displayed.*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.FG0IWUHS == 0)
    if (FG0IW01.FG0IWPBD[2] >= FG0IW00.FG0IW-CURR-MO)
      if (FG0IW00.FG0IWGRP == "Y"
       && PG7REC.PG7MINSM <= FG0IW01.FG0IWPED[2])
        FG0IW02.FG0IWUH2[FG0IWIDX] = FG0IW00.FG0IWUHS;
        FG0IW02.FG0IWHQ2[FG0IWIDX] = FG0IW00.FG0IWHST;
        FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX + 1;
      else
        FG0IW02.FG0IWSN2[FG0IWIDX] = " "; /* style group no.*/
        FG0IW02.FG0IWSM2[FG0IWIDX] = " "; /* style group name*/
      end

    else
      FG0IW02.FG0IWSN2[FG0IWIDX] = " "; /* style group no.*/
      FG0IW02.FG0IWSM2[FG0IWIDX] = " "; /* style group name*/
    end

  else

    FG0IW02.FG0IWUH2[FG0IWIDX] = FG0IW00.FG0IWUHS;
    FG0IW02.FG0IWHQ2[FG0IWIDX] = FG0IW00.FG0IWHST;
    FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX + 1;
  end

end // end FG0IS95

// Process 2 yrs ago hist demand
Function FG0IS96()
   /* ----------------------------------------------------------------*/
   /* Process 2 years ago from the specified date range for demand.*/
   /* ----------------------------------------------------------------*/
  FG0IW02.FG0IWDN2[FG0IWIDX] = PG7REC.SYBSTGNB; /* stygrp nbr*/
  FG0IW02.FG0IWDM2[FG0IWIDX] = PG7REC.SYBSTGNM; /* style grp name*/
  FG0IW02.FG0IWPR2[FG0IWIDX] = PG7REC.PG7MAXPR; /* stygrp price*/

  FFFREC.FFFBEGMO = FG0IW01.FG0IWPBD[2];
  FFFREC.FFFENDMO = FG0IW01.FG0IWPED[2];
  FG0IW00.FG0IWEND = FG0IW01.FG0IWPED[2];

  if (FG0IW00.FG0IWGRP == "N" /* closed out style group*/
   && PG7REC.PG7MAXCM <= FFFREC.FFFENDMO) /* closout mo before end mo*/
    FG0IW00.FG0IWWDT = PG7REC.PG7MAXCM;

    if (FG0IW00.FG0IWWMM == 1)
      FG0IW00.FG0IWWMM = 12;
      if (FG0IW00.FG0IWWYY == 00)
        FG0IW00.FG0IWWYY = 99;
        FG0IW00.FG0IWWCC = FG0IW00.FG0IWWCC - 1;
      else
        FG0IW00.FG0IWWYY = FG0IW00.FG0IWWYY - 1;
      end
    else
      FG0IW00.FG0IWWMM = FG0IW00.FG0IWWMM - 1;
    end

    FFFREC.FFFENDMO = FG0IW00.FG0IWWDT;
    FG0IW01.FG0IWPED[2] = FG0IW00.FG0IWWDT;
  end

  FG0IS-600(); /* get historical demand qty*/

  FG0IW01.FG0IWPED[2] = FG0IW00.FG0IWEND; /* restore range end mo*/

   /* ------------------------------------------------------------*/
   /* If the processed range is in the past partially or wholly,*/
   /* need to check the qty of the range. If it is zero, it will*/
   /* not be displayed.*/
   /* ------------------------------------------------------------*/

  if (FG0IW01.FG0IWPBD[2] < FG0IW00.FG0IW-CURR-MO
   && FG0IW00.FG0IWUHD == 0)

    FG0IW02.FG0IWDN2[FG0IWIDX] = " "; /* style group no.*/
    FG0IW02.FG0IWDM2[FG0IWIDX] = " "; /* style group name*/

  else

    FG0IW02.FG0IWUD2[FG0IWIDX] = FG0IW00.FG0IWUHD;
    FG0IW02.FG0IWDQ2[FG0IWIDX] = FG0IW00.FG0IWHDT;

    FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX + 1;

  end

end // end FG0IS96

// Process 3 yrs ago hist sales
Function FG0IS97()
   /* -------------------------------------------------------------------*/
   /* Process 3 years ago from the specified date range for sales.*/
   /* -------------------------------------------------------------------*/

  FG0IW02.FG0IWSN3[FG0IWIDX] = PG7REC.SYBSTGNB; /* stygrp nbr*/
  FG0IW02.FG0IWSM3[FG0IWIDX] = PG7REC.SYBSTGNM; /* style grp name*/
  FG0IW02.FG0IWSP3[FG0IWIDX] = PG7REC.PG7MAXPR; /* stygrp price*/

  FFFREC.FFFBEGMO = FG0IW01.FG0IWPBD[3];
  FFFREC.FFFENDMO = FG0IW01.FG0IWPED[3];
  FG0IW00.FG0IWEND = FG0IW01.FG0IWPED[3];

  if (FG0IW00.FG0IWGRP == "N" /* closed out style group*/
   && PG7REC.PG7MAXCM <= FFFREC.FFFENDMO) /* closeout mo before end mo*/
    FG0IW00.FG0IWWDT = PG7REC.PG7MAXCM;

    if (FG0IW00.FG0IWWMM == 1)
      FG0IW00.FG0IWWMM = 12;
      if (FG0IW00.FG0IWWYY == 00)
        FG0IW00.FG0IWWYY = 99;
        FG0IW00.FG0IWWCC = FG0IW00.FG0IWWCC - 1;
      else
        FG0IW00.FG0IWWYY = FG0IW00.FG0IWWYY - 1;
      end
    else
      FG0IW00.FG0IWWMM = FG0IW00.FG0IWWMM - 1;
    end

    FFFREC.FFFENDMO = FG0IW00.FG0IWWDT;
    FG0IW01.FG0IWPED[3] = FG0IW00.FG0IWWDT;
  end

  FG0IS-400(); /* get historical sales qty*/

  FG0IW01.FG0IWPED[3] = FG0IW00.FG0IWEND; /* restore end mo of range*/

   /* ------------------------------------------------------------*/
   /* If the processed range is in the past partially or wholly,*/
   /* need to check the qty of the range. If it is zero, it will*/
   /* not be displayed.*/
   /* ------------------------------------------------------------*/

  if (FG0IW00.FG0IWUHS == 0)
    if (FG0IW01.FG0IWPBD[3] >= FG0IW00.FG0IW-CURR-MO)
      if (FG0IW00.FG0IWGRP == "Y"
       && PG7REC.PG7MINSM <= FG0IW01.FG0IWPED[3])
        FG0IW02.FG0IWUH3[FG0IWIDX] = FG0IW00.FG0IWUHS;
        FG0IW02.FG0IWHQ3[FG0IWIDX] = FG0IW00.FG0IWHST;
        FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX + 1;
      else
        FG0IW02.FG0IWSN3[FG0IWIDX] = " "; /* style group no.*/
        FG0IW02.FG0IWSM3[FG0IWIDX] = " "; /* style group name*/
      end
    else
      FG0IW02.FG0IWSN3[FG0IWIDX] = " "; /* style group no.*/
      FG0IW02.FG0IWSM3[FG0IWIDX] = " "; /* style group name*/
    end
  else

    FG0IW02.FG0IWUH3[FG0IWIDX] = FG0IW00.FG0IWUHS;
    FG0IW02.FG0IWHQ3[FG0IWIDX] = FG0IW00.FG0IWHST;
    FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX + 1;
  end

end // end FG0IS97

// Process 3 yrs ago hist demand
Function FG0IS98()
   /* -----------------------------------------------------------------*/
   /* Process 3 years ago for the specified date range.*/
   /* -----------------------------------------------------------------*/
  FG0IW02.FG0IWDN3[FG0IWIDX] = PG7REC.SYBSTGNB; /* stygrp nbr*/
  FG0IW02.FG0IWDM3[FG0IWIDX] = PG7REC.SYBSTGNM; /* style grp name*/
  FG0IW02.FG0IWPR3[FG0IWIDX] = PG7REC.PG7MAXPR; /* stygrp price*/

  FFFREC.FFFBEGMO = FG0IW01.FG0IWPBD[3];
  FFFREC.FFFENDMO = FG0IW01.FG0IWPED[3];
  FG0IW00.FG0IWEND = FG0IW01.FG0IWPED[3];

  if (FG0IW00.FG0IWGRP == "N" /* closed out style group*/
   && PG7REC.PG7MAXCM <= FFFREC.FFFENDMO) /* closeout mo before end mo*/
    FG0IW00.FG0IWWDT = PG7REC.PG7MAXCM;

    if (FG0IW00.FG0IWWMM == 1)
      FG0IW00.FG0IWWMM = 12;
      if (FG0IW00.FG0IWWYY == 00)
        FG0IW00.FG0IWWYY = 99;
        FG0IW00.FG0IWWCC = FG0IW00.FG0IWWCC - 1;
      else
        FG0IW00.FG0IWWYY = FG0IW00.FG0IWWYY - 1;
      end
    else
      FG0IW00.FG0IWWMM = FG0IW00.FG0IWWMM - 1;
    end

    FFFREC.FFFENDMO = FG0IW00.FG0IWWDT;
    FG0IW01.FG0IWPED[3] = FG0IW00.FG0IWWDT;
  end

  FG0IS-600(); /* get historical demand qty*/

  FG0IW01.FG0IWPED[3] = FG0IW00.FG0IWEND; /* restore range end mo*/

   /* ------------------------------------------------------------*/
   /* If the processed range is in the past partially or wholly,*/
   /* need to check the qty of the range. If it is zero, it will*/
   /* not be displayed.*/
   /* ------------------------------------------------------------*/

  if (FG0IW01.FG0IWPBD[3] < FG0IW00.FG0IW-CURR-MO
   && FG0IW00.FG0IWUHD == 0)

    FG0IW02.FG0IWDN3[FG0IWIDX] = " "; /* style group no.*/
    FG0IW02.FG0IWDM3[FG0IWIDX] = " "; /* style group name*/
  else

    FG0IW02.FG0IWUD3[FG0IWIDX] = FG0IW00.FG0IWUHD;
    FG0IW02.FG0IWDQ3[FG0IWIDX] = FG0IW00.FG0IWHDT;

    FG0IW00.FG0IWIDX = FG0IW00.FG0IWIDX + 1;
  end

end // end FG0IS98

//*** RECORD=FG0IW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FG0IW00 type basicRecord
  10 FG0IWDCF FG0IWDCF ; 
  10 FG0IWDMF FG0IWDMF ; 
  10 FG0IWFCF FG0IWFCF ; 
  10 FG0IWSGF FG0IWSGF ; 
  10 FG0IWCFL FG0IWCFL ; 
  10 FG0IWERF FG0IWERF ; 
  10 FG0IWSPF FG0IWSPF ; 
  10 FG0IWQTF FG0IWQTF ; 
  10 FG0IW1ST FG0IW1ST ; 
  10 FG0IWEXP FG0IWEXP ; 
  10 FG0IWGRP FG0IWGRP ; 
  10 FG0IWEOF FG0IWEOF ; 
  10 FG0IWFCL FG0IWFCL ; 
  10 FG0IWS1L FG0IWS1L ; 
  10 FG0IWS2L FG0IWS2L ; 
  10 FG0IWS3L FG0IWS3L ; 
  10 FG0IWD1L FG0IWD1L ; 
  10 FG0IWD2L FG0IWD2L ; 
  10 FG0IWD3L FG0IWD3L ; 
  10 FG0IWSWR FG0IWSWR ; 
  10 FG0IWSWF FG0IWSWF ; 
  10 FG0IWSWD FG0IWSWD ; 
  10 FG0IWMOD FG0IWMOD ; 
  10 FG0IWSLC FG0IWSLC ; 
  10 FG0IWSLF FG0IWSLF ; 
  10 FG0IWYDS FG0IWYDS [3] ; 
  10 FG0IWHDS FG0IWHDS [2] ; 
  10 FG0IWNM1 FG0IWNM1 ; 
  10 FG0IWNM2 FG0IWNM2 ; 
  10 FG0IWNM3 FG0IWNM3 ; 
  10 FG0IWNDP FG0IWNDP ; 
  10 FG0IWPC1 FG0IWPC1 ; 
  10 FG0IWSUT FG0IWSUT ; 
  10 FG0IWSTG FG0IWSTG ; 
  10 FG0IWSHS FG0IWSHS ; 
  10 FG0IWSHD FG0IWSHD ; 
  10 FG0IWUHS FG0IWUHS ; 
  10 FG0IWHST FG0IWHST ; 
  10 FG0IWUHD FG0IWUHD ; 
  10 FG0IWHDT FG0IWHDT ; 
  10 FG0IWIDX FG0IWIDX ; 
  10 FG0IWPIX FG0IWPIX ; 
  10 FG0IWYIX FG0IWYIX ; 
  10 FG0IWCWD FG0IWCWD ; 
    15 FG0IWCYM FG0IWCYM ; 
      20 FG0IWCCC FG0IWCCC ; 
      20 FG0IWCYY FG0IWCYY ; 
      20 FG0IWCMM FG0IWCMM ; 
    15 FG0IWCDD FG0IWCDD ; 
  10 FG0IW-CCYYMMDD FG0IW-CCYYMMDD ; 
    15 * num(1) ; 
    15 FG0IW-CCYYMM FG0IW-CCYYMM ; 
      20 FG0IW-CCYY FG0IW-CCYY ; 
      20 FG0IW-MM FG0IW-MM ; 
    15 * num(2) ; 
  10 FG0IWBUY FG0IWBUY ; 
    15 FG0IWBDT FG0IWBDT ; 
      20 FG0IWBWC FG0IWBWC ; 
      20 FG0IWBWY FG0IWBWY ; 
      20 FG0IWBWM FG0IWBWM ; 
    15 FG0IWBWD FG0IWBWD ; 
  10 FG0IWWDT FG0IWWDT ; 
    15 * num(3) ; 
    15 FG0IWWCD FG0IWWCD ; 
      20 FG0IWWCC FG0IWWCC ; 
      20 FG0IWWYM FG0IWWYM ; 
        25 FG0IWWYY FG0IWWYY ; 
        25 FG0IWWMM FG0IWWMM ; 
  10 FG0IWWBD FG0IWWBD ; 
    15 * num(3) ; 
    15 FG0IWBCC FG0IWBCC ; 
    15 FG0IWBYM FG0IWBYM ; 
      20 FG0IWBYY FG0IWBYY ; 
      20 FG0IWBMM FG0IWBMM ; 
  10 FG0IWWED FG0IWWED ; 
    15 * num(3) ; 
    15 FG0IWECC FG0IWECC ; 
    15 FG0IWEYM FG0IWEYM ; 
      20 FG0IWEYY FG0IWEYY ; 
      20 FG0IWEMM FG0IWEMM ; 
  10 FG0IWEND FG0IWEND ; 
  10 FG0IW-CURR-MO FG0IW-CURR-MO ; 
  10 FG0IW-CURR-MO-MINUS1 FG0IW-CURR-MO-MINUS1 ; 
  10 FG0IW-CURR-MO-MINUS2 FG0IW-CURR-MO-MINUS2 ; 
  10 FG0IW-CURR-MO-MINUS3 FG0IW-CURR-MO-MINUS3 ; 
  10 FG0IW-CURR-MO-MINUS4 FG0IW-CURR-MO-MINUS4 ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 FG0IWPAG FG0IWPAG ; 
  10 FG0IWFPG FG0IWFPG ; 
  10 FG0IWHS1 FG0IWHS1 ; 
  10 FG0IWHS2 FG0IWHS2 ; 
  10 FG0IWHS3 FG0IWHS3 ; 
  10 FG0IWHD1 FG0IWHD1 ; 
  10 FG0IWHD2 FG0IWHD2 ; 
  10 FG0IWHD3 FG0IWHD3 ; 
  10 FG0IWSTP FG0IWSTP ; 
  10 FG0IWSNB FG0IWSNB ; 
  10 FG0IWSAV FG0IWSAV ; 
  10 FG0IWSN1 FG0IWSN1 ; 
  10 FG0IWSN2 FG0IWSN2 ; 
  10 FG0IWSN3 FG0IWSN3 ; 
  10 FG0IWDN1 FG0IWDN1 ; 
  10 FG0IWDN2 FG0IWDN2 ; 
  10 FG0IWDN3 FG0IWDN3 ; 
  10 FG0IWPRC FG0IWPRC ; 
  10 FG0IWPS1 FG0IWPS1 ; 
  10 FG0IWPS2 FG0IWPS2 ; 
  10 FG0IWPS3 FG0IWPS3 ; 
  10 FG0IWPD1 FG0IWPD1 ; 
  10 FG0IWPD2 FG0IWPD2 ; 
  10 FG0IWPD3 FG0IWPD3 ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FG0IW-HOLD-BEG-MO FG0IW-HOLD-BEG-MO ; 
  10 FG0IW-HOLD-END-MO FG0IW-HOLD-END-MO ; 
  10 FFQLCOFP FFQLCOFP ; 
  10 FFQLCOPP FFQLCOPP ; 
  10 FFQOCOFP FFQOCOFP ; 
  10 FFQOCOPP FFQOCOPP ; 
end // end FG0IW00

//*** RECORD=FG0IW01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// ***********************
Record FG0IW01 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 FG0IWSCT FG0IWSCT ; 
  10 FG0IWUCT FG0IWUCT ; 
  10 FG0IWCTG FG0IWCTG ; 
  10 FG0IWYOP FG0IWYOP ; 
  10 FG0IWHOP FG0IWHOP ; 
  10 FFCDMIND FFCDMIND ; 
  10 FG0IWUVQ FG0IWUVQ ; 
  10 FG0IWVQT FG0IWVQT ; 
  10 FG0IWVPT FG0IWVPT ; 
  10 FG0IWCDT FG0IWCDT ; 
    15 FG0IWMON FG0IWMON ; 
    15 FG0IWDAY FG0IWDAY ; 
    15 FG0IWYER FG0IWYER ; 
  10 FG0IWPBD FG0IWPBD [3] ; 
    15 * char(5) ; 
    15 FG0IWPBR FG0IWPBR ; 
  10 FG0IWPED FG0IWPED [3] ; 
    15 * char(5) ; 
    15 FG0IWPER FG0IWPER ; 
end // end FG0IW01

//*** RECORD=FG0IW02 ****
// -------------------------
// map 001 temporary storage
// -------------------------
// ***********************
Record FG0IW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(3222) ; 
    10 FG0IWNLD FG0IWNLD ; 
    10 FG0IWTIX FG0IWTIX ; 
    10 FG0IWS1X FG0IWS1X ; 
    10 FG0IWS2X FG0IWS2X ; 
    10 FG0IWS3X FG0IWS3X ; 
    10 FG0IWD1X FG0IWD1X ; 
    10 FG0IWD2X FG0IWD2X ; 
    10 FG0IWD3X FG0IWD3X ; 
    10 FG0IWSCL FG0IWSCL [12] ; 
    10 FG0IWSNB FG0IWSNB [12] ; 
    10 FG0IWSNM FG0IWSNM [12] ; 
    10 FG0IWPRC FG0IWPRC [12] ; 
    10 FG0IWDEV FG0IWDEV [12] ; 
    10 FG0IWUMQ FG0IWUMQ [12] ; 
    10 FG0IWMQT FG0IWMQT [12] ; 
    10 FG0IWSQT FG0IWSQT [12] ; 
    10 FG0IWUQT FG0IWUQT [12] ; 
    10 FG0IWFQT FG0IWFQT [12] ; 
    10 FG0IWSPC FG0IWSPC [12] ; 
    10 FG0IWSPT FG0IWSPT [12] ; 
    10 FG0IWSN1 FG0IWSN1 [12] ; 
    10 FG0IWSM1 FG0IWSM1 [12] ; 
    10 FG0IWUH1 FG0IWUH1 [12] ; 
    10 FG0IWHQ1 FG0IWHQ1 [12] ; 
    10 FG0IWHP1 FG0IWHP1 [12] ; 
    10 FG0IWSP1 FG0IWSP1 [12] ; 
    10 FG0IWSN2 FG0IWSN2 [12] ; 
    10 FG0IWSM2 FG0IWSM2 [12] ; 
    10 FG0IWUH2 FG0IWUH2 [12] ; 
    10 FG0IWHQ2 FG0IWHQ2 [12] ; 
    10 FG0IWHP2 FG0IWHP2 [12] ; 
    10 FG0IWSP2 FG0IWSP2 [12] ; 
    10 FG0IWSN3 FG0IWSN3 [12] ; 
    10 FG0IWSM3 FG0IWSM3 [12] ; 
    10 FG0IWUH3 FG0IWUH3 [12] ; 
    10 FG0IWHQ3 FG0IWHQ3 [12] ; 
    10 FG0IWHP3 FG0IWHP3 [12] ; 
    10 FG0IWSP3 FG0IWSP3 [12] ; 
    10 FG0IWDN1 FG0IWDN1 [12] ; 
    10 FG0IWDM1 FG0IWDM1 [12] ; 
    10 FG0IWUD1 FG0IWUD1 [12] ; 
    10 FG0IWDQ1 FG0IWDQ1 [12] ; 
    10 FG0IWDP1 FG0IWDP1 [12] ; 
    10 FG0IWPR1 FG0IWPR1 [12] ; 
    10 FG0IWDN2 FG0IWDN2 [12] ; 
    10 FG0IWDM2 FG0IWDM2 [12] ; 
    10 FG0IWUD2 FG0IWUD2 [12] ; 
    10 FG0IWDQ2 FG0IWDQ2 [12] ; 
    10 FG0IWDP2 FG0IWDP2 [12] ; 
    10 FG0IWPR2 FG0IWPR2 [12] ; 
    10 FG0IWDN3 FG0IWDN3 [12] ; 
    10 FG0IWDM3 FG0IWDM3 [12] ; 
    10 FG0IWUD3 FG0IWUD3 [12] ; 
    10 FG0IWDQ3 FG0IWDQ3 [12] ; 
    10 FG0IWDP3 FG0IWDP3 [12] ; 
    10 FG0IWPR3 FG0IWPR3 [12] ; 
    10 ZZZCHGCT ZZZCHGCT [12] ; 
end // end FG0IW02

//*** RECORD=FG0IW03 ****
// ------------------------------
// map 001 totals display storage
// ------------------------------
// ***********************
Record FG0IW03 type basicRecord
  5 FG0IWGP3 FG0IWGP3 ; 
    10 FG0IWUMQ FG0IWUMQ ; 
    10 FG0IWMQT FG0IWMQT ; 
    10 FG0IWUQT FG0IWUQT ; 
    10 FG0IWFQT FG0IWFQT ; 
    10 FG0IWSPT FG0IWSPT ; 
    10 FG0IWUHS FG0IWUHS [3] ; 
    10 FG0IWHSQ FG0IWHSQ [3] ; 
    10 FG0IWHSP FG0IWHSP [3] ; 
    10 FG0IWUHD FG0IWUHD [3] ; 
    10 FG0IWHDQ FG0IWHDQ [3] ; 
    10 FG0IWHDP FG0IWHDP [3] ; 
end // end FG0IW03

//*** RECORD=FG0IW04 ****
// -----------------------------
// map 002 display storage area
// -----------------------------
// ***********************
Record FG0IW04 type basicRecord
  5 FG0IWGP5 FG0IWGP5 ; 
    10 FG0IWSWF FG0IWSWF ; 
    10 FG0IWSWR FG0IWSWR ; 
    10 FG0IWYO1 FG0IWYO1 ; 
    10 FG0IWHO1 FG0IWHO1 ; 
end // end FG0IW04

DataItem FG0IW-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0IW-CCYYMM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work dt
DataItem FG0IW-CCYYMMDD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date
DataItem FG0IW-CURR-MO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date -1 month
DataItem FG0IW-CURR-MO-MINUS1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date -2 months
DataItem FG0IW-CURR-MO-MINUS2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date -3 months
DataItem FG0IW-CURR-MO-MINUS3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date -4 months
DataItem FG0IW-CURR-MO-MINUS4 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work begin date
DataItem FG0IW-HOLD-BEG-MO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work end date
DataItem FG0IW-HOLD-END-MO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

DataItem FG0IW-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First time thru flag
DataItem FG0IW1ST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// begin century
DataItem FG0IWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy work ccyymm
DataItem FG0IWBDT num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range month
DataItem FG0IWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy work date
DataItem FG0IWBUY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy work cc
DataItem FG0IWBWC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy work dd
DataItem FG0IWBWD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy work mm
DataItem FG0IWBWM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy work yy
DataItem FG0IWBWY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year and month
DataItem FG0IWBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range year
DataItem FG0IWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work cc
DataItem FG0IWCCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work dd
DataItem FG0IWCDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work sheet create date
DataItem FG0IWCDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style/color flag
DataItem FG0IWCFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cat target thousands
DataItem FG0IWCTG char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current work date
DataItem FG0IWCWD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work ccyymm
DataItem FG0IWCYM num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0IWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end
// current work yy
DataItem FG0IWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist demand data last record
DataItem FG0IWD1L char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tot line for dmd idx-1 yr ago
DataItem FG0IWD1X num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist demand data last record
DataItem FG0IWD2L char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tot line for dmd idx-2 yrs ago
DataItem FG0IWD2X num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist demand data last record
DataItem FG0IWD3L char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tot line for dmd idx-3 yrs ago
DataItem FG0IWD3X num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// create day
DataItem FG0IWDAY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// data change flag
DataItem FG0IWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style development flag
DataItem FG0IWDEV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history style group name
DataItem FG0IWDM1 char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history style group name
DataItem FG0IWDM2 char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history style group name
DataItem FG0IWDM3 char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data modified flag
DataItem FG0IWDMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history style group nbr
DataItem FG0IWDN1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history style group nbr
DataItem FG0IWDN2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history style group nbr
DataItem FG0IWDN3 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem FG0IWDP1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end
// history demand percent yr2
DataItem FG0IWDP2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history demand percent yr3
DataItem FG0IWDP3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history demand thousand yr1
DataItem FG0IWDQ1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history demand thousand yr2
DataItem FG0IWDQ2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history demand thousand yr3
DataItem FG0IWDQ3 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end century
DataItem FG0IWECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range month
DataItem FG0IWEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work end mo
DataItem FG0IWEND num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// end of file flag for VFFSTY01
DataItem FG0IWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag
DataItem FG0IWERF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// A style group expl flag
DataItem FG0IWEXP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end year and month
DataItem FG0IWEYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range year
DataItem FG0IWEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// forecast exist flag
DataItem FG0IWFCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fcst data last record
DataItem FG0IWFCL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// forecast data total page
DataItem FG0IWFPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty 1000
DataItem FG0IWFQT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fg0iw03 group level
DataItem FG0IWGP3 char(100)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fg0iw05 group level
DataItem FG0IWGP5 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// valid style group flag
DataItem FG0IWGRP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1 yr ago hist dmd total page
DataItem FG0IWHD1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 2 yr ago hist dmd total page
DataItem FG0IWHD2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 3 yr ago hist dmd total page
DataItem FG0IWHD3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical demand percent
DataItem FG0IWHDP bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical demand qty thousand
DataItem FG0IWHDQ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// historical description
DataItem FG0IWHDS char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history demand thousands
DataItem FG0IWHDT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history option sales/demand
DataItem FG0IWHO1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history option sales/demand
DataItem FG0IWHOP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history sales percent yr1
DataItem FG0IWHP1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales percent yr2
DataItem FG0IWHP2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales percent yr3
DataItem FG0IWHP3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales qty thousand yr1
DataItem FG0IWHQ1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history sales qty thousand yr2
DataItem FG0IWHQ2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history sales qty thousand yr3
DataItem FG0IWHQ3 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1 yr ago hist sls total page
DataItem FG0IWHS1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 2 yr ago hist sls total page
DataItem FG0IWHS2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 3 yr ago hist sls total page
DataItem FG0IWHS3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical sales percent
DataItem FG0IWHSP bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical sales qty thousand
DataItem FG0IWHSQ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history sales thousands
DataItem FG0IWHST char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index
DataItem FG0IWIDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage update switch
DataItem FG0IWMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// create month
DataItem FG0IWMON num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// master qty 1000
DataItem FG0IWMQT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric decimal field
DataItem FG0IWNDP bin(9,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of lines per page
DataItem FG0IWNLD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 1
DataItem FG0IWNM1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 2
DataItem FG0IWNM2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 3
DataItem FG0IWNM3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// page work area
DataItem FG0IWPAG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prior begin date
DataItem FG0IWPBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// prior begin yymm
DataItem FG0IWPBR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// percent work field 1
DataItem FG0IWPC1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// price of previous stygrp
DataItem FG0IWPD1 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// price of previous stygrp
DataItem FG0IWPD2 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// price of previous stygrp
DataItem FG0IWPD3 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prior end date
DataItem FG0IWPED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// prior end yymm
DataItem FG0IWPER char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// process index
DataItem FG0IWPIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// price of stygrp for yr1
DataItem FG0IWPR1 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// price of stygrp for yr2
DataItem FG0IWPR2 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// price of stygrp for yr3
DataItem FG0IWPR3 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// price of previous stygrp
DataItem FG0IWPRC decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// price of previous stygrp
DataItem FG0IWPS1 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// price of previous stygrp
DataItem FG0IWPS2 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// price of previous stygrp
DataItem FG0IWPS3 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// qty flag
DataItem FG0IWQTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hist sales data last record
DataItem FG0IWS1L char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tot line for sls idx-1 yr ago
DataItem FG0IWS1X num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist sales data last record
DataItem FG0IWS2L char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tot line for sls idx-2 yrs ago
DataItem FG0IWS2X num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hist sales data last record
DataItem FG0IWS3L char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tot line for sls idx-3 yrs ago
DataItem FG0IWS3X num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save style group nbr
DataItem FG0IWSAV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style color flag
DataItem FG0IWSCL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save cat target units
DataItem FG0IWSCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style group wrk sht flag
DataItem FG0IWSGF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save hist demand qty units
DataItem FG0IWSHD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save history sales units
DataItem FG0IWSHS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 's'election count field
DataItem FG0IWSLC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 's'election flag
DataItem FG0IWSLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history style group name
DataItem FG0IWSM1 char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history style group name
DataItem FG0IWSM2 char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history style group name
DataItem FG0IWSM3 char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history style group nbr
DataItem FG0IWSN1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history style group nbr
DataItem FG0IWSN2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history style group nbr
DataItem FG0IWSN3 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style group nbr
DataItem FG0IWSNB char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style group name
DataItem FG0IWSNM char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// price of stygrp for yr1
DataItem FG0IWSP1 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// price of stygrp for yr2
DataItem FG0IWSP2 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// price of stygrp for yr3
DataItem FG0IWSP3 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save style percent field
DataItem FG0IWSPC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style percent flag
DataItem FG0IWSPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style percent field
DataItem FG0IWSPT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save fcst qty
DataItem FG0IWSQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save char target qty
DataItem FG0IWSTG char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save current temp storage page
DataItem FG0IWSTP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// save unit target qty
DataItem FG0IWSUT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display map switch
DataItem FG0IWSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FG0IWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FG0IWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total line index
DataItem FG0IWTIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cat target units
DataItem FG0IWUCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history demand units yr1
DataItem FG0IWUD1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history demand units yr2
DataItem FG0IWUD2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history demand units yr3
DataItem FG0IWUD3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales qty units yr1
DataItem FG0IWUH1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales qty units yr2
DataItem FG0IWUH2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales qty units yr3
DataItem FG0IWUH3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hist demand qty total units
DataItem FG0IWUHD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales units
DataItem FG0IWUHS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// master qty units
DataItem FG0IWUMQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units
DataItem FG0IWUQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// variance qty units
DataItem FG0IWUVQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// variance percent
DataItem FG0IWVPT bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// variance qty thousands
DataItem FG0IWVQT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work begin date
DataItem FG0IWWBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work century
DataItem FG0IWWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work ccyymm
DataItem FG0IWWCD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date
DataItem FG0IWWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work begin date
DataItem FG0IWWED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work month
DataItem FG0IWWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year and month
DataItem FG0IWWYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FG0IWWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year(s)  option description
DataItem FG0IWYDS char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// create year
DataItem FG0IWYER num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year index
DataItem FG0IWYIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year option
DataItem FG0IWYO1 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year option
DataItem FG0IWYOP num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

