package fg0s;

import corpcom2.XPCREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFF001;
import corpcom3.XPTA0P;
import corpcom3.XPXCT01;
import corpcom3.XPXPC01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS01;
import corpcom4.XSFFS10;
import corpcom4.XSFFS11;
import corpcom4.XSFFS30;
import corpcom4.XSFFS59;
import corpcom4.XSNOWAY;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XCTTBL;
import corpx1.XDMCD;
import corpx1.XPCTBL;
import corpx2.XPCCD;
import corpy2.YPGCD;
import corpy2.YPGTBL;
import ff.common.*;
import sy.common.SY1STNBR;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import sy.common.SYBSTGNB;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TA6REC;
import ta.common.TAEREC;
import ta.common.TARJCL;
//*** PROGRAM=FG0S ****
// This program provides the user with the ability to view and
// change the monthly style color forecast quantities.
// 
// The domestic user can come to this screen from three
// different places:
//   - LONG RANGE FORECAST BY CATEGORY SCREEN (PF17: EXP-COLR)
//   - LONG RANGE FORECAST BY STYLE GROUP SCREEN(PF17: EXP-COL)
//   - LONG RANGE FORECAST BY STYLE COLOR SCREEN (PF16: EXPL)
// 
// The existing monthly forecasts which were spreaded out from
// the style color forecast by range will be brought up.
// The user can change the quantities by typing over them,
// whenever the 'ENTER' is pressed, the worksheets will be
// updated.
// 
// The NIL users can come into this application from two places
//   - LONG RANGE MAIN MENU SCREEN
//   - LONG RANGE WORKSHEET SELECT SCREEN
// 
// The enterable fields on the top of the screen and grand
// total field can only be changed by NIL users. Only the
// forecasts will be displayed for NIL. No worksheet except
// the header will be involved for processing NIL fore-
// cast. Whenever the master forecast is made by the NIL user,
// the long range worksheet header record (DFCAST.VWDGRP01) and
// month master record should be updated.
// 
// The user can specify the number of month in the season and
// he has the flexibility to view 3 months,4 months or 6 months
// seasons with varying subtotals. The user may use appropriate
// attention key to scroll left and right.
// 
// The life cycle on th top of the screen will show the earl-
// iest projected introduction date and latest projected close-
// out date. The program will check the projected intro. date
// and projected closeout date for each product. The forecast
// quantities of those months before the intro. date and after
// the closeout date (exclude the intro. month and include the
// closeout month) will be zeroed out and become non-enterable.
// 
// If the user is satisfied with the forecast quantities on the
// screen, he can make these sales forecasts as master by
// pressing PF15. The system will then update the master sales
// forecast by style color, by style group, by category and by
// type group. For NIL, No master sales forecast by type group
// will be updated. The category update flags in month master
// by category table will be turned on as well, which means all
// products under this category have forecasted and the fore-
// casts at syle group, category and type group levels have all
// been updated with the summarized forecasts.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          11/17/89  JJUCH   New application.
// E#5      05/29/90  JJUCH   Display the month heading if
//                            only forecast one month.
// 
// TA07/19  07/20/90  JJUCH   Fixed the bug when only have a
//                            page of data and the total line
//                            is on the top of next page.
// FF1016   07/31/90  JJUCH   Disallowed to fcst current main
//                            buy month and all prior months.
// FF1006   08/03/90  JJUCH   Added a message to remind users
//                            to save fcsts as master before
//                            they leave this application.
// FF#134   08/28/90  SFORD   Set job completed msg flag = 'n'
// FF1056   09/04/90  JJUCH   Replaced date edit routine
//                            xsffs35 with xsffs30 to allow NIL
//                            to change sales fcst after
//                            cirrent month.
// Fix      09/07/90  JJUCH   Fixed +100 error when update
//                            dfcast.vmcat001 table.
// Fix      10/30/90  JJUCH   Fixed the problem of only display
//                            -ing one style group when specif-
//                            ied category.
// Fix      11/21/90  JJUCH   Fixed the edit for NIL on style
//                            group and category fields.
// Fix      11/21/90  JJUCH   Allowed Nil country 0000 to enter
//                            negative value.
// Fix      03/12/91  JJUCH   Fixed sqlcode -803 when create
//                            a new header for NIL.
// Fix      03/19/91  JJUCH   Fixed the problem of not saving
//                            NIL master fcst.
// Fix      03/25/91  JJUCH   Initialize qty field in tsq page
//                            with space instead of '    0'.
// Fix      04/06/92  JJUCH   Fixed the problem caused by hav-
//                            ing multiple style dev under one
//                            style group.
// F1111    06/23/92  JJUCH   Changes for varying seasons.
// FF347    09/04/92  JJUCH   Fixed the problem of updating
//                            the fcsts when the season cross
//                            2 pages and no scrolling being
//                            done and causing vwsty001 fcst
//                            qty being updated incorrectly.
// FF382    03/18/93 JJUCH    Update user id on VWDGRP01 when
//                            the worksheet is updated.
//          09/09/93 JJUCH    Convert to CSP V4.1 version.
//          09/06/94 JJUCH    Fixed the bug of not protecting
//                            the months after clsout month.
// FF175    12/10/96 DSMITH   Changed the date range fill
//                            character to '0'.
// *********************
Program FG0S type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF3REC FF3REC; // record
  FF7REC FF7REC; // record
  FF9REC FF9REC; // record
  FFCREC FFCREC; // record
  FFEREC FFEREC; // record
  FFFREC FFFREC; // record
  FFGREC FFGREC; // record
  FFIREC FFIREC; // record
  FFJREC FFJREC; // record
  FFKREC FFKREC; // record
  FFLREC FFLREC; // record
  FFMREC FFMREC; // record
  FFNREC FFNREC; // record
  FFOREC FFOREC; // record
  FFSREC FFSREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  FG0SW00 FG0SW00; // record
  FG0SW01 FG0SW01; // record
  FG0SW02 FG0SW02; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YPGTBL; // table
  use XPCTBL; // table
  use XCTTBL; // table
  use FG0ST; // table
  use FG0ST5O {deleteAfterUse = yes}; // table
  use FG0SM.FG0SM001, // form
  		FG0SM.XX0XM001,
  		FG0SM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FG0SM001 initial; /* M001 input/output*/
    set FG0SW00 empty; /* Working storage*/
    set FG0SW01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set TA6REC empty; /* Submit batch job parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    FG0SW00.FG0SWSWF = "N"; /* Format the map switch*/
    FG0SW00.FG0SWSWO = "N"; /* Data obtained switch*/
    FG0SW00.FG0SWSWR = "N"; /* Request for data switch*/
    ;
    XPCREC.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    ;
     /* ---------------------------------------------------*/
     /* Clear unused fields*/
     /* ---------------------------------------------------*/
    ;
    FFWREC.SY1STNBR = " "; /* Clear style number*/
    FFWREC.SY2CLRID = " "; /* Clear color id*/
    FFWREC.XDMCD = " "; /* Clear dimension code*/
    FFWREC.SY1SSTNM = " "; /* Clear short style name*/
    FFWREC.SY2CLRAB = " "; /* Clear color abrv*/
    FFWREC.XDMABRV = " "; /* Clear dimension abrv*/
    FFWREC.ZRGCD = " "; /* Clear region code*/
    FFWREC.ZRGABRV = " "; /* Clear region abrv*/
    ;
    if (FFWREC.YPGCD == " ") /* No type group passed*/
      ;
      FFWREC.YPGCD = "01"; /* Default type group code*/
      FFWREC.YPGABRV = "INLINE"; /* Default type group abbreviation*/
      ;
    end
    ;
    if (FFWREC.YSMXDV == "10") /* Domestic*/
      FFWREC.XCTCD = "USA "; /* Default country code*/
      FFWREC.XCTABRV = "USA "; /* Default country abbreviation*/
    end
    ;
    if (FFWREC.FFABEGMO != 0 /* Beginning month passed*/
     && FFWREC.FFAENDMO != 0 /* Ending month passed*/
     && FFWREC.YPGCD != " "  /* Type group code passed*/
     && FFWREC.XPCCD != " "  /* Category code passed*/
     && FFWREC.XCTCD != " "  /* Country code passed*/
     && FFWREC.YSMXDV != " ") /* Division group passed*/
      ;
      FG0SW00.FG0SWSWR = "Y"; /* Request for data switch*/
      ;
    end
    ;
    FG0SW01.FG0SWBMO = FFWREC.FFABEGMO; /* Beginning month*/
    FG0SW01.FG0SWEMO = FFWREC.FFAENDMO; /* Ending month*/
    ;
    FG0SW00.FG0SW-NEXT = "N"; /* next season flag*/
    move "N" to FG0SW00.FG0SW-MON-LEFT[1] for all; /* months left flag*/
    FG0SW00.FG0SWLEF = 1; /* Scrolling left index*/
    FG0SW00.FG0SWSNX = 1; /* season index*/
    FG0SW00.FG0SWPGX = 1; /* page index*/
    FG0SW00.FG0SW-PAGS[1] = 1; /* starting season*/
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0S000; /* Converse the main process*/
    ;
    FG0S000: FG0S000();
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0S001; /* Converse the main process*/
    ;
    ;
    FG0S001: FG0S001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0S001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FG0S

// Format production JCL
Function FG0S-633()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  ;
  TA6REC.TA6INDEX = 1; /* Initialize index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FG0ST.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the worksheet numbers in the parameters statement.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG0SW02.TARJCL; /* Parameters*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG0ST.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FG0ST.TARTYPE[TA6INDEX]; /* Type*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0ST.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Submit JCL only*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Background Job Subroutine*/
  ;
   /* ------------------------------------------------------------*/
   /* If any error, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD >= "2")        /* or unexpected return code*/
    ;
    FFWREC.XXXMODID = "633"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
end // end FG0S-633

// Format test JCL
Function FG0S-634()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/
  ;
  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  ;
  TA6REC.TA6INDEX = 1; /* Initialize index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    if (FG0ST5O.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format the worksheet numbers in the parameters statement.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG0SW02.TARJCL; /* Parameters*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/
      ;
      TA6REC.TARJCL[TA6INDEX] = FG0ST5O.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = FG0ST5O.TARTYPE[TA6INDEX]; /* Type*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0ST5O.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Submit JCL only*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Background Job Subroutine*/
  ;
   /* ------------------------------------------------------------*/
   /* If any error, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD >= "2")        /* or unexpected return code*/
    ;
    FFWREC.XXXMODID = "634"; /* Module identification*/
    converseLib.validationFailed(1); /* System error occurred*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
end // end FG0S-634

// Check the FROM application
Function FG0S000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAFROMAP == "FG0B" /* From allowed application*/
   || COMMAREA.CAFROMAP == "FG0H" 
   || COMMAREA.CAFROMAP == "FG0I" 
   || COMMAREA.CAFROMAP == "FG0J" 
   || COMMAREA.CAFROMAP == "FG0S") /* or same application*/
    ;
    FG0SS35(); /* process the date range*/
    ;
  else
    ;
    ;
    /* ------------------------------------------------------------*/
     /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/
    ;
    XSNOWAY(); /* Invalid transfer was attempted*/
    ;
  end
  ;
  ;
end // end FG0S000

// List the rows in the table
Function FG0S001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FG0S100(); /* Obtain the data to display*/
  ;
  FG0S200(); /* Format and display the map*/
  ;
  FG0S300(); /* Check attention identifier*/
  ;
  FG0S400(); /* Reset fields to normal intensity*/
  ;
  FG0S500(); /* Verify the entered data*/
  ;
  FG0S600(); /* Process valid input request*/
  ;
  ;
end // end FG0S001

// Obtain the data to display
Function FG0S100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0SW00.FG0SWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  if (FG0SW00.FG0SWSEM[1] == 0) /* no season end month*/
    FG0SS40(); /* obtain default season end month*/
  end
  if (FG0SW00.FG0SWSEM[1] == 0) /* no default season end month*/
    if (FFZREC.FFZNUMMO <= 6)
      FG0SW00.FG0SWNSS = 1; /* no. of season*/
      FG0SW00.FG0SWSMO[1] = FG0SW00.FG0SWWED; /* seas end mo-ccyymm*/
      FG0SW00.FG0SWSEM[1] = FG0SW00.FG0SWEMM; /* seas end mo-mm*/
      FG0SW00.FG0SWSIN[1] = FFZREC.FFZNUMMO; /* no of mo in seas*/
    else
      return;
    end
  end
  ;
  FG0S101(); /* Build up temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0SW00.TA5TSQIX == 0) /* No pages formatted*/
    ;
    FFWREC.XXXMODID = "100"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/
    ;
    return; /* Exit to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO == 0) /* No message to display*/
    FG0SW00.XXXTSPAG = 1; /* Desired page number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  FG0SW00.FG0SWPGX = 1; /* page index*/
  FG0SW00.FG0SW-PAGS[1] = 1; /* processing season of page 1*/
  FG0SW00.FG0SWSWR = "N"; /* Request for data switch*/
  FG0SW00.FG0SWSWF = "Y"; /* Format data switch*/
  FG0SW00.FG0SWSWO = "Y"; /* data obtained switch*/
  ;
  ;
end // end FG0S100

// Build up temporary storage
Function FG0S101()
   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/
  ;
  FG0SW00.XXXTSLEN = 3350; /* Temporary storage page length*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  ;
  FG0S110(); /* Purge any temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Save the search key informations in the map*/
   /* ------------------------------------------------------------*/
  ;
  FG0SW01.FG0SWBMO = FFWREC.FFABEGMO; /* Beginning date*/
  FG0SW01.FG0SWEMO = FFWREC.FFAENDMO; /* Ending date*/
  ;
  FG0SW00.FG0SWIXW = FG0SW00.FG0SWNSS;
  while (FG0SW00.FG0SWIXW > 0) /* nbr of seasons*/
    FG0SS50(); /* calculate no of mos in each sesn*/
    FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW - 1;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Load the month heading*/
   /* ------------------------------------------------------------*/
  ;
  FG0S115();
  ;
   /* ------------------------------------------------------------*/
   /* If division group is '10' (DOM), then obtain the style*/
   /* group target from DFCAST.VWSGRP01 table and obtain the*/
   /* demand indicator from DFCAST.VRCAT001 table.*/
   /* ------------------------------------------------------------*/
  ;
  FG0S120(); /* Obtain stye group target*/
  ;
  FG0S130(); /* Obtain the dmd indicator*/
  ;
   /* ------------------------------------------------------------*/
   /* If style group was specified, obtain a list of style colors*/
   /* for that style group, otherwise, obtain a list of style*/
   /* groups and style colors for the specified category.*/
   /* Then, use each style color to retrieve the existing monthly*/
   /* style color forecasts from DFCAST.VWSMTH01 (for DOM) or*/
   /* from DFCAST.VMSTY001 (for NIL)*/
   /* ------------------------------------------------------------*/
  ;
  FG0SW00.FG0SWCR1 = "N"; /* Initialize end of cursor switch*/
  FG0SW00.FG0SWIXM = 1; /* Initialize the map index*/
  FG0SW00.SYBSTGNB = " "; /* Initialize the style group*/
  FG0SW00.FG0SWEXT = "Y"; /* Initialize the worksheet exist flag*/
  ;
  if (FFWREC.SYBSTGNB != " ") /* Style group was specified*/
    ;
    /* ----------------------------------------------------------*/
     /* Process the specified style group.*/
    /* ----------------------------------------------------------*/
    ;
    FG0S140(); /* Select and open VFFSTY01 with style group*/
    FG0SW00.FG0SWACT = "N"; /* Reset the product active flag*/
    FG0S141(); /* Fetch next row in VFFSTY01*/
    ;
    while (FG0SW00.FG0SWCR1 == "N") /* Until end of cursor*/
      ;
      FG0SS07(); /* Process active product*/
      ;
      FG0SW00.FG0SWACT = "N"; /* Reset the product active flag*/
      FG0S141(); /* Fetch next row in VFFSTY01*/
      ;
    end
    ;
    FG0S142(); /* Close VFFSTY01*/
    ;
  else
    ;
    /* ----------------------------------------------------------*/
     /* Process all style groups within the specified category.*/
    /* ----------------------------------------------------------*/
    ;
    FG0S150(); /* Select VFFSTY01 with category*/
    ;
    FG0SW00.FG0SWCR2 = "N"; /* Initialize end of cursor switch*/
    ;
    FG0S151(); /* Fetch next row in VFFSTY01*/
    ;
    while (FG0SW00.FG0SWCR2 == "N") /* Until end of cursor*/
      ;
      FFWREC.SYBSTGNB = FF3REC.SYBSTGNB;
                                   /* Save the current style grp*/
      ;
      FG0S140(); /* Select and open VFFSTY01 with style group*/
      ;
      FG0SW00.FG0SWCR1 = "N";
                                   /* Reset the end of cursor switch*/
      while (FG0SW00.FG0SWCR1 == "N") /* Until end of cursor*/
        ;
        FG0SW00.FG0SWACT = "N"; /* Reset the product active flag*/
        FG0S141(); /* Fetch next row in VFFSTY01*/
        FG0SS07(); /* Process active product*/
        ;
      end
      ;
      FG0SS06(); /* Calc grand total for stygrp*/
      FG0S142(); /* Close VFFSTY01-style group*/
      ;
      FG0S151(); /* Fetch next row in VFFSTY01*/
      ;
    end
    ;
    FFWREC.SYBSTGNB = "      "; /* Clear the style group field*/
    FG0S152(); /* Close VFFSTY01-cat*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0SW00.FG0SWIXM > 1) /* Page was formatted*/
    ;
    if (FG0SW00.FG0SWEXT == "Y") /* Last worksheet exist*/
      ;
      FG0S180(); /* Calculate the grand totals*/
      ;
    else
      ;
      FG0SW00.FG0SWIXM = FG0SW00.FG0SWIXM - 1; /* Back 1 row*/
      ;
      if (FG0SW01.FG0SWGFL[FG0SWIXM] == "Y") /* Reach style grp*/
        ;
        FG0SW01.FG0SWSTY[FG0SWIXM] = " "; /* Clear the style fld*/
        FG0SW01.FG0SWDES[FG0SWIXM] = " "; /* Clear the desc fld*/
        FG0SW01.FG0SWGFL[FG0SWIXM] = " "; /* Clear the grp flag*/
        ;
        FG0SW00.FG0SWIXM = FG0SW00.FG0SWIXM - 1; /* Skip the stygrp line*/
        ;
      else
        ;
        FG0SW00.FG0SWIXM = FG0SW00.FG0SWIXM + 1;
        ;
        FG0S180(); /* Calculate the grand totals*/
        ;
      end
      ;
    end
    ;
    FG0S190(); /* Add page to temporary storage*/
    ;
  else
    ;
    if (FG0SW00.FG0SWIXM == 1) /* Page was formatted*/
      ;
      /* ---------------------------------------------------*/
       /* Move the month totals from previous page to tsq*/
      /* ---------------------------------------------------*/
      ;
      FG0SW00.FG0SWIXT = FG0SW00.FG0SWLEF;
      FG0SW00.FG0SWIXE = FG0SW00.FG0SWIXT + FG0SW00.FG0SWEND - 1;
      FG0SW01.FG0SWDES[1] = "   TOTAL"; /* Total line desc.*/
      FG0SW01.FG0SWGFL[1] = "N"; /* Style group flag*/
      ;
      while (FG0SW00.FG0SWIXT <= FG0SW00.FG0SWIXE)
        ;
        FG0SW01.FG0SWFCS[FG0SWIXT] = FG0SW00.FG0SWMTL[FG0SWIXT];
        FFXREC.FFXNUMB = FG0SW01.FG0SWFCS[FG0SWIXT];
        XSFFS10();
        FG0SW01.FG0SMFCS[FG0SWIXT] = FFXREC.FFXCHAR;
        ;
        FG0SW00.FG0SWMTL[FG0SWIXT] = 0; /* reset month tot chng flag*/
        FG0SW00.FG0SWMTF[FG0SWIXT] = "N"; /* clear month total*/
        ;
        FG0SW00.FG0SWIXT = FG0SW00.FG0SWIXT + 1;
        ;
      end
      ;
      FG0S190(); /* Add page to temporary storage*/
    end
    ;
  end
  ;
end // end FG0S101

// Purge temporary storage
Function FG0S110()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (TA5REC.TA5FNCCD == "P") /* Last function was purge*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FG0SW01 empty; /* M001 display storage*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FG0SW00.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FG0SW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "110"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S110

// Load the month heading
Function FG0S115()
  ;
  FG0SW00.FG0SWEND = 1; /* Initialize end of range index*/
  FG0SW00.FG0SWIXM = 1; /* Initialize the map index*/
  FG0SW00.FG0SWHDG[1] = FG0SW01.FG0SWBMO; /* First month*/
  ;
  ;
  while (FG0SW00.FG0SWIXM <= 12 /* Until reach 12 months*/
   && FG0SW00.FG0SWHDG[FG0SWIXM] < FG0SW01.FG0SWEMO) /* or end of range*/
    ;
    FG0SW00.FG0SWIXM = FG0SW00.FG0SWIXM + 1; /* Increment the heading index*/
    ;
    FG0SW00.FG0SWDAT = FG0SW01.FG0SWBMO + FG0SW00.FG0SWIXM - 1;
    ;
    if (FG0SW00.FG0SWDMM > 12)
      FG0SW00.FG0SWDMM = FG0SW00.FG0SWDMM - 12;
      ;
      FG0SW00.FG0SWDYY = FG0SW00.FG0SWDYY + 1; /* Next year*/
      if (FG0SW00.FG0SWDYY == 0) /* Intro a new century*/
        ;
        FG0SW00.FG0SWDCC = FG0SW00.FG0SWDCC + 1; /* Next century*/
        ;
      end
      ;
    end
    ;
    FG0SW00.FG0SWHDG[FG0SWIXM] = FG0SW00.FG0SWDAT;
    FG0SW00.FG0SWEND = FG0SW00.FG0SWIXM; /* Set end of rang index*/
    ;
  end
  ;
end // end FG0S115

// Obtain target from VWSGRP01
Function FG0S120()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FFLREC empty; /* Clear up the storage row*/
  ;
  FFLREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFLREC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FFLREC.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group code*/
  ;
  try
    call "IO3880" ("S ", SQLCA, FFLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FFXREC.FFXNUMB = FFLREC.FFEFCTGT;
      XSFFS10(); /* Convert from NUM to CHAR*/
      FG0SW01.FG0SWTGT = FFXREC.FFXCHAR; /* Save type group target*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      FG0SW01.FG0SWTGT = " "; /* Save type group target*/
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "120"; /* MODULE IDENTIFICATION*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFLREC.FFLKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S120

// Obtain dmd index from VRCAT001
Function FG0S130()
   /* ------------------------------------------------------------*/
   /* Select the row to obtain the demand indicator.*/
   /* ------------------------------------------------------------*/
  ;
  set FFCREC empty; /* Clear up the storage row*/
  ;
  FFCREC.FFABEGMO = FFWREC.FFABEGMO; /* Beginning month*/
  FFCREC.FFAENDMO = FFWREC.FFAENDMO; /* Ending month*/
  FFCREC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FFCREC.XPCCD = FFWREC.XPCCD; /* Category code*/
  ;
  try
    call "IO3760" ("S ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FG0SW01.FFCDMIND = FFCREC.FFCDMIND; /* Save dmd ind*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      FG0SW01.FFCDMIND = " "; /* Save dmd ind*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "130"; /* MODULE IDENTIFICATION*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S130

// Sel & open VFFSTY01 - STYGRP
Function FG0S140()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF3REC empty; /* Clear row storage area*/
  ;
  FF3REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF3REC.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group code*/
  FF3REC.XLCCD = "10"; /* Life cycle code*/
  ;
  FF3REC.YSMXDV = FFWREC.YSMXDV; /* div group*/
  ;
  try
    call "IO3990" ("S1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful , return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "140"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S140

// Fetch next row in VFFSTY01
Function FG0S141()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3990" ("N1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      if (FF3REC.XLCCD == "10") /* Active product*/
        FG0SW00.FG0SWACT = "Y";
      end
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      FG0SW00.FG0SWCR1 = "Y"; /* End of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "141"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S141

// Close cursor for VFFSTY01-GRP
Function FG0S142()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3990" ("C1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "142"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0S142

// Sel & open VFFSTY01 - CAT
Function FG0S150()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF3REC empty; /* Clear row storage area*/
  ;
  FF3REC.XPCCD = FFWREC.XPCCD; /* Category code*/
  FF3REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF3REC.XLCCD = "10"; /* Life cycle code*/
  FF3REC.YSMXDV = FFWREC.YSMXDV; /* div group*/
  ;
  try
    call "IO3990" ("S2", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful , return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "150"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S150

// Fetch next row in VFFSTY01
Function FG0S151()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3990" ("N2", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FG0SW00.FG0SWACT = "Y"; /* Active product*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      FG0SW00.FG0SWCR2 = "Y"; /* End of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "151"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S151

// Close cursor for VFFSTY01-CAT
Function FG0S152()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3990" ("C2", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "152"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0S152

// Access VWSMTH01 table
Function FG0S160()
  FG0S161(); /* Select & open cursor for VWSMTH01*/
  ;
  FG0SW00.FG0SWCR4 = "N"; /* End of cursor switch*/
  ;
  FG0S162(); /* Fetch the first row*/
  ;
  if (FG0SW00.FG0SWCR4 == "Y") /* No worksheet exist*/
    ;
    FG0SW00.FG0SWEXT = "N"; /* Set 'N' to worksheet existence flag*/
    ;
  else
    ;
    FG0SW00.FG0SWEXT = "Y"; /* Set 'Y' to worksheet existence flag*/
    ;
    while (FG0SW00.FG0SWCR4 == "N") /* Until end of cursor*/
      ;
      FG0S162(); /* Fetch next row in VWSMTH01*/
      ;
    end
    ;
  end
  ;
  FG0S163(); /* Close the cursor for VWSMTH01*/
  ;
  ;
end // end FG0S160

// Sel & open cursor for VWSMTH01
Function FG0S161()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FFOREC empty; /* Clear row storage area*/
  ;
  FFOREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFOREC.SY1STNBR = FG0SW01.FG0SWSTY[FG0SWIXM]; /* Style number*/
  FFOREC.SY2CLRID = FG0SW00.SY2CLRID; /* Color id*/
  FFOREC.XDMCD = FG0SW00.XDMCD; /* Dimension code*/
  ;
  set FFFREC empty; /* Clear row storage area*/
  ;
  FFFREC.FFFBEGMO = FFWREC.FFABEGMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFWREC.FFAENDMO; /* Ending month*/
  FFFREC.FFFFUNCD = "S1"; /* Function code*/
  ;
  try
    call "IO4070" (FFFREC, SQLCA, FFOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "161"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWSMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFOREC.FFOKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S161

// Fetch next row in VWSMTH01
Function FG0S162()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4070" ("N1", SQLCA, FFOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      if (FFOREC.FF4FCTMO in FG0SW00.FG0SWHDG)
        ;
        FG0SWIXF = FG0SWIXM - 1; /* Find the row it is at*/
        FG0SWIXF = FG0SWIXF * 12 + sysVar.arrayIndex; /* find the position it is at*/
        FG0SW01.FG0SWFCS[FG0SWIXF] = FFOREC.FF6SLFCT;
                                   /* Save the fcst*/
        FG0SW01.FG0SWCNT[FG0SWIXF] = FFOREC.ZZZCHGCT; /* Save chng count*/
        ;
        FFXREC.FFXNUMB = FFOREC.FF6SLFCT;
        XSFFS10(); /* Convert the value from NUM to CHAR*/
        FG0SW01.FG0SMFCS[FG0SWIXF] = FFXREC.FFXCHAR;
        ;
      end
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      FG0SW00.FG0SWCR4 = "Y"; /* End of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "162"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWSMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFOREC.FFOKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S162

// Close the cursor for VWSMTH01
Function FG0S163()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "C1"; /* Function code*/
  ;
  try
    call "IO4070" (FFFREC, SQLCA, FFOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "163"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWSMTH01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0S163

// Access VMSTY001 table
Function FG0S170()
  FG0S171(); /* Select & open cursor for VMSTY001*/
  ;
  FG0SW00.FG0SWCR3 = "N"; /* End of cursor switch*/
  ;
  FG0S172(); /* Fetch next row in VMSTY001*/
  ;
  if (FG0SW00.FG0SWCR3 == "Y") /* No master record exist*/
    ;
    FG0SW00.FG0SWEXT = "N"; /* Set 'N' to record existence flag*/
    ;
  else
    ;
    FG0SW00.FG0SWEXT = "Y"; /* Set 'y' to record existence flag*/
    ;
  end
  ;
  while (FG0SW00.FG0SWCR3 == "N") /* Until end of cursor*/
    ;
    FG0S172(); /* Fetch next row in VMSTY001*/
    ;
  end
  ;
  FG0S173(); /* Close the cursor for VMSTY001*/
  ;
  ;
end // end FG0S170

// Sel & open cursor for VMSTY001
Function FG0S171()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set FF9REC empty; /* Clear row storage area*/
  ;
  FF9REC.XCTCD = FFWREC.XCTCD; /* Country code*/
  FF9REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF9REC.SY1STNBR = FG0SW01.FG0SWSTY[FG0SWIXM]; /* Style number*/
  FF9REC.SY2CLRID = FG0SW00.SY2CLRID; /* Color id*/
  FF9REC.XDMCD = FG0SW00.XDMCD; /* Dimension code*/
  ;
  set FFFREC empty; /* Clear row storage area*/
  ;
  FFFREC.FFFBEGMO = FFWREC.FFABEGMO; /* Beginning month*/
  FFFREC.FFFENDMO = FFWREC.FFAENDMO; /* Ending month*/
  FFFREC.FFFFUNCD = "S1"; /* Function code*/
  ;
  try
    call "IO3740" (FFFREC, SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "171"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S171

// Fetch next row in VMSTY001
Function FG0S172()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3740" ("N1", SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      if (FF9REC.FF4FCTMO in FG0SW00.FG0SWHDG)
        ;
        FG0SWIXF = FG0SWIXM - 1; /* Find the row it is at*/
        FG0SWIXF = FG0SWIXF * 12 + sysVar.arrayIndex; /* find the position it is at*/
        FG0SW01.FG0SWFCS[FG0SWIXF] = FF9REC.FF6SLFCT;
                                   /* Save the fcst*/
        FG0SW01.FG0SWCNT[FG0SWIXF] = FF9REC.ZZZCHGCT; /* Save chng count*/
        ;
        FFXREC.FFXNUMB = FF9REC.FF6SLFCT;
        XSFFS10(); /* Convert the value from NUM to CHAR*/
        FG0SW01.FG0SMFCS[FG0SWIXF] = FFXREC.FFXCHAR;
        ;
      end
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      FG0SW00.FG0SWCR3 = "Y"; /* End of cursor*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "172"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S172

// Close cursor for VMSTY001
Function FG0S173()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "C1"; /* Function code*/
  ;
  try
    call "IO3740" (FFFREC, SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "173"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0S173

// Calculate the grand total
Function FG0S180()
  ;
   /* --------------------------------------------------------*/
   /* Calculate the total forecast for each month. If the*/
   /* style colors within the style group are across two*/
   /* pages, bring in the accumulate totals and change flags.*/
   /* --------------------------------------------------------*/
  ;
  if (FG0SW00.FG0SWIXM == 1)
    FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXM;
  else
    FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXM - 1; /* Initialize map index*/
  end
  FG0SW01.FG0SWSTY[FG0SWIXM] = " ";
  FG0SW01.FG0SWDES[FG0SWIXM] = "   TOTAL"; /* Total line description*/
  FG0SW01.FG0SWGFL[FG0SWIXM] = "N"; /* Style group flag*/
  ;
  while (FG0SW00.FG0SWIXW >= 1 /* Until top of the page*/
   && FG0SW01.FG0SWGFL[FG0SWIXW] == "N") /* or reach style grp*/
    ;
    FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXW - 1;
    FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF * 12 + 1;
    FG0SW00.FG0SWIXE = FG0SW00.FG0SWIXF + FG0SW00.FG0SWEND - 1;
    ;
    FG0SW00.FG0SWIXT = FG0SW00.FG0SWIXM - 1;
    FG0SW00.FG0SWIXT = FG0SW00.FG0SWIXT * 12 + 1;
    ;
    FG0SW00.FG0SWCLM = 1; /* Initialize temp total idx*/
    ;
    while (FG0SW00.FG0SWIXF <= FG0SW00.FG0SWIXE)
      ;
      FG0SW00.FG0SWTOT = FG0SW01.FG0SWFCS[FG0SWIXT]; /* Total qty*/
      FG0SW00.FG0SWFCS = FG0SW01.FG0SWFCS[FG0SWIXF]; /* Mo. fcst qty*/
      FG0SW01.FG0SWFCS[FG0SWIXT] = FG0SW00.FG0SWTOT + FG0SW00.FG0SWFCS;
      ;
      if (FG0SW00.FG0SWMTF[FG0SWCLM] == "Y") /* Month total changed*/
        ;
        FG0SW00.FG0SWTOT = FG0SW01.FG0SWFCS[FG0SWIXT]; /* Total qty*/
        FG0SW00.FG0SWFCS = FG0SW00.FG0SWMTL[FG0SWCLM];
                                   /* Mo. fcst qty*/
        FG0SW01.FG0SWFCS[FG0SWIXT] = FG0SW00.FG0SWTOT + FG0SW00.FG0SWFCS;
        ;
        FG0SW00.FG0SWMTF[FG0SWCLM] = "N"; /* Reset month tot chng flg*/
        FG0SW00.FG0SWMTL[FG0SWCLM] = 0; /* Clear the month tot*/
        ;
      end
      ;
      FFXREC.FFXNUMB = FG0SW01.FG0SWFCS[FG0SWIXT];
      XSFFS10(); /* Convert from NUM to CHAR*/
      FG0SW01.FG0SMFCS[FG0SWIXT] = FFXREC.FFXCHAR;
      ;
      FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF + 1;
      FG0SW00.FG0SWIXT = FG0SW00.FG0SWIXT + 1;
      FG0SW00.FG0SWCLM = FG0SW00.FG0SWCLM + 1;
      ;
    end
    ;
    FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW - 1;
    ;
  end
  ;
  FG0SS06(); /* Calc grand tot for stygrp*/
  ;
  FG0SW00.FG0SWNPG = 0; /* Clear the next page number*/
  ;
  FG0SW00.FG0SWIXM = FG0SW00.FG0SWIXM + 1; /* Increment map index*/
  ;
end // end FG0S180

// Add page to temporary storage
Function FG0S190()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FG0SW01.XXXTSLEN = FG0SW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  ;
  if (FG0SW00.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P") /* and last function purge*/
    ;
    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/
    ;
  end
  ;
  try
    call "TA0050" (FG0SW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FG0SW01 empty; /* M001 display storage*/
    move "     " to FG0SW01.FG0SMFCS[1] for all; /* Initialize the forecast qty field*/
    ;
    /* ---------------------------------------------------------*/
     /* Save the search information in map display storage queue*/
    /* ---------------------------------------------------------*/
    FG0SW01.FG0SWBMO = FFWREC.FFABEGMO; /* Beginning month*/
    FG0SW01.FG0SWEMO = FFWREC.FFAENDMO; /* Ending month*/
    FG0SW01.FFCDMIND = FFCREC.FFCDMIND; /* Demand index*/
    ;
    FG0SW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    FG0SW00.FG0SWIXM = 1; /* Display line number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "190"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S190

// Format and converse the map
Function FG0S200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    ;
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* no error found*/
    ;
    set FG0SM001 empty;
    ;
    FG0SM001.FG0SMBMO = FG0SW01.FG0SMBMO; /* Beginning month*/
    FG0SM001.FG0SMEMO = FG0SW01.FG0SMEMO; /* Ending month*/
    ;
    FG0SM001.FG0SWTGT = FG0SW01.FG0SWTGT; /* Style group target*/
    ;
    FG0SM001.FG0SMSEM[1] = FG0SW00.FG0SWSEM[1]; /* Season end mo*/
    FG0SM001.FG0SMSEM[2] = FG0SW00.FG0SWSEM[2]; /* Season end mo*/
    FG0SM001.FG0SMSEM[3] = FG0SW00.FG0SWSEM[3]; /* Season end mo*/
    FG0SM001.FG0SMSEM[4] = FG0SW00.FG0SWSEM[4]; /* Season end mo*/
    ;
    set FG0SM001.FG0SMSEM[1] initialAttributes;
    set FG0SM001.FG0SMSEM[2] initialAttributes;
    set FG0SM001.FG0SMSEM[3] initialAttributes;
    set FG0SM001.FG0SMSEM[4] initialAttributes;
    ;
    FG0SM001.YPGCD = FFWREC.YPGCD; /* Type group code*/
    FG0SM001.YPGABRV = FFWREC.YPGABRV; /* Type group abbreviation*/
    ;
    FG0SM001.XPCCD = FFWREC.XPCCD; /* Category code*/
    FG0SM001.XPCABRV = FFWREC.XPCABRV; /* Category abbreviation*/
    ;
    FG0SM001.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
    FG0SM001.SYBSTGNM = FFWREC.SYBSTGNM; /* Style group name*/
    ;
    FG0SM001.XCTCD = FFWREC.XCTCD; /* Country code*/
    FG0SM001.XCTABRV = FFWREC.XCTABRV; /* Country abbreviation*/
    ;
    FG0SM001.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
    FG0SM001.YSMSMDSC = FFWREC.YSMSMDSC; /* Division group desc*/
    ;
    FG0SM001.FFCDMIND = FG0SW01.FFCDMIND; /* Demand indicator*/
    ;
    if (FG0SW00.FG0SWSWF == "Y") /* Map must be formatted*/
      FG0S210(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FG0SM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FG0SM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG0SM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    ;
    FG0SM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/
    ;
    set FG0SM001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FG0SM001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/
  ;
  COMMAREA.CATOAP = FG0SM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG0SM001.CAITEM; /* Application data*/
  ;
end // end FG0S200

// Format the display data
Function FG0S210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  FG0SW00.FG0SWSWF = "N"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0SW00.TA5TSQIX > 0) /* Pages were formatted*/
    ;
    if (FG0SW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      ;
      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/
      ;
      if (FG0SW00.FG0SWSWU == "Y") /* Current page was changed*/
        ;
        FG0SS03(); /* Update temporary storage page*/
        ;
        FG0SW00.FG0SWSWU = "N"; /* Storage update switch*/
        ;
      end
      ;
      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      ;
      if (FG0SW00.XXXTSPAG > FG0SW00.TA5TSQIX) /* Desired greater highest*/
        FG0SW00.XXXTSPAG = FG0SW00.TA5TSQIX; /* Default to highest*/
      end
      ;
      TA5REC.TA5TSQIX = FG0SW00.XXXTSPAG;
      ;
      FG0SS04(); /* Obtain temporary storage page*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    ;
    FG0SM001.XXXLITPG = "PAGE"; /* "page" literal*/
    set FG0SM001.XXXLITPG skip;
    FG0SM001.XXXTSPAG = FG0SW00.XXXTSPAG; /* Current page*/
    FG0SM001.XXXLITOF = "OF"; /* "of" literal*/
    set FG0SM001.XXXLITOF skip;
    FG0SM001.TA5TSQIX = FG0SW00.TA5TSQIX; /* Highest page*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0SW00.TA5TSQIX != 0) /* If data obtained*/
    FG0SM001.FG0SW1SM = FG0SW00.FG0SW1SM; /* Projected intro. month*/
    FG0SM001.FG0SWCOM = FG0SW00.FG0SWCOM; /* Projected closeout month*/
  end
  ;
  set FG0SM001.FG0SMSEM[1] cursor;
  ;
  FG0SM001.FG0SWTGT = FG0SW01.FG0SWTGT; /* Target*/
  ;
   /* ------------------------------------------------------*/
   /* Darken all the fcst qty fields on the screen*/
   /* ------------------------------------------------------*/
  ;
  FG0SW00.FG0SWIXM = 1;
  ;
  while (FG0SW00.FG0SWIXM <= 14)
    ;
    FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXM - 1; /* map index*/
    FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF * 6 + 1;
    ;
    FG0SW00.FG0SWIXE = FG0SW00.FG0SWIXF + 6 - 1;
    ;
    while (FG0SW00.FG0SWIXF <= FG0SW00.FG0SWIXE) /* End of screen*/
      set FG0SM001.FG0SMFCS[FG0SWIXF] initialAttributes;
      FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF + 1;
    end
    ;
    FG0SW00.FG0SWIXM = FG0SW00.FG0SWIXM + 1;
    ;
  end
   /* ------------------------------------------------------*/
   /* Move the heading*/
   /* ------------------------------------------------------*/
  ;
  FG0SW00.FG0SWIXF = 1; /* Initialize the map index*/
  FG0SW00.FG0SWIXM = FG0SW00.FG0SWLEF;
                                   /* Initialize the work area index*/
  ;
  if (FG0SW00.FG0SW-MON-LEFT[FG0SWPGX] == "Y") /* 2nd page of the season*/
    FG0SW00.FG0SWREM = FG0SW00.FG0SWSIN[FG0SWSNX] - 6;
    FG0SW00.FG0SWRIG = FG0SW00.FG0SWLEF + FG0SW00.FG0SWREM - 1;
  else
    if (FG0SW00.FG0SWSIN[FG0SWSNX] <= 6)
      FG0SW00.FG0SWRIG = FG0SW00.FG0SWLEF + FG0SW00.FG0SWSIN[FG0SWSNX] - 1;
    else
      FG0SW00.FG0SWRIG = FG0SW00.FG0SWLEF + 6 - 1;
    end
  end
  ;
  while (FG0SW00.FG0SWIXF <= 6) /* End of page*/
    ;
    if (FG0SW00.FG0SWIXM <= FG0SWRIG) /* end of season*/
      FG0SM001.FG0SMHD[FG0SWIXF] = FG0SW00.FG0SWHYM[FG0SWIXM];
      set FG0SM001.FG0SMHD[FG0SWIXF] skip;
    else
      set FG0SM001.FG0SMHD[FG0SWIXF] initialAttributes;
    end
    ;
    FG0SW00.FG0SWIXM = FG0SW00.FG0SWIXM + 1; /* Increment the map index*/
    FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF + 1;
                                   /* Increment the work area index*/
    ;
  end
  ;
   /* ------------------------------------------------------*/
   /* Move detail lines*/
   /* ------------------------------------------------------*/
  ;
  FG0SW00.FG0SWIXM = 1; /* Initialize the map index*/
  ;
  while (FG0SW00.FG0SWIXM <= 14)
    if (FG0SW01.FG0SWDES[FG0SWIXM] > " "
     || FG0SW01.FG0SWSTY[FG0SWIXM] > " ")
      ;
      FG0SM001.FG0SWSTY[FG0SWIXM] = FG0SW01.FG0SWSTY[FG0SWIXM];
      FG0SM001.FG0SWDES[FG0SWIXM] = FG0SW01.FG0SWDES[FG0SWIXM];
      ;
      if (FG0SW01.FG0SWGFL[FG0SWIXM] == "Y") /* Process style group line*/
        ;
        FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXM - 1; /* map index*/
        FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF * 6 + 1;
        ;
        FG0SW00.FG0SWIXE = FG0SW00.FG0SWIXF + 6 - 1;
        ;
        while (FG0SW00.FG0SWIXF <= FG0SW00.FG0SWIXE) /* End of screen*/
          set FG0SM001.FG0SMFCS[FG0SWIXF] initialAttributes;
          FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF + 1;
        end
      else
        /* -------------------------------------------------*/
         /* Move forecast quantity fields. For the first*/
         /* total line on the page, need to check if any*/
         /* monthly fcst within the same style group on the*/
         /* previous page has been updated and accomodate*/
         /* the changes to the total on the current page.*/
        /* -------------------------------------------------*/
        ;
        if (FG0SW00.FG0SW-MON-LEFT[FG0SWPGX] == "Y") /* 2nd page of seas*/
          FG0SW00.FG0SWREM = FG0SW00.FG0SWSIN[FG0SWSNX] - 6;
          FG0SS06(); /* calculate subtot from 1st page*/
        else
          if (FG0SW00.FG0SWSIN[FG0SWSNX] <= 6)
            FG0SW00.FG0SWREM = FG0SW00.FG0SWSIN[FG0SWSNX];
          else
            FG0SW00.FG0SWREM = 6;
          end
          FG0SW00.FG0SWTSB[FG0SWIXM] = 0;
        end
        ;
        FG0SW00.FG0SWIXN = 1; /* count the no. of month processed*/
        ;
        FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXM - 1; /* map index*/
        FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF * 6 + 1;
        ;
        FG0SW00.FG0SWIXE = FG0SW00.FG0SWIXF + 6 - 1; /* end of map index*/
        ;
        FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXM - 1; /* work area index*/
        FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW * 12 + FG0SW00.FG0SWLEF;
        FG0SW00.FG0SWIXT = FG0SW00.FG0SWIXM - 1;
        FG0SW00.FG0SWIXT = FG0SW00.FG0SWIXT * 12 + FG0SW00.FG0SWEND;
        ;
        FG0SW00.FG0SWCLM = FG0SW00.FG0SWLEF; /* Initialize accum tot idx*/
        ;
        while (FG0SW00.FG0SWIXF <= FG0SW00.FG0SWIXE) /* Until end of page*/
          ;
          if (FG0SW00.FG0SWIXN <= FG0SW00.FG0SWREM) /* end of seas*/
            FG0SM001.FG0SMFCS[FG0SWIXF] = FG0SW01.FG0SMFCS[FG0SWIXW];
            FG0SW00.FG0SWTSB[FG0SWIXM] = FG0SW00.FG0SWTSB[FG0SWIXM] +             FG0SW01.FG0SWFCS[FG0SWIXW];
            FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW + 1;
          end
          FG0SS09(); /* unprotect the qty field*/
          ;
          FG0SW00.FG0SWIXN = FG0SW00.FG0SWIXN + 1;
          FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF + 1;
          FG0SW00.FG0SWCLM = FG0SW00.FG0SWCLM + 1;
          ;
        end
        ;
        /* ------------------------------------------------------*/
        /* If reach the end of the page and next page doesn't*/
        /* have any month within the same season, then show*/
        /* the totals on the current page.*/
        /* ------------------------------------------------------*/
        ;
        if (FG0SW00.FG0SWIXF > FG0SW00.FG0SWIXE /* End of the page*/
         || FG0SW00.FG0SWIXN > FG0SW00.FG0SWSIN[FG0SWSNX])
                                   /* or end of seas*/
          if (FG0SW00.FG0SWIXN > FG0SW00.FG0SWSIN[FG0SWSNX]) /* end of seas*/
            FG0SS08(); /* process totals*/
          else
            if (FG0SW00.FG0SW-MON-LEFT[FG0SWPGX] == "Y") /* 2nd page*/
              FG0SS08(); /* process totals*/
            else
              ;
              set FG0SM001.FG0SMSHD[1] initialAttributes; /* Dark*/
              set FG0SM001.FG0SMSHD[2] initialAttributes; /* Dark*/
              set FG0SM001.FG0SMGHD[1] initialAttributes; /* Dark*/
              set FG0SM001.FG0SMGHD[2] initialAttributes; /* Dark*/
              FG0SW00.FG0SWNPG = FG0SW00.FG0SWPGX + 1; /* next page*/
              FG0SW00.FG0SW-MON-LEFT[FG0SWNPG] = "Y";
              ;
            end
          end
        end
      end
      ;
    end
    ;
    FG0SW00.FG0SWIXM = FG0SW00.FG0SWIXM + 1;
    ;
  end
  ;
   /* -------------------------------------------------------*/
   /* Protect those fields which are under the months before*/
   /* projected intro month and after the projected closeout*/
   /* month (include).*/
   /* -------------------------------------------------------*/
  ;
  FG0SW00.FG0SWIXW = 1; /* Initialize fcst field index*/
  ;
  while (FG0SW00.FG0SWIXW <= 14) /* Until end of page*/
    ;
    if (FG0SW01.FG0SWGFL[FG0SWIXW] == "Y") /* Style group line*/
       /* next sentence*/
    else
      ;
      if (FG0SW01.FG0SWSTY[FG0SWIXW] == " " /* End of list*/
       && FG0SW01.FG0SWDES[FG0SWIXW] == " ")
         /* next sentence*/
      else
        ;
        if (FG0SW01.FG0SWDES[FG0SWIXW] == "   TOTAL") /* Total line*/
           /* next sentence*/
        else
          FG0SW00.FG0SWIXM = FG0SW00.FG0SWLEF; /* Init hdg idx*/
          FG0SW00.FG0SW-END-COL = FG0SW00.FG0SWIXM + 5;
          FG0SW00.FG0SWIXF = 1;
          ;
          if (FG0SW00.FG0SW-MON-LEFT[FG0SWPGX] == "Y") /* 2nd page of seas*/
            FG0SW00.FG0SWREM = FG0SW00.FG0SWSIN[FG0SWSNX] - 6;
          else
            FG0SW00.FG0SWREM = FG0SW00.FG0SWSIN[FG0SWSNX];
          end
          ;
          while (FG0SW00.FG0SWIXM <= FG0SW00.FG0SWEND /* or end of range*/
           && FG0SW00.FG0SWIXF <= FG0SW00.FG0SWREM 
           && FG0SW00.FG0SWIXM <= FG0SW00.FG0SW-END-COL)
            ;
            if (FG0SW00.FG0SWHDG[FG0SWIXM] < FG0SW01.FG0SW1SD[FG0SWIXW]
             || FG0SW00.FG0SWHDG[FG0SWIXM] >= FG0SW01.FG0SWCOD[FG0SWIXW])
              ;
              FG0SW00.FG0SWIXT = FG0SW00.FG0SWIXW - 1;
              FG0SW00.FG0SWIXT = FG0SW00.FG0SWIXT * 6 + FG0SW00.FG0SWIXF;
              ;
              set FG0SM001.FG0SMFCS[FG0SWIXT] skip;
              ;
            end
            ;
            FG0SW00.FG0SWIXM = FG0SW00.FG0SWIXM + 1;
            FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF + 1;
                                   /* Increment the fcst index*/
            ;
          end
          ;
        end
        ;
      end
    end
    FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW + 1; /* Increment the map index*/
  end
  ;
end // end FG0S210

// Check attention identifier
Function FG0S300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    if (FG0SW00.FG0SWSWR == "Y") /* Request for data*/
      set FG0SW01 empty; /* M001 display storage*/
    end
    ;
    FG0SW00.FG0SWSWF = "Y"; /* Format the map switch*/
    FG0SW00.FG0SWSWR = "N"; /* Request for data switch*/
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0SM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      if (FG0SW00.FG0SWMST == "Y"
       || FG0SW00.FG0SWMST == " ")
        ;
        FG0S110(); /* Purge temporary storage*/
        ;
        XSFFS01(); /* Exit to another application*/
        ;
        set FG0SM001.CATOAP cursor, bold; /* Highlight*/
        ;
      else
        ;
        if (FG0SW00.FG0SWERR == "Y")
                                   /* Warning msg already shown once*/
          ;
          FG0SW00.FG0SWERR = "N"; /* Clear the error switch*/
          FG0S110(); /* Purge temporary storage*/
          XSFFS01(); /* Exit to another application*/
          set FG0SM001.CATOAP cursor, bold; /* Highlight*/
          ;
        else
          ;
          COMMAREA.CATOAP = " "; /* TO application*/
          FFWREC.XXXMODID = "300"; /* Module identification*/
          converseLib.validationFailed(369); /* Indicate update master fcst*/
          FG0SW00.FG0SWERR = "Y"; /* Set the error switch*/
          ;
        end
        ;
      end
      ;
    else
      ;
      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      if (COMMAREA.CAFROMAP == "FG0A") /* From application*/
        COMMAREA.CACURRAP = "FG0A"; /* Return to appliction*/
      end
      ;
      if (COMMAREA.CAFROMAP == "FG0B") /* From application*/
        COMMAREA.CACURRAP = "FG0B"; /* Return to application*/
      end
      ;
      if (COMMAREA.CAFROMAP == "FG0H") /* From application*/
        COMMAREA.CACURRAP = "FG0H"; /* Return to application*/
      end
      ;
      if (COMMAREA.CAFROMAP == "FG0I") /* From application*/
        COMMAREA.CACURRAP = "FG0I"; /* Return to application*/
      end
      ;
      if (COMMAREA.CAFROMAP == "FG0J") /* From application*/
        COMMAREA.CACURRAP = "FG0J"; /* Return to application*/
      end
      ;
      COMMAREA.CAITEM = "FG0SM001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      ;
      if (COMMAREA.CAFROMAP == "FG0A") /* From application*/
        COMMAREA.CATOAP = "FG0A"; /* TO application*/
      end
      ;
      if (COMMAREA.CAFROMAP == "FG0B") /* From application*/
        COMMAREA.CATOAP = "FG0B"; /* TO application*/
      end
      ;
      if (COMMAREA.CAFROMAP == "FG0H") /* From application*/
        COMMAREA.CATOAP = "FG0H"; /* TO application*/
      end
      ;
      if (COMMAREA.CAFROMAP == "FG0I") /* From application*/
        COMMAREA.CATOAP = "FG0I"; /* TO application*/
      end
      ;
      if (COMMAREA.CAFROMAP == "FG0J") /* From application*/
        COMMAREA.CATOAP = "FG0J"; /* TO application*/
      end
      ;
    end
    ;
    if (FG0SW00.FG0SWMST == "Y"
     || FG0SW00.FG0SWMST == " ")
      ;
      FG0S110(); /* Purge temporary storage*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
    else
      ;
      if (FG0SW00.FG0SWERR == "Y") /* Warning msg already shown once*/
        ;
        FG0SW00.FG0SWERR = "N"; /* Clear the error switch*/
        FG0S110(); /* Purge temporary storage*/
        XSFFS01(); /* Exit to another application*/
        ;
      else
        ;
        COMMAREA.CATOAP = " "; /* TO application*/
        FFWREC.XXXMODID = "300"; /* Module identification*/
        converseLib.validationFailed(369); /* Indicate update master fcst*/
        FG0SW00.FG0SWERR = "Y"; /* Set the error switch*/
        ;
      end
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, reset the error message switch.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    FG0SW00.FG0SWERR = "N";
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf15) /* and PF15 was not pressed*/
    ;
    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
end // end FG0S300

// Reset highlighted fields
Function FG0S400()
  ;
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FG0SM001.FG0SMSEM[1] initialAttributes; /* Season end month*/
  set FG0SM001.FG0SMSEM[2] initialAttributes; /* Season end month*/
  set FG0SM001.FG0SMSEM[3] initialAttributes; /* Season end month*/
  set FG0SM001.FG0SMSEM[4] initialAttributes; /* Season end month*/
  ;
  set FG0SM001.CATOAP initialAttributes; /* Commarea TO application*/
  set FG0SM001.CAITEM initialAttributes; /* Commarea application data*/
  ;
  FG0SW00.FG0SWIXT = 7; /* Initial range index*/
  ;
  if (" " in FG0SM001.FG0SMHD) /* Find the position of end of range*/
    FG0SW00.FG0SWIXT = sysVar.arrayIndex;
  end
  ;
  FG0SW00.FG0SWIXM = 1;
  ;
  while (FG0SW00.FG0SWIXM <= 14) /* Until end of page*/
    ;
    if (FG0SM001.FG0SWDES[FG0SWIXM] != " "
     || FG0SW01.FG0SWSTY[FG0SWIXM] != " ")
      ;
      if (FG0SW01.FG0SWGFL[FG0SWIXM] == "N") /* Not style group row*/
        ;
        FG0S410(); /* Reset the forecast field*/
        ;
      end
      ;
    end
    ;
    FG0SW00.FG0SWIXM = FG0SW00.FG0SWIXM + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0SM001.YPGCD == "?" /* Type group list requested*/
   || FG0SM001.XPCCD == "?" /* Category list requested*/
   || FG0SM001.XCTCD == "?") /* Country list requested*/
    ;
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  else
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of ypg codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0SM001.YPGCD == "?") /* product list requested*/
    ;
    XPXX001(); /* init for pop up window*/
    ;
    XX0XW02.XX0XWHDR = "    TYPE GRP";
    XX0XW02.YPGFFFL = "Y";
    ;
    while (XX0XW02.XX0XWEND == "N")
      XPYPG01(); /* perform pop up window routine*/
    end
    ;
    if (XX0XW02.XX0XWPIX > 0)
      FG0SM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX];
      FG0SM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX];
    else
      FG0SM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FG0SM001.YPGABRV = FFWREC.YPGABRV; /* Abbreviation*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0SM001.XPCCD == "?") /* Category list requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CAT"; /* Heading*/
    XX0XW02.XGPCD = XPCREC.XGPCD; /* GPC code*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0SM001.XPCCD = FFWREC.XPCCD; /* Restore prior code*/
      FG0SM001.XPCABRV = FFWREC.XPCABRV; /* Abbreviation*/
    else
      FG0SM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FG0SM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FG0SM001.XPCCD cursor; /* Establish cursor position*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of country codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0SM001.XCTCD == "?") /* Country list requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  CTRY"; /* Heading*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCT01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0SM001.XCTCD = FFWREC.XCTCD; /* Restore prior code*/
      FG0SM001.XCTABRV = FFWREC.XCTABRV; /* Abbreviation*/
    else
      FG0SM001.XCTCD = XCTTBL.XCTCD[XX0XWPIX]; /* Selected code*/
      FG0SM001.XCTABRV = XCTTBL.XCTABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FG0SM001.XCTCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Requested lists displayed*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0S400

// Reset forecast fields
Function FG0S410()
  ;
  FG0SW00.FG0SWCLM = 1; /* Initialize column index*/
  ;
  FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXM - 1;
  FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF * 6 + 1;
  ;
  if (FG0SW00.FG0SW-MON-LEFT[FG0SWPGX] == "Y") /* 2nd page of the season*/
    FG0SW00.FG0SWREM = FG0SW00.FG0SWSIN[FG0SWSNX] - 6;
    FG0SW00.FG0SWIXE = FG0SW00.FG0SWIXF + FG0SW00.FG0SWREM - 1;
  else
    if (FG0SW00.FG0SWSIN[FG0SWSNX] <= 6)
      FG0SW00.FG0SWIXE = FG0SW00.FG0SWIXF +                          FG0SW00.FG0SWSIN[FG0SWSNX] - 1;
    else
      FG0SW00.FG0SWIXE = FG0SW00.FG0SWIXF + 6 - 1;
    end
  end
  ;
  FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXM - 1;
  FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW * 6 + FG0SW00.FG0SWIXT;
  ;
  while (FG0SW00.FG0SWIXF <= FG0SW00.FG0SWIXE /* Until end of page*/
   && FG0SW00.FG0SWIXF < FG0SW00.FG0SWIXW) /* or end of range*/
    ;
    if (FG0SM001.FG0SWDES[FG0SWIXM] == "   TOTAL") /* Total line*/
      ;
      set FG0SM001.FG0SMFCS[FG0SWIXF] skip; /* total qty field*/
      ;
    else
      ;
      if (FG0SW00.FG0SWHDG[FG0SWCLM] >= FG0SW00.FG0SW1SD /* After intro. mo*/
       && FG0SW00.FG0SWHDG[FG0SWCLM] < FG0SW00.FG0SWCOD  
       /* Before c/o mo*/
       && FFWREC.YSMXDV == "10")                         /* and Dometic*/
        ;
        set FG0SM001.FG0SMFCS[FG0SWIXF] normal; /* Fcst qty field*/
        ;
      else
        ;
        set FG0SM001.FG0SMFCS[FG0SWIXF] skip;
                                   /* Forecast quantity fld*/
        ;
      end
      ;
    end
    ;
    FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF + 1;
    FG0SW00.FG0SWCLM = FG0SW00.FG0SWCLM + 1;
    ;
  end
  ;
end // end FG0S410

// Verify the entered data
Function FG0S500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0SM001.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FG0SM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7  /* Scroll back request*/
   || converseVar.eventKey is pf8  /* or scroll forward request*/
   || converseVar.eventKey is pf10 /* or scroll left request*/
   || converseVar.eventKey is pf11) /* or scroll right request*/
    ;
    FG0S510(); /* Verify scroll request*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* Verify data in the line.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0SW00.FG0SWSWO == "Y") /* Indicate data was obtained*/
      FG0S520(); /* Verify forecast quantity*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify the passed keys for DOM processing.*/
   /* ------------------------------------------------------------*/
  ;
  FG0S530(); /* Verify the season end months*/
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end FG0S500

// Verify scroll request
Function FG0S510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FG0SW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FG0SW00.XXXTSPAG >= FG0SW00.TA5TSQIX) /* and no more pages*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll left was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* Scroll left request*/
    ;
    if (FG0SW00.FG0SWPGX == 1) /* current page is the 1st page*/
      ;
      FFWREC.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(23); /* No more columns to display*/
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If scroll right was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11) /* Scroll right request*/
    ;
    if (FG0SW00.FG0SWRIG == FFZREC.FFZNUMMO) /* and no more pages*/
      ;
      FFWREC.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(24); /* No more columns to display*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/
  ;
  FG0SW00.FG0SWIXM = 13; /* Initialize display index*/
  ;
  while (FG0SW00.FG0SWIXM >= 1) /* Until end of the page*/
    ;
    if (FG0SM001.FG0SWSTY[FG0SWIXM] > " ")
      ;
      FG0SW00.FG0SWIXE = FG0SW00.FG0SWIXM - 1;
      FG0SW00.FG0SWIXE = FG0SW00.FG0SWIXE * 6 + 1;
      ;
      if (FG0SW00.FG0SW-MON-LEFT[FG0SWPGX] == "Y") /* 2nd page of season*/
        ;
        FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXM - 1;
        FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF * 6 +                           FG0SW00.FG0SWSIN[FG0SWSNX] - 6;
        ;
        FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXM - 1;
        FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW * 12 + FG0SW00.FG0SWLEF;
        FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW +                           FG0SW00.FG0SWSIN[FG0SWSNX] - 6 - 1;
        ;
      else
        ;
        FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXM - 1;
        ;
        if (FG0SW00.FG0SWSIN[FG0SWSNX] <= 6)
          FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF * 6 +                              FG0SW00.FG0SWSIN[FG0SWSNX];
        else
          FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF * 6 + 6;
        end
        ;
        FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXM - 1;
        FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW * 12 + FG0SW00.FG0SWLEF;
        ;
        if (FG0SW00.FG0SWSIN[FG0SWSNX] <= 6)
          FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW +                              FG0SW00.FG0SWSIN[FG0SWSNX] - 1;
        else
          FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW + 6 - 1;
        end
        ;
      end
      ;
      while (FG0SW00.FG0SWIXF >= FG0SW00.FG0SWIXE)
        ;
        if (FG0SM001.FG0SMFCS[FG0SWIXF] != FG0SW01.FG0SMFCS[FG0SWIXW]
         && FFWREC.YSMXDV == "10")
          ;
          FFWREC.XXXMODID = "510"; /* Module identification*/
          set FG0SM001.FG0SMFCS[FG0SWIXF] cursor, bold; /* Highlight*/
          converseLib.validationFailed(5); /* Modifications not allowed*/
          ;
        end
        ;
        FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF - 1; /* Decrement map index*/
        FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW - 1; /* Decrement storage index*/
        ;
      end
    end
    ;
    FG0SW00.FG0SWIXM = FG0SW00.FG0SWIXM - 1; /* Decrement disply index*/
    ;
  end
  ;
  ;
  if (FG0SM001.FG0SMSEM[4] != FG0SW00.FG0SWSEM[4]) /* season end month chnged*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG0SM001.FG0SMSEM[4] cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/
    ;
  end
  ;
  if (FG0SM001.FG0SMSEM[3] != FG0SW00.FG0SWSEM[3]) /* season end month chnged*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG0SM001.FG0SMSEM[3] cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/
    ;
  end
  ;
  if (FG0SM001.FG0SMSEM[2] != FG0SW00.FG0SWSEM[2]) /* season end month chnged*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG0SM001.FG0SMSEM[2] cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/
    ;
  end
  ;
  if (FG0SM001.FG0SMSEM[1] != FG0SW00.FG0SWSEM[1]) /* season end month chnged*/
    ;
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG0SM001.FG0SMSEM[1] cursor, bold; /* Highlight*/
    converseLib.validationFailed(5); /* Modifications not allowed*/
    ;
  end
  ;
end // end FG0S510

// Verify data in the line
Function FG0S520()
  ;
  FG0SW00.FG0SWIXM = 14; /* Initialize disp index*/
  ;
  while (FG0SW00.FG0SWIXM >= 1) /* Until end of the page*/
    ;
    if (FG0SW01.FG0SWSTY[FG0SWIXM] > " ")
      ;
      FG0SW00.FG0SWIXE = FG0SW00.FG0SWIXM - 1;
      FG0SW00.FG0SWIXE = FG0SW00.FG0SWIXE * 6 + 1;
      ;
      if (FG0SW00.FG0SW-MON-LEFT[FG0SWPGX] == "Y") /* 2nd page of season*/
        ;
        FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXM - 1;
        FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF * 6 +                           FG0SW00.FG0SWSIN[FG0SWSNX] - 6;
        ;
        FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXM - 1;
        FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW * 12 + FG0SW00.FG0SWLEF;
        FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW +                           FG0SW00.FG0SWSIN[FG0SWSNX] - 6 - 1;
        ;
      else
        FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXM - 1;
        if (FG0SW00.FG0SWSIN[FG0SWSNX] <= 6)
          FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF * 6 +                              FG0SW00.FG0SWSIN[FG0SWSNX];
        else
          FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF * 6 + 6;
        end
        ;
        FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXM - 1;
        FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW * 12 + FG0SW00.FG0SWLEF;
        if (FG0SW00.FG0SWSIN[FG0SWSNX] <= 6)
          FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW +                              FG0SW00.FG0SWSIN[FG0SWSNX] - 1;
        else
          FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW + 6 - 1;
        end
        ;
      end
      ;
      FG0SW00.FG0SWCLM = FG0SW00.FG0SWRIG;
                                   /* Initialize month tot idx*/
      ;
      /* ----------------------------------------------------------*/
        /* Find out the position of the total line.*/
      /* ----------------------------------------------------------*/
      ;
      FG0SW00.FG0SWIXT = FG0SW00.FG0SWIXM;
      ;
      while (FG0SW00.FG0SWIXT <= 14 /* Untile end of page*/
       && FG0SM001.FG0SWSTY[FG0SWIXT] != " ") /* or reach total line*/
        ;
        FG0SW00.FG0SWIXT = FG0SW00.FG0SWIXT + 1;
        ;
      end
      ;
      FG0SW00.FG0SWIND = FG0SW00.FG0SWIXT; /* Save the tot line position*/
      ;
      if (FG0SW00.FG0SW-MON-LEFT[FG0SWPGX] == "Y") /* 2nd page of season*/
        ;
        FG0SW00.FG0SWIXT = FG0SW00.FG0SWIXT - 1;
        FG0SW00.FG0SWIXT = FG0SW00.FG0SWIXT * 12 + FG0SW00.FG0SWLEF;
        FG0SW00.FG0SWIXT = FG0SW00.FG0SWIXT +                           FG0SW00.FG0SWSIN[FG0SWSNX] - 6 - 1;
        ;
      else
        ;
        FG0SW00.FG0SWIXT = FG0SW00.FG0SWIXT - 1;
        FG0SW00.FG0SWIXT = FG0SW00.FG0SWIXT * 12 + FG0SW00.FG0SWLEF;
        if (FG0SW00.FG0SWSIN[FG0SWSNX] <= 6)
          FG0SW00.FG0SWIXT = FG0SW00.FG0SWIXT +                              FG0SW00.FG0SWSIN[FG0SWSNX] - 1;
        else
          FG0SW00.FG0SWIXT = FG0SW00.FG0SWIXT + 6 - 1;
        end
        ;
      end
      ;
      FG0SW00.FG0SWCLM = FG0SW00.FG0SWRIG; /* Column index*/
      ;
      /* ------------------------------------------------------------*/
       /* Convert the entered quantities from CHAR format to NUM*/
       /* format.*/
       /* Check the quantities to make sure they are not negative*/
       /* values.*/
      /* ------------------------------------------------------------*/
      ;
      while (FG0SW00.FG0SWIXF >= FG0SW00.FG0SWIXE)
        ;
        if (FG0SM001.FG0SMFCS[FG0SWIXF] > " "
         && FG0SM001.FG0SMFCS[FG0SWIXF] != FG0SW01.FG0SMFCS[FG0SWIXW])
          ;
          FG0SW00.FG0SWMST = "N";
                                   /* Reset master fcst saved switch*/
          FFXREC.FFXCHAR = FG0SM001.FG0SMFCS[FG0SWIXF];
          XSFFS11(); /* Translate value format*/
          ;
          if (FFXREC.FFXRTNCD == "0") /* Normal return*/
            ;
            if (FFXREC.FFXNUMB < 0) /* Negative value*/
              if (FG0SM001.XCTCD != "0000") /* not country 0000*/
                ;
                FFWREC.XXXMODID = "520"; /* Module identification*/
                converseLib.validationFailed(10); /* Invalid value entered*/
                set FG0SM001.FG0SMFCS[FG0SWIXF] cursor, bold; /* Highlighted*/
                ;
              else
                ;
                FG0S521(); /* Update grand total areas*/
                ;
              end
              ;
            else
              ;
              FG0S521(); /* Update grand total areas*/
              ;
            end
            ;
          else
            ;
            FFWREC.XXXMODID = "520"; /* Module identification*/
            converseLib.validationFailed(10); /* Indicate invalid value entered*/
            set FG0SM001.FG0SMFCS[FG0SWIXF] cursor, bold; /* Highlighted*/
            ;
          end
          ;
        else
          ;
          if (FG0SM001.FG0SMFCS[FG0SWIXF] == " ")
            ;
            if (FG0SM001.FG0SMFCS[FG0SWIXF] != FG0SW01.FG0SMFCS[FG0SWIXW])
              FG0SW00.FG0SWMST = "N"; /* Reset mstr fcst upd switch*/
            end
            ;
            FFXREC.FFXNUMB = 0;
            ;
            FG0S521(); /* Update grand totals & change flags*/
            ;
          end
          ;
        end
        ;
        FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF - 1; /* Decrement map index*/
        FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW - 1; /* Decrement storage index*/
        FG0SW00.FG0SWIXT = FG0SW00.FG0SWIXT - 1; /* Decrement grand tot index*/
        FG0SW00.FG0SWCLM = FG0SW00.FG0SWCLM - 1; /* Decrement column idx*/
        ;
      end
      ;
    end
    ;
    FG0SW00.FG0SWIXM = FG0SW00.FG0SWIXM - 1; /* decrement display index*/
    ;
  end
  ;
  ;
end // end FG0S520

// Update grand tots & chng flags
Function FG0S521()
  ;
  if (FG0SM001.FG0SMFCS[FG0SWIXF] != FG0SW01.FG0SMFCS[FG0SWIXW])
    ;
    /* -------------------------------------------------------*/
      /* Turn on the change flags.*/
    /* -------------------------------------------------------*/
    ;
    FG0SW01.FG0SWFCH[FG0SWIXW] = "Y"; /* Mo fcst changed*/
    FG0SW01.FG0SWSCH[FG0SWIXM] = "Y"; /* CLR tot changed*/
    FFWREC.FFWMODSW = "Y"; /* Indicate data modified*/
    FG0SW00.FG0SWSWF = "Y"; /* ; /* Format data switch*/
    FG0SW00.FG0SWSWU = "Y"; /* Storage update switch*/
    ;
    /* -------------------------------------------------------*/
     /* Rounding the updated field.*/
    /* -------------------------------------------------------*/
    ;
    XSFFS10();
    ;
    /* -------------------------------------------------------*/
      /* Update the grand totals by subtracting the old*/
      /* forecast and adding the new one.*/
    /* -------------------------------------------------------*/
    ;
    FG0SW00.FG0SWFCS = FG0SW01.FG0SWFCS[FG0SWIXW];
    ;
    /* -----------------------------------------------------------*/
       /* Update the grand total of each style color*/
    /* -----------------------------------------------------------*/
    ;
    FG0SW00.FG0SWTOT = FG0SW01.FG0SWGND[FG0SWIXM];
    FG0SW01.FG0SWGND[FG0SWIXM] = FG0SW00.FG0SWTOT - FG0SW00.FG0SWFCS;
    FG0SW00.FG0SWTOT = FG0SW01.FG0SWGND[FG0SWIXM];
    FG0SW01.FG0SWGND[FG0SWIXM] = FG0SW00.FG0SWTOT + FFXREC.FFXNUMB;
    FG0SW01.FG0SWSCH[FG0SWIXM] = "Y"; /* Style group total changed*/
    ;
    /* -----------------------------------------------------------*/
       /* Update the monthly grand total. If the total line shows*/
       /* on the next page, need to save the changes and apply to*/
       /* the next page later on (When scrolling).*/
    /* -----------------------------------------------------------*/
    ;
    if (FG0SW00.FG0SWIND > 14) /* Total line is in next page*/
      ;
       /* next sentence*/
      ;
    else
      ;
      FG0SW00.FG0SWTOT = FG0SW01.FG0SWFCS[FG0SWIXT];
      FG0SW01.FG0SWFCS[FG0SWIXT] = FG0SW00.FG0SWTOT - FG0SW00.FG0SWFCS;
      FG0SW00.FG0SWTOT = FG0SW01.FG0SWFCS[FG0SWIXT];
      FG0SW01.FG0SWFCS[FG0SWIXT] = FG0SW00.FG0SWTOT + FFXREC.FFXNUMB;
      FG0SW01.FG0SWFCH[FG0SWIXT] = "Y"; /* Monthly grp total changed*/
      ;
      FG0SW00.FG0SWTOT = FG0SW01.FG0SWGND[FG0SWIND];
      FG0SW01.FG0SWGND[FG0SWIND] = FG0SW00.FG0SWTOT - FG0SW00.FG0SWFCS;
      FG0SW00.FG0SWTOT = FG0SW01.FG0SWGND[FG0SWIND];
      FG0SW01.FG0SWGND[FG0SWIND] = FG0SW00.FG0SWTOT + FFXREC.FFXNUMB;
      FG0SW01.FG0SWSCH[FG0SWIND] = "Y"; /* Total of mo. grp tot changed*/
      ;
    end
    ;
    FG0SW00.FF6SLFCT = FG0SW01.FG0SWFCS[FG0SWIXW]; /* Save old fcst*/
    FG0SW00.FG0SWFCS = FFXREC.FFXNUMB; /* Save new fcst*/
    ;
    FG0SW01.FG0SWFCS[FG0SWIXW] = FFXREC.FFXNUMB;
    FG0SW01.FG0SMFCS[FG0SWIXW] = FFXREC.FFXCHAR;
    ;
    FFXREC.FFXNUMB = FG0SW01.FG0SWFCS[FG0SWIXT];
    XSFFS10(); /* Convert from NUM to CHAR*/
    FG0SW01.FG0SMFCS[FG0SWIXT] = FFXREC.FFXCHAR;
    ;
    if (FG0SW00.FG0SWIND > 14) /* Total line is in next page*/
      ;
      FG0SS02(); /* Update the first total line in next page*/
      ;
    end
    ;
  end
  ;
end // end FG0S521

// Verify months in the season
Function FG0S530()
   /* ------------------------------------------------------------*/
   /* If season end month changed, re-position the cursor*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0SM001.FG0SMSEM[1] != FG0SW00.FG0SWSEM[1] /* seas end month changed*/
   || FG0SM001.FG0SMSEM[2] != FG0SW00.FG0SWSEM[2] 
   || FG0SM001.FG0SMSEM[3] != FG0SW00.FG0SWSEM[3] 
   || FG0SM001.FG0SMSEM[4] != FG0SW00.FG0SWSEM[4])
    ;
    FG0SW00.FG0SWLEF = 1; /* Left index*/
    FG0SW00.FG0SWSNX = 1; /* season index*/
    FG0SW00.FG0SWPGX = 1; /* page index*/
    FG0SW00.XXXTSPAG = 1; /* page no*/
    move 0 to FG0SW00.FG0SW-PAGS[1] for all; /* season on each page*/
    FG0SW00.FG0SW-PAGS[1] = 1; /* season on the 1st page*/
    move "N" to FG0SW00.FG0SW-MON-LEFT[1] for all; /* 2nd page of seas flag*/
    FG0SW00.FG0SW-NEXT = "N"; /* next season flag*/
    move 0 to FG0SW00.FG0SWTSB[1] for all; /* subtotal*/
    ;
    if (FG0SW00.FG0SWSEM[1] == 0) /* 1st time thru*/
      FG0SW00.FG0SWSWR = "Y"; /* request for data switch*/
    end
    ;
    FG0SW00.FG0SWSWF = "Y"; /* Format data switch*/
    if (converseVar.validationMsgNum == 0)
      move 0 to FG0SW00.FG0SWSEM[1] for all; /* season end month - mm*/
      move 0 to FG0SW00.FG0SWSMO[1] for all; /* season end month - ccyymm*/
      move 0 to FG0SW00.FG0SWSIN[1] for all; /* no. of months in season*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate season end months*/
   /* ------------------------------------------------------------*/
  ;
  FG0SW00.FG0SWWBD = FFWREC.FFABEGMO; /* beginning date*/
  FG0SW00.FG0SWWED = FFWREC.FFAENDMO; /* ending date*/
  ;
   /* figure out number of seasons*/
  ;
  FG0SW00.FG0SWNSS = 0; /* reset number of seasons*/
  FG0SW00.FG0SWIXW = 4; /* index*/
  while (FG0SW00.FG0SWIXW > 0)
    if (FG0SM001.FG0SMSEM[FG0SWIXW] > 0)
      FG0SW00.FG0SWNSS = FG0SW00.FG0SWIXW; /* number of seasons*/
      FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW - 4; /* force out of loop*/
      ;
    else
      ;
      FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW - 1;
    end
    ;
  end
  ;
   /* check for no seasons entered*/
  ;
  if (FG0SW00.FG0SWNSS == 0) /* no season lengths found*/
    FG0SS40(); /* obtain default season end months*/
  end
  ;
   /* If no season end month entered then check the length of the range,*/
   /* if <= 6 months use default (end month of the range)*/
  ;
  if (FG0SW00.FG0SWNSS == 0) /* no season lengths found*/
    if (FG0SW00.FG0SWBYY == FG0SW00.FG0SWEYY) /* same year*/
      FG0SW00.FG0SMMOS = FG0SW00.FG0SWEMM - FG0SW00.FG0SWBMM + 1;
    else
      FG0SW00.FG0SMMOS = FG0SW00.FG0SWEMM + 12 - FG0SW00.FG0SWBMM + 1;
    end
    ;
    if (FG0SW00.FG0SMMOS <= 6)
      FG0SW00.FG0SWNSS = 1;
      FG0SM001.FG0SMSEM[1] = FG0SW00.FG0SWEMM; /* range end month*/
    end
  end
  ;
  if (FG0SW00.FG0SWNSS == 0)
    FFWREC.XXXMODID = "530"; /* Module identification*/
    set FG0SM001.FG0SMSEM[1] cursor, bold; /* Highlight*/
    converseLib.validationFailed(442); /* required field*/
    return;
  end
  ;
   /* check for embedded zeros*/
  ;
  FG0SW00.FG0SWIXW = FG0SW00.FG0SWNSS; /* index*/
  while (FG0SW00.FG0SWIXW > 0)
    if (FG0SM001.FG0SMSEM[FG0SWIXW] == 0) /* check for embedded zeros*/
      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FG0SM001.FG0SMSEM[FG0SWIXW] cursor, bold; /* Highlight*/
      converseLib.validationFailed(440); /* required field*/
    end
    FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW - 1;
  end
  ;
  if (converseVar.validationMsgNum > 0)
    return;
  end
  ;
   /* check for invalid season end months*/
  ;
  FG0SW00.FG0SWIXW = FG0SW00.FG0SWNSS; /* index*/
  while (FG0SW00.FG0SWIXW > 0)
    ;
    if (FG0SM001.FG0SMSEM[FG0SWIXW] < 1 /* check for month error*/
     || FG0SM001.FG0SMSEM[FG0SWIXW] > 12)
      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FG0SM001.FG0SMSEM[FG0SWIXW] cursor, bold; /* Highlight*/
      converseLib.validationFailed(010); /* required field*/
      return;
    end
    ;
    if (FG0SM001.FG0SMSEM[FG0SWIXW] != FG0SW00.FG0SWEMM
     && FG0SW00.FG0SWIXW == FG0SW00.FG0SWNSS) /* last end month*/
      FFWREC.XXXMODID = "530"; /* Module identification*/
      set FG0SM001.FG0SMSEM[FG0SWIXW] cursor, bold; /* Highlight*/
      converseLib.validationFailed(447); /* required field*/
      return;
      ;
    else
      ;
      FG0SS60(); /* check for invalid entry*/
      ;
    end
    ;
    FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW - 1;
    ;
  end
  ;
  FG0SW00.FG0SWIXW = FG0SW00.FG0SWNSS;
  while (FG0SW00.FG0SWIXW > 0) /* nbr of seasons*/
    FG0SW00.FG0SWIXN = FG0SW00.FG0SWIXW - 1;
    if (FG0SW00.FG0SWIXN != 0)
      if (FG0SW00.FG0SWSMO[FG0SWIXN] >= FG0SW00.FG0SWSMO[FG0SWIXW])
        FFWREC.XXXMODID = "530"; /* Module identification*/
        set FG0SM001.FG0SMSEM[FG0SWIXN] cursor, bold; /* Highlight*/
        converseLib.validationFailed(444); /* sesn end mo > next sesn end mo*/
      end
    end
    FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW - 1;
  end
  ;
  FG0SW00.FG0SWIXW = FG0SW00.FG0SWNSS;
  FG0SW00.FG0SMMOS = 0; /* clear total months work area*/
  while (FG0SW00.FG0SWIXW > 0) /* nbr of seasons*/
    FG0SW00.FG0SWSEM[FG0SWIXW] = FG0SM001.FG0SMSEM[FG0SWIXW];
    FG0SS50(); /* calculate no of mos in each sesn*/
    FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW - 1;
  end
  ;
   /* ---------------------------------------------------------*/
      /* Calculate the right cursor*/
   /* ---------------------------------------------------------*/
  if (FG0SW00.FG0SWSWO == "Y") /* Data obtained already*/
    if (FG0SW00.FG0SW-MON-LEFT[FG0SWPGX] == "Y") /* 2nd page of the season*/
      FG0SW00.FG0SWREM = FG0SW00.FG0SWSIN[FG0SWSNX] - 6;
      FG0SW00.FG0SWRIG = FG0SW00.FG0SWLEF + FG0SW00.FG0SWREM - 1;
    else /* 1st page of the season*/
      if (FG0SW00.FG0SWSIN[FG0SWSNX] <= 6)
        FG0SW00.FG0SWRIG = FG0SW00.FG0SWLEF + FG0SW00.FG0SWSIN[FG0SWSNX]         - 1;
      else
        FG0SW00.FG0SWRIG = FG0SW00.FG0SWLEF + 6 - 1;
      end
    end
  else /* data hasn't been obtained yet*/
    FG0SW00.FG0SWRIG = 1;
  end
  ;
end // end FG0S530

// Process valid input request
Function FG0S600()
   /* ------------------------------------------------------------*/
   /* If season end months are changed, update FFWREC*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.FFWENDM1 != FG0SW00.FG0SWSMO[1]
   || FFWREC.FFWENDM2 != FG0SW00.FG0SWSMO[2]
   || FFWREC.FFWENDM3 != FG0SW00.FG0SWSMO[3]
   || FFWREC.FFWENDM4 != FG0SW00.FG0SWSMO[4])
    FFWREC.FFWENDM1 = FG0SW00.FG0SWSMO[1];
    FFWREC.FFWENDM2 = FG0SW00.FG0SWSMO[2];
    FFWREC.FFWENDM3 = FG0SW00.FG0SWSMO[3];
    FFWREC.FFWENDM4 = FG0SW00.FG0SWSMO[4];
  end
  ;
  if (converseVar.eventKey is pf7  /* Scroll back requested*/
   || converseVar.eventKey is pf8  /* Scroll foreward requested*/
   || converseVar.eventKey is pf10 /* Scroll left requested*/
   || converseVar.eventKey is pf11) /* Scroll right requested*/
    FG0SW00.FG0SWSWF = "Y"; /* Format data switch*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    FG0SW00.XXXTSPAG = FG0SW00.XXXTSPAG - 1; /* Decrement page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    FG0SW00.XXXTSPAG = FG0SW00.XXXTSPAG + 1; /* Increment page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll left was requested, increment the scrolling*/
   /* index and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf10) /* Scroll left requested*/
    ;
    /* ---------------------------*/
    /* Right cursor*/
    /* ---------------------------*/
    ;
    if (FG0SW00.FG0SW-MON-LEFT[FG0SWPGX] == "Y") /* 2nd page of the seas*/
      ;
      FG0SW00.FG0SWREM = FG0SW00.FG0SWSIN[FG0SWSNX] - 6;
      FG0SW00.FG0SWRIG = FG0SW00.FG0SWRIG - FG0SW00.FG0SWREM;
      ;
    else /* 1st page of the season*/
      ;
      if (FG0SW00.FG0SWSIN[FG0SWSNX] <= 6)
        ;
        FG0SW00.FG0SWRIG = FG0SW00.FG0SWRIG - FG0SW00.FG0SWSIN[FG0SWSNX];
        ;
      else
        ;
        FG0SW00.FG0SWRIG = FG0SW00.FG0SWRIG - 6;
        ;
      end
    end
    ;
    FG0SW00.FG0SWPGX = FG0SW00.FG0SWPGX - 1;
    FG0SW00.FG0SWSNX = FG0SW00.FG0SW-PAGS[FG0SWPGX];
                                    /* Season on previous page*/
    ;
    /* ---------------------------*/
    /* Left cursor*/
    /* ---------------------------*/
    ;
    if (FG0SW00.FG0SW-MON-LEFT[FG0SWPGX] == "Y") /* 2nd page of the seas*/
      ;
      FG0SW00.FG0SWREM = FG0SW00.FG0SWSIN[FG0SWSNX] - 6;
      FG0SW00.FG0SWLEF = FG0SW00.FG0SWLEF - FG0SW00.FG0SWREM;
      ;
    else /* 1st page of the season*/
      ;
      if (FG0SW00.FG0SWSIN[FG0SWSNX] <= 6)
        ;
        FG0SW00.FG0SWLEF = FG0SW00.FG0SWLEF - FG0SW00.FG0SWSIN[FG0SWSNX];
        ;
      else
        ;
        FG0SW00.FG0SWLEF = FG0SW00.FG0SWLEF - 6;
        ;
      end
    end
    ;
    FG0SW00.FG0SW-NEXT = "N"; /* Reset next season flag*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll right was requested, increment the scrolling*/
   /* index and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf11) /* Scroll right requested*/
    ;
    if (FG0SW00.FG0SW-MON-LEFT[FG0SWPGX] == "Y") /* 2nd page of the seas*/
      ;
      FG0SW00.FG0SWREM = FG0SW00.FG0SWSIN[FG0SWSNX] - 6;
      FG0SW00.FG0SWLEF = FG0SW00.FG0SWLEF + FG0SW00.FG0SWREM;
      ;
    else /* 1st page of the season*/
      ;
      if (FG0SW00.FG0SWSIN[FG0SWSNX] <= 6)
        ;
        FG0SW00.FG0SWLEF = FG0SW00.FG0SWLEF + FG0SW00.FG0SWSIN[FG0SWSNX];
        ;
      else
        ;
        FG0SW00.FG0SWLEF = FG0SW00.FG0SWLEF + 6;
        ;
      end
    end
    ;
    FG0SW00.FG0SWPGX = FG0SW00.FG0SWPGX + 1;
    ;
    if (FG0SW00.FG0SW-NEXT == "Y") /* next season*/
      FG0SW00.FG0SWSNX = FG0SW00.FG0SWSNX + 1;
      FG0SW00.FG0SW-NEXT = "N"; /* reset next season flag*/
    end
    ;
   /* Season on next page*/
    FG0SW00.FG0SW-PAGS[FG0SWPGX] = FG0SW00.FG0SWSNX;
    return; /* Return to previous process*/
    ;
  end
  ;
  if (FG0SW00.FG0SWSWO == "Y") /* Indicate data was obtained*/
    ;
     /* ------------------------------------------------------------*/
      /* If ENTER was pressed and any forecast being updated, then*/
      /* update the worksheets(style group, style group by month,*/
      /* category, category by month, type group and line).*/
     /* ------------------------------------------------------------*/
    ;
    FG0SW00.FG0SWSWF = "Y"; /* Format data switch*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      FG0S610(); /* Process Domestic*/
      ;
    end
    ;
     /* ------------------------------------------------------------*/
      /* if PF15 was pressed, save the forecasts into master tables.*/
     /* ------------------------------------------------------------*/
    ;
    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      ;
      FG0S630(); /* Process PF15 for DOM*/
      ;
    end
    ;
  end
  ;
end // end FG0S600

// Process ENTER key for DOM
Function FG0S610()
  ;
   /* -----------------------------------------------------*/
   /* Update worksheet by style color by month table and*/
   /* worksheet by style group by month table.*/
   /* -----------------------------------------------------*/
  ;
  FG0SW00.FG0SWIXM = 1; /* Initialize map index*/
  ;
  while (FG0SW00.FG0SWIXM <= 14) /* Until end of page*/
    if (FG0SW01.FG0SWSTY[FG0SWIXM] == " " /* End of the list*/
     && FG0SW01.FG0SWDES[FG0SWIXM] == " ")
      ;
    else
      ;
      if (FG0SW01.FG0SWGFL[FG0SWIXM] == "Y") /* Style group line*/
        ;
        FG0SW00.SYBSTGNB = FG0SW01.FG0SWSTY[FG0SWIXM]; /* Save curr stygrp*/
        ;
      else
        ;
        FG0SW00.FG0SWIXW = FG0SW00.FG0SWLEF;
                                   /* Initialize month index*/
        ;
        FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXM - 1;
        FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF * 12 + FG0SW00.FG0SWLEF;
        ;
        if (FG0SW00.FG0SW-MON-LEFT[FG0SWPGX] == "Y") /* 2nd page of seas*/
          FG0SW00.FG0SWREM = FG0SW00.FG0SWSIN[FG0SWSNX] - 6;
          FG0SW00.FG0SWIXE = FG0SW00.FG0SWIXF + FG0SW00.FG0SWREM - 1;
        else
          if (FG0SW00.FG0SWSIN[FG0SWSNX] <= 6)
            FG0SW00.FG0SWIXE = FG0SW00.FG0SWIXF +                                FG0SW00.FG0SWSIN[FG0SWSNX] - 1;
          else
            FG0SW00.FG0SWIXE = FG0SW00.FG0SWIXF + 6 - 1;
          end
        end
        ;
        while (FG0SW00.FG0SWIXF <= FG0SW00.FG0SWIXE)
          ;
          if (FG0SW01.FG0SWSTY[FG0SWIXM] == " " /* Reach total line*/
           && FG0SW01.FG0SWFCH[FG0SWIXF] == "Y") /* Monthly grp tot changed*/
            ;
            FG0S611(); /* Read DFCAST.VWGMTH01 table*/
            ;
            if (SQLCA.VAGen_SQLCODE != 100) /* Record found*/
              ;
              FG0S612(); /* Update DFCAST.VWGMTH01 table*/
              ;
            end
            ;
          else
            ;
            if (FG0SW01.FG0SWFCH[FG0SWIXF] == "Y") /* Monthly clr fcst changed*/
              ;
              FG0S613(); /* Read DFCAST.VWSMTH01 table*/
              ;
              if (FFOREC.ZZZCHGCT != FG0SW01.FG0SWCNT[FG0SWIXF]) /* Recd changed*/
                ;
                VGVar.handleSysLibraryErrors = 0;
                sysLib.rollback(); /* Roll back all changes*/
                ;
                FG0SW00.FG0SWSWR = "Y"; /* Request for data switch*/
                FG0SW00.FG0SWSWU = "N"; /* Reset update switch*/
                FFWREC.XXXMODID = "610"; /* Module identification*/
                FFWREC.XXXMSGNO = 46; /* Indicate update by another*/
                ;
                exit stack; /* Exit to display map*/
                ;
              else
                ;
                FG0S614(); /* Update DFCAST.VWSMTH01 table*/
                FG0SW01.FG0SWCNT[FG0SWIXF] = FFOREC.ZZZCHGCT; /* save chgct*/
                ;
              end
              ;
            end
            ;
          end
          ;
          FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF + 1; /* Increment fcst index*/
          FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW + 1; /* Increment month index*/
          ;
        end
        ;
      end
      ;
    end
    FG0SW00.FG0SWIXM = FG0SW00.FG0SWIXM + 1; /* Increment map index*/
    ;
  end
  ;
   /* -------------------------------------------------------*/
   /* Update worksheet by style color and style group table.*/
   /* -------------------------------------------------------*/
  ;
  FG0SW00.FG0SWIXM = 1; /* Initialize fcst index*/
  ;
  while (FG0SW00.FG0SWIXM <= 14) /* Until end of the page*/
    if (FG0SW01.FG0SWDES[FG0SWIXM] == " " /* and end of the list*/
     && FG0SW01.FG0SWSTY[FG0SWIXM] == " ")
      ;
    else
      ;
      if (FG0SW01.FG0SWGFL[FG0SWIXM] == "Y") /* Style group line*/
        ;
        FG0SW00.SYBSTGNB = FG0SW01.FG0SWSTY[FG0SWIXM]; /* Save curr stygrp*/
        ;
      else
        ;
        if (FG0SW01.FG0SWSTY[FG0SWIXM] != " ") /* Style color line*/
          ;
          if (FG0SW01.FG0SWSCH[FG0SWIXM] == "Y") /* Grand total for each clr chgd*/
            ;
            FG0S615(); /* Read DFCAST.VWSTY001 table*/
            ;
            if (SQLCA.VAGen_SQLCODE == +100) /* Record not found*/
              FG0S627(); /* Insert DFCAST.VWSTY001 table*/
            else
              FG0S616(); /* Update DFCAST.VWSTY001 table*/
            end
            ;
          end
          ;
        else /* (Total line)*/
          ;
          if (FG0SW01.FG0SWSCH[FG0SWIXM] == "Y") /* Grand total for each grp chgd*/
            ;
            FG0S617(); /* Read DFCAST.VWSGRP01 table*/
            ;
            FG0S618(); /* Update DFCAST.VWSGRP01 table*/
            ;
          end
          ;
        end
        ;
      end
      ;
    end
    ;
    FG0SW00.FG0SWIXM = FG0SW00.FG0SWIXM + 1; /* Increment fcst index*/
    ;
  end
  ;
   /* -----------------------------------------------------*/
   /* If the style group total line is on next page,*/
   /* update the DFCAST.VWGMTH01 and DFCAST.VWSGRP01.*/
   /* -----------------------------------------------------*/
  ;
   /* ---------------------------------------------------------*/
    /* Update the current page with the changes, obtain next*/
    /* page, update the tables and bring back the original*/
    /* page.*/
   /* ---------------------------------------------------------*/
  ;
  if (FG0SW00.FG0SWSWU == "Y") /* Data modified*/
    ;
    FG0SS03();
                                   /* Update current temporary storage page*/
    ;
    FG0SW00.FG0SWSWU = "N"; /* Reset the update switch*/
    ;
  end
  ;
  FG0SW00.FG0SWNPG = FG0SW00.XXXTSPAG + 1; /* Next page no.*/
  ;
  if (FG0SW00.FG0SWNPG <= FG0SW00.TA5TSQIX)
    ;
    TA5REC.TA5TSQIX = FG0SW00.FG0SWNPG;
    FG0SS04(); /* Obtain next temporary storage page*/
    ;
  end
  ;
  FG0SW00.FG0SWIXW = FG0SW00.FG0SWLEF;
  ;
  if ("   TOTAL" in FG0SW01.FG0SWDES) /* Find the first total line*/
    ;
    /* -----------------------------------------------------------*/
      /* Update DFCAST.VWGMTH01 table*/
    /* -----------------------------------------------------------*/
    ;
    FG0SW00.FG0SWIXF = sysVar.arrayIndex - 1;
    FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF * 12 + FG0SW00.FG0SWLEF;
    ;
    if (FG0SW00.FG0SW-MON-LEFT[FG0SWPGX] == "Y") /* 2nd page of seas*/
      FG0SW00.FG0SWREM = FG0SW00.FG0SWSIN[FG0SWSNX] - 6;
      FG0SW00.FG0SWIXE = FG0SW00.FG0SWIXF + FG0SW00.FG0SWREM - 1;
    else
      if (FG0SW00.FG0SWSIN[FG0SWSNX] <= 6)
        FG0SW00.FG0SWIXE = FG0SW00.FG0SWIXF +                            FG0SW00.FG0SWSIN[FG0SWSNX] - 1;
      else
        FG0SW00.FG0SWIXE = FG0SW00.FG0SWIXF + 6 - 1;
      end
    end
    ;
    while (FG0SW00.FG0SWIXF <= FG0SW00.FG0SWIXE)
      ;
      if (FG0SW01.FG0SWFCH[FG0SWIXF] == "Y") /* Monthly grp tot changed*/
        ;
        FG0S611(); /* Read DFCAST.VWGMTH01 table*/
        ;
        if (SQLCA.VAGen_SQLCODE != 100) /* Record found*/
          ;
          FG0S612(); /* Update DFCAST.VWGMTH01 table*/
          ;
        end
        ;
      end
      ;
      FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF + 1; /* Increment mo tot disp index*/
      FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW + 1;
                                   /* Increment mo tot map index*/
      ;
    end
    ;
    /* -----------------------------------------------------------*/
      /* Update DFCAST.VWSGRP01 table*/
    /* -----------------------------------------------------------*/
    ;
    if (FG0SW01.FG0SWSCH[sysVar.arrayIndex] == "Y") /* Indicate sty grp tot changed*/
      ;
      FG0SW00.FG0SWIXM = sysVar.arrayIndex;
      ;
      FG0S617(); /* Read DFCAST.VWSGRP01 table*/
      ;
      FG0S618(); /* Update DFCAST.VWSGRP01 table*/
      ;
    end
    ;
  end
  ;
  FG0SW00.FG0SWNPG = 0; /* Clear next page number*/
  ;
  TA5REC.TA5TSQIX = FG0SW00.XXXTSPAG; /* Restore previous page*/
  ;
  FG0SS04(); /* Restore previous TSQ page*/
  ;
   /* -----------------------------------------------------*/
   /* Update worksheets of upper levels.*/
   /* -----------------------------------------------------*/
  ;
  if ("Y" in FG0SW01.FG0SWFCH) /* Any forecast changed*/
    ;
    /* -----------------------------------------------------*/
     /* Update worksheet by category by month table with*/
     /* the monthly variance from the specified style group*/
     /* or with the accumulated variance from all the style*/
     /* groups in the category.*/
    /* -----------------------------------------------------*/
    ;
    FG0SW00.FG0SWIXW = FG0SW00.FG0SWLEF; /* Initialize month index*/
    ;
    if (FG0SW00.FG0SW-MON-LEFT[FG0SWPGX] == "Y") /* 2nd page of the season*/
      FG0SW00.FG0SWRIG = FG0SW00.FG0SWLEF +                         FG0SW00.FG0SWSIN[FG0SWSNX] - 6 - 1;
    else
      if (FG0SW00.FG0SWSIN[FG0SWSNX] <= 6)
        FG0SW00.FG0SWRIG = FG0SW00.FG0SWLEF +                            FG0SW00.FG0SWSIN[FG0SWSNX] - 1;
      else
        FG0SW00.FG0SWRIG = FG0SW00.FG0SWLEF + 6 - 1;
      end
    end
    ;
    while (FG0SW00.FG0SWIXW <= FG0SW00.FG0SWRIG) /* Until right end*/
      ;
      FG0S619(); /* Read DFCAST.VWCMTH01 table*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0) /* If record exists*/
        ;
        FG0S620(); /* Update DFCAST.VWCMTH01 table*/
        ;
      end
      ;
      FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW + 1; /* Increment month index*/
      ;
    end
    ;
    /* -------------------------------------------------------*/
     /* Update worksheet by category table with the variance*/
     /* from the specified style group or with the accumulated*/
     /* variance from all the style groups in the category.*/
    /* -------------------------------------------------------*/
    ;
    FG0S621(); /* Read DFCAST.VWCAT001 table*/
    FG0S622(); /* Update DFCAST.VWCAT001 table*/
    ;
    FG0S623(); /* Read DFCAST.VWTYP01 table*/
    FG0S624(); /* Update DFCAST.VWTYP01 table*/
    ;
    FG0S625(); /* Read DFCAST.VWLINE01 table*/
    FG0S626(); /* Update DFCAST.VWLINE01 table*/
    ;
    FG0S628(); /* Read DFCAST.VWDGRP01 table*/
    FG0S629(); /* Update DFCAST.VWDGRP01 table*/
    ;
  end
  ;
   /* ----------------------------------------------------*/
   /* Commit all changes to protected resources.*/
   /* ----------------------------------------------------*/
  ;
  if ("Y" in FG0SW01.FG0SWFCH) /* Change has been made*/
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all changes*/
    ;
    FFWREC.XXXMODID = "610"; /* Module identification*/
    FFWREC.XXXMSGNO = 32;
                                   /* Indicate update complete successfully*/
    FFWREC.FFWMODSW = "N"; /* Indicat the data no need to be saved*/
    move "N" to FG0SW01.FG0SWFCH[1] for all; /* Reset the fcst chng flag*/
    move "N" to FG0SW01.FG0SWSCH[1] for all; /* Reset the sty grp tot chng flag*/
    FG0SW00.FG0SWVAR = 0; /* Clear the variance area*/
    move 0 to FG0SW00.FG0SWMVR[1] for all; /* Clear the month variance area*/
    ;
  end
  ;
end // end FG0S610

// Read DFCAST.VWGMTH01 table
Function FG0S611()
  ;
  set FFMREC empty; /* Clear the storage row*/
  ;
  FFMREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFMREC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FFMREC.SYBSTGNB = FG0SW00.SYBSTGNB; /* Style group*/
  ;
  FFMREC.FF4FCTMO = FG0SW00.FG0SWHDG[FG0SWIXW]; /* Forecasted month*/
  ;
  try
    call "IO3870" ("S ", SQLCA, FFMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FG0SW00.FG0SWTOT = FG0SW00.FG0SWMVR[FG0SWIXW]; /* Save var*/
      FG0SW00.FF6SLFCT = FG0SW01.FG0SWFCS[FG0SWIXF]; /* Save mo grp fcs*/
      FG0SW00.FG0SWMVR[FG0SWIXW] = FG0SW00.FF6SLFCT - FFMREC.FF6SLFCT;
      FG0SW00.FG0SWTOT = FG0SW00.FG0SWMVR[FG0SWIXW] + FG0SW00.FG0SWTOT;
      FG0SW00.FG0SWMVR[FG0SWIXW] = FG0SW00.FG0SWTOT;
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Record not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "611"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "READ THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWGMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFMREC.FFMKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S611

// Update DFCAST.VWGMTH01 table
Function FG0S612()
  ;
  FFMREC.FF6SLFCT = FG0SW01.FG0SWFCS[FG0SWIXF]; /* Sales forecast*/
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FFMREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFMREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  try
    call "IO3870" ("U ", SQLCA, FFMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      FG0SW00.FG0SWSWR = "Y"; /* Request for data switch*/
      FG0SW00.FG0SWSWU = "N"; /* Reset update switch*/
      ;
      FFWREC.XXXMODID = "612"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "612"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWGMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFMREC.FFMKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S612

// Read DFCAST.VWSMTH01 table
Function FG0S613()
  ;
  set FFOREC empty; /* Clear the storage row*/
  ;
  FFOREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFOREC.SY1STNBR = FG0SW01.FG0SWSTY[FG0SWIXM]; /* Style number*/
  FG0SW00.FG0SWDES = FG0SW01.FG0SWDES[FG0SWIXM];
  FFOREC.SY2CLRID = FG0SW00.SY2CLRID; /* Color id*/
  FFOREC.XDMCD = FG0SW00.XDMCD; /* Dimension code*/
  ;
  FFOREC.FF4FCTMO = FG0SW00.FG0SWHDG[FG0SWIXW]; /* Forecasted month*/
  ;
  try
    call "IO4070" ("S ", SQLCA, FFOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "613"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "READ THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWSMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFOREC.FFOKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S613

// Update DFCAST.VWSMTH01 table
Function FG0S614()
  ;
  FFOREC.FF6SLFCT = FG0SW01.FG0SWFCS[FG0SWIXF]; /* Sales forecast*/
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FFOREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFOREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  try
    call "IO4070" ("U ", SQLCA, FFOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      FG0SW00.FG0SWSWR = "Y"; /* Request for data switch*/
      FG0SW00.FG0SWSWU = "N"; /* Reset update switch*/
      ;
      FFWREC.XXXMODID = "614"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "614"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWSMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFOREC.FFOKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S614

// Read DFCAST.VWSTY001 table
Function FG0S615()
  ;
  set FFNREC empty; /* Clear the storage row*/
  ;
  FFNREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFNREC.SY1STNBR = FG0SW01.FG0SWSTY[FG0SWIXM]; /* Style number*/
  FG0SW00.FG0SWDES = FG0SW01.FG0SWDES[FG0SWIXM];
  FFNREC.SY2CLRID = FG0SW00.SY2CLRID; /* Color id*/
  FFNREC.XDMCD = FG0SW00.XDMCD; /* Dimension code*/
  ;
  try
    call "IO3860" ("S ", SQLCA, FFNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "615"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "READ THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFNREC.FFNKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S615

// Update DFCAST.VWSTY001 table
Function FG0S616()
  ;
  FFNREC.FF6SLFCT = FG0SW01.FG0SWGND[FG0SWIXM]; /* Sales forecast*/
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FFNREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFNREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  try
    call "IO3860" ("U ", SQLCA, FFNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      FG0SW00.FG0SWSWR = "Y"; /* Request for data switch*/
      FG0SW00.FG0SWSWU = "N"; /* Reset update switch*/
      FFWREC.XXXMODID = "616"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "616"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFNREC.FFNKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S616

// Read DFCAST.VWSGRP001 table
Function FG0S617()
  ;
  set FFLREC empty; /* Clear the storage row*/
  ;
  FFLREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFLREC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FFLREC.SYBSTGNB = FG0SW00.SYBSTGNB; /* Style group number*/
  ;
  try
    call "IO3880" ("S ", SQLCA, FFLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FG0SW00.FG0SWTOT = FG0SW00.FG0SWVAR; /* Save variance*/
      FG0SW00.FF6SLFCT = FG0SW01.FG0SWGND[FG0SWIXM];
      FG0SW00.FG0SWVAR = FG0SW00.FF6SLFCT - FFLREC.FF6SLFCT;
      FG0SW00.FG0SWVAR = FG0SW00.FG0SWTOT + FG0SW00.FG0SWVAR;
      ;
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "617"; /* MODULE IDENTIFICATION*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "READ THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFLREC.FFLKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S617

// Update DFCAST.VWSGRP001 table
Function FG0S618()
  ;
  FFLREC.FF6SLFCT = FG0SW01.FG0SWGND[FG0SWIXM]; /* Sales forecast*/
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FFLREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFLREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  try
    call "IO3880" ("U ", SQLCA, FFLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      FG0SW00.FG0SWSWR = "Y"; /* Request for data switch*/
      FG0SW00.FG0SWSWU = "N"; /* Reset update switch*/
      FFWREC.XXXMODID = "618"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "618"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFLREC.FFLKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S618

// Read DFCAST.VWCMTH01 table
Function FG0S619()
  ;
  set FFKREC empty; /* Clear the storage row*/
  ;
  FFKREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFKREC.XPCCD = FFWREC.XPCCD; /* Category code*/
  FFKREC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  ;
  FFKREC.FF4FCTMO = FG0SW00.FG0SWHDG[FG0SWIXW]; /* Forecasted month*/
  ;
  try
    call "IO3830" ("S ", SQLCA, FFKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Record not found*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "619"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "READ THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFKREC.FFKKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S619

// Update DFCAST.VWCMTH01 table
Function FG0S620()
  ;
  FFKREC.FF6SLFCT = FFKREC.FF6SLFCT + FG0SW00.FG0SWMVR[FG0SWIXW];
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FFKREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFKREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  try
    call "IO3830" ("U ", SQLCA, FFKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      FG0SW00.FG0SWSWR = "Y"; /* Request for data switch*/
      FG0SW00.FG0SWSWU = "N"; /* Reset update switch*/
      ;
      FFWREC.XXXMODID = "620"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "620"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWCMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFKREC.FFKKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S620

// Read DFCAST.VWCAT001 table
Function FG0S621()
  ;
  set FFJREC empty; /* Clear the storage row*/
  ;
  FFJREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFJREC.XPCCD = FFWREC.XPCCD; /* Category code*/
  FFJREC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  ;
  try
    call "IO3840" ("S ", SQLCA, FFJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "621"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "READ THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFJREC.FFJKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S621

// Update DFCAST.VWCAT001 table
Function FG0S622()
  ;
  FFJREC.FFECLRFL = "N"; /* Color forecast flag*/
  ;
  FFJREC.FF6SLFCT = FFJREC.FF6SLFCT + FG0SW00.FG0SWVAR; /* Apply variance*/
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FFJREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFJREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  try
    call "IO3840" ("U ", SQLCA, FFJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      FG0SW00.FG0SWSWR = "Y"; /* Request for data switch*/
      FG0SW00.FG0SWSWU = "N"; /* Reset update switch*/
      FFWREC.XXXMODID = "622"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "622"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFJREC.FFJKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S622

// Read DFCAST.VWTYP001 table
Function FG0S623()
  ;
  set FFIREC empty; /* Clear the storage row*/
  ;
  FFIREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFIREC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  FFIREC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  ;
  try
    call "IO3910" ("S ", SQLCA, FFIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FFIREC.FF6SLFCT = FFIREC.FF6SLFCT + FG0SW00.FG0SWVAR;
                                   /* Apply the var*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "623"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "READ THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWTYP001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFIREC.FFIKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S623

// Update DFCAST.VWTYP001 table
Function FG0S624()
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FFIREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFIREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  try
    call "IO3910" ("U ", SQLCA, FFIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      FG0SW00.FG0SWSWR = "Y"; /* Request for data switch*/
      FG0SW00.FG0SWSWU = "N"; /* Reset update switch*/
      FFWREC.XXXMODID = "624"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "624"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWTYP001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFIREC.FFIKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S624

// Read DFCAST.VWLINE01 table
Function FG0S625()
   /* ------------------------------------------------------------*/
   /* Select the row to obtain forecast quantity by line.*/
   /* ------------------------------------------------------------*/
  ;
  set FFGREC empty; /* Clear up the storage row*/
  ;
  FFGREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFGREC.XPLCD = FFWREC.XPLCD; /* Product line code*/
  ;
  try
    call "IO3890" ("S ", SQLCA, FFGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FFGREC.FF6SLFCT = FFGREC.FF6SLFCT + FG0SW00.FG0SWVAR; /* Apply variance*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "625"; /* MODULE IDENTIFICATION*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "READ THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFGREC.FFGKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S625

// Update DFCAST.VWLINE01 table
Function FG0S626()
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FFGREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFGREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  try
    call "IO3890" ("U ", SQLCA, FFGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      FG0SW00.FG0SWSWR = "Y"; /* Request for data switch*/
      FG0SW00.FG0SWSWU = "N"; /* Reset update switch*/
      FFWREC.XXXMODID = "626"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "626"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFGREC.FFGKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S626

// Insert DFCAST.VWSTY001 table
Function FG0S627()
  ;
  FFNREC.FF6SLFCT = FG0SW01.FG0SWGND[FG0SWIXM]; /* Sales forecast*/
  FFNREC.FF8DEVFL = "N"; /* Style dev flag*/
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FFNREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFNREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  FFNREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  FFNREC.ZZZSTM = XX0XW01.XX0XWTIM; /* Setup time*/
  ;
  try
    call "IO3860" ("A ", SQLCA, FFNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "627"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFNREC.FFNKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S627

// Read DFCAST.VWDGRP01 table
Function FG0S628()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vwdgrp01 table row*/
   /* ------------------------------------------------------------*/
  ;
  set FFEREC empty; /* Clear row storage area*/
  ;
  FFEREC.FFEWSNBR = FFWREC.FFEWSNBR;
  ;
  try
    call "IO3850" ("S ", SQLCA, FFEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "628"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWDGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFEREC.FFEKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0S628

// Update DFCAST.VWDGRP01 table
Function FG0S629()
   /* ------------------------------------------------------------*/
   /* update dfcast.vwdgrp01*/
   /* ------------------------------------------------------------*/
  ;
  FFEREC.XXXUSRID = COMMAREA.CAUSERID; /* user id*/
  FFEREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFEREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  try
    call "IO3850" ("U ", SQLCA, FFEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      FG0SW00.FG0SWSWR = "Y"; /* Request for data switch*/
      ;
      FFWREC.XXXMODID = "629"; /* Module identification*/
      FFWREC.XXXMSGNO = 20; /* Indicate updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "629"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE DFCAST.VWDGRP01 TABLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWDGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFEREC.FFEKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S629

// Process PF15 key for DOM
Function FG0S630()
  ;
  set FFSREC empty; /* Clear the storage row*/
  FFSREC.FFS1STFL = "Y"; /* 1st time flag*/
  FFSREC.FFSLSTFL = "N"; /* Last row flag*/
  ;
  FFSREC.FFABEGMO = FFWREC.FFABEGMO; /* Beginning month of the range*/
  FFSREC.FFAENDMO = FFWREC.FFAENDMO; /* Ending month of the range*/
  FFSREC.FFEWSNBR = FFWREC.FFEWSNBR; /* Worksheet number*/
  FFSREC.FFSLEVEL = "CLR"; /* Level indicator*/
  FFSREC.XCTCD = FFWREC.XCTCD; /* Country code*/
  FFSREC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FFSREC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FFSREC.XPCCD = FFWREC.XPCCD; /* Category code*/
  FFSREC.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FFSREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFSREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  XSFFS59(); /* Update master tables*/
  ;
   /* -----------------------------------------------------*/
   /* Turn on the category update flag in DFCAST.VMCAT001*/
   /* when the style color forecasts have been saved.*/
   /* -----------------------------------------------------*/
  ;
  FG0SW00.FG0SWIXM = 1; /* Initialize month index*/
  ;
  while (FG0SW00.FG0SWIXM <= 12
   && FG0SW00.FG0SWHDG[FG0SWIXM] <= FFWREC.FFAENDMO
   /* Until end of range*/
   && FG0SW00.FG0SWHDG[FG0SWIXM] != 0)
    ;
    FG0S631(); /* Read DFCAST.VMCAT001 table*/
    FG0S632(); /* Update DFCAST.VMCAT001 table*/
    ;
    FG0SW00.FG0SWIXM = FG0SW00.FG0SWIXM + 1; /* Increment month index*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit batch subroutine to update the month master tables.*/
   /* ------------------------------------------------------------*/
  ;
  set FG0SW02 empty; /* Subroutine parameters*/
  ;
  FG0SW02.XPCCD = FFWREC.XPCCD; /* Product category*/
  FG0SW02.YPGCD = FFWREC.YPGCD; /* Product type group*/
  FG0SW02.SYBSTGNB = FFWREC.SYBSTGNB; /* Style group number*/
  ;
  ;
   /* ------------------------------------------------------*/
   /* Call sub-routine to find which environment the*/
   /* program is executing in, development or production.*/
   /* ------------------------------------------------------*/
  ;
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    ;
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      FG0S-633(); /* format production JCL*/
    else
      FG0S-634(); /* format test JCL*/
    end
    ;
  else
    ;
    FFWREC.XXXMODID = "630"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print rqst*/
    ;
  end
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/
  ;
  FFWREC.XXXMODID = "630"; /* Module identification*/
  FFWREC.XXXMSGNO = 26; /* Indicate wrksht fcst saved as master*/
  FG0SW00.FG0SWMST = "Y"; /* Turn on mstr fcst saved switch*/
  ;
  ;
end // end FG0S630

// Read DFCAST.VMCAT001 table
Function FG0S631()
  ;
  set FF7REC empty; /* Clear up the storage row*/
  ;
  FF7REC.FF4FCTMO = FG0SW00.FG0SWHDG[FG0SWIXM]; /* Forecast month*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* Category code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* Type group code*/
  FF7REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF7REC.XCTCD = FFWREC.XCTCD; /* Country code*/
  ;
  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "631"; /* MODULE IDENTIFICATION*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "READ THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S631

// Update DFCAST.VMCAT001 table
Function FG0S632()
  ;
  FF7REC.FF7CATFL = "Y"; /* Category update flag*/
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FF7REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FF7REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  try
    call "IO3700" ("U ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == +100) /* Normal return code*/
      ;
      converseLib.validationFailed(46); /* Indicate tabe is updated by another*/
      ;
      exit stack;
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "632"; /* MODULE IDENTIFICATION*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0S632

// Accumulate the sty group total
Function FG0SS01()
  ;
   /* --------------------------------------------------------*/
   /* Accumulate the style color forecasts for the last style*/
   /* group on the current page, and bring the total to the*/
   /* next page. So, the total line on the next page will*/
   /* include all the style color fcst for the last style*/
   /* group.*/
   /* --------------------------------------------------------*/
  ;
  FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXM - 1; /* Initialize map index*/
  move 0 to FG0SW00.FG0SWMTL[1] for all; /* Initialize the month total work area*/
  move "N" to FG0SW00.FG0SWMTF[1] for all; /* Initialize the month tot change flag*/
  ;
  while (FG0SW00.FG0SWIXW >= 1 /* Until top of the page*/
   && FG0SW01.FG0SWGFL[FG0SWIXW] == "N") /* or reach style grp*/
    ;
    FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXW - 1;
    FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF * 12 + 1;
    FG0SW00.FG0SWIXE = FG0SW00.FG0SWIXF + FG0SW00.FG0SWEND - 1;
    ;
    FG0SW00.FG0SWIXT = 1;
    ;
    while (FG0SW00.FG0SWIXF <= FG0SW00.FG0SWIXE)
      ;
      FG0SW00.FG0SWTOT = FG0SW00.FG0SWMTL[FG0SWIXT]; /* Total qty*/
      FG0SW00.FG0SWFCS = FG0SW01.FG0SWFCS[FG0SWIXF]; /* Mo. fcst qty*/
      FG0SW00.FG0SWMTL[FG0SWIXT] = FG0SW00.FG0SWTOT + FG0SW00.FG0SWFCS;
      FG0SWMTF[FG0SWIXT] = "Y"; /* Month total changed*/
      ;
      FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF + 1;
      FG0SW00.FG0SWIXT = FG0SW00.FG0SWIXT + 1;
      ;
    end
    ;
    FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW - 1;
    ;
  end
  ;
  ;
end // end FG0SS01

// Update tot in next page
Function FG0SS02()
  ;
  ;
   /* ------------------------------------------------------------*/
    /* Update the current page with the changes, obtain next*/
    /* page and apply the changes to the total with the same*/
    /* style group and bring back the original page.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0SW00.FG0SWSWU == "Y") /* Data modified*/
    ;
    FG0SS03();
                                   /* Update current temporary storage page*/
    ;
    FG0SW00.FG0SWSWU = "N"; /* Reset update switch*/
    ;
  end
  ;
  FG0SW00.FG0SWNPG = FG0SW00.XXXTSPAG + 1; /* Next page no.*/
  ;
  TA5REC.TA5TSQIX = FG0SW00.FG0SWNPG;
  FG0SS04(); /* Obtain next temporary storage page*/
  ;
  if ("   TOTAL" in FG0SW01.FG0SWDES) /* Find the first total line*/
    ;
    /* ------------------------------------------------------------*/
      /* Update style group grand total*/
    /* ------------------------------------------------------------*/
    ;
    FG0SW00.FG0SWTOT = FG0SW01.FG0SWGND[sysVar.arrayIndex];
    FG0SW01.FG0SWGND[sysVar.arrayIndex] = FG0SW00.FG0SWTOT - FG0SW00.FF6SLFCT;
    FG0SW00.FG0SWTOT = FG0SW01.FG0SWGND[sysVar.arrayIndex];
    FG0SW01.FG0SWGND[sysVar.arrayIndex] = FG0SW00.FG0SWTOT + FG0SW00.FG0SWFCS;
    FG0SW01.FG0SWSCH[sysVar.arrayIndex] = "Y";
                                   /* Indicate clr/grp grnd tot chng*/
    ;
    /* ------------------------------------------------------------*/
      /* Update style group month total*/
    /* ------------------------------------------------------------*/
    ;
    FG0SW00.FG0SWIXN = sysVar.arrayIndex - 1;
    FG0SW00.FG0SWIXN = FG0SW00.FG0SWIXN * 12 + FG0SW00.FG0SWCLM;
    ;
    FG0SW00.FG0SWTOT = FG0SW01.FG0SWFCS[FG0SWIXN];
    FG0SW01.FG0SWFCS[FG0SWIXN] = FG0SW00.FG0SWTOT - FG0SW00.FF6SLFCT;
    FG0SW00.FG0SWTOT = FG0SW01.FG0SWFCS[FG0SWIXN];
    FG0SW01.FG0SWFCS[FG0SWIXN] = FG0SW00.FG0SWTOT + FG0SW00.FG0SWFCS;
    FG0SW01.FG0SWFCH[FG0SWIXN] = "Y"; /* Indicate monthly fcst chngd*/
    ;
    FFXREC.FFXNUMB = FG0SW01.FG0SWFCS[FG0SWIXN];
    XSFFS10();
    FG0SW01.FG0SMFCS[FG0SWIXN] = FFXREC.FFXCHAR;
    ;
  end
  ;
  FG0SS03();
                                   /* Update current temporary storage page*/
  ;
  FG0SW00.FG0SWSWU = "N"; /* Reset update switch*/
  ;
  FG0SW00.FG0SWNPG = 0; /* Clear next page number*/
  ;
  TA5REC.TA5TSQIX = FG0SW00.XXXTSPAG; /* Restore previous page*/
  ;
  FG0SS04(); /* Restore previou TSQ page*/
  ;
  ;
end // end FG0SS02

// Update temporary storage page
Function FG0SS03()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (FG0SW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S03"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0SS03

// Read temporary storage page
Function FG0SS04()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  FG0SW01.XXXTSLEN = FG0SW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FG0SW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S04"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0SS04

// Calculate grand tot for style
Function FG0SS06()
   /* ---------------------------------------------------*/
      /* Calculate the grand total for each style color.*/
   /* ---------------------------------------------------*/
  ;
  FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXM - 1;
  FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF * 12 + 1;
  FG0SW00.FG0SWIXE = FG0SW00.FG0SWIXF + 11;
  ;
  FG0SW00.FG0SWTGD = 0; /* Initialize the temp grand total area*/
  ;
  while (FG0SW00.FG0SWIXF <= FG0SW00.FG0SWIXE) /* Until end the row*/
    ;
    FG0SW00.FG0SWTGD = FG0SW00.FG0SWTGD + FG0SW01.FG0SWFCS[FG0SWIXF];
    ;
    FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF + 1;
    ;
  end
  ;
  FG0SW01.FG0SWGND[FG0SWIXM] = FG0SW00.FG0SWTGD;
  FFXREC.FFXNUMB = FG0SW00.FG0SWTGD;
  XSFFS10();
                                   /* Convert the subtotal from NUM to CHAR*/
  FG0SW01.FG0SMGND[FG0SWIXM] = FFXREC.FFXCHAR;
  ;
end // end FG0SS06

// Process the active product
Function FG0SS07()
  ;
  if (FG0SW00.FG0SWCR1 == "N" /* Record found*/
   && FG0SW00.FG0SWACT == "Y" /* and active product*/
   && FF3REC.SY2FDSMO <= FFWREC.FFAENDMO
   /* Proj. intro date within range*/
   && FF3REC.SY2PDCMO >= FFWREC.FFABEGMO)
                                   /* Proj. clsout date within range*/
    ;
    /* ------------------------------------------------------------*/
     /* If style group changed, calculate the total for the style*/
     /* group and load the new style group number and style group*/
     /* name into the display storage.*/
     /* If there is no style color fcst for the previous style grp,*/
     /* clear the style group line.*/
    /* ------------------------------------------------------------*/
    ;
    if (FF3REC.SYBSTGNB != FG0SW00.SYBSTGNB) /* Style group changed*/
      ;
      if (FG0SW00.SYBSTGNB != " " /* Not 1st time thru*/
       && FG0SW00.FG0SWEXT == "Y") /* and worksheet exist*/
        ;
        FG0S180(); /* Calculate the totals*/
        ;
        if (FG0SW00.FG0SWIXM > 14)
          ;
          FG0S190(); /* Add page to temporary storage*/
          ;
        end
        ;
      else
        ;
        /* ---------------------------------------------------*/
         /* If these is no fcst record exist for the previous*/
         /* style group, clear the style group line,*/
        /* ---------------------------------------------------*/
        ;
        if (FG0SW00.SYBSTGNB != " " /* Not 1st time thru*/
         && FG0SW00.FG0SWEXT == "N") /* No fcst or wrksht exist*/
          ;
          if (FG0SW00.FG0SWIXM > 1)
            ;
            FG0SW00.FG0SWIXM = FG0SW00.FG0SWIXM - 1; /* Back 1 row*/
            ;
            /* --------------------------------------------*/
             /* Check if reach the style group line, if it*/
             /* does then clear the style group line.*/
             /* Otherwise, it means there are some style*/
             /* color fcsts exist and calculate the total.*/
            /* --------------------------------------------*/
            ;
            if (FG0SW00.SYBSTGNB == FG0SW01.FG0SWSTY[FG0SWIXM]) /* Stygrp line*/
              ;
              FG0SW01.FG0SWSTY[FG0SWIXM] = " ";
                                   /* Clear the style fld*/
              FG0SW01.FG0SWDES[FG0SWIXM] = " "; /* Clear the desc fld*/
              FG0SW01.FG0SWGFL[FG0SWIXM] = " "; /* Clear the group flag*/
              ;
            else
              ;
              FG0SW00.FG0SWIXM = FG0SW00.FG0SWIXM + 1; /* Restore row index*/
              ;
              FG0S180(); /* Calculate the totals*/
              ;
              if (FG0SW00.FG0SWIXM > 14)
                ;
                FG0S190(); /* Add page to temporary storage*/
                ;
              end
              ;
            end
          else
            ;
            /* ---------------------------------------------------*/
             /* If these is fcst record exist for the previous*/
             /* style group but it is on the previous page,*/
             /* so, calcualte the total.*/
            /* ---------------------------------------------------*/
            ;
            FG0S180(); /* Calculate the totals*/
            ;
            if (FG0SW00.FG0SWIXM > 14)
              ;
              FG0S190(); /* Add page to temporary storage*/
              ;
            end
            ;
          end
          ;
        end
        ;
      end
      ;
      FG0SW00.SYBSTGNB = FF3REC.SYBSTGNB; /* Save new style grp*/
      FG0SW01.FG0SWSTY[FG0SWIXM] = FF3REC.SYBSTGNB; /* Stygrp no*/
      FG0SW01.FG0SWDES[FG0SWIXM] = FF3REC.SYBSTGNM; /* Stygrp name*/
      FG0SW01.FG0SWGFL[FG0SWIXM] = "Y"; /* Style group flag*/
      ;
      FG0SWIXM = FG0SWIXM + 1;
      ;
      if (FG0SW00.FG0SWIXM > 14)
        ;
        FG0S190(); /* Add page to temporary storage*/
        ;
      end
      ;
    end
    ;
    FG0SW01.FG0SWSTY[FG0SWIXM] = FF3REC.SY1STNBR; /* Style number*/
    FG0SW00.SY2CLRID = FF3REC.SY2CLRID; /* Color id*/
    FG0SW00.XDMCD = FF3REC.XDMCD; /* Dimension code*/
    FG0SW00.SY2CLRAB = FF3REC.SY2CLRAB; /* Color abbreviation*/
    FG0SW01.FG0SW1SD[FG0SWIXM] = FF3REC.SY2FDSMO; /* 1st Dom sales mo*/
    FG0SW01.FG0SWCOD[FG0SWIXM] = FF3REC.SY2PDCMO; /* Proj. C/O mo*/
    FG0SW01.FG0SWDES[FG0SWIXM] = FG0SW00.FG0SWDES;
    FG0SW01.FG0SWGFL[FG0SWIXM] = "N"; /* style group flag*/
    ;
    /* ------------------------------------------------------------*/
     /* Save the earliest projected intro. date and latest closeout*/
     /* date.*/
    /* ------------------------------------------------------------*/
    ;
    if (FF3REC.SY2FDSMO < FG0SW00.FG0SW1SD /* 1st DOM sls month is earlier*/
     || FG0SW00.FG0SW1SD == 0)             /* or no date in work area*/
      ;
      FG0SW00.FG0SW1SD = FF3REC.SY2FDSMO;
                                   /* Save the earlier intro mo*/
      ;
    end
    ;
    if (FF3REC.SY2PDCMO > FG0SW00.FG0SWCOD) /* Get the latest closeout date*/
      ;
      FG0SW00.FG0SWCOD = FF3REC.SY2PDCMO; /* Proj. closeout month*/
      ;
    end
    ;
    if (FFWREC.YSMXDV == "10") /* Domestic*/
      ;
      FG0S160(); /* Access DFCAST.VWSMTH01 table*/
      ;
      /* ---------------------------------------------------------*/
        /* If no worksheet for the specific style color, subtract*/
        /* the subscipt by 1.*/
      /* ---------------------------------------------------------*/
      ;
      if (FG0SW00.FG0SWEXT == "N") /* Indicate no worksheet exists*/
        ;
        if (FG0SW00.FG0SWIXM != 1) /* Not the 1st row*/
          ;
          FG0SW01.FG0SWSTY[FG0SWIXM] = " "; /* Clear the style fld*/
          FG0SW01.FG0SWDES[FG0SWIXM] = " "; /* Clear the desc fld*/
          ;
        end
        ;
      else
        ;
        FG0SS06(); /* Calculate grand totals for style*/
        FG0SW00.FG0SWIXM = FG0SW00.FG0SWIXM + 1;
        ;
      end
      ;
    else
      ;
      FG0S170(); /* Access DFCAST.VMSTY001 table*/
      ;
      ;
      /* ---------------------------------------------------------*/
        /* If no master record for the specific style color, subtract*/
        /* the subscipt by 1.*/
      /* ---------------------------------------------------------*/
      ;
      if (FG0SW00.FG0SWEXT == "N") /* Indicate no worksheet exists*/
        ;
        FG0SW01.FG0SWSTY[FG0SWIXM] = " "; /* Clear the style fld*/
        FG0SW01.FG0SWDES[FG0SWIXM] = " "; /* Clear the desc fld*/
        ;
        if (FG0SW00.FG0SWIXM > 1) /* Not the 1st row*/
          ;
          /* next sentence*/
          ;
        else
          ;
          if (FG0SW00.TA5TSQIX > 0)
            TA5REC.TA5TSQIX = FG0SW00.TA5TSQIX;
            FG0SS04(); /* Read in previous page*/
            ;
            FG0SW00.FG0SWIXM = 14;
            ;
            if (FG0SW01.FG0SWGFL[FG0SWIXM] == "Y")
              FG0SW01.FG0SWSTY[FG0SWIXM] = " ";
                                   /* Clear the style fld*/
              FG0SW01.FG0SWDES[FG0SWIXM] = " "; /* Clear the desc fld*/
              FG0SW01.FG0SWGFL[FG0SWIXM] = " ";
                                   /* Clear grp line flag*/
              FG0SS03(); /* Update tsq page*/
            end
            ;
            FG0SW00.SYBSTGNB = " "; /* Clear the current stygrp*/
            FG0SW00.FG0SWBMO = FG0SW01.FG0SWBMO; /* Save begin mo*/
            FG0SW00.FG0SWEMO = FG0SW01.FG0SWEMO; /* Save end mo*/
            FG0SW00.FG0SWTGT = FG0SW01.FG0SWTGT; /* Save target*/
            FG0SW00.FFCDMIND = FG0SW01.FFCDMIND; /* Save dmd ind*/
            ;
            set FG0SW01 empty; /* Clear tsq work area*/
            ;
            FG0SW01.FG0SWBMO = FG0SW00.FG0SWBMO; /* restore begin mo*/
            FG0SW01.FG0SWEMO = FG0SW00.FG0SWEMO; /* restore end mo*/
            FG0SW01.FG0SWTGT = FG0SW00.FG0SWTGT; /* restore target*/
            FG0SW01.FFCDMIND = FG0SW00.FFCDMIND; /* restore dmd ind*/
            FG0SW00.FG0SWIXM = 1;
            ;
          end
          ;
        end
        ;
      else
        ;
   /* FG0SS06;                    /* Calculate subtotals & totals*/
        FG0SW00.FG0SWIXM = FG0SW00.FG0SWIXM + 1;
        ;
      end
      ;
    end
    ;
    if (FG0SW00.FG0SWIXM > 14)
      ;
      FG0SS01(); /* Accumulate the style group total*/
      ;
      FG0S190(); /* Add page to temporary storage*/
      ;
    end
    ;
  end
  ;
end // end FG0SS07

// Process total fields
Function FG0SS08()
  FG0SW01.FG0SWSUB[FG0SWIXM] = FG0SW00.FG0SWTSB[FG0SWIXM];
  FFXREC.FFXNUMB = FG0SW00.FG0SWTSB[FG0SWIXM];
  XSFFS10();
                                   /* Convert the subtotal from NUM to CHAR*/
  FG0SW01.FG0SMSUB[FG0SWIXM] = FFXREC.FFXCHAR;
  ;
  FG0SM001.FG0SMSUB[FG0SWIXM] = FG0SW01.FG0SMSUB[FG0SWIXM];
  FG0SM001.FG0SMSHD[1] = "SUB";
  FG0SM001.FG0SMSHD[2] = "TOTAL";
  set FG0SM001.FG0SMSHD[1] skip; /* Visible*/
  set FG0SM001.FG0SMSHD[2] skip; /* Visible*/
  ;
  FG0SW00.FG0SW-NEXT = "Y"; /* next season*/
  ;
  FG0SS10(); /* process grand total*/
end // end FG0SS08

// Unprotect the qty fields
Function FG0SS09()
  if (FG0SW00.FG0SWIXF <= FG0SW00.FG0SWIXE) /* Within the page*/
    if (FG0SW00.FG0SWIXN > FG0SW00.FG0SWREM)
      set FG0SM001.FG0SMFCS[FG0SWIXF] initialAttributes; /* Dark*/
    else
      if (FG0SW00.FG0SWIXN <= FG0SW00.FG0SWREM)
        if (FG0SW01.FG0SWDES[FG0SWIXM] != "   TOTAL")
          set FG0SM001.FG0SMFCS[FG0SWIXF] normal; /* Unprotected*/
        else
          set FG0SM001.FG0SMFCS[FG0SWIXF] skip; /* visible*/
        end
      else
        set FG0SM001.FG0SMFCS[FG0SWIXF] initialAttributes; /* Dark*/
      end
    end
  end
  ;
end // end FG0SS09

// Calc grand tot for each style
Function FG0SS10()
   /* ---------------------------------------------------*/
      /* Calculate the grand total for each style color.*/
   /* ---------------------------------------------------*/
  ;
  FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXM - 1;
  FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF * 12 + 1;
  FG0SW00.FG0SWIXE = FG0SW00.FG0SWIXF + 11;
  ;
  FG0SW00.FG0SWTGD = 0; /* Initialize the temp grand total area*/
  ;
  while (FG0SW00.FG0SWIXF <= FG0SW00.FG0SWIXE) /* Until end the row*/
    ;
    FG0SW00.FG0SWTGD = FG0SW00.FG0SWTGD + FG0SW01.FG0SWFCS[FG0SWIXF];
    ;
    FG0SW00.FG0SWIXF = FG0SW00.FG0SWIXF + 1;
    ;
  end
  ;
  FG0SW01.FG0SWGND[FG0SWIXM] = FG0SW00.FG0SWTGD;
  FFXREC.FFXNUMB = FG0SW00.FG0SWTGD;
  XSFFS10();
                                   /* Convert the subtotal from NUM to CHAR*/
  FG0SW01.FG0SMGND[FG0SWIXM] = FFXREC.FFXCHAR;
  ;
  FG0SM001.FG0SMGND[FG0SWIXM] = FG0SW01.FG0SMGND[FG0SWIXM];
  set FG0SM001.FG0SMGND[FG0SWIXM] skip; /* Visible*/
  ;
  FG0SM001.FG0SMGHD[1] = "GRAND";
  FG0SM001.FG0SMGHD[2] = "TOTAL";
  set FG0SM001.FG0SMGHD[1] skip; /* Visible*/
  set FG0SM001.FG0SMGHD[2] skip; /* Visible*/
  ;
end // end FG0SS10

// Convert date to format ccyymm
Function FG0SS35()
  set FFZREC empty; /* Clear storage row*/
  ;
  FFZREC.FFZBYYMM = FG0SW01.FG0SWBMO; /* Beginning month*/
  FFZREC.FFZEYYMM = FG0SW01.FG0SWEMO; /* Ending month*/
  ;
  XSFFS30();
  ;
  FG0SW00.FG0SWWBD = FFZREC.FFZBEGMO; /* beg month - ccyymm*/
  FG0SW00.FG0SWWED = FFZREC.FFZENDMO; /* end month - ccyymm*/
  ;
end // end FG0SS35

// Obtain default season end mon
Function FG0SS40()
  if (FFZREC.FFZNUMMO == 12) /* check if 12 months in the reqstd range*/
    ;
    FG0SS41(); /* obtain season begin month*/
    FG0SW00.FG0SWWDT = FF2REC.FF2SEASN[1]; /* season begin month*/
    ;
    if (FG0SW00.FG0SWBYM == FG0SW00.FG0SWWYM) /* begin month yymm match*/
      ;
      FG0SS42(); /* calculate season end month*/
      ;
    else
      if (FG0SW00.FG0SWBMM == FG0SW00.FG0SWWMM) /* begin month mm match*/
        ;
        FG0SS44(); /* calculate season end mo*/
        ;
      end
    end
  end
  ;
end // end FG0SS40

// obtain sesn beg mo from VFFXRF
Function FG0SS41()
   /* ------------------------------------------------------------*/
   /* Select set on dfcast.vffxrf01 table.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* load ff2rec record - dfcast.vffxrf01*/
   /* ------------------------------------------------------------*/
  ;
  set FF2REC empty; /* Clear row storage area*/
  ;
  FF2REC.YSMXDV = "10"; /* div grp code*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* product type group*/
  FF2REC.XPCCD = FFWREC.XPCCD; /* product category*/
  ;
   /* ------------------------------------------------------------*/
   /* select set dfcast.vffxrf01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
    return;
    ;
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S41"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S2 ON DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0SS41

// Calc sesn end mo for same year
Function FG0SS42()
  ;
   /* --------------------------------------*/
   /* calculate no of season*/
   /* --------------------------------------*/
  ;
  FG0SW00.FG0SWIXW = 4;
  ;
  while (FG0SW00.FG0SWIXW > 0)
    ;
    if (FF2REC.FF2SEASN[FG0SWIXW] == 0)
      FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW - 1;
    else
      FG0SW00.FG0SWSMO[FG0SWIXW] = FG0SW00.FG0SWEYM; /* sesn end mo*/
      FG0SW00.FG0SWSEM[FG0SWIXW] = FG0SW00.FG0SWEMM;
      FG0SM001.FG0SMSEM[FG0SWIXW] = FG0SW00.FG0SWEMM;
      FG0SW00.FG0SWNSS = FG0SW00.FG0SWIXW; /* no. of seasons*/
      FG0SW00.FG0SWIXW = 0; /* force out the loop*/
    end
    ;
  end
  ;
   /* --------------------------------------*/
   /* calculate season end month*/
   /* --------------------------------------*/
  ;
  FG0SW00.FG0SWIXW = FG0SW00.FG0SWNSS;
  ;
  while (FG0SW00.FG0SWIXW > 1)
    ;
    FG0SW00.FG0SWWDT = FF2REC.FF2SEASN[FG0SWIXW];
    FG0SS43(); /* get end month of the season*/
    FG0SW00.FG0SWIXN = FG0SW00.FG0SWIXW - 1;
    FG0SW00.FG0SWSMO[FG0SWIXN] = FG0SW00.FG0SWWDT;
    FG0SW00.FG0SWSEM[FG0SWIXN] = FG0SW00.FG0SWWMM;
    FG0SM001.FG0SMSEM[FG0SWIXN] = FG0SW00.FG0SWWMM;
    FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW - 1;
    ;
  end
end // end FG0SS42

// Calc end mo from sesn beg mo
Function FG0SS43()
  ;
  if (FG0SW00.FG0SWWMM == 1)
    FG0SW00.FG0SWWMM = 12;
    if (FG0SW00.FG0SWWYY == 0)
      FG0SW00.FG0SWWYY = 99;
      FG0SW00.FG0SWWCC = FG0SWWCC - 1;
    else
      FG0SW00.FG0SWWYY = FG0SW00.FG0SWWYY - 1;
    end
  else
    FG0SW00.FG0SWWMM = FG0SW00.FG0SWWMM - 1;
  end
  ;
end // end FG0SS43

// Calc sesn end mo for diff year
Function FG0SS44()
  ;
   /* --------------------------------------*/
   /* calculate no of season*/
   /* --------------------------------------*/
  ;
  FG0SW00.FG0SWIXW = 4;
  ;
  while (FG0SW00.FG0SWIXW > 0)
    ;
    if (FF2REC.FF2SEASN[FG0SWIXW] == 0)
      FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW - 1;
    else
      FG0SW00.FG0SWSMO[FG0SWIXW] = FG0SW00.FG0SWEYM; /* sesn end mo*/
      FG0SW00.FG0SWSEM[FG0SWIXW] = FG0SW00.FG0SWEMM;
      FG0SM001.FG0SMSEM[FG0SWIXW] = FG0SW00.FG0SWEMM;
      FG0SW00.FG0SWNSS = FG0SW00.FG0SWIXW; /* no. of seasons*/
      FG0SW00.FG0SWIXW = 0; /* force out the loop*/
    end
    ;
  end
  ;
   /* --------------------------------------*/
   /* calculate season end month*/
   /* --------------------------------------*/
  ;
  FG0SW00.FG0SWIXW = FG0SW00.FG0SWNSS;
  ;
  while (FG0SW00.FG0SWIXW > 1)
    ;
    FG0SW00.FG0SWWDT = FF2REC.FF2SEASN[FG0SWIXW];
    FG0SS45(); /* get end month of the season*/
    FG0SW00.FG0SWIXN = FG0SW00.FG0SWIXW - 1;
    FG0SW00.FG0SWSMO[FG0SWIXN] = FG0SW00.FG0SWWDT;
    FG0SW00.FG0SWSEM[FG0SWIXN] = FG0SW00.FG0SWWMM;
    FG0SM001.FG0SMSEM[FG0SWIXN] = FG0SW00.FG0SWWMM;
    FG0SW00.FG0SWIXW = FG0SW00.FG0SWIXW - 1;
    ;
  end
end // end FG0SS44

// Calc end mo from sesn beg mo
Function FG0SS45()
   /* -------------------------------------------------------------------*/
   /* Plug in the ccyy from requested range and use the same month from*/
   /* the dfcast.vffxrf01 table.*/
   /* -------------------------------------------------------------------*/
  ;
  if (FG0SW00.FG0SWBMM <= FG0SW00.FG0SWWMM) /* same year*/
    ;
    FG0SW00.FG0SWWYY = FG0SW00.FG0SWBYY; /* year*/
    FG0SW00.FG0SWWCC = FG0SW00.FG0SWBCC; /* century*/
    ;
  else /* different year*/
    ;
    if (FG0SW00.FG0SWBYY == 99)
      FG0SW00.FG0SWWYY = 0; /* year*/
      FG0SW00.FG0SWWCC = FG0SW00.FG0SWBCC + 1; /* century*/
    else
      FG0SW00.FG0SWWYY = FG0SW00.FG0SWBYY + 1; /* year*/
      FG0SW00.FG0SWWCC = FG0SW00.FG0SWBCC; /* century*/
    end
    ;
  end
  ;
  if (FG0SW00.FG0SWWMM == 1)
    FG0SW00.FG0SWWMM = 12;
    if (FG0SW00.FG0SWWYY == 0)
      FG0SW00.FG0SWWYY = 99;
      FG0SW00.FG0SWWCC = FG0SWWCC - 1;
    else
      FG0SW00.FG0SWWYY = FG0SW00.FG0SWWYY - 1;
    end
  else
    FG0SW00.FG0SWWMM = FG0SW00.FG0SWWMM - 1;
  end
end // end FG0SS45

// Cal mos in each season
Function FG0SS50()
  FG0SW00.FG0SWWDT = FG0SW00.FG0SWSMO[FG0SWIXW]; /* sesn end mo*/
  ;
  if (FG0SW00.FG0SWIXW == 1) /* 1st season*/
    ;
    if (FG0SW00.FG0SWWMM >= FG0SW00.FG0SWBMM) /* in the same year*/
      FG0SW00.FG0SWSIN[FG0SWIXW] = FG0SW00.FG0SWWDT -                                    FG0SW00.FG0SWWBD + 1;
    else /* in the different year*/
      FG0SW00.FG0SWSIN[FG0SWIXW] = FG0SW00.FG0SWWMM + 12 -                                    FG0SW00.FG0SWBMM + 1;
    end
    ;
  else /* other season*/
    ;
    FG0SW00.FG0SWIXN = FG0SW00.FG0SWIXW - 1;
    FG0SW00.FG0SW-WDT1 = FG0SW00.FG0SWSMO[FG0SWIXN]; /* prev sesn mo*/
    if (FG0SW00.FG0SWWMM > FG0SW00.FG0SW-WMM1) /* in the same year*/
      FG0SW00.FG0SWSIN[FG0SWIXW] = FG0SW00.FG0SWWMM - FG0SW00.FG0SW-WMM1;
    else /* in the different year*/
      FG0SW00.FG0SWSIN[FG0SWIXW] = FG0SW00.FG0SWWMM + 12 -                                    FG0SW00.FG0SW-WMM1;
    end
    ;
  end
  ;
end // end FG0SS50

// Verify entered end month
Function FG0SS60()
  ;
   /* --------------------------------------------------------*/
   /* beginning date and ending date are in the same year*/
   /* --------------------------------------------------------*/
  ;
  if (FG0SW00.FG0SWBYY == FG0SW00.FG0SWEYY) /* beg year = end year*/
    ;
    if (FG0SM001.FG0SMSEM[FG0SWIXW] >= FG0SW00.FG0SWBMM /* >= beg month*/
     && FG0SM001.FG0SMSEM[FG0SWIXW] <= FG0SW00.FG0SWEMM) /* <= end month*/
      ;
      FG0SW00.FG0SWWCC = FG0SW00.FG0SWBCC; /* plug in centry*/
      FG0SW00.FG0SWWYY = FG0SW00.FG0SWBYY; /* plug in year*/
      FG0SW00.FG0SWWMM = FG0SM001.FG0SMSEM[FG0SWIXW]; /* plug in month*/
      ;
    else
      ;
      FFWREC.XXXMODID = "S60"; /* module identification*/
      converseLib.validationFailed(010); /* invalid data*/
      set FG0SM001.FG0SMSEM[FG0SWIXW] cursor, bold;
      ;
    end
    ;
  else
    ;
      /* --------------------------------------------------------*/
      /* beginning date and ending date are in the different years*/
      /* --------------------------------------------------------*/
    ;
      /* season end month falls in the same year as begin month*/
    ;
    if (FG0SM001.FG0SMSEM[FG0SWIXW] >= FG0SW00.FG0SWBMM) /* >= beg mo*/
      ;
      FG0SW00.FG0SWWCC = FG0SW00.FG0SWBCC; /* plug in centry*/
      FG0SW00.FG0SWWYY = FG0SW00.FG0SWBYY; /* plug in year*/
      FG0SW00.FG0SWWMM = FG0SM001.FG0SMSEM[FG0SWIXW]; /* plug in month*/
    else
      ;
        /* * season end month falls in the same year as end month*/
      ;
      if (FG0SM001.FG0SMSEM[FG0SWIXW] <= FG0SW00.FG0SWEMM) /* <= end mo*/
        FG0SW00.FG0SWWCC = FG0SW00.FG0SWECC; /* plug in centry*/
        FG0SW00.FG0SWWYY = FG0SW00.FG0SWEYY; /* plug in year*/
        FG0SW00.FG0SWWMM = FG0SM001.FG0SMSEM[FG0SWIXW]; /* plug in month*/
      else
        ;
        FFWREC.XXXMODID = "S60"; /* module identification*/
        converseLib.validationFailed(010); /* invalid data*/
        set FG0SM001.FG0SMSEM[FG0SWIXW] cursor, bold;
        ;
      end
      ;
    end
    ;
  end
  ;
  if (converseVar.validationMsgNum == 0)
    FG0SW00.FG0SWSMO[FG0SWIXW] = FG0SW00.FG0SWWDT; /* save ccyymm*/
  end
  ;
end // end FG0SS60

//*** RECORD=FG0SW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FG0SW00 type basicRecord
  10 FG0SWIND FG0SWIND ; 
  10 FG0SWIXM FG0SWIXM ; 
  10 FG0SWIXW FG0SWIXW ; 
  10 FG0SWIXF FG0SWIXF ; 
  10 FG0SWIXE FG0SWIXE ; 
  10 FG0SWIXT FG0SWIXT ; 
  10 FG0SWIXN FG0SWIXN ; 
  10 FG0SWCLM FG0SWCLM ; 
  10 FG0SWSNX FG0SWSNX ; 
  10 FG0SWPGX FG0SWPGX ; 
  10 FG0SWCR1 FG0SWCR1 ; 
  10 FG0SWCR2 FG0SWCR2 ; 
  10 FG0SWCR3 FG0SWCR3 ; 
  10 FG0SWCR4 FG0SWCR4 ; 
  10 FG0SWSWF FG0SWSWF ; 
  10 FG0SWSWO FG0SWSWO ; 
  10 FG0SWSWR FG0SWSWR ; 
  10 FG0SWSWU FG0SWSWU ; 
  10 FG0SWSW1 FG0SWSW1 ; 
  10 FG0SWSWL FG0SWSWL ; 
  10 FG0SWEXT FG0SWEXT ; 
  10 FG0SWACT FG0SWACT ; 
  10 FG0SWMST FG0SWMST ; 
  10 FG0SWERR FG0SWERR ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 FG0SWPAG FG0SWPAG ; 
  10 FG0SWNPG FG0SWNPG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FG0SWRIG FG0SWRIG ; 
  10 FG0SWLEF FG0SWLEF ; 
  10 FG0SWEND FG0SWEND ; 
  10 FG0SWGQT FG0SWGQT ; 
  10 FG0SWTSB FG0SWTSB [14] ; 
  10 FG0SWTGD FG0SWTGD ; 
  10 FG0SWTOT FG0SWTOT ; 
  10 FG0SWGDT FG0SWGDT [12] ; 
  10 FG0SWFCS FG0SWFCS ; 
  10 FG0SWDAT FG0SWDAT ; 
    15 FG0SWDCC FG0SWDCC ; 
    15 FG0SWDYM FG0SWDYM ; 
      20 FG0SWDYY FG0SWDYY ; 
      20 FG0SWDMM FG0SWDMM ; 
  10 FG0SWHDG FG0SWHDG [12] ; 
    15 FG0SWHCC FG0SWHCC ; 
    15 FG0SWHYM FG0SWHYM ; 
  10 FG0SMMOS FG0SMMOS ; 
  10 FF6SLFCT FF6SLFCT ; 
  10 FG0SWVAR FG0SWVAR ; 
  10 FG0SWMVR FG0SWMVR [12] ; 
  10 FG0SW1SD FG0SW1SD ; 
    15 FG0SW1SC FG0SW1SC ; 
    15 FG0SW1SM FG0SW1SM ; 
  10 FG0SWCOD FG0SWCOD ; 
    15 FG0SWCOC FG0SWCOC ; 
    15 FG0SWCOM FG0SWCOM ; 
  10 SYBSTGNB SYBSTGNB ; 
  10 FG0SWDES FG0SWDES ; 
    15 SY2CLRID SY2CLRID ; 
    15 * char(1) ; 
    15 XDMCD XDMCD ; 
    15 * char(1) ; 
    15 SY2CLRAB SY2CLRAB ; 
  10 FG0SWMTL FG0SWMTL [12] ; 
  10 FG0SWMTF FG0SWMTF [12] ; 
  10 FG0SWBMO FG0SWBMO ; 
  10 FG0SWWBD FG0SWWBD ; 
    15 * num(3) ; 
    15 FG0SWBCC FG0SWBCC ; 
    15 FG0SWBYM FG0SWBYM ; 
      20 FG0SWBYY FG0SWBYY ; 
      20 FG0SWBMM FG0SWBMM ; 
  10 FG0SWEMO FG0SWEMO ; 
  10 FG0SWWED FG0SWWED ; 
    15 * num(3) ; 
    15 FG0SWECC FG0SWECC ; 
    15 FG0SWEYM FG0SWEYM ; 
      20 FG0SWEYY FG0SWEYY ; 
      20 FG0SWEMM FG0SWEMM ; 
  10 FG0SWWDT FG0SWWDT ; 
    15 * num(3) ; 
    15 FG0SWWCC FG0SWWCC ; 
    15 FG0SWWYM FG0SWWYM ; 
      20 FG0SWWYY FG0SWWYY ; 
      20 FG0SWWMM FG0SWWMM ; 
  10 FG0SW-WDT1 FG0SW-WDT1 ; 
    15 * num(3) ; 
    15 FG0SW-WCC1 FG0SW-WCC1 ; 
    15 FG0SW-WYM1 FG0SW-WYM1 ; 
      20 FG0SW-WYY1 FG0SW-WYY1 ; 
      20 FG0SW-WMM1 FG0SW-WMM1 ; 
  10 FG0SWTGT FG0SWTGT ; 
  10 FFCDMIND FFCDMIND ; 
  10 FG0SW-NEXT FG0SW-NEXT ; 
  10 FG0SW-MON-LEFT FG0SW-MON-LEFT [10] ; 
  10 FG0SW-PAGS FG0SW-PAGS [10] ; 
  10 FG0SWREM FG0SWREM ; 
  10 FG0SWNSS FG0SWNSS ; 
  10 FG0SWSIN FG0SWSIN [4] ; 
  10 FG0SWSEM FG0SWSEM [4] ; 
  10 FG0SWSMO FG0SWSMO [4] ; 
  10 FG0SW-END-COL FG0SW-END-COL ; 
end // end FG0SW00

//*** RECORD=FG0SW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FG0SW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(3350) ; 
    10 FG0SWBMO FG0SWBMO ; 
      15 FG0SWBCC FG0SWBCC ; 
      15 FG0SMBMO FG0SMBMO ; 
    10 FG0SWEMO FG0SWEMO ; 
      15 FG0SWECC FG0SWECC ; 
      15 FG0SMEMO FG0SMEMO ; 
    10 FG0SWTGT FG0SWTGT ; 
    10 FFCDMIND FFCDMIND ; 
    10 FG0SWSTY FG0SWSTY [14] ; 
    10 FG0SWDES FG0SWDES [14] ; 
    10 FG0SW1SD FG0SW1SD [14] ; 
    10 FG0SWCOD FG0SWCOD [14] ; 
    10 FG0SWGFL FG0SWGFL [14] ; 
    10 FG0SMFCS FG0SMFCS [180] ; 
    10 FG0SWFCH FG0SWFCH [180] ; 
    10 FG0SWFCS FG0SWFCS [180] ; 
    10 FG0SWCNT FG0SWCNT [180] ; 
    10 FG0SMSUB FG0SMSUB [14] ; 
    10 FG0SWSUB FG0SWSUB [14] ; 
    10 FG0SMGND FG0SMGND [14] ; 
    10 FG0SWGND FG0SWGND [14] ; 
    10 FG0SWSCH FG0SWSCH [14] ; 
end // end FG0SW01

//*** RECORD=FG0SW02 ****
// ---------------------------------------------------------
// Parameters passed to FF650D - Update Month Master Tables.
// ---------------------------------------------------------
// ***********************
Record FG0SW02 type basicRecord
  5 TARJCL TARJCL ; 
    10 XPCCD XPCCD ; 
    10 YPGCD YPGCD ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 * char(59) ; 
end // end FG0SW02

// Beginning date of the range
DataItem FG0SMBMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Ending date of the range
DataItem FG0SMEMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Forecast enter & display field
DataItem FG0SMFCS char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Grand total
DataItem FG0SMGND char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// No. of month in season
DataItem FG0SMMOS num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Subtotal
DataItem FG0SMSUB char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// End column
DataItem FG0SW-END-COL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Month left flag
DataItem FG0SW-MON-LEFT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Next season flag
DataItem FG0SW-NEXT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Processing season of the page
DataItem FG0SW-PAGS num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century
DataItem FG0SW-WCC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0SW-WDT1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem FG0SW-WMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year/month
DataItem FG0SW-WYM1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem FG0SW-WYY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century
DataItem FG0SW1SC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First domestic sales date
DataItem FG0SW1SD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First domestic sales month
DataItem FG0SW1SM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Product active flag
DataItem FG0SWACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Century
DataItem FG0SWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem FG0SWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Beginning date of the range
DataItem FG0SWBMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// year/month
DataItem FG0SWBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem FG0SWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for map fields
DataItem FG0SWCLM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Change count
DataItem FG0SWCNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century
DataItem FG0SWCOC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Projected dom closeout date
DataItem FG0SWCOD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Projected dom closeout month
DataItem FG0SWCOM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of cursor for VFFXRF01
DataItem FG0SWCR1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor for VFFSTY01
DataItem FG0SWCR2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor for VMSTY001
DataItem FG0SWCR3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of cursor for VWSMTH01
DataItem FG0SWCR4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Date work area
DataItem FG0SWDAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century work area
DataItem FG0SWDCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style group/style color desc
DataItem FG0SWDES char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG0SWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end
// YYMM work area
DataItem FG0SWDYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YY work area
DataItem FG0SWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century
DataItem FG0SWECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem FG0SWEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending date of the range
DataItem FG0SWEMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// End of range index
DataItem FG0SWEND num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Error occured switch
DataItem FG0SWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Existence flag
DataItem FG0SWEXT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year/month
DataItem FG0SWEYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem FG0SWEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Forecast changed flag
DataItem FG0SWFCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Fcst field work area
DataItem FG0SWFCS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cat grand total for each month
DataItem FG0SWGDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style group flag
DataItem FG0SWGFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Grand total
DataItem FG0SWGND int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total qty of grand total field
DataItem FG0SWGQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Heading century work area
DataItem FG0SWHCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Heading work area
DataItem FG0SWHDG num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Heading YYMM work area
DataItem FG0SWHYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Indicator of last disp row
DataItem FG0SWIND smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FG0SWIXE smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FG0SWIXF smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FG0SWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FG0SWIXN smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FG0SWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem FG0SWIXW smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Scroll right index
DataItem FG0SWLEF num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Master fcst saved switch
DataItem FG0SWMST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Month total change flag
DataItem FG0SWMTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Month total work area
DataItem FG0SWMTL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Monthly variance for the fcsts
DataItem FG0SWMVR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Next TSQ page number
DataItem FG0SWNPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// No. of seasons
DataItem FG0SWNSS num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Curr TSQ page for PF15 process
DataItem FG0SWPAG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page index
DataItem FG0SWPGX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Remaining months
DataItem FG0SWREM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Scroll left index
DataItem FG0SWRIG num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style total change flag
DataItem FG0SWSCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season end month - mm
DataItem FG0SWSEM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// No. of months in each season
DataItem FG0SWSIN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season end month - ccyymm
DataItem FG0SWSMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Season index
DataItem FG0SWSNX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style group/style number
DataItem FG0SWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Subtot
DataItem FG0SWSUB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First time through switch
DataItem FG0SWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FG0SWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Last row switch
DataItem FG0SWSWL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data obtained switch
DataItem FG0SWSWO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FG0SWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem FG0SWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Grand total work area
DataItem FG0SWTGD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FF_FCST_TRGT
DataItem FG0SWTGT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Total field work area
DataItem FG0SWTOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Subtotal work area
DataItem FG0SWTSB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Variance between old & new fcs
DataItem FG0SWVAR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0SWWBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century
DataItem FG0SWWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0SWWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0SWWED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem FG0SWWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year/month
DataItem FG0SWWYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem FG0SWWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

