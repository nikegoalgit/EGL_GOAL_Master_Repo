package fg0y;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPFF001;
import corpcom3.XPXPL01;
import corpcom3.XPXX001;
import corpcom4.XSFFS01;
import corpcom4.XSFFS10;
import corpcom4.XSFFS35;
import corpcom4.XSFFS51;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XCTCD;
import corpx1.XDVCD;
import corpx1.XGPCD;
import corpx1.XPLTBL;
import corpx2.XPLCD;
import corpx2.XPLKEY;
import corpx2.XPLSDESC;
import ff.common.FF1REC;
import ff.common.FF2REC;
import ff.common.FF5REC;
import ff.common.FF6DMFCT;
import ff.common.FFABCIND;
import ff.common.FFAREC;
import ff.common.FFBBCPCT;
import ff.common.FFBREC;
import ff.common.FFFREC;
import ff.common.FFWREC;
import ff.common.FFXREC;
import ff.common.FFZBCC;
import ff.common.FFZBEGMO;
import ff.common.FFZBYYMM;
import ff.common.FFZECC;
import ff.common.FFZENDMO;
import ff.common.FFZEYYMM;
import ff.common.FFZREC;
import fh.common.FH4REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TAEREC;
//*** PROGRAM=FG0Y ****
// This application provides the user with the ability to
// create a demand index for b-grade and closeout line by refer
// -ring to the historical data. The user can pick a specific
// historical demand index(1 year ago, 2 years ago or 3 years
// ago) for the given range and product line.
// 
// The b-grade and closeout demand index is the percentage of
// the monthly b-grade demand plus closeout demand quantity
// over the total b-grade demand plus closeout demand quantity
// of the required range.
// 
// The monthly quantities and indices will be display. if the
// user created indices didn't add up to 100, then the variance
// will be shown on the top of the screen. the quantities are
// all in thousand.
// 
// the user may exit to any allowed application, via FAST PATH
// or PF key.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          07/26/89  jjuch   New application.
// FF1016   07/31/90  JJUCH   Disallowed to fcst current main
//                            buy month and all prior months.
// FF1058   10/08/90  trober  allow to un-select a range.
// Fix      01/28/91  JJUCH   Allow to change date or line code
// FF1073   02/11/91  JJUCH   Consider life cycle '20' and
//                            quality '02' as B-grade.
// Fix      06/01/92  JJUCH   Fixed the problem of creating
//                            duplicate rows.
//          09/09/93  JJUCH   Convert to CSP V4.1 version.
//          09/15/94  JALLE1  Fix XPL desc on map.
// FF175    12/05/96  DSMITH  Changed date range fill character
//                            to '0' and included century in
//                            FG0Y210, 400, 510, 600 - also
//                            changed 511 to check for year =
//                            00.
// *********************
Program FG0Y type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF5REC FF5REC; // record
  FFAREC FFAREC; // record
  FFBREC FFBREC; // record
  FFFREC FFFREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFZREC FFZREC; // record
  FG0YW00 FG0YW00; // record
  FG0YW01 FG0YW01; // record
  FH4REC FH4REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPLTBL {deleteAfterUse = yes}; // table
  use FG0YM.FG0YM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FFFREC empty; /* Special function parameters*/
    set FG0YM001 initial; /* M001 input/output*/
    set FG0YW00 empty; /* Working storage*/
    set FG0YW01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* Date parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    FG0YW00.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    ;
     /* ---------------------------------------------------*/
     /* Clear unused fields*/
     /* ---------------------------------------------------*/
    ;
    FFWREC.YPGCD = " "; /* Clear type group code*/
    FFWREC.YPGABRV = " "; /* Clear type group abrv*/
    FFWREC.XPCCD = " "; /* Clear product category code*/
    FFWREC.XPCABRV = " "; /* Clear product category abrv*/
    FFWREC.SYBSTGNB = " "; /* Clear style group number*/
    FFWREC.SYBSTGNM = " "; /* Clear style group name*/
    FFWREC.SY1STNBR = " "; /* Clear style number*/
    FFWREC.SY2CLRID = " "; /* Clear color id*/
    FFWREC.XDMCD = " "; /* Clear dimension code*/
    FFWREC.SY1SSTNM = " "; /* Clear short style name*/
    FFWREC.SY2CLRAB = " "; /* Clear color abrv*/
    FFWREC.XDMABRV = " "; /* Clear dimension abrv*/
    FFWREC.ZRGCD = " "; /* Clear region code*/
    FFWREC.ZRGABRV = " "; /* Clear region abrv*/
    FFWREC.XCTCD = " "; /* Clear country code*/
    FFWREC.XCTABRV = " "; /* Clear country abrv*/
    ;
    FG0YW00.XCTCD = "USA "; /* Country code*/
    FG0YW00.FG0YWTYP[1] = "01"; /* Type group code*/
    FG0YW00.FG0YWTYP[2] = "02"; /* Type group code*/
    ;
    FG0YW01.FFZBEGMO = FFWREC.FFABEGMO; /* Beginning month*/
    FG0YW01.FFZENDMO = FFWREC.FFAENDMO; /* Ending month*/
    ;
    FG0YW00.FG0YWSWF = "Y"; /* Format data to display*/
    ;
    if (FFWREC.FFABEGMO > 0 /* Beginning month exist*/
     && FFWREC.FFAENDMO > 0 /* Ending month exist*/
     && FFWREC.XPLCD > "  ") /* Product line exist*/
      ;
      FG0YW00.FG0YWSWR = "Y"; /* Request for data switch*/
      ;
    else
      ;
      FG0YW00.FG0YWSWR = "N"; /* Request for data switch*/
      ;
    end
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0Y001; /* Converse the main process*/
    ;
    ;
    FG0Y001: FG0Y001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0Y001; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FG0Y

// Inquire/maintain a table row
Function FG0Y001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FG0Y100(); /* Obtain the data to display*/
  ;
  FG0Y200(); /* Format and display the map*/
  ;
  FG0Y300(); /* Check attention identifier*/
  ;
  FG0Y400(); /* Reset fields to normal intensity*/
  ;
  FG0Y500(); /* Verify the entered data*/
  ;
  FG0Y600(); /* Process valid input request*/
  ;
  ;
end // end FG0Y001

// Obtain the data to display
Function FG0Y100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0YW00.FG0YWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Prepare month heading.*/
   /* ------------------------------------------------------------*/
  ;
  FG0YS10();
  ;
   /* ------------------------------------------------------------*/
   /* Obtain the B-grade & Closeout indicator.*/
   /* ------------------------------------------------------------*/
  ;
  set FFAREC empty; /* Clear row storage area*/
  ;
  FFAREC.FFABEGMO = FG0YW01.FFZBEGMO; /* beginning month*/
  FFAREC.FFAENDMO = FG0YW01.FFZENDMO; /* ending month*/
  FFAREC.XPLCD = FFWREC.XPLCD; /* product line*/
  ;
  FG0YW00.FG0YWSWE = "N"; /* record found switch*/
  FG0Y110(); /* retrieve the indicator*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    ;
    FG0YW00.FG0YWSWE = "Y"; /* record found switch*/
    FG0YW00.FFABCIND = FFAREC.FFABCIND; /* save indicator*/
    ;
  end
  ;
  if (FG0YW00.FFABCIND != " ") /* B-grade & closeout indicator exist*/
    ;
    /* ------------------------------------------------------------*/
     /* Clear the row storage area, format the key and obtain the*/
     /* existing B-grade/Closeout indices.*/
    /* ------------------------------------------------------------*/
    ;
    FG0Y120(); /* select and open the cursor*/
    ;
    if (FG0YW00.FFABCIND == "1") /* 1 year ago*/
      ;
      FG0YW00.FG0YWIXM = FG0YW00.FG0YWIDX[1]; /* Month index*/
      FG0YW01.FG0YMSEL[1] = "S"; /* Selection field*/
      ;
    end
    ;
    if (FG0YW00.FFABCIND == "2") /* 2 year ago*/
      ;
      FG0YW00.FG0YWIXM = FG0YW00.FG0YWIDX[2]; /* Month index*/
      FG0YW01.FG0YMSEL[2] = "S"; /* Selection field*/
      ;
    end
    ;
    if (FG0YW00.FFABCIND == "3") /* 3 year ago*/
      ;
      FG0YW00.FG0YWIXM = FG0YW00.FG0YWIDX[3]; /* Month index*/
      FG0YW01.FG0YMSEL[3] = "S"; /* Selection field*/
      ;
    end
    ;
    if (FG0YW00.FFABCIND == "U") /* User created*/
      ;
      FG0YW00.FG0YWIXM = 1; /* Month index*/
      FG0YW01.FG0YMSEL[4] = "S"; /* Selection field*/
      ;
    end
    ;
    FG0YW00.FG0YWSWC = "N"; /* Initialize the end of cursor switch*/
    ;
    while (FG0YW00.FG0YWSWC == "N") /* Until end of the range*/
      ;
      FG0Y130(); /* Obtain the table row*/
      ;
      FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1; /* increment the index*/
    end
    ;
    FG0Y140(); /* Close the selected cursor*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Locate the current month to determine if it is in the*/
   /* require range or it is in the history part.*/
   /* (when forecast 2 year or 2 and half year out, the forecast*/
    /* of the current month becomes the history)*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01();
  ;
  if (XX0XW01.XX0XWCYM in FG0YW01.FG0YWFMO) /* Month in the range*/
    ;
    FG0YW00.FG0YWCSB = sysVar.arrayIndex; /* Save the current position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Process the range in the history (before current month)*/
   /* ------------------------------------------------------------*/
  ;
  FG0Y150(); /* Process history*/
  ;
   /* ------------------------------------------------------------*/
   /* Process the range starting from current month*/
   /* ------------------------------------------------------------*/
  ;
  FG0Y160(); /* Process current plus future*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the total quantity and indices for each history*/
   /* year.*/
   /* ------------------------------------------------------------*/
  ;
  FG0Y170(); /* Calculate total*/
  ;
  FG0Y180(); /* Calculate the indices*/
  ;
   /* ------------------------------------------------------------*/
   /* Calculate the variance and put it into display storage,*/
   /* if user created index exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0YW00.FFABCIND == "U") /* User created index exist*/
    ;
    FG0Y190(); /* Calculate the variance*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no error was found, indicate request for data complete.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* No error was found*/
    FG0YW00.FG0YWSWR = "N"; /* Request for data switch*/
  end
  ;
  ;
end // end FG0Y100

// Select bgrd & clsout indicator
Function FG0Y110()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3780" ("S ", SQLCA, FFAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "110"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFAREC.FFAKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0Y110

// Select and open for VRLMTH01
Function FG0Y120()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FFBREC empty; /* clear row storage area*/
  ;
  FFBREC.FFABEGMO = FG0YW01.FFZBEGMO; /* Beginning month*/
  FFBREC.FFAENDMO = FG0YW01.FFZENDMO; /* Ending month*/
  FFBREC.XPLCD = FFWREC.XPLCD; /* Product line*/
  ;
  FFFREC.FFFFUNCD = "S1"; /* I/O mod function code*/
  FFFREC.FFFBEGMO = FG0YW01.FFZBEGMO; /* BETWEEN starting month*/
  FFFREC.FFFENDMO = FG0YW01.FFZENDMO; /* BETWEEN ending month*/
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3790" (FFFREC, SQLCA, FFBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "120"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFBREC.FFBKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0Y120

// Fetch the next row in cursor
Function FG0Y130()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3790" ("N1", SQLCA, FFBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      ;
      if (FG0YW00.FFABCIND == "U")
        ;
        FG0YW00.FG0YWSWX = "Y"; /* User create index exist, flag on*/
        ;
        FG0YW01.FG0YMPCT[FG0YWIXM] = FFBREC.FFBBCPCT; /* User created*/
        ;
      else
        ;
        FG0YW01.FFBBCPCT[FG0YWIXM] = FFBREC.FFBBCPCT; /* History*/
        ;
      end
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      FG0YW00.FG0YWSWC = "Y"; /* End of table*/
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "130"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFBREC.FFBKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0Y130

// Close cursor for VRLMTH01
Function FG0Y140()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3790" ("C1", SQLCA, FFBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "140"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLMTH01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0Y140

// Process history
Function FG0Y150()
   /* ------------------------------------------------------------*/
   /* Obtain the B-grade order quantity from demand history table*/
   /* ------------------------------------------------------------*/
  ;
  FH4REC.XPRCD = FG0YW00.FG0YWTYP[1];
  FG0Y151();
  FH4REC.XPRCD = FG0YW00.FG0YWTYP[2];
  FG0Y151();
  ;
   /* ------------------------------------------------------------*/
   /* Obtain the Closeout order quantity from demand history tbl*/
   /* ------------------------------------------------------------*/
  ;
  FH4REC.XPRCD = FG0YW00.FG0YWTYP[1];
  FG0Y152();
  FH4REC.XPRCD = FG0YW00.FG0YWTYP[2];
  FG0Y152();
  ;
end // end FG0Y150

// Obtain b-grade ordered qty
Function FG0Y151()
  ;
   /* ------------------------------------------------------------*/
   /* Fetch and format the data for the range which is before*/
   /* the current month.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
      /* Current month in 1-year-ago line*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0YW00.FG0YWCSB <= 12)
    ;
    FG0YW00.FG0YWIXM = 1; /* Initialize index*/
    ;
    while (FG0YW01.FG0YWFMO[FG0YWIXM] <= FG0YW00.FG0YWRNG[1]
     && FG0YW01.FG0YWFMO[FG0YWIXM] < FG0YW01.FG0YWFMO[FG0YWCSB])
      ;
      FG0YS20(); /* Fetch the next history record*/
      ;
      FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1; /* Increment the index*/
      ;
    end
    ;
    FG0YW00.FG0YWIXM = 13; /* Initialize index*/
    ;
    while (FG0YW00.FG0YWIXM <= 24
     && FG0YW01.FG0YWFMO[FG0YWIXM] <= FG0YW00.FG0YWRNG[2])
      ;
      FG0YS20(); /* Fetch the next history record*/
      ;
      FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1; /* Increment the index*/
      ;
    end
    ;
    FG0YW00.FG0YWIXM = 25; /* Initialize index*/
    ;
    while (FG0YW00.FG0YWIXM <= 36
     && FG0YW01.FG0YWFMO[FG0YWIXM] <= FG0YW00.FG0YWRNG[3])
      ;
      FG0YS20(); /* Fetch the next history record*/
      ;
      FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1; /* Increment the index*/
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
      /* Current month in 2-year-ago line*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0YW00.FG0YWCSB <= 24
   && FG0YW00.FG0YWCSB > 12)
    ;
    FG0YW00.FG0YWIXM = 13; /* Initialize index*/
    ;
    while (FG0YW01.FG0YWFMO[FG0YWIXM] <= FG0YW00.FG0YWRNG[2]
     && FG0YW01.FG0YWFMO[FG0YWIXM] < FG0YW01.FG0YWFMO[FG0YWCSB])
      ;
      FG0YS20(); /* Fetch the next history record*/
      ;
      FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1; /* Increment the index*/
      ;
    end
    ;
    FG0YW00.FG0YWIXM = 25; /* Initialize index*/
    ;
    while (FG0YW00.FG0YWIXM <= 36
     && FG0YW01.FG0YWFMO[FG0YWIXM] <= FG0YW00.FG0YWRNG[3])
      ;
      FG0YS20(); /* Fetch the next history record*/
      ;
      FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1; /* Increment the index*/
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
      /* Current month in 3-year-ago line*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0YW00.FG0YWCSB <= 36
   && FG0YW00.FG0YWCSB > 24)
    ;
    FG0YW00.FG0YWIXM = 25; /* Initialize index*/
    ;
    while (FG0YW01.FG0YWFMO[FG0YWIXM] <= FG0YW00.FG0YWRNG[3]
     && FG0YW01.FG0YWFMO[FG0YWIXM] < FG0YW01.FG0YWFMO[FG0YWCSB])
      ;
      FG0YS20(); /* Fetch the next history record*/
      ;
      FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1; /* Increment the index*/
      ;
    end
    ;
  end
  ;
  ;
end // end FG0Y151

// Obtain closeout ordered qty
Function FG0Y152()
  ;
   /* ------------------------------------------------------------*/
   /* Fetch and format the data for the range which is before*/
   /* the current month.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
      /* Current month in 1-year-ago line*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0YW00.FG0YWCSB <= 12)
    ;
    FG0YW00.FG0YWIXM = 1; /* Initialize index*/
    ;
    while (FG0YW01.FG0YWFMO[FG0YWIXM] <= FG0YW00.FG0YWRNG[1]
     && FG0YW01.FG0YWFMO[FG0YWIXM] < FG0YW01.FG0YWFMO[FG0YWCSB])
      ;
      FG0YS30(); /* Fetch the next row in history table*/
      ;
      FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1; /* Increment the index*/
      ;
    end
    ;
    FG0YW00.FG0YWIXM = 13; /* Initialize index*/
    ;
    while (FG0YW00.FG0YWIXM <= 24
     && FG0YW01.FG0YWFMO[FG0YWIXM] <= FG0YW00.FG0YWRNG[2])
      ;
      FG0YS30(); /* Fetch the next row in history table*/
      ;
      FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1; /* Increment the index*/
      ;
    end
    ;
    FG0YW00.FG0YWIXM = 25; /* Initialize index*/
    ;
    while (FG0YW00.FG0YWIXM <= 36
     && FG0YW01.FG0YWFMO[FG0YWIXM] <= FG0YW00.FG0YWRNG[3])
      ;
      FG0YS30(); /* Fetch the next row in history table*/
      ;
      FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1; /* Increment the index*/
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
      /* Current month in 2-year-ago line*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0YW00.FG0YWCSB <= 24
   && FG0YW00.FG0YWCSB > 12)
    ;
    FG0YW00.FG0YWIXM = 13; /* Initialize index*/
    ;
    while (FG0YW01.FG0YWFMO[FG0YWIXM] <= FG0YW00.FG0YWRNG[2]
     && FG0YW01.FG0YWFMO[FG0YWIXM] < FG0YW01.FG0YWFMO[FG0YWCSB])
      ;
      FG0YS30(); /* Fetch the next row in history table*/
      ;
      FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1; /* Increment the index*/
      ;
    end
    ;
    FG0YW00.FG0YWIXM = 25; /* Initialize index*/
    ;
    while (FG0YW00.FG0YWIXM <= 36
     && FG0YW01.FG0YWFMO[FG0YWIXM] <= FG0YW00.FG0YWRNG[3])
      ;
      FG0YS30(); /* Fetch the next row in history table*/
      ;
      FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1; /* Increment the index*/
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
      /* Current month in 3-year-ago line*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0YW00.FG0YWCSB <= 36
   && FG0YW00.FG0YWCSB > 24)
    ;
    FG0YW00.FG0YWIXM = 25; /* Initialize index*/
    ;
    while (FG0YW01.FG0YWFMO[FG0YWIXM] < FG0YW01.FG0YWFMO[FG0YWCSB]
     && FG0YW01.FG0YWFMO[FG0YWIXM] <= FG0YW00.FG0YWRNG[3])
      ;
      FG0YS30(); /* Fetch the next row in history table*/
      ;
      FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1; /* Increment the index*/
      ;
    end
    ;
  end
  ;
  ;
end // end FG0Y152

// Process current plus future
Function FG0Y160()
  ;
   /* ------------------------------------------------------------*/
   /* Fetch and format the data for the range which starts from*/
   /* the current month.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
      /* Current month in 1-year-ago line*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0YW00.FG0YWCSB <= 12)
    ;
    FG0YW00.FG0YWIXM = FG0YW00.FG0YWCSB; /* Initialize index*/
    ;
    while (FG0YW01.FG0YWFMO[FG0YWIXM] <= FG0YW00.FG0YWRNG[1]
     && FG0YW00.FG0YWIXM <= 12)
      ;
      FG0Y161(); /* Fetch next row in the cursor*/
      ;
      FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1; /* Increment the index*/
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
      /* Current month in 2-year-ago line*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0YW00.FG0YWCSB <= 24
   && FG0YW00.FG0YWCSB > 12)
    ;
    FG0YW00.FG0YWIXM = 1; /* Initialize index*/
    ;
    while (FG0YW01.FG0YWFMO[FG0YWIXM] <= FG0YW00.FG0YWRNG[1]
     && FG0YW00.FG0YWIXM <= 12)
      ;
      FG0Y161(); /* Fetch next row in the cursor*/
      ;
      FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1; /* Increment the index*/
      ;
    end
    ;
    FG0YW00.FG0YWIXM = FG0YW00.FG0YWCSB; /* Initialize index*/
    ;
    while (FG0YW01.FG0YWFMO[FG0YWIXM] <= FG0YW00.FG0YWRNG[2]
     && FG0YW00.FG0YWIXM <= 24)
      ;
      FG0Y161(); /* Fetch next row in the cursor*/
      ;
      FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1; /* Increment the index*/
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
      /* Current month in 3-year-ago line*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0YW00.FG0YWCSB <= 36
   && FG0YW00.FG0YWCSB > 24)
    ;
    FG0YW00.FG0YWIXM = 1; /* Initialize index*/
    ;
    while (FG0YW01.FG0YWFMO[FG0YWIXM] <= FG0YW00.FG0YWRNG[1]
     && FG0YW00.FG0YWIXM <= 12)
      ;
      FG0Y161(); /* Fetch next row in the cursor*/
      ;
      FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1; /* Increment the index*/
      ;
    end
    ;
    FG0YW00.FG0YWIXM = 13; /* Initialize index*/
    ;
    while (FG0YW01.FG0YWFMO[FG0YWIXM] <= FG0YW00.FG0YWRNG[2]
     && FG0YW00.FG0YWIXM <= 24)
      ;
      FG0Y161(); /* Fetch next row in the cursor*/
      ;
      FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1; /* Increment the index*/
      ;
    end
    ;
    FG0YW00.FG0YWIXM = FG0YW00.FG0YWCSB; /* Initialize index*/
    ;
    while (FG0YW01.FG0YWFMO[FG0YWIXM] <= FG0YW00.FG0YWRNG[3]
     && FG0YW00.FG0YWIXM <= 36)
      ;
      FG0Y161(); /* Fetch next row in the cursor*/
      ;
      FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1; /* Increment the index*/
      ;
    end
    ;
  end
  ;
end // end FG0Y160

// Fetch the next row in cursor
Function FG0Y161()
   /* ------------------------------------------------------------*/
   /* Initialize the key field.*/
   /* ------------------------------------------------------------*/
  ;
  set FF5REC empty;
  ;
  FF5REC.XPLCD = FFWREC.XPLCD; /* Product line*/
  FF5REC.FF4FCTMO = FG0YW01.FG0YWFMO[FG0YWIXM]; /* Forecast month*/
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3710" ("S ", SQLCA, FF5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, convert the data from 9-byte numeric type to*/
   /* 5-byte charater type and save the data in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      FG0YS40(); /* Save data into display storage*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "161"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMLINE01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0Y161

// Calculate the total
Function FG0Y170()
  FG0YW00.FG0YWIND = 1; /* Initialize year indicator*/
  ;
  while (FG0YW00.FG0YWIND <= 3)
    ;
    FG0YW00.FG0YWIXM = FG0YW00.FG0YWIDX[FG0YWIND];
    FG0YW00.FG0YWTOT = 0;
    ;
    /* ------------------------------------------------------*/
     /* Set the max. no for each line*/
    /* ------------------------------------------------------*/
    ;
    if (FG0YW00.FG0YWIND == 1) /* Indicate 1 year ago*/
      ;
      FG0YW00.FG0YWMAX = 12;
      FG0YW00.FG0YWIXM = 1;
      ;
    end
    ;
    if (FG0YW00.FG0YWIND == 2) /* Indicate 2 years ago*/
      ;
      FG0YW00.FG0YWMAX = 24;
      FG0YW00.FG0YWIXM = 13;
      ;
    end
    ;
    if (FG0YW00.FG0YWIND == 3) /* Indicate 3 years ago*/
      ;
      FG0YW00.FG0YWMAX = 36;
      FG0YW00.FG0YWIXM = 25;
      ;
    end
    ;
    /* ------------------------------------------------------*/
     /* Accumulate the toatal*/
    /* ------------------------------------------------------*/
    ;
    while (FG0YW00.FG0YWIXM <= FG0YW00.FG0YWMAX
     && FG0YW01.FG0YWFMO[FG0YWIXM] <= FG0YW00.FG0YWRNG[FG0YWIND])
      ;
      FG0YW00.FG0YWTOT = FG0YW00.FG0YWTOT + FG0YW01.FF6DMFCT[FG0YWIXM];
      FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1;
      ;
    end
    ;
    FG0YW01.FG0YWTOT[FG0YWIND] = FG0YW00.FG0YWTOT;
    if (FG0YW01.FG0YWTOT[FG0YWIND] == 0)
      FG0YW01.FG0YMTOT[FG0YWIND] = " ";
    else
      FFXREC.FFXNUMB = FG0YW01.FG0YWTOT[FG0YWIND];
      XSFFS10();
      FG0YW01.FG0YMTOT[FG0YWIND] = FFXREC.FFXCHAR;
    end
    ;
    FG0YW00.FG0YWIND = FG0YW00.FG0YWIND + 1;
    ;
  end
  ;
end // end FG0Y170

// Calculate the indicies
Function FG0Y180()
  FG0YW00.FG0YWIND = 1; /* Initialize year indicator*/
  ;
  while (FG0YW00.FG0YWIND <= 3)
    ;
    FG0YW00.FG0YWIXM = FG0YW00.FG0YWIDX[FG0YWIND];
    FG0YW00.FG0YWTOT = FG0YW01.FG0YWTOT[FG0YWIND];
    ;
    /* ----------------------------------------------------*/
     /* Set the max. no for each line*/
    /* ----------------------------------------------------*/
    ;
    if (FG0YW00.FG0YWIND == 1) /* Indicate 1 year ago*/
      ;
      FG0YW00.FG0YWMAX = 12;
      FG0YW00.FG0YWIXM = 1;
      ;
    end
    ;
    if (FG0YW00.FG0YWIND == 2) /* Indicate 2 years ago*/
      ;
      FG0YW00.FG0YWMAX = 24;
      FG0YW00.FG0YWIXM = 13;
      ;
    end
    ;
    if (FG0YW00.FG0YWIND == 3) /* Indicate 3 years ago*/
      ;
      FG0YW00.FG0YWMAX = 36;
      FG0YW00.FG0YWIXM = 25;
      ;
    end
    ;
    /* ----------------------------------------------------*/
     /* Calculate the indices for each line*/
    /* ----------------------------------------------------*/
    ;
    while (FG0YW00.FG0YWIXM <= FG0YW00.FG0YWMAX
     && FG0YW01.FG0YWFMO[FG0YWIXM] <= FG0YW00.FG0YWRNG[FG0YWIND])
      ;
      if (FG0YW01.FG0YWTOT[FG0YWIND] == 0)
        FG0YW01.FFBBCPCT[FG0YWIXM] = 0;
      else
        FG0YW00.FG0YWQTY = FG0YW01.FF6DMFCT[FG0YWIXM];
        FG0YW00.FG0YWPCT = FG0YW00.FG0YWQTY / FG0YW00.FG0YWTOT;
        FG0YW01.FFBBCPCT[FG0YWIXM] = FG0YW00.FG0YWPCT * 100;
      end
      ;
      FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1;
      ;
    end
    ;
    FG0YW00.FG0YWIND = FG0YW00.FG0YWIND + 1;
    ;
  end
  ;
end // end FG0Y180

// Calculate the variance
Function FG0Y190()
  FG0YW00.FFBBCPCT = 0; /* Clear the temporary work area*/
  ;
  FG0YW00.FG0YWIXM = 1;
  ;
  while (FG0YW00.FG0YWIXM <= 12) /* Until end of year*/
    ;
    FG0YW00.FFBBCPCT = FG0YW00.FFBBCPCT + FG0YW01.FG0YMPCT[FG0YWIXM];
    ;
    FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1;
    ;
  end
  ;
  FG0YW01.FG0YMVAR = 100 - FG0YW00.FFBBCPCT;
  ;
end // end FG0Y190

// Format and converse the map
Function FG0Y200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    ;
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0YW00.FG0YWSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (FG0YW00.FG0YWSWF == "Y") /* Map must be formatted*/
      FG0Y210(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FG0YM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FG0YM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG0YM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    ;
    FG0YM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* Message number*/
    ;
    set FG0YM001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse FG0YM001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0; /* Message number*/
  ;
  COMMAREA.CATOAP = FG0YM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG0YM001.CAITEM; /* Application data*/
  ;
  ;
end // end FG0Y200

// Format the display data
Function FG0Y210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  ;
  set FG0YM001 initial; /* M001 input/output area*/
  ;
  FG0YW00.FG0YWSWF = "N"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/
  ;
  FG0YM001.FFZBYYMM = FG0YW01.FFZBYYMM; /* Beginning month*/
  FG0YM001.FFZEYYMM = FG0YW01.FFZEYYMM; /* Ending month*/
  FG0YM001.XPLCD = FFWREC.XPLCD; /* Product line code*/
  ;
  if (FG0YM001.XPLCD in XPLTBL.XPLCD
   && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* If good code*/
    FG0YM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
    FFWREC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
  else
    FG0YM001.XPLABRV = "******";
    FFWREC.XPLABRV = "******";
  end
  ;
  FG0YM001.FG0YMVAR = FG0YW01.FG0YMVAR; /* Variance*/
  ;
  FG0YW00.FG0YWIXM = 1;
  ;
  while (FG0YW00.FG0YWIXM <= 36)
    ;
    FG0YM001.FG0YMFMO[FG0YWIXM] = FG0YW01.FG0YMFMO[FG0YWIXM];
    FG0YM001.FG0YMQTY[FG0YWIXM] = FG0YW01.FG0YMQTY[FG0YWIXM];
    FG0YM001.FFBBCPCT[FG0YWIXM] = FG0YW01.FFBBCPCT[FG0YWIXM];
    ;
    FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1;
    ;
  end
  ;
  FG0YW00.FG0YWIXM = 37;
  ;
  while (FG0YW00.FG0YWIXM <= 48)
    ;
    FG0YM001.FG0YMFMO[FG0YWIXM] = FG0YW01.FG0YMFMO[FG0YWIXM];
    ;
    FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1;
    ;
  end
  ;
  FG0YW00.FG0YWIXM = 1;
  ;
  FG0YW00.FG0YWPTX = 37;
  ;
  FG0YW00.FG0YCKYYMM = FG0YM001.FFZEYYMM; /* check century*/
  if (FG0YW00.FG0YCKYY > 57)
    FG0YW00.FG0YCKCC = 19;
  else
    FG0YW00.FG0YCKCC = 20;
  end

  while (FG0YW00.FG0YWIXM <= 12
   && FG0YW01.FG0YWFMO[FG0YWPTX] <= FG0YW00.FG0YCKDT
   /* AND FG0YW01.FG0YMFMO(FG0YWPTX) LE*/
   /* FG0YM001.FFZEYYMM*/
   && FG0YM001.FFZEYYMM != 0) /* No date range entered*/
    ;
    FG0YM001.FG0YMPCT[FG0YWIXM] = FG0YW01.FG0YMPCT[FG0YWIXM];
    set FG0YM001.FG0YMPCT[FG0YWIXM] normal; /* Unprotected*/
    ;
    FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1;
    FG0YW00.FG0YWPTX = FG0YW00.FG0YWPTX + 1;
    ;
  end
  ;
  FG0YW00.FG0YWIND = 1;
  ;
  while (FG0YW00.FG0YWIND <= 3)
    ;
    FG0YM001.FG0YMTOT[FG0YWIND] = FG0YW01.FG0YMTOT[FG0YWIND];
    ;
    FG0YW00.FG0YWIND = FG0YW00.FG0YWIND + 1;
  end
  ;
  FG0YW00.FG0YWIND = 1;
  ;
  while (FG0YW00.FG0YWIND <= 4)
    ;
    FG0YM001.FG0YMSEL[FG0YWIND] = FG0YW01.FG0YMSEL[FG0YWIND];
    set FG0YM001.FG0YMSEL[FG0YWIND] normal; /* Unprotected*/
    ;
    FG0YW00.FG0YWIND = FG0YW00.FG0YWIND + 1;
  end
  ;
   /* ---------------------------------------------------------*/
    /* Check if any data found*/
   /* ---------------------------------------------------------*/
  ;
  if (FG0YM001.FG0YMTOT[1] == " " /* No 1 year ago history*/
   && FG0YM001.FG0YMTOT[2] == " " /* No 2 years ago history*/
   && FG0YM001.FG0YMTOT[3] == " " /* No 3 years ago history*/
   && FG0YW00.FG0YWSWX == "N")    /* No user created index*/
    ;
    converseLib.validationFailed(18);
    ;
  else
    ;
    if (FG0YW00.FG0YWSWX == "Y") /* User created index exists*/
      ;
      FG0YW00.FG0YWSWX = "N"; /* Reset the index setup flag*/
      ;
    end
    ;
  end
  ;
end // end FG0Y210

// Check attention identifier
Function FG0Y300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    converseLib.clearScreen();
    
    ;
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    ;
    FG0YW00.FG0YWSWF = "Y"; /* Format the data to be displayed*/
    ;
    if (FG0YW00.FG0YWSWR == "Y") /* Data was requested*/
      ;
      set FG0YW01 empty; /* M001 display storage*/
      FG0YW00.FG0YWSWR = "N"; /* Request for data switch*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
      set FG0YM001.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FFWREC.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf13) /* or PF13 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG0YM001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FG0A"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FG0O"; /* TO application*/
    end
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    ;
    FFWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      ;
      converseLib.clearScreen();
       /* Clear screen before display*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FG0Y300

// Reset highlighted fields
Function FG0Y400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FG0YM001.FFZBYYMM normal; /* Reset beginning month*/
  set FG0YM001.FFZEYYMM normal; /* Reset ending month*/
  set FG0YM001.XPLCD normal; /* Product line*/
  ;
  FG0YW00.FG0YWIND = 1; /* Initialize year indicator*/
  ;
  while (FG0YW00.FG0YWIND <= 4) /* Until end of line*/
    ;
    set FG0YM001.FG0YMSEL[FG0YWIND] normal; /* Reset select field*/
    ;
    FG0YW00.FG0YWIND = FG0YW00.FG0YWIND + 1; /* Increate the year indicator*/
    ;
  end
  ;
  FG0YW00.FG0YWIXM = 1;
  FG0YW00.FG0YWPTX = 37;
  ;
  FG0YW00.FG0YCKYYMM = FG0YM001.FFZEYYMM;
  if (FG0YW00.FG0YCKYY > 57)
    FG0YW00.FG0YCKCC = 19;
  else
    FG0YW00.FG0YCKCC = 20;
  end
  ;
  while (FG0YW00.FG0YWIXM <= 12
   && FG0YW01.FG0YWFMO[FG0YWPTX] <= FG0YW00.FG0YCKDT
   /* AND FG0YW01.FG0YMFMO(FG0YWPTX) LE*/
   /* FG0YM001.FFZEYYMM*/
   && FG0YM001.FFZEYYMM != 0)
    ;
    set FG0YM001.FG0YMPCT[FG0YWIXM] normal; /* Reset indices field*/
    ;
    FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0YM001.XPLCD == "?") /* Line list requested*/
    ;
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      FFWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(116); /* Indicate PF key not valid*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  else
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of Line codes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0YM001.XPLCD == "?") /* Line list requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  LINE"; /* Heading*/
    XX0XW02.XGPCD = FG0YW00.XGPCD; /* GPC code*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0YM001.XPLCD = FFWREC.XPLCD; /* Restore prior code*/
      FG0YM001.XPLABRV = FFWREC.XPLABRV; /* Abbreviation*/
    else
      FG0YM001.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FG0YM001.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Abbreviation*/
      ;
    end
    ;
    set FG0YM001.XPLCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FFWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0Y400

// Verify the entered data
Function FG0Y500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "500"; /* Module identification*/
    set FG0YM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Verify the entered data from bottom-up and left to right.*/
   /* ------------------------------------------------------------*/
  ;
  FG0Y510(); /* Verify the indices*/
  ;
  FG0YW00.FG0YWIND = 4; /* Initialize year indiator*/
  ;
  while (FG0YW00.FG0YWIND >= 1)
    ;
    FG0Y520(); /* Verify the selection*/
    ;
    FG0YW00.FG0YWIND = FG0YW00.FG0YWIND - 1; /* Decrement the year index*/
    ;
  end
  ;
  FG0Y530(); /* Verify the product line*/
  ;
  FG0Y540(); /* Verify the range*/
  ;
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end FG0Y500

// Verify the index fields
Function FG0Y510()
  ;
  FG0YW00.FG0YWIXM = 48; /* Month index*/
  FG0YW00.FG0YWPTX = 12; /* Percent index*/
  FG0YW00.FFBBCPCT = 0; /* Clear the temporary work area*/
  ;
  FG0YW00.FG0YWSWX = "N"; /* Initialize the index setup flag*/
  /* -----------------------------------------------------------*/
  FG0YW00.FG0YCKYYMM = FG0YM001.FG0YMFMO[FG0YWIXM];
  if (FG0YW00.FG0YCKYY > 57) /* check century*/
    FG0YW00.FG0YCKCC = 19;
  else
    FG0YW00.FG0YCKCC = 20;
  end
  ;
  /* -----------------------------------------------------------*/
  FG0YW00.FG0YSVYYMM = FG0YM001.FG0YMFMO[37];
  if (FG0YW00.FG0YSVYY > 57) /* check century*/
    FG0YW00.FG0YSVCC = 19;
  else
    FG0YW00.FG0YSVCC = 20;
  end
  /* -----------------------------------------------------------*/
  ;
  while (FG0YW00.FG0YWIXM >= 37
   && FG0YW00.FG0YCKDT >= FG0YW00.FG0YSVDT)
  /* AND FG0YM001.FG0YMFMO(FG0YWIXM) GE FG0YM001.FG0YMFMO(37);*/
                                   /* End of range*/
    ;
    if (FG0YM001.FG0YMPCT[FG0YWPTX] < 0)
      ;
      FFWREC.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(10);
      set FG0YM001.FG0YMPCT[FG0YWPTX] cursor, bold; /* Hightlight*/
      ;
    else
      ;
      if (FG0YM001.FG0YMPCT[FG0YWPTX] > 0)
        ;
        FG0YW00.FG0YWSWX = "Y"; /* User created index*/
        FG0YW00.FFBBCPCT = FG0YW00.FFBBCPCT + FG0YM001.FG0YMPCT[FG0YWPTX];
        ;
      end
      ;
    end
    ;
    FG0YW00.FG0YWIXM = FG0YWIXM - 1; /* Decrement month index*/
    FG0YW00.FG0YWPTX = FG0YWPTX - 1; /* Decrement percent index*/
    ;
    FG0YW00.FG0YCKYYMM = FG0YM001.FG0YMFMO[FG0YWIXM];
    if (FG0YW00.FG0YCKYY > 57) /* check century*/
      FG0YW00.FG0YCKCC = 19;
    else
      FG0YW00.FG0YCKCC = 20;
    end
    ;
  end
  ;
  if (FG0YW00.FFBBCPCT > 0) /* Index was set*/
    FG0YW01.FG0YMVAR = 100 - FG0YW00.FFBBCPCT;
    FG0YM001.FG0YMVAR = FG0YW01.FG0YMVAR;
  else
    FG0YW01.FG0YMVAR = 0;
    FG0YM001.FG0YMVAR = FG0YW01.FG0YMVAR;
  end
  ;
  if (FG0YW01.FG0YMVAR != 0)
    converseLib.validationFailed(159); /* Indicate the total not 100*/
    FFWREC.XXXMODID = "510"; /* Module identification*/
    set FG0YM001.FG0YMPCT[1] cursor;
  end
  ;
end // end FG0Y510

// Verify the selection field
Function FG0Y520()
  ;
   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "S", indicate that*/
   /* only "S" may be used to select a line.*/
  ;
   /* ------------------------------------------------------------*/
  ;
  if (FG0YM001.FG0YMSEL[FG0YWIND] != " " /* select field is not a ' '*/
   && FG0YM001.FG0YMSEL[FG0YWIND] != "S") /* and is not a "S"*/
    ;
    FFWREC.XXXMODID = "520"; /* Module identification*/
    ;
    converseLib.validationFailed(41); /* Indicate only "S" may be used*/
    set FG0YM001.FG0YMSEL[FG0YWIND] cursor, bold; /* Highlight*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* If multiple selections were made, indicate that only one*/
     /* line may be selected at a time.*/
    /* ------------------------------------------------------------*/
    ;
    FG0YW00.FG0YWID2 = FG0YW00.FG0YWIND - 1;
    ;
    while (FG0YW00.FG0YWID2 >= 1)
      ;
      if (FG0YM001.FG0YMSEL[FG0YWID2] > " " /* Invalid value or 's'*/
       && FG0YM001.FG0YMSEL[FG0YWIND] > " ")
        ;
        FFWREC.XXXMODID = "520"; /* Module identification*/
        ;
        converseLib.validationFailed(136); /* Indicate more than one line selected*/
        set FG0YM001.FG0YMSEL[FG0YWIND] cursor, bold; /* Highlight*/
        ;
      end
      ;
      FG0YW00.FG0YWID2 = FG0YW00.FG0YWID2 - 1; /* decrement the 2nd index*/
      ;
    end
    ;
  end
  ;
   /* -----------------------------------------------------------*/
   /* Check if the user created index was selected. if it was.*/
   /* the indices must be set up already, otherwise indicate*/
   /* an error.*/
   /* -----------------------------------------------------------*/
  ;
  if (FG0YM001.FG0YMSEL[4] == "S"
   && FG0YW00.FG0YWSWX == "N")
    ;
    FFWREC.XXXMODID = "520"; /* Module identification*/
    ;
    set FG0YM001.FG0YMSEL[4] cursor, bold; /* Highlight*/
    converseLib.validationFailed(161);
    ;
  end
end // end FG0Y520

// Verify Product Line
Function FG0Y530()
  ;
   /* ------------------------------------------------------------*/
   /* Determine if the code is in the table and status is active.*/
   /* ------------------------------------------------------------*/
  ;
  FG0YW00.XPLCD = FG0YM001.XPLCD;
  ;
  if (FG0YM001.XPLCD == "  ") /* No product line*/
    FG0YM001.XPLABRV = "      ";
  else
    FG0YM001.XPLABRV = "******";
  end
  ;
  if (FG0YW00.XPLKEY in XPLTBL.XPLKEY /* Code in table*/
   && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
    ;
    FG0YM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* Abbreviation*/
    ;
    FG0YS01(); /* Select & open cursor for VFFXRF01*/
    ;
    FG0YS02(); /* Fetch next row in VFFXRF01*/
    ;
    FG0YS03(); /* Close the cursor for VFFXRF01*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/
    ;
    FFWREC.XXXMODID = "530"; /* Module identification*/
    ;
    set FG0YM001.XPLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(118); /* Indicate missing or invalid*/
    ;
  end
  ;
  ;
end // end FG0Y530

// Verify the range
Function FG0Y540()
   /* ------------------------------------------------------------*/
   /* The beginning month must be greater than the current month*/
   /* and less than or equal to the current plus 30 month*/
   /* The ending month must be greater than or equal to the*/
   /* beginning month, not greater than the beginning plus 11*/
   /* month and not greater than the current plus 30 months.*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty; /* Clear storage row*/
  ;
  FFZREC.FFZBYYMM = FG0YM001.FFZBYYMM; /* Beginning month*/
  FFZREC.FFZEYYMM = FG0YM001.FFZEYYMM; /* Ending month*/
  FFZREC.FFZMONTH = 6; /* Number of month*/
  ;
  XSFFS35(); /* Verify the range*/
  ;
  if (FFZREC.FFZENDRC != "0") /* Check error code*/
    ;
    FFWREC.XXXMODID = "540"; /* Module identification*/
    ;
    set FG0YM001.FFZEYYMM cursor, bold; /* Hightlight*/
    ;
    if (FFZREC.FFZENDRC == "1") /* No ending month entered*/
      ;
      converseLib.validationFailed(8); /* Indicate invalid date entered*/
      ;
    end
    ;
    if (FFZREC.FFZENDRC == "2") /* Invalid ending month entered*/
      ;
      converseLib.validationFailed(17); /* Indicate invalid date entered*/
      ;
    end
    ;
    if (FFZREC.FFZENDRC == "3") /* Ending month out of range*/
      ;
      converseLib.validationFailed(151); /* Indicate invalid date entered*/
      ;
    end
  end
  ;
  if (FFZREC.FFZBEGRC != "0") /* Check error code*/
    ;
    FFWREC.XXXMODID = "540"; /* Module identification*/
    set FG0YM001.FFZBYYMM cursor, bold; /* hightlight*/
    ;
    if (FFZREC.FFZBEGRC == "1") /* No beginning month entered*/
      ;
      converseLib.validationFailed(8); /* Indicate required field*/
      ;
    end
    ;
    if (FFZREC.FFZBEGRC == "2") /* Invalid beginning month entered*/
      ;
      converseLib.validationFailed(17); /* Indicate invalid date entered*/
      ;
    end
    ;
    if (FFZREC.FFZBEGRC == "3") /* Beginning month out of range*/
      ;
      converseLib.validationFailed(151); /* Indicate invalid date entered*/
      ;
    end
  end
  ;
  if (converseVar.validationMsgNum == 0)
    ;
    FFWREC.FFABEGMO = FFZREC.FFZBEGMO; /* Save converted dates*/
    FFWREC.FFAENDMO = FFZREC.FFZENDMO;
    ;
  end
  ;
end // end FG0Y540

// Process valid input request
Function FG0Y600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/
  ;
  FG0YW00.FG0YWSWF = "Y"; /* Format the map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0YM001.FFZBYYMM != FG0YW01.FFZBYYMM /* Beginning month changed*/
   || FG0YM001.FFZEYYMM != FG0YW01.FFZEYYMM /* or ending month changed*/
   || FG0YM001.XPLCD != FFWREC.XPLCD)       /* or product line changed*/
    ;
    set FG0YW01 empty; /* map display storage*/
    ;
    FG0YW01.FFZBEGMO = FFZREC.FFZBEGMO; /* Beginning month*/
    FG0YW01.FFZENDMO = FFZREC.FFZENDMO; /* Ending month*/
    FFWREC.XPLCD = FG0YM001.XPLCD; /* Product line*/
    FFWREC.XPLABRV = FG0YM001.XPLABRV; /* Product line abbreviation*/
    ;
    FG0YW00.FFABCIND = " "; /* Clear the indicator work area*/
    ;
    /* ------------------------------------------------------------*/
     /* If a search key was entered, request the data to display.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0YW01.FFZBYYMM > 0 /* Beginning month was entered*/
     && FG0YW01.FFZEYYMM > 0 /* Ending month was entered*/
     && FFWREC.XPLCD > "  ") /* Product line was entered*/
      ;
      FG0YW00.FG0YWSWR = "Y"; /* Request for data switch*/
      ;
    end
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ---------------------------------------------------------*/
   /* Save the indices information*/
   /* ---------------------------------------------------------*/
  ;
  FG0YW00.FG0YWIXM = 37; /* Month index*/
  FG0YW00.FG0YWPTX = 1; /* Percent index*/
  ;
  /* ------------------------------------------------------------*/
  FG0YW00.FG0YCKYYMM = FG0YM001.FG0YMFMO[FG0YWIXM];
  if (FG0YW00.FG0YCKYY > 57)
    FG0YW00.FG0YCKCC = 19;
  else
    FG0YW00.FG0YCKCC = 20;
  end
  /* ------------------------------------------------------------*/
  ;
  while (FG0YW00.FG0YWIXM <= 48
   && FG0YW00.FG0YCKDT <= FG0YW00.FG0YWRNG[4])
  /* AND FG0YM001.FG0YMFMO(FG0YWIXM) LE FG0YW00.FG0YWRMO(4);*/
    ;
    if (FG0YM001.FG0YMPCT[FG0YWPTX] != FG0YW01.FG0YMPCT[FG0YWPTX])
      ;
      FFWREC.FFWMODSW = "Y"; /* Index changed*/
      ;
    end
    ;
    FG0YW01.FG0YMPCT[FG0YWPTX] = FG0YM001.FG0YMPCT[FG0YWPTX];
    ;
    FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1; /* Increment month index*/
    FG0YW00.FG0YWPTX = FG0YW00.FG0YWPTX + 1; /* Increment percent index*/
  /* ------------------------------------------------------------*/
    FG0YW00.FG0YCKYYMM = FG0YM001.FG0YMFMO[FG0YWIXM];
    if (FG0YW00.FG0YCKYY > 57)
      FG0YW00.FG0YCKCC = 19;
    else
      FG0YW00.FG0YCKCC = 20;
    end
  /* ------------------------------------------------------------*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a line was selected, save the key fields and transfer*/
   /* to the maintain b-grade & closeout index application.*/
   /* ------------------------------------------------------------*/
  ;
  if ("S" in FG0YM001.FG0YMSEL) /* Line was selected*/
    ;
    FFWREC.FFABEGMO = FG0YW01.FFZBEGMO; /* Beginning month*/
    FFWREC.FFAENDMO = FG0YW01.FFZENDMO; /* Ending month*/
    FG0YW00.FG0YWIND = sysVar.arrayIndex;
    move " " to FG0YW01.FG0YMSEL[1] for all; /* Clear the selection field*/
    FG0YW01.FG0YMSEL[FG0YWIND] = FG0YM001.FG0YMSEL[FG0YWIND];
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      if (FG0YW00.FG0YWSWE == "N") /* no row exist*/
        ;
        FG0Y620(); /* Insert the indicator and indices*/
        FG0YW00.FG0YWSWE = "Y";
        ;
      else
        ;
        FG0Y630(); /* Update the indicator and indices*/
        ;
      end
      ;
      ;
      /* ---------------------------------------------------------*/
       /* Commit all changes to protected resources.*/
      /* ---------------------------------------------------------*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* Commit all changes*/
      ;
      FFWREC.XXXMSGNO = 33;
                                   /* Indicate update complete successfully*/
      FFWREC.FFWMODSW = "N";
                                   /* Indicate the data no need to be saved*/
      ;
      FG0YW00.FFABCIND = FG0YW00.FG0YWIND; /* save current indicator*/
      ;
    end
    ;
  else
    ;
    if ("S" in FG0YW01.FG0YMSEL) /* line selected*/
      FFWREC.FFABEGMO = FG0YW01.FFZBEGMO; /* Beginning month*/
      FFWREC.FFAENDMO = FG0YW01.FFZENDMO; /* Ending month*/
      FG0YW00.FG0YWIND = sysVar.arrayIndex;
      FG0Y640(); /* update indicator*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* Commit all changes*/
      ;
      FFWREC.XXXMSGNO = 33;
                                   /* Indicate update complete successfully*/
      FFWREC.FFWMODSW = "N";
                                   /* Indicate the data no need to be saved*/
      ;
      FG0YW00.FFABCIND = FG0YW00.FG0YWIND; /* save current indicator*/
    end
    ;
  end
  ;
end // end FG0Y600

// Insert the table row
Function FG0Y620()
   /* ------------------------------------------------------------*/
   /* Insert B-grade & Closeout indicator.*/
   /* ------------------------------------------------------------*/
  ;
  set FFAREC empty;
  ;
  FFAREC.FFABEGMO = FG0YW01.FFZBEGMO; /* Beginning month*/
  FFAREC.FFAENDMO = FG0YW01.FFZENDMO; /* Ending month*/
  FFAREC.XPLCD = FFWREC.XPLCD; /* Line code*/
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FFAREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  FFAREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFAREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  if (FG0YW00.FG0YWIND == 1) /* 1 year ago*/
    ;
    FFAREC.FFABCIND = "1";
    ;
  end
  ;
  if (FG0YW00.FG0YWIND == 2) /* 2 years ago*/
    ;
    FFAREC.FFABCIND = "2";
    ;
  end
  ;
  if (FG0YW00.FG0YWIND == 3) /* 3 years ago*/
    ;
    FFAREC.FFABCIND = "3";
    ;
  end
  ;
  if (FG0YW00.FG0YWIND == 4) /* User created*/
    ;
    FFAREC.FFABCIND = "U";
    ;
  end
  ;
  FG0Y621(); /* Insert indicator into table*/
  ;
   /* ------------------------------------------------------------*/
   /* Insert B-grade & Closeout indices.*/
   /* ------------------------------------------------------------*/
  ;
  set FFBREC empty;
  ;
  FFBREC.FFABEGMO = FG0YW01.FFZBEGMO; /* Beginning month*/
  FFBREC.FFAENDMO = FG0YW01.FFZENDMO; /* Ending month*/
  FFBREC.XPLCD = FFWREC.XPLCD; /* Line code*/
  ;
  XX0XS01(); /* Obtain current date and time*/
  ;
  FFBREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  FFBREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFBREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
   /* ---------------------------------------------------*/
   /* Get the starting point for inserting the index*/
   /* ---------------------------------------------------*/
  ;
  FG0YW00.FG0YWIXM = 37; /* Initial. month indx*/
  ;
  if (FG0YW00.FG0YWIND == 4) /* User created index*/
    ;
    FG0YW00.FG0YWPTX = 1; /* Initial percent index*/
    ;
  else
    ;
    FG0YW00.FG0YWPTX = FG0YW00.FG0YWIDX[FG0YWIND]; /* Initial. pct index*/
    ;
  end
  ;
  FG0YW00.FG0YWMAX = 48;
  ;
   /* ------------------------------------------------------------*/
   /* Insert table rows*/
   /* ------------------------------------------------------------*/
  ;
  while (FG0YW00.FG0YWIXM <= FG0YW00.FG0YWMAX
   && FG0YW01.FG0YWFMO[FG0YWIXM] <= FG0YW00.FG0YWRNG[4])
    ;
    FFBREC.FF4FCTMO = FG0YW01.FG0YWFMO[FG0YWIXM]; /* Processed month*/
    ;
    if (FG0YW00.FG0YWIND == 4) /* User created index*/
      ;
      FFBREC.FFBBCPCT = FG0YW01.FG0YMPCT[FG0YWPTX]; /* User created idx*/
      ;
    else
      ;
      FFBREC.FFBBCPCT = FG0YW01.FFBBCPCT[FG0YWPTX]; /* Historical idx*/
      ;
    end
    ;
    FG0Y622(); /* Insert the indices into the table*/
    ;
    FG0YW00.FG0YWPTX = FG0YW00.FG0YWPTX + 1; /* Increment percent index*/
    FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1; /* Increment month index*/
    ;
  end
  ;
  ;
end // end FG0Y620

// Insert indicator into VRLINE01
Function FG0Y621()
  ;
  try
    call "IO3780" ("A ", SQLCA, FFAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "621"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(49); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFAREC.FFAKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0Y621

// Insert indices into VRLMTH01
Function FG0Y622()
  ;
  try
    call "IO3790" ("A ", SQLCA, FFBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "622"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFBREC.FFBKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0Y622

// Update the table row
Function FG0Y630()
   /* ------------------------------------------------------------*/
   /* Update B-grade & Closeout indicator.*/
   /* ------------------------------------------------------------*/
  ;
  set FFAREC empty;
  ;
  FFAREC.FFABEGMO = FG0YW01.FFZBEGMO; /* Beginning month*/
  FFAREC.FFAENDMO = FG0YW01.FFZENDMO; /* Ending month*/
  FFAREC.XPLCD = FFWREC.XPLCD; /* Line code*/
  ;
  FG0Y110(); /* Read the table row*/
  ;
  XX0XS01(); /* Obtain current date & time*/
  ;
  FFAREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFAREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  if (FG0YW00.FG0YWIND == 1) /* 1 year ago*/
    ;
    FFAREC.FFABCIND = "1";
    ;
  end
  ;
  if (FG0YW00.FG0YWIND == 2) /* 2 years ago*/
    ;
    FFAREC.FFABCIND = "2";
    ;
  end
  ;
  if (FG0YW00.FG0YWIND == 3) /* 3 years ago*/
    ;
    FFAREC.FFABCIND = "3";
    ;
  end
  ;
  if (FG0YW00.FG0YWIND == 4) /* User created*/
    ;
    FFAREC.FFABCIND = "U";
    ;
  end
  ;
  FG0Y631(); /* Update indicator in the table*/
  ;
   /* ------------------------------------------------------------*/
   /* Update B-grade & Closeout indices.*/
   /* ------------------------------------------------------------*/
  ;
  set FFBREC empty;
  ;
  FFBREC.FFABEGMO = FG0YW01.FFZBEGMO; /* Beginning month*/
  FFBREC.FFAENDMO = FG0YW01.FFZENDMO; /* Ending month*/
  FFBREC.XPLCD = FFWREC.XPLCD; /* Line code*/
  ;
   /* ------------------------------------------------------------*/
   /* Get the starting point for updating the index*/
   /* ------------------------------------------------------------*/
  ;
  FG0YW00.FG0YWIXM = 37; /* Initial wirte idex*/
  ;
  if (FG0YW00.FG0YWIND == 4) /* User created index*/
    ;
    FG0YW00.FG0YWPTX = 1; /* Initialize percent index*/
    ;
  else
    ;
    FG0YW00.FG0YWPTX = FG0YW00.FG0YWIDX[FG0YWIND]; /* Initial pct index*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Read the index row, delete the row and update the row.*/
   /* ------------------------------------------------------------*/
  ;
  while (FG0YW00.FG0YWIXM <= 48
   && FG0YW01.FG0YWFMO[FG0YWIXM] <= FG0YWRNG[4])
    ;
    ;
    FFBREC.FF4FCTMO = FG0YW01.FG0YWFMO[FG0YWIXM];
    ;
    FG0Y632(); /* Read the table row*/
    ;
    FG0Y633(); /* Delete the table row*/
    ;
    if (converseVar.validationMsgNum == 0) /* Record exist*/
      ;
      FFBREC.FF4FCTMO = FG0YW01.FG0YWFMO[FG0YWIXM];
      FFBREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
      FFBREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
      ;
      if (FG0YW00.FG0YWIND == 4) /* User created index*/
        ;
        FFBREC.FFBBCPCT = FG0YW01.FG0YMPCT[FG0YWPTX]; /* User creatd idx*/
        ;
      else
        ;
        FFBREC.FFBBCPCT = FG0YW01.FFBBCPCT[FG0YWPTX]; /* Historical idx*/
        ;
      end
      ;
      FG0Y622(); /* insert the indices in the table*/
      ;
    end
    ;
    FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1; /* Increment month index*/
    FG0YW00.FG0YWPTX = FG0YW00.FG0YWPTX + 1; /* Increment the percent index*/
  end
  ;
end // end FG0Y630

// Update indicator in VRLINE01
Function FG0Y631()
  ;
  try
    call "IO3780" ("U ", SQLCA, FFAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      FG0YW00.FG0YWSWR = "Y"; /* Request for data switch*/
      ;
      FFWREC.XXXMODID = "631"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "631"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFAREC.FFAKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0Y631

// Read the row in VRLMTH01
Function FG0Y632()
  try
    call "IO3790" ("S ", SQLCA, FFBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Record not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      FFWREC.XXXMODID = "632"; /* Module identification*/
      converseLib.validationFailed(43); /* Indicate no record found*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "632"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFBREC.FFBKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0Y632

// Delete indices in VRLMTH01
Function FG0Y633()
  try
    call "IO3790" ("D ", SQLCA, FFBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      FG0YW00.FG0YWSWR = "Y"; /* Request for data switch*/
      ;
      FFWREC.XXXMODID = "633"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "623"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLMTH01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFBREC.FFBKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0Y633

// Update the table row
Function FG0Y640()
   /* ------------------------------------------------------------*/
   /* Update B-grade & Closeout indicator.*/
   /* ------------------------------------------------------------*/
  ;
  set FFAREC empty;
  ;
  FFAREC.FFABEGMO = FG0YW01.FFZBEGMO; /* Beginning month*/
  FFAREC.FFAENDMO = FG0YW01.FFZENDMO; /* Ending month*/
  FFAREC.XPLCD = FFWREC.XPLCD; /* Line code*/
  ;
  FG0Y110(); /* Read the table row*/
  ;
  XX0XS01(); /* Obtain current date & time*/
  ;
  FFAREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFAREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  FFAREC.FFABCIND = " "; /* update indicator*/
  move " " to FG0YW01.FG0YMSEL[1] for all; /* update indicator*/
  ;
  FG0Y631(); /* Update indicator in the table*/
  ;
   /* ------------------------------------------------------------*/
   /* Update B-grade & Closeout indices.*/
   /* ------------------------------------------------------------*/
  ;
  set FFBREC empty;
  ;
  FFBREC.FFABEGMO = FG0YW01.FFZBEGMO; /* Beginning month*/
  FFBREC.FFAENDMO = FG0YW01.FFZENDMO; /* Ending month*/
  FFBREC.XPLCD = FFWREC.XPLCD; /* Line code*/
  ;
   /* ------------------------------------------------------------*/
   /* Get the starting point for updating the index*/
   /* ------------------------------------------------------------*/
  ;
  FG0YW00.FG0YWIXM = 37; /* Initial wirte idex*/
  ;
  if (FG0YW00.FG0YWIND == 4) /* User created index*/
    ;
    FG0YW00.FG0YWPTX = 1; /* Initialize percent index*/
    ;
  else
    ;
    FG0YW00.FG0YWPTX = FG0YW00.FG0YWIDX[FG0YWIND]; /* Initial pct index*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Read the index row, delete the row and update the row.*/
   /* ------------------------------------------------------------*/
  ;
  while (FG0YW00.FG0YWIXM <= 48
   && FG0YW01.FG0YWFMO[FG0YWIXM] <= FG0YWRNG[4])
    ;
    ;
    FFBREC.FF4FCTMO = FG0YW01.FG0YWFMO[FG0YWIXM];
    ;
    FG0Y632(); /* Read the table row*/
    ;
    FG0Y633(); /* Delete the table row*/
    ;
    if (converseVar.validationMsgNum == 0) /* Record exist*/
      ;
      FFBREC.FF4FCTMO = FG0YW01.FG0YWFMO[FG0YWIXM];
      FFBREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
      FFBREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
      ;
      if (FG0YW00.FG0YWIND == 4) /* User created index*/
        ;
        FFBREC.FFBBCPCT = FG0YW01.FG0YMPCT[FG0YWPTX]; /* User creatd idx*/
        ;
      else
        ;
        FFBREC.FFBBCPCT = FG0YW01.FFBBCPCT[FG0YWPTX]; /* Historical idx*/
        ;
      end
      ;
      FG0Y622(); /* insert the indices in the table*/
      ;
    end
    ;
    FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1; /* Increment month index*/
    FG0YW00.FG0YWPTX = FG0YW00.FG0YWPTX + 1; /* Increment the percent index*/
  end
  ;
end // end FG0Y640

// Select & open cursor VFFXRF01
Function FG0YS01()
  ;
  set FF2REC empty; /* Clear the storage row*/
  ;
  FF2REC.XPLCD = FG0YM001.XPLCD; /* Product line code*/
  FF2REC.YSMXDV = FFWREC.YSMXDV; /* Division group code*/
  FF2REC.YPGCD = "*"; /* Type group code*/
  FF2REC.XPCCD = "*"; /* Category*/
  ;
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S01"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0YS01

// Fetch the 1st row in VFFXRF01
Function FG0YS02()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* or end of select set*/
      converseLib.validationFailed(10); /* Indicate inconsistent*/
      FFWREC.XXXMODID = "S02"; /* Module identification*/
      set FG0YM001.XPLCD cursor, bold; /* Highlight*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S02"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0YS02

// Close the cursor for VFFXRF01
Function FG0YS03()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S03"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0YS03

// Prepare month heading
Function FG0YS10()
   /* ------------------------------------------------------------*/
   /* Prepare the month headings.*/
   /* ------------------------------------------------------------*/
  ;
  FG0YW00.FG0YWDAT = FFWREC.FFABEGMO - 100; /* 1 year ago beginning month*/
  FG0YW00.FG0YWRNG[1] = FFWREC.FFAENDMO - 100; /* 1 year ago ending month*/
  FG0YW00.FG0YWIDX[1] = 1; /* Initialize month index*/
  FG0YW00.FG0YWIXM = 1; /* Initialize display index*/
  ;
  while (FG0YW00.FG0YWIXM <= 12)
    FG0YS11(); /* Fill the month heading*/
  end
  ;
  FG0YW00.FG0YWDAT = FFWREC.FFABEGMO - 200; /* 2 years ago beginning month*/
  FG0YW00.FG0YWRNG[2] = FFWREC.FFAENDMO - 200; /* 2 year ago ending month*/
  FG0YW00.FG0YWIDX[2] = 13; /* Initialize month index*/
  FG0YW00.FG0YWIXM = 13; /* Initialize display index*/
  ;
  while (FG0YW00.FG0YWIXM <= 24)
    FG0YS11(); /* Fill the month heading*/
  end
  ;
  FG0YW00.FG0YWDAT = FFWREC.FFABEGMO - 300; /* 3 years ago beginning month*/
  FG0YW00.FG0YWRNG[3] = FFWREC.FFAENDMO - 300; /* 3 year ago ending month*/
  FG0YW00.FG0YWIDX[3] = 25; /* Initialize month index*/
  FG0YW00.FG0YWIXM = 25; /* Initialize display index*/
  ;
  while (FG0YW00.FG0YWIXM <= 36)
    FG0YS11(); /* Fill the month heading*/
  end
  ;
  FG0YW00.FG0YWDAT = FFWREC.FFABEGMO; /* Current beginning month*/
  FG0YW00.FG0YWRNG[4] = FFWREC.FFAENDMO; /* Current ending month*/
  FG0YW00.FG0YWIDX[4] = 37; /* Initialize month index*/
  FG0YW00.FG0YWIXM = 37; /* Initialize display index*/
  ;
  ;
  while (FG0YW00.FG0YWIXM <= 48)
    FG0YS11(); /* Fill the month heading*/
  end
  ;
end // end FG0YS10

// Fill month headings
Function FG0YS11()
   /* ------------------------------------------------------------*/
   /* move the appropriate month heading into each month*/
   /* ------------------------------------------------------------*/
  ;
  ;
  FG0YW01.FG0YWFMO[FG0YWIXM] = FG0YW00.FG0YWDAT;
  FG0YW00.FG0YWIXM = FG0YW00.FG0YWIXM + 1;
  ;
  FG0YW00.FG0YWDAT = FG0YW00.FG0YWDAT + 1;
  ;
  if (FG0YW00.FG0YWMM > 12) /* Over 12 months*/
    ;
    FG0YW00.FG0YWMM = FG0YW00.FG0YWMM - 12;
    if (FG0YW00.FG0YWYY == 99)
      FG0YW00.FG0YWYY = 00;
      FG0YW00.FG0YWCC = FG0YW00.FG0YWCC + 1;
    else
      FG0YW00.FG0YWYY = FG0YW00.FG0YWYY + 1;
    end
    ;
  end
  ;
end // end FG0YS11

// Fetch the next row in VFHLIN01
Function FG0YS20()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFBEGMO = FG0YW01.FG0YWFMO[FG0YWIXM]; /* Hist beginning mo*/
  FFFREC.FFFENDMO = FG0YW01.FG0YWFMO[FG0YWIXM]; /* Hist ending mo*/
  FH4REC.XPLCD = FFWREC.XPLCD; /* Product line*/
  FH4REC.XDVCD = FFWREC.YSMXDV; /* Division group code*/
  FH4REC.XCTCD = FG0YW00.XCTCD; /* Country code*/
  FH4REC.FH1PNAC = "*"; /* Prdctn natl acct fl*/
  FH4REC.YSMXOT = "*"; /* Order type group cd*/
  FH4REC.XDSCD = "*"; /* Direct ship code*/
  ;
   /* ------------------------------------------------------------*/
   /* Process active b-grade*/
   /* ------------------------------------------------------------*/
  FH4REC.XQACD = "02"; /* Quality code*/
  FH4REC.XLCCD = "10"; /* Life cycle code*/
  ;
  XSFFS51(); /* Summarize VFHLIN01 quantities*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, convert the data from 9-byte numeric type to*/
   /* 5-byte charater type and save the data in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    ;
    FG0YW00.FG0YWQTY = FH4REC.FH1PAQTY + FH4REC.FH1ALQTY; /* Ordered qty*/
    FG0YW00.FG0YWQTY = FG0YW00.FG0YWQTY + FH4REC.FH2SHP;
    FG0YW00.FG0YWQTY = FG0YW00.FG0YWQTY + FH4REC.FH3CNCL;
    FG0YW01.FF6DMFCT[FG0YWIXM] = FG0YW01.FF6DMFCT[FG0YWIXM] + FG0YWQTY;
    ;
    FFXREC.FFXNUMB = FG0YW01.FF6DMFCT[FG0YWIXM];
    XSFFS10(); /* Translate subroution*/
    FG0YW01.FG0YMQTY[FG0YWIXM] = FFXREC.FFXCHAR;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Process closeout b-grade*/
   /* ------------------------------------------------------------*/
  FH4REC.XQACD = "02"; /* Quality code*/
  FH4REC.XLCCD = "20"; /* Life cycle code*/
  ;
  XSFFS51(); /* Summarize VFHLIN01 quantities*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, convert the data from 9-byte numeric type to*/
   /* 5-byte charater type and save the data in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    ;
    FG0YW00.FG0YWQTY = FH4REC.FH1PAQTY + FH4REC.FH1ALQTY; /* Ordered qty*/
    FG0YW00.FG0YWQTY = FG0YW00.FG0YWQTY + FH4REC.FH2SHP;
    FG0YW00.FG0YWQTY = FG0YW00.FG0YWQTY + FH4REC.FH3CNCL;
    FG0YW01.FF6DMFCT[FG0YWIXM] = FG0YW01.FF6DMFCT[FG0YWIXM] + FG0YWQTY;
    ;
    FFXREC.FFXNUMB = FG0YW01.FF6DMFCT[FG0YWIXM];
    XSFFS10(); /* Translate subroution*/
    FG0YW01.FG0YMQTY[FG0YWIXM] = FFXREC.FFXCHAR;
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
end // end FG0YS20

// Fetch the next row in VFHLIN01
Function FG0YS30()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFBEGMO = FG0YW01.FG0YWFMO[FG0YWIXM]; /* Hist beginning mo*/
  FFFREC.FFFENDMO = FG0YW01.FG0YWFMO[FG0YWIXM]; /* Hist ending mo*/
  FH4REC.XPLCD = FFWREC.XPLCD; /* Product line*/
  FH4REC.XDVCD = FFWREC.YSMXDV; /* Division group code*/
  FH4REC.XCTCD = FG0YW00.XCTCD; /* Country code*/
  FH4REC.FH1PNAC = "*"; /* Prdctn natl acct fl*/
  FH4REC.YSMXOT = "*"; /* Order type group cd*/
  FH4REC.XDSCD = "*"; /* Direct ship code*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain 1st grade closout product line*/
   /* ------------------------------------------------------------*/
  FH4REC.XQACD = "01"; /* Quality code*/
  FH4REC.XLCCD = "20"; /* Life cycle code*/
  ;
  XSFFS51(); /* Summarize VFHLIN01 quantity*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, convert the data from 9-byte numeric type to*/
   /* 5-byte charater type and save the data in display storage.*/
   /* ------------------------------------------------------------*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    ;
    FG0YW00.FG0YWQTY = FH4REC.FH1PAQTY + FH4REC.FH1ALQTY; /* Ordered qty*/
    FG0YW00.FG0YWQTY = FG0YW00.FG0YWQTY + FH4REC.FH2SHP;
    FG0YW00.FG0YWQTY = FG0YW00.FG0YWQTY + FH4REC.FH3CNCL;
    FG0YW01.FF6DMFCT[FG0YWIXM] = FG0YW01.FF6DMFCT[FG0YWIXM] + FG0YWQTY;
    ;
    FFXREC.FFXNUMB = FG0YW01.FF6DMFCT[FG0YWIXM];
    XSFFS10(); /* Translate subroution*/
    FG0YW01.FG0YMQTY[FG0YWIXM] = FFXREC.FFXCHAR;
    ;
  end
  ;
end // end FG0YS30

// Save data into display storage
Function FG0YS40()
   /* ------------------------------------------------------------*/
   /* Add B-grade fcst qty and closeout qty together to get the*/
   /* monthly forecast.*/
   /* Convert the quantity from NUM to CHAR.*/
   /* ------------------------------------------------------------*/
  FG0YW01.FF6DMFCT[FG0YWIXM] = FF5REC.FF5BGFCT + FF5REC.FF5COFCT;
  ;
  FFXREC.FFXNUMB = FG0YW01.FF6DMFCT[FG0YWIXM];
  ;
  XSFFS10(); /* Translate subroutine*/
  ;
  FG0YW01.FG0YMQTY[FG0YWIXM] = FFXREC.FFXCHAR;
  ;
end // end FG0YS40

//*** RECORD=FG0YW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FG0YW00 type basicRecord
  10 FG0YWSWR FG0YWSWR ; 
  10 FG0YWSWC FG0YWSWC ; 
  10 FG0YWSWF FG0YWSWF ; 
  10 FG0YWSWE FG0YWSWE ; 
  10 FG0YWSWX FG0YWSWX ; 
  10 FG0YWIXM FG0YWIXM ; 
  10 FG0YWPTX FG0YWPTX ; 
  10 FG0YWIND FG0YWIND ; 
  10 FG0YWID2 FG0YWID2 ; 
  10 FG0YWIDX FG0YWIDX [4] ; 
  10 FG0YWMAX FG0YWMAX ; 
  10 FG0YWRNG FG0YWRNG [4] ; 
    15 FG0YWRCC FG0YWRCC ; 
    15 FG0YWRMO FG0YWRMO ; 
  10 FG0YWCSB FG0YWCSB ; 
  10 XPLKEY XPLKEY ; 
    15 XPLCD XPLCD ; 
    15 XGPCD XGPCD ; 
  10 XDVCD XDVCD ; 
  10 XCTCD XCTCD ; 
  10 FG0YWTYP FG0YWTYP [2] ; 
  10 FG0YWDAT FG0YWDAT ; 
    15 FG0YWCC FG0YWCC ; 
    15 FG0YWYM FG0YWYM ; 
      20 FG0YWYY FG0YWYY ; 
      20 FG0YWMM FG0YWMM ; 
  10 FFABCIND FFABCIND ; 
  10 FG0YWTOT FG0YWTOT ; 
  10 FG0YWQTY FG0YWQTY ; 
  10 FFBBCPCT FFBBCPCT ; 
  10 FG0YWPCT FG0YWPCT ; 
  10 FG0YCKDT FG0YCKDT ; 
    15 FG0YCKCC FG0YCKCC ; 
    15 FG0YCKYYMM FG0YCKYYMM ; 
      20 FG0YCKYY FG0YCKYY ; 
      20 FG0YCKMM FG0YCKMM ; 
  10 FG0YSVDT FG0YSVDT ; 
    15 FG0YSVCC FG0YSVCC ; 
    15 FG0YSVYYMM FG0YSVYYMM ; 
      20 FG0YSVYY FG0YSVYY ; 
      20 FG0YSVMM FG0YSVMM ; 
end // end FG0YW00

//*** RECORD=FG0YW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record FG0YW01 type basicRecord
  10 FFZBEGMO FFZBEGMO ; 
    15 FFZBCC FFZBCC ; 
    15 FFZBYYMM FFZBYYMM ; 
  10 FFZENDMO FFZENDMO ; 
    15 FFZECC FFZECC ; 
    15 FFZEYYMM FFZEYYMM ; 
  10 XPLCD XPLCD ; 
  10 XPLSDESC XPLSDESC ; 
  10 FG0YMVAR FG0YMVAR ; 
  10 FG0YMSEL FG0YMSEL [4] ; 
  10 FG0YWFMO FG0YWFMO [48] ; 
    15 FG0YWFCC FG0YWFCC ; 
    15 FG0YMFMO FG0YMFMO ; 
  10 FFBBCPCT FFBBCPCT [36] ; 
  10 FG0YMPCT FG0YMPCT [12] ; 
  10 FG0YMQTY FG0YMQTY [36] ; 
  10 FF6DMFCT FF6DMFCT [36] ; 
  10 FG0YMTOT FG0YMTOT [4] ; 
  10 FG0YWTOT FG0YWTOT [4] ; 
end // end FG0YW01

// Century work area
DataItem FG0YCKCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date work area
DataItem FG0YCKDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Month work area
DataItem FG0YCKMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Year work area
DataItem FG0YCKYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Year & month work area
DataItem FG0YCKYYMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Forecast yymm
DataItem FG0YMFMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FF_BGRD_CLSOUT_PCT
DataItem FG0YMPCT decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// monthly qty in CHAR format
DataItem FG0YMQTY char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line selection
DataItem FG0YMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total qty in CHAR format
DataItem FG0YMTOT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Variance
DataItem FG0YMVAR decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century work area
DataItem FG0YSVCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date work area
DataItem FG0YSVDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Month work area
DataItem FG0YSVMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Year work area
DataItem FG0YSVYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Year & month work area
DataItem FG0YSVYYMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Century work area
DataItem FG0YWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current month position
DataItem FG0YWCSB num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date work area
DataItem FG0YWDAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Forecast cc
DataItem FG0YWFCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Forecast month
DataItem FG0YWFMO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Second index for selection chk
DataItem FG0YWID2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Starting point for indicator
DataItem FG0YWIDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Year indicator
DataItem FG0YWIND num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Display index
DataItem FG0YWIXM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Max. no of columns for a line
DataItem FG0YWMAX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Month work area
DataItem FG0YWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Percent work area
DataItem FG0YWPCT decimal(5,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Percent index
DataItem FG0YWPTX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Qty work area
DataItem FG0YWQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CC
DataItem FG0YWRCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YYMM
DataItem FG0YWRMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ending month of hist range
DataItem FG0YWRNG num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of cursor switch
DataItem FG0YWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// row found switch
DataItem FG0YWSWE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FG0YWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FG0YWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index setup flag
DataItem FG0YWSWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Total qty in NUM format
DataItem FG0YWTOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Type group code
DataItem FG0YWTYP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Year & month work area
DataItem FG0YWYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Year work area
DataItem FG0YWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

