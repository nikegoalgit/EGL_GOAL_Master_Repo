package fg0h;

import corpcom1.CACHGFL;
import corpcom2.XPCREC;
import corpcom2.XPLREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFF001;
import corpcom3.XPXPL01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS-FF5500;
import corpcom4.XSFFS-FF5520;
import corpcom4.XSFFS01;
import corpcom4.XSFFS10;
import corpcom4.XSFFS11;
import corpcom4.XSFFS35;
import corpcom4.XSFFS50;
import corpcom4.XSFFS58;
import corpcom4.XSFFS60;
import corpcom4.XSFFS61;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx2.XPCCD;
import corpx2.XPCSDESC;
import corpy2.YPGTBL;
import ff.common.*;
import fh.common.FH3REC;
import fh.common.FH6REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=FG0H ****
// This application allows a user to create or inquire on a
// long range sales forecast by category.  If this
// application is invoked from a menu, the user may only create
// a new forecast.  If this application is invoked by selecting
// from a list of existing forecasts, the user may inquire on
// the existing forecast and modify it to create a new forecast
// 
// There are two different screens that may be displayed.
// 
// The first screen displayed to the user shows the forecast
// identification and each category in the forecast, along
// with the current forecast quantities compared to either the
// historical sales quantities or the historical demand
// quantities for the category.  The user specifies whether
// the comparison is to be against sales or demand and the
// number of years to be used for the comparison.  The current
// forecast quantities may be adjusted by the user either by
// quantity or by percentage.  The user may scroll forward or
// backward to view all the product lines in the forecast.
// The forecast may be saved for later viewing by pressing
// the appropriate attention key.  If a category is selected,
// that category is passed to another application, FG0I, Long
// Range Forecast By style group, to display the forecast
// for the product style groups in that category.
// 
// The second screen is displayed when the appropriate
// attention key is pressed on the first screen.  It shows the
// forecast identification and each product category in the
// forecast, along with historical sales quantities comapred to
// the historical demand quantities.  The user may scroll
// forward and backward to view all the product lines.  The
// user may request the first screen be displayed by pressing
// the appropriate attention key.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from either of the screens.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          11/20/89  rgilli  New application.
//          06/25/90  JJUCH   Fixed the problem of missing
//                            historical demand qtys.
// FF1017   07/11/90  JJUCH   Added PF19 key.
// FF1016   07/31/90  JJUCH   Disallowed to fcst current main
//                            buy month and all prior months.
// FF#134   08/21/90  SFORD   Set job completion msg flag = 'y'
// Fix      08/30/90  JJUCH   Fixed -911 clear FFWREC problem.
// FF1029   10/04/90  MDANGE  Fixed to calculate historical
//                            percents and display on screen.
// FF1028   10/08/90  MDANGE  Fixed various bugs that caused
//                            the category percent total to not
//                            = 100%.
// Fix      10/29/90  JJUCH   Fixed wrong err msg when select
//                            category and pf17-expl clr.
// FF1071   02/22/90  JJUCH   Modified the calculation for DMD.
// Fix      04/12/91  JJUCH   Correct the module id and SQL
//                            code checking in FG0HS60.
// Fix      04/17/91  JJUCH   Disable PF16:EXP-CAT function.
// Fix      06/26/91  JJUCH   Spell out PF14 function key.
// FF382    03/03/93  JJUCH   Change to accomodate VWDGRP01
//                             table change. (add user id)
// FF394    03/23/93  JJUCH   Change to send report to BUNDLE.
// FF396    04/12/93  JJUCH   Fixed the total pct problem of
//                            not adding to 100.
// FF399    04/22/93  JJUCH   Correct the problem of calculat-
//                            ing fcst dmd in current month.
//                            Need to use contemp. month.
//          09/08/93  JJUCH   Convert to CSP V4.1 version.
// FH140    02/10/94  JJUCH   Change to get actual prop and
//                            authorized future seperately and
//                            add them together to get hist dmd
// FF409    05/02/94  MWALKE  - switch sales to need month
//                            - delete print option
// FF175    12/10/96  DSMITH  Changed the date range fill
//                            character to '0'.
// *********************
Program FG0H type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF5REC FF5REC; // record
  FF7REC FF7REC; // record
  FFCREC FFCREC; // record
  FFDREC FFDREC; // record
  FFEREC FFEREC; // record
  FFFREC FFFREC; // record
  FFGREC FFGREC; // record
  FFIREC FFIREC; // record
  FFJREC FFJREC; // record
  FFKREC FFKREC; // record
  FFVREC FFVREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFYREC FFYREC; // record
  FFZREC FFZREC; // record
  FG0HW00 FG0HW00; // record
  FG0HW01 FG0HW01; // record
  FG0HW02 FG0HW02; // record
  FG0HW03 FG0HW03; // record
  FG0HW04 FG0HW04; // record
  FH3REC FH3REC; // record
  FH6REC FH6REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XPLREC XPLREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPLTBL; // table
  use XPCTBL; // table
  use YPGTBL; // table
  use FG0HM.FG0HM001,  // forms
      FG0HM.FG0HM002,
      FG0HM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FFFREC empty; /* Special function parameters*/
    set FG0HM001 initial; /* M001 input/output*/
    set FG0HM002 initial; /* M002 input/output*/
    set FG0HW00 empty; /* Working storage*/
    set FG0HW01 empty; /* M001 display storage*/
    set FG0HW02 empty; /* M001 temporary storage*/
    set FG0HW03 empty; /* M001 totals display storage*/
    set FG0HW04 empty; /* M002 temporary storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine work area*/
    set TA5REC empty; /* temporary storage area*/
    set TA6REC empty; /* jcl submit work area*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    ;
    FG0HW00.XXXTSLEN = 1482; /* temp storage length*/
    ;
    XPCREC.XGPCD = COMMAREA.XGPCD; /* used to obtain category desc*/
    ;
    FG0HW00.FG0HWSWR = "N"; /* Request for data switch*/
    FG0HW00.FG0HWSWF = "Y"; /* format screen data switch*/
    FG0HW00.FG0HWSWD = "1"; /* map switch*/
    ;
    FG0HW01.FG0HWYOP = 1; /* default value year option*/
    FG0HW01.FG0HWHOP = "S"; /* default value history option*/
    ;
    FG0HW00.FG0HWYDS[1] = "1 YEAR AGO"; /* year 1 desc*/
    FG0HW00.FG0HWYDS[2] = "2 YEAR AGO"; /* year 2 desc*/
    FG0HW00.FG0HWYDS[3] = "3 YEAR AGO"; /* year 3 desc*/
    ;
    FG0HW00.FG0HWHDS[1] = "HIST NEED MO SALES";
    FG0HW00.FG0HWHDS[2] = "HISTORICAL DEMAND ";
    ;
     /* ---------------------------------------------------*/
     /* Clear unused fields*/
     /* ---------------------------------------------------*/
    ;
    FFWREC.XPCCD = " "; /* Clear product category code*/
    FFWREC.XPCABRV = " "; /* Clear product category abrv*/
    FFWREC.SYBSTGNB = " "; /* Clear style group number*/
    FFWREC.SYBSTGNM = " "; /* Clear style group name*/
    FFWREC.SY1STNBR = " "; /* Clear style number*/
    FFWREC.SY2CLRID = " "; /* Clear color id*/
    FFWREC.XDMCD = " "; /* Clear dimension code*/
    FFWREC.SY1SSTNM = " "; /* Clear short style name*/
    FFWREC.SY2CLRAB = " "; /* Clear color abrv*/
    FFWREC.XDMABRV = " "; /* Clear dimension abrv*/
    FFWREC.ZRGCD = " "; /* Clear region code*/
    FFWREC.ZRGABRV = " "; /* Clear region abrv*/
    FFWREC.XCTCD = " "; /* Clear country code*/
    FFWREC.XCTABRV = " "; /* Clear country abrv*/
    ;
     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/
    ;
    if (FFWREC.YPGCD == " ")
      FFWREC.YPGCD = "01";
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end
    ;
    if (FFWREC.FFABEGMO != 0
     && FFWREC.FFAENDMO != 0
     && FFWREC.XPLCD != " ")
      FG0HW00.FG0HWSWR = "Y"; /* set data request flag*/
    end
    ;
    if (FFWREC.FFEWSNBR != 0)
      FG0HW00.FG0HWSWR = "Y"; /* set data request flag*/
      FG0HW00.FG0HWFCF = "Y"; /* forecast passed flag*/
    end
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0H001; /* Converse the main process*/
    ;
    FG0H001: FG0H001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FG0H001; /* Converse the main process*/
    ;
  end // end main
end // end FG0H

// Get ivc ctff dt from vffctl01
Function FG0H-1111()
   /* ------------------------------------------------------------*/
   /* Obtain invoice cutoff date from dfcast.vffctl01.*/
   /* ------------------------------------------------------------*/
  ;
  set FF1REC empty; /* Clear row storage area*/
  ;
  FF1REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FF1REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "111"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VFFCTL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF1REC.FF1GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0H-1111

// Calc caov dates
Function FG0H-1113()
   /* ------------------------------------------------------------*/
   /* Calculate:*/
   /* - current date*/
   /* - current date minus 1 month*/
   /* - current date minus 2 months*/
   /* - current date minus 3 months*/
   /* - current date minus 4 months*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* Determine current month.*/
   /* ------------------------------------------------------------*/
  ;
  if (FF1REC.FF1IVCDT != 0) /* ===> Invoice cutoff date*/
    FG0HW00.FG0HW-CCYYMMDD = FF1REC.FF1IVCDT;
    ;
    if (XX0XW01.XX0XWDAT > FF1REC.FF1IVCDT) /* ===> curr >  ivc date*/
      FG0HW00.FG0HW-CURR-MO = FG0HW00.FG0HW-CCYYMM;
    else
      ;
      if (FG0HW00.FG0HW-MM == 1)
        FG0HW00.FG0HW-MM = 12;
        ;
        FG0HW00.FG0HW-CCYY = FG0HW00.FG0HW-CCYY - 1;
        FG0HW00.FG0HW-CURR-MO = FG0HW00.FG0HW-CCYYMM;
        ;
      else
        FG0HW00.FG0HW-MM = FG0HW00.FG0HW-MM - 1;
        FG0HW00.FG0HW-CURR-MO = FG0HW00.FG0HW-CCYYMM;
      end
      ;
    end
  else
    FG0HW00.FG0HW-CURR-MO = 0;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Calculate current month minus 1 month.*/
   /* Calculate current month minus 2 months.*/
   /* Calculate current month minus 3 months.*/
   /* Calculate current month minus 4 months.*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW00.FG0HWWDT = FG0HW00.FG0HW-CURR-MO; /* work date*/
  if (FG0HW00.FG0HWWMM == 1)
    FG0HW00.FG0HWWMM = 12;
    if (FG0HW00.FG0HWWYY == 00)
      FG0HW00.FG0HWWYY = 99;
      FG0HW00.FG0HWWCC = FG0HW00.FG0HWWCC - 1;
    else
      FG0HW00.FG0HWWYY = FG0HW00.FG0HWWYY - 1;
    end
  else
    FG0HW00.FG0HWWMM = FG0HW00.FG0HWWMM - 1;
  end
  ;
  FG0HW00.FG0HW-CURR-MO-MINUS1 = FG0HW00.FG0HWWDT;
  ;
  ;
  if (FG0HW00.FG0HWWMM == 1)
    FG0HW00.FG0HWWMM = 12;
    if (FG0HW00.FG0HWWYY == 00)
      FG0HW00.FG0HWWYY = 99;
      FG0HW00.FG0HWWCC = FG0HW00.FG0HWWCC - 1;
    else
      FG0HW00.FG0HWWYY = FG0HW00.FG0HWWYY - 1;
    end
  else
    FG0HW00.FG0HWWMM = FG0HW00.FG0HWWMM - 1;
  end
  ;
  FG0HW00.FG0HW-CURR-MO-MINUS2 = FG0HW00.FG0HWWDT;
  ;
  ;
  if (FG0HW00.FG0HWWMM == 1)
    FG0HW00.FG0HWWMM = 12;
    if (FG0HW00.FG0HWWYY == 00)
      FG0HW00.FG0HWWYY = 99;
      FG0HW00.FG0HWWCC = FG0HW00.FG0HWWCC - 1;
    else
      FG0HW00.FG0HWWYY = FG0HW00.FG0HWWYY - 1;
    end
  else
    FG0HW00.FG0HWWMM = FG0HW00.FG0HWWMM - 1;
  end
  ;
  FG0HW00.FG0HW-CURR-MO-MINUS3 = FG0HW00.FG0HWWDT;
  ;
  ;
  if (FG0HW00.FG0HWWMM == 1)
    FG0HW00.FG0HWWMM = 12;
    if (FG0HW00.FG0HWWYY == 00)
      FG0HW00.FG0HWWYY = 99;
      FG0HW00.FG0HWWCC = FG0HW00.FG0HWWCC - 1;
    else
      FG0HW00.FG0HWWYY = FG0HW00.FG0HWWYY - 1;
    end
  else
    FG0HW00.FG0HWWMM = FG0HW00.FG0HWWMM - 1;
  end
  ;
  FG0HW00.FG0HW-CURR-MO-MINUS4 = FG0HW00.FG0HWWDT;
  ;
  ;
end // end FG0H-1113

// Obtain actl nd mo sls qty
Function FG0H-1141()
   /* ------------------------------------------------------------*/
   /* Obtain actual need month sales quantities.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* Init work storage quantity fields.*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW00.FG0HWUHS = 0; /* init w/s historical sale units*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain actual need month sales quantities from dfhist.vctshp01.*/
   /* ------------------------------------------------------------*/
  ;
  FG0H-11411();
  FG0HW00.FG0HWUHS = FH6REC.FH5MSHQT;
  ;
   /* --------------------------------------------------------*/
   /* Check for carryover*/
   /* --------------------------------------------------------*/
  ;
  if (FG0HW00.FG0HW-CURR-MO-MINUS1 >= FFFREC.FFFBEGMO
   && FG0HW00.FG0HW-CURR-MO-MINUS1 <= FFFREC.FFFENDMO)
    FG0HW00.FG0HW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
    FG0HW00.FG0HW-HOLD-END-MO = FFFREC.FFFENDMO;
    FFFREC.FFFBEGMO = FG0HW00.FG0HW-CURR-MO-MINUS1;
    FFFREC.FFFENDMO = FG0HW00.FG0HW-CURR-MO-MINUS1;
    ;
    FFFREC.FFFFUNCD = "C1"; /* function code*/
    FG0H-11413(); /* get open qtys from vfhcat01*/
    FG0HW00.FG0HWUHS = FG0HW00.FG0HWUHS + FH3REC.FH1PAQTY;
    ;
    FFFREC.FFFBEGMO = FG0HW00.FG0HW-HOLD-BEG-MO;
    FFFREC.FFFENDMO = FG0HW00.FG0HW-HOLD-END-MO;
  end
  ;
  if (FG0HW00.FG0HW-CURR-MO-MINUS2 >= FFFREC.FFFBEGMO
   && FG0HW00.FG0HW-CURR-MO-MINUS2 <= FFFREC.FFFENDMO)
    FG0HW00.FG0HW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
    FG0HW00.FG0HW-HOLD-END-MO = FFFREC.FFFENDMO;
    FFFREC.FFFBEGMO = FG0HW00.FG0HW-CURR-MO-MINUS2;
    FFFREC.FFFENDMO = FG0HW00.FG0HW-CURR-MO-MINUS2;
    ;
    FFFREC.FFFFUNCD = "C2"; /* function code*/
    FG0H-11413(); /* get open qtys from vfhcat01*/
    FG0HW00.FG0HWUHS = FG0HW00.FG0HWUHS + FH3REC.FH1PAQTY;
    ;
    FFFREC.FFFBEGMO = FG0HW00.FG0HW-HOLD-BEG-MO;
    FFFREC.FFFENDMO = FG0HW00.FG0HW-HOLD-END-MO;
  end
  ;
  if (FG0HW00.FG0HW-CURR-MO-MINUS3 >= FFFREC.FFFBEGMO
   && FG0HW00.FG0HW-CURR-MO-MINUS3 <= FFFREC.FFFENDMO)
    FG0HW00.FG0HW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
    FG0HW00.FG0HW-HOLD-END-MO = FFFREC.FFFENDMO;
    FFFREC.FFFBEGMO = FG0HW00.FG0HW-CURR-MO-MINUS3;
    FFFREC.FFFENDMO = FG0HW00.FG0HW-CURR-MO-MINUS3;
    ;
    set FH3REC empty;
    FH3REC.XLCCD = "10"; /* life cycle code*/
    FH3REC.XQACD = "01"; /* quality code*/
    FH3REC.YSMXOT = "*"; /* sum code*/
    FG0HS05(); /* get open qtys from vfhcat01*/
    FH3REC.FH1PAQTY = FH3REC.FH1ALQTY + FH3REC.FH1PAQTY;
    FH3REC.FH1PAQTY = mathLib.round(FH3REC.FH1PAQTY * .5, -mathLib.decimals(FH3REC.FH1PAQTY));
    FG0HW00.FG0HWUHS = FG0HW00.FG0HWUHS + FH3REC.FH1PAQTY;
    ;
    FFFREC.FFFBEGMO = FG0HW00.FG0HW-HOLD-BEG-MO;
    FFFREC.FFFENDMO = FG0HW00.FG0HW-HOLD-END-MO;
  end
  ;
  if (FG0HW00.FG0HW-CURR-MO-MINUS4 >= FFFREC.FFFBEGMO
   && FG0HW00.FG0HW-CURR-MO-MINUS4 <= FFFREC.FFFENDMO)
    FG0HW00.FG0HW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
    FG0HW00.FG0HW-HOLD-END-MO = FFFREC.FFFENDMO;
    FFFREC.FFFBEGMO = FG0HW00.FG0HW-CURR-MO-MINUS4;
    FFFREC.FFFENDMO = FG0HW00.FG0HW-CURR-MO-MINUS4;
    ;
    set FH3REC empty;
    FH3REC.XLCCD = "10"; /* life cycle code*/
    FH3REC.XQACD = "01"; /* quality code*/
    FH3REC.YSMXOT = "*"; /* sum code*/
    FG0HS05(); /* get open qtys from vfhcat01*/
    FH3REC.FH1PAQTY = FH3REC.FH1ALQTY + FH3REC.FH1PAQTY;
    FH3REC.FH1PAQTY = mathLib.round(FH3REC.FH1PAQTY * .5, -mathLib.decimals(FH3REC.FH1PAQTY));
    FG0HW00.FG0HWUHS = FG0HW00.FG0HWUHS + FH3REC.FH1PAQTY;
    ;
    FFFREC.FFFBEGMO = FG0HW00.FG0HW-HOLD-BEG-MO;
    FFFREC.FFFENDMO = FG0HW00.FG0HW-HOLD-END-MO;
  end
  ;
end // end FG0H-1141

// Get sls from dfhist.vctshp01
Function FG0H-11411()
   /* ------------------------------------------------------------*/
   /* Obtain actual need month sales quantities.*/
   /* Load FH6REC record - dfhist.vctshp01.*/
   /* ------------------------------------------------------------*/
  ;
  set FH6REC empty;
  ;
  FH6REC.XPCCD = FG0HW02.XPCCD[FG0HWIDX]; /* product category*/
  FH6REC.XPRCD = FFWREC.YPGCD; /* product type code*/
  FH6REC.XLCCD = "10"; /* life cycle code*/
  FH6REC.XQACD = "01"; /* quality code*/
  FH6REC.YSMXOT = "*"; /* summ-xot-cd*/
  TA1PGMNM = "FG0H141"; /* calling process*/
  ;
   /* --------------------------------------------------*/
   /* Select sum on dfhist.vctshp01 table*/
   /* --------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "SN"; /* function code*/
  ;
  XSFFS-FF5520();
  ;
  ;
end // end FG0H-11411

// Get 1 & 2 mo caov from vfhcat
Function FG0H-11413()
   /* ------------------------------------------------------------*/
   /* Obtain carryover quantities from dfhist.vfhcat01 for 1 and 2*/
   /* months prior to current month.*/
   /* ------------------------------------------------------------*/
  ;
  set FH3REC empty;
  ;
   /* division code is used here to pass line code to ff5500*/
  FH3REC.XDVCD = FFWREC.XPLCD; /* prod line code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* product type code*/
  FH3REC.XPCCD = FG0HW02.XPCCD[FG0HWIDX]; /* prod catg code*/
  FH3REC.XLCCD = "10"; /* life cycle code*/
  FH3REC.XQACD = "01"; /* quality code*/
  FH3REC.YSMXOT = "*"; /* xxx-sum-xot-cd*/
  FH3REC.FH1PNAC = "*"; /* nacct fl*/
  TA1PGMNM = "FG0H114"; /* calling process*/
  ;
   /* --------------------------------------------------*/
   /* select sum on dfhist.vfhcat01 table*/
   /* --------------------------------------------------*/
  ;
  XSFFS-FF5500();
  ;
  ;
end // end FG0H-11413

// Obtain fcst nd mo sls qty
Function FG0H-1143()
   /* ----------------------------------------------------------*/
   /* Obtain forecasted sales from dfcast.vmcat001.*/
   /* ----------------------------------------------------------*/
  ;
   /* ----------------------------------------------------------*/
   /* Init numeric work fields*/
   /* ----------------------------------------------------------*/
  ;
  FG0HW00.FG0HWUHS = 0; /* init w/s historical sale unit*/
  ;
   /* --------------------------------------------------------*/
   /* Calculate history sales # yr prior: sales fcst*/
   /* --------------------------------------------------------*/
  ;
  FG0HS04(); /* select/sum dfcast.vmcat001*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    FG0HW00.FG0HWUHS = FF7REC.FF6SLFCT;
  end
  ;
   /* --------------------------------------------------------*/
   /* Check for carryover quantities.*/
   /* --------------------------------------------------------*/
  ;
  if (FG0HW00.FG0HW-CURR-MO <= FFFREC.FFFENDMO
   && FG0HW00.FG0HW-CURR-MO >= FFFREC.FFFBEGMO) /* curr mo within range*/
    FG0HW00.FG0HW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
    FG0HW00.FG0HW-HOLD-END-MO = FFFREC.FFFENDMO;
    FFFREC.FFFBEGMO = FG0HW00.FG0HW-CURR-MO-MINUS1;
    FFFREC.FFFENDMO = FG0HW00.FG0HW-CURR-MO-MINUS1;
    ;
    FG0HS04(); /* select/sum dfcast.vmcat001*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      FG0HW00.FG0HWUHS = FG0HW00.FG0HWUHS - FF7REC.FF6SLFCT;
    end
    ;
    FFFREC.FFFBEGMO = FG0HW00.FG0HW-HOLD-BEG-MO;
    FFFREC.FFFENDMO = FG0HW00.FG0HW-HOLD-END-MO;
  end
end // end FG0H-1143

// Obtain actl demand qty
Function FG0H-1151()
   /* ------------------------------------------------------------*/
   /* Obtain actual demand quantities from dfhist.vfhcat01.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* Init work storage quantity fields.*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW00.FG0HWUHD = 0; /* init w/s historical dmnd units*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain Actual futures demand quantities.*/
   /* ------------------------------------------------------------*/
  ;
  FG0H-11511();
  ;
   /* --------------------------------------*/
   /* Obtain prop demand quantities*/
   /* --------------------------------------*/
  ;
  set FH3REC empty;
  ;
  FH3REC.XLCCD = "10"; /* life cycle code*/
  FH3REC.XQACD = "01"; /* quality code*/
  FH3REC.YSMXOT = "PR"; /* sum code*/
  ;
  FG0HS05();
  ;
  FG0HW00.FG0HWUHD = FG0HW00.FG0HWUHD + FH3REC.FH1PAQTY + FH3REC.FH1ALQTY   + FH3REC.FH2SHP + FH3REC.FH3CNCL;
  ;
  ;
end // end FG0H-1151

// Obtain actl futures demand
Function FG0H-11511()
   /* ---------------------------------------------------------------*/
   /* Determine which futures demand fields to use by:*/
   /* If ending date less than 199206*/
   /* Use accumulated demand*/
   /* Else if ending date greater than 199205*/
   /* Use frozen authorized futures demand*/
   /* Otherwise a mixed range exists*/
   /* Use accumulated demand for all dates less than 199206*/
   /* Use frozen authorized futures demand for all dates greater*/
   /* than 199205*/
   /* ---------------------------------------------------------------*/
  ;
  if (FFFREC.FFFENDMO < 199206) /* Whole range before 199206*/
    set FH3REC empty;
    FH3REC.XLCCD = "10"; /* life cycle code*/
    FH3REC.XQACD = "01"; /* quality code*/
    FH3REC.YSMXOT = "FT"; /* sum code*/
    FG0HS05(); /* use actual future*/
    FG0HW00.FG0HWUHD = FH3REC.FH1PAQTY + FH3REC.FH1ALQTY +     FH3REC.FH2SHP + FH3REC.FH3CNCL;
    ;
  else
    if (FFFREC.FFFBEGMO >= 199206) /* Whole range beyond 199206*/
      set FH3REC empty;
      FH3REC.XLCCD = "10"; /* life cycle code*/
      FH3REC.XQACD = "01"; /* quality code*/
      FH3REC.YSMXOT = "FT"; /* sum code*/
      FG0HS05(); /* use actual future*/
      FG0HW00.FG0HWUHD = FH3REC.FH-FRZ-PRAL-QTY + FH3REC.FH-FRZ-ALOC-QTY +       FH3REC.FH-FRZ-SHP-QTY + FH3REC.FH-FRZ-CNCL-QTY;
      ;
    else
      FG0HW00.FG0HW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
      FG0HW00.FG0HW-HOLD-END-MO = FFFREC.FFFENDMO;
      ;
      FFFREC.FFFENDMO = 199205;
      set FH3REC empty;
      FH3REC.XLCCD = "10"; /* life cycle code*/
      FH3REC.XQACD = "01"; /* quality code*/
      FH3REC.YSMXOT = "FT"; /* sum code*/
      FG0HS05(); /* use actual future*/
      FG0HW00.FG0HWUHD = FH3REC.FH1PAQTY + FH3REC.FH1ALQTY +       FH3REC.FH2SHP + FH3REC.FH3CNCL;
      ;
      FFFREC.FFFBEGMO = 199206;
      FFFREC.FFFENDMO = FG0HW00.FG0HW-HOLD-END-MO;
      set FH3REC empty;
      FH3REC.XLCCD = "10"; /* life cycle code*/
      FH3REC.XQACD = "01"; /* quality code*/
      FH3REC.YSMXOT = "FT"; /* sum code*/
      FG0HS05(); /* use actual future*/
      FG0HW00.FG0HWUHD = FG0HW00.FG0HWUHD + FH3REC.FH-FRZ-PRAL-QTY +       FH3REC.FH-FRZ-ALOC-QTY + FH3REC.FH-FRZ-SHP-QTY +       FH3REC.FH-FRZ-CNCL-QTY;
      ;
      FFFREC.FFFBEGMO = FG0HW00.FG0HW-HOLD-BEG-MO; /* restore dates*/
      FFFREC.FFFENDMO = FG0HW00.FG0HW-HOLD-END-MO;
    end
  end
  ;
  ;
end // end FG0H-11511

// Obtain fcst demand qty
Function FG0H-1153()
   /* ----------------------------------------------------------*/
   /* Obtain forecasted demand from dfcast.vmcat001.*/
   /* ----------------------------------------------------------*/
  ;
   /* ----------------------------------------------------------*/
   /* Init numeric work fields*/
   /* ----------------------------------------------------------*/
  ;
  FG0HW00.FG0HWUHD = 0; /* init w/s historical dmnd unit*/
  ;
   /* --------------------------------------------------------*/
   /* Obtain forecasted demand*/
   /* --------------------------------------------------------*/
  ;
  FG0HS04(); /* select/sum dfcast.vmcat001*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    FG0HW00.FG0HWUHD = FF7REC.FF6DMFCT;
  end
  ;
  ;
end // end FG0H-1153

// Inquire/maintain a table row
Function FG0H001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HW00.FG0HWSWD == "1") /* Map 1 was requested*/
    ;
    FG0H100(); /* Display map 1*/
    ;
  else
    ;
    if (FG0HW00.FG0HWSWD == "2") /* Map 2 was requested*/
      ;
      FG0H200(); /* Display map 2*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/
      ;
      FFWREC.XXXMODID = "001"; /* Module identification*/
      FFWREC.XXXMSGNO = 10; /* Indicate system error*/
      ;
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = FG0HW00.FG0HWSWD; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
      ;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
      ;
      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/
      ;
      COMMAREA.CATOAP = "FG0A"; /* TO application*/
      ;
      XSFFS01(); /* Exit to another application*/
      ;
      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/
      ;
      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      ;
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
      ;
    end
    ;
  end
  ;
  ;
end // end FG0H001

// Inquire/maintain a table row
Function FG0H100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FG0H110(); /* Obtain the data to display*/
  ;
  FG0H120(); /* Format and display the map*/
  ;
  FG0H130(); /* Check attention identifier*/
  ;
  FG0H140(); /* Reset fields to normal intensity*/
  ;
  FG0H150(); /* Verify the entered data*/
  ;
  FG0H160(); /* Process valid input request*/
  ;
end // end FG0H100

// Obtain the data to display
Function FG0H110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HW00.FG0HWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  ;
  FG0HS01(); /* Purge any temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* Set map defaults*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW01.FG0HWYOP = 1;
  FG0HW01.FG0HWHOP = "S";
  ;
  FG0HW01.FG0HWUTT = FG0HW00.FG0HWSUT;
  FG0HW01.FG0HWTGT = FG0HW00.FG0HWSTG;
  ;
   /* ------------------------------------------------------------*/
   /* If work sheet number has been passed, obtain forecast*/
   /* information from dfcast.vwdgrp01 and dfcast.vwltyp01.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.FFEWSNBR != 0)
    ;
    FG0HS21(); /* Select dfcast.vwdgrp01 row*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      FFWREC.YSMXDV = "10"; /* load sum xdvcd*/
      FFWREC.FFABEGMO = FFEREC.FFABEGMO; /* load begin range*/
      FFWREC.FFAENDMO = FFEREC.FFAENDMO; /* load end range*/
    end
    ;
    FG0HS23(); /* Select dfcast.vwltyp01 row*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      FFWREC.XPLCD = FFIREC.XPLCD; /* product line code*/
      FFWREC.YPGCD = FFIREC.YPGCD; /* product type group*/
      FG0HW01.FG0HWUTT = FFIREC.FFEFCTGT; /* unit type target qty*/
      FG0HW01.FG0HWSTT = FFIREC.FFEFCTGT; /* save type target qty*/
      FFXREC.FFXNUMB = FFIREC.FFEFCTGT;
      XSFFS10();
      FG0HW01.FG0HWTGT = FFXREC.FFXCHAR; /* type target qty 1000*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Obtain product line and product group type descriptions*/
   /* ------------------------------------------------------------*/
  ;
  XPLREC.XGPCD = COMMAREA.XGPCD;
  XPLREC.XPLCD = FFWREC.XPLCD;
  if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
    FFWREC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
  end
  ;
  if (FFWREC.YPGCD in YPGTBL.YPGCD)
    FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
  end
  ;
   /* ------------------------------------------------------------*/
   /* Obtain current date using routine xx0xs01.*/
   /* Obtain invoice cutoff date from dfcast.vffctl01*/
   /* Calculate:*/
   /* - current date*/
   /* - current date minus 1 month*/
   /* - current date minus 2 months*/
   /* - current date minus 3 months*/
   /* - current date minus 4 months*/
   /* - range dates for 3 years prior to the requested date range*/
   /* Load the default create data.*/
   /* ------------------------------------------------------------*/
  FG0H111();
  ;
   /* ------------------------------------------------------------*/
   /* Select all categories for the product line and product type*/
   /* group from table dfcast.vffxrf01.*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW00.FG0HWIDX = 1; /* init index*/
  FG0HW00.FG0HWCFL = "N"; /* init vwcat001 data flag*/
  ;
  set FF2REC empty; /* init dfcast.vffxrf01 record*/
  FF2REC.YSMXDV = "10"; /* load dfcast.vffxrf01*/
  FF2REC.XPLCD = FFWREC.XPLCD;
  FF2REC.YPGCD = FFWREC.YPGCD;
  ;
  FG0HS02(); /* select set on dfcast.vffxrf01*/
  ;
  FG0HS03(); /* fetch first dfcast.vffxrf01 row*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0) /* process unitl end of dfcast.vffxrf01*/
    ;
    FG0HW02.XPCCD[FG0HWIDX] = FF2REC.XPCCD;
    XPCREC.XPCCD = FF2REC.XPCCD;
    if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
      FG0HW02.XPCSDESC[FG0HWIDX] = XPCTBL.XPCSDESC[sysVar.arrayIndex];
    end
    ;
    /* ------------------------------------------------------------*/
    /* Select/summarize dfcast.vmcat001 to get master qty,*/
    /* If no data exists default the master qty to zero.*/
    /* ------------------------------------------------------------*/
    ;
    FFFREC.FFFBEGMO = FFWREC.FFABEGMO; /* requested begin range*/
    FFFREC.FFFENDMO = FFWREC.FFAENDMO; /* requested end range*/
    ;
    FG0HS04(); /* select/sum dfcast.vmcat001*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      FG0HW02.FG0HWUCM[FG0HWIDX] = FF7REC.FF6SLFCT;
    end
    ;
    /* ------------------------------------------------------------*/
    /* Translate current sales master qty into thousands*/
    /* ------------------------------------------------------------*/
    ;
    FFXREC.FFXNUMB = FG0HW02.FG0HWUCM[FG0HWIDX];
    XSFFS10();
    FG0HW02.FG0HWCMQ[FG0HWIDX] = FFXREC.FFXCHAR;
    ;
    /* ------------------------------------------------------------*/
    /* Select dfcast.vrcat001 for season code, If no data exists*/
    /* default the season code to blank.*/
    /* ------------------------------------------------------------*/
    ;
    FG0H113();
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      FG0HW02.FFCDMIND[FG0HWIDX] = FFCREC.FFCDMIND;
    end
    ;
    /* ------------------------------------------------------------*/
    /* If the work sheet number was passed*/
    /* Obtain the forecast quantities from dfcast.vwcat001*/
    /* If not found, default forecast wuantities to zero*/
    /* ------------------------------------------------------------*/
    ;
    if (FFWREC.FFEWSNBR != 0)
      ;
      FG0HS06(); /* select dfcast.vwcat001*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0)
        if (FG0HW00.FG0HWIDX == 1) /* first time thru processing*/
          FG0HW01.FG0HWCDT = FFJREC.ZZZSDT; /* w/s date*/
        end
        FG0HW02.FG0HWSQT[FG0HWIDX] = FFJREC.FF6SLFCT;
        FG0HW02.FG0HWUQT[FG0HWIDX] = FFJREC.FF6SLFCT;
        FFXREC.FFXNUMB = FG0HW02.FG0HWUQT[FG0HWIDX];
        XSFFS10();
        FG0HW02.FG0HWQTY[FG0HWIDX] = FFXREC.FFXCHAR;
        FG0HW00.FG0HWCFL = "Y"; /* vwcat001 data found*/
        FG0HW02.FG0HWWKE[FG0HWIDX] = "Y"; /* Set worksheet exist flag*/
      end
    end
    ;
    /* ------------------------------------------------------------*/
    /* Obtain historical sales and demand qtys for range one year*/
    /* prior to requested range*/
    /* ------------------------------------------------------------*/
    ;
    FFFREC.FFFBEGMO = FG0HW01.FG0HWPBD[1]; /* current date*/
    FFFREC.FFFENDMO = FG0HW01.FG0HWPED[1];
    FG0HW00.FG0HWYIX = 1; /* indicate 1 year ago*/
    ;
    FG0H114(); /* get historical sales qty*/
    ;
    FFFREC.FFFBEGMO = FG0HW01.FG0HWPBD[1]; /* current date*/
    FFFREC.FFFENDMO = FG0HW01.FG0HWPED[1];
    ;
    FG0H115(); /* get historical demand qty*/
    ;
    FG0HW02.FG0HWUH1[FG0HWIDX] = FG0HW00.FG0HWUHS;
    FG0HW02.FG0HWHQ1[FG0HWIDX] = FG0HW00.FG0HWHST;
    ;
    FG0HW02.FG0HWUD1[FG0HWIDX] = FG0HW00.FG0HWUHD;
    FG0HW02.FG0HWDQ1[FG0HWIDX] = FG0HW00.FG0HWHDT;
    ;
    /* ------------------------------------------------------------*/
    /* Obtain historical sales and demand qtys for range two year*/
    /* prior to requested range*/
    /* ------------------------------------------------------------*/
    ;
    FFFREC.FFFBEGMO = FG0HW01.FG0HWPBD[2]; /* current date*/
    FFFREC.FFFENDMO = FG0HW01.FG0HWPED[2];
    FG0HW00.FG0HWYIX = 2; /* indicate 2 years ago*/
    ;
    FG0H114(); /* get historical sales qty*/
    ;
    FFFREC.FFFBEGMO = FG0HW01.FG0HWPBD[2]; /* current date*/
    FFFREC.FFFENDMO = FG0HW01.FG0HWPED[2];
    ;
    FG0H115(); /* get historical demand qty*/
    ;
    FG0HW02.FG0HWUH2[FG0HWIDX] = FG0HW00.FG0HWUHS;
    FG0HW02.FG0HWHQ2[FG0HWIDX] = FG0HW00.FG0HWHST;
    ;
    FG0HW02.FG0HWUD2[FG0HWIDX] = FG0HW00.FG0HWUHD;
    FG0HW02.FG0HWDQ2[FG0HWIDX] = FG0HW00.FG0HWHDT;
    ;
    /* ------------------------------------------------------------*/
    /* Obtain historical sales and demand qtys for range three*/
    /* years prior to requested range*/
    /* ------------------------------------------------------------*/
    ;
    FFFREC.FFFBEGMO = FG0HW01.FG0HWPBD[3]; /* current date*/
    FFFREC.FFFENDMO = FG0HW01.FG0HWPED[3];
    FG0HW00.FG0HWYIX = 3; /* indicate 3 years ago*/
    ;
    FG0H114(); /* get historical sales qty*/
    ;
    FFFREC.FFFBEGMO = FG0HW01.FG0HWPBD[3]; /* current date*/
    FFFREC.FFFENDMO = FG0HW01.FG0HWPED[3];
    ;
    FG0H115(); /* get historical demand qty*/
    ;
    FG0HW02.FG0HWUH3[FG0HWIDX] = FG0HW00.FG0HWUHS;
    FG0HW02.FG0HWHQ3[FG0HWIDX] = FG0HW00.FG0HWHST;
    ;
    FG0HW02.FG0HWUD3[FG0HWIDX] = FG0HW00.FG0HWUHD;
    FG0HW02.FG0HWDQ3[FG0HWIDX] = FG0HW00.FG0HWHDT;
    ;
    /* ------------------------------------------------------------*/
    /* Accumulate the current master qty total, forecast qty*/
    /* total, historical sales qty total, and historical demand*/
    /* qty total.*/
    /* ------------------------------------------------------------*/
    ;
    FG0HW03.FG0HWUCM = FG0HW02.FG0HWUCM[FG0HWIDX] + FG0HW03.FG0HWUCM;
    FG0HW03.FG0HWUQT = FG0HW02.FG0HWUQT[FG0HWIDX] + FG0HW03.FG0HWUQT;
    FG0HW03.FG0HWUHS[1] = FG0HW02.FG0HWUH1[FG0HWIDX] + FG0HW03.FG0HWUHS[1];
    FG0HW03.FG0HWUHS[2] = FG0HW02.FG0HWUH2[FG0HWIDX] + FG0HW03.FG0HWUHS[2];
    FG0HW03.FG0HWUHS[3] = FG0HW02.FG0HWUH3[FG0HWIDX] + FG0HW03.FG0HWUHS[3];
    FG0HW03.FG0HWUHD[1] = FG0HW02.FG0HWUD1[FG0HWIDX] + FG0HW03.FG0HWUHD[1];
    FG0HW03.FG0HWUHD[2] = FG0HW02.FG0HWUD2[FG0HWIDX] + FG0HW03.FG0HWUHD[2];
    FG0HW03.FG0HWUHD[3] = FG0HW02.FG0HWUD3[FG0HWIDX] + FG0HW03.FG0HWUHD[3];
    ;
    /* ------------------------------------------------------------*/
    /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0HW00.FG0HWIDX > 10) /* Page is full*/
      FG0HW02.FG0HWNLD = FG0HW00.FG0HWIDX; /* nbr of lines loaded*/
      FG0HW02.FG0HWTIX = FG0HW02.FG0HWNLD + 1; /* total index*/
      FG0HS07(); /* Add page to temp storage*/
    else
      FG0HW00.FG0HWIDX = FG0HW00.FG0HWIDX + 1;
    end
    ;
    FG0HS03(); /* fetch next dfcast.vffxrf01*/
    ;
  end
  ;
  FG0HS08(); /* close dfcast.vffxrf01 set*/
  ;
   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HW00.FG0HWIDX > 1) /* Page was formatted*/
    FG0HW02.FG0HWNLD = FG0HW00.FG0HWIDX - 1;
    FG0HW02.FG0HWTIX = FG0HW02.FG0HWNLD + 1; /* total index*/
    FG0HS07(); /* Add page to temp storage*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HW00.TA5TSQIX == 0) /* No pages formatted*/
    ;
    FFWREC.XXXMODID = "110"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/
    ;
    return; /* Exit to continue processing*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Translate the current master qty total, forecast qty*/
   /* total, historical sales qty total, and historical demand*/
   /* qty total from units to thousands*/
   /* ------------------------------------------------------------*/
  ;
  FG0H116();
  ;
   /* ------------------------------------------------------------*/
   /* Calculate variance qty : total forecast qty - target qty*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW01.FG0HWUVQ = FG0HW03.FG0HWUQT - FG0HW01.FG0HWUTT;
  ;
  FFXREC.FFXNUMB = FG0HW01.FG0HWUVQ;
  XSFFS10();
  FG0HW01.FG0HWVQT = FFXREC.FFXCHAR;
  ;
   /* ------------------------------------------------------------*/
   /* Caluculate variance percent :*/
   /* (variance qty * 100) / target qty*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HW01.FG0HWUTT != 0)
    FG0HW00.FG0HWNM1 = FG0HW01.FG0HWUVQ * 100;
    FG0HW01.FG0HWVPT = mathLib.round(FG0HW00.FG0HWNM1 / FG0HW01.FG0HWUTT, -mathLib.decimals(FG0HW01.FG0HWVPT));
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW00.XXXTSPAG = 1; /* Desired page number*/
  FG0HW00.FG0HWSWR = "N"; /* Request for data switch*/
  FG0HW01.CACHGFL = "Y"; /* data is available for change*/
  ;
end // end FG0H110

// Obtain program dates
Function FG0H111()
   /* ------------------------------------------------------------*/
   /* Obtain current date using routine xx0xs01.*/
   /* Obtain invoice cutoff date from dfcast.vffctl01*/
   /* Calculate:*/
   /* - current date*/
   /* - current date minus 1 month*/
   /* - current date minus 2 months*/
   /* - current date minus 3 months*/
   /* - current date minus 4 months*/
   /* - range dates for 3 years prior to the requested date range*/
   /* Load the default create data.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Get current date*/
   /* ------------------------------------------------------------*/
  ;
  XX0XS01();
  ;
  FG0HW00.FG0HW-CURR-MO = XX0XW01.XX0XWCYM; /* current date*/
  FG0HW00.FG0HW-CCYYMMDD = XX0XW01.XX0XWDAT; /* current date*/
  ;
   /* ------------------------------------------------------------*/
   /* Obtain invoice cutoff date from dfcast.vffctl01.  Used*/
   /* when gathering historical sales/dmnd information*/
   /* ------------------------------------------------------------*/
  ;
  FG0H-1111();
  ;
   /* ------------------------------------------------------------*/
   /* Calculate:*/
   /* - current date*/
   /* - current date minus 1 month*/
   /* - current date minus 2 months*/
   /* - current date minus 3 months*/
   /* - current date minus 4 months*/
   /* ------------------------------------------------------------*/
  ;
  FG0H-1113();
  ;
   /* ------------------------------------------------------------*/
   /* Calculate prior ranges if begin and end dates wer entered*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW00.FG0HWWBD = FFWREC.FFABEGMO;
  FG0HW00.FG0HWWED = FFWREC.FFAENDMO;
  ;
  FG0HW00.FG0HWIDX = 1; /* init index*/
  while (FG0HW00.FG0HWIDX <= 3) /* calculate 3 date ranges*/
    ;
    if (FG0HW00.FG0HWBYY == 00)
      FG0HW00.FG0HWBYY = 99;
      FG0HW00.FG0HWBCC = FG0HW00.FG0HWBCC - 1;
    else
      FG0HW00.FG0HWBYY = FG0HW00.FG0HWBYY - 1;
    end
    FG0HW01.FG0HWPBD[FG0HWIDX] = FG0HW00.FG0HWWBD; /* prior beg date*/
    ;
    if (FG0HW00.FG0HWEYY == 00)
      FG0HW00.FG0HWEYY = 99;
      FG0HW00.FG0HWECC = FG0HW00.FG0HWECC - 1;
    else
      FG0HW00.FG0HWEYY = FG0HW00.FG0HWEYY - 1;
    end
    FG0HW01.FG0HWPED[FG0HWIDX] = FG0HW00.FG0HWWED; /* prior end date*/
    ;
    FG0HW00.FG0HWIDX = FG0HW00.FG0HWIDX + 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Set default create date.*/
   /* note: if dfcast.vwcat001 row exists its standard change*/
   /* date will become the create date.*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW01.FG0HWCDT = VGVar.currentShortGregorianDate; /* created date default*/
  ;
   /* ------------------------------------------------------------*/
   /* Set ffzrec default dates*/
   /* ------------------------------------------------------------*/
  ;
  FFZREC.FFZBEGMO = FFWREC.FFABEGMO;
  FFZREC.FFZENDMO = FFWREC.FFAENDMO;
  ;
end // end FG0H111

// fetch dfcast.vrcat001 rec
Function FG0H113()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vrcat001 table.*/
   /* ------------------------------------------------------------*/
  ;
  set FFCREC empty; /* Clear row storage area*/
  ;
  FFCREC.FFABEGMO = FFWREC.FFABEGMO; /* being dt range*/
  FFCREC.FFAENDMO = FFWREC.FFAENDMO; /* end dt range*/
  FFCREC.YPGCD = FFWREC.YPGCD; /* product type code*/
  FFCREC.XPCCD = FG0HW02.XPCCD[FG0HWIDX]; /* product cat code*/
  ;
  try
    call "IO3760" ("S ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "113"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VRCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0H113

// Calculate sales
Function FG0H114()
   /* ---------------------------------------------------------------------*/
   /* Determine if the date range is all forecast, all actual, or*/
   /* mixed.*/
   /* Translate sales quantities from units to thousands using common*/
   /* routine xsffs10.*/
   /* ---------------------------------------------------------------------*/
  ;
  if (FG0HW01.FG0HWPED[FG0HWYIX] < FG0HW00.FG0HW-CURR-MO) /* all actl*/
    FG0H-1141();
    FFXREC.FFXNUMB = FG0HW00.FG0HWUHS;
    XSFFS10(); /* translate history sale*/
    FG0HW00.FG0HWHST = FFXREC.FFXCHAR;
    ;
  else
    if (FG0HW01.FG0HWPBD[FG0HWYIX] >= FG0HW00.FG0HW-CURR-MO) /* all fcst*/
      FG0H-1143();
      FFXREC.FFXNUMB = FG0HW00.FG0HWUHS;
      XSFFS10(); /* translate history sale*/
      FG0HW00.FG0HWHST = FFXREC.FFXCHAR;
      ;
    else
      ;
      FFFREC.FFFBEGMO = FG0HW01.FG0HWPBD[FG0HWYIX];
      FFFREC.FFFENDMO = FG0HW00.FG0HW-CURR-MO-MINUS1; /* ACTUAL*/
      FG0H-1141();
      FG0HW00.FG0HWSHS = FG0HW00.FG0HWUHS;
      ;
      FFFREC.FFFBEGMO = FG0HW00.FG0HW-CURR-MO; /* forecasted*/
      FFFREC.FFFENDMO = FG0HW01.FG0HWPED[FG0HWYIX];
      FG0H-1143();
      FG0HW00.FG0HWUHS = FG0HW00.FG0HWUHS + FG0HW00.FG0HWSHS;
      ;
      FFXREC.FFXNUMB = FG0HW00.FG0HWUHS;
      XSFFS10(); /* translate history sale*/
      FG0HW00.FG0HWHST = FFXREC.FFXCHAR;
      ;
    end
    ;
  end
  ;
end // end FG0H114

// calculate historial demand
Function FG0H115()
   /* ---------------------------------------------------------------------*/
   /* Determine if the date range is all forecast, all actual, or*/
   /* mixed.*/
   /* Translate sales quantities from units to thousands using common*/
   /* routine xsffs10.*/
   /* ---------------------------------------------------------------------*/
  ;
  if (FG0HW01.FG0HWPED[FG0HWYIX] < FG0HW00.FG0HW-CURR-MO) /* all actl*/
    FG0H-1151();
    FFXREC.FFXNUMB = FG0HW00.FG0HWUHD;
    XSFFS10();
    FG0HW00.FG0HWHDT = FFXREC.FFXCHAR;
    ;
  else
    if (FG0HW01.FG0HWPBD[FG0HWYIX] >= FG0HW00.FG0HW-CURR-MO) /* all fcst*/
      FG0H-1153();
      FFXREC.FFXNUMB = FG0HW00.FG0HWUHD;
      XSFFS10();
      FG0HW00.FG0HWHDT = FFXREC.FFXCHAR;
      ;
    else
      FFFREC.FFFBEGMO = FG0HW01.FG0HWPBD[FG0HWYIX];
      FFFREC.FFFENDMO = FG0HW00.FG0HW-CURR-MO-MINUS1; /* ACTUAL*/
      FG0H-1151();
      FG0HW00.FG0HWSHD = FG0HW00.FG0HWUHD;
      ;
      FFFREC.FFFBEGMO = FG0HW00.FG0HW-CURR-MO; /* forecasted*/
      FFFREC.FFFENDMO = FG0HW01.FG0HWPED[FG0HWYIX];
      FG0H-1153();
      FG0HW00.FG0HWUHD = FG0HW00.FG0HWUHD + FG0HW00.FG0HWSHD;
      ;
      FFXREC.FFXNUMB = FG0HW00.FG0HWUHD;
      XSFFS10(); /* translate history demand*/
      FG0HW00.FG0HWHDT = FFXREC.FFXCHAR;
    end
    ;
  end
  ;
  ;
end // end FG0H115

// Trans totl from units to thous
Function FG0H116()
   /* ------------------------------------------------------------*/
   /* Translate the current master qty total, forecast qty*/
   /* total, historical sales qty total, and historical demand*/
   /* qty total from units to thousands*/
   /* ------------------------------------------------------------*/
  ;
  FFXREC.FFXNUMB = FG0HW03.FG0HWUCM;
  XSFFS10();
  FG0HW03.FG0HWCMQ = FFXREC.FFXCHAR;
  ;
  if (FG0HW00.FG0HWCFL == "Y") /* if work sheet data found display*/
                                   /* total*/
    FFXREC.FFXNUMB = FG0HW03.FG0HWUQT;
    XSFFS10();
    FG0HW03.FG0HWQTY = FFXREC.FFXCHAR;
  end
  ;
  FG0HW00.FG0HWIDX = 1;
  while (FG0HW00.FG0HWIDX <= 3)
    FFXREC.FFXNUMB = FG0HW03.FG0HWUHS[FG0HWIDX];
    XSFFS10();
    FG0HW03.FG0HWHSQ[FG0HWIDX] = FFXREC.FFXCHAR;
    FG0HW00.FG0HWIDX = FG0HW00.FG0HWIDX + 1;
  end
  ;
  FG0HW00.FG0HWIDX = 1;
  while (FG0HW00.FG0HWIDX <= 3)
    FFXREC.FFXNUMB = FG0HW03.FG0HWUHD[FG0HWIDX];
    XSFFS10();
    FG0HW03.FG0HWHDQ[FG0HWIDX] = FFXREC.FFXCHAR;
    FG0HW00.FG0HWIDX = FG0HW00.FG0HWIDX + 1;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Calculate product category  percentages*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW00.FG0HWIDX = 1; /* init index*/
  ;
  while (FG0HW00.FG0HWIDX <= FG0HW00.TA5TSQIX)
    ;
    FG0HW00.XXXTSPAG = FG0HW00.FG0HWIDX; /* process temp storage*/
    ;
    FG0HS09(); /* read temp storage*/
    ;
    FG0HW00.FG0HWPIX = 1;
    while (FG0HW00.FG0HWPIX <= FG0HW02.FG0HWNLD)
      ;
      /* ------------------------------------------------------------*/
      /* Caluculate current sales category percent:*/
      /* ------------------------------------------------------------*/
      ;
      if (FG0HW02.FG0HWUQT[FG0HWPIX] != 0)
        FG0HW00.FG0HWNM1 = FG0HW02.FG0HWUQT[FG0HWPIX] * 100;
        FG0HW02.FG0HWCPC[FG0HWPIX] = mathLib.round(FG0HW00.FG0HWNM1 / FG0HW03.FG0HWUQT, -mathLib.decimals(FG0HW02.FG0HWCPC[FG0HWPIX]));
        FG0HW02.FG0HWSPC[FG0HWPIX] = mathLib.round(FG0HW00.FG0HWNM1 / FG0HW03.FG0HWUQT, -mathLib.decimals(FG0HW02.FG0HWSPC[FG0HWPIX]));
      end
      ;
      /* ------------------------------------------------------------*/
      /* Caluculate historical sales percent one year prior:*/
      /* ------------------------------------------------------------*/
      ;
      if (FG0HW02.FG0HWUH1[FG0HWPIX] != 0)
        FG0HW00.FG0HWNM1 = FG0HW02.FG0HWUH1[FG0HWPIX] * 100;
        FG0HW00.FG0HWNM2 = FG0HW03.FG0HWUHS[1];
        FG0HW02.FG0HWHP1[FG0HWPIX] = mathLib.round(FG0HW00.FG0HWNM1 / FG0HW00.FG0HWNM2, -mathLib.decimals(FG0HW02.FG0HWHP1[FG0HWPIX]));
      end
      ;
      /* ------------------------------------------------------------*/
      /* Caluculate historical sales percent two years prior:*/
      /* ------------------------------------------------------------*/
      ;
      if (FG0HW02.FG0HWUH2[FG0HWPIX] != 0)
        FG0HW00.FG0HWNM1 = FG0HW02.FG0HWUH2[FG0HWPIX] * 100;
        FG0HW00.FG0HWNM2 = FG0HW03.FG0HWUHS[2];
        FG0HW02.FG0HWHP2[FG0HWPIX] = mathLib.round(FG0HW00.FG0HWNM1 / FG0HW00.FG0HWNM2, -mathLib.decimals(FG0HW02.FG0HWHP2[FG0HWPIX]));
      end
      ;
      /* ------------------------------------------------------------*/
      /* Caluculate historical sales percent three years prior:*/
      /* ------------------------------------------------------------*/
      ;
      if (FG0HW02.FG0HWUH3[FG0HWPIX] != 0)
        FG0HW00.FG0HWNM1 = FG0HW02.FG0HWUH3[FG0HWPIX] * 100;
        FG0HW00.FG0HWNM2 = FG0HW03.FG0HWUHS[3];
        FG0HW02.FG0HWHP3[FG0HWPIX] = mathLib.round(FG0HW00.FG0HWNM1 / FG0HW00.FG0HWNM2, -mathLib.decimals(FG0HW02.FG0HWHP3[FG0HWPIX]));
      end
      ;
      /* ------------------------------------------------------------*/
      /* Caluculate historical demand percent one year prior:*/
      /* ------------------------------------------------------------*/
      ;
      if (FG0HW02.FG0HWUD1[FG0HWPIX] != 0)
        FG0HW00.FG0HWNM1 = FG0HW02.FG0HWUD1[FG0HWPIX] * 100;
        FG0HW00.FG0HWNM2 = FG0HW03.FG0HWUHD[1];
        FG0HW02.FG0HWDP1[FG0HWPIX] = mathLib.round(FG0HW00.FG0HWNM1 / FG0HW00.FG0HWNM2, -mathLib.decimals(FG0HW02.FG0HWDP1[FG0HWPIX]));
      end
      ;
      /* ------------------------------------------------------------*/
      /* Caluculate historical demand percent two years prior:*/
      /* ------------------------------------------------------------*/
      ;
      if (FG0HW02.FG0HWUD2[FG0HWPIX] != 0)
        FG0HW00.FG0HWNM1 = FG0HW02.FG0HWUD2[FG0HWPIX] * 100;
        FG0HW00.FG0HWNM2 = FG0HW03.FG0HWUHD[2];
        FG0HW02.FG0HWDP2[FG0HWPIX] = mathLib.round(FG0HW00.FG0HWNM1 / FG0HW00.FG0HWNM2, -mathLib.decimals(FG0HW02.FG0HWDP2[FG0HWPIX]));
      end
      ;
      /* ------------------------------------------------------------*/
      /* Caluculate historical demand percent three years prior:*/
      /* ------------------------------------------------------------*/
      ;
      if (FG0HW02.FG0HWUD3[FG0HWPIX] != 0)
        FG0HW00.FG0HWNM1 = FG0HW02.FG0HWUD3[FG0HWPIX] * 100;
        FG0HW00.FG0HWNM2 = FG0HW03.FG0HWUHD[3];
        FG0HW02.FG0HWDP3[FG0HWPIX] = mathLib.round(FG0HW00.FG0HWNM1 / FG0HW00.FG0HWNM2, -mathLib.decimals(FG0HW02.FG0HWDP3[FG0HWPIX]));
      end
      /* ------------------------------------------------------------*/
      /* Accumulate current sales percent, historical sales percent,*/
      /* and historical demand percent.*/
      /* ------------------------------------------------------------*/
      ;
      FG0HW03.FG0HWCPC = FG0HW02.FG0HWCPC[FG0HWPIX] + FG0HW03.FG0HWCPC;
      FG0HW03.FG0HWHSP[1] = FG0HW02.FG0HWHP1[FG0HWPIX] +       FG0HW03.FG0HWHSP[1];
      FG0HW03.FG0HWHSP[2] = FG0HW02.FG0HWHP2[FG0HWPIX] +       FG0HW03.FG0HWHSP[2];
      FG0HW03.FG0HWHSP[3] = FG0HW02.FG0HWHP3[FG0HWPIX] +       FG0HW03.FG0HWHSP[3];
      FG0HW03.FG0HWHDP[1] = FG0HW02.FG0HWDP1[FG0HWPIX] +       FG0HW03.FG0HWHDP[1];
      FG0HW03.FG0HWHDP[2] = FG0HW02.FG0HWDP2[FG0HWPIX] +       FG0HW03.FG0HWHDP[2];
      FG0HW03.FG0HWHDP[3] = FG0HW02.FG0HWDP3[FG0HWPIX] +       FG0HW03.FG0HWHDP[3];
      ;
      FG0HW00.FG0HWPIX = FG0HW00.FG0HWPIX + 1;
      ;
    end
    ;
    /* ------------------------------------------------------------*/
    /* Update temporary storage with category percents*/
    /* ------------------------------------------------------------*/
    ;
    FG0HS10(); /* update temporary storage with cat*/
                                   /* percents*/
    ;
    FG0HW00.FG0HWIDX = FG0HW00.FG0HWIDX + 1;
    ;
  end
  ;
   /* Insure display percent equals 100*/
  ;
  if (FG0HW03.FG0HWCPC > 99.5
   && FG0HW03.FG0HWCPC <= 100.5)
    FG0HW03.FG0HWCPC = 100;
  end
  ;
  ;
end // end FG0H116

// Format and converse the map
Function FG0H120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HW00.FG0HWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (FG0HW00.FG0HWSWF == "Y") /* Map must be formatted*/
      FG0H121(); /* Format the data on the map*/
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if processing an existing forecast key data can not !!*/
   /* be modified*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HW00.FG0HWFCF == "Y")
    set FG0HM001.FG0HMBRG skip;
    set FG0HM001.FG0HMERG skip;
    set FG0HM001.YPGCD skip;
    set FG0HM001.XPLCD skip;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format page, date, and FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HW00.TA5TSQIX > 0)
    set FG0HM001.XXXLITPG skip;
    FG0HM001.XXXTSPAG = FG0HW00.XXXTSPAG; /* Current page*/
    set FG0HM001.XXXLITOF skip;
    FG0HM001.TA5TSQIX = FG0HW00.TA5TSQIX; /* max pages*/
  end
  ;
  FG0HM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FG0HM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG0HM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* error message number*/
    FG0HM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    set FG0HM001 alarm; /* Indicate sound alarm*/
  end
  ;
  converse FG0HM001 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0;
  ;
  COMMAREA.CATOAP = FG0HM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG0HM001.CAITEM; /* Application data*/
  ;
  ;
end // end FG0H120

// Format the display data
Function FG0H121()
   /* ------------------------------------------------------------*/
   /* init map fg0hm001*/
   /* ------------------------------------------------------------*/
  ;
  set FG0HM001 initial; /* m001 input/ouput area*/
  ;
  FG0HW00.FG0HWSWF = "N"; /* init map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Format fg0hm001 using passed data*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW00.FG0HWWDT = FFWREC.FFABEGMO; /* w/s date field*/
  FG0HM001.FG0HMBRG = FG0HW00.FG0HWWYM; /* begin month range*/
  FG0HW00.FG0HWWDT = FFWREC.FFAENDMO; /* w/s date field*/
  FG0HM001.FG0HMERG = FG0HW00.FG0HWWYM; /* end month range*/
  ;
  FG0HM001.XPLCD = FFWREC.XPLCD;
  FG0HM001.XPLABRV = FFWREC.XPLABRV;
  ;
  FG0HM001.YPGCD = FFWREC.YPGCD;
  FG0HM001.YPGABRV = FFWREC.YPGABRV;
  ;
  FG0HM001.FG0HMYOP = FG0HW01.FG0HWYOP; /* year option*/
  FG0HM001.FG0HMHOP = FG0HW01.FG0HWHOP; /* history option*/
  ;
   /* ------------------------------------------------------------*/
   /* if data has not been loaded bypass load map fields*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HW01.CACHGFL != "Y")
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* load map using fg0hw01 work record*/
   /* ------------------------------------------------------------*/
  ;
  FG0HM001.FG0HMTGT = FG0HW01.FG0HWTGT; /* forecast target qty*/
  FG0HM001.FG0HMVQT = FG0HW01.FG0HWVQT; /* variance qty*/
  FG0HM001.FG0HMVPT = FG0HW01.FG0HWVPT; /* variance percent*/
  FG0HM001.FG0HMCDT = FG0HW01.FG0HWCDT; /* wrk sht created date*/
  set FG0HM001.FG0HMPR1 skip;
  FG0HM001.FG0HMPBR = FG0HW01.FG0HWPBR[FG0HWYOP]; /* prior beg range yymm*/
   /* MOVE fg0hW00.fg0hWWYM TO fg0hM001.fg0hMPBR PRIOR BEG RANGE*/
  set FG0HM001.FG0HMDSH skip;
  FG0HM001.FG0HMPER = FG0HW01.FG0HWPER[FG0HWYOP]; /* prior end range yymm*/
   /* MOVE fg0hW00.fg0hWWYM TO fg0hM001.fg0hMPER PRIOR END RANGE*/
  set FG0HM001.FG0HMPR2 skip;
  FG0HM001.FG0HMYDS = FG0HW00.FG0HWYDS[FG0HWYOP]; /* prior year desc*/
  if (FG0HW01.FG0HWHOP == "S")
    FG0HM001.FG0HMHDS = FG0HW00.FG0HWHDS[1];
  else
    FG0HM001.FG0HMHDS = FG0HW00.FG0HWHDS[2];
  end
  set FG0HM001.FG0HMHDS skip;
  ;
   /* ------------------------------------------------------------*/
   /* obtain current sales and historical sales/demand from*/
   /* temporary storage*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW00.FG0HWPIX = 1;
  ;
  FG0HS09(); /* read temporary storage*/
  ;
  while (FG0HW00.FG0HWPIX <= FG0HW02.FG0HWNLD) /* process temp storage*/
    ;
    set FG0HM001.FG0HMSEL[FG0HWPIX] normal;
    FG0HM001.FG0HMCCD[FG0HWPIX] = FG0HW02.XPCSDESC[FG0HWPIX];
    FG0HM001.FG0HMCMQ[FG0HWPIX] = FG0HW02.FG0HWCMQ[FG0HWPIX];
    FG0HM001.FG0HMQTY[FG0HWPIX] = FG0HW02.FG0HWQTY[FG0HWPIX];
    set FG0HM001.FG0HMQTY[FG0HWPIX] normal;
    FG0HM001.FG0HMCPC[FG0HWPIX] = FG0HW02.FG0HWCPC[FG0HWPIX];
    set FG0HM001.FG0HMCPC[FG0HWPIX] normal;
    set FG0HM001.FG0HMCPT[FG0HWPIX] normal;
    FG0HM001.FFCDMIND[FG0HWPIX] = FG0HW02.FFCDMIND[FG0HWPIX];
    FG0HM001.FG0HMHCD[FG0HWPIX] = FG0HW02.XPCSDESC[FG0HWPIX];
    if (FG0HW01.FG0HWHOP == "S") /* load historical sales data*/
      if (FG0HW01.FG0HWYOP == 1)
        FG0HM001.FG0HMHQT[FG0HWPIX] = FG0HW02.FG0HWHQ1[FG0HWPIX];
        FG0HM001.FG0HMHPC[FG0HWPIX] = FG0HW02.FG0HWHP1[FG0HWPIX];
      end
      if (FG0HW01.FG0HWYOP == 2)
        FG0HM001.FG0HMHQT[FG0HWPIX] = FG0HW02.FG0HWHQ2[FG0HWPIX];
        FG0HM001.FG0HMHPC[FG0HWPIX] = FG0HW02.FG0HWHP2[FG0HWPIX];
      end
      if (FG0HW01.FG0HWYOP == 3)
        FG0HM001.FG0HMHQT[FG0HWPIX] = FG0HW02.FG0HWHQ3[FG0HWPIX];
        FG0HM001.FG0HMHPC[FG0HWPIX] = FG0HW02.FG0HWHP3[FG0HWPIX];
      end
    else /* load historical demand data*/
      if (FG0HW01.FG0HWYOP == 1)
        FG0HM001.FG0HMHQT[FG0HWPIX] = FG0HW02.FG0HWDQ1[FG0HWPIX];
        FG0HM001.FG0HMHPC[FG0HWPIX] = FG0HW02.FG0HWDP1[FG0HWPIX];
      end
      if (FG0HW01.FG0HWYOP == 2)
        FG0HM001.FG0HMHQT[FG0HWPIX] = FG0HW02.FG0HWDQ2[FG0HWPIX];
        FG0HM001.FG0HMHPC[FG0HWPIX] = FG0HW02.FG0HWDP2[FG0HWPIX];
      end
      if (FG0HW01.FG0HWYOP == 3)
        FG0HM001.FG0HMHQT[FG0HWPIX] = FG0HW02.FG0HWDQ3[FG0HWPIX];
        FG0HM001.FG0HMHPC[FG0HWPIX] = FG0HW02.FG0HWDP3[FG0HWPIX];
      end
    end
    ;
    FG0H159(); /* calc history percent to display on screen*/
    set FG0HM001.FG0HMHPT[FG0HWPIX] normal;
    ;
    FG0HW00.FG0HWPIX = FG0HW00.FG0HWPIX + 1; /* increment load index*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* load forecast and current/historical totals*/
   /* ------------------------------------------------------------*/
  ;
  FG0HM001.FG0HMCCD[FG0HWTIX] = "   TOTAL    ";
  FG0HM001.FG0HMCMQ[FG0HWTIX] = FG0HW03.FG0HWCMQ;
  FG0HM001.FG0HMQTY[FG0HWTIX] = FG0HW03.FG0HWQTY;
  set FG0HM001.FG0HMQTY[FG0HWTIX] skip;
  ;
  if (converseVar.eventKey is pa2)
    FG0H170(); /* recalc cat percent total*/
  end
  ;
  FG0HM001.FG0HMCPC[FG0HWTIX] = FG0HW03.FG0HWCPC;
  set FG0HM001.FG0HMCPC[FG0HWTIX] skip;
  ;
  FG0HM001.FG0HMHCD[FG0HWTIX] = "   TOTAL    ";
  if (FG0HW01.FG0HWHOP == "S") /* load historical sales totals*/
    FG0HM001.FG0HMHQT[FG0HWTIX] = FG0HW03.FG0HWHSQ[FG0HWYOP];
    FG0HM001.FG0HMHPC[FG0HWTIX] = 100;
  else /* load historical demand totals*/
    FG0HM001.FG0HMHQT[FG0HWTIX] = FG0HW03.FG0HWHDQ[FG0HWYOP];
    FG0HM001.FG0HMHPC[FG0HWTIX] = 100;
  end
  ;
  ;
end // end FG0H121

// Check attention identifier
Function FG0H130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    converseLib.clearScreen();
     /* refresh map*/
    ;
    FG0HW00.FG0HWSWR = "N"; /* request for data*/
    FG0HW00.FG0HWSWF = "Y"; /* format screen m001*/
    ;
    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      if (FG0HM001.CATOAP == "FG0G"
       || FG0HM001.CATOAP == "FG0Q"
       || FG0HM001.CATOAP == "FG0S")
        converseLib.validationFailed(189);
        FFWREC.XXXMODID = "130";
        set FG0HM001.CATOAP cursor, bold;
      else
        FG0HS01(); /* purge temp storage*/
        FFWREC.FFEWSNBR = 0; /* zero out work sheet nbr*/
        ;
        XSFFS01(); /* Exit to another application*/
        ;
        FG0HW00.FG0HWSWR = "N"; /* request for data*/
        FG0HW00.FG0HWSWF = "Y"; /* format screen m001*/
        ;
        set FG0HM001.CATOAP cursor, bold; /* Highlight*/
        ;
      end
    else
      ;
      FFWREC.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf19) /* or PF19 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG0HM001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FG0A"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FG0T"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf19) /* PF19 was pressed*/
      FFWREC.XPCCD = " "; /* Clear category field*/
      COMMAREA.CATOAP = "FG0B"; /* TO application*/
    end
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    FG0HW00.FG0HWSWR = "N"; /* request for data*/
    FG0HW00.FG0HWSWF = "Y"; /* format screen m001*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* pf7 was not pressed*/
   && converseVar.eventKey not pf8   /* pf8 was not pressed*/
   && converseVar.eventKey not pf14  /* pf14 was not pressed*/
   && converseVar.eventKey not pf15  /* pf15 was not pressed*/
   /* AND EZEAID NOT PF16           ; pf16 was not pressed*/
   && converseVar.eventKey not pf17  /* pf17 was not pressed*/
   && converseVar.eventKey not pf18  /* pf18 was not pressed*/
   && converseVar.eventKey not pf19) /* pf19 was not pressed*/
    ;
    FFWREC.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FG0H130

// Reset highlighted fields
Function FG0H140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FG0HM001.FG0HMBRG initialAttributes; /* begin range*/
  set FG0HM001.FG0HMERG initialAttributes; /* end range*/
  set FG0HM001.FG0HMTGT initialAttributes; /* type grp target*/
  set FG0HM001.FG0HMYOP initialAttributes; /* year option*/
  set FG0HM001.FG0HMHOP initialAttributes; /* history option*/
  set FG0HM001.FG0HMPCT initialAttributes; /* change percent*/
  set FG0HM001.FG0HMCTQ initialAttributes; /* change total qty*/
  set FG0HM001.XPLCD initialAttributes; /* history option*/
  set FG0HM001.YPGCD initialAttributes; /* history option*/
  ;
  if (FG0HW01.CACHGFL == "Y")
    ;
    FG0HW00.FG0HWIDX = 1; /* init load index*/
    while (FG0HW00.FG0HWIDX <= FG0HW02.FG0HWNLD)
      ;
      set FG0HM001.FG0HMSEL[FG0HWIDX] normal; /* selection field*/
      set FG0HM001.FG0HMQTY[FG0HWIDX] normal; /* current sls fcst qty*/
      set FG0HM001.FG0HMCPC[FG0HWIDX] normal; /* cat percent*/
      set FG0HM001.FG0HMHPT[FG0HWIDX] normal; /* history percent*/
      set FG0HM001.FG0HMCPT[FG0HWIDX] normal; /* change percent*/
      ;
      FG0HW00.FG0HWIDX = FG0HW00.FG0HWIDX + 1; /* increment load index*/
      ;
    end
    ;
    set FG0HM001.FG0HMQTY[FG0HWTIX] skip; /* fcst qty total*/
    set FG0HM001.FG0HMCPC[FG0HWTIX] skip; /* cat percent total*/
    ;
    set FG0HM001.FG0HMPR1 skip; /* historical description*/
    set FG0HM001.FG0HMDSH skip;
    set FG0HM001.FG0HMPR2 skip;
    set FG0HM001.FG0HMHDS skip;
    ;
  end
  ;
  set FG0HM001.CATOAP initialAttributes;
  set FG0HM001.CAITEM initialAttributes;
  ;
   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HM001.YPGCD == "?" /* product type group list req*/
   || FG0HM001.XPLCD == "?") /* or product line list req*/
    ;
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      ;
      FFWREC.XXXMODID = "140"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  else
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product the group codes*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HM001.YPGCD == "?") /* GPC list requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT TYPE GROUP"; /* Heading*/
    XX0XW02.YPGFFFL = "Y";
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0HM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FG0HM001.YPGABRV = FFWREC.YPGABRV; /* Restore prior code*/
    else
      FG0HM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FG0HM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG0HM001.YPGCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HM001.XPLCD == "?") /* product line  requested*/
    ;
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT LINE CODE"; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/
    ;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end
    ;
    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      ;
      FG0HM001.XPLCD = FFWREC.XPLCD; /* Restore prior code*/
      XPLREC.XPLCD = FFWREC.XPLCD; /* Restore prior code*/
      XPLREC.XGPCD = COMMAREA.XGPCD; /* Restore prior code*/
      if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
        FG0HM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
      end
    else
      FG0HM001.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      FG0HM001.XPLABRV = XPLTBL.XPLABRV[XX0XWPIX]; /* Selected code*/
      ;
    end
    ;
    set FG0HM001.XPLCD cursor; /* Establish cursor position*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.clearScreen();
   /* Clear screen before display*/
  ;
  FFWREC.XXXMODID = "140"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0H140

// Verify the entered data
Function FG0H150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "150"; /* Module identification*/
    set FG0HM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* verify request to page forward(pf7) or backwards(pf8), and*/
   /* check all modifiable fields except fcst target*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    ;
    FG0H151(); /* verify scroll request*/
    ;
    FG0HS11(); /* check modifiable fields*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if request to transfer to type group forecast*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf14) /* request to transfer(pf14)*/
    ;
    if (FFWREC.FFEWSNBR == 0)
      converseLib.validationFailed(44);
      FFWREC.XXXMODID = "150";
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* verify if data loaded, if so check modifiable fields*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf15 /* request to save data(pf15)*/
   /* OR EZEAID IS PF16  ;request to*/
   /* explode category(pf16)*/
   || converseVar.eventKey is pf17 /* request to explode color(pf17)*/
   || converseVar.eventKey is pf18) /* request to display history(pf18)*/
    ;
    if (FG0HW00.TA5TSQIX == 0) /* no data loaded*/
      ;
      converseLib.validationFailed(18);
      FFWREC.XXXMODID = "150";
      ;
    else
      ;
      FG0HS11(); /* check modifiable fields*/
      ;
      /* iF EZEAID IS PF16*/
      /* OR EZEAID IS PF17*/
      if (converseVar.eventKey is pf17)
        ;
        FG0H152(); /* verify season indicator*/
        ;
        /* IF EZEAID IS PF16;*/
        ;
        /* PERFORM FG0H153         ; verify style/color fcst*/
        ;
        /* -----------------------------------------*/
           /* Verify selection field*/
        /* -----------------------------------------*/
        ;
        /* IF 'S' IN FG0HM001.FG0HMSEL;*/
        ;
        /* MOVE 311 TO EZEMNO    ; Invalid selection*/
        /* MOVE '150' TO FFWREC.XXXMODID; Module identification*/
        /* SET FG0HM001.FG0HMSEL(EZETST) CURSOR,BRIGHT; Highlight*/
        ;
        /* END ;*/
        ;
        /* END ;*/
        ;
        /* IF EZEAID IS PF17;*/
        FG0H154(); /* verify sel and color fcst*/
        /* END ;*/
        ;
      else
        ;
        if (converseVar.eventKey is pf18)
          ;
          FG0HS30(); /* Validate year/history option*/
          ;
        end
        ;
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* verify category percent total*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf14 /* request to transfer(pf14)*/
   || converseVar.eventKey is pf15 /* request to save data(pf15)*/
   /* OR EZEAID IS PF16;request to explode*/
   /* category(pf16)*/
   || converseVar.eventKey is pf17 /* request to explode color(pf17)*/
   || converseVar.eventKey is pf18) /* request to display history(pf18)*/
    ;
    if (FG0HW03.FG0HWCPC != 0
     && FG0HW03.FG0HWCPC != 100)
      converseLib.validationFailed(159);
      FFWREC.XXXMODID = "150";
      set FG0HM001.FG0HMCPC[1] cursor;
      set FG0HM001.FG0HMCPC[FG0HWTIX] bold;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate entry fields, selection requests, history options,*/
   /* key data, and re-calculate percents*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter)
    ;
    FG0H155(); /* validate entry fields*/
    ;
    if (FG0HW01.CACHGFL == "Y"
     && converseVar.validationMsgNum == 0)
      ;
      FG0H156(); /* upd temp storage qtys and pcts*/
      ;
      if (FG0HW00.FG0HWDCF == "Y") /* data changed*/
        FG0H157(); /* re-calculate/load qtys/percentages*/
      end
    end
    ;
    /* ------------------------------------------------------*/
     /* if key data changed check modifiable fields*/
    /* ------------------------------------------------------*/
    ;
    FG0HW00.FG0HWWBD = FFWREC.FFABEGMO;
    FG0HW00.FG0HWWED = FFWREC.FFAENDMO;
    ;
    if (FG0HM001.YPGCD != FFWREC.YPGCD        /* product type group*/
     || FG0HM001.YPGCD == " "                 /* product type group*/
     || FG0HM001.XPLCD != FFWREC.XPLCD        /* product line cd*/
     || FG0HM001.XPLCD == " "                 /* product line cd*/
     || FG0HM001.FG0HMBRG != FG0HW00.FG0HWBYM /* beg range changed*/
     || FG0HM001.FG0HMBRG == 0                /* beg range changed*/
     || FG0HM001.FG0HMERG != FG0HW00.FG0HWEYM /* end range changed*/
     || FG0HM001.FG0HMERG == 0)               /* end range changed*/
      ;
      if (FG0HW01.CACHGFL == "Y")
        FG0H158(); /* key chg: ck modifiable fields*/
      end
      ;
      if (converseVar.validationMsgNum == 0)
        FG0HW00.FG0HWSWR = "Y"; /* request data request*/
        if (FG0HW00.FG0HWFCF != "Y")
          FFWREC.FFEWSNBR = 0;
        end
      end
      ;
    end
  end
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end
  ;
end // end FG0H150

// verify scroll request
Function FG0H151()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FG0HW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    FFWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FG0HW00.XXXTSPAG >= FG0HW00.TA5TSQIX) /* and no more pages*/
    ;
    FFWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/
    ;
  end
  ;
  ;
end // end FG0H151

// validate season indicator
Function FG0H152()
  ;
   /* ------------------------------------------------------------*/
   /* validate season indicator on current page*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW00.FG0HWPIX = FG0HW02.FG0HWNLD; /* nbr of lines loaded*/
  ;
  while (FG0HW00.FG0HWPIX >= 1) /* process temp storage*/
    ;
    if (FG0HM001.FFCDMIND[FG0HWPIX] == " ")
      if (converseVar.eventKey is pf16) /* Explode category*/
        converseLib.validationFailed(308);
      else
        if (FG0HM001.FG0HMSEL[FG0HWPIX] == "S") /* selected category*/
          converseLib.validationFailed(246);
        end
      end
      FFWREC.XXXMODID = "152";
    end
    ;
    FG0HW00.FG0HWPIX = FG0HW00.FG0HWPIX - 1; /* decrement table index*/
    ;
  end
  ;
  if (converseVar.validationMsgNum != 0)
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if no errors found on current page, verify all other pages*/
   /* in temporary storage*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW00.FG0HWSTP = FG0HW00.XXXTSPAG; /* save current page*/
  ;
  FG0HW00.FG0HWIDX = 1; /* process all pages in temp storage*/
  while (FG0HW00.FG0HWIDX <= FG0HW00.TA5TSQIX)
    FG0HW00.XXXTSPAG = FG0HW00.FG0HWIDX;
    ;
    FG0HS09(); /* read temporary storage*/
    ;
    FG0HW00.FG0HWPIX = FG0HW02.FG0HWNLD; /* nbr of lines loaded*/
    while (FG0HW00.FG0HWPIX >= 1)
      if (FG0HM001.FFCDMIND[FG0HWPIX] == " ")
        if (converseVar.eventKey is pf16) /* Explode category*/
          converseLib.validationFailed(308);
        else
          if (FG0HM001.FG0HMSEL[FG0HWPIX] == "S") /* selected category*/
            converseLib.validationFailed(246);
          end
        end
        FFWREC.XXXMODID = "152";
      end
      FG0HW00.FG0HWPIX = FG0HW00.FG0HWPIX - 1;
    end
    ;
    FG0HW00.FG0HWIDX = FG0HW00.FG0HWIDX + 1; /* line index*/
    ;
  end
  ;
  FG0HW00.XXXTSPAG = FG0HW00.FG0HWSTP; /* set to current page*/
  ;
  FG0HS09(); /* read temporary storage*/
  ;
  ;
end // end FG0H152

// verify 'S'el and color fcst
Function FG0H154()
  ;
   /* ------------------------------------------------------------*/
   /* validate 's'election field*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW00.FG0HWSLF = "N"; /* init selection flag*/
  FG0HW00.FG0HWIDX = FG0HW02.FG0HWNLD; /* nbr of lines loaded*/
  ;
  while (FG0HW00.FG0HWIDX >= 1)
    ;
    if (FG0HM001.FG0HMSEL[FG0HWIDX] != " "
     && FG0HM001.FG0HMSEL[FG0HWIDX] != "S")
      converseLib.validationFailed(41);
      FFWREC.XXXMODID = "155";
      set FG0HM001.FG0HMSEL[FG0HWIDX] cursor, bold;
    else
      if (FG0HM001.FG0HMSEL[FG0HWIDX] == "S")
        FG0HW00.FG0HWSLF = "Y";
        FFWREC.XPCCD = FG0HW02.XPCCD[FG0HWIDX];
      end
    end
    ;
    FG0HW00.FG0HWSLC = FG0HW00.FG0HWIDX - 1;
    ;
    while (FG0HW00.FG0HWSLC >= 1)
      ;
      if (FG0HM001.FG0HMSEL[FG0HWSLC] > " "
       && FG0HM001.FG0HMSEL[FG0HWIDX] > " ")
        converseLib.validationFailed(136);
        FFWREC.XXXMODID = "155";
        set FG0HM001.FG0HMSEL[FG0HWIDX] cursor, bold;
      end
      FG0HW00.FG0HWSLC = FG0HW00.FG0HWSLC - 1;
    end
    FG0HW00.FG0HWIDX = FG0HW00.FG0HWIDX - 1;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if no selections were made display error message, else*/
   /* verify if the categories colors have been forecasted*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HW00.FG0HWSLF == "N")
    converseLib.validationFailed(154);
    FFWREC.XXXMODID = "154";
  else
    FG0HW00.FG0HWIDX = FG0HW02.FG0HWNLD;
    while (FG0HW00.FG0HWIDX >= 1)
      ;
      if (FG0HM001.FG0HMSEL[FG0HWIDX] == "S")
        if (FFWREC.FFEWSNBR != 0)
          FG0HS06(); /* select dfcast.vwcat001*/
          if (SQLCA.VAGen_SQLCODE == 100
           || FFJREC.FFECLRFL == "N")
            converseLib.validationFailed(284);
            FFWREC.XXXMODID = "154";
            set FG0HM001.FG0HMSEL[FG0HWIDX] cursor, bold;
          end
        end
      end
      FG0HW00.FG0HWIDX = FG0HW00.FG0HWIDX - 1;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* if fcst modified database update must occur before*/
   /* explode*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.FFWMODSW == "Y"
   || FFWREC.FFEWSNBR == 0)
    converseLib.validationFailed(296);
    FFWREC.XXXMODID = "154";
  end
  ;
  ;
end // end FG0H154

// validate modifiable data
Function FG0H155()
   /* ------------------------------------------------------------*/
   /* init flags*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW00.FG0HWERF = "N"; /* error flag*/
  FG0HW00.FG0HWCPF = "N"; /* error flag*/
  FG0HW00.FG0HWSLF = "N"; /* selection flag*/
  ;
   /* ------------------------------------------------------------*/
   /* validate category fcst qtys*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW00.FG0HWIDX = FG0HW02.FG0HWNLD; /* nbr of lines*/
  ;
  while (FG0HW00.FG0HWIDX >= 1) /* process temp storage*/
    ;
    if (FG0HM001.FG0HMQTY[FG0HWIDX] != FG0HW02.FG0HWQTY[FG0HWIDX])
      FFXREC.FFXCHAR = FG0HM001.FG0HMQTY[FG0HWIDX];
      XSFFS11(); /* convert fcst to units*/
      if (FFXREC.FFXRTNCD != "0")
        converseLib.validationFailed(10); /* Indicate missing or invalid*/
        FFWREC.XXXMODID = "155";
        set FG0HM001.FG0HMQTY[FG0HWIDX] cursor, bold; /* Highlight*/
      else
        if (FFXREC.FFXNUMB < 0)
          converseLib.validationFailed(10); /* Indicate missing or invalid*/
          FFWREC.XXXMODID = "155";
          set FG0HM001.FG0HMQTY[FG0HWIDX] cursor, bold; /* Highlight*/
        end
        ;
        XSFFS10(); /* ; translate units to thousands*/
        FG0HM001.FG0HMQTY[FG0HWIDX] = FFXREC.FFXCHAR;
      end
    end
    ;
    FG0HW00.FG0HWIDX = FG0HW00.FG0HWIDX - 1;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate the global change total qty field*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HM001.FG0HMCTQ != " ")
    FFXREC.FFXCHAR = FG0HM001.FG0HMCTQ;
    XSFFS11(); /* global change total to units*/
    if (FFXREC.FFXRTNCD != "0")
      converseLib.validationFailed(10); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "155";
      set FG0HM001.FG0HMCTQ cursor, bold; /* Highlight*/
    else
      if (FFXREC.FFXNUMB < 0)
        converseLib.validationFailed(10); /* cannot be negative number*/
        FFWREC.XXXMODID = "155";
        set FG0HM001.FG0HMCTQ cursor, bold; /* Highlight*/
      else
        if (FG0HW03.FG0HWUQT == 0)
          converseLib.validationFailed(234); /* total must exist to modify*/
          FFWREC.XXXMODID = "155";
          set FG0HM001.FG0HMCTQ cursor, bold; /* Highlight*/
        end
      end
      ;
      XSFFS10();
      FG0HM001.FG0HMCTQ = FFXREC.FFXCHAR;
    end
  end
   /* ------------------------------------------------------------*/
   /* validate the global change percent field*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HM001.FG0HMPCT != 0)
    if (FG0HM001.FG0HMPCT > 100)
      converseLib.validationFailed(10);
      FFWREC.XXXMODID = "155";
      set FG0HM001.FG0HMPCT cursor, bold;
    else
      if (FG0HW03.FG0HWUQT == 0)
        converseLib.validationFailed(234); /* total must exist to modify*/
        FFWREC.XXXMODID = "155";
        set FG0HM001.FG0HMPCT cursor, bold; /* Highlight*/
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate product type group code*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HM001.YPGCD in YPGTBL.YPGCD
   && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A"
   && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y")
    FG0HM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
  else
    FG0HM001.YPGABRV = " ";
    converseLib.validationFailed(118);
    FFWREC.XXXMODID = "155";
    set FG0HM001.YPGCD cursor, bold;
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate product line code*/
   /* ------------------------------------------------------------*/
  ;
  XPLREC.XGPCD = COMMAREA.XGPCD;
  XPLREC.XPLCD = FG0HM001.XPLCD;
  if (XPLREC.XPLKEY in XPLTBL.XPLKEY
   && XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    FG0HM001.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
  else
    FG0HM001.XPLABRV = " ";
    converseLib.validationFailed(118);
    FFWREC.XXXMODID = "155";
    set FG0HM001.XPLCD cursor, bold;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* validate year/history option field*/
   /* ------------------------------------------------------------*/
  ;
  FG0HS30();
  ;
   /* ------------------------------------------------------------*/
   /* validate forecast target qty*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HM001.FG0HMTGT != FG0HW01.FG0HWTGT)
    FFXREC.FFXCHAR = FG0HM001.FG0HMTGT;
    XSFFS11(); /* forecast target qty*/
    if (FFXREC.FFXRTNCD != "0")
      converseLib.validationFailed(10); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "155";
      set FG0HM001.FG0HMTGT cursor, bold; /* Highlight*/
    else
      if (FFXREC.FFXNUMB < 0)
        converseLib.validationFailed(10); /* Indicate missing or invalid*/
        FFWREC.XXXMODID = "155";
        set FG0HM001.FG0HMTGT cursor, bold; /* Highlight*/
      end
      ;
      FG0HW00.FG0HWSUT = FFXREC.FFXNUMB;
      XSFFS10();
      FG0HM001.FG0HMTGT = FFXREC.FFXCHAR;
      FG0HW00.FG0HWSTG = FFXREC.FFXCHAR;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate end yymm range and begin yymm range*/
   /* ------------------------------------------------------------*/
  ;
  set FFZREC empty;
  ;
  FFZREC.FFZMONTH = 6;
  FFZREC.FFZBYYMM = FG0HM001.FG0HMBRG;
  FFZREC.FFZEYYMM = FG0HM001.FG0HMERG;
  ;
  XSFFS35(); /* edit date range*/
  ;
  if (FFZREC.FFZENDRC == "1")
    set FG0HM001.FG0HMERG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "155";
  else
    if (FFZREC.FFZENDRC == "2")
      set FG0HM001.FG0HMERG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "155";
    else
      if (FFZREC.FFZENDRC == "3")
        set FG0HM001.FG0HMERG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "155";
      end
    end
  end
  ;
  if (FFZREC.FFZBEGRC == "1")
    set FG0HM001.FG0HMBRG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "155";
  else
    if (FFZREC.FFZBEGRC == "2")
      set FG0HM001.FG0HMBRG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "155";
    else
      if (FFZREC.FFZBEGRC == "3")
        set FG0HM001.FG0HMBRG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "155";
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* check mutually exclusive entry fields*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW00.FG0HWIDX = FG0HW02.FG0HWNLD; /* nbr of lines*/
  ;
  while (FG0HW00.FG0HWIDX >= 1) /* process temp storage*/
    ;
    if (FG0HM001.FG0HMCPT[FG0HWIDX] != 0)
      if (FG0HM001.FG0HMHPT[FG0HWIDX] != FG0HW01.FG0HWHPS[FG0HWIDX]
       || FG0HM001.FG0HMCPC[FG0HWIDX] != FG0HW02.FG0HWCPC[FG0HWIDX]
       || FG0HM001.FG0HMQTY[FG0HWIDX] != FG0HW02.FG0HWQTY[FG0HWIDX]
       || FG0HM001.FG0HMCTQ != " "
       || FG0HM001.FG0HMPCT != 0)
        FG0HW00.FG0HWERF = "Y";
      else
        FG0HW00.FG0HWPIX = FG0HW00.FG0HWIDX - 1;
        while (FG0HW00.FG0HWPIX >= 1)
          if (FG0HM001.FG0HMHPT[FG0HWPIX] != FG0HW01.FG0HWHPS[FG0HWPIX]
           || FG0HM001.FG0HMCPC[FG0HWPIX] != FG0HW02.FG0HWCPC[FG0HWPIX]
           || FG0HM001.FG0HMQTY[FG0HWPIX] != FG0HW02.FG0HWQTY[FG0HWPIX])
            FG0HW00.FG0HWERF = "Y";
          end
          FG0HW00.FG0HWPIX = FG0HW00.FG0HWPIX - 1;
        end
      end
    end
    ;
    if (FG0HM001.FG0HMHPT[FG0HWIDX] != FG0HW01.FG0HWHPS[FG0HWIDX])
      if (FG0HM001.FG0HMCPT[FG0HWIDX] != 0
       || FG0HM001.FG0HMCPC[FG0HWIDX] != FG0HW02.FG0HWCPC[FG0HWIDX]
       || FG0HM001.FG0HMQTY[FG0HWIDX] != FG0HW02.FG0HWQTY[FG0HWIDX]
       || FG0HM001.FG0HMCTQ != " "
       || FG0HM001.FG0HMPCT != 0)
        FG0HW00.FG0HWERF = "Y";
      else
        FG0HW00.FG0HWPIX = FG0HW00.FG0HWIDX - 1;
        while (FG0HW00.FG0HWPIX >= 1)
          if (FG0HM001.FG0HMCPT[FG0HWPIX] != 0
           || FG0HM001.FG0HMCPC[FG0HWPIX] != FG0HW02.FG0HWCPC[FG0HWPIX]
           || FG0HM001.FG0HMQTY[FG0HWPIX] != FG0HW02.FG0HWQTY[FG0HWPIX])
            FG0HW00.FG0HWERF = "Y";
          end
          FG0HW00.FG0HWPIX = FG0HW00.FG0HWPIX - 1;
        end
      end
    end
    ;
    if (FG0HM001.FG0HMCPC[FG0HWIDX] != FG0HW02.FG0HWCPC[FG0HWIDX])
      FG0HW00.FG0HWCPF = "Y";
      if (FG0HM001.FG0HMCPT[FG0HWIDX] != 0
       || FG0HM001.FG0HMHPT[FG0HWIDX] != FG0HW01.FG0HWHPS[FG0HWIDX]
       || FG0HM001.FG0HMQTY[FG0HWIDX] != FG0HW02.FG0HWQTY[FG0HWIDX]
       || FG0HM001.FG0HMCTQ != " "
       || FG0HM001.FG0HMPCT != 0)
        FG0HW00.FG0HWERF = "Y";
      else
        FG0HW00.FG0HWPIX = FG0HW00.FG0HWIDX - 1;
        while (FG0HW00.FG0HWPIX >= 1)
          if (FG0HM001.FG0HMCPT[FG0HWPIX] != 0
           || FG0HM001.FG0HMHPT[FG0HWPIX] != FG0HW01.FG0HWHPS[FG0HWPIX]
           || FG0HM001.FG0HMQTY[FG0HWPIX] != FG0HW02.FG0HWQTY[FG0HWPIX])
            FG0HW00.FG0HWERF = "Y";
          end
          FG0HW00.FG0HWPIX = FG0HW00.FG0HWPIX - 1;
        end
      end
    end
    ;
    if (FG0HM001.FG0HMQTY[FG0HWIDX] != FG0HW02.FG0HWQTY[FG0HWIDX])
      if (FG0HM001.FG0HMCPT[FG0HWIDX] != 0
       || FG0HM001.FG0HMHPT[FG0HWIDX] != FG0HW01.FG0HWHPS[FG0HWIDX]
       || FG0HM001.FG0HMCPC[FG0HWIDX] != FG0HW02.FG0HWCPC[FG0HWIDX]
       || FG0HM001.FG0HMCTQ != " "
       || FG0HM001.FG0HMPCT != 0)
        FG0HW00.FG0HWERF = "Y";
      else
        FG0HW00.FG0HWPIX = FG0HW00.FG0HWIDX - 1;
        while (FG0HW00.FG0HWPIX >= 1)
          if (FG0HM001.FG0HMCPT[FG0HWPIX] != 0
           || FG0HM001.FG0HMHPT[FG0HWPIX] != FG0HW01.FG0HWHPS[FG0HWPIX]
           || FG0HM001.FG0HMCPC[FG0HWPIX] != FG0HW02.FG0HWCPC[FG0HWPIX])
            FG0HW00.FG0HWERF = "Y";
          end
          FG0HW00.FG0HWPIX = FG0HW00.FG0HWPIX - 1;
        end
      end
    end
    ;
    FG0HW00.FG0HWIDX = FG0HW00.FG0HWIDX - 1; /* decrement table index*/
    ;
  end
  ;
  if (FG0HM001.FG0HMCTQ != " "
   && FG0HM001.FG0HMPCT != 0)
    FG0HW00.FG0HWERF = "Y";
  end
  ;
   /* ------------------------------------------------------------*/
   /* if entries were made in more than one column highlight all*/
   /* fields that have changed and display error message*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HW00.FG0HWERF == "Y")
    ;
    FG0HW00.FG0HWIDX = FG0HW02.FG0HWNLD; /* nbr of lines*/
    ;
    while (FG0HW00.FG0HWIDX >= 1) /* process temp storage*/
      ;
      if (FG0HM001.FG0HMCPT[FG0HWIDX] != 0)
        set FG0HM001.FG0HMCPT[FG0HWIDX] cursor, bold;
      end
      ;
      if (FG0HM001.FG0HMHPT[FG0HWIDX] != FG0HW01.FG0HWHPS[FG0HWIDX])
        set FG0HM001.FG0HMHPT[FG0HWIDX] cursor, bold;
      end
      ;
      if (FG0HM001.FG0HMCPC[FG0HWIDX] != FG0HW02.FG0HWCPC[FG0HWIDX])
        set FG0HM001.FG0HMCPC[FG0HWIDX] cursor, bold;
      end
      ;
      if (FG0HM001.FG0HMQTY[FG0HWIDX] != FG0HW02.FG0HWQTY[FG0HWIDX])
        set FG0HM001.FG0HMQTY[FG0HWIDX] cursor, bold;
      end
      ;
      FG0HW00.FG0HWIDX = FG0HW00.FG0HWIDX - 1;
      ;
    end
    ;
    if (FG0HM001.FG0HMCTQ != " ")
      set FG0HM001.FG0HMCTQ cursor, bold;
    end
    ;
    if (FG0HM001.FG0HMPCT != 0)
      set FG0HM001.FG0HMPCT cursor, bold;
    end
    ;
    converseLib.validationFailed(233);
    FFWREC.XXXMODID = "155";
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate forecast target qty/fcst total qty for line pct*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HW00.FG0HWCPF == "Y"
   && FG0HW03.FG0HWUQT == 0)
    if (FG0HM001.FG0HMTGT == "    0"
     || FG0HM001.FG0HMTGT == " ")
      converseLib.validationFailed(8); /* required field*/
      FFWREC.XXXMODID = "155";
      set FG0HM001.FG0HMTGT cursor, bold; /* Highlight*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate 's'election field*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW00.FG0HWIDX = FG0HW02.FG0HWNLD; /* nbr of lines loaded*/
  while (FG0HW00.FG0HWIDX >= 1)
    ;
    if (FG0HM001.FG0HMSEL[FG0HWIDX] != " "
     && FG0HM001.FG0HMSEL[FG0HWIDX] != "S")
      converseLib.validationFailed(41);
      FFWREC.XXXMODID = "155";
      set FG0HM001.FG0HMSEL[FG0HWIDX] cursor, bold;
    else
      if (FG0HM001.FG0HMSEL[FG0HWIDX] == "S")
        if (FG0HM001.FG0HMQTY[FG0HWIDX] == " ") /* no fcst*/
          converseLib.validationFailed(329);
          FFWREC.XXXMODID = "155";
          set FG0HM001.FG0HMSEL[FG0HWIDX] cursor, bold;
        else
          FG0HW00.FG0HWSLF = "Y";
          FFWREC.XPCCD = FG0HW02.XPCCD[FG0HWIDX];
        end
      end
    end
    ;
    FG0HW00.FG0HWSLC = FG0HW00.FG0HWIDX - 1;
    ;
    while (FG0HW00.FG0HWSLC >= 1)
      ;
      if (FG0HM001.FG0HMSEL[FG0HWSLC] > " "
       && FG0HM001.FG0HMSEL[FG0HWIDX] > " ")
        converseLib.validationFailed(136);
        FFWREC.XXXMODID = "155";
        set FG0HM001.FG0HMSEL[FG0HWIDX] cursor, bold;
      end
      FG0HW00.FG0HWSLC = FG0HW00.FG0HWSLC - 1;
    end
    FG0HW00.FG0HWIDX = FG0HW00.FG0HWIDX - 1;
  end
  ;
   /* -----------------------------------------------------*/
   /* check all modified fields except selection*/
   /* -----------------------------------------------------*/
  ;
  if (FG0HW00.FG0HWSLF == "Y")
    ;
    FG0HS11(); /* check modifiable fields*/
    ;
  end
  ;
  if (FG0HW01.CACHGFL == "Y")
    FG0H170(); /* recalulate the cat percent total*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* verify category percent total*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HW03.FG0HWUQT != 0   
   && FG0HW03.FG0HWCPC != 100 
   && FG0HW00.FG0HWERF == "N" /* if no mutually excl errors*/
   && FG0HW01.CACHGFL == "Y")
    ;
    /* ------------------------------------------------------------*/
     /* if category percent is not equal to 100, and an entry*/
     /* was made in another column display error*/
    /* ------------------------------------------------------------*/
    ;
    FG0HW00.FG0HWIDX = FG0HW02.FG0HWNLD; /* nbr of lines*/
    while (FG0HW00.FG0HWIDX >= 1) /* process temp storage*/
      ;
      if (FG0HM001.FG0HMCPT[FG0HWIDX] != 0)
        set FG0HM001.FG0HMCPT[FG0HWIDX] bold;
      end
      if (FG0HM001.FG0HMHPT[FG0HWIDX] != FG0HW01.FG0HWHPS[FG0HWIDX])
        set FG0HM001.FG0HMHPT[FG0HWIDX] bold;
      end
      if (FG0HM001.FG0HMCPC[FG0HWIDX] != FG0HW02.FG0HWCPC[FG0HWIDX])
        set FG0HM001.FG0HMCPC[FG0HWIDX] bold;
      end
      if (FG0HM001.FG0HMQTY[FG0HWIDX] != FG0HW02.FG0HWQTY[FG0HWIDX])
        set FG0HM001.FG0HMQTY[FG0HWIDX] bold;
      end
      FG0HW00.FG0HWIDX = FG0HW00.FG0HWIDX - 1;
    end
    ;
    if (FG0HM001.FG0HMCTQ != " ")
      set FG0HM001.FG0HMCTQ bold;
    end
    if (FG0HM001.FG0HMPCT != 0)
      set FG0HM001.FG0HMPCT bold;
    end
    ;
    set FG0HM001.FG0HMCPC[1] cursor;
    set FG0HM001.FG0HMCPC[FG0HWTIX] bold;
    converseLib.validationFailed(159);
    FFWREC.XXXMODID = "155";
  end
  ;
   /* ---------------------------------------------------------*/
   /* if key data change verify dfcast.vffxrf01 data exists*/
   /* ---------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 118)
    if (FG0HM001.XPLCD != FFWREC.XPLCD
     || FG0HM001.YPGCD != FFWREC.YPGCD)
      ;
      set FF2REC empty;
      ;
      FF2REC.YSMXDV = "10";
      FF2REC.XPLCD = FG0HM001.XPLCD;
      FF2REC.YPGCD = FG0HM001.YPGCD;
      ;
      FG0HS02(); /* select dfcast.vffxrf01*/
      ;
      FG0HS03(); /* fetch dfcast.vffxrf01*/
      ;
      if (SQLCA.VAGen_SQLCODE != 0)
        set FG0HM001.YPGCD bold;
        set FG0HM001.XPLCD cursor, bold;
        converseLib.validationFailed(203);
        FFWREC.XXXMODID = "155";
      end
      ;
      FG0HS08(); /* close dfcast.vffxrf01*/
      ;
    end
  end
  ;
  ;
end // end FG0H155

// upd temp storage qtys/pcts
Function FG0H156()
  ;
   /* ------------------------------------------------------------*/
   /* init qty change flag*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW00.FG0HWQTF = "N"; /* qty change flag*/
  ;
   /* ------------------------------------------------------------*/
   /* save current temporary storage page nbr*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW00.FG0HWSTP = FG0HW00.XXXTSPAG;
  ;
   /* ------------------------------------------------------------*/
   /* forecast target qty*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HM001.FG0HMTGT != FG0HW01.FG0HWTGT)
    ;
    FFXREC.FFXCHAR = FG0HM001.FG0HMTGT;
    XSFFS11();
    FG0HW01.FG0HWUTT = FFXREC.FFXNUMB;
    XSFFS10();
    FG0HW01.FG0HWTGT = FFXREC.FFXCHAR;
    ;
    FG0HW00.FG0HWDCF = "Y";
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* global change percent entered*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HM001.FG0HMPCT != 0)
    ;
    FG0HW00.FG0HWIDX = 1; /* process all pages in working storage*/
    while (FG0HW00.FG0HWIDX <= FG0HW00.TA5TSQIX)
      ;
      FG0HW00.FG0HWDMF = "N"; /* data modified flag*/
      FG0HW00.XXXTSPAG = FG0HW00.FG0HWIDX;
      ;
      FG0HS09(); /* read temporary storage*/
      ;
      FG0HW00.FG0HWPIX = FG0HW02.FG0HWNLD;
      while (FG0HW00.FG0HWPIX >= 1)
        if (FG0HW02.FG0HWUQT[FG0HWPIX] > 0)
          ;
           /* calculate the adjustment qty*/
          ;
          FG0HW00.FG0HWNM1 = FG0HM001.FG0HMPCT * FG0HW02.FG0HWUQT[FG0HWPIX];
          FG0HW00.FG0HWNM1 = FG0HW00.FG0HWNM1 / 100; /* adjustment qty*/
          ;
           /* calculate the new forecast qty*/
          ;
          FFXREC.FFXNUMB = FG0HW02.FG0HWUQT[FG0HWPIX] + FG0HW00.FG0HWNM1;
          FG0HW02.FG0HWUQT[FG0HWPIX] = FFXREC.FFXNUMB;
          XSFFS10();
          FG0HW02.FG0HWQTY[FG0HWPIX] = FFXREC.FFXCHAR;
          ;
          FG0HW02.FG0HWQUP[FG0HWPIX] = "Y"; /* Set qty updated flag*/
          ;
           /* calculate the forecast total qty*/
          ;
          FG0HW03.FG0HWUQT = FG0HW03.FG0HWUQT + FG0HW00.FG0HWNM1;
          ;
          FG0HW00.FG0HWDMF = "Y";
          ;
        end
        ;
        FG0HW00.FG0HWPIX = FG0HW00.FG0HWPIX - 1;
        ;
      end
      ;
      if (FG0HW00.FG0HWDMF == "Y")
        FG0HS10(); /* update temporary storage*/
        FG0HW00.FG0HWDCF = "Y";
        FG0HW00.FG0HWQTF = "Y";
      end
      ;
      FG0HW00.FG0HWIDX = FG0HW00.FG0HWIDX + 1;
      ;
    end
    ;
    return;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* global change total qty entered*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HM001.FG0HMCTQ != " ")
    ;
     /* load new forecast total qty*/
    ;
    FFXREC.FFXCHAR = FG0HM001.FG0HMCTQ;
    XSFFS11();
    FG0HW03.FG0HWUQT = FFXREC.FFXNUMB; /* tot fcst qty*/
    XSFFS10();
    FG0HW03.FG0HWQTY = FFXREC.FFXCHAR;
    ;
    FG0HW00.FG0HWIDX = 1; /* process all pages in working storage*/
    while (FG0HW00.FG0HWIDX <= FG0HW00.TA5TSQIX)
      ;
      FG0HW00.FG0HWDMF = "N"; /* data modified flag*/
      FG0HW00.XXXTSPAG = FG0HW00.FG0HWIDX;
      ;
      FG0HS09(); /* read temporary storage*/
      ;
      FG0HW00.FG0HWPIX = FG0HW02.FG0HWNLD;
      while (FG0HW00.FG0HWPIX >= 1)
        if (FG0HW02.FG0HWCPC[FG0HWPIX] > 0)
          ;
           /* calculate new forecast qtys*/
          ;
          FG0HW00.FG0HWNM1 = FG0HW02.FG0HWCPC[FG0HWPIX] * FG0HW03.FG0HWUQT;
          FG0HW00.FG0HWNM1 = FG0HW00.FG0HWNM1 / 100;
          ;
          FG0HW02.FG0HWUQT[FG0HWPIX] = FG0HW00.FG0HWNM1;
          FFXREC.FFXNUMB = FG0HW00.FG0HWNM1;
          XSFFS10();
          FG0HW02.FG0HWQTY[FG0HWPIX] = FFXREC.FFXCHAR;
          ;
          FG0HW02.FG0HWQUP[FG0HWPIX] = "Y"; /* Set qty updated flag*/
          ;
          FG0HW00.FG0HWDMF = "Y";
          ;
        end
        ;
        FG0HW00.FG0HWPIX = FG0HW00.FG0HWPIX - 1;
        ;
      end
      ;
      if (FG0HW00.FG0HWDMF == "Y")
        FG0HS10(); /* update temporary storage*/
        FG0HW00.FG0HWDCF = "Y";
        FG0HW00.FG0HWQTF = "Y";
      end
      ;
      FG0HW00.FG0HWIDX = FG0HW00.FG0HWIDX + 1;
      ;
    end
    ;
    return;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* process product category qty/percentages*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW00.FG0HWPIX = FG0HW02.FG0HWNLD;
  while (FG0HW00.FG0HWPIX >= 1)
    ;
    /* ------------------------------------------------------------*/
     /* change sales forecast quantity if changed*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0HM001.FG0HMQTY[FG0HWPIX] != FG0HW02.FG0HWQTY[FG0HWPIX])
      ;
       /* calculate the difference between the new and old forecast*/
       /* qtys and adjust the forecast total qty using the difference*/
      ;
      FFXREC.FFXCHAR = FG0HM001.FG0HMQTY[FG0HWPIX];
      XSFFS11();
      FG0HW00.FG0HWNM1 = FFXREC.FFXNUMB - FG0HW02.FG0HWUQT[FG0HWPIX];
      FG0HW03.FG0HWUQT = FG0HW03.FG0HWUQT + FG0HW00.FG0HWNM1;
      ;
       /* load the new forecast qty*/
      ;
      FG0HW02.FG0HWUQT[FG0HWPIX] = FFXREC.FFXNUMB;
      XSFFS10();
      FG0HW02.FG0HWQTY[FG0HWPIX] = FFXREC.FFXCHAR;
      ;
      FG0HW02.FG0HWQUP[FG0HWPIX] = "Y"; /* Set qty updated flag*/
      ;
      FG0HW00.FG0HWDCF = "Y";
      FG0HW00.FG0HWQTF = "Y";
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* calculate category percent if changed*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0HM001.FG0HMCPC[FG0HWPIX] != FG0HW02.FG0HWCPC[FG0HWPIX])
      ;
       /* load/calculate cat percent*/
      ;
      FG0HW00.FG0HWPC1 = FG0HM001.FG0HMCPC[FG0HWPIX];
      FG0HW00.FG0HWPC1 = FG0HW00.FG0HWPC1 - FG0HW02.FG0HWCPC[FG0HWPIX];
      FG0HW02.FG0HWCPC[FG0HWPIX] = FG0HM001.FG0HMCPC[FG0HWPIX];
      ;
       /* calculate the new forecast qty*/
      ;
      if (FG0HW03.FG0HWUQT == 0)
        FG0HW00.FG0HWNM1 = FG0HW02.FG0HWCPC[FG0HWPIX] * FG0HW01.FG0HWUTT;
        FG0HW00.FG0HWNM1 = FG0HW00.FG0HWNM1 / 100; /* new fcst qty*/
        FG0HW03.FG0HWUQT = FG0HW01.FG0HWUTT;
      else
        FG0HW00.FG0HWNM1 = FG0HW02.FG0HWCPC[FG0HWPIX] * FG0HW03.FG0HWUQT;
        FG0HW00.FG0HWNM1 = FG0HW00.FG0HWNM1 / 100; /* new fcst qty*/
      end
      ;
       /* load new forecast qtys*/
      ;
      FG0HW02.FG0HWUQT[FG0HWPIX] = FG0HW00.FG0HWNM1; /* fcst qty*/
      FFXREC.FFXNUMB = FG0HW00.FG0HWNM1;
      XSFFS10();
      FG0HW02.FG0HWQTY[FG0HWPIX] = FFXREC.FFXCHAR;
      ;
      FG0HW02.FG0HWQUP[FG0HWPIX] = "Y"; /* Set qty updated flag*/
      ;
      FG0HW00.FG0HWDCF = "Y";
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* calculate history percent if entered*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0HM001.FG0HMHPT[FG0HWPIX] != FG0HW01.FG0HWHPS[FG0HWPIX])
      ;
       /* load fields used for calculations*/
      ;
      FG0HW00.FG0HWNM1 = FG0HW02.FG0HWUQT[FG0HWPIX];
      if (FG0HM001.FG0HMHOP == "S")
        if (FG0HM001.FG0HMYOP == 1)
          FG0HW00.FG0HWNM2 = FG0HW02.FG0HWUH1[FG0HWPIX];
        end
        if (FG0HM001.FG0HMYOP == 2)
          FG0HW00.FG0HWNM2 = FG0HW02.FG0HWUH2[FG0HWPIX];
        end
        if (FG0HM001.FG0HMYOP == 3)
          FG0HW00.FG0HWNM2 = FG0HW02.FG0HWUH3[FG0HWPIX];
        end
      else
        if (FG0HM001.FG0HMYOP == 1)
          FG0HW00.FG0HWNM2 = FG0HW02.FG0HWUD1[FG0HWPIX];
        end
        if (FG0HM001.FG0HMYOP == 2)
          FG0HW00.FG0HWNM2 = FG0HW02.FG0HWUD2[FG0HWPIX];
        end
        if (FG0HM001.FG0HMYOP == 3)
          FG0HW00.FG0HWNM2 = FG0HW02.FG0HWUD3[FG0HWPIX];
        end
      end
      ;
       /* calculate the new forecast qty*/
      ;
      FG0HW00.FG0HWNM3 = FG0HM001.FG0HMHPT[FG0HWPIX] * FG0HW00.FG0HWNM2;
      FG0HW00.FG0HWNM3 = FG0HW00.FG0HWNM3 / 100; /* new fcst qty*/
      ;
       /* calculate the total forecast qty*/
      ;
      FG0HW00.FG0HWNM4 = FG0HW00.FG0HWNM3 - FG0HW00.FG0HWNM1; /* difference*/
      FG0HW03.FG0HWUQT = FG0HW03.FG0HWUQT + FG0HW00.FG0HWNM4;
      ;
       /* load new forecast qtys*/
      ;
      FG0HW02.FG0HWUQT[FG0HWPIX] = FG0HW00.FG0HWNM3; /* fcst qty*/
      FFXREC.FFXNUMB = FG0HW00.FG0HWNM3;
      XSFFS10();
      FG0HW02.FG0HWQTY[FG0HWPIX] = FFXREC.FFXCHAR;
      ;
      FG0HW02.FG0HWQUP[FG0HWPIX] = "Y"; /* Set qty updated flag*/
      ;
      FG0HW00.FG0HWDCF = "Y";
      FG0HW00.FG0HWQTF = "Y";
      ;
    end
    ;
    /* ------------------------------------------------------------*/
     /* calculate change percent if entered*/
    /* ------------------------------------------------------------*/
    ;
    if (FG0HM001.FG0HMCPT[FG0HWPIX] != 0)
      ;
      FG0HW00.FG0HWNM1 = FG0HW02.FG0HWUQT[FG0HWPIX]; /* fcst qty*/
      ;
       /* calculate the adjustment qty*/
      ;
      FG0HW00.FG0HWNM2 = FG0HM001.FG0HMCPT[FG0HWPIX] * FG0HW00.FG0HWNM1;
      FG0HW00.FG0HWNM2 = FG0HW00.FG0HWNM2 / 100; /* adjustment qty*/
      ;
       /* calculate the new forecast qty*/
      ;
      FG0HW02.FG0HWUQT[FG0HWPIX] = FG0HW00.FG0HWNM1 + FG0HW00.FG0HWNM2;
      FFXREC.FFXNUMB = FG0HW00.FG0HWNM1 + FG0HW00.FG0HWNM2;
      XSFFS10();
      FG0HW02.FG0HWQTY[FG0HWPIX] = FFXREC.FFXCHAR;
      ;
      FG0HW02.FG0HWQUP[FG0HWPIX] = "Y"; /* Set qty updated flag*/
      ;
       /* calculate the new forecast total qty*/
      ;
      FG0HW03.FG0HWUQT = FG0HW03.FG0HWUQT + FG0HW00.FG0HWNM2;
      ;
      FG0HW00.FG0HWDCF = "Y";
      FG0HW00.FG0HWQTF = "Y";
      ;
    end
    ;
    if (FG0HW02.FG0HWQUP[FG0HWPIX] == "Y") /* recalc the history percent*/
      FG0H159();
    end
    ;
    FG0HW00.FG0HWPIX = FG0HW00.FG0HWPIX - 1; /* line index*/
    ;
    if (FG0HW00.FG0HWPIX == 0
     && FG0HW00.FG0HWDCF == "Y")
      FG0HS10(); /* update temporary storage*/
    end
  end
  ;
  ;
end // end FG0H156

// re-calculate line percents
Function FG0H157()
  ;
   /* ----------------------------------------------------------*/
   /* if qty changed re-calculate product category fcst percents*/
   /* ----------------------------------------------------------*/
  ;
  if (FG0HW00.FG0HWQTF == "Y")
    ;
    FG0HW03.FG0HWCPC = 0; /* initialize the cat tot pct*/
    ;
    FG0HW00.FG0HWIDX = 1; /* init nbr of pages index*/
    while (FG0HW00.FG0HWIDX <= FG0HW00.TA5TSQIX)
      FG0HW00.XXXTSPAG = FG0HW00.FG0HWIDX; /* process temp storage*/
      FG0HS09(); /* read temp storage*/
      FG0HW00.FG0HWPIX = FG0HW02.FG0HWNLD;
      while (FG0HW00.FG0HWPIX >= 1)
        ;
        if (FG0HW02.FG0HWUQT[FG0HWPIX] != 0)
          FG0HW00.FG0HWNM1 = FG0HW02.FG0HWUQT[FG0HWPIX] * 100;
          FG0HW02.FG0HWCPC[FG0HWPIX] = mathLib.round(FG0HW00.FG0HWNM1 / FG0HW03.FG0HWUQT, -mathLib.decimals(FG0HW02.FG0HWCPC[FG0HWPIX]));
        else
          FG0HW02.FG0HWCPC[FG0HWPIX] = 0;
        end
        ;
        FG0HW03.FG0HWCPC = FG0HW03.FG0HWCPC + FG0HW02.FG0HWCPC[FG0HWPIX];
        FG0HW00.FG0HWPIX = FG0HW00.FG0HWPIX - 1; /* decrement line index*/
        ;
      end
      ;
      FG0HS10(); /* update temporary storage*/
      ;
      FG0HW00.FG0HWIDX = FG0HW00.FG0HWIDX + 1; /* increment page index*/
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* load total forecast qty, and total category percent*/
   /* ------------------------------------------------------------*/
  ;
   /* translate total forecast qty*/
  ;
  FFXNUMB = FG0HW03.FG0HWUQT;
  XSFFS10();
  FG0HW03.FG0HWQTY = FFXCHAR;
  ;
   /* ------------------------------------------------------------*/
   /* re-calculate variance qty : total forecast qty - target qty*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW01.FG0HWUVQ = FG0HW03.FG0HWUQT - FG0HW01.FG0HWUTT;
  ;
  FFXREC.FFXNUMB = FG0HW01.FG0HWUVQ;
  XSFFS10();
  FG0HW01.FG0HWVQT = FFXREC.FFXCHAR;
  ;
   /* ------------------------------------------------------------*/
   /* re-calculate variance percent :*/
     /* (variance qty * 100) / target qty*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HW01.FG0HWUTT != 0)
    FG0HW00.FG0HWNM1 = FG0HW01.FG0HWUVQ * 100;
    FG0HW01.FG0HWVPT = FG0HW00.FG0HWNM1 / FG0HW01.FG0HWUTT;
  else
    FG0HW01.FG0HWVPT = 0;
  end
  ;
end // end FG0H157

// ck key: modifiable fields
Function FG0H158()
  ;
   /* -----------------------------------------------------*/
   /* verify modifiable fields on current page*/
   /* -----------------------------------------------------*/
  ;
  FG0HW00.FG0HWPIX = FG0HW02.FG0HWNLD; /* nbr of lines loaded*/
  ;
  while (FG0HW00.FG0HWPIX >= 1) /* process temp storage*/
    ;
    if (FG0HM001.FG0HMCPT[FG0HWPIX] != 0)
      set FG0HM001.FG0HMCPT[FG0HWPIX] cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "158";
    end
    if (FG0HM001.FG0HMHPT[FG0HWPIX] != FG0HW01.FG0HWHPS[FG0HWPIX])
      set FG0HM001.FG0HMHPT[FG0HWPIX] cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "158";
    end
    if (FG0HM001.FG0HMCPC[FG0HWPIX] != FG0HW02.FG0HWSPC[FG0HWPIX])
      set FG0HM001.FG0HMCPC[FG0HWPIX] cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "158";
    end
    if (FG0HW02.FG0HWUQT[FG0HWPIX] != FG0HW02.FG0HWSQT[FG0HWPIX])
      set FG0HM001.FG0HMQTY[FG0HWPIX] cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "158";
    end
    if (FG0HM001.FG0HMSEL[FG0HWPIX] != " ")
      set FG0HM001.FG0HMSEL[FG0HWPIX] cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "158";
    end
    ;
    FG0HW00.FG0HWPIX = FG0HW00.FG0HWPIX - 1; /* decrement table index*/
    ;
  end
  ;
  if (FG0HM001.FG0HMCTQ != " ")
    set FG0HM001.FG0HMCTQ cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "158";
  end
  ;
  if (FG0HM001.FG0HMPCT != 0)
    set FG0HM001.FG0HMPCT cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "158";
  end
  ;
  if (FG0HW01.FG0HWUTT != FG0HW01.FG0HWSTT)
    set FG0HM001.FG0HMTGT cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "158";
  end
  ;
  if (converseVar.validationMsgNum != 0)
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if nothing was changed on the current page verify*/
   /* additional pages in temporary storage*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW00.FG0HWSTP = FG0HW00.XXXTSPAG; /* save current page*/
  ;
  FG0HW00.FG0HWIDX = 1; /* process all pages in working storage*/
  while (FG0HW00.FG0HWIDX <= FG0HW00.TA5TSQIX)
    ;
    FG0HW00.XXXTSPAG = FG0HW00.FG0HWIDX;
    ;
    FG0HS09(); /* read temporary storage*/
    ;
    /* -----------------------------------------------------*/
     /* verify fcst qty and category percent*/
    /* -----------------------------------------------------*/
    ;
    FG0HW00.FG0HWPIX = FG0HW02.FG0HWNLD; /* nbr of lines loaded*/
    ;
    while (FG0HW00.FG0HWPIX >= 1) /* process temp storage*/
      ;
      if (FG0HW02.FG0HWCPC[FG0HWPIX] != FG0HW02.FG0HWSPC[FG0HWPIX])
        converseLib.validationFailed(238);
        FFWREC.XXXMODID = "158";
      end
      if (FG0HW02.FG0HWUQT[FG0HWPIX] != FG0HW02.FG0HWSQT[FG0HWPIX])
        converseLib.validationFailed(238);
        FFWREC.XXXMODID = "158";
      end
      ;
      FG0HW00.FG0HWPIX = FG0HW00.FG0HWPIX - 1; /* decrement table index*/
      ;
    end
    ;
    FG0HW00.FG0HWIDX = FG0HW00.FG0HWIDX + 1; /* line index*/
    ;
  end
  ;
  FG0HW00.XXXTSPAG = FG0HW00.FG0HWSTP; /* set to current page*/
  ;
  FG0HS09(); /* read temporary storage*/
  ;
  ;
end // end FG0H158

// calculate history percent
Function FG0H159()
  ;
   /* recalculate the history percentage if the qty is changed*/
  ;
  if (FG0HM001.FG0HMHOP == "S")
    if (FG0HM001.FG0HMYOP == 1)
      FG0HW00.FG0HWNM2 = FG0HW02.FG0HWUH1[FG0HWPIX];
      FG0HW00.FG0HWTH1 = FG0HW02.FG0HWHQ1[FG0HWPIX];
    end
    if (FG0HM001.FG0HMYOP == 2)
      FG0HW00.FG0HWNM2 = FG0HW02.FG0HWUH2[FG0HWPIX];
      FG0HW00.FG0HWTH1 = FG0HW02.FG0HWHQ2[FG0HWPIX];
    end
    if (FG0HM001.FG0HMYOP == 3)
      FG0HW00.FG0HWNM2 = FG0HW02.FG0HWUH3[FG0HWPIX];
      FG0HW00.FG0HWTH1 = FG0HW02.FG0HWHQ3[FG0HWPIX];
    end
  else
    if (FG0HM001.FG0HMYOP == 1)
      FG0HW00.FG0HWNM2 = FG0HW02.FG0HWUD1[FG0HWPIX];
      FG0HW00.FG0HWTH1 = FG0HW02.FG0HWDQ1[FG0HWPIX];
    end
    if (FG0HM001.FG0HMYOP == 2)
      FG0HW00.FG0HWNM2 = FG0HW02.FG0HWUD2[FG0HWPIX];
      FG0HW00.FG0HWTH1 = FG0HW02.FG0HWDQ2[FG0HWPIX];
    end
    if (FG0HM001.FG0HMYOP == 3)
      FG0HW00.FG0HWNM2 = FG0HW02.FG0HWUD3[FG0HWPIX];
      FG0HW00.FG0HWTH1 = FG0HW02.FG0HWDQ3[FG0HWPIX];
    end
  end
  ;
  if (FG0HW00.FG0HWNM2 == 0)
    FG0HW01.FG0HWHPS[FG0HWPIX] = 0;
    FG0HM001.FG0HMHPT[FG0HWPIX] = FG0HW01.FG0HWHPS[FG0HWPIX];
  else
    if (FG0HW00.FG0HWTH1 == FG0HW02.FG0HWQTY[FG0HWPIX])
      FG0HW01.FG0HWHPS[FG0HWPIX] = 100; /* thousands = move 100%*/
      FG0HM001.FG0HMHPT[FG0HWPIX] = FG0HW01.FG0HWHPS[FG0HWPIX];
    else
      FG0HW00.FG0HWNM1 = FG0HW02.FG0HWUQT[FG0HWPIX] * 100;
      FG0HW01.FG0HWHPS[FG0HWPIX] = mathLib.round(FG0HW00.FG0HWNM1 / FG0HW00.FG0HWNM2, -mathLib.decimals(FG0HW01.FG0HWHPS[FG0HWPIX]));
      if (FG0HW01.FG0HWHPS[FG0HWPIX] > 999.9)
        FG0HW01.FG0HWHPS[FG0HWPIX] = 999.9; /* screen overflow fix*/
        FG0HM001.FG0HMHPT[FG0HWPIX] = FG0HW01.FG0HWHPS[FG0HWPIX];
      else
        FG0HM001.FG0HMHPT[FG0HWPIX] = FG0HW01.FG0HWHPS[FG0HWPIX];
      end
    end
  end
end // end FG0H159

// Process valid input request
Function FG0H160()
   /* ------------------------------------------------------------*/
   /* indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW00.FG0HWSWF = "Y"; /* set format map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA/ffwrec*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.YPGCD = FG0HM001.YPGCD; /* product type group*/
  if (FFWREC.YPGCD in YPGTBL.YPGCD)
    FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
  end
  ;
  FFWREC.XPLCD = FG0HM001.XPLCD; /* product line code*/
  XPLREC.XGPCD = COMMAREA.XGPCD; /* gpc code*/
  XPLREC.XPLCD = FG0HM001.XPLCD; /* product line code*/
  if (XPLREC.XPLKEY in XPLTBL.XPLKEY)
    FFWREC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex];
  end
  ;
  FFWREC.FFABEGMO = FFZREC.FFZBEGMO;
  FFWREC.FFAENDMO = FFZREC.FFZENDMO;
  ;
  FG0HW01.FG0HWYOP = FG0HM001.FG0HMYOP;
  FG0HW01.FG0HWHOP = FG0HM001.FG0HMHOP;
  ;
  if (converseVar.eventKey is enter
   && FG0HW00.FG0HWSWR == "Y") /* KEY DATA MODIFIED*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* request to scroll backwards*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* display next season*/
    FG0HW00.XXXTSPAG = FG0HW00.XXXTSPAG - 1;
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* request to scroll foward*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* display next season*/
    FG0HW00.XXXTSPAG = FG0HW00.XXXTSPAG + 1;
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* request to transfer to type group forecast 'FG0G';*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf14) /* transfer to 'FG0G'*/
    ;
    COMMAREA.CATOAP = "FG0G"; /* to application*/
    ;
    XSFFS01(); /* common exit routine*/
    ;
    FG0HW00.FG0HWSWR = "N"; /* request data switch*/
    FG0HW00.FG0HWSWF = "Y"; /* format screen m001*/
    ;
    return;
    ;
  end
  ;
   /* --------------------------------------------------------*/
   /* explode category request pf16*/
   /* --------------------------------------------------------*/
  ;
   /* IF EZEAID IS PF16               ; explode category request*/
  ;
   /* XX0XS01                       ; get current date and time*/
  ;
   /* MOVE 1 TO FG0HW00.FG0HWIDX;*/
   /* WHILE FG0HW00.FG0HWIDX LE FG0HW00.TA5TSQIX;*/
  ;
   /* MOVE FG0HW00.FG0HWIDX TO FG0HW00.XXXTSPAG;*/
  ;
   /* FG0HS09                     ; read temporary storage*/
  ;
   /* MOVE FG0HW02.FG0HWNLD TO FG0HW00.FG0HWPIX;*/
   /* WHILE FG0HW00.FG0HWPIX GE 1;*/
  ;
   /* PERFORM FG0H161           ; select set dfcast.vrcmth01*/
  ;
   /* PERFORM FG0H162           ; fetch dfcast vrcmth01*/
  ;
   /* WHILE SQLCA.SQLCODE EQ 0;*/
  ;
   /* PERFORM FG0H163         ; add  dfcast.vwcmth01*/
  ;
   /* IF SQLCA.SQLCODE EQ -803       ; duplicate data added*/
   /* MOVE '160' TO FFWREC.XXXMODID;*/
   /* MOVE 294 TO EZEMNO;*/
  ;
   /* PERFORM FG0H164       ; close dfcast.vrcmth01*/
  ;
   /* CALL EZEROLLB;*/
  ;
   /* EZEFLO;*/
  ;
   /* END ;*/
  ;
   /* PERFORM FG0H162         ; fetch dfcast vrcmth01*/
   /* END ;*/
  ;
   /* PERFORM FG0H164           ; close dfcast vrcmth01*/
  ;
   /* FG0HW00.FG0HWPIX = FG0HW00.FG0HWPIX - 1;*/
  ;
   /* END ;*/
  ;
   /* FG0HW00.FG0HWIDX = FG0HW00.FG0HWIDX + 1;*/
  ;
   /* END ;*/
  ;
   /* iF FFEREC.FFECMOFL EQ 'N'     ; Mo cat fcst flag not set*/
  ;
   /* MOVE 'Y' TO FFEREC.FFECMOFL ; set category monthly flag*/
  ;
   /* FG0HS16                     ; update dfcast.vwdgrp01*/
  ;
   /* END ;*/
  ;
   /* CALL EZECOMIT;*/
  ;
   /* END ;*/
  ;
   /* --------------------------------------------------------*/
   /* explode color request pf17*/
   /* --------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf17) /* explode color request*/
    ;
    FG0H165(); /* explode select color*/
    ;
    if (converseVar.validationMsgNum != 0) /* duplicate data added*/
      FFWREC.XXXMODID = "160";
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      ;
      exit stack;
      ;
    else
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit();
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* history data requested*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf18) /* display history data*/
    ;
    set FG0HW04 empty; /* init map 002 work record*/
    ;
    FG0HW04.FG0HWYO1 = FG0HM001.FG0HMYOP;
    FG0HW04.FG0HWHO1 = FG0HM001.FG0HMHOP;
    FG0HW04.FG0HWSWF = "Y"; /* set format switch*/
    FG0HW00.FG0HWSWD = "2"; /* request fg0hm002 display*/
    ;
    return;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if data has been changed and pf15(save) or 'S'elect*/
   /* has been requested update database*/
   /* ------------------------------------------------------------*/
  ;
   /* IF EZEAID NOT PF16              ; explode not requested*/
   /* AND EZEAID NOT PF17;*/
  if (converseVar.eventKey not pf17) /* explode not requested*/
    ;
    if (converseVar.eventKey is pf15 /* save requested by user*/
     || FG0HW00.FG0HWSLF == "Y")     /* product cat selected*/
      ;
      if (FG0HW00.FG0HWMOD == "Y" /* temp storage has been updated*/
       || FFWREC.FFEWSNBR == 0    
       || FFEREC.FFECATFL == "N")
        ;
        XX0XS01(); /* Obtain date and time*/
        ;
        if (FFWREC.FFEWSNBR == 0
         || FFEREC.FFECATFL == "Y")
          FG0H166(); /* obtain next work sheet nbr*/
          VGVar.handleSysLibraryErrors = 0;
          sysLib.commit();
        end
        ;
        if (FFWREC.FFEWSNBR == 0)
          FG0H167(); /* format/insert dfcast.vwdgrp01 row*/
          FG0H168(); /* format/insert dfcast.vwline01 row*/
          FG0H169(); /* format/insert dfcast.vwltyp01 row*/
          FFWREC.FFEWSNBR = FF1REC.FF1WSNBR; /* load new wrk sht nbr*/
        else
          ;
          FG0HW00.FG0HWREP = "N"; /* Init replicate flag*/
          FG0HW00.XXXTSPAG = 1; /* process temp storage*/
          while (FG0HW00.XXXTSPAG <= FG0HW00.TA5TSQIX
           && FG0HW00.FG0HWREP == "N")
            ;
            FG0HS09(); /* read temporary storage*/
            ;
            FG0HW00.FG0HWIDX = FG0HW02.FG0HWNLD;
            while (FG0HW00.FG0HWIDX >= 1
             && FG0HW00.FG0HWREP == "N")
              ;
              if (FG0HW02.FG0HWWKE[FG0HWIDX] == "Y"
               && FG0HW02.FG0HWQUP[FG0HWIDX] == "Y")
                ;
                FG0HW00.FG0HWREP = "Y"; /* Set replicate flag*/
                ;
              end
              ;
              FG0HW00.FG0HWIDX = FG0HW00.FG0HWIDX - 1;
            end
            FG0HW00.XXXTSPAG = FG0HW00.XXXTSPAG + 1;
          end
          ;
          if (FG0HW00.FG0HWREP == "Y")
            FG0HS15(); /* replicate high level worksheets*/
            FFWREC.FFEWSNBR = FF1REC.FF1WSNBR;
                                   /* load new wrk sht nbr*/
          end
          ;
          FG0HS21(); /* re-sel dfcast.vwdgrp01 row*/
          FG0HS22(); /* re-sel dfcast.vwline01 row*/
          FG0HS23(); /* re-sel dfcast.vwltyp01 row*/
          ;
          FFEREC.FFECATFL = "Y"; /* set category flag*/
          FG0HS16(); /* update dfcast.vwdgrp01 row*/
          ;
          FG0HS17(); /* update dfcast.vwline01 row*/
          FG0HS18(); /* update dfcast.vwltyp01 row*/
          ;
        end
        ;
        /* --------------------------------------------------------*/
         /* format/insert dfcast.vwcat001 rows for each category*/
         /* on map fg0hm001*/
        /* --------------------------------------------------------*/
        ;
        FG0HW00.XXXTSPAG = 1; /* process temp storage*/
        while (FG0HW00.XXXTSPAG <= FG0HW00.TA5TSQIX)
          ;
          FG0HS09(); /* read temporary storage*/
          ;
          FG0HW00.FG0HWIDX = FG0HW02.FG0HWNLD;
          while (FG0HW00.FG0HWIDX >= 1)
            ;
            if (FG0HW02.FG0HWQUP[FG0HWIDX] == "Y")
              FG0HW02.FG0HWQUP[FG0HWIDX] = "N"; /* reset qty upd flg*/
              FG0HS19(); /* format/insert dfcast.vwcat001 rows*/
            else
              if (FG0HW00.FG0HWREP == "Y"
               && FG0HW02.FG0HWQTY[FG0HWIDX] != " ")
                FG0HS19(); /* format/insert dfcast.vwcat001 rows*/
              end
            end
            ;
            FG0HW00.FG0HWIDX = FG0HW00.FG0HWIDX - 1;
          end
          FG0HW00.XXXTSPAG = FG0HW00.XXXTSPAG + 1;
        end
        ;
        FG0HW00.FG0HWREP = "N"; /* Reset replicate flag*/
        FFWREC.FFWMODSW = "N"; /* init tsq update flag*/
        FG0HW00.FG0HWMOD = "N"; /* init tsq update flag*/
        FG0HW00.FG0HWDCF = "N"; /* init data entered flag*/
        ;
        FG0HS10(); /* Update TSQ*/
        ;
        VGVar.handleSysLibraryErrors = 0;
        sysLib.commit();
        ;
        FG0HS20();
                                   /* purge any excess forecast work sheets*/
        ;
        VGVar.handleSysLibraryErrors = 0;
        sysLib.commit();
        ;
        FG0HW00.FG0HWSWR = "Y"; /* requested data switch*/
        ;
        if (converseVar.eventKey is pf15) /* save request*/
          FFWREC.XXXMSGNO = 33;
          FFWREC.XXXMODID = "160";
          return;
        end
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* if pf16 was pressed transfer to application 'FG0Q'*/
   /* if pf17 was pressed transfer to application 'FG0S'*/
   /* if a product was selected transfer to application 'FG0I'*/
   /* ------------------------------------------------------------*/
  ;
   /* IF EZEAID IS PF16;*/
   /* OR EZEAID IS PF17;*/
  if (converseVar.eventKey is pf17
   || FG0HW00.FG0HWSLF == "Y")
    ;
    /* IF EZEAID IS PF16             ; explode category*/
    /* MOVE 'FG0Q' TO COMMAREA.CATOAP     ; to application*/
    /* ELSE ;*/
    if (converseVar.eventKey is pf17) /* explode color*/
      COMMAREA.CATOAP = "FG0S"; /* to application*/
    else /* ; explode color/style grp*/
      COMMAREA.CATOAP = "FG0I"; /* to application*/
    end
    /* END ;*/
    ;
    FG0HS01(); /* purge temp storage*/
    ;
    XSFFS01(); /* common exit routine*/
    ;
    FG0HW00.FG0HWSWR = "N"; /* request data switch*/
    FG0HW00.FG0HWSWF = "Y"; /* format screen m001*/
    ;
    return;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* if data was loaded, and temporary storage was modified*/
   /* set ffwrec modified switch yes.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HW01.CACHGFL == "Y"
   && FG0HW00.FG0HWDCF == "Y")
    FFWREC.FFWMODSW = "Y";
    FG0HW00.FG0HWMOD = "Y";
  end
  ;
  ;
end // end FG0H160

// explode color/style
Function FG0H165()
   /* ------------------------------------------------------------*/
   /* explode style/color by month using routine xsffs58*/
   /* ------------------------------------------------------------*/
  ;
  set FFYREC empty;
  ;
  FFYREC.FFYLEVEL = 1;
  FFYREC.FFEWSNBR = FFWREC.FFEWSNBR; /* old wrk sheet nbr*/
  FFYREC.YPGCD = FFWREC.YPGCD; /* product type group*/
  FFYREC.XPCCD = FFWREC.XPCCD; /* product category code*/
  FFYREC.XXXUSRID = COMMAREA.CAUSERID; /* user id*/
  FFYREC.ZZZSDT = XX0XW01.XX0XWDAT; /* current date*/
  FFYREC.ZZZSTM = XX0XW01.XX0XWTIM; /* current time*/
  TA1REC.TA1PGMNM = "FG0H165";
  ;
  XSFFS58();
  ;
  ;
end // end FG0H165

// obtain next work sheet nbr
Function FG0H166()
   /* ------------------------------------------------------------*/
   /* obtain next work sheet number dfcast.vffctl01*/
   /* ------------------------------------------------------------*/
  ;
  set FF1REC empty; /* Clear row storage area*/
  ;
  FF1REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FF1REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3660" ("U3", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "166"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VFFCTL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF1REC.FF1GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0H166

// add dfcast.vwdgrp01 row
Function FG0H167()
   /* ------------------------------------------------------------*/
   /* add dfcast.vwdgrp01 table row*/
   /* ------------------------------------------------------------*/
  ;
  set FFEREC empty; /* Clear row storage area*/
  ;
  FFEREC.FFEWSNBR = FF1REC.FF1WSNBR; /* new wrk sht nbr*/
  FFEREC.YSMXDV = "10"; /* div code*/
  FFEREC.XCTCD = "USA"; /* country code*/
  FFEREC.FFABEGMO = FFWREC.FFABEGMO; /* begin rangeccyymm*/
  FFEREC.FFAENDMO = FFWREC.FFAENDMO; /* end range ccyymm*/
  FFEREC.FFELINFL = "Y"; /* product line flag*/
  FFEREC.FFETYPFL = "Y"; /* product type flag*/
  FFEREC.FFECATFL = "Y"; /* category flag*/
  FFEREC.FFEGRPFL = "N"; /* group flag*/
  FFEREC.FFECLRFL = "N"; /* color flag*/
  FFEREC.FFELMOFL = "N"; /* line month flag*/
  FFEREC.FFECMOFL = "N"; /* category month flag*/
  FFEREC.FFEGMOFL = "N"; /* group month flag*/
  FFEREC.FFESMOFL = "N"; /* color flag*/
  FFEREC.XXXUSRID = COMMAREA.CAUSERID; /* user id*/
  FFEREC.ZZZSDT = XX0XW01.XX0XWDAT; /* current date*/
  FFEREC.ZZZSTM = XX0XW01.XX0XWTIM; /* current time*/
  FFEREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* current date*/
  FFEREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* current time*/
  ;
  try
    call "IO3850" ("A ", SQLCA, FFEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "167"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VWDGRP01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWDGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFEREC.FFEKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0H167

// add dfcast.vwline01 row
Function FG0H168()
   /* ------------------------------------------------------------*/
   /* add dfcast.vwline01 table row*/
   /* ------------------------------------------------------------*/
  set FFGREC empty;
  ;
  FFGREC.FFEWSNBR = FF1REC.FF1WSNBR;
  FFGREC.XPLCD = FFWREC.XPLCD;
  FFGREC.FF6SLFCT = FG0HW03.FG0HWUQT;
  FFGREC.FFGYRIND = FG0HW01.FG0HWYOP;
  FFGREC.FFGSDIND = FG0HW01.FG0HWHOP;
  FFGREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFGREC.ZZZSTM = XX0XW01.XX0XWTIM;
  FFGREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFGREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3890" ("A ", SQLCA, FFGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "168"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VWLINE01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFGREC.FFGKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0H168

// add dfcast.vwltyp01 row
Function FG0H169()
   /* ------------------------------------------------------------*/
   /* add dfcast.vwltyp01 table row*/
   /* ------------------------------------------------------------*/
  set FFIREC empty;
  ;
  FFIREC.FFEWSNBR = FF1REC.FF1WSNBR;
  FFIREC.XPLCD = FFWREC.XPLCD;
  FFIREC.YPGCD = FFWREC.YPGCD;
  FFIREC.FF6SLFCT = FG0HW03.FG0HWUQT;
  FFIREC.FFEFCTGT = FG0HW01.FG0HWUTT;
  FFIREC.FFGYRIND = FG0HW01.FG0HWYOP;
  FFIREC.FFGSDIND = FG0HW01.FG0HWHOP;
  FFIREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFIREC.ZZZSTM = XX0XW01.XX0XWTIM;
  FFIREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFIREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3910" ("A ", SQLCA, FFIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "169"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VWLTYP01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFIREC.FFIKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0H169

// recalc the cat percent total
Function FG0H170()
   /* ------------------------------------------------------------*/
   /* recalc the cat percent total*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW00.FG0HWSTP = FG0HW00.XXXTSPAG; /* save current page*/
  ;
  FG0HW03.FG0HWCPC = 0;
  FG0HW00.FG0HWIDX = 1; /* init nbr of pages index*/
  while (FG0HW00.FG0HWIDX <= FG0HW00.TA5TSQIX)
    FG0HW00.XXXTSPAG = FG0HW00.FG0HWIDX; /* process temp storage*/
    FG0HS09(); /* read temp storage*/
    FG0HW00.FG0HWPIX = FG0HW02.FG0HWNLD;
    while (FG0HW00.FG0HWPIX >= 1)
      if (FG0HW00.XXXTSPAG == FG0HW00.FG0HWSTP)
        FG0HW00.FG0HWPC1 = FG0HM001.FG0HMCPC[FG0HWPIX];
      else
        FG0HW00.FG0HWPC1 = FG0HW02.FG0HWCPC[FG0HWPIX];
      end
      FG0HW03.FG0HWCPC = FG0HW03.FG0HWCPC + FG0HW00.FG0HWPC1;
      FG0HW00.FG0HWPIX = FG0HW00.FG0HWPIX - 1; /* decrement line index*/
    end
    FG0HW00.FG0HWIDX = FG0HW00.FG0HWIDX + 1; /* increment page index*/
  end
  ;
  FG0HW00.XXXTSPAG = FG0HW00.FG0HWSTP; /* set back to current*/
  FG0HS09(); /* read temp storage*/
  ;
  if (FG0HW03.FG0HWCPC > 99.5
   && FG0HW03.FG0HWCPC <= 100.5)
    FG0HW03.FG0HWCPC = 100;
    FG0HM001.FG0HMCPC[FG0HWTIX] = FG0HW03.FG0HWCPC;
  else
    FG0HM001.FG0HMCPC[FG0HWTIX] = FG0HW03.FG0HWCPC;
  end
end // end FG0H170

// Inquire/maintain a table row
Function FG0H200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FG0H210(); /* Format and display the map*/
  ;
  FG0H220(); /* Check attention identifier*/
  ;
  FG0H230(); /* Reset fields to normal intensity*/
  ;
  FG0H240(); /* Verify the entered data*/
  ;
  FG0H250(); /* Process valid input request*/
  ;
end // end FG0H200

// Format and converse the map
Function FG0H210()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* if no errors format map*/
    ;
    if (FG0HW04.FG0HWSWF == "Y")
      FG0H211(); /* Format the data on the map*/
    end
    ;
  else
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* load message number*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FG0HM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FG0HM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG0HM002.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
   /* ------------------------------------------------------------*/
   /* load page information*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HW00.XXXTSPAG > 0)
    set FG0HM002.XXXLITPG skip;
    FG0HM002.XXXTSPAG = FG0HW00.XXXTSPAG;
    set FG0HM002.XXXLITOF skip;
    FG0HM002.TA5TSQIX = FG0HW00.TA5TSQIX;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* error message number*/
    FG0HM002.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    set FG0HM002 alarm; /* Indicate sound alarm*/
  end
  ;
  converse FG0HM002 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0;
  ;
  COMMAREA.CATOAP = FG0HM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG0HM002.CAITEM; /* Application data*/
  ;
  ;
end // end FG0H210

// Format the display data
Function FG0H211()
   /* ------------------------------------------------------------*/
   /* init map*/
   /* ------------------------------------------------------------*/
  ;
  set FG0HM002 initial;
  ;
  FG0HW04.FG0HWSWF = "N"; /* init map switch*/
  ;
   /* ------------------------------------------------------------*/
   /* Format fg0hm002 using passed data*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW00.FG0HWWDT = FFWREC.FFABEGMO; /* w/s date field*/
  FG0HM002.FG0HMBRG = FG0HW00.FG0HWWYM; /* begin month range*/
  FG0HW00.FG0HWWDT = FFWREC.FFAENDMO; /* w/s date field*/
  FG0HM002.FG0HMERG = FG0HW00.FG0HWWYM; /* end month range*/
  ;
  FG0HM002.YPGCD = FFWREC.YPGCD; /* product type group*/
  FG0HM002.YPGABRV = FFWREC.YPGABRV; /* product type group abrv*/
  ;
  FG0HM002.XPLCD = FFWREC.XPLCD; /* product category*/
  FG0HM002.XPLABRV = FFWREC.XPLABRV; /* product category desc*/
  ;
  FG0HM002.FG0HMYOP = FG0HW04.FG0HWYO1; /* year option*/
  FG0HM002.FG0HMHOP = FG0HW04.FG0HWHO1; /* history option*/
  ;
   /* ------------------------------------------------------------*/
   /* load map using fg0hw01 work record*/
   /* ------------------------------------------------------------*/
  ;
  set FG0HM002.FG0HMPR1 skip;
  FG0HM002.FG0HMPBR = FG0HW01.FG0HWPBR[FG0HWYO1]; /* prior beg range yymm*/
  set FG0HM002.FG0HMPBR skip;
  set FG0HM002.FG0HMDSH skip;
  FG0HM002.FG0HMPER = FG0HW01.FG0HWPER[FG0HWYO1]; /* prior end range yymm*/
  set FG0HM002.FG0HMPER skip;
  set FG0HM002.FG0HMPR2 skip;
  FG0HM002.FG0HMYDS = FG0HW00.FG0HWYDS[FG0HWYO1]; /* prior year desc*/
  set FG0HM002.FG0HMYDS skip;
  ;
   /* ------------------------------------------------------------*/
   /* obtain current historical sales/demand qtys from temp*/
   /* storage*/
   /* ------------------------------------------------------------*/
  ;
  FG0HS09(); /* read temporary storage*/
  ;
  FG0HW00.FG0HWPIX = 1;
  while (FG0HW00.FG0HWPIX <= FG0HW02.FG0HWNLD) /* process temp storage*/
    ;
    FG0HM002.FG0HMHSC[FG0HWPIX] = FG0HW02.XPCSDESC[FG0HWPIX];
    FG0HM002.FG0HMHDC[FG0HWPIX] = FG0HW02.XPCSDESC[FG0HWPIX];
    if (FG0HW04.FG0HWYO1 == 1)
      FG0HM002.FG0HMHSQ[FG0HWPIX] = FG0HW02.FG0HWHQ1[FG0HWPIX];
      FG0HM002.FG0HMHSP[FG0HWPIX] = FG0HW02.FG0HWHP1[FG0HWPIX];
      FG0HM002.FG0HMHDQ[FG0HWPIX] = FG0HW02.FG0HWDQ1[FG0HWPIX];
      FG0HM002.FG0HMHDP[FG0HWPIX] = FG0HW02.FG0HWDP1[FG0HWPIX];
    end
    if (FG0HW04.FG0HWYO1 == 2)
      FG0HM002.FG0HMHSQ[FG0HWPIX] = FG0HW02.FG0HWHQ2[FG0HWPIX];
      FG0HM002.FG0HMHSP[FG0HWPIX] = FG0HW02.FG0HWHP2[FG0HWPIX];
      FG0HM002.FG0HMHDQ[FG0HWPIX] = FG0HW02.FG0HWDQ2[FG0HWPIX];
      FG0HM002.FG0HMHDP[FG0HWPIX] = FG0HW02.FG0HWDP2[FG0HWPIX];
    end
    if (FG0HW04.FG0HWYO1 == 3)
      FG0HM002.FG0HMHSQ[FG0HWPIX] = FG0HW02.FG0HWHQ3[FG0HWPIX];
      FG0HM002.FG0HMHSP[FG0HWPIX] = FG0HW02.FG0HWHP3[FG0HWPIX];
      FG0HM002.FG0HMHDQ[FG0HWPIX] = FG0HW02.FG0HWDQ3[FG0HWPIX];
      FG0HM002.FG0HMHDP[FG0HWPIX] = FG0HW02.FG0HWDP3[FG0HWPIX];
    end
    ;
    FG0HW00.FG0HWPIX = FG0HW00.FG0HWPIX + 1; /* increment load index*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* load forecast historical sales/demand totals*/
   /* ------------------------------------------------------------*/
  ;
  FG0HM002.FG0HMHSC[FG0HWTIX] = "   TOTAL    ";
  FG0HM002.FG0HMHDC[FG0HWTIX] = "   TOTAL    ";
  FG0HM002.FG0HMHSQ[FG0HWTIX] = FG0HW03.FG0HWHSQ[FG0HWYO1];
  FG0HM002.FG0HMHSP[FG0HWTIX] = 100;
  FG0HM002.FG0HMHDQ[FG0HWTIX] = FG0HW03.FG0HWHDQ[FG0HWYO1];
  FG0HM002.FG0HMHDP[FG0HWTIX] = 100;
  ;
  ;
end // end FG0H211

// Check attention identifier
Function FG0H220()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    converseLib.clearScreen();
     /* refresh screen*/
    ;
    FG0HW04.FG0HWSWF = "Y"; /* format screem m002*/
    ;
    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HM002.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      if (FG0HM002.CATOAP == "FG0G"
       || FG0HM002.CATOAP == "FG0Q"
       || FG0HM002.CATOAP == "FG0S")
        ;
        FFWREC.XXXMODID = "220"; /* Module identification*/
        converseLib.validationFailed(189); /* Indicate PF key not valid*/
        set FG0HM002.CATOAP cursor, bold; /* Highlight*/
        ;
      else
        ;
        FG0HS01(); /* purge temp storage*/
        ;
        XSFFS01(); /* Exit to another application*/
        ;
        FG0HW04.FG0HWSWF = "Y"; /* format screem m002*/
        ;
        set FG0HM002.CATOAP cursor, bold; /* Highlight*/
        ;
      end
    else
      ;
      FFWREC.XXXMODID = "220"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG0HM002"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FG0A"; /* TO application*/
    end
    ;
    XSFFS01(); /* Exit to another application*/
    ;
    FG0HW04.FG0HWSWF = "Y"; /* format screem m002*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* pf7 was not pressed*/
   && converseVar.eventKey not pf8   /* pf8 was not pressed*/
   && converseVar.eventKey not pf14  /* pf14 was not pressed*/
   && converseVar.eventKey not pf15  /* pf15 was not pressed*/
  )                                 
    FFWREC.XXXMODID = "220"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FG0H220

// Reset highlighted fields
Function FG0H230()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set FG0HM002.FG0HMYOP initialAttributes; /* year option*/
  set FG0HM002.FG0HMHOP initialAttributes; /* history option*/
  ;
  set FG0HM002.CATOAP initialAttributes;
  set FG0HM002.CAITEM initialAttributes;
  ;
end // end FG0H230

// Verify the entered data
Function FG0H240()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    FFWREC.XXXMODID = "240"; /* Module identification*/
    set FG0HM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* request to page forward(pf7) or backwards(pf8) verify*/
   /* modifiable fields*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    ;
    FG0H241(); /* verify scroll request*/
    ;
    FG0H242(); /* check modifiable fields*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* request for same opt(pf14) or request for chg opt(pf15)*/
   /* or request for print opt(pf19) check modifiable fields*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf19)
    ;
    FG0H242(); /* check modifiable fields*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* validate entry fields, and key data changes*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter)
    ;
    /* -------------------------------*/
     /* validate history option field*/
    /* -------------------------------*/
    ;
    if (FG0HM002.FG0HMHOP != FG0HW04.FG0HWHO1)
      if (FG0HM002.FG0HMHOP != "S"
       && FG0HM002.FG0HMHOP != "D")
        converseLib.validationFailed(10);
        FFWREC.XXXMODID = "240";
        set FG0HM002.FG0HMHOP cursor, bold;
      end
    end
    ;
    /* -------------------------------*/
     /* validate year option field*/
    /* -------------------------------*/
    ;
    if (FG0HM002.FG0HMYOP != FG0HW04.FG0HWYO1)
      if (FG0HM002.FG0HMYOP != "1"
       && FG0HM002.FG0HMYOP != "2"
       && FG0HM002.FG0HMYOP != "3")
        converseLib.validationFailed(10);
        FFWREC.XXXMODID = "240";
        set FG0HM002.FG0HMYOP cursor, bold;
      end
    end
  end
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end
  ;
  ;
end // end FG0H240

// Verify scroll request
Function FG0H241()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FG0HW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    FFWREC.XXXMODID = "241"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FG0HW00.XXXTSPAG >= FG0HW00.TA5TSQIX) /* and no more pages*/
    ;
    FFWREC.XXXMODID = "241"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/
    ;
  end
  ;
end // end FG0H241

// check modifiable fields
Function FG0H242()
  ;
   /* ------------------------------------------------------------*/
   /* check modifiable fields*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HM002.FG0HMHOP != FG0HW04.FG0HWHO1)
    set FG0HM002.FG0HMHOP cursor, bold;
    converseLib.validationFailed(111);
    FFWREC.XXXMODID = "242";
  end
  ;
  if (FG0HM002.FG0HMYOP != FG0HW04.FG0HWYO1)
    set FG0HM002.FG0HMYOP cursor, bold;
    converseLib.validationFailed(111);
    FFWREC.XXXMODID = "242";
  end
  ;
  ;
end // end FG0H242

// Process valid input request
Function FG0H250()
  ;
  FG0HW04.FG0HWSWF = "Y"; /* format map 002*/
  ;
   /* ------------------------------------------------------------*/
   /* request to scroll backwards*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* display next season*/
    FG0HW00.XXXTSPAG = FG0HW00.XXXTSPAG - 1;
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* request to scroll foward*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* display next season*/
    FG0HW00.XXXTSPAG = FG0HW00.XXXTSPAG + 1;
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* pf14(same opt) has been requested*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf14) /* same option*/
    FG0HW00.FG0HWSWD = "1"; /* request fg0hm001 display*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* pf15(chng opt) has been requested*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf15) /* same option*/
    FG0HW01.FG0HWYOP = FG0HM002.FG0HMYOP;
    FG0HW01.FG0HWHOP = FG0HM002.FG0HMHOP;
    FG0HW00.FG0HWSWD = "1"; /* request fg0hm001 display*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* save modifiable fields*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW04.FG0HWYO1 = FG0HM002.FG0HMYOP;
  FG0HW04.FG0HWHO1 = FG0HM002.FG0HMHOP;
  ;
  ;
end // end FG0H250

// purge temporary storage
Function FG0HS01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FG0HW01 empty; /* M001 temporary storage header*/
  set FG0HW02 empty; /* M001 temporary storage detail*/
  set FG0HW03 empty; /* M001 temporary storage totals*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FG0HW00.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FG0HW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0HS01

// select 's2' dfcast.vffxrf01
Function FG0HS02()
   /* ------------------------------------------------------------*/
   /* key fields are loaded in the calling process*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* select set dfcast.vffxrf01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("S2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
    return;
    ;
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S02"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S2 ON DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0HS02

// fetch 'n2' dfcast.vffxrf01
Function FG0HS03()
   /* ------------------------------------------------------------*/
   /* fetch dfcast.vffxrf01 row*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("N2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S03"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N2 DFCAST.VFFXRF01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0HS03

// select/sum dfcast.vmcat001
Function FG0HS04()
   /* ------------------------------------------------------------*/
   /* Select sum on dfcast.vmcat001 table.*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* load fffrec record*/
   /* ------------------------------------------------------------*/
  ;
  FFFREC.FFFFUNCD = "SS"; /* function code*/
  ;
   /* ------------------------------------------------------------*/
   /* load ff7rec record - dfcast.vmcat001*/
   /* ------------------------------------------------------------*/
  ;
  set FF7REC empty; /* Clear row storage area*/
  ;
  FF7REC.YSMXDV = "10"; /* div code*/
  FF7REC.XCTCD = "USA"; /* country code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* product type code*/
  FF7REC.XPCCD = FG0HW02.XPCCD[FG0HWIDX]; /* product cat code*/
  ;
   /* ------------------------------------------------------------*/
   /* select sum dfcast.vmcat001*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3700" (FFFREC, SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or zero total, return to the previous process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* zero total returned*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S04"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUM TABLE DFCAST.VMCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0HS04

// select dfhist.vfhcat01
Function FG0HS05()
   /* ------------------------------------------------------------*/
   /* Obtain demand quantities from dfhist.vfhcat01.*/
   /* ------------------------------------------------------------*/
  ;
  FH3REC.XPCCD = FG0HW02.XPCCD[FG0HWIDX]; /* product catg code*/
  FH3REC.XPRCD = FFWREC.YPGCD; /* product type code*/
  FH3REC.FH1PNAC = "*"; /* nacct fl*/
  TA1PGMNM = "FG0HS05"; /* calling process*/
  ;
   /* --------------------------------------------------*/
   /* Select sum on dfhist.vfhcat01 table*/
   /* --------------------------------------------------*/
  ;
  XSFFS50();
  ;
  ;
end // end FG0HS05

// select dfcast.vwcat001
Function FG0HS06()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vwcat001 table.*/
   /* ------------------------------------------------------------*/
  ;
  set FFJREC empty; /* Clear row storage area*/
  ;
  FFJREC.FFEWSNBR = FFWREC.FFEWSNBR;
  FFJREC.YPGCD = FFWREC.YPGCD;
  FFJREC.XPCCD = FG0HW02.XPCCD[FG0HWIDX];
  ;
   /* ------------------------------------------------------------*/
   /* select dfcast.vwcat001*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3840" ("S ", SQLCA, FFJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S06"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VWCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFJREC.FFJKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0HS06

// add temporary storage
Function FG0HS07()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW02.XXXTSLEN = FG0HW00.XXXTSLEN;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (FG0HW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FG0HW02 empty; /* M001 display storage*/
    ;
    FG0HW00.FG0HWIDX = 1; /* Display line index*/
    ;
    FG0HW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S07"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0HS07

// close 's2' dfcast.vffxrf01 set
Function FG0HS08()
   /* ------------------------------------------------------------*/
   /* close dfcast.vffxrf01 table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO4000" ("C2", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    ;
    return;
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "S08"; /* Module identification*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE S2 DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0HS08

// read temporary storage
Function FG0HS09()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  FG0HW02.XXXTSLEN = FG0HW00.XXXTSLEN;
  TA5REC.TA5TSQIX = FG0HW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FG0HW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S09"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0HS09

// update temporary storage
Function FG0HS10()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW02.XXXTSLEN = FG0HW00.XXXTSLEN;
  TA5REC.TA5APPID = COMMAREA.CACURRAP;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (FG0HW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FFWREC.XXXMODID = "S10"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0HS10

// verify modifiable fields
Function FG0HS11()
   /* -----------------------------------------------------*/
   /* verify all detail modifiable fields*/
   /* -----------------------------------------------------*/
  ;
  FG0HW00.FG0HWIDX = FG0HW02.FG0HWNLD; /* nbr of lines loaded*/
  ;
  while (FG0HW00.FG0HWIDX >= 1) /* process temp storage*/
    ;
    if (FG0HM001.FG0HMCPT[FG0HWIDX] != 0)
      set FG0HM001.FG0HMCPT[FG0HWIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S11";
    end
    if (FG0HM001.FG0HMHPT[FG0HWIDX] != FG0HW01.FG0HWHPS[FG0HWIDX])
      set FG0HM001.FG0HMHPT[FG0HWIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S11";
    end
    if (FG0HM001.FG0HMCPC[FG0HWIDX] != FG0HW02.FG0HWCPC[FG0HWIDX])
      set FG0HM001.FG0HMCPC[FG0HWIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S11";
    end
    if (FG0HM001.FG0HMQTY[FG0HWIDX] != FG0HW02.FG0HWQTY[FG0HWIDX])
      set FG0HM001.FG0HMQTY[FG0HWIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S11";
    end
    if (FG0HM001.FG0HMSEL[FG0HWIDX] != " "
     && converseVar.eventKey not enter
     && converseVar.eventKey not pf17)
      set FG0HM001.FG0HMSEL[FG0HWIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S11";
    end
    ;
    FG0HW00.FG0HWIDX = FG0HW00.FG0HWIDX - 1; /* decrement table index*/
    ;
  end
  ;
   /* -----------------------------------------------------*/
   /* verify header modifiable fields*/
   /* -----------------------------------------------------*/
  ;
  if (FG0HM001.FG0HMCTQ != " ")
    set FG0HM001.FG0HMCTQ cursor, bold;
    converseLib.validationFailed(111);
    FFWREC.XXXMODID = "S11";
  end
  ;
  if (FG0HM001.FG0HMPCT != 0)
    set FG0HM001.FG0HMPCT cursor, bold;
    converseLib.validationFailed(111);
    FFWREC.XXXMODID = "S11";
  end
  ;
  if (converseVar.eventKey not enter)
    ;
    if (FG0HM001.YPGCD != FFWREC.YPGCD)
      set FG0HM001.YPGCD cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S11";
    end
    ;
    if (FG0HM001.XPLCD != FFWREC.XPLCD)
      set FG0HM001.XPLCD cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S11";
    end
  end
  ;
  if (converseVar.eventKey not pf18
   && converseVar.eventKey not enter)
    ;
    if (FG0HM001.FG0HMHOP != FG0HW01.FG0HWHOP)
      set FG0HM001.FG0HMHOP cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S11";
    end
    ;
    if (FG0HM001.FG0HMYOP != FG0HW01.FG0HWYOP)
      set FG0HM001.FG0HMYOP cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S11";
    end
  end
  ;
  if (converseVar.eventKey not pf7
   && converseVar.eventKey not pf8
   && converseVar.eventKey not pf18
   && converseVar.eventKey not enter)
    if (FG0HM001.FG0HMTGT != FG0HW01.FG0HWTGT)
      set FG0HM001.FG0HMTGT cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S11";
    end
  end
  ;
  if (converseVar.eventKey not enter)
    ;
    FG0HW00.FG0HWWED = FFWREC.FFAENDMO;
    if (FG0HM001.FG0HMERG != FG0HW00.FG0HWEYM)
      set FG0HM001.FG0HMERG cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S11";
    end
    ;
    FG0HW00.FG0HWWBD = FFWREC.FFABEGMO;
    if (FG0HM001.FG0HMBRG != FG0HW00.FG0HWBYM)
      set FG0HM001.FG0HMBRG cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S11";
    end
  end
  ;
  ;
end // end FG0HS11

// replicate high level wrk sht
Function FG0HS15()
   /* ------------------------------------------------------------*/
   /* replicate higher level work sheets using xsffs60*/
   /* ------------------------------------------------------------*/
  ;
  set FFVREC empty;
  ;
  FFVREC.FFVLEVEL = 3;
  FFVREC.FFEWSNBR = FFWREC.FFEWSNBR; /* old wrk sheet nbr*/
  FFVREC.FF1WSNBR = FF1REC.FF1WSNBR; /* new wrk sheet nbr*/
  FFVREC.XPLCD = FFWREC.XPLCD; /* product line code*/
  FFVREC.YPGCD = FFWREC.YPGCD; /* product type group*/
  FFVREC.XXXUSRID = COMMAREA.CAUSERID; /* user id*/
  FFVREC.ZZZSDT = XX0XW01.XX0XWDAT; /* current date*/
  FFVREC.ZZZSTM = XX0XW01.XX0XWTIM; /* current time*/
  TA1REC.TA1PGMNM = "FG0HS15";
  ;
  XSFFS60();
  ;
  ;
end // end FG0HS15

// update dfcast.vwdgrp01 row
Function FG0HS16()
   /* ------------------------------------------------------------*/
   /* update dfcast.vwdgrp01*/
   /* ------------------------------------------------------------*/
  ;
  FFEREC.XXXUSRID = COMMAREA.CAUSERID; /* user id*/
  FFEREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFEREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  try
    call "IO3850" ("U ", SQLCA, FFEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      FG0HW00.FG0HWSWR = "Y"; /* Request for data switch*/
      ;
      FFWREC.XXXMODID = "S16"; /* Module identification*/
      FFWREC.XXXMSGNO = 20; /* Indicate updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  FFWREC.XXXMODID = "S16"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE DFCAST.VWDGRP01 TABLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWDGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFEREC.FFEKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0HS16

// update dfcast.vwline01 row
Function FG0HS17()
   /* ------------------------------------------------------------*/
   /* upd dfcast.vwline01 table row*/
   /* ------------------------------------------------------------*/
  ;
  FG0HW00.FG0HWNM1 = FG0HW03.FG0HWUQT - FFIREC.FF6SLFCT;
  FFGREC.FF6SLFCT = FFGREC.FF6SLFCT + FG0HW00.FG0HWNM1;
  FFGREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFGREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3890" ("U ", SQLCA, FFGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    ;
    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      ;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      ;
      FG0HW00.FG0HWSWR = "Y"; /* Request for data switch*/
      ;
      FFWREC.XXXMODID = "S17"; /* Module identification*/
      FFWREC.XXXMSGNO = 20; /* Indicate updated by another*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S17"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DFCAST.VWLINE01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFGREC.FFGKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0HS17

// update dfcast.vwltyp01 row
Function FG0HS18()
   /* ------------------------------------------------------------*/
   /* upd dfcast.vwltyp01 table row*/
   /* ------------------------------------------------------------*/
  ;
  FFIREC.FFEFCTGT = FG0HW01.FG0HWUTT;
  FFIREC.FF6SLFCT = FG0HW03.FG0HWUQT;
  FFIREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFIREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3910" ("U ", SQLCA, FFIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S18"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DFCAST.VWLTYP01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFIREC.FFIKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0HS18

// add dfcast.vwcat001 row
Function FG0HS19()
   /* ------------------------------------------------------------*/
   /* add dfcast.vwcat001 table row*/
   /* ------------------------------------------------------------*/
  set FFJREC empty;
  ;
  FFJREC.FFEWSNBR = FFWREC.FFEWSNBR;
  FFJREC.YPGCD = FFWREC.YPGCD;
  FFJREC.XPCCD = FG0HW02.XPCCD[FG0HWIDX];
  FFJREC.FF6SLFCT = FG0HW02.FG0HWUQT[FG0HWIDX];
  FFJREC.FFEFCTGT = FG0HW02.FG0HWUQT[FG0HWIDX];
  FFJREC.FFGYRIND = FG0HW01.FG0HWYOP;
  FFJREC.FFGSDIND = FG0HW01.FG0HWHOP;
  FFJREC.FFECLRFL = "N";
  FFJREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFJREC.ZZZSTM = XX0XW01.XX0XWTIM;
  FFJREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFJREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  try
    call "IO3840" ("A ", SQLCA, FFJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S19"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VWCAT001 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFJREC.FFJKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0HS19

// purge excess work sheets
Function FG0HS20()
   /* ------------------------------------------------------------*/
   /* purge excess forecast work sheets using routine xsffs60*/
   /* ------------------------------------------------------------*/
  ;
  FFEREC.YSMXDV = FFWREC.YSMXDV; /* division code*/
  FFEREC.XCTCD = "USA"; /* country code*/
  FFEREC.FFABEGMO = FFWREC.FFABEGMO; /* begin range*/
  FFEREC.FFAENDMO = FFWREC.FFAENDMO; /* end   range*/
  TA1REC.TA1PGMNM = "FG0HS20"; /* process name*/
  ;
   /* ------------------------------------------------------------*/
   /* purge !!!!!*/
   /* ------------------------------------------------------------*/
  ;
  XSFFS61();
  ;
  ;
end // end FG0HS20

// select dfcast.vwdgrp01 row
Function FG0HS21()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vwdgrp01 table row*/
   /* ------------------------------------------------------------*/
  ;
  set FFEREC empty; /* Clear row storage area*/
  ;
  FFEREC.FFEWSNBR = FFWREC.FFEWSNBR;
  ;
  try
    call "IO3850" ("S ", SQLCA, FFEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S21"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWDGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFEREC.FFEKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0HS21

// select dfcast.vwline01 row
Function FG0HS22()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vwline01 table row*/
   /* ------------------------------------------------------------*/
  ;
  set FFGREC empty; /* Clear row storage area*/
  ;
  FFGREC.FFEWSNBR = FFWREC.FFEWSNBR; /* wrk sheet nbr*/
  FFGREC.XPLCD = FFWREC.XPLCD; /* product line code*/
  ;
  try
    call "IO3890" ("S ", SQLCA, FFGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S22"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VWLINE01 TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFGREC.FFGKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end FG0HS22

// select dfcast.vwltyp01 row
Function FG0HS23()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vwltyp01 table.*/
   /* ------------------------------------------------------------*/
  ;
  set FFIREC empty; /* Clear row storage area*/
  ;
  FFIREC.FFEWSNBR = FFWREC.FFEWSNBR;
  FFIREC.XPLCD = FFWREC.XPLCD;
  FFIREC.YPGCD = FFWREC.YPGCD;
  ;
   /* ------------------------------------------------------------*/
   /* select dfcast.vwltyp01*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO3910" ("S ", SQLCA, FFIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
      ;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FFWREC.XXXMODID = "S23"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VWLTYP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFIREC.FFIKEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FG0HS23

// Validate year/history option
Function FG0HS30()
   /* ------------------------------------------------------------*/
   /* validate year/history option field*/
   /* ------------------------------------------------------------*/
  ;
  if (FG0HM001.FG0HMHOP != FG0HW01.FG0HWHOP
   || FG0HM001.FG0HMYOP != FG0HW01.FG0HWYOP)
    ;
    if (FG0HM001.FG0HMHOP != FG0HW01.FG0HWHOP)
      if (FG0HM001.FG0HMHOP != "S"
       && FG0HM001.FG0HMHOP != "D")
        converseLib.validationFailed(10);
        FFWREC.XXXMODID = "S30";
        set FG0HM001.FG0HMHOP cursor, bold;
      end
    end
    ;
    if (FG0HM001.FG0HMYOP != FG0HW01.FG0HWYOP)
      if (FG0HM001.FG0HMYOP != 1
       && FG0HM001.FG0HMYOP != 2
       && FG0HM001.FG0HMYOP != 3)
        converseLib.validationFailed(10);
        FFWREC.XXXMODID = "S30";
        set FG0HM001.FG0HMYOP cursor, bold;
      end
    end
    ;
    FG0HS11(); /* check modifiable fields*/
    ;
  end
  ;
end // end FG0HS30

//*** RECORD=FG0HW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// 
// ML Dangelo- added thousands work field FG0HWTH1.  Increased
// size of FG0HWNM1 - 4.   FF1028, FF1029
// ***********************
Record FG0HW00 type basicRecord
  10 FG0HWDCF FG0HWDCF ; 
  10 FG0HWDMF FG0HWDMF ; 
  10 FG0HWCFL FG0HWCFL ; 
  10 FG0HWFCF FG0HWFCF ; 
  10 FG0HWERF FG0HWERF ; 
  10 FG0HWCPF FG0HWCPF ; 
  10 FG0HWQTF FG0HWQTF ; 
  10 FG0HWREP FG0HWREP ; 
  10 FG0HWSWR FG0HWSWR ; 
  10 FG0HWSWF FG0HWSWF ; 
  10 FG0HWSWD FG0HWSWD ; 
  10 FG0HWMOD FG0HWMOD ; 
  10 FG0HWSLC FG0HWSLC ; 
  10 FG0HWSLF FG0HWSLF ; 
  10 FG0HWYDS FG0HWYDS [3] ; 
  10 FG0HWHDS FG0HWHDS [2] ; 
  10 FG0HWNM1 FG0HWNM1 ; 
  10 FG0HWNM2 FG0HWNM2 ; 
  10 FG0HWNM3 FG0HWNM3 ; 
  10 FG0HWNM4 FG0HWNM4 ; 
  10 FG0HWTH1 FG0HWTH1 ; 
  10 FG0HWPC1 FG0HWPC1 ; 
  10 FG0HWSUT FG0HWSUT ; 
  10 FG0HWSTG FG0HWSTG ; 
  10 FG0HWSHS FG0HWSHS ; 
  10 FG0HWSHD FG0HWSHD ; 
  10 FG0HWUHS FG0HWUHS ; 
  10 FG0HWHST FG0HWHST ; 
  10 FG0HWUHD FG0HWUHD ; 
  10 FG0HWHDT FG0HWHDT ; 
  10 FG0HWIDX FG0HWIDX ; 
  10 FG0HWPIX FG0HWPIX ; 
  10 FG0HWYIX FG0HWYIX ; 
  10 FG0HW-CCYYMMDD FG0HW-CCYYMMDD ; 
    15 * num(1) ; 
    15 FG0HW-CCYYMM FG0HW-CCYYMM ; 
      20 FG0HW-CCYY FG0HW-CCYY ; 
      20 FG0HW-MM FG0HW-MM ; 
    15 FG0HW-DD FG0HW-DD ; 
  10 FG0HWWDT FG0HWWDT ; 
    15 * num(3) ; 
    15 FG0HWWCD FG0HWWCD ; 
      20 FG0HWWCC FG0HWWCC ; 
      20 FG0HWWYM FG0HWWYM ; 
        25 FG0HWWYY FG0HWWYY ; 
        25 FG0HWWMM FG0HWWMM ; 
  10 FG0HWWBD FG0HWWBD ; 
    15 * num(3) ; 
    15 FG0HWBCC FG0HWBCC ; 
    15 FG0HWBYM FG0HWBYM ; 
      20 FG0HWBYY FG0HWBYY ; 
      20 FG0HWBMM FG0HWBMM ; 
  10 FG0HWWED FG0HWWED ; 
    15 * num(3) ; 
    15 FG0HWECC FG0HWECC ; 
    15 FG0HWEYM FG0HWEYM ; 
      20 FG0HWEYY FG0HWEYY ; 
      20 FG0HWEMM FG0HWEMM ; 
  10 FG0HW-CURR-MO FG0HW-CURR-MO ; 
  10 FG0HW-CURR-MO-MINUS1 FG0HW-CURR-MO-MINUS1 ; 
  10 FG0HW-CURR-MO-MINUS2 FG0HW-CURR-MO-MINUS2 ; 
  10 FG0HW-CURR-MO-MINUS3 FG0HW-CURR-MO-MINUS3 ; 
  10 FG0HW-CURR-MO-MINUS4 FG0HW-CURR-MO-MINUS4 ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 FG0HWSTP FG0HWSTP ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FG0HW-HOLD-BEG-MO FG0HW-HOLD-BEG-MO ; 
  10 FG0HW-HOLD-END-MO FG0HW-HOLD-END-MO ; 
end // end FG0HW00

//*** RECORD=FG0HW01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// 
// 10/4/90  ML D'Angelo - added FG0HWHPS array to hold the
// history percents displayed on the screen so that we can
// determine if they have been changed or not.  FF1029
// ***********************
Record FG0HW01 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 FG0HWSTT FG0HWSTT ; 
  10 FG0HWUTT FG0HWUTT ; 
  10 FG0HWTGT FG0HWTGT ; 
  10 FG0HWYOP FG0HWYOP ; 
  10 FG0HWHOP FG0HWHOP ; 
  10 FG0HWUVQ FG0HWUVQ ; 
  10 FG0HWVQT FG0HWVQT ; 
  10 FG0HWVPT FG0HWVPT ; 
  10 FG0HWCDT FG0HWCDT ; 
    15 FG0HWMON FG0HWMON ; 
    15 FG0HWDAY FG0HWDAY ; 
    15 FG0HWYER FG0HWYER ; 
  10 FG0HWPBD FG0HWPBD [3] ; 
    15 * char(5) ; 
    15 FG0HWPBR FG0HWPBR ; 
  10 FG0HWPED FG0HWPED [3] ; 
    15 * char(5) ; 
    15 FG0HWPER FG0HWPER ; 
  10 FG0HWHPS FG0HWHPS [12] ; 
end // end FG0HW01

//*** RECORD=FG0HW02 ****
// -------------------------
// map 001 temporary storage
// -------------------------
// ***********************
Record FG0HW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(1506) ; 
    10 FG0HWNLD FG0HWNLD ; 
    10 FG0HWTIX FG0HWTIX ; 
    10 XPCCD XPCCD [12] ; 
    10 XPCSDESC XPCSDESC [12] ; 
    10 FG0HWUCM FG0HWUCM [12] ; 
    10 FG0HWCMQ FG0HWCMQ [12] ; 
    10 FG0HWSQT FG0HWSQT [12] ; 
    10 FG0HWUQT FG0HWUQT [12] ; 
    10 FG0HWQTY FG0HWQTY [12] ; 
    10 FG0HWSPC FG0HWSPC [12] ; 
    10 FG0HWCPC FG0HWCPC [12] ; 
    10 FFCDMIND FFCDMIND [12] ; 
    10 FG0HWWKE FG0HWWKE [12] ; 
    10 FG0HWQUP FG0HWQUP [12] ; 
    10 FG0HWUH1 FG0HWUH1 [12] ; 
    10 FG0HWHQ1 FG0HWHQ1 [12] ; 
    10 FG0HWHP1 FG0HWHP1 [12] ; 
    10 FG0HWUH2 FG0HWUH2 [12] ; 
    10 FG0HWHQ2 FG0HWHQ2 [12] ; 
    10 FG0HWHP2 FG0HWHP2 [12] ; 
    10 FG0HWUH3 FG0HWUH3 [12] ; 
    10 FG0HWHQ3 FG0HWHQ3 [12] ; 
    10 FG0HWHP3 FG0HWHP3 [12] ; 
    10 FG0HWUD1 FG0HWUD1 [12] ; 
    10 FG0HWDQ1 FG0HWDQ1 [12] ; 
    10 FG0HWDP1 FG0HWDP1 [12] ; 
    10 FG0HWUD2 FG0HWUD2 [12] ; 
    10 FG0HWDQ2 FG0HWDQ2 [12] ; 
    10 FG0HWDP2 FG0HWDP2 [12] ; 
    10 FG0HWUD3 FG0HWUD3 [12] ; 
    10 FG0HWDQ3 FG0HWDQ3 [12] ; 
    10 FG0HWDP3 FG0HWDP3 [12] ; 
end // end FG0HW02

//*** RECORD=FG0HW03 ****
// ------------------------------
// map 001 totals display storage
// ------------------------------
// ***********************
Record FG0HW03 type basicRecord
  5 FG0HWGP3 FG0HWGP3 ; 
    10 FG0HWUCM FG0HWUCM ; 
    10 FG0HWCMQ FG0HWCMQ ; 
    10 FG0HWUQT FG0HWUQT ; 
    10 FG0HWQTY FG0HWQTY ; 
    10 FG0HWCPC FG0HWCPC ; 
    10 FG0HWUHS FG0HWUHS [3] ; 
    10 FG0HWHSQ FG0HWHSQ [3] ; 
    10 FG0HWHSP FG0HWHSP [3] ; 
    10 FG0HWUHD FG0HWUHD [3] ; 
    10 FG0HWHDQ FG0HWHDQ [3] ; 
    10 FG0HWHDP FG0HWHDP [3] ; 
end // end FG0HW03

//*** RECORD=FG0HW04 ****
// -----------------------------
// map 002 display storage area
// -----------------------------
// ***********************
Record FG0HW04 type basicRecord
  5 FG0HWGP5 FG0HWGP5 ; 
    10 FG0HWSWF FG0HWSWF ; 
    10 FG0HWYO1 FG0HWYO1 ; 
    10 FG0HWHO1 FG0HWHO1 ; 
end // end FG0HW04

// current work ccyy
DataItem FG0HW-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work ccyymm
DataItem FG0HW-CCYYMM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current work date
DataItem FG0HW-CCYYMMDD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date
DataItem FG0HW-CURR-MO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date -1 month
DataItem FG0HW-CURR-MO-MINUS1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date -2 months
DataItem FG0HW-CURR-MO-MINUS2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date -3 months
DataItem FG0HW-CURR-MO-MINUS3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date -4 months
DataItem FG0HW-CURR-MO-MINUS4 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current work dd
DataItem FG0HW-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work begin date
DataItem FG0HW-HOLD-BEG-MO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work end date
DataItem FG0HW-HOLD-END-MO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current work mm
DataItem FG0HW-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin century
DataItem FG0HWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range month
DataItem FG0HWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year and month
DataItem FG0HWBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range year
DataItem FG0HWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work sheet create date
DataItem FG0HWCDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cat data found flag
DataItem FG0HWCFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current sales mstr qty 1000
DataItem FG0HWCMQ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// category percent field
DataItem FG0HWCPC bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cat percent flag
DataItem FG0HWCPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// create day
DataItem FG0HWDAY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// data change flag
DataItem FG0HWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data modified flag
DataItem FG0HWDMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history demand percent yr1
DataItem FG0HWDP1 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history demand percent yr2
DataItem FG0HWDP2 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history demand percent yr3
DataItem FG0HWDP3 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history demand thousand yr1
DataItem FG0HWDQ1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history demand thousand yr2
DataItem FG0HWDQ2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history demand thousand yr3
DataItem FG0HWDQ3 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end century
DataItem FG0HWECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range month
DataItem FG0HWEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error flag
DataItem FG0HWERF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end year and month
DataItem FG0HWEYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range year
DataItem FG0HWEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// forecast found flag
DataItem FG0HWFCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fg0hw03 group level
DataItem FG0HWGP3 char(100)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fg0hw05 group level
DataItem FG0HWGP5 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// historical demand percent
DataItem FG0HWHDP bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical demand qty thousand
DataItem FG0HWHDQ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// historical description
DataItem FG0HWHDS char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history demand thousands
DataItem FG0HWHDT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history option sales/demand
DataItem FG0HWHO1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history option sales/demand
DataItem FG0HWHOP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history sales percent yr1
DataItem FG0HWHP1 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales percent yr2
DataItem FG0HWHP2 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales percent yr3
DataItem FG0HWHP3 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold history percents array
DataItem FG0HWHPS bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// history sales qty thousand yr1
DataItem FG0HWHQ1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history sales qty thousand yr2
DataItem FG0HWHQ2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history sales qty thousand yr3
DataItem FG0HWHQ3 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// historical sales percent
DataItem FG0HWHSP bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical sales qty thousand
DataItem FG0HWHSQ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history sales thousands
DataItem FG0HWHST char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index
DataItem FG0HWIDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage update switch
DataItem FG0HWMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// create month
DataItem FG0HWMON num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of lines per page
DataItem FG0HWNLD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 1
DataItem FG0HWNM1 bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 2
DataItem FG0HWNM2 bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 3
DataItem FG0HWNM3 bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 4
DataItem FG0HWNM4 bigint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prior begin date
DataItem FG0HWPBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// prior begin yymm
DataItem FG0HWPBR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// percent work field 1
DataItem FG0HWPC1 bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prior end date
DataItem FG0HWPED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// prior end yymm
DataItem FG0HWPER char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// process index
DataItem FG0HWPIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// qty flag
DataItem FG0HWQTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current sales qty 100
DataItem FG0HWQTY char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// qty updated flag
DataItem FG0HWQUP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// replicate flag
DataItem FG0HWREP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save hist demand qty units
DataItem FG0HWSHD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save history sales units
DataItem FG0HWSHS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 's'election count field
DataItem FG0HWSLC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 's'election flag
DataItem FG0HWSLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save category percent field
DataItem FG0HWSPC bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save cur sales total units
DataItem FG0HWSQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save char target
DataItem FG0HWSTG char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save current temp storage page
DataItem FG0HWSTP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// save type grp target units
DataItem FG0HWSTT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save unit target
DataItem FG0HWSUT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display map switch
DataItem FG0HWSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FG0HWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FG0HWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// type grp target thousands
DataItem FG0HWTGT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work field thousands
DataItem FG0HWTH1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total line index
DataItem FG0HWTIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current sale mstr qty unit
DataItem FG0HWUCM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history demand units yr1
DataItem FG0HWUD1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history demand units yr2
DataItem FG0HWUD2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history demand units yr3
DataItem FG0HWUD3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales qty units yr1
DataItem FG0HWUH1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales qty units yr2
DataItem FG0HWUH2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales qty units yr3
DataItem FG0HWUH3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hist demand qty total units
DataItem FG0HWUHD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales units
DataItem FG0HWUHS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cur sales qty total units
DataItem FG0HWUQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// type grp target units
DataItem FG0HWUTT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// variance qty units
DataItem FG0HWUVQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// variance percent
DataItem FG0HWVPT bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// variance qty thousands
DataItem FG0HWVQT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work begin date
DataItem FG0HWWBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work century
DataItem FG0HWWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work current ccyymm
DataItem FG0HWWCD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date
DataItem FG0HWWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work begin date
DataItem FG0HWWED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// worksheet exist flag
DataItem FG0HWWKE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work month
DataItem FG0HWWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year and month
DataItem FG0HWWYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FG0HWWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year(s)  option description
DataItem FG0HWYDS char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// create year
DataItem FG0HWYER num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year index
DataItem FG0HWYIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year option
DataItem FG0HWYO1 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year option
DataItem FG0HWYOP num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

