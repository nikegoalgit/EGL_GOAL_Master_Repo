package fg0j;

import corpcom1.CACHGFL;
import corpcom2.XPCREC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPFF001;
import corpcom3.XPXPC01;
import corpcom3.XPXX001;
import corpcom3.XPYPG01;
import corpcom4.XSFFS01;
import corpcom4.XSFFS10;
import corpcom4.XSFFS11;
import corpcom4.XSFFS22;
import corpcom4.XSFFS35;
import corpcom4.XSFFS53;
import corpcom4.XSFFS54;
import corpcom4.XSFFS56;
import corpcom4.XSFFS58;
import corpcom4.XSFFS61;
import corpcom4.XSFFS65;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XDMCD;
import corpx1.XPCTBL;
import corpy2.YPGTBL;
import corpz3.ZZZCHGCT;
import ff.common.*;
import fh.common.FH1REC;
import fh.common.FH2REC;
import fh.common.FH5REC;
import pg.common.PG2REC;
import pg.common.PG4REC;
import pg.common.PG7MAXPR;
import pg.common.PG7REC;
import sy.common.SY1STNBR;
import sy.common.SY2CLRID;
import sy.common.SYBSTGNB;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TA6REC;
import ta.common.TAEREC;
//*** PROGRAM=FG0J ****
// This application allows a user to create or inquire on a
// long range sales forecast by product style/color.  If this
// application is invoked from a menu, the user may only create
// a new forecast.  If this application is invoked by selecting
// from a list of existing forecasts, the user may inquire on
// the existing forecast and modify it to create a new forecast
// 
// There are two different screens that may be displayed.
// 
// The first screen displayed to the user shows the forecast
// identification and each product style/color in the forecast
// along with the current forecast quantities compared to
// either the historical sales quantities or the historical
// demand quantities for the product style/color.  The user
// specifies whether the comparison is to be against sales or
// demand and the number of years to be used for the comparison
// The current forecast quantities may be adjusted by the user
// either by quantity of by percentage.  The user may scroll
// forward or backward to view all the product style/colors in
// the forecast.  The forecast may be saved for later viewing
// by pressing the appropriate attention key.
// 
// The second screen is displayed when the appropriate
// attention key is pressed on the first screen.  It shows the
// forecast identification and each product style/color for
// each product style grp in the product cat associated with th
// forecast, along with historical sales quantities compared
// to the historical demand quantities.  The user may scroll
// forward and backward to view all the product style/colors.
// The user may request that the historical information be
// printed by pressing the appropriate attention key.  The
// first screen will be displayed with the historical
// quantities when the user selects a product style group.
// The user may, also, request the first screen be displayed
// by pressing the appropriate attention key.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from either of the screens.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          12/05/89  rgilli  New application.
// FF#22    05/31/90  JJUCH   Fixed -803 problem which occured
//                            when there are style colors and
//                            and style developments within
//                            the same style group.
//          06/22/90  JJUCH   Fixed the problem of missing
//                            history demand quantities.
// FF1017   07/11/90  JJUCH   Added PF19 key.
// FF1003   07/13/90  JJUCH   Allowed to re-explode.
// Fix      07/18/90  JJUCH   Kept the wrksht no when fastpath
// FF1016   07/31/90  JJUCH   Disallowed to fcst current main
//                            buy month and all prior months.
// FF#134   08/21/90  SFORD   Set job completed msg = 'y'
// TA0829   08/30/90  JJUCH   Fixed -911 clear FFWREC problem.
// Fix      10/09/90  JJUCH   Changed selection criteria for
//                            history to match L.R. report.
//                            Added the ability to inquire
//                            style development history.
// Fix      11/02/90 JJUCH    Added color id and dim code into
//                            maps.
// Fix      11/06/90 JJUCH    Excluded the style development
//                            which has 'N' as fcst rept flag.
// Fix      11/08/90 JJUCH    Fixed the problem of PF14 on the
//                            second map.
// Fix      12/21/90 JJUCH    Correct the style dev flag value
//                            in wsty001 and wsmth01 tables.
// FF1071   02/25/91 JJUCH    Modified the calculation for DMD.
// Fix      03/01/91 JJUCH    Fixed the bug of calculating SLS
//                            fcst.
// Fix      03/28/91 JJUCH    Stop reporting the sales qty in
//                            the actual closeout month.
// Ff1095   09/27/91 MDANGE   Change call to style development
//                            to use type group code.
// FF#301   05/15/92 JJUCH    Remove proj clsout restriction.
// FF382    03/03/93 JJUCH    Change to accomodate VWDGRP01
//                            table change. (add user id)
// FF394    03/23/93 JJUCH    Change to send report to BUNDLE.
// FF399    04/26/93 JJUCH    Correct the problem of calculat-
//                            ing fcst dmd in current month.
//                            need to use contmp month.
//          09/01/93 JJUCH    Convert to CSP version 4.1.
// FH140    02/10/94 JJUCH    Change to get actual prop and
//                            authorized future seperately and
//                            add them together to get hist dmd
// FF409    05/16/94 MWALKE   - Switch displaying sales by bus
//                              month to sales by need month.
//                            - Delete print option.
// FF175    12/05/96 DSMITH   Changed date range fill character
//                            to '0' and SG0J-2112 to increment
//                            century if year = '00'.
// *********************
Program FG0J type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FF1REC FF1REC; // record
  FF2REC FF2REC; // record
  FF3REC FF3REC; // record
  FF7REC FF7REC; // record
  FF9REC FF9REC; // record
  FFCREC FFCREC; // record
  FFDREC FFDREC; // record
  FFEREC FFEREC; // record
  FFFREC FFFREC; // record
  FFGREC FFGREC; // record
  FFIREC FFIREC; // record
  FFJREC FFJREC; // record
  FFKREC FFKREC; // record
  FFLREC FFLREC; // record
  FFMREC FFMREC; // record
  FFNREC FFNREC; // record
  FFVREC FFVREC; // record
  FFWREC FFWREC; // record
  FFXREC FFXREC; // record
  FFYREC FFYREC; // record
  FFZREC FFZREC; // record
  FG0JW00 FG0JW00; // record
  FG0JW01 FG0JW01; // record
  FG0JW02 FG0JW02; // record
  FG0JW03 FG0JW03; // record
  FG0JW04 FG0JW04; // record
  FG0JW05 FG0JW05; // record
  FG0JW06 FG0JW06; // record
  FG0JW07 FG0JW07; // record
  FH1REC FH1REC; // record
  FH2REC FH2REC; // record
  FH5REC FH5REC; // record
  PG2REC PG2REC; // record
  PG4REC PG4REC; // record
  PG7REC PG7REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPCTBL; // table
  use YPGTBL; // table
  use FG0JM.FG0JM001,  // forms
      FG0JM.FG0JM002, 
      FG0JM.FG0JM003,
      FG0JM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFF001: XPFF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set FFFREC empty; /* Special function parameters*/
    set FG0JM001 initial; /* M001 input/output*/
    set FG0JM002 initial; /* M002 input/output*/
    set FG0JW00 empty; /* Working storage*/
    set FG0JW01 empty; /* M001 header display storage*/
    set FG0JW02 empty; /* M001 temporary storage*/
    set FG0JW03 empty; /* history temporary storage*/
    set FG0JW04 empty; /* M002 header display storage*/
    set FG0JW05 empty; /* M002 display record formats*/
    set FG0JW06 empty; /* M002 temporary storage*/
    set FG0JW07 empty; /* m001 & m002 display total storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine work area*/
    set TA5REC empty; /* temporary storage area*/
    set TA6REC empty; /* jcl submit work area*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    FG0JW00.FG0JWTL1 = 326; /* temp storage length current m001*/
    FG0JW00.FG0JWTL2 = 1056; /* temp storage length history m001*/
    FG0JW00.FG0JWTL3 = 3422; /* temp storage length m002*/

    XPCREC.XGPCD = COMMAREA.XGPCD; /* init xpcrec xgpcd*/

    FG0JW00.FG0JWSWR = "N"; /* Request for data switch*/
    FG0JW00.FG0JWSWF = "Y"; /* format screen data switch*/
    FG0JW00.FG0JWKYC = "Y"; /* change in key values*/
    FG0JW00.FG0JWSWD = "1"; /* map switch*/

    FG0JW01.FG0JWYOP = 1; /* default value year option*/
    FG0JW01.FG0JWHOP = "S"; /* default value history option*/

    FG0JW00.FG0JWYDS[1] = "1 YEAR AGO"; /* year 1 desc*/
    FG0JW00.FG0JWYDS[2] = "2 YEAR AGO"; /* year 2 desc*/
    FG0JW00.FG0JWYDS[3] = "3 YEAR AGO"; /* year 3 desc*/

    FG0JW00.FG0JWHDS[1] = "HIST NEED MO SALES";
    FG0JW00.FG0JWHDS[2] = "HISTORICAL DEMAND ";

     /* ---------------------------------------------------*/
     /* Clear unused fields*/
     /* ---------------------------------------------------*/

    FFWREC.SY1STNBR = " "; /* Clear style number*/
    FFWREC.SY2CLRID = " "; /* Clear color id*/
    FFWREC.XDMCD = " "; /* Clear dimension code*/
    FFWREC.SY1SSTNM = " "; /* Clear short style name*/
    FFWREC.SY2CLRAB = " "; /* Clear color abrv*/
    FFWREC.XDMABRV = " "; /* Clear dimension abrv*/
    FFWREC.ZRGCD = " "; /* Clear region code*/
    FFWREC.ZRGABRV = " "; /* Clear region abrv*/
    FFWREC.XCTCD = " "; /* Clear country code*/
    FFWREC.XCTABRV = " "; /* Clear country abrv*/

     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/

    if (FFWREC.YPGCD == " ")
      FFWREC.YPGCD = "01";
      if (FFWREC.YPGCD in YPGTBL.YPGCD)
        FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
      end
    end

    if (FFWREC.FFABEGMO != 0
     && FFWREC.FFAENDMO != 0
     && FFWREC.XPCCD != " "
     && FFWREC.SYBSTGNB != 0)
      FG0JW00.FG0JWSWR = "Y"; /* set data request flag*/
    end

    if (FFWREC.FFEWSNBR != 0)
      FG0JW00.FG0JWSWR = "Y"; /* set data request flag*/
      FG0JW00.FG0JWFCF = "Y"; /* forecast exists flag*/
    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FG0J001; /* Converse the main process*/


    FG0J001: FG0J001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto FG0J001; /* Converse the main process*/

  end // end main
end // end FG0J

// Select dfcast.vwdgrp01 row
Function FG0J-1111()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vwdgrp01 table row*/
   /* ------------------------------------------------------------*/

  set FFEREC empty; /* Clear row storage area*/

  FFEREC.FFEWSNBR = FFWREC.FFEWSNBR;

  try
    call "IO3850" ("S ", SQLCA, FFEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "111"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWDGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFEREC.FFEKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0J-1111

// Select dfcast.vwline01 row
Function FG0J-1112()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vwline01 table row*/
   /* ------------------------------------------------------------*/

  set FFGREC empty; /* Clear row storage area*/

  FFGREC.FFEWSNBR = FFWREC.FFEWSNBR; /* wrk sheet nbr*/
  FFGREC.XPLCD = FFWREC.XPLCD; /* product line code*/

  try
    call "IO3890" ("S ", SQLCA, FFGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VWLINE01 TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFGREC.FFGKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0J-1112

// Select dfcast.vwltyp01 row
Function FG0J-1113()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vwltyp01 table.*/
   /* ------------------------------------------------------------*/

  set FFIREC empty; /* Clear row storage area*/

  FFIREC.FFEWSNBR = FFWREC.FFEWSNBR;
  FFIREC.XPLCD = FFWREC.XPLCD;
  FFIREC.YPGCD = FFWREC.YPGCD;

   /* ------------------------------------------------------------*/
   /* Select dfcast.vwltyp01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3910" ("S ", SQLCA, FFIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "113"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VWLTYP01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFIREC.FFIKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0J-1113

// Select dfcast.vwcat001 row
Function FG0J-1114()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vwcat001 table.*/
   /* ------------------------------------------------------------*/

  set FFJREC empty; /* Clear row storage area*/

  FFJREC.FFEWSNBR = FFWREC.FFEWSNBR;
  FFJREC.YPGCD = FFWREC.YPGCD;
  FFJREC.XPCCD = FFWREC.XPCCD;

   /* ------------------------------------------------------------*/
   /* Select dfcast.vwcat001*/
   /* ------------------------------------------------------------*/

  try
    call "IO3840" ("S ", SQLCA, FFJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "114"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VWCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFJREC.FFJKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0J-1114

// Select dfcast.vwsgrp01 row
Function FG0J-1115()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vwsgrp01 table row*/
   /* ------------------------------------------------------------*/

  FFLREC.FFEWSNBR = FFWREC.FFEWSNBR;
  FFLREC.YPGCD = FFWREC.YPGCD;
  FFLREC.SYBSTGNB = FFWREC.SYBSTGNB;

  try
    call "IO3880" ("S ", SQLCA, FFLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end

  end
   /* ------------------------------------------------------------*/
   /* Indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "115"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SEL DFCAST.VWSGRP01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFLREC.FFLKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0J-1115

// Get dates from dfcast.vffctl01
Function FG0J-2111()
   /* ------------------------------------------------------------*/
   /* Obtain invoice cutoff and futures cutoff date from*/
   /* dfcast.vffctl01.*/
   /* ------------------------------------------------------------*/

  set FF1REC empty; /* Clear row storage area*/

  FF1REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FF1REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3660" ("S ", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* Indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "211"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VFFCTL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF1REC.FF1GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0J-2111

// Calc program dates
Function FG0J-2112()
   /* ------------------------------------------------------------*/
   /* Calculate:*/
   /* - current date*/
   /* - current date minus one month*/
   /* - current date minus two months*/
   /* - current date minus three months*/
   /* - current date minus four months*/
   /* - main buy month*/
   /* ------------------------------------------------------------*/

  if (FF1REC.FF1IVCDT != 0) /* invoice cutoff date*/
    FG0JW04.FG0JW-WORK-DT = FF1REC.FF1IVCDT;

    if (XX0XW01.XX0XWDAT > FF1REC.FF1IVCDT) /* curr mo > inv cutoff mo*/
      FG0JW04.FG0JW-CURR-MO = FG0JW04.FG0JW-WORK-CCYYMM;
    else

      if (FG0JW04.FG0JW-WORK-MM == 1)
        FG0JW04.FG0JW-WORK-MM = 12;
        FG0JW04.FG0JW-WORK-CCYY = FG0JW04.FG0JW-WORK-CCYY - 1;
        FG0JW04.FG0JW-CURR-MO = FG0JW04.FG0JW-WORK-CCYYMM;
      else

        FG0JW04.FG0JW-WORK-MM = FG0JW04.FG0JW-WORK-MM - 1;
        FG0JW04.FG0JW-CURR-MO = FG0JW04.FG0JW-WORK-CCYYMM;
      end
    end
  else
    FG0JW04.FG0JW-CURR-MO = 0;
  end

   /* ------------------------------------------------------------*/
   /* Calculate current month minus 1 month*/
   /* Calculate current month minus 2 months*/
   /* Calculate current month minus 3 months*/
   /* Calculate current month minus 4 months*/
   /* ------------------------------------------------------------*/

  FG0JW00.FG0JWWDT = FG0JW04.FG0JW-CURR-MO;

  if (FG0JW00.FG0JWWMM == 01)
    FG0JW00.FG0JWWMM = 12;
    if (FG0JW00.FG0JWWYY == 00)
      FG0JW00.FG0JWWCC = FG0JW00.FG0JWWCC - 1;
      FG0JW00.FG0JWWYY = 99;
    else
      FG0JW00.FG0JWWYY = FG0JW00.FG0JWWYY - 1;
    end
  else
    FG0JW00.FG0JWWMM = FG0JW00.FG0JWWMM - 1;
  end

  FG0JW04.FG0JW-CURR-MO-MINUS1 = FG0JW00.FG0JWWDT;


  if (FG0JW00.FG0JWWMM == 1)
    FG0JW00.FG0JWWMM = 12;
    if (FG0JW00.FG0JWWYY == 00)
      FG0JW00.FG0JWWYY = 99;
      FG0JW00.FG0JWWCC = FG0JW00.FG0JWWCC - 1;
    else
      FG0JW00.FG0JWWYY = FG0JW00.FG0JWWYY - 1;
    end
  else
    FG0JW00.FG0JWWMM = FG0JW00.FG0JWWMM - 1;
  end

  FG0JW04.FG0JW-CURR-MO-MINUS2 = FG0JW00.FG0JWWDT;


  if (FG0JW00.FG0JWWMM == 1)
    FG0JW00.FG0JWWMM = 12;
    if (FG0JW00.FG0JWWYY == 00)
      FG0JW00.FG0JWWYY = 99;
      FG0JW00.FG0JWWCC = FG0JW00.FG0JWWCC - 1;
    else
      FG0JW00.FG0JWWYY = FG0JW00.FG0JWWYY - 1;
    end
  else
    FG0JW00.FG0JWWMM = FG0JW00.FG0JWWMM - 1;
  end

  FG0JW04.FG0JW-CURR-MO-MINUS3 = FG0JW00.FG0JWWDT;


  if (FG0JW00.FG0JWWMM == 1)
    FG0JW00.FG0JWWMM = 12;
    if (FG0JW00.FG0JWWYY == 00)
      FG0JW00.FG0JWWYY = 99;
      FG0JW00.FG0JWWCC = FG0JW00.FG0JWWCC - 1;
    else
      FG0JW00.FG0JWWYY = FG0JW00.FG0JWWYY - 1;
    end
  else
    FG0JW00.FG0JWWMM = FG0JW00.FG0JWWMM - 1;
  end

  FG0JW04.FG0JW-CURR-MO-MINUS4 = FG0JW00.FG0JWWDT;

   /* ------------------------------------------------------------*/
   /* Calculate the main buy month*/
   /* ------------------------------------------------------------*/

  FG0JW04.FG0JWBWM = FG0JW04.FG0JWBWM + 5;

  if (FG0JW04.FG0JWBWM > 12)
    FG0JW04.FG0JWBWM = FG0JW04.FG0JWBWM - 12;
    FG0JW04.FG0JWBWY = FG0JW04.FG0JWBWY + 1;
    if (FG0JW04.FG0JWBWY == 00)
      FG0JW04.FG0JWBWC = FG0JW04.FG0JWBWC + 1;
    end
  end


end // end FG0J-2112

// Select 's2' dprodg.vsyclr01
Function FG0J-2131()
   /* ------------------------------------------------------------*/
   /* Select set on dprodg.vsyclr01 table.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty;

   /* ------------------------------------------------------------*/
   /* Load pg2rec record - dprodg.vsyclr01*/
   /* ------------------------------------------------------------*/

  PG2REC.XPRCD = FFWREC.YPGCD; /* type group code*/
  PG2REC.XPCCD = FFWREC.XPCCD; /* category code*/
  PG2REC.SYBSTGNB = FG0JW04.FG0JWSTY;

  FFFREC.FFFFUNCD = "S2"; /* Function code*/

  TA1REC.TA1PGMNM = "FG0J213"; /* Calling process*/

  XSFFS56(); /* Decl and open dprodg.vsyclr01 csr*/

end // end FG0J-2131

// Select 'n2' dprodg.vsyclr01
Function FG0J-2132()
   /* ----------------------------------------------------------------*/
   /* Fetch row from dprosg.vsyclr01.*/
   /* ----------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "N2"; /* Function code*/
  TA1REC.TA1PGMNM = "FG0J213"; /* Calling process*/

  XSFFS56(); /* Fetch dprodg.vsyclr01 row*/

end // end FG0J-2132

// Proc 1 year prior req rng
Function FG0J-2133()
   /* -----------------------------------------------------------------*/
   /* Process sales and demand quantities for 1 year prior to the*/
   /* requested range.*/
   /* -----------------------------------------------------------------*/

  FG0JW05.FG0JWSSN[1] = PG2REC.SY1STNBR; /* hist sls sty nbr*/
  FG0JW05.FG0JWSCI[1] = PG2REC.SY2CLRID; /* hist sls clr id*/
  FG0JW05.FG0JWSDC[1] = PG2REC.XDMCD; /* hist sls dim cd*/
  FG0JW05.FG0JWSCD[1] = PG2REC.SY2CLRAB; /* hist sls clr abrv*/

  FG0JW05.FG0JWDSN[1] = PG2REC.SY1STNBR; /* hist dmd sty nbr*/
  FG0JW05.FG0JWDCI[1] = PG2REC.SY2CLRID; /* hist dmd clr id*/
  FG0JW05.FG0JWDDC[1] = PG2REC.XDMCD; /* hist dmd dim cd*/
  FG0JW05.FG0JWDCD[1] = PG2REC.SY2CLRAB; /* hist dmd clr abrv*/

  FFFREC.FFFBEGMO = FG0JW01.FG0JWPBD[1]; /* rng beg date*/
  FFFREC.FFFENDMO = FG0JW01.FG0JWPED[1]; /* rng end date*/
  FG0JW00.FG0JWEND = FG0JW01.FG0JWPED[1];

  FG0JW04.FG0JWYIX = 1;

   /* -----------------------------------------------------------------*/
   /* Establish ending active forecast month.*/
   /* -----------------------------------------------------------------*/

  if (PG2REC.PG-CURR-XLC-CD == "05"
   || PG2REC.PG-CURR-XLC-CD == "10")
    if (PG2REC.SY2PDCMO > FG0JW04.FG0JW-CURR-MO) /* proj clsout mo > curr mo*/
      FG0JW04.FG0JW-WORK-CCYYMM = PG2REC.SY2PDCMO;
      if (FG0JW04.FG0JW-WORK-MM == 01)
        FG0JW04.FG0JW-WORK-MM = 12;
        FG0JW04.FG0JW-WORK-CCYY = FG0JW04.FG0JW-WORK-CCYY - 1;
      else
        FG0JW04.FG0JW-WORK-MM = FG0JW04.FG0JW-WORK-MM - 1;
      end
      if (FG0JW04.FG0JW-WORK-CCYYMM < FFFREC.FFFENDMO
       && FG0JW04.FG0JW-WORK-CCYYMM >= FFFREC.FFFBEGMO)
        FFFREC.FFFENDMO = FG0JW04.FG0JW-WORK-CCYYMM;
      end
    end
  end

   /* ---------------------------------------------------------------*/
   /* Determine if the processing range is all actual, all forecast,*/
   /* or mixed.*/
   /* Note: this is a common statement group used for all three prior*/
   /* ranges.   The begin and end dates are set in the calling process.*/
   /* ---------------------------------------------------------------*/

  FG0JW04.FG0JWUHS = 0;
  FG0JW04.FG0JWUHD = 0;

  if (FFFREC.FFFENDMO < FG0JW04.FG0JW-CURR-MO) /* all actl*/
    FG0JS-100(); /* get actl sls qtys*/
    FG0JS-200(); /* get actl dmd qtys*/
  else
    if (FFFREC.FFFBEGMO >= FG0JW04.FG0JW-CURR-MO) /* all fcst*/
      if (PG2REC.XDVCD == "02" || PG2REC.XDVCD == "03")

        /* skip Nil and Promo only products*/
      else
        FG0JS-300(); /* get fcst sls qty*/
        FG0JS-400(); /* get fcst dmd qty*/
      end
    else
      FG0JW04.FG0JWSHS = 0;
      FG0JW04.FG0JWSHD = 0;
      FG0JW04.FG0JW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
      FG0JW04.FG0JW-HOLD-END-MO = FFFREC.FFFENDMO;

      FFFREC.FFFENDMO = FG0JW04.FG0JW-CURR-MO-MINUS1;
      FG0JS-100(); /* get actl sls qtys*/
      FG0JW04.FG0JWSHS = FG0JW04.FG0JWUHS;
      FG0JS-200(); /* get actl dmd qtys*/
      FG0JW04.FG0JWSHD = FG0JW04.FG0JWUHD;

      if (PG2REC.XDVCD == "02" || PG2REC.XDVCD == "03")

        /* skip Nil and Promo only products*/
      else
        FG0JW04.FG0JWUHS = 0;
        FG0JW04.FG0JWUHD = 0;
        FFFREC.FFFBEGMO = FG0JW04.FG0JW-CURR-MO;
        FFFREC.FFFENDMO = FG0JW04.FG0JW-HOLD-END-MO;
        FG0JS-300(); /* get fcst sls qty*/
        FG0JW04.FG0JWUHS = FG0JW04.FG0JWUHS + FG0JW04.FG0JWSHS;
        FG0JS-400(); /* get fcst dmd qty*/
        FG0JW04.FG0JWUHD = FG0JW04.FG0JWUHD + FG0JW04.FG0JWSHD;
      end

      FFFREC.FFFBEGMO = FG0JW04.FG0JW-HOLD-BEG-MO;
      FFFREC.FFFENDMO = FG0JW04.FG0JW-HOLD-END-MO;
    end
  end

  if (FG0JW04.FG0JWUHS == 0
   && FG0JW04.FG0JWUHD == 0)
    if (FFFREC.FFFBEGMO >= FG0JW04.FG0JW-CURR-MO)
      if (PG2REC.SY2FDSMO <= FG0JW01.FG0JWPED[1] /* dom sls mo <= rng end mo*/
       && PG2REC.SY2PDCMO > FG0JW01.FG0JWPBD[1]) /* pj clsout mo > beg mo*/
        if (PG2REC.XDVCD == "02" || PG2REC.XDVCD == "03")

          /* skip Nil and Promo only products*/
        else
          FG0JW00.FG0JWSWP = "Y";
          FFXREC.FFXNUMB = FG0JW04.FG0JWUHS;
          XSFFS10();
          FG0JW04.FG0JWHST = FFXREC.FFXCHAR;
          FG0JW05.FG0JWUSQ[1] = FG0JW04.FG0JWUHS;
          FG0JW05.FG0JWHSQ[1] = FG0JW04.FG0JWHST;

          FFXREC.FFXNUMB = FG0JW04.FG0JWUHD;
          XSFFS10();
          FG0JW04.FG0JWHDT = FFXREC.FFXCHAR;
          FG0JW05.FG0JWUDQ[1] = FG0JW04.FG0JWUHD;
          FG0JW05.FG0JWHDQ[1] = FG0JW04.FG0JWHDT;

        end
      end
    end
  else
    FG0JW00.FG0JWSWP = "Y";
    FFXREC.FFXNUMB = FG0JW04.FG0JWUHS;
    XSFFS10();
    FG0JW04.FG0JWHST = FFXREC.FFXCHAR;
    FG0JW05.FG0JWUSQ[1] = FG0JW04.FG0JWUHS;
    FG0JW05.FG0JWHSQ[1] = FG0JW04.FG0JWHST;

    FFXREC.FFXNUMB = FG0JW04.FG0JWUHD;
    XSFFS10();
    FG0JW04.FG0JWHDT = FFXREC.FFXCHAR;
    FG0JW05.FG0JWUDQ[1] = FG0JW04.FG0JWUHD;
    FG0JW05.FG0JWHDQ[1] = FG0JW04.FG0JWHDT;

  end


end // end FG0J-2133

// Proc 2 years prior req rng
Function FG0J-2134()
   /* -------------------------------------------------------------*/
   /* Process sales and demand quantities for 2 years prior to the*/
   /* requested range.*/
   /* -------------------------------------------------------------*/

  FG0JW05.FG0JWSSN[2] = PG2REC.SY1STNBR; /* hist sls sty nbr*/
  FG0JW05.FG0JWSCI[2] = PG2REC.SY2CLRID; /* hist sls clr id*/
  FG0JW05.FG0JWSDC[2] = PG2REC.XDMCD; /* hist sls dim cd*/
  FG0JW05.FG0JWSCD[2] = PG2REC.SY2CLRAB; /* hist sls clr abrv*/

  FG0JW05.FG0JWDSN[2] = PG2REC.SY1STNBR; /* hist dmd sty nbr*/
  FG0JW05.FG0JWDCI[2] = PG2REC.SY2CLRID; /* hist dmd clr id*/
  FG0JW05.FG0JWDDC[2] = PG2REC.XDMCD; /* hist dmd dim cd*/
  FG0JW05.FG0JWDCD[2] = PG2REC.SY2CLRAB; /* hist dmd clr abrv*/

  FFFREC.FFFBEGMO = FG0JW01.FG0JWPBD[2]; /* current date*/
  FFFREC.FFFENDMO = FG0JW01.FG0JWPED[2];
  FG0JW00.FG0JWEND = FG0JW01.FG0JWPED[2];

  FG0JW04.FG0JWYIX = 2;

   /* -----------------------------------------------------------------*/
   /* Establish ending active forecast month.*/
   /* -----------------------------------------------------------------*/

  if (PG2REC.PG-CURR-XLC-CD == "05"
   || PG2REC.PG-CURR-XLC-CD == "10")
    if (PG2REC.SY2PDCMO > FG0JW04.FG0JW-CURR-MO) /* proj clsout mo > curr mo*/
      FG0JW04.FG0JW-WORK-CCYYMM = PG2REC.SY2PDCMO;
      if (FG0JW04.FG0JW-WORK-MM == 01)
        FG0JW04.FG0JW-WORK-MM = 12;
        FG0JW04.FG0JW-WORK-CCYY = FG0JW04.FG0JW-WORK-CCYY - 1;
      else
        FG0JW04.FG0JW-WORK-MM = FG0JW04.FG0JW-WORK-MM - 1;
      end
      if (FG0JW04.FG0JW-WORK-CCYYMM < FFFREC.FFFENDMO
       && FG0JW04.FG0JW-WORK-CCYYMM >= FFFREC.FFFBEGMO)
        FFFREC.FFFENDMO = FG0JW04.FG0JW-WORK-CCYYMM;
      end
    end
  end

   /* ---------------------------------------------------------------*/
   /* Determine if the processing range is all actual, all forecast,*/
   /* or mixed.*/
   /* Note: this is a common statement group used for all three prior*/
   /* ranges.   The begin and end dates are set in the calling process.*/
   /* ---------------------------------------------------------------*/

  FG0JW04.FG0JWUHS = 0;
  FG0JW04.FG0JWUHD = 0;

  if (FFFREC.FFFENDMO < FG0JW04.FG0JW-CURR-MO) /* all actl*/
    FG0JS-100(); /* get actl sls qtys*/
    FG0JS-200(); /* get actl dmd qtys*/
  else
    if (FFFREC.FFFBEGMO >= FG0JW04.FG0JW-CURR-MO) /* all fcst*/
      if (PG2REC.XDVCD == "02" || PG2REC.XDVCD == "03")

        /* skip Nil and Promo only products*/
      else
        FG0JS-300(); /* get fcst sls qty*/
        FG0JS-400(); /* get fcst dmd qty*/
      end
    else
      FG0JW04.FG0JWSHS = 0;
      FG0JW04.FG0JWSHD = 0;
      FG0JW04.FG0JW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
      FG0JW04.FG0JW-HOLD-END-MO = FFFREC.FFFENDMO;

      FFFREC.FFFENDMO = FG0JW04.FG0JW-CURR-MO-MINUS1;
      FG0JS-100(); /* get actl sls qtys*/
      FG0JW04.FG0JWSHS = FG0JW04.FG0JWUHS;
      FG0JS-200(); /* get actl dmd qtys*/
      FG0JW04.FG0JWSHD = FG0JW04.FG0JWUHD;

      if (PG2REC.XDVCD == "02" || PG2REC.XDVCD == "03")

        /* skip Nil and Promo only products*/
      else
        FG0JW04.FG0JWUHS = 0;
        FG0JW04.FG0JWUHD = 0;
        FFFREC.FFFBEGMO = FG0JW04.FG0JW-CURR-MO;
        FFFREC.FFFENDMO = FG0JW04.FG0JW-HOLD-END-MO;
        FG0JS-300(); /* get fcst sls qty*/
        FG0JW04.FG0JWUHS = FG0JW04.FG0JWUHS + FG0JW04.FG0JWSHS;
        FG0JS-400(); /* get fcst dmd qty*/
        FG0JW04.FG0JWUHD = FG0JW04.FG0JWUHD + FG0JW04.FG0JWSHD;
      end

      FFFREC.FFFBEGMO = FG0JW04.FG0JW-HOLD-BEG-MO;
      FFFREC.FFFENDMO = FG0JW04.FG0JW-HOLD-END-MO;
    end
  end

  if (FG0JW04.FG0JWUHS == 0
   && FG0JW04.FG0JWUHD == 0)
    if (FFFREC.FFFBEGMO >= FG0JW04.FG0JW-CURR-MO)
      if (PG2REC.SY2FDSMO <= FG0JW01.FG0JWPED[2] /* dom sls mo <= rng end mo*/
       && PG2REC.SY2PDCMO > FG0JW01.FG0JWPBD[2]) /* pj clsout mo > beg mo*/
        if (PG2REC.XDVCD == "02" || PG2REC.XDVCD == "03")

          /* skip Nil and Promo only products*/
        else
          FG0JW00.FG0JWSWP = "Y";
          FFXREC.FFXNUMB = FG0JW04.FG0JWUHS;
          XSFFS10();
          FG0JW04.FG0JWHST = FFXREC.FFXCHAR;
          FG0JW05.FG0JWUSQ[2] = FG0JW04.FG0JWUHS;
          FG0JW05.FG0JWHSQ[2] = FG0JW04.FG0JWHST;

          FFXREC.FFXNUMB = FG0JW04.FG0JWUHD;
          XSFFS10();
          FG0JW04.FG0JWHDT = FFXREC.FFXCHAR;
          FG0JW05.FG0JWUDQ[2] = FG0JW04.FG0JWUHD;
          FG0JW05.FG0JWHDQ[2] = FG0JW04.FG0JWHDT;

        end
      end
    end
  else
    FG0JW00.FG0JWSWP = "Y";
    FFXREC.FFXNUMB = FG0JW04.FG0JWUHS;
    XSFFS10();
    FG0JW04.FG0JWHST = FFXREC.FFXCHAR;
    FG0JW05.FG0JWUSQ[2] = FG0JW04.FG0JWUHS;
    FG0JW05.FG0JWHSQ[2] = FG0JW04.FG0JWHST;

    FFXREC.FFXNUMB = FG0JW04.FG0JWUHD;
    XSFFS10();
    FG0JW04.FG0JWHDT = FFXREC.FFXCHAR;
    FG0JW05.FG0JWUDQ[2] = FG0JW04.FG0JWUHD;
    FG0JW05.FG0JWHDQ[2] = FG0JW04.FG0JWHDT;

  end


end // end FG0J-2134

// Proc 3 years prior req rng
Function FG0J-2135()
   /* -------------------------------------------------------------*/
   /* Process sales and demand quantities for 3 years prior to the*/
   /* requested range.*/
   /* -------------------------------------------------------------*/

  FG0JW05.FG0JWSSN[3] = PG2REC.SY1STNBR; /* hist sls sty nbr*/
  FG0JW05.FG0JWSCI[3] = PG2REC.SY2CLRID; /* hist sls clr id*/
  FG0JW05.FG0JWSDC[3] = PG2REC.XDMCD; /* hist sls dim cd*/
  FG0JW05.FG0JWSCD[3] = PG2REC.SY2CLRAB; /* hist sls clr abrv*/

  FG0JW05.FG0JWDSN[3] = PG2REC.SY1STNBR; /* hist dmd sty nbr*/
  FG0JW05.FG0JWDCI[3] = PG2REC.SY2CLRID; /* hist dmd clr id*/
  FG0JW05.FG0JWDDC[3] = PG2REC.XDMCD; /* hist dmd dim cd*/
  FG0JW05.FG0JWDCD[3] = PG2REC.SY2CLRAB; /* hist dmd clr abrv*/

  FFFREC.FFFBEGMO = FG0JW01.FG0JWPBD[3]; /* current date*/
  FFFREC.FFFENDMO = FG0JW01.FG0JWPED[3];
  FG0JW00.FG0JWEND = FG0JW01.FG0JWPED[3];

  FG0JW04.FG0JWYIX = 3;

   /* -----------------------------------------------------------------*/
   /* Establish ending active forecast month.*/
   /* -----------------------------------------------------------------*/

  if (PG2REC.PG-CURR-XLC-CD == "05"
   || PG2REC.PG-CURR-XLC-CD == "10")
    if (PG2REC.SY2PDCMO > FG0JW04.FG0JW-CURR-MO) /* proj clsout mo > curr mo*/
      FG0JW04.FG0JW-WORK-CCYYMM = PG2REC.SY2PDCMO;
      if (FG0JW04.FG0JW-WORK-MM == 01)
        FG0JW04.FG0JW-WORK-MM = 12;
        FG0JW04.FG0JW-WORK-CCYY = FG0JW04.FG0JW-WORK-CCYY - 1;
      else
        FG0JW04.FG0JW-WORK-MM = FG0JW04.FG0JW-WORK-MM - 1;
      end
      if (FG0JW04.FG0JW-WORK-CCYYMM < FFFREC.FFFENDMO
       && FG0JW04.FG0JW-WORK-CCYYMM >= FFFREC.FFFBEGMO)
        FFFREC.FFFENDMO = FG0JW04.FG0JW-WORK-CCYYMM;
      end
    end
  end

   /* ---------------------------------------------------------------*/
   /* Determine if the processing range is all actual, all forecast,*/
   /* or mixed.*/
   /* Note: this is a common statement group used for all three prior*/
   /* ranges.   The begin and end dates are set in the calling process.*/
   /* ---------------------------------------------------------------*/

  FG0JW04.FG0JWUHS = 0;
  FG0JW04.FG0JWUHD = 0;

  if (FFFREC.FFFENDMO < FG0JW04.FG0JW-CURR-MO) /* all actl*/
    FG0JS-100(); /* get actl sls qtys*/
    FG0JS-200(); /* get actl dmd qtys*/
  else
    if (FFFREC.FFFBEGMO >= FG0JW04.FG0JW-CURR-MO) /* all fcst*/
      if (PG2REC.XDVCD == "02" || PG2REC.XDVCD == "03")

        /* skip Nil and Promo only products*/
      else
        FG0JS-300(); /* get fcst sls qty*/
        FG0JS-400(); /* get fcst dmd qty*/
      end
    else
      FG0JW04.FG0JWSHS = 0;
      FG0JW04.FG0JWSHD = 0;
      FG0JW04.FG0JW-HOLD-BEG-MO = FFFREC.FFFBEGMO;
      FG0JW04.FG0JW-HOLD-END-MO = FFFREC.FFFENDMO;

      FFFREC.FFFENDMO = FG0JW04.FG0JW-CURR-MO-MINUS1;
      FG0JS-100(); /* get actl sls qtys*/
      FG0JW04.FG0JWSHS = FG0JW04.FG0JWUHS;
      FG0JS-200(); /* get actl dmd qtys*/
      FG0JW04.FG0JWSHD = FG0JW04.FG0JWUHD;

      if (PG2REC.XDVCD == "02" || PG2REC.XDVCD == "03")

        /* skip Nil and Promo only products*/
      else
        FG0JW04.FG0JWUHS = 0;
        FG0JW04.FG0JWUHD = 0;
        FFFREC.FFFBEGMO = FG0JW04.FG0JW-CURR-MO;
        FFFREC.FFFENDMO = FG0JW04.FG0JW-HOLD-END-MO;
        FG0JS-300(); /* get fcst sls qty*/
        FG0JW04.FG0JWUHS = FG0JW04.FG0JWUHS + FG0JW04.FG0JWSHS;
        FG0JS-400(); /* get fcst dmd qty*/
        FG0JW04.FG0JWUHD = FG0JW04.FG0JWUHD + FG0JW04.FG0JWSHD;
      end

      FFFREC.FFFBEGMO = FG0JW04.FG0JW-HOLD-BEG-MO;
      FFFREC.FFFENDMO = FG0JW04.FG0JW-HOLD-END-MO;
    end
  end

  if (FG0JW04.FG0JWUHS == 0
   && FG0JW04.FG0JWUHD == 0)
    if (FFFREC.FFFBEGMO >= FG0JW04.FG0JW-CURR-MO)
      if (PG2REC.SY2FDSMO <= FG0JW01.FG0JWPED[3] /* dom sls mo <= rng end mo*/
       && PG2REC.SY2PDCMO > FG0JW01.FG0JWPBD[3]) /* pj clsout mo > beg mo*/
        if (PG2REC.XDVCD == "02" || PG2REC.XDVCD == "03")

          /* skip Nil and Promo only products*/
        else
          FG0JW00.FG0JWSWP = "Y";
          FFXREC.FFXNUMB = FG0JW04.FG0JWUHS;
          XSFFS10();
          FG0JW04.FG0JWHST = FFXREC.FFXCHAR;
          FG0JW05.FG0JWUSQ[3] = FG0JW04.FG0JWUHS;
          FG0JW05.FG0JWHSQ[3] = FG0JW04.FG0JWHST;

          FFXREC.FFXNUMB = FG0JW04.FG0JWUHD;
          XSFFS10();
          FG0JW04.FG0JWHDT = FFXREC.FFXCHAR;
          FG0JW05.FG0JWUDQ[3] = FG0JW04.FG0JWUHD;
          FG0JW05.FG0JWHDQ[3] = FG0JW04.FG0JWHDT;

        end
      end
    end
  else
    FG0JW00.FG0JWSWP = "Y";
    FFXREC.FFXNUMB = FG0JW04.FG0JWUHS;
    XSFFS10();
    FG0JW04.FG0JWHST = FFXREC.FFXCHAR;
    FG0JW05.FG0JWUSQ[3] = FG0JW04.FG0JWUHS;
    FG0JW05.FG0JWHSQ[3] = FG0JW04.FG0JWHST;

    FFXREC.FFXNUMB = FG0JW04.FG0JWUHD;
    XSFFS10();
    FG0JW04.FG0JWHDT = FFXREC.FFXCHAR;
    FG0JW05.FG0JWUDQ[3] = FG0JW04.FG0JWUHD;
    FG0JW05.FG0JWHDQ[3] = FG0JW04.FG0JWHDT;

  end


end // end FG0J-2135

// close 'c2' dprodg.vsyclr01
Function FG0J-2136()
   /* ------------------------------------------------------------------*/
   /* Close cursor on dprodg.vsyclr01*/
   /* ------------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "C2"; /* Function code*/
  TA1REC.TA1PGMNM = "FG0J213"; /* Calling process*/

  XSFFS56(); /* Close dprodg.vsyclr01 cursor*/

end // end FG0J-2136

// Updt page in temp stor
Function FG0J-2141()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  FG0JW06.XXXTSLEN = FG0JW00.FG0JWTL3;
  TA5REC.TA5APPID = "FGJ3";
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (FG0JW06, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "214"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0J-2141

// Inquire/maintain a table row
Function FG0J001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (FG0JW00.FG0JWSWD == "1") /* Map 1 was requested*/

    FG0J100(); /* Display map 1*/

  else

    if (FG0JW00.FG0JWSWD == "2") /* Map 2 was requested*/

      FG0J200(); /* Display map 2*/

    else

      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/

      FFWREC.XXXMODID = "001"; /* Module identification*/
      FFWREC.XXXMSGNO = 10; /* Indicate system error*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = FG0JW00.FG0JWSWD; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/

      COMMAREA.CATOAP = "FG0A"; /* TO application*/

      XSFFS01(); /* Exit to another application*/

      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/

      TA1REC.TA1FUNC = "ABND"; /* Termination function*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    end

  end


end // end FG0J001

// Inquire/maintain a table row
Function FG0J100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FG0J110(); /* Obtain the data to display*/

  FG0J120(); /* Format and display the map*/

  FG0J130(); /* Check attention identifier*/

  FG0J140(); /* Reset fields to normal intensity*/

  FG0J150(); /* Verify the entered data*/

  FG0J160(); /* Process valid input request*/

end // end FG0J100

// Obtain the data to display
Function FG0J110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FG0JW00.FG0JWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  set FG0JW01 empty; /* m001 header data*/
  set FG0JW04 empty; /* m002 header data*/
  set FG0JW07 empty; /* m001 display totals*/

  FG0JS01(); /* Purge temp storage current m001*/

  if (FG0JW00.FG0JWKYC == "Y")

    FG0JS02(); /* Purge temp storage history m001*/

    FG0JS22(); /* Purge temp storage m002*/

    /* ------------------------------------------------------------*/
    /* Set map defaults*/
    /* ------------------------------------------------------------*/

    FG0JW01.FG0JWYOP = 1;
    FG0JW01.FG0JWHOP = "S";

    FG0JW00.FG0JWKYC = "N";

  end

  FG0JW01.FG0JWUST = FG0JW00.FG0JWSUT;
  FG0JW01.FG0JWSGT = FG0JW00.FG0JWSTG;

   /* ------------------------------------------------------------*/
   /* If work sheet number has been passed obtain forecast*/
   /* information from dfcast.vwdgrp01 and dfcast.vwsgrp01.*/
   /* verify dfcast.vwltyp01 and dfcast.vwcat001 exist if not*/
   /* the select statements will abend.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.FFEWSNBR != 0)
    FG0J111();
  end

   /* ------------------------------------------------------------*/
   /* Obtain product cat and product group type descriptions*/
   /* ------------------------------------------------------------*/

  XPCREC.XPCCD = FFWREC.XPCCD;
  if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
    FFWREC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
  end

  if (FFWREC.YPGCD in YPGTBL.YPGCD)
    FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
  end

   /* ------------------------------------------------------------*/
   /* Select dfcast.vrcat001 for season code, if not found*/
   /* default the season code to blank.*/
   /* ------------------------------------------------------------*/

  FG0J112(); /* select dfcast.vrcat001 row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    FG0JW01.FFCDMIND = FFCREC.FFCDMIND;
  end

   /* ------------------------------------------------------------*/
   /* Set default create date.*/
   /* Note:  If dfcast.vwsty001 row exists its standard change*/
   /* date will become the create date.*/
   /* ------------------------------------------------------------*/

  FG0JW01.FG0JWCDT = VGVar.currentShortGregorianDate; /* created date default*/

   /* ------------------------------------------------------------*/
   /* Set ffzrec default dates*/
   /* ------------------------------------------------------------*/

  FFZREC.FFZBEGMO = FFWREC.FFABEGMO;
  FFZREC.FFZENDMO = FFWREC.FFAENDMO;

   /* ------------------------------------------------------------*/
   /* Select requested style group data from dfcast.vffsty01*/
   /* ------------------------------------------------------------*/

  FG0JW00.FG0JWIDX = 1; /* init index*/
  FG0JW00.FG0JWSTF = "N"; /* init vwsty001 data flag*/

  set FF3REC empty;
  FF3REC.SYBSTGNB = FFWREC.SYBSTGNB;

  FG0J113(); /* select set on dfcast.vffsty01*/

  FG0J114(); /* fetch first dfcast.vffsty01 row*/

  while (SQLCA.VAGen_SQLCODE == 0) /* process unitl end of dfcast.vffsty01*/

    if (FF3REC.XLCCD == "10"               /* process active*/
     && FF3REC.SY2FDSMO <= FFWREC.FFAENDMO /* Proj. intro. mo*/
     && FF3REC.SY2PDCMO > FFWREC.FFABEGMO) /* Proj. clsout mo*/

      FFWREC.SY2CLRID = FF3REC.SY2CLRID;
      FFWREC.XDMCD = FF3REC.XDMCD;

      FG0JW01.FG0JWSSG = FF3REC.SYBSTGNM; /* style group name*/
      FG0JW02.FG0JWSSC[FG0JWIDX] = FF3REC.SY2CLRAB; /* sty clr abrv*/
      FG0JW02.SY1STNBR[FG0JWIDX] = FF3REC.SY1STNBR; /* style number*/
      FG0JW02.FG0JWSP1[FG0JWIDX] = "-"; /* dash*/
      FG0JW02.SY2CLRID[FG0JWIDX] = FF3REC.SY2CLRID; /* color id*/
      FG0JW02.FG0JWSP2[FG0JWIDX] = "-"; /* dash*/
      FG0JW02.FF8DEVFL[FG0JWIDX] = FF3REC.FF8DEVFL; /* style dev flag*/
      FG0JW02.XDMCD[FG0JWIDX] = FF3REC.XDMCD; /* dimension code*/
      FG0JW02.ZZZCHGCT[FG0JWIDX] = FF3REC.ZZZCHGCT; /* chg count*/

      /* ------------------------------------------------------------*/
      /* Select/summarize dfcast.vmsty001 to get master qty,*/
      /* If no data exists default the master qty to zero.*/
      /* ------------------------------------------------------------*/

      FFFREC.FFFBEGMO = FFWREC.FFABEGMO; /* requested begin range*/
      FFFREC.FFFENDMO = FFWREC.FFAENDMO; /* requested end range*/
      PG2REC.SY1STNBR = FF3REC.SY1STNBR;
      PG2REC.SY2CLRID = FF3REC.SY2CLRID;
      PG2REC.XDMCD = FF3REC.XDMCD;

      FG0JS05(); /* select/sum dfcast.vmsty001*/

      if (SQLCA.VAGen_SQLCODE == 0)
        FG0JW02.FG0JWUMQ[FG0JWIDX] = FF9REC.FF6SLFCT;
      end

      /* ------------------------------------------------------------*/
      /* Translate current sales master qty into thousands*/
      /* ------------------------------------------------------------*/

      FFXREC.FFXNUMB = FG0JW02.FG0JWUMQ[FG0JWIDX];
      XSFFS10();
      FG0JW02.FG0JWMQT[FG0JWIDX] = FFXREC.FFXCHAR;

      /* ------------------------------------------------------------*/
      /* If the work sheet number was passed obtain the forecast*/
      /* qtys from dfcast.vwsty001 if not found default forecast*/
      /* qtys to zero.*/
      /* ------------------------------------------------------------*/

      if (FFWREC.FFEWSNBR != 0)

        FG0JS06(); /* select dfcast.vwsty001*/

        if (SQLCA.VAGen_SQLCODE == 0)
          if (FG0JW00.FG0JWIDX == 1) /* first time thru processing*/
            FG0JW01.FG0JWCDT = FFNREC.ZZZSDT; /* w/s date*/
          end
          FG0JW02.FG0JWSQT[FG0JWIDX] = FFNREC.FF6SLFCT;
          FG0JW02.FG0JWUQT[FG0JWIDX] = FFNREC.FF6SLFCT;
          FFXREC.FFXNUMB = FG0JW02.FG0JWUQT[FG0JWIDX];
          XSFFS10();
          FG0JW02.FG0JWQTY[FG0JWIDX] = FFXREC.FFXCHAR;
          FG0JW00.FG0JWSTF = "Y"; /* vwsty001 data found*/
        end
      end

      /* ------------------------------------------------------------*/
      /* Accumulate the current master qty total and forecast qty*/
      /* ------------------------------------------------------------*/

      FG0JW07.FG0JWUMQ = FG0JW02.FG0JWUMQ[FG0JWIDX] + FG0JW07.FG0JWUMQ;
      FG0JW07.FG0JWUQT = FG0JW02.FG0JWUQT[FG0JWIDX] + FG0JW07.FG0JWUQT;

      /* ------------------------------------------------------------*/
      /* If the page is full, add the page to the storage queue.*/
      /* Max lines per page equals 4 two lines per style color.*/
      /* ------------------------------------------------------------*/

      if (FG0JW00.FG0JWIDX > 4) /* Page is full*/
        FG0JW02.FG0JWNLD = FG0JW00.FG0JWIDX; /* nbr of lines loaded*/
        FG0JW02.FG0JWCTX = FG0JW02.FG0JWNLD + 1; /* total index*/
        FG0JS07(); /* Add page to temp storage*/
      else
        FG0JW00.FG0JWIDX = FG0JW00.FG0JWIDX + 1;
      end

    end

    FG0J114(); /* fetch next dfcast.vffsty01*/

  end

  FG0J117(); /* close dfcast.vffsty01 set*/

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (FG0JW00.FG0JWIDX > 1) /* Page was formatted*/
    FG0JW02.FG0JWNLD = FG0JW00.FG0JWIDX - 1;
    FG0JW02.FG0JWCTX = FG0JW02.FG0JWNLD + 1; /* total index*/
    FG0JS07(); /* Add page to temp storage*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FG0JW01.FG0JW1PM == 0) /* No pages formatted*/

    FFWREC.XXXMODID = "110"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/

    return; /* Exit to continue processing*/

  end

   /* ------------------------------------------------------------*/
   /* Translate the current master qty total, forecast qty total*/
   /* from units to thousands*/
   /* ------------------------------------------------------------*/

  FFXREC.FFXNUMB = FG0JW07.FG0JWUMQ;
  XSFFS10();
  FG0JW07.FG0JWMQT = FFXREC.FFXCHAR;

  if (FG0JW00.FG0JWSTF == "Y") /* if work sheet data found display*/
                                   /* total*/
    FFXREC.FFXNUMB = FG0JW07.FG0JWUQT;
    XSFFS10();
    FG0JW07.FG0JWQTY = FFXREC.FFXCHAR;
  end

   /* ------------------------------------------------------------*/
   /* Calculate style number percents*/
   /* ------------------------------------------------------------*/

  FG0JW00.FG0JWIDX = 1; /* init index*/
  while (FG0JW00.FG0JWIDX <= FG0JW01.FG0JW1PM)

    FG0JW01.XXXTSPAG = FG0JW00.FG0JWIDX; /* process temp storage*/

    FG0JS09(); /* read temp storage*/

    FG0JW00.FG0JWPIX = 1;
    while (FG0JW00.FG0JWPIX <= FG0JW02.FG0JWNLD)

      /* ------------------------------------------------------------*/
      /* Caluculate current sales style percent:*/
      /* ------------------------------------------------------------*/

      if (FG0JW07.FG0JWUQT != 0)
        FG0JW00.FG0JWNM1 = FG0JW02.FG0JWUQT[FG0JWPIX] * 100;
        FG0JW02.FG0JWSPC[FG0JWPIX] = mathLib.round(FG0JW00.FG0JWNM1 / FG0JW07.FG0JWUQT, -mathLib.decimals(FG0JW02.FG0JWSPC[FG0JWPIX]));
        FG0JW02.FG0JWSPT[FG0JWPIX] = mathLib.round(FG0JW00.FG0JWNM1 / FG0JW07.FG0JWUQT, -mathLib.decimals(FG0JW02.FG0JWSPT[FG0JWPIX]));
      end

      /* ------------------------------------------------------------*/
      /* Accumulate current sales percent*/
      /* ------------------------------------------------------------*/

      FG0JW07.FG0JWSPT = FG0JW02.FG0JWSPT[FG0JWPIX] + FG0JW07.FG0JWSPT;

      FG0JW00.FG0JWPIX = FG0JW00.FG0JWPIX + 1;

    end

    /* ------------------------------------------------------------*/
    /* Update temporary storage with style percents*/
    /* ------------------------------------------------------------*/

    FG0JS10(); /* updt temp storage with sty percents*/

    FG0JW00.FG0JWIDX = FG0JW00.FG0JWIDX + 1;

  end

   /* ------------------------------------------------------------*/
   /* Insure display percent eq 100*/
   /* ------------------------------------------------------------*/

  if (FG0JW07.FG0JWSPT > 0)
    FG0JW07.FG0JWSPT = 100;
  end

   /* ------------------------------------------------------------*/
   /* Calculate variance qty : total forecast qty - target qty*/
   /* ------------------------------------------------------------*/

  FG0JW01.FG0JWUVQ = FG0JW07.FG0JWUQT - FG0JW01.FG0JWUST;

  FFXREC.FFXNUMB = FG0JW01.FG0JWUVQ;
  XSFFS10();
  FG0JW01.FG0JWVQT = FFXREC.FFXCHAR;

   /* ------------------------------------------------------------*/
   /* Caluculate variance percent :*/
   /* (variance qty * 100) / target qty*/
   /* ------------------------------------------------------------*/

  if (FG0JW01.FG0JWUST != 0)
    FG0JW00.FG0JWNM1 = FG0JW01.FG0JWUVQ * 100;
    FG0JW01.FG0JWVPT = mathLib.round(FG0JW00.FG0JWNM1 / FG0JW01.FG0JWUST, -mathLib.decimals(FG0JW01.FG0JWVPT));
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FG0JW01.XXXTSPAG = 1; /* Desired page number*/
  FG0JW00.FG0JWSWR = "N"; /* Request for data switch*/
  FG0JW01.FG0JWCFL = "Y"; /* data is available for change*/

end // end FG0J110

// Select dfcast.vwdgrp01 row
Function FG0J111()
   /* ------------------------------------------------------------*/
   /* Work sheet number was passed obtain forecast*/
   /* - Obtain forecast information from dfcast.vwdgrp01 and vwsgrp01*/
   /* - Verify dfcast.vwltyp01 and dfcast.vwcat001 exist if not*/
   /* the select statements will abend.*/
   /* ------------------------------------------------------------*/

  FG0J-1111();

  FFWREC.YSMXDV = "10"; /* load sum xdvcd*/
  FFWREC.FFABEGMO = FFEREC.FFABEGMO; /* load begin range*/
  FFWREC.FFAENDMO = FFEREC.FFAENDMO; /* load end range*/

  FG0J-1112(); /* Select dfcast.vwline01 row*/

  FG0J-1113(); /* Select dfcast.vwltyp01 row*/

  FG0J-1114(); /* Select dfcast.vwcat001 row*/

  FG0J-1115(); /* Select dfcast.vwsgrp01 row*/

  FG0JW01.FG0JWUST = FFLREC.FFEFCTGT; /* unit style grp target qty*/
  FG0JW01.FG0JWSST = FFLREC.FFEFCTGT; /* save style grp target qty*/
  FFXREC.FFXNUMB = FFLREC.FFEFCTGT;
  XSFFS10();
  FG0JW01.FG0JWSGT = FFXREC.FFXCHAR; /* style grp target qty 1000*/

end // end FG0J111

// Select dfcast.vrcat001 row
Function FG0J112()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vrcat001 table.*/
   /* ------------------------------------------------------------*/

  set FFCREC empty; /* Clear row storage area*/

  FFCREC.FFABEGMO = FFWREC.FFABEGMO; /* being dt range*/
  FFCREC.FFAENDMO = FFWREC.FFAENDMO; /* end dt range*/
  FFCREC.YPGCD = FFWREC.YPGCD; /* product type code*/
  FFCREC.XPCCD = FFWREC.XPCCD; /* product cat code*/

  try
    call "IO3760" ("S ", SQLCA, FFCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "116"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VRCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFCREC.FFCKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0J112

// Select 's1' dfcast.vffsty01
Function FG0J113()
   /* ------------------------------------------------------------*/
   /* Select set on dfcast.vffsty01 table.*/
   /* ------------------------------------------------------------*/

  FF3REC.YSMXDV = "10";
  FF3REC.YPGCD = FFWREC.YPGCD;
  FF3REC.XLCCD = "10";

  try
    call "IO3990" ("S1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "113"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S1 ON DFCAST.VFFSTY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0J113

// Select 'n1' dfcast.vffsty01
Function FG0J114()
   /* ------------------------------------------------------------*/
   /* Fetch dfcast.vffsty01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("N1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "114"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DFCAST.VFFSTY01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0J114

// Select 'c1' dfcast.vffsty01
Function FG0J117()
   /* ------------------------------------------------------------*/
   /* Close dfcast.vffsty01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3990" ("C1", SQLCA, FF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "S08"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C1 DFCAST.VFFSTY01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF3REC.FF3KEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0J117

// Format and converse the map
Function FG0J120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (FG0JW00.FG0JWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FG0JW00.FG0JWSWF == "Y") /* Map must be formatted*/
      FG0J121(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If processing an existing forecast key data can not !!!*/
   /* be modified*/
   /* ------------------------------------------------------------*/

  if (FG0JW00.FG0JWFCF == "Y")
    set FG0JM001.FG0JMBRG skip; /* fcst begin range*/
    set FG0JM001.FG0JMERG skip; /* fcst end range*/
    set FG0JM001.YPGCD skip; /* product type grp*/
    set FG0JM001.XPCCD skip; /* product category code*/
    set FG0JM001.SYBSTGNB skip; /* style group number*/
    set FG0JM001.FG0JMSGT cursor; /* set cursor at style grp target*/
  end

   /* ------------------------------------------------------------*/
   /* Format page, date, and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  if (FG0JW01.FG0JW1PM > 0
   || FG0JW01.FG0JW2PM > 0)
    set FG0JM001.XXXLITPG skip;
    FG0JM001.XXXTSPAG = FG0JW01.XXXTSPAG; /* Current page*/
    set FG0JM001.XXXLITOF skip;
    if (FG0JW01.FG0JW1PM < FG0JW01.FG0JW2PM)
      FG0JM001.TA5TSQIX = FG0JW01.FG0JW2PM; /* max pages*/
    else
      FG0JM001.TA5TSQIX = FG0JW01.FG0JW1PM; /* max pages*/
    end
  end

  FG0JM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FG0JM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG0JM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* error message number*/
    FG0JM001.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    set FG0JM001 alarm; /* Indicate sound alarm*/
  end

  converse FG0JM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0;

  COMMAREA.CATOAP = FG0JM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG0JM001.CAITEM; /* Application data*/


end // end FG0J120

// Format the display data
Function FG0J121()
   /* ------------------------------------------------------------*/
   /* Init map fg0jm001*/
   /* ------------------------------------------------------------*/

  set FG0JM001 initial; /* m001 input/ouput area*/

  FG0JW00.FG0JWSWF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* Format fg0jm001 using passed data*/
   /* ------------------------------------------------------------*/

  FG0JW00.FG0JWWDT = FFWREC.FFABEGMO; /* w/s date field*/
  FG0JM001.FG0JMBRG = FG0JW00.FG0JWWYM; /* begin month range*/
  FG0JW00.FG0JWWDT = FFWREC.FFAENDMO; /* w/s date field*/
  FG0JM001.FG0JMERG = FG0JW00.FG0JWWYM; /* end month range*/

  FG0JM001.XPCCD = FFWREC.XPCCD;
  FG0JM001.XPCABRV = FFWREC.XPCABRV;

  FG0JM001.YPGCD = FFWREC.YPGCD;
  FG0JM001.YPGABRV = FFWREC.YPGABRV;

  FG0JM001.SYBSTGNB = FFWREC.SYBSTGNB;

  FG0JM001.FG0JMYOP = FG0JW01.FG0JWYOP; /* year option*/
  FG0JM001.FG0JMHOP = FG0JW01.FG0JWHOP; /* history option*/

   /* ------------------------------------------------------------*/
   /* If data has not been loaded bypass load map fields*/
   /* ------------------------------------------------------------*/

  if (FG0JW01.FG0JWCFL != "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* Load map using fg0jw01 work record*/
   /* ------------------------------------------------------------*/

  FG0JM001.FG0JMSGT = FG0JW01.FG0JWSGT; /* forecast target qty*/
  FG0JM001.FG0JMVQT = FG0JW01.FG0JWVQT; /* variance qty*/
  FG0JM001.FG0JMVPT = FG0JW01.FG0JWVPT; /* variance percent*/
  FG0JM001.FG0JMCDT = FG0JW01.FG0JWCDT; /* wrk sht created date*/
  FG0JM001.FFCDMIND = FG0JW01.FFCDMIND; /* season ind*/

   /* ------------------------------------------------------------*/
   /* Obtain current sales fcst from temporary storage m001*/
   /* ------------------------------------------------------------*/

  if (FG0JW01.XXXTSPAG <= FG0JW01.FG0JW1PM) /* temp storage max m001*/

    FG0JS09(); /* read temporary storage*/

    /* ------------------------------------------------------------*/
    /* Load current sales detail and total fcst qtys/pct*/
    /* ------------------------------------------------------------*/

    FG0JM001.FG0JMSSG = FG0JW01.FG0JWSSG;

    FG0JW00.FG0JWPIX = 1;
    while (FG0JW00.FG0JWPIX <= FG0JW02.FG0JWNLD) /* process temp storage*/

      FG0JM001.FG0JMSSC[FG0JWPIX] = FG0JW02.FG0JWSSC[FG0JWPIX];
      FG0JM001.FG0JMSSN[FG0JWPIX] = FG0JW02.FG0JWSDS[FG0JWPIX];
      FG0JM001.FG0JMMQT[FG0JWPIX] = FG0JW02.FG0JWMQT[FG0JWPIX];
      FG0JM001.FG0JMQTY[FG0JWPIX] = FG0JW02.FG0JWQTY[FG0JWPIX];
      set FG0JM001.FG0JMQTY[FG0JWPIX] normal;
      FG0JM001.FG0JMSPT[FG0JWPIX] = FG0JW02.FG0JWSPT[FG0JWPIX];
      set FG0JM001.FG0JMSPT[FG0JWPIX] normal;
      set FG0JM001.FG0JMCPT[FG0JWPIX] normal;

      FG0JW00.FG0JWPIX = FG0JW00.FG0JWPIX + 1;

    end

    FG0JM001.FG0JMSSC[FG0JWCTX] = "   TOTAL    ";
    FG0JM001.FG0JMSTM[FG0JWCTX] = FG0JW07.FG0JWMQT;
    FG0JM001.FG0JMSTF[FG0JWCTX] = FG0JW07.FG0JWQTY;
    set FG0JM001.FG0JMSTF[FG0JWCTX] skip;
    FG0JM001.FG0JMSTP[FG0JWCTX] = FG0JW07.FG0JWSPT;
    set FG0JM001.FG0JMSTP[FG0JWCTX] skip;
  end

   /* ------------------------------------------------------------*/
   /* If histocial data has not been loaded bypass load map field*/
   /* ------------------------------------------------------------*/

  if (FG0JW01.FG0JWHFL != "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* Obtain historical sales/demand from temporary storage*/
   /* ------------------------------------------------------------*/

  if (FG0JW01.XXXTSPAG <= FG0JW01.FG0JW2PM) /* temp storage max m002*/

    FG0JS24(); /* read temporary storage*/

    /* ------------------------------------------------------------*/
    /* Load historical detail and total fcst qtys/pcts*/
    /* ------------------------------------------------------------*/

    FG0JM001.FG0JMHSG = FG0JW01.FG0JWHSG;

    FG0JW00.FG0JWPIX = 1;
    FG0JW00.FG0JWIDX = 1;
    while (FG0JW00.FG0JWIDX <= FG0JW03.FG0JWNLD) /* process temp storage*/

      if (FG0JW01.FG0JWHOP == "S")
        if (FG0JW01.FG0JWYOP == 1)
          FG0JM001.FG0JMHSC[FG0JWPIX] = FG0JW03.FG0JWHC1[FG0JWIDX];
          FG0JM001.FG0JMHSN[FG0JWPIX] = FG0JW03.FG0JWHN1[FG0JWIDX];
          FG0JM001.FG0JMHQT[FG0JWPIX] = FG0JW03.FG0JWHQ1[FG0JWIDX];
          FG0JM001.FG0JMHPT[FG0JWPIX] = FG0JW03.FG0JWHP1[FG0JWIDX];
        end
        if (FG0JW01.FG0JWYOP == 2)
          FG0JM001.FG0JMHSC[FG0JWPIX] = FG0JW03.FG0JWHC2[FG0JWIDX];
          FG0JM001.FG0JMHSN[FG0JWPIX] = FG0JW03.FG0JWHN2[FG0JWIDX];
          FG0JM001.FG0JMHQT[FG0JWPIX] = FG0JW03.FG0JWHQ2[FG0JWIDX];
          FG0JM001.FG0JMHPT[FG0JWPIX] = FG0JW03.FG0JWHP2[FG0JWIDX];
        end
        if (FG0JW01.FG0JWYOP == 3)
          FG0JM001.FG0JMHSC[FG0JWPIX] = FG0JW03.FG0JWHC3[FG0JWIDX];
          FG0JM001.FG0JMHSN[FG0JWPIX] = FG0JW03.FG0JWHN3[FG0JWIDX];
          FG0JM001.FG0JMHQT[FG0JWPIX] = FG0JW03.FG0JWHQ3[FG0JWIDX];
          FG0JM001.FG0JMHPT[FG0JWPIX] = FG0JW03.FG0JWHP3[FG0JWIDX];
        end
      else
        if (FG0JW01.FG0JWYOP == 1)
          FG0JM001.FG0JMHSC[FG0JWPIX] = FG0JW03.FG0JWHC4[FG0JWIDX];
          FG0JM001.FG0JMHSN[FG0JWPIX] = FG0JW03.FG0JWHN4[FG0JWIDX];
          FG0JM001.FG0JMHQT[FG0JWPIX] = FG0JW03.FG0JWDQ1[FG0JWIDX];
          FG0JM001.FG0JMHPT[FG0JWPIX] = FG0JW03.FG0JWDP1[FG0JWIDX];
        end
        if (FG0JW01.FG0JWYOP == 2)
          FG0JM001.FG0JMHSC[FG0JWPIX] = FG0JW03.FG0JWHC5[FG0JWIDX];
          FG0JM001.FG0JMHSN[FG0JWPIX] = FG0JW03.FG0JWHN5[FG0JWIDX];
          FG0JM001.FG0JMHQT[FG0JWPIX] = FG0JW03.FG0JWDQ2[FG0JWIDX];
          FG0JM001.FG0JMHPT[FG0JWPIX] = FG0JW03.FG0JWDP2[FG0JWIDX];
        end
        if (FG0JW01.FG0JWYOP == 3)
          FG0JM001.FG0JMHSC[FG0JWPIX] = FG0JW03.FG0JWHC6[FG0JWIDX];
          FG0JM001.FG0JMHSN[FG0JWPIX] = FG0JW03.FG0JWHN6[FG0JWIDX];
          FG0JM001.FG0JMHQT[FG0JWPIX] = FG0JW03.FG0JWDQ3[FG0JWIDX];
          FG0JM001.FG0JMHPT[FG0JWPIX] = FG0JW03.FG0JWDP3[FG0JWIDX];
        end
      end

      if (FG0JM001.FG0JMHSN[FG0JWPIX] != " ")
        FG0JW00.FG0JWPIX = FG0JW00.FG0JWPIX + 1; /* increment map index*/
      end

      FG0JW00.FG0JWIDX = FG0JW00.FG0JWIDX + 1; /* increment load index*/

    end

    /* ---------------------------------------------------------*/
    /* Display historical date range and type sales/demand*/
    /* ---------------------------------------------------------*/

    set FG0JM001.FG0JMPR1 skip;
    FG0JM001.FG0JMPBR = FG0JW01.FG0JWPBR[FG0JWYOP]; /* prior beg yymm*/
    set FG0JM001.FG0JMDSH skip;
    FG0JM001.FG0JMPER = FG0JW01.FG0JWPER[FG0JWYOP]; /* prior end yymm*/
    set FG0JM001.FG0JMPR2 skip;
    FG0JM001.FG0JMYDS = FG0JW00.FG0JWYDS[FG0JWYOP]; /* prior year desc*/
    if (FG0JW01.FG0JWHOP == "S")
      FG0JM001.FG0JMHDS = FG0JW00.FG0JWHDS[1];
    else
      FG0JM001.FG0JMHDS = FG0JW00.FG0JWHDS[2];
    end
    set FG0JM001.FG0JMHDS skip; /* historical description sale/demand*/
    set FG0JM001.FG0JMHHQ skip; /* historical qty literal*/
    set FG0JM001.FG0JMHHP skip; /* historical pct literal*/

    /* ------------------------------------------------------------*/
    /* Load historical totals*/
    /* ------------------------------------------------------------*/

    FG0JM001.FG0JMHSC[FG0JWPIX] = "   TOTAL    ";
    if (FG0JW01.FG0JWHOP == "S")
      FG0JM001.FG0JMHTQ[FG0JWPIX] = FG0JW07.FG0JWHSQ[FG0JWYOP];
      FG0JM001.FG0JMHTP[FG0JWPIX] = 100;
    else
      FG0JM001.FG0JMHTQ[FG0JWPIX] = FG0JW07.FG0JWHDQ[FG0JWYOP];
      FG0JM001.FG0JMHTP[FG0JWPIX] = 100;
    end
  end


end // end FG0J121

// Check attention identifier
Function FG0J130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* refresh map*/

    FG0JW00.FG0JWSWR = "N"; /* request for data*/
    FG0JW00.FG0JWSWF = "Y"; /* format screen m001*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FG0JM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      FG0JS01(); /* purge temp storage*/

      XSFFS01(); /* Exit to another application*/

      FG0JW00.FG0JWSWR = "N"; /* request for data*/
      FG0JW00.FG0JWSWF = "Y"; /* format screen m001*/

      set FG0JM001.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf19) /* or PF19 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG0JM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FG0A"; /* Application find code*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "FG0T"; /* TO application*/
    end

    if (converseVar.eventKey is pf19) /* PF19 was pressed*/
      COMMAREA.CATOAP = "FG0B"; /* TO application*/
    end

    XSFFS01(); /* Exit to another application*/

    FG0JW00.FG0JWSWR = "N"; /* request for data*/
    FG0JW00.FG0JWSWF = "Y"; /* format screen m001*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* pf7 was not pressed*/
   && converseVar.eventKey not pf8   /* pf8 was not pressed*/
   && converseVar.eventKey not pf14  /* pf14 was not pressed*/
   && converseVar.eventKey not pf15  /* pf15 was not pressed*/
   && converseVar.eventKey not pf16  /* pf16 was not pressed*/
   && converseVar.eventKey not pf18  /* pf18 was not pressed*/
   && converseVar.eventKey not pf19) /* pf19 was not pressed*/

    FFWREC.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FG0J130

// Reset highlighted fields
Function FG0J140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FG0JM001.FG0JMBRG initialAttributes; /* begin range*/
  set FG0JM001.FG0JMERG initialAttributes; /* end range*/
  set FG0JM001.FG0JMSGT initialAttributes; /* style grp target*/
  set FG0JM001.FG0JMYOP initialAttributes; /* year option*/
  set FG0JM001.FG0JMHOP initialAttributes; /* history option*/
  set FG0JM001.FG0JMPCT initialAttributes; /* change percent*/
  set FG0JM001.FG0JMCTQ initialAttributes; /* change total qty*/
  set FG0JM001.XPCCD initialAttributes; /* category*/
  set FG0JM001.YPGCD initialAttributes; /* type group*/
  set FG0JM001.SYBSTGNB initialAttributes; /* style group nbr*/

  if (FG0JW01.FG0JWCFL == "Y")

    /* ----------------------------------------------------------*/
    /* Normalize current sales fcst data*/
    /* ----------------------------------------------------------*/

    if (FG0JW01.XXXTSPAG <= FG0JW01.FG0JW1PM)
      FG0JW00.FG0JWIDX = 1; /* init load index*/
      while (FG0JW00.FG0JWIDX <= FG0JW02.FG0JWNLD)

        set FG0JM001.FG0JMQTY[FG0JWIDX] normal; /* current sls fcst qty*/
        set FG0JM001.FG0JMSPT[FG0JWIDX] normal; /* style nbr percent*/
        set FG0JM001.FG0JMCPT[FG0JWIDX] normal; /* change percent*/

        FG0JW00.FG0JWIDX = FG0JW00.FG0JWIDX + 1; /* increment load index*/

      end

      set FG0JM001.FG0JMSTF[FG0JWCTX] skip; /* fcst qty total*/
      set FG0JM001.FG0JMSTP[FG0JWCTX] skip; /* style nbr percent*/
    end
  end

  if (FG0JW01.FG0JWHFL == "Y")

    /* ----------------------------------------------------------*/
     /* normalize historical sales/demand  fcst data*/
    /* ----------------------------------------------------------*/

    set FG0JM001.FG0JMPR1 skip; /* historical prior data range*/
    set FG0JM001.FG0JMDSH skip;
    set FG0JM001.FG0JMPR2 skip;
    set FG0JM001.FG0JMHDS skip; /* historical desc sale/demand*/
    set FG0JM001.FG0JMHHQ skip; /* historical qty literal*/
    set FG0JM001.FG0JMHHP skip; /* historical pct literal*/
  end

  set FG0JM001.CATOAP initialAttributes;
  set FG0JM001.CAITEM initialAttributes;

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FG0JM001.YPGCD == "?" /* product type group list req*/
   || FG0JM001.XPCCD == "?") /* or product cat list req*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FFWREC.XXXMODID = "140"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product the group codes*/
   /* ------------------------------------------------------------*/

  if (FG0JM001.YPGCD == "?") /* GPC list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT TYPE GROUP"; /* Heading*/

    XX0XW02.YPGFFFL = "Y"; /* init flag*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FG0JM001.YPGCD = FFWREC.YPGCD; /* Restore prior code*/
      FG0JM001.YPGABRV = FFWREC.YPGABRV; /* Restore prior code*/
    else
      FG0JM001.YPGCD = YPGTBL.YPGCD[XX0XWPIX]; /* Selected code*/
      FG0JM001.YPGABRV = YPGTBL.YPGABRV[XX0XWPIX]; /* Selected code*/

    end

    set FG0JM001.YPGCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes*/
   /* ------------------------------------------------------------*/

  if (FG0JM001.XPCCD == "?") /* product line  requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PRODUCT CATEGORY "; /* Heading*/
    XX0XW02.XGPCD = COMMAREA.XGPCD; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FG0JM001.XPCCD = FFWREC.XPCCD; /* Restore prior code*/
      XPCREC.XPCCD = FFWREC.XPCCD; /* Restore prior code*/
      XPCREC.XGPCD = COMMAREA.XGPCD; /* Restore prior code*/
      if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
        FG0JM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
      end
    else
      FG0JM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      FG0JM001.XPCABRV = XPCTBL.XPCABRV[XX0XWPIX]; /* Selected code*/

    end

    set FG0JM001.XPCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "140"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FG0J140

// Verify the entered data
Function FG0J150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "150"; /* Module identification*/
    set FG0JM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Verify request to page forward(pf7) or backwards(pf8), and*/
   /* check all modifiable fields except fcst target*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)

    FG0J151(); /* verify scroll request*/

    FG0JS11(); /* check modifiable fields*/

  end

   /* ------------------------------------------------------------*/
   /* If request to transfer to style group forecast*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* request to transfer(pf14)*/
    if (FFWREC.FFEWSNBR == 0)
      converseLib.validationFailed(44);
      FFWREC.XXXMODID = "150";
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify if data loaded, if so check modifiable fields*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15 /* request to save data(pf15)*/
   || converseVar.eventKey is pf16 /* request to explode (pf16)*/
   || converseVar.eventKey is pf18) /* request to display history(pf18)*/

    if (FG0JW01.FG0JW1PM == 0) /* no data loaded*/

      converseLib.validationFailed(18);
      FFWREC.XXXMODID = "150";

    else

      FG0JS11(); /* check modifiable fields*/

      if (converseVar.eventKey is pf16)

        if (FG0JM001.FFCDMIND == " ")
          converseLib.validationFailed(246);
          FFWREC.XXXMODID = "150";
        else
          if (FFWREC.FFWMODSW == "Y"
           || FFWREC.FFEWSNBR == 0)
            converseLib.validationFailed(296);
            FFWREC.XXXMODID = "150";
          end
        end
      else

         /* ( PF18 )*/

        FG0JS29(); /* Validate year/history option*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify style nbr percent total*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15 /* request to save data(pf15)*/
   || converseVar.eventKey is pf16 /* request to explode(pf16)*/
   || converseVar.eventKey is pf18) /* request to display history(pf18)*/

    if (FG0JW07.FG0JWSPT != 0
     && FG0JW07.FG0JWSPT != 100)
      converseLib.validationFailed(159);
      FFWREC.XXXMODID = "150";
      set FG0JM001.FG0JMSPT[1] cursor;
      set FG0JM001.FG0JMSTP[FG0JWCTX] bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate entry fields, selection requests, history options,*/
   /* key data, and re-calculate percents*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)

    FG0J152(); /* validate entry fields*/

    if (FG0JW01.FG0JWCFL == "Y"
     && converseVar.validationMsgNum == 0)

      FG0J153(); /* upd temp storage qtys and pcts*/

      if (FG0JW00.FG0JWDCF == "Y") /* data changed*/
        FG0J154(); /* re-calculate/load qtys/percentages*/
      end
    end

    /* ------------------------------------------------------*/
    /* If key data changed check modifiable fields*/
    /* ------------------------------------------------------*/

    FG0JW00.FG0JWWBD = FFWREC.FFABEGMO;
    FG0JW00.FG0JWWED = FFWREC.FFAENDMO;

    if (FG0JM001.YPGCD != FFWREC.YPGCD        /* product type group*/
     || FG0JM001.YPGCD == " "                 /* product type group*/
     || FG0JM001.XPCCD != FFWREC.XPCCD        /* product category*/
     || FG0JM001.XPCCD == " "                 /* product category*/
     || FG0JM001.SYBSTGNB != FFWREC.SYBSTGNB  /* style nbr*/
     || FG0JM001.SYBSTGNB == " "              /* style nbr*/
     || FG0JM001.FG0JMBRG != FG0JW00.FG0JWBYM /* beg range changed*/
     || FG0JM001.FG0JMBRG == 0                /* beg range changed*/
     || FG0JM001.FG0JMERG != FG0JW00.FG0JWEYM /* end range changed*/
     || FG0JM001.FG0JMERG == 0)               /* end range changed*/

      if (FG0JW01.FG0JWCFL == "Y")
        FG0J155(); /* key chg: ck modifiable fields*/
      end

      if (converseVar.validationMsgNum == 0)
        FG0JW00.FG0JWSWR = "Y"; /* request data request*/
        FG0JW00.FG0JWKYC = "Y"; /* key change*/
        if (FG0JW00.FG0JWFCF != "Y")
          FFWREC.FFEWSNBR = 0;
        end
      end

    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end


end // end FG0J150

// verify scroll request
Function FG0J151()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FG0JW01.XXXTSPAG < 2)       /* and no previous pages*/

    FFWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward request*/
    if (FG0JW01.XXXTSPAG >= FG0JW01.FG0JW1PM /* and no more pages*/
     && FG0JW01.XXXTSPAG >= FG0JW01.FG0JW2PM) /* and no more pages*/

      FFWREC.XXXMODID = "151"; /* Module identification*/
      converseLib.validationFailed(7); /* No more pages to display*/

    end
  end


end // end FG0J151

// validate modifiable data
Function FG0J152()
   /* ------------------------------------------------------------*/
   /* Init flags*/
   /* ------------------------------------------------------------*/

  FG0JW00.FG0JWERF = "N"; /* error flag*/
  FG0JW00.FG0JWSPF = "N"; /* error flag*/

   /* ------------------------------------------------------------*/
   /* Validate style nbr fcst qtys*/
   /* ------------------------------------------------------------*/

  FG0JW00.FG0JWIDX = FG0JW02.FG0JWNLD; /* nbr of lines*/

  while (FG0JW00.FG0JWIDX >= 1) /* process temp storage*/

    if (FG0JM001.FG0JMQTY[FG0JWIDX] != FG0JW02.FG0JWQTY[FG0JWIDX])
      FFXREC.FFXCHAR = FG0JM001.FG0JMQTY[FG0JWIDX];
      XSFFS11(); /* convert fcst to units*/
      if (FFXREC.FFXRTNCD != "0")
        converseLib.validationFailed(10); /* Indicate missing or invalid*/
        FFWREC.XXXMODID = "152";
        set FG0JM001.FG0JMQTY[FG0JWIDX] cursor, bold; /* Highlight*/
      else
        if (FFXREC.FFXNUMB < 0)
          converseLib.validationFailed(10); /* Indicate missing or invalid*/
          FFWREC.XXXMODID = "152";
          set FG0JM001.FG0JMQTY[FG0JWIDX] cursor, bold; /* Highlight*/
        end

        XSFFS10(); /* ; translate units to thousands*/
        FG0JM001.FG0JMQTY[FG0JWIDX] = FFXREC.FFXCHAR;
      end
    end

    FG0JW00.FG0JWIDX = FG0JW00.FG0JWIDX - 1;

  end

   /* ------------------------------------------------------------*/
   /* Validate the global change total qty field*/
   /* ------------------------------------------------------------*/

  if (FG0JM001.FG0JMCTQ != " ")
    FFXREC.FFXCHAR = FG0JM001.FG0JMCTQ;
    XSFFS11(); /* global change total to units*/
    if (FFXREC.FFXRTNCD != "0")
      converseLib.validationFailed(10); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "152";
      set FG0JM001.FG0JMCTQ cursor, bold; /* Highlight*/
    else
      if (FFXREC.FFXNUMB < 0)
        converseLib.validationFailed(10); /* cannot be negative number*/
        FFWREC.XXXMODID = "152";
        set FG0JM001.FG0JMCTQ cursor, bold; /* Highlight*/
      else
        if (FG0JW07.FG0JWUQT == 0)
          converseLib.validationFailed(234); /* total must exist to modify*/
          FFWREC.XXXMODID = "152";
          set FG0JM001.FG0JMCTQ cursor, bold; /* Highlight*/
        end
      end

      XSFFS10();
      FG0JM001.FG0JMCTQ = FFXREC.FFXCHAR;
    end
  end

   /* ------------------------------------------------------------*/
   /* validate the global change percent field*/
   /* ------------------------------------------------------------*/

  if (FG0JM001.FG0JMPCT != 0)
    if (FG0JM001.FG0JMPCT > 100)
      converseLib.validationFailed(10);
      FFWREC.XXXMODID = "152";
      set FG0JM001.FG0JMPCT cursor, bold;
    else
      if (FG0JW07.FG0JWUQT == 0)
        converseLib.validationFailed(234); /* total must exist to modify*/
        FFWREC.XXXMODID = "152";
        set FG0JM001.FG0JMPCT cursor, bold; /* Highlight*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate style group code*/
   /* ------------------------------------------------------------*/

  set FF3REC empty;
  FF3REC.SYBSTGNB = FG0JM001.SYBSTGNB;
  FF3REC.YSMXDV = "10";
  FF3REC.YPGCD = FG0JM001.YPGCD;
  FF3REC.XLCCD = "*";
  TA1REC.TA1PGMNM = "FG0J152";

  XSFFS22();

  if (SQLCA.VAGen_SQLCODE != 0)
    converseLib.validationFailed(118);
    FFWREC.XXXMODID = "152";
    set FG0JM001.SYBSTGNB cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate product category code*/
   /* ------------------------------------------------------------*/

  XPCREC.XPCCD = FG0JM001.XPCCD;
  if (XPCREC.XPCKEY in XPCTBL.XPCKEY
   && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    FG0JM001.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
  else
    FG0JM001.XPCABRV = " ";
    converseLib.validationFailed(118);
    FFWREC.XXXMODID = "152";
    set FG0JM001.XPCCD cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* validate product type group code*/
   /* ------------------------------------------------------------*/

  if (FG0JM001.YPGCD in YPGTBL.YPGCD
   && YPGTBL.XXXSTAT[sysVar.arrayIndex] == "A"
   && YPGTBL.YPGFFFL[sysVar.arrayIndex] == "Y")
    FG0JM001.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
  else
    FG0JM001.YPGABRV = " ";
    converseLib.validationFailed(118);
    FFWREC.XXXMODID = "152";
    set FG0JM001.YPGCD cursor, bold;
  end

   /* ---------------------------------------------------------*/
   /* if key data change check map data against ff3rec*/
   /* ---------------------------------------------------------*/

  if (converseVar.validationMsgNum != 118)
    if (FF3REC.XPCCD != FG0JM001.XPCCD
     || FF3REC.YPGCD != FG0JM001.YPGCD)
      converseLib.validationFailed(203);
      FFWREC.XXXMODID = "152";
      set FG0JM001.SYBSTGNB bold;
      set FG0JM001.XPCCD bold;
      set FG0JM001.YPGCD cursor, bold;
    else

      FG0JS27(); /* select dfcast.xffxrf01*/

      if (SQLCA.VAGen_SQLCODE == 0)
        FFWREC.XPLCD = FF2REC.XPLCD;
      else
        FFWREC.XPLCD = " ";
        converseLib.validationFailed(203);
        FFWREC.XXXMODID = "152";
        set FG0JM001.XPCCD bold;
        set FG0JM001.YPGCD cursor, bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate year/history option field*/
   /* ------------------------------------------------------------*/

  FG0JS29();

   /* ------------------------------------------------------------*/
   /* validate forecast target qty*/
   /* ------------------------------------------------------------*/

  if (FG0JM001.FG0JMSGT != FG0JW01.FG0JWSGT)
    FFXREC.FFXCHAR = FG0JM001.FG0JMSGT;
    XSFFS11(); /* forecast target qty*/
    if (FFXREC.FFXRTNCD != "0")
      converseLib.validationFailed(10); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "152";
      set FG0JM001.FG0JMSGT cursor, bold; /* Highlight*/
    else
      if (FFXREC.FFXNUMB < 0)
        converseLib.validationFailed(10); /* Indicate missing or invalid*/
        FFWREC.XXXMODID = "152";
        set FG0JM001.FG0JMSGT cursor, bold; /* Highlight*/
      end

      FG0JW00.FG0JWSUT = FFXREC.FFXNUMB;
      XSFFS10();
      FG0JM001.FG0JMSGT = FFXREC.FFXCHAR;
      FG0JW00.FG0JWSTG = FFXREC.FFXCHAR;
    end
  end

   /* ------------------------------------------------------------*/
   /* validate end yymm range and begin yymm range*/
   /* ------------------------------------------------------------*/

  set FFZREC empty;

  FFZREC.FFZMONTH = 6;
  FFZREC.FFZBYYMM = FG0JM001.FG0JMBRG;
  FFZREC.FFZEYYMM = FG0JM001.FG0JMERG;

  XSFFS35(); /* edit date range*/

  if (FFZREC.FFZENDRC == "1")
    set FG0JM001.FG0JMERG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "152";
  else
    if (FFZREC.FFZENDRC == "2")
      set FG0JM001.FG0JMERG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "152";
    else
      if (FFZREC.FFZENDRC == "3")
        set FG0JM001.FG0JMERG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "152";
      end
    end
  end

  if (FFZREC.FFZBEGRC == "1")
    set FG0JM001.FG0JMBRG cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing or invalid*/
    FFWREC.XXXMODID = "152";
  else
    if (FFZREC.FFZBEGRC == "2")
      set FG0JM001.FG0JMBRG cursor, bold; /* Highlight*/
      converseLib.validationFailed(17); /* Indicate missing or invalid*/
      FFWREC.XXXMODID = "152";
    else
      if (FFZREC.FFZBEGRC == "3")
        set FG0JM001.FG0JMBRG cursor, bold; /* Highlight*/
        converseLib.validationFailed(151); /* out of range*/
        FFWREC.XXXMODID = "152";
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* check mutually exclusive entry fields*/
   /* ------------------------------------------------------------*/

  FG0JW00.FG0JWIDX = FG0JW02.FG0JWNLD; /* nbr of lines*/

  while (FG0JW00.FG0JWIDX >= 1) /* process temp storage*/

    if (FG0JM001.FG0JMCPT[FG0JWIDX] != 0)
      if (FG0JM001.FG0JMSPT[FG0JWIDX] != FG0JW02.FG0JWSPT[FG0JWIDX]
       || FG0JM001.FG0JMQTY[FG0JWIDX] != FG0JW02.FG0JWQTY[FG0JWIDX]
       || FG0JM001.FG0JMCTQ != " "
       || FG0JM001.FG0JMPCT != 0)
        FG0JW00.FG0JWERF = "Y";
      else
        FG0JW00.FG0JWPIX = FG0JW00.FG0JWIDX - 1;
        while (FG0JW00.FG0JWPIX >= 1)
          if (FG0JM001.FG0JMSPT[FG0JWPIX] != FG0JW02.FG0JWSPT[FG0JWPIX]
           || FG0JM001.FG0JMQTY[FG0JWPIX] != FG0JW02.FG0JWQTY[FG0JWPIX])
            FG0JW00.FG0JWERF = "Y";
          end
          FG0JW00.FG0JWPIX = FG0JW00.FG0JWPIX - 1;
        end
      end
    end

    if (FG0JM001.FG0JMSPT[FG0JWIDX] != FG0JW02.FG0JWSPT[FG0JWIDX])
      FG0JW00.FG0JWSPF = "Y";
      if (FG0JM001.FG0JMCPT[FG0JWIDX] != 0
       || FG0JM001.FG0JMQTY[FG0JWIDX] != FG0JW02.FG0JWQTY[FG0JWIDX]
       || FG0JM001.FG0JMCTQ != " "
       || FG0JM001.FG0JMPCT != 0)
        FG0JW00.FG0JWERF = "Y";
      else
        FG0JW00.FG0JWPIX = FG0JW00.FG0JWIDX - 1;
        while (FG0JW00.FG0JWPIX >= 1)
          if (FG0JM001.FG0JMCPT[FG0JWPIX] != 0
           || FG0JM001.FG0JMQTY[FG0JWPIX] != FG0JW02.FG0JWQTY[FG0JWPIX])
            FG0JW00.FG0JWERF = "Y";
          end
          FG0JW00.FG0JWPIX = FG0JW00.FG0JWPIX - 1;
        end
      end
    end

    if (FG0JM001.FG0JMQTY[FG0JWIDX] != FG0JW02.FG0JWQTY[FG0JWIDX])
      if (FG0JM001.FG0JMCPT[FG0JWIDX] != 0
       || FG0JM001.FG0JMSPT[FG0JWIDX] != FG0JW02.FG0JWSPT[FG0JWIDX]
       || FG0JM001.FG0JMCTQ != " "
       || FG0JM001.FG0JMPCT != 0)
        FG0JW00.FG0JWERF = "Y";
      else
        FG0JW00.FG0JWPIX = FG0JW00.FG0JWIDX - 1;
        while (FG0JW00.FG0JWPIX >= 1)
          if (FG0JM001.FG0JMCPT[FG0JWPIX] != 0
           || FG0JM001.FG0JMSPT[FG0JWPIX] != FG0JW02.FG0JWSPT[FG0JWPIX])
            FG0JW00.FG0JWERF = "Y";
          end
          FG0JW00.FG0JWPIX = FG0JW00.FG0JWPIX - 1;
        end
      end
    end

    FG0JW00.FG0JWIDX = FG0JW00.FG0JWIDX - 1; /* decrement table index*/

  end

  if (FG0JM001.FG0JMCTQ != " "
   && FG0JM001.FG0JMPCT != 0)
    FG0JW00.FG0JWERF = "Y";
  end

   /* ------------------------------------------------------------*/
   /* if entries were made in more than one column highlight all*/
   /* fields that have changed and display error message*/
   /* ------------------------------------------------------------*/

  if (FG0JW00.FG0JWERF == "Y")

    FG0JW00.FG0JWIDX = FG0JW02.FG0JWNLD; /* nbr of lines*/

    while (FG0JW00.FG0JWIDX >= 1) /* process temp storage*/

      if (FG0JM001.FG0JMCPT[FG0JWIDX] != 0)
        set FG0JM001.FG0JMCPT[FG0JWIDX] cursor, bold;
      end

      if (FG0JM001.FG0JMSPT[FG0JWIDX] != FG0JW02.FG0JWSPT[FG0JWIDX])
        set FG0JM001.FG0JMSPT[FG0JWIDX] cursor, bold;
      end

      if (FG0JM001.FG0JMQTY[FG0JWIDX] != FG0JW02.FG0JWQTY[FG0JWIDX])
        set FG0JM001.FG0JMQTY[FG0JWIDX] cursor, bold;
      end

      FG0JW00.FG0JWIDX = FG0JW00.FG0JWIDX - 1;

    end

    if (FG0JM001.FG0JMCTQ != " ")
      set FG0JM001.FG0JMCTQ cursor, bold;
    end

    if (FG0JM001.FG0JMPCT != 0)
      set FG0JM001.FG0JMPCT cursor, bold;
    end

    converseLib.validationFailed(233);
    FFWREC.XXXMODID = "152";

  end

   /* ------------------------------------------------------------*/
   /* validate forecast target qty/fcst total qty for line pct*/
   /* ------------------------------------------------------------*/

  if (FG0JW00.FG0JWSPF == "Y"
   && FG0JW07.FG0JWUQT == 0)
    if (FG0JM001.FG0JMSGT == " ")
      converseLib.validationFailed(8); /* required field*/
      FFWREC.XXXMODID = "152";
      set FG0JM001.FG0JMSGT cursor, bold; /* Highlight*/
    end
  end

   /* ------------------------------------------------------------*/
   /* verify style percent total*/
   /* ------------------------------------------------------------*/

  if (FG0JW07.FG0JWUQT != 0
   && FG0JW07.FG0JWSPT != 100)

    /* ------------------------------------------------------------*/
     /* if category percent is not equal to 100, and an entry*/
     /* was made in another column display error*/
    /* ------------------------------------------------------------*/

    if (FG0JW00.FG0JWSPF != "Y")
      FG0JW00.FG0JWIDX = FG0JW02.FG0JWNLD; /* nbr of lines*/
      while (FG0JW00.FG0JWIDX >= 1) /* process temp storage*/

        if (FG0JM001.FG0JMCPT[FG0JWIDX] != 0)
          set FG0JM001.FG0JMCPT[FG0JWIDX] bold;
        end
        if (FG0JM001.FG0JMSPT[FG0JWIDX] != FG0JW02.FG0JWSPT[FG0JWIDX])
          set FG0JM001.FG0JMSPT[FG0JWIDX] bold;
        end
        if (FG0JM001.FG0JMQTY[FG0JWIDX] != FG0JW02.FG0JWQTY[FG0JWIDX])
          set FG0JM001.FG0JMQTY[FG0JWIDX] bold;
        end
        FG0JW00.FG0JWIDX = FG0JW00.FG0JWIDX - 1;
      end

      if (FG0JM001.FG0JMCTQ != " ")
        set FG0JM001.FG0JMCTQ bold;
      end
      if (FG0JM001.FG0JMPCT != 0)
        set FG0JM001.FG0JMPCT bold;
      end

      set FG0JM001.FG0JMSPT[1] cursor;
      set FG0JM001.FG0JMSTP[FG0JWCTX] bold;
      converseLib.validationFailed(159);
      FFWREC.XXXMODID = "152";
    end

    /* ---------------------------------------------------------*/
     /* style percent was change but will not be recalculated*/
     /* because of other errors, must redisplay error message*/
    /* ---------------------------------------------------------*/

    if (FG0JW00.FG0JWSPF == "Y"
     && converseVar.validationMsgNum != 0)

      set FG0JM001.FG0JMSPT[1] cursor;
      set FG0JM001.FG0JMSTP[FG0JWCTX] bold;
      converseLib.validationFailed(159);
      FFWREC.XXXMODID = "152";
    end
  end


end // end FG0J152

// upd temp storage qtys/pcts
Function FG0J153()
   /* ------------------------------------------------------------*/
   /* Init qty change flag*/
   /* ------------------------------------------------------------*/

  FG0JW00.FG0JWQTF = "N"; /* qty change flag*/

   /* ------------------------------------------------------------*/
   /* Save current temporary storage page nbr*/
   /* ------------------------------------------------------------*/

  FG0JW00.FG0JWSTP = FG0JW01.XXXTSPAG;

   /* ------------------------------------------------------------*/
   /* Forecast target qty*/
   /* ------------------------------------------------------------*/

  if (FG0JM001.FG0JMSGT != FG0JW01.FG0JWSGT)

    FFXREC.FFXCHAR = FG0JM001.FG0JMSGT;
    XSFFS11();
    FG0JW01.FG0JWUST = FFXREC.FFXNUMB;
    XSFFS10();
    FG0JW01.FG0JWSGT = FFXREC.FFXCHAR;

    FG0JW00.FG0JWDCF = "Y";

  end

   /* ------------------------------------------------------------*/
   /* Global change percent entered*/
   /* ------------------------------------------------------------*/

  if (FG0JM001.FG0JMPCT != 0)

    FG0JW00.FG0JWIDX = 1; /* process all pages in working storage*/
    while (FG0JW00.FG0JWIDX <= FG0JW01.FG0JW1PM)

      FG0JW00.FG0JWDMF = "N"; /* data modified flag*/
      FG0JW01.XXXTSPAG = FG0JW00.FG0JWIDX;

      FG0JS09(); /* read temporary storage*/

      FG0JW00.FG0JWPIX = FG0JW02.FG0JWNLD;
      while (FG0JW00.FG0JWPIX >= 1)
        if (FG0JW02.FG0JWUQT[FG0JWPIX] > 0)

           /* calculate the adjustment qty*/

          FG0JW00.FG0JWNM1 = FG0JM001.FG0JMPCT *           FG0JW02.FG0JWUQT[FG0JWPIX];
          FG0JW00.FG0JWNM1 = FG0JW00.FG0JWNM1 / 100; /* adjustment qty*/

           /* calculate the new forecast qty*/

          FFXREC.FFXNUMB = FG0JW02.FG0JWUQT[FG0JWPIX] + FG0JW00.FG0JWNM1;
          FG0JW02.FG0JWUQT[FG0JWPIX] = FFXREC.FFXNUMB;
          XSFFS10();
          FG0JW02.FG0JWQTY[FG0JWPIX] = FFXREC.FFXCHAR;

           /* calculate the forecast total qty*/

          FG0JW07.FG0JWUQT = FG0JW07.FG0JWUQT + FG0JW00.FG0JWNM1;

          FG0JW00.FG0JWDMF = "Y";

        end

        FG0JW00.FG0JWPIX = FG0JW00.FG0JWPIX - 1;

      end

      if (FG0JW00.FG0JWDMF == "Y")
        FG0JS10(); /* update temporary storage*/
        FG0JW00.FG0JWDCF = "Y";
        FG0JW00.FG0JWQTF = "Y";
      end

      FG0JW00.FG0JWIDX = FG0JW00.FG0JWIDX + 1;

    end

    return;

  end

   /* ------------------------------------------------------------*/
   /* global change total qty entered*/
   /* ------------------------------------------------------------*/

  if (FG0JM001.FG0JMCTQ != " ")

     /* load new forecast total qty*/

    FFXREC.FFXCHAR = FG0JM001.FG0JMCTQ;
    XSFFS11();
    FG0JW07.FG0JWUQT = FFXREC.FFXNUMB; /* tot fcst qty*/
    XSFFS10();
    FG0JW07.FG0JWQTY = FFXREC.FFXCHAR;

    FG0JW00.FG0JWIDX = 1; /* process all pages in working storage*/
    while (FG0JW00.FG0JWIDX <= FG0JW01.FG0JW1PM)

      FG0JW00.FG0JWDMF = "N"; /* data modified flag*/
      FG0JW01.XXXTSPAG = FG0JW00.FG0JWIDX;

      FG0JS09(); /* read temporary storage*/

      FG0JW00.FG0JWPIX = FG0JW02.FG0JWNLD;
      while (FG0JW00.FG0JWPIX >= 1)
        if (FG0JW02.FG0JWSPT[FG0JWPIX] > 0)

           /* calculate new forecast qtys*/

          FG0JW00.FG0JWNM1 = FG0JW02.FG0JWSPT[FG0JWPIX] * FG0JW07.FG0JWUQT;
          FG0JW00.FG0JWNM1 = FG0JW00.FG0JWNM1 / 100;

          FG0JW02.FG0JWUQT[FG0JWPIX] = FG0JW00.FG0JWNM1;
          FFXREC.FFXNUMB = FG0JW00.FG0JWNM1;
          XSFFS10();
          FG0JW02.FG0JWQTY[FG0JWPIX] = FFXREC.FFXCHAR;

          FG0JW00.FG0JWDMF = "Y";

        end

        FG0JW00.FG0JWPIX = FG0JW00.FG0JWPIX - 1;

      end

      if (FG0JW00.FG0JWDMF == "Y")
        FG0JS10(); /* update temporary storage*/
        FG0JW00.FG0JWDCF = "Y";
        FG0JW00.FG0JWQTF = "Y";
      end

      FG0JW00.FG0JWIDX = FG0JW00.FG0JWIDX + 1;

    end

    return;

  end

   /* ------------------------------------------------------------*/
   /* process product style grp qty/percentages*/
   /* ------------------------------------------------------------*/

  FG0JW00.FG0JWPIX = FG0JW02.FG0JWNLD;
  while (FG0JW00.FG0JWPIX >= 1)

    /* ------------------------------------------------------------*/
     /* change sales forecast quantity if changed*/
    /* ------------------------------------------------------------*/

    if (FG0JM001.FG0JMQTY[FG0JWPIX] != FG0JW02.FG0JWQTY[FG0JWPIX])

       /* calculate the difference between the new and old forecast*/
       /* qtys and adjust the forecast total qty using the difference*/

      FFXREC.FFXCHAR = FG0JM001.FG0JMQTY[FG0JWPIX];
      XSFFS11();
      FG0JW00.FG0JWNM1 = FFXREC.FFXNUMB - FG0JW02.FG0JWUQT[FG0JWPIX];
      FG0JW07.FG0JWUQT = FG0JW07.FG0JWUQT + FG0JW00.FG0JWNM1;

       /* load the new forecast qty*/

      FG0JW02.FG0JWUQT[FG0JWPIX] = FFXREC.FFXNUMB;
      XSFFS10();
      FG0JW02.FG0JWQTY[FG0JWPIX] = FFXREC.FFXCHAR;

      FG0JW00.FG0JWDCF = "Y";
      FG0JW00.FG0JWQTF = "Y";

    end

    /* ------------------------------------------------------------*/
     /* calculate style percent if changed*/
    /* ------------------------------------------------------------*/

    if (FG0JM001.FG0JMSPT[FG0JWPIX] != FG0JW02.FG0JWSPT[FG0JWPIX])

       /* load/calculate style percent*/

      FG0JW00.FG0JWPC1 = FG0JM001.FG0JMSPT[FG0JWPIX];
      FG0JW00.FG0JWPC1 = FG0JW00.FG0JWPC1 - FG0JW02.FG0JWSPT[FG0JWPIX];
      FG0JW07.FG0JWSPT = FG0JW07.FG0JWSPT + FG0JW00.FG0JWPC1;
      FG0JW02.FG0JWSPT[FG0JWPIX] = FG0JM001.FG0JMSPT[FG0JWPIX];

       /* calculate the new forecast qty*/

      if (FG0JW07.FG0JWUQT == 0)
        FG0JW00.FG0JWNM1 = FG0JW02.FG0JWSPT[FG0JWPIX] * FG0JW01.FG0JWUST;
        FG0JW00.FG0JWNM1 = FG0JW00.FG0JWNM1 / 100; /* new fcst qty*/
        FG0JW07.FG0JWUQT = FG0JW01.FG0JWUST;
      else
        FG0JW00.FG0JWNM1 = FG0JW02.FG0JWSPT[FG0JWPIX] * FG0JW07.FG0JWUQT;
        FG0JW00.FG0JWNM1 = FG0JW00.FG0JWNM1 / 100; /* new fcst qty*/
      end

       /* load new forecast qtys*/

      FG0JW02.FG0JWUQT[FG0JWPIX] = FG0JW00.FG0JWNM1; /* fcst qty*/
      FFXREC.FFXNUMB = FG0JW00.FG0JWNM1;
      XSFFS10();
      FG0JW02.FG0JWQTY[FG0JWPIX] = FFXREC.FFXCHAR;

      FG0JW00.FG0JWDCF = "Y";

    end

    /* ------------------------------------------------------------*/
     /* calculate change percent if entered*/
    /* ------------------------------------------------------------*/

    if (FG0JM001.FG0JMCPT[FG0JWPIX] != 0)

      FG0JW00.FG0JWNM1 = FG0JW02.FG0JWUQT[FG0JWPIX]; /* fcst qty*/

       /* calculate the adjustment qty*/

      FG0JW00.FG0JWNM2 = FG0JM001.FG0JMCPT[FG0JWPIX] * FG0JW00.FG0JWNM1;
      FG0JW00.FG0JWNM2 = FG0JW00.FG0JWNM2 / 100; /* adjustment qty*/

       /* calculate the new forecast qty*/

      FG0JW02.FG0JWUQT[FG0JWPIX] = FG0JW00.FG0JWNM1 + FG0JW00.FG0JWNM2;
      FFXREC.FFXNUMB = FG0JW00.FG0JWNM1 + FG0JW00.FG0JWNM2;
      XSFFS10();
      FG0JW02.FG0JWQTY[FG0JWPIX] = FFXREC.FFXCHAR;

       /* calculate the new forecast total qty*/

      FG0JW07.FG0JWUQT = FG0JW07.FG0JWUQT + FG0JW00.FG0JWNM2;

      FG0JW00.FG0JWDCF = "Y";
      FG0JW00.FG0JWQTF = "Y";

    end

    FG0JW00.FG0JWPIX = FG0JW00.FG0JWPIX - 1; /* line index*/

    if (FG0JW00.FG0JWPIX == 0
     && FG0JW00.FG0JWDCF == "Y")
      FG0JS10(); /* update temporary storage*/
    end
  end


end // end FG0J153

// re-calculate style percents
Function FG0J154()

   /* ----------------------------------------------------------*/
   /* if qty changed re-calculate product category fcst percents*/
   /* ----------------------------------------------------------*/

  if (FG0JW00.FG0JWQTF == "Y")
    FG0JW00.FG0JWIDX = 1; /* init nbr of pages index*/
    while (FG0JW00.FG0JWIDX <= FG0JW01.FG0JW1PM)
      FG0JW04.XXXTSPAG = FG0JW00.FG0JWIDX; /* process temp storage*/
      FG0JS09(); /* read temp storage*/
      FG0JW00.FG0JWPIX = FG0JW02.FG0JWNLD;
      while (FG0JW00.FG0JWPIX >= 1)

        if (FG0JW02.FG0JWUQT[FG0JWPIX] != 0)
          FG0JW00.FG0JWNM1 = FG0JW02.FG0JWUQT[FG0JWPIX] * 100;
          FG0JW02.FG0JWSPT[FG0JWPIX] = mathLib.round(FG0JW00.FG0JWNM1 / FG0JW07.FG0JWUQT, -mathLib.decimals(FG0JW02.FG0JWSPT[FG0JWPIX]));
        else
          FG0JW02.FG0JWSPT[FG0JWPIX] = 0;
        end

        FG0JW00.FG0JWPIX = FG0JW00.FG0JWPIX - 1; /* decrement line index*/

      end

      FG0JS10(); /* update temporary storage*/

      FG0JW00.FG0JWIDX = FG0JW00.FG0JWIDX + 1; /* increment page index*/

    end
    if (FG0JW07.FG0JWUQT != 0)
      FG0JW07.FG0JWSPT = 100; /* default percent total to 100*/
    else
      FG0JW07.FG0JWSPT = 0; /* default percent total to 0*/
    end
  end

   /* ------------------------------------------------------------*/
   /* load total forecast qty, and total style grp percent*/
   /* ------------------------------------------------------------*/

   /* translate total forecast qty*/

  FFXNUMB = FG0JW07.FG0JWUQT;
  XSFFS10();
  FG0JW07.FG0JWQTY = FFXCHAR;

   /* ------------------------------------------------------------*/
   /* re-calculate variance qty : total forecast qty - target qty*/
   /* ------------------------------------------------------------*/

  FG0JW01.FG0JWUVQ = FG0JW07.FG0JWUQT - FG0JW01.FG0JWUST;

  FFXREC.FFXNUMB = FG0JW01.FG0JWUVQ;
  XSFFS10();
  FG0JW01.FG0JWVQT = FFXREC.FFXCHAR;

   /* ------------------------------------------------------------*/
   /* re-calculate variance percent :*/
     /* (variance qty * 100) / target qty*/
   /* ------------------------------------------------------------*/

  if (FG0JW01.FG0JWUST != 0)
    FG0JW00.FG0JWNM1 = FG0JW01.FG0JWUVQ * 100;
    FG0JW01.FG0JWVPT = FG0JW00.FG0JWNM1 / FG0JW01.FG0JWUST;
  else
    FG0JW01.FG0JWVPT = 0;
  end

   /* ------------------------------------------------------------*/
   /* obtain current data*/
   /* ------------------------------------------------------------*/

  FG0JW01.XXXTSPAG = FG0JW00.FG0JWSTP;

  FG0JS09(); /* read temporary storage*/

   /* ------------------------------------------------------------*/
   /* if style percent is not equal to 0 or 100 display error*/
   /* data and message*/
   /* ------------------------------------------------------------*/

  FG0JM001.FG0JMSGT = FG0JW01.FG0JWSGT; /* forecast target qty*/
  FG0JM001.FG0JMVQT = FG0JW01.FG0JWVQT; /* variance qty*/
  FG0JM001.FG0JMVPT = FG0JW01.FG0JWVPT; /* variance percent*/

  FG0JW00.FG0JWPIX = 1;
  while (FG0JW00.FG0JWPIX <= FG0JW02.FG0JWNLD) /* process temp storage*/

    FG0JM001.FG0JMQTY[FG0JWPIX] = FG0JW02.FG0JWQTY[FG0JWPIX];
    FG0JM001.FG0JMSPT[FG0JWPIX] = FG0JW02.FG0JWSPT[FG0JWPIX];

    FG0JW00.FG0JWPIX = FG0JW00.FG0JWPIX + 1; /* increment load index*/

  end

  FG0JM001.FG0JMSTF[FG0JWCTX] = FG0JW07.FG0JWQTY; /* new fcst qty*/
  FG0JM001.FG0JMSTP[FG0JWCTX] = FG0JW07.FG0JWSPT; /* new cat pct*/

   /* -----------------------------------------------------------*/
   /* if style percent fields were changed and total does not*/
   /* equal 0 or 100 display error message*/
   /* ------------------------------------------------------------*/

  if (FG0JW07.FG0JWSPT != 0
   && FG0JW07.FG0JWSPT != 100)

    set FG0JM001.FG0JMSTP[FG0JWCTX] bold;
    set FG0JM001.FG0JMSPT[1] cursor;
    converseLib.validationFailed(159);
    FFWREC.XXXMODID = "154";

  end


end // end FG0J154

// ck key: modifiable fields
Function FG0J155()

   /* -----------------------------------------------------*/
   /* verify modifiable fields on current page*/
   /* -----------------------------------------------------*/

  FG0JW00.FG0JWPIX = FG0JW02.FG0JWNLD; /* nbr of lines loaded*/

  while (FG0JW00.FG0JWPIX >= 1) /* process temp storage*/

    if (FG0JM001.FG0JMCPT[FG0JWPIX] != 0)
      set FG0JM001.FG0JMCPT[FG0JWPIX] cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "155";
    end
    if (FG0JM001.FG0JMSPT[FG0JWPIX] != FG0JW02.FG0JWSPC[FG0JWPIX])
      set FG0JM001.FG0JMSPT[FG0JWPIX] cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "155";
    end
    if (FG0JW02.FG0JWUQT[FG0JWPIX] != FG0JW02.FG0JWSQT[FG0JWPIX])
      set FG0JM001.FG0JMQTY[FG0JWPIX] cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "155";
    end

    FG0JW00.FG0JWPIX = FG0JW00.FG0JWPIX - 1; /* decrement table index*/

  end

  if (FG0JM001.FG0JMCTQ != " ")
    set FG0JM001.FG0JMCTQ cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "155";
  end

  if (FG0JM001.FG0JMPCT != 0)
    set FG0JM001.FG0JMPCT cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "155";
  end

  if (FG0JW01.FG0JWUST != FG0JW01.FG0JWSST)
    set FG0JM001.FG0JMSGT cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "155";
  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

   /* ------------------------------------------------------------*/
   /* if nothing was changed on the current page verify*/
   /* additional pages in temporary storage*/
   /* ------------------------------------------------------------*/

  FG0JW00.FG0JWSTP = FG0JW01.XXXTSPAG; /* save current page*/

  FG0JW00.FG0JWIDX = 1; /* process all pages in working storage*/
  while (FG0JW00.FG0JWIDX <= FG0JW01.FG0JW1PM)

    FG0JW01.XXXTSPAG = FG0JW00.FG0JWIDX;

    FG0JS09(); /* read temporary storage*/

    /* -----------------------------------------------------*/
     /* verify fcst qty and style percent*/
    /* -----------------------------------------------------*/

    FG0JW00.FG0JWPIX = FG0JW02.FG0JWNLD; /* nbr of lines loaded*/

    while (FG0JW00.FG0JWPIX >= 1) /* process temp storage*/

      if (FG0JW02.FG0JWSPT[FG0JWPIX] != FG0JW02.FG0JWSPC[FG0JWPIX])
        converseLib.validationFailed(238);
        FFWREC.XXXMODID = "155";
      end
      if (FG0JW02.FG0JWUQT[FG0JWPIX] != FG0JW02.FG0JWSQT[FG0JWPIX])
        converseLib.validationFailed(238);
        FFWREC.XXXMODID = "155";
      end

      FG0JW00.FG0JWPIX = FG0JW00.FG0JWPIX - 1; /* decrement table index*/

    end

    FG0JW00.FG0JWIDX = FG0JW00.FG0JWIDX + 1; /* line index*/

  end

  FG0JW01.XXXTSPAG = FG0JW00.FG0JWSTP; /* set to current page*/

  FG0JS09(); /* read temporary storage*/


end // end FG0J155

// Process valid input request
Function FG0J160()
   /* ------------------------------------------------------------*/
   /* Indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/

  FG0JW00.FG0JWSWF = "Y"; /* set format map switch*/

   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA/ffwrec*/
   /* ------------------------------------------------------------*/

  FFWREC.YPGCD = FG0JM001.YPGCD; /* product type group*/
  if (FFWREC.YPGCD in YPGTBL.YPGCD)
    FFWREC.YPGABRV = YPGTBL.YPGABRV[sysVar.arrayIndex];
  end

  FFWREC.XPCCD = FG0JM001.XPCCD; /* product category*/
  XPCREC.XPCCD = FG0JM001.XPCCD; /* product category*/
  if (XPCREC.XPCKEY in XPCTBL.XPCKEY)
    FFWREC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex];
  end

  FFWREC.SYBSTGNB = FG0JM001.SYBSTGNB;

  FFWREC.FFABEGMO = FFZREC.FFZBEGMO;
  FFWREC.FFAENDMO = FFZREC.FFZENDMO;

  FG0JW01.FG0JWYOP = FG0JM001.FG0JMYOP;
  FG0JW01.FG0JWHOP = FG0JM001.FG0JMHOP;

  if (converseVar.eventKey is enter
   && FG0JW00.FG0JWSWR == "Y") /* KEY DATA MODIFIED*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Request to scroll backwards*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* display next season*/
    FG0JW01.XXXTSPAG = FG0JW01.XXXTSPAG - 1;
    return;
  end

   /* ------------------------------------------------------------*/
   /* Request to scroll foward*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8)
    FG0JW01.XXXTSPAG = FG0JW01.XXXTSPAG + 1;
    return;
  end

   /* --------------------------------------------------------*/
   /* Transfer to style group pf14*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* transfer request pf14*/

    COMMAREA.CATOAP = "FG0I"; /* to application*/

    XSFFS01(); /* common exit routine*/

    FG0JW00.FG0JWSWR = "N"; /* request data switch*/
    FG0JW00.FG0JWSWF = "Y"; /* formate screen m001*/

    return;

  end

   /* --------------------------------------------------------*/
   /* Explode request pf16*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is pf16) /* explode color request*/

    FG0J161(); /* explode select color*/

    if (converseVar.validationMsgNum != 0) /* duplicate data*/
      FFWREC.XXXMODID = "160";

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();

      exit stack;
    else

      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit();

      FG0JS01(); /* purge temp storage current m001*/
      FG0JS02(); /* purge temp storage history m001*/
      FG0JS22(); /* purge temp storage m002*/

      COMMAREA.CATOAP = "FG0S"; /* to application*/

      XSFFS01(); /* common exit routine*/

      FG0JW00.FG0JWSWR = "N"; /* request data switch*/
      FG0JW00.FG0JWSWF = "Y"; /* formate screen m001*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* History data requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf18) /* display history data*/

    set FG0JW04 empty; /* init map 002 work record*/

    FG0JW04.FG0JWYO1 = FG0JM001.FG0JMYOP;
    FG0JW04.FG0JWHO1 = FG0JM001.FG0JMHOP;
    FG0JW04.FG0JWSTY = FG0JW01.FG0JWSTY;
    if (FG0JW01.FG0JWSTY > " ")
      FG0JW04.FG0JWSWR = "Y"; /* request data load*/
    end
    FG0JW04.FG0JWSWF = "Y"; /* request format switch*/
    FG0JW00.FG0JWSWD = "2"; /* request fg0jm002 display*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data has been changed and pf15(save) has been selected*/
   /* update database*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf15) /* save requested by user*/

    XX0XS01(); /* Obtain date and time*/

    if (FFWREC.FFEWSNBR == 0)
      FG0J162(); /* obtain next work sheet nbr*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit();
      FFWREC.FFEWSNBR = FF1REC.FF1WSNBR; /* load new wrk sht nbr*/

      FG0J163(); /* format/insert dfcast.vwdgrp01 row*/
      FG0J164(); /* format/insert dfcast.vwline01 row*/
      FG0J165(); /* format/insert dfcast.vwltyp01 row*/
      FG0J166(); /* format/insert dfcast.vwcat001 row*/
      FG0J167(); /* format/insert dfcast.vwsgrp01 row*/
    else
      FG0J168(); /* update dfcast.vwdgrp01 row*/
      FG0J169(); /* update dfcast.vwline01 row*/
      FG0JS13(); /* update dfcast.vwltyp01 row*/
      FG0JS14(); /* update dfcast.vwcat001 row*/
      FG0JS15(); /* update dfcast.vwsgrp01 row*/
    end

    /* --------------------------------------------------------*/
    /* Format/insert dfcast.vwsgrp01 rows for each style group*/
    /* --------------------------------------------------------*/

    FG0JW01.XXXTSPAG = 1; /* process temp storage*/
    while (FG0JW01.XXXTSPAG <= FG0JW01.FG0JW1PM)

      FG0JS09(); /* read temporary storage*/

      FG0JW00.FG0JWIDX = FG0JW02.FG0JWNLD;
      while (FG0JW00.FG0JWIDX >= 1)

        FG0JS06(); /* select dfcast.vwsty001 row*/

        if (SQLCA.VAGen_SQLCODE == 0)
          FG0JS16(); /* update dfcast.vwsty001 row*/
        else
          FG0JS17(); /* format/insert dfcast.vwsty001 rows*/
        end

        FG0JW00.FG0JWIDX = FG0JW00.FG0JWIDX - 1;

      end

      FG0JW01.XXXTSPAG = FG0JW01.XXXTSPAG + 1;

    end

    FFWREC.FFWMODSW = "N"; /* init data modified flag*/
    FG0JW00.FG0JWMOD = "N"; /* init data modified flag*/
    FG0JW00.FG0JWDCF = "N"; /* init data change flag*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();

    FG0JS18(); /* purge any excess fcst work sheets*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();

    FG0JW00.FG0JWSWR = "N"; /* requested data switch*/
    FG0JW01.XXXTSPAG = 1; /* reset tsq page*/

    FFWREC.XXXMSGNO = 33;
    FFWREC.XXXMODID = "160";

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data was loaded, and temporary storage was modified*/
   /* set ffwrec modified switch yes.*/
   /* ------------------------------------------------------------*/

  if (FG0JW01.FG0JWCFL == "Y"
   && FG0JW00.FG0JWDCF == "Y")
    FFWREC.FFWMODSW = "Y";
    FG0JW00.FG0JWMOD = "Y";
  end


end // end FG0J160

// explode color/style
Function FG0J161()
   /* ------------------------------------------------------------*/
   /* explode style/color by month using routine xsffs58*/
   /* ------------------------------------------------------------*/

  set FFYREC empty;

  FFYREC.FFYLEVEL = 2;
  FFYREC.FFEWSNBR = FFWREC.FFEWSNBR; /* old wrk sheet nbr*/
  FFYREC.YPGCD = FFWREC.YPGCD; /* product type group*/
  FFYREC.XPCCD = FFWREC.XPCCD; /* product category code*/
  FFYREC.SYBSTGNB = FFWREC.SYBSTGNB; /* style group number*/
  FFYREC.XXXUSRID = COMMAREA.CAUSERID; /* user id*/
  FFYREC.ZZZSDT = XX0XW01.XX0XWDAT; /* current date*/
  FFYREC.ZZZSTM = XX0XW01.XX0XWTIM; /* current time*/
  TA1REC.TA1PGMNM = "FG0J161";

  XSFFS58();


end // end FG0J161

// obtain next work sheet nbr
Function FG0J162()
   /* ------------------------------------------------------------*/
   /* obtain next work sheet number dfcast.vffctl01*/
   /* ------------------------------------------------------------*/

  set FF1REC empty; /* Clear row storage area*/

  FF1REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FF1REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3660" ("U3", SQLCA, FF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "162"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DFCAST.VFFCTL01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF1REC.FF1GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0J162

// add dfcast.vwdgrp01 row
Function FG0J163()
   /* ------------------------------------------------------------*/
   /* Add dfcast.vwdgrp01 table row*/
   /* ------------------------------------------------------------*/

  set FFEREC empty; /* Clear row storage area*/

  FFEREC.FFEWSNBR = FFWREC.FFEWSNBR; /* new wrk sht nbr*/
  FFEREC.YSMXDV = "10"; /* div code*/
  FFEREC.XCTCD = "USA"; /* country code*/
  FFEREC.FFABEGMO = FFWREC.FFABEGMO; /* begin rangeccyymm*/
  FFEREC.FFAENDMO = FFWREC.FFAENDMO; /* end range ccyymm*/
  FFEREC.FFELINFL = "Y"; /* product line flag*/
  FFEREC.FFETYPFL = "Y"; /* product type flag*/
  FFEREC.FFECATFL = "Y"; /* category flag*/
  FFEREC.FFEGRPFL = "Y"; /* group flag*/
  FFEREC.FFECLRFL = "Y"; /* color flag*/
  FFEREC.FFELMOFL = "N"; /* line month flag*/
  FFEREC.FFECMOFL = "N"; /* category month flag*/
  FFEREC.FFEGMOFL = "N"; /* group month flag*/
  FFEREC.FFESMOFL = "N"; /* color flag*/
  FFEREC.XXXUSRID = COMMAREA.CAUSERID; /* user id*/
  FFEREC.ZZZSDT = XX0XW01.XX0XWDAT; /* current date*/
  FFEREC.ZZZSTM = XX0XW01.XX0XWTIM; /* current time*/
  FFEREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* current date*/
  FFEREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* current time*/

  try
    call "IO3850" ("A ", SQLCA, FFEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* Indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "163"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VWDGRP01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWDGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFEREC.FFEKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0J163

// add dfcast.vwline01 row
Function FG0J164()
   /* ------------------------------------------------------------*/
   /* add dfcast.vwline01 table row*/
   /* ------------------------------------------------------------*/
  set FFGREC empty;

  FFGREC.FFEWSNBR = FFWREC.FFEWSNBR;
  FFGREC.XPLCD = FFWREC.XPLCD;
  FFGREC.FF6SLFCT = FG0JW07.FG0JWUQT;
  FFGREC.FFGYRIND = FG0JW01.FG0JWYOP;
  FFGREC.FFGSDIND = FG0JW01.FG0JWHOP;
  FFGREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFGREC.ZZZSTM = XX0XW01.XX0XWTIM;
  FFGREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFGREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3890" ("A ", SQLCA, FFGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "164"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VWLINE01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFGREC.FFGKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0J164

// add dfcast.vwltyp01 row
Function FG0J165()
   /* ------------------------------------------------------------*/
   /* add dfcast.vwltyp01 table row*/
   /* ------------------------------------------------------------*/
  set FFIREC empty;

  FFIREC.FFEWSNBR = FFWREC.FFEWSNBR;
  FFIREC.XPLCD = FFWREC.XPLCD;
  FFIREC.YPGCD = FFWREC.YPGCD;
  FFIREC.FF6SLFCT = FG0JW07.FG0JWUQT;
  FFIREC.FFGYRIND = FG0JW01.FG0JWYOP;
  FFIREC.FFGSDIND = FG0JW01.FG0JWHOP;
  FFIREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFIREC.ZZZSTM = XX0XW01.XX0XWTIM;
  FFIREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFIREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3910" ("A ", SQLCA, FFIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "165"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VWLTYP01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFIREC.FFIKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0J165

// add dfcast.vwcat001 row
Function FG0J166()
   /* ------------------------------------------------------------*/
   /* add dfcast.vwcat001 table row*/
   /* ------------------------------------------------------------*/
  set FFJREC empty;

  FFJREC.FFEWSNBR = FFWREC.FFEWSNBR;
  FFJREC.YPGCD = FFWREC.YPGCD;
  FFJREC.XPCCD = FFWREC.XPCCD;
  FFJREC.FF6SLFCT = FG0JW07.FG0JWUQT;
  FFJREC.FFEFCTGT = FG0JW01.FG0JWUST;
  FFJREC.FFGYRIND = FG0JW01.FG0JWYOP;
  FFJREC.FFGSDIND = FG0JW01.FG0JWHOP;
  FFJREC.FFECLRFL = "Y";
  FFJREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFJREC.ZZZSTM = XX0XW01.XX0XWTIM;
  FFJREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFJREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3840" ("A ", SQLCA, FFJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "166"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VWCAT001 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFJREC.FFJKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0J166

// add dfcast.vwsgrp01 row
Function FG0J167()
   /* ------------------------------------------------------------*/
   /* add dfcast.vwsgrp01 table row*/
   /* ------------------------------------------------------------*/

  set FFLREC empty;

  FFLREC.FFEWSNBR = FFWREC.FFEWSNBR;
  FFLREC.YPGCD = FFWREC.YPGCD;
  FFLREC.SYBSTGNB = FFWREC.SYBSTGNB;
  FFLREC.FF6SLFCT = FG0JW07.FG0JWUQT;
  FFLREC.FFEFCTGT = FG0JW01.FG0JWUST;
  FFLREC.FFGYRIND = FG0JW01.FG0JWYOP;
  FFLREC.FFGSDIND = FG0JW01.FG0JWHOP;
  FFLREC.FF8DEVFL = "N";
  FFLREC.FFECLRFL = "Y";
  FFLREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFLREC.ZZZSTM = XX0XW01.XX0XWTIM;
  FFLREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFLREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3880" ("A ", SQLCA, FFLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "167"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VWSGRP01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFLREC.FFLKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0J167

// upd dfcast.vwdgrp01 row
Function FG0J168()
   /* ------------------------------------------------------------*/
   /* update dfcast.vwdgrp01*/
   /* ------------------------------------------------------------*/

  FFEREC.FFECLRFL = "Y";

  FFEREC.XXXUSRID = COMMAREA.CAUSERID; /* User id*/
  FFEREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  FFEREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO3850" ("U ", SQLCA, FFEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FG0JW00.FG0JWSWR = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "168"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "168"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE DFCAST.VWDGRP01 TABLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWDGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFEREC.FFEKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0J168

// upd dfcast.vwline01 row
Function FG0J169()
   /* ------------------------------------------------------------*/
   /* upd dfcast.vwline01 table row*/
   /* ------------------------------------------------------------*/

  FG0JW00.FG0JWNM1 = FG0JW07.FG0JWUQT - FFLREC.FF6SLFCT;
  FFGREC.FF6SLFCT = FFGREC.FF6SLFCT + FG0JW00.FG0JWNM1;
  FFGREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFGREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3890" ("U ", SQLCA, FFGREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FG0JW00.FG0JWSWR = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "169"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "169"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DFCAST.VWLINE01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLINE01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFGREC.FFGKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0J169

// Inquire/maintain a table row
Function FG0J200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) obtain data*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  FG0J210(); /* obtain data*/

  FG0J220(); /* Format and display the map*/

  FG0J230(); /* Check attention identifier*/

  FG0J240(); /* Reset fields to normal intensity*/

  FG0J250(); /* Verify the entered data*/

  FG0J260(); /* Process valid input request*/

end // end FG0J200

// Obtain the data to display
Function FG0J210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (FG0JW04.FG0JWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  FG0JW04.CACHGFL = "N";

  FG0JS22(); /* Purge m002 temporary storage*/
  FG0JW05.FG0JWSNB = " "; /* Clear detail line*/
  FG0JW05.FG0JWSTC = 0; /* Clear sales total pct*/
  move 0 to FG0JW05.FG0JWTSP[1] for all;
  FG0JW05.FG0JWDTP = 0; /* Clear demand total pct*/
  move 0 to FG0JW05.FG0JWTDP[1] for all;

   /* ------------------------------------------------------------*/
   /* Obtain current date using routine xx0xs01.*/
   /* Obtain invoice cutoff and futures cutoff dates from*/
   /* dfcast.vffctl01.*/
   /* Calculate:*/
   /* - current month*/
   /* - current month minus 1 month*/
   /* - current month minus 2 months*/
   /* - current month minus 3 months*/
   /* - current month minus 4 months*/
   /* - main buy month*/
   /* Calculate range dates for three years prior to the requested*/
   /* date range.*/
   /* Load the default create data.*/
   /* ------------------------------------------------------------*/

  FG0J211();

   /* ------------------------------------------------------------*/
   /* Select carryover percentages from dfcast.vmcat001 if the*/
   /* historical datee range is within the carryover period.*/
   /* ------------------------------------------------------------*/

  FG0J212();
  FG0JW04.FFQLCOFP = FF2REC.FFQLCOFP;
  FG0JW04.FFQLCOPP = FF2REC.FFQLCOPP;
  FG0JW04.FFQOCOFP = FF2REC.FFQOCOFP;
  FG0JW04.FFQOCOPP = FF2REC.FFQOCOPP;

   /* ------------------------------------------------------------*/
   /* Select user requested style group from dprodg.vsyclr01 or*/
   /* dprodg.vsydvl01; obtain all style colors related to it for*/
   /* the 3 year range, save them into TSQ.*/
   /* Skip the style colors that are outside the requested range*/
   /* for each year.*/
   /* ------------------------------------------------------------*/

  FG0J213();

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (FG0JW00.FG0JWIDX > 1) /* Page was formatted*/
    FG0JS55(); /* process total*/
    FG0JW06.FG0JWNLD = FG0JW00.FG0JWIDX - 1;
    FG0JS50(); /* Add page to temp storage*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (FG0JW04.TA5TSQIX == 0) /* No pages formatted*/

    FFWREC.XXXMODID = "210"; /* Module identification*/
    FFWREC.XXXMSGNO = 18; /* Indicate no data to display*/

    return; /* Exit to continue processing*/

  end

   /* ------------------------------------------------------------*/
   /* Calculate style/color sales/demand percents*/
   /* ------------------------------------------------------------*/

  FG0J214();

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO == 0) /* No message to display*/
    FG0JW04.XXXTSPAG = 1; /* Desired page number*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  FG0JW04.CACHGFL = "Y"; /* data load flag*/
  FG0JW04.FG0JWSWR = "N"; /* Request for data switch*/

end // end FG0J210

// Calc program dates
Function FG0J211()
   /* ------------------------------------------------------------*/
   /* Obtain current date using routine xx0xs01.*/
   /* Obtain invoice cutoff and futures cutoff dates from*/
   /* dfcast.vffctl01.*/
   /* Calculate:*/
   /* - current date*/
   /* - current date minus one month*/
   /* - current date minus two months*/
   /* - current date minus three months*/
   /* - current date minus four months*/
   /* - main buy month*/
   /* - range dates for three years prior to he requested date range*/
   /* Load the default create date.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Get current date using routine xx0xs01.*/
   /* ------------------------------------------------------------*/

  XX0XS01();

  FG0JW04.FG0JW-WORK-DT = XX0XW01.XX0XWDAT; /* system date*/
  FG0JW04.FG0JW-CURR-MO = XX0XW01.XX0XWCYM; /* current date ccyymm*/

   /* ------------------------------------------------------------*/
   /* Obtain invoice cutoff and futures cutoff dates from*/
   /* dfcast.vffctl01.*/
   /* ------------------------------------------------------------*/

  FG0J-2111();
  FG0JW04.FG0JWBUY = FF1REC.FF1FUTDT; /* future cutoff date*/

   /* ------------------------------------------------------------*/
   /* Calculate:*/
   /* - current date*/
   /* - current date minus one month*/
   /* - current date minus two months*/
   /* - current date minus three months*/
   /* - current date minus four months*/
   /* - main buy month*/
   /* ------------------------------------------------------------*/

  FG0J-2112();

   /* ------------------------------------------------------------*/
   /* Calculate prior ranges if begin and end dates were entered*/
   /* ------------------------------------------------------------*/

  FG0JW00.FG0JWWBD = FFWREC.FFABEGMO;
  FG0JW00.FG0JWWED = FFWREC.FFAENDMO;

  FG0JW00.FG0JWIDX = 1; /* init index*/
  while (FG0JW00.FG0JWIDX <= 3) /* calculate 3 date ranges*/

    if (FG0JW00.FG0JWBYY == 00)
      FG0JW00.FG0JWBYY = 99;
      FG0JW00.FG0JWBCC = FG0JW00.FG0JWBCC - 1;
    else
      FG0JW00.FG0JWBYY = FG0JW00.FG0JWBYY - 1;
    end
    FG0JW01.FG0JWPBD[FG0JWIDX] = FG0JW00.FG0JWWBD; /* prior beg date*/

    if (FG0JW00.FG0JWEYY == 00)
      FG0JW00.FG0JWEYY = 99;
      FG0JW00.FG0JWECC = FG0JW00.FG0JWECC - 1;
    else
      FG0JW00.FG0JWEYY = FG0JW00.FG0JWEYY - 1;
    end
    FG0JW01.FG0JWPED[FG0JWIDX] = FG0JW00.FG0JWWED; /* prior end date*/

    FG0JW00.FG0JWIDX = FG0JW00.FG0JWIDX + 1;

  end

   /* ------------------------------------------------------------*/
   /* Set default create date.*/
   /* Note: If dfcast.vwsgrp01 row exists, its standard change*/
   /* date will become the create date.*/
   /* ------------------------------------------------------------*/

  FG0JW01.FG0JWCDT = VGVar.currentShortGregorianDate; /* created date default*/

   /* ------------------------------------------------------------*/
   /* Set ffzrec default dates*/
   /* ------------------------------------------------------------*/

  FFZREC.FFZBEGMO = FFWREC.FFABEGMO;
  FFZREC.FFZENDMO = FFWREC.FFAENDMO;


end // end FG0J211

// Get caov pct dfcast.vffxrf01
Function FG0J212()
   /* ------------------------------------------------------------*/
   /* Select unique on dfcast.vffxrf01 table.*/
   /* Load ff2rec record - dfcast.vffxrf01*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.YSMXDV = "10"; /* div grp code*/
  FF2REC.XPCCD = FFWREC.XPCCD; /* product catg cd*/
  FF2REC.YPGCD = FFWREC.YPGCD; /* product type group*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "212"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S  ON DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0J212

// Process valid sty/clr info
Function FG0J213()
   /* ------------------------------------------------------------*/
   /* Select user requested style group from dprodg.vsyclr01 or*/
   /* dprodg.vsydvl01; obtain all style colors related to it for*/
   /* the 3 year range, save them into TSQ.*/
   /* Skip the style colors that are outside the requested range*/
   /* for each year.*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFBEGMO = 0; /* Begin mo of 3 years ago*/
  FFFREC.FFFENDMO = 999999999; /* End mo of 1 year ago*/

  move 0 to FG0JW05.FG0JWUTS[1] for all; /* Initialize total historical sales*/
  move 0 to FG0JW05.FG0JWUTD[1] for all; /* Initialize total historical demand*/
  FG0JW00.FG0JWSDV = "N"; /* Style development table*/

  FG0J-2131(); /* select 's2' dprodg.vsyclr01*/

  set PG4REC empty;
  PG4REC.SYBSTGNB = FG0JW04.FG0JWSTY; /* style group number*/
  FG0JS52(); /* select 's1' dprodg.vsydvl01*/

  FG0J-2132(); /* select 's2' dprodg.vsyclr01*/

  if (SQLCA.VAGen_SQLCODE == 100) /* no vsyclr01 rows*/

    FG0JS53(); /* fetch 'n1' dprodg.vsydvl01*/
    FG0JW00.FG0JWSDV = "Y"; /* Style development table*/

    if (SQLCA.VAGen_SQLCODE == 0)
      PG2REC.SY1STNBR = PG4REC.PG4STNBR; /* style number*/
      PG2REC.SY2CLRID = " "; /* color id*/
      PG2REC.SY2CLRAB = " "; /* color abbrv.*/
      PG2REC.XDMCD = " "; /* dim code*/
      PG2REC.XDVCD = "01"; /* div cd*/
      PG2REC.PG-CURR-XLC-CD = "05";
      PG2REC.SY2PDCMO = PG4REC.SY2PDCMO; /* close out month*/
      PG2REC.SY2FDSMO = PG4REC.PG4FSLMO; /* 1st sls month*/
    end
  end

  FG0JW00.FG0JWIDX = 1; /* init index*/
  if (SQLCA.VAGen_SQLCODE == 0) /* process unitl end of syclr and sydvl*/

    FG0JW06.FG0JWRCD[FG0JWIDX] = "1"; /* style group line type '1'*/
    FG0JW06.FG0JWDTL[FG0JWIDX] = FG0JW05.FG0JWSGP;
    FG0JW00.FG0JWIDX = FG0JW00.FG0JWIDX + 1;

    /* ------------------------------------------------------------*/
    /* Format historical sales/demand style/color detail line*/
    /* ------------------------------------------------------------*/

    while (SQLCA.VAGen_SQLCODE == 0) /* process until end of vsyclr01*/

      move 0 to FG0JW05.FG0JWUSQ[1] for all;
      move 0 to FG0JW05.FG0JWUDQ[1] for all;
      move " " to FG0JW05.FG0JWHSQ[1] for all;
      move " " to FG0JW05.FG0JWHDQ[1] for all;

      FG0JW06.FG0JWRCD[FG0JWIDX] = "2"; /* sty/clr dtl line*/
      FG0JW00.FG0JWSWP = "N";

      /* ------------------------------------------------------------*/
      /* Obtain historical sales and demand qtys for range one year*/
      /* prior to requested range*/
      /* ------------------------------------------------------------*/

      if (FG0JW01.FG0JWPBD[1] >= FG0JW04.FG0JW-CURR-MO) /* all fcst rng*/
        if (PG2REC.PG-CURR-XLC-CD == "05"
         || PG2REC.PG-CURR-XLC-CD == "10")
          if (PG2REC.XDVCD == "02"
           || PG2REC.XDVCD == "03"
          )
            /* skip Nil and Promo only products*/
          else
            FG0J-2133(); /* process 1 year ago history*/
          end
        end
      else /* mixed or all actl rng*/
        FG0J-2133(); /* process 1 year ago history*/
      end

      /* ------------------------------------------------------------*/
      /* Obtain historical sales and demand qtys for range two years*/
      /* prior to requested range*/
      /* ------------------------------------------------------------*/

      if (FG0JW01.FG0JWPBD[2] >= FG0JW04.FG0JW-CURR-MO) /* all fcst rng*/
        if (PG2REC.PG-CURR-XLC-CD == "05"
         || PG2REC.PG-CURR-XLC-CD == "10")
          if (PG2REC.XDVCD == "02"
           || PG2REC.XDVCD == "03"
          )
            /* skip Nil and Promo only products*/
          else
            FG0J-2134(); /* process 2 year ago history*/
          end
        end
      else /* mixed or all actl rng*/
        FG0J-2134(); /* process 2 year ago history*/
      end

      /* ------------------------------------------------------------*/
      /* Obtain historical sales and demand qtys for range three*/
      /* years prior to requested range*/
      /* ------------------------------------------------------------*/

      if (FG0JW01.FG0JWPBD[3] >= FG0JW04.FG0JW-CURR-MO) /* all fcst rng*/
        if (PG2REC.PG-CURR-XLC-CD == "05"
         || PG2REC.PG-CURR-XLC-CD == "10")
          if (PG2REC.XDVCD == "02"
           || PG2REC.XDVCD == "03"
          )
            /* skip Nil and Promo only products*/
          else
            FG0J-2135(); /* process 3 year ago history*/
          end
        end
      else /* mixed or all actl rng*/
        FG0J-2135(); /* process 3 year ago history*/
      end

      if (FG0JW00.FG0JWSWP == "Y") /* valid product*/
        /* ------------------------------------------------------------*/
        /* Accumulate historical total sales/demand qtys*/
        /* ------------------------------------------------------------*/

        FG0JW05.FG0JWUTS[1] = FG0JW05.FG0JWUSQ[1] + FG0JW05.FG0JWUTS[1];
        FG0JW05.FG0JWUTS[2] = FG0JW05.FG0JWUSQ[2] + FG0JW05.FG0JWUTS[2];
        FG0JW05.FG0JWUTS[3] = FG0JW05.FG0JWUSQ[3] + FG0JW05.FG0JWUTS[3];
        FG0JW05.FG0JWUTD[1] = FG0JW05.FG0JWUDQ[1] + FG0JW05.FG0JWUTD[1];
        FG0JW05.FG0JWUTD[2] = FG0JW05.FG0JWUDQ[2] + FG0JW05.FG0JWUTD[2];
        FG0JW05.FG0JWUTD[3] = FG0JW05.FG0JWUDQ[3] + FG0JW05.FG0JWUTD[3];

        /* ------------------------------------------------------------*/
        /* Load temporary storage style/color detail line*/
        /* ------------------------------------------------------------*/

        FG0JW06.FG0JWDTL[FG0JWIDX] = FG0JW05.FG0JWSNB;
        FG0JW05.FG0JWSNB = " ";

        /* ------------------------------------------------------------*/
         /* If the page is full, add the page to the storage queue.*/
        /* ------------------------------------------------------------*/

        if (FG0JW00.FG0JWIDX > 11) /* Page is full*/
          FG0JW06.FG0JWNLD = FG0JW00.FG0JWIDX - 1; /* nbr of lines loaded*/
          FG0JW05.FG0JWSNB = FG0JW06.FG0JWDTL[FG0JWIDX]; /* Save last rec*/
          FG0JS55(); /* process total*/
          FG0JS50(); /* Add page to temp storage*/
          FG0JW06.FG0JWDTL[FG0JWIDX] = FG0JW05.FG0JWSNB; /* Rstr last rec*/
          FG0JW06.FG0JWRCD[FG0JWIDX] = "2";
          FG0JW06.FG0JWNLD = 1;
        end
        FG0JW00.FG0JWIDX = FG0JW00.FG0JWIDX + 1;

      end

      /* ------------------------------------------------------------*/
      /* Fetch next style/color number*/
      /* ------------------------------------------------------------*/

      if (FG0JW00.FG0JWSDV == "N")
        FG0J-2132(); /* select 's2' dprodg.vsyclr01*/
        if (SQLCA.VAGen_SQLCODE == 100)
          FG0JW00.FG0JWSDV = "Y";
        end
      end

      if (FG0JW00.FG0JWSDV == "Y")
        FG0JS53(); /* fetch 'n1' dprodg.vsydvl01*/

        if (SQLCA.VAGen_SQLCODE == 0)
          PG2REC.SY1STNBR = PG4REC.PG4STNBR; /* style number*/
          PG2REC.SY2CLRID = " "; /* color id*/
          PG2REC.SY2CLRAB = " "; /* color abbrv.*/
          PG2REC.XDMCD = " "; /* dim code*/
          PG2REC.XDVCD = "01"; /* div cd*/
          PG2REC.PG-CURR-XLC-CD = "05";
          PG2REC.SY2PDCMO = PG4REC.SY2PDCMO; /* close out month*/
          PG2REC.SY2FDSMO = PG4REC.PG4FSLMO; /* 1st sls month*/
        end
      end
    end /* while sqlcode eq 0*/
  end /* if sqlcode eq 0*/

   /* ------------------------------------------------------------*/
   /* Close dprodg.vsyclr01 and dprodg.vsydvl01 cursors.*/
   /* ------------------------------------------------------------*/
  FG0J-2136(); /* select 'c2' dprodg.vsyclr01*/
  FG0JS54(); /* close 'c1' dprodg.vsydvl01*/

end // end FG0J213

// update temporary storage m002
Function FG0J214()
   /* ------------------------------------------------------------*/
   /* Calculate style/color sales/demand percents*/
   /* ------------------------------------------------------------*/

  FG0JW00.FG0JWIDX = FG0JW04.TA5TSQIX; /* init index*/

  while (FG0JW00.FG0JWIDX >= 1)
    FG0JW04.XXXTSPAG = FG0JW00.FG0JWIDX; /* process temp storage*/

    FG0JS19(); /* read temp storage*/

    FG0JW00.FG0JWPIX = FG0JW06.FG0JWNLD;
    while (FG0JW00.FG0JWPIX >= 1)

      /* ------------------------------------------------------------*/
       /* load temporary storage detail data according to record type*/
      /* ------------------------------------------------------------*/

      if (FG0JW06.FG0JWRCD[FG0JWPIX] == "3")
        FG0JW05.FG0JWTOT = FG0JW06.FG0JWDTL[FG0JWPIX];
      else
        if (FG0JW06.FG0JWRCD[FG0JWPIX] == "2")
          FG0JW05.FG0JWSNB = FG0JW06.FG0JWDTL[FG0JWPIX];

          FG0JW00.FG0JWLIX = 1;
          while (FG0JW00.FG0JWLIX <= 3)

            FG0JW05.FG0JWSPT[FG0JWLIX] = 0;
            FG0JW05.FG0JWDPT[FG0JWLIX] = 0;

            if (FG0JW05.FG0JWUTS[FG0JWLIX] != 0)
              FG0JW00.FG0JWNM1 = FG0JW05.FG0JWUSQ[FG0JWLIX] * 100;
              FG0JW00.FG0JWNM2 = FG0JW05.FG0JWUTS[FG0JWLIX];
              FG0JW00.FG0JWNM3 = mathLib.round(FG0JW00.FG0JWNM1 / FG0JW00.FG0JWNM2, -mathLib.decimals(FG0JW00.FG0JWNM3));
              FG0JW05.FG0JWSPT[FG0JWLIX] = FG0JW00.FG0JWNM3;
            end

            if (FG0JW05.FG0JWUTD[FG0JWLIX] != 0)
              FG0JW00.FG0JWNM1 = FG0JW05.FG0JWUDQ[FG0JWLIX] * 100;
              FG0JW00.FG0JWNM2 = FG0JW05.FG0JWUTD[FG0JWLIX];
              FG0JW00.FG0JWNM3 = mathLib.round(FG0JW00.FG0JWNM1 / FG0JW00.FG0JWNM2, -mathLib.decimals(FG0JW00.FG0JWNM3));
              FG0JW05.FG0JWDPT[FG0JWLIX] = FG0JW00.FG0JWNM3;
            end

            FG0JW00.FG0JWLIX = FG0JW00.FG0JWLIX + 1;

          end

          FG0JW06.FG0JWDTL[FG0JWPIX] = FG0JW05.FG0JWSNB;

        end
      end

      FG0JW00.FG0JWPIX = FG0JW00.FG0JWPIX - 1;

    end

    /* ------------------------------------------------------------*/
    /* update temporary storage with style/color sale/dmnd percent*/
    /* ------------------------------------------------------------*/

    FG0J-2141(); /* update temporary storage*/

    FG0JW00.FG0JWIDX = FG0JW00.FG0JWIDX - 1;

  end


end // end FG0J214

// Format and converse the map
Function FG0J220()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    FFWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (FG0JW00.FG0JWSWR == "Y" /* If data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (FG0JW04.FG0JWSWF == "Y" /* Map must be formatted*/
     && FG0JW04.FG0JWSLF != "Y")
      FG0J221(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* if processing an existing forecast key data can not !!!*/
   /* be modified*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Format page, date, and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  if (FG0JW04.XXXTSPAG > 0)
    set FG0JM002.XXXLITPG skip;
    FG0JM002.XXXTSPAG = FG0JW04.XXXTSPAG; /* Current page*/
    set FG0JM002.XXXLITOF skip;
    FG0JM002.TA5TSQIX = FG0JW04.TA5TSQIX; /* max pages*/
  end

  FG0JM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  FG0JM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FG0JM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (FFWREC.XXXMSGNO != 0) /* Message to display*/
    if (FFWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(FFWREC.XXXMSGNO);
    end /* error message number*/
    FG0JM002.XXXMODID = FFWREC.XXXMODID; /* Module identification*/
    set FG0JM002 alarm; /* Indicate sound alarm*/
  end

  converse FG0JM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  FFWREC.XXXMODID = " "; /* Module identification*/
  FFWREC.XXXMSGNO = 0;

  COMMAREA.CATOAP = FG0JM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FG0JM002.CAITEM; /* Application data*/


end // end FG0J220

// Format the display data
Function FG0J221()
   /* ------------------------------------------------------------*/
   /* Init map fg0jm002*/
   /* ------------------------------------------------------------*/

  set FG0JM002 initial; /* m002 input/ouput area*/

  FG0JW04.FG0JWSWF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* Format fg0jm002 using passed data*/
   /* ------------------------------------------------------------*/

  FG0JW00.FG0JWWDT = FFWREC.FFABEGMO; /* w/s date field*/
  FG0JM002.FG0JMBRG = FG0JW00.FG0JWWYM; /* begin month range*/
  FG0JW00.FG0JWWDT = FFWREC.FFAENDMO; /* w/s date field*/
  FG0JM002.FG0JMERG = FG0JW00.FG0JWWYM; /* end month range*/

  FG0JM002.XPCCD = FFWREC.XPCCD;
  FG0JM002.XPCABRV = FFWREC.XPCABRV;

  FG0JM002.YPGCD = FFWREC.YPGCD;
  FG0JM002.YPGABRV = FFWREC.YPGABRV;

  FG0JM002.FG0JMYOP = FG0JW04.FG0JWYO1; /* year option*/
  FG0JM002.FG0JMHOP = FG0JW04.FG0JWHO1; /* history option*/

  FG0JM002.FG0JMSTY = FG0JW04.FG0JWSTY;
  FG0JM002.SYBSTGNB = FFWREC.SYBSTGNB; /* Fcst style group M001*/

   /* ------------------------------------------------------------*/
   /* If historical data has not been loaded bypass map load*/
   /* ------------------------------------------------------------*/

  if (FG0JW04.CACHGFL != "Y")
    return;
  end

  set FG0JM002.FG0JMPR1 skip;
  FG0JM002.FG0JMPBR = FG0JW01.FG0JWPBR[FG0JWYO1];
  set FG0JM002.FG0JMDSH skip;
  FG0JM002.FG0JMPER = FG0JW01.FG0JWPER[FG0JWYO1];
  set FG0JM002.FG0JMPR2 skip;
  FG0JM002.FG0JMYDS = FG0JW00.FG0JWYDS[FG0JWYO1];

   /* ------------------------------------------------------------*/
   /* load historical sales/demand from temporary storage*/
   /* ------------------------------------------------------------*/

  FG0JS19(); /* read temporary storage*/

  FG0JW00.FG0JWIDX = 1;
  FG0JW00.FG0JWPIX = 1;

  while (FG0JW00.FG0JWIDX <= FG0JW06.FG0JWNLD) /* process temp storage*/

    /* ----------------------------------------------------------*/
     /* style group detail line*/
    /* ----------------------------------------------------------*/

    if (FG0JW06.FG0JWRCD[FG0JWIDX] == "1") /* style group sdesc*/
      FG0JW05.FG0JWSGP = FG0JW06.FG0JWDTL[FG0JWIDX];
      FG0JM002.FG0JMDTL[FG0JWIDX] = FG0JW05.FG0JWSGF;
    end

    /* ----------------------------------------------------------*/
     /* style/color detail line*/
    /* ----------------------------------------------------------*/

    if (FG0JW06.FG0JWRCD[FG0JWIDX] == "2") /* style/color number*/

      FG0JW05.FG0JWSNB = FG0JW06.FG0JWDTL[FG0JWIDX];

      FG0JW05.FG0JWSSQ = FG0JW05.FG0JWHSQ[FG0JWYO1];
      if (FG0JW05.FG0JWSPT[FG0JWYO1] > 0)
        FG0JW05.FG0JWSSP = FG0JW05.FG0JWSPT[FG0JWYO1];
        if (FG0JW05.FG0JWSS1 == "0")
          FG0JW05.FG0JWSS1 = " ";
          if (FG0JW05.FG0JWSS2 == "0")
            FG0JW05.FG0JWSS2 = " ";
          end
        end
      end
      FG0JW05.FG0JWDSQ = FG0JW05.FG0JWHDQ[FG0JWYO1];
      if (FG0JW05.FG0JWDPT[FG0JWYO1] > 0)
        FG0JW05.FG0JWDSP = FG0JW05.FG0JWDPT[FG0JWYO1];
        if (FG0JW05.FG0JWDS1 == "0")
          FG0JW05.FG0JWDS1 = " ";
          if (FG0JW05.FG0JWDS2 == "0")
            FG0JW05.FG0JWDS2 = " ";
          end
        end
      end

      if (FG0JW05.FG0JWSSN[FG0JWYO1] != " "
       || FG0JW05.FG0JWDSN[FG0JWYO1] != " ")

        FG0JW00.FG0JWSSN = FG0JW05.FG0JWSSN[FG0JWYO1]; /* style nbr*/
        FG0JW00.FG0JWSCI = FG0JW05.FG0JWSCI[FG0JWYO1]; /* style clr*/
        FG0JW00.FG0JWSDC = FG0JW05.FG0JWSDC[FG0JWYO1]; /* dim cd*/
        FG0JW00.FG0JWSCD = FG0JW05.FG0JWSCD[FG0JWYO1]; /* clr abrv*/
        FG0JW00.FG0JWSSQ = FG0JW05.FG0JWSSQ;
        FG0JW00.FG0JWSS1 = FG0JW05.FG0JWSS1;
        FG0JW00.FG0JWSS2 = FG0JW05.FG0JWSS2;
        FG0JW00.FG0JWSS3 = FG0JW05.FG0JWSS3;

        FG0JW00.FG0JWDSN = FG0JW05.FG0JWDSN[FG0JWYO1]; /* style nbr*/
        FG0JW00.FG0JWDCI = FG0JW05.FG0JWDCI[FG0JWYO1]; /* style clr*/
        FG0JW00.FG0JWDDC = FG0JW05.FG0JWDDC[FG0JWYO1]; /* dim cd*/
        FG0JW00.FG0JWDCD = FG0JW05.FG0JWDCD[FG0JWYO1]; /* clr abrv*/
        FG0JW00.FG0JWDSQ = FG0JW05.FG0JWDSQ;
        FG0JW00.FG0JWDS1 = FG0JW05.FG0JWDS1;
        FG0JW00.FG0JWDS2 = FG0JW05.FG0JWDS2;
        FG0JW00.FG0JWDS3 = FG0JW05.FG0JWDS3;

        FG0JM002.FG0JMDTL[FG0JWPIX] = FG0JW00.FG0JWSSF;

      else
        FG0JW00.FG0JWPIX = FG0JW00.FG0JWPIX - 1; /* decrement process index*/
      end

    end

    FG0JW00.FG0JWIDX = FG0JW00.FG0JWIDX + 1; /* increment load index*/
    FG0JW00.FG0JWPIX = FG0JW00.FG0JWPIX + 1; /* increment process index*/

  end

   /* ----------------------------------------------------------*/
   /* style group total line*/
   /* ----------------------------------------------------------*/

  if (FG0JW00.FG0JWIDX <= 12
   && FG0JW06.FG0JWRCD[FG0JWIDX] == "3") /* total line*/
    FG0JW05.FG0JWTOT = FG0JW06.FG0JWDTL[FG0JWIDX];

    FG0JW05.FG0JWSTQ = FG0JW05.FG0JWTHS[FG0JWYO1];
    if (FG0JW05.FG0JWTSP[FG0JWYO1] > 0)
      FG0JW05.FG0JWSTC = 100;
      if (FG0JW05.FG0JWST1 == "0")
        FG0JW05.FG0JWST1 = " ";
        if (FG0JW05.FG0JWST2 == "0")
          FG0JW05.FG0JWST2 = " ";
        end
      end
    else
      FG0JW05.FG0JWSTC = 0;
      FG0JW05.FG0JWST1 = " ";
      FG0JW05.FG0JWST2 = " ";
      FG0JW05.FG0JWST3 = " ";
    end
    FG0JW05.FG0JWDTQ = FG0JW05.FG0JWTHD[FG0JWYO1];
    if (FG0JW05.FG0JWTDP[FG0JWYO1] > 0)
      FG0JW05.FG0JWDTP = 100;
      if (FG0JW05.FG0JWDT1 == "0")
        FG0JW05.FG0JWDT1 = " ";
        if (FG0JW05.FG0JWDT2 == "0")
          FG0JW05.FG0JWDT2 = " ";
        end
      end
    else
      FG0JW05.FG0JWDTP = 0;
      FG0JW05.FG0JWDT1 = " ";
      FG0JW05.FG0JWDT2 = " ";
      FG0JW05.FG0JWDT3 = " ";
    end

    FG0JM002.FG0JMDTL[FG0JWPIX] = FG0JW05.FG0JWTLF;
  end

end // end FG0J221

// Check attention identifier
Function FG0J230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* refresh map*/

    FG0JW04.FG0JWSWR = "N"; /* request for data*/
    FG0JW04.FG0JWSWF = "Y"; /* format screen m002*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (FG0JM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      FG0JS01(); /* purge temp storage current m001*/

      FG0JS02(); /* purge temp storage history m001*/

      FG0JS22(); /* purge temp storage m002*/

      FFWREC.FFEWSNBR = 0; /* init work sheet number*/

      XSFFS01(); /* Exit to another application*/

      FG0JW04.FG0JWSWR = "N"; /* request for data*/
      FG0JW04.FG0JWSWF = "Y"; /* format screen m002*/

      set FG0JM002.CATOAP cursor, bold; /* Highlight*/

    else

      FFWREC.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(36); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "FG0JM002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FG0A"; /* Application find code*/
    end

    FG0JS01(); /* purge temp storage current m001*/

    FG0JS02(); /* purge temp storage history m001*/

    FG0JS22(); /* purge temp storage m002*/

    XSFFS01(); /* Exit to another application*/

    FG0JW04.FG0JWSWR = "N"; /* request for data*/
    FG0JW04.FG0JWSWF = "Y"; /* format screen m002*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* pf7 was not pressed*/
   && converseVar.eventKey not pf8   /* pf8 was not pressed*/
   && converseVar.eventKey not pf14  /* pf14 was not pressed*/
   && converseVar.eventKey not pf15  /* pf15 was not pressed*/
   && converseVar.eventKey not pf19) /* pf19 was not pressed*/

    FFWREC.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(3); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end FG0J230

// Reset highlighted fields
Function FG0J240()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set FG0JM002.FG0JMYOP initialAttributes; /* year option*/
  set FG0JM002.FG0JMHOP initialAttributes; /* history option*/
  set FG0JM002.FG0JMSTY initialAttributes; /* style group nbr*/

  set FG0JM002.CATOAP initialAttributes;
  set FG0JM002.CAITEM initialAttributes;

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (FG0JM002.FG0JMSTY == "?") /* style group nbr*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      FFWREC.XXXMODID = "240"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of style group nbrs*/
   /* ------------------------------------------------------------*/

  if (FG0JM002.FG0JMSTY == "?") /* style group list*/

    FG0J241(); /* window initialization*/
    XX0XW02.XX0XWHDR = "STYLE GROUP NBR"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      FG0J242(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      FG0JM002.FG0JMSTY = FG0JW04.FG0JWSTY; /* style group nbr*/
    else
      FG0JM002.FG0JMSTY = FG0JM003.XX0XMCD[XX0XWPIX];
                                   /* style grp nbr*/

    end

    set FG0JM002.FG0JMSTY cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  FFWREC.XXXMODID = "240"; /* Module identification*/
  converseLib.validationFailed(97); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end FG0J240

// Initialization - pop up window
Function FG0J241()
   /* ------------------------------------------------------------*/

           /* INITIALIZATION PROCESS FOR POP UP WINDOWS*/

      /* Initialize fields on map and in working storage.*/

   /* ------------------------------------------------------------*/

     /* ***********************************************/
     /* ******  Initialize appropriate fields   *******/
     /* ***********************************************/

  set FG0JM003 initial; /* Clear the map area*/
  set XX0XW02 empty; /* clear working storage*/
  set PG7REC empty; /* dprodg.vmxprc01 record*/
  PG7REC.PG7MAXPR = 999999999;
  XX0XW02.XX0XWCT1 = 0; /* Table index*/
  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  XX0XW02.XX0XWSIX = 0; /* End of first page save index*/
  XX0XW02.XX0XWPIX = 0; /* Initialize pass index to zero*/
  XX0XW02.XX0XWFFL = "Y"; /* first time thru flag*/
  XX0XW02.XX0XWERR = "N"; /* Scroll error flag to no*/
  XX0XW02.XX0XWEND = "N"; /* End of pop up window session flag*/
  FG0JW04.FG0JWEPF = "N"; /* End of vmxpr01 table*/


end // end FG0J241

// converse sty grp pop up window
Function FG0J242()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If pf7, PF8 or first time through,*/
         /* scroll forward the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    set FG0JM003 initial; /* Clear map output area*/
    FG0JM003.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    FG0JM003.XX0XMTR1 = "              SELECT & ENTER          ";
    FG0JM003.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")   
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      FG0JW04.PG7MAXPR[XX0XWCT1] = PG7REC.PG7MAXPR;
      FG0JW04.SYBSTGNB[XX0XWCT1] = PG7REC.SYBSTGNB;
      FG0JS33(); /* select dprodg.vmxprc01*/
      FG0JS34(); /* fetch dprodg.vmxprc01*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && SQLCA.VAGen_SQLCODE != 100) /* Or end of data*/
        FG0JM003.XX0XMCD[XX0XWCT2] = PG7REC.SYBSTGNB;
        FG0JM003.XX0XMDES[XX0XWCT2] = PG7REC.SYBSTGNM;
        set FG0JM003.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
        FG0JW04.FG0JWSGS = PG7REC.SYBSTGNB;
        FG0JW04.FG0JWSMP = PG7REC.PG7MAXPR;
        XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1; /* Increment screen index*/
        FG0JS34();
      end
      if (SQLCA.VAGen_SQLCODE == 100)
        FG0JW04.FG0JWEPF = "Y";
      else
        PG7REC.SYBSTGNB = FG0JW04.FG0JWSGS;
        PG7REC.PG7MAXPR = FG0JW04.FG0JWSMP;
      end

      XX0XW02.XX0XWFFL = "N";
      FG0JS35(); /* close dprodg.vmxprc01*/
    end

     /* *********************************************************/
     /* ***      If PF7 was pressed then scroll backward     ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      FG0JW04.FG0JWEPF = "N"; /* init end of price table flag*/
      if (XX0XW02.XX0XWCT1 > 1)
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1;
      end
      PG7REC.PG7MAXPR = FG0JW04.PG7MAXPR[XX0XWCT1];
      PG7REC.SYBSTGNB = FG0JW04.SYBSTGNB[XX0XWCT1];
      FG0JS33(); /* select dprodg.vmxprc01*/
      FG0JS34(); /* fetch dprodg.vmxprc01*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && SQLCA.VAGen_SQLCODE != 100) /* Or end of data*/
        FG0JM003.XX0XMCD[XX0XWCT2] = PG7REC.SYBSTGNB;
        FG0JM003.XX0XMDES[XX0XWCT2] = PG7REC.SYBSTGNM;
        set FG0JM003.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
        FG0JW04.FG0JWSGS = PG7REC.SYBSTGNB;
        FG0JW04.FG0JWSMP = PG7REC.PG7MAXPR;
        XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1; /* Increment screen index*/
        FG0JS34();
      end
      if (SQLCA.VAGen_SQLCODE != 100)
        PG7REC.SYBSTGNB = FG0JW04.FG0JWSGS;
        PG7REC.PG7MAXPR = FG0JW04.FG0JWSMP;
      end
      FG0JS35(); /* close dprodg.vmxprc01*/
    end
  end


  converse FG0JM003 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && FG0JM003.XX0XMCD[XX0XWCT2] != " ")
    set FG0JM003.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && FG0JW04.FG0JWEPF == "Y")    /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && FG0JW04.PG7MAXPR[XX0XWCT1] == 999999999) /* And end of table*/
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (FG0JM003.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWCT2;
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7
         && converseVar.eventKey not pf8
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end FG0J242

// Verify the entered data
Function FG0J250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    FFWREC.XXXMODID = "250"; /* Module identification*/
    set FG0JM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(40); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* request to page forward(pf7) or backwards(pf8) verify*/
   /* modifiable fields*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)

    FG0J251(); /* verify scroll request*/

    FG0JS21(); /* check modifiable fields*/

  end

   /* ------------------------------------------------------------*/
   /* request for same opt(pf14) or request for chg opt(pf15)*/
   /* check modifiable fields*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
  )
    FG0JS21(); /* check modifiable fields*/

    if (converseVar.validationMsgNum != 0)
      converseLib.validationFailed(247); /* Inidicate invalid data changed with PF key*/
      FFWREC.XXXMODID = "250";
    end

    if (converseVar.eventKey is pf15)

      FG0J252(); /* validate selection fields*/

      if (FG0JW04.FG0JWSTY == " ")
        converseLib.validationFailed(35);
        FFWREC.XXXMODID = "250";
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* validate entry fields, and key data changes*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)

    FG0J252(); /* validate modifiable fields*/

    if (FG0JM002.FG0JMSTY != FG0JW04.FG0JWSTY /* if style nbr changed*/
     && FG0JM002.FG0JMSTY != " "              
     && converseVar.validationMsgNum == 0)   
      FG0JW04.FG0JWSWR = "Y";
    end

  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end


end // end FG0J250

// Verify scroll request
Function FG0J251()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FG0JW04.XXXTSPAG < 2)       /* and no previous pages*/

    FFWREC.XXXMODID = "251"; /* Module identification*/
    converseLib.validationFailed(6); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FG0JW04.XXXTSPAG >= FG0JW04.TA5TSQIX) /* and no more pages*/

    FFWREC.XXXMODID = "251"; /* Module identification*/
    converseLib.validationFailed(7); /* No more pages to display*/

  end


end // end FG0J251

// validate modifiable fields
Function FG0J252()

   /* ------------------------------------------------------------*/
   /* validate style group*/
   /* ------------------------------------------------------------*/

  if (FG0JM002.FG0JMSTY != " ")

    set PG2REC empty;
    set PG4REC empty;
    PG2REC.SYBSTGNB = FG0JM002.FG0JMSTY;
    PG4REC.SYBSTGNB = FG0JM002.FG0JMSTY;

    FG0JS40(); /* select 's2' dprodg.vsyclr01*/

    FG0JS41(); /* fetch  'n2' dprodg.vsyclr01*/

    if (SQLCA.VAGen_SQLCODE != 0)

      FG0JS52(); /* Open 's1' dprodg.vsydvl01*/

      FG0JS53(); /* Fetch 'n1' dprodg.vsydvl01*/
      if (SQLCA.VAGen_SQLCODE == 0)
        if (PG4REC.PG4RFCFL == "Y")
          FG0JW05.SYBSTGNB = PG4REC.SYBSTGNB; /* Style group number*/
          FG0JW05.FG0JWSSD = PG4REC.SY1STYNM; /* History sales*/
          FG0JW05.FG0JWDSD = PG4REC.SY1STYNM; /* History demand*/
        end
      else
        converseLib.validationFailed(18);
        FFWREC.XXXMODID = "252";
        set FG0JM002.FG0JMSTY cursor, bold;
      end

      FG0JS54(); /* Close 'c1' dprodg.vsydvl01*/

    end

    FG0JS42(); /* close  'c2' dprodg.vsyclr01*/

  end

   /* ------------------------------------------------------------*/
   /* validate year/history option field*/
   /* ------------------------------------------------------------*/

  if (FG0JM002.FG0JMHOP != FG0JW01.FG0JWHOP)
    if (FG0JM002.FG0JMHOP != "S"
     && FG0JM002.FG0JMHOP != "D")
      converseLib.validationFailed(10);
      FFWREC.XXXMODID = "252";
      set FG0JM002.FG0JMHOP cursor, bold;
    end
  end

  if (FG0JM002.FG0JMYOP != FG0JW01.FG0JWYOP)
    if (FG0JM002.FG0JMYOP != 1
     && FG0JM002.FG0JMYOP != 2
     && FG0JM002.FG0JMYOP != 3)
      converseLib.validationFailed(10);
      FFWREC.XXXMODID = "252";
      set FG0JM002.FG0JMYOP cursor, bold;
    end
  end


end // end FG0J252

// Process valid input request
Function FG0J260()

  FG0JW04.FG0JWSWF = "Y"; /* format map 002*/

  FG0JW04.FG0JWYO1 = FG0JM002.FG0JMYOP;
  FG0JW04.FG0JWHO1 = FG0JM002.FG0JMHOP;
  FG0JW04.FG0JWSTY = FG0JM002.FG0JMSTY;

  if (FG0JW04.FG0JWSWR == "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* Request to scroll backwards*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* display next season*/
    FG0JW04.XXXTSPAG = FG0JW04.XXXTSPAG - 1;
    return;
  end

   /* ------------------------------------------------------------*/
   /* Request to scroll foward*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* display next season*/
    FG0JW04.XXXTSPAG = FG0JW04.XXXTSPAG + 1;
    return;
  end

   /* ------------------------------------------------------------*/
   /* pf14(same opt) or pf15(chng opt) has been requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14 /* same option*/
   || converseVar.eventKey is pf15) /* change option*/

    FG0JW01.XXXTSPAG = 1; /* init screen again*/
    FG0JW00.FG0JWSWD = "1"; /* request fg0jm001 display*/
    FG0JW00.FG0JWSWF = "Y"; /* request to format map m001*/

    if (FG0JW04.FG0JWSTY == " ")
      FG0JW01.FG0JWHFL = "N"; /* history loaded flag*/
      return;
    end

    if (converseVar.eventKey is pf15)

      FG0JW01.FG0JWYOP = FG0JM002.FG0JMYOP;
      FG0JW01.FG0JWHOP = FG0JM002.FG0JMHOP;
      FG0JW01.FG0JWSTY = FG0JM002.FG0JMSTY;

    else

      FG0JW01.FG0JWYOP = FG0JM001.FG0JMYOP;
      FG0JW01.FG0JWHOP = FG0JM001.FG0JMHOP;
      FG0JW01.FG0JWSTY = FG0JM002.FG0JMSTY;

    end

    FG0JW01.FG0JWHFL = "Y"; /* history loaded flag*/

    /* ------------------------------------------------------------*/
    /* Init work fields*/
    /* ------------------------------------------------------------*/

    FG0JW04.FG0JWSLF = "N";
    FG0JW04.FG0JWDPS = "N";
    FG0JW00.FG0JWIDX = 1;

    /* ------------------------------------------------------------*/
    /* Purge temporary storage historical data*/
    /* ------------------------------------------------------------*/

    FG0JS02(); /* purge temp storage historical data*/

    /* ------------------------------------------------------------*/
    /* Load requested style group data*/
    /* ------------------------------------------------------------*/

    while (FG0JW04.XXXTSPAG <= FG0JW04.TA5TSQIX
     && FG0JW04.FG0JWDPS == "N"
     && FG0JW04.XXXTSPAG != 0)

      FG0JS19(); /* read temp storage m002*/

      FG0JW00.FG0JWPIX = 1;
      while (FG0JW00.FG0JWPIX <= FG0JW06.FG0JWNLD
       && FG0JW04.FG0JWDPS == "N")

        /* ------------------------------------------------------------*/
        /* Load temporary storage detail data according to record type*/
        /* ------------------------------------------------------------*/

        if (FG0JW06.FG0JWRCD[FG0JWPIX] == "1") /* style group sdesc*/
          FG0JW04.FG0JWSLF = "Y";
          FG0JW05.FG0JWSGP = FG0JW06.FG0JWDTL[FG0JWPIX];
          FG0JW01.FG0JWHSG = FG0JW05.FG0JWSSD;
        end

        if (FG0JW04.FG0JWSLF == "Y"
         && FG0JW06.FG0JWRCD[FG0JWPIX] == "2") /* sty nbr/clr/dim abrv*/

          FG0JW05.FG0JWSNB = FG0JW06.FG0JWDTL[FG0JWPIX];

          FG0JW03.FG0JWHC1[FG0JWIDX] = FG0JW05.FG0JWSCD[1];
          FG0JW00.FG0JWSDN = FG0JW05.FG0JWSSN[1]; /* style nbr*/
          FG0JW00.FG0JWCLR = FG0JW05.FG0JWSCI[1]; /* color id*/
          FG0JW00.FG0JWDIM = FG0JW05.FG0JWSDC[1]; /* dim cd*/
          FG0JW00.FG0JWFL1 = "-";
          FG0JW00.FG0JWFL2 = "-";
          FG0JW03.FG0JWHN1[FG0JWIDX] = FG0JW00.FG0JWSDS;
          FG0JW03.FG0JWHC2[FG0JWIDX] = FG0JW05.FG0JWSCD[2];
          FG0JW00.FG0JWSDN = FG0JW05.FG0JWSSN[2]; /* style nbr*/
          FG0JW00.FG0JWCLR = FG0JW05.FG0JWSCI[2]; /* color id*/
          FG0JW00.FG0JWDIM = FG0JW05.FG0JWSDC[2]; /* dim cd*/
          FG0JW00.FG0JWFL1 = "-";
          FG0JW00.FG0JWFL2 = "-";
          FG0JW03.FG0JWHN2[FG0JWIDX] = FG0JW00.FG0JWSDS;
          FG0JW03.FG0JWHC3[FG0JWIDX] = FG0JW05.FG0JWSCD[3];
          FG0JW00.FG0JWSDN = FG0JW05.FG0JWSSN[3]; /* style nbr*/
          FG0JW00.FG0JWCLR = FG0JW05.FG0JWSCI[3]; /* color id*/
          FG0JW00.FG0JWDIM = FG0JW05.FG0JWSDC[3]; /* dim cd*/
          FG0JW00.FG0JWFL1 = "-";
          FG0JW00.FG0JWFL2 = "-";
          FG0JW03.FG0JWHN3[FG0JWIDX] = FG0JW00.FG0JWSDS;
          FG0JW03.FG0JWHC4[FG0JWIDX] = FG0JW05.FG0JWDCD[1];
          FG0JW00.FG0JWSDN = FG0JW05.FG0JWDSN[1]; /* style nbr*/
          FG0JW00.FG0JWCLR = FG0JW05.FG0JWDCI[1]; /* color id*/
          FG0JW00.FG0JWDIM = FG0JW05.FG0JWDDC[1]; /* dim cd*/
          FG0JW00.FG0JWFL1 = "-";
          FG0JW00.FG0JWFL2 = "-";
          FG0JW03.FG0JWHN4[FG0JWIDX] = FG0JW00.FG0JWSDS;
          FG0JW03.FG0JWHC5[FG0JWIDX] = FG0JW05.FG0JWDCD[2];
          FG0JW00.FG0JWSDN = FG0JW05.FG0JWDSN[2]; /* style nbr*/
          FG0JW00.FG0JWCLR = FG0JW05.FG0JWDCI[2]; /* color id*/
          FG0JW00.FG0JWDIM = FG0JW05.FG0JWDDC[2]; /* dim cd*/
          FG0JW00.FG0JWFL1 = "-";
          FG0JW00.FG0JWFL2 = "-";
          FG0JW03.FG0JWHN5[FG0JWIDX] = FG0JW00.FG0JWSDS;
          FG0JW03.FG0JWHC6[FG0JWIDX] = FG0JW05.FG0JWDCD[3];
          FG0JW00.FG0JWSDN = FG0JW05.FG0JWDSN[3]; /* style nbr*/
          FG0JW00.FG0JWCLR = FG0JW05.FG0JWDCI[3]; /* color id*/
          FG0JW00.FG0JWDIM = FG0JW05.FG0JWDDC[3]; /* dim cd*/
          FG0JW00.FG0JWFL1 = "-";
          FG0JW00.FG0JWFL2 = "-";
          FG0JW03.FG0JWHN6[FG0JWIDX] = FG0JW00.FG0JWSDS;

          FG0JW03.FG0JWHQ1[FG0JWIDX] = FG0JW05.FG0JWHSQ[1];
          FG0JW03.FG0JWHQ2[FG0JWIDX] = FG0JW05.FG0JWHSQ[2];
          FG0JW03.FG0JWHQ3[FG0JWIDX] = FG0JW05.FG0JWHSQ[3];
          FG0JW03.FG0JWHP1[FG0JWIDX] = FG0JW05.FG0JWSPT[1];
          FG0JW03.FG0JWHP2[FG0JWIDX] = FG0JW05.FG0JWSPT[2];
          FG0JW03.FG0JWHP3[FG0JWIDX] = FG0JW05.FG0JWSPT[3];

          FG0JW03.FG0JWDQ1[FG0JWIDX] = FG0JW05.FG0JWHDQ[1];
          FG0JW03.FG0JWDQ2[FG0JWIDX] = FG0JW05.FG0JWHDQ[2];
          FG0JW03.FG0JWDQ3[FG0JWIDX] = FG0JW05.FG0JWHDQ[3];
          FG0JW03.FG0JWDP1[FG0JWIDX] = FG0JW05.FG0JWDPT[1];
          FG0JW03.FG0JWDP2[FG0JWIDX] = FG0JW05.FG0JWDPT[2];
          FG0JW03.FG0JWDP3[FG0JWIDX] = FG0JW05.FG0JWDPT[3];

          /* ------------------------------------------------------------*/
           /* update/add temporary storage historical data*/
          /* ------------------------------------------------------------*/

          if (FG0JW00.FG0JWIDX > 4)
            FG0J261(); /* add to temp storage history*/
          else
            FG0JW00.FG0JWIDX = FG0JW00.FG0JWIDX + 1;
          end
        end

        FG0JW00.FG0JWPIX = FG0JW00.FG0JWPIX + 1;
      end
      FG0JW04.XXXTSPAG = FG0JW04.XXXTSPAG + 1;
    end

    if (FG0JW04.FG0JWSLF == "Y"
     && FG0JW06.FG0JWRCD[FG0JWPIX] == "3") /* total per style group*/
      FG0JW05.FG0JWTOT = FG0JW06.FG0JWDTL[FG0JWPIX];

      FG0JW07.FG0JWHSQ[1] = FG0JW05.FG0JWTHS[1];
      FG0JW07.FG0JWHSQ[2] = FG0JW05.FG0JWTHS[2];
      FG0JW07.FG0JWHSQ[3] = FG0JW05.FG0JWTHS[3];
      FG0JW07.FG0JWHSP[1] = FG0JW05.FG0JWTSP[1];
      FG0JW07.FG0JWHSP[2] = FG0JW05.FG0JWTSP[2];
      FG0JW07.FG0JWHSP[3] = FG0JW05.FG0JWTSP[3];

      FG0JW07.FG0JWHDQ[1] = FG0JW05.FG0JWTHD[1];
      FG0JW07.FG0JWHDQ[2] = FG0JW05.FG0JWTHD[2];
      FG0JW07.FG0JWHDQ[3] = FG0JW05.FG0JWTHD[3];
      FG0JW07.FG0JWHDP[1] = FG0JW05.FG0JWTDP[1];
      FG0JW07.FG0JWHDP[2] = FG0JW05.FG0JWTDP[2];
      FG0JW07.FG0JWHDP[3] = FG0JW05.FG0JWTDP[3];

      FG0JW04.FG0JWDPS = "Y"; /* all data passed*/
    end

    /* ------------------------------------------------------------*/
    /* If data load index is greater 1 but less than 4 temp storage*/
    /* must be added*/
    /* ------------------------------------------------------------*/

    if (FG0JW00.FG0JWIDX > 1)
      FG0JW00.FG0JWIDX = FG0JW00.FG0JWIDX - 1;

      FG0J261(); /* add to temp storage historical data*/

    end
  end


end // end FG0J260

// add temp storage history data
Function FG0J261()
   /* ------------------------------------------------------------*/
   /* Add to temporary storage historical data*/
   /* ------------------------------------------------------------*/

  FG0JW03.FG0JWNLD = FG0JW00.FG0JWIDX;
  FG0JW03.FG0JWHTX = FG0JW00.FG0JWIDX + 1;

  FG0JS23(); /* add temp storage history*/


end // end FG0J261

// Proc actual sales
Function FG0JS-100()
   /* ------------------------------------------------------------*/
   /* Obtain actual need month sales quantities.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Obtain dfhist.vsyshp01 need month sales.*/
   /* ------------------------------------------------------------*/
  FG0JS-110();
  FG0JW04.FG0JWUHS = FH5REC.FH5MSHQT;

   /* --------------------------------------------------------*/
   /* Check for carryover*/
   /* --------------------------------------------------------*/


  if (FG0JW04.FG0JW-CURR-MO-MINUS1 <= FFFREC.FFFENDMO
   && FG0JW04.FG0JW-CURR-MO-MINUS1 >= FFFREC.FFFBEGMO)
    FG0JW04.FG0JW-WORK-BEG-MO = FFFREC.FFFBEGMO;
    FG0JW04.FG0JW-WORK-END-MO = FFFREC.FFFENDMO;
    FFFREC.FFFBEGMO = FG0JW04.FG0JW-CURR-MO-MINUS1;
    FFFREC.FFFENDMO = FG0JW04.FG0JW-CURR-MO-MINUS1;

    set FH1REC empty;
    FH1REC.YSMXOT = "FT";
    FG0JS-120(); /* get open qtys from voqsty01*/
    FH1REC.FH1PAQTY = mathLib.round((FH1REC.FH1PAQTY + FH1REC.FH1ALQTY)     * FG0JW04.FFQLCOFP / 100, -mathLib.decimals(FH1REC.FH1PAQTY));
    FG0JW04.FG0JWUHS = FG0JW04.FG0JWUHS + FH1REC.FH1PAQTY;

    set FH1REC empty;
    FH1REC.YSMXOT = "PR";
    FG0JS-120(); /* get open qtys from voqsty01*/
    FH1REC.FH1PAQTY = mathLib.round((FH1REC.FH1PAQTY + FH1REC.FH1ALQTY)     * FG0JW04.FFQLCOPP / 100, -mathLib.decimals(FH1REC.FH1PAQTY));
    FG0JW04.FG0JWUHS = FG0JW04.FG0JWUHS + FH1REC.FH1PAQTY;

    FFFREC.FFFBEGMO = FG0JW04.FG0JW-WORK-BEG-MO;
    FFFREC.FFFENDMO = FG0JW04.FG0JW-WORK-END-MO;
  end

  if (FG0JW04.FG0JW-CURR-MO-MINUS2 <= FFFREC.FFFENDMO
   && FG0JW04.FG0JW-CURR-MO-MINUS2 >= FFFREC.FFFBEGMO)
    FG0JW04.FG0JW-WORK-BEG-MO = FFFREC.FFFBEGMO;
    FG0JW04.FG0JW-WORK-END-MO = FFFREC.FFFENDMO;
    FFFREC.FFFBEGMO = FG0JW04.FG0JW-CURR-MO-MINUS2;
    FFFREC.FFFENDMO = FG0JW04.FG0JW-CURR-MO-MINUS2;

    set FH1REC empty;
    FH1REC.YSMXOT = "FT";
    FG0JS-120(); /* get open qtys from voqsty01*/
    FH1REC.FH1PAQTY = mathLib.round((FH1REC.FH1PAQTY + FH1REC.FH1ALQTY)     * FG0JW04.FFQOCOFP / 100, -mathLib.decimals(FH1REC.FH1PAQTY));
    FG0JW04.FG0JWUHS = FG0JW04.FG0JWUHS + FH1REC.FH1PAQTY;

    set FH1REC empty;
    FH1REC.YSMXOT = "PR";
    FG0JS-120(); /* get open qtys from voqsty01*/
    FH1REC.FH1PAQTY = mathLib.round((FH1REC.FH1PAQTY + FH1REC.FH1ALQTY)     * FG0JW04.FFQOCOPP / 100, -mathLib.decimals(FH1REC.FH1PAQTY));
    FG0JW04.FG0JWUHS = FG0JW04.FG0JWUHS + FH1REC.FH1PAQTY;

    FFFREC.FFFBEGMO = FG0JW04.FG0JW-WORK-BEG-MO;
    FFFREC.FFFENDMO = FG0JW04.FG0JW-WORK-END-MO;
  end

  if (FG0JW04.FG0JW-CURR-MO-MINUS3 <= FFFREC.FFFENDMO
   && FG0JW04.FG0JW-CURR-MO-MINUS3 >= FFFREC.FFFBEGMO)
    FG0JW04.FG0JW-WORK-BEG-MO = FFFREC.FFFBEGMO;
    FG0JW04.FG0JW-WORK-END-MO = FFFREC.FFFENDMO;
    FFFREC.FFFBEGMO = FG0JW04.FG0JW-CURR-MO-MINUS3;
    FFFREC.FFFENDMO = FG0JW04.FG0JW-CURR-MO-MINUS3;

    set FH1REC empty;
    FH1REC.YSMXOT = "*";
    FG0JS-120(); /* get open qtys from voqsty01*/
    FH1REC.FH1PAQTY = FH1REC.FH1ALQTY + FH1REC.FH1PAQTY;
    FH1REC.FH1PAQTY = mathLib.round(FH1REC.FH1PAQTY * .5, -mathLib.decimals(FH1REC.FH1PAQTY));
    FG0JW04.FG0JWUHS = FG0JW04.FG0JWUHS + FH1REC.FH1PAQTY;

    FFFREC.FFFBEGMO = FG0JW04.FG0JW-WORK-BEG-MO;
    FFFREC.FFFENDMO = FG0JW04.FG0JW-WORK-END-MO;
  end

  if (FG0JW04.FG0JW-CURR-MO-MINUS4 <= FFFREC.FFFENDMO
   && FG0JW04.FG0JW-CURR-MO-MINUS4 >= FFFREC.FFFBEGMO)
    FG0JW04.FG0JW-WORK-BEG-MO = FFFREC.FFFBEGMO;
    FG0JW04.FG0JW-WORK-END-MO = FFFREC.FFFENDMO;
    FFFREC.FFFBEGMO = FG0JW04.FG0JW-CURR-MO-MINUS4;
    FFFREC.FFFENDMO = FG0JW04.FG0JW-CURR-MO-MINUS4;

    set FH1REC empty;
    FH1REC.YSMXOT = "*";
    FG0JS-120(); /* get open qtys from voqsty01*/
    FH1REC.FH1PAQTY = FH1REC.FH1ALQTY + FH1REC.FH1PAQTY;
    FH1REC.FH1PAQTY = mathLib.round(FH1REC.FH1PAQTY * .5, -mathLib.decimals(FH1REC.FH1PAQTY));
    FG0JW04.FG0JWUHS = FG0JW04.FG0JWUHS + FH1REC.FH1PAQTY;

    FFFREC.FFFBEGMO = FG0JW04.FG0JW-WORK-BEG-MO;
    FFFREC.FFFENDMO = FG0JW04.FG0JW-WORK-END-MO;
  end


end // end FG0JS-100

// Obtain dfhist.vsyshp01 sls
Function FG0JS-110()
   /* ------------------------------------------------------------*/
   /* Obtain historical need month based sales quantities.*/
   /* Load fh5rec record - dfhist.vsyshp01.*/
   /* ------------------------------------------------------------*/

  set FH5REC empty;

  FH5REC.SY1STNBR = PG2REC.SY1STNBR;
  FH5REC.SY2CLRID = PG2REC.SY2CLRID;
  FH5REC.XDMCD = PG2REC.XDMCD;
  FH5REC.XLCCD = "10"; /* life cycle code*/
  FH5REC.XQACD = "01"; /* quality code*/
  FH5REC.YSMXOT = "*"; /* sum code*/
  FH5REC.FH1PNAC = "*"; /* national account flag*/
  FH5REC.XPRCD = FFWREC.YPGCD; /* product code*/

  TA1PGMNM = "G0JS110"; /* calling process*/

   /* --------------------------------------------------*/
   /* select on dfhist.vsyshp01 table*/
   /* --------------------------------------------------*/

  FFFREC.FFFFUNCD = "NS";

  XSFFS54();


end // end FG0JS-110

// Fetch dfhist.voqsty01 caov qty
Function FG0JS-120()
   /* ------------------------------------------------------------*/
   /* Obtain carryover quantities from dfhist.voqcat01*/
   /* Beginning and ending dates are set in calling process.*/
   /* ------------------------------------------------------------*/

  FH1REC.SY1STNBR = PG2REC.SY1STNBR; /* style number*/
  FH1REC.SY2CLRID = PG2REC.SY2CLRID; /* color cd*/
  FH1REC.XDMCD = PG2REC.XDMCD; /* dim cd*/
  FH1REC.XLCCD = "10"; /* life cycle code*/
  FH1REC.XQACD = "01"; /* quality code*/
  FH1REC.FH1PNAC = "*"; /* product national acct fl*/

  FFFREC.FFFFUNCD = "SC"; /* Summarize by style group*/

  try
    call "FF5570" (FFFREC, SQLCA, FH1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Sum quantities*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
    )                           
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUMMARIZE VOQSTY01 QUANTITIES";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFHIST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VOQSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FH1REC.FH1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0JS-120

// Proc actual demand
Function FG0JS-200()
   /* ------------------------------------------------------------*/
   /* Process actual demand quantities from dfhist.vfhsty01 and*/
   /* dfhist.voqsty01.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If the ending date lt 199206*/
   /* Get accumulated prop and futures from  dfhist.vfhsty01*/
   /* Get open prop and futures from dfhist.voqsty01*/
   /* Otherwise, if the beginning date ge 199206*/
   /* Get frozen authorized futures from dfhist.vfhsty01*/
   /* Get accumulated prop from dfhist.vfhsty01*/
   /* Get open prop quantities from dfhist.voqsty01*/
   /* Otherwise, it's a mixed date range*/
   /* For dates lt 199206 get accumulated prop and futures from*/
   /* dfhist.vfhsty01 and accumulated prop and futures from*/
   /* dfhist.voqsty01*/
   /* For dates ge 199206 get frozen authorixed futures,*/
   /* accumulated prop, and prop open quantities.*/
   /* ------------------------------------------------------------*/

  if (FFFREC.FFFENDMO < 199206) /* Whole range before 199206*/

    set FH2REC empty; /* intialize vfhsty01 record*/
    FH2REC.YSMXOT = "*"; /* get futr & prop accum qty*/
    FG0JS-210();
    FG0JW04.FG0JWUHD = FH2REC.FH2SHP + FH2REC.FH2CUCXL +     FH2REC.FH2CRCXL + FH2REC.FH2PRCXL + FH2REC.FH2SLCXL;

    set FH1REC empty; /* intialize voqsty01 record*/
    FH1REC.YSMXOT = "*"; /* get futr & prop open qty*/
    FG0JS-220();
    FG0JW04.FG0JWUHD = FH1REC.FH1PAQTY + FH1REC.FH1ALQTY +     FG0JW04.FG0JWUHD;

  else
    if (FFFREC.FFFBEGMO >= 199206) /* Whole range beyond 199206*/

      set FH1REC empty; /* intialize voqsty01 record*/
      FH1REC.YSMXOT = "PR"; /* get prop open qty*/
      FG0JS-220();
      FG0JW04.FG0JWUHD = FH1REC.FH1PAQTY + FH1REC.FH1ALQTY;

      set FH2REC empty; /* intialize vfhsty01 record*/
      FH2REC.YSMXOT = "PR"; /* get prop accum qty*/
      FG0JS-210();
      FG0JW04.FG0JWUHD = FG0JW04.FG0JWUHD + FH2REC.FH2SHP +       FH2REC.FH2CUCXL + FH2REC.FH2CRCXL +       FH2REC.FH2PRCXL + FH2REC.FH2SLCXL;

      set FH2REC empty; /* intialize vfhsty01 record*/
      FH2REC.YSMXOT = "FT"; /* get futr frozen qty*/
      FG0JS-210();
      FG0JW04.FG0JWUHD = FG0JW04.FG0JWUHD + FH2REC.FH-FRZ-PRAL-QTY       + FH2REC.FH-FRZ-ALOC-QTY + FH2REC.FH-FRZ-SHP-QTY       + FH2REC.FH-FRZ-CUSTCNCLQTY + FH2REC.FH-FRZ-CR-CNCL-QTY       + FH2REC.FH-FRZ-PRDCTN-CNCL + FH2REC.FH-FRZ-SLSCNCL-QTY;

    else
      FG0JW04.FG0JW-WORK-BEG-MO = FFFREC.FFFBEGMO;
      FG0JW04.FG0JW-WORK-END-MO = FFFREC.FFFENDMO;

      /* get demand quantities prior to 199206*/

      FFFREC.FFFENDMO = 199205;
      set FH1REC empty; /* intialize voqsty01 record*/
      FH1REC.YSMXOT = "*"; /* get futr & prop open qty*/
      FG0JS-220();
      FG0JW04.FG0JWUHD = FH1REC.FH1PAQTY + FH1REC.FH1ALQTY;

      set FH2REC empty; /* intialize vfhsty01 record*/
      FH2REC.YSMXOT = "*"; /* get futr & prop accum qty*/
      FG0JS-210();
      FG0JW04.FG0JWUHD = FG0JW04.FG0JWUHD + FH2REC.FH2SHP +       FH2REC.FH2CUCXL + FH2REC.FH2CRCXL +       FH2REC.FH2PRCXL + FH2REC.FH2SLCXL;

      /* get demand quantities for 199206 and forward*/

      FFFREC.FFFBEGMO = 199206;
      FFFREC.FFFENDMO = FG0JW04.FG0JW-WORK-END-MO;

      set FH1REC empty; /* intialize voqsty01 record*/
      FH1REC.YSMXOT = "PR"; /* get prop open qty*/
      FG0JS-220();
      FG0JW04.FG0JWUHD = FH1REC.FH1PAQTY + FH1REC.FH1ALQTY +       FG0JW04.FG0JWUHD;

      set FH2REC empty; /* intialize vfhsty01 record*/
      FH2REC.YSMXOT = "PR"; /* get prop accum qty*/
      FG0JS-210();
      FG0JW04.FG0JWUHD = FG0JW04.FG0JWUHD + FH2REC.FH2SHP +       FH2REC.FH2CUCXL + FH2REC.FH2CRCXL +       FH2REC.FH2PRCXL + FH2REC.FH2SLCXL;

      set FH2REC empty; /* intialize vfhsty01 record*/
      FH2REC.YSMXOT = "FT"; /* get futr frozen qty*/
      FG0JS-210();
      FG0JW04.FG0JWUHD = FG0JW04.FG0JWUHD + FH2REC.FH-FRZ-PRAL-QTY       + FH2REC.FH-FRZ-ALOC-QTY + FH2REC.FH-FRZ-SHP-QTY       + FH2REC.FH-FRZ-CUSTCNCLQTY + FH2REC.FH-FRZ-CR-CNCL-QTY       + FH2REC.FH-FRZ-PRDCTN-CNCL + FH2REC.FH-FRZ-SLSCNCL-QTY;

      FFFREC.FFFBEGMO = FG0JW04.FG0JW-WORK-BEG-MO;
      FFFREC.FFFENDMO = FG0JW04.FG0JW-WORK-END-MO;
    end
  end


end // end FG0JS-200

// Fetch dfhist.vfhsty01 row
Function FG0JS-210()
   /* ----------------------------------------------------------------*/
   /* Fetch demand quantities from dfhist.vfhsty01.*/
   /* ----------------------------------------------------------------*/

   /* ----------------------------------------------------------------*/
   /* Load fh2rec record - dfhist.vfhsty01*/
   /* ----------------------------------------------------------------*/

  FH2REC.SY1STNBR = PG2REC.SY1STNBR; /* style number*/
  FH2REC.SY2CLRID = PG2REC.SY2CLRID; /* color cd*/
  FH2REC.XDMCD = PG2REC.XDMCD; /* dim cd*/
  FH2REC.XLCCD = "10"; /* life cycle code*/
  FH2REC.XQACD = "01"; /* quality code*/
  FH2REC.FH1PNAC = "*"; /* product national acct fl*/

   /* --------------------------------------------------*/
   /* Select sum on dfhist.vfhsty01.*/
   /* --------------------------------------------------*/

  FFFREC.FFFFUNCD = "SC"; /* Summarize by style group*/
  TA1REC.TA1PGMNM = "S-210  "; /* Calling process*/

  XSFFS53();

end // end FG0JS-210

// Fetch dfhist.voqsty01 row
Function FG0JS-220()
   /* ------------------------------------------------------------*/
   /* Sum quantities in the order history by style/color table.*/
   /* ------------------------------------------------------------*/

  FH1REC.SY1STNBR = PG2REC.SY1STNBR; /* Style number*/
  FH1REC.SY2CLRID = PG2REC.SY2CLRID; /* Color identification*/
  FH1REC.XDMCD = PG2REC.XDMCD; /* Dimension code*/
  FH1REC.XLCCD = "10"; /* Life cycle code*/
  FH1REC.XQACD = "01"; /* Quality code*/
  FH1REC.FH1PNAC = "*"; /* National account flag*/

  FFFREC.FFFFUNCD = "SC"; /* Function code*/

  try
    call "FF5570" (FFFREC, SQLCA, FH1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Sum quantities*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* or no rows selected*/
      if (SQLCA.VAGen_SQLCODE == -305)
        FH1REC.FH1PAQTY = 0; /* initialize pre-alloc qty*/
        FH1REC.FH1ALQTY = 0; /* initialize alloc qty*/
      end

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  FFWREC.XXXMODID = "220"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SUMMARIZE VOQSTY01 QUANTITIES";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFHIST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VOQSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FH1REC.FH1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0JS-220

// Obtain forecasted sales qty
Function FG0JS-300()
   /* ----------------------------------------------------------*/
   /* Obtain forecast sales from dfcast.vmsty001*/
   /* ----------------------------------------------------------*/

  FG0JS05(); /* obtain fcst sls*/

  FG0JW04.FG0JWUHS = FF9REC.FF6SLFCT;

   /* --------------------------------------------------------*/
   /* Determine if carryover quantities need to be backed out.*/
   /* --------------------------------------------------------*/

  if (FG0JW04.FG0JW-CURR-MO >= FFFREC.FFFBEGMO
   && FG0JW04.FG0JW-CURR-MO <= FFFREC.FFFENDMO)
    FG0JW04.FG0JW-WORK-BEG-MO = FFFREC.FFFBEGMO;
    FG0JW04.FG0JW-WORK-END-MO = FFFREC.FFFENDMO;

    FFFREC.FFFBEGMO = FG0JW04.FG0JW-CURR-MO-MINUS1;
    FFFREC.FFFENDMO = FG0JW04.FG0JW-CURR-MO-MINUS1;
    FG0JS05(); /* obtain fcst sls*/
    FG0JW04.FG0JWUHS = FG0JW04.FG0JWUHS - FF9REC.FF6SLFCT;

    FFFREC.FFFBEGMO = FG0JW04.FG0JW-WORK-BEG-MO;
    FFFREC.FFFENDMO = FG0JW04.FG0JW-WORK-END-MO;
  end


end // end FG0JS-300

// Obtain forecasted demand qty
Function FG0JS-400()
   /* ----------------------------------------------------------*/
   /* Obtain forecasted demand quantity.*/
   /* ----------------------------------------------------------*/

   /* ----------------------------------------------------------*/
   /* Init numeric work fields*/
   /* ----------------------------------------------------------*/

  FG0JW00.FG0JWNM1 = 0; /* init numeric work field*/

   /* --------------------------------------------------------*/
   /* Calculate history dmnd  # yr prior:*/
   /* --------------------------------------------------------*/

  FG0JW00.FG0JWWDT = FFFREC.FFFBEGMO;
  while (FG0JW00.FG0JWWDT <= FFFREC.FFFENDMO)

    if (FG0JW00.FG0JWWDT == FG0JW04.FG0JW-CURR-MO) /* current month*/
      FG0JS-410(); /* process current month*/
    else
      if (FG0JW00.FG0JWWDT <= FG0JW04.FG0JWBDT) /* month before buy month*/
        FG0JS-420(); /* proc months between curr and buy*/
      else
        FG0JS-430(); /* process after buy month*/
      end
    end

    FG0JW04.FG0JWUHD = FG0JW04.FG0JWUHD + FG0JW00.FG0JWNM1;

    if (FG0JW00.FG0JWWMM == 12)
      FG0JW00.FG0JWWMM = 1;
      if (FG0JW00.FG0JWWYY == 99)
        FG0JW00.FG0JWWYY = 0;
        FG0JW00.FG0JWWCC = FG0JW00.FG0JWWCC + 1;
      else
        FG0JW00.FG0JWWYY = FG0JW00.FG0JWWYY + 1;
      end
    else
      FG0JW00.FG0JWWMM = FG0JW00.FG0JWWMM + 1;
    end
  end


end // end FG0JS-400

// Calc curr mo demand
Function FG0JS-410()
   /* -------------------------------------------------------------------*/
   /* Demand fcst for current month =*/
   /* (sls of current month - sls of previous month) /*/
   /* fill rate from VMSTY01*/
   /* -------------------------------------------------------------------*/

  set FF9REC empty; /* clear table row*/

  FF9REC.FF4FCTMO = FG0JW04.FG0JW-CURR-MO-MINUS1; /* prev month*/
  FG0JS25(); /* select 's' dfcast.vmsty001*/
  FG0JW00.FG0JWNM1 = FF9REC.FF6SLFCT;

  FF9REC.FF4FCTMO = FG0JW04.FG0JW-CURR-MO; /* current month*/
  FG0JS25(); /* select 's' dfcast.vmsty001*/

  if (FF9REC.FF7FLLRT != 0)
    FG0JW00.FG0JWNM1 = FF9REC.FF6SLFCT - FG0JW00.FG0JWNM1;
    FG0JW00.FG0JWNM1 = FG0JW00.FG0JWNM1 * 100 / FF9REC.FF7FLLRT;
  else
    FG0JW00.FG0JWNM1 = 0;
  end

end // end FG0JS-410

// Calc curr thru buy mo demand
Function FG0JS-420()
   /* -----------------------------------------------------*/
   /* Demand fcst for current thru buy month =*/
   /* sls of process month / fill rate from VMSTY001*/
   /* -----------------------------------------------------*/

  set FF9REC empty; /* clear table row*/

  FF9REC.FF4FCTMO = FG0JW00.FG0JWWDT;
  FG0JS25(); /* select 's' dfcast.vmsty01*/

  if (FF9REC.FF7FLLRT != 0)
    FG0JW00.FG0JWNM1 = FF9REC.FF6SLFCT * 100 / FF9REC.FF7FLLRT;
  else
    FG0JW00.FG0JWNM1 = 0;
  end

end // end FG0JS-420

// Calc buy + 1 mo demand
Function FG0JS-430()
   /* -------------------------------------------------------*/
   /* Demand after buy month = sls / fill rate from VMCAT01*/
   /* -------------------------------------------------------*/

  set FF9REC empty; /* clear table row*/
  FF9REC.FF4FCTMO = FG0JW00.FG0JWWDT;

  FG0JS25(); /* select 's' dfcast.vmssty01*/

  FG0JS26(); /* select 's' dfcast.vmcat001*/

  if (FF7REC.FF7FLLRT != 0)
    FG0JW00.FG0JWNM1 = FF9REC.FF6SLFCT * 100 / FF7REC.FF7FLLRT;
  else
    FG0JW00.FG0JWNM1 = 0;
  end

end // end FG0JS-430

// purge temporary storage m001
Function FG0JS01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FG0JW02 empty; /* M001 temporary storage detail*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FG0JW01.FG0JW1PM = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "FGJ1"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FG0JW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0JS01

// purge temp storage history
Function FG0JS02()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FG0JW03 empty; /* M001 temporary storage detail*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FG0JW01.FG0JW2PM = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "FGJ2"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FG0JW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S02"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0JS02

// select/sum dfcast.vmsty001
Function FG0JS05()
   /* ------------------------------------------------------------*/
   /* Select sum on dfcast.vmsty001 table.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Load fffrec record*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "SS"; /* function code*/

   /* ------------------------------------------------------------*/
   /* Load ff9rec record - dfcast.vmsty0001*/
   /* ------------------------------------------------------------*/

  set FF9REC empty; /* Clear row storage area*/

  FF9REC.SY1STNBR = PG2REC.SY1STNBR; /* style nbr*/
  FF9REC.SY2CLRID = PG2REC.SY2CLRID; /* style color id*/
  FF9REC.XDMCD = PG2REC.XDMCD; /* dimension code*/
  FF9REC.XCTCD = "USA"; /* country code*/
  FF9REC.YSMXDV = "10"; /* div code*/

   /* ------------------------------------------------------------*/
   /* Select sum dfcast.vmsty0001*/
   /* ------------------------------------------------------------*/

  try
    call "IO3740" (FFFREC, SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or zero total, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -305) /* zero total returned*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indisty0e that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S05"; /* Module identifisty0ion*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indisty0e not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indisty0e system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SUM TABLE DFCAST.VMSTY001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program applisty0ion*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0JS05

// select dfcast.vwsty001 row
Function FG0JS06()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vwsty001 table.*/
   /* ------------------------------------------------------------*/

  set FFNREC empty; /* Clear row storage area*/

  FFNREC.FFEWSNBR = FFWREC.FFEWSNBR;
  FFNREC.SY1STNBR = FG0JW02.FG0JWSDS[FG0JWIDX];
  FFNREC.SY2CLRID = FG0JW02.SY2CLRID[FG0JWIDX];
  FFNREC.XDMCD = FG0JW02.XDMCD[FG0JWIDX];

   /* ------------------------------------------------------------*/
   /* select dfcast.vwsty001*/
   /* ------------------------------------------------------------*/

  try
    call "IO3860" ("S ", SQLCA, FFNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indisty0e that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S06"; /* Module identifisty0ion*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indisty0e not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indisty0e system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VWSTY001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program applisty0ion*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFNREC.FFNKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0JS06

// add temporary storage m001
Function FG0JS07()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FG0JW02.XXXTSLEN = FG0JW00.FG0JWTL1;
  TA5REC.TA5APPID = "FGJ1"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FG0JW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FG0JW02 empty; /* M001 display storage*/

    FG0JW00.FG0JWIDX = 1; /* Display line index*/

    FG0JW01.FG0JW1PM = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S07"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0JS07

// read temporary storage m001
Function FG0JS09()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "FGJ1"; /* Application identification*/
  FG0JW02.XXXTSLEN = FG0JW00.FG0JWTL1;
  TA5REC.TA5TSQIX = FG0JW01.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FG0JW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S09"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0JS09

// update temporary storage m001
Function FG0JS10()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  FG0JW02.XXXTSLEN = FG0JW00.FG0JWTL1;
  TA5REC.TA5APPID = "FGJ1";
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (FG0JW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S10"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0JS10

// verify modifiable fields
Function FG0JS11()
   /* -----------------------------------------------------*/
   /* Verify all detail modifiable fields except*/
   /* -----------------------------------------------------*/

  FG0JW00.FG0JWIDX = FG0JW02.FG0JWNLD; /* nbr of lines loaded*/

  while (FG0JW00.FG0JWIDX >= 1) /* process temp storage*/

    if (FG0JM001.FG0JMCPT[FG0JWIDX] != 0)
      set FG0JM001.FG0JMCPT[FG0JWIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S11";
    end
    if (FG0JM001.FG0JMSPT[FG0JWIDX] != FG0JW02.FG0JWSPT[FG0JWIDX]
     && FG0JW01.XXXTSPAG <= FG0JW01.FG0JW1PM)
      set FG0JM001.FG0JMSPT[FG0JWIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S11";
    end
    if (FG0JM001.FG0JMQTY[FG0JWIDX] != FG0JW02.FG0JWQTY[FG0JWIDX]
     && FG0JW01.XXXTSPAG <= FG0JW01.FG0JW1PM)
      set FG0JM001.FG0JMQTY[FG0JWIDX] cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S11";
    end

    FG0JW00.FG0JWIDX = FG0JW00.FG0JWIDX - 1; /* decrement table index*/

  end

   /* -----------------------------------------------------*/
   /* verify header modifiable fields*/
   /* -----------------------------------------------------*/

  if (FG0JM001.FG0JMCTQ != " ")
    set FG0JM001.FG0JMCTQ cursor, bold;
    converseLib.validationFailed(111);
    FFWREC.XXXMODID = "S11";
  end

  if (FG0JM001.FG0JMPCT != 0)
    set FG0JM001.FG0JMPCT cursor, bold;
    converseLib.validationFailed(111);
    FFWREC.XXXMODID = "S11";
  end

  if (converseVar.eventKey not enter)

    if (FG0JM001.SYBSTGNB != FFWREC.SYBSTGNB)
      set FG0JM001.SYBSTGNB cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S11";
    end

    if (FG0JM001.XPCCD != FFWREC.XPCCD)
      set FG0JM001.XPCCD cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S11";
    end

    if (FG0JM001.YPGCD != FFWREC.YPGCD)
      set FG0JM001.YPGCD cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S11";
    end
  end

  if (converseVar.eventKey not pf18
   && converseVar.eventKey not enter)

    if (FG0JM001.FG0JMHOP != FG0JW01.FG0JWHOP)
      set FG0JM001.FG0JMHOP cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S11";
    end

    if (FG0JM001.FG0JMYOP != FG0JW01.FG0JWYOP)
      set FG0JM001.FG0JMYOP cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S11";
    end
  end

  if (converseVar.eventKey not pf7
   && converseVar.eventKey not pf8
   && converseVar.eventKey not pf18
   && converseVar.eventKey not enter)
    if (FG0JM001.FG0JMSGT != FG0JW01.FG0JWSGT)
      set FG0JM001.FG0JMSGT cursor, bold;
      converseLib.validationFailed(111);
      FFWREC.XXXMODID = "S11";
    end
  end

  if (converseVar.eventKey not enter)

    FG0JW00.FG0JWWED = FFWREC.FFAENDMO;
    if (FG0JM001.FG0JMERG != FG0JW00.FG0JWEYM)
      set FG0JM001.FG0JMERG cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S11";
    end

    FG0JW00.FG0JWWBD = FFWREC.FFABEGMO;
    if (FG0JM001.FG0JMBRG != FG0JW00.FG0JWBYM)
      set FG0JM001.FG0JMBRG cursor, bold;
      converseLib.validationFailed(130);
      FFWREC.XXXMODID = "S11";
    end
  end


end // end FG0JS11

// update dfcast.vwltyp01 row
Function FG0JS13()
   /* ------------------------------------------------------------*/
   /* upd dfcast.vwltyp01 table row*/
   /* ------------------------------------------------------------*/

  FG0JW00.FG0JWNM1 = FG0JW07.FG0JWUQT - FFLREC.FF6SLFCT;
  FFIREC.FF6SLFCT = FFIREC.FF6SLFCT + FG0JW00.FG0JWNM1;

  FFIREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFIREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3910" ("U ", SQLCA, FFIREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FG0JW00.FG0JWSWR = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "S13"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S13"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DFCAST.VWLTYP01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWLTYP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFIREC.FFIKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0JS13

// update dfcast.vwcat001 row
Function FG0JS14()
   /* ------------------------------------------------------------*/
   /* upd dfcast.vwcat001 table row*/
   /* ------------------------------------------------------------*/

  FG0JW00.FG0JWNM1 = FG0JW07.FG0JWUQT - FFLREC.FF6SLFCT;
  FFJREC.FF6SLFCT = FFJREC.FF6SLFCT + FG0JW00.FG0JWNM1;
  FFJREC.FFECLRFL = "Y";

  FFJREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFJREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3840" ("U ", SQLCA, FFJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FG0JW00.FG0JWSWR = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "S14"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S14"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DFCAST.VWCAT001 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFJREC.FFJKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0JS14

// update dfcast.vwsgrp01 row
Function FG0JS15()
   /* ------------------------------------------------------------*/
   /* upd dfcast.vwsgrp01 table row*/
   /* ------------------------------------------------------------*/

  FFLREC.FFEFCTGT = FG0JW01.FG0JWUST;
  FFLREC.FF6SLFCT = FG0JW07.FG0JWUQT;
  FFLREC.FFECLRFL = "Y";
  FFLREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFLREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3880" ("U ", SQLCA, FFLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FG0JW00.FG0JWSWR = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "S15"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S15"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DFCAST.VWSGRP01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWSGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = FFLREC.FFLKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0JS15

// upd dfcast.vwsty001 row
Function FG0JS16()
   /* ------------------------------------------------------------*/
   /* upd dfcast.vwsty001 table row*/
   /* ------------------------------------------------------------*/

  FFNREC.FF6SLFCT = FG0JW02.FG0JWUQT[FG0JWIDX];
  FFNREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFNREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3860" ("U ", SQLCA, FFNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      FG0JW00.FG0JWSWR = "Y"; /* Request for data switch*/

      FFWREC.XXXMODID = "S16"; /* Module identification*/
      FFWREC.XXXMSGNO = 46; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S16"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DFCAST.VWSTY001 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFNREC.FFNKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0JS16

// add dfcast.vwsty001 row
Function FG0JS17()
   /* ------------------------------------------------------------*/
   /* add dfcast.vwsty001 table row*/
   /* ------------------------------------------------------------*/

  set FFNREC empty;

  FFNREC.FFEWSNBR = FFWREC.FFEWSNBR;
  FFNREC.SY1STNBR = FG0JW02.FG0JWSDS[FG0JWIDX];
  FFNREC.SY2CLRID = FG0JW02.SY2CLRID[FG0JWIDX];
  FFNREC.XDMCD = FG0JW02.XDMCD[FG0JWIDX];
  FFNREC.FF6SLFCT = FG0JW02.FG0JWUQT[FG0JWIDX];
  FFNREC.FF8DEVFL = FG0JW02.FF8DEVFL[FG0JWIDX];
  FFNREC.ZZZSDT = XX0XW01.XX0XWDAT;
  FFNREC.ZZZSTM = XX0XW01.XX0XWTIM;
  FFNREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  FFNREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO3860" ("A ", SQLCA, FFNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S17"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DFCAST.VWSTY001 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FFNREC.FFNKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0JS17

// purge excess work sheets
Function FG0JS18()
   /* ------------------------------------------------------------*/
   /* Purge excess forecast work sheets using routine xsffs60*/
   /* ------------------------------------------------------------*/

  FFEREC.YSMXDV = "10"; /* division code*/
  FFEREC.XCTCD = "USA"; /* country code*/
  FFEREC.FFABEGMO = FFWREC.FFABEGMO; /* begin range*/
  FFEREC.FFAENDMO = FFWREC.FFAENDMO; /* end   range*/
  TA1REC.TA1PGMNM = "FG0JS18"; /* process name*/

   /* ------------------------------------------------------------*/
   /* purge !!!!!*/
   /* ------------------------------------------------------------*/

  XSFFS61();


end // end FG0JS18

// read temporary storage m002
Function FG0JS19()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "FGJ3"; /* Application identification*/
  FG0JW06.XXXTSLEN = FG0JW00.FG0JWTL3;
  TA5REC.TA5TSQIX = FG0JW04.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FG0JW06, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S19"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0JS19

// check modifiable fields m002
Function FG0JS21()

   /* ------------------------------------------------------------*/
   /* check modifiable fields*/
   /* ------------------------------------------------------------*/

  if (FG0JM002.FG0JMSTY != FG0JW04.FG0JWSTY)
    set FG0JM002.FG0JMSTY cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "S21";
  end

  if (FG0JM002.FG0JMHOP != FG0JW04.FG0JWHO1)
    set FG0JM002.FG0JMHOP cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "S21";
  end

  if (FG0JM002.FG0JMYOP != FG0JW04.FG0JWYO1)
    set FG0JM002.FG0JMYOP cursor, bold;
    converseLib.validationFailed(130);
    FFWREC.XXXMODID = "S21";
  end


end // end FG0JS21

// purge temporary storage m002
Function FG0JS22()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set FG0JW06 empty; /* M002 temporary storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FG0JW04.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "FGJ3"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (FG0JW06, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S22"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0JS22

// add temp storage history
Function FG0JS23()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FG0JW03.XXXTSLEN = FG0JW00.FG0JWTL2;
  TA5REC.TA5APPID = "FGJ2"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FG0JW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FG0JW03 empty; /* M001 display storage*/

    FG0JW00.FG0JWIDX = 1; /* Display line index*/

    FG0JW01.FG0JW2PM = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S23"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0JS23

// read temp storage history
Function FG0JS24()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "FGJ2"; /* Application identification*/
  FG0JW03.XXXTSLEN = FG0JW00.FG0JWTL2;
  TA5REC.TA5TSQIX = FG0JW01.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (FG0JW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S24"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0JS24

// select 's' dfcast.vmsty001
Function FG0JS25()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vmsty001 row*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* load ff9rec record - dfcast.vmsty001*/
   /* ------------------------------------------------------------*/

  FF9REC.YSMXDV = "10"; /* div code*/
  FF9REC.SY1STNBR = PG2REC.SY1STNBR;
  FF9REC.SY2CLRID = PG2REC.SY2CLRID;
  FF9REC.XDMCD = PG2REC.XDMCD;
  FF9REC.XCTCD = "USA"; /* country code*/

   /* ------------------------------------------------------------*/
   /* Select dfcast.vmsty001*/
   /* ------------------------------------------------------------*/

  try
    call "IO3740" ("S ", SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or zero total, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indisgrpe that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S25"; /* Module identifisgrpion*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indisgrpe not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indisgrpe system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE DFCAST.VMSTY001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program applisgrpion*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMSTY001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0JS25

// select 's' dfcast.vmcat001
Function FG0JS26()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vmcat001 table.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* load ff7rec record - dfcast.vmcat001*/
   /* ------------------------------------------------------------*/

  set FF7REC empty; /* Clear row storage area*/

  FF7REC.YSMXDV = "10"; /* div code*/
  FF7REC.XCTCD = "USA"; /* country code*/
  FF7REC.YPGCD = FFWREC.YPGCD; /* product type code*/
  FF7REC.XPCCD = FFWREC.XPCCD; /* product cat code*/
  FF7REC.FF4FCTMO = FG0JW00.FG0JWWDT; /* fcst month*/

   /* ------------------------------------------------------------*/
   /* select dfcast.vmcat001*/
   /* ------------------------------------------------------------*/

  try
    call "IO3700" ("S ", SQLCA, FF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or zero total, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S26"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE DFCAST.VMCAT001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMCAT001"; /* Table view name*/
  TA1REC.TA1TBLKE = FF7REC.FF7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0JS26

// select dfcast.vffxrf01 row
Function FG0JS27()
   /* ------------------------------------------------------------*/
   /* Select dfcast.vffxrf01 table.*/
   /* ------------------------------------------------------------*/

  set FF2REC empty; /* Clear row storage area*/

  FF2REC.YSMXDV = "10";
  FF2REC.YPGCD = FG0JM001.YPGCD;
  FF2REC.XPCCD = FG0JM001.XPCCD;

   /* ------------------------------------------------------------*/
   /* select dfcast.vwltyp01*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S ", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S27"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT TABLE DFCAST.VFFXRF01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0JS27

// Validate year/history option
Function FG0JS29()
   /* ------------------------------------------------------------*/
   /* validate year/history option field*/
   /* ------------------------------------------------------------*/

  if (FG0JM001.FG0JMHOP != FG0JW01.FG0JWHOP
   || FG0JM001.FG0JMYOP != FG0JW01.FG0JWYOP)

    if (FG0JM001.FG0JMHOP != FG0JW01.FG0JWHOP)
      if (FG0JM001.FG0JMHOP != "S"
       && FG0JM001.FG0JMHOP != "D")
        converseLib.validationFailed(10);
        FFWREC.XXXMODID = "S29";
        set FG0JM001.FG0JMHOP cursor, bold;
      end
    end

    if (FG0JM001.FG0JMYOP != FG0JW01.FG0JWYOP)
      if (FG0JM001.FG0JMYOP != 1
       && FG0JM001.FG0JMYOP != 2
       && FG0JM001.FG0JMYOP != 3)
        converseLib.validationFailed(10);
        FFWREC.XXXMODID = "S29";
        set FG0JM001.FG0JMYOP cursor, bold;
      end
    end

    FG0JS11(); /* Check modifiable fields*/

  end

end // end FG0JS29

// select 's1' dprodg.vmxprc01
Function FG0JS33()
   /* ------------------------------------------------------------*/
   /* Select set on dprodg.vmxprc01 table.*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "S1";
  FFFREC.FFFBEGMO = FFWREC.FFABEGMO;
  FFFREC.FFFENDMO = FFWREC.FFAENDMO;

  PG7REC.XPCCD = FFWREC.XPCCD;
  PG7REC.YPGCD = FFWREC.YPGCD;
  PG7REC.YSMXDV = "10";

  try
    call "IO5100" (FFFREC, SQLCA, PG7REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S33"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S1 ON DPRODG.VMXPRC01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMXPRC01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG7REC.PG7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0JS33

// fetch 'n1' dprodg.vmxprc01
Function FG0JS34()
   /* ------------------------------------------------------------*/
   /* fetch dprodg.vmxprc01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO5100" ("N1", SQLCA, PG7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S34"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DPRODG.VMXPRC01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMXPRC01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG7REC.PG7KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0JS34

// close 'c1' dprodg.vmxprc01
Function FG0JS35()
   /* ------------------------------------------------------------*/
   /* close dprodg.vmxprc01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5100" ("C1", SQLCA, PG7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "S35"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C1 DPRODG.VMXPRC01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMXPRC01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG7REC.PG7KEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0JS35

// select 's2' dprodg.vsyclr01
Function FG0JS40()
   /* ------------------------------------------------------------*/
   /* Select set on dprodg.vsyclr01 table.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* load pg2rec record - dprodg.vsyclr01*/
   /* ------------------------------------------------------------*/

  PG2REC.XGPCD = COMMAREA.XGPCD; /* gpc code*/

   /* ------------------------------------------------------------*/
   /* select set dprodg.vsyclr01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S2", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S40"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S2 ON DPRODG.VSYCLR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0JS40

// select 'n2' dprodg.vsyclr01
Function FG0JS41()
   /* ------------------------------------------------------------*/
   /* fetch dprodg.vsyclr01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("N2", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      FG0JW05.SYBSTGNB = PG2REC.SYBSTGNB; /* Style group number*/
      FG0JW05.FG0JWSSD = PG2REC.SY1SSTNM; /* History sales*/
      FG0JW05.FG0JWDSD = PG2REC.SY1SSTNM; /* History demand*/

      return;

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* not found*/

        return;

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  FFWREC.XXXMODID = "S41"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N2 DPRODG.VSYCLR01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end FG0JS41

// select 'c2' dprodg.vsyclr01
Function FG0JS42()
   /* ------------------------------------------------------------*/
   /* close dprodg.vsyclr01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("C2", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  FFWREC.XXXMODID = "S42"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE S2 DPRODG.VSYCLR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0JS42

// Add page to temp stor
Function FG0JS50()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  FG0JW06.XXXTSLEN = FG0JW00.FG0JWTL3;
  TA5REC.TA5APPID = "FGJ3"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (FG0JW06, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set FG0JW06 empty; /* m002 display storage*/

    FG0JW00.FG0JWIDX = 1; /* Display line index*/

    FG0JW04.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  FFWREC.XXXMODID = "S50"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = FFWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end FG0JS50

// select 's1' dprodg.vsydvl01
Function FG0JS52()
   /* ------------------------------------------------------------*/
   /* Format FFFREC. Use 0 for begin mo, so that all*/
   /* history will show regardless of closeout month.*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "S1"; /* Function code*/
  FFFREC.FFFBEGMO = 0; /* Beg month*/
  FFFREC.FFFENDMO = 999999999; /* End month*/

   /* ------------------------------------------------------------*/
   /* Open dprodg.vsydvl01.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1PGMNM = "FG0JS52"; /* Calling process*/

  PG4REC.XPRCD = FFWREC.YPGCD; /* type group code*/
  PG4REC.XDVCD = "10"; /* division group code*/
  PG4REC.XPCCD = FFWREC.XPCCD; /* category code*/

   /* ------------------------------------------------------------*/
   /* Call XSFFS65.*/
   /* ------------------------------------------------------------*/

  XSFFS65(); /* Open SYDVL*/


end // end FG0JS52

// select 'n1' dprodg.vsydvl01
Function FG0JS53()
   /* ------------------------------------------------------------*/
   /* Format call.*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "N1"; /* Function code*/
  TA1REC.TA1PGMNM = "FG0JS53"; /* Calling process*/

   /* ------------------------------------------------------------*/
   /* Fetch SYDVL.*/
   /* ------------------------------------------------------------*/

  XSFFS65(); /* Fetch dprodg.vsydvl01 row*/

end // end FG0JS53

// select 'c1' dprodg.vsydvl01
Function FG0JS54()
   /* ------------------------------------------------------------*/
   /* Format call.*/
   /* ------------------------------------------------------------*/

  FFFREC.FFFFUNCD = "C1"; /* Function code*/
  TA1REC.TA1PGMNM = "FG0JS54"; /* Calling process*/

   /* ------------------------------------------------------------*/
   /* Close SYDVL.*/
   /* ------------------------------------------------------------*/

  XSFFS65(); /* Fetch dprodg.vsydvl01 row*/


end // end FG0JS54

// Process total line
Function FG0JS55()

   /* ------------------------------------------------------------*/
   /* translate hsitorical sale/demand total qtys from units*/
   /* to thousands*/
   /* ------------------------------------------------------------*/

  FG0JW06.FG0JWRCD[FG0JWIDX] = "3";
  FG0JW05.FG0JWTSL = "TOTAL"; /* history sale tot literial*/
  FG0JW05.FG0JWTDL = "TOTAL"; /* history dmnd tot literial*/

   /* ------------------------------------------------------------*/
   /* translate hsitorical sale/demand total qtys from units*/
   /* to thousands/and load percents*/
   /* ------------------------------------------------------------*/

  FG0JW00.FG0JWPIX = 1;
  while (FG0JW00.FG0JWPIX <= 3)

    FFXREC.FFXNUMB = FG0JW05.FG0JWUTS[FG0JWPIX];
    XSFFS10();
    FG0JW05.FG0JWTHS[FG0JWPIX] = FFXREC.FFXCHAR;

    if (FG0JW05.FG0JWTHS[FG0JWPIX] != " ")
      FG0JW05.FG0JWTSP[FG0JWPIX] = 100;
    end

    FFXREC.FFXNUMB = FG0JW05.FG0JWUTD[FG0JWPIX];
    XSFFS10();
    FG0JW05.FG0JWTHD[FG0JWPIX] = FFXREC.FFXCHAR;

    if (FG0JW05.FG0JWTHD[FG0JWPIX] != " ")
      FG0JW05.FG0JWTDP[FG0JWPIX] = 100;
    end

    FG0JW00.FG0JWPIX = FG0JW00.FG0JWPIX + 1;
  end

   /* ------------------------------------------------------------*/
   /* load temporary storage historical total line*/
   /* ------------------------------------------------------------*/

  FG0JW06.FG0JWDTL[FG0JWIDX] = FG0JW05.FG0JWTOT;

end // end FG0JS55

//*** RECORD=FG0JW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FG0JW00 type basicRecord
  10 FG0JWDCF FG0JWDCF ; 
  10 FG0JWDMF FG0JWDMF ; 
  10 FG0JWFCF FG0JWFCF ; 
  10 FG0JWKYC FG0JWKYC ; 
  10 FG0JWSTF FG0JWSTF ; 
  10 FG0JWCFL FG0JWCFL ; 
  10 FG0JWSDV FG0JWSDV ; 
  10 FG0JWERF FG0JWERF ; 
  10 FG0JWSPF FG0JWSPF ; 
  10 FG0JWQTF FG0JWQTF ; 
  10 FG0JWSWR FG0JWSWR ; 
  10 FG0JWSWF FG0JWSWF ; 
  10 FG0JWSWD FG0JWSWD ; 
  10 FG0JWSWU FG0JWSWU ; 
  10 FG0JWMOD FG0JWMOD ; 
  10 FG0JWIDX FG0JWIDX ; 
  10 FG0JWPIX FG0JWPIX ; 
  10 FG0JWLIX FG0JWLIX ; 
  10 FG0JWSUT FG0JWSUT ; 
  10 FG0JWSTG FG0JWSTG ; 
  10 FG0JWNM1 FG0JWNM1 ; 
  10 FG0JWNM2 FG0JWNM2 ; 
  10 FG0JWNM3 FG0JWNM3 ; 
  10 FG0JWPC1 FG0JWPC1 ; 
  10 FG0JWWDT FG0JWWDT ; 
    15 * char(3) ; 
    15 FG0JWWCC FG0JWWCC ; 
    15 FG0JWWYM FG0JWWYM ; 
      20 FG0JWWYY FG0JWWYY ; 
      20 FG0JWWMM FG0JWWMM ; 
  10 FG0JWWBD FG0JWWBD ; 
    15 * char(3) ; 
    15 FG0JWBCC FG0JWBCC ; 
    15 FG0JWBYM FG0JWBYM ; 
      20 FG0JWBYY FG0JWBYY ; 
      20 FG0JWBMM FG0JWBMM ; 
  10 FG0JWWED FG0JWWED ; 
    15 * char(3) ; 
    15 FG0JWECC FG0JWECC ; 
    15 FG0JWEYM FG0JWEYM ; 
      20 FG0JWEYY FG0JWEYY ; 
      20 FG0JWEMM FG0JWEMM ; 
  10 FG0JWEND FG0JWEND ; 
  10 FG0JWYDS FG0JWYDS [3] ; 
  10 FG0JWHDS FG0JWHDS [2] ; 
  10 FG0JWTL1 FG0JWTL1 ; 
  10 FG0JWTL2 FG0JWTL2 ; 
  10 FG0JWTL3 FG0JWTL3 ; 
  10 FG0JWSTP FG0JWSTP ; 
  10 FG0JWSWP FG0JWSWP ; 
  10 FG0JWSSF FG0JWSSF ; 
    15 FG0JWSSN FG0JWSSN ; 
    15 * char(1) ; 
    15 FG0JWSCI FG0JWSCI ; 
    15 * char(1) ; 
    15 FG0JWSDC FG0JWSDC ; 
    15 * char(1) ; 
    15 FG0JWSCD FG0JWSCD ; 
    15 * char(1) ; 
    15 FG0JWSSQ FG0JWSSQ ; 
    15 * char(1) ; 
    15 FG0JWSSP FG0JWSSP ; 
      20 FG0JWSS1 FG0JWSS1 ; 
      20 FG0JWSS2 FG0JWSS2 ; 
      20 FG0JWSS3 FG0JWSS3 ; 
    15 * char(3) ; 
    15 FG0JWDSN FG0JWDSN ; 
    15 * char(1) ; 
    15 FG0JWDCI FG0JWDCI ; 
    15 * char(1) ; 
    15 FG0JWDDC FG0JWDDC ; 
    15 * char(1) ; 
    15 FG0JWDCD FG0JWDCD ; 
    15 * char(1) ; 
    15 FG0JWDSQ FG0JWDSQ ; 
    15 * char(1) ; 
    15 FG0JWDSP FG0JWDSP ; 
      20 FG0JWDS1 FG0JWDS1 ; 
      20 FG0JWDS2 FG0JWDS2 ; 
      20 FG0JWDS3 FG0JWDS3 ; 
  10 FG0JWSDS FG0JWSDS ; 
    15 FG0JWSDN FG0JWSDN ; 
    15 FG0JWFL1 FG0JWFL1 ; 
    15 FG0JWCLR FG0JWCLR ; 
    15 FG0JWFL2 FG0JWFL2 ; 
    15 FG0JWDIM FG0JWDIM ; 
end // end FG0JW00

//*** RECORD=FG0JW01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// ***********************
Record FG0JW01 type basicRecord
  10 FG0JWCFL FG0JWCFL ; 
  10 FG0JWHFL FG0JWHFL ; 
  10 FG0JWSTY FG0JWSTY ; 
  10 FG0JWSST FG0JWSST ; 
  10 FG0JWUST FG0JWUST ; 
  10 FG0JWSGT FG0JWSGT ; 
  10 FG0JWYOP FG0JWYOP ; 
  10 FG0JWHOP FG0JWHOP ; 
  10 FFCDMIND FFCDMIND ; 
  10 FG0JWSSG FG0JWSSG ; 
  10 FG0JWHSG FG0JWHSG ; 
  10 FG0JWUVQ FG0JWUVQ ; 
  10 FG0JWVQT FG0JWVQT ; 
  10 FG0JWVPT FG0JWVPT ; 
  10 FG0JWCDT FG0JWCDT ; 
    15 FG0JWMON FG0JWMON ; 
    15 FG0JWDAY FG0JWDAY ; 
    15 FG0JWYER FG0JWYER ; 
  10 FG0JWPBD FG0JWPBD [3] ; 
    15 * char(5) ; 
    15 FG0JWPBR FG0JWPBR ; 
  10 FG0JWPED FG0JWPED [3] ; 
    15 * char(5) ; 
    15 FG0JWPER FG0JWPER ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 FG0JW1PM FG0JW1PM ; 
  10 FG0JW2PM FG0JW2PM ; 
end // end FG0JW01

//*** RECORD=FG0JW02 ****
// -------------------------
// map 001 temporary storage
// -------------------------
// ***********************
Record FG0JW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(321) ; 
    10 FG0JWNLD FG0JWNLD ; 
    10 FG0JWCTX FG0JWCTX ; 
    10 FG0JWSSC FG0JWSSC [5] ; 
    10 FG0JWSDS FG0JWSDS [5] ; 
      15 SY1STNBR SY1STNBR ; 
      15 FG0JWSP1 FG0JWSP1 ; 
      15 SY2CLRID SY2CLRID ; 
      15 FG0JWSP2 FG0JWSP2 ; 
      15 XDMCD XDMCD ; 
    10 FF8DEVFL FF8DEVFL [5] ; 
    10 FG0JWUMQ FG0JWUMQ [5] ; 
    10 FG0JWMQT FG0JWMQT [5] ; 
    10 FG0JWSQT FG0JWSQT [5] ; 
    10 FG0JWUQT FG0JWUQT [5] ; 
    10 FG0JWQTY FG0JWQTY [5] ; 
    10 FG0JWSPC FG0JWSPC [5] ; 
    10 FG0JWSPT FG0JWSPT [5] ; 
    10 ZZZCHGCT ZZZCHGCT [5] ; 
end // end FG0JW02

//*** RECORD=FG0JW03 ****
// -------------------------
// map 001 temporary storage
// -------------------------
// ***********************
Record FG0JW03 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(1056) ; 
    10 FG0JWNLD FG0JWNLD ; 
    10 FG0JWHTX FG0JWHTX ; 
    10 FG0JWHC1 FG0JWHC1 [5] ; 
    10 FG0JWHC2 FG0JWHC2 [5] ; 
    10 FG0JWHC3 FG0JWHC3 [5] ; 
    10 FG0JWHC4 FG0JWHC4 [5] ; 
    10 FG0JWHC5 FG0JWHC5 [5] ; 
    10 FG0JWHC6 FG0JWHC6 [5] ; 
    10 FG0JWHN1 FG0JWHN1 [5] ; 
    10 FG0JWHN2 FG0JWHN2 [5] ; 
    10 FG0JWHN3 FG0JWHN3 [5] ; 
    10 FG0JWHN4 FG0JWHN4 [5] ; 
    10 FG0JWHN5 FG0JWHN5 [5] ; 
    10 FG0JWHN6 FG0JWHN6 [5] ; 
    10 FG0JWHQ1 FG0JWHQ1 [5] ; 
    10 FG0JWHQ2 FG0JWHQ2 [5] ; 
    10 FG0JWHQ3 FG0JWHQ3 [5] ; 
    10 FG0JWHP1 FG0JWHP1 [5] ; 
    10 FG0JWHP2 FG0JWHP2 [5] ; 
    10 FG0JWHP3 FG0JWHP3 [5] ; 
    10 FG0JWDQ1 FG0JWDQ1 [5] ; 
    10 FG0JWDQ2 FG0JWDQ2 [5] ; 
    10 FG0JWDQ3 FG0JWDQ3 [5] ; 
    10 FG0JWDP1 FG0JWDP1 [5] ; 
    10 FG0JWDP2 FG0JWDP2 [5] ; 
    10 FG0JWDP3 FG0JWDP3 [5] ; 
end // end FG0JW03

//*** RECORD=FG0JW04 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FG0JW04 type basicRecord
  10 CACHGFL CACHGFL ; 
  10 FG0JWYIX FG0JWYIX ; 
  10 FG0JWYO1 FG0JWYO1 ; 
  10 FG0JWHO1 FG0JWHO1 ; 
  10 FG0JWSTY FG0JWSTY ; 
  10 PG7MAXPR PG7MAXPR [10] ; 
  10 SYBSTGNB SYBSTGNB [10] ; 
  10 FG0JWSGS FG0JWSGS ; 
  10 FG0JWSMP FG0JWSMP [10] ; 
  10 FG0JWEPF FG0JWEPF ; 
  10 FG0JWSWR FG0JWSWR ; 
  10 FG0JWSWF FG0JWSWF ; 
  10 FG0JWSWU FG0JWSWU ; 
  10 FG0JWSLF FG0JWSLF ; 
  10 FG0JWDPS FG0JWDPS ; 
  10 FG0JWYDS FG0JWYDS [3] ; 
  10 FG0JWHDS FG0JWHDS [2] ; 
  10 FG0JWSHS FG0JWSHS ; 
  10 FG0JWSHD FG0JWSHD ; 
  10 FG0JWUHS FG0JWUHS ; 
  10 FG0JWHST FG0JWHST ; 
  10 FG0JWUHD FG0JWUHD ; 
  10 FG0JWHDT FG0JWHDT ; 
  10 FG0JW-HOLD-BEG-MO FG0JW-HOLD-BEG-MO ; 
  10 FG0JW-HOLD-END-MO FG0JW-HOLD-END-MO ; 
  10 FG0JW-WORK-BEG-MO FG0JW-WORK-BEG-MO ; 
  10 FG0JW-WORK-END-MO FG0JW-WORK-END-MO ; 
  10 FG0JW-WORK-DT FG0JW-WORK-DT ; 
    15 * num(1) ; // filler
    15 FG0JW-WORK-CCYYMM num(6) ; // work ccyymm
      20 FG0JW-WORK-CCYY num(4) ; // work ccyy
      20 FG0JW-WORK-MM num(2) ; // work mm
    15 FG0JW-WORK-DD num(2) ; // work dd
  10 FG0JW-CURR-MO FG0JW-CURR-MO ; 
  10 FG0JW-CURR-MO-MINUS1 FG0JW-CURR-MO-MINUS1 ; 
  10 FG0JW-CURR-MO-MINUS2 FG0JW-CURR-MO-MINUS2 ; 
  10 FG0JW-CURR-MO-MINUS3 FG0JW-CURR-MO-MINUS3 ; 
  10 FG0JW-CURR-MO-MINUS4 FG0JW-CURR-MO-MINUS4 ; 
  10 FG0JWBUY FG0JWBUY ; 
    15 FG0JWBDT FG0JWBDT ; 
      20 FG0JWBWC FG0JWBWC ; 
      20 FG0JWBWY FG0JWBWY ; 
      20 FG0JWBWM FG0JWBWM ; 
    15 FG0JWBWD FG0JWBWD ; 
  10 FFQLCOFP FFQLCOFP ; 
  10 FFQLCOPP FFQLCOPP ; 
  10 FFQOCOFP FFQOCOFP ; 
  10 FFQOCOPP FFQOCOPP ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
end // end FG0JW04

//*** RECORD=FG0JW05 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FG0JW05 type basicRecord
  3 FG0JWGP5 FG0JWGP5 ; 
    5 FG0JWSGP FG0JWSGP ; 
      10 * char(1) ; // this position avail for use
      10 SYBSTGNB SYBSTGNB ; 
      10 FG0JWSGF FG0JWSGF ; 
        15 FG0JWSSD FG0JWSSD ; 
        15 * char(28) ; 
        15 FG0JWDSD FG0JWDSD ; 
        15 * char(22) ; 
    5 FG0JWSNB FG0JWSNB ; 
      10 FG0JWUSQ FG0JWUSQ [3] ; 
      10 FG0JWHSQ FG0JWHSQ [3] ; 
      10 FG0JWSPT FG0JWSPT [3] ; 
      10 FG0JWUDQ FG0JWUDQ [3] ; 
      10 FG0JWHDQ FG0JWHDQ [3] ; 
      10 FG0JWDPT FG0JWDPT [3] ; 
      10 FG0JWSNF FG0JWSNF ; 
        15 FG0JWSSN FG0JWSSN [3] ; 
        15 * char(1) ; 
        15 FG0JWSCI FG0JWSCI [3] ; 
        15 * char(1) ; 
        15 FG0JWSDC FG0JWSDC [3] ; 
        15 * char(1) ; 
        15 FG0JWSCD FG0JWSCD [3] ; 
        15 * char(2) ; 
        15 FG0JWSSQ FG0JWSSQ ; 
        15 * char(1) ; 
        15 FG0JWSSP FG0JWSSP ; 
          20 FG0JWSS1 FG0JWSS1 ; 
          20 FG0JWSS2 FG0JWSS2 ; 
          20 FG0JWSS3 FG0JWSS3 ; 
        15 * char(4) ; 
        15 FG0JWDSN FG0JWDSN [3] ; 
        15 * char(1) ; 
        15 FG0JWDCI FG0JWDCI [3] ; 
        15 * char(1) ; 
        15 FG0JWDDC FG0JWDDC [3] ; 
        15 * char(1) ; 
        15 FG0JWDCD FG0JWDCD [3] ; 
        15 * char(2) ; 
        15 FG0JWDSQ FG0JWDSQ ; 
        15 * char(1) ; 
        15 FG0JWDSP FG0JWDSP ; 
          20 FG0JWDS1 FG0JWDS1 ; 
          20 FG0JWDS2 FG0JWDS2 ; 
          20 FG0JWDS3 FG0JWDS3 ; 
    5 FG0JWTOT FG0JWTOT ; 
      10 FG0JWUTS FG0JWUTS [3] ; 
      10 FG0JWTHS FG0JWTHS [3] ; 
      10 FG0JWTSP FG0JWTSP [3] ; 
      10 FG0JWUTD FG0JWUTD [3] ; 
      10 FG0JWTHD FG0JWTHD [3] ; 
      10 FG0JWTDP FG0JWTDP [3] ; 
      10 FG0JWTLF FG0JWTLF ; 
        15 * char(14) ; 
        15 FG0JWTSL FG0JWTSL ; 
        15 * char(9) ; 
        15 FG0JWSTQ FG0JWSTQ ; 
        15 * char(1) ; 
        15 FG0JWSTC FG0JWSTC ; 
          20 FG0JWST1 FG0JWST1 ; 
          20 FG0JWST2 FG0JWST2 ; 
          20 FG0JWST3 FG0JWST3 ; 
        15 * char(18) ; 
        15 FG0JWTDL FG0JWTDL ; 
        15 * char(8) ; 
        15 FG0JWDTQ FG0JWDTQ ; 
        15 * char(1) ; 
        15 FG0JWDTP FG0JWDTP ; 
          20 FG0JWDT1 FG0JWDT1 ; 
          20 FG0JWDT2 FG0JWDT2 ; 
          20 FG0JWDT3 FG0JWDT3 ; 
        15 * char(1) ; 
      10 * char(84) ; 
end // end FG0JW05

//*** RECORD=FG0JW06 ****
// -------------------------
// map 001 temporary storage
// -------------------------
// ***********************
Record FG0JW06 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(3422) ; 
    10 FG0JWNLD FG0JWNLD ; 
    10 FG0JWRCD FG0JWRCD [12] ; 
    10 FG0JWDTL FG0JWDTL [12] ; 
end // end FG0JW06

//*** RECORD=FG0JW07 ****
// ------------------------------
// map 001 totals display storage
// ------------------------------
// ***********************
Record FG0JW07 type basicRecord
  5 FG0JWGP7 FG0JWGP7 ; 
    10 FG0JWUMQ FG0JWUMQ ; 
    10 FG0JWMQT FG0JWMQT ; 
    10 FG0JWUQT FG0JWUQT ; 
    10 FG0JWQTY FG0JWQTY ; 
    10 FG0JWSPT FG0JWSPT ; 
    10 FG0JWHSQ FG0JWHSQ [3] ; 
    10 FG0JWHSP FG0JWHSP [3] ; 
    10 FG0JWHDQ FG0JWHDQ [3] ; 
    10 FG0JWHDP FG0JWHDP [3] ; 
end // end FG0JW07

// current month
DataItem FG0JW-CURR-MO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current month minus 1 month
DataItem FG0JW-CURR-MO-MINUS1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current month minus 2 months
DataItem FG0JW-CURR-MO-MINUS2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current month minus 3 months
DataItem FG0JW-CURR-MO-MINUS3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current month minus 4 months
DataItem FG0JW-CURR-MO-MINUS4 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work begin date
DataItem FG0JW-HOLD-BEG-MO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work end date
DataItem FG0JW-HOLD-END-MO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work begin date
DataItem FG0JW-WORK-BEG-MO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work date
DataItem FG0JW-WORK-DT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work end date
DataItem FG0JW-WORK-END-MO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// TSQ rel rec no./index temp 001
DataItem FG0JW1PM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index temp 002
DataItem FG0JW2PM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// begin century
DataItem FG0JWBCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy work ccyymm
DataItem FG0JWBDT num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range month
DataItem FG0JWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy work date
DataItem FG0JWBUY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy work cc
DataItem FG0JWBWC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy work dd
DataItem FG0JWBWD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy work mm
DataItem FG0JWBWM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// buy work yy
DataItem FG0JWBWY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin year and month
DataItem FG0JWBYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin range year
DataItem FG0JWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save ccyymm
DataItem FG0JWCDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style/color flag
DataItem FG0JWCFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// color
DataItem FG0JWCLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current sales total index
DataItem FG0JWCTX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// create day
DataItem FG0JWDAY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// demand style color abrv
DataItem FG0JWDCD char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data change flag
DataItem FG0JWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// demand style color id
DataItem FG0JWDCI char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// demand dimension code
DataItem FG0JWDDC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dimension
DataItem FG0JWDIM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data modified flag
DataItem FG0JWDMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history dmnd 1 percent field
DataItem FG0JWDP1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history dmnd 2 percent field
DataItem FG0JWDP2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history dmnd 3 percent field
DataItem FG0JWDP3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data passed flag
DataItem FG0JWDPS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history dmnd percent field
DataItem FG0JWDPT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history dmnd 1 qty 1000
DataItem FG0JWDQ1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history dmnd 2 qty 1000
DataItem FG0JWDQ2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history dmnd 3 qty 1000
DataItem FG0JWDQ3 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG0JWDS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG0JWDS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG0JWDS3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history style grp desc
DataItem FG0JWDSD char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// demand style nbr
DataItem FG0JWDSN char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// demand style percent
DataItem FG0JWDSP num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// demand style qty
DataItem FG0JWDSQ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG0JWDT1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG0JWDT2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG0JWDT3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail line
DataItem FG0JWDTL char(284)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// demand total percent
DataItem FG0JWDTP num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// demand total qty
DataItem FG0JWDTQ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end century
DataItem FG0JWECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range month
DataItem FG0JWEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work end date
DataItem FG0JWEND num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// end of price table
DataItem FG0JWEPF char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag
DataItem FG0JWERF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end year and month
DataItem FG0JWEYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range year
DataItem FG0JWEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// forecast exist flag
DataItem FG0JWFCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler
DataItem FG0JWFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler
DataItem FG0JWFL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fg0jw04 group level
DataItem FG0JWGP5 char(635)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fg0jw07 group level
DataItem FG0JWGP7 char(81)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history style color desc
DataItem FG0JWHC1 char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history style color desc
DataItem FG0JWHC2 char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history style color desc
DataItem FG0JWHC3 char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history style color desc
DataItem FG0JWHC4 char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history style color desc
DataItem FG0JWHC5 char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history style color desc
DataItem FG0JWHC6 char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// historical demand percent
DataItem FG0JWHDP bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical demand qty thousand
DataItem FG0JWHDQ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// historical description
DataItem FG0JWHDS char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history demand thousands
DataItem FG0JWHDT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// historical data loaded
DataItem FG0JWHFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history style group nbr
DataItem FG0JWHN1 char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history style group nbr
DataItem FG0JWHN2 char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history style group nbr
DataItem FG0JWHN3 char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history style group nbr
DataItem FG0JWHN4 char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history style group nbr
DataItem FG0JWHN5 char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history style group nbr
DataItem FG0JWHN6 char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history option sales/demand
DataItem FG0JWHO1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history option sales/demand
DataItem FG0JWHOP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history sale 1 percent field
DataItem FG0JWHP1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sale 2 percent field
DataItem FG0JWHP2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sale 3 percent field
DataItem FG0JWHP3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sale 1 qty 1000
DataItem FG0JWHQ1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history sale 2 qty 1000
DataItem FG0JWHQ2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history sale 3 qty 1000
DataItem FG0JWHQ3 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history style group short name
DataItem FG0JWHSG char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// historical sales percent
DataItem FG0JWHSP bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// historical sales qty thousand
DataItem FG0JWHSQ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history sales thousands
DataItem FG0JWHST char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history total index
DataItem FG0JWHTX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem FG0JWIDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change in key fields
DataItem FG0JWKYC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// load index
DataItem FG0JWLIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage update switch
DataItem FG0JWMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// create month
DataItem FG0JWMON num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// master qty 1000
DataItem FG0JWMQT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of lines per page
DataItem FG0JWNLD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 1
DataItem FG0JWNM1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 2
DataItem FG0JWNM2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric work field 3
DataItem FG0JWNM3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prior begin date
DataItem FG0JWPBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// prior begin yymm
DataItem FG0JWPBR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// percent work field 1
DataItem FG0JWPC1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prior end date
DataItem FG0JWPED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// prior end yymm
DataItem FG0JWPER char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// process index
DataItem FG0JWPIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// qty flag
DataItem FG0JWQTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcst qty 1000
DataItem FG0JWQTY char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record type 1,2,or 3
DataItem FG0JWRCD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style color abrv
DataItem FG0JWSCD char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style color id
DataItem FG0JWSCI char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dimension code
DataItem FG0JWSDC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style nbr
DataItem FG0JWSDN char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style desc
DataItem FG0JWSDS char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style development flag
DataItem FG0JWSDV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style group line format
DataItem FG0JWSGF char(74)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style group line
DataItem FG0JWSGP char(81)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save style group number
DataItem FG0JWSGS char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style grp target thousands
DataItem FG0JWSGT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save hist demand qty units
DataItem FG0JWSHD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save history sales units
DataItem FG0JWSHS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 's'election flag
DataItem FG0JWSLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save max price
DataItem FG0JWSMP decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style nbr line
DataItem FG0JWSNB char(284)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style nbr line format
DataItem FG0JWSNF char(176)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash '-'
DataItem FG0JWSP1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash '-'
DataItem FG0JWSP2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save style percent field
DataItem FG0JWSPC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style percent flag
DataItem FG0JWSPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style percent field
DataItem FG0JWSPT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save fcst qty
DataItem FG0JWSQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0JWSS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG0JWSS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG0JWSS3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style color desc
DataItem FG0JWSSC char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style grp desc
DataItem FG0JWSSD char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style color line format
DataItem FG0JWSSF char(77)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style group short name
DataItem FG0JWSSG char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style nbr
DataItem FG0JWSSN char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales style percent
DataItem FG0JWSSP num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sales style qty
DataItem FG0JWSSQ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save style grp target
DataItem FG0JWSST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FG0JWST1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG0JWST2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem FG0JWST3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales total percent
DataItem FG0JWSTC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// style number fcst exist
DataItem FG0JWSTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save char target
DataItem FG0JWSTG char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save current temp storage page
DataItem FG0JWSTP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// sales total qty
DataItem FG0JWSTQ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style group nbr
DataItem FG0JWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save unit target
DataItem FG0JWSUT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display map switch
DataItem FG0JWSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FG0JWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// valid product switch
DataItem FG0JWSWP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem FG0JWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage update switch
DataItem FG0JWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// demand total literial
DataItem FG0JWTDL char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history dmnd percent field
DataItem FG0JWTDP num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sale fcst qty 1000
DataItem FG0JWTHD char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history sale fcst qty 1000
DataItem FG0JWTHS char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length m001
DataItem FG0JWTL1 num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = " ", inputRequired = no
}
end

// Temporary storage length hist
DataItem FG0JWTL2 num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = " ", inputRequired = no
}
end

// Temporary storage length m002
DataItem FG0JWTL3 num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = " ", inputRequired = no
}
end

// total line format
DataItem FG0JWTLF char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// historical total line
DataItem FG0JWTOT char(270)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales total literial
DataItem FG0JWTSL char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// history sale percent field
DataItem FG0JWTSP num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history dmnd fcst qty units
DataItem FG0JWUDQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hist demand qty total units
DataItem FG0JWUHD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sales units
DataItem FG0JWUHS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// master qty units
DataItem FG0JWUMQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fcst qty units
DataItem FG0JWUQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sale fcst qty units
DataItem FG0JWUSQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style grp target units
DataItem FG0JWUST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history dmnd fcst qty units
DataItem FG0JWUTD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// history sale qty units
DataItem FG0JWUTS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// variance qty units
DataItem FG0JWUVQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// variance percent
DataItem FG0JWVPT bin(9,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// variance qty thousands
DataItem FG0JWVQT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work begin date
DataItem FG0JWWBD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work century
DataItem FG0JWWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date
DataItem FG0JWWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work end date
DataItem FG0JWWED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work month
DataItem FG0JWWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year and month
DataItem FG0JWWYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem FG0JWWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year(s)  option description
DataItem FG0JWYDS char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// create year
DataItem FG0JWYER num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year index
DataItem FG0JWYIX num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year option
DataItem FG0JWYO1 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year option
DataItem FG0JWYOP num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

