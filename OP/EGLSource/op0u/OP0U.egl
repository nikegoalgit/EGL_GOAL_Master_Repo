package op0u;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pw.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=OP0U ****
// ************************************************************
// ***  H O T   M O D E L   G R O U P   C O D E   M A I N T ***
// ************************************************************
// Application:  op0u
// Date written: 02/89
// Written by:   schase
// 
// Application Overview:
// 
//   The purpose of this application is to provide an online
//   system to enable the user to enter and maintain group
//   codes and their descriptions.  In addition, the on-line
//   screen will allow the user to select a group code on the
//   screen and by pressing enter, control is transfered to the
//   hot model style screen which will then display all the
//   styles associated with the selected group.
//   NOTE: The group code data base contains an abbreviation
//         field that will not  be used at this time.
// 
// ************************************************************
//                    MAINTENANCE HISTORY
// ************************************************************
//  REF    DATE    WHO    DESCRIPTION
// ----- -------- ------  ------------------------------------
// 00000 02/21/89 schase  created application.
// 
// 00000 04/04/89 schase  enhancement - force add-chg-del-sel
//                        option (a,c,d,s) to be used. (s10)
// 
// 00000 04/04/89 schase  enhancement - add db2 select on group
//                        to edit routine (s20), and edit grp.
// 00000 02/14/91 tfox    regen for db chgs
// #1003 04/01/94 gcalki  rename causera to ca-user-workarea-4k
//                        so it could hold opwrec which has
//                        increased to 3072 bytes. (ALL)
// *********************
Program OP0U type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  OP0UW01 OP0UW01; // record
  OP0UW02 OP0UW02; // record
  OPAREC OPAREC; // record
  OPWREC OPWREC; // record
  OPXREC OPXREC; // record
  OPZREC OPZREC; // record
  SQLCA SQLCA; // record
  SYLREC SYLREC; // record
  TA1REC TA1REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use OP0UM.OP0UM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OP0U001: OP0U001();



    goto OP0U010; /* flow to mainline*/



    OP0U010: OP0U010();


    goto OP0U010; /* flow to mainline*/


  end // end main
end // end OP0U

// program init
Function OP0U001()



      /* *****************************************************/
      /* **  initialization for op0u and clear map fields  ***/
      /* *****************************************************/


  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* release locks*/


  XSENTRY(); /* check entry security*/

  XSSEGTR(); /* segmented transaction*/

     /* ***************************/
    /* *** set map & recs empty ****/
     /* ***************************/

  set OP0UM001 empty;

  set OPWREC empty;
  set OPAREC empty;
  set OP0UW01 empty;
  set OPXREC empty;
  set OPZREC empty;

  OPWREC.OPWSGRP = COMMAREA.CA-USER-WORKAREA-4K; /* frmt ws rec*/


  COMMAREA.CAITEM = " "; /* clean caitem field*/
  OP0UM001.OP0UMPRC = "OP0U010"; /* frmt converse mod name*/
  OP0UM001.OP0UMMAP = "OP0UM001"; /* frmt map name*/


  OP0UM001.OP0UMDT = VGVar.currentShortGregorianDate; /* frmt current date*/
  OPAREC.OPACYMD = VGVar.currentShortGregorianDate; /* frmt current date*/
  if (OPAREC.OPACYY > 56) /* set century based on year*/
    OPAREC.OPACCC = 19;
  else
    OPAREC.OPACCC = 20;
  end


  OP0US05(); /* load the map*/


      /* flow to op0u010*/

end // end OP0U001

// hot model grp code main line
Function OP0U010()



    /* *********************************************************/
    /* **  This is the mainline process which will converse  ***/
    /* **  to the user, control pfkey processes, and edit map***/
    /* **  fields. A valid user response will execute proper ***/
    /* **  function (add, change, delete, select) and then   ***/
    /* **  either transfer control to another application or ***/
    /* **  return by flowing back into the application in-   ***/
    /* **  which had been called.                            ***/
    /* *********************************************************/



   /* ***********************************************************/
  converse OP0UM001 ;
   /* ***********************************************************/


    /* *********************************************************/
    /* **  This section will examine all possible pf keys to ***/
    /* **  determine type of action to be taken.             ***/
    /* **  enter - op0us40 (edit map fields)                 ***/
    /* **  pf1 - transfer to help application                ***/
    /* **  pf3 - transfer to o/p menu                        ***/
    /* **  pf4 - transfer to system menu                     ***/
    /* **  if any other pfkey selected, format and display   ***/
    /* **  error message.                                    ***/
    /* *********************************************************/


  if (converseVar.eventKey is enter /* go edit map fields*/
   || OPAREC.OPAERR == "Y")         /* error exists*/
    if (converseVar.eventKey is pf19) /* refresh the screen*/
       /* next sentence*/
    else
      OP0US10(); /* edit the map*/
      if (OPAREC.OPAERR == "N" /* no errors*/
       && OP0UW01.OP0UWUPD == "Y") /* and update flag is on*/
        OP0US25(); /* update mainline*/
      end
    end
  else
    if (converseVar.eventKey is pf1) /* check for system help*/
      XSPF1(); /* help application*/
      OP0UM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* move err msg*/
      COMMAREA.CATOAP = " "; /* clear app*/
    else
      if (converseVar.eventKey is pf3) /* transfer to o/p menu*/
        COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear commarea*/
        COMMAREA.CATOAP = "OP0M"; /* set to app*/
        XSEXIT(); /* invoke transfer routine*/
        OP0UM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* move err msg*/
      else
        if (converseVar.eventKey is pf4) /* transfer to main menu*/
          COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear commarea*/
          XSPF4(); /* invoke master menu routine*/
          OP0UM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* move err msg*/
        else
          if (converseVar.eventKey is pf19) /* refresh map*/
             /* next sentence*/
          else
            OPAREC.OPAERR = "Y"; /* set error flag on*/
            converseLib.validationFailed(2); /* pfkey is not valid -- reenter*/
          end
        end
      end
    end
  end


  if (converseVar.eventKey is pf19) /* refresh map*/
    OPAREC.OPAERR = "N"; /* set error flag off*/
    OP0US05(); /* reload map from db*/
  end


      /* determine fastpath option/item keys*/

  if (OP0UM001.OP0UMXAP == "OP0T" /* fastpath option for op0t*/
   && OPAREC.OPAERR == "N")       /* no errors*/
    COMMAREA.CAITEM = " "; /* clear caitem*/
    COMMAREA.CATOAP = "OP0T"; /* format catoap*/
    XSEXIT();
  else
    if (OP0UM001.OP0UMXAP != " " /* fastpath option exists*/
     && OPAREC.OPAERR == "N")    /* no errors*/
      COMMAREA.CAITEM = " ";
      COMMAREA.CA-USER-WORKAREA-4K = " ";
      COMMAREA.CATOAP = OP0UM001.OP0UMXAP; /* format option*/
      if (OP0UM001.OP0UMXIT != " ") /* fastpath item exists*/
        COMMAREA.CAITEM = OP0UM001.OP0UMXIT;
      end
      XSEXIT();
      OP0UM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      COMMAREA.CATOAP = " ";
    end
  end


  if (OP0UM001.OP0UMXIT != " " /* fastpath item exists*/
   && OP0UM001.OP0UMXAP == " ") /* no fastpath option*/
    set OP0UM001.OP0UMXAP cursor; /* position cursor*/
    set OP0UM001.OP0UMXIT bold;
    OP0UM001.VAGen_EZEMSG = "FASTPATH OPTION REQUIRED FOR ITEM";
  end

end // end OP0U010

// load map op0um001 and ws array
Function OP0US05()


    /* **********************************************************/
    /* **  This process loads the map in preparation of the   ***/
    /* **  converse of op0um001, and load working storage     ***/
    /* **  array for each hot model group.                    ***/
    /* **********************************************************/


  set OP0UM001.OP0UMOPT[1] cursor; /* position cursor at first option*/


  OP0US55(); /* clean map and ws*/


  OP0US90(); /* call db2 for select set*/


  if (SQLCA.VAGen_SQLCODE == 0)
    OP0US91(); /* call db2 for priming read*/
  end


  if (SQLCA.VAGen_SQLCODE == 0)
    OPAREC.OPASUB = 1; /* set subscript to 1*/
    while (SQLCA.VAGen_SQLCODE != 100) /* end of set*/
      set OP0UM001.OP0UMOPT[OPASUB] initialAttributes;
      set OP0UM001.OP0UMGRP[OPASUB] protect;
      set OP0UM001.OP0UMDSC[OPASUB] initialAttributes;
      OP0UM001.OP0UMOPT[OPASUB] = " "; /* clear map opt*/
      OP0UM001.OP0UMGRP[OPASUB] = OPXREC.OPXHMGRP; /* load map grp*/
      OP0UM001.OP0UMDSC[OPASUB] = OPXREC.OPXHMDES; /* load map dsc*/
      OP0UW02.OP0UWGRP[OPASUB] = OPXREC.OPXHMGRP; /* load ws grp*/
      OP0UW02.OP0UWDSC[OPASUB] = OPXREC.OPXHMDES; /* load ws dsc*/
      OP0UW02.ZZZCHGCT[OPASUB] = OPXREC.ZZZCHGCT; /* load ws cnt*/
      OP0US91(); /* call cursor for next record*/
      OPAREC.OPASUB = OPAREC.OPASUB + 1; /* increment opasub*/
    end
  end


  while (OPAREC.OPASUB <= 20) /* page limit*/
    set OP0UM001.OP0UMOPT[OPASUB] initialAttributes;
    set OP0UM001.OP0UMGRP[OPASUB] initialAttributes;
    set OP0UM001.OP0UMDSC[OPASUB] initialAttributes;
    OP0UM001.OP0UMOPT[OPASUB] = " ";
    OP0UM001.OP0UMGRP[OPASUB] = " ";
    OP0UM001.OP0UMDSC[OPASUB] = " ";
    OPAREC.OPASUB = OPAREC.OPASUB + 1; /* increment subscript*/
  end


  OP0US96(); /* close the cursor*/



end // end OP0US05

// edit mainline for map
Function OP0US10()


    /* ********************************************************/
    /* **  This statement group will edit all map fields    ***/
    /* **  where the group code is not equal to spaces.     ***/
    /* ********************************************************/


  OPAREC.OPASUB = 20;
  OPAREC.OPAERR = "N"; /* set error flag off*/
  OP0UW01.OP0UWUPD = "N"; /* set update flag off*/
  OP0UW01.OP0UWSEC = "Y"; /* set security flag on*/
  set OP0UM001.OP0UMOPT[1] cursor; /* position cursor*/



  while (OPAREC.OPASUB >= 1) /* look at all 20 opt flds*/
    set OP0UM001.OP0UMOPT[OPASUB] normal;
    set OP0UM001.OP0UMGRP[OPASUB] normal;
    set OP0UM001.OP0UMDSC[OPASUB] normal;
    if (OP0UM001.OP0UMGRP[OPASUB] != " "
     || OP0UM001.OP0UMOPT[OPASUB] != " ")
      set OP0UM001.OP0UMGRP[OPASUB] protect;
        /* --------------------------------------------*/
        /* *  A character in the option field exists  **/
        /* --------------------------------------------*/
      if (OP0UM001.OP0UMOPT[OPASUB] == "A") /* add a group*/
          /* --------------------------------------------*/
          /* *  Process add logic                       **/
          /* --------------------------------------------*/
        OP0US15(); /* check edit authority*/
        if (OP0UW01.OP0UWSEC == "N") /* user does not have authority*/
          return;
        else
          OP0US20(); /* edit map fields*/
          if (OPAREC.OPAERR == "N") /* no errors*/
            OP0UW02.OP0UWOPT[OPASUB] = "A"; /* frmt upd opt*/
            OP0UW01.OP0UWUPD = "Y"; /* set upd flag on*/
          end
        end
      else
        if (OP0UM001.OP0UMOPT[OPASUB] == "C") /* change a group*/
            /* --------------------------------------------*/
            /* *  Process change logic                    **/
            /* --------------------------------------------*/
          OP0US15(); /* check edit authority*/
          if (OP0UW01.OP0UWSEC == "N") /* user does not have authority*/
            return;
          else
            OP0US20(); /* edit map fields*/
            if (OPAREC.OPAERR == "N") /* no errors*/
              OP0UW02.OP0UWOPT[OPASUB] = "C"; /* frmt upd opt*/
              OP0UW01.OP0UWUPD = "Y"; /* set upd flag on*/
            end
          end
        else
          if (OP0UM001.OP0UMOPT[OPASUB] == "D") /* delete a group*/
              /* --------------------------------------------*/
              /* *  Process delete logic                    **/
              /* --------------------------------------------*/
            OP0US15(); /* check edit authority*/
            if (OP0UW01.OP0UWSEC == "N") /* user does not have authority*/
              return;
            else
              OP0US20(); /* edit map fields*/
              if (OPAREC.OPAERR == "N")
                OP0UW02.OP0UWOPT[OPASUB] = "D"; /* frmt upd opt*/
                OP0UW01.OP0UWUPD = "Y"; /* set upd flag on*/
              end
            end
          else
            if (OP0UM001.OP0UMOPT[OPASUB] == "S") /* select a group*/
              OP0US20(); /* edit map fields*/
              if (OPAREC.OPAERR == "N") /* no errors*/
                OP0UW02.OP0UWOPT[OPASUB] = "S"; /* set upd flag on*/
                OP0UW01.OP0UWUPD = "Y"; /* set upd flag on*/
              end
            else
                /* --------------------------------------------*/
                /* *  check for blank line                    **/
                /* --------------------------------------------*/
              if (OP0UM001.OP0UMOPT[OPASUB] == " "
               && OP0UM001.OP0UMGRP[OPASUB] == OP0UW02.OP0UWGRP[OPASUB]
               && OP0UM001.OP0UMDSC[OPASUB] == OP0UW02.OP0UWDSC[OPASUB])
                 /* next sentence*/
              else
                  /* --------------------------------------------*/
                  /* *  Invalid option -- Error                 **/
                  /* --------------------------------------------*/
                set OP0UM001.OP0UMOPT[OPASUB] cursor; /* pos cursor*/
                set OP0UM001.OP0UMOPT[OPASUB] bold;
                OPAREC.OPAERR = "Y"; /* set error flag on*/
                converseLib.validationFailed(471);
                                   /* invalid option, valid opt are a,c,d,s*/
                return;
              end
            end
          end
        end
      end
    else
      if (OP0UM001.OP0UMGRP[OPASUB] == " ")
        OP0UM001.OP0UMDSC[OPASUB] = " "; /* clear description field*/
      end
    end
    OPAREC.OPASUB = OPAREC.OPASUB - 1; /* decrement subscript*/
  end


end // end OP0US10

// verify user edit authority
Function OP0US15()


    /* ********************************************************/
    /* **  This statement group is intended to verify a     ***/
    /* **  user's system edit (add, change, delete) author- ***/
    /* **  ity.  Controlled within commarea.                ***/
    /* ********************************************************/


  if (COMMAREA.CACHGFL == "Y") /* user has edit authority*/
     /* next sentence*/
  else
    set OP0UM001.OP0UMOPT[OPASUB] bold;
    OPAREC.OPAERR = "Y"; /* set error flag on*/
    OP0UW01.OP0UWSEC = "N"; /* set edit authority flag off*/
    converseLib.validationFailed(468); /* id not authorized to change group*/
    return;
  end


end // end OP0US15

// db2 call - closing cursor 3180
Function OP0US1A()


    /* ********************************************************/
    /* **  This statement group calls db2 and closes the    ***/
    /* **  cursor scan for styles.                          ***/
    /* ********************************************************/


  set SQLCA empty;

  call "IO3180" ("CS", SQLCA, OPZREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "CS"; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO3180"; /* i/o module called*/
    TA1REC.TA1LOCAT[3] = "OP0U01A"; /* where blew up*/
    TA1REC.TA1DBASE = "DORDER"; /* database blew in*/
    TA1REC.TA1TBLVU = "VHOTSY01"; /* view blew in*/
    OP0US85(); /* abend routine*/
  end


end // end OP0US1A

// db2 call for updating product
Function OP0US1B()


    /* ********************************************************/
    /* **  This statement group calls db2 dprod.vcolor03    ***/
    /* **  and update product record.                       ***/
    /* ********************************************************/


  set SQLCA empty;

  call "IO3390" ("U ", SQLCA, SYLREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "U "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO3390"; /* i/o module called*/
    TA1REC.TA1LOCAT[3] = "OP0US1B"; /* where blew up*/
    TA1REC.TA1DBASE = "DPROD"; /* database blew in*/
    TA1REC.TA1TBLVU = "VCOLOR03"; /* view blew in*/
    TA1REC.TA1TBLKE = SYLREC.SY1STNBR; /* key of rec blew on*/
    OP0US85(); /* abend routine*/
  end


end // end OP0US1B

// edit map fields
Function OP0US20()


    /* ********************************************************/
    /* **  This statement group is intended to edit all     ***/
    /* **  map fields that can be accessed.                 ***/
    /* ********************************************************/


  if (OP0UM001.OP0UMGRP[OPASUB] == " " /* no group code*/
   && OP0UM001.OP0UMOPT[OPASUB] == "C") /* trying to change*/
    set OP0UM001.OP0UMOPT[OPASUB] bold;
    set OP0UM001.OP0UMOPT[OPASUB] cursor;
    OPAREC.OPAERR = "Y"; /* set err flag on*/
    converseLib.validationFailed(488); /* invalid option for group code*/
    return;
  else
    if (OP0UM001.OP0UMGRP[OPASUB] == " ") /* no group code*/
      set OP0UM001.OP0UMGRP[OPASUB] bold;
      set OP0UM001.OP0UMGRP[OPASUB] cursor;
      OPAREC.OPAERR = "Y"; /* set err flag on*/
      converseLib.validationFailed(448); /* group code is required*/
      return;
    else
      if (OP0UM001.OP0UMDSC[OPASUB] == " ") /* no group code*/
        set OP0UM001.OP0UMDSC[OPASUB] bold;
        set OP0UM001.OP0UMDSC[OPASUB] cursor;
        OPAREC.OPAERR = "Y"; /* set err flag on*/
        converseLib.validationFailed(449); /* group description is required*/
        return;
      end
    end
  end



  OPXREC.OPXHMGRP = OP0UM001.OP0UMGRP[OPASUB]; /* frmt grp code*/

  OP0US92(); /* db2 call - select unique group*/


  if (SQLCA.VAGen_SQLCODE == 100 /* group not found*/
   && OP0UM001.OP0UMOPT[OPASUB] == "A") /* and trying to add*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100 /* group not found*/
     && OP0UM001.OP0UMOPT[OPASUB] == "C") /* and trying to change*/
      OPAREC.OPAERR = "Y"; /* set error flag on*/
      set OP0UM001.OP0UMOPT[OPASUB] bold;
      set OP0UM001.OP0UMGRP[OPASUB] bold;
      set OP0UM001.OP0UMGRP[OPASUB] cursor;
      converseLib.validationFailed(339); /* group does not exist, cannot change*/
    else
      if (SQLCA.VAGen_SQLCODE == 100 /* group not found*/
       && OP0UM001.OP0UMOPT[OPASUB] == "D") /* and trying to delete*/
        OPAREC.OPAERR = "Y"; /* set error flag on*/
        set OP0UM001.OP0UMOPT[OPASUB] bold;
        set OP0UM001.OP0UMGRP[OPASUB] bold;
        set OP0UM001.OP0UMGRP[OPASUB] cursor;
        converseLib.validationFailed(452); /* group does not exist, cannot delete*/
      else
        if (SQLCA.VAGen_SQLCODE == 0 /* group found*/
         && OP0UM001.OP0UMOPT[OPASUB] == "A") /* and trying to add*/
          OPAREC.OPAERR = "Y"; /* set error flag on*/
          set OP0UM001.OP0UMOPT[OPASUB] bold;
          set OP0UM001.OP0UMGRP[OPASUB] bold;
          set OP0UM001.OP0UMGRP[OPASUB] cursor;
          converseLib.validationFailed(450); /* group already exists*/
        end
      end
    end
  end


end // end OP0US20

// update mainline
Function OP0US25()


    /* ********************************************************/
    /* **  This statement group will control update to      ***/
    /* **  the database for all updated map fields.         ***/
    /* **  'a' - op0ts30 (process add logic)                ***/
    /* **  'c' - op0ts35 (process change logic)             ***/
    /* **  'd' - op0ts40 & s45 (process delete logic)       ***/
    /* **  's' - op0us50 (process select logic)             ***/
    /* **  ' ' - continue processing                        ***/
    /* ********************************************************/


  OP0UW01.OP0UWDEL = "Y"; /* set delete flag on*/
  OPAREC.OPASUB = 20;


  while (OPAREC.OPASUB >= 1) /* look at all 20 opt flds*/
    if (OP0UW02.OP0UWOPT[OPASUB] != " ")
      if (OP0UW02.OP0UWOPT[OPASUB] == "A")
          /* --------------------------------------------*/
          /* *  Process add logic update                **/
          /* --------------------------------------------*/
        OP0US30(); /* add a hot model group*/
        OP0UM001.OP0UMOPT[OPASUB] = " ";
      else
        if (OP0UW02.OP0UWOPT[OPASUB] == "C")
            /* --------------------------------------------*/
            /* *  Process change logic                    **/
            /* --------------------------------------------*/
          OP0US35(); /* change a hot model group*/
          OP0UM001.OP0UMOPT[OPASUB] = " ";
        else
          if (OP0UW02.OP0UWOPT[OPASUB] == "D")
              /* --------------------------------------------*/
              /* *  Process delete logic                    **/
              /* --------------------------------------------*/
            OPXREC.OPXHMGRP = OP0UM001.OP0UMGRP[OPASUB];
            OP0US92(); /* db2 call - determine if group exists to delete*/
            if (SQLCA.VAGen_SQLCODE == 0)
              if (OP0UW01.OP0UWSW[OPASUB] == "CONFIRMED DELETE")
                OP0US40(); /* delete hot model group*/
                if (OPAREC.OPAERR == "N") /* no errors*/
                  OP0US45(); /* delete styles for group*/
                end
                OP0UW01.OP0UWSW[OPASUB] = " "; /* clear confirm sw*/
                if (OPAREC.OPAERR == "N") /* found, so rec deleted*/
                  OP0UW01.OP0UWDEL = "Y"; /* set delete flag on*/
                  OP0UM001.OP0UMOPT[OPASUB] = " "; /* clear field*/
                  OP0UM001.OP0UMGRP[OPASUB] = " "; /* clear field*/
                  OP0UM001.OP0UMDSC[OPASUB] = " "; /* clear field*/
                  OP0UW02.OP0UWOPT[OPASUB] = " "; /* clear ws field*/
                  OP0UW02.OP0UWGRP[OPASUB] = " "; /* clear ws field*/
                  OP0UW02.OP0UWDSC[OPASUB] = " "; /* clear ws field*/
                  OP0UW02.ZZZCHGCT[OPASUB] = 0; /* clear ws field*/
                end
              else
                set OP0UM001.OP0UMOPT[OPASUB] cursor;
                set OP0UM001.OP0UMOPT[OPASUB] bold;
                set OP0UM001.OP0UMGRP[OPASUB] bold;
                set OP0UM001.OP0UMDSC[OPASUB] bold;
                OP0UW01.OP0UWSW[OPASUB] = "CONFIRMED DELETE";
                OP0UW01.OP0UWDEL = "N"; /* set delete flag on*/
              end
            else
              OPAREC.OPAERR = "Y";
              set OP0UM001.OP0UMGRP[OPASUB] cursor;
              set OP0UM001.OP0UMOPT[OPASUB] bold;
              set OP0UM001.OP0UMGRP[OPASUB] bold;
              OP0UW02.OP0UWOPT[OPASUB] = " ";
              converseLib.validationFailed(452); /* group not found, cannot delete*/
            end
          end
        end
      end
    end
    OPAREC.OPASUB = OPAREC.OPASUB - 1; /* decrement subscript*/
  end


  OPAREC.OPASUB = 20;

  while (OPAREC.OPASUB >= 1) /* look at all 20 opt flds*/
    if (OP0UW02.OP0UWOPT[OPASUB] == "S")
      OP0US50(); /* edit map fields*/
    end
    OPAREC.OPASUB = OPAREC.OPASUB - 1; /* decrement subscript*/
  end


  if (OPAREC.OPAERR == "N" /* no errors*/
   && OP0UW01.OP0UWDEL == "Y") /* delete confirmed*/
    set OP0UM001.OP0UMOPT[1] cursor; /* position cursor*/
    converseLib.validationFailed(447); /* transaction accepted*/
    OPAREC.OPASUB = 20;
    while (OPAREC.OPASUB >= 1)
      OP0UW02.OP0UWOPT[OPASUB] = " "; /* clean ws opt field*/
      OPAREC.OPASUB = OPAREC.OPASUB - 1; /* decrement subscript*/
    end
  else
    if (OPAREC.OPAERR == "N" /* no errors*/
     && OP0UW01.OP0UWDEL == "N") /* delete not yet confirmed*/
      converseLib.validationFailed(446); /* group will be deleted, press enter to confirm*/
    end
  end

end // end OP0US25

// upd - add a hot model group
Function OP0US30()


    /* ********************************************************/
    /* **  This statement group is intended to add a hot    ***/
    /* **  model group code and description to the database ***/
    /* **  dorder.vhotcd01.                                 ***/
    /* ********************************************************/


  OPXREC.OPXHMGRP = OP0UM001.OP0UMGRP[OPASUB];
  OP0US92(); /* call db2 check for duplicate*/
  if (SQLCA.VAGen_SQLCODE == 100) /* no duplicate found*/
    OP0UW02.OP0UWGRP[OPASUB] = OP0UM001.OP0UMGRP[OPASUB]; /* ws grp*/
    OP0UW02.OP0UWDSC[OPASUB] = OP0UM001.OP0UMDSC[OPASUB]; /* ws dsc*/
    OPXREC.OPXHMGRP = OP0UM001.OP0UMGRP[OPASUB]; /* group*/
    OPXREC.OPXHMDES = OP0UM001.OP0UMDSC[OPASUB]; /* desc*/
    OPXREC.OPXHMABR = " "; /* abreviation*/
    OPXREC.ZZZSDT = OPAREC.OPACDT; /* setup date*/
    OPXREC.ZZZCHGDT = 0; /* change date*/
    OPXREC.ZZZCHGTM = 0; /* change time*/
    OPXREC.ZZZCHGCT = 0; /* change count*/
    OP0UW02.ZZZCHGCT = 0; /* change ws count*/
    OP0US93(); /* call db2 for add*/
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* record exist - cannot add*/
      OPAREC.OPAERR = "Y"; /* set err flag on*/
      OP0UW02.OP0UWOPT[OPASUB] = " ";
      set OP0UM001.OP0UMGRP[OPASUB] cursor;
      set OP0UM001.OP0UMGRP[OPASUB] bold;
      converseLib.validationFailed(450); /* grp cde already exists, cannot add*/
      return;
    end
  end

end // end OP0US30

// upd - change a hot mod group
Function OP0US35()


    /* ********************************************************/
    /* **  This statement group is intended to change a hot ***/
    /* **  model group code and description to the database ***/
    /* **  dorder.vhotcd01.                                 ***/
    /* ********************************************************/


  OPXREC.OPXHMGRP = OP0UM001.OP0UMGRP[OPASUB]; /* format key*/
  OP0US92(); /* db2 check for unique record*/
  if (SQLCA.VAGen_SQLCODE == 0) /* record found*/
    OP0UW02.OP0UWGRP[OPASUB] = OP0UM001.OP0UMGRP[OPASUB]; /* group*/
    OP0UW02.OP0UWDSC[OPASUB] = OP0UM001.OP0UMDSC[OPASUB]; /* desc*/
    OPXREC.OPXHMGRP = OP0UM001.OP0UMGRP[OPASUB]; /* group*/
    OPXREC.OPXHMDES = OP0UM001.OP0UMDSC[OPASUB]; /* desc*/
    OPXREC.OPXHMABR = " "; /* abreviation*/
    OPXREC.ZZZCHGDT = OPAREC.OPACDT; /* change date*/
    OP0UW01.OP0UWTM1 = VGVar.currentFormattedTime; /* change time*/
    OP0UW01.OP0UWTHL = OP0UW01.OP0UWTHF; /* hour*/
    OP0UW01.OP0UWTML = OP0UW01.OP0UWTMF; /* minute*/
    OPXREC.ZZZCHGTM = OP0UW01.OP0UWTM3; /* format chg time*/
    OPXREC.ZZZCHGCT = OP0UW02.ZZZCHGCT[OPASUB]; /* frmt cnt*/
    OP0US94(); /* call db2 for change*/
  else
    OPAREC.OPAERR = "Y"; /* set err flag on*/
    OP0UW02.OP0UWOPT[OPASUB] = " ";
    set OP0UM001.OP0UMGRP[OPASUB] cursor;
    set OP0UM001.OP0UMGRP[OPASUB] bold;
    converseLib.validationFailed(339); /* no rec found to change msg*/
    return;
  end

end // end OP0US35

// upd - delete a hot mod group
Function OP0US40()


    /* ********************************************************/
    /* **  This statement group is intended to delete a hot ***/
    /* **  model group code and description on the database ***/
    /* **  dorder.vhotcd01.                                 ***/
    /* ********************************************************/


  OPXREC.OPXHMGRP = OP0UM001.OP0UMGRP[OPASUB];

  OP0US95(); /* call db2 to delete record*/


end // end OP0US40

// upd - delete styles for group
Function OP0US45()


    /* ********************************************************/
    /* **  this statement group will sequentially delete    ***/
    /* **  styles from the dorder.vhotsy01 database that    ***/
    /* **  are associated with the particular group.        ***/
    /* ********************************************************/

  OPZREC.OPXHMGRP = OP0UM001.OP0UMGRP[OPASUB]; /* frmt key*/

  OP0US97(); /* select style set to delete*/

  OP0US98(); /* priming read for first style record*/


  while (SQLCA.VAGen_SQLCODE == 0)
    if (OPZREC.OPZHMIND == "Y")
      SYLREC.XGPCD = "02"; /* frmt gpc code for product*/
      SYLREC.SY1STNBR = OPZREC.SY1STNBR; /* frmt product style*/
      SYLREC.SY2CLRID = OPZREC.SY2CLRID; /* frmt product color*/
      SYLREC.XDMCD = OPZREC.XDMCD; /* frmt product dimension*/
      SYLREC.OPZHMIND = "N"; /* frmt product hot model ind*/
      SYLREC.ZZZCHGDT = OPAREC.OPACDT; /* frmt chg date*/
      OP0UW01.OP0UWTM1 = VGVar.currentShortGregorianDate; /* hh:mm:ss*/
      OP0UW01.OP0UWTHL = OP0UW01.OP0UWTHF; /* hh*/
      OP0UW01.OP0UWTML = OP0UW01.OP0UWTMF; /* mm*/
      SYLREC.ZZZCHGTM = OP0UW01.OP0UWTM3; /* hhmm*/
      OP0US1B(); /* update products hot model indicator*/
    end
    OP0US99(); /* delete style record*/
    OP0US98(); /* get next style record*/
  end


  OP0US1A(); /* close cursor for style*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* release locks*/

end // end OP0US45

// inq - select a grp for trans
Function OP0US50()


    /* ********************************************************/
    /* **  This statement group is intended to select a hot ***/
    /* **  model group code and description on the database ***/
    /* **  dorder.vhotcd01 and pass keys in commarea to the ***/
    /* **  application op0t (hot model by style).           ***/
    /* ********************************************************/


  OPXREC.OPXHMGRP = OP0UM001.OP0UMGRP[OPASUB];

  OP0US92(); /* select unique group*/


  if (SQLCA.VAGen_SQLCODE == 0)
    if (OPAREC.OPAERR == "N") /* no errors*/
      COMMAREA.CAITEM = " ";
      COMMAREA.CAITEM = OP0UM001.OP0UMGRP[OPASUB];
      COMMAREA.CAFROMAP = "OP0U";
      COMMAREA.CATOAP = "OP0T";
      XSEXIT();
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OPAREC.OPAERR = "Y"; /* set error on*/
      set OP0UM001.OP0UMOPT[OPASUB] bold;
      set OP0UM001.OP0UMGRP[OPASUB] bold;
      set OP0UM001.OP0UMDSC[OPASUB] bold;
      set OP0UM001.OP0UMOPT[OPASUB] cursor;
      converseLib.validationFailed(453); /* group does not exist, cannot select*/
      return;
    end
  end

end // end OP0US50

// clean map and work storage
Function OP0US55()


    /* **********************************************************/
    /* **  This statement group cleans the map fields and     ***/
    /* **  working storage array.                             ***/
    /* **********************************************************/


  OPAREC.OPASUB = 1; /* set subscript to 1*/
  while (OPAREC.OPASUB <= 20) /* full page*/
    OP0UM001.OP0UMOPT[OPASUB] = " "; /* clear map opt*/
    OP0UM001.OP0UMGRP[OPASUB] = " "; /* clear map group*/
    OP0UM001.OP0UMDSC[OPASUB] = " "; /* clear map desc*/
    OP0UW02.OP0UWOPT[OPASUB] = " "; /* clear ws opt*/
    OP0UW02.OP0UWGRP[OPASUB] = " "; /* clear ws group*/
    OP0UW02.OP0UWDSC[OPASUB] = " "; /* clear ws desc*/
    OP0UW02.ZZZCHGCT = 0; /* clear ws change count*/
    OPAREC.OPASUB = OPAREC.OPASUB + 1; /* increment opasub*/
  end


end // end OP0US55

// abend routine
Function OP0US85()


    /* ********************************************************/
    /* **  Abend routine.                                   ***/
    /* ********************************************************/


       /* abend with negative sqlcode*/


  TA1REC.TA1TYPE = "DB2"; /* db2 abend*/
  TA1REC.TA1PGMNM = "OP0U"; /* program calling name*/
  TA1REC.TA1LOCAT[4] = " "; /* location 4*/
  TA1REC.TA1MAP = "OP0UM001"; /* appl map name*/

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST"; /* post error*/

    try
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end /* call abend reporter*/
    converseLib.validationFailed(487); /* database busy, press enter to try again*/

  else
    TA1REC.TA1FUNC = "RETN";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    try
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end /* call abend reporter*/
    XSPF4();
    VAGen_EZEMSG = COMMAREA.CAMSG;
  end
  OPAREC.OPAERR = "Y"; /* set error flag on*/


end // end OP0US85

// db2 call for sel set for group
Function OP0US90()


    /* ********************************************************/
    /* **  This statement group calls db2 dorder.vhotcd01   ***/
    /* **  and selects all rows and orders by group code.   ***/
    /* ********************************************************/


  set SQLCA empty;

  call "IO3160" ("SS", SQLCA, OPXREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "SS"; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO3160"; /* i/o module called*/
    TA1REC.TA1LOCAT[3] = "OP0US90"; /* where blew up*/
    TA1REC.TA1DBASE = "DORDER"; /* database blew in*/
    TA1REC.TA1TBLVU = "VHOTCD01"; /* view blew in*/
    TA1REC.TA1TBLKE = OPXREC.OPXHMGRP; /* key of rec blew on*/
    OP0US85(); /* abend routine*/
  end


end // end OP0US90

// db2 call for get next group
Function OP0US91()


    /* ********************************************************/
    /* **  This statement group calls db2 dorder.vhotcd01   ***/
    /* **  and selects next row to process.                 ***/
    /* ********************************************************/


  set SQLCA empty;

  call "IO3160" ("SN", SQLCA, OPXREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "SN"; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO3160"; /* i/o module called*/
    TA1REC.TA1LOCAT[3] = "OP0US91"; /* where blew up*/
    TA1REC.TA1DBASE = "DORDER"; /* database blew in*/
    TA1REC.TA1TBLVU = "VHOTCD01"; /* view blew in*/
    TA1REC.TA1TBLKE = OPXREC.OPXHMGRP; /* key of rec blew on*/
    OP0US85(); /* call abend reporter*/
  end


end // end OP0US91

// db2 call for unique rec - add
Function OP0US92()


    /* ********************************************************/
    /* **  This statement group calls db2 dorder.vhotcd01   ***/
    /* **  and determines if the record exists on the data- ***/
    /* **  base. (used for add, change, and select function)***/
    /* ********************************************************/


  set SQLCA empty;

  call "IO3160" ("S ", SQLCA, OPXREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "S "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO3160"; /* i/o module called*/
    TA1REC.TA1LOCAT[3] = "OP0US92"; /* where blew up*/
    TA1REC.TA1DBASE = "DORDER"; /* database blew in*/
    TA1REC.TA1TBLVU = "VHOTCD01"; /* view blew in*/
    TA1REC.TA1TBLKE = OPXREC.OPXHMGRP; /* key of rec blew on*/
    OP0US85(); /* abend routine*/
  end


end // end OP0US92

// db2 call for adding record
Function OP0US93()


    /* ********************************************************/
    /* **  This statement group calls db2 dorder.vhotcd01   ***/
    /* **  and adds the record to the database.             ***/
    /* ********************************************************/


  set SQLCA empty;

  call "IO3160" ("A ", SQLCA, OPXREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "A "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO3160"; /* i/o module called*/
    TA1REC.TA1LOCAT[3] = "OP0US93"; /* where blew up*/
    TA1REC.TA1DBASE = "DORDER"; /* database blew in*/
    TA1REC.TA1TBLVU = "VHOTCD01"; /* view blew in*/
    TA1REC.TA1TBLKE = OPXREC.OPXHMGRP; /* key of rec blew on*/
    OP0US85(); /* abend routine*/
  end


end // end OP0US93

// db2 call for changing record
Function OP0US94()


    /* ********************************************************/
    /* **  This statement group calls db2 dorder.vhotcd01   ***/
    /* **  and changes the record on the database.          ***/
    /* ********************************************************/


  set SQLCA empty;

  call "IO3160" ("U ", SQLCA, OPXREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "U "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO3160"; /* i/o module called*/
    TA1REC.TA1LOCAT[3] = "OP0US94"; /* where blew up*/
    TA1REC.TA1DBASE = "DORDER"; /* database blew in*/
    TA1REC.TA1TBLVU = "VHOTCD01"; /* view blew in*/
    TA1REC.TA1TBLKE = OPXREC.OPXHMGRP; /* key of rec blew on*/
    OP0US85(); /* abend routine*/
  end


end // end OP0US94

// db2 call for deleting record
Function OP0US95()


    /* ********************************************************/
    /* **  This statement group calls db2 dorder.vhotcd01   ***/
    /* **  and deletes the record from the database.        ***/
    /* ********************************************************/


  set SQLCA empty;

  call "IO3160" ("D ", SQLCA, OPXREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "D "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO3160"; /* i/o module called*/
    TA1REC.TA1LOCAT[3] = "OP0US95"; /* where blew up*/
    TA1REC.TA1DBASE = "DORDER"; /* database blew in*/
    TA1REC.TA1TBLVU = "VHOTCD01"; /* view blew in*/
    TA1REC.TA1TBLKE = OPXREC.OPXHMGRP; /* key of rec blew on*/
    OP0US85(); /* abend routine*/
  end


end // end OP0US95

// db2 call - closing cursor 3160
Function OP0US96()


    /* ********************************************************/
    /* **  This statement group calls db2 and closes the    ***/
    /* **  cursor scan.                                     ***/
    /* ********************************************************/


  set SQLCA empty;

  call "IO3160" ("CS", SQLCA, OPXREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "CS"; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO3160"; /* i/o module called*/
    TA1REC.TA1LOCAT[3] = "OP0US96"; /* where blew up*/
    TA1REC.TA1DBASE = "DORDER"; /* database blew in*/
    TA1REC.TA1TBLVU = "VHOTCD01"; /* view blew in*/
    OP0US85(); /* abend routine*/
  end


end // end OP0US96

// select set for styles
Function OP0US97()


    /* ********************************************************/
    /* **  This statement group calls db2 dorder.vhotsy01   ***/
    /* **  and selects all records from the database assoc- ***/
    /* **  iated with that hot model group.                 ***/
    /* ********************************************************/


  set SQLCA empty;

  call "IO3180" ("SS", SQLCA, OPZREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "SS"; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO3180"; /* i/o module called*/
    TA1REC.TA1LOCAT[3] = "OP0US97"; /* where blew up*/
    TA1REC.TA1DBASE = "DORDER"; /* database blew in*/
    TA1REC.TA1TBLVU = "VHOTSY01"; /* view blew in*/
    TA1REC.TA1TBLKE = OPXREC.OPXHMGRP; /* key of rec blew on*/
    OP0US85(); /* abend routine*/
  end


end // end OP0US97

// select next style
Function OP0US98()


    /* ********************************************************/
    /* **  This statement group calls db2 dorder.vhotsy01   ***/
    /* **  and selects the next record from the database    ***/
    /* **  associated with that hot model group.            ***/
    /* ********************************************************/


  set SQLCA empty;

  call "IO3180" ("SN", SQLCA, OPZREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "SN"; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO3180"; /* i/o module called*/
    TA1REC.TA1LOCAT[3] = "OP0US98"; /* where blew up*/
    TA1REC.TA1DBASE = "DORDER"; /* database blew in*/
    TA1REC.TA1TBLVU = "VHOTSY01"; /* view blew in*/
    TA1REC.TA1TBLKE = OPZREC.SY1STNBR; /* key of rec blew on*/
    OP0US85(); /* abend routine*/
  end


end // end OP0US98

// db2 call for deleting style
Function OP0US99()


    /* ********************************************************/
    /* **  This statement group calls db2 dorder.vhotsy01   ***/
    /* **  and deletes the record from the database assoc-  ***/
    /* **  iated with that hot model group.                 ***/
    /* ********************************************************/


  set SQLCA empty;

  call "IO3180" ("D ", SQLCA, OPZREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "D "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO3180"; /* i/o module called*/
    TA1REC.TA1LOCAT[3] = "OP0US99"; /* where blew up*/
    TA1REC.TA1DBASE = "DORDER"; /* database blew in*/
    TA1REC.TA1TBLVU = "VHOTSY01"; /* view blew in*/
    TA1REC.TA1TBLKE = OPZREC.SY1STNBR; /* key of rec blew on*/
    OP0US85(); /* abend routine*/
  end


end // end OP0US99

//*** RECORD=OP0UW01 ****
// ******** hot model appl op0u working storage rec ***********
// date created: 02/16/89
// maintenance log:
// date:         init:    comments:
// ------------------------------------------------------------
// 02/16/89     schase    created
// ***********************
Record OP0UW01 type basicRecord
  5 OP0UWRC1 OP0UWRC1 ; 
    10 OP0UWTM1 OP0UWTM1 ; 
      15 OP0UWTHF OP0UWTHF ; 
      15 * char(1) ; 
      15 OP0UWTMF OP0UWTMF ; 
      15 * char(1) ; 
      15 OP0UWTSF OP0UWTSF ; 
    10 OP0UWTM2 OP0UWTM2 ; 
      15 OP0UWTM3 OP0UWTM3 ; 
        20 OP0UWTHL OP0UWTHL ; 
        20 OP0UWTML OP0UWTML ; 
      15 OP0UWTSL OP0UWTSL ; 
    10 OP0UWMM1 OP0UWMM1 ; 
    10 OP0UWSS1 OP0UWSS1 ; 
    10 OP0UWSW OP0UWSW [20] ; 
    10 OP0UWUPD OP0UWUPD ; 
    10 OP0UWDEL OP0UWDEL ; 
    10 OP0UWSEC OP0UWSEC ; 
end // end OP0UW01

Record OP0UW02 type basicRecord
  10 OP0UWRC2 OP0UWRC2 [20] ; 
    15 OP0UWOPT OP0UWOPT ; 
    15 OP0UWGRP OP0UWGRP ; 
    15 OP0UWDSC OP0UWDSC ; 
    15 ZZZCHGCT ZZZCHGCT ; 
end // end OP0UW02

// delete flag y/n
DataItem OP0UWDEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws group desc
DataItem OP0UWDSC char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws group code
DataItem OP0UWGRP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// mm
DataItem OP0UWMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws map option
DataItem OP0UWOPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op0u work record
DataItem OP0UWRC1 char(341)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group ws record
DataItem OP0UWRC2 char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// security auth flag y/n
DataItem OP0UWSEC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ss
DataItem OP0UWSS1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// confirm delete value
DataItem OP0UWSW char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// change hour
DataItem OP0UWTHF char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hh
DataItem OP0UWTHL num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hh:mm:ss
DataItem OP0UWTM1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hhmmss
DataItem OP0UWTM2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hhmm
DataItem OP0UWTM3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change minute
DataItem OP0UWTMF char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// mm
DataItem OP0UWTML num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change second
DataItem OP0UWTSF char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ss
DataItem OP0UWTSL num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// update flag y/n
DataItem OP0UWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

