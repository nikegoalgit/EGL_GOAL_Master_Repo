package op0a;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import dg.common.*;
import ko.common.*;
import ku.common.*;
import ob.common.*;
import op.common.*;
import pc.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import vv.common.*;
//*** PROGRAM=OP0A ****
// nike order session defaults screen
// 
// overview: this application allows the user to define certain
//           session defaults for a batch of orders to be
//           entered.  the defaults will be retained as long
//           as the user remains within order entry.
// 
// process/stmt group       description
// ------------------------ -----------------------------------
// op0a001                  application init
//         xsentry          entry security
// op0a005                  converse map/edit aid key/fast path
//         op0as01          set mdt's on aid key error
//         xspf1            help
//         xspf4            master menu
//         xsexit           fast path
// op0a010                  edit fields/xfer to next appl
//         op0as10          edit field control
//                 op0as11  edit misc ord header
//                 op0as12  edit order desk
//                 op0as13  edit sales program
//                 op0as14  edit order class
//                 op0as15  edit order type
//                 op0as16  edit need date
//                 op0as17  edit screen flow
//                 op0as18  edit service rep
//         op0as20          edit field relationship control
//                 op0as21  edit sales prgm/ord type/need date
//                 op0as22  edit ord type/ord class
// 
// date created: 05/07/86
//       author: steve noble
// 
// maintenance history:
// 
//     date    by whom  rev overview of changes made
//   --------  -------  -- ------------------------------------
//   05-07-86  snoble       initial creation
//   08-22-86  dsmith   1   changed initialization of records
//                          to allow 'taken by' to default
//   11-14-86  bcourt   2   force needdate = today for at-once
//                          order type.
//   10-13-88  jwood        changed calls to include NONCSP opt
//   12/13/88  dwalke   3   allow need date up to two years
//                          s16, bug #101
//   01/09/89  dwalke   4  add segmented transaction id to appl
//   03/22/89  obecke   5  add gpc code to map. add/chg logic
//                         for base order type.
//   05/02/89  obecke   6  chg s23, add w01, op0awfnd flag. use
//                         flag for lookup in xvotbl. do not
//                         move '99' to xobcd to end search!!
//   05/30/90  BWATSO      Brand code changes.  Changed: S10,
//                         S23, and W01.  New: S24 and S30.
//   01/18/91  craine      change screen flow default to '2'
//   01/21/91  craine      change screen flow default to '1'
//                         for NIL (wimps!!!) and '2' for
//                         everyone else.
//   02/15/91  dmeier      regen for database changes
//   03/15/91  jloyer      Change Memphis apparel xsocd from
//                         '03' to '20'; s10, s23, s25 (new),
//                         added xsocd to op0aw01.
//   04/02/91  jloyer      Chg xsocd = '01' or '02' to '20' on
//                         apparel orders; s25
//   05/15/92  jhecke      protect userid on the map m001
//   05/13/93  dcaust      log #964 international airborne
//                         phase II.  add edits to base ot,
//                         order class.  s19, s14.
//   07/07/93  gcalki      log #848 international divert orders
//                         system secutity change - change
//                         level 5 flag CACLVL(5) used to check
//                         if the user has divert order authrty
//                         s16, w01, s-chk-divert
//   04/01/94  gcalki      log #1003 - renamed causera to
//                         ca-user-workarea-4k so it can hold
//                         opwrec which is now 3072 bytes.(ALL)
//   12/07/96  csawki      Added Product Category for Equipment
//   06/24/97  csawki      Added Equipment/Product Category
//                         changes. Added/modified changes to
//                         OP0AM001, OP0AS01, OP0AS03, OP0AS10,
//                         OP0AS20, OP0AS23, OP0AS27, OP0AS28,
//                         OP0A001, OP0A010.
// 
//   03/24/98  sgopal      removed use of xvotbl and added code
//                         to access dcorp.vxvo0001 using the
//                         iomod vxvo0001.
//                         The statement group changed is:S23
// 
//   04/01/98  sgopal      Removed code that accesses XVOTBL in
//                         OP0AS23.
//   09/27/99  sbhara      Timing changes
//                         The new validation will not allow
//                         The order types other than "p1",
//                         "p2","d2" fro the product
//                         categories "kn" or "st"
//   10//11/99 SBHARA      TIMING  CHANGES
//                         Changed the code in OP0AS23,OP0AS27
//                         to retrict the future orders
//                         entering in to the system for
//                         timing categories 'st' 'kn'
//   10/27.99  sbhara      Commenting out timing changes
//                         as per thr user's request
// *********************
Program OP0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KUYREC KUYREC; // record
  OP0AW01 OP0AW01; // record
  OP1REC OP1REC; // record
  OPAREC OPAREC; // record
  OPWREC OPWREC; // record
  OPWREC01 OPWREC01; // record
  SP1REC SP1REC; // record
  SP2REC SP2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  VXVO0001 VXVO0001; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XOBTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XOCTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XSOTBL {deleteAfterUse = yes}; // table
  use OP0AM.OP0AM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OP0A001: OP0A001();



    goto OP0A005; /* branch to converse*/



     /* *************************************************************/
    OP0A005: OP0A005();



        /* if error flag set then converse the map*/


    if (OPAREC.OPAERR == "Y")
      goto OP0A005; /* branch to converse map*/
    end

    goto OP0A010; /* branch to edit fields*/



     /* *************************************************************/
    OP0A010: OP0A010();



        /* if we got here, then assume an error was found*/


    goto OP0A005; /* branch to converse map*/



     /* ************************************************************/
  end // end main
end // end OP0A

// program init
Function OP0A001()



     /* **********************************************************/
     /* * this process initializes program work and map areas.  **/
     /* **********************************************************/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

      /* set revision number of application*/

  OP0AM001.OPMRVN = 02;


      /* check entry security*/

  XSENTRY();


   /* ****************************************************/
   /* *** set segmented trans id                      ****/
   /* ****************************************************/

  COMMAREA.CAEZSAP = sysVar.transactionID;
  COMMAREA.CAEZSG12 = "OP";
  COMMAREA.CAEZSG4 = "A";
  sysVar.transactionID = COMMAREA.CAEZSAP;

   /* *************************************************************/

      /* clear ws recs*/

  OP0AS01(); /* set ws recs empty*/


      /* clear user comm area if not recognized*/

  OPWREC.OPWSGRP = COMMAREA.CA-USER-WORKAREA-4K;
  OPWREC01.XPCGRP = COMMAREA.CA-USER-WORKAREA-2K-C;
  if (OPWREC.OPWINIT != "OP0")
    set OPWREC empty; /* clear user common area*/
    set OPWREC01 empty; /* clear user common area*/
    OPWREC.OPWINIT = "OP0"; /* set user common area init flag*/
    OPWREC.OP1GROUP = OP1REC.OP1GROUP; /* init op1rec area*/
    OPWREC01.XPCGRP = " "; /* init op1rec area*/
  end


      /* init error diag areas*/

  TA1REC.TA1TYPE = "DB2 "; /* abend type*/
  TA1REC.TA1FUNC = "RETN"; /* abend function (return)*/
  TA1REC.TA1PGMNM = "OP0A    "; /* pgm name*/
  TA1REC.TA1MAP = "OP0AM001"; /* current map name*/
  TA1REC.TA1LOCAT[1] = "OP0A001 "; /* process name*/


      /* initialize user ws and map fields*/

  OP0AM001.OPMDT = VGVar.currentShortGregorianDate; /* current date*/
  OPAREC.OPACYMD = VGVar.currentShortGregorianDate; /* current date*/
  if (OPAREC.OPACYY > 56) /* set century based on year*/
    OPAREC.OPACCC = 19;
  else
    OPAREC.OPACCC = 20;
  end


      /* set defaults*/

  if (OPWREC.OPWENTLN == " ") /* entered by rep userid*/
    OPWREC.OPWENTLN = COMMAREA.CAUSERID;
    OP0AM001.XXXUSRID = COMMAREA.CAUSERID;
    OP0AS02(); /* get xsvid for logon userid*/
    if (OPAREC.OPAERR == "Y") /* invalid or not found*/
      OPWREC.OPWENTLN = " "; /* clear userid*/
      converseLib.validationFailed(000); /* reset ezemno*/
    end
  end

  if (OPWREC.OPWENTLN > " ") /* entered-by rep userid*/
    OP0AM001.XXXUSRID = OPWREC.OPWENTLN;
  else
   /* SET OP0AM001.XXXUSRID MODIFIED;        /* make field required*/
  end

  if (OPWREC.OPWSFLOW == " ") /* screen flow*/
    if (COMMAREA.XDVCD == "01")
      OPWREC.OPWSFLOW = "2";
    else
      OPWREC.OPWSFLOW = "1";
    end
  end
  OP0AM001.OP0AMSCF = OPWREC.OPWSFLOW;

  if (OPWREC.OPWDNDT > 0) /* need date*/
    OPAREC.OPAWDT = OPWREC.OPWDNDT; /* format need date*/
    OPAREC.OPAFMM = OPAREC.OPAWMM;
    OPAREC.OPAFDD = OPAREC.OPAWDD;
    OPAREC.OPAFYY = OPAREC.OPAWYY;
    OP0AM001.OP0AMNDT = OPAREC.OPAFDT;
    set OP0AM001.OP0AMNDT modified;
  end

  if (OPWREC.XOBCD > " ") /* default order type code*/
    OP0AM001.XOBCD = OPWREC.XOBCD;
    if (OPWREC.XOBCD in XOBTBL.XOBCD /* valid code*/
     && XOBTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active entry*/
      OP0AM001.XOBDESC = XOBTBL.XOBDESC[sysVar.arrayIndex]; /* set desc*/
      set OP0AM001.XOBCD modified; /* set modified for edit*/
    else
      set OP0AM001.XOBCD modified; /* set modified for edit*/
    end
  end

  if (OPWREC.XGPCD > " ") /* default gpc*/
    OP0AM001.XGPCD = OPWREC.XGPCD;
    if (OPWREC.XGPCD in XGPTBL.XGPCD /* valid code*/
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active entry*/
      OP0AM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* set desc*/
      set OP0AM001.XGPCD modified; /* set modified for edit*/
    else
      set OP0AM001.XGPCD modified; /* set modified for edit*/
    end
  end

  if (OPWREC.OPWXOCCD > " ") /* default order class code*/
    OP0AM001.XOCCD = OPWREC.OPWXOCCD;
    if (OPWREC.OPWXOCCD in XOCTBL.XOCCD /* valid code*/
     && XOCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active entry*/
      OP0AM001.XOCDESC = XOCTBL.XOCDESC[sysVar.arrayIndex];
      set OP0AM001.XOCCD modified; /* set modified for edit*/
    else
      set OP0AM001.XOCCD modified; /* set modified for edit*/
    end
  end

  if (OPWREC01.XPCCD > " ")
    OP0AM001.XPCCD = OPWREC01.XPCCD;
  end

  if (OPWREC.OPWSP1ID > " ") /* sales program*/
    OP0AM001.SP1ID = OPWREC.OPWSP1ID; /* sales program id*/
    OP0AS13(); /* access sales program for name*/
  end

  if (OPWREC.OPWORDSK == " ") /* order desk*/
    OPWREC.OPWORDSK = "N";
  end
  OP0AM001.OP0AMODS = OPWREC.OPWORDSK; /* init map field*/

  if (OPWREC.OPWDOHD == " ") /* show misc ord hdr screen*/
    OPWREC.OPWDOHD = "N";
  end
  OP0AM001.OP0AMDOH = OPWREC.OPWDOHD;



   /* *************************************************************/
end // end OP0A001

// converse map to get fields
Function OP0A005()



      /* *********************************************************/
      /* * this process converses the map, processing aid key   **/
      /* * requests, and fast path requests.  enter or pf12     **/
      /* * with no fast path will proceed to the next process   **/
      /* * to perform field edits.                              **/
      /* *********************************************************/


      /* init error diag areas*/

  TA1REC.TA1MAP = "OP0AM001"; /* current map name*/
  TA1REC.TA1LOCAT[1] = "OP0A005 "; /* process name*/


      /* move catoap and caitem to map*/

  OP0AM001.CATOAP = COMMAREA.CATOAP;
  OP0AM001.CAITEM = COMMAREA.CAITEM;


      /* force segmented converse execution mode*/

  converseVar.segmentedMode = 1; /* force segmented execution mode*/



   /* *************************************************************/
  converse OP0AM001 ;
   /* *************************************************************/



      /* clear message fields*/

  OP0AM001.OPMUMSG = " "; /* clear user msg*/
  OPAREC.OPAERR = "N"; /* clear err flag*/


      /* clear message fields*/

  OP0AS03(); /* set mdt's on if on*/


      /* check and process valid aid key requests*/

      /* enter - continue processing*/
        /* pf1 - transfer to help application*/
        /* pf3 - transfer to order processing menu application*/
        /* pf4 - transfer to master menu application*/
        /* pf12- edit only (show descriptions)*/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
     /* ** next sentence ** continue processing ***/
  else
    if (converseVar.eventKey is pf1) /* check for system help*/
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user comm area*/
      XSPF1(); /* help facility*/
      OP0AM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* move err msg*/
      OPAREC.OPAERR = "Y"; /* set err flag*/
      COMMAREA.CATOAP = " "; /* clear app*/
      exit stack;
    else
      if (converseVar.eventKey is pf3) /* check for order processing menu*/
        COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user comm area*/
        COMMAREA.CATOAP = "OP0M"; /* set to application*/
        XSEXIT(); /* invoke transfer routine*/
        OP0AM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* move err msg*/
        OPAREC.OPAERR = "Y"; /* set err flag*/
        COMMAREA.CATOAP = " "; /* clear app*/
        exit stack;
      else
        if (converseVar.eventKey is pf4) /* check for master menu*/
          COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user comm area*/
          XSPF4(); /* invoke master menu request*/
          OP0AM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* move err msg*/
          OPAREC.OPAERR = "Y"; /* set err flag*/
          COMMAREA.CATOAP = " "; /* clear app*/
          exit stack;
        else
          converseLib.validationFailed(008); /* invalid key pressed*/
          OPAREC.OPAERR = "Y"; /* set err flag*/
          exit stack;
        end
      end
    end
  end


      /* save fast path data*/

  if (OP0AM001.CATOAP is modified)
    COMMAREA.CATOAP = OP0AM001.CATOAP; /* save fast path appl*/
  end
  set OP0AM001.CATOAP initialAttributes;

  if (OP0AM001.CAITEM is modified)
    COMMAREA.CAITEM = OP0AM001.CAITEM; /* save fast path item*/
  end
  set OP0AM001.CAITEM initialAttributes;


      /* a transfer overides all other screen requests*/

  if (converseVar.eventKey is enter /* transfer only on enter key*/
   && COMMAREA.CATOAP > " ")        /* transfer to appl?*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user comm area*/
    XSEXIT(); /* pass control to exit routine*/
    OP0AM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* move err msg*/
    OPAREC.OPAERR = "Y"; /* set err flag*/
    set OP0AM001.CATOAP cursor, modified, bold;
    exit stack;
  end



   /* *************************************************************/
end // end OP0A005

// edit fields
Function OP0A010()



      /* *********************************************************/
      /* * this process controls the field editing.             **/
      /* * if error then converse the map, otherwise xfer       **/
      /* * to op0b o/e function menu.                           **/
      /* *                                                      **/
      /* * the fields are edited in reverse order so that the   **/
      /* * the cursor and error message will be related to the  **/
      /* * top most error.  any errors below the top most most  **/
      /* * error will still be highlighted.                     **/
      /* *********************************************************/



      /* init error diag areas*/

  TA1REC.TA1LOCAT[1] = "OP0A010 "; /* process name*/


      /* invoke edit control*/

  OP0AS10(); /* control field edits*/


      /* call commit to release data base resources*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value


      /* if errors found*/
      /* or pf12 (edit only), then converse map*/

  if (OPAREC.OPAERR == "Y"
   || converseVar.eventKey is pf12)
    exit stack;
  end


      /* no errors found --- transfer to op0b o/e function*/
      /* menu application.*/

   /* save prod cat o/e*/
  COMMAREA.CA-USER-WORKAREA-2K-C = OPWREC01.XPCCD; /* user commarea*/


  COMMAREA.CA-USER-WORKAREA-4K = OPWREC.OPWSGRP; /* save user commarea*/
  COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
  COMMAREA.CACURRAP = "OP0B";
  transfer to program "OP0B" passing COMMAREA; /* transfer to o/e menu*/



   /* *************************************************************/
end // end OP0A010

// CHECK IF DIVERT ORDER
Function OP0AS-CHK-DIVERT()
   /* ***********************************************************************/

   /* YOU ARE HERE IF USER ENTERS A NEED DATE PRIOR TO CURRENT DATE*/

   /* ***********************************************************************/


  if (CACLVL[5] == "Y"       /* has divert order authorit*/
   && COMMAREA.XDVCD == "02" /* if international order*/
   && OP0AM001.XOBCD == "F1") /* base ot futures*/
    OP0AW01.OP0AW-DIVERT-ORDER-FL = "Y"; /* this is a divert order*/
  else
    OP0AW01.OP0AW-DIVERT-ORDER-FL = "N"; /* not a divert order*/
  end

end // end OP0AS-CHK-DIVERT

// set ws recs empty
Function OP0AS01()



      /* *********************************************************/
      /* * this statement group sets the working storage records**/
      /* * empty during initialization                          **/
      /* *********************************************************/



      /* set ws recs empty*/

  set OPWREC empty;
  set OPWREC01 empty;
  set OPAREC empty;
  set SQLCA empty;
  set TA1REC empty;
  set TA2REC empty;
  set KUYREC empty;
  set OP1REC empty;
  set SP1REC empty;
  set SP2REC empty;



   /* *************************************************************/
end // end OP0AS01

// edit entered by service rep id
Function OP0AS02()



      /* *********************************************************/
      /* * this statement group edits the entered by service    **/
      /* * rep id                                               **/
      /* *********************************************************/



      /* check for service rep id of zero*/

  if (OP0AM001.XXXUSRID == " ") /* null entry?*/
    converseLib.validationFailed(011); /* entered-by is not a valid service rep id*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0AM001.KUYREPNM = " "; /* clear entered-by name*/
    set OP0AM001.XXXUSRID cursor, modified, bold;
    return;
  end


      /* verify that the service rep id exists in the xsv table*/

  KUYREC.XXXUSRID = OP0AM001.XXXUSRID; /* load key - user id*/
  call "IO0550" ("SA", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0   /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100 /* check for notfnd rc*/
   || SQLCA.VAGen_SQLCODE == -811) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSVREP01"; /* table view*/
    TA1REC.TA1TBLKE = KUYREC.XXXUSRID; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0AS02 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0550  "; /* i/o mod name*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* invoke syncpoint rollback*/
    try
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end /* call abend formatter*/
    COMMAREA.CAUSERA = " "; /* clear user commarea*/
    XSPF4(); /* invoke master menu*/
    exit program;
  end


      /* if not found or not active then error*/

  if (SQLCA.VAGen_SQLCODE == 100  /* check for notfnd rc*/
   || SQLCA.VAGen_SQLCODE == -811 /* check for more than one*/
   || KUYREC.XXXSTAT != "A")      /* check for active id*/
    converseLib.validationFailed(011); /* entered-by is not a valid service rep id*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0AM001.KUYREPNM = " "; /* clear entered-by name*/
   /* SET OP0AM001.XXXUSRID CURSOR,MODIFIED,BRIGHT;*/
  else
    OPWREC.OPWENTID = KUYREC.KUYSVRID; /* save rep id*/
    OP0AM001.KUYREPNM = KUYREC.KUYREPNM; /* move rep name to map*/
    OPWREC.OPWENTLN = OP0AM001.XXXUSRID; /* save entered-by userid*/
   /* SET OP0AM001.XXXUSRID NORMAL;*/
  end



   /* *************************************************************/
end // end OP0AS02

// set mdt's for modified fields
Function OP0AS03()



      /* set mdt's in fields for the case of invalid aid key*/
      /* or termination of edits.  this allows the user to*/
      /* to press the correct aid key or correct error fields*/
      /* without having to re-enter the data.*/

      /* if the fields are not modified then they will be set*/
      /* as defined so as to reset any bright attribs.*/

  if (OP0AM001.XXXUSRID is modified) /* service rep id*/
    set OP0AM001.XXXUSRID modified;
  else
    set OP0AM001.XXXUSRID normal;
  end

  if (OP0AM001.OP0AMSCF is modified) /* screen flow*/
    set OP0AM001.OP0AMSCF modified;
  else
    set OP0AM001.OP0AMSCF normal;
  end

  if (OP0AM001.OP0AMNDT is modified) /* need date*/
    set OP0AM001.OP0AMNDT modified;
  else
    set OP0AM001.OP0AMNDT normal;
  end

  if (OP0AM001.XOBCD is modified) /* base order type*/
    set OP0AM001.XOBCD modified;
    set OP0AM001.XGPCD modified; /* need to check out gpc too*/
  else
    set OP0AM001.XOBCD normal;
  end

  if (OP0AM001.XGPCD is modified) /* gpc*/
    set OP0AM001.XGPCD modified;
  else
    if (OP0AM001.XOBCD is modified) /* if base order type entered,*/
      set OP0AM001.XGPCD modified; /* need to check out gpc too*/
    else
      set OP0AM001.XGPCD normal;
    end
  end

  if (OP0AM001.XOCCD is modified) /* order class*/
    set OP0AM001.XOCCD modified;
  else
    set OP0AM001.XOCCD normal;
  end

  if (OP0AM001.SP1ID is modified) /* sales program*/
    set OP0AM001.SP1ID modified;
  else
    set OP0AM001.SP1ID normal;
  end

  if (OP0AM001.XPCCD is modified) /* if product category entered,*/
    set OP0AM001.XPCCD modified;
    set OP0AM001.XGPCD modified; /* need to set gpc too*/
  else
    set OP0AM001.XPCCD normal;
  end

  if (OP0AM001.OP0AMODS is modified) /* order desk*/
    set OP0AM001.OP0AMODS modified;
  else
    set OP0AM001.OP0AMODS normal;
  end

  if (OP0AM001.OP0AMDOH is modified) /* display order header*/
    set OP0AM001.OP0AMDOH modified;
  else
    set OP0AM001.OP0AMDOH normal;
  end

  if (OP0AM001.CATOAP is modified) /* fast path option*/
    set OP0AM001.CATOAP modified;
  else
    set OP0AM001.CATOAP normal;
  end

  if (OP0AM001.CAITEM is modified) /* fast path item*/
    set OP0AM001.CAITEM modified;
  else
    set OP0AM001.CAITEM normal;
  end



   /* *************************************************************/
end // end OP0AS03

// control field edits
Function OP0AS10()



      /* *********************************************************/
      /* * this statement group controls the field editing.     **/
      /* *                                                      **/
      /* * the fields are edited in reverse order so that the   **/
      /* * the cursor and error message will be related to the  **/
      /* * top most error.  any errors below the top most most  **/
      /* * error will still be highlighted.                     **/
      /* *********************************************************/



      /* init error diag areas*/

  TA1REC.TA1LOCAT[2] = "OP0AS10 "; /* statement group*/


      /* edit/save misc order header screen question*/

  if (OP0AM001.OP0AMDOH is modified)
    OP0AS11(); /* misc header edit*/
  end


      /* edit/save order desk question*/

  if (OP0AM001.OP0AMODS is modified)
    OP0AS12(); /* order desk edit*/
  end


      /* edit/save product category code*/

  if (OP0AM001.XPCCD is modified)
    OP0AS27(); /* product category edit*/
  end


      /* edit/save sales program*/

  if (OP0AM001.SP1ID is modified)
    OP0AS13(); /* sales program edit*/
  end


      /* edit/save order class code*/

  if (OP0AM001.XOCCD is modified)
    OP0AS14(); /* order class edit*/
  end


      /* edit/save gpc code*/

  if (OP0AM001.XGPCD is modified
   || OP0AM001.XOBCD is modified)
    OP0AS18(); /* gpc code edit*/
  end

      /* edit/save order type code*/

  if (OP0AM001.XOBCD is modified)
    OP0AS19(); /* base order type edit*/
  end


      /* edit/save need date*/

  if (OP0AM001.OP0AMNDT is modified
   || OP0AM001.XOBCD is modified) /* recheck for a divert order*/
    OP0AS16(); /* need date edit*/
  end


      /* edit/save selected screen sequence*/

  if (OP0AM001.OP0AMSCF is modified)
    OP0AS17(); /* screen flow edit*/
  end


      /* edit/save service rep*/

  if (OP0AM001.XXXUSRID is modified)
    OP0AS02(); /* service rep edit*/
    if (OPAREC.OPAERR == "N")
      OP0AS24(); /* edit brand of service rep*/
    end
  end


  if (OPAREC.OPAERR == "N"
   && OP0AM001.XGPCD != " "
   && OP0AM001.XOBCD != " ")
    OP0AS25(); /* check for xsocd conversions*/
    OP0AS23(); /* get system order type via xvotbl*/
  end

      /* perform field relationship edits if no previous errors*/

  if (OPAREC.OPAERR == "Y")
    return;
  end

  OP0AS20(); /* control relationship edits*/



   /* *************************************************************/
end // end OP0AS10

// edit display misc order header
Function OP0AS11()



      /* *********************************************************/
      /* * this statement group edits the misc order header fld **/
      /* *********************************************************/



  if (OP0AM001.OP0AMDOH == "Y"
   || OP0AM001.OP0AMDOH == "N")
    OPWREC.OPWDOHD = OP0AM001.OP0AMDOH; /* save field*/
    set OP0AM001.OP0AMDOH normal;
  else
    converseLib.validationFailed(029); /* misc order header must be "y" or "n"*/
    OPAREC.OPAERR = "Y"; /* set err flag*/
    set OP0AM001.OP0AMDOH cursor, modified, bold;
  end



   /* *************************************************************/
end // end OP0AS11

// edit order desk
Function OP0AS12()



      /* *********************************************************/
      /* * this statement group edits the order desk field.     **/
      /* *********************************************************/



  if (OP0AM001.OP0AMODS == "N" /* order desk*/
   || OP0AM001.OP0AMODS == "Y")
    OPWREC.OPWORDSK = OP0AM001.OP0AMODS; /* save field*/
    set OP0AM001.OP0AMODS normal;
  else
    converseLib.validationFailed(028); /* order desk must be "y" or "n"*/
    OPAREC.OPAERR = "Y"; /* set err flag*/
    set OP0AM001.OP0AMODS cursor, modified, bold;
  end



   /* *************************************************************/
end // end OP0AS12

// edit sales program
Function OP0AS13()



      /* *********************************************************/
      /* * this statement group edits the sales program field.  **/
      /* *********************************************************/



      /* check for valid null entry*/

  if (OP0AM001.SP1ID == " ")
    OPWREC.OPWSP1ID = " "; /* clear default*/
    OP0AM001.SP1NM = " "; /* clear name*/
    return;
  end


      /* validate sales program existance*/

  SP1REC.SP1ID = OP0AM001.SP1ID; /* load key*/
  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSPGM001"; /* table view*/
    TA1REC.TA1TBLKE = SP1REC.SP1KEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0AS13 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0070  "; /* i/o mod name*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* invoke syncpoint rollback*/
    try
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end /* call abend formatter*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    XSPF4(); /* invoke master menu*/
    exit program;
  end


      /* if not found or not active, then error*/

  if (SQLCA.VAGen_SQLCODE == 100 /* check for notfnd rc*/
   || SP1REC.SP1STAT != "A")     /* check for active id*/
    converseLib.validationFailed(024); /* sales program id is not valid*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0AM001.SP1NM = " "; /* move sp name to map*/
    set OP0AM001.SP1ID cursor, modified, bold;
  else
    OP0AM001.SP1NM = SP1REC.SP1NM; /* move sp name to map*/
    OPWREC.OPWSP1ID = OP0AM001.SP1ID; /* save field*/
    set OP0AM001.SP1ID normal;
  end



   /* *************************************************************/
end // end OP0AS13

// edit order class
Function OP0AS14()



      /* *********************************************************/
      /* * this statement group edits the order class field.    **/
      /* *********************************************************/



      /* check for valid null entry*/

  if (OP0AM001.XOCCD == " ") /* null code?*/
    OPWREC.OPWXOCCD = " "; /* clear code*/
    OP0AM001.XOCDESC = " "; /* clear abrv*/
    set OP0AM001.XOCCD initialAttributes;
    return;
  end


      /* validate order class*/

  if (OP0AM001.XOCCD in XOCTBL.XOCCD /* valid code?*/
   && XOCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active code?*/
    OPWREC.OPWXOCCD = OP0AM001.XOCCD; /* save code*/
    OP0AM001.XOCDESC = XOCTBL.XOCDESC[sysVar.arrayIndex]; /* save abrv*/
    OPAREC.XOCPROPF = XOCTBL.XOCPROPF[sysVar.arrayIndex]; /* save at once fl*/
    OPAREC.XOCFUTRF = XOCTBL.XOCFUTRF[sysVar.arrayIndex]; /* save futures fl*/
    set OP0AM001.XOCCD normal;
  else
    converseLib.validationFailed(020); /* order class is not valid*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0AM001.XOCDESC = " "; /* clear abrv*/
    set OP0AM001.XOCCD cursor, modified, bold;
    return;
  end


      /* validate order class against division*/

  if (XOCTBL.XDVCD[sysVar.arrayIndex] > " " /* specific restriction?*/
   && COMMAREA.XDVCD != XOCTBL.XDVCD[sysVar.arrayIndex]) /* codes match?*/
    converseLib.validationFailed(021); /* order class is not valid for your divsion*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0AM001.XOCCD cursor, modified, bold;
    return;
  end


     /* international airborne edit: can't use order class*/
     /* 'au' (update) or 'tr' (transmitted) in order entry*/

  if (COMMAREA.XDVCD == "02")
    if (OP0AM001.XOCCD == "AU"
     || OP0AM001.XOCCD == "TR")
      converseLib.validationFailed(796); /* order class is not valid*/
      OPAREC.OPAERR = "Y"; /* for order entry*/
      OP0AM001.XOCDESC = " "; /* clear abrv*/
      set OP0AM001.XOCCD cursor, modified, bold;
      return;
    end
  end

   /* *************************************************************/
end // end OP0AS14

// edit order type
Function OP0AS15()
      /* *********************************************************/
      /* * this statement group edits the order type field.     **/
      /* *********************************************************/

      /* check for valid null entry*/

  if (OPWREC.OPWXOTCD == " ") /* null code?*/
    return;
  end

      /* validate order type*/

  if (OPWREC.OPWXOTCD in XOTTBL.XOTCD /* valid code?*/
   && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active code?*/
    OPAREC.XOTATONF = XOTTBL.XOTATONF[sysVar.arrayIndex]; /* save at once fl*/
    OPAREC.XOTFUTRF = XOTTBL.XOTFUTRF[sysVar.arrayIndex]; /* save futures fl*/
    OPAREC.XOTPROPF = XOTTBL.XOTPROPF[sysVar.arrayIndex]; /* save prop fl*/
  else
    converseLib.validationFailed(017); /* order type is not valid*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0AM001.XOBCD cursor, modified, bold;
    set OP0AM001.XGPCD modified, bold;
    return;
  end

      /* validate order type against gpc*/
  if (OP0AM001.XGPCD != XOTTBL.XGPCD[sysVar.arrayIndex] /* valid code?*/
   && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A")         /* still active?*/
    converseLib.validationFailed(486); /* gpc code not valid for order type*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0AM001.XGPCD cursor, modified, bold;
    return;
  end

      /* validate order type against division*/

  if (COMMAREA.XDVCD != XOTTBL.XDVCD[sysVar.arrayIndex]) /* valid code?*/
    converseLib.validationFailed(018); /* order type is not valid for your division*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0AM001.XOBCD cursor, modified, bold;
    return;
  end

      /* force 'at-once' order type needdate = today*/

  if (OPAREC.XOTATONF == "Y")
    set OP0AM001.OP0AMNDT normal;
    if (OP0AM001.OP0AMNDT == "MMDDYY"
     || OP0AM001.OP0AMNDT == "0"
     || OP0AM001.OP0AMNDT == " ")
      /* force date to today*/
    else
      OPAREC.OPAFDT = OP0AM001.OP0AMNDT;
      OPAREC.OPAWMM = OPAREC.OPAFMM;
      OPAREC.OPAWDD = OPAREC.OPAFDD;
      OPAREC.OPAWYY = OPAREC.OPAFYY;
      if (OPAREC.OPAWYY > 56)
        OPAREC.OPAWCC = 19;
      else
        OPAREC.OPAWCC = 20;
      end
      if (OPAREC.OPAWDT != OPAREC.OPACDT) /* if map date ne today*/
        converseLib.validationFailed(386); /* at-once o/t makes user entry = today*/
        OPAREC.OPAERR = "Y";
        set OP0AM001.OP0AMNDT bold;
      end
    end
    OPAREC.OPAFMM = OPAREC.OPACMM;
    OPAREC.OPAFDD = OPAREC.OPACDD;
    OPAREC.OPAFYY = OPAREC.OPACYY;
    OP0AM001.OP0AMNDT = OPAREC.OPAFDT;
    OPWREC.OPWDNDT = OPAREC.OPACDT; /* save need date*/
    return;
  end


end // end OP0AS15

// edit need date
Function OP0AS16()

      /* *********************************************************/
      /* * this statement group edits the need date field.      **/
      /* *********************************************************/

      /* check for zero need date (ok condition)*/

  if (OP0AM001.OP0AMNDT == "MMDDYY" /* null entry?*/
   || OP0AM001.OP0AMNDT == "000000" 
   || OP0AM001.OP0AMNDT == " ")    
    OPWREC.OPWDNDT = 0; /* clear need date*/
    set OP0AM001.OP0AMNDT normal;
    return;
  end


      /* non-zero need date*/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG"; /* func request*/
  TA2REC.TA2GRTYP = "A"; /* format is mmddyy*/
  TA2REC.TA2GRGA = OP0AM001.OP0AMNDT; /* set date argument*/
  call "TA0040" (TA2REC) {isExternal = yes}; /* call date module*/
  if (TA2REC.TA2RTNCD != 0) /* check for invalid rc*/
    converseLib.validationFailed(013); /* need date is not a valid date*/
    OPAREC.OPAERR = "Y"; /* set err flag*/
    set OP0AM001.OP0AMNDT cursor, modified, bold;
    return;
  end


      /* is need date prior to today?*/

  if (TA2REC.TA2GRGGN < OPAREC.OPACDT) /* check for lt today's date*/
    OP0AS-CHK-DIVERT();
    if (OP0AW-DIVERT-ORDER-FL == "Y") /* order is a divert*/
      /* next sentence*/
    else
      converseLib.validationFailed(015); /* need date must not be before today's date*/
      OPAREC.OPAERR = "Y"; /* set err flag*/
      set OP0AM001.OP0AMNDT cursor, modified, bold;
      return;
    end
  else
    OP0AW-DIVERT-ORDER-FL = "N"; /* set flag - not a divert*/
  end


      /* is need date beyond two years from today?*/

  OPAREC.OPAWDT = OPAREC.OPACDT + 20000; /* wk-dt = curr-dt + 2 year*/
  if (TA2REC.TA2GRGGN > OPAREC.OPAWDT) /* check for gt one year future*/
    converseLib.validationFailed(016); /* need date is more than one year in the future*/
    OPAREC.OPAERR = "Y"; /* set err flag*/
    set OP0AM001.OP0AMNDT cursor, modified, bold;
    return;
  end


      /* save need date and set field attribute*/

  OPWREC.OPWDNDT = TA2REC.TA2GRGGN; /* save need date*/
  set OP0AM001.OP0AMNDT normal;



   /* *************************************************************/
end // end OP0AS16

// edit screen flow
Function OP0AS17()



      /* *********************************************************/
      /* * this statement group edits the screen flow field.    **/
      /* *********************************************************/



  if (OP0AM001.OP0AMSCF >= "1" /* valid range? - then ok*/
   && OP0AM001.OP0AMSCF <= "2")
    OPWREC.OPWSFLOW = OP0AM001.OP0AMSCF; /* save field*/
    set OP0AM001.OP0AMSCF normal;
  else
    converseLib.validationFailed(012); /* screen flow option is invalid*/
    OPAREC.OPAERR = "Y"; /* set err flag*/
    set OP0AM001.OP0AMSCF cursor, modified, bold;
  end



   /* *************************************************************/
end // end OP0AS17

// edit gpc code
Function OP0AS18()
      /* *********************************************************/
      /* * this statement group edits the gpc code field.       **/
      /* *********************************************************/

      /* gpc code required if base order type entered*/

  if (OP0AM001.XGPCD == " " /* if don't have gpc code*/
   && OP0AM001.XOBCD != " ") /* but have base order type*/
    converseLib.validationFailed(480); /* gpc code is required*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0AM001.XGPDESC = " "; /* clear desc*/
    set OP0AM001.XGPCD cursor, modified, bold;
    return;
  end

      /* check for valid null entry*/

  if (OP0AM001.XGPCD == " ") /* null code?*/
    OPWREC.XGPCD = " "; /* clear code*/
    OP0AM001.XGPDESC = " "; /* clear abrv*/
    set OP0AM001.XGPCD normal;
    return;
  end

  if (OP0AM001.XGPCD in XGPTBL.XGPCD /* valid code?*/
   && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active code?*/
    OPWREC.XGPCD = OP0AM001.XGPCD; /* save code*/
    OP0AM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* save abrv*/
    set OP0AM001.XGPCD normal;
  else
    converseLib.validationFailed(138); /* gpc code is invalid*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0AM001.XGPDESC = " "; /* clear abrv*/
    set OP0AM001.XGPCD cursor, modified, bold;
    return;
  end


   /* *************************************************************/
end // end OP0AS18

// edit base order type
Function OP0AS19()
      /* *********************************************************/
      /* * this statement group edits the order type field.     **/
      /* *********************************************************/

      /* check for valid null entry*/

  if (OP0AM001.XOBCD == " ") /* null code?*/
    OPWREC.XOBCD = " "; /* clear code*/
    OP0AM001.XOBDESC = " "; /* clear desc*/
    set OP0AM001.XOBCD normal;
    return;
  end


      /* validate base order type*/

  if (OP0AM001.XOBCD in XOBTBL.XOBCD /* valid code?*/
   && XOBTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active code?*/
    OPWREC.XOBCD = OP0AM001.XOBCD; /* save code*/
    OP0AM001.XOBDESC = XOBTBL.XOBDESC[sysVar.arrayIndex]; /* map desc*/
    set OP0AM001.XOBCD normal;
  else
    converseLib.validationFailed(017); /* order type is not valid*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0AM001.XOBDESC = " "; /* clear desc*/
    set OP0AM001.XOBCD cursor, modified, bold;
    return;
  end

    /* international airborne edit: base ot must be 's1'*/
    /* if using 'as' order class.*/

  if (COMMAREA.XDVCD == "02")
    if (OP0AM001.XOCCD == "AS"
     && OP0AM001.XOBCD != "S1")
      converseLib.validationFailed(797); /* order type must be 's1' for*/
      OPAREC.OPAERR = "Y"; /* 'as' order class*/
      OP0AM001.XOBDESC = " ";
      set OP0AM001.XOBCD cursor, modified, bold;
      return;
    end
  end

   /* *************************************************************/
end // end OP0AS19

// control field relation edits
Function OP0AS20()



      /* *********************************************************/
      /* * this statement group controls the field relationship **/
      /* * edits.                                               **/
      /* *                                                      **/
      /* * the fields are edited in reverse order so that the   **/
      /* * the cursor and error message will be related to the  **/
      /* * top most error.  any errors below the top most most  **/
      /* * error will still be highlighted.                     **/
      /* *                                                      **/
      /* * note:  these edits are not controlled by the field   **/
      /* *        mdt's being on (i.e. these edits will always  **/
      /* *        execute if no errors were encountered).       **/
      /* *********************************************************/



      /* init error diag areas*/

  TA1REC.TA1LOCAT[2] = "OP0AS20 "; /* statement group*/

       /* edit product category/gpc relationship*/

  if (OP0AM001.XPCCD > " " /* product category exists*/
   && OP0AM001.XGPCD > " ") /* gpc exists*/
    OP0AS28();
  end

       /* edit the order type found in xvotbl*/

  if (OP0AM001.XOBCD > " ")
    OP0AS15();
  end

      /* edit order type vs. sales program if both entered*/
      /* if found, then edit need date against delivery date.*/
      /* cursor will be positioned on sales program field if err*/

  if (OP0AM001.SP1ID > " " /* sales program was entered*/
   && OP0AM001.XOBCD > " ") /* order type code exists*/
    OP0AS21(); /* edit order type vs. sales program*/
  end



      /* edit order type vs. order class if both entered*/
      /* cursor will be positioned on order class field if error*/

  if (OP0AM001.XOBCD > " " /* order type exists*/
   && OP0AM001.XOCCD > " ") /* order class was entered*/
    OP0AS22(); /* edit order type vs. order class*/
  end



   /* *************************************************************/
end // end OP0AS20

// edit ord type vs sales program
Function OP0AS21()



      /* *********************************************************/
      /* * this statement group edits order type against the    **/
      /* * sales program field.  if found, then need date is    **/
      /* * edited against delivery date.                        **/
      /* *********************************************************/



      /* build key and call i/o mod*/

  SP2REC.SP1ID = OP0AM001.SP1ID; /* load key*/
  SP2REC.XOTCD = OPWREC.OPWXOTCD; /* load key*/
  call "IO0080" ("S ", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/



      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VORTYP01"; /* table view*/
    TA1REC.TA1TBLKE = SP2REC.SP2KEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0AS21 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0080  "; /* i/o mod name*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* invoke syncpoint rollback*/
    try
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end /* call abend formatter*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    XSPF4(); /* invoke master menu*/
    exit program;
  end


      /* if not found, then error*/

  if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
    converseLib.validationFailed(025); /* sales program id is not valid for order type*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0AM001.SP1ID cursor, modified, bold;
    set OP0AM001.XOBCD bold;
    return;
  end


      /* validate today's date against the sp booking date*/

  if (OPAREC.OPACDT < SP2REC.SP2BKBDT
   || OPAREC.OPACDT > SP2REC.SP2BKXDT)
    converseLib.validationFailed(026); /* today is not a valid booking date for this*/
                             /* sales program*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0AM001.SP1ID cursor, modified, bold;
  end


    /* if available, edit the need date against the delivery date*/

  if (OPWREC.OPWDNDT > 0)
    if (OPWREC.OPWDNDT < SP2REC.SP2DLBDT
     || OPWREC.OPWDNDT > SP2REC.SP2DLXDT)
      converseLib.validationFailed(027); /* need dt not a valid del date for this slspgm*/
      OPAREC.OPAERR = "Y"; /* set error flag*/
      set OP0AM001.SP1ID cursor, modified, bold;
      set OP0AM001.OP0AMNDT bold;
    end
  end



   /* *************************************************************/
end // end OP0AS21

// edit order class vs ord type
Function OP0AS22()



      /* *********************************************************/
      /* * this statement group edits the order class field     **/
      /* * against the order type field.                        **/
      /* *********************************************************/



      /* validate order class against order type.*/
      /* both prop flags must be yes -or- both futures flag must*/
      /* be yes.*/

      /* since there were no errors when entering the routine,*/
      /* it is assumed that a valid, active order type and order*/
      /* class exist.*/

  if (OPAREC.XOCPROPF == "Y" /* both prop = yes - then ok*/
   && OPAREC.XOTPROPF == "Y")
    return;
  end

  if (OPAREC.XOCFUTRF == "Y" /* both futures = yes - then ok*/
   && OPAREC.XOTFUTRF == "Y")
    return;
  end

  converseLib.validationFailed(023); /* order class is not valid for order type*/
  OPAREC.OPAERR = "Y"; /* set error flag*/
  set OP0AM001.XOCCD cursor, modified, bold;



   /* *************************************************************/
end // end OP0AS22

// get system ord typ via xvotbl
Function OP0AS23()

   /* ----------------------------------------------------------*/
   /* Get the brand code for the user's logon.*/
   /* ----------------------------------------------------------*/
  TA1REC.TA1LOCAT[3] = "OP0AS23 ";
  OP0AS30();
   /* -----------------------------------------------------------*/
    /* Display an error message if the service rep record*/
    /* cannot be used.*/
   /* -----------------------------------------------------------*/
  if (SQLCA.VAGen_SQLCODE == 100
   || KUYREC.XXXSTAT != "A")
    converseLib.validationFailed(577);
                                   /* Unable to edit BOT, cannot find brand*/
    OPAREC.OPAERR = "Y"; /* Set error flag*/
    set OP0AM001.XOBCD cursor, modified, bold;
    return;
  end

   /* -----------------------------------------------------------------*/
   /* Equipment check*/
   /* -----------------------------------------------------------------*/
  if (OP0AM001.XPCCD > "  ") /* prod cat check for equip*/
    OPWREC01.XPCCK = OP0AM001.XPCCD;
  else
    OPWREC01.XPCCK = "  ";
  end

   /* ----------------------------------------------------------*/
   /* Get the system order type from XVO table.*/
   /* ----------------------------------------------------------*/

  OP0AW01.OP0AWFND = "N"; /* Found flag*/
  OPWREC.OPWXOTCD = " ";
  sysVar.arrayIndex = 1;



   /* *******************TCS INCLUDE BEGIN***********/

  set VXVO0001 empty;
  set SQLCA empty;
  VXVO0001.XOBCD = OP0AM001.XOBCD; /* valid base order type*/
  VXVO0001.XGPCD = OP0AM001.XGPCD; /* valid gpc code*/
  VXVO0001.XSOCD = OP0AW01.XSOCD; /* valid salesoffice code*/
  VXVO0001.XDVCD = COMMAREA.XDVCD; /* valid division code*/
  VXVO0001.XBCCD = KUYREC.XBCCD; /* valid brand code*/
  VXVO0001.XPC-PROD-CAT-CD = OPWREC01.XPCCK; /* valid category code*/
  VXVO0001.XXXSTAT = "A"; /* active status code*/

  call "VXVO0001" ("S4", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* cursor fetch*/


  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VXVO0001";
    TA1REC.TA1TBLKE = VXVO0001-KEY;
    TA1REC.TA1LOCAT[3] = "OP0AS23";
    TA1REC.TA1LOCAT[4] = "VXVO0001";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* invoke syncpoint rollback*/
    try
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end /* call abend formatter*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    XSPF4(); /* invoke master menu*/
    exit program;
  else
    call "VXVO0001" ("N4", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* row check*/

    if (SQLCA.VAGen_SQLCODE == 0)
      OPWREC01.XPCCD = OP0AM001.XPCCD;
      OPWREC.OPWXOTCD = VXVO0001.XOTCD;
      OP0AW01.OP0AWFND = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/
          /* next sentence*/
      else
        TA1REC.TA1DBASE = "DCORP";
        TA1REC.TA1TBLVU = "VXVO0001";
        TA1REC.TA1TBLKE = VXVO0001-KEY;
        TA1REC.TA1LOCAT[3] = "OP0AS23";
        TA1REC.TA1LOCAT[4] = "VXVO0001";
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* invoke syncpoint rollback*/
        try
          call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        end /* call abend formatter*/
        COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
        XSPF4(); /* invoke master menu*/
        exit program;
      end
    end
  end

  call "VXVO0001" ("C4", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* cursor close*/

  if (SQLCA.VAGen_SQLCODE != 0) /* invalid close*/
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VXVO0001";
    TA1REC.TA1TBLKE = VXVO0001-KEY;
    TA1REC.TA1LOCAT[3] = "OP0AS23";
    TA1REC.TA1LOCAT[4] = "VXVO0001";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* invoke syncpoint rollback*/
    try
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end /* call abend formatter*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    XSPF4(); /* invoke master menu*/
    exit program;
  end

   /* ************TCS INCLUDE END***********/
   /* ----------------------------------------------------------*/
    /* Display an error message if a system order type is not*/
    /* found.*/
   /* ----------------------------------------------------------*/
  if (OP0AW01.OP0AWFND == "N")
    converseLib.validationFailed(923); /* Invalid system order type*/
    OPAREC.OPAERR = "Y";
    set OP0AM001.XPCCD cursor, modified, bold;
  end
          /* wiprochanges  BL167*/
   /* timing changes comment out*/
   /* IF OP0AM001.XPCCD EQ 'KN'        /* check the timing category*/
   /* OR OP0AM001.XPCCD EQ 'ST';     /* check the timing category*/
   /* IF OP0AM001.XOBCD EQ 'F1'      /* futures are not allowed for this cat*/
   /* OR OP0AM001.XOBCD EQ 'F2'    /* futures are not allowed for this*/
   /* OR OP0AM001.XOBCD EQ 'F3'    /* futures are not allowed for this cat*/
   /* OR OP0AM001.XOBCD EQ 'F4'    /* futures are not allowed for this*/
   /* OR OP0AM001.XOBCD EQ 'F5'    /* futures are not allowed for this cat*/
   /* OR OP0AM001.XOBCD EQ 'F6';   /* futures are not allowed for this*/
   /* MOVE 997 TO EZEMNO;          /**/
   /* MOVE 'Y' TO OPAREC.OPAERR;   /* set error flag*/
   /* MOVE ' ' TO OP0AM001.XPCDESC;/* clear desc*/
   /* SET OP0AM001.XPCCD MODIFIED,BRIGHT;*/
   /* SET OP0AM001.XOBCD CURSOR,MODIFIED,BRIGHT;*/
   /* EZERTN;*/
   /* END;*/
   /* END;*/

           /* wiprochanges ends BL167*/
end // end OP0AS23

// Edit brand of service rep
Function OP0AS24()
   /* ----------------------------------------------------------*/
    /* Save the brand of the service rep.*/
   /* -----------------------------------------------------------*/
  OP0AW01.XBCCD = KUYREC.XBCCD;

   /* -----------------------------------------------------------*/
    /* Get the brand code of the logon.*/
   /* -----------------------------------------------------------*/
  TA1REC.TA1LOCAT[3] = "OP0AS24 ";
  OP0AS30();

   /* -----------------------------------------------------------*/
    /* Display an error message if the service rep record*/
    /* for the logon cannot be used.*/
   /* -----------------------------------------------------------*/
  if (SQLCA.VAGen_SQLCODE == 100
   || KUYREC.XXXSTAT != "A")
    OPAREC.OPAERR = "Y"; /* Set error flag*/
    converseLib.validationFailed(584); /* Can't edit svrep, cannot find brand*/
    set OP0AM001.XXXUSRID cursor, modified, bold;
    return;
  end

   /* -----------------------------------------------------------*/
    /* Compare the brand codes.*/
   /* -----------------------------------------------------------*/
  if (OP0AW01.XBCCD != KUYREC.XBCCD)
    OPAREC.OPAERR = "Y";
    converseLib.validationFailed(585); /* Brand does not match*/
    set OP0AM001.XXXUSRID cursor, modified, bold;
  end
end // end OP0AS24

// convert apparel xsocds
Function OP0AS25()

   /* *************************************************************/
   /* If the commarea sales office (logon sales office) is '01',**/
   /* '02', or '03' on an apparel order, use sales office '20'. **/
   /* Do not change the commarea.xsocd.                         **/
   /* *************************************************************/

  OP0AW01.XSOCD = COMMAREA.XSOCD; /* init op0aw01.xsocd*/

  if (OP0AM001.XGPCD == "03") /* if an apparel order*/
    if (COMMAREA.XSOCD == "01" /* if sales office = '01'*/
     || COMMAREA.XSOCD == "02" /* or sales office = '02'*/
     || COMMAREA.XSOCD == "03") /* or sales office = '03'*/
      OP0AW01.XSOCD = "20"; /* use sales office '20'*/
    end
  end
end // end OP0AS25

// Product Category Edit
Function OP0AS27()
      /* **********************************************************/
      /* * this statement group edits the product category field **/
      /* * product category requires a valid gpc                 **/
      /* **********************************************************/

      /* check for valid null entry - product category*/

  if (OP0AM001.XPCCD == " ") /* null code?*/
    OP0AM001.XPCDESC = " "; /* clear abrv*/
    set OP0AM001.XPCCD normal;
    return;
  end


      /* product category code requires gpc to be entered*/

  if (OP0AM001.XPCCD != " " /* have product category code*/
   && OP0AM001.XGPCD == " ") /* but don't have gpc code*/
    converseLib.validationFailed(920); /* gpc code is required*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0AM001.XPCDESC = " "; /* clear desc*/
    set OP0AM001.XPCCD modified, bold;
    set OP0AM001.XGPCD cursor, modified, bold;
    return;
  end

          /* wiprochanges  BL167*/
   /* timing changes comment out*/
   /* IF OP0AM001.XPCCD EQ 'KN'        /* check the timing category*/
   /* OR OP0AM001.XPCCD EQ 'ST';     /* check the timing category*/
   /* iF OP0AM001.XOBCD EQ 'F1'      /* futures are not allowed*/
   /* OR OP0AM001.XOBCD EQ 'F2'    /* futures are not allowed*/
   /* OR OP0AM001.XOBCD EQ 'F3'    /* futures are not allowed*/
   /* OR OP0AM001.XOBCD EQ 'F4'    /* futures are not allowed*/
   /* OR OP0AM001.XOBCD EQ 'F5'    /* futures are not allowed*/
   /* OR OP0AM001.XOBCD EQ 'F6';   /* futures are not allowed*/
   /* MOVE 997 TO EZEMNO;          /* futures are not allowed*/
   /* MOVE 'Y' TO OPAREC.OPAERR;   /* set error flag*/
   /* MOVE ' ' TO OP0AM001.XPCDESC;/* clear desc*/
   /* SET OP0AM001.XPCCD MODIFIED,BRIGHT;*/
   /* SET OP0AM001.XOBCD CURSOR,MODIFIED,BRIGHT;*/
   /* EZERTN;*/
   /* END;*/
   /* END;*/

           /* wiprochanges ends BL167*/

  if (OP0AM001.XPCCD != "  "
   && OP0AM001.XGPCD != "  ")
    OPWREC01.XPCCD = OP0AM001.XPCCD;
  end
end // end OP0AS27

// validate product category/gpc
Function OP0AS28()
      /* *********************************************************/
      /* * this statement group edits the product category/gpc  **/
      /* * relationship                                         **/
      /* *********************************************************/

      /* validate product category and gpc relationship*/

  OPWREC01.XPCCH = "  ";
  sysVar.arrayIndex = 1;
  OP0AW01.OP0AW-XPC-FND = "N";

  OPWREC01.XPCCH = OP0AM001.XPCCD;

  if (OPWREC01.XPCCH > "  ")
    while (XPCTBL.XPCCD[sysVar.arrayIndex] != "98"
     && OP0AW01.OP0AW-XPC-FND == "N")
      if (XPCTBL.XPCCD[sysVar.arrayIndex] == OPWREC01.XPCCH
       && XPCTBL.XGPCD[sysVar.arrayIndex] == OP0AM001.XGPCD
       && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        set OP0AM001.XPCCD normal;
        OP0AW01.OP0AW-XPC-FND = "Y";
      else
        sysVar.arrayIndex = sysVar.arrayIndex + 1;
      end
    end
  end

  if (OPWREC01.XPCCH > "  "
   && OP0AW01.OP0AW-XPC-FND == "N")
    converseLib.validationFailed(922); /* prod cat/gpc invalid combo*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0AM001.XPCCD cursor, modified, bold;
    set OP0AM001.XGPCD modified, bold;
    return;
  end

end // end OP0AS28

// Get brand for logon
Function OP0AS30()

   /* ----------------------------------------------------------*/
   /* Get the brand code for the user's logon.*/
   /* ----------------------------------------------------------*/
  KUYREC.XXXUSRID = COMMAREA.CAUSERID;
  call "IO0550" ("SA", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* Good*/
   || SQLCA.VAGen_SQLCODE == 100) /* Not found*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   ";
    TA1REC.TA1TBLVU = "VSVREP01";
    TA1REC.TA1TBLKE = KUYREC.XXXUSRID;
    TA1REC.TA1LOCAT[4] = "IO0550  ";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* Invoke syncpoint rollback*/
    try
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* Clear user commarea*/
    XSPF4(); /* Invoke master menu*/
    exit program; /* Quit if unable to invoke menu*/
  end
end // end OP0AS30

//*** RECORD=OP0AW01 ****
// application temporary working storage values.
// 
// Maintenance history:
// 05/22/90 bwatso  Added xbccd.
// 07/07/93 gcalki  added divert-order-fl.
// ***********************
Record OP0AW01 type basicRecord
  10 OP0AWFND OP0AWFND ; 
  10 OP0AW-DIVERT-ORDER-FL OP0AW-DIVERT-ORDER-FL ; 
  10 XBCCD XBCCD ; 
  10 XSOCD XSOCD ; 
  10 OP0AW-XPC-FND OP0AW-XPC-FND ; 
end // end OP0AW01

// divert order flag
DataItem OP0AW-DIVERT-ORDER-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSO_SLS_OFC_ID
DataItem OP0AW-XPC-FND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// look up found flag
DataItem OP0AWFND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

