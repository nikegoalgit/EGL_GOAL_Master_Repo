package op0q;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ko.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=OP0Q ****
// nike order processing - order global maint request process
// 
// overview: this application provides the screens to allow
//           entry of order global maint requests.  review/
//           update/cancel functions are allowed.
// 
//           the request are processed weekly in batch.
// 
// 
// 
// 
// date created: 08/25/86
//       author: steve noble
// 
// maintenance history:
// 
//     when       who       what
//   --------  ----------  ------------------------------------
//   08/25/86   s noble     original creation
//   04/30/87   tmai        added xwhcd to the operec
//   01/26/88   craine      changed op0qs79 check for duplicate
//                          products - see comment in op0qs79
//   02/23/88   gwells      check xomtbl.xxxstat.  if status
//                          is inactive, display error - s3c.
//                          do not display reason codes with
//                          inactive statuses - 200.
//   05/25/88   obecke      allow product price to be changed
//                          to zero amount. does not apply
//                          to the individual size level.
//                          sa3 and op0q100 changed.
//   07/11/88  gwells       added opoqm013(warehouse screen)
//                          to appl - 125, 130, sd1, sd2.
//   07/25/88  gwells       sc2 - comment out whse check
//                          against whse in product file
//                          (vcolor02 or sycrec) p/teri jf.
//   08/17/88  dwalke       bl27 -proceeded to map 004 without
//                          having to enter a reason code after
//                          depressing pf2, changed op0q200
//                          flow to return to op0q030 rather
//                          than op0q027.
//   08/23/88  gwells       200 - move the actual cancel flag
//                          to the map ( not * or ' ' ).
//                          m020 - replace 'also cancel reason'
//                          on map with the description of the
//                          cancel flags.
// 11/03/88  tfox          in op0q030 temp turn off of option
//                         2 on 030 map.
// 11/03/88  JWOOD         NONCSP OPTION ADDED TO CALLS
// 11/21/88  jjohns        turn option 2 in q030 back on
// 12/13/88  dwalke        allow need date up to two years in
//                         advance - s3d, s3e, bug #101
// 01/09/89  dwalke        add segmented transaction id to appl
// 02/09/89  rdavis        add 'rs' to line item status for
//                         cancel.
// 05/18/89  craine        db2 changes for sycrec
// 05/25/89  mbarna        rewrote s45, s55, s79
// 03/21/90  schase        bug #312 - make 'to' warehouse
//                         required for warehouse transfers sc2
// 10/11/90  schase        db changes - replaced op0qw09 with
//                         new version of sycrec record.
// 02/15/91  dmeier        regen for database changes
// 06/24/91  lluck         added discrepancy flag to vmntrq01.
//                         changed op0qm003, opdrec, op0q027,
//                         op0qs31, op0qw01, and io0210.
// 10/23/91  craine        display request status on op0qm002,
//                         allow status tbe changed in op0qm003
//                         use base order types instead of sys
//                         tem order type on op0qm006
// 11/15/91  craine        set cursor on 1st valid or selected
//                         xobcd - OP0Q055
// 03/10/92  trober        db2 - table changes changes length
//                         of op0qw09 to match sycrec.
// 10/12/92  bbake2        db2 - same as last entry.
// 03/01/94  schase        DB2 CHANGES (MARCH): Increased size
//                         of op0qwgp4, op0qwgp5, op0qwpar,
//                         op0qw04, op0qw05.
// 04/01/94  gcalki        Log #1003 - Rename causera to
//                         ca-user-workarea-4k so it can hold
//                         opwrec which is now 3072 bytes.(ALL)
// 11/11/94  gcalki        fix subscript out of range prob. sd2
// 08/31/95  dliddl        Modified to incorporate Nike Canada
//                         into the GOAL system.
// 06/13/96  mvalbu        Changed to use regional data for US
//                         apparel by calling SY2000.
//                         Changed OP0QSA2, OP0QS72, OP0QS82,
//                         OP0QS86, and OP0Q-CALL-SY2000.
// 10/02/96  jbenne        Changed to list only USA & Canada
//                         Sales offices on the screen.
// 12/07/96  csawki        Added Product Category for Equipment
// 03/24/97  pshank        Changed op0qm006 to display 26 base
//                         order types instead of 20
// 08/11/97  dsmit0        chgd s3b & s31 to write out ocd
//                         comment to table
// 10/30/97  wleong        added product subordering changes
// 03/11/98  jflor1        modified OP0Q045 to display only
//                         active sales offices in order to
//                         display more sales office codes.
// 03/24/98  vsanka        removed use of xvotbl and added code
//                         to access dcorp.vxvo0001 using the
//                         iomod vxvo0001.
//                         The statement groups changed are:
//                         OP0QSE7,OP0QS45, and OP0QS55.
//                         The PROC changed is OP0Q027.
// 04/01/98  sgopal        Removed code that accesses XVOTBL in
//                         OP0Q027,OP0QSE7,OP0QS45 and OP0QS55.
// 06/04/98  jflor1        bypassed call to SY2000 if div code
//                         equals '02' or '03' in OP0QS-EDIT-
//                         SUBORD, OP0QSA2, OP0QS72, OP0QS82,
//                         OP0QS86.  BL1188.
// *********************
Program OP0Q type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUYREC KUYREC; // record
  OP0QW01 OP0QW01; // record
  OP0QW02 OP0QW02; // record
  OP0QW03 OP0QW03; // record
  OP0QW04 OP0QW04; // record
  OP0QW05 OP0QW05; // record
  OP0QW08 OP0QW08; // record
  OP0QW09 OP0QW09; // record
  OPAREC OPAREC; // record
  OPDREC OPDREC; // record
  OPEREC OPEREC; // record
  OPVREC OPVREC; // record
  SP1REC SP1REC; // record
  SP2REC SP2REC; // record
  SQLCA SQLCA; // record
  SY4REC SY4REC; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  VXVO0001 VXVO0001; // record
  WSY2000 WSY2000; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XOMTBL {deleteAfterUse = yes}; // table
  use XOSTBL {deleteAfterUse = yes}; // table
  use XOBTBL {deleteAfterUse = yes}; // table
  use XSOTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use ZCCTBL {deleteAfterUse = yes}; // table
  use OP0QM.OP0QM001,  // forms
      OP0QM.OP0QM002, 
      OP0QM.OP0QM003, 
      OP0QM.OP0QM004, 
      OP0QM.OP0QM005, 
      OP0QM.OP0QM006, 
      OP0QM.OP0QM007, 
      OP0QM.OP0QM008, 
      OP0QM.OP0QM009, 
      OP0QM.OP0QM010, 
      OP0QM.OP0QM011, 
      OP0QM.OP0QM012, 
      OP0QM.OP0QM013, 
      OP0QM.OP0QM014, 
      OP0QM.OP0QM015, 
      OP0QM.OP0QM016, 
      OP0QM.OP0QM020
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OP0Q001: OP0Q001();



    goto OP0Q005; /* branch to menu screen build*/



     /* *************************************************************/
    OP0Q005: OP0Q005();



        /* branch to menu screen converse*/

    goto OP0Q010; /* branch to menu screen converse*/



     /* *************************************************************/
    OP0Q010: OP0Q010();



        /* check for error or pf12 (edit only)*/

    if (OPAREC.OPAERR == "Y" /* err*/
     || converseVar.eventKey is pf12) /* or edit only*/
      goto OP0Q010; /* branch to converse menu*/
    end


        /* determine program flow*/

    if (OP0QW01.OP0QWOPT == "1") /* check for directory option*/
      goto OP0Q015; /* branch to directory screen*/
    end


        /* branch to parameter screen*/

    goto OP0Q025; /* branch to parameter screen*/



     /* *************************************************************/
    OP0Q015: OP0Q015();



    goto OP0Q020; /* branch to directory converse*/



     /* *************************************************************/
    OP0Q020: OP0Q020();



        /* check for error or page command*/

    if (OPAREC.OPAERR == "Y") /* error*/
      goto OP0Q020; /* branch to directory converse*/
    end



    if (converseVar.eventKey is pf3) /* prev screen*/
      goto OP0Q005; /* branch to menu build*/
    end


        /* branch to parameter screen*/

    if (OP0QW01.OPDRQID > " ") /* line selected?*/
      goto OP0Q025; /* branch to parameter screen build*/
    end


       /* build next screen*/

    if (converseVar.eventKey is pf7 /* page back*/
     || converseVar.eventKey is pf8) /* or page forward*/
      goto OP0Q015; /* branch to directory build*/
    end


        /* branch to converse*/

    goto OP0Q020; /* branch to directory converse*/



     /* *************************************************************/
    OP0Q025: OP0Q025();



        /* branch to parameter screen build*/

    goto OP0Q027; /* branch to parameter screen build*/



     /* *************************************************************/
    OP0Q027: OP0Q027();



        /* branch to parameter screen converse*/

    goto OP0Q030; /* branch to parameter screen converse*/



     /* *************************************************************/
    OP0Q030: OP0Q030();



        /* check for pf2 order maint reason code help screen*/

    if (converseVar.eventKey is pf2) /* order maint reason code help*/
      goto OP0Q200; /* branch to ord maint reason code help*/
    end


        /* check for error or pf12 (edit only)*/

    if (OPAREC.OPAERR == "Y" /* error*/
     || converseVar.eventKey is pf12) /* edit only*/
      goto OP0Q030; /* branch to parameter converse*/
    end


        /* check for previous screen request*/

    if (converseVar.eventKey is pf3) /* prev screen*/
      if (OP0QW01.OP0QWOPT == "1") /* directory*/
        goto OP0Q015; /* branch to directory screen*/
      else
        goto OP0Q005; /* branch to menu screen*/
      end
    end


        /* branch to order status screen*/

    goto OP0Q035; /* branch to order status screen*/



     /* *************************************************************/
    OP0Q035: OP0Q035();



        /* branch to prod status screen converse*/

    goto OP0Q040;
                                     /* branch to prod status screen converse*/



     /* *************************************************************/
    OP0Q040: OP0Q040();



        /* check for error or pf12 (edit only)*/

    if (OPAREC.OPAERR == "Y" /* error*/
     || converseVar.eventKey is pf12) /* edit only*/
      goto OP0Q040; /* branch to parameter converse*/
    end


    if (converseVar.eventKey is pf3) /* parm screen*/
      goto OP0Q027; /* branch to parameter build*/
    end


        /* branch to sales office screen*/

    goto OP0Q045; /* branch to sales office screen*/



     /* *************************************************************/
    OP0Q045: OP0Q045();



        /* branch to sales office screen converse*/

    goto OP0Q050; /* branch to sales office screen*/
                                     /* converse*/



     /* *************************************************************/
    OP0Q050: OP0Q050();



        /* check for error or pf12 (edit only)*/

    if (OPAREC.OPAERR == "Y" /* error*/
     || converseVar.eventKey is pf12) /* edit only*/
      goto OP0Q050; /* branch to sales office converse*/
    end


    if (converseVar.eventKey is pf3) /* sales office screen*/
      goto OP0Q035; /* branch to sales office build*/
    end


        /* branch to order type screen build*/

    goto OP0Q055; /* branch to order type screen build*/



     /* *************************************************************/
    OP0Q055: OP0Q055();



        /* branch to order type screen converse*/

    goto OP0Q060; /* branch to order type screen converse*/



     /* *************************************************************/
    OP0Q060: OP0Q060();



        /* check for error or pf12 (edit only)*/

    if (OPAREC.OPAERR == "Y" /* error*/
     || converseVar.eventKey is pf12) /* edit only*/
      goto OP0Q060; /* branch to order type converse*/
    end


    if (converseVar.eventKey is pf3) /* sales office screen*/
      goto OP0Q045; /* branch to sales office build*/
    end


        /* branch to product screen build*/

    if (OPDREC.OPDRQTYP == "1") /* cancel*/
      goto OP0Q065; /* branch to cancel product screen init*/
    end


    if (OPDREC.OPDRQTYP == "2") /* replace*/
      goto OP0Q075;
                                     /* branch to replace product screen init*/
    end


    if (OPDREC.OPDRQTYP == "3") /* warehouse screen*/
      goto OP0Q125; /* branch to warehouse screen init*/
    end


    if (OPDREC.OPDRQTYP == "4") /* reprice*/
      goto OP0Q135;
                                     /* branch to reprice sales program init*/
    end


    if (OPDREC.OPDRQTYP == "5") /* product subordering*/
      goto OP0Q-SUBORD-PROC;
                                     /* branch to prod subord program init*/
    end



     /* *************************************************************/
    OP0Q065: OP0Q065();



        /* branch to build prod screen*/

    goto OP0Q067; /* branch to prod screen build*/



     /* *************************************************************/
    OP0Q067: OP0Q067();



        /* if no more products to display, then*/
        /* branch to accept request screen*/

    if (OP0QW02.OP0QWSCR > 5) /* max screens*/
      goto OP0Q190; /* branch to accept request screen*/
    end

    if (OP0QW01.OP0QWMPP != "Y" /* no prods on prev screen*/
     && OP0QW02.OP0QWSCR > 1)   /* max screens*/
      goto OP0Q190; /* branch to accept request screen*/
    end


        /* branch to cancel prod screen converse*/

    goto OP0Q070;
                                     /* branch to cancel prod screen converse*/



     /* *************************************************************/
    OP0Q070: OP0Q070();



        /* check for error or pf12 (edit only)*/

    if (OPAREC.OPAERR == "Y" /* error*/
     || converseVar.eventKey is pf12) /* edit only*/
      goto OP0Q070; /* branch to cancel prod converse*/
    end


    if (converseVar.eventKey is pf3) /* order type screen*/
      goto OP0Q055; /* branch to order type build*/
    end


        /* branch to build next screen*/

    goto OP0Q067; /* branch to build next screen*/



     /* *************************************************************/
    OP0Q075: OP0Q075();



        /* branch to replace prod screen converse*/

    goto OP0Q080; /* branch to replace prod screen*/
                                     /* converse*/



     /* *************************************************************/
    OP0Q080: OP0Q080();



        /* check for error or pf12 (edit only)*/

    if (OPAREC.OPAERR == "Y" /* error*/
     || converseVar.eventKey is pf12) /* edit only*/
      goto OP0Q080; /* branch to replace prod converse*/
    end


    if (converseVar.eventKey is pf3) /* order type screen*/
      goto OP0Q055; /* branch to order type build*/
    end


        /* branch to reprice prc by size if requested*/

    if (OP0QM008.OP2PRCVF[OPASUB] == "Y")
      goto OP0Q085; /* branch to price by size build*/
    end


        /* branch to accept request screen*/

    goto OP0Q190; /* branch to accept request screen*/



     /* *************************************************************/
    OP0Q085: OP0Q085();



        /* branch to replace prod prc by size screen converse*/

    goto OP0Q090; /* branch to replace prc by size*/
                                     /* converse*/



     /* *************************************************************/
    OP0Q090: OP0Q090();



        /* check for error or pf12 (edit only)*/

    if (OPAREC.OPAERR == "Y" /* error*/
     || converseVar.eventKey is pf12) /* edit only*/
      goto OP0Q090; /* branch to replace prod converse*/
    end


        /* branch to replace prod converse (not build !!!!)*/

    goto OP0Q080; /* branch to converse replace prod*/



     /* *************************************************************/
    OP0Q095: OP0Q095();



        /* branch to reprice prod screen converse*/

    goto OP0Q100; /* branch to reprice prod screen*/
                                     /* converse*/



     /* *************************************************************/
    OP0Q100: OP0Q100();



        /* check for error or pf12 (edit only)*/

    if (OPAREC.OPAERR == "Y" /* error*/
     || OPAREC.OPAERR == "X" /* trigger to reshow screen*/
     || converseVar.eventKey is pf12) /* edit only*/
      goto OP0Q100; /* branch to reprice prod converse*/
    end


    if (converseVar.eventKey is pf3) /* order type screen*/
      goto OP0Q135; /* branch to sales program build*/
    end


        /* branch to reprice prc by size if requested*/

    if (OP0QM010.OP2PRCVF[OPASUB] == "Y")
      goto OP0Q105; /* branch to price by size build*/
    end


        /* branch to accept request*/

    goto OP0Q190; /* branch to accept request screen*/



     /* *************************************************************/
    OP0Q105: OP0Q105();



        /* branch to reprice prod prc by size screen converse*/

    goto OP0Q110; /* branch to reprice prc by size*/
                                     /* converse*/



     /* *************************************************************/
    OP0Q110: OP0Q110();



        /* check for error or pf12 (edit only)*/

    if (OPAREC.OPAERR == "Y" /* error*/
     || converseVar.eventKey is pf12) /* edit only*/
      goto OP0Q110; /* branch to reprice prod converse*/
    end


        /* branch to reprice screen converse (not build !!!!)*/

    goto OP0Q100; /* branch to converse reprice screen*/



     /* *************************************************************/
    OP0Q115: OP0Q115();



        /* branch to 1 w/h model screen converse*/

    goto OP0Q120;
                                     /* branch to 1 w/h model screen converse*/



     /* *************************************************************/
    OP0Q120: OP0Q120();



        /* check for error or pf12 (edit only)*/

    if (OPAREC.OPAERR == "Y" /* error*/
     || converseVar.eventKey is pf12) /* edit only*/
      goto OP0Q120; /* branch to 1 w/h model converse*/
    end


    if (converseVar.eventKey is pf3) /* warehouse screen*/
      goto OP0Q125; /* branch to warehouse build*/
    end


        /* branch to accept request screen*/

    goto OP0Q190; /* branch to accept request screen*/



     /* *************************************************************/
    OP0Q125: OP0Q125();


           /* branch to warehouse screen converse*/

    goto OP0Q130; /* branch to whse screen converse*/



    OP0Q130: OP0Q130();


        /* check for errors of pf12 (edit only)*/

    if (OPAREC.OPAERR == "Y" /* error found*/
     || converseVar.eventKey is pf12) /* edit only*/
      goto OP0Q130; /* branch to warehouse converse*/
    end


    if (converseVar.eventKey is pf3) /* order type screen*/
      goto OP0Q055; /* branch to order type build*/
    end


         /* branch to 1 w/h model screen build*/


    goto OP0Q115; /* branch to 1 w/h model screen build*/


    OP0Q135: OP0Q135();


           /* branch to sales program  screen converse*/

    goto OP0Q140; /* branch to spgm screen converse*/




    OP0Q140: OP0Q140();


        /* check for errors of pf12 (edit only)*/

    if (OPAREC.OPAERR == "Y" /* error found*/
     || converseVar.eventKey is pf12) /* edit only*/
      goto OP0Q140; /* branch to warehouse converse*/
    end


    if (converseVar.eventKey is pf3) /* order type screen*/
      goto OP0Q055; /* branch to order type build*/
    end


         /* branch to 1 w/h model screen build*/


    goto OP0Q095; /* branch to reprice products*/


    OP0Q190: OP0Q190();



        /* check for error*/

    if (OPAREC.OPAERR == "Y") /* error*/
      goto OP0Q190; /* branch to accept converse*/
    end


        /* branch to product screen build if pf3*/

    if (converseVar.eventKey is pf3)
      if (OPDREC.OPDRQTYP == "1") /* cancel*/
        goto OP0Q065; /* branch to cancel product screen init*/
      end
    end


    if (converseVar.eventKey is pf3)
      if (OPDREC.OPDRQTYP == "2") /* replace*/
        goto OP0Q075;
                                     /* branch to replace product screen init*/
      end
    end


    if (converseVar.eventKey is pf3)
      if (OPDREC.OPDRQTYP == "3") /* 1 w/h model*/
        goto OP0Q115; /* branch to 1 w/h model screen init*/
      end
    end


    if (converseVar.eventKey is pf3)
      if (OPDREC.OPDRQTYP == "4") /* reprice*/
        goto OP0Q095;
                                     /* branch to reprice product screen init*/
      end
    end


        /* branch to directory or menu screen*/

    if (OP0QW01.OP0QWOPT == "1") /* directory*/
      goto OP0Q015; /* branch to dir screen build*/
    else
      goto OP0Q005; /* branch to menu screen build*/
    end



     /* *************************************************************/
    OP0Q200: OP0Q200();



        /* branch to parm screen converse*/

    goto OP0Q030; /* branch to parm screen converse*/



     /* *************************************************************/
    OP0Q-SUBORD-PROC: OP0Q-SUBORD-PROC();

        /* branch to build subordering screen*/

    goto OP0Q-BUILD-SUBORD;

    OP0Q-BUILD-SUBORD: OP0Q-BUILD-SUBORD();

        /* if no more products to display, then*/
        /* branch to accept request screen*/

    if (OP0QW02.OP0QWSCR > 5) /* max screens*/
      goto OP0Q190; /* branch to accept request screen*/
    end

    if (OP0QW01.OP0QWMPP != "Y" /* no prods on prev screen*/
     && OP0QW02.OP0QWSCR > 1)   /* max screens*/
      goto OP0Q190; /* branch to accept request screen*/
    end

        /* branch to prod subordering screen converse*/

    goto OP0Q160;

    OP0Q160: OP0Q160();
        /* check for error or pf12 (edit only)*/

    if (OPAREC.OPAERR == "Y" /* error*/
     || converseVar.eventKey is pf12) /* edit only*/
      goto OP0Q160; /* branch to prod subord converse*/
    end

    if (converseVar.eventKey is pf3) /* order type screen*/
      goto OP0Q055; /* branch to order type build*/
    end
        /* branch to build next screen*/

    goto OP0Q-BUILD-SUBORD;

  end // end main
end // end OP0Q

// build prod subodering map
Function OP0Q-BUILD-SUBORD()



     /* **********************************************************/
     /* * this process builds the product subordering screen    **/
     /* **********************************************************/


  TA1REC.TA1LOCAT[1] = "OP0Q-BUILD-SUBORD"; /* process name*/


      /* set revision number of application*/
      /* initialize map fields*/

  converseLib.clearScreen();
  set OP0QM016 initial; /* erase screen option*/
  OP0QM016.OPMRVN = 01;
  OP0QM016.OPMDT = VGVar.currentShortGregorianDate; /* current date*/


      /* save prod on screen flag*/

  OP0QW01.OP0QWMPP = OP0QW01.OP0QWMPR;


      /* unprotect fields if authorized*/

  if (COMMAREA.CAALVL[1] == "Y")
    OPAREC.OPASUB = 1; /* map index*/
    while (OPAREC.OPASUB <= 90) /* not end of map table*/
      set OP0QM016.SY1STNBR[OPASUB] normal;
      set OP0QM016.SY2CLRID[OPASUB] normal;
      set OP0QM016.XDMCD[OPASUB] normal;
      OPAREC.OPASUB = OPAREC.OPASUB + 1; /* map index*/
    end
  end


      /* load previously entered fields if review mode*/

      /* tab-sub start = (scr-sub - 1) * 90 + 1*/

  OP0QW02.OP0QWSCR = OP0QW02.OP0QWSCR + 1; /* screen number*/
  if (OP0QW02.OP0QWSCR > 5) /* max screens?*/
    exit stack;
  end

  OPAREC.OPASUB1 = OP0QW02.OP0QWSCR - 1; /* table index*/
  OPAREC.OPASUB1 = OPAREC.OPASUB1 * 90; /* table index*/
  OPAREC.OPASUB1 = OPAREC.OPASUB1 + 1; /* table index*/

  OPAREC.OPASUB = 1; /* map index*/
  OP0QW01.OP0QWMPR = "N"; /* init prod flag*/
  while (OPAREC.OPASUB <= 90 /* not end of map table*/
   && OPAREC.OPASUB1 <= OP0QW02.OP0QWPRD) /* not end of curr table*/
    OP0QW01.OP0QWMPR = "Y"; /* set prod flag (even if del prod)*/
    if (OP0QW02.SY1STNBR[OPASUB1] > " " /* exists*/
     && OP0QW02.OP0QWACT[OPASUB1] != "D") /* not delete*/
      OP0QM016.SY1STNBR[OPASUB] = OP0QW02.SY1STNBR[OPASUB1];
      OP0QM016.SY2CLRID[OPASUB] = OP0QW02.SY2CLRID[OPASUB1];
      OP0QM016.XDMCD[OPASUB] = OP0QW02.XDMCD[OPASUB1];
    end
     /* map sub set up on deleted products so that*/
     /* the map sub matches the table sub at this time*/
    OPAREC.OPASUB = OPAREC.OPASUB + 1; /* map index*/
    OPAREC.OPASUB1 = OPAREC.OPASUB1 + 1; /* table index*/
  end



   /* *************************************************************/
end // end OP0Q-BUILD-SUBORD

// OP0Q - CALL TO SY2000
Function OP0Q-CALL-SY2000()

     /* Get the Product/Region record*/

  set SQLCA empty;

  WSY2000.XGP-GPC-CD = SYCREC.XGPCD;
  WSY2000.SY-STY-NBR = SYCREC.SY1STNBR;
  WSY2000.SY-COLR-CD-ID = SYCREC.SY2CLRID;
  WSY2000.XDM-DIM-CD = SYCREC.XDMCD;
  WSY2000.WSY2000-OPTION-CODE = "S ";
  WSY2000.WSY2000-SUB-OPTION-CODE = "O";
  WSY2000.WSY2000-RETURN-CODE = 90;

  call "SY2000" (WSY2000) {isNoRefresh = yes, isExternal = yes};

   /* Product/Region record is found*/
   /* Overlay those fields common to both records*/

  if (WSY2000.WSY2000-RETURN-CODE == 0)
    SYCREC.XGPCD = WSY2000.XGP-GPC-CD;
    SYCREC.SY1STNBR = WSY2000.SY-STY-NBR;
    SYCREC.SY2CLRID = WSY2000.SY-COLR-CD-ID;
    SYCREC.XDMCD = WSY2000.XDM-DIM-CD;
    SYCREC.PG1SC4CD = WSY2000.PG-SCHED-SPCLT-CD;
    SYCREC.PG1FCTCD = WSY2000.PG-FCST-CD;
    SYCREC.XSECD = WSY2000.XSE-SESN-CD;
    SYCREC.XSNYR = WSY2000.XSN-SESN-YR-RNG;
    SYCREC.SY2POFBD = WSY2000.SY-PROP-OFFER-BDT;
    SYCREC.SY2POFXD = WSY2000.SY-PROP-OFFER-XDT;
    SYCREC.SY2FOFBD = WSY2000.SY-FUTR-OFFER-BDT;
    SYCREC.SY2FOFXD = WSY2000.SY-FUTR-OFFER-XDT;
    SYCREC.XLCCD1 = WSY2000.XLC-LIFE-CYC-CD[1];
    SYCREC.XLCCD2 = WSY2000.XLC-LIFE-CYC-CD[2];
    SYCREC.XLCCD3 = WSY2000.XLC-LIFE-CYC-CD[3];
    SYCREC.XLCCD4 = WSY2000.XLC-LIFE-CYC-CD[4];
    SYCREC.SY2CEDT1 = WSY2000.SY-LIFE-CYC-EDT[1];
    SYCREC.SY2CEDT2 = WSY2000.SY-LIFE-CYC-EDT[2];
    SYCREC.SY2CEDT3 = WSY2000.SY-LIFE-CYC-EDT[3];
    SYCREC.SY2CEDT4 = WSY2000.SY-LIFE-CYC-EDT[4];
    SYCREC.XPRCD = WSY2000.XPR-PROD-TYP-CD;
    SYCREC.XPLCD = WSY2000.XPL-PROD-LN-CD;
    SYCREC.XPCCD = WSY2000.XPC-PROD-CAT-CD;
    SYCREC.SY2FDSMO = WSY2000.SY-FRST-DOM-SLS-MO;
    SYCREC.SY2PDCMO = WSY2000.SY-PROJ-DOM-CLS-MO;
    SYCREC.SY2SSCIN = WSY2000.SY-SFTY-STKCLS-IND;
    SYCREC.OPZHMIND = WSY2000.OP-HMDL-HOT-FL;
    SYCREC.SY2ALNOR = WSY2000.SY-ALW-NEW-ORD-FL;
    SYCREC.XWHCD[1] = WSY2000.XWH-WHSE-CD[1];
    SYCREC.XWHCD[2] = WSY2000.XWH-WHSE-CD[2];
    SYCREC.XWHCD[3] = WSY2000.XWH-WHSE-CD[3];
    SYCREC.XWHCD[4] = WSY2000.XWH-WHSE-CD[4];
    SYCREC.XWHCD[5] = WSY2000.XWH-WHSE-CD[5];
    SYCREC.XWHCD[6] = WSY2000.XWH-WHSE-CD[6];
    SYCREC.SY2RPRDI = WSY2000.SY-RSTR-XSO-IND;
    SYCREC.SY2BOSWI = WSY2000.SY-BO-SW;
    SYCREC.SY2BOEDT = WSY2000.SY-BO-SW-EDT;
  else

    /* Database DPROD.VSYREG02 is busy*/

    if (WSY2000.WSY2000-RETURN-CODE == 98)
      /* next sentence*/
    else

      /* Record is not found*/

      if (WSY2000.WSY2000-RETURN-CODE == 02)
        /* next sentence*/
      else

        /* Bad return code*/

        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "POST";
        OP0QW01.OP0QW-WSY2000-GPC-CD = SYCREC.XGPCD;
        OP0QW01.OP0QW-WSY2000-STY-NBR = SYCREC.SY1STNBR;
        OP0QW01.OP0QW-WSY2000-COLR-CD = SYCREC.SY2CLRID;
        OP0QW01.OP0QW-WSY2000-DIM-CD = SYCREC.XDMCD;
        OP0QW01.OP0QW-WSY2000-PROD-REG-CD = WSY2000.XDR-PROD-REG-CD;
        OP0QW01.OP0QW-WSY2000-RETURN-CD = WSY2000.WSY2000-RETURN-CODE;
        TAEREC.TAEDESC1 = OP0QW-WSY2000-POST-1;
        TAEREC.TAEDESC2 = "CALL TO SY2000 - BAD RETURN CODE";
        TA1REC.TA1DBASE = "DPROD";
        TA1REC.TA1TBLVU = "SYREG02";
        try
          call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
        end
      end
    end
  end
end // end OP0Q-CALL-SY2000

// init prod subord map parms
Function OP0Q-SUBORD-PROC()



     /* **********************************************************/
     /* * this process initializes the cancel product screen    **/
     /* * control fields                                        **/
     /* **********************************************************/


  TA1REC.TA1LOCAT[1] = "OP0Q-SUBORD-PROC"; /* process name*/


      /* init screen number*/

  OP0QW02.OP0QWSCR = 0; /* init screen number*/
  OP0QW01.OP0QWMPR = "N"; /* init prod on screen*/
  OP0QW01.OP0QWMPP = "N"; /* init prod on prev screen*/



   /* *************************************************************/
end // end OP0Q-SUBORD-PROC

// program init/init defaults
Function OP0Q001()



     /* **********************************************************/
     /* * this process initializes program work areas.          **/
     /* **********************************************************/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

      /* check entry security*/

  XSENTRY();


   /* ****************************************************/
   /* *** set segmented trans id                      ****/
   /* ****************************************************/

  COMMAREA.CAEZSAP = sysVar.transactionID;
  COMMAREA.CAEZSG12 = "OP";
  COMMAREA.CAEZSG4 = "Q";
  sysVar.transactionID = COMMAREA.CAEZSAP;

   /* *************************************************************/

      /* clear ws records*/

  OP0QS01(); /* clear ws records*/


      /* init error diag areas*/

  TA1REC.TA1TYPE = "DB2 "; /* abend type*/
  TA1REC.TA1FUNC = "RETN"; /* abend function (return)*/
  TA1REC.TA1PGMNM = "OP0Q    "; /* pgm name*/
  TA1REC.TA1LOCAT[1] = "OP0Q001 "; /* process name*/


  /* CANADA 08/31/95*/

  KUYREC.XXXUSRID = COMMAREA.CAUSERID; /* CANA*/
  OP0QSZT(); /* CANA obtain sales office*/
  if (SQLCA.VAGen_SQLCODE == 100  /* CANA row not found or*/
   || SQLCA.VAGen_SQLCODE == -811 /* CANA more than one row found or*/
   || KUYREC.XXXSTAT != "A")      /* CANA not active*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* CANA*/
    COMMAREA.CATOAP = "OP0M"; /* CANA*/
    COMMAREA.CAMSGNO = 11; /* CANA service rep not valid*/
    XSEXIT(); /* CANA*/
    OP0QM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* CANA*/
    OPAREC.OPAERR = "Y"; /* CANA*/
    COMMAREA.CATOAP = " "; /* CANA*/
    exit stack; /* CANA*/
  end

  if (KUYREC.XSOCD in XSOTBL.XSOCD /* CANA obtain country code from*/
   && XSOTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* CANA sales office table*/
    OP0QW01.XCTCD = XSOTBL.XCTCD[sysVar.arrayIndex]; /* CANA save country code*/
    if (OP0QW01.OP0QW-XCTCD-12 in ZCCTBL.XCT-ISO-CTRY-CD
     /* CANA obtain currency code*/
     && ZCCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* CANA*/
      OP0QW01.ZFC-CRCY-CD = ZCCTBL.ZFC-CRCY-CD[sysVar.arrayIndex]; /* CANA*/
    else
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* CANA*/
      COMMAREA.CATOAP = "OP0M"; /* CANA*/
      COMMAREA.CAMSGNO = 60; /* CANA invalid country code*/
      XSEXIT(); /* CANA*/
      OP0QM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* CANA*/
      OPAREC.OPAERR = "Y"; /* CANA*/
      COMMAREA.CATOAP = " "; /* CANA*/
      exit stack; /* CANA*/
    end
  else
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* CANA*/
    COMMAREA.CATOAP = "OP0M"; /* CANA*/
    COMMAREA.CAMSGNO = 109; /* CANA invalid sales office*/
    XSEXIT(); /* CANA*/
    OP0QM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* CANA*/
    OPAREC.OPAERR = "Y"; /* CANA*/
    COMMAREA.CATOAP = " "; /* CANA*/
    exit stack; /* CANA*/
  end

      /* get current date*/

  OPAREC.OPACDT = VGVar.currentShortGregorianDate; /* set curr date*/
  if (OPAREC.OPACYY > 56) /* set century based on year*/
    OPAREC.OPACCC = 19;
  else
    OPAREC.OPACCC = 20;
  end



   /* *************************************************************/
end // end OP0Q001

// init menu map
Function OP0Q005()



     /* **********************************************************/
     /* * this process initializes the menu screen              **/
     /* **********************************************************/


  TA1REC.TA1LOCAT[1] = "OP0Q005 "; /* process name*/


      /* set revision number of application*/
      /* initialize map fields*/

  converseLib.clearScreen();
  set OP0QM001 initial; /* erase screen option*/
  OP0QM001.OPMRVN = 01;
  OP0QM001.OPMDT = VGVar.currentShortGregorianDate; /* current date*/

  set OPDREC empty; /* init opdrec*/
  OP0QW01.OP0QWRVF = "N"; /* clear review flag*/
  OP0QW01.OPDRQID = " "; /* clear saved request id*/
  set OP0QW08 empty; /* init page table and sub*/
  OP0QW08.OP0QWPNX = 1; /* init screen number*/


      /* init option to directory*/

  OP0QM001.OP0QWOPT = "1"; /* default request to directory*/



   /* *************************************************************/
end // end OP0Q005

// converse menu map
Function OP0Q010()



      /* *********************************************************/
      /* * this process converses the map, edits the entered    **/
      /* * fields and if possible, xfer's to the requested      **/
      /* * application                                          **/
      /* *********************************************************/



      /* init error diag areas*/

  TA1REC.TA1MAP = "OP0QM001"; /* current map name*/
  TA1REC.TA1LOCAT[1] = "OP0Q010 "; /* process name*/


      /* move catoap and caitem to map*/

  OP0QM001.CATOAP = COMMAREA.CATOAP;
  OP0QM001.CAITEM = COMMAREA.CAITEM;


      /* set mdt's on for required fields*/

  set OP0QM001.OP0QWOPT modified; /* option field*/


      /* force segmented converse execution mode*/

  converseVar.segmentedMode = 1; /* force segmented execution mode*/



   /* *************************************************************/
  converse OP0QM001 ;
   /* *************************************************************/



      /* clear fields after converse*/

  OPAREC.OPAERR = "N"; /* clear err flag*/

  OP0QS10(); /* set mdt's on if modified*/



      /* check and process valid aid key requests*/

      /* enter - continue processing*/
        /* pf1 - transfer to help application*/
        /* pf3 - transfer to next level up application*/
        /* pf4 - transfer to master menu application*/
       /* pf12 - edit only*/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
     /* ** next sentence ** continue processing ***/
  else
    if (converseVar.eventKey is pf1) /* check for system help*/
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
      XSPF1(); /* help facility*/
      OP0QM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* move err msg*/
      OPAREC.OPAERR = "Y"; /* set err flag*/
      COMMAREA.CATOAP = " "; /* clear app*/
      exit stack;
    else
      if (converseVar.eventKey is pf3) /* check for session defaults*/
        COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
        COMMAREA.CATOAP = "OP0M";
        XSEXIT(); /* pass control to exit routine*/
        OP0QM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* move err msg*/
        OPAREC.OPAERR = "Y"; /* set err flag*/
        COMMAREA.CATOAP = " "; /* clear app*/
        exit stack;
      else
        if (converseVar.eventKey is pf4) /* check for master menu*/
          COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
          XSPF4(); /* invoke master menu request*/
          OP0QM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* move err msg*/
          OPAREC.OPAERR = "Y"; /* set err flag*/
          COMMAREA.CATOAP = " "; /* clear app*/
          exit stack;
        else
          converseLib.validationFailed(008); /* invalid key pressed*/
          OPAREC.OPAERR = "Y"; /* set err flag*/
          exit stack;
        end
      end
    end
  end


      /* save fast path data*/

  if (OP0QM001.CATOAP is modified) /* save fast path appl*/
    COMMAREA.CATOAP = OP0QM001.CATOAP;
  end

  if (OP0QM001.CAITEM is modified) /* save fast path item*/
    COMMAREA.CAITEM = OP0QM001.CAITEM;
  end


      /* check for transfer - overrides other options*/

  if (converseVar.eventKey is enter
   && COMMAREA.CATOAP > " ") /* transfer to appl?*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    XSEXIT(); /* pass control to exit routine*/
    OP0QM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* move err msg*/
    OPAREC.OPAERR = "Y"; /* set err flag*/
    COMMAREA.CATOAP = " "; /* clear app*/
    set OP0QM001.CATOAP cursor, modified, bold; /* yes, set option*/
    exit stack;
  end


      /* control edit process*/

  OP0QS11(); /* edit control*/


      /* call commit to release data base resources*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value



   /* *************************************************************/
end // end OP0Q010

// init directory map
Function OP0Q015()



     /* **********************************************************/
     /* * this process initializes the directory screen         **/
     /* **********************************************************/


  TA1REC.TA1LOCAT[1] = "OP0Q015 "; /* process name*/


      /* set revision number of application*/
      /* initialize map fields*/

  converseLib.clearScreen();
  set OP0QM002 initial; /* erase screen option*/
  OP0QM002.OPMRVN = 01;
  OP0QM002.OPMDT = VGVar.currentShortGregorianDate; /* current date*/

  OP0QW01.OP0QWRVF = "N"; /* set review flag off*/
  OP0QW01.OPDRQID = " "; /* clear saved request id*/
  OP0QS16(); /* build page table (conditionally)*/
  OP0QS19(); /* build first/next screen*/
  set OPDREC empty; /* clear record*/



   /* *************************************************************/
end // end OP0Q015

// converse directory map
Function OP0Q020()



      /* *********************************************************/
      /* * this process converses the directory and processes   **/
      /* * the first selected line found.                       **/
      /* *********************************************************/



      /* init error diag areas*/

  TA1REC.TA1MAP = "OP0QM002"; /* current map name*/
  TA1REC.TA1LOCAT[1] = "OP0Q020 "; /* process name*/


      /* move catoap and caitem to map*/

  OP0QM001.CATOAP = COMMAREA.CATOAP;
  OP0QM001.CAITEM = COMMAREA.CAITEM;


      /* force segmented converse execution mode*/

  converseVar.segmentedMode = 1; /* force segmented execution mode*/



   /* *************************************************************/
  converse OP0QM002 ;
   /* *************************************************************/



      /* clear fields after converse*/

  OPAREC.OPAERR = "N"; /* clear err flag*/

  OP0QS20(); /* set mdt's on if modified*/



      /* check and process valid aid key requests*/

      /* enter - continue processing*/
        /* pf3 - branch to ogm menu*/
        /* pf4 - transfer to master menu application*/
        /* pf7 - page backward*/
        /* pf8 - page forward*/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
     /* ** next sentence ** continue processing ***/
  else
    if (converseVar.eventKey is pf3) /* check for ogm menu*/
      exit stack;
    else
      if (converseVar.eventKey is pf4) /* check for master menu*/
        COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
        XSPF4(); /* invoke master menu request*/
        OP0QM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* move err msg*/
        OPAREC.OPAERR = "Y"; /* set err flag*/
        COMMAREA.CATOAP = " "; /* clear app*/
        exit stack;
      else
        converseLib.validationFailed(008); /* invalid key pressed*/
        OPAREC.OPAERR = "Y"; /* set err flag*/
        exit stack;
      end
    end
  end


      /* save fast path data*/

  if (OP0QM002.CATOAP is modified) /* save fast path appl*/
    COMMAREA.CATOAP = OP0QM002.CATOAP;
  end

  if (OP0QM002.CAITEM is modified) /* save fast path item*/
    COMMAREA.CAITEM = OP0QM002.CAITEM;
  end


      /* check for transfer - overrides other options*/

  if (converseVar.eventKey is enter
   && COMMAREA.CATOAP > " ") /* transfer to appl?*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    XSEXIT(); /* pass control to exit routine*/
    OP0QM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* move err msg*/
    OPAREC.OPAERR = "Y"; /* set err flag*/
    COMMAREA.CATOAP = " "; /* clear app*/
    set OP0QM002.CATOAP cursor, modified, bold; /* yes, set option*/
    exit stack;
  end


      /* control edit/selection process*/

  OP0QS21(); /* edit control*/



   /* *************************************************************/
end // end OP0Q020

// get data base recs
Function OP0Q025()



     /* **********************************************************/
     /* * this process gets the data base records for review.   **/
     /* **********************************************************/


  TA1REC.TA1LOCAT[1] = "OP0Q025 "; /* process name*/


      /* clear product flag*/

  OP0QW02.OP0QWNPR = 0; /* clear field*/


      /* if review, then get records*/

  if (OP0QW01.OP0QWRVF == "Y" /* review mode*/
   && OP0QW01.OPDRQID > " ")  /* id exists*/
    OP0QS26();
  end



   /* *************************************************************/
end // end OP0Q025

// init parameter map
Function OP0Q027()



     /* **********************************************************/
     /* this process initializes the parameter screen         **/
     /* **********************************************************/


  TA1REC.TA1LOCAT[1] = "OP0Q027 "; /* process name*/


      /* set revision number of application*/
      /* initialize map fields*/

  converseLib.clearScreen();
  set OP0QM003 initial; /* erase screen option*/
  OP0QM003.OPMRVN = 01;
  OP0QM003.OPMDT = VGVar.currentShortGregorianDate; /* current date*/

  OP0QM003.OPDRQRSQ = 50; /* priority*/

  OP0QM003.OPDDSCPF = "Y"; /* set send discrepancy flag*/

      /* build gpc display*/

  OPAREC.OPASUB = 1; /* table index*/
  OPAREC.OPASUB2 = 1; /* map index*/
  while (XGPTBL.XGPCD[OPASUB] != "99" /* not end of table*/
   && OPAREC.OPASUB2 <= 8) /* not end of map table*/


   /* **********TCS INCLUDE BEGIN***********/

    set VXVO0001 empty;
    set SQLCA empty;
    set OPVREC empty;
    VXVO0001.XGPCD = XGPTBL.XGPCD[OPASUB];
    OPVREC.OPVTASK = "T6";

    call "VXVO0001" (OPVREC, SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
      if (OPVREC.OPVCOUNT > 0) /* if record present*/
        if (COMMAREA.CAALVL[1] == "Y" /* update authority*/
         && OP0QW02.OP0QWNPR == 0)    /* no products at this time*/
          set OP0QM003.OP0QMSEL[OPASUB2] normal;
        else
          set OP0QM003.OP0QMSEL[OPASUB2] protect;
        end
        OP0QM003.XGPCD[OPASUB2] = XGPTBL.XGPCD[OPASUB];
        OP0QM003.XGPDESC[OPASUB2] = XGPTBL.XGPDESC[OPASUB];
        if (OPDREC.XGPCD > " " /* gpc previously entered*/
         && OPDREC.XGPCD == XGPTBL.XGPCD[OPASUB])
          OP0QM003.OP0QMSEL[OPASUB2] = "X";
        end
        OPAREC.OPASUB2 = OPAREC.OPASUB2 + 1; /* map index*/
      end
    else
      TA1REC.TA1DBASE = "DCORP";
      TA1REC.TA1TBLVU = "VXVO0001";
      TA1REC.TA1TBLKE = VXVO0001-KEY;
      TA1REC.TA1LOCAT[3] = "OP0Q027";
      TA1REC.TA1LOCAT[4] = "VXVO0001";
      OP0QSZZ();
    end

   /* **********TCS INCLUDE END***********/

    OPAREC.OPASUB = OPAREC.OPASUB + 1; /* table index*/
  end


      /* set mdt's on for required fields*/

  if (COMMAREA.CAALVL[1] == "Y") /* update authority*/
    if (OP0QW01.OP0QWRVF == "Y") /* review yes*/
      set OP0QM003.OPDRQID protect; /* id*/
      set OP0QM003.OPDRQDSC cursor, normal; /* desc*/
      set OP0QM003.OPDRQTYP protect; /* request type*/
      set OP0QM003.OPDRQEDT normal; /* effective date*/
      set OP0QM003.OPDRQRSQ normal; /* run sequence*/
      set OP0QM003.OPDRBNDT normal; /* beginning date*/
      set OP0QM003.OPDRENDT normal; /* ending date*/
      set OP0QM003.XOMCD normal; /* order maint reason code*/
      set OP0QM003.OP4TXT normal; /* order maint comment*/
      set OP0QM003.SOCD-HDR-RSN-TXT normal; /* ocd chnage comment*/
      set OP0QM003.OPDDSCPF normal; /* send discrepancy flag*/
      if (OPDREC.XXXSTAT == "I") /* IF REQUEST INACTIVE*/
        OP0QM003.OP0QMARL = "  ACTIVATE REQUEST:";
      else /* request is active*/
        OP0QM003.OP0QMARL = "INACTIVATE REQUEST:";
      end
      set OP0QM003.OP0QMARL skip;
                                   /* DISPLAY REACTIVATE REQUEST LITERAL*/
      set OP0QM003.OP0QMACT initialAttributes; /* display reactivate request flag*/
    else
      if (OPDREC.OPDRQID == " ") /* initial record entry*/
        set OP0QM003.OPDRQID modified; /* id*/
        set OP0QM003.OPDRQDSC modified; /* desc*/
        set OP0QM003.OPDRQTYP modified; /* request type*/
        set OP0QM003.OPDRQEDT modified; /* effective date*/
        set OP0QM003.OPDRQRSQ modified; /* run sequence*/
        set OP0QM003.OPDRBNDT modified; /* beginning date*/
        set OP0QM003.OPDRENDT modified; /* ending date*/
        set OP0QM003.XOMCD modified; /* order maint reason code*/
        set OP0QM003.OP4TXT normal; /* order maint comment*/
        set OP0QM003.SOCD-HDR-RSN-TXT normal; /* ocd change comment*/
        set OP0QM003.OP0QMSEL[1] modified; /* xgpcd select*/
        set OP0QM003.OPDDSCPF modified; /* send discrepancy flag*/
        set OP0QM003.OP0QMARL skip, invisible;
        set OP0QM003.OP0QMACT skip, invisible;
      else
         /* review during initial entry*/
        set OP0QM003.OPDRQID normal; /* id*/
        set OP0QM003.OPDRQDSC normal; /* desc*/
        if (OP0QW02.OP0QWNPR == 0) /* no products at this time*/
          set OP0QM003.OPDRQTYP normal; /* request type*/
        else
          set OP0QM003.OPDRQTYP protect; /* request type*/
        end
        set OP0QM003.OPDRQEDT normal; /* effective date*/
        set OP0QM003.OPDRQRSQ normal; /* run sequence*/
        set OP0QM003.OPDRBNDT normal; /* beginning date*/
        set OP0QM003.OPDRENDT normal; /* ending date*/
        set OP0QM003.XOMCD normal; /* order maint reason code*/
        set OP0QM003.OP4TXT normal; /* order maint comment*/
        set OP0QM003.SOCD-HDR-RSN-TXT normal; /* ocd change comment*/
        set OP0QM003.OPDDSCPF normal; /* send discrepancy flag*/
        set OP0QM003.OP0QMARL skip, invisible;
        set OP0QM003.OP0QMACT skip, invisible;
      end
    end
  end


      /* build screen from values in record (gpc set above)*/

  if (OPDREC.OPDRQID > " ") /* record present?*/

    OP0QM003.OPDRQID = OPDREC.OPDRQID; /* id*/

    OP0QM003.OPDRQDSC = OPDREC.OPDRQDSC; /* desc*/

    OP0QM003.OPDRQTYP = OPDREC.OPDRQTYP; /* request type*/

    OPAREC.OPAWDT = OPDREC.OPDRQEDT; /* effective date*/
    OPAREC.OPAFYY = OPAREC.OPAWYY; /* year*/
    OPAREC.OPAFMM = OPAREC.OPAWMM; /* month*/
    OPAREC.OPAFDD = OPAREC.OPAWDD; /* day*/
    OP0QM003.OPDRQEDT = OPAREC.OPAFDT; /* effective date*/

    OP0QM003.OPDRQRSQ = OPDREC.OPDRQRSQ; /* run sequence*/

    OP0QM003.OPDDSCPF = OPDREC.OPDDSCPF; /* send discrepancy*/
    OP0QM003.OP0QMACT = "N"; /* set reactivate request flag default*/

    OPAREC.OPAWDT = OPDREC.OPDRBNDT; /* beginning date*/
    OPAREC.OPAFYY = OPAREC.OPAWYY; /* year*/
    OPAREC.OPAFMM = OPAREC.OPAWMM; /* month*/
    OPAREC.OPAFDD = OPAREC.OPAWDD; /* day*/
    OP0QM003.OPDRBNDT = OPAREC.OPAFDT; /* beginning date*/

    OPAREC.OPAWDT = OPDREC.OPDRENDT; /* ending date*/
    OPAREC.OPAFYY = OPAREC.OPAWYY; /* year*/
    OPAREC.OPAFMM = OPAREC.OPAWMM; /* month*/
    OPAREC.OPAFDD = OPAREC.OPAWDD; /* day*/
    OP0QM003.OPDRENDT = OPAREC.OPAFDT; /* ending date*/

    OP0QM003.XOMCD = OPDREC.XOMCD; /* order maint reason code*/

    if (OPDREC.XOMCD > " ")
      if (OPDREC.XOMCD in XOMTBL.XOMCD)
        OP0QM003.XOMDESC = XOMTBL.XOMDESC[sysVar.arrayIndex];
      else
        OP0QM003.XOMDESC = "*UNKNOWN*";
      end
    end

    OP0QM003.OP4TXT = OPDREC.OP4TXT; /* order maint comment*/
    OP0QM003.SOCD-HDR-RSN-TXT = OPDREC.SOCD-HDR-RSN-TXT; /* ocd comment*/

  end

  /* CANADA 09/01/95*/

  if (OP0QW01.XCTCD == "CANA") /* CANA This is a Canadian customer*/
    OP0QM003.OPDDSCPF = "N"; /* CANA set discrepancy flag to 'N'*/
    set OP0QM003.OPDDSCPF skip; /* CANA and protect the field*/
  end /* CANA*/

   /* *************************************************************/
end // end OP0Q027

// converse parameter map
Function OP0Q030()



      /* *********************************************************/
      /* * this process converses the parameter map and         **/
      /* * processes the data.                                  **/
      /* *********************************************************/



      /* init error diag areas*/

  TA1REC.TA1MAP = "OP0QM003"; /* current map name*/
  TA1REC.TA1LOCAT[1] = "OP0Q030 "; /* process name*/


      /* build pf3 desc*/

  if (OP0QW01.OP0QWUPD == "Y") /* update flaged*/
    OP0QM003.OP0QMPF3 = " "; /* cannot pf3*/
  else
    if (OP0QW01.OP0QWOPT == "1") /* directory option*/
      OP0QM003.OP0QMPF3 = "3:DIR     ";
    else
      OP0QM003.OP0QMPF3 = "3:OGM MN  ";
    end
  end

  /* CANADA 09/01/95*/

  if (OP0QW01.XCTCD == "CANA") /* CANA This is a Canadian user*/
    set OP0QM003.OP0QWHSE-LIT invisible, skip; /* CANA darken warehouse option*/
  else
    set OP0QM003.OP0QWHSE-LIT bold, skip; /* CANA show warehouse option*/
  end

      /* force segmented converse execution mode*/

  converseVar.segmentedMode = 1; /* force segmented execution mode*/



   /* *************************************************************/
  converse OP0QM003 ;
   /* *************************************************************/



      /* clear fields after converse*/

  OPAREC.OPAERR = "N"; /* clear err flag*/

  OP0QS30(); /* set mdt's on if modified*/



      /* check and process valid aid key requests*/

      /* enter - continue processing*/
        /* pf2 - ord maint reason code help screen*/
        /* pf3 - branch to prev screen (if not review)*/
        /* pf12- edit only*/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf2) /* ord maint help screen*/
     /* ** next sentence ** continue processing ***/
  else
    if (converseVar.eventKey is pf3 /* check for prev screen*/
     && OP0QW01.OP0QWUPD != "Y")    /* and not update flagged*/
      OP0QSJA(); /* clear request areas*/
      exit stack;
    else
      converseLib.validationFailed(008); /* invalid key pressed*/
      OPAREC.OPAERR = "Y"; /* set err flag*/
      exit stack;
    end
  end


      /* control edit process*/

  OP0QS31(); /* edit control*/



   /* *************************************************************/
end // end OP0Q030

// init order status map
Function OP0Q035()



     /* **********************************************************/
     /* * this process initializes the order status screen      **/
     /* **********************************************************/


  TA1REC.TA1LOCAT[1] = "OP0Q035 "; /* process name*/


      /* set revision number of application*/
      /* initialize map fields*/

  converseLib.clearScreen();
  set OP0QM004 initial; /* erase screen option*/
  OP0QM004.OPMRVN = 01;
  OP0QM004.OPMDT = VGVar.currentShortGregorianDate; /* current date*/


      /* init request id and desc fields*/

  OP0QM004.OPDRQID = OPDREC.OPDRQID;
  OP0QM004.OPDRQDSC = OPDREC.OPDRQDSC;


      /* build xos display*/

  if (OPDREC.OPDRQTYP == "1") /* cancel*/
    OP0QS35(); /* valid cancel prod statuses*/
  end

  if (OPDREC.OPDRQTYP == "2") /* replace*/
    OP0QS36(); /* valid replace prod statuses*/
  end

  if (OPDREC.OPDRQTYP == "3") /* 1 w/h mod*/
    OP0QS38(); /* valid 1 w/h mod prod statuses*/
  end

  if (OPDREC.OPDRQTYP == "4") /* reprice*/
    OP0QS37(); /* valid reprice prod statuses*/
  end

  if (OPDREC.OPDRQTYP == "5") /* subordering   10/30/97*/
    OP0QS-DISP-PRODSUB(); /* display valid prod statuses*/
  end /* for prod subordering*/



   /* *************************************************************/
end // end OP0Q035

// converse order status map
Function OP0Q040()



      /* *********************************************************/
      /* * this process converses the prod status map and       **/
      /* * processes the data.                                  **/
      /* *********************************************************/



      /* init error diag areas*/

  TA1REC.TA1MAP = "OP0QM004"; /* current map name*/
  TA1REC.TA1LOCAT[1] = "OP0Q040 "; /* process name*/


      /* force segmented converse execution mode*/

  converseVar.segmentedMode = 1; /* force segmented execution mode*/



   /* *************************************************************/
  converse OP0QM004 ;
   /* *************************************************************/



      /* clear fields after converse*/

  OPAREC.OPAERR = "N"; /* clear err flag*/

  OP0QS40(); /* set mdt's on if modified*/



      /* check and process valid aid key requests*/

      /* enter - continue processing*/
        /* pf3 - branch to parm screen*/
        /* pf12- edit only*/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
     /* ** next sentence ** continue processing ***/
  else
    if (converseVar.eventKey is pf3) /* check for parm screen*/
      exit stack;
    else
      converseLib.validationFailed(008); /* invalid key pressed*/
      OPAREC.OPAERR = "Y"; /* set err flag*/
      exit stack;
    end
  end


      /* control edit process*/

  OP0QS41(); /* edit control*/



   /* *************************************************************/
end // end OP0Q040

// init sales office map
Function OP0Q045()



     /* **********************************************************/
     /* * this process initializes the sales office screen      **/
     /* **********************************************************/


  TA1REC.TA1LOCAT[1] = "OP0Q045 "; /* process name*/


      /* set revision number of application*/
      /* initialize map fields*/

  converseLib.clearScreen();
  set OP0QM005 initial; /* erase screen option*/
  OP0QM005.OPMRVN = 01;
  OP0QM005.OPMDT = VGVar.currentShortGregorianDate; /* current date*/


      /* init request id and desc fields*/

  OP0QM005.OPDRQID = OPDREC.OPDRQID;
  OP0QM005.OPDRQDSC = OPDREC.OPDRQDSC;


      /* build sales office display*/

  OPAREC.OPASUB = 1; /* table index*/
  OPAREC.OPASUB2 = 1; /* map index*/
  while (XSOTBL.XSOCD[OPASUB] != "99" /* not end of table*/
   && OPAREC.OPASUB2 <= 26) /* not end of map table*/

    /* CANADA 09/06/95*/

    if (OP0QW01.XCTCD == "CANA" && XSOTBL.XCTCD[OPASUB] == "CANA" /* CANA*/
     || OP0QW01.XCTCD == "USA" && XSOTBL.XCTCD[OPASUB] == "USA")  /* USA*/
     /* display sales office only if status is 'active'  jflor1*/
      if (XSOTBL.XXXSTAT[OPASUB] == "A")
        OP0QM005.XSOCD[OPASUB2] = XSOTBL.XSOCD[OPASUB];
        OP0QM005.XSONM[OPASUB2] = XSOTBL.XSONM[OPASUB];
        /* select valid sales offices for GPC*/
        OP0QS45(); /* flag valid sls ofc entries*/
        /*  */
        if (COMMAREA.CAALVL[1] == "Y")
          set OP0QM005.OP0QMSEL[OPASUB2] normal;
        else
          set OP0QM005.OP0QMSEL[OPASUB2] protect;
        end
        /* if previous selections made, remark with 'x'*/
        if (OPDREC.OPDXSOCD > " ") /* at least one code*/
          OPAREC.OPASUB1 = 1; /* init sub*/
          while (OPAREC.OPASUB1 <= 26
           && OPDREC.XSOCD[OPASUB1] > " ")
            if (OP0QM005.XSOCD[OPASUB2] == OPDREC.XSOCD[OPASUB1])
              OP0QM005.OP0QMSEL[OPASUB2] = "X";
              OPAREC.OPASUB1 = 99; /* terminate loop*/
            end
            OPAREC.OPASUB1 = OPAREC.OPASUB1 + 1; /* table index*/
          end
        end

        OPAREC.OPASUB2 = OPAREC.OPASUB2 + 1; /* map index*/
      end /* CANA*/
    end
    OPAREC.OPASUB = OPAREC.OPASUB + 1; /* table index*/
  end



   /* *************************************************************/
end // end OP0Q045

// converse sales office map
Function OP0Q050()



      /* *********************************************************/
      /* * this process converses the sales office map and      **/
      /* * processes the data.                                  **/
      /* *********************************************************/



      /* init error diag areas*/

  TA1REC.TA1MAP = "OP0QM005"; /* current map name*/
  TA1REC.TA1LOCAT[1] = "OP0Q050 "; /* process name*/


      /* force segmented converse execution mode*/

  converseVar.segmentedMode = 1; /* force segmented execution mode*/



   /* *************************************************************/
  converse OP0QM005 ;
   /* *************************************************************/



      /* clear fields after converse*/

  OPAREC.OPAERR = "N"; /* clear err flag*/

  OP0QS50(); /* set mdt's on if modified*/



      /* check and process valid aid key requests*/

      /* enter - continue processing*/
        /* pf3 - branch to prod status screen*/
        /* pf12- edit only*/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
     /* ** next sentence ** continue processing ***/
  else
    if (converseVar.eventKey is pf3) /* check for prod status screen*/
      exit stack;
    else
      converseLib.validationFailed(008); /* invalid key pressed*/
      OPAREC.OPAERR = "Y"; /* set err flag*/
      exit stack;
    end
  end


      /* control edit process*/

  OP0QS51(); /* edit control*/



   /* *************************************************************/
end // end OP0Q050

// init order type map
Function OP0Q055()



     /* **********************************************************/
     /* * this process initializes the order type screen        **/
     /* **********************************************************/


  TA1REC.TA1LOCAT[1] = "OP0Q055 "; /* process name*/


      /* set revision number of application*/
      /* initialize map fields*/

  converseLib.clearScreen();
  set OP0QM006 initial; /* erase screen option*/
  OP0QM006.OPMRVN = 01;
  OP0QM006.OPMDT = VGVar.currentShortGregorianDate; /* current date*/


      /* init request id and desc fields*/

  OP0QM006.OPDRQID = OPDREC.OPDRQID;
  OP0QM006.OPDRQDSC = OPDREC.OPDRQDSC;


      /* build base order type display*/

  OPAREC.OPASUB = 1; /* table index*/
  OPAREC.OPASUB2 = 1; /* map index*/
  while (XOBTBL.XOBCD[OPASUB] != "99" /* not end of table*/
   && OPAREC.OPASUB2 <= 26) /* not end of map table*/
    OP0QM006.XOBCD[OPASUB2] = XOBTBL.XOBCD[OPASUB];
    OP0QM006.XOBDESC[OPASUB2] = XOBTBL.XOBDESC[OPASUB];

    if (OPDREC.OPDXSOCD > " " /* any sales office entries*/
     && XOBTBL.XXXSTAT[OPASUB] == "A") /* active base order type*/
      OP0QS55(); /* find valid xobcd's for xso*/
    else
      OP0QM006.OP0QMFLG[OPASUB2] = "*"; /* all are valid*/
    end
          /* check update security*/

    if (COMMAREA.CAALVL[1] == "Y")
      set OP0QM006.OP0QMSEL[OPASUB2] normal;
    else
      set OP0QM006.OP0QMSEL[OPASUB2] protect;
    end

          /* flag entries if previously entered*/

    if (OPDREC.OPDXOBCD > " ") /* at least one code*/
      OPAREC.OPASUB1 = 1; /* init sub*/
      while (OPAREC.OPASUB1 <= 26
       && OPDREC.XOBCD[OPASUB1] > " ")
        if (OP0QM006.XOBCD[OPASUB2] == OPDREC.XOBCD[OPASUB1])
          OP0QM006.OP0QMSEL[OPASUB2] = "X";
          OPAREC.OPASUB1 = 99; /* terminate loop*/
        end
        OPAREC.OPASUB1 = OPAREC.OPASUB1 + 1; /* table index*/
      end
    end

    OPAREC.OPASUB2 = OPAREC.OPASUB2 + 1; /* map index*/
    OPAREC.OPASUB = OPAREC.OPASUB + 1; /* table index*/
  end

          /* set cursor to first valid xob or first*/
          /* selected xob*/

  if (COMMAREA.CAALVL[1] == "Y")
    OPAREC.OPASUB1 = 26; /* init sub*/
    while (OPAREC.OPASUB1 >= 1)
      if (OP0QM006.OP0QMSEL[OPASUB1] == "X"
       || OP0QM006.OP0QMFLG[OPASUB1] == "*")
        set OP0QM006.OP0QMSEL[OPASUB1] cursor, normal;
      end
      OPAREC.OPASUB1 = OPAREC.OPASUB1 - 1; /* map index*/
    end
  end


  if (OPDREC.OPDRQTYP == "3") /* warehouse*/
    OP0QM006.OP0QMENT = "ENTER:WHSE"; /* enter key desc*/
  else
    OP0QM006.OP0QMENT = "ENTER:PRODUCT";
  end



   /* *************************************************************/
end // end OP0Q055

// converse order type map
Function OP0Q060()



      /* *********************************************************/
      /* * this process converses the base order type map and   **/
      /* * processes the data.                                  **/
      /* *********************************************************/



      /* init error diag areas*/

  TA1REC.TA1MAP = "OP0QM006"; /* current map name*/
  TA1REC.TA1LOCAT[1] = "OP0Q060 "; /* process name*/


      /* force segmented converse execution mode*/

  converseVar.segmentedMode = 1; /* force segmented execution mode*/



   /* *************************************************************/
  converse OP0QM006 ;
   /* *************************************************************/



      /* clear fields after converse*/

  OPAREC.OPAERR = "N"; /* clear err flag*/

  OP0QS60(); /* set mdt's on if modified*/



      /* check and process valid aid key requests*/

      /* enter - continue processing*/
        /* pf3 - branch to prod status screen*/
        /* pf12- edit only*/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
     /* ** next sentence ** continue processing ***/
  else
    if (converseVar.eventKey is pf3) /* check for prod status screen*/
      exit stack;
    else
      converseLib.validationFailed(008); /* invalid key pressed*/
      OPAREC.OPAERR = "Y"; /* set err flag*/
      exit stack;
    end
  end


      /* control edit process*/

  OP0QS61(); /* edit control*/



   /* *************************************************************/
end // end OP0Q060

// init cancel prod map parms
Function OP0Q065()



     /* **********************************************************/
     /* * this process initializes the cancel product screen    **/
     /* * control fields                                        **/
     /* **********************************************************/


  TA1REC.TA1LOCAT[1] = "OP0Q065 "; /* process name*/


      /* init screen number*/

  OP0QW02.OP0QWSCR = 0; /* init screen number*/
  OP0QW01.OP0QWMPR = "N"; /* init prod on screen*/
  OP0QW01.OP0QWMPP = "N"; /* init prod on prev screen*/



   /* *************************************************************/
end // end OP0Q065

// build cancel prod map
Function OP0Q067()



     /* **********************************************************/
     /* * this process builds the cancel product screen         **/
     /* **********************************************************/


  TA1REC.TA1LOCAT[1] = "OP0Q067 "; /* process name*/


      /* set revision number of application*/
      /* initialize map fields*/

  converseLib.clearScreen();
  set OP0QM007 initial; /* erase screen option*/
  OP0QM007.OPMRVN = 01;
  OP0QM007.OPMDT = VGVar.currentShortGregorianDate; /* current date*/


      /* save prod on screen flag*/

  OP0QW01.OP0QWMPP = OP0QW01.OP0QWMPR;


      /* unprotect fields if authorized*/

  if (COMMAREA.CAALVL[1] == "Y")
    OPAREC.OPASUB = 1; /* map index*/
    while (OPAREC.OPASUB <= 90) /* not end of map table*/
      set OP0QM007.SY1STNBR[OPASUB] normal;
      set OP0QM007.SY2CLRID[OPASUB] normal;
      set OP0QM007.XDMCD[OPASUB] normal;
      OPAREC.OPASUB = OPAREC.OPASUB + 1; /* map index*/
    end
  end


      /* load previously entered fields if review mode*/

      /* tab-sub start = (scr-sub - 1) * 90 + 1*/

  OP0QW02.OP0QWSCR = OP0QW02.OP0QWSCR + 1; /* screen number*/
  if (OP0QW02.OP0QWSCR > 5) /* max screens?*/
    exit stack;
  end

  OPAREC.OPASUB1 = OP0QW02.OP0QWSCR - 1; /* table index*/
  OPAREC.OPASUB1 = OPAREC.OPASUB1 * 90; /* table index*/
  OPAREC.OPASUB1 = OPAREC.OPASUB1 + 1; /* table index*/

  OPAREC.OPASUB = 1; /* map index*/
  OP0QW01.OP0QWMPR = "N"; /* init prod flag*/
  while (OPAREC.OPASUB <= 90 /* not end of map table*/
   && OPAREC.OPASUB1 <= OP0QW02.OP0QWPRD) /* not end of curr table*/
    OP0QW01.OP0QWMPR = "Y"; /* set prod flag (even if del prod)*/
    if (OP0QW02.SY1STNBR[OPASUB1] > " " /* exists*/
     && OP0QW02.OP0QWACT[OPASUB1] != "D") /* not delete*/
      OP0QM007.SY1STNBR[OPASUB] = OP0QW02.SY1STNBR[OPASUB1];
      OP0QM007.SY2CLRID[OPASUB] = OP0QW02.SY2CLRID[OPASUB1];
      OP0QM007.XDMCD[OPASUB] = OP0QW02.XDMCD[OPASUB1];
    end
     /* map sub set up on deleted products so that*/
     /* the map sub matches the table sub at this time*/
    OPAREC.OPASUB = OPAREC.OPASUB + 1; /* map index*/
    OPAREC.OPASUB1 = OPAREC.OPASUB1 + 1; /* table index*/
  end



   /* *************************************************************/
end // end OP0Q067

// converse cancel prod map
Function OP0Q070()



      /* *********************************************************/
      /* * this process converses the cancel prod map and       **/
      /* * processes the data.                                  **/
      /* *********************************************************/



      /* init error diag areas*/

  TA1REC.TA1MAP = "OP0QM007"; /* current map name*/
  TA1REC.TA1LOCAT[1] = "OP0Q070 "; /* process name*/


      /* force segmented converse execution mode*/

  converseVar.segmentedMode = 1; /* force segmented execution mode*/



   /* *************************************************************/
  converse OP0QM007 ;
   /* *************************************************************/



      /* clear fields after converse*/

  OPAREC.OPAERR = "N"; /* clear err flag*/

  OP0QS70(); /* set mdt's on if modified*/



      /* check and process valid aid key requests*/

      /* enter - continue processing*/
        /* pf3 - branch to order type screen*/
        /* pf12- edit only*/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
     /* ** next sentence ** continue processing ***/
  else
    if (converseVar.eventKey is pf3) /* check for order type screen*/
      exit stack;
    else
      converseLib.validationFailed(008); /* invalid key pressed*/
      OPAREC.OPAERR = "Y"; /* set err flag*/
      exit stack;
    end
  end


      /* control edit process*/

  OP0QS71(); /* edit control*/



   /* *************************************************************/
end // end OP0Q070

// init replace prod map
Function OP0Q075()



     /* **********************************************************/
     /* * this process initializes the replace product screen   **/
     /* **********************************************************/


  TA1REC.TA1LOCAT[1] = "OP0Q075 "; /* process name*/


      /* set revision number of application*/
      /* initialize map fields*/

  converseLib.clearScreen();
  set OP0QM008 initial; /* erase screen option*/
  OP0QM008.OPMRVN = 01;
  OP0QM008.OPMDT = VGVar.currentShortGregorianDate; /* current date*/


      /* unprotect fields if authorized*/

  OPAREC.OPASUB = 1; /* map index*/
  while (OPAREC.OPASUB <= 34) /* not end of map table*/
    if (COMMAREA.CAALVL[1] == "Y")
      set OP0QM008.SY1STNBR[OPASUB] normal;
      set OP0QM008.OP2SSTYN[OPASUB] normal;
      set OP0QM008.SY2CLRID[OPASUB] normal;
      set OP0QM008.OP2SCLCD[OPASUB] normal;
      set OP0QM008.XDMCD[OPASUB] normal;
      set OP0QM008.OP2SDMCD[OPASUB] normal;
      set OP0QM008.SY5PRCUN[OPASUB] normal;
    end
    set OP0QM008.OP2PRCVF[OPASUB] normal; /* updatable for non-upd review*/
    OPAREC.OPASUB = OPAREC.OPASUB + 1; /* map index*/
  end


      /* load previously entered fields if review mode*/

  OPAREC.OPASUB = 1; /* map index*/
  OPAREC.OPASUB1 = 1; /* table index*/
  while (OPAREC.OPASUB <= 34  /* not end of map table*/
   && OPAREC.OPASUB1 <= 34 /* not end of table*/
   && OPAREC.OPASUB1 <= OP0QW02.OP0QWPRD) /* not end of curr table*/
    if (OP0QW02.SY1STNBR[OPASUB1] > " " /* exists*/
     && OP0QW02.OP0QWACT[OPASUB1] != "D") /* not delete*/
      OP0QM008.SY1STNBR[OPASUB] = OP0QW02.SY1STNBR[OPASUB1];
      OP0QM008.SY2CLRID[OPASUB] = OP0QW02.SY2CLRID[OPASUB1];
      OP0QM008.XDMCD[OPASUB] = OP0QW02.XDMCD[OPASUB1];
      OP0QM008.OP2SSTYN[OPASUB] = OP0QW03.OP2SSTYN[OPASUB1];
      OP0QM008.OP2SCLCD[OPASUB] = OP0QW03.OP2SCLCD[OPASUB1];
      OP0QM008.OP2SDMCD[OPASUB] = OP0QW03.OP2SDMCD[OPASUB1];
      OP0QW05.OP0QWPAR = OP0QW04.OP0QWPAR[OPASUB1];
      OP0QM008.SY5PRCUN[OPASUB] = OP0QW05.SY5PRCUN[1];
      if (OP0QW05.OP2PRCVF == "Y")
        OP0QM008.OP2PRCVF[OPASUB] = "*";
      else
        OP0QM008.OP2PRCVF[OPASUB] = " ";
      end
    end
     /* map sub set up on deleted products so that*/
     /* the map sub matches the table sub at this time*/
    OPAREC.OPASUB = OPAREC.OPASUB + 1; /* map index*/
    OPAREC.OPASUB1 = OPAREC.OPASUB1 + 1; /* table index*/
  end

   /* CANADA 09/08/95*/

  if (OP0QW01.XCTCD == "CANA") /* CANA This is a Canadian user*/
    OP0QM008.ZFC-CRCY-CD[1] = OP0QW01.ZFC-CRCY-CD; /* CANA*/
    OP0QM008.ZFC-CRCY-CD[2] = OP0QW01.ZFC-CRCY-CD; /* CANA*/
  end /* CANA*/

   /* *************************************************************/
end // end OP0Q075

// converse replace prod map
Function OP0Q080()



      /* *********************************************************/
      /* * this process converses the replace prod map and      **/
      /* * processes the data.                                  **/
      /* *********************************************************/



      /* init error diag areas*/

  TA1REC.TA1MAP = "OP0QM008"; /* current map name*/
  TA1REC.TA1LOCAT[1] = "OP0Q080 "; /* process name*/


      /* set screen to be erased*/

  converseLib.clearScreen();
   /* screen erase*/


      /* force segmented converse execution mode*/

  converseVar.segmentedMode = 1; /* force segmented execution mode*/



   /* *************************************************************/
  converse OP0QM008 ;
   /* *************************************************************/



      /* clear fields after converse*/

  OPAREC.OPAERR = "N"; /* clear err flag*/



      /* check and process valid aid key requests*/

      /* enter - continue processing*/
        /* pf3 - branch to order type screen*/
        /* pf12- edit only*/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
     /* ** next sentence ** continue processing ***/
  else
    if (converseVar.eventKey is pf3) /* check for prod status screen*/
      exit stack;
    else
      converseLib.validationFailed(008); /* invalid key pressed*/
      OPAREC.OPAERR = "Y"; /* set err flag*/
      exit stack;
    end
  end


      /* control edit process*/

  OP0QS81(); /* edit control*/


      /* if error or pf12 (edit only)*/

  if (OPAREC.OPAERR == "Y" /* error*/
   || converseVar.eventKey is pf12) /* edit only*/
    exit stack; /* branch to flow*/
  end


      /* determine if any price by size requests*/

  OP0QS85(); /* determine if price by size*/



   /* *************************************************************/
end // end OP0Q080

// init prc sz replace map
Function OP0Q085()



     /* **********************************************************/
     /* * this process initializes the replace prc sz screen    **/
     /* **********************************************************/


  TA1REC.TA1LOCAT[1] = "OP0Q085 "; /* process name*/


      /* set revision number of application*/
      /* initialize map fields*/

  converseLib.clearScreen();
  set OP0QM009 initial; /* erase screen option*/
  OP0QM009.OPMRVN = 01;
  OP0QM009.OPMDT = VGVar.currentShortGregorianDate; /* current date*/


      /* build price by size screen*/

  OP0QS8A(); /* format price by size screen*/



   /* *************************************************************/
end // end OP0Q085

// converse prc sz replace map
Function OP0Q090()



      /* *********************************************************/
      /* * this process converses the replace prod map and      **/
      /* * processes the data.                                  **/
      /* *********************************************************/



      /* init error diag areas*/

  TA1REC.TA1MAP = "OP0QM009"; /* current map name*/
  TA1REC.TA1LOCAT[1] = "OP0Q090 "; /* process name*/


      /* force segmented converse execution mode*/

  converseVar.segmentedMode = 1; /* force segmented execution mode*/



   /* *************************************************************/
  converse OP0QM009 ;
   /* *************************************************************/



      /* clear fields after converse*/

  OPAREC.OPAERR = "N"; /* clear err flag*/

  OP0QS90(); /* set mdt's on if modified*/



      /* check and process valid aid key requests*/

      /* enter - continue processing*/
        /* pf12- edit only*/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
     /* ** next sentence ** continue processing ***/
  else
    converseLib.validationFailed(008); /* invalid key pressed*/
    OPAREC.OPAERR = "Y"; /* set err flag*/
    exit stack;
  end


      /* control edit process*/

  if (COMMAREA.CAALVL[1] == "Y") /* update mode*/
    OP0QS91(); /* edit control*/
  end


      /* reset price vary flag in reprice map*/

  if (OP0QW04.OP2PRCVF[OPASUB1] == "Y")
    OP0QM008.OP2PRCVF[OPASUB] = "*";
  else
    OP0QM008.OP2PRCVF[OPASUB] = " ";
  end



   /* *************************************************************/
end // end OP0Q090

// init reprice prod map
Function OP0Q095()



     /* **********************************************************/
     /* * this process initializes the reprice product screen   **/
     /* **********************************************************/


  TA1REC.TA1LOCAT[1] = "OP0Q095 "; /* process name*/


      /* set revision number of application*/
      /* initialize map fields*/

  converseLib.clearScreen();
  set OP0QM010 initial; /* erase screen option*/
  OP0QM010.OPMRVN = 01;
  OP0QM010.OPMDT = VGVar.currentShortGregorianDate; /* current date*/


      /* unprotect fields if authorized*/

  OPAREC.OPASUB = 1; /* map index*/
  while (OPAREC.OPASUB <= 54) /* not end of map table*/
    if (COMMAREA.CAALVL[1] == "Y")
      set OP0QM010.SY1STNBR[OPASUB] normal;
      set OP0QM010.SY2CLRID[OPASUB] normal;
      set OP0QM010.XDMCD[OPASUB] normal;
      set OP0QM010.SY5PRCUN[OPASUB] normal;
    end
    set OP0QM010.OP2PRCVF[OPASUB] normal; /* updatable for non-upd review*/
    OPAREC.OPASUB = OPAREC.OPASUB + 1; /* map index*/
  end


      /* load previously entered fields if review mode*/

  OPAREC.OPASUB = 1; /* map index*/
  OPAREC.OPASUB1 = 1; /* table index*/
  while (OPAREC.OPASUB <= 54  /* not end of map table*/
   && OPAREC.OPASUB1 <= 54 /* not end of table*/
   && OPAREC.OPASUB1 <= OP0QW02.OP0QWPRD) /* not end of curr table*/
    if (OP0QW02.SY1STNBR[OPASUB1] > " " /* exists*/
     && OP0QW02.OP0QWACT[OPASUB1] != "D") /* not delete*/
      OP0QM010.SY1STNBR[OPASUB] = OP0QW02.SY1STNBR[OPASUB1];
      OP0QM010.SY2CLRID[OPASUB] = OP0QW02.SY2CLRID[OPASUB1];
      OP0QM010.XDMCD[OPASUB] = OP0QW02.XDMCD[OPASUB1];
      OP0QW05.OP0QWPAR = OP0QW04.OP0QWPAR[OPASUB1];
      OP0QM010.SY5PRCUN[OPASUB] = OP0QW05.SY5PRCUN[1];
      if (OP0QW05.OP2PRCVF == "Y")
        OP0QM010.OP2PRCVF[OPASUB] = "*";
      else
        OP0QM010.OP2PRCVF[OPASUB] = " ";
      end
    end
     /* map sub set up on deleted products so that*/
     /* the map sub matches the table sub at this time*/
    OPAREC.OPASUB = OPAREC.OPASUB + 1; /* map index*/
    OPAREC.OPASUB1 = OPAREC.OPASUB1 + 1; /* table index*/
  end

   /* CANADA 09/22/95*/

  if (OP0QW01.XCTCD == "CANA") /* CANA This is a Canadian request*/
    OP0QM010.ZFC-CRCY-CD = OP0QW01.ZFC-CRCY-CD; /* CANA currency code*/
  else /* CANA*/
    OP0QM010.ZFC-CRCY-CD = "   "; /* CANA currency code*/
  end /* CANA*/

end // end OP0Q095

// converse reprice prod map
Function OP0Q100()



      /* *********************************************************/
      /* * this process converses the reprice prod map and      **/
      /* * processes the data.                                  **/
      /* *********************************************************/



      /* init error diag areas*/

  TA1REC.TA1MAP = "OP0QM010"; /* current map name*/
  TA1REC.TA1LOCAT[1] = "OP0Q100 "; /* process name*/



      /* set screen to be erased*/

  converseLib.clearScreen();
   /* screen erase*/


  OPAREC.OPASUB1 = 54;
  while (OPAREC.OPASUB1 >= 1)
    if (OP0QM010.SY1STNBR[OPASUB1] > " "
     && OP0QM010.SY5PRCUN[OPASUB1] == 0)
      set OP0QM010.SY5PRCUN[OPASUB1] bold;
      if (OPAREC.OPAERR != "Y")
        converseLib.validationFailed(322); /* product price will be set to zero*/
      end
    end
    OPAREC.OPASUB1 = OPAREC.OPASUB1 - 1;
  end

      /* force segmented converse execution mode*/

  converseVar.segmentedMode = 1; /* force segmented execution mode*/



   /* *************************************************************/
  converse OP0QM010 ;
   /* *************************************************************/



      /* clear fields after converse*/

  OPAREC.OPAERR = "N"; /* clear err flag*/

  OP0QSA0(); /* set mdt's on if modified*/



      /* check and process valid aid key requests*/

      /* enter - continue processing*/
        /* pf3 - branch to order type screen*/
        /* pf12- edit only*/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
     /* ** next sentence ** continue processing ***/
  else
    if (converseVar.eventKey is pf3) /* check for prod status screen*/
      exit stack;
    else
      converseLib.validationFailed(008); /* invalid key pressed*/
      OPAREC.OPAERR = "Y"; /* set err flag*/
      exit stack;
    end
  end


      /* control edit process*/

  OP0QSA1(); /* edit control*/


      /* if error or pf12 (edit only)*/

  if (OPAREC.OPAERR == "Y" /* error*/
   || converseVar.eventKey is pf12) /* edit only*/
    exit stack; /* branch to flow*/
  end


      /* determine if any price by size requests*/

  OP0QSA5(); /* determine if price by size*/



   /* *************************************************************/
end // end OP0Q100

// init prc sz reprice map
Function OP0Q105()



     /* **********************************************************/
     /* * this process initializes the replace prc sz screen    **/
     /* **********************************************************/


  TA1REC.TA1LOCAT[1] = "OP0Q105 "; /* process name*/


      /* set revision number of application*/
      /* initialize map fields*/

  converseLib.clearScreen();
  set OP0QM011 initial; /* erase screen option*/
  OP0QM011.OPMRVN = 01;
  OP0QM011.OPMDT = VGVar.currentShortGregorianDate; /* current date*/


      /* build price by size screen*/

  OP0QSAA(); /* format price by size screen*/



   /* *************************************************************/
end // end OP0Q105

// converse prc sz reprice map
Function OP0Q110()



      /* *********************************************************/
      /* * this process converses the reprice prod map and      **/
      /* * processes the data.                                  **/
      /* *********************************************************/



      /* init error diag areas*/

  TA1REC.TA1MAP = "OP0QM011"; /* current map name*/
  TA1REC.TA1LOCAT[1] = "OP0Q110 "; /* process name*/


      /* force segmented converse execution mode*/

  converseVar.segmentedMode = 1; /* force segmented execution mode*/



   /* *************************************************************/
  converse OP0QM011 ;
   /* *************************************************************/



      /* clear fields after converse*/

  OPAREC.OPAERR = "N"; /* clear err flag*/

  OP0QSB0(); /* set mdt's on if modified*/



      /* check and process valid aid key requests*/

      /* enter - continue processing*/
        /* pf12- edit only*/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
     /* ** next sentence ** continue processing ***/
  else
    converseLib.validationFailed(008); /* invalid key pressed*/
    OPAREC.OPAERR = "Y"; /* set err flag*/
    exit stack;
  end


      /* control edit process*/

  if (COMMAREA.CAALVL[1] == "Y") /* update mode*/
    OP0QSB1(); /* edit control*/
  end


      /* reset price vary flag in reprice map*/

  if (OP0QW04.OP2PRCVF[OPASUB1] == "Y")
    OP0QM010.OP2PRCVF[OPASUB] = "*";
  else
    OP0QM010.OP2PRCVF[OPASUB] = " ";
  end



   /* *************************************************************/
end // end OP0Q110

// init 1 w/h model map
Function OP0Q115()



     /* **********************************************************/
     /* * this process initializes the 1 w/h model screen       **/
     /* **********************************************************/


  TA1REC.TA1LOCAT[1] = "OP0Q115 "; /* process name*/


      /* set revision number of application*/
      /* initialize map fields*/

  converseLib.clearScreen();
  set OP0QM012 initial; /* erase screen option*/
  OP0QM012.OPMRVN = 01;
  OP0QM012.OPMDT = VGVar.currentShortGregorianDate; /* current date*/


      /* init map defaults if updatable*/

  if (COMMAREA.CAALVL[1] == "Y") /* update*/
    OPAREC.OPASUB = 1; /* map index*/
    while (OPAREC.OPASUB <= 72) /* not end of map table*/
      set OP0QM012.SY1STNBR[OPASUB] normal;
      set OP0QM012.SY2CLRID[OPASUB] normal;
      set OP0QM012.XDMCD[OPASUB] normal;
      set OP0QM012.XWHCD[OPASUB] normal;
      OPAREC.OPASUB = OPAREC.OPASUB + 1; /* map index*/
    end
  end


      /* load previously entered fields if review mode*/

  OPAREC.OPASUB = 1; /* map index*/
  OPAREC.OPASUB1 = 1; /* table index*/
  while (OPAREC.OPASUB <= 72  /* not end of map table*/
   && OPAREC.OPASUB1 <= 72 /* not end of table*/
   && OPAREC.OPASUB1 <= OP0QW02.OP0QWPRD) /* not end of curr table*/
    if (OP0QW02.SY1STNBR[OPASUB1] > " " /* exists*/
     && OP0QW02.OP0QWACT[OPASUB1] != "D") /* not delete*/
      OP0QM012.SY1STNBR[OPASUB] = OP0QW02.SY1STNBR[OPASUB1];
      OP0QM012.SY2CLRID[OPASUB] = OP0QW02.SY2CLRID[OPASUB1];
      OP0QM012.XDMCD[OPASUB] = OP0QW02.XDMCD[OPASUB1];
      OP0QM012.XWHCD[OPASUB] = OP0QW02.XWHCD[OPASUB1];
    end
     /* map sub set up on deleted products so that*/
     /* the map sub matches the table sub at this time*/
    OPAREC.OPASUB = OPAREC.OPASUB + 1; /* map index*/
    OPAREC.OPASUB1 = OPAREC.OPASUB1 + 1; /* table index*/
  end



   /* *************************************************************/
end // end OP0Q115

// converse 1 w/h model map
Function OP0Q120()



      /* *********************************************************/
      /* * this process converses the 1 w/h model map and       **/
      /* * processes the data.                                  **/
      /* *********************************************************/



      /* init error diag areas*/

  TA1REC.TA1MAP = "OP0QM012"; /* current map name*/
  TA1REC.TA1LOCAT[1] = "OP0Q120 "; /* process name*/


      /* force segmented converse execution mode*/

  converseVar.segmentedMode = 1; /* force segmented execution mode*/



   /* *************************************************************/
  converse OP0QM012 ;
   /* *************************************************************/



      /* clear fields after converse*/

  OPAREC.OPAERR = "N"; /* clear err flag*/

  OP0QSC0(); /* set mdt's on if modified*/



      /* check and process valid aid key requests*/

      /* enter - continue processing*/
        /* pf3 - branch to order type screen*/
        /* pf12- edit only*/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
     /* ** next sentence ** continue processing ***/
  else
    if (converseVar.eventKey is pf3) /* check for order type screen*/
      exit stack;
    else
      converseLib.validationFailed(008); /* invalid key pressed*/
      OPAREC.OPAERR = "Y"; /* set err flag*/
      exit stack;
    end
  end


      /* control edit process*/

  OP0QSC1(); /* edit control*/
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* commit data base*/



   /* *************************************************************/
end // end OP0Q120

// init warehouse map
Function OP0Q125()


     /* **********************************************************/
     /* * this process initializes the warehouse screen         **/
     /* **********************************************************/


  TA1REC.TA1LOCAT[1] = "OP0Q125 "; /* process name*/


      /* set revision number of application*/
      /* initialize map fields*/

  converseLib.clearScreen();
  set OP0QM013 initial; /* erase screen option*/
  OP0QM013.OPMRVN = 01;
  OP0QM013.OPMDT = VGVar.currentShortGregorianDate; /* current date*/


      /* init request id and desc fields*/

  OP0QM013.OPDRQID = OPDREC.OPDRQID;
  OP0QM013.OPDRQDSC = OPDREC.OPDRQDSC;


      /* build warehouse display*/

   /* CANADA 09/09/95*/

  OPAREC.OPASUB = 1; /* table index*/
  OPAREC.OPASUB2 = 1; /* map index*/
  while (XWHTBL.XWHCD[OPASUB] != "99" /* not end of table*/
   && OPASUB2 <= 20) /* sub less than 20*/
    if (XWHTBL.XWHCD[OPASUB] != " ") /* not blank whsecd*/
      if (XWHTBL.XCTCD[OPASUB] != "CANA") /* CANA don't show Canadian whse's*/
        if (XWHTBL.XXXSTAT[OPASUB] == "A") /* active status*/
          if (OPDREC.XGPCD == XWHTBL.XGPCD1[OPASUB]
           || OPDREC.XGPCD == XWHTBL.XGPCD2[OPASUB]
           || OPDREC.XGPCD == XWHTBL.XGPCD3[OPASUB]
           || OPDREC.XGPCD == XWHTBL.XGPCD4[OPASUB]
           || OPDREC.XGPCD == XWHTBL.XGPCD5[OPASUB]
           || OPDREC.XGPCD == XWHTBL.XGPCD6[OPASUB]
           || OPDREC.XGPCD == XWHTBL.XGPCD7[OPASUB]
           || OPDREC.XGPCD == XWHTBL.XGPCD8[OPASUB])

            OP0QM013.XWHCD[OPASUB2] = XWHTBL.XWHCD[OPASUB];
            OP0QM013.XWHNM[OPASUB2] = XWHTBL.XWHNM[OPASUB];

              /* check update security*/

            if (COMMAREA.CAALVL[1] == "Y")
              set OP0QM013.OP0QMSEL[OPASUB2] normal;
            else
              set OP0QM013.OP0QMSEL[OPASUB2] protect;
            end


              /* flag entries if previously entered*/

            if (OPDREC.OPDXWHCD > " ") /* at least one code*/
              OPAREC.OPASUB1 = 1; /* init sub*/
              while (OPAREC.OPASUB1 <= 3
               && OPDREC.XWHCD[OPASUB1] > " ")
                if (OP0QM013.XWHCD[OPASUB2] == OPDREC.XWHCD[OPASUB1])
                  OP0QM013.OP0QMSEL[OPASUB2] = "X";
                  OPAREC.OPASUB1 = 99; /* terminate loop*/
                end
                OPAREC.OPASUB1 = OPAREC.OPASUB1 + 1; /* table index*/
              end
            end

            OPAREC.OPASUB2 = OPAREC.OPASUB2 + 1;
          end
        end
      end
    end /* CANA*/
    OPAREC.OPASUB = OPAREC.OPASUB + 1;
  end

  if (XWHTBL.XWHCD[OPASUB] != "99" /* not end of table*/
   && OPASUB2 > 20)                /* sub less than 20*/
    OPAREC.OPAERR = "Y"; /* ERROR FOUND*/
    converseLib.validationFailed(893); /* MORE WHRSE QUALIFY THAN ROOM*/
    return;
  end



   /* *************************************************************/

end // end OP0Q125

// converse warehouse map
Function OP0Q130()



      /* *********************************************************/
      /* * this process converses the warehouse map and         **/
      /* * processes the data.                                  **/
      /* *********************************************************/



      /* init error diag areas*/

  TA1REC.TA1MAP = "OP0QM013"; /* current map name*/
  TA1REC.TA1LOCAT[1] = "OP0Q130 "; /* process name*/

      /* force segmented converse execution mode*/

  converseVar.segmentedMode = 1; /* force segmented execution mode*/



   /* *************************************************************/
  converse OP0QM013 ;
   /* *************************************************************/



      /* clear fields after converse*/

  OPAREC.OPAERR = "N"; /* clear err flag*/


  OP0QSD1(); /* set mdt's on if modified*/


      /* check and process valid aid key requests*/

      /* enter - continue processing*/
        /* pf3 - branch to sales office screen*/
        /* pf12- edit only*/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
     /* ** next sentence ** continue processing ***/
  else
    if (converseVar.eventKey is pf3) /* sales office screen*/
      exit stack;
    else
      converseLib.validationFailed(008); /* invalid key pressed*/
      OPAREC.OPAERR = "Y"; /* set err flag*/
      exit stack;
    end
  end


      /* control edit process*/


  OP0QSD2(); /* edit screen*/




end // end OP0Q130

// INIT SALES PROGRAM MAP
Function OP0Q135()


     /* **********************************************************/
     /* * this process initializes the sales program screen     **/
     /* **********************************************************/


  TA1REC.TA1LOCAT[1] = "OP0Q135 "; /* process name*/


      /* set revision number of application*/
      /* initialize map fields*/

  converseLib.clearScreen();
  set OP0QM014 initial; /* erase screen option*/
  OP0QM014.OPMRVN = 01;
  OP0QM014.OPMDT = VGVar.currentShortGregorianDate; /* current date*/


      /* init request id and desc fields*/

  OP0QM014.OPDRQID = OPDREC.OPDRQID;
  OP0QM014.OPDRQDSC = OPDREC.OPDRQDSC;



              /* check update security*/

  if (COMMAREA.CAALVL[1] == "Y")
    set OP0QM014.OP-SPGM-RSTR-IND normal;
  else
    set OP0QM014.OP-SPGM-RSTR-IND protect;
  end

   /* move sales programs to map*/

  OPAREC.OPASUB1 = 1; /* init sub*/
  while (OPAREC.OPASUB1 <= 5)
    OP0QM014.SP1ID[OPASUB1] = OPDREC.SP1ID[OPASUB1];
    OPAREC.OPASUB1 = OPAREC.OPASUB1 + 1; /* table index*/
  end

     /* sales program restricted ind*/

  OP0QM014.OP-SPGM-RSTR-IND = OPDREC.OP-SPGM-RSTR-IND;

  OP0QM014.OP-REPRC-OVRD-FL = OPDREC.OP-REPRC-OVRD-FL;
                                                  /* reprice overrides flag*/

  if (OPDREC.OP-REPRC-OVRD-FL == " ") /* if none entered*/
    OP0QM014.OP-REPRC-OVRD-FL = "N"; /* set default*/
  end

   /* *************************************************************/

end // end OP0Q135

// converse sales program map
Function OP0Q140()



      /* *********************************************************/
      /* * this process converses the warehouse map and         **/
      /* * processes the data.                                  **/
      /* *********************************************************/



      /* init error diag areas*/

  TA1REC.TA1MAP = "OP0QM014"; /* current map name*/
  TA1REC.TA1LOCAT[1] = "OP0Q140 "; /* process name*/

      /* force segmented converse execution mode*/

  converseVar.segmentedMode = 1; /* force segmented execution mode*/



   /* *************************************************************/
  converse OP0QM014 ;
   /* *************************************************************/



      /* clear fields after converse*/

  OPAREC.OPAERR = "N"; /* clear err flag*/


                                   /* set mdt's on if modified*/


      /* check and process valid aid key requests*/

      /* enter - continue processing*/
        /* pf3 - branch to sales office screen*/
        /* pf12- edit only*/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
     /* ** next sentence ** continue processing ***/
  else
    if (converseVar.eventKey is pf3) /* order type screen*/
      exit stack;
    else
      converseLib.validationFailed(008); /* invalid key pressed*/
      OPAREC.OPAERR = "Y"; /* set err flag*/
      exit stack;
    end
  end


  OP0QSE1(); /* set mdts*/

                             /* edit screen*/
  OP0QSE2();



end // end OP0Q140

// converse cancel prod map
Function OP0Q160()

      /* *********************************************************/
      /* * this process converses the prod subord map and       **/
      /* * processes the data.                                  **/
      /* *********************************************************/



      /* init error diag areas*/

  TA1REC.TA1MAP = "OP0QM016"; /* current map name*/
  TA1REC.TA1LOCAT[1] = "OP0Q160 "; /* process name*/

      /* force segmented converse execution mode*/

  converseVar.segmentedMode = 1; /* force segmented execution mode*/

  converse OP0QM016 ;
      /* clear fields after converse*/

  OPAREC.OPAERR = "N"; /* clear err flag*/

  OP0QS-SUBORD-MDT(); /* set mdt's on if modified*/

      /* check and process valid aid key requests*/

      /* enter - continue processing*/
        /* pf3 - branch to order type screen*/
        /* pf12- edit only*/
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
     /* ** next sentence ** continue processing ***/
  else
    if (converseVar.eventKey is pf3) /* check for order type screen*/
      exit stack;
    else
      converseLib.validationFailed(008); /* invalid key pressed*/
      OPAREC.OPAERR = "Y"; /* set err flag*/
      exit stack;
    end
  end
      /* control edit process*/

  OP0QS-SUBORD-CTRL(); /* edit control*/

end // end OP0Q160

// converse accept request
Function OP0Q190()



      /* *********************************************************/
      /* * this process converses the order type map and        **/
      /* * processes the data.                                  **/
      /* *********************************************************/



      /* init error diag areas*/

  TA1REC.TA1MAP = "OP0QM015"; /* current map name*/
  TA1REC.TA1LOCAT[1] = "OP0Q190 "; /* process name*/


      /* set revision number of application*/
      /* initialize map fields*/

  converseLib.clearScreen();
  set OP0QM015 initial; /* erase screen option*/
  OP0QM015.OPMRVN = 01;
  OP0QM015.OPMDT = VGVar.currentShortGregorianDate; /* current date*/


      /* init request id and desc fields*/

  OP0QM015.OPDRQID = OPDREC.OPDRQID; /* request id*/
  OP0QM015.OPDRQDSC = OPDREC.OPDRQDSC; /* request desc*/
  OP0QM015.OP0QWNPR = OP0QW02.OP0QWNPR; /* num products*/
  OP0QSJB(); /* validate number of products*/


      /* if updatable, enable pa2 key*/

  if (COMMAREA.CAALVL[1] == "Y") /* updatable*/
    set OP0QM015.OP0QMCAN skip;
    set OP0QM015.OP0QMCLT skip;
    set OP0QM015.OP0QMPA2 skip;
  end


      /* if review and updatable, enable pf24 key*/

  if (COMMAREA.CAALVL[1] == "Y" /* updatable*/
   && OP0QW01.OP0QWRVF == "Y")  /* review mode*/
    set OP0QM015.OP0QMREJ skip;
    set OP0QM015.OP0QMRLT skip;
    set OP0QM015.OP0QMP24 skip;
  end


      /* force segmented converse execution mode*/

  converseVar.segmentedMode = 1; /* force segmented execution mode*/



   /* *************************************************************/
  converse OP0QM015 ;
   /* *************************************************************/



      /* clear fields after converse*/

  OPAREC.OPAERR = "N"; /* clear err flag*/


      /* check and process valid aid key requests*/

      /* enter - continue processing*/
        /* pf3 - branch to product screen*/
        /* pa2 - cancel request (update mode only)*/
        /* pf24- reject updates (review  with update mode only)*/

  if (converseVar.eventKey is enter)
     /* ** next sentence ** continue processing ***/
  else
    if (converseVar.eventKey is pf3) /* check for prod status screen*/
      exit stack;
    else
      if (converseVar.eventKey is pa2 /* check for cancel request*/
       && COMMAREA.CAALVL[1] == "Y")  /* and update mode*/
         /* ** next sentence ***/
      else
        if (converseVar.eventKey is pf24 /* check for update reject*/
         && OP0QW01.OP0QWRVF == "Y"      /* and review mode*/
         && COMMAREA.CAALVL[1] == "Y")   /* and update mode*/
           /* ** next sentence ***/
        else
          converseLib.validationFailed(008); /* invalid key pressed*/
          OPAREC.OPAERR = "Y"; /* set err flag*/
          exit stack;
        end
      end
    end
  end


      /* control pa2 cancel processing*/
      /* actual deletes done only on review mode as*/
      /* entry mode has not put anything to the data base yet*/

  if (converseVar.eventKey is pa2)
    OP0QW01.OP0QWREJ = "N"; /* reset reject flag*/
    if (OP0QW01.OP0QWCAN == "Y") /* cancel set*/
      if (OP0QW01.OP0QWRVF == "Y") /* delete on review mode*/
        OPEREC.OPDRQID = OPDREC.OPDRQID; /* load key*/
        OP0QSZQ(); /* delete products*/
        OP0QSZF(); /* delete request*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* commit data base*/
      end
      OP0QSJA(); /* clear recs after update*/
    else
      OP0QW01.OP0QWCAN = "Y"; /* set reject flag*/
      converseLib.validationFailed(259); /* press pa2 to confirm cancel*/
      OPAREC.OPAERR = "Y"; /* set error flag*/
    end
    exit stack;
    OP0QW01.OP0QWCAN = "N"; /* reset cancel flag*/
  else
    OP0QW01.OP0QWCAN = "N"; /* reset cancel flag*/
  end


      /* control pf24 reject processing (review mode assumed)*/

  if (converseVar.eventKey is pf24)
    OP0QW01.OP0QWCAN = "N"; /* reset cancel flag*/
    if (OP0QW01.OP0QWREJ == "Y") /* reject set*/
      OP0QSJA(); /* clear recs after update*/
    else
      OP0QW01.OP0QWREJ = "Y"; /* set reject flag*/
      converseLib.validationFailed(260); /* press pa2 to confirm reject*/
      OPAREC.OPAERR = "Y"; /* set error flag*/
    end
    exit stack;
    OP0QW01.OP0QWREJ = "N"; /* reset reject flag*/
  else
    OP0QW01.OP0QWREJ = "N"; /* reset reject flag*/
  end


      /* control data base update process*/

  OP0QSJ1(); /* update control*/
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* commit data base*/


      /* clear records for next cycle*/

  OP0QSJA(); /* clear recs after update*/



   /* *************************************************************/
end // end OP0Q190

// converse maint reason codes
Function OP0Q200()




     /* **********************************************************/
     /* * this process initializes the maint reason code screen **/
     /* **********************************************************/


  TA1REC.TA1LOCAT[1] = "OP0Q200 "; /* process name*/


      /* set revision number of application*/
      /* initialize map fields*/

  converseLib.clearScreen();
  set OP0QM020 initial; /* erase screen option*/
  OP0QM020.OPMRVN = 01;
  OP0QM020.OPMDT = VGVar.currentShortGregorianDate; /* current date*/


     /* build help screen from xom table*/

  OPAREC.OPASUB = 1;
  sysVar.arrayIndex = 1;

  while (XOMTBL.XOMCD[sysVar.arrayIndex] != "99"
   && OPAREC.OPASUB <= 54) /* end of map*/
    if (XOMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      OP0QM020.XOMCD[OPASUB] = XOMTBL.XOMCD[sysVar.arrayIndex];
      OP0QM020.XOMDESC[OPASUB] = XOMTBL.XOMDESC[sysVar.arrayIndex];
      OP0QM020.XOMCANCF[OPASUB] = XOMTBL.XOMCANCF[sysVar.arrayIndex];
    end
    OPAREC.OPASUB = OPAREC.OPASUB + 1;
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end



   /* *************************************************************/
  converse OP0QM020 ;
   /* *************************************************************/

      /* no after stage code for this process*/



   /* *************************************************************/
end // end OP0Q200

// vortyp01 close set
Function OP0QCSP()

      /* *********************************************************/
      /* * this statement group performs a close set for        **/
      /* * the dspgm.vortyp01 table.                            **/
      /* *********************************************************/

      /* issue close set request*/

  call "IO0080" ("CS", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for close set*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VORTYP01"; /* table view*/
    TA1REC.TA1TBLKE = SP2REC.SP2KEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0QCSP "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0080  "; /* i/o mod name*/
    OP0QSZZ(); /* abort*/
  end



   /* *************************************************************/
end // end OP0QCSP

// vortyp01 select next
Function OP0QNSP()

      /* *********************************************************/
      /* * this statement group performs a select next for      **/
      /* * the dspgm.vortyp01 table.                            **/
      /* *********************************************************/

      /* issue select next to get request*/

  call "IO0080" ("SN", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for select next*/

      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VORTYP01"; /* table view*/
    TA1REC.TA1TBLKE = SP2REC.SP2KEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0QNSP "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0080  "; /* i/o mod name*/
    OP0QSZZ(); /* abort*/
  end



   /* *************************************************************/
end // end OP0QNSP

// build xos screen for reprice
Function OP0QS-DISP-PRODSUB()



      /* *********************************************************/
      /* * build display of valid order (product) statuses for  **/
      /* * product subordering                                  **/
      /* *********************************************************/


  OPAREC.OPASUB = 1; /* map index*/
  OP0QM004.XOSCD[OPASUB] = "OP";
  OP0QS39(); /* get desc for xoscd*/


   /* *************************************************************/
end // end OP0QS-DISP-PRODSUB

// edit for product duplication
Function OP0QS-DUP-SUBORD()



    /* ***********************************************************/
    /* * edit to ensure that a product has not been duplicated  **/
    /* * on the request. checks the current screen against the  **/
    /* * rest of the table.                                     **/
    /* *                                                        **/
    /* * this statement group was changed to use the 'if in'    **/
    /* * feature of csp.  the subscript, ezetst, is incremented **/
    /* * after the first hit and starts at 'n' position to      **/
    /* * retrieve the second record.  this happens until the    **/
    /* * end of the array is reached and is much faster than    **/
    /* * moving each member of the table and then doing a       **/
    /* * compare. (Ref: CSP Ver. 3: Performance Characteristics **/
    /* * and Recommendations)                                   **/
    /* ***********************************************************/

   /* subscript use: ezetst = style array index (whole table)*/
                  /* opasub1 = style array index (screen image)*/
                  /* opasub2 = actual screen location(from s71)*/

      /* the following subscript calculations are used to check*/
      /* if a particular entry in the table is shown on the*/
      /* current screen.*/

      /* screen to tab-sub low = (scr-sub - 1) * 90 + 1*/

  OP0QW02.OP0QWSTL = OP0QW02.OP0QWSCR - 1; /* table index low*/
  OP0QW02.OP0QWSTL = OP0QW02.OP0QWSTL * 90; /* table index low*/
  OP0QW02.OP0QWSTL = OP0QW02.OP0QWSTL + 1; /* table index low*/

      /* screen to tab-sub hi  =  scr-sub * 90*/

  OP0QW02.OP0QWSTH = OP0QW02.OP0QWSCR * 90; /* table index high*/

  OPAREC.OPASUB1 = OP0QW02.OP0QWSTH; /* init screen max*/
  sysVar.arrayIndex = 1; /* set index for array in op0qw02*/

  while (OPAREC.OPASUB1 >= OP0QW02.OP0QWSTL) /* screen index*/
    if (OP0QW02.SY1STNBR[OPASUB1] > " " /* style exists*/
     && OP0QW02.OP0QWACT[OPASUB1] != "D") /* check for delete(screen)*/
      if (OP0QW02.SY1STNBR[OPASUB1] in OP0QW02.SY1STNBR from sysVar.arrayIndex)
        if (OP0QW02.SY2CLRID[sysVar.arrayIndex] == OP0QW02.SY2CLRID[OPASUB1]
         && OP0QW02.XDMCD[sysVar.arrayIndex] == OP0QW02.XDMCD[OPASUB1]
         && OP0QW02.OP0QWACT[sysVar.arrayIndex] != "D" /* check for delete(array)*/
         && sysVar.arrayIndex != OPAREC.OPASUB1)       /* make sure we didn't find ourself*/
          OPAREC.OPASUB2 = OPAREC.OPASUB1 - OP0QW02.OP0QWSTL;
          OPAREC.OPASUB2 = OPAREC.OPASUB2 + 1; /* calculate screen index*/
          set OP0QM016.SY1STNBR[OPASUB2] cursor, bold;
          set OP0QM016.SY2CLRID[OPASUB2] bold;
          set OP0QM016.XDMCD[OPASUB2] bold;
          OPAREC.OPAERR = "Y"; /* set error flag*/
          converseLib.validationFailed(268); /* product has already been used on request*/
          OPAREC.OPASUB1 = OPAREC.OPASUB1 - 1; /* decrement subscript*/
          sysVar.arrayIndex = 1; /* reset array index*/
        else
          sysVar.arrayIndex = sysVar.arrayIndex + 1; /* increment index*/
        end
      else
        OPAREC.OPASUB1 = OPAREC.OPASUB1 - 1; /* style wasn't found*/
        sysVar.arrayIndex = 1; /* reset array index*/
      end
    else
      OPAREC.OPASUB1 = OPAREC.OPASUB1 - 1; /* style was blank*/
      sysVar.arrayIndex = 1; /* reset array index*/
    end
  end



   /* *************************************************************/
end // end OP0QS-DUP-SUBORD

// validate product
Function OP0QS-EDIT-SUBORD()



      /* *********************************************************/
      /* * this statement group validates and saves the         **/
      /* * style/color/dim for the subordering screen           **/
      /* *********************************************************/


      /* tab-sub = (scr-sub - 1) * 90 + opasub*/
                                  /* (opasub = map index)*/

  OPAREC.OPASUB1 = OP0QW02.OP0QWSCR - 1; /* table index*/
  OPAREC.OPASUB1 = OPAREC.OPASUB1 * 90; /* table index*/
  OPAREC.OPASUB1 = OPAREC.OPASUB1 + OPAREC.OPASUB; /* table index*/


      /* style = color = dimension = spaces means: delete*/
        /* if review, then set delete status (prod on file)*/
          /* else*/
           /* then clear entry (not review = being entered)*/

  if (OP0QM016.SY1STNBR[OPASUB] == " " /* check for null style*/
   && OP0QM016.SY2CLRID[OPASUB] == " " /* check for null color*/
   && OP0QM016.XDMCD[OPASUB] == " ")   /* check for null dimension*/
    if (OP0QW02.SY1STNBR[OPASUB1] > " " /* entry exists*/
     && OP0QW02.OP0QWACT[OPASUB1] != "D") /* not delete flagged*/
      if (OP0QW02.OP0QWACT[OPASUB1] != "A") /* not add flagged*/
        OP0QW02.OP0QWACT[OPASUB1] = "D"; /* set delete*/
        OP0QW02.OP0QWDEL = OP0QW02.OP0QWDEL + 1; /* delete count*/
        OP0QW02.OP0QWNPR = OP0QW02.OP0QWNPR - 1; /* product count*/
        OP0QW01.OP0QWUPD = "Y"; /* set update flag*/
        OP0QW01.OP0QWUPP = "Y"; /* set update product flag*/
      else
        OP0QW02.OP0QWENT[OPASUB1] = " "; /* clear product entry*/
        OP0QW02.OP0QWNPR = OP0QW02.OP0QWNPR - 1; /* product count*/
      end
    end
    set OP0QM016.SY1STNBR[OPASUB] normal;
    set OP0QM016.SY2CLRID[OPASUB] normal;
    set OP0QM016.XDMCD[OPASUB] normal;
    return; /* get out*/
  end


      /* set color to '00 ' if null*/
      /* set dimension to '00' if null*/

  if (OP0QM016.SY2CLRID[OPASUB] == " ") /* check for null color*/
    OP0QM016.SY2CLRID[OPASUB] = "00 ";
  end

  if (OP0QM016.XDMCD[OPASUB] == " ") /* check for null dimension*/
    OP0QM016.XDMCD[OPASUB] = "00";
  end


      /* issue select unique to get product*/

  SYCREC.XGPCD = OPDREC.XGPCD; /* load key*/
  SYCREC.SY1STNBR = OP0QM016.SY1STNBR[OPASUB]; /* load key*/
  SYCREC.SY2CLRID = OP0QM016.SY2CLRID[OPASUB]; /* load key*/
  SYCREC.XDMCD = OP0QM016.XDMCD[OPASUB]; /* load key*/
  TA1REC.TA1LOCAT[2] = "OP0QS72 "; /* statement group*/
  OP0QSZV(); /* select unique*/

      /* if not found, then product number is invalid*/

   /* CANADA 09/11/95*/

  if (SQLCA.VAGen_SQLCODE == 0) /* CANA product found*/
    if (OP0QW01.XCTCD == "CANA") /* CANA Canadian user id*/
      TA1REC.TA1PGMNM = "OP0Q"; /* CANA program name*/
      TA1REC.TA1LOC = "OP0QS72"; /* CANA statement group*/
      set WSY2000 empty;
      WSY2000.XDR-PROD-REG-CD = "05";
      OP0Q-CALL-SY2000(); /* CANA call SY2000 to validate Canadian*/
      if (WSY2000.WSY2000-RETURN-CODE == 0) /* CANA row found*/
  /* continue*/
      else /* CANA*/
        if (WSY2000.WSY2000-RETURN-CODE == 02) /* CANA row not found*/
          converseLib.validationFailed(911); /* CANA product doesn't exist for rgn*/
          OPAREC.OPAERR = "Y"; /* CANA set error flag*/
          OP0QW01.OP0QWERR = "Y"; /* CANA set error flag*/
          set OP0QM016.SY1STNBR[OPASUB] cursor, modified, bold; /* CANA*/
          set OP0QM016.SY2CLRID[OPASUB] modified, bold; /* CANA*/
          set OP0QM016.XDMCD[OPASUB] modified, bold; /* CANA*/
          return; /* CANA*/
        else /* CANA fatal error or database busy*/
          TA1REC.TA1DBASE = "DPROD"; /* CANA database name*/
          TA1REC.TA1TBLVU = "VSYREG02"; /* CANA table view*/
          TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* CANA key value*/
          TA1REC.TA1LOCAT[3] = "OP0QS72"; /* CANA statement group*/
          TA1REC.TA1LOCAT[4] = "SY2000"; /* CANA i/o mod name*/
          OP0QSZZ(); /* CANA abort*/
        end
      end
    else
      if (OPDREC.XGPCD == "03")
        if (COMMAREA.XDVCD == "02" /* userid assigned to europe*/
         || COMMAREA.XDVCD == "03") /* userid assigned to asia*/
         /* continue processing*/
        else
          TA1REC.TA1PGMNM = "OP0Q"; /* program name*/
          TA1REC.TA1LOC = "OP0QS-EDIT-SUBORD"; /* statement group*/
          set WSY2000 empty;
          WSY2000.XDR-PROD-REG-CD = "01";
          OP0Q-CALL-SY2000(); /* call SY2000 to validate*/
          if (WSY2000.WSY2000-RETURN-CODE == 0) /* row found*/
  /* continue*/
          else
            if (WSY2000.WSY2000-RETURN-CODE == 02) /* row not found*/
              converseLib.validationFailed(911); /* product doesn't exist for rgn*/
              OPAREC.OPAERR = "Y"; /* set error flag*/
              OP0QW01.OP0QWERR = "Y"; /* set error flag*/
              set OP0QM016.SY1STNBR[OPASUB] cursor, modified, bold;
              set OP0QM016.SY2CLRID[OPASUB] modified, bold;
              set OP0QM016.XDMCD[OPASUB] modified, bold;
              return;
            else /* fatal error or database busy*/
              TA1REC.TA1DBASE = "DPROD"; /* database name*/
              TA1REC.TA1TBLVU = "VSYREG02"; /* table view*/
              TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* key value*/
              TA1REC.TA1LOCAT[3] = "OP0QS72"; /* statement group*/
              TA1REC.TA1LOCAT[4] = "SY2000"; /* i/o mod name*/
              OP0QSZZ(); /* abort*/
            end
          end
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
      converseLib.validationFailed(257); /* product does not exist*/
      OPAREC.OPAERR = "Y"; /* set error flag*/
      set OP0QM016.SY1STNBR[OPASUB] cursor, modified, bold;
      set OP0QM016.SY2CLRID[OPASUB] modified, bold;
      set OP0QM016.XDMCD[OPASUB] modified, bold;
      return;
    end
  end

      /* if table entry blank, then add the product*/

  if (OP0QW02.SY1STNBR[OPASUB1] == " ")
    OP0QW02.OP0QWACT[OPASUB1] = "A"; /* action add*/
    OP0QW02.SY1STNBR[OPASUB1] = OP0QM016.SY1STNBR[OPASUB];
    OP0QW02.SY2CLRID[OPASUB1] = OP0QM016.SY2CLRID[OPASUB];
    OP0QW02.XDMCD[OPASUB1] = OP0QM016.XDMCD[OPASUB];
    OP0QW02.OP0QWNPR = OP0QW02.OP0QWNPR + 1; /* product count*/
    OP0QW01.OP0QWUPD = "Y"; /* set update flag*/
    OP0QW01.OP0QWUPP = "Y"; /* set update product flag*/
    OP0QW01.OP0QWMPR = "Y"; /* set prod on curr scr flag*/
    set OP0QM016.SY1STNBR[OPASUB] normal;
    set OP0QM016.SY2CLRID[OPASUB] normal;
    set OP0QM016.XDMCD[OPASUB] normal;
    if (OPAREC.OPASUB1 > OP0QW02.OP0QWPRD) /* if gt max*/
      OP0QW02.OP0QWPRD = OPAREC.OPASUB1; /* set new max*/
    end
    return; /* get out*/
  end

      /* table entry not blank, see if product is the same,*/
      /* otherwise error since you can't replace an entry*/
      /* without a delete in a previous pass.*/

  if (OP0QM016.SY1STNBR[OPASUB] == OP0QW02.SY1STNBR[OPASUB1] /* style*/
   && OP0QM016.SY2CLRID[OPASUB] == OP0QW02.SY2CLRID[OPASUB1] /* color*/
   && OP0QM016.XDMCD[OPASUB] == OP0QW02.XDMCD[OPASUB1])      /* dimension*/
    if (OP0QW02.OP0QWACT[OPASUB1] == "D") /* delete*/
      OP0QW02.OP0QWACT[OPASUB1] = " "; /* set to no action*/
      OP0QW02.OP0QWDEL = OP0QW02.OP0QWDEL - 1; /* delete count*/
      OP0QW02.OP0QWNPR = OP0QW02.OP0QWNPR + 1; /* product count*/
    end
    set OP0QM016.SY1STNBR[OPASUB] normal;
    set OP0QM016.SY2CLRID[OPASUB] normal;
    set OP0QM016.XDMCD[OPASUB] normal;
    return; /* get out*/
  else
    converseLib.validationFailed(951); /* cannot replace product entry*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0QM016.SY1STNBR[OPASUB] cursor, modified, bold;
    set OP0QM016.SY2CLRID[OPASUB] modified, bold;
    set OP0QM016.XDMCD[OPASUB] modified, bold;
    return;
  end

end // end OP0QS-EDIT-SUBORD

// edit control for subord screen
Function OP0QS-SUBORD-CTRL()



      /* *********************************************************/
      /* * control edit process for cancel screen               **/
      /* *********************************************************/


  OP0QW01.OP0QWCHG = "N";
  OPAREC.OPASUB = 90; /* init map index*/
  while (OPAREC.OPASUB >= 1) /* map index*/
    if (OP0QM016.SY1STNBR[OPASUB] is modified /* style*/
     || OP0QM016.SY2CLRID[OPASUB] is modified /* color*/
     || OP0QM016.XDMCD[OPASUB] is modified)   /* dimension*/
      OP0QW01.OP0QWCHG = "Y";
      OP0QS-EDIT-SUBORD(); /* edit change*/
    end
    OPAREC.OPASUB = OPAREC.OPASUB - 1; /* map index*/
  end


      /* verify that a product is not duplicated on the request*/

  if (COMMAREA.CAALVL[1] == "Y") /* update enabled*/
    if (OPAREC.OPAERR != "Y" /* if no error*/
     && OP0QW01.OP0QWCHG == "Y") /* and something changed*/
      OP0QS-DUP-SUBORD(); /* edit for prod duplication*/
    end
  end



   /* *************************************************************/
end // end OP0QS-SUBORD-CTRL

// set mdt's on if modified
Function OP0QS-SUBORD-MDT()



      /* *********************************************************/
      /* * set mdt's in fields for the case of invalid aid key  **/
      /* * this allows the user to press the correct aid key    **/
      /* * without having to re-enter the data                  **/
      /* *********************************************************/


      /* if not updatable, then none modified*/

  if (COMMAREA.CAALVL[1] != "Y") /* not updatable*/
    return;
  end


  sysVar.arrayIndex = 1; /* init map index*/

  while (sysVar.arrayIndex <= 90)

    if (OP0QM016.SY1STNBR[sysVar.arrayIndex] is modified) /* style*/
      set OP0QM016.SY1STNBR[sysVar.arrayIndex] modified;
    else
      set OP0QM016.SY1STNBR[sysVar.arrayIndex] normal;
    end

    if (OP0QM016.SY2CLRID[sysVar.arrayIndex] is modified) /* color*/
      set OP0QM016.SY2CLRID[sysVar.arrayIndex] modified;
    else
      set OP0QM016.SY2CLRID[sysVar.arrayIndex] normal;
    end

    if (OP0QM016.XDMCD[sysVar.arrayIndex] is modified) /* dimension*/
      set OP0QM016.XDMCD[sysVar.arrayIndex] modified;
    else
      set OP0QM016.XDMCD[sysVar.arrayIndex] normal;
    end

    sysVar.arrayIndex = sysVar.arrayIndex + 1; /* map index*/
  end



   /* *************************************************************/
end // end OP0QS-SUBORD-MDT

// init ws recs
Function OP0QS01()



      /* *********************************************************/
      /* * this statement group sets the working storage records**/
      /* * empty during initialization                          **/
      /* *********************************************************/



      /* set ws recs empty*/

  set OPAREC empty;
  set OP0QW01 empty;
  set OP0QW08 empty;
  set OP0QW09 empty;
  set KUYREC empty;
  set SQLCA empty;
  set SY4REC empty;
  set SYCREC empty;
  set TA1REC empty;
  set TA2REC empty;

  OP0QSJA(); /* clear other recs*/



   /* *************************************************************/
end // end OP0QS01

// set mdt's on if modified
Function OP0QS10()



      /* *********************************************************/
      /* * set mdt's in fields for the case of invalid aid key  **/
      /* * this allows the user to press the correct aid key    **/
      /* * without having to re-enter the data                  **/
      /* *********************************************************/

  if (OP0QM001.OP0QWOPT is modified) /* menu option*/
    set OP0QM001.OP0QWOPT modified;
  else
    set OP0QM001.OP0QWOPT normal;
  end

  if (OP0QM001.OPDRQID is modified) /* request id*/
    set OP0QM001.OPDRQID modified;
  else
    set OP0QM001.OPDRQID normal;
  end

  if (OP0QM001.CATOAP is modified) /* fast path option*/
    set OP0QM001.CATOAP modified;
  else
    set OP0QM001.CATOAP normal;
  end

  if (OP0QM001.CAITEM is modified) /* fast path item*/
    set OP0QM001.CAITEM modified;
  else
    set OP0QM001.CAITEM normal;
  end



   /* *************************************************************/
end // end OP0QS10

// control menu field editing
Function OP0QS11()



      /* *********************************************************/
      /* * this statement group controls the field editing.     **/
      /* *                                                      **/
      /* * the fields are edited in reverse order so that the   **/
      /* * the cursor and error message will be related to the  **/
      /* * top most error.  any errors below the top most most  **/
      /* * error will still be highlighted.                     **/
      /* *********************************************************/



      /* init error diag areas*/

  TA1REC.TA1LOCAT[2] = "OP0QS11 "; /* statement group*/


      /* edit/save menu selection*/

  if (OP0QM001.OP0QWOPT is modified)
    OP0QS12(); /* menu option edit*/
  end


      /* perform request id validation, if no previous errors*/

  if (OPAREC.OPAERR == "Y")
    return;
  end


  if (OP0QW01.OP0QWOPT == "3") /* review option ?*/
    OP0QS13(); /* validate request id*/
  end



   /* *************************************************************/
end // end OP0QS11

// edit menu option
Function OP0QS12()



      /* *********************************************************/
      /* * this statement group edits the menu option           **/
      /* *********************************************************/


      /* edit/save screen sequence option*/

  if (OP0QM001.OP0QWOPT >= "1"
   && OP0QM001.OP0QWOPT <= "3")
    OP0QW01.OP0QWOPT = OP0QM001.OP0QWOPT; /* save option*/
    set OP0QM001.OP0QWOPT normal;
  else
    converseLib.validationFailed(242); /* invalid option*/
    OPAREC.OPAERR = "Y"; /* set err flag*/
    set OP0QM001.OP0QWOPT cursor, modified, bold;
    return;
  end


      /* check to see if user may enter requests*/

  if (OP0QM001.OP0QWOPT == "2")
    if (COMMAREA.CAALVL[1] != "Y")
      converseLib.validationFailed(267); /* you ain't authorized*/
      OPAREC.OPAERR = "Y"; /* set err flag*/
      set OP0QM001.OP0QWOPT cursor, modified, bold;
      return;
    end
  end



   /* *************************************************************/
end // end OP0QS12

// edit menu request id
Function OP0QS13()



      /* *********************************************************/
      /* * this statement group validates the request id        **/
      /* * for review mode request on menu screen               **/
      /* *********************************************************/


      /* if null, then request id is invalid*/

  if (OP0QM001.OPDRQID <= " ") /* check for null order number*/
    converseLib.validationFailed(240); /* request id required for review*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0QM001.OPDRQID cursor, modified, bold;
    return;
  end


      /* issue select unique to get request*/

  OPDREC.OPDRQID = OP0QM001.OPDRQID; /* load key*/
  TA1REC.TA1LOCAT[2] = "OP0QS13 "; /* statement group*/
  OP0QSZA(); /* select unique*/


      /* if not found, then request id is invalid*/

  if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
    converseLib.validationFailed(241); /* request id does not exist*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0QM001.OPDRQID cursor, modified, bold;
    set OPDREC empty; /* clear record*/
    return;
  end

  /* CANADA 09/01/95*/

  OP0QS99(); /* CANA Check that the country code of*/
                                   /* CANA the request id matches the*/
                                   /* CANA country code of the user id*/
  if (OP0QW01.OP0QRQOK == "N") /* CANA country codes don't match*/
    converseLib.validationFailed(241); /* CANA request id does not exist*/
    OPAREC.OPAERR = "Y"; /* CANA set error flag*/
    set OP0QM001.OPDRQID cursor, modified, bold;
    set OPDREC empty; /* CANA clear record*/
    return;
  end


  OP0QW01.OP0QWRVF = "Y"; /* set review flag on*/
  OP0QW01.OPDRQID = OPDREC.OPDRQID; /* save key*/



   /* *************************************************************/
end // end OP0QS13

// build page table
Function OP0QS16()



      /* *********************************************************/
      /* * this statement group builds the directory page table.**/
      /* * the beginning key for each directory screen (max 20) **/
      /* * is stored in this table.  the table is used to       **/
      /* * determine the starting key for the screen for next/  **/
      /* * prev screen processing.                              **/
      /* *********************************************************/


      /* if table already exists, then get out*/

  if (OP0QW08.OPDRQID[1] > " ")
    return;
  end

   /* CANADA 09/01/95*/

      /* get set of request id's*/

  OP0QSZB(); /* select set*/


      /* build table of request id's*/

  OP0QW01.OP0QRQFL = "Y"; /* CANA request id flag*/

  OP0QSZC(); /* CANA select next*/

  OP0QW08.OP0QWPNX = 1; /* CANA init table sub*/
  OPAREC.OPASUB = 1; /* CANA init counter index*/

  while (OP0QW01.OP0QRQFL == "Y" /* CANA more requests*/
   && OP0QW08.OP0QWPNX <= 20) /* CANA not end of table*/
    OP0QS99(); /* CANA check the country code of the*/
                                   /* CANA request id*/
    if (OP0QW01.OP0QRQOK == "Y") /* CANA the country code of the request*/
                                   /* CANA id is valid for user id*/
      if (OPAREC.OPASUB == 1) /* CANA first on Nth screen ?*/
        OP0QW08.OPDRQID[OP0QWPNX] = OPDREC.OPDRQID;
                                   /* CANA store request id*/
        OP0QW08.OP0QWPNX = OP0QW08.OP0QWPNX + 1; /* CANA table subscript*/
      end /* CANA*/
      OPAREC.OPASUB = OPAREC.OPASUB + 1; /* CANA increment the counter*/
      if (OPAREC.OPASUB > 17) /* CANA number of lines on the screen*/
        OPAREC.OPASUB = 1; /* CANA reset counter to next screen*/
      end /* CANA*/
    end /* CANA*/
    OP0QSZC(); /* CANA select next*/
  end /* CANA*/

  OP0QW08.OP0QWPNX = 1; /* CANA init table sub*/
  OP0QSZD(); /* CANA close cursor*/

    /* the code below was replaced with the code above marked CANA*/

   /* OP0QSZB;                         /* select set*/

      /* build table of request id's*/

   /* OP0QSZC;                         /* select next*/
   /* MOVE 1 TO OP0QW08.OP0QWPNX;      /* init table sub*/
   /* MOVE 0 TO OPAREC.OPASUB;         /* init counter index*/
   /* WHILE SQLCA.SQLCODE = 0          /* good return code*/
    /* AND OP0QW08.OP0QWPNX LE 20;    /* not end of table*/
    /* IF OPAREC.OPASUB EQ 1;         /* first on nth screen?*/
      /* MOVE OPDREC.OPDRQID TO OP0QW08.OPDRQID(OP0QWPNX);*/
      /* OP0QW08.OP0QWPNX = OP0QW08.OP0QWPNX + 1;/* table sub*/
    /* END;*/
    /* OP0QSZC;                       /* select next*/
    /* OPAREC.OPASUB = OPAREC.OPASUB + 1;/* counter sub*/
    /* IF OPAREC.OPASUB GT 17;        /* number of lines on a screen*/
      /* MOVE 1 TO OPAREC.OPASUB;     /* reset counter index (next screen)*/
    /* END;*/
   /* END;*/

   /* MOVE 1 TO OP0QW08.OP0QWPNX;      /* init table sub*/
   /* OP0QSZD;                         /* close cursor*/



   /* *************************************************************/
end // end OP0QS16

// process screen selection
Function OP0QS17()



      /* *********************************************************/
      /* * this statement finds the first selected directory    **/
      /* * line (if any).  the request id is saved for review   **/
      /* * mode.                                                **/
      /* *********************************************************/


      /* find selection (use first one found, then clear others)*/

  OPAREC.OPASUB = 1; /* init map sub*/

  while (OPAREC.OPASUB <= 17) /* not end of map*/
    if (OP0QM002.OP0QMSEL[OPASUB] > " ") /* selected?*/
      if (OP0QW01.OPDRQID <= " ") /* item not selected*/
        OP0QW01.OPDRQID = OP0QM002.OPDRQID[OPASUB]; /* save selection*/
        OP0QW01.OP0QWRVF = "Y"; /* set review flag on*/
      end
    end
    OP0QM002.OP0QMSEL[OPASUB] = " "; /* clear selection*/
    OPAREC.OPASUB = OPAREC.OPASUB + 1; /* map sub*/
  end



   /* *************************************************************/
end // end OP0QS17

// process pf7/8 request
Function OP0QS18()



      /* *********************************************************/
      /* * this statement group sets the screen number for      **/
      /* * pf7/8 paging requests.                               **/
      /* *********************************************************/


      /* process pf7 page backward*/

  if (converseVar.eventKey is pf7)
    if (OP0QW08.OP0QWPNX == 1) /* back max already?*/
      converseLib.validationFailed(192); /* end page backward*/
      OPAREC.OPAERR = "Y"; /* set error*/
      return;
    else
      OP0QW08.OP0QWPNX = OP0QW08.OP0QWPNX - 1; /* back 1 screen*/
    end
  end


      /* process pf8 page forward*/

  if (converseVar.eventKey is pf8)
    sysVar.arrayIndex = OP0QW08.OP0QWPNX + 1;
    if (OP0QW08.OP0QWPNX == 20 /* forward max already?*/
     || OP0QW08.OPDRQID[sysVar.arrayIndex] <= " ") /* no dir page?*/
      converseLib.validationFailed(191); /* end page forward*/
      OPAREC.OPAERR = "Y"; /* set error*/
      return;
    else
      OP0QW08.OP0QWPNX = OP0QW08.OP0QWPNX + 1; /* forward 1 screen*/
    end
  end



   /* *************************************************************/
end // end OP0QS18

// build next screen
Function OP0QS19()



      /* *********************************************************/
      /* * this statement group controls the building of the    **/
      /* * next directory screen displayed for the user.        **/
      /* *********************************************************/


      /* get set of request id's*/

   /* OP0QSZB;                         /* select set*/


      /* find correct position in set*/

   /* OP0QSZC;                         /* select next*/
   /* MOVE 1 TO OPAREC.OPASUB;         /* init counter index*/

   /* WHILE SQLCA.SQLCODE EQ 0         /* good rc*/
    /* AND OPDREC.OPDRQID LT OP0QW08.OPDRQID(OP0QWPNX);/* not there yet*/
    /* OP0QSZC;                       /* select next*/
   /* END;*/


      /* format screen*/

   /* MOVE 1 TO OPAREC.OPASUB;         /* init map sub*/

   /* WHILE SQLCA.SQLCODE EQ 0          /* good rc*/
   /* AND OPAREC.OPASUB LE 17;        /* not end of screen*/
   /* OP0QS1A;                        /* format line data*/
   /* OPAREC.OPASUB = OPAREC.OPASUB + 1;     /* map sub*/
   /* OP0QSZC;                        /* select next*/
   /* END;*/

   /* OP0QSZD;                          /* close cursor*/

      /* get set of request id's*/

  OP0QSZB(); /* CANA select set*/


  OP0QW01.OP0QRQFL = "Y"; /* CANA*/

      /* find correct position in set*/

  OP0QSZC(); /* CANA select next*/

  while (SQLCA.VAGen_SQLCODE == 0 /* CANA good rc*/
   && OPDREC.OPDRQID < OP0QW08.OPDRQID[OP0QWPNX]) /* CANA not there yet*/
    OP0QSZC(); /* CANA select next*/
  end

  OPAREC.OPASUB = 1; /* CANA init map sub*/

  while (OP0QW01.OP0QRQFL == "Y" /* CANA more request id's to process*/
   && OPAREC.OPASUB <= 17) /* CANA not end of screen*/
    OP0QS99(); /* CANA check country code of request id*/
    if (OP0QW01.OP0QRQOK == "Y") /* CANA request is valid for country*/
                                   /* CANA code of user id*/
      OP0QS1A(); /* CANA format line data*/
      OPAREC.OPASUB = OPAREC.OPASUB + 1; /* CANA map subscript*/
    end /* CANA*/
    OP0QSZC(); /* CANA select next*/
  end /* CANA*/
  OP0QSZD(); /* CANA close cursor*/


   /* *************************************************************/
end // end OP0QS19

// format directory line
Function OP0QS1A()



     /* **********************************************************/
     /* * this statement group formats a directory screen line. **/
     /* **********************************************************/


      /* build screen from values in record*/

  set OP0QM002.OP0QMSEL[OPASUB] normal; /* set select attribute*/

  OP0QM002.OPDRQID[OPASUB] = OPDREC.OPDRQID; /* id*/
  OP0QM002.OP0QMDSC[OPASUB] = OPDREC.OPDRQDSC; /* desc*/
  OP0QM002.XXXSTAT[OPASUB] = OPDREC.XXXSTAT; /* STATUS*/
  OP0QM002.OPDRQTYP[OPASUB] = OPDREC.OPDRQTYP; /* request type*/
  OP0QM002.XGPCD[OPASUB] = OPDREC.XGPCD; /* gpc*/

  OPAREC.OPAWDT = OPDREC.OPDRBNDT; /* beginning date*/
  OPAREC.OPAFYY = OPAREC.OPAWYY; /* year*/
  OPAREC.OPAFMM = OPAREC.OPAWMM; /* month*/
  OPAREC.OPAFDD = OPAREC.OPAWDD; /* day*/
  OP0QM002.OPDRBNDT[OPASUB] = OPAREC.OPAFDT; /* beginning date*/

  OPAREC.OPAWDT = OPDREC.OPDRENDT; /* ending date*/
  OPAREC.OPAFYY = OPAREC.OPAWYY; /* year*/
  OPAREC.OPAFMM = OPAREC.OPAWMM; /* month*/
  OPAREC.OPAFDD = OPAREC.OPAWDD; /* day*/
  OP0QM002.OPDRENDT[OPASUB] = OPAREC.OPAFDT; /* ending date*/

  OPAREC.OPAWDT = OPDREC.OPDRQEDT; /* effective date*/
  OPAREC.OPAFYY = OPAREC.OPAWYY; /* year*/
  OPAREC.OPAFMM = OPAREC.OPAWMM; /* month*/
  OPAREC.OPAFDD = OPAREC.OPAWDD; /* day*/
  OP0QM002.OPDRQEDT[OPASUB] = OPAREC.OPAFDT; /* effective date*/

  OP0QM002.OPDRQRSQ[OPASUB] = OPDREC.OPDRQRSQ; /* run sequence*/



   /* *************************************************************/
end // end OP0QS1A

// set mdt's on if modified
Function OP0QS20()



      /* *********************************************************/
      /* * set mdt's in fields for the case of invalid aid key  **/
      /* * this allows the user to press the correct aid key    **/
      /* * without having to re-enter the data                  **/
      /* *********************************************************/


  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex <= 17)
    if (OP0QM002.OP0QMSEL[sysVar.arrayIndex] is modified) /* select field*/
      set OP0QM002.OP0QMSEL[sysVar.arrayIndex] modified;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end


  if (OP0QM002.CATOAP is modified) /* fast path option*/
    set OP0QM002.CATOAP modified;
  else
    set OP0QM002.CATOAP normal;
  end


  if (OP0QM002.CAITEM is modified) /* fast path item*/
    set OP0QM002.CAITEM modified;
  else
    set OP0QM002.CAITEM normal;
  end



   /* *************************************************************/
end // end OP0QS20

// edit/select select field
Function OP0QS21()



      /* *********************************************************/
      /* * this statement group controls directory screen       **/
      /* * processing.                                          **/
      /* *********************************************************/


  OP0QS17(); /* check for selection*/
  if (OP0QW01.OPDRQID > " ") /* selection made?*/
    exit stack; /* go for transfer (branch)*/
  end


      /* process pf7/8 request*/

  OP0QS18(); /* check for pf7/8*/



   /* *************************************************************/
end // end OP0QS21

// get records for review
Function OP0QS26()



      /* *********************************************************/
      /* * this statement group gets the records for review mode**/
      /* *********************************************************/


      /* issue select unique to get request*/

  TA1REC.TA1LOCAT[2] = "OP0QS26 "; /* statement group*/
  OPDREC.OPDRQID = OP0QW01.OPDRQID; /* load key*/
  OP0QSZA(); /* select unique*/


      /* if not found, then abend*/

  if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
    OP0QSZZ(); /* abend*/
  end


      /* get product information*/

  OPEREC.OPDRQID = OP0QW01.OPDRQID; /* load key*/
  TA1REC.TA1LOCAT[2] = "OP0QS26 "; /* statement group*/
  OP0QSZK(); /* select set*/
  OP0QSZL(); /* select next*/
  OP0QSJC(); /* clear prod tables and fields*/
  OP0QS27(); /* load prod tables*/



   /* *************************************************************/
end // end OP0QS26

// load prod tables for review
Function OP0QS27()



      /* *********************************************************/
      /* * this statement group loads the product tables for    **/
      /* * review.                                              **/
      /* *********************************************************/


      /* load product information*/

  TA1REC.TA1LOCAT[2] = "OP0QS27 "; /* statement group*/

  while (SQLCA.VAGen_SQLCODE == 0)
    OPAREC.OPASUB = OPEREC.OPELNINB;
    OP0QW02.OP0QWPRD = OPEREC.OPELNINB; /* largest sub*/
    OP0QW02.OP0QWNPR = OP0QW02.OP0QWNPR + 1; /* product count*/

     /* load main prod info for all types*/

    OP0QW02.SY1STNBR[OPASUB] = OPEREC.SY1STNBR;
    OP0QW02.SY2CLRID[OPASUB] = OPEREC.SY2CLRID;
    OP0QW02.XDMCD[OPASUB] = OPEREC.XDMCD;
    OP0QW02.XWHCD[OPASUB] = OPEREC.XWHCD;

     /* load substitution prod info for replace type*/

    if (OPDREC.OPDRQTYP == "2")
      OP0QW03.OP2SSTYN[OPASUB] = OPEREC.OP2SSTYN;
      OP0QW03.OP2SCLCD[OPASUB] = OPEREC.OP2SCLCD;
      OP0QW03.OP2SDMCD[OPASUB] = OPEREC.OP2SDMCD;
    end

     /* load price info for replace or reprice types*/

    if (OPDREC.OPDRQTYP == "2"
     || OPDREC.OPDRQTYP == "4")
      OP0QW05.OP2PRCVF = OPEREC.OP2PRCVF; /* prc ovrd flag*/
      OP0QW05.OPEPRCS = OPEREC.OPEPRCS; /* price array*/
      OP0QW04.OP0QWPAR[OPASUB] = OP0QW05.OP0QWPAR;
    end

     /* select next product*/

    OP0QSZL(); /* select next*/

  end

  OP0QSZM(); /* close set*/



   /* *************************************************************/
end // end OP0QS27

// set mdt's on if modified
Function OP0QS30()



      /* *********************************************************/
      /* * set mdt's in fields for the case of invalid aid key  **/
      /* * this allows the user to press the correct aid key    **/
      /* * without having to re-enter the data                  **/
      /* *********************************************************/



  if (OP0QM003.OPDRQID is modified) /* request id*/
    set OP0QM003.OPDRQID modified;
  end


  if (OP0QM003.OPDRQDSC is modified) /* request desc*/
    set OP0QM003.OPDRQDSC modified;
  end


  if (OP0QM003.OPDRQTYP is modified) /* request type*/
    set OP0QM003.OPDRQTYP modified;
  end


  if (OP0QM003.OPDRQEDT is modified) /* request effective date*/
    set OP0QM003.OPDRQEDT modified;
  end


  if (OP0QM003.OPDRQRSQ is modified) /* request priority*/
    set OP0QM003.OPDRQRSQ modified;
  end


  if (OP0QM003.OPDRBNDT is modified) /* beginning need date*/
    set OP0QM003.OPDRBNDT modified;
  end


  if (OP0QM003.OPDRENDT is modified) /* ending need date*/
    set OP0QM003.OPDRENDT modified;
  end

  if (OP0QM003.OP0QMACT is modified) /* reactivate request flag*/
    set OP0QM003.OP0QMACT modified;
  end


  if (OP0QM003.XOMCD is modified) /* order maint code*/
    set OP0QM003.XOMCD modified;
  end


  if (OP0QM003.OP4TXT is modified) /* order maint comment*/
    set OP0QM003.OP4TXT modified;
  end


  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex <= 8)
    if (OP0QM003.OP0QMSEL[sysVar.arrayIndex] is modified) /* gpc code*/
      set OP0QM003.OP0QMSEL[sysVar.arrayIndex] modified;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end



   /* *************************************************************/
end // end OP0QS30

// edit fields
Function OP0QS31()



      /* *********************************************************/
      /* * control edit process                                 **/
      /* *********************************************************/


  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex <= 8)
    if (OP0QM003.OP0QMSEL[sysVar.arrayIndex] is modified) /* gpc code*/
      OP0QS3A(); /* edit gpc*/
      sysVar.arrayIndex = 9;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end


  if (OP0QM003.OP4TXT is modified ||  /* order maint comment*/
  OP0QM003.SOCD-HDR-RSN-TXT is modified) /* ocd comment*/
    OP0QS3B(); /* edit order maint text*/
  end


  if (OP0QM003.XOMCD is modified) /* order maint code*/
    OP0QS3C(); /* edit order maint code*/
  end


  if (OP0QM003.OPDRENDT is modified) /* ending need date*/
    OP0QS3D(); /* edit ending date*/
  end


  if (OP0QM003.OPDRBNDT is modified) /* beginning need date*/
    OP0QS3E(); /* edit beginning date*/
  end

  if (OP0QM003.OP0QMACT is modified) /* reactivate request flag*/
    OP0QS3M(); /* edit reactivate request flag*/
  end


  if (OP0QM003.OPDDSCPF == "Y" /* send discrepancy*/
   || OP0QM003.OPDDSCPF == "N")
    OPDREC.OPDDSCPF = OP0QM003.OPDDSCPF; /* save field*/
  else
    set OP0QM003.OPDDSCPF cursor, bold;
    OPAREC.OPAERR = "Y"; /* set error flag*/
    converseLib.validationFailed(540); /* not a valid entry*/
  end


   /* launch project  10/30/97*/
  if (OP0QM003.OPDDSCPF == "Y") /* send discrepancy*/
    if (OP0QM003.OPDRQTYP == "5")
      set OP0QM003.OPDDSCPF cursor, bold;
      OPAREC.OPAERR = "Y"; /* set error flag*/
      converseLib.validationFailed(949); /* do not allow send discrepancy for*/
    end /* product subordering*/
  end


  if (OP0QM003.OPDRQRSQ is modified) /* request priority*/
    OP0QS3F(); /* edit request priority*/
  end


  if (OP0QM003.OPDRQEDT is modified) /* request effective date*/
    OP0QS3G(); /* edit request effective date*/
  end


  if (OP0QM003.OPDRQTYP is modified) /* request type*/
    OP0QS3H(); /* edit request type*/
  end


  if (OP0QM003.OPDRQDSC is modified) /* request desc*/
    OP0QS3I(); /* edit request desc*/
  end


  if (OP0QM003.OPDRQID is modified) /* request id*/
    OP0QS3J(); /* edit request id*/
  end


      /* if no error, then do field relationship checks*/

  if (OPAREC.OPAERR == "Y") /* error?*/
    return;
  end


      /* beginning need date must be le ending need date*/

  OP0QS3K(); /* edit beginning against ending*/


  OP0QS3L(); /* edit logon id for svc rep id*/


  if (OP0QM003 is modified /* map modified*/
   && OPAREC.OPAERR != "Y") /* and no error*/
    OP0QW01.OP0QWUPD = "Y"; /* set update flag*/
    OP0QW01.OP0QWUPH = "Y"; /* set update header flag*/
  end



   /* *************************************************************/
end // end OP0QS31

// build xos screen for cancel
Function OP0QS35()



      /* *********************************************************/
      /* * build display of valid order (product) statuses for  **/
      /* * cancel function.  process is hard coded rather than  **/
      /* * table flag driven.                                   **/
      /* *********************************************************/


  OPAREC.OPASUB = 1; /* map index*/
  OP0QM004.XOSCD[OPASUB] = "OP";
  OP0QS39(); /* get desc for xoscd*/

  OPAREC.OPASUB = OPAREC.OPASUB + 1;
  OP0QM004.XOSCD[OPASUB] = "PA";
  OP0QS39(); /* get desc for xoscd*/

  OPAREC.OPASUB = OPAREC.OPASUB + 1;
  OP0QM004.XOSCD[OPASUB] = "PR";
  OP0QS39(); /* get desc for xoscd*/

  OPAREC.OPASUB = OPAREC.OPASUB + 1;
  OP0QM004.XOSCD[OPASUB] = "PS";
  OP0QS39(); /* get desc for xoscd*/

  OPAREC.OPASUB = OPAREC.OPASUB + 1;
  OP0QM004.XOSCD[OPASUB] = "RS";
  OP0QS39(); /* get desc for xoscd*/



   /* *************************************************************/
end // end OP0QS35

// build xos screen for replace
Function OP0QS36()



      /* *********************************************************/
      /* * build display of valid order (product) statuses for  **/
      /* * replace function.  process is hard coded rather than **/
      /* * table flag driven.                                   **/
      /* *********************************************************/


  OPAREC.OPASUB = 1; /* map index*/
  OP0QM004.XOSCD[OPASUB] = "OP";
  OP0QS39(); /* get desc for xoscd*/



   /* *************************************************************/
end // end OP0QS36

// build xos screen for reprice
Function OP0QS37()



      /* *********************************************************/
      /* * build display of valid order (product) statuses for  **/
      /* * reprice function.  process is hard coded rather than **/
      /* * table flag driven.                                   **/
      /* *********************************************************/


  OPAREC.OPASUB = 1; /* map index*/
  OP0QM004.XOSCD[OPASUB] = "OP";
  OP0QS39(); /* get desc for xoscd*/

  OPAREC.OPASUB = OPAREC.OPASUB + 1;
  OP0QM004.XOSCD[OPASUB] = "AL";
  OP0QS39(); /* get desc for xoscd*/

  OPAREC.OPASUB = OPAREC.OPASUB + 1;
  OP0QM004.XOSCD[OPASUB] = "PA";
  OP0QS39(); /* get desc for xoscd*/

  OPAREC.OPASUB = OPAREC.OPASUB + 1;
  OP0QM004.XOSCD[OPASUB] = "RS";
  OP0QS39(); /* get desc for xoscd*/

  OPAREC.OPASUB = OPAREC.OPASUB + 1;
  OP0QM004.XOSCD[OPASUB] = "PR";
  OP0QS39(); /* get desc for xoscd*/



   /* *************************************************************/
end // end OP0QS37

// build xos screen for 1 w/h mod
Function OP0QS38()



      /* *********************************************************/
      /* * build display of valid order (product) statuses for  **/
      /* * 1 w/h mod function.  process is hard coded rather    **/
      /* * than table flag driven.                              **/
      /* *********************************************************/


  OPAREC.OPASUB = 1; /* map index*/
  OP0QM004.XOSCD[OPASUB] = "OP";
  OP0QS39(); /* get desc for xoscd*/



   /* *************************************************************/
end // end OP0QS38

// get xosdesc/flag entries
Function OP0QS39()



      /* *********************************************************/
      /* * get discription for xoscd placed on map.             **/
      /* * set attribute based on security                      **/
      /* *                                                      **/
      /* * prod status select may be changed on review          **/
      /* * if authorized                                        **/
      /* *                                                      **/
      /* * flag selected entries if previously entered          **/
      /* *********************************************************/


  if (COMMAREA.CAALVL[1] == "Y") /* if updatable*/
    set OP0QM004.OP0QMSEL[OPASUB] normal;
  else
    set OP0QM004.OP0QMSEL[OPASUB] protect;
  end


  if (OP0QM004.XOSCD[OPASUB] in XOSTBL.XOSCD)
    OP0QM004.XOSDESC[OPASUB] = XOSTBL.XOSDESC[sysVar.arrayIndex];
  else
    OP0QM004.XOSDESC[OPASUB] = "*UNKNOWN*";
  end


      /* flag entries if previously entered*/

  if (OPDREC.OPDXOSCD > " ") /* at least one code*/
    OPAREC.OPASUB1 = 1; /* init sub*/
    while (OPAREC.OPASUB1 <= 13
     && OPDREC.XOSCD[OPASUB1] > " ")
      if (OP0QM004.XOSCD[OPASUB] == OPDREC.XOSCD[OPASUB1])
        OP0QM004.OP0QMSEL[OPASUB] = "X";
        OPAREC.OPASUB1 = 99; /* terminate loop*/
      end
      OPAREC.OPASUB1 = OPAREC.OPASUB1 + 1;
    end
  end



   /* *************************************************************/
end // end OP0QS39

// edit gpc
Function OP0QS3A()



      /* *********************************************************/
      /* * edit to ensure one and only one gpc has been selected**/
      /* *********************************************************/


  OPAREC.OPAWKINT = 0; /* clear counter*/
  OPAREC.OPASUB = 1; /* init gpc index*/
  OPAREC.OPASUB1 = 0; /* init first found gpc*/
  while (OPAREC.OPASUB <= 8) /* max table size*/
    if (OP0QM003.OP0QMSEL[OPASUB] > " ")
      OPAREC.OPAWKINT = OPAREC.OPAWKINT + 1;
      if (OPAREC.OPASUB1 == 0)
        OPAREC.OPASUB1 = OPAREC.OPASUB; /* save pos if 1st gpc*/
        OPDREC.XGPCD = OP0QM003.XGPCD[OPASUB]; /* save code*/
      end
      if (OPAREC.OPAWKINT > 1) /* too many gpc's?*/
        set OP0QM003.OP0QMSEL[OPASUB] cursor, modified, bold;
        set OP0QM003.OP0QMSEL[OPASUB1] modified, bold;
        OPAREC.OPAERR = "Y"; /* set error flag*/
        converseLib.validationFailed(243); /* only one gpc*/
      end
    end
    OPAREC.OPASUB = OPAREC.OPASUB + 1;
  end


      /* check to see if any gpc's were selected*/

  if (OPAREC.OPAWKINT == 0)
    set OP0QM003.OP0QMSEL[1] cursor, modified, bold;
    OPAREC.OPAERR = "Y"; /* set error flag*/
    converseLib.validationFailed(244); /* one gpc must be selected*/
  else
   /* check that either footwear or apparel GPC's have been selected*/
    if (OP0QM003.OPDRQTYP == "5")
      if (OPDREC.XGPCD != "02" && OPDREC.XGPCD != "03")
        set OP0QM003.OP0QMSEL[1] cursor, modified, bold;
        OPAREC.OPAERR = "Y";
        converseLib.validationFailed(950);
      end
    end
  end



   /* *************************************************************/
end // end OP0QS3A

// edit order maint comment text
Function OP0QS3B()



      /* *********************************************************/
      /* * save order maint text and ocd text                   **/
      /* *********************************************************/


  OPDREC.OP4TXT = OP0QM003.OP4TXT;
  set OP0QM003.OP4TXT normal;
  OPDREC.SOCD-HDR-RSN-TXT = OP0QM003.SOCD-HDR-RSN-TXT;
  set OP0QM003.SOCD-HDR-RSN-TXT normal;


  if (OP0QM003.SOCD-HDR-RSN-TXT > " ")
    OPDREC.SOCD-HDR-RSN-TXT = OP0QM003.SOCD-HDR-RSN-TXT;
    OPDREC.SOCD-SZ-RSN-TXT = OP0QM003.SOCD-HDR-RSN-TXT;
  else
    OPDREC.SOCD-HDR-RSN-TXT = OP0QM003.OP4TXT;
    OPDREC.SOCD-SZ-RSN-TXT = OP0QM003.OP4TXT;
  end
  set OP0QM003.SOCD-HDR-RSN-TXT normal;

   /* *************************************************************/
end // end OP0QS3B

// edit order maint code
Function OP0QS3C()



      /* *********************************************************/
      /* * edit/save order maint reason code                    **/
      /* *********************************************************/



  if (OP0QM003.OPDRQTYP == "1")
    if (OP0QM003.XOMCD in XOMTBL.XOMCD
     && XOMTBL.XXXSTAT[sysVar.arrayIndex] == "A"
     && OP0QM003.XOMCD != "99")
      OPDREC.XOMCD = OP0QM003.XOMCD; /* save code*/
      OP0QM003.XOMDESC = XOMTBL.XOMDESC[sysVar.arrayIndex];
      set OP0QM003.XOMCD normal;
    else
      set OP0QM003.XOMCD cursor, modified, bold;
      OP0QM003.XOMDESC = " ";
      OPAREC.OPAERR = "Y"; /* set error flag*/
      converseLib.validationFailed(395); /* change reason invalid*/
    end
  end



  if (OP0QM003.OPDRQTYP != "1")
    if (OP0QM003.XOMCD > " ")
      if (OP0QM003.XOMCD in XOMTBL.XOMCD
       && XOMTBL.XXXSTAT[sysVar.arrayIndex] == "A"
       && OP0QM003.XOMCD != "99")
        OPDREC.XOMCD = OP0QM003.XOMCD; /* save code*/
        OP0QM003.XOMDESC = XOMTBL.XOMDESC[sysVar.arrayIndex];
        set OP0QM003.XOMCD normal;
      else
        set OP0QM003.XOMCD cursor, modified, bold;
        OP0QM003.XOMDESC = " ";
        OPAREC.OPAERR = "Y"; /* set error flag*/
        converseLib.validationFailed(395); /* change reason invalid*/
      end
    else
      OPDREC.XOMCD = OP0QM003.XOMCD; /* save code*/
      OP0QM003.XOMDESC = " "; /* clear desc*/
    end
  end



   /* *************************************************************/
end // end OP0QS3C

// edit ending need date
Function OP0QS3D()



      /* *********************************************************/
      /* * this statement group edits the ending need date field**/
      /* *********************************************************/


      /* edit non-zero date*/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG"; /* func request*/
  TA2REC.TA2GRTYP = "A"; /* format is mmddyy*/
  TA2REC.TA2GRGA = OP0QM003.OPDRENDT; /* set date argument*/
  call "TA0040" (TA2REC) {isExternal = yes}; /* call date module*/
  if (TA2REC.TA2RTNCD != 0) /* check for invalid rc*/
    OPAREC.OPAERR = "Y"; /* set err flag*/
    converseLib.validationFailed(246); /* ending need date is not a valid date*/
    set OP0QM003.OPDRENDT cursor, modified, bold;
    return;
  end


      /* ensure date not more than one year in advance*/

  OPAREC.OPAWDT = OPAREC.OPACDT + 20000; /* wk = today's date + 2 years*/

  if (TA2REC.TA2GRGGN > OPAREC.OPAWDT) /* more than 1 year future?*/
    OPAREC.OPAERR = "Y"; /* set err flag*/
    converseLib.validationFailed(246); /* ending need date is not a valid date*/
    set OP0QM003.OPDRENDT cursor, modified, bold;
    return;
  end


      /* save date and set field attribute*/

  OPDREC.OPDRENDT = TA2REC.TA2GRGGN; /* save date*/
  set OP0QM003.OPDRENDT normal;



   /* *************************************************************/
end // end OP0QS3D

// edit beginning need date
Function OP0QS3E()



      /* *********************************************************/
      /* * this statement group edits the begin need date.      **/
      /* *********************************************************/


      /* zero date is valid*/

  if (OP0QM003.OPDRBNDT == "MMDDYY" /* if zero or not entered, ok*/
   || OP0QM003.OPDRBNDT == "000000" 
   || OP0QM003.OPDRBNDT == "     0" 
   || OP0QM003.OPDRBNDT == " ")    
    OPDREC.OPDRBNDT = 0;
    set OP0QM003.OPDRBNDT normal;
    return;
  end


      /* edit non-zero date*/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG"; /* func request*/
  TA2REC.TA2GRTYP = "A"; /* format is mmddyy*/
  TA2REC.TA2GRGA = OP0QM003.OPDRBNDT; /* set date argument*/
  call "TA0040" (TA2REC) {isExternal = yes}; /* call date module*/
  if (TA2REC.TA2RTNCD != 0) /* check for invalid rc*/
    OPAREC.OPAERR = "Y"; /* set err flag*/
    converseLib.validationFailed(247); /* beginning need date not valid date*/
    set OP0QM003.OPDRBNDT cursor, modified, bold;
    return;
  end


      /* ensure date not more than two years in advance*/

  OPAREC.OPAWDT = OPAREC.OPACDT + 20000; /* wk = today's date + 2 year*/

  if (TA2REC.TA2GRGGN > OPAREC.OPAWDT) /* more than 1 year future?*/
    OPAREC.OPAERR = "Y"; /* set err flag*/
    converseLib.validationFailed(247); /* beginning need date not valid date*/
    set OP0QM003.OPDRBNDT cursor, modified, bold;
    return;
  end


      /* save date and set field attribute*/

  OPDREC.OPDRBNDT = TA2REC.TA2GRGGN; /* save date*/
  set OP0QM003.OPDRBNDT normal;



   /* *************************************************************/
end // end OP0QS3E

// edit run sequence
Function OP0QS3F()



      /* *********************************************************/
      /* * edit/save request run sequence                       **/
      /* *********************************************************/


  if (OP0QM003.OPDRQRSQ >= 1
   && OP0QM003.OPDRQRSQ <= 99)
    OPDREC.OPDRQRSQ = OP0QM003.OPDRQRSQ; /* save field*/
    set OP0QM003.OPDRQRSQ normal;
  else
    set OP0QM003.OPDRQRSQ cursor, modified, bold;
    OPAREC.OPAERR = "Y"; /* set error flag*/
    converseLib.validationFailed(248); /* invalid run sequence*/
  end



   /* *************************************************************/
end // end OP0QS3F

// edit request effective date
Function OP0QS3G()



      /* *********************************************************/
      /* * this statement group edits the request effective dt. **/
      /* *********************************************************/


      /* zero date is valid*/

  if (OP0QM003.OPDRQEDT == "MMDDYY" /* if zero or not entered, ok*/
   || OP0QM003.OPDRQEDT == "000000" 
   || OP0QM003.OPDRQEDT == "     0" 
   || OP0QM003.OPDRQEDT == " ")    
    OPDREC.OPDRQEDT = 0;
    set OP0QM003.OPDRQEDT normal;
    return;
  end


      /* edit non-zero date*/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG"; /* func request*/
  TA2REC.TA2GRTYP = "A"; /* format is mmddyy*/
  TA2REC.TA2GRGA = OP0QM003.OPDRQEDT; /* set date argument*/
  call "TA0040" (TA2REC) {isExternal = yes}; /* call date module*/
  if (TA2REC.TA2RTNCD != 0) /* check for invalid rc*/
    OPAREC.OPAERR = "Y"; /* set err flag*/
    converseLib.validationFailed(245); /* request eff date is not a valid date*/
    set OP0QM003.OPDRQEDT cursor, modified, bold;
    return;
  end


      /* ensure date not more than one month in advance*/

  OPAREC.OPAWDT = OPAREC.OPACDT;
                                   /* work date = today's date + 1 month*/
  OPAREC.OPAWMM = OPAREC.OPAWMM + 1; /* one month from today*/
  if (OPAREC.OPAWMM > 12) /* fix month*/
    OPAREC.OPAWDT = OPAREC.OPAWDT + 10000; /* add 1 to year*/
    OPAREC.OPAWMM = 1;
  end

  if (TA2REC.TA2GRGGN > OPAREC.OPAWDT) /* more than 1 month future?*/
    OPAREC.OPAERR = "Y"; /* set err flag*/
    converseLib.validationFailed(245); /* request eff date is not a valid date*/
    set OP0QM003.OPDRQEDT cursor, modified, bold;
    return;
  end


      /* save date and set field attribute*/

  OPDREC.OPDRQEDT = TA2REC.TA2GRGGN; /* save date*/
  set OP0QM003.OPDRQEDT normal;



   /* *************************************************************/
end // end OP0QS3G

// edit request type
Function OP0QS3H()



      /* *********************************************************/
      /* * edit/save request type                               **/
      /* *********************************************************/

  /* CANADA 09/01/95*/

  if (OP0QW01.XCTCD == "CANA") /* This is a Canadian customer*/
    if (OP0QM003.OPDRQTYP == "3") /* CANA option 3 not valid*/
      set OP0QM003.OPDRQTYP cursor, modified, bold; /* CANA*/
      OPAREC.OPAERR = "Y"; /* CANA set error flag*/
      converseLib.validationFailed(249); /* CANA invalid type*/
      return; /* CANA*/
    end /* CANA*/
  end /* CANA*/

  if (OP0QM003.OPDRQTYP >= "1"
   && OP0QM003.OPDRQTYP <= "5") /* launch project 10/30/97*/
    OPDREC.OPDRQTYP = OP0QM003.OPDRQTYP; /* save field*/
    set OP0QM003.OPDRQTYP normal;
  else
    set OP0QM003.OPDRQTYP cursor, modified, bold;
    OPAREC.OPAERR = "Y"; /* set error flag*/
    converseLib.validationFailed(249); /* invalid type*/
  end



   /* *************************************************************/
end // end OP0QS3H

// edit request description
Function OP0QS3I()



      /* *********************************************************/
      /* * edit/save request desc                               **/
      /* *********************************************************/


  if (OP0QM003.OPDRQDSC > " ")
    OPDREC.OPDRQDSC = OP0QM003.OPDRQDSC; /* save field*/
    set OP0QM003.OPDRQDSC normal;
  else
    set OP0QM003.OPDRQDSC cursor, modified, bold;
    OPAREC.OPAERR = "Y"; /* set error flag*/
    converseLib.validationFailed(250); /* request desc required*/
  end



   /* *************************************************************/
end // end OP0QS3I

// edit request id
Function OP0QS3J()



      /* *********************************************************/
      /* * edit/save request id                                 **/
      /* *********************************************************/


  if (OP0QM003.OPDRQID > " ")
    OPDREC.OPDRQID = OP0QM003.OPDRQID; /* save field*/
    OP0QW01.OPDGROUP = OPDREC.OPDGROUP; /* save rec*/
    OP0QSZA(); /* sel unique on request id*/
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      set OP0QM003.OPDRQID normal; /* ok*/
    else
      OPDREC.OPDGROUP = OP0QW01.OPDGROUP; /* restore rec*/
      OPAREC.OPAERR = "Y"; /* set error flag*/
      converseLib.validationFailed(252); /* request id already exists*/
      set OP0QM003.OPDRQID cursor, modified, bold;
    end
  else
    OPAREC.OPAERR = "Y"; /* set error flag*/
    converseLib.validationFailed(251); /* request id required*/
    set OP0QM003.OPDRQID cursor, modified, bold;
  end



   /* *************************************************************/
end // end OP0QS3J

// edit beginning vs ending nd dt
Function OP0QS3K()



      /* *********************************************************/
      /* * edit beginnning vs ending need dates                 **/
      /* *********************************************************/


  if (OPDREC.OPDRBNDT > OPDREC.OPDRENDT) /* error if beginning gt ending*/
    set OP0QM003.OPDRBNDT cursor, modified, bold;
    set OP0QM003.OPDRENDT modified, bold;
    OPAREC.OPAERR = "Y"; /* set error flag*/
    converseLib.validationFailed(255); /* request id required*/
  end



   /* *************************************************************/
end // end OP0QS3K

// get sales service rep id
Function OP0QS3L()



      /* *********************************************************/
      /* * this statement group edits the logon id to get the   **/
      /* * service rep id                                       **/
      /* *********************************************************/


      /* do only if map was modified*/

  if (OP0QM003 is modified)
     /* ** next sentence ***/
  else
    return;
  end


      /* verify that the service rep id exists in the xsv table*/

  KUYREC.XXXUSRID = COMMAREA.CAUSERID; /* load key - user id*/
  OP0QSZT(); /* call i/o mod for inquiry*/


      /* if not found or not active then error*/

  if (SQLCA.VAGen_SQLCODE == 100  /* check for notfnd rc*/
   || SQLCA.VAGen_SQLCODE == -811 /* check for more than one*/
   || KUYREC.XXXSTAT != "A")      /* check for active id*/
    converseLib.validationFailed(011); /* entered-by is not a valid service rep id*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
  else
    if (KUYREC.KUYSVRID != OPDREC.KUYSVRID) /* save if not equal*/
      OPDREC.KUYSVRID = KUYREC.KUYSVRID; /* save rep id*/
      OP0QW01.OP0QWUPD = "Y"; /* set update flag*/
      OP0QW01.OP0QWUPH = "Y"; /* set update header flag*/
    end
  end



   /* *************************************************************/
end // end OP0QS3L

// edit REACTIVATE REQUEST FLAG
Function OP0QS3M()



      /* *********************************************************/
      /* * edit REACTIVATE REQUEST FLAG                         **/
      /* *********************************************************/


  if (OPDREC.XXXSTAT == "I" /* if REQUEST IS INACTIVE*/
   && OP0QM003.OP0QMACT == "Y")
    OPDREC.XXXSTAT = "A"; /* ACTIVATE THE REQUEST*/
    return;
  end

  if (OPDREC.XXXSTAT == "A" /* if REQUEST IS ACTIVE*/
   && OP0QM003.OP0QMACT == "Y")
    OPDREC.XXXSTAT = "I"; /* INACTIVATE THE REQUEST*/
    return;
  end

  if (OP0QM003.OP0QMACT == "N" /* VALID REASPONSE BUT NOTHING TO DO*/
   || OP0QM003.OP0QMACT == "Y")
    return;
  end

  set OP0QM003.OP0QMACT modified, bold;
  OPAREC.OPAERR = "Y"; /* set error flag*/
   /* MOVE 255 TO EZEMNO;             /* ENTER Y' OR 'N'*/



   /* *************************************************************/
end // end OP0QS3M

// set mdt's on if modified
Function OP0QS40()



      /* *********************************************************/
      /* * set mdt's in fields for the case of invalid aid key  **/
      /* * this allows the user to press the correct aid key    **/
      /* * without having to re-enter the data.                 **/
      /* *********************************************************/


  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex <= 10)
    if (OP0QM004.OP0QMSEL[sysVar.arrayIndex] is modified) /* xos code*/
      set OP0QM004.OP0QMSEL[sysVar.arrayIndex] modified;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end



   /* *************************************************************/
end // end OP0QS40

// edit fields
Function OP0QS41()



      /* *********************************************************/
      /* * this statement group controls the field editing.     **/
      /* *                                                      **/
      /* * the fields are edited in reverse order so that the   **/
      /* * the cursor and error message will be related to the  **/
      /* * top most error.  any errors below the top most most  **/
      /* * error will still be highlighted.                     **/
      /* *********************************************************/



      /* get out if not update mode*/

  if (COMMAREA.CAALVL[1] != "Y") /* update disabled*/
    return;
  end


      /* init error diag areas*/

  TA1REC.TA1LOCAT[2] = "OP0QS41 "; /* statement group*/


      /* edit/save prod status entries*/

  OP0QS4A();



   /* *************************************************************/
end // end OP0QS41

// flag valid xsocd's for gpc
Function OP0QS45()



    /* ***********************************************************/
    /* * this statement group matches the gpc against the       **/
    /* * order type table for valid order types to match with   **/
    /* * the current sales office against the xvo table to      **/
    /* * determine which sales offices are valid for the gpc.   **/
    /* * if valid, then an '*' is shown in the the sales        **/
    /* * office line on the screen.                             **/
    /* *                                                        **/
    /* * this statement group was changed to use the 'if in'    **/
    /* * feature of csp.  the subscript, ezetst, is incremented **/
    /* * after the first hit and starts at 'n' position to      **/
    /* * retrieve the second record.  this happens until the    **/
    /* * end of the array is reached and is much faster than    **/
    /* * moving each member of the table and then doing a       **/
    /* * compare. (Ref: CSP Ver. 3: Performance Characteristics **/
    /* * and Recommendations)                                   **/
    /* ***********************************************************/

                   /* opasub = xsotbl index (from op0q045)*/
                   /* opasub2 = map field index (from op0q045)*/




   /* **************** TCS INCLUDE BEGIN ***********/


  set SQLCA empty;
  set VXVO0001 empty;
  set OPVREC empty;
  VXVO0001.XGPCD = OPDREC.XGPCD; /* valid gpc code*/
  VXVO0001.XSOCD = XSOTBL.XSOCD[OPASUB];
  VXVO0001.XXXSTAT = "A";
  OPVREC.OPVTASK = "T4"; /* task for iomod*/

  call "VXVO0001" (OPVREC, SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* open cursor*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (OPVREC.OPVCOUNT > 0)
      OP0QM005.OP0QMFLG[OPASUB2] = "*";
    end
  else
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VXVO0001";
    TA1REC.TA1TBLKE = VXVO0001-KEY;
    TA1REC.TA1LOCAT[3] = "OP0QS45";
    TA1REC.TA1LOCAT[4] = "VXVO0001";
    OP0QSZZ();
  end

   /* ***************** TCS INCLUDE END ****************/
end // end OP0QS45

// edit/save prod statuses
Function OP0QS4A()



      /* *********************************************************/
      /* * edit to ensure at least 1 prod stat has been selected**/
      /* *********************************************************/



  if (OP0QM004 is modified) /* set update if modified*/
    OP0QW01.OP0QWUPD = "Y"; /* set update flag*/
    OP0QW01.OP0QWUPH = "Y"; /* set update header flag*/
  end

  OPDREC.OPDXOSCD = " "; /* clear array*/
  OPAREC.OPASUB = 1; /* init map index*/
  OPAREC.OPASUB1 = 0; /* init rec index*/
  while (OPAREC.OPASUB <= 10) /* max table size*/
    if (OP0QM004.OP0QMSEL[OPASUB] > " ")
      OPAREC.OPASUB1 = OPAREC.OPASUB1 + 1; /* rec index*/
      set OP0QM004.OP0QMSEL[OPASUB] normal;
      OPDREC.XOSCD[OPASUB1] = OP0QM004.XOSCD[OPASUB];
    end
    OPAREC.OPASUB = OPAREC.OPASUB + 1; /* map index*/
  end


      /* check to see if any prod stats were selected*/

  if (OPAREC.OPASUB1 == 0)
    set OP0QM004.OP0QMSEL[1] cursor, modified, bold;
    OPAREC.OPAERR = "Y"; /* set error flag*/
    converseLib.validationFailed(253); /* at least one prod status...*/
  end


   /* *************************************************************/
end // end OP0QS4A

// set mdt's on if modified
Function OP0QS50()



      /* *********************************************************/
      /* * set mdt's in fields for the case of invalid aid key  **/
      /* * this allows the user to press the correct aid key    **/
      /* * without having to re-enter the data.                 **/
      /* *********************************************************/


  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex <= 26)
    if (OP0QM005.OP0QMSEL[sysVar.arrayIndex] is modified) /* xso code*/
      set OP0QM005.OP0QMSEL[sysVar.arrayIndex] modified;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end



   /* *************************************************************/
end // end OP0QS50

// edit fields
Function OP0QS51()



      /* *********************************************************/
      /* * this statement group controls the field editing.     **/
      /* *                                                      **/
      /* * the fields are edited in reverse order so that the   **/
      /* * the cursor and error message will be related to the  **/
      /* * top most error.  any errors below the top most most  **/
      /* * error will still be highlighted.                     **/
      /* *********************************************************/



      /* get out if not update mode*/

  if (COMMAREA.CAALVL[1] != "Y") /* update disabled*/
    return;
  end


      /* init error diag areas*/

  TA1REC.TA1LOCAT[2] = "OP0QS51 "; /* statement group*/


      /* edit/save sales office entries*/

  OP0QS5A();



   /* *************************************************************/
end // end OP0QS51

// check xsocd/xotcd vs xvotbl
Function OP0QS55()



    /* ***********************************************************/
    /* * this statement group matches the previously selected   **/
    /* * sales office codes with the current order type code    **/
    /* * against the xvotbl to determine if the order type is   **/
    /* * currently valid for the selected sales offices.  if    **/
    /* * valid, then an '*' is shown in the the order type      **/
    /* * line on the screen.                                    **/
    /* *                                                        **/
    /* * this statement group was changed to use the 'if in'    **/
    /* * feature of csp.  the subscript, ezetst, is incremented **/
    /* * after the first hit and starts at 'n' position to      **/
    /* * retrieve the second record.  this happens until the    **/
    /* * end of the array is reached and is much faster than    **/
    /* * moving each member of the table and then doing a       **/
    /* * compare. (Ref: CSP Ver. 3:  Performance Characteristics**/
    /* * and Recommendations)                                   **/
    /* ***********************************************************/

                  /* opasub = xobtbl index (from op0q055)*/
                  /* opasub1 = save ezetst position in xvotbl*/
                  /* opasub2 = map select field index(from 055)*/




   /* ********** TCS INCLUDE BEGIN **********/


  set VXVO0001 empty;
  set SQLCA empty;
  set OPVREC empty;
  VXVO0001.XOBCD = XOBTBL.XOBCD[OPASUB]; /* valid base order type*/
  VXVO0001.XXXSTAT = "A"; /* active status code*/

  call "VXVO0001" ("S6", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VXVO0001";
    TA1REC.TA1TBLKE = VXVO0001-KEY;
    TA1REC.TA1LOCAT[3] = "OP0QS55";
    TA1REC.TA1LOCAT[4] = "VXVO0001";
    OP0QSZZ();
  else

    OPVREC.OPVCOUFL = "N"; /* count flag for xsocd occurence.*/
    while (OPVREC.OPVCOUFL == "N"
     && SQLCA.VAGen_SQLCODE != +100)
      call "VXVO0001" ("N6", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};

      if (SQLCA.VAGen_SQLCODE == 0)
        if (OPDREC.XSOCD > " ") /* make sure its not blank*/
          if (VXVO0001.XSOCD in OPDREC.XSOCD) /* valid salesoffice code*/
            OP0QM006.OP0QMFLG[OPASUB2] = "*"; /* set flag in map*/
            OPVREC.OPVCOUFL = "Y";
          end
        end
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          /* next sentence*/
        else
          TA1REC.TA1DBASE = "DCORP";
          TA1REC.TA1TBLVU = "VXVO0001";
          TA1REC.TA1TBLKE = VXVO0001-KEY;
          TA1REC.TA1LOCAT[3] = "OP0QS55";
          TA1REC.TA1LOCAT[4] = "VXVO0001";
          OP0QSZZ();
        end
      end
    end
  end

  call "VXVO0001" ("C6", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VXVO0001";
    TA1REC.TA1TBLKE = VXVO0001-KEY;
    TA1REC.TA1LOCAT[3] = "OP0QS55";
    TA1REC.TA1LOCAT[4] = "VXVO0001";
    OP0QSZZ();
  end
   /* **************** TCS INCLUDE END ********************/

   /* *************************************************************/
end // end OP0QS55

// edit/save sales offices
Function OP0QS5A()



      /* *********************************************************/
      /* * save entered sales offices                           **/
      /* *********************************************************/



  if (OP0QM005 is modified) /* set update if modified*/
    OP0QW01.OP0QWUPD = "Y"; /* set update flag*/
    OP0QW01.OP0QWUPH = "Y"; /* set update header flag*/
  end

  OPDREC.OPDXSOCD = " "; /* clear array*/
  OPAREC.OPASUB = 1; /* init map index*/
  OPAREC.OPASUB1 = 0; /* init rec index*/
  while (OPAREC.OPASUB <= 26) /* max table size*/
    if (OP0QM005.OP0QMSEL[OPASUB] > " ")
      OPAREC.OPASUB1 = OPAREC.OPASUB1 + 1; /* rec index*/
      set OP0QM005.OP0QMSEL[OPASUB] normal;
      OPDREC.XSOCD[OPASUB1] = OP0QM005.XSOCD[OPASUB];
    end
    OPAREC.OPASUB = OPAREC.OPASUB + 1; /* map index*/
  end



   /* *************************************************************/
end // end OP0QS5A

// set mdt's on if modified
Function OP0QS60()



      /* *********************************************************/
      /* * set mdt's in fields for the case of invalid aid key  **/
      /* * this allows the user to press the correct aid key    **/
      /* * without having to re-enter the data                  **/
      /* *********************************************************/


  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex <= 26)
    if (OP0QM006.OP0QMSEL[sysVar.arrayIndex] is modified) /* xot code*/
      set OP0QM006.OP0QMSEL[sysVar.arrayIndex] modified;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end



   /* *************************************************************/
end // end OP0QS60

// edit fields
Function OP0QS61()



      /* *********************************************************/
      /* * this statement group controls the field editing.     **/
      /* *                                                      **/
      /* * the fields are edited in reverse order so that the   **/
      /* * the cursor and error message will be related to the  **/
      /* * top most error.  any errors below the top most most  **/
      /* * error will still be highlighted.                     **/
      /* *********************************************************/



      /* get out if not update mode*/

  if (COMMAREA.CAALVL[1] != "Y") /* update disabled*/
    return;
  end


      /* init error diag areas*/

  TA1REC.TA1LOCAT[2] = "OP0QS61 "; /* statement group*/


      /* edit/save base ord type entries*/

  OP0QS6A();



   /* *************************************************************/
end // end OP0QS61

// edit/save order types
Function OP0QS6A()



      /* *********************************************************/
      /* * edit to ensure at least 1 prod stat has been selected**/
      /* *********************************************************/



  if (OP0QM006 is modified) /* set update if modified*/
    OP0QW01.OP0QWUPD = "Y"; /* set update flag*/
    OP0QW01.OP0QWUPH = "Y"; /* set update header flag*/
  end

  OPDREC.OPDXOBCD = " "; /* clear array*/
  OPAREC.OPASUB = 1; /* init map index*/
  OPAREC.OPASUB1 = 0; /* init rec index*/
  while (OPAREC.OPASUB <= 26) /* max table size*/
    if (OP0QM006.OP0QMSEL[OPASUB] > " ")
      OPAREC.OPASUB1 = OPAREC.OPASUB1 + 1; /* rec index*/
      set OP0QM006.OP0QMSEL[OPASUB] normal;
      OPDREC.XOBCD[OPASUB1] = OP0QM006.XOBCD[OPASUB];
    end
    OPAREC.OPASUB = OPAREC.OPASUB + 1; /* map index*/
  end


      /* check to see if any base order types were selected*/

  if (OPAREC.OPASUB1 == 0)
    set OP0QM006.OP0QMSEL[1] cursor, modified, bold;
    OPAREC.OPAERR = "Y"; /* set error flag*/
    converseLib.validationFailed(254); /* at least one base order type...*/
  end



   /* *************************************************************/
end // end OP0QS6A

// set mdt's on if modified
Function OP0QS70()



      /* *********************************************************/
      /* * set mdt's in fields for the case of invalid aid key  **/
      /* * this allows the user to press the correct aid key    **/
      /* * without having to re-enter the data                  **/
      /* *********************************************************/


      /* if not updatable, then none modified*/

  if (COMMAREA.CAALVL[1] != "Y") /* not updatable*/
    return;
  end


  sysVar.arrayIndex = 1; /* init map index*/

  while (sysVar.arrayIndex <= 90)

    if (OP0QM007.SY1STNBR[sysVar.arrayIndex] is modified) /* style*/
      set OP0QM007.SY1STNBR[sysVar.arrayIndex] modified;
    else
      set OP0QM007.SY1STNBR[sysVar.arrayIndex] normal;
    end

    if (OP0QM007.SY2CLRID[sysVar.arrayIndex] is modified) /* color*/
      set OP0QM007.SY2CLRID[sysVar.arrayIndex] modified;
    else
      set OP0QM007.SY2CLRID[sysVar.arrayIndex] normal;
    end

    if (OP0QM007.XDMCD[sysVar.arrayIndex] is modified) /* dimension*/
      set OP0QM007.XDMCD[sysVar.arrayIndex] modified;
    else
      set OP0QM007.XDMCD[sysVar.arrayIndex] normal;
    end

    sysVar.arrayIndex = sysVar.arrayIndex + 1; /* map index*/
  end



   /* *************************************************************/
end // end OP0QS70

// edit control for cancel screen
Function OP0QS71()



      /* *********************************************************/
      /* * control edit process for cancel screen               **/
      /* *********************************************************/


  OP0QW01.OP0QWCHG = "N";
  OPAREC.OPASUB = 90; /* init map index*/
  while (OPAREC.OPASUB >= 1) /* map index*/
    if (OP0QM007.SY1STNBR[OPASUB] is modified /* style*/
     || OP0QM007.SY2CLRID[OPASUB] is modified /* color*/
     || OP0QM007.XDMCD[OPASUB] is modified)   /* dimension*/
      OP0QW01.OP0QWCHG = "Y";
      OP0QS72(); /* edit change*/
    end
    OPAREC.OPASUB = OPAREC.OPASUB - 1; /* map index*/
  end


      /* verify that a product is not duplicated on the request*/

  if (COMMAREA.CAALVL[1] == "Y") /* update enabled*/
    if (OPAREC.OPAERR != "Y" /* if no error*/
     && OP0QW01.OP0QWCHG == "Y") /* and something changed*/
      OP0QS79(); /* edit for prod duplication*/
    end
  end



   /* *************************************************************/
end // end OP0QS71

// validate product
Function OP0QS72()



      /* *********************************************************/
      /* * this statement group validates and saves the         **/
      /* * style/color/dim for the cancel screen                **/
      /* *********************************************************/


      /* tab-sub = (scr-sub - 1) * 90 + opasub*/
                                  /* (opasub = map index)*/

  OPAREC.OPASUB1 = OP0QW02.OP0QWSCR - 1; /* table index*/
  OPAREC.OPASUB1 = OPAREC.OPASUB1 * 90; /* table index*/
  OPAREC.OPASUB1 = OPAREC.OPASUB1 + OPAREC.OPASUB; /* table index*/


      /* style = color = dimension = spaces means: delete*/
        /* if review, then set delete status (prod on file)*/
          /* else*/
           /* then clear entry (not review = being entered)*/

  if (OP0QM007.SY1STNBR[OPASUB] == " " /* check for null style*/
   && OP0QM007.SY2CLRID[OPASUB] == " " /* check for null color*/
   && OP0QM007.XDMCD[OPASUB] == " ")   /* check for null dimension*/
    if (OP0QW02.SY1STNBR[OPASUB1] > " " /* entry exists*/
     && OP0QW02.OP0QWACT[OPASUB1] != "D") /* not delete flagged*/
      if (OP0QW02.OP0QWACT[OPASUB1] != "A") /* not add flagged*/
        OP0QW02.OP0QWACT[OPASUB1] = "D"; /* set delete*/
        OP0QW02.OP0QWDEL = OP0QW02.OP0QWDEL + 1; /* delete count*/
        OP0QW02.OP0QWNPR = OP0QW02.OP0QWNPR - 1; /* product count*/
        OP0QW01.OP0QWUPD = "Y"; /* set update flag*/
        OP0QW01.OP0QWUPP = "Y"; /* set update product flag*/
      else
        OP0QW02.OP0QWENT[OPASUB1] = " "; /* clear product entry*/
        OP0QW02.OP0QWNPR = OP0QW02.OP0QWNPR - 1; /* product count*/
      end
    end
    set OP0QM007.SY1STNBR[OPASUB] normal;
    set OP0QM007.SY2CLRID[OPASUB] normal;
    set OP0QM007.XDMCD[OPASUB] normal;
    return; /* get out*/
  end


      /* set color to '00 ' if null*/
      /* set dimension to '00' if null*/

  if (OP0QM007.SY2CLRID[OPASUB] == " ") /* check for null color*/
    OP0QM007.SY2CLRID[OPASUB] = "00 ";
  end

  if (OP0QM007.XDMCD[OPASUB] == " ") /* check for null dimension*/
    OP0QM007.XDMCD[OPASUB] = "00";
  end


      /* issue select unique to get product*/

  SYCREC.XGPCD = OPDREC.XGPCD; /* load key*/
  SYCREC.SY1STNBR = OP0QM007.SY1STNBR[OPASUB]; /* load key*/
  SYCREC.SY2CLRID = OP0QM007.SY2CLRID[OPASUB]; /* load key*/
  SYCREC.XDMCD = OP0QM007.XDMCD[OPASUB]; /* load key*/
  TA1REC.TA1LOCAT[2] = "OP0QS72 "; /* statement group*/
  OP0QSZV(); /* select unique*/

      /* if not found, then product number is invalid*/

   /* CANADA 09/11/95*/

  if (SQLCA.VAGen_SQLCODE == 0) /* CANA product found*/
    if (OP0QW01.XCTCD == "CANA") /* CANA Canadian user id*/
      TA1REC.TA1PGMNM = "OP0Q"; /* CANA program name*/
      TA1REC.TA1LOC = "OP0QS72"; /* CANA statement group*/
      set WSY2000 empty;
      WSY2000.XDR-PROD-REG-CD = "05";
      OP0Q-CALL-SY2000(); /* CANA call SY2000 to validate Canadian*/
      if (WSY2000.WSY2000-RETURN-CODE == 0) /* CANA row found*/
  /* continue*/
      else /* CANA*/
        if (WSY2000.WSY2000-RETURN-CODE == 02) /* CANA row not found*/
          converseLib.validationFailed(911); /* CANA product doesn't exist for rgn*/
          OPAREC.OPAERR = "Y"; /* CANA set error flag*/
          OP0QW01.OP0QWERR = "Y"; /* CANA set error flag*/
          set OP0QM007.SY1STNBR[OPASUB] cursor, modified, bold; /* CANA*/
          set OP0QM007.SY2CLRID[OPASUB] modified, bold; /* CANA*/
          set OP0QM007.XDMCD[OPASUB] modified, bold; /* CANA*/
          return; /* CANA*/
        else /* CANA fatal error or database busy*/
          TA1REC.TA1DBASE = "DPROD"; /* CANA database name*/
          TA1REC.TA1TBLVU = "VSYREG02"; /* CANA table view*/
          TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* CANA key value*/
          TA1REC.TA1LOCAT[3] = "OP0QS72"; /* CANA statement group*/
          TA1REC.TA1LOCAT[4] = "SY2000"; /* CANA i/o mod name*/
          OP0QSZZ(); /* CANA abort*/
        end
      end
    else
      if (OPDREC.XGPCD == "03")
        if (COMMAREA.XDVCD == "02" /* userid assigned to europe*/
         || COMMAREA.XDVCD == "03") /* userid assigned to asia*/
          /* continue processing*/
        else
          TA1REC.TA1PGMNM = "OP0Q"; /* program name*/
          TA1REC.TA1LOC = "OP0QS72"; /* statement group*/
          set WSY2000 empty;
          WSY2000.XDR-PROD-REG-CD = "01";
          OP0Q-CALL-SY2000(); /* call SY2000 to validate*/
          if (WSY2000.WSY2000-RETURN-CODE == 0) /* row found*/
  /* continue*/
          else
            if (WSY2000.WSY2000-RETURN-CODE == 02) /* row not found*/
              converseLib.validationFailed(911); /* product doesn't exist for rgn*/
              OPAREC.OPAERR = "Y"; /* set error flag*/
              OP0QW01.OP0QWERR = "Y"; /* set error flag*/
              set OP0QM007.SY1STNBR[OPASUB] cursor, modified, bold;
              set OP0QM007.SY2CLRID[OPASUB] modified, bold;
              set OP0QM007.XDMCD[OPASUB] modified, bold;
              return;
            else /* fatal error or database busy*/
              TA1REC.TA1DBASE = "DPROD"; /* database name*/
              TA1REC.TA1TBLVU = "VSYREG02"; /* table view*/
              TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* key value*/
              TA1REC.TA1LOCAT[3] = "OP0QS72"; /* statement group*/
              TA1REC.TA1LOCAT[4] = "SY2000"; /* i/o mod name*/
              OP0QSZZ(); /* abort*/
            end
          end
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
      converseLib.validationFailed(257); /* product does not exist*/
      OPAREC.OPAERR = "Y"; /* set error flag*/
      set OP0QM007.SY1STNBR[OPASUB] cursor, modified, bold;
      set OP0QM007.SY2CLRID[OPASUB] modified, bold;
      set OP0QM007.XDMCD[OPASUB] modified, bold;
      return;
    end
  end

      /* if table entry blank, then add the product*/

  if (OP0QW02.SY1STNBR[OPASUB1] == " ")
    OP0QW02.OP0QWACT[OPASUB1] = "A"; /* action add*/
    OP0QW02.SY1STNBR[OPASUB1] = OP0QM007.SY1STNBR[OPASUB];
    OP0QW02.SY2CLRID[OPASUB1] = OP0QM007.SY2CLRID[OPASUB];
    OP0QW02.XDMCD[OPASUB1] = OP0QM007.XDMCD[OPASUB];
    OP0QW02.OP0QWNPR = OP0QW02.OP0QWNPR + 1; /* product count*/
    OP0QW01.OP0QWUPD = "Y"; /* set update flag*/
    OP0QW01.OP0QWUPP = "Y"; /* set update product flag*/
    OP0QW01.OP0QWMPR = "Y"; /* set prod on curr scr flag*/
    set OP0QM007.SY1STNBR[OPASUB] normal;
    set OP0QM007.SY2CLRID[OPASUB] normal;
    set OP0QM007.XDMCD[OPASUB] normal;
    if (OPAREC.OPASUB1 > OP0QW02.OP0QWPRD) /* if gt max*/
      OP0QW02.OP0QWPRD = OPAREC.OPASUB1; /* set new max*/
    end
    return; /* get out*/
  end

      /* table entry not blank, see if product is the same,*/
      /* otherwise error since you can't replace an entry*/
      /* without a delete in a previous pass.*/

  if (OP0QM007.SY1STNBR[OPASUB] == OP0QW02.SY1STNBR[OPASUB1] /* style*/
   && OP0QM007.SY2CLRID[OPASUB] == OP0QW02.SY2CLRID[OPASUB1] /* color*/
   && OP0QM007.XDMCD[OPASUB] == OP0QW02.XDMCD[OPASUB1])      /* dimension*/
    if (OP0QW02.OP0QWACT[OPASUB1] == "D") /* delete*/
      OP0QW02.OP0QWACT[OPASUB1] = " "; /* set to no action*/
      OP0QW02.OP0QWDEL = OP0QW02.OP0QWDEL - 1; /* delete count*/
      OP0QW02.OP0QWNPR = OP0QW02.OP0QWNPR + 1; /* product count*/
    end
    set OP0QM007.SY1STNBR[OPASUB] normal;
    set OP0QM007.SY2CLRID[OPASUB] normal;
    set OP0QM007.XDMCD[OPASUB] normal;
    return; /* get out*/
  else
    converseLib.validationFailed(258); /* cannot replace product entry*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0QM007.SY1STNBR[OPASUB] cursor, modified, bold;
    set OP0QM007.SY2CLRID[OPASUB] modified, bold;
    set OP0QM007.XDMCD[OPASUB] modified, bold;
    return;
  end

end // end OP0QS72

// edit for product duplication
Function OP0QS79()



    /* ***********************************************************/
    /* * edit to ensure that a product has not been duplicated  **/
    /* * on the request. checks the current screen against the  **/
    /* * rest of the table.                                     **/
    /* *                                                        **/
    /* * this statement group was changed to use the 'if in'    **/
    /* * feature of csp.  the subscript, ezetst, is incremented **/
    /* * after the first hit and starts at 'n' position to      **/
    /* * retrieve the second record.  this happens until the    **/
    /* * end of the array is reached and is much faster than    **/
    /* * moving each member of the table and then doing a       **/
    /* * compare. (Ref: CSP Ver. 3: Performance Characteristics **/
    /* * and Recommendations)                                   **/
    /* ***********************************************************/

   /* subscript use: ezetst = style array index (whole table)*/
                  /* opasub1 = style array index (screen image)*/
                  /* opasub2 = actual screen location(from s71)*/

      /* the following subscript calculations are used to check*/
      /* if a particular entry in the table is shown on the*/
      /* current screen.*/

      /* screen to tab-sub low = (scr-sub - 1) * 90 + 1*/

  OP0QW02.OP0QWSTL = OP0QW02.OP0QWSCR - 1; /* table index low*/
  OP0QW02.OP0QWSTL = OP0QW02.OP0QWSTL * 90; /* table index low*/
  OP0QW02.OP0QWSTL = OP0QW02.OP0QWSTL + 1; /* table index low*/

      /* screen to tab-sub hi  =  scr-sub * 90*/

  OP0QW02.OP0QWSTH = OP0QW02.OP0QWSCR * 90; /* table index high*/

  OPAREC.OPASUB1 = OP0QW02.OP0QWSTH; /* init screen max*/
  sysVar.arrayIndex = 1; /* set index for array in op0qw02*/

  while (OPAREC.OPASUB1 >= OP0QW02.OP0QWSTL) /* screen index*/
    if (OP0QW02.SY1STNBR[OPASUB1] > " " /* style exists*/
     && OP0QW02.OP0QWACT[OPASUB1] != "D") /* check for delete(screen)*/
      if (OP0QW02.SY1STNBR[OPASUB1] in OP0QW02.SY1STNBR from sysVar.arrayIndex)
        if (OP0QW02.SY2CLRID[sysVar.arrayIndex] == OP0QW02.SY2CLRID[OPASUB1]
         && OP0QW02.XDMCD[sysVar.arrayIndex] == OP0QW02.XDMCD[OPASUB1]
         && OP0QW02.OP0QWACT[sysVar.arrayIndex] != "D" /* check for delete(array)*/
         && sysVar.arrayIndex != OPAREC.OPASUB1)       /* make sure we didn't find ourself*/
          OPAREC.OPASUB2 = OPAREC.OPASUB1 - OP0QW02.OP0QWSTL;
          OPAREC.OPASUB2 = OPAREC.OPASUB2 + 1; /* calculate screen index*/
          set OP0QM007.SY1STNBR[OPASUB2] cursor, bold;
          set OP0QM007.SY2CLRID[OPASUB2] bold;
          set OP0QM007.XDMCD[OPASUB2] bold;
          OPAREC.OPAERR = "Y"; /* set error flag*/
          converseLib.validationFailed(268); /* product has already been used on request*/
          OPAREC.OPASUB1 = OPAREC.OPASUB1 - 1; /* decrement subscript*/
          sysVar.arrayIndex = 1; /* reset array index*/
        else
          sysVar.arrayIndex = sysVar.arrayIndex + 1; /* increment index*/
        end
      else
        OPAREC.OPASUB1 = OPAREC.OPASUB1 - 1; /* style wasn't found*/
        sysVar.arrayIndex = 1; /* reset array index*/
      end
    else
      OPAREC.OPASUB1 = OPAREC.OPASUB1 - 1; /* style was blank*/
      sysVar.arrayIndex = 1; /* reset array index*/
    end
  end



   /* *************************************************************/
end // end OP0QS79

// edit control for replace
Function OP0QS81()



      /* *********************************************************/
      /* * control edit process for replace screen              **/
      /* *********************************************************/


  OPAREC.OPASUB = 34; /* init map index*/
  while (OPAREC.OPASUB >= 1) /* map index*/

    OP0QW01.OP0QWERR = "N"; /* clear error for this loop*/

    OP0QS84(); /* edit price vary flag*/

    OP0QS83(); /* edit price*/

    OP0QS86(); /* edit change (to prod)*/

    OP0QS82(); /* edit change (from prod)*/

        /* do relationship checks if no error*/

    if (OP0QW01.OP0QWERR != "Y" /* if no error this loop*/
     && OP0QM008.SY1STNBR[OPASUB] > " ")
      OP0QS87(); /* check relationships*/
    end

    OPAREC.OPASUB = OPAREC.OPASUB - 1; /* map index*/
  end


      /* verify that a product is not duplicated on the request*/

  if (COMMAREA.CAALVL[1] == "Y") /* update enabled*/
    if (OPAREC.OPAERR != "Y") /* if no error*/
      OP0QS89(); /* edit for prod duplication*/
    end
  end



   /* *************************************************************/
end // end OP0QS81

// validate "from" product
Function OP0QS82()



      /* *********************************************************/
      /* * this statement group validates and saves the         **/
      /* * "from" style/color/dim                               **/
      /* *********************************************************/


      /* set subs for table and map equal for this routine*/

  OPAREC.OPASUB1 = OPAREC.OPASUB; /* sub1 eq table index*/


      /* style = color = dimension = spaces means: delete*/
        /* if review, then set delete status (prod on file)*/
          /* else*/
           /* then clear entry (not review = being entered)*/

  if (OP0QM008.SY1STNBR[OPASUB] == " " /* check for null style*/
   && OP0QM008.SY2CLRID[OPASUB] == " " /* check for null color*/
   && OP0QM008.XDMCD[OPASUB] == " ")   /* check for null dimension*/
    if (OP0QW02.SY1STNBR[OPASUB1] > " " /* entry exists*/
     && OP0QW02.OP0QWACT[OPASUB1] != "D") /* not delete flagged*/
      if (OP0QW02.OP0QWACT[OPASUB1] != "A") /* not add flagged*/
        OP0QW02.OP0QWACT[OPASUB1] = "D"; /* set delete*/
        OP0QW02.OP0QWDEL = OP0QW02.OP0QWDEL + 1; /* delete count*/
        OP0QW02.OP0QWNPR = OP0QW02.OP0QWNPR - 1; /* product count*/
        OP0QW01.OP0QWUPD = "Y"; /* set update flag*/
        OP0QW01.OP0QWUPP = "Y"; /* set update product flag*/
      else
        OP0QW02.OP0QWENT[OPASUB1] = " "; /* clear product entry*/
        OP0QW03.OP0QWAR3[OPASUB1] = " "; /* clear product entry*/
        set OP0QW05 empty;
        OP0QW05.OP2PRCVF = "N"; /* init price vary flag*/
        OP0QW04.OP0QWPAR[OPASUB1] = OP0QW05.OP0QWPAR; /* clear price*/
        OP0QW02.OP0QWNPR = OP0QW02.OP0QWNPR - 1; /* product count*/
      end
    end
    set OP0QM008.SY1STNBR[OPASUB] normal;
    set OP0QM008.SY2CLRID[OPASUB] normal;
    set OP0QM008.XDMCD[OPASUB] normal;
    OP0QM008.OP2SSTYN[OPASUB] = " ";
    OP0QM008.OP2SCLCD[OPASUB] = " ";
    OP0QM008.OP2SDMCD[OPASUB] = " ";
    set OP0QM008.OP2SSTYN[OPASUB] normal;
    set OP0QM008.OP2SCLCD[OPASUB] normal;
    set OP0QM008.OP2SDMCD[OPASUB] normal;
    OP0QM008.SY5PRCUN[OPASUB] = 0;
    set OP0QM008.SY5PRCUN[OPASUB] normal;
    OP0QM008.OP2PRCVF[OPASUB] = " ";
    set OP0QM008.OP2PRCVF[OPASUB] normal;
    return; /* get out*/
  end


      /* set color to '00 ' if null*/
      /* set dimension to '00' if null*/

  if (OP0QM008.SY2CLRID[OPASUB] == " ") /* check for null color*/
    OP0QM008.SY2CLRID[OPASUB] = "00 ";
  end

  if (OP0QM008.XDMCD[OPASUB] == " ") /* check for null dimension*/
    OP0QM008.XDMCD[OPASUB] = "00";
  end


      /* issue select unique to get product*/

  SYCREC.XGPCD = OPDREC.XGPCD; /* load key*/
  SYCREC.SY1STNBR = OP0QM008.SY1STNBR[OPASUB]; /* load key*/
  SYCREC.SY2CLRID = OP0QM008.SY2CLRID[OPASUB]; /* load key*/
  SYCREC.XDMCD = OP0QM008.XDMCD[OPASUB]; /* load key*/
  TA1REC.TA1LOCAT[2] = "OP0QS82 "; /* statement group*/
  OP0QSZV(); /* select unique*/

   /* CANADA 09/11/95*/

  if (SQLCA.VAGen_SQLCODE == 0) /* CANA product found*/
    if (OP0QW01.XCTCD == "CANA") /* CANA Canadian user id*/
      TA1REC.TA1PGMNM = "OP0Q"; /* CANA program name*/
      TA1REC.TA1LOC = "OP0QS82"; /* CANA statement group*/
      set WSY2000 empty;
      WSY2000.XDR-PROD-REG-CD = "05";
      OP0Q-CALL-SY2000(); /* CANA call SY2000 to validate Canadian*/
      if (WSY2000.WSY2000-RETURN-CODE == 0) /* CANA row found*/
  /* continue*/
      else /* CANA*/
        if (WSY2000.WSY2000-RETURN-CODE == 02) /* CANA row not found*/
          converseLib.validationFailed(911); /* CANA product doesn't exist for rgn*/
          OPAREC.OPAERR = "Y"; /* CANA set error flag*/
          OP0QW01.OP0QWERR = "Y"; /* CANA set error flag*/
          set OP0QM008.SY1STNBR[OPASUB] cursor, modified, bold; /* CANA*/
          set OP0QM008.SY2CLRID[OPASUB] modified, bold; /* CANA*/
          set OP0QM008.XDMCD[OPASUB] modified, bold; /* CANA*/
          return; /* CANA*/
        else /* CANA fatal error or database busy*/
          TA1REC.TA1DBASE = "DPROD"; /* CANA database name*/
          TA1REC.TA1TBLVU = "VSYREG02"; /* CANA table view*/
          TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* CANA key value*/
          TA1REC.TA1LOCAT[3] = "OP0QS82"; /* CANA statement group*/
          TA1REC.TA1LOCAT[4] = "SY2000"; /* CANA i/o mod name*/
          OP0QSZZ(); /* CANA abort*/
        end
      end
    else
      if (OPDREC.XGPCD == "03")
        if (COMMAREA.XDVCD == "02" /* userid assigned to europe*/
         || COMMAREA.XDVCD == "03") /* userid assigned to asia*/

          /* continue processing*/
        else
          TA1REC.TA1PGMNM = "OP0Q"; /* program name*/
          TA1REC.TA1LOC = "OP0QS82"; /* statement group*/
          set WSY2000 empty;
          WSY2000.XDR-PROD-REG-CD = "01";
          OP0Q-CALL-SY2000(); /* call SY2000 to validate*/
          if (WSY2000.WSY2000-RETURN-CODE == 0) /* row found*/
  /* continue*/
          else
            if (WSY2000.WSY2000-RETURN-CODE == 02) /* row not found*/
              converseLib.validationFailed(911); /* product doesn't exist for rgn*/
              OPAREC.OPAERR = "Y"; /* set error flag*/
              OP0QW01.OP0QWERR = "Y"; /* set error flag*/
              set OP0QM008.SY1STNBR[OPASUB] cursor, modified, bold;
              set OP0QM008.SY2CLRID[OPASUB] modified, bold;
              set OP0QM008.XDMCD[OPASUB] modified, bold;
              return;
            else /* fatal error or database busy*/
              TA1REC.TA1DBASE = "DPROD"; /* database name*/
              TA1REC.TA1TBLVU = "VSYREG02"; /* table view*/
              TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* key value*/
              TA1REC.TA1LOCAT[3] = "OP0QS82"; /* statement group*/
              TA1REC.TA1LOCAT[4] = "SY2000"; /* i/o mod name*/
              OP0QSZZ(); /* abort*/
            end
          end
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
      converseLib.validationFailed(257); /* product does not exist*/
      OPAREC.OPAERR = "Y"; /* set error flag*/
      OP0QW01.OP0QWERR = "Y"; /* set error flag*/
      set OP0QM008.SY1STNBR[OPASUB] cursor, modified, bold;
      set OP0QM008.SY2CLRID[OPASUB] modified, bold;
      set OP0QM008.XDMCD[OPASUB] modified, bold;
      return;
    end
  end

      /* if table entry blank, then add the product*/

  if (OP0QW02.SY1STNBR[OPASUB1] == " ")
    OP0QW02.OP0QWACT[OPASUB1] = "A"; /* action add*/
    OP0QW02.SY1STNBR[OPASUB1] = OP0QM008.SY1STNBR[OPASUB];
    OP0QW02.SY2CLRID[OPASUB1] = OP0QM008.SY2CLRID[OPASUB];
    OP0QW02.XDMCD[OPASUB1] = OP0QM008.XDMCD[OPASUB];
    OP0QW02.OP0QWNPR = OP0QW02.OP0QWNPR + 1; /* product count*/
    OP0QW01.OP0QWUPD = "Y"; /* set update flag*/
    OP0QW01.OP0QWUPP = "Y"; /* set update product flag*/
    if (OPAREC.OPASUB1 > OP0QW02.OP0QWPRD) /* if gt max*/
      OP0QW02.OP0QWPRD = OPAREC.OPASUB1; /* set new max*/
    end
    set OP0QM008.SY1STNBR[OPASUB] normal;
    set OP0QM008.SY2CLRID[OPASUB] normal;
    set OP0QM008.XDMCD[OPASUB] normal;
    return; /* get out*/
  end


      /* table entry not blank, see if product is the same,*/
      /* otherwise error since you can't replace an entry*/
      /* without a delete in a previous pass.*/

  if (OP0QM008.SY1STNBR[OPASUB] == OP0QW02.SY1STNBR[OPASUB1] /* style*/
   && OP0QM008.SY2CLRID[OPASUB] == OP0QW02.SY2CLRID[OPASUB1] /* color*/
   && OP0QM008.XDMCD[OPASUB] == OP0QW02.XDMCD[OPASUB1])      /* dimension*/
    OP0QM008.OP2SSTYN[OPASUB] = OP0QW03.OP2SSTYN[OPASUB1];
    OP0QM008.OP2SCLCD[OPASUB] = OP0QW03.OP2SCLCD[OPASUB1];
    OP0QM008.OP2SDMCD[OPASUB] = OP0QW03.OP2SDMCD[OPASUB1];
    OP0QW05.OP0QWPAR = OP0QW04.OP0QWPAR[OPASUB1];
    OP0QM008.SY5PRCUN[OPASUB] = OP0QW05.SY5PRCUN[1];
    if (OP0QM008.OP2PRCVF[OPASUB] != "Y") /* variance not requested*/
      if (OP0QW05.OP2PRCVF == "Y")
        OP0QM008.OP2PRCVF[OPASUB] = "*";
      else
        OP0QM008.OP2PRCVF[OPASUB] = " ";
      end
    end
    if (OP0QW02.OP0QWACT[OPASUB1] == "D") /* delete*/
      OP0QW02.OP0QWACT[OPASUB1] = "C"; /* set to change*/
      OP0QW02.OP0QWDEL = OP0QW02.OP0QWDEL - 1; /* delete count*/
      OP0QW02.OP0QWNPR = OP0QW02.OP0QWNPR + 1; /* product count*/
    end
    set OP0QM008.SY1STNBR[OPASUB] normal;
    set OP0QM008.SY2CLRID[OPASUB] normal;
    set OP0QM008.XDMCD[OPASUB] normal;
    set OP0QM008.OP2SSTYN[OPASUB] normal;
    set OP0QM008.OP2SCLCD[OPASUB] normal;
    set OP0QM008.OP2SDMCD[OPASUB] normal;
    set OP0QM008.SY5PRCUN[OPASUB] normal;
    set OP0QM008.OP2PRCVF[OPASUB] normal;
    return; /* get out*/
  else
    converseLib.validationFailed(258); /* cannot replace product entry*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0QW01.OP0QWERR = "Y"; /* set error flag*/
    set OP0QM008.SY1STNBR[OPASUB] cursor, modified, bold;
    set OP0QM008.SY2CLRID[OPASUB] modified, bold;
    set OP0QM008.XDMCD[OPASUB] modified, bold;
    return;
  end

end // end OP0QS82

// edit price
Function OP0QS83()



      /* *********************************************************/
      /* * this statement group validates the price entered     **/
      /* *********************************************************/


      /* set subs for table and map equal for this routine*/

  OPAREC.OPASUB1 = OPAREC.OPASUB; /* sub1 eq table index*/


      /* clear price if no style*/

  if (OP0QM008.SY1STNBR[OPASUB] <= " "
   && OP0QM008.SY2CLRID[OPASUB] <= " "
   && OP0QM008.XDMCD[OPASUB] <= " ")
    OP0QM008.SY5PRCUN[OPASUB] = 0;
    set OP0QM008.SY5PRCUN[OPASUB] normal;
    return;
  end


      /* edit/save price*/

  if (OP0QM008.SY5PRCUN[OPASUB] < 0)
    converseLib.validationFailed(266); /* price is not valid*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0QW01.OP0QWERR = "Y"; /* set error flag*/
    set OP0QM008.SY5PRCUN[OPASUB] cursor, modified, bold;
  else
    OP0QW01.OP0QWUPD = "Y"; /* set update flag*/
    OP0QW01.OP0QWUPP = "Y"; /* set update product flag*/
    if (OP0QM008.SY5PRCUN[OPASUB] == 0)
      set OP0QW05 empty;
      OP0QW05.OP2PRCVF = "N";
      if (OP0QM008.OP2PRCVF[OPASUB] != "Y")
        OP0QM008.OP2PRCVF[OPASUB] = " ";
      end
    else
      OP0QW05.OP0QWPAR = OP0QW04.OP0QWPAR[OPASUB1];
    end
    OP0QW05.SY5PRCUN[1] = OP0QM008.SY5PRCUN[OPASUB];
    OP0QW04.OP0QWPAR[OPASUB1] = OP0QW05.OP0QWPAR;
    set OP0QM008.SY5PRCUN[OPASUB] normal;
    if (OP0QW02.OP0QWACT[OPASUB1] == " ")
      OP0QW02.OP0QWACT[OPASUB1] = "C"; /* set change action*/
    end
  end



   /* *************************************************************/
end // end OP0QS83

// edit price vary flag
Function OP0QS84()



      /* *********************************************************/
      /* * this statement group validates the price vary flag   **/
      /* * (price by size request flag)                         **/
      /* *********************************************************/


      /* set subs for table and map equal for this routine*/

  OPAREC.OPASUB1 = OPAREC.OPASUB; /* sub1 eq table index*/


      /* clear vary flag if no style*/

  if (OP0QM008.SY1STNBR[OPASUB] <= " "
   && OP0QM008.SY2CLRID[OPASUB] <= " "
   && OP0QM008.XDMCD[OPASUB] <= " ")
    OP0QM008.OP2PRCVF[OPASUB] = " ";
  end


      /* clear vary flag if 'n' and not update*/

  if (OP0QM008.OP2PRCVF[OPASUB] == "N"
   && COMMAREA.CAALVL[1] != "Y") /* updatable*/
    OP0QM008.OP2PRCVF[OPASUB] = " ";
  end


      /* edit price vary flag*/

  if (OP0QM008.OP2PRCVF[OPASUB] == "N"
   || OP0QM008.OP2PRCVF[OPASUB] == "Y"
   || OP0QM008.OP2PRCVF[OPASUB] == " "
   || OP0QM008.OP2PRCVF[OPASUB] == "*")
    set OP0QM008.OP2PRCVF[OPASUB] normal;
  else
    converseLib.validationFailed(263); /* non-zero price required*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0QW01.OP0QWERR = "Y"; /* set error flag*/
    set OP0QM008.OP2PRCVF[OPASUB] cursor, modified, bold;
    return;
  end


      /* if price vary is yes, then exit*/
      /* (triggers price by size screen)*/

  if (OP0QM008.OP2PRCVF[OPASUB] == "Y")
    return;
  end


      /* if price vary is blank, then reset field and exit*/

  if (OP0QM008.OP2PRCVF[OPASUB] <= " "
   || OP0QM008.OP2PRCVF[OPASUB] == "*")
    if (OP0QW04.OP2PRCVF[OPASUB1] == "Y")
      OP0QM008.OP2PRCVF[OPASUB] = "*";
    else
      OP0QM008.OP2PRCVF[OPASUB] = " ";
    end
    return;
  end


      /* if price vary is no, then reset price array*/

  if (COMMAREA.CAALVL[1] == "Y") /* updatable*/
    if (OP0QM008.OP2PRCVF[OPASUB] == "N")
      OP0QW01.OP0QWUPD = "Y"; /* set update flag*/
      OP0QW01.OP0QWUPP = "Y"; /* set update product flag*/
      OP0QM008.OP2PRCVF[OPASUB] = " ";
      OP0QW05.OP0QWPAR = OP0QW04.OP0QWPAR[OPASUB1];
      OP0QW05.OP2PRCVF = "N"; /* clear flag*/
      sysVar.arrayIndex = 2;
      while (sysVar.arrayIndex <= 40) /* clear all prices except (1)*/
        OP0QW05.SY5PRCUN[sysVar.arrayIndex] = 0;
        sysVar.arrayIndex = sysVar.arrayIndex + 1;
      end
      OP0QW04.OP0QWPAR[OPASUB1] = OP0QW05.OP0QWPAR;
    end
  end



   /* *************************************************************/
end // end OP0QS84

// determine if price by size
Function OP0QS85()



      /* *********************************************************/
      /* * determine if price by size requested                 **/
      /* *********************************************************/


  OPAREC.OPASUB = 1; /* init map index*/
  while (OPAREC.OPASUB <= 34 /* map index max*/
   && OPAREC.OPASUB <= OP0QW02.OP0QWPRD) /* table curr max*/
    if (OP0QM008.OP2PRCVF[OPASUB] == "Y") /* price vary flag*/
      return; /* selection found*/
    end
    OPAREC.OPASUB = OPAREC.OPASUB + 1; /* map index*/
  end


      /* check to see if none found*/

  if (OPAREC.OPASUB > 34) /* map index max*/
    OPAREC.OPASUB = 1; /* init map index*/
  end



   /* *************************************************************/
end // end OP0QS85

// validate "to" product
Function OP0QS86()



      /* *********************************************************/
      /* * this statement group validates and saves the         **/
      /* * "to" style/color/dim                                 **/
      /* *********************************************************/


      /* set subs for table and map equal for this routine*/

  OPAREC.OPASUB1 = OPAREC.OPASUB; /* sub1 eq table index*/


      /* clear "to" product if no "from" style*/

  if (OP0QM008.SY1STNBR[OPASUB] <= " "
   && OP0QM008.SY2CLRID[OPASUB] <= " "
   && OP0QM008.XDMCD[OPASUB] <= " ")
    OP0QM008.OP2SSTYN[OPASUB] = " ";
    OP0QM008.OP2SCLCD[OPASUB] = " ";
    OP0QM008.OP2SDMCD[OPASUB] = " ";
    set OP0QM008.OP2SSTYN[OPASUB] normal;
    set OP0QM008.OP2SCLCD[OPASUB] normal;
    set OP0QM008.OP2SDMCD[OPASUB] normal;
    return;
  end


      /* attempt recovery "to" product if "from" style exists*/

  if (OP0QM008.SY1STNBR[OPASUB] > " "
   && OP0QW02.SY1STNBR[OPASUB1] > " ")
    if (OP0QM008.OP2SSTYN[OPASUB] <= " ")
      OP0QM008.OP2SSTYN[OPASUB] = OP0QW03.OP2SSTYN[OPASUB1];
    end
    if (OP0QM008.OP2SCLCD[OPASUB] <= " ")
      OP0QM008.OP2SCLCD[OPASUB] = OP0QW03.OP2SCLCD[OPASUB1];
    end
    if (OP0QM008.OP2SDMCD[OPASUB] <= " ")
      OP0QM008.OP2SDMCD[OPASUB] = OP0QW03.OP2SDMCD[OPASUB1];
    end
  end


      /* set color to '00 ' if null*/
      /* set dimension to '00' if null*/

  if (OP0QM008.OP2SCLCD[OPASUB] == " ") /* check for null color*/
    OP0QM008.OP2SCLCD[OPASUB] = "00 ";
  end

  if (OP0QM008.OP2SDMCD[OPASUB] == " ") /* check for null dimension*/
    OP0QM008.OP2SDMCD[OPASUB] = "00";
  end


      /* issue select unique to get product*/

  SYCREC.XGPCD = OPDREC.XGPCD; /* load key*/
  SYCREC.SY1STNBR = OP0QM008.OP2SSTYN[OPASUB]; /* load key*/
  SYCREC.SY2CLRID = OP0QM008.OP2SCLCD[OPASUB]; /* load key*/
  SYCREC.XDMCD = OP0QM008.OP2SDMCD[OPASUB]; /* load key*/
  TA1REC.TA1LOCAT[2] = "OP0QS86 "; /* statement group*/
  OP0QSZV(); /* select unique*/


      /* if not found, then product number is invalid*/

   /* CANADA 09/11/95*/

  if (SQLCA.VAGen_SQLCODE == 0) /* CANA product found*/
    if (OP0QW01.XCTCD == "CANA") /* CANA Canadian user id*/
      TA1REC.TA1PGMNM = "OP0Q"; /* CANA program name*/
      TA1REC.TA1LOC = "OP0QS86"; /* CANA statement group*/
      set WSY2000 empty;
      WSY2000.XDR-PROD-REG-CD = "05";
      OP0Q-CALL-SY2000(); /* CANA call SY2000 to validate Canadian*/
      if (WSY2000.WSY2000-RETURN-CODE == 0) /* CANA row found*/
  /* continue*/
      else /* CANA*/
        if (WSY2000.WSY2000-RETURN-CODE == 02) /* CANA row not found*/
          converseLib.validationFailed(911); /* CANA product doesn't exist for rgn*/
          OPAREC.OPAERR = "Y"; /* CANA set error flag*/
          OP0QW01.OP0QWERR = "Y"; /* CANA set error flag*/
          set OP0QM008.OP2SSTYN[OPASUB] cursor, modified, bold; /* CANA*/
          set OP0QM008.OP2SCLCD[OPASUB] modified, bold; /* CANA*/
          set OP0QM008.OP2SDMCD[OPASUB] modified, bold; /* CANA*/
          return; /* CANA*/
        else /* CANA fatal error or database busy*/
          TA1REC.TA1DBASE = "DPROD"; /* CANA database name*/
          TA1REC.TA1TBLVU = "VSYREG02"; /* CANA table view*/
          TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* CANA key value*/
          TA1REC.TA1LOCAT[3] = "OP0QS86"; /* CANA statement group*/
          TA1REC.TA1LOCAT[4] = "SY2000"; /* CANA i/o mod name*/
          OP0QSZZ(); /* CANA abort*/
        end
      end
    else
      if (OPDREC.XGPCD == "03")
        if (COMMAREA.XDVCD == "02" /* userid assigned to europe*/
         || COMMAREA.XDVCD == "03") /* userid assigned to asia*/
          /* continue processing*/
        else
          TA1REC.TA1PGMNM = "OP0Q"; /* program name*/
          TA1REC.TA1LOC = "OP0QS86"; /* statement group*/
          set WSY2000 empty;
          WSY2000.XDR-PROD-REG-CD = "01";
          OP0Q-CALL-SY2000(); /* call SY2000 to validate*/
          if (WSY2000.WSY2000-RETURN-CODE == 0) /* row found*/
  /* continue*/
          else
            if (WSY2000.WSY2000-RETURN-CODE == 02) /* row not found*/
              converseLib.validationFailed(911); /* product doesn't exist for rgn*/
              OPAREC.OPAERR = "Y"; /* set error flag*/
              OP0QW01.OP0QWERR = "Y"; /* set error flag*/
              set OP0QM008.OP2SSTYN[OPASUB] cursor, modified, bold;
              set OP0QM008.OP2SCLCD[OPASUB] modified, bold;
              set OP0QM008.OP2SDMCD[OPASUB] modified, bold;
              return;
            else /* fatal error or database busy*/
              TA1REC.TA1DBASE = "DPROD"; /* database name*/
              TA1REC.TA1TBLVU = "VSYREG02"; /* table view*/
              TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* key value*/
              TA1REC.TA1LOCAT[3] = "OP0QS86"; /* statement group*/
              TA1REC.TA1LOCAT[4] = "SY2000"; /* i/o mod name*/
              OP0QSZZ(); /* abort*/
            end
          end
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
      converseLib.validationFailed(257); /* product does not exist*/
      OPAREC.OPAERR = "Y"; /* set error flag*/
      OP0QW01.OP0QWERR = "Y"; /* set error flag*/
      set OP0QM008.OP2SSTYN[OPASUB] cursor, modified, bold;
      set OP0QM008.OP2SCLCD[OPASUB] modified, bold;
      set OP0QM008.OP2SDMCD[OPASUB] modified, bold;
      return;
    end
  end


      /* put "to" product in table*/

  OP0QW03.OP2SSTYN[OPASUB1] = OP0QM008.OP2SSTYN[OPASUB];
  OP0QW03.OP2SCLCD[OPASUB1] = OP0QM008.OP2SCLCD[OPASUB];
  OP0QW03.OP2SDMCD[OPASUB1] = OP0QM008.OP2SDMCD[OPASUB];
  set OP0QM008.OP2SSTYN[OPASUB] normal;
  set OP0QM008.OP2SCLCD[OPASUB] normal;
  set OP0QM008.OP2SDMCD[OPASUB] normal;


      /* save record*/

  OP0QW09.SYCDATA = SYCREC.SYCDATA;



   /* *************************************************************/
end // end OP0QS86

// perform relationship checks
Function OP0QS87()



      /* *********************************************************/
      /* * perform relationship checks                          **/
      /* *********************************************************/


      /* set subs for table and map equal for this routine*/

  OPAREC.OPASUB1 = OPAREC.OPASUB; /* sub1 eq table index*/


      /* check size scale codes*/

  if (SYCREC.SY4SZSCL != OP0QW09.SY4SZSCL)
    converseLib.validationFailed(264); /* size scales do not match*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0QW01.OP0QWERR = "Y"; /* set error flag*/
    set OP0QM008.OP2SSTYN[OPASUB] cursor, modified, bold;
    set OP0QM008.OP2SCLCD[OPASUB] modified, bold;
    set OP0QM008.OP2SDMCD[OPASUB] modified, bold;
    return;
  end


      /* check size runs*/

  sysVar.arrayIndex = 1; /* set index*/
  while (sysVar.arrayIndex <= 40)
    if (SYCREC.XDVCD[sysVar.arrayIndex] != OP0QW09.XDVCD[sysVar.arrayIndex])
      converseLib.validationFailed(265); /* size runs do not match*/
      OPAREC.OPAERR = "Y"; /* set error flag*/
      OP0QW01.OP0QWERR = "Y"; /* set error flag*/
      set OP0QM008.OP2SSTYN[OPASUB] cursor, modified, bold;
      set OP0QM008.OP2SCLCD[OPASUB] modified, bold;
      set OP0QM008.OP2SDMCD[OPASUB] modified, bold;
      return;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end



   /* *************************************************************/
end // end OP0QS87

// edit for product duplication
Function OP0QS89()



      /* *********************************************************/
      /* * edit to ensure that a product has not been duplicated**/
      /* * on the request.                                      **/
      /* *********************************************************/


  OPAREC.OPASUB1 = OP0QW02.OP0QWPRD; /* init table index (curr max)*/
  while (OPAREC.OPASUB1 >= 2) /* table index*/

    if (OP0QW02.SY1STNBR[OPASUB1] > " " /* style exists*/
     && OP0QW02.OP0QWACT[OPASUB1] != "D")

      OPAREC.OPASUB2 = OPAREC.OPASUB1 - 1; /* table 2nd index*/
      while (OPAREC.OPASUB2 >= 1)
        if (OP0QW02.SY1STNBR[OPASUB2] > " " /* style exists*/
         && OP0QW02.SY1STNBR[OPASUB2] == OP0QW02.SY1STNBR[OPASUB1]
         && OP0QW02.SY2CLRID[OPASUB2] == OP0QW02.SY2CLRID[OPASUB1]
         && OP0QW02.XDMCD[OPASUB2] == OP0QW02.XDMCD[OPASUB1]
         && OP0QW02.OP0QWACT[OPASUB2] != "D")
          set OP0QM008.SY1STNBR[OPASUB2] cursor, bold;
          set OP0QM008.SY2CLRID[OPASUB2] bold;
          set OP0QM008.XDMCD[OPASUB2] bold;
          set OP0QM008.SY1STNBR[OPASUB1] cursor, bold;
          set OP0QM008.SY2CLRID[OPASUB1] bold;
          set OP0QM008.XDMCD[OPASUB1] bold;
          OPAREC.OPAERR = "Y"; /* set error flag*/
          converseLib.validationFailed(268); /* product has already been used on request*/
        end
        OPAREC.OPASUB2 = OPAREC.OPASUB2 - 1; /* table 2nd index*/
      end
    end

    OPAREC.OPASUB1 = OPAREC.OPASUB1 - 1; /* table index*/
  end



   /* *************************************************************/
end // end OP0QS89

// build replace price size scrn
Function OP0QS8A()



      /* *********************************************************/
      /* * control build process for replace price by size      **/
      /* * screen.                                              **/
      /* *********************************************************/


      /* set subs for table and map equal for this routine*/

  OPAREC.OPASUB1 = OPAREC.OPASUB; /* sub1 eq table index*/


      /* build "from" product key*/

  SYCREC.XGPCD = OPDREC.XGPCD;
  SYCREC.SY1STNBR = OP0QW02.SY1STNBR[OPASUB1];
  SYCREC.SY2CLRID = OP0QW02.SY2CLRID[OPASUB1];
  SYCREC.XDMCD = OP0QW02.XDMCD[OPASUB1];
  OP0QSZV(); /* get product*/
  if (SQLCA.VAGen_SQLCODE != 0)
    OP0QSZZ(); /* abend*/
  end


      /* build screen fields*/

  OP0QM009.SY1STNBR = OP0QW02.SY1STNBR[OPASUB1];
  OP0QM009.SY2CLRID = OP0QW02.SY2CLRID[OPASUB1];
  OP0QM009.XDMCD = OP0QW02.XDMCD[OPASUB1];
  OP0QM009.SY1STYNM[1] = SYCREC.SY1STYNM;
  OP0QM009.SY2CLRDS[1] = SYCREC.SY2CLRDS;


      /* build "to" product key*/

  SYCREC.XGPCD = OPDREC.XGPCD;
  SYCREC.SY1STNBR = OP0QW03.OP2SSTYN[OPASUB1];
  SYCREC.SY2CLRID = OP0QW03.OP2SCLCD[OPASUB1];
  SYCREC.XDMCD = OP0QW03.OP2SDMCD[OPASUB1];
  OP0QSZV(); /* get product*/
  if (SQLCA.VAGen_SQLCODE != 0)
    OP0QSZZ(); /* abend*/
  end


      /* build screen fields*/

  OP0QM009.OP2SSTYN = OP0QW03.OP2SSTYN[OPASUB1];
  OP0QM009.OP2SCLCD = OP0QW03.OP2SCLCD[OPASUB1];
  OP0QM009.OP2SDMCD = OP0QW03.OP2SDMCD[OPASUB1];
  OP0QM009.SY1STYNM[2] = SYCREC.SY1STYNM;
  OP0QM009.SY2CLRDS[2] = SYCREC.SY2CLRDS;


      /* get size scale record*/

  SY4REC.SY4SZSCL = SYCREC.SY4SZSCL;
  OP0QSZU(); /* get size scale*/
  if (SQLCA.VAGen_SQLCODE != 0)
    OP0QSZZ(); /* abend*/
  end


      /* get saved price information*/

  OP0QW05.OP0QWPAR = OP0QW04.OP0QWPAR[OPASUB1];


      /* build size run*/

  sysVar.arrayIndex = 1; /* map index*/
  OPAREC.OPASUB2 = 1; /* rec/table index*/
  while (sysVar.arrayIndex <= 40 /* not end of map table*/
   && OPAREC.OPASUB2 <= 40) /* not end of rec table*/
    if (SYCREC.XDVCD[OPASUB2] > " ") /* not end or size run*/
      OP0QM009.SY4IDDSC[sysVar.arrayIndex] = SY4REC.SY4IDDSC[OPASUB2];
      OP0QM009.SY5PRCUN[sysVar.arrayIndex] = OP0QW05.SY5PRCUN[sysVar.arrayIndex];
      if (COMMAREA.CAALVL[1] == "Y")
                                   /* unprotect fields if authorized*/
        set OP0QM009.SY5PRCUN[sysVar.arrayIndex] normal;
      else
        set OP0QM009.SY5PRCUN[sysVar.arrayIndex] protect; /* (definition was dark)*/
      end
      sysVar.arrayIndex = sysVar.arrayIndex + 1; /* map table index*/
    end
    OPAREC.OPASUB2 = OPAREC.OPASUB2 + 1; /* rec table index*/
  end



   /* *************************************************************/
end // end OP0QS8A

// set mdt's on if modified
Function OP0QS90()



      /* *********************************************************/
      /* * set mdt's in fields for the case of invalid aid key  **/
      /* * this allows the user to press the correct aid key    **/
      /* * without having to re-enter the data                  **/
      /* *********************************************************/


  sysVar.arrayIndex = 1;

  while (sysVar.arrayIndex <= 40)

    if (OP0QM009.SY5PRCUN[sysVar.arrayIndex] is modified) /* price*/
      set OP0QM009.SY5PRCUN[sysVar.arrayIndex] modified;
    end

    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end



   /* *************************************************************/
end // end OP0QS90

// edit control replace prc sz
Function OP0QS91()



      /* *********************************************************/
      /* * control edit process for reprice price by size screen**/
      /* *********************************************************/


      /* set subs for table and map equal for this routine*/

  OPAREC.OPASUB1 = OPAREC.OPASUB; /* sub1 eq table index*/


      /* edit price(1) for greater than zero*/

  OP0QS92(); /* validate price 1*/

  if (OPAREC.OPAERR == "Y") /* if error then return*/
    return;
  end


      /* control price replication*/

  OP0QS93(); /* replicate prices*/


      /* save price information*/

  OP0QS94(); /* save price information*/


      /* check for price variance within size run*/

  OP0QS95(); /* check for price variance*/


      /* save saved price information*/

  OP0QW04.OP0QWPAR[OPASUB1] = OP0QW05.OP0QWPAR;



   /* *************************************************************/
end // end OP0QS91

// validate prices
Function OP0QS92()



      /* *********************************************************/
      /* * validate that price(1) exists                        **/
      /* *********************************************************/


      /* no price may be lt 0*/

  OPAREC.OPASUB2 = 40; /* init map index to 2nd entry*/
  while (OPAREC.OPASUB2 >= 1) /* not end of table*/
    if (OP0QM009.SY4IDDSC[OPASUB2] > " ") /* size exists*/
      if (OP0QM009.SY5PRCUN[OPASUB2] < 0)
        converseLib.validationFailed(266); /* invalid price*/
        OPAREC.OPAERR = "Y"; /* set error flag*/
        set OP0QM009.SY5PRCUN[OPASUB2] cursor, modified, bold;
      else
        if (COMMAREA.CAALVL[1] == "Y")
          set OP0QM009.SY5PRCUN[OPASUB2] normal;
        else
          set OP0QM009.SY5PRCUN[OPASUB2] protect;
        end
      end
    end
    OPAREC.OPASUB2 = OPAREC.OPASUB2 - 1; /* map index*/
  end


      /* fix price on replace screen if price(1) modified*/

  if (OP0QM009.SY5PRCUN[1] is modified)
    OP0QM008.SY5PRCUN[OPASUB] = OP0QM009.SY5PRCUN[1]; /* fix price*/
  end


      /* if price(1) eq 0, check any gt zero*/
      /* if any gt 0, then price(1) must be gt 0*/

  if (OP0QM009.SY5PRCUN[1] == 0)
    OPAREC.OPASUB2 = 2; /* init map index to 2nd entry*/
    while (OPAREC.OPASUB2 <= 40 /* not end of table*/
     && OP0QM009.SY4IDDSC[OPASUB2] > " ") /* size exists*/
      if (OP0QM009.SY5PRCUN[OPASUB2] != 0)
        converseLib.validationFailed(262); /* non-zero price required*/
        OPAREC.OPAERR = "Y"; /* set error flag*/
        set OP0QM009.SY5PRCUN[1] cursor, modified, bold;
        return;
      end
      OPAREC.OPASUB2 = OPAREC.OPASUB2 + 1; /* map index*/
    end
  end



   /* *************************************************************/
end // end OP0QS92

// replicate prices
Function OP0QS93()



      /* *********************************************************/
      /* * replicate price -- allows user to set the price at a **/
      /* * starting point within a size run and have the price  **/
      /* * replicate throught the adjacient zero price.         **/
      /* *                                                      **/
      /* * note:  if all prices except price(1) are zero then   **/
      /* *        do not do this routine.                       **/
      /* *********************************************************/


      /* check for all zero except price(1).*/
      /* the replicate is to be done only if there*/
      /* is a price variance.*/

  OP0QW01.OP0QWPFL = "N"; /* init price flag*/
  OPAREC.OPASUB2 = 2; /* init map index to 2nd entry*/
  while (OPAREC.OPASUB2 <= 40 /* not end of table*/
   && OP0QM009.SY4IDDSC[OPASUB2] > " ") /* size exists*/
    if (OP0QM009.SY5PRCUN[OPASUB2] == 0
     || OP0QM009.SY5PRCUN[OPASUB2] == OP0QM009.SY5PRCUN[1])
       /* continue*/
    else
      OP0QW01.OP0QWPFL = "Y"; /* set price flag*/
      OPAREC.OPASUB2 = 99; /* end loop (get out when one found)*/
    end
    OPAREC.OPASUB2 = OPAREC.OPASUB2 + 1; /* map index*/
  end


  if (OP0QW01.OP0QWPFL == "N") /* init price flag*/
    OPAREC.OPASUB2 = 2; /* init map index to 2nd entry*/
    while (OPAREC.OPASUB2 <= 40 /* not end of table*/
     && OP0QM009.SY4IDDSC[OPASUB2] > " ") /* size exists*/
      if (OP0QM009.SY5PRCUN[OPASUB2] == 0
       || OP0QM009.SY5PRCUN[OPASUB2] == OP0QM009.SY5PRCUN[1])
        OP0QM009.SY5PRCUN[OPASUB2] = 0;
      end
      OPAREC.OPASUB2 = OPAREC.OPASUB2 + 1; /* map index*/
    end
  end

   /* *************************************************************/
end // end OP0QS93

// save price information
Function OP0QS94()



      /* *********************************************************/
      /* * save price information                               **/
      /* *********************************************************/


      /* save price information*/

  set OP0QW05 empty; /* clear record*/


  OPAREC.OPASUB2 = 1; /* init map index to 2nd entry*/
  while (OPAREC.OPASUB2 <= 40 /* not end of table*/
   && OP0QM009.SY4IDDSC[OPASUB2] > " ") /* size exists*/
    OP0QW05.SY5PRCUN[OPASUB2] = OP0QM009.SY5PRCUN[OPASUB2];
    OPAREC.OPASUB2 = OPAREC.OPASUB2 + 1; /* map index*/
  end


  OP0QW01.OP0QWUPD = "Y"; /* set update flag*/
  OP0QW01.OP0QWUPP = "Y"; /* set update product flag*/
  if (OP0QW02.OP0QWACT[OPASUB1] == " ")
    OP0QW02.OP0QWACT[OPASUB1] = "C"; /* set change action*/
  end



   /* *************************************************************/
end // end OP0QS94

// check for price variance
Function OP0QS95()



      /* *********************************************************/
      /* * check for price variance                             **/
      /* *********************************************************/



  OP0QW05.OP2PRCVF = "N"; /* init flag*/




      /* check for price variance*/

  OPAREC.OPASUB2 = 2; /* init map index to 2nd entry*/
  while (OPAREC.OPASUB2 <= 40 /* not end of table*/
   && OP0QM009.SY4IDDSC[OPASUB2] > " ") /* size exists*/
    sysVar.arrayIndex = OPAREC.OPASUB2 - 1; /* map index*/
    if (OP0QM009.SY5PRCUN[OPASUB2] != OP0QM009.SY5PRCUN[sysVar.arrayIndex])
      OP0QW05.OP2PRCVF = "Y"; /* set flag*/
      return;
    end
    OPAREC.OPASUB2 = OPAREC.OPASUB2 + 1; /* map index*/
  end



   /* *************************************************************/
end // end OP0QS95

// Check xctcd of request id
Function OP0QS99()

  /* CANADA 09/01/95*/

  OP0QW01.OP0QRQOK = "N"; /* CANA*/
  OPEREC.OPDRQID = OPDREC.OPDRQID; /* CANA load request id*/
  OP0QSZK(); /* CANA select set*/
  OP0QSZL(); /* CANA select next*/

  if (OP0QW01.XCTCD == "CANA") /* CANA country code of user id is CANA*/
    if (OPEREC.XCTCD == OP0QW01.XCTCD) /* CANA country code match for CANADA*/
      OP0QW01.OP0QRQOK = "Y"; /* CANA set match flag*/
    end /* CANA*/
  else /* CANA xctcd of user id is not CANADIAN*/
    if (OPEREC.XCTCD != "CANA") /* CANA*/
      OP0QW01.OP0QRQOK = "Y"; /* CANA set match flag*/
    end /* CANA*/
  end /* CANA*/

  OP0QSZM(); /* CANA close set*/
end // end OP0QS99

// set mdt's on if modified
Function OP0QSA0()



      /* *********************************************************/
      /* * set mdt's in fields for the case of invalid aid key  **/
      /* * this allows the user to press the correct aid key    **/
      /* * without having to re-enter the data                  **/
      /* *********************************************************/


      /* if not updatable, then none modified*/

  if (COMMAREA.CAALVL[1] != "Y") /* not updatable*/
    return;
  end


  sysVar.arrayIndex = 1; /* init map index*/

  while (sysVar.arrayIndex <= 54)

    if (OP0QM010.SY1STNBR[sysVar.arrayIndex] is modified) /* style*/
      set OP0QM010.SY1STNBR[sysVar.arrayIndex] modified;
    else
      set OP0QM010.SY1STNBR[sysVar.arrayIndex] normal;
    end

    if (OP0QM010.SY2CLRID[sysVar.arrayIndex] is modified) /* color*/
      set OP0QM010.SY2CLRID[sysVar.arrayIndex] modified;
    else
      set OP0QM010.SY2CLRID[sysVar.arrayIndex] normal;
    end

    if (OP0QM010.XDMCD[sysVar.arrayIndex] is modified) /* dimension*/
      set OP0QM010.XDMCD[sysVar.arrayIndex] modified;
    else
      set OP0QM010.XDMCD[sysVar.arrayIndex] normal;
    end

    if (OP0QM010.SY5PRCUN[sysVar.arrayIndex] is modified) /* price*/
      set OP0QM010.SY5PRCUN[sysVar.arrayIndex] modified;
    else
      set OP0QM010.SY5PRCUN[sysVar.arrayIndex] normal;
    end

    if (OP0QM010.OP2PRCVF[sysVar.arrayIndex] is modified) /* price variance flag*/
      set OP0QM010.OP2PRCVF[sysVar.arrayIndex] modified;
    else
      set OP0QM010.OP2PRCVF[sysVar.arrayIndex] normal;
    end

    sysVar.arrayIndex = sysVar.arrayIndex + 1; /* map index*/
  end



   /* *************************************************************/
end // end OP0QSA0

// edit control for reprice
Function OP0QSA1()



      /* *********************************************************/
      /* * control edit process for reprice screen              **/
      /* *********************************************************/


  OPAREC.OPASUB = 54; /* init map index*/
  while (OPAREC.OPASUB >= 1) /* map index*/

    if (OP0QM010.OP2PRCVF[OPASUB] is modified) /* price vary flag*/
      OP0QSA4(); /* edit price vary flag*/
    end

    if (OP0QM010.SY5PRCUN[OPASUB] is modified /* price*/
     || OP0QM010.SY1STNBR[OPASUB] is modified /* style*/
     || OP0QM010.SY2CLRID[OPASUB] is modified /* color*/
     || OP0QM010.XDMCD[OPASUB] is modified)   /* dimension*/
      OP0QSA3(); /* edit price*/
    end

    if (OP0QM010.SY1STNBR[OPASUB] is modified /* style*/
     || OP0QM010.SY2CLRID[OPASUB] is modified /* color*/
     || OP0QM010.XDMCD[OPASUB] is modified)   /* dimension*/
      OP0QSA2(); /* edit change*/
    end

    OPAREC.OPASUB = OPAREC.OPASUB - 1; /* map index*/
  end


      /* verify that a product is not duplicated on the request*/

  if (COMMAREA.CAALVL[1] == "Y") /* update enabled*/
    if (OPAREC.OPAERR != "Y") /* if no error*/
      OP0QSA9(); /* edit for prod duplication*/
    end
  end



   /* *************************************************************/
end // end OP0QSA1

// edit product for reprice
Function OP0QSA2()



      /* *********************************************************/
      /* * this statement group validates and saves the         **/
      /* * style/color/dim                                      **/
      /* *********************************************************/


      /* set subs for table and map equal for this routine*/

  OPAREC.OPASUB1 = OPAREC.OPASUB; /* sub1 eq table index*/


      /* style = color = dimension = spaces means: delete*/
        /* if review, then set delete status (prod on file)*/
          /* else*/
           /* then clear entry (not review = being entered)*/

  if (OP0QM010.SY1STNBR[OPASUB] == " " /* check for null style*/
   && OP0QM010.SY2CLRID[OPASUB] == " " /* check for null color*/
   && OP0QM010.XDMCD[OPASUB] == " ")   /* check for null dimension*/
    if (OP0QW02.SY1STNBR[OPASUB1] > " " /* entry exists*/
     && OP0QW02.OP0QWACT[OPASUB1] != "D") /* not delete flagged*/
      if (OP0QW02.OP0QWACT[OPASUB1] != "A") /* not add flagged*/
        OP0QW02.OP0QWACT[OPASUB1] = "D"; /* set delete*/
        OP0QW02.OP0QWDEL = OP0QW02.OP0QWDEL + 1; /* delete count*/
        OP0QW02.OP0QWNPR = OP0QW02.OP0QWNPR - 1; /* product count*/
        OP0QW01.OP0QWUPD = "Y"; /* set update flag*/
        OP0QW01.OP0QWUPP = "Y"; /* set update product flag*/
      else
        OP0QW02.OP0QWENT[OPASUB1] = " "; /* clear product entry*/
        set OP0QW05 empty;
        OP0QW05.OP2PRCVF = "N"; /* init price vary flag*/
        OP0QW04.OP0QWPAR[OPASUB1] = OP0QW05.OP0QWPAR; /* clear price*/
        OP0QW02.OP0QWNPR = OP0QW02.OP0QWNPR - 1; /* product count*/
      end
    end
    set OP0QM010.SY1STNBR[OPASUB] normal;
    set OP0QM010.SY2CLRID[OPASUB] normal;
    set OP0QM010.XDMCD[OPASUB] normal;
    OP0QM010.SY5PRCUN[OPASUB] = 0;
    set OP0QM010.SY5PRCUN[OPASUB] normal;
    OP0QM010.OP2PRCVF[OPASUB] = " ";
    set OP0QM010.OP2PRCVF[OPASUB] normal;
    return; /* get out*/
  end


      /* set color to '00 ' if null*/
      /* set dimension to '00' if null*/

  if (OP0QM010.SY2CLRID[OPASUB] == " ") /* check for null color*/
    OP0QM010.SY2CLRID[OPASUB] = "00 ";
  end

  if (OP0QM010.XDMCD[OPASUB] == " ") /* check for null dimension*/
    OP0QM010.XDMCD[OPASUB] = "00";
  end


      /* issue select unique to get product*/

  SYCREC.XGPCD = OPDREC.XGPCD; /* load key*/
  SYCREC.SY1STNBR = OP0QM010.SY1STNBR[OPASUB]; /* load key*/
  SYCREC.SY2CLRID = OP0QM010.SY2CLRID[OPASUB]; /* load key*/
  SYCREC.XDMCD = OP0QM010.XDMCD[OPASUB]; /* load key*/
  TA1REC.TA1LOCAT[2] = "OP0QSA2 "; /* statement group*/
  OP0QSZV(); /* select unique*/

  if (SQLCA.VAGen_SQLCODE == 0) /* CANA product found*/
    if (OP0QW01.XCTCD == "CANA") /* CANA Canadian user id*/
      TA1REC.TA1PGMNM = "OP0Q"; /* CANA program name*/
      TA1REC.TA1LOC = "OP0QSA2"; /* CANA statement group*/
      set WSY2000 empty;
      WSY2000.XDR-PROD-REG-CD = "05";
      OP0Q-CALL-SY2000(); /* CANA call SY2000 to validate Canadian*/
      if (WSY2000.WSY2000-RETURN-CODE == 0) /* CANA row found*/
  /* continue*/
      else /* CANA*/
        if (WSY2000.WSY2000-RETURN-CODE == 02) /* CANA row not found*/
          converseLib.validationFailed(911); /* CANA product doesn't exist for rgn*/
          OPAREC.OPAERR = "Y"; /* CANA set error flag*/
          OP0QW01.OP0QWERR = "Y"; /* CANA set error flag*/
          set OP0QM010.SY1STNBR[OPASUB] cursor, modified, bold; /* CANA*/
          set OP0QM010.SY2CLRID[OPASUB] modified, bold; /* CANA*/
          set OP0QM010.XDMCD[OPASUB] modified, bold; /* CANA*/
          return; /* CANA*/
        else /* CANA fatal error or database busy*/
          TA1REC.TA1DBASE = "DPROD"; /* CANA database name*/
          TA1REC.TA1TBLVU = "VSYREG02"; /* CANA table view*/
          TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* CANA key value*/
          TA1REC.TA1LOCAT[3] = "OP0QSA2"; /* CANA statement group*/
          TA1REC.TA1LOCAT[4] = "SY2000"; /* CANA i/o mod name*/
          OP0QSZZ(); /* CANA abort*/
        end
      end
    else
      if (OPDREC.XGPCD == "03")
        if (COMMAREA.XDVCD == "02" /* userid assigned to europe*/
         || COMMAREA.XDVCD == "03") /* userid assigned to asia*/
          /* continue processing*/
        else
          TA1REC.TA1PGMNM = "OP0Q"; /* program name*/
          TA1REC.TA1LOC = "OP0QSA2"; /* statement group*/
          set WSY2000 empty;
          WSY2000.XDR-PROD-REG-CD = "01";
          OP0Q-CALL-SY2000(); /* call SY2000 to validate*/
          if (WSY2000.WSY2000-RETURN-CODE == 0) /* row found*/
  /* continue*/
          else
            if (WSY2000.WSY2000-RETURN-CODE == 02) /* row not found*/
              converseLib.validationFailed(911); /* product doesn't exist for rgn*/
              OPAREC.OPAERR = "Y"; /* set error flag*/
              OP0QW01.OP0QWERR = "Y"; /* set error flag*/
              set OP0QM010.SY1STNBR[OPASUB] cursor, modified, bold;
              set OP0QM010.SY2CLRID[OPASUB] modified, bold;
              set OP0QM010.XDMCD[OPASUB] modified, bold;
              return;
            else /* fatal error or database busy*/
              TA1REC.TA1DBASE = "DPROD"; /* database name*/
              TA1REC.TA1TBLVU = "VSYREG02"; /* table view*/
              TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* key value*/
              TA1REC.TA1LOCAT[3] = "OP0QSA2"; /* statement group*/
              TA1REC.TA1LOCAT[4] = "SY2000"; /* i/o mod name*/
              OP0QSZZ(); /* abort*/
            end
          end
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
      converseLib.validationFailed(257); /* product does not exist*/
      OPAREC.OPAERR = "Y"; /* set error flag*/
      set OP0QM010.SY1STNBR[OPASUB] cursor, modified, bold;
      set OP0QM010.SY2CLRID[OPASUB] modified, bold;
      set OP0QM010.XDMCD[OPASUB] modified, bold;
      return;
    end
  end

      /* if table entry blank, then add the product*/

  if (OP0QW02.SY1STNBR[OPASUB1] == " ")
    OP0QW02.OP0QWACT[OPASUB1] = "A"; /* action add*/
    OP0QW02.SY1STNBR[OPASUB1] = OP0QM010.SY1STNBR[OPASUB];
    OP0QW02.SY2CLRID[OPASUB1] = OP0QM010.SY2CLRID[OPASUB];
    OP0QW02.XDMCD[OPASUB1] = OP0QM010.XDMCD[OPASUB];
    OP0QW02.OP0QWNPR = OP0QW02.OP0QWNPR + 1; /* product count*/
    OP0QW01.OP0QWUPD = "Y"; /* set update flag*/
    OP0QW01.OP0QWUPP = "Y"; /* set update product flag*/
    if (OPAREC.OPASUB1 > OP0QW02.OP0QWPRD) /* if gt max*/
      OP0QW02.OP0QWPRD = OPAREC.OPASUB1; /* set new max*/
    end
    set OP0QM010.SY1STNBR[OPASUB] normal;
    set OP0QM010.SY2CLRID[OPASUB] normal;
    set OP0QM010.XDMCD[OPASUB] normal;
    return; /* get out*/
  end


      /* table entry not blank, see if product is the same,*/
      /* otherwise error since you can't replace an entry*/
      /* without a delete in a previous pass.*/

  if (OP0QM010.SY1STNBR[OPASUB] == OP0QW02.SY1STNBR[OPASUB1] /* style*/
   && OP0QM010.SY2CLRID[OPASUB] == OP0QW02.SY2CLRID[OPASUB1] /* color*/
   && OP0QM010.XDMCD[OPASUB] == OP0QW02.XDMCD[OPASUB1])      /* dimension*/
    OP0QW05.OP0QWPAR = OP0QW04.OP0QWPAR[OPASUB1];
    OP0QM010.SY5PRCUN[OPASUB] = OP0QW05.SY5PRCUN[1];
    if (OP0QM010.OP2PRCVF[OPASUB] != "Y") /* variance not requested*/
      if (OP0QW05.OP2PRCVF == "Y")
        OP0QM010.OP2PRCVF[OPASUB] = "*";
      else
        OP0QM010.OP2PRCVF[OPASUB] = " ";
      end
    end
    if (OP0QW02.OP0QWACT[OPASUB1] == "D") /* delete*/
      OP0QW02.OP0QWACT[OPASUB1] = "C"; /* set to change*/
      OP0QW02.OP0QWDEL = OP0QW02.OP0QWDEL - 1; /* delete count*/
      OP0QW02.OP0QWNPR = OP0QW02.OP0QWNPR + 1; /* product count*/
    end
    set OP0QM010.SY1STNBR[OPASUB] normal;
    set OP0QM010.SY2CLRID[OPASUB] normal;
    set OP0QM010.XDMCD[OPASUB] normal;
    set OP0QM010.SY5PRCUN[OPASUB] normal;
    set OP0QM010.OP2PRCVF[OPASUB] normal;
    return; /* get out*/
  else
    converseLib.validationFailed(258); /* cannot replace product entry*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0QM010.SY1STNBR[OPASUB] cursor, modified, bold;
    set OP0QM010.SY2CLRID[OPASUB] modified, bold;
    set OP0QM010.XDMCD[OPASUB] modified, bold;
    return;
  end
end // end OP0QSA2

// edit price
Function OP0QSA3()



      /* *********************************************************/
      /* * this statement group validates the price entered     **/
      /* *********************************************************/


      /* set subs for table and map equal for this routine*/

  OPAREC.OPASUB1 = OPAREC.OPASUB; /* sub1 eq table index*/


      /* clear price if no style*/

  if (OP0QM010.SY1STNBR[OPASUB] <= " "
   && OP0QM010.SY2CLRID[OPASUB] <= " "
   && OP0QM010.XDMCD[OPASUB] <= " ")
    OP0QM010.SY5PRCUN[OPASUB] = 0;
    set OP0QM010.SY5PRCUN[OPASUB] normal;
    return;
  end


      /* if table item deleted and no price,*/
      /* then set price modified for edit on 2nd pass.*/
      /* this will allow delete recovery routine*/
      /* in product number edit to recover price and*/
      /* not have the error message appear.*/
      /* the recovery routine will reset the mdt.*/

  if (OP0QW02.OP0QWACT[OPASUB1] == "D"
   && OP0QM010.SY5PRCUN[OPASUB] <= 0)
    set OP0QM010.SY5PRCUN[OPASUB] modified;
    return;
  end


      /* edit/save price*/

  if (OP0QM010.SY5PRCUN[OPASUB] <= 0)
    converseLib.validationFailed(322); /* product will be changed to price of zero*/
    OPAREC.OPAERR = "X"; /* set error flag*/
    set OP0QM010.SY5PRCUN[OPASUB] cursor, bold;
  else
    OP0QW01.OP0QWUPD = "Y"; /* set update flag*/
    OP0QW01.OP0QWUPP = "Y"; /* set update product flag*/
    OP0QW05.OP0QWPAR = OP0QW04.OP0QWPAR[OPASUB1];
    OP0QW05.SY5PRCUN[1] = OP0QM010.SY5PRCUN[OPASUB];
    OP0QW04.OP0QWPAR[OPASUB1] = OP0QW05.OP0QWPAR;
    set OP0QM010.SY5PRCUN[OPASUB] normal;
    if (OP0QW02.OP0QWACT[OPASUB1] == " ")
      OP0QW02.OP0QWACT[OPASUB1] = "C"; /* set change action*/
    end
  end



   /* *************************************************************/
end // end OP0QSA3

// edit prc vary flag
Function OP0QSA4()



      /* *********************************************************/
      /* * this statement group validates the price vary flag   **/
      /* * (price by size request flag)                         **/
      /* *********************************************************/


      /* set subs for table and map equal for this routine*/

  OPAREC.OPASUB1 = OPAREC.OPASUB; /* sub1 eq table index*/


      /* clear vary flag if no style*/

  if (OP0QM010.SY1STNBR[OPASUB] <= " "
   && OP0QM010.SY2CLRID[OPASUB] <= " "
   && OP0QM010.XDMCD[OPASUB] <= " ")
    OP0QM010.OP2PRCVF[OPASUB] = " ";
  end


      /* clear vary flag if 'n' and not update*/

  if (OP0QM010.OP2PRCVF[OPASUB] == "N"
   && COMMAREA.CAALVL[1] != "Y") /* updatable*/
    OP0QM010.OP2PRCVF[OPASUB] = " ";
  end


      /* edit price vary flag*/

  if (OP0QM010.OP2PRCVF[OPASUB] == "N"
   || OP0QM010.OP2PRCVF[OPASUB] == "Y"
   || OP0QM010.OP2PRCVF[OPASUB] == " "
   || OP0QM010.OP2PRCVF[OPASUB] == "*")
    set OP0QM010.OP2PRCVF[OPASUB] normal;
  else
    converseLib.validationFailed(263); /* non-zero price required*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0QM010.OP2PRCVF[OPASUB] cursor, modified, bold;
    return;
  end


      /* if price vary is yes, then exit*/
      /* (triggers price by size screen)*/

  if (OP0QM010.OP2PRCVF[OPASUB] == "Y")
    return;
  end


      /* if price vary is blank, then reset field and exit*/

  if (OP0QM010.OP2PRCVF[OPASUB] <= " "
   || OP0QM010.OP2PRCVF[OPASUB] == "*")
    if (OP0QW04.OP2PRCVF[OPASUB1] == "Y")
      OP0QM010.OP2PRCVF[OPASUB] = "*";
    else
      OP0QM010.OP2PRCVF[OPASUB] = " ";
    end
    return;
  end


      /* if price vary is no, then reset price array*/

  if (COMMAREA.CAALVL[1] == "Y") /* updatable*/
    if (OP0QM010.OP2PRCVF[OPASUB] == "N")
      OP0QW01.OP0QWUPD = "Y"; /* set update flag*/
      OP0QW01.OP0QWUPP = "Y"; /* set update product flag*/
      OP0QM010.OP2PRCVF[OPASUB] = " ";
      OP0QW05.OP0QWPAR = OP0QW04.OP0QWPAR[OPASUB1];
      OP0QW05.OP2PRCVF = "N"; /* clear flag*/
      sysVar.arrayIndex = 2;
      while (sysVar.arrayIndex <= 40) /* clear all prices except (1)*/
        OP0QW05.SY5PRCUN[sysVar.arrayIndex] = 0;
        sysVar.arrayIndex = sysVar.arrayIndex + 1;
      end
      OP0QW04.OP0QWPAR[OPASUB1] = OP0QW05.OP0QWPAR;
    end
  end



   /* *************************************************************/
end // end OP0QSA4

// determine if price by size
Function OP0QSA5()



      /* *********************************************************/
      /* * determine if price by size requested                 **/
      /* *********************************************************/


  OPAREC.OPASUB = 1; /* init map index*/
  while (OPAREC.OPASUB <= 54 /* map index max*/
   && OPAREC.OPASUB <= OP0QW02.OP0QWPRD) /* table curr max*/
    if (OP0QM010.OP2PRCVF[OPASUB] == "Y") /* price vary flag*/
      return; /* selection found*/
    end
    OPAREC.OPASUB = OPAREC.OPASUB + 1; /* map index*/
  end


      /* check to see if none found*/

  if (OPAREC.OPASUB > 54) /* map index max*/
    OPAREC.OPASUB = 1; /* init map index*/
  end



   /* *************************************************************/
end // end OP0QSA5

// edit for product duplication
Function OP0QSA9()



      /* *********************************************************/
      /* * edit to ensure that a product has not been duplicated**/
      /* * on the request.                                      **/
      /* *********************************************************/


  OPAREC.OPASUB1 = OP0QW02.OP0QWPRD; /* init table index (curr max)*/
  while (OPAREC.OPASUB1 >= 2) /* table index*/

    if (OP0QW02.SY1STNBR[OPASUB1] > " " /* style exists*/
     && OP0QW02.OP0QWACT[OPASUB1] != "D")

      OPAREC.OPASUB2 = OPAREC.OPASUB1 - 1; /* table 2nd index*/
      while (OPAREC.OPASUB2 >= 1)
        if (OP0QW02.SY1STNBR[OPASUB2] > " " /* style exists*/
         && OP0QW02.SY1STNBR[OPASUB2] == OP0QW02.SY1STNBR[OPASUB1]
         && OP0QW02.SY2CLRID[OPASUB2] == OP0QW02.SY2CLRID[OPASUB1]
         && OP0QW02.XDMCD[OPASUB2] == OP0QW02.XDMCD[OPASUB1]
         && OP0QW02.OP0QWACT[OPASUB2] != "D")
          set OP0QM010.SY1STNBR[OPASUB2] cursor, bold;
          set OP0QM010.SY2CLRID[OPASUB2] bold;
          set OP0QM010.XDMCD[OPASUB2] bold;
          set OP0QM010.SY1STNBR[OPASUB1] cursor, bold;
          set OP0QM010.SY2CLRID[OPASUB1] bold;
          set OP0QM010.XDMCD[OPASUB1] bold;
          OPAREC.OPAERR = "Y"; /* set error flag*/
          converseLib.validationFailed(268); /* product has already been used on request*/
        end
        OPAREC.OPASUB2 = OPAREC.OPASUB2 - 1; /* table 2nd index*/
      end
    end

    OPAREC.OPASUB1 = OPAREC.OPASUB1 - 1; /* table index*/
  end



   /* *************************************************************/
end // end OP0QSA9

// build reprice price size scrn
Function OP0QSAA()



      /* *********************************************************/
      /* * control build process for reprice price by size      **/
      /* * screen.                                              **/
      /* *********************************************************/


      /* set subs for table and map equal for this routine*/

  OPAREC.OPASUB1 = OPAREC.OPASUB; /* sub1 eq table index*/


      /* build product key*/

  SYCREC.XGPCD = OPDREC.XGPCD;
  SYCREC.SY1STNBR = OP0QW02.SY1STNBR[OPASUB1];
  SYCREC.SY2CLRID = OP0QW02.SY2CLRID[OPASUB1];
  SYCREC.XDMCD = OP0QW02.XDMCD[OPASUB1];
  OP0QSZV(); /* get product*/
  if (SQLCA.VAGen_SQLCODE != 0)
    OP0QSZZ(); /* abend*/
  end


      /* build screen fields*/

  OP0QM011.SY1STNBR = OP0QW02.SY1STNBR[OPASUB1];
  OP0QM011.SY2CLRID = OP0QW02.SY2CLRID[OPASUB1];
  OP0QM011.XDMCD = OP0QW02.XDMCD[OPASUB1];
  OP0QM011.SY1STYNM = SYCREC.SY1STYNM;
  OP0QM011.SY2CLRDS = SYCREC.SY2CLRDS;


      /* get size scale record*/

  SY4REC.SY4SZSCL = SYCREC.SY4SZSCL;
  OP0QSZU(); /* get size scale*/
  if (SQLCA.VAGen_SQLCODE != 0)
    OP0QSZZ(); /* abend*/
  end


      /* get saved price information*/

  OP0QW05.OP0QWPAR = OP0QW04.OP0QWPAR[OPASUB1];


      /* build size run*/

  sysVar.arrayIndex = 1; /* map index*/
  OPAREC.OPASUB2 = 1; /* rec/table index*/
  while (sysVar.arrayIndex <= 40 /* not end of map table*/
   && OPAREC.OPASUB2 <= 40) /* not end of rec table*/
    if (SYCREC.XDVCD[OPASUB2] > " ") /* size exists*/
      OP0QM011.SY4IDDSC[sysVar.arrayIndex] = SY4REC.SY4IDDSC[OPASUB2];
      OP0QM011.SY5PRCUN[sysVar.arrayIndex] = OP0QW05.SY5PRCUN[sysVar.arrayIndex];
      if (COMMAREA.CAALVL[1] == "Y")
                                   /* unprotect fields if authorized*/
        set OP0QM011.SY5PRCUN[sysVar.arrayIndex] normal;
      else
        set OP0QM011.SY5PRCUN[sysVar.arrayIndex] protect; /* (definition was dark)*/
      end
      sysVar.arrayIndex = sysVar.arrayIndex + 1; /* map table index*/
    end
    OPAREC.OPASUB2 = OPAREC.OPASUB2 + 1; /* rec table index*/
  end

   /* CANADA 09/22/95*/

  if (OP0QW01.XCTCD == "CANA") /* CANA This is a Canadian request id*/
    OP0QM011.OP0QM-CRCY-CD-LIT = "CURRENCY CODE:"; /* CANA*/
    OP0QM011.ZFC-CRCY-CD = OP0QW01.ZFC-CRCY-CD; /* CANA*/
  else
    OP0QM011.OP0QM-CRCY-CD-LIT = "              "; /* CANA*/
    OP0QM011.ZFC-CRCY-CD = "   "; /* CANA*/
  end /* CANA*/

end // end OP0QSAA

// set mdt's on if modified
Function OP0QSB0()



      /* *********************************************************/
      /* * set mdt's in fields for the case of invalid aid key  **/
      /* * this allows the user to press the correct aid key    **/
      /* * without having to re-enter the data                  **/
      /* *********************************************************/


  sysVar.arrayIndex = 1;

  while (sysVar.arrayIndex <= 40)

    if (OP0QM011.SY5PRCUN[sysVar.arrayIndex] is modified) /* price*/
      set OP0QM011.SY5PRCUN[sysVar.arrayIndex] modified;
    end

    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end



   /* *************************************************************/
end // end OP0QSB0

// edit control reprice prc sz
Function OP0QSB1()



      /* *********************************************************/
      /* * control edit process for reprice price by size screen**/
      /* *********************************************************/


      /* set subs for table and map equal for this routine*/

  OPAREC.OPASUB1 = OPAREC.OPASUB; /* sub1 eq table index*/


      /* edit price(1) for greater than zero*/

  OP0QSB2(); /* validate price 1*/

  if (OPAREC.OPAERR == "Y") /* if error then return*/
    return;
  end


      /* control price replication*/

  OP0QSB3(); /* replicate prices*/


      /* save price information*/

  OP0QSB4(); /* save price information*/


      /* check for price variance within size run*/

  OP0QSB5(); /* check for price variance*/


      /* save saved price information*/

  OP0QW04.OP0QWPAR[OPASUB1] = OP0QW05.OP0QWPAR;



   /* *************************************************************/
end // end OP0QSB1

// validate prices
Function OP0QSB2()



      /* *********************************************************/
      /* * validate that price(1) exists                        **/
      /* *********************************************************/


      /* no price may be lt 0*/

  OPAREC.OPASUB2 = 40; /* init map index to 2nd entry*/
  while (OPAREC.OPASUB2 >= 1) /* not end of table*/
    if (OP0QM011.SY4IDDSC[OPASUB2] > " ") /* size exists*/
      if (OP0QM011.SY5PRCUN[OPASUB2] < 0)
        converseLib.validationFailed(266); /* invalid price*/
        OPAREC.OPAERR = "Y"; /* set error flag*/
        set OP0QM011.SY5PRCUN[OPASUB2] cursor, modified, bold;
      else
        if (COMMAREA.CAALVL[1] == "Y")
          set OP0QM011.SY5PRCUN[OPASUB2] normal;
        else
          set OP0QM011.SY5PRCUN[OPASUB2] protect;
        end
      end
    end
    OPAREC.OPASUB2 = OPAREC.OPASUB2 - 1; /* map index*/
  end


      /* first price on screen must be non-zero*/

  if (OP0QM011.SY5PRCUN[1] <= 0)
    converseLib.validationFailed(262); /* non-zero price required*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0QM011.SY5PRCUN[1] cursor, modified, bold;
    return;
  else
    if (COMMAREA.CAALVL[1] == "Y")
      OP0QM010.SY5PRCUN[OPASUB] = OP0QM011.SY5PRCUN[1]; /* fix price*/
      set OP0QM011.SY5PRCUN[1] normal;
    else
      set OP0QM011.SY5PRCUN[1] protect;
    end
  end



   /* *************************************************************/
end // end OP0QSB2

// replicate prices
Function OP0QSB3()



      /* *********************************************************/
      /* * replicate price -- allows user to set the price at a **/
      /* * starting point within a size run and have the price  **/
      /* * replicate throught the adjacient zero price.         **/
      /* *                                                      **/
      /* * note:  if all prices except price(1) are zero then   **/
      /* *        do not do this routine.                       **/
      /* *********************************************************/


      /* check for all zero except price(1).*/
      /* the replicate is to be done only if there*/
      /* is a price variance.*/

  OP0QW01.OP0QWPFL = "N"; /* init price flag*/
  OPAREC.OPASUB2 = 2; /* init map index to 2nd entry*/
  while (OPAREC.OPASUB2 <= 40 /* not end of table*/
   && OP0QM011.SY4IDDSC[OPASUB2] > " ") /* size exists*/
    if (OP0QM011.SY5PRCUN[OPASUB2] == 0
     || OP0QM011.SY5PRCUN[OPASUB2] == OP0QM011.SY5PRCUN[1])
       /* continue*/
    else
      OP0QW01.OP0QWPFL = "Y"; /* set price flag*/
      OPAREC.OPASUB2 = 99; /* end loop*/
    end
    OPAREC.OPASUB2 = OPAREC.OPASUB2 + 1; /* map index*/
  end

  if (OP0QW01.OP0QWPFL == "N") /* prices don't vary*/
    OPAREC.OPASUB2 = 2; /* init map index to 2nd entry*/
    while (OPAREC.OPASUB2 <= 40 /* not end of table*/
     && OP0QM011.SY4IDDSC[OPASUB2] > " ") /* size exists*/
      if (OP0QM011.SY5PRCUN[OPASUB2] == 0
       || OP0QM011.SY5PRCUN[OPASUB2] == OP0QM011.SY5PRCUN[1])
        OP0QM011.SY5PRCUN[OPASUB2] = 0;
      end
      OPAREC.OPASUB2 = OPAREC.OPASUB2 + 1; /* map index*/
    end
  end




   /* *************************************************************/
end // end OP0QSB3

// save price information
Function OP0QSB4()



      /* *********************************************************/
      /* * save price information                               **/
      /* *********************************************************/


      /* save price information*/

  set OP0QW05 empty; /* clear record*/


  OPAREC.OPASUB2 = 1; /* init map index to 2nd entry*/
  while (OPAREC.OPASUB2 <= 40 /* not end of table*/
   && OP0QM011.SY4IDDSC[OPASUB2] > " ") /* size exists*/
    OP0QW05.SY5PRCUN[OPASUB2] = OP0QM011.SY5PRCUN[OPASUB2];
    OPAREC.OPASUB2 = OPAREC.OPASUB2 + 1; /* map index*/
  end


  OP0QW01.OP0QWUPD = "Y"; /* set update flag*/
  OP0QW01.OP0QWUPP = "Y"; /* set update product flag*/
  if (OP0QW02.OP0QWACT[OPASUB1] == " ")
    OP0QW02.OP0QWACT[OPASUB1] = "C"; /* set change action*/
  end



   /* *************************************************************/
end // end OP0QSB4

// check for price variance
Function OP0QSB5()



      /* *********************************************************/
      /* * check for price variance                             **/
      /* *********************************************************/



  OP0QW05.OP2PRCVF = "N"; /* init flag*/


      /* check for price variance*/

  OPAREC.OPASUB2 = 2; /* init map index to 2nd entry*/
  while (OPAREC.OPASUB2 <= 40 /* not end of table*/
   && OP0QM011.SY4IDDSC[OPASUB2] > " ") /* size exists*/
    sysVar.arrayIndex = OPAREC.OPASUB2 - 1; /* map index*/
    if (OP0QM011.SY5PRCUN[OPASUB2] != OP0QM011.SY5PRCUN[sysVar.arrayIndex])
      OP0QW05.OP2PRCVF = "Y"; /* set flag*/
      return;
    end
    OPAREC.OPASUB2 = OPAREC.OPASUB2 + 1; /* map index*/
  end



   /* *************************************************************/
end // end OP0QSB5

// set mdt's on if modified
Function OP0QSC0()



      /* *********************************************************/
      /* * set mdt's in fields for the case of invalid aid key  **/
      /* * this allows the user to press the correct aid key    **/
      /* * without having to re-enter the data                  **/
      /* *********************************************************/


      /* if not updatable, then none modified*/

  if (COMMAREA.CAALVL[1] != "Y") /* not updatable*/
    return;
  end


  sysVar.arrayIndex = 1; /* init map index*/

  while (sysVar.arrayIndex <= 72)

    if (OP0QM012.SY1STNBR[sysVar.arrayIndex] is modified) /* style*/
      set OP0QM012.SY1STNBR[sysVar.arrayIndex] modified;
    else
      set OP0QM012.SY1STNBR[sysVar.arrayIndex] normal;
    end

    if (OP0QM012.SY2CLRID[sysVar.arrayIndex] is modified) /* color*/
      set OP0QM012.SY2CLRID[sysVar.arrayIndex] modified;
    else
      set OP0QM012.SY2CLRID[sysVar.arrayIndex] normal;
    end

    if (OP0QM012.XDMCD[sysVar.arrayIndex] is modified) /* dimension*/
      set OP0QM012.XDMCD[sysVar.arrayIndex] modified;
    else
      set OP0QM012.XDMCD[sysVar.arrayIndex] normal;
    end

    if (OP0QM012.XWHCD[sysVar.arrayIndex] is modified) /* warehouse code*/
      set OP0QM012.XWHCD[sysVar.arrayIndex] modified;
    else
      set OP0QM012.XWHCD[sysVar.arrayIndex] normal;
    end

    sysVar.arrayIndex = sysVar.arrayIndex + 1; /* map index*/
  end



   /* *************************************************************/
end // end OP0QSC0

// control edit process 1 w/h mod
Function OP0QSC1()



      /* *********************************************************/
      /* * control edit process for 1 w/h model screen          **/
      /* *********************************************************/


  OPAREC.OPASUB = 72; /* init map index*/
  while (OPAREC.OPASUB >= 1) /* map index*/
    if (OP0QM012.SY1STNBR[OPASUB] is modified /* style*/
     || OP0QM012.SY2CLRID[OPASUB] is modified /* color*/
     || OP0QM012.XDMCD[OPASUB] is modified    /* dimension*/
     || OP0QM012.XWHCD[OPASUB] is modified)   /* warehouse*/
      OP0QSC2(); /* edit change*/
    end
    OPAREC.OPASUB = OPAREC.OPASUB - 1; /* map index*/
  end


      /* verify that a product is not duplicated on the request*/

  if (COMMAREA.CAALVL[1] == "Y") /* update enabled*/
    if (OPAREC.OPAERR != "Y") /* if no error*/
      OP0QSC9(); /* edit for prod duplication*/
    end
  end



   /* *************************************************************/
end // end OP0QSC1

// edit product for 1 w/h model
Function OP0QSC2()



      /* *********************************************************/
      /* * this statement group validates and saves the         **/
      /* * style/color/dim                                      **/
      /* *********************************************************/


      /* set subs for table and map equal for this routine*/

  OPAREC.OPASUB1 = OPAREC.OPASUB; /* sub1 eq table index*/


      /* style = color = dimension = spaces means: delete*/
        /* if review, then set delete status (prod on file)*/
          /* else*/
           /* then clear entry (not review = being entered)*/

  if (OP0QM012.SY1STNBR[OPASUB] == " " /* check for null style*/
   && OP0QM012.SY2CLRID[OPASUB] == " " /* check for null color*/
   && OP0QM012.XDMCD[OPASUB] == " ")   /* check for null dimension*/
    if (OP0QW02.SY1STNBR[OPASUB1] > " " /* entry exists*/
     && OP0QW02.OP0QWACT[OPASUB1] != "D") /* not delete flagged*/
      if (OP0QW02.OP0QWACT[OPASUB1] != "A") /* not add flagged*/
        OP0QW02.OP0QWACT[OPASUB1] = "D"; /* set delete*/
        OP0QW02.OP0QWDEL = OP0QW02.OP0QWDEL + 1; /* delete count*/
        OP0QW02.OP0QWNPR = OP0QW02.OP0QWNPR - 1; /* product count*/
        OP0QW01.OP0QWUPD = "Y"; /* set update flag*/
        OP0QW01.OP0QWUPP = "Y"; /* set update product flag*/
      else
        OP0QW02.OP0QWENT[OPASUB1] = " "; /* clear product entry*/
        OP0QW02.OP0QWNPR = OP0QW02.OP0QWNPR - 1; /* product count*/
      end
    end
    set OP0QM012.SY1STNBR[OPASUB] normal;
    set OP0QM012.SY2CLRID[OPASUB] normal;
    set OP0QM012.XDMCD[OPASUB] normal;
    set OP0QM012.XWHCD[OPASUB] normal;
    return; /* get out*/
  end


      /* set color to '00 ' if null*/
      /* set dimension to '00' if null*/

  if (OP0QM012.SY2CLRID[OPASUB] == " ") /* check for null color*/
    OP0QM012.SY2CLRID[OPASUB] = "00 ";
  end

  if (OP0QM012.XDMCD[OPASUB] == " ") /* check for null dimension*/
    OP0QM012.XDMCD[OPASUB] = "00";
  end


      /* issue select unique to get product*/

  SYCREC.XGPCD = OPDREC.XGPCD; /* load key*/
  SYCREC.SY1STNBR = OP0QM012.SY1STNBR[OPASUB]; /* load key*/
  SYCREC.SY2CLRID = OP0QM012.SY2CLRID[OPASUB]; /* load key*/
  SYCREC.XDMCD = OP0QM012.XDMCD[OPASUB]; /* load key*/
  TA1REC.TA1LOCAT[2] = "OP0QSC2 "; /* statement group*/
  OP0QSZV(); /* select unique*/


      /* if not found, then product number is invalid*/

  if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
    converseLib.validationFailed(257); /* product does not exist*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0QM012.SY1STNBR[OPASUB] cursor, modified, bold;
    set OP0QM012.SY2CLRID[OPASUB] modified, bold;
    set OP0QM012.XDMCD[OPASUB] modified, bold;
    return;
  end


      /* if warehouse was entered, validate entered warehouse*/
      /* against the xwhtbl table.*/

   /* CANADA 09/09/95*/

  if (OP0QM012.XWHCD[OPASUB] > " ")
    if (OP0QM012.XWHCD[OPASUB] in XWHTBL.XWHCD /* warehouse valid*/
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active*/
      if (XWHTBL.XCTCD[sysVar.arrayIndex] == "CANA") /* CANA cannot xfer to Canadian whse*/
        converseLib.validationFailed(078); /* warehouse is not valid*/
        set OP0QM012.XWHCD[OPASUB] cursor, modified, bold;
        OPAREC.OPAERR = "Y"; /* set error flag*/
        return; /* go back*/
      else /* CANA*/
        set OP0QM012.XWHCD[OPASUB] normal; /* CANA*/
      end /* CANA*/
    else
      converseLib.validationFailed(078); /* warehouse is not valid*/
      set OP0QM012.XWHCD[OPASUB] cursor, modified, bold;
      OPAREC.OPAERR = "Y"; /* set error flag*/
      return; /* go back*/
    end
  else
    converseLib.validationFailed(568); /* to-warehouse is required*/
    set OP0QM012.XWHCD[OPASUB] cursor, modified, bold;
    OPAREC.OPAERR = "Y"; /* set error flag*/
    return; /* go back*/
  end

   /* *************************************************************/
                                  /* **/
   /* this check is not being used for now per teri jf. 7/25/88 **/
                                  /* **/
   /* *************************************************************/

      /* if all 6 warehouses in the vcolor02 = spaces,*/
        /* accept the valid entered warehouse*/
      /* else*/
        /* check whse against the warehouses in the vcolor02*/


   /* IF OP0QM012.XWHCD(OPASUB) > ' ';*/
   /* IF SYCREC.XWHCD(1) = ' ';*/
     /* AND SYCREC.XWHCD(2) = ' ';*/
     /* AND SYCREC.XWHCD(3) = ' ';*/
     /* AND SYCREC.XWHCD(4) = ' ';*/
     /* AND SYCREC.XWHCD(5) = ' ';*/
     /* AND SYCREC.XWHCD(6) = ' ';*/
     /* ; next sentence*/
   /* ELSE ;*/
     /* IF OP0QM012.XWHCD(OPASUB) = SYCREC.XWHCD(1);*/
       /* OR OP0QM012.XWHCD(OPASUB) = SYCREC.XWHCD(2);*/
       /* OR OP0QM012.XWHCD(OPASUB) = SYCREC.XWHCD(3);*/
       /* OR OP0QM012.XWHCD(OPASUB) = SYCREC.XWHCD(4);*/
       /* OR OP0QM012.XWHCD(OPASUB) = SYCREC.XWHCD(5);*/
       /* OR OP0QM012.XWHCD(OPASUB) = SYCREC.XWHCD(6);*/
       /* ; next sentence*/
     /* ELSE ;*/
       /* MOVE 'Y' TO OPAREC.OPAERR ; set error flag*/
       /* MOVE 129 TO EZEMNO      ; invalid warehouse for product*/
       /* SET OP0QM012.XWHCD(OPASUB) CURSOR,MODIFIED,BRIGHT;*/
       /* EZERTN;*/
     /* END ;*/
   /* END ;*/
   /* END ;*/
                                  /* **/
   /* end of whse check not being used for now p/teri jf 7/25/88**/
                                  /* **/
   /* *************************************************************/

      /* if table entry blank, then add the product*/

  if (OP0QW02.SY1STNBR[OPASUB1] == " ")
    OP0QW02.OP0QWACT[OPASUB1] = "A"; /* action add*/
    OP0QW02.SY1STNBR[OPASUB1] = OP0QM012.SY1STNBR[OPASUB];
    OP0QW02.SY2CLRID[OPASUB1] = OP0QM012.SY2CLRID[OPASUB];
    OP0QW02.XDMCD[OPASUB1] = OP0QM012.XDMCD[OPASUB];
    OP0QW02.XWHCD[OPASUB1] = OP0QM012.XWHCD[OPASUB];
    OP0QW02.OP0QWNPR = OP0QW02.OP0QWNPR + 1; /* product count*/
    OP0QW01.OP0QWUPD = "Y"; /* set update flag*/
    OP0QW01.OP0QWUPP = "Y"; /* set update product flag*/
    set OP0QM012.SY1STNBR[OPASUB] normal;
    set OP0QM012.SY2CLRID[OPASUB] normal;
    set OP0QM012.XDMCD[OPASUB] normal;
    set OP0QM012.XWHCD[OPASUB] normal;
    if (OPAREC.OPASUB1 > OP0QW02.OP0QWPRD) /* if gt max*/
      OP0QW02.OP0QWPRD = OPAREC.OPASUB1; /* set new max*/
    end
    return; /* get out*/
  end


      /* table entry not blank, see if product is the same,*/
      /* otherwise error since you can't replace an entry*/
      /* without a delete in a previous pass.*/

  if (OP0QM012.SY1STNBR[OPASUB] == OP0QW02.SY1STNBR[OPASUB1] /* style*/
   && OP0QM012.SY2CLRID[OPASUB] == OP0QW02.SY2CLRID[OPASUB1] /* color*/
   && OP0QM012.XDMCD[OPASUB] == OP0QW02.XDMCD[OPASUB1])      /* dimension*/
    if (OP0QW02.OP0QWACT[OPASUB1] == "D") /* delete*/
      OP0QW02.OP0QWACT[OPASUB1] = " "; /* set to no action*/
      OP0QW02.OP0QWDEL = OP0QW02.OP0QWDEL - 1; /* delete count*/
      OP0QW02.OP0QWNPR = OP0QW02.OP0QWNPR + 1; /* product count*/
    else
      if (OP0QM012.XWHCD[OPASUB] != OP0QW02.XWHCD[OPASUB1]) /* warehouse*/
        OP0QW02.XWHCD[OPASUB1] = OP0QM012.XWHCD[OPASUB];
        OP0QW01.OP0QWUPD = "Y"; /* set update flag*/
        OP0QW01.OP0QWUPP = "Y"; /* set update product flag*/
        OP0QW02.OP0QWACT[OPASUB1] = "C"; /* set to change action*/
      end
    end
    set OP0QM012.SY1STNBR[OPASUB] normal;
    set OP0QM012.SY2CLRID[OPASUB] normal;
    set OP0QM012.XDMCD[OPASUB] normal;
    set OP0QM012.XWHCD[OPASUB] normal;
    return; /* get out*/
  else
    converseLib.validationFailed(258); /* cannot replace product entry*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0QM012.SY1STNBR[OPASUB] cursor, modified, bold;
    set OP0QM012.SY2CLRID[OPASUB] modified, bold;
    set OP0QM012.XDMCD[OPASUB] modified, bold;
    set OP0QM012.XWHCD[OPASUB] modified, bold;
    return;
  end



   /* *************************************************************/
end // end OP0QSC2

// edit for product duplication
Function OP0QSC9()



      /* *********************************************************/
      /* * edit to ensure that a product has not been duplicated**/
      /* * on the request.                                      **/
      /* *********************************************************/


  OPAREC.OPASUB1 = OP0QW02.OP0QWPRD; /* init table index (curr max)*/
  while (OPAREC.OPASUB1 >= 2) /* table index*/

    if (OP0QW02.SY1STNBR[OPASUB1] > " " /* style exists*/
     && OP0QW02.OP0QWACT[OPASUB1] != "D")

      OPAREC.OPASUB2 = OPAREC.OPASUB1 - 1; /* table 2nd index*/
      while (OPAREC.OPASUB2 >= 1)
        if (OP0QW02.SY1STNBR[OPASUB2] > " " /* style exists*/
         && OP0QW02.SY1STNBR[OPASUB2] == OP0QW02.SY1STNBR[OPASUB1]
         && OP0QW02.SY2CLRID[OPASUB2] == OP0QW02.SY2CLRID[OPASUB1]
         && OP0QW02.XDMCD[OPASUB2] == OP0QW02.XDMCD[OPASUB1]
         && OP0QW02.OP0QWACT[OPASUB2] != "D")
          set OP0QM012.SY1STNBR[OPASUB2] cursor, bold;
          set OP0QM012.SY2CLRID[OPASUB2] bold;
          set OP0QM012.XDMCD[OPASUB2] bold;
          set OP0QM012.SY1STNBR[OPASUB1] cursor, bold;
          set OP0QM012.SY2CLRID[OPASUB1] bold;
          set OP0QM012.XDMCD[OPASUB1] bold;
          OPAREC.OPAERR = "Y"; /* set error flag*/
          converseLib.validationFailed(268); /* product has already been used on request*/
        end
        OPAREC.OPASUB2 = OPAREC.OPASUB2 - 1; /* table 2nd index*/
      end
    end

    OPAREC.OPASUB1 = OPAREC.OPASUB1 - 1; /* table index*/
  end



   /* *************************************************************/
end // end OP0QSC9

// set mdt's on if modified
Function OP0QSD1()



      /* *********************************************************/
      /* * set mdt's in fields for the case of invalid aid key  **/
      /* * this allows the user to press the correct aid key    **/
      /* * without having to re-enter the data                  **/
      /* *********************************************************/


  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex <= 20)
    if (OP0QM013.OP0QMSEL[sysVar.arrayIndex] is modified) /* whse code*/
      set OP0QM013.OP0QMSEL[sysVar.arrayIndex] modified;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end



   /* *************************************************************/
end // end OP0QSD1

// edit process
Function OP0QSD2()



     /* **********************************************************/
     /* *          this process edits the screen                **/
     /* **********************************************************/

  if (OP0QM013 is modified) /* set update if modified*/
    OP0QW01.OP0QWUPD = "Y"; /* set update flag*/
    OP0QW01.OP0QWUPH = "Y"; /* set update header flag*/
  end

  OPDREC.OPDXWHCD = " "; /* init whse codes*/
  OPAREC.OPASUB = 1; /* map sub*/
  OPAREC.OPASUB1 = 1; /* opdrec sub*/

  while (OPASUB <= 20) /* subscript checking*/
    if (OP0QM013.XWHCD[OPASUB] > " " /* whse to edit*/
     && OPAREC.OPAERR != "Y")        /* and no errors*/
      if (OP0QM013.OP0QMSEL[OPASUB] > " ") /* and whse selected*/
        if (OPAREC.OPASUB1 <= 3) /* max whse selection*/
          set OP0QM013.OP0QMSEL[OPASUB] normal;
          OPDREC.XWHCD[OPASUB1] = OP0QM013.XWHCD[OPASUB];
        else
          OPAREC.OPAERR = "Y"; /* error found*/
          converseLib.validationFailed(425); /* more than 3 whse selected*/
          set OP0QM013.OP0QMSEL[OPASUB] cursor, bold;
          return;
        end
        OPAREC.OPASUB1 = OPAREC.OPASUB1 + 1;
      end
    end
    OPAREC.OPASUB = OPAREC.OPASUB + 1;
  end





   /* *************************************************************/
end // end OP0QSD2

// set mdt's on if modified
Function OP0QSE1()

      /* *********************************************************/
      /* * set mdt's in fields for the case of invalid aid key  **/
      /* * this allows the user to press the correct aid key    **/
      /* * without having to re-enter the data                  **/
      /* *********************************************************/

  if (OP0QM014.OP-SPGM-RSTR-IND is modified) /* sales program restricted ind*/
    set OP0QM014.OP-SPGM-RSTR-IND modified;
  end

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex <= 5)
    if (OP0QM014.SP1ID[sysVar.arrayIndex] is modified) /* sales programs*/
      set OP0QM014.SP1ID[sysVar.arrayIndex] modified;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

  if (OP0QM014.OP-REPRC-OVRD-FL is modified) /* reprice overrides flag*/
    set OP0QM014.OP-REPRC-OVRD-FL modified;
  end


   /* *************************************************************/
end // end OP0QSE1

// edit process
Function OP0QSE2()



     /* **********************************************************/
     /* *          this process edits the screen                **/
     /* **********************************************************/

  if (OP0QM014 is modified) /* set update if modified*/
    OP0QW01.OP0QWUPD = "Y"; /* set update flag*/
    OP0QW01.OP0QWUPH = "Y"; /* set update header flag*/
  end

  OP0QSE3(); /* edit reprice overrides flag*/

  OP0QSE4(); /* edit sales programs*/

  OP0QSE5(); /* edit sales program restricted*/
                                   /* indicator*/

   /* *************************************************************/
end // end OP0QSE2

// edit process
Function OP0QSE3()



     /* **********************************************************/
     /* *       edits the screen reprice overrides flag         **/
     /* * 'y' means products with previous price overrides will **/
     /* *     be repriced. Default value is 'n'                 **/
     /* **********************************************************/


  if (OP0QM014.OP-REPRC-OVRD-FL == "Y"
   || OP0QM014.OP-REPRC-OVRD-FL == "N")
    set OP0QM014.OP-REPRC-OVRD-FL normal;
    OPDREC.OP-REPRC-OVRD-FL = OP0QM014.OP-REPRC-OVRD-FL;
  else
    OPAREC.OPAERR = "Y"; /* error found*/
    converseLib.validationFailed(595); /* reprice overrides - correct response*/
                                   /* 'y' or 'n'*/
    set OP0QM014.OP-REPRC-OVRD-FL cursor, bold;
  end


   /* *************************************************************/
end // end OP0QSE3

// edit process
Function OP0QSE4()



     /* **********************************************************/
     /* *          this process edits the screen                **/
     /* **********************************************************/


  OPDREC.OPDSP1CD = " ";
  OPAREC.OPASUB = 1; /* map sub*/
  OPAREC.OPASUB1 = 0; /* opdrec sub*/

  while (OPASUB <= 5)
    OP0QSE6(); /* validate spgm*/
    OPAREC.OPASUB = OPAREC.OPASUB + 1;
  end


  if (OPAREC.OPAERR == "N")
    if (OP0QM014.OP-SPGM-RSTR-IND == "3" /* option requires at least 1 spgm*/
     && OPAREC.OPASUB1 == 0)            
      OPAREC.OPAERR = "Y"; /* error found*/
      converseLib.validationFailed(596); /* option requires at least 1 sales program*/
      set OP0QM014.SP1ID[1] cursor, bold;
    end
  end



   /* *************************************************************/
end // end OP0QSE4

// edit process
Function OP0QSE5()



     /* **********************************************************/
     /* *  edits the sales program restricted indicator         **/
     /* **********************************************************/


  if (OP0QM014.OP-SPGM-RSTR-IND == "1"
   || OP0QM014.OP-SPGM-RSTR-IND == "2"
   || OP0QM014.OP-SPGM-RSTR-IND == "3")
    set OP0QM014.OP-SPGM-RSTR-IND normal;
    OPDREC.OP-SPGM-RSTR-IND = OP0QM014.OP-SPGM-RSTR-IND;
  else
    OPAREC.OPAERR = "Y"; /* error found*/
    converseLib.validationFailed(710); /* more than 3 whse selected*/
    set OP0QM014.OP-SPGM-RSTR-IND cursor, bold;
  end


   /* *************************************************************/
end // end OP0QSE5

// edit sales program
Function OP0QSE6()



      /* *********************************************************/
      /* * this statement group edits the sales program*/
      /* *********************************************************/



      /* null sales program is ok*/

  if (OP0QM014.SP1ID[OPASUB] == " ")
    set OP0QM014.SP1ID[OPASUB] normal;
    return;
  end


      /* validate sales program existance - doesn't need to be active*/

  SP1REC.SP1ID = OP0QM014.SP1ID[OPASUB]; /* load key*/
  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
    OP0QSE7(); /* CANA validate salespgm by country*/
    if (OPAREC.OPAERR == "N") /* CANA if valid salespgm by country*/
      OPAREC.OPASUB1 = OPAREC.OPASUB1 + 1;
      set OP0QM014.SP1ID[OPASUB] normal;
      OPDREC.SP1ID[OPASUB1] = OP0QM014.SP1ID[OPASUB];
    end /* CANA*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* check for not found*/
      OPAREC.OPAERR = "Y"; /* set error flag*/
      converseLib.validationFailed(024); /* sales program id is not valid*/
      set OP0QM014.SP1ID[OPASUB] cursor, modified, bold;
    else
      TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
      TA1REC.TA1TBLVU = "VSPGM001"; /* table view*/
      TA1REC.TA1TBLKE = SP1REC.SP1ID; /* key value*/
      TA1REC.TA1LOCAT[3] = "OP0QSE6 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = "IO0070  "; /* i/o mod name*/
      XSOPS02();
    end
  end



   /* *************************************************************/
end // end OP0QSE6

// edit sales program by country
Function OP0QSE7()
      /* **********************************************************/
      /* this statement group edits the sales program by country*/
      /* **********************************************************/

  SP2REC.SP1ID = OP0QM014.SP1ID[OPASUB]; /* CANA*/
  OP0QSSP(); /* CANA select set*/

  OP0QNSP(); /* CANA select next*/

  if (SQLCA.VAGen_SQLCODE != 0) /* CANA row not found*/
    OPAREC.OPAERR = "Y"; /* CANA*/
    converseLib.validationFailed(024); /* CANA sales program is not valid*/
    set OP0QM014.SP1ID[OPASUB] cursor, modified, bold; /* CANA*/
    return;
  end


   /* ********** TCS INCLUDE BEGIN ***********/

  set VXVO0001 empty;
  set SQLCA empty;
  set OPVREC empty;
  VXVO0001.XOTCD = SP2REC.XOTCD; /* valid system order type*/
  OPVREC.OPVCOUFL = "N";
  call "VXVO0001" ("S7", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VXVO0001";
    TA1REC.TA1TBLKE = VXVO0001-KEY;
    TA1REC.TA1LOCAT[3] = "OP0QSE7";
    TA1REC.TA1LOCAT[3] = "VXVO0001";
    OP0QSZZ(); /* abort routine*/
  else

    while (OPVREC.OPVCOUFL == "N"
     && SQLCA.VAGen_SQLCODE != 100)
      call "VXVO0001" ("N7", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};

      if (SQLCA.VAGen_SQLCODE == 0)
        if (VXVO0001.XSOCD in XSOTBL.XSOCD
         && XSOTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          OPVREC.OPVCOUFL = "Y";
          if (OP0QW01.XCTCD == "USA" && XSOTBL.XCTCD[sysVar.arrayIndex] != "CANA"
           || OP0QW01.XCTCD == "CANA" && XSOTBL.XCTCD[sysVar.arrayIndex] == "CANA")
                  /* next sentence*/
          else
            OPAREC.OPAERR = "Y"; /* CANA*/
            converseLib.validationFailed(913); /* sales program not valid for country*/
            set OP0QM014.SP1ID[OPASUB] cursor, modified, bold; /* CANA*/
          end
        else
          OPAREC.OPAERR = "Y"; /* CANA*/
          converseLib.validationFailed(109); /* sales office is not valid*/
          set OP0QM014.SP1ID[OPASUB] cursor, modified, bold; /* CANA*/
        end
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          OPAREC.OPAERR = "Y"; /* CANA*/
          converseLib.validationFailed(017); /* order type is not valid*/
          set OP0QM014.SP1ID[OPASUB] cursor, modified, bold; /* CANA*/
        else
          TA1REC.TA1DBASE = "DCORP";
          TA1REC.TA1TBLVU = "VXVO0001";
          TA1REC.TA1TBLKE = VXVO0001-KEY;
          TA1REC.TA1LOCAT[3] = "OP0QSE7";
          TA1REC.TA1LOCAT[3] = "VXVO0001";
          OP0QSZZ(); /* abort routine*/
        end
      end
    end
  end
  call "VXVO0001" ("C7", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VXVO0001";
    TA1REC.TA1TBLKE = VXVO0001-KEY;
    TA1REC.TA1LOCAT[3] = "OP0QSE7";
    TA1REC.TA1LOCAT[3] = "VXVO0001";
    OP0QSZZ(); /* abort routine*/
  end

  /* **********TCS INCLUDE BEGIN ***********/

  OP0QCSP(); /* CANA close set*/
end // end OP0QSE7

// control update
Function OP0QSJ1()



      /* *********************************************************/
      /* * this statement group controls the updating of the    **/
      /* * request currently being entered or reviewed.         **/
      /* *********************************************************/


  TA1REC.TA1LOCAT[2] = "OP0QSJ1 "; /* init error diag area*/


      /* verify that at least one product has been entered*/

  OP0QSJB(); /* validate number of products*/


      /* if no error, then do updates*/

  if (OPAREC.OPAERR == "Y") /* error?*/
    exit stack;
  end


      /* get current date and time*/

  OP0QSZW(); /* get date and time*/


      /* process request header*/

  if (OP0QW01.OP0QWUPH == "Y") /* header update*/
    if (OP0QW01.OP0QWRVF == "Y") /* review mode*/
      OP0QSZG(); /* update request*/
    else
      OP0QSZE(); /* add request*/
    end
  end


      /* process products*/

  if (OP0QW01.OP0QWUPP == "Y") /* product update*/
     /* IF OP0QW02.OP0QWDEL GT 0      ; product to be deleted*/
       /* OP0QSJ4                     ; compress product table*/
     /* END ;*/
    OP0QSJ2(); /* update product control*/
  end



   /* *************************************************************/
end // end OP0QSJ1

// control prod update
Function OP0QSJ2()



      /* *********************************************************/
      /* * this statement group controls the updating of the    **/
      /* * products for the request currently being entered     **/
      /* * or reviewed.                                         **/
      /* *********************************************************/


  TA1REC.TA1LOCAT[2] = "OP0QSJ2 "; /* init error diag area*/


      /* process request products*/

  OPAREC.OPASUB1 = 1; /* init table index*/
  while (OPAREC.OPASUB1 <= OP0QW02.OP0QWPRD) /* le max table*/

    set OPEREC empty; /* clear record*/
    OPEREC.OPDRQID = OPDREC.OPDRQID; /* load key*/
    OPEREC.OPELNINB = OPAREC.OPASUB1; /* load key*/

    if (OP0QW02.OP0QWACT[OPASUB1] == "C") /* change*/
      OP0QSZJ(); /* select product*/
      OP0QSJ3(); /* update product rec*/
      OP0QSZP(); /* update product*/
    else
      if (OP0QW02.OP0QWACT[OPASUB1] == "A") /* add*/
        OP0QSJ3(); /* update product rec*/
        OP0QSZN(); /* add product*/
      else
        if (OP0QW02.OP0QWACT[OPASUB1] == "D") /* delete*/
          OP0QSZO(); /* delete product*/
        end
      end
    end
    OPAREC.OPASUB1 = OPAREC.OPASUB1 + 1; /* table index*/
  end



   /* *************************************************************/
end // end OP0QSJ2

// update fields in prod rec
Function OP0QSJ3()



      /* *********************************************************/
      /* * this statement group updates the product rec from    **/
      /* * the product table entry.                             **/
      /* *********************************************************/


      /* load product information*/

      /* load main prod info for all types*/

  OPEREC.OPDRQID = OPDREC.OPDRQID; /* load key*/
  OPEREC.OPELNINB = OPAREC.OPASUB1; /* load key*/
  OPEREC.XGPCD = OPDREC.XGPCD;
  OPEREC.SY1STNBR = OP0QW02.SY1STNBR[OPASUB1];
  OPEREC.SY2CLRID = OP0QW02.SY2CLRID[OPASUB1];
  OPEREC.XDMCD = OP0QW02.XDMCD[OPASUB1];
  OPEREC.XWHCD = OP0QW02.XWHCD[OPASUB1];

      /* load substitution prod info for replace type*/

  if (OPDREC.OPDRQTYP == "2")
    OPEREC.OP2SSTYN = OP0QW03.OP2SSTYN[OPASUB1];
    OPEREC.OP2SCLCD = OP0QW03.OP2SCLCD[OPASUB1];
    OPEREC.OP2SDMCD = OP0QW03.OP2SDMCD[OPASUB1];
  end

      /* load price info for replace or reprice types*/

  if (OPDREC.OPDRQTYP == "2"
   || OPDREC.OPDRQTYP == "4")
    OP0QW05.OP0QWPAR = OP0QW04.OP0QWPAR[OPASUB1];
    OPEREC.OP2PRCVF = OP0QW05.OP2PRCVF; /* prc ovrd flag*/
    OPEREC.OPEPRCS = OP0QW05.OPEPRCS; /* price array*/
  end



   /* *************************************************************/
end // end OP0QSJ3

// clear recs after update
Function OP0QSJA()



      /* *********************************************************/
      /* * this statement group clears the working storage recs **/
      /* * used to define a request.                            **/
      /* *********************************************************/


      /* clear records after update for next cycle*/

  set OPDREC empty; /* clear recs after update*/
  set OPEREC empty;
  OP0QSJC(); /* clear prod table recs*/

  OP0QW01.OPDRQID = " "; /* clear request id*/
  OP0QW01.OP0QWUPD = "N"; /* clear update flag*/
  OP0QW01.OP0QWUPH = "N"; /* clear update header flag*/
  OP0QW01.OP0QWUPP = "N"; /* clear update product flag*/
  OP0QW01.OP0QWRVF = "N"; /* clear review mode*/



   /* *************************************************************/
end // end OP0QSJA

// validate number of products
Function OP0QSJB()



      /* *********************************************************/
      /* * edit number of product for request                   **/
      /* *********************************************************/


  if (OP0QW02.OP0QWNPR <= 0) /* zero products*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    converseLib.validationFailed(261); /* must enter at least 1 prod*/
  end



   /* *************************************************************/
end // end OP0QSJB

// clear recs after update
Function OP0QSJC()



      /* *********************************************************/
      /* * this statement group clears the working storage recs **/
      /* * used to define a request.                            **/
      /* *********************************************************/


      /* clear product table records after update for next cycle*/

  set OP0QW02 empty;
  set OP0QW03 empty;
  set OP0QW05 empty;
  OP0QW05.OP2PRCVF = "N"; /* clear price vary flag*/

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex <= 54)
    OP0QW04.OP0QWPAR[sysVar.arrayIndex] = OP0QW05.OP0QWPAR;
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end



   /* *************************************************************/
end // end OP0QSJC

// vortyp01 select set
Function OP0QSSP()

      /* *********************************************************/
      /* * this statement group performs a select set for       **/
      /* * the dspgm.vortyp01 table.                           **/
      /* *********************************************************/

      /* issue select set request*/

  call "IO0080" ("SS", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for select set*/

      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VORTYP01"; /* table view*/
    TA1REC.TA1TBLKE = SP2REC.SP2KEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0QSSP "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0080  "; /* i/o mod name*/
    OP0QSZZ(); /* abort*/
  end

   /* *************************************************************/
end // end OP0QSSP

// vmntrq01 select unique
Function OP0QSZA()



      /* *********************************************************/
      /* * this statement group performs a select unique for    **/
      /* * the dorder.vmntrq01 table.                           **/
      /* *********************************************************/


      /* issue select unique to get request*/

  call "VMNTRQ03" ("S ", SQLCA, OPDREC) {isNoRefresh = yes, isExternal = yes};
                                   /* i/o mod for select unique*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VMNTRQ03"; /* table view*/
    TA1REC.TA1TBLKE = OPDREC.OPDKEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0QSZA "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "VMNTRQ03"; /* i/o mod name*/
    OP0QSZZ(); /* abort*/
  end



   /* *************************************************************/
end // end OP0QSZA

// vmntrq01 select set
Function OP0QSZB()



      /* *********************************************************/
      /* * this statement group performs a select set for       **/
      /* * the dorder.vmntrq01 table.                           **/
      /* *********************************************************/


      /* issue select set request*/

  call "VMNTRQ03" ("SS", SQLCA, OPDREC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for select set*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VMNTRQ01"; /* table view*/
    TA1REC.TA1TBLKE = OPDREC.OPDKEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0QSZB "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "VMNTRQ03  "; /* i/o mod name*/
    OP0QSZZ(); /* abort*/
  end



   /* *************************************************************/
end // end OP0QSZB

// vmntrq01 select next
Function OP0QSZC()



      /* *********************************************************/
      /* * this statement group performs a select next for      **/
      /* * the dorder.vmntrq01 table.                           **/
      /* *********************************************************/


      /* issue select next to get request*/

  call "VMNTRQ03" ("SN", SQLCA, OPDREC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for select next*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* check for end of set rc*/

      OP0QW01.OP0QRQFL = "N"; /* * CANA set flag for end of set*/
    else
      TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
      TA1REC.TA1TBLVU = "VMNTRQ03"; /* table view*/
      TA1REC.TA1TBLKE = OPDREC.OPDKEY; /* key value*/
      TA1REC.TA1LOCAT[3] = "OP0QSZC "; /* statement group*/
      TA1REC.TA1LOCAT[4] = "VMNTRQ03  "; /* i/o mod name*/
      OP0QSZZ(); /* abort*/
    end
  end



   /* *************************************************************/
end // end OP0QSZC

// vmntrq01 close set
Function OP0QSZD()



      /* *********************************************************/
      /* * this statement group performs a close set for        **/
      /* * the dorder.vmntrq01 table.                           **/
      /* *********************************************************/


      /* issue close set request*/

  call "VMNTRQ03" ("CS", SQLCA, OPDREC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for close set*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VMNTRQ03"; /* table view*/
    TA1REC.TA1TBLKE = OPDREC.OPDKEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0QSZD "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "VMNTRQ03  "; /* i/o mod name*/
    OP0QSZZ(); /* abort*/
  end



   /* *************************************************************/
end // end OP0QSZD

// vmntrq01 add
Function OP0QSZE()



      /* *********************************************************/
      /* * this statement group performs an add for             **/
      /* * the dorder.vmntrq01 table.                           **/
      /* *********************************************************/


      /* create status, setup date and time*/

  OPDREC.XXXSTAT = "A";
  OPDREC.ZZZSDT = OP0QW01.ZZZCHGDT;
  OPDREC.ZZZSTM = OP0QW01.ZZZCHGTM;


      /* issue add request*/

  call "VMNTRQ03" ("A ", SQLCA, OPDREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for add*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == -803) /* check for duplicate rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VMNTRQ03"; /* table view*/
    TA1REC.TA1TBLKE = OPDREC.OPDKEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0QSZE "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "VMNTRQ03  "; /* i/o mod name*/
    OP0QSZZ(); /* abort*/
  end



   /* *************************************************************/
end // end OP0QSZE

// vmntrq01 delete
Function OP0QSZF()



      /* *********************************************************/
      /* * this statement group performs a delete for           **/
      /* * the dorder.vmntrq01 table.                           **/
      /* *********************************************************/


      /* issue delete request*/

  call "VMNTRQ03" ("D ", SQLCA, OPDREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for dlt*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VMNTRQ03"; /* table view*/
    TA1REC.TA1TBLKE = OPDREC.OPDKEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0QSZF "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "VMNTRQ03"; /* i/o mod name*/
    OP0QSZZ(); /* abort*/
  end



   /* *************************************************************/
end // end OP0QSZF

// vmntrq01 update
Function OP0QSZG()



      /* *********************************************************/
      /* * this statement group performs an update for          **/
      /* * the dorder.vmntrq01 table.                           **/
      /* *********************************************************/


      /* update change date and time*/

  OPDREC.ZZZCHGDT = OP0QW01.ZZZCHGDT;
  OPDREC.ZZZCHGTM = OP0QW01.ZZZCHGTM;


      /* issue update request*/

  call "VMNTRQ03" ("U ", SQLCA, OPDREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for upd*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0   /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100 /* check for notfnd rc*/
   || SQLCA.VAGen_SQLCODE == -803) /* check for duplicate rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VMNTRQ03"; /* table view*/
    TA1REC.TA1TBLKE = OPDREC.OPDKEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0QSZG "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "VMNTRQ03"; /* i/o mod name*/
    OP0QSZZ(); /* abort*/
  end



   /* *************************************************************/
end // end OP0QSZG

// vmntsy01 select unique
Function OP0QSZJ()



      /* *********************************************************/
      /* * this statement group performs a select unique for    **/
      /* * the dorder.vmntsy01 table.                           **/
      /* *********************************************************/


      /* issue select unique to get request*/

  call "IO0780" ("S ", SQLCA, OPEREC) {isNoRefresh = yes, isExternal = yes};
                                   /* i/o mod for select unique*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VMNTSY01"; /* table view*/
    TA1REC.TA1TBLKE = OPEREC.OPEKEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0QSZJ "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0780  "; /* i/o mod name*/
    OP0QSZZ(); /* abort*/
  end



   /* *************************************************************/
end // end OP0QSZJ

// vmntsy01 select set
Function OP0QSZK()



      /* *********************************************************/
      /* * this statement group performs a select set for       **/
      /* * the dorder.vmntsy01 table.                           **/
      /* *********************************************************/


      /* issue select set request*/

  call "IO0780" ("SS", SQLCA, OPEREC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for select set*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VMNTSY01"; /* table view*/
    TA1REC.TA1TBLKE = OPEREC.OPEKEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0QSZK "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0780  "; /* i/o mod name*/
    OP0QSZZ(); /* abort*/
  end



   /* *************************************************************/
end // end OP0QSZK

// vmntsy01 select next
Function OP0QSZL()



      /* *********************************************************/
      /* * this statement group performs a select next for      **/
      /* * the dorder.vmntsy01 table.                           **/
      /* *********************************************************/


      /* issue select next to get request*/

  call "IO0780" ("SN", SQLCA, OPEREC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for select next*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VMNTSY01"; /* table view*/
    TA1REC.TA1TBLKE = OPEREC.OPEKEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0QSZL "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0780  "; /* i/o mod name*/
    OP0QSZZ(); /* abort*/
  end



   /* *************************************************************/
end // end OP0QSZL

// vmntsy01 close set
Function OP0QSZM()



      /* *********************************************************/
      /* * this statement group performs a close set for        **/
      /* * the dorder.vmntsy01 table.                           **/
      /* *********************************************************/


      /* issue close set request*/

  call "IO0780" ("CS", SQLCA, OPEREC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for close set*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VMNTSY01"; /* table view*/
    TA1REC.TA1TBLKE = OPEREC.OPEKEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0QSZM "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0780  "; /* i/o mod name*/
    OP0QSZZ(); /* abort*/
  end



   /* *************************************************************/
end // end OP0QSZM

// vmntsy01 add
Function OP0QSZN()



      /* *********************************************************/
      /* * this statement group performs an add for             **/
      /* * the dorder.vmntsy01 table.                           **/
      /* *********************************************************/


      /* create setup date and time*/

  OPEREC.ZZZSDT = OP0QW01.ZZZCHGDT;
  OPEREC.ZZZSTM = OP0QW01.ZZZCHGTM;

   /* CANADA 09/01/95*/

  OPEREC.XCTCD = OP0QW01.XCTCD; /* CANA*/
  OPEREC.ZFC-CRCY-CD = OP0QW01.ZFC-CRCY-CD; /* CANA*/


      /* issue add request*/

  call "IO0780" ("A ", SQLCA, OPEREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for add*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == -803) /* check for duplicate rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VMNTSY01"; /* table view*/
    TA1REC.TA1TBLKE = OPEREC.OPEKEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0QSZN "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0780  "; /* i/o mod name*/
    OP0QSZZ(); /* abort*/
  end



   /* *************************************************************/
end // end OP0QSZN

// vmntsy01 delete
Function OP0QSZO()



      /* *********************************************************/
      /* * this statement group performs a delete for           **/
      /* * the dorder.vmntsy01 table.                           **/
      /* *********************************************************/


      /* issue delete request*/

  call "IO0780" ("D ", SQLCA, OPEREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for delete*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VMNTSY01"; /* table view*/
    TA1REC.TA1TBLKE = OPEREC.OPEKEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0QSZO "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0780  "; /* i/o mod name*/
    OP0QSZZ(); /* abort*/
  end



   /* *************************************************************/
end // end OP0QSZO

// vmntsy01 update
Function OP0QSZP()



      /* *********************************************************/
      /* * this statement group performs an update for          **/
      /* * the dorder.vmntsy01 table.                           **/
      /* *********************************************************/


      /* update change date and time*/

  OPEREC.ZZZCHGDT = OP0QW01.ZZZCHGDT;
  OPEREC.ZZZCHGTM = OP0QW01.ZZZCHGTM;

   /* CANADA 09/01/95*/

  OPEREC.XCTCD = OP0QW01.XCTCD; /* CANA*/
  OPEREC.ZFC-CRCY-CD = OP0QW01.ZFC-CRCY-CD; /* CANA*/


      /* issue update request*/

  call "IO0780" ("U ", SQLCA, OPEREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for update*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VMNTSY01"; /* table view*/
    TA1REC.TA1TBLKE = OPEREC.OPEKEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0QSZP "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0780  "; /* i/o mod name*/
    OP0QSZZ(); /* abort*/
  end



   /* *************************************************************/
end // end OP0QSZP

// vmntsy01 delete set
Function OP0QSZQ()



      /* *********************************************************/
      /* * this statement group performs a delete set for       **/
      /* * all the products for a specified request for         **/
      /* * the dorder.vmntsy01 table.                           **/
      /* *********************************************************/


      /* issue delete set request*/

  call "IO0780" ("DS", SQLCA, OPEREC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for delete set*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VMNTSY01"; /* table view*/
    TA1REC.TA1TBLKE = OPEREC.OPEKEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0QSZQ "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0780  "; /* i/o mod name*/
    OP0QSZZ(); /* abort*/
  end



   /* *************************************************************/
end // end OP0QSZQ

// vsvrep01 select unique
Function OP0QSZT()




      /* *********************************************************/
      /* * this statement group performs a select unique for    **/
      /* * the dcust.vsvrep01 table.                            **/
      /* *********************************************************/


      /* issue select unique to get request*/

  call "IO0550" ("SA", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};
                                   /* i/o mod for select unique*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0   /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100 /* check for notfnd rc*/
   || SQLCA.VAGen_SQLCODE == -811) /* check for more than one*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSVREP01"; /* table view*/
    TA1REC.TA1TBLKE = KUYREC.XXXUSRID; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0QSZT "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0550  "; /* i/o mod name*/
    OP0QSZZ(); /* abort*/
  end



   /* *************************************************************/
end // end OP0QSZT

// vscale01 select unique
Function OP0QSZU()




      /* *********************************************************/
      /* * this statement group performs a select unique for    **/
      /* * the dprod.vscale01 table.                            **/
      /* *********************************************************/


      /* issue select unique to get request*/

  call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};
                                   /* i/o mod for select unique*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DPROD   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSCALE01"; /* table view*/
    TA1REC.TA1TBLKE = SY4REC.SY4SZSCL; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0QSZU "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0040  "; /* i/o mod name*/
    OP0QSZZ(); /* abort*/
  end



   /* *************************************************************/
end // end OP0QSZU

// vcolor02 select unique
Function OP0QSZV()




      /* *********************************************************/
      /* * this statement group performs a select unique for    **/
      /* * the dprod.vcolor02 table.                            **/
      /* *********************************************************/


      /* issue select unique to get request*/

  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};
                                   /* i/o mod for select unique*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DPROD   "; /* data base name*/
    TA1REC.TA1TBLVU = "VCOLOR02"; /* table view*/
    TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0QSZV "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0560  "; /* i/o mod name*/
    OP0QSZZ(); /* abort*/
  end



   /* *************************************************************/
end // end OP0QSZV

// get current date and time
Function OP0QSZW()



      /* *********************************************************/
      /* * this statement group gets the current date and time  **/
      /* * for the zzz audit fields in the data base rows.      **/
      /* *********************************************************/


      /* get current date and time for update fields*/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";

  call "TA0040" (TA2REC) {isExternal = yes}; /* call date module*/

  if (TA2REC.TA2RTNCD != 0)
    TA1REC.TA1DBASE = " ";
    TA1REC.TA1TBLVU = " ";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOCAT[3] = "OP0QSZW";
    TA1REC.TA1LOCAT[4] = "TA0040";
    set SQLCA empty;
    OP0QSZZ(); /* abort*/
  else
    OP0QW01.ZZZCHGTM = TA2REC.TA2TIMHM;
    OP0QW01.ZZZCHGDT = TA2REC.TA2GRGGN;
  end



   /* *************************************************************/
end // end OP0QSZW

// abort from bad db2 rc
Function OP0QSZZ()



      /* *********************************************************/
      /* * this statement group performs an abort when a bad    **/
      /* * db2 rc is encountered.                               **/
      /* *********************************************************/


  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* invoke syncpoint rollback*/
  call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call abend formatter*/
  COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
  XSPF4(); /* invoke master menu*/
  exit program;



   /* *************************************************************/
end // end OP0QSZZ

//*** RECORD=OP0QW01 ****
// *********** ORDER GLOBAL MAINT WS RECORD COMMAREA **********
// 
// DB2 TABLE:           NONE
// 
// COPYLIB MEMBER:      NONE
// 
// I/O MOD:             NONE
// 
// KEY TO DB2 TABLE:    NONE
// 
// DATE CREATED:        08/26/86
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 08-26-86   JSN       INITIAL RECORD CREATION
// 
// ***********************
Record OP0QW01 type basicRecord
  5 OP0QWGP1 OP0QWGP1 ; 
    10 OP0QWOPT OP0QWOPT ; 
    10 OP0QWRVF OP0QWRVF ; 
    10 OP0QWREJ OP0QWREJ ; 
    10 OP0QWCAN OP0QWCAN ; 
    10 OP0QWUPD OP0QWUPD ; 
    10 OP0QWUPH OP0QWUPH ; 
    10 OP0QWUPP OP0QWUPP ; 
    10 OP0QWPFL OP0QWPFL ; 
    10 OP0QWMPR OP0QWMPR ; 
    10 OP0QWMPP OP0QWMPP ; 
    10 OP0QWERR OP0QWERR ; 
    10 OPDRQID OPDRQID ; 
    10 OP0QWCHG OP0QWCHG ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 OPDGROUP OPDGROUP ; 
    10 XCTCD XCTCD ; 
      15 OP0QW-XCTCD-12 OP0QW-XCTCD-12 ; 
      15 OP0QW-XCTCD-34 OP0QW-XCTCD-34 ; 
    10 ZFC-CRCY-CD ZFC-CRCY-CD ; 
    10 OP0QRQOK OP0QRQOK ; 
    10 OP0QRQFL OP0QRQFL ; 
    10 OP0QSUB OP0QSUB ; 
    10 OP0QW-WSY2000-POST-1 OP0QW-WSY2000-POST-1 ; 
      15 OP0QW-WSY2000-GPC-CD OP0QW-WSY2000-GPC-CD ; 
      15 OP0QW-WSY2000-DASH-1 OP0QW-WSY2000-DASH-1 ; 
      15 OP0QW-WSY2000-STY-NBR OP0QW-WSY2000-STY-NBR ; 
      15 OP0QW-WSY2000-DASH-2 OP0QW-WSY2000-DASH-2 ; 
      15 OP0QW-WSY2000-COLR-CD OP0QW-WSY2000-COLR-CD ; 
      15 OP0QW-WSY2000-DASH-3 OP0QW-WSY2000-DASH-3 ; 
      15 OP0QW-WSY2000-DIM-CD OP0QW-WSY2000-DIM-CD ; 
      15 OP0QW-WSY2000-DASH-4 OP0QW-WSY2000-DASH-4 ; 
      15 OP0QW-WSY2000-PROD-REG-CD OP0QW-WSY2000-PROD-REG-CD ; 
      15 OP0QW-WSY2000-DASH-5 OP0QW-WSY2000-DASH-5 ; 
      15 OP0QW-WSY2000-RETURN-CD OP0QW-WSY2000-RETURN-CD ; 
end // end OP0QW01

//*** RECORD=OP0QW02 ****
// *********** ORDER GLOBAL MAINT WS RECORD COMMAREA **********
//                  PRODUCT LINE ITEM TABLE
// 
// DB2 TABLE:           NONE
// 
// COPYLIB MEMBER:      NONE
// 
// I/O MOD:             NONE
// 
// KEY TO DB2 TABLE:    NONE
// 
// DATE CREATED:        08/26/86
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 08-26-86   JSN       INITIAL RECORD CREATION
// 
// ***********************
Record OP0QW02 type basicRecord
  5 OP0QWGP2 OP0QWGP2 ; 
    10 OP0QWPRD OP0QWPRD ; 
    10 OP0QWDEL OP0QWDEL ; 
    10 OP0QWNPR OP0QWNPR ; 
    10 OP0QWSCR OP0QWSCR ; 
    10 OP0QWSTL OP0QWSTL ; 
    10 OP0QWSTH OP0QWSTH ; 
    10 OP0QWAR2 OP0QWAR2 [450] ; 
      15 OP0QWENT OP0QWENT ; 
        20 OP0QWACT OP0QWACT ; 
        20 SY1STNBR SY1STNBR ; 
        20 SY2CLRID SY2CLRID ; 
        20 XDMCD XDMCD ; 
        20 XWHCD XWHCD ; 
end // end OP0QW02

//*** RECORD=OP0QW03 ****
// *********** ORDER GLOBAL MAINT WS RECORD EXTENSION *********
//            REPLACE PROD TABLE EXTENSION FOR OP0QW02
// 
// DB2 TABLE:           NONE
// 
// COPYLIB MEMBER:      NONE
// 
// I/O MOD:             NONE
// 
// KEY TO DB2 TABLE:    NONE
// 
// DATE CREATED:        08/26/86
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 08-26-86   JSN       INITIAL RECORD CREATION
// 
// ***********************
Record OP0QW03 type basicRecord
  5 OP0QWGP3 OP0QWGP3 ; 
    10 OP0QWAR3 OP0QWAR3 [34] ; 
      15 OP2SSTYN OP2SSTYN ; 
      15 OP2SCLCD OP2SCLCD ; 
      15 OP2SDMCD OP2SDMCD ; 
end // end OP0QW03

//*** RECORD=OP0QW04 ****
// *********** ORDER GLOBAL MAINT WS RECORD EXTENSION *********
//                PRICE TABLE EXTENSION OF OP0QW03
//                 PROVIDES TWO DIMENSIONAL ARRAY
// 
// DB2 TABLE:           NONE
// 
// COPYLIB MEMBER:      NONE
// 
// I/O MOD:             NONE
// 
// KEY TO DB2 TABLE:    NONE
// 
// DATE CREATED:        08/26/86
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 08-26-86   JSN       INITIAL RECORD CREATION
// 
// ***********************
Record OP0QW04 type basicRecord
  5 OP0QWGP4 OP0QWGP4 ; 
    10 OP0QWPAR OP0QWPAR [54] ; 
      15 OP2PRCVF OP2PRCVF ; 
      15 OPEPRCS OPEPRCS ; 
end // end OP0QW04

//*** RECORD=OP0QW05 ****
// *********** ORDER GLOBAL MAINT WS RECORD EXTENSION *********
//                PRICE TABLE EXTENSION OF OP0QW04
// 
// DB2 TABLE:           NONE
// 
// COPYLIB MEMBER:      NONE
// 
// I/O MOD:             NONE
// 
// KEY TO DB2 TABLE:    NONE
// 
// DATE CREATED:        08/26/86
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 08-26-86   JSN       INITIAL RECORD CREATION
// 
// ***********************
Record OP0QW05 type basicRecord
  5 OP0QWGP5 OP0QWGP5 ; 
    10 OP0QWPAR OP0QWPAR ; 
      15 OP2PRCVF OP2PRCVF ; 
      15 OPEPRCS OPEPRCS ; 
        20 SY5PRCUN SY5PRCUN [40] ; 
end // end OP0QW05

//*** RECORD=OP0QW08 ****
// *********** ORDER GLOBAL MAINT WS RECORD COMMAREA **********
// 
// DB2 TABLE:           NONE
// 
// COPYLIB MEMBER:      NONE
// 
// I/O MOD:             NONE
// 
// KEY TO DB2 TABLE:    NONE
// 
// DATE CREATED:        08/26/86
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 08-26-86   JSN       INITIAL RECORD CREATION
// 
// ***********************
Record OP0QW08 type basicRecord
  5 OP0QWGP8 OP0QWGP8 ; 
    10 OP0QWPNX OP0QWPNX ; 
    10 OP0QWPGT OP0QWPGT ; 
      15 OPDRQID OPDRQID [20] ; 
end // end OP0QW08

//*** RECORD=OP0QW09 ****
// *
// * saved version of SYCREC  - DPROD.VCOLOR02
// *
// ***********************
Record OP0QW09 type basicRecord
  5 SYCDATA SYCDATA ; 
    10 SYCKEY SYCKEY ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
    10 SY4SZSCL SY4SZSCL ; 
    10 XSUCD XSUCD ; 
    10 XBTCD XBTCD ; 
    10 XUMCD XUMCD ; 
    10 XRYCD XRYCD ; 
    10 SY1RYELG SY1RYELG ; 
    10 XCWCD XCWCD ; 
    10 XBCCD XBCCD ; 
    10 XSPCD XSPCD ; 
    10 XFMCD XFMCD ; 
    10 XCNCD XCNCD ; 
    10 XMLCD XMLCD [4] ; 
    10 FK-NBR-AIRBAG-SHOE FK-NBR-AIRBAG-SHOE ; 
    10 XGCCD XGCCD ; 
    10 XGACD XGACD ; 
    10 XQTCD1 XQTCD1 ; 
    10 XQTCD2 XQTCD2 ; 
    10 SY1DURT1 SY1DURT1 ; 
    10 SY1DURT2 SY1DURT2 ; 
    10 SY1ADON1 SY1ADON1 ; 
    10 SY1ADON2 SY1ADON2 ; 
    10 XFCCD1 XFCCD1 ; 
    10 XFCCD2 XFCCD2 ; 
    10 XFCCD3 XFCCD3 ; 
    10 XFCCD4 XFCCD4 ; 
    10 XFCCD5 XFCCD5 ; 
    10 XFCCD6 XFCCD6 ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 SY1BSTNB SY1BSTNB ; 
    10 SY1STYNM SY1STYNM ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 SY1TECHS SY1TECHS ; 
    10 SY1UNPCS SY1UNPCS ; 
    10 SY1AVEWT SY1AVEWT ; 
    10 SY1FNSHG SY1FNSHG ; 
    10 SY1DUTYS SY1DUTYS ; 
    10 SY1COMPF SY1COMPF ; 
    10 SY1PRCZS SY1PRCZS ; 
    10 SY1DECSZ SY1DECSZ ; 
    10 FY7MLDCD FY7MLDCD ; 
    10 FY8LSTCD FY8LSTCD ; 
    10 PG1FCTCD PG1FCTCD ; 
    10 PG4AIRB1 PG4AIRB1 ; 
    10 PG4AIRB2 PG4AIRB2 ; 
    10 PG4AIRB3 PG4AIRB3 ; 
    10 SY1WHOV1 SY1WHOV1 ; 
    10 SY1WHOV2 SY1WHOV2 ; 
    10 SY1UCOV1 SY1UCOV1 ; 
    10 SY1UCOV2 SY1UCOV2 ; 
    10 XPCCD XPCCD [2] ; 
    10 XPLCD XPLCD ; 
    10 SY2PKGFL SY2PKGFL ; 
    10 XCLCD1 XCLCD1 ; 
    10 XCLCD2 XCLCD2 ; 
    10 XCLCD3 XCLCD3 ; 
    10 XCLCD4 XCLCD4 ; 
    10 XDVCD1 XDVCD1 ; 
    10 XPRCD XPRCD ; 
    10 XOGCD XOGCD ; 
    10 XDR-PROD-REG-CD XDR-PROD-REG-CD ; 
    10 XMCCD1 XMCCD1 ; 
    10 XMCCD2 XMCCD2 ; 
    10 XMCCD3 XMCCD3 ; 
    10 XMCCD4 XMCCD4 ; 
    10 SY2MCP1 SY2MCP1 ; 
    10 SY2MCP2 SY2MCP2 ; 
    10 SY2MCP3 SY2MCP3 ; 
    10 SY2MCP4 SY2MCP4 ; 
    10 XSECD XSECD ; 
    10 XSNYR XSNYR ; 
    10 SY2RSTNB SY2RSTNB ; 
    10 SY2BCLCD SY2BCLCD ; 
    10 SY2CLRDS SY2CLRDS ; 
    10 SY2CLRAB SY2CLRAB ; 
    10 XWHCD XWHCD [6] ; 
    10 SY2BOSWI SY2BOSWI ; 
    10 SY2BOEDT SY2BOEDT ; 
    10 YCQCD YCQCD ; 
    10 SY2COEDT SY2COEDT ; 
    10 XLCCD1 XLCCD1 ; 
    10 XLCCD2 XLCCD2 ; 
    10 XLCCD3 XLCCD3 ; 
    10 XLCCD4 XLCCD4 ; 
    10 SY2CEDT1 SY2CEDT1 ; 
    10 SY2CEDT2 SY2CEDT2 ; 
    10 SY2CEDT3 SY2CEDT3 ; 
    10 SY2CEDT4 SY2CEDT4 ; 
    10 SY2POFBD SY2POFBD ; 
    10 SY2POFXD SY2POFXD ; 
    10 SY2FOFBD SY2FOFBD ; 
    10 SY2FOFXD SY2FOFXD ; 
    10 SY2NOFBD SY2NOFBD ; 
    10 SY2NOFXD SY2NOFXD ; 
    10 SY2ALNOR SY2ALNOR ; 
    10 OPZHMIND OPZHMIND ; 
    10 SY2RPRDI SY2RPRDI ; 
    10 SY2UPCFL SY2UPCFL ; 
    10 PC3POIDT PC3POIDT ; 
    10 SY2FDSMO SY2FDSMO ; 
    10 SY2FNSMO SY2FNSMO ; 
    10 SY2PDCMO SY2PDCMO ; 
    10 SY2PNCMO SY2PNCMO ; 
    10 SY2TDIND SY2TDIND ; 
    10 SY2SSCIN SY2SSCIN ; 
    10 SY-DUTY-RT-CD SY-DUTY-RT-CD ; 
    10 PG1SC4CD PG1SC4CD ; 
    10 PG4DMGRN PG4DMGRN ; 
    10 XDVCD XDVCD [40] ; 
    10 SY3FRGUT SY3FRGUT [40] ; 
end // end OP0QW09

//*** RECORD=OPDREC ****
// ****************** REQUEST OGM ID TABLE ********************
// 
// DB2 TABLE:           DORDER.VMNTRQ01
// 
// COPYLIB MEMBER:      DCL00037
// 
// I/O MOD:             IO0210
// 
// KEY TO DB2 TABLE:    OPDRQID
// 
// DATE CREATED:        08/26/86
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 08-26-86   JSN       INITIAL RECORD CREATION
// 07-08-88   craine    added xwhcd (occurs 3 times)
// 01/08/91   CHYDE     Chg data item desc to db2 names.
// 10/28/91   craine    add reprice ovrd-flag,sales program
//                      restricted ind, 5 sales programs and
//                      rename xot to xob and reduce to 20
//                      occurances.
// **********************
Record OPDREC type basicRecord
  5 OPDGROUP OPDGROUP ; 
    10 OPDKEY OPDKEY ; 
      15 OPDRQID OPDRQID ; 
    10 OPDRQRSQ OPDRQRSQ ; 
    10 OPDRQTYP OPDRQTYP ; 
    10 OPDRQEDT OPDRQEDT ; 
    10 OPDRQDSC OPDRQDSC ; 
    10 XGPCD XGPCD ; 
    10 OPDXWHCD OPDXWHCD ; 
      15 XWHCD XWHCD [3] ; 
    10 OPDRBNDT OPDRBNDT ; 
    10 OPDRENDT OPDRENDT ; 
    10 * char(27) ; // filler
    10 XOMCD XOMCD ; 
    10 OP4TXT OP4TXT ; 
    10 OPDDSCPF OPDDSCPF ; 
    10 XXXSTAT XXXSTAT ; 
    10 KUYSVRID KUYSVRID ; 
    10 OPDXOSCD OPDXOSCD ; 
      15 XOSCD XOSCD [13] ; 
    10 OPDXOBCD OPDXOBCD ; 
      15 XOBCD XOBCD [40] ; 
    10 OPDXSOCD OPDXSOCD ; 
      15 XSOCD XSOCD [26] ; 
    10 OPDSP1CD OPDSP1CD ; 
      15 SP1ID SP1ID [5] ; 
    10 OP-SPGM-RSTR-IND OP-SPGM-RSTR-IND ; 
    10 OP-REPRC-OVRD-FL OP-REPRC-OVRD-FL ; 
    10 SOCD-HDR-RSN-TXT SOCD-HDR-RSN-TXT ; 
    10 SOCD-SZ-RSN-TXT SOCD-SZ-RSN-TXT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end OPDREC

//*** RECORD=OPEREC ****
// **************** REQUEST OGM PRODUCT TABLE *****************
// 
// DB2 TABLE:           DORDER.VMNTSY01
// 
// COPYLIB MEMBER:      DCL00038
// 
// I/O MOD:             IO0780
// 
// KEY TO DB2 TABLE:    OPDRQID
// 
// DATE CREATED:        08/26/86
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 08-26-86   JSN       INITIAL RECORD CREATION
// 01/08/91  CHYDE      Correct data item desc for opelninb.
// 02-21-94  gcalki     db2 changes
//                      resize:sy-prc-per-unit 1-40
// 03-29-94  gcalki     db2 changes
//                      add:xctcd
//                      add:zfc-crcy-cd
// **********************
Record OPEREC type basicRecord
  5 OPEGROUP OPEGROUP ; 
    10 OPEKEY OPEKEY ; 
      15 OPDRQID OPDRQID ; 
      15 OPELNINB OPELNINB ; 
    10 XCTCD XCTCD ; 
    10 ZFC-CRCY-CD ZFC-CRCY-CD ; 
    10 XGPCD XGPCD ; 
    10 XWHCD XWHCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 OP2SSTYN OP2SSTYN ; 
    10 OP2SCLCD OP2SCLCD ; 
    10 OP2SDMCD OP2SDMCD ; 
    10 OP2PRCVF OP2PRCVF ; 
    10 OPEPRCS OPEPRCS ; 
      15 SY5PRCUN SY5PRCUN [40] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end OPEREC

//*** RECORD=OPVREC ****
// *
// *   This record contains the IO-task, and Count and the
// *   Count flag.
// *
// *   The record is passed back to the calling application.
// *   The call statement is:
// *
// *   CALL VXVO0001 OPVREC,SQLCA,VXVO0001 (NOMAPS,NONCSP;
// ************************************************************
// *   BL 690  03/26/98  eshanm   Created.
// ************************************************************
// **********************
Record OPVREC type basicRecord
  5 OPVGROUP OPVGROUP ; 
    10 OPVTASK OPVTASK ; 
    10 OPVCOUNT OPVCOUNT ; 
    10 OPVCOUFL OPVCOUFL ; 
end // end OPVREC

// OP_REPRC_OVRD_FL
DataItem OP-REPRC-OVRD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OP_SPGM_RSTR_IND
DataItem OP-SPGM-RSTR-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0QRQFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0QRQOK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0QSUB num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OP0QW-WSY2000-COLR-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0QW-WSY2000-DASH-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0QW-WSY2000-DASH-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0QW-WSY2000-DASH-3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0QW-WSY2000-DASH-4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0QW-WSY2000-DASH-5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0QW-WSY2000-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0QW-WSY2000-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0QW-WSY2000-POST-1 char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0QW-WSY2000-PROD-REG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0QW-WSY2000-RETURN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0QW-WSY2000-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0QW-XCTCD-12 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0QW-XCTCD-34 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// action (a,c,d, blank)
DataItem OP0QWACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product array (all func)
DataItem OP0QWAR2 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// replace product array(64 max)
DataItem OP0QWAR3 char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cancel request flag?(y/?)
DataItem OP0QWCAN char(1)  {
  align = left, fillCharacter = " ", inputRequired = no
}
end

// change flag
DataItem OP0QWCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of deletes
DataItem OP0QWDEL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prod entry
DataItem OP0QWENT char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag?(y/?)
DataItem OP0QWERR char(1)  {
  align = left, fillCharacter = " ", inputRequired = no
}
end

// record group level
DataItem OP0QWGP1 char(502)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem OP0QWGP2 char(6312)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem OP0QWGP3 char(374)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem OP0QWGP4 char(13014)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem OP0QWGP5 char(241)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem OP0QWGP8 char(202)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prods on prev scr flag?(y/?)
DataItem OP0QWMPP char(1)  {
  align = left, fillCharacter = " ", inputRequired = no
}
end

// prods on screen flag?(y/?)
DataItem OP0QWMPR char(1)  {
  align = left, fillCharacter = " ", inputRequired = no
}
end

// number of products
DataItem OP0QWNPR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// menu option(1-dir,2-new,3-rev
DataItem OP0QWOPT char(1)  {
  align = left, fillCharacter = " ", inputRequired = no
}
end

// price array
DataItem OP0QWPAR char(241)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// price by size flag?(y/?)
DataItem OP0QWPFL char(1)  {
  align = left, fillCharacter = " ", inputRequired = no
}
end

// page table (dir keys)
DataItem OP0QWPGT char(200)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pg tbl index
DataItem OP0QWPNX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = " ", inputRequired = no
}
end

// largest prod sub
DataItem OP0QWPRD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reject update flag?(y/?)
DataItem OP0QWREJ char(1)  {
  align = left, fillCharacter = " ", inputRequired = no
}
end

// review mode flag?(y/?)
DataItem OP0QWRVF char(1)  {
  align = left, fillCharacter = " ", inputRequired = no
}
end

// prod screen number
DataItem OP0QWSCR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen to tab index hi
DataItem OP0QWSTH smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen to tab index low
DataItem OP0QWSTL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// update required flag?(y/?)
DataItem OP0QWUPD char(1)  {
  align = left, fillCharacter = " ", inputRequired = no
}
end

// update header flag?(y/?)
DataItem OP0QWUPH char(1)  {
  align = left, fillCharacter = " ", inputRequired = no
}
end

// update product flag?(y/?)
DataItem OP0QWUPP char(1)  {
  align = left, fillCharacter = " ", inputRequired = no
}
end

// op-writ-dscrp-fl
DataItem OPDDSCPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem OPDGROUP char(440)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// opdrec key
DataItem OPDKEY char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OP_RQT_NEED_BDT
DataItem OPDRBNDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// OP_RQT_NEED_XDT
DataItem OPDRENDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// OP_RQT_DESC
DataItem OPDRQDSC char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OP_RQT_EDT
DataItem OPDRQEDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// OP_RQT_ID
DataItem OPDRQID char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OP_RQT_RUN_SEQ
DataItem OPDRQRSQ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// OP_RQT_TYPE
DataItem OPDRQTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// spgm array
DataItem OPDSP1CD char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// base order type codes
DataItem OPDXOBCD char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order status codes
DataItem OPDXOSCD char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales office codes
DataItem OPDXSOCD char(52)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse codes
DataItem OPDXWHCD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem OPEGROUP char(300)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// operec key
DataItem OPEKEY char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-rqt-prod-seq
DataItem OPELNINB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// price array
DataItem OPEPRCS char(240)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// count flag for occurence
DataItem OPVCOUFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of line items
DataItem OPVCOUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level
DataItem OPVGROUP char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// io-task
DataItem OPVTASK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

