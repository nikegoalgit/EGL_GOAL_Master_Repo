package op0d;
import av.common.*;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import in1.common.*;
import ko.common.*;
import ku.common.*;
import nl.common.*;
import ob.common.*;
import oi.common.*;
import op.common.*;
import pc.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=OP0D ****
// ************************************************************
// * nike order entry - draw from bulk order                  *
// *                                                          *
// *                                                          *
// * overview: this application will allow a draw order to be *
// *           entered to draw against an existing customer   *
// *           company bulk order.                            *
// *           draw order header record is going to be created*
// *           from the customer company bulk order header the*
// *           same way as dup-header-only works in order     *
// *           entry.                                         *
// *                                                          *
// *           this program will flow to the product header   *
// *           (op0h).                                        *
// *                                                          *
// * date created: 09/20/86                                   *
// *                                                          *
// * maintenance history:                                     *
// *                                                          *
// * date      by whom     overview of changes made           *
// * --------  ---------   ---------------------------------  *
// * 09/20/86  thuha mai   program created                    *
// * 11/06/86  thuha mai   activated the cust. department on  *
// *                       the screen                         *
// * 02/10/87  jvande      changed s60 to default more fields *
// *                       from the bulk order                *
// * 03/10/87  jvande      chngd s66, didn't handle comments. *
// *                       , changed to exclude. wrote recs   *
// *                       without truning on orhdr flag.
// * 04/01/87  jvande      changed to keep bulk rec and write
// *                       dates for commissions. (s60)
// * 04/30/87  jvande      chngd addressing, only use bulk
// *                       addr if bulk has no ovrd's and cust
// *                       num not chngd on draw.
// * 09/17/87  tfox        added code to init op1expdf to 'n'
// *                       for draw ordersin stmt grp s60.
// * 10/14/87  tfox        added code to 020 to handle invalid
// *                       pa1 pa2 keys.
// * 12/02/87  tfox        remove unused table
// *
// * 12/21/87  tfox        fix rep/agency bug for draws s50
// * 02/24/88  craine      added code to s60 to init op1ndraw
// *                       to zero.
// * 05/09/88  craine      fix to always validate zip code
// * 07/25/88  obecke      s66,s71,w01: redid the load of key
// *                       to ta1rec so could read it.
// * 10/13/88  jwood       changed calls to include NONCSP opt
// * 10/18/88  jjohns      s72: redid the load of key to
// *                       ta1rec so it could be read.
// * 12/13/88  dwalke      allow up to two year in advance
// *                       need date. - s30, s35 bug # 101
// * 01/09/89  dwalke      add segmented transaction id to appl
// * 03/21/89  obecke      add xobtbl to appl. use xotabrv
// *                       on map instead of xotabrv. m001,015.
// * 05/10/89  jbecke      database changes:  op0ds50, s60.
// * 06/29/89  schase      chg init of prev cr stat cde to '00'
// *                       in s60.
// * 08/02/89  rdavis      default sale agnecy/rep from bulk
// *                       on customer draws except if sales
// *                       office 10. fix #217. op0ds50.
// * 08/07/89  rdavis      default billto shipto address id's
// *                       from customer if customer changed.
// *                       fix #217. s50.
// * 08/24/89  ssteph      initialize credit fields when
// *                       creating orders. s60.
// * 09/05/89  skott       wildcard gpc if not ftwr or apparel
// *                       for cust/apparel read.  s50
// * 10/10/89  owhatever   adjust w.s. seq counter fields to
// *                       match newly added labels before the
// *                       map edit on labels takes place. s66.
// * 10/12/89  owhatever   cole haan requires a do not ship
// *                       before date now.  s20,s25.
// * 11/02/89  rcoron      colehan initializes dont-ship-before
// *                       date to the need date. s17.
// * 11/13/89  skott       remove reference to op1shrdt, replac
// *                       with op1cpodt.  s60. (DB changes)
// * 12/06/89  cgrice      cleanup of unnecessary read of
// *                       kunrec in cust nbr edit.  s50
// * 03/26/90  mgatre      if customer is changed, blank out
// *                       agency/rep.   s50
// * 05/30/90  BWATSO      Brand code changes.  Changed: S17,
// *                       S20, S25, S50, and W01.  New: SLE.
// * 06/06/90  BWATSO      Added more account classes to legal
// *                       entity check - S50
// * 06/20/90  oricha      removed account classes from  legal
// *                       entity check - S50
// * 07/03/90  ischmi      default normal agency/rep to bulk
// *                       draw for spcl cust grp - s50
// * 07/17/90  zlefko      validate draw customer order type
// *                       profile
// * 08/07/90  jwood       changed op0ds60 to use xcscd as a
// *                       character field
// * 10/30/90  dviert      added a check to make sure the need
// *                       date is in the dorder.vcutof01 table
// * 12/19/90  craine      eliminate spgm edit for "PRI1"
// * 02/05/91  craine      remove kuarec - no longer used
// * 02/12/91  jloyer      DB2 changes impact op0ds50, op0ds60.
// *                       Repl kunrec.kumshaid with kumrec.
// *                       kumshaid (req'd new call to kumrec).
// *                       Repl kunrec.kuablid with kucrec.
// *                       kucblaid.  Repl kunrec.kunalseq with
// *                       kucrec.kucseqap or kucrec.kucseqft.
// *                       Repl kunrec.xaccd with kucrec.xaccd
// *                       (1) or (2).  Init xchcd to spaces.
// * 02/26/91  swatso      change xchcd in s60 from ' ' to '00'
// * 02/28/91  schase      added edit to dsnb date for not
// *                       allowing dsnb date > 21 days past
// *                       the need date. s35.
// * 02/28/91  tfox        t-shirt changes: s01, s25, s3a, s3b,
// *                       010, added op0dwftf to op0dw01.
// * 03/06/91  swatso      Added stmt grp s36 to exclude spec-
// *                       ial customer groups MI,MB,12,BK,AA,
// *                       AF from dsnb edit. Modified s35 to
// *                       call s36.
// * 03/11/91  dmeier      changed op0ds25 to call op0ds30 when
// *                       need date is modified or if xbdcd is
// *                       'b' or 'f'. (blank bulk draw)
// * 03/27/91  dharri      log 445 - po # required - phase one
// *                       s50 - chg'ed from kunrec.kunporfl
// *                       (cust level single char y/n flag) to
// *                       kucrec.ypocd (compnay level two char
// *                       code).
// * 03/27/91  schen       log 530 - change to allow authorized
// *                       users to change dsnb date even it is
// *                       21 days past need date.
// * 04/03/91  tfox        chgs for menu services. s60,wgrp,
// *                       w01,015.
// * 04/25/91  dflesh      log #484.  chg in s50.  if spgm alw
// *                       fl in xautbl is 'n' do not allow
// *                       spgm for acct cls or acct type.
// * 04/25/91  bbake2      added edits for cust po #.  changes
// *                       to sah, s25.
// * 05/10/91  bbake2      revised edits for cust po#.  changes
// *                       to map 001, saw, s25, s60, 010, 015,
// *                       020, w/s w01, table t01.  sgrp sah
// *                       removed.
// * 05/14/91  SCHASE      Retained the original DSNB Date if
// *                       a unauthorized user was unsuccessful
// *                       at changing the date. S35.
// * 05/20/91  dharri      log #600 - allow comp # to default
// *                       from cust bulks. added comp # to map
// *                       and code to 015 & s60.
// * 05/21/91  jloyer      log #635: if dcust.vcugrp01 was not
// *                       found for a customer, the spec-cust-
// *                       list for spgm was not being checked
// *                       (op0ds51 was not being executed).
// *                       Removed err #43 which was preventing
// *                       the spec-cust-list check.  op0ds50.
// * 05/22/91  schen       log #554 - data base changes
// *                       changed kuprec.xsgcd occurance from
// *                       40 to 10 in op0ds50. changed kunrec.
// *                       kuncrfl to kucrec.kucvndfl in
// *                       op0ds60.
// * 06/10/91  bbake2      database changes - kucrec, kunrec,
// *                       kuprec, op1rec, op2rec, op3rec,
// *                       sp1rec
// *                       rename ypocd to kucypofd - 015, s50,
// *                              saw
// *                       rename kunalswq to op1alseq - s60
// *                              kuncrfl  to kucvndfl
// *                       add nordstrom's (NO) to checking of
// *                               xgscd - s36, s50
// * 06/19/91  bbake2      adjusted s3b to use bulk owner group
// *                       for blank bulk draws
// * 01/10/92  gwells      723 - default '05' allocation hold
// *                             code from bulk to draw - 015,
// *                             s60.
// * 03/12/92  JLoyer      DB2 chgs: dlet op1bgrpo, op1wipin,
// *                       (s50, s60).  Replaced op1dsdcf with
// *                       op-dirshp-dsct-pct & init = 0 (s60).
// *                       Added op-srep-ovrd-fl init (s60).
// * 05/28/92  DLEGG       Log #778. Do not default order enter
// *                       date or agcy/srep from the bulk. Use
// *                       current date for OP1ENTDT. Initial-
// *                       ize SM4SREP, SM1AGCY so they will
// *                       be derived in OP0J as is done for
// *                       non-draws. Changes to S50, S60.
// *  08/04/92  bbake2     log#785 - added comp edits 020
// *  08/19/92  dlegg      set ta2rec empty before TA0040 call
// *                       in S60. Suspect uninitialized record
// *                       causing bad setup dates.
// *  09/11/92  bbake2     log#903 - changes to obtain alloc
// *                       sequence from new subroutine KU1540.
// *                       s60, call-ku1540.
// *  12/17/93  gcalki     xcc table chagne - add code to check
// *                       active credit code. s50, check-credt
// *  04/01/94  gcalki     Log #1003 - renamed causera to
// *                       ca-user-workarea-4k so it can hold
// *                       opwrec which is now 3072 bytes.(ALL)
// *  08/30/94  schase     Virtual Airspeed - Apply special
// *                       Nike Retail Sales Program Default
// *                       for the Draw Order. s60, w01, 015
// *  06/23/95  mmcgol     Canadian Project - Zip in op0dm001
// *                       expanded to 6 bytes,op0dw01.op0dwzzp
// *                       expanded to 6 bytes, op0ds50 changed
// *                       to prevent change of customer number
// *                       to one in different xdz-data-dist-cd
// *  12/07/95  cbrine     Canadian Project - Skip legal entity
// *                       checking for Canadian orders(OP0DS50
// *  09/12/96  mvalbu     Nike bulk/draw - Changed map to add
// *                       base order type code and added edits
// *                       for it. Changed op0dm001, op0ds20,
// *                       op0ds25, op0ds50, op0ds51, op0d015,
// *                       op0dw01.
// *                       Added op0ds53, op0ds73, and op0ds74.
// *  10/29/96  mvalbu     Added customer info on screen. Allow
// *                       sales program to be changed for a
// *                       nike draw and added edits for sales
// *                       program id. Changed op0dm, op0ds01,
// *                       op0ds20, op0ds25, op0ds30, op0ds50,
// *                       op0ds60, op0d015. Added op0ds5a and
// *                       new ws record, op0dw02.
// *  12/07/96 csawki      Add Product Category for Equipment
// *                       new ws record, op0dw02.
// *  01/13/97 mvalbu      Changes to 'n' bulks process.
// *                       Changed op0ds15, op0ds55, op0d015,
// *                       and op0ds74.
// *  01/28/97 mvalbu      Changes to 'n' bulks process, phase
// *                       2. Changed op0dm, op0ds50, and added
// *                       op0ds75 and op0ds76.
// *  05/05/97 jnaemu      Changes for N bulks.
// *                       Allow update of the comp nbr field
// *                       Added OP0DS80, OP0DS81, OP0DS82,
// *                       OP0DS83 to validate comp nbr. Change
// *                       OP0DS45 to use sales office from the
// *                       taken by field when changed. Changed
// *                       OP0DS60 to default receive date to
// *                       the system date. Required the order
// *                       type to be entered. Allow update of
// *                       the order class field. Added OP0DS84
// *                       and OP0DS85 to validate order class.
// *  06/24/97 csawki      Added Equipment/Product Category
// *                       changes: added OPWREC01 to Working
// *                       Storage, modified OP0DS01, OP0DS74,
// *                       OP0D010 and added 3 new sgrps:
// *                       1) OP0DS02
// *                       2) OP0DS-CHECK-EQUIP
// *                       3) OP0DS-EU0100-SU.
// *
// *  07/22/97 jnaemu      Bypass label process in OP0ds60 for
// *                       nike bulk draws.
// *  09/08/97 wleong      regen for yostbl structure change
// *                       nike bulk draws.
// *  Y2KFIX
// *  10/29/97 d bettr     Y2K MODIFICATIONS MADE TO:
// *                       STATEMENT GROUP OP0DS19
// *                       ALLOW YEAR 00 TO BE ENTERED.
// *
// *  01/29/98 eshanm      Populate Order prof field from table
// *                       DCUST.VCUXOP01 instead of VCMPNY01
// *                       Changed in statement group OP0DS55
// *                       the application.
// *                       Included a WS variable VCUXOP01
// *                       in the RECD/TABLE list
// *
// *  03/11/98 dsmit0      added edit to check for a dnsb date
// *                       if whse is 51 in op0ds20 & op0ds25.
// *
// *  03/12/98 jflor1      modified OP0DS55 to use correct
// *                       product category field, which is
// *                       opwrec01.xpccd.  Equipment was
// *                       getting the wrong profile code
// *                       from vcuxop01.
// *
// *  03/24/98 sgopal      removed use of xvotbl and added code
// *                       to access dcorp.vxvo0001 using the
// *                       iomod vxvo0001.
// *                       The statement group changed is: S74
// *
// *  04/01/98 sgopal      Removed code that acceses XVOTBL in
// *                       OP0DS74.
// *  10/08/98 jflor1      Recompiled to move KUMREC to prod.
// *  04/13/99 sgopal      Added code in OP0DS35 to validate
// *                       DNSB dates for weekends.
// *
// *  02/24/00 nkathi      Added code in OP0DS19 to avoid
// *                       Date validation for DNSA when it
// *                       is zero.  Date checking logic is
// *                       modified to add 'YY' string in
// *                       in DNSA year field when MM & DD of
// *                       DNSA is zero.
// ************************************************************
// *********************
Program OP0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AVGREC AVGREC; // record
  AVIREC AVIREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  KUPREC KUPREC; // record
  KUQREC KUQREC; // record
  KUSREC KUSREC; // record
  KUYREC KUYREC; // record
  OECREC OECREC; // record
  OP0DW01 OP0DW01; // record
  OP0DW02 OP0DW02; // record
  OP1REC OP1REC; // record
  OP4REC OP4REC; // record
  OP5REC OP5REC; // record
  OP7REC OP7REC; // record
  OPAREC OPAREC; // record
  OPJREC OPJREC; // record
  OPKREC OPKREC; // record
  OPLREC OPLREC; // record
  OPOREC OPOREC; // record
  OPWREC OPWREC; // record
  OPWREC01 OPWREC01; // record
  SP1REC SP1REC; // record
  SP2REC SP2REC; // record
  SP4REC SP4REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  VCULVLPD VCULVLPD; // record
  VCUXOP01 VCUXOP01; // record
  VDSTRB01 VDSTRB01; // record
  VXVO0001 VXVO0001; // record
  WEU0100 WEU0100; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use OP0DT01 {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use XCCTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XNDTBL {deleteAfterUse = yes}; // table
  use XOBTBL {deleteAfterUse = yes}; // table
  use XOCTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YOSTBL {deleteAfterUse = yes}; // table
  use OP0DM.OP0DM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OP0D010: OP0D010();
     /* ************************************************************/


    goto OP0D015;


     /* ************************************************************/
    OP0D015: OP0D015();
     /* ************************************************************/


    goto OP0D020; /* display the screen*/


     /* ************************************************************/
    OP0D020: OP0D020();
     /* ************************************************************/


    if (OPAREC.OPAERR == "Y")
      goto OP0D020; /* redisplay the screen*/
    end


         /* if no error found*/

    if (converseVar.eventKey is enter)
      OPWREC.OP1GROUP = OP1REC.OP1GROUP;
      COMMAREA.CA-USER-WORKAREA-4K = OPWREC.OPWSGRP;
      COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
      COMMAREA.CACURRAP = "OP0H";
      transfer to program "OP0H" passing COMMAREA; /* go to product header screen*/
    end



     /* ************************************************************/
  end // end main
end // end OP0D

// program init
Function OP0D010()



     /* *********************************************************/
     /* *  this process initialize program work and map areas  **/
     /* *********************************************************/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value


  OP0DS01(); /* clear map and records*/

       /* set revision number of application*/

  OP0DM001.OPMRVN = "02"; /* o/e on-line allocation*/


  XSENTRY(); /* check security*/
  XSOPS01(); /* check order entry security*/

  OP0DS02(); /* retrieve user 2k common area*/

   /* ****************************************************/
   /* *** set segmented trans id                      ****/
   /* ****************************************************/

  COMMAREA.CAEZSAP = sysVar.transactionID;
  COMMAREA.CAEZSG12 = "OP";
  COMMAREA.CAEZSG4 = "D";
  sysVar.transactionID = COMMAREA.CAEZSAP;

   /* *************************************************************/


             /* retrieve op1rec record*/

       /* note: if there are multiple sub orders in the bulk*/
             /* order, the op1rec passed to this program in the*/
             /* opwrec is the first active sub-order with the*/
             /* available quantities for draws*/


  OP1REC.OP1GROUP = OPWREC.OP1GROUP;


       /* move current date & process name to screen*/

  OP0DM001.OPMPRC = "OP0D010";
  OP0DM001.OPMDT = VGVar.currentShortGregorianDate; /* current date to screen*/

       /* save the current date*/

  OPAREC.OPACYMD = VGVar.currentShortGregorianDate;
  if (OPAREC.OPACYY > 56) /* set century based on year*/
    OPAREC.OPACCC = 19;
  else
    OPAREC.OPACCC = 20;
  end


  OP0DW01.OP0DWFTF = "Y"; /* set 1st time warning flag to 'y'*/
  OP0DW01.OP0DWARN = 9; /* set po# hold warning flag.*/
                                  /* value of 9 indicates warning*/
                                  /* has not been displayed*/
   /* ************************************************************/
end // end OP0D010

// format screen
Function OP0D015()


        /* ******************************************************/
        /* * this process moves data on the bulk order header  **/
        /* * record to the screen                              **/
        /* * ****************************************************/



    /* set up error diagnostic fields*/

  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "OP0D";
  TA1REC.TA1MAP = "OP0DM001";
  TA1REC.TA1LOCAT[1] = "OP0D015";


    /* get company record for bulk order*/

  if (OP1REC.XBDCD == "1"
   || OP1REC.XBDCD == "B"
   || OP1REC.XBDCD == "F")
    KUCREC.KUCCOID = OP1REC.KUCCOID; /* load key*/
    OP0DW01.KUCCOID = OP1REC.KUCCOID; /* save bulk company id*/
    call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
         /* store kucypoft, xahcd, cust po # for bulk order for*/
         /* reference when determining allocation hold requirement*/
         /* for draw order.  see op0dsaw*/
      OP0DW01.KUCYPOFT = KUCREC.KUCYPOFT;
      OP0DW01.OP1CUPO = OP1REC.OP1CUPO;
      if (OP1REC.XAHCD == "04" /* alloc hold for po*/
       || OP1REC.XAHCD == "05") /* alloc hold for draw*/
        OP0DW01.XAHCD = OP1REC.XAHCD;
      end
      if (OP1REC.OP1PAHCD == "04" /* bulk order will be placed*/
       && OP1REC.OP1ALRDT == 0)   /* on alloc hold.  see om0l.*/
        OP0DW01.XAHCD = "04";
      end
    else
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      OP0DW01.OP0DWK2 = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = OP0DW01.OP0DWK2;
      TA1REC.TA1LOCAT[1] = "S      ";
      TA1REC.TA1LOCAT[2] = "IO0240";
      TA1REC.TA1LOCAT[3] = "OP0D015";
      TA1REC.TA1LOCAT[4] = "      ";
      XSOPS02();
    end
  end

    /* move bulk order data to the screen for display*/

  OP0DM001.OP0DMORD = OP1REC.OP1CUOID; /* bulk order id*/


    /* move base order type code to the screen for display*/

  if (OP1REC.XBDCD == "N")
    OP0DM001.XOBCD = " ";
  else
    OP0DM001.XOBCD = OP1REC.XOBCD; /* base order type code*/
  end


    /* look up order type abbreviation for display*/

  if (OP1REC.XBDCD == "N")
    OP0DM001.XOBABRV = " ";
  else
    if (OP1REC.XOBCD in XOBTBL.XOBCD
     && XOBTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      OP0DM001.XOBABRV = XOBTBL.XOBABRV[sysVar.arrayIndex];
    else
      OP0DM001.XOBABRV = " ";
    end
  end


    /* look up order class abbreviation for display*/
    /* allow data entry for Nike bulks*/

  if (OP1REC.XBDCD == "N")
    OP0DM001.XOCCD = " "; /* display empty nike bulk*/
    OP0DM001.XOCABRV = " ";
  else
    set OP0DM001.XOCCD skip, noHighLight; /* protect order class*/
    if (OP1REC.XOCCD in XOCTBL.XOCCD
     && XOCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      OP0DM001.XOCABRV = XOCTBL.XOCABRV[sysVar.arrayIndex];
      OP0DM001.XOCCD = OP1REC.XOCCD;
    else
      OP0DM001.XOCCD = " ";
      OP0DM001.XOCABRV = " ";
    end
  end


      /* move sales prg id to screen*/

  OP0DM001.SP1ID = OP1REC.SP1ID;


      /* move customer company/store to screen*/

  OP0DM001.OP0DMCCO = OP1REC.KUCCOID;
  OP0DM001.OP0DMSTR = OP1REC.KUMSTRID;
  OP0DM001.OP0DMDEP = OP1REC.XNXCD;


      /* move customer po number to screen*/

  if (OP1REC.XBDCD == "N")
    OP0DM001.OP1CUPO = " ";
    OP1REC.OP1CUPO = " ";
  else
    OP0DM001.OP1CUPO = OP1REC.OP1CUPO;
  end


      /* move ordered-by to screen*/

  if (OP1REC.XBDCD == "N")
    OP0DM001.OP1ORDBY = " ";
    OP1REC.OP1ORDBY = " ";
  else
    OP0DM001.OP1ORDBY = OP1REC.OP1ORDBY;
  end


      /* move taken-by service rep name to screen*/

  OP0DS15(); /* get service rep-name on bulk order*/


      /* move comp number to screen*/

  if (OP1REC.XBDCD == "N")
    OP0DM001.OP0DMCMP = " ";
    OP1REC.OP1CMPNB = 0;
  else
    OP0DM001.OP0DMCMP = OP1REC.OP1CMPNB;
    set OP0DM001.OP0DMCMP skip, noHighLight; /* PROTECT COMPANY NUMBER*/
  end


      /* move labels on bulk order to screen*/

  OP0DW01.OP0DWLC = 0; /* label counter*/
  OP0DW01.OP0DWLS1 = 0; /* label #1 seq number*/
  OP0DW01.OP0DWLS2 = 0; /* label #2 seq number*/

  if (OP1REC.XBDCD == "N") /* for a nike bulk, blank out*/
    OP0DM001.OP0DMLB1 = " "; /* special labels*/
    OP0DM001.OP0DMLB2 = " "; /* special labels*/
  else
    if (OP1REC.OP1SPLBF == "Y")
      OP0DS16(); /* get labels on bulk order*/
    end
  end


       /* save the bulk order need date and dont-ship-after-dt*/

  OP0DW01.OP0DWBND = OP1REC.OP1CUNDT; /* save bulk ord need dt*/
  OP0DW01.OP0DWSA1 = OP1REC.OP1DSADT; /* save d-s-after-dt*/
  OP0DW01.OP0DWSA2 = OP1REC.OP1DSADT; /* save d-s-after-dt*/
  OP0DW01.XPACD = OP1REC.XPACD;
  OP0DW01.KUFMIXBL = OP1REC.KUFMIXBL;
  OP0DW01.KUCUNTCS = OP1REC.KUCUNTCS;
  OP0DW01.OP1CMPNB = OP1REC.OP1CMPNB; /* save comp number*/

      /* get the dont-ship-before, dont-ship-after and need date*/
      /* on the bulk order for display*/

  OP0DS17(); /* format dates for display*/



    /* if there are multiple sub-orders in the bulk order,*/
    /* display them on the screen, but the header of the*/
    /* draw order will be dup from the first active sub-order*/
    /* on the bulk order*/


  if (OPWREC.OPWMULSO == "Y") /* multiple sub-orders*/
    call "IO0430" ("SS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
                      /* get first sub-ord on bulk*/
      call "IO0430" ("SN", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
         /* next sentence*/
      else
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VORHDR01";
        TA1REC.TA1TBLKE = OP1REC.OP1KEY;
        TA1REC.TA1LOCAT[4] = "IO0430";
        XSOPS02();
      end
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VORHDR01";
      TA1REC.TA1TBLKE = OP1REC.OP1KEY;
      TA1REC.TA1LOCAT[4] = "IO0430";
      XSOPS02();
    end
  end


      /* move nike-order number, warehouse, and tot-units of*/
      /* each sub-order on the bulk order to the screen*/

  OPAREC.OPASUB = 1;
  OP0DM001.OP0DMNOR[OPASUB] = OP1REC.OP1NORID;
  OP0DS18(); /* get warehouse abbreviation*/
  OP0DM001.OP0DMUNT[OPASUB] = OP1REC.OP1OTUNT;


     /* if there are multiple sub-orders on the bulk order,*/
     /* fill in the rest of the lines*/

  if (OPWREC.OPWMULSO == "Y")
    OPAREC.OPASUB = 2;
    while (SQLCA.VAGen_SQLCODE == 0
     && OPAREC.OPASUB < 11)
      call "IO0430" ("SN", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        OP0DM001.OP0DMNOR[OPASUB] = OP1REC.OP1NORID;

        OP0DS18(); /* get warehse abbreviation*/

        OP0DM001.OP0DMUNT[OPASUB] = OP1REC.OP1OTUNT;
        OPAREC.OPASUB = OPAREC.OPASUB + 1;
      end
    end
  end


     /* move the first active sub-order header (saved in opwrec)*/
     /* to op1rec to create the order header for the draw order*/

  if (OPWREC.OPWMULSO == "Y")
    OP1REC.OP1GROUP = OPWREC.OP1GROUP;
  end



   /* for nike bulks, move zeros to customer*/
   /* id, store, and dept, and unprotect*/
   /* base order type code*/

  if (OP1REC.XBDCD == "N")
    OP0DM001.OP0DMCCO = 0;
    OP0DM001.OP0DMSTR = 0;
    OP0DM001.OP0DMDEP = 0;
    set OP0DM001.XOBCD cursor, normal;
    set OP0DM001.SP1ID normal;
    if (OP0DM001.XOBCD == "P1")
      set OP0DM001.OP0DMNDT protect;
    end
  end


   /* If multiple bulk suborders found for*/
   /* Nike bulk, restore op1rec fields which*/
   /* overlayed with the first bulk suborder*/
   /* were overlayed.*/


  if (OPWREC.OPWMULSO == "Y")
    if (OP1REC.XBDCD == "N")
      OP1REC.OP1ORDBY = " ";
      OP1REC.OP1CUPO = " ";
      OP1REC.OP1CMPNB = 0;
      OP1REC.XSOCD = OP0DW01.OP1XSOCD;
      OP1REC.OP1TBREP = OP0DW01.OP1TBREP;
    end
  end



   /* ************************************************************/
end // end OP0D015

// converse map and edit data
Function OP0D020()
   /* ***********************************************************/
  converse OP0DM001 ;
   /* ***********************************************************/


       /* ******************************************************/
       /* * accept and edit data for the draw order header    **/
       /* * record                                            **/
       /* ******************************************************/


  OP0DM001.VAGen_EZEMSG = " "; /* clear message line*/
  OP0DM001.OP0DMMSG = " "; /* clear the second message line*/
  OP0DM001.OP0DMSGB = " "; /* clear the warning message line*/

  OPAREC.OPAERR = "N"; /* reset error flag*/

  TA1REC.TA1LOCAT[1] = "OP0D020"; /* init the abend screen*/


       /* check and process valid pf keys*/

       /* enter: program will write out a set of records:*/
              /* - order header rec for draw order*/
              /* - special label records (if applicable)*/
              /* - special instruction records (if applicable)*/
              /* - address records (if applicable)*/
              /* and then flow to the product header screen*/
             /* (op0h).*/

         /* pf3: back to o/e menu screen (op0b)*/


       /* set modified fields modified*/

     /* check po warning, message may have changed.  a value*/
     /* of 9 indicates message has not been displayed*/
  if (OP0DM001.OP0DMCCO is modified
   || OP0DM001.OP1CUPO is modified)
    OP0DW01.OP0DWARN = 9;
  end

  OP0DS20(); /* set moddified fields modified*/


  if (converseVar.eventKey is enter)
     /* NEXT SENTENCE*/
  else
    if (converseVar.eventKey is pf3)
      OPWREC.OP1GROUP = OP1REC.OP1GROUP; /* move draw ord header*/
      COMMAREA.CA-USER-WORKAREA-4K = OPWREC.OPWSGRP;
      COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
      COMMAREA.CACURRAP = "OP0B";
      transfer to program "OP0B" passing COMMAREA; /* back to order entry menu screen*/
    else
      converseLib.validationFailed(008); /* key pressed is not valid*/
      OPAREC.OPAERR = "Y"; /* set error flg*/
      if (converseVar.eventKey is pa1
       || converseVar.eventKey is pa2
       || converseVar.eventKey is pa3)
        set OP0DM001.XXXZIP modified;
      end
      exit stack;
    end
  end


       /* edit fields entered*/

  OP0DS25(); /* edit fields*/


       /* if no edit errors found, verify draw customer*/
       /* order type profile*/

  if (OPAREC.OPAERR != "Y"
   && OP1REC.XDVCD == "01")
    if (OP1REC.XOTCD in XOTTBL.XOTCD
     && XOTTBL.XQACD2[sysVar.arrayIndex] != "02"
     && XOTTBL.XLCCD2[sysVar.arrayIndex] != "20")
      OP0DS55();
    end
  end

   /* call op0o comp edits routine*/

  if (OPAREC.OPAERR == "N") /* no errors*/
    set OPOREC empty; /* initialize record*/
    if (OP0DM001.OP0DMCMP == 0) /* no comp co id*/
      OPOREC.KUCCOID = OP0DM001.OP0DMCCO; /* /cu-co-id*/
    else
      OPOREC.KUCCOID = OP0DM001.OP0DMCMP; /* comp-co-id*/
    end
    OPOREC.XXXUSRID = COMMAREA.CAUSERID; /* user id*/

    call "OP0O" (OPOREC) {isNoRefresh = yes}; /* call appl op0o comp edits*/

    if (OPOREC.OPO-RETURN-CD == 00) /* user has authority*/
      /* next sentence*/
    else
      if (OPOREC.OPO-RETURN-CD == 01) /* user has authority*/
        /* next sentence*/
      else
        if (OP0DM001.OP0DMCMP == 0) /* no comp co id*/
          set OP0DM001.OP0DMCCO cursor, bold, modified; /* highlight error*/
        else
          set OP0DM001.OP0DMCMP cursor, bold, modified; /* highlight error*/
        end
        if (OPOREC.OPO-RETURN-CD == 02) /* user does not have authority*/
          OPAREC.OPAERR = "Y"; /* set error to true*/
          converseLib.validationFailed(573); /* restricted acct nbr/acct class*/
        else
          if (OPOREC.OPO-RETURN-CD == 03) /* acct cls cd not found in xautbl*/
            OPAREC.OPAERR = "Y"; /* set error to true*/
            converseLib.validationFailed(574); /* acct cls cd not found in xautbl*/
          else
            if (OPOREC.OPO-RETURN-CD == 04)
                                   /* compnay id not found in vcmpny*/
              OPAREC.OPAERR = "Y"; /* set error to true*/
              converseLib.validationFailed(767); /* acct cls cd not found in xautbl*/
            else
              XSPF4(); /* xfer to menu abend in io mod*/
                                   /* application op0o*/
              exit program; /* xfer to main menu failure*/
            end
          end
        end
      end
    end
  end

  if (OPAREC.OPAERR == "Y" /* there is already an error*/
   /* or*/
   || OP0DW01.OP0DWARN == 0) /* the po# hold warning has*/
      /* next sentence;            already been displayed*/
  else
    OP0DSAW();
                                   /* set up warning message if applicable.*/
    if (OP0DW01.OP0DWARN != 0)
      OPAREC.OPAERR = "Y"; /* to prevent update of op1rec*/
      OP0DM001.OP0DMSGB = OP0DT01.OP0DTMSG[OP0DWARN];
      OP0DW01.OP0DWARN = 0; /* and set warn off*/
    end
    if (OP1REC.XBDCD == "N")
      OP0DS75();
      OPAREC.OPAERR = "Y";
    end
  end

  if (OPAREC.OPAERR == "Y")
     /* next sentence*/
  else
         /* if no error found, write order header rec, special*/
         /* instructions and labels recs, 1-time billto rec,*/
         /* 1-time shipto rec (if applicable) for the draw order.*/
    OP0DS60();
  end



   /* ************************************************************/
end // end OP0D020

// call ku1540 for alloc seq
Function OP0DS-CALL-KU1540()
  set VCULVLPD empty;
  VCULVLPD.KUCCOID = OP1REC.KUCCOID;
  VCULVLPD.KUMSTRID = OP1REC.KUMSTRID;
  VCULVLPD.XNXCD = OP1REC.XNXCD;
  VCULVLPD.XGPCD = OP1REC.XGPCD;

  call "KU1540" (VCULVLPD) {isNoRefresh = yes, isExternal = yes};

  if (VCULVLPD.XXX-SQLCODE == 0)
    if (VCULVLPD.OP1ALSEQ == -1 /* no allocation sequence returned*/
     || VCULVLPD.XACCD == "**") /* no assignment control returned*/
      converseLib.validationFailed(779); /* in theory this can never happen*/
      OPAREC.OPAERR = "Y"; /* there always should be something*/
    end
  else
    if (VCULVLPD.XXX-SQLCODE == 100)
      converseLib.validationFailed(779); /* this is basically a data integrity*/
      OPAREC.OPAERR = "Y"; /* error*/
    else
      TA1REC.TA1TYPE = "APPL"; /* abend type*/
      TA1REC.TA1FUNC = "RETN"; /* abend func*/
      TA1REC.TA1PGMAP = "OP0D";
      TA1REC.TA1MAP = "OP0DM001";
      TA1REC.TA1DBASE = "DCUST   ";
      TA1REC.TA1TBLVU = "VCUGRP01";
      TA1REC.TA1LOC = "OP0DS-CALL-KU1540";
      OP0DW01.OP0DW-ERR-LIT1 = "SQL ERROR - CODE ";
      OP0DW01.OP0DW-ERR-LIT2 = " TYPE ";
      OP0DW01.OP0DW-ERR-LIT3 = " TABLE ";
      OP0DW01.OP0DW-ERR-CODE = VCULVLPD.XXX-SQLCODE * -1;
      OP0DW01.OP0DW-ERR-SIGN = "-";
      OP0DW01.OP0DW-ERR-TYPE = VCULVLPD.XXX-SQLTYPE;
      OP0DW01.OP0DW-ERR-NAME = VCULVLPD.XXX-SQLNAME;
      OP0DW01.OP0DW-ERR-VIEW = VCULVLPD.XXX-SQLVIEW;
      OP0DW01.OP0DW-ERR-LIT4 = "KEY IS ";
      OP0DW01.OP0DW-ERR-CUST = OP1REC.KUCCOID;
      OP0DW01.OP0DW-ERR-STOR = OP1REC.KUMSTRID;
      OP0DW01.OP0DW-ERR-DEPT = OP1REC.XNXCD;
      OP0DW01.OP0DW-ERR-GPC = OP1REC.XGPCD;
      TAEREC.TAEDESC1 = OP0DW01.OP0DW-CUSTERR1;
      TAEREC.TAEDESC2 = OP0DW01.OP0DW-CUSTERR2;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* synpoint rollback*/
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* abend module*/
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
      XSPF4(); /* master menu*/
      exit program; /* master menu failure*/
    end
  end
end // end OP0DS-CALL-KU1540

// validate credit status code
Function OP0DS-CHECK-CREDIT()

     /* *** check credit status code ****/

  OP0DW-XCC-STAT-FOUND = "N"; /* Init valid customer*/

  OP0DW-XCCIDX = 1; /* Reset Subscript 1*/

  while (XCCTBL.XCCCD[OP0DW-XCCIDX] != "99" /* until end of XCCTBL*/
   && OP0DW-XCC-STAT-FOUND != "Y") /* or row found*/

    if (XCCTBL.XCCCD[OP0DW-XCCIDX] == KUCREC.XCCCD /* xcc code found*/
     && XCCTBL.XXXSTAT[OP0DW-XCCIDX] == "A"        /* code is active*/
     && XCCTBL.XCCENTFL[OP0DW-XCCIDX] == "Y")      /* flag is yes*/
      OP0DW-XCC-STAT-FOUND = "Y"; /* set found to 'y'*/
    end

    OP0DW-XCCIDX = OP0DW-XCCIDX + 1; /* Increment subscript 1*/
  end

end // end OP0DS-CHECK-CREDIT

// get sls reg for nil airborne
Function OP0DS-GET-SLS-REG()

      /* this routine reads the dnilo.vdstrb01 to obtain the*/
      /* sales region code, which must be one of the following if the*/
      /* CSR is trying to enter an international airborne order:*/
      /* 'AO' = Asia-NIKE owned*/
      /* 'AP' = Asia Pacific Independent*/
      /* 'EX' = Japan - Korea*/

  set SQLCA empty;
  set VDSTRB01 empty;
  VDSTRB01.KUCCOID = OP1REC.KUCCOID;

  call "IO4600" ("S ", SQLCA, VDSTRB01) {isNoRefresh = yes, isExternal = yes}; /* declare & open cursor*/

  if (SQLCA.VAGen_SQLCODE == 0) /* all ok*/
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "OP0DS-GET-SLS-REG";
    TA1REC.TA1LOCAT[3] = "IO4600  ";
    TA1REC.TA1DBASE = "DNILO   ";
    TA1REC.TA1TBLVU = "VDSTRB01";
    OP0DW01.OP0DWCUC = OP1REC.KUCCOID;
    TA1REC.TA1TBLKE = OP0DW01.OP0DWCUC;
    XSOPS02(); /* abend*/
  end
end // end OP0DS-GET-SLS-REG

// clear map and records
Function OP0DS01()



       /* *****************************************************/
       /* * this statement group clears the screen and the   **/
       /* * working storage records.                         **/
       /* *****************************************************/



  set OP0DM001 initial; /* clear map*/


       /* set working storage records empty*/

  set OPWREC empty;
  set OPWREC01 empty;
  set OPAREC empty;
  set OP0DW01 empty;
  set OP0DW02 empty;
  set OPLREC empty;
  set OECREC empty;
  set AVIREC empty;
  set AVGREC empty;


   /* ************************************************************/
end // end OP0DS01

// retrieve user 2k common area
Function OP0DS02()



      /* *********************************/
      /* * retrieve user 2k common area **/
      /* *********************************/


   /* get prod cat o/e*/
  OPWREC01.XPCGRP = COMMAREA.CA-USER-WORKAREA-2K-C; /* commarea*/


   /* *************************************************************/
end // end OP0DS02

// get taken-by service rep name
Function OP0DS15()




      /* *********************************************************/
      /* * this statement group                                 **/
      /* * gets the service rep's name for display              **/
      /* *********************************************************/



      /* verify that the service rep id exists in the xsv table*/

  if (OP1REC.XBDCD == "N")
    KUYREC.XXXUSRID = COMMAREA.CAUSERID;
    call "IO0550" ("SA", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};
  else
    KUYREC.KUYSVRID = OP1REC.OP1TBREP; /* load key*/
    call "IO0550" ("S ", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};
  end


    /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0   /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100 /* check for notfnd rc*/
   || SQLCA.VAGen_SQLCODE == -811) /* check for not unique rc*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSVREP01"; /* table view*/
    TA1REC.TA1TBLKE = KUYREC.KUYGRP; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0DS15 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0550  "; /* i/o mod name*/
    XSOPS02(); /* abort routine*/
  end


    /* if not found or not active then error*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for found  rc*/
   && KUYREC.XXXSTAT == "A")   /* check for active id*/
    if (OP1REC.XBDCD == "N")
      OP1REC.XSOCD = KUYREC.XSOCD; /* Save sales office*/
      OP0DW01.OP1XSOCD = KUYREC.XSOCD; /* Save sales office*/
      OP0DM001.XXXUSRID = KUYREC.XXXUSRID;
      OP1REC.OP1TBREP = KUYREC.KUYSVRID;
      OP0DW01.OP1TBREP = KUYREC.KUYSVRID;
    else
      OP0DM001.XXXUSRID = KUYREC.XXXUSRID;
      set OP0DM001.XXXUSRID initialAttributes;
    end
  else
    OP0DM001.XXXUSRID = KUYREC.XXXUSRID;
    converseLib.validationFailed(040); /* taken by service rep is not valid*/
    set OP0DM001.XXXUSRID cursor, modified, bold;
    OPAREC.OPAERR = "Y"; /* set error flag*/
  end




   /* *************************************************************/
end // end OP0DS15

// get special labels
Function OP0DS16()



       /* ********************************************************/
       /* * this statement group reads the dorder.vtext001 table**/
       /* * and moves the first two labels to the screen        **/
       /* ********************************************************/


      /* initialize the abend record*/

  TA1REC.TA1DBASE = "DORDER  ";
  TA1REC.TA1TBLVU = "VTEXT001"; /* table view*/
  TA1REC.TA1LOCAT[3] = "OP0DS16"; /* process name*/
  TA1REC.TA1LOCAT[2] = " ";
  TA1REC.TA1LOCAT[4] = "IO0470";


       /* select set to the dorder.vtext001 table*/

  OP4REC.OP4KEY = OP1REC.OP1KEY;

  call "IO0470" ("SS", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};

       /* check db2 return status*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1TBLKE = OP4REC.OP4KEY; /* key value*/
    XSOPS02();
  end



       /* select the first two labels to display*/

  while (SQLCA.VAGen_SQLCODE == 0)
    call "IO0470" ("SN", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      if (OP4REC.OP4TRTYP == "L")
        OP0DW01.OP0DWLC = OP0DW01.OP0DWLC + 1;
        if (OP0DW01.OP0DWLC == 1) /* the first label*/
          OP0DM001.OP0DMLB1 = OP4REC.OP4TXT;
          OP0DW01.OP0DWLS1 = OP4REC.OP4TRSEQ; /* save sequence number*/
        else
          if (OP0DW01.OP0DWLC == 2)
            OP0DM001.OP0DMLB2 = OP4REC.OP4TXT;
            OP0DW01.OP0DWLS2 = OP4REC.OP4TRSEQ; /* save sequence number*/
          end
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1TBLKE = OP4REC.OP4KEY; /* key value*/
        XSOPS02();
      end
    end
  end

  call "IO0470" ("CS", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};



   /* ************************************************************/
end // end OP0DS16

// get dates to display
Function OP0DS17()



       /* *******************************************************/
       /* * this statement group formats the need date, dont   **/
       /* * ship before date, dont ship after date,            **/
       /* * for display. dates will be displayed in mm-dd-yy   **/
       /* * format                                             **/
       /* *******************************************************/


       /* format need date - use system date for nike bulk*/

  if (OP1REC.XBDCD == "N")
    set TA2REC empty;
    TA2REC.TA2RTNCD = 0;
    TA2REC.TA2DTOPT = "GETDATE";
    call "TA0040" (TA2REC) {isExternal = yes};
    if (TA2REC.TA2RTNCD == 0)
      OPAREC.OPAWDT = TA2REC.TA2GRGGN; /* todays date*/
    end
  else
    OPAREC.OPAWDT = OP1REC.OP1CUNDT;
  end

  OP0DS19(); /* format date*/

  OP0DM001.OP0DMNDT = OP0DW01.OP0DWDTE; /* mm-dd-yy format*/


       /* format dont-ship-before-date*/

         /* note that for colehan division, default the don't*/
         /* ship before date to the need date if it was empty.*/

  if (OP1REC.OP1DSBDT == 0 /* empty don't ship before date*/
   && OP1REC.XBCCD == "08") /* colehan division*/
    OP1REC.OP1DSBDT = OP1REC.OP1CUNDT;
  end

  OPAREC.OPAWDT = OP1REC.OP1DSBDT;
  OP0DS19(); /* format date*/

  OP0DM001.OP0DMDSB = OP0DW01.OP0DWDTE; /* mm-dd-yy format*/



       /* format dont-ship-after-date*/

  OPAREC.OPAWDT = OP1REC.OP1DSADT;
  OP0DS19(); /* format date*/

  OP0DM001.OP0DMDSA = OP0DW01.OP0DWDTE; /* mm-dd-yy format*/



   /* ************************************************************/
end // end OP0DS17

// get warehouse abbriviation
Function OP0DS18()


        /* ******************************************************/
        /* * this statement group get the warehse abbreviation **/
        /* * for display                                       **/
        /* * ****************************************************/



  if (OP1REC.XWHCD in XWHTBL.XWHCD
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    OP0DM001.XWHSABRV[OPASUB] = XWHTBL.XWHSABRV[sysVar.arrayIndex];
  else
    OP0DM001.XWHSABRV[OPASUB] = "INACTV";
  end


   /* ************************************************************/
end // end OP0DS18

// format date in mm-dd-yy format
Function OP0DS19()



       /* *******************************************************/
       /* * this statement group formats any date in yymmdd    **/
       /* * format to mm-dd-yy format                          **/
       /* *******************************************************/


  OP0DW01.OP0DWHP1 = "-";
  OP0DW01.OP0DWHP2 = "-";


   /* ******** Y2K OUT BEGIN **************/

   /* IF OPAREC.OPAWYY EQ 0*/
   /* MOVE 'YY' TO OP0DW01.OP0DWYY;*/
   /* ELSE;*/
   /* MOVE OPAREC.OPAWYY TO OP0DW01.OP0DWYY;*/
   /* END;*/

   /* ******** Y2K OUT END ****************/

   /* ******** Y2K IN BEGIN ***************/

   /* ******   TT4415 WIPRO CHANGE BEGIN *******/
   /* MOVE OPAREC.OPAWYY TO OP0DW01.OP0DWYY;*/
  if (OPAREC.OPAWMM == 0 && OPAREC.OPAWDD == 0) /* when month and day are 0*/
    OP0DW01.OP0DWYY = "YY"; /* move 'yy' to year*/
  else
    OP0DW01.OP0DWYY = OPAREC.OPAWYY;
  end
   /* ******   TT4415 WIPRO CHANGE END   *******/

   /* ******** Y2K IN END *****************/

  if (OPAREC.OPAWMM == 0)
    OP0DW01.OP0DWMM = "MM";
  else
    OP0DW01.OP0DWMM = OPAREC.OPAWMM;
  end


  if (OPAREC.OPAWDD == 0)
    OP0DW01.OP0DWDD = "DD";
  else
    OP0DW01.OP0DWDD = OPAREC.OPAWDD;
  end



   /* ************************************************************/
end // end OP0DS19

// set modified fields modified
Function OP0DS20()



       /* *****************************************************/
       /* * this statement group will set modified fields    **/
       /* * modified in case a invalid key was pressed       **/
       /* *****************************************************/


       /* for nike bulks, base order type code can be changed **/

  if (OP1REC.XBDCD == "N")
    if (OP0DM001.XOBCD is modified)
      set OP0DM001.XOBCD modified;
    end
  end

       /* for nike bulks, order class can be changed **/

  if (OP1REC.XBDCD == "N")
    if (OP0DM001.XOCCD is modified)
      set OP0DM001.XOCCD modified;
    end
  end

       /* for nike bulks, sales program id  can be changed **/

  if (OP1REC.XBDCD == "N")
    if (OP0DM001.SP1ID is modified)
      set OP0DM001.SP1ID modified;
    end
  end


  if (OP0DM001.OP0DMCCO is modified)
    set OP0DM001.OP0DMCCO modified;
  end


  if (OP0DM001.OP0DMSTR is modified)
    set OP0DM001.OP0DMSTR modified;
  end


  if (OP0DM001.OP0DMDEP is modified)
    set OP0DM001.OP0DMDEP modified;
  end


  if (OP0DM001.XXXZIP is modified)
    set OP0DM001.XXXZIP modified;
  end


  if (OP0DM001.OP1ORDBY is modified)
    set OP0DM001.OP1ORDBY modified;
  end


  if (OP0DM001.XXXUSRID is modified)
    set OP0DM001.XXXUSRID modified;
  end


       /* for nike bulks, company nbr can be changed*/

  if (OP1REC.XBDCD == "N")
    if (OP0DM001.OP0DMCMP is modified)
      set OP0DM001.OP0DMCMP modified;
    end
  end


  if (OP0DM001.OP0DMLB1 is modified)
    set OP0DM001.OP0DMLB1 modified;
  end


  if (OP0DM001.OP0DMLB2 is modified)
    set OP0DM001.OP0DMLB2 modified;
  end


  if (OP1REC.XBCCD == "08" /* cole haan requires dsnb date*/
   || OP1REC.XWHCD == "51") /* whse 51 requires dsnb date*/
    set OP0DM001.OP0DMDSB modified;
  else
    if (OP0DM001.OP0DMDSB is modified)
      set OP0DM001.OP0DMDSB modified;
    end
  end


  if (OP0DM001.OP0DMDSA is modified)
    set OP0DM001.OP0DMDSA modified;
  end


  if (OP0DM001.OP0DMNDT is modified)
    set OP0DM001.OP0DMNDT modified;
  end


   /* ************************************************************/
end // end OP0DS20

// edit customer on draw order
Function OP0DS23()


       /* *******************************************************/
       /* * this statement grp validates the customer with     **/
       /* * the gpc's accosiated                               **/
       /* *******************************************************/

  call "IO0280" ("SN", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* get first gpc rec for that cust*/
   || SQLCA.VAGen_SQLCODE == 100) /* err will be processed later*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUST001";
    TA1REC.TA1TBLKE = KUNREC.KUNGRP;
    TA1REC.TA1LOCAT[3] = "OP0DS50";
    TA1REC.TA1LOCAT[4] = "IO0280";
    XSOPS02();
  end

   /* *************************************************************/
end // end OP0DS23

// edit entered fields
Function OP0DS25()



       /* ***************************************************/
       /* * edits will be done in bottom to top order on   **/
       /* * the screen. this will set all fields in error  **/
       /* * bright but the cursor and the error message    **/
       /* * will correspond to the top most error.         **/
       /* ***************************************************/



       /* edit base order type code if nike bulk*/
       /* note: this field is at the top of the map,*/
       /* but edit it first because we need to change*/
       /* the need date to current date if at-once order*/

  if (OP1REC.XBDCD == "N")
    OP0DS73();
    if (OPAREC.OPAERR == "Y")
      return;
    else
      sysVar.arrayIndex = 1;
      if (OP1REC.XOTCD in XOTTBL.XOTCD
       && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        OPAREC.XOTFUTRF = XOTTBL.XOTFUTRF[sysVar.arrayIndex];
        OPAREC.XOTPROPF = XOTTBL.XOTPROPF[sysVar.arrayIndex];
        if (XOTTBL.XOTATONF[sysVar.arrayIndex] == "Y") /* at-once ot*/
          converseLib.validationFailed(386); /* warning - date changed to current*/
                                   /* date*/
          OPAREC.OPAWYMD = VGVar.currentShortGregorianDate;
          OP0DS19(); /* reformat date for map*/
          OP0DM001.OP0DMNDT = OP0DW01.OP0DWDTE;
          set OP0DM001.OP0DMNDT modified;
        end
      end
    end
  end

  if (OP0DM001.OP0DMNDT is modified /* need date changed*/
   || OP1REC.XBDCD == "B"           /* blank bulks*/
   || OP1REC.XBDCD == "F"           /* finished goods bulk*/
   || OP1REC.XBDCD == "N")          /* nike bulk*/
    OP0DS30(); /* edit need date*/


     /* if this is a t shirt bulk the*/
     /* needdate must be edited against the*/
     /* blank program date and the cut off*/
     /* date.*/

    if (OP1REC.XBDCD == "B" /* blank bulks*/
     || OP1REC.XBDCD == "F") /* finished goods bulk*/
      OP0DS3A(); /* edit needdate vs finished pgm dte*/
    end
  end

  if (OP1REC.XBCCD == "08" /* cole haan*/
   || OP1REC.XWHCD == "51") /* whse 51*/
    if (OP0DM001.OP0DMDSB == "MMDDYY  "
     || OP0DM001.OP0DMDSB == " "
     || OP0DM001.OP0DMDSB == "MM-DD-YY")
      if (OP1REC.XWHCD == "51")
        converseLib.validationFailed(958); /* whse 51 requires dsbd*/
      else
        converseLib.validationFailed(521); /* cole haan requires dsbd*/
      end
      set OP0DM001.OP0DMDSB cursor, modified, bold;
      OPAREC.OPAERR = "Y";
    else
      if (OP0DM001.OP0DMDSA is modified
       || OP0DM001.OP0DMDSB is modified)
        OP0DS35(); /* edit dont-ship-befor/after dts*/
      end
    end
  else
    if (OP0DM001.OP0DMDSA is modified
     || OP0DM001.OP0DMDSB is modified)
      OP0DS35(); /* edit dont-ship-befor/after dts*/
    end
  end



  if (OP1REC.XBDCD == "N")
    if (OP0DM001.XOCCD is modified)
      OP0DS84(); /* edit order class for nike bulk*/
    end
  end



  if (OP0DM001.XXXUSRID is modified)
    OP0DS45(); /* edit taken-by rep*/
  end



  if (OP1REC.XBDCD == "N")
    if (OP0DM001.OP0DMCMP is modified)
      OP0DS80(); /* edit company nbr*/
    end
  end



  if (OP0DM001.OP1CUPO is modified)
    OP1REC.OP1CUPO = OP0DM001.OP1CUPO;
  end



  if (OP0DM001.OP1ORDBY is modified)
    OP1REC.OP1ORDBY = OP0DM001.OP1ORDBY;
  end


       /* always validate customer to insure that the customer*/
       /* is still valid for draws*/

  OP0DW01.OP0DWVCS = "N"; /* set valid cust flag*/

  OP0DS50(); /* edit customer for draw order*/



       /* determine if customer po number is required*/

  set OP0DM001.OP1CUPO initialAttributes;

       /* position the cursor*/

  if (OPAREC.OPAERR == "N")
    set OP0DM001.OP1CUPO cursor;
  end



   /* ************************************************************/
end // end OP0DS25

// edit entered need date
Function OP0DS30()



      /* *********************************************************/
      /* * this statement group edits the entered need date for **/
      /* * the draw order                                       **/
      /* *********************************************************/


  if (OP0DM001.OP0DMNDT == "MMDDYY  " /* if not entered or zero, ok*/
   || OP0DM001.OP0DMNDT == "MM-DD-YY" 
   || OP0DM001.OP0DMNDT == " ")      
    OPAREC.OPAERR = "Y";
    converseLib.validationFailed(013); /* need date is not a valid date*/
    set OP0DM001.OP0DMNDT cursor, modified, bold;
    return;
  end


      /* edit non-zero need date*/


  set TA2REC empty;
  OP0DW01.OP0DWDTE = OP0DM001.OP0DMNDT;

  if (OP0DW01.OP0DWHP2 != "-") /* need date in mmddyy format*/
    TA2REC.TA2GRGA = OP0DM001.OP0DMNDT;

     /* reformat date to mm-dd-yy for display*/

    OP0DW01.OP0DWFDT = OP0DM001.OP0DMNDT;
    OP0DW01.OP0DWMM = OP0DW01.OP0DWFMM;
    OP0DW01.OP0DWDD = OP0DW01.OP0DWFDD;
    OP0DW01.OP0DWYY = OP0DW01.OP0DWFYY;
    OP0DW01.OP0DWHP1 = "-";
    OP0DW01.OP0DWHP2 = "-";
    OP0DM001.OP0DMNDT = OP0DW01.OP0DWDTE;
  else /* ; entered date in mm-dd-yy format*/
    OP0DW01.OP0DWFMM = OP0DW01.OP0DWMM; /* take the '-' out*/
    OP0DW01.OP0DWFDD = OP0DW01.OP0DWDD;
    OP0DW01.OP0DWFYY = OP0DW01.OP0DWYY;
    TA2REC.TA2GRGA = OP0DW01.OP0DWFDT;
  end


  TA2REC.TA2DTOPT = "GREGGREG"; /* func request*/
  TA2REC.TA2GRTYP = "A"; /* format is mmddyy*/
  call "TA0040" (TA2REC) {isExternal = yes}; /* call date module*/
  if (TA2REC.TA2RTNCD != 0) /* check for invalid rc*/
    OPAREC.OPAERR = "Y"; /* set err flag*/
    converseLib.validationFailed(013); /* date written is not a valid date*/
    set OP0DM001.OP0DMNDT cursor, modified, bold;
    return;
  else
    set OP0DM001.OP0DMNDT normal;
  end


      /* make sure the begin need date is in the*/
      /* dorder.vcutof01 table.  if it is, continue -*/
      /* if not, display a message.*/
      /* note: ta2rec date is used (ccyymmdd format)*/
        /* for the call below because opwrec is still empty*/
        /* & op1rec is the bulk need date (which we do not want)*/

  sysVar.arrayIndex = 1;
  if (OP1REC.XOTCD in XOTTBL.XOTCD             
   && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* status is active*/
   && XOTTBL.XOTFUTRF[sysVar.arrayIndex] == "Y") /* future order*/

    OPJREC.XOTCD = OP1REC.XOTCD; /* order type code*/
    OPLREC.OPLSOP = "SF"; /* select first option*/
    OPLREC.OPJCNDTB = TA2REC.TA2GRGGN; /* begin need date*/

    call "IO2560" (OPLREC, SQLCA, OPJREC) {isNoRefresh = yes, isExternal = yes}; /* check date*/

    if (SQLCA.VAGen_SQLCODE == 0) /* record found*/
      set OP0DM001.OP0DMNDT normal;
    else
      OPAREC.OPAERR = "Y"; /* set error flag*/
      converseLib.validationFailed(604); /* need date invalid message*/
      set OP0DM001.OP0DMNDT cursor, modified, bold;
      return;
    end
  end


      /* insure that need date is not before need date on*/
      /* the bulk order or after the dont-ship-after-date on*/
      /* the bulk order. if the dont-ship-after-date on the*/
      /* bulk order was not entered, checking need date vs*/
      /* dont-ship-after-dt is not needed*/

  if (OP0DW01.OP0DWSA1 == 0) /* open end order*/
    OP0DW01.OP0DWSA1 = 99999999;
  end

  if (TA2REC.TA2GRGGN < OP0DW01.OP0DWBND /* before bulk ord need date*/
   || TA2REC.TA2GRGGN > OP0DW01.OP0DWSA1) /* after blk d-s-a-dt*/
    OPAREC.OPAERR = "Y";
    converseLib.validationFailed(293); /* need date must be between need date*/
                                 /* ; and d-s-a-dt on bulk order*/
    set OP0DM001.OP0DMNDT cursor, modified, bold;
    return;
  end



      /* if dont-ship-after-dt on bulk order eq 0, check to see*/
      /* if the entered need date is beyond two years from today?*/

  if (OP0DW01.OP0DWSA2 > 0)
     /* next sentence*/
  else
    OPAREC.OPAWDT = OPAREC.OPACDT + 20000; /* wk-dt = curr-dt + 2 years*/
    if (TA2REC.TA2GRGGN > OPAREC.OPAWDT) /* check for gt one year future*/
      OPAREC.OPAERR = "Y"; /* set err flag*/
      converseLib.validationFailed(016); /* need date is more than one year in*/
                                   /* the future*/
      set OP0DM001.OP0DMNDT cursor, modified, bold;
      return;
    end
  end


       /* if there is no sales program on the bulk order, no*/
       /* further validation is needed for need date*/

  OP1REC.SP1ID = " ";
  if (OP0DM001.SP1ID > " ") /* there is sales program*/
     /* next sentence*/
  else
    OP1REC.OP1CUNDT = TA2REC.TA2GRGGN; /* save need date*/
    return;
  end



       /* the entered need date is*/
        /* edited against the sales program delivery date.*/

  SP2REC.SP1ID = OP0DM001.SP1ID; /* load key*/
  SP2REC.XOTCD = OP1REC.XOTCD; /* load key*/
  call "IO0080" ("S ", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
    OP1REC.SP1ID = OP0DM001.SP1ID;
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OPAREC.OPAERR = "Y"; /* set error flag*/
      converseLib.validationFailed(25); /* invalid spgm for order type*/
      set OP0DM001.SP1ID cursor, modified, bold;
      return;
    else
      TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
      TA1REC.TA1TBLVU = "VORTYP01"; /* table view*/
      TA1REC.TA1TBLKE = SP2REC.SP2KEY; /* key value*/
      TA1REC.TA1LOCAT[3] = "OP0DS30 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = "IO0080  "; /* i/o mod name*/
      XSOPS01(); /* abend routine*/
    end
  end



      /* edit the need date against the delivery date*/

  if (TA2REC.TA2GRGGN < SP2REC.SP2DLBDT
   || TA2REC.TA2GRGGN > SP2REC.SP2DLXDT)
    converseLib.validationFailed(027); /* need date not valid del date for sls*/
                                   /* pgm*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0DM001.OP0DMNDT cursor, modified, bold;
  else
    OP1REC.OP1CUNDT = TA2REC.TA2GRGGN; /* save need date*/
  end


   /* *************************************************************/
end // end OP0DS30

// edit dont-ship-before-after dt
Function OP0DS35()



       /* *******************************************************/
       /* * this statement group edits the dont-ship-before-dt,**/
       /* * dont-ship-after-date                               **/
       /* *******************************************************/



  OP0DW01.OP0DWDER = "N"; /* set date error flag*/
  set TA2REC empty;

       /* dont ship after date must not less than today's date*/

  if (OP0DM001.OP0DMDSA is modified)
    if (OP0DM001.OP0DMDSA == "MMDDYY  "
     || OP0DM001.OP0DMDSA == " "
     || OP0DM001.OP0DMDSA == "MM-DD-YY")
      OP1REC.OP1DSADT = 0;
      set OP0DM001.OP0DMDSA initialAttributes;
    else
      OP0DW01.OP0DWDTE = OP0DM001.OP0DMDSA;
      if (OP0DW01.OP0DWHP2 != "-") /* received date in mmddyy format*/
        TA2REC.TA2GRGA = OP0DM001.OP0DMDSA;

         /* reformat date to mm-dd-yy for display*/

        OP0DW01.OP0DWFDT = OP0DM001.OP0DMDSA;
        OP0DW01.OP0DWMM = OP0DW01.OP0DWFMM;
        OP0DW01.OP0DWDD = OP0DW01.OP0DWFDD;
        OP0DW01.OP0DWYY = OP0DW01.OP0DWFYY;
        OP0DW01.OP0DWHP1 = "-";
        OP0DW01.OP0DWHP2 = "-";
        OP0DM001.OP0DMDSA = OP0DW01.OP0DWDTE;

      else /* ; entered date in mm-dd-yy format*/
        OP0DW01.OP0DWFMM = OP0DW01.OP0DWMM; /* take the '-' out*/
        OP0DW01.OP0DWFDD = OP0DW01.OP0DWDD;
        OP0DW01.OP0DWFYY = OP0DW01.OP0DWYY;
        TA2REC.TA2GRGA = OP0DW01.OP0DWFDT;
      end
      TA2REC.TA2DTOPT = "GREGGREG";
      TA2REC.TA2GRTYP = "A";
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
      if (TA2REC.TA2RTNCD != 0)
        converseLib.validationFailed(070); /* dont ship after date is not a valid*/
                                   /* date*/
        set OP0DM001.OP0DMDSA cursor, modified, bold;
        OPAREC.OPAERR = "Y";
        OP0DW01.OP0DWDER = "Y"; /* set date error flag*/
      else
        if (TA2REC.TA2GRGGN < OPAREC.OPACDT)
          converseLib.validationFailed(070); /* d-s-after-date is not a valid date*/
          set OP0DM001.OP0DMDSA cursor, modified, bold;
          OPAREC.OPAERR = "Y";
          OP0DW01.OP0DWDER = "Y"; /* set date error flag*/
        else
          OPAREC.OPAWDT = OPAREC.OPACDT + 20000;
                                   /* wk-dt = curr-dt + 2 years*/
          if (TA2REC.TA2GRGGN > OPAREC.OPAWDT)
            OPAREC.OPAERR = "Y"; /* set err flag*/
            OP0DW01.OP0DWDER = "Y"; /* set date error flag*/
            converseLib.validationFailed(070); /* more than one year in the future*/
            set OP0DM001.OP0DMDSA cursor, modified, bold;
          else
            set OP0DM001.OP0DMDSA initialAttributes;
            OP1REC.OP1DSADT = TA2REC.TA2GRGGN;
          end
        end
      end
    end
  end



       /* edit dont ship before date*/

  set TA2REC empty;

  if (OP0DM001.OP0DMDSB is modified)
    if (OP0DM001.OP0DMDSB == "MMDDYY  "
     || OP0DM001.OP0DMDSB == " "
     || OP0DM001.OP0DMDSB == "MM-DD-YY")
      OP1REC.OP1DSBDT = 0;
      set OP0DM001.OP0DMDSB initialAttributes;
    else
      OP0DW01.OP0DWDTE = OP0DM001.OP0DMDSB;
      if (OP0DW01.OP0DWHP2 != "-") /* date in mmddyy format*/
        TA2REC.TA2GRGA = OP0DM001.OP0DMDSB;

         /* reformat date to mm-dd-yy for display*/

        OP0DW01.OP0DWFDT = OP0DM001.OP0DMDSB;
        OP0DW01.OP0DWMM = OP0DW01.OP0DWFMM;
        OP0DW01.OP0DWDD = OP0DW01.OP0DWFDD;
        OP0DW01.OP0DWYY = OP0DW01.OP0DWFYY;
        OP0DW01.OP0DWHP1 = "-";
        OP0DW01.OP0DWHP2 = "-";
        OP0DM001.OP0DMDSB = OP0DW01.OP0DWDTE;

      else /* ; entered date in mm-dd-yy format*/
        OP0DW01.OP0DWFMM = OP0DW01.OP0DWMM; /* take the '-' out*/
        OP0DW01.OP0DWFDD = OP0DW01.OP0DWDD;
        OP0DW01.OP0DWFYY = OP0DW01.OP0DWYY;
        TA2REC.TA2GRGA = OP0DW01.OP0DWFDT;
      end
      TA2REC.TA2DTOPT = "GREGGREG";
      TA2REC.TA2GRTYP = "A";
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
      if (TA2REC.TA2RTNCD != 0)
        converseLib.validationFailed(069); /* dont ship before date is not a valid*/
                                   /* date*/
        set OP0DM001.OP0DMDSB cursor, modified, bold;
        OP0DW01.OP0DWDER = "Y"; /* set date error flag*/
        OPAREC.OPAERR = "Y";
      else
        if (TA2REC.TA2GRGGN < OPAREC.OPACDT) /* check for lt today's date*/
          OPAREC.OPAERR = "Y"; /* set err flag*/
          converseLib.validationFailed(069); /* d-s-b-dt is not a valid date*/
          set OP0DM001.OP0DMDSB cursor, modified, bold;
          OP0DW01.OP0DWDER = "Y"; /* set date error flag*/
          OPAREC.OPAERR = "Y";
        else /* TCS change begin 04/13/99*/

          if (TA2REC.TA2DYWK == "SUNDAY"
           || TA2REC.TA2DYWK == "SATURDAY")
            converseLib.validationFailed(493); /* dnsb date falls on a wkend*/
            set OP0DM001.OP0DMDSB cursor, modified, bold;
            OPAREC.OPAERR = "Y";
            OP0DW01.OP0DWDER = "Y"; /* set date error flag*/

            /* TCS change end 04/13/99*/
          else
            OP0DS36(); /* check special cust grp codes*/
            if (OPAREC.OPAERR == "Y") /* if err, (rec not found)*/
              return; /* return*/
            end
            if (OP0DW01.OP0DWSGC == "Y" /* if certain spec cust grps fnd*/
             || OP1REC.XSOCD == "07"    /* or certain sales offices*/
             || OP1REC.XSOCD == "08"    /* exclude from edit check*/
             || OP1REC.XSOCD == "12"    
             || OP1REC.XSOCD == "17")  
              OP1REC.OP1DSBDT = TA2REC.TA2GRGGN;
              set OP0DM001.OP0DMDSB initialAttributes;
            else
              if (TA2REC.TA2GRGGN <= OP1REC.OP1CUNDT)
                OP1REC.OP1DSBDT = TA2REC.TA2GRGGN;
              else
                set TA2REC empty;
                TA2REC.TA2DBDFN = OP1REC.OP1CUNDT; /* NEED DATE*/
                OPAREC.OPAWCC = OPAREC.OPACCC;
                OPAREC.OPAWYY = OP0DW01.OP0DWYY;
                OPAREC.OPAWMM = OP0DW01.OP0DWMM;
                OPAREC.OPAWDD = OP0DW01.OP0DWDD;
                TA2REC.TA2DBDTN = OPAREC.OPAWDT; /* DSNB DATE*/
                TA2REC.TA2DTOPT = "DAYSDIFF";
                TA2REC.TA2GRTYP = "G";

                call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

                if (TA2REC.TA2RTNCD == 0)
                  if (TA2REC.TA2DBDDN > 21)
                    if (COMMAREA.CAUSERID in YOSTBL.XXXUSRID
                     && YOSTBL.YOSSPGFL[sysVar.arrayIndex] == "Y") /* authorized*/
                      OP1REC.OP1DSBDT = TA2REC.TA2DBDTN;
                      set OP0DM001.OP0DMDSB initialAttributes;
                    else
                      if (COMMAREA.CACHGFL == "Y"
                       && COMMAREA.CACLVL[1] == "Y") /* is allocation mgr*/
                        OP1REC.OP1DSBDT = TA2REC.TA2DBDTN;
                        set OP0DM001.OP0DMDSB initialAttributes;
                      else
                        OPAREC.OPAERR = "Y"; /* The DSNB date can't*/
                        OP0DW01.OP0DWDER = "Y"; /* be > 21 days past*/
                        converseLib.validationFailed(633); /* need date*/
                        if (OP1REC.OP1DSBDT == 0)
                          OP0DM001.OP0DMDSB = "MM-DD-YY";
                        else
                          OPAREC.OPAWDT = OP1REC.OP1DSBDT;
                          OP0DW01.OP0DWYY = OPAREC.OPAWYY;
                          OP0DW01.OP0DWMM = OPAREC.OPAWMM;
                          OP0DW01.OP0DWDD = OPAREC.OPAWDD;
                          OP0DW01.OP0DWHP1 = "-";
                          OP0DW01.OP0DWHP2 = "-";
                          OP0DM001.OP0DMDSB = OP0DW01.OP0DWDTE;
                        end
                        set OP0DM001.OP0DMDSB cursor, modified, bold;
                      end
                    end
                  else
                    OP1REC.OP1DSBDT = TA2REC.TA2DBDTN;
                    set OP0DM001.OP0DMDSB initialAttributes;
                  end
                end
              end
            end
          end
        end
      end
    end
  end



       /* dont-ship-after-date must equal or greater than*/
       /* dont-ship-before-date*/

  if (OP0DM001.OP0DMDSB == "MMDDYY  "
   || OP0DM001.OP0DMDSB == " "
   || OP0DM001.OP0DMDSB == "MM-DD-YY"
   || OP0DM001.OP0DMDSA == " "
   || OP0DM001.OP0DMDSA == "MMDDYY  "
   || OP0DM001.OP0DMDSA == "MM-DD-YY"
   || OP0DW01.OP0DWDER == "Y")
     /* next sentence*/
  else
    if (OP1REC.OP1DSBDT <= OP1REC.OP1DSADT)
      set OP0DM001.OP0DMDSA initialAttributes;
      set OP0DM001.OP0DMDSB initialAttributes;
    else
      converseLib.validationFailed(099); /* dont-s-before-dt must not >*/
                                   /* d-s-after-dt*/
      set OP0DM001.OP0DMDSA modified, bold;
      set OP0DM001.OP0DMDSB cursor, modified, bold;
      OPAREC.OPAERR = "Y";
    end
  end



   /* ************************************************************/
end // end OP0DS35

// check for special cust group
Function OP0DS36()
       /* ********************************************************/
       /* * this statement group accesses the special customer  **/
       /* * group record and checks the XSG code.  Certain      **/
       /* * values are flagged as an exception to the DSNB edit **/
       /* ********************************************************/

  OP0DW01.OP0DWSGC = "N";
  KUPREC.KUCCOID = OP0DM001.OP0DMCCO; /* Load Key: Cust Co*/
  KUPREC.KUMSTRID = OP0DM001.OP0DMSTR; /* Cust Store*/
  KUPREC.XNXCD = OP0DM001.OP0DMDEP; /* Cust Dept*/
  KUPREC.XGPCD = OP1REC.XGPCD; /* GPC*/

  call "IO0260" ("S ", SQLCA, KUPREC) {isNoRefresh = yes, isExternal = yes}; /* I/O mod for inquiry*/

      /* check DB2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* check for not found*/
      return;
    else
      TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
      TA1REC.TA1TBLVU = "VCUGRP01"; /* table view*/
      TA1REC.TA1TBLKE = KUPREC.KUPGRP; /* key value*/
      TA1REC.TA1LOCAT[3] = "OP0DS36 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = "IO0260  "; /* i/o mod name*/
      XSOPS02(); /* abend routine*/
    end
  end


  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex <= 10)
    if (OP0DW01.OP0DWSGC == "N")
      if (KUPREC.XSGCD[sysVar.arrayIndex] == "MI"
       || KUPREC.XSGCD[sysVar.arrayIndex] == "MB"
       || KUPREC.XSGCD[sysVar.arrayIndex] == "12"
       || KUPREC.XSGCD[sysVar.arrayIndex] == "BK"
       || KUPREC.XSGCD[sysVar.arrayIndex] == "AA"
       || KUPREC.XSGCD[sysVar.arrayIndex] == "AF"
       || KUPREC.XSGCD[sysVar.arrayIndex] == "NO")
        OP0DW01.OP0DWSGC = "Y";
        sysVar.arrayIndex = sysVar.arrayIndex + 1;
      end
      sysVar.arrayIndex = sysVar.arrayIndex + 1;
    else
      sysVar.arrayIndex = 11;
    end
  end

   /* ************************************************************/
end // end OP0DS36

// edit neddt vs finished pgm dte
Function OP0DS3A()

  set SQLCA empty;
  set AVGREC empty;
  set AVIREC empty;

  if (OP1REC.XOBCD == "M1") /* special make up*/
    AVGREC.AVGBPIND = "S";
  else
    AVGREC.AVGBPIND = "T";
  end

   /* ta2rec still holds the needdate in ccyymmdd*/
   /* format from the edit needdate stmt grp s30*/

  AVIREC.AVIFUNCD = "SA";
  AVIREC.OP1CUNDT = TA2REC.TA2GRGGN;

  call "IO5480" (AVIREC, SQLCA, AVGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OPWREC.XOWCD = AVGREC.XOWCD;

    if (OP1REC.XBDCD == "B") /* draw from a blank bulk*/
      OP0DS3B(); /* check 'drawn by' date*/
    end

  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OPAREC.OPAERR = "Y";
      converseLib.validationFailed(628); /* no active finished pgm exists*/
                              /* for this needdate*/
      set OP0DM001.OP0DMNDT cursor, modified, bold;
    else
      TA1REC.TA1DBASE = "DAVAIL  "; /* data base view*/
      TA1REC.TA1PGMNM = "OP0D    "; /* application*/
      TA1REC.TA1LOCAT[1] = "OP0DS3A "; /* stmt group*/
      TA1REC.TA1LOCAT[2] = "IO5480  "; /* io mod called*/
      TA1REC.TA1LOCAT[3] = AVIREC.AVIFUNCD; /* function code*/
      TA1REC.TA1LOCAT[4] = OP0DM001.OP0DMNDT; /* needdate*/
      TA1REC.TA1MAP = "OP0DM001"; /* map*/
      TA1REC.TA1TBLVU = "VBLNKP01"; /* TABLE VIEW*/
      TA1REC.TA1TBLKE = AVGREC.AVGKEY; /* key*/
      XSOPS02();
    end
  end
end // end OP0DS3A

// edit needdate vs date range
Function OP0DS3B()

  set SQLCA empty;
  set OPLREC empty;
  set OECREC empty;

  OPLREC.OPLSOP = "SF";
  OPLREC.OPJCNDTB = TA2REC.TA2GRGGN;

    /* cut off table is read using blank bulk owner group*/

  if (OP1REC.XOBCD == "M1")
    OECREC.XOWCD = "SM"; /* special make up bulk*/
  else
    OECREC.XOWCD = "MR"; /* regular blank bulk*/
  end

  call "IO5530" (OPLREC, SQLCA, OECREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    if (OPAREC.OPACDT < OECREC.OPJCUTDT
     || OPAREC.OPACDT == OECREC.OPJCUTDT)
      /* next sentence*/
    else
      sysVar.arrayIndex = 1;
      if (COMMAREA.CAUSERID in YOSTBL.XXXUSRID from sysVar.arrayIndex
       && YOSTBL.XXXSTAT[sysVar.arrayIndex] == "A"
       && YOSTBL.YOSNDTFL[sysVar.arrayIndex] == "Y")
        if (OP0DM001.OP0DMNDT is modified
         || OP0DW01.OP0DWFTF == "Y") /* if first time through*/
          OP0DW01.OP0DWFTF = "N"; /* turn 1st time thru flag off*/
          OPAREC.OPAERR = "Y";
          converseLib.validationFailed(638); /* warning only must be prior to cutoff date*/
          set OP0DM001.OP0DMNDT cursor, bold;
        end
                /* NEXT SENTENCE*/
      else
        OPAREC.OPAERR = "Y";
        converseLib.validationFailed(631); /* MUST BE PRIOR TO CUTOFF DATE*/
        set OP0DM001.OP0DMNDT cursor, modified, bold;
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OPAREC.OPAERR = "Y";
      converseLib.validationFailed(632); /* invalid draw date for program*/
      set OP0DM001.OP0DMNDT cursor, modified, bold;
    else
      TA1REC.TA1DBASE = "DAVAIL  "; /* data base view*/
      TA1REC.TA1PGMNM = "OP0D    "; /* application*/
      TA1REC.TA1LOCAT[1] = "OP0DS3A "; /* stmt group*/
      TA1REC.TA1LOCAT[2] = "IO5480  "; /* io mod called*/
      TA1REC.TA1LOCAT[3] = AVIREC.AVIFUNCD; /* function code*/
      TA1REC.TA1LOCAT[4] = OP0DM001.OP0DMNDT; /* needdate*/
      TA1REC.TA1MAP = "OP0DM001"; /* map*/
      TA1REC.TA1TBLVU = "VBLNKP01"; /* TABLE VIEW*/
      TA1REC.TA1TBLKE = AVGREC.AVGKEY; /* key*/
      XSOPS02();
    end
  end
end // end OP0DS3B

// edit taken-by rep for draw ord
Function OP0DS45()



      /* *********************************************************/
      /* * this statement group edits the taken-by service      **/
      /* * rep logon id for draw order                          **/
      /* *********************************************************/


      /* check for a null service rep logon id*/

  if (OP0DM001.XXXUSRID == " ") /* check for null*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    converseLib.validationFailed(046); /* taken-by service rep id is required*/
    set OP0DM001.XXXUSRID cursor, modified, bold;
    return;
  end


      /* verify that the service rep id exists*/

  KUYREC.XXXUSRID = OP0DM001.XXXUSRID; /* load key*/
  call "IO0550" ("SA", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0   /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100 /* check for notfnd rc*/
   || SQLCA.VAGen_SQLCODE == -811) /* check for not unique rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSVREP01"; /* table view*/
    TA1REC.TA1TBLKE = KUYREC.XXXUSRID; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0DS45 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0550  "; /* i/o mod name*/
    XSOPS02(); /* abend routine*/
  end


      /* if not found or not active then error*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for found  rc*/
   && KUYREC.XXXSTAT == "A")   /* check for active id*/
    OP1REC.OP1TBREP = KUYREC.KUYSVRID;
                                   /* save taken-by service rep id*/
    set OP0DM001.XXXUSRID normal;
    if (OP1REC.XBDCD == "N")
      OP1REC.XSOCD = KUYREC.XSOCD; /* save sales office id*/
    end
  else
    OPAREC.OPAERR = "Y"; /* set error flag*/
    converseLib.validationFailed(040); /* taken-by is not a valid rep id*/
    set OP0DM001.XXXUSRID cursor, modified, bold;
  end



   /* *************************************************************/
end // end OP0DS45

// edit customer on draw order
Function OP0DS50()



       /* *******************************************************/
       /* * this statement grp validate the customer on the    **/
       /* * screen to insure that the customer is still valid  **/
       /* * to draw against the bulk order                     **/
       /* *******************************************************/


     /* load keys to read the customer/gpc table*/

  KUNREC.KUCCOID = OP0DM001.OP0DMCCO;
  KUNREC.KUMSTRID = OP0DM001.OP0DMSTR;
  KUNREC.XNXCD = OP0DM001.OP0DMDEP;
  KUNREC.XGPCD = OP1REC.XGPCD;

  call "IO0280" ("S ", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};


      /* check the db2 return status*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUST001";
    OP0DW01.OP0DWK2 = KUNREC.KUCCOID;
    TA1REC.TA1TBLKE = OP0DW01.OP0DWK2;
    TA1REC.TA1LOCAT[3] = "OP0DS50";
    TA1REC.TA1LOCAT[4] = "IO0280";
    XSOPS02();
  end

  if (OP1REC.XGPCD == "02" /* footwear*/
   || OP1REC.XGPCD == "03") /* apparel*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100 /* if cust not found*/
     || KUNREC.XXXSTAT != "A")     /* or cust stat not active*/
      KUNREC.XGPCD = "**";
      call "IO0280" ("SS", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        KUNREC.XXXSTAT = " "; /* init stat to perform loop*/
        while (KUNREC.XXXSTAT != "A" /* until an active status occurs*/
         && SQLCA.VAGen_SQLCODE == 0) /* good return*/
          OP0DS23(); /* get gpc/cust recs*/
        end
      else
        TA1REC.TA1DBASE = "DCUST";
        TA1REC.TA1TBLVU = "VCUST001";
        OP0DW01.OP0DWK2 = KUNREC.KUCCOID;
        TA1REC.TA1TBLKE = OP0DW01.OP0DWK2;
        TA1REC.TA1LOCAT[3] = "OP0DS50";
        TA1REC.TA1LOCAT[4] = "IO0280";
        XSOPS02();
      end
    end
  end

     /* check to see if the customer is still active*/

  if (SQLCA.VAGen_SQLCODE == 0
   && KUNREC.XXXSTAT == "A")
    if (OP1REC.XBDCD == "N") /* if drawing from nike bulk*/
      OP0DS53(); /* get special labels from customer*/
    end
  else
    set OP0DM001.OP0DMCCO cursor, modified, bold;
    set OP0DM001.OP0DMSTR modified, bold;
    set OP0DM001.OP0DMDEP modified, bold;
    converseLib.validationFailed(203); /* gpc not set up or cust inactv*/
    OPAREC.OPAERR = "Y";
    return; /* no need to edit further*/
  end

    /* get company record*/


  KUCREC.KUCCOID = KUNREC.KUCCOID; /* load key*/

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCMPNY01";
    OP0DW01.OP0DWK2 = KUCREC.KUCCOID;
    TA1REC.TA1TBLKE = OP0DW01.OP0DWK2;
    TA1REC.TA1LOCAT[3] = "OP0DS50";
    TA1REC.TA1LOCAT[4] = "IO0240";
    XSOPS02();
  end

   /* Added for Canada--June 23, 1995--*/

  if (OP1REC.XDZ-DATA-DIST-CD == " ")
    OP1REC.XDZ-DATA-DIST-CD = "US";
  end

  if (COMMAREA.XDVCD == "01") /* domestic only*/
    if (KUCREC.XDZ-DATA-DIST-CD != OP1REC.XDZ-DATA-DIST-CD)
      converseLib.validationFailed(907); /* must be same data dist code*/
      OPAREC.OPAERR = "Y";
      return; /* no need to edit further*/
    end
  end

     /* check to see if customer requires a po number*/

   /* 3/27/91 po # required edit chg'ed from kunrec.kunporfl*/
         /* a single character y/n flag to kucrec.kucypoft a two*/
         /* character code.*/

  if (KUCREC.KUCYPOFT != "00")
    OP0DW01.OP0DWPOF = "Y"; /* set flag*/
  else
    OP0DW01.OP0DWPOF = "N"; /* set flag*/
  end

     /* check customer company credit status*/

  if (KUCREC.XCCCD in XCCTBL.XCCCD) /* credit status code in table*/
    OP0DS-CHECK-CREDIT(); /* validate credit code*/
    if (OP0DW-XCC-STAT-FOUND == "Y") /* valid credit status*/
      /* next sentence*/
    else
      set OP0DM001.OP0DMCCO cursor, modified, bold;
      set OP0DM001.OP0DMSTR modified, bold;
      set OP0DM001.OP0DMDEP modified, bold;
      converseLib.validationFailed(35); /* no new orders may be entered for this*/
                                   /* customer*/
      OPAREC.OPAERR = "Y";
      return; /* no need to edit further*/
    end
  else
    set OP0DM001.OP0DMCCO cursor, modified, bold;
    set OP0DM001.OP0DMSTR modified, bold;
    set OP0DM001.OP0DMDEP modified, bold;
    converseLib.validationFailed(35); /* no new orders may be entered for this*/
                                   /* customer*/
    OPAREC.OPAERR = "Y";
    return; /* no need to edit further*/
  end
  if (KUCREC.KUCSKIND != " ")
    OPWREC.KUCSKIND = KUCREC.KUCSKIND;
  end


   /* ----------------------------------------------------------*/
    /* See if the company has the proper legal entity.*/
    /* Not all companies need to be checked.*/
   /* ----------------------------------------------------------*/
  if (KUCREC.XAUCD == "12" /* Instructor pgm*/
   || KUCREC.XAUCD == "13" /* Store clerk pgm*/
   || KUCREC.XAUCD == "14" /* FBI*/
   || KUCREC.XAUCD == "43" /* Mail order*/
   /* OR KUCREC.XAUCD = '45'        ; Empl*/
   /* store Nike*/
   || KUCREC.XAUCD == "60" /* Retail marketing*/
   || KUCREC.XAUCD == "63" /* Dealer ad assistance*/
   || KUCREC.XAUCD == "62" /* Consumer defectives*/
   || KUCREC.XAUCD == "90") /* Cole Haan*/
     /* OR KUCREC.XAUCD = '95'        ; Empl store Side 1*/
    OP0DSLE(); /* Check legal entity*/
  else
    if (OP1REC.XDZ-DATA-DIST-CD != "CA") /* CANA only check legal entity*/
      sysVar.arrayIndex = 1; /* CANA for non-Canadian orders*/
      if (KUCREC.XAUCD in XAUTBL.XAUCD)
        if (XAUTBL.XATCD[sysVar.arrayIndex] == "02") /* USA wholesale*/
          OP0DSLE();
        end
      end
    end
  end


     /* get the store record (dcust.vstore01)*/
            /* 02/12/91 db changes*/


  KUMREC.KUCCOID = OP0DM001.OP0DMCCO;
  KUMREC.KUMSTRID = OP0DM001.OP0DMSTR;

  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VSTORE01";
    TA1REC.TA1TBLKE = KUMREC.KUMGRP;
    TA1REC.TA1LOCAT[3] = "OP0DS50";
    TA1REC.TA1LOCAT[4] = "IO0340";
    XSOPS02();
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(033); /* invalid customer*/
    OPAREC.OPAERR = "Y";
    set OP0DM001.OP0DMCCO cursor, modified, bold;
    set OP0DM001.OP0DMSTR modified, bold;
  end


  if (OPAREC.OPAERR == "Y")
    return;
  end


     /* customer zip code edit*/


  if (OP1REC.OP1SHAID != 0)
    KULREC.KUCCOID = OP0DM001.OP0DMCCO;
    KULREC.KULAAID = KUMREC.KUMSHAID;

    try
      call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes};
    end

    if (SQLCA.VAGen_SQLCODE == 0)
      OPAREC.OPAZIP = KULREC.XXXZIP;
      if (KULREC.XCTCD == "USA")
        if (OP0DM001.XXXZIP != OPAREC.OPAZIP5)
          set OP0DM001.XXXZIP cursor, modified, bold;
          OP0DW01.OP0DWZTX = "ZIP CODE DOES NOT MATCH SHIP-TO ZIP: ";
          OP0DW01.OP0DWZZP = OPAREC.OPAZIP5;
          OP0DM001.OP0DMMSG = OP0DW01.OP0DWMSG;
          OPAREC.OPAERR = "Y";
          OP0DS5A();
          return; /* no need to edit further*/
        else
          set OP0DM001.XXXZIP initialAttributes;
        end
      end
      if (KULREC.XCTCD == "CANA") /* added for Canada --  June 23,1995--*/
        if (OP0DM001.XXXZIP != OPAREC.OPAZIP6C)
          set OP0DM001.XXXZIP cursor, modified, bold;
          OP0DW01.OP0DWZTX = "ZIP CODE DOES NOT MATCH SHIP-TO ZIP: ";
          OP0DW01.OP0DWZZP = OPAREC.OPAZIP6C;
          OP0DM001.OP0DMMSG = OP0DW01.OP0DWMSG;
          OPAREC.OPAERR = "Y";
          OP0DS5A();
          return; /* no need to edit further*/
        else
          set OP0DM001.XXXZIP initialAttributes;
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        set OP0DM001.OP0DMCCO cursor, modified, bold;
        set OP0DM001.OP0DMSTR modified, bold;
        set OP0DM001.OP0DMDEP modified, bold;
        converseLib.validationFailed(283); /* cust shipto address is not valid*/
        OPAREC.OPAERR = "Y";
        return; /* no need to edit further*/
      else
        TA1REC.TA1DBASE = "DCUST";
        TA1REC.TA1TBLVU = "VADDR001";
        TA1REC.TA1TBLKE = KULREC.KULGRP;
        TA1REC.TA1LOCAT[3] = "OP0DS50";
        TA1REC.TA1LOCAT[4] = "IO0170";
        XSOPS02();
      end
    end
  end


      /* if the customer is part of a special customer group,*/
      /* then, access the special customer group record and*/
      /* check the xsg special customer group array.*/

  OP0DW01.OP0DWSER = "N"; /* reset special-grp error flag*/
  KUPREC.KUCCOID = OP0DM001.OP0DMCCO; /* load key - cust company*/
  KUPREC.KUMSTRID = OP0DM001.OP0DMSTR; /* load key - cust store*/
  KUPREC.XNXCD = KUNREC.XNXCD; /* load key - cust dept*/
  KUPREC.XGPCD = KUNREC.XGPCD; /* load key - gpc*/

  call "IO0260" ("S ", SQLCA, KUPREC) {isNoRefresh = yes, isExternal = yes};


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VCUGRP01"; /* table view*/
    TA1REC.TA1TBLKE = KUPREC.KUPGRP; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0DS50 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0260  "; /* i/o mod name*/
    XSOPS02(); /* abend routine*/
  end


      /* if not found, then error*/

  if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
    OP0DW01.OP0DWSER = "Y"; /* set special-grp error flag*/
  end


   /* check for special customer groups*/
    /* comprising military accounts*/

  OP0DW01.OP0DWSGF = "N";
  if (OP0DW01.OP0DWSER == "N") /* special-grp error flag*/
    sysVar.arrayIndex = 1;
    while (sysVar.arrayIndex < 11
     && KUPREC.XSGCD[sysVar.arrayIndex] > " ")
      if (KUPREC.XSGCD[sysVar.arrayIndex] == "20"
       || KUPREC.XSGCD[sysVar.arrayIndex] == "BK"
       || KUPREC.XSGCD[sysVar.arrayIndex] == "MI"
       || KUPREC.XSGCD[sysVar.arrayIndex] == "NO")
        OP0DW01.OP0DWSGF = "Y";
        sysVar.arrayIndex = 11;
      else
        sysVar.arrayIndex = sysVar.arrayIndex + 1;
      end
    end
  end


   /* for draw addressing: if customer hasn't changed*/
                        /* if bulk has no override addressing*/
                            /* use bulk shipto and billto id's*/
                        /* else*/
                            /* use vcust addr ids.*/

  if (OP0DM001.OP0DMCCO is modified /* if company changed*/
   || OP0DM001.OP0DMSTR is modified /* or store changed*/
   || OP0DM001.OP0DMDEP is modified /* or dept changed*/
   || OP1REC.OP1SGPAO == "Y"        /* or ship grp ovrd*/
   || OP1REC.OP11TMBF == "Y"        /* or one time billto*/
   || OP1REC.OP11TMSF == "Y")       /* or one time shipto*/
    OP1REC.OP1BLAID = KUCREC.KUCBLAID; /* use new vcust values*/
    OP1REC.OP1SHAID = KUMREC.KUMSHAID;
  else
     /* next sentence   use the existing op1rec values.*/
  end



    /* lastly reset all addr ovrd flags;*/

  OP1REC.OP1SGPAO = "N"; /* ship grp ovrd*/
  OP1REC.OP11TMBF = "N"; /* one time billto flag*/
  OP1REC.OP11TMSF = "N"; /* one time ship flag;*/


       /* if there is no sales pgr on the bulk order, no further*/
       /* validations is needed -- customer is qualified*/

  if (OP0DM001.SP1ID == " ")
    set OP0DM001.OP0DMCCO normal;
    set OP0DM001.OP0DMSTR normal;
    set OP0DM001.OP0DMDEP normal;
    OP1REC.KUCCOID = OP0DM001.OP0DMCCO; /* cust is valid*/
    OP1REC.KUMSTRID = OP0DM001.OP0DMSTR;
    OP1REC.XNXCD = OP0DM001.OP0DMDEP;
    OP0DW01.OP0DWVCS = "Y"; /* cust is valid*/
    return; /* no further validations needed*/
  end


   /* log #484 4/12/91 dflesh*/
   /* add code to check account class in xautbl*/
   /* if spgm allow flag = 'n', spgm not allowed for*/
   /* account class or account type*/


  sysVar.arrayIndex = 1;
  if (KUCREC.XAUCD in XAUTBL.XAUCD              /* class code in table*/
   && XAUTBL.XAUSPGFL[sysVar.arrayIndex] == "N" /* spgm flag is no*/
   && XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* spgm is active*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    converseLib.validationFailed(547); /* acct cls or acct type not valid for*/
                                   /* spgm*/
    return;
  end




     /* if there is a sales program on the bulk order,*/
     /* check to see if customer is qualified for that sales prg.*/

  OP1REC.SP1ID = " ";
  SP1REC.SP1ID = OP0DM001.SP1ID;

  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};

       /* check db2 return status*/

  if (SQLCA.VAGen_SQLCODE == 0)
    OP1REC.SP1ID = OP0DM001.SP1ID;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(885);
      set OP0DM001.SP1ID bold, cursor;
      OPAREC.OPAERR = "Y";
      return;
    else
      TA1REC.TA1DBASE = "DSPGM";
      TA1REC.TA1TBLVU = "VSPGM001";
      TA1REC.TA1TBLKE = SP1REC.SP1KEY;
      TA1REC.TA1LOCAT[3] = "OP0DS50";
      TA1REC.TA1LOCAT[4] = "IO0070";
      XSOPS02();
    end
  end


  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex < 21 /* not end of table*/
   && SP1REC.XSGCD[sysVar.arrayIndex] > " ") /* not end active entries*/
    if (SP1REC.XSGCD[sysVar.arrayIndex] == "**") /* if special code found*/
      set OP0DM001.OP0DMCCO normal;
      set OP0DM001.OP0DMSTR normal;
      set OP0DM001.OP0DMDEP normal;
      OP1REC.KUCCOID = OP0DM001.OP0DMCCO; /* cust is valid*/
      OP1REC.KUMSTRID = OP0DM001.OP0DMSTR;
      OP1REC.XNXCD = OP0DM001.OP0DMDEP;
      OP0DW01.OP0DWVCS = "Y"; /* cust is valid*/
      return; /* no further validations needed*/
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end


      /* edit the customer company account class against*/
      /* the sales account type.  if a match is found, then*/
      /* the sales program is valid for the customer.*/


  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex < 21 /* not end of table*/
   && SP1REC.XAUCD[sysVar.arrayIndex] > " ") /* not end active entries*/
    if (KUCREC.XAUCD == SP1REC.XAUCD[sysVar.arrayIndex]) /* if acct code found*/
      set OP0DM001.OP0DMCCO normal;
      set OP0DM001.OP0DMSTR normal;
      set OP0DM001.OP0DMDEP normal;
      OP1REC.KUCCOID = OP0DM001.OP0DMCCO; /* cust is valid*/
      OP1REC.KUMSTRID = OP0DM001.OP0DMSTR;
      OP1REC.XNXCD = OP0DM001.OP0DMDEP;
      OP0DW01.OP0DWVCS = "Y"; /* cust is valid*/
      return; /* no further validations needed*/
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end



      /* edit the customer special account class against*/
      /* the sales program special account type.*/

  if (OP0DW01.OP0DWSER == "N") /* special customer found (no error)*/
    sysVar.arrayIndex = 1;
    while (sysVar.arrayIndex < 11 /* not end of table*/
     && KUPREC.XSGCD[sysVar.arrayIndex] > " ") /* not end active entries*/
      OPAREC.OPASUB = 1;
      while (OPAREC.OPASUB < 21 /* not end of table*/
       && SP1REC.XSGCD[OPASUB] > " ") /* not end active entries*/
        if (KUPREC.XSGCD[sysVar.arrayIndex] == SP1REC.XSGCD[OPASUB])
          set OP0DM001.OP0DMCCO normal;
          set OP0DM001.OP0DMSTR normal;
          set OP0DM001.OP0DMDEP normal;
          OP1REC.KUCCOID = OP0DM001.OP0DMCCO; /* cust is valid*/
          OP1REC.KUMSTRID = OP0DM001.OP0DMSTR;
          OP1REC.XNXCD = OP0DM001.OP0DMDEP;
          OP0DW01.OP0DWVCS = "Y"; /* cust is valid*/
          return; /* no further validations needed*/
        end
        OPAREC.OPASUB = OPAREC.OPASUB + 1;
      end
      sysVar.arrayIndex = sysVar.arrayIndex + 1;
    end
  end


      /* if no match between the two tables, then check*/
      /* for specific customer qualification.*/

  OP0DS51(); /* check specific customers*/



   /* *************************************************************/
end // end OP0DS50

// vailidate cust vs sales prog
Function OP0DS51()



      /* *********************************************************/
      /* * this statement group edits the customer as being     **/
      /* * valid as a "specific customer" on the sales program. **/
      /* *********************************************************/


      /* first check to see if there are specific customers.*/
      /* if not, then we have an error.*/

  if (SP1REC.SP1CIND != "Y") /* no specific customers*/
    converseLib.validationFailed(044); /* cust does not qualify for sls pgm*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0DM001.OP0DMCCO cursor, modified, bold;
    set OP0DM001.OP0DMSTR modified, bold;
    set OP0DM001.OP0DMDEP modified, bold;
    return;
  end


      /* access slspgm customer records*/

  SP4REC.SP1ID = OP0DM001.SP1ID; /* load key*/
  SP4REC.KUCCOID = OP0DM001.OP0DMCCO; /* load key - cust company*/
  call "IO0100" ("SS", SQLCA, SP4REC) {isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(044); /* cust does not qualify for sls pgm*/
      OPAREC.OPAERR = "Y"; /* set error flag*/
      set OP0DM001.OP0DMCCO cursor, modified, bold;
      set OP0DM001.OP0DMSTR modified, bold;
      set OP0DM001.OP0DMDEP modified, bold;
      return;
    else
      TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
      TA1REC.TA1TBLVU = "VCUST001"; /* table view*/
      TA1REC.TA1TBLKE = SP4REC.SP4KEY; /* key value*/
      TA1REC.TA1LOCAT[3] = "OP0DS51 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = "IO0100  "; /* i/o mod name*/
      XSOPS01(); /* abend routine*/
    end
  end


      /* process returned answer set*/

      /* basis of selection below is that all 9's in any key*/
      /* means any (store, dept, or gpc depending on field).*/
      /* otherwise, a specific field value must match.*/

  while (SQLCA.VAGen_SQLCODE == 0)
    OP0DS52(); /* get next answer set row*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (SP4REC.KUMSTRID == 9999 /* store ok ?*/
       || SP4REC.KUMSTRID == OP0DM001.OP0DMSTR)
        if (SP4REC.XNXCD == 99 /* dept OK ?*/
         || SP4REC.XNXCD == OP0DM001.OP0DMDEP)
          if (SP4REC.XGPCD == "99" /* gpc ok ?*/
           || SP4REC.XGPCD == KUNREC.XGPCD)
            set OP0DM001.OP0DMCCO normal;
            set OP0DM001.OP0DMSTR normal;
            set OP0DM001.OP0DMDEP normal;
            OP1REC.KUCCOID = OP0DM001.OP0DMCCO;
            OP1REC.KUMSTRID = OP0DM001.OP0DMSTR;
            OP1REC.XNXCD = OP0DM001.OP0DMDEP;
            OP0DW01.OP0DWVCS = "Y"; /* cust is valid*/
            return; /* cust qualifies*/
          end
        end
      end
    end
  end


      /* if not found, then error*/

  if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
    converseLib.validationFailed(044); /* cust does not qualify for sls pgm*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0DM001.OP0DMCCO cursor, modified, bold;
    set OP0DM001.OP0DMSTR modified, bold;
    set OP0DM001.OP0DMDEP modified, bold;
  end



   /* *************************************************************/
end // end OP0DS51

// get next sales pgm cust record
Function OP0DS52()



      /* *********************************************************/
      /* * this statement group gets the next sales program     **/
      /* * customer record                                      **/
      /* *********************************************************/


      /* access slspgm customer record from answer set*/

  call "IO0100" ("SN", SQLCA, SP4REC) {isExternal = yes}; /* call i/o mod for answer set*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VCUST001"; /* table view*/
    TA1REC.TA1TBLKE = SP4REC.SP4KEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0DS52 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0100  "; /* i/o mod name*/
    XSOPS01(); /* abend routine*/
  end



   /* *************************************************************/
end // end OP0DS52

// load labels from customer
Function OP0DS53()



      /* ********************************************************/
      /* * this statement group                                **/
      /* * reads the dcust.vlabel01 to get customer lables     **/
      /* * (-- there are only 2 labels for each customer)      **/
      /* * and moves these two labels to the map               **/
      /* ********************************************************/


  set KUSREC empty;
  KUSREC.KUCCOID = OP0DM001.OP0DMCCO; /* load keys*/
  KUSREC.KUMSTRID = OP0DM001.OP0DMSTR;
  KUSREC.XNXCD = OP0DM001.OP0DMDEP;
  KUSREC.XGPCD = OP1REC.XGPCD;



  call "IO0310" ("S ", SQLCA, KUSREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OP0DM001.OP0DMLB1 = KUSREC.KUSTEXT1;
    OP0DM001.OP0DMLB2 = KUSREC.KUSTEXT2;
    set OP0DM001.OP0DMLB1 modified;
    set OP0DM001.OP0DMLB2 modified;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OP0DM001.OP0DMLB1 = " ";
      OP0DM001.OP0DMLB2 = " ";
    else
      TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
      TA1REC.TA1TBLVU = "VINST001"; /* table view*/
      TA1REC.TA1TBLKE = KUSREC.KUSGRP; /* table key*/
      TA1REC.TA1LOCAT[3] = "OP0DS53"; /* statement group*/
      TA1REC.TA1LOCAT[4] = "IO0310";
      XSOPS02();
    end
  end



   /* ************************************************************/
end // end OP0DS53

// edit draw customer profile
Function OP0DS55()




   /* *********************************************************/
   /* get the appropriate profile code off the company record*/
   /* (kucrec), based on the order's gpc and need date*/
   /* *********************************************************/

    /* this routine is executed only when all other edits have*/
      /* been passed.  if the need date was valid from op0ds30*/
      /* (edit need date), it was moved to op1rec.op1cundt.*/
    /* kucrec carries four profile codes:  occurrence (1) and (2)*/
      /* for footwear, and (3) and (4) for apparel.*/
    /* if the company profile date = 0, the first profile code is*/
      /* always used.*/
    /* if the order's need date is less than the company rec*/
      /* profile date, the first profile code is used.*/
    /* if the order's need date is equal to or is greater than*/
      /* the company rec profile date, the second profile code is*/
      /* used.*/

  if (OP1REC.XGPCD == "02")
    if (KUCREC.KUCFPRDT == 0 /* cmpny rec ftwr prof date = 0*/
     || OP1REC.OP1CUNDT < KUCREC.KUCFPRDT) /* need dt lt cmpny rec date*/
      OP0DW01.XOPCD = KUCREC.XOPCD[1];
    else
      OP0DW01.XOPCD = KUCREC.XOPCD[2];
    end

  else
    if (OP1REC.XGPCD == "03")
      if (KUCREC.KUCAPRDT == 0 /* cmpny rec apprl prof date = 0*/
       || OP1REC.OP1CUNDT < KUCREC.KUCAPRDT) /* need dt lt cmpny rec date*/
        OP0DW01.XOPCD = KUCREC.XOPCD[3];
      else
        OP0DW01.XOPCD = KUCREC.XOPCD[4];
      end
    end
  end
   /* TCS include begin (02/04/98)*/
   /* If a record exists in VCUXOP01 for the customer, then XOPCD is*/
   /* taken from VCUXOP01; otherwise value from VCMPNY01 is retained*/

   /* JFLOR1: changed opwrec01.xpcck to opwrec01.xpccd  3/11/98*/

  VCUXOP01.KUCCOID = OP1REC.KUCCOID; /* cu_co_id (load keys)*/
  VCUXOP01.XGPCD = OP1REC.XGPCD; /* xgp_gpc_cd*/
  VCUXOP01.XPCCD = OPWREC01.XPCCD; /* xpc_prod_cat_cd*/

  call "VCUXOP01" ("S ", SQLCA, VCUXOP01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    OP0DW01.XOPCD = VCUXOP01.XOPCD;
  else
    if (SQLCA.VAGen_SQLCODE == +100)
         /* next sentence - retain the XOP value from VCMPNY01 table*/
    else
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUXOP01";
      OP0DW01.OP0DWK2 = VCUXOP01.KUCCOID;
      TA1REC.TA1TBLKE = OP0DW01.OP0DWK2;
      TA1REC.TA1LOCAT[1] = "S      ";
      TA1REC.TA1LOCAT[2] = "VCUXOP01";
      TA1REC.TA1LOCAT[3] = "OP0DS55";
      TA1REC.TA1LOCAT[4] = "      ";
      XSOPS02();
    end
  end

   /* TCS include end (02/04/98)*/

   /* *********************************************************/
   /* if the profile code used above is equal to spaces,*/
   /* no further validation is necessary--any order type is*/
   /* valid.  if the profile code is not equal to spaces,*/
   /* validate the order type entered for the order and the*/
   /* profile found on the cmpny rec against the 'master'*/
   /* profile table (io2550).  can't use an order type that*/
   /* doesn't exist under the master table's profile id.*/
   /* *********************************************************/

  if (OP0DW01.XOPCD == " ")
    return;
  end


  OPKREC.XOPCD = OP0DW01.XOPCD;
  OPKREC.XOTCD = OP1REC.XOTCD;
  OPKREC.OPKOTEDT = OP1REC.OP1CUNDT;

  call "IO2550" ("SE", SQLCA, OPKREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
     /* OK - continue*/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      OPAERR = "Y";
      set OP0DM001.OP0DMCCO modified, bold;
      set OP0DM001.XOBCD cursor, modified, bold;
      converseLib.validationFailed(239);
      return;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OP0D";
      TA1REC.TA1LOCAT[1] = "SE      ";
      TA1REC.TA1LOCAT[2] = "OP0DS55 ";
      TA1REC.TA1LOCAT[3] = "IO2550  ";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "        ";
      TA1REC.TA1DBASE = "DORDER  ";
      TA1REC.TA1TBLVU = "VOTVAL01";
      TA1REC.TA1TBLKE = "OPKREC  ";
      try
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* on error clear ws*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      XSPF4();
      exit program;
    end
  end




end // end OP0DS55

// edit zip code
Function OP0DS5A()



      /* *********************************************************/
      /* * this statement group verifies the zip codes.         **/
      /* *********************************************************/



      /* validate ship to zip code verification field*/

      /* get store record for customer*/

  KUMREC.KUCCOID = OP0DM001.OP0DMCCO; /* load key - company*/
  KUMREC.KUMSTRID = OP0DM001.OP0DMSTR; /* load key - store*/
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSTORE01"; /* table view*/
    TA1REC.TA1TBLKE = KUMREC.KUMGRP; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0DS5A "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0340  "; /* i/o mod name*/
    XSOPS02();
  end


      /* if not found, then customer is invalid*/

  if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
    converseLib.validationFailed(033); /* customer is not valid*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0DM001.OP0DMCCO cursor, modified, bold;
    set OP0DM001.OP0DMSTR modified, bold;
    set OP0DM001.OP0DMDEP modified, bold;
    return; /* get out*/
  end


      /* check ship group addr id to see if zip check is required*/

  if (KUMREC.KUMSHAID == 0) /* ship to addr id zero ?*/
    return; /* verification not required*/
  end


      /* save infomation*/

  OPWREC.KUMSTRNM = KUMREC.KUMSTRNM; /* save cust store name*/


      /* access customer address table for ship to name/addr*/

  KULREC.KUCCOID = OP0DM001.OP0DMCCO; /* load key - cust co*/
  KULREC.KULAAID = KUMREC.KUMSHAID; /* load key - addr id*/
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VADDR001"; /* table view*/
    TA1REC.TA1TBLKE = KULREC.KULGRP; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0DS5A "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0170  "; /* i/o mod name*/
    XSOPS02();
  end


      /* if not found, then tell user*/

  if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
    converseLib.validationFailed(038); /* ship to addr record is missing*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0DM001.OP0DMCCO cursor, modified, bold;
    set OP0DM001.OP0DMSTR modified, bold;
    set OP0DM001.OP0DMDEP modified, bold;
    return; /* get out*/
  end


      /* format ship to info and check zip codes*/

  set OP0DM001.OP0DMLN1 skip;
  OP0DM001.OP0DMLN1 = " ";
  set OP0DM001.OP0DMLN2 skip;
  OP0DM001.OP0DMLN2 = " ";
  set OP0DM001.OP0DMLN3 skip;
  OP0DM001.OP0DMLN3 = " ";
  set OP0DM001.OP0DMLN4 skip;
  OP0DM001.OP0DMLN4 = " ";
  set OP0DM001.OP0DMLN5 skip;
  OP0DM001.OP0DMLN5 = " ";
  set OP0DM001.OP0DMLN6 skip;
  OP0DM001.OP0DMLN6 = " ";

  OP0DW02.OP0DWSLT = "SHIP TO:"; /* literal*/
  OP0DW02.OP0DWSNM = KUMREC.KUMSTRNM;
  OP0DM001.OP0DMLN2 = OP0DW02.OP0DWSL1;

  OP0DW02.OP0DWSAA = KULREC.XXX-ADDR1;
   /* MOVE '*' TO OP0dW02.OP0dWFL2;*/
  OP0DM001.OP0DMLN3 = OP0DW02.OP0DWSL2;

  OP0DW02.OP0DWSAB = KULREC.XXX-ADDR2;
   /* MOVE '*' TO OP0dW02.OP0dWFL4;*/
  OP0DM001.OP0DMLN4 = OP0DW02.OP0DWSL3;

  OP0DW02.OP0DWSAC = KULREC.XXX-ADDR3;
  OP0DM001.OP0DMLN5 = OP0DW02.OP0DWSL4;

  OP0DW02.OP0DWSCT = KULREC.XXXCITY;
  OP0DW02.OP0DWSST = KULREC.XSTCD;

  OP0DW02.OP0DWSCN = " "; /* clear country code*/
  OP0DW02.OP0DWSCD = " "; /* clear country desc*/
  if (KULREC.XCTCD > " " /* country code present?*/
   && KULREC.XCTCD != "USA ") /* and not equal u.s.a.*/
    if (KULREC.XCTCD != "CANA") /* CANA don't move country code*/
      OP0DW02.OP0DWSCN = KULREC.XCTCD; /* move country code*/
    end
    if (KULREC.XCTCD in XCTTBL.XCTCD)
      OP0DW02.OP0DWSCD = XCTTBL.XCTDESC[sysVar.arrayIndex]; /* move country desc*/
    end
  end

  OPAREC.OPAZIP = KULREC.XXXZIP; /* move zip to wk field*/
  if (KULREC.XCTCD == " " /* country code blank*/
   || KULREC.XCTCD == "USA ") /* or equal u.s.a.*/
    OP0DW02.OP0DWSZP = OPAREC.OPAZIP5C; /* move 5 char zip to screen*/
  else
    if (KULREC.XCTCD == "CANA") /* country code canada*/
      OP0DW02.OP0DWSZP = OPAREC.OPAZIP6C; /* move 6 char zip to screen*/
    end
  end

  OP0DM001.OP0DMLN6 = OP0DW02.OP0DWSL5;

    /* CANA 06/04*/

  if (KULREC.XCTCD == " " /* country code blank*/
   || KULREC.XCTCD == "USA ") /* or equal u.s.a.*/
    if (OP0DM001.XXXZIP == OPAREC.OPAZIP5C) /* zips equal?*/
      set OP0DM001.XXXZIP normal;
    else
      OPAREC.OPAERR = "Y"; /* set error flag*/
      set OP0DM001.XXXZIP cursor, modified, bold;
      return; /* get out*/
    end
  else
    if (KULREC.XCTCD == "CANA") /* CANA country code canada*/
      if (OP0DM001.XXXZIP == OPAREC.OPAZIP6C) /* CANA zips equal ?*/
        set OP0DM001.XXXZIP normal; /* CANA*/
      else /* CANA*/
        OPAREC.OPAERR = "Y"; /* CANA set error flag*/
        set OP0DM001.XXXZIP cursor, modified, bold; /* CANA*/
        return; /* CANA get out*/
      end /* CANA*/
    end /* CANA*/
  end /* CANA*/



   /* *************************************************************/
end // end OP0DS5A

// set up ord hdr for draw order
Function OP0DS60()
       /* *******************************************************/
       /* * this statement group sets up the order header for  **/
       /* * the draw order                                     **/
       /* *******************************************************/

    /* get allocation sequence from ku1540*/

  OP0DS-CALL-KU1540();
  if (OPAREC.OPAERR == "Y")
    return;
  end

     /* get next order number*/

  OP0DS61(); /* get ord id for draw order*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

     /* save the bulk order id*/

  OP0DW01.OP0DWBLK = OP1REC.OP1KEY;

     /* save the bulk sales program id*/

  OP0DW01.SP1ID = OP0DM001.SP1ID;


     /* save the bulk sales program min discount pct*/

  OP0DW01.SP6MDISC = OP1REC.SP6MDISC;


     /* save the bulk tier override flag*/

  OP0DW01.OP1TIERF = OP1REC.OP1TIERF;


     /* save the bulk tier level number*/

  OP0DW01.OP1TLVLN = OP1REC.OP1TLVLN;


     /* set up draw order header record*/

  OPAREC.OPAORDN = OP7REC.OP7CUOIN;
  OP1REC.OP1PARTN = OPAREC.OP1PARTN;
  OP1REC.OP1CUOID = OP7REC.OP7CUOIN;
  OP1REC.OP1NORID = 0;

    /* Save the company number*/


  OP0DW01.OP1CMPNB = OP1REC.OP1CMPNB; /* comp number*/

    /* Move the order type from screen for nike bulk orders*/


  if (OP1REC.XBDCD == "N")
    OP1REC.XOBCD = OP0DM001.XOBCD;
  end

    /* If Nike Retail Customer, apply special Sales Program Defaults*/

  if (OP1REC.KUCCOID == 2000215
   || OP1REC.KUCCOID == 900770
   || OP1REC.KUCCOID == 900772)
    if (OP0DW01.SP1ID == " ")
      /* next sentence*/
    else
      if (OP1REC.KUCCOID == 2000215)
        OP1REC.SP1ID = OP0DW01.SP1ID;
        OP1REC.SP6MDISC = OP0DW01.SP6MDISC;
        OP1REC.OP1TIERF = OP0DW01.OP1TIERF;
        OP1REC.OP1TLVLN = OP0DW01.OP1TLVLN;
      else
        if (OP1REC.KUCCOID == 900770
         && OP0DW01.KUCCOID == 2000215)
          OP1REC.SP1ID = OP0DW01.SP1ID;
          OP1REC.SP6MDISC = OP0DW01.SP6MDISC;
          OP1REC.OP1TIERF = OP0DW01.OP1TIERF;
          OP1REC.OP1TLVLN = OP0DW01.OP1TLVLN;
        else
          OP1REC.SP1ID = " ";
          OP1REC.SP6MDISC = 0;
          OP1REC.OP1TIERF = " ";
          OP1REC.OP1TLVLN = 0;
        end
      end
    end
  end

  OP1REC.XOSCD = "IP"; /* in-process status*/

  OP1REC.OP1ENREP = OPWREC.OPWENTID;
                                   /* entered-by rep id (passed in)*/

  OP1REC.OP1NTMAL = 0; /* number of time alloc*/

  OP1REC.OP1OALSQ = 9999; /* alloc sequence*/

  OP1REC.OP1LALDT = 0; /* last alloc date*/

  OP1REC.OP1DABDT = 0; /* dont alloc before dt*/

  OP1REC.OP1DRBDT = 0; /* dont reserve before dt*/

  OP1REC.XAHCD = " "; /* alloc hold cd*/

  OP1REC.OP1ALHDT = 0; /* alloc hold dt*/

  OP1REC.OP1PAHCD = " "; /* prev alloc code*/

  if (OP0DW01.XAHCD == "04" /* po hold*/
   || OP0DW01.XAHCD == "05") /* draw order hold*/
    OP1REC.XAHCD = OP0DW01.XAHCD; /* bulk xahcd thru other appls*/
  end

  OP1REC.OP1ALRDT = 0; /* alloc release dt*/

  OP1REC.XAFCD = " "; /* alloc force cd*/

  OP1REC.OP1ALFDT = 0; /* alloc force dt*/

  OP1REC.OP1CPODT = 0; /* po dt*/

  OP1REC.XCHCD[1] = "00"; /* credit hold code*/
  OP1REC.XCHCD[2] = "00";
  OP1REC.XCHCD[3] = "00";

  OP1REC.XCSCD = "00"; /* credit status cd*/

  OP1REC.OP1CSADT = 0; /* credit status dt*/

  OP1REC.OP1CSATM = 0; /* credit status time*/

  OP1REC.OP1CKAMT = 0; /* credit check amount*/

  OP1REC.OP1DCHLD = 0; /* days credit hold*/

  OP1REC.OP1VAUDT = 0; /* vendor auth dt*/

  OP1REC.OP1VAUNB = " "; /* vendor auth number*/

  OP1REC.OP1OVALU = 0; /* order value*/

  OP1REC.OP1OTUNT = 0; /* tot units*/

  OP1REC.OP1OSRID = 0; /* override service id*/

  OP1REC.XOMCD = " "; /* maint code*/

  OP1REC.OP1OMDT = 0; /* maint date*/

  OP1REC.OP1MTREP = 0; /* maint rep-id*/

  OP1REC.OP1SPHDF = "N"; /* special handling flag*/

  OP1REC.OP1OMCMF = "N"; /* ord maint comment flg*/

  OP1REC.OP1NDRAW = 0; /* number of draws*/

   /* For Service Req #778 - nike bulks use vcurep01*/

  OP1REC.SM4REPID = 0; /* sales rep id*/
  OP1REC.SM1AGYID = " "; /* agency id*/


  OP1REC.KUCUNTCS = KUCREC.KUCUNTCS;

       /* get the bulk order id and the right code for the*/
       /* draw order*/

  OP1REC.OP1BLKID = OPWREC.OP1BLKID; /* bulk order id*/
  OP1REC.XBDCD = OPWREC.XBDCD; /* bulk order code*/


       /* init credit fields*/

  OP1REC.OP1CRLMP = " ";
  OP1REC.OP1CRLMR = " ";
  OP1REC.OP1PCSDT = 0;
  OP1REC.OP1PCSTM = 0;


       /* init new fields -- added for phase ii*/

       /* 03/12/92 JLoyer -- DB2 chgs: replaced op1dsdcf with*/
       /* op-dirshp-dsct-pct, init to zero.*/
       /* Also added init op-srep-ovrd-fl to 'n'.*/

  OP1REC.OP-DIRSHP-DSCT-PCT = 0; /* direct ship discount percent*/
  OP1REC.OP-SREP-OVRD-FL = "N"; /* sales rep override flag*/
  OP1REC.OP1PCSCD = "00"; /* previous credit status code*/
  OP1REC.OP1CCKOQ = 0; /* credit check order qty*/
  OP1REC.OP1SSHPO = " "; /* small ship override*/
  OP1REC.OP1ECADT = 0; /* extended aut cancel date*/
  OP1REC.OP1ECANM = " "; /* extended aut cancel name*/
  OP1REC.OP1IVADT = 0; /* invoice asof date*/
  OP1REC.OP1PCNDT = 0; /* previous cancel date*/
  OP1REC.XMDCD = OPWREC.OPWSFLOW; /* order method code*/
  OP1REC.OP1ALCQF = "N"; /* allocated qty flag*/
  OP1REC.OP1RSVQF = "N"; /* reserved qty flag*/
  OP1REC.OP1SHPQF = "N"; /* shipped qty flag*/
  OP1REC.OP1ORADT = 0; /* override auth date*/


  OP1REC.OP1EXPDF = "N"; /* 9-10-87 t.fox for picking prjct*/

     /* from the customer records*/

  OP1REC.OP1ALSEQ = VCULVLPD.OP1ALSEQ;
  OP1REC.XACCD = VCULVLPD.XACCD;
  OP1REC.KUCVNDFL = KUCREC.KUCVNDFL; /* vendor aut req flag*/


     /* system dates and times*/

  set TA2REC empty;
  TA2REC.TA2RTNCD = 0;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    OP1REC.OP1OSADT = TA2REC.TA2GRGGN; /* maint date*/
    OP1REC.OP1ENTDT = TA2REC.TA2GRGGN; /* enter date-don't copy bulk*/
    OP1REC.ZZZSDT = TA2REC.TA2GRGGN; /* set-up date*/
    OP1REC.ZZZCHGDT = TA2REC.TA2GRGGN; /* change date*/
    OP1REC.ZZZSTM = TA2REC.TA2TIMHM; /* set-up time*/
    OP1REC.ZZZCHGTM = TA2REC.TA2TIMHM; /* change time*/
    if (OP1REC.XBDCD == "K")
      OP1REC.OP1ORCDT = TA2REC.TA2GRGGN; /* receive date*/
    end
  end

  OP1REC.ZZZCHGCT = 0; /* change count*/


     /* if there are special instructions/labels on the bulk ord*/
     /* write them out for draw order*/


  if (OP1REC.XBDCD == "K")
     /* NEXT SENTENCE*/
  else
    if (OP1REC.OP1SPINF == "Y"
     || OP1REC.OP1SPLBF == "Y")
      OP0DS65(); /* write special inst/labels*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
    end
  end


     /* if labels were updated or new labels were entered,*/
     /* update existing labels or write new labels for draw order*/

  if (OP1REC.XBDCD == "K")
     /* NEXT SENTENCE*/
  else
    OP0DS70();
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
  end


     /* write the order header record for draw order*/

  OP0DS62(); /* write draw order header rec*/



      /* release db2 resourse*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value



   /* ***********************************************************/
end // end OP0DS60

// get next order number
Function OP0DS61()
        /* ******************************************************/
        /* * this statement group gets the order number for    **/
        /* * the draw order                                    **/
        /* ******************************************************/



     /* get next order number*/

  call "IO0510" ("SU", SQLCA, OP7REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   && OP7REC.OP7CUOIN > 0)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VNXTID01";
    TA1REC.TA1TBLKE = OP7REC.OP7GROUP;
    TA1REC.TA1LOCAT[3] = "OP0DS61";
    TA1REC.TA1LOCAT[4] = "IO0510";
    XSOPS02();
  end



   /* **********************************************************/
end // end OP0DS61

// write order hdr rec for draw
Function OP0DS62()



       /* *****************************************************/
       /* * this statement group write the order header      **/
       /* * record for the draw order                        **/
       /* *****************************************************/


     /* write the order header record*/

  call "IO0430" ("A ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    OPWREC.OP1GROUP = OP1REC.OP1GROUP; /* update global ws!!!*/
    COMMAREA.CA-USER-WORKAREA-4K = OPWREC.OPWSGRP;
                                                      /* update commarea!!!*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORHDR01";
    TA1REC.TA1TBLKE = OP1REC.OP1KEY;
    TA1REC.TA1LOCAT[3] = "OP0DS62";
    TA1REC.TA1LOCAT[4] = "IO0430";
    XSOPS02();
  end



   /* ************************************************************/
end // end OP0DS62

// write spcl instructions/labels
Function OP0DS65()



       /* ****************************************************/
       /* * this statement group reads special instructions **/
       /* * and labels from the bulk order and write them   **/
       /* * to the dorder.vtext001 for the draw order       **/
       /* ****************************************************/


  OP0DW01.OP0DWLC = 0; /* init label count*/

  OP4REC.OP4KEY = OP0DW01.OP0DWBLK; /* load key*/

  call "IO0470" ("SS", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OPAREC.OPASUB1 = 0; /* init inst seq counter*/
    OPAREC.OPASUB2 = 0; /* init label seq counter*/
    while (SQLCA.VAGen_SQLCODE == 0)
      OP4REC.OP4KEY = OP0DW01.OP0DWBLK;
      call "IO0470" ("SN", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        OP0DS66(); /* write inst/label*/
      else
        if (SQLCA.VAGen_SQLCODE == 100)
           /* next sentence*/
        else
          TA1REC.TA1DBASE = "DORDER";
          TA1REC.TA1TBLVU = "VTEXT001";
          TA1REC.TA1TBLKE = OP4REC.OP4KEY;
          TA1REC.TA1LOCAT[3] = "OP0DS65";
          TA1REC.TA1LOCAT[4] = "IO0470";
          XSOPS02();
        end
      end
    end
  end



   /* ********************************************************/
end // end OP0DS65

// write inst/labels to vtext001
Function OP0DS66()



       /* ****************************************************/
       /* * this statement group writes special instructions**/
       /* * and labels to the vtext001 table                **/
       /* ****************************************************/



  if (OP4REC.OP4TRTYP == "I") /* it is an instruction*/
    OPAREC.OPASUB1 = OPAREC.OPASUB1 + 1; /* increment inst seq #*/
    OP4REC.OP4TRSEQ = OPAREC.OPASUB1; /* move seq counter*/
  else
    if (OP4REC.OP4TRTYP == "L") /* it is a label*/
      OPAREC.OPASUB2 = OPAREC.OPASUB2 + 1; /* increment label seq #*/
      OP0DW01.OP0DWLC = OP0DW01.OP0DWLC + 1; /* increment label count*/
      OP4REC.OP4TRSEQ = OPAREC.OPASUB2; /* move seq counter*/
    else /* must be a comment record -- skip it*/
      return;
    end
  end

  if (OPAREC.OPASUB2 == 1) /* if first label*/
    OP0DW01.OP0DWLS1 = OPASUB2; /* load w.s. in case of later update*/
  else
    if (OPAREC.OPASUB2 == 2) /* if second label*/
      OP0DW01.OP0DWLS2 = OPASUB2;
                                   /* load w.s. in case of later update*/
    end
  end

       /* set up label record*/

  OP4REC.OP1PARTN = OP1REC.OP1PARTN;
  OP4REC.OP1CUOID = OP1REC.OP1CUOID;
  OP4REC.OP1NORID = 0; /* nike order must be zeroed out!*/
  OP4REC.ZZZCHGDT = OP1REC.ZZZCHGDT; /* date same as header*/
  OP4REC.ZZZCHGTM = OP1REC.ZZZCHGTM; /* time same as header*/
  OP4REC.ZZZCHGCT = 0;

  TA1REC.TA1TBLKE = " "; /* clear key*/
  OP0DW01.OP0DWK1 = OP1REC.OP1PARTN; /* part char*/
  OP0DW01.OP0DWK2 = OP1REC.OP1CUOID; /* ord nbr*/
  OP0DW01.OP0DWK3 = OP4REC.OP1NORID; /* sub ord*/
  OP0DW01.OP0DWK4 = OP4REC.OP4TRTYP; /* tran type*/
  OP0DW01.OP0DWK5 = OP4REC.OP4TRSEQ; /* seq #*/
  OP0DW01.OP0DWK6 = " ADD"; /* action*/
  OP0DW01.OP0DWK7 = OP4REC.OP4TXT; /* some of text*/

  call "IO0470" ("A ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VTEXT001";
    TA1REC.TA1TBLKE = OP0DW01.OP0DWKEY;
    TA1REC.TA1LOCAT[3] = "OP0DS66";
    TA1REC.TA1LOCAT[4] = "IO0470";
    XSOPS02();
  end



   /* ********************************************************/
end // end OP0DS66

// update/write labels for draw
Function OP0DS70()



       /* ******************************************************/
       /* * this statement group check to see if labels on    **/
       /* * the screen were entered or updated then it will   **/
       /* * write new labels to the vtext001 table or update  **/
       /* * the existing ones                                 **/
       /* ******************************************************/



  if (OP0DM001.OP0DMLB1 is modified)
    OP0DW01.OP0DWLBL = OP0DM001.OP0DMLB1; /* save label*/
    if (OP0DW01.OP0DWLS1 > 0) /* label exists*/
      OP0DW01.OP0DWLSQ = OP0DW01.OP0DWLS1; /* save seq number*/
      OP0DS71(); /* update label*/
    else
      OP0DW01.OP0DWLS1 = OP0DWLS1 + 1;
      OP0DW01.OP0DWLSQ = OP0DW01.OP0DWLS1;
      OP0DS72(); /* write new label*/
    end
  end



  if (OP0DM001.OP0DMLB2 is modified)
    OP0DW01.OP0DWLBL = OP0DM001.OP0DMLB2; /* save label*/
    if (OP0DW01.OP0DWLS2 > 0) /* label exists*/
      OP0DW01.OP0DWLSQ = OP0DW01.OP0DWLS2; /* save seq number*/
      OP0DS71(); /* update label*/
    else
      OP0DW01.OP0DWLS2 = OP0DWLS1 + 1; /* new label*/
      OP0DW01.OP0DWLSQ = OP0DW01.OP0DWLS2; /* save seq number*/
      OP0DS72(); /* write new label*/
    end
  end


  if (OP0DW01.OP0DWLC > 0) /* there are labels for draw ord*/
    OP1REC.OP1SPLBF = "Y"; /* set flag*/
  else
    OP1REC.OP1SPLBF = "N";
  end



   /* ********************************************************/
end // end OP0DS70

// update/delete label
Function OP0DS71()



       /* ********************************************************/
       /* * this statement group updates or deletes an existing **/
       /* * label on dorder.vtext001                            **/
       /* ********************************************************/

              /* start building key in case of abort*/
  TA1REC.TA1TBLKE = " "; /* clear key*/
  OP0DW01.OP0DWK1 = OP1REC.OP1PARTN; /* load partition to key*/
  OP0DW01.OP0DWK2 = OP1REC.OP1CUOID; /* load order nbr*/
  OP0DW01.OP0DWK3 = OP1REC.OP1NORID; /* load sub ord nbr*/


       /* load keys*/

  OP4REC.OP4KEY = OP1REC.OP1KEY;
  OP4REC.OP4TRTYP = "L";
  OP4REC.OP4TRSEQ = OP0DW01.OP0DWLSQ;


  if (OP0DW01.OP0DWLBL == " ") /* label was deleted from the screen*/
    call "IO0470" ("D ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      OP0DW01.OP0DWLC = OP0DW01.OP0DWLC - 1; /* label was deleted*/
      return; /* go back*/
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VTEXT001";
      OP0DW01.OP0DWK4 = OP4REC.OP4TRTYP; /* load tran type*/
      OP0DW01.OP0DWK5 = OP4REC.OP4TRSEQ; /* load seq #*/
      OP0DW01.OP0DWK6 = "DELETE"; /* load action*/
      TA1TBLKE = OP0DW01.OP0DWKEY;
      TA1REC.TA1LOCAT[3] = "OP0DS71";
      TA1REC.TA1LOCAT[4] = "IO0470";
      XSOPS02();
    end
  end



  if (OP0DW01.OP0DWLBL > " ") /* label was modified*/
    call "IO0470" ("S ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes}; /* read label first*/
    if (SQLCA.VAGen_SQLCODE == 0) /* ;  label found*/
      OP4REC.OP4TXT = OP0DW01.OP0DWLBL; /* move updated label*/
      OP4REC.OP4TXTOF = "Y"; /* override flg*/
      call "IO0470" ("U ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
         /* label was updated*/
      else
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VTEXT001";
        OP0DW01.OP0DWK4 = OP4REC.OP4TRTYP; /* load tran type*/
        OP0DW01.OP0DWK5 = OP4REC.OP4TRSEQ; /* load seq #*/
        OP0DW01.OP0DWK6 = "UPDATE"; /* load action*/
        OP0DW01.OP0DWK7 = OP0DW01.OP0DWLBL; /* load some of the text*/
        TA1TBLKE = OP0DW01.OP0DWKEY;
        TA1REC.TA1LOCAT[3] = "OP0DS71";
        TA1REC.TA1LOCAT[4] = "IO0470";
        XSOPS02();
      end
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VTEXT001";
      OP0DW01.OP0DWK4 = OP4REC.OP4TRTYP; /* load tran type*/
      OP0DW01.OP0DWK5 = OP4REC.OP4TRSEQ; /* load seq #*/
      OP0DW01.OP0DWK6 = "SELECT"; /* load action*/
      OP0DW01.OP0DWK7 = OP0DW01.OP0DWLBL; /* load some of the text*/
      TA1TBLKE = OP0DW01.OP0DWKEY;
      TA1REC.TA1LOCAT[3] = "OP0DS71";
      TA1REC.TA1LOCAT[4] = "IO0470";
      XSOPS02();
    end
  end



   /* ********************************************************/
end // end OP0DS71

// write new label
Function OP0DS72()



       /* ********************************************************/
       /* * this statement group write new label to the vtext001**/
       /* * table                                               **/
       /* ********************************************************/


              /* start building key in case of abort*/
  TA1REC.TA1TBLKE = " "; /* clear key*/
  OP0DW01.OP0DWK1 = OP1REC.OP1PARTN; /* load partition to key*/
  OP0DW01.OP0DWK2 = OP1REC.OP1CUOID; /* load order nbr*/
  OP0DW01.OP0DWK3 = OP1REC.OP1NORID; /* load sub ord nbr*/


  if (OP0DW01.OP0DWLBL == " ") /* nothing was entered*/
     /* next sentence*/
  else
    OP4REC.OP4KEY = OP1REC.OP1KEY;
    OP4REC.OP1NORID = 0; /* nike order must be zeroed out!*/
    OP4REC.OP4TRTYP = "L";
    OP4REC.OP4TXT = OP0DW01.OP0DWLBL; /* move new label*/
    OP4REC.OP4TRSEQ = OP0DW01.OP0DWLSQ;
    OP4REC.OP4TXTOF = "Y"; /* override flag*/
    OP4REC.ZZZCHGDT = OP1REC.ZZZCHGDT; /* date same as header*/
    OP4REC.ZZZCHGTM = OP1REC.ZZZCHGTM; /* time same as header*/
    OP4REC.ZZZCHGCT = 0;

    call "IO0470" ("A ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
      OP0DW01.OP0DWLC = OP0DW01.OP0DWLC + 1;
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VTEXT001";
      OP0DW01.OP0DWK4 = OP4REC.OP4TRTYP; /* load tran type*/
      OP0DW01.OP0DWK5 = OP4REC.OP4TRSEQ; /* load seq #*/
      OP0DW01.OP0DWK6 = "ADD"; /* load action*/
      OP0DW01.OP0DWK7 = OP0DW01.OP0DWLBL; /* load some of the text*/
      TA1TBLKE = OP0DW01.OP0DWKEY;
      TA1REC.TA1LOCAT[3] = "OP0DS72";
      TA1REC.TA1LOCAT[4] = "IO0470";
      XSOPS02();
    end
  end



   /* ********************************************************/
end // end OP0DS72

// edit base order type
Function OP0DS73()
   /* *********************************************/
   /* this statement group validates the base    **/
   /* order type code and if valid, determines   **/
   /* the order type code.                       **/
   /* *********************************************/


  if (OP0DM001.XOBCD == " ")
    converseLib.validationFailed(017); /* order type is not valid*/
    OP0DM001.XOBABRV = " "; /* clear ord type abrv*/
    set OP0DM001.XOBCD cursor, modified, bold;
    OPAREC.OPAERR = "Y";
  else
    if (OP0DM001.XOBCD in XOBTBL.XOBCD /* valid code?*/
     && XOBTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active code?*/
      OP0DM001.XOBABRV = XOBTBL.XOBDESC[sysVar.arrayIndex];
      OP0DW01.OP0DW-DRAW-XOB = OP0DM001.XOBCD;
      OP0DW01.OP0DW-BULK-XOB = OP1REC.XOBCD;
      if (OP0DW01.OP0DW-DRAW-XOB1 == "F") /* Futures XOB on draw*/
        if (OP0DW01.OP0DW-BULK-XOB1 == "P") /* Bulk is prop*/
          set OP0DM001.XOBCD cursor, modified, bold;
          converseLib.validationFailed(919); /* Can't draw Futures from*/
          OPAREC.OPAERR = "Y"; /* prop bulk*/
        else
          OP0DS74(); /* Find XOT for XOB using XVO*/
        end
      else
        OP0DS74(); /* Find XOT for XOB using XVO*/
      end
    else
      converseLib.validationFailed(017); /* order type is not valid*/
      OP0DM001.XOBABRV = " "; /* clear ord type abrv*/
      set OP0DM001.XOBCD cursor, modified, bold;
      OPAREC.OPAERR = "Y"; /* set error flag*/
    end
  end





end // end OP0DS73

// get system ord type via xvotbl
Function OP0DS74()


   /* ----------------------------------------------------------*/
   /* equipment check*/
   /* ----------------------------------------------------------*/

   /* OP0DS-CHECK-EQMT;                         /* call to eu0100*/
   /* IF WEU0100.WEU0100-EQUIP-PROD-FL = 'Y';*/
     /* MOVE WEU0100.XPCCD*/
       /* TO OPWREC01.XPCCK;*/
   /* ELSE;*/
     /* MOVE '  ' TO OPWREC01.XPCCK;*/
   /* END;*/


  OP0DW01.OP0DWLDF = "N"; /* reset flag*/
  OP1REC.XOTCD = " ";
  sysVar.arrayIndex = 1;

  OPWREC01.XPCCK = OPWREC01.XPCCD;


   /* **********TCS INCLUDE BEGIN***********/

  set VXVO0001 empty;
  set SQLCA empty;
  VXVO0001.XOBCD = OP0DM001.XOBCD; /* valid base order type*/
  VXVO0001.XGPCD = OP1REC.XGPCD; /* valid gpc*/
  VXVO0001.XSOCD = COMMAREA.XSOCD; /* valid salesoffice code*/
  VXVO0001.XDVCD = OP1REC.XDVCD; /* valid division code*/
  VXVO0001.XBCCD = OP1REC.XBCCD; /* valid brand code*/
  VXVO0001.XPC-PROD-CAT-CD = OPWREC01.XPCCK; /* valid category*/
  VXVO0001.XXXSTAT = "A"; /* active status code*/

  call "VXVO0001" ("S4", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* open cursor to scan*/
                                                /* using all the 7 fields.*/
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VXVO0001";
    TA1REC.TA1TBLKE = VXVO0001-KEY;
    TA1REC.TA1LOCAT[3] = "OP0DS74";
    TA1REC.TA1LOCAT[4] = "VXVO0001";
    XSOPS02();
  else
    call "VXVO0001" ("N4", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* get first occurence*/

    if (SQLCA.VAGen_SQLCODE == 0)
      OP1REC.XOTCD = VXVO0001.XOTCD;
      set OP0DM001.XOBCD normal;
      OP0DW01.OP0DWLDF = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        /* next sentence*/
      else
        TA1REC.TA1DBASE = "DCORP";
        TA1REC.TA1TBLVU = "VXVO0001";
        TA1REC.TA1TBLKE = VXVO0001-KEY;
        TA1REC.TA1LOCAT[3] = "OP0DS74";
        TA1REC.TA1LOCAT[4] = "VXVO0001";
        XSOPS02();
      end
    end
  end

  call "VXVO0001" ("C4", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/

  if (SQLCA.VAGen_SQLCODE != 0) /* if not a good cursor close*/
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VXVO0001";
    TA1REC.TA1TBLKE = VXVO0001-KEY;
    TA1REC.TA1LOCAT[3] = "OP0DS74";
    TA1REC.TA1LOCAT[4] = "VXVO0001";
    XSOPS02();
  end

   /* **********TCS INCLUDE END***********/

  if (OP0DW01.OP0DWLDF == "N") /* if nothing was found to load in here*/
    converseLib.validationFailed(923); /* prod cat/ot not valid for brand, etc*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0DM001.XOBCD cursor, modified, bold;
  end



end // end OP0DS74

// select special instructions
Function OP0DS75()




   /* *************************************************************/
   /* this statement group selects special instructions*/
   /* from dcust.vinst001.  if special instructions are present*/
   /* for this customer the xndtbl is checked for specific sales*/
   /* offices. they are identified by the xndinsofl = 'y'*/

   /* these special instructions are display only.*/
   /* ************************************************************/

  set KUQREC empty;

  set OP0DM001.OP0DMLN1 initialAttributes;
  OP0DM001.OP0DMLN1 = " ";
  set OP0DM001.OP0DMLN2 initialAttributes;
  OP0DM001.OP0DMLN2 = " ";
  set OP0DM001.OP0DMLN3 initialAttributes;
  OP0DM001.OP0DMLN3 = " ";
  set OP0DM001.OP0DMLN4 initialAttributes;
  OP0DM001.OP0DMLN4 = " ";
  set OP0DM001.OP0DMLN5 initialAttributes;
  OP0DM001.OP0DMLN5 = " ";

  OP0DW02.OP0DWSUB = 1;
  while (OP0DW02.OP0DWSUB <= 5)
    OP0DW02.OP0DWSDP[OP0DWSUB] = " "; /* dept si*/
    OP0DW02.OP0DWSSI[OP0DWSUB] = " "; /* spec ins*/
    OP0DW02.OP0DWSUB = OP0DW02.OP0DWSUB + 1;
  end

  KUQREC.KUCCOID = OP0DM001.OP0DMCCO; /* company id*/
  KUQREC.KUMSTRID = OP0DM001.OP0DMSTR; /* store id*/
  KUQREC.XNXCD = OP0DM001.OP0DMDEP; /* nike dept code*/
  KUQREC.XGPCD = OP1REC.XGPCD; /* gpc*/


  call "IO0300" ("SS", SQLCA, KUQREC) {isNoRefresh = yes, isExternal = yes}; /* call dcust.vinst001*/

  if (SQLCA.VAGen_SQLCODE == 0)
    OP0DS76(); /* select next*/
  else
    TA1REC.TA1DBASE = "DCUST"; /* data base name*/
    TA1REC.TA1TBLVU = "VINST001"; /* table view*/
    TA1REC.TA1LOCAT[1] = "OP0DS75"; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0300"; /* i/o move name*/
    XSOPS02();
  end

  call "IO0300" ("CS", SQLCA, KUQREC) {isNoRefresh = yes, isExternal = yes}; /* close set*/
end // end OP0DS75

// call xndtbl (nike department)
Function OP0DS76()



   /* *************************************************************/
    /* this statement group loads the special information,*/
    /* if any, to op0dm001.*/
    /* note:  the users decide which sales offices will review*/
           /* special instruction.  xndtbl.xndsofl flag get*/
           /* turned on for  those specific offices.*/
   /* *************************************************************/

  OP0DW02.OP0DWSUB = 1;

  while (OP0DW02.OP0DWSUB <= 5
   && SQLCA.VAGen_SQLCODE != 100)
    call "IO0300" ("SN", SQLCA, KUQREC) {isNoRefresh = yes, isExternal = yes}; /* call dcust.vinst001*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (KUQREC.XNDCD in XNDTBL.XNDCD
       && XNDTBL.XNDSOFL[sysVar.arrayIndex] == "Y") /* sales office flag*/
        OP0DW02.OP0DWSDP[OP0DWSUB] = KUQREC.XNDCD; /* dept si*/
        OP0DW02.OP0DWSSI[OP0DWSUB] = KUQREC.KUQSINST; /* spec ins*/
        OP0DW02.OP0DWSUB = OP0DW02.OP0DWSUB + 1;
      end
    else
      if (SQLCA.VAGen_SQLCODE < 0)
        TA1REC.TA1DBASE = "DCUST"; /* data base name*/
        TA1REC.TA1TBLVU = "VINST001"; /* table view*/
        TA1REC.TA1LOCAT[1] = "OP0DS76"; /* statement group*/
        TA1REC.TA1LOCAT[4] = "IO0300"; /* i/o move name*/
        XSOPS02();
      end
    end
  end


  if (OP0DW02.OP0DWSID[1] > " ")
    OP0DM001.OP0DMLN1 = OP0DW02.OP0DWSID[1];
    OP0DW02.OP0DWSIF = "Y";
  else
    OP0DM001.OP0DMLN1 = " ";
    set OP0DM001.OP0DMLN1 skip, invisible;
  end

  if (OP0DW02.OP0DWSID[2] > " ")
    OP0DM001.OP0DMLN2 = OP0DW02.OP0DWSID[2];
    OP0DW02.OP0DWSIF = "Y";
  else
    OP0DM001.OP0DMLN2 = " ";
    set OP0DM001.OP0DMLN2 skip, invisible;
  end

  if (OP0DW02.OP0DWSID[3] > " ")
    OP0DM001.OP0DMLN3 = OP0DW02.OP0DWSID[3];
    OP0DW02.OP0DWSIF = "Y";
  else
    OP0DM001.OP0DMLN3 = " ";
    set OP0DM001.OP0DMLN3 skip, invisible;
  end

  if (OP0DW02.OP0DWSID[4] > " ")
    OP0DM001.OP0DMLN4 = OP0DW02.OP0DWSID[4];
    OP0DW02.OP0DWSIF = "Y";
  else
    OP0DM001.OP0DMLN4 = " ";
    set OP0DM001.OP0DMLN4 skip, invisible;
  end

  if (OP0DW02.OP0DWSID[5] > " ")
    OP0DM001.OP0DMLN5 = OP0DW02.OP0DWSID[5];
    OP0DW02.OP0DWSIF = "Y";
  else
    OP0DM001.OP0DMLN5 = " ";
    set OP0DM001.OP0DMLN5 skip, invisible;
  end
  OP0DM001.OP0DMLN6 = " ";
  set OP0DM001.OP0DMLN5 skip, invisible;



end // end OP0DS76

// edit/save comp number
Function OP0DS80()
   /* This statement group controls the edits for the comp*/
   /* number field (also known as internal customer number).*/
   /* The field is saved to OP1REC if it passes all the edits.*/


   /* Comp number is required for NIL sample orders*/

  if (OP0DM001.OP0DMCMP == 0 
   && COMMAREA.XDVCD == "02" /* International division*/
   && OP0DM001.XOBCD == "S1") /* Sample order type*/
    converseLib.validationFailed(541); /* Order requires comp number*/
    OPAREC.OPAERR = "Y"; /* Set error flag*/
    set OP0DM001.OP0DMCMP cursor, modified, bold;
    return;
  end


   /* Get and edit the company record for the comp number.*/
   /* These edits are ignored if there is no comp number.*/

  if (OP0DM001.OP0DMCMP != 0)

     /* Save the company record of the customer for other*/
     /* edits.*/
    OP0DW01.KUCGRP = KUCREC.KUCGRP;


     /* Get the company record for the comp number.*/
    OP0DS81();

    if (SQLCA.VAGen_SQLCODE == 0)

       /* Edit the retreived company record.*/
      OP0DS82();

       /* Return if errors were found.*/

      if (OPAREC.OPAERR == "Y")
        KUCREC.KUCGRP = OP0DW01.KUCGRP; /* Restore company record.*/
        return;
      end

    else
       /* The company record was not found.*/

      converseLib.validationFailed(542); /* Comp number is not found.*/
      OPAREC.OPAERR = "Y"; /* Set error flag*/
      set OP0DM001.OP0DMCMP cursor, modified, bold;
      KUCREC.KUCGRP = OP0DW01.KUCGRP; /* Restore the company rec.*/
      return; /* Get out of comp edits.*/
    end

    KUCREC.KUCGRP = OP0DW01.KUCGRP; /* Restore the company record.*/
  end



    /* For NIL orders,  verify that a comp number can be used*/
    /* for the GPC of the order. This edit is ignored if the*/
    /* comp number is blank.*/

  if (OP0DM001.OP0DMCMP != 0
   && OP1REC.XDVCD == "02")

      /* Save the customer record of the customer for other edits.*/

    OP0DW01.KUNGRP = KUNREC.KUNGRP;

    OP0DS83(); /* Get the customer record for comp #*/

    if (SQLCA.VAGen_SQLCODE == 0)

       /* The customer record for the comp must be active.*/

      if (KUNREC.XXXSTAT != "A")
        converseLib.validationFailed(553); /* GPC invalid for comp #*/
        OPAREC.OPAERR = "Y"; /* Set error flag*/
        set OP0DM001.OP0DMCMP cursor, modified, bold;
        KUNREC.KUNGRP = OP0DW01.KUNGRP; /* Restore customer rec*/
        return;
      end

    else /* Customer rec not fnd*/
      converseLib.validationFailed(553); /* GPC invalid for comp #*/
      OPAREC.OPAERR = "Y"; /* Set error flag*/
      set OP0DM001.OP0DMCMP cursor, modified, bold;
      KUNREC.KUNGRP = OP0DW01.KUNGRP; /* Restore customer rec*/
      return;
    end

    KUNREC.KUNGRP = OP0DW01.KUNGRP; /* Restore customer rec*/
  end



   /* All of the edits have been passed.  Save the comp # in*/
   /* OP1REC and mark the field so edits will be bypassed.*/

  OP1REC.OP1CMPNB = OP0DM001.OP0DMCMP;
  set OP0DM001.OP0DMCMP normal;
end // end OP0DS80

// Get company rec for comp
Function OP0DS81()
   /* Use the comp number as the key.*/

  KUCREC.KUCCOID = OP0DM001.OP0DMCMP;


   /* Get a specific company record.*/

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};


   /* Abend if a DB2 error occured.*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* Next sentence - expected return codes were found.*/

  else
    TA1REC.TA1DBASE = "DCUST   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCMPNY01"; /* Table view*/
    /* MOVE OP0DM001.OP0DMCMP TO OP0DW01.OP0DWK2;  /* Format key*/
    TA1REC.TA1TBLKE = OP0DM001.OP0DMCMP; /* Key value*/
    TA1REC.TA1LOCAT[2] = "OP0DS81 "; /* Statement group*/
    TA1REC.TA1LOCAT[3] = "IO0240  "; /* I/O mod name*/
    TA1REC.TA1LOCAT[4] = "S       "; /* Requested action*/
    XSOPS02(); /* Abend routine*/
  end
end // end OP0DS81

// Company level comp edits
Function OP0DS82()
   /* Comp must be an active company record.*/
   /*  */
  if (KUCREC.XXXSTAT != "A")
    converseLib.validationFailed(544); /* Comp number is inactive.*/
    OPAREC.OPAERR = "Y"; /* Set error flag.*/
    set OP0DM001.OP0DMCMP cursor, modified, bold;
    return; /* Get out of comp edits.*/
  end


   /* Comp must have an account type of in-house.*/

  sysVar.arrayIndex = 1;
  if (KUCREC.XAUCD in XAUTBL.XAUCD from sysVar.arrayIndex)
    if (XAUTBL.XATCD[sysVar.arrayIndex] != "06")
      converseLib.validationFailed(545); /* Invalid comp number.*/
      OPAREC.OPAERR = "Y"; /* Set error flag.*/
      set OP0DM001.OP0DMCMP cursor, modified, bold;
      return; /* Get out of comp edits.*/
    end
  else
     /* Account class was not found in the table.*/

    converseLib.validationFailed(545); /* Invalid comp number.*/
    OPAREC.OPAERR = "Y"; /* Set error flag.*/
    set OP0DM001.OP0DMCMP cursor, modified, bold;
    return; /* Get out of comp edits.*/
  end


   /* NIL sample orders can only use a comp number with an*/
   /* account class of 'NIL samples'*/

  if (OP1REC.XDVCD == "02"
   && OP0DM001.XOBCD == "S1"
   && KUCREC.XAUCD != "61"
   && KUCREC.XAUCD != "67"
   && KUCREC.XAUCD != "94")
    converseLib.validationFailed(548); /* Account class invalid*/
    OPAREC.OPAERR = "Y"; /* Set error flag*/
    set OP0DM001.OP0DMCMP cursor, modified, bold;
    return; /* Get out of comp edits.*/
  end

end // end OP0DS82

// get comp's gpc record
Function OP0DS83()

   /* Load comp number as the key to the customer record.*/
   /*  */
  KUNREC.KUCCOID = OP0DM001.OP0DMCMP; /* Company*/
  KUNREC.KUMSTRID = 0; /* Store*/
  KUNREC.XNXCD = 0; /* Dept*/
  KUNREC.XGPCD = OP1REC.XGPCD; /* GPC*/


   /* Call to get a specific customer record.*/

  call "IO0280" ("S ", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};


   /* Abend if DB2 error occured.*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   ";
    TA1REC.TA1TBLVU = "VCUST001";
    OP0DW01.OP0DWK2 = OP0DM001.OP0DMCMP; /* Format company*/
    OP0DW01.OP0DWK3 = 0; /* Format store*/
    OP0DW01.OP0DWK5 = 0; /* Format dept*/
    OP0DW01.OP0DWK6 = OP1REC.XGPCD; /* Format GPC*/
    TA1REC.TA1TBLKE = OP0DW01.OP0DWKEY; /* Record key*/
    TA1REC.TA1LOCAT[2] = "OP0DS83 ";
    TA1REC.TA1LOCAT[3] = "IO0280  ";
    TA1REC.TA1LOCAT[4] = "S       ";
    XSOPS02();
  end
end // end OP0DS83

// edit/save order class
Function OP0DS84()

      /* *********************************************************/
      /* * this statement group edits the order class field.    **/
      /* *********************************************************/


      /* validate order class*/

  if (OP0DM001.XOCCD == " ") /* null ocde*/
    OP1REC.XOCCD = OP0DM001.XOCCD; /* save code*/
    OP0DM001.XOCABRV = " "; /* clear abrv*/
    OPAREC.XOCPROPF = " "; /* clear at once flag*/
    OPAREC.XOCFUTRF = " "; /* clear futures flag*/
    set OP0DM001.XOCCD normal;
    return; /* get out*/
  end


      /* validate order class*/

  if (OP0DM001.XOCCD in XOCTBL.XOCCD /* valid code?*/
   && XOCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active code?*/
    OP1REC.XOCCD = OP0DM001.XOCCD; /* save code*/
    OP0DM001.XOCABRV = XOCTBL.XOCABRV[sysVar.arrayIndex]; /* save abrv*/
    OPAREC.XOCPROPF = XOCTBL.XOCPROPF[sysVar.arrayIndex]; /* save at once flag*/
    OPAREC.XOCFUTRF = XOCTBL.XOCFUTRF[sysVar.arrayIndex]; /* save futures flag*/
    set OP0DM001.XOCCD normal;
  else
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0DW01.OP0DWOCF = "Y"; /* set error flag*/
    OP0DM001.XOCABRV = " "; /* clear abrv*/
    converseLib.validationFailed(020); /* order class is not valid*/
    set OP0DM001.XOCCD cursor, modified, bold;
    return;
  end


      /* validate order class against division*/

  if (OPAREC.OPAERR == "N") /* error flag not set?*/
    if (XOCTBL.XDVCD[sysVar.arrayIndex] == " " /* no restrictions?*/
     || COMMAREA.XDVCD == XOCTBL.XDVCD[sysVar.arrayIndex]) /* valid match?*/
       /* next sentence*/
    else
      OPAREC.OPAERR = "Y"; /* set error flag*/
      OP0DW01.OP0DWOCF = "Y"; /* set error flag*/
      converseLib.validationFailed(021); /* ord class is not valid for your div*/
      set OP0DM001.XOCCD cursor, modified, bold;
      return;
    end
  end


      /* international airborne edit: if using 'as' order class,*/
      /* base ot must be 's1' and cust sls reg cd must be either*/
      /* 'ao' 'ap' or 'ex'.*/
      /* order class 'au' and 'tr' not allowed in order entry*/

  if (OP1REC.XDVCD == "02") /* international*/
    if (OP0DM001.XOCCD == "AS") /* order class*/
      if (OP0DM001.XOBCD == "S1") /* base order type*/
        OP0DS-GET-SLS-REG(); /* get the sales region code*/
        if (VDSTRB01.ZRGCD == "AO" /* sls reg cd*/
         || VDSTRB01.ZRGCD == "AP" 
         || VDSTRB01.ZRGCD == "EX")
           /* next sentence*/
        else
          OPAREC.OPAERR = "Y"; /* set error flag*/
          OP0DW01.OP0DWOCF = "Y"; /* set error flag*/
          OP0DM001.XOCABRV = " "; /* clear abrv*/
          converseLib.validationFailed(798); /* order class 'as' is not*/
          set OP0DM001.XOCCD cursor, modified, bold; /* valid for cust*/
        end
      else /* if using 'as' order class base ot must be 's1'*/
        OPAREC.OPAERR = "Y"; /* set error flag*/
        OP0DW01.OP0DWOCF = "Y"; /* set error flag*/
        OP0DM001.XOCABRV = " "; /* clear abrv*/
        converseLib.validationFailed(797); /* order type must be 's1' for*/
        set OP0DM001.XOCCD cursor, modified, bold; /* 'as' order class*/
      end
    else
      if (OP0DM001.XOCCD == "AU" /* order class*/
       || OP0DM001.XOCCD == "TR")
        OPAREC.OPAERR = "Y"; /* set error flag*/
        OP0DW01.OP0DWOCF = "Y"; /* set error flag*/
        OP0DM001.XOCABRV = " "; /* clear abrv*/
        converseLib.validationFailed(796); /* order class is not valid*/
        set OP0DM001.XOCCD cursor, modified, bold; /* for order entry*/
      end
    end
  end


      /* if no order class error,*/
      /* then edit order class agains order typ*/

  if (OP0DW01.OP0DWOCF != "Y") /* prev order class error?*/
    OP0DS85(); /* edit order class vs order type*/
  end


      /* if international order and a draw order*/
      /* and trying to enter order class 'in', this is not allowed*/

  if (OP1REC.XDVCD == "02") /* international order*/
    if (OPWREC.OPWFUNC == "4" /* a draw order*/
     && OP0DM001.XOCCD == "IN") /* trying to enter 'international'*/
      converseLib.validationFailed(787); /* order class not allowed for draw*/
      OP0DW01.OP0DWOCF = "Y"; /* set error flag*/
      OPAREC.OPAERR = "Y";
      set OP0DM001.XOCCD cursor, modified, bold;
    end
  end

end // end OP0DS84

// edit order class vs ord type
Function OP0DS85()



      /* *********************************************************/
      /* * this statement group edits the order class field     **/
      /* * against the order type field.                        **/
      /* *********************************************************/



  if (OP1REC.XDVCD == "02") /* if international*/
    if (OP0DM001.XOBCD == "P1" /* and if using 'p1' order type*/
     && OP0DM001.XOCCD == "IN") /* and the order class is 'in'*/
      OPAREC.OPAERR = "Y"; /* set error flag*/
      OP0DW01.OP0DWOCF = "Y"; /* set error flag*/
      converseLib.validationFailed(023); /* order class is not valid for order type*/
      set OP0DM001.XOCCD cursor, modified, bold;
      return;
    end
  end

      /* validate order class against order type.*/
      /* both prop flags must be yes -or- both futures flag must*/
      /* be yes.*/

  if (OPAREC.XOCPROPF == "Y" /* both prop = yes - then ok*/
   && OPAREC.XOTPROPF == "Y")
    return;
  end

  if (OPAREC.XOCFUTRF == "Y" /* both futures = yes - then ok*/
   && OPAREC.XOTFUTRF == "Y")
    return;
  end

  OPAREC.OPAERR = "Y"; /* set error flag*/
  OP0DW01.OP0DWOCF = "Y"; /* set error flag*/
  converseLib.validationFailed(023); /* order class is not valid for order type*/
  set OP0DM001.XOCCD cursor, modified, bold;



   /* *************************************************************/
end // end OP0DS85

// calc warning for po# allochold
Function OP0DSAW()
      /* ******************************************/
   /* For some customers, we required additional information*/
   /* before finalizing an order.  What we require is determined*/
   /* by kucypoft - 00 - nothing is required*/
              /* 01 - customer po number is required*/
              /* 02 - customer po number and hard copy required*/
              /* 03 - customer po number, hard copy and*/
                   /* confirmation required*/
    /* if these requirements are not met, orders are*/
    /* placed on allocation hold (code 04) by OP0J or OM0H.*/
    /* This hold can only be removed in OM0L.*/

    /* most draw orders are evaluated solely on the condition*/
    /* of the draw order header record to determine whether*/
    /* or not they should be placed on allocation hold.*/

   /* However, draw orders type 3/5/8/F  are evaluated on*/
   /* the basis of the bulk header record.*/

   /* this proc will set up a warning message specifying*/
    /* the kind of allocation hold the draw order will be*/
    /* put on.  The message is displayed after a clean edit*/
    /* and forces a reconverse of the screen before transferring*/
    /* out of the program.*/

    /* note that 'at once' orders have different po#*/
    /* requirements.  See OP0CSAH for the complete*/
    /* story.*/
      /* ******************************************/

  OP0DW01.OP0DWARN = 0; /* set off the warning flag*/

  if (OP1REC.XBDCD == "1" /* we will be examining info*/
   || OP1REC.XBDCD == "B" /* stored from the bulk header*/
   || OP1REC.XBDCD == "F")
    if (OP0DW01.XAHCD != "04") /* the bulk po# req's are satisfied*/
      return;
    end
    if (OP0DW01.KUCYPOFT == "00") /* this may be an 8 draw from an*/
      OP0DWARN = 6; /* F draw for a 00 customer, from*/
    end /* B bulk which is on alloc hold*/
    if (OP0DW01.KUCYPOFT == "01") /* po# only required*/
      if (OP0DW01.OP1CUPO == " ") /* and has not been entered*/
        OP0DWARN = 1;
      else /* since po# is present*/
        OP0DWARN = 6; /* the hold just has to be removed*/
      end
    end
    if (OP0DW01.KUCYPOFT == "02") /* po# and hardcopy required*/
      if (OP0DW01.OP1CUPO == " ") /* po# not entered*/
        OP0DWARN = 2;
      else /* since po# is present*/
        OP0DWARN = 6; /* only hardcopy is required*/
      end
    end
    if (OP0DW01.KUCYPOFT == "03") /* po#/hardcopy/confirm required*/
      if (OP0DW01.OP1CUPO == " ") /* po# not entered*/
        OP0DWARN = 3;
      else /* since po# is present*/
        OP0DWARN = 5; /* only hardcopy/confirm required*/
      end
    end

  else /* these draws are evaluated on their own merits*/

    if (KUCREC.KUCYPOFT == "00") /* there are no po# requirements*/
      return;
    end

    if (KUCREC.KUCYPOFT == "01") /* po# only is required*/
      if (OP1REC.OP1CUPO == " ") /* but has not been entered*/
        OP0DW01.OP0DWARN = 1;
      else
        return; /* the requirements are satisfied*/
      end
    end
    if (KUCREC.KUCYPOFT == "02") /* po#/hardcopy is required*/
      if (OP1REC.OP1CUPO == " ") /* po # not entered*/
        OP0DW01.OP0DWARN = 2;
      else
        OP0DW01.OP0DWARN = 4; /* hard copy is required*/
      end
    end
    if (KUCREC.KUCYPOFT == "03") /* po#/hardcopy/confirm required*/
      if (OP1REC.OP1CUPO == " ") /* po # not entered*/
        OP0DW01.OP0DWARN = 3;
      else
        OP0DW01.OP0DWARN = 5; /* hardcopy/confirm required*/
      end
    end
  end
end // end OP0DSAW

// Edit legal entity
Function OP0DSLE()
   /* -----------------------------------------------------------*/
   /* Several brands can belong to a legal entity.  Side 1 and*/
   /* I.E. are both in the Side 1 legal entity.  All other*/
   /* brands have their own legal entity.*/
   /* -----------------------------------------------------------*/
  if (OP1REC.XBCCD == "07")
    OP0DW01.XLECD = "05";
  else
    OP0DW01.XLECD = OP1REC.XBCCD;
  end


  if (KUCREC.XLECD != OP0DW01.XLECD)
    converseLib.validationFailed(583); /* Brand not valid for customer*/
    OPAREC.OPAERR = "Y";
    set OP0DM001.OP0DMCCO cursor, modified, bold;
    set OP0DM001.OP0DMSTR modified, bold;
    set OP0DM001.OP0DMDEP modified, bold;
  end
end // end OP0DSLE

//*** RECORD=OP0DW01 ****
// 01/15/90 jwood    renamed op0wdbkp to op0dwbkp
// 05/30/90 BWATSO   Brand code changes.  Added xlecd.
// 03/06/91 swatso   Added OP0DWSGC - special cust group flag
// 05/03/91 bbake2   added op0dwarn - po # warning flag
// 05/20/91 dharri   added op01cmpnb - comp number
// 12/20/93 gcalki   added op0dw-xccidx, op0ds-xcc-stat-found
// 05/05/97 JNAEMU   Added kucgrp to save company record
// ***********************
Record OP0DW01 type basicRecord
  5 OP0DWGRP OP0DWGRP ; 
    10 OP0DWBLK OP0DWBLK ; 
      15 OP0DWBKP OP0DWBKP ; 
      15 OP0DWBID OP0DWBID ; 
      15 OP0DWBNO OP0DWBNO ; 
    10 OP0DWBND OP0DWBND ; 
    10 OP0DWSA1 OP0DWSA1 ; 
    10 OP0DWSA2 OP0DWSA2 ; 
    10 OP0DWLS1 OP0DWLS1 ; 
    10 OP0DWLS2 OP0DWLS2 ; 
    10 OP0DWLSQ OP0DWLSQ ; 
    10 OP0DWLC OP0DWLC ; 
    10 OP0DWLDF OP0DWLDF ; 
    10 OP0DWPOF OP0DWPOF ; 
    10 OP0DWVCS OP0DWVCS ; 
    10 OP0DWSGF OP0DWSGF ; 
    10 OP0DWSER OP0DWSER ; 
    10 OP0DWDER OP0DWDER ; 
    10 OP0DWLBL OP0DWLBL ; 
    10 OP0DWMSG OP0DWMSG ; 
      15 OP0DWZTX OP0DWZTX ; 
      15 OP0DWZZP OP0DWZZP ; 
      15 * char(2) ; 
    10 OP0DWK0I OP0DWK0I ; 
      15 OP0DWCUS OP0DWCUS ; 
        20 OP0DWCUN OP0DWCUN ; 
      15 OP0DWSTO OP0DWSTO ; 
        20 OP0DWSTN OP0DWSTN ; 
      15 OP0DWDPT OP0DWDPT ; 
        20 OP0DWDPN OP0DWDPN ; 
      15 OP0DWZIP OP0DWZIP ; 
    10 OP0DWDTE OP0DWDTE ; 
      15 OP0DWMM OP0DWMM ; 
      15 OP0DWHP1 OP0DWHP1 ; 
      15 OP0DWDD OP0DWDD ; 
      15 OP0DWHP2 OP0DWHP2 ; 
      15 OP0DWYY OP0DWYY ; 
    10 OP0DWFDT OP0DWFDT ; 
      15 OP0DWFMM OP0DWFMM ; 
      15 OP0DWFDD OP0DWFDD ; 
      15 OP0DWFYY OP0DWFYY ; 
    10 OP0DWKEY OP0DWKEY ; 
      15 OP0DWK1 OP0DWK1 ; 
      15 OP0DWK2 OP0DWK2 ; 
      15 OP0DWK3 OP0DWK3 ; 
      15 OP0DWK4 OP0DWK4 ; 
      15 OP0DWK5 OP0DWK5 ; 
      15 OP0DWK6 OP0DWK6 ; 
      15 OP0DWK7 OP0DWK7 ; 
    10 XLECD XLECD ; 
    10 XOPCD XOPCD ; 
    10 OP0DWFTF OP0DWFTF ; 
    10 OP0DWSGC OP0DWSGC ; 
    10 XPACD XPACD ; 
    10 KUFMIXBL KUFMIXBL ; 
    10 KUCUNTCS KUCUNTCS ; 
    10 OP0DWARN OP0DWARN ; 
    10 OP1CUPO OP1CUPO ; 
    10 KUCYPOFT KUCYPOFT ; 
    10 XAHCD XAHCD ; 
    10 OP1CMPNB OP1CMPNB ; 
    10 OP0DWOCF OP0DWOCF ; 
    10 OP0DWCUF OP0DWCUF ; 
    10 OP0DWCUC OP0DWCUC ; 
    10 OP0DW-CUSTERR1 OP0DW-CUSTERR1 ; 
      15 OP0DW-ERR-LIT1 OP0DW-ERR-LIT1 ; 
      15 OP0DW-ERR-SIGN OP0DW-ERR-SIGN ; 
      15 OP0DW-ERR-CODE OP0DW-ERR-CODE ; 
      15 OP0DW-ERR-LIT2 OP0DW-ERR-LIT2 ; 
      15 OP0DW-ERR-TYPE OP0DW-ERR-TYPE ; 
      15 OP0DW-ERR-LIT3 OP0DW-ERR-LIT3 ; 
      15 OP0DW-ERR-NAME OP0DW-ERR-NAME ; 
      15 * char(1) ; 
      15 OP0DW-ERR-VIEW OP0DW-ERR-VIEW ; 
    10 OP0DW-CUSTERR2 OP0DW-CUSTERR2 ; 
      15 OP0DW-ERR-LIT4 OP0DW-ERR-LIT4 ; 
      15 OP0DW-ERR-CUST OP0DW-ERR-CUST ; 
      15 * char(1) ; 
      15 OP0DW-ERR-STOR OP0DW-ERR-STOR ; 
      15 * char(1) ; 
      15 OP0DW-ERR-DEPT OP0DW-ERR-DEPT ; 
      15 * char(1) ; 
      15 OP0DW-ERR-GPC OP0DW-ERR-GPC ; 
    10 * char(10) ; // format error for ku150
      15 OP0DW-XCCIDX OP0DW-XCCIDX ; 
      15 OP0DW-XCC-STAT-FOUND OP0DW-XCC-STAT-FOUND ; 
    10 KUCCOID KUCCOID ; 
    10 SP1ID SP1ID ; 
    10 SP6MDISC SP6MDISC ; 
    10 OP1TIERF OP1TIERF ; 
    10 OP1TLVLN OP1TLVLN ; 
    10 OP1XSOCD OP1XSOCD ; 
    10 OP1TBREP OP1TBREP ; 
    10 * char(1) ; 
    10 OP0DW-DRAW-XOB OP0DW-DRAW-XOB ; 
      15 OP0DW-DRAW-XOB1 OP0DW-DRAW-XOB1 ; 
      15 OP0DW-DRAW-XOB2 OP0DW-DRAW-XOB2 ; 
    10 * char(1) ; 
    10 OP0DW-BULK-XOB OP0DW-BULK-XOB ; 
      15 OP0DW-BULK-XOB1 OP0DW-BULK-XOB1 ; 
      15 OP0DW-BULK-XOB2 OP0DW-BULK-XOB2 ; 
    10 KUCGRP KUCGRP ; 
    10 KUNGRP KUNGRP ; 
end // end OP0DW01

//*** RECORD=OP0DW02 ****
// op0d program misc working storage.
// ************************************************************
// *    m a i n t e n a n c e  l o g
// *
// *  ref #   date    who     desc
// *  ----   -----    ---     ----
// *
// *  000    102296   mvalbu  creation
// ***********************
Record OP0DW02 type basicRecord
  5 OP0DWDET OP0DWDET ; 
    10 OP0DWSUB OP0DWSUB ; 
    10 OP0DWSIF OP0DWSIF ; 
    10 OP0DWSL1 OP0DWSL1 ; 
      15 OP0DWSLT OP0DWSLT ; 
      15 OP0DWSNM OP0DWSNM ; 
      15 OP0DWFL1 OP0DWFL1 ; 
    10 OP0DWSL2 OP0DWSL2 ; 
      15 OP0DWFL2 OP0DWFL2 ; 
      15 OP0DWSAA OP0DWSAA ; 
      15 OP0DWFL3 OP0DWFL3 ; 
    10 OP0DWSL3 OP0DWSL3 ; 
      15 OP0DWFL4 OP0DWFL4 ; 
      15 OP0DWSAB OP0DWSAB ; 
      15 OP0DWFL5 OP0DWFL5 ; 
    10 OP0DWSL4 OP0DWSL4 ; 
      15 OP0DWFL6 OP0DWFL6 ; 
      15 OP0DWSAC OP0DWSAC ; 
      15 OP0DWFL7 OP0DWFL7 ; 
    10 OP0DWSL5 OP0DWSL5 ; 
      15 OP0DWFL8 OP0DWFL8 ; 
      15 OP0DWSCT OP0DWSCT ; 
      15 OP0DWSST OP0DWSST ; 
      15 OP0DWFL9 OP0DWFL9 ; 
      15 OP0DWSZP OP0DWSZP ; 
      15 OP0DWSCN OP0DWSCN ; 
      15 OP0DWSCD OP0DWSCD ; 
    10 OP0DWSIL OP0DWSIL ; 
      15 OP0DWSID OP0DWSID [5] ; 
        20 OP0DWSDP OP0DWSDP ; 
        20 OP0DWSSI OP0DWSSI ; 
    10 OP0DWCGS OP0DWCGS ; 
end // end OP0DW02

// XOB for bulk/draw cross-check
DataItem OP0DW-BULK-XOB char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XOB CHAR1
DataItem OP0DW-BULK-XOB1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XOB CHAR2
DataItem OP0DW-BULK-XOB2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format error for ku1540
DataItem OP0DW-CUSTERR1 char(59)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format error for ku150
DataItem OP0DW-CUSTERR2 char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XOB for bulk/draw cross-check
DataItem OP0DW-DRAW-XOB char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XOB CHAR1
DataItem OP0DW-DRAW-XOB1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XOB CHAR2
DataItem OP0DW-DRAW-XOB2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sql code
DataItem OP0DW-ERR-CODE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error cust
DataItem OP0DW-ERR-CUST num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error department
DataItem OP0DW-ERR-DEPT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error gpc
DataItem OP0DW-ERR-GPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error text1
DataItem OP0DW-ERR-LIT1 char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error text2
DataItem OP0DW-ERR-LIT2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error text3
DataItem OP0DW-ERR-LIT3 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error text4
DataItem OP0DW-ERR-LIT4 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// db2 table
DataItem OP0DW-ERR-NAME char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sql sign
DataItem OP0DW-ERR-SIGN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error store
DataItem OP0DW-ERR-STOR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sql function
DataItem OP0DW-ERR-TYPE char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// db2 view
DataItem OP0DW-ERR-VIEW char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error cust
DataItem OP0DW-XCC-STAT-FOUND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error text4
DataItem OP0DW-XCCIDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po# hold warning flag
DataItem OP0DWARN num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bulk order id
DataItem OP0DWBID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bulk ord-part-char
DataItem OP0DWBKP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bulk order key
DataItem OP0DWBLK char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bulk order need date
DataItem OP0DWBND int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bulk sub-ord id
DataItem OP0DWBNO smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// invalid cogs flg
DataItem OP0DWCGS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu-comp-co-id
DataItem OP0DWCUC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cu-comp-co-id
DataItem OP0DWCUF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ki0i cust company num
DataItem OP0DWCUN num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ki0i customer company
DataItem OP0DWCUS char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format date dd
DataItem OP0DWDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date error flag
DataItem OP0DWDER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// details
DataItem OP0DWDET char(597)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ki0i cust dept num
DataItem OP0DWDPN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ki0i customer dept
DataItem OP0DWDPT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format date mm-dd-yy
DataItem OP0DWDTE char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date dd
DataItem OP0DWFDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format date mmddyy
DataItem OP0DWFDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler 1
DataItem OP0DWFL1 char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler 2
DataItem OP0DWFL2 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler 3
DataItem OP0DWFL3 char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler 4
DataItem OP0DWFL4 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler 5
DataItem OP0DWFL5 char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler6
DataItem OP0DWFL6 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler 7
DataItem OP0DWFL7 char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler 8
DataItem OP0DWFL8 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler 9
DataItem OP0DWFL9 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date mm
DataItem OP0DWFMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time through warning
DataItem OP0DWFTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date yy
DataItem OP0DWFYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem OP0DWGRP char(829)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// value '-'
DataItem OP0DWHP1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// value '-'
DataItem OP0DWHP2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer from ki0i prg
DataItem OP0DWK0I char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// part char
DataItem OP0DWK1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ord nbr
DataItem OP0DWK2 num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sub ord nbr
DataItem OP0DWK3 num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// tran type
DataItem OP0DWK4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// seq nbr
DataItem OP0DWK5 num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// action
DataItem OP0DWK6 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// some of the text line
DataItem OP0DWK7 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key for ta1rec
DataItem OP0DWKEY char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work label
DataItem OP0DWLBL char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// label count
DataItem OP0DWLC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// lead day flag
DataItem OP0DWLDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// label 1 seq number
DataItem OP0DWLS1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// label 2 seq number
DataItem OP0DWLS2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work label seq number
DataItem OP0DWLSQ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// format date mm
DataItem OP0DWMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work message area
DataItem OP0DWMSG char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu-comp-co-id
DataItem OP0DWOCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po required flag
DataItem OP0DWPOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bulk dont-ship-after-dt
DataItem OP0DWSA1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bulk dont-ship-after dt
DataItem OP0DWSA2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SHIP-TO ADDR LINE 1
DataItem OP0DWSAA char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ship-to addr line 2
DataItem OP0DWSAB char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ship-to addr line 3
DataItem OP0DWSAC char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ship-to country description
DataItem OP0DWSCD char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ship-to country
DataItem OP0DWSCN char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SHIP-TO CITY
DataItem OP0DWSCT char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dept for special instr
DataItem OP0DWSDP char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// spec cust grp error flag
DataItem OP0DWSER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special customer group flag
DataItem OP0DWSGC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special cust group flag
DataItem OP0DWSGF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special instr occurs 5 times
DataItem OP0DWSID char(56)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// spec instr flag
DataItem OP0DWSIF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special instr group
DataItem OP0DWSIL char(280)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line 1 for ship-to
DataItem OP0DWSL1 char(56)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line 2 for ship-to
DataItem OP0DWSL2 char(64)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line 3 for ship-to
DataItem OP0DWSL3 char(64)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line 4 for ship-to
DataItem OP0DWSL4 char(64)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line 5 for ship-to
DataItem OP0DWSL5 char(66)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ship-to literal
DataItem OP0DWSLT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ship-to name
DataItem OP0DWSNM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special instr
DataItem OP0DWSSI char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ship-to state
DataItem OP0DWSST char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ki0i cust store num
DataItem OP0DWSTN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ki0i customer store
DataItem OP0DWSTO char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sub
DataItem OP0DWSUB num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship-to zip
DataItem OP0DWSZP char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer valid flag
DataItem OP0DWVCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format date yy
DataItem OP0DWYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ki0i cust zip code
DataItem OP0DWZIP char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// text of zip code msg
DataItem OP0DWZTX char(37)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// zip code
DataItem OP0DWZZP char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OP_TIER_LVL_NBR
DataItem OP1XSOCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

