package op0j;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ko.common.*;
import ku.common.*;
import ob.common.*;
import oi.common.*;
import op.common.*;
import os.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=OP0J ****
// nike order entry - allocation parameters
// 
// overview: display and allow override to allocation parms
// 
// date created: 03/03/86
//       author: steve noble
// 
// maintenance history:
// 
//     note!!!!!!!! if a group move is done from op1rec to
//     ophrec, you must do an individual move of the ship
//     group addr id field afterwards.  each record  has a
//     different name for the field.  the group move works
//     like a 'move corresponding' and since there's no name
//     match for this field, the receiving field ends up
//     empty.  see 5/25/89 maint notes.
// 
//  ** DATABASE CHANGES **
//     PLEASE READ THIS!!!!!
//     NOTE!!!: Concerning database updates, if a change is
//              made to opwrec that will cause the record size
//              to change in any way, then op0jw04 record size
//              will need to be changed as well!  OPWREC group
//              level exists in OP0JW04 record.
// 
//     date     by whom     overview of changes made
//   --------  ----------  ------------------------------------
//   08-28-86   jvande      when checked disc min %, used order
//                          value field when checking units for
//                          min quantity ordered.
//   09-26-86  tmai         bulk/draw orders project --
//   10-30-86  tmai         on-line allocation
//   03-10-87  jvande       chaNGED so won't reset sdt on bulk
//                          header in s07.
//   03/17/87  jvande       put more diagnostics in s18 for
//                          tracing why blows down so often.
//   03/18/87  jvande       was not time/date stamping inv aud
//                          correctly - s18,001,w01.
//   03/18/87  craine       fix bug - program abended when an
//                          order containing an in-line product
//                          was rejected - bug in season code
//                          logic in op0js18.
//   04/03/87  craine       fix bug - added logic to read style
//                          record to get lifecycle code for
//                          season code check in op0js18. added
//                          sgrp op0jsgl and xlccd to op0jw01
//   04/13/87  jvande       added code to set ord stat by reads
//                          of items for cust draws(s21,s20).
//                          also discontinued use of opwopqtf
//                          and opwrsqtf - tear out of op0i at
//                          some later time.
//   07/22/87  obecke       added logic to create header and
//                          text records used by picking
//                          ophrec & opgrec.  s2s,s2t,s3a,s3b.
//   09/09/87  tfox         added diags to op0js2x. seems to be
//                          getting fatal return from cc1070???
//   09/30/87  tfox         turned on pick calls. hrd cd for
//                          whs on new pick system.
//   10/29/87  tfox         init exp flg to n on hdr if not whs
//                          4 or 32 in s2r. edit write expedite
//                          record for wh 4 & 32 only s3c.
//   11/2/87   jvande       delete oppki when reject order.
//   11/9/87   tfox         chg code in s2i,s2k,s2l,s2m,s2n,s2o
//                          to delete in process records after
//                          after credit check and at same time
//                          as ip header rec is deleted
//  11/11/87 tfox           took out smtgrp s2j. chg s2k and
//                          s2o to handle abend.
//  11/25/87 jvande         hooked up whs 02 for picking.
//  12/04/87 jvande         hooked up whs 07 for picking.
//  01/06/88 tfox           hooked up whs 3,7,9 for picking.
//  01/12/88 tfox           comment default rush whs 3,9,12
//                          in s2q,s3a.
//  01/15/88 jhh            add flexible bulk/draw to s20
//  02/03/88 smc            formated display key when db2 abend
//                          and moved opbszrc to sqlca for
//                          display. stmt grp - op0js14.
//  02/10/88 jhh            dealloc using new in9020 - op0js18
//  02/23/88 craine         fix s12 to add back to correct item
//                          when item exists more than once
//                          on the bulk order. fix s07 to only
//                          update the bulk sub order when it
//                          was drawn from (units and value
//                          will change), to stop op1ndraws
//                          from being incremented on all the
//                          bulk sub orders.
//  03/02/88 craine         allow rush pick for whse 2,4,7,9,32
//  03/07/88 craine         don't force rush pick priority if
//                          priority is '10' or '30' - op0js2q
//  03/11/88 gwells         fix bug - onetime billto address
//                          being passed to picking instead of
//                          onetime shipto address because
//                          billto was last record added to
//                          database.  switched logic in s2s
//                          for storing shipto and billto addr.
//                          picking record is now created after
//                          shipto address has been stored.
//  03/30/88 craine         allow reject of all sub orders for
//                          any type of draw. part of allowing
//                          multiple bulk suborders
//  04/14/88 craine         set pk4carsp in ophrec when carrier
//                          code in op1rec not spaces.
//  04/25/88 tfox           added sytle and color to op0jw01.
//                          chg code in s18 to only call in9020
//                          when item is allocated or part allo
//                          chg code in s2q to set expedite flg
//                          yes is w/h 07 pick priority is 20
//                          and more than forty pairs.
//                          chg code in s2q to disallow pick cd
//                          20 for wilsonville.
// 04/29/88 tfox            chg code in s2q to automatically
//                          set expedite flg if more than
//                          39 pair .
// 05/01/88 tfox            added close set to s2q.
// 05/05/88 tfox            chg diag info out of in9020 in s18.
//                          chg code in s2q to check qty even
//                          if no spec inst.
// 06/03/88 tfox            chg ta190 to ta290 in op0js3a for
//                          new work day date routine.
// 06/28/88 gwells          reset ophrec.pk1hldcd and ophrec.
//                          pk1daldt in s3a.
// 08/04/88 dwalke          added/changes code to s2d,s2i,s2p
//                          s2q,s2p to correct trafic alert
//                          problem.
// 10/06/88 dwalke          added call commit upon return from
//                          op0js10 in stgrp op0js2w to help
//                          eliminate -911 deadlocks upon re-
//                          jecting large orders.
// 10/21/88 gwells          rebooking - added code to accomo-
//                            date the new 'rebook draw' type -
//                            001, s2e, s20, s21, s50. s20 &
//                            s21 has comment change only.
//                            new sgrps s52, s53, s54, s55,
//                            s56, s57, s58, s59, s60.
// 11/04/88 JWOOD           NONCSP OPT ADDED TO CALLS
// 12/05/88 obecke          if both don't ship b4 dt & rush
//                          pick prty exist, show msg 435.
//                          if don't ship b4 = today, don't
//                          show. w01,001.  #75.
// 01/05/89 craine          added op0js22 - deallocate smart
//                          reservation draw when rejected in
//                          s14.
// 01/09/89 dwalke          add segmented transaction id to
//                           application.
// 02/16/89 rdavis          don't move rtc msg to opwrec if
//                          ord credit status cd allowed '97'.
//                          s30.
// 03/28/89 gwells          do not default pick priority '20'
//                          for national account (s/o 10).
//                          s2q for bug #163.
// 05/10/89 jbecke          changes to the database:  s18, s22.
//                          fixed xsntbl search in op0js18.
// 05/25/89 obecke          s3a. fix to do individual move
//                          of op1rec.op1shaid to ophrec.
//                          kumshaid (same element, diff names)
//                          after group move from rec to rec
//                          (result of dbase chgs).
// 07/06/89 mbarna          draw from bulks w/ multiple subordr
//                          s12. fix to draw order reject, use
//                          opwrec.opwbnoid for sub-ord.
// 08/14/89 ssteph          added credit life code 12 to s3a.
// 08/16089 obecke          process terms for multi-tiered spgm
//                          orders.  m001,ss1,ss2,ss3,st1,st2,
//                          st3,sz1,s2a,s2e,s2e,w01,001,005.
// 08/24/89 ssteph          initialize credit fields when
//                          creating orders. s2q.
// 09/01/89 craine          remove opfrec code (dorder.vopaud01
// 09/18/89 rcoron          do not show any messages on op0b
//                          if credit status is allowed (97).
//                          (op0js30 & op0js2u).
// 09/18/89 rcoron          do not abort program on v0addr01
//                          delete with sqlcode +100.  post the
//                          error and return. (op0js2x)
// 09/20/89 oricha          nil terms.  skc,stp,st1,st3,st4,
//                          s2a,s2d,w01,005.
// 10-03-89 t fox           add xaucd to oearec.
// 11/02/89 rcoron          colehan initializes subsequent
//                          suborder dont ship before date to
//                          the need date and the allow cancel
//                          flag to 'n'. s2r.
// 11/13/89 craine          db2 chg's in ss3, st2, s18, s22
// 12/04/89 rcoron          modified ss3 to fix zero tier level
//                          bug.
// 12/06/89 rcoron          modified ss3 to fix zero tier level
//                          bug.
// 02/15/90 schase          commented out all executable stmts
//                          in s99.  temp fix to get rid of 1
//                          second delay in -911 retry logic.
//                          bug #295
// 02/28/90 schase          eliminated retry logic for -911
//                          situations.  replaced it with a
//                          call to s70 to post errdiag and
//                          dxfer to itself (strt over frm top)
//                          added: s70, w04 modif:s07, s13, s14
//                          s16, s17, s18, s2a, s2c, s2d, s2k,
//                          s2m, s2n, s2o, s2p, s2r, s2s, s2t,
//                          s2w, s2x, s2y, s22, s3a, s3b, s3c,
//                          s3v, s50, s70, w01, 001. bug #303.
// 03/29/90 schase          fixed error diags. s70  bug #317
// 03/29/90 bwatso          Temporary fix to ensure 2 part
//                          display racks are shipped together
//                          001, s2d, w01  bug #316
//                          Added: S80, S81, S82, S83, S84, S85
// 04/05/90 mgatre          Multiple rep logic
//                          Added: SRR, SRS, op0ewarf (W01)
//                          001, s2d, w01  bug #316
//                          Added: S80, S81, S82, S83, S84, S85
// 04/16/90 schase          bug #325 - fix so don't get data-
//                          base busy msg whenever return from
//                          review mode. av0j001.
// 05/18/90 mgatre          bug #349 - expand rep selection -
//                          logic for effective date > rec date
//                          srr
// 05/30/90 BWATSO          Brand code changes - S2R.
// 06/0690  oricha          w01,s80,s83,s85. add products
//                          248190 & 248191 to 'ship together'
//                          validation.
// 06/20/90 mgatre          bug #350 - NIL apparel orders pick
//                          priority code s/b '30'.... s2q
// 07/10/90 ischmi          add credit status code '95' to hard
//                          coded logic in op0js30. (this code
//                          used to mark nil, cole Haan and
//                          comp orders and only credit check
//                          pgms will set these orders to code
//                          '95').
// 07/13/90 zlefko          default pick priority to '30' for
//                          Herman's for footwear orders out of
//                          Memphis...s2q
// 08/07/90 jwood           changed op0js20,s3a to use xcscd as
//                          a character field
// 08/21/90 schase          For all customer bulk orders, add
//                          a associated bulk order record to
//                          DORDB.VBBULK01 Database Table.
// 09/21/90 craine          commented out the temporary fix to
//                         that ensured that the 2 part display
//                          would ship together. Currently,
//                          customers are ordering replacement
//                          parts for the rack.
// 09/28/90 jloyer bug#384  added taerec to rec list in op0j.
//                          chgd op0js2i to updte dspgm.ortyp01
//                          if its the 1st time a dspgm.ortyp01
//                          is used: see op0js24, s25, s26, w01
// 10/04/90 dviert          removed op9rec from record list -
//                          tag logic no longer necessary.
// 11/06/90 skott           database chgs - xsdcd to pc2inseg,
//                          xsacd to xegcd. s56,s22,s18.
// 11/15/90 scantr          Always get sales agency/rep from
//                          rep table using CU1290.  If not fnd
//                          require it be entered.   Bug #405.
//                          Changed srr, s2d; added srt, s3g.
// 11/26/90 craine          uncommented the temporary fix
//                         that ensured that the 2 part display
//                          would ship together. Added a new
//                          set of products - chg's s83, s85,
//                          s80, s2d, 001 and w01 record.
// 11/30/90 craine          added products 249064 and 248164 to
//                          to 2 product edit.
// 12/13/90                 deleted comments from s3b, s3c, s2r
//                          added logic for whse '51' to s17,
//                          s18, s2q.  log #469.
// 01/14/91 mbarna          bug #468 fix error reporting in srs
// 02/13/91 jloyer          db change: xchcd chgd from numeric
//                          to alphanumeric.  Made appropriate
//                          changes in S2Q, S30, S19.
// 02/26/91 swatso          changed xchcd in s19, s2q, s30 from
//                          ' ' to '00'.
// 02/28/91 tfox            t-shirt changes; op0js12
// 04/10/91 dmeier          comment out default pick priority
//                          to '30' for herman's for footwear
//                          orders out of Memphis...s2q
// 04/15/91 tfox            menu of services - s3a,wrg4,w04.
// 04/25/91 bbake2          added processing to place order
//                          on allocation hold for cust po #.
//                          changes to sah, sbh, st3, s2u, s50,
//                          001.  added table op0jt01 and
//                          item om0jtmsg
// 05/10/91 bbake2          revised cust po# edits.  changes
//                          to map 001, sah, sbh, s2g, table
//                          t01.
// 05/16/91 dharri          log 634 - consumer relations orders
//                          to pic priority of '20' in s2q
// 05/21/91 schase          Log 581 - When the sales agency and
//                          rep are determined, use the current
//                          date as the draw's recieve date
//                          only if the draw is a customer or
//                          T-Shirt draw and the customer is a
//                          military account. (XSGCD='MI').
//                          srs, sru, w01.
// 06/05/91 dharri          Log 612 - double product edit -s80
//                          s83, s85 & op0jw01.
// 06/14/91 jloyer          db2 chgs: changed kucrec.ypocd to
//                          kucrec.kucypoft in SAH, SBH, S2G.
//                          Chgd OP0JW04 to reflect chgd OPWREC
// 07/01/91 tfox            comment out code that prevented
//                          ordering 248320 without 248277.
//                          s80,s83,s85
// 10/08/91 dmeier          db chgs: removed reference to
//                          op1owrdt (op0js56). changes length
//                          of op0jw04 to reflect changes in
//                          opwrec.
// 11/11/91 schase          db chgs: osmrec only. added new
//                          fields. initialized to 0. s23.
// 11/22/91 schase          Added convertions and formats for
//                          new fields added to osmrec. s23,w01
//                          Added: OP0JS-GET-SPEC-CU, OP0JS-
//                          DETER-JCPS statement groups.
// 01/10/92 bbake2          log #721 - added initialization
//                          of oearec prior to 1st converse to
//                          prevent setting message 509 prior
//                          to call of op03 to check terms.
//                          (new release of cics no longer
//                          initializes w/s, and occasionally
//                          there is a 'y' in oeaerr, on entry
//                          to the application)
// 01/10/92 gwells          723 - default allocation hold code
//                                05 from the bulk to the draw
//                                sbh.
// 01/14/92 bbake2          log#730 - added initialization of
//                          op5rec, to prevent garbage from
//                          being written to address area on
//                          voppkh01, when there is no onetime
//                          address. s2k
// 01/21/92 dcaust          log #735 - add code to 001, s80,
//                          s83, s85, w01 for dual products to
//                          be booked together (248496, 248523)
//                          (248516, 248526).
// 01/28/92 schase          Credit checking bulk enhancement.
//                          All orders will be credit checked
//                          now, not just allocated orders.
//                          Bulk orders will be credit checked
//                          for their draw orders. s2g.
// 03/12/92 dcaust          db2 chgs - chg rec length of
//                          op0jw04, w05.
// 05/27/92 DLEGG           Change to OP0JSRS for service req
//                          #778. Use order entered date to
//                          derive agcy/rep for all orders.
//                          Previously used order received
//                          date for all but certain draws for
//                          military customers. See note in
//                          OP0JSRS for details.
// 06/25/92 tfox            chg code in s80, s83, s85 hardcode
//                          248611,248612,248613,248614,24815
//                          must be sold together.
// 07/01/92 schase          Added code to maintain the DORDB.
//                          VBBULK01 Table for auto assigning
//                          Belk bulk orders to Belk draws.
//                          Similar to JC Penney code. s23, w01
//                          op0js-deter-bulks.
// 07/14/92 schase          Added code to determine a draw from
//                          the XBDTBL for adjusting bulk s.o.
//                          when credit checking draw orders.
//                          s2q.
// 07/30/92 bbake2          log#785, added code for comp edits
//                          to required entry of authorization
//                          and business purpose for certain
//                          account classes.
// 10/08/92 dharri          chg code in s80, s83, s85 hardcode
//                          248658 and 248659 must be sold
//                          together.
// 03/02/93 dharri          chg code in s80, s83, s85 hardcode
//                          248704, 248705, 248706 must be sold
//                          together.
// 05/01/93 dlegg           Log #937. NSG changes. Add code for
//                          whse 25. s2q, s17, s18
// 05/17/93 dlegg           Log #937. NSG phase II. Add transfr
//                          to cresting appls (AE08,AE09) for
//                          custom logo orders. Changes: 001,
//                          s50. New: chk-custom, crest-loop,
//                          custom-err, dxfr-ae08, dxfr-ae09,
//                          item-csr-cl, item-csr-op, next-item
//                          prod-lookup.
// 08/03/93 sjob            no log: chg code in s80, s83, s85
//                          hardcode products ordered together:
//                          248723 and 248763.
// 10/04/93 schase          CSP 4.1 Change - Added initialize
//                          for non-existant sizes on bulk ord.
//                          to prevent S0C7's. s13.
// 12/16/93 craine          Log#971 - add validation of musical
//                          size run qty's - see s2d
// 03/01/94 schase          DB2 CHANGES (MARCH): Increased size
//                          of op0jwgp, op0jwgp2, op0jwgp4,
//                          op0jw01, op0jw04, op0jw05.
// 04/01/94 jather          Log #1003 - Renamed causera to
//                          ca-user-workarea-4k so it can hold
//                          opwrec which is now 3072 byte (ALL)
// 06/21/94 schase          Virtual Airspeed Project/Task #15:
//                          Replace access to DORDB.VBBULK01
//                          using OSMREC with access to DORDB.
//                          VBULKS01 using VBULKS01.Changed s2r
//                          Added op0js-insert-bulks, op0js-get
//                          -vdept001.
// 10/20/94 gcalki          db2 changes - add new fields to be
//                          passed to KU1350.
// 12/09/94 gcalki          removed check for groups of prods -
//                          (248704, 248705, 248706) and
//                          (248613, 248614, 248615)s80,s83,s85
// 06/14/95 blake2  op1068  added edits for 3 product pairs
//                          (246203,246204) (246205,246215)
//                          (246233,246234) s80,s83,s85
// 06/19/95 mmcgol          Following changed for Canadian proj
//                          op0js-prod-lookup, op0jsgl, op0jsrs
//                          op0js1c, op0js17, op0js2q and rcd
//                          op0jw01.  op0jms-get-wsy2000 added.
//                          currency code added to screen.
// 04/22/96 nfield          change to use vbulks02 and load
//                          sm_srep_id
// 08/20/96 mvalbu          change to add new nike bulk/draw
//                          code. changed op0j001 and op0jst3.
// 10/22/96 SLARSE          Traffic Alert flag will be set if
//                          OP0G has not been entered.  This is
//                          for Apparel At-Once and Rush only.
//                    Note: I added a byte to OPWREC which
//                          means I had to increase OPJWGR4 of
//                          OP0JW04.
// 11/15/96 wleong          removed musical size run logic
// 07/07/97 wleong          added new msr edits
// 08/01/97 SLARSE  OCD Project - Write to OCD Header, Item &
//                  size tables when adding to like tables in
//                  DORDER database.
// 09/17/97 wleong          added changes to restrict one item
//                          per msr order.  op0js2b.
// 10/28/97 satyam          Added edit in OP0JS2S, before
//                          calling iomod IO0460 to check
//                          whether any rows exist with the
//                          same key values. If it exists then
//                          it skips inserting rows in
//                          dorder.voaddr01 table
// 10/16/97 wleong          regen to pick up opmzrec changes
//                          include cu orders for msr edits.
//                          added call to pk4420 to calculate
//                          carton type code for cu orders, if
//                          cannot get a value, get it from
//                          dcust.vcmpny01.
// 12/22/97 jflor1          added new statement group to update
//                          new table: dorder.vcpbus01 for
//                          authorized by and business purpose
//                          of complimentary order (comp order)
//                          See OP0JS-INS-VCPBUS01 in OP0JS50.
// 04/27/98 ESHANM          Added two new warehouse codes 70
//                          and 72 in the check. Statment group
//                          changed is OP0JS2Q. Look for tcs.
// 01/08/99 svargh          added error message 996.Allows
//                          user to retry when carton not large
//                          enough.
// 05/25/99  rshaik         Commented the stmt group OP0JS-ALT-
//                          CTN-TYPE which gets the alternate
//                          type from VCMPNY01 and changed it
//                          to display relevant messages.
//                          Changes are in OP0JS--GET-CTN-TYPE.
// 07/08/99  OENFIE         <<< Multiple GPC Project changes:>>
//                          Changed OP0JS2Q to include GPC '02'
//                          & WHSE '51' condition in the
//                          setting of the Traffic Alert flag
//                          to 'Y'.  This is to handle equip-
//                          ment products which is GPC '02' &
//                          will now be coming out of WHSE '51'
// 03/15/00 NKATHI               SPAIN TRADE PROJECT
// TT#4654                  Inserted statement group 'OP0J-
//                          SPAIN-CHECK' to validate all
//                          products for spai/cnry compliance.
//                          Added record OP10REC to pass
//                          variables to OP6410(NIKEBOTH).
//                          Modified stmt grps op0j001,op0js2d.
// 04/18/00 SBHARA          Golf Cresting Project
//                          All the sales office 59 orders
//                          will go on allocation hold  '05'.
//          rharat          Stop all ords for whse 27.
//                           added OP0JS-STP-WH27-ORD.
//                          modified : op0js2d.
// 06/01/01 BBAHUL          GPC '01' style '303595' must be
//                          ordered along with '246539'.
// 07/17/01 gsunda          tt#12820
//                          Added pick priority '10' along with
//                          pick priority '20' for warehouse
//                          '07' for creating expedite records.
// 08/07/01 BBAHUL          GPC '01' style '303595' can be
//                          ordered alone, but '246539' must
//                          have '303595' along with it.
// 08/09/01 BBAHUL          GPC '01' style '303603' must be
//                          ordered along with '303604'.
// 07/11/01 kshiva          carton ratio edit for DS Orders.
// TT#12895                 Changes are made to include
//                          Direct ship code to the passing
//                          record used to call the sub program
//                          OP3850. Search for TT#12895 to find
//                          changes.
// 10/02/01 BBAHUL          GPC '01' styles '303595' and
//                          '303611' can be ordered alone,
//                          but '246539' must have '303595' and
//                          '303611' along with it.
// *********************
Program OP0J type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  CC1REC CC1REC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  INZREC INZREC; // record
  KU5REC KU5REC; // record
  KUCREC KUCREC; // record
  KUJREC KUJREC; // record
  KUMREC KUMREC; // record
  KUPREC KUPREC; // record
  OEAREC OEAREC; // record
  OIBREC OIBREC; // record
  OP0JW01 OP0JW01; // record
  OP0JW02 OP0JW02; // record
  OP0JW03 OP0JW03; // record
  OP0JW04 OP0JW04; // record
  OP0JW05 OP0JW05; // record
  OP10REC OP10REC; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  OP3REC OP3REC; // record
  OP4REC OP4REC; // record
  OP5REC OP5REC; // record
  OP6REC OP6REC; // record
  OP8REC OP8REC; // record
  OPABREC OPABREC; // record
  OPAREC OPAREC; // record
  OPBREC OPBREC; // record
  OPGREC OPGREC; // record
  OPHREC OPHREC; // record
  OPIREC OPIREC; // record
  OPMSREC OPMSREC; // record
  OPMZREC OPMZREC; // record
  OPOREC OPOREC; // record
  OPRREC OPRREC; // record
  OPSREC OPSREC; // record
  OPWREC OPWREC; // record
  OSNREC OSNREC; // record
  PK1REC PK1REC; // record
  PWSREC PWSREC; // record
  SP1REC SP1REC; // record
  SP2REC SP2REC; // record
  SP6REC SP6REC; // record
  SQLCA SQLCA; // record
  SY2REC SY2REC; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA9REC TA9REC; // record
  TAEREC TAEREC; // record
  VBULKS02 VBULKS02; // record
  VCPBUS01 VCPBUS01; // record
  VOCHDR01 VOCHDR01; // record
  WOZ2100 WOZ2100; // record
  WSY2000 WSY2000; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use OP0JT01 {deleteAfterUse = yes}; // table
  use XBDTBL {deleteAfterUse = yes}; // table
  use XSNTBL {deleteAfterUse = yes}; // table
  use XOATBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use OP0JM.OP0JM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OP0J001: OP0J001();
    goto OP0J005;
    OP0J005: OP0J005();
     /* *************************************************************/



    goto OP0J005; /* branch to converse*/



  end // end main
end // end OP0J

// program init
Function OP0J001()



     /* **********************************************************/
     /* * this process initializes program work area and clears **/
     /* * the map areas.                                        **/
     /* **********************************************************/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
      /* clear working storage records*/

  set OP0JW01 empty;
  set OP0JW02 empty;
  set OP0JW04 empty;
  set OP3REC empty;
  set SP1REC empty;
  set SP6REC empty;
  set OPHREC empty;
  set OEAREC empty;
   /* TT#4654  SPAIN CHANGES Begin ******************/
  set OP10REC empty; /* Passing record for the NIKE both*/
                                  /* OP6410*/
   /* TT#4654  SPAIN CHANGES End ***************** 03/15/00*/
  set TAEREC empty;

      /* check entry security*/

  XSENTRY();


   /* ****************************************************/
   /* *** set segmented trans id                      ****/
   /* ****************************************************/

  COMMAREA.CAEZSAP = sysVar.transactionID;
  COMMAREA.CAEZSG12 = "OP";
  COMMAREA.CAEZSG4 = "J";
  sysVar.transactionID = COMMAREA.CAEZSAP;

   /* *************************************************************/

      /* retrieve user common area*/



  XSOPS01(); /* check order entry security*/


   /* If coming from one of the apparel buy cresting information*/
   /* applications, the order has already been accepted and committed.*/
   /* Use the alternate commarea format (OPABREC) which contains OPWREC*/
   /* and fields specific to the OP to AE transfer. Go directly to the*/
   /* cresting information loop to capture data for all items on*/
   /* the order. We'll transfer out in that loop, bypassing all*/
   /* other processing in this (OP0J) application.*/

  if (COMMAREA.CAFROMAP == "AE08" /* From appl is customer contact*/
   || COMMAREA.CAFROMAP == "AE09") /* or product cresting instructions*/
    OPABREC.OPAB-COMMON-REC = COMMAREA.CA-USER-WORKAREA-4K;
    OP0JS-CREST-LOOP();
  end


    /* **********************************************************/
    /* *  evaluate commarea keys (cafromap and cacurrap) to    **/
    /* *  determine if this application is being restarted due **/
    /* *  to a possible -911 occurance.  if so, format message **/
    /* *  and map entry fields from what was originally entered**/
    /* **********************************************************/


  if (COMMAREA.CAFROMAP == COMMAREA.CACURRAP) /* restarted itself*/
    if (OPWREC.OPWREVM == 0) /* not coming from review mode*/
      converseLib.validationFailed(10); /* database busy, try again*/
      OP0JW04.OP0JWGR4 = COMMAREA.CA-USER-WORKAREA-4K;
                                   /* frmt group level*/
      OP0JM001.OP0JWOPT = OP0JW04.OP0JWOPT; /* frmt map opt*/
      OP0JM001.OP1CUPO = OP0JW04.OP1CUPO; /* frmt map cust po*/
      OP0JM001.OP0JWLC = OP0JW04.OP0JWLC; /* frmt map line cnt*/
      OP0JM001.OP0JWAU = OP0JW04.OP0JWAU; /* frmt map ovrd auth*/
    end
  end

      /* initialize map*/

  OPWREC.OPWREVM = 0; /* initialize review mode field*/

  OP0JM001.OPMRVN = "04"; /* on-line allocation*/

  OP0JS1A(); /* set up customer #, customer name and*/
                                   /* orderby*/
  OP0JS1B(); /* set up po number, line count, overide*/
                                   /* authorization*/
   /* init w-s for use in op0js2g edit of po number*/
  OP0JW01.OP1CUPO = "0000000000000000000000000";
  OP0JS1C(); /* set up order value, total units,*/
                                   /* sub-orders*/



   /* commented out on 9/21/91 - do no remove, Rose may change her*/
                             /* mind again*/
   /* she changed here mind on 11/26, will edit for product sets*/
    /* 248064 / 248164, 248230 / 248231 and 248000 / 248200,*/
    /* added 1/21/92  248496 / 248523, 248516 / 248526*/
  if (OP1REC.XGPCD == "01")
    OP0JS80(); /* Certain products must be ordered in*/
                                   /* combination*/
                         /* on the same order.*/
  end

       /* check to see if it is a draw order*/

  OP0JW01.OP0JWBDF = "N"; /* init draw order flag*/
  OP0JW01.OP0JWDCF = " "; /* init draw order flag*/
  OP0JW01.OP0JW-BULK-FL = "N"; /* init bulk order flag*/

  if (OP1REC.XBDCD in XBDTBL.XBDCD
   && XBDTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    if (XBDTBL.XBDRWOFL[sysVar.arrayIndex] == "Y")
      OP0JW01.OP0JWBDF = "D"; /* draw order*/
      if (XBDTBL.XBDSETFL[sysVar.arrayIndex] == "Y") /* set-aside draw ord*/
        OP0JW01.OP0JWDCF = "DS"; /* it is set-aside drw ord*/
      else
        if (XBDTBL.XBDXRFCD[sysVar.arrayIndex] == "R") /* reference rebook bulk*/
          OP0JW01.OP0JWDCF = "DR"; /* rebook draw*/
        else
          if (OP1REC.XBDCD == "K")
            OP0JW01.OP0JWDCF = "DN"; /* nike draw*/
          else
            OP0JW01.OP0JWDCF = "DC"; /* it is cust comp drw ord*/
          end
        end
      end
    end
    if (XBDTBL.XBDBKOFL[sysVar.arrayIndex] == "Y") /* bulk order*/
      OP0JW01.OP0JW-BULK-FL = "Y"; /* checked in cust logo process*/
    end
  end

   /* ************************************************************/
       /* if it is a customer or rebook draw order*/
       /* or it's a duped order from op0n, sales*/
       /* program info defaults to the bulk order-----*/
       /* otherwise if sales pgm order and multi-tiered, process.*/
       /* (if spgm terms were flat (only 1 level), then terms*/
       /* were already processed and updated in op0e.  regular*/
       /* order's terms are also taken care of in op0e.)*/
   /* ************************************************************/

  if (OP0JW01.OP0JWDCF == "DC" /* cust comp drw order*/
   || OP0JW01.OP0JWDCF == "DR" /* rebook drw order*/
  )                            /* next sentence--fall out and show min*/
                                   /* disc if one*/
  else
    if (OP1REC.SP1ID > " ") /* sales program present*/
      if (OPWREC.OPWFUNC == "2" /* dup order or*/
       || OPWREC.OPWFUNC == "3" /* dup order header, process terms.*/
       || OP0JW01.OP0JWDCF == "DN") /* nike drw order*/
        converseLib.validationFailed(499); /* terms may be reviewed order maint*/
        OP0JSS1(); /* process min disc*/
      else
        if (OP1REC.XTDPCT > 0 /* terms have already been processed*/
         || OP1REC.XAAPCT > 0 
         || OP1REC.XCPPCT > 0 
         || OP1REC.XPTCD > " ")
           /* next sentence--fall out and show min disc if one*/
        else
          converseLib.validationFailed(499); /* terms may be reviewed order maint*/
          OP0JSS1(); /* process min disc*/
        end
      end
    end
  end

   /* *********************************************/
   /* show spgm minimum discount if one exists*/
   /* *********************************************/
  if (OP1REC.SP6MDISC > 0)
    OP0JM001.SP6MDISC = OP1REC.SP6MDISC; /* display disc %*/
  else
    set OP0JM001.OP0JWSPC skip, invisible;
    set OP0JM001.SP6MDISC skip, invisible;
  end

       /* save current time*/

  OP0JW01.OP0JWTM1 = VGVar.currentFormattedTime;
  OP0JW01.OP0JWHH3 = OP0JW01.OP0JWHH1;
  OP0JW01.OP0JWMM3 = OP0JW01.OP0JWMM1;
  OP0JW01.OP0JWSS3 = OP0JW01.OP0JWSS1;

       /* save the current date*/

  OPAREC.OPACYMD = VGVar.currentShortGregorianDate;
  if (OPAREC.OPACYY > 56)
    OPAREC.OPACCC = 19;
  else
    OPAREC.OPACCC = 20;
  end


       /* set flags*/

  OP0JW01.OP0JWGCK = "Y"; /* good credit check flag*/
  OP0JW01.OP0JWABD = "N"; /* abend flag*/
  OP0JW01.OP0JW435 = "N"; /* warning msg #435 flag*/

   /* --check if this order is going on allocation hold---*/
    /* note that the following message is displayed*/
    /* on the SECOND message line OP0JM001.OPMUMSG.*/
    /* This is the ONLY message to use this line prior to*/
    /* the first converse.*/

  OP0JSKC(); /* get dcust.vcmpny01 kucrec*/
  OP0JSAH(); /* issue warning message if going on*/
                                   /* allocation hold*/

   /* Golf Cresting project Changes begin TT#4073 SBHARA 04/17/00*/
   /* issue warning message for xso 59*/
  OP0JS-SLS59-WARN(); /* Golf Cresting project Changes end   TT#4073 SBHARA 04/17/00*/
       /* get most viable sales rep and agency*/

  if (OP1REC.SM4REPID == 0) /* if not yet updated*/
    OP0JSRR(); /* perform multiple rep lookup*/
  end

  OP0JS-CHECK-AUDIT(); /* determine if authorization is*/
                                   /* required*/
end // end OP0J001

// converse map and edit data
Function OP0J005()



      /* *********************************************************/
      /* * this process converses the map, edits the entered    **/
      /* * fields and if possible, xfer's to the requested      **/
      /* * application                                          **/
      /* *********************************************************/


      /* force segmented converse execution mode*/

  converseVar.segmentedMode = 1; /* force segmented execution mode*/



   /* *************************************************************/
  converse OP0JM001 ;
   /* *************************************************************/



      /* check and process valid aid key requests*/

      /* enter - continue processing*/
        /* pa2 - reject order*/

  if (OEAREC.OEAERR == "Y" /* if terms processing has fatal error*/
   && converseVar.eventKey not pa2)
                                   /* and the order wasn't rejected by user*/
    converseLib.validationFailed(509);
    exit stack;
  end

  OP0JS2A(); /* valid date screen*/


   /* *************************************************************/
end // end OP0J005

// accept the order
Function OP0JS-CHECK-AUDIT()
    /* check to see if authorization and business purpose are required.*/
    /* this basically involves calling op0o to find the account class*/
    /* for the customer or comp number, and determine whether or not*/
    /* this account class requires authorization and business purpose.*/
    /* op0o was already called in one of op0c, op0d, op0n, so we aren't*/
    /* going to be too fussy here about return codes:*/
       /* 00 - authorization and business purpose are required, so we*/
       /* open up the screen for entry of these fields.*/
       /* 01 - not required for this company/comp number*/
       /* 02 - 04 - aren't a problem since we didn't get them in op0c/d/n*/
       /* but we'll put some code in for them anyway*/
       /* 05 & up - db2 error, retn already posted and displayed by op0o*/

  set OPOREC empty;
  OPOREC.XXXUSRID = COMMAREA.CAUSERID;
  OPOREC.KUCCOID = OP1REC.OP1CMPNB;
  if (OP1REC.OP1CMPNB == 0)
    OPOREC.KUCCOID = OP1REC.KUCCOID;
  end

  call "OP0O" (OPOREC) {isNoRefresh = yes};

  if (OPOREC.OPO-RETURN-CD == 0) /* open up map for entry*/
    set OP0JM001.OP0JM-AUTH-LIT skip;
    set OP0JM001.OP0JM-BUS-PURP-LIT skip;
    set OP0JM001.OP0JM-AUTH-DATA normal;
    set OP0JM001.OP0JM-BUS-PURP-DATA normal;
  end

  if (OPOREC.OPO-RETURN-CD == 2) /* user not authorized for comp #*/
    converseLib.validationFailed(573);
  end

  if (OPOREC.OPO-RETURN-CD == 3) /* account class code not found*/
    converseLib.validationFailed(574);
  end

  if (OPOREC.OPO-RETURN-CD == 4) /* company not found*/
    converseLib.validationFailed(767);
  end

  if (OPOREC.OPO-RETURN-CD > 4) /* db2 error retn'd by op0o*/
    XSPF4(); /* transfer to main menu.*/
  end
end // end OP0JS-CHECK-AUDIT

// Check for custom logo on order
Function OP0JS-CHK-CUSTOM()

   /* *************************************************************/
   /* Check to see if this is a custom logo order.*/
   /* Custom logo/non-custom logo products can't be mixed*/
   /* on an order, so it's only necessary to check the first*/
   /* active product on the order.*/
   /* *************************************************************/

   /* Set up OPWREC same as if transferring to OP0B.*/
   /* Do it now in case there there is an error before*/
   /* transfer to AE08.*/

  OPWREC.OPWMSGC1 = "01"; /* To display order accepted msg*/
  OPWREC.OPWPORD = OP1REC.OP1CUOID; /* Previous order number*/
  OPWREC.OP1GROUP = OP1REC.OP1GROUP; /* Save OP1REC*/

  OP2REC.OP1PARTN = OP1REC.OP1PARTN; /* part char*/
  OP2REC.OP1CUOID = OP1REC.OP1CUOID; /* cust ord id*/
  OP2REC.OP1NORID = 0; /* nike ord id*/

  OP0JW01.OP0JW-USE-ITM-FL = "N"; /* Init item OK to use flag*/

  OP0JS-ITEM-CSR-OP(); /* open item cursor*/

  OP0JS-NEXT-ITEM();

  while (SQLCA.VAGen_SQLCODE == 0
   && OP0JW01.OP0JW-USE-ITM-FL == "N")
    if (OP2REC.OP2LNIST != "IP" /* Not in process*/
     && OP2REC.OP2LNIST != "XL") /* and not cancelled*/
      OP0JW01.OP0JW-USE-ITM-FL = "Y"; /* OK to use this item*/
    else
      OP0JS-NEXT-ITEM(); /* Keep looking for item to use*/
    end
  end

  OP0JS-ITEM-CSR-CL(); /* Close cursor no matter what*/

  if (OP0JW01.OP0JW-USE-ITM-FL == "Y") /* If a usable item was found*/
    OP0JS-PROD-LOOKUP(); /* Look up product*/
    if (SYCREC.XPRCD == "22") /* Custom logo product*/
      OP0JW01.OP0JW-CUSTOM-FL = "Y";
    end
  end
end // end OP0JS-CHK-CUSTOM

// get items for msr edit
Function OP0JS-CHK-MSR-ITM()

      /* this is mainly to check how many items there are for this*/
      /* msr order.  only one item per msr order is allowed.*/

  OP8REC.OP8TASK = "SS";
  OP8REC.OP8LOCAT[3] = "OP0J-MS";
  OP8REC.OP8LOCAT[4] = "R-ITEMS";
  OP8REC.OP8MAP = " ";

  OP3REC.OP1PARTN = OP1REC.OP1PARTN;
  OP3REC.OP1CUOID = OP1REC.OP1CUOID;
  OP3REC.OP1NORID = 0; /* ALL SUBORDERS*/
  OP3REC.OP2LNINB = 0;

  OP0JW-MSITM-CNT = 0; /* init item counter*/

  call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes}; /* select all line-items*/

  if (OPBREC.OPBSZRC == 0)
    OP0JS-FETCH-MSITM(); /* now read the items*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* synpoint rollback*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    COMMAREA.CATOAP = "MN0M";
    sysVar.transferName = "MN0M";
    transfer to transaction sysVar.transferName passing COMMAREA;
  end

end // end OP0JS-CHK-MSR-ITM

// credit chk bulk for each draw
Function OP0JS-CRED-CHK-BLK()



       /* **********************************************************/
       /* * credit check the bulk suborder to reduce the bulk's   **/
       /* * credit qty and value for the draw order.              **/
       /* **********************************************************/


  set CC1REC empty;

  CC1REC.CC1PARTN = OP0JW05.OP1PARTN; /* draw's part char*/
  CC1REC.CC1CUOID = OP0JW05.OP1CUOID; /* draw's cust ord id*/
  CC1REC.CC1NORID = OP0JW05.OP1NORID; /* draw's nike ord id*/
  CC1REC.CC1PGMNM = "OP0J  ";
  CC1REC.CC1CLRSN = 9;
  CC1REC.CC1RTNCD = 0;
  CC1REC.CC1RTNMS = " ";

  call "CC1070" (SQLCA, OP1REC, CC1REC) {isNoRefresh = yes, isExternal = yes};

  if (CC1REC.CC1RTNCD == 0) /* good return code*/
     /* next sentence*/
  else
    OP0JM001.OPMUMSG = CC1REC.CC1RTNMA;
  end

   /* *********************************************************/
end // end OP0JS-CRED-CHK-BLK

// Capture cresting info loop
Function OP0JS-CREST-LOOP()


   /* ****************************************************************/
   /* * This statement group is used to drive the transfer to the   **/
   /* * apparel buy product cresting instruction application (AE09).**/
   /* * Only orders with custom logo products will ever be in this  **/
   /* * loop.                                                       **/
   /* * It finds the next item to be processed and passes keys for  **/
   /* * this item to AE09. After the last item has been processed,  **/
   /* * OP0J transfers to order entry menu (OP0B).                  **/
   /* ****************************************************************/

   /* Set up compare key for last item*/

  OP0JW01.OP0JW-AB-OP1NORID = OPABREC.OP-NIKE-ORD-ID;
  OP0JW01.OP0JW-AB-OP2LNINB = OPABREC.OP-LINE-ITEM-NBR;

  OP0JW01.OP0JW-USE-ITM-FL = "N"; /* Init next item flag*/

   /* Open item cursor to look for next item to process*/

  OP2REC.OP1PARTN = OPABREC.OP-ORD-PART-CHAR; /* Item keys*/
  OP2REC.OP1CUOID = OPABREC.OP-CUST-ORD-ID; /* for cursor select*/
  OP2REC.OP1NORID = 0; /**/

  OP0JS-ITEM-CSR-OP(); /* Open item cursor*/

  OP0JS-NEXT-ITEM(); /* Priming fetch*/

   /* Fetch items until end of items or until*/
   /* the nike ord id/line item nbr is greater than*/
   /* the prior item processed and the item is not cancelled*/
   /* or in process.*/

  while (SQLCA.VAGen_SQLCODE == 0
   && OP0JW01.OP0JW-USE-ITM-FL == "N")
    OP0JW01.OP0JW-OP2-OP1NORID = OP2REC.OP1NORID;
    OP0JW01.OP0JW-OP2-OP2LNINB = OP2REC.OP2LNINB;
    if (OP0JW01.OP0JW-OP2-ITM-KEY > OP0JW01.OP0JW-AB-ITM-KEY)
      if (OP2REC.OP2LNIST != "IP"
       && OP2REC.OP2LNIST != "XL")
        OP0JW01.OP0JW-USE-ITM-FL = "Y";
      else
        OP0JS-NEXT-ITEM(); /* Item in IP or XL status, get next*/
      end
    else
      OP0JS-NEXT-ITEM(); /* Item key not greater, get next*/
    end
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* Done - no more items*/
    OP0JS-ITEM-CSR-CL(); /* Close cursor*/
    COMMAREA.CA-USER-WORKAREA-4K = OPWREC.OPWSGRP; /* to process*/
    COMMAREA.CACURRAP = "OP0B";
    sysVar.transferName = "OP0B"; /* Go to ord entry menu*/
    transfer to program sysVar.transferName passing COMMAREA; /**/
  else
    OP0JS-ITEM-CSR-CL(); /* Close cursor*/
    OP0JS-XFR-AE09(); /* Setup transfer to prod cresting instructions*/
  end

end // end OP0JS-CREST-LOOP

// Close the bulk cursor
Function OP0JS-CS-BULKS()

   /* Call the I/O mod to close the order header cursor.*/

  set SQLCA empty;

  call "IO0430" ("CS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};


   /* Stop the program if error has occurred.*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* Next sentence - no errors, so do nothing.*/
  else
     /* Error has occurred.  Set up TA1REC fields and abend*/

    TA1REC.TA1PGMNM = "OP0J    ";
    TA1REC.TA1MAP = "OP0JM001";
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VORHDR01";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOCAT[1] = "OP0JS-CS-BULKS/IO0430/CS";
    XSOPS02(); /* Force an abend.*/
  end
end // end OP0JS-CS-BULKS

// Cresting capture err handling
Function OP0JS-CUSTOM-ERR()

       /* *******************************************************/
       /* * This statement group handles errors encountered    **/
       /* * when processing cresting information capture       **/
       /* * for custom logo orders. The order has already      **/
       /* * been committed, so it just posts the error and     **/
       /* * transfers to OP0B.                                 **/
       /* *******************************************************/

  TA1REC.TA1TYPE = "DB2"; /* error type*/
  TA1REC.TA1FUNC = "POST"; /* post func*/
  set ERRSQLCA empty; /* clear area*/
  move SQLCA to ERRSQLCA withV60Compat; /* save orig sqlca*/
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes}; /* error display module*/
  COMMAREA.CA-USER-WORKAREA-4K = OPWREC.OPWSGRP;
                                                     /* setup user commarea*/
  sysVar.transferName = "OP0B"; /* ord entry menu*/
  COMMAREA.CAMSG = "CREST INFO ENTRY ERROR-FIX IN ORD MAINT";
  transfer to program sysVar.transferName passing COMMAREA; /* standard exit*/
end // end OP0JS-CUSTOM-ERR

// accept the order
Function OP0JS-EDIT-AUDIT()
    /* check to see if authorization and business purpose were entered*/
    /* op0o was called unconditionally during initialization, so the*/
    /* return code is trustworthy.  The only value we are interested in*/
    /* is 0, however, if 02 - 04 was received on the call, we want to*/
    /* redisplay the error, since the user didn't get the hint the first*/
    /* time and cancel the order.*/
       /* 00 - authorization and business purpose are required, so we*/
       /* open up the screen for entry of these fields.*/
       /* 01 - not required for this company/comp number*/
       /* 02 - 04 - aren't a problem since we didn't get them in op0c/d/n*/
       /* but we'll put some code in for them anyway*/
       /* 05 & up - we got out during initialization*/


  if (OPOREC.OPO-RETURN-CD == 0) /* open up map for entry*/
    OP0JS-EDIT-BUSPURP();
    OP0JS-EDIT-AUTH-BY();
  end

  if (OPOREC.OPO-RETURN-CD == 2) /* user not authorized for comp #*/
    converseLib.validationFailed(573);
  end

  if (OPOREC.OPO-RETURN-CD == 3) /* account class code not found*/
    converseLib.validationFailed(574);
  end

  if (OPOREC.OPO-RETURN-CD == 4) /* company not found*/
    converseLib.validationFailed(767);
  end
end // end OP0JS-EDIT-AUDIT

// edit authorized by field
Function OP0JS-EDIT-AUTH-BY()


  /* ************************************************************************/
  /* edit the authorized by                                               **/
  /* ************************************************************************/


  if (OP0JM001.OP0JM-AUTH-DATA == " ") /* is blank*/
    OPAREC.OPAERR = "Y"; /* set error flag to true*/
    set OP0JM001.OP0JM-AUTH-DATA cursor, bold; /* highlight error*/
    converseLib.validationFailed(764); /* authorized by can not be blank*/
  else
    set OP0JM001.OP0JM-AUTH-DATA normal; /* turn off highlight*/
  end


end // end OP0JS-EDIT-AUTH-BY

// edit business purpose field
Function OP0JS-EDIT-BUSPURP()


  /* ************************************************************************/
  /* edit the business purpose                                            **/
  /* ************************************************************************/


  if (OP0JM001.OP0JM-BUS-PURP-DATA == " ") /* is blank*/
    OPAREC.OPAERR = "Y"; /* set error flag to true*/
    set OP0JM001.OP0JM-BUS-PURP-DATA cursor, bold; /* highlight error*/
    converseLib.validationFailed(765); /* business purpose can not be blank*/
  else
    set OP0JM001.OP0JM-BUS-PURP-DATA normal; /* turn off highlight*/
  end


end // end OP0JS-EDIT-BUSPURP

// get items for msc edits
Function OP0JS-FETCH-MSITM()

      /* get the next line item for the sub-order*/

  OP8REC.OP8LOCAT[1] = "OP0J005";
  OP8REC.OP8LOCAT[2] = "OP0JS-G";
  OP8REC.OP8LOCAT[3] = "ET-ITM ";
  OP8REC.OP8LOCAT[4] = " ";

  while (OPBREC.OPBSZRC == 0) /* until end of file*/

    OP8REC.OP8TASK = "SN";
    call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};

    if (OPBREC.OPBSZRC == 0)
      OP0JW-MSITM-CNT = OP0JW-MSITM-CNT + 1; /* increment itm counter*/
    else
      if (OPBREC.OPBSZRC == 1) /* if no more line-items*/
         /* / next sentence;*/
      else
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* synpoint rollback*/
        COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
        COMMAREA.CATOAP = "MN0M";
        sysVar.transferName = "MN0M";
        transfer to transaction sysVar.transferName passing COMMAREA;
      end
    end
  end

     /* close item cursor*/



  OP8REC.OP8TASK = "CS";
  call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};

  if (OPBREC.OPBSZRC == 0)
     /* next sentence*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* synpoint rollback*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    COMMAREA.CATOAP = "MN0M";
    sysVar.transferName = "MN0M";
    transfer to transaction sysVar.transferName passing COMMAREA;
  end


end // end OP0JS-FETCH-MSITM

// GET CARTON TYPE
Function OP0JS-GET-CTN-TYPE()
   /* since a 'cu' order must have a carton type code, we call pk4420*/
   /* to calculate the carton type code.  if pk4420 does not return a*/
   /* good value, get it from dcust.vcmpny01*/

  set PWSREC empty;
  PWSREC.KUCCOID = OP1REC.KUCCOID;
  PWSREC.OP1PARTN = OSNREC.OP1PARTN;
  PWSREC.OP1CUOID = OSNREC.OP1CUOID;
  PWSREC.OP1NORID = OSNREC.OP1NORID;
  PWSREC.XWHCD = OSNREC.XWHCD;
  PWSREC.XGPCD = OSNREC.XGPCD;
  PWSREC.XBCCD = OP1REC.XBCCD;
  PWSREC.OP2LNINB[1] = OSNREC.OP2LNINB;
  PWSREC.SY1STNBR[1] = OSNREC.SY1STNBR;
  PWSREC.SY2CLRID[1] = OSNREC.SY2CLRID;
  PWSREC.XDMCD[1] = OSNREC.XDMCD;
  PWSREC.PWSPPQ01[1] = OSNREC.PKTPPQTY[01];
  PWSREC.PWSPPQ02[1] = OSNREC.PKTPPQTY[02];
  PWSREC.PWSPPQ03[1] = OSNREC.PKTPPQTY[03];
  PWSREC.PWSPPQ04[1] = OSNREC.PKTPPQTY[04];
  PWSREC.PWSPPQ05[1] = OSNREC.PKTPPQTY[05];
  PWSREC.PWSPPQ06[1] = OSNREC.PKTPPQTY[06];
  PWSREC.PWSPPQ07[1] = OSNREC.PKTPPQTY[07];
  PWSREC.PWSPPQ08[1] = OSNREC.PKTPPQTY[08];
  PWSREC.PWSPPQ09[1] = OSNREC.PKTPPQTY[09];
  PWSREC.PWSPPQ10[1] = OSNREC.PKTPPQTY[10];
  PWSREC.PWSPPQ11[1] = OSNREC.PKTPPQTY[11];
  PWSREC.PWSPPQ12[1] = OSNREC.PKTPPQTY[12];
  PWSREC.PWSPPQ13[1] = OSNREC.PKTPPQTY[13];
  PWSREC.PWSPPQ14[1] = OSNREC.PKTPPQTY[14];
  PWSREC.PWSPPQ15[1] = OSNREC.PKTPPQTY[15];
  PWSREC.PWSPPQ16[1] = OSNREC.PKTPPQTY[16];
  PWSREC.PWSPPQ17[1] = OSNREC.PKTPPQTY[17];
  PWSREC.PWSPPQ18[1] = OSNREC.PKTPPQTY[18];
  PWSREC.PWSPPQ19[1] = OSNREC.PKTPPQTY[19];
  PWSREC.PWSPPQ20[1] = OSNREC.PKTPPQTY[20];
  PWSREC.PWSPPQ21[1] = OSNREC.PKTPPQTY[21];
  PWSREC.PWSPPQ22[1] = OSNREC.PKTPPQTY[22];
  PWSREC.PWSPPQ23[1] = OSNREC.PKTPPQTY[23];
  PWSREC.PWSPPQ24[1] = OSNREC.PKTPPQTY[24];
  PWSREC.PWSPPQ25[1] = OSNREC.PKTPPQTY[25];
  PWSREC.PWSPPQ26[1] = OSNREC.PKTPPQTY[26];
  PWSREC.PWSPPQ27[1] = OSNREC.PKTPPQTY[27];
  PWSREC.PWSPPQ28[1] = OSNREC.PKTPPQTY[28];
  PWSREC.PWSPPQ29[1] = OSNREC.PKTPPQTY[29];
  PWSREC.PWSPPQ30[1] = OSNREC.PKTPPQTY[30];
  PWSREC.PWSPPQ31[1] = OSNREC.PKTPPQTY[31];
  PWSREC.PWSPPQ32[1] = OSNREC.PKTPPQTY[32];
  PWSREC.PWSPPQ33[1] = OSNREC.PKTPPQTY[33];
  PWSREC.PWSPPQ34[1] = OSNREC.PKTPPQTY[34];
  PWSREC.PWSPPQ35[1] = OSNREC.PKTPPQTY[35];
  PWSREC.PWSPPQ36[1] = OSNREC.PKTPPQTY[36];
  PWSREC.PWSPPQ37[1] = OSNREC.PKTPPQTY[37];
  PWSREC.PWSPPQ38[1] = OSNREC.PKTPPQTY[38];
  PWSREC.PWSPPQ39[1] = OSNREC.PKTPPQTY[39];
  PWSREC.PWSPPQ40[1] = OSNREC.PKTPPQTY[40];

  try
    call "PK4420" (SQLCA, PWSREC) {isNoRefresh = yes, isExternal = yes};
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* db busy*/
    OPAREC.OPAERR = "Y";
    converseLib.validationFailed(010); /* database busy try again*/
    return;
  end
  if (PWSREC.PWSRTNCD == 0)
    OSNREC.YNTCD = PWSREC.YNTCD;
  else
    if (PWSREC.PWSRTNCD == 3)
      /* begin tcs*/
      OP0JM001.VAGen_EZEMSG = " NO CARTONS LARGE ENOUGH - RETRY";
      OPAREC.OPAERR = "Y"; /* error exist*/
      converseLib.validationFailed(996);
      exit stack;
      /* end tcs*/
      /* EZERTN;*/
      /* OP0JS-ALT-CTN-TYPE;*/
    else
      if (PWSREC.PWSRTNCD == 4)
        /* WIPRO Change Begin #05/25/99#*/
        OP0JM001.VAGen_EZEMSG = " PACKAGE REQUIRES MATCHING CARTON TYPES";
        OPAREC.OPAERR = "Y"; /* error exist*/
        exit stack;
        /* EZERTN;*/
        /* OP0JS-ALT-CTN-TYPE;*/
        /* WIPRO Change end*/
      else
        if (PWSREC.PWSRTNCD == 5)
          /* WIPRO Change Begin #05/25/99#*/
          OP0JM001.VAGen_EZEMSG = " NOT SET UP WITH CARTON CLASS";
          exit stack;
          /* EZERTN;*/
          /* OP0JS-ALT-CTN-TYPE;*/
          /* WIPRO Change end*/
        else
          if (PWSREC.PWSRTNCD == 6)
            /* WIPRO Change Begin #05/25/99#*/
            OP0JM001.VAGen_EZEMSG = " NOT SET UP WITH CARTON CLASS RECORD";
            exit stack;
            /* EZERTN;*/
            /* OP0JS-ALT-CTN-TYPE;*/
            /* WIPRO Change end*/
          else
            if (PWSREC.PWSRTNCD == 7)
              /* WIPRO Change Begin #05/25/99#*/
              OP0JM001.VAGen_EZEMSG = " NEEDS HANGING CARTON CLASS";
              exit stack;
              /* EZERTN;*/
              /* OP0JS-ALT-CTN-TYPE;*/
              /* WIPRO Change end*/
            else
              if (PWSREC.PWSRTNCD == 8)
                /* WIPRO Change Begin #05/25/99#*/
                OP0JM001.VAGen_EZEMSG = " NO ITEM PASSED";
                exit stack;
                /* EZERTN;*/
                /* OP0JS-ALT-CTN-TYPE;*/
              else
                if (PWSREC.PWSRTNCD == 9)
                  /* WIPRO Change Begin #05/25/99#*/
                  OP0JM001.VAGen_EZEMSG = " NO PREPACK QUANTITIES";
                  exit stack;
                  /* EZERTN;*/
                  /* OP0JS-ALT-CTN-TYPE;*/
                  /* WIPRO Change end*/
                else
                  TA1REC.TA1DBASE = "DORDER  ";
                  TA1REC.TA1TBLVU = "VCSPRP01";
                  TA1REC.TA1TBLKE = "PK4420";
                  TA1REC.TA1LOCAT[2] = "OP0JS-GET-CTN-TYPE";
                  XSOPS02();
                end
              end
            end
          end
        end
      end
    end
  end

end // end OP0JS-GET-CTN-TYPE

// get items for msc edits
Function OP0JS-GET-ITM()

      /* get the next line item for the sub-order*/

  OP8REC.OP8LOCAT[1] = "OP0J005";
  OP8REC.OP8LOCAT[2] = "OP0JS-G";
  OP8REC.OP8LOCAT[3] = "ET-ITM ";
  OP8REC.OP8LOCAT[4] = " ";

  while (OPAREC.OPAERR == "N" /* until there's a error*/
   && OPBREC.OPBSZRC == 0) /* or end of file*/

    OP8REC.OP8TASK = "SN";
    call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};

    if (OPBREC.OPBSZRC == 0)

       /* Initialize non-existant sizes on the bulk to prevent S0C7's*/
       /* CSP 4.1 Change!!*/

      sysVar.arrayIndex = 1;
      while (sysVar.arrayIndex <= 40)
        if (OP3REC.OP3SZAFL[sysVar.arrayIndex] != "Y")
          OP3REC.SY5PRCUN[sysVar.arrayIndex] = 0;
          OP3REC.OP3ORGQT[sysVar.arrayIndex] = 0;
          OP3REC.OP3ONOQT[sysVar.arrayIndex] = 0;
          OP3REC.OP3ALQT[sysVar.arrayIndex] = 0;
          OP3REC.OP3OHRQT[sysVar.arrayIndex] = 0;
          OP3REC.OP3WPRQT[sysVar.arrayIndex] = 0;
          OP3REC.OP3SHPQT[sysVar.arrayIndex] = 0;
          OP3REC.OP3CNLQT[sysVar.arrayIndex] = 0;
        end
        sysVar.arrayIndex = sysVar.arrayIndex + 1;
      end

      OP0JS-MSR-EDIT(); /* finally we can validate the qty's*/
    else
      if (OPBREC.OPBSZRC == 1) /* if no more line-items*/
        OP0JW01.OP0JWEOF = "Y"; /* set end-of-file to yes*/
      else
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* synpoint rollback*/
        COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
        COMMAREA.CATOAP = "MN0M";
        sysVar.transferName = "MN0M";
        transfer to transaction sysVar.transferName passing COMMAREA;
      end
    end
  end

     /* close item cursor*/



  OP8REC.OP8TASK = "CS";
  call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};

  if (OPBREC.OPBSZRC == 0)
     /* next sentence*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* synpoint rollback*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    COMMAREA.CATOAP = "MN0M";
    sysVar.transferName = "MN0M";
    transfer to transaction sysVar.transferName passing COMMAREA;
  end


end // end OP0JS-GET-ITM

// get items for msc edits
Function OP0JS-GET-MSR-ITM()

      /* get the next line item for the sub-order*/

  OP8REC.OP8LOCAT[1] = "OP0J005";
  OP8REC.OP8LOCAT[2] = "OP0JS-G";
  OP8REC.OP8LOCAT[3] = "ET-ITM ";
  OP8REC.OP8LOCAT[4] = " ";

  OP0JW01.OP0JW-PKG-NO = 0;

  while (OPAREC.OPAERR == "N" /* until there's a error*/
   && OPBREC.OPBSZRC == 0) /* or end of file*/

    OP8REC.OP8TASK = "SN";
    call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};

    if (OPBREC.OPBSZRC == 0)
      OP0JS-MSR-INSERT();
    else
      if (OPBREC.OPBSZRC == 1) /* if no more line-items*/
        OP0JW01.OP0JWEOF = "Y"; /* set end-of-file to yes*/
      else
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* synpoint rollback*/
        COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
        COMMAREA.CATOAP = "MN0M";
        sysVar.transferName = "MN0M";
        transfer to transaction sysVar.transferName passing COMMAREA;
      end
    end
  end

     /* close item cursor*/



  OP8REC.OP8TASK = "CS";
  call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};

  if (OPBREC.OPBSZRC == 0)
     /* next sentence*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* synpoint rollback*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    COMMAREA.CATOAP = "MN0M";
    sysVar.transferName = "MN0M";
    transfer to transaction sysVar.transferName passing COMMAREA;
  end


end // end OP0JS-GET-MSR-ITM

// GET DEPT FOR DEPT SELF ID
Function OP0JS-GET-VDEPT001()


      /* This routine reads the department record to obtain the*/
      /* department self id (kujslfid).*/


  call "IO0290" ("S ", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[3] = "IO0290  ";
    TA1REC.TA1DBASE = "KUJREC  ";
    TA1REC.TA1TBLVU = "VDEPT001";
    OP0JW01.OP0JW-EK1-KEY = " ";
    OP0JW01.OP0JW-EK1-COMPANY = OP1REC.KUCCOID;
    OP0JW01.OP0JW-EK1-DEPT = OP1REC.XNXCD;
    TA1REC.TA1TBLKE = OP0JW01.OP0JW-EK1-KEY;
    XSOPS02(); /* abend*/
  end





end // end OP0JS-GET-VDEPT001

// select dprod.vsyreg01
Function OP0JS-GET-WSY2000()


   /* This statement group added for Canada -- June 2, 1995 --*/

     /* get the product/region record*/

  set SQLCA empty;
  set WSY2000 empty;
  WSY2000.XGP-GPC-CD = SYCREC.XGPCD;
  WSY2000.SY-STY-NBR = SYCREC.SY1STNBR;
  WSY2000.SY-COLR-CD-ID = SYCREC.SY2CLRID;
  WSY2000.XDM-DIM-CD = SYCREC.XDMCD;
  WSY2000.XDR-PROD-REG-CD = "05";
  WSY2000.WSY2000-OPTION-CODE = "S ";
  WSY2000.WSY2000-SUB-OPTION-CODE = "O";


  call "SY2000" (WSY2000) {isNoRefresh = yes, isExternal = yes};

  if (WSY2000.WSY2000-RETURN-CODE == "00")
    OP0JW01.OP0JW-WSY2000-FND-FLAG = "Y";

      /* move from wsy2000 to vcolor02*/

    SYCREC.PG1SC4CD = WSY2000.PG-SCHED-SPCLT-CD;
    SYCREC.PG1FCTCD = WSY2000.PG-FCST-CD;
    SYCREC.XSECD = WSY2000.XSE-SESN-CD;
    SYCREC.XSNYR = WSY2000.XSN-SESN-YR-RNG;

    SYCREC.SY2POFBD = WSY2000.SY-PROP-OFFER-BDT;
    SYCREC.SY2POFXD = WSY2000.SY-PROP-OFFER-XDT;
    SYCREC.SY2FOFBD = WSY2000.SY-FUTR-OFFER-BDT;
    SYCREC.SY2FOFXD = WSY2000.SY-FUTR-OFFER-XDT;

    SYCREC.XLCCD1 = WSY2000.XLC-LIFE-CYC-CD[1];
    SYCREC.XLCCD2 = WSY2000.XLC-LIFE-CYC-CD[2];
    SYCREC.XLCCD3 = WSY2000.XLC-LIFE-CYC-CD[3];
    SYCREC.XLCCD4 = WSY2000.XLC-LIFE-CYC-CD[4];

    SYCREC.SY2CEDT1 = WSY2000.SY-LIFE-CYC-EDT[1];
    SYCREC.SY2CEDT2 = WSY2000.SY-LIFE-CYC-EDT[2];
    SYCREC.SY2CEDT3 = WSY2000.SY-LIFE-CYC-EDT[3];
    SYCREC.SY2CEDT4 = WSY2000.SY-LIFE-CYC-EDT[4];

    SYCREC.XPRCD = WSY2000.XPR-PROD-TYP-CD;
    SYCREC.XPLCD = WSY2000.XPL-PROD-LN-CD;
    SYCREC.XPCCD = WSY2000.XPC-PROD-CAT-CD;

    SYCREC.SY2FDSMO = WSY2000.SY-FRST-DOM-SLS-MO;
    SYCREC.SY2PDCMO = WSY2000.SY-PROJ-DOM-CLS-MO;
    SYCREC.SY2SSCIN = WSY2000.SY-SFTY-STKCLS-IND;

    SYCREC.OPZHMIND = WSY2000.OP-HMDL-HOT-FL;
    SYCREC.SY2ALNOR = WSY2000.SY-ALW-NEW-ORD-FL;

    sysVar.arrayIndex = 1;
    while (sysVar.arrayIndex <= 6)
      SYCREC.XWHCD[sysVar.arrayIndex] = WSY2000.XWH-WHSE-CD[sysVar.arrayIndex];
      sysVar.arrayIndex = sysVar.arrayIndex + 1;
    end

    SYCREC.SY2RPRDI = WSY2000.SY-RSTR-XSO-IND;
    SYCREC.SY2BOSWI = WSY2000.SY-BO-SW;
    SYCREC.SY2BOEDT = WSY2000.SY-BO-SW-EDT;

  else
    if (WSY2000.WSY2000-RETURN-CODE == "02")
      OP0JW01.OP0JW-WSY2000-FND-FLAG = "N";
      return;
    else
      if (WSY2000.WSY2000-RETURN-CODE == 98) /* data base is busy*/
  /* next sentence*/
      else
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "OP0J";
        TA1REC.TA1LOC = "OP0JS-SEL-WSY2000";
        OP0JW01.OP0JW-WSY2000-GPC-CD = SYCREC.XGPCD;
        OP0JW01.OP0JW-WSY2000-STY-NBR = SYCREC.SY1STNBR;
        OP0JW01.OP0JW-WSY2000-COLR-CD = SYCREC.SY2CLRID;
        OP0JW01.OP0JW-WSY2000-DIM-CD = SYCREC.XDMCD;
        OP0JW01.OP0JW-WSY2000-PROD-REG-CD = WSY2000.XDR-PROD-REG-CD;
        OP0JW01.OP0JW-WSY2000-RETURN-CD = WSY2000.WSY2000-RETURN-CODE;
        TAEREC.TAEDESC1 = OP0JW-WSY2000-POST-1;
        TAEREC.TAEDESC2 = "BAD RETURN CODE FROM SY2000";
        TA1REC.TA1PGMNM = "OP0J";
        TA1REC.TA1LOCAT[1] = "S     ";
        TA1REC.TA1LOCAT[2] = "SY2000";
        TA1REC.TA1LOCAT[3] = "OP0JS-SEL-WSY2000";
        TA1REC.TA1LOCAT[4] = WSY2000.WSY2000-KEY-INFO;
        TA1REC.TA1DBASE = "DPROD";
        TA1REC.TA1TBLVU = "WSY2000";
        TA1REC.TA1MAP = "OP0JM001";
        try
          call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        end
        COMMAREA.CA-USER-WORKAREA-4K = " "; /* on error - clear ws*/
      end
    end
  end





end // end OP0JS-GET-WSY2000

// BUILD/INSERT VCPBUS01
Function OP0JS-INS-VCPBUS01()

     /* build new row for VCPBUS01 comp order table*/

  set TA2REC empty; /* clear date record*/
  set VCPBUS01 empty; /* clear comp record*/

  TA2REC.TA2DTOPT = "GETDATE"; /* move 'getdate' to parm*/
  call "TA0040" (TA2REC) {isExternal = yes}; /* get todays date/time*/

  if (TA2REC.TA2RTNCD != 0) /* if bad return code*/
    TA1REC.TA1DBASE = " ";
    TA1REC.TA1TBLVU = " ";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOCAT[3] = "OP0JS-INS-VCPBUS01";
    TA1REC.TA1LOCAT[4] = "TA0040";
    TA1REC.TA1LOCAT[1] = "GETDATE";
    set SQLCA empty;
    XSOPS02(); /* abort program*/
  else
    VCPBUS01.ZZZSDT = TA2REC.TA2GRGGN; /* move date to set-up date*/
    VCPBUS01.ZZZSTM = TA2REC.TA2TIMHM; /* move time to set-up time*/
  end

   /* move part-char, cust-ord-id, auth-by and business-prp to VCPBUS01.*/
  VCPBUS01.OP1PARTN = OP1REC.OP1PARTN;
  VCPBUS01.OP1CUOID = OP1REC.OP1CUOID;
  VCPBUS01.OP-AUTH-BY = OP0JM001.OP0JM-AUTH-DATA;
  VCPBUS01.OP-BUS-PRP = OP0JM001.OP0JM-BUS-PURP-DATA;

  call "VCPBUS01" ("A ", SQLCA, VCPBUS01) {isNoRefresh = yes, isExternal = yes}; /* insert new row*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* NEXT SENTENCE*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VCPBUS01";
    TA1REC.TA1TBLKE = VCPBUS01-KEY;
    TA1REC.TA1LOCAT[3] = "OP0JS-INS-VCPBUS01";
    TA1REC.TA1LOCAT[4] = "VCPBUS01";
    XSOPS02();
  end

end // end OP0JS-INS-VCPBUS01

// WRITE customer BULK RECORD
Function OP0JS-INSERT-BULKS()

     /* build customer bulk record*/

  VBULKS02.OP1PARTN = OP1REC.OP1PARTN; /* move part char*/
  VBULKS02.OP1CUOID = OP1REC.OP1CUOID; /* move order number*/
  VBULKS02.OP1NORID = OP1REC.OP1NORID; /* move nike order id*/

  KUCREC.KUCCOID = OP1REC.KUCCOID; /* move customer id key*/
  OP0JSKC(); /* get comp for group/parent*/
  VBULKS02.KUCGRPID = KUCREC.KUCGRPID; /* move company group id*/
  VBULKS02.KUKPCOID = KUCREC.KUKPCOID; /* move parent company id*/
  VBULKS02.KUCCOID = OP1REC.KUCCOID; /* move customer id*/
  VBULKS02.KUMSTRID = OP1REC.KUMSTRID; /* move store id*/
  VBULKS02.XNXCD = OP1REC.XNXCD; /* move department id*/

  KUJREC.KUCCOID = OP1REC.KUCCOID; /* move customer id key*/
  KUJREC.XNXCD = OP1REC.XNXCD; /* move department id key*/
  OP0JS-GET-VDEPT001(); /* get dept for dept self id*/
  VBULKS02.KUJSLFID = KUJREC.KUJSLFID; /* move dept self id*/
  VBULKS02.XBDCD = OP1REC.XBDCD; /* move bulk code*/
  VBULKS02.XGPCD = OP1REC.XGPCD; /* move gpc*/
  VBULKS02.XDVCD = OP1REC.XDVCD; /* move division code*/
  VBULKS02.XSOCD = OP1REC.XSOCD; /* move sales office*/
  VBULKS02.XWHCD = OP1REC.XWHCD; /* move warehouse code*/
  VBULKS02.OP1CUPO = OP1REC.OP1CUPO; /* move customer po*/
  VBULKS02.OP1CUNDT = OP1REC.OP1CUNDT; /* move need date*/
  VBULKS02.OP1DSADT = OP1REC.OP1DSADT; /* move don't ship after date*/
  VBULKS02.SP1ID = OP1REC.SP1ID; /* move sales program id*/
   /* move sales rep id*/
  VBULKS02.SM4REPID = OP1REC.SM4REPID;
  call "VBULKS02" ("A ", SQLCA, VBULKS02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* NEXT SENTENCE*/
  else
    set TA1REC empty;
    set ERRSQLCA empty;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1DBASE = "DORDB ";
    TA1REC.TA1TBLVU = "VBULKS02";
    OP0JW03.OP0JWPRT = OP1REC.OP1PARTN;
    OP0JW03.OP0JWCID = OP1REC.OP1CUOID;
    OP0JW03.OP0JWNID = OP1REC.OP1NORID;
    OP0JW03.OP0JWITE = 0;
    TA1REC.TA1TBLKE = OP0JW03.OP0JWEKY;
    TA1REC.TA1LOCAT[1] = "A/IO725";
    TA1REC.TA1LOCAT[2] = "0/OP0JS";
    TA1REC.TA1LOCAT[3] = "-INSERT";
    TA1REC.TA1LOCAT[4] = "-BULKS ";
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  end

end // end OP0JS-INSERT-BULKS

// Close item cursor-IO0440
Function OP0JS-ITEM-CSR-CL()

    /* ******************************************************/
    /* This statement group is only used during cresting*/
    /* information capture processing. It uses a special*/
    /* error handling routine.*/
    /* ******************************************************/

   /* Call the I/O mod to close the cursor.*/
  call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};



   /* Stop the program if error has occurred.*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* Next sentence - no errors, so do nothing.*/

  else
     /* Error has occurred.  Set up TA1REC fields and abend*/

    TA1REC.TA1PGMNM = "OP0J    ";
    TA1REC.TA1MAP = "OP0JM001";
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOCAT[1] = "OP0J001 ";
    TA1REC.TA1LOCAT[2] = "ITEM-CSR";
    TA1REC.TA1LOCAT[3] = "IO0440  ";
    TA1REC.TA1LOCAT[4] = "CS      ";
    OP0JS-CUSTOM-ERR(); /* Force an abend.*/
  end
end // end OP0JS-ITEM-CSR-CL

// Open item cursor-IO0440
Function OP0JS-ITEM-CSR-OP()

   /* ************************************************************/
   /* Set up the cursor to get item with nike ord id greater*/
   /* or equal. This routine is used only during cresting*/
   /* information transfer processing and does special error*/
   /* handling.*/
   /* ************************************************************/

  set SQLCA empty;

   /* Call the I/O mod to set the cursor.*/
  call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};

   /* Abend if an error has occurred.*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* Next sentence - no errors, so do nothing.*/

  else
     /* Error has occurred.  Set up TA1REC fields.*/

    TA1REC.TA1PGMNM = "OP0J    ";
    TA1REC.TA1MAP = "OP0JM001";
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VITEM001";
     /* Format the key of the cursor.*/
    OP0JW03.OP0JWPRT = OP2REC.OP1PARTN;
    OP0JW03.OP0JWCID = OP2REC.OP1CUOID;
    OP0JW03.OP0JWNID = OP2REC.OP1NORID;
    OP0JW03.OP0JWITE = 0;
    TA1REC.TA1TBLKE = OP0JW03.OP0JWEKY;

    TA1REC.TA1LOCAT[1] = "OP0J001 ";
    TA1REC.TA1LOCAT[2] = "ITEM-CSR";
    TA1REC.TA1LOCAT[3] = "IO0440  ";
    TA1REC.TA1LOCAT[4] = "SS      ";
    OP0JS-CUSTOM-ERR(); /* Force exit of cresting loop*/
  end
end // end OP0JS-ITEM-CSR-OP

// edit xahcd for sales ofc 59
Function OP0JS-MOV-XAHCD-59()
   /* ****************************************************************/
   /* * New statement group added to move the allocation hold code  **/
   /* * for all the sales office 59 orders                          **/
   /* * sbhara golf cresting project tt#4073 04/17/00               **/
   /* ****************************************************************/

  if (OP1REC.XSOCD == "59" /* if the sales office is 59*/
   && OP1REC.XAHCD == " ") /* no other allocation hold presents ?*/
    OP1REC.XAHCD = "05"; /* 05-wait on product*/
    OP1REC.OP1ALHDT = OPAREC.OPACDT; /* put the current date for xah*/
  end
end // end OP0JS-MOV-XAHCD-59

// validate musical size runs
Function OP0JS-MSR-EDIT()


    /* this statement group validates the distributed musical size run*/
    /* quantities when the order is a direct ship order and musical size*/
    /* run was requested (op1rec.xpacd = 'MS')*/


   /* Call subprogram to validate the quantities*/

  set OPMZREC empty;

  OPMZREC.XGPCD = OP3REC.XGPCD;
  /* TT#12895-Changes begin - 07/11/2001 kshiva*/
  OPMZREC.XDSCD = OP1REC.XDSCD;
  /* TT#12895-Changes end   - 07/11/2001 kshiva*/
  OPMZREC.SY1STNBR = OP3REC.SY1STNBR;
  OPMZREC.SY2CLRID = OP3REC.SY2CLRID;
  OPMZREC.XDMCD = OP3REC.XDMCD;
  OPMZREC.OP2TONOQ = OP3REC.OP2TONOQ;

   /* Move qtys to pass record*/

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex <= 40)
    OPMZREC.OP3ONOQT[sysVar.arrayIndex] = OP3REC.OP3ONOQT[sysVar.arrayIndex];
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end


  call "OP3850" (OPMZREC) {isNoRefresh = yes, isExternal = yes};

  if (OPMZREC.OPMZ-RETURN-CD == 0)
    /* OP0JS-INSERT-MSR-PREPACKS;*/
  else
    if (OPMZREC.OPMZ-RETURN-CD == 1
     || OPMZREC.OPMZ-RETURN-CD == 2
     || OPMZREC.OPMZ-RETURN-CD == 3
     || OPMZREC.OPMZ-RETURN-CD == 4)
      OPAREC.OPAERR = "Y";
      OP0JM001.VAGen_EZEMSG = OPMZREC.OPMZ-RETURN-MSG;
    else
      if (OPMZREC.OPMZ-RETURN-CD == 8)
        OPAREC.OPAERR = "Y";
        converseLib.validationFailed(10);
      else
        if (OPMZREC.OPMZ-RETURN-CD == 7
         || OPMZREC.OPMZ-RETURN-CD == 9)
          OPAREC.OPAERR = "Y";
          TA1REC.TA1TYPE = "APPL";
          TA1REC.TA1FUNC = "RETN";
          TA1REC.TA1PGMNM = "OP0J    ";
          TA1REC.TA1LOCAT[1] = "OP3850  ";
          TA1REC.TA1LOCAT[2] = OPMZREC.OPMZ-RETURN-CD;
          TA1REC.TA1LOCAT[2] = "OP0JS-MS";
          TA1REC.TA1LOCAT[4] = "R-EDIT  ";
          set TAEREC empty;
          OPMZREC.OPMZ-DIAG-KEY = " ";
          OPMZREC.OPMZ-DIAG-CUST-ORD-ID = OP3REC.OP1CUOID;
          OPMZREC.OPMZ-DIAG-NIKE-ORD-ID = OP3REC.OP1NORID;
          OPMZREC.OPMZ-DIAG-GPC-CD = OPMZREC.XGPCD;
          OPMZREC.OPMZ-DIAG-STY-NBR = OPMZREC.SY1STNBR;
          OPMZREC.OPMZ-DIAG-COLR-CD-ID = OPMZREC.SY2CLRID;
          OPMZREC.OPMZ-DIAG-DIM-CD = OPMZREC.XDMCD;
          OPMZREC.OPMZ-DIAG-RETURN-CD = OPMZREC.OPMZ-RETURN-CD;
          TAEREC.TAEDESC1 = OPMZREC.OPMZ-DIAG-KEY;
          TAEREC.TAEDESC2 = OPMZREC.OPMZ-RETURN-MSG;
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.rollback();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
          call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
          XSPF4();
          exit program;
        end
      end
    end
  end





end // end OP0JS-MSR-EDIT

// insert msr prepack record
Function OP0JS-MSR-INSERT()

   /* insert the prepack quantities for each line item if msr edit is ok*/

   /* Initialize non-existant sizes to prevent S0C7's*/
   /* CSP 4.1 Change!!*/

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex <= 40)
    if (OP3REC.OP3SZAFL[sysVar.arrayIndex] != "Y")
      OP3REC.SY5PRCUN[sysVar.arrayIndex] = 0;
      OP3REC.OP3ORGQT[sysVar.arrayIndex] = 0;
      OP3REC.OP3ONOQT[sysVar.arrayIndex] = 0;
      OP3REC.OP3ALQT[sysVar.arrayIndex] = 0;
      OP3REC.OP3OHRQT[sysVar.arrayIndex] = 0;
      OP3REC.OP3WPRQT[sysVar.arrayIndex] = 0;
      OP3REC.OP3SHPQT[sysVar.arrayIndex] = 0;
      OP3REC.OP3CNLQT[sysVar.arrayIndex] = 0;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

   /* call op3850 to get msr prepack ratios*/

  set OPMZREC empty;

  OPMZREC.XGPCD = OP3REC.XGPCD;
  /* TT#12895-Changes begin - 07/11/2001 kshiva*/
  OPMZREC.XDSCD = OP1REC.XDSCD;
  /* TT#12895-Changes end   - 07/11/2001 kshiva*/
  OPMZREC.SY1STNBR = OP3REC.SY1STNBR;
  OPMZREC.SY2CLRID = OP3REC.SY2CLRID;
  OPMZREC.XDMCD = OP3REC.XDMCD;
  OPMZREC.OP2TONOQ = OP3REC.OP2TONOQ;

   /* Move qtys to pass record*/

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex <= 40)
    OPMZREC.OP3ONOQT[sysVar.arrayIndex] = OP3REC.OP3ONOQT[sysVar.arrayIndex];
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

  call "OP3850" (OPMZREC) {isNoRefresh = yes, isExternal = yes};

  if (OPMZREC.OPMZ-RETURN-CD == 0)
    /* next sentence;*/
    /* there is no need to check for other return codes since msr edits*/
    /* were done in previous call to op3850*/

  else
    OPAREC.OPAERR = "Y";
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OP0J    ";
    TA1REC.TA1LOCAT[1] = "OP3850  ";
    TA1REC.TA1LOCAT[2] = OPMZREC.OPMZ-RETURN-CD;
    TA1REC.TA1LOCAT[2] = "OP0JS-MS";
    TA1REC.TA1LOCAT[4] = "R-EDIT  ";
    set TAEREC empty;
    OPMZREC.OPMZ-DIAG-KEY = " ";
    OPMZREC.OPMZ-DIAG-CUST-ORD-ID = OP3REC.OP1CUOID;
    OPMZREC.OPMZ-DIAG-NIKE-ORD-ID = OP3REC.OP1NORID;
    OPMZREC.OPMZ-DIAG-GPC-CD = OPMZREC.XGPCD;
    OPMZREC.OPMZ-DIAG-STY-NBR = OPMZREC.SY1STNBR;
    OPMZREC.OPMZ-DIAG-COLR-CD-ID = OPMZREC.SY2CLRID;
    OPMZREC.OPMZ-DIAG-DIM-CD = OPMZREC.XDMCD;
    OPMZREC.OPMZ-DIAG-RETURN-CD = OPMZREC.OPMZ-RETURN-CD;
    TAEREC.TAEDESC1 = OPMZREC.OPMZ-DIAG-KEY;
    TAEREC.TAEDESC2 = OPMZREC.OPMZ-RETURN-MSG;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
    XSPF4();
    exit program;
  end
   /* format prepack record*/

  set OSNREC empty;

  OSNREC.XWHCD = OP1REC.XWHCD;
  OSNREC.OP1PARTN = OP1REC.OP1PARTN;
  OSNREC.OP1CUOID = OP1REC.OP1CUOID;
  OSNREC.OP1NORID = OP3REC.OP1NORID;
  OSNREC.OP2LNINB = OP3REC.OP2LNINB;
  OSNREC.XGPCD = OP3REC.XGPCD;
  OP0JW01.OP0JW-PKG-NO = OP0JW01.OP0JW-PKG-NO + 1;
  OSNREC.OSNPKGNB = OP0JW01.OP0JW-PKG-NO;
  OSNREC.SY1STNBR = OP3REC.SY1STNBR;
  OSNREC.SY2CLRID = OP3REC.SY2CLRID;
  OSNREC.XDMCD = OP3REC.XDMCD;
  OSNREC.XPACD = OP1REC.XPACD;
  OSNREC.KUFMIXBL = "N";

   /* calculate total item qty and total carton ratio*/

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex <= 40)
    if (OP3REC.OP3ONOQT[sysVar.arrayIndex] != 0)
      OSNREC.PKTPPQTY[sysVar.arrayIndex] = OPMZREC.OP-MSZ-SZ-RATIO[sysVar.arrayIndex];
      OSNREC.KUCUNTCS = OSNREC.KUCUNTCS +       OPMZREC.OP-MSZ-SZ-RATIO[sysVar.arrayIndex];
      OSNREC.OSNTIQTY = OSNREC.OSNTIQTY +       OP3REC.OP3ONOQT[sysVar.arrayIndex];
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

   /* find beginning active size*/
  sysVar.arrayIndex = 40;
  while (sysVar.arrayIndex >= 1)
    if (OPMZREC.OP-MSZ-SZ-RATIO[sysVar.arrayIndex] > 0)
      OSNREC.PKTBACTI = sysVar.arrayIndex;
    end
    sysVar.arrayIndex = sysVar.arrayIndex - 1;
  end

   /* get carton type code if pack code is 'cu'  10/24/97*/
  OP0JS-GET-CTN-TYPE();

  OSNREC.ZZZSDT = TA2REC.TA2GRGGN;
  OSNREC.ZZZSTM = TA2REC.TA2TIMHM;

  try
    call "IO5650" ("A ", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    /* /next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1LOCAT[1] = "OP0JS-INSERT-MSR";
    TA1REC.TA1TBLVU = "VCSPRP01";
    TA1REC.TA1TBLKE = OSNREC.OSNKEY;
    TA1REC.TA1LOCAT[3] = "IO5650";
    TA1REC.TA1FUNC = "RETN";
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat; /* save the original sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes}; /* abend module*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user area*/
    COMMAREA.CATOAP = "MN0M"; /* go back to the o/m*/
    sysVar.transferName = "MN0M";
    transfer to transaction sysVar.transferName passing COMMAREA;
  end

end // end OP0JS-MSR-INSERT

// Fetch next item-IO0440
Function OP0JS-NEXT-ITEM()

   /* Call the I/O mod to read an item record.*/

  call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};


   /* Stop program if error has occurred.*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* Next sentence - no errors, so do nothing.*/

  else
     /* Error has occurred.  Set up TA1REC fields and exit*/

    TA1REC.TA1PGMNM = "OP0J    ";
    TA1REC.TA1MAP = "OP0JM001";
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOCAT[1] = "OP0J001 ";
    TA1REC.TA1LOCAT[2] = "NEXT-ITE";
    TA1REC.TA1LOCAT[3] = "IO0440  ";
    TA1REC.TA1LOCAT[4] = "SN      ";
    OP0JS-CUSTOM-ERR(); /* Force exit from cresting loop*/
  end
end // end OP0JS-NEXT-ITEM

// Store OCD Header
Function OP0JS-OCD-HEADER()

                /* Store OCD Header Record*/

    /* Copy the current values from OP1REC to VOCHDR01*/

  VOCHDR01.OP1PARTN = OP1REC.OP1PARTN;
  VOCHDR01.OP1CUOID = OP1REC.OP1CUOID;
  VOCHDR01.OP1NORID = OP1REC.OP1NORID;
  VOCHDR01.SOCD-APPL-SRC-CD = "OP";
  VOCHDR01.SOCD-CURR-CU-CO-ID = OP1REC.KUCCOID;
  VOCHDR01.SOCD-CURR-STOR-ID = OP1REC.KUMSTRID;
  VOCHDR01.SOCD-CURR-XNX-DEPT = OP1REC.XNXCD;
  VOCHDR01.SOCD-CURR-GPC-CD = OP1REC.XGPCD;
  VOCHDR01.SOCD-INIT-RPT-FL = "N";
  VOCHDR01.SOCD-CURR-SPGM-ID = OP1REC.SP1ID;
  VOCHDR01.SOCD-CURR-NEED-DT = OP1REC.OP1CUNDT;
  VOCHDR01.SOCD-CURR-XOT-CD = OP1REC.XOTCD;
  VOCHDR01.SOCD-CURR-CUST-PO = OP1REC.OP1CUPO;
  VOCHDR01.OP1CUPO = OP1REC.OP1CUPO;
  VOCHDR01.OP-ORIG-NEED-DT = OP1REC.OP1CUNDT;
  VOCHDR01.XPTCD = OP1REC.XPTCD;
  VOCHDR01.OP1DSBDT = OP1REC.OP1DSBDT;
  VOCHDR01.OP1DSADT = OP1REC.OP1DSADT;
  VOCHDR01.SOCD-ORD-DELT-FL = "N";
  VOCHDR01.SOCD-ORD-RVW-FL = "N";
  VOCHDR01.SOCD-LAST-RPT-DT = 0;
  VOCHDR01.SOCD-RPT-HHMMSS = 0;
  VOCHDR01.ZZZSDT = OP1REC.ZZZSDT;
  VOCHDR01.ZZZSTM = OP1REC.ZZZSTM;
  VOCHDR01.ZZZCHGDT = OP1REC.ZZZCHGDT;
  VOCHDR01.ZZZCHGTM = OP1REC.ZZZCHGTM;
  VOCHDR01.ZZZCHGCT = OP1REC.ZZZCHGCT;

  call "VOCHDR01" ("A ", SQLCA, VOCHDR01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
  else
    set TA1REC empty;
    TA1REC.TA1DBASE = "DORDCD";
    TA1REC.TA1TBLVU = "VOCHDR01";
    OP0JW03.OP0JWPRT = VOCHDR01.OP1PARTN;
    OP0JW03.OP0JWCID = VOCHDR01.OP1CUOID;
    OP0JW03.OP0JWNID = VOCHDR01.OP1NORID;
    OP0JW03.OP0JWITE = 0;
    TA1REC.TA1TBLKE = OP0JW03.OP0JWEKY;
    TA1REC.TA1LOCAT[2] = "A     ";
    TA1REC.TA1LOCAT[3] = "OP0JS-OCD-HEADER";
    TA1REC.TA1LOCAT[4] = "VOCHDR01";
    if (SQLCA.VAGen_SQLCODE == -911) /* dead lock*/
      OP0JS70(); /* post, restart op0j from beginning*/
    else
      XSOPS02(); /* abort program*/
    end
  end



end // end OP0JS-OCD-HEADER

// Store OCD Items & Sizes
Function OP0JS-OCD-ITEMS()
                /* Store OCD items & Sizes*/

    /* Copy the current values from OP1REC to VOCHDR01*/

  set WOZ2100 empty;

  WOZ2100.OZ2100-OP-ORD-PART-CHAR = OP1REC.OP1PARTN;
  WOZ2100.OZ2100-OP-CUST-ORD-ID = OP1REC.OP1CUOID;
  WOZ2100.OZ2100-OP-NIKE-ORD-ID = OP1REC.OP1NORID;
  WOZ2100.OZ2100-SOCD-APPL-SRC-CD = "OP";

  call "OZ2100" (WOZ2100) {isNoRefresh = yes, isExternal = yes};

  if (WOZ2100.OZ2100-RETURN-CD == "00") /* good return*/
     /* ok - next sentence*/
  else
    if (WOZ2100.OZ2100-RETURN-CD == "03") /* data base busy*/
      OP0JS70(); /* post, restart op0j from beginning*/
    else
      XSOPS02(); /* abort program*/
    end
  end
end // end OP0JS-OCD-ITEMS

// process the bulk for cred chk
Function OP0JS-PROCESS-BULK()

       /* *******************************************************/
       /* * Read through all the bulk suborders and call credit**/
       /* * for each.                                          **/
       /* *******************************************************/

  set OP0JW05 empty; /* init save work record*/

  OP0JW05.OP1GROUP = OP1REC.OP1GROUP; /* save the draw order hdr*/

  OP0JS-SS-BULKS(); /* select set of bulk suborders*/

  OP0JS-SN-BULKS(); /* select next bulk suborder*/

  while (SQLCA.VAGen_SQLCODE == 0) /* while good return*/
    OP0JS-CRED-CHK-BLK(); /* credit check the bulk suborder*/
    if (CC1REC.CC1RTNCD == 0) /* good return from credit*/
      OP0JS-UPD-BULK(); /* update the bulk suborder header*/
    end
    OP0JS-SN-BULKS(); /* select the next bulk suborder*/
  end

  OP0JS-CS-BULKS(); /* close bulk suborder cursor*/

  OP1REC.OP1GROUP = OP0JW05.OP1GROUP; /* restore the draw hdr*/

   /* ************************************************************/
end // end OP0JS-PROCESS-BULK

// get items for msr edit
Function OP0JS-PROCESS-MSR()

      /* this select gets the line items for one sub-order*/
      /* at a time.*/

  OP8REC.OP8TASK = "SS";
  OP8REC.OP8LOCAT[3] = "OP0J-MS";
  OP8REC.OP8LOCAT[4] = "R-ITEMS";
  OP8REC.OP8MAP = " ";

  OP3REC.OP1PARTN = OP1REC.OP1PARTN;
  OP3REC.OP1CUOID = OP1REC.OP1CUOID;
  OP3REC.OP1NORID = 0; /* ALL SUBORDERS*/
  OP3REC.OP2LNINB = 0;

  call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes}; /* select all line-items*/

  if (OPBREC.OPBSZRC == 0)
    OP0JS-GET-ITM(); /* now read the items*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* synpoint rollback*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    COMMAREA.CATOAP = "MN0M";
    sysVar.transferName = "MN0M";
    transfer to transaction sysVar.transferName passing COMMAREA;
  end



end // end OP0JS-PROCESS-MSR

// Get product-IO0560
Function OP0JS-PROD-LOOKUP()

       /* *******************************************************/
       /* * This statement gets a product record. It is only   **/
       /* * used when checking for custom logo.                **/
       /* *******************************************************/

  SYCREC.SY1STNBR = OP2REC.SY1STNBR;
  SYCREC.SY2CLRID = OP2REC.SY2CLRID;
  SYCREC.XDMCD = OP2REC.XDMCD;
  SYCREC.XGPCD = OP2REC.XGPCD;

  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* OK(not found is not OK)*/
  else
    TA1REC.TA1DBASE = "DPROD "; /* database used*/
    TA1REC.TA1TBLVU = "VCOLOR02"; /* view used*/
    OP0JW01.OP0JW-EK2-XGPCD = OP2REC.XGPCD;
    OP0JW01.OP0JW-EK2-FILL-1 = " ";
    OP0JW01.OP0JW-EK2-SY1STNBR = OP2REC.SY1STNBR;
    OP0JW01.OP0JW-EK2-FILL-2 = " ";
    OP0JW01.OP0JW-EK2-SY2CLRID = OP2REC.SY2CLRID;
    OP0JW01.OP0JW-EK2-FILL-3 = " ";
    OP0JW01.OP0JW-EK2-XDMCD = OP2REC.XDMCD;
    TA1REC.TA1TBLKE = OP0JW01.OP0JW-EK2-KEY; /* record key used*/
    TA1REC.TA1LOCAT[3] = "PROD-LOO"; /* statement group used*/
    TA1REC.TA1LOCAT[4] = "IO0560"; /* iomod used*/
    OP0JS-CUSTOM-ERR(); /* Force exit from cresting loop*/
  end


   /* --Added for Canada --  june 19, 1995 --*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (OP1REC.XDZ-DATA-DIST-CD == "CA")
      OP0JW01.OP0JW-WSY2000-FND-FLAG = " ";
      OP0JS-GET-WSY2000();
    else
      if (WSY2000.WSY2000-RETURN-CODE == "98")
        OPAREC.OPAERR = "Y";
        converseLib.validationFailed(010); /* data base busy*/
        return;
      else
        if (OP0JW01.OP0JW-WSY2000-FND-FLAG == "Y")
          /* next sentence*/
        else
          if (OP0JW01.OP0JW-WSY2000-FND-FLAG == "N")
            TA1REC.TA1DBASE = "DPROD "; /* database used*/
            TA1REC.TA1TBLVU = "VCOLOR02"; /* view used*/
            OP0JW01.OP0JW-EK2-XGPCD = OP2REC.XGPCD;
            OP0JW01.OP0JW-EK2-FILL-1 = " ";
            OP0JW01.OP0JW-EK2-SY1STNBR = OP2REC.SY1STNBR;
            OP0JW01.OP0JW-EK2-FILL-2 = " ";
            OP0JW01.OP0JW-EK2-SY2CLRID = OP2REC.SY2CLRID;
            OP0JW01.OP0JW-EK2-FILL-3 = " ";
            OP0JW01.OP0JW-EK2-XDMCD = OP2REC.XDMCD;
            TA1REC.TA1TBLKE = OP0JW01.OP0JW-EK2-KEY;
                                   /* record key used*/
            TA1REC.TA1LOCAT[3] = "PROD-LOO"; /* statement group used*/
            TA1REC.TA1LOCAT[4] = "SY2000"; /* iomod used*/
            OP0JS-CUSTOM-ERR(); /* Force exit from cresting loop*/
          else
            OPAREC.OPAERR = "Y";
            converseLib.validationFailed(909); /* fatal db error*/
            return;
          end
        end
      end
    end
  end


end // end OP0JS-PROD-LOOKUP

// sales ofc 59-alloc hold warnin
Function OP0JS-SLS59-WARN()
   /* *************************************************************/
   /* New statement group added for the golf cresting project   **/
   /* Orders for sales office will put on allocation hold '05'  **/
   /* 04/17/00 sbhara  TT#4073                                  **/
   /* *************************************************************/

  if (OP1REC.XSOCD == "59" /* if the sales office 59*/
   && OP0JM001.OPMUMSG == " ") /* no other warning message yet*/
    OP0JM001.OPMUMSG = OP0JT01.OP0JTMSG[7]; /* xahcd '05' for xso 59*/
  else
    return;
  end
end // end OP0JS-SLS59-WARN

// Read the next bulk record
Function OP0JS-SN-BULKS()

   /* Call the I/O mod to read the next bulk order header record.*/

  set SQLCA empty;

  call "IO0430" ("SN", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};


   /* Stop program if error has occurred.*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* Next sentence - no errors, so do nothing.*/
  else
     /* Error has occurred.  Set up TA1REC fields and abend.*/

    TA1REC.TA1PGMNM = "OP0J    ";
    TA1REC.TA1MAP = "OP0JM001";
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VORHDR01";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOCAT[1] = "OP0JS-SN-BULKS/IO0430/SN";
    XSOPS02(); /* Force an abend.*/
  end
end // end OP0JS-SN-BULKS

// Spain/canary validation
Function OP0JS-SPAIN-CHECK()
   /* ***************************************************************/
   /* TT#4654         03/15/00       NKATHI                        **/
   /* This statement group calls NIKEBOTH(op6410) to validate      **/
   /* the product(style) details on the order for SPAIN/CANARY     **/
   /* compliance.                                                  **/
   /* Based on the return code from nikeboth,further validations   **/
   /* are done.                                                    **/
   /* ***************************************************************/

   /* TT#4654  SPAIN CHANGES Begin ******************/
  set OP10REC empty;

  OP10REC.OP1CUOID = OP1REC.OP1CUOID;
  OP10REC.KUCCOID = OP1REC.KUCCOID;
  OP10REC.KUMSTRID = OP1REC.KUMSTRID;
  OP10REC.OP11TMSF = OP1REC.OP11TMSF;
  OP10REC.OP1SGPAO = OP1REC.OP1SGPAO;
  OP10REC.OP1SHAID = OP1REC.OP1SHAID;
  OP10REC.OP10-PASSING-APPL = "OP0J";
  OP10REC.OP10-RETURN-CODE = "99"; /* Init rtn code*/

  call "OP6410" (OP10REC) {isNoRefresh = yes, isExternal = yes}; /* Spain/canary compliant check*/

  if (OP10REC.OP10-RETURN-CODE == "00" /* Product is spain/cnry compliant*/
   || OP10REC.OP10-RETURN-CODE == "01") /* country code is not spain/cnry*/
    /* NEXT SENTENCE*/
  else
    if (OP10REC.OP10-RETURN-CODE == "02") /* Product is Spain/cnry non-*/
                                  /* compliant*/
      converseLib.validationFailed(1001);
      exit stack;
    else
      if (OP10REC.OP10-RETURN-CODE == "03") /* DEADLOCK HAS OCCURED*/
        OP0JS70();
      else
        set TA1REC empty;
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* current application*/
        TA1REC.TA1LOC = "OP0JS-SPAIN-CHECK"; /* location*/
        TA1REC.TA1MAP = "OP0JM005"; /* map*/
        XSOPS-OP6410-ERRTN(); /* call error routine*/
      end
    end
  end
   /* TT#4654  SPAIN CHANGES End ******************/
end // end OP0JS-SPAIN-CHECK

// Set cursor for read of bulks
Function OP0JS-SS-BULKS()

   /* Set up the cursor to read all the bulk suborders for the draw.*/

  set OP1REC empty;
  set SQLCA empty;

  OP0JW01.OP0JW-REDEF-ORD-ID = OP0JW05.OP1BLKID;
  OP1REC.OP1PARTN = OP0JW01.OP0JW-REDEF-PRT-CHAR; /* Part char*/
  OP1REC.OP1CUOID = OP0JW05.OP1BLKID; /* Customer order id*/
  OP1REC.OP1NORID = 0; /* Nike order id*/


   /* Call the I/O mod to set the cursor.*/

  call "IO0430" ("SS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};


   /* Abend if an error has occurred.*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* Next sentence - no errors, so do nothing.*/
  else
     /* Error has occurred.  Set up TA1REC fields.*/

    TA1REC.TA1PGMNM = "OP0J    ";
    TA1REC.TA1MAP = "OP0JM001";
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VORHDR01";

     /* Format the key of the cursor.*/
    OP0JW03.OP0JWPRT = OP1REC.OP1PARTN; /* display part char*/
    OP0JW03.OP0JWCID = OP1REC.OP1CUOID; /* display cust ord id*/
    OP0JW03.OP0JWNID = OP1REC.OP1NORID; /* display nike ord id*/
    OP0JW03.OP0JWITE = 0;
    TA1REC.TA1TBLKE = OP0JW03.OP0JWEKY;

    TA1REC.TA1LOC = "OP0JS-SS-BULKS/IO0430/SS";
    XSOPS02(); /* Force an abend.*/
  end
end // end OP0JS-SS-BULKS

// stop whse 27 orders getting in
Function OP0JS-STP-WH27-ORD()
   /* *****************************************************************/
   /* This statement group is added as part of gold cresting changes **/
   /* Warehouse 27 in Pheonix is closing down on 05/31/2000. Don't   **/
   /* allow any warehouse 27 orders                                  **/
   /* *****************************************************************/

  sysVar.arrayIndex = 1; /* ini counter*/

  while (sysVar.arrayIndex <= 10) /* check all 10 sub-orders*/
    if (OPWREC.XWHCD[sysVar.arrayIndex] == "27" /* if whse 27*/
     && OPWREC.OP1OTUNT[sysVar.arrayIndex] > 0) /* valid sub-order*/
      OPAREC.OPAERR = "Y"; /* set error flag*/
      converseLib.validationFailed(1007); /* wrhse 27 is invalid*/
      return; /* rtn don't process*/
    end /* end if statement*/
    sysVar.arrayIndex = sysVar.arrayIndex + 1; /* increment counter*/
  end /* end while statement*/
end // end OP0JS-STP-WH27-ORD

// Update bulk suborder header
Function OP0JS-UPD-BULK()

   /* Update the bulk suborder header.*/

  call "IO0430" ("U ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};


   /* Abend if an error has occurred.*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* Next sentence - no errors, so do nothing.*/
  else
     /* Error has occurred.  Set up TA1REC fields.*/

    TA1REC.TA1PGMNM = "OP0J    ";
    TA1REC.TA1MAP = "OP0JM001";
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VORHDR01";

     /* Format the key of the cursor.*/
    OP0JW03.OP0JWPRT = OP1REC.OP1PARTN; /* display part char*/
    OP0JW03.OP0JWCID = OP1REC.OP1CUOID; /* display cust ord id*/
    OP0JW03.OP0JWNID = OP1REC.OP1NORID; /* display nike ord id*/
    OP0JW03.OP0JWITE = 0;
    TA1REC.TA1TBLKE = OP0JW03.OP0JWEKY;

    TA1REC.TA1LOC = "OP0JS-UPD-BULKS/IO0430/U ";
    XSOPS02(); /* Force an abend.*/
  end
end // end OP0JS-UPD-BULK

// write msr prepack record
Function OP0JS-WRITE-MSR()

   /* insert the prepack quantities for each line item if msr edit is ok*/

   /* get line item by calling db1000*/

      /* this select gets the line items for one sub-order*/
      /* at a time.*/

  OP8REC.OP8TASK = "SS";
  OP8REC.OP8LOCAT[3] = "OP0J-MS";
  OP8REC.OP8LOCAT[4] = "R-ITEMS";
  OP8REC.OP8MAP = " ";

  OP3REC.OP1PARTN = OP1REC.OP1PARTN;
  OP3REC.OP1CUOID = OP1REC.OP1CUOID;
  OP3REC.OP1NORID = 0; /* ALL SUBORDERS*/
  OP3REC.OP2LNINB = 0;

  call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes}; /* select all line-items*/

  if (OPBREC.OPBSZRC == 0)
    OP0JS-GET-MSR-ITM(); /* now read the items*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* synpoint rollback*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    COMMAREA.CATOAP = "MN0M";
    sysVar.transferName = "MN0M";
    transfer to transaction sysVar.transferName passing COMMAREA;
  end

end // end OP0JS-WRITE-MSR

// Transfer to cust contact
Function OP0JS-XFR-AE08()

   /* ************************************************************/
   /* Transfer to the customer contact screen for custom*/
   /* logo orders. For transfers between OP and AE applications,*/
   /* use a special common area (OPABREC) that contains the system*/
   /* record (OPWREC) and additional fields needed by AE appls.*/
   /* ************************************************************/

  set OPABREC empty; /* Init pass record*/

   /* Set up OPWREC same as if transferring to OP0B*/

  OPWREC.OPWMSGC1 = "01"; /* To display order accepted msg*/
  OPWREC.OPWPORD = OP1REC.OP1CUOID; /* Previous order number*/
  OPWREC.OP1GROUP = OP1REC.OP1GROUP; /* Save OP1REC*/

   /* Move OPWREC to system record portion of OPABREC*/

  OPABREC.OPAB-SYS-GRP = OPWREC.OPWSGRP;

   /* The next fields are needed by AE09.*/
   /* OP1REC is for order just completed and committed.*/

  OPABREC.OP-ORD-PART-CHAR = OP1REC.OP1PARTN;
  OPABREC.OP-CUST-ORD-ID = OP1REC.OP1CUOID;
  OPABREC.OPAB-TO-APPL = "OP0J";

   /* Move pass record to commarea and transfer*/

  COMMAREA.CA-USER-WORKAREA-4K = OPABREC.OPAB-COMMON-REC;
  COMMAREA.CACURRAP = "AE08";
  COMMAREA.CAFROMAP = "OP0J";
  sysVar.transferName = "AE08";
  transfer to transaction sysVar.transferName passing COMMAREA; /* Transfer*/

end // end OP0JS-XFR-AE08

// Transfer to crest instructions
Function OP0JS-XFR-AE09()

   /* *******************************************************/
   /* Set up for current item and transfer to the product*/
   /* cresting information application*/
   /* *******************************************************/

   /* Move new values for fields changed since last transfer*/

  OPABREC.OP-NIKE-ORD-ID = OP2REC.OP1NORID;
  OPABREC.OP-LINE-ITEM-NBR = OP2REC.OP2LNINB;
  OPABREC.SY-STY-NBR = OP2REC.SY1STNBR;
  OPABREC.SY-COLR-CD-ID = OP2REC.SY2CLRID;
  OPABREC.XDM-DIM-CD = OP2REC.XDMCD;
  OPABREC.OPAB-TO-APPL = "OP0J";

  COMMAREA.CA-USER-WORKAREA-4K = OPABREC.OPAB-COMMON-REC;

  COMMAREA.CACURRAP = "AE09";
  COMMAREA.CAFROMAP = "OP0J";
  COMMAREA.CATOAP = "    ";
  sysVar.transferName = "AE09";
  transfer to transaction sysVar.transferName passing COMMAREA; /* Transfer*/

end // end OP0JS-XFR-AE09

// update the bulk order header
Function OP0JS05()



       /* *******************************************************/
       /* * this statement group updates the order header      **/
       /* * record (op1rec) of the bulk order after the draw   **/
       /* * order is accepted                                  **/
       /* *******************************************************/



  OP0JW01.OP1OVALU = 0; /* init sub-order value*/
  OP0JW01.OP1OTUNT = 0; /* inti sub-order units*/

  OP0JW01.OP0JWEOF = "N"; /* init end of line-item table flag*/

       /* read line bulk order line item table*/

  OPAREC.OPAORDN = OP1REC.OP1BLKID;
  OP2REC.OP1PARTN = OPAREC.OP1PARTN;
  OP2REC.OP1CUOID = OP1REC.OP1BLKID;
  OP2REC.OP1NORID = 0;

  call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      OP0JW01.OP1NORID = OP2REC.OP1NORID; /* save sub-ord id*/
      OP0JW01.OP1OVALU = OP0JW01.OP1OVALU + OP2REC.OP2LNIVL;
      OP0JW01.OP1OTUNT = OP0JW01.OP1OTUNT + OP2REC.OP2TONOQ;
      OP0JS06(); /* accumulate dollars and units*/
    else
      TA1REC.TA1DBASE = "DORDER"; /* database used*/
      TA1REC.TA1TBLVU = "VITEM001"; /* view used*/
      TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* record key used*/
      TA1REC.TA1LOCAT[3] = "OP0JS05"; /* statement group used*/
      TA1REC.TA1LOCAT[4] = "IO0440"; /* iomod used*/
      XSOPS02(); /* abort routine*/
    end
  end
  call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};



   /* ************************************************************/
end // end OP0JS05

// update the bulk order op1rec
Function OP0JS06()



       /* *******************************************************/
       /* * this statement group updates the total-order-units **/
       /* * and the total-order-values of the bulk order header**/
       /* * record after the draw order is accepted            **/
       /* *******************************************************/


       /* init the abend screen*/

  TA1REC.TA1DBASE = "DORDER";
  TA1REC.TA1TBLVU = "VORHDR01";
  TA1REC.TA1TBLKE = OP1REC.OP1KEY;
  TA1REC.TA1LOCAT[3] = "OP0JS06";
  TA1REC.TA1LOCAT[4] = "IO0430";


  while (OP0JW01.OP0JWEOF == "N")
    call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      if (OP2REC.OP1NORID == OP0JW01.OP1NORID)
        OP0JW01.OP1OVALU = OP0JW01.OP1OVALU + OP2REC.OP2LNIVL; /* ord value*/
        OP0JW01.OP1OTUNT = OP0JW01.OP1OTUNT + OP2REC.OP2TONOQ; /* ord units*/
      else
        OP0JW01.OP0JWCNT = 1; /* init change count*/
        OP0JS07(); /* update bulk op1rec*/
        OP0JW01.OP1NORID = OP2REC.OP1NORID; /* save sub-order id*/
        OP0JW01.OP1OVALU = 0; /* init bulk sub-ord value*/
        OP0JW01.OP1OTUNT = 0; /* init bulk sub-ord units*/
        OP0JW01.OP1OVALU = OP0JW01.OP1OVALU + OP2REC.OP2LNIVL; /* ord value*/
        OP0JW01.OP1OTUNT = OP0JW01.OP1OTUNT + OP2REC.OP2TONOQ; /* ord units*/
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        OP0JW01.OP0JWEOF = "Y"; /* set end-of-table flag*/
        OP0JS07(); /* update the last bulk sub-ord*/
      else
        XSOPS02(); /* abort program*/
      end
    end
  end



   /* ************************************************************/
end // end OP0JS06

// rewrite bulk order header rec
Function OP0JS07()



       /* ********************************************************/
       /* * this statement group rewrites the bulk order record **/
       /* * with the new total-order-units, the new total-order-**/
       /* * value, and the new number-of-draws.                 **/
       /* ********************************************************/


       /* init the abend screen*/

  TA1REC.TA1DBASE = "DORDER";
  TA1REC.TA1TBLVU = "VORHDR01";
  OP0JW03.OP0JWPRT = OP2REC.OP1PARTN; /* part char*/
  OP0JW03.OP0JWCID = OP2REC.OP1CUOID; /* cust ord id*/
  OP0JW03.OP0JWNID = OP0JW01.OP1NORID; /* nike ord id*/
  OP0JW03.OP0JWITE = 0; /* line item*/
  TA1REC.TA1TBLKE = OP0JW03.OP0JWEKY; /* format key*/
  TA1REC.TA1LOCAT[3] = "OP0JS07";
  TA1REC.TA1LOCAT[4] = "IO0430";


       /* read the bulk order header table*/

  OP1REC.OP1PARTN = OP2REC.OP1PARTN;
  OP1REC.OP1CUOID = OP2REC.OP1CUOID;
  OP1REC.OP1NORID = OP0JW01.OP1NORID;
  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    XSOPS02(); /* abort program*/
  end


  if (OP1REC.XOSCD == "XL") /* cancelled*/
    return; /* go back*/
  end

       /* update the bulk only if it was drawn from*/

  if (OP0JW01.OP1OVALU == OP1REC.OP1OVALU /* draw was not from this*/
   && OP0JW01.OP1OTUNT == OP1REC.OP1OTUNT) /* suborder so don't update*/
    return;
  else
    OP1REC.OP1NDRAW = OP1REC.OP1NDRAW + 1; /* increment num-of-draws*/
    OP1REC.OP1OVALU = OP0JW01.OP1OVALU; /* update tot-ord-value*/
    OP1REC.OP1OTUNT = OP0JW01.OP1OTUNT; /* update tot-ord-units*/
  end


  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";

  call "TA0040" (TA2REC) {isExternal = yes};

  if (TA2REC.TA2RTNCD != 0)
    TA1REC.TA1DBASE = " ";
    TA1REC.TA1TBLVU = " ";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOCAT[3] = "OP0JS07";
    TA1REC.TA1LOCAT[4] = "TA0040";
    TA1REC.TA1LOCAT[1] = "GETDATE";
    set SQLCA empty;
    XSOPS02(); /* abort program*/
  else
    OP1REC.ZZZCHGTM = TA2REC.TA2TIMHM;
    OP1REC.ZZZCHGDT = TA2REC.TA2GRGGN;
  end


       /* rewrite the bulk order header record -- if*/
       /* someone else has updated the record since we*/
       /* read it in, try again -- for 5 times before giving up*/


  call "IO0430" ("U ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence               ;*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* change count error*/
      OP0JW01.OP0JWCNT = OP0JW01.OP0JWCNT + 1;
      if (OP0JW01.OP0JWCNT > 5)
         /* give up*/
      else
        OP0JS07(); /* try again*/
      end
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* dead-lock*/
        TA1REC.TA1LOCAT[1] = "      ";
        TA1REC.TA1LOCAT[2] = "U     ";
        OP0JS70(); /* post, restart op0j from beginning*/
      else
        XSOPS02(); /* abort program*/
      end
    end
  end



   /* ************************************************************/
end // end OP0JS07

// delete rejected line-item rec
Function OP0JS10()



       /* *******************************************************/
       /* * if it is draw order, this statement group adds the **/
       /* * drawn quantities by product by size back to the    **/
       /* * bulk order before delete the line-item record      **/
       /* *******************************************************/

       /* if it is draw order, quantities from the rejected*/
       /* line-item records have to be added back to the bulk*/
       /* before the rejected line-item records are deleted*/

  if (OP0JW01.OP0JWBDF == "D") /* draw order*/
    OP0JS11(); /* save draw qty by size*/
    OP0JS12(); /* update bulk & delete draw*/
  else
    OP0JS14(); /* delete line-item rec*/
  end



   /* ********************************************************/
end // end OP0JS10

// save draw ord qty by size
Function OP0JS11()



       /* ******************************************************/
       /* * this statement group saves the line-item key and  **/
       /* * the quantities by size on the rejected draw order **/
       /* ******************************************************/


  set OP0JW02 empty;

       /* save the line-item record key*/

  OP0JW02.OP1PARTN = OP3REC.OP1PARTN;
  OP0JW02.OP1CUOID = OP3REC.OP1CUOID;
  OP0JW02.OP1NORID = OP3REC.OP1NORID;
  OP0JW02.OP2LNINB = OP3REC.OP2LNINB;


       /* save quantities by size*/

  OPAREC.OPASUB2 = 1;

  while (OPAREC.OPASUB2 < 41)
    if (OP3REC.OP3SZAFL[OPASUB2] == "Y")
      OP0JW02.OP0JWORG[OPASUB2] = OP3REC.OP3ORGQT[OPASUB2];
      OP0JW02.OP0JWONO[OPASUB2] = OP3REC.OP3ONOQT[OPASUB2];
      OP0JW02.OP0JWOHR[OPASUB2] = OP3REC.OP3OHRQT[OPASUB2];
      if (OP3REC.OP3ALQT[OPASUB2] > 0)
        OP0JW02.OP0JWOHR[OPASUB2] = OP0JWOHR[OPASUB2] + OP3REC.OP3ALQT[OPASUB2];
      end
    end
    OPAREC.OPASUB2 = OPAREC.OPASUB2 + 1;
  end


   /* ************************************************************/
end // end OP0JS11

// get line-item on bulk order
Function OP0JS12()



       /* *******************************************************/
       /* * this statement group looks for the right line item **/
       /* * on the bulk order to add back the drawn quantities **/
       /* *******************************************************/

   /* t shirt draws use a finished product number while the*/
   /* bulk you are drawing from uses a blank product number.*/
   /* therefore when a draw orders line item is canceled and*/
   /* you are adding it back to the bulk you need to convert*/
   /* from the finished product number to the blank product*/
   /* number since it is the blank product number you are*/
   /* adding back to the bulk. (is this weird or what?)*/
   /* so, thats what we are doing in the next few lines of*/
   /* code. vcolor02 carries the blank product number that*/
   /* corresponds to the finished product number. tfox 2/20/91*/

  if (OP1REC.XBDCD == "F" /* tshirt finished bulk*/
   || OP1REC.XBDCD == "8") /* tshirt finished draw*/
    SYCREC.SY1STNBR = OP3REC.SY1STNBR;
    SYCREC.SY2CLRID = OP3REC.SY2CLRID;
    SYCREC.XDMCD = OP3REC.XDMCD;
    SYCREC.XGPCD = OP3REC.XGPCD;

    call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
      OP3REC.SY1STNBR = SYCREC.SY1BSTNB;
      OP3REC.SY2CLRID = SYCREC.SY2BCLCD;
      OP3REC.XDMCD = SYCREC.XDMCD;
    else
      TA1REC.TA1DBASE = "DPROD "; /* database used*/
      TA1REC.TA1TBLVU = "VCOLOR02"; /* view used*/
      TA1REC.TA1TBLKE = OP3REC.OP2KEY; /* record key used*/
      TA1REC.TA1LOCAT[3] = "OP0JS12"; /* statement group used*/
      TA1REC.TA1LOCAT[4] = "IO0560"; /* iomod used*/
      XSOPS02(); /* abort routine*/
    end
  end

       /* read bulk order line item table*/

  OPAREC.OPAORDN = OP1REC.OP1BLKID;
  OP2REC.OP1PARTN = OPAREC.OP1PARTN;
  OP2REC.OP1CUOID = OP1REC.OP1BLKID;
  OP2REC.OP1NORID = OPWREC.OPWBNOID;

  call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    OP0JW01.OP0JWFND = "N";
    while (SQLCA.VAGen_SQLCODE == 0
     && OP0JW01.OP0JWFND == "N")
      call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        if (OP2REC.SY1STNBR == OP3REC.SY1STNBR /* style matches*/
         && OP2REC.SY2CLRID == OP3REC.SY2CLRID /* color matches*/
         && OP2REC.XDMCD == OP3REC.XDMCD       /* dimension matches*/
         && OP2REC.OP1NORID == OP3REC.OP1NORID) /* allow for dup product*/
          /* on bulk ord*/
          OP3REC.OP2LNINB = OP2REC.OP2LNINB; /* save bulk line-item*/
          OP3REC.OP1NORID = OP2REC.OP1NORID; /* save bulk sub-ord id*/
          OP0JW01.OP0JWCNT = 0; /* init change count*/
          OP0JW01.OP0JWFND = "Y";
          OP0JS13(); /* add drawn qty back to bulk ord*/
        end
      else
        if (SQLCA.VAGen_SQLCODE == 100)
           /* next sentence*/
        else
          TA1REC.TA1DBASE = "DORDER"; /* database used*/
          TA1REC.TA1TBLVU = "VITEM001"; /* view used*/
          TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* record key used*/
          TA1REC.TA1LOCAT[3] = "OP0JS12"; /* statement group used*/
          TA1REC.TA1LOCAT[4] = "IO0440"; /* iomod used*/
          XSOPS02(); /* abort routine*/
        end
      end
    end
  end
  call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};



       /* read bulk order line item table again*/
       /* if it was not found the first time.*/
       /* this time find the item without trying to*/
   /* match the nike sub order*/


  if (OP0JW01.OP0JWFND == "N")
    OPAREC.OPAORDN = OP1REC.OP1BLKID;
    OP2REC.OP1PARTN = OPAREC.OP1PARTN;
    OP2REC.OP1CUOID = OP1REC.OP1BLKID;
    OP2REC.OP1NORID = OPWREC.OPWBNOID;

    call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      OP0JW01.OP0JWFND = "N";
      while (SQLCA.VAGen_SQLCODE == 0
       && OP0JW01.OP0JWFND == "N")
        call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
        if (SQLCA.VAGen_SQLCODE == 0)
          if (OP2REC.SY1STNBR == OP3REC.SY1STNBR /* style matches*/
           && OP2REC.SY2CLRID == OP3REC.SY2CLRID /* color matches*/
           && OP2REC.XDMCD == OP3REC.XDMCD)      /* dimension matches*/
            OP3REC.OP2LNINB = OP2REC.OP2LNINB; /* save bulk line-item*/
            OP3REC.OP1NORID = OP2REC.OP1NORID;
                                   /* save bulk sub-ord id*/
            OP0JW01.OP0JWCNT = 0; /* init change count*/
            OP0JW01.OP0JWFND = "Y";
            OP0JS13(); /* add drawn qty back to bulk ord*/
          end
        else
          if (SQLCA.VAGen_SQLCODE == 100)
             /* next sentence*/
          else
            TA1REC.TA1DBASE = "DORDER"; /* database used*/
            TA1REC.TA1TBLVU = "VITEM001"; /* view used*/
            TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* record key used*/
            TA1REC.TA1LOCAT[3] = "OP0JS12"; /* statement group used*/
            TA1REC.TA1LOCAT[4] = "IO0440"; /* iomod used*/
            XSOPS02(); /* abort routine*/
          end
        end
      end
    end
    call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ************************************************************/
end // end OP0JS12

// read bulk order line-item tabl
Function OP0JS13()



       /* ********************************************************/
       /* * this statement group reads the bulk order line item **/
       /* * table to find the right product to add back the     **/
       /* * drawn quantities                                    **/
       /* ********************************************************/


  TA1REC.TA1DBASE = "DORDER";
  TA1REC.TA1TBLVU = "FORMATTER";
  TA1REC.TA1TBLKE = OP3REC.OP2KEY;
  TA1REC.TA1LOCAT[3] = "OP0JS13";
  TA1REC.TA1LOCAT[4] = "DB1000";


       /* load keys*/

  OP8REC.OP8TASK = "S ";
  OP8REC.OP8LOCAT[1] = "OP0J005";
  OP8REC.OP8LOCAT[2] = "OP0JS13";
  OP8REC.OP8LOCAT[3] = " ";
  OP8REC.OP8LOCAT[4] = " ";
  OP8REC.OP8MAP = "OP0JM001";


       /* load keys to read the op3rec*/

  OPAREC.OPAORDN = OP1REC.OP1BLKID;
  OP3REC.OP1PARTN = OPAREC.OP1PARTN;
  OP3REC.OP1CUOID = OP1REC.OP1BLKID;
      /* loading nike order id and line-item # are*/
      /* done before we got here*/


  call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};

  if (OPBREC.OPBSZRC == 0) /* line item found*/
    OP0JW01.OP0JWCNT = OP0JW01.OP0JWCNT + 1; /* increment change count*/
  else
    XSOPS02(); /* abort program*/
  end


       /* Initialize non-existant sizes on the bulk to prevent S0C7's*/
       /* CSP 4.1 Change!!*/

  OPAREC.OPASUB2 = 1;
  while (OPAREC.OPASUB2 < 41)
    if (OP3REC.OP3SZAFL[OPASUB2] != "Y")
      OP3REC.SY5PRCUN[OPASUB2] = 0;
      OP3REC.OP3ORGQT[OPASUB2] = 0;
      OP3REC.OP3ONOQT[OPASUB2] = 0;
      OP3REC.OP3ALQT[OPASUB2] = 0;
      OP3REC.OP3OHRQT[OPASUB2] = 0;
      OP3REC.OP3WPRQT[OPASUB2] = 0;
      OP3REC.OP3SHPQT[OPASUB2] = 0;
      OP3REC.OP3CNLQT[OPASUB2] = 0;
    end
    OPAREC.OPASUB2 = OPAREC.OPASUB2 + 1;
  end

       /* add rejected quantities by size back to the*/
       /* bulk order*/

  OPAREC.OPASUB2 = 1;

  while (OPAREC.OPASUB2 < 41)
    if (OP0JW02.OP0JWONO[OPASUB2] > 0)
      OP3REC.OP3ORGQT[OPASUB2] = OP3REC.OP3ORGQT[OPASUB2] + OP0JWORG[OPASUB2];
      OP3REC.OP3ONOQT[OPASUB2] = OP3REC.OP3ONOQT[OPASUB2] + OP0JWONO[OPASUB2];
      OP3REC.OP3OHRQT[OPASUB2] = OP3REC.OP3OHRQT[OPASUB2] + OP0JWOHR[OPASUB2];

         /* update the total-drawn-qty*/

      OP3REC.OP2TDRWQ = OP3REC.OP2TDRWQ - OP0JW02.OP0JWONO[OPASUB2];
    end
    OPAREC.OPASUB2 = OPAREC.OPASUB2 + 1;
  end



       /* update the line-item rec on the bulk order*/

  OP8REC.OP8TASK = "U ";
  call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};

  if (OPBREC.OPBSZRC == 0) /* line item found*/
     /* next sentence*/
  else
    if (OPBREC.OPBSZRC == 2
     || OPBREC.OPBSZRC == 3)
      if (OP0JW01.OP0JWCNT > 5)
        return; /* give up*/
      else
        OP0JS13(); /* try again*/
      end
    else
      if (OPBREC.OPBSZRC == -911) /* dead lock*/
        set TA1REC empty;
        TA1REC.TA1LOCAT[1] = "POSTED";
        OP0JS70(); /* post, restart op0j from beginning*/
      else
        XSOPS02(); /* abort program*/
      end
    end
  end

   /* save bulk order number in case draw was allocated*/

  set OPSREC empty;

  OPSREC.OP1PARTN = OP3REC.OP1PARTN;
  OPSREC.OP1CUOID = OP3REC.OP1CUOID;
  OPSREC.OP1NORID = OP3REC.OP1NORID;



  OP3REC.OP1PARTN = OP0JW02.OP1PARTN; /* reload key*/
  OP3REC.OP1CUOID = OP0JW02.OP1CUOID; /* reload key*/
  OP3REC.OP1NORID = OP0JW02.OP1NORID; /* reload key*/
  OP3REC.OP2LNINB = OP0JW02.OP2LNINB; /* reload key*/


  OP8REC.OP8TASK = "S ";
  OP8REC.OP8LOCAT[1] = "OP0J005";
  OP8REC.OP8LOCAT[2] = "OP0JS13";
  OP8REC.OP8LOCAT[3] = " ";
  OP8REC.OP8LOCAT[4] = " ";
  OP8REC.OP8MAP = "OP0JM001";


  call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};




       /* delete the rejected line-item record*/

  OP0JS14(); /* delete*/



   /* ************************************************************/
end // end OP0JS13

// delete rejected line-item rec
Function OP0JS14()


       /* *******************************************************/
       /* * this statement group deletes the rejected          **/
       /* * line-item record                                   **/
       /* *******************************************************/


       /* if the order was allocated on-line, this statement*/
       /* group must delete the picking transactions, and*/
       /* reverse the allocation process*/
       /* before the rejected line-item record is deleted*/


    /* important !!!!!!!*/
       /* if a db2 abend occurs, this stmt group calls db1000.*/
       /* db1000 has its own interpretation of abend codes.*/
       /* opbszrc passes the abend code back from db1000.*/
       /* it is then moved into sqlca.sqlcode for display.*/
       /* you must go into db1000 to find the meaning of*/
       /* of the abend codes.*/


  OP0JW01.OP0JWSUB = OP3REC.OP1NORID;
  if (OPWREC.OPWNMALP[OP0JWSUB] > 0) /* order was allocated*/
    if (OP3REC.OP2LNIST == "AL") /* product was allocated*/
      OP0JS17(); /* delete picking rec*/
      if (OP0JW01.OP0JWBDF == "D") /* smart draw was allocated*/
        OP0JS22(); /* de-allocation draw*/
      else
        OP0JS18(); /* de-allocation*/
      end
      OP0JS19(); /* clear the refer-to-credit code*/
    end
  end


       /* delete the rejected line-item rec*/

  OP8REC.OP8TASK = "D ";
  OP8REC.OP8LOCAT[1] = "OP0J005";
  OP8REC.OP8LOCAT[2] = "OP0JS14";
  OP8REC.OP8LOCAT[3] = " ";
  OP8REC.OP8LOCAT[4] = " ";
  OP8REC.OP8MAP = "OP0JM001";


  call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};


  if (OPBREC.OPBSZRC == 0)
     /* record deleted              ; delete line-item record*/
  else
    if (OPBREC.OPBSZRC == -911) /* dead-lock*/
      set TA1REC empty;
      TA1REC.TA1LOCAT[1] = "POSTED"; /* frmt already posted msg*/
      OP0JS70(); /* post, restart op0j from beginning*/
    else
      if (OPBREC.OPBSZRC == 1) /* sqlcode = 100*/
        /* next sentence*/
      else
        SQLCA.VAGen_SQLCODE = OPBREC.OPBSZRC;
        XSOPS02(); /* abort program*/
      end
    end
  end




   /* ************************************************************/
end // end OP0JS14

// delete picking records
Function OP0JS17()



       /* ******************************************************/
       /* * if the sub order was allocated,                   **/
       /* * this statement group deletes the picking record   **/
       /* * for the rejected line-item                        **/
       /* ******************************************************/


       /* build picking record key*/

  PK1REC.PK1PRTN = OP3REC.OP1PARTN;
  PK1REC.PK1CUOID = OP3REC.OP1CUOID;
  PK1REC.PK1NORID = OP3REC.OP1NORID;
  PK1REC.PK1LNINB = OP3REC.OP2LNINB;
  PK1REC.PK1ALLNB = 1;


       /* if dead lock occurred, delay for 1 second and*/
       /* then retry for 5 times before giving up*/

  call "IO0910" ("D ", SQLCA, PK1REC) {isNoRefresh = yes, isExternal = yes};

       /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* dead lock*/
      set TA1REC empty;
      TA1REC.TA1DBASE = "DPICK";
      TA1REC.TA1TBLVU = "VPKTRN01";
      OP0JW03.OP0JWPRT = PK1REC.PK1PRTN;
      OP0JW03.OP0JWCID = PK1REC.PK1CUOID;
      OP0JW03.OP0JWNID = PK1REC.PK1NORID;
      OP0JW03.OP0JWITE = PK1REC.PK1LNINB;
      TA1REC.TA1TBLKE = OP0JW03.OP0JWEKY;
      TA1REC.TA1LOCAT[2] = "D     ";
      TA1REC.TA1LOCAT[3] = "OP0JS17";
      TA1REC.TA1LOCAT[4] = "IO0910";
      OP0JS70(); /* post, restart op0j from beginning*/
    else
      TA1REC.TA1DBASE = "DPICK";
      TA1REC.TA1TBLVU = "VPKTRN01";
      TA1REC.TA1TBLKE = PK1REC.PK1KEY;
      TA1REC.TA1LOCAT[3] = "OP0JS17";
      TA1REC.TA1LOCAT[4] = "IO0910";
      XSOPS02(); /* abend*/
      return;
    end
  end



  if (OPWREC.XWHCD[OP0JWSUB] == "02"
   || OPWREC.XWHCD[OP0JWSUB] == "04"
   || OPWREC.XWHCD[OP0JWSUB] == "07"
   || OPWREC.XWHCD[OP0JWSUB] == "51"
   || OPWREC.XWHCD[OP0JWSUB] == "25"
   || OPWREC.XWHCD[OP0JWSUB] == "42") /* Added for Canada 6/16/95*/
    OPIREC.OP1PARTN = OP3REC.OP1PARTN;
    OPIREC.OP1CUOID = OP3REC.OP1CUOID;
    OPIREC.OP1NORID = OP3REC.OP1NORID;
    OPIREC.OP2LNINB = OP3REC.OP2LNINB;
    OPIREC.XWHCD = OPWREC.XWHCD[OP0JWSUB];

    SQLCA.VAGen_SQLCODE = 0;
    call "IO1660" ("D ", SQLCA, OPIREC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VOPPKI01";
      TA1REC.TA1LOCAT[1] = "D ";
      TA1REC.TA1LOCAT[3] = "IO1660";
      XSOPS02(); /* common abend*/
    end
  end





   /* ***********************************************************8*/
end // end OP0JS17

// de-allocate rejected line-item
Function OP0JS18()



       /* ********************************************************/
       /* * this statement group de-allocates the rejected line **/
       /* * item                                                **/
       /* ********************************************************/


  set INZREC empty;

       /* build inzrec keys*/

  INZREC.XWHCD = OPWREC.XWHCD[OP0JWSUB];


  INZREC.XOWCD = OP3REC.XOWCD;

  INZREC.XGPCD = OP3REC.XGPCD;
  INZREC.SY1STNBR = OP3REC.SY1STNBR;
  INZREC.SY2CLRID = OP3REC.SY2CLRID;
  INZREC.XDMCD = OP3REC.XDMCD;
  INZREC.XQACD = OP3REC.XQACD;


  INZREC.XSDCD = OP3REC.PC2INSEG;

  INZREC.XSACD = OP3REC.XEGCD;

  INZREC.XPGCD = OP3REC.XPGCD;
  INZREC.XUMCD = OP3REC.XUMCD;

  INZREC.IN5TRDCD = "O"; /* audit tran code*/
  INZREC.IN5TRDDT = OPAREC.OPACDT; /* audit tran date*/
  INZREC.IN5TRDTE = OPAREC.OPACDT; /* audit tran time*/
  INZREC.IN5TRTIM = OP0JW01.OP0JWTM3;

  INZREC.XIFCD = "03"; /* inv trans field number*/
  INZREC.INZALNGQ = "N"; /* allow negative qty flag*/

  INZREC.IN5TRPRT = OP3REC.OP1PARTN;
  INZREC.IN5TRDOC = OP3REC.OP1CUOID;
  INZREC.IN5TRSUB = OP3REC.OP1NORID;
  INZREC.XITCD = "70";
  INZREC.XIRCD = "907";
  INZREC.IN5USRID = OPWREC.OPWENTLN;


      /* get the season code and season year code for*/
      /* the in-line, first-quality apparel line-item*/

  INZREC.XSECD = " ";
  INZREC.XSNYR = 0;

  if (OP3REC.XGPCD == "03" /* apparel*/
   && OP3REC.XQACD == "01") /* first quality*/
    if (INZREC.XWHCD == "51"
     || INZREC.XWHCD == "25")

      OP0JSGL(); /* get product lifecycle*/

      if (OP0JW01.XLCCD == "10")
        sysVar.arrayIndex = 1;
        while (XSNTBL.XSECD[sysVar.arrayIndex] != "99" /* not end-of-table*/
         && OP0JW01.OP0JWSTP != "Y")
          if (XSNTBL.XXXSTAT[sysVar.arrayIndex] == "A")
            if (OPWREC.OP1CUNDT[OP0JWSUB] >= XSNTBL.XSNBDT[sysVar.arrayIndex]
             && OPWREC.OP1CUNDT[OP0JWSUB] <= XSNTBL.XSNXDT[sysVar.arrayIndex])
              INZREC.XSECD = XSNTBL.XSECD[sysVar.arrayIndex];
              INZREC.XSNYR = XSNTBL.XSNYR[sysVar.arrayIndex];
              OP0JW01.OP0JWSTP = "Y"; /* found so force end of search*/
            end
          end
          sysVar.arrayIndex = sysVar.arrayIndex + 1;
        end
      end
    end
  end


       /* move quantities to be de-allocated*/

  OPAREC.OPASUB1 = 1;
  while (OPAREC.OPASUB1 < 41)
    if (OP3REC.OP3SZAFL[OPASUB1] == "Y") /* size active*/
      if (OP3REC.OP3ALQT[OPASUB1] > 0)
        INZREC.INZQTYCH[OPASUB1] = OP3REC.OP3ALQT[OPASUB1];
        INZREC.INZQTYCH[OPASUB1] = INZREC.INZQTYCH[OPASUB1] * -1;
      else
        OP3REC.OP3ALQT[OPASUB1] = 0;
      end
    else
      OP3REC.OP3ALQT[OPASUB1] = 0;
    end
    OPAREC.OPASUB1 = OPAREC.OPASUB1 + 1;
  end


   /* changed call from in9010 to in9020   jhh 02/03/88*/

       /* call in9020 to de-allocate*/
   /* code added 4/18/88 to prevent db read if not allocated*/


  if (OP3REC.OP2LNIST == "PA"
   || OP3REC.OP2LNIST == "AL")
    call "IN9020" (SQLCA, INZREC) {isNoRefresh = yes, isExternal = yes};

         /* check the return code*/

    if (SQLCA.VAGen_SQLCODE == 0
     && INZREC.INZRTNCD < 1000)
       /* next sentence*/
    else
      if (INZREC.INZRTNCD > 1000) /* fatal error*/
        if (SQLCA.VAGen_SQLCODE == -911) /* dead-lock*/
          set TA1REC empty;
          OP0JW01.OP0JWPAR = OP3REC.OP1PARTN;
          OP0JW01.OP0JWCOI = OP3REC.OP1CUOID;
          OP0JW01.OP0JWNOI = OP3REC.OP1NORID;
          OP0JW01.OP0JWLLN = OP3REC.OP2LNINB;
          OP0JW01.OP0JWWHP = INZREC.XWHCD; /* not needed*/
          OP0JW01.OP0JWWCD = INZREC.XWHCD;
          OP0JW01.OP0JWOWG = INZREC.XOWCD;
          OP0JW01.OP0JWGPC = INZREC.XGPCD;
          OP0JW01.OP0JWSTY = INZREC.SY1STNBR;
          OP0JW01.OP0JWCOL = INZREC.SY2CLRID;
          OP0JW01.OP0JWDIM = INZREC.XDMCD;
          OP0JW01.OP0JWQAC = INZREC.XQACD;
          OP0JW01.OP0JWPGC = INZREC.XPGCD;
          OP0JW01.OP0JWUMC = INZREC.XUMCD;
          TA1REC.TA1TBLKE = OP0JW01.OP0JWDON;
          TA1REC.TA1LOCAT[1] = INZREC.INZRTNCD;
          TA1REC.TA1LOCAT[2] = INZREC.XSECD;
          TA1REC.TA1LOCAT[3] = "OP0JS18";
          TA1REC.TA1LOCAT[4] = "IN9020";
          OP0JS70(); /* post, restart op0j from beginning*/
        else
          OP0JW01.OP0JWPAR = OP3REC.OP1PARTN;
          OP0JW01.OP0JWCOI = OP3REC.OP1CUOID;
          OP0JW01.OP0JWNOI = OP3REC.OP1NORID;
          OP0JW01.OP0JWLLN = OP3REC.OP2LNINB;
          OP0JW01.OP0JWWHP = INZREC.XWHCD; /* not needed*/
          OP0JW01.OP0JWWCD = INZREC.XWHCD;
          OP0JW01.OP0JWOWG = INZREC.XOWCD;
          OP0JW01.OP0JWGPC = INZREC.XGPCD;
          OP0JW01.OP0JWSTY = INZREC.SY1STNBR;
          OP0JW01.OP0JWCOL = INZREC.SY2CLRID;
          OP0JW01.OP0JWDIM = INZREC.XDMCD;
          OP0JW01.OP0JWQAC = INZREC.XQACD;
          OP0JW01.OP0JWPGC = INZREC.XPGCD;
          OP0JW01.OP0JWUMC = INZREC.XUMCD;
          TA1REC.TA1TBLKE = OP0JW01.OP0JWDON;
          TA1REC.TA1LOCAT[1] = INZREC.INZRTNCD;
          TA1REC.TA1LOCAT[2] = INZREC.XSECD;
          TA1REC.TA1LOCAT[3] = "OP0JS18";
          TA1REC.TA1LOCAT[4] = "IN9020";
          XSOPS02(); /* abend*/
        end
      else
        OP0JW01.OP0JWPAR = OP3REC.OP1PARTN;
        OP0JW01.OP0JWCOI = OP3REC.OP1CUOID;
        OP0JW01.OP0JWNOI = OP3REC.OP1NORID;
        OP0JW01.OP0JWLLN = OP3REC.OP2LNINB;
        OP0JW01.OP0JWWHP = INZREC.XWHCD; /* not needed*/
        OP0JW01.OP0JWWCD = INZREC.XWHCD;
        OP0JW01.OP0JWOWG = INZREC.XOWCD;
        OP0JW01.OP0JWGPC = INZREC.XGPCD;
        OP0JW01.OP0JWSTY = INZREC.SY1STNBR;
        OP0JW01.OP0JWCOL = INZREC.SY2CLRID;
        OP0JW01.OP0JWDIM = INZREC.XDMCD;
        OP0JW01.OP0JWQAC = INZREC.XQACD;
        OP0JW01.OP0JWPGC = INZREC.XPGCD;
        OP0JW01.OP0JWUMC = INZREC.XUMCD;
        TA1REC.TA1TBLKE = OP0JW01.OP0JWDON;
        TA1REC.TA1LOCAT[1] = INZREC.INZRTNCD;
        TA1REC.TA1LOCAT[2] = INZREC.XSECD;
        TA1REC.TA1LOCAT[3] = "OP0JS18";
        TA1REC.TA1LOCAT[4] = "IN9020";
        XSOPS02(); /* abend*/
      end
    end
  end



   /* *************************************************************/
end // end OP0JS18

// clear the refer-to-credit code
Function OP0JS19()



       /* ********************************************************/
       /* * this statement group clear the refer-to-credit code **/
       /* * in the working storage (opwrec.xchcd)               **/
       /* ********************************************************/


  OPAREC.OPASUB1 = 1;

  while (OPAREC.OPASUB1 <= 3)
    OPWREC.XCHCD[OPASUB1] = "00";
    OPAREC.OPASUB1 = OPAREC.OPASUB1 + 1;
  end


   /* ************************************************************/
end // end OP0JS19

// set up screen op0jm001
Function OP0JS1A()



                 /* set up map sm0jm001*/



  TA1REC.TA1MAP = "OP0JM001";
  TA1REC.TA1PGMNM = "OP0J";
  OP0JM001.OPMDT = VGVar.currentShortGregorianDate;
  OP1REC.OP1GROUP = OPWREC.OP1GROUP;


           /* format customer # and move to screen*/

  OPAREC.OPACUCO = OP1REC.KUCCOID;
  OPAREC.OPACUSR = OP1REC.KUMSTRID;
  OPAREC.OPACUDP = OP1REC.XNXCD;
  OPAREC.OPASEP1 = ".";
  OPAREC.OPASEP2 = ".";
  OP0JM001.OPACUNO = OPAREC.OPACUNO;
  OP0JM001.KUMSTRNM = OPWREC.KUMSTRNM;


  if (OP1REC.OP1ORDBY > " ")
    OP0JM001.OP1ORDBY = OP1REC.OP1ORDBY;
    set OP0JM001.OP0JWORD skip;
  else
    set OP0JM001.OP0JWORD skip, invisible;
  end



end // end OP0JS1A

// set po #,line ct,ovrd auth
Function OP0JS1B()



              /* set up po number, line count, and ovrd auth*/


  if (OPWREC.OPWSFLOW == "1")
    set OP0JM001.OP0JWPO skip;
    set OP0JM001.OP1CUPO normal;
  else
    set OP0JM001.OP0JWPO skip, invisible;
    set OP0JM001.OP1CUPO skip, invisible;
  end


  if (OPWREC.OPWSFLOW == "1")
    set OP0JM001.OP0JWLO skip;
    set OP0JM001.OP0JWLC normal;
  else
    set OP0JM001.OP0JWLO skip, invisible;
    set OP0JM001.OP0JWLC skip, invisible;
  end


  if (OPWREC.OPWAUTFL == "Y")
    if (OP1REC.XOTCD in XOTTBL.XOTCD
     && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XOTTBL.XOTAUTHF[sysVar.arrayIndex] == "Y")
        set OP0JM001.OP0JWAU skip;
        set OP0JM001.XOACD normal;
      else
        set OP0JM001.OP0JWAU skip, invisible;
        set OP0JM001.XOACD skip, invisible;
      end
    end
  else
    set OP0JM001.OP0JWAU skip, invisible;
    set OP0JM001.XOACD skip, invisible;
  end



  OP0JM001.OP1CUOID = OP1REC.OP1CUOID;


end // end OP0JS1B

// order val,tot units,sub orders
Function OP0JS1C()



            /* set up order value, total units, sub-orders*/




  OPAREC.OPASUB = 1;
  OP0JM001.OP0JWOV = 0;
  OP0JM001.OP0JWTU = 0;
  OP0JM001.OP0JWSO = 0;

  while (OPAREC.OPASUB <= 10)

    OP0JM001.OP0JWOV = OPWREC.OP1OVALU[OPASUB] + OP0JM001.OP0JWOV;
    OP0JM001.OP0JWTU = OPWREC.OP1OTUNT[OPASUB] + OP0JM001.OP0JWTU;

    if (OPWREC.OP1OTUNT[OPASUB] == 0)
         /* next sentence*/
    else
      OP0JM001.OP0JWSO = OP0JM001.OP0JWSO + 1;
    end


    OPAREC.OPASUB = OPAREC.OPASUB + 1;


  end


  if (OP0JM001.OP0JWTU == 0)
    converseLib.validationFailed(130);
    OPAREC.OPAERR = "Y";
      /* no products on order, add products or reject order*/
  end

   /* Added for Canada -  June 16, 1995*/

  OP0JM001.ZFC-CRCY-CD = OP1REC.ZFC-CRCY-CD;
end // end OP0JS1C

// set order status for draw ord
Function OP0JS20()

       /* *******************************************************/
       /* * this statement group sets the order status for     **/
       /* * draw orders                                        **/
       /* *******************************************************/

   /* for cust & rebook draw orders, set status based on items.*/

  if (OP0JW01.OP0JWBDF == "D") /* if draw order*/
    if (OP1REC.XBDCD in XBDTBL.XBDCD)
      if (XBDTBL.XBDSETFL[sysVar.arrayIndex] == "Y" /* and a set aside draw*/
       && XBDTBL.XBDRVRFL[sysVar.arrayIndex] == "Y") /* RES REQUEST FLAGMM*/
        OP1REC.XOSCD = "RS"; /* set aside draw, must be rsrvd.*/
        OP1REC.OP1RSVQF = "Y"; /* set rsrv qty flag*/
        OP1REC.OP1NTMAL = 0; /* set # times allocated*/
        return;
      end
    end
  else
    OP1REC.XOSCD = "OP"; /* not a draw must be open.*/
    OP1REC.OP1NTMAL = 0; /* set # times allocated*/
    return;
  end


   /* for customer & rebook draw orders, set order stat based on*/
   /* item status's.*/


  OP6REC.OP1PARTN = OP1REC.OP1PARTN;
  OP6REC.OP1CUOID = OP1REC.OP1CUOID;
  OP6REC.OP1NORID = OP1REC.OP1NORID;

  call "IO0450" ("SS", SQLCA, OP6REC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1LOCAT[2] = "SS      ";
    TA1REC.TA1LOCAT[3] = "OP0JS20 ";
    TA1REC.TA1LOCAT[4] = "IO0450  ";
    OP0JW01.OP0JWPAR = OP6REC.OP1PARTN;
    OP0JW01.OP0JWCOI = OP6REC.OP1CUOID;
    OP0JW01.OP0JWNOI = OP6REC.OP1NORID;
    TA1REC.TA1TBLKE = OP0JW01.OP0JWDON;
    XSOPS02();
  end


  call "IO0450" ("SN", SQLCA, OP6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1LOCAT[2] = "SN      ";
    TA1REC.TA1LOCAT[3] = "OP0JS20 ";
    TA1REC.TA1LOCAT[4] = "IO0450  ";
    OP0JW01.OP0JWPAR = OP6REC.OP1PARTN;
    OP0JW01.OP0JWCOI = OP6REC.OP1CUOID;
    OP0JW01.OP0JWNOI = OP6REC.OP1NORID;
    OP0JW01.OP0JWLLN = OP6REC.OP2LNINB;
    TA1REC.TA1TBLKE = OP0JW01.OP0JWDON;
    XSOPS02();
  end




  OP0JW01.OP0JWFND = "N"; /* init stat flag*/
  while (SQLCA.VAGen_SQLCODE == 0)
    OP0JS21(); /* set order status*/
  end


  call "IO0450" ("CS", SQLCA, OP6REC) {isNoRefresh = yes, isExternal = yes};


   /* set status*/

  if (OP0JW01.OP0JWFND == "R") /* if rsrvd*/
    OP1REC.XOSCD = "RS";
    OP1REC.OP1RSVQF = "Y"; /* set rsrv qty flag*/
    OP1REC.OP1NTMAL = 0; /* set # times allocated*/
  else
    if (OP0JW01.OP0JWFND == "P") /* if part rsrvd*/
      OP1REC.XOSCD = "PR";
      OP1REC.OP1RSVQF = "Y"; /* set rsrv qty flag*/
      OP1REC.OP1NTMAL = 0; /* set # times allocated*/
    else
      OP1REC.XOSCD = "OP";
      OP1REC.OP1NTMAL = 0; /* set # times allocated*/
    end
  end




end // end OP0JS20

// set hdr status
Function OP0JS21()


   /* for cust & rebook draw orders, based on the item status's,*/
   /* set the order header status.*/


  if (OP6REC.OP2LNIST == "PR")
    OP0JW01.OP0JWFND = "P";
  else
    if (OP6REC.OP2LNIST == "RS")
      if (OP0JW01.OP0JWFND == "O" /* if prev prds were open*/
       || OP0JW01.OP0JWFND == "P")
        OP0JW01.OP0JWFND = "P";
      else
        OP0JW01.OP0JWFND = "R";
      end
    else /* status must be open*/
      if (OP0JW01.OP0JWFND == "R" /* if reserved before, set part rsrv.*/
       || OP0JW01.OP0JWFND == "P") /* or if part rsrv, keep it.*/
        OP0JW01.OP0JWFND = "P";
      else
        OP0JW01.OP0JWFND = "O";
      end
    end
  end





  call "IO0450" ("SN", SQLCA, OP6REC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1LOCAT[2] = "SN      ";
    TA1REC.TA1LOCAT[3] = "OP0JS21 ";
    TA1REC.TA1LOCAT[4] = "IO0450  ";
    OP0JW01.OP0JWPAR = OP6REC.OP1PARTN;
    OP0JW01.OP0JWCOI = OP6REC.OP1CUOID;
    OP0JW01.OP0JWNOI = OP6REC.OP1NORID;
    OP0JW01.OP0JWLLN = OP6REC.OP2LNINB;
    TA1REC.TA1TBLKE = OP0JW01.OP0JWDON;
    XSOPS02();
  end






end // end OP0JS21

// deallocate smart draws
Function OP0JS22()


    /* set up time for record updates*/

  OP0JW01.OP0JWTM1 = VGVar.currentFormattedTime; /* change hh:mm:ss to hhmm*/
  OP0JW01.OP0JWHH3 = OP0JW01.OP0JWHH1;
  OP0JW01.OP0JWMM3 = OP0JW01.OP0JWMM1;
  OP0JW01.OP0JWSS3 = OP0JW01.OP0JWSS1;

  OPAREC.OPACDT = VGVar.currentShortGregorianDate; /* set curr date*/
  if (OPAREC.OPACYY > 56) /* set century based on year*/
    OPAREC.OPACCC = 19;
  else
    OPAREC.OPACCC = 20;
  end



       /* ********************************************************/
       /* * this statement group de-allocates the rejected line **/
       /* * item for smart reservation draws                    **/
       /* ********************************************************/

   /* opsrec initialized in op0js13 in order to save*/
   /* the bulk order number for the re-reserve.*/


       /* build opsrec keys*/

  OPSREC.XWHCD = OPWREC.XWHCD[OP0JWSUB];



  OPSREC.XOWCD = OP3REC.XOWCD;

  OPSREC.XGPCD = OP3REC.XGPCD;
  OPSREC.SY1STNBR = OP3REC.SY1STNBR;
  OPSREC.SY2CLRID = OP3REC.SY2CLRID;
  OPSREC.XDMCD = OP3REC.XDMCD;
  OPSREC.XQACD = OP3REC.XQACD;


  OPSREC.XSDCD = OP3REC.PC2INSEG;

  OPSREC.XSACD = OP3REC.XEGCD;

  OPSREC.XPGCD = OP3REC.XPGCD;
  OPSREC.XUMCD = OP3REC.XUMCD;

  OPSREC.IN5TRDCD = "O"; /* audit tran code*/
  OPSREC.IN5TRDDT = OPAREC.OPACDT; /* audit tran date*/
  OPSREC.IN5TRDTE = OPAREC.OPACDT; /* audit tran time*/
  OPSREC.IN5TRTIM = OP0JW01.OP0JWTM3;

  OPSREC.XIFCD = "02"; /* inv trans field number*/
  OPSREC.OPSALNGQ = "N"; /* allow negative qty flag*/

  OPSREC.IN5TRPRT = OP3REC.OP1PARTN;
  OPSREC.IN5TRDOC = OP3REC.OP1CUOID;
  OPSREC.IN5TRSUB = OP3REC.OP1NORID;
  OPSREC.XITCD = "60";
  OPSREC.XIRCD = "906";
  OPSREC.IN5USRID = OPWREC.OPWENTLN;


    /* move quantities to be de-allocated and rereserved*/

  OPAREC.OPASUB1 = 1;
  while (OPAREC.OPASUB1 < 41)
    if (OP3REC.OP3SZAFL[OPASUB1] == "Y") /* size active*/
      if (OP3REC.OP3ALQT[OPASUB1] > 0)
        OPSREC.OPSQTYCH[OPASUB1] = OP3REC.OP3ALQT[OPASUB1];
      else
        OPSREC.OPSQTYCH[OPASUB1] = 0;
      end
    else
      OPSREC.OPSQTYCH[OPASUB1] = 0;
    end
    OPAREC.OPASUB1 = OPAREC.OPASUB1 + 1;
  end



       /* call in9030 to de-allocate and re-reserve*/


  if (OP3REC.OP2LNIST == "PA"
   || OP3REC.OP2LNIST == "AL")
    call "IN9030" (SQLCA, OPSREC) {isNoRefresh = yes, isExternal = yes};

         /* check the return code*/

    if (SQLCA.VAGen_SQLCODE == 0
     && OPSREC.OPSRTNCD < 1000)
       /* next sentence*/
    else
      if (OPSREC.OPSRTNCD > 1000) /* fatal error*/
        if (SQLCA.VAGen_SQLCODE == -911) /* dead-lock*/
          set TA1REC empty;
          OP0JW01.OP0JWPAR = OP3REC.OP1PARTN;
          OP0JW01.OP0JWCOI = OP3REC.OP1CUOID;
          OP0JW01.OP0JWNOI = OP3REC.OP1NORID;
          OP0JW01.OP0JWLLN = OP3REC.OP2LNINB;
          OP0JW01.OP0JWWHP = OPSREC.XWHCD; /* not needed*/
          OP0JW01.OP0JWWCD = OPSREC.XWHCD;
          OP0JW01.OP0JWOWG = OPSREC.XOWCD;
          OP0JW01.OP0JWGPC = OPSREC.XGPCD;
          OP0JW01.OP0JWSTY = OPSREC.SY1STNBR;
          OP0JW01.OP0JWCOL = OPSREC.SY2CLRID;
          OP0JW01.OP0JWDIM = OPSREC.XDMCD;
          OP0JW01.OP0JWQAC = OPSREC.XQACD;
          OP0JW01.OP0JWPGC = OPSREC.XPGCD;
          OP0JW01.OP0JWUMC = OPSREC.XUMCD;
          TA1REC.TA1TBLKE = OP0JW01.OP0JWDON;
          TA1REC.TA1LOCAT[1] = OPSREC.OPSRTNCD;
          TA1REC.TA1LOCAT[3] = "OP0JS22";
          TA1REC.TA1LOCAT[4] = "IN9030";
          OP0JS70(); /* post, restart op0j from beginning*/
        else
          OP0JW01.OP0JWPAR = OP3REC.OP1PARTN;
          OP0JW01.OP0JWCOI = OP3REC.OP1CUOID;
          OP0JW01.OP0JWNOI = OP3REC.OP1NORID;
          OP0JW01.OP0JWLLN = OP3REC.OP2LNINB;
          OP0JW01.OP0JWWHP = OPSREC.XWHCD; /* not needed*/
          OP0JW01.OP0JWWCD = OPSREC.XWHCD;
          OP0JW01.OP0JWOWG = OPSREC.XOWCD;
          OP0JW01.OP0JWGPC = OPSREC.XGPCD;
          OP0JW01.OP0JWSTY = OPSREC.SY1STNBR;
          OP0JW01.OP0JWCOL = OPSREC.SY2CLRID;
          OP0JW01.OP0JWDIM = OPSREC.XDMCD;
          OP0JW01.OP0JWQAC = OPSREC.XQACD;
          OP0JW01.OP0JWPGC = OPSREC.XPGCD;
          OP0JW01.OP0JWUMC = OPSREC.XUMCD;
          TA1REC.TA1TBLKE = OP0JW01.OP0JWDON;
          TA1REC.TA1LOCAT[1] = OPSREC.OPSRTNCD;
          TA1REC.TA1LOCAT[3] = "OP0JS22";
          TA1REC.TA1LOCAT[4] = "IN9030";
          XSOPS02(); /* abend*/
        end
      end
    end
  end



   /* *************************************************************/
end // end OP0JS22

// select dspgm.vortyp01
Function OP0JS24()

            /* get the dspgm.vordtyp01 (sp2rec)*/

  set SP2REC empty;
  SP2REC.XOTCD = OP1REC.XOTCD;
  SP2REC.SP1ID = OP1REC.SP1ID;

  call "IO0080" ("S ", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SP2REC.SP2UIND == "S"
     || SP2REC.SP2UIND == " ")
      SP2REC.SP2UIND = "O";
      OP0JS25(); /* update sp2rec*/
    end
  else
    TA1REC.TA1DBASE = "DSPGM";
    TA1REC.TA1TBLVU = "VORTYP01";
    TA1REC.TA1LOCAT[1] = SP2REC.SP1ID;
    TA1REC.TA1LOCAT[2] = "OP0JS24";
    TA1REC.TA1LOCAT[3] = "IO0080 ";
    TA1REC.TA1LOCAT[4] = "S     ";
    TA1REC.TA1TBLKE = SP2REC.SP2KEY;
    TAEREC.TAEDESC1 = "UNABLE TO SELECT THE DSPGM.ORDTYP RECORD";
    OP0JW01.OP0JWMS1 = "SQLCODE IS: ";
    OP0JW01.OP0JWMS2 = SQLCA.VAGen_SQLCODE;
    TAEREC.TAEDESC2 = OP0JW01.OP0JWMSG;
    OP0JS26(); /* post routine*/
  end
end // end OP0JS24

// update dspgm.vortyp01
Function OP0JS25()

                /* update the dspgm.vortyp01 (sp2rec)*/

  SP2REC.XOTCD = OP1REC.XOTCD;
  SP2REC.SP1ID = OP1REC.SP1ID;

  call "IO0080" ("U ", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DSPGM";
    TA1REC.TA1TBLVU = "VORTYP01";
    TA1REC.TA1LOCAT[1] = SP2REC.SP1ID;
    TA1REC.TA1LOCAT[2] = "OP0JS25";
    TA1REC.TA1LOCAT[3] = "IO0080 ";
    TA1REC.TA1LOCAT[4] = "U     ";
    TA1REC.TA1TBLKE = SP2REC.SP2KEY;
    TAEREC.TAEDESC1 = "UNABLE TO UPDATE DSPGM.VORTYP01 ";
    OP0JW01.OP0JWMS1 = "SQLCODE IS: ";
    OP0JW01.OP0JWMS2 = SQLCA.VAGen_SQLCODE;
    TAEREC.TAEDESC2 = OP0JW01.OP0JWMSG;
    OP0JS26(); /* post routine*/
  end
end // end OP0JS25

// post the dspgm.vortyp01 error
Function OP0JS26()
                     /* send an error-msg to ta0020*/

  TA1REC.TA1TYPE = "APPL";
  TA1REC.TA1FUNC = "POST";
  TA1REC.TA1PGMNM = "OP0J    ";
  TA1REC.TA1MAP = "OP0JM001";
  try
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
  end

  TAEREC.TAEDESC1 = " ";
  TAEREC.TAEDESC2 = " ";


end // end OP0JS26

// validate screen
Function OP0JS2A()
   /* *************************************************************/



      /* clear (reset fields)*/

  OP0JM001.OPMUMSG = " "; /* clear err msg*/
  OPAREC.OPAERR = "N"; /* clear error flag*/
  OP0JS1B(); /* reset screen attributes*/


       /* if the order was rejected because of the bad credit*/
       /* check, abort the program and return to the*/
       /* master menu after the error message is displayed*/

  if (OP0JW01.OP0JWABD == "Y") /* abend flag*/
    COMMAREA.CA-USER-WORKAREA-4K = " ";
    XSPF4();
    exit program;
  end


  if (OP0JW01.OP0JW435 == "Y") /* if warning message is on*/
    OP0JW01.OP0JW435 = "N"; /* msg shown to user, now turn off*/
  else
    if (OP1REC.OP1DSBDT > OPAREC.OPACDT) /* if dont ship b4 > today*/
      if (OP1REC.OP1DSBDT > 0 /* don't ship before exists*/
       && OP1REC.XPPCD == "10") /* rush pick priority exists*/
        OP0JW01.OP0JW435 = "Y"; /* turn on warning flag*/
        OPAREC.OPAERR = "Y";
        converseLib.validationFailed(435); /* warn user of discrepancy*/
      else
        if (OP1REC.OP1DSBDT > 0
         && OP1REC.XPPCD == "20")
          OP0JW01.OP0JW435 = "Y"; /* turn on warning flag*/
          OPAREC.OPAERR = "Y";
          converseLib.validationFailed(435); /* warn user of discrepancy*/
        end
      end
    end
  end


      /* check and process valid aid key requests*/

      /* enter - continue processing*/
        /* pa2 - reject order*/


  if (OP0JM001.OP0JWOPT >= 1
   && OP0JM001.OP0JWOPT <= 8
   && converseVar.eventKey is enter)
    OP0JS2B(); /* check which option selected*/
  else
    if (converseVar.eventKey is pa2)
      OP0JS2C(); /* cancel order*/
    else
      if (OP0JM001.OP0JWOPT < 1
       || OP0JM001.OP0JWOPT > 8)
        converseLib.validationFailed(30);
           /* option is not valid*/
        set OP0JM001.OP0JWOPT cursor, bold;
        OPAREC.OPAERR = "Y";
      else
        converseLib.validationFailed(2);
           /* invalid key*/
        set OP0JM001.OP0JWOPT cursor;
        OPAREC.OPAERR = "Y";
      end
    end
  end


   /* *************************************************************/
end // end OP0JS2A

// check which option selected
Function OP0JS2B()




  OP0JW01.OP0JWSW = "PA2 NOT USED";
  OPWREC.OPWREVM = OP0JM001.OP0JWOPT;



  if (OP0JM001.OP0JWOPT == 1)
    OP0JS2D(); /* accept the order*/
  else
    OPWREC.OP1GROUP = OP1REC.OP1GROUP;
    COMMAREA.CA-USER-WORKAREA-4K = OPWREC.OPWSGRP;
    if (OP0JM001.OP0JWOPT == 2)
      sysVar.transferName = "OP0C";
      transfer to program sysVar.transferName passing COMMAREA;
    else
      if (OP0JM001.OP0JWOPT == 3)
        sysVar.transferName = "OP0C";
        transfer to program sysVar.transferName passing COMMAREA;
      else
        if (OP0JM001.OP0JWOPT == 4)
          sysVar.transferName = "OP0E";
          transfer to program sysVar.transferName passing COMMAREA;
        else
          if (OP0JM001.OP0JWOPT == 5)
            sysVar.transferName = "OP0F";
            transfer to program sysVar.transferName passing COMMAREA;
          else
            if (OP0JM001.OP0JWOPT == 6)
              sysVar.transferName = "OP0G";
              transfer to program sysVar.transferName passing COMMAREA;
            else
              if (OP0JM001.OP0JWOPT == 7)
                sysVar.transferName = "OP0K";
                transfer to program sysVar.transferName passing COMMAREA;
              else
                if (OP0JM001.OP0JWOPT == 8)
                  if (OP1REC.XPACD == "MS" || 
                  OP1REC.XPACD == "CU") /* include cu for msr edits*/
                    OP0JS-CHK-MSR-ITM();
                    /* more than one item per msr order is not allowed*/
                    if (OP0JW-MSITM-CNT >= 1)
                      converseLib.validationFailed(945);
                      set OP0JM001.OP0JWOPT cursor;
                      OPAREC.OPAERR = "Y";
                    else
                      sysVar.transferName = "OP0H";
                      transfer to program sysVar.transferName passing COMMAREA;
                    end
                  else
                    sysVar.transferName = "OP0H";
                    transfer to program sysVar.transferName passing COMMAREA;
                  end
                else
                      /* next sentence*/
                end
              end
            end
          end
        end
      end
    end
  end



end // end OP0JS2B

// cancel order
Function OP0JS2C()



               /* cancel order*/



  if (OP0JW01.OP0JWSW == "PA2 PRESSED ONCE")
    OP0JS2W(); /* delete rows from db2 data base*/
  else
    OP0JW01.OP0JWSW = "PA2 PRESSED ONCE";
    converseLib.validationFailed(202);
        /* order will be rejected--press pa2 to confirm*/
  end


end // end OP0JS2C

// accept the order
Function OP0JS2D()
               /* accept the order if  everything validates*/
               /* ok on the screen*/


  OP0JS1C();

   /* TT#4073 * GOLF CRESTING PROJECT CHANGES * BEGIN * RHARAT *******/
  OP0JS-STP-WH27-ORD(); /* stop whse 27 orders*/

  if (OPAREC.OPAERR == "Y") /* if error found*/
    return; /* don't prosess  - rtn*/
  end /* end*/
   /* TT#4073 * GOLF CRESTING PROJECT CHANGES *  End  * RHARAT *******/
                                   /* set up order value, tot units, subs*/
   /* TT#4654  SPAIN CHANGES Begin ******************/
  OP0JS-SPAIN-CHECK(); /* Process order for Spain/Canary*/
                                  /* compliance*/
   /* TT#4654  SPAIN CHANGES End *****************  03/15/00*/


   /* commented out on 9/21/90  do not remove - Rose may change*/
                                  /* her mind*/
   /* she changed here mind on 11/26, will edit for product sets*/
   /* 248064 / 248164, 248230 / 248231 and 24800 / 248200*/

  if (OP1REC.XGPCD == "01")
    OP0JS85(); /* Edit product combinations.*/
  end


   /* try to process terms even if dup entire order option was*/
   /* selected because dup order allows user to select sub-*/
   /* orders to dup within the customer order.*/

  OP0JSTP(); /* process terms*/


   /* validate musical size runs when direct ship*/
   /* validate msr when pack code is 'ms' 07/07/97*/
   /* include cu orders for msr edits     10/23/97*/

  if ((OP1REC.XPACD == "MS" || OP1REC.XPACD == "CU")
   && OP1REC.XGPCD == "02")
    OP0JS-PROCESS-MSR();
  end


  if (converseVar.validationMsgNum == 0)
    OP0JS-EDIT-AUDIT(); /* authorization + business purpose*/
    OP0JS2F(); /* override authorization edit*/
    OP0JS2H(); /* line count edit*/
    OP0JS2G(); /* purchase order # edit*/
    OP0JS3G(); /* sales agency/rep edit*/
  end

  if (converseVar.validationMsgNum == 0
   && OPAREC.OPAERR == "N")
    OP0JW01.OP1EXPDF = OP1REC.OP1EXPDF;
    OP0JS50(); /* write records*/
  end



end // end OP0JS2D

// spgm sp2rec--ord min qty/$ met
Function OP0JS2E()

            /* sales program disc% edit*/


   /* skip the edit if this is a customer or rebook draw order*/

  if (OP0JW01.OP0JWDCF == "DC" /* if this is a customer draw order*/
   || OP0JW01.OP0JWDCF == "DR") /* or this is a rebook draw order*/
    return;
  end



  SP2REC.XOTCD = OP1REC.XOTCD;
  SP2REC.SP1ID = OP1REC.SP1ID;

  call "IO0080" ("S ", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DSPGM";
    TA1REC.TA1TBLVU = "VORTYP01";
    TA1REC.TA1LOCAT[1] = "OP0J   ";
    TA1REC.TA1LOCAT[2] = "OP0JS2E";
    TA1REC.TA1LOCAT[3] = "IO0080 ";
    TA1REC.TA1LOCAT[4] = "S     ";
    TA1REC.TA1TBLKE = SP2REC.SP2KEY;
    XSOPS02(); /* abort program*/
  end


  if (SQLCA.VAGen_SQLCODE == 0)
    if (SP2REC.SP2MNQTY == 0
     && SP2REC.SP2MNDLR == 0)
         /* next sentence*/
    else
      if (OP0JM001.OP0JWOV >= SP2REC.SP2MNDLR
       && OP0JM001.OP0JWTU >= SP2REC.SP2MNQTY)
           /* next sentence*/
      else
        converseLib.validationFailed(201);
        OPAREC.OPAERR = "Y";
           /* order does not meet min sales prog $/units--*/
           /* add or reject order*/
      end
    end
  end


end // end OP0JS2E

// overrite authorization edit
Function OP0JS2F()




             /* override authorization edit*/
       /* 10/29/86 --record the date when an override*/
       /* authorization code was entered*/

  if (OPWREC.OPWAUTFL == "Y")
    if (OP1REC.XOTCD in XOTTBL.XOTCD
     && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XOTTBL.XOTAUTHF[sysVar.arrayIndex] == "Y")
         /* next sentence*/
      else
        return; /* don't need to check override aut.*/
                                   /* code*/
      end
    end
  end



  if (OPWREC.OPWAUTFL == "Y")
    if (OP0JM001.XOACD in XOATBL.XOACD)
      set TA2REC empty;
      TA2REC.TA2DTOPT = "GETDATE";

      call "TA0040" (TA2REC) {isExternal = yes};

      if (TA2REC.TA2RTNCD != 0)
        TA1REC.TA1DBASE = " ";
        TA1REC.TA1TBLVU = " ";
        TA1REC.TA1TBLKE = " ";
        TA1REC.TA1LOCAT[3] = "OP0JS2F";
        TA1REC.TA1LOCAT[4] = "TA0040";
        TA1REC.TA1LOCAT[1] = "GETDATE";
        set SQLCA empty;
        XSOPS02(); /* abort program*/
      end

      if (TA2REC.TA2GRGGN < XOATBL.XOABEGDT[sysVar.arrayIndex]
       || TA2REC.TA2GRGGN > XOATBL.XOAENDDT[sysVar.arrayIndex])
        converseLib.validationFailed(200);
        OPAREC.OPAERR = "Y";
           /* overite authorization code is not valid*/
        set OP0JM001.XOACD cursor, bold;
      else
        OP1REC.OP1OSRID = XOATBL.KUYSVRID[sysVar.arrayIndex];
        OP1REC.OP1ORADT = TA2REC.TA2GRGGN; /* 10/29/86*/
      end
    else
      converseLib.validationFailed(200);
      OPAREC.OPAERR = "Y";
         /* overide authorization code is not valid*/
      set OP0JM001.XOACD cursor, bold;
    end
  end



end // end OP0JS2F

// purchase order # edit
Function OP0JS2G()

              /* purchase order # edit*/

  if (OPWREC.OPWSFLOW == "2") /* po # is askip, dark for phone flow*/
    return;
  end

      /* ******************************************/
   /* the first edit is for the relationship between:*/
    /* - customer purchase order number (OP1CUPO)*/
    /* - order type (XOBCD -> XOVTBL.XOTCD -> XOTTBL.XOTATONF)*/
    /* - purchase order required code (kucypoft)*/

   /* For some customers, we required additional information*/
   /* before finalizing an order.  What we require is determined*/
   /* by kucypoft - 00 - nothing is required*/
                 /* 01 - customer po nbr is required*/
                 /* 02 - customer po nbr and hard copy required*/
                 /* 03 - customer po nbr, hard copy and*/
                      /* confirmation required*/

   /* Orders that are not 'at once' orders are automatically*/
   /* placed on allocation hold until the requirements indicated*/
   /* by kucypoft have been met.*/

   /* This edit is to catch 'at once' orders where the po# has*/
   /* not been re-entered by the rep.*/
      /* ******************************************/

  if (OP1REC.XBDCD == "5" /* these types of draw orders are*/
   || OP1REC.XBDCD == "8" /* dependent on condition of bulk*/
   || OP1REC.XBDCD == "F" /* order, and we don't care whether*/
   || OP1REC.XBDCD == "3") /* or not there is a po# on the draw*/
      /* next sentence*/
  else
    if (OP1REC.XOTCD in XOTTBL.XOTCD              
     && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A"  
     && XOTTBL.XOTATONF[sysVar.arrayIndex] == "Y" /* this is an 'at once' order*/
     && OP0JM001.OP1CUPO == " "                   /* with no po#*/
     && KUCREC.KUCYPOFT != "00")                  /* purchase order number is required*/
      converseLib.validationFailed(653); /* so they will have to enter one*/
      OPAREC.OPAERR = "Y";
      set OP0JM001.OP1CUPO cursor, modified, bold;
      return;
    end
  end

    /* a reminder to the rep that in "form flow"  the po# must be*/
    /* re-entered on the screen if it is to be kept on the order*/
  if (OP0JM001.OP1CUPO == OP1REC.OP1CUPO)
    OP0JW01.OP1CUPO = OP0JM001.OP1CUPO;
  else
    if (OP0JM001.OP1CUPO == OP0JW01.OP1CUPO)
      OP1REC.OP1CUPO = OP0JM001.OP1CUPO;
    else
      OP0JW01.OP1CUPO = OP0JM001.OP1CUPO;
      OP0JW01.OP0JW002 = "WARNING -- PO NUMBER DOES NOT MATCH --";
      OP0JW01.OP0JW003 = OP1REC.OP1CUPO;
      OP0JM001.OPMUMSG = OP0JW01.OP0JW001;
      OPAREC.OPAERR = "Y";
      set OP0JM001.OP1CUPO cursor, bold;
    end
  end
end // end OP0JS2G

// line count edit
Function OP0JS2H()




               /* line count edit*/




  if (OPWREC.OPWSFLOW == "1")
    if (OP0JM001.OP0JWLC == OPWREC.OPWPITM)
         /* next sentence*/
    else
      OP0JW01.OP0JW005 = "LINE ITEM COUNT DOES NOT MATCH ";
      OP0JW01.OP0JW006 = OPWREC.OPWPITM;
      OP0JW01.OP0JW007 = " LINE ITEMS";
      OP0JM001.OPMUMSG = OP0JW01.OP0JW004;
      OPAREC.OPAERR = "Y";
      set OP0JM001.OP0JWLC cursor, bold;
    end
  end



end // end OP0JS2H

// write out the orders
Function OP0JS2I()




                 /* write out the orders*/




  OP0JS2K(); /* see if 1 time billto or shipto*/

  OP0JS2L(); /* see if a text record exist*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value



  OP0JS2P(); /* store records for each sub order*/

    /* if this order not = bulk-draw, call spgm.ordtyp record*/
    /* and update sp_use_ind if this is the 1st ord to use it*/

  if (OP0JW01.OP0JWBDF == "D") /* draw order*/
     /* next sentence*/
  else
    if (OP1REC.SP1ID > " ") /* if sales program order*/
      OP0JS24();
    end
  end

  OP0JS2O(); /* delete order header record*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value


end // end OP0JS2I

// see if 1 time bill or shipto
Function OP0JS2K()


  set OP5REC empty;


                 /* see if 1 time bill to or shipto record exist*/




  if (OP1REC.OP11TMSF == "Y")
    OP5REC.OP1PARTN = OP1REC.OP1PARTN;
    OP5REC.OP1CUOID = OP1REC.OP1CUOID;
    OP5REC.OP1NORID = 0;
    OP5REC.OP5SHPIN = "Y";
    OP5REC.OP5BILIN = "N";

    call "IO0460" ("S ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        set TA1REC empty;
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VOADDR01";
        OP0JW03.OP0JWPRT = OP5REC.OP1PARTN;
        OP0JW03.OP0JWCID = OP5REC.OP1CUOID;
        OP0JW03.OP0JWNID = OP5REC.OP1NORID;
        OP0JW03.OP0JWITE = 0;
        TA1REC.TA1TBLKE = OP0JW03.OP0JWEKY;
        TA1REC.TA1LOCAT[2] = "S     ";
        TA1REC.TA1LOCAT[3] = "OP0JS2K";
        TA1REC.TA1LOCAT[4] = "IO0460";
        OP0JS70(); /* post, restart op0j from beginning*/
      else
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VOADDR01";
        TA1REC.TA1TBLKE = OP5REC.OP5KEY;
        TA1REC.TA1LOCAT[1] = "OP0JS2K";
        TA1REC.TA1LOCAT[2] = "IO0460";
        XSOPS02(); /* abort program*/
      end
    end


    OP0JW01.OP5GROUP[1] = OP5REC.OP5GROUP;

  end


  if (OP1REC.OP11TMBF == "Y")
    OP5REC.OP1PARTN = OP1REC.OP1PARTN;
    OP5REC.OP1CUOID = OP1REC.OP1CUOID;
    OP5REC.OP1NORID = 0;
    OP5REC.OP5SHPIN = "N";
    OP5REC.OP5BILIN = "Y";

    call "IO0460" ("S ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        set TA1REC empty;
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VOADDR01";
        OP0JW03.OP0JWPRT = OP5REC.OP1PARTN;
        OP0JW03.OP0JWCID = OP5REC.OP1CUOID;
        OP0JW03.OP0JWNID = OP5REC.OP1NORID;
        OP0JW03.OP0JWITE = 0;
        TA1REC.TA1TBLKE = OP0JW03.OP0JWEKY;
        TA1REC.TA1LOCAT[2] = "S     ";
        TA1REC.TA1LOCAT[3] = "OP0JS2K";
        TA1REC.TA1LOCAT[4] = "IO0460";
        OP0JS70(); /* post, restart op0j from beginning*/
      else
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VOADDR01";
        TA1REC.TA1TBLKE = OP5REC.OP5KEY;
        TA1REC.TA1LOCAT[1] = "OP0JS2K";
        TA1REC.TA1LOCAT[2] = "IO0460";
        XSOPS02(); /* abort program*/
      end
    end

    OP0JW01.OP5GROUP[2] = OP5REC.OP5GROUP;

  end


end // end OP0JS2K

// see if text record exist
Function OP0JS2L()




                 /* see if text record exist*/




  if (OP1REC.OP1SPLBF == "Y"
   || OP1REC.OP1SPINF == "Y")
    OP4REC.OP1PARTN = OP1REC.OP1PARTN;
    OP4REC.OP1CUOID = OP1REC.OP1CUOID;
    OP4REC.OP1NORID = 0;
    OP4REC.OP4TRTYP = " ";

    call "IO0470" ("SS", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
      OP0JS2M(); /* move select set of text records to table*/
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VTEXT001";
      TA1REC.TA1TBLKE = OP4REC.OP4KEY;
      TA1REC.TA1LOCAT[3] = "OP0JS2L";
      TA1REC.TA1LOCAT[4] = "IO0470";
      XSOPS02(); /* abort program*/
    end
  end


end // end OP0JS2L

// see if 1 time bill or shipto
Function OP0JS2M()




                 /* move select set of text rows to table*/




  OP0JW01.OP0JWGP2 = " ";
  OPAREC.OPASUB = 1;

  while (SQLCA.VAGen_SQLCODE != 100
   && OPAREC.OPASUB <= 16)

    call "IO0470" ("SN", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};


    if (SQLCA.VAGen_SQLCODE == 0)
      OP0JW01.OP4GROUP[OPASUB] = OP4REC.OP4GROUP;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
           /* next sentence*/
      else
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VTEXT001";
        TA1REC.TA1TBLKE = OP4REC.OP4KEY;
        TA1REC.TA1LOCAT[3] = "OP0JS2M";
        TA1REC.TA1LOCAT[4] = "IO0470";
        XSOPS02(); /* abort program*/
      end
    end

    OPAREC.OPASUB = OPAREC.OPASUB + 1;

  end


  call "IO0470" ("CS", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VTEXT001";
    TA1REC.TA1LOCAT[2] = "CS     ";
    TA1REC.TA1LOCAT[3] = "OP0JS2M";
    TA1REC.TA1LOCAT[4] = "IO0470";
    XSOPS02(); /* abort program*/
  end

end // end OP0JS2M

// delete text records
Function OP0JS2N()

   /* delete text record*/




  call "IO0470" ("D ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      set TA1REC empty;
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VTEXT001";
      OP0JW03.OP0JWPRT = OP4REC.OP1PARTN;
      OP0JW03.OP0JWCID = OP4REC.OP1CUOID;
      OP0JW03.OP0JWNID = OP4REC.OP1NORID;
      OP0JW03.OP0JWITE = 0;
      TA1REC.TA1TBLKE = OP0JW03.OP0JWEKY;
      TA1REC.TA1LOCAT[2] = "D     ";
      TA1REC.TA1LOCAT[3] = "OP0JS2N";
      TA1REC.TA1LOCAT[4] = "IO0470";
      OP0JS70(); /* post, restart op0j from beginning*/
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VTEXT001";
      TA1REC.TA1TBLKE = OP4REC.OP4KEY;
      TA1REC.TA1LOCAT[3] = "OP0JS2N";
      TA1REC.TA1LOCAT[4] = "IO0470";
      XSOPS02(); /* abort program*/
    end
  end



end // end OP0JS2N

// delete ip header text shipto
Function OP0JS2O()

   /* delete one time bill or ship to*/


  if (OP1REC.OP11TMSF == "Y")
    OP5REC.OP1PARTN = OP1REC.OP1PARTN;
    OP5REC.OP1CUOID = OP1REC.OP1CUOID;
    OP5REC.OP1NORID = 0;
    OP5REC.OP5SHPIN = "Y";
    OP5REC.OP5BILIN = "N";


    call "IO0460" ("D ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};


    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        set TA1REC empty;
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VOADDR01";
        OP0JW03.OP0JWPRT = OP5REC.OP1PARTN;
        OP0JW03.OP0JWCID = OP5REC.OP1CUOID;
        OP0JW03.OP0JWNID = OP5REC.OP1NORID;
        OP0JW03.OP0JWITE = 0;
        TA1REC.TA1TBLKE = OP0JW03.OP0JWEKY;
        TA1REC.TA1LOCAT[2] = "D     ";
        TA1REC.TA1LOCAT[3] = "OP0JS2O";
        TA1REC.TA1LOCAT[4] = "IO0460";
        OP0JS70(); /* post, restart op0j from beginning*/
      else
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VOADDR01";
        TA1REC.TA1TBLKE = OP5REC.OP5KEY;
        TA1REC.TA1LOCAT[1] = "OP0JS2O";
        TA1REC.TA1LOCAT[2] = "IO0460";
        XSOPS02(); /* abort program*/
      end
    end



  end


  if (OP1REC.OP11TMBF == "Y")
    OP5REC.OP1PARTN = OP1REC.OP1PARTN;
    OP5REC.OP1CUOID = OP1REC.OP1CUOID;
    OP5REC.OP1NORID = 0;
    OP5REC.OP5SHPIN = "N";
    OP5REC.OP5BILIN = "Y";

    call "IO0460" ("D ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        set TA1REC empty;
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VOADDR01";
        OP0JW03.OP0JWPRT = OP5REC.OP1PARTN;
        OP0JW03.OP0JWCID = OP5REC.OP1CUOID;
        OP0JW03.OP0JWNID = OP5REC.OP1NORID;
        OP0JW03.OP0JWITE = 0;
        TA1REC.TA1TBLKE = OP0JW03.OP0JWEKY;
        TA1REC.TA1LOCAT[2] = "D     ";
        TA1REC.TA1LOCAT[3] = "OP0JS2O";
        TA1REC.TA1LOCAT[4] = "IO0460";
        OP0JS70(); /* post, restart op0j from beginning*/
      else
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VOADDR01";
        TA1REC.TA1TBLKE = OP5REC.OP5KEY;
        TA1REC.TA1LOCAT[1] = "OP0JS2O";
        TA1REC.TA1LOCAT[2] = "IO0460";
        XSOPS02(); /* abort program*/
      end
    end

  end


   /* delete text record*/


  OPASUB = 1;
  if (OP1REC.OP1SPLBF == "Y"
   || OP1REC.OP1SPINF == "Y")

    while (SQLCA.VAGen_SQLCODE != 100
     && OPAREC.OPASUB <= 16)
      OP4REC.OP4GROUP = OP0JW01.OP4GROUP[OPASUB];
      OP4REC.OP1NORID = 0;
      OP0JS2N();
      OPAREC.OPASUB = OPAREC.OPASUB + 1;
    end
  end





                 /* delete garbage header record*/




  OP1REC.OP1NORID = 0;

  call "IO0430" ("D ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* dead lock*/
      set TA1REC empty;
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VORHDR01";
      OP0JW03.OP0JWPRT = OP1REC.OP1PARTN;
      OP0JW03.OP0JWCID = OP1REC.OP1CUOID;
      OP0JW03.OP0JWNID = OP1REC.OP1NORID;
      OP0JW03.OP0JWITE = 0;
      TA1REC.TA1TBLKE = OP0JW03.OP0JWEKY;
      TA1REC.TA1LOCAT[2] = "D     ";
      TA1REC.TA1LOCAT[3] = "OP0JS2O";
      TA1REC.TA1LOCAT[4] = "IO0430";
      OP0JS70(); /* post, restart op0j from beginning*/
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VORHDR01";
      TA1REC.TA1TBLKE = OP1REC.OP1KEY;
      TA1REC.TA1LOCAT[3] = "OP0JS2O";
      TA1REC.TA1LOCAT[4] = "IO0430";
      XSOPS02(); /* abort program*/
    end
  end



end // end OP0JS2O

// store records 4 each sub order
Function OP0JS2P()



                /* store records for each sub order*/





  OPAREC.OPASUB = 1;
  OPWREC.OPWPNSOR = 0;
  set TA2REC empty;
  set VBULKS02 empty;
  TA2REC.TA2DTOPT = "GETDATE";

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD != 0)
    TA1REC.TA1DBASE = " ";
    TA1REC.TA1TBLVU = " ";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOCAT[3] = "OP0JS2P";
    TA1REC.TA1LOCAT[4] = "TA0040";
    TA1REC.TA1LOCAT[1] = "GETDATE";
    set SQLCA empty;
    XSOPS02(); /* abort program*/
  else
    OIBREC.ZZZCHGTM = TA2REC.TA2TIMHM;
    OP1REC.ZZZCHGTM = TA2REC.TA2TIMHM;
    VBULKS02.ZZZCHGTM = TA2REC.TA2TIMHM;
    OP1REC.ZZZSTM = TA2REC.TA2TIMHM;
    VBULKS02.ZZZSTM = TA2REC.TA2TIMHM;
    OIBREC.ZZZCHGDT = TA2REC.TA2GRGGN;
    OP1REC.ZZZCHGDT = TA2REC.TA2GRGGN;
    VBULKS02.ZZZCHGDT = TA2REC.TA2GRGGN;
    OP1REC.ZZZSDT = TA2REC.TA2GRGGN;
    VBULKS02.ZZZSDT = TA2REC.TA2GRGGN;
    OP1REC.ZZZCHGCT = 0;
    VBULKS02.ZZZCHGCT = 0;
  end


  OP0JW01.OP0JWGCK = "Y"; /* set good credit check flag*/

  while (OPAREC.OPASUB <= 10)
    if (OPWREC.OP1OTUNT[OPASUB] == 0)
         /* next sentence*/
    else
      OP0JS2Q(); /* move from sub order to op1rec*/
      if (OP0JW01.OP0JWGCK == "Y") /* good credit check*/
        OP0JS2R(); /* store order header record*/
        OP0JS-OCD-HEADER(); /* capture order for OCD tracking*/
        OP0JS-OCD-ITEMS(); /* (Header & Item/sizes)*/
        OP0JS2S(); /* store billto and shipto records*/
        if (OPWREC.OPWNMALP[OPASUB] > 0) /* if order allocated*/
          OP0JS3A(); /* store header for picking system*/
        end
        OP0JS2T();
                                   /* store instruction and text records*/
        if (OP1REC.OP1EXPDF == "Y") /* if order expedited*/
          OP0JS2Z(); /* setup expedit record*/
          OP0JS3C(); /* store expedite record*/
        end
        if (OP0JW01.OP0JWDCF == "DR") /* rebook draw*/
          OP0JS52(); /* create rebook audit record*/
        end

        OPWREC.OPWPNSOR = OPWREC.OPWPNSOR + 1;
      else
        OPAREC.OPASUB = 11; /* to get out*/
      end
    end
    OPAREC.OPASUB = OPAREC.OPASUB + 1;
  end


  if (OP0JW01.OP0JWGCK == "N") /* bad credit check*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* to roll back*/
    OPWREC.OPWPNSOR = 0; /* reset number of sub-ord*/
    OP0JS2W(); /* reject order*/
  end



end // end OP0JS2P

// move from sub order to op1rec
Function OP0JS2Q()
       /* ********************************************************/
       /* * this statement group does the credit check for all  **/
       /* * on-line sub-orders and sets the order status for    **/
       /* * the order.                                          **/
       /* ********************************************************/

             /* move from sub order to op1rec*/

  OP1REC.OP1NORID = OPAREC.OPASUB;
  OP1REC.XWHCD = OPWREC.XWHCD[OPASUB];
  OP1REC.OP1OWHMF = OPWREC.OP1OWHMF[OPASUB];
  OP1REC.OP1CUNDT = OPWREC.OP1CUNDT[OPASUB];
  OP1REC.OP1OTUNT = OPWREC.OP1OTUNT[OPASUB];
  OP1REC.OP1OVALU = OPWREC.OP1OVALU[OPASUB];
  if (OP0JW01.OP1EXPDF == "Y")
    OP1REC.OP1EXPDF = "Y";
    OPHREC.OP1EXPDF = "Y";
  else
    OP1REC.OP1EXPDF = "N";
    OPHREC.OP1EXPDF = "N";
                                   /* SLARSE Begin*/
    /* If OP0G was bypassed and this is an Apparel, At-once order*/
    /* (and it's not a Canada order) then set the Traffic Alert switch*/
    /* MULTIPLE GPC:included the condition of GPC '02' & WHSE '51'*/
    /* to handle Equipment products from WHSE '51'*/
    if (OPWREC.OP0GFLAG != "Y" && 
    (OP1REC.XGPCD == "03" || 
    (OP1REC.XGPCD == "02" && OP1REC.XWHCD == "51"))
     && OP1REC.XOBCD == "P1"
     && OP1REC.XDZ-DATA-DIST-CD != "CA")
      OP1REC.OP1EXPDF = "Y";
      OPHREC.OP1EXPDF = "Y";
    end
                                   /* SLARSE End*/
  end

   /* *************************************************************/
    /* default rush pick pick code for whs 3,9,12.--9/87jdv*/
   /* the following code commented per sonia 01/11/88 tfox*/
   /* the following code uncommented per terri 03/02/88 craine*/

   /* default rush pick for whse 2,4,7,9,32 to '20'*/
   /* if priority code not = '10' or '30 or s/o ne 10*/
     /* if  at-once order type (xotatonf = 'y')*/
     /* and first quality only (xqacd2 not = '02' and*/
                             /* xqacd3 not = '02' and*/
     /* and in-line             xlccd2 not = '20' and*/
                             /* xlccd3 not = '20')*/

   /* ophrec will be written only if the order has been allocated*/
   /* (done in op0js3a)*/


  if (OP1REC.XPPCD == "10"
   || OP1REC.XPPCD == "30"
   || OP1REC.XSOCD == "10") /* natl account sales office*/
     /* next sentence*/
  else
    if (OP1REC.XOTCD in XOTTBL.XOTCD)
      if (XOTTBL.XOTATONF[sysVar.arrayIndex] == "Y"
       && XOTTBL.XQACD2[sysVar.arrayIndex] != "02"
       && XOTTBL.XQACD3[sysVar.arrayIndex] != "02"
       && XOTTBL.XLCCD2[sysVar.arrayIndex] != "20"
       && XOTTBL.XLCCD3[sysVar.arrayIndex] != "20")
        if (OP1REC.XWHCD == "02" /* greenland*/
         || OP1REC.XWHCD == "04" /* memphis - ftwr*/
         || OP1REC.XWHCD == "07" /* wilsonville*/
         || OP1REC.XWHCD == "09" /* promo*/
         || OP1REC.XWHCD == "51" /* memphis - appl*/
         || OP1REC.XWHCD == "42" /* added for Canada 6/16/95*/
         || OP1REC.XWHCD == "25" /* NSG     - appl*/
         /* tcs include begin BL1085 (4/27/98)*/
         || OP1REC.XWHCD == "70" /* SK8 Greenland*/
         || OP1REC.XWHCD == "72") /* Menlo*/
                                   /* tcs include end   BL1085 (4/27/98)*/
          if (OP1REC.XDVCD == "02"
           && (OP1REC.XGPCD == "03"
           || OP1REC.XGPCD == "02")) /* added for Mult GPC project*/
            OP1REC.XPPCD = "30"; /* or hdr rec*/
            OPHREC.XPPCD = "30"; /* pick hdr rec- just in case*/
          else
            OP1REC.XPPCD = "20"; /* or hdr rec*/
            OPHREC.XPPCD = "20"; /* pick hdr rec- just in case*/
          end
        end
      end
    end
  end


   /* ***********************************************************/
   /* consumer relations need a pick priority of '20' 5/16/91*/
   /* ***********************************************************/

  if (OP1REC.XPPCD == " ")
    if (KUCREC.XAUCD == "62")
      OP1REC.XPPCD = "20"; /* rush pick priority*/
      OPHREC.XPPCD = "20"; /* rush pick priority*/
    end
  end

   /* ***********************************************************/
   /* the following was commented out on 4/10/91 per Rose Boruck*/

   /* set default pick priority to '30' for Herman's*/
   /* for footwear orders out of Memphis*/
   /* NOTE:  Herman's orders are so large that orders are*/
   /* ----   never 'AT ONCE'.  Therefore, if the previous*/
          /* If statement sets pick priority to '20' and this*/
          /* If statement overlays it with '30', this is OK.*/
          /* The only way Herman's orders can be reset to*/
          /* '20' is through manual procedure.*/
   /* ***********************************************************/

   /* IF OP1REC.KUCCOID = 277700;*/
    /* AND OP1REC.XGPCD = '02';*/
    /* AND OP1REC.XWHCD = '04'       ; Memphis - footwear*/
    /* MOVE '30' TO OP1REC.XPPCD     ; set pick priority in hdr*/
    /* MOVE '30' TO OPHREC.XPPCD;*/
   /* END ;*/

   /* ***********************************************************/

   /* if the priority is 20 the total on order is gt 40 and*/
   /* the special instructions are for traffic and the*/
   /* warehouse is wilsonville, automatically set the the*/
   /* the expedite flag to yes 4/19/88 tfox.*/

  /* tt#12820 GSUNDA changes begin - 07/11/01*/
  if (OP1REC.XPPCD == "20" || 
  OP1REC.XPPCD == "10"
   /* tt#12820 GSUNDA changes end - 07/11/01*/
   && OP1REC.XWHCD == "07")
                   /* see if text record exist*/
    if (OP1REC.OP1SPINF == "Y")
      OP4REC.OP1PARTN = OP1REC.OP1PARTN;
      OP4REC.OP1CUOID = OP1REC.OP1CUOID;
      OP4REC.OP1NORID = 0;
      OP4REC.OP4TRTYP = " ";

      call "IO0470" ("SS", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};

      if (SQLCA.VAGen_SQLCODE == 0)

        while (SQLCA.VAGen_SQLCODE != 100)

          call "IO0470" ("SN", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};


          if (SQLCA.VAGen_SQLCODE == 0)
            if (OP4REC.XNDCD == "TRAF")
              OP1REC.OP1EXPDF = "Y";
              OPHREC.OP1EXPDF = "Y";
            end
          else
            if (SQLCA.VAGen_SQLCODE == 100)
                 /* next sentence*/
            else
              TA1REC.TA1DBASE = "DORDER";
              TA1REC.TA1TBLVU = "VTEXT001";
              TA1REC.TA1TBLKE = OP4REC.OP4KEY;
              TA1REC.TA1LOCAT[3] = "OP0JS2Q";
              TA1REC.TA1LOCAT[4] = "IO0470";
              XSOPS02(); /* abort program*/
            end
          end
        end


      else
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VTEXT001";
        TA1REC.TA1TBLKE = OP4REC.OP4KEY;
        TA1REC.TA1LOCAT[3] = "OP0JS2Q";
        TA1REC.TA1LOCAT[4] = "IO0470";
        XSOPS02(); /* abort program*/
      end
      call "IO0470" ("CS", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
    end
    if (OP1REC.OP1OTUNT > 39)
      OP1REC.OP1EXPDF = "Y";
      OPHREC.OP1EXPDF = "Y";
    end
  end
   /* if this is wilsonville and the pickcode is 20*/
   /* move spaces to the pickcode 4/18/88 tfox.*/

  if (OP1REC.XWHCD == "07"
   && OP1REC.XPKCD == "20")
    OP1REC.XPKCD = " ";
    OPHREC.XPKCD = " ";
  end

      /* clear the credit-check info*/

  OP1REC.XCHCD[1] = "00";
  OP1REC.XCHCD[2] = "00";
  OP1REC.XCHCD[3] = "00";
  OP1REC.XCSCD = "00";
  OP1REC.OP1PCSCD = "00";
  OP1REC.OP1CRLMP = " ";
  OP1REC.OP1CRLMR = " ";
  OP1REC.OP1CSADT = 0;
  OP1REC.OP1CSATM = 0;
  OP1REC.OP1PCSDT = 0;
  OP1REC.OP1PCSTM = 0;
  OP1REC.OP1CCKOQ = 0;
  OP1REC.OP1CKAMT = 0;
  OP1REC.OP1DCHLD = 0;


  OP1REC.ZZZCHGCT = 0;
  OP1REC.ZZZSDT = TA2REC.TA2GRGGN;
  OP1REC.ZZZCHGDT = TA2REC.TA2GRGGN;
  OP1REC.ZZZCHGTM = TA2REC.TA2TIMHM;
  OP1REC.ZZZSTM = TA2REC.TA2TIMHM;


       /* if it is a draw order, set the order status based*/
       /* on the reserved-qty-flag (opwrsqtf) and the open-*/
       /* qty-flag (opwopqtf) in the opwrec.*/
       /* if it is regular order or bulk order, set the order*/
       /* status according to the opwnmalp field in the opwrec.*/


  if (OP1REC.XBDCD in XBDTBL.XBDCD
   && XBDTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    if (XBDTBL.XBDRWOFL[sysVar.arrayIndex] == "Y" /* it is draw order*/
     && OPWREC.OPWNMALP[OPASUB] <= 0)            
      OP0JS20(); /* set order status for draw order*/
    else
      if (OPWREC.OPWNMALP[OPASUB] > 0) /* products allocated*/
        OP1REC.XOSCD = "AL"; /* set to allocated status*/
        OP1REC.OP1NTMAL = 1; /* set # times allocated*/
        OP1REC.OP1LALDT = OPAREC.OPACDT; /* last alloc date = today*/
      else
        OP1REC.XOSCD = "OP"; /* set to open status*/
        OP1REC.OP1NTMAL = 0; /* set # times allocated*/
        OP1REC.OP1LALDT = 0;
      end
    end
  end



       /* call cc1070 to credit check for the on-line allocated*/
       /* sub-order*/

  if (OPWREC.OPWNMALP[OPASUB] > 0) /* order allocated*/
    OP1REC.OP1ALCQF = "Y"; /* set allocated qty flag*/
  else
    OP1REC.OP1ALCQF = "N"; /* set allocted qty flag*/
  end


       /* credit check draw orders to adjust the credit qty for*/
       /* the bulk suborders.*/

  if (OP1REC.XBDCD in XBDTBL.XBDCD             /* if order's xbdcd is in table*/
   && XBDTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* and the status is active*/
   && XBDTBL.XBDRWOFL[sysVar.arrayIndex] == "Y") /* and this is a draw order*/
    OP0JS-PROCESS-BULK(); /* adjust the bulk sub orders*/
  end

       /* credit check all orders - allocated and futures orders*/

  OP0JS30(); /* credit check*/


end // end OP0JS2Q

// store order header record
Function OP0JS2R()




                /* store order header record*/


   /* init expedite flag to no for all warehouses*/
   /* except 04 and 32 10/29/87*/


  if (OP1REC.OP1EXPDF == "Y")
    OPHREC.OP1EXPDF = "Y";
  else
    OPHREC.OP1EXPDF = "N";
  end


    /* for colehan orders, any subsequent sub-orders created*/
    /* after the first sub-order as caused by a pushed need*/
    /* date or a change in warehouse code, will have the*/
    /* allow cancel flag default to 'n' and the don't-ship-*/
    /* before date to the need date.*/

  if (OP1REC.XBCCD == "08" /* colehan order*/
   && OPWREC.OPWPNSOR > 0) /* not the first suborder*/
    OP1REC.OP1ACNLF = "N"; /* allow cancel flag*/
    OP1REC.OP1DSBDT = OP1REC.OP1CUNDT; /* dont ship before date*/
  end



  call "IO0430" ("A ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    if (OP1REC.XBDCD == 1) /* customer bulk*/
      OP0JS-INSERT-BULKS(); /* add to customer bulk - vbulks01*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* dead lock*/
      set TA1REC empty;
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VORHDR01";
      OP0JW03.OP0JWPRT = OP1REC.OP1PARTN;
      OP0JW03.OP0JWCID = OP1REC.OP1CUOID;
      OP0JW03.OP0JWNID = OP1REC.OP1NORID;
      OP0JW03.OP0JWITE = 0;
      TA1REC.TA1TBLKE = OP0JW03.OP0JWEKY;
      TA1REC.TA1LOCAT[2] = "A     ";
      TA1REC.TA1LOCAT[3] = "OP0JS2R";
      TA1REC.TA1LOCAT[4] = "IO0430";
      OP0JS70(); /* post, restart op0j from beginning*/
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VORHDR01";
      TA1REC.TA1TBLKE = OP1REC.OP1KEY;
      TA1REC.TA1LOCAT[3] = "OP0JS2R";
      TA1REC.TA1LOCAT[4] = "IO0430";
      XSOPS02(); /* abort program*/
    end
  end



end // end OP0JS2R

// store shipto billto records
Function OP0JS2S()

             /* store one-time billto record*/

  if (OP1REC.OP11TMBF == "Y")
    OP5REC.OP5GROUP = OP0JW01.OP5GROUP[2];
    OP5REC.OP1NORID = OPAREC.OPASUB;
    OP5REC.ZZZCHGCT = 0;
    OP5REC.ZZZCHGDT = TA2REC.TA2GRGGN;
    OP5REC.ZZZCHGTM = TA2REC.TA2TIMHM;

  /*  */
  /* Befor inserting the row it is being checked whether any row*/
  /* exists with the same key values in dorder.voaddr01.*/
  /*  */
    call "IO0460" ("SA", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};

  /*  */
  /* If no row exists then only the row is added to dorder.voaddr01*/
  /* table, else it skips inserting the row.*/
  /*  */
    if (SQLCA.VAGen_SQLCODE == 100)
      call "IO0460" ("A ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
    else
      if (SQLCA.VAGen_SQLCODE == 0)
        call "IO0460" ("U ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* dead lock*/
          set TA1REC empty;
          TA1REC.TA1DBASE = "DORDER";
          TA1REC.TA1TBLVU = "VOADDR01";
          OP0JW03.OP0JWPRT = OP5REC.OP1PARTN;
          OP0JW03.OP0JWCID = OP5REC.OP1CUOID;
          OP0JW03.OP0JWNID = OP5REC.OP1NORID;
          OP0JW03.OP0JWITE = 0;
          TA1REC.TA1TBLKE = OP0JW03.OP0JWEKY;
          TA1REC.TA1LOCAT[2] = "A     ";
          TA1REC.TA1LOCAT[3] = "OP0JS2S";
          TA1REC.TA1LOCAT[4] = "IO0460";
          OP0JS70(); /* post, restart op0j from beginning*/
        else
          TA1REC.TA1DBASE = "DORDER";
          TA1REC.TA1TBLVU = "VOADDR01";
          TA1REC.TA1TBLKE = OP5REC.OP5KEY;
          TA1REC.TA1LOCAT[1] = "OP0JS2S";
          TA1REC.TA1LOCAT[2] = "IO0460";
          XSOPS02(); /* abort program*/
        end
      end
    end
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* dead lock*/
        set TA1REC empty;
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VOADDR01";
        OP0JW03.OP0JWPRT = OP5REC.OP1PARTN;
        OP0JW03.OP0JWCID = OP5REC.OP1CUOID;
        OP0JW03.OP0JWNID = OP5REC.OP1NORID;
        OP0JW03.OP0JWITE = 0;
        TA1REC.TA1TBLKE = OP0JW03.OP0JWEKY;
        TA1REC.TA1LOCAT[2] = "A     ";
        TA1REC.TA1LOCAT[3] = "OP0JS2S";
        TA1REC.TA1LOCAT[4] = "IO0460";
        OP0JS70(); /* post, restart op0j from beginning*/
      else
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VOADDR01";
        TA1REC.TA1TBLKE = OP5REC.OP5KEY;
        TA1REC.TA1LOCAT[1] = "OP0JS2S";
        TA1REC.TA1LOCAT[2] = "IO0460";
        XSOPS02(); /* abort program*/
      end
    end
  end


             /* store one-time shipto record*/


  if (OP1REC.OP11TMSF == "Y")
    OP5REC.OP5GROUP = OP0JW01.OP5GROUP[1];
    OP5REC.OP1NORID = OPAREC.OPASUB;
    OP5REC.ZZZCHGCT = 0;
    OP5REC.ZZZCHGDT = TA2REC.TA2GRGGN;
    OP5REC.ZZZCHGTM = TA2REC.TA2TIMHM;

  /*  */
  /* Befor inserting the row it is being checked whether any row*/
  /* exists with the same key values in dorder.voaddr01.*/
  /*  */
    call "IO0460" ("SA", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};

  /*  */
  /* If no row exists then only the row is added to dorder.voaddr01*/
  /* table, else it skips inserting the row.*/
  /*  */
    if (SQLCA.VAGen_SQLCODE == 100)
      call "IO0460" ("A ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
    else
      if (SQLCA.VAGen_SQLCODE == 0)
        call "IO0460" ("U ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* dead lock*/
          set TA1REC empty;
          TA1REC.TA1DBASE = "DORDER";
          TA1REC.TA1TBLVU = "VOADDR01";
          OP0JW03.OP0JWPRT = OP5REC.OP1PARTN;
          OP0JW03.OP0JWCID = OP5REC.OP1CUOID;
          OP0JW03.OP0JWNID = OP5REC.OP1NORID;
          OP0JW03.OP0JWITE = 0;
          TA1REC.TA1TBLKE = OP0JW03.OP0JWEKY;
          TA1REC.TA1LOCAT[2] = "A     ";
          TA1REC.TA1LOCAT[3] = "OP0JS2S";
          TA1REC.TA1LOCAT[4] = "IO0460";
          OP0JS70(); /* post, restart op0j from beginning*/
        else
          TA1REC.TA1DBASE = "DORDER";
          TA1REC.TA1TBLVU = "VOADDR01";
          TA1REC.TA1TBLKE = OP5REC.OP5KEY;
          TA1REC.TA1LOCAT[1] = "OP0JS2S";
          TA1REC.TA1LOCAT[2] = "IO0460";
          XSOPS02(); /* abort program*/
        end
      end
    end
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* dead lock*/
        set TA1REC empty;
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VOADDR01";
        OP0JW03.OP0JWPRT = OP5REC.OP1PARTN;
        OP0JW03.OP0JWCID = OP5REC.OP1CUOID;
        OP0JW03.OP0JWNID = OP5REC.OP1NORID;
        OP0JW03.OP0JWITE = 0;
        TA1REC.TA1TBLKE = OP0JW03.OP0JWEKY;
        TA1REC.TA1LOCAT[2] = "A     ";
        TA1REC.TA1LOCAT[3] = "OP0JS2S";
        TA1REC.TA1LOCAT[4] = "IO0460";
        OP0JS70(); /* post, restart op0j from beginning*/
      else
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VOADDR01";
        TA1REC.TA1TBLKE = OP5REC.OP5KEY;
        TA1REC.TA1LOCAT[1] = "OP0JS2S";
        TA1REC.TA1LOCAT[2] = "IO0460";
        XSOPS02(); /* abort program*/
      end
    end
  end






end // end OP0JS2S

// store instruction and text rec
Function OP0JS2T()




               /* store instuction and text record*/


  if (OP1REC.OP1SPLBF == "Y"
   || OP1REC.OP1SPINF == "Y")

    OPAREC.OPASUB2 = 1;

    while (OP0JW01.OP4GROUP[OPASUB2] != " "
     && OPAREC.OPASUB2 <= 16)

      OP4REC.OP4GROUP = OP0JW01.OP4GROUP[OPASUB2];
      OP4REC.OP1NORID = OPAREC.OPASUB;
      OP4REC.ZZZCHGCT = 0;
      OP4REC.ZZZCHGDT = TA2REC.TA2GRGGN;
      OP4REC.ZZZCHGTM = TA2REC.TA2TIMHM;

      call "IO0470" ("A ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};

      if (SQLCA.VAGen_SQLCODE == 0)
        if (OPWREC.OPWNMALP[OPASUB] > 0) /* if order allocated*/
          OP0JS3B(); /* store text for picking system*/
        else
           /* next sentence*/
        end
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* dead lock*/
          set TA1REC empty;
          TA1REC.TA1DBASE = "DORDER";
          TA1REC.TA1TBLVU = "VTEXT001";
          OP0JW03.OP0JWPRT = OP4REC.OP1PARTN;
          OP0JW03.OP0JWCID = OP4REC.OP1CUOID;
          OP0JW03.OP0JWNID = OP4REC.OP1NORID;
          OP0JW03.OP0JWITE = 0;
          TA1REC.TA1TBLKE = OP0JW03.OP0JWEKY;
          TA1REC.TA1LOCAT[2] = "A     ";
          TA1REC.TA1LOCAT[3] = "OP0JS2T";
          TA1REC.TA1LOCAT[4] = "IO0470";
          OP0JS70(); /* post, restart op0j from beginning*/
        else
          TA1REC.TA1DBASE = "DORDER";
          TA1REC.TA1TBLVU = "VTEXT001";
          TA1REC.TA1TBLKE = OP4REC.OP4KEY;
          TA1REC.TA1LOCAT[3] = "OP0JS2T";
          TA1REC.TA1LOCAT[4] = "IO0470";
          XSOPS02(); /* abort program*/
        end
      end
      OPAREC.OPASUB2 = OPAREC.OPASUB2 + 1;
    end
  end


end // end OP0JS2T

// transfer to order menu
Function OP0JS2U()



               /* tranfer to order menu*/


   /* display order accepted message on OP0B*/

  OPWREC.OPWMSGC1 = "01";


   /* display allocation hold message on OP0B if indicated*/
   /* by allocation hold code XAHCD set in OP0JSBH*/
   /* we are using COMMAREA.CAMSG instead of setting a*/
   /* code like the above message, because there are no*/
   /* unused message codes left on OPWREVC*/

   /* Golf Cresting project Changes begin TT#4073 SBHARA 04/17/00*/
   /* xahcd 05 added in the IF condition*/
  if (OP1REC.XAHCD == "04"
   || OP1REC.XAHCD == "05") /* all xso 59 orders will go on XAH '05'*/
    COMMAREA.CAMSG = "ORDER PUT ON ALLOCATION HOLD";
  else
    COMMAREA.CAMSG = " ";
  end

   /* Golf Cresting project Changes end   TT#4073 SBHARA 04/17/00*/
  OPWREC.OPWPORD = OP1REC.OP1CUOID;
  OPWREC.OP1GROUP = OP1REC.OP1GROUP;
  COMMAREA.CA-USER-WORKAREA-4K = OPWREC.OPWSGRP;
  sysVar.transferName = "OP0B";
  transfer to program sysVar.transferName passing COMMAREA; /* tranfer out of program*/


end // end OP0JS2U

// delete rows for canceled order
Function OP0JS2W()



       /* delete rows for canceled orders*/

  if (OP1REC.OP11TMSF == "Y")
    OP5REC.OP1PARTN = OP1REC.OP1PARTN;
    OP5REC.OP1CUOID = OP1REC.OP1CUOID;
    OP5REC.OP1NORID = 0;
    OP5REC.OP5SHPIN = "Y";
    OP5REC.OP5BILIN = "N";

    call "IO0460" ("D ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};

    OP0JS2X(); /* check sqlcodes*/
  end



  if (OP1REC.OP11TMBF == "Y")
    OP5REC.OP1PARTN = OP1REC.OP1PARTN;
    OP5REC.OP1CUOID = OP1REC.OP1CUOID;
    OP5REC.OP1NORID = 0;
    OP5REC.OP5SHPIN = "N";
    OP5REC.OP5BILIN = "Y";

    call "IO0460" ("D ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};

    OP0JS2X(); /* check sqlcodes*/
  end


  if (OP1REC.OP1SPLBF == "Y"
   || OP1REC.OP1SPINF == "Y")
    OP4REC.OP1PARTN = OP1REC.OP1PARTN;
    OP4REC.OP1CUOID = OP1REC.OP1CUOID;
    OP4REC.OP1NORID = 0;
    OP4REC.OP4TRTYP = " ";

    call "IO0470" ("SS", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
      OP0JS2Y(); /* delete row from table*/
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VTEXT001";
      TA1REC.TA1TBLKE = OP4REC.OP4KEY;
      TA1REC.TA1LOCAT[3] = "OP0JS2W";
      TA1REC.TA1LOCAT[4] = "IO0470";
      XSOPS02(); /* abort program*/
    end
  end


       /* if a draw order was rejected, add the drawn quantities*/
       /* by product by size back to the bulk order before*/
       /* delete the line-item draw records*/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";

  call "TA0040" (TA2REC) {isExternal = yes};

  if (TA2REC.TA2RTNCD != 0)
    TA1REC.TA1DBASE = " ";
    TA1REC.TA1TBLVU = " ";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOCAT[3] = "OP0JS2W";
    TA1REC.TA1LOCAT[4] = "TA0040";
    TA1REC.TA1LOCAT[1] = "GETDATE";
    set SQLCA empty;
    XSOPS02(); /* abort program*/
  else
     /* next sentence*/
  end



  OPAREC.OPASUB = 1;

  while (OPAREC.OPASUB <= 900)

    OP3REC.OP1PARTN = OP1REC.OP1PARTN;
    OP3REC.OP1CUOID = OP1REC.OP1CUOID;
    OP8REC.OP8TASK = "S ";
    OP8REC.OP8LOCAT[1] = "OP0J005";
    OP8REC.OP8LOCAT[2] = "OP0JS2W";
    OP8REC.OP8LOCAT[3] = " ";
    OP8REC.OP8LOCAT[4] = " ";
    OP8REC.OP8MAP = "OP0JM001";
    if (OPWREC.OPWHEXNO[OPASUB] == "R"
     || OPWREC.OPWHEXNO[OPASUB] == "X"
     || OPWREC.OPWHEXNO[OPASUB] == "0")
          /* next sentence*/
    else
      OP3REC.OP2LNINB = OPAREC.OPASUB;
      OPAREC.OP1NORID = 0;
      OPAREC.OPWHEXNO = OPWREC.OPWHEXNO[OPASUB];
      OP3REC.OP1NORID = OPAREC.OP1NORID;


      call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};

      if (OPBREC.OPBSZRC == 0)
        OP0JS10(); /* delete line-item record*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
      else
        if (OPBREC.OPBSZRC == 1)
           /* next sentence*/
        else
          TA1REC.TA1DBASE = "DORDER";
          TA1REC.TA1TBLVU = "FORMATTER";
          TA1REC.TA1TBLKE = OP3REC.OP2KEY;
          TA1REC.TA1LOCAT[3] = "OP0JS2W";
          TA1REC.TA1LOCAT[4] = "DB1000";
          XSOPS02(); /* abort program*/
        end
      end

    end

    OPAREC.OPASUB = OPAREC.OPASUB + 1;

  end


       /* delete the dummy order header*/

  OP1REC.OP1NORID = 0;

  call "IO0430" ("D ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      set TA1REC empty;
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VORHDR01";
      OP0JW03.OP0JWPRT = OP1REC.OP1PARTN;
      OP0JW03.OP0JWCID = OP1REC.OP1CUOID;
      OP0JW03.OP0JWNID = OP1REC.OP1NORID;
      OP0JW03.OP0JWITE = 0;
      TA1REC.TA1TBLKE = OP0JW03.OP0JWEKY;
      TA1REC.TA1LOCAT[2] = "D     ";
      TA1REC.TA1LOCAT[3] = "OP0JS2W";
      TA1REC.TA1LOCAT[4] = "IO0430";
      OP0JS70(); /* post, restart op0j from beginning*/
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VORHDR01";
      TA1REC.TA1TBLKE = OP1REC.OP1KEY;
      TA1REC.TA1LOCAT[3] = "OP0JS2W";
      TA1REC.TA1LOCAT[4] = "IO0430";
      XSOPS02(); /* abort program*/
    end
  end


       /* if order was rejected because of bad credit check,*/
       /* go back to the master menu*/

  if (OP0JW01.OP0JWGCK == "N") /* bad credit check*/
    OP0JM001.OPMUMSG = CC1REC.CC1RTNMA;
    OPAREC.OPAERR = "Y";
    OP0JW01.OP0JWABD = "Y"; /* set abend flag*/
    exit stack;
  end



  OPWREC.OPWMSGC1 = "02"; /* order rejected*/
  OPWREC.OPWPORD = OP1REC.OP1CUOID;
  OPWREC.OP1GROUP = OP1REC.OP1GROUP;
  COMMAREA.CA-USER-WORKAREA-4K = OPWREC.OPWSGRP;
  sysVar.transferName = "OP0B";
  transfer to program sysVar.transferName passing COMMAREA; /* tranfer out of program*/


end // end OP0JS2W

// check sqlcodes
Function OP0JS2X()



             /* check sqlcodes*/



  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* dead-lock*/
      set TA1REC empty;
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VOADDR01";
      OP0JW01.OP0JWPRT = OP5REC.OP1PARTN;
      OP0JW01.OP0JWCID = OP5REC.OP1CUOID;
      OP0JW01.OP0JWNID = CC1REC.CC1RTNCD;
      OP0JW01.OP0JWLIN = OP5REC.OP5BILIN;
      OP0JW01.OP0JWSHP = OP5REC.OP5SHPIN;
      TA1REC.TA1TBLKE = OP0JW01.OP0JWERR;
      TA1REC.TA1LOCAT[3] = "D     ";
      TA1REC.TA1LOCAT[1] = "OP0JS2X";
      TA1REC.TA1LOCAT[2] = "IO0460";
      OP0JS70(); /* post, restart op0j from beginning*/
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VOADDR01";
      OP0JW01.OP0JWPRT = OP5REC.OP1PARTN;
      OP0JW01.OP0JWCID = OP5REC.OP1CUOID;
      OP0JW01.OP0JWNID = CC1REC.CC1RTNCD;
      OP0JW01.OP0JWLIN = OP5REC.OP5BILIN;
      OP0JW01.OP0JWSHP = OP5REC.OP5SHPIN;
      TA1REC.TA1TBLKE = OP0JW01.OP0JWERR;
      TA1REC.TA1LOCAT[1] = "OP0JS2X";
      TA1REC.TA1LOCAT[2] = "IO0460";
      if (SQLCA.VAGen_SQLCODE == +100) /* rec to delete not found*/
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1LOCAT[3] = "D ";
        try
          call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        end
      else /* other db2 errors*/
        XSOPS02(); /* abort program*/
      end
    end
  end


end // end OP0JS2X

// delete 1 time bill or shipto
Function OP0JS2Y()




                 /* delete special instruction recs and label*/
                 /* rows*/



  OPAREC.OPASUB = 1;

  while (SQLCA.VAGen_SQLCODE != 100)

    call "IO0470" ("SN", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};


    if (SQLCA.VAGen_SQLCODE == 0)

      call "IO0470" ("D ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};

      if (SQLCA.VAGen_SQLCODE == 0)
           /* next sentence*/
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          set TA1REC empty;
          TA1REC.TA1DBASE = "DORDER";
          TA1REC.TA1TBLVU = "VTEXT001";
          OP0JW03.OP0JWPRT = OP4REC.OP1PARTN;
          OP0JW03.OP0JWCID = OP4REC.OP1CUOID;
          OP0JW03.OP0JWNID = OP4REC.OP1NORID;
          OP0JW03.OP0JWITE = 0;
          TA1REC.TA1TBLKE = OP0JW03.OP0JWEKY;
          TA1REC.TA1LOCAT[2] = "D     ";
          TA1REC.TA1LOCAT[3] = "OP0JS2Y";
          TA1REC.TA1LOCAT[4] = "IO0470";
          OP0JS70(); /* post, restart op0j from beginning*/
        else
          TA1REC.TA1DBASE = "DORDER";
          TA1REC.TA1TBLVU = "VTEXT001";
          TA1REC.TA1TBLKE = OP4REC.OP4KEY;
          TA1REC.TA1LOCAT[3] = "OP0JS2Y";
          TA1REC.TA1LOCAT[4] = "IO0470";
          XSOPS02(); /* abort program*/
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
           /* next sentence*/
      else
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VTEXT001";
        TA1REC.TA1TBLKE = OP4REC.OP4KEY;
        TA1REC.TA1LOCAT[3] = "OP0JS2Y";
        TA1REC.TA1LOCAT[4] = "IO0470";
        XSOPS02(); /* abort program*/
      end
    end

  end


  call "IO0470" ("CS", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VTEXT001";
    TA1REC.TA1LOCAT[2] = "CS     ";
    TA1REC.TA1LOCAT[3] = "OP0JS2Y";
    TA1REC.TA1LOCAT[4] = "IO0470";
    XSOPS02(); /* abort program*/
  end


end // end OP0JS2Y

// setup expedite record
Function OP0JS2Z()





  KUMREC.KUCCOID = OP1REC.KUCCOID;
  KUMREC.KUMSTRID = OP1REC.KUMSTRID;

  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OIBREC.KUMSTSNM = KUMREC.KUMSTSNM;
  else
    TA1REC.TA1DBASE = "DCUST ";
    TA1REC.TA1TBLVU = "VSTORE01";
    TA1REC.TA1LOCAT[2] = "S       ";
    TA1REC.TA1LOCAT[3] = "OP0JS2Z ";
    TA1REC.TA1LOCAT[4] = "IO0340  ";
    OP0JW01.OP0JWPAR = OP1REC.OP1PARTN;
    OP0JW01.OP0JWCOI = OP1REC.OP1CUOID;
    OP0JW01.OP0JWNOI = OP1REC.OP1NORID;
    TA1REC.TA1TBLKE = OP0JW01.OP0JWDON;
    XSOPS02();
  end




  OIBREC.OP1PARTN = OP1REC.OP1PARTN;
  OIBREC.OP1CUOID = OP1REC.OP1CUOID;
  OIBREC.KUCCOID = OP1REC.KUCCOID;
  OIBREC.KUMSTRID = OP1REC.KUMSTRID;
  OIBREC.XNXCD = OP1REC.XNXCD;
  OIBREC.XOTCD = OP1REC.XOTCD;
  OIBREC.XSOCD = OP1REC.XSOCD;
  OIBREC.OIARECST = "A";
  OIBREC.OIBPGM = "OP0J";
  OIBREC.ZZZCHGCT = 0;



end // end OP0JS2Z

// credit check for all orders
Function OP0JS30()



       /* ********************************************************/
       /* * this statement group calls cc1070 sub program to    **/
       /* * credit check the on-line order.                     **/
       /* ********************************************************/


  CC1REC.CC1PVALU = OPWREC.OP1OVALU[OPASUB];
  CC1REC.CC1PUNTS = OPWREC.OP1OTUNT[OPASUB];
  CC1REC.CC1PGMNM = "OP0J  ";
  CC1REC.CC1RTNCD = 0;
  CC1REC.CC1RTNMS = " ";

  call "CC1070" (SQLCA, OP1REC, CC1REC) {isNoRefresh = yes, isExternal = yes};

      /* check the return code -- if the cc1rtncd code is not*/
      /* equal zero (bad), reject all sub orders, de-allocate*/
      /* products, and delete picking transaction records*/

  if (CC1REC.CC1RTNCD == 0) /* good return code*/
     /* next sentence*/
  else
    OP0JW01.OP0JWGCK = "N"; /* reset good credit check flag*/
    OP0JM001.OPMUMSG = CC1REC.CC1RTNMA;
    return;
  end



  OPAREC.OPASUB1 = 1;
  while (OPAREC.OPASUB1 <= 3)
    if (OP1REC.XCHCD[OPASUB1] != "00")
      OPWREC.XCHCD[OPASUB1] = OP1REC.XCHCD[OPASUB1];
      OPWREC.OPWMSGC2 = "03";
    end
    OPAREC.OPASUB1 = OPAREC.OPASUB1 + 1;
  end

   /* don't use rtc message if order credit status allowed and*/
   /* reason code is not one time shipto or po nbr required*/

  if (OP1REC.XCSCD == "95" /* nil, cole haan or comp order*/
   || OP1REC.XCSCD == "97" /* allowed credit status*/
   || OP1REC.XCSCD == "98") /* passed  credit status*/
    OPWREC.OPWMSGC2 = "  "; /* blank out rtc message*/
    OPWREC.XCHCD[1] = "00"; /* blank these out so that*/
    OPWREC.XCHCD[2] = "00"; /* op0b will not display any*/
    OPWREC.XCHCD[3] = "00"; /* messages if credit allowed*/
  end
   /* *********************************************************/
end // end OP0JS30

// create picking record ophrec
Function OP0JS3A()
   /* ************************************************/
             /* call ophrec (picking header)*/
   /* create record of order hdr for picking*/
   /* system for orders that were allocated on-line.*/
   /* *************************************************/

   /* default pack code from op1rec*/

  OPHREC.XPACD = OP1REC.XPACD;

  move OP1REC to OPHREC withV60Compat; /* ; note below!!!*/
  OPHREC.KUMSHAID = OP1REC.OP1SHAID; /* db chg 5/89; diff names for*/
  OPHREC.OP1NTMAL = 1; /* ;same element*/
  OPHREC.PK4ITEMS = OPWREC.OPWNMALP[OPASUB];
  OPHREC.IN7STTWH = " ";
  OPHREC.PK1HLDCD = " "; /* reset hold code*/
  OPHREC.XXXADDR1 = OP5REC.XXXADDR[1];
  OPHREC.XXXADDR2 = OP5REC.XXXADDR[2];
  OPHREC.XXXADDR3 = OP5REC.XXXADDR[3];
  OPHREC.OPHALOPF = "N";
  OPHREC.ZZZSDT = TA2REC.TA2GRGGN;
  OPHREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  OPHREC.ZZZCHGTM = TA2REC.TA2TIMHM;
  OPHREC.ZZZCHGCT = 0;
  OPHREC.PK1DALDT = 0; /* reset deallocation date*/

  if (OP1REC.XCSCD == "10"
   || OP1REC.XCSCD == "11"
   || OP1REC.XCSCD == "12"
   || OP1REC.XCSCD == "20"
   || OP1REC.XCSCD == "30"
   || OP1REC.XCSCD == "80")
    OPHREC.PK1HLDCD = "H";
  end

  if (OPHREC.PK1HLDCD == "H")
    set TA9REC empty;
    TA9BEGDT = OPAREC.OPACDT;
    TA9OFSET = 2;

    call "TA0290" (TA9REC) {isNoRefresh = yes, isExternal = yes};

    if (TA9REC.TA9RTNFL == 0)
      OPHREC.PK1DALDT = TA9REC.TA9RTNDT;
    end
  end



  if (OP1REC.OP11TMSF == "Y")
    move OP5REC to OPHREC withV60Compat;
  end

  if (OPHREC.TF1CARCD != "    ")
    OPHREC.PK4CARSP = 10;
  end

  call "IO1650" ("A ", SQLCA, OPHREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* dead lock*/
      set TA1REC empty;
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VOPPKH01";
      OP0JW03.OP0JWPRT = OPHREC.OP1PARTN;
      OP0JW03.OP0JWCID = OPHREC.OP1CUOID;
      OP0JW03.OP0JWNID = OPHREC.OP1NORID;
      OP0JW03.OP0JWITE = 0;
      TA1REC.TA1TBLKE = OP0JW03.OP0JWEKY;
      TA1REC.TA1LOCAT[2] = "A     ";
      TA1REC.TA1LOCAT[3] = "OP0JS3A";
      TA1REC.TA1LOCAT[4] = "IO1650";
      OP0JS70(); /* post, restart op0j from beginning*/
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VOPPKH01";
      TA1REC.TA1TBLKE = OP4REC.OP4KEY;
      TA1REC.TA1LOCAT[3] = "OP0JS3A";
      TA1REC.TA1LOCAT[4] = "IO1650";
      XSOPS02(); /* abort program*/
    end
  end


end // end OP0JS3A

// create picking record opgrec
Function OP0JS3B()



   /* ************************************************/
   /* create record of order text for picking*/
   /* system for orders that were allocated on-line.*/
   /* *************************************************/

  set OPGREC empty;
  move OP4REC to OPGREC withV60Compat;
  OPGREC.XWHCD = OPWREC.XWHCD[OPASUB];
  OPGREC.OP1NTMAL = 1;
  OPGREC.ZZZCHGCT = 0;

  call "IO1670" ("A ", SQLCA, OPGREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* dead lock*/
      set TA1REC empty;
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VOPPKT01";
      OP0JW03.OP0JWPRT = OPGREC.OP1PARTN;
      OP0JW03.OP0JWCID = OPGREC.OP1CUOID;
      OP0JW03.OP0JWNID = OPGREC.OP1NORID;
      OP0JW03.OP0JWITE = 0;
      TA1REC.TA1TBLKE = OP0JW03.OP0JWEKY;
      TA1REC.TA1LOCAT[2] = "A     ";
      TA1REC.TA1LOCAT[3] = "OP0JS3B";
      TA1REC.TA1LOCAT[4] = "IO1670";
      OP0JS70(); /* post, restart op0j from beginning*/
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VOPPKT01";
      TA1REC.TA1TBLKE = OP4REC.OP4KEY;
      TA1REC.TA1LOCAT[3] = "OP0JS3B";
      TA1REC.TA1LOCAT[4] = "IO1670";
      XSOPS02(); /* abort program*/
    end
  end
   /* END ;*/


end // end OP0JS3B

// write expedite record
Function OP0JS3C()


  OIBREC.OP1NORID = OP1REC.OP1NORID;
  OIBREC.OP1NTMAL = OP1REC.OP1NTMAL;
  OIBREC.XOSCD = OP1REC.XOSCD;
  OIBREC.XWHCD = OP1REC.XWHCD;
  OIBREC.OP1CUNDT = OP1REC.OP1CUNDT;



  call "IO1880" ("A ", SQLCA, OIBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* dead lock*/
      set TA1REC empty;
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VXPDIT01";
      OP0JW03.OP0JWPRT = OIBREC.OP1PARTN;
      OP0JW03.OP0JWCID = OIBREC.OP1CUOID;
      OP0JW03.OP0JWNID = OIBREC.OP1NORID;
      OP0JW03.OP0JWITE = 0;
      TA1REC.TA1TBLKE = OP0JW03.OP0JWEKY;
      TA1REC.TA1LOCAT[2] = "A     ";
      TA1REC.TA1LOCAT[3] = "OP0JS3C";
      TA1REC.TA1LOCAT[4] = "IO1880";
      OP0JS70(); /* post, restart op0j from beginning*/
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VXPDIT01";
      TA1REC.TA1TBLKE = OP1REC.OP1KEY;
      TA1REC.TA1LOCAT[3] = "OP0JS3C";
      TA1REC.TA1LOCAT[4] = "IO1880";
      XSOPS02(); /* abort program*/
    end
  end



end // end OP0JS3C

// sales agency/rep edit
Function OP0JS3G()

    /* Make sure sales agency and rep are on the order.  If not,*/
    /* display a message and don't let the order be accepted.*/


  if (OP1REC.SM4REPID == 0
   || OP1REC.SM1AGYID == " ")
    converseLib.validationFailed(609); /* msg: agcy/rep not found*/
    OPAREC.OPAERR = "Y";
  end


end // end OP0JS3G

// write records
Function OP0JS50()


       /* ****************************************************/
       /* * this statement group write records to the data  **/
       /* * base after the order is accepted                **/
       /* ****************************************************/


   /* put order on allocation hold if required*/
  OP0JSBH();

   /* All sales office 59 orders will go on allocation hold*/
   /* Golf cresting changes begin sbhara 04/17/00 tt#4073*/
  OP0JS-MOV-XAHCD-59();
   /* Golf cresting changes end   sbhara 04/17/00 tt#4073*/


  if (OP0JW01.OP0JWBDF == "D") /* draw order*/
    OPWREC.OP1GROUP = OP1REC.OP1GROUP; /* save current op1rec*/
    OP0JS05(); /* update the bulk order*/
    OP1REC.OP1GROUP = OPWREC.OP1GROUP; /* move current op1rec back*/
  end

                                      /* if return from OP0O is '0',*/
  if (OPOREC.OPO-RETURN-CD == 0) /* then the order is a comp-order.*/
    OP0JS-INS-VCPBUS01(); /* build and insert comp order*/
  end

  OP0JS2I(); /* write out records*/

  if ((OP1REC.XPACD == "MS" || OP1REC.XPACD == "CU")
   && OP1REC.XGPCD == "02")
    OP0JS-WRITE-MSR(); /* insert prepacks if everthing looks ok*/
  end

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* make sure order is committed*/

  OP0JW01.OP0JW-CUSTOM-FL = "N"; /* Init custom logo order flag*/

  if (OP0JW01.OP0JW-BULK-FL == "N") /* Not a bulk order*/
    OP0JS-CHK-CUSTOM(); /* check for custom logo prods on ord*/
  end

  if (OP0JW01.OP0JW-CUSTOM-FL == "Y") /* custom logo prod found on ord*/
    OP0JS-XFR-AE08(); /* transfer to cust contact screen*/
  else
    OP0JS2U(); /* transfer to order menu*/
  end



   /* ************************************************************/
end // end OP0JS50

// create rebook draw audit recs
Function OP0JS52()

       /* select all items on the rebook draw order with a*/
       /* given nike order id*/


  OP0JS53(); /* 'ss' line items for draw*/


  OP0JW01.OP0JWEOF = "N";

  OP0JS54(); /* get first line-item for draw*/


  while (OP0JW01.OP0JWEOF == "N")

    OP0JS56(); /* build rd audit rec*/

    OP0JS60(); /* write rd audit rec*/

    OP0JS54(); /* get next line item for draw*/

  end

  OP0JS55(); /* close line item cursor*/


end // end OP0JS52

// select set of line items
Function OP0JS53()

      /* this select gets the line items for one sub-order*/
      /* at a time.*/

  OP8REC.OP8TASK = "SS";
  OP8REC.OP8LOCAT[3] = "OP0JS53";
  OP8REC.OP8LOCAT[4] = " ";
  OP8REC.OP8MAP = " ";

  OP3REC.OP1PARTN = OP1REC.OP1PARTN;
  OP3REC.OP1CUOID = OP1REC.OP1CUOID;
  OP3REC.OP1NORID = OP1REC.OP1NORID;
  OP3REC.OP2LNINB = 0;

  call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes}; /* select all line-items*/

  if (OPBREC.OPBSZRC == 0)
    /* next sentence*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* synpoint rollback*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    COMMAREA.CATOAP = "MN0M";
    sysVar.transferName = "MN0M";
    transfer to transaction sysVar.transferName passing COMMAREA;
  end



end // end OP0JS53

// get next item record
Function OP0JS54()

      /* get the next line item for the sub-order*/

  OP8REC.OP8LOCAT[1] = "OP0J005";
  OP8REC.OP8LOCAT[2] = "OP0J005";
  OP8REC.OP8LOCAT[3] = "OP0JS54";
  OP8REC.OP8LOCAT[4] = " ";


  OP8REC.OP8TASK = "SN";
  call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};

  if (OPBREC.OPBSZRC == 0)
     /* next sentence*/
  else
    if (OPBREC.OPBSZRC == 1) /* if no more line-items*/
      OP0JW01.OP0JWEOF = "Y"; /* set end-of-file to yes*/
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* synpoint rollback*/
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
      COMMAREA.CATOAP = "MN0M";
      sysVar.transferName = "MN0M";
      transfer to transaction sysVar.transferName passing COMMAREA;
    end
  end


end // end OP0JS54

// close item cursor
Function OP0JS55()


  OP8REC.OP8LOCAT[1] = "OP0JS52";
  OP8REC.OP8LOCAT[2] = "OP0JS54";
  OP8REC.OP8LOCAT[3] = "OP0JS55";


  OP8REC.OP8TASK = "CS";
  call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};

  if (OPBREC.OPBSZRC == 0)
     /* next sentence*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* synpoint rollback*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    COMMAREA.CATOAP = "MN0M";
    sysVar.transferName = "MN0M";
    transfer to transaction sysVar.transferName passing COMMAREA;
  end


end // end OP0JS55

// build oprrec rd audit rec
Function OP0JS56()

       /* build the rebook draw audit record*/

  set OPRREC empty;

  OPRREC.OP1PARTN = OP1REC.OP1PARTN;
  OPRREC.OP1CUOID = OP1REC.OP1CUOID;
  OPRREC.OP1NORID = OP1REC.OP1NORID;
  OPRREC.KUCCOID = OP1REC.KUCCOID;
  OPRREC.KUMSTRID = OP1REC.KUMSTRID;
  OPRREC.XNXCD = OP1REC.XNXCD;
  OPRREC.XGPCD = OP1REC.XGPCD;
  OPRREC.XDVCD = OP1REC.XDVCD;
  OPRREC.XSOCD = OP1REC.XSOCD;
  OPRREC.XOTCD = OP1REC.XOTCD;
  OPRREC.XWHCD = OP1REC.XWHCD;
  OPRREC.OP1CUNDT = OP1REC.OP1CUNDT;
  OPRREC.SM1AGYID = OP1REC.SM1AGYID;
  OPRREC.SM4REPID = OP1REC.SM4REPID;
  OPRREC.OPRAUDTP = "2";
  OPRREC.OP1BLKID = OP1REC.OP1BLKID;
  OPRREC.OP1RSVQF = "N";
  OPRREC.OP2LNINB = OP3REC.OP2LNINB;
  OPRREC.SY1STNBR = OP3REC.SY1STNBR;
  OPRREC.SY2CLRID = OP3REC.SY2CLRID;
  OPRREC.XDMCD = OP3REC.XDMCD;
  OPRREC.XUMCD = OP3REC.XUMCD;
  OPRREC.XOWCD = OP3REC.XOWCD;
  OPRREC.XSACD = OP3REC.XEGCD;
  OPRREC.XSDCD = OP3REC.PC2INSEG;
  OPRREC.XPGCD = OP3REC.XPGCD;
  OPRREC.XQACD = OP3REC.XQACD;
  OPRREC.OPRQTYTP = "1";
  OPRREC.OPRTRBKQ = OP3REC.OP2TONOQ;
  OPRREC.OP2NSIZE = OP3REC.OP2NSIZE;

  OP0JW01.OP0JWSUB = 1; /* set subscript*/
  while (OP0JW01.OP0JWSUB <= 40)
    if (OP3REC.OP3SZAFL[OP0JWSUB] == "Y") /* size is active*/
      OPRREC.OP3SZAFL[OP0JWSUB] = OP3REC.OP3SZAFL[OP0JWSUB];
      OPRREC.OPRRBKQT[OP0JWSUB] = OP3REC.OP3ONOQT[OP0JWSUB];
    end

    OP0JW01.OP0JWSUB = OP0JW01.OP0JWSUB + 1;
  end

  OP0JS57(); /* find bulk nike ord id*/

  XX0XS01(); /* get system date and time*/


  OPRREC.ZZZSDT = XX0XW01.XX0XWDAT;
  OPRREC.ZZZCHGDT = 0;
  OPRREC.ZZZCHGTM = 0;
  OPRREC.ZZZCHGCT = 0;



end // end OP0JS56

// get bulk nike ord id
Function OP0JS57()
       /* *******************************************************/
       /* * get the nike ord id from the bulk for each line    **/
       /* * item.  the rebook audit record needs the nike ord  **/
       /* * id from the bulk.                                  **/
       /* *******************************************************/

  OPWREC.OP1GROUP = OP1REC.OP1GROUP; /* save current order*/
  OP0JW01.OP0JWFND = "N"; /* nike-ord-id found*/

        /* move the bulk id to working storage.  get the last*/
        /* digit of the bulk-id for the part-char.  this is*/
        /* part of the key.  the working storage field op0jwblk*/
        /* is used for this purpose only.*/

  OP0JW01.OP0JWBLK = OPRREC.OP1BLKID;

  OP2REC.OP1PARTN = OP0JW01.OP0JWBPN;
  OP2REC.OP1CUOID = OPRREC.OP1BLKID;
  OP2REC.XGPCD = OPRREC.XGPCD;
  OP2REC.SY1STNBR = OPRREC.SY1STNBR;
  OP2REC.SY2CLRID = OPRREC.SY2CLRID;
  OP2REC.XDMCD = OPRREC.XDMCD;
  OP2REC.OP1NORID = 0;

  call "IO0440" ("S2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    OP0JS58(); /* select next bulk nike-ord-id*/

    while (OP0JW01.OP0JWFND == "N") /* nike-ord-id not found*/
      OP0JS59(); /* find bulk header*/

      if (OP0JW01.OP0JWFND == "N") /* nike-ord-id not found*/
        OP0JS58(); /* get next bulk nike-ord-id*/
      end

    end
  else
    TA1REC.TA1DBASE = "DORDER"; /* database used*/
    TA1REC.TA1TBLVU = "VITEM001"; /* view used*/
    TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* record key used*/
    TA1REC.TA1LOCAT[2] = "S2     "; /* selection option*/
    TA1REC.TA1LOCAT[3] = "OP0JS57"; /* statement group used*/
    TA1REC.TA1LOCAT[4] = "IO0440"; /* iomod used*/
    XSOPS02(); /* abort routine*/
  end

  call "IO0440" ("C2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};

  OP1REC.OP1GROUP = OPWREC.OP1GROUP; /* move current order back*/


   /* ************************************************************/
end // end OP0JS57

// get next bulk header item
Function OP0JS58()
         /* get the next bulk header item*/

  call "IO0440" ("N2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if no more line-items*/
      OP0JW01.OP0JWFND = "Y"; /* nike-ord-id found*/
    else
      TA1REC.TA1DBASE = "DORDER"; /* database used*/
      TA1REC.TA1TBLVU = "VITEM001"; /* view used*/
      TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* record key used*/
      TA1REC.TA1LOCAT[2] = "SN     "; /* selection option*/
      TA1REC.TA1LOCAT[3] = "OP0JS58"; /* statement group used*/
      TA1REC.TA1LOCAT[4] = "IO0440"; /* iomod used*/
      XSOPS02(); /* abort routine*/
    end
  end

end // end OP0JS58

// find bulk header for rbaudit
Function OP0JS59()

       /* *******************************************************/
       /* * select all bulk headers for unique cust-ord-id and **/
       /* * nike-ord-id.                                       **/
       /* *******************************************************/

       /* init the abend screen*/

  TA1REC.TA1DBASE = "DORDER";
  TA1REC.TA1TBLVU = "VORHDR01";
  TA1REC.TA1TBLKE = OP1REC.OP1KEY;
  TA1REC.TA1LOCAT[2] = "S      ";
  TA1REC.TA1LOCAT[3] = "OP0JS06";
  TA1REC.TA1LOCAT[4] = "IO0430";


  OP1REC.OP1PARTN = OP2REC.OP1PARTN;
  OP1REC.OP1CUOID = OP2REC.OP1CUOID;
  OP1REC.OP1NORID = OP2REC.OP1NORID;

  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    if (OP1REC.XWHCD == OPRREC.XWHCD
     && OP1REC.OP1CUNDT == OPRREC.OP1CUNDT)
      OPRREC.OPRBNOID = OP1REC.OP1NORID;
      OP0JW01.OP0JWFND = "Y"; /* nike-ord-id found*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
    else
      XSOPS02(); /* abort program*/
    end
  end



   /* ************************************************************/
end // end OP0JS59

// write oprrec rd audit rec
Function OP0JS60()


       /* ************************************************/
       /* * this statement group writes the rebook audit **/
       /* * records for draw orders                      **/
       /* *************************************************/


  set TA1REC empty;



  call "IO2720" ("A ", SQLCA, OPRREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1LOCAT[1] = "OP0JS60";
    TA1REC.TA1TBLVU = "VRBAUD01";
    TA1REC.TA1TBLKE = OP3REC.OP2KEY;
    TA1REC.TA1LOCAT[3] = "IO2720";
    TA1REC.TA1FUNC = "RETN";
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat; /* save the original sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes}; /* abend module*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user area*/
    COMMAREA.CATOAP = "MN0M"; /* go back to the o/m menu*/
    sysVar.transferName = "MN0M";
    transfer to transaction sysVar.transferName passing COMMAREA;
  end



   /* *******************************************************/
end // end OP0JS60

// handle -911 situations
Function OP0JS70()


    /* ********************************************************/
    /* **   this statement group is for handling all -911   ***/
    /* **   sqlcodes for database contention.  if -911 occ- ***/
    /* **   urs from db1000 call, dont post errdiag because ***/
    /* **   db1000 already has done it.  all other -911     ***/
    /* **   occurances, post a errdiag.  move both opwrec   ***/
    /* **   from commarea and map entry fields to commarea  ***/
    /* **   using op0jw04.  set commarea keys and dxfer to  ***/
    /* **   op0j to get a clean restart.  If pa2 cancel     ***/
    /* **   order, post error diag and dxfr to op0b.        ***/
    /* ********************************************************/


  if (TA1REC.TA1LOCAT[1] == "POSTED") /* db1000 already posted*/
    TA1REC.TA1LOCAT[1] = " ";
  else
    TA1REC.TA1PGMNM = "OP0J";
    TA1REC.TA1MAP = "OP0JM001";
    TA1REC.TA1TYPE = "DB2 "; /* type of error*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/

  end


  if (converseVar.eventKey is pa2) /* cancel order*/
    OPWREC.OPWMSGC1 = "02"; /* ORDER REJECTED*/
    OPWREC.OPWPORD = OP1REC.OP1CUOID;
    OPWREC.OP1GROUP = OP1REC.OP1GROUP;
    COMMAREA.CA-USER-WORKAREA-4K = OPWREC.OPWSGRP;
    sysVar.transferName = "OP0B";
    transfer to program sysVar.transferName passing COMMAREA;
  end


  OP0JW04.OPWSGRP = COMMAREA.CA-USER-WORKAREA-4K;
                                                      /* remove orig opwrec*/
  OP0JW04.OP0JWOPT = OP0JM001.OP0JWOPT; /* save map option*/
  OP0JW04.OP1CUPO = OP0JM001.OP1CUPO; /* save map cust po*/
  OP0JW04.OP0JWLC = OP0JM001.OP0JWLC; /* save map line cnt*/
  OP0JW04.OP0JWAU = OP0JM001.OP0JWAU; /* save map ovrd auth*/
  COMMAREA.CA-USER-WORKAREA-4K = OP0JW04.OP0JWGR4; /* save in commarea*/

  COMMAREA.CAFROMAP = "OP0J"; /* commarea from appl*/
  COMMAREA.CACURRAP = "OP0J"; /* commarea current appl*/
  sysVar.transferName = COMMAREA.CACURRAP;
  transfer to program sysVar.transferName passing COMMAREA; /* restart op0j from beginning*/


end // end OP0JS70

// Must order some prods together
Function OP0JS80()

   /* Separate product numbers are used for one product to*/
   /* force the pieces to be shipped in separate containers.*/
   /* This statement group will make sure that all the pieces*/
   /* of a product are on one order.  This logic is a temporary*/
   /* fix until the distribution system can be changed to*/
   /* cause the pieces of one product to ship in separate*/
   /* containers.*/


   /* Set the cursor for reading all the items in an order.*/
  OP0JS81();


  OP0JS82(); /* Read the first item record.*/


   /* Set all "exists" flags to no.*/
  OP0JW01.OP0JWP1E = "N"; /* Product 248000 exists flag.*/
  OP0JW01.OP0JWP2E = "N"; /* Product 248200 exists flag.*/
  OP0JW01.OP0JWP3E = "N"; /* Product 248230 exists flag.*/
  OP0JW01.OP0JWP4E = "N"; /* Product 248231 exists flag.*/
  OP0JW01.OP0JWP5E = "N"; /* Product 248064 exists flag*/
  OP0JW01.OP0JWP6E = "N"; /* Product 248164 exists flag*/
  OP0JW01.OP0JWP7E = "N"; /* Product 246203 exists flag*/
  OP0JW01.OP0JWP8E = "N"; /* Product 246204 exists flag*/
  OP0JW01.OP0JWP9E = "N"; /* Product 248496 exists flag.*/
  OP0JW01.OP0JW10E = "N"; /* Product 248523 exists flag.*/
  OP0JW01.OP0JW11E = "N"; /* Product 248516 exists flag*/
  OP0JW01.OP0JW12E = "N"; /* Product 248526 exists flag*/
  OP0JW01.OP0JW13E = "N"; /* Product 248611 exists flag*/
  OP0JW01.OP0JW14E = "N"; /* Product 248612 exists flag*/
  OP0JW01.OP0JW15E = "N"; /* Product 246205 exists flag*/
  OP0JW01.OP0JW16E = "N"; /* Product 246215 exists flag*/
  OP0JW01.OP0JW18E = "N"; /* Product 248658 exists flag*/
  OP0JW01.OP0JW19E = "N"; /* Product 248659 exists flag*/
  OP0JW01.OP0JW20E = "N"; /* Product 246233 exists flag*/
  OP0JW01.OP0JW21E = "N"; /* Product 246234 exists flag*/
  OP0JW01.OP0JW23E = "N"; /* Product 248723 exists flag*/
  OP0JW01.OP0JW24E = "N"; /* Product 248763 exists flag*/
  OP0JW01.OP0JW25E = "N"; /* Product 246539 exists flag*/
  OP0JW01.OP0JW26E = "N"; /* Product 303595 exists flag*/
  OP0JW01.OP0JW27E = "N"; /* Product 303603 exists flag*/
  OP0JW01.OP0JW28E = "N"; /* Product 303604 exists flag*/
  OP0JW01.OP0JW29E = "N"; /* Product 303611 exists flag*/


  while (SQLCA.VAGen_SQLCODE == 0)
    OP0JS83(); /* Search for split products.*/
  end


  OP0JS84(); /* Close the cursor.*/


  OP0JS85(); /* Edit for split products.*/
end // end OP0JS80

// Set cursor for read of items
Function OP0JS81()

   /* Set up the cursor to read all the items in the order.*/

  OP2REC.OP1PARTN = OP1REC.OP1PARTN; /* Partial order number.*/
  OP2REC.OP1CUOID = OP1REC.OP1CUOID; /* Customer order id.*/
  OP2REC.OP1NORID = 0; /* Nike order id.*/



   /* Call the I/O mod to set the cursor.*/
  call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};



   /* Abend if an error has occurred.*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* Next sentence - no errors, so do nothing.*/

  else
     /* Error has occurred.  Set up TA1REC fields.*/

    TA1REC.TA1PGMNM = "OP0J    ";
    TA1REC.TA1MAP = "OP0JM001";
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VITEM001";

     /* Format the key of the cursor.*/
    OP0JW03.OP0JWPRT = OP2REC.OP1PARTN;
    OP0JW03.OP0JWCID = OP2REC.OP1CUOID;
    OP0JW03.OP0JWNID = 0;
    OP0JW03.OP0JWITE = 0;
    TA1REC.TA1TBLKE = OP0JW03.OP0JWEKY;

    TA1REC.TA1LOCAT[1] = "OP0J001 ";
    TA1REC.TA1LOCAT[2] = "OP0JS81 ";
    TA1REC.TA1LOCAT[3] = "IO0440  ";
    TA1REC.TA1LOCAT[4] = "SS      ";
    XSOPS02(); /* Force an abend.*/
  end
end // end OP0JS81

// Read an item record
Function OP0JS82()

   /* Call the I/O mod to read an item record.*/
  call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};



   /* Stop program if error has occurred.*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* Next sentence - no errors, so do nothing.*/

  else
     /* Error has occurred.  Set up TA1REC fields and abend.*/

    TA1REC.TA1PGMNM = "OP0J    ";
    TA1REC.TA1MAP = "OP0JM001";
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOCAT[1] = "OP0J001 ";
    TA1REC.TA1LOCAT[2] = "OP0JS82 ";
    TA1REC.TA1LOCAT[3] = "IO0440  ";
    TA1REC.TA1LOCAT[4] = "SN      ";
    XSOPS02(); /* Force an abend.*/
  end
end // end OP0JS82

// Search for split products
Function OP0JS83()

   /* A match on product number causes the appropriate flag*/
   /* to be set.*/

  if (OP2REC.SY1STNBR == "248000")
    OP0JW01.OP0JWP1E = "Y"; /* Product 248000 exists flag*/
  end

  if (OP2REC.SY1STNBR == "248200")
    OP0JW01.OP0JWP2E = "Y"; /* Product 248200 exists flag*/
  end

  if (OP2REC.SY1STNBR == "248230")
    OP0JW01.OP0JWP3E = "Y"; /* Product 248230 exists flag*/
  end

  if (OP2REC.SY1STNBR == "248231")
    OP0JW01.OP0JWP4E = "Y"; /* Product 248231 exists flag*/
  end

  if (OP2REC.SY1STNBR == "248064")
    OP0JW01.OP0JWP5E = "Y"; /* Product 248064 exists flag*/
  end

  if (OP2REC.SY1STNBR == "248164")
    OP0JW01.OP0JWP6E = "Y"; /* Product 248164 exists flag*/
  end

  if (OP2REC.SY1STNBR == "246203")
    OP0JW01.OP0JWP7E = "Y"; /* Product 246203 exists flag*/
  end

  if (OP2REC.SY1STNBR == "246204")
    OP0JW01.OP0JWP8E = "Y"; /* Product 246204 exists flag*/
  end

  if (OP2REC.SY1STNBR == "248496")
    OP0JW01.OP0JWP9E = "Y"; /* Product 248496 exists flag*/
  end

  if (OP2REC.SY1STNBR == "248523")
    OP0JW01.OP0JW10E = "Y"; /* Product 248523 exists flag*/
  end

  if (OP2REC.SY1STNBR == "248516")
    OP0JW01.OP0JW11E = "Y"; /* Product 248516 exists flag*/
  end

  if (OP2REC.SY1STNBR == "248526")
    OP0JW01.OP0JW12E = "Y"; /* Product 248526 exists flag*/
  end

  if (OP2REC.SY1STNBR == "248611")
    OP0JW01.OP0JW13E = "Y"; /* Product 248611 exists flag*/
  end

  if (OP2REC.SY1STNBR == "248612")
    OP0JW01.OP0JW14E = "Y"; /* Product 248612 exists flag*/
  end

  if (OP2REC.SY1STNBR == "246205")
    OP0JW01.OP0JW15E = "Y"; /* Product 246205 exists flag*/
  end

  if (OP2REC.SY1STNBR == "246215")
    OP0JW01.OP0JW16E = "Y"; /* Product 246215 exists flag*/
  end

  if (OP2REC.SY1STNBR == "248658")
    OP0JW01.OP0JW18E = "Y"; /* Product 248658 exists flag*/
  end

  if (OP2REC.SY1STNBR == "248659")
    OP0JW01.OP0JW19E = "Y"; /* Product 248659 exists flag*/
  end

  if (OP2REC.SY1STNBR == "246233")
    OP0JW01.OP0JW20E = "Y"; /* Product 246233 exists flag*/
  end

  if (OP2REC.SY1STNBR == "246234")
    OP0JW01.OP0JW21E = "Y"; /* Product 246234 exists flag*/
  end

  if (OP2REC.SY1STNBR == "248723")
    OP0JW01.OP0JW23E = "Y"; /* Product 248723 exists flag*/
  end

  if (OP2REC.SY1STNBR == "248763")
    OP0JW01.OP0JW24E = "Y"; /* Product 248763 exists flag*/
  end

  if (OP2REC.SY1STNBR == "246539")
    OP0JW01.OP0JW25E = "Y"; /* Product 246539 exists flag*/
  end

  if (OP2REC.SY1STNBR == "303595")
    OP0JW01.OP0JW26E = "Y"; /* Product 303595 exists flag*/
  end

  if (OP2REC.SY1STNBR == "303603")
    OP0JW01.OP0JW27E = "Y"; /* Product 303603 exists flag*/
  end

  if (OP2REC.SY1STNBR == "303604")
    OP0JW01.OP0JW28E = "Y"; /* Product 303604 exists flag*/
  end

  if (OP2REC.SY1STNBR == "303611")
    OP0JW01.OP0JW29E = "Y"; /* Product 303611 exists flag*/
  end

  OP0JS82(); /* Read the next item record.*/
end // end OP0JS83

// Close the item cursor
Function OP0JS84()

   /* Call the I/O mod to close the cursor.*/
  call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};



   /* Stop the program if error has occurred.*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* Next sentence - no errors, so do nothing.*/

  else
     /* Error has occurred.  Set up TA1REC fields and abend*/

    TA1REC.TA1PGMNM = "OP0J    ";
    TA1REC.TA1MAP = "OP0JM001";
    TA1REC.TA1DBASE = "DORDER  ";
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOCAT[1] = "OP0J001 ";
    TA1REC.TA1LOCAT[2] = "OP0JS84 ";
    TA1REC.TA1LOCAT[3] = "IO0440  ";
    TA1REC.TA1LOCAT[4] = "CS      ";
    XSOPS02(); /* Force an abend.*/
  end
end // end OP0JS84

// Edit for split products
Function OP0JS85()

  if (OP0JW01.OP0JWP1E == "Y" /* See if products 248000 or 248200*/
   || OP0JW01.OP0JWP2E == "Y") /* were found.*/

    if (OP0JW01.OP0JWP1E == "Y" /* Both must be on the order.*/
     && OP0JW01.OP0JWP2E == "Y")
       /* Next sentence - both were found.*/

    else
       /* Error because both products were not found.*/
      OPAREC.OPAERR = "Y"; /* Error flag*/
      converseLib.validationFailed(569);
                                   /* Products 248000 and 248200 must be*/
                                  /* ordered together.*/
    end
  end



  if (OP0JW01.OP0JWP3E == "Y" /* See if products 248230 or 248231*/
   || OP0JW01.OP0JWP4E == "Y") /* were found.*/

    if (OP0JW01.OP0JWP3E == "Y" /* Both must be on the order.*/
     && OP0JW01.OP0JWP4E == "Y")
       /* Next sentence - both were found.*/

    else
       /* Error because both products were not found.*/
      OPAREC.OPAERR = "Y"; /* Error flag*/
      converseLib.validationFailed(570);
                                   /* Products 248230 and 248231 must be*/
                                  /* ordered together.*/
    end
  end

  if (OP0JW01.OP0JWP5E == "Y" /* See if products 248064 or 248164*/
   || OP0JW01.OP0JWP6E == "Y") /* were found.*/

    if (OP0JW01.OP0JWP5E == "Y" /* Both must be on the order.*/
     && OP0JW01.OP0JWP6E == "Y")
       /* Next sentence - both were found.*/
          /* ;*/
    else
           /* ERROR BECAUSE BOTH PRODUCTS WERE NOT FOUND.*/
      OPAREC.OPAERR = "Y"; /* Error flag*/
      converseLib.validationFailed(591); /* Products 248064 and 248164 must be*/
          /* ;                                ordered together.*/
    end
  end

  if (OP0JW01.OP0JWP7E == "Y" /* See if products 246203 or 246204*/
   || OP0JW01.OP0JWP8E == "Y") /* were found.*/

    if (OP0JW01.OP0JWP7E == "Y" /* Both must be on the order.*/
     && OP0JW01.OP0JWP8E == "Y")
       /* Next sentence - both were found.*/
          /* ;*/
    else
           /* ERROR BECAUSE BOTH PRODUCTS WERE NOT FOUND.*/
      OPAREC.OPAERR = "Y"; /* Error flag*/
      converseLib.validationFailed(769); /* Products 246203 and 246204 must be*/
          /* ;                                ordered together.*/
    end
  end

   /* NOTE:  this one has a little twist to it!!!!!!!!!!*/
   /* product 248277 can be ordered without product 248320,*/
   /* but product 248320 must be ordered with 247277*/

   /* IF OP0JW01.OP0JWP8E = 'Y'       ; See if product 248320*/
    /* IF OP0JW01.OP0JWP7E = 'Y'     ; see if product 248277*/
      /* ; Next sentence - both were found.*/
      /* ;    ;*/
    /* ELSE ;*/
      /* ;     ERROR BECAUSE 248320 was ordered without 248277*/
      /* MOVE 'Y' TO OPAREC.OPAERR   ;    Error flag*/
      /* MOVE 695 TO EZEMNO   ; Product 248320 must be ordered*/
      /* ;    ;                 with product 248277*/
    /* END ;*/
   /* END ;*/


  if (OP0JW01.OP0JWP9E == "Y" /* See if products 248496 or 248523*/
   || OP0JW01.OP0JW10E == "Y") /* were found.*/

    if (OP0JW01.OP0JWP9E == "Y" /* Both must be on the order.*/
     && OP0JW01.OP0JW10E == "Y")
       /* Next sentence - both were found.*/
          /* ;*/
    else
           /* ERROR BECAUSE BOTH PRODUCTS WERE NOT FOUND.*/
      OPAREC.OPAERR = "Y"; /* Error flag*/
      converseLib.validationFailed(714); /* Products 248496 and 248523 must be*/
          /* ;                                ordered together.*/
    end
  end

  if (OP0JW01.OP0JW11E == "Y" /* See if products 248516 or 248526*/
   || OP0JW01.OP0JW12E == "Y") /* were found.*/

    if (OP0JW01.OP0JW11E == "Y" /* Both must be on the order.*/
     && OP0JW01.OP0JW12E == "Y")
       /* Next sentence - both were found.*/
          /* ;*/
    else
           /* ERROR BECAUSE BOTH PRODUCTS WERE NOT FOUND.*/
      OPAREC.OPAERR = "Y"; /* Error flag*/
      converseLib.validationFailed(715); /* Products 248516 and 248526 must be*/
          /* ;                                ordered together.*/
    end
  end

  if (OP0JW01.OP0JW13E == "Y" /* See if products 248611 or 248612*/
   || OP0JW01.OP0JW14E == "Y") /* were found.*/

    if (OP0JW01.OP0JW13E == "Y" /* Both must be on the order.*/
     && OP0JW01.OP0JW14E == "Y")
       /* Next sentence - both were found.*/
          /* ;*/
    else
           /* ERROR BECAUSE BOTH PRODUCTS WERE NOT FOUND.*/
      OPAREC.OPAERR = "Y"; /* Error flag*/
      converseLib.validationFailed(768); /* Products 248611 and 248612 must be*/
          /* ;                                ordered together.*/
    end
  end

  if (OP0JW01.OP0JW15E == "Y" /* See if products 246205 or 246215*/
   || OP0JW01.OP0JW16E == "Y") /* were found.*/

    if (OP0JW01.OP0JW15E == "Y" /* Both must be on the order.*/
     && OP0JW01.OP0JW16E == "Y")
       /* Next sentence - both were found.*/
          /* ;*/
    else
           /* ERROR BECAUSE BOTH PRODUCTS WERE NOT FOUND.*/
      OPAREC.OPAERR = "Y"; /* Error flag*/
      converseLib.validationFailed(899); /* Products 246205 and 246215 must be*/
          /* ;                                ordered together.*/
    end
  end

  if (OP0JW01.OP0JW18E == "Y" /* See if products 248658 or 248659*/
   || OP0JW01.OP0JW19E == "Y") /* were found.*/

    if (OP0JW01.OP0JW18E == "Y" /* Both must be on the order.*/
     && OP0JW01.OP0JW19E == "Y")
       /* Next sentence - both were found.*/
          /* ;*/
    else
           /* ERROR BECAUSE BOTH PRODUCTS WERE NOT FOUND.*/
      OPAREC.OPAERR = "Y"; /* Error flag*/
      converseLib.validationFailed(780); /* Products 248658 and 248659 must be*/
          /* ;                                ordered together.*/
    end
  end

  if (OP0JW01.OP0JW20E == "Y" /* See if products 246233 or 246234*/
   || OP0JW01.OP0JW21E == "Y") /* were found.*/

    if (OP0JW01.OP0JW20E == "Y" /* Both must be on the order.*/
     && OP0JW01.OP0JW21E == "Y")
       /* Next sentence - both were found.*/
          /* ;*/
    else
           /* ERROR BECAUSE BOTH PRODUCTS WERE NOT FOUND.*/
      OPAREC.OPAERR = "Y"; /* Error flag*/
      converseLib.validationFailed(900); /* Products 246233 and 246234 must be*/
          /* ;                                ordered together.*/
    end
  end

  if (OP0JW01.OP0JW23E == "Y" /* See if products 248723 or 248763*/
   || OP0JW01.OP0JW24E == "Y") /* were found.*/

    if (OP0JW01.OP0JW23E == "Y" /* Both must be on the order.*/
     && OP0JW01.OP0JW24E == "Y")
       /* Next sentence - both were found.*/
          /* ;*/
    else
           /* ERROR BECAUSE BOTH PRODUCTS WERE NOT FOUND.*/
      OPAREC.OPAERR = "Y"; /* Error flag*/
      converseLib.validationFailed(800); /* Products 248723 and 248763 must be*/
          /* ;                                ordered together.*/
    end
  end

  if (OP0JW01.OP0JW25E == "Y") /* See if product 246539 found*/
    if (OP0JW01.OP0JW26E == "Y") /* See if product 303595 found*/
      if (OP0JW01.OP0JW29E == "Y") /* See if product 303611 found*/

  /* IF OP0JW01.OP0JW25E = 'Y'      /* Both must be on the order.*/
  /* AND OP0JW01.OP0JW26E = 'Y';*/
        /* Next sentence - both were found.*/
          /* ;*/
      else
           /* ERROR BECAUSE 246539 was ordered without 303595 and 303611*/
        OPAREC.OPAERR = "Y"; /* Error flag*/
        converseLib.validationFailed(1014); /* Products 246539,303595 and 303611*/
          /* ordered together.*/
      end
    end
  end

  if (OP0JW01.OP0JW27E == "Y" /* See if products 303603 or 303604*/
   || OP0JW01.OP0JW28E == "Y") /* were found.*/

    if (OP0JW01.OP0JW27E == "Y" /* Both must be on the order.*/
     && OP0JW01.OP0JW28E == "Y")
       /* Next sentence - both were found.*/
          /* ;*/
    else
           /* ERROR BECAUSE BOTH PRODUCTS WERE NOT FOUND.*/
      OPAREC.OPAERR = "Y"; /* Error flag*/
      converseLib.validationFailed(1015); /* Products 303603 and 303604 must be*/
          /* ;                                ordered together.*/
    end
  end

end // end OP0JS85

// edit for cust op nbr required
Function OP0JSAH()
      /* ******************************************/
   /* For some customers, we required additional information*/
   /* before finalizing an order.  What we require is determined*/
   /* by kucypoft - 00 - nothing is required*/
                 /* 01 - customer po nbr is required*/
                 /* 02 - customer po nbr and hard copy required*/
                 /* 03 - customer po nbr, hard copy and*/
                      /* confirmation required*/

   /* This application will automatically place an order on*/
   /* allocation hold until the above requirements are met.*/
   /* This sgrp produces a warning message the first time*/
   /* the screen is conversed to advise them of the pending*/
   /* allocation hold.*/

   /* In some instances, they can change information on the*/
   /* screen and the order is not placed on allocation hold*/

   /* For some draws, the message is dependent on whether or not*/
   /* the bulk order is on allocation hold.  This information is*/
   /* passed from OP0D in the xahcd area of OP1REC, and will*/
   /* be used to set the message.  xahcd will be properly set*/
   /* before it is written back to file.*/

   /* At once orders are considered to have met all po*/
   /* requirements if the po# has been entered*/
      /* ******************************************/
  if (OP1REC.XBDCD == "3" /* these draw orders are dependent*/
   || OP1REC.XBDCD == "5" /* on the condition of the bulk order*/
   || OP1REC.XBDCD == "8" 
   || OP1REC.XBDCD == "F")
    if (OP1REC.XAHCD != " ") /* op0d has passed this value to*/
                                    /* indicate bulk is on hold*/
      OP0JM001.OPMUMSG = OP0JT01.OP0JTMSG[6];
    end
    return;
  end
  if (OP1REC.OP1CUPO == " ") /* no po number on this order*/
    if (KUCREC.KUCYPOFT == "01")
      OP0JM001.OPMUMSG = OP0JT01.OP0JTMSG[1]; /* po #*/
    end
    if (KUCREC.KUCYPOFT == "02")
      OP0JM001.OPMUMSG = OP0JT01.OP0JTMSG[2]; /* po #/hardcopy*/
    end
    if (KUCREC.KUCYPOFT == "03")
      OP0JM001.OPMUMSG = OP0JT01.OP0JTMSG[3]; /* po#/hcopy/confirm*/
    end
  else
    if (OP1REC.XOTCD in XOTTBL.XOTCD
     && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A"
     && XOTTBL.XOTATONF[sysVar.arrayIndex] == "Y") /* this is an 'at once' order*/
        /* next sentence                      and will not go on hold*/
    else
      if (KUCREC.KUCYPOFT == "02")
        OP0JM001.OPMUMSG = OP0JT01.OP0JTMSG[4]; /* hardcopy*/
      end
      if (KUCREC.KUCYPOFT == "03")
        OP0JM001.OPMUMSG = OP0JT01.OP0JTMSG[5]; /* hardcopy/confirm*/
      end
    end
  end
end // end OP0JSAH

// edit for cust op nbr required
Function OP0JSBH()
      /* ******************************************/
   /* put order on allocation hold if indicated*/
   /* by kucypoft - 00 - nothing is required*/
                 /* 01 - customer po nbr is required*/
                 /* 02 - customer po nbr and hard copy required*/
                 /* 03 - customer po nbr, hard copy and*/
                      /* confirmation required*/

   /* This is the first hold that can be placed on an order*/
   /* so no checking for previous codes is required.*/

   /* Some draw orders are placed on hold only if the bulk*/
   /* order is on hold.  This information is passed from*/
   /* op0d in xahcd.*/

   /* at once orders are considered to have met all requirements*/
   /* if po# is present*/

      /* ******************************************/
  if (OP1REC.XBDCD == "3" 
   || OP1REC.XBDCD == "5" /* this order is dependent*/
   || OP1REC.XBDCD == "8" /* on the condition of the bulk*/
   || OP1REC.XBDCD == "F")
    if (OP1REC.XAHCD != " ") /* op0d has passed this value*/
      OP1REC.OP1ALHDT = OPAREC.OPACDT; /* set hold date to today*/
    end
    return;
  end
  if (KUCREC.KUCYPOFT == "00") /* nothing is required*/
    return;
  end
  if (OP1REC.XOTCD in XOTTBL.XOTCD              
   && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A"  
   && XOTTBL.XOTATONF[sysVar.arrayIndex] == "Y" /* this is an 'at once' order*/
   && OP1REC.OP1CUPO != " ")                    /* and the po# is present*/
    return; /* so it does not go on hold*/
  end
  if (KUCREC.KUCYPOFT == "02" /* hard copy*/
   || KUCREC.KUCYPOFT == "03") /* and confirmation are required*/
    if (OP1REC.XAHCD == " " /* no alloc hold*/
     || OP1REC.XAHCD == "04") /* po alloc hold*/
      OP1REC.XAHCD = "04"; /* order is on hold*/
      /* GOLF CRESTING PROJECT CHANGE BEGIN TT#4073 SBHARA 05/03/00*/
      OP1REC.OP1ALHDT = OPAREC.OPACDT; /* PUT CUREENT DAT FOR XAHCD*/
      /* GOLF CRESTING PROJECT CHANGE END   TT#4073 SBHARA 05/03/00*/
    else /* must be '05'; do no overlay*/
      OP1REC.OP1PAHCD = "04"; /* move to previous alloc hold*/
    end
  end
  if (KUCREC.KUCYPOFT == "01" /* po number required*/
   && OP1REC.OP1CUPO == " ")  /* no po number on this order*/
    if (OP1REC.XAHCD == " " /* no alloc hold*/
     || OP1REC.XAHCD == "04") /* po alloc hold*/
      OP1REC.XAHCD = "04"; /* order is on hold*/
      /* GOLF CRESTING PROJECT CHANGE BEGIN TT#4073 SBHARA 05/03/00*/
      OP1REC.OP1ALHDT = OPAREC.OPACDT; /* PUT CUREENT DAT FOR XAHCD*/
      /* GOLF CRESTING PROJECT CHANGE END   TT#4073 SBHARA 05/03/00*/
    else /* must be '05'; do no overlay*/
      OP1REC.OP1PAHCD = "04"; /* move to previous alloc hold*/
    end
  end
end // end OP0JSBH

// get current style life cycle
Function OP0JSGL()




      /* ********************************************************/
      /* * read db2 for the product's style,color & size recs  **/
      /* * this is a combined view of 3 records.               **/
      /* ********************************************************/

  TA1REC.TA1LOCAT[2] = "OP0JSGL"; /* error diag group name*/

      /* set up read key*/

  SYCREC.XGPCD = OP3REC.XGPCD; /* general product class*/
  SYCREC.SY1STNBR = OP3REC.SY1STNBR; /* style*/
  SYCREC.SY2CLRID = OP3REC.SY2CLRID; /* color*/
  SYCREC.XDMCD = OP3REC.XDMCD; /* dimension*/


      /* read db2*/

  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for single select*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good return*/
   || SQLCA.VAGen_SQLCODE == 100) /* or rec not found*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DPROD"; /* data base name*/
    TA1REC.TA1TBLVU = "VCOLOR02"; /* table view*/
    TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "IO0560"; /* i/o mod*/
    XSOPS02(); /* common abend routine*/
  end

      /* if product record(s) not found*/

  if (SQLCA.VAGen_SQLCODE == 100)
    set SYCREC empty;
    OP0JW01.XLCCD = "  ";
    return;
  end

    /* added for Canada --  June 19, 1995 --*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good return*/
    if (OP1REC.XDZ-DATA-DIST-CD == "CA")
      OP0JW01.OP0JW-WSY2000-FND-FLAG = " ";
      OP0JS-GET-WSY2000();
      if (OP0JW01.OP0JW-WSY2000-FND-FLAG == "N") /* reject product-Canada*/
        set SYCREC empty;
        OP0JW01.XLCCD = "  ";
        return;
      else
        if (OP0JW01.OP0JW-WSY2000-FND-FLAG == "Y") /* reject product-Canada*/
          /* next sentence*/
        else
          if (WSY2000.WSY2000-RETURN-CODE == "98")
            OPAREC.OPAERR = "Y";
            converseLib.validationFailed(010); /* data base busy*/
            return;
          else
            OPAREC.OPAERR = "Y";
            converseLib.validationFailed(010); /* data base busy*/
            return;
          end
        end
      end
    end
  end

      /* if product record(s) not found*/




    /* this routine gets the most current life cycle for*/
    /* the style being entered.*/



  if (OPAREC.OPACDT >= SYCREC.SY2CEDT1)
    OP0JW01.XLCCD = SYCREC.XLCCD1;
  else
    if (OPAREC.OPACDT >= SYCREC.SY2CEDT2)
      OP0JW01.XLCCD = SYCREC.XLCCD2;
    else
      if (OPAREC.OPACDT >= SYCREC.SY2CEDT3)
        OP0JW01.XLCCD = SYCREC.XLCCD3;
      else
        if (OPAREC.OPACDT >= SYCREC.SY2CEDT4)
          OP0JW01.XLCCD = SYCREC.XLCCD4;
        else
          OP0JW01.XLCCD = " ";
        end
      end
    end
  end




end // end OP0JSGL

// get dcust.vcmpny01 kucrec
Function OP0JSKC()


       /* initialize the abend record*/

  TA1REC.TA1TYPE = "DB2 "; /* abend type*/
  TA1REC.TA1FUNC = "RETN"; /* abend function (return)*/
  TA1REC.TA1PGMNM = "OP0J    "; /* program name*/
  TA1REC.TA1MAP = "OP0JM001"; /* map name*/
  TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
  TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
  OP0JW01.OP0JWTK2 = OP1REC.KUCCOID;
  TA1REC.TA1TBLKE = OP0JW01.OP0JWTK2; /* table key*/
  TA1REC.TA1LOCAT[3] = "OP0JSKC"; /* statement group*/
  TA1REC.TA1LOCAT[4] = "IO0240";



       /* read the customer company record*/

  KUCREC.KUCCOID = OP1REC.KUCCOID;

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

       /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      try
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end
      COMMAREA.CA-USER-WORKAREA-4K = " ";
      XSPF4();
      exit program;
    end
  end


  if (OP1REC.XOTCD in XOTTBL.XOTCD
   && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    OP0JW01.XOTPROPF = XOTTBL.XOTPROPF[sysVar.arrayIndex]; /* save for st1*/
    OP0JW01.XOTFUTRF = XOTTBL.XOTFUTRF[sysVar.arrayIndex];
  end
end // end OP0JSKC

// get customer rep & agency
Function OP0JSRR()


   /* This statement group determines the customer agency and*/
   /* rep assignment for this order.  If the correct rep cannot*/
   /* be found by reading the customer rep table using iomod*/
   /* ku1350, an error message is displayed and the user is*/
   /* requested to go back to the order header in review mode*/
   /* and enter it.*/


  OP0JW01.OP0JWARF = "N"; /* reset for rep found flag*/

  OP0JSRS(); /* look on cust rep table*/

  if (OP0JW01.OP0JWARF == "N") /* couldn't find rep anywhere*/
    converseLib.validationFailed(608); /* msg: rep couldn't be determined*/
  end

end // end OP0JSRR

// get sales rep from vcurep01
Function OP0JSRS()


   /* this statement group determines if the order contains an*/
   /* item record at this time and, if so, accesses the customer/*/
   /* rep table (vcurep01) via io mod ku1350 to get the correct*/
   /* rep and sales agency for this order.   03/21/90 / new ku1350 4/1/92*/



  set SQLCA empty;

      /* select the set of line items for the order number*/

  OP2REC.OP2KEY = OP1REC.OP1KEY;

  call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};


      /* *********************************************************/
      /* * if the return code from the select set was good then*/
      /* * get the first item record (needed to get product cat.)*/
      /* ********************************************************/


  if (SQLCA.VAGen_SQLCODE == +0)
    call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      SY2REC.XGPCD = OP2REC.XGPCD; /* PREPARE KEY DATA*/
      SY2REC.SY1STNBR = OP2REC.SY1STNBR; /* FOR VCOLOR01*/
      SY2REC.SY2CLRID = OP2REC.SY2CLRID; /* (TO GET PROD CAT)*/
      SY2REC.XDMCD = OP2REC.XDMCD;
      call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* close db2*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* close db2*/
        return; /* no item records*/
      else
        TA1REC.TA1LOCAT[1] = "SN"; /* bad return from fetch*/
      end
    end
  else
    TA1REC.TA1LOCAT[1] = "SS"; /* cursor open error*/
  end


  if (SQLCA.VAGen_SQLCODE > 0
   || SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "OP0J   ";
    TA1REC.TA1LOCAT[1] = "OP0JSRS ";
    TA1REC.TA1LOCAT[2] = "IO0440  ";
    TA1REC.TA1LOCAT[3] = " ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "     ";
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VITEM001";
    TA1REC.TA1TBLKE = OP2REC.OP2KEY;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end


  set SQLCA empty;

  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    set KU5REC empty;
    KU5REC.KU5-CALLING-PROGRAM-ID = "OP0J"; /* prepare key for*/
    KU5REC.KU5-CONV-DEPT-FLAG = "N"; /* call to ku1350*/
    KU5REC.KU5-READ-SA-FLAG = "N";
    KU5REC.KUCCOID = OP1REC.KUCCOID;
    KU5REC.KUMSTRID = OP1REC.KUMSTRID;
    KU5REC.XDVCD = OP1REC.XDVCD;
    KU5REC.XNXCD = OP1REC.XNXCD;
    KU5REC.XGPCD = OP1REC.XGPCD;
    KU5REC.XOBCD = OP1REC.XOBCD;
    KU5REC.XPCCD = SY2REC.XPCCD;
    KU5REC.XPLCD = SY2REC.XPLCD;
    KU5REC.SY1STNBR = SY2REC.SY1STNBR;
    KU5REC.SY2CLRID = SY2REC.SY2CLRID;
    KU5REC.XDMCD = SY2REC.XDMCD;

    /* **Note: For service request #778, orders for all customers now*/
              /* use order entered date for agcy/rep lookup. This is*/
              /* equivalent to using current date in this application.*/
              /* If a date other than order entered date is ever used,*/
              /* current date should always be used for military customer*/
              /* (lookup in OP0JSRU) draws from customer bulks (XBDCD =*/
              /* '5') and t-shirt blank draws (XBDCD = '8').*/

    KU5REC.OP1ORCDT = OP1REC.OP1ENTDT;

    /* added for Canada June 19, 1995---*/

    if (OP1REC.XDZ-DATA-DIST-CD == "CA")
      OP0JW01.OP0JW-WSY2000-FND-FLAG = " ";
      OP0JS-GET-WSY2000();
      if (OP0JW01.OP0JW-WSY2000-FND-FLAG == "Y")
        KU5REC.XPCCD = WSY2000.XPC-PROD-CAT-CD;
        KU5REC.XPLCD = WSY2000.XPL-PROD-LN-CD;
      else
        if (OP0JW01.OP0JW-WSY2000-FND-FLAG == "N")
          return;
          if (WSY2000.WSY2000-RETURN-CODE == "98")
            converseLib.validationFailed(010); /* data base busy*/
            OPAREC.OPAERR = "Y";
            return;
          else
            converseLib.validationFailed(909); /* fatal db error*/
            OPAREC.OPAERR = "Y";
            return;
          end
        end
      end
    else
      /* next sentence*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      return;
    else
      if (SQLCA.VAGen_SQLCODE > 0
       || SQLCA.VAGen_SQLCODE < 0)
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1PGMNM = "OP0J   ";
        TA1REC.TA1LOCAT[1] = "OP0JSRS ";
        TA1REC.TA1LOCAT[1] = "S ";
        TA1REC.TA1LOCAT[2] = "IO0130  ";
        TA1REC.TA1LOCAT[3] = " ";
        TA1REC.TA1LOCAT[4] = " ";
        TA1REC.TA1MAP = "     ";
        TA1REC.TA1DBASE = "DPROD";
        TA1REC.TA1TBLVU = "VCOLOR01";
        TA1REC.TA1TBLKE = SY2REC.SY2KEY;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        XSPF4();
      end
    end
  end

  call "KU1350" (KU5REC) {isNoRefresh = yes, isExternal = yes}; /* get best choice rep*/

  if (KU5REC.KU5-SEARCH-LEVEL-FLAG == " "
   || KU5REC.KU5-SEARCH-LEVEL-FLAG == "0")
    OP1REC.SM4REPID = 0;
    OP1REC.SM1AGYID = "    ";
    OP0JW01.OP0JWARF = "N"; /* no rep found*/
  else
    OP1REC.SM4REPID = KU5REC.SM4REPID;
    OP1REC.SM1AGYID = KU5REC.SM1AGYID;
    OP0JW01.OP0JWARF = "Y"; /* good rep found*/
  end


   /* ************************************************************/
end // end OP0JSRS

// get dspgm.vspgm001 header
Function OP0JSS1()
  SP1REC.SP1KEY = OP1REC.SP1ID;

  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OP0JW01.OP0JWTTF = "N"; /* init tiered terms flag*/
    OP0JSS2(); /* get sp6rec*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(503); /* spgm problem--contact spgm administrator*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
      TA1REC.TA1TBLVU = "VSPGM001"; /* table view*/
      TA1REC.TA1LOCAT[1] = "SF     "; /* statement group*/
      TA1REC.TA1LOCAT[2] = "IO0070 "; /* statement group*/
      TA1REC.TA1LOCAT[3] = "OP0JSS1"; /* statement group*/
      TA1REC.TA1LOCAT[4] = "      ";
      OP0JSZ1(); /* load errdiag key info*/
      TA1REC.TA1TBLKE = OP0JW01.OP0JWTK1;
      if (SQLCA.VAGen_SQLCODE == -911)
        TA1REC.TA1FUNC = "POST";
        try
          call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        end
        converseLib.validationFailed(010); /* database busy, please try again*/
        OPAREC.OPAERR = "Y";
      else
        TA1REC.TA1FUNC = "RETN";
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        try
          call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        end
        XSPF4();
        exit program;
      end
    end
  end


end // end OP0JSS1

// get dspgm.vtiers01 tier table
Function OP0JSS2()

   /* *******************************************************/
   /* this is for initial display.  find minimum discount to*/
   /* show on screen.  if terms are tiered, show message.*/
   /* for seasonal, or 'life', sales programs, the call to sp6rec*/
   /* uses '**' as the order type code parameter; if not seasonal*/
   /* it uses the actual order type code.*/
   /* *******************************************************/

  OP0JW01.OP0JWSFF = "N"; /* init spgm terms found flag*/

  SP6REC.SP1ID = OP1REC.SP1ID;
  if (SP1REC.SP1LIFEF == "Y")
    SP6REC.XOTCD = "**";
  else
    SP6REC.XOTCD = OP1REC.XOTCD;
  end

  set SQLCA empty;
  call "IO4220" ("S ", SQLCA, SP6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OP0JSS3(); /* find tier*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(503); /* spgm problem--contact spgm administrator*/
    else
      TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
      TA1REC.TA1TBLVU = "VTIERS01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "S      "; /* statement group*/
      TA1REC.TA1LOCAT[2] = "IO4220 "; /* statement group*/
      TA1REC.TA1LOCAT[3] = "OP0JSS2"; /* statement group*/
      TA1REC.TA1LOCAT[4] = "      ";
      OP0JSZ1();
                                   /* database problems/911 get out routine*/
    end
  end


end // end OP0JSS2

// get spgm tier level, min disc
Function OP0JSS3()

  converseLib.validationFailed(499); /* tiered terms may be reviewed in order maint*/
  OP0JW01.OP0JWTTF = "Y"; /* turn on tiered terms flag*/

   /* ****************************************************/
   /* move dollars/units to common working stg field*/
   /* ****************************************************/

  if (SP6REC.SP6UOMI == "D") /* indicates tiering by dollars*/
    OP0JW01.OP0JWUOD = OP0JM001.OP0JWOV; /* hold units/dollars*/
  else /* indicates tiering by units*/
    OP0JW01.OP0JWUOD = OP0JM001.OP0JWTU; /* hold units/dollars*/
  end

   /* ****************************************************/
   /* work rows 2-20; any unused rows*/
   /* have a tier dollar/unit value of zero.*/
   /* ****************************************************/

  OP0JW01.OP0JWSFF = "N"; /* terms found flag*/
  OPASUB = 20; /* work backwards in tier table*/

  while (OP0JW01.OP0JWSFF == "N" /* set sales pgm terms found flag to no*/
   && OPASUB != 1) /* work rows 2-20*/

    if (OP0JW01.OP0JWUOD >= SP6REC.SP6TIER[OPASUB]
     && SP6REC.SP6TIER[OPASUB] != 0)
      OP1REC.SP6MDISC = SP6REC.SP6MDISC[OPASUB]; /* save min disc*/
      OP1REC.OP1TLVLN = OPASUB; /* save tier level--for duped orders*/
      OP0JW01.OP0JWSFF = "Y";
    else
      OPASUB = OPASUB - 1;
    end
  end

   /* *********************************************************/
   /* rows 2-20 are worked first with the above logic because*/
   /* row 1's tier value is zero*/
   /* *********************************************************/

  if (OP0JW01.OP0JWSFF == "N") /* if tier not found in 2-20*/
    OPASUB = 1;
    OP1REC.SP6MDISC = SP6REC.SP6MDISC[OPASUB]; /* save min disc*/
    OP1REC.OP1TLVLN = 1; /* save tier level--for duped orders*/
  end


end // end OP0JSS3

// load oearec to calc terms
Function OP0JST1()
  set OEAREC empty; /* initialize the record*/

  OEAREC.OEAAPPL = "OP0J";
  OEAREC.XOTCD = OP1REC.XOTCD;
  OEAREC.XOBCD = OP1REC.XOBCD;
  OEAREC.XDVCD = OP1REC.XDVCD;
  OEAREC.SP1ID = OP1REC.SP1ID;
  OEAREC.KUCCOID = OP1REC.KUCCOID;
  OEAREC.KUMSTRID = OP1REC.KUMSTRID;
  OEAREC.XNXCD = OP1REC.XNXCD;
  OEAREC.XGPCD = OP1REC.XGPCD;
  OEAREC.OP1OVALU = OP0JM001.OP0JWOV;
  OEAREC.OP1OTUNT = OP0JM001.OP0JWTU;
  OEAREC.OP1CUNDT = OP1REC.OP1CUNDT;
  OEAREC.XAUCD = KUCREC.XAUCD;

   /* *********************************************/
   /* if kucrec indicates that the customer has*/
   /* terms, turn on flag in the pass record*/
   /* *********************************************/

  OEAREC.OEACUTRM = "N"; /* init flag*/

  if (OP0JW01.XOTPROPF == "Y"
   && KUCREC.KUCPRPTI == "Y")
    OEAREC.OEACUTRM = "Y";
  else
    if (OP0JW01.XOTFUTRF == "Y"
     && KUCREC.KUCFTRTI == "Y")
      OEAREC.OEACUTRM = "Y";
    end
  end

end // end OP0JST1

// move terms to op1rec
Function OP0JST2()
  OP1REC.SP6MDISC = OEAREC.SP6MDISC;
  OP1REC.OP1TLVLN = OEAREC.OP1TLVLN;
  OP1REC.OP1TIERF = "N"; /* spgm default override is 'no'*/
  OP1REC.XTDPCT = OEAREC.XTDPCT;
  OP1REC.OP1TDBKP = OEAREC.OP1TDBKP;
  OP1REC.OP1TDFCP = OEAREC.OP1TDFCP;
  OP1REC.XAAPCT = OEAREC.XAAPCT;
  OP1REC.OP1AABKP = OEAREC.OP1AABKP;
  OP1REC.OP1AAFCP = OEAREC.OP1AAFCP;
  OP1REC.XCPPCT = OEAREC.XCPPCT;
  OP1REC.XPTCD = OEAREC.XPTCD;
  OP1REC.XDAPCT = OEAREC.XDAPCT;
end // end OP0JST2

// process terms
Function OP0JST3()

   /* ********************************************************/
   /* if sales program, check if spgm minimum has been met.*/
   /* if a sales program order and terms are multi-tiered,*/
   /* now they are processed.*/

   /* nil final terms are also calculated here.*/
   /* final terms couldn't be processed til now because final*/
   /* $/units were needed for tiered spgms & nil orders.*/

   /* always recalc terms if a nike draw.*/

   /* always recalc terms if spgm is present regardless of*/
   /* whether or not it is a duped order, or a duped order*/
   /* header.  also, recalc terms for orders having empty*/
   /* terms. also, recalc terms for nike draw.*/

   /* ********************************************************/

  if (OP1REC.SP1ID > " ")
    OP0JS2E(); /* spgm sp2rec-- order min qty/$ met*/
  end

  if (OPAREC.OPAERR == "N") /* and no errors*/
    if (OP1REC.SP1ID > " " /* if a sales program order*/
     || OP1REC.XDVCD == "02") /* or an international order*/
      if (OPWREC.OPWFUNC == "2" /* DUP ORDER, PROCESS TERMS*/
       || OPWREC.OPWFUNC == "3" /* DUP ORDER HEADER, PROCESS TERMS*/
       || OP0JW01.OP0JWDCF == "DN") /* nike draw, process terms*/
        OP0JST1(); /* load oearec to get terms*/
        call "OP03" (OEAREC, SP6REC) {isNoRefresh = yes}; /* process final terms*/
        if (OEAREC.OEAERR == "N"
         && converseVar.validationMsgNum != 010) /* and no deadlocks*/
          OP0JST2(); /* move terms to op1rec*/
        end
      else
        if (OP1REC.XTDPCT > 0
         || OP1REC.XAAPCT > 0
         || OP1REC.XCPPCT > 0
         || OP1REC.XPTCD > " ")
           /* next sentence - terms already processed*/
        else
          OP0JST1(); /* load oearec to get terms*/
          call "OP03" (OEAREC, SP6REC) {isNoRefresh = yes}; /* process final terms*/
          if (OEAREC.OEAERR == "N"
           && converseVar.validationMsgNum != 010) /* and no deadlocks*/
            OP0JST2(); /* move terms to op1rec*/
          end
        end
      end
    end
  end


  if (OP0JW01.OP0JWDCF == "DN") /* if a nike draw*/
    if (OP1REC.SP1ID == " ") /* if not a sales program order*/
      if (OPAREC.OPAERR == "N") /* and no errors*/
        OP0JST1(); /* load oearec to get terms*/
        call "OP03" (OEAREC, SP6REC) {isNoRefresh = yes}; /* process final terms*/
        if (OEAREC.OEAERR == "N"
         && converseVar.validationMsgNum != 010) /* and no deadlocks*/
          OP0JST2(); /* move terms to op1rec*/
        end
      end
    end
  end
end // end OP0JST3

// terms messages
Function OP0JST4()
   /* *******************************************************/
   /* check for deadlock first--if deadlock, processes terms*/
   /* again;*/
   /* messages ARE SHOWN*/
   /* *******************************************************/

  if (OEAREC.OEAM010 == "Y") /* deadlock--don't reset to 'n'!*/
    OEAREC.OEAERR = "N"; /* turn off this flag for deadlocks*/
    OEAREC.OEAMMSG = "N"; /* turn off flag so can process terms again*/
    converseLib.validationFailed(010);
  else
    if (OEAREC.OEAM509 == "Y") /* corp table row missing xodtbl*/
      converseLib.validationFailed(509); /* don't turn off, fatal type error!!*/
      OPAREC.OPAERR = "Y";
    else
      if (OEAREC.OEAM511 == "Y") /* some terms may be missing, please*/
        converseLib.validationFailed(511); /* review in maintenace*/
      end
    end
  end
end // end OP0JST4

// process terms structure
Function OP0JSTP()
  if (OEAREC.OEAMMSG == "Y" /* terms have processed, msg was shown*/
   && OEAREC.OEAM010 == "N") /* and no deadlocks occurred*/
     /* next sentence -- drop out here so don't do terms again*/
  else
    OP0JST3(); /* process terms*/
    if (OEAREC.OEAMMSG == "Y") /* if messages*/
      OP0JST4(); /* start message loop*/
    end
  end


end // end OP0JSTP

// load errdiag,ta1rec; bad terms
Function OP0JSZ1()
  OP0JW01.OP0JWTK2 = OP1REC.KUCCOID;
  OP0JW01.OP0JWTK3 = OP1REC.KUMSTRID;
  OP0JW01.OP0JWTK4 = OP1REC.XNXCD;
  OP0JW01.OP0JWTK5 = OP1REC.XGPCD;
  OP0JW01.OP0JWTK6 = OP1REC.XOTCD;
  OP0JW01.OP0JWTK7 = OP1REC.SP1ID;
  OP0JW01.OP0JWTK8 = OP1REC.OP1CUNDT;
  OP0JW01.OP0JWTK9 = " ";
end // end OP0JSZ1

//*** RECORD=OP0JW01 ****
// This is used only by application op0j in order entry.
// 
// Maintenance:
//  3/30/90   BWATSO  Added WP1E, WP2E, WP3E, and WP4E fields
//                    as part of enhancement to make sure that
//                    certain products are ordered together.
//  9/26/90   jloyer  added wmsg, wms1, wms2 fields to format
//                    an err-msg to be sent to ta0020 (taerec)
//  6/04/91   dharri  added wp7e and wp8e.
//  1/21/92   dcaust  added wp9e and w10e for products 248496,
//                    248523; w11e and w12e for products 248516
//                    , 248526 (pairs must be booked together).
// 10/08/92   dharri  added wp18e and wep19e for products
//                    248658 and 248659.
// 03/01/93   dharri  added wp20e, wep21e, wep22e for products
//                    248704, 248705, 248706.
// 05/17/93   dlegg   #937-phase II. Add custom-fl, use-item-
//                    flag, ek2-key, bulk-fl.
// 06/19/95   mmcgol  op0jw-wsy2000-fnd-flag found, sy2000 used
//                    for Canadian products
// 07/19/97   wleong  added op0jw-pkg-no to op0jw01
// 10/08/97   wleong  added op0jw-msitm-cnt to op0jw01
// 06/01/01   bbahul  added OP0JW25E and OP0JW26E to op0jw01
// 08/09/01   bbahul  added OP0JW27E and OP0JW28E to op0jw01
// 10/02/01   bbahul  added OP0JW29E to op0jw01
// ***********************
Record OP0JW01 type basicRecord
  5 OP0JWGP OP0JWGP ; 
    10 OP1EXPDF OP1EXPDF ; 
    10 OP0JWFND OP0JWFND ; 
    10 OP0JWARF OP0JWARF ; 
    10 OP0JWDON OP0JWDON ; 
      15 OP0JWPAR OP0JWPAR ; 
      15 OP0JWCOI OP0JWCOI ; 
      15 OP0JWNOI OP0JWNOI ; 
      15 OP0JWLLN OP0JWLLN ; 
      15 OP0JWWHP OP0JWWHP ; 
      15 OP0JWWCD OP0JWWCD ; 
      15 OP0JWOWG OP0JWOWG ; 
      15 OP0JWGPC OP0JWGPC ; 
      15 OP0JWSTY OP0JWSTY ; 
      15 OP0JWCOL OP0JWCOL ; 
      15 OP0JWDIM OP0JWDIM ; 
      15 OP0JWQAC OP0JWQAC ; 
      15 OP0JWPGC OP0JWPGC ; 
      15 OP0JWUMC OP0JWUMC ; 
    10 OP0JWAU OP0JWAU ; 
    10 OP0JWLC OP0JWLC ; 
    10 OP0JWLO OP0JWLO ; 
    10 OP0JWOPT OP0JWOPT ; 
    10 OP0JWORD OP0JWORD ; 
    10 OP0JWOV OP0JWOV ; 
    10 OP0JWPO OP0JWPO ; 
    10 OP0JWSPC OP0JWSPC ; 
    10 OP0JWTU OP0JWTU ; 
    10 OP0JWBLK OP0JWBLK ; 
      15 OP0JWBID OP0JWBID ; 
      15 OP0JWBPN OP0JWBPN ; 
    10 OP0JWSW OP0JWSW ; 
    10 OP1CUPO OP1CUPO ; 
    10 OP0JW001 OP0JW001 ; 
      15 OP0JW002 OP0JW002 ; 
      15 OP0JW003 OP0JW003 ; 
    10 OP0JW004 OP0JW004 ; 
      15 OP0JW005 OP0JW005 ; 
      15 OP0JW006 OP0JW006 ; 
      15 OP0JW007 OP0JW007 ; 
    10 OP5GROUP OP5GROUP [2] ; 
    10 OP0JWGP2 OP0JWGP2 ; 
      15 OP4GROUP OP4GROUP [16] ; 
    10 OP0JWXZW OP0JWXZW ; 
    10 OP0JWXZS OP0JWXZS ; 
    10 XWHCD XWHCD ; 
      15 XSOCD XSOCD ; 
    10 XGPCD XGPCD ; 
    10 OP1NORID OP1NORID ; 
    10 OP1OVALU OP1OVALU ; 
    10 OP1OTUNT OP1OTUNT ; 
    10 OP2LNINB OP2LNINB ; 
    10 OP0JWEOF OP0JWEOF ; 
    10 OP0JWCNT OP0JWCNT ; 
    10 OP0JWBDF OP0JWBDF ; 
    10 OP0JWDCF OP0JWDCF ; 
    10 OP0JWGCK OP0JWGCK ; 
    10 OP0JWABD OP0JWABD ; 
    10 OP0JWTM1 OP0JWTM1 ; 
      15 OP0JWHH1 OP0JWHH1 ; 
      15 * char(1) ; 
      15 OP0JWMM1 OP0JWMM1 ; 
      15 * char(1) ; 
      15 OP0JWSS1 OP0JWSS1 ; 
    10 OP0JWTM2 OP0JWTM2 ; 
      15 OP0JWHH2 OP0JWHH2 ; 
      15 * char(1) ; 
      15 OP0JWMM2 OP0JWMM2 ; 
      15 * char(1) ; 
      15 OP0JWSS2 OP0JWSS2 ; 
    10 OP0JWTM3 OP0JWTM3 ; 
      15 OP0JWHH3 OP0JWHH3 ; 
      15 OP0JWMM3 OP0JWMM3 ; 
      15 OP0JWSS3 OP0JWSS3 ; 
    10 OP0JWSUB OP0JWSUB ; 
    10 XLCCD XLCCD ; 
    10 OP0JWERR OP0JWERR ; 
      15 OP0JWPRT OP0JWPRT ; 
      15 OP0JWCID OP0JWCID ; 
      15 OP0JWNID OP0JWNID ; 
      15 OP0JWLIN OP0JWLIN ; 
      15 OP0JWSHP OP0JWSHP ; 
    10 XOTPROPF XOTPROPF ; 
    10 XOTFUTRF XOTFUTRF ; 
    10 OP0JW435 OP0JW435 ; 
    10 OP0JWSTP OP0JWSTP ; 
    10 OP0JWSFF OP0JWSFF ; 
    10 OP0JWTTF OP0JWTTF ; 
    10 OP0JWUOD OP0JWUOD ; 
    10 OP0JWTCT OP0JWTCT ; 
    10 OP0JWSGC OP0JWSGC ; 
    10 OP0JWCDT OP0JWCDT ; 
    10 OP0JWTK1 OP0JWTK1 ; 
      15 OP0JWTK2 OP0JWTK2 ; 
      15 OP0JWTK3 OP0JWTK3 ; 
      15 OP0JWTK4 OP0JWTK4 ; 
      15 OP0JWTK5 OP0JWTK5 ; 
      15 OP0JWTK6 OP0JWTK6 ; 
      15 OP0JWTK7 OP0JWTK7 ; 
      15 OP0JWTK8 OP0JWTK8 ; 
      15 OP0JWTK9 OP0JWTK9 ; 
    10 OP0JWP1E OP0JWP1E ; 
    10 OP0JWP2E OP0JWP2E ; 
    10 OP0JWP3E OP0JWP3E ; 
    10 OP0JWP4E OP0JWP4E ; 
    10 OP0JWP5E OP0JWP5E ; 
    10 OP0JWP6E OP0JWP6E ; 
    10 OP0JWP7E OP0JWP7E ; 
    10 OP0JWP8E OP0JWP8E ; 
    10 OP0JWP9E OP0JWP9E ; 
    10 OP0JW10E OP0JW10E ; 
    10 OP0JW11E OP0JW11E ; 
    10 OP0JW12E OP0JW12E ; 
    10 OP0JW13E OP0JW13E ; 
    10 OP0JW14E OP0JW14E ; 
    10 OP0JW15E OP0JW15E ; 
    10 OP0JW16E OP0JW16E ; 
    10 OP0JW17E OP0JW17E ; 
    10 OP0JW18E OP0JW18E ; 
    10 OP0JW19E OP0JW19E ; 
    10 OP0JW20E OP0JW20E ; 
    10 OP0JW21E OP0JW21E ; 
    10 OP0JW22E OP0JW22E ; 
    10 OP0JW23E OP0JW23E ; 
    10 OP0JW24E OP0JW24E ; 
    10 OP0JW25E OP0JW25E ; 
    10 OP0JW26E OP0JW26E ; 
    10 OP0JW27E OP0JW27E ; 
    10 OP0JW28E OP0JW28E ; 
    10 OP0JW29E OP0JW29E ; 
    10 OP0JWMSG OP0JWMSG ; 
      15 OP0JWMS1 OP0JWMS1 ; 
      15 OP0JWMS2 OP0JWMS2 ; 
    10 OP0JW-SUB1 OP0JW-SUB1 ; 
    10 OP0JW-EK1-KEY OP0JW-EK1-KEY ; 
      15 OP0JW-EK1-COMPANY OP0JW-EK1-COMPANY ; 
      15 OP0JW-EK1-FILL-1 OP0JW-EK1-FILL-1 ; 
      15 OP0JW-EK1-STORE OP0JW-EK1-STORE ; 
      15 OP0JW-EK1-FILL-2 OP0JW-EK1-FILL-2 ; 
      15 OP0JW-EK1-DEPT OP0JW-EK1-DEPT ; 
      15 OP0JW-EK1-FILL-3 OP0JW-EK1-FILL-3 ; 
      15 OP0JW-EK1-GPC OP0JW-EK1-GPC ; 
    10 OP0JW-EK2-KEY OP0JW-EK2-KEY ; 
      15 OP0JW-EK2-XGPCD OP0JW-EK2-XGPCD ; 
      15 OP0JW-EK2-FILL-1 OP0JW-EK2-FILL-1 ; 
      15 OP0JW-EK2-SY1STNBR OP0JW-EK2-SY1STNBR ; 
      15 OP0JW-EK2-FILL-2 OP0JW-EK2-FILL-2 ; 
      15 OP0JW-EK2-SY2CLRID OP0JW-EK2-SY2CLRID ; 
      15 OP0JW-EK2-FILL-3 OP0JW-EK2-FILL-3 ; 
      15 OP0JW-EK2-XDMCD OP0JW-EK2-XDMCD ; 
    10 OP0JW-REDEF-ORD-ID OP0JW-REDEF-ORD-ID ; 
      15 OP0JW-REDEF-FILLER OP0JW-REDEF-FILLER ; 
      15 OP0JW-REDEF-PRT-CHAR OP0JW-REDEF-PRT-CHAR ; 
    10 OP0JW-JC-PENNEYS-FL OP0JW-JC-PENNEYS-FL ; 
    10 OP0JW-BELKS-FL OP0JW-BELKS-FL ; 
    10 OP0JW-CUSTOM-FL OP0JW-CUSTOM-FL ; 
    10 OP0JW-USE-ITM-FL OP0JW-USE-ITM-FL ; 
    10 OP0JW-BULK-FL OP0JW-BULK-FL ; 
    10 OP0JW-OP2-ITM-KEY OP0JW-OP2-ITM-KEY ; 
      15 OP0JW-OP2-OP1NORID OP0JW-OP2-OP1NORID ; 
      15 OP0JW-OP2-OP2LNINB OP0JW-OP2-OP2LNINB ; 
    10 OP0JW-AB-ITM-KEY OP0JW-AB-ITM-KEY ; 
      15 OP0JW-AB-OP1NORID OP0JW-AB-OP1NORID ; 
      15 OP0JW-AB-OP2LNINB OP0JW-AB-OP2LNINB ; 
    10 OP0JW-WSY2000-FND-FLAG OP0JW-WSY2000-FND-FLAG ; 
    10 OP0JW-WSY2000-POST-1 OP0JW-WSY2000-POST-1 ; 
      15 OP0JW-WSY2000-GPC-CD OP0JW-WSY2000-GPC-CD ; 
      15 OP0JW-WSY2000-STY-NBR OP0JW-WSY2000-STY-NBR ; 
      15 OP0JW-WSY2000-COLR-CD OP0JW-WSY2000-COLR-CD ; 
      15 OP0JW-WSY2000-DIM-CD OP0JW-WSY2000-DIM-CD ; 
      15 OP0JW-WSY2000-PROD-REG-CD OP0JW-WSY2000-PROD-REG-CD ; 
      15 OP0JW-WSY2000-RETURN-CD OP0JW-WSY2000-RETURN-CD ; 
    10 OP0JW-PKG-NO OP0JW-PKG-NO ; 
    10 OP0JW-MSITM-CNT OP0JW-MSITM-CNT ; 
end // end OP0JW01

Record OP0JW02 type basicRecord
  5 OP0JWGR2 OP0JWGR2 ; 
    10 OP0JWKEY OP0JWKEY ; 
      15 OP1PARTN OP1PARTN ; 
      15 OP1CUOID OP1CUOID ; 
      15 OP1NORID OP1NORID ; 
      15 OP2LNINB OP2LNINB ; 
    10 * char(12) [40] ; 
      15 OP0JWORG OP0JWORG ; 
      15 OP0JWONO OP0JWONO ; 
      15 OP0JWOHR OP0JWOHR ; 
end // end OP0JW02

Record OP0JW03 type basicRecord
  10 OP0JWEKY OP0JWEKY ; 
    15 OP0JWPRT OP0JWPRT ; 
    15 OP0JWCID OP0JWCID ; 
    15 OP0JWNID OP0JWNID ; 
    15 OP0JWITE OP0JWITE ; 
end // end OP0JW03

//*** RECORD=OP0JW04 ****
//   Work record for op0j
//   Maintenance history:
//   4/25/90  BWATSO  Increased group level size because
//                    OPWSGRP changed.
//  06/14/91  jloyer  db2 chgs: chgd length due to length chg
//                    in opwrec.
//  10/08/91  dmeier  db2 chgs: chgd length due to length chg
//                    in opwrec.
//  04/01/94  gcalki  Log #1003 - chgd length due to length chg
//                    in opwrec.
// ***********************
Record OP0JW04 type basicRecord
  5 OP0JWGR4 OP0JWGR4 ; 
    10 OPWSGRP OPWSGRP ; 
    10 OP0JWOPT OP0JWOPT ; 
    10 OP1CUPO OP1CUPO ; 
    10 OP0JWLC OP0JWLC ; 
    10 OP0JWAU OP0JWAU ; 
end // end OP0JW04

//*** RECORD=OP0JW05 ****
// *******************  ORDER HEADER TABLE  *******************
// 
// DB2 TABLE:           DORDER.VORHDR01
// 
// COPYLIB MEMBER:      DCL00045
// 
// I/O MOD:             IO0430
// 
// KEY TO DB2 TABLE:    OP1PARTN
//                      OP1CUOID
//                      OP1NORID
// 
// DATE CREATED:        05/01/86
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 05-01-86   JSN       INITIAL RECORD CREATION
// 10-08-86  tmai       db2 table changed
// 03-10-87  jdv        added new credit fields and carrier cd.
// 05-01-87  jdv        added xcscdcha for native db2. field
//                      was defined in db2 as cha and csp as
//                      num. with native sql, had problems.
// 03-06-89  lcr        added base order type code
// 05-15-89  lcr        renamed, deleted and added new fields:
//                          renamed kuablid to op1blaid
//                                  kumshaid to op1shaid
//                          deleted op1frtof, xftcd, op1pshcd
//                            xkocd, op1pkhcd, op1kordt, xbrcd
//                          added op1cfmdt, op1ipind, op1ftind
//                            op1ifamt, op1shamt
// 11-10-89  tfox      db2 changes - added op1cmpnb, op1cpodt,
//                       op1tierf, & op1tlvln
//                       deleted op1shrdt, op1shdt, & xshcd
// 03-29-90  ssteph    db2 changes - added xbccd. Renamed
//                       op1blkcd to xbdcd and sp3dpct to
//                       sp6mdisc.
// 10-04-90  jwood     db2 changes - rename xcgcd to op1cogid
// 01/10/91  CHYDE     Correct data item desc/db2 names.
// 02/11/91  dmeier    db2 changes - add kucmxynt, kucuntcs,
//                       kufmixbx, ob1xrefn, xpacd
// 06/07/91  craine    db2 changes - added op1pormf, renamed
//                     op1mnalp to kunmapct also chg'd size,
//                     deleted op1sagcy, op1srep, op1sslsp,
//                     kucmxynt.
// 10/08/91  dmeier    db2 changes - added op-sls-fcst-dt,
//                     op-snd-cnfm-fl. deleted op1owrdt
// ***********************
Record OP0JW05 type basicRecord
  5 OP1GROUP OP1GROUP ; 
    10 OP1KEY OP1KEY ; 
      15 OP1PARTN OP1PARTN ; 
      15 OP1CUOID OP1CUOID ; 
      15 OP1NORID OP1NORID ; 
    10 OB1XREFN OB1XREFN ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 XGPCD XGPCD ; 
    10 OP1CMPNB OP1CMPNB ; 
    10 OP1CUPO OP1CUPO ; 
    10 OP1PORMF OP1PORMF ; 
    10 OP1ORDBY OP1ORDBY ; 
    10 OP1TBREP OP1TBREP ; 
    10 XDVCD XDVCD ; 
    10 XBCCD XBCCD ; 
    10 XSOCD XSOCD ; 
    10 XOTCD XOTCD ; 
    10 XOBCD XOBCD ; 
    10 XOCCD XOCCD ; 
    10 SP1ID SP1ID ; 
    10 SP6MDISC SP6MDISC ; 
    10 XWHCD XWHCD ; 
    10 OP1OWHMF OP1OWHMF ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 OP-ORIG-NEED-DT OP-ORIG-NEED-DT ; 
    10 XOSCD XOSCD ; 
    10 OP1OSADT OP1OSADT ; 
    10 OP1TDOF OP1TDOF ; 
    10 XTDPCT XTDPCT ; 
    10 OP1TDFCP OP1TDFCP ; 
    10 OP1TDBKP OP1TDBKP ; 
    10 OP1PTOF OP1PTOF ; 
    10 XPTCD XPTCD ; 
    10 OP1AAOF OP1AAOF ; 
    10 XAAPCT XAAPCT ; 
    10 OP1AAFCP OP1AAFCP ; 
    10 OP1AABKP OP1AABKP ; 
    10 OP1COPOF OP1COPOF ; 
    10 XCPPCT XCPPCT ; 
    10 OP1DFAOF OP1DFAOF ; 
    10 XDAPCT XDAPCT ; 
    10 XDSCD XDSCD ; 
    10 OP-DIRSHP-DSCT-PCT OP-DIRSHP-DSCT-PCT ; 
    10 SM1AGYID SM1AGYID ; 
    10 SM4REPID SM4REPID ; 
    10 OP-SREP-OVRD-FL OP-SREP-OVRD-FL ; 
    10 OP1SWORD OP1SWORD ; 
    10 XBDCD XBDCD ; 
    10 OP1BLKID OP1BLKID ; 
    10 OP1NDRAW OP1NDRAW ; 
    10 OP1COGID OP1COGID ; 
    10 OP1BLAID OP1BLAID ; 
    10 OP1SGPAO OP1SGPAO ; 
    10 OP1SHAID OP1SHAID ; 
    10 OP1ODSKF OP1ODSKF ; 
    10 OP1ENTDT OP1ENTDT ; 
    10 OP1ORCDT OP1ORCDT ; 
    10 OP1ENREP OP1ENREP ; 
    10 OP1CALDT OP1CALDT ; 
    10 OP-SND-CNFM-FL OP-SND-CNFM-FL ; 
    10 OP1DSBDT OP1DSBDT ; 
    10 OP1DSADT OP1DSADT ; 
    10 DN-PROD-INTR-DT DN-PROD-INTR-DT ; 
    10 OP1NTMAL OP1NTMAL ; 
    10 OP1ALSEQ OP1ALSEQ ; 
    10 OP1OALSQ OP1OALSQ ; 
    10 OP1LALDT OP1LALDT ; 
    10 OP1DABDT OP1DABDT ; 
    10 OP1DRBDT OP1DRBDT ; 
    10 XACCD XACCD ; 
    10 OP1ASGCO OP1ASGCO ; 
    10 XAHCD XAHCD ; 
    10 OP1ALHDT OP1ALHDT ; 
    10 OP1PAHCD OP1PAHCD ; 
    10 OP1ALRDT OP1ALRDT ; 
    10 XAFCD XAFCD ; 
    10 OP1ALFDT OP1ALFDT ; 
    10 KUNMAPCT KUNMAPCT ; 
    10 OP1RSVF OP1RSVF ; 
    10 OP1WIPIN OP1WIPIN ; 
    10 OP1EXPDF OP1EXPDF ; 
    10 KUNNOSFL KUNNOSFL ; 
    10 OP1ASHDF OP1ASHDF ; 
    10 OP1ACNLF OP1ACNLF ; 
    10 OP1SMSCF OP1SMSCF ; 
    10 OP1TIERF OP1TIERF ; 
    10 OP1TLVLN OP1TLVLN ; 
    10 OP1CPODT OP1CPODT ; 
    10 OP1BOFL OP1BOFL ; 
    10 XCHCD XCHCD [3] ; 
    10 XCSCD XCSCD ; 
    10 OP1CSADT OP1CSADT ; 
    10 OP1CSATM OP1CSATM ; 
    10 OP1CRLMP OP1CRLMP ; 
    10 OP1CRLMR OP1CRLMR ; 
    10 OP1PCSCD OP1PCSCD ; 
    10 OP1PCSDT OP1PCSDT ; 
    10 OP1PCSTM OP1PCSTM ; 
    10 OP1CCKOQ OP1CCKOQ ; 
    10 OP1CKAMT OP1CKAMT ; 
    10 OP1DCHLD OP1DCHLD ; 
    10 KUCVNDFL KUCVNDFL ; 
    10 OP1VAUDT OP1VAUDT ; 
    10 OP1VAUNB OP1VAUNB ; 
    10 OP-CALL-CR-CK-FL OP-CALL-CR-CK-FL ; 
    10 OP-LST-CR-CK-CO-ID OP-LST-CR-CK-CO-ID ; 
    10 XPACD XPACD ; 
    10 KUFMIXBL KUFMIXBL ; 
    10 KUCUNTCS KUCUNTCS ; 
    10 XPKCD XPKCD ; 
    10 XPPCD XPPCD ; 
    10 TF1CARCD TF1CARCD ; 
    10 OP1SSHPO OP1SSHPO ; 
    10 OP1ECADT OP1ECADT ; 
    10 OP1ECANM OP1ECANM ; 
    10 OP1IVADT OP1IVADT ; 
    10 OP1PCNDT OP1PCNDT ; 
    10 OP1CFMDT OP1CFMDT ; 
    10 OP1IPIND OP1IPIND ; 
    10 OP1FTIND OP1FTIND ; 
    10 OP1SHAMT OP1SHAMT ; 
    10 OP1IFAMT OP1IFAMT ; 
    10 XMDCD XMDCD ; 
    10 ZFC-CRCY-CD ZFC-CRCY-CD ; 
    10 OP1OVALU OP1OVALU ; 
    10 OP1OTUNT OP1OTUNT ; 
    10 OP1ALCQF OP1ALCQF ; 
    10 OP1RSVQF OP1RSVQF ; 
    10 OP1SHPQF OP1SHPQF ; 
    10 OP1OSRID OP1OSRID ; 
    10 OP1ORADT OP1ORADT ; 
    10 XOMCD XOMCD ; 
    10 OP1OMDT OP1OMDT ; 
    10 OP1MTREP OP1MTREP ; 
    10 OP1SPLBF OP1SPLBF ; 
    10 OP1SPINF OP1SPINF ; 
    10 OP1SPHDF OP1SPHDF ; 
    10 OP1OMCMF OP1OMCMF ; 
    10 OP11TMSF OP11TMSF ; 
    10 OP11TMBF OP11TMBF ; 
    10 XID-IVC-DIST-CD XID-IVC-DIST-CD ; 
    10 DN-ORD-DIST-IND DN-ORD-DIST-IND ; 
    10 XDZ-DATA-DIST-CD XDZ-DATA-DIST-CD ; 
    10 ZZ-CS400-CHNG-DT ZZ-CS400-CHNG-DT ; 
    10 ZZ-CS400-CHNG-HHMM ZZ-CS400-CHNG-HHMM ; 
    10 ZZ-DS400-CHNG-DT ZZ-DS400-CHNG-DT ; 
    10 ZZ-DS400-CHNG-HHMM ZZ-DS400-CHNG-HHMM ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end OP0JW05

//*** RECORD=VCPBUS01 ****
// ****************** ORDER PROCESSING COMP ORDER TBL *********
// 
// DB2 TABLE VIEW:      DORDER.VCPBUS01
// 
// COPYLIB MEMBER:      DCPBUS01
// 
// I/O MODULE:          VCPBUS01
// 
// KEY TO DB2 TABLE:    OP1PARTN
//                      OP1CUOID
// 
// 
// DATE CREATED:        12/12/97
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  ------     ---------------------------------------
// 12/12/97  JFLOR1     New record definition.
// ************************
Record VCPBUS01 type basicRecord
  5 VCPBUS01-GROUP VCPBUS01-GROUP ; 
    10 VCPBUS01-KEY VCPBUS01-KEY ; 
      15 OP1PARTN OP1PARTN ; 
      15 OP1CUOID OP1CUOID ; 
    10 OP-AUTH-BY OP-AUTH-BY ; 
    10 OP-BUS-PRP OP-BUS-PRP ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VCPBUS01

//*** RECORD=WOZ2100 ****
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// *                    PANVALET INCLUDE WOZ2100
// *
// * - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// *   THIS INCLUDE MEMBER IS USED TO PASS INFORMATION WITHIN
// *   THE ORDER CONFIRMATION AND DISCREPANCY SYSTEM.
// *
// *   RECORD LENGTH IS 2500.
// *
// *   POSSIBLE RETURN CODES:
// *      00 - GOOD RETURN
// *      01 - INVALID PARMS PASSED
// *      02 - ORDER ITEM NOT FOUND
// *      03 - DB2 DEADLOCK/BUSY
// *      04 - ALL OTHER SQL CODES
// *
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// *     M A I N T E N A N C E   L O G
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// * DATE        NAME          DESCRIPTION OF CHANGE
// * - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
// * 07/10/97    DHUFFM        CREATE
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// 
// ***********************
Record WOZ2100 type basicRecord
  5 OZ2100-PASS-RECORD OZ2100-PASS-RECORD ; 
    10 OZ2100-PASSED-INFO OZ2100-PASSED-INFO ; 
      15 OZ2100-OP-ORD-PART-CHAR OZ2100-OP-ORD-PART-CHAR ; 
      15 OZ2100-OP-CUST-ORD-ID OZ2100-OP-CUST-ORD-ID ; 
      15 OZ2100-OP-NIKE-ORD-ID OZ2100-OP-NIKE-ORD-ID ; 
      15 OZ2100-OP-LINE-ITEM-NBR OZ2100-OP-LINE-ITEM-NBR ; 
      15 OZ2100-SOCD-APPL-SRC-CD OZ2100-SOCD-APPL-SRC-CD ; 
    10 OZ2100-RETURNED-INFO OZ2100-RETURNED-INFO ; 
      15 OZ2100-RETURN-CD OZ2100-RETURN-CD ; 
    10 * char(2487) ; 
end // end WOZ2100

// op-prepk-totitmqty
DataItem OP-AUTH-BY char(64)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-spf-prepk-qty(1-40)
DataItem OP-BUS-PRP char(64)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Item compare key for OPABREC
DataItem OP0JW-AB-ITM-KEY num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// OPABREC compare nike ord id
DataItem OP0JW-AB-OP1NORID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// OPABREC compare line item nbr
DataItem OP0JW-AB-OP2LNINB num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Belk's found flag
DataItem OP0JW-BELKS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Bulk order flag
DataItem OP0JW-BULK-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Custom logo order flag
DataItem OP0JW-CUSTOM-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diag key - cu_co_id
DataItem OP0JW-EK1-COMPANY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// diag key - xnx-dept-id-xref
DataItem OP0JW-EK1-DEPT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// diag key - filler
DataItem OP0JW-EK1-FILL-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diag key - filler
DataItem OP0JW-EK1-FILL-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diag key - filler
DataItem OP0JW-EK1-FILL-3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diag key - xgp_gpc_cd
DataItem OP0JW-EK1-GPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diag key 1
DataItem OP0JW-EK1-KEY char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diag key - cu_stor_id
DataItem OP0JW-EK1-STORE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// diag key - filler
DataItem OP0JW-EK2-FILL-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diag key - filler
DataItem OP0JW-EK2-FILL-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diag key - filler
DataItem OP0JW-EK2-FILL-3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diag key 2 - product key
DataItem OP0JW-EK2-KEY char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diag key - sy_sty_nbr
DataItem OP0JW-EK2-SY1STNBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diag key - sy_colr_cd_id
DataItem OP0JW-EK2-SY2CLRID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diag key - xdm_dim_cd
DataItem OP0JW-EK2-XDMCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// diag key - xgp_gpc_cd
DataItem OP0JW-EK2-XGPCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JC Penneys found flag
DataItem OP0JW-JC-PENNEYS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// msr item count
DataItem OP0JW-MSITM-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Item compare key for OP2REC
DataItem OP0JW-OP2-ITM-KEY num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// OP2REC compare nike ord id
DataItem OP0JW-OP2-OP1NORID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// OP2REC compare line item nbr
DataItem OP0JW-OP2-OP2LNINB num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prepack package #
DataItem OP0JW-PKG-NO smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// redefine filler
DataItem OP0JW-REDEF-FILLER num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// redefine op-cust-ord-id
DataItem OP0JW-REDEF-ORD-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// redefine op-ord-part-char
DataItem OP0JW-REDEF-PRT-CHAR num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xsgcd subscript
DataItem OP0JW-SUB1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Item OK to use flag
DataItem OP0JW-USE-ITM-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0JW-WSY2000-COLR-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0JW-WSY2000-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sy2000 completion flag
DataItem OP0JW-WSY2000-FND-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0JW-WSY2000-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sy2000 posting area
DataItem OP0JW-WSY2000-POST-1 char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0JW-WSY2000-PROD-REG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0JW-WSY2000-RETURN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0JW-WSY2000-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po number msg group level
DataItem OP0JW001 char(64)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po number msg part 1
DataItem OP0JW002 char(39)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-cust-po
DataItem OP0JW003 char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line item msg group level
DataItem OP0JW004 char(46)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line item msg part 1
DataItem OP0JW005 char(31)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// num products on order
DataItem OP0JW006 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-cust-po
DataItem OP0JW007 char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prod 248523 exists flag
DataItem OP0JW10E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prod 248516 exists flag
DataItem OP0JW11E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prod 248526 exists flag
DataItem OP0JW12E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prod 248611 exists flag
DataItem OP0JW13E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prod 248612 exists flag
DataItem OP0JW14E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prod 246205 exists flag
DataItem OP0JW15E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prod 246215 exists flag
DataItem OP0JW16E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prod 248615 exists flag
DataItem OP0JW17E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prod 248658 exists flag
DataItem OP0JW18E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prod 248659 exists flag
DataItem OP0JW19E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prod 246233 exists flag
DataItem OP0JW20E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prod 246234 exists flag
DataItem OP0JW21E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prod 248706 exists flag
DataItem OP0JW22E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prod 248723 exists flag
DataItem OP0JW23E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prod 248763 exists flag
DataItem OP0JW24E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prod 246539 exists flag
DataItem OP0JW25E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prod 303595 exists flag
DataItem OP0JW26E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prod 303603 exists flag
DataItem OP0JW27E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prod 303604 exists flag
DataItem OP0JW28E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prod 303611 exists flag
DataItem OP0JW29E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning msg #435 flag
DataItem OP0JW435 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// abend flag
DataItem OP0JWABD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// validated rep found flag
DataItem OP0JWARF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0JWAU char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bulk/draw order flag
DataItem OP0JWBDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// partial bulk-id (rebook only)
DataItem OP0JWBID num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bulk-id (for rebook only)
DataItem OP0JWBLK num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bulk part-char (rebook only)
DataItem OP0JWBPN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current date comp
DataItem OP0JWCDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cust ord id
DataItem OP0JWCID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bulk order update count
DataItem OP0JWCNT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// customer ord id
DataItem OP0JWCOI num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// color
DataItem OP0JWCOL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust comp drw order flg
DataItem OP0JWDCF char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dimensioncode
DataItem OP0JWDIM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display order number
DataItem OP0JWDON char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display key
DataItem OP0JWEKY char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end-of-table flag
DataItem OP0JWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error record
DataItem OP0JWERR char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// misc found flag
DataItem OP0JWFND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// good credit check flag
DataItem OP0JWGCK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level
DataItem OP0JWGP char(2787)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0JWGP2 char(1552)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gpc code
DataItem OP0JWGPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem OP0JWGR2 char(489)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op0jw04 group
DataItem OP0JWGR4 char(3113)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// system hour1
DataItem OP0JWHH1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// system hour 2
DataItem OP0JWHH2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// system hour 3
DataItem OP0JWHH3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-line-item-nbr
DataItem OP0JWITE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display key
DataItem OP0JWKEY char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0JWLC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// line
DataItem OP0JWLIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line item nbr
DataItem OP0JWLLN num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OP0JWLO char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// system minute1
DataItem OP0JWMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// system minute2
DataItem OP0JWMM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// system minute3
DataItem OP0JWMM3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 'sqlcode is: '
DataItem OP0JWMS1 char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sqlcode
DataItem OP0JWMS2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bad sqlcode msg
DataItem OP0JWMSG char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nike ord id
DataItem OP0JWNID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nike ord id
DataItem OP0JWNOI num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// drawn on hand reserved qty
DataItem OP0JWOHR decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// drawn on order qty
DataItem OP0JWONO decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OP0JWOPT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OP0JWORD char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// drawn original qty
DataItem OP0JWORG decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OP0JWOV char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// owner group
DataItem OP0JWOWG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prod 248000 exists flag
DataItem OP0JWP1E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prod 248200 exists flag
DataItem OP0JWP2E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prod 248064 exists flag
DataItem OP0JWP3E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prod 248164 exists flag
DataItem OP0JWP4E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prod 248190 exists flag
DataItem OP0JWP5E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prod 248191 exists flag
DataItem OP0JWP6E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prod 246203 exists flag
DataItem OP0JWP7E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prod 246204 exists flag
DataItem OP0JWP8E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Prod 248496 exists flag
DataItem OP0JWP9E char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// part char
DataItem OP0JWPAR num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// package code
DataItem OP0JWPGC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0JWPO char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// part char
DataItem OP0JWPRT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// qacode
DataItem OP0JWQAC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// spgm terms found flag
DataItem OP0JWSFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// spec cust group found flag
DataItem OP0JWSGC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ship
DataItem OP0JWSHP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0JWSPC char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// system second1
DataItem OP0JWSS1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// system second2
DataItem OP0JWSS2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// system seconds3
DataItem OP0JWSS3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// stop table search flag
DataItem OP0JWSTP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style number
DataItem OP0JWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// subscript
DataItem OP0JWSUB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// flag used for pa2 cancel
DataItem OP0JWSW char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// terms counter
DataItem OP0JWTCT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group errdiag key info
DataItem OP0JWTK1 char(42)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag key info
DataItem OP0JWTK2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// errdiag key info
DataItem OP0JWTK3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// errdiag key info
DataItem OP0JWTK4 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// errdiag key info
DataItem OP0JWTK5 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag key info
DataItem OP0JWTK6 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag key info
DataItem OP0JWTK7 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag key info
DataItem OP0JWTK8 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// errdiag key info
DataItem OP0JWTK9 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// system time1
DataItem OP0JWTM1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// system time2
DataItem OP0JWTM2 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// system time3
DataItem OP0JWTM3 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// spgm tiered terms flag
DataItem OP0JWTTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0JWTU char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// unit of measure
DataItem OP0JWUMC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 10 subord tot units/$
DataItem OP0JWUOD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// warehouse
DataItem OP0JWWCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// parent w/h
DataItem OP0JWWHP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xzs dec reg cd
DataItem OP0JWXZS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xzw dec reg cd
DataItem OP0JWXZW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OP-CUST-ORD-ID
DataItem OZ2100-OP-CUST-ORD-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// OP-LINE-ITEM-NBR
DataItem OZ2100-OP-LINE-ITEM-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// OP-NIKE-ORD-ID
DataItem OZ2100-OP-NIKE-ORD-ID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// OP-ORD-PART-CHAR
DataItem OZ2100-OP-ORD-PART-CHAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// passing record for OZ2100
DataItem OZ2100-PASS-RECORD char(2500)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// info to pass to OZ2100
DataItem OZ2100-PASSED-INFO char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RETURN-CD
DataItem OZ2100-RETURN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// info passed back
DataItem OZ2100-RETURNED-INFO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SOCD-APPL-SRC-CD
DataItem OZ2100-SOCD-APPL-SRC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RECORD GROUP LEVEL
DataItem VCPBUS01-GROUP char(147)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// KEY GROUP LEVEL
DataItem VCPBUS01-KEY char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

