package op0p;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import dg.common.*;
import ku.common.*;
import ob.common.*;
import op.common.*;
import pc.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
//*** PROGRAM=OP0P ****
// this application is designed to display an order print
// request screen, validate the order and suborder numbers
// entered, and submit a batch order print job.
// ;***********************************************************
// ;*  09-04-86: MODIFIED STG OP0PS10 INSERTING USERID & PASWRD
// ;*            VALUES GOALBA --- JWOOD
// ;*  11-03-88  noncsp opt added to calls ---jwood
// ;*  02-20-89  segmented trans id set logic added
// ;*  01-29-90  removed logic for capex stuff (cai...). added
// ;*            table op0pt01 for jcl library refs.  s10.
// ;             prod.proclib also adjusted.
// :*  02/14/91  regen for db chgs tfox
// :*  01/14/92  jhecke - 010, changed to set op0pw01,w02 to
// :             empty.
// :* 11/10/92   delete userid and passwork values goalba---
// :*            JATHER
// :* 04/01/94   gcalki  Log #1003 - rename causera to
// :*                    ca-user-workarea-4k so it can hold
// :*                    opwrec which is now 3072 bytes. (ALL)
// ;***********************************************************
// *********************
Program OP0P type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  OP0PW01 OP0PW01; // record
  OP0PW02 OP0PW02; // record
  OP1REC OP1REC; // record
  OPWREC OPWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XSOTBL {deleteAfterUse = yes}; // table
  use OP0PT01 {deleteAfterUse = yes}; // table
  use OP0PM.OP0PM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OP0P010: OP0P010();


     /* ******************** op0p010 flow **************************/


    if (converseVar.eventKey is pa2)
      goto OP0P010; /* cancel request, reset screen*/
    end

    if (OP0PM001.VAGen_EZEMSG != " "
     || OP0PM001.OPMMSG != " "
     || converseVar.validationMsgNum != 0)
      goto OP0P010; /* redisplay with error message*/
    end


     /* ******************** end op0p010 flow **********************/
  end // end main
end // end OP0P

// converse inquiry map
Function OP0P010()
   /* ***************  process op0p010 start  *******************/

      /* this process is designed to allow the user to enter*/
      /* order and suborder numbers which need to be printed*/
   /* ***********************************************************/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value


     /* check entry security*/

  XSENTRY();

   /* ****************************************************/
   /* *** set segmented trans id                      ****/
   /* ****************************************************/

  CAEZSAP = sysVar.transactionID;
  CAEZSG12 = "OP";
  CAEZSG4 = "P";
  sysVar.transactionID = CAEZSAP;

  set OP0PW01 empty;
  set OP0PW02 empty;
   /* *************************************************************/
  OPWREC.OPWSGRP = COMMAREA.CA-USER-WORKAREA-4K;

     /* set revision number*/

  OP0PM001.OPMRVN = 01;

     /* move current date*/

  OP0PM001.OPMDT = VGVar.currentShortGregorianDate;

     /* force segmented mode*/

  converseVar.segmentedMode = 1;


     /* check for order number in commarea - if a decimal exists,*/
     /* order number and suborder are assumed to be there - if no*/
     /* decimal is found, the first 1-8 charcacters are used as*/
     /* the order number, and suborder number is assumed to be 0.*/


  if (COMMAREA.CAITEM > " ")
    if ("." in COMMAREA.CAITMLTR)
      OP0PWSB1 = 1;
      while (OP0PWSB1 < 9
       && OP0PWSB1 < sysVar.arrayIndex)
        OP0PWCHR[OP0PWSB1] = COMMAREA.CAITMLTR[OP0PWSB1];
        OP0PWSB1 = OP0PWSB1 + 1;
      end /* while*/
      OP0PM001.OP1CUOID[1] = OP0PWCOR;
      OP0PWSB1 = sysVar.arrayIndex + 1;
      OP0PWNCH[1] = COMMAREA.CAITMLTR[OP0PWSB1];
      OP0PWSB1 = OP0PWSB1 + 1;
      OP0PWNCH[2] = COMMAREA.CAITMLTR[OP0PWSB1];
      OP0PM001.OP1NORID[1] = OP0PWNOR;
    else
      OP0PWSB1 = 1;
      while (COMMAREA.CAITMLTR[OP0PWSB1] > " "
       || OP0PWSB1 < 9)
        OP0PWCHR[OP0PWSB1] = COMMAREA.CAITMLTR[OP0PWSB1];
        OP0PWSB1 = OP0PWSB1 + 1;
      end /* while*/
      OP0PM001.OP1CUOID[1] = OP0PWCOR;
    end
  end


  converse OP0PM001 ;


   /* ***************  op0p010 - after stage  *******************/



     /* clear message fields*/

  OP0PM001.OPMMSG = " ";
  OP0PW01.OP0PWMSG = " ";

     /* set up fast path fields*/

  COMMAREA.CATOAP = OP0PM001.CATOAP;
  COMMAREA.CAITEM = OP0PM001.CAITEM;

  OP0PS99(); /* check for valid pf keys/fastpath request*/

  if (OP0PW01.OP0PWMSG != " ")
    OP0PM001.OPMMSG = OP0PW01.OP0PWMSG;
    exit stack;
  end

  OP0PW01.OP0PWSB4 = 1;
  OP0PW01.OP0PWSB2 = 50;
  while (OP0PW01.OP0PWSB2 > 0)
    if (OP0PM001.OP1CUOID[OP0PWSB2] is modified
     || OP0PM001.OP1NORID[OP0PWSB2] is modified)
      if (OP0PM001.OP1CUOID[OP0PWSB2] > 0)
        if (OP0PM001.OP1NORID[OP0PWSB2] > 0)
          OP0PW01.OP0PWPRT = OP0PM001.OP1CUOID[OP0PWSB2];
          OP1REC.OP1PARTN = OP0PW01.OP1PARTN;
          OP1REC.OP1CUOID = OP0PM001.OP1CUOID[OP0PWSB2];
          OP1REC.OP1NORID = OP0PM001.OP1NORID[OP0PWSB2];
          SQLCA.VAGen_SQLCODE = 0;
          call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
          if (SQLCA.VAGen_SQLCODE == 100)
            set OP0PM001.OP1CUOID[OP0PWSB2] cursor, modified, bold;
            set OP0PM001.OP1NORID[OP0PWSB2] modified, bold;
            OP0PW01.OP0PWMSG = "ORDER NOT ON FILE";
          else
            if (SQLCA.VAGen_SQLCODE == 0)
              if (OP1REC.XOSCD > " ")
                OP0PW01.OP0PWCNB[OP0PWSB4] = OP1REC.OP1CUOID;
                OP0PW01.OP0PWNNB[OP0PWSB4] = OP1REC.OP1NORID;
                set OP0PM001.OP1CUOID[OP0PWSB2] initialAttributes;
                set OP0PM001.OP1NORID[OP0PWSB2] initialAttributes;
                OP0PWSB4 = OP0PWSB4 + 1;
              else
                set OP0PM001.OP1CUOID[OP0PWSB2] cursor, modified, bold;
                set OP0PM001.OP1NORID[OP0PWSB2] modified, bold;
                OP0PW01.OP0PWMSG = "ORDER NOT ON FILE";
              end
            else
              TA1REC.TA1TYPE = "DB2";
              TA1REC.TA1FUNC = "ABND";
              TA1REC.TA1PGMNM = "OP0P";
              TA1REC.TA1LOC = "SELECT UNIQUE ORDER HEADER";
              call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
            end
          end
        else
          OP0PW01.OP0PWPRT = OP0PM001.OP1CUOID[OP0PWSB2];
          OP1REC.OP1PARTN = OP0PW01.OP1PARTN;
          OP1REC.OP1CUOID = OP0PM001.OP1CUOID[OP0PWSB2];
          call "IO0430" ("SS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
          if (SQLCA.VAGen_SQLCODE == 100)
            set OP0PM001.OP1CUOID[OP0PWSB2] cursor, modified, bold;
            set OP0PM001.OP1NORID[OP0PWSB2] modified, bold;
            OP0PW01.OP0PWMSG = "ORDER NOT ON FILE";
          else
            if (SQLCA.VAGen_SQLCODE == 0)
              call "IO0430" ("SN", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
              if (SQLCA.VAGen_SQLCODE == 0)
                if (OP1REC.XOSCD > " ")
                  OP0PW01.OP0PWCNB[OP0PWSB4] = OP1REC.OP1CUOID;
                  OP0PW01.OP0PWNNB[OP0PWSB4] = 0;
                  set OP0PM001.OP1CUOID[OP0PWSB2] initialAttributes;
                  set OP0PM001.OP1NORID[OP0PWSB2] initialAttributes;
                  OP0PWSB4 = OP0PWSB4 + 1;
                else
                  set OP0PM001.OP1CUOID[OP0PWSB2] cursor, modified, bold;
                  set OP0PM001.OP1NORID[OP0PWSB2] modified, bold;
                  OP0PW01.OP0PWMSG = "ORDER NOT ON FILE";
                end
              else
                set OP0PM001.OP1CUOID[OP0PWSB2] cursor, modified, bold;
                set OP0PM001.OP1NORID[OP0PWSB2] modified, bold;
                OP0PW01.OP0PWMSG = "ORDER NOT ON FILE";
              end
            else
              TA1REC.TA1TYPE = "DB2";
              TA1REC.TA1FUNC = "ABND";
              TA1REC.TA1PGMNM = "OP0P";
              TA1REC.TA1LOC = "SELECT SET ORDER HEADER";
              call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
            end
          end
          call "IO0430" ("CS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
        end
      else
        /* next sentence*/
      end
    else
      /* next sentence*/
    end
    OP0PWSB2 = OP0PWSB2 - 1;
  end /* while*/

  if (OP0PW01.OP0PWMSG == " ")
    if (OP0PWSB4 > 1)
      OP0PS10(); /* build jcl and call ta0070*/
    else
      OP0PW01.OP0PWMSG = "NO ORDERS REQUESTED - NO ORDERS WILL BE PRINTED";
    end
  end
  OP0PM001.OPMMSG = OP0PW01.OP0PWMSG;
  exit stack;



   /* ***************  process op0p010 end  *********************/
end // end OP0P010

// build jcl and submit job
Function OP0PS10()



    /* ********** start stmt grp op0ps10 ******************/



  if (COMMAREA.XSOCD in XSOTBL.XSOCD)
    OP0PW01.OP0PWJCD = XSOTBL.XSOJBSCD[sysVar.arrayIndex];
    OP0PW01.OP0PWDES = XSOTBL.XSOPDEST[sysVar.arrayIndex];
  else
    OP0PW01.OP0PWMSG = "OFFICE CODE NOT FOUND";
    exit stack;
  end

  OP0PWSB3 = 1;
  OP0PW01.OP0PWJNM = "//OP105";
  OP0PW01.OP0PWJST = "       JOB  (DV,MUR2),OPRINT,";
  OP0PWLIN[OP0PWSB3] = OP0PW01.OP0PWJLN;
  OP0PWSB3 = OP0PWSB3 + 1;
  OP0PWLIN[OP0PWSB3] = "//             CLASS=P,";
  OP0PWSB3 = OP0PWSB3 + 1;
  OP0PWLIN[OP0PWSB3] = "//             MSGCLASS=J";
  OP0PWSB3 = OP0PWSB3 + 1;
  OP0PW01.OP0PWOUS = "/*OUTPUT RTE1 DEST=";
  OP0PWLIN[OP0PWSB3] = OP0PW01.OP0PWOUP;
  OP0PWSB3 = OP0PWSB3 + 1;
  OP0PWLIN[OP0PWSB3] = OP0PT01.OP0PWLN1;
  OP0PWSB3 = OP0PWSB3 + 1;
  OP0PWLIN[OP0PWSB3] = OP0PT01.OP0PWLN2;
  OP0PWSB3 = OP0PWSB3 + 1;
  OP0PWLIN[OP0PWSB3] = OP0PT01.OP0PWLN3;
  OP0PWSB3 = OP0PWSB3 + 1;
  OP0PWLIN[OP0PWSB3] = OP0PT01.OP0PWLN4;
  OP0PWSB3 = OP0PWSB3 + 1;
  OP0PWLIN[OP0PWSB3] = "//P0010      EXEC OP1051";
  OP0PWSB3 = OP0PWSB3 + 1;
  OP0PWLIN[OP0PWSB3] = "//S0010.DATAIN  DD *";

  OP0PWSB3 = OP0PWSB3 + 1;
  OP0PWLIN[OP0PWSB3] = "PARM";
  OP0PWSB3 = OP0PWSB3 + 1;

  OP0PWSB4 = 1;
  while (OP0PWSB4 < 51
   && OP0PW01.OP0PWPRM[OP0PWSB4] > 0)
    OP0PWLIN[OP0PWSB3] = OP0PW01.OP0PWPRM[OP0PWSB4];
    OP0PWSB4 = OP0PWSB4 + 1;
    OP0PWSB3 = OP0PWSB3 + 1;
  end /* while*/
  OP0PWLIN[OP0PWSB3] = "/*";

  OP0PWSB3 = 1;
  while (OP0PWLIN[OP0PWSB3] > " ")
    OP0PWPLN[OP0PWSB3] = OP0PWLIN[OP0PWSB3];
    OP0PWSB3 = OP0PWSB3 + 1;
  end /* while*/

  OP0PWPRN = 0;
  OP0PWCNT = OP0PWSB3 - 1;
  call "TA0070" (OP0PW02) {isNoRefresh = yes, isExternal = yes};
  if (OP0PWPRN > 0)
    OP0PW01.OP0PWMSG = "PRINT REQUEST FAILED - ORDERS NOT PRINTED";
  else
    OP0PW01.OP0PWMSG = "PRINT REQUEST COMPLETE - ORDERS WILL BE PRINTED";
  end


    /* ***********   end of stmt grp op0ps10  *************/


end // end OP0PS10

// check normal pf keys/fastpath
Function OP0PS99()
    /* ********** start stmt grp op0ps99 ******************/



  if (converseVar.eventKey is enter) /* enter - check fastpath*/
    if (OP0PM001.CATOAP != " ")
      COMMAREA.CATOAP = OP0PM001.CATOAP;
      COMMAREA.CAITEM = OP0PM001.CAITEM;
      XSEXIT();
      OP0PM001.OPMMSG = COMMAREA.CAMSG;
    end
  else
    if (converseVar.eventKey is pa2) /* pa2 - reset map*/
      set OP0PM001 initial;
      exit stack;
    else
      if (converseVar.eventKey is pf1) /* pf1 - help (not yet active)*/
        XSPF1();
        OP0PM001.OPMMSG = COMMAREA.CAMSG; /* security msg*/
        return;
      else
        if (converseVar.eventKey is pf3) /* pf3 - return to last menu*/
          COMMAREA.CATOAP = "OP0M";
          XSEXIT();
        else
          if (converseVar.eventKey is pf4) /* pf4 - return to main menu*/
            XSPF4();
            OP0PM001.OPMMSG = COMMAREA.CAMSG; /* security msg*/
            return;
          else
            OP0PM001.OPMMSG = "INVALID ENTRY KEY";
            exit stack;
          end
        end
      end
    end
  end


    /* ***********   end of stmt grp op0ps99  *************/
end // end OP0PS99

//*** RECORD=OP0PW01 ****
// this is the work record for application op0p
// ***********************
Record OP0PW01 type basicRecord
  10 OP0PWMSG OP0PWMSG ; 
  10 OP0PWLIN OP0PWLIN [80] ; 
  10 OP0PWJLN OP0PWJLN ; 
    15 OP0PWJNM OP0PWJNM ; 
    15 OP0PWJCD OP0PWJCD ; 
    15 OP0PWJST OP0PWJST ; 
  10 OP0PWOUP OP0PWOUP ; 
    15 OP0PWOUS OP0PWOUS ; 
    15 OP0PWDES OP0PWDES ; 
    15 * char(53) ; 
  10 OP0PWPRM OP0PWPRM [50] ; 
    15 OP0PWCNB OP0PWCNB ; 
    15 OP0PWNNB OP0PWNNB ; 
  10 OP0PWPRT OP0PWPRT ; 
    15 * char(7) ; 
    15 OP1PARTN OP1PARTN ; 
  10 OP0PWSB1 OP0PWSB1 ; 
  10 OP0PWSB2 OP0PWSB2 ; 
  10 OP0PWSB3 OP0PWSB3 ; 
  10 OP0PWSB4 OP0PWSB4 ; 
  10 OP0PWCOR OP0PWCOR ; 
    15 OP0PWCHR OP0PWCHR [8] ; 
  10 OP0PWNOR OP0PWNOR ; 
    15 OP0PWNCH OP0PWNCH [2] ; 
end // end OP0PW01

//*** RECORD=OP0PW02 ****
// this record contains jcl statements passed to ta0070
// ***********************
Record OP0PW02 type basicRecord
  10 OP0PWPRN OP0PWPRN ; 
  10 OP0PWCNT OP0PWCNT ; 
  10 OP0PWPLN OP0PWPLN [80] ; 
end // end OP0PW02

// customer order character
DataItem OP0PWCHR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer order number
DataItem OP0PWCNB num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OP0PWCNT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// customer order from caitem
DataItem OP0PWCOR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// output destination
DataItem OP0PWDES char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jobname office code
DataItem OP0PWJCD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// job line of jcl
DataItem OP0PWJLN char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jobname (partial)
DataItem OP0PWJNM char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// the rest of the job card
DataItem OP0PWJST char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level jcl line
DataItem OP0PWLIN char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work message field
DataItem OP0PWMSG char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nike order character
DataItem OP0PWNCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nike order number
DataItem OP0PWNNB num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nike order from caitem
DataItem OP0PWNOR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jes2 output line of jcl
DataItem OP0PWOUP char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jes2 output statement
DataItem OP0PWOUS char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0PWPLN char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level parm field
DataItem OP0PWPRM num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OP0PWPRN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level redef of cuoid
DataItem OP0PWPRT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// item character subscript
DataItem OP0PWSB1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen subscript (1-50)
DataItem OP0PWSB2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// jcl line subscript (1-80)
DataItem OP0PWSB3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order number subscript (1-50)
DataItem OP0PWSB4 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

