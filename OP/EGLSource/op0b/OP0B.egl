package op0b;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import dg.common.*;
import ku.common.*;
import ob.common.*;
import op.common.*;
import pc.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
//*** PROGRAM=OP0B ****
// nike order entry - order entry menu
// 
// overview: this application is the first screen in the order
//           entry process.  it functions as the o/e function
//           menu.  it flows to op0c customer id/addresses.
// 
// 
// 
// 
// 
// 
// date created: 05/29/86
//       author: steve noble
// 
// maintenance history:
// 
//     when       who       what
//   --------  ----------  ------------------------------------
//   05/29/86   s noble     original creation
//   08/22/86   d smith     changed record initialization to
//                          allow 'taken by' to default
//   09/20/86   thuha mai   bulk/draw orders project -- changed
//                          program to allow draw orders to be
//                          entered
//   07/06/87   obecke      added prev cust nbr and name to map
//                          added prev ordered-by to map
//   03/24/88   craine      default bulk need date and sales
//                          program to the draw, set-aside only
//                          op0c will display and do the edits.
//   04/07/88   craine      remove default of need date to draw
//   04/25/87   craine      remove default of sales program to
//                          opwrec.
//   07/12/88   obecke      capture the previous taken-by, if
//                          one. op0b005.
//   10/13/88   jwood       changed calls to include NONCSP opt
//   10/19/88   gwells      rebooking - added code to accomo-
//                            date the new 'rebook draw' type -
//                            s12, s15.
//   02/20/89   jwood       set segmented trans id logic added
//   07/06/89   ssteph      This fix is to allow Draw from Bulk
//                          (option 4) to be able to draw from
//                          a specific sub order if the user so
//                          wishes.
//                          1) Added sub order number to the
//                          screen as OP0BMSOR.
//                          2) Used this value in OP0BS12 to
//                          retrieve a specific sub order of
//                          the bulk order. This is saved in
//                          Order Header Record in OP0BS15 as
//                          OPwREC.OP1NORID, which is then used
//                          in OP0H.
//   08/24/89   ssteph      initialize credit fields when
//                          creating orders. op0b001.
//   10/31/89   scantr      added code for nil pricing  s12.
//   12/05/89   tfox        chgs for comp nbr to s12.
//   04/04/90   BWATSO      Data base changes.  Changed
//                          OP1BLKCD to XBDCD in 001, S12, S14,
//                          and S15.
//   05/21/90   BWATSO      Brand code changes.
//                          Added logic to validate brand code
//                          for duplicated and draw orders in
//                          S12.  SBC is new.
//   11/06/90   skott       db chgs xsdcd to pc2inseg, xsacd to
//                          xegcd. 001
//   12/29/90   jloyer      op0bs15: don't allow draws against
//                          blank bulks (temp for now).
//   02/14/91   dmeier      change xchcd from numeric to alpha
//   02/26/91   swatso      change xchcd from ' ' to '00', and
//                          move spaces to map when '00' in 001
//   02/28/91   swatso      op0bs15: require form flow to
//                          process t-shirts blank bulk draws.
//   03/26/91   oricha      init kucskind to ' ' instead of 'n'
//                          op0b001.
//   04/03/91   tfox        menu services op0b001
//   04/25/91   bbake2      added logic to display allocation
//                          hold message. changes to map 001
//                          and op0b001.
//   05/16/91   craine      allow NIL to duplicate 'S1' orders
//                          (samples) since the products have
//                          the same price types. log#487 chng
//                          in S12 .
//   07/15/91  bbake2       disallow dup order for blank bulks
//                          in phone flow. s12
//   12/10/93  bbake2       no log - increase size of ord #
//                          on map to 9 bytes.
//   04/01/94   gcalki      Log #1003 - renamed causera to
//                          ca-user-workarea-4k so it can hold
//                          opwrec which is now 3072 bytes.(ALL
//   06/21/95   mmcgol      op0bs12-changed to check xct of ord
//                          vs xct  of userid-Canadian Project
//                          added crty storage to op0bw01 recd
//   06/24/97  csawki       Added Equipment/Product Category
//                          changes. Modified OP0BS01, OP0BS02,
//                          OP0B001.
// 
// *********************
Program OP0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KUYREC KUYREC; // record
  OP0BW01 OP0BW01; // record
  OP1REC OP1REC; // record
  OPAREC OPAREC; // record
  OPWREC OPWREC; // record
  OPWREC01 OPWREC01; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use OP0BT {deleteAfterUse = yes}; // table
  use XBDTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XCHTBL {deleteAfterUse = yes}; // table
  use XSOTBL {deleteAfterUse = yes}; // table
  use OP0BM.OP0BM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OP0B001: OP0B001();



    goto OP0B005; /* branch to converse*/



     /* *************************************************************/
    OP0B005: OP0B005();



        /* branch to converse*/

    goto OP0B005; /* branch to converse*/



     /* *************************************************************/
  end // end main
end // end OP0B

// program init/init defaults
Function OP0B001()



     /* **********************************************************/
     /* * this process initializes program work and map areas.  **/
     /* **********************************************************/

     /* **********************************************************/
     /* * note!!!!  when changing the initialization code       **/
     /* *           below, be sure to make similar changes      **/
     /* *           to statement group op0cs06 in op0c.         **/
     /* **********************************************************/



      /* set revision number of application*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  OP0BM001.OPMRVN = 03; /* bulk/draw order project  09/25/86*/


      /* check entry security*/

  XSENTRY();

   /* ****************************************************/
   /* *** set segmented trans id                      ****/
   /* ****************************************************/

  CAEZSAP = sysVar.transactionID;
  CAEZSG12 = "OP";
  CAEZSG4 = "B";
  sysVar.transactionID = CAEZSAP;

   /* *************************************************************/

      /* clear ws records*/

  OP0BS01(); /* clear ws records*/



      /* retrieve user common area and check o/e entry security*/

  XSOPS01(); /* check order entry security*/

  OP0BS02(); /* retrieve user 2K common area*/

      /* init error diag areas*/

  TA1REC.TA1TYPE = "DB2 "; /* abend type*/
  TA1REC.TA1FUNC = "RETN"; /* abend function (return)*/
  TA1REC.TA1PGMNM = "OP0B    "; /* pgm name*/
  TA1REC.TA1MAP = "OP0BM001"; /* current map name*/
  TA1REC.TA1LOCAT[1] = "OP0B001 "; /* process name*/


      /* initialize map fields*/

  OP0BM001.OPMDT = VGVar.currentShortGregorianDate; /* current date*/


      /* set defaults*/



  OP1REC.OP1GROUP = OPWREC.OP1GROUP;

  if (OP1REC.KUCCOID > 0)
    OPAREC.OPACUCO = OP1REC.KUCCOID; /* format cust co; 7/6/87 oab*/
    OPAREC.OPASEP1 = ".";
    OPAREC.OPACUSR = OP1REC.KUMSTRID; /* format cust co*/
    OPAREC.OPASEP2 = ".";
    OPAREC.OPACUDP = OP1REC.XNXCD; /* format cust co*/
    OP0BM001.OPACUNO = OPAREC.OPACUNO;
    OP0BM001.KUMSTRNM = OPWREC.KUMSTRNM; /* move cust name*/
    OP0BM001.OP1ORDBY = OP1REC.OP1ORDBY; /* move prev ordered by*/
  else
    set OP0BM001.OPACUNO skip, invisible;
  end

  if (COMMAREA.CAFROMAP == "OP0A")
    OP0BW01.OP1TBREP = OPWREC.OPWENTID;
  else
    OP0BW01.OP1TBREP = OP1REC.OP1TBREP; /* save the previous taken-by*/
  end
  OP0BW01.XCHCD[1] = OPWREC.XCHCD[1];
                                   /* save referred to credit info1*/
  OP0BW01.XCHCD[2] = OPWREC.XCHCD[2];
                                   /* save referred to credit info2*/
  OP0BW01.XCHCD[3] = OPWREC.XCHCD[3];
                                   /* save referred to credit info3*/
  set OP1REC empty;
  OP1REC.XCHCD[1] = "00"; /* initializing to not checked*/
  OP1REC.XCHCD[2] = "00"; /* initializing to not checked*/
  OP1REC.XCHCD[3] = "00"; /* initializing to not checked*/



   /* move referred to credit fields to map*/



  if (OP0BW01.XCHCD[1] == "00"
   || OP0BW01.XCHCD[1] == "  ")
    OP0BM001.XCHCD[1] = "  ";
    OP0BM001.XCHDESC[1] = "                         ";
  else
    OP0BM001.XCHCD[1] = OP0BW01.XCHCD[1];
    if (OP0BW01.XCHCD[1] in XCHTBL.XCHCD)
      OP0BM001.XCHDESC[1] = XCHTBL.XCHDESC[sysVar.arrayIndex];
    else
      OP0BM001.XCHDESC[1] = "CODE NOT DEFINED         ";
    end
  end



  if (OP0BW01.XCHCD[2] == "00"
   || OP0BW01.XCHCD[2] == "  ")
    OP0BM001.XCHCD[2] = "  ";
    OP0BM001.XCHDESC[2] = "                         ";
  else
    OP0BM001.XCHCD[2] = OP0BW01.XCHCD[2];
    if (OP0BW01.XCHCD[2] in XCHTBL.XCHCD)
      OP0BM001.XCHDESC[2] = XCHTBL.XCHDESC[sysVar.arrayIndex];
    else
      OP0BM001.XCHDESC[2] = "CODE NOT DEFINED         ";
    end
  end



  if (OP0BW01.XCHCD[3] == "00"
   || OP0BW01.XCHCD[3] == "  ")
    OP0BM001.XCHCD[3] = "  ";
    OP0BM001.XCHDESC[3] = "                         ";
  else
    OP0BM001.XCHCD[3] = OP0BW01.XCHCD[3];
    if (OP0BW01.XCHCD[3] in XCHTBL.XCHCD)
      OP0BM001.XCHDESC[3] = XCHTBL.XCHDESC[sysVar.arrayIndex];
    else
      OP0BM001.XCHDESC[3] = "CODE NOT DEFINED         ";
    end
  end



  if (OPWREC.OPWPORD > 0) /* previous order number*/
    OP0BM001.OP0BMPOR = OPWREC.OPWPORD; /* prev ord num*/
    OP0BM001.OP0BMPRS = "-"; /* prev '-' literal*/
    OP0BM001.OP0BMPNO = OPWREC.OPWPNSOR; /* prev ord num of sub ords*/
    if (OPWREC.OPWMSGC1 in OP0BT.OP0BTCD /* ordr msg code table*/
     && OP0BT.XXXSTAT[sysVar.arrayIndex] == "A") /* active status*/
      if (COMMAREA.CAMSG == " ")
        OP0BM001.OP0BMS1A = OP0BT.OP0BTMSG[sysVar.arrayIndex]; /* prev ord msg1*/
      else
        OP0BM001.OP0BMSG1 = OP0BT.OP0BTMSG[sysVar.arrayIndex]; /* prev ord msg1*/
        OP0BM001.OP0BMS1A = COMMAREA.CAMSG; /* allocation hold msg*/
        COMMAREA.CAMSG = " ";
      end
    end
    if (OPWREC.OPWMSGC2 in OP0BT.OP0BTCD /* ordr msg code table*/
     && OP0BT.XXXSTAT[sysVar.arrayIndex] == "A") /* active status*/
      OP0BM001.OP0BMSG2 = OP0BT.OP0BTMSG[sysVar.arrayIndex]; /* prev ord msg2*/
    end
  end


     /* if order was accepted, then format previous ord number*/
     /* in order number field.*/

  if (OPWREC.OPWFUNC == "4") /* draw from bulk order*/
    OP0BM001.OP0BMORD = OPWREC.OP1BLKID; /* display bulk ord id*/
  else
    if (OPWREC.OPWMSGC1 == "01") /* order accepted?*/
      OP0BM001.OP0BMORD = OPWREC.OPWPORD; /* ord num*/
    end
  end


     /* if func is null the assume new order*/

  if (OPWREC.OPWFUNC == " ") /* menu func?*/
    OPWREC.OPWFUNC = "1"; /* init menu func*/
  end

  OP0BM001.OP0BMOPT = OPWREC.OPWFUNC;


      /* initialize opwrec fields*/

  OPWREC.OP1GROUP = OP1REC.OP1GROUP; /* init op1rec save*/
  OPWREC.OPWMULSO = "N"; /* init multi sub-ord to no*/
  OPWREC.OPWREVM = 0; /* init review mode*/
  OPWREC.OPWPORD = 0; /* init prev order number*/
  OPWREC.OPWPNSOR = 0; /* init prev nbr sub ords*/
  OPWREC.OPWPITM = 0; /* init prev order nbr items*/
  OPWREC.XEGCD = " "; /* init shade code*/
  OPWREC.PC2INSEG = " "; /* init spec code*/
  OPWREC.XRTCD = " "; /* init sales rep assoc type*/
  OPWREC.OPWAUTFL = "N"; /* init authorization flag*/
  OPWREC.KUMSTRNM = " "; /* init store name*/
  OPWREC.OPWLSTLI = 0; /* init last line item number*/
  OPWREC.OP2LNINB = 0; /* init op-line-item-nbr*/
  OPWREC.OPWOHD = OPWREC.OPWDOHD; /* init disp misc ord hdr*/
  OPWREC.KUCSKIND = " "; /* init cust sku ind*/
  OPWREC.OP2HCHGO[1] = "N"; /* init hdl chg ovrd*/
  OPWREC.OP2HCHGO[2] = "N"; /* init hdl chg ovrd*/
  OPWREC.OP2HCHGO[3] = "N"; /* init hdl chg ovrd*/
  OPWREC.OP2HCHGO[4] = "N"; /* init hdl chg ovrd*/
  OPWREC.OP2HCHGO[5] = "N"; /* init hdl chg ovrd*/
  OPWREC.XHDCD[1] = " "; /* init hdl code*/
  OPWREC.XHDCD[2] = " "; /* init hdl code*/
  OPWREC.XHDCD[3] = " "; /* init hdl code*/
  OPWREC.XHDCD[4] = " "; /* init hdl code*/
  OPWREC.XHDCD[5] = " "; /* init hdl code*/
  OPWREC.XHDCHG[1] = 0; /* init hdl charge*/
  OPWREC.XHDCHG[2] = 0; /* init hdl charge*/
  OPWREC.XHDCHG[3] = 0; /* init hdl charge*/
  OPWREC.XHDCHG[4] = 0; /* init hdl charge*/
  OPWREC.XHDCHG[5] = 0; /* init hdl charge*/
  OPWREC.OP1BLKID = 0; /* init bulk order id*/
  OPWREC.XBDCD = "0"; /* init bulk/draw order code*/

  OPWREC.XOWCD = "00"; /* init owner group code*/
  OPWREC.XCHCD[1] = "00"; /* init refer to credit 1*/
  OPWREC.XCHCD[2] = "00"; /* init refer to credit 2*/
  OPWREC.XCHCD[3] = "00"; /* init refer to credit 3*/



     /* clear sub-order table*/

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex < 11)
    OPWREC.XWHCD[sysVar.arrayIndex] = " "; /* clear warehouse code*/
    OPWREC.OP1OWHMF[sysVar.arrayIndex] = "N"; /* clear 1 warehouse mod code*/
    OPWREC.OP1CUNDT[sysVar.arrayIndex] = 0; /* clear need date*/
    OPWREC.OP1OVALU[sysVar.arrayIndex] = 0; /* clear order value*/
    OPWREC.OP1OTUNT[sysVar.arrayIndex] = 0; /* clear order tot units*/
    OPWREC.OPWNMALP[sysVar.arrayIndex] = 0; /* clear allocated products*/
    sysVar.arrayIndex = sysVar.arrayIndex + 1; /* increment index*/
  end


     /* clear product table (note:  the opwhexno field really*/
     /* contains x'01' thru x'0A' representing the sub-order*/
     /* number in binary (hex).  we are initializing the field*/
     /* to x'F0' (char '0') to avoid problems of comparing*/
     /* the field to a character ' ' (space x'40').  this*/
     /* avoidance also gives us the capability of having*/
     /* 64 (x'40') sub orders if necessary (not expected)).*/

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex < 901)
    OPWREC.OPWSELCD[sysVar.arrayIndex] = " "; /* clear select code*/
    OPWREC.OPWHEXNO[sysVar.arrayIndex] = "0"; /* clear hex sub-ord id*/
    sysVar.arrayIndex = sysVar.arrayIndex + 1; /* increment index*/
  end


     /* clear multi product array*/

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex < 7)
    OPWREC.SY1STNBR[sysVar.arrayIndex] = " "; /* clear style nbr*/
    OPWREC.SY2CLRID[sysVar.arrayIndex] = " "; /* clear color*/
    OPWREC.XDMCD[sysVar.arrayIndex] = " "; /* clear dimension*/
    OPWREC.KUIPRDID[sysVar.arrayIndex] = " "; /* clear prod xref*/
    OPWREC.XUMCD[sysVar.arrayIndex] = " "; /* clear unit of measure code*/
    OPWREC.XPGCD[sysVar.arrayIndex] = " "; /* clear package code*/
    OPWREC.XQACD[sysVar.arrayIndex] = " "; /* clear quality code*/
    OPWREC.OPWDUPSZ[sysVar.arrayIndex] = " "; /* clear dup size flag*/
    OPWREC.XSZCD[sysVar.arrayIndex] = " "; /* clear standard size dist code*/
    OPWREC.OPWBKLIN[sysVar.arrayIndex] = 0; /* clear bulk-ord line-item number*/
    OPWREC.OP2TONOQ[sysVar.arrayIndex] = 0; /* clear tot orig qty*/
    OPWREC.OPWRQSZF[sysVar.arrayIndex] = 0; /* clear first size*/
    OPWREC.OPWRQSZL[sysVar.arrayIndex] = 0; /* clear last size*/
    sysVar.arrayIndex = sysVar.arrayIndex + 1; /* increment index*/
  end


       /* initialize set-aside bulk order flag*/

  OP0BW01.OP0BWSET = "N";



   /* *************************************************************/
end // end OP0B001

// converse map to select option
Function OP0B005()



      /* *********************************************************/
      /* * this process converses the map, edits the entered    **/
      /* * fields and if possible, xfer's to the requested      **/
      /* * application                                          **/
      /* *********************************************************/



      /* init error diag areas*/

  TA1REC.TA1MAP = "OP0BM001"; /* current map name*/
  TA1REC.TA1LOCAT[1] = "OP0B005 "; /* process name*/


      /* move catoap and caitem to map*/

  OP0BM001.CATOAP = COMMAREA.CATOAP;
  OP0BM001.CAITEM = COMMAREA.CAITEM;


      /* force segmented converse execution mode*/

  converseVar.segmentedMode = 1; /* force segmented execution mode*/



   /* *************************************************************/
  converse OP0BM001 ;
   /* *************************************************************/



      /* clear message fields*/

  OP0BM001.OPMUMSG = " "; /* clear user msg*/
  OPAREC.OPAERR = "N"; /* clear err flag*/
  OP0BS03(); /* set mdt's on if modified*/


      /* check and process valid aid key requests*/

      /* enter - continue processing*/
        /* pf1 - transfer to help application*/
        /* pf3 - transfer to next level up application*/
        /* pf4 - transfer to master menu application*/
       /* pf12 - edit only*/

  if (converseVar.eventKey is enter)
     /* ** next sentence ** continue processing ***/
  else
    if (converseVar.eventKey is pf1) /* check for system help*/
      XSPF1(); /* help facility*/
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
      OP0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* move err msg*/
      OPAREC.OPAERR = "Y"; /* set err flag*/
      COMMAREA.CATOAP = " "; /* clear app*/
      exit stack;
    else
      if (converseVar.eventKey is pf3) /* check for session defaults*/
        COMMAREA.CATOAP = "OP0A";
        XSEXIT(); /* pass control to exit routine*/
        OP0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* move err msg*/
        OPAREC.OPAERR = "Y"; /* set err flag*/
        COMMAREA.CATOAP = " "; /* clear app*/
        exit stack;
      else
        if (converseVar.eventKey is pf4) /* check for master menu*/
          COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
          XSPF4(); /* invoke master menu request*/
          OP0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* move err msg*/
          OPAREC.OPAERR = "Y"; /* set err flag*/
          COMMAREA.CATOAP = " "; /* clear app*/
          exit stack;
        else
          converseLib.validationFailed(008); /* invalid key pressed*/
          OPAREC.OPAERR = "Y"; /* set err flag*/
          exit stack;
        end
      end
    end
  end


      /* save fast path data*/

  if (OP0BM001.CATOAP is modified) /* save fast path appl*/
    COMMAREA.CATOAP = OP0BM001.CATOAP;
  end

  if (OP0BM001.CAITEM is modified) /* save fast path item*/
    COMMAREA.CAITEM = OP0BM001.CAITEM;
  end


      /* check for transfer - overrides other options*/

  if (converseVar.eventKey is enter
   && COMMAREA.CATOAP > " ") /* transfer to appl?*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    XSEXIT(); /* pass control to exit routine*/
    OP0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* move err msg*/
    OPAREC.OPAERR = "Y"; /* set err flag*/
    COMMAREA.CATOAP = " "; /* clear app*/
    set OP0BM001.CATOAP cursor, modified, bold; /* yes, set option*/
    exit stack;
  end


      /* control edit process*/

  OP0BS10(); /* edit control*/


      /* call commit to release data base resources*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value


      /* if errors found*/
      /* or pf12 (edit only), then converse map*/

  if (OPAREC.OPAERR == "Y"
   || converseVar.eventKey is pf12)
    exit stack;
  end


      /* clear order msg codes*/

  OPWREC.OPWMSGC1 = " "; /* clear ord msg code 1*/
  OPWREC.OPWMSGC2 = " "; /* clear ord msg code 2*/


      /* all is good; if dupe order then xfer to op0n*/

  if (OP0BM001.OP0BMOPT == "2"
   || OP0BM001.OP0BMOPT == "3")
    OPWREC.OP1GROUP = OP1REC.OP1GROUP;
    COMMAREA.CA-USER-WORKAREA-4K = OPWREC.OPWSGRP;
    COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
    COMMAREA.CACURRAP = "OP0N";
    transfer to program "OP0N" passing COMMAREA;
  end


      /* if draw from bulk order, this program xfer to*/
      /* op0d or op0c depending on the bulk order code*/

  if (OP0BM001.OP0BMOPT == "4")
    OP1REC.OP1TBREP = OP0BW01.OP1TBREP; /* 7-12-88 obecke*/
    OPWREC.OP1GROUP = OP1REC.OP1GROUP;
    COMMAREA.CA-USER-WORKAREA-4K = OPWREC.OPWSGRP;
    COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
    if (OP0BW01.OP0BWSET == "Y") /* set-aside bulk order*/
      COMMAREA.CACURRAP = "OP0C";
      transfer to program "OP0C" passing COMMAREA;
    else /* ; customer company bulk order*/
      COMMAREA.CACURRAP = "OP0D";
      transfer to program "OP0D" passing COMMAREA;
    end
  end


      /* all is good; no fast path; xfer to cust id screen*/
      /* (assume enter new order)*/

  OP1REC.OP1TBREP = OP0BW01.OP1TBREP;
  OPWREC.OP1GROUP = OP1REC.OP1GROUP;
  COMMAREA.CA-USER-WORKAREA-4K = OPWREC.OPWSGRP;
  COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
  COMMAREA.CACURRAP = "OP0C";
  transfer to program "OP0C" passing COMMAREA;



   /* *************************************************************/
end // end OP0B005

// set ws recs empty
Function OP0BS01()



      /* *********************************************************/
      /* * this statement group sets the working storage records**/
      /* * empty during initialization                          **/
      /* *********************************************************/



      /* set ws recs empty*/

  set OPWREC empty;
  set OPWREC01 empty;
  set OPAREC empty;
  set SQLCA empty;
  set TA1REC empty;
  set OP1REC empty;



   /* *************************************************************/
end // end OP0BS01

// retrieve user 2k common area
Function OP0BS02()

      /* *********************************/
      /* * retrieve user 2k common area **/
      /* *********************************/


   /* get prod cat o/e*/
  OPWREC01.XPCGRP = COMMAREA.CA-USER-WORKAREA-2K-C; /* commarea*/


   /* *************************************************************/
end // end OP0BS02

// set mdt's if modified
Function OP0BS03()



      /* set mdt's in fields for the case of invalid aid key*/
      /* this allows the user to press the correct aid key*/
      /* without having to re-enter the data*/

  if (OP0BM001.OP0BMOPT is modified) /* menu option*/
    set OP0BM001.OP0BMOPT modified;
  else
    set OP0BM001.OP0BMOPT normal;
  end

  if (OP0BM001.OP0BMORD is modified) /* order number*/
    set OP0BM001.OP0BMORD modified;
  else
    set OP0BM001.OP0BMORD normal;
  end

  if (OP0BM001.CATOAP is modified) /* fast path option*/
    set OP0BM001.CATOAP modified;
  else
    set OP0BM001.CATOAP normal;
  end

  if (OP0BM001.CAITEM is modified) /* fast path item*/
    set OP0BM001.CAITEM modified;
  else
    set OP0BM001.CAITEM normal;
  end



   /* *************************************************************/
end // end OP0BS03

// control field edits
Function OP0BS10()



      /* *********************************************************/
      /* * this statement group controls the field editing.     **/
      /* *                                                      **/
      /* * the fields are edited in reverse order so that the   **/
      /* * the cursor and error message will be related to the  **/
      /* * top most error.  any errors below the top most most  **/
      /* * error will still be highlighted.                     **/
      /* *********************************************************/



      /* init error diag areas*/

  TA1REC.TA1LOCAT[2] = "OP0BS10 "; /* statement group*/


      /* edit/save menu selection*/

  if (OP0BM001.OP0BMOPT is modified)
    OP0BS11(); /* menu option edit*/
  end


      /* perform order number validation, if no previous errors*/

  if (OPAREC.OPAERR == "Y")
    return;
  end

  if (OPWREC.OPWFUNC == "2" /* dupe order option ?*/
   || OPWREC.OPWFUNC == "3" /* dupe header option ?*/
   || OPWREC.OPWFUNC == "4") /* draw from bulk order*/
    OP0BS12(); /* validate order number*/
  end



   /* *************************************************************/
end // end OP0BS10

// edit menu option
Function OP0BS11()



      /* *********************************************************/
      /* * this statement group edits the menu option           **/
      /* *********************************************************/



      /* edit/save screen sequence option*/

  if (OP0BM001.OP0BMOPT >= "1"
   && OP0BM001.OP0BMOPT <= "4") /* code for phase 2*/
    OPWREC.OPWFUNC = OP0BM001.OP0BMOPT;
    set OP0BM001.OP0BMOPT normal;
  else
    converseLib.validationFailed(030); /* invalid option*/
    OPAREC.OPAERR = "Y"; /* set err flag*/
    set OP0BM001.OP0BMOPT cursor, modified, bold;
    return;
  end



   /* *************************************************************/
end // end OP0BS11

// validate order number
Function OP0BS12()


      /* *********************************************************/
      /* * this statement group validates the requested ord nbr **/
      /* *********************************************************/



      /* if null, then order number is invalid*/

  if (OP0BM001.OP0BMORD <= 0) /* check for null order number*/
    converseLib.validationFailed(031); /* order number is required ... msg*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0BM001.OP0BMORD cursor, modified, bold;
    return;
  end


       /* use sub order number only for draw from bulk (option 4)*/

  if (OP0BM001.OP0BMSOR <= 0) /* check for blank order number*/
    OP0BM001.OP0BMSOR = 0;
  else
    if (OPWREC.OPWFUNC == "1" /* enter new order*/
     || OPWREC.OPWFUNC == "2" /* dupe order option*/
     || OPWREC.OPWFUNC == "3") /* dupe order header option*/
      converseLib.validationFailed(491);
                                   /* sub order number is for option 4 only*/
      OPAREC.OPAERR = "Y"; /* set error flag*/
      set OP0BM001.OP0BMSOR cursor, modified, bold;
      return;
    end
  end

      /* issue select unique to get only sub-order (if possible)*/

  OPAREC.OPAORDN = OP0BM001.OP0BMORD; /* load ws for partition*/
  OP1REC.OP1PARTN = OPAREC.OP1PARTN; /* load key - partition*/
  OP1REC.OP1CUOID = OP0BM001.OP0BMORD; /* load key - order number*/
               /* move the suborder screen value first to op1rec*/
  OP1REC.OP1NORID = OP0BM001.OP0BMSOR; /* load key - sub order*/

  if (OP0BM001.OP0BMSOR == 0) /* if there is no sub order number*/
                                   /* specified*/
    call "IO0430" ("ST", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* select unique try*/
  else
    call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  end


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0   /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100 /* check for notfnd rc*/
   || SQLCA.VAGen_SQLCODE == -811) /* check for more than one row rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
    TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0BS12 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0430  "; /* i/o mod name*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* invoke syncpoint rollback*/
    try
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end /* call abend formatter*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    XSPF4(); /* invoke master menu*/
    exit program;
  end


      /* if not found, then order number is invalid*/

  if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
    converseLib.validationFailed(032); /* order number was not found*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0BM001.OP0BMORD cursor, modified, bold;
    return;
  end


      /* if more than one row, then do a select set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* it is only one row*/
    OPWREC.OPWMULSO = "N"; /* single order*/
  else
    if (SQLCA.VAGen_SQLCODE == -811) /* check for more than one row*/
      OP0BS13(); /* do select set and get first order*/
    end
  end


      /* if order is in process then it is invalid*/

  if (OP1REC.XOSCD == "IP") /* check for inprocess status*/
    converseLib.validationFailed(032); /* order number was not found*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0BM001.OP0BMORD cursor, modified, bold;
    return;
  end


       /* duplicate a draw order is prohibited for now*/

  if (OPWREC.OPWFUNC == "2") /* dupe order option*/
    if (OP1REC.XBDCD in XBDTBL.XBDCD)
      if (XBDTBL.XBDRWOFL[sysVar.arrayIndex] == "Y") /* ord to dup is a draw ord*/
        converseLib.validationFailed(277); /* cannot duplicate a draw order*/
        set OP0BM001.OP0BMORD cursor, modified, bold;
        set OP0BM001.OP0BMOPT modified, bold;
        OPAREC.OPAERR = "Y";
        return;
      else
        if (XBDTBL.XBDBKOFL[sysVar.arrayIndex] == "Y") /* bulk order*/
          if (XBDTBL.XBDXRFCD[sysVar.arrayIndex] == "4") /* rebook bulk*/
            converseLib.validationFailed(429); /* cannot duplicate a rebook bulk order*/
            set OP0BM001.OP0BMORD cursor, modified, bold;
            set OP0BM001.OP0BMOPT modified, bold;
            OPAREC.OPAERR = "Y";
            return;
          end
        end
      end
    end
  end



   /* -----------------------------------------------------------*/
    /* Validate order for brand.*/
   /* -----------------------------------------------------------*/
  OP0BSBC(); /* Get the brand code for the user's*/
                                   /* logon.*/

  if (OPAREC.OPAERR == "Y")
    return; /* Return if the brand code was not*/
                                   /* found.*/
  end

  if (OP1REC.XBCCD != KUYREC.XBCCD)
    if (OPWREC.OPWFUNC == "2" /* Dup entire order*/
     || OPWREC.OPWFUNC == "3") /* Dup header only*/
      set OP0BM001.OP0BMORD cursor, modified, bold;
      OPAREC.OPAERR = "Y"; /* Set error flag*/
      converseLib.validationFailed(579); /* Order to dup is not for your brand*/
      return;
    else
      if (OPWREC.OPWFUNC == "4" /* Draw from bulk*/
       && OP1REC.XBDCD != "R")  /* Rebook bulks may have different*/
                                  /* brands.*/
        set OP0BM001.OP0BMORD cursor, modified, bold;
        OPAREC.OPAERR = "Y"; /* Set error flag*/
        converseLib.validationFailed(580); /* Bulk order is not for your brand*/
        return;
      end
    end
  end

   /* Added for Canada-June 21, 1995--*/

   /* -----------------------------------------------------------*/
    /* Validate order for sales office.*/
   /* -----------------------------------------------------------*/
  if (OP1REC.XSOCD in XSOTBL.XSOCD)
    OP0BW01.XCTCD = XSOTBL.XCTCD[sysVar.arrayIndex];
    if (KUYREC.XSOCD in XSOTBL.XSOCD)
      if (XSOTBL.XCTCD[sysVar.arrayIndex] != OP0BW01.XCTCD)
        set OP0BM001.OP0BMORD cursor, modified, bold;
        OPAREC.OPAERR = "Y"; /* Set error flag*/
        converseLib.validationFailed(903); /* Order to dup is not for your country*/
        return;
      end
    end
  end
   /* -----------------------------------------------------------*/
    /* Validate order for division.*/
   /* -----------------------------------------------------------*/
  if (OP1REC.XDVCD == COMMAREA.XDVCD) /* division codes equal?*/
     /* next sentence*/
  else
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0BM001.OP0BMORD cursor, modified, bold;
    if (OPWREC.OPWFUNC == "2" /* dupe order option*/
     || OPWREC.OPWFUNC == "3") /* dupe order header*/
      converseLib.validationFailed(050); /* order to dupe not for your division*/
      return;
    else
      converseLib.validationFailed(284); /* bulk order is in a different division*/
      return;
    end
  end


      /* to duplicate a blank bulk, requires being in form flow*/
      /* otherwise op0h (review mode for option 2, initial entry*/
      /* and review mode for option 3) has a problem with*/
      /* the way opwrec is set up for dup order and does not*/
      /* get the correct owner group*/

  if (OPWREC.OPWFUNC == "2" /* dupe order*/
   || OPWREC.OPWFUNC == "3") /* dupe order header*/
    if (OP1REC.XBDCD == "B" /* blank bulk*/
     && OPWREC.OPWSFLOW == "2") /* phone flow*/
      converseLib.validationFailed(615); /* must be in form flow to add blank*/
                                   /* bulk*/
      OPAREC.OPAERR = "Y"; /* set error flag*/
      set OP0BM001.OP0BMORD cursor, modified, bold;
      return;
    end
  end


      /* if duplicate order the check to see if availability/*/
      /* allocation is required.  if so, then the order cannot*/
      /* be duplicated.*/

  if (OPWREC.OPWFUNC == "2") /* dupe order option*/
    if (OP1REC.XOTCD in XOTTBL.XOTCD /* valid code*/
     && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active status*/
      if (XOTTBL.XOTOALOC[sysVar.arrayIndex] == "N") /* online allocaton - no*/
         /* next sentence*/
      else
        converseLib.validationFailed(039); /* order requiring alloc ... msg*/
        OPAREC.OPAERR = "Y"; /* set error flag*/
        set OP0BM001.OP0BMORD cursor, modified, bold;
        return;
      end
    else
      converseLib.validationFailed(047); /* order containing inactive ord typ...*/
      OPAREC.OPAERR = "Y"; /* set error flag*/
      set OP0BM001.OP0BMORD cursor, modified, bold;
      return;
    end
  end


   /* can't duplicate a nil order because pricing is based on*/
   /* customer and you can change the customer when you duplicate*/
   /* but the pricing is copied as is from the original order*/


  if (OPWREC.OPWFUNC == "2" /* dup order option*/
   || OPWREC.OPWFUNC == "3") /* or dup header option*/
    if (OP1REC.XDVCD == "02" /* nil order*/
     && OP1REC.XOBCD != "S1") /* dup samples is ok, same price types*/
      converseLib.validationFailed(530); /* cannot duplicate this order...*/
      OPAREC.OPAERR = "Y"; /* set error flag*/
      set OP0BM001.OP0BMORD cursor, modified, bold;
      return;
    end
  end



      /* if duplicate order header, then check to see if order*/
      /* type is active.*/

  if (OPWREC.OPWFUNC == "3") /* dupe order header option*/
    if (OP1REC.XOTCD in XOTTBL.XOTCD /* valid code*/
     && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active status*/
       /* next sentence*/
    else
      converseLib.validationFailed(047); /* order containing inactive ord typ...*/
      OPAREC.OPAERR = "Y"; /* set error flag*/
      set OP0BM001.OP0BMORD cursor, modified, bold;
      return;
    end
  end


       /* if dup draw order header, check to see if quantities*/
       /* on bulk order are available for draws*/

  if (OPWREC.OPWFUNC == "3") /* dupe order header option*/
    if (OP1REC.XBDCD in XBDTBL.XBDCD)
      if (XBDTBL.XBDRWOFL[sysVar.arrayIndex] == "Y") /* ord hdr to dup is a draw*/
        if (XBDTBL.XBDXRFCD[sysVar.arrayIndex] == "R") /* rebook draw header*/
          converseLib.validationFailed(430); /* cannot dup a rebook draw order hdr*/
          set OP0BM001.OP0BMORD cursor, modified, bold;
          set OP0BM001.OP0BMOPT modified, bold;
          OPAREC.OPAERR = "Y";
          return;
        else
          OPWREC.OP1GROUP = OP1REC.OP1GROUP; /* save draw ord header*/
          call "IO0430" ("CS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
                                   /* clos for drw sb-ords*/
          OP0BS14(); /* check availability on bulk order*/
          OP1REC.OP1GROUP = OPWREC.OP1GROUP; /* move draw ord header back*/
        end
      else
        if (XBDTBL.XBDBKOFL[sysVar.arrayIndex] == "Y") /* bulk order*/
          if (XBDTBL.XBDXRFCD[sysVar.arrayIndex] == "4") /* rebook bulk*/
            converseLib.validationFailed(431); /* cannot dup a rebook bulk order hdr*/
            set OP0BM001.OP0BMORD cursor, modified, bold;
            set OP0BM001.OP0BMOPT modified, bold;
            OPAREC.OPAERR = "Y";
            return;
          end
        end
      end
    end
  end


       /* if draw from bulk order*/

  if (OPWREC.OPWFUNC == "4") /* draw from bulk ord*/
    OP0BS15(); /* validate bulk order id*/
  end



   /* *************************************************************/
end // end OP0BS12

// select set ordr number
Function OP0BS13()



      /* *********************************************************/
      /* * this statement group performs select set on ord nbr  **/
      /* *********************************************************/


      /* issue select set to get first ord rec for customer*/

  OPAREC.OPAORDN = OP0BM001.OP0BMORD; /* load ws for partition*/
  OP1REC.OP1PARTN = OPAREC.OP1PARTN; /* load key - partition*/
  OP1REC.OP1CUOID = OP0BM001.OP0BMORD; /* load key - order number*/
  OP1REC.OP1NORID = 0; /* load key - sub order*/
  call "IO0430" ("SS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* call mod for sel set*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
    TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0BS13 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0430  "; /* i/o mod name*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* invoke syncpoint rollback*/
    try
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end /* call abend formatter*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    XSPF4(); /* invoke master menu*/
    exit program;
  end


      /* get first order rec for validation*/

  call "IO0430" ("SN", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code (code of 100 is invalid*/
      /* since previous select unique said there were multiples)*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
    TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0BS13 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0430  "; /* i/o mod name*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* invoke syncpoint rollback*/
    try
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end /* call abend formatter*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    XSPF4(); /* invoke master menu*/
    exit program;
  end


      /* set multi order flag*/

  OPWREC.OPWMULSO = "Y"; /* set flag on*/



   /* *************************************************************/
end // end OP0BS13

// check availability on bulk ord
Function OP0BS14()



      /* *********************************************************/
      /* * this statement group checks to see if quantities are **/
      /* * available on bulk order for draws                    **/
      /* *********************************************************/



      /* issue select set to check availability on bulk order*/

  OPAREC.OPAORDN = OP1REC.OP1BLKID; /* load ws for partition*/
  OP1REC.OP1PARTN = OPAREC.OP1PARTN; /* load key - partition*/
  OP1REC.OP1CUOID = OP1REC.OP1BLKID; /* load key - order number*/
  OP1REC.OP1NORID = 0; /* load key - sub order*/
  call "IO0430" ("SS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
    call "IO0430" ("SN", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
      TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
      TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* key value*/
      TA1REC.TA1LOCAT[3] = "OP0BS14 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = "IO0430  "; /* i/o mod name*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* invoke syncpoint rollback*/
      try
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end /* call abend formatter*/
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
      XSPF4(); /* invoke master menu*/
      exit program;
    end
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
    TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0BS14 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0430  "; /* i/o mod name*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* invoke syncpoint rollback*/
    try
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end /* call abend formatter*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    XSPF4(); /* invoke master menu*/
    exit program;
  end



       /* check the total units on the bulk order*/

  OP0BW01.OP0BWBAF = "N"; /* set bulk ord availability flag*/

  if (OP1REC.OP1OTUNT > 0)
    OP0BW01.OP0BWBAF = "Y";
  end

  while (SQLCA.VAGen_SQLCODE == 0
   && OP0BW01.OP0BWBAF == "N")
    call "IO0430" ("SN", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      if (OP1REC.OP1OTUNT > 0)
        OP0BW01.OP0BWBAF = "Y";
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
        TA1REC.TA1TBLVU = "VORHDR01";
        TA1REC.TA1TBLKE = OP1REC.OP1KEY;
        TA1REC.TA1LOCAT[3] = "OP0BS14 ";
        TA1REC.TA1LOCAT[4] = "IO0430  ";
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        try
          call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        end /* abend routine*/
        COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear commarea*/
        XSPF4(); /* back to master menu*/
        exit program;
      end
    end
  end


  if (OP0BW01.OP0BWBAF == "Y") /* qty available on bulk*/
    OPWREC.OP1BLKID = OP1REC.OP1CUOID; /* save b/d order id*/
    OPWREC.XBDCD = OP1REC.XBDCD; /* save b/d code*/
  else
    converseLib.validationFailed(276); /* no available qty for draws*/
    set OP0BM001.OP0BMORD cursor, modified, bold;
    OPAREC.OPAERR = "Y";
  end



   /* ************************************************************/
end // end OP0BS14

// validate bulk order number
Function OP0BS15()


      /* *********************************************************/
      /* * this statement group validates the entered bulk order**/
      /* * id                                                   **/
      /* *********************************************************/



       /* check to see if the entered order number is a bulk ord*/


  if (OP1REC.XBDCD in XBDTBL.XBDCD
   && XBDTBL.XXXSTAT[sysVar.arrayIndex] == "A"
   && XBDTBL.XBDBKOFL[sysVar.arrayIndex] == "Y") /* ord is a bulk ord*/
     /* next sentence*/
  else
    converseLib.validationFailed(275); /* bulk order id is not valid*/
    set OP0BM001.OP0BMORD cursor, modified, bold;
    OPAREC.OPAERR = "Y";
    return;
  end


   /* don't allow draws against blank bulk orders yet  12/18/90*/


  if (OP1REC.XBDCD == "B" /* blank bulk*/
   || OP1REC.XBDCD == "F") /* finished bulk*/
    if (OPWREC.OPWSFLOW != "1")
                                   /* processing blank bulk draws available*/
      converseLib.validationFailed(619); /* through form flow order only*/
      set OP0BM001.OP0BMORD cursor, modified, bold;
      OPAREC.OPAERR = "Y";
      return;
    end
  end


       /* if stock is available for draws ?*/

  OP0BW01.OP0BWBAF = "N"; /* set bulk ord availability flag*/

  if (OP1REC.OP1OTUNT > 0) /* units available*/
    OP0BW01.OP0BWBAF = "Y";
  end


  if (OPWREC.OPWMULSO == "Y") /* multiple sub-orders*/
    while (SQLCA.VAGen_SQLCODE == 0
     && OP0BW01.OP0BWBAF == "N")
      call "IO0430" ("SN", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* get nxt sb-ordr on blk*/
      if (SQLCA.VAGen_SQLCODE == 0)
        if (OP1REC.OP1OTUNT > 0) /* units available*/
          OP0BW01.OP0BWBAF = "Y";
        end
      else
        if (SQLCA.VAGen_SQLCODE == 100)
           /* next sentence*/
        else
          TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
          TA1REC.TA1TBLVU = "VORHDR01";
          TA1REC.TA1TBLKE = OP1REC.OP1KEY;
          TA1REC.TA1LOCAT[3] = "OP0BS15";
          TA1REC.TA1LOCAT[4] = "IO0430 ";
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.rollback();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
          try
            call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
          end /* abend routine*/
          COMMAREA.CAUSERA = " "; /* clear commarea*/
          XSPF4(); /* back to master menu*/
          exit program;
        end
      end
    end
  end


  if (OP0BW01.OP0BWBAF == "Y") /* qty available on bulk*/
    OPWREC.XBDCD = XBDTBL.XBDXRFCD[sysVar.arrayIndex]; /* save b/d order code*/
    OPWREC.OP1BLKID = OP1REC.OP1CUOID; /* save bulk ord id*/
    OPWREC.OPWBNOID = OP0BM001.OP0BMSOR; /* save bulk sub order id*/
  else
    converseLib.validationFailed(276); /* no available qty for draws*/
    set OP0BM001.OP0BMORD cursor, modified, bold;
    OPAREC.OPAERR = "Y";
    return;
  end


       /* check to see if it is a customer customer company*/
       /* bulk or a set-aside bulk order*/

  if (XBDTBL.XBDSETFL[sysVar.arrayIndex] == "Y"
   || XBDTBL.XBDXRFCD[sysVar.arrayIndex] == "4") /* rebook bulk*/
    OP0BW01.OP0BWSET = "Y"; /* set-aside bulk ord*/
  else
    OP0BW01.OP0BWSET = "N"; /* cust company bulk ord*/
  end


   /* *************************************************************/
end // end OP0BS15

// Get brand code for user id
Function OP0BSBC()

   /* ----------------------------------------------------------*/
   /* Get the brand code for the user's logon.*/
   /* ----------------------------------------------------------*/
  KUYREC.XXXUSRID = COMMAREA.CAUSERID;
  call "IO0550" ("SA", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* Good*/
   || SQLCA.VAGen_SQLCODE == 100) /* Not found*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   ";
    TA1REC.TA1TBLVU = "VSVREP01";
    TA1REC.TA1TBLKE = KUYREC.XXXUSRID;
    TA1REC.TA1LOCAT[3] = "OP0BSBC ";
    TA1REC.TA1LOCAT[4] = "IO0550  ";
    try
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* Clear user commarea*/
    XSPF4(); /* Invoke master menu*/
    exit program; /* Quit if unable to invoke menu*/
  end

   /* -----------------------------------------------------------*/
    /* Display an error message if the service rep record*/
    /* cannot be used.*/
   /* -----------------------------------------------------------*/
  if (SQLCA.VAGen_SQLCODE == 100
   || KUYREC.XXXSTAT != "A")
    set OP0BM001.OP0BMORD cursor, modified, bold;
    converseLib.validationFailed(578); /* Unable validate brand, not found*/
    OPAREC.OPAERR = "Y"; /* Set error flag*/
  end
end // end OP0BSBC

Record OP0BW01 type basicRecord
  10 OP1TBREP OP1TBREP ; 
  10 OP0BWSET OP0BWSET ; 
  10 OP1BLKID OP1BLKID ; 
  10 OP0BWBAF OP0BWBAF ; 
  10 OP0BCHCD OP0BCHCD [3] ; 
    15 XCHCD XCHCD ; 
    15 XCHDESC XCHDESC ; 
  10 XCTCD XCTCD ; 
end // end OP0BW01

// credit reason code & desc
DataItem OP0BCHCD char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bulk ord availability flag
DataItem OP0BWBAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// set-aside bulk order flg
DataItem OP0BWSET char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

