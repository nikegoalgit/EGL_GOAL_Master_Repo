package op0n;
import av.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ko.common.*;
import ku.common.*;
import ob.common.*;
import oi.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=OP0N ****
// ;
// nike order entry - duplicate order screen
// 
// overview: this application displays the previous order
//           processed and all of its suborders, allows a
//           selection of any or all suborders to duplicate,
//           and performs all editing and set up work to
//           complete a duplicated order.  after setup work
//           is done, control will be transferred to accept
//           order, or product header applications.
// 
// 
// NOTE!!!!: This application currently uses TEMP STORAGE
//           for paging purposes (pf7/pf8).  All prior
//           occurances of xsops02 (standard abend routine)
//           have been changed to use OP0NSXS which now
//           purges temp storage first and then processes
//           standard abend routine commands.  Paging was
//           added when the sub-order limit of 10 changed
//           to 99. 8/21/90
// 
// date created: 6/9/86
//       author: bill klassen
// 
// maintenance history:
// 
//     when      who       what
//   -------- ---------- -----------------------------------
//   06/09/86 b klassen  original creation
//   10/01/86 tmai       bulk/draw orders project --
//   11/06/86 tmai       o/e on-line allocation
//   01/28/87 jvande     program issued commit in middle of
//                       a select set - s51 for opfrec.
//   03/18/87 tmai       changed program to allow any service
//                       rep to dup promo orders which have
//                       the universal owner group code
//   04/01/87 jvande     changed s52, missing subscript on map
//                       warehouse codes for each sub-ord.
//   04/08/87 jvande     change xol edit in s52. didn't hndle
//                       multiple userid rows. alwys used first
//   04/20/87 jvande     when duping bulk: 1. set orhdr num of
//                       draws to zero(s40), 2. set item tot
//                       draw qty to 0(s51). when dup setup new
//                       item setup time/date(s51).
//   04/21/87 ssayew     modified criteria for writing audit
//                       record; added order type, need date
//                       and warehouse to audit record ( s51,
//                       w01).
//   05/06/87  jvande    chng 010 so protect whs if xdscd didnt
//                       require a whs code.
//   07/17/87  jvande    changd s54 to exclude duping items
//                       with zero on order(bulks).
//   08/25/87  jvande    chngd s51 to put op3 noid in opf not
//                       op1 which is still zer in s51.
//   08/25/87  jvande    new order edits project, whs,ndt,ot.
//   09/17/87  tfox      added code to stmtgrp s40 to move 'n'
//   03/30/88  scass     if -911 occurs a post ta0020 is given
//                       and a message of explanation displays
//                       on op0n map. chg-op0ns50,op0ns54.
//   04/14/88  gwells    production deadline table -
//                         replaced xpdtbl with call to io2560
//                         dorder.vcutof01.  edit need date
//                         versus prod deadline via this module
//                         statement groups affected - s10, s13
//                         s14, s15, s50, s54 & spd.  for de-
//                         tailed changes, see production
//                         deadline enhancement request.  added
//                         opjrec and oplrec.
//    04/19/88  gwells   s51 - handling code was being checked
//                       three times using the same subscript.
//                       changed to use subscripts 1, 2 & 3
//                       when checking handling code.
//   05/09/88  scass     move key to display fields and specify
//                       abend code. op0ns54 - op0nw01
//   05/12/88  scass     added xsops02, took out test code
//                       abend code. op0ns54
//   05/13/88  obecke    s30: adjust logic to get terms rec for
//                       futures via kucrec.kucftrti(new field)
//   06/01/88  scass     protect need-date if cust order draw
//                       op0n010.
//   10/05/88  jjohns    created s55 and s56 to handle new
//                       item table in  op0nw01.
//                       changed s50 and s54 to use new item
//                       table. s51 now has a commit after
//                       each item is added.
//   10/12/88  jjohns    changed edit of booking beginning
//                       and ending dates in s20 to include
//                       the current date.
//   11/03/88  jwood     noncsp opt added on calls
//   11/21/88  obecke    issue warning msg #435 if both a
//                       pick prty code of 10 or 20 and a
//                       don't ship b4 date exist.  #75
//   12/05/88  obecke    took out the above.  users didn't
//                       like this for at once orders. added
//                       to op0j instead.  #75
//   12/28/88  obecke    add warning msg 365. if past prod
//                       deadline by 30 days, issue msg.  also
//                       set orig qty to zero if past 30 days.
//                       #80.  spd,spo,s10,s15,s51,w01,020.
//                       added jwoods request to set segmented
//                       tran id.  010.
//   01/25/89  obecke    check & decrement availability when
//                       duping entire order.  sa1,sa2,sa3,sa4,
//                       sa5,spd,s01,s54,w01,020, opprec. #112.
//                       added xoccd to opprec.  ie and s1
//                       order classes are to always decrement
//                       regardless of 30-day window.  #111.
//   02/09/89  gwells    switched 'post' and 'db2' in ta1func
//                       and ta1type for errdiag - sa4. set
//                       opprec empty in sa3 - sa3.  check
//                       return codes from db1000 - sa1.
//                       sa1 getting too long, created new
//                       sgrp sa6.
//   03/15/89  obecke    split s51 into s5a and s5b.  added
//                       s5b to do production audit reporting
//                       at size level. opurec new record.
//   03/21/89  obecke    add xobtbl. chg maps to show xobabrv.
//                       m001,m002,010,030.
//   05/01/89  mbarna    chg s15, s20 so warning msg 365 only
//                       displays once. added op0nw01.op0nwerr
//   05/10/89  jbecke    database changes:  s20, s40.
//   06/29/89  schase    chg init of prev cr stat cde to '00'
//                       in s40.
//   8-17-89   obecke    deleted line that clears spgm min
//                       disc pct.  keep for terms processing.
//                       s40.
//   08/24/89  ssteph    initialize credit fields when creating
//                       orders. s40.
//   09/01/89  ssteph    remove code that moves 'N' uncondi-
//                       tionally to traffic flag and 0 to
//                       invoice-as-of-date when duplicating
//                       an order. s40.
//   10/17/89  oricha    cole haan now requires a don't ship
//                       before date.  s10,s57.
//   11/17/89  gwells    delete initialization of op1shrdt -
//                       field deleted from database- s40.
//   12/05/89  tfox      added comp # logic to map,s20,s40,s10,
//                       010.
//   12/06/89  cgrice    cleanup of unnecessary read of kunrec
//                       in cust nbr edit.  s20, s60
//   01/17/90  oricha    database changes.  kufrec.kufwrind
//                       deleted.  s30.
//   01/31/90  mbarna    commented out dead code. s30.
//   03/06/90  cgrice    bug #296 - closed a cursor, fixed some
//                       error diags, and uncommented a commit
//                       to minimize -911 problems.
//                       changed - sa6,s23,s50,s51,s54,s56
//   03/26/90  mgatre    if customer is changed, blank out
//                       agency and rep.  s30
//   04/16/90  BWATSO    Bug 309 - Rewrote comp number logic.
//                       Affected areas: Added XAUTBL, KUCGRP
//                       and WFCO to OP0NW01, SC1, SC2, and
//                       SEC; changed S20.
//                       Setting TA1REC empty was removed from
//                       S14, S15, SA2, SPD, and S5B to keep
//                       from wiping out the program, map, and
//                       process names.  Setting of process
//                       names added to 020 and 030.
//   04/26/90  BWATSO    Bug #339 - copy date written and date
//                       received from the original order. Plug
//                       order entered date with current date.
//                       S40.
//   05/30/90  BWATSO    Brand code changes.  Changed SA3, S10,
//                       S20, and W01.  New SLE.
//   06/05/90  oricha    fix subscript error for 200 prod:
//                       s54. allow salesman sample orders to
//                       always dup order labels & inst:
//                       (sales office 07) s40.
//   06/06/90  BWATSO    Added more account classes to legal
//                       entity check - S20.
//   06/13/90  BWATSO    Fixed dup of labels and inst for promo
//                       orders - S30 and S40.
//   06/15/90  mgatre    Fixed warehouse code edit, eliminating
//                       MDT test - S10     bug #348
//   08/07/90  jwood     changed op0ns40 to use xcscd as a chr
//   08/10/90  mgatre    Eliminate warehouse code edit if
//                       direct ship - S10     bug #373
//   08/15/90  cgrice    Duping multiple sub-orders was not
//                       working because the first need date
//                       was being passed to availability for
//                       all selected sub-orders.  SA3
//   08/21/90  schase    changes made to add paging for pf7/
//                       pf8 using temp storage. Changed:
//                       OP0NM001, SA2, SC1, S05, S10, S13, S14
//                       S20, S23, S25, S40, S5B, S60, 010, 020
//                       030.  Added: SB0, SC0, SD0, SL0, SN0,
//                       SR0, SS0, SW0, SXS, S1P, S1R, S1W, S65
//                       W02, S70.
//   09/27/90  oricha    add iseg default to product rec. s50,
//                       s51,s58.
//   11/06/90  skott     database chgs xsdcd to pc2inseg,
//                       xsacd to xegcd.  sa3,s51
//   12/12/90  craine    reformat of spec code and package type
//                       for display/decrement availability.
//                       log #460. sa3.
//   12/19/90  TFOX      ADDED ONE LINE OF CODE TO S20 ZIPCODE
//                       EDIT. IF ZIP MOD OR MAP ZIP = 0 DO THE
//                       ZIP CODE EDIT. SEE LOG # 463
//   01/09/91  TFOX      removed all mdt logic from program to
//                       fix the problem with agency/rep not
//                       being blanked out. LOG # 505
//   01/10/91  schase    set the cursor on whse cd field and
//                       set it bright for error msg 126.
//                       s52, s53.
//   01/15/91  tfox      added new stmt grp s2a to edit special
//                       customer group. called from 020.
//   02/01/91  dflesh    added code to default cust min aloc %
//                       in s40.  log #436.
//   02/05/91  craine    replace KUAABLID with KUCBLAID. KUAREC
//                       removed. Chg'd s20, s25
//                       also removed kufrec - not used anymore
//   02/13/91  jloyer    DB CHANGES: Replace kunrec.kunalseq
//                       with kucrec.kucseqap or kucseqft. Repl
//                       kunrec.xaccd w/ kucrec.xaccd(1) or (2)
//                       Move op3rec.xqacd to opurec.xqacd.
//                       Init xchcd(1-3) with ' ' instead of 0.
//                       IMPACTS: S20, S40, S5B.
//   02/26/91  swatso    changed xchcd in s40 from ' ' to '00'
//   02/28/91  schase    added edit to dsnb date for not
//                       allowing dsnb date  21 days past the
//                       need date. also added determining the
//                       century date cc from ezedte. s57, 010.
//   03/01/91  schase    added code to exclude dsnb date edit
//                       for sales office 07,08,12, and 17
//                       above. s57
//   03/06/91  swatso    Added stmt grp s59 to exclude special
//                       cust groups MI,MB,12,BK,AA, & AF from
//                       dsnb edit. Modified s57 to call s58.
//   03/27/91  dharri    log # 445 - po # required - phase one
//                       replaced kunrec.kunporfl (cust level
//                       y/n flag) with kucrec.kucrec.ypocd (co
//                       mpany level two char code) in s20
//   03/27/91  schen     log # 530 - change to allow authorized
//                       users to change dsnb date even it is
//                       21 days past need date.
//   04/04/91  dmeier    log # 591 - reset op0nwpdo flag when
//                       resetting op0nwppd flag in op0ns54
//                       so that quantities get in op-orig-qty
//                       field when duped suborder before
//                       production deadline follows duped
//                       suborder after production deadline
//   04/15/91  tfox      menu of services - s51.
//   04/25/91  dflesh    log #484. chg in s20.  if spgm alw fl
//                       in xautbl is 'n' do not allow spgm for
//                       acct cls or acct type.  in s01, init
//                       kucrec empty.
//   04/25/91 bbake2     added edits for cust po #.  changes
//                       to sah, s20
//   05/10/91 bbake2     revised edits for cust po#.  changes
//                       to map 001, sah, saw, 010, 020, w/s
//                       w01 and table t01.
//   05/17/91 craine     allow NIL to duplicate 's1' orders
//                       only if the account class is '31'
//                       nike owned.  allow duplication of more
//                       than 200 products (up to 500 per sub.
//                       chg'd w01, s54, s20 added s2b
//   05/23/91 schen      log #554 - data base change
//                       changed the occurance of xsgcd from
//                       40 to 10 in s22, and changed kunrec.
//                       kuncrfl to kucrec.kucvndfl in s40.
//   05/28/91 craine     log# 647 - use the opwrec line item
//                       array for the first 200 products only.
//                       can't increase the occurs because
//                       there's not enough room in commarea.
//                       change in S54. array is used in om0k
//                       - product summary.
//   06/10/91 craine     db2 changes - sah, s30, saw, s40 -
//                       order header field renames - using
//                       yobcd1 until permenent change can be
//                       done. added temporary code to s40 to
//                       init op1pormf to ' '.
//   06/20/91 craine     added account class '32' to nil orders
//                       that can be duplicated. log #655
//                       change OP0NSB2
//   07/18/91 bbake2     changes for screened products.  sa3,
//                       sa4, sa6, sta, stb, stc, std, st1,
//                       st3, st5, st6, st7, st9, s54, w01.
//   10/08/91 dmeier     db changes - changed opurec.xxxpgmno
//                       to opurec.xxxpgmnb and populated
//                       opurec.xowcd (op0ns5b).
//    12/09/91 jjohn2    References to WPDT have been removed
//                       due to a change in availability that
//                       returns available quantities by need
//                       date with regard to the "lead time
//                       to screen". SA3, ST3, W01.
//    01/06/92 jwils1    added availability control table
//                       processing to get level ind. Level ind
//                       used to determine blank availability.
//    02/06/92 jwils1    added custom logo  chgs - w01,sa3,st3.
//                       to screen". SA3, ST3, W01.
//    02/24/92 jwils1    removed perform of op0ns-get-sea-bdt &
//                       move 0 instead of xsntbl.xsnbdt to
//                       access av4rec - op0ns-get-lev-ind.
//    03/02/92 rdavis    fix #743. chng to always edit dnsb and
//                       dnsa so compare of dates works cor-
//                       rectly s10,s57. Also fix setup of ws
//                       array to move map need date in need
//                       date save field, not dnsb date field.
//    03/04/92 jwils1    removed xsntbl from table and records
//                       list. use xprcd instead of wpdt when
//                       processing custom logo. sa3.
//    03/10/92 trober    db2 - table changes, changed length of
//                       op0nw01.kucgrp to match kucrec.
//    06/16/92 bbake2    log#813 - change timing for adjusting
//                       original quantity from 30 to 60 days,
//                       w01, s15, spd, spo, s51
//    08/04/92  bbake2   log#785 added comp edits 020
//    08/14/92  DHARRI   log#893 - CUSTOM LOGO CHANGE CALC NEED
//                       DATE FROM TODAY - 45 TO TODAY - 30.
//                       OP0NS-CALC-NEED-DT, SGA.
//    09/11/92  bbake2   log#903 - call ku1540 to get alloc
//                       seq.  s40, call-ku1540, w01.
//    10/09/92  bbake2  database changes, changed names on
//                      av4rec xsdcd -> pc2inseg
//                             xsacd -> xegcd
//                      get-lev-ind
//    02/26/93  bbake2  log#868 - airborne edits s-airborne,
//                      s10, w01, voppgm01, xsomw01, xs0m-
//                      chk-airborne.
//    05/01/93  dlegg   log#937 - NSG changes. Changes to
//                      screened product definition, custom
//                      logo processing. T-SHIRT LOGIC NOT
//                      BROUGHT UP TO DATE. sa3, calc-need-dt,
//                      s-get-lev-ind.
//    08/25/93  schase  CSP4.1 Conversion Testing - Added If
//                      check for size active flag prior to
//                      moving op3rec on-order quantities.
//                      Resolved SOC7 problem in stmt grp SA3.
//    12/17/93  gcalki  XCC table change.  add module to check
//                      for valid xcc codes. s20, check-status.
//    12/27/93  gcalki  log#980 - add special processing for b
//                      grade or close out screened prods. sa3.
//    04/01/94  gcalki  Log #1003 - Rename causera to
//                      ca-user-workarea-4k so it can hold
//                      opwrec which is no 3072 bytes. (ALL)
//                      Increased occurs for line items from
//                      200 to 900.
//    06/28/95  dliddl  Changes to incorporate Nike Canada into
//                      GOAL system.
//    09/14/95  dliddl  Modified OP0NS20 to move 'US' to the
//                      order header data dist code if spaces.
//    11/27/95  dliddl  Changed edit to allow US orders to be
//                      duplicated with a DS customer and DS
//                      orders to be duplicated with a US or DS
//                      customer.
//    11/27/95  dliddl  Skip legal entity checking for Canadian
//                      orders.
//    06/13/96  mvalbu  Changed to use regional data for US
//                      apparel.
//                      Changed OP0NSA2, OP0NS14, and OP0NS-
//                      SEL-SY2000.
//    06/02/97  eshanm  Statement moving PC2REC.PC2INSEG to
//                      OP3REC.PC2INSEG is removed because the
//                      PC2INSEG is to be duplicated for all
//                      cases , including DIRECT SHIP CD = '3',
//                      for Duplicate Header option.
//    08/27/97  jnaemu  added whse 27
//    09/04/97  jnaemu  allow direct ship for apparel to decre-
//                      ment availability.
//    10/28/97  satyam  Added edit in OP0NS40, before calling
//                      iomod IO0460 to check whether any rows
//                      exist with the same key values. If it
//                      exists then it skips inserting rows in
//                      dorder.voaddr01 table.
// y2kfix 11/28/97 pharwo year 2000 changes to OP0NS10, OP0NS20
//                      and OP0NSPO, OP0NS11, OP0NS15, OP0Ns21,
//                      OP0NS40, OP0NS5b, OP0NS57.
// 
// ocd  03/16/98 dsmit0 added dnsb edit for whse 51 orders in
//                      op0ns10.
//      06/03/98 jflor1 bypassed SY2000 for division codes
//                      '02' and '03' in OP0NSA2, OP0NS14.
// TT#4895 06/19/00 pvenka Code was introduced to make the
//                         error msg 1009 display,instead of
//                         099 when DNSA-DATE is less than
//                         current-date in the statement group
// TT#4895 06/20/00 rharat changes are made to OP0NS57 to disp
//                         error message 1008 if DNSB date is
//                         less than current date.
// *********************
Program OP0N type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AV4REC AV4REC; // record
  AVGREC AVGREC; // record
  AVHREC AVHREC; // record
  AVIREC AVIREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  KUPREC KUPREC; // record
  KUQREC KUQREC; // record
  KUSREC KUSREC; // record
  KUTREC KUTREC; // record
  OECREC OECREC; // record
  OP0NW01 OP0NW01; // record
  OP0NW02 OP0NW02; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  OP3REC OP3REC; // record
  OP4REC OP4REC; // record
  OP5REC OP5REC; // record
  OP7REC OP7REC; // record
  OP8REC OP8REC; // record
  OPAREC OPAREC; // record
  OPBREC OPBREC; // record
  OPFREC OPFREC; // record
  OPJREC OPJREC; // record
  OPLREC OPLREC; // record
  OPOREC OPOREC; // record
  OPPREC OPPREC; // record
  OPUREC OPUREC; // record
  OPWREC OPWREC; // record
  PC2REC PC2REC; // record
  SP1REC SP1REC; // record
  SP2REC SP2REC; // record
  SP4REC SP4REC; // record
  SQLCA SQLCA; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VCULVLPD VCULVLPD; // record
  VOPPGM01 VOPPGM01; // record
  WSY2000 WSY2000; // record
  XS0MW01 XS0MW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use OP0NT01 {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use XBDTBL {deleteAfterUse = yes}; // table
  use XCCTBL {deleteAfterUse = yes}; // table
  use XDSTBL {deleteAfterUse = yes}; // table
  use XNDTBL {deleteAfterUse = yes}; // table
  use XOBTBL {deleteAfterUse = yes}; // table
  use XOCTBL {deleteAfterUse = yes}; // table
  use XOLTBL {deleteAfterUse = yes}; // table
  use XOSTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YOSTBL {deleteAfterUse = yes}; // table
  use OP0NM.OP0NM001,  // forms
      OP0NM.OP0NM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OP0N010: OP0N010();
     /* ************************************************************/
    goto OP0N020; /* always go to converse dup order map*/
     /* ************************************************************/
    OP0N020: OP0N020();
     /* *********************start flow*****************************/


      /* if screen edit errors, converse dup order map*/

    if (OPAREC.OPAERR == "Y"        
     || converseVar.eventKey is pf7 /* page bkwd*/
     || converseVar.eventKey is pf8) /* page frwd*/
      goto OP0N020;
    end


      /* if customer warnings, go to customer warning process*/

    if (OPAREC.OPAERR == "C")
      goto OP0N030;
    end


      /* if menu option 2 (duplicate order, transfer to*/
      /* accept/reject order*/

    if (OPWREC.OPWFUNC == "2")
      COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
      COMMAREA.CACURRAP = "OP0J";
      transfer to program "OP0J" passing COMMAREA;
    end



      /* if option 3 (duplicate order header only),*/
      /* transfer to product header application*/

    if (OPWREC.OPWFUNC == "3")
      COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
      COMMAREA.CACURRAP = "OP0H";
      transfer to program "OP0H" passing COMMAREA;
    end


     /* **********************end flow******************************/
    OP0N030: OP0N030();
     /* *********************start flow*****************************/


       /* if invalid key pressed, redisplay map with message*/

    if (OPAREC.OPAERR == "Y")
      goto OP0N030;
    end


       /* if menu option 2 (duplicate order), transfer to*/
       /* accept/reject order*/

    if (OPWREC.OPWFUNC == "2")
      COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
      COMMAREA.CACURRAP = "OP0J";
      transfer to program "OP0J" passing COMMAREA;
    end


       /* if menu option 3 (duplicate header only), transfer*/
       /* to product header*/

    if (OPWREC.OPWFUNC == "3")
      COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
      COMMAREA.CACURRAP = "OP0H";
      transfer to program "OP0H" passing COMMAREA;
    end

     /* *********************end flow*****************************/
  end // end main
end // end OP0N

// set up and inquiry for dup ord
Function OP0N010()
   /* ************************************************************/

    /* this process examines the commarea, and performs inquiry*/
    /* processing based on its contents.*/


   /* ************************************************************/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  COMMAREA.CACURRAP = "OP0N";

       /* clear map and records*/

  OP0NS01(); /* clear map and records*/

       /* SAVE THE CURRENT DATE*/

  OPAREC.OPACYMD = VGVar.currentShortGregorianDate;
  if (OPAREC.OPACYY > 56)
    OPAREC.OPACCC = 19;
  else
    OPAREC.OPACCC = 20;
  end

       /* check entry security*/

  XSENTRY();


       /* clear temp storage*/

  OP0NS1P(); /* purge temp storage*/

   /* ****************************************************/
   /* *** set segmented trans id                      ****/
   /* ****************************************************/

  COMMAREA.CAEZSAP = sysVar.transactionID;
  COMMAREA.CAEZSG12 = "OP";
  COMMAREA.CAEZSG4 = "N";
  sysVar.transactionID = COMMAREA.CAEZSAP;

   /* *************************************************************/

    /* check order entry security*/

  XSOPS01();

    /* set po # warning flag on.  a value of 9 indicates*/
    /* warning message has not been displayed*/
  OP0NW01.OP0NWARN = 9;

  OP1REC.OP1GROUP = OPWREC.OP1GROUP;

   /* **********************************************************/
   /* DRAW ORDERS CANNOT BE DUPLICATED AT THIS TIME*/
   /* **********************************************************/
       /* check to see if it is a draw order*/
       /* if it is a draw order, read the bulk order and*/
       /* save the need date and dont-ship-after-date*/

  if (OP1REC.XBDCD in XBDTBL.XBDCD
   && XBDTBL.XXXSTAT[sysVar.arrayIndex] == "A"
   && XBDTBL.XBDRWOFL[sysVar.arrayIndex] == "Y") /* it is a draw order*/
    OP0NW01.OP0NWBDF = "D"; /* set bulk/draw flag*/
    OP0NS05(); /* get bulk ord need date*/
    OP1REC.OP1GROUP = OPWREC.OP1GROUP; /* overlay bulk ord op1rec*/
                                          /* ; with the right rec*/
  end


    /* get all order information to display*/
    /* op1rec.op1key is passed in*/

    /* The current op1rec will be the order duplicated.*/
    /* Select all the orders to load temp storage and read*/
      /* the first record.*/

  OP0NW01.OP0NWEOF = "N"; /* init eof flag*/

  OP0NSS0(); /* select all order to load in temp storage*/
  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(32); /* order number was not found*/
    OPAREC.OPAERR = "Y";
    exit stack;
  end

  OP0NSN0(); /* select next order*/
  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(32); /* order number was not found*/
    OPAREC.OPAERR = "Y";
    exit stack;
  end


    /* move op1rec data to the screen for display*/

  OP0NM001.OP1CUOID = OP1REC.OP1CUOID;
  OP0NM001.OP1CMPNB = OP1REC.OP1CMPNB;

    /* look up base order type abbreviation*/

  if (OP1REC.XOBCD in XOBTBL.XOBCD)
    OP0NM001.XOBABRV = XOBTBL.XOBABRV[sysVar.arrayIndex];
  else
    OP0NM001.XOBABRV = " ";
  end

    /* look up order type*/

  if (OP1REC.XOTCD in XOTTBL.XOTCD)
    OP0NW01.XOTFUTRF = XOTTBL.XOTFUTRF[sysVar.arrayIndex];
    OP0NW01.XOTDSAVL = XOTTBL.XOTDSAVL[sysVar.arrayIndex];
  else
    OP0NW01.XOTFUTRF = "N";
    OP0NW01.XOTDSAVL = " ";
  end

    /* look up order class*/

  if (OP1REC.XOCCD in XOCTBL.XOCCD)
    OP0NM001.XOCABRV = XOCTBL.XOCABRV[sysVar.arrayIndex];
  else
    OP0NM001.XOCABRV = " ";
  end

  OP0NM001.SP1ID = OP1REC.SP1ID;

  OP0NM001.KUCCOID = OP1REC.KUCCOID;

  OP0NM001.KUMSTRID = OP1REC.KUMSTRID;

  OP0NM001.XNXCD = OP1REC.XNXCD;

  OP0NM001.OP1CUPO = OP1REC.OP1CUPO;

  if (OPWREC.OPWMULSO == "N")
    OP0NM001.OP0NMSEL[1] = "S";
  end

  OP0NW01.XXXZIP = OP0NM001.XXXZIP; /* hold zip ssj(3/7/87)*/

     /* Walk through all orders and load temp storage.*/

  while (OP0NW01.OP0NWEOF == "N")
    OP0NSL0(); /* load temp storage*/
  end

  OP0NW01.OP0NWF1P = 1; /* set page number to 1*/

  OP0NSC0(); /* close orders set*/

  OP0NM001.OP0NMF1P = OP0NW01.OP0NWF1P; /* current map page number*/

  OP0NM001.OP0NMF1M = OP0NW01.OP0NWF1M; /* max map page number*/

  OP0NSR0(); /* read temp storage and load map*/


    /* *****************************************************/
    /* * hold  original company and store(ssj 3-13-86)*/

  OP0NW01.OP0NWOCO = OP0NM001.KUCCOID; /* original cust*/
  OP0NW01.OP0NWOST = OP0NM001.KUMSTRID; /* original store*/
  OP0NW01.OP1CUPO = OP0NM001.OP1CUPO; /* purchase order*/
  OP0NW01.OP1CMPNB = OP0NM001.OP1CMPNB; /* comp number*/
  OP0NW01.OP0NWDS = "N"; /* customer change flag*/
  OPASUB = 1;
   /* save dont ship before and dont ship after dates*/
   /* and warehouses*/
  while (OPASUB < 11)
        /* save dsafter date*/
    OP0NW01.OP0NWSAD[OPASUB] = OP0NM001.OP1DSADT[OPASUB];
        /* save dsbefore date*/
    OP0NW01.OP0NWSBD[OPASUB] = OP0NM001.OP1DSBDT[OPASUB];
        /* save need date*/
    OP0NW01.OP0NWSND[OPASUB] = OP0NM001.OP1CUNDT[OPASUB];
       /* save warehouse*/
    OP0NW01.OP0NWSWH[OPASUB] = OP0NM001.XWHCD[OPASUB];
    OPASUB = OPASUB + 1;
  end


   /* ************************************************************/
end // end OP0N010

// converse duplicate order map
Function OP0N020()

  TA1REC.TA1LOCAT[1] = "OP0N020";

   /* ***********************************************************/
  OP0NM001.OPMDT = VGVar.currentShortGregorianDate;
  OP0NM001.OPMRVN = "03"; /* o/e on-line allocation*/
  OPAREC.OPAERR = "N"; /* reset error flag*/

   /* ***********************************************************/
  converse OP0NM001 ;
   /* ***********************************************************/
  OP0NM001.OP0NMSG = " ";

    /* check for po # warning.  message may have changed.*/
    /* a value of 9 indicates message has not been displayed.*/
  if (OP0NM001.KUCCOID is modified
   || OP0NM001.OP1CUPO is modified)
    OP0NW01.OP0NWARN = 9;
  end

  if (converseVar.eventKey is enter)
    /* next sentence*/
  else
    if (converseVar.eventKey is pf3)
      OP0NS1P(); /* purge temp storage*/
      COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
      COMMAREA.CACURRAP = "OP0B";
      transfer to program "OP0B" passing COMMAREA;
    else
      if (converseVar.eventKey is pf7) /* page backward*/
        OP0NS65(); /* edit page backward*/
        if (OPAREC.OPAERR == "N") /* no errors*/
          OP0NSR0(); /* read/load temp storage*/
        end
        exit stack;
      else
        if (converseVar.eventKey is pf8) /* page forward*/
          OP0NS65(); /* edit page forward*/
          if (OPAREC.OPAERR == "N") /* no errors*/
            OP0NSR0(); /* read/load temp storage*/
          end
          exit stack;
        else
          converseLib.validationFailed(8);
          OPAREC.OPAERR = "Y"; /* reset error flag*/
          exit stack;
        end
      end
    end
  end

      /* edit sales office special customer group*/

  OP0NS2A();

  if (OPAREC.OPAERR == "Y")
    exit stack;
  end
     /* perform syntax edits*/

  OP0NS10();

  if (OPAREC.OPAERR == "Y")
    exit stack;
  end


   /* ***********************************************************/
   /* * set a flag if the drop ship has changed from the order **/
   /* *      being duplicated    -  ssj(3-2-87)                **/
   /* ***********************************************************/


  if (OP0NM001.KUCCOID != OP0NW01.OP0NWOCO
   || OP0NM001.KUMSTRID != OP0NW01.OP0NWOST)
    OP0NW01.OP0NWDS = "Y"; /* drop ship change flag*/
  end


   /* ***********************************************************/
     /* perform database edits (customer and sales program)*/


  OP0NS20();
  if (OPAREC.OPAERR == "Y")
    exit stack;
  end



     /* if customer fields have changed,*/
     /* set up customer warning messages*/

  if (OP0NM001.KUCCOID != OP0NW01.OP0NWOCO
   || OP0NM001.KUMSTRID != OP0NW01.OP0NWOST
   || OP0NM001.XNXCD != OP0NW01.XNXCD
   || OP0NM001.XXXZIP != OP0NW01.XXXZIP)
    OP0NS30();
  end

   /* call op0o comp edits routine*/

  if (OPAREC.OPAERR != "Y") /* no errors*/
    set OPOREC empty; /* initialize record*/
    if (OP0NM001.OP1CMPNB == 0) /* no comp co id*/
      OPOREC.KUCCOID = OP0NM001.KUCCOID; /* /cu-co-id*/
    else
      OPOREC.KUCCOID = OP0NM001.OP1CMPNB; /* comp-co-id*/
    end
    OPOREC.XXXUSRID = COMMAREA.CAUSERID; /* user id*/

    call "OP0O" (OPOREC) {isNoRefresh = yes}; /* call appl op0o comp edits*/

    if (OPOREC.OPO-RETURN-CD == 00) /* user has authority*/
       /* next sentence*/
    else
      if (OPOREC.OPO-RETURN-CD == 01) /* user has authority*/
        /* next sentence*/
      else
        if (OP0NM001.OP1CMPNB == 0) /* no comp co id*/
          set OP0NM001.KUCCOID cursor, modified, bold; /* highlight error*/
        else
          set OP0NM001.OP1CMPNB cursor, modified, bold; /* highlight error*/
        end
        if (OPOREC.OPO-RETURN-CD == 02) /* user does not have authority*/
          OPAREC.OPAERR = "Y"; /* set error to true*/
          converseLib.validationFailed(573); /* restricted acct nbr/acct class*/
          exit stack;
        else
          if (OPOREC.OPO-RETURN-CD == 03) /* acct cls cd not found in xautbl*/
            OPAREC.OPAERR = "Y"; /* set error to true*/
            converseLib.validationFailed(574); /* acct cls cd not found in xautbl*/
            exit stack;
          else
            if (OPOREC.OPO-RETURN-CD == 04)
                                   /* compnay id not found in vcmpny*/
              OPAREC.OPAERR = "Y"; /* set error to true*/
              converseLib.validationFailed(767); /* acct cls cd not found in xautbl*/
              exit stack;
            else
              XSPF4(); /* xfer to menu abend in io mod*/
                                   /* application op0o*/
              exit program; /* xfer to menu failure*/
            end
          end
        end
      end
    end
  end

    /* see if po warning message is required*/

  if (OP0NW01.OP0NWARN == 0) /* warning has been displayed*/
      /* next sentence*/
  else
    OP0NSAW();
    if (OP0NW01.OP0NWARN != 0) /* there is a warning*/
      OPAREC.OPAERR = "Y"; /* prevent update*/
      OP0NM001.OP0NMSG = OP0NT01.OP0NTMSG[OP0NWARN];
      OP0NW01.OP0NWARN = 0; /* turn off warning*/
      exit stack; /* skip updates until warning is*/
                                   /* displayed*/
    end
  end

     /* set up order header*/

  OP0NS40();



     /* set up product if option 2 (duplicate entire order)*/

  if (OPWREC.OPWFUNC == "2"
   && OPAREC.OPAERR != "Y") /* availability all ok*/
    OP0NSA1(); /* check availability*/
    if (OPAREC.OPAERR != "Y")
      OP0NS50(); /* write item recs*/
    end
  end


  if (OPWREC.OPWFUNC == "2"
   || OPWREC.OPWFUNC == "3")
    OP0NS1P(); /* purge temp storage*/
  end

   /* ***********************************************************/
                       /* end of process*/
   /* ***********************************************************/
end // end OP0N020

// converse customer error map
Function OP0N030()
   /* ****************start of before process********************/

  TA1REC.TA1LOCAT[1] = "OP0N030";

  OP0NM002.OPMDT = VGVar.currentShortGregorianDate;
  OP0NM002.OPMRVN = "03"; /* o/e on-line allocation*/
  OPAREC.OPAERR = "N";
  OP0NM002.OP1CUOID = OP0NM001.OP1CUOID;
  OP0NM002.XOBABRV = OP0NM001.XOBABRV;
  OP0NM002.XOCABRV = OP0NM001.XOCABRV;
  OP0NM002.SP1ID = OP0NM001.SP1ID;
  OP0NM002.KUCCOID = OP0NM001.KUCCOID;
  OP0NM002.KUMSTRID = OP0NM001.KUMSTRID;
  OP0NM002.XNXCD = OP0NM001.XNXCD;
  OP0NM002.XXXZIP = OP0NM001.XXXZIP;
  OP0NM002.OP1CUPO = OP0NM001.OP1CUPO;

   /* ***************end of before process***********************/
  converse OP0NM002 ;
   /* ****************start of after process********************/


  if (converseVar.eventKey is enter)
    /* next sentence*/
  else
    if (converseVar.eventKey is pf3)
      OP1REC.OP1KEY = OP0NW01.OP0NWSVK;
      call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        OP0NS1P(); /* purge temp storage*/
        OPWREC.OP1GROUP = OP1REC.OP1GROUP; /* restore opwrec!!!*/
        COMMAREA.CA-USER-WORKAREA-4K = OPWREC.OPWSGRP;
                                                     /* restore commarea!!!*/
        COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
        COMMAREA.CACURRAP = "OP0N";
        transfer to program "OP0N" passing COMMAREA; /* start all over again!!!*/
      else
        TA1REC.TA1DBASE = "DORDER"; /* database used*/
        TA1REC.TA1TBLVU = "VORHDR01"; /* view used*/
        TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* record key used*/
        TA1REC.TA1LOCAT[3] = "OP0N030"; /* statement group used*/
        TA1REC.TA1LOCAT[4] = "IO0430"; /* iomod used*/
        OP0NSXS();
                                   /* error handling stmt group*/
      end
    else
      converseLib.validationFailed(8);
      OPAREC.OPAERR = "Y";
      exit stack;
    end
  end


  if (OPWREC.OPWFUNC == "2"
   || OPWREC.OPWFUNC == "3")
    OP0NS1P(); /* purge temp storage*/
  end

   /* ***********************************************************/
                       /* end of process*/
   /* ***********************************************************/
end // end OP0N030

// edit for trnsmted airborne ord
Function OP0NS-AIRBORNE()
    /* this edit is to determine if an airborne order is being added,*/
     /* and whether or not the airborne transmission for the need date*/
     /* has already been done.*/

     /* first we have to get the last airborne transmission date*/

  if (OP0NW01.OP0NW-VOPPGM-READ != "Y")
    VOPPGM01.XXX-PGM-NBR = "OP1920";
    call "IO6600" ("S ", SQLCA, VOPPGM01) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
      OP0NW01.OP0NW-VOPPGM-READ = "Y";
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VOPPGM01";
      TA1REC.TA1LOC = "OP0NS-AIRBORNE";
      TA1REC.TA1LOCAT[4] = "IO6600";
      TA1REC.TA1TBLKE = "OP1920";
      XSOPS02();
    end
  end

   /* now perform the airbore checkint stmtgrp.  if need date is on or*/
    /* before the last transmission date, then we have to put out an error*/
    /* to force a need date change*/

  XS0MW01.XS0MWDIV = OP1REC.XDVCD;
  XS0MW01.XS0MWORT = OP1REC.XOTCD;
  XS0MW01.XS0MWDIR = OP0NM001.XDSCD[OPASUB];
  XS0MW01.XS0MWCUS = OP0NM001.KUCCOID;
  XS0MW01.XS0MWGPC = OP1REC.XGPCD;
  XS0MW01.XS0MWNDT = OP0NW01.OP0NWNDT;

  XS0MS-CHK-AIRBORNE();

  if (XS0MW01.XS0MWABF == "Y") /* changes make a transmitted*/
    OPAREC.OPAERR = "Y"; /* airborne order*/
    XS0MW01.XS0MWABF = "N"; /* reset airborne flag*/
    converseLib.validationFailed(792); /* updates not allowed*/
    set OP0NM001.OP1CUNDT[OPASUB] cursor, bold;
  end
end // end OP0NS-AIRBORNE

// blank or finished avail custom
Function OP0NS-CALC-NEED-DT()
   /* if the product is custom logo the need date must be adjusted by*/
    /* -30 days and is stored in op0nwpdt. also the blank avail flag*/
    /* must be set to yes.*/


  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2DYAOD = -30;
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = OPAREC.OPAWDT;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD != 0) /* this should never happen*/
    OPAREC.OPAERR = "Y"; /* date not valid*/
    converseLib.validationFailed(13);
    set OP0NM001.OP1CUNDT[OPASUB] cursor, bold;
    return;
  end

  if (TA2REC.TA2GRGGN > OPAREC.OPACDT) /* need date more than 30*/
                                  /* days in the future*/
                                  /* so we can use blank*/
                                  /* availability*/
    OP0NW01.OP0NWBAV = "Y"; /* and there is enough lead time*/
  else
    OPAREC.OPAERR = "Y"; /* need date not 30 days out*/
    converseLib.validationFailed(741);
    set OP0NM001.OP1CUNDT[OPASUB] cursor, bold;
    return;
  end

end // end OP0NS-CALC-NEED-DT

// call ku1540 for alloc seq
Function OP0NS-CALL-KU1540()
  set VCULVLPD empty;
  VCULVLPD.KUCCOID = OP0NM001.KUCCOID;
  VCULVLPD.KUMSTRID = OP0NM001.KUMSTRID;
  VCULVLPD.XNXCD = OP0NM001.XNXCD;
  VCULVLPD.XGPCD = OP1REC.XGPCD;

  call "KU1540" (VCULVLPD) {isNoRefresh = yes, isExternal = yes};

  if (VCULVLPD.XXX-SQLCODE == 0)
    if (VCULVLPD.OP1ALSEQ == -1 /* no allocation sequence returned*/
     || VCULVLPD.XACCD == "**") /* no assignment control returned*/
      converseLib.validationFailed(779); /* this should never happend*/
      OPAREC.OPAERR = "Y";
    end
  else
    if (VCULVLPD.XXX-SQLCODE == 100)
      converseLib.validationFailed(779); /* this is basically a data integrity*/
      OPAREC.OPAERR = "Y"; /* error*/
    else
      TA1REC.TA1TYPE = "APPL"; /* abend type*/
      TA1REC.TA1FUNC = "RETN"; /* abend func*/
      TA1REC.TA1PGMAP = "OP0N";
      TA1REC.TA1MAP = "OP0NM001";
      TA1REC.TA1DBASE = "DCUST   ";
      TA1REC.TA1TBLVU = "VCUGRP01";
      TA1REC.TA1LOC = "OP0NS-CALL-KU1540";
      OP0NW01.OP0NW-ERR-LIT1 = "SQL ERROR - CODE ";
      OP0NW01.OP0NW-ERR-LIT2 = " TYPE ";
      OP0NW01.OP0NW-ERR-LIT3 = " TABLE ";
      OP0NW01.OP0NW-ERR-CODE = VCULVLPD.XXX-SQLCODE * -1;
      OP0NW01.OP0NW-ERR-SIGN = "-";
      OP0NW01.OP0NW-ERR-TYPE = VCULVLPD.XXX-SQLTYPE;
      OP0NW01.OP0NW-ERR-NAME = VCULVLPD.XXX-SQLNAME;
      OP0NW01.OP0NW-ERR-VIEW = VCULVLPD.XXX-SQLVIEW;
      OP0NW01.OP0NW-ERR-LIT4 = "KEY IS ";
      OP0NW01.OP0NW-ERR-CUST = OP0NM001.KUCCOID;
      OP0NW01.OP0NW-ERR-STOR = OP0NM001.KUMSTRID;
      OP0NW01.OP0NW-ERR-DEPT = OP0NM001.XNXCD;
      OP0NW01.OP0NW-ERR-GPC = OP1REC.XGPCD;
      TAEREC.TAEDESC1 = OP0NW01.OP0NW-CUSTERR1;
      TAEREC.TAEDESC2 = OP0NW01.OP0NW-CUSTERR2;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* synpoint rollback*/
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* abend module*/
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
      XSPF4(); /* master menu*/
      exit program; /* master menu failure*/
    end
  end
end // end OP0NS-CALL-KU1540

// validate credit status code
Function OP0NS-CHECK-CREDIT()

     /* *** check credit status code ****/

  OP0NW-XCC-STAT-FOUND = "N"; /* Init valid customer*/

  OP0NW-XCCIDX = 1; /* Reset Subscript 1*/

  while (XCCTBL.XCCCD[OP0NW-XCCIDX] != "99" /* until end of XCCTBL*/
   && OP0NW-XCC-STAT-FOUND != "Y") /* or row found*/

    if (XCCTBL.XCCCD[OP0NW-XCCIDX] == KUCREC.XCCCD /* xcc code found*/
     && XCCTBL.XXXSTAT[OP0NW-XCCIDX] == "A"        /* code is active*/
     && XCCTBL.XCCENTFL[OP0NW-XCCIDX] == "Y")      /* flag is yes*/
      OP0NW-XCC-STAT-FOUND = "Y"; /* set found to 'y'*/
    end

    OP0NW-XCCIDX = OP0NW-XCCIDX + 1; /* Increment subscript 1*/
  end

end // end OP0NS-CHECK-CREDIT

Function OP0NS-GET-LEV-IND()

   /* **************************************************/
   /* availability control processing for t-shirts*/

   /* note: av4rec is davail.vavctl01*/

   /*  */
      /* if blank availability flag = y and whse = 51 and gpc = 3*/
      /* continue*/
      /* else*/
      /* ezertn to previous process*/

   /* build the availability ctnl key*/

   /* read the availability cntl table*/
      /* if an availability cntl record is found or eof*/
      /* continue*/
      /* else*/
      /* format ta1rec info, call ta0020, goback to main menu*/

   /* if an availability cntl record is found*/
      /* check level indicator*/
      /* if level ind = 4*/
      /* set message to product not subject to blank avail*/
      /* set blank availability flag to no*/
   /* ***********************************************************/

  if (OP0NW01.OP0NWBAV == "Y" /* blank availability flag must be y*/
   && OP3REC.XGPCD == "03")   /* gpc must be 03 - apprl*/
    if (OP0NM001.XWHCD[OPASUB] == "51" /* Memphis aprl whse*/
     || OP0NM001.XWHCD[OPASUB] == "25" /* NSG aprl whse*/
     || OP0NM001.XWHCD[OPASUB] == "27" /* NSG aprl whse*/
    )                                  /* next sentence*/
    else
      return; /* bypass avail. cntl level ind*/
    end /* processing*/
  else /**/
    return;
  end

  set AV4REC empty; /* ; initialize avail cntl rec*/

  AV4REC.XWHCD = OP0NM001.XWHCD[OPASUB]; /* build hdr rec key*/
  AV4REC.XGPCD = OP3REC.XGPCD;
  AV4REC.SY1STNBR = OP3REC.SY1STNBR;
  AV4REC.SY2CLRID = OP3REC.SY2CLRID;
  AV4REC.XDMCD = OP3REC.XDMCD;
  AV4REC.XQACD = OP3REC.XQACD;
  AV4REC.XOWCD = OP3REC.XOWCD;
  AV4REC.PC2INSEG = OP3REC.PC2INSEG;
  AV4REC.XEGCD = "000";
  AV4REC.XPGCD = OP3REC.XPGCD;
  AV4REC.XUMCD = OP3REC.XUMCD;
  AV4REC.AV4PRDBD = 0;

  set SQLCA empty;
  call "IO2300" ("S ", SQLCA, AV4REC) {isNoRefresh = yes, isExternal = yes}; /* avail cntl record*/

  if (SQLCA.VAGen_SQLCODE == +0 /* good return*/
   || SQLCA.VAGen_SQLCODE == +100) /* eof cond*/
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "OP0NS-GET-LEV-IND";
    TA1REC.TA1LOCAT[3] = "IO2300  ";
    TA1REC.TA1LOCAT[4] = AV4REC.AV4KEY;
    TA1REC.TA1MAP = "OP0NM001";
    TA1REC.TA1DBASE = "DAVAIL  ";
    TA1REC.TA1TBLVU = "VAVCTL01";
    TA1REC.TA1TBLKE = AV4REC.AV4KEY;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4(); /* go back to main menu*/
  end

  if (SQLCA.VAGen_SQLCODE == +0 /* good return*/
   && AV4CNTID == "4")          /* level ind = to 4*/
    OP0NW01.OP0NWBAV = "N"; /* move no to blank availability flag*/
  end

end // end OP0NS-GET-LEV-IND

// select dprod.vsyreg01
Function OP0NS-SEL-SY2000()

   /* CANADA 06/28/95*/

     /* get the product/region record*/

  set SQLCA empty;
  WSY2000.XGP-GPC-CD = SYCREC.XGPCD;
  WSY2000.SY-STY-NBR = SYCREC.SY1STNBR;
  WSY2000.SY-COLR-CD-ID = SYCREC.SY2CLRID;
  WSY2000.XDM-DIM-CD = SYCREC.XDMCD;
  WSY2000.WSY2000-OPTION-CODE = "S ";
  WSY2000.WSY2000-SUB-OPTION-CODE = "O";

  call "SY2000" (WSY2000) {isNoRefresh = yes, isExternal = yes};

  if (WSY2000.WSY2000-RETURN-CODE == 0)
    OP0NW01.OP0NW-WSY2000-FND-FLAG = "Y";
  else
    if (WSY2000.WSY2000-RETURN-CODE == 98) /* database is busy*/
      OP0NW01.OP0NW-WSY2000-FND-FLAG = "N";
    else
      if (WSY2000.WSY2000-RETURN-CODE == 02) /* style/color not found*/
        OP0NW01.OP0NW-WSY2000-FND-FLAG = "N";
      else
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "OP0N";
        TA1REC.TA1LOC = "OP0NS-SEL-SY2000";
        OP0NW01.OP0NW-WSY2000-GPC-CD = SYCREC.XGPCD;
        OP0NW01.OP0NW-WSY2000-STY-NBR = SYCREC.SY1STNBR;
        OP0NW01.OP0NW-WSY2000-COLR-CD = SYCREC.SY2CLRID;
        OP0NW01.OP0NW-WSY2000-DIM-CD = SYCREC.XDMCD;
        OP0NW01.OP0NW-WSY2000-PROD-REG-CD = WSY2000.XDR-PROD-REG-CD;
        OP0NW01.OP0NW-WSY2000-RETURN-CD = WSY2000.WSY2000-RETURN-CODE;
        TAEREC.TAEDESC1 = OP0NW-WSY2000-POST-1;
        TAEREC.TAEDESC2 = "RETURN FROM CALL TO SY2000 - BAD RETURN CODE";
        TA1REC.TA1DBASE = "DPROD";
        TA1REC.TA1TBLVU = "SYREG02";
        TA1REC.TA1MAP = "OP0NM001";
        try
          call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
        end
        COMMAREA.CA-USER-WORKAREA-4K = " "; /* on error - clear ws*/
      end
    end
  end
end // end OP0NS-SEL-SY2000

// clear map and records
Function OP0NS01()


       /* *******************************************************/
       /* * this statement group clears the screen and the     **/
       /* * working storage records                            **/
       /* *******************************************************/


  set OP0NM001 initial;


       /* set working storage records empty*/

  set OPWREC empty;
  set OPAREC empty;
  set OP0NW01 empty;
  set OPPREC empty;
  set KUCREC empty;


   /* ************************************************************/
end // end OP0NS01

// save bulk order need date
Function OP0NS05()



       /* ******************************************************/
       /* * this statement group reads the bulk order to get  **/
       /* * the need date of the first active sub order which **/
       /* * has available quantities for draws      10/01/86  **/
       /* ******************************************************/


      /* issue select set to get need date on bulk order*/

  OPAREC.OPAORDN = OPWREC.OP1BLKID; /* load ws for partition*/
  OP1REC.OP1PARTN = OPAREC.OP1PARTN; /* load key - partition*/
  OP1REC.OP1CUOID = OPWREC.OP1BLKID; /* load key - order number*/
  OP1REC.OP1NORID = 0; /* load key - sub order*/
  call "IO0430" ("SS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
    call "IO0430" ("SN", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
      TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
      TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* key value*/
      TA1REC.TA1LOCAT[3] = "OP0NS05 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = "IO0430  "; /* i/o mod name*/
      OP0NSXS(); /* abend routine*/
    end
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
    TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0CSNT "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0430  "; /* i/o mod name*/
    OP0NSXS(); /* abend routine*/
  end


       /* save bulk order need date and dont-ship-after-date*/

  OP0NW01.OP0NWBNT = OP1REC.OP1CUNDT; /* save bulk ord need date*/
  OP0NW01.OP0NWDSA = OP1REC.OP1DSADT; /* save bulk ord d-s-a-dt*/


      /* check available quantities on the bulk order*/

  OP0NW01.OP0NWABF = "N"; /* set active bulk order flag*/

  if (OP1REC.OP1OTUNT > 0)
    OP0NW01.OP0NWABF = "Y"; /* set good bulk order flag*/
  end


      /* if the first sub-order on the bulk order was*/
      /* cancelled or op1otunt = 0, find the first sub-ord*/
      /* which has available quantities*/

  while (SQLCA.VAGen_SQLCODE == 0
   && OP0NW01.OP0NWABF == "N")
    call "IO0430" ("SN", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
      if (OP1REC.OP1OTUNT > 0)
        OP0NW01.OP0NWABF = "Y"; /* set good bulk order flag*/
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
         /* next sentence*/
      else
        TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
        TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
        TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* key value*/
        TA1REC.TA1LOCAT[3] = "OP0NS05 "; /* statement group*/
        TA1REC.TA1LOCAT[4] = "IO0430  "; /* i/o mod name*/
        OP0NSXS(); /* abend routine*/
      end
    end
  end
  call "IO0430" ("CS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};


      /* if the bulk order with available quantities was found,*/
      /* ( got to be),*/
      /* move need date and dont-ship-after-date to the working*/
      /* storage again to overlay the previously saved dates.*/

  if (OP0NW01.OP0NWABF == "Y")
    OP0NW01.OP0NWBNT = OP1REC.OP1CUNDT; /* save bulk ord need date*/
    OP0NW01.OP0NWDSA = OP1REC.OP1DSADT; /* save bulk ord d-s-a-dt*/
  end


  if (OP0NW01.OP0NWDSA == 0) /* no dont-ship-after-dt*/
    OP0NW01.OP0NWDSA = 99999999;
  end



   /* ************************************************************/
end // end OP0NS05

// syntax edits
Function OP0NS10()

   /* ************************************************************/

    /* perform syntax edits on duplicate order screen*/

   /* ************************************************************/


  OPAREC.OPASUB = 10; /* bottoms up edit of select fields*/
  OPASUB1 = 0; /* initialize - 'first' selected line*/
  OPASUB2 = 0; /* initialize - count lines selected*/
  converseLib.validationFailed(0);
  while (OPASUB > 0)
    if (OP0NM001.OP0NMSEL[OPASUB] == "S")
      move OPASUB to OPASUB1 withV60Compat; /* this marks the first selected line*/
                                   /* (dfwi)*/
      OPASUB2 = OPASUB2 + 1;
      set OP0NM001.OP0NMSEL[OPASUB] initialAttributes;
    else
      if (OP0NM001.OP0NMSEL[OPASUB] == " ")
        set OP0NM001.OP0NMSEL[OPASUB] initialAttributes;
      else
        set OP0NM001.OP0NMSEL[OPASUB] cursor, bold;
        converseLib.validationFailed(7);
        OPAREC.OPAERR = "Y";
      end
    end
    OPASUB = OPASUB - 1;
  end

  if (OPASUB1 == 0) /* no selection made*/
    if (OP0NW01.OP0NWF1P != OP0NM001.OP0NMF1P) /* if page # changed*/
      /* next sentence*/
    else
      converseLib.validationFailed(221); /* no orders selected*/
      set OP0NM001.OP0NMSEL[1] cursor, bold;
      OPAREC.OPAERR = "Y";
    end
  end

  if (OPASUB2 > 1 /* more than one selected*/
   && OPWREC.OPWFUNC == 3) /* dup header only*/
    converseLib.validationFailed(222);
    set OP0NM001.OP0NMSEL[OPASUB1] cursor, bold;
    OPAREC.OPAERR = "Y";
  end

  if (OPAREC.OPAERR == "Y")
    exit stack;
  end



  OPASUB = 10; /* bottoms up edit of detail lines*/
  while (OPASUB > 0)
    if (OP0NM001.OP0NMSEL[OPASUB] == "S") /* only edit selected lines*/

      if (OP0NM001.OP1DSADT[OPASUB] == "MMDDYY"
       || OP0NM001.OP1DSADT[OPASUB] == " "
       || OP0NM001.OP1DSADT[OPASUB] == "000000")
        OP1REC.OP1DSADT = 0;
        set OP0NM001.OP1DSADT[OPASUB] initialAttributes;
      else
        /* ------------------  Y2K IN BEGIN  --------------------*/
        /*  */
        set TA2REC empty; /* reset passing record*/
        /*  */
        /* -------------------  Y2K IN END  ---------------------*/
        TA2REC.TA2RTNCD = 0;
        TA2REC.TA2DTOPT = "GREGGREG";
        TA2REC.TA2GRTYP = "A";
        TA2REC.TA2GRGA = OP0NM001.OP1DSADT[OPASUB];
        call "TA0040" (TA2REC) {isExternal = yes};
        if (TA2REC.TA2RTNCD > 0)
          OP1REC.OP1DSADT = 0;
          set OP0NM001.OP1DSADT[OPASUB] cursor, bold;
          converseLib.validationFailed(70);
          OPAREC.OPAERR = "Y";
        else
          /* -----------------------  Y2K OUT BEGIN  -------------------*/
          /*  */
          /* MOVE OP0NM001.OP1DSADT(OPASUB) TO OPAREC.OPAFDT;*/
          /* MOVE OPAFYY TO OPAWYY;*/
          /* MOVE OPAFMM TO OPAWMM;*/
          /* MOVE OPAFDD TO OPAWDD;*/
          /* MOVE EZEDTE TO OPACYMD;*/
          /* IF OPAWYMD LT OPACYMD;*/
          /*  */
          /* ------------------------  Y2K OUT END  --------------------*/
          /* -----------------------  Y2K IN BEGIN  --------------------*/
          /*  */
          OPACDT = VGVar.currentGregorianDate; /* move current date*/
          if (TA2REC.TA2GRGGN < OPACDT)
            /*  */
            /* ------------------------  Y2K IN END  ---------------------*/
            /*  */
            /* WIPRO CHANGES * BEGIN * TT#4895 *******************/
            /*  */
            /* Commenting the line that moves zero to DNSA date*/
                                  /* The zero moved to DNSA-DATE makes it*/
                                   /* less than DNSB-DATE and*/
            /* CURRENT-DATE causing the corresponding error message to be*/
            /* displayed.*/
            /* So it was commented out as per the request.*/
            /*  */
            /* MOVE 0 TO OP1REC.OP1DSADT;*/
            /*  */
            /* WIPRO CHANGES * END * TT#4895 *******************/
            /*  */
            set OP0NM001.OP1DSADT[OPASUB] cursor, bold;
            converseLib.validationFailed(1009); /* DNSA can't be LT today * TT#4895*/
            OPAREC.OPAERR = "Y";
            /*  */
            /* WIPRO CHANGES * BEGIN * TT#4895 *******************/
            /*  */
            /* Code was introduced to make the*/
            /* error message 070 display,instead of*/
            /* 099 when DNSA-DATE is less than*/
            /* CURRENT-DATE in the statement group*/
            /* OP0NS10*/
            /*  */
            /*  */
            return; /* err don't process*/
            /*  */
            /* WIPRO CHANGES * END * TT#4895 *******************/
            /*  */
          else
            OP1REC.OP1DSADT = TA2REC.TA2GRGGN;
            set OP0NM001.OP1DSADT[OPASUB] initialAttributes;
          end
        end
      end

      if (OP0NM001.XWHCD[OPASUB] == "51") /* whse 51 orders*/
        if (OP0NM001.OP1DSBDT[OPASUB] == "MMDDYY"
         || OP0NM001.OP1DSBDT[OPASUB] == " "
         || OP0NM001.OP1DSBDT[OPASUB] == "000000")
          set OP0NM001.OP1DSBDT[OPASUB] cursor, bold;
          converseLib.validationFailed(958); /* must enter dnsb date*/
          OPAREC.OPAERR = "Y";
        else
          OP0NS57(); /* edit dsbd*/
        end
      end

      if (OP1REC.XBCCD == "08") /* if cole-haan order*/
        if (OP0NM001.OP1DSBDT[OPASUB] == "MMDDYY"
         || OP0NM001.OP1DSBDT[OPASUB] == " "
         || OP0NM001.OP1DSBDT[OPASUB] == "000000")
          set OP0NM001.OP1DSBDT[OPASUB] cursor, bold;
          converseLib.validationFailed(521);
          OPAREC.OPAERR = "Y";
        else
          OP0NS57(); /* edit dsbd*/
        end
      else
        OP0NS57(); /* edit dsbd*/
      end

      if (OP0NM001.OP1DSADT[OPASUB] == "MMDDYY"
       || OP0NM001.OP1DSADT[OPASUB] == " "
       || OP0NM001.OP1DSADT[OPASUB] == "000000"
       || OP0NM001.OP1DSBDT[OPASUB] == "MMDDYY"
       || OP0NM001.OP1DSBDT[OPASUB] == " "
       || OP0NM001.OP1DSBDT[OPASUB] == "000000")
        /* next sentence*/
      else
        if (OP1REC.OP1DSADT >= OP1REC.OP1DSBDT)
          /* next sentence*/
        else
          set OP0NM001.OP1DSBDT[OPASUB] cursor, bold;
          set OP0NM001.OP1DSADT[OPASUB] bold;
          converseLib.validationFailed(99);
          OPAREC.OPAERR = "Y";
        end
      end

        /* CANA 06/28/95*/

      if (OP1REC.XDZ-DATA-DIST-CD == "CA") /* CANA Canada*/
        if (OP0NM001.XWHCD[OPASUB] in XWHTBL.XWHCD)
          if (OP0NM001.XDSCD[OPASUB] in XDSTBL.XDSCD) /* CANA*/
            if (XDSTBL.XDSWHSEF[sysVar.arrayIndex] == "N") /* CANA*/
              if (OP0NM001.XWHCD[OPASUB] != "  ") /* CANA*/
                set OP0NM001.XWHCD[OPASUB] cursor, bold; /* CANA*/
                converseLib.validationFailed(336); /* CANA warehouse code must be blank*/
                OPAREC.OPAERR = "Y"; /* CANA*/
              end /* CANA*/
            else /* CANA*/
              if (OP0NM001.XWHCD[OPASUB] != "42") /* CANA*/
                set OP0NM001.XWHCD[OPASUB] cursor, bold; /* CANA*/
                converseLib.validationFailed(897); /* CANA warehouse code must be 42*/
                OPAREC.OPAERR = "Y"; /* CANA*/
              end /* CANA*/
            end /* CANA*/
          end /* CANA*/
        end /* CANA*/
      else
        if (OP0NM001.XWHCD[OPASUB] == "42") /* CANA*/
          set OP0NM001.XWHCD[OPASUB] cursor, bold; /* CANA*/
          converseLib.validationFailed(78); /* CANA warehouse is not valid*/
          OPAREC.OPAERR = "Y"; /* CANA*/
        end /* CANA*/
      end

      if (OPAREC.OPAERR == "Y") /* CANA*/
        exit stack; /* CANA*/
      end /* CANA*/

      if (OP0NM001.XWHCD[OPASUB] in XWHTBL.XWHCD)
        if (OP1REC.XWHCD == "  ")
          set OP0NM001.XWHCD[OPASUB] initialAttributes;
          OP0NM001.XWHSABRV[OPASUB] = XWHTBL.XWHSABRV[sysVar.arrayIndex];
        else
          if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
            if (OP1REC.XGPCD == XWHTBL.XGPCD1[sysVar.arrayIndex]
             || OP1REC.XGPCD == XWHTBL.XGPCD2[sysVar.arrayIndex]
             || OP1REC.XGPCD == XWHTBL.XGPCD3[sysVar.arrayIndex]
             || OP1REC.XGPCD == XWHTBL.XGPCD4[sysVar.arrayIndex]
             || OP1REC.XGPCD == XWHTBL.XGPCD5[sysVar.arrayIndex]
             || OP1REC.XGPCD == XWHTBL.XGPCD6[sysVar.arrayIndex]
             || OP1REC.XGPCD == XWHTBL.XGPCD7[sysVar.arrayIndex]
             || OP1REC.XGPCD == XWHTBL.XGPCD8[sysVar.arrayIndex])
              set OP0NM001.XWHCD[OPASUB] initialAttributes;
              OP0NM001.XWHSABRV[OPASUB] = XWHTBL.XWHSABRV[sysVar.arrayIndex];
            else
              set OP0NM001.XWHCD[OPASUB] cursor, bold;
              converseLib.validationFailed(78);
              OPAREC.OPAERR = "Y";
            end
          else
            set OP0NM001.XWHCD[OPASUB] cursor, bold;
            converseLib.validationFailed(78);
            OPAREC.OPAERR = "Y";
          end
        end
      else
        set OP0NM001.XWHCD[OPASUB] cursor, bold;
        converseLib.validationFailed(78);
        OPAREC.OPAERR = "Y";
      end

       /* *** always edit need date, not just when modified ****/

      /* ------------------  Y2K IN BEGIN  --------------------*/
      /*  */
      set TA2REC empty; /* reset passing record*/
      /*  */
      /* -------------------  Y2K IN END  ---------------------*/
      TA2REC.TA2RTNCD = 0;
      TA2REC.TA2DTOPT = "GREGGREG";
      TA2REC.TA2GRTYP = "A";
      TA2REC.TA2GRGAN = OP0NM001.OP1CUNDT[OPASUB];
      call "TA0040" (TA2REC) {isExternal = yes};
      if (TA2REC.TA2RTNCD > 0)
        set OP0NM001.OP1CUNDT[OPASUB] cursor, bold;
        converseLib.validationFailed(13);
        OPAREC.OPAERR = "Y";
      else
        /* -----------------------  Y2K OUT BEGIN  -------------------*/
        /*  */
        /* MOVE OP0NM001.OP1CUNDT(OPASUB) TO OPAREC.OPAFDT;*/
        /* MOVE OPAFYY TO OPAWYY;*/
        /* MOVE OPAFMM TO OPAWMM;*/
        /* MOVE OPAFDD TO OPAWDD;*/
        /* MOVE EZEDTE TO OPACYMD;*/
        /* IF OPAWYMD LT OPACYMD;*/
        /*  */
        /* ------------------------  Y2K OUT END  --------------------*/
        /* -----------------------  Y2K IN BEGIN  --------------------*/
        /*  */
        OPACDT = VGVar.currentGregorianDate; /* move current date*/
        if (TA2REC.TA2GRGGN < OPACDT)
          /*  */
          /* ------------------------  Y2K IN END  ---------------------*/
          set OP0NM001.OP1CUNDT[OPASUB] cursor, bold;
          converseLib.validationFailed(15); /* needdate < today*/
          OPAREC.OPAERR = "Y";
        else
          /* -----------------------  Y2K OUT BEGIN  -------------------*/
          /*  */
          /* OPACYMD = OPACYMD + 10000;*/
          /* IF OPAWYMD GT OPACYMD;*/
          /*  */
          /* ------------------------  Y2K OUT END  --------------------*/
          /* -----------------------  Y2K IN BEGIN  --------------------*/
          /*  */
          OPACDT = OPACDT + 10000;
          if (TA2REC.TA2GRGGN > OPACDT)
            /*  */
            /* ------------------------  Y2K IN END  ---------------------*/
            set OP0NM001.OP1CUNDT[OPASUB] cursor, bold;
            converseLib.validationFailed(16); /* needdate > 1 year away*/
            OPAREC.OPAERR = "Y";
          else
            set OP0NM001.OP1CUNDT[OPASUB] initialAttributes;
                                  /* all dates on map must be in same*/
                                   /* format for test prod.dedln*/
            OP0NW01.OP0NWNDT = TA2REC.TA2GRGGN; /* save need date*/
            OP0NS11(); /* edit need date versus lead days*/
            OP0NS12(); /* edit need date for draw order*/
            OP0NS13(); /* get prod d/l for needdate edit*/
            OP0NS-AIRBORNE();
          end
        end
      end

    end
    OPASUB = OPASUB - 1;
  end

  if (OP0NM001.OP0NMF1P != OP0NW01.OP0NWF1P) /* page number changed*/
    OP0NS70(); /* edit map page number field*/
  end

   /* ********************end of statement group******************/
end // end OP0NS10

// edit need date/order lead time
Function OP0NS11()
   /* ************************************************************/

    /* edit need date versus lead time, for this order type*/

   /* ************************************************************/


  OPAREC.OPACYMD = VGVar.currentShortGregorianDate; /* set up current date ccyymmdd*/
  if (OPAREC.OPACYY > 56)
    OPAREC.OPACCC = 19;
  else
    OPAREC.OPACCC = 20;
  end

  OPAREC.OPAFDT = OP0NM001.OP1CUNDT[OPASUB];
  OPAREC.OPAWYY = OPAREC.OPAFYY;
  OPAREC.OPAWMM = OPAREC.OPAFMM;
  OPAREC.OPAWDD = OPAREC.OPAFDD;
  if (OPAREC.OPAWYY > 56)
    OPAREC.OPAWCC = 19;
  else
    OPAREC.OPAWCC = 20;
  end

   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  set TA2REC empty; /* reset work record*/
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
  TA2REC.TA2DBDFN = OPAREC.OPACDT; /* current date ccyymmdd*/
  TA2REC.TA2DBDTN = OPAREC.OPAWDT; /* need date ccyymmdd*/
  TA2REC.TA2DTOPT = "DAYSDIFF";
  TA2REC.TA2RTNCD = 0;
  TA2REC.TA2GRTYP = "G";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    if (OP1REC.XOTCD in XOTTBL.XOTCD
     && TA2REC.TA2DBDDN >= XOTTBL.XOTLDAYS[sysVar.arrayIndex])
      /* next sentence*/
    else
      if (OP0NW01.OP0NW051 == "Y")
        set OP0NM001.OP1CUNDT[OPASUB] cursor, normal;
      else
        set OP0NM001.OP1CUNDT[OPASUB] cursor, bold;
        converseLib.validationFailed(51); /* warning - need date*/
        OPAREC.OPAERR = "Y";
        OP0NW01.OP0NW051 = "Y";
      end
    end
  else
    set OP0NM001.OP1CUNDT[OPASUB] cursor, bold;
    converseLib.validationFailed(13); /* need date is not a valid date*/
    OPAREC.OPAERR = "Y";
  end


   /* ********************end statement group*********************/
end // end OP0NS11

// edit need date for draw order
Function OP0NS12()



       /* ********************************************************/
       /* * if it is a duplication of a draw order, this        **/
       /* * statement group edits the entered need date vs the  **/
       /* * bulk order need date and the bulk order donst-ship- **/
       /* * -after date                                         **/
       /* ********************************************************/


       /* check to see if it is a draw order*/

  if (OP0NW01.OP0NWBDF == "D") /* it is a draw order*/
     /* continue*/
  else
    return;
  end


       /* if it is a draw order, the entered need date must be*/
       /* => the bulk order need date and <= the bulk order*/
       /* dont-ship-after date*/


  if (OP0NW01.OP0NWNDT >= OP0NW01.OP0NWBNT
   && OP0NW01.OP0NWNDT <= OP0NW01.OP0NWDSA)
     /* next sentence*/
  else
    converseLib.validationFailed(293); /* mustbe between bulk order need date*/
                                 /* ; and dont-ship-after date*/
    set OP0NM001.OP1CUNDT[OPASUB] cursor, bold;
    OPAREC.OPAERR = "Y";
  end



   /* ************************************************************/
end // end OP0NS12

// get prod d/l for needdate edit
Function OP0NS13()




      /* see if need date is 30 days past production deadline.*/
      /* if it is, only authorized personnel are allowed to*/
      /* change.*/


      /* ********************************************************/
      /* * get all line items for each selected suborder -     **/
      /* * io0440 (vitem001).                                  **/
      /* * need style, color and dimension for db2 call to     **/
      /* * io0560 (vcolor02).  this call will return gender age**/
      /* * and product cat for db2 call to io2560 (vcutof01).  **/
      /* * need date will be edited versus cutoff date in      **/
      /* * dorder.vcutof01.                                    **/
      /* ********************************************************/

   /* ************************************************************/

    /* set up product information*/

   /* ************************************************************/

  OP2REC.OP2KEY = OP1REC.OP1KEY; /* order key*/
  OP2REC.OP1NORID = OP0NM001.OP1NORID[OPASUB]; /* sel subord*/

  call "IO0440" ("SS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* select set*/

  if (SQLCA.VAGen_SQLCODE == 0)
    while (SQLCA.VAGen_SQLCODE == 0)
      call "IO0440" ("SN", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};

      OP0NS14(); /* get product record*/
    end

    call "IO0440" ("CS", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VITEM001"; /* table view*/
    TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0NS13"; /* statement group name*/
    TA1REC.TA1LOCAT[4] = "IO0440";
    OP0NSXS();
  end




end // end OP0NS13

// get product record
Function OP0NS14()



      /* ********************************************************/
      /* * read db2 for the product's style,color & size recs  **/
      /* * this is a combined view of 3 records.               **/
      /* ********************************************************/

  if (SQLCA.VAGen_SQLCODE == 0)

    set SYCREC empty;
    set SQLCA empty;

        /* set up read key*/

    SYCREC.XGPCD = OP1REC.XGPCD; /* gpc*/
    SYCREC.SY1STNBR = OP2REC.SY1STNBR; /* style*/
    SYCREC.SY2CLRID = OP2REC.SY2CLRID; /* color*/
    SYCREC.XDMCD = OP2REC.XDMCD; /* dimension*/

        /* read db2*/

    call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes}; /* single select*/

     /* CANADA 06/28/95*/

        /* check db2 return code*/

    if (SQLCA.VAGen_SQLCODE == 0) /* check for good return*/
      if (OP1REC.XDZ-DATA-DIST-CD == "CA") /* CANA*/
        set WSY2000 empty;
        WSY2000.XDR-PROD-REG-CD = "05";
        OP0NS-SEL-SY2000(); /* CANA call SY2000*/
        if (OP0NW01.OP0NW-WSY2000-FND-FLAG == "Y") /* CANA found*/
          SYCREC.XPCCD = WSY2000.XPC-PROD-CAT-CD; /* CANA*/
        else
          if (WSY2000.WSY2000-RETURN-CODE == 98) /* CANA database busy*/
            OPAREC.OPAERR = "Y"; /* CANA*/
            converseLib.validationFailed(10); /* CANA database busy*/
            exit stack; /* CANA*/
          else
            if (WSY2000.WSY2000-RETURN-CODE == 02)
                                   /* CANA style/color not found*/
              OPAREC.OPAERR = "Y"; /* CANA*/
              converseLib.validationFailed(911); /* CANA style/color not found*/
              exit stack; /* CANA*/
            else
              OPAREC.OPAERR = "Y"; /* CANA*/
              converseLib.validationFailed(909); /* CANA database error*/
              OP0NS1P(); /* CANA purge temp storage*/
              exit stack; /* CANA*/
            end
          end
        end
      else
        if (OP1REC.XGPCD == "03")
          if (COMMAREA.XDVCD == "02" /* userid assigned to europe*/
           || COMMAREA.XDVCD == "03") /* userid assigned to asia*/
          /* continue processing*/
          else
            set WSY2000 empty;
            WSY2000.XDR-PROD-REG-CD = "01";
            OP0NS-SEL-SY2000(); /* call SY2000*/
            if (OP0NW01.OP0NW-WSY2000-FND-FLAG == "Y") /* found*/
              SYCREC.XPCCD = WSY2000.XPC-PROD-CAT-CD;
            else
              if (WSY2000.WSY2000-RETURN-CODE == 98) /* database busy*/
                OPAREC.OPAERR = "Y";
                converseLib.validationFailed(10); /* database busy*/
                exit stack;
              else
                if (WSY2000.WSY2000-RETURN-CODE == 02)
                                     /* style/color not found*/
                  OPAREC.OPAERR = "Y";
                  converseLib.validationFailed(911); /* style/color not found*/
                  exit stack;
                else
                  OPAREC.OPAERR = "Y";
                  converseLib.validationFailed(909); /* database error*/
                  OP0NS1P(); /* purge temp storage*/
                  exit stack;
                end
              end
            end
          end
        end
      end
      OP0NS15(); /* edit needdate versus prod*/
                                   /* deadline*/
    else
      TA1REC.TA1DBASE = "DPROD"; /* data base name*/
      TA1REC.TA1TBLVU = "VCOLOR02"; /* table view*/
      TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* key value*/
      TA1REC.TA1LOCAT[3] = "IO0560"; /* i/o mod*/
      OP0NSXS(); /* common abend routine*/
    end
  end


   /* *************************************************************/
end // end OP0NS14

// edit needdate verses prod dead
Function OP0NS15()



   /* **************************************************/
   /* * if the need date has been modified find the*/
   /* * production deadline. find out if today is*/
   /* * 30 days past the deadline. if it is and if this*/
   /* * is a futures type order only authorized persons*/
   /* * may change the need date. t. fox 8/87*/
   /* **************************************************/

  set OPJREC empty;
  set OPLREC empty;
  set SQLCA empty;

  if (OP1REC.XOTCD in XOTTBL.XOTCD /* order type in table*/
   && XOTTBL.XOTFUTRF[sysVar.arrayIndex] == "Y") /* futures/*/
    OP0NW01.OP0NWPDF = "N"; /* init prod deadline found flag*/
    OP0NW-DAYS-PAST-CUTOFF = 0; /* init # days past cutoff*/
    OP0NW01.OP0NWPPD = "N";

    OPJREC.XOTCD = OP1REC.XOTCD; /* order type code*/
    OPJREC.XPCCD = SYCREC.XPCCD; /* product cat*/
    OPJREC.XGACD = SYCREC.XGACD; /* gender age*/
    OPJREC.SY1STNBR = SYCREC.SY1STNBR; /* product style*/
    OPJREC.SY2CLRID = SYCREC.SY2CLRID; /* product color*/
    OPLREC.OPLSOP = "SF"; /* selection option*/
    OPLREC.OPJCNDTB = OP0NW01.OP0NWNDT; /* need date*/

    call "IO2560" (OPLREC, SQLCA, OPJREC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0) /* record found*/
      OP0NW01.OP0NWPDF = "Y"; /* deadline found*/
      if (OPAREC.OPACDT > OPJREC.OPJCUTDT) /* current date > prod d/*/
        /* ------------------  Y2K IN BEGIN  --------------------*/
        /*  */
        set TA2REC empty; /* reset work record*/
        /*  */
        /* -------------------  Y2K IN END  ---------------------*/
        OP0NW01.OP0NWPPD = "Y";
        TA2REC.TA2DBDFN = OPJREC.OPJCUTDT; /* move d/l date*/
        TA2REC.TA2DBDTN = OPAREC.OPACDT; /* today's date*/
        TA2REC.TA2DTOPT = "DAYSDIFF";
        TA2REC.TA2GRTYP = "G";

        call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

        if (TA2REC.TA2RTNCD == 0)
          OP0NW01.OP0NW-DAYS-PAST-CUTOFF = TA2REC.TA2DBDDN;
          if (TA2REC.TA2DBDDN >= 30)
            if (COMMAREA.CAUSERID in YOSTBL.XXXUSRID
             && YOSTBL.YOSNDTFL[sysVar.arrayIndex] == "Y") /* authorized to ch*/
              set OP0NM001.OP1CUNDT[OPASUB] cursor, normal;
              if (OPAREC.OPAERR == "N")
                if (OP0NW01.OP0NW365 == "Y")
                  /* next sentence*/
                else
                  OP0NW01.OP0NW365 = "Y"; /* save message flag*/
                  OPAREC.OPAERR = "Y";
                  converseLib.validationFailed(365);
                                   /* past cutoff date, advise production*/
                end
              end
            else
              converseLib.validationFailed(206); /* can't add; 30 days past d/l*/
              OPAREC.OPAERR = "Y";
              set OP0NM001.OP1CUNDT[OPASUB] cursor, bold;
              return;
            end
          end
        else
          TA1REC.TA1TYPE = "DB2 ";
          TA1REC.TA1PGMNM = "OP0N    ";
          TA1REC.TA1LOCAT[1] = "OP0NS13 ";
          TA1REC.TA1DBASE = "OP3REC  ";
          TA1REC.TA1TBLVU = "VITEM001";
          COMMAREA.CA-USER-WORKAREA-4K = " ";
          XSPF4();
          exit program;
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
        OP0NW01.OP0NWPDF = "N"; /* deadline rec not found*/
        converseLib.validationFailed(404); /* record not found-can't add*/
        OPAREC.OPAERR = "Y";
        set OP0NM001.OP1CUNDT[OPASUB] cursor, bold;
        return;
      else
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "OP0N";
        TA1REC.TA1LOCAT[1] = "SF";
        TA1REC.TA1LOCAT[2] = "OP0NS15";
        TA1REC.TA1LOCAT[3] = "IO2560 ";
        TA1REC.TA1LOCAT[4] = " ";
        TA1REC.TA1LOCAT[4] = "OP0NM001";
        TA1REC.TA1DBASE = "DORDER.";
        TA1REC.TA1TBLVU = "VCUTOF01";
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        XSPF4();
        OP0NM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      end
    end
  end


   /* *************************************************************/
end // end OP0NS15

// purge temp storage 1 - orders
Function OP0NS1P()



   /* purge temporary storage 1*/

  TA5REC.TA5APPID = "OP0N"; /* appl identification*/
  TA5REC.TA5FNCCD = "P"; /* function code*/
  call "TA0050" (OP0NW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    OP0NW01.OP0NWF1P = 1;
    OP0NW01.OP0NWF1M = 1;
    OPAREC.OPASUB = 1;
  else
    TA1REC.TA1LOCAT[1] = "PRG OP0N";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "PROBLEM PURGING TEMP STORAGE"; /* subrtine parms*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end
    converseLib.validationFailed(487); /* database busy*/
    OPAREC.OPAERR = "Y"; /* set error message on*/

  end
end // end OP0NS1P

// read temp storage 1 - orders
Function OP0NS1R()



   /* read temporary storage 1*/

  set OP0NW02 empty;

  TA5REC.TA5APPID = "OP0N"; /* appl identification*/
  TA5REC.TA5FNCCD = "R"; /* function code*/
  TA5REC.TA5TSQIX = OP0NW01.OP0NWF1P; /* current page*/
  OP0NW02.OP0NWLEN = 374; /* length of record*/

  call "TA0050" (OP0NW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "READOP0N";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    OP0NW01.OP0NWDPT = OP1REC.OP1PARTN; /* display part char*/
    OP0NW01.OP0NWDCN = OP1REC.OP1CUOID; /* display cust ord id*/
    OP0NW01.OP0NWDNN = OP1REC.OP1NORID; /* display nike ord id*/
    TA1REC.TA1TBLKE = OP0NW01.OP0NWDKY; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "PROBLEM READING TEMP STORAGE"; /* subrtine parms*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end
    converseLib.validationFailed(487); /* database busy*/
    OPAREC.OPAERR = "Y"; /* set error message on*/
  end
end // end OP0NS1R

// write temp storage 1 -orders
Function OP0NS1W()



   /* write temporary storage 1*/

  TA5REC.TA5APPID = "OP0N"; /* appl identification*/
  TA5REC.TA5FNCCD = "A"; /* function code*/
  OP0NW02.OP0NWLEN = 374; /* length of record*/

  call "TA0050" (OP0NW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    OP0NW01.OP0NWF1M = TA5REC.TA5TSQIX;
  else
    TA1REC.TA1LOCAT[1] = "ADD OP0N";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    OP0NW01.OP0NWDPT = OP1REC.OP1PARTN; /* display part char*/
    OP0NW01.OP0NWDCN = OP1REC.OP1CUOID; /* display cust ord id*/
    OP0NW01.OP0NWDNN = OP1REC.OP1NORID; /* display nike ord id*/
    TA1REC.TA1TBLKE = OP0NW01.OP0NWDKY; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "PROBLEM WRITING TEMP STORAGE"; /* subrtine parms*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end
    converseLib.validationFailed(487); /* database busy*/
    OPAREC.OPAERR = "Y"; /* set error flag on*/

  end
end // end OP0NS1W

// order/cust/slspgm db2 edits
Function OP0NS20()
   /* ************************************************************/

    /* edit customer and sales program information in database*/

   /* ************************************************************/


    /* bottom up edit of order status*/

    /* the last op1rec read in will be the 'first' selected*/

  OPASUB = 10;
  while (OPASUB > 0)
    if (OP0NM001.OP0NMSEL[OPASUB] == "S")
      OPAREC.OPAORDN = OP0NM001.OP1CUOID;
      OP1REC.OP1PARTN = OPAREC.OP1PARTN;
      OP1REC.OP1CUOID = OP0NM001.OP1CUOID;
      OP1REC.OP1NORID = OP0NM001.OP1NORID[OPASUB];
      call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        if (OP1REC.XOSCD != "XL")
          /* next sentence*/
        else
          if (OPWREC.OPWFUNC == 2)
            set OP0NM001.OP0NMSEL[OPASUB] cursor, bold;
            converseLib.validationFailed(225);
            OPAREC.OPAERR = "Y";
          else
            /* next sentence*/
          end
        end
      else
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VORDHDR01";
        TA1REC.TA1TBLKE = OP1REC.OP1KEY;
        TA1REC.TA1LOCAT[3] = "OP0NS20";
        TA1REC.TA1LOCAT[4] = "IO0430";
        OP0NSXS();
      end
    end
    OPASUB = OPASUB - 1;
  end /* while*/

     /* if cancelled orders are found, no need to continue*/

  if (OPAREC.OPAERR == "Y")
    exit stack;
  end

  if (OP1REC.XDVCD == "02") /* nil order - validate acct class*/
    OP0NS2B();
  end

  if (OPAREC.OPAERR == "Y") /* acct class for nil doesn't allow*/
    exit stack; /* dupl, so there's no reason to*/
                                   /* continue*/
  end


     /* bottom up edits of need dates*/
     /* need dates must be within sales program delivery dates*/
     /* and within sales program lead time requirements*/

  if (OP0NM001.SP1ID > " ")
    SP2REC.SP1ID = OP1REC.SP1ID;
    SP2REC.XOTCD = OP1REC.XOTCD;
    call "IO0080" ("S ", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      OPASUB = 10;
      while (OPASUB > 0)
        if (OP0NM001.OP0NMSEL[OPASUB] == "S")
          OPAREC.OPAFDT = OP0NM001.OP1CUNDT[OPASUB];
          OPAREC.OPAWYY = OPAREC.OPAFYY;
          OPAREC.OPAWMM = OPAREC.OPAFMM;
          OPAREC.OPAWDD = OPAREC.OPAFDD;
          if (OPAWYY > 56)
            OPAWCC = 19;
          else
            OPAWCC = 20;
          end
          if (OPAWDT <= SP2REC.SP2DLXDT
           && OPAWDT >= SP2REC.SP2DLBDT)
            OP0NS21(); /* edit need date versus sales program*/
                                   /* lead time*/
          else
            set OP0NM001.OP1CUNDT[OPASUB] cursor, bold;
            converseLib.validationFailed(226);
            OPAREC.OPAERR = "Y";
          end
        end
        OPASUB = OPASUB - 1;
      end /* while*/
    else
      converseLib.validationFailed(223);
      OPAREC.OPAERR = "Y";
    end
  end

     /* if need dates bad, no need to continue*/

  if (OPAREC.OPAERR == "Y")
    exit stack;
  end

   /* CANA 06/28/95*/

     /* if customer key fields changed, check old company sku*/
     /* indicator, and move changed heading fields to op1rec*/

  OP0NW01.OP0NWSKF = "N";
  if (OP0NM001.KUCCOID != OP1REC.KUCCOID)
    KUCREC.KUCCOID = OP1REC.KUCCOID; /* the 'old' company id*/
    call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      if (KUCREC.KUCSKIND != " ")
        OP0NW01.OP0NWSKF = "Y";
        OPWREC.KUCSKIND = KUCREC.KUCSKIND;
      end
    else
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      OP0NW01.OP0NWTK1 = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = OP0NW01.OP0NWTK1;
      TA1REC.TA1LOCAT[3] = "OP0NS20";
      TA1REC.TA1LOCAT[4] = "IO0240";
      OP0NSXS();
    end
    KUCREC.KUCCOID = OP0NM001.KUCCOID; /* the 'new' company id*/
    call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* CANA check 'new' cust*/
    if (SQLCA.VAGen_SQLCODE == 0) /* CANA 'new' customer exists*/
      if (OP1REC.XDZ-DATA-DIST-CD == "  ") /* CANA*/
        OP1REC.XDZ-DATA-DIST-CD = "US"; /* CANA*/
      end /* CANA*/
      if (OP1REC.XDZ-DATA-DIST-CD == KUCREC.XDZ-DATA-DIST-CD) /* CANA*/
        OP1REC.KUCCOID = OP0NM001.KUCCOID;
      else
        if (OP1REC.XDZ-DATA-DIST-CD == "CA" /* CANA can only dup canadian*/
         || KUCREC.XDZ-DATA-DIST-CD == "CA") /* order if cust is Canadiana*/
          converseLib.validationFailed(908); /* CANA data dist cd does not match*/
          set OP0NM001.KUCCOID cursor, bold; /* CANA that of order*/
          OPAREC.OPAERR = "Y"; /* CANA*/
        else
          OP1REC.KUCCOID = OP0NM001.KUCCOID;
        end
      end
    else /* CANA*/
      if (SQLCA.VAGen_SQLCODE == 100) /* CANA customer not found*/
        set OP0NM001.KUCCOID cursor, bold;
        converseLib.validationFailed(33); /* CANA customer is not valid*/
        OPAREC.OPAERR = "Y";
      else
        TA1REC.TA1DBASE = "DCUST"; /* CANA*/
        TA1REC.TA1TBLVU = "VCMPNY01"; /* CANA*/
        OP0NW01.OP0NWTK1 = KUCREC.KUCCOID; /* CANA*/
        TA1REC.TA1TBLKE = OP0NW01.OP0NWTK1; /* CANA*/
        TA1REC.TA1LOCAT[3] = "OP0NS20"; /* CANA*/
        TA1REC.TA1LOCAT[4] = "IO0240"; /* CANA*/
        OP0NSXS(); /* CANA*/
      end /* CANA*/
    end /* CANA*/
  end /* CANA*/

  if (OPAREC.OPAERR == "Y") /* CANA if customer bad don't continue*/
    exit stack; /* CANA*/
  end /* CANA*/

  if (OP0NM001.KUMSTRID != OP1REC.KUMSTRID)
    OP1REC.KUMSTRID = OP0NM001.KUMSTRID;
  end
  if (OP0NM001.XNXCD != OP1REC.XNXCD)
    OP1REC.XNXCD = OP0NM001.XNXCD;
  end
  if (OP0NM001.OP1CUPO != OP1REC.OP1CUPO)
    OP1REC.OP1CUPO = OP0NM001.OP1CUPO;
  end

     /* nil customer edit*/


  KUNREC.KUCCOID = OP0NM001.KUCCOID;
  KUNREC.KUMSTRID = OP0NM001.KUMSTRID;
  KUNREC.XNXCD = OP0NM001.XNXCD;
  KUNREC.XGPCD = OP1REC.XGPCD;
  call "IO0280" ("S ", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};

      /* check the db2 return status*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUST001";
    OP0NW01.OP0NWTK1 = KUNREC.KUCCOID;
    TA1REC.TA1TBLKE = OP0NW01.OP0NWTK1;
    TA1REC.TA1LOCAT[3] = "OP0NS20";
    TA1REC.TA1LOCAT[4] = "IO0280";
    OP0NSXS();
  end

  if (OP1REC.XGPCD == "02" /* footwear*/
   || OP1REC.XGPCD == "03") /* apparel*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100 /* if cust not found*/
     || KUNREC.XXXSTAT != "A")     /* cust stat inactive*/
      KUNREC.XGPCD = "**";
      call "IO0280" ("SS", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        KUNREC.XXXSTAT = " "; /* init stat to perform loop*/
        while (KUNREC.XXXSTAT != "A" /* until an active status occurs*/
         && SQLCA.VAGen_SQLCODE == 0) /* good return*/
          OP0NS60(); /* get gpc/cust recs*/
        end
      else
        TA1REC.TA1DBASE = "DCUST";
        TA1REC.TA1TBLVU = "VCUST001";
        OP0NW01.OP0NWTK1 = KUNREC.KUCCOID;
        TA1REC.TA1TBLKE = OP0NW01.OP0NWTK1;
        TA1REC.TA1LOCAT[3] = "OP0NS20";
        TA1REC.TA1LOCAT[4] = "IO0280";
        OP0NSXS();
      end
    end
  end

     /* check to see if the customer is still active*/

  if (SQLCA.VAGen_SQLCODE == 0
   && KUNREC.XXXSTAT == "A")
     /* continue*/
  else
    set OP0NM001.KUCCOID cursor, bold;
    set OP0NM001.KUMSTRID bold;
    set OP0NM001.XNXCD bold;
    converseLib.validationFailed(203); /* gpc not set up or cust inactive*/
    OPAREC.OPAERR = "Y";
  end

     /* if no customer found, no need to continue*/

  if (OPAREC.OPAERR == "Y")
    exit stack;
  end



   /* ********************************************************/
   /* * hold new label information    -    ssj 3-8-87       **/
   /* *    and reset label flag when no change made in cust.**/
   /* ********************************************************/

  if (OP0NM001.KUSTEXT1 > " ")
    OP0NW01.KUSTEXT1 = OP0NM001.KUSTEXT1;
  end
  if (OP0NM001.KUSTEXT2 > " ")
    OP0NW01.KUSTEXT2 = OP0NM001.KUSTEXT2;
  end


  if (OP0NW01.OP0NWDS == "N") /* no change in customer*/
    if (OP0NW01.KUSTEXT1 > " " /* label 1 from screen*/
     || OP0NW01.KUSTEXT2 > " ") /* label 2 from screen*/
      OP1REC.OP1SPLBF = "Y"; /* special label flag on header*/
    end
  end


     /* customer status edit*/

  if (KUNREC.XXXSTAT == "A")
    /* next sentence*/
  else
    set OP0NM001.KUCCOID cursor, bold;
    set OP0NM001.KUMSTRID bold;
    set OP0NM001.XNXCD bold;
    converseLib.validationFailed(35);
    OPAREC.OPAERR = "Y";
  end



     /* customer company credit status edit*/

  KUCREC.KUCCOID = KUNREC.KUCCOID; /* the 'new' company id*/
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    OP0NS-CHECK-CREDIT(); /* look up credit status code*/
    if (OP0NW-XCC-STAT-FOUND == "Y") /* credit status code in table*/
        /* next sentence*/
    else
      set OP0NM001.KUCCOID cursor, bold;
      set OP0NM001.KUMSTRID bold;
      set OP0NM001.XNXCD bold;
      converseLib.validationFailed(35);
      OPAREC.OPAERR = "Y";
    end
    if (KUCREC.KUCSKIND != " ")
      OP0NW01.OP0NWSKF = "Y";
      OPWREC.KUCSKIND = KUCREC.KUCSKIND;
    end
  else
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCMPNY01";
    TA1REC.TA1TBLKE = KUCREC.KUCGRP;
    TA1REC.TA1LOCAT[3] = "OP0NS20";
    TA1REC.TA1LOCAT[4] = "IO0240";
    OP0NSXS();
  end

   /* check if customer po number is required*/
  OP0NSAH();


   /* ------------------------------------------------------------*/
   /* Check the legal entity of the company.  Not all the*/
   /* companies need to be checked.  Account class is used to*/
   /* qualify the company for the edit.*/
   /* ------------------------------------------------------------*/
  if (KUCREC.XAUCD == "12" /* Instructor pgm*/
   || KUCREC.XAUCD == "13" /* Store clerk pgm*/
   || KUCREC.XAUCD == "14" /* FBI*/
   || KUCREC.XAUCD == "43" /* Mail order*/
   || KUCREC.XAUCD == "60" /* Retail marketing*/
   || KUCREC.XAUCD == "63" /* Dealer ad assistance*/
   || KUCREC.XAUCD == "62" /* Consumer defectives*/
   || KUCREC.XAUCD == "90") /* Cole Haan*/

    OP0NSLE(); /* Check legal entity*/

  else
    if (OP1REC.XDZ-DATA-DIST-CD != "CA") /* CANA only check legal entity*/
      sysVar.arrayIndex = 1; /* CANA for non-Canadian orders*/
      if (KUCREC.XAUCD in XAUTBL.XAUCD)
        if (XAUTBL.XATCD[sysVar.arrayIndex] == "02") /* USA wholesale*/
          OP0NSLE(); /* Check legal entity*/
        end
      end
    end
  end

    /* call kumrec for the ship address id (kumshaid)*/
    /* (db change 02-13-91)*/

  set SQLCA empty;
  set KUMREC empty;

  KUMREC.KUCCOID = OP0NM001.KUCCOID;
  KUMREC.KUMSTRID = OP0NM001.KUMSTRID;

  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)

  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OPAREC.OPAERR = "Y";
      converseLib.validationFailed(033);
      set OP0NM001.KUCCOID cursor, modified, bold;
      set OP0NM001.KUMSTRID modified, bold;
    else
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VSTORE01";
      TA1REC.TA1TBLKE = KUMREC.KUMGRP;
      TA1REC.TA1LOCAT[3] = "OP0NS20";
      TA1REC.TA1LOCAT[4] = "IO0340";
      OP0NSXS();
    end
  end

  if (OPAREC.OPAERR == "Y")
    exit stack;
  end


   /* ------------------------------------------------------------*/
     /* customer ship to address edit*/
   /* ------------------------------------------------------------*/
  if (OP0NW01.OP0NWDS == "Y" /* change in drop-ship   sjob 3-1-87*/
   || OP1REC.OP1SGPAO != "Y") /* ship to address override 'off'*/
    OP1REC.OP1SHAID = KUMREC.KUMSHAID;
    KULREC.KUCCOID = OP1REC.KUCCOID;
    KULREC.KULAAID = OP1REC.OP1SHAID;
    call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        set OP0NM001.KUCCOID cursor, bold;
        set OP0NM001.KUMSTRID bold;
        set OP0NM001.XNXCD bold;
        converseLib.validationFailed(227);
        OPAREC.OPAERR = "Y";
      else
        TA1REC.TA1DBASE = "DCUST";
        TA1REC.TA1TBLVU = "VADDR001";
        TA1REC.TA1TBLKE = KULREC.KULGRP;
        TA1REC.TA1LOCAT[3] = "OP0NS20";
        TA1REC.TA1LOCAT[4] = "IO0170";
        OP0NSXS();
      end
    end
  end



     /* customer bill group/bill group address edit*/

  if (OP0NW01.OP0NWDS == "Y") /* change in drop-ship   sjob 3-1-87*/
    OP1REC.OP1BLAID = KUCREC.KUCBLAID;
    OP0NS25(); /* added sjob 3-1-87*/
  end




     /* customer 1-time ship to address edit*/

  if (OP1REC.OP1SHAID == 0 /* ship to address id is 'empty'*/
   && OP1REC.OP11TMSF == "N") /* one-time ship flag is off*/
    set OP0NM001.KUCCOID cursor, bold;
    set OP0NM001.KUMSTRID bold;
    set OP0NM001.XNXCD bold;
    converseLib.validationFailed(230);
    OPAREC.OPAERR = "Y";
  end

   /* CANA 06/28/95*/

     /* customer zip code edit*/

  if (OP0NM001.KUCCOID != OP0NW01.KUCCOID
   || OP0NM001.KUMSTRID != OP0NW01.KUMSTRID
   || OP0NM001.XNXCD != OP0NW01.XNXCD
   || OP0NM001.XXXZIP != OP0NW01.XXXZIP
   || OP0NM001.XXXZIP == 0)
    if (OP1REC.OP1SHAID != 0)
      KULREC.KUCCOID = OP1REC.KUCCOID;
      KULREC.KULAAID = OP1REC.OP1SHAID;
      call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        if (KULREC.XCTCD == "USA")
          OPAREC.OPAZIP = KULREC.XXXZIP;
          if (OP0NM001.XXXZIP != OPAREC.OPAZIP5)
            set OP0NM001.XXXZIP cursor, bold;
            OP0NW01.OP0NWZTX = "ZIP CODE DOES NOT MATCH SHIP-TO ZIP: ";
            OP0NW01.OP0NWZZP = OPAREC.OPAZIP5;
            converseLib.validationFailed(0);
            OP0NM001.VAGen_EZEMSG = OP0NW01.OP0NWMSG;
            OPAREC.OPAERR = "Y";
          end
        else
          if (KULREC.XCTCD == "CANA") /* CANA*/
            OPAREC.OPAZIP = KULREC.XXXZIP;
            if (OP0NM001.XXXZIP != OPAREC.OPAZIP6C)
              set OP0NM001.XXXZIP cursor, bold;
              OP0NW01.OP0NWZTX = "POSTAL CODE DOES NOT MATCH SHIP-TO POSTAL CODE: ";
              OP0NW01.OP0NWZZP = OPAREC.OPAZIP6C;
              converseLib.validationFailed(0);
              OP0NM001.VAGen_EZEMSG = OP0NW01.OP0NWMSG;
              OPAREC.OPAERR = "Y";
            end
          end
        end
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          set OP0NM001.KUCCOID cursor, bold;
          set OP0NM001.KUMSTRID bold;
          set OP0NM001.XNXCD bold;
          converseLib.validationFailed(227);
          OPAREC.OPAERR = "Y";
        else
          TA1REC.TA1DBASE = "DCUST";
          TA1REC.TA1TBLVU = "VADDR001";
          TA1REC.TA1TBLKE = KULREC.KULGRP;
          TA1REC.TA1LOCAT[3] = "OP0NS20";
          TA1REC.TA1LOCAT[4] = "IO0170";
          OP0NSXS();
        end
      end
    end
  end



     /* sales program status and booking date edits*/

  if (OP0NM001.SP1ID > " ")
    SP1REC.SP1ID = OP1REC.SP1ID;
    call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      if (SP1REC.SP1STAT == "A")
        SP2REC.SP1ID = OP1REC.SP1ID;
        SP2REC.XOTCD = OP1REC.XOTCD;
        call "IO0080" ("S ", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes};
        if (SQLCA.VAGen_SQLCODE == 0)
          OPAREC.OPAWDT = SP2REC.SP2BKBDT;
          /* ---------------------  Y2K OUT BEGIN  ----------------------*/
          /*  */
          /* MOVE EZEDTE TO OPAREC.OPACYMD;*/
          /* IF OPAREC.OPACYMD GE OPAREC.OPAWYMD;/* system > begin booking*/
          /* MOVE SP2REC.SP2BKXDT TO OPAREC.OPAWDT;*/
          /* IF OPAREC.OPACYMD LE OPAREC.OPAWYMD;/* system < end booking*/
          /* ;/* next sentence*/
          /* ELSE;*/
          /* MOVE 224 TO EZEMNO;*/
          /* MOVE 'Y' TO OPAREC.OPAERR;*/
          /* END;*/
          /* ELSE;*/
          /* MOVE 224 TO EZEMNO;*/
          /* MOVE 'Y' TO OPAREC.OPAERR;*/
          /* END;*/
          /*  */
          /* ----------------------  Y2K OUT END  -----------------------*/
          /* ---------------------  Y2K IN BEGIN  -----------------------*/
          /*  */
          OPAREC.OPACDT = VGVar.currentGregorianDate; /* move current date*/
          if (OPAREC.OPACDT >= OPAREC.OPAWDT) /* system > begin booking*/
            OPAREC.OPAWDT = SP2REC.SP2BKXDT;
            if (OPAREC.OPACDT <= OPAREC.OPAWDT) /* system < end booking*/
              /* next sentence*/
            else
              converseLib.validationFailed(224);
              OPAREC.OPAERR = "Y";
            end
          else
            converseLib.validationFailed(224);
            OPAREC.OPAERR = "Y";
          end
          /*  */
          /* ------------------------  Y2K IN END  ---------------------*/
        else
          converseLib.validationFailed(223);
          OPAREC.OPAERR = "Y";
        end
      else
        converseLib.validationFailed(223);
        OPAREC.OPAERR = "Y";
      end
    else
      converseLib.validationFailed(223);
      OPAREC.OPAERR = "Y";
    end
  end


     /* if edit errors at this point, no need to continue*/

  if (OPAREC.OPAERR == "Y")
    exit stack;
  end



     /* the remaining customer/sales program edits are done*/
     /* in statement groups copied from application op0c.*/
     /* these edits determine if the customer is qualified for*/
     /* the sales program (if one exists).*/


   /* log 484 4/12/91 dflesh*/
   /* add condition if xautbl allow spgm flag is no*/
   /* account class is not eligible for spgm*/

  if (OP0NM001.SP1ID > " ")
    sysVar.arrayIndex = 1;
    if (KUCREC.XAUCD in XAUTBL.XAUCD              /* account class in tbl*/
     && XAUTBL.XAUSPGFL[sysVar.arrayIndex] == "N" /* allow spgm 'no'*/
     && XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* spgm active*/
      OPAREC.OPAERR = "Y";
      converseLib.validationFailed(652); /* acct class or acct type not valid for*/
                                   /* spgm*/
      return;
    end
    OP0NS22();
  end


     /* if comp number has changed*/

  if (OP0NM001.OP1CMPNB != OP1REC.OP1CMPNB)
    OP0NSEC(); /* Edit comp number.*/
  end
end // end OP0NS20

// edit need date/spgm lead time
Function OP0NS21()
   /* ************************************************************/

    /* edit need date versus lead time, for this sales program*/

   /* ************************************************************/


   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  set TA2REC empty; /* reset ta0040 work record*/
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
  TA2REC.TA2DBDFN = OPAREC.OPACDT; /* current date ccyymmdd*/
  TA2REC.TA2DBDTN = OPAREC.OPAWDT; /* need date ccyymmdd*/
  TA2REC.TA2DTOPT = "DAYSDIFF";
  TA2REC.TA2RTNCD = 0;
  TA2REC.TA2GRTYP = "G";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    if (TA2REC.TA2DBDDN >= SP2REC.SP2LEDTM)
      /* next sentence*/
    else
      set OP0NM001.OP1CUNDT[OPASUB] cursor, bold;
      converseLib.validationFailed(52); /* need date does not meet sales program*/
                                   /* req.*/
      OPAREC.OPAERR = "Y";
    end
  else
    set OP0NM001.OP1CUNDT[OPASUB] cursor, bold;
    converseLib.validationFailed(13); /* need date is not a valid date*/
    OPAREC.OPAERR = "Y";
  end



   /* ********************end statement group*********************/
end // end OP0NS21

// account class vs. account type
Function OP0NS22()
   /* ************************************************************/

      /* edit the special customer group code.*/
      /* if '**' is found then all customers qualify.*/

   /* ************************************************************/
  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex < 21 /* not end of table*/
   && SP1REC.XSGCD[sysVar.arrayIndex] > " ") /* not end active entries*/
    if (SP1REC.XSGCD[sysVar.arrayIndex] == "**") /* if special code found*/
      return; /* customer qualifies*/
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end
   /* ************************************************************/

      /* edit the customer company account class against*/
      /* the sales account type.  if a match is found, then*/
      /* the sales program is valid for the customer.*/

   /* ************************************************************/
  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex < 21 /* not end of table*/
   && SP1REC.XAUCD[sysVar.arrayIndex] > " ") /* not end active entries*/
    if (KUCREC.XAUCD == SP1REC.XAUCD[sysVar.arrayIndex]) /* if acct code found*/
      return; /* customer qualifies*/
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end


      /* if the customer group indicator is off, then check*/
      /* for specific customer qualification.*/

  if (KUNREC.KUNCGIND != "Y")
    OP0NS23(); /* check specific customers*/
    return; /* get out*/
  end


      /* if the customer is part of a special customer group,*/
      /* then, access the special customer group record and*/
      /* check the xsg special customer group array.*/

  KUPREC.KUCCOID = OP0NM001.KUCCOID; /* load key - cust company*/
  KUPREC.KUMSTRID = OP0NM001.KUMSTRID; /* load key - cust store*/
  KUPREC.XNXCD = KUNREC.XNXCD; /* load key - cust dept*/
  KUPREC.XGPCD = KUNREC.XGPCD; /* load key - gpc*/
  call "IO0260" ("S ", SQLCA, KUPREC) {isNoRefresh = yes, isExternal = yes};
                                   /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VCUGRP01"; /* table view*/
    TA1REC.TA1TBLKE = KUPREC.KUPGRP; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0NS22 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0260  "; /* i/o mod name*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* invoke syncpoint rollback*/
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call abend formatter*/
    XSPF4(); /* invoke master menu*/
    exit program;
  end


      /* if not found, then check special customer groups*/

  if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
    converseLib.validationFailed(043); /* sls pgm id is not valid for order*/
                                   /* type*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0NM001.KUCCOID cursor, bold;
    set OP0NM001.KUMSTRID bold;
    set OP0NM001.XNXCD bold;
    return;
  end


      /* edit the customer special account class against*/
      /* the sales program special account type.*/

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex < 11 /* not end of table*/
   && KUPREC.XSGCD[sysVar.arrayIndex] > " ") /* not end active entries*/
    OPAREC.OPASUB = 1;
    while (OPAREC.OPASUB < 21 /* not end of table*/
     && SP1REC.XSGCD[OPASUB] > " ") /* not end active entries*/
      if (KUPREC.XSGCD[sysVar.arrayIndex] == SP1REC.XSGCD[OPASUB])
        return; /* if found then sales program ok*/
      end
      OPAREC.OPASUB = OPAREC.OPASUB + 1;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end


      /* if no match between the two tables, then check*/
      /* for specific customer qualification.*/

  OP0NS23(); /* check specific customers*/
  return;



   /* *************************************************************/
end // end OP0NS22

// specific customer edits
Function OP0NS23()



      /* *********************************************************/
      /* * this statement group edits the customer as being     **/
      /* * valid as a "specific customer" on the sales program. **/
      /* *********************************************************/


      /* first check to see if there are specific customers.*/
      /* if not, then we have an error.*/

  if (SP1REC.SP1CIND != "Y") /* no specific customers*/
    converseLib.validationFailed(044); /* cust does not qualify for sls pgm*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0NM001.SP1ID bold;
    set OP0NM001.KUCCOID cursor, bold;
    set OP0NM001.KUMSTRID bold;
    set OP0NM001.XNXCD bold;
    return;
  end


      /* format error diag fields*/

  TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
  TA1REC.TA1TBLVU = "VCUST001"; /* table view*/
  TA1REC.TA1LOCAT[2] = "OP0NS23 "; /* statement group*/
  TA1REC.TA1LOCAT[3] = "IO0100  "; /* i/o mod name*/
  OP0NW01.OP0NWT1 = " ";

      /* access slspgm customer records*/

  SP4REC.SP1ID = OP0NM001.SP1ID; /* load key*/
  SP4REC.KUCCOID = OP0NM001.KUCCOID; /* load key - cust company*/
  call "IO0100" ("SS", SQLCA, SP4REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE != 0) /* check for good rc*/
    OP0NW01.OP0NWTK1 = SP4REC.KUCCOID;
    OP0NW01.OP0NWTK3 = SP4REC.SP1ID;
    TA1REC.TA1TBLKE = OP0NW01.OP0NWT1; /* key value*/
    TA1REC.TA1LOCAT[4] = "SS      "; /* i/o mod name*/
    OP0NSXS();
  end


      /* process returned answer set*/

      /* basis of selection below is that all 9's in any key*/
      /* means any (store, dept, or gpc depending on field).*/
      /* otherwise, a specific field value must match.*/

  while (SQLCA.VAGen_SQLCODE == 0)
    OP0NS24(); /* get next answer set row*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (SP4REC.KUMSTRID == 9999 /* store ok ?*/
       || SP4REC.KUMSTRID == OP0NM001.KUMSTRID)
        if (SP4REC.XNXCD == 99 /* dept OK ?*/
         || SP4REC.XNXCD == OP0NM001.XNXCD)
          if (SP4REC.XGPCD == "99" /* gpc ok ?*/
           || SP4REC.XGPCD == KUNREC.XGPCD)
            call "IO0100" ("CS", SQLCA, SP4REC) {isNoRefresh = yes, isExternal = yes};
            if (SQLCA.VAGen_SQLCODE != 0) /* check for good rc*/
              TA1REC.TA1TBLKE = " "; /* key value*/
              TA1REC.TA1LOCAT[4] = "CS      "; /* function*/
              OP0NSXS();
            end
            return; /* cust qualifies*/
          end
        end
      end
    end
  end


      /* if not found, then error*/

  if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
    converseLib.validationFailed(044); /* cust does not qualify for sls pgm*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0NM001.KUCCOID cursor, bold;
    set OP0NM001.KUMSTRID bold;
    set OP0NM001.XNXCD bold;
  end

  call "IO0100" ("CS", SQLCA, SP4REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0) /* check for good rc*/
    TA1REC.TA1TBLKE = " "; /* key value*/
    TA1REC.TA1LOCAT[4] = "CS      "; /* function*/
    OP0NSXS();
  end


   /* *************************************************************/
end // end OP0NS23

// specific customer edits
Function OP0NS24()



      /* *********************************************************/
      /* * this statement group edits the customer as being     **/
      /* * valid as a "specific customer" on the sales program. **/
      /* *********************************************************/


      /* access slspgm customer record from answer set*/

  call "IO0100" ("SN", SQLCA, SP4REC) {isNoRefresh = yes, isExternal = yes};
                                   /* call i/o mod for answer set*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VCUST001"; /* table view*/
    TA1REC.TA1TBLKE = SP4REC.SP4KEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0NS24 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0100  "; /* i/o mod name*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* invoke syncpoint rollback*/
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call abend formatter*/
    XSPF4(); /* invoke master menu*/
    exit program;
  end



   /* *************************************************************/
end // end OP0NS24

// bill group record was found
Function OP0NS25()

  KULREC.KUCCOID = KUCREC.KUCCOID;
  KULREC.KULAAID = KUCREC.KUCBLAID;
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set OP0NM001.KUCCOID cursor, bold;
      set OP0NM001.KUMSTRID bold;
      set OP0NM001.XNXCD bold;
      converseLib.validationFailed(229);
      OPAREC.OPAERR = "Y";
    else
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VADDR001";
      TA1REC.TA1TBLKE = KULREC.KULGRP;
      TA1REC.TA1LOCAT[3] = "OP0NS20";
      TA1REC.TA1LOCAT[4] = "IO0170";
      OP0NSXS();
    end
  end




   /* *************************************************************/
                       /* end of statement group*/
   /* *************************************************************/
end // end OP0NS25

// load labels onto op table
Function OP0NS26()



      /* ********************************************************/
      /* * this statement group                                **/
      /* * takes any labels                                    **/
      /* * (-- there are only 2 labels for each customer)      **/
      /* * and writes these two labels to the order text record**/
      /* ********************************************************/




       /* write the first label to the order text table*/

  if (OP0NW01.KUSTEXT1 == " ")
      /* next sentence*/
  else
    OP4REC.OP4KEY = OP1REC.OP1KEY;
    OP4REC.OP4TRTYP = "L";
    OP4REC.OP4TXTOF = "N";
    OP4REC.OP4TRSEQ = 1;
    OP4REC.OP4TXT = OP0NW01.KUSTEXT1;
    OP4REC.XNDCD = " ";
    OP4REC.ZZZCHGDT = OP1REC.ZZZCHGDT;
    OP4REC.ZZZCHGTM = OP1REC.ZZZCHGTM;
    OP4REC.ZZZCHGCT = 0;


    call "IO0470" ("A ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)

    else
      TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
      TA1REC.TA1TBLVU = "VTEXT001"; /* table view*/
      TA1REC.TA1TBLKE = OP4REC.OP4KEY; /* key value*/
      TA1REC.TA1LOCAT[3] = "OP0NS26"; /* statement group*/
      TA1REC.TA1LOCAT[4] = "IO0470";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      COMMAREA.CA-USER-WORKAREA-4K = " ";
      XSPF4();
      exit program;
    end
  end



       /* write the second label to the order text table*/

  if (OP0NW01.KUSTEXT2 == " ")
      /* next sentence*/
  else
    OP4REC.OP4KEY = OP1REC.OP1KEY;
    OP4REC.OP4TRTYP = "L";
    OP4REC.OP4TXTOF = "N";
    OP4REC.OP4TRSEQ = 2;
    OP4REC.OP4TXT = OP0NW01.KUSTEXT2;
    OP4REC.XNDCD = " ";
    OP4REC.ZZZCHGDT = OP1REC.ZZZCHGDT;
    OP4REC.ZZZCHGTM = OP1REC.ZZZCHGTM;
    OP4REC.ZZZCHGCT = 0;


    call "IO0470" ("A ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)

    else
      TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
      TA1REC.TA1TBLVU = "VTEXT001"; /* table view*/
      TA1REC.TA1TBLKE = OP4REC.OP4KEY; /* key value*/
      TA1REC.TA1LOCAT[3] = "OP0NS26"; /* statement group*/
      TA1REC.TA1LOCAT[4] = "IO0470";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      COMMAREA.CA-USER-WORKAREA-4K = " ";
      XSPF4();
      exit program;
    end
  end


  if (OP0NW01.KUSTEXT2 != " "
   || OP0NW01.KUSTEXT2 != " ")
    if (SQLCA.VAGen_SQLCODE == 0)
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* commit work*/
    end
  end



   /* ************************************************************/
end // end OP0NS26

// find customer labels.
Function OP0NS27()



      /* ********************************************************/
      /* * this statement group                                **/
      /* * reads the dcust.vlabel01 to get customer lables     **/
      /* * (-- there are only 2 labels for each customer)      **/
      /* ********************************************************/



  KUSREC.KUCCOID = OP1REC.KUCCOID; /* load keys*/
  KUSREC.KUMSTRID = OP1REC.KUMSTRID;
  KUSREC.XNXCD = OP1REC.XNXCD;
  KUSREC.XGPCD = OP1REC.XGPCD;



  call "IO0310" ("S ", SQLCA, KUSREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OP0NW01.KUSTEXT1 = KUSREC.KUSTEXT1;
    OP0NW01.KUSTEXT2 = KUSREC.KUSTEXT2;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      return;
    else
      TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
      TA1REC.TA1TBLVU = "VINST001"; /* table view*/
      TA1REC.TA1LOCAT[3] = "OP0NS27"; /* statement group*/
      TA1REC.TA1LOCAT[4] = "IO0310";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      COMMAREA.CA-USER-WORKAREA-4K = " ";
      XSPF4();
      exit program;
    end
  end



   /* ************************************************************/
end // end OP0NS27

// get customer special inst
Function OP0NS28()


      /* *********************************************************/
      /* * get special instructions from dcust.vinst01 table,   **/
      /* * move   instructions to the dorder.vtext001 table     **/
      /* *                                 added 3-5-87     sjob**/
      /* *********************************************************/


  KUQREC.KUCCOID = OP1REC.KUCCOID; /* load keys*/
  OP0NW01.KUCCOID = OP1REC.KUCCOID;
  KUQREC.KUMSTRID = OP1REC.KUMSTRID;
  OP0NW01.KUMSTRID = OP1REC.KUMSTRID;
  KUQREC.XNXCD = OP1REC.XNXCD;
  OP0NW01.XNXCD = OP1REC.XNXCD;
  KUQREC.XGPCD = OP1REC.XGPCD;
  OP0NW01.XGPCD = OP1REC.XGPCD;



  OP0NW01.OP0NWIC = 0;

  call "IO0300" ("SS", SQLCA, KUQREC) {isNoRefresh = yes, isExternal = yes};

       /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    OPAREC.OPASUB2 = 0; /* init seq counter*/
  else
    TA1REC.TA1TYPE = "DB2 "; /* abend type*/
    TA1REC.TA1FUNC = "RETN"; /* abend function (return)*/
    TA1REC.TA1PGMNM = "OP0N    "; /* program name*/
    TA1REC.TA1MAP = "        "; /* map name*/
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VINST001"; /* table view*/
    TA1REC.TA1TBLKE = OP0NW01.OP0NWCK1; /* table key*/
    TA1REC.TA1LOCAT[3] = "OP0NS28"; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0300";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    COMMAREA.CA-USER-WORKAREA-4K = " ";
    XSPF4();
  end


  while (SQLCA.VAGen_SQLCODE == 0)
    OP0NS29(); /* load inst onto op table*/
  end
  call "IO0300" ("CS", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};

   /* ************************************************************/
end // end OP0NS28

// load instructions onto op tble
Function OP0NS29()



        /* ******************************************************/
        /* * this statement group does a select set to the     **/
        /* * customer special instructions table and copy the  **/
        /* * instructions into the dorder.vtext001 table       **/
        /* ******************************************************/


  call "IO0300" ("SN", SQLCA, KUQREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    if (KUQREC.XNDCD in XNDTBL.XNDCD
     && XNDTBL.XNDSOFL[sysVar.arrayIndex] == "Y")
      OP0NS31(); /* write inst to vtext001 table*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
      TA1REC.TA1TBLVU = "VINST001"; /* table view*/
      TA1REC.TA1TBLKE = OP0NW01.OP0NWCK; /* table key*/
      TA1REC.TA1LOCAT[3] = "OP0NS29"; /* statement group*/
      TA1REC.TA1LOCAT[4] = "IO0300";
      XSOPS02();
    end
  end



   /* ************************************************************/
end // end OP0NS29

// EDIT SPECIAL CUSTOMER GROUP
Function OP0NS2A()

  KUPREC.KUCCOID = OP0NM001.KUCCOID; /* load cust comp key*/
  KUPREC.KUMSTRID = OP0NM001.KUMSTRID; /* cust store key*/
  KUPREC.XNXCD = OP0NM001.XNXCD; /* cust dept*/
  KUPREC.XGPCD = OP1REC.XGPCD; /* gpccode*/

  call "IO0260" ("S ", SQLCA, KUPREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* this is a restricted customer*/
    if (KUPREC.XSOCD != " ")
      if (OP1REC.XSOCD == KUPREC.XSOCD)
               /* next sentence*/
      else
        converseLib.validationFailed(621); /* users so not valid for restricted*/
                                   /* cust*/
        OPAREC.OPAERR = "Y";
        set OP0NM001.KUCCOID cursor, bold;
        set OP0NM001.KUMSTRID bold;
        set OP0NM001.XNXCD bold;
        return;
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* this is not a restricted customer*/
        /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCUST   ";
      TA1REC.TA1TBLVU = "VCUGRP01";
      OP0NW01.OP0NWTK2 = OP0NM001.KUCCOID;
      OP0NW01.OP0NWTK3 = OP0NM001.KUMSTRID;
      OP0NW01.OP0NWTK4 = OP0NM001.XNXCD;
      OP0NW01.OP0NWTK5 = OP1REC.XGPCD;
      TA1REC.TA1TBLKE = OP0NW01.OP0NWTK1;
      TA1REC.TA1LOCAT[1] = " ";
      TA1REC.TA1LOCAT[2] = " ";
      TA1REC.TA1LOCAT[3] = "OP0NS2A ";
      TA1REC.TA1LOCAT[4] = "IO0260  ";
      XSOPS02();
    end
  end

   /* ********************end statement group*********************/
end // end OP0NS2A

// order/cust/slspgm db2 edits
Function OP0NS2B()
   /* ************************************************************/

   /* edit nil customer for account class, if the old and the*/
   /* new company is nike owned (account class '31','32') the ord*/
   /* can be duplicated, this is only for 'S1' orders (samples)*/
   /* OP0B prevents other order types for NIL orders from*/
   /* getting to this application.*/

   /* ************************************************************/


     /* first check the old company*/

  KUCREC.KUCCOID = OP1REC.KUCCOID; /* the 'old' company id*/
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    if (KUCREC.XAUCD == "31"
     || KUCREC.XAUCD == "32")
        /* continue - ok to dup ..so far*/
    else
      set OP0NM001.KUCCOID cursor, bold;
      set OP0NM001.KUMSTRID bold;
      set OP0NM001.XNXCD bold;
      converseLib.validationFailed(531); /* cannot duplicate this order using*/
                                   /* this customer*/
      OPAREC.OPAERR = "Y";
      return;
    end
  else
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCMPNY01";
    OP0NW01.OP0NWTK1 = KUCREC.KUCCOID;
    TA1REC.TA1TBLKE = OP0NW01.OP0NWTK1;
    TA1REC.TA1LOCAT[3] = "OP0NS2B";
    TA1REC.TA1LOCAT[4] = "IO0240";
    OP0NSXS();
  end

  if (OP0NM001.KUCCOID != KUCREC.KUCCOID)
    KUCREC.KUCCOID = OP0NM001.KUCCOID;
    call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      if (KUCREC.XAUCD == "31"
       || KUCREC.XAUCD == "32")
             /* continue - ok to dup*/
      else
        set OP0NM001.KUCCOID cursor, bold;
        set OP0NM001.KUMSTRID bold;
        set OP0NM001.XNXCD bold;
        converseLib.validationFailed(531); /* cannot duplicate using this customer*/
        OPAREC.OPAERR = "Y";
      end
    else
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      OP0NW01.OP0NWTK1 = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = OP0NW01.OP0NWTK1;
      TA1REC.TA1LOCAT[3] = "OP0NS2B";
      TA1REC.TA1LOCAT[4] = "IO0240";
      OP0NSXS();
    end
  end


end // end OP0NS2B

// additional customer edits
Function OP0NS30()
   /* *************************************************************/

    /* edit additional customer information/set up warning msgs.*/

   /* *************************************************************/


  OPASUB = 0;



     /* compare order warehouse with all three store warehouses*/

  KUMREC.KUCCOID = OP0NM001.KUCCOID;
  KUMREC.KUMSTRID = OP0NM001.KUMSTRID;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    if (KUMREC.XWHCD[1] == OP1REC.XWHCD
     || KUMREC.XWHCD[2] == OP1REC.XWHCD
     || KUMREC.XWHCD[3] == OP1REC.XWHCD)
      /* next sentence*/
    else
      OPAREC.OPAERR = "C";
      OP0NWMSG = "CUST. WAREHOUSE DOES NOT MATCH ORDER WAREHOUSE";
      OPASUB = OPASUB + 1;
      OP0NM002.OP0NMMSG[OPASUB] = OP0NWMSG;
    end
  else
    OPAREC.OPAERR = "C";
    OP0NWMSG = "CUSTOMER WAREHOUSE DOES NOT MATCH ORDER WAREHOUSE";
    OPASUB = OPASUB + 1;
    OP0NM002.OP0NMMSG[OPASUB] = OP0NWMSG;
  end


   /* blank out sales agency and zero sales rep*/
   /* They will be recomputed in either OP0E or OP0J.*/
   /* 03/27/90 mg.*/

  OP1REC.SM4REPID = 0;
  OP1REC.SM1AGYID = " ";


   /* *******************************************************/
   /* *  change in drop ship resets instruction flag (ssj) **/
   /* *  except for promo orders (sls office = 07)*/
   /* *******************************************************/

  if (OP0NW01.OP0NWDS == "Y") /* change in drop-ship*/
    if (KUNREC.KUNISIND == "Y")
      OP1REC.OP1SPINF = "Y";
    else
      if (OP1REC.XSOCD != "07")
        OP1REC.OP1SPINF = "N";
      end
    end
  end


     /* special instructions flag check*/

  if (KUNREC.KUNISIND == "Y")
    OP0NWMSG = "CUSTOMER HAS SPECIAL INST. - MAY NOT MATCH ORDER";
    OPAREC.OPAERR = "C";
    OPASUB = OPASUB + 1;
    OP0NM002.OP0NMMSG[OPASUB] = OP0NWMSG;
  end

   /* *******************************************************/
   /* * change in drop ship resets labels flag (ssj 3/3/87)**/
   /* *  except for promo orders (sls office = 07)*/
   /* *******************************************************/


  if (OP0NW01.KUSTEXT1 != " " /* new screen label*/
   || OP0NW01.KUSTEXT2 != " ") /* new screen label*/
    OP1REC.OP1SPLBF = "Y";
  else
    if (OP0NW01.OP0NWDS == "Y") /* change in drop-ship*/
      if (KUNREC.KUNLABIN == "Y") /* customer label flag*/
        OP1REC.OP1SPLBF = "Y";
      else
        if (OP1REC.XSOCD != "07")
          OP1REC.OP1SPLBF = "N";
        end
      end
    end
  end

     /* special labels flag check*/

  if (KUNREC.KUNLABIN == "Y")
    OP0NWMSG = "CUSTOMER HAS SPECIAL LABELS - MAY NOT MATCH ORDER";
    OPAREC.OPAERR = "C";
    OPASUB = OPASUB + 1;
    OP0NM002.OP0NMMSG[OPASUB] = OP0NWMSG;
  end



     /* prop terms flag check*/

  if (KUCREC.KUCPRPTI == "Y"
   || KUCREC.KUCFTRTI == "Y")
    OP0NWMSG = "CUST. SPECIAL TERMS/DISCOUNTS MAY NOT MATCH ORDER";
    OPAREC.OPAERR = "C";
    OPASUB = OPASUB + 1;
    OP0NM002.OP0NMMSG[OPASUB] = OP0NWMSG;
  end





     /* backorder flag check*/

  if (OP1REC.OP1BOFL == KUNREC.KUNABOFL) /* bo flags match*/
    /* next sentence*/
  else
    OP0NWMSG = "CUSTOMER BACK ORDER FLAG DOES NOT MATCH ORDER";
    OPAREC.OPAERR = "C";
    OPASUB = OPASUB + 1;
    OP0NM002.OP0NMMSG[OPASUB] = OP0NWMSG;
  end



     /* customer style id's flag check*/

  if (OPWREC.OPWFUNC == "2"
   && OP0NW01.OP0NWSKF == "Y") /* old or new company has style(you*/
                                   /* gotta have)*/
    OP0NWMSG = "CUSTOMER STYLE ID'S FOR LINE ITEMS WILL BE CLEARED";
    OPAREC.OPAERR = "C";
    OPASUB = OPASUB + 1;
    OP0NM002.OP0NMMSG[OPASUB] = OP0NWMSG;
  end



   /* ********************end statement group*********************/
end // end OP0NS30

// write special instruction
Function OP0NS31()



       /* *******************************************************/
       /* * this statement group writes a special customer     **/
       /* * instruction from customer special instructions     **/
       /* * table to the order special instructions table      **/
       /* *******************************************************/


  OP4REC.OP4KEY = OP1REC.OP1KEY;
  OP4REC.OP4TRTYP = "I";
  OPAREC.OPASUB2 = OPAREC.OPASUB2 + 1;
  OP4REC.OP4TRSEQ = OPAREC.OPASUB2;
  OP4REC.XNDCD = KUQREC.XNDCD;
  OP4REC.OP4TXT = KUQREC.KUQSINST;
  OP4REC.OP4TXTOF = "N";
  OP4REC.ZZZCHGDT = OP1REC.ZZZCHGDT;
  OP4REC.ZZZCHGTM = OP1REC.ZZZCHGTM;


  call "IO0470" ("A ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    OP0NW01.OP0NWIC = OP0NW01.OP0NWIC + 1;
    if (OP4REC.OP4TRSEQ == 1)
      OP0NW01.OP0NWTSQ = OP4REC.OP4TRSEQ; /* save record seq #*/
    end
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VTEXT001"; /* table view*/
    TA1REC.TA1TBLKE = OP4REC.OP4KEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0NS31"; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0470";
    XSOPS02(); /* common abend routine*/
  end



   /* ************************************************************/
end // end OP0NS31

// set up header records
Function OP0NS40()

   /* ************************************************************/

    /* set up order header information*/

   /* ************************************************************/

    /* call ku1540 to get allocation sequence*/

  OP0NS-CALL-KU1540();
  if (OPAREC.OPAERR == "Y")
    return;
  end

     /* get next order number*/

  call "IO0510" ("SU", SQLCA, OP7REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   && OP7REC.OP7CUOIN > 0)
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* commit work*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VNXTID01";
    TA1REC.TA1TBLKE = OP7REC.OP7GROUP;
    TA1REC.TA1LOCAT[3] = "OP0NS40";
    TA1REC.TA1LOCAT[4] = "IO0510";
    OP0NSXS();
  end


     /* SAVE OLD ORDER NUMBER*/

  OP0NW01.OP0NWSVK = OP1REC.OP1KEY;


     /* set up new order number*/

  OPAREC.OPAORDN = OP7REC.OP7CUOIN;
  OP1REC.OP1PARTN = OPAREC.OP1PARTN;
  OP1REC.OP1CUOID = OP7REC.OP7CUOIN;
  OP1REC.OP1NORID = 0;

  if (OP0NM001.KUCCOID != OP0NW01.OP0NWOCO)
    OP1REC.KUCCOID = OP0NM001.KUCCOID;
  end

  if (OP0NM001.KUMSTRID != OP0NW01.OP0NWOST)
    OP1REC.KUMSTRID = OP0NM001.KUMSTRID;
  end

  if (OP0NM001.XNXCD != OP0NW01.XNXCD)
    OP1REC.XNXCD = OP0NM001.XNXCD;
  else
    OP1REC.XNXCD = 0;
  end

  if (OP0NM001.OP1CUPO != OP0NW01.OP1CUPO)
    OP1REC.OP1CUPO = OP0NM001.OP1CUPO;
  end



  if (OP0NM001.OP1CMPNB != OP0NW01.OP1CMPNB)
    OP1REC.OP1CMPNB = OP0NM001.OP1CMPNB;
  end



     /* the first selected line's subscript was saved in opwsub1*/
     /* now we use it to move the 'new' warehouse code*/

  if (OP0NM001.XWHCD[OPASUB1] != OP0NW01.OP0NWSWH[OPASUB1])
    OP1REC.XWHCD = OP0NM001.XWHCD;
  end


     /* we also use opwsub1 to move the 'new' need date*/

  if (OP0NM001.OP1CUNDT[OPASUB1] != OP0NW01.OP0NWSND[OPASUB1])
    OPAREC.OPAFDT = OP0NM001.OP1CUNDT[OPASUB1];
    OPAREC.OPAWYY = OPAREC.OPAFYY;
    OPAREC.OPAWMM = OPAREC.OPAFMM;
    OPAREC.OPAWDD = OPAREC.OPAFDD;
    if (OPAWYY > 56)
      OPAWCC = 19;
    else
      OPAWCC = 20;
    end
    OP1REC.OP1CUNDT = OPAWDT;
  end


     /* current date is set up here*/

  OPAREC.OPACYMD = VGVar.currentShortGregorianDate;
  if (OPACYY > 56)
    OPACCC = 19;
  else
    OPACCC = 20;
  end
  OP1REC.OP1OSADT = OPACDT;

  OP1REC.OP1ENTDT = OPACDT;

  OP1REC.XOSCD = "IP";

  OP1REC.OP1ENREP = OPWENTID;
                                   /* entered by service rep id (passed in)*/


     /* we also use opwsub1 to move the 'new' ship dates*/

  if (OP0NM001.OP1DSBDT[OPASUB1] != OP0NW01.OP0NWSBD[OPASUB1])
    if (OP0NM001.OP1DSBDT[OPASUB1] == "MMDDYY"
     || OP0NM001.OP1DSBDT[OPASUB1] == " "
     || OP0NM001.OP1DSBDT[OPASUB1] == "000000")
      OP1REC.OP1DSBDT = 0;
    else
      OPAREC.OPAFDT = OP0NM001.OP1DSBDT[OPASUB1];
      OPAREC.OPAWYY = OPAREC.OPAFYY;
      OPAREC.OPAWMM = OPAREC.OPAFMM;
      OPAREC.OPAWDD = OPAREC.OPAFDD;
      if (OPAWYY > 56)
        OPAWCC = 19;
      else
        OPAWCC = 20;
      end
      OP1REC.OP1DSBDT = OPAWDT;
    end
  end

     /* same for don't ship after date*/

  if (OP0NM001.OP1DSADT[OPASUB1] != OP0NW01.OP0NWSAD[OPASUB1])
    if (OP0NM001.OP1DSADT[OPASUB1] == "MMDDYY"
     || OP0NM001.OP1DSADT[OPASUB1] == " "
     || OP0NM001.OP1DSADT[OPASUB1] == "000000")
      OP1REC.OP1DSADT = 0;
    else
      OPAREC.OPAFDT = OP0NM001.OP1DSADT[OPASUB1];
      OPAREC.OPAWYY = OPAREC.OPAFYY;
      OPAREC.OPAWMM = OPAREC.OPAFMM;
      OPAREC.OPAWDD = OPAREC.OPAFDD;
      if (OPAWYY > 56)
        OPAWCC = 19;
      else
        OPAWCC = 20;
      end
      OP1REC.OP1DSADT = OPAWDT;
    end
  end

   /* temporary code - remove or changeto 'n' when*/
   /* maintenance is done to use this field.*/

  OP1REC.OP1PORMF = " "; /* po requirements met flag*/

  OP1REC.OP-SND-CNFM-FL = " "; /* don't copy value from original*/

  OP1REC.OP1NTMAL = 0;

  OP1REC.OP1OALSQ = 9999;

  OP1REC.OP1LALDT = 0;

  OP1REC.OP1NDRAW = 0;

  OP1REC.OP1DABDT = 0;

  OP1REC.OP1DRBDT = 0;

  OP1REC.XAHCD = " ";

  OP1REC.OP1ALHDT = 0;

  OP1REC.OP1PAHCD = " ";

  OP1REC.OP1ALRDT = 0;

  OP1REC.XAFCD = " ";

  OP1REC.OP1ALFDT = 0;

  OP1REC.XCHCD[1] = "00";
  OP1REC.XCHCD[2] = "00";
  OP1REC.XCHCD[3] = "00";

  OP1REC.XCSCD = "00";

  OP1REC.OP1CSADT = 0;

  OP1REC.OP1CSATM = 0;

  OP1REC.OP1PCSDT = 0;

  OP1REC.OP1PCSTM = 0;

  OP1REC.OP1CKAMT = 0;

  OP1REC.OP1DCHLD = 0;

  OP1REC.OP1CRLMP = " ";

  OP1REC.OP1CRLMR = " ";

  OP1REC.OP1VAUDT = 0;

  OP1REC.OP1VAUNB = " ";

  OP1REC.OP1OVALU = 0;

  OP1REC.OP1OTUNT = 0;

  OP1REC.OP1OSRID = 0;

  OP1REC.XOMCD = " ";

  OP1REC.OP1OMDT = 0;

  OP1REC.OP1MTREP = 0;

  OP1REC.OP1SPHDF = "N";

  OP1REC.OP1WIPIN = "N";
  OP1REC.OP1OMCMF = "N";


       /* init new fields -- added for phase ii*/

  OP1REC.OP1PCSCD = "00"; /* previous credit status code*/
  OP1REC.OP1CCKOQ = 0; /* credit check order qty*/
  OP1REC.OP1SSHPO = " "; /* small ship override*/
  OP1REC.OP1ECADT = 0; /* extended aut cancel date*/
  OP1REC.OP1ECANM = " "; /* extended aut cancel name*/
  OP1REC.OP1PCNDT = 0; /* previous cancel date*/
  OP1REC.XMDCD = OPWREC.OPWSFLOW; /* order method code*/
  OP1REC.OP1ALCQF = "N"; /* allocated qty flag*/
  OP1REC.OP1RSVQF = "N"; /* reserved qty flag*/
  OP1REC.OP1SHPQF = "N"; /* shipped qty flag*/
  OP1REC.OP1ORADT = 0; /* override auth date*/



     /* from the customer records*/

  OP1REC.OP1ALSEQ = VCULVLPD.OP1ALSEQ;
  OP1REC.XACCD = VCULVLPD.XACCD;

  OP1REC.KUCVNDFL = KUCREC.KUCVNDFL;
  OP1REC.KUNMAPCT = KUNREC.KUNMAPCT;

    /* ********************************************************/
    /* *  change in drop-ship will reset defaults(ssj 3/1/87)**/
    /* ********************************************************/

  if (OP0NW01.OP0NWDS == "Y") /* change in drop-ship*/
    OP1REC.OP11TMBF = "N"; /* one time bill flag*/
    OP1REC.OP11TMSF = "N"; /* one time ship flag*/
    OP1REC.OP1SGPAO = "N"; /* ship group override*/
  end



     /* system dates and times*/

   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  set TA2REC empty; /* reset ta0040 work record*/
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
  TA2REC.TA2RTNCD = 0;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    OP1REC.ZZZSDT = TA2REC.TA2GRGGN;
    OP1REC.ZZZCHGDT = TA2REC.TA2GRGGN;
    OP1REC.ZZZSTM = TA2REC.TA2TIMHM;
    OP1REC.ZZZCHGTM = TA2REC.TA2TIMHM;
  end

  OP1REC.ZZZCHGCT = 0;


     /* write the order header record*/

  call "IO0430" ("A ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    OPWREC.OP1GROUP = OP1REC.OP1GROUP; /* update global ws!!!*/
    COMMAREA.CA-USER-WORKAREA-4K = OPWREC.OPWSGRP;
                                   /* update commarea!!!*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* commit work*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORHDR01";
    TA1REC.TA1TBLKE = OP1REC.OP1KEY;
    TA1REC.TA1LOCAT[3] = "OP0NS40";
    TA1REC.TA1LOCAT[4] = "IO0430";
    OP0NSXS();
  end


     /* if one-time shipto address write it out*/

  if (OP1REC.OP11TMSF == "Y")
    OP5REC.OP5KEY = OP0NW01.OP0NWSVK;
    OP5REC.OP5SHPIN = "Y";
    OP5REC.OP5BILIN = "N";
    call "IO0460" ("S ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      OP5KEY = OP1REC.OP1KEY;
      OP5REC.OP1NORID = 0; /* nike order must be zeroed out!*/
      OP5REC.OP5SHPIN = "Y";
      OP5REC.OP5BILIN = "N";
      OP5REC.KUCCOID = OP1REC.KUCCOID;
      OP5REC.KUMSTRID = OP1REC.KUMSTRID;
      OP5REC.XNXCD = OP1REC.XNXCD;
      OP5REC.ZZZCHGDT = OP1REC.ZZZCHGDT; /* date same as header*/
      OP5REC.ZZZCHGTM = OP1REC.ZZZCHGTM; /* time same as header*/
      OP5REC.ZZZCHGCT = 0;
  /*  */
  /* Befor inserting the row it is being checked whether any row*/
  /* exists with the same key values in dorder.voaddr01*/
  /*  */
      call "IO0460" ("SA", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
  /*  */
  /* If no row exists then only the row is added to dorder.voaddr01*/
  /* table, else it skips inserting the row.*/
  /*  */
      if (SQLCA.VAGen_SQLCODE == 100)
        call "IO0460" ("A ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
      else
        if (SQLCA.VAGen_SQLCODE == 0)
          call "IO0460" ("U ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
        else
          TA1REC.TA1DBASE = "DORDER";
          TA1REC.TA1TBLVU = "VADDR001";
          TA1REC.TA1TBLKE = OP5REC.OP5KEY;
          TA1REC.TA1LOCAT[3] = "OP0NS40";
          TA1REC.TA1LOCAT[4] = "IO0460";
          OP0NSXS();
        end
      end
      if (SQLCA.VAGen_SQLCODE == 0)
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* commit work*/
      else
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VADDR001";
        TA1REC.TA1TBLKE = OP5REC.OP5KEY;
        TA1REC.TA1LOCAT[3] = "OP0NS40";
        TA1REC.TA1LOCAT[4] = "IO0460";
        OP0NSXS();
      end
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VADDR001";
      TA1REC.TA1TBLKE = OP5REC.OP5KEY;
      TA1REC.TA1LOCAT[3] = "OP0NS40";
      TA1REC.TA1LOCAT[4] = "IO0460";
      OP0NSXS();
    end
  end


     /* if one-time billto address write it out*/

  if (OP1REC.OP11TMBF == "Y")
    OP5REC.OP5KEY = OP0NW01.OP0NWSVK;
    OP5REC.OP5BILIN = "Y";
    OP5REC.OP5SHPIN = "N";
    call "IO0460" ("S ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      OP5KEY = OP1REC.OP1KEY;
      OP5REC.OP1NORID = 0; /* nike order must be zeroed out!*/
      OP5REC.OP5BILIN = "Y";
      OP5REC.OP5SHPIN = "N";
      OP5REC.KUCCOID = OP1REC.KUCCOID;
      OP5REC.KUMSTRID = OP1REC.KUMSTRID;
      OP5REC.XNXCD = OP1REC.XNXCD;
      OP5REC.ZZZCHGDT = OP1REC.ZZZCHGDT; /* date same as header*/
      OP5REC.ZZZCHGTM = OP1REC.ZZZCHGTM; /* time same as header*/
      OP5REC.ZZZCHGCT = 0;
  /*  */
  /* Befor inserting the row it is being checked whether any row*/
  /* exists with the same key values in dorder.voaddr01*/
  /*  */
      call "IO0460" ("SA", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
  /*  */
  /* If no row exists then only the row is added to dorder.voaddr01*/
  /* table, else it skips inserting the row.*/
  /*  */
      if (SQLCA.VAGen_SQLCODE == 100)
        call "IO0460" ("A ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
      else
        if (SQLCA.VAGen_SQLCODE == 0)
          call "IO0460" ("U ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes};
        else
          TA1REC.TA1DBASE = "DORDER";
          TA1REC.TA1TBLVU = "VADDR001";
          TA1REC.TA1TBLKE = OP5REC.OP5KEY;
          TA1REC.TA1LOCAT[3] = "OP0NS40";
          TA1REC.TA1LOCAT[4] = "IO0460";
          OP0NSXS();
        end
      end
      if (SQLCA.VAGen_SQLCODE == 0)
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* commit work*/
      else
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VADDR001";
        TA1REC.TA1TBLKE = OP5REC.OP5KEY;
        TA1REC.TA1LOCAT[3] = "OP0NS40";
        TA1REC.TA1LOCAT[4] = "IO0460";
        OP0NSXS();
      end
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VADDR001";
      TA1REC.TA1TBLKE = OP5REC.OP5KEY;
      TA1REC.TA1LOCAT[3] = "OP0NS40";
      TA1REC.TA1LOCAT[4] = "IO0460";
      OP0NSXS();
    end
  end


   /* *************************************************/
   /* * a change in drop ship will get instructions  **/
   /* * from the customer first           (ssj 3/3/87**/
   /* * -- except if salesman sample order*/
   /* *************************************************/

  if (OP0NW01.OP0NWDS == "Y" /* change in drop-ship*/
   && OP1REC.XSOCD != "07")  /* and not sales rep samples order*/
    if (OP1REC.OP1SPINF == "Y") /* special instruction flag*/
      OP0NS28(); /* get customer instructions*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* commit work*/
    end

    /* *************************************************/
    /* * take instructions from the prior order       **/
    /* *************************************************/

  else
       /* if special instructions write new text record(s)*/

    if (OP1REC.OP1SPINF == "Y")
      OP4REC.OP4KEY = OP0NW01.OP0NWSVK;
      OP4REC.OP4TRTYP = "I";
      call "IO0470" ("SS", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        OPAREC.OPASUB2 = 0; /* init seq counter*/
        while (SQLCA.VAGen_SQLCODE == 0)
          OP4REC.OP4KEY = OP0NW01.OP0NWSVK;
          OP4REC.OP4TRTYP = "I";
          call "IO0470" ("SN", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
          if (SQLCA.VAGen_SQLCODE == 0)
            OPAREC.OPASUB2 = OPAREC.OPASUB2 + 1; /* increment seq counter*/
            OP4REC.OP4KEY = OP1REC.OP1KEY;
            OP4REC.OP1NORID = 0; /* nike order must be zeroed out!*/
            OP4REC.OP4TRTYP = "I";
            OP4REC.OP4TRSEQ = OPAREC.OPASUB2; /* move seq counter*/
            OP4REC.ZZZCHGDT = OP1REC.ZZZCHGDT;
                                   /* date same as header*/
            OP4REC.ZZZCHGTM = OP1REC.ZZZCHGTM;
                                   /* time same as header*/
            OP4REC.ZZZCHGCT = 0;
            call "IO0470" ("A ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
            if (SQLCA.VAGen_SQLCODE == 0)
               /* next sentence*/
            else
              TA1REC.TA1DBASE = "DORDER";
              TA1REC.TA1TBLVU = "VTEXT001";
              TA1REC.TA1TBLKE = OP4REC.OP4KEY;
              TA1REC.TA1LOCAT[3] = "OP0NS40";
              TA1REC.TA1LOCAT[4] = "IO0470";
              OP0NSXS();
            end
          else
            if (SQLCA.VAGen_SQLCODE == +100
             && OPAREC.OPASUB2 == +0
             && OP1REC.XSOCD == "07")
              OP1REC.OP1SPINF = "N";
            else
              if (SQLCA.VAGen_SQLCODE != 100)
                TA1REC.TA1DBASE = "DORDER";
                TA1REC.TA1TBLVU = "VTEXT001";
                TA1REC.TA1TBLKE = OP4REC.OP4KEY;
                TA1REC.TA1LOCAT[3] = "OP0NS40";
                TA1REC.TA1LOCAT[4] = "IO0470";
                OP0NSXS();
              end
            end
          end
        end /* while*/
      else
        TA1REC.TA1DBASE = "DORDER";
        TA1REC.TA1TBLVU = "VTEXT001";
        TA1REC.TA1TBLKE = OP4REC.OP4KEY;
        TA1REC.TA1LOCAT[3] = "OP0NS40";
        TA1REC.TA1LOCAT[4] = "IO0470";
        OP0NSXS();
      end
      call "IO0470" ("CS", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
    end
  end



   /* *************************************************/
   /* * a change in customer  will get labels first  **/
   /* * from map, then default to customer(ssj 3/3/87**/
   /* *************************************************/

  if (OP0NW01.OP0NWDS == "Y" /* change in drop-ship*/
   && OP1REC.XSOCD != "07")  /* and not sales rep samples order*/
    if (OP0NW01.KUSTEXT1 == " " /* label from map*/
     && OP0NW01.KUSTEXT2 == " ") /* label from map*/
      if (OP1REC.OP1SPLBF == "Y") /* special labels flag*/
        OP0NS27(); /* get customer label default*/
        OP0NS26(); /* update special labels*/
      end
    else
      OP0NS26(); /* update special labels*/
    end
    /* *************************************************/
    /* * no change in customer - new labels from map  **/
    /* *                                   (ssj 3/3/87**/
    /* *************************************************/
  else
    if (OP0NW01.KUSTEXT1 != " " /* label from map*/
     || OP0NW01.KUSTEXT2 != " ") /* label from map*/
      OP0NS26(); /* update special labels*/
    else
      /* *************************************************/
      /* * take labels from the prior order             **/
      /* *************************************************/

      if (OP1REC.OP1SPLBF == "Y")
        OP4REC.OP4KEY = OP0NW01.OP0NWSVK;
        OP4REC.OP4TRTYP = "L";
        call "IO0470" ("SS", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
        if (SQLCA.VAGen_SQLCODE == 0)
          OPAREC.OPASUB2 = 0; /* init seq counter*/
          while (SQLCA.VAGen_SQLCODE == 0)
            OP4REC.OP4KEY = OP0NW01.OP0NWSVK;
            OP4REC.OP4TRTYP = "L";
            call "IO0470" ("SN", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
            if (SQLCA.VAGen_SQLCODE == 0)
              OPAREC.OPASUB2 = OPAREC.OPASUB2 + 1;
                                   /* increment seq counter*/
              OP4REC.OP4KEY = OP1REC.OP1KEY;
              OP4REC.OP1NORID = 0;
                                   /* nike order must be zeroed out!*/
              OP4REC.OP4TRTYP = "L";
              OP4REC.OP4TRSEQ = OPAREC.OPASUB2; /* move seq counter*/
              OP4REC.ZZZCHGDT = OP1REC.ZZZCHGDT; /* date same as header*/
              OP4REC.ZZZCHGTM = OP1REC.ZZZCHGTM; /* time same as header*/
              OP4REC.ZZZCHGCT = 0;
              call "IO0470" ("A ", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
              if (SQLCA.VAGen_SQLCODE == 0)
                 /* next sentence*/
              else
                TA1REC.TA1DBASE = "DORDER";
                TA1REC.TA1TBLVU = "VTEXT001";
                TA1REC.TA1TBLKE = OP4REC.OP4KEY;
                TA1REC.TA1LOCAT[3] = "OP0NS40";
                TA1REC.TA1LOCAT[4] = "IO0470";
                OP0NSXS();
              end
            else
              if (SQLCA.VAGen_SQLCODE == +100
               && OPAREC.OPASUB2 == +0
               && OP1REC.XSOCD == "07")
                OP1REC.OP1SPLBF = "N";
              else
                if (SQLCA.VAGen_SQLCODE != 100)
                  TA1REC.TA1DBASE = "DORDER";
                  TA1REC.TA1TBLVU = "VTEXT001";
                  TA1REC.TA1TBLKE = OP4REC.OP4KEY;
                  TA1REC.TA1LOCAT[3] = "OP0NS40";
                  TA1REC.TA1LOCAT[4] = "IO0470";
                  OP0NSXS();
                end
              end
            end
          end /* while*/
        else
          TA1REC.TA1DBASE = "DORDER";
          TA1REC.TA1TBLVU = "VTEXT001";
          TA1REC.TA1TBLKE = OP4REC.OP4KEY;
          TA1REC.TA1LOCAT[3] = "OP0NS40";
          TA1REC.TA1LOCAT[4] = "IO0470";
          OP0NSXS();
        end
        call "IO0470" ("CS", SQLCA, OP4REC) {isNoRefresh = yes, isExternal = yes};
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
      end
    end
  end
   /* ***********end of statement group****************/
end // end OP0NS40

// set up product records
Function OP0NS50()
   /* ************************************************************/

    /* set up product information*/

   /* ************************************************************/

     /* if order is direct ship code of '3', get the iseg numbers*/
     /* for later defaulting onto products*/

  if (OP1REC.XDSCD == "3")
    OP0NS58();
  end

     /* initialize counters and subscripts*/

  OP0NW01.OP0NWNOR = 0;
  OP0NW01.OP0NWLNB = 0;
  OPAREC.OPASUB = 1; /* screen line subscript (1-10)*/


     /* get all line items and sizes for each selected suborder*/

  while (OPAREC.OPASUB < 11)
    if (OP0NM001.OP0NMSEL[OPASUB] == "S")
      OP0NS55(); /* initialize working storage table*/
      OP8REC.OP8TASK = "SS";
      OP8REC.OP8LOCAT[1] = "OP0N020";
      OP8REC.OP8LOCAT[3] = " ";
      OP8REC.OP8LOCAT[4] = " ";
      OP8REC.OP8MAP = "OP0NM001";
      OP3REC.OP2KEY = OP0NW01.OP0NWSVK; /* 'old' order key*/
      OP3REC.OP1NORID = OP0NM001.OP1NORID[OPASUB]; /* selected subord*/
      OPBREC.OPBSZRC = 0;
      call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes}; /* select set*/
      if (OPBREC.OPBSZRC == 0)
        OP0NW01.OP0NWNOR = OP0NW01.OP0NWNOR + 1;
          /* sub order array setup in opwrec*/
        OPWREC.XWHCD[OP0NWNOR] = OP0NM001.XWHCD[OPASUB];
        OPWREC.OP1OWHMF[OP0NWNOR] = OP0NM001.OP1OWHMF[OPASUB];
        OPAREC.OPAFDT = OP0NM001.OP1CUNDT[OPASUB];
        OPAREC.OPAWYY = OPAREC.OPAFYY;
        OPAREC.OPAWMM = OPAREC.OPAFMM;
        OPAREC.OPAWDD = OPAREC.OPAFDD;
        if (OPAREC.OPAWYY > 56)
          OPAREC.OPAWCC = 19;
        else
          OPAREC.OPAWCC = 20;
        end
        OPWREC.OP1CUNDT[OP0NWNOR] = OPAREC.OPAWDT;
        OPWREC.OP1OVALU[OP0NWNOR] = 0; /* init order value*/
        OPWREC.OP1OTUNT[OP0NWNOR] = 0; /* init order total units*/
        OP8REC.OP8TASK = "SN";
        OP3REC.OP2KEY = OP0NW01.OP0NWSVK; /* 'old' key moved back*/
        OP3REC.OP1NORID = OP0NM001.OP1NORID[OPASUB]; /* sel subord*/
        OP8REC.OP8LOCAT[2] = "OP0NS50";

        OP0NW01.OP0NWCNT = 1;
        OPBREC.OPBSZRC = 0;
        while (OPBREC.OPBSZRC == 0)
          call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};

          OP0NS56(); /* load working storage table*/

          if (OPAREC.OPAERR == "Y") /* -911 return code, reconverse*/
            exit stack;
          end

        end

        OP8REC.OP8TASK = "CS"; /* close cursor does a commit*/
        call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};
        if (OPBREC.OPBSZRC != 0)
          COMMAREA.CA-USER-WORKAREA-4K = " ";
          XSPF4();
          exit program;
        end

        /* get op2key from working storage table*/

        OP0NW01.OP0NWCNT = 1;
        OP3REC.OP1PARTN = OP0NW01.OP1PARTN[OP0NWCNT];
        OP3REC.OP1CUOID = OP0NW01.OP1CUOID[OP0NWCNT];
        OP3REC.OP1NORID = OP0NW01.OP1NORID[OP0NWCNT];
        OP3REC.OP2LNINB = OP0NW01.OP2LNINB[OP0NWCNT];
        OP8REC.OP8TASK = "S ";
        OP8REC.OP8LOCAT[2] = "OP0NS50";

        OPBREC.OPBSZRC = 0;
        while (OPBREC.OPBSZRC == 0)
          call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};

          OP0NS54(); /* set up line items*/

        end
        if (OPAREC.OPAERR == "Y")
          exit stack;
        end
      else
        COMMAREA.CA-USER-WORKAREA-4K = " ";
        XSPF4();
        exit program;
      end
    end
    OPASUB = OPASUB + 1;
  end


     /* set number of products on order and last item subscript*/

  OPWREC.OPWPITM = OP0NW01.OP0NWLNB; /* number of products on order*/
  OPWREC.OPWLSTLI = OP0NW01.OP0NWLNB; /* last item subscript*/


     /* update commarea with the contents of opwrec !!!*/

  COMMAREA.CA-USER-WORKAREA-4K = OPWREC.OPWSGRP;


   /* *******************end of statement group*******************/
end // end OP0NS50

// write item/size record
Function OP0NS51()
   /* ************************************************************/

     /* complete item/size table setup and write it to database*/

   /* ************************************************************/

       /* check owner group code*/

  if (OP0NM001.XWHCD[OPASUB] in XWHTBL.XWHCD)
    if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y") /* owner grp required*/
      OP0NS52(); /* check owner group table*/
    else
      OP3REC.XOWCD = "00";
    end
  end



     /* setup product id/style id field*/

  if (OP3REC.KUIPRDID != " " /* old order product id is there*/
   && OP0NW01.OP0NWSKF == "Y") /* old or new company has style id's*/
    OP3REC.KUIPRDID = " ";
  end


     /* default iseg number for direct ship code '3' orders*/
     /*  */
     /* The Duplicate Header option is to duplicate ISEG code for all cases*/
     /* So code changing PC2INSEG for DIRECT SHIP code = '3' is commented*/
     /* Eshanm - 06/02/97*/
    /* IF OP1REC.XDSCD = '3'*/
    /* AND PC2REC.PC2INSEG > '000';*/
    /* MOVE PC2REC.PC2INSEG TO OP3REC.PC2INSEG; /* move to spec code field*/
    /* ELSE;*/
    /* MOVE '000' TO OP3REC.PC2INSEG;*/
    /* END;*/


     /* complete setup of item/size table*/

  OP3REC.OP2MSCDP = 0; /* max scaldown percent*/
  OP3REC.OP2PGRPF = "N";
  OP3REC.OP2LNIST = "OP";
  OP3REC.OP2LNSDT = OPAREC.OPACDT;
  OP3REC.XBRCD = " ";

  if (OP3REC.XHDCD[1] != " "
   || OP3REC.XHDCD[2] != " "
   || OP3REC.XHDCD[3] != " "
   || OP3REC.XHDCD[4] != " "
   || OP3REC.XHDCD[5] != " ")
    OP1REC.OP1SPHDF = "Y"; /* pack handle codes on detail*/
    OPWREC.OP1GROUP = OP1REC.OP1GROUP; /* set flag on header*/
    COMMAREA.CA-USER-WORKAREA-4K = OPWREC.OPWSGRP;
                                                    /* so change hdr in w-s*/
  end


  OP3REC.XOMCD[1] = " ";
  OP3REC.XOMCD[2] = " ";
  OP3REC.XOMCD[3] = " ";
  OP3REC.XOMCD[4] = " ";

  OP3REC.XMTCD[1] = " ";
  OP3REC.XMTCD[2] = " ";
  OP3REC.XMTCD[3] = " ";
  OP3REC.XMTCD[4] = " ";

  OP3REC.OP2OMQTY[1] = 0;
  OP3REC.OP2OMQTY[2] = 0;
  OP3REC.OP2OMQTY[3] = 0;
  OP3REC.OP2OMQTY[4] = 0;

  OP3REC.OP2OMDT[1] = 0;
  OP3REC.OP2OMDT[2] = 0;
  OP3REC.OP2OMDT[3] = 0;
  OP3REC.OP2OMDT[4] = 0;

  OP3REC.OP1MTREP[1] = 0;
  OP3REC.OP1MTREP[2] = 0;
  OP3REC.OP1MTREP[3] = 0;
  OP3REC.OP1MTREP[4] = 0;

  if (OP3REC.OP2PRCOF == "Y")
    OPWREC.OPWAUTFL = "Y";
  end

  OP3REC.OP2TORGQ = 0;
  OP3REC.OP2TONOQ = 0;
  OP3REC.OP2TALCQ = 0;
  OP3REC.OP2TOHRQ = 0;
  OP3REC.OP2TWIPQ = 0;
  OP3REC.OP2TSHPQ = 0;
  OP3REC.OP2TCNLQ = 0;
  OP3REC.OP2AUPRC = 0;
  OP3REC.OP2LNIVL = 0;
  OP3REC.OP2NSIZE = 0;
  OP3REC.XAFCD = 0; /* alloc force cd*/
  OP3REC.OP1ALFDT = 0; /* alloc force date*/

  OP3REC.ZZZCHGDT = OP1REC.ZZZCHGDT;
  OP3REC.ZZZCHGTM = OP1REC.ZZZCHGTM;
  OP3REC.ZZZCHGCT = 0;


     /* complete size array (occurs 40)*/

  /* original quantity is adjusted if order is added less than 60*/
  /* days after the cutoff date.*/
  /*  */
  OPAREC.OPASUB2 = 1;
  while (OPASUB2 < 41)
    if (OP3REC.OP3SZAFL[OPASUB2] != "Y")
      /* next sentence*/
    else
      if (OP3REC.OP3ONOQT[OPASUB2] == 0
       && OP3REC.OP3SHPQT[OPASUB2] == 0)
        OP3REC.OP3SZAFL[OPASUB2] = "N";
      else
        if (OP0NW01.OP0NW-DAYS-PAST-CUTOFF >= 60)
          OP3ORGQT[OPASUB2] = 0;
          OP3ONOQT[OPASUB2] = OP3ONOQT[OPASUB2] + OP3SHPQT[OPASUB2];
        else
          OP3ORGQT[OPASUB2] = OP3ONOQT[OPASUB2] + OP3SHPQT[OPASUB2];
          OP3ONOQT[OPASUB2] = OP3ONOQT[OPASUB2] + OP3SHPQT[OPASUB2];
        end
      end
    end
    OP3REC.OP3ALQT[OPASUB2] = 0;
    OP3REC.OP3OHRQT[OPASUB2] = 0;
    OP3REC.OP3WPRQT[OPASUB2] = 0;
    OP3REC.OP3SHPQT[OPASUB2] = 0;
    OP3REC.OP3CNLQT[OPASUB2] = 0;
    OPASUB2 = OPASUB2 + 1;
  end /* while*/


     /* write item/size table to database*/

  OP8REC.OP8TASK = "A ";
  OP8REC.OP8LOCAT[2] = "OP0NS51";
  OPBREC.OPBSZRC = 0;
  call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};
  if (OPBREC.OPBSZRC == 0)
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
  else
    COMMAREA.CA-USER-WORKAREA-4K = " ";
    XSPF4();
    exit program;
  end


      /* if future order type needdate past prod deadline,*/
      /* write audit transaction to notify production.*/

  if (OP0NW01.XOTFUTRF == "Y" /* if futures order*/
   && OP0NW01.OP0NWPPD == "Y") /* if after prod deadline*/
    if (OP1REC.XBDCD in XBDTBL.XBDCD)
      if (XBDTBL.XBDBKOFL[sysVar.arrayIndex] == "Y" /* if bulk order flag on*/
       && XBDTBL.XBDSETFL[sysVar.arrayIndex] == "Y")
         /* next sentence*/
      else
        OP0NS5B(); /* write opurec production audit record*/
      end
    end
  end


   /* ******************end of statement group********************/
end // end OP0NS51

// check owner group code
Function OP0NS52()


       /* ***************************************************/
       /* * this statement group checks the owner group    **/
       /* * code for the duplicated product                **/
       /* ***************************************************/

       /* build xowtbl key*/

  OP0NW01.XWHCD = OP0NM001.XWHCD[OPASUB];
  OP0NW01.XOWCD = OP3REC.XOWCD;

  if (OP0NW01.XOWKEY in XOWTBL.XOWKEY
   && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
     /* next sentence*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    converseLib.validationFailed(126); /* owner grp is not valid for all products*/
    OPAREC.OPAERR = "Y";
    set OP0NM001.XWHCD[OPASUB] cursor, bold;
    exit stack;
  end


       /* check for the universal owner group code --*/
       /* if this owner group code was entered, any sales*/
       /* rep is accepted*/

  if (XOWTBL.XOWALUSR[sysVar.arrayIndex] == "Y") /* this is it*/
    return;
  end /* continue*/



       /* check the xoltbl table*/

  sysVar.arrayIndex = 1;
  OP0NW01.OP0NWFND = "N";

  while (XOLTBL.XSVCD[sysVar.arrayIndex] != 9999 /* while not end of table*/
   && XOLTBL.XWHCD[sysVar.arrayIndex] != "99" 
   && OP0NW01.OP0NWFND == "N") /* and not found*/
    if (XOLTBL.XSVCD[sysVar.arrayIndex] == OP1REC.OP1ENREP
     && XOLTBL.XWHCD[sysVar.arrayIndex] == OP0NM001.XWHCD[OPASUB]
     && XOLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      OP0NW01.OP0NWFND = "Y";
    else
      sysVar.arrayIndex = sysVar.arrayIndex + 1;
    end
  end


  if (OP0NW01.OP0NWFND == "N") /* if found*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    converseLib.validationFailed(126); /* owner grp is not valid for all products*/
    set OP0NM001.XWHCD[OPASUB] cursor, bold;
    OPAREC.OPAERR = "Y";
    exit stack;
  end

   /* record found continue edit.*/


  if (XOLTBL.XOLALLOF[sysVar.arrayIndex] == "Y")
     /* next sentence*/
  else
    OP0NS53(); /* check individual owner codes*/
  end



end // end OP0NS52

// check owner group code
Function OP0NS53()



       /* ****************************************************/
       /* * this statement group checks the owner group code**/
       /* * in the xoltbl table for the duplicated product  **/
       /* ****************************************************/


  if (OP3REC.XOWCD == XOLTBL.XOWCD1[sysVar.arrayIndex])
    return; /* go back*/
  end

  if (OP3REC.XOWCD == XOLTBL.XOWCD2[sysVar.arrayIndex])
    return; /* go back*/
  end

  if (OP3REC.XOWCD == XOLTBL.XOWCD3[sysVar.arrayIndex])
    return; /* go back*/
  end

  if (OP3REC.XOWCD == XOLTBL.XOWCD4[sysVar.arrayIndex])
    return; /* go back*/
  end

  if (OP3REC.XOWCD == XOLTBL.XOWCD5[sysVar.arrayIndex])
    return; /* go back*/
  end

  if (OP3REC.XOWCD == XOLTBL.XOWCD6[sysVar.arrayIndex])
    return; /* go back*/
  end

  if (OP3REC.XOWCD == XOLTBL.XOWCD7[sysVar.arrayIndex])
    return; /* go back*/
  end

  if (OP3REC.XOWCD == XOLTBL.XOWCD8[sysVar.arrayIndex])
    return; /* go back*/
  end

  if (OP3REC.XOWCD == XOLTBL.XOWCD9[sysVar.arrayIndex])
    return; /* go back*/
  end

  if (OP3REC.XOWCD == XOLTBL.XOWCD10[sysVar.arrayIndex])
    return; /* go back*/
  end

  if (OP3REC.XOWCD == XOLTBL.XOWCD11[sysVar.arrayIndex])
    return; /* go back*/
  end

  if (OP3REC.XOWCD == XOLTBL.XOWCD12[sysVar.arrayIndex])
    return; /* go back*/
  end

  if (OP3REC.XOWCD == XOLTBL.XOWCD13[sysVar.arrayIndex])
    return; /* go back*/
  end

  if (OP3REC.XOWCD == XOLTBL.XOWCD14[sysVar.arrayIndex])
    return; /* go back*/
  end

  if (OP3REC.XOWCD == XOLTBL.XOWCD15[sysVar.arrayIndex])
    return; /* go back*/
  end

  if (OP3REC.XOWCD == XOLTBL.XOWCD16[sysVar.arrayIndex])
    return; /* go back*/
  end

  if (OP3REC.XOWCD == XOLTBL.XOWCD17[sysVar.arrayIndex])
    return; /* go back*/
  end

  if (OP3REC.XOWCD == XOLTBL.XOWCD18[sysVar.arrayIndex])
    return; /* go back*/
  end

  if (OP3REC.XOWCD == XOLTBL.XOWCD19[sysVar.arrayIndex])
    return; /* go back*/
  end

  if (OP3REC.XOWCD == XOLTBL.XOWCD20[sysVar.arrayIndex])
    return; /* go back*/
  end


  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  converseLib.validationFailed(126); /* owner grp is not valid for all products*/
  OPAREC.OPAERR = "Y";
  set OP0NM001.XWHCD[OPASUB] cursor, bold;
  exit stack;



   /* ************************************************************/
end // end OP0NS53

// set up line items
Function OP0NS54()
   /* ************************************************************/

    /* set up line item array in opwrec*/

   /* ************************************************************/

  set OPPREC empty;

  OP0NSA2(); /* get sycrec*/

  if (OPBREC.OPBSZRC == 0)
    if (OP0NW01.XOTFUTRF == "Y") /* futures order type*/
      OP0NSPD(); /* chk needdate past prod d/l*/
    end
          /* ***keep ck prod dead. before ck avail. so don't have*/
          /* ***to call sycrec again*/

    if (OP1REC.XBDCD != "B"
     && OP1REC.XBDCD != "2"
     && OP1REC.XBDCD != "Z")
      OP0NSA3(); /* load opprec for availability*/
      OPPREC.OPPDECAV = "Y"; /* decrement availability*/
      call "OP1610" (OPPREC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* decrement avail*/
      OP0NSA4(); /* process op1610 return code*/

      if (OPAREC.OPAERR == "Y") /* if avail. not ok*/
        if (OPPREC.OPPRTNCD == 02) /* deadlock*/
           /* next sentence*/
        else
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.rollback();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
        end
        exit stack;
      end
    end

    OP0NW01.OP0NWPPD = "N"; /* init prod deadline to 'n'*/
    if (OP3REC.OP2LNIST != "XL"
     && OP3REC.OP2TONOQ > 0)
      /* ***********************   new op3rec key setup ********/
      OP3REC.OP2KEY = OP1REC.OP1KEY; /* new order id*/
      OP3REC.OP1NORID = OP0NW01.OP0NWNOR; /* new sub order id*/
        /* ***********  accum value and quantity in suborder array*/
      OPWREC.OP1OVALU[OP0NWNOR] = OPWREC.OP1OVALU[OP0NWNOR] + OP3REC.OP2LNIVL;
      OPWREC.OP1OTUNT[OP0NWNOR] = OPWREC.OP1OTUNT[OP0NWNOR] + OP3REC.OP2TONOQ;
      OPWREC.OP1OTUNT[OP0NWNOR] = OPWREC.OP1OTUNT[OP0NWNOR] + OP3REC.OP2TSHPQ;
        /* ***********  setup line item array in opwrec*/
      OP0NW01.OP0NWLNB = OP0NW01.OP0NWLNB + 1; /* line item incremented*/
      OP3REC.OP2LNINB = OP0NW01.OP0NWLNB; /* new line item number*/
      OPAREC.OP1NORID = OP3REC.OP1NORID;
      if (OP0NW01.OP0NWLNB <= 900)
        OPWREC.OPWHEXNO[OP0NWLNB] = OPAREC.OPWHEXNO;
        OPWREC.OPWSELCD[OP0NWLNB] = " ";
      end
      OP0NS51(); /* complete item/size record and write it out*/
    end

    OP0NW01.OP0NWCNT = OP0NW01.OP0NWCNT + 1; /* get next item from w-s*/
    if (OP0NW01.OP0NWCNT == +900) /* hit 500 product limit*/
      OPBREC.OPBSZRC = 1; /* shut down loop*/
    else
      OP3REC.OP1PARTN = OP0NW01.OP1PARTN[OP0NWCNT];
      OP3REC.OP1CUOID = OP0NW01.OP1CUOID[OP0NWCNT];
      OP3REC.OP1NORID = OP0NW01.OP1NORID[OP0NWCNT];
      OP3REC.OP2LNINB = OP0NW01.OP2LNINB[OP0NWCNT];
      OP8REC.OP8TASK = "S ";
      OP8REC.OP8LOCAT[2] = "OP0NS50";
    end

  else
    if (OPBREC.OPBSZRC == -911)
      converseLib.validationFailed(10);
      OPAREC.OPAERR = "Y";
    else
      if (OPBREC.OPBSZRC != 1)
        COMMAREA.CA-USER-WORKAREA-4K = " ";
        XSPF4();
        exit program;
      end
    end
  end


end // end OP0NS54

// initialize ws table
Function OP0NS55()
   /* ************************************************************/

    /* initialize working storage table*/

   /* ************************************************************/


  OP0NW01.OP0NWCNT = 1; /* initialize subscript*/

  while (OP0NW01.OP0NWCNT < 901) /* initialize op2key elements*/
    OP0NW01.OP1PARTN[OP0NWCNT] = " ";
    OP0NW01.OP1CUOID[OP0NWCNT] = 0;
    OP0NW01.OP1NORID[OP0NWCNT] = 0;
    OP0NW01.OP2LNINB[OP0NWCNT] = 0;
    OP0NW01.OP0NWCNT = OP0NW01.OP0NWCNT + 1;
  end




   /* *******************end of statement group*******************/
end // end OP0NS55

// load ws table
Function OP0NS56()
   /* ************************************************************/

    /* load working storage table*/

   /* ************************************************************/


  if (OPBREC.OPBSZRC == 0)
    OP0NW01.OP1PARTN[OP0NWCNT] = OP3REC.OP1PARTN;
    OP0NW01.OP1CUOID[OP0NWCNT] = OP3REC.OP1CUOID;
    OP0NW01.OP1NORID[OP0NWCNT] = OP3REC.OP1NORID;
    OP0NW01.OP2LNINB[OP0NWCNT] = OP3REC.OP2LNINB;
    OP0NW01.OP0NWCNT = OP0NW01.OP0NWCNT + 1;
    OP8REC.OP8TASK = "SN";
    OP8REC.OP8LOCAT[2] = "OP0NS50";
  else
    if (OPBREC.OPBSZRC == -911)
      converseLib.validationFailed(10);
      OPAREC.OPAERR = "Y";
    else
      if (OPBREC.OPBSZRC != 1)
        COMMAREA.CA-USER-WORKAREA-4K = " ";
        XSPF4();
        exit program;
      end
    end
  end


   /* *******************end of statement group*******************/
end // end OP0NS56

// edit don't ship before date
Function OP0NS57()
  if (OP0NM001.OP1DSBDT[OPASUB] == "MMDDYY"
   || OP0NM001.OP1DSBDT[OPASUB] == " "
   || OP0NM001.OP1DSBDT[OPASUB] == "000000")
    OP1REC.OP1DSBDT = 0;
    set OP0NM001.OP1DSBDT[OPASUB] initialAttributes;
  else
    /* -----------------------  Y2K IN BEGIN  -------------------------*/
    /*  */
    set TA2REC empty; /* /reset ta0040 work record*/
    /*  */
    /* ------------------------  Y2K IN END  --------------------------*/
    TA2REC.TA2RTNCD = 0;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "A";
    TA2REC.TA2GRGA = OP0NM001.OP1DSBDT[OPASUB];
    call "TA0040" (TA2REC) {isExternal = yes};
    if (TA2REC.TA2RTNCD > 0)
      OP1REC.OP1DSBDT = 0;
      set OP0NM001.OP1DSBDT[OPASUB] cursor, bold;
      converseLib.validationFailed(69);
      OPAREC.OPAERR = "Y";
    else
      OP0NS59(); /* check special cust grp codes*/
      if (OPAREC.OPAERR == "Y") /* if err, (rec not found)*/
        return; /* return*/
      end
      /* TT#4895 * begin * Rharat * 06/20/2000 *************/
      OPACDT = VGVar.currentGregorianDate; /* move current date*/
      if (TA2REC.TA2GRGGN < OPACDT) /* don't ship before dt lt today*/
        set OP0NM001.OP1DSBDT[OPASUB] cursor, bold;
        converseLib.validationFailed(1008); /* DNSB can't be LT today*/
        OPAREC.OPAERR = "Y"; /* set error flag*/
        return; /* don't process*/
      end
      /* TT#4895 *  end  * Rharat * 06/20/2000 *************/
      if (OP0NW01.OP0NWSGC == "Y" /* if certain spec cust grp code fnd*/
       || OP1REC.XSOCD == "07"    /* or if certain sales office*/
       || OP1REC.XSOCD == "08"    /* exclude from edit check*/
       || OP1REC.XSOCD == "12"    
       || OP1REC.XSOCD == "17")  
        OP1REC.OP1DSBDT = TA2REC.TA2GRGGN;
        set OP0NM001.OP1DSBDT[OPASUB] initialAttributes;
      else
        if (TA2REC.TA2GRGGN <= OP1REC.OP1CUNDT)
          OP1REC.OP1DSBDT = TA2REC.TA2GRGGN;
        else
          set TA2REC empty;
          TA2REC.TA2DBDFN = OP1REC.OP1CUNDT; /* NEED DATE*/
          OPAREC.OPAWCC = OPAREC.OPACCC; /* cc*/
          OPAREC.OPAFDT = OP0NM001.OP1DSBDT[OPASUB]; /* mmddyy*/
          OPAREC.OPAWYY = OPAREC.OPAFYY;
          OPAREC.OPAWMM = OPAREC.OPAFMM;
          OPAREC.OPAWDD = OPAREC.OPAFDD;
          TA2REC.TA2DBDTN = OPAREC.OPAWDT; /* DSNB DATE*/
          TA2REC.TA2DTOPT = "DAYSDIFF";
          TA2REC.TA2RTNCD = 0;
          TA2REC.TA2GRTYP = "G";

          call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

          if (TA2REC.TA2RTNCD == 0)
            if (TA2REC.TA2DBDDN > 21) /* The DSNB date can't be*/
              if (COMMAREA.CAUSERID in YOSTBL.XXXUSRID
               && YOSTBL.YOSSPGFL[sysVar.arrayIndex] == "Y") /* authorized*/
                OP1REC.OP1DSBDT = TA2REC.TA2DBDTN;
                set OP0NM001.OP1DSBDT[OPASUB] initialAttributes;
              else
                if (COMMAREA.CACHGFL == "Y"
                 && COMMAREA.CACLVL[1] == "Y") /* is allocation mgr*/
                  OP1REC.OP1DSBDT = TA2REC.TA2DBDTN;
                  set OP0NM001.OP1DSBDT[OPASUB] initialAttributes;
                else
                  OPAREC.OPAERR = "Y"; /* > 21 days past the*/
                  converseLib.validationFailed(633); /* need date*/
                  set OP0NM001.OP1DSBDT[OPASUB] cursor, modified, bold;
                end
              end
            else
              OP1REC.OP1DSBDT = TA2REC.TA2DBDTN;
              set OP0NM001.OP1DSBDT[OPASUB] initialAttributes;
            end
          end
        end
      end
    end
  end

end // end OP0NS57

// default iseg for xdscd '3'
Function OP0NS58()

       /* default to iseg number from dprodc.vprdcu01*/
       /* if direct ship code eq '3' (indirect ship)*/

  set PC2REC empty; /* initialize pc2rec*/

  PC2REC.KUCCOID = OP1REC.KUCCOID;
  PC2REC.KUMSTRID = OP1REC.KUMSTRID;
  PC2REC.XNXCD = OP1REC.XNXCD;
  PC2REC.XGPCD = OP1REC.XGPCD;

  call "IO3340" ("SA", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes}; /* call spec cd*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "OP0N    ";
    TA1REC.TA1LOCAT[1] = "SA      ";
    TA1REC.TA1LOCAT[2] = "OP0NS58 ";
    TA1REC.TA1LOCAT[3] = "IO3340  ";
    TA1REC.TA1LOCAT[4] = "        ";
    TA1REC.TA1MAP = "OP0NM001";
    TA1REC.TA1DBASE = "DPRODC  ";
    TA1REC.TA1TBLVU = "VPRDCU01";
    TA1REC.TA1TBLKE = " ";
    OP0NW01.OP0NWTK1 = OP1REC.OP1CUOID; /* cust ord id*/
    OP0NW01.OP0NWTK2 = OP1REC.OP1NORID; /* nike id*/
    TA1REC.TA1TBLKE = OP0NW01.OP0NWT1;
    try
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end /* abend routine*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear ws on error*/
  end

end // end OP0NS58

// check for special cust group
Function OP0NS59()
       /* ********************************************************/
       /* * this statement group accesses the special customer  **/
       /* * group record and checks the XSG code.  Certain      **/
       /* * values are flagged as an exception to the DSNB edit **/
       /* ********************************************************/

  OP0NW01.OP0NWSGC = "N";
  KUPREC.KUCCOID = OP0NM001.KUCCOID; /* Key Load: Cust Co*/
  KUPREC.KUMSTRID = OP0NM001.KUMSTRID; /* Cust Store*/
  KUPREC.XNXCD = OP0NM001.XNXCD; /* Cust Dept*/
  KUPREC.XGPCD = OP1REC.XGPCD; /* GPC*/

  call "IO0260" ("S ", SQLCA, KUPREC) {isNoRefresh = yes, isExternal = yes};

      /* check DB2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check rc*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if not found*/
      return;
    else
      TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
      TA1REC.TA1TBLVU = "VCUGRP01"; /* table view*/
      TA1REC.TA1TBLKE = KUPREC.KUPGRP; /* key value*/
      TA1REC.TA1LOCAT[3] = "OP0NS59 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = "IO0260  "; /* i/o mod name*/
      XSOPS02(); /* abend routine*/
    end
  end


  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex <= 10)
    if (OP0NW01.OP0NWSGC == "N")
      if (KUPREC.XSGCD[sysVar.arrayIndex] == "MI"
       || KUPREC.XSGCD[sysVar.arrayIndex] == "MB"
       || KUPREC.XSGCD[sysVar.arrayIndex] == "12"
       || KUPREC.XSGCD[sysVar.arrayIndex] == "BK"
       || KUPREC.XSGCD[sysVar.arrayIndex] == "AA"
       || KUPREC.XSGCD[sysVar.arrayIndex] == "AF")
        OP0NW01.OP0NWSGC = "Y";
        sysVar.arrayIndex = sysVar.arrayIndex + 1;
      end
      sysVar.arrayIndex = sysVar.arrayIndex + 1;
    else
      sysVar.arrayIndex = 11;
    end
  end

   /* ************************************************************/
end // end OP0NS59

// write opurec audit record
Function OP0NS5B()



  set OPUREC empty;

  OPUREC.OPUAUDTP = "QA"; /* quantity add*/
  OPUREC.XXXPGMNB = "OP0N";
  OPUREC.OP1PARTN = OP1REC.OP1PARTN;
  OPUREC.OP1CUOID = OP1REC.OP1CUOID;
  OPUREC.OP1NORID = OP3REC.OP1NORID;
  OPUREC.OP2LNINB = OP3REC.OP2LNINB;
  OPUREC.XGPCD = OP1REC.XGPCD;
  OPUREC.SY1STNBR = OP3REC.SY1STNBR;
  OPUREC.SY2CLRID = OP3REC.SY2CLRID;
  OPUREC.XDMCD = OP3REC.XDMCD;
  OPUREC.XOMCD = OP3REC.XOMCD;
  OPUREC.XQACD = OP3REC.XQACD;
  OPUREC.XOWCD = OP3REC.XOWCD;
  OPUREC.XOTCD = OP1REC.XOTCD;
  OPUREC.OP1CUNDT = OPWREC.OP1CUNDT[OP0NWNOR];
  OPUREC.XWHCD = OPWREC.XWHCD[OP0NWNOR];
  OPUREC.XDVCD = OP1REC.XDVCD;
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  set TA2REC empty; /* reset ta0040 work record*/
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    OPUREC.ZZZSDT = TA2REC.TA2GRGGN;
    OPUREC.ZZZSTM = TA2REC.TA2TIMHM;
  end

  OPAREC.OPASUB2 = 1;
  while (OPASUB2 < 41)
    if (OP3REC.OP3SZAFL[OPASUB2] == "Y")
      OPUREC.OPUAUDQT[OPASUB2] = OP3REC.OP3ONOQT[OPASUB2];
    else
      OPUREC.OPUAUDQT[OPASUB2] = 0;
    end
    OPASUB2 = OPASUB2 + 1;
  end


  call "IO3210" ("A ", SQLCA, OPUREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORAUD01";
    TA1REC.TA1LOCAT[1] = "OP0NS51";
    TA1REC.TA1LOCAT[3] = "IO3210";
    OP0NW01.OP0NWTK1 = OP1REC.OP1CUOID;
    OP0NW01.OP0NWTK2 = OP1REC.OP1NORID;
    OP0NW01.OP0NWTK3 = OP3REC.SY1STNBR;
    OP0NW01.OP0NWTK4 = OP3REC.SY2CLRID;
    TA1REC.TA1TBLKE = OP0NW01.OP0NWT1;
    OP0NSXS(); /* common abend*/
  end

end // end OP0NS5B

// edit customer on dupe order
Function OP0NS60()


       /* *******************************************************/
       /* * this statement grp validates the customer with     **/
       /* * the gpc's associated                               **/
       /* *******************************************************/

  call "IO0280" ("SN", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* get first gpc rec for that cust*/
   || SQLCA.VAGen_SQLCODE == 100) /* err will be processed later*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUST001";
    OP0NW01.OP0NWTK1 = KUNREC.KUCCOID;
    TA1REC.TA1TBLKE = OP0NW01.OP0NWTK1;
    TA1REC.TA1LOCAT[3] = "OP0NS60";
    TA1REC.TA1LOCAT[4] = "IO0280";
    OP0NSXS();
  end

   /* *************************************************************/
end // end OP0NS60

// EDIT PF7 AND PF8
Function OP0NS65()


    /* CHECK FOR SELECTION AND PF7/PF8 AT THE SAME TIME*/

  OPAREC.OPASUB = 10; /* init subscript*/
  while (OPAREC.OPASUB > 0)
    if (OP0NM001.OP0NMSEL[OPASUB] == "S") /* selection was made*/
      converseLib.validationFailed(599); /* cannot select options and chg page #*/
      OPAREC.OPAERR = "Y"; /* set error flag*/
      set OP0NM001.OP0NMSEL[OPASUB] cursor, bold;
    end
    OPAREC.OPASUB = OPAREC.OPASUB - 1; /* increment by -1*/
  end


    /* PF7 EDIT*/

  if (converseVar.eventKey is pf7
   && OP0NM001.OP0NMF1P == 1) /* page 1*/
    converseLib.validationFailed(192); /* cannot scroll backward*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
  end


    /* PF8 EDIT*/

  if (converseVar.eventKey is pf8
   && OP0NM001.OP0NMF1P == OP0NM001.OP0NMF1M) /* current page = last page*/
    converseLib.validationFailed(191); /* cannot scroll forward*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
  end


    /* CHECK FOR PAGE # CHANGING WHEN PF7 OR PF8*/

  if (OP0NM001.OP0NMF1P != OP0NW01.OP0NWF1P) /* current page has changed*/
    converseLib.validationFailed(597); /* cannot chg page # and pf7/pf8 at same time*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0NM001.OP0NMF1P cursor, bold;
    OP0NM001.OP0NMF1P = OP0NW01.OP0NWF1P; /* reset page number*/
  end


  if (OPAREC.OPAERR == "N") /* no errors*/
    if (converseVar.eventKey is pf7)
      OP0NW01.OP0NWF1P = OP0NW01.OP0NWF1P - 1; /* subtract 1 page*/
    else
      if (converseVar.eventKey is pf8)
        OP0NW01.OP0NWF1P = OP0NW01.OP0NWF1P + 1; /* add 1 page*/
      end
    end
    OP0NM001.OP0NMF1P = OP0NW01.OP0NWF1P; /* set map page number*/
  end


end // end OP0NS65

// EDIT MAP PAGE FIELD
Function OP0NS70()


     /* edit page number equal to zero*/

  if (OP0NM001.OP0NMF1P == 0) /* if page # chged to 0*/
    converseLib.validationFailed(600);
                                   /* page number must be greater than zero*/
    OPAREC.OPAERR = "Y"; /* set error on to reconverse screen*/
    set OP0NM001.OP0NMF1P cursor, bold; /* position cursor*/
    OP0NM001.OP0NMF1P = OP0NW01.OP0NWF1P; /* reset page #*/
    return;
  end

     /* edit page number greater than maximum page*/

  if (OP0NM001.OP0NMF1P > OP0NM001.OP0NMF1M) /* if page chg gt max page*/
    converseLib.validationFailed(598); /* page cannot exceed max page*/
    OPAREC.OPAERR = "Y"; /* set error on to reconverse screen*/
    set OP0NM001.OP0NMF1P cursor, bold; /* position cursor*/
    OP0NM001.OP0NMF1P = OP0NW01.OP0NWF1P; /* reset page #*/
    return;
  end

     /* edit page number and selection made at same time*/

  OPAREC.OPAERR = "Y"; /* set false error flag on for*/
                                   /* reconverse*/
  if (OPAREC.OPASUB1 > 0 /* a suborder was selected*/
   || OP0NM001.KUCCOID != OP0NW01.OP0NWOCO
   || OP0NM001.KUMSTRID != OP0NW01.OP0NWOST
   || OP0NM001.XNXCD != OP0NW01.XNXCD
   || OP0NM001.XXXZIP != OP0NW01.XXXZIP)
    converseLib.validationFailed(599); /* cannot chg flds & page at same time*/
    OP0NM001.OP0NMF1P = OP0NW01.OP0NWF1P; /* reset page number*/
  else
    OP0NW01.OP0NWF1P = OP0NM001.OP0NMF1P; /* format page number*/
    OP0NSR0(); /* read/load temp storage*/
  end

   /* ********************end of statement group******************/
end // end OP0NS70

// initial check of availability
Function OP0NSA1()
     /* initialize counters and subscripts*/


  OP0NW01.OP0NWNOR = 0;
  OP0NW01.OP0NWLNB = 0;
  OPAREC.OPASUB = 1; /* screen line subscript (1-10)*/

  OPAREC.OPAERR = "N"; /* set for checking availability*/

     /* get all line items and sizes for each selected suborder*/

  while (OPAREC.OPASUB < 11)
    if (OP0NM001.OP0NMSEL[OPASUB] == "S")
      OP8REC.OP8TASK = "SS";
      OP8REC.OP8LOCAT[1] = "OP0N020";
      OP8REC.OP8LOCAT[3] = " ";
      OP8REC.OP8LOCAT[4] = " ";
      OP8REC.OP8MAP = "OP0NM001";
      OP3REC.OP2KEY = OP0NW01.OP0NWSVK; /* 'old' order key*/
      OP3REC.OP1NORID = OP0NM001.OP1NORID[OPASUB]; /* selected subord*/
      OPBREC.OPBSZRC = 0;
      call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes}; /* select set*/
      if (OPBREC.OPBSZRC == 0)
        OP8REC.OP8TASK = "SN";
        OP8REC.OP8LOCAT[2] = "OP0NSA6";

        OP0NW01.OP0NWCNT = 1;
        OPBREC.OPBSZRC = 0;
        while (OPBREC.OPBSZRC == 0)
          OP0NSA6(); /* check availability routine*/

          if (OPAREC.OPAERR == "Y") /* error found*/
            exit stack;
          end
        end

        OP8REC.OP8LOCAT[2] = "OP0NSA1";
        OP8REC.OP8TASK = "CS"; /* close cursor does a commit*/
        call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};
        if (OPBREC.OPBSZRC != 0)
          COMMAREA.CA-USER-WORKAREA-4K = " ";
          XSPF4();
          exit program;
        end
      else
        COMMAREA.CA-USER-WORKAREA-4K = " ";
        XSPF4();
        exit program;
      end
    end
    OPASUB = OPASUB + 1;
  end

end // end OP0NSA1

// get sycrec dprod.vcolor02
Function OP0NSA2()

  set SYCREC empty;
  set SQLCA empty;

      /* set up read key*/
  SYCREC.XGPCD = OP1REC.XGPCD; /* gpc*/
  SYCREC.SY1STNBR = OP3REC.SY1STNBR; /* style*/
  SYCREC.SY2CLRID = OP3REC.SY2CLRID; /* color*/
  SYCREC.XDMCD = OP3REC.XDMCD; /* dimension*/

      /* read db2*/

  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes}; /* single select*/

      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good return*/
    if (OP1REC.XDZ-DATA-DIST-CD == "CA") /* CANA*/
      set WSY2000 empty;
      WSY2000.XDR-PROD-REG-CD = "05";
      OP0NS-SEL-SY2000(); /* CANA call SY2000*/
      if (OP0NW01.OP0NW-WSY2000-FND-FLAG == "Y") /* CANA found*/
        SYCREC.SY2CEDT1 = WSY2000.SY-LIFE-CYC-EDT[1]; /* CANA*/
        SYCREC.SY2CEDT2 = WSY2000.SY-LIFE-CYC-EDT[2]; /* CANA*/
        SYCREC.SY2CEDT3 = WSY2000.SY-LIFE-CYC-EDT[3]; /* CANA*/
        SYCREC.SY2CEDT4 = WSY2000.SY-LIFE-CYC-EDT[4]; /* CANA*/
        SYCREC.XLCCD1 = WSY2000.XLC-LIFE-CYC-CD[1]; /* CANA*/
        SYCREC.XLCCD2 = WSY2000.XLC-LIFE-CYC-CD[2]; /* CANA*/
        SYCREC.XLCCD3 = WSY2000.XLC-LIFE-CYC-CD[3]; /* CANA*/
        SYCREC.XLCCD4 = WSY2000.XLC-LIFE-CYC-CD[4]; /* CANA*/
      else /* CANA*/
        if (WSY2000.WSY2000-RETURN-CODE == 98) /* CANA database busy*/
          OPAREC.OPAERR = "Y"; /* CANA*/
          converseLib.validationFailed(10); /* CANA database busy*/
          exit stack; /* / * CANA*/
        else /* CANA*/
          if (WSY2000.WSY2000-RETURN-CODE == 02) /* CANA style/color not found*/
            OPAREC.OPAERR = "Y"; /* CANA*/
            converseLib.validationFailed(911); /* CANA style/color not found*/
            exit stack; /* / * CANA*/
          else /* CANA*/
            OPAREC.OPAERR = "Y"; /* CANA*/
            converseLib.validationFailed(909); /* CANA database error*/
            OP0NS1P(); /* CANA purge temp storage*/
            exit stack; /* / * CANA*/
          end
        end
      end
    else
      if (OP1REC.XGPCD == "03")
        if (COMMAREA.XDVCD == "02" /* userid assigned to europe*/
         || COMMAREA.XDVCD == "03") /* userid assigned to asia*/
           /* continue processing*/
        else
          set WSY2000 empty;
          WSY2000.XDR-PROD-REG-CD = "01";
          OP0NS-SEL-SY2000(); /* call SY2000*/
          if (OP0NW01.OP0NW-WSY2000-FND-FLAG == "Y") /* found*/
            SYCREC.SY2CEDT1 = WSY2000.SY-LIFE-CYC-EDT[1];
            SYCREC.SY2CEDT2 = WSY2000.SY-LIFE-CYC-EDT[2];
            SYCREC.SY2CEDT3 = WSY2000.SY-LIFE-CYC-EDT[3];
            SYCREC.SY2CEDT4 = WSY2000.SY-LIFE-CYC-EDT[4];
            SYCREC.XLCCD1 = WSY2000.XLC-LIFE-CYC-CD[1];
            SYCREC.XLCCD2 = WSY2000.XLC-LIFE-CYC-CD[2];
            SYCREC.XLCCD3 = WSY2000.XLC-LIFE-CYC-CD[3];
            SYCREC.XLCCD4 = WSY2000.XLC-LIFE-CYC-CD[4];
          else
            if (WSY2000.WSY2000-RETURN-CODE == 98) /* database busy*/
              OPAREC.OPAERR = "Y";
              converseLib.validationFailed(10); /* database busy*/
              exit stack;
            else
              if (WSY2000.WSY2000-RETURN-CODE == 02) /* style/color not found*/
                OPAREC.OPAERR = "Y";
                converseLib.validationFailed(911); /* style/color not found*/
                exit stack;
              else
                OPAREC.OPAERR = "Y";
                converseLib.validationFailed(909); /* database error*/
                OP0NS1P(); /* purge temp storage*/
                exit stack;
              end
            end
          end
        end
      end
    end
  else
    TA1REC.TA1DBASE = "DPROD"; /* data base name*/
    TA1REC.TA1TBLVU = "VCOLOR02"; /* table view*/
    TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "IO0560"; /* i/o mod*/
    OP0NSXS(); /* common abend routine*/
  end


end // end OP0NSA2

// load opprec for availability
Function OP0NSA3()


  set OPPREC empty;

  OPAREC.OPAFDT = OP0NM001.OP1CUNDT[OPASUB];
  OPAREC.OPAWYY = OPAREC.OPAFYY;
  OPAREC.OPAWMM = OPAREC.OPAFMM;
  OPAREC.OPAWDD = OPAREC.OPAFDD;
  if (OPAREC.OPAWYY > 56)
    OPAREC.OPAWCC = 19;
  else
    OPAREC.OPAWCC = 20;
  end



  /*  */
  OP0NW01.OP0NWBAV = "N"; /* turn off blank avail flag*/

  if (SYCREC.XPRCD == "22") /* process only if custom logo prod*/
    OP0NS-CALC-NEED-DT(); /* calculate need date -30 days*/
  end

  OPPREC.OP1CUNDT = OPAREC.OPAWDT; /* using real need date*/

  if (OPAREC.OPACDT >= SYCREC.SY2CEDT1)
    OPPREC.XLCCD = SYCREC.XLCCD1;
  else
    if (OPAREC.OPACDT >= SYCREC.SY2CEDT2)
      OPPREC.XLCCD = SYCREC.XLCCD2;
    else
      if (OPAREC.OPACDT >= SYCREC.SY2CEDT3)
        OPPREC.XLCCD = SYCREC.XLCCD3;
      else
        if (OPAREC.OPACDT >= SYCREC.SY2CEDT4)
          OPPREC.XLCCD = SYCREC.XLCCD4;
        else
          OPPREC.XLCCD = " ";
        end
      end
    end
  end

  if (OP1REC.XGPCD == "03") /* screened products are apparel only*/
    if (OP0NM001.XWHCD[OPASUB] == "51" /* and only warehouse 51*/
     || OP0NM001.XWHCD[OPASUB] == "25" /* OR WAREHOUSE 25*/
     || OP0NM001.XWHCD[OPASUB] == "27") /* OR WAREHOUSE 27*/
      if (OP1REC.XBDCD != "B"   /* not a blank bulk*/
       && SYCREC.SY1BSTNB > " " /* ASSOCIATED W/BLANK STYLE*/
       && SYCREC.XPRCD != "22"  /* not a custom logo product*/
       && OP3REC.XQACD == "01"  /* first quality*/
       && OPPREC.XLCCD < "11")  /* active life cycle*/
        OP0NST1(); /* set up for screened products*/
      end
    end
  end

  if (SYCREC.XPRCD != "22") /* process only if not custom logo*/
    OP0NS-GET-LEV-IND(); /* process avail cntl tbl for avail ind*/
  end


  if (SYCREC.XPRCD == "22") /* if custom logo product*/
    OP0NW01.OP0NWBAV = "Y"; /* set use blank avail flag to yes*/
  end


  if (OP0NW01.OP0NWBAV == "N") /* using finished availability*/
    OPPREC.SY1STNBR = OP3REC.SY1STNBR;
    OPPREC.SY2CLRID = OP3REC.SY2CLRID;
  else /* using blank abailability*/
    OPPREC.SY1STNBR = SYCREC.SY1BSTNB;
    OPPREC.SY2CLRID = SYCREC.SY2BCLCD;
  end


  OPPREC.XDSCD = OP1REC.XDSCD; /* use op1rec direct ship code*/
  OPPREC.XWHCD = OP0NM001.XWHCD[OPASUB]; /* use map whse #*/

      /* apparel direct ship use warehouse 51*/

  if (OP0NW01.XOTDSAVL == "Y" /* display availability*/
   && OP1REC.XDSCD == "1"     /* direct ship*/
   && OP1REC.XGPCD == "03")   /* apparel*/
    OPPREC.XWHCD = "51"; /* use whse 51 for product avail*/
    OPPREC.XDSCD = " "; /* default direct ship code*/
  end

  OPPREC.XDMCD = OP3REC.XDMCD;
  OPPREC.XOTCD = OP1REC.XOTCD;
  OPPREC.XBCCD = OP1REC.XBCCD;
  OPPREC.XOCCD = OP1REC.XOCCD;
  OPPREC.XGPCD = OP3REC.XGPCD;
  OPPREC.XQACD = OP3REC.XQACD;
  OPPREC.XOWCD = OP3REC.XOWCD;
  if (SYCREC.XPRCD == "22") /* if custom logo product*/
    OPPREC.XSDCD = "000"; /* always use '000' ISEG*/
  else
    OPPREC.XSDCD = OP3REC.PC2INSEG;
  end
  OPPREC.XSACD = "000"; /* avail still using default eng diff*/
  OPPREC.XPGCD = OP3REC.XPGCD;
  OPPREC.XUMCD = OP3REC.XUMCD;



  sysVar.arrayIndex = 0;

   /* ***************** CSP 4.1 Change *************************/
   /* Added Size Active Flag verification.  Change was made due*/
   /* to a SOC7 Error with the OP3ONOQT field containing garbage.*/
   /* **********************************************************/

  while (sysVar.arrayIndex < 40)
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
    if (OP3REC.OP3SZAFL[sysVar.arrayIndex] == "Y") /* size is active*/
      OPPREC.OP3SZAFL[sysVar.arrayIndex] = OP3REC.OP3SZAFL[sysVar.arrayIndex];
      OPPREC.OPPQTY[sysVar.arrayIndex] = OP3REC.OP3ONOQT[sysVar.arrayIndex];
    end
  end



end // end OP0NSA3

// process availability return cd
Function OP0NSA4()

  if (OPPREC.OPPRTNCD == 01)
    converseLib.validationFailed(166); /* qty requested exceeds qty avail*/
    OPAREC.OPAERR = "Y"; /* return to map with msg*/
    set OP0NM001.OP0NMSEL[OPASUB] bold;
  else
    if (OPPREC.OPPRTNCD == 03) /* no availability records for style*/
      converseLib.validationFailed(442);
      OPAREC.OPAERR = "Y";
      set OP0NM001.OP0NMSEL[OPASUB] bold;
    else
      if (OPPREC.OPPRTNCD == 02 /* database busy*/
       || OPPREC.OPPRTNCD == 04 /* other database problems*/
       || OPPREC.OPPRTNCD == 05) /* tried ten times to update*/
        converseLib.validationFailed(010); /* database busy, please try again*/
        OPAREC.OPAERR = "Y"; /* return to map with msg*/
        TA1REC.TA1DBASE = "DAVAIL";
        TA1REC.TA1TBLVU = "HDR+QTY";
        TA1REC.TA1LOCAT[1] = OPPREC.OPPLOC1;
        TA1REC.TA1LOCAT[2] = OPPREC.OPPLOC2;
        TA1REC.TA1LOCAT[3] = OPPREC.OPPLOC3;
        TA1REC.TA1LOCAT[4] = "OP0NSA4 ";
        OP0NSA5(); /* build reportable key*/
        TA1REC.TA1TBLKE = OP0NW01.OP0NWT1;
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1PGMNM = "OP0N";
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end

      if (OPPREC.OPPRTNCD == 04 /* other database problems*/
       || OPPREC.OPPRTNCD == 05) /* tried ten times to update*/

        OP8REC.OP8TASK = "CS"; /* close cursor does a commit*/
        call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};

        if (OPBREC.OPBSZRC != 0)
          COMMAREA.CA-USER-WORKAREA-4K = " ";
          XSPF4();
          exit program;
        end
      end
    end
  end


end // end OP0NSA4

// load readable diag key
Function OP0NSA5()


  OP0NW01.OP0NWTK1 = OP1REC.OP1CUOID;
  OP0NW01.OP0NWTK2 = OP1REC.OP1NORID;
  OP0NW01.OP0NWTK3 = OP0NW01.OP0NWDT1;
  OP0NW01.OP0NWTK4 = OPPREC.SY1STNBR;
  OP0NW01.OP0NWTK5 = OPPREC.SY2CLRID;
  OP0NW01.OP0NWTK6 = OPPREC.OPPRTNCD;
  OP0NW01.OP0NWTK7 = OPPREC.OPPDECAV;


end // end OP0NSA5

// check availability routine
Function OP0NSA6()


  call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};

  if (OP1REC.XBDCD != "B")
    if (OPBREC.OPBSZRC == 0)
      OP0NSA2(); /* call sycrec to get life cycle*/
      OP0NSA3(); /* load opprec for the call*/
      OPPREC.OPPDECAV = "N"; /* ck avail but don't decrement*/

      call "OP1610" (OPPREC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* check avail.*/

      OP0NSA4(); /* process the return code*/
    else
      if (OPBREC.OPBSZRC == -911)
        converseLib.validationFailed(10);
        OPAREC.OPAERR = "Y";
      else
        if (OPBREC.OPBSZRC != 1) /* sqlcode ne 100*/
          COMMAREA.CA-USER-WORKAREA-4K = " ";
          XSPF4();
          exit program;
        end
      end
    end
  end



end // end OP0NSA6

// edit cust po nbr required
Function OP0NSAH()
      /* ******************************************/
   /* edit the relationship between:*/
    /* - customer purchase order number (OP1CUPO)*/
    /* - order type (XOBCD -> XOVTBL.XOTCD -> XOTTBL.XOTATONF)*/
    /* - purchase order required code (YPOCD)*/

   /* For some customers, we required additional information*/
   /* before finalizing an order.  What we require is determined*/
   /* by ypocd - 00 - nothing is required*/
              /* 01 - customer po number is required*/
              /* 02 - customer po number and hard copy required*/
              /* 03 - customer po number, hard copy and*/
                   /* confirmation required*/

   /* Orders that are not 'at once' orders are automatically*/
   /* placed on allocation hold until the requirements indicated*/
   /* by YPOCD have been met.  This is done in OP0J.*/

   /* This sgrp edits 'at once' orders only for po requirements.*/
   /* if the po# has been entered, it is assumed that all*/
   /* requirements have been met.*/
      /* ******************************************/
  if (KUCREC.KUCYPOFT == "00") /* no purchase order number is required*/
    return;
  end
  if (OP1REC.XOTCD in XOTTBL.XOTCD
   && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A"
   && XOTTBL.XOTATONF[sysVar.arrayIndex] == "Y") /* this is an 'at once' order*/
    if (OP0NM001.OP1CUPO == " ") /* with no po#*/
      converseLib.validationFailed(653); /* so they will have to enter one*/
      OPAREC.OPAERR = "Y";
      set OP0NM001.OP1CUPO cursor, modified, bold;
    end
  end
end // end OP0NSAH

// calc warning for po# allochold
Function OP0NSAW()
      /* ******************************************/
   /* For some customers, we required additional information*/
   /* before finalizing an order. What we require is determined by*/
   /* kucypo** - 00 - nothing is required*/
              /* 01 - customer po number is required*/
              /* 02 - customer po number and hard copy required*/
              /* 03 - customer po number, hard copy and*/
                   /* confirmation required*/
    /* if these requirements are not met, orders are*/
    /* placed on allocation hold (code 04) by OP0J or OM0H.*/
    /* This hold can only be removed in OM0L.*/

    /* At once orders are assumed to have met all po*/
    /* requirements if the po# is entered.*/

   /* this proc will set up a warning message specifying*/
    /* the kind of allocation hold the order will be*/
    /* put on.  The message is displayed after a clean edit*/
    /* and forces a reconverse of the screen before transferring*/
    /* out of the program.*/

      /* ******************************************/

  OP0NW01.OP0NWARN = 0; /* set off the warning flag*/

  if (KUCREC.KUCYPOFT == "00") /* there are no po# requirements*/
    return;
  end

  if (OP1REC.XOTCD in XOTTBL.XOTCD              
   && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A"  
   && XOTTBL.XOTATONF[sysVar.arrayIndex] == "Y" /* this is an 'at once' order*/
   && OP1REC.OP1CUPO != " ")                    /* and po# is present*/
    return;
  end

  if (KUCREC.KUCYPOFT == "01") /* po# only is required*/
    if (OP1REC.OP1CUPO == " ") /* but has not been entered*/
      OP0NW01.OP0NWARN = 1;
    else
      return; /* the requirements are satisfied*/
    end
  end
  if (KUCREC.KUCYPOFT == "02") /* po#/hardcopy is required*/
    if (OP1REC.OP1CUPO == " ") /* po # not entered*/
      OP0NW01.OP0NWARN = 2;
    else
      OP0NW01.OP0NWARN = 4; /* hard copy is required*/
    end
  end
  if (KUCREC.KUCYPOFT == "03") /* po#/hardcopy/confirm required*/
    if (OP1REC.OP1CUPO == " ") /* po # not entered*/
      OP0NW01.OP0NWARN = 3;
    else
      OP0NW01.OP0NWARN = 5; /* hardcopy/confirm required*/
    end
  end
end // end OP0NSAW

// build temp storage record
Function OP0NSB0()

    /* nike order id*/

  OP0NW02.OP1NORID[OPASUB] = OP1REC.OP1NORID;

    /* customer need date*/

  OPAREC.OPAWDT = OP1REC.OP1CUNDT;
  OPAREC.OPAFYY = OPAREC.OPAWYY;
  OPAREC.OPAFMM = OPAREC.OPAWMM;
  OPAREC.OPAFDD = OPAREC.OPAWDD;
  OP0NW02.OP1CUNDT[OPASUB] = OPAREC.OPAFDT;

    /* warehouse code*/

  OP0NW02.XWHCD[OPASUB] = OP1REC.XWHCD;

    /* whse abrev*/

  if (OP1REC.XWHCD in XWHTBL.XWHCD)
    OP0NW02.XWHSABRV[OPASUB] = XWHTBL.XWHSABRV[sysVar.arrayIndex];
  end

    /* whse flag*/

  OP0NW02.OP1OWHMF[OPASUB] = OP1REC.OP1OWHMF;

    /* direct ship flag*/

  OP0NW02.XDSCD[OPASUB] = OP1REC.XDSCD;

    /* direct ship abrev*/

  if (OP1REC.XDSCD in XDSTBL.XDSCD)
    OP0NW02.XDSABRV[OPASUB] = XDSTBL.XDSABRV[sysVar.arrayIndex];
  else
    OP0NW02.XDSABRV[OPASUB] = " ";
  end

    /* dont ship before date*/

  OPAREC.OPAWDT = OP1REC.OP1DSBDT;
  OPAREC.OPAFYY = OPAREC.OPAWYY;
  OPAREC.OPAFMM = OPAREC.OPAWMM;
  OPAREC.OPAFDD = OPAREC.OPAWDD;
  OP0NW02.OP1DSBDT[OPASUB] = OPAREC.OPAFDT;

    /* dont ship after date*/

  OPAREC.OPAWDT = OP1REC.OP1DSADT;
  OPAREC.OPAFYY = OPAREC.OPAWYY;
  OPAREC.OPAFMM = OPAREC.OPAWMM;
  OPAREC.OPAFDD = OPAREC.OPAWDD;
  OP0NW02.OP1DSADT[OPASUB] = OPAREC.OPAFDT;

    /* order status abrev*/

  if (OP1REC.XOSCD in XOSTBL.XOSCD)
    OP0NW02.XOSABRV[OPASUB] = XOSTBL.XOSABRV[sysVar.arrayIndex];
  else
    OP0NW02.XOSABRV[OPASUB] = " ";
  end

   /* ************************************************************/
end // end OP0NSB0

// CLOSE ORDERS SET
Function OP0NSC0()

  call "IO0430" ("CS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORHDR01";
    TA1REC.TA1LOCAT[1] = "CS"; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO0430"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "OP0NSC0"; /* statement group*/
    TA1REC.TA1TBLKE = " "; /* clear table key*/
    OP0NSXS();
  end
end // end OP0NSC0

// Get company record for comp
Function OP0NSC1()

   /* Use the comp number as the key.*/

  KUCREC.KUCCOID = OP0NM001.OP1CMPNB;


   /* Get a specific company record.*/

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};


   /* Abend if a DB2 error occured.*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* Next sentence - expected values.*/
  else
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCMPNY01";
    OP0NW01.OP0NWFCO = OP0NM001.OP1CMPNB; /* Format company*/
    TA1REC.TA1TBLKE = OP0NW01.OP0NWFCO; /* Record key*/
    TA1REC.TA1LOCAT[1] = "OP0N020";
    TA1REC.TA1LOCAT[2] = "OP0NSC1";
    TA1REC.TA1LOCAT[3] = "IO0240";
    TA1REC.TA1LOCAT[4] = "S     ";
    OP0NSXS();
  end
end // end OP0NSC1

// Company level comp edits
Function OP0NSC2()

    /* Check for active status.*/

  if (KUCREC.XXXSTAT != "A")
    set OP0NM001.OP1CMPNB cursor, bold;
    converseLib.validationFailed(544); /* Comp number inactive*/
    OPAREC.OPAERR = "Y";
    return;
  end



   /* Check account type.*/

  sysVar.arrayIndex = 1;
  if (KUCREC.XAUCD in XAUTBL.XAUCD from sysVar.arrayIndex)
    if (XAUTBL.XATCD[sysVar.arrayIndex] != "06")
      set OP0NM001.OP1CMPNB cursor, bold;
      converseLib.validationFailed(545); /* Invalid comp number*/
      OPAREC.OPAERR = "Y";
      return;
    end
  else
     /* Account code was not found in table.*/

    set OP0NM001.OP1CMPNB cursor, bold;
    converseLib.validationFailed(545); /* Invalid comp number*/
    OPAREC.OPAERR = "Y";
    return;
  end
end // end OP0NSC2

// SET MAP FIELDS ASKIP,DARK
Function OP0NSD0()

    /* op0nm001 select option*/

  set OP0NM001.OP0NMSEL[OPASUB] skip, invisible;

    /* nike order id*/

  set OP0NM001.OP1NORID[OPASUB] skip, invisible;

    /* customer need date*/

  set OP0NM001.OP1CUNDT[OPASUB] skip, invisible;

    /* warehouse code*/

  set OP0NM001.XWHCD[OPASUB] skip, invisible;

    /* whse abrev*/

  set OP0NM001.XWHSABRV[OPASUB] skip, invisible;

    /* whse flag*/

  set OP0NM001.OP1OWHMF[OPASUB] skip, invisible;

    /* direct ship flag*/

  set OP0NM001.XDSCD[OPASUB] skip, invisible;

    /* direct ship abrev*/

  set OP0NM001.XDSABRV[OPASUB] skip, invisible;

    /* dont ship before date*/

  set OP0NM001.OP1DSBDT[OPASUB] skip, invisible;

    /* dont ship after date*/

  set OP0NM001.OP1DSADT[OPASUB] skip, invisible;

    /* order status abrev*/

  set OP0NM001.XOSABRV[OPASUB] skip, invisible;

   /* ************************************************************/
end // end OP0NSD0

// Edit comp number
Function OP0NSEC()
   /* More comp number edits exist for NIL orders but are not*/
   /* in this program since NIL orders are excluded from using*/
   /* dup order.*/


   /* If there is an comp number, see if it is set up as an*/
   /* active company with an account type of in-house.*/

  if (OP0NM001.OP1CMPNB != 0)

     /* Save the company record for the customer in working*/
     /* storage.*/
    OP0NW01.KUCGRP = KUCREC.KUCGRP;


     /* Get the company record for the comp number.*/
    OP0NSC1();

    if (SQLCA.VAGen_SQLCODE == 0) /* Company record was found.*/
        /* Edit the company record for the comp.*/
      OP0NSC2();

      if (OPAREC.OPAERR == "Y") /* Return if errors were found.*/
        KUCREC.KUCGRP = OP0NW01.KUCGRP; /* Restore company record.*/
        return;
      end

    else
       /* Company record was not found.*/
      set OP0NM001.OP1CMPNB cursor, bold;
      converseLib.validationFailed(542); /* Comp number not found*/
      OPAREC.OPAERR = "Y";
      KUCREC.KUCGRP = OP0NW01.KUCGRP; /* Restore company record.*/
      return;
    end

     /* Restore the company record of the customer.*/
    KUCREC.KUCGRP = OP0NW01.KUCGRP;
  end



   /* Update the header record since all edits were passed.*/

  OP1REC.OP1CMPNB = OP0NM001.OP1CMPNB;
end // end OP0NSEC

// LOAD TEMP STORAGE
Function OP0NSL0()

    /* load and write temp storage*/

  set OP0NW02 empty; /* init work record*/
  set TA5REC empty;

  OPAREC.OPASUB = 1;

  while (OPAREC.OPASUB <= 10
   && OP0NW01.OP0NWEOF == "N")

    OP0NSB0(); /* build temp storage record*/

    OPAREC.OPASUB = OPAREC.OPASUB + 1;
    OP0NSN0(); /* select next order*/
  end


    /* write temp storage record*/

  if (OPAREC.OPASUB > 1) /* at least one order*/
    OP0NS1W(); /* write temp storage*/
  end

   /* ************************************************************/
end // end OP0NSL0

// Check legal entity
Function OP0NSLE()

   /* -----------------------------------------------------------*/
   /* Several brands can belong to a legal entity.  Side 1 and*/
   /* I.E. are both in the Side 1 legal entity.  All other*/
   /* brands have their own legal entity.*/
   /* -----------------------------------------------------------*/
  if (OP1REC.XBCCD == "07")
    OP0NW01.XLECD = "05";
  else
    OP0NW01.XLECD = OP1REC.XBCCD;
  end


  if (KUCREC.XLECD != OP0NW01.XLECD)
    converseLib.validationFailed(589); /* customer/order brands don't match*/
    OPAREC.OPAERR = "Y";
    set OP0NM001.KUCCOID cursor, bold;
  end
end // end OP0NSLE

// SELECT NEXT ORDER 4 TEMP STORE
Function OP0NSN0()

  call "IO0430" ("SN", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OP0NW01.OP0NWEOF = "Y";
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VORHDR01";
      TA1REC.TA1LOCAT[1] = "SN"; /* calling option*/
      TA1REC.TA1LOCAT[2] = "IO0430"; /* i/o mod*/
      TA1REC.TA1LOCAT[3] = "OP0NSN0"; /* statement group*/
      TA1REC.TA1TBLKE = " "; /* clear table key*/
      OP0NW01.OP0NWDPT = OP1REC.OP1PARTN; /* frmt display part char*/
      OP0NW01.OP0NWDCN = OP1REC.OP1CUOID; /* frmt display cust ord id*/
      OP0NW01.OP0NWDNN = OP1REC.OP1NORID; /* frmt display nike ord id*/
      TA1REC.TA1TBLKE = OP0NW01.OP0NWDKY; /* order key*/
      TA1REC.TA1LOCAT[4] = " "; /* order key*/
      OP0NSXS();
    end
  end
end // end OP0NSN0

// chk needdate past prod deadlin
Function OP0NSPD()

     /* ****************************************************/
     /* * find production deadline date for given product*/
     /* * and need date - i/o 2560 (dorder.vcutof01).*/
     /* * if today is greater than production deadline date,*/
     /* *   turn on flag.*/
     /* ****************************************************/


   /* note - OP0NW01.OP0NWPPD = 'n' in calling sgrp*/

  OP0NW01.OP0NWFND = "N"; /* found table entry*/

  set OPJREC empty;
  set OPLREC empty;
  set SQLCA empty;

  OPJREC.XOTCD = OP1REC.XOTCD; /* order type code*/
  OPJREC.XPCCD = SYCREC.XPCCD; /* product cat code*/
  OPJREC.XGACD = SYCREC.XGACD; /* gender age code*/
  OPJREC.SY1STNBR = SYCREC.SY1STNBR; /* product style*/
  OPJREC.SY2CLRID = SYCREC.SY2CLRID; /* product color*/
  OPLREC.OPLSOP = "SF"; /* selection option*/
  OPLREC.OPJCNDTB = OPAREC.OPAWDT; /* need date*/

  call "IO2560" (OPLREC, SQLCA, OPJREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* record found*/
    OP0NW01.OP0NWFND = "Y"; /* deadline found*/
    OP0NW01.OP0NW-DAYS-PAST-CUTOFF = 0; /* init # days past cutoff*/
    if (OPAREC.OPACDT > OPJREC.OPJCUTDT) /* current date > prod d/l*/
      OP0NW01.OP0NWPPD = "Y"; /* past prod deadline*/
      OP0NSPO(); /* ck if over 30 days*/
    end
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OP0N";
    TA1REC.TA1LOCAT[1] = "SF";
    TA1REC.TA1LOCAT[2] = "OP0NSPD";
    TA1REC.TA1LOCAT[3] = "IO2560 ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1LOCAT[4] = "OP0NM001";
    TA1REC.TA1DBASE = "DORDER.";
    TA1REC.TA1TBLVU = "VCUTOF01";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
    OP0NM001.VAGen_EZEMSG = COMMAREA.CAMSG;
  end



   /* ********************end statement group*********************/

end // end OP0NSPD

// ck if need dt 30 past prod dl
Function OP0NSPO()

   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  set TA2REC empty; /* reset working storage*/
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
  OP0NW01.OP0NW-DAYS-PAST-CUTOFF = 0; /* init # days past cutoff*/
  TA2REC.TA2DBDFN = OPJREC.OPJCUTDT; /* move d/l date*/
  TA2REC.TA2DBDTN = OPAREC.OPACDT; /* today's date*/
  TA2REC.TA2DTOPT = "DAYSDIFF";
  TA2REC.TA2GRTYP = "G";

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    OP0NW01.OP0NW-DAYS-PAST-CUTOFF = TA2REC.TA2DBDDN;
  else
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "OP0N    ";
    TA1REC.TA1LOCAT[1] = "OP0NSPO ";
    TA1REC.TA1LOCAT[2] = "TA0040  ";
    TA1REC.TA1LOCAT[3] = TA2REC.TA2RTNCD;
    call "TA0020" (TA1REC, SQLCA);
  end
end // end OP0NSPO

// READ/LOAD TEMP STORAGE
Function OP0NSR0()


  OP0NS1R(); /* read temp storage*/

  OPAREC.OPASUB = 1;
  while (OPAREC.OPASUB <= 10)
    if (OP0NW02.OP1NORID[OPASUB] == 0) /* if no more suborders*/
      OP0NSD0(); /* set fields autoskip,dark*/
    else
      OP0NSW0(); /* load map fields*/
    end
    OPAREC.OPASUB = OPAREC.OPASUB + 1;
  end

   /* ********************end of statement group******************/
end // end OP0NSR0

// SELECT ALL ORDERS 4 TEMP STORE
Function OP0NSS0()

  call "IO0430" ("SS", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* good return*/
   || SQLCA.VAGen_SQLCODE == 100) /* not found*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORHDR01";
    TA1REC.TA1LOCAT[1] = "SS"; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO0430"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "OP0NSS0"; /* statement group*/
    TA1REC.TA1TBLKE = " "; /* clear table key*/
    OP0NW01.OP0NWDPT = OP1REC.OP1PARTN; /* frmt display part char*/
    OP0NW01.OP0NWDCN = OP1REC.OP1CUOID; /* frmt display cust ord id*/
    OP0NW01.OP0NWDNN = OP1REC.OP1NORID; /* frmt display nike ord id*/
    TA1REC.TA1TBLKE = OP0NW01.OP0NWDKY; /* order key*/
    TA1REC.TA1LOCAT[4] = " "; /* order key*/
    OP0NSXS();
  end
end // end OP0NSS0

// setup for screened products
Function OP0NST1()
  if (OP1REC.XOTCD in XOTTBL.XOTCD
   && XOTTBL.XOTPROPF[sysVar.arrayIndex] != "Y")
    OP0NSTC(); /* screened prod edits for futures*/
  else
    OP0NST9(); /* screened prod edits for prop*/
  end
end // end OP0NST1

// blank or finished availability
Function OP0NST3()
    /* determining whether to use blank or finished availability*/

    /* if we are going to print a T-shirt, we have to know*/
    /* 60 days in advance.  so the purpose of this sgrp is*/
    /* to find out how much time there is between today and the*/
    /* need date;*/
     /* - if there are 60 days or more, we will use*/
       /* blank availability and send them off to be*/
       /* screened.*/
     /* - if they are needed in less than 60 days, we*/
       /* must take them out of finished availability*/

   /* if we do use blank stock,  we will be checking for*/
   /* blank availability.  When we do, the need date must*/
   /* be adjusted by -60 days to reflect the lead time*/
   /* required to print the t-shirt.  This adjusted need date*/
    /* is stored in op0nwpdt*/

   /* find out what need date minus 60 days is*/

  /*  */
  /* Reference to WPDT has been removed due to a change in availability*/
  /* that returns available quantities by need date with regard to the*/
  /* "lead time to screen".  12/91 JJOHN2*/
  /*  */
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2DYAOD = -60;
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = OPAREC.OPAWDT;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD != 0) /* this should never happen*/
    OPAREC.OPAERR = "Y"; /* date not valid*/
    converseLib.validationFailed(13);
    set OP0NM001.OP1CUNDT[OPASUB] cursor, bold;
    return;
  end

  if (TA2REC.TA2GRGGN > OPAREC.OPACDT) /* need date more than 60*/
                                          /* days in the future*/
                                          /* so we can use blank*/
                                          /* availability*/
   /* MOVE TA2REC.TA2GRGGN TO OP0NW01.OP0NWPDT;  /* store need date - 60*/
    OP0NW01.OP0NWBAV = "Y"; /* set blank availability flag*/
  end
end // end OP0NST3

// scrn prod look for valid xow p
Function OP0NST5()


   /* this statement group calls io5480 to access davail.vblnkp01*/
   /* to validate the need date for screened products. we*/
   /* need the xowcd from davail.vblnkp01 which is part of the*/
   /* key to access davail.vblnks01 to validate the blank styles.*/


  set SQLCA empty;
  set AVGREC empty;

  AVGBPIND = OP0NW01.OP0NWP01;

  AVIREC.AVIFUNCD = "SA";
  AVIREC.OP1CUNDT = OPAREC.OPAWDT;

  call "IO5480" (AVIREC, SQLCA, AVGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0
   || SQLCA.VAGen_SQLCODE == +100)
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "OP0N   "; /* application*/
    TA1REC.TA1LOCAT[1] = "OP0NST5 "; /* statement group*/
    TA1REC.TA1LOCAT[2] = "IO5480  "; /* io mod called*/
    TA1REC.TA1LOCAT[3] = AVIREC.AVIFUNCD; /* function code passed*/
    TA1REC.TA1LOCAT[4] = OP0NM001.OP1CUNDT[OPASUB]; /* pass need date*/
    TA1REC.TA1MAP = "OP0NM001"; /* map*/
    TA1REC.TA1DBASE = "DAVAIL"; /* database name*/
    TA1REC.TA1TBLVU = "VBLNKP01"; /* table view*/
    TA1REC.TA1TBLKE = AVGREC.AVGKEY; /* key*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end

   /* ************************************************************/
end // end OP0NST5

// validate style (vblnks01)
Function OP0NST6()

   /* IO5470 calls davail.vblnks01 to find out whether a finished*/
   /* style is valid for specific xowcd.  The xowcd is determined*/
   /* by davail.vblnkp01 based on need-date.*/

  set SQLCA empty;
  set AVHREC empty;

  AVHREC.XOWCD = AVGREC.XOWCD; /* owner code from vblnkp01*/
  AVHREC.SY1STNBR = OP3REC.SY1STNBR;
  AVHREC.SY2CLRID = OP3REC.SY2CLRID;
  AVHREC.XDMCD = OP3REC.XDMCD;

  call "IO5470" ("S ", SQLCA, AVHREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0 /* further processing will*/
   || SQLCA.VAGen_SQLCODE == +100) /* be determined based on the*/
      /* next sentence                  type of order, and where we*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "OP0N   "; /* application*/
    TA1REC.TA1LOCAT[1] = "OP0NST6 "; /* statement group*/
    TA1REC.TA1LOCAT[2] = "IO5470  "; /* io mod called*/
    TA1REC.TA1LOCAT[3] = "S "; /* function code used*/
    TA1REC.TA1LOCAT[4] = AVHREC.AVHKEY; /* avhrec key*/
    TA1REC.TA1MAP = "OP0NM001"; /* map*/
    TA1REC.TA1DBASE = "DAVAIL"; /* database name*/
    TA1REC.TA1TBLVU = "VBLNKS01"; /* table view*/
    TA1REC.TA1TBLKE = AVHREC.AVHKEY; /* key*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end /* were called from*/
end // end OP0NST6

// validate cutoff (vogcut01)
Function OP0NST7()

   /* IO5530 calls dorder.vogcut01 to verify that a finished*/
   /* style is valid for specific xowcd and provide us with*/
   /* the cut-off date*/

  set SQLCA empty;
  set OPLREC empty;
  set OECREC empty;

  OPLREC.OPLSOP = "SF";
  OPLREC.OPJCNDTB = OPAREC.OPAWDT;

  OECREC.XOWCD = AVGREC.XOWCD; /* owner code from vblnkp01*/

  call "IO5530" (OPLREC, SQLCA, OECREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0 /* handling of cutoff depends*/
   || SQLCA.VAGen_SQLCODE == +100) /* on type of order and where*/
     /* next sentence                    this logic was called from*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "OP0N   "; /* application*/
    TA1REC.TA1LOCAT[1] = "OP0NST7 "; /* statement group*/
    TA1REC.TA1LOCAT[2] = "IO5530  "; /* io mod called*/
    TA1REC.TA1LOCAT[3] = "SF"; /* function code used*/
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "OP0NM001"; /* map*/
    TA1REC.TA1DBASE = "DORDER"; /* database name*/
    TA1REC.TA1TBLVU = "VOGCUT01"; /* table view*/
    OP0NW01.OP0NWKYS = AVGREC.XOWCD; /* format key*/
    OP0NW01.OP0NWKYD = OPLREC.OPJCNDTB; /* for display*/
    TA1REC.TA1TBLKE = OP0NW01.OP0NWKY; /* fields to num fields*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
end // end OP0NST7

// edit flyers & inline futures
Function OP0NST9()
    /* notes on owner group codes for prop screened products*/

    /* if the original order has no owner group, (indicated by*/
      /* '00' or ' ' in xowcd), or has an owner group*/
      /* code that is part of any program, this sgrp will*/
      /* calculate the correct program based on style and need*/
      /* date.*/

    /* if the original order has an owner group that is NOT part*/
      /* of any program, we always use finished availability*/

  if (OP3REC.XOWCD == "00" /* no owner group code present*/
   || OP3REC.XOWCD == " ") /* so we must calculate one*/
     /* next sentence*/
  else
    OP0NSTD();
                                   /* look for owner group in program table*/
    if (SQLCA.VAGen_SQLCODE == +100)
      return; /* use finished availability*/
    end
  end

   /* load program indicator - key to vblnkp01*/

  if (SYCREC.XPRCD in XPRTBL.XPRCD
   && XPRTBL.XPRSMKFL[sysVar.arrayIndex] == "Y") /* SPECIAL MAKEUP product*/
    OP0NW01.OP0NWP01 = "S"; /* HOLD FOR SPCL MAKEUP*/
  else
    OP0NW01.OP0NWP01 = "T"; /* HOLD AS REG PRODUCT*/
  end

  OP3REC.XOWCD = "00"; /* re-set owner group in op3rec*/

  OP0NST5(); /* get owner group code*/
                                   /* (davail.vblnkp01)*/

  if (SQLCA.VAGen_SQLCODE == +100) /* no program found*/
    return; /* use finished 00 availability*/
  end

  OP0NST6(); /* VALIDATE FINISHED STYLE S01 TABLE*/

  if (SQLCA.VAGen_SQLCODE == +0 /* PRODUCT FOUND*/
   && AVHREC.AVHBLKFL == "Y")   /* BLANK BULK/DRAW PRODUCT ONLY*/
    return; /* use finished 00 availability*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* style is not part of this program*/
      return; /* use finished 00 availability*/
    end
  end

  OP0NST7(); /* GET CUTOFF ROW*/

  if (SQLCA.VAGen_SQLCODE == +0)
    if (OECREC.OPJCUTDT < OPAREC.OPACDT) /* if cut-off-date < curr-date*/
      if (COMMAREA.CAUSERID in YOSTBL.XXXUSRID
       && YOSTBL.XXXSTAT[sysVar.arrayIndex] == "A"
       && YOSTBL.YOSNDTFL[sysVar.arrayIndex] == "Y") /* authorized for lateness*/
             /* next sentence*/
      else
        return; /* use finished 00 availability*/
      end
    end
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return; /* use finished 00 availability*/
  end

   /* ----------------------------------------------------------*/
   /* the below code was commented out 6-26-91, 5 days after*/
   /* prop t-shirt processing was installed.  t-shirt production*/
   /* people decided the 60-day backwards calc wouldn't work for*/
   /* prop flyers, so now BLANK avail is always displayed and*/
   /* decremented for the order's real need date.  Saved this in*/
   /* case they change their mind and want to hook it back up.*/
   /* ----------------------------------------------------------*/
   /* op0nST3   ;  determine blank or finished availability*/

   /* IF op0nW01.op0nWBAV = 'N' ;  finished availability is taken*/
    /* EZERTN                  ;  from owner group 00*/
   /* END ;*/

    /* program has been found, set up owner group code*/

  OP3REC.XOWCD = AVGREC.XOWCD; /* use owner group of flyer*/
  OP0NW01.OP0NWBAV = "Y"; /* blank availability*/
end // end OP0NST9

// fut scrn prod: style in xow pg
Function OP0NSTA()

   /* IO5470 calls davail.vblnks01 to find out whether a finished*/
   /* style is used in any program.*/

  set SQLCA empty;
  set AVHREC empty;

  AVHREC.SY1STNBR = OP3REC.SY1STNBR;
  AVHREC.SY2CLRID = OP3REC.SY2CLRID;
  AVHREC.XDMCD = OP3REC.XDMCD;

  call "IO5470" ("S3", SQLCA, AVHREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +0)
    call "IO5470" ("N3", SQLCA, AVHREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == +0
     || SQLCA.VAGen_SQLCODE == +100)
      return;
    else
      TA1REC.TA1LOCAT[3] = "N3";
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1PGMNM = "OP0N   "; /* application*/
      TA1REC.TA1LOCAT[1] = "OP0NSTA "; /* statement group*/
      TA1REC.TA1LOCAT[2] = "IO5470  "; /* io mod called*/
      TA1REC.TA1LOCAT[4] = AVHREC.AVHKEY; /* avhrec key*/
      TA1REC.TA1MAP = "OP0NM001"; /* map*/
      TA1REC.TA1DBASE = "DAVAIL"; /* database name*/
      TA1REC.TA1TBLVU = "VBLNKS01"; /* table view*/
      TA1REC.TA1TBLKE = AVHREC.AVHKEY; /* key*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  else
    TA1REC.TA1LOCAT[3] = "S3";
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "OP0N   "; /* application*/
    TA1REC.TA1LOCAT[1] = "OP0NSTA "; /* statement group*/
    TA1REC.TA1LOCAT[2] = "IO5470  "; /* io mod called*/
    TA1REC.TA1LOCAT[4] = AVHREC.AVHKEY; /* avhrec key*/
    TA1REC.TA1MAP = "OP0NM001"; /* map*/
    TA1REC.TA1DBASE = "DAVAIL"; /* database name*/
    TA1REC.TA1TBLVU = "VBLNKS01"; /* table view*/
    TA1REC.TA1TBLKE = AVHREC.AVHKEY; /* key*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
   /* ************************************************************/
end // end OP0NSTA

// close cursor davail.vblnks01
Function OP0NSTB()

    /* close cursor for davail.vblnks01*/

  call "IO5470" ("C3", SQLCA, AVHREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "OP0N   "; /* application*/
    TA1REC.TA1LOCAT[1] = "OP0NSTB "; /* statement group*/
    TA1REC.TA1LOCAT[2] = "IO5470  "; /* io mod called*/
    TA1REC.TA1LOCAT[4] = AVHREC.AVHKEY; /* avhrec key*/
    TA1REC.TA1MAP = "OP0NM001"; /* map*/
    TA1REC.TA1DBASE = "DAVAIL"; /* database name*/
    TA1REC.TA1TBLVU = "VBLNKS01"; /* table view*/
    TA1REC.TA1TBLKE = AVHREC.AVHKEY; /* key*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
   /* ************************************************************/
end // end OP0NSTB

// screened products; futures
Function OP0NSTC()
    /* futures screened product*/
     /* flyer programs are not sold on a futures basis so*/
     /* there are only two ways to get screened products;*/
      /* 1. if style is part of an existing flyer program,  only*/
          /* finished 00 availability can be used (all blank*/
          /* availability is reserved for the program)*/
      /* 2. if the style is not part of a program, we can use*/
          /* 00 availability for either finished or blank,*/
          /* depending on the need date.*/


  if (OP3REC.XOWCD == "00" /* no owner group code present*/
   || OP3REC.XOWCD == " ") /* so we must calculate one*/
    OP3REC.XOWCD = "00";
    OP0NSTA(); /* find style in vblanks01*/
    if (SQLCA.VAGen_SQLCODE == 0) /* style is part of a program*/
      OP0NSTB(); /* close cursor vblnks01*/
      return; /* use finished 00 availability*/
    end
    OP0NSTB(); /* close cursor vblnks01*/
    OP0NST3();
                                   /* check blank or finished availability*/
  end
end // end OP0NSTC

// scrn prod: xow pgm exist?
Function OP0NSTD()


   /* this statement group calls io5480 to access davail.vblnkp01*/
   /* and find out if the owner group entered by the user is*/
   /* an existing program.*/

  set SQLCA empty;
  set AVGREC empty;
  set AVIREC empty;

  AVGREC.XOWCD = OP3REC.XOWCD;

  AVIREC.AVIFUNCD = "S ";
  AVIREC.OP1CUNDT = OPAREC.OPAWDT;

  call "IO5480" (AVIREC, SQLCA, AVGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0
   || SQLCA.VAGen_SQLCODE == +100)
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "OP0N   "; /* application*/
    TA1REC.TA1LOCAT[1] = "OP0NSTD "; /* statement group*/
    TA1REC.TA1LOCAT[2] = "IO5480  "; /* io mod called*/
    TA1REC.TA1LOCAT[3] = AVIREC.AVIFUNCD; /* function code passed*/
    TA1REC.TA1LOCAT[4] = OP0NM001.OP1CUNDT[OPASUB]; /* pass need date*/
    TA1REC.TA1MAP = "OP0NM001"; /* map*/
    TA1REC.TA1DBASE = "DAVAIL"; /* database name*/
    TA1REC.TA1TBLVU = "VBLNKP01"; /* table view*/
    TA1REC.TA1TBLKE = AVGREC.AVGKEY; /* key*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end

   /* ************************************************************/
end // end OP0NSTD

// LOAD MAP FIELDS
Function OP0NSW0()

    /* op0nm001 selection field*/

  set OP0NM001.OP0NMSEL[OPASUB] initialAttributes;
  OP0NM001.OP0NMSEL[OPASUB] = OP0NW02.OP0NMSEL[OPASUB];

    /* nike order id*/

  set OP0NM001.OP1NORID[OPASUB] initialAttributes;
  OP0NM001.OP1NORID[OPASUB] = OP0NW02.OP1NORID[OPASUB];

    /* customer need date*/

  set OP0NM001.OP1CUNDT[OPASUB] initialAttributes;
  OP0NM001.OP1CUNDT[OPASUB] = OP0NW02.OP1CUNDT[OPASUB];

    /* warehouse code*/

  set OP0NM001.XWHCD[OPASUB] initialAttributes;
  OP0NM001.XWHCD[OPASUB] = OP0NW02.XWHCD[OPASUB];

    /* check for one-whse model*/

  if (OP1REC.OP1OWHMF == "Y")
    set OP0NM001.XWHCD[OPASUB] protect;
  end

    /* check for customer draw order*/

  if (OP1REC.XBDCD == "5")
    set OP0NM001.OP1CUNDT[OPASUB] protect;
  end

    /* check for draw order*/

  if (OP0NW01.OP0NWBDF == "D") /* it is a draw order*/
    set OP0NM001.XWHCD[OPASUB] protect;
  end

  if (OP1REC.XDSCD in XDSTBL.XDSCD) /* if xdscd doesn't require*/
    if (XDSTBL.XDSWHSEF[sysVar.arrayIndex] == "N") /* whs, protect it.*/
      set OP0NM001.XWHCD[OPASUB] protect;
    end
  end

    /* whse abrev*/

  if (OP0NW02.XWHCD[OPASUB] in XWHTBL.XWHCD)
    set OP0NM001.XWHSABRV[OPASUB] initialAttributes;
    OP0NM001.XWHSABRV[OPASUB] = XWHTBL.XWHSABRV[sysVar.arrayIndex];
  end

    /* whse flag*/

  set OP0NM001.OP1OWHMF[OPASUB] initialAttributes;
  OP0NM001.OP1OWHMF[OPASUB] = OP0NW02.OP1OWHMF[OPASUB];

    /* direct ship flag*/

  set OP0NM001.XDSCD[OPASUB] initialAttributes;
  OP0NM001.XDSCD[OPASUB] = OP0NW02.XDSCD[OPASUB];

    /* direct ship abrev*/

  set OP0NM001.XDSABRV[OPASUB] initialAttributes;
  OP0NM001.XDSABRV[OPASUB] = OP0NW02.XDSABRV[OPASUB];

    /* dont ship before date*/

  set OP0NM001.OP1DSBDT[OPASUB] initialAttributes;
  OP0NW01.OP0NWBDT = OP0NW02.OP1DSBDT[OPASUB];
  OP0NM001.OP1DSBDT[OPASUB] = OP0NW01.OP0NWBDT;

    /* dont ship after date*/

  set OP0NM001.OP1DSADT[OPASUB] initialAttributes;
  OP0NW01.OP0NWADT = OP0NW02.OP1DSADT[OPASUB];
  OP0NM001.OP1DSADT[OPASUB] = OP0NW01.OP0NWADT;

    /* order status abrev*/

  set OP0NM001.XOSABRV[OPASUB] initialAttributes;
  OP0NM001.XOSABRV[OPASUB] = OP0NW02.XOSABRV[OPASUB];

   /* ************************************************************/
end // end OP0NSW0

// abort routine
Function OP0NSXS()



      /* *********************************************************/
      /* * online abort routine for OP0N application            **/
      /* *********************************************************/

  OP0NS1P(); /* purge temp storage*/


  TA1REC.TA1TYPE = "DB2"; /* abend type*/
  TA1REC.TA1FUNC = "RETN"; /* abend func*/
  set ERRSQLCA empty; /* clear area*/
  move SQLCA to ERRSQLCA withV60Compat; /* save orig sqlca*/
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* synpoint rollback*/
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes}; /* abend module*/
  COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
  XSPF4(); /* master menu*/
  exit program; /* master menu failure*/



   /* *************************************************************/
end // end OP0NSXS

//*** RECORD=OP0NW01 ****
// Maintenance:
// 3/27/90 BWATSO  Added KUCGRP and WFCO fields.
// 5/31/90 BWATSO  Added XLECD for brand code changes.
// 3/05/90 SWATSO  Added OP0NWSGC - Special Customer Group flag
// 5/20/91 craine  increase occurs of op2key to 500 from 200
// 2/05/92 jwils1  added back op0nwpdt for crested product
// 12/17/93 gcalki added xccindx and credit status flag
// 04/27/94 jather increase occurs of op2key to 900 from 500
// ***********************
Record OP0NW01 type basicRecord
  10 OP0NWMSG OP0NWMSG ; 
    15 OP0NWZTX OP0NWZTX ; 
    15 OP0NWZZP OP0NWZZP ; 
    15 * char(36) ; 
  10 OP0NWSVK OP0NWSVK ; 
    15 OP0NWSPT OP0NWSPT ; 
    15 OP0NWSVC OP0NWSVC ; 
    15 OP0NWSVN OP0NWSVN ; 
  10 OP0NWDKY OP0NWDKY ; 
    15 OP0NWDPT OP0NWDPT ; 
    15 OP0NWDCN OP0NWDCN ; 
    15 OP0NWDNN OP0NWDNN ; 
  10 OP0NWNOR OP0NWNOR ; 
  10 OP0NWLNB OP0NWLNB ; 
  10 OP0NWSKF OP0NWSKF ; 
  10 OP0NWBDF OP0NWBDF ; 
  10 OP0NWNDT OP0NWNDT ; 
  10 OP0NWBNT OP0NWBNT ; 
  10 OP0NWDSA OP0NWDSA ; 
  10 OP0NWABF OP0NWABF ; 
  10 XOWKEY XOWKEY ; 
    15 XWHCD XWHCD ; 
    15 XOWCD XOWCD ; 
  10 XOTFUTRF XOTFUTRF ; 
  10 XOTDSAVL XOTDSAVL ; 
  10 OP0NWPPD OP0NWPPD ; 
  10 OP0NWFND OP0NWFND ; 
  10 OP0NWDS OP0NWDS ; 
  10 KUSTEXT1 KUSTEXT1 ; 
  10 KUSTEXT2 KUSTEXT2 ; 
  10 OP0NWCK OP0NWCK ; 
    15 OP0NWCK1 OP0NWCK1 ; 
      20 KUCCOID KUCCOID ; 
      20 KUMSTRID KUMSTRID ; 
      20 XNXCD XNXCD ; 
      20 XGPCD XGPCD ; 
    15 XOTCD XOTCD ; 
  10 OP0NWTSQ OP0NWTSQ ; 
  10 OP0NWIC OP0NWIC ; 
  10 XXXZIP XXXZIP ; 
  10 OP0NWOCO OP0NWOCO ; 
  10 OP0NWOST OP0NWOST ; 
  10 OP0NWNDE OP0NWNDE ; 
    15 OP0NWNYY OP0NWNYY ; 
    15 OP0NWNMM OP0NWNMM ; 
    15 OP0NWNDD OP0NWNDD ; 
  10 OP0NWFDA OP0NWFDA ; 
    15 OP0NWOTC OP0NWOTC ; 
    15 OP0NWCDT OP0NWCDT ; 
      20 OP0NWCMM OP0NWCMM ; 
      20 OP0NWCDD OP0NWCDD ; 
    15 OP0NWHS OP0NWHS ; 
  10 OP0NWBD2 OP0NWBD2 ; 
  10 OP0NWPDF OP0NWPDF ; 
  10 OP0NW-DAYS-PAST-CUTOFF OP0NW-DAYS-PAST-CUTOFF ; 
  10 OP0NWCNT OP0NWCNT ; 
  10 OP2KEY OP2KEY [900] ; 
    15 OP1PARTN OP1PARTN ; 
    15 OP1CUOID OP1CUOID ; 
    15 OP1NORID OP1NORID ; 
    15 OP2LNINB OP2LNINB ; 
  10 OP0NW365 OP0NW365 ; 
  10 OP0NW051 OP0NW051 ; 
  10 OP0NWDT1 OP0NWDT1 ; 
    15 OP0NWDT2 OP0NWDT2 ; 
    15 OP0NWDT3 OP0NWDT3 ; 
  10 OP0NWT1 OP0NWT1 ; 
    15 OP0NWTK1 OP0NWTK1 ; 
    15 OP0NWTK2 OP0NWTK2 ; 
    15 OP0NWTK3 OP0NWTK3 ; 
    15 OP0NWTK4 OP0NWTK4 ; 
    15 OP0NWTK5 OP0NWTK5 ; 
    15 OP0NWTK6 OP0NWTK6 ; 
    15 OP0NWTK7 OP0NWTK7 ; 
  10 KUCGRP KUCGRP ; 
  10 OP0NWFCO OP0NWFCO ; 
  10 XLECD XLECD ; 
  10 OP0NWF1P OP0NWF1P ; 
  10 OP0NWF1M OP0NWF1M ; 
  10 OP0NWEOF OP0NWEOF ; 
  10 OP0NWBDT OP0NWBDT ; 
  10 OP0NWADT OP0NWADT ; 
  10 OP0NWSAD OP0NWSAD [10] ; 
  10 OP0NWSBD OP0NWSBD [10] ; 
  10 OP1CUPO OP1CUPO ; 
  10 OP1CMPNB OP1CMPNB ; 
  10 OP0NWSWH OP0NWSWH [10] ; 
  10 OP0NWSND OP0NWSND [10] ; 
  10 OP0NWSGC OP0NWSGC ; 
  10 OP0NWARN OP0NWARN ; 
  10 OP0NWBAV OP0NWBAV ; 
  10 OP0NWP01 OP0NWP01 ; 
  10 OP0NWKY OP0NWKY ; 
    15 OP0NWKYS OP0NWKYS ; 
    15 * char(1) ; 
    15 OP0NWKYD OP0NWKYD ; 
  10 OP0NWFLG OP0NWFLG ; 
  10 OP0NWSUB OP0NWSUB ; 
  10 OP0NWPDT OP0NWPDT ; 
  10 OP0NW-CUSTERR1 OP0NW-CUSTERR1 ; 
    15 OP0NW-ERR-LIT1 OP0NW-ERR-LIT1 ; 
    15 OP0NW-ERR-SIGN OP0NW-ERR-SIGN ; 
    15 OP0NW-ERR-CODE OP0NW-ERR-CODE ; 
    15 OP0NW-ERR-LIT2 OP0NW-ERR-LIT2 ; 
    15 OP0NW-ERR-TYPE OP0NW-ERR-TYPE ; 
    15 OP0NW-ERR-LIT3 OP0NW-ERR-LIT3 ; 
    15 OP0NW-ERR-NAME OP0NW-ERR-NAME ; 
    15 * char(1) ; 
    15 OP0NW-ERR-VIEW OP0NW-ERR-VIEW ; 
  10 OP0NW-CUSTERR2 OP0NW-CUSTERR2 ; 
    15 OP0NW-ERR-LIT4 OP0NW-ERR-LIT4 ; 
    15 OP0NW-ERR-CUST OP0NW-ERR-CUST ; 
    15 * char(1) ; 
    15 OP0NW-ERR-STOR OP0NW-ERR-STOR ; 
    15 * char(1) ; 
    15 OP0NW-ERR-DEPT OP0NW-ERR-DEPT ; 
    15 * char(1) ; 
    15 OP0NW-ERR-GPC OP0NW-ERR-GPC ; 
  10 OP0NW-VOPPGM-READ OP0NW-VOPPGM-READ ; 
  10 * char(1) ; 
  10 OP0NW-XCC-STAT-FOUND OP0NW-XCC-STAT-FOUND ; 
  10 OP0NW-XCCIDX OP0NW-XCCIDX ; 
  10 OP0NW-WSY2000-FND-FLAG OP0NW-WSY2000-FND-FLAG ; 
  10 * char(3) ; 
  10 OP0NW-WSY2000-POST-1 OP0NW-WSY2000-POST-1 ; 
    15 OP0NW-WSY2000-GPC-CD OP0NW-WSY2000-GPC-CD ; 
    15 OP0NW-WSY2000-STY-NBR OP0NW-WSY2000-STY-NBR ; 
    15 OP0NW-WSY2000-COLR-CD OP0NW-WSY2000-COLR-CD ; 
    15 OP0NW-WSY2000-DIM-CD OP0NW-WSY2000-DIM-CD ; 
    15 OP0NW-WSY2000-PROD-REG-CD OP0NW-WSY2000-PROD-REG-CD ; 
    15 OP0NW-WSY2000-RETURN-CD OP0NW-WSY2000-RETURN-CD ; 
end // end OP0NW01

//*** RECORD=OP0NW02 ****
// *     Temporary storage record used to hold selected
// *     for the OP0N application (Duplicate Order)
// *
// *     CSP Record: OP0NW02
// *
// *     OP0N Statement Groups: OP0NS1P - Purge
// *                            OP0NS1W - Write
// *                            OP0NS1R - Read
// *
// *
// ***********************
Record OP0NW02 type basicRecord
  5 OP0NWGRP OP0NWGRP ; 
    10 OP0NWLEN OP0NWLEN ; 
    10 OP0NWROW OP0NWROW [10] ; 
      15 OP0NMSEL OP0NMSEL ; 
      15 OP1NORID OP1NORID ; 
      15 OP1CUNDT OP1CUNDT ; 
      15 XWHCD XWHCD ; 
      15 XWHSABRV XWHSABRV ; 
      15 OP1OWHMF OP1OWHMF ; 
      15 XDSCD XDSCD ; 
      15 XDSABRV XDSABRV ; 
      15 OP1DSBDT OP1DSBDT ; 
      15 OP1DSADT OP1DSADT ; 
      15 XOSABRV XOSABRV ; 
end // end OP0NW02

//*** RECORD=OPFREC ****
// ******************* audit report table *********************
// 
// DB2 TABLE:           DORDER.Vopaud01
// 
// purpose:             record from on-line order processing
//                      to reporting. for demand reports, and
//                      production quantity change report.
// 
// copylib member:      dcl00118
// 
// I/O MOD:             io0900
// 
// KEY TO DB2 TABLE:    none
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 10-17-86   ehc       INITIAL RECORD CREATION
// 05/18/87  jvande     added xomcd for xot, op1cundt, and size
//                      qty chng for production purposes.
// **********************
Record OPFREC type basicRecord
  5 OPFGROUP OPFGROUP ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP2LNINB OP2LNINB ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XOMCD XOMCD ; 
    10 OPFAUDTP OPFAUDTP ; 
    10 OPFNUMRC OPFNUMRC ; 
    10 OPFALPHA OPFALPHA ; 
    10 OPFVALUE OPFVALUE ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZHHMMSS ZZHHMMSS ; 
end // end OPFREC

// suborder selection
DataItem OP0NMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format error for ku1540
DataItem OP0NW-CUSTERR1 char(59)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format error for ku150
DataItem OP0NW-CUSTERR2 char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of days past cutoff dt
DataItem OP0NW-DAYS-PAST-CUTOFF decimal(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sql code
DataItem OP0NW-ERR-CODE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error cust
DataItem OP0NW-ERR-CUST num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error department
DataItem OP0NW-ERR-DEPT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error gpc
DataItem OP0NW-ERR-GPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error text1
DataItem OP0NW-ERR-LIT1 char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error text2
DataItem OP0NW-ERR-LIT2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error text3
DataItem OP0NW-ERR-LIT3 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error text4
DataItem OP0NW-ERR-LIT4 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// db2 table
DataItem OP0NW-ERR-NAME char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sql sign
DataItem OP0NW-ERR-SIGN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error store
DataItem OP0NW-ERR-STOR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sql function
DataItem OP0NW-ERR-TYPE char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// db2 view
DataItem OP0NW-ERR-VIEW char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// read flag for prog ctl table
DataItem OP0NW-VOPPGM-READ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0NW-WSY2000-COLR-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0NW-WSY2000-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0NW-WSY2000-FND-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0NW-WSY2000-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0NW-WSY2000-POST-1 char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0NW-WSY2000-PROD-REG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0NW-WSY2000-RETURN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0NW-WSY2000-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// found valid credit status
DataItem OP0NW-XCC-STAT-FOUND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xcc index
DataItem OP0NW-XCCIDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// warn flag for msg #051
DataItem OP0NW051 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warn flag for msg #365
DataItem OP0NW365 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bulk order active flag
DataItem OP0NWABF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-dnt-ship-aft-dt
DataItem OP0NWADT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po# hold warning flag
DataItem OP0NWARN num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// use blank availability flag
DataItem OP0NWBAV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bulk/draw flag for aud rec
DataItem OP0NWBD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bulk/draw order flag
DataItem OP0NWBDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-dnt-ship-bfr-dt
DataItem OP0NWBDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved bulk order need date
DataItem OP0NWBNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dd
DataItem OP0NWCDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mmdd
DataItem OP0NWCDT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OP0NWCK char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0NWCK1 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// mm
DataItem OP0NWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// item counter for op2key
DataItem OP0NWCNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display customer order number
DataItem OP0NWDCN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display key
DataItem OP0NWDKY char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display nike order number
DataItem OP0NWDNN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display partition
DataItem OP0NWDPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// change in drop ship location
DataItem OP0NWDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved bulk order d-s-after dt
DataItem OP0NWDSA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temporary hold ccyymmdd-
DataItem OP0NWDT1 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century yy
DataItem OP0NWDT2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yymmdd .
DataItem OP0NWDT3 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage end of file
DataItem OP0NWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage max page
DataItem OP0NWF1M smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage page number
DataItem OP0NWF1P smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Formated company number
DataItem OP0NWFCO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// opfrec data
DataItem OP0NWFDA char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key to dorder.vogcut01
DataItem OP0NWFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// found table entry (y/n)
DataItem OP0NWFND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level
DataItem OP0NWGRP char(374)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse
DataItem OP0NWHS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// instruction counter..
DataItem OP0NWIC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// key to dorder.vogcut01
DataItem OP0NWKY char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key date
DataItem OP0NWKYD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// owner group
DataItem OP0NWKYS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage lgnth
DataItem OP0NWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new line item number
DataItem OP0NWLNB num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working message area
DataItem OP0NWMSG char(92)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// opfrec work dd
DataItem OP0NWNDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// opfrec work date
DataItem OP0NWNDE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved need date
DataItem OP0NWNDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// opfrec work mm
DataItem OP0NWNMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new nike order number
DataItem OP0NWNOR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// opfrec work ccyy
DataItem OP0NWNYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold original customer
DataItem OP0NWOCO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold original store
DataItem OP0NWOST smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order type code
DataItem OP0NWOTC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key to davail.vblnkp01
DataItem OP0NWP01 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prod deadline found flag
DataItem OP0NWPDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// need date + 60 days
DataItem OP0NWPDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// need date past produc dedline
DataItem OP0NWPPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage row
DataItem OP0NWROW char(37)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save dont ship after date
DataItem OP0NWSAD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save dont ship before date
DataItem OP0NWSBD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special cust grp flag
DataItem OP0NWSGC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sku flag
DataItem OP0NWSKF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save need date
DataItem OP0NWSND num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved partition
DataItem OP0NWSPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key to dorder.vogcut01
DataItem OP0NWSUB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved customer order number
DataItem OP0NWSVC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved op1key
DataItem OP0NWSVK char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved nike order number
DataItem OP0NWSVN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save warehouses
DataItem OP0NWSWH char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group item diagnostics errdiag
DataItem OP0NWT1 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag field 1
DataItem OP0NWTK1 num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// errdiag field 2
DataItem OP0NWTK2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// errdiag field 3
DataItem OP0NWTK3 char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag field 4
DataItem OP0NWTK4 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag field 5
DataItem OP0NWTK5 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag field 6
DataItem OP0NWTK6 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag field 7
DataItem OP0NWTK7 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-txt-rec-seq - instruction
DataItem OP0NWTSQ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// text of zip code msg
DataItem OP0NWZTX char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// zip of zip code msg
DataItem OP0NWZZP char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// audit alpha data
DataItem OPFALPHA char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// audit type code
DataItem OPFAUDTP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group - report audit
DataItem OPFGROUP char(52)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// audit numeric data
DataItem OPFNUMRC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// audit value data
DataItem OPFVALUE decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

