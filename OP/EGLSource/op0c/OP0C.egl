package op0c;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import ko.common.*;
import ku.common.*;
import nl.common.*;
import ob.common.*;
import op.common.*;
import pc.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import vv.common.*;
//*** PROGRAM=OP0C ****
// nike order entry - enter customer information / addresses
// 
// Note:     This application must be recompiled if the
//           KUCREC or KUNREC change.  These records are
//           stored temporarily in OP0CW01.
// 
// overview: this application is the first screen in the order
//           entry process.  it accepts the customer number and
//           certain high level order fields.  when completed,
//           the address portion of the program takes control
//           and processes the addresses.
// 
//           control is passed to order header or product
//           programs depending on screen flow option.
// 
//           if in review mode, then return to accept order
//           application (op0j).
// 
//           **************************************************
//           bill group id: code is written to handle bill grp
//           id overrides.  this was a design thing at one time
//           to be used in the future.  to date, it is not used
//           even tho the logic is executed.  it has not been
//           commented out because of the danger that it might
//           blow something else.  today, a bill grp id over-
//           is illegal, a company can have only 1 bill grp id
//           and 0 is illegal.  4/88
//           **************************************************
// 
// date created: 05/20/86
//       author: steve noble
// 
// maintenance history:
// 
//     date     by whom     overview of changes made
//   --------  ----------  ------------------------------------
//   05-20-86   s noble    initial creation
//   08-22-86   d smith    changed logic to use 'taken by' from
//                         previous order as a default
//   09-25-86   t mai      bulk/draw orders project -- modified
//                         program to allow draw orders to be
//                         entered
//   03-13-87   jvande     aded init of enter date in s02.
//   05-05-87   jvande     move xoccd to op1rec when setting up
//                         map in 050. bug: when enter of sessi
//                         def's, unless modified, xoccd never
//                         made it to op1rec.
//   06-25-87   obecke     added carrier code and abrv to map,
//                         update appl to accommodate this.
//   07-27-87   jvande     added diags to s60. store read is
//                         failing on occasion????
//   08-25-87   jvande     new order edits for need date.
//   09-28-87   jvande     added code to s60 default whs06 to
//                         to whs04 for shut down.
//   09/30/87   tfox       turn on picking. hrd cd for whs's
//                         on new pick system.
//   10/14/87   tfox       add code 060 to handle invalid pa1,
//                         pa3. chg date in s60 whs06 to whs04
//                         for shutdown.
//   10/19/87   jvande     added whs 7 to default to 04 like 6.
//   11/09/87   tfox       added code to s31 to check for mail
//                         order customers and send warning msg
//   12/01/87   tfox       added new stmt grp s32 new terms
//                         logic based on order type
//   01/20/88   craine     changed s31 - need date invalid if
//                         futures and xpdtbl rec not found
//                         added error message 404
//   04/01/88   obecke     s72-deleted lines that move 0 to
//                         op1rec.kuablid and op0cm002.kuablid.
//                         bill grp id should never show 0.
//                         s65 -show bill grp id in review mode
//   04/14/88   gwells     production deadline table - s31
//                           replaced xpdtbl with call to
//                           io2560 - dorder.vcutof01.  edit
//                           need date versus prod deadline
//                           via this module.  added opjrec &
//                           oplrec.
//   04/22/88  jhemme      chg kutrec.kunote to .kutendt and
//                         add .kutxndt to s32
//   04/27/88  craine      change default of bulk sales program
//                         to op0cw01 instead of opwrec.
//   04/29/88  obecke      s25-ot validation:chged to domestic
//                         division, removed sales rep=2000.
//                         s32-new ot validation: uses kucrec
//                         and profile table. see stmt grp
//                         notes.  added xopcd to op0cw01.
//   05/10/88  scass       chg io-mod abends to use xsops02
//   05/24/88  scass       special instructions enhancement
//                          op0cs14 - ship-to field adjustment
//                          op0cs40 - call to dcust.vinst001
//                          op0cs43 - main stat-grp spec. inst
//                          op0c020 - logic spec instr call
//                                    for review mode
//                          op0c060 - logic spec instr call
//                                    for update mode
//                          op0c001 - clear op0cw02 - w03
//                          op0cw02 - ship-to/spec inst format
//                          op0cw03 - display key abend
//   06/01/88  obecke      disallow 1tm shipto's for certain
//                         xau codes.  chgd s62,s63.
//   07/07/88  obecke      1st time thru: default 'entered by'
//                         from op0a to 'taken by' on op0cm001.
//                         then on loop back from an accepted
//                         order from op0j, use the previous
//                         order's 'taken by' as default.
//   10/13/88  jwood       changed calls to include NONCSP opt
//   10/19/88  gwells      rebooking - added code to accomo-
//                         date the new 'rebook draw' type -
//                         s05, s07, s08, s25, 050, 060, snt.
//   11/03/88  obecke      protect m002, add pf2 change logic.
//                         110,120,150,160,m002.  #76.
//   11/30/88  obecke      users change their mind.  take the
//                         above item #76 back out.  they're
//                         going to use pf19 instead.  life in
//                         the big city. m002,110,120,150,160.
//   12/13/88  dwalke      allow need date up to two years.
//                         s16,d17,s18, bug #101
//   01/09/89  dwalke      add segmented transaction id to appl
//   02/03/89  jwood       removed yostbl from t & a list
//   02/22/89  obecke      init sales office message fields in
//                         working stg and map. s08,s40. #143
//   02/28/89  obecke      default allow cancel flag to n for
//                         in store promo types. s11. #140.
//   03/02/89  obecke      show msg 454 (gpc not valid for
//                         customer) instead of 203 (cust is
//                         inactive). #148.  s12.
//   04/05/89  obecke      base order type conversion. added
//                         xgptbl,xobtbl.
//   05/02/89  obecke      chg sb3 to use w01.op0cwomf found
//                         flag when lookup in xvotbl for order
//                         type. do not move '99' to xobcd to
//                         end the search!!!
//   05/10/89  jbecke      database changes:  op0cm002, s02,
//                         s59, s62, s63, s64, s65, s70, s72,
//                         s73, s75, s76
//   06/29/89  schase      chg init of prev cr stat cd to '00'.
//                         s02.
//   08/24/89  ssteph      initialize credit fields when
//                         creating orders. s02.
//   09/05/89  skott       wildcard gpc if not ftwr or apparel
//                         for cust/gpc read.  s13
//   09/13/89  skott       chg msg form 033 to 203.  s13
//   09/19/89  ssteph      put cursor on protected field in
//                         op0cm002 so that address is not
//                         keyed over accidentally, except for
//                         sales office 03. 120, 160
//   10/18/89  oricha      edit o.t. profiles for divisions
//                         1,5,7,8.  s25.
//   10/23/89  rcoron      modified op0cs18 to allow flexible
//                         draw orders to have need dates
//                         earlier than the flexible bulk order
//                         need date it is drawing from.  see
//                         also op0i/op0is78.
//   10/31/89  scantr      added code for nil pricing  s12,s25.
//   11/02/89  rcoron      colehan initializes allow cancel
//                         flag to 'n'. s02.
//   11/10/89  skott       validate active gpc's for cust recs
//                         s13, s23.
//   11/15/89  rcoron      allowed only for active kunrecs s12,
//                         s13.
//   12/01/89  tfox        add comp nbr to map. add logic to
//                         display/edit comp nbr to s04,s05,s10
//                         s11,s12,s25,020.
//   12/06/89  cgrice      cleanup of unnecessary read of
//                         kunrec in cust nbr edit.  s12
//   12/07/89  dwalke      changes stgprs s10 s15 to stop chg
//                         to terms, disc , price on slsman
//                         orders. bug #270
//   12/15/89  tfox        comp edits to  s10 s07 s35 s3a s3b
//                         020
//   12/19/89  tfox        comp edits to  s03  act type 67 comp
//                         nbrs can only be s1 ot's.
//   12/20/89  tfox        bypass comp nbr edits temp.
//   12/21/89  cgrice      bug#225- added customer/sales office
//                         restriction using xsotbl.  s12
//   12/28/89  tfox        new comp nbr edits s03 s10 s13 s3a
//   04/06/90  mgatre      removed code that stores agency and
//                         rep in header from customer table:
//                         s12.
//                         write audit record for ship adr chg
//                         090 and SAU(new)
//   04/16/90  BWATSO      Corrected all of the comp number
//                         edits.  Processes and statement
//                         groups affected: 020, 060, S03, S08,
//                         S10, S11, and S3A.  Also added
//                         fields KUCGRP and KUNGRP to
//                         OP0CW01.
//   04/25/90  oricha      bug #336.  default 'y' for allow
//                         cancel for all orders, including
//                         cole haan.  s02.
//   05/30/90  BWATSO      Brand code changes.  Changed: SB3,
//                         S02, S10, S12, S25, and W01.
//                         New: SBC and SLE.
//   06/06/90  BWATSO      Added more account classes to legal
//                         entity check - S12.
//   06/20/90  oricha      removed acct classes from legal
//                         entity check - S12.
//   07/20/90  zlefko      remove cogs xcg table edit - s65
//                         replace with cogs xau tbl edit - s71
//   08/07/90  jwood       changed op0cs02 to use xcscd as a
//                         character field
//   10/09/90  dviert      remove edit for restricted custs
//                         ordering thru sales offices not
//                         authorized by a code on xsotbl  s12.
//                         rename:  xcgcd to op1cogid; s64 s65
//                         s70 s71. chgd op0cwsgr of opocw01
//                         from 1155 to 1164
//   11/06/90  skott       dbb chgs - xsdcd to pc2inseg, xsacd
//                         to xegcd. s06
//   12/20/90  schase      commented out edit for cust acct
//                         class '27' in sales program edit for
//                         acg orders. very tempoary. s15.
//   01/10/91  schase      uncommented code for above descript.
//                         s15.
//   01/11/91  craine      chng whse default from customer to
//                         whse '32' for prop orders until June
//   01/15/91  tfox        add new stmt grp (s22) to edit the
//                         special customer group. s25 calls it
//   01/21/91  craine      allow xso '12' and '08' logons to
//                         order for any customer - op0cs22
//   02/01/91  dflesh      added code to default minimum alloc
//                         % from kunrec (s12).  log #436.
//   02/05/91  craine      replace KUABLGRP with KUCBLAID.
//                         KUAREC no longer used - being deinst
//                         Chg'd s01, s64, s65, s72 & map m002
//   02/12/91  jloyer      DB2 changes; Replace kunrec.kumshaid
//                         with kumrec.kumshaid in S14, S62.
//                         Init op1rec.xchcd with ' ' in S02.
//   02/26/91  swatso      change xchcd from ' ' to '00' in s02
//   03/15/91  jloyer      Change Memphis apparel xsocd from
//                         '03' to '20'; sb3, sb6 (new), s10.
//   03/28/91  schase      commented out order type check for
//                         determining xwhcd before 5/25/91.s12
//   04/02/91  jloyer      Chg xsocd = '01' or '02' to '20' on
//                         apparel orders; sb6
//   04/03/91  tfox        chgs for menu services. s01,s06,s12,
//                         s31,s78(new).
//   04/25/91  dflesh      log #484.  chg in s10, s15.  if spgm
//                         alw fl in xautbl is 'n' do not allow
//                         spgm for acct cls or acct type.
//   04/25/91  bbake2      added edits for cust po #.  changes
//                         in sah, s25
//   05/06/91  craine      add edit for dept code. s12
//   05/10/91  bbake2      revised edits for cust po# changes.
//                         changes to map 001, sah, saw, s10,
//                         s14, 001, 020, 060, w/s c01, table
//                         t01.
//   05/23/91  schen       log #554 - data base changes
//                         changed the occurance of kuprec.
//                         xsgcd from 40 to 10 in s26 and s31.
//   05/23/91  dharri      log #642 - cust self dept on address
//                         s62, s63.
//   05/30/91  dharri      log #642 - added edit for dept = 0
//                         s62, s63.
//   06/11/91  dlegg       data base changes. Rename YPOCD to
//                         KUCYPOFT in op0csah, op0csaw. Rename
//                         KUNBOCD to KUNABOFL in op0cs12.
//                         Rename YLDBC to PWRLBCD in op0cs78.
//                         Change oc0cs26 to reference only
//                         10 occurs of SP1REC.XSGCD.
//   08/16/91  JLoyer      Log #675 - Customer specified pack-
//                         codes are not allowed on orders that
//                         can be allocated on-line.
//                         Chgd: OP0C, 001, 160, OP0CW01.
//                         New:  XPATBL, S79, S81.
//   09/16/91  jhecke      Log #690 - Default handling code to
//                         "ALL" for orders with gpc=03,
//                         sales office=12 and order type=d1,d2
//   10/08/91  dmeier      db changes - removed references to
//                         op1owrdt. renamed opurec.xxxpgmno
//                         opurec.xxxpgmnb. op0cm001, op0csau,
//                         s05, s10.
//                         and warehouse = 51 (apparel). Added
//                         statement group OP0CS83 and modified
//                         process OP0C160.  Also corrected
//                         "hole" in OP0CS82 so that msg flag
//                         will be tripped appropriately.
//   10/16/91   JJOHN2     Log # 692 - Default handling code to
//                         'EXP' when the division is '02',
//                         international; and GPC id '03',
//                         apparel.  See OP0C160 and OP0CS83.
//                         Added code in OP0CS82 to process the
//                         warning message flag.
//   03/11/92   JLoyer     DB2 chgs: dlet op1bgrpo, op0cmbgo,
//                         op1dsdcf, op1wipin: s02, s65, s72,
//                         op0cm002.  Increased W01 from 1133
//                         to 1138 due to chgs in kucrec.
//   05/19/92   SCantrell  Change OP0CSLE to use the brand
//                         table to edit the co.'s legal entity
//                         against the brand on the order. #814
//   06/08/92   jhecker    Database changes update KUCREC.
//   08/04/92   bbake2     log#785, added comp edits 020, 060
//   10/01/92   bbake2     log#903, added call to ku1540 to
//                         obtain allocation sequence and
//                         assignment control for this order.
//   11/03/92   tfox       fixed code in op0cs27 to move spaces
//                         to spgm id on op1rec when you get
//                         a +100 when checking for specific
//                         customer.
//   11/23/92   dharri     op0cs10 - changed code to edit sls
//                         pgm if field modified rather than
//                         if greater than spaces.
//   12/10/92   dcaust     log #855.  force international order
//                         with order class 'in' to use direct
//                         ship code '1' and set whse cd '  '.
//                         if draw order, don't allow order
//                         class 'in'.
//                         s60, 060, s19.
//   02/26/93   bbake2     log #868.  added airborne edits
//                         s25, s-airborne, w01, voppgm01,
//                         xsomw01, xsoms-chk-airborne
//   05/13/93   dcaust     log #964. international airborne
//                         phase II.  edits for base ot, order
//                         class, whse, direct ship.
//                         s60, sb1, s19; new op0cs-get-sls-reg
//   07/07/93   gcalki     log #848. international divert order
//                         s18, s31, s60, w01, new s-chk-divert
//   08/10/93   bbake2     db2 changes.  increased op0cwsgr
//                         for increase in kucgrp
//   11/09/93   schase     db2 changes.  Increased op0cwsgr for
//                         for decrease in kucgrp.  Changed
//                         xxxaddr1,2,3 to xxx-addr1,2,3 for
//                         kulrec references.
//   12/20/93   gcalki     xcc table change - add check for
//                         status code. s12, w01, check-credit.
//   12/30/93   gcalki     fix error message problem in s12
//                         caused by previous enhancement. s12.
//   03/01/94   schase     DB2 CHANGES (MARCH): Increased size
//                         op0cwsgr on op0cw01, and op0cwdet,
//                         op0cwsa1, op0cwsa2, op0cwsa3,
//                         op0cwsl2, op0cwsl3, op0cwsl4 on
//                         op0cw02, op0cwosr, op0cwobr.
//   04/01/94   gcalki     Log #1003 - renamed causera to
//                         ca-user-workarea-4k so it can hold
//                         opwrec which is now 3072 bytes.(ALL)
//   04/13/95   kkauth     no log - changed option on call to
//                         IO0200 to 'SF' - S78
//   06/06/95   dliddl     changes to incorporate Nike Canada
//                         into GOAL system.
//   10/05/95   dliddl     dont edit the ship to/bill to state
//                         and zip code for Canadian Intl order
//   04/09/96   rmcali     chg op0csc2 code 94 and 61 are valid
//                         - OP0CS72, OP0CS75
//   10/22/96   slarse     initialize op0gflag
//   06/24/97   csawki     Added Equipment/Product Category
//                         changes. Modified OP0CM001, OP0CSB3
//                         OP0CS01, OP0CS05, OP0C001, OP0C050.
//   06/24/97   dsawki     Added Order Type Profile lookup in
//                         OP0CS32. Added call to VCUXOP01.
//                         Created new SGRP - OP0CS33 for
//                         additional call to VCUXOP01.
//   10/03/97   CBRINE     Chged S32 & S33 to look at VCUXOP01
//   10/28/97   SATYAM     Added edit in OP0CS86, before
//                         calling iomod IO0460 to check
//                         whether any rows exist with the same
//                         key values, before inserting rows in
//                         dorder.voaddr01. If it exists then
//                         it updates the row instead of
//                         inserting
//   03/24/98   VSANKA     removed use of xvotbl and added code
//                         to access dcorp.vxvo0001 using the
//                         iomod vxvo0001.
//                         The statement group changed is:SB3
//   04/01/98   SGOPAL     Removed code that accesses XVOTBL in
//                         OP0CSB3.
//   08/07/98   SGOPAL     Changed code in OP0CSB1 to set the
//                         op-alw-cncl-fl to 'N' when the order
//                         type is M1 or MD.
//   05/11/99   SCHAPY       Removed sales ofs '01' and '02'
//                         check in OP0CSB6 statement group as
//                         per scotts suggestion.
//  10/11/99    SBHARA     TIMING  CHANGES
//                         Changed the code in OP0CSB1
//                         To retrict the future orders
//                         entering in to the system for
//                         timing categories 'st' 'kn'
//  10/27/99    SBHARA     Timing changes been removed
//                         as per the user's request
//  03/20/00    SBHARA     SPAIN TRADEMARK PROJECT
//                         LOGIC ADDED TO EDIT THE COUNTRY CODE
//                         ZIPCODE AND STATE CODE
//                         THE FOLLOWING STATEMENT GROUPS ARE
//                         BEEN MODIFIED
//                         OP0CS62  OP0CS63 OP0CS64
//                         OP0CS65  OP0CS68 OP0CS69
//                         OP0CS72  OP0CS75 OP0CS76
//                         MAP ALSO BEEN MODIFIED
//  06/02/00    agooll     added logic to set the mdt for
//                         product category code
//                         Search for 'TT#6276
//  08/08/00    rharat     added logic to default order class
//                         'IN' for canada international orders
//                         Search for Canada divestiture.
// 
// *********************
Program OP0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  KUFREC KUFREC; // record
  KUJREC KUJREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  KUPREC KUPREC; // record
  KUQREC KUQREC; // record
  KUTREC KUTREC; // record
  KUYREC KUYREC; // record
  OP0CW01 OP0CW01; // record
  OP0CW02 OP0CW02; // record
  OP0CW03 OP0CW03; // record
  OP0CW04 OP0CW04; // record
  OP0CW05 OP0CW05 { redefines = OP0CW04 } ; // record
  OP1REC OP1REC; // record
  OP5REC OP5REC; // record
  OP7REC OP7REC; // record
  OPAREC OPAREC; // record
  OPJREC OPJREC; // record
  OPKREC OPKREC; // record
  OPLREC OPLREC; // record
  OPOREC OPOREC; // record
  OPUREC OPUREC; // record
  OPWREC OPWREC; // record
  OPWREC01 OPWREC01; // record
  SP1REC SP1REC; // record
  SP2REC SP2REC; // record
  SP4REC SP4REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  TF1REC TF1REC; // record
  VCULVLPD VCULVLPD; // record
  VCUXOP01 VCUXOP01; // record
  VDSTRB01 VDSTRB01; // record
  VOPPGM01 VOPPGM01; // record
  VXVO0001 VXVO0001; // record
  XS0MW01 XS0MW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use OP0CT01; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use XBCTBL; // table
  use XCCTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XNDTBL {deleteAfterUse = yes}; // table
  use XOBTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XOCTBL {deleteAfterUse = yes}; // table
  use XPATBL; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XSOTBL {deleteAfterUse = yes}; // table
  use XSTTBL {deleteAfterUse = yes}; // table
  use OP0CM.OP0CM001,  // forms
      OP0CM.OP0CM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OP0C001: OP0C001();



        /* check for enter new order*/

    if (OPWREC.OPWREVM == 0) /* check for not review*/
      goto OP0C050; /* branch to enter new order*/
    end


        /* check for review addr's*/

    if (OPWREC.OPWREVM == 3) /* review addresses?*/
      goto OP0C100; /* branch to review addresses*/
    end


        /* assume review customer id screen*/

    goto OP0C010; /* branch to review cust id*/



     /* *************************************************************/
    OP0C010: OP0C010();



        /* branch to review converse*/

    goto OP0C020; /* branch to review converse*/



     /* *************************************************************/
    OP0C020: OP0C020();




        /* if error flag set or pf12 (edit only)*/
          /* then converse the map*/


    if (OPAREC.OPAERR == "Y"
     || converseVar.eventKey is pf12)
      goto OP0C020; /* branch to converse review map*/
    end

    goto OP0C090; /* branch to cust id flow control*/



     /* *************************************************************/
    OP0C050: OP0C050();



        /* branch to converse*/

    goto OP0C060; /* branch to converse*/



     /* *************************************************************/
    OP0C060: OP0C060();





        /* if error flag set or pf12 (edit only)*/
          /* then converse the map*/


    if (OPAREC.OPAERR == "Y"
     || converseVar.eventKey is pf12)
      goto OP0C060; /* branch to converse map*/
    end

    goto OP0C090; /* branch to cust id flow control*/



     /* *************************************************************/
    OP0C090: OP0C090();



        /* flow to address portion of program*/
        /* if we got here then we are not in review mode*/

    goto OP0C100; /* branch to addr part of program*/



     /* *************************************************************/
    OP0C100: OP0C100();



        /* *********************************************************/
        /* * this process controls the program flow of the        **/
        /* * address processing portion of the program.           **/
        /* *********************************************************/


         /* if review mode*/
           /* branch to address review portion of program*/
         /* else*/
           /* branch to address entry portion of program*/


    if (OPWREC.OPWREVM > 0) /* check for review*/
      goto OP0C110; /* branch to review addresses*/
    end


        /* not review - therefore enter addresses*/

    goto OP0C150; /* branch to enter addresses*/



     /* *************************************************************/
    OP0C110: OP0C110();



        /* branch to review converse*/

    goto OP0C120; /* branch to review converse*/



     /* *************************************************************/
    OP0C120: OP0C120();



        /* if error flag set or pf12 (edit only)*/
          /* then converse the map*/

    if (OPAREC.OPAERR == "Y"
     || converseVar.eventKey is pf12)
      goto OP0C120; /* branch to converse review map*/
    end

    goto OP0C190; /* branch to cust id flow control*/



     /* *************************************************************/
    OP0C150: OP0C150();



        /* branch to converse*/

    goto OP0C160; /* branch to converse*/



     /* *************************************************************/
    OP0C160: OP0C160();



                  /* if screen is to be refreshed,*/
               /* start over with op0cm002 processing again*/

    if (converseVar.eventKey is pf19)
      goto OP0C100; /* control address flow*/
    end


        /* if error flag set or pf12 (edit only)*/
          /* then converse the map*/


    if (OPAREC.OPAERR == "Y"
     || converseVar.eventKey is pf12)
      goto OP0C160; /* branch to converse map*/
    end

    goto OP0C190; /* branch to cust id flow control*/



     /* *************************************************************/
    OP0C190: OP0C190();



        /* dummy flow stage*/



     /* *************************************************************/
  end // end main
end // end OP0C

// program init / control flow
Function OP0C001()



     /* **********************************************************/
     /* * this process inits program work area, map area,       **/
     /* * checks security, and determines program flow.         **/
     /* **********************************************************/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

      /* set revision number of application*/

  OP0CM001.OPMRVN = 04; /* 7/2/87 obecke*/
  OP0CM002.OPMRVN = 05; /* 7/2/87 obecke*/

  set OP0CW02 empty;
  set OP0CW03 empty;

      /* check entry security*/

  XSENTRY();


   /* ****************************************************/
   /* *** set segmented trans id                      ****/
   /* ****************************************************/

  COMMAREA.CAEZSAP = sysVar.transactionID;
  COMMAREA.CAEZSG12 = "OP";
  COMMAREA.CAEZSG4 = "C";
  sysVar.transactionID = COMMAREA.CAEZSAP;

   /* *************************************************************/



      /* retrieve user common area and order entry security*/

  OP0CS01(); /* clear ws records*/
  XSOPS01(); /* check order entry security*/

  OPWREC.OPWSGRP = COMMAREA.CA-USER-WORKAREA-4K; /* get o/e commarea*/
   /* get prod cat o/e*/
  OPWREC01.XPCGRP = COMMAREA.CA-USER-WORKAREA-2K-C; /* commarea*/



      /* init areas*/

  TA1REC.TA1TYPE = "DB2 "; /* abend type*/
  TA1REC.TA1FUNC = "RETN"; /* abend function (return)*/
  TA1REC.TA1PGMNM = "OP0C    "; /* pgm name*/
  TA1REC.TA1MAP = "OP0CM001"; /* current map name*/
  TA1REC.TA1LOCAT[1] = "OP0C001 "; /* process name*/

  OP0CM001.OPMDT = VGVar.currentShortGregorianDate; /* set date*/

  OPAREC.OPACDT = VGVar.currentShortGregorianDate; /* set curr date*/
  if (OPAREC.OPACYY > 56) /* set century based on year*/
    OPAREC.OPACCC = 19;
  else
    OPAREC.OPACCC = 20;
  end


      /* get op1rec -- if it is draw order, the op1rec*/
      /* passed to here is the first active bulk order*/
      /* which has available quantities for draws*/


  OP1REC.OP1GROUP = OPWREC.OP1GROUP; /* get ord hdr rec*/

  OP0CW01.OP0CWTBR = OP1REC.OP1TBREP; /* save taken-by rep*/

    /* set po warning flag to 9 indicating warning message*/
      /* has not been displayed*/
  OP0CW01.OP0CWARN = 9;

  OP0CW01.OP0CW1ST = "Y"; /* set 1st-time through flag = 'y'*/

  if (OPWREC.OPWREVM == 0)
    if (OPWREC.OPWFUNC == "4") /* draw from bulk order*/
      OP0CSNT(); /* get bulk order need date & warehouse*/
    end
    OP0CS02(); /* init op1rec*/
  end



   /* *************************************************************/
end // end OP0C001

// get order for review
Function OP0C010()



     /* **********************************************************/
     /* * this controls the retrieval of an order for review    **/
     /* * of customer id screen.                                **/
     /* **********************************************************/



      /* init error diag areas*/

  TA1REC.TA1LOCAT[1] = "OP0C010 "; /* process name*/


      /* format order for review process*/

  OP0CS05(); /* format order fields on screen*/
  set OP0CM001.OP1ORDBY cursor;


      /* show cust line*/

  set OP0CM001.OP0CMCUL skip; /* show literal field*/
  OPAREC.OPACUCO = OP1REC.KUCCOID; /* format cust co*/
  OPAREC.OPASEP1 = ".";
  OPAREC.OPACUSR = OP1REC.KUMSTRID; /* format cust co*/
  OPAREC.OPASEP2 = ".";
  OPAREC.OPACUDP = OP1REC.XNXCD; /* format cust co*/
  OP0CM001.OPACUNO = OPAREC.OPACUNO; /* move formatted cust nbr*/
  OP0CM001.KUMSTRNM = OPWREC.KUMSTRNM; /* move cust name*/
  converseLib.validationFailed(045);
                                   /* can't change ... (fields) ... message*/

  OP0CM001.OP1CUPO = OP1REC.OP1CUPO; /* show purchase order nbr*/


   /* *************************************************************/
end // end OP0C010

// converse map and edit data
Function OP0C020()



      /* *********************************************************/
      /* * this process converses the map, handles aid key      **/
      /* * requests, edits entered fields for cust id review.   **/
      /* *********************************************************/



      /* init areas*/

  TA1REC.TA1LOCAT[1] = "OP0C020 "; /* process name*/
  OP0CM001.OPMPRC = "OP0C020 "; /* process name*/


      /* protect fields which may not be updated on review*/

  set OP0CM001.OP0CMCO skip; /* protect customer company*/
  set OP0CM001.OP0CMST skip; /* protect customer store*/
  set OP0CM001.OP0CMDPT skip; /* protect customer dept*/
  set OP0CM001.OP0CMZIP skip; /* protect validate ship to zip*/
  set OP0CM001.XOBCD skip; /* protect base order type*/
  set OP0CM001.OP1CMPNB skip; /* protect comp number*/
  set OP0CM001.XGPCD skip; /* protect gpc code*/
  set OP0CM001.XOCCD skip; /* protect order class*/
  set OP0CM001.SP1ID skip; /* protect sales program*/
  set OP0CM001.OP0CMNDT skip; /* protect need date*/


      /* do not show pf2, pf3, and pa2 as valid keys to the user*/
      /* during review*/

  set OP0CM001.OP0CMPF2 skip, invisible; /* invalidate pf key to user*/
  set OP0CM001.OP0CMPF3 skip, invisible; /* invalidate pf key to user*/
  set OP0CM001.OP0CMPA2 skip, invisible; /* invalidate pa key to user*/


      /* force segmented converse execution mode*/

  converseVar.segmentedMode = 1; /* force segmented execution mode*/



   /* *************************************************************/
  converse OP0CM001 ;
   /* *************************************************************/


      /* clear (reset fields)*/

  OPAREC.OPAERR = "N"; /* clear error flag*/
  OP0CW01.OP0CWCUF = "N"; /* clear error flag*/
  OP0CW01.OP0CWECF = "N"; /* clear edit flag*/
  OP0CW01.OP0CWEZF = "N"; /* clear edit flag*/
  OP0CW01.OP0CWOCF = "N"; /* clear error flag*/

    /* check for reset of warning flag, conditions for setting*/
    /* po# warning may have changed, value of 9 indicates*/
   /* message has not been displayed*/
  if (OP0CM001.OP1CUPO is modified)
    OP0CW01.OP0CWARN = 9;
  end

  OP0CS07(); /* if modified set fields modified*/


      /* check and process valid aid key requests*/

      /* enter - continue processing*/
        /* pf12- continue processing (next screen if no errors)*/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
     /* ** next sentence ** continue processing ***/
  else
    converseLib.validationFailed(008); /* invalid key pressed message*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    exit stack;
  end


      /* perform field edits*/

  OP0CS10(); /* perform field edits*/
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* release data base resources*/

   /* call op0o comp edits routine*/

  if (OPAREC.OPAERR == "N") /* no errors*/
    set OPOREC empty; /* initialize record*/
    if (OP0CM001.OP1CMPNB == 0) /* no comp co id*/
      OPOREC.KUCCOID = OP0CM001.OP0CMCO; /* /cu-co-id*/
    else
      OPOREC.KUCCOID = OP0CM001.OP1CMPNB; /* comp-co-id*/
    end
    OPOREC.XXXUSRID = COMMAREA.CAUSERID; /* user id*/

    call "OP0O" (OPOREC) {isNoRefresh = yes}; /* call appl op0o comp edits*/

    if (OPOREC.OPO-RETURN-CD == 00) /* user has authority*/
        /* next sentence*/
    else
      if (OPOREC.OPO-RETURN-CD == 01) /* user has authority*/
        /* next sentence*/
      else
        if (OP0CM001.OP1CMPNB == 0) /* no comp co id*/
          set OP0CM001.OP0CMCO cursor, modified, bold; /* highlight error*/
        else
          set OP0CM001.OP1CMPNB cursor, modified, bold; /* highlight error*/
        end
        if (OPOREC.OPO-RETURN-CD == 02) /* user does not have authority*/
          OPAREC.OPAERR = "Y"; /* set error to true*/
          converseLib.validationFailed(573); /* restricted acct nbr/acct class*/
        else
          if (OPOREC.OPO-RETURN-CD == 03) /* acct cls cd not found in xautbl*/
            OPAREC.OPAERR = "Y"; /* set error to true*/
            converseLib.validationFailed(574); /* acct cls cd not found in xautbl*/
          else
            if (OPOREC.OPO-RETURN-CD == 04) /* company not found in vcmpny*/
              OPAREC.OPAERR = "Y"; /* set error to true*/
              converseLib.validationFailed(767); /* acct cls cd not found in xautbl*/
            else
              XSPF4(); /* xfer to menu abend in io mod*/
                                   /* application op0o*/
              exit program; /* xfer to main menu failure*/
            end
          end
        end
      end
    end
  end

      /* if errors found then converse the map*/
      /* if pf12 then assume edit only (converse the map)*/

  if (OPAREC.OPAERR == "Y" /* errors found ?*/
   || converseVar.eventKey is pf12) /* edit only?*/
    exit stack;
  end

  OP0CM001.OP0CMLN6 = " ";
  if (OP0CW01.OP0CWARN == 0) /* warning already displayed*/
      /* next sentence*/
  else
    OP0CSAW(); /* set up warning message*/
    if (OP0CW01.OP0CWARN != 0) /* there is a warning*/
      OPAREC.OPAERR = "Y"; /* prevent updates*/
      OP0CM001.OP0CMLN6 = OP0CT01.OP0CTMSG[OP0CWARN];
      OP0CW01.OP0CWARN = 0; /* turn off the warn flag*/
    else
    end
  end

      /* save any changes to op1rec*/

  OPWREC.OP1GROUP = OP1REC.OP1GROUP; /* save op1rec*/


  if (OP0CW02.OP0CWSIF == "Y") /* special instruction flag*/
    /* next sentence*/
  else
    OP0CS40(); /* select special instructions*/
    if (OP0CW02.OP0CWSIF == "Y") /* special instruction flag*/
      VAGen_EZEMSG = "CHECK SALES RESTRICTIONS";
      OPAREC.OPAERR = "Y"; /* to converse*/
    end
  end
   /* *************************************************************/


   /* *************************************************************/
end // end OP0C020

// init defaults for new order
Function OP0C050()


     /* **********************************************************/
     /* * this controls the initialization process for entering **/
     /* * a new order.                                          **/
     /* **********************************************************/


      /* init error diag areas*/

  TA1REC.TA1LOCAT[1] = "OP0C050 "; /* process name*/


      /* darken cust literal in heading*/

  set OP0CM001.OP0CMCUL skip, invisible;


      /* if from ki0i customer inquiry and a number was returned,*/
      /* then format the customer number in the screen.*/

  if (COMMAREA.CAFROMAP == "KI0I")
    OP0CS06(); /* reinit opwrec fields*/
    OP0CW01.OP0CWKOI = COMMAREA.CAITEM; /* group move*/
    COMMAREA.CAITEM = " "; /* clear field*/
    if (OP0CW01.OP0CWCUS > "0000000" /* if valid data returned*/
     && OP0CW01.OP0CWSTO >= "0000"   
     && OP0CW01.OP0CWDPT >= "00")   
      OP0CM001.OP0CMCO = OP0CW01.OP0CWCUN; /* load cust co*/
      OP0CM001.OP0CMST = OP0CW01.OP0CWSTN; /* load cust store*/
      OP0CM001.OP0CMDPT = OP0CW01.OP0CWDPN; /* load cust dept*/
      OP0CM001.OP0CMZIP = OP0CW01.OP0CWZP; /* load cust ship zip*/
      set OP0CM001.OP1ORDBY cursor;
    end
  end



      /* set defaults*/

  OP0CM001.XOBCD = OPWREC.XOBCD; /* base order type code*/
  if (OPWREC.XOBCD in XOBTBL.XOBCD /* base order type*/
   && XOBTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
    OP0CM001.XOBDESC = XOBTBL.XOBDESC[sysVar.arrayIndex]; /* order type abrv*/
  else
    OP0CM001.XOBDESC = " "; /* order type abrv*/
  end

  if (OPWREC.OPWFUNC == "4") /* if draw from bulk, move bulk's*/
    OP0CM001.XGPCD = OP0CW01.XGPCD; /* gpc to map and protect*/
     /* set autoskip in process 060 right before converse*/
    if (OP0CW01.XGPCD in XGPTBL.XGPCD
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      OP0CM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    else
      OP0CM001.XGPABRV = " ";
    end
  else
    OP0CM001.XGPCD = OPWREC.XGPCD; /* gpc code*/
    if (OPWREC.XGPCD in XGPTBL.XGPCD
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      OP0CM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    else
      OP0CM001.XGPABRV = " ";
    end
  end

  OP0CM001.XOCCD = OPWREC.OPWXOCCD; /* order class code*/
  if (OPWREC.OPWXOCCD in XOCTBL.XOCCD /* order class*/
   && XOCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
    OP0CM001.XOCABRV = XOCTBL.XOCABRV[sysVar.arrayIndex]; /* order class abrv*/
    OP1REC.XOCCD = OP0CM001.XOCCD; /* save into hdr record*/
  else
    OP0CM001.XOCABRV = " "; /* order class abrv*/
  end

  if (OPWREC.XBDCD == "4") /* rebook bulk*/
    OPWREC.OPWDNDT = OP0CW01.OP0CWBNT; /* bulk need date*/
    OPAREC.OPAWDT = OPWREC.OPWDNDT; /* need date*/
    OPAREC.OPAFYY = OPAREC.OPAWYY;
    OPAREC.OPAFMM = OPAREC.OPAWMM;
    OPAREC.OPAFDD = OPAREC.OPAWDD;
    OP0CM001.OP0CMNDT = OPAREC.OPAFDT;
    set OP0CM001.OP0CMNDT protect;
    OP1REC.OP1CUNDT = OP0CW01.OP0CWBNT; /* move need date to op1rec*/
  else
    if (OPWREC.OPWDNDT > 0) /* need date*/
      OPAREC.OPAWDT = OPWREC.OPWDNDT; /* need date*/
      OPAREC.OPAFYY = OPAREC.OPAWYY;
      OPAREC.OPAFMM = OPAREC.OPAWMM;
      OPAREC.OPAFDD = OPAREC.OPAWDD;
      OP0CM001.OP0CMNDT = OPAREC.OPAFDT;
    end
  end

  OP0CM001.XPCCD = OPWREC01.XPCCD; /* move prod cat from commarea*/

  if (OPWREC.OPWSP1ID > " ") /* default sales program?*/
    OP0CM001.SP1ID = OPWREC.OPWSP1ID; /* sales program*/
    OP0CS15(); /* get sales program name*/
  end

  if (OP0CW01.SP1ID > " ") /* default sales program from bulk?*/
    OP0CM001.SP1ID = OP0CW01.SP1ID; /* sales program*/
    OP0CS15(); /* get sales program name*/
  end

    /* CANA 06/04*/

  if (COMMAREA.CAFROMAP == "KI0I") /* CANA coming from appl KI0I*/
    OP0CM001.ZFC-CRCY-CD = OP1REC.ZFC-CRCY-CD; /* CANA currency code*/
  else
    if (OPWREC.OPWFUNC == "4") /* CANA bulk order*/
      OP0CM001.ZFC-CRCY-CD = OP1REC.ZFC-CRCY-CD; /* CANA currency cd*/
    else /* CANA all others*/
      OP0CM001.ZFC-CRCY-CD = KUMREC.ZFC-CRCY-CD; /* CANA currency cd*/
    end /* CANA*/
  end /* CANA*/

  if (OPWREC.XBDCD == "4") /* rebook bulk*/
    set OP0CM001.SP1ID protect;
  end

      /* set required fields modified to force edits*/

  set OP0CM001.OP0CMCO modified; /* customer company*/
  set OP0CM001.OP0CMST modified; /* customer store*/
  set OP0CM001.OP0CMDPT modified; /* customer department*/
  set OP0CM001.OP0CMZIP modified; /* customer zip code*/
  set OP0CM001.XXXUSRID modified; /* taken by logon id*/
  set OP0CM001.XOBCD modified; /* order type code*/
  set OP0CM001.XGPCD modified; /* gpc code*/
  if (OP1REC.XOCCD > " ") /* order class code*/
    set OP0CM001.XOCCD modified;
  end
  set OP0CM001.OP0CMRDT modified; /* date received*/
  if (OPWREC.OPWSP1ID > " " /* sales program ?*/
   || OP0CW01.SP1ID > "  ")
    set OP0CM001.SP1ID modified; /* sales program*/
  end

  if (OPWREC.XBDCD == "4") /* rebook bulk*/
    set OP0CM001.OP0CMNDT protect;
  else
    if (OP0CW01.OP0CWVNT == "N") /* need date is not good*/
      set OP0CM001.OP0CMNDT modified, bold;
    else
      set OP0CM001.OP0CMNDT modified; /* edit again*/
    end
  end

  OP0CW01.OP0CWMCF = "N"; /* mail order cust checked flag*/



   /* *************************************************************/
end // end OP0C050

// converse map and edit data
Function OP0C060()


      /* *********************************************************/
      /* * this process converses the map, handles aid key      **/
      /* * requests, edits entered fields.                      **/
      /* *********************************************************/



      /* init areas*/

  TA1REC.TA1LOCAT[1] = "OP0C060 "; /* process name*/
  OP0CM001.OPMPRC = "OP0C060 "; /* process name*/



      /* force segmented converse execution mode*/

  converseVar.segmentedMode = 1; /* force segmented execution mode*/


  if (OPWREC.OPWFUNC == "4") /* if a draw order*/
    set OP0CM001.XGPCD skip; /* can't touch gpc*/
    if (OP1REC.XDVCD == "02") /* if international order*/
      if (OP0CM001.XOCCD == "IN") /* if order class 'international'*/
        converseLib.validationFailed(787); /* can't have order class 'in'*/
        set OP0CM001.XOCCD cursor, modified, bold;
        OPAREC.OPAERR = "Y";
      end
    end
  end

   /* *************************************************************/
   /* *************************************************************/
  converse OP0CM001 ;
   /* *************************************************************/


      /* clear (reset fields)*/

  OPAREC.OPAERR = "N"; /* clear error flag*/
  OP0CW01.OP0CWCUF = "N"; /* clear error flag*/
  OP0CW01.OP0CWECF = "N"; /* clear edit flag*/
  OP0CW01.OP0CWEZF = "N"; /* clear edit flag*/
  OP0CW01.OP0CWOCF = "N"; /* clear error flag*/

    /* check for reset of po warning flag, conditions for setting*/
    /* warning may have changed.  value of 9 indicates message*/
    /* has not been displayed*/
  if (OP0CM001.OP0CMCO is modified
   || OP0CM001.OP1CUPO is modified)
    OP0CW01.OP0CWARN = 9;
  end

  OP0CS08(); /* if modified set fields modified*/


      /* clear help area in map*/

  if (OP0CM001.OP0CMHTI > " ") /* help title exists?*/
    OP0CM001.OP0CMHTI = " "; /* clear title*/
    sysVar.arrayIndex = 1;
    while (sysVar.arrayIndex < 23) /* clear help table*/
      OP0CM001.OP0CMHCD[sysVar.arrayIndex] = " "; /* clear code*/
      OP0CM001.OP0CMHAB[sysVar.arrayIndex] = " "; /* clear abrv*/
      sysVar.arrayIndex = sysVar.arrayIndex + 1;
    end
  end


      /* check and process valid aid key requests*/

      /* enter - continue processing*/
        /* pf2 - customer alpha search inquiry*/
        /* pf3 - o/e menu*/
        /* pf12- continue processing (next screen if no errors)*/
        /* pa2 - reject order*/
        /* pf19- refresh screen, start over again*/



  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
     /* ** next sentence ** continue processing ***/
  else
    if (converseVar.eventKey is pf2) /* check for reject order*/
      COMMAREA.CA-USER-WORKAREA-4K = OPWREC.OPWSGRP;
                                                     /* save user comm area*/
      COMMAREA.CAITEM = " "; /* clear item field*/
      COMMAREA.CATOAP = "KI0I"; /* transfer to ki0i*/
      XSEXIT();
      COMMAREA.CATOAP = " "; /* clear to appl*/
      OPAREC.OPAERR = "Y"; /* set error flag*/
      OP0CM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      exit stack;
    else
      if (converseVar.eventKey is pf3) /* check for reject order*/
        COMMAREA.CA-USER-WORKAREA-4K = OPWREC.OPWSGRP;
                                                     /* save user comm area*/
        COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
        COMMAREA.CACURRAP = "OP0B";
        transfer to program "OP0B" passing COMMAREA; /* transfer to o/e menu*/
      else
        if (converseVar.eventKey is pa2) /* check for reject order*/
          COMMAREA.CA-USER-WORKAREA-4K = OPWREC.OPWSGRP;
                                                     /* save user comm area*/
          COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
          COMMAREA.CACURRAP = "OP0B";
          transfer to program "OP0B" passing COMMAREA; /* transfer to o/e menu*/
        else
          converseLib.validationFailed(008); /* invalid key pressed message*/
          OPAREC.OPAERR = "Y"; /* set error flag*/
          if (converseVar.eventKey is pa1
           || converseVar.eventKey is pa3)
            set OP0CM001.XOBCD modified;
            set OP0CM001.XGPCD modified;
            set OP0CM001.OP0CMCO modified;
            set OP0CM001.OP0CMST modified;
            set OP0CM001.OP0CMDPT modified;
            set OP0CM001.OP0CMZIP modified;
            set OP0CM001.OP1ORDBY modified;
            set OP0CM001.XXXUSRID modified;
            set OP0CM001.XOCCD modified;
            set OP0CM001.OP1CUPO modified;
            set OP0CM001.OP1CMPNB modified;
            set OP0CM001.OP0CMRDT modified;
            if (OPWREC.XBDCD == "4") /* rebook bulk*/
              set OP0CM001.OP0CMNDT protect;
              set OP0CM001.SP1ID protect;
            else
              set OP0CM001.OP0CMNDT modified;
              set OP0CM001.SP1ID modified;
            end
          end
          exit stack;
        end
      end
    end
  end


      /* perform field edits*/

  OP0CS10(); /* perform field edits*/
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* release data base resources*/

   /* call op0o comp edits routine*/

  if (OPAREC.OPAERR == "N") /* no errors*/
    set OPOREC empty; /* initialize record*/
    if (OP0CM001.OP1CMPNB == 0) /* no comp co id*/
      OPOREC.KUCCOID = OP0CM001.OP0CMCO; /* /cu-co-id*/
    else
      OPOREC.KUCCOID = OP0CM001.OP1CMPNB; /* comp-co-id*/
    end
    OPOREC.XXXUSRID = COMMAREA.CAUSERID; /* user id*/

    call "OP0O" (OPOREC) {isNoRefresh = yes}; /* call appl op0o comp edits*/

    if (OPOREC.OPO-RETURN-CD == 00) /* user has authority*/
     /* next sentence*/
    else
      if (OPOREC.OPO-RETURN-CD == 01) /* user has authority*/
         /* next sentence*/
      else
        if (OP0CM001.OP1CMPNB == 0) /* no comp co id*/
          set OP0CM001.OP0CMCO cursor, modified, bold; /* highlight error*/
        else
          set OP0CM001.OP1CMPNB cursor, modified, bold; /* highlight error*/
        end
        if (OPOREC.OPO-RETURN-CD == 02) /* user does not have authority*/
          OPAREC.OPAERR = "Y"; /* set error to true*/
          converseLib.validationFailed(573); /* restricted acct nbr/acct class*/
        else
          if (OPOREC.OPO-RETURN-CD == 03) /* acct cls cd not found in xautbl*/
            OPAREC.OPAERR = "Y"; /* set error to true*/
            converseLib.validationFailed(574); /* acct cls cd not found in xautbl*/
          else
            if (OPOREC.OPO-RETURN-CD == 04)
                                   /* company id not found in vcmpny*/
              OPAREC.OPAERR = "Y"; /* set error to true*/
              converseLib.validationFailed(767); /* acct cls cd not found in xautbl*/
            else
              XSPF4(); /* xfer to menu abend in io mod*/
                                   /* application op0o*/
              exit program; /* xfer to main menu failure*/
            end
          end
        end
      end
    end
  end

      /* if errors found then converse the map*/
      /* if pf12 then assume edit only (converse the map)*/

  if (OPAREC.OPAERR == "Y" /* errors found ?*/
   || converseVar.eventKey is pf12) /* edit only*/
    exit stack;
  end

    /* check for warning message*/

  OP0CM001.OP0CMLN6 = " ";
  if (OP0CW01.OP0CWARN == 0) /* po# hold warning displayed*/
      /* next sentence*/
  else
    OP0CSAW();
                                   /* set up warning message if applicable.*/
    if (OP0CW01.OP0CWARN != 0)
      OPAREC.OPAERR = "Y"; /* to prevent update of op1rec*/
      OP0CM001.OP0CMLN6 = OP0CT01.OP0CTMSG[OP0CWARN];
      OP0CW01.OP0CWARN = 0; /* and set warn off*/
    else
    end
  end

  if (OP0CW02.OP0CWSIF == "Y") /* special instruction flag*/
     /* next sentence*/
  else
    OP0CS40(); /* select special instructions*/
    if (OP0CW02.OP0CWSIF == "Y") /* special instruction flag*/
      converseLib.validationFailed(321); /* check sales restrictions*/
      OPAREC.OPAERR = "Y"; /* to converse*/
    end
  end

   /* *************************************************************/
end // end OP0C060

// control program flow
Function OP0C090()



      /* *********************************************************/
      /* * this process controls the program flow at the end    **/
      /* * of the customer id portion of the program            **/
      /* *********************************************************/



       /* save order header record*/

  OPWREC.OP1GROUP = OP1REC.OP1GROUP; /* save ord hdr rec*/
  COMMAREA.CA-USER-WORKAREA-4K = OPWREC.OPWSGRP; /* save o/e commarea*/


       /* if review mode*/
         /* branch to accept order program*/
       /* else*/
         /* branch to address portion of program (flow)*/

  if (OPWREC.OPWREVM > 0) /* check for review*/
    COMMAREA.CA-USER-WORKAREA-4K = OPWREC.OPWSGRP;
                                                     /* save user comm area*/
    COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
    COMMAREA.CACURRAP = "OP0J";
    transfer to program "OP0J" passing COMMAREA; /* transfer to accept order program*/
  end



   /* *************************************************************/
end // end OP0C090

// control address flow
Function OP0C100()



     /* **********************************************************/
     /* * this process inits program work area, map area,       **/
     /* * and determines program flow for address processing    **/
     /* **********************************************************/



      /* init areas*/

  TA1REC.TA1MAP = "OP0CM002"; /* current map name*/
  OP0CM002.OPMDT = VGVar.currentShortGregorianDate; /* set date*/


      /* get order header for review process*/

  OP1REC.OP1GROUP = OPWREC.OP1GROUP; /* get op1rec*/


      /* format cust line/name*/

  OPAREC.OPACUCO = OP1REC.KUCCOID; /* format cust co*/
  OPAREC.OPASEP1 = ".";
  OPAREC.OPACUSR = OP1REC.KUMSTRID; /* format cust store*/
  OPAREC.OPASEP2 = ".";
  OPAREC.OPACUDP = OP1REC.XNXCD; /* format cust dept*/
  OP0CM002.OPACUNO = OPAREC.OPACUNO; /* move formatted cust nbr*/
  OP0CM002.KUMSTRNM = OPWREC.KUMSTRNM; /* move cust name*/


      /* format base order type abrv*/

  if (OP1REC.XOBCD in XOBTBL.XOBCD) /* valid code?*/
    OP0CM002.XOBABRV = XOBTBL.XOBABRV[sysVar.arrayIndex];
  else
    OP0CM002.XOBABRV = " ";
  end


      /* format sales program id*/

  if (OP1REC.SP1ID > " ") /* sales pgm id exist?*/
    OP0CM002.SP1ID = OP1REC.SP1ID;
    set OP0CM002.OP0CMSPL skip; /* set literal visible*/
  else
    set OP0CM002.OP0CMSPL skip, invisible; /* set literal invisible*/
  end


  OP0CM002.TF1ABRV = " "; /* cleared if pf19 refresh pressed*/
  OP0CW01.TF1ABRV = " ";

   /* *************************************************************/
end // end OP0C100

// get addrs for review
Function OP0C110()



     /* **********************************************************/
     /* * this controls the retrieval of an order for review    **/
     /* * of customer address screen.                           **/
     /* **********************************************************/



      /* init areas*/

  TA1REC.TA1LOCAT[1] = "OP0C110 "; /* process name*/
  OP0CM002.OPMPRC = "OP0C110 "; /* process name*/
  set OP0CM002.OP0CMPF3 skip, invisible; /* pf3 key not valid in review*/
  set OP0CM002.OP0CMPA2 skip, invisible; /* pa2 key not valid in review*/

  if (COMMAREA.CACLVL[2] == "Y") /* if authorized to see/use*/
    set OP0CM002.OP0CMCAR initialAttributes; /* carrier field label*/
    OP0CM002.TF1CARCD = OP1REC.TF1CARCD;
    set OP0CM002.TF1CARCD normal; /* carrier code*/
    set OP0CM002.TF1ABRV initialAttributes; /* carrier abrv*/
    OP0CS77(); /* get carrier abrv*/
  else
    set OP0CM002.OP0CMCAR skip, invisible;
    set OP0CM002.TF1CARCD skip, invisible;
    set OP0CM002.TF1ABRV skip, invisible;
  end

      /* get name and addresses*/

  OP0CS60(); /* get and format store info*/
  OP0CS63(); /* get and format ship to info*/
  OP0CS65(); /* get and format bill to info*/


   /* *************************************************************/
end // end OP0C110

// converse map and edit addrs
Function OP0C120()



      /* *********************************************************/
      /* * this process converses the map, handles aid key      **/
      /* * requests, edits entered fields for cust id review.   **/
      /* *********************************************************/
      /* * Modified to hanle the country code for Sapin project **/
      /* * sbhara 03/14/00                                      **/
      /* *********************************************************/


      /* init areas*/

  TA1REC.TA1LOCAT[1] = "OP0C120 "; /* process name*/
  OP0CM002.OPMPRC = "OP0C120 "; /* process name*/


      /* force segmented converse execution mode*/

  converseVar.segmentedMode = 1; /* force segmented execution mode*/

  if (OPAREC.OPAERR == "N")
    if (OP1REC.XDVCD == "03")
      set OP0CM002.OP0CMSNM cursor;
    else
      set OP0CM002.OPACUNO cursor;
    end
  else
    if (OPAREC.OPAERR == "X")
      set OP0CM002.TF1CARCD cursor;
    end
  end

  set OP0CM002.OP0CMP19 skip, invisible;

   /* CANADA 06/95*/
   /* The next three lines is commented out to open up country code*/
   /* sbhara 03/14/00 spain trademark project BEGIN*/
   /* IF KUCREC.XCTCD = 'CANA';        /* CANA if Canada protect ship to*/
   /* SET OP0CM002.OP0CMSCN AUTOSKIP,DARK;/* CANA and bill to*/
   /* SET OP0CM002.OP0CMBCN AUTOSKIP,DARK;/* CANA country code*/
   /* END;                          /* CANA*/
   /* sbhara 03/14/00 spain trademark project END*/
   /* *************************************************************/
  converse OP0CM002 ;
   /* *************************************************************/



      /* clear (reset fields)*/

  OPAREC.OPAERR = "N"; /* clear error flag*/
  OP0CW01.OP0CWOBF = "N"; /* clear error flag*/
  OP0CW01.OP0CWOSF = "N"; /* clear error flag*/
  OP0CS59(); /* if modified set fields modified*/


      /* check and process valid aid key requests*/

      /* enter - continue processing*/
        /* PF12- CONTINUE PROCESSING (NEXT SCREEN IF NO ERRORS)*/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
     /* ** next sentence ** continue processing ***/
  else
    converseLib.validationFailed(008); /* invalid key pressed message*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    exit stack;
  end


      /* perform field edits*/

  OP0CS70(); /* perform field edits*/
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* release data base resources*/


      /* if errors found then converse the map*/
      /* if pf12 then assume edit only (converse the map)*/

  if (OPAREC.OPAERR == "Y" /* errors found ?*/
   || converseVar.eventKey is pf12) /* edit only?*/
    exit stack;
  end


      /* add address records if necessary*/

  if (OP0CW01.OP0CWUSF > " " /* update one time ship to?*/
   || OP0CW01.OP0CWUBF > " ") /* update one time bill to?*/
    OP0CS85(); /* update address records*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* release data base resources*/
  end



   /* *************************************************************/

   /* *************************************************************/
end // end OP0C120

// init addrs for new order
Function OP0C150()



     /* **********************************************************/
     /* * this controls the initialization process for entering **/
     /* * a new order.                                          **/
     /* **********************************************************/


      /* init error diag areas*/

  TA1REC.TA1LOCAT[1] = "OP0C150 "; /* process name*/


      /* get default name and addresses*/

  OP0CS60(); /* get and format store info*/
  OP0CS62(); /* get and format ship to info*/
  OP0CS64(); /* get and format bill to info*/

  set OP0CM002.OP0CMP19 invisible;

  if (COMMAREA.CACLVL[2] == "Y")
    set OP0CM002.OP0CMCAR skip;
    OP0CM002.TF1CARCD = OP1REC.TF1CARCD;
    set OP0CM002.TF1CARCD normal;
    OP0CM002.TF1ABRV = OP0CW01.TF1ABRV;
    set OP0CM002.TF1ABRV skip;
  else
    set OP0CM002.OP0CMCAR skip, invisible;
    set OP0CM002.TF1CARCD skip, invisible;
    set OP0CM002.TF1ABRV skip, invisible;
  end

   /* *************************************************************/
end // end OP0C150

// converse map and edit addrs
Function OP0C160()



      /* *********************************************************/
      /* * this process converses the map, handles aid key      **/
      /* * requests, edits entered fields.                      **/
      /* *********************************************************/
      /* Modified for country code handling SPAIN TRADE MARK    **/
      /* SBHARA  03/14/00                                       **/
      /* *********************************************************/
      /* *********************************************************/



      /* init areas*/

  TA1REC.TA1LOCAT[1] = "OP0C160 "; /* process name*/
  OP0CM002.OPMPRC = "OP0C160 "; /* process name*/


      /* force segmented converse execution mode*/

  converseVar.segmentedMode = 1; /* force segmented execution mode*/


  if (OPAREC.OPAERR == "N")
    if (OP1REC.XDVCD == "03")
      set OP0CM002.OP0CMSNM cursor;
    else
      set OP0CM002.OPACUNO cursor;
    end
  else
    if (OPAREC.OPAERR == "X")
      set OP0CM002.TF1CARCD cursor;
    end
  end

  set OP0CM002.OP0CMP19 initialAttributes;

   /* CANA 06/95*/

   /* The next three lines of code is been commented for Spain trademark*/
   /* SBHARA 03/14/00*/
   /* IF KUCREC.XCTCD = 'CANA';        /* CANA if Canada protect ship to*/
   /* SET OP0CM002.OP0CMSCN DARK,AUTOSKIP;/* CANA and bill to*/
   /* SET OP0CM002.OP0CMBCN DARK,AUTOSKIP;/* CANAcountry code*/
   /* END;                             /* CANA*/

   /* *************************************************************/
  converse OP0CM002 ;
   /* *************************************************************/



      /* clear (reset fields)*/

  OPAREC.OPAERR = "N"; /* clear error flag*/
  OP0CW01.OP0CWOBF = "N"; /* clear error flag*/
  OP0CW01.OP0CWOSF = "N"; /* clear error flag*/
  if (converseVar.eventKey is pf19) /* refresh screen*/
    exit stack;
  else
    OP0CS59(); /* if modified set fields modified*/
  end


      /* check and process valid aid key requests*/

      /* enter - continue processing*/
        /* pf3 - op0a - new customer*/
        /* pf12- continue processing (next screen if no errors)*/
        /* pa2 - reject order*/
        /* pf19- (handled above)*/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
     /* ** next sentence ** continue processing ***/
  else
    if (converseVar.eventKey is pf3) /* check for reject order*/
      COMMAREA.CA-USER-WORKAREA-4K = OPWREC.OPWSGRP;
                                   /* save user comm area*/
      COMMAREA.CAFROMAP = "OP0B";
      COMMAREA.CACURRAP = "OP0C";
      transfer to program "OP0C" passing COMMAREA; /* transfer to cust id*/
    else
      if (converseVar.eventKey is pa2) /* check for reject order*/
        COMMAREA.CA-USER-WORKAREA-4K = OPWREC.OPWSGRP;
                                   /* save user comm area*/
        transfer to program "OP0B" passing COMMAREA; /* transfer to o/e menu*/
      else
        converseLib.validationFailed(008); /* invalid key pressed message*/
        OPAREC.OPAERR = "Y"; /* set error flag*/
        exit stack;
      end
    end
  end


      /* perform field edits*/

  OP0CS70(); /* perform field edits*/
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* release data base resources*/


      /* if errors found then converse the map*/
      /* if pf12 then assume edit only (converse the map)*/

  if (OPAREC.OPAERR == "Y" /* errors found ?*/
   || converseVar.eventKey is pf12) /* edit only?*/
    exit stack;
  end

  OP0CS78(); /* get handling defaults from kufrec*/

   /* 08/16/91 JLoyer Log #675: Don't allow customer specified prepack-*/
   /* codes on on-line allocation order-types.*/

  if (OP1REC.XPACD > " ") /* if customer has a default pack-code*/
                                   /* (xpacd)*/
    OP0CS79(); /* check xottbl and xpatbl.*/
  end

   /* 09/16/91 jhecke Log #690: Default handling code to "ALL" for orders*/
   /* with sales office=12,gpc=03,*/
   /* and order type=d1, or d2*/

  if (OP1REC.XSOCD == "12") /* ;  sales office 12?*/
    if (OP1REC.XGPCD == "03") /* ;  gpc 3?*/
      if (OP1REC.XOBCD == "D1" /* ;  order type d1?*/
       || OP1REC.XOBCD == "D2") /* ;  order type d2?*/
        OP0CS82();
      end
    end
  end
  /*  */
  /* 10/04/91 Jan Johnson, Log # 692  Default handling code to 'EXP'*/
  /* (Export) for orders with*/
  /* Division = 02 (international)*/
  /* GPC = 03 (apparel)*/
  /*  */
  if (OP1REC.XDVCD == "02"
   && OP1REC.XGPCD == "03")
    OP0CS83();
  end
      /* assign next order number and add op1rec*/

  OP0CS80(); /* get order number and write hdr*/
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* release data base resources*/


      /* add address records if necessary*/

  if (OP0CW01.OP0CWUSF > " " /* update one time ship to?*/
   || OP0CW01.OP0CWUBF > " ") /* update one time bill to?*/
    OP0CS85(); /* update address records*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* release data base resources*/
  end


  if (OP1REC.OP11TMSF == "Y" /* ship to addr changed?*/
   || OP1REC.OP1SGPAO == "Y")
    OP0CSAU();
  end

   /* *************************************************************/
end // end OP0C160

// control program flow
Function OP0C190()



      /* *********************************************************/
      /* * this process controls the program flow at the end    **/
      /* * of the customer id portion of the program            **/
      /* *********************************************************/



      /* save op1rec and commarea changes*/

  OPWREC.OP1GROUP = OP1REC.OP1GROUP; /* save op1rec*/
  COMMAREA.CA-USER-WORKAREA-4K = OPWREC.OPWSGRP;
                                                     /* save user comm area*/


       /* if review mode*/
         /* branch to accept order program*/
       /* else*/
         /* if form flow*/
           /* branch to customer header*/
         /* else*/
           /* branch to product header*/

  if (OPWREC.OPWREVM > 0) /* check for review*/
    COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
    COMMAREA.CACURRAP = "OP0J";
    transfer to program "OP0J" passing COMMAREA; /* transfer to accept order program*/
  end


      /* not review*/

      /* check for form flow*/

  if (OPWREC.OPWSFLOW == "1") /* check for form flow*/
    COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
    COMMAREA.CACURRAP = "OP0E";
    transfer to program "OP0E" passing COMMAREA; /* transfer to cust header program*/
  end


      /* else, phone flow*/

  COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
  COMMAREA.CACURRAP = "OP0H";
  transfer to program "OP0H" passing COMMAREA; /* transfer to prod header program*/



   /* *************************************************************/
end // end OP0C190

// edit for trnsmted airborne ord
Function OP0CS-AIRBORNE()
    /* this edit is to determine if an airborne order is being added,*/
     /* and whether or not the airborne transmission for the need date*/
     /* has already been done.*/

     /* first we have to get the last airborne transmission date*/

  if (OP0CW01.OP0CW-VOPPGM-READ != "Y")
    VOPPGM01.XXX-PGM-NBR = "OP1920";
    call "IO6600" ("S ", SQLCA, VOPPGM01) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
      OP0CW01.OP0CW-VOPPGM-READ = "Y";
    else
      TA1REC.TA1DBASE = "DORDER";
      TA1REC.TA1TBLVU = "VOPPGM01";
      TA1REC.TA1LOC = "OP0CS-AIRBORNE";
      TA1REC.TA1LOCAT[4] = "IO6600";
      TA1REC.TA1TBLKE = "OP1920";
      XSOPS02();
    end
  end

   /* now perform the airbore checking stmtgrp.  if need date is on or*/
    /* before the last transmission date, then we have to put out an error*/
    /* to force a need date change.  Note that the direct ship code at*/
      /* this point is defaulted to spaces.  Later on in OP0C it will be*/
      /* changed to '1' for international orders with order class of*/
                                  /* 'IN', but as these are never airborne*/
                                   /* orders, there is no conflict*/
      /* here.*/

  XS0MW01.XS0MWDIV = OP1REC.XDVCD;
  XS0MW01.XS0MWORT = OP1REC.XOTCD;
  XS0MW01.XS0MWDIR = " ";
  XS0MW01.XS0MWCUS = OP1REC.KUCCOID;
  XS0MW01.XS0MWGPC = OP1REC.XGPCD;
  XS0MW01.XS0MWNDT = OP1REC.OP1CUNDT;

  XS0MS-CHK-AIRBORNE();

  if (XS0MW01.XS0MWABF == "Y") /* changes make a transmitted*/
    OPAREC.OPAERR = "Y"; /* airborne order*/
    XS0MW01.XS0MWABF = "N"; /* reset airborne flag*/
    converseLib.validationFailed(792); /* updates not allowed*/
    set OP0CM001.OP0CMNDT cursor, modified, bold;
  end
end // end OP0CS-AIRBORNE

// call ku1540 for alloc seq
Function OP0CS-CALL-KU1540()
  set VCULVLPD empty;
  VCULVLPD.KUCCOID = OP0CM001.OP0CMCO;
  VCULVLPD.KUMSTRID = OP0CM001.OP0CMST;
  VCULVLPD.XNXCD = OP0CM001.OP0CMDPT;
  VCULVLPD.XGPCD = OP1REC.XGPCD;

  call "KU1540" (VCULVLPD) {isNoRefresh = yes, isExternal = yes};

  if (VCULVLPD.XXX-SQLCODE == 0
   || VCULVLPD.XXX-SQLCODE == 100)
    if (VCULVLPD.OP1ALSEQ == -1 /* no allocation sequence returned*/
     || VCULVLPD.XACCD == "**") /* no assignment control returned*/
      converseLib.validationFailed(779); /* customer must be fixed before adding*/
                                   /* orders*/
      set OP0CM001.OP0CMCO cursor, modified, bold;
      set OP0CM001.OP0CMST modified, bold;
      set OP0CM001.OP0CMDPT modified, bold;
      OPAREC.OPAERR = "Y";
      OP0CW01.OP0CWCUF = "Y";
      return;
    end
  else
    TA1REC.TA1TYPE = "APPL"; /* abend type*/
    TA1REC.TA1FUNC = "RETN"; /* abend func*/
    TA1REC.TA1PGMAP = "OP0C";
    TA1REC.TA1MAP = "OP0CM001";
    TA1REC.TA1DBASE = "DCUST   ";
    TA1REC.TA1TBLVU = "VCUGRP01";
    TA1REC.TA1LOC = "OP0CS-CALL-KU1540";
    OP0CW01.OP0CW-ERR-LIT1 = "SQL ERROR - CODE ";
    OP0CW01.OP0CW-ERR-LIT2 = " TYPE ";
    OP0CW01.OP0CW-ERR-LIT3 = " TABLE ";
    OP0CW01.OP0CW-ERR-CODE = VCULVLPD.XXX-SQLCODE * -1;
    OP0CW01.OP0CW-ERR-SIGN = "-";
    OP0CW01.OP0CW-ERR-TYPE = VCULVLPD.XXX-SQLTYPE;
    OP0CW01.OP0CW-ERR-NAME = VCULVLPD.XXX-SQLNAME;
    OP0CW01.OP0CW-ERR-VIEW = VCULVLPD.XXX-SQLVIEW;
    OP0CW01.OP0CW-ERR-LIT4 = "KEY IS ";
    OP0CW01.OP0CW-ERR-CUST = OP0CM001.OP0CMCO;
    OP0CW01.OP0CW-ERR-STOR = OP0CM001.OP0CMST;
    OP0CW01.OP0CW-ERR-DEPT = OP0CM001.OP0CMDPT;
    OP0CW01.OP0CW-ERR-GPC = OP1REC.XGPCD;
    TAEREC.TAEDESC1 = OP0CW01.OP0CW-CUSTERR1;
    TAEREC.TAEDESC2 = OP0CW01.OP0CW-CUSTERR2;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* synpoint rollback*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* abend module*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    XSPF4(); /* master menu*/
    exit program; /* master menu failure*/
  end
end // end OP0CS-CALL-KU1540

Function OP0CS-CHECK-CREDIT()

     /* *** check credit status code ****/

  OP0CW-XCC-STAT-FOUND = "N"; /* Init valid customer*/

  OP0CW-XCCIDX = 1; /* Reset Subscript 1*/

  while (XCCTBL.XCCCD[OP0CW-XCCIDX] != "99" /* until end of XCCTBL*/
   && OP0CW-XCC-STAT-FOUND != "Y") /* or row found*/

    if (XCCTBL.XCCCD[OP0CW-XCCIDX] == KUCREC.XCCCD /* xcc code found*/
     && XCCTBL.XXXSTAT[OP0CW-XCCIDX] == "A"        /* code is active*/
     && XCCTBL.XCCENTFL[OP0CW-XCCIDX] == "Y")      /* flag is yes*/
      OP0CW-XCC-STAT-FOUND = "Y"; /* set found to 'y'*/
    end

    OP0CW-XCCIDX = OP0CW-XCCIDX + 1; /* Increment subscript 1*/
  end

end // end OP0CS-CHECK-CREDIT

// check if a divert order
Function OP0CS-CHK-DIVERT()
   /* ***********************************************************************/

   /* YOU ARE HERE IF USER ENTERED A NEED DATE PRIOR TO CURRENT DATE*/

   /* ***********************************************************************/

  if (CACLVL[5] == "Y"     /* has divert order authority*/
   && OP1REC.XDVCD == "02" /* international order*/
   && OP0CM001.XOBCD == "F1") /* base ot futures*/
    OP0CW01.OP0CW-DIVERT-ORDER-FL = "Y"; /* order is a divert*/
  else
    OP0CW01.OP0CW-DIVERT-ORDER-FL = "N"; /* not a divert order*/
  end

end // end OP0CS-CHK-DIVERT

// get sls reg for nil airborne
Function OP0CS-GET-SLS-REG()

      /* this routine reads the dnilo.vdstrb01 to obtain the*/
      /* sales region code, which must be one of the following if the*/
      /* CSR is trying to enter an international airborne order:*/
      /* 'AO' = Asia-NIKE owned*/
      /* 'AP' = Asia Pacific Independent*/
      /* 'EX' = Japan - Korea*/

  set SQLCA empty;
  set VDSTRB01 empty;
  VDSTRB01.KUCCOID = OP1REC.KUCCOID;

  call "IO4600" ("S ", SQLCA, VDSTRB01) {isNoRefresh = yes, isExternal = yes}; /* declare & open cursor*/

  if (SQLCA.VAGen_SQLCODE == 0) /* all ok*/
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "OP0CS-GET-SLS-REG";
    TA1REC.TA1LOCAT[3] = "IO4600  ";
    TA1REC.TA1DBASE = "DNILO   ";
    TA1REC.TA1TBLVU = "VDSTRB01";
    OP0CW01.OP0CWCUC = OP1REC.KUCCOID;
    TA1REC.TA1TBLKE = OP0CW01.OP0CWCUC;
    XSOPS02(); /* abend*/
  end
end // end OP0CS-GET-SLS-REG

// set ws recs empty
Function OP0CS01()



      /* *********************************************************/
      /* * this statement group sets the working storage records**/
      /* * empty during initialization                          **/
      /* *********************************************************/



      /* set ws recs empty*/

  set OPWREC empty;
  set OPWREC01 empty;
  set OPAREC empty;
  set OP0CW01 empty;
  set SQLCA empty;
  set TA1REC empty;
  set TA2REC empty;
  set OP1REC empty;
  set OP5REC empty;
  set OP7REC empty;
  set KUCREC empty;
  set KUFREC empty;
  set KULREC empty;
  set KUMREC empty;
  set KUNREC empty;
  set KUPREC empty;
  set KUYREC empty;
  set SP1REC empty;
  set SP2REC empty;
  set SP4REC empty;
  set VCUXOP01 empty;

  /* Canada Divestiture * begin * rharat 08/08/2000 ***********/
  OP0CW01.OP0CW-FORCE-XOC-4NIL = "Y"; /* init lead days edit flag*/
  /* Canada Divestiture *  end  * rharat 08/08/2000 ***********/

  OP0CW01.OP0CWLDF = "N"; /* init lead days edit flag*/
  OP0CW01.OP0CWOBR = OP5REC.OP5GROUP; /* init rec save area*/
  OP0CW01.OP0CWOSR = OP5REC.OP5GROUP; /* init rec save area*/

  OPWREC.OP0GFLAG = "N"; /* Have we gone into op0g? No*/


   /* *************************************************************/
end // end OP0CS01

// init op1rec
Function OP0CS02()


  OP1REC.OP1TBREP = OP0CW01.OP0CWTBR;
  if (OP0CW01.OP0CWTBR > 0)
    OP0CS29(); /* get previous taken by rep*/
  else
    OP0CSZ2(); /* if no previous taken by rep, default entered by from*/
  end /* op0a*/


      /* *********************************************************/
      /* * this statement group sets the order header op1rec to **/
      /* * empty and initializes individual fields.             **/
      /* *********************************************************/



      /* set ws recs empty*/

  set OP1REC empty; /* clear op1rec*/
  OP1REC.XOSCD = "IP"; /* order status*/
  OP1REC.XDVCD = COMMAREA.XDVCD; /* division code*/

  OP0CSBC(); /* Get the brand for logon.*/

  OP1REC.XSOCD = COMMAREA.XSOCD; /* sales officd code*/
  OP1REC.OP1ENREP = OPWREC.OPWENTID; /* entered by rep id*/
  OP1REC.OP1ODSKF = OPWREC.OPWORDSK; /* order desk flag*/
  OP1REC.OP1CSADT = OPAREC.OPACDT; /* credit status date*/
  OP1REC.OP1OSADT = OPAREC.OPACDT; /* order status date*/
  OP1REC.OP1ENTDT = OPAREC.OPACDT; /* order enter date*/
  OP1REC.OP1OWHMF = "N"; /* one warehouse model flag*/
  OP1REC.OP1TDOF = "N"; /* trade disc override flag*/
  OP1REC.OP1PTOF = "N"; /* payment terms override flag*/
  OP1REC.OP1AAOF = "N"; /* ad allow override flag*/
  OP1REC.OP1COPOF = "N"; /* co-op pct override flag*/
  OP1REC.OP1DFAOF = "N"; /* defective allow override flag*/
   /* MOVE 'N' TO OP1REC.OP1NBOF      ; net bill ovr flg- deleted*/
  OP1REC.OP1SGPAO = "N"; /* ship group addr overried*/
  OP1REC.OP1OALSQ = 9999; /* order alloc seq*/
  OP1REC.OP1RSVF = "N"; /* reserve invent indicator*/
  OP1REC.KUNNOSFL = "Y"; /* subs allowed*/
  OP1REC.OP1ASHDF = "Y"; /* allow shade flag*/
  OP1REC.OP1ACNLF = "Y"; /* allow cancel flag 'y'*/
  OP1REC.OP1SMSCF = " "; /* small ship charge flag*/
  OP1REC.OP1SPLBF = "N"; /* special label flag*/
  OP1REC.OP1SPINF = "N"; /* special instr flag*/
  OP1REC.OP1SPHDF = "N"; /* special handl flag*/
  OP1REC.OP1OMCMF = "N"; /* order maint chg comments flag*/
  OP1REC.OP11TMSF = "N"; /* one time ship flag*/
  OP1REC.OP11TMBF = "N"; /* one time bill flag*/
   /* MOVE 'N' TO OP1REC.KUANBIND     ; net bill ind- deleted*/
  OP1REC.OP1BOFL = " "; /* back order flag*/
  OP1REC.OP1BLKID = OPWREC.OP1BLKID; /* bulk order id*/
  OP1REC.XBDCD = OPWREC.XBDCD; /* bulk/draw order code*/


       /* init credit fields*/

  OP1REC.XCHCD[1] = "00";
  OP1REC.XCHCD[2] = "00";
  OP1REC.XCHCD[3] = "00";
  OP1REC.XCSCD = "00";
  OP1REC.OP1CSADT = 0;
  OP1REC.OP1CSATM = 0;
  OP1REC.OP1PCSDT = 0;
  OP1REC.OP1PCSTM = 0;
  OP1REC.OP1CKAMT = 0;
  OP1REC.OP1DCHLD = 0;
  OP1REC.OP1CRLMP = " ";
  OP1REC.OP1CRLMR = " ";

       /* init new fields -- added for phase ii*/

  OP1REC.OP1PCSCD = "00"; /* previous credit status code*/
  OP1REC.OP1CCKOQ = 0; /* credit check order qty*/
  OP1REC.OP1SSHPO = " "; /* small ship override*/
  OP1REC.OP1ECADT = 0; /* extended aut cancel date*/
  OP1REC.OP1ECANM = " "; /* extended aut cancel name*/
  OP1REC.OP1IVADT = 0; /* invoice asof date*/
  OP1REC.OP1PCNDT = 0; /* previous cancel date*/
  OP1REC.XMDCD = OPWREC.OPWSFLOW; /* order method code*/
  OP1REC.OP1ALCQF = "N"; /* allocated qty flag*/
  OP1REC.OP1RSVQF = "N"; /* reserved qty flag*/
  OP1REC.OP1SHPQF = "N"; /* shipped qty flag*/
  OP1REC.OP1ORADT = 0; /* override auth date*/
  OP1REC.TF1CARCD = " "; /* carrier code*/


  OP1REC.OP1EXPDF = "N"; /* 9/10/87 t.fox picking prjct*/


  if (OP1REC.XOCCD in XOCTBL.XOCCD) /* if order class is valid*/
    OP1REC.XPPCD = XOCTBL.XPPCD[sysVar.arrayIndex]; /* pick priority*/
    OP1REC.XPKCD = XOCTBL.XPKCD[sysVar.arrayIndex]; /* pick code*/
  end



  if (OP1REC.XOTCD in XOTTBL.XOTCD) /* if the order type is valid*/
    if (XOTTBL.XOTATONF[sysVar.arrayIndex] == "Y") /* if it's an at-once order*/
      OPAREC.OPASUB = 1; /* set the customer need date*/
      while (OPAREC.OPASUB <= 10) /* to today*/
        OPWREC.OP1CUNDT[OPASUB] = OPAREC.OPACDT;
        OPAREC.OPASUB = OPAREC.OPASUB + 1;
      end
    end
  end

   /* inititalize owner group code*/

  OPWREC.XOWCD = "00";

   /* inititalize number of allocated products*/

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex < 11)
    OPWREC.OPWNMALP[sysVar.arrayIndex] = 0; /* clear nbr of allocated products*/
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end

   /* inititalize divert order flag*/

  OP0CW01.OP0CW-DIVERT-ORDER-FL = "N";



   /* ************************************************************/
end // end OP0CS02

// edit/save comp number
Function OP0CS03()
   /* This statement group controls the edits for the comp*/
   /* number field (also known as internal customer number).*/
   /* The field is saved to OP1REC if it passes all the edits.*/



   /* Comp number is required for NIL sample orders*/

  if (OP0CM001.OP1CMPNB == 0 
   && COMMAREA.XDVCD == "02" /* International division.*/
   && OP0CM001.XOBCD == "S1") /* Sample order type.*/
    converseLib.validationFailed(541); /* Order requires comp number.*/
    OPAREC.OPAERR = "Y"; /* Set error flag.*/
    set OP0CM001.OP1CMPNB cursor, modified, bold;
    return; /* Get out of comp edits.*/
  end


   /* Get and edit the company record for the comp number.*/
   /* These edits are ignored if there is no comp number.*/

  if (OP0CM001.OP1CMPNB != 0)

     /* Save the company record of the customer for other*/
     /* edits.*/
    OP0CW01.KUCGRP = KUCREC.KUCGRP;


     /* Get the company record for the comp number.*/
    OP0CSC1();

    if (SQLCA.VAGen_SQLCODE == 0)

       /* Edit the retreived company record.*/
      OP0CSC2();

       /* Return if errors were found.*/

      if (OPAREC.OPAERR == "Y")
        KUCREC.KUCGRP = OP0CW01.KUCGRP; /* Restore company record.*/
        return;
      end

    else
       /* The company record was not found.*/

      converseLib.validationFailed(542); /* Comp number is not found.*/
      OPAREC.OPAERR = "Y"; /* Set error flag*/
      set OP0CM001.OP1CMPNB cursor, modified, bold;
      KUCREC.KUCGRP = OP0CW01.KUCGRP; /* Restore company record.*/
      return; /* Get out of comp edits.*/
    end

    KUCREC.KUCGRP = OP0CW01.KUCGRP; /* Restore the company record.*/
  end



   /* For NIL orders, verify that a comp number can be used*/
   /* for the GPC of the order.  This edit is ignored if the*/
   /* comp number is blank.*/

  if (OP0CM001.OP1CMPNB != 0
   && OP1REC.XDVCD == "02")

     /* Save the customer record of the customer for other*/
     /* edits.*/
    OP0CW01.KUNGRP = KUNREC.KUNGRP;

    OP0CS3A(); /* Get the customer record for comp #.*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Customer record was found.*/

       /* The customer record for the comp must be active.*/

      if (KUNREC.XXXSTAT != "A")
        converseLib.validationFailed(553); /* GPC invalid for comp #.*/
        OPAREC.OPAERR = "Y"; /* Set error flag.*/
        set OP0CM001.OP1CMPNB cursor, modified, bold;
        KUNREC.KUNGRP = OP0CW01.KUNGRP; /* Restore customer record.*/
        return; /* Get out of comp edits.*/
      end

    else /* Customer record not found.*/
      converseLib.validationFailed(553); /* GPC invalid for comp #.*/
      OPAREC.OPAERR = "Y"; /* Set error flag*/
      set OP0CM001.OP1CMPNB cursor, modified, bold;
      KUNREC.KUNGRP = OP0CW01.KUNGRP; /* Restore customer record.*/
      return; /* Get out of comp edits.*/
    end

    KUNREC.KUNGRP = OP0CW01.KUNGRP; /* Restore customer record.*/
  end



   /* All of the edits have been passed.  Save the comp # in*/
   /* OP1REC and mark the field so edits will be bypassed.*/

  OP1REC.OP1CMPNB = OP0CM001.OP1CMPNB;
  set OP0CM001.OP1CMPNB normal;
end // end OP0CS03

// format ordhdr for review
Function OP0CS05()


      /* format the order header fields in the map*/

  OP0CM001.OP0CMCO = OP1REC.KUCCOID; /* customer company*/
  OP0CM001.OP0CMST = OP1REC.KUMSTRID; /* customer store*/
  OP0CM001.OP0CMDPT = OP1REC.XNXCD; /* customer store dept*/
  OP0CM001.OP1CMPNB = OP1REC.OP1CMPNB; /* comp number*/

  if (OP1REC.OP1ORDBY > " ") /* ordered by exists*/
    OP0CM001.OP1ORDBY = OP1REC.OP1ORDBY; /* ordered by*/
  end

  OP0CS29(); /* get svrep name and user id*/

  OP0CM001.XOBCD = OP1REC.XOBCD; /* base order type code*/
  if (OP1REC.XOBCD in XOBTBL.XOBCD) /* base order type*/
    OP0CM001.XOBDESC = XOBTBL.XOBDESC[sysVar.arrayIndex];
  else
    OP0CM001.XOBDESC = " "; /* order type desc*/
  end

  OP0CM001.XGPCD = OP1REC.XGPCD; /* gpc code*/
  if (OP1REC.XGPCD in XGPTBL.XGPCD) /* gpc code*/
    OP0CM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
  else
    OP0CM001.XGPABRV = " "; /* gpc abrv*/
  end

  OP0CM001.XOCCD = OP1REC.XOCCD; /* order class code*/
  if (OP1REC.XOCCD in XOCTBL.XOCCD /* order class*/
   && XOCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active*/
    OP0CM001.XOCABRV = XOCTBL.XOCABRV[sysVar.arrayIndex]; /* order class abrv*/
  else
    OP0CM001.XOCABRV = " "; /* order class abrv*/
    set OP0CM001.XOCCD modified;
  end

  OPAREC.OPAWDT = OP1REC.OP1CUNDT; /* need date*/
  OPAREC.OPAFYY = OPAREC.OPAWYY;
  OPAREC.OPAFMM = OPAREC.OPAWMM;
  OPAREC.OPAFDD = OPAREC.OPAWDD;
  OP0CM001.OP0CMNDT = OPAREC.OPAFDT;
  if (OP1REC.XBDCD == "R") /* rebook bulk*/
    set OP0CM001.OP0CMNDT protect;
  end


  OPAREC.OPAWDT = OP1REC.OP1ORCDT; /* date recieved*/
  OPAREC.OPAFYY = OPAREC.OPAWYY;
  OPAREC.OPAFMM = OPAREC.OPAWMM;
  OPAREC.OPAFDD = OPAREC.OPAWDD;
  OP0CM001.OP0CMRDT = OPAREC.OPAFDT;

  OP0CM001.XPCCD = OPWREC01.XPCCD; /* move prod cat from commarea*/

  if (OP1REC.SP1ID > " ") /* sales program exist*/
    OP0CM001.SP1ID = OP1REC.SP1ID; /* sales program*/
    OP0CS15(); /* get sales program name*/
  end

   /* CANA 06/04*/

  OP0CM001.ZFC-CRCY-CD = OP1REC.ZFC-CRCY-CD; /* CANA currency cd*/

  if (OP1REC.XBDCD == "R") /* rebook bulk*/
    set OP0CM001.SP1ID protect;
  end



   /* *************************************************************/
end // end OP0CS05

// reinit commarea after ki0i
Function OP0CS06()



      /* *********************************************************/
      /* * this statement group re-inits the user commarea after**/
      /* * returning from ki0i.  this reinitialization is       **/
      /* * necessary since kioi only saves the first 200 bytes  **/
      /* * of commarea.causera and destroys the rest.           **/
      /* *********************************************************/

     /* **********************************************************/
     /* * note!!!!  when changing the initialization code       **/
     /* *           below, be sure to make similar changes      **/
     /* *           to process op0b001 in op0b.                 **/
     /* **********************************************************/


      /* initialize opwrec fields*/

  OPWREC.OP1GROUP = OP1REC.OP1GROUP; /* init op1rec save*/
  OPWREC.OPWMULSO = "N"; /* init multi sub-ord to no*/
  OPWREC.OPWREVM = 0; /* init review mode*/
  OPWREC.OPWPORD = 0; /* init prev order number*/
  OPWREC.OPWPNSOR = 0; /* init prev nbr sub ords*/
  OPWREC.OPWPITM = 0; /* init prev order nbr items*/
  OPWREC.XEGCD = " "; /* init shade code*/
  OPWREC.PC2INSEG = " "; /* init spec code*/
  OPWREC.XRTCD = " "; /* init sales rep assoc type*/
  OPWREC.OPWAUTFL = "N"; /* init authorization flag*/
  OPWREC.KUMSTRNM = " "; /* init store name*/
  OPWREC.OPWLSTLI = 0; /* init last line item number*/
  OPWREC.OP2LNINB = 0; /* init op-line-item-nbr*/
  OPWREC.OPWOHD = OPWREC.OPWDOHD; /* init disp misc ord hdr*/
  OPWREC.KUCSKIND = " "; /* init cust sku ind*/
  OPWREC.OP2HCHGO[1] = "N"; /* init hdl chg ovrd*/
  OPWREC.OP2HCHGO[2] = "N"; /* init hdl chg ovrd*/
  OPWREC.OP2HCHGO[3] = "N"; /* init hdl chg ovrd*/
  OPWREC.OP2HCHGO[4] = "N"; /* init hdl chg ovrd*/
  OPWREC.OP2HCHGO[5] = "N"; /* init hdl chg ovrd*/
  OPWREC.XHDCD[1] = " "; /* init hdl code*/
  OPWREC.XHDCD[2] = " "; /* init hdl code*/
  OPWREC.XHDCD[3] = " "; /* init hdl code*/
  OPWREC.XHDCD[4] = " "; /* init hdl code*/
  OPWREC.XHDCD[5] = " "; /* init hdl code*/
  OPWREC.XHDCHG[1] = 0; /* init hdl charge*/
  OPWREC.XHDCHG[2] = 0; /* init hdl charge*/
  OPWREC.XHDCHG[3] = 0; /* init hdl charge*/
  OPWREC.XHDCHG[4] = 0; /* init hdl charge*/
  OPWREC.XHDCHG[5] = 0; /* init hdl charge*/


     /* clear sub-order table*/

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex < 11)
    OPWREC.XWHCD[sysVar.arrayIndex] = " "; /* clear warehouse code*/
    OPWREC.OP1OWHMF[sysVar.arrayIndex] = "N"; /* clear 1 warehouse mod code*/
    OPWREC.OP1CUNDT[sysVar.arrayIndex] = 0; /* clear need date*/
    OPWREC.OP1OVALU[sysVar.arrayIndex] = 0; /* clear order value*/
    OPWREC.OP1OTUNT[sysVar.arrayIndex] = 0; /* clear order tot units*/
    sysVar.arrayIndex = sysVar.arrayIndex + 1; /* increment index*/
  end


     /* clear product table (note:  the opwhexno field really*/
     /* contains x'01' thru x'0A' representing the sub-order*/
     /* number in binary (hex).  we are initializing the field*/
     /* to x'F0' (char '0') to avoid problems of comparing*/
     /* the field to a character ' ' (space x'40').  this*/
     /* avoidance also gives us the capability of having*/
     /* 64 (x'40') sub orders if necessary (not expected)).*/

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex < 901)
    OPWREC.OPWSELCD[sysVar.arrayIndex] = " "; /* clear select code*/
    OPWREC.OPWHEXNO[sysVar.arrayIndex] = "0"; /* clear hex sub-ord id*/
    sysVar.arrayIndex = sysVar.arrayIndex + 1; /* increment index*/
  end


     /* clear multi product array*/

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex < 7)
    OPWREC.SY1STNBR[sysVar.arrayIndex] = " "; /* clear style nbr*/
    OPWREC.SY2CLRID[sysVar.arrayIndex] = " "; /* clear color*/
    OPWREC.XDMCD[sysVar.arrayIndex] = " "; /* clear dimension*/
    OPWREC.KUIPRDID[sysVar.arrayIndex] = " "; /* clear prod xref*/
    OPWREC.XUMCD[sysVar.arrayIndex] = " "; /* clear unit of measure code*/
    OPWREC.XPGCD[sysVar.arrayIndex] = " "; /* clear package code*/
    OPWREC.XQACD[sysVar.arrayIndex] = " "; /* clear quality code*/
    OPWREC.OPWDUPSZ[sysVar.arrayIndex] = " "; /* clear dup size flag*/
    OPWREC.XSZCD[sysVar.arrayIndex] = " ";
                                   /* clear standard size dist. code*/
    OPWREC.OP2TONOQ[sysVar.arrayIndex] = 0; /* clear tot orig qty*/
    OPWREC.OPWRQSZF[sysVar.arrayIndex] = 0; /* clear first size*/
    OPWREC.OPWRQSZL[sysVar.arrayIndex] = 0; /* clear last size*/
    OPWREC.OPWBKLIN[sysVar.arrayIndex] = 0; /* clear bulk ord line-item num*/
    sysVar.arrayIndex = sysVar.arrayIndex + 1; /* increment index*/
  end



   /* *************************************************************/
end // end OP0CS06

// set mdt's for modified fields
Function OP0CS07()


      /* set mdt's in fields for the case of invalid aid key*/
      /* this allows the user to press the correct aid key*/
      /* without having to re-enter the data.*/

  if (OP0CM001.OP0CMCO is modified) /* customer company*/
    set OP0CM001.OP0CMCO modified;
  end

  if (OP0CM001.OP0CMST is modified) /* customer store*/
    set OP0CM001.OP0CMST modified;
  end

  if (OP0CM001.OP0CMDPT is modified) /* customer department*/
    set OP0CM001.OP0CMDPT modified;
  end

  if (OP0CM001.OP0CMZIP is modified) /* ship to verify zip*/
    set OP0CM001.OP0CMZIP modified;
  end

  if (OP0CM001.OP1ORDBY is modified) /* ordered by*/
    set OP0CM001.OP1ORDBY modified;
  end

  if (OP0CM001.XXXUSRID is modified) /* taken by svc rep userid*/
    set OP0CM001.XXXUSRID modified;
  end

  if (OP0CM001.XOCCD is modified) /* order class code*/
    set OP0CM001.XOCCD modified;
  end

  if (OP0CM001.OP1CUPO is modified) /* purchase order number*/
    OP1REC.OP1CUPO = OP0CM001.OP1CUPO;
  end

  if (OP0CM001.OP0CMNDT is modified) /* need date*/
    set OP0CM001.OP0CMNDT modified;
  else
    if (OPWREC.XBDCD == "4") /* rebook bulk*/
      set OP0CM001.OP0CMNDT protect;
    end
  end

  if (OP0CM001.OP0CMRDT is modified) /* date received*/
    set OP0CM001.OP0CMRDT modified;
  end

  if (OP0CM001.SP1ID is modified) /* sales program id*/
    set OP0CM001.SP1ID modified;
  end

  if (OP0CM001.OP1CMPNB is modified) /* sales program id*/
    set OP0CM001.OP1CMPNB modified;
  end



   /* *************************************************************/
end // end OP0CS07

// set mdt's for modified fields
Function OP0CS08()


      /* set mdt's in fields for the case of invalid aid key*/
      /* this allows the user to press the correct aid key*/
      /* without having to re-enter the data.*/

  if (OP0CM001.XGPCD is modified) /* gpc code*/
    set OP0CM001.XGPCD modified;
  else
    set OP0CM001.XGPCD normal;
  end

  if (OP0CM001.XOBCD is modified) /* base order type code*/
    set OP0CM001.XOBCD modified;
  else
    set OP0CM001.XOBCD normal;
  end

  if (OP0CM001.OP0CMCO is modified) /* customer company*/
    set OP0CM001.OP0CMCO modified;
    OP0CW02.OP0CWSIF = " ";
  else
    set OP0CM001.OP0CMCO normal;
  end

  if (OP0CM001.OP0CMST is modified) /* customer store*/
    set OP0CM001.OP0CMST modified;
    OP0CW02.OP0CWSIF = " ";
  else
    set OP0CM001.OP0CMST normal;
  end

  if (OP0CM001.OP0CMDPT is modified) /* customer department*/
    set OP0CM001.OP0CMDPT modified;
    OP0CW02.OP0CWSIF = " ";
  else
    set OP0CM001.OP0CMDPT normal;
  end

  if (OP0CM001.OP0CMZIP is modified) /* ship to verify zip*/
    set OP0CM001.OP0CMZIP modified;
  else
    set OP0CM001.OP0CMZIP normal;
  end

  if (OP0CM001.OP1ORDBY is modified) /* ordered by*/
    set OP0CM001.OP1ORDBY modified;
  else
    set OP0CM001.OP1ORDBY normal;
  end

  if (OP0CM001.XXXUSRID is modified) /* taken by svc rep userid*/
    set OP0CM001.XXXUSRID modified;
  else
    set OP0CM001.XXXUSRID normal;
  end

  if (OP0CM001.OP1CMPNB is modified) /* comp number*/
    set OP0CM001.OP1CMPNB modified;
  else
    set OP0CM001.OP1CMPNB normal;
  end

  if (OP0CM001.OP1CUPO is modified) /* purchase order number*/
    set OP0CM001.OP1CUPO modified;
  else
    set OP0CM001.OP1CUPO normal;
  end

  if (OP0CM001.XOCCD is modified) /* order class code*/
    set OP0CM001.XOCCD modified;
  else
    set OP0CM001.XOCCD normal;
  end

  if (OP0CM001.OP0CMNDT is modified) /* need date*/
    set OP0CM001.OP0CMNDT modified;
  else
    set OP0CM001.OP0CMNDT normal;
    if (OPWREC.XBDCD == "4") /* rebook bulk*/
      set OP0CM001.OP0CMNDT protect;
    end
  end

  if (OP0CM001.OP0CMRDT is modified) /* date received*/
    set OP0CM001.OP0CMRDT modified;
  else
    set OP0CM001.OP0CMRDT normal;
  end

  if (OP0CM001.SP1ID is modified) /* sales program id*/
    set OP0CM001.SP1ID modified;
  else
    if (OPWREC.XBDCD == "4") /* rebook bulk*/
      set OP0CM001.SP1ID protect;
    else
      set OP0CM001.SP1ID normal;
    end
  end

     /* wipro changes begin TT#6276*/
  if (OP0CM001.XPCCD is modified) /* product category cd*/
    set OP0CM001.XPCCD modified;
  else
    set OP0CM001.XPCCD normal;
  end
    /* wipro changes end TT#6276*/



   /* *************************************************************/
end // end OP0CS08

// edit control processing
Function OP0CS10()
   /* This statement group controls the field editing.  As many*/
   /* edits as possible are done at one time following the*/
   /* bottom up procedure.  But since many edits rely on other*/
   /* fields being correct, the edits are performed in three*/
   /* groups.  First the brand, GPC, order*/
   /* type and customer number are edited.  If no errors are*/
   /* found the second group of edits is done.  This second*/
   /* group depends on GPC, order type, and customer to be*/
   /* correct.*/
   /* The third group of edits relies on everything above it*/
   /* being correct.*/



  TA1REC.TA1LOCAT[2] = "OP0CS10 "; /* set statement group*/
   /* -----------------------------------------------------------*/
    /* Edit brand code.  Brand code is set up when the OP1REC*/
    /* was first created in OP0CS02.  A brand code must exist*/
    /* in order to continue.*/
   /* -----------------------------------------------------------*/
  if (OP1REC.XBCCD == " ")
    OPAREC.OPAERR = "Y";
    converseLib.validationFailed(582); /* Brand for logon not found.*/
    return;
  end



      /* edit/save gpc*/

  if (OP0CM001.XGPCD is modified)
    OP0CSB2(); /* edit gpc code*/
  end


   /* ***********************************************************/
   /* Check for sales office codes that need to be converted  **/
   /* ***********************************************************/

  if (OPAREC.OPAERR == "N")
    OP0CSB6(); /* check the commarea.xsocd for*/
                                   /* conversion*/
  end


      /* edit/save base order type*/

  if (OPAREC.OPAERR == "N")
    if (OP0CM001.XOBCD is modified)
      OP0CSB1(); /* edit base order type*/
    end
  else
    return;
  end

      /* get system order type via xvo table*/

  if (OPAREC.OPAERR == "N")
    if (OP0CM001.XOBCD is modified
     || OP0CM001.XGPCD is modified
     || OP0CM001.XPCCD is modified) /* wipro - Prod cat. modi. TT#6276*/
      OP0CSB3(); /* get system order type*/
      if (OPAREC.OPAERR == "N")
        OP0CW01.OP0CWECF = "Y"; /* set cust edit on*/
        OP0CS11(); /* edit order type*/
      end
    end
  end


      /* if order type error then we can' get gpc and we*/
      /* cannot edit the customer company.*/

  if (OPAREC.OPAERR == "Y") /* if error, then terminate edit*/
    return;
  end




  if (OP0CM001.OP0CMCO is modified
   || OP0CM001.OP0CMST is modified
   || OP0CM001.OP0CMDPT is modified
   || OP0CW01.OP0CWECF == "Y") /* cust edit on*/
    OP0CW01.OP0CWEZF = "Y"; /* set zip edit on*/
    OP0CS12(); /* edit customer*/
  else
     /* get customer company record for edit of po# requirements*/
    KUCREC.KUCCOID = OP0CM001.OP0CMCO; /* load key - company*/
    call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
                                   /* call i/o mod for inquiry*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
      TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
      OP0CW01.OP0CWCUC = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = OP0CW01.OP0CWCUC; /* key value*/
      TA1REC.TA1LOCAT[3] = "OP0CS10 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = "IO0240  "; /* i/o mod name*/
      XSOPS02();
    end
  end

  if (OPAREC.OPAERR == "Y") /* if error, then terminate edit*/
    return;
  end

   /* CANADA 09/22/95*/

  if (COMMAREA.XDVCD == "01") /* CANA division 1 orders only*/
    if (COMMAREA.XSOCD in XSOTBL.XSOCD
     && XSOTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* CANA*/
      if (XSOTBL.XCTCD[sysVar.arrayIndex] == "CANA" /* CANA*/
       || KUCREC.XCTCD == "CANA")                   /* CANA*/
        if (XSOTBL.XCTCD[sysVar.arrayIndex] == KUCREC.XCTCD) /* CANA*/
   /* NEXT SENTENCE*/
        else /* CANA*/
          OPAREC.OPAERR = "Y"; /* CANA*/
          converseLib.validationFailed(896); /* CANA country code does not match*/
          return;
        end /* CANA*/
      end /* CANA*/
    else /* CANA*/
      OPAREC.OPAERR = "Y"; /* CANA*/
      converseLib.validationFailed(109); /* CANA xso cd is not valid*/
      return; /* CANA*/
    end /* CANA*/
  end /* CANA*/

   /* CANA 06/04*/
   /* The block of code below was commented out on 08/31/95*/

   /* IF COMMAREA.XDVCD = '01';        /* CANA domestic only*/
    /* IF COMMAREA.XSOCD IN XSOTBL.XSOCD*/
      /* AND XSOTBL.XXXSTAT(EZETST) = 'A';/* CANA*/
      /* IF XSOTBL.XCTCD(EZETST) = KUCREC.XCTCD;/* CANA*/
   /* next sentence*/
      /* ELSE;                        /* CANA*/
        /* MOVE 'Y' TO OPAREC.OPAERR; /* CANA*/
        /* MOVE 896 TO EZEMNO;        /* CANA country code does not match*/
        /* EZERTN;*/
      /* END;                         /* CANA*/
    /* ELSE;                          /* CANA*/
      /* MOVE 'Y' TO OPAREC.OPAERR;   /* CANA*/
                                  /* MOVE 109 TO EZEMNO;          /* CANA*/
                                   /* sales office code is not valid*/
      /* EZERTN;                      /* CANA*/
    /* END;                           /* CANA*/
   /* END;                             /* CANA*/

      /* the next group of edits will be done in bottom to top*/
      /* order on the screen.  this will allow all general edits*/
      /* to be done so that all fields in error will be bright,*/
      /* but the cursor and error message will correspond to the*/
      /* top most error.*/


      /* edit/save sales program*/

   /* added to stop discounts / sales programs on salesman*/
   /* orders - bug 270   dwalke 11-28-89*/

   /* took out hard code from bug 270*/
   /* put in the following to stop discounts where xauspgfl = 'n'*/
   /* dflesh 4/12/91 log #484*/

  if (OP0CM001.SP1ID is modified)
    OP0CS15(); /* do the sales program edit*/
  end


      /* edit/save date received*/

  if (OP0CM001.OP0CMRDT is modified)
    OP0CS16(); /* date received edit*/
  end


      /* edit/save need date*/

  if (OP0CM001.OP0CMNDT is modified
   || OP0CM001.XOBCD is modified) /* verify if a divert order*/
    OP0CS18(); /* need date edit*/
  end

   /* Canada Divestiture project * Begin * Rharat * 08/08/2000 ***/
   /* if international futures order for customer 694475 and sales*/
   /* office '04' force order class 'IN' and warn the user*/

  if (OP0CW01.OP0CW-FORCE-XOC-4NIL == "Y") /* show only once*/
    if (OP1REC.XOTCD in XOTTBL.XOTCD
     && XOTTBL.XOTPROPF[sysVar.arrayIndex] == "N"
     && XOTTBL.XOTATONF[sysVar.arrayIndex] == "N"
     && XOTTBL.XOTFUTRF[sysVar.arrayIndex] == "Y") /* futures order*/
      if (OP0CM001.OP0CMCO == 694475 && OP1REC.XSOCD == "04") /* nil order*/
        OP0CM001.XOCCD = "IN"; /* international class*/
        set OP0CM001.XOCCD modified; /* force edit*/
        OP0CW01.OP0CW-FORCE-XOC-4NIL = "N"; /* reset to continue*/
        OPAREC.OPAERR = "Y"; /* set error flag*/
        converseLib.validationFailed(1010); /* order class defauted to 'IN'*/
        return; /* returndon't process further*/
      end
    end
  end

   /* Canada Divestiture project *  end  * Rharat * 08/08/2000 ***/

  if (OP0CM001.XOCCD is modified)
    OP0CS19(); /* order class edit*/
  end



      /* edit/save order class code*/

  if (OP0CM001.XOCCD is modified)
    OP0CS19(); /* order class edit*/
  end



      /* Edit/save comp number*/

  if (OP0CM001.OP1CMPNB is modified
   || OP0CM001.OP1CMPNB == 0) /* Edit is always done if it is zero*/
    OP0CS03(); /* because comp # is required under*/
                                  /* some conditions.*/
  end


      /* Save order by*/

  if (OP0CM001.OP1CUPO is modified)
    OP1REC.OP1CUPO = OP0CM001.OP1CUPO;
    set OP0CM001.OP1CUPO normal;
  end


      /* edit/save taken by*/

  if (OP0CM001.XXXUSRID is modified)
    OP0CS20(); /* taken by rep edit*/
  end


      /* save ordered by*/

  if (OP0CM001.OP1ORDBY is modified)
    OP0CS21(); /* save ordered by*/
  end


      /* edit ship to zip code*/

  if (OP0CW01.OP0CWCUF == "N") /* if not cust error*/
    if (OP0CW01.OP0CWEZF == "Y" /* if edit flag on*/
     || OP0CM001.OP0CMZIP is modified) /* or zip modified*/
      OP0CS14(); /* edit ship to zip*/
      OP1REC.ZFC-CRCY-CD = KUMREC.ZFC-CRCY-CD; /* CANA currency cd*/
    end
  end

      /* CANA 06/04*/

  OP1REC.XDZ-DATA-DIST-CD = KUCREC.XDZ-DATA-DIST-CD; /* CANA dist cd*/
  OP5REC.XDZ-DATA-DIST-CD = KUCREC.XDZ-DATA-DIST-CD; /* CANA dist cd*/
  OP0CW01.XCTCD = KUCREC.XCTCD; /* CANA country cd*/
  OP5REC.XCTCD = KUCREC.XCTCD; /* CANA country cd*/

      /* perform field relationship edits if no previous errors*/

  if (OPAREC.OPAERR == "Y")
    return;
  end

  OP0CS25(); /* control relationship edits*/


end // end OP0CS10

// edit order type
Function OP0CS11()


  OP0CW01.OP0CWLDF = "N"; /* reset lead days edit flag*/

  if (OP1REC.XOTCD in XOTTBL.XOTCD /* valid code?*/
   && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active code?*/
     /* next sentence*/
  else
    converseLib.validationFailed(017); /* order type is not valid*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0CM001.XOBDESC = " "; /* clear ord type abrv*/
    set OP0CM001.XOBCD cursor, modified, bold;
    set OP0CM001.XGPCD modified, bold;
    return;
  end

      /* validate order type against gpc*/

  if (OP0CM001.XGPCD != XOTTBL.XGPCD[sysVar.arrayIndex]) /* valid code?*/
    converseLib.validationFailed(486); /* gpc not valid for order type*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0CM001.XGPCD cursor, modified, bold;
    return;
  end

      /* validate order type against division*/

  if (COMMAREA.XDVCD == XOTTBL.XDVCD[sysVar.arrayIndex]) /* valid code?*/
     /* next sentence*/
  else
    converseLib.validationFailed(018); /* order type is not valid for your division*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0CM001.XOBCD cursor, modified, bold;
    set OP0CM001.XGPCD modified, bold;
    return;
  end


       /* if it is draw order,*/
       /* check gpc*/

  if (OPWREC.OPWFUNC == "4") /* draw from bulk*/
    if (OP0CW01.XGPCD == OP1REC.XGPCD) /* same gpc with bulk's*/

      if (OP1REC.XBDCD == "4") /* rebook draw*/
        if (XOTTBL.XOTFUTRF[sysVar.arrayIndex] == "Y") /* futures order type*/
           /* no problem - order type is okay for rebook draw*/
        else
          converseLib.validationFailed(324);
                                   /* order type must be futures for rebook*/
          OPAREC.OPAERR = "Y"; /* set error flag*/
          set OP0CM001.XOBCD cursor, modified, bold;
          return;
        end
      end

    else
      converseLib.validationFailed(376); /* cannot change gpc of orders*/
      OPAREC.OPAERR = "Y"; /* set error flag*/
      set OP0CM001.XGPCD cursor, modified, bold;
      return;
    end
  end

      /* if we have no ezertn, everything's ok and do this:*/

  OPAREC.XOTATONF = XOTTBL.XOTATONF[sysVar.arrayIndex]; /* save at once flag*/
  OPAREC.XOTABILL = XOTTBL.XOTABILL[sysVar.arrayIndex]; /* save one time bill*/
  OPAREC.XOTFUTRF = XOTTBL.XOTFUTRF[sysVar.arrayIndex]; /* save futures flag*/
  OPAREC.XOTPROPF = XOTTBL.XOTPROPF[sysVar.arrayIndex]; /* save futures flag*/
  OP0CW01.XOTBOFL = XOTTBL.XOTBOFL[sysVar.arrayIndex]; /* save backorder flag*/
  set OP0CM001.XOBCD normal;
  set OP0CM001.XGPCD normal;

        /* for instore promo orders, reset the default for*/
                     /* allow cancel flag to no.*/
  if (XOTTBL.XOTXLDD[sysVar.arrayIndex] == 0)
    OP1REC.OP1ACNLF = "N";
  end





   /* *************************************************************/
end // end OP0CS11

// edit/save customer
Function OP0CS12()


      /* *********************************************************/
      /* * this statement group edits the customer number fields**/
      /* *********************************************************/

      /* verify existance of company/dept*/

  set KUJREC empty;

  KUJREC.KUCCOID = OP0CM001.OP0CMCO; /* load key - company*/
  KUJREC.XNXCD = OP0CM001.OP0CMDPT; /* load key - dept*/
  call "IO0290" ("S ", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
      converseLib.validationFailed(670); /* cust is inactive - no new orders*/
      OPAREC.OPAERR = "Y"; /* set error flag*/
      OP0CW01.OP0CWCUF = "Y"; /* set error flag*/
      set OP0CM001.OP0CMDPT modified, bold;
      return; /* get out*/
    else
      TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
      TA1REC.TA1TBLVU = "VDEPT001"; /* table view*/
      OP0CW01.OP0CWCUC = KUJREC.XNXCD;
      TA1REC.TA1LOCAT[2] = OP0CW01.OP0CWCUC; /* key value*/
      OP0CW01.OP0CWCUC = KUJREC.KUCCOID;
      TA1REC.TA1TBLKE = OP0CW01.OP0CWCUC; /* key value*/
      TA1REC.TA1LOCAT[3] = "OP0CS12 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = "IO0290  "; /* i/o mod name*/
      XSOPS02();
    end
  end



      /* verify existance of customer/gpc*/

  KUNREC.KUCCOID = OP0CM001.OP0CMCO; /* load key - company*/
  KUNREC.KUMSTRID = OP0CM001.OP0CMST; /* load key - store*/
  KUNREC.XNXCD = OP0CM001.OP0CMDPT; /* load key - dept*/
  KUNREC.XGPCD = OP1REC.XGPCD; /* load key - gpc*/
  call "IO0280" ("S ", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VCUST001"; /* table view*/
    OP0CW01.OP0CWCUC = KUNREC.KUCCOID;
    TA1REC.TA1TBLKE = OP0CW01.OP0CWCUC; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0CS12 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0280  "; /* i/o mod name*/
    XSOPS02();
  end


      /* if not found or retrieved record is inactive,*/
      /* get first gpc record for customer.*/
      /* if still not found or inactive, message 203*/

  if (OP1REC.XGPCD == "02"
   || OP1REC.XGPCD == "03") /* no need to read again*/
       /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100 /* check for notfnd rc*/
     || KUNREC.XXXSTAT != "A")     /* found but inactive*/
      OP0CS13(); /* find first active gpc rec if any*/
    end
  end


      /* check for valid customer status*/

  if (KUNREC.XXXSTAT != "A" /* customer record retrieved not active*/
   || SQLCA.VAGen_SQLCODE == 100) /* or first gpc still not found*/
    converseLib.validationFailed(203); /* cust is inactive - no new orders*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0CW01.OP0CWCUF = "Y"; /* set error flag*/
    set OP0CM001.OP0CMCO cursor, modified, bold;
    set OP0CM001.OP0CMST modified, bold;
    set OP0CM001.OP0CMDPT modified, bold;
    return; /* get out*/
  end


      /* ensure that customer may enter new order*/

      /* get customer company record*/

  KUCREC.KUCCOID = OP0CM001.OP0CMCO; /* load key - company*/
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
    OP0CW01.OP0CWCUC = KUCREC.KUCCOID;
    TA1REC.TA1TBLKE = OP0CW01.OP0CWCUC; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0CS12 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0240  "; /* i/o mod name*/
    XSOPS02();
  end


      /* if not found, then customer is invalid*/

  if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
    converseLib.validationFailed(033); /* customer is not valid*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0CW01.OP0CWCUF = "Y"; /* set error flag*/
    set OP0CM001.OP0CMCO cursor, modified, bold;
    set OP0CM001.OP0CMST modified, bold;
    set OP0CM001.OP0CMDPT modified, bold;
    return; /* get out*/
  end


      /* check for valid company status*/

  if (KUCREC.XXXSTAT != "A") /* check for not active*/
    converseLib.validationFailed(203); /* cust is inactive - no new orders*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0CW01.OP0CWCUF = "Y"; /* set error flag*/
    set OP0CM001.OP0CMCO cursor, modified, bold;
    set OP0CM001.OP0CMST modified, bold;
    set OP0CM001.OP0CMDPT modified, bold;
    return; /* get out*/
  end


      /* check if customer may enter new orders*/

  OP0CS-CHECK-CREDIT(); /* validate credit code*/
  if (OP0CW-XCC-STAT-FOUND == "Y") /* valide credit code*/
     /* next sentence*/
  else
    converseLib.validationFailed(809); /* credit status bad*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0CW01.OP0CWCUF = "Y"; /* set error flag*/
    set OP0CM001.OP0CMCO cursor, modified, bold;
    set OP0CM001.OP0CMST modified, bold;
    set OP0CM001.OP0CMDPT modified, bold;
    return; /* get out*/
  end
   /* ----------------------------------------------------------*/
    /* See if the company has the proper legal entity.*/
    /* Not all companies need to be checked.*/
   /* ----------------------------------------------------------*/
  if (KUCREC.XAUCD == "12" /* Instructor pgm*/
   || KUCREC.XAUCD == "13" /* Store clerk pgm*/
   || KUCREC.XAUCD == "14" /* FBI*/
   || KUCREC.XAUCD == "43" /* Mail order*/
   /* OR KUCREC.XAUCD = '45'        ; Empl*/
   /* store Nike*/
   || KUCREC.XAUCD == "60" /* Retail marketing*/
   || KUCREC.XAUCD == "63" /* Dealer ad assistance*/
   || KUCREC.XAUCD == "62" /* Consumer defectives*/
   || KUCREC.XAUCD == "90") /* Cole Haan*/
     /* OR KUCREC.XAUCD = '95'        ; Empl store Side 1*/
    OP0CSLE(); /* Check legal entity*/
  else
    if (KUCREC.XDZ-DATA-DIST-CD
     != "CA") /* Added for Canadian project 9/95*/
      sysVar.arrayIndex = 1;
      if (KUCREC.XAUCD in XAUTBL.XAUCD)
        if (XAUTBL.XATCD[sysVar.arrayIndex] == "02") /* USA wholesale*/
          OP0CSLE();
        end
      end
    end
  end

      /* if needed ensure that one time bill to is valid*/

  if (KUCREC.KUCBLAID == 0 /* one time bill to required*/
   && OPAREC.XOTABILL == "N") /* one time bill to not allowed*/
    converseLib.validationFailed(034); /* cust rec is missing bill-to*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0CW01.OP0CWCUF = "Y"; /* set error flag*/
    set OP0CM001.OP0CMCO cursor, modified, bold;
    set OP0CM001.OP0CMST modified, bold;
    set OP0CM001.OP0CMDPT modified, bold;
    return; /* get out*/
  end

  if (OPAREC.OPAERR == "Y")
    return;
  end

  OP0CS-CALL-KU1540();
  if (OPAREC.OPAERR == "Y")
    return;
  end
     /* allocation seq and assignment control returned by ku1540*/
  OP1REC.OP1ALSEQ = VCULVLPD.OP1ALSEQ;
  OP1REC.XACCD = VCULVLPD.XACCD;

       /* the default b/o flag comes from the order type table*/
       /* or the customer/gpc record*/

  if (OP0CW01.XOTBOFL == "N") /* if no, then*/
    OP1REC.OP1BOFL = "N"; /* order type overrides customer*/
  else
    if (KUNREC.KUNABOFL > " ")
      OP1REC.OP1BOFL = KUNREC.KUNABOFL;
    else
      OP1REC.OP1BOFL = OP0CW01.XOTBOFL;
    end
  end


      /* save customer sku indicator*/

  OPWREC.KUCSKIND = KUCREC.KUCSKIND; /* save cust sku ind*/


       /* set cust edit flag off*/

  OP0CW01.OP0CWECF = "N"; /* set edit flag off*/

      /* at this point we have a valid kunrec*/
      /* save information*/

  OP1REC.KUCCOID = OP0CM001.OP0CMCO; /* save field - company*/
  OP1REC.KUMSTRID = OP0CM001.OP0CMST; /* save field - store*/
  OP1REC.XNXCD = OP0CM001.OP0CMDPT; /* save field - dept*/

      /* default customer units per carton*/

  OP1REC.KUCUNTCS = KUCREC.KUCUNTCS; /* units per carton*/

      /* default customer minimum allocation percent  2/1/91*/

  OP1REC.KUNMAPCT = KUNREC.KUNMAPCT; /* move min aloc %*/


  set OP0CM001.OP0CMCO normal;
  set OP0CM001.OP0CMST normal;
  set OP0CM001.OP0CMDPT normal;



   /* *************************************************************/
end // end OP0CS12

// edit/save customer
Function OP0CS13()



      /* *********************************************************/
      /* * this statement group get the first gpc rec for a cust**/
      /* *********************************************************/


      /* issue select set to get first gpc rec for customer*/

  if (OPWREC.OPWREVM == 3) /* if in review mode*/
    KUNREC.KUCCOID = OP1REC.KUCCOID; /* load key - company*/
    KUNREC.KUMSTRID = OP1REC.KUMSTRID; /* load key - store*/
    KUNREC.XNXCD = OP1REC.XNXCD; /* load key - dept*/
  else
    KUNREC.KUCCOID = OP0CM001.OP0CMCO; /* load key - company*/
    KUNREC.KUMSTRID = OP0CM001.OP0CMST; /* load key - store*/
    KUNREC.XNXCD = OP0CM001.OP0CMDPT; /* load key - dept*/
  end

  if (OP1REC.XGPCD == "02" /* footwear*/
   || OP1REC.XGPCD == "03") /* apparel*/
    KUNREC.XGPCD = OP1REC.XGPCD; /* load key - gpc*/
  else
    KUNREC.XGPCD = "**"; /* load key - gpc*/
  end

  call "IO0280" ("SS", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VCUST001"; /* table view*/
    TA1REC.TA1TBLKE = KUNREC.KUNGRP; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0CS13 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0280  "; /* i/o mod name*/
    XSOPS02();
  end


      /* get first gpc rec for customer*/

      /* xxxstat must be initialized in case a change was made*/
     /* after the first pass was verified.  i.e. store was added*/
  KUNREC.XXXSTAT = " "; /* init status for first read*/

  while (KUNREC.XXXSTAT != "A" /* read until active record found*/
   && SQLCA.VAGen_SQLCODE == 0) /* still good return codes*/
    OP0CS23(); /* selects records*/
  end


  call "IO0280" ("CS", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/

   /* *************************************************************/
end // end OP0CS13

// edit zip code
Function OP0CS14()



      /* *********************************************************/
      /* * this statement group verifies the zip codes.         **/
      /* *********************************************************/



      /* validate ship to zip code verification field*/

      /* get store record for customer*/

  KUMREC.KUCCOID = OP0CM001.OP0CMCO; /* load key - company*/
  KUMREC.KUMSTRID = OP0CM001.OP0CMST; /* load key - store*/
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSTORE01"; /* table view*/
    TA1REC.TA1TBLKE = KUMREC.KUMGRP; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0CS14 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0340  "; /* i/o mod name*/
    XSOPS02();
  end


      /* if not found, then customer is invalid*/

  if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
    converseLib.validationFailed(033); /* customer is not valid*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0CW01.OP0CWCUF = "Y"; /* set error flag*/
    set OP0CM001.OP0CMCO cursor, modified, bold;
    set OP0CM001.OP0CMST modified, bold;
    set OP0CM001.OP0CMDPT modified, bold;
    return; /* get out*/
  end


      /* check ship group addr id to see if zip check is required*/

  if (KUMREC.KUMSHAID == 0) /* ship to addr id zero ?*/
    return; /* verification not required*/
  end


      /* save infomation*/

  OPWREC.KUMSTRNM = KUMREC.KUMSTRNM; /* save cust store name*/


      /* access customer address table for ship to name/addr*/

  KULREC.KUCCOID = OP0CM001.OP0CMCO; /* load key - cust co*/
  KULREC.KULAAID = KUMREC.KUMSHAID; /* load key - addr id*/
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VADDR001"; /* table view*/
    TA1REC.TA1TBLKE = KULREC.KULGRP; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0CS14 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0170  "; /* i/o mod name*/
    XSOPS02();
  end


      /* if not found, then tell user*/

  if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
    converseLib.validationFailed(038); /* ship to addr record is missing*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0CW01.OP0CWCUF = "Y"; /* set error flag*/
    set OP0CM001.OP0CMCO cursor, modified, bold;
    set OP0CM001.OP0CMST modified, bold;
    set OP0CM001.OP0CMDPT modified, bold;
    return; /* get out*/
  end


      /* format ship to info and check zip codes*/

  set OP0CM001.OP0CMLN1 skip;
  OP0CM001.OP0CMLN1 = " ";
  set OP0CM001.OP0CMLN2 skip;
  OP0CM001.OP0CMLN2 = " ";
  set OP0CM001.OP0CMLN3 skip;
  OP0CM001.OP0CMLN3 = " ";
  set OP0CM001.OP0CMLN4 skip;
  OP0CM001.OP0CMLN4 = " ";
  set OP0CM001.OP0CMLN5 skip;
  OP0CM001.OP0CMLN5 = " ";
  set OP0CM001.OP0CMLN6 skip;
  OP0CM001.OP0CMLN6 = " ";

  OP0CW02.OP0CWSLT = "SHIP TO:"; /* literal*/
  OP0CW02.OP0CWSNM = KUMREC.KUMSTRNM;
  OP0CM001.OP0CMLN2 = OP0CW02.OP0CWSL1;

  OP0CW02.OP0CWSA1 = KULREC.XXX-ADDR1;
   /* MOVE '*' TO OP0CW02.OP0CWFL2;*/
  OP0CM001.OP0CMLN3 = OP0CW02.OP0CWSL2;

  OP0CW02.OP0CWSA2 = KULREC.XXX-ADDR2;
   /* MOVE '*' TO OP0CW02.OP0CWFL4;*/
  OP0CM001.OP0CMLN4 = OP0CW02.OP0CWSL3;

  OP0CW02.OP0CWSA3 = KULREC.XXX-ADDR3;
  OP0CM001.OP0CMLN5 = OP0CW02.OP0CWSL4;

    /* CANA 06/04*/

  OP0CM001.ZFC-CRCY-CD = KUMREC.ZFC-CRCY-CD; /* CANA*/

  OP0CW02.OP0CWSCT = KULREC.XXXCITY;
  OP0CW02.OP0CWSST = KULREC.XSTCD;

  OP0CW02.OP0CWSCN = " "; /* clear country code*/
  OP0CW02.OP0CWSCD = " "; /* clear country desc*/
  if (KULREC.XCTCD > " " /* country code present?*/
   && KULREC.XCTCD != "USA ") /* and not equal u.s.a.*/
    if (KULREC.XCTCD != "CANA") /* CANA don't move country code*/
      OP0CW02.OP0CWSCN = KULREC.XCTCD; /* move country code*/
    end
    if (KULREC.XCTCD in XCTTBL.XCTCD)
      OP0CW02.OP0CWSCD = XCTTBL.XCTDESC[sysVar.arrayIndex]; /* move country desc*/
    end
  end

  OPAREC.OPAZIP = KULREC.XXXZIP; /* move zip to wk field*/
  if (KULREC.XCTCD == " " /* country code blank*/
   || KULREC.XCTCD == "USA ") /* or equal u.s.a.*/
    OP0CW02.OP0CWSZP = OPAREC.OPAZIP5C; /* move 5 char zip to screen*/
  else
    if (KULREC.XCTCD == "CANA") /* country code canada*/
      OP0CW02.OP0CWSZP = OPAREC.OPAZIP6C; /* move 6 char zip to screen*/
    end
  end

  OP0CM001.OP0CMLN6 = OP0CW02.OP0CWSL5;

    /* CANA 06/04*/

  if (KULREC.XCTCD == " " /* country code blank*/
   || KULREC.XCTCD == "USA ") /* or equal u.s.a.*/
    if (OP0CM001.OP0CMZIP == OPAREC.OPAZIP5C) /* zips equal?*/
      set OP0CM001.OP0CMZIP normal;
    else
      converseLib.validationFailed(036); /* ship to zip codes do not match*/
      OPAREC.OPAERR = "Y"; /* set error flag*/
      set OP0CM001.OP0CMZIP cursor, modified, bold;
      return; /* get out*/
    end
  else
    if (KULREC.XCTCD == "CANA") /* CANA country code canada*/
      if (OP0CM001.OP0CMZIP == OPAREC.OPAZIP6C) /* CANA zips equal ?*/
        set OP0CM001.OP0CMZIP normal; /* CANA*/
      else /* CANA*/
        converseLib.validationFailed(036); /* CANA ship to zip codes do not match*/
        OPAREC.OPAERR = "Y"; /* CANA set error flag*/
        set OP0CM001.OP0CMZIP cursor, modified, bold; /* CANA*/
        return; /* CANA get out*/
      end /* CANA*/
    end /* CANA*/
  end /* CANA*/



   /* *************************************************************/
end // end OP0CS14

// edit sales program
Function OP0CS15()



      /* *********************************************************/
      /* * this statement group edits the sales program field.  **/
      /* *********************************************************/



      /* null sales program is ok*/

  if (OP0CM001.SP1ID == " ")
    OP1REC.SP1ID = " "; /* clear sales program id*/
    OP0CM001.SP1NM = " "; /* clear sales program name*/
    set OP0CM001.SP1ID normal;
    return;
  end


   /* added to stop discounts / sales programs on salesman*/
   /* orders. bug 270   dwalke 11-28-89*/

   /* took out hard code from bug 270*/
   /* put in the following to stop discounts where xauspgfl = 'n'*/
   /* dflesh 4/12/91 log #484*/

  sysVar.arrayIndex = 1;
  if (KUCREC.XAUCD in XAUTBL.XAUCD              /* class code in table*/
   && XAUTBL.XAUSPGFL[sysVar.arrayIndex] == "N" /* spgm flag is no*/
   && XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* spgm flag is active*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    converseLib.validationFailed(547); /* account class not valid for spgm*/
    set OP0CM001.SP1ID cursor, modified, bold; /* put cur on sales pgm field*/
    return; /* then return*/
  end

      /* validate sales program existance*/

  SP1REC.SP1ID = OP0CM001.SP1ID; /* load key*/
  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSPGM001"; /* table view*/
    TA1REC.TA1TBLKE = SP1REC.SP1KEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0CS15 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0070  "; /* i/o mod name*/
    XSOPS02();
  end


      /* if not found or not active then error*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for fnd rc*/
   && SP1REC.SP1STAT == "A")   /* check for active id*/
    OP0CM001.SP1NM = SP1REC.SP1NM; /* move sp name to map*/
    OP1REC.SP1ID = OP0CM001.SP1ID; /* save field*/
    set OP0CM001.SP1ID normal;
  else
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0CM001.SP1NM = " "; /* clear sp name in map*/
    if (OP0CW01.OP0CWCUF == "N") /* cust error flag off*/
      converseLib.validationFailed(024); /* sales program id is not valid*/
      set OP0CM001.SP1ID cursor, modified, bold;
    else
      set OP0CM001.SP1ID modified, bold;
    end
  end



   /* *************************************************************/
end // end OP0CS15

// edit date received
Function OP0CS16()



      /* *********************************************************/
      /* * this statement group edits the date received field.  **/
      /* *********************************************************/


      /* edit/save date received*/

      /* check for zero date received (default to current date).*/
      /* this defaults the date if non entered.*/

  if (OP0CM001.OP0CMRDT == "MMDDYY" /* if zero or not entered, ok*/
   || OP0CM001.OP0CMRDT == "000000" 
   || OP0CM001.OP0CMRDT == " ")    
    OP1REC.OP1ORCDT = OPAREC.OPACDT; /* save date received*/
    OPAREC.OPAWDT = OPAREC.OPACYMD;
    OPAREC.OPAFMM = OPAREC.OPAWMM;
    OPAREC.OPAFDD = OPAREC.OPAWDD;
    OPAREC.OPAFYY = OPAREC.OPAWYY;
    OP0CM001.OP0CMRDT = OPAREC.OPAFDT;
    set OP0CM001.OP0CMRDT normal;
    return;
  end


      /* edit non-zero received date*/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG"; /* func request*/
  TA2REC.TA2GRTYP = "A"; /* format is mmddyy*/
  TA2REC.TA2GRGA = OP0CM001.OP0CMRDT; /* set date argument*/
  call "TA0040" (TA2REC) {isExternal = yes}; /* call date module*/
  if (TA2REC.TA2RTNCD != 0) /* check for invalid rc*/
    OPAREC.OPAERR = "Y"; /* set err flag*/
    if (OP0CW01.OP0CWCUF == "N") /* cust error flag off*/
      converseLib.validationFailed(041); /* date received is not a valid date*/
      set OP0CM001.OP0CMRDT cursor, modified, bold;
    else
      set OP0CM001.OP0CMRDT modified, bold;
    end
    return;
  end


      /* insure that date received is not after today*/

  if (TA2REC.TA2GRGGN > OPAREC.OPACDT) /* received date after today?*/
    OPAREC.OPAERR = "Y"; /* set err flag*/
    if (OP0CW01.OP0CWCUF == "N") /* cust error flag off*/
      converseLib.validationFailed(041); /* date received is not a valid date*/
      set OP0CM001.OP0CMRDT cursor, modified, bold;
    else
      set OP0CM001.OP0CMRDT modified, bold;
    end
    return;
  end


      /* is date received more than two years before today?*/

  OPAREC.OPAWDT = OPAREC.OPACDT - 20000; /* wk-dt = curr-dt - 2 years*/
  if (TA2REC.TA2GRGGN < OPAREC.OPAWDT)
                                   /* check for lt one year previous*/
    OPAREC.OPAERR = "Y"; /* set err flag*/
    if (OP0CW01.OP0CWCUF == "N") /* cust error flag off*/
      converseLib.validationFailed(048); /* date received is more than one year previous*/
      set OP0CM001.OP0CMRDT cursor, modified, bold;
    else
      set OP0CM001.OP0CMRDT modified, bold;
    end
    return;
  end


      /* save date received and set field attribute*/

  OP1REC.OP1ORCDT = TA2REC.TA2GRGGN; /* save date received*/
  set OP0CM001.OP0CMRDT normal;



   /* *************************************************************/
end // end OP0CS16

// edit need date
Function OP0CS18()


      /* *********************************************************/
      /* * this statement group edits the need date field.      **/
      /* *********************************************************/


      /* check need date*/

  OP0CW01.OP0CWLDF = "N"; /* reset lead days edit flag*/

  if (OP1REC.XOTCD in XOTTBL.XOTCD /* if valid order type*/
   && XOTTBL.XOTATONF[sysVar.arrayIndex] == "Y") /* and it's an at-once order*/
    OPAREC.OPAFMM = OPAREC.OPACMM;
                                   /* move today's date to need date*/
    OPAREC.OPAFDD = OPAREC.OPACDD;
    OPAREC.OPAFYY = OPAREC.OPACYY;
    OP1REC.OP1CUNDT = OPAREC.OPACDT;
    if (OP0CM001.OP0CMNDT != " "           /* if the date ne spaces*/
     && OP0CM001.OP0CMNDT != OPAREC.OPAFDT /* if the date ne today*/
     && OP0CM001.OP0CMNDT != "MMDDYY")     /* if the date ne mmddyy*/
      converseLib.validationFailed(386); /* warn them that we changed the date*/
      set OP0CM001.OP0CMNDT bold;
      OP0CM001.OP0CMNDT = OPAREC.OPAFDT; /* set the date to today*/
    else
      OP0CM001.OP0CMNDT = OPAREC.OPAFDT; /* set the date to today*/
    end
  end

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG"; /* func request*/
  TA2REC.TA2GRTYP = "A"; /* format is mmddyy*/
  TA2REC.TA2GRGA = OP0CM001.OP0CMNDT; /* set date argument*/
  call "TA0040" (TA2REC) {isExternal = yes}; /* call date module*/
  if (TA2REC.TA2RTNCD != 0) /* check for invalid rc*/
    OPAREC.OPAERR = "Y"; /* set err flag*/
    if (OP0CW01.OP0CWCUF == "N") /* cust error flag off*/
      converseLib.validationFailed(013); /* need date is not a valid date*/
      set OP0CM001.OP0CMNDT cursor, modified, bold;
    else
      set OP0CM001.OP0CMNDT modified, bold;
    end
    return;
  end



      /* is need date prior to today?*/

  if (TA2REC.TA2GRGGN < OPAREC.OPACDT) /* check for lt today's date*/
    OP0CS-CHK-DIVERT(); /* check to see if a divert order*/
    if (OP0CW01.OP0CW-DIVERT-ORDER-FL == "Y")
      /* next sentence*/
    else
      OPAREC.OPAERR = "Y"; /* set err flag*/
      if (OP0CW01.OP0CWCUF == "N") /* cust error flag off*/
        converseLib.validationFailed(015); /* need date must not be before today's date*/
        set OP0CM001.OP0CMNDT cursor, modified, bold;
      else
        set OP0CM001.OP0CMNDT modified, bold;
      end
      return;
    end
  else
    OP0CW01.OP0CW-DIVERT-ORDER-FL = "N"; /* reset divert order flag*/
  end


      /* is need date beyond two years from today?*/

  OPAREC.OPAWDT = OPAREC.OPACDT + 20000; /* wk-dt = curr-dt + 2 years*/
  if (TA2REC.TA2GRGGN > OPAREC.OPAWDT) /* check for gt one year future*/
    OPAREC.OPAERR = "Y"; /* set err flag*/
    if (OP0CW01.OP0CWCUF == "N") /* cust error flag off*/
      converseLib.validationFailed(016); /* need date is more than one year in the future*/
      set OP0CM001.OP0CMNDT cursor, modified, bold;
    else
      set OP0CM001.OP0CMNDT modified, bold;
    end
    return;
  end


       /* if it is a draw order, validate the entered need date*/
       /* against the bulk order need date and dont-ship-after-dt*/
       /* the entered need date must be => bulk order need date*/
       /* and <= bulk order dont-ship-after-date.  if the bulk*/
       /* order dont-ship-after-date is equal to zero, validation*/
       /* against the dont-ship-after-date is not needed.*/


  if (OPWREC.OPWFUNC == "4")
    if (OP0CW01.OP0CWDSA == 0) /* no d-s-after-dt on bulk order*/
      OP0CW01.OP0CWDSA = 99999999;
    end

      /* for flexible draw orders, the need date will no longer*/
      /* be compared to the bulk need date.*/
      /* the need date validation routine for flex draw orders is*/
      /* a temporary fix.  eventually, this will be removed when*/
      /* the reserved quantity can be allocated properly between*/
      /* the draws and bulks.  to return the original validation*/
      /* routine, remove the if-condition for flex-draw including*/
      /* all the statement between the if and else.  the statements*/
      /* after the else condition (if not flex-draw) are original*/
      /* code and will be retained.*/

    if (OP1REC.XBDCD == "7") /* flexible draw*/
      if (TA2REC.TA2GRGGN <= OP0CW01.OP0CWDSA)
         /* next sentence*/
      else
        OPAREC.OPAERR = "Y"; /* set err flag*/
        if (OP0CW01.OP0CWCUF == "N") /* cust error flag off*/
          set OP0CM001.OP0CMNDT cursor, modified, bold;
          converseLib.validationFailed(293); /* must be bet. need dt and d-s-a-dt on bulk*/
        else
          set OP0CM001.OP0CMNDT modified, bold;
        end
        return;
      end
    else /* not flexible-draw order*/

        /* statements after this are original code*/

      if (TA2REC.TA2GRGGN >= OP0CW01.OP0CWBNT
       && TA2REC.TA2GRGGN <= OP0CW01.OP0CWDSA)
         /* next sentence*/
      else
        OPAREC.OPAERR = "Y"; /* set err flag*/
        if (OP0CW01.OP0CWCUF == "N") /* cust error flag off*/
          set OP0CM001.OP0CMNDT cursor, modified, bold;
          converseLib.validationFailed(293); /* must be bet. need dt and d-s-a-dt on bulk*/
        else
          set OP0CM001.OP0CMNDT modified, bold;
        end
        return;
      end

        /* statements before this are original code*/

    end
  end


      /* save need date and set field attribute*/

  OP1REC.OP1CUNDT = TA2REC.TA2GRGGN; /* save need date*/
  set OP0CM001.OP0CMNDT normal;



   /* *************************************************************/
end // end OP0CS18

// edit/save order class
Function OP0CS19()



      /* *********************************************************/
      /* * this statement group edits the order class field.    **/
      /* *********************************************************/


      /* validate order class*/

  if (OP0CM001.XOCCD == " ") /* null ocde*/
    OP1REC.XOCCD = OP0CM001.XOCCD; /* save code*/
    OP0CM001.XOCABRV = " "; /* clear abrv*/
    OPAREC.XOCPROPF = " "; /* clear at once flag*/
    OPAREC.XOCFUTRF = " "; /* clear futures flag*/
    set OP0CM001.XOCCD normal;
    return; /* get out*/
  end


      /* validate order class*/

  if (OP0CM001.XOCCD in XOCTBL.XOCCD /* valid code?*/
   && XOCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active code?*/
    OP1REC.XOCCD = OP0CM001.XOCCD; /* save code*/
    OP0CM001.XOCABRV = XOCTBL.XOCABRV[sysVar.arrayIndex]; /* save abrv*/
    OPAREC.XOCPROPF = XOCTBL.XOCPROPF[sysVar.arrayIndex]; /* save at once flag*/
    OPAREC.XOCFUTRF = XOCTBL.XOCFUTRF[sysVar.arrayIndex]; /* save futures flag*/
    set OP0CM001.XOCCD normal;
  else
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0CW01.OP0CWOCF = "Y"; /* set error flag*/
    OP0CM001.XOCABRV = " "; /* clear abrv*/
    if (OP0CW01.OP0CWCUF == "N") /* cust error flag off*/
      converseLib.validationFailed(020); /* order class is not valid*/
      set OP0CM001.XOCCD cursor, modified, bold;
    else
      set OP0CM001.XOCCD modified, bold;
    end
  end


      /* validate order class against division*/

  if (OPAREC.OPAERR == "N") /* error flag not set?*/
    if (XOCTBL.XDVCD[sysVar.arrayIndex] == " " /* no restrictions?*/
     || COMMAREA.XDVCD == XOCTBL.XDVCD[sysVar.arrayIndex]) /* valid match?*/
       /* next sentence*/
    else
      OPAREC.OPAERR = "Y"; /* set error flag*/
      OP0CW01.OP0CWOCF = "Y"; /* set error flag*/
      if (OP0CW01.OP0CWCUF == "N") /* cust error flag off*/
        converseLib.validationFailed(021); /* ord class is not valid for your div*/
        set OP0CM001.XOCCD cursor, modified, bold;
      else
        set OP0CM001.XOCCD modified, bold;
      end
    end
  end


      /* international airborne edit: if using 'as' order class,*/
      /* base ot must be 's1' and cust sls reg cd must be either*/
      /* 'ao' 'ap' or 'ex'.*/
      /* order class 'au' and 'tr' not allowed in order entry*/

  if (OP1REC.XDVCD == "02") /* international*/
    if (OP0CM001.XOCCD == "AS") /* order class*/
      if (OP0CM001.XOBCD == "S1") /* base order type*/
        OP0CS-GET-SLS-REG(); /* get the sales region code*/
        if (VDSTRB01.ZRGCD == "AO" /* sls reg cd*/
         || VDSTRB01.ZRGCD == "AP" 
         || VDSTRB01.ZRGCD == "EX")
           /* next sentence*/
        else
          OPAREC.OPAERR = "Y"; /* set error flag*/
          OP0CW01.OP0CWOCF = "Y"; /* set error flag*/
          OP0CM001.XOCABRV = " "; /* clear abrv*/
          converseLib.validationFailed(798); /* order class 'as' is not*/
          set OP0CM001.XOCCD cursor, modified, bold; /* valid for cust*/
        end
      else /* if using 'as' order class base ot must be 's1'*/
        OPAREC.OPAERR = "Y"; /* set error flag*/
        OP0CW01.OP0CWOCF = "Y"; /* set error flag*/
        OP0CM001.XOCABRV = " "; /* clear abrv*/
        converseLib.validationFailed(797); /* order type must be 's1' for*/
        set OP0CM001.XOCCD cursor, modified, bold; /* 'as' order class*/
      end
    else
      if (OP0CM001.XOCCD == "AU" /* order class*/
       || OP0CM001.XOCCD == "TR")
        OPAREC.OPAERR = "Y"; /* set error flag*/
        OP0CW01.OP0CWOCF = "Y"; /* set error flag*/
        OP0CM001.XOCABRV = " "; /* clear abrv*/
        converseLib.validationFailed(796); /* order class is not valid*/
        set OP0CM001.XOCCD cursor, modified, bold; /* for order entry*/
      end
    end
  end


      /* if no order class error,*/
      /* then edit order class agains order typ*/

  if (OP0CW01.OP0CWOCF != "Y") /* prev order class error?*/
    OP0CS30(); /* edit order class vs order type*/
  end


      /* if international order and a draw order*/
      /* and trying to enter order class 'in', this is not allowed*/

  if (OP1REC.XDVCD == "02") /* international order*/
    if (OPWREC.OPWFUNC == "4" /* a draw order*/
     && OP0CM001.XOCCD == "IN") /* trying to enter 'international'*/
      converseLib.validationFailed(787); /* order class not allowed for draw*/
      OP0CW01.OP0CWOCF = "Y"; /* set error flag*/
      OPAREC.OPAERR = "Y";
      set OP0CM001.XOCCD cursor, modified, bold;
    end
  end

      /* check order class edit flag for error*/
      /* if no error, then don't build help table*/

  if (OP0CW01.OP0CWOCF != "Y") /* check error flag*/
    return; /* get out*/
  end


      /* build help table for user*/

  OP0CM001.OP0CMHTI = "ORDER CLASS "; /* set help title*/
  sysVar.arrayIndex = 1; /* init table index*/
  OPAREC.OPASUB = 1; /* init map index*/
  while (OPAREC.OPASUB < 23 /* help table not full*/
   && XOCTBL.XOCCD[sysVar.arrayIndex] != "99") /* not end of table*/
    if (XOCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active table entry*/
      if (XOCTBL.XDVCD[sysVar.arrayIndex] == " " /* no division restrictions*/
       || XOCTBL.XDVCD[sysVar.arrayIndex] == COMMAREA.XDVCD) /* or division match*/
        OP0CS24(); /* build entry if futures or prop flags*/
                                   /* both = yes*/
      end
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1; /* increment table index*/
  end



   /* *************************************************************/
end // end OP0CS19

// edit taken by service rep id
Function OP0CS20()



      /* *********************************************************/
      /* * this statement group edits the taken by service      **/
      /* * rep logon id.                                        **/
      /* *********************************************************/


      /* check for a null service rep logon id*/

  if (OP0CM001.XXXUSRID == " ") /* check for null*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    if (OP0CW01.OP0CWCUF == "N") /* cust error flag off*/
      converseLib.validationFailed(046); /* taken-by is not a valid svc rep id*/
      set OP0CM001.XXXUSRID cursor, modified, bold;
    else
      set OP0CM001.XXXUSRID modified, bold;
    end
    return;
  end


      /* verify that the service rep id exists*/

  KUYREC.XXXUSRID = OP0CM001.XXXUSRID; /* load key*/
  call "IO0550" ("SA", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0   /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100 /* check for notfnd rc*/
   || SQLCA.VAGen_SQLCODE == -811) /* check for not unique rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSVREP01"; /* table view*/
    TA1REC.TA1TBLKE = KUYREC.XXXUSRID; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0CS20 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0550  "; /* i/o mod name*/
    XSOPS02();
  end


      /* if not found or not active then error*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for found  rc*/
   && KUYREC.XXXSTAT == "A")   /* check for active id*/
    OP0CM001.KUYREPNM = KUYREC.KUYREPNM; /* move rep name to map*/
    OP1REC.OP1TBREP = KUYREC.KUYSVRID;
                                   /* save taken-by service rep id*/
    set OP0CM001.XXXUSRID normal;
  else
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0CM001.KUYREPNM = " "; /* clear rep name in map*/
    if (OP0CW01.OP0CWCUF == "N") /* cust error flag off*/
      converseLib.validationFailed(040); /* entered-by is not a valid service rep id*/
      set OP0CM001.XXXUSRID cursor, modified, bold;
    else
      set OP0CM001.XXXUSRID modified, bold;
    end
    return;
  end



   /* *************************************************************/
end // end OP0CS20

// save ordered by
Function OP0CS21()



      /* *********************************************************/
      /* * this statement group saves the ordered by field      **/
      /* *********************************************************/


      /* save ordered by field*/

  OP1REC.OP1ORDBY = OP0CM001.OP1ORDBY; /* save ordered by*/
  set OP0CM001.OP1ORDBY normal;



   /* *************************************************************/
end // end OP0CS21

// EDIT SPECIAL CUSTOMER GROUP
Function OP0CS22()

  KUPREC.KUCCOID = OP0CM001.OP0CMCO; /* load cust comp key*/
  KUPREC.KUMSTRID = OP0CM001.OP0CMST; /* cust store key*/
  KUPREC.XNXCD = OP0CM001.OP0CMDPT; /* cust dept*/
  KUPREC.XGPCD = OP0CM001.XGPCD; /* gpccode*/

  call "IO0260" ("S ", SQLCA, KUPREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* this is a restricted customer*/
    if (KUPREC.XSOCD != " ")
      if (OP1REC.XSOCD == KUPREC.XSOCD
       || OP1REC.XSOCD == "08"
       || OP1REC.XSOCD == "12"
       || OP1REC.XSOCD == "07")
               /* next sentence*/
      else
        converseLib.validationFailed(621); /* users so not valid for restricted*/
                                   /* cust*/
        OPAREC.OPAERR = "Y";
        OP0CW01.OP0CWCUF = " ";
        set OP0CM001.OP0CMCO cursor, modified, bold;
        set OP0CM001.OP0CMST modified, bold;
        set OP0CM001.OP0CMDPT modified, bold;
        return;
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* this is not a restricted customer*/
        /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCUST   ";
      TA1REC.TA1TBLVU = "VCUGRP01";
      OP0CW01.OP0CWTK2 = OP0CM001.OP0CMCO;
      OP0CW01.OP0CWTK3 = OP0CM001.OP0CMST;
      OP0CW01.OP0CWTK4 = OP0CM001.OP0CMDPT;
      OP0CW01.OP0CWTK5 = OP0CM001.XGPCD;
      TA1REC.TA1TBLKE = OP0CW01.OP0CWTK1;
      TA1REC.TA1LOCAT[1] = " ";
      TA1REC.TA1LOCAT[2] = " ";
      TA1REC.TA1LOCAT[3] = "OP0CS22 ";
      TA1REC.TA1LOCAT[4] = "IO0260  ";
      XSOPS02();
    end
  end

   /* ********************end statement group*********************/
end // end OP0CS22

// edit/save customer
Function OP0CS23()



      /* *********************************************************/
      /* * this statement group gets records for customer       **/
      /* *********************************************************/


      /* get first gpc rec for customer*/

  call "IO0280" ("SN", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

      /* if review mode, then not found is an error*/
      /* since a gpc record was found sometime previouly*/
      /* for the customer.*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100 /* check for notfnd rc*/
     && OPWREC.OPWREVM == 0)       /* check for not review mode*/
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
      TA1REC.TA1TBLVU = "VCUST001"; /* table view*/
      TA1REC.TA1TBLKE = KUNREC.KUNGRP; /* key value*/
      TA1REC.TA1LOCAT[3] = "OP0CS13 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = "IO0280  "; /* i/o mod name*/
      XSOPS02();
    end
  end


   /* *************************************************************/
end // end OP0CS23

// edit/save order class
Function OP0CS24()



      /* *********************************************************/
      /* * this statement group edits the order class against   **/
      /* * the order type field when building the help table.   **/
      /* *********************************************************/



  if (OPAREC.XOTPROPF == "Y" /* both prop = yes - then ok*/
   && XOCTBL.XOCPROPF[sysVar.arrayIndex] == "Y")
    OP0CM001.OP0CMHCD[OPASUB] = XOCTBL.XOCCD[sysVar.arrayIndex]; /* code*/
    OP0CM001.OP0CMHAB[OPASUB] = XOCTBL.XOCABRV[sysVar.arrayIndex]; /* abrv*/
    OPAREC.OPASUB = OPAREC.OPASUB + 1; /* increment map index*/
  else
    if (OPAREC.XOTFUTRF == "Y" /* both futures = yes - then ok*/
     && XOCTBL.XOCFUTRF[sysVar.arrayIndex] == "Y")
      OP0CM001.OP0CMHCD[OPASUB] = XOCTBL.XOCCD[sysVar.arrayIndex]; /* code*/
      OP0CM001.OP0CMHAB[OPASUB] = XOCTBL.XOCABRV[sysVar.arrayIndex]; /* abrv*/
      OPAREC.OPASUB = OPAREC.OPASUB + 1; /* increment map index*/
    end
  end



   /* *************************************************************/
end // end OP0CS24

// control field relation edits
Function OP0CS25()


      /* *********************************************************/
      /* * this statement group controls the field relationship **/
      /* * edits.                                               **/
      /* *                                                      **/
      /* * the fields are edited in reverse order so that the   **/
      /* * the cursor and error message will be related to the  **/
      /* * top most error.  any errors below the top most most  **/
      /* * error will still be highlighted.                     **/
      /* *                                                      **/
      /* * note:  these edits are not controlled by the field   **/
      /* *        mdt's being on (i.e. these edits will always  **/
      /* *        execute if no errors were encountered).       **/
      /* *********************************************************/


  TA1REC.TA1LOCAT[2] = "OP0CS25 "; /* statement group*/


      /* edit order type vs. sales program.*/
      /* if ok, then edit need date against delivery date.*/
      /* edit customer vs. sales program.*/
      /* if ok, edit the order type vs. gpc and terms.*/

  if (OPWREC.OPWREVM == 0 /* not review mode*/
   && OP0CM001.SP1ID > " ") /* sales program entered ?*/
    OP0CS26(); /* edit order type vs. sales program*/
  end


      /* edit current date, need date, order type for lead days*/

  if (OPWREC.OPWREVM == 0  /* not review mode*/
   && OPAREC.OPAERR != "Y" /* not previous error*/
   && OPWREC.XBDCD != "4") /* not a rebook bulk*/
    OP0CS31(); /* edit lead days for order type*/
  end

  OP0CSAH(); /* edit for cust po nbr required*/

  if (OP1REC.XDVCD == "01") /* domestic customer*/
    if (OPWREC.OPWREVM == 0 /* not review mode*/
     && OPAREC.OPAERR != "Y") /* not previous error*/
      if (OP1REC.XOTCD in XOTTBL.XOTCD /* order type in table*/
       && XOTTBL.XQACD2[sysVar.arrayIndex] != "02"
       && XOTTBL.XLCCD2[sysVar.arrayIndex] != "20")
        OP0CW01.OP0CWSED = 0;
        OP0CW01.OP0CWXOT = " ";
        OP0CW01.OP0CWOMF = "N";
        OP0CS32(); /* edit profile*/
      end
    end
  end

  if (OPWREC.OPWREVM == 0) /* not review mode*/
    OP0CS22(); /* edit special customer group*/
  end

  OPWREC01.XPCCH = "  ";

  if (OPWREC01.XPCCK > "  ")
    OPWREC01.XPCCH = OPWREC01.XPCCK;
  else
    OPWREC01.XPCCH = OP0CM001.XPCCD;
  end

  sysVar.arrayIndex = 1;
  OP0CW01.OP0CW-XPC-FND = "N";

  if (OPWREC01.XPCCH > "  ")
    while (XPCTBL.XPCCD[sysVar.arrayIndex] != "98"
     && OP0CW01.OP0CW-XPC-FND == "N")
      if (XPCTBL.XPCCD[sysVar.arrayIndex] == OPWREC01.XPCCH
       && XPCTBL.XGPCD[sysVar.arrayIndex] == OP0CM001.XGPCD
       && XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        set OP0CM001.XPCCD normal;
        OP0CW01.OP0CW-XPC-FND = "Y";
      else
        sysVar.arrayIndex = sysVar.arrayIndex + 1;
      end
    end
  end

  if (OPWREC01.XPCCH > "  "
   && OP0CW01.OP0CW-XPC-FND == "N")
    converseLib.validationFailed(922); /* prod cat/gpc invalid combo*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0CM001.XPCCD cursor, modified, bold;
    set OP0CM001.XGPCD modified, bold;
    return;
  end

  if (OPAREC.OPAERR != "Y")
    OP0CS-AIRBORNE(); /* check for transmitted airborne conditions*/
  end

   /* *************************************************************/
end // end OP0CS25

// edit ord type vs sales program
Function OP0CS26()



      /* *********************************************************/
      /* * this statement group edits order type against the    **/
      /* * sales program field.  if found, then need date is    **/
      /* * edited against delivery date.                        **/
      /* *********************************************************/


  SP2REC.SP1ID = OP0CM001.SP1ID; /* load key*/
  SP2REC.XOTCD = OP1REC.XOTCD; /* load key*/
  call "IO0080" ("S ", SQLCA, SP2REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VORTYP01"; /* table view*/
    TA1REC.TA1TBLKE = SP2REC.SP2KEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0CS26 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0080  "; /* i/o mod name*/
    XSOPS02();
  end


      /* if not found, then error*/

  if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
    converseLib.validationFailed(025); /* sls pgm id is not valid for ord type*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0CM001.SP1ID cursor, modified, bold;
    set OP0CM001.XOBCD bold;
    return;
  end


      /* validate today's date against the sp booking date*/

  if (OPAREC.OPACDT < SP2REC.SP2BKBDT
   || OPAREC.OPACDT > SP2REC.SP2BKXDT)
    converseLib.validationFailed(026);
                                   /* today not valid book date for sls pgm*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0CM001.SP1ID cursor, modified, bold;
  end


      /* edit the need date against the delivery date*/

  if (OP1REC.OP1CUNDT < SP2REC.SP2DLBDT
   || OP1REC.OP1CUNDT > SP2REC.SP2DLXDT)
    converseLib.validationFailed(027); /* need date not valid del date for sls pgm*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0CM001.SP1ID cursor, modified, bold;
    set OP0CM001.OP0CMNDT bold;
  end


      /* edit the need date sales program lead days*/

  set TA2REC empty;
  TA2REC.TA2DBDFN = OPAREC.OPACDT; /* current date ccyymmdd*/
  TA2REC.TA2DBDTN = OP1REC.OP1CUNDT; /* need date ccyymmdd*/
  TA2REC.TA2DTOPT = "DAYSDIFF";
  TA2REC.TA2RTNCD = 0;
  TA2REC.TA2GRTYP = "G";
  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end
  if (TA2REC.TA2RTNCD == 0)
    if (TA2REC.TA2DBDDN >= SP2REC.SP2LEDTM)
      /* next sentence*/
    else
      converseLib.validationFailed(52); /* need date does not meet sales program req.*/
      OPAREC.OPAERR = "Y";
      set OP0CM001.OP0CMNDT cursor, modified, bold;
    end
  else
    converseLib.validationFailed(13); /* need date is not a valid date*/
    OPAREC.OPAERR = "Y";
    set OP0CM001.OP0CMNDT cursor, modified, bold;
  end


      /* if any sales pgm xsgcd eq '**' then all custs qualify*/

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex < 11 /* not end of table*/
   && SP1REC.XSGCD[sysVar.arrayIndex] > "  ") /* not empty entry*/
    if (SP1REC.XSGCD[sysVar.arrayIndex] == "**") /* all custs qualify?*/
      return;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end


      /* edit the customer company account class against*/
      /* the sales account type.  if a match is found, then*/
      /* the sales program is valid for the customer.*/

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex < 21 /* not end of table*/
   && SP1REC.XAUCD[sysVar.arrayIndex] > " ") /* not end active entries*/
    if (KUCREC.XAUCD == SP1REC.XAUCD[sysVar.arrayIndex]) /* if acct code found*/
      return; /* customer qualifies*/
    else
      sysVar.arrayIndex = sysVar.arrayIndex + 1;
    end
  end


      /* if the customer group indicator is off, then check*/
      /* for specific customer qualification.*/

  if (KUNREC.KUNCGIND != "Y")
    OP0CS27(); /* check specific customers*/
    return; /* get out*/
  end


      /* if the customer is part of a special customer group,*/
      /* then, access the special customer group record and*/
      /* check the xsg special customer group array.*/

  KUPREC.KUCCOID = OP0CM001.OP0CMCO; /* load key - cust company*/
  KUPREC.KUMSTRID = OP0CM001.OP0CMST; /* load key - cust store*/
  KUPREC.XNXCD = KUNREC.XNXCD; /* load key - cust dept*/
  KUPREC.XGPCD = KUNREC.XGPCD; /* load key - gpc*/
  call "IO0260" ("S ", SQLCA, KUPREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VCUGRP01"; /* table view*/
    TA1REC.TA1TBLKE = KUPREC.KUPGRP; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0CS26 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0260  "; /* i/o mod name*/
    XSOPS02();
  end


      /* if not found, then error*/

  if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
    converseLib.validationFailed(043); /* cust spec group rec misssing*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0CM001.OP0CMCO cursor, modified, bold;
    set OP0CM001.OP0CMST modified, bold;
    set OP0CM001.OP0CMDPT modified, bold;
    set OP0CM001.SP1ID modified, bold;
    return;
  end


      /* edit the customer special account class against*/
      /* the sales program special account type.*/

  sysVar.arrayIndex = 1;
  while (sysVar.arrayIndex < 11 /* not end of table*/
   && KUPREC.XSGCD[sysVar.arrayIndex] > " ") /* not end active entries*/
    OPAREC.OPASUB = 1;
    while (OPAREC.OPASUB < 21 /* not end of table*/
     && SP1REC.XSGCD[OPASUB] > " ") /* not end active entries*/
      if (KUPREC.XSGCD[sysVar.arrayIndex] == SP1REC.XSGCD[OPASUB])
        return; /* if found then sales program ok*/
      end
      OPAREC.OPASUB = OPAREC.OPASUB + 1;
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end


      /* if no match between the two tables, then check*/
      /* for specific customer qualification.*/

  OP0CS27(); /* check specific customers*/



   /* *************************************************************/
end // end OP0CS26

// check slspgm for specific cust
Function OP0CS27()



      /* *********************************************************/
      /* * this statement group edits the customer as being     **/
      /* * valid as a "specific customer" on the sales program. **/
      /* *********************************************************/


      /* first check to see if there are specific customers.*/
      /* if not, then we have an error.*/

  if (SP1REC.SP1CIND != "Y") /* no specific customers*/
    converseLib.validationFailed(044); /* cust does not qualify for sls pgm*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP1REC.SP1ID = " "; /* moved into op1rec in s15*/
    set OP0CM001.SP1ID cursor, modified, bold;
    set OP0CM001.OP0CMCO bold;
    set OP0CM001.OP0CMST bold;
    set OP0CM001.OP0CMDPT bold;
    return;
  end


      /* access slspgm customer records*/

  SP4REC.SP1ID = OP0CM001.SP1ID; /* load key - sales pgm id*/
  SP4REC.KUCCOID = OP0CM001.OP0CMCO; /* load key - cust company*/
  call "IO0100" ("SS", SQLCA, SP4REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSCUST01"; /* table view*/
    TA1REC.TA1TBLKE = SP4REC.SP4KEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0CS27 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0100  "; /* i/o mod name*/
    XSOPS02();
  end


      /* process returned answer set*/

      /* basis of selection below is that all 9's in any key*/
      /* means any (store, dept, or gpc depending on field).*/
      /* otherwise, a specific field value must match.*/

      /* process answer set.  when match found the customer*/
      /* qualified for the sales program.*/

  while (SQLCA.VAGen_SQLCODE == 0)
    OP0CS28(); /* get next answer set row*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (SP4REC.KUMSTRID == 9999 /* store ok ?*/
       || SP4REC.KUMSTRID == OP0CM001.OP0CMST)
        if (SP4REC.XNXCD == 99 /* dept OK ?*/
         || SP4REC.XNXCD == OP0CM001.OP0CMDPT)
          if (SP4REC.XGPCD == "99" /* gpc ok ?*/
           || SP4REC.XGPCD == KUNREC.XGPCD)
            return; /* cust qualifies*/
          end
        end
      end
    end
  end


      /* if not found, then error*/

  if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
    converseLib.validationFailed(044); /* cust does not qualify for sls pgm*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP1REC.SP1ID = " "; /* moved into op1rec in s15*/
    set OP0CM001.SP1ID cursor, modified, bold;
    set OP0CM001.OP0CMCO bold;
    set OP0CM001.OP0CMST bold;
    set OP0CM001.OP0CMDPT bold;
    return;
  end



   /* *************************************************************/
end // end OP0CS27

// check slspgm for specific cust
Function OP0CS28()



      /* *********************************************************/
      /* * this statement group edits the customer as being     **/
      /* * valid as a "specific customer" on the sales program. **/
      /* *********************************************************/


      /* access slspgm customer record from answer set*/

  call "IO0100" ("SN", SQLCA, SP4REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for answer set*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DSPGM   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSCUST01"; /* table view*/
    TA1REC.TA1TBLKE = SP4REC.SP4KEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0CS28 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0100  "; /* i/o mod name*/
    XSOPS02();
  end



   /* *************************************************************/
end // end OP0CS28

// get taken by service rep usrid
Function OP0CS29()



      /* *********************************************************/
      /* * this statement group retrives the service rep logon  **/
      /* * id and name for screen display.                      **/
      /* *********************************************************/


      /* verify that the service rep id exists*/

  KUYREC.KUYSVRID = OP1REC.OP1TBREP; /* load key*/
  call "IO0550" ("S ", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSVREP01"; /* table view*/
    TA1REC.TA1TBLKE = KUYREC.KUYREPCD; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0CS29 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0550  "; /* i/o mod name*/
    XSOPS02();
  end


      /* save fields*/

  OP0CM001.KUYREPNM = KUYREC.KUYREPNM; /* move rep name to map*/
  OP0CM001.XXXUSRID = KUYREC.XXXUSRID; /* save taken-by svc userid*/
  set OP0CM001.XXXUSRID normal;



   /* *************************************************************/
end // end OP0CS29

// edit order class vs ord type
Function OP0CS30()



      /* *********************************************************/
      /* * this statement group edits the order class field     **/
      /* * against the order type field.                        **/
      /* *********************************************************/



  if (OP1REC.XDVCD == "02") /* if international*/
    if (OP0CM001.XOBCD == "P1" /* and if using 'p1' order type*/
     && OP0CM001.XOCCD == "IN") /* and the order class is 'in'*/
      OPAREC.OPAERR = "Y"; /* set error flag*/
      OP0CW01.OP0CWOCF = "Y"; /* set error flag*/
      converseLib.validationFailed(023); /* order class is not valid for order type*/
      set OP0CM001.XOCCD cursor, modified, bold;
      return;
    end
  end

      /* validate order class against order type.*/
      /* both prop flags must be yes -or- both futures flag must*/
      /* be yes.*/

  if (OPAREC.XOCPROPF == "Y" /* both prop = yes - then ok*/
   && OPAREC.XOTPROPF == "Y")
    return;
  end

  if (OPAREC.XOCFUTRF == "Y" /* both futures = yes - then ok*/
   && OPAREC.XOTFUTRF == "Y")
    return;
  end

  OPAREC.OPAERR = "Y"; /* set error flag*/
  OP0CW01.OP0CWOCF = "Y"; /* set error flag*/
  if (OP0CW01.OP0CWCUF == "N") /* cust error flag off*/
    converseLib.validationFailed(023); /* order class is not valid for order type*/
    set OP0CM001.XOCCD cursor, modified, bold;
  else
    set OP0CM001.XOCCD modified, bold;
  end



   /* *************************************************************/
end // end OP0CS30

// edit need date/order lead time
Function OP0CS31()



      /* *********************************************************/
      /* * check if mail order cust. if so issue warning msg    **/
      /* * edit need date versus lead time, for this order type **/
      /* *********************************************************/


   /* check if customer is mailorder  if so issue warning msg*/

  KUPREC.KUCCOID = OP0CM001.OP0CMCO; /* load cust comp key*/
  KUPREC.KUMSTRID = OP0CM001.OP0CMST; /* cust store key*/
  KUPREC.XNXCD = KUNREC.XNXCD; /* cust dept*/
  KUPREC.XGPCD = KUNREC.XGPCD; /* gpccode*/

  call "IO0260" ("S ", SQLCA, KUPREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentnece*/
  else
    TA1REC.TA1DBASE = "DCUST   ";
    TA1REC.TA1TBLVU = "VCUGRP01";
    TA1REC.TA1TBLKE = KUPREC.KUPGRP;
    TA1REC.TA1LOCAT[3] = "OP0CS31 ";
    TA1REC.TA1LOCAT[4] = "IO0260  ";
    XSOPS02();
  end


  OPAREC.OPASUB1 = 1;

  if (OP0CW01.OP0CWMCF == "Y")
    /* next sentence*/
  else
    while (OPASUB1 < 11)
      if (KUPREC.XSGCD[OPASUB1] == "MO")
        OPAREC.OPAERR = "Y";
        converseLib.validationFailed(318);
        OP0CW01.OP0CWMCF = "Y";
        return;
      end
      OPAREC.OPASUB1 = OPAREC.OPASUB1 + 1;
    end
    OP0CW01.OP0CWMCF = "Y";
  end


      /* it at-once ord type, force needdate = today*/

  if (OP1REC.XOTCD in XOTTBL.XOTCD /* if valid order type*/
   && XOTTBL.XOTATONF[sysVar.arrayIndex] == "Y") /* and it's an at-once order*/
    OPAREC.OPAFMM = OPAREC.OPACMM;
                                   /* move today's date to need date*/
    OPAREC.OPAFDD = OPAREC.OPACDD;
    OPAREC.OPAFYY = OPAREC.OPACYY;
    OP1REC.OP1CUNDT = OPAREC.OPACDT;
    if (OP0CM001.OP0CMNDT != " "           /* if the date ne spaces*/
     && OP0CM001.OP0CMNDT != OPAREC.OPAFDT /* if the date ne today*/
     && OP0CM001.OP0CMNDT != "MMDDYY")     /* if the date ne mmddyy*/
      converseLib.validationFailed(386); /* warn them that we changed the date*/
      set OP0CM001.OP0CMNDT bold;
      OP0CM001.OP0CMNDT = OPAREC.OPAFDT; /* set the date to today*/
    else
      OP0CM001.OP0CMNDT = OPAREC.OPAFDT; /* set the date to today*/
    end
  end

   /* bypass the lead time check if the order is a divert*/

  if (OP0CW01.OP0CW-DIVERT-ORDER-FL == "N") /* order is not a divert*/
    set TA2REC empty;
    TA2REC.TA2DBDFN = OPAREC.OPACDT; /* current date ccyymmdd*/
    TA2REC.TA2DBDTN = OP1REC.OP1CUNDT; /* need date ccyymmdd*/
    TA2REC.TA2DTOPT = "DAYSDIFF";
    TA2REC.TA2RTNCD = 0;
    TA2REC.TA2GRTYP = "G";
    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end
    if (TA2REC.TA2RTNCD == 0)
      if (OP1REC.XOTCD in XOTTBL.XOTCD
       && TA2REC.TA2DBDDN >= XOTTBL.XOTLDAYS[sysVar.arrayIndex])
        /* next sentence*/
      else
        if (OP0CW01.OP0CWLDF == "Y")
          OP0CW01.OP0CWLDF = "N"; /* set edited flag*/
        else
          converseLib.validationFailed(51); /* warning - need date*/
          OPAREC.OPAERR = "Y"; /* set error flag*/
          OP0CW01.OP0CWLDF = "Y"; /* set edited flag*/
          set OP0CM001.OP0CMNDT cursor, normal;
        end
      end
    else
      converseLib.validationFailed(13); /* need date is not a valid date*/
      OPAREC.OPAERR = "Y";
      set OP0CM001.OP0CMNDT cursor, modified, bold;
    end
  end



   /* *************************************************/
   /* * if the need date has been modified, find the*/
   /* * production deadline. find out if today is*/
   /* * 30 days past the deadline. if it is , issue a*/
   /* * warning message to user.*/
   /* **************************************************/



  set TA1REC empty;
  set TA2REC empty;
  set OPJREC empty;
  set OPLREC empty;
  set SQLCA empty;

  if (OP1REC.XOTCD in XOTTBL.XOTCD              /* order type in table*/
   && XOTTBL.XOTFUTRF[sysVar.arrayIndex] == "Y" /* futures*/
   && OPWREC.OPWFUNC != "4")                    /* and not a draw*/
    OP0CW01.OP0CWPDF = "N"; /* init prod dealine found flag*/

    OPJREC.XOTCD = OP1REC.XOTCD; /* order type code*/
    OPLREC.OPLSOP = "SF"; /* selection option*/
    OPLREC.OPJCNDTB = OP1REC.OP1CUNDT; /* need date*/

    call "IO2560" (OPLREC, SQLCA, OPJREC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0) /* record found*/
      OP0CW01.OP0CWPDF = "Y"; /* deadline found*/
      if (OPAREC.OPACDT > OPJREC.OPJCUTDT) /* current date > prod d/l*/
        TA2REC.TA2DBDFN = OPJREC.OPJCUTDT; /* move d/l date*/
        TA2REC.TA2DBDTN = OPAREC.OPACDT; /* today's date*/
        TA2REC.TA2DTOPT = "DAYSDIFF";
        TA2REC.TA2GRTYP = "G";

        call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

        if (TA2REC.TA2RTNCD == 0)
          if (TA2REC.TA2DBDDN >= 30)
            if (OP0CW01.OP0CWPDO == "Y")
              OP0CW01.OP0CWPDO = "N";
            else
              converseLib.validationFailed(405); /* need date may be past deadline*/
              OP0CW01.OP0CWPDO = "Y"; /* display message 1 time*/
              set OP0CM001.OP0CMNDT cursor, normal;
            end
          end
        else
          TA1REC.TA1TYPE = "DB2 ";
          TA1REC.TA1PGMNM = "OP0C    ";
          TA1REC.TA1LOCAT[1] = "OP0CS31 ";
          TA1REC.TA1DBASE = "TA2REC  ";
          COMMAREA.CA-USER-WORKAREA-4K = " ";
          XSOPS02();
        end
      end
       /* current date less than cutoff date*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
        OP0CW01.OP0CWPDF = "N"; /* deadline record not found*/
        converseLib.validationFailed(404); /* record not found; can't add*/
        OPAREC.OPAERR = "Y";
        set OP0CM001.OP0CMNDT cursor, modified, bold;
        return;
      else
        if (SQLCA.VAGen_SQLCODE != 0) /* any other sql*/
          TA1REC.TA1TYPE = "DB2";
          TA1REC.TA1FUNC = "RETN";
          TA1REC.TA1PGMNM = "OP0C";
          TA1REC.TA1LOCAT[1] = "SF";
          TA1REC.TA1LOCAT[2] = "OP0CS31";
          TA1REC.TA1LOCAT[3] = "IO2560 ";
          TA1REC.TA1LOCAT[4] = " ";
          TA1REC.TA1LOCAT[4] = "OP0CM001";
          TA1REC.TA1DBASE = "DORDER.";
          TA1REC.TA1TBLVU = "VCUTOF01";
          XSOPS02();
        end
      end
    end
  end



   /* ********************end statement group*********************/
end // end OP0CS31

// edit terms based on needdate
Function OP0CS32()



   /* **********************************************************/
   /* get the appropriate profile code from order type profile*/
   /* table (DCUST.VCUXOP01) record VCUXOP01.*/
   /* Original logic replaced with profile lookup.*/
   /* *********************************************************/


  VCUXOP01.KUCCOID = KUCREC.KUCCOID;
  VCUXOP01.XGPCD = OP0CM001.XGPCD;
  VCUXOP01.XPCCD = OPWREC01.XPCCK;

  call "VCUXOP01" ("S ", SQLCA, VCUXOP01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    OP0CW01.XOPCD = VCUXOP01.XOPCD;
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      VCUXOP01.XPCCD = "  ";
      OP0CS33();
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OP0C";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "OP0CS32 ";
      TA1REC.TA1LOCAT[3] = "VCUXOP01";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "        ";
      TA1REC.TA1DBASE = "DCUST   ";
      TA1REC.TA1TBLVU = "VCUXOP01";
      TA1REC.TA1TBLKE = "VCUXOP01";
      try
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* on error clear ws*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      XSPF4();
      exit program;
    end
  end

  /*  */

   /* *********************************************************/
   /* if the profile code used above is equal to spaces,*/
   /* no further validation is necessary--any order type is*/
   /* valid.  if the profile code is not equal to spaces,*/
   /* validate the order type entered for the order and the*/
   /* profile found on the cmpny rec against the 'master'*/
   /* profile table (io2550).  can't use an order type that*/
   /* doesn't exist under the master table's profile id.*/
   /* *********************************************************/

  if (OP0CW01.XOPCD == " ")
    return;
  end


  OPKREC.XOPCD = OP0CW01.XOPCD;
  OPKREC.XOTCD = OP1REC.XOTCD;
  OPKREC.OPKOTEDT = OP1REC.OP1CUNDT;

  call "IO2550" ("SE", SQLCA, OPKREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    set OP0CM001.XOBCD initialAttributes;
    return;
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      OPAERR = "Y";
      set OP0CM001.XOBCD cursor, modified, bold;
      converseLib.validationFailed(239);
      return;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OP0C";
      TA1REC.TA1LOCAT[1] = "SE      ";
      TA1REC.TA1LOCAT[2] = "OP0CS32 ";
      TA1REC.TA1LOCAT[3] = "IO2550  ";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "        ";
      TA1REC.TA1DBASE = "DORDER  ";
      TA1REC.TA1TBLVU = "VOTVAL01";
      TA1REC.TA1TBLKE = "OPKREC  ";
      try
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* on error clear ws*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      XSPF4();
      exit program;
    end
  end




end // end OP0CS32

// second order type profile call
Function OP0CS33()

   /* *************************************************************/
   /* 2ND CALL OCCURS WHEN EQUIPMENT XPC CODE IS NOT FOUND*/
   /* *************************************************************/

  call "VCUXOP01" ("S ", SQLCA, VCUXOP01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +0)
    OP0CW01.XOPCD = VCUXOP01.XOPCD;
    return;
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      OP0CW01.XOPCD = "    ";
      return;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OP0C";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "OP0CS33 ";
      TA1REC.TA1LOCAT[3] = "VCUXOP01";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "        ";
      TA1REC.TA1DBASE = "DCUST   ";
      TA1REC.TA1TBLVU = "VCUXOP01";
      TA1REC.TA1TBLKE = "VCUXOP01";
      try
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* on error clear ws*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      XSPF4();
      exit program;
    end
  end
end // end OP0CS33

// get comp's gpc record
Function OP0CS3A()

   /* Load comp number as the key to the customer record.*/

  KUNREC.KUCCOID = OP0CM001.OP1CMPNB; /* Company*/
  KUNREC.KUMSTRID = 0; /* Store*/
  KUNREC.XNXCD = 0; /* Dept*/
  KUNREC.XGPCD = OP1REC.XGPCD; /* GPC*/


   /* Call to get a specific customer record.*/

  call "IO0280" ("S ", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};


   /* Abend if DB2 error occured.*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   ";
    TA1REC.TA1TBLVU = "VCUST001";
    OP0CW01.OP0CWFC1 = OP0CM001.OP1CMPNB; /* Format company*/
    OP0CW01.OP0CWFC2 = 0; /* Format store*/
    OP0CW01.OP0CWFC3 = 0; /* Format dept*/
    OP0CW01.OP0CWFC4 = OP1REC.XGPCD; /* Format GPC*/
    TA1REC.TA1TBLKE = OP0CW01.OP0CWFCU; /* Record key*/
    TA1REC.TA1LOCAT[2] = "OP0CS3A ";
    TA1REC.TA1LOCAT[3] = "IO0280  ";
    TA1REC.TA1LOCAT[4] = "S       ";
    XSOPS02();
  end
end // end OP0CS3A

// select special instructions
Function OP0CS40()



   /* *************************************************************/
   /* this statement group selects special instructions*/
   /* from dcust.vinst001.  if special instructions are present*/
   /* for this customer the xndtbl is checked for specific sales*/
   /* offices. they are identified by the xndinsofl = 'y'*/

   /* these special instructions are display only.*/
   /* ************************************************************/

  set KUQREC empty;

  set OP0CM001.OP0CMLN1 initialAttributes;
  OP0CM001.OP0CMLN1 = " ";
  set OP0CM001.OP0CMLN2 initialAttributes;
  OP0CM001.OP0CMLN2 = " ";
  set OP0CM001.OP0CMLN3 initialAttributes;
  OP0CM001.OP0CMLN3 = " ";
  set OP0CM001.OP0CMLN4 initialAttributes;
  OP0CM001.OP0CMLN4 = " ";
  set OP0CM001.OP0CMLN5 initialAttributes;
  OP0CM001.OP0CMLN5 = " ";

  OP0CW02.OP0CWSUB = 1;
  while (OP0CW02.OP0CWSUB <= 5)
    OP0CW02.OP0CWSDP[OP0CWSUB] = " "; /* dept si*/
    OP0CW02.OP0CWSSI[OP0CWSUB] = " "; /* spec ins*/
    OP0CW02.OP0CWSUB = OP0CW02.OP0CWSUB + 1;
  end

  KUQREC.KUCCOID = OP1REC.KUCCOID; /* company id*/
  KUQREC.KUMSTRID = OP1REC.KUMSTRID; /* store id*/
  KUQREC.XNXCD = OP1REC.XNXCD; /* nike dept code*/
  KUQREC.XGPCD = OP1REC.XGPCD; /* gpc*/


  call "IO0300" ("SS", SQLCA, KUQREC) {isNoRefresh = yes, isExternal = yes}; /* call dcust.vinst001*/

  if (SQLCA.VAGen_SQLCODE == 0)
    OP0CS43(); /* select next*/
  else
    TA1REC.TA1DBASE = "DCUST"; /* data base name*/
    TA1REC.TA1TBLVU = "VINST001"; /* table view*/
    OP0CW03.OP0CW3CO = KUQREC.KUCCOID; /* display company id*/
    OP0CW03.OP0CW3ST = KUQREC.KUMSTRID; /* display store id*/
    OP0CW03.OP0CW3NX = KUQREC.XNXCD; /* display nike dept code*/
    OP0CW03.OP0CW3GP = KUQREC.XGPCD; /* display gpc*/
    TA1REC.TA1TBLKE = OP0CW03.OP0CWKEY; /* table key*/
    TA1REC.TA1LOCAT[1] = "OP0CS40"; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0300"; /* i/o move name*/
    XSOPS02();
  end

  call "IO0300" ("CS", SQLCA, KUQREC) {isNoRefresh = yes, isExternal = yes}; /* close set*/
end // end OP0CS40

// call xndtbl (nike department)
Function OP0CS43()


   /* *************************************************************/
    /* this statement group loads the special information,*/
    /* if any, to op0cm001.*/
    /* note:  the users decide which sales offices will review*/
           /* special instruction.  xndtbl.xndsofl flag get*/
           /* turned on for  those specific offices.*/
   /* *************************************************************/

  OP0CW02.OP0CWSUB = 1;

  while (OP0CW02.OP0CWSUB <= 5
   && SQLCA.VAGen_SQLCODE != 100)
    call "IO0300" ("SN", SQLCA, KUQREC) {isNoRefresh = yes, isExternal = yes}; /* call dcust.vinst001*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (KUQREC.XNDCD in XNDTBL.XNDCD
       && XNDTBL.XNDSOFL[sysVar.arrayIndex] == "Y") /* sales office flag*/
        OP0CW02.OP0CWSDP[OP0CWSUB] = KUQREC.XNDCD; /* dept si*/
        OP0CW02.OP0CWSSI[OP0CWSUB] = KUQREC.KUQSINST; /* spec ins*/
        OP0CW02.OP0CWSUB = OP0CW02.OP0CWSUB + 1;
      end
    else
      if (SQLCA.VAGen_SQLCODE < 0)
        TA1REC.TA1DBASE = "DCUST"; /* data base name*/
        TA1REC.TA1TBLVU = "VINST001"; /* table view*/
        OP0CW03.OP0CW3CO = KUQREC.KUCCOID; /* display company id*/
        OP0CW03.OP0CW3ST = KUQREC.KUMSTRID; /* display store id*/
        OP0CW03.OP0CW3NX = KUQREC.XNXCD; /* display nike dept code*/
        OP0CW03.OP0CW3GP = KUQREC.XGPCD; /* display gpc*/
        TA1REC.TA1TBLKE = OP0CW03.OP0CWKEY; /* table key*/
        TA1REC.TA1LOCAT[1] = "OP0CS43"; /* statement group*/
        TA1REC.TA1LOCAT[4] = "IO0300"; /* i/o move name*/
        XSOPS02();
      end
    end
  end


  if (OP0CW02.OP0CWSID[1] > " ")
    OP0CM001.OP0CMLN1 = OP0CW02.OP0CWSID[1];
    OP0CW02.OP0CWSIF = "Y";
  else
    OP0CM001.OP0CMLN1 = " ";
    set OP0CM001.OP0CMLN1 skip, invisible;
  end

  if (OP0CW02.OP0CWSID[2] > " ")
    OP0CM001.OP0CMLN2 = OP0CW02.OP0CWSID[2];
    OP0CW02.OP0CWSIF = "Y";
  else
    OP0CM001.OP0CMLN2 = " ";
    set OP0CM001.OP0CMLN2 skip, invisible;
  end

  if (OP0CW02.OP0CWSID[3] > " ")
    OP0CM001.OP0CMLN3 = OP0CW02.OP0CWSID[3];
    OP0CW02.OP0CWSIF = "Y";
  else
    OP0CM001.OP0CMLN3 = " ";
    set OP0CM001.OP0CMLN3 skip, invisible;
  end

  if (OP0CW02.OP0CWSID[4] > " ")
    OP0CM001.OP0CMLN4 = OP0CW02.OP0CWSID[4];
    OP0CW02.OP0CWSIF = "Y";
  else
    OP0CM001.OP0CMLN4 = " ";
    set OP0CM001.OP0CMLN4 skip, invisible;
  end

  if (OP0CW02.OP0CWSID[5] > " ")
    OP0CM001.OP0CMLN5 = OP0CW02.OP0CWSID[5];
    OP0CW02.OP0CWSIF = "Y";
  else
    OP0CM001.OP0CMLN5 = " ";
    set OP0CM001.OP0CMLN5 skip, invisible;
  end



end // end OP0CS43

// set mdt's for modified fields
Function OP0CS59()



      /* set mdt's in fields for the case of invalid aid key*/
      /* this allows the user to press the correct aid key*/
      /* without having to re-enter the data.*/

  if (OP0CM002.OP1SHAID is modified) /* ship to addr id*/
    set OP0CM002.OP1SHAID modified;
  end

  if (OP0CM002.OP0CMSNM is modified) /* ship to name*/
    set OP0CM002.OP0CMSNM modified;
  end

  if (OP0CM002.OP0CMSA1 is modified) /* ship to addr line 1*/
    set OP0CM002.OP0CMSA1 modified;
  end

  if (OP0CM002.OP0CMSA2 is modified) /* ship to addr line 2*/
    set OP0CM002.OP0CMSA2 modified;
  end

  if (OP0CM002.TF1CARCD is modified) /* traffic carrier code*/
    set OP0CM002.TF1CARCD modified;
  end

  if (OP0CM002.OP0CMSA3 is modified) /* ship to addr line 3*/
    set OP0CM002.OP0CMSA3 modified;
  end

  if (OP0CM002.OP0CMSCT is modified) /* ship to city*/
    set OP0CM002.OP0CMSCT modified;
  end

  if (OP0CM002.OP0CMSST is modified) /* ship to state*/
    set OP0CM002.OP0CMSST modified;
  end

  if (OP0CM002.OP0CMSZP is modified) /* ship to zip*/
    set OP0CM002.OP0CMSZP modified;
  end

  if (OP0CM002.OP0CMSCN is modified) /* ship to country*/
    set OP0CM002.OP0CMSCN modified;
  end

  if (OP0CM002.OP1BLAID is modified) /* bill group id*/
    set OP0CM002.OP1BLAID modified;
  end

  if (OP0CM002.OP0CMBNM is modified) /* bill to name*/
    set OP0CM002.OP0CMBNM modified;
  end

  if (OP0CM002.OP0CMBA1 is modified) /* bill to addr line 1*/
    set OP0CM002.OP0CMBA1 modified;
  end

  if (OP0CM002.OP0CMBA2 is modified) /* bill to addr line 2*/
    set OP0CM002.OP0CMBA2 modified;
  end

  if (OP0CM002.OP0CMBA3 is modified) /* bill to addr line 3*/
    set OP0CM002.OP0CMBA3 modified;
  end

  if (OP0CM002.OP0CMBCT is modified) /* bill to city*/
    set OP0CM002.OP0CMBCT modified;
  end

  if (OP0CM002.OP0CMBST is modified) /* bill to state*/
    set OP0CM002.OP0CMBST modified;
  end

  if (OP0CM002.OP0CMBZP is modified) /* bill to zip*/
    set OP0CM002.OP0CMBZP modified;
  end

  if (OP0CM002.OP0CMBCN is modified) /* bill to country*/
    set OP0CM002.OP0CMBCN modified;
  end

  if (OP0CM002.OP1COGID is modified) /* cogs code*/
    set OP0CM002.OP1COGID modified;
  end



   /* *************************************************************/
end // end OP0CS59

// get format store name/addr
Function OP0CS60()



      /* *********************************************************/
      /* * this statement group get and formats store name/addr **/
      /* *********************************************************/


      /* get store record for customer*/

  KUMREC.KUCCOID = OP1REC.KUCCOID; /* load key - company*/
  KUMREC.KUMSTRID = OP1REC.KUMSTRID; /* load key - store*/
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/
      /* not found is error in this case as*/
      /* as it was previously found*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSTORE01"; /* table view*/
    OP0CW01.OP0CWCUC = KUMREC.KUCCOID;
    OP0CW01.OP0CWSTR = KUMREC.KUMSTRID;
    OP0CW01.OP0CWCID = OP1REC.OP1CUOID;
    TA1REC.TA1TBLKE = OP0CW01.OP0CWCUK;
    TA1REC.TA1LOCAT[3] = "OP0CS60 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0340  "; /* i/o mod name*/
    XSOPS02();
  end


      /* save information and show store self id*/

  OP0CM002.KUMSTAID = KUMREC.KUMSTAID; /* save store addr id*/
  OP0CM002.KUMSTRNM = KUMREC.KUMSTRNM; /* save cust store name*/
  if (KUMREC.KUMSLFID > " ") /* show store self id if present*/
    OP0CM002.KUMSLFID = KUMREC.KUMSLFID;
    set OP0CM002.OP0CMSIL skip;
  else
    set OP0CM002.OP0CMSIL skip, invisible;
  end


      /* if it is a draw order, warehouse defaults to bulk ord*/
      /* warehouse, else*/
      /* check to see if this customer has a default warehouse*/


  if (OPWREC.OPWFUNC == "4") /* draw from bulk ord*/
    OP1REC.XWHCD = OP0CW01.XWHCD; /* bulk ord warehouse*/
  else
    sysVar.arrayIndex = 1; /* init index*/
    while (sysVar.arrayIndex < 4) /* not end of array*/
      if (OP1REC.XGPCD == KUMREC.XGPCD[sysVar.arrayIndex]) /* if equal, then*/
        OP1REC.XWHCD = KUMREC.XWHCD[sysVar.arrayIndex];
                                   /* save default warehouse*/
        sysVar.arrayIndex = 9;
      else
        sysVar.arrayIndex = sysVar.arrayIndex + 1; /* increment index*/
      end
    end
  end

      /* if international and order class 'in' or 'as'*/
      /* or if a divert order -*/
      /* force direct ship code to '1' and*/
      /* force warehouse code to blank*/

  if (OP1REC.XDVCD == "02") /* international order*/
    if (OP1REC.XOCCD == "IN" /* international order class*/
     || OP1REC.XOCCD == "AS") /* international airborne order*/
      OP1REC.XDSCD = "1"; /* force direct ship code*/
      OP1REC.XWHCD = " "; /* force blank warehouse code*/
    end
  end

   /* ****************** divert order processing *********************/
   /* if the order is a divert*/
   /* force direct ship code to '1' and*/
   /* force warehouse code to blank*/

  if (CACLVL[5] == "Y"     /* has divert order authority*/
   && OP1REC.XDVCD == "02" /* international order*/
   && OP1REC.XOBCD == "F1") /* base ot futures*/
    OP1REC.XDSCD = "1"; /* force direct ship code to 1*/
    OP1REC.XWHCD = " "; /* force blank warehouse code*/
  end

   /* ************** end divert order processing *********************/


      /* access customer address table for store name/addr*/

  KULREC.KUCCOID = OP1REC.KUCCOID; /* load key - cust co*/
  KULREC.KULAAID = KUMREC.KUMSTAID; /* load key - store addr id*/
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/
      /* if not found, then error*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VADDR001"; /* table view*/
    TA1REC.TA1TBLKE = KULREC.KULGRP; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0CS60 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0170  "; /* i/o mod name*/
    XSOPS02();
  end


      /* format address on screen*/

      /* this code compresses the address lines*/
      /* (remove blank lines)*/

  OPAREC.OPASUB = 1; /* set addr index*/
  if (KULREC.XXX-ADDR1 > " ") /* address line 1*/
    OP0CM002.OP0CMCA[OPASUB] = KULREC.XXX-ADDR1;
    OPAREC.OPASUB = OPAREC.OPASUB + 1;
  end

  if (KULREC.XXX-ADDR2 > " ") /* address line 2*/
    OP0CM002.OP0CMCA[OPASUB] = KULREC.XXX-ADDR2;
    OPAREC.OPASUB = OPAREC.OPASUB + 1;
  end

  if (KULREC.XXX-ADDR3 > " ") /* address line 3*/
    OP0CM002.OP0CMCA[OPASUB] = KULREC.XXX-ADDR3;
    OPAREC.OPASUB = OPAREC.OPASUB + 1;
  end

  OP0CW01.OP0CWCAD = " "; /* clear work area*/
  OP0CW01.OP0CWCCT = KULREC.XXXCITY; /* format city,st,zip*/
  OP0CW01.OP0CWCST = KULREC.XSTCD;
  OP0CW01.OP0CWCZP = KULREC.XXXZIP;
  if (OP0CW01.OP0CWCAD > " ")
    OP0CM002.OP0CMCA[OPASUB] = OP0CW01.OP0CWCAD;
    OPAREC.OPASUB = OPAREC.OPASUB + 1;
  end

   /* CANADA 06/95*/

  if (KULREC.XCTCD > " " /* country code present?*/
   && KULREC.XCTCD != "USA ") /* and not equal u.s.a.*/
    OP0CW01.OP0CWCCN = " "; /* clear work area*/
    if (KULREC.XCTCD in XCTTBL.XCTCD)
      if (KULREC.XCTCD != "CANA") /* CANA country isn't canada*/
        OP0CW01.XCTCD = KULREC.XCTCD;
      end
      OP0CW01.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
      OP0CM002.OP0CMCA[OPASUB] = OP0CW01.OP0CWCCN;
    end
  end



   /* *************************************************************/
end // end OP0CS60

// format ship to name/addr
Function OP0CS62()



      /* *********************************************************/
      /* * this statement group formats ship to name/address    **/
      /* *********************************************************/
      /* * Modified for spain trademark project                 **/
      /* * sbhara 03/14/00                                      **/
      /* *********************************************************/


      /* get customer/gpc record*/

  KUNREC.KUCCOID = OP1REC.KUCCOID; /* load key - company*/
  KUNREC.KUMSTRID = OP1REC.KUMSTRID; /* load key - store*/
  KUNREC.XNXCD = OP1REC.XNXCD; /* load key - dept*/
  KUNREC.XGPCD = OP1REC.XGPCD; /* load key - gpc*/
  call "IO0280" ("S ", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inq*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VCUST001"; /* table view*/
    TA1REC.TA1TBLKE = KUNREC.KUNGRP; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0CS62 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0280  "; /* i/o mod name*/
    XSOPS02();
  end


      /* if not found then get first gpc rec for cust*/

  if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
    OP0CS13();
  end


      /* format dept self id*/

  if (KUNREC.KUJSLFID > " ") /* exists?*/
    OP0CM002.KUJSLFID = KUNREC.KUJSLFID; /* dept self id*/
    set OP0CM002.OP0CMDIL skip;
  else
    set OP0CM002.OP0CMDIL skip, invisible;
  end

      /* check if one time ship to needed*/
      /* kumrec was read in op0cs60 prior to calling op0cs62*/

  if (KUMREC.KUMSHAID == 0) /* one time ship to required*/
    converseLib.validationFailed(056); /* cust requires one time ship to*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0CM002.OP1SHAID cursor, modified, bold;
    return;
  end


      /* access customer address table for ship to name/addr*/

  KULREC.KUCCOID = OP1REC.KUCCOID; /* load key - cust co*/
  KULREC.KULAAID = KUMREC.KUMSHAID; /* load key - ship to addr id*/
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/
      /* if not found, then error*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VADDR001"; /* table view*/
    TA1REC.TA1TBLKE = KULREC.KULGRP; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0CS62 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0170  "; /* i/o mod name*/
    XSOPS02();
  end


      /* format name and save addr id*/

  OP0CM002.OP0CMSNM = OPWREC.KUMSTRNM; /* store name*/
  OP1REC.OP1SHAID = KUMREC.KUMSHAID; /* save addr id*/
  OP0CM002.OP1SHAID = KUMREC.KUMSHAID; /* move addr id*/


      /* format address on screen*/

  if (OP1REC.XNXCD == 0)
    OP0CM002.OP0CMSA1 = KULREC.XXX-ADDR1; /* addr line 1*/
  else
    KUJREC.KUCCOID = OP1REC.KUCCOID; /* load key - cust co*/
    KUJREC.XNXCD = OP1REC.XNXCD; /* load key - dept code*/
    call "IO0290" ("S ", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes}; /* get dept self id*/

    if (SQLCA.VAGen_SQLCODE == 0)
      OP0CW01.OP0CWLIT = "DEPT "; /* move lit to hold area*/
      OP0CW01.KUJSLFID = KUJREC.KUJSLFID; /* dept self id to hold*/
      OP0CM002.OP0CMSA1 = OP0CW01.OP0CWHD1; /* fmted dept to addr 1*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* dept self id not found*/
        OP0CM002.OP0CMSA1 = KULREC.XXX-ADDR1; /* addr line 1*/
      else
        TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
        TA1REC.TA1TBLVU = "VCUST001"; /* table view*/
         /* format the company id and dept code to make readable*/
        OP0CW01.OP0CWFD1 = KUJREC.KUCCOID; /* format cmpny id*/
        OP0CW01.OP0CWFD2 = " "; /* filler*/
        OP0CW01.OP0CWFD3 = KUJREC.XNXCD; /* format dept code*/
        TA1REC.TA1TBLKE = OP0CW01.OP0CWFLD; /* formatted key value*/
        TA1REC.TA1LOCAT[3] = "OP0CS62 "; /* statement group*/
        TA1REC.TA1LOCAT[4] = "IO0290  "; /* i/o mod name*/
        XSOPS02();
      end
    end
  end

  OP0CM002.OP0CMSA2 = KULREC.XXX-ADDR2; /* addr line 2*/
  OP0CM002.OP0CMSA3 = KULREC.XXX-ADDR3; /* addr line 3*/
  OP0CM002.OP0CMSCT = KULREC.XXXCITY; /* city*/
  OP0CM002.OP0CMSST = KULREC.XSTCD; /* state*/
  OP0CM002.OP0CMSZP = KULREC.XXXZIP; /* zip*/

       /* spain trademark project sbhara 03/14/00  changes begin*/
       /* country code will moved for all the countries*/
   /* MOVE ' ' TO OP0CM002.OP0CMSCN;    /* country code*/
   /* MOVE ' ' TO OP0CM002.OP0CMSCD;    /* country code desc*/
  if (KULREC.XCTCD > " "           /* country code present?*/
   && KULREC.XCTCD in XCTTBL.XCTCD /* correct country code?*/
   && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* ACTIVE??*/
    OP0CM002.OP0CMSCN = KULREC.XCTCD; /* country code*/
    OP0CM002.OP0CMSCD = XCTTBL.XCTDESC[sysVar.arrayIndex]; /* country code*/
  end
      /* spain trademark project sbhara 03/14/00  changes end*/

      /* disallow one-time ship-to's for certain account*/
      /* classes.  flag check in xautbl.  6-88 obecke*/

  if (KUCREC.XAUCD in XAUTBL.XAUCD
   && XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A"
   && XAUTBL.XAUA1SFL[sysVar.arrayIndex] == "N")
    set OP0CM002.OP0CMSAO skip;
    set OP0CM002.OP1SHAID skip;
    set OP0CM002.OP0CMSNM skip;
    set OP0CM002.OP0CMSA1 skip;
    set OP0CM002.OP0CMSA2 skip;
    set OP0CM002.OP0CMSA3 skip;
    set OP0CM002.OP0CMSCT skip;
    set OP0CM002.OP0CMSST skip;
    set OP0CM002.OP0CMSZP skip;
    set OP0CM002.OP0CMSCN skip;
    if (OPAREC.OPAERR != "Y")
      OPAREC.OPAERR = "X";
    end
  else
    set OP0CM002.OP0CMSAO initialAttributes;
    set OP0CM002.OP1SHAID initialAttributes;
    set OP0CM002.OP0CMSNM initialAttributes;
    set OP0CM002.OP0CMSA1 initialAttributes;
    set OP0CM002.OP0CMSA2 initialAttributes;
    set OP0CM002.OP0CMSA3 initialAttributes;
    set OP0CM002.OP0CMSCT initialAttributes;
    set OP0CM002.OP0CMSST initialAttributes;
    set OP0CM002.OP0CMSZP initialAttributes;
    set OP0CM002.OP0CMSCN initialAttributes;
  end


   /* *************************************************************/
end // end OP0CS62

// format ship to name/addr-revw
Function OP0CS63()



      /* *********************************************************/
      /* * this statement group formats ship to name/address    **/
      /* * for review mode.                                     **/
      /* *********************************************************/
      /* * Modified the country code handling for spain project **/
      /* * sbhara 03/14/00                                      **/
      /* *********************************************************/


      /* get customer/gpc record*/

  KUNREC.KUCCOID = OP1REC.KUCCOID; /* load key - company*/
  KUNREC.KUMSTRID = OP1REC.KUMSTRID; /* load key - store*/
  KUNREC.XNXCD = OP1REC.XNXCD; /* load key - dept*/
  KUNREC.XGPCD = OP1REC.XGPCD; /* load key - gpc*/
  call "IO0280" ("S ", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VCUST001"; /* table view*/
    TA1REC.TA1TBLKE = KUNREC.KUNGRP; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0CS63 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0280  "; /* i/o mod name*/
    XSOPS02();
  end


      /* if not found then get first gpc rec for cust*/

  if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
    OP0CS13();
  end


      /* format dept self id*/

  if (KUNREC.KUJSLFID > " ") /* exists?*/
    OP0CM002.KUJSLFID = KUNREC.KUJSLFID; /* dept self id*/
    set OP0CM002.OP0CMDIL skip;
  else
    set OP0CM002.OP0CMDIL skip, invisible;
  end


      /* check if one time ship to needed*/

  if (OP1REC.OP11TMSF == "Y") /* one time ship to required*/
    OP0CS68(); /* get one time ship to*/
    return;
  end


      /* check for ship to override*/

  if (OP1REC.OP1SGPAO == "Y")
    OP0CM002.OP0CMSAO = "*";
  end


      /* access customer address table for ship to name/addr*/

  KULREC.KUCCOID = OP1REC.KUCCOID; /* load key - cust co*/
  KULREC.KULAAID = OP1REC.OP1SHAID; /* load key - ship to addr id*/
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/
      /* not found is error*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VOADDR01"; /* table view*/
    TA1REC.TA1TBLKE = KULREC.KULGRP; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0CS63 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0170  "; /* i/o mod name*/
    XSOPS02();
  end


      /* format name*/

  OP0CM002.OP1SHAID = OP1REC.OP1SHAID; /* ship to addr id*/
  OP0CM002.OP0CMSNM = OPWREC.KUMSTRNM; /* store name*/


      /* format address on screen*/


  if (OP1REC.XNXCD == 0)
    OP0CM002.OP0CMSA1 = KULREC.XXX-ADDR1; /* addr line 1*/
  else
    KUJREC.KUCCOID = OP1REC.KUCCOID; /* load key - cust co*/
    KUJREC.XNXCD = OP1REC.XNXCD; /* load key - dept code*/
    call "IO0290" ("S ", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes}; /* get dept self id*/

    if (SQLCA.VAGen_SQLCODE == 0)
      OP0CW01.OP0CWLIT = "DEPT "; /* move lit to hold area*/
      OP0CW01.KUJSLFID = KUJREC.KUJSLFID; /* dept self id to hold*/
      OP0CM002.OP0CMSA1 = OP0CW01.OP0CWHD1; /* formatted dept to addr 1*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* dept self id not found*/
        OP0CM002.OP0CMSA1 = KULREC.XXX-ADDR1; /* addr line 1*/
      else
        TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
        TA1REC.TA1TBLVU = "VCUST001"; /* table view*/
         /* format the company id and dept code to make readable*/
        OP0CW01.OP0CWFD1 = KUJREC.KUCCOID; /* format cmpny id*/
        OP0CW01.OP0CWFD2 = " "; /* filler*/
        OP0CW01.OP0CWFD3 = KUJREC.XNXCD; /* format dept code*/
        TA1REC.TA1TBLKE = OP0CW01.OP0CWFLD; /* formatted key value*/
        TA1REC.TA1LOCAT[3] = "OP0CS63 "; /* statement group*/
        TA1REC.TA1LOCAT[4] = "IO0290  "; /* i/o mod name*/
        XSOPS02();
      end
    end
  end

  OP0CM002.OP0CMSA2 = KULREC.XXX-ADDR2; /* addr line 2*/
  OP0CM002.OP0CMSA3 = KULREC.XXX-ADDR3; /* addr line 3*/
  OP0CM002.OP0CMSCT = KULREC.XXXCITY; /* city*/
  OP0CM002.OP0CMSST = KULREC.XSTCD; /* state*/
  OP0CM002.OP0CMSZP = KULREC.XXXZIP; /* zip*/
   /* spain trademek project changes begin sbhara*/
   /* MOVE ' ' TO OP0CM002.OP0CMSCN;    /* country code*/
   /* MOVE ' ' TO OP0CM002.OP0CMSCD;    /* country code desc*/
  if (KULREC.XCTCD > " "           /* country code present?*/
   && KULREC.XCTCD in XCTTBL.XCTCD /* correct country code?*/
   && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* ACTIVE??*/
    OP0CM002.OP0CMSCN = KULREC.XCTCD; /* country code*/
    OP0CM002.OP0CMSCD = XCTTBL.XCTDESC[sysVar.arrayIndex];
  else /* country code desc*/
    converseLib.validationFailed(060); /* country code is not valid*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0CM002.OP0CMSCD = " "; /* country code desc*/
    set OP0CM002.OP0CMSCN cursor, modified, bold;
    return;
  end

   /* spain trademark project change end sbhara*/

      /* disallow one-time ship-to's on all account classes*/
      /* with code 26,27 or 82.  in review mode have to do*/
      /* kucrec call again because the recs are empty.*/

      /* get customer company record*/

  KUCREC.KUCCOID = OPAREC.OPACUCO; /* load key - company*/
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
    TA1REC.TA1TBLKE = KUCREC.KUCGRP; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0CS63 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0240  "; /* i/o mod name*/
    XSOPS02();
  end


      /* if not found, then customer is invalid*/

  if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
    converseLib.validationFailed(033); /* customer is not valid*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0CW01.OP0CWCUF = "Y"; /* set error flag*/
  end


  if (KUCREC.XAUCD in XAUTBL.XAUCD
   && XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A"
   && XAUTBL.XAUA1SFL[sysVar.arrayIndex] == "N")
    set OP0CM002.OP0CMSAO skip;
    set OP0CM002.OP1SHAID skip;
    set OP0CM002.OP0CMSNM skip;
    set OP0CM002.OP0CMSA1 skip;
    set OP0CM002.OP0CMSA2 skip;
    set OP0CM002.OP0CMSA3 skip;
    set OP0CM002.OP0CMSCT skip;
    set OP0CM002.OP0CMSST skip;
    set OP0CM002.OP0CMSZP skip;
    set OP0CM002.OP0CMSCN skip;
    if (OPAREC.OPAERR != "Y")
      OPAREC.OPAERR = "X";
    end
  else
    set OP0CM002.OP0CMSAO initialAttributes;
    set OP0CM002.OP1SHAID initialAttributes;
    set OP0CM002.OP0CMSNM initialAttributes;
    set OP0CM002.OP0CMSA1 initialAttributes;
    set OP0CM002.OP0CMSA2 initialAttributes;
    set OP0CM002.OP0CMSA3 initialAttributes;
    set OP0CM002.OP0CMSCT initialAttributes;
    set OP0CM002.OP0CMSST initialAttributes;
    set OP0CM002.OP0CMSZP initialAttributes;
    set OP0CM002.OP0CMSCN initialAttributes;
  end


   /* *************************************************************/
end // end OP0CS63

// format bill to name/addr
Function OP0CS64()



      /* *********************************************************/
      /* * this statement group formats bill to name/address    **/
      /* *********************************************************/
      /* * Modified for spain tardemark project                 **/
      /* * sbhara 03/14/00                                      **/
      /* *********************************************************/


      /* check order type one time bill flag*/

  if (OP1REC.XOTCD in XOTTBL.XOTCD /* valid code*/
   && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active code*/
    if (XOTTBL.XOTABILL[sysVar.arrayIndex] == "Y") /* bill to override ok?*/
      set OP0CM002.OP0CMBNM normal;
      set OP0CM002.OP0CMBA1 normal;
      set OP0CM002.OP0CMBA2 normal;
      set OP0CM002.OP0CMBA3 normal;
      set OP0CM002.OP0CMBCT normal;
      set OP0CM002.OP0CMBST normal;
      set OP0CM002.OP0CMBZP normal;
      set OP0CM002.OP0CMBCN normal;
    end
  end


      /* check cogs number*/

  if (OP1REC.XOTCD in XOTTBL.XOTCD /* valid code*/
   && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active code*/
    if (XOTTBL.XOTACOGS[sysVar.arrayIndex] == "Y") /* bill to override ok?*/
      set OP0CM002.OP0CMCGL skip;
      set OP0CM002.OP1COGID normal;
    else
      set OP0CM002.OP0CMCGL skip, invisible;
      set OP0CM002.OP1COGID skip, invisible;
    end
  end


      /* check if one time bill to required*/

  if (KUCREC.KUCBLAID == 0) /* one time bill to required*/
    converseLib.validationFailed(055); /* cust requires one-time bill-to*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0CM002.OP0CMBNM cursor, modified, bold;
    set OP0CM002.OP0CMBA1 modified, bold;
    set OP0CM002.OP0CMBA2 modified, bold;
    set OP0CM002.OP0CMBA3 modified, bold;
    set OP0CM002.OP0CMBCT modified, bold;
    set OP0CM002.OP0CMBST modified, bold;
    set OP0CM002.OP0CMBZP modified, bold;
    set OP0CM002.OP0CMBCN modified, bold;
    return; /* get out*/
  end



      /* save blgrp id*/

  OP1REC.OP1BLAID = KUCREC.KUCBLAID; /* save blgrp addr*/


      /* access customer address table for ship to name/addr*/

  KULREC.KULAAID = KUCREC.KUCBLAID; /* load key - bill to addr id*/
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/
      /* if not found, then error*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VADDR001"; /* table view*/
    TA1REC.TA1TBLKE = KULREC.KULGRP; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0CS64 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0170  "; /* i/o mod name*/
    XSOPS02();
  end


      /* format name*/

  OP0CM002.KUCBLAID = KUCREC.KUCBLAID; /* bill to addr id*/
  OP0CM002.OP0CMBNM = OPWREC.KUMSTRNM; /* store name*/


      /* format address on screen*/

  OP0CM002.OP0CMBA1 = KULREC.XXX-ADDR1; /* addr line 1*/
  OP0CM002.OP0CMBA2 = KULREC.XXX-ADDR2; /* addr line 2*/
  OP0CM002.OP0CMBA3 = KULREC.XXX-ADDR3; /* addr line 2*/
  OP0CM002.OP0CMBCT = KULREC.XXXCITY; /* city*/
  OP0CM002.OP0CMBST = KULREC.XSTCD; /* state*/
  OP0CM002.OP0CMBZP = KULREC.XXXZIP; /* zip*/

       /* spain trademark project sbhara 03/14/00  changes begin*/
   /* MOVE ' ' TO OP0CM002.OP0CMBCN;    /* country code*/
   /* MOVE ' ' TO OP0CM002.OP0CMBCD;    /* country code desc*/
  if (KULREC.XCTCD > " "           /* country code present?*/
   && KULREC.XCTCD in XCTTBL.XCTCD /* valid country code*/
   && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* ACTIVE??*/
    /* AND KULREC.XCTCD NE 'USA ';     /* and not equal u.s.a.*/
    OP0CM002.OP0CMBCN = KULREC.XCTCD; /* country code*/
    /* IF KULREC.XCTCD IN XCTTBL.XCTCD;*/
    OP0CM002.OP0CMBCD = XCTTBL.XCTDESC[sysVar.arrayIndex];
                                   /* country code desc*/
  end
   /* END;*/



       /* spain trademark project sbhara 03/14/00  changes END*/
   /* *********************************************************************/
end // end OP0CS64

// format bill to name/addr-rev
Function OP0CS65()



      /* *********************************************************/
      /* * this statement group formats bill to name/address    **/
      /* * for review mode.                                     **/
      /* *********************************************************/
      /* * Modified for the Spain tardemark project             **/
      /* * sbhara 03/14/00*/
      /* *********************************************************/

  OP0CM002.OP1BLAID = OP1REC.OP1BLAID; /* blgrp id*/
  OP0CM002.KUCBLAID = KUCREC.KUCBLAID; /* blgrp addr id*/

      /* check order type one time bill flag*/

  if (OP1REC.XOTCD in XOTTBL.XOTCD /* valid code*/
   && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active code*/
    if (XOTTBL.XOTABILL[sysVar.arrayIndex] == "Y") /* bill to override ok?*/
      set OP0CM002.OP0CMBNM normal;
      set OP0CM002.OP0CMBA1 normal;
      set OP0CM002.OP0CMBA2 normal;
      set OP0CM002.OP0CMBA3 normal;
      set OP0CM002.OP0CMBCT normal;
      set OP0CM002.OP0CMBST normal;
      set OP0CM002.OP0CMBZP normal;
      set OP0CM002.OP0CMBCN normal;
    end
  end


      /* check cogs number*/

  set OP0CM002.OP0CMCGL skip, invisible;
  set OP0CM002.OP1COGID skip, invisible;
  if (OP1REC.XOTCD in XOTTBL.XOTCD /* valid code*/
   && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active code*/
    if (XOTTBL.XOTACOGS[sysVar.arrayIndex] == "Y") /* cogs entry ok?*/
      set OP0CM002.OP0CMCGL skip;
      set OP0CM002.OP1COGID normal;
      if (OP1REC.OP1COGID > 0) /* cogs code exist*/
        OP0CM002.OP1COGID = OP1REC.OP1COGID; /* move cogs code*/
      end
    end
  end


      /* check if one time bill to needed*/

  if (OP1REC.OP11TMBF == "Y") /* one time bill to?*/
    OP0CS69(); /* get one time bill to*/
    return; /* get out*/
  end


      /* access customer address table for bill to name/addr*/

  KULREC.KUCCOID = OP1REC.KUCCOID; /* load key - cust co*/
  KULREC.KULAAID = OP1REC.OP1BLAID; /* load key - bill to addr id*/
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/
      /* not found is error*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VADDR001"; /* table view*/
    TA1REC.TA1TBLKE = KULREC.KULGRP; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0CS65 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0170  "; /* i/o mod name*/
    XSOPS02();
  end


      /* format name*/

  OP0CM002.OP1BLAID = OP1REC.OP1BLAID; /* blgrp addr id*/
  OP0CM002.KUCBLAID = KUCREC.KUCBLAID; /* blgrp addr id*/
  OP0CM002.OP0CMBNM = OPWREC.KUMSTRNM; /* store name*/


      /* format address on screen*/

  OP0CM002.OP0CMBA1 = KULREC.XXX-ADDR1; /* addr line 1*/
  OP0CM002.OP0CMBA2 = KULREC.XXX-ADDR2; /* addr line 2*/
  OP0CM002.OP0CMBA3 = KULREC.XXX-ADDR3; /* addr line 2*/
  OP0CM002.OP0CMBCT = KULREC.XXXCITY; /* city*/
  OP0CM002.OP0CMBST = KULREC.XSTCD; /* state*/
  OP0CM002.OP0CMBZP = KULREC.XXXZIP; /* zip*/
       /* spain trademark project sbhara 03/14/00  changes begin*/
   /* MOVE ' ' TO OP0CM002.OP0CMBCN;    /* country code*/
   /* MOVE ' ' TO OP0CM002.OP0CMBCD;    /* country code desc*/
  if (KULREC.XCTCD > " "           /* country code present?*/
   && KULREC.XCTCD in XCTTBL.XCTCD /* correct country code?*/
   && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* ACTIVE?*/
    /* AND KULREC.XCTCD NE 'USA ';     /* and not equal u.s.a.*/
    OP0CM002.OP0CMBCN = KULREC.XCTCD; /* country code*/
    OP0CM002.OP0CMBCD = XCTTBL.XCTDESC[sysVar.arrayIndex];
                                   /* country code desc*/
  end


       /* spain trademark project sbhara 03/14/00  changes end*/
   /* *************************************************************/
end // end OP0CS65

// format 1 time shp to name/addr
Function OP0CS68()



      /* *********************************************************/
      /* * this retrieves one ship to name/address from the     **/
      /* * orders address table.                                **/
      /* *********************************************************/
      /* *Modified for the spain trademark project              **/
      /* *sbhara 03/14/00                                       **/
      /* *********************************************************/


      /* get one time ship to record*/

  OP5REC.OP1PARTN = OP1REC.OP1PARTN; /* load key - partition*/
  OP5REC.OP1CUOID = OP1REC.OP1CUOID; /* load key - cust order*/
  OP5REC.OP1NORID = 0; /* load key - nike order*/
  OP5REC.OP5BILIN = "N"; /* load key - bill ind*/
  OP5REC.OP5SHPIN = "Y"; /* load key - ship ind*/
  call "IO0460" ("S ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/
      /* not found is error*/
      /* as record was previously added*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VOADDR01"; /* table view*/
    TA1REC.TA1TBLKE = OP5REC.OP5KEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0CS68 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0460  "; /* i/o mod name*/
    XSOPS02();
  end


      /* format address on screen*/

  OP0CW01.OP0CW1SA = "C"; /* set change action*/
  OP0CW01.OP0CWOSR = OP5REC.OP5GROUP; /* save rec*/
  OP0CM002.OP0CMSNM = OP5REC.OP5ALTNM; /* name*/
  OP0CM002.OP0CMSA1 = OP5REC.XXXADDR[1]; /* addr line 1*/
  OP0CM002.OP0CMSA2 = OP5REC.XXXADDR[2]; /* addr line 2*/
  OP0CM002.OP0CMSA3 = OP5REC.XXXADDR[3]; /* addr line 2*/
  OP0CM002.OP0CMSCT = OP5REC.XXXCITY; /* city*/
  OP0CM002.OP0CMSST = OP5REC.XSTCD; /* state*/
  OP0CM002.OP0CMSZP = OP5REC.XXXZIP; /* zip*/
   /* spain trademark project changes begin-sbhara*/
  if (OP5REC.XCTCD > " "           /* country code present?*/
   && OP5REC.XCTCD in XCTTBL.XCTCD /* exists in corp table*/
   && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* ACTIVE?*/
    OP0CM002.OP0CMSCN = OP5REC.XCTCD; /* country*/
    OP0CM002.OP0CMSCD = XCTTBL.XCTDESC[sysVar.arrayIndex];
                                   /* country code desc*/
  else
    converseLib.validationFailed(060); /* country code is not valid*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0CM002.OP0CMSCD = " "; /* country code desc*/
    set OP0CM002.OP0CMSCN cursor, modified, bold;
    return;
  end
   /* spain trademark project changes end  -sbhara*/


   /* *************************************************************/
end // end OP0CS68

// format 1 time bil to name/addr
Function OP0CS69()



      /* *********************************************************/
      /* * this retrieves one bill to name/address from the     **/
      /* * orders address table.                                **/
      /* *********************************************************/
      /* * Modified for the spain trademark project             **/
      /* * sbhara 03/14/00                                      **/
      /* *********************************************************/


      /* get one time bill to record*/

  OP5REC.OP1PARTN = OP1REC.OP1PARTN; /* load key - partition*/
  OP5REC.OP1CUOID = OP1REC.OP1CUOID; /* load key - cust order*/
  OP5REC.OP1NORID = 0; /* load key - nike order*/
  OP5REC.OP5BILIN = "Y"; /* load key - bill ind*/
  OP5REC.OP5SHPIN = "N"; /* load key - ship ind*/
  call "IO0460" ("S ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/
      /* not found is error*/
      /* as it was previously added*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VOADDR01"; /* table view*/
    TA1REC.TA1TBLKE = OP5REC.OP5KEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0CS69 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0460  "; /* i/o mod name*/
    XSOPS02();
  end


      /* format address on screen*/

  OP0CW01.OP0CW1BA = "C"; /* set change action*/
  OP0CW01.OP0CWOBR = OP5REC.OP5GROUP; /* save rec*/
  OP0CM002.OP0CMBNM = OP5REC.OP5ALTNM; /* name*/
  OP0CM002.OP0CMBA1 = OP5REC.XXXADDR[1]; /* addr line 1*/
  OP0CM002.OP0CMBA2 = OP5REC.XXXADDR[2]; /* addr line 2*/
  OP0CM002.OP0CMBA3 = OP5REC.XXXADDR[3]; /* addr line 2*/
  OP0CM002.OP0CMBCT = OP5REC.XXXCITY; /* city*/
  OP0CM002.OP0CMBST = OP5REC.XSTCD; /* state*/
  OP0CM002.OP0CMBZP = OP5REC.XXXZIP; /* zip*/
       /* spain trademark project sbhara 03/14/00  changes begin*/
  if (OP5REC.XCTCD > " "           /* country code present?*/
   && OP5REC.XCTCD in XCTTBL.XCTCD /* country code*/
   && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* ACTIVE?*/
    /* AND OP5REC.XCTCD NE 'USA ';     /* and not equal u.s.a.*/
    OP0CM002.OP0CMBCN = OP5REC.XCTCD; /* country*/
    OP0CM002.OP0CMBCD = XCTTBL.XCTDESC[sysVar.arrayIndex];
                                   /* country code desc*/
  end


       /* spain trademark project sbhara 03/14/00  changes end*/
   /* *************************************************************/
end // end OP0CS69

// edit control processing
Function OP0CS70()



      /* *********************************************************/
      /* * this statement group controls the field editing      **/
      /* * for the customer addresses.                          **/
      /* *                                                      **/
      /* * the fields are edited in reverse order so that the   **/
      /* * the cursor and error message will be related to the  **/
      /* * top most error.  any errors below the top most most  **/
      /* * error will still be highlighted.                     **/
      /* *********************************************************/


  TA1REC.TA1LOCAT[2] = "OP0CS70 "; /* set statement group*/


      /* edit/save cogs code*/

  if (OP0CM002.OP1COGID is modified)
    OP0CS71(); /* edit cogs code*/
  end


      /* edit/save bill to*/

  if (OP0CM002.OP0CMBNM is modified
   || OP0CM002.OP0CMBA1 is modified
   || OP0CM002.OP0CMBA2 is modified
   || OP0CM002.OP0CMBA3 is modified
   || OP0CM002.OP0CMBCT is modified
   || OP0CM002.OP0CMBST is modified
   || OP0CM002.OP0CMBZP is modified
   || OP0CM002.OP0CMBCN is modified)
    OP0CS72(); /* edit bill to*/
  end


  if (OP0CM002.TF1CARCD is modified)
    OP0CS77(); /* edit carrier code*/
  end


      /* edit/save ship to*/

  if (OP0CM002.OP1SHAID is modified
   || OP0CM002.OP0CMSNM is modified
   || OP0CM002.OP0CMSA1 is modified
   || OP0CM002.OP0CMSA2 is modified
   || OP0CM002.OP0CMSA3 is modified
   || OP0CM002.OP0CMSCT is modified
   || OP0CM002.OP0CMSST is modified
   || OP0CM002.OP0CMSZP is modified
   || OP0CM002.OP0CMSCN is modified)
    OP0CS73(); /* edit ship to*/
  end



   /* *************************************************************/
end // end OP0CS70

// edit/save cogs code
Function OP0CS71()



      /* *********************************************************/
      /* * this statement group edits the cogs code field.      **/
      /* *********************************************************/


      /* accept null cogs code*/

  if (OP0CM002.OP1COGID == 0) /* null code?*/
    OP1REC.OP1COGID = 0; /* clear code*/
    set OP0CM002.OP1COGID normal;
    return;
  end


      /* validate cogs code*/

    /* first save the company record for further editing*/

  OP0CW01.KUCGRP = KUCREC.KUCGRP;
  OP0CW02.OP0CWCGS = "N"; /* set cogs error flag to no*/

  KUCREC.KUCCOID = OP0CM002.OP1COGID; /* use cogs cd to get company*/

      /* Get a specific company record.*/

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

      /* Abend if a DB2 error occured.*/

  if (SQLCA.VAGen_SQLCODE == 0)

      /* verify the acct class cd as follows:*/
      /* a) company must be active*/
      /* b) code must exist in xautbl*/
      /* c) code must be either '05' (promo misc)*/
                             /* '06' (in house)*/

    sysVar.arrayIndex = 1; /* initialize table index*/
    if (KUCREC.XXXSTAT == "A"
     && KUCREC.XAUCD in XAUTBL.XAUCD from sysVar.arrayIndex)
      if (XAUTBL.XATCD[sysVar.arrayIndex] == "05"
       || XAUTBL.XATCD[sysVar.arrayIndex] == "06")
        OP1REC.OP1COGID = OP0CM002.OP1COGID; /* save cogs code*/
        set OP0CM002.OP1COGID normal;
      else
        OP0CW02.OP0CWCGS = "Y"; /* set invalid cogs flag on*/
      end
    else
      OP0CW02.OP0CWCGS = "Y"; /* set invalid cogs flag on*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OP0CW02.OP0CWCGS = "Y"; /* set invalid cogs flag on*/
    else
      TA1REC.TA1DBASE = "DCUST   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCMPNY01"; /* Table view*/
      TA1REC.TA1TBLKE = OP0CM002.OP1COGID; /* Key value*/
      TA1REC.TA1LOCAT[2] = "OP0CS71 "; /* Statement group*/
      TA1REC.TA1LOCAT[3] = "IO0240  "; /* I/O mod name*/
      TA1REC.TA1LOCAT[4] = "S       "; /* Requested action*/
      XSOPS02(); /* Abend routine*/
    end
  end

  if (OP0CW02.OP0CWCGS == "Y") /* invalid cogs code*/
    converseLib.validationFailed(058); /* cogs number is not valid*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0CM002.OP1COGID cursor, modified, bold;
  end

  KUCREC.KUCGRP = OP0CW01.KUCGRP; /* replace the company record*/

end // end OP0CS71

// edit/save bill to name/addr
Function OP0CS72()



      /* *********************************************************/
      /* * this statement group edits the bill to name/addr.    **/
      /* *********************************************************/
      /* * modified for spain tardemark project                 **/
      /* * sbhara 03/14/00                                      **/
      /* *********************************************************/


      /* validate required entries*/


      /* set default country code if null*/
       /* spain trademark project sbhara 03/14/00  changes begin*/
   /* IF OP0CM002.OP0CMBCN EQ ' '      /* null?*/
   /* OR OP0CM002.OP0CMBCN EQ 'USA'; /* null?*/
   /* MOVE 'USA' TO OP0CM002.OP0CMBCN;*/
   /* END;*/


      /* edit country code*/

  if (OP0CM002.OP0CMBCN in XCTTBL.XCTCD /* valid code*/
   && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* ACTIVE?*/
    /* IF OP0CM002.OP0CMBCN NE 'USA';*/
    OP0CM002.OP0CMBCD = XCTTBL.XCTDESC[sysVar.arrayIndex]; /* cntry cd desc*/
    /* ELSE;*/
    /* MOVE ' ' TO OP0CM002.OP0CMBCD;/* cntry cd desc*/
    /* END;*/
  else
    converseLib.validationFailed(060); /* country code is not valid*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0CW01.OP0CWOBF = "Y"; /* set error flag*/
    OP0CM002.OP0CMBCD = " "; /* cntry cd desc*/
    set OP0CM002.OP0CMBCN cursor, modified, bold;
    return; /* rtn don't go further*/
  end
       /* spain trademark project sbhara 03/14/00  changesend*/
      /* if usa then zip is required*/

  if (OP0CM002.OP0CMBCN == "USA")
    if (OP0CM002.OP0CMBZP <= "00000     " /* zip*/
     || OP0CM002.OP0CMBZP <= "000000    " /* zip*/
     || OP0CM002.OP0CMBZP <= "0000000   " /* zip*/
     || OP0CM002.OP0CMBZP <= "00000000  " /* zip*/
     || OP0CM002.OP0CMBZP <= "000000000 " /* zip*/
     || OP0CM002.OP0CMBZP <= "0000000000") /* zip*/
      converseLib.validationFailed(063); /* bill to address is not valid*/
      OPAREC.OPAERR = "Y"; /* set error flag*/
      OP0CW01.OP0CWOBF = "Y"; /* set error flag*/
      set OP0CM002.OP0CMBZP cursor, modified, bold;
    end
  end


    /* CANA 06/04*/

      /* if Canada then zip is required*/

  if (OP0CM002.OP0CMBCN == "CANA"
   && OP1REC.XDZ-DATA-DIST-CD != "DS") /* don't edit Canadian Intl orders*/
    if (OP0CM002.OP0CMBZP <= "          ") /* CANA*/
      converseLib.validationFailed(063); /* bill to address is not valid*/
      OPAREC.OPAERR = "Y"; /* set error flag*/
      OP0CW01.OP0CWOBF = "Y"; /* set error flag*/
      set OP0CM002.OP0CMBZP cursor, modified, bold;
    end
  end

    /* CANA 06/04*/

    /* Hardcoded Canadian provinces should be removed once country code is*/
    /* added to the state table. For now, only Canadian addresses are*/
    /* edited to make sure only a Canadian province has been entered. U.S.*/
    /* addresses are not edited to make sure only a U.S. state is entered*/
    /* - this would require hardcoding the U.S. states.*/

    /* edit state code if usa or canada*/
   /* cana state code 'qc' added 03/29/00*/
  if (OP0CM002.OP0CMBCN == "USA"   
   || (OP0CM002.OP0CMBCN == "CANA" /* CANA*/
   && OP1REC.XDZ-DATA-DIST-CD != "DS")) /* don't edit Canadian Intl order*/
    if (OP0CM002.OP0CMBST in XSTTBL.XSTCD /* valid code*/
     && XSTTBL.XXXSTAT == "A")            /* active status*/
      if (OP0CM002.OP0CMBCN == "CANA") /* CANA check canadian provinces*/
        if (OP0CM002.OP0CMBST == "SK"
         || OP0CM002.OP0CMBST == "PQ"
         || OP0CM002.OP0CMBST == "PE"
         || OP0CM002.OP0CMBST == "ON"
         || OP0CM002.OP0CMBST == "NT"
         || OP0CM002.OP0CMBST == "NS"
         || OP0CM002.OP0CMBST == "NF"
         || OP0CM002.OP0CMBST == "NB"
         || OP0CM002.OP0CMBST == "MB"
         || OP0CM002.OP0CMBST == "BC"
         || OP0CM002.OP0CMBST == "AB"
         || OP0CM002.OP0CMBST == "YT"
        ) /* next sentence*/
        else
          converseLib.validationFailed(902); /* prov code is not valid*/
          OPAREC.OPAERR = "Y"; /* set error flag*/
          OP0CW01.OP0CWOBF = "Y"; /* set error flag*/
          set OP0CM002.OP0CMBST cursor, modified, bold;
        end
      else
        /* next sentence*/
      end
    else
      if (OP0CM002.OP0CMBCN == "USA") /* CANA for usa address*/
        converseLib.validationFailed(059); /* state code is not valid*/
        OPAREC.OPAERR = "Y"; /* set error flag*/
        OP0CW01.OP0CWOBF = "Y"; /* set error flag*/
        set OP0CM002.OP0CMBST cursor, modified, bold;
      else
        converseLib.validationFailed(902); /* CANA prov code is not valid*/
        OPAREC.OPAERR = "Y"; /* set error flag*/
        OP0CW01.OP0CWOBF = "Y"; /* set error flag*/
        set OP0CM002.OP0CMBST cursor, modified, bold;
      end
    end
  end


      /* city is required*/

  if (OP0CM002.OP0CMBCT == " ")
    converseLib.validationFailed(063); /* bill to address is not valid*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0CW01.OP0CWOBF = "Y"; /* set error flag*/
    set OP0CM002.OP0CMBCT cursor, modified, bold;
  end


      /* at least one address line is required*/

  if (OP0CM002.OP0CMBA1 == " " /* null?*/
   && OP0CM002.OP0CMBA2 == " " /* null?*/
   && OP0CM002.OP0CMBA3 == " ") /* null?*/
    converseLib.validationFailed(063); /* bill to address is not valid*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0CW01.OP0CWOBF = "Y"; /* set error flag*/
    set OP0CM002.OP0CMBA1 cursor, modified, bold;
    set OP0CM002.OP0CMBA2 modified, bold;
    set OP0CM002.OP0CMBA3 modified, bold;
  end


      /* name is required*/

  if (OP0CM002.OP0CMBNM == " ") /* null?*/
    converseLib.validationFailed(063); /* bill to address is not valid*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0CW01.OP0CWOBF = "Y"; /* set error flag*/
    set OP0CM002.OP0CMBNM cursor, modified, bold;
  end


     /* get out if error*/
       /* spain trademark project sbhara 03/14/00  changes begin*/
  if (OP0CW01.OP0CWOBF == "Y") /* if error, get out*/
    /* IF OP0CM002.OP0CMBCN EQ 'USA'; /* if usa, then*/
    /* MOVE ' ' TO OP0CM002.OP0CMBCN;/* clear country code*/
    /* MOVE ' ' TO OP0CM002.OP0CMBCD;/* clear country code desc*/
    /* EZERTN;                      /* get out*/
    /* ELSE;*/
    return; /* get out*/
  end

       /* spain trademark project sbhara 03/14/00  changes end*/
    /* set flags and format addr record*/

  OP5REC.OP5GROUP = OP0CW01.OP0CWOBR; /* restore record*/
  OP1REC.OP11TMBF = "Y"; /* one time bill*/
  OP0CM002.KUCBLAID = 0; /* no bill grp addr id*/
  OP5REC.OP5BILIN = "Y"; /* addr bill ind*/
  OP5REC.OP5SHPIN = "N"; /* addr ship ind*/
  OP5REC.KUCCOID = OP1REC.KUCCOID; /* company id*/
  OP5REC.KUMSTRID = OP1REC.KUMSTRID; /* store id*/
  OP5REC.XNXCD = OP1REC.XNXCD; /* department id*/
  OP5REC.XGPCD = OP1REC.XGPCD; /* gpc code*/
  OP1REC.OP1BLAID = OP0CM002.OP1BLAID; /* bill group id*/
  OP5REC.OP5ALTNM = OP0CM002.OP0CMBNM; /* bill to name*/
  OP5REC.XXXADDR[1] = OP0CM002.OP0CMBA1; /* bill to addr 1*/
  OP5REC.XXXADDR[2] = OP0CM002.OP0CMBA2; /* bill to addr 2*/
  OP5REC.XXXADDR[3] = OP0CM002.OP0CMBA3; /* bill to addr 3*/
  OP5REC.XXXCITY = OP0CM002.OP0CMBCT; /* bill to city*/
  OP5REC.XSTCD = OP0CM002.OP0CMBST; /* bill to state*/
  OP5REC.XXXZIP = OP0CM002.OP0CMBZP; /* bill to zip*/
  OP5REC.XCTCD = OP0CM002.OP0CMBCN; /* bill to country*/
  OP0CW01.OP0CWOBR = OP5REC.OP5GROUP; /* save one time bill addr rec*/
  set OP0CM002.OP0CMBNM normal;
  set OP0CM002.OP0CMBA1 normal;
  set OP0CM002.OP0CMBA2 normal;
  set OP0CM002.OP0CMBA3 normal;
  set OP0CM002.OP0CMBCT normal;
  set OP0CM002.OP0CMBST normal;
  set OP0CM002.OP0CMBZP normal;
  set OP0CM002.OP0CMBCN normal;


      /* set action flag - ' ' - 'A'*/
                        /* 'A' - 'A'*/
                        /* 'C' - 'C'*/
                        /* 'D' - 'C'*/

  OP0CW01.OP0CWUBF = "Y"; /* update one time bill*/
  if (OP0CW01.OP0CW1BA == " " /* null*/
   || OP0CW01.OP0CW1BA == "A") /* add*/
    OP0CW01.OP0CW1BA = "A"; /* one time bill action (add)*/
  else
    OP0CW01.OP0CW1BA = "C"; /* one time bill action (chg)*/
  end


    /* clear country code in map if usa*/
       /* spain trademark project sbhara 03/14/00  changes begin*/
   /* IF OP0CM002.OP0CMBCN EQ 'USA';*/
   /* MOVE ' ' TO OP0CM002.OP0CMBCN; /* clear country code*/
   /* MOVE ' ' TO OP0CM002.OP0CMBCD; /* clear country code desc*/
   /* END;*/

       /* spain trademark project sbhara 03/14/00  changes begin*/

   /* *************************************************************/
end // end OP0CS72

// edit ship to addr txt modified
Function OP0CS73()



      /* *********************************************************/
      /* * this statement group controls the field editing      **/
      /* * for the ship to address and id.                      **/
      /* *********************************************************/


  TA1REC.TA1LOCAT[2] = "OP0CS73 "; /* set statement group*/


      /* check if ship addr id and ship addr text modified*/

  if (OP0CM002.OP1SHAID is modified
   && OP0CM002.OP1SHAID > 0)
    OP0CS74(); /* edit for addr text modified*/
    if (OPAREC.OPAERR == "Y")
      return;
    else
      OP0CS76(); /* edit ship to addr id change*/
    end
  else
    OP0CS75(); /* process addr text change*/
  end



   /* *************************************************************/
end // end OP0CS73

// edit ship to addr overrid
Function OP0CS74()



      /* *********************************************************/
      /* * this statement group edits for the condition of      **/
      /* * the ship to addr id modified and addr text modified  **/
      /* *********************************************************/



      /* check if addr id and addr text modified*/

  if (OP0CM002.OP0CMSNM is modified)
    if (OP0CM002.OP0CMSNM > " ")
      OPAREC.OPAERR = "Y"; /* set error flag*/
      converseLib.validationFailed(054);
                                   /* cannot enter addr id and new addr ...*/
      return;
    else
      set OP0CM002.OP0CMSNM normal;
    end
  end

  if (OP0CM002.OP0CMSA1 is modified)
    if (OP0CM002.OP0CMSA1 > " ")
      OPAREC.OPAERR = "Y"; /* set error flag*/
      converseLib.validationFailed(054);
                                   /* cannot enter addr id and new addr ...*/
      return;
    else
      set OP0CM002.OP0CMSA1 normal;
    end
  end

  if (OP0CM002.OP0CMSA2 is modified)
    if (OP0CM002.OP0CMSA2 > " ")
      OPAREC.OPAERR = "Y"; /* set error flag*/
      converseLib.validationFailed(054);
                                   /* cannot enter addr id and new addr ...*/
      return;
    else
      set OP0CM002.OP0CMSA2 normal;
    end
  end

  if (OP0CM002.OP0CMSA3 is modified)
    if (OP0CM002.OP0CMSA3 > " ")
      OPAREC.OPAERR = "Y"; /* set error flag*/
      converseLib.validationFailed(054);
                                   /* cannot enter addr id and new addr ...*/
      return;
    else
      set OP0CM002.OP0CMSA3 normal;
    end
  end

  if (OP0CM002.OP0CMSCT is modified)
    if (OP0CM002.OP0CMSCT > " ")
      OPAREC.OPAERR = "Y"; /* set error flag*/
      converseLib.validationFailed(054);
                                   /* cannot enter addr id and new addr ...*/
      return;
    else
      set OP0CM002.OP0CMSCT normal;
    end
  end

  if (OP0CM002.OP0CMSST is modified)
    if (OP0CM002.OP0CMSST > " ")
      OPAREC.OPAERR = "Y"; /* set error flag*/
      converseLib.validationFailed(054);
                                   /* cannot enter addr id and new addr ...*/
      return;
    else
      set OP0CM002.OP0CMSST normal;
    end
  end

  if (OP0CM002.OP0CMSZP is modified)
    if (OP0CM002.OP0CMSZP > " ")
      OPAREC.OPAERR = "Y"; /* set error flag*/
      converseLib.validationFailed(054);
                                   /* cannot enter addr id and new addr ...*/
      return;
    else
      set OP0CM002.OP0CMSZP normal;
    end
  end

  if (OP0CM002.OP0CMSCN is modified)
    if (OP0CM002.OP0CMSCN > " ")
      OPAREC.OPAERR = "Y"; /* set error flag*/
      converseLib.validationFailed(054);
                                   /* cannot enter addr id and new addr ...*/
      return;
    else
      set OP0CM002.OP0CMSCN normal;
    end
  end



   /* *************************************************************/
end // end OP0CS74

// edit/save ship to name/addr
Function OP0CS75()



      /* *********************************************************/
      /* * this statement group edits the ship to name/addr.    **/
      /* *********************************************************/
      /* * modified for spain trademark project                 **/
      /* * sbhara 03/14/00*                                     **/
      /* *********************************************************/


      /* validate required entries*/


      /* set country default if null*/
   /* spain trademark project changes begin-sbhara*/
   /* commented out because we need enter xct in the screen*/
   /* IF OP0CM002.OP0CMSCN EQ ' ';     /* null?*/
   /* MOVE 'USA' TO OP0CM002.OP0CMSCN;*/
   /* END;*/


    /* edit country code*/

  if (OP0CM002.OP0CMSCN != " ") /* country code entered?spain project*/
    if (OP0CM002.OP0CMSCN in XCTTBL.XCTCD /* valid code*/
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* ACTIVE?*/
        /* IF OP0CM002.OP0CMSCN NE 'USA';commented spain trademark project*/
      OP0CM002.OP0CMSCD = XCTTBL.XCTDESC[sysVar.arrayIndex]; /* xct cd desc*/
    else
      converseLib.validationFailed(060); /* country code is not valid*/
      OPAREC.OPAERR = "Y"; /* set error flag*/
      OP0CM002.OP0CMSCD = " "; /* country code desc*/
      set OP0CM002.OP0CMSCN cursor, modified, bold;
      return; /* rtn don't go further*/
    end
  else
    converseLib.validationFailed(060); /* country code is not valid*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0CM002.OP0CMSCD = " "; /* country code desc*/
    set OP0CM002.OP0CMSCN cursor, modified, bold;
    return; /* rtn don't go further*/
  end

   /* if usa then zip code required*/
   /* spain trademark project sbhara 02/21/00  changes*/
   /* Zipcode validation is been redesigned*/


   /* IF OP0CM002.OP0CMSCN EQ 'USA';*/
   /* IF OP0CM002.OP0CMSZP LE '00000     '/* zip*/
   /* OR OP0CM002.OP0CMSZP LE '000000    '/* zip*/
   /* OR OP0CM002.OP0CMSZP LE '0000000   '/* zip*/
   /* OR OP0CM002.OP0CMSZP LE '00000000  '/* zip*/
   /* OR OP0CM002.OP0CMSZP LE '000000000 '/* zip*/
   /* OR OP0CM002.OP0CMSZP LE '0000000000';/* zip*/
   /* MOVE 064 TO EZEMNO;          /* ship to address is not valid*/
   /* MOVE 'Y' TO OPAREC.OPAERR;   /* set error flag*/
   /* MOVE 'Y' TO OP0CW01.OP0CWOSF;/* set error flag*/
   /* SET OP0CM002.OP0CMSZP CURSOR,MODIFIED,BRIGHT;*/
   /* END;*/
   /* END;*/
   /* CANA 06/04*/

  if (OP0CM002.OP0CMSCN == "USA")
    OP0CW-US-ZIP5 = OP0CM002.OP0CMSZP;
    sysVar.arrayIndex = 5; /* initialize*/
    while (sysVar.arrayIndex > 0) /* loop 5 times*/
      if (OP0CW-US-ZIP[sysVar.arrayIndex] is numeric) /* has to be number*/
        /* CONTINUE*/
      else /* not number*/
        sysVar.arrayIndex = 1; /* exit the loop*/
        converseLib.validationFailed(1004); /* zip code is required*/
        OPAREC.OPAERR = "Y"; /* set error flag*/
        OP0CW01.OP0CWOSF = "Y"; /* set error flag*/
        set OP0CM002.OP0CMSZP cursor, modified, bold;
        return; /* rtn don't go further*/
      end
      sysVar.arrayIndex = sysVar.arrayIndex - 1;
    end
  else /* if canada*/

    if (OP0CM002.OP0CMSZP == " " /* field is blanks*/
     && OP0CM002.OP0CMSCN == "CANA") /* if the shipto country is cana*/
      converseLib.validationFailed(1004); /* zip code is required*/
      OPAREC.OPAERR = "Y"; /* set error flag*/
      OP0CW01.OP0CWOSF = "Y"; /* set error flag*/
      set OP0CM002.OP0CMSZP cursor, modified, bold;
      return; /* rtn don't go further*/
    end
  end

   /* CANA 06/04*/

    /* Hardcoded Canadian provinces should be removed once country code is*/
    /* added to the state table. For now, only Canadian addresses are*/
    /* edited to make sure only a Canadian province has been entered.*/
    /* U.S. addresses are not edited to make sure only a U.S. state is*/
    /* entered - this would require hardcoding the U.S. states.*/

    /* edit state code for usa and canada*/
   /* CANA STATE CODE 'QC' ADDED 03/29/00 SBHARA*/
  if (OP0CM002.OP0CMSCN == "USA"   /* usa?*/
   || (OP0CM002.OP0CMSCN == "CANA" /* CANA canada ?*/
   && OP1REC.XDZ-DATA-DIST-CD != "DS")) /* don't edit Canadian Intl order*/
    if (OP0CM002.OP0CMSST in XSTTBL.XSTCD /* valid code*/
     && XSTTBL.XXXSTAT == "A")            /* active status*/
      if (OP0CM002.OP0CMSCN == "CANA") /* CANA check canadian provinces*/
        if (OP0CM002.OP0CMSST == "SK"
         || OP0CM002.OP0CMSST == "PQ"
         || OP0CM002.OP0CMSST == "PE"
         || OP0CM002.OP0CMSST == "ON"
         || OP0CM002.OP0CMSST == "NT"
         || OP0CM002.OP0CMSST == "NS"
         || OP0CM002.OP0CMSST == "NF"
         || OP0CM002.OP0CMSST == "NB"
         || OP0CM002.OP0CMSST == "MB"
         || OP0CM002.OP0CMSST == "BC"
         || OP0CM002.OP0CMSST == "AB"
         || OP0CM002.OP0CMSST == "YT"
        ) /* next sentence*/
        else
          converseLib.validationFailed(902); /* CANA prov code is not valid*/
          OPAREC.OPAERR = "Y"; /* CANA set error flag*/
          OP0CW01.OP0CWOSF = "Y"; /* CANA set error flag*/
          set OP0CM002.OP0CMSST cursor, modified, bold; /* CANA*/
          return; /* rtn don't go any further*/
        end
      else
        /* next sentence*/
      end
    else
      if (OP0CM002.OP0CMSCN == "USA") /* CANA for usa address*/
        converseLib.validationFailed(059); /* state code is not valid*/
        OPAREC.OPAERR = "Y"; /* set error flag*/
        OP0CW01.OP0CWOSF = "Y"; /* set error flag*/
        set OP0CM002.OP0CMSST cursor, modified, bold;
        return; /* rtn don't go any further*/
      else /* CANA for canadian addresses*/
        converseLib.validationFailed(902); /* CANA prov code is not valid*/
        OPAREC.OPAERR = "Y"; /* CANA set error flag*/
        OP0CW01.OP0CWOSF = "Y"; /* CANA set error flag*/
        set OP0CM002.OP0CMSST cursor, modified, bold; /* CANA*/
        return; /* rtn don't go any further*/
      end
    end
  end

      /* city is required*/

  if (OP0CM002.OP0CMSCT == " ")
    converseLib.validationFailed(064); /* ship to address is not valid*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0CW01.OP0CWOSF = "Y"; /* set error flag*/
    set OP0CM002.OP0CMSCT cursor, modified, bold;
    return; /* rtn don't go any further*/
  end


      /* at lease one address line is required*/

  if (OP0CM002.OP0CMSA1 == " " /* null?*/
   && OP0CM002.OP0CMSA2 == " " /* null?*/
   && OP0CM002.OP0CMSA3 == " ") /* null?*/
    converseLib.validationFailed(064); /* ship to address is not valid*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0CW01.OP0CWOSF = "Y"; /* set error flag*/
    set OP0CM002.OP0CMSA1 cursor, modified, bold;
    set OP0CM002.OP0CMSA2 modified, bold;
    set OP0CM002.OP0CMSA3 modified, bold;
    return; /* rtn don't go any further*/
  end


      /* name is required*/

  if (OP0CM002.OP0CMSNM == " ") /* null?*/
    converseLib.validationFailed(064); /* ship to address is not valid*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    OP0CW01.OP0CWOSF = "Y"; /* set error flag*/
    set OP0CM002.OP0CMSNM cursor, modified, bold;
  end


      /* get out if error*/
      /* spain trademark project sbhara 03/14/00  changes begin*/
      /* commented out the following lines which moves spaces*/
      /* to country code field if there is any error*/
   /* IF OP0CW01.OP0CWOSF EQ 'Y';      /* error flag set*/
   /* IF OP0CM002.OP0CMSCN EQ 'USA'; /* if usa, then*/
   /* MOVE ' ' TO OP0CM002.OP0CMSCN;/* clear country code*/
   /* MOVE ' ' TO OP0CM002.OP0CMSCD;/* clear country code desc*/
   /* EZERTN;*/
   /* ELSE;*/
   /* EZERTN;*/
   /* END;*/
   /* END;*/


    /* set flags and format addr record*/

  OP5REC.OP5GROUP = OP0CW01.OP0CWOSR; /* restore record*/
  OP1REC.OP11TMSF = "Y"; /* one time ship to*/
  OP1REC.OP1SGPAO = "N"; /* no addr id ovrd*/
  OP0CM002.OP0CMSAO = " "; /* no addr id ovrd*/
  OP1REC.OP1SHAID = 0; /* no bill group id*/
  OP0CM002.OP1SHAID = 0; /* no bill group id*/
  OP5REC.OP5BILIN = "N"; /* addr bill ind*/
  OP5REC.OP5SHPIN = "Y"; /* addr ship ind*/
  OP5REC.KUCCOID = OP1REC.KUCCOID; /* company id*/
  OP5REC.KUMSTRID = OP1REC.KUMSTRID; /* store id*/
  OP5REC.XNXCD = OP1REC.XNXCD; /* department id*/
  OP5REC.XGPCD = OP1REC.XGPCD; /* gpc code*/
  OP5REC.OP5ALTNM = OP0CM002.OP0CMSNM; /* bill to name*/
  OP5REC.XXXADDR[1] = OP0CM002.OP0CMSA1; /* bill to addr 1*/
  OP5REC.XXXADDR[2] = OP0CM002.OP0CMSA2; /* bill to addr 2*/
  OP5REC.XXXADDR[3] = OP0CM002.OP0CMSA3; /* bill to addr 3*/
  OP5REC.XXXCITY = OP0CM002.OP0CMSCT; /* bill to city*/
  OP5REC.XSTCD = OP0CM002.OP0CMSST; /* bill to state*/
  OP5REC.XXXZIP = OP0CM002.OP0CMSZP; /* bill to zip*/
  OP5REC.XCTCD = OP0CM002.OP0CMSCN; /* bill to country*/
  OP0CW01.OP0CWOSR = OP5REC.OP5GROUP;
                                   /* save one time ship to addr rec*/
  set OP0CM002.OP1SHAID normal;
  set OP0CM002.OP0CMSNM normal;
  set OP0CM002.OP0CMSA1 normal;
  set OP0CM002.OP0CMSA2 normal;
  set OP0CM002.OP0CMSA3 normal;
  set OP0CM002.OP0CMSCT normal;
  set OP0CM002.OP0CMSST normal;
  set OP0CM002.OP0CMSZP normal;
  set OP0CM002.OP0CMSCN normal;


      /* set action flag - ' ' - 'A'*/
                        /* 'A' - 'A'*/
                        /* 'C' - 'C'*/
                        /* 'D' - 'C'*/

  OP0CW01.OP0CWUSF = "Y"; /* update one time ship to*/
  if (OP0CW01.OP0CW1SA == " " /* null*/
   || OP0CW01.OP0CW1SA == "A") /* add*/
    OP0CW01.OP0CW1SA = "A"; /* one time ship action (add)*/
  else
    OP0CW01.OP0CW1SA = "C"; /* one time ship action (chg)*/
  end


       /* clear country code if usa*/
       /* spain trademark project sbhara 03/14/00  changes*/
       /* commented out the followoing code because we dont want to do*/
       /* this anymore*/
   /* IF OP0CM002.OP0CMSCN EQ 'USA';*/
   /* MOVE ' ' TO OP0CM002.OP0CMSCN; /* country code*/
   /* MOVE ' ' TO OP0CM002.OP0CMSCD; /* country code desc*/
   /* END;*/

   /* spain trademark project sbhara 03/14/00  changes*/

   /* *************************************************************/
end // end OP0CS75

// edit ship to addr id
Function OP0CS76()



      /* *********************************************************/
      /* * this statement group edits the ship to addr id       **/
      /* *********************************************************/
      /* * MODIFIED FOR SPAINTRADEMARK PROJECT                  **/
      /* * SBHARA 03/14/00                                      **/
      /* *********************************************************/



      /* access customer address table for ship to name/addr*/

  KULREC.KUCCOID = OP1REC.KUCCOID; /* load key - cust co*/
  KULREC.KULAAID = OP0CM002.OP1SHAID; /* load key - ship to addr id*/
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VOADDR01"; /* table view*/
    TA1REC.TA1TBLKE = KULREC.KULGRP; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0CS76 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0170  "; /* i/o mod name*/
    XSOPS02();
  end


      /* if not found, then tell user*/

  if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
    converseLib.validationFailed(057); /* ship to addr record is missing*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0CM002.OP1SHAID cursor, modified, bold;
    return;
  end


      /* save ship to addr id and set flags*/

  set OP0CM002.OP1SHAID normal;
  OP1REC.OP1SHAID = OP0CM002.OP1SHAID; /* save addr id*/
  OP1REC.OP11TMSF = "N";
  OP1REC.OP1SGPAO = "Y";
  if (OP0CW01.OP0CW1SA == "A") /* reset action flags*/
    OP0CW01.OP0CW1SA = " "; /* clear action flag*/
    OP0CW01.OP0CWOSR = " "; /* clear record hold*/
    OP0CW01.OP0CWUSF = " "; /* clear update ship flag*/
  else
    if (OP0CW01.OP0CW1SA == "C"
     || OP0CW01.OP0CW1SA == "D")
      OP0CW01.OP0CW1SA = "D"; /* set action flag*/
      OP0CW01.OP0CWUSF = "Y"; /* set update ship flag*/
    end
  end


      /* format name and address on screen*/

  OP0CM002.OP0CMSAO = "*"; /* addr id ovrd*/
  OP0CM002.OP0CMSNM = OPWREC.KUMSTRNM; /* store name*/
  OP0CM002.OP0CMSA1 = KULREC.XXX-ADDR1; /* addr line 1*/
  OP0CM002.OP0CMSA2 = KULREC.XXX-ADDR2; /* addr line 2*/
  OP0CM002.OP0CMSA3 = KULREC.XXX-ADDR3; /* addr line 2*/
  OP0CM002.OP0CMSCT = KULREC.XXXCITY; /* city*/
  OP0CM002.OP0CMSST = KULREC.XSTCD; /* state*/
  OP0CM002.OP0CMSZP = KULREC.XXXZIP; /* zip*/
       /* spain trademark project sbhara 03/14/00  changes begin*/
       /* country code will moved for all the countries*/
   /* MOVE ' ' TO OP0CM002.OP0CMSCN;    /* country code*/
   /* MOVE ' ' TO OP0CM002.OP0CMSCD;    /* country code desc*/
  if (KULREC.XCTCD > " "           /* country code present?*/
   && KULREC.XCTCD in XCTTBL.XCTCD /* valid country code?*/
   && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* ACTIVE?*/
    /* AND KULREC.XCTCD NE 'USA';    /* and not equal u.s.a.*/
    OP0CM002.OP0CMSCN = KULREC.XCTCD; /* country code*/
    OP0CM002.OP0CMSCD = XCTTBL.XCTDESC[sysVar.arrayIndex];
                                   /* country code desc*/
  end


       /* spain trademark project sbhara 03/14/00  changes end*/
   /* *************************************************************/
end // end OP0CS76

// validate carrier code
Function OP0CS77()



      /* *********************************************************/
      /* * this statement group validates the carrier code      **/
      /* *********************************************************/



      /* validate traffic carrier code field*/


  if (OP0CM002.TF1CARCD == " ")
    OP0CM002.TF1ABRV = " ";
    OP1REC.TF1CARCD = " ";
    set OP0CM002.TF1CARCD normal;
    return;

  else


    TF1REC.TF1CARCD = OP0CM002.TF1CARCD; /* load key*/
    call "IO0860" ("S ", SQLCA, TF1REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


        /* check db2 return code*/

    if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
      if (TF1REC.XXXSTAT == "A")
        OP1REC.TF1CARCD = TF1REC.TF1CARCD; /* save carrier code*/
        OP0CM002.TF1ABRV = TF1REC.TF1ABRV; /* move abrv to map*/
        OP0CW01.TF1ABRV = TF1REC.TF1ABRV; /* save for later*/
        set OP0CM002.TF1CARCD normal;
        return;
      else
        converseLib.validationFailed(154); /* carrier code is not active*/
        OPAREC.OPAERR = "Y"; /* set error flag*/
        OP0CW01.OP0CWCUF = "Y"; /* set error flag*/
        set OP0CM002.TF1CARCD cursor, modified, bold;
        OP0CM002.TF1ABRV = " ";
        return; /* get out*/
      end

    else


      if (SQLCA.VAGen_SQLCODE == 100) /* check for notfnd rc*/
        converseLib.validationFailed(194); /* carrier code is not valid*/
        OPAREC.OPAERR = "Y"; /* set error flag*/
        OP0CW01.OP0CWCUF = "Y"; /* set error flag*/
        set OP0CM002.TF1CARCD cursor, modified, bold;
        OP0CM002.TF1ABRV = " ";
        return; /* get out*/

      else

        if (SQLCA.VAGen_SQLCODE == -911) /* if a deadlock on record*/
          converseLib.validationFailed(006); /* deadlocked record*/
          OPAREC.OPAERR = "Y"; /* set error flag*/
          OP0CW01.OP0CWCUF = "Y"; /* set error flag*/
          return; /* get out*/

        else

          TA1REC.TA1DBASE = "DPICK   "; /* data base name*/
          TA1REC.TA1TBLVU = "VCARR001"; /* table view*/
          TA1REC.TA1TBLKE = TF1REC.TF1CARCD; /* key value*/
          TA1REC.TA1LOCAT[3] = "OP0CS77 "; /* statement group*/
          TA1REC.TA1LOCAT[4] = "IO0860  "; /* i/o mod name*/
          XSOPS02();
        end
      end
    end
  end




   /* *************************************************************/
end // end OP0CS77

// get defaults from kufrec
Function OP0CS78()



      /* *********************************************************/
      /* * this statement group gets the xpacd, kufmixbl, xhdcd,**/
      /* * PWRLBCD from the customer handling exception database**/
      /* * (kufrec) and adds them to the order header           **/
      /* *********************************************************/




  KUFREC.KUCCOID = OP0CM001.OP0CMCO; /* cust num*/
  KUFREC.KUMSTRID = OP0CM001.OP0CMST; /* store*/
  KUFREC.XNXCD = OP0CM001.OP0CMDPT; /* dept*/
  KUFREC.XGPCD = OP0CM001.XGPCD; /* gpc code*/

  call "IO0200" ("SF", SQLCA, KUFREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
    OP1REC.XPACD = KUFREC.XPACD; /* pack code*/
    OPWREC.XHDCD[1] = KUFREC.XHDCD[1]; /* handling code*/
    OPWREC.XHDCHG[1] = KUFREC.XHDCHG[1]; /* handling charge*/
    OPWREC.XHDCD[2] = KUFREC.XHDCD[2];
    OPWREC.XHDCHG[2] = KUFREC.XHDCHG[2];
    OPWREC.XHDCD[3] = KUFREC.XHDCD[3];
    OPWREC.XHDCHG[3] = KUFREC.XHDCHG[3];
    OPWREC.XHDCD[4] = KUFREC.XHDCD[4];
    OPWREC.XHDCHG[4] = KUFREC.XHDCHG[4];
    OPWREC.XHDCD[5] = KUFREC.XHDCD[5];
    OPWREC.XHDCHG[5] = KUFREC.XHDCHG[5];
    OPWREC.PWRLBCD[1] = KUFREC.PWRLBCD[1]; /* label code*/
    OPWREC.PWRLBCD[2] = KUFREC.PWRLBCD[2];
    OP1REC.KUFMIXBL = KUFREC.KUFMIXBL; /* allow mix box flag*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
      TA1REC.TA1TBLVU = "VHNDLX01"; /* table view*/
      TA1REC.TA1TBLKE = KUFREC.KUFGRP; /* key value*/
      TA1REC.TA1LOCAT[3] = "OP0CS78 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = "IO0200  "; /* i/o mod name*/
      XSOPS02();
    end
  end


   /* *************************************************************/
end // end OP0CS78

// check xottbl.xotoaloc
Function OP0CS79()

   /* **************************************************************/
   /* If xottbl.xotoaloc = 'y', this order-type does not allow   **/
   /* customer specified pack-codes.  Check the xpatbl.          **/
   /* **************************************************************/

  sysVar.arrayIndex = 1;

  if (OP1REC.XOTCD in XOTTBL.XOTCD /* if valid order-type*/
   && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active*/
    if (XOTTBL.XOTOALOC[sysVar.arrayIndex] == "Y") /* if on-line allocation*/
      OP0CS81(); /* go check the xpatbl*/
    end
  end

end // end OP0CS79

// get ord nbr and add order hdr
Function OP0CS80()



      /* *********************************************************/
      /* * this statement group gets the next order number and  **/
      /* * adds the order header record.                        **/
      /* *********************************************************/


      /* get next order number*/

  call "IO0510" ("SU", SQLCA, OP7REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   && OP7REC.OP7CUOIN > 0)     /* check for good next ord number*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VNXTIO01"; /* table view*/
    TA1REC.TA1TBLKE = OP7REC.OP7GROUP; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0CS80 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0510  "; /* i/o mod name*/
    XSOPS02();
  end


      /* build order number fields*/

  OPAREC.OPAORDN = OP7REC.OP7CUOIN; /* cust ord id*/
  OP1REC.OP1CUOID = OP7REC.OP7CUOIN; /* cust ord id*/
  OP1REC.OP1PARTN = OPAREC.OP1PARTN; /* partition number*/


      /* set up zzz date fields*/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE ";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  OP1REC.ZZZSTM = TA2REC.TA2TIMHM;
  OP1REC.ZZZCHGTM = TA2REC.TA2TIMHM;
  OP1REC.ZZZSDT = TA2REC.TA2GRGGN;
  OP1REC.ZZZCHGDT = TA2REC.TA2GRGGN;
  OP1REC.ZZZCHGCT = 0;


      /* add order header to data base*/

  call "IO0430" ("A ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
    TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0CS80 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0430  "; /* i/o mod name*/
    XSOPS02();
  end



   /* *************************************************************/
end // end OP0CS80

// edit pack-code with xpatbl
Function OP0CS81()

   /* **************************************************************/
   /* Remove default customer specified pack-codes from orders   **/
   /* that can be allocated on-line (checked in op0cs79).        **/
   /* **************************************************************/

  sysVar.arrayIndex = 1;

  if (OP1REC.XPACD in XPATBL.XPACD)
    if (XPATBL.XPASPFFL[sysVar.arrayIndex] == "Y") /* customer specified pack code*/
      OP1REC.XPACD = "  "; /* not allowed on ol-aloc orders*/
      if (OP0CW01.OP0CW1ST == "Y") /* display msg 1st time through*/
        OP0CW01.OP0CW1ST = "N";
        OPAREC.OPAERR = "Y";
        converseLib.validationFailed(706); /* customer specified pack-code removed*/
      end
    end
  end

end // end OP0CS81

// edit handling code xhdcd
Function OP0CS82()

   /* **************************************************************/
   /* Check each occurrence of opwrec.xhdcd for value 'all'      **/
   /* so that we dont add more than one 'all'.                   **/
   /* Check each occurrence of opwrec.xhdcd for spaces,          **/
   /* move 'all' to the first one with spaces.                   **/
   /* if none of them are spaces, issue warning message #708     **/
   /* **************************************************************/

  if (OPWREC.XHDCD[1] == "ALL"
   || OPWREC.XHDCD[2] == "ALL"
   || OPWREC.XHDCD[3] == "ALL"
   || OPWREC.XHDCD[4] == "ALL"
   || OPWREC.XHDCD[5] == "ALL")
    /* next sentence*/
  else
    if (OPWREC.XHDCD[1] == " ")
      OPWREC.XHDCD[1] = "ALL";
      OPWREC.XHDCHG[1] = 0;
    else
      if (OPWREC.XHDCD[2] == " ")
        OPWREC.XHDCD[2] = "ALL";
        OPWREC.XHDCHG[2] = 0;
      else
        if (OPWREC.XHDCD[3] == " ")
          OPWREC.XHDCD[3] = "ALL";
          OPWREC.XHDCHG[3] = 0;
        else
          if (OPWREC.XHDCD[4] == " ")
            OPWREC.XHDCD[4] = "ALL";
            OPWREC.XHDCHG[4] = 0;
          else
            if (OPWREC.XHDCD[5] == " ")
              OPWREC.XHDCD[5] = "ALL";
              OPWREC.XHDCHG[5] = 0;
            else /* all 5 slots are taken*/
              if (OPAREC.OPAERR == "Y") /* error already encountered*/
                converseLib.validationFailed(708); /* cover up the existing msg anyway*/
              else
                if (OP0CW01.OP0CW1ST == "Y") /* if the first time thru*/
                  OP0CW01.OP0CW1ST = "N"; /* not first time anymore*/
                  OPAREC.OPAERR = "Y"; /* force redisplay of screen*/
                  converseLib.validationFailed(708); /* all 5 slots being used*/
                end
              end
            end
          end
        end
      end
    end
  end
end // end OP0CS82

// edit handling code xhdcd
Function OP0CS83()

   /* **************************************************************/
   /* Check each occurrence of opwrec.xhdcd for value 'EXP'      **/
   /* so that EXP is not duplicated                              **/
   /* Check each occurrence of opwrec.xhdcd for spaces,          **/
   /* move 'EXP' to the first one empty slot.                    **/
   /* If exp slots are used, issue warning message 709.          **/
   /* **************************************************************/

  if (OPWREC.XHDCD[1] == "EXP"
   || OPWREC.XHDCD[2] == "EXP"
   || OPWREC.XHDCD[3] == "EXP"
   || OPWREC.XHDCD[4] == "EXP"
   || OPWREC.XHDCD[5] == "EXP")
    /* next sentence*/
  else
    if (OPWREC.XHDCD[1] == " ")
      OPWREC.XHDCD[1] = "EXP";
      OPWREC.XHDCHG[1] = 0;
    else
      if (OPWREC.XHDCD[2] == " ")
        OPWREC.XHDCD[2] = "EXP";
        OPWREC.XHDCHG[2] = 0;
      else
        if (OPWREC.XHDCD[3] == " ")
          OPWREC.XHDCD[3] = "EXP";
          OPWREC.XHDCHG[3] = 0;
        else
          if (OPWREC.XHDCD[4] == " ")
            OPWREC.XHDCD[4] = "EXP";
            OPWREC.XHDCHG[4] = 0;
          else
            if (OPWREC.XHDCD[5] == " ")
              OPWREC.XHDCD[5] = "EXP";
              OPWREC.XHDCHG[5] = 0;
            else
              if (OP0CW01.OP0CW1ST == "Y") /* first time thru*/
                OP0CW01.OP0CW1ST = "N"; /* not first time anymore*/
                OPAREC.OPAERR = "Y"; /* force the redisplay*/
                converseLib.validationFailed(709); /* warning - 5 already exist*/
              end
            end
          end
        end
      end
    end
  end
end // end OP0CS83

// get ord nbr and add order hdr
Function OP0CS85()



      /* *********************************************************/
      /* * this statement group controls the updating of the    **/
      /* * order addr records.                                  **/
      /* *********************************************************/



  TA1REC.TA1LOCAT[2] = "OP0CS85 "; /* statement group*/


      /* set up zzz date fields*/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE ";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};


      /* if one time ship to, then process address*/

  if (OP0CW01.OP0CWUSF == "Y" /* update one time ship to?*/
   && OP0CW01.OP0CW1SA > " ") /* one time ship to?*/
    OP0CW01.OP0CWAAF = OP0CW01.OP0CW1SA; /* set action code*/
    OP5REC.OP5GROUP = OP0CW01.OP0CWOSR; /* move record*/
    OP5REC.OP1PARTN = OP1REC.OP1PARTN; /* partition number*/
    OP5REC.OP1CUOID = OP1REC.OP1CUOID; /* cust ord id*/
    OP5REC.OP1NORID = OP1REC.OP1NORID; /* nike ord id*/
    OP5REC.OP5SHPIN = "Y";
    OP5REC.OP5BILIN = "N";
    OP5REC.ZZZCHGTM = TA2REC.TA2TIMHM;
    OP5REC.ZZZCHGDT = TA2REC.TA2GRGGN;
    OP0CS86(); /* perform addr update*/
  end


      /* if one time bill to, then process address*/

  if (OP0CW01.OP0CWUBF == "Y" /* update one time bill to?*/
   && OP0CW01.OP0CW1BA > " ") /* one time bill to?*/
    OP0CW01.OP0CWAAF = OP0CW01.OP0CW1BA; /* set action code*/
    OP5REC.OP5GROUP = OP0CW01.OP0CWOBR; /* move record*/
    OP5REC.OP1PARTN = OP1REC.OP1PARTN; /* partition number*/
    OP5REC.OP1CUOID = OP1REC.OP1CUOID; /* cust ord id*/
    OP5REC.OP1NORID = OP1REC.OP1NORID; /* nike ord id*/
    OP5REC.OP5SHPIN = "N";
    OP5REC.OP5BILIN = "Y";
    OP5REC.ZZZCHGTM = TA2REC.TA2TIMHM;
    OP5REC.ZZZCHGDT = TA2REC.TA2GRGGN;
    OP0CS86(); /* perform addr update*/
  end



   /* *************************************************************/
end // end OP0CS85

// update addr records
Function OP0CS86()

      /* *********************************************************/
      /* * perform update function on order addr records        **/
      /* *********************************************************/

      /* get next order number*/

  if (OP0CW01.OP0CWAAF == "A") /* add?*/
    /*  */
    /* Befor inserting the row it is being checked whether any row*/
    /* exists with the same key values in dorder.voaddr01.*/
    /*  */
    call "IO0460" ("SA", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes}; /* call io mod sel-alt*/
    /*  */
    /* If no row exists then only the row is added to the dorder.voaddr01*/
    /* table, else it updates the row instead of inserting.*/
    /*  */
    if (SQLCA.VAGen_SQLCODE == 100)
      OP5REC.ZZZCHGCT = 0; /* clear change count on add*/
      call "IO0460" ("A ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for add*/
    else
      if (SQLCA.VAGen_SQLCODE == 0)
        call "IO0460" ("U ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes}; /* call iomod for chg*/
      end
    end
  else
    if (OP0CW01.OP0CWAAF == "C") /* chg?*/
      call "IO0460" ("U ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes}; /* call iomod for chg*/
    else
      if (OP0CW01.OP0CWAAF == "D") /* del?*/
        call "IO0460" ("D ", SQLCA, OP5REC) {isNoRefresh = yes, isExternal = yes}; /* call iomod for del*/
      end
    end
  end


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VOADDR01"; /* table view*/
    TA1REC.TA1TBLKE = OP5REC.OP5KEY; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0CS86 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0460  "; /* i/o mod name*/
    XSOPS02();
  end



   /* *************************************************************/
end // end OP0CS86

// edit for cust op nbr required
Function OP0CSAH()
      /* ******************************************/
   /* edit the relationship between:*/
    /* - customer purchase order number (OP1CUPO)*/
    /* - order type (XOBCD -> XOVTBL.XOTCD -> XOTTBL.XOTATONF)*/
    /* - purchase order required code (KUCYPOFT)*/

   /* For some customers, we required additional information*/
   /* before finalizing an order.  What we require is determined*/
   /* by kucypoft- 00 - nothing is required*/
                /* 01 - customer po number is required*/
                /* 02 - customer po number and hard copy required*/
                /* 03 - customer po number, hard copy and*/
                     /* confirmation required*/

   /* Orders that are not 'at once' orders are automatically*/
   /* placed on allocation hold until the requirements indicated*/
   /* by KUCYPOFT have been met.  This is done in OP0J.*/

   /* This sgrp edits 'at once' orders only for presence of*/
   /* po#.  If po# is present, we assume that all po requirements*/
   /* have been met.*/
      /* ******************************************/

  if (OP1REC.XBDCD == "5" /* these types of draw orders are*/
   || OP1REC.XBDCD == "8" /* dependent on condition of bulk*/
   || OP1REC.XBDCD == "F" /* order, and we don't care whether*/
   || OP1REC.XBDCD == "3") /* or not there is a po# on the draw*/
    return;
  end

  if (KUCREC.KUCYPOFT == "00") /* no purchase order number is required*/
    return;
  end
  if (OP1REC.XOTCD in XOTTBL.XOTCD
   && XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A"
   && XOTTBL.XOTATONF[sysVar.arrayIndex] == "Y") /* this is an 'at once' order*/
    if (OP1REC.OP1CUPO == " ") /* with no po#*/
      converseLib.validationFailed(653); /* so they will have to enter one*/
      OPAREC.OPAERR = "Y";
      set OP0CM001.OP1CUPO cursor, modified, bold;
    end
  end
end // end OP0CSAH

// write audit record
Function OP0CSAU()


      /* **************************************/
      /* * write audit record for rep/agency*/
      /* * override.             opurec*/
      /* **************************************/


  set OPUREC empty;
  OPUREC.XXXPGMNB = "OP1261";
  OPUREC.OPUAUDTP = "RX";
  OPUREC.OP1PARTN = OP1REC.OP1PARTN;
  OPUREC.OP1CUOID = OP1REC.OP1CUOID;
  OPUREC.OP1NORID = OP1REC.OP1NORID;
  OPUREC.XDVCD = OP1REC.XSOCD; /* sales office hiding in div*/
  OPUREC.OP1CUNDT = OP1REC.OP1ORCDT;
                                   /* ord rcv ddt hiding in need dt*/
  OPUREC.OPUCRNTR = "Y"; /* ship addr change flag*/

  OP0CW04.OP0CWCSN = OP1REC.KUCCOID; /* reformat company number*/
  if (OP0CW04.OP0CWCSB > 0)
    OPUREC.OPUAUDQT[1] = OP0CW05.OP0CWCSE;
  else
    OPUREC.OPUAUDQT[1] = OP0CW04.OP0CWCSC;
  end
  OPUREC.OPUAUDQT[3] = OP1REC.KUMSTRID; /* store*/
  OPUREC.OPUAUDQT[4] = OP1REC.XNXCD; /* dept*/
  OPUREC.ZZZSDT = TA2REC.TA2GRGGN;
  OPUREC.ZZZSTM = TA2REC.TA2TIMHM;

  call "IO3210" ("A ", SQLCA, OPUREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    set TA1REC empty;
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "VORAUD01";
    TA1REC.TA1LOCAT[1] = "OP0CSAU";
    TA1REC.TA1LOCAT[2] = "U";
    TA1REC.TA1LOCAT[3] = "IO3210";
    OP0CW01.OP0CWTK2 = OPUREC.OP1CUOID;
    OP0CW01.OP0CWTK3 = OPUREC.OP1NORID;
    OP0CW01.OP0CWTK4 = 0;
    OP0CW01.OP0CWTK5 = OPUREC.OPUAUDTP;
    TA1REC.TA1TBLKE = OP0CW01.OP0CWTK1;
    XSOPS02(); /* common abend*/
  end


end // end OP0CSAU

// calc warning for po# allochold
Function OP0CSAW()
      /* ******************************************/
   /* For some customers, we required additional information*/
   /* before finalizing an order.  What we require is determined*/
   /* by KUCYPOFT - 00 - nothing is required*/
              /* 01 - customer po number is required*/
              /* 02 - customer po number and hard copy required*/
              /* 03 - customer po number, hard copy and*/
                   /* confirmation required*/
   /* this proc will set up a warning message specifying*/
    /* the what the customer requirements are, whether or*/
    /* not they have been met.*/
    /* For draw order types 3/5/8/F, we don't care what the draw*/
    /* customer's requirements are.  We do however display a*/
    /* warning if the bulk order is on hold*/
      /* ******************************************/

  OP0CW01.OP0CWARN = 0; /* set off the warning flag*/

  if (OP1REC.XBDCD == "3" /* this type of draw is put*/
   || OP1REC.XBDCD == "5" /* on hold depending on the*/
   || OP1REC.XBDCD == "8" /* bulk header*/
   || OP1REC.XBDCD == "F")
    if (OP1REC.XAHCD != " ") /* op0d had passed a hold code*/
      OP0CW01.OP0CWARN = 4; /* calculated from the bulk order*/
    end
    return;
  end

  if (KUCREC.KUCYPOFT == "00") /* there are no po# requirements*/
    return;
  end
  if (KUCREC.KUCYPOFT == "01") /* po# only is required*/
    OP0CW01.OP0CWARN = 1;
  end
  if (KUCREC.KUCYPOFT == "02") /* po#/hardcopy is required*/
    OP0CW01.OP0CWARN = 2;
  end
  if (KUCREC.KUCYPOFT == "03") /* po#/hardcopy/confirm required*/
    OP0CW01.OP0CWARN = 3;
  end
end // end OP0CSAW

// edit base order type
Function OP0CSB1()


  if (OP0CM001.XOBCD == " ")
    OPAREC.OPAERR = "Y";
  else
    if (OP0CM001.XOBCD in XOBTBL.XOBCD /* valid code?*/
     && XOBTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active code?*/
      OP0CM001.XOBDESC = XOBTBL.XOBDESC[sysVar.arrayIndex];
    else
      OPAREC.OPAERR = "Y"; /* set error flag*/
    end
  end

  if (OP0CM001.XOBCD == "MD"
   || OP0CM001.XOBCD == "M1")
    OP1REC.OP1ACNLF = "N";
  else
  end

   /* ***TCS INCLUDE END   08/07/98*****/

  if (OPAREC.OPAERR == "Y")
    converseLib.validationFailed(017); /* order type is not valid*/
    OP0CM001.XOBDESC = " "; /* clear ord type abrv*/
    set OP0CM001.XOBCD cursor, modified, bold;
    OP0CSB4(); /* display all base order types in left*/
                                   /* scrn corner*/
  end

   /* ***WIPRO INCLUDE BEGIN TIMING CHANGES 10/11/99*****/
   /* /timing changes commented out   10/27/99*****/
   /* IF OP0CM001.XPCCD EQ 'KN'*/
   /* OR OP0CM001.XPCCD EQ 'ST';*/
   /* IF OP0CM001.XOBCD EQ 'F1'*/
   /* OR OP0CM001.XOBCD EQ 'F2'*/
   /* OR OP0CM001.XOBCD EQ 'F3'*/
   /* OR OP0CM001.XOBCD EQ 'F4'*/
   /* OR OP0CM001.XOBCD EQ 'F5'*/
   /* OR OP0CM001.XOBCD EQ 'F6';*/
   /* MOVE 'Y' TO OPAREC.OPAERR;   /* for this order type*/
   /* MOVE 1000 TO EZEMNO;         /* futures are not valid for timing*/
   /* MOVE ' ' TO OP0CM001.XOBDESC;/* clear ord type abrv*/
   /* SET OP0CM001.XOBCD CURSOR,MODIFIED,BRIGHT;*/
   /* END;*/
   /* END;*/

   /* ***WIPRO INCLUDE END   TIMING CHANGES 10/117/98*****/
   /* ***TCS INCLUDE BEGIN 08/07/98*****/


     /* international airborne edit:  if using 'as' order class,*/
     /* base ot must be 's1'.*/

  if (OP1REC.XDVCD == "02")
    if (OP0CM001.XOCCD == "AS"
     && OP0CM001.XOBCD != "S1")
      converseLib.validationFailed(797); /* order type must be 's1'*/
      OP0CM001.XOBDESC = " "; /* clear ord type abrv*/
      OPAREC.OPAERR = "Y"; /* for this order class*/
      set OP0CM001.XOBCD cursor, modified, bold;
    end
  end

end // end OP0CSB1

// edit gpc code
Function OP0CSB2()


  if (OP0CM001.XGPCD == " ")
    OPAREC.OPAERR = "Y";
    converseLib.validationFailed(483); /* gpc code is required*/
  else
    if (OP0CM001.XGPCD in XGPTBL.XGPCD /* valid code?*/
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active code?*/
      OP0CM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    else
      OPAREC.OPAERR = "Y"; /* set error flag*/
      converseLib.validationFailed(138); /* gpc code not valid*/
    end
  end

  if (OPAREC.OPAERR == "Y")
    OP0CM001.XGPABRV = " "; /* clear ord type abrv*/
    set OP0CM001.XGPCD cursor, modified, bold;
    OP0CSB5(); /* display all gpc codes in left scrn corner*/
  end


end // end OP0CSB2

// get system ord type via xvotbl
Function OP0CSB3()


   /* --------------------------------------------------------*/
   /* Equipment check*/
   /* --------------------------------------------------------*/

  if (OP0CM001.XPCCD != OPWREC01.XPCCK) /* prod cat check for equip*/
    OPWREC01.XPCCK = OP0CM001.XPCCD;
  else
  end

    /* get system order type from xvo table*/

  OP0CW01.OP0CWOMF = "N"; /* reset flag*/
  OP1REC.XOTCD = " ";
  sysVar.arrayIndex = 1;




   /* ************* TCS INCLUDE BEGIN ***********/


  set VXVO0001 empty;
  set SQLCA empty;
  VXVO0001.XOBCD = OP0CM001.XOBCD; /* valid gpc code*/
  VXVO0001.XGPCD = OP0CM001.XGPCD; /* valid gpc code*/
  VXVO0001.XSOCD = OP1REC.XSOCD; /* valid salesoffice code*/
  VXVO0001.XDVCD = COMMAREA.XDVCD; /* valid division*/
  VXVO0001.XBCCD = OP1REC.XBCCD; /* valid brand code*/
  VXVO0001.XPC-PROD-CAT-CD = OPWREC01.XPCCK; /* valid category code*/
  VXVO0001.XXXSTAT = "A"; /* active status code*/

  call "VXVO0001" ("S4", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* open cursor*/

  if (SQLCA.VAGen_SQLCODE != 0) /* invalid cursor open*/
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VXVO0001";
    TA1REC.TA1TBLKE = VXVO0001-KEY;
    TA1REC.TA1LOCAT[3] = "OP0CSB3";
    TA1REC.TA1LOCAT[4] = "VXVO0001";
    XSOPS02();
  else
    call "VXVO0001" ("N4", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* first ocurrence*/

    if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
      OP1REC.XOBCD = OP0CM001.XOBCD; /* base order type*/
      OP1REC.XGPCD = OP0CM001.XGPCD; /* gpc code*/
      OP1REC.XOTCD = VXVO0001.XOTCD; /* system order type*/
      OP0CW01.OP0CWOMF = "Y"; /* turn on flag*/
      set OP0CM001.XOBCD normal;
      set OP0CM001.XGPCD normal;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/
          /* next sentence*/
      else
        TA1REC.TA1DBASE = "DCORP";
        TA1REC.TA1TBLVU = "VXVO0001";
        TA1REC.TA1TBLKE = VXVO0001-KEY;
        TA1REC.TA1LOCAT[3] = "OP0CSB3";
        TA1REC.TA1LOCAT[4] = "VXVO0001";
        XSOPS02();
      end
    end
  end

  call "VXVO0001" ("C4", SQLCA, VXVO0001) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/

  if (SQLCA.VAGen_SQLCODE != 0) /* invalid cursor close*/
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VXVO0001";
    TA1REC.TA1TBLKE = VXVO0001-KEY;
    TA1REC.TA1LOCAT[3] = "OP0CSB3";
    TA1REC.TA1LOCAT[4] = "VXVO0001";
    XSOPS02();
  end

   /* **************** TCS INCLUDE END *********************/


  if (OP0CW01.OP0CWOMF == "N") /* if nothing was found to load in here*/
    converseLib.validationFailed(923); /* prod/cat not valid for brand, etc*/
    OPAREC.OPAERR = "Y"; /* set error flag*/
    set OP0CM001.XOBCD cursor, modified, bold;
    set OP0CM001.XGPCD modified, bold;
  end



end // end OP0CSB3

// display help table base ordtyp
Function OP0CSB4()


      /* build help table for user - base order types*/

  OP0CM001.OP0CMHTI = "ORDER TYPES"; /* set help title*/
  sysVar.arrayIndex = 1; /* table subscript*/
  OPAREC.OPASUB = 1; /* map subscript*/

  while (XOBTBL.XOBCD[sysVar.arrayIndex] != "99" /* not end of table*/
   && OPAREC.OPASUB < 23)
    if (XOBTBL.XXXSTAT[OPASUB] == "A") /* active table entry*/
      OP0CM001.OP0CMHCD[OPASUB] = XOBTBL.XOBCD[sysVar.arrayIndex]; /* move code*/
      OP0CM001.OP0CMHAB[OPASUB] = XOBTBL.XOBABRV[sysVar.arrayIndex];
                                   /* move abrv*/
      OPAREC.OPASUB = OPAREC.OPASUB + 1; /* increment map index*/
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end


end // end OP0CSB4

// build help table for gpc codes
Function OP0CSB5()


      /* build help table for user - gpc codes*/

  OP0CM001.OP0CMHTI = " GPC CODES "; /* set help title*/
  sysVar.arrayIndex = 1; /* table subscript*/
  OPAREC.OPASUB = 1; /* map subscript*/

  while (XGPTBL.XGPCD[sysVar.arrayIndex] != "99" /* not end of table*/
   && OPAREC.OPASUB < 23)
    if (XGPTBL.XXXSTAT[OPASUB] == "A") /* active table entry*/
      OP0CM001.OP0CMHCD[OPASUB] = XGPTBL.XGPCD[sysVar.arrayIndex]; /* move code*/
      OP0CM001.OP0CMHAB[OPASUB] = XGPTBL.XGPABRV[sysVar.arrayIndex];
                                   /* move abrv*/
      OPAREC.OPASUB = OPAREC.OPASUB + 1; /* increment map index*/
    end
    sysVar.arrayIndex = sysVar.arrayIndex + 1;
  end


end // end OP0CSB5

// apparel xsocd conversions
Function OP0CSB6()

   /* *************************************************************/
   /* If the commarea sales office (logon sales office) is '01',**/
   /* '02', or '03' on an apparel order, use sales office '20'. **/
   /* Do not change the xsocd in the commarea.                  **/
   /* *************************************************************/

  OP1REC.XSOCD = COMMAREA.XSOCD; /* init op1rec.xsocd*/

  if (OP0CM001.XGPCD == "03") /* if an apparel order*/
    if (COMMAREA.XSOCD == "03") /* or sales office = '03'*/
      OP1REC.XSOCD = "20"; /* move '20' to the ord hdr*/
    end
  end

end // end OP0CSB6

// Get brand for user's logon
Function OP0CSBC()

   /* ----------------------------------------------------------*/
   /* Get the brand code for the user's logon.*/
   /* ----------------------------------------------------------*/
  KUYREC.XXXUSRID = COMMAREA.CAUSERID;
  call "IO0550" ("SA", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* Good*/
   || SQLCA.VAGen_SQLCODE == 100) /* Not found*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   ";
    TA1REC.TA1TBLVU = "VSVREP01";
    TA1REC.TA1TBLKE = KUYREC.XXXUSRID;
    TA1REC.TA1LOCAT[3] = "OP0CSBC ";
    TA1REC.TA1LOCAT[4] = "IO0550  ";
    try
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* Clear user commarea*/
    XSPF4(); /* Invoke master menu*/
    exit program; /* Quit if unable to invoke menu*/
  end

   /* -----------------------------------------------------------*/
    /* Display an error message if the service rep record*/
    /* cannot be used.*/
   /* -----------------------------------------------------------*/
  if (SQLCA.VAGen_SQLCODE == 100
   || KUYREC.XXXSTAT != "A")
    converseLib.validationFailed(582); /* Brand for logon not found.*/
    OP1REC.XBCCD = " ";
  else
    OP1REC.XBCCD = KUYREC.XBCCD;
  end
end // end OP0CSBC

// Get company rec for comp
Function OP0CSC1()
   /* Use the comp number as the key.*/

  KUCREC.KUCCOID = OP0CM001.OP1CMPNB;


   /* Get a specific company record.*/

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};


   /* Abend if a DB2 error occured.*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* Next sentenence - expected return codes were found.*/

  else
    TA1REC.TA1DBASE = "DCUST   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCMPNY01"; /* Table view*/
    OP0CW01.OP0CWFCO = OP0CM001.OP1CMPNB; /* Format key*/
    TA1REC.TA1TBLKE = OP0CW01.OP0CWFCO; /* Key value*/
    TA1REC.TA1LOCAT[2] = "OP0CSC1 "; /* Statement group*/
    TA1REC.TA1LOCAT[3] = "IO0240  "; /* I/O mod name*/
    TA1REC.TA1LOCAT[4] = "S       "; /* Requested action*/
    XSOPS02(); /* Abend routine*/
  end
end // end OP0CSC1

// Company level comp edits
Function OP0CSC2()
   /* Comp must be an active company record.*/

  if (KUCREC.XXXSTAT != "A")
    converseLib.validationFailed(544); /* Comp number is inactive.*/
    OPAREC.OPAERR = "Y"; /* Set error flag.*/
    set OP0CM001.OP1CMPNB cursor, modified, bold;
    return; /* Get out of comp edits.*/
  end


   /* Comp must have an account type of in-house.*/

  sysVar.arrayIndex = 1;
  if (KUCREC.XAUCD in XAUTBL.XAUCD from sysVar.arrayIndex)
    if (XAUTBL.XATCD[sysVar.arrayIndex] != "06")
      converseLib.validationFailed(545); /* Invalid comp number.*/
      OPAREC.OPAERR = "Y"; /* Set error flag.*/
      set OP0CM001.OP1CMPNB cursor, modified, bold;
      return; /* Get out of comp edits.*/
    end
  else
     /* Account class was not found in the table.*/

    converseLib.validationFailed(545); /* Invalid comp number.*/
    OPAREC.OPAERR = "Y"; /* Set error flag.*/
    set OP0CM001.OP1CMPNB cursor, modified, bold;
    return; /* Get out of comp edits.*/
  end


   /* NIL sample orders can only use a comp number with an*/
   /* account class of "NIL samples".*/

  if (OP1REC.XDVCD == "02"
   && OP0CM001.XOBCD == "S1"
   && KUCREC.XAUCD != "61"
   && KUCREC.XAUCD != "67"
   && KUCREC.XAUCD != "94")
    converseLib.validationFailed(548); /* Account class invalid.*/
    OPAREC.OPAERR = "Y"; /* Set error flag.*/
    set OP0CM001.OP1CMPNB cursor, modified, bold;
    return; /* Get out of comp edits.*/
  end
end // end OP0CSC2

// Check legal entity
Function OP0CSLE()

   /* Company's legal entity must be valid for the brand on the*/
   /* order (comes from the logon originally).*/

  if (OP1REC.XBCCD in XBCTBL.XBCCD
   && XBCTBL.XLECD[sysVar.arrayIndex] == KUCREC.XLECD)
     /* next sentence*/
  else
    converseLib.validationFailed(583); /* Brand not valid for customer*/
    OPAREC.OPAERR = "Y";
    OP0CW01.OP0CWCUF = "Y";
    set OP0CM001.OP0CMCO cursor, modified, bold;
    set OP0CM001.OP0CMST modified, bold;
    set OP0CM001.OP0CMDPT modified, bold;
  end
end // end OP0CSLE

// save bulk order need date
Function OP0CSNT()


       /* ******************************************************/
       /* * this statement group reads save the               **/
       /* * need date, warehouse and gpc code of the bulk     **/
       /* * order which has available quantities for draws    **/
       /* ******************************************************/


  OP0CW01.OP0CWBNT = OP1REC.OP1CUNDT; /* save bulk ord need date*/
  OP0CW01.OP0CWDSA = OP1REC.OP1DSADT; /* save bulk ord d-s-a-dt*/
  OP0CW01.XWHCD = OP1REC.XWHCD; /* save bulk ord warehouse*/
  OP0CW01.XGPCD = OP1REC.XGPCD; /* save bulk ord gpc code*/
  OP0CW01.SP1ID = OP1REC.SP1ID; /* save bulk sales program*/


  if (OP0CW01.OP0CWDSA == 0) /* no dont-ship-after-dt*/
    OP0CW01.OP0CWDSA = 99999999;
  end


       /* the entered need date for the draw order*/
       /* must be => bulk order need date and <= bulk*/
       /* order dont-ship-after-date.*/

  OP0CW01.OP0CWVNT = "Y"; /* set valid need date flag*/

  if (OPWREC.XBDCD == "4") /* rebook bulk*/
    return;
  end

  if (OPWREC.OPWDNDT > 0)
    if (OPWREC.OPWDNDT >= OP0CW01.OP0CWBNT
     && OPWREC.OPWDNDT <= OP0CW01.OP0CWDSA)
       /* next sentence*/
    else
      OP0CW01.OP0CWVNT = "N";
      converseLib.validationFailed(293); /* needdate mustbe between bulk order*/
                                 /* ; need date and dont-shp-after-dt*/
    end
  end



   /* ************************************************************/
end // end OP0CSNT

// edit entered by service rep id
Function OP0CSZ2()



      /* *********************************************************/
      /* * this statement group edits the entered by service    **/
      /* * rep id                                               **/
      /* *********************************************************/




      /* verify that the service rep id exists in the xsv table*/

  KUYREC.XXXUSRID = OPWREC.OPWENTLN; /* load key - user id*/
  call "IO0550" ("SA", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/


      /* check db2 return code*/

  if (SQLCA.VAGen_SQLCODE == 0   /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100 /* check for notfnd rc*/
   || SQLCA.VAGen_SQLCODE == -811) /* check for notfnd rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST   "; /* data base name*/
    TA1REC.TA1TBLVU = "VSVREP01"; /* table view*/
    TA1REC.TA1TBLKE = KUYREC.XXXUSRID; /* key value*/
    TA1REC.TA1LOCAT[3] = "OP0CSZ2 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0550  "; /* i/o mod name*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* invoke syncpoint rollback*/
    try
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end /* call abend formatter*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    XSPF4(); /* invoke master menu*/
    exit program;
  end


      /* if not found or not active then error*/

  if (SQLCA.VAGen_SQLCODE == 100  /* check for notfnd rc*/
   || SQLCA.VAGen_SQLCODE == -811 /* check for more than one*/
   || KUYREC.XXXSTAT != "A")      /* check for active id*/
    OP0CM001.XXXUSRID = " ";
  else
    OP0CM001.KUYREPNM = KUYREC.KUYREPNM; /* move rep name to map*/
    OP0CM001.XXXUSRID = KUYREC.XXXUSRID; /* load key - user id*/
  end



   /* *************************************************************/
end // end OP0CSZ2

//*** RECORD=OP0CW01 ****
// op0c program misc working storage.
// 
// Maintenance history:
// 04/10/90  BWATSO  Bug 309
//                   Added fields KUCGRP, KUNGRP, and WFCO with
//                   its associated fields.  Also increased the
//                   size of WSGR.
// 05/30/90  BWATSO  Brand code changes
//                   Added xlecd.
// 05/23/91  dharri  #642 - added op0cwfld, fd1, fd2, fd3 to
//                   format key to kujrec for display.  added
//                   op0cwhd1, lit, dep to format dept self id.
// 06/11/91  dlegg   data base changes. length changed from
//                   1177 to 1122 due to changes in KUCGRP
//                   and KUNGRP.
// 10/08/91  dmeier  data base changes. length changed from
//                   1122 to 1133 due to changes in KUCGRP
// 03/11/92  JLoyer  DB2 chgs: change length from 1133 to 1138
//                   due to changes in KUCGRP.
// 07/07/93  gcalki  added divert order flag.  length changed
//                   to 1231.
// 08/09/93  bbake2  Aug/93 DB2 changes, length changed from
//                   1231 to 1232, increase to KUCREC.
// 11/10/93  schase  Nov/93 DB2 changes, length changed from
//                   1232 to 1223, decrease to KUCREC.
// 12/20/93  gcalki  added xccidx and xx-stat-found flag.
// 
// 03/17/00  SBHARA  ADDED OB0IW-US-ZIP5,OB0IW-US-ZIP,
//                   OB0IW-SUB.ALSO INCREASED THE GROUP LENGTH
//                   FROM 1584 TO 1590
// 
// 08/08/00  RHARAT  ADDED OP0CW-FORCE-XOC-4NIL as part of
//                   canada divestiture changes.
// ***********************
Record OP0CW01 type basicRecord
  5 OP0CWSGR OP0CWSGR ; 
    10 OP0CWTBR OP0CWTBR ; 
    10 OP0CWBNT OP0CWBNT ; 
    10 XWHCD XWHCD ; 
    10 XGPCD XGPCD ; 
    10 SP1ID SP1ID ; 
    10 XOPCD XOPCD ; 
    10 OP0CWDSA OP0CWDSA ; 
    10 OP0CWGBF OP0CWGBF ; 
    10 OP0CWVNT OP0CWVNT ; 
    10 OP0CWAAF OP0CWAAF ; 
    10 OP0CWLDF OP0CWLDF ; 
    10 OP0CW1SA OP0CW1SA ; 
    10 OP0CWOSR OP0CWOSR ; 
    10 OP0CW1BA OP0CW1BA ; 
    10 OP0CWOBR OP0CWOBR ; 
    10 XOTBOFL XOTBOFL ; 
    10 OP0CWFLG OP0CWFLG ; 
      15 OP0CWCUF OP0CWCUF ; 
      15 OP0CWECF OP0CWECF ; 
      15 OP0CWEZF OP0CWEZF ; 
      15 OP0CWOCF OP0CWOCF ; 
      15 OP0CWOBF OP0CWOBF ; 
      15 OP0CWOSF OP0CWOSF ; 
      15 OP0CWUBF OP0CWUBF ; 
      15 OP0CWUSF OP0CWUSF ; 
    10 OP0CWCAD OP0CWCAD ; 
      15 OP0CWCCT OP0CWCCT ; 
      15 * char(1) ; 
      15 OP0CWCST OP0CWCST ; 
      15 * char(1) ; 
      15 OP0CWCZP OP0CWCZP ; 
    10 OP0CWCCN OP0CWCCN ; 
      15 XCTCD XCTCD ; 
      15 * char(1) ; 
      15 XCTDESC XCTDESC ; 
    10 OP0CWKOI OP0CWKOI ; 
      15 OP0CWCUS OP0CWCUS ; 
        20 OP0CWCUN OP0CWCUN ; 
      15 OP0CWSTO OP0CWSTO ; 
        20 OP0CWSTN OP0CWSTN ; 
      15 OP0CWDPT OP0CWDPT ; 
        20 OP0CWDPN OP0CWDPN ; 
      15 OP0CWZP OP0CWZP ; 
        20 OP0CWZPN OP0CWZPN ; 
    10 OP0CWMSG OP0CWMSG ; 
      15 OP0CMESG OP0CMESG ; 
      15 * char(1) ; 
      15 XCCCD XCCCD ; 
      15 * char(1) ; 
      15 XCCDESC XCCDESC ; 
    10 TF1ABRV TF1ABRV ; 
    10 OP0CWCUK OP0CWCUK ; 
      15 OP0CWCUC OP0CWCUC ; 
      15 OP0CWSTR OP0CWSTR ; 
      15 OP0CWCID OP0CWCID ; 
    10 OP0CWPDF OP0CWPDF ; 
    10 OP0CWPDO OP0CWPDO ; 
    10 OP0CWMCF OP0CWMCF ; 
    10 OP0CWSED OP0CWSED ; 
    10 OP0CWOMF OP0CWOMF ; 
    10 OP0CWXOT OP0CWXOT ; 
    10 OP0CWDAT OP0CWDAT ; 
      15 OP0CWDCC OP0CWDCC ; 
      15 OP0CWYMD OP0CWYMD ; 
        20 OP0CWDYR OP0CWDYR ; 
        20 OP0CWDMT OP0CWDMT ; 
        20 OP0CWDDA OP0CWDDA ; 
    10 OP0CWTK1 OP0CWTK1 ; 
      15 OP0CWTK2 OP0CWTK2 ; 
      15 OP0CWTK3 OP0CWTK3 ; 
      15 OP0CWTK4 OP0CWTK4 ; 
      15 OP0CWTK5 OP0CWTK5 ; 
      15 OP0CWTK6 OP0CWTK6 ; 
    10 KUCGRP KUCGRP ; 
    10 KUNGRP KUNGRP ; 
    10 OP0CWFCO OP0CWFCO ; 
    10 OP0CWFCU OP0CWFCU ; 
      15 OP0CWFC1 OP0CWFC1 ; 
      15 OP0CWFC2 OP0CWFC2 ; 
      15 OP0CWFC3 OP0CWFC3 ; 
      15 OP0CWFC4 OP0CWFC4 ; 
    10 XLECD XLECD ; 
    10 OP0CWSS1 OP0CWSS1 ; 
    10 OP0CWARN OP0CWARN ; 
    10 OP0CWFLD OP0CWFLD ; 
      15 OP0CWFD1 OP0CWFD1 ; 
      15 OP0CWFD2 OP0CWFD2 ; 
      15 OP0CWFD3 OP0CWFD3 ; 
    10 OP0CWHD1 OP0CWHD1 ; 
      15 OP0CWLIT OP0CWLIT ; 
      15 KUJSLFID KUJSLFID ; 
    10 OP0CW1ST OP0CW1ST ; 
    10 OP0CW-CUSTERR1 OP0CW-CUSTERR1 ; 
      15 OP0CW-ERR-LIT1 OP0CW-ERR-LIT1 ; 
      15 OP0CW-ERR-SIGN OP0CW-ERR-SIGN ; 
      15 OP0CW-ERR-CODE OP0CW-ERR-CODE ; 
      15 OP0CW-ERR-LIT2 OP0CW-ERR-LIT2 ; 
      15 OP0CW-ERR-TYPE OP0CW-ERR-TYPE ; 
      15 OP0CW-ERR-LIT3 OP0CW-ERR-LIT3 ; 
      15 OP0CW-ERR-NAME OP0CW-ERR-NAME ; 
      15 * char(1) ; 
      15 OP0CW-ERR-VIEW OP0CW-ERR-VIEW ; 
    10 OP0CW-CUSTERR2 OP0CW-CUSTERR2 ; 
      15 OP0CW-ERR-LIT4 OP0CW-ERR-LIT4 ; 
      15 OP0CW-ERR-CUST OP0CW-ERR-CUST ; 
      15 * char(1) ; 
      15 OP0CW-ERR-STOR OP0CW-ERR-STOR ; 
      15 * char(1) ; 
      15 OP0CW-ERR-DEPT OP0CW-ERR-DEPT ; 
      15 * char(1) ; 
      15 OP0CW-ERR-GPC OP0CW-ERR-GPC ; 
    10 OP0CW-VOPPGM-READ OP0CW-VOPPGM-READ ; 
    10 * char(1) ; 
    10 OP0CW-DIVERT-ORDER-FL OP0CW-DIVERT-ORDER-FL ; 
    10 OP0CW-XCCIDX OP0CW-XCCIDX ; 
    10 OP0CW-XCC-STAT-FOUND OP0CW-XCC-STAT-FOUND ; 
    10 OP0CW-XPC-FND OP0CW-XPC-FND ; 
    10 OP0CW-US-ZIP5 char(5) ; // ZIPCODE FOR USA
      15 OP0CW-US-ZIP char(1) [5] ; // ZIP CODE FOR USA
    10 OP0CW-SUB num(1) ; // SUBSCRIPT
    10 OP0CW-FORCE-XOC-4NIL char(1) ; // force order class code for NIL
end // end OP0CW01

//*** RECORD=OP0CW02 ****
// op0c program misc working storage.
// ************************************************************
// *    m a i n t e n a n c e  l o g
// *
// *  ref #   date    who     desc
// *  ----   -----    ---     ----
// *
// *  000    072090   zlefko  add op0cwcgs field - cogs err flg
// *  000    060496   dliddl  increases OP0CWSZP to 6 chars
// *
// ***********************
Record OP0CW02 type basicRecord
  5 OP0CWDET OP0CWDET ; 
    10 OP0CWSUB OP0CWSUB ; 
    10 OP0CWSIF OP0CWSIF ; 
    10 OP0CWSL1 OP0CWSL1 ; 
      15 OP0CWSLT OP0CWSLT ; 
      15 OP0CWSNM OP0CWSNM ; 
      15 OP0CWFL1 OP0CWFL1 ; 
    10 OP0CWSL2 OP0CWSL2 ; 
      15 OP0CWFL2 OP0CWFL2 ; 
      15 OP0CWSA1 OP0CWSA1 ; 
      15 OP0CWFL3 OP0CWFL3 ; 
    10 OP0CWSL3 OP0CWSL3 ; 
      15 OP0CWFL4 OP0CWFL4 ; 
      15 OP0CWSA2 OP0CWSA2 ; 
      15 OP0CWFL5 OP0CWFL5 ; 
    10 OP0CWSL4 OP0CWSL4 ; 
      15 OP0CWFL6 OP0CWFL6 ; 
      15 OP0CWSA3 OP0CWSA3 ; 
      15 OP0CWFL7 OP0CWFL7 ; 
    10 OP0CWSL5 OP0CWSL5 ; 
      15 OP0CWFL8 OP0CWFL8 ; 
      15 OP0CWSCT OP0CWSCT ; 
      15 OP0CWSST OP0CWSST ; 
      15 OP0CWFL9 OP0CWFL9 ; 
      15 OP0CWSZP OP0CWSZP ; 
      15 OP0CWSCN OP0CWSCN ; 
      15 OP0CWSCD OP0CWSCD ; 
    10 OP0CWSIL OP0CWSIL ; 
      15 OP0CWSID OP0CWSID [5] ; 
        20 OP0CWSDP OP0CWSDP ; 
        20 OP0CWSSI OP0CWSSI ; 
    10 OP0CWCGS OP0CWCGS ; 
end // end OP0CW02

//*** RECORD=OP0CW03 ****
// op0c program misc working storage.
// ***********************
Record OP0CW03 type basicRecord
  5 OP0CWKEY OP0CWKEY ; 
    10 OP0CW3CO OP0CW3CO ; 
    10 OP0CW3ST OP0CW3ST ; 
    10 OP0CW3NX OP0CW3NX ; 
    10 OP0CW3GP OP0CW3GP ; 
end // end OP0CW03

Record OP0CW04 type basicRecord
  5 OP0CWAGR OP0CWAGR ; 
    10 OP0CWORP OP0CWORP ; 
    10 OP0CWOAG OP0CWOAG ; 
    10 OP0CWNAG OP0CWNAG ; 
    10 * char(2) ; 
    10 OP0CWCSN OP0CWCSN ; 
      15 OP0CWCSB OP0CWCSB ; 
      15 OP0CWCSC OP0CWCSC ; 
end // end OP0CW04

Record OP0CW05 type basicRecord // VAGen Info - redefined OP0CW04
  5 OP0CWRGR OP0CWRGR ; 
    10 OP0CWORP OP0CWORP ; 
    10 OP0CWOAG OP0CWOAG ; 
    10 OP0CWAG1 OP0CWAG1 ; 
    10 OP0CWAG2 OP0CWAG2 ; 
    10 * char(1) ; 
    10 OP0CWSCS OP0CWSCS ; 
      15 OP0CWCSE OP0CWCSE ; 
      15 * num(1) ; 
end // end OP0CW05

// message text
DataItem OP0CMESG char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format error for ku1540
DataItem OP0CW-CUSTERR1 char(59)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format error for ku150
DataItem OP0CW-CUSTERR2 char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// divert order flag
DataItem OP0CW-DIVERT-ORDER-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sql code
DataItem OP0CW-ERR-CODE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error cust
DataItem OP0CW-ERR-CUST num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OP0CW-ERR-DEPT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OP0CW-ERR-GPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error text1
DataItem OP0CW-ERR-LIT1 char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error text2
DataItem OP0CW-ERR-LIT2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error text3
DataItem OP0CW-ERR-LIT3 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error text4
DataItem OP0CW-ERR-LIT4 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// db2 table
DataItem OP0CW-ERR-NAME char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sql sign
DataItem OP0CW-ERR-SIGN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error store
DataItem OP0CW-ERR-STOR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sql function
DataItem OP0CW-ERR-TYPE char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// db2 view
DataItem OP0CW-ERR-VIEW char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// read flag for prog ctl table
DataItem OP0CW-VOPPGM-READ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// divert order flag
DataItem OP0CW-XCC-STAT-FOUND char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// divert order flag
DataItem OP0CW-XCCIDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// divert order flag
DataItem OP0CW-XPC-FND char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// one tm bil rec action(a,c,d)
DataItem OP0CW1BA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// one tm shp rec action(a,c,d)
DataItem OP0CW1SA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0CW1ST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// company id
DataItem OP0CW3CO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// gpc
DataItem OP0CW3GP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dept id
DataItem OP0CW3NX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// store
DataItem OP0CW3ST num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// address action flag (a,c,d)
DataItem OP0CWAAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 3/4 of new agency
DataItem OP0CWAG1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1/4 of new agency + space
DataItem OP0CWAG2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// definitions for audit rec
DataItem OP0CWAGR char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po# hold warning flag
DataItem OP0CWARN num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bulk order need date
DataItem OP0CWBNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cust city, st, zip area
DataItem OP0CWCAD char(39)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust country cd, desc area
DataItem OP0CWCCN char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust city
DataItem OP0CWCCT char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// invalid cogs flg
DataItem OP0CWCGS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-cust-ord-id
DataItem OP0CWCID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem OP0CWCSB num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OP0CWCSC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OP0CWCSE num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cust company
DataItem OP0CWCSN num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cust state
DataItem OP0CWCST char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// company id
DataItem OP0CWCUC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// customer valid flag
DataItem OP0CWCUF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer key
DataItem OP0CWCUK char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust company num
DataItem OP0CWCUN num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cust company
DataItem OP0CWCUS char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust zip
DataItem OP0CWCZP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format date
DataItem OP0CWDAT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// format century
DataItem OP0CWDCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// format day
DataItem OP0CWDDA num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// details
DataItem OP0CWDET char(597)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format month
DataItem OP0CWDMT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// cust department num
DataItem OP0CWDPN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cust department
DataItem OP0CWDPT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bulk order d-s-after-dt
DataItem OP0CWDSA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// format year
DataItem OP0CWDYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// edit cust flag
DataItem OP0CWECF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// edit zip flag
DataItem OP0CWEZF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Formated customer - co
DataItem OP0CWFC1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Formated customer - store
DataItem OP0CWFC2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Formated customer - dept
DataItem OP0CWFC3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Formated customer - GPC
DataItem OP0CWFC4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Formated company number
DataItem OP0CWFCO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Formated customer number
DataItem OP0CWFCU char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DISPLAY KUCCOID
DataItem OP0CWFD1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FILLER
DataItem OP0CWFD2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DISPLAY XNXCD
DataItem OP0CWFD3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// filler 1
DataItem OP0CWFL1 char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler 2
DataItem OP0CWFL2 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler 3
DataItem OP0CWFL3 char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler 4
DataItem OP0CWFL4 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler 5
DataItem OP0CWFL5 char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler6
DataItem OP0CWFL6 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler 7
DataItem OP0CWFL7 char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler 8
DataItem OP0CWFL8 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler 9
DataItem OP0CWFL9 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DISPLAY KEY
DataItem OP0CWFLD char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// edit flags
DataItem OP0CWFLG char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// good bulk order flag
DataItem OP0CWGBF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FORMATTED DEPT SELF ID
DataItem OP0CWHD1 char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key
DataItem OP0CWKEY char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ko0i return area
DataItem OP0CWKOI char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// lead days edit flag (n,y)
DataItem OP0CWLDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// LITERAL FIELD FOR 'DEPT '
DataItem OP0CWLIT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// mail ord cust check flag
DataItem OP0CWMCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// replaces err msg #35
DataItem OP0CWMSG char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new (override) agency
DataItem OP0CWNAG char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// old agency
DataItem OP0CWOAG char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// one time bill valid flag
DataItem OP0CWOBF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// one time bill to addr rec
DataItem OP0CWOBR char(340)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order class valid flag
DataItem OP0CWOCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order type match found flag
DataItem OP0CWOMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// old rep
DataItem OP0CWORP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// one time ship valid flag
DataItem OP0CWOSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// one time ship to addr rec
DataItem OP0CWOSR char(340)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prod deadline found flag
DataItem OP0CWPDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prod deadline found flag
DataItem OP0CWPDO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// definitons for audit rec
DataItem OP0CWRGR char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SHIP-TO ADDR LINE 1
DataItem OP0CWSA1 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ship-to addr line 2
DataItem OP0CWSA2 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ship-to addr line 3
DataItem OP0CWSA3 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ship-to country description
DataItem OP0CWSCD char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ship-to country
DataItem OP0CWSCN char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// shortened company
DataItem OP0CWSCS num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SHIP-TO CITY
DataItem OP0CWSCT char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dept for special instr
DataItem OP0CWSDP char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save effective date
DataItem OP0CWSED int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// op0c ws group
DataItem OP0CWSGR char(1591)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special instr occurs 5 times
DataItem OP0CWSID char(56)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// spec instr flag
DataItem OP0CWSIF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special instr group
DataItem OP0CWSIL char(280)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line 1 for ship-to
DataItem OP0CWSL1 char(56)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line 2 for ship-to
DataItem OP0CWSL2 char(64)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line 3 for ship-to
DataItem OP0CWSL3 char(64)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line 4 for ship-to
DataItem OP0CWSL4 char(64)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line 5 for ship-to
DataItem OP0CWSL5 char(66)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ship-to literal
DataItem OP0CWSLT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ship-to name
DataItem OP0CWSNM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// subscript 1
DataItem OP0CWSS1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// special instr
DataItem OP0CWSSI char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ship-to state
DataItem OP0CWSST char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust store num
DataItem OP0CWSTN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cust store
DataItem OP0CWSTO char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// store id
DataItem OP0CWSTR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// sub
DataItem OP0CWSUB num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ship-to zip
DataItem OP0CWSZP char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved previous taken by rep
DataItem OP0CWTBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// errdiag key info
DataItem OP0CWTK1 char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag key info
DataItem OP0CWTK2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// errdiag key info
DataItem OP0CWTK3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// errdiag key info
DataItem OP0CWTK4 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// errdiag key info
DataItem OP0CWTK5 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// errdiag key info
DataItem OP0CWTK6 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update one time bill flag
DataItem OP0CWUBF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update one time ship flag
DataItem OP0CWUSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// valid need date flag
DataItem OP0CWVNT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save order type
DataItem OP0CWXOT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format yymmdd
DataItem OP0CWYMD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust ship zip
DataItem OP0CWZP char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust ship zip num
DataItem OP0CWZPN num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

