package op0t;
import corpcom1.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import ku.common.*;
import op.common.*;
import os.common.*;
import pc.common.*;
import pg.common.*;
import pw.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=OP0T ****
// ************************************************************
// ***     H O T   M O D E L   S T Y L E   M A I N T .      ***
// ************************************************************
// Application:  OP0T
// Date written: 02/27/89
// Writen by:    schase
// 
// Application Overview:
// 
//    The purpose of the program is to maintain the style
//    side of the hot model group system.
//    This program will:
//      1. Enable the user to enter and maintain the styles in
//         a hot model group.
//      2. Display all styles in a hot model group.
//      3. Allow changes to the effective dates.
//      4. Remove styles from a hot model group.
// ************************************************************
// ***                   MAINTENANCE LOG                    ***
// ************************************************************
//   REF    DATE    WHO   DESCRIPTION
//  ----- -------- ------ -------------------------------------
//  00000 02/27/89 schase created application.
// 
//  00000 04/05/89 schase expand key for style to include color
//                        dimension and gpc code as part of key
//                        for mult. dimensions of same style.
//                        s10, s20, s40, op0tw01 rec.
// 
//  00000 04/05/89 schase enhancement - force use of option
//                        keys (a,c,d) for editting styles. s40
// 
//  00000 04/05/89 schase enhancement - allow user to enter '0'
//                        for color and dimension and default
//                        to '00'. s50 and s10.
//    241 09/21/89 rcoron enhancement - allow user to enter
//                        apparel as long as they are not
//                        put in the same hot model group as
//                        footwear.
//        10/03/89 rcoron correction - fix bug where user can't
//                        pf8 to the next page even when the
//                        first page is already full.  add is
//                        not disallowed on an occupied line
//                        and delete & change options cannot
//                        be used beside a blank line.
// 000000 10/11/89 ssteph fix the last fix to allow six pages
//                        styles to be entered. m001, s30, s88,
//                        w01, w02.
//  # 286 02/07/90 cgrice add minimum quantity to the screen,
//                        and made it left justified so that
//                        the user would not have to press
//                        erase eof when changing it.
//                        m001, s15, s30, s35, s40, s50, s60,
//                        s65, s75, w02, opzrec
//        02/14/91 tfox   regen for db chgs
//  #744  03/11/92 schase fix for hot model edit on product
//                        color. s50
//  #1003 04/01/94 gcalki rename causera to ca-user-workarea-4k
//                        so it could hold opwrec which has
//                        increased to 3072 bytes. (ALL)
//        12/22/97 jflor1 added date and time to the OP0TS70
//                        for the vcolor03 table update.
// *********************
Program OP0T type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  OP0TW01 OP0TW01; // record
  OP0TW02 OP0TW02; // record
  OPAREC OPAREC; // record
  OPWREC OPWREC; // record
  OPXREC OPXREC; // record
  OPZREC OPZREC; // record
  OSAREC OSAREC; // record
  SQLCA SQLCA; // record
  SYCREC SYCREC; // record
  SYLREC SYLREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDMTBL {deleteAfterUse = yes}; // table
  use OP0TM.OP0TM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OP0T001: OP0T001();



    goto OP0T010; /* flow to main line*/


    OP0T010: OP0T010();


    goto OP0T010; /* flow to itself*/


  end // end main
end // end OP0T

// program init
Function OP0T001()



      /* *****************************************************/
      /* **  Initialization for op0t and clear map fields  ***/
      /* *****************************************************/


  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* release locks*/


  XSENTRY(); /* check entry security*/

  XSSEGTR(); /* non segmented transaction*/

     /* ***************************/
    /* *** set map & recs empty ****/
     /* ***************************/

  set OPWREC empty;
  set OPAREC empty;
  set OPXREC empty;
  set OPZREC empty;
  set OP0TM001 empty;
  set OP0TW01 empty;
  set OP0TW02 empty;


  OP0TM001.OP0TMPRC = "OP0T010"; /* frmt converse mod name*/
  OP0TM001.OP0TMMAP = "OP0TM001"; /* frmt map name*/


  OP0TM001.OP0TMDT = VGVar.currentShortGregorianDate; /* frmt current date*/
  OPAREC.OPACYMD = VGVar.currentShortGregorianDate; /* frmt current date*/
  if (OPAREC.OPACYY > 56) /* set century based on year*/
    OPAREC.OPACCC = 19;
  else
    OPAREC.OPACCC = 20;
  end


  if (COMMAREA.CAFROMAP == "OP0U" /* came from op0u appl*/
   || COMMAREA.CAITEM != " ")     /* or come from another app w/ key*/
    OP0TS05(); /* frmt key, load ws, load map*/
    COMMAREA.CAITEM = " "; /* clean caitem field*/
  end



      /* flow to op0t010*/

end // end OP0T001

// hot model style main line
Function OP0T010()



    /* *********************************************************/
    /* **  This is the mainline process which will converse  ***/
    /* **  to the user, control pfkey processes, and edit    ***/
    /* **  map fields.                                       ***/
    /* **  A valid user response will execute proper         ***/
    /* **  function (add, change, delete) or perform one     ***/
    /* **  of several pfkey functions.  This application     ***/
    /* **  flows to itself.                                  ***/
    /* *********************************************************/



  OP0TM001.OP0TMPGN = OP0TW01.OP0TWTOP + 23;
  OP0TM001.OP0TMPGN = OP0TM001.OP0TMPGN / 24;


   /* ***********************************************************/
  converse OP0TM001 ;
   /* ***********************************************************/


    /* *********************************************************/
    /* **  This section will examine all possible pf keys to ***/
    /* **  determine type of action to be taken.             ***/
    /* **  enter - op0ts20 (edit map fields)                 ***/
    /* **  pf1  - transfer to help application               ***/
    /* **  pf3  - transfer to o/p menu                       ***/
    /* **  pf4  - transfer to system menu                    ***/
    /* **  pf5  - transfer to OP0U application               ***/
    /* **  pf7  - page backward                              ***/
    /* **  pf8  - page forward                               ***/
    /* **  pf19 - refresh map from database                  ***/
    /* **  if any other pfkey selected, format and display   ***/
    /* **  error message.                                    ***/
    /* *********************************************************/


  if (converseVar.eventKey is enter /* go edit map fields*/
   || OPAREC.OPAERR == "Y")         /* error exists*/
    if (converseVar.eventKey is pf19) /* refresh the screen*/
       /* next sentence*/
    else
      OP0TS40(); /* edit all map fields*/
      if (OPAREC.OPAERR == "N"    /* no errors*/
       && OP0TW01.OP0TWUPD == "Y" /* and update is ok*/
       && OP0TW01.OP0TWSEC == "Y") /* and security is ok*/
        OP0TS60(); /* update db2 for chgs on map*/
        if ("CONFIRMED DELETE" in OP0TW01.OP0TWSW /* delete pending*/
         || OPAREC.OPAERR == "Y")                 /* update error*/
           /* do not refresh the screen*/
        else
           /* refresh the screen*/
          OP0TM001.OP0TMKST = " "; /* space-out style color dim*/
          OP0TM001.OP0TMKCL = " "; /* code for selection criteria &*/
          OP0TM001.OP0TMKDM = " "; /* select hot model group.  then*/
          OP0TW01.OP0TWKY2 = "Y"; /* refresh the ws array and the*/
          OP0TS05(); /* screen.*/
        end
      else
        if (OP0TW01.OP0TWKY1 == "Y" /* style key flag on*/
         || OP0TW01.OP0TWKY2 == "Y") /* group key flag on*/
          OP0TS05(); /* format keys for get data*/
        end
      end
    end
  else
    if (converseVar.eventKey is pf1) /* check for system help*/
      XSPF1(); /* help application*/
      OP0TM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      COMMAREA.CATOAP = " ";
    else
      if (converseVar.eventKey is pf3) /* transfer to o/p menu*/
        COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear commarea*/
        COMMAREA.CATOAP = "OP0M"; /* set to app*/
        XSEXIT(); /* invoke transfer routine*/
        OP0TM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* move err msg*/
      else
        if (converseVar.eventKey is pf4) /* transfer to main menu*/
          COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear commarea*/
          XSPF4(); /* invoke master menu routine*/
          OP0TM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* move err msg*/
        else
          if (converseVar.eventKey is pf5) /* transfer to OP0U app*/
            COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear commarea*/
            COMMAREA.CAFROMAP = "OP0T"; /* set from app*/
            COMMAREA.CATOAP = "OP0U"; /* set current app*/
            XSEXIT(); /* invoke transfer routine*/
          else
            if (converseVar.eventKey is pf7) /* page backward*/
              OP0TS87();
            else
              if (converseVar.eventKey is pf8) /* page foreward*/
                OP0TS88();
              else
                if (converseVar.eventKey is pf19) /* refresh the screen*/
                   /* next sentence*/
                else
                  OPAREC.OPAERR = "Y"; /* set error flag on*/
                  converseLib.validationFailed(2); /* pfkey is not valid -- reenter*/
                end
              end
            end
          end
        end
      end
    end
  end


  if (converseVar.eventKey is pf5 /* transfer to group screen*/
   && OPAREC.OPAERR == "N")       /* and no errors*/
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear commarea*/
    COMMAREA.CAFROMAP = "OP0T"; /* set from app*/
    COMMAREA.CATOAP = "OP0U"; /* set current app*/
    XSEXIT(); /* invoke transfer routine*/
  end


  if (converseVar.eventKey is pf19) /* refresh the screen*/
    OPAREC.OPAERR = "N"; /* set error flag off*/
    if (OP0TM001.OP0TMKST != " ") /* use key style*/
      OP0TW01.OP0TWKY1 = "Y"; /* set style key*/
    else
      if (OP0TM001.OP0TMKGR != " ") /* use key group*/
        OP0TW01.OP0TWKY2 = "Y"; /* set group key*/
      else
        converseLib.validationFailed(473); /* please enter sty or grp key*/
      end
    end
    OP0TS05(); /* format keys, load ws, load map*/
  end


      /* fastpath option/item entered*/

  if (OP0TM001.OP0TMXAP != " " /* fastpath option entered*/
   && OPAREC.OPAERR == "N")    /* no errors*/
    COMMAREA.CAITEM = " ";
    COMMAREA.CA-USER-WORKAREA-4K = " ";
    COMMAREA.CATOAP = OP0TM001.OP0TMXAP;
    if (OP0TM001.OP0TMXIT != " ") /* fastpath item entered*/
      COMMAREA.CAITEM = OP0TM001.OP0TMXIT; /* format key*/
    end
    XSEXIT();
    OP0TM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
  end


      /* fastpath item entered with no option*/

  if (OP0TM001.OP0TMXIT != " " /* fastpath item entered*/
   && OP0TM001.OP0TMXAP == " ") /* no fastpath option entered*/
    set OP0TM001.OP0TMXAP cursor; /* position cursor*/
    set OP0TM001.OP0TMXIT bold;
    OP0TM001.VAGen_EZEMSG = "FASTPATH ITEM REQUIRED WITH KEY";
  end


end // end OP0T010

// format keys for db access
Function OP0TS05()


    /* ********************************************************/
    /* **  This statement group is intended to organize key ***/
    /* **  data for database accessing.                     ***/
    /* ********************************************************/


    /* -------------------------------------------------------*/
    /* *  Coming from OP0U.                                  **/
    /* -------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "OP0U" /* come from op0u*/
   && COMMAREA.CAITEM != " ")     /* a group key exists in caitem*/
    OPAREC.OPAERR = "N"; /* set error flag off*/
    OPXREC.OPXHMGRP = COMMAREA.CAITEM;
    COMMAREA.CAFROMAP = " "; /* clear cafromap*/
    COMMAREA.CAITEM = " "; /* clear caitem*/
    OP0TS20(); /* db2 for key group*/
  end


  if (COMMAREA.CAFROMAP != " " /* come from op0u*/
   && COMMAREA.CAITEM != " ")  /* a style key exists in caitem*/
    OPAREC.OPAERR = "N"; /* set error flag off*/
    OPZREC.SY1STNBR = COMMAREA.CAITEM;
    COMMAREA.CAFROMAP = " "; /* clear cafromap*/
    COMMAREA.CAITEM = " "; /* clear caitem*/
    OP0TS10(); /* db2 for key style*/
  end

    /* -------------------------------------------------------*/
    /* *  Format depending on which key flags are on.        **/
    /* -------------------------------------------------------*/

  if (OP0TW01.OP0TWKY1 == "Y") /* style key is on*/
    set OP0TM001.OP0TMKST initialAttributes;
    OPZREC.SY1STNBR = OP0TM001.OP0TMKST; /* format style*/
    OP0TS10(); /* db2 for key style*/
    OP0TW01.OP0TWKY1 = "N"; /* turn key style flag off*/
  else
    if (OP0TW01.OP0TWKY2 == "Y") /* group key is on*/
      set OP0TM001.OP0TMKGR initialAttributes;
      OPXREC.OPXHMGRP = OP0TM001.OP0TMKGR; /* format group*/
      OP0TS20(); /* db2 for key group*/
      OP0TW01.OP0TWKY2 = "N"; /* turn key group flag off*/
    end
  end


  OP0TW01.OP0TWTOP = 1; /* set top of page value*/

  if (OPAREC.OPAERR == "N") /* no errors*/
    OP0TS35(); /* load map from ws array*/
  end


end // end OP0TS05

// load ws from db w/ style key
Function OP0TS10()


    /* ********************************************************/
    /* **  This statement group is intended to load the     ***/
    /* **  working storage array for a key style entered    ***/
    /* **  by a user, or a refresh of the map (pf19 key).   ***/
    /* ********************************************************/


     /* -----------------------------------------------------*/
     /* *  Format key for selecting unique style.           **/
     /* -----------------------------------------------------*/

  if (OP0TM001.OP0TMKCL == " "
   || OP0TM001.OP0TMKCL == "0 "
   || OP0TM001.OP0TMKCL == " 0 "
   || OP0TM001.OP0TMKCL == "  0"
   || OP0TM001.OP0TMKCL == "0 0")
    OP0TM001.OP0TMKCL = "00";
    OPZREC.SY2CLRID = OP0TM001.OP0TMKCL; /* format color*/
  else
    OPZREC.SY2CLRID = OP0TM001.OP0TMKCL; /* format color*/
  end

  if (OP0TM001.OP0TMKDM == " "
   || OP0TM001.OP0TMKDM == "0 "
   || OP0TM001.OP0TMKDM == " 0")
    OP0TM001.OP0TMKDM = "00";
    OPZREC.XDMCD = OP0TM001.OP0TMKDM; /* format dimension*/
  else
    if (OP0TM001.OP0TMKDM in XDMTBL.XDMCD)
      OPZREC.XDMCD = OP0TM001.OP0TMKDM; /* format dimension*/
    else
      set OP0TM001.OP0TMKDM cursor, bold;
      OPAREC.OPAERR = "Y"; /* set error flag on*/
      converseLib.validationFailed(485); /* invalid dimension*/
      return;
    end
  end

  if (OP0TM001.OP0TMKGP == " ")
    OP0TM001.OP0TMKGP = "02";
    OPZREC.XGPCD = OP0TM001.OP0TMKGP; /* format gpc code*/
  else
    OPZREC.XGPCD = OP0TM001.OP0TMKGP; /* format gpc code*/
  end


  OP0TS30(); /* clean entire map and ws array*/


  OP0TS93(); /* select unique style*/


     /* -----------------------------------------------------*/
     /* *  If found then format map key fields (top).       **/
     /* -----------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* found style*/
    OPAREC.OPASUB = 1;
    set OP0TM001.OP0TMKST normal;
    set OP0TM001.OP0TMKCL normal;
    set OP0TM001.OP0TMKDM normal;
    set OP0TM001.OP0TMKGP normal;
    set OP0TM001.OP0TMKGR normal;
    OP0TW01.OP0TWKST = OPZREC.SY1STNBR; /* save good key style in ws*/
    OP0TW01.OP0TWKCL = OPZREC.SY2CLRID; /* save good key color in ws*/
    OP0TW01.OP0TWKDM = OPZREC.XDMCD; /* save good key dimension in ws*/
    OP0TW01.OP0TWKGP = OPZREC.XGPCD; /* save good key gpc in ws*/
    OP0TM001.OP0TMKST = OPZREC.SY1STNBR; /* frmt map key style*/
    OP0TM001.OP0TMKCL = OPZREC.SY2CLRID; /* frmt map key color*/
    OP0TM001.OP0TMKDM = OPZREC.XDMCD; /* frmt map key dimension*/
    OP0TM001.OP0TMKGP = OPZREC.XGPCD; /* frmt map key gpc code*/
    OPXREC.OPXHMGRP = OPZREC.OPXHMGRP; /* format group key*/
    OP0TS90(); /* select set on style*/

       /* -----------------------------------------------------*/
       /* *  If good return, then load all styles to ws array.**/
       /* -----------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 0)
      OP0TS91(); /* fetch next for priming*/
      if (SQLCA.VAGen_SQLCODE == 0)
        OP0TS15(); /* load all styles*/
      end
      OP0TS92(); /* close style cursor*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* style not found*/
      set OP0TM001.OP0TMKST bold;
      set OP0TM001.OP0TMKCL bold;
      set OP0TM001.OP0TMKDM bold;
      set OP0TM001.OP0TMKGP bold;
      set OP0TM001.OP0TMKST cursor;
      OP0TW01.OP0TWKST = " "; /* frmt ws bad key*/
      OPAREC.OPAERR = "Y"; /* set err flag on*/
      converseLib.validationFailed(465); /* style does not exist*/
    end
  end


     /* -----------------------------------------------------*/
     /* *  If no errors, then go get group to format key    **/
     /* *  description on map.                              **/
     /* -----------------------------------------------------*/

  if (OPAREC.OPAERR == "N") /* no errors*/
    OP0TS25(); /* db2 call, format for group*/
  else
    OP0TW01.OP0TWKST = " "; /* clear ws key style in ws*/
    OP0TW01.OP0TWKCL = " "; /* clear ws key style in ws*/
    OP0TW01.OP0TWKDM = " "; /* clear ws key style in ws*/
    OP0TW01.OP0TWKGP = " "; /* clear ws key style in ws*/
    OP0TM001.OP0TMKGR = " "; /* clear old group off map*/
  end



end // end OP0TS10

// loop for load of ws array
Function OP0TS15()


    /* ********************************************************/
    /* **  This statement group is intended to load the     ***/
    /* **  working storage array until no more records to   ***/
    /* **  load.                                            ***/
    /* ********************************************************/


  while (SQLCA.VAGen_SQLCODE != 100) /* load all styles*/
    OSAREC.OSANU8 = OPZREC.OPZHMBDT;
    XPOP200(); /* date reformatting*/
    OP0TW02.OP0TWBEG[OPASUB] = OSAREC.OSACH6; /* load ws*/
    OSAREC.OSANU8 = OPZREC.OPZHMEDT;
    XPOP200(); /* date reformatting*/
    OP0TW02.OP0TWEND[OPASUB] = OSAREC.OSACH6; /* load ws*/
    OP0TW02.OP0TWSTY[OPASUB] = OPZREC.SY1STNBR; /* load ws*/
    OP0TW02.OP0TWCOL[OPASUB] = OPZREC.SY2CLRID; /* load ws*/
    OP0TW02.OP0TWDIM[OPASUB] = OPZREC.XDMCD; /* load ws*/
    OP0TW02.OP0TWIND[OPASUB] = OPZREC.OPZHMIND; /* load ws*/
    OP0TW02.OP0TWQTY[OPASUB] = OPZREC.OPZMNFOQ; /* load ws*/
    OP0TS91(); /* fetch next style*/
    if (SQLCA.VAGen_SQLCODE == 0)
      OPAREC.OPASUB = OPAREC.OPASUB + 1; /* increment sub*/
    end
  end

  OP0TW01.OP0TWMAX = OPAREC.OPASUB; /* set maximum style value*/

  if (OPAREC.OPASUB > 24) /* more than a page worth of data*/
    OP0TW01.OP0TWPAG = "Y"; /* set more data flag*/
  else
    OP0TW01.OP0TWPAG = "N"; /* set more data flag*/
  end


end // end OP0TS15

// load ws from db w/ group key
Function OP0TS20()


    /* ********************************************************/
    /* **  This statement group is intended to load the     ***/
    /* **  working storage array using the group key entered***/
    /* **  by the user, or to refresh the map (pf19 key).   ***/
    /* ********************************************************/


     /* -----------------------------------------------------*/
     /* *  Format key for group to be used for db select.   **/
     /* -----------------------------------------------------*/

  OP0TS30(); /* clean the map and ws array*/


  OP0TS25(); /* db2 call, frmt for group*/


     /* -----------------------------------------------------*/
     /* *  If no errors, format style key and select all    **/
     /* *  styles for that group code.  Loop through styles **/
     /* *  while loading ws array with style info. until no **/
     /* *  more styles.                                     **/
     /* -----------------------------------------------------*/

  if (OPAREC.OPAERR == "N") /* no errors*/
    OPAREC.OPASUB = 1;
    OPZREC.OPXHMGRP = OPXREC.OPXHMGRP; /* format group key*/
    OP0TS90(); /* select set on style*/
    if (SQLCA.VAGen_SQLCODE == 0)
      OP0TS91(); /* fetch next for priming*/
      if (SQLCA.VAGen_SQLCODE == 0)
        OP0TM001.OP0TMKGP = OPZREC.XGPCD;
        OP0TW01.OP0TWKGP = OPZREC.XGPCD;
        OP0TS15(); /* load all styles*/
      end
      OP0TS92(); /* close style cursor*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* not style found*/
        set OP0TM001.OP0TMSTY[OPASUB] cursor, bold;
        OP0TW01.OP0TWKST = " "; /* frmt ws with bad key*/
        OPAREC.OPAERR = "Y"; /* set err flag on*/
        converseLib.validationFailed(465); /* style does not exist*/
        return;
      end
    end
  end


  set OP0TM001.OP0TMKST initialAttributes; /* set to defined status*/
  set OP0TM001.OP0TMKCL initialAttributes; /* set to defined status*/
  set OP0TM001.OP0TMKDM initialAttributes; /* set to defined status*/
  set OP0TM001.OP0TMKGP initialAttributes; /* set to defined status*/
  OP0TM001.OP0TMKST = " "; /* set key style blank for cleaning map*/
  OP0TM001.OP0TMKCL = " "; /* set key color blank for cleaning map*/
  OP0TM001.OP0TMKDM = " "; /* set key dimen blank for cleaning map*/
   /* MOVE ' ' TO OP0TM001.OP0TMKGP;setkeygpcblankforcleaningmap*/
  OP0TW01.OP0TWKST = " "; /* set key style blank for cleaning ws*/
  OP0TW01.OP0TWKCL = " "; /* set key color blank for cleaning ws*/
  OP0TW01.OP0TWKDM = " "; /* set key dimen blank for cleaning ws*/
   /* MOVE ' ' TO OP0TW01.OP0TWKGP;setkeygpcblankforcleaning ws*/



end // end OP0TS20

// loop for load ws w/ group info
Function OP0TS25()


    /* ********************************************************/
    /* **  This statement group is intended to load the     ***/
    /* **  group related info to working storage.           ***/
    /* ********************************************************/


  OP0TS94(); /* select unique group*/
  if (SQLCA.VAGen_SQLCODE == 0) /* record found*/
    OP0TW01.OP0TWKGR = OPXREC.OPXHMGRP; /* save key group in ws*/
    OP0TM001.OP0TMKGR = OPXREC.OPXHMGRP; /* format map grp code*/
    OP0TM001.OP0TMKDS = OPXREC.OPXHMDES; /* format map grp desc*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* no group found*/
      set OP0TM001.OP0TMKGR cursor;
      set OP0TM001.OP0TMKGR bold;
      OP0TW01.OP0TWKGR = " "; /* frmt bad key grp*/
      OPAREC.OPAERR = "Y"; /* set err flag on*/
      converseLib.validationFailed(464); /* group does not exist*/
      return;
    end
  end


end // end OP0TS25

// cleans entire map & ws array
Function OP0TS30()


    /* ********************************************************/
    /* **  This statement group is intended to clean entire ***/
    /* **  map and working storage array.                   ***/
    /* ********************************************************/


     /* -----------------------------------------------------*/
     /* *  Clean map for key fields and all 24 style occurs.**/
     /* -----------------------------------------------------*/

  OP0TM001.OP0TMKDS = " ";
  OPAREC.OPASUB = 1;
  while (OPAREC.OPASUB <= 24)
    OP0TM001.OP0TMOPT[OPASUB] = " ";
    OP0TM001.OP0TMSTY[OPASUB] = " ";
    OP0TM001.OP0TMCOL[OPASUB] = " ";
    OP0TM001.OP0TMDIM[OPASUB] = " ";
    OP0TM001.OP0TMIND[OPASUB] = " ";
    OP0TM001.OP0TMQTY[OPASUB] = 0;
    OP0TM001.OP0TMBEG[OPASUB] = " ";
    OP0TM001.OP0TMEND[OPASUB] = " ";
    OPAREC.OPASUB = OPAREC.OPASUB + 1;
  end


     /* -----------------------------------------------------*/
     /* *  Clean ws array for all 144 possible style occurs.**/
     /* -----------------------------------------------------*/

  OPAREC.OPASUB1 = 1;
  while (OPAREC.OPASUB1 <= 144)
    OP0TW02.OP0TWOPT[OPASUB1] = " ";
    OP0TW02.OP0TWSTY[OPASUB1] = " ";
    OP0TW02.OP0TWCOL[OPASUB1] = " ";
    OP0TW02.OP0TWDIM[OPASUB1] = " ";
    OP0TW02.OP0TWIND[OPASUB1] = " ";
    OP0TW02.OP0TWQTY[OPASUB1] = 0;
    OP0TW02.OP0TWBEG[OPASUB1] = " ";
    OP0TW02.OP0TWEND[OPASUB1] = " ";
    OPAREC.OPASUB1 = OPAREC.OPASUB1 + 1;
  end


end // end OP0TS30

// load map fields from ws array
Function OP0TS35()



    /* ***********************************************************/
    /* ** This statement group loads map op0tm001 from working ***/
    /* ** storage array.                                       ***/
    /* ***********************************************************/



  OPAREC.OPASUB = 1;
  OPAREC.OPASUB1 = OP0TW01.OP0TWTOP; /* set second sub*/




  while (OPAREC.OPASUB1 <= 144 /* style limit*/
   && OPAREC.OPASUB <= 24) /* page limit*/
    if (OP0TW02.OP0TWSTY[OPASUB1] != " ") /* a style in ws will be loaded*/
      set OP0TM001.OP0TMOPT[OPASUB] initialAttributes;
      set OP0TM001.OP0TMSTY[OPASUB] protect;
      set OP0TM001.OP0TMCOL[OPASUB] protect;
      set OP0TM001.OP0TMDIM[OPASUB] protect;
      set OP0TM001.OP0TMIND[OPASUB] initialAttributes;
      set OP0TM001.OP0TMQTY[OPASUB] initialAttributes;
      set OP0TM001.OP0TMBEG[OPASUB] initialAttributes;
      set OP0TM001.OP0TMEND[OPASUB] initialAttributes;
      OP0TM001.OP0TMSTY[OPASUB] = OP0TW02.OP0TWSTY[OPASUB1];
      OP0TM001.OP0TMCOL[OPASUB] = OP0TW02.OP0TWCOL[OPASUB1];
      OP0TM001.OP0TMDIM[OPASUB] = OP0TW02.OP0TWDIM[OPASUB1];
      OP0TM001.OP0TMIND[OPASUB] = OP0TW02.OP0TWIND[OPASUB1];
      OP0TM001.OP0TMQTY[OPASUB] = OP0TW02.OP0TWQTY[OPASUB1];
      OP0TM001.OP0TMBEG[OPASUB] = OP0TW02.OP0TWBEG[OPASUB1];
      OP0TM001.OP0TMEND[OPASUB] = OP0TW02.OP0TWEND[OPASUB1];
    else /* style in ws is spaces so screen line is vacant*/
      set OP0TM001.OP0TMOPT[OPASUB] initialAttributes;
      set OP0TM001.OP0TMSTY[OPASUB] initialAttributes;
      set OP0TM001.OP0TMCOL[OPASUB] initialAttributes;
      set OP0TM001.OP0TMDIM[OPASUB] initialAttributes;
      set OP0TM001.OP0TMIND[OPASUB] initialAttributes;
      set OP0TM001.OP0TMQTY[OPASUB] initialAttributes;
      set OP0TM001.OP0TMBEG[OPASUB] initialAttributes;
      set OP0TM001.OP0TMEND[OPASUB] initialAttributes;
      OP0TM001.OP0TMSTY[OPASUB] = " ";
      OP0TM001.OP0TMCOL[OPASUB] = " ";
      OP0TM001.OP0TMDIM[OPASUB] = " ";
      OP0TM001.OP0TMIND[OPASUB] = " ";
      OP0TM001.OP0TMQTY[OPASUB] = 0;
      OP0TM001.OP0TMBEG[OPASUB] = " ";
      OP0TM001.OP0TMEND[OPASUB] = " ";
    end
    OPAREC.OPASUB = OPAREC.OPASUB + 1;
    OPAREC.OPASUB1 = OPAREC.OPASUB1 + 1;
  end



  if (OP0TW01.OP0TWPAG == "Y"      /* more data on next page flag*/
   && OP0TM001.OP0TMSTY[24] != " " /* and there is a full page*/
   && converseVar.validationMsgNum == 0) /* and no prior messages*/
    converseLib.validationFailed(478); /* pf8  more data on next page*/
  end

  set OP0TM001.OP0TMOPT[1] cursor; /* position cursor at first opt*/


end // end OP0TS35

// edit control
Function OP0TS40()


    /* ********************************************************/
    /* **  This statement group will edit all entry map     ***/
    /* **  fields.  For those in error, highlight and pos-  ***/
    /* **  ition cursor at the field.  As fields pass edits,***/
    /* **  set the appropriate option values (used for up-  ***/
    /* **  dating) and continue processing until no more    ***/
    /* **  fields to edit.  Edit processing will be bottom  ***/
    /* **  to top inorder to highlight all fields in error  ***/
    /* **  and position cursor at the first error on the    ***/
    /* **  map.                                             ***/
    /* ********************************************************/


  OPAREC.OPAERR = "N"; /* set error flag off*/
  OP0TW01.OP0TWUPD = "N"; /* set update flag off*/
  OP0TW01.OP0TWSEC = "Y"; /* set security flag on*/
  set OP0TM001.OP0TMOPT[1] cursor; /* position cursor*/

     /* ------------------------------------------------------*/
     /* *  Determine if a key style or group exists          **/
     /* ------------------------------------------------------*/

  if (OP0TM001.OP0TMKST == " " /* no style*/
   && OP0TM001.OP0TMKGR == " ") /* no group*/
    set OP0TM001.OP0TMKST cursor; /* position cursor*/
    converseLib.validationFailed(473); /* please enter a key style or group*/
    return;
  end

     /* ------------------------------------------------------*/
     /* *  Determine a valid gpc code was entered            **/
     /* ------------------------------------------------------*/

  if (OP0TM001.OP0TMKGP == " ") /* no gpc entered*/
    set OP0TM001.OP0TMKGP cursor; /* position cursor*/
    converseLib.validationFailed(483); /* gpc code required*/
    return;
  else
    if (OP0TM001.OP0TMKGP != "02" /* not footwear*/
     && OP0TM001.OP0TMKGP != "03") /* not apparel*/
      set OP0TM001.OP0TMKGP cursor, bold; /* position cursor*/
      converseLib.validationFailed(138); /* gpc code is invalid*/
      return;
    else
      set OP0TM001.OP0TMKGP initialAttributes; /* reset field*/
    end
  end

     /* ------------------------------------------------------*/
     /* *  Determine if there is a key style                 **/
     /* ------------------------------------------------------*/

  if (OP0TM001.OP0TMKST != " ")
    if (OP0TM001.OP0TMKST != OP0TW01.OP0TWKST /* determine style change*/
     || OP0TM001.OP0TMKCL != OP0TW01.OP0TWKCL /* det color chg*/
     || OP0TM001.OP0TMKDM != OP0TW01.OP0TWKDM /* det dimen chg*/
     || OP0TM001.OP0TMKGP != OP0TW01.OP0TWKGP) /* det gpc chg*/
      OP0TW01.OP0TWKY1 = "Y"; /* set style key on*/
      return;
    end
  end

     /* ------------------------------------------------------*/
     /* *  Determine if there is a key group                 **/
     /* ------------------------------------------------------*/

  if (OP0TM001.OP0TMKGR != OP0TW01.OP0TWKGR) /* group key exists*/
    OPXREC.OPXHMGRP = OP0TM001.OP0TMKGR; /* format key grp key*/
    OP0TW01.OP0TWKGP = " ";
    OP0TW01.OP0TWKY2 = "Y"; /* set group key on*/
    return;
  end

     /* ------------------------------------------------------*/
     /* *  set gpc code for changes                          **/
     /* ------------------------------------------------------*/

  if (OP0TW01.OP0TWKGP != " "
   && OP0TW01.OP0TWKGP != OP0TM001.OP0TMKGP)
    OP0TM001.OP0TMKGP = OP0TW01.OP0TWKGP;
  end


  OPAREC.OPASUB = 24;
  OPAREC.OPASUB1 = OP0TW01.OP0TWTOP + 23; /* set second subscript to bot*/


     /* ------------------------------------------------------*/
     /* *  Loop through all options (24) on map until some   **/
     /* *  value is found in an option field. If found, then **/
     /* *  process it. If no value found, redisplay map      **/
     /* ------------------------------------------------------*/

  while (OPAREC.OPASUB >= 1 /* look at all 24 styles*/
   && OPAREC.OPASUB1 >= 1)
    set OP0TM001.OP0TMOPT[OPASUB] initialAttributes;
    set OP0TM001.OP0TMSTY[OPASUB] initialAttributes;
    set OP0TM001.OP0TMCOL[OPASUB] initialAttributes;
    set OP0TM001.OP0TMDIM[OPASUB] initialAttributes;
    set OP0TM001.OP0TMIND[OPASUB] initialAttributes;
    set OP0TM001.OP0TMQTY[OPASUB] initialAttributes;
    set OP0TM001.OP0TMBEG[OPASUB] initialAttributes;
    set OP0TM001.OP0TMEND[OPASUB] initialAttributes;
    if (OP0TM001.OP0TMSTY[OPASUB] != " "
     || OP0TM001.OP0TMOPT[OPASUB] != " ")
      set OP0TM001.OP0TMSTY[OPASUB] protect;
      set OP0TM001.OP0TMCOL[OPASUB] protect;
      set OP0TM001.OP0TMDIM[OPASUB] protect;
         /* -----------------------------------------------*/
         /* *  A value in the option field exists.        **/
         /* -----------------------------------------------*/
      if (OP0TM001.OP0TMOPT[OPASUB] == "A") /* ck option*/
           /* -----------------------------------------------*/
           /* *  Process add logic.                         **/
           /* -----------------------------------------------*/
        if (OP0TW02.OP0TWSTY[OPASUB1] != " ")
          set OP0TM001.OP0TMOPT[OPASUB] cursor, bold; /* pos cursor*/
          OPAREC.OPAERR = "Y"; /* set error flag on*/
          converseLib.validationFailed(514); /* invalid option. cannot add on this line*/
        else
          OP0TS45(); /* verify edit authority*/
          if (OP0TW01.OP0TWSEC == "N") /* user does not have authority*/
            return;
          else
            OP0TS50(); /* edit style*/
            if (OPAREC.OPAERR == "N") /* not found, so ok to add*/
              OP0TW02.OP0TWOPT[OPASUB1] = "A"; /* set opt for update*/
              OP0TW01.OP0TWUPD = "Y"; /* set update flag on*/
            end
          end
        end
      else
        if (OP0TM001.OP0TMOPT[OPASUB] == "C")
             /* -----------------------------------------------*/
             /* *  Process change logic.                      **/
             /* -----------------------------------------------*/
          if (OP0TW02.OP0TWSTY[OPASUB1] == " ")
            set OP0TM001.OP0TMOPT[OPASUB] cursor, bold; /* pos cursor*/
            OPAREC.OPAERR = "Y"; /* set error flag on*/
            converseLib.validationFailed(515); /* inval opt. cannot change empty line.*/
          else
            OP0TS45(); /* verify edit authority*/
            if (OP0TW01.OP0TWSEC == "N") /* user does not have authority*/
              return;
            else
              OP0TS50(); /* edit style*/
              if (OPAREC.OPAERR == "N") /* rec found, so ok to chg*/
                OP0TW02.OP0TWOPT[OPASUB1] = "C";
                                   /* set opt for update*/
                OP0TW01.OP0TWUPD = "Y"; /* set update flag on*/
              end
            end
          end
        else
          if (OP0TM001.OP0TMOPT[OPASUB] == "D")
               /* -----------------------------------------------*/
               /* *  Process delete logic.                      **/
               /* -----------------------------------------------*/
            if (OP0TW02.OP0TWSTY[OPASUB1] == " ")
              set OP0TM001.OP0TMOPT[OPASUB] cursor, bold; /* pos cursor*/
              OPAREC.OPAERR = "Y"; /* set error flag on*/
              converseLib.validationFailed(516); /* inval opt. cannot delete empty line.*/
            else
              OP0TS45(); /* verify edit authority*/
              if (OP0TW01.OP0TWSEC == "N") /* user does not have authority*/
                return;
              else
                OP0TW02.OP0TWOPT[OPASUB1] = "D";
                OP0TW01.OP0TWUPD = "Y"; /* set update flag on*/
              end
            end
          else
            if (OP0TM001.OP0TMOPT[OPASUB] == " "
             && OP0TM001.OP0TMSTY[OPASUB] == OP0TW02.OP0TWSTY[OPASUB1]
             && OP0TM001.OP0TMCOL[OPASUB] == OP0TW02.OP0TWCOL[OPASUB1]
             && OP0TM001.OP0TMDIM[OPASUB] == OP0TW02.OP0TWDIM[OPASUB1]
             && OP0TM001.OP0TMIND[OPASUB] == OP0TW02.OP0TWIND[OPASUB1]
             && OP0TM001.OP0TMQTY[OPASUB] == OP0TW02.OP0TWQTY[OPASUB1]
             && OP0TM001.OP0TMBEG[OPASUB] == OP0TW02.OP0TWBEG[OPASUB1]
             && OP0TM001.OP0TMEND[OPASUB] == OP0TW02.OP0TWEND[OPASUB1])
              OP0TW02.OP0TWOPT[OPASUB] = " ";
            else
                 /* -----------------------------------------------*/
                 /* *  An invalid charater exists.                **/
                 /* -----------------------------------------------*/
              set OP0TM001.OP0TMOPT[OPASUB] cursor, bold; /* pos cursor*/
              /* SET OP0TM001.OP0TMSTY(OPASUB) DEFINED; unprotect style*/
              /* SET OP0TM001.OP0TMCOL(OPASUB) DEFINED; unprotect color*/
                                  /* SET OP0TM001.OP0TMDIM(OPASUB)*/
                                   /* DEFINED; unprotect dimension*/
              OPAREC.OPAERR = "Y"; /* set error flag on*/
              converseLib.validationFailed(472); /* invalid option, valid options are*/
                                   /* a,c,d*/
            end
          end
        end
      end
    else
      if (OP0TM001.OP0TMSTY[OPASUB] == " ")
        OP0TM001.OP0TMCOL[OPASUB] = " ";
        OP0TM001.OP0TMDIM[OPASUB] = " ";
        OP0TM001.OP0TMIND[OPASUB] = " ";
        OP0TM001.OP0TMQTY[OPASUB] = 0;
        OP0TM001.OP0TMBEG[OPASUB] = " ";
        OP0TM001.OP0TMEND[OPASUB] = " ";
      end
    end
    OPAREC.OPASUB = OPAREC.OPASUB - 1; /* increment subscript*/
    OPAREC.OPASUB1 = OPAREC.OPASUB1 - 1; /* increment subscript*/
  end


end // end OP0TS40

// verify edit authority
Function OP0TS45()


    /* ********************************************************/
    /* **  This statement group is intended to verify a     ***/
    /* **  user's system edit (change) authority. controlled***/
    /* **  within commarea.                                 ***/
    /* ********************************************************/


  if (COMMAREA.CACHGFL == "Y") /* allowed edit authority*/
     /* next sentence*/
  else
    set OP0TM001.OP0TMOPT[OPASUB] bold;
    OP0TW01.OP0TWSEC = "N"; /* set edit authority flag off*/
    converseLib.validationFailed(467); /* ; id is not authorized to change*/
                                   /* styles*/
    return;
  end


end // end OP0TS45

// edit all map fields
Function OP0TS50()


    /* ********************************************************/
    /* **  This statement group is intended to edit each    ***/
    /* **  field for style.                                 ***/
    /* ********************************************************/


     /* -----------------------------------------------------*/
     /* *  Edit end date                                    **/
     /* -----------------------------------------------------*/
  if (OP0TM001.OP0TMEND[OPASUB] == " ") /* check for spaces*/
    set OP0TM001.OP0TMEND[OPASUB] cursor, bold;
    OP0TM001.OP0TMOPT[OPASUB] = " "; /* clear opt field*/
    OPAREC.OPAERR = "Y"; /* set error flag on*/
    converseLib.validationFailed(458); /* end date required*/
  else
    OP0TW01.OP0TWDER = "N"; /* set date error off*/
    OSAREC.OSADATE = OP0TM001.OP0TMEND[OPASUB]; /* edit date*/
    XPOP100(); /* reformat date*/
    OP0TS55(); /* validate date*/
    if (OPAREC.OPAERR == "Y" /* general error on*/
     && OP0TW01.OP0TWDER == "Y") /* date error flag on*/
      set OP0TM001.OP0TMEND[OPASUB] cursor;
      set OP0TM001.OP0TMEND[OPASUB] bold;
    else
      OP0TM001.OP0TMEND[OPASUB] = OSAREC.OSACH6; /* map end date*/
      OP0TW02.OP0TWEND[OPASUB1] = OSAREC.OSACH6; /* ws end date*/
      OPZREC.OPZHMEDT = OSAREC.OSANU8; /* db end date*/
      OP0TW01.OP0TWEDT[OPASUB] = OSAREC.OSANU8; /* format end dt*/
    end
  end


     /* -----------------------------------------------------*/
     /* *  Edit begin date                                  **/
     /* -----------------------------------------------------*/
  if (OP0TM001.OP0TMBEG[OPASUB] == " ") /* check for spaces*/
    set OP0TM001.OP0TMBEG[OPASUB] cursor, bold;
    OP0TM001.OP0TMOPT[OPASUB] = " "; /* clear opt field*/
    OPAREC.OPAERR = "Y"; /* set error flag on*/
    converseLib.validationFailed(457); /* begin date required*/
  else
    OP0TW01.OP0TWDER = "N"; /* set date error flag off*/
    OSAREC.OSADATE = OP0TM001.OP0TMBEG[OPASUB]; /* edit date*/
    XPOP100(); /* reformat date*/
    OP0TS55(); /* validate date*/
    if (OPAREC.OPAERR == "Y" /* general error on*/
     && OP0TW01.OP0TWDER == "Y") /* date error flag on*/
      set OP0TM001.OP0TMBEG[OPASUB] cursor;
      set OP0TM001.OP0TMBEG[OPASUB] bold;
    else
      OP0TM001.OP0TMBEG[OPASUB] = OSAREC.OSACH6; /* map beg date*/
      OP0TW02.OP0TWBEG[OPASUB1] = OSAREC.OSACH6; /* ws beg date*/
      OPZREC.OPZHMBDT = OSAREC.OSANU8; /* db beg date*/
      OP0TW01.OP0TWBDT[OPASUB] = OSAREC.OSANU8; /* format beg dt*/
    end
  end


     /* -----------------------------------------------------*/
     /* *  Edit begin and end date comparision              **/
     /* -----------------------------------------------------*/
  if (OPAREC.OPAERR == "N") /* both dates are ok*/
    if (OP0TW01.OP0TWBDT[OPASUB] >= OP0TW01.OP0TWEDT[OPASUB])
      OP0TW02.OP0TWBEG[OPASUB1] = " "; /* clear ws begin date*/
      set OP0TM001.OP0TMBEG[OPASUB] cursor, bold;
      OP0TM001.OP0TMOPT[OPASUB] = " "; /* clear opt field*/
      OPAREC.OPAERR = "Y"; /* set error flag on*/
      converseLib.validationFailed(476); /* begin date cannot exceed end date*/
    end
  end


     /* -----------------------------------------------------*/
     /* *  Edit minimum quantity                            **/
     /* -----------------------------------------------------*/
  if (OP0TM001.OP0TMQTY[OPASUB] > 0) /* must be greater than 0*/
       /* next sentence*/
  else
    set OP0TM001.OP0TMQTY[OPASUB] cursor, bold;
    OP0TM001.OP0TMOPT[OPASUB] = " "; /* clear opt field*/
    OPAREC.OPAERR = "Y"; /* set error flag on*/
    converseLib.validationFailed(564); /* quantity must be greater than 0*/
  end


     /* -----------------------------------------------------*/
     /* *  Edit hot model indicator                         **/
     /* -----------------------------------------------------*/
  if (OP0TM001.OP0TMIND[OPASUB] == " ") /* check for spaces*/
    set OP0TM001.OP0TMIND[OPASUB] cursor, bold;
    OP0TM001.OP0TMOPT[OPASUB] = " "; /* clear opt field*/
    OPAREC.OPAERR = "Y"; /* set error flag on*/
    converseLib.validationFailed(475); /* hot model indicator required*/
  else
    if (OP0TM001.OP0TMIND[OPASUB] == "Y"
     || OP0TM001.OP0TMIND[OPASUB] == "N")
       /* next sentence*/
    else
      set OP0TM001.OP0TMIND[OPASUB] cursor, bold;
      OP0TM001.OP0TMOPT[OPASUB] = " "; /* clear opt field*/
      OPAREC.OPAERR = "Y"; /* set error flag on*/
      converseLib.validationFailed(475); /* hot mod ind must be 'y' or 'n'*/
    end
  end


     /* -----------------------------------------------------*/
     /* *  Edit dimension code                              **/
     /* -----------------------------------------------------*/
  if (OP0TM001.OP0TMDIM[OPASUB] == "  "
   || OP0TM001.OP0TMDIM[OPASUB] == "0 "
   || OP0TM001.OP0TMDIM[OPASUB] == " 0")
    OP0TM001.OP0TMDIM[OPASUB] = "00";
  else
    if (OP0TM001.OP0TMDIM[OPASUB] in XDMTBL.XDMCD) /* in dimension tbl*/
      if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* dimension code is active*/
          /* next sentence*/
      else /* dimension code is inactive*/
        set OP0TM001.OP0TMDIM[OPASUB] cursor, bold;
        OP0TM001.OP0TMOPT[OPASUB] = " "; /* clear opt field*/
        OPAREC.OPAERR = "Y"; /* set error flag on*/
        converseLib.validationFailed(485); /* dimension is invalid*/
      end
    else
      set OP0TM001.OP0TMDIM[OPASUB] cursor, bold;
      OP0TM001.OP0TMOPT[OPASUB] = " "; /* clear opt field*/
      OPAREC.OPAERR = "Y"; /* set error flag on*/
      converseLib.validationFailed(485); /* dimension is invalid*/
    end
  end


     /* -----------------------------------------------------*/
     /* *  Edit color code                                  **/
     /* -----------------------------------------------------*/
  if (OP0TM001.OP0TMCOL[OPASUB] == " "
   || OP0TM001.OP0TMCOL[OPASUB] == " 00"
   || OP0TM001.OP0TMCOL[OPASUB] == "0  "
   || OP0TM001.OP0TMCOL[OPASUB] == " 0 "
   || OP0TM001.OP0TMCOL[OPASUB] == "  0"
   || OP0TM001.OP0TMCOL[OPASUB] == "0 0")
    OP0TM001.OP0TMCOL[OPASUB] = "00 ";
    /* ELSE ;*/
      /* SET OP0TM001.OP0TMCOL(OPASUB) CURSOR,BRIGHT;*/
      /* MOVE ' ' TO OP0TM001.OP0TMOPT(OPASUB); clear opt field*/
      /* MOVE 'Y' TO OPAREC.OPAERR     ; set error flag on*/
      /* MOVE 484 TO EZEMNO            ; color is invalid*/
  end


     /* -----------------------------------------------------*/
     /* *  Edit style number                                **/
     /* -----------------------------------------------------*/
  if (OP0TW02.OP0TWSTY[OPASUB1] == " ") /* check ws style = spaces*/
    SYCREC.SY1STNBR = OP0TM001.OP0TMSTY[OPASUB];
    SYCREC.SY2CLRID = OP0TM001.OP0TMCOL[OPASUB];
    SYCREC.XDMCD = OP0TM001.OP0TMDIM[OPASUB];
    SYCREC.XGPCD = OP0TM001.OP0TMKGP;
    OP0TS99(); /* db2 - select unique product*/
    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      set OP0TM001.OP0TMSTY[OPASUB] cursor, bold;
      set OP0TM001.OP0TMCOL[OPASUB] bold;
      set OP0TM001.OP0TMDIM[OPASUB] bold;
      OP0TM001.OP0TMOPT[OPASUB] = " "; /* clear opt field*/
      OPAREC.OPAERR = "Y";
      converseLib.validationFailed(474); /* product does not exist*/
    end
  end

end // end OP0TS50

// validate begin and end dates
Function OP0TS55()


     /* **********************************************************/
     /* ** Validate begin and end dates for style              ***/
     /* **********************************************************/



  if (OSAREC.OSANUMFL == "Y") /* numeric date*/

     /* ---------------------------------------------------*/
     /* *  Validate date using ta0040.                    **/
     /* ---------------------------------------------------*/

    set TA2REC empty;
    TA2REC.TA2GRGB = OSAREC.OSACH8;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "B";

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0) /* valid date*/
       /* next sentence*/
    else
      OPAREC.OPAERR = "Y"; /* set error on*/
      OP0TW01.OP0TWDER = "Y"; /* set date error on*/
      OP0TM001.OP0TMOPT[OPASUB] = " ";
      converseLib.validationFailed(107); /* invalid date*/
    end
  else
    OPAREC.OPAERR = "Y"; /* set error on*/
    OP0TW01.OP0TWDER = "Y"; /* set date error on*/
    OP0TM001.OP0TMOPT[OPASUB] = " ";
    converseLib.validationFailed(107); /* invalid date*/
  end

   /* *************************************************************/
end // end OP0TS55

// update control
Function OP0TS60()


    /* ********************************************************/
    /* **  This statement group is intended to organize     ***/
    /* **  update process depending upon the appropriate    ***/
    /* **  option.                                          ***/
    /* ********************************************************/


  OP0TW01.OP0TWDEL = "Y"; /* style has been confirmed*/
  OPAREC.OPAERR = "N"; /* set error flag off*/
  OPAREC.OPASUB = 24; /* set subscript*/
  OPAREC.OPASUB1 = OP0TW01.OP0TWTOP + 23;

  while (OPAREC.OPASUB >= 1 /* update all styles with an option*/
   && OPAREC.OPASUB1 >= 1
   && OPAREC.OPAERR == "N") /* and no errors*/
    if (OP0TW02.OP0TWOPT[OPASUB1] == "A") /* process add logic*/
      OP0TS65(); /* add a style*/
      OP0TM001.OP0TMOPT[OPASUB] = " "; /* space out option*/
    else
      if (OP0TW02.OP0TWOPT[OPASUB1] == "C") /* process change logic*/
        OP0TS75(); /* change a style*/
        OP0TM001.OP0TMOPT[OPASUB] = " "; /* space out option*/
      else
        if (OP0TW02.OP0TWOPT[OPASUB1] == "D") /* process delete logic*/
          OPZREC.XGPCD = OP0TM001.OP0TMKGP;
          OPZREC.SY1STNBR = OP0TM001.OP0TMSTY[OPASUB];
          OPZREC.SY2CLRID = OP0TM001.OP0TMCOL[OPASUB];
          OPZREC.XDMCD = OP0TM001.OP0TMDIM[OPASUB];
          OP0TS93(); /* db2 call - determine if style to delete*/
          if (SQLCA.VAGen_SQLCODE == 0)
            if (OP0TW01.OP0TWSW[OPASUB] == "CONFIRMED DELETE")
              OP0TS85(); /* delete a style*/
              OP0TW01.OP0TWSW[OPASUB] = " "; /* clear comfirm flag*/
              if (OPAREC.OPAERR == "N") /* no errors*/
                OP0TW01.OP0TWDEL = "Y"; /* set delete flag on*/
                OP0TM001.OP0TMOPT[OPASUB] = " "; /* map opt*/
                OP0TM001.OP0TMSTY[OPASUB] = " "; /* map sty*/
                OP0TM001.OP0TMCOL[OPASUB] = " "; /* map col*/
                OP0TM001.OP0TMDIM[OPASUB] = " "; /* map dim*/
                OP0TM001.OP0TMIND[OPASUB] = " "; /* map ind*/
                OP0TM001.OP0TMQTY[OPASUB] = 0; /* min qty*/
                OP0TM001.OP0TMBEG[OPASUB] = " "; /* map beg*/
                OP0TM001.OP0TMEND[OPASUB] = " "; /* map end*/
                OP0TW02.OP0TWOPT[OPASUB1] = " "; /* ws opt*/
                OP0TW02.OP0TWSTY[OPASUB1] = " "; /* ws sty*/
                OP0TW02.OP0TWCOL[OPASUB1] = " "; /* ws col*/
                OP0TW02.OP0TWDIM[OPASUB1] = " "; /* ws dim*/
                OP0TW02.OP0TWIND[OPASUB1] = " "; /* ws ind*/
                OP0TW02.OP0TWQTY[OPASUB1] = 0; /* ws ind*/
                OP0TW02.OP0TWBEG[OPASUB1] = " "; /* ws beg*/
                OP0TW02.OP0TWEND[OPASUB1] = " "; /* ws end*/
                converseLib.validationFailed(474); /* transaction accepted*/
              end
            else
              set OP0TM001.OP0TMOPT[OPASUB] cursor;
              set OP0TM001.OP0TMOPT[OPASUB] bold;
              set OP0TM001.OP0TMSTY[OPASUB] bold;
              set OP0TM001.OP0TMCOL[OPASUB] bold;
              set OP0TM001.OP0TMDIM[OPASUB] bold;
              set OP0TM001.OP0TMIND[OPASUB] bold;
              set OP0TM001.OP0TMQTY[OPASUB] bold;
              set OP0TM001.OP0TMBEG[OPASUB] bold;
              set OP0TM001.OP0TMEND[OPASUB] bold;
              OP0TW01.OP0TWSW[OPASUB] = "CONFIRMED DELETE";
              OP0TW01.OP0TWDEL = "N"; /* style has not been confirmed*/
            end
          else
            OPAREC.OPAERR = "Y"; /* set error flag on*/
            set OP0TM001.OP0TMSTY[OPASUB] cursor;
            set OP0TM001.OP0TMOPT[OPASUB] bold;
            set OP0TM001.OP0TMSTY[OPASUB] bold;
            OP0TW02.OP0TWOPT[OPASUB1] = " "; /* clear ws opt field*/
            converseLib.validationFailed(460); /* style not found, cannot delete*/
          end
        end
      end
    end
    OPAREC.OPASUB = OPAREC.OPASUB - 1; /* decrement subscript*/
    OPAREC.OPASUB1 = OPAREC.OPASUB1 - 1; /* decrement subscript*/
  end



  if (OPAREC.OPAERR == "N" /* no errors*/
   && OP0TW01.OP0TWDEL == "Y") /* delete has been confirmed*/
    set OP0TM001.OP0TMOPT[1] cursor; /* position cursor*/
    converseLib.validationFailed(447); /* transaction accepted*/
    OPAREC.OPASUB1 = OP0TW01.OP0TWTOP + 23;
    while (OPASUB1 >= 1) /* clean ws opt field*/
      OP0TW02.OP0TWOPT[OPASUB1] = " ";
      OPAREC.OPASUB1 = OPAREC.OPASUB1 - 1; /* decrement subscript*/
    end
  else
    if (OPAREC.OPAERR == "N" /* no errors*/
     && OP0TW01.OP0TWDEL == "N") /* delete has not been confirmed*/
      converseLib.validationFailed(462); /* style will be deleted confirm*/
    end
  end
end // end OP0TS60

// update - add a hot mod style
Function OP0TS65()


    /* ********************************************************/
    /* **  This statement group is intended to add a style  ***/
    /* **  to the hot model style table (vhotsy01) and      ***/
    /* **  update the product db table (vcolor03) if the    ***/
    /* **  style is hot.                                    ***/
    /* ********************************************************/


     /* -----------------------------------------------------*/
     /* *  Update product database.                         **/
     /* -----------------------------------------------------*/

  if (OP0TM001.OP0TMIND[OPASUB] == "Y") /* style is hot*/
    OP0TS70(); /* SELECT AND UPDATE PRODUCT FOR HM IND*/
  end


     /* -----------------------------------------------------*/
     /* *  If no errors, determine that a duplicate style   **/
     /* *  does exist. If not, then format ws array and     **/
     /* *  database record for add.                         **/
     /* -----------------------------------------------------*/
  if (OPAREC.OPAERR == "N") /* no errors*/
    OPZREC.SY1STNBR = OP0TM001.OP0TMSTY[OPASUB];
    OPZREC.SY2CLRID = OP0TM001.OP0TMCOL[OPASUB];
    OPZREC.XDMCD = OP0TM001.OP0TMDIM[OPASUB];
    OPZREC.XGPCD = OP0TM001.OP0TMKGP;
    OP0TS93(); /* call db2 check for duplicate*/
    if (SQLCA.VAGen_SQLCODE == 100) /* no duplicate found*/
      OP0TW02.OP0TWSTY[OPASUB1] = OP0TM001.OP0TMSTY[OPASUB];
      OP0TW02.OP0TWCOL[OPASUB1] = OP0TM001.OP0TMCOL[OPASUB];
      OP0TW02.OP0TWDIM[OPASUB1] = OP0TM001.OP0TMDIM[OPASUB];
      OP0TW02.OP0TWIND[OPASUB1] = OP0TM001.OP0TMIND[OPASUB];
      OP0TW02.OP0TWQTY[OPASUB1] = OP0TM001.OP0TMQTY[OPASUB];
      OP0TW02.ZZZCHGCT = 0;
      OPZREC.XGPCD = OP0TM001.OP0TMKGP; /* gpc code*/
      OPZREC.SY1STNBR = OP0TM001.OP0TMSTY[OPASUB]; /* map style*/
      OPZREC.SY2CLRID = OP0TM001.OP0TMCOL[OPASUB]; /* map color*/
      OPZREC.XDMCD = OP0TM001.OP0TMDIM[OPASUB]; /* map dimen*/
      OPZREC.OPXHMGRP = OP0TM001.OP0TMKGR; /* map group*/
      OPZREC.OPZHMIND = OP0TM001.OP0TMIND[OPASUB]; /* hot mod ind*/
      OPZREC.OPZMNFOQ = OP0TM001.OP0TMQTY[OPASUB]; /* min qty*/
      OPZREC.OPZHMBDT = OP0TW01.OP0TWBDT[OPASUB]; /* begin date*/
      OPZREC.OPZHMEDT = OP0TW01.OP0TWEDT[OPASUB]; /* end date*/
      OPZREC.ZZZSDT = OPAREC.OPACDT; /* current date*/
      OPZREC.ZZZCHGDT = 0; /* change date*/
      OPZREC.ZZZCHGTM = 0; /* change time*/
      OPZREC.ZZZCHGCT = 0; /* change count*/
      OP0TS95(); /* call db2 for add*/
    else
         /* -------------------------------------------------------*/
         /* * Duplicate exists, format error and display.         **/
         /* -------------------------------------------------------*/
      if (SQLCA.VAGen_SQLCODE == 0) /* record exist - cannot add*/
        OPAREC.OPAERR = "Y"; /* set err flag on*/
        OP0TW02.OP0TWOPT[OPASUB1] = " ";
        set OP0TM001.OP0TMSTY[OPASUB] cursor; /* put cursor at err*/
        set OP0TM001.OP0TMSTY[OPASUB] bold;
        converseLib.validationFailed(461); /* style already exists, cannot add*/
        return;
      end
    end
  end

end // end OP0TS65

// update - (add) upd product
Function OP0TS70()


    /* ********************************************************/
    /* **  This statement group is intended to update a     ***/
    /* **  product's hot model indicator on dprod.vcolor03. ***/
    /* **  Used for add logic only.                         ***/
    /* ********************************************************/


  SYLREC.XGPCD = OP0TM001.OP0TMKGP;
  SYLREC.SY1STNBR = OP0TM001.OP0TMSTY[OPASUB]; /* format style*/
  SYLREC.SY2CLRID = OP0TM001.OP0TMCOL[OPASUB]; /* format color*/
  SYLREC.XDMCD = OP0TM001.OP0TMDIM[OPASUB]; /* format dimension*/
  SYLREC.OPZHMIND = OP0TM001.OP0TMIND[OPASUB]; /* format indicator*/
  SYLREC.ZZZCHGCT = 0; /* format chg count*/
  SYLREC.ZZZCHGDT = OPAREC.OPACDT; /* move date to chng date*/
  OP0TW01.OP0TWTM1 = VGVar.currentFormattedTime; /* change time*/
  OP0TW01.OP0TWTHL = OP0TW01.OP0TWTHF; /* hour*/
  OP0TW01.OP0TWTML = OP0TW01.OP0TWTMF; /* minute*/
  SYLREC.ZZZCHGTM = OP0TW01.OP0TWTM3; /* format change/time*/
  OP0TS98(); /* update prod's hm ind*/


end // end OP0TS70

// update - change hot mod style
Function OP0TS75()


    /* ********************************************************/
    /* **  This statement group is intended to update a hot ***/
    /* **  model style's hot indicator, or begin date, or   ***/
    /* **  end date on the database table dorder.vhotsy01.  ***/
    /* **  The product's hot model indicator on dprod.      ***/
    /* **  vcolor03 is also updated.                        ***/
    /* ********************************************************/


  if (OP0TM001.OP0TMIND[OPASUB] != OP0TW02.OP0TWIND[OPASUB1])
    OP0TS80(); /* edit products hot model indicator*/
  end


     /* -------------------------------------------------------*/
     /* *  If no errors, format record for update.            **/
     /* -------------------------------------------------------*/

  if (OPAREC.OPAERR == "N") /* no errors*/
    OPZREC.XGPCD = OP0TM001.OP0TMKGP; /* format key*/
    OPZREC.SY1STNBR = OP0TM001.OP0TMSTY[OPASUB]; /* format key*/
    OPZREC.SY2CLRID = OP0TM001.OP0TMCOL[OPASUB]; /* format key*/
    OPZREC.XDMCD = OP0TM001.OP0TMDIM[OPASUB]; /* format key*/
    OP0TS93(); /* db2 check for unique style rec*/
    if (SQLCA.VAGen_SQLCODE == 0) /* record found*/
      OP0TW02.OP0TWSTY[OPASUB1] = OP0TM001.OP0TMSTY[OPASUB];
      OP0TW02.OP0TWCOL[OPASUB1] = OP0TM001.OP0TMCOL[OPASUB];
      OP0TW02.OP0TWDIM[OPASUB1] = OP0TM001.OP0TMDIM[OPASUB];
      OP0TW02.OP0TWIND[OPASUB1] = OP0TM001.OP0TMIND[OPASUB];
      OP0TW02.OP0TWQTY[OPASUB1] = OP0TM001.OP0TMQTY[OPASUB];
      OPZREC.SY1STNBR = OP0TM001.OP0TMSTY[OPASUB]; /* style*/
      OPZREC.SY2CLRID = OP0TM001.OP0TMCOL[OPASUB]; /* color*/
      OPZREC.XDMCD = OP0TM001.OP0TMDIM[OPASUB]; /* dimension*/
      OPZREC.OPZHMIND = OP0TM001.OP0TMIND[OPASUB]; /* hot mod ind*/
      OPZREC.OPZMNFOQ = OP0TM001.OP0TMQTY[OPASUB]; /* min qty*/
      OPZREC.OPZHMBDT = OP0TW01.OP0TWBDT[OPASUB]; /* begin date*/
      OPZREC.OPZHMEDT = OP0TW01.OP0TWEDT[OPASUB]; /* end date*/
      OPZREC.ZZZCHGDT = OPAREC.OPACDT; /* change date*/
      OP0TW01.OP0TWTM1 = VGVar.currentFormattedTime; /* change time*/
      OP0TW01.OP0TWTHL = OP0TW01.OP0TWTHF; /* hour*/
      OP0TW01.OP0TWTML = OP0TW01.OP0TWTMF; /* minute*/
      OPZREC.ZZZCHGTM = OP0TW01.OP0TWTM3; /* format chg time*/
      OP0TS96(); /* call db2 for change*/
    else
         /* -------------------------------------------------------*/
         /* *  Error exists due to style not found to change.     **/
         /* -------------------------------------------------------*/
      OPAREC.OPAERR = "Y"; /* set err flag on*/
      OP0TW02.OP0TWOPT[OPASUB1] = " ";
      set OP0TM001.OP0TMSTY[OPASUB] cursor, bold;
      set OP0TM001.OP0TMKGP bold;
      converseLib.validationFailed(459); /* style not found, cannot change*/
      return;
    end
  end


end // end OP0TS75

// update - (chg) upd product
Function OP0TS80()


    /* ********************************************************/
    /* **  This statement group is intended to update a     ***/
    /* **  product's hot model indicator on dprod.vcolor03. ***/
    /* **  Used for change processing only.                 ***/
    /* ********************************************************/


  SYLREC.XGPCD = OP0TM001.OP0TMKGP;
  SYLREC.SY1STNBR = OP0TM001.OP0TMSTY[OPASUB]; /* format style*/
  SYLREC.SY2CLRID = OP0TM001.OP0TMCOL[OPASUB]; /* format color*/
  SYLREC.XDMCD = OP0TM001.OP0TMDIM[OPASUB]; /* format dimension*/
  SYLREC.OPZHMIND = OP0TM001.OP0TMIND[OPASUB]; /* format indicator*/
  SYLREC.ZZZCHGDT = OPAREC.OPACDT; /* format chg date*/
  OP0TW01.OP0TWTM1 = VGVar.currentFormattedTime; /* hh:mm:ss*/
  OP0TW01.OP0TWTHL = OP0TW01.OP0TWTHF; /* hh*/
  OP0TW01.OP0TWTML = OP0TW01.OP0TWTMF; /* mm*/
  SYLREC.ZZZCHGTM = OP0TW01.OP0TWTM3; /* hhmm*/
  OP0TS98(); /* ; update prod's hm ind*/


end // end OP0TS80

// update - delete hot mod style
Function OP0TS85()


    /* ********************************************************/
    /* **  This statement group is intended to delete a hot ***/
    /* **  model style on the database dorder.vhotsy01.     ***/
    /* ********************************************************/


  OPZREC.SY1STNBR = OP0TM001.OP0TMSTY[OPASUB];
  OPZREC.XGPCD = OP0TM001.OP0TMKGP;

  OP0TS97(); /* call db2 to delete record*/


  if (SQLCA.VAGen_SQLCODE == 0 /* record deleted*/
   && OP0TM001.OP0TMIND[OPASUB] == "Y")
    OP0TS86(); /* update product hot model ind*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
      set OP0TM001.OP0TMOPT[OPASUB] cursor, bold;
      set OP0TM001.OP0TMSTY[OPASUB] bold;
      set OP0TM001.OP0TMKGP bold;
      OPAREC.OPAERR = "Y"; /* set error flag*/
      converseLib.validationFailed(460); /* style not found, cannot delete*/
      return;
    end
  end

end // end OP0TS85

// update - (del) upd product
Function OP0TS86()


    /* ********************************************************/
    /* **  This statement group is intended to update a     ***/
    /* **  product's hot model indicator on dprod.vcolor03. ***/
    /* **  Used for delete processing only.                 ***/
    /* ********************************************************/


  SYLREC.XGPCD = OP0TM001.OP0TMKGP;
  SYLREC.SY1STNBR = OP0TM001.OP0TMSTY[OPASUB]; /* format style*/
  SYLREC.SY2CLRID = OP0TM001.OP0TMCOL[OPASUB]; /* format color*/
  SYLREC.XDMCD = OP0TM001.OP0TMDIM[OPASUB]; /* format dimension*/
  SYLREC.OPZHMIND = "N"; /* format indicator*/
  SYLREC.ZZZCHGDT = OPAREC.OPACDT; /* format chg date*/
  OP0TW01.OP0TWTM1 = VGVar.currentFormattedTime; /* hh:mm:ss*/
  OP0TW01.OP0TWTHL = OP0TW01.OP0TWTHF; /* hh*/
  OP0TW01.OP0TWTML = OP0TW01.OP0TWTMF; /* mm*/
  SYLREC.ZZZCHGTM = OP0TW01.OP0TWTM3; /* hhmm*/
  OP0TS98(); /* ; update prod's hm ind*/

end // end OP0TS86

// pf7 key - page back
Function OP0TS87()


    /* **********************************************************/
    /* **  Pf7 scroll up logic will redisplay the map based   ***/
    /* **  on the previous page top value. that value is used ***/
    /* **  to rebuild the page.                               ***/
    /* **********************************************************/


  OP0TW01.OP0TWPER = "N"; /* set page error off*/

  if (OP0TW01.OP0TWTOP <= 1)
    OP0TW01.OP0TWPER = "Y"; /* set page error on*/
    converseLib.validationFailed(192); /* end of page backward*/
    return;
  end


  if (OP0TW01.OP0TWPER == "N") /* no page errors*/
    OP0TS40(); /* edit the map*/
  end


  if (OP0TW01.OP0TWPER == "N" /* no page errors*/
   && OPAREC.OPAERR == "N")   /* no edit errors*/
    OP0TW01.OP0TWTOP = OP0TW01.OP0TWTOP - 24; /* subtract full page*/
    OP0TS35(); /* load map*/
  end


end // end OP0TS87

// pf8 key - page forward
Function OP0TS88()


    /* **********************************************************/
    /* **  Pf8 scroll down logic will determine:              ***/
    /* **    - already at bottom page to display - give msg   ***/
    /* **    - if no errors, edit map before paging frwd      ***/
    /* **    - if still no errors, format new page            ***/
    /* **********************************************************/


  OP0TW01.OP0TWPER = "N"; /* set page error flag off*/

  OP0TW01.OP0TWTOP = OP0TW01.OP0TWTOP + 23; /* go to bottom line of page*/

  if (OP0TW01.OP0TWTOP >= 144 /* if currently on last page*/
   || OP0TW01.OP0TWTOP > OP0TW01.OP0TWMAX) /* or current page not filled*/
    OP0TW01.OP0TWPER = "Y"; /* set page error flag on*/
    converseLib.validationFailed(191); /* end of page forward*/
  end

  OP0TW01.OP0TWTOP = OP0TW01.OP0TWTOP - 23; /* return to top of page*/


  if (OP0TW01.OP0TWPER == "N") /* no page errors*/
    OP0TS40(); /* edit the map*/
  end


  if (OP0TW01.OP0TWPER == "N" /* no page errors*/
   && OPAREC.OPAERR == "N")   /* no edit errors*/
    OP0TW01.OP0TWTOP = OP0TW01.OP0TWTOP + 24; /* add full page*/
    OP0TS35(); /* load map*/
  end


end // end OP0TS88

// abend routine
Function OP0TS89()


    /* ********************************************************/
    /* **  Abend routine.                                   ***/
    /* ********************************************************/


       /* abend with negative sqlcode*/


  TA1REC.TA1TYPE = "DB2"; /* db2 abend*/
  TA1REC.TA1PGMNM = "OP0T"; /* program calling name*/
  TA1REC.TA1LOCAT[4] = " "; /* location 4*/
  TA1REC.TA1MAP = "OP0TM001"; /* appl map name*/

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST"; /* post error*/

    try
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end /* call abend reporter*/
    converseLib.validationFailed(487); /* database busy, enter to try again*/

  else
    TA1REC.TA1FUNC = "RETN";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    try
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end /* call abend reporter*/
    XSPF4();
    VAGen_EZEMSG = COMMAREA.CAMSG;
  end
  OPAREC.OPAERR = "Y"; /* set error flag on*/


end // end OP0TS89

// db2 call for sel set for style
Function OP0TS90()


    /* ********************************************************/
    /* **  This statement group calls db2 dorder.vhotsy01   ***/
    /* **  and selects all rows and orders by style and     ***/
    /* **  color.                                           ***/
    /* ********************************************************/


  set SQLCA empty;

  call "IO3180" ("SS", SQLCA, OPZREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "SS"; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO3180"; /* i/o module called*/
    TA1REC.TA1LOCAT[3] = "OP0TS90"; /* where blew up*/
    TA1REC.TA1DBASE = "DORDER"; /* database blew in*/
    TA1REC.TA1TBLVU = "VHOTSY01"; /* view blew in*/
    TA1REC.TA1TBLKE = OPZREC.OPXHMGRP; /* key of rec blew on*/
    OP0TS89(); /* abend routine*/
  end


end // end OP0TS90

// db2 call for get next style
Function OP0TS91()


    /* ********************************************************/
    /* **  This statement group calls db2 dorder.vhotsy01   ***/
    /* **  and selects next row to process.                 ***/
    /* ********************************************************/


  set SQLCA empty;

  call "IO3180" ("SN", SQLCA, OPZREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "SN"; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO3180"; /* i/o module called*/
    TA1REC.TA1LOCAT[3] = "OP0TS91"; /* where blew up*/
    TA1REC.TA1DBASE = "DORDER"; /* database blew in*/
    TA1REC.TA1TBLVU = "VHOTSY01"; /* view blew in*/
    TA1REC.TA1TBLKE = OPZREC.OPXHMGRP; /* key of rec blew on*/
    OP0TS89(); /* abend routine*/
  end


end // end OP0TS91

// db2 call - closing cursor 3180
Function OP0TS92()


    /* ********************************************************/
    /* **  This statement group calls db2 and closes the    ***/
    /* **  cursor scan.                                     ***/
    /* ********************************************************/


  set SQLCA empty;

  call "IO3180" ("CS", SQLCA, OPZREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "CS"; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO3180"; /* i/o module called*/
    TA1REC.TA1LOCAT[3] = "OP0TS92"; /* where blew up*/
    TA1REC.TA1DBASE = "DORDER"; /* database blew in*/
    TA1REC.TA1TBLVU = "VHOTSY01"; /* view blew in*/
    OP0TS89(); /* abend routine*/
  end


end // end OP0TS92

// db2 call for sel unique style
Function OP0TS93()


    /* ********************************************************/
    /* **  This statement group calls db2 dorder.vhotsy01   ***/
    /* **  and selects unique style record.                 ***/
    /* ********************************************************/


  set SQLCA empty;

  call "IO3180" ("S ", SQLCA, OPZREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "S "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO3180"; /* i/o module called*/
    TA1REC.TA1LOCAT[3] = "OP0TS93"; /* where blew up*/
    TA1REC.TA1DBASE = "DORDER"; /* database blew in*/
    TA1REC.TA1TBLVU = "VHOTSY01"; /* view blew in*/
    TA1REC.TA1TBLKE = OPZREC.OPXHMGRP; /* key of rec blew on*/
    OP0TS89(); /* abend routine*/
  end


end // end OP0TS93

// db2 call for sel unique group
Function OP0TS94()


    /* ********************************************************/
    /* **  This statement group calls db2 dorder.vhotcd01   ***/
    /* **  and selects unique group record.                 ***/
    /* ********************************************************/


  set SQLCA empty;

  call "IO3160" ("S ", SQLCA, OPXREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "S "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO3160"; /* i/o module called*/
    TA1REC.TA1LOCAT[3] = "OP0TS94"; /* where blew up*/
    TA1REC.TA1DBASE = "DORDER"; /* database blew in*/
    TA1REC.TA1TBLVU = "VHOTSY01"; /* view blew in*/
    TA1REC.TA1TBLKE = OPXREC.OPXHMGRP; /* key of rec blew on*/
    OP0TS89(); /* abend routine*/
  end


end // end OP0TS94

// db2 call for adding style
Function OP0TS95()


    /* ********************************************************/
    /* **  This statement group calls db2 dorder.vhotsy01   ***/
    /* **  and adds the record to the database table.       ***/
    /* ********************************************************/


  set SQLCA empty;

  call "IO3180" ("A ", SQLCA, OPZREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    OP0TW02.OP0TWOPT[OPASUB1] = " ";
  else
    TA1REC.TA1LOCAT[1] = "A "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO3180"; /* i/o module called*/
    TA1REC.TA1LOCAT[3] = "OP0TS95"; /* where blew up*/
    TA1REC.TA1DBASE = "DORDER"; /* database blew in*/
    TA1REC.TA1TBLVU = "VHOTSY01"; /* view blew in*/
    TA1REC.TA1TBLKE = OPZREC.SY1STNBR; /* key of rec blew on*/
    OP0TS89(); /* abend routine*/
  end


end // end OP0TS95

// db2 call for changing style
Function OP0TS96()


    /* ********************************************************/
    /* **  This statement group calls db2 dorder.vhotsy01   ***/
    /* **  and changes the record on the database table.    ***/
    /* ********************************************************/


  set SQLCA empty;

  call "IO3180" ("U ", SQLCA, OPZREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    OP0TW02.OP0TWOPT[OPASUB1] = " ";
  else
    TA1REC.TA1LOCAT[1] = "U "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO3180"; /* i/o module called*/
    TA1REC.TA1LOCAT[3] = "OP0TS96"; /* where blew up*/
    TA1REC.TA1DBASE = "DORDER"; /* database blew in*/
    TA1REC.TA1TBLVU = "VHOTSY01"; /* view blew in*/
    TA1REC.TA1TBLKE = OPZREC.SY1STNBR; /* key of rec blew on*/
    OP0TS89(); /* abend routine*/
  end


end // end OP0TS96

// db2 call for deleting style
Function OP0TS97()


    /* ********************************************************/
    /* **  This statement group calls db2 dorder.vhotsy01   ***/
    /* **  and deletes the record from the database table.  ***/
    /* ********************************************************/


  set SQLCA empty;

  call "IO3180" ("D ", SQLCA, OPZREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "D "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO3180"; /* i/o module called*/
    TA1REC.TA1LOCAT[3] = "OP0TS97"; /* where blew up*/
    TA1REC.TA1DBASE = "DORDER"; /* database blew in*/
    TA1REC.TA1TBLVU = "VHOTSY01"; /* view blew in*/
    TA1REC.TA1TBLKE = OPZREC.SY1STNBR; /* key of rec blew on*/
    OP0TS89(); /* abend routine*/
  end


end // end OP0TS97

// db2 call for updating product
Function OP0TS98()


    /* ********************************************************/
    /* **  This statement group calls db2 dprod.vcolor03    ***/
    /* **  and update product record.                       ***/
    /* ********************************************************/


  set SQLCA empty;

  call "IO3390" ("U ", SQLCA, SYLREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "U "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO3390"; /* i/o module called*/
    TA1REC.TA1LOCAT[3] = "OP0TS98"; /* where blew up*/
    TA1REC.TA1DBASE = "DPROD"; /* database blew in*/
    TA1REC.TA1TBLVU = "VCOLOR03"; /* view blew in*/
    TA1REC.TA1TBLKE = SYLREC.SY1STNBR; /* key of rec blew on*/
    OP0TS89(); /* abend routine*/
  end


end // end OP0TS98

// db2 call for updating product
Function OP0TS99()


    /* ********************************************************/
    /* **  This statement group calls db2 dprod.vcolor03    ***/
    /* **  and selects unique product record.               ***/
    /* ********************************************************/


  set SQLCA empty;

  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "S "; /* calling option*/
    TA1REC.TA1LOCAT[2] = "IO0560"; /* i/o module called*/
    TA1REC.TA1LOCAT[3] = "OP0TS99"; /* where blew up*/
    TA1REC.TA1DBASE = "DPROD"; /* database blew in*/
    TA1REC.TA1TBLVU = "VCOLOR04"; /* view blew in*/
    TA1REC.TA1TBLKE = SYCREC.SY1STNBR; /* key of rec blew on*/
    OP0TS89(); /* abend routine*/
  end


end // end OP0TS99

Record OP0TW01 type basicRecord
  5 OP0TWRC1 OP0TWRC1 ; 
    10 OP0TWKST OP0TWKST ; 
    10 OP0TWKGR OP0TWKGR ; 
    10 OP0TWKCL OP0TWKCL ; 
    10 OP0TWKDM OP0TWKDM ; 
    10 OP0TWKGP OP0TWKGP ; 
    10 OP0TWTM1 OP0TWTM1 ; 
      15 OP0TWTHF OP0TWTHF ; 
      15 * char(1) ; 
      15 OP0TWTMF OP0TWTMF ; 
      15 * char(1) ; 
      15 OP0TWTSF OP0TWTSF ; 
    10 OP0TWTM2 OP0TWTM2 ; 
      15 OP0TWTM3 OP0TWTM3 ; 
        20 OP0TWTHL OP0TWTHL ; 
        20 OP0TWTML OP0TWTML ; 
      15 OP0TWTSL OP0TWTSL ; 
    10 OP0TWMM1 OP0TWMM1 ; 
    10 OP0TWSS1 OP0TWSS1 ; 
    10 OP0TWSW OP0TWSW [24] ; 
    10 OP0TWTOP OP0TWTOP ; 
    10 OP0TWMAX OP0TWMAX ; 
    10 OP0TWBDT OP0TWBDT [24] ; 
    10 OP0TWEDT OP0TWEDT [24] ; 
    10 OP0TWPAG OP0TWPAG ; 
    10 OP0TWKY1 OP0TWKY1 ; 
    10 OP0TWKY2 OP0TWKY2 ; 
    10 OP0TWUPD OP0TWUPD ; 
    10 OP0TWDER OP0TWDER ; 
    10 OP0TWSEC OP0TWSEC ; 
    10 OP0TWDEL OP0TWDEL ; 
    10 OP0TWPER OP0TWPER ; 
    10 OP0TWEMP OP0TWEMP ; 
end // end OP0TW01

//*** RECORD=OP0TW02 ****
// ************************************************************
// **  work record op0tw02
// ***********************
Record OP0TW02 type basicRecord
  5 OP0TWRC2 OP0TWRC2 [144] ; 
    10 OP0TWOPT OP0TWOPT ; 
    10 OP0TWSTY OP0TWSTY ; 
    10 OP0TWCOL OP0TWCOL ; 
    10 OP0TWDIM OP0TWDIM ; 
    10 OP0TWIND OP0TWIND ; 
    10 OP0TWQTY OP0TWQTY ; 
    10 OP0TWBEG OP0TWBEG ; 
    10 OP0TWEND OP0TWEND ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end OP0TW02

// ccyymmdd begin date
DataItem OP0TWBDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws begin date
DataItem OP0TWBEG char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws color nbr
DataItem OP0TWCOL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// delete flag y/n
DataItem OP0TWDEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date error flag y/n
DataItem OP0TWDER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws dimen nbr
DataItem OP0TWDIM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ccyymmdd end date
DataItem OP0TWEDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// load empty page flag y/n
DataItem OP0TWEMP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws end date
DataItem OP0TWEND char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws hot mod ind
DataItem OP0TWIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws key color
DataItem OP0TWKCL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws key dimension
DataItem OP0TWKDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws key gpc code
DataItem OP0TWKGP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws key group
DataItem OP0TWKGR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws key style
DataItem OP0TWKST char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new style key flag y/n
DataItem OP0TWKY1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new group key flag y/n
DataItem OP0TWKY2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max nbr of styles
DataItem OP0TWMAX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mm
DataItem OP0TWMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws edit option
DataItem OP0TWOPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// more data, page flag y/n
DataItem OP0TWPAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// paging error y/n
DataItem OP0TWPER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws min qty
DataItem OP0TWQTY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op0t ws record
DataItem OP0TWRC1 char(818)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws record 2
DataItem OP0TWRC2 char(31)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// security auth flag
DataItem OP0TWSEC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ss
DataItem OP0TWSS1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws style nbr
DataItem OP0TWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// confirm delete flag y/n
DataItem OP0TWSW char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// change hour
DataItem OP0TWTHF char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hh
DataItem OP0TWTHL num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hh:mm:ss
DataItem OP0TWTM1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hhmmss
DataItem OP0TWTM2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hhmm
DataItem OP0TWTM3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change minute
DataItem OP0TWTMF char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// mm
DataItem OP0TWTML num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// top of page
DataItem OP0TWTOP num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change second
DataItem OP0TWTSF char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ss
DataItem OP0TWTSL num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// update flag y/n
DataItem OP0TWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

