package ae04;

import ab.common.*;
import corpcom2.XP1REC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPAB001;
import corpcom3.XPTA0P;
import corpcom3.XSABS03;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XSETBL;
import ku.common.KUCCOID;
import ku.common.KUMSTRID;
import pc.common.PC2REC;
import pg.common.PG1REC;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
import ta.common.TARJCL;
import ta.common.TARTYPE;
//*** PROGRAM=AE04 ****
// This application allows the user to submit a batch job which
// will create the Size Break Table.
// 
// This application will validate the information entered by
// the user, and then write and submit JCL (Job Control
// Language).
// 
// Job Control Language statements are formatted and submitted
// through the Internal Reader Transient Data Queue (INTR).
// The job executes in batch and all output is routed to the
// remote destination specified through this application.
// 
// The JCL for each job is stored as a table.
// There are two formats available for a JCL statement.
// They are either a fixed or a variable format.
// 
// A fixed statement is identified in the table by a blank JCL
// statement type (TARTYPE).  These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted.  They are identified
// by a non-blank statement type.  The type determines the data
// that is to be substituted and the columns into which it is
// to be placed, as follows:
// 
// TARTYPE         JCL statement        Variable        Columns
// -------         -------------        --------        -------
//    J                JOB              TARUSRID          5-10
//                     " "              TARUSRNM         27-46
//    N  (Test only)  NOTIFY            TARUSRID         23-28
//    O               OUTPUT            TARCOPY            34
//                    "    "            TARDEST          41-46
//    P             Parameters          TARJCL            1-80
// 
// The data in working storage is substituted and the statement
// is written to the internal reader.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from the menu, only.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          03/23/89  JRAMOS  New application.
//          03/21/90  wkinca  modify notify on job card in jcl.
//          07/16/90  jwood   removed ut2rec from t&r list
// Y2KFIX   12/11/97  KSUMME  Y2K MODIFICATIONS MADE TO:
//                            (global chg due to table chg:
//                             XP1REC, AB3REC, XPAB020)
// *********************
Program AE04 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AB3REC AB3REC; // record
  ABWREC ABWREC; // record
  AE04W01 AE04W01; // record
  AE04W02 AE04W02; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC2REC PC2REC; // record
  PG1REC PG1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use AE04T01; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use AE04M.AE04M001, // form
  		AE04M.TA0PM001,
  		AE04M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAB001: XPAB001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse Apparel Buy Create Color Breakout Process*/
     /* ------------------------------------------------------------*/

    set AE04M001 initial; /* Initialize map output area*/
    set AE04W01 empty; /* Initialize working storage*/
    set ABWREC empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set PG1REC empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set TAEREC empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    ABWREC.ABWAPPL = "AE04"; /* Initialize appl id*/
    ABWREC.ABWPRCSN = "0000"; /* Initialize process number*/

                     /* (Set map item values)*/

    ABWREC.ABWMAP = "1"; /* Indicate map to be displayed*/
    AE04M001.XXXCURDT = VGVar.currentShortGregorianDate; /* To map current date*/

                     /* (initialize parameters:)*/
    AE04W01.KUCCOID = -1;
    AE04W01.AE04W-NUMERIC-KUMSTRID = -1;
    AE04W01.AE04W-AB-EMB-DISC-STAT = "*";

    AE04M001.KUCCOID = -1;
    AE04M001.KUMSTRID = -1;

    if (COMMAREA.CAITEM > " ") /* Application data exists*/
      AE04M001.CAITEM = COMMAREA.CAITEM; /* Applic data to map*/
      set AE04M001.CAITEM modified; /* MDT on*/
      COMMAREA.CAITEM = " "; /* Clear applic data*/
    end


    goto AE04-0001; /* Converse the main process*/


    AE04-0001: AE04-0001();

    goto AE04-0001; /* Converse the main process*/

  end // end main
end // end AE04

// Application main process
Function AE04-0001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* -- Display the first (and only) map.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


   /* *================================================**/
   /* *  Define Map Environment, Assign/Edit Defaults  **/
   /* *================================================**/

  ABWREC.ABWPRCSN = "M001"; /* Indicate map to system*/
  ABWREC.XXXMAPNM = ABWREC.ABWERLOC; /* Move map name to afwrec*/
  ABWREC.ABWPRCSN = "0000"; /* Re-initialize process name*/


  if (ABWREC.ABWFIRST == " ") /* First time through*/

    if (XP1REC.XP1MNO == 0) /* No errors found*/
      ABWREC.ABWPRCSN = "0001"; /* Process number*/
      AE04M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    end

  end


   /* *===============**/
   /* *  Display map  **/
   /* *===============**/

  AE04-1000(); /* Display map*/


end // end AE04-0001

// Driver process for application
Function AE04-1000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  AE04-1100(); /* Format and display the map*/

  AE04-1200(); /* Check attention identifier*/

  AE04-1300(); /* Reset fields to normal intensity*/

  AE04-1400(); /* VERIFY FIELDS*/

  AE04-1500(); /* Process valid input request*/


end // end AE04-1000

// Format and display the map
Function AE04-1100()
   /* ------------------------------------------------------------*/
   /* -If no error to display, format and display the map.*/
   /* -Indicate sound audible alarm for any errors detected.*/
   /* -Note that validation is done first (for the defaults)*/
     /* before the first screen is displayed. In this way, the*/
     /* user does not have to press enter to activate the*/
     /* validation process. When the first screen is displayed,*/
     /* all fields have been validated and the results shown.*/
   /* ------------------------------------------------------------*/


  if (ABWREC.ABWFIRST != " ") /* NOT FIRST TIME THROUGH*/
    if (converseVar.validationMsgNum == 0) /* NO ERROR MESSAGE TO DISPLAY*/
      AE04-1110(); /* FORMAT THE MAP*/
      if (converseVar.validationMsgNum == 0) /* NO ERROR MESSAGE TO DISPLAY*/
        if (XP1REC.XP1MNO == 9999)
          converseLib.validationFailed();
        else
          converseLib.validationFailed(XP1REC.XP1MNO);
        end /* INFORMATION MESSAGE NUMBER*/
      end
    end
  end

  if (converseVar.validationMsgNum != 0) /* MESSAGE TO DISPLAY*/
    set AE04M001 alarm; /* INDICATE SOUND ALARM*/
    AE04M001.XXXPRCNM = ABWREC.ABWERLOC; /* PROCESS NAME*/
  end

  AE04M001.XXXCURDT = VGVar.currentShortGregorianDate; /* CURRENT DATE*/

  AE04M001.CATOAP = COMMAREA.CATOAP; /* FAST PATH INFORMATION*/
  AE04M001.CAITEM = COMMAREA.CAITEM; /* FAST PATH INFORMATION*/

  ABWREC.ABWFIRST = "N"; /* TURN 'FIRST TIME THROUGHT' OFF*/


  converse AE04M001 ;

  XP1REC.XP1MNO = 0; /* RESET ERROR MESSAGE NUMBER*/

  COMMAREA.CATOAP = AE04M001.CATOAP; /* FAST PATH INFORMATION*/
  COMMAREA.CAITEM = AE04M001.CAITEM; /* FAST PATH INFORMATION*/

end // end AE04-1100

// Format map
Function AE04-1110()

  set AE04M001 initial;

  /* IF AE04W01.KUCCOID LT 1;*/
  /* MOVE 0 TO AE04M001.KUCCOID;*/
  /* ELSE;*/
  AE04M001.KUCCOID = AE04W01.KUCCOID;
  /* END;*/

  /* IF AE04W01.AE04W-NUMERIC-KUMSTRID LT 1;*/
  /* MOVE 0 TO AE04M001.KUMSTRID;*/
  /* ELSE;*/
  AE04M001.KUMSTRID = AE04W01.AE04W-NUMERIC-KUMSTRID;
  /* END;*/

  if (AE04W01.AE04W-AB-EMB-DISC-STAT == "*")
    AE04M001.AE04M-AB-EMB-DISC-STAT = " ";
  else
    AE04M001.AE04M-AB-EMB-DISC-STAT = AE04W01.AE04W-AB-EMB-DISC-STAT;
  end

  set AE04M001.KUCCOID cursor; /* SET CURSOR POSITION*/


end // end AE04-1110

// Check attention identifier
Function AE04-1200()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set AE04M001 empty;

    ABWREC.ABWPRCSN = "1200"; /* Process number*/
    AE04M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    AE04W01.AE04W-AB-EMB-DISC-STAT = " ";
    AE04W01.KUCCOID = 0;
    AE04W01.AE04W-ALPHA-KUMSTRID = " ";

    exit stack; /* Exit to redisplay map*/

  end


  if (AE04M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AE04M001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AE04M001.CAITEM; /* Application data*/
      XSABS03(); /* Exit to another application*/
      XP1REC.XP1MNO = converseVar.validationMsgNum;
                                   /* Save EZEMNO to common msg area*/
    else
      XP1REC.XP1MNO = 4; /* Indicate PF key not valid*/
    end

    set AE04M001.CATOAP cursor, modified, bold; /* Highlight*/
    ABWREC.ABWPRCSN = "1200"; /* Process number*/
    AE04M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end


  if (AE04M001.CAITEM > " ") /* Application data was entered*/
    set AE04M001.CAITEM cursor, modified, bold; /* Highlight data*/
    XP1REC.XP1MNO = 7; /* Enter only with fast path*/
    ABWREC.ABWPRCSN = "1200"; /* Process number*/
    AE04M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    exit stack; /* Redisplay map*/
  end


  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AB0MM001"; /* Appl find code*/
    end


    XSABS03(); /* Exit to another application*/

    exit stack; /* Exit to redisplay map*/
  end


  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    ABWREC.ABWPRCSN = "1200"; /* Process number*/
    AE04M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    XP1REC.XP1MNO = 4; /* Indicate invalid attention key*/


    if (converseVar.eventKey is pa1) /* PA1 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    exit stack; /* Exit to redisplay map*/

  end
end // end AE04-1200

// Reset highlighted fields
Function AE04-1300()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/


  set AE04M001.CATOAP initialAttributes; /* TO application*/
  set AE04M001.CAITEM initialAttributes; /* Application data*/


  set AE04M001.KUCCOID initialAttributes;
  set AE04M001.KUMSTRID initialAttributes;
  set AE04M001.AE04M-AB-EMB-DISC-STAT initialAttributes;



end // end AE04-1300

// Verify the entered data
Function AE04-1400()
   /* ------------------------------------------------------------*/
   /* Verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  XP1REC.XP1MNO = 0;

   /* *=====================**/
   /* *  Edit entered data  **/
   /* *=====================**/

  if (AE04M001.AE04M-AB-EMB-DISC-STAT != AE04W01.AE04W-AB-EMB-DISC-STAT)
    if (AE04M001.AE04M-AB-EMB-DISC-STAT == "I"
     || AE04M001.AE04M-AB-EMB-DISC-STAT == "A"
     || AE04M001.AE04M-AB-EMB-DISC-STAT == " ")
      if (AE04M001.AE04M-AB-EMB-DISC-STAT == " ")
        AE04W01.AE04W-AB-EMB-DISC-STAT = "*";
      else
        AE04W01.AE04W-AB-EMB-DISC-STAT = AE04M001.AE04M-AB-EMB-DISC-STAT;
      end
    else
      XP1REC.XP1MNO = 172;
      set AE04M001.AE04M-AB-EMB-DISC-STAT cursor, bold;
    end
  end

  if (AE04M001.KUMSTRID != AE04W01.AE04W-NUMERIC-KUMSTRID)
    if (AE04M001.KUMSTRID < -1)
      XP1REC.XP1MNO = 173;
      set AE04M001.KUMSTRID cursor, bold;
    else
      if (AE04W01.KUCCOID < 1
       && AE04M001.KUMSTRID > 0)
        XP1REC.XP1MNO = 160;
        set AE04M001.KUMSTRID bold;
        set AE04M001.KUCCOID cursor, bold;
      else
        if (AE04M001.KUMSTRID > -1)
          AE04W01.AE04W-NUMERIC-KUMSTRID = AE04M001.KUMSTRID;
        else
          AE04W01.AE04W-NUMERIC-KUMSTRID = -1;
        end
      end
    end
  end

  if (AE04M001.KUCCOID != AE04W01.KUCCOID)
    if (AE04M001.KUCCOID < -1)
      XP1REC.XP1MNO = 172;
      set AE04M001.KUCCOID cursor, bold;
    else
      if (AE04M001.KUCCOID > 0)
        AE04W01.KUCCOID = AE04M001.KUCCOID;
      else
        AE04W01.KUCCOID = -1;
      end
    end
  end

  if (XP1REC.XP1MNO == 0)
    AE04-1410();
  end

  if (XP1REC.XP1MNO != 0)
    if (XP1REC.XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1REC.XP1MNO);
    end
    exit stack;
  end

end // end AE04-1400

// Edit Customer No., Store
Function AE04-1410()
  if (AE04W01.KUCCOID < 1) /* aE04w01 Field eq spaces*/
    return; /* Return to calling process*/
  end

  AE04S01(); /* select set cust edit*/
  AE04S02(); /* fetch next cust edit*/
  AE04S03(); /* close set cust edit*/

end // end AE04-1410

// Process valid input request
Function AE04-1500()
   /* ------------------------------------------------------------*/
   /* Check for validation errors*/
   /* ------------------------------------------------------------*/

  if (XP1REC.XP1MNO != 0 /* Validation errors are present*/
   && XP1REC.XP1MNO != 24) /* Not OK to submit*/
    exit stack; /* Redisplay map with message*/
  end


   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  AE04W01.AE04WIXT = 1; /* Initialize JCL table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

  if (TA3REC.TA3RGNID == "03")
    AE04W01.AE04WIXT = 1;
  else
    if ("/*EOF" in AE04T01.TARJCL)
      AE04W01.AE04WIXT = sysVar.arrayIndex;
      AE04W01.AE04WIXT = AE04W01.AE04WIXT + 1;
    else
      AE04W01.AE04WIXT = 1;
    end
  end
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (AE04W01.AE04WIXT > 0) /* Until end of table*/

    if (AE04T01.TARTYPE[AE04WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format parameters for the color breakout for submission*/
      /* ------------------------------------------------------------*/

      set AE04W02 empty; /* Reset parameters work area*/

      AE04W02.KUCCOID = AE04W01.KUCCOID; /* CUSTOMER*/
      AE04W02.KUMSTRID = AE04W01.AE04W-NUMERIC-KUMSTRID; /* STORE*/
      AE04W02.AE04W-AB-EMB-DISC-STAT = AE04W01.AE04W-AB-EMB-DISC-STAT;

      AE04W01.TARJCL = AE04W02.TARJCL; /* Parameter variables*/

      AE04T01.TARJCL[AE04WIXT] = AE04W01.TARJCL;

    end


    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = AE04T01.TARJCL[AE04WIXT]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = AE04T01.TARTYPE[AE04WIXT]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/


    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (AE04T01.TARJCL[AE04WIXT] == "/*EOF") /* End of table*/
      AE04W01.AE04WIXT = 0; /* Indicate end of table*/
    else
      AE04W01.AE04WIXT = AE04W01.AE04WIXT + 1; /* Increment table index*/
    end

  end


   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/


  AE04-1510(); /* Submit the JCL*/


end // end AE04-1500

// Submit Job/Select Printer
Function AE04-1510()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* send message to terminal*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end


   /* ------------------------*/
   /* Fix process location*/
   /* ------------------------*/

  ABWREC.ABWPRCSN = "1510"; /* Process number*/
  AE04M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    XP1REC.XP1MNO = 22; /* Indicate job was submitted*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    XP1REC.XP1MNO = 23; /* Indicate user cancelled*/
  else
    XP1REC.XP1MNO = 10; /* Indicate system error*/
  end

  exit stack; /* Exit to display map*/


end // end AE04-1510

// Select VPRDCU01 - Cust edit
Function AE04S01()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set PC2REC empty; /* Reset rec work area*/

  PC2REC.XNXCD = -1; /* dept.*/
  PC2REC.XGPCD = XP1REC.XGPCD; /* gpc cd*/
  PC2REC.KUCCOID = AE04W01.KUCCOID; /* cust.*/
  PC2REC.KUMSTRID = AE04W01.AE04W-NUMERIC-KUMSTRID; /* store*/


   /* *===================================**/
   /* *  Select Set from Dprodc.vprdcu01  **/
   /* *===================================**/

  try
    call "IO3340" ("S3", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S01 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AE04M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AE04S01

// Fetch Vprdcu01 - Cust edit
Function AE04S02()
   /* ------------------------------------------------------------*/
                /* *** Process dprodc.vprdcu01****/
   /* Select the target row on a 'select next' call and store*/
     /* data into program-defined area. If first row retrieved,*/
     /* obtain and format size descriptions.*/
   /* ------------------------------------------------------------*/



  try
    call "IO3340" ("N3", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end



   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/


    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/

      return; /* return to calling process*/
    end
    if (SQLCA.VAGen_SQLCODE == 100)
      set AE04M001.KUCCOID cursor, bold; /* highligh field*/
      XP1REC.XP1MNO = 158; /* indicate error message*/
      ABWREC.ABWPRCSN = "S02";
      return; /* return to calling process*/
    end

  end




   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S02 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODC.VPRDCU01 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AE04M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AE04S02

// Close vprdcu01 - Cust edit
Function AE04S03()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3340" ("C3", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  ABWREC.ABWPRCSN = "S03 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AE04M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/



end // end AE04S03

//*** RECORD=AE04W01 ****
// ********************************
// Application Working Storage (1).
// ********************************
// ***********************
Record AE04W01 type basicRecord
  10 TARJCL TARJCL ; 
  10 TARTYPE TARTYPE ; 
  10 KUCCOID KUCCOID ; 
  10 AE04W-NUMERIC-KUMSTRID AE04W-NUMERIC-KUMSTRID ; 
    15 AE04W-ALPHA-KUMSTRID AE04W-ALPHA-KUMSTRID ; 
  10 AE04W-AB-EMB-DISC-STAT AE04W-AB-EMB-DISC-STAT ; 
  10 AE04WIXT AE04WIXT ; 
end // end AE04W01

//*** RECORD=AE04W02 ****
// PARM LAYOUT AB313D******************************************
// ***********************
Record AE04W02 type basicRecord
  5 TARJCL TARJCL ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 AE04W-AB-EMB-DISC-STAT AE04W-AB-EMB-DISC-STAT ; 
    10 * char(73) ; 
end // end AE04W02

// Minimum quantity
DataItem AE04W-AB-EMB-DISC-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AE04W-ALPHA-KUMSTRID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AE04W-NUMERIC-KUMSTRID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// JCL table index
DataItem AE04WIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

