package ae03;
import ab.common.*;
import af.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import ku.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=AE03 ****
// This application allows the user to maintain the quantity
// values of existing rows in the Safety Stock Table (DABUY.
// VSAFTY01). The user may change the value of the quantity/ies
// of each style/color/size for the style specified, as well
// as add new colors for each style being processed. The user
// can also delete colors from a specified style by moving
// zeroes to all applicable sizes. An Apparel Scheduler Super-
// visor will use this application to adjust to the quantity
// of each size of each color for each style for the style of
// blank t-shirt specified.
// 
// Upon initial entry, the table is read and columns from the
// selected rows are formatted and saved in temporary storage,
// one display page per queue record.
// 
// The records are retrieved from temporary storage one at a
// time, for display to the user.  The user may page forward
// and backward, to view and/or update the rows that were
// selected.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
// CONTROL   DATE   USERID DESCRIPTION OF CHANGE
// ------- -------- ------ ------------------------------------
//         06/01/89 JRAMOS New application.
// AB#132  11/17/92 RCHINI Add a second screen to hold last 3
//                         sizes that will not fit on the 1st
//                         screen.  This change adds PF Keys
//                         10 and 11 (left and and right).
//                         Also modified map 1 to hold first 7
//                         sizes.  Map 2 displays last 3 sizes.
//                         The size qty fields were enlarged to
//                         hold the colorways accumulated size
//                         quantities.
// AB#141  11/17/92 RCHINI Add grand total line accumulating
//                         safety stock for all colorways.
//         09-21-93 LREIN  Change to record AE03W01 for CSP v 4
//         11-09-93 LREIN  fixed subscript pron. moved errmsg
//                         for pf20, pf19 to ezemno
// Y2KFIX  12/11/97  KSUMME  Y2K MODIFICATIONS TO:
//       (for tble chng: regen only to pick up the global chg
//                      in AB3REC, XP1REC, and XPAB020)
// *********************
Program AE03 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AB3REC AB3REC; // record
  ABWREC ABWREC; // record
  AE03W01 AE03W01; // record
  AE03W02 AE03W02; // record
  AE03W03 AE03W03; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC2REC PC2REC; // record
  PG1REC PG1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VCRSTE01 VCRSTE01; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XSETBL {deleteAfterUse = yes}; // table
  use AE03M.AE03M001,  // forms
      AE03M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAB001: XPAB001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Apparel Buy Prototype process.*/
     /* ------------------------------------------------------------*/

    set ABWREC empty; /* Initialize working storage*/
    set AE03W01 empty; /* Initialize working storage*/
    set AE03W02 empty; /* Initialize working storage*/
    set AE03W03 empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set PC2REC empty; /* INITIALIZE WORKING STORAGE*/
    set PG1REC empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set TAEREC empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TA3REC empty; /* Initialize working storage*/
    set TA5REC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/

    set AE03M001 initial; /* Initialize map output area*/

                   /* (Define Map Environment)*/

    ABWREC.ABWAPPL = "AE03"; /* Initialize appl ID for this appl*/
    ABWREC.ABWPRCSN = "M001"; /* Indicate map one*/
    ABWREC.XXXMAPNM = ABWREC.ABWERLOC; /* Move map name to abwrec*/


                    /* (Set Map Item Values)*/

    ABWREC.ABWPRCSN = "0000"; /* Initialize process number to zero*/

    ABWREC.ABWMAP = "1"; /* Indicate map to be displayed*/

    AE03M001.XXXCURDT = VGVar.currentShortGregorianDate; /* To map current date*/

    ABWREC.ABWSWR = "N"; /* Do not obtain data*/


                /* (Set Update Flag)*/
    AE03W01.AE03WUPD = "N"; /* Set flag off*/

           /* (Compute for Maximum Map Dtl Lines)*/

    move " " to AE03M001.AE03M-DELETE[1] for all;
    ABWREC.ABWMPMAX = sysVar.arrayIndex; /* Obtain max lines from EZETST*/



    ABWREC.ABWIDX1 = 1; /* Initialize loop index*/

    while (ABWREC.ABWIDX1 <= ABWREC.ABWMPMAX) /* Protect,dark map dtl lines*/

      set AE03M001.AE03M-DELETE[ABWIDX1] skip, invisible; /**/
      set AE03M001.AE03M-CU-CO-ID[ABWIDX1] skip, invisible; /**/
      set AE03M001.AE03M-CU-STOR-ID[ABWIDX1] skip, invisible; /**/
      set AE03M001.AE03M-AB-EMB-DISC-ID[ABWIDX1] skip, invisible; /**/
      set AE03M001.AE03M-AB-EMB-DISC-STAT[ABWIDX1] skip, invisible; /**/

      ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1; /* Loop through*/

    end
                    /* (Converse Main Process)*/

    goto AE03-0001; /* Converse Apparel Buy Application*/


    AE03-0001: AE03-0001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    goto AE03-0001; /* Converse Transportation Prototype*/


  end // end main
end // end AE03


// Driver process for 100 map
Function AE03-0001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  AE03-1100(); /* Obtain the data to display*/

  AE03-1200(); /* Format and display the map*/

  AE03-1300(); /* Check attention identifier*/

  AE03-1400(); /* Reset fields to normal intensity -*/

  AE03-1500(); /* Verify the entered data*/

  AE03-1600(); /* Process valid input request*/


end // end AE03-0001


// Obtain the data to display
Function AE03-1100()
   /* ------------------------------------------------------------*/
   /* If data was not requested, return to the previous process.*/
   /* Purge any existing queue in temporary storage.*/
   /* Check for User Response and process appropriate data base.*/
   /* If no errors found from data retrieve, indicate that the*/
     /* request for data was completed.*/
   /* ------------------------------------------------------------*/


  if (converseVar.validationMsgNum != 0) /* Errors detected*/
    return; /* Return to previous process*/
  end

  if (converseVar.eventKey is pf19) /* previous CUST*/
    if (AE03W03.AE03W-CUST-IDX > 1)
      AE03W03.AE03W-CUST-IDX = AE03W03.AE03W-CUST-IDX - 1;
      AE03W01.AE03W-PF15-MODE = "N"; /* pf15 not selected*/
    else
      XP1REC.XP1MNO = 164;
      converseLib.validationFailed(164);
      return;
    end
  end

  if (converseVar.eventKey is pf20) /* next CUST*/
    if (AE03W03.AE03W-CUST-IDX < AE03W03.AE03W-CUST-CNT)
      AE03W03.AE03W-CUST-IDX = AE03W03.AE03W-CUST-IDX + 1;
      AE03W01.AE03W-PF15-MODE = "N"; /* pf15 not selected*/
    else
      XP1REC.XP1MNO = 47;
      converseLib.validationFailed(47);
      return;
    end
  end


  if (ABWREC.ABWSWR == "Y") /* selection criteria was changed*/
    AE03-1120(); /* load CUST  list*/
  end


  if (converseVar.eventKey is pf15 /* trying to add without a customer*/
   && AE03W03.AE03W-CUST-CNT == 0)
    if (AE03W01.KUCCOID < 1)
      converseLib.validationFailed(165);
      set AE03M001.KUCCOID cursor, bold;
      return;
    end
  end

  if (converseVar.eventKey not pf15)
    if (AE03W03.AE03W-CUST-CNT > 0)
      AE03-1160(); /* Process DABUY.VCRSTE01 rows*/
    end
  else
    AE03-1170(); /* Process add dabuy.vcrste01 rows*/
  end


end // end AE03-1100


// Process Cust List
Function AE03-1120()
   /* ------------------------------------------------------------*/
           /* *** Process DABUY.VCRSTE01 Rows ****/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/



  AE03S20(); /* Select set and open the cursor*/

  if (converseVar.validationMsgNum == 0) /* No errors were found*/


    ABWREC.ABWSWC = "N"; /* Initialize end of file switch*/

    set AE03W03 empty; /* Clear temporary storage record*/

    if (AE03W01.KUCCOID > 0
     && AE03W01.AE03W-ALPHA-KUMSTRID > " ")
      AE03W03.AE03W-CUST-CNT = 1;
      AE03W03.KUCCOID[AE03W-CUST-CNT] = AE03W01.KUCCOID;
      AE03W03.KUMSTRID[AE03W-CUST-CNT] = AE03W01.AE03W-NUMERIC-KUMSTRID;
    else
      AE03W03.AE03W-CUST-CNT = 0; /* Initialize CUST COUNT*/
    end

    AE03W03.AE03W-CUST-IDX = 1; /* Initialize CUST INDEX*/

    while (ABWREC.ABWSWC == "N") /* Until cursor end of file*/

      AE03S21(); /* Obtain data*/

      if (converseVar.validationMsgNum != 0) /* Errors were found*/
        ABWREC.ABWSWC = "Y"; /* Force end of file*/
      end

    end


  end


  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    AE03S22(); /* Close the selected set cursor*/
  end



end // end AE03-1120


// Process Disc List
Function AE03-1160()
   /* ------------------------------------------------------------*/
           /* *** Process DABUY.VCRSTE01 Rows ****/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At end of rows, add any partial page to the queue.*/
   /* At end of rows, close the selected set cursor.*/
   /* ------------------------------------------------------------*/

  AE03S01(); /* Select set and open the cursor*/

  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    ABWREC.ABWSWC = "N"; /* Initialize end of file switch*/
    ABWREC.ABWIXM = 1; /* Initialize display line number*/
    set AE03W02 empty; /* Clear temporary storage record*/
    while (ABWREC.ABWSWC == "N") /* Until cursor end of file*/
      AE03S02(); /* Obtain data and format page*/
      if (converseVar.validationMsgNum != 0) /* Errors were found*/
        ABWREC.ABWSWC = "Y"; /* Force end of file*/
      end
    end
  end



  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    AE03S06(); /* Close the selected set cursor*/
  end

  if (AE03W01.AE03WUPD == "Y")
    XP1REC.XP1MNO = 45; /* seccussful update*/
  end


end // end AE03-1160


// Process ADD Disc
Function AE03-1170()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* At end of rows, close the selected set cursor.*/
   /* ------------------------------------------------------------*/

  AE03S07(); /* Select set and open the cursor*/
  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    ABWREC.ABWSWC = "N"; /* Initialize end of file switch*/
    ABWREC.ABWIXM = 1; /* Initialize display line number*/
    set AE03W02 empty; /* Clear temporary storage record*/
    while (ABWREC.ABWSWC == "N") /* Until cursor end of file*/
      AE03S08(); /* Obtain data and format page*/
      if (ABWREC.ABWIXM > ABWREC.ABWMPMAX) /* Page is full*/
        XP1REC.XP1MNO = 165;
        ABWREC.ABWPRCSN = "1170";
        AE03W01.AE03W-PF15-MODE = "N";
        return;
      end
      if (converseVar.validationMsgNum != 0) /* Errors were found*/
        ABWREC.ABWSWC = "Y"; /* Force end of file*/
      end
    end
  end
  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    ABWREC.ABWIDX1 = ABWREC.ABWIXM; /* Determine start line*/
    if (ABWREC.ABWIDX1 > 1)
      ABWREC.ABWIDX1 = ABWREC.ABWIDX1 - 1;
      AE03W01.AE03W-HOLD-DISC = AE03W02.AE03W-AB-EMB-DISC-ID[ABWIDX1];
      ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1;
      AE03W01.AE03W-HOLD-DISC = AE03W01.AE03W-HOLD-DISC + 1;
      AE03W02.AE03W-AB-EMB-DISC-ID[ABWIDX1] = AE03W01.AE03W-HOLD-DISC;
    else
      AE03W02.AE03W-AB-EMB-DISC-ID[ABWIDX1] = 01;
      AE03W03.AE03W-CUST-CNT = AE03W-CUST-CNT + 1;
      AE03W03.KUCCOID[AE03W-CUST-CNT] = AE03W01.KUCCOID;
      AE03W03.KUMSTRID[AE03W-CUST-CNT] = AE03W01.AE03W-NUMERIC-KUMSTRID;
    end

    AE03W02.AE03W-CU-CO-ID[ABWIDX1] = AE03W03.KUCCOID[AE03W-CUST-IDX];
    AE03W02.AE03W-CU-STOR-ID[ABWIDX1] = AE03W03.KUMSTRID[AE03W-CUST-IDX];
    AE03W02.AE03W-DELETE[ABWIDX1] = " ";
    AE03W02.AE03W-STATUS[ABWIDX1] = "A";
    AE03W02.AE03W-AB-EMB-DISC-STAT[ABWIDX1] = "A";

    ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1;


  end




  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    AE03S10(); /* Close the selected set cursor*/
  end

  if (converseVar.validationMsgNum == 0)
    ABWREC.ABWPRCSN = "1170";
    XP1REC.XP1MNO = 166; /* press enter to add message*/
  end


end // end AE03-1170


// Format and display map 1
Function AE03-1200()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/



  if (ABWREC.ABWFIRST != " ") /* Not first time through*/

    if (converseVar.validationMsgNum == 0) /* No error message to display*/

      AE03-1210(); /* Format map page data*/

      if (converseVar.validationMsgNum == 0) /* No error message to display*/
        if (XP1REC.XP1MNO == 9999)
          converseLib.validationFailed();
        else
          converseLib.validationFailed(XP1REC.XP1MNO);
        end /* Information message number*/
      end

    end

  end



  if (converseVar.validationMsgNum == 0 /* No errors found*/
   && ABWREC.ABWFIRST != " ")           /* Not first time*/
    set AE03M001.AE03M-DELETE[1] cursor; /* Set cursor at map dtl area*/
  end



  if (converseVar.validationMsgNum != 0) /* Message to display*/
    set AE03M001 alarm; /* Indicate sound alarm*/
    AE03M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  end


  AE03M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  AE03M001.CATOAP = COMMAREA.CATOAP; /* Fast path information*/
  AE03M001.CAITEM = COMMAREA.CAITEM; /* Fast path information*/


  ABWREC.ABWFIRST = "N"; /* turn 'first time through' OFF*/



  converse AE03M001 ;


   /* ----------------------------------------------------------*/
    /* Clear Message Work Area and Save Fast Path Information*/
   /* ----------------------------------------------------------*/

  XP1REC.XP1MNO = 0; /* RESET ERROR MESSAGE NUMBER*/

  COMMAREA.CATOAP = AE03M001.CATOAP; /* Fast path information*/
  COMMAREA.CAITEM = AE03M001.CAITEM; /* Fast path information*/


end // end AE03-1200


// Format selected data
Function AE03-1210()
   /* ------------------------------------------------------------*/
    /* Clear Map for New Data to Display*/
   /* ------------------------------------------------------------*/

  set AE03M001 initial;


   /* ------------------------------------------------------------*/
    /* Format Map Header Information from ae03w01.*/
   /* ------------------------------------------------------------*/

   /* ***** SELECTION CRITERIA *************/
  AE03M001.KUCCOID = AE03W01.KUCCOID; /* CUSTOMER*/
  AE03M001.KUMSTRID = AE03W01.AE03W-ALPHA-KUMSTRID; /* STORE*/

  AE03M001.AE03M-CURR-CU-CO-ID = AE03W03.KUCCOID[AE03W-CUST-IDX];
  AE03M001.AE03M-CURR-CU-STOR-ID = AE03W03.KUMSTRID[AE03W-CUST-IDX];

  if (AE03W03.AE03W-CUST-CNT == 0)
    set AE03M001.KUCCOID cursor;
    ABWREC.ABWPRCSN = "1210";
    converseLib.validationFailed(5);
    return;
  end

  set AE03M001.AE03M-DELETE[1] cursor; /* Set cursor position*/


   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the map detail data obtained.*/
   /* ------------------------------------------------------------*/


  ABWREC.ABWIXM = 1; /* Initialize line index*/

  while (ABWREC.ABWIXM <= 10) /* Until end of lines*/

    if (AE03W02.AE03W-AB-EMB-DISC-ID[ABWIXM] > 0) /* Not Unused line*/
      AE03M001.AE03M-DELETE[ABWIXM] = AE03W02.AE03W-DELETE[ABWIXM];
      AE03M001.AE03M-CU-CO-ID[ABWIXM] = AE03W02.AE03W-CU-CO-ID[ABWIXM];
      AE03M001.AE03M-CU-STOR-ID[ABWIXM] = AE03W02.AE03W-CU-STOR-ID-CHA[ABWIXM];
      AE03M001.AE03M-AB-EMB-DISC-ID[ABWIXM] = AE03W02.AE03W-AB-EMB-DISC-ID[ABWIXM];
      AE03M001.AE03M-AB-EMB-DISC-STAT[ABWIXM] = AE03W02.AE03W-AB-EMB-DISC-STAT[ABWIXM];
      if (AE03W02.AE03W-STATUS[ABWIXM] == "A")
        set AE03M001.AE03M-DELETE[ABWIXM] skip;
        set AE03M001.AE03M-AB-EMB-DISC-STAT[ABWIXM] skip;
      end
    else /* (Unused line)*/
      set AE03M001.AE03M-DELETE[ABWIXM] skip, invisible;
      set AE03M001.AE03M-CU-CO-ID[ABWIXM] skip, invisible;
      set AE03M001.AE03M-CU-STOR-ID[ABWIXM] skip, invisible;
      set AE03M001.AE03M-AB-EMB-DISC-ID[ABWIXM] skip, invisible;
      set AE03M001.AE03M-AB-EMB-DISC-STAT[ABWIXM] skip, invisible;
    end

    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

  end



end // end AE03-1210


// Check attention identifier
Function AE03-1300()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set AE03M001 initial; /* Clear the map fields*/
    if (AE03W01.AE03W-PF15-MODE == "Y") /* add*/
      AE03W01.AE03W-PF15-MODE = "N";
      ABWREC.ABWIDX1 = ABWREC.ABWIDX1 - 1;
      AE03W02.AE03W-DELETE[ABWIDX1] = " ";
      AE03W02.AE03W-CU-CO-ID[ABWIDX1] = 0;
      AE03W02.AE03W-CU-STOR-ID-CHA[ABWIDX1] = " ";
      AE03W02.AE03W-AB-EMB-DISC-ID[ABWIDX1] = 0;
      AE03W02.AE03W-AB-EMB-DISC-STAT[ABWIDX1] = " ";
      AE03W02.AE03W-STATUS[ABWIDX1] = " ";
    end

    exit stack; /* Exit to redisplay map*/

  end


  if (AE03M001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AE03M001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AE03M001.CAITEM; /* Application data*/
      XSABS03(); /* Exit to another application*/
    else
      converseLib.validationFailed(4); /* Indicate PF key not valid*/
    end

    set AE03M001.CATOAP cursor, modified, bold; /* Highlight*/
    ABWREC.ABWPRCSN = "1300"; /* Process number*/
    AE03M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end


  if (AE03M001.CAITEM > " ") /* Application data was entered*/
    set AE03M001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with fast path*/
    ABWREC.ABWPRCSN = "1300"; /* Process number*/
    AE03M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end


  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    XSABS03(); /* Exit to another application*/

    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AE03M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf15  /* and PF15 was not pressed*/
   && converseVar.eventKey not pf19  /* and PF19 was not pressed*/
   && converseVar.eventKey not pf20) /* and PF20 was not pressed*/

    ABWREC.ABWPRCSN = "1300"; /* Process number*/
    AE03M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    exit stack; /* Exit to redisplay map*/

  end


end // end AE03-1300


// Reset highlighted flds
Function AE03-1400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set AE03M001.KUCCOID initialAttributes; /* Reset CUSTOMER HEADER*/
  set AE03M001.KUMSTRID initialAttributes; /* Reset STORE HEADER*/
  set AE03M001.AE03M-CURR-CU-CO-ID initialAttributes;
  set AE03M001.AE03M-CURR-CU-STOR-ID initialAttributes;

  set AE03M001.CATOAP initialAttributes; /* Commarea TO application*/
  set AE03M001.CAITEM initialAttributes; /* Commarea application data*/

  AE03M001.XXXPRCNM = "AE03    "; /* Reset process name*/
  ABWREC.ABWERLOC = "AE03    "; /* Reset process name*/


  ABWREC.ABWIXM = 1; /* Initialize line index*/

  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Until end of lines*/

    set AE03M001.AE03M-DELETE[ABWIXM] initialAttributes;
    set AE03M001.AE03M-CU-CO-ID[ABWIXM] initialAttributes;
    set AE03M001.AE03M-CU-STOR-ID[ABWIXM] initialAttributes;
    set AE03M001.AE03M-AB-EMB-DISC-ID[ABWIXM] initialAttributes;
    set AE03M001.AE03M-AB-EMB-DISC-STAT[ABWIXM] initialAttributes;

    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

  end



   /* ------------------------------------------------------------*/
   /* Protect all unused lines on map detail area.*/
   /* ------------------------------------------------------------*/


  ABWREC.ABWIXM = 1; /* Initialize line index*/

  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Until end of lines*/

    if (AE03W02.AE03W-AB-EMB-DISC-ID[ABWIXM] < 1) /* Unused line*/
      set AE03M001.AE03M-DELETE[ABWIXM] skip, invisible;
      set AE03M001.AE03M-CU-CO-ID[ABWIXM] skip, invisible;
      set AE03M001.AE03M-CU-STOR-ID[ABWIXM] skip, invisible;
      set AE03M001.AE03M-AB-EMB-DISC-ID[ABWIXM] skip, invisible;
      set AE03M001.AE03M-AB-EMB-DISC-STAT[ABWIXM] skip, invisible;
    end

    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

  end


end // end AE03-1400


// Verify the entered data
Function AE03-1500()
   /* ------------------------------------------------------------*/
   /* Verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  AE03S19();

  if (XP1REC.XP1MNO == 0)
    AE03-1520(); /* Verify selection criteria for map*/
  end

  if (XP1REC.XP1MNO != 0) /* Errors found*/

    if (XP1REC.XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1REC.XP1MNO);
    end
    exit stack; /* Exit to redisplay map*/

  end


end // end AE03-1500


// Edit selection criteria
Function AE03-1520()
   /* ============================================================*/
   /* ===== E D I T    S E L E C T I O N    C R I T E R I A  =====*/
   /* =====                                                  =====*/
   /* ===== Compare selection criteria on screen to data on  =====*/
   /* ===== working storatge record, if any has changed,     =====*/
   /* ===== validate all selection criteria fields and turn  =====*/
   /* ===== on switch which allows later processing to purge =====*/
   /* ===== temporary storage and re-load it with newly      =====*/
   /* ===== selected data.                                   =====*/
   /* ============================================================*/

  ABWREC.ABWSWR = "N"; /* initialize switch to 'OFF'*/
  XP1REC.XP1MNO = 0;

   /* *************************************************************/

  if (AE03W01.AE03WUPI == "Y")
    if (AE03M001.KUCCOID != AE03W01.KUCCOID
     || AE03M001.KUMSTRID != AE03W01.AE03W-NUMERIC-KUMSTRID)
      XP1REC.XP1MNO = 171;
      AE03M001.KUCCOID = AE03W01.KUCCOID;
      AE03M001.KUMSTRID = AE03W01.AE03W-NUMERIC-KUMSTRID;
    end
  else
    if (AE03M001.KUCCOID != AE03W01.KUCCOID)
      AE03W01.KUCCOID = AE03M001.KUCCOID;
      ABWREC.ABWSWR = "Y"; /* Turn 'ON' switch to re-select*/
    end

    if (AE03M001.KUMSTRID != AE03W01.AE03W-NUMERIC-KUMSTRID)
      if (AE03W01.KUCCOID < 1
       && AE03M001.KUMSTRID > 0)
        XP1REC.XP1MNO = 160;
        set AE03M001.KUMSTRID bold;
        set AE03M001.KUCCOID cursor, bold;
      else
        if (AE03M001.KUMSTRID < "0000"
         || AE03M001.KUMSTRID > "9999")
          XP1REC.XP1MNO = 161;
          set AE03M001.KUMSTRID cursor, bold;
        else
          AE03W01.AE03W-NUMERIC-KUMSTRID = AE03M001.KUMSTRID;
          ABWREC.ABWSWR = "Y"; /* Turn 'ON' switch to re-select*/
        end
      end
    end

    if (AE03M001.KUMSTRID == 0
     && AE03M001.KUCCOID == 0
     && AE03W01.AE03W-NUMERIC-KUMSTRID == 0)
      AE03W01.AE03W-NUMERIC-KUMSTRID = AE03M001.KUMSTRID;
      ABWREC.ABWSWR = "Y"; /* turn 'on' switch to reselect*/
    end

    if (ABWREC.ABWSWR == "Y" /* if selection criteria has changed*/
     && XP1REC.XP1MNO == 0)  /* no errors*/
      AE03-1522(); /* edit CUSTOMER code*/
    end

    if (ABWREC.ABWSWR == "Y") /* selection criteria unchanged*/
      set AE03W03 empty;
    end

  end

  converseLib.clearScreen();
  
  if (XP1REC.XP1MNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(XP1REC.XP1MNO);
  end

end // end AE03-1520


// Edit Customer No., Store
Function AE03-1522()
  if (AE03W01.KUCCOID < 1) /* aE03w03 Field eq spaces*/
    return; /* Return to calling process*/
  end

  AE03S13(); /* select set cust edit*/
  AE03S14(); /* fetch next cust edit*/
  AE03S15(); /* close set cust edit*/

end // end AE03-1522


// Process valid input request
Function AE03-1600()
   /* ------------------------------------------------------------*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  AE03W01.AE03WUPD = " "; /* successful delete flag*/

  if (AE03WUPI == "Y" /* DETAIL INFO CHANGED*/
   || AE03W01.AE03W-PF15-MODE == "Y") /* ADD INFO*/

    if (converseVar.eventKey is pf19
     || converseVar.eventKey is pf20)
      XP1REC.XP1MNO = 170;
      if (XP1REC.XP1MNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(XP1REC.XP1MNO);
      end
      return;
    end

    if (converseVar.eventKey is enter /* Update DABUY.VCRSTE01 DB*/
     || converseVar.eventKey is pf15)


      XX0XS01(); /* Get system date/time*/


      ABWREC.ABWIXM = 1; /* Reset loop index*/

      while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Process all line data*/

        if (AE03W02.AE03W-AB-EMB-DISC-ID[ABWIXM] > 0) /* Valid DISC*/

          if (AE03W02.AE03W-STATUS[ABWIXM] == "A") /* Record for insertion*/
            AE03-1610(); /* Create new DB record*/
          else
            if (AE03W02.AE03W-STATUS[ABWIXM] == "U") /* Record for update*/
              AE03-1620(); /* Change STAT ON  existing DB recd*/
            else
              if (AE03W02.AE03W-STATUS[ABWIXM] == "D") /* Record for DELETE*/
                AE03-1630(); /* Delete existing DB record*/
              else /* (Bypass map detail line)*/
              end
            end
          end

        end

        ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

      end


      if (converseVar.validationMsgNum == 0) /* Update successful*/
        ABWREC.ABWPRCSN = "1600"; /* Process number*/
        if (AE03W01.AE03WUPD != "Y") /* Indicate successful delete*/
          XP1REC.XP1MNO = 45; /* Indicate update sucessful*/
        end
      end


    end
  end

  if (converseVar.eventKey is pf15)
    XP1REC.XP1MNO = 0;
    AE03W01.AE03W-PF15-MODE = "Y";
    return; /* Return to previous process*/
  end

  if (XP1REC.XP1MNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(XP1REC.XP1MNO);
  end

end // end AE03-1600


// Insert DABUY.VCRSTE01 row
Function AE03-1610()
   /* ------------------------------------------------------------*/
   /* Move update items to corresponding DB fields.*/
   /* Call IO module to perform actual create DB record process.*/
   /* ------------------------------------------------------------*/


   /* *==================**/
   /* *  Build DB Keys   **/
   /* *==================**/

  set VCRSTE01 empty; /* Reset Wk Storage field*/

   /* *=================================**/
   /* *  Move Update Items into VCRSTE01**/
   /* *=================================**/


  VCRSTE01.AB-EMB-DISC-ID = AE03W02.AE03W-AB-EMB-DISC-ID[ABWIXM];
  VCRSTE01.AB-EMB-DISC-STAT = AE03W02.AE03W-AB-EMB-DISC-STAT[ABWIXM];
  VCRSTE01.KUCCOID = AE03W02.AE03W-CU-CO-ID[ABWIXM];
  VCRSTE01.KUMSTRID = AE03W02.AE03W-CU-STOR-ID[ABWIXM];


  VCRSTE01.XGPCD = "03";
  VCRSTE01.ZZZSDT = XX0XW01.XX0XWDAT; /* CREATION DATE*/
  VCRSTE01.ZZZSTM = XX0XW01.XX0XWTIM; /* CREATION TIME*/
  VCRSTE01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VCRSTE01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VCRSTE01.ZZZCHGCT = 0; /* CHANGE COUNT*/


   /* *==============================**/
   /* *  Insert DABUY.VCRSTE01  Row  **/
   /* *==============================**/

  try
    call "IO6630" ("A ", SQLCA, VCRSTE01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    AE03W01.AE03W-PF15-MODE = "N"; /* RESET ADD FLAG*/

    return; /* Return to calling process*/

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "1610"; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "INSERT SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCRSTE01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AE03M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AE03-1610


// Update DABUY.VCRSTE01 row
Function AE03-1620()
   /* ------------------------------------------------------------*/
   /* Move update items to corresponding DB fields.*/
   /* Call IO module to perform actual update process.*/
   /* ------------------------------------------------------------*/


   /* *==================**/
   /* *  Build DB Keys   **/
   /* *==================**/

  set VCRSTE01 empty; /* Reset Wk Storage field*/



  VCRSTE01.KUCCOID = AE03W02.AE03W-CU-CO-ID[ABWIXM];
  VCRSTE01.KUMSTRID = AE03W02.AE03W-CU-STOR-ID[ABWIXM];
  VCRSTE01.AB-EMB-DISC-ID = AE03W02.AE03W-AB-EMB-DISC-ID[ABWIXM];
  VCRSTE01.AB-EMB-DISC-STAT = AE03W02.AE03W-AB-EMB-DISC-STAT[ABWIXM];
  VCRSTE01.XGPCD = "03";


  VCRSTE01.ZZZSDT = AE03W02.AE03W-ZZ-SDT;
  VCRSTE01.ZZZSTM = AE03W02.AE03W-ZZ-SETUP-HHMM;
  VCRSTE01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VCRSTE01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VCRSTE01.ZZZCHGCT = AE03W02.AE03W-ZZ-CHNG-CNT[ABWIXM]; /* Change cnt*/



   /* *==============================**/
   /* *  Update DABUY.VSAFTY01  Row  **/
   /* *==============================**/

  try
    call "IO6630" ("U ", SQLCA, VCRSTE01) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    AE03W02.AE03W-ZZ-CHNG-CNT[ABWIXM] = AE03W02.AE03W-ZZ-CHNG-CNT[ABWIXM] + 1;

    return; /* Return to calling process*/

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row updated by other user/s*/
      ABWREC.ABWSWR = "Y"; /* Reselect same rows*/
      ABWREC.ABWPRCSN = "1620"; /* Process number*/
      XP1REC.XP1MNO = 13; /* Indicate concurrent update*/
      exit stack; /* Exit to redisplay map*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "1620"; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCRSTE01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AE03M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AE03-1620


// Delete DABUY.VCRSTE01 row
Function AE03-1630()
   /* ------------------------------------------------------------*/
   /* Build the keys for DACAST.VAFSTY01 row to be deleted.*/
   /* Call IO module to perform actual delete process.*/
   /* ------------------------------------------------------------*/


   /* *==================**/
   /* *  Build DB Keys   **/
   /* *==================**/

  set VCRSTE01 empty; /* Reset Wk Storage field*/

  VCRSTE01.KUCCOID = AE03W02.AE03W-CU-CO-ID[ABWIXM];
  VCRSTE01.KUMSTRID = AE03W02.AE03W-CU-STOR-ID[ABWIXM];
  VCRSTE01.XGPCD = "03";
  VCRSTE01.AB-EMB-DISC-ID = AE03W02.AE03W-AB-EMB-DISC-ID[ABWIXM];

   /* *==============================**/
   /* *  Delete DABUY.VCRSTE01  Row  **/
   /* *==============================**/

  try
    call "IO6630" ("D ", SQLCA, VCRSTE01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    AE03W01.AE03WUPD = "Y"; /* successful delete*/

    return; /* Return to calling process*/

  end



   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "1630"; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "DELETE SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCRSTE01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AE03M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AE03-1630


// Select VCRSTE01 - Disc List
Function AE03S01()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set VCRSTE01 empty; /* Reset rec work area*/
  VCRSTE01.AB-EMB-DISC-ID = -1;
  VCRSTE01.XGPCD = "03";

   /* MOVE IN CURRENT DATA  .....*/
  VCRSTE01.KUCCOID = AE03W03.KUCCOID[AE03W-CUST-IDX]; /* CRR cust*/
  VCRSTE01.KUMSTRID = AE03W03.KUMSTRID[AE03W-CUST-IDX]; /* /CRR STORE*/


   /* *===================================**/
   /* *  Select Set from DABUY.Vcrste01   **/
   /* *===================================**/

  try
    call "IO6630" ("S1", SQLCA, VCRSTE01) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S01 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCRSTE01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AE03M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AE03S01


// Fetch VCRSTE01 - Disc List
Function AE03S02()
   /* ------------------------------------------------------------*/
                /* *** Process DABUY.Vcrste01 ****/
   /* Select the target row on a 'select next' call and store*/
     /* data into program-defined area. If first row retrieved,*/
     /* obtain and format size descriptions.*/
   /* ------------------------------------------------------------*/



  try
    call "IO6630" ("N1", SQLCA, VCRSTE01) {isNoRefresh = yes, isExternal = yes};
  end



   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/


    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/

      AE03S04(); /* Store disc data*/

      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

      return; /* Return to calling process*/

    end


    if (SQLCA.VAGen_SQLCODE == 100) /* No (more) data found*/
      ABWREC.ABWSWC = "Y"; /* Indicate end of data*/
      return; /* Return to calling process*/

    end


  end




   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S02 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DABUY.VSAFTY01  ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCRSTE01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AE03M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AE03S02


// Store Disc List data
Function AE03S04()
   /* ------------------------------------------------------------*/
   /* Store DABUY.Vcrste01 data into program save area for*/
     /* display and possible update or delete.*/
   /* ------------------------------------------------------------*/


  AE03W02.AE03W-CU-CO-ID[ABWIXM] = VCRSTE01.KUCCOID; /* cust*/
  AE03W02.AE03W-CU-STOR-ID[ABWIXM] = VCRSTE01.KUMSTRID; /* store*/
  AE03W02.AE03W-AB-EMB-DISC-ID[ABWIXM] = VCRSTE01.AB-EMB-DISC-ID;
  AE03W02.AE03W-AB-EMB-DISC-STAT[ABWIXM] = VCRSTE01.AB-EMB-DISC-STAT;
  AE03W02.AE03W-ZZ-CHNG-CNT[ABWIXM] = VCRSTE01.ZZZCHGCT;
  AE03W02.AE03W-STATUS[ABWIXM] = " "; /* Indicate from Vcrste01 db*/
  AE03W02.AE03W-ZZ-SDT = VCRSTE01.ZZZSDT;
  AE03W02.AE03W-ZZ-SETUP-HHMM = VCRSTE01.ZZZSTM;


end // end AE03S04


// Close VCRSTE01 - Disc List
Function AE03S06()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO6630" ("C1", SQLCA, VCRSTE01) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  ABWREC.ABWPRCSN = "S06 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCRSTE01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AE03M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/



end // end AE03S06


// Select VCRSTE01 - Add Disc
Function AE03S07()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set VCRSTE01 empty; /* Reset rec work area*/

  VCRSTE01.KUCCOID = -1;
  VCRSTE01.KUMSTRID = -1;
  VCRSTE01.AB-EMB-DISC-ID = -1;


  if (AE03W03.AE03W-CUST-CNT > 0)
    VCRSTE01.KUCCOID = AE03W03.KUCCOID[AE03W-CUST-IDX];
    VCRSTE01.KUMSTRID = AE03W03.KUMSTRID[AE03W-CUST-IDX];
  else
    VCRSTE01.KUCCOID = AE03W01.KUCCOID;
    VCRSTE01.KUMSTRID = AE03W01.AE03W-NUMERIC-KUMSTRID;
  end

  VCRSTE01.XGPCD = "03"; /* gpc code*/

   /* *===================================**/
   /* *  Select Set from DABUY.Vcrste01   **/
   /* *===================================**/

  try
    call "IO6630" ("S1", SQLCA, VCRSTE01) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S07 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCRSTE01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AE03M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AE03S07


// Fetch VCRSTE01 - Add Disc
Function AE03S08()
   /* ------------------------------------------------------------*/
                /* *** Process DABUY.Vcrste01 ****/
   /* Select the target row on a 'select next' call and store*/
     /* data into program-defined area. If first row retrieved,*/
     /* obtain and format size descriptions.*/
   /* ------------------------------------------------------------*/



  try
    call "IO6630" ("N1", SQLCA, VCRSTE01) {isNoRefresh = yes, isExternal = yes};
  end



   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/


    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/

      AE03S09(); /* Store disc data*/

      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

      return; /* Return to calling process*/

    end


    if (SQLCA.VAGen_SQLCODE == 100) /* No (more) data found*/
      ABWREC.ABWSWC = "Y"; /* Indicate end of data*/
      return; /* Return to calling process*/

    end


  end




   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S09 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DABUY.VSAFTY01  ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCRSTE01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AE03M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AE03S08


// Store Add Disc data
Function AE03S09()
   /* ------------------------------------------------------------*/
   /* Store DABUY.Vcrste01 data into program save area for*/
     /* display and possible update or delete.*/
   /* ------------------------------------------------------------*/


  AE03W02.AE03W-CU-CO-ID[ABWIXM] = VCRSTE01.KUCCOID; /* cust*/
  AE03W02.AE03W-CU-STOR-ID[ABWIXM] = VCRSTE01.KUMSTRID; /* store*/
  AE03W02.AE03W-AB-EMB-DISC-ID[ABWIXM] = VCRSTE01.AB-EMB-DISC-ID;
  AE03W02.AE03W-AB-EMB-DISC-STAT[ABWIXM] = VCRSTE01.AB-EMB-DISC-STAT;
  AE03W02.AE03W-ZZ-CHNG-CNT[ABWIXM] = VCRSTE01.ZZZCHGCT;
  AE03W02.AE03W-STATUS[ABWIXM] = " "; /* Indicate from Vcrste01 db*/
  AE03W02.AE03W-ZZ-SDT = VCRSTE01.ZZZSDT;
  AE03W02.AE03W-ZZ-SETUP-HHMM = VCRSTE01.ZZZSTM;


end // end AE03S09


// Close VCRSTE01 - Add Disc
Function AE03S10()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO6630" ("C1", SQLCA, VCRSTE01) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  ABWREC.ABWPRCSN = "S10 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCRSTE01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AE03M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/



end // end AE03S10


// Select VPRDCU01 - Cust edit
Function AE03S13()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set PC2REC empty; /* Reset rec work area*/

  PC2REC.XNXCD = -1; /* dept.*/
  PC2REC.XGPCD = XP1REC.XGPCD; /* gpc cd*/
  PC2REC.KUCCOID = AE03W01.KUCCOID; /* cust.*/
  PC2REC.KUMSTRID = AE03W01.AE03W-NUMERIC-KUMSTRID; /* store*/


   /* *===================================**/
   /* *  Select Set from Dprodc.vprdcu01  **/
   /* *===================================**/

  try
    call "IO3340" ("S3", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return;
  end

  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S13 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AE03M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AE03S13


// Fetch Vprdcu01 - Cust edit
Function AE03S14()
   /* ------------------------------------------------------------*/
                /* *** Process dprodc.vprdcu01****/
   /* Select the target row on a 'select next' call and store*/
     /* data into program-defined area. If first row retrieved,*/
     /* obtain and format size descriptions.*/
   /* ------------------------------------------------------------*/



  try
    call "IO3340" ("N3", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end



   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/


    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/

      return; /* return to calling process*/
    end
    if (SQLCA.VAGen_SQLCODE == 100)
      AE03M001.AE03M-CURR-CU-CO-ID = " ";
      AE03M001.AE03M-CURR-CU-STOR-ID = " ";
      AE03W01.KUCCOID = 0;
      set AE03M001.KUCCOID cursor, bold; /* highligh field*/
      XP1REC.XP1MNO = 158; /* indicate error message*/
      ABWREC.ABWPRCSN = "S14";
      return; /* return to calling process*/
    end

  end




   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S14 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODC.VPRDCU01 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AE03M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AE03S14


// Close vprdcu01 - Cust edit
Function AE03S15()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO3340" ("C3", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  ABWREC.ABWPRCSN = "S15 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AE03M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/



end // end AE03S15


// Validate map detail data
Function AE03S19()
   /* ------------------------------------------------------------*/
    /* Evaluate map detail data to determine the kind of data*/
     /* base update action necessary for each line. If valid*/
     /* update found, then assign update code. Otherwise, ignore*/
     /* map detail line.*/
   /* ------------------------------------------------------------*/


  AE03W01.AE03WUPI = " "; /* reset update indicator*/
  ABWREC.ABWIXM = 1; /* Initialize line index*/

  while (ABWREC.ABWIXM <= ABWREC.ABWMPMAX) /* Until end of lines*/

    if (AE03W02.AE03W-AB-EMB-DISC-ID[ABWIXM] > 0) /* Valid line*/

      AE03W01.AE03WCIN = " "; /* RESET CHANGE INDICATOR*/
      if (AE03M001.AE03M-DELETE[ABWIXM] == AE03W02.AE03W-DELETE[ABWIXM]
       && AE03M001.AE03M-AB-EMB-DISC-STAT[ABWIXM] == 
      AE03W02.AE03W-AB-EMB-DISC-STAT[ABWIXM])
      else
        if (AE03M001.AE03M-DELETE[ABWIXM] == " "
         || AE03M001.AE03M-DELETE[ABWIXM] == "D")
          AE03W01.AE03WCIN = "Y";
        else
          XP1REC.XP1MNO = 162;
          AE03M001.AE03M-DELETE[ABWIXM] = " ";
          set AE03M001.AE03M-DELETE[ABWIXM] cursor, bold;
          ABWREC.ABWPRCSN = "S19";
          return;
        end
        if (AE03M001.AE03M-AB-EMB-DISC-STAT[ABWIXM] == "A"
         || AE03M001.AE03M-AB-EMB-DISC-STAT[ABWIXM] == "I")
          AE03W01.AE03WCIN = "Y";
        else
          XP1REC.XP1MNO = 163;
          AE03M001.AE03M-AB-EMB-DISC-STAT[ABWIXM] = " ";
          ABWREC.ABWPRCSN = "S19";
          set AE03M001.AE03M-AB-EMB-DISC-STAT[ABWIXM] cursor, bold;
          return;
        end
      end

      if (AE03W01.AE03WCIN == "Y") /* CHANGES WERE ENTERED*/
                                    /* MOVE MAP DATA TO SAVE ARRAYS*/
        if (converseVar.eventKey is pf19
         || converseVar.eventKey is pf20)
          XP1REC.XP1MNO = 170;
          return;
        else
          if (AE03M001.KUCCOID != AE03W01.KUCCOID
           || AE03M001.KUMSTRID != AE03W01.AE03W-NUMERIC-KUMSTRID)
            XP1REC.XP1MNO = 171;
            AE03M001.KUCCOID = AE03W01.KUCCOID;
            AE03M001.KUMSTRID = AE03W01.AE03W-NUMERIC-KUMSTRID;
            return;
          else
            AE03W01.AE03WUPI = "Y";
            AE03W02.AE03W-AB-EMB-DISC-STAT[ABWIXM] = AE03M001.AE03M-AB-EMB-DISC-STAT[ABWIXM];
            AE03W02.AE03W-DELETE[ABWIXM] = AE03M001.AE03M-DELETE[ABWIXM];

            if (AE03W02.AE03W-DELETE[ABWIXM] == "D") /* DATA*/
              AE03W02.AE03W-STATUS[ABWIXM] = "D"; /* TAG FOR DELETE*/
            else
              AE03W02.AE03W-STATUS[ABWIXM] = "U"; /* tag for change*/

            end
          end
        end


      end /* (Ignore line data; no updating*/
    end


    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/


  end



end // end AE03S19


// Select VCRSTE01 - Cust List
Function AE03S20()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set VCRSTE01 empty; /* Reset rec work area*/

  VCRSTE01.KUCCOID = AE03W01.KUCCOID;
  VCRSTE01.KUMSTRID = AE03W01.AE03W-NUMERIC-KUMSTRID;


   /* *===================================**/
   /* *  Select Set from DABUY.Vcrste01   **/
   /* *===================================**/

  try
    call "IO6630" ("S2", SQLCA, VCRSTE01) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S20 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCRSTE01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AE03M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AE03S20


// Fetch VCRSTE01 - Cust List
Function AE03S21()
   /* ------------------------------------------------------------*/
                /* *** Process DABUY.Vcrste01 ****/
   /* Select the target row on a 'select next' call and store*/
     /* data into program-defined area. If first row retrieved,*/
     /* obtain and format size descriptions.*/
   /* ------------------------------------------------------------*/



  try
    call "IO6630" ("N2", SQLCA, VCRSTE01) {isNoRefresh = yes, isExternal = yes};
  end



   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/


    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/

      if (AE03W03.AE03W-CUST-CNT > 0)
        if (VCRSTE01.KUCCOID != AE03W03.KUCCOID[AE03W-CUST-CNT]
         || VCRSTE01.KUMSTRID != 
        AE03W03.KUMSTRID[AE03W-CUST-CNT])
           /* new combination..*/
          AE03W03.AE03W-CUST-CNT = AE03W03.AE03W-CUST-CNT + 1;

          AE03W03.KUCCOID[AE03W-CUST-CNT] = VCRSTE01.KUCCOID;
          AE03W03.KUMSTRID[AE03W-CUST-CNT] = VCRSTE01.KUMSTRID;

        end
      else
        AE03W03.AE03W-CUST-CNT = AE03W03.AE03W-CUST-CNT + 1;

        AE03W03.KUCCOID[AE03W-CUST-CNT] = VCRSTE01.KUCCOID;
        AE03W03.KUMSTRID[AE03W-CUST-CNT] = VCRSTE01.KUMSTRID;
      end

      return; /* Return to calling process*/

    end


    if (SQLCA.VAGen_SQLCODE == 100) /* No (more) data found*/

      ABWREC.ABWSWC = "Y"; /* Indicate end of data*/
      return; /* Return to calling process*/

    end


  end




   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "S21 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DABUY.VCRSTE01  ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCRSTE01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AE03M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AE03S21


// Close VCRSTE01 - Cust List
Function AE03S22()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO6630" ("C2", SQLCA, VCRSTE01) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  ABWREC.ABWPRCSN = "S22 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCRSTE01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AE03M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/



end // end AE03S22


//*** RECORD=AE03W01 ****
// ********************************
// Application Working Storage (1).
// ********************************
// ***********************
Record AE03W01 type basicRecord
  10 AE03WCIN AE03WCIN ; 
  10 AE03WUPD AE03WUPD ; 
  10 AE03W-PF15-MODE AE03W-PF15-MODE ; 
  10 AE03WUPI AE03WUPI ; 
  10 KUCCOID KUCCOID ; 
  10 AE03W-ALPHA-KUMSTRID AE03W-ALPHA-KUMSTRID ; 
    15 AE03W-NUMERIC-KUMSTRID AE03W-NUMERIC-KUMSTRID ; 
  10 AE03W-HOLD-DISC AE03W-HOLD-DISC ; 
end // end AE03W01


//*** RECORD=AE03W02 ****
// *****************************************************
// Application Working Storage (2): Map Detail Save Area
// *****************************************************
// ***********************
Record AE03W02 type basicRecord
  10 AE03WLEN AE03WLEN ; 
  10 AE03W-DELETE AE03W-DELETE [10] ; 
  10 AE03W-CU-CO-ID AE03W-CU-CO-ID [10] ; 
  10 AE03W-CU-STOR-ID AE03W-CU-STOR-ID [10] ; 
    15 AE03W-CU-STOR-ID-CHA AE03W-CU-STOR-ID-CHA ; 
  10 AE03W-AB-EMB-DISC-ID AE03W-AB-EMB-DISC-ID [10] ; 
  10 AE03W-AB-EMB-DISC-STAT AE03W-AB-EMB-DISC-STAT [10] ; 
  10 AE03W-ZZ-CHNG-CNT AE03W-ZZ-CHNG-CNT [10] ; 
  10 AE03W-ZZ-SDT AE03W-ZZ-SDT [10] ; 
  10 AE03W-ZZ-SETUP-HHMM AE03W-ZZ-SETUP-HHMM [10] ; 
  10 AE03W-STATUS AE03W-STATUS [10] ; 
end // end AE03W02


//*** RECORD=AE03W03 ****
// *****************************************************
// Application Working Storage (2): Map Detail Save Area
// *****************************************************
// ***********************
Record AE03W03 type basicRecord
  10 AE03W-CUST-CNT AE03W-CUST-CNT ; 
  10 AE03W-CUST-IDX AE03W-CUST-IDX ; 
  10 KUCCOID KUCCOID [4000] ; 
  10 KUMSTRID KUMSTRID [4000] ; 
end // end AE03W03


// Qty 3
DataItem AE03W-AB-EMB-DISC-ID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Qty 4
DataItem AE03W-AB-EMB-DISC-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem AE03W-ALPHA-KUMSTRID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Qty 1
DataItem AE03W-CU-CO-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Qty 2
DataItem AE03W-CU-STOR-ID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


DataItem AE03W-CU-STOR-ID-CHA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// style counter
DataItem AE03W-CUST-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// STYLE INDEX
DataItem AE03W-CUST-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Color cd
DataItem AE03W-DELETE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem AE03W-HOLD-DISC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


DataItem AE03W-NUMERIC-KUMSTRID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// PF13 MODE INDICATOR
DataItem AE03W-PF15-MODE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem AE03W-STATUS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem AE03W-ZZ-CHNG-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


DataItem AE03W-ZZ-SDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


DataItem AE03W-ZZ-SETUP-HHMM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Map Qty change indicator
DataItem AE03WCIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Temporary storage length
DataItem AE03WLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Update successful flag
DataItem AE03WUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Valid update indicator
DataItem AE03WUPI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


