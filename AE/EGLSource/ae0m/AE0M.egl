package ae0m;

import ab.common.*;
import corpcom2.XP1REC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPAB001;
import corpcom3.XSABS01;
import corpcom4.XSEXIT;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXX-JOB-ID;
import corpcom7.ZZ-SETUP-HHMM;
import corpx1.XCTTBL;
import corpx1.XSETBL;
import corpz3.ZZ-CHNG-CNT;
import corpz3.ZZ-CHNG-DT;
import corpz3.ZZ-CHNG-HHMM;
import corpz3.ZZ-SDT;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import pc.common.PC2REC;
import pg.common.PG1REC;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=AE0M ****
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 07/11/97   aabra1   New application.
// Y2KFIX   12/12/97  KSUMME  Y2K MODIFICATIONS MADE TO:
//                            (global chg due to table chg:
//                             XP1REC, AB3REC, XPAB020)
// *********************
Program AE0M type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AB3REC AB3REC; // record
  ABWREC ABWREC; // record
  AE0MW00 AE0MW00; // record
  AE0MW01 AE0MW01; // record
  AE0MW02 AE0MW02; // record
  AE0MW03 AE0MW03; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC2REC PC2REC; // record
  PG1REC PG1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VSEOJN01 VSEOJN01; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XSETBL; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use AE0MM.AE0MM001, // form
  		AE0MM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAB001: XPAB001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Apparel Buy Prototype process.*/
     /* ------------------------------------------------------------*/
    ;
    ;
    set ABWREC empty; /* Initialize working storage*/
    set AE0MW00 empty; /* Initialize working storage*/
    set AE0MW01 empty; /* Initialize working storage*/
    set AE0MW02 empty; /* Initialize working storage*/
    set AB3REC empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TA5REC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    set AE0MM001 initial; /* Initialize map output area*/
    ABWREC.ABWAPPL = "AE0M"; /* Initialize appl ID for this appl*/
    ABWREC.ABWPRCSN = "0000"; /* Initialize process number to zero*/
    ;
    ABWREC.ABWMAP = "1"; /* Indicate map to be displayed*/
    ABWREC.ABWSWR = "Y"; /* Indicate request for data*/
    AE0MW00.AE0MWSZM = sysVar.arrayIndex; /* calculate the size of the map*/
    AE0MW00.AE0MWSZA = sysVar.arrayIndex; /* calculate array size for tsq rec*/
    ABWREC.ABWTSL = 0552; /* calculate size of tsq*/
    ;
    ABWREC.ABWIXM = 1; /* Initialize line index*/
    ;
    goto AE0M001; /* Converse Apparel Buy Prototype*/
    ;
    ;
    AE0M001: AE0M001();
     /* ------------------------------------------------------------*/
     /* Flow to the beggining of the process.*/
     /* ------------------------------------------------------------*/
    ;
    goto AE0M001; /* returns back to the beginning*/
    ;
    ;
  end // end main
end // end AE0M

// Choose which map to display
Function AE0M001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) If specified, display the first map.*/
      /* Otherwise, if specified, display the second map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ABWREC.ABWPRCSN = "M001"; /* Indicate map # 1*/
  ABWREC.XXXMAPNM = ABWREC.ABWERLOC; /* Move map name to afwrec*/
  ABWREC.ABWPRCSN = "0000"; /* Re-Initialize process name*/
  ;
  AE0M100(); /* Display map 1*/
  ;
  ;
  ;
end // end AE0M001

// Driver process for 100 map
Function AE0M100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  AE0M110(); /* Obtain the data to display*/
  ;
  AE0M120(); /* Format and display the map*/
  ;
  AE0M130(); /* Check attention identifier*/
  ;
  ;
end // end AE0M100

// Obtain the data to display
Function AE0M110()
   /* ------------------------------------------------------------*/
   /* If data was not requested, return to the previous process.*/
   /* Purge any existing queue in temporary storage.*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At end of rows, add any partial page to the queue.*/
   /* At end of rows, close the selected set cursor.*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/
  ;
  ABWREC.ABWIXM = 0; /* Initialize display line number*/
  ;
  AE0M117(); /* Select set and open the cursor*/
  ;
  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    ;
    ABWREC.ABWSWC = "N"; /* Initialize end of file switch*/
    AE0MW-TBL-IDX = 0; /* initialize map storage line index*/
    ;
    while (ABWREC.ABWSWC == "N") /* Until cursor end of file*/
      ;
      AE0M118(); /* Obtain data and format page*/
      ;
      if (converseVar.validationMsgNum != 0) /* Errors were found*/
        ABWREC.ABWSWC = "Y"; /* Force end of file*/
      end
      ;
    end
    ;
  end
  ;
  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    AE0M119(); /* Close the selected set cursor*/
  end
  ;
  ;
end // end AE0M110

// Select all records
Function AE0M117()
   /* ------------------------------------------------------------*/
   /* Select all table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "VSEOJN01" ("SS", SQLCA, VSEOJN01) {isNoRefresh = yes, isExternal = yes};
  end /* SELECT TBL SET*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      ;
    end
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    ABWREC.ABWPRCSN = "117 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "TSEOJN01"; /* Table view name*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
    AE0MM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
end // end AE0M117

// fetch next table entry
Function AE0M118()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VSEOJN01" ("SN", SQLCA, VSEOJN01) {isNoRefresh = yes, isExternal = yes};
  end /* Ftch next row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    ;
    ABWREC.ABWSWC = "Y"; /* Indicate end of file*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      ;
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      ;
    end
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    ABWREC.ABWPRCSN = "118 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSEOJN01"; /* Table view name*/
    ;
    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag. routine*/
    ;
    AE0MM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    ;
    return; /* Return to previous process*/
    ;
  end
  /*  */
  AE0MW-TBL-IDX = AE0MW-TBL-IDX + 1; /* Increment line index*/
   /* Save data to display*/
  AE0MW01.AE0MW-TBL-JOB-NM[AE0MW-TBL-IDX] = VSEOJN01.XXX-JOB-ID;
  AE0MW01.AE0MW-TBL-JOB-CM[AE0MW-TBL-IDX] = VSEOJN01.AB-EOJ-STAT-DESC;
  AE0MW01.AE0MW-TBL-JOB-DT[AE0MW-TBL-IDX] = VSEOJN01.ZZZCHGDT;
  AE0MW01.AE0MW-TBL-JOB-TM[AE0MW-TBL-IDX] = VSEOJN01.ZZZCHGTM;
  ;
  ;
end // end AE0M118

// Close generic cursor
Function AE0M119()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "VSEOJN01" ("CS", SQLCA, VSEOJN01) {isNoRefresh = yes, isExternal = yes};
  end /* Close tbl set*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ABWREC.ABWPRCSN = "119 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "TSEOJN00"; /* Table view name*/
    ;
    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag. routine*/
    ;
    AE0MM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
end // end AE0M119

// Format and display the map
Function AE0M120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set AE0MM001 alarm; /* Indicate sound alarm*/
  end
  ;
  AE0MM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  if (converseVar.validationMsgNum == 0 /* No error message to display*/
  )                                    
    ABWREC.ABWIXM = 1; /* Initialize line index*/
    AE0MW00.AE0MWSZM = AE0MW-TBL-IDX;
    ;
    AE0M121(); /* Format the data on the page*/
    ;
    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      if (ABWREC.ABWNMO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(ABWREC.ABWNMO);
      end /* Information message number*/
    end
    ;
  end
  ;
  ABWREC.ABWNMO = 0; /* Reset information message number*/
  ;
  converse AE0MM001 ;
  ;
  ;
end // end AE0M120

// Format the selected data
Function AE0M121()
   /* ------------------------------------------------------------*/
   /* Format the plan sequence data in the map.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ABWREC.ABWIXM = 1; /* Initialize line index*/
  ;
  while (ABWREC.ABWIXM <= AE0MW00.AE0MWSZM) /* Until end of lines*/
    ;
    AE0MM001.AE0MM-JOB-NM[ABWIXM] = AE0MW01.AE0MW-TBL-JOB-NM[ABWIXM];
    AE0MM001.AE0MM-JOB-CM[ABWIXM] = AE0MW01.AE0MW-TBL-JOB-CM[ABWIXM];
    AE0MW00.AE0MW-WORK-DATE-1 = AE0MW01.AE0MW-TBL-JOB-DT[ABWIXM];
    AE0MW00.AE0MW-WD2-YY = AE0MW00.AE0MW-WD1-YY; /* REFORMAT DATE*/
    AE0MW00.AE0MW-WD2-MM = AE0MW00.AE0MW-WD1-MM;
    AE0MW00.AE0MW-WD2-DD = AE0MW00.AE0MW-WD1-DD;
    AE0MW00.AE0MW-WD2-SLASH1 = "/";
    AE0MW00.AE0MW-WD2-SLASH2 = "/";
    if (AE0MW00.AE0MW-WD2-YY > 60)
      AE0MW00.AE0MW-WD2-CC = 19;
    else
      AE0MW00.AE0MW-WD2-CC = 20;
    end
    ;
    AE0MM001.AE0MM-JOB-DT[ABWIXM] = AE0MW00.AE0MW-WORK-DATE-2;
    AE0MW00.AE0MW-CHG-TIME-2 = AE0MW01.AE0MW-TBL-JOB-TM[ABWIXM];
    ;
    AE0MW00.AE0MW-CT1-HH = AE0MW00.AE0MW-CT2-HH; /* REFORMAT TIME*/
    AE0MW00.AE0MW-CT1-MM = AE0MW00.AE0MW-CT2-MM;
    AE0MW00.AE0MW-CT1-SS = 0;
    AE0MW00.AE0MW-CT1-FIL1 = ":";
    AE0MW00.AE0MW-CT1-FIL2 = ":";
    AE0MM001.AE0MM-JOB-TM[ABWIXM] = AE0MW00.AE0MW-CHG-TIME-1;
    ;
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/
    ;
  end
  ;
  ;
end // end AE0M121

// Check attention identifier
Function AE0M130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  ABWREC.ABWPRCSN = "130 "; /* Process number*/
  AE0MM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  ;
   /* **--------------------------------------***/
   /* **-- fast path was pressed --***/
   /* **--------------------------------------***/
  ;
  if (AE0MM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      COMMAREA.CATOAP = AE0MM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AE0MM001.CAITEM; /* Application data*/
      ;
      XSABS01(); /* Exit to another application*/
      ;
    end
  end
  ;
   /* **--------------------------------------***/
   /* **-- return back --***/
   /* **--------------------------------------***/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AE0MM001"; /* Appl find code*/
    end
    ;
    XSABS04(); /* Exit to another application*/
    ;
  end
  ;
   /* **--------------------------------------***/
   /* **-- all others keys  --***/
   /* **--------------------------------------***/
  ;
  set AE0MM001 initial; /* Clear the map fields*/
  exit stack; /* Exit to redisplay map*/
end // end AE0M130

// Exit to another application
Function XSABS04()
   /* ------------------------------------------------------------*/
   /* Set the application to be invoked for PF1 or PF4.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1) /* PF1 was pressed*/
    ;
    COMMAREA.CATOAP = "GD00"; /* Indicate Goal Documentation*/
    ;
  else
    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      ;
      COMMAREA.CATOAP = "MN0M"; /* Indicate Master Menu*/
      ;
    else
      ;
      /* ------------------------------------------------------------*/
       /* Set the application to be invoked for PF3 if in main menu.*/
      /* ------------------------------------------------------------*/
      ;
      if (converseVar.eventKey is pf3) /* PF3 was pressed*/
        if (COMMAREA.CACURRAP == "AE0M") /* and nil application menu*/
          COMMAREA.CATOAP = "AB0A"; /* Indicate Master Menu*/
        else
          COMMAREA.CATOAP = "AE0M";
        end
      end
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Save the application user area in the COMMAREA.*/
   /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CATOSYS == "AB" /* Transfer within same system*/
   || COMMAREA.CATOSYS == "AE") /* Transfer within same system*/
    ;
    COMMAREA.CAUSERA = " ";
    COMMAREA.CAUSERA = XP1REC.XP1GROUP;
  else
    COMMAREA.CAUSERA = " "; /* Clear user area*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Transfer control to the specified application.*/
   /* ------------------------------------------------------------*/
  ;
  if (XP1REC.XP1MNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(XP1REC.XP1MNO);
  end /* Move ERROR MESSAGE NBR to EZEMNO*/
  ;
  COMMAREA.CAFROMAP = COMMAREA.CACURRAP; /* From application*/
  XSEXIT(); /* Exit to another application*/
  ;
   /* ------------------------------------------------------------*/
   /* If transfer failed, return an error to the calling process.*/
   /* ------------------------------------------------------------*/
  ;
  COMMAREA.CAITEM = " "; /* Clear any application data*/
  ;
  if (COMMAREA.CASECRC == 3 /* Application not found*/
   || COMMAREA.CASECRC == 4) /* or transfer not allowed*/
    ;
    converseLib.validationFailed(6); /* Indicate not allowed*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
  end
  ;
  ;
end // end XSABS04

//*** RECORD=AE0MW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record AE0MW00 type basicRecord
  10 AE0MWACT AE0MWACT ; 
  10 AE0MWBEG AE0MWBEG ; 
  10 AE0MWMAX AE0MWMAX ; 
  10 AE0MWMNO AE0MWMNO ; 
  10 AE0MMNOU AE0MMNOU ; 
  10 AE0MWOPT AE0MWOPT ; 
  10 AE0MWOPT2 AE0MWOPT2 ; 
  10 AE0MWNXT AE0MWNXT ; 
  10 AE0MWSZA AE0MWSZA ; 
  10 AE0MWSZM AE0MWSZM ; 
  10 AE0MW-INVALID-PFKEY AE0MW-INVALID-PFKEY ; 
  10 AE0MW-IDX AE0MW-IDX ; 
  10 AE0MW-MAP-IDX AE0MW-MAP-IDX ; 
  10 AE0MW-TBL-IDX AE0MW-TBL-IDX ; 
  10 AE0MW-MAP-INDEX AE0MW-MAP-INDEX ; 
  10 AE0MW-START AE0MW-START ; 
  10 AE0MWSMG AE0MWSMG ; 
  10 AE0MW-TABLE-GRP char(686) ; 
    15 AE0MW-TBL-JOB-NM char(8) [14] ; 
    15 AE0MW-TBL-JOB-DT char(8) [14] ; 
    15 AE0MW-TBL-JOB-TM char(8) [14] ; 
    15 AE0MW-TBL-JOB-CM char(25) [14] ; 
  10 AE0MW-WORK-DATE-1 AE0MW-WORK-DATE-1 ; 
    15 AE0MW-WD1-YY AE0MW-WD1-YY ; 
    15 AE0MW-WD1-MM AE0MW-WD1-MM ; 
    15 AE0MW-WD1-DD AE0MW-WD1-DD ; 
  10 AE0MW-WORK-DATE-2 AE0MW-WORK-DATE-2 ; 
    15 AE0MW-WD2-MM AE0MW-WD2-MM ; 
    15 AE0MW-WD2-SLASH1 AE0MW-WD2-SLASH1 ; 
    15 AE0MW-WD2-DD AE0MW-WD2-DD ; 
    15 AE0MW-WD2-SLASH2 AE0MW-WD2-SLASH2 ; 
    15 AE0MW-WD2-CC AE0MW-WD2-CC ; 
    15 AE0MW-WD2-YY AE0MW-WD2-YY ; 
  10 AE0MW-WORK-DATE-3 AE0MW-WORK-DATE-3 ; 
  10 AE0MW-WORK-DATE-4 AE0MW-WORK-DATE-4 ; 
  10 AE0MW-CHG-TIME-1 AE0MW-CHG-TIME-1 ; 
    15 AE0MW-CT1-HH AE0MW-CT1-HH ; 
    15 AE0MW-CT1-FIL1 AE0MW-CT1-FIL1 ; 
    15 AE0MW-CT1-MM AE0MW-CT1-MM ; 
    15 AE0MW-CT1-FIL2 AE0MW-CT1-FIL2 ; 
    15 AE0MW-CT1-SS AE0MW-CT1-SS ; 
  10 AE0MW-CHG-TIME-2 AE0MW-CHG-TIME-2 ; 
    15 AE0MW-CT2-HH AE0MW-CT2-HH ; 
    15 AE0MW-CT2-MM AE0MW-CT2-MM ; 
  10 AE0MW-PREV-PAGE-KEY char(8) ; // pg1sc4cd
  10 AE0MW-NEXT-PAGE-KEY char(8) ; // pg1sc4cd
end // end AE0MW00

//*** RECORD=AE0MW01 ****
// Temporary storage record for AE0A - Scheduler/Country table
// ***********************
Record AE0MW01 type basicRecord
  5 * char(618) ; 
    10 AE0MWIDX AE0MWIDX ; 
    10 * char(44) [14] ; 
      15 AE0MW-TBL-JOB-NM char(8) ; // PG_SCHED_SPCLT_CD
      15 AE0MW-TBL-JOB-CM char(30) ; // PC_PRDCU_ID
      15 AE0MW-TBL-JOB-DT int ; // ZZ_SDT
      15 AE0MW-TBL-JOB-TM smallint ; // ZZ_CHNG_CNT
end // end AE0MW01

//*** RECORD=AE0MW02 ****
// Temporary storage record for AE0A - Scheduler/Country table
// ***********************
Record AE0MW02 type basicRecord
  5 * char(734) ; 
    10 AE0MWLEN AE0MWLEN ; 
    10 AE0MWIDX AE0MWIDX ; 
    10 * char(52) [14] ; 
      15 AE0MW-TBL2-KEY char(8) ; 
        20 AE0MW-TBL2-XXX-JOB-ID char(8) ; // PG_SCHED_SPCLT_CD
      15 AE0MW-TBL2-XXX-EOJ-STAT-DESC char(30) ; // PC_PRDCU_ID
      15 AE0MW-TBL2-ZZ-SDT int ; // ZZ_SDT
      15 AE0MW-TBL2-ZZ-SETUP-HHMM smallint ; // ZZ_CHNG_CNT
      15 AE0MW-TBL2-ZZ-CHNG-DT int ; // ZZ_CHNG_CNT
      15 AE0MW-TBL2-ZZ-CHNG-HHMM smallint ; // ZZ_CHNG_CNT
      15 ZZ-CHNG-CNT smallint ; // ZZ_CHNG_CNT
end // end AE0MW02

//*** RECORD=AE0MW03 ****
// Table layout for vscasn01 - Scheduler/Country table
// ***********************
Record AE0MW03 type basicRecord
  5 * char(47) ; 
    10 XXX-JOB-ID XXX-JOB-ID ; 
    10 XXX-EOJ-STAT-DESC XXX-EOJ-STAT-DESC ; 
    10 ZZ-SDT ZZ-SDT ; 
    10 ZZ-SETUP-HHMM ZZ-SETUP-HHMM ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    10 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    10 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end AE0MW03

//*** RECORD=VSEOJN01 ****
// *************  CUSTOMER CROSS REFERENCE   ******************
// 
// DB2 TABLE:           DPRODC.VPRDCU01
// 
// COPYLIB MEMBER:      DCL00580
// 
// I/O MOD:             IO3340
// 
// KEY TO DB2 TABLE:    XGP_GPC_CD        XGP_GPC_CD
//                      PC_PRDCU_ID       CU_CO_ID
//                                        CU_STOR_ID
//                                        XNX_DEPT_ID_XREF
// DATE CREATED:        03/24/89
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  --------   ---------------------------------------
// 03/24/89  RGILLI     INITIAL RECORD CREATION
// 02/15/90  JWOOD      RENAMED XSDCD TO PC2INSEG AS PER MCHRIS
// 11/01/93  GAMEN      Added PC-PRDCU-APAO-FL.
// 
// ************************************************************
// ************************
Record VSEOJN01 type basicRecord
  5 VSEOJN01-REC VSEOJN01-REC ; 
    10 XXX-JOB-ID XXX-JOB-ID ; 
    10 AB-EOJ-STAT-DESC AB-EOJ-STAT-DESC ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSDTTM ZZZSDTTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VSEOJN01

// PC_PRDCU_ID
DataItem AB-EOJ-STAT-DESC char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// no changes made
DataItem AE0MMNOU num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0MW-CHG-TIME-1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AE0MW-CHG-TIME-2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0MW-CT1-FIL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AE0MW-CT1-FIL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AE0MW-CT1-HH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0MW-CT1-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0MW-CT1-SS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0MW-CT2-HH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0MW-CT2-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// af0n map array size
DataItem AE0MW-IDX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// af0n map array size
DataItem AE0MW-INVALID-PFKEY char(1)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// af0n map array size
DataItem AE0MW-MAP-IDX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// af0n map array size
DataItem AE0MW-MAP-INDEX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// first time thru indicator
DataItem AE0MW-START char(4)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// af0n map array size
DataItem AE0MW-TBL-IDX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

DataItem AE0MW-WD1-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0MW-WD1-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0MW-WD1-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0MW-WD2-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0MW-WD2-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0MW-WD2-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0MW-WD2-SLASH1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AE0MW-WD2-SLASH2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AE0MW-WD2-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0MW-WORK-DATE-1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0MW-WORK-DATE-2 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AE0MW-WORK-DATE-3 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0MW-WORK-DATE-4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of active snapshots
DataItem AE0MWACT num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// Beginning member in array
DataItem AE0MWBEG num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

DataItem AE0MWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Temporary storage length
DataItem AE0MWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of snapshots loaded
DataItem AE0MWMAX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// message number
DataItem AE0MWMNO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// next member in array
DataItem AE0MWNXT num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// option requested
DataItem AE0MWOPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// option requested
DataItem AE0MWOPT2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// scheduler error msg
DataItem AE0MWSMG char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// affrec array size
DataItem AE0MWSZA num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// af0n map array size
DataItem AE0MWSZM num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// PC2REC GROUP LEVEL
DataItem VSEOJN01-REC char(52)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PG_SCHED_SPCLT_CD
DataItem XXX-EOJ-STAT-DESC char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ZZ_SETUP_HHMM
DataItem ZZZSDTTM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

