package ae0l;

import ab.common.*;
import corpcom2.XP1REC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPAB001;
import corpcom3.XPAB010;
import corpcom3.XSABS01;
import corpcom3.XSABS02;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XCTTBL;
import corpx1.XSETBL;
import corpx2.XPL-PROD-LN-CD;
import corpz3.ZZ-CHNG-CNT;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import pc.common.PC-PRDCU-ID;
import pc.common.PC2CUXID;
import pc.common.PC2REC;
import pg.common.PG-SCHED-SPCLT-CD;
import pg.common.PG1REC;
import sy.common.SY-STY-NBR;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
import vv.common.VSCXCT01;
//*** PROGRAM=AE0L ****
// This application is a prototype for the Apparel Forecast/Buy
// system.  It will display multiple rows from a DB2 table for
// the user to view and/or modify.
// 
// Upon initial entry, the table is read and columns from the
// selected rows are formatted and saved in temporary storage,
// one display page per queue record.
// 
// The records are retrieved from temporary storage one page at
// a time for display. The user may page forward and backward
// to view the rows that were selected. If no scheduler is used
// all records will be displayed in scheduler sequence.
// 
// Adding schedulers may be done by going to the add screen
// i.e. pressing PF13. Up to 14 schedulers may be added at one
// time.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 02/28/97   klee     New application.
// 08/15/97   aabra1   change vscasn01
// Y2KFIX   12/12/97  KSUMME  Y2K MODIFICATIONS MADE TO:
//                            (global chg due to table chg:
//                             XP1REC, AB3REC, XPAB020)
// *********************
Program AE0L type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AB3REC AB3REC; // record
  ABWREC ABWREC; // record
  AE0LW00 AE0LW00; // record
  AE0LW02 AE0LW02; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC2REC PC2REC; // record
  PG1REC PG1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VSCASN01 VSCASN01; // record
  VSCXCT01 VSCXCT01; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XSETBL; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use AE0LM.AE0LM001, // form
  		AE0LM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAB001: XPAB001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Apparel Buy Prototype process.*/
     /* ------------------------------------------------------------*/


    set ABWREC empty; /* Initialize working storage*/
    set AE0LW00 empty; /* Initialize working storage*/
    set AE0LW02 empty; /* Initialize working storage*/
    set AB3REC empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TA5REC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    set AE0LM001 initial; /* Initialize map output area*/
    ABWREC.ABWAPPL = "AE0L"; /* Initialize appl ID for this appl*/
    ABWREC.ABWPRCSN = "0000"; /* Initialize process number to zero*/

    ABWREC.ABWMAP = "1"; /* Indicate map to be displayed*/
    ABWREC.ABWSWR = "Y"; /* Indicate request for data*/
    move " " to AE0LM001.AE0LMSEL[1] for all;
    AE0LW00.AE0LWSZM = sysVar.arrayIndex; /* calculate the size of the map*/
    move " " to AE0LW02.AE0LWATT[1] for all;
    AE0LW00.AE0LWSZA = sysVar.arrayIndex; /* calculate array size for tsq rec*/
    ABWREC.ABWTSL = 0552;
                                     /* the calculated size of tsq rec*/

    ABWREC.ABWIXM = 1; /* Initialize line index*/
    while (ABWREC.ABWIXM <= AE0LW00.AE0LWSZM) /* Until end of lines*/
      set AE0LM001.AE0LMCUST-ID[ABWIXM] skip, invisible; /* Hide country*/
      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/
    end

    goto AE0L001; /* Converse Apparel Buy Prototype*/


    AE0L001: AE0L001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the nil buy process.*/
     /* ------------------------------------------------------------*/

    goto AE0L001; /* Nil Buy*/


  end // end main
end // end AE0L

// Choose which map to display
Function AE0L001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
      /* Otherwise, if specified, display the second map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  ABWREC.ABWPRCSN = "M001"; /* Indicate map # 1*/
  ABWREC.XXXMAPNM = ABWREC.ABWERLOC; /* Move map name to afwrec*/
  ABWREC.ABWPRCSN = "0000"; /* Re-Initialize process name*/

  AE0L100(); /* Display map 1*/



end // end AE0L001

// Driver process for 100 map
Function AE0L100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  AE0L110(); /* Obtain the data to display*/

  AE0L120(); /* Format and display the map*/

  AE0L130(); /* Check attention identifier*/

  AE0L140(); /* Reset fields to normal intensity*/

  AE0L150(); /* Verify the entered data*/

  AE0L160(); /* Process valid input request*/


end // end AE0L100

// Obtain the data to display
Function AE0L110()
   /* ------------------------------------------------------------*/
   /* If data was not requested, return to the previous process.*/
   /* Purge any existing queue in temporary storage.*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At end of rows, add any partial page to the queue.*/
   /* At end of rows, close the selected set cursor.*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/


  if (ABWREC.ABWSWR != "Y") /* Data was not requested*/

    return; /* Return to previous process*/
  end

  ABWREC.ABWIXM = 0; /* Initialize display line number*/
  ABWREC.ABWIDX1 = 0; /* Initialize tsq array number*/
  set AE0LW02 empty; /* Clear temporary storage record*/

  AE0L111(); /* Purge any temporary storage*/

  AE0L112(); /* Select set and open the cursor*/

  if (converseVar.validationMsgNum == 0) /* No errors were found*/

    ABWREC.ABWSWC = "N"; /* Initialize end of file switch*/
    AE0LW02.AE0LWIDX = 0; /* Initialize tsq array number*/

    set AE0LW02 empty; /* Clear temporary storage record*/
    AE0LW-GENERIC-FETCH-SW = " ";
    while (ABWREC.ABWSWC == "N") /* Until cursor end of file*/

      if (AE0LM-SCHED-CODE == " " /* test for inclusive fetch*/
       && ABWREC.ABWFIRST != " ") /* not first time*/
        AE0L118(); /* Obtain data and format page*/
        AE0LW-GENERIC-FETCH-SW = "Y";
      else
        if (ABWREC.ABWFIRST == " ") /* test for FIRST TIME*/
          if (AE0LW-PREV-ADD-SCRN == "Y")
            AE0LW-PREV-ADD-SCRN = " ";
            AE0L113(); /* Obtain data and format page*/
          else
            AE0L215(); /* Obtain data and format page*/
          end
        else
          AE0L113(); /* Obtain data and format page*/
        end
      end

      if (AE0LW02.AE0LWIDX == AE0LW00.AE0LWSZM) /* Page is full*/
        AE0L114(); /* Add page to temporary storage*/
      end

      if (converseVar.validationMsgNum != 0) /* Errors were found*/
        ABWREC.ABWSWC = "Y"; /* Force end of file*/
      end

    end
    AE0LW-FIRST-TIME = "N"; /* set first time switch*/
   /* MOVE 'N' TO ABWREC.ABWFIRST;    /* set first time switch*/

  end

  if (converseVar.validationMsgNum == 0 /* No errors were found*/
   && AE0LW02.AE0LWIDX > 0)             /* and page was formatted*/
    AE0L114(); /* Add page to temporary storage*/
  end

  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    if (AE0LW-GENERIC-FETCH-SW == "Y") /* generic fetch selected*/
      AE0L119(); /* Close the selected set cursor*/
    else
      AE0L115(); /* Close the selected set cursor*/
    end
  end

  if (converseVar.validationMsgNum == 0) /* No errors were found*/

    ABWREC.ABWTSP = 1; /* Initialize page number*/
    ABWREC.ABWSWR = "N"; /* Request for data completed*/

  end


end // end AE0L110

// Purge any temporary storage
Function AE0L111()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = ABWREC.ABWAPPL; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (AE0LW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                         /* ; subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    ABWREC.ABWPRCSN = "111 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag routine*/

  end

  ABWREC.ABWTSP = 1; /* Reset current page number*/
  ABWREC.TA5TSQIX = 0; /* Reset highest page number*/


end // end AE0L111

// Select set and open cursor
Function AE0L112()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  if (ABWREC.ABWFIRST == " " /* FIRST TIME THROUGH*/
   && AE0LW-PREV-ADD-SCRN != "Y") /* previous screen was not an add*/
    AE0L210(); /* get scheduler code from user id*/
    AE0L117(); /* select scheduler*/
    AE0LW-HOLD-USER-NAME = PG1REC.XXXUSER; /* save current sched*/
    AE0LW-SCHED-SPCLT-CD = PG1REC.PG1SC4CD;
  else
    AE0LW-NEW-SCHED-CODE = " "; /* save new sched cd*/
    if (AE0LM-SCHED-CODE != AE0LW-HOLD-USER-NAME /* new scheduler test*/
     || AE0LW-PREV-ADD-SCRN == "Y")              /* previous screen was not an add*/
      move AE0LM-SCHED-CODE to AE0LW-HOLD-USER-NAME withV60Compat; /* save new sched cd*/
      AE0LW-NEW-SCHED-CODE = "Y"; /* save new sched cd*/
      if (AE0LM-SCHED-CODE == "  ")
        AE0L116(); /* select all schedulers*/
      else
        AE0L200(); /* get scheduler code*/
        AE0L201(); /* check for error condition*/
        AE0LW-SCHED-SPCLT-CD = PG1REC.PG1SC4CD;
        AE0L117(); /* select scheduler*/
      end
    end
  end


end // end AE0L112

// fetch next table entry
Function AE0L113()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  try
    call "VSCASN01" ("N1", SQLCA, VSCASN01) {isNoRefresh = yes, isExternal = yes};
  end /* Ftch next row*/
   /* ****************************************************/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

    ABWREC.ABWSWC = "Y"; /* Indicate end of file*/

    return; /* Return to previous process*/

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    ABWREC.ABWPRCSN = "113 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSCASN01"; /* Table view name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag. routine*/

    AE0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    return; /* Return to previous process*/

  end
  AE0LW02.AE0LWIDX = AE0LW02.AE0LWIDX + 1; /* Increment line index*/
   /* Save data to display*/
  AE0LW02.USER-NAME[AE0LWIDX] = AE0LW-HOLD-USER-NAME;
  AE0LW02.PG-SCHED-SPCLT-CD[AE0LWIDX] = VSCASN01.PG1SC4D;
  AE0LW02.PC-PRDCU-ID[AE0LWIDX] = VSCASN01.PC2CUXID;
  AE0LW02.ZZ-CHNG-CNT[AE0LWIDX] = VSCASN01.ZZZCHGCT;


end // end AE0L113

// Add page to temporary storage
Function AE0L114()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  AE0LW02.AE0LWLEN = ABWREC.ABWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = ABWREC.ABWAPPL; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (AE0LW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                    /* ;subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ABWREC.ABWPRCSN = "114 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag. routine*/

    AE0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end

  ABWREC.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/

  AE0LW02.AE0LWIDX = 0; /* Reset display line number*/

  set AE0LW02 empty; /* Clear temporary storage record*/


end // end AE0L114

// Close selected set cursor
Function AE0L115()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VSCASN01" ("C1", SQLCA, VSCASN01) {isNoRefresh = yes, isExternal = yes};
  end /* Close tbl set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ABWREC.ABWPRCSN = "115 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSCASN01"; /* Table view name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag. routine*/

    AE0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end


end // end AE0L115

// Select all schedulers(generic)
Function AE0L116()
   /* ------------------------------------------------------------*/
   /* Select all schedulers.*/
   /* ------------------------------------------------------------*/

  try
    call "VSCASN01" ("S2", SQLCA, VSCASN01) {isNoRefresh = yes, isExternal = yes};
  end /* SELECT TBL SET*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    ABWREC.ABWPRCSN = "116 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "SELECT ALL SCHEDULERS";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSCASN01"; /* Table view name*/
    TA1REC.TA1TBLKE = VSCASN01.PG1SC4D; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

    AE0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    return; /* Return to previous process*/

  end


end // end AE0L116

// Select individual scheduler
Function AE0L117()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  VSCASN01.PG1SC4D = AE0LW-SCHED-SPCLT-CD; /* move sched cd to tbl*/

  try
    call "VSCASN01" ("S1", SQLCA, VSCASN01) {isNoRefresh = yes, isExternal = yes};
  end /* SELECT TBL SET*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    ABWREC.ABWPRCSN = "112 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSCASN01"; /* Table view name*/
    TA1REC.TA1TBLKE = VSCASN01.PG1SC4D; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

    AE0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    return; /* Return to previous process*/

  end


end // end AE0L117

// fetch next table entry
Function AE0L118()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  try
    call "VSCASN01" ("N2", SQLCA, VSCASN01) {isNoRefresh = yes, isExternal = yes};
  end /* Ftch next row*/
   /* ****************************************************/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

    ABWREC.ABWSWC = "Y"; /* Indicate end of file*/

    return; /* Return to previous process*/

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    ABWREC.ABWPRCSN = "118 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSCASN01"; /* Table view name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag. routine*/

    AE0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    return; /* Return to previous process*/

  end
  AE0LW02.AE0LWIDX = AE0LW02.AE0LWIDX + 1; /* Increment line index*/
   /* Save data to display*/
  AE0LW02.USER-NAME[AE0LWIDX] = AE0LW-HOLD-USER-NAME;
  AE0LW02.PG-SCHED-SPCLT-CD[AE0LWIDX] = VSCASN01.PG1SC4D;
  AE0LW02.PC-PRDCU-ID[AE0LWIDX] = VSCASN01.PC2CUXID;
  AE0LW02.ZZ-CHNG-CNT[AE0LWIDX] = VSCASN01.ZZZCHGCT;


end // end AE0L118

// Close generic cursor
Function AE0L119()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VSCASN01" ("C2", SQLCA, VSCASN01) {isNoRefresh = yes, isExternal = yes};
  end /* Close tbl set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ABWREC.ABWPRCSN = "119 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSCASN01"; /* Table view name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag. routine*/

    AE0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end


end // end AE0L119

// Format and display the map
Function AE0L120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set AE0LM001 alarm; /* Indicate sound alarm*/
  end
  if (AE0LM-COMMENTS[1] > " ") /* test for error msg on map*/
    set AE0LM001 alarm; /* Indicate sound alarm*/
  end

  AE0LM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  if (converseVar.validationMsgNum == 0 /* No error message to display*/
  )                                    
    if (ABWREC.ABWFIRST == " ") /* First time through*/

      ABWREC.ABWFIRST = "N"; /* turn 'first time through' OFF*/
      if (COMMAREA.CAITEM > " " /* Application data exists*/
       || AE0LWIDX > 0          /* line index > 0*/
       || TA5REC.TA5TSQIX > 0)  /* Page index > 0*/

        set AE0LM001.AE0LM-PAGE-BACK protect, invisible;
        if (ABWREC.TA5TSQIX > 1) /* test for multiple pages*/
          set AE0LM001.AE0LM-PAGE-FORWARD protect, bold, defaultColor;
        end
        AE0LM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
        set AE0LM001.CAITEM modified; /* Set MDT on*/
        COMMAREA.CAITEM = " "; /* Clear application data*/
        AE0LW00.AE0LWOPT = "M"; /* set maintenance option on*/

        ABWREC.ABWIXM = 1; /* Initialize line index*/

        while (ABWREC.ABWIXM <= AE0LW00.AE0LWSZM) /* Until end of lines*/
          set AE0LM001.AE0LMSEL[ABWIXM] normal;
          set AE0LM001.AE0LMSCH[ABWIXM] normal;
          set AE0LM001.AE0LMSCH[ABWIXM] protect;
          set AE0LM001.AE0LMCUST-ID[ABWIXM] normal;
          ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/
        end
        AE0L121(); /* Format the data on the page*/
        if (ABWREC.TA5TSQIX == 1) /* save initial user*/
          AE0LW-HOLD-USER-NAME = AE0LW02.USER-NAME[1];
        end
      else
        set AE0LM001 initial; /* Clear map output area*/
      end

    else

      if ((converseVar.eventKey is pf7 || converseVar.eventKey is pf8) /* check for page back*/
       && AE0LW-INVALID-PFKEY == " ")                                 
        if (converseVar.eventKey is pf8) /* page forward*/
          ABWREC.ABWTSP = ABWREC.ABWTSP + 1; /* incr page cnt*/
          AE0L121(); /* Format the data on the page*/
          if (ABWREC.ABWTSP == ABWREC.TA5TSQIX) /* test for last page*/
            set AE0LM001.AE0LM-PAGE-FORWARD protect, invisible;
          else
            set AE0LM001.AE0LM-PAGE-FORWARD protect, bold; /* MONO;*/
          end
          set AE0LM001.AE0LM-PAGE-BACK protect, bold;
          set AE0LM001.AE0LHDR4 protect, invisible;
        else
          ABWREC.ABWIXM = 1; /* Initialize line index*/

          while (ABWREC.ABWIXM <= AE0LW00.AE0LWSZM) /* Until end of lines*/
            set AE0LM001.AE0LMSEL[ABWIXM] normal;
            set AE0LM001.AE0LMSCH[ABWIXM] normal;
            set AE0LM001.AE0LMSCH[ABWIXM] protect;
            set AE0LM001.AE0LMCUST-ID[ABWIXM] normal;
            ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/
          end
          ABWREC.ABWTSP = ABWREC.ABWTSP - 1; /* subt page cnt*/
          AE0L121(); /* Format the data on the page*/
          if (ABWREC.ABWTSP == 1) /* test for first page*/
            set AE0LM001.AE0LM-PAGE-BACK protect, invisible; /* first page*/
          else
            set AE0LM001.AE0LM-PAGE-BACK protect, bold;
          end
          set AE0LM001.AE0LM-PAGE-FORWARD protect, bold, defaultColor;
          set AE0LM001.AE0LHDR4 protect, invisible;
        end
      else
        if (AE0LW00.AE0LWOPT == "A")
          ABWREC.ABWIXM = 1; /* Initialize line index*/
          set AE0LM001.AE0LM-SCHED-HDR protect, invisible;
          set AE0LM001.AE0LM-SCHED-CODE protect, invisible;
          set AE0LM001.AE0LMHDR protect, invisible;
          set AE0LM001.AE0LM-PAGE-FORWARD protect, invisible;

          if (AE0LM-COMMENTS[1] > " ") /* test for error msg on map*/
            set AE0LM001.AE0LHDR4 protect, bold;
          else
            set AE0LM001.AE0LHDR4 protect, invisible;
          end

          while (ABWREC.ABWIXM <= 14) /* Until end of lines*/
            if (AE0LM-COMMENTS[ABWIXM] == " ") /* no comments*/
              AE0LM001.AE0LMCUST-ID[ABWIXM] = " ";
              AE0LM001.AE0LMSCH[ABWIXM] = " ";
              set AE0LM001.AE0LM-COMMENTS[ABWIXM] protect, invisible, noHighLight;
            else
              set AE0LM001.AE0LM-COMMENTS[ABWIXM] normal;
              set AE0LM001.AE0LM-COMMENTS[ABWIXM] protect;
              set AE0LM001.AE0LM-COMMENTS[ABWIXM] noHighLight;
            end
            set AE0LM001.AE0LMCUST-ID[ABWIXM] normal;
            set AE0LM001.AE0LMSCH[ABWIXM] normal;
            set AE0LM001.AE0LMSCH[ABWIXM] green, underline;
            set AE0LM001.AE0LMSEL[ABWIXM] protect, invisible, noHighLight;
            ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/
          end
          AE0L121(); /* Format the data on the page*/
          AE0LM001.AE0LMPFT = "13:MAINT";
          set AE0LM001.AE0LMPFT protect, bold, defaultColor;
          set AE0LM001.AE0LMSCH[1] cursor, normal;
        else
          if (AE0LW00.AE0LWOPT == "M")
            if (ABWREC.TA5TSQIX > 1) /* test for multiple pages*/
              set AE0LM001.AE0LM-PAGE-FORWARD protect, bold;
              set AE0LM001.AE0LM-PAGE-BACK protect, invisible;
            else
              set AE0LM001.AE0LM-PAGE-FORWARD protect, invisible;
              set AE0LM001.AE0LM-PAGE-BACK protect, invisible;
            end

            ABWREC.ABWIXM = 1; /* Initialize line index*/

            set AE0LM001.AE0LM-SCHED-HDR normal;
            set AE0LM001.AE0LM-SCHED-HDR protect;
            set AE0LM001.AE0LM-SCHED-CODE normal;
            set AE0LM001.AE0LMHDR normal;
            set AE0LM001.AE0LMHDR protect;
            set AE0LM001.AE0LHDR4 protect, invisible;
            while (ABWREC.ABWIXM <= AE0LW00.AE0LWSZM) /* Until end of lines*/
              set AE0LM001.AE0LMSEL[ABWIXM] normal;
              set AE0LM001.AE0LMSEL[ABWIXM] underline;
              set AE0LM001.AE0LMSCH[ABWIXM] blue, protect;
              set AE0LM001.AE0LMCUST-ID[ABWIXM] normal;
              set AE0LM001.AE0LM-COMMENTS[ABWIXM] protect, invisible;
              ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/
            end
            AE0L121(); /* Format the data on the page*/
          else
            if (AE0LW-NEW-SCHED-CODE == "Y")
              ABWREC.ABWIXM = 1; /* Initialize line index*/

              while (ABWREC.ABWIXM <= AE0LW00.AE0LWSZM) /* Until end of lines*/
                set AE0LM001.AE0LMSEL[ABWIXM] normal;
                set AE0LM001.AE0LMSCH[ABWIXM] normal;
                set AE0LM001.AE0LMSCH[ABWIXM] protect;
                set AE0LM001.AE0LMCUST-ID[ABWIXM] normal;
                ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/
              end

              AE0L121(); /* Format the data on the page*/

              set AE0LM001.AE0LHDR4 protect, invisible;
              set AE0LM001.AE0LMSEL[1] cursor;

              if (ABWREC.TA5TSQIX > 1) /* test for multiple pages*/
                set AE0LM001.AE0LM-PAGE-FORWARD protect, bold;
              else
                set AE0LM001.AE0LM-PAGE-FORWARD protect, invisible;
              end
              set AE0LM001.AE0LM-PAGE-BACK protect, invisible;

              ABWREC.ABWIXM = 1; /* Initialize line index*/

              while (ABWREC.ABWIXM <= 14) /* Until end of lines*/
                set AE0LM001.AE0LM-COMMENTS[ABWIXM] protect, invisible;
                ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/
              end
            else
              if (AE0LW-NO-CHG-SW != "Y")
                ABWREC.ABWIXM = 1; /* Initialize line index*/

                while (ABWREC.ABWIXM <= AE0LW00.AE0LWSZM)
                  set AE0LM001.AE0LMSEL[ABWIXM] normal;
                  set AE0LM001.AE0LMSCH[ABWIXM] normal;
                  set AE0LM001.AE0LMSCH[ABWIXM] protect;
                  set AE0LM001.AE0LMSCH[ABWIXM] underline;
                  set AE0LM001.AE0LMCUST-ID[ABWIXM] normal;
                  AE0L124(); /* Clear fields*/
                  ABWREC.ABWIXM = ABWREC.ABWIXM + 1;
                end
                set AE0LM001.AE0LMSEL[1] cursor, normal;
                AE0LM001.AE0LMPFT = "13:ADD";
                set AE0LM001.AE0LMPFT protect, defaultColor;

              end
            end
          end
        end
      end

    end

    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      if (ABWREC.ABWNMO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(ABWREC.ABWNMO);
      end /* Information message number*/
    end

  end

  ABWREC.ABWNMO = 0; /* Reset information message number*/

  converse AE0LM001 ;


end // end AE0L120

// Format the selected data
Function AE0L121()
   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the plan sequence data in the map.*/
   /* ------------------------------------------------------------*/

  if (AE0LW00.AE0LWOPT == "A") /* option not equal to add*/

    return; /* Return to previous process*/
  end
  if (ABWREC.TA5TSQIX == 0) /* No data to display*/

    ABWREC.ABWPRCSN = "121 "; /* Process number*/
    AE0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(5); /* Indicate no data to display*/

    return; /* Return to previous process*/

  end

  if (ABWREC.ABWTSP != TA5REC.TA5TSQIX /* Desired page not current*/
   || AE0LW02.AE0LWIDX <= 0)           /* no data contained in ab0hw02 rec      x*/
    AE0L122(); /* Obtain temporary storage page*/
  end


  ABWREC.ABWIXM = 1; /* Initialize line index*/
  ABWREC.ABWIDX1 = 1; /* Initialize line index*/

  move AE0LW-HOLD-USER-NAME to AE0LM-SCHED-CODE withV60Compat; /* DISPLAY USER*/

  while (ABWREC.ABWIXM <= AE0LW02.AE0LWIDX) /* Until end of lines*/

    if (AE0LW02.USER-NAME[ABWIXM] == " " /* no user name*/
     && ABWREC.ABWFIRST != " ")          /* not first time*/
      set PG1REC empty;
      PG1REC.PG1SC4CD = AE0LW02.PG-SCHED-SPCLT-CD[ABWIXM];
      AE0L126(); /* get user name*/
      AE0LW02.USER-NAME[ABWIXM] = PG1REC.XXXUSER;
    end
    AE0LM001.AE0LMSCH[ABWIXM] = AE0LW02.USER-NAME[ABWIXM];
    AE0LM001.AE0LMCUST-ID[ABWIXM] = AE0LW02.PC-PRDCU-ID[ABWIXM];

    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/
    ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1; /* Increment line index*/

  end
  set AE0LM001.AE0LMSEL[1] cursor, normal; /* Display select flag*/

  while (ABWREC.ABWIXM <= AE0LW00.AE0LWSZM) /* Until end of lines*/
    AE0L124(); /* clear fields*/
    AE0L125(); /* protect fields*/
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/
  end

end // end AE0L121

// Read temporary storage page
Function AE0L122()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  AE0LW02.AE0LWLEN = ABWREC.ABWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = ABWREC.ABWAPPL; /* Application identification*/
  TA5REC.TA5TSQIX = ABWREC.ABWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (AE0LW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                    /* ;subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ABWREC.ABWPRCSN = "122 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

    AE0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* Exit to redisplay map*/

  end


end // end AE0L122

// clear unused fields
Function AE0L124()
  AE0LM001.AE0LMSEL[ABWIXM] = " ";
  AE0LM001.AE0LMSCH[ABWIXM] = " ";
  AE0LM001.AE0LMCUST-ID[ABWIXM] = " ";
  AE0LM001.AE0LM-COMMENTS[ABWIXM] = " ";
end // end AE0L124

// protect unused fields
Function AE0L125()
  set AE0LM001.AE0LMSEL[ABWIXM] skip, invisible; /* Display select flag*/
  set AE0LM001.AE0LMSCH[ABWIXM] skip, invisible; /* Display select flag*/
  set AE0LM001.AE0LMCUST-ID[ABWIXM] skip, invisible; /* Display select flag*/
  set AE0LM001.AE0LM-COMMENTS[ABWIXM] invisible; /* Display select flag*/
  set AE0LM001.AE0LM-COMMENTS[ABWIXM] protect;
end // end AE0L125

// xpab010 clone for add sched
Function AE0L126()
   /* *************************************************************/
   /* *****                                                    ****/
   /* *****                  A E 0 L 1 2 6                     ****/
   /* *****                                                    ****/
   /* ***** This process will retrieve the scheduler name      ****/
   /* ***** using the scheduler code and group code.           ****/
   /* *************************************************************/

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key.*/
   /* ------------------------------------------------------------*/

  PG1REC.XGPCD = "03"; /* Indicate 'APPAREL' GPC code*/
  PG1REC.PG1FCTCD = " "; /* FORECASTER CD must be blank*/

   /* ------------------------------------------------------------*/
   /* CALL IOMOD to retrieve row from DPRODG.VSUSER01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1200" ("S ", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* CHECK CSP and DB2 return codes to see if CALL executed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000") /* If CALL not sucessful*/
    XP1ERRFL = "3"; /* Indicate 'BAD CALL' error*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
  else /* ELSE (CALL to IOMOD, OKAY)*/
    if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
      XP1ERRFL = "1"; /* Indicate 'NOT FOUND' error*/
      return; /* Return to 'CALLING' Process*/

      /* ***** EXIT PROCESS HERE ******/

    else /* ELSE (SQLCODE not = +100)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
        XP1REC.XP1ERRFL = "2";
                                   /* Indicate 'DATA BASE BUSY' error*/
        TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
      else /* ELSE*/
        if (SQLCA.VAGen_SQLCODE != 0) /* IF Unknown DB2 Error occured*/
          XP1REC.XP1ERRFL = "4";
                                   /* Indicate 'UNKNOWN ERROR' error*/
          TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
        else /* ELSE ( SQLCODE = 0, OKAY ! )*/
          return; /* Return to 'CALLING' Process*/

          /* ***** EXIT PROCESS HERE ******/

        end /* END of "IF" statement*/
      end /* END of "IF" statement*/
    end /* END of "IF" statement*/
  end /* END of "IF" statement*/

   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/

  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "XPAB010"; /* Process name*/
  TA1REC.TA1LOC = "SELECT PG1SC4CD FROM SIGNON";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = XP1REC.XXXUSER; /* MOVE SIGNON to ERROR-DIAG*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Return to previous process*/



end // end AE0L126

// Check attention identifier
Function AE0L130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set AE0LM001 initial; /* Clear the map fields*/

    exit stack; /* Exit to redisplay map*/

  end

  if (AE0LM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      AE0L111(); /* Purge any temporary storage*/

      COMMAREA.CATOAP = AE0LM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AE0LM001.CAITEM; /* Application data*/

      XSABS01(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    set AE0LM001.CATOAP cursor, modified, bold; /* Highlight*/

    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AE0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AE0LM001"; /* Appl find code*/
    end

    AE0L111(); /* Purge any temporary storage*/

    XSABS02(); /* Exit to another application*/

    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AE0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf13) /* and PF13 was not pressed*/

    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AE0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    exit stack; /* Exit to redisplay map*/

  end


end // end AE0L130

// Reset highlighted fields
Function AE0L140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (AE0LW00.AE0LWOPT == "A"
   && converseVar.eventKey is pf13)
    return;
  end
  if (AE0LW00.AE0LWOPT == "A")
    set AE0LM001.AE0LMSEL skip, invisible; /* Display select flag*/
  end
  ABWREC.ABWIXM = 1; /* Initialize line index*/

  while (ABWREC.ABWIXM <= AE0LW00.AE0LWSZM) /* Until end of lines*/

    if (AE0LW00.AE0LWOPT == "A")
      set AE0LM001.AE0LMSEL[ABWIXM] skip, invisible; /* set default attrs*/
      set AE0LM001.AE0LMSCH[ABWIXM] normal;
      set AE0LM001.AE0LMCUST-ID[ABWIXM] normal;
      set AE0LM001.AE0LM-COMMENTS[ABWIXM] normal;
      set AE0LM001.AE0LHDR4 bold;
    else
      if (AE0LM001.AE0LMSCH[ABWIXM] != " ")
        set AE0LM001.AE0LMSEL[ABWIXM] normal; /* set default attrs*/
        set AE0LM001.AE0LMSCH[ABWIXM] normal;
        set AE0LM001.AE0LMCUST-ID[ABWIXM] normal;
        set AE0LM001.AE0LM-COMMENTS[ABWIXM] invisible;
        set AE0LM001.AE0LHDR4 invisible;
      else
        AE0L124(); /* clear fields*/
        AE0L125(); /* protect fields*/
      end
    end
    AE0LM001.AE0LM-COMMENTS[ABWIXM] = " ";
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/
  end



  set AE0LM001.CATOAP initialAttributes; /* Commarea TO application*/
  set AE0LM001.CAITEM initialAttributes; /* Commarea application data*/


end // end AE0L140

// Verify the entered data
Function AE0L150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (AE0LM001.CAITEM > " ") /* Application data was entered*/

    set AE0LM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    ABWREC.ABWPRCSN = "150 "; /* Process number*/
    AE0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  end

  if (AE0LM-SCHED-CODE != AE0LW-HOLD-USER-NAME) /* DETERMINE NEW SCHEDULER*/
    ABWREC.ABWSWR = "Y"; /* turn on data request switch*/
    exit stack; /* Exit to redisplay map*/
  end

  if ((converseVar.eventKey is pf7 || converseVar.eventKey is pf8) /* Scroll back request*/
   && AE0LW00.AE0LWOPT != "A")                                     /* if add option selected*/
    AE0L151(); /* Verify scroll request*/
    ABWREC.ABWIXM = 1; /* initialize indx*/
    set AE0LHDR4 protect, invisible;
    while (ABWREC.ABWIXM <= 14)
      set AE0LM001.AE0LMSCH[ABWIXM] protect, noHighLight;
      set AE0LM001.AE0LM-COMMENTS[ABWIXM] invisible;
      set AE0LM001.AE0LM-COMMENTS[ABWIXM] protect;
      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* increment index*/
    end
  else
    AE0L152(); /* Verify selection criteria*/
    AE0LW00.AE0LWNOU = 0; /* count of screen changes*/
    if (AE0LW00.AE0LWOPT == "A") /* if add option selected*/
      if (converseVar.eventKey is pf13) /* check for new screen*/
        exit stack; /* Exit to redisplay map*/
      end
      ABWREC.ABWIXM = AE0LW00.AE0LWSZM; /* Initialize line index*/
      while (ABWREC.ABWIXM > 0) /* Until end of lines*/
        AE0L153(); /* Verify any add data*/
        ABWREC.ABWIXM = ABWREC.ABWIXM - 1; /* Increment line index*/

      end
      if (AE0LW00.AE0LWNOU <= 0) /* no changes made*/
        exit stack; /* Exit to redisplay map*/
      else
        AE0L170(); /* add items to table*/
      end
    end
    if (AE0LW00.AE0LWOPT == "M") /* if maintenance option selected*/
      ABWREC.ABWIXM = 1; /* initialize indx*/
      while (ABWREC.ABWIXM <= 14)
        set AE0LM001.AE0LM-SCHED-HDR normal;
        set AE0LM001.AE0LM-SCHED-HDR protect;
        set AE0LM001.AE0LM-SCHED-CODE normal;
        set AE0LM001.AE0LMHDR normal;
        set AE0LM001.AE0LMSEL[ABWIXM] normal;
        set AE0LM001.AE0LMSEL[ABWIXM] underline;
        set AE0LM001.AE0LMSCH[ABWIXM] protect, noHighLight, blue;
        set AE0LM001.AE0LMCUST-ID[ABWIXM] underline;
        set AE0LM001.AE0LMHDR protect;
        set AE0LM001.AE0LHDR4 protect, invisible;
        AE0LM001.AE0LM-COMMENTS[ABWIXM] = " ";
        set AE0LM001.AE0LM-COMMENTS[ABWIXM] protect, invisible;
        AE0LM001.AE0LMPFT = "13:ADD";
        set AE0LM001.AE0LMPFT protect, bold, defaultColor;
        ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* increment index*/
      end
      if (converseVar.eventKey is pf13) /* check for new screen*/
        ABWREC.ABWFIRST = " "; /* Set first time switch on*/
      end
      exit stack; /* Exit to redisplay map*/
    end

    if (AE0LW00.AE0LWOPT2 == "C") /* if CHANGE OPTION SELECTED*/
      AE0L190(); /* change rows*/
      AE0LW00.AE0LWOPT2 = " "; /* reset option indicator*/
      ABWREC.ABWFIRST = " "; /* Set first time switch on*/
      if (converseVar.validationMsgNum != 0) /* Errors were found*/
        exit stack; /* Exit to redisplay map*/
      end
    end

    if (AE0LW00.AE0LWOPT == "D") /* if CHANGE OPTION SELECTED*/
      AE0LW-ENTRY-DELETED = " ";
      AE0L180(); /* delete rows*/
      ABWREC.ABWFIRST = " "; /* Set first time switch on*/
      if (converseVar.validationMsgNum != 0 /* Errors were found*/
       || AE0LW-ENTRY-DELETED == "Y")      
        exit stack; /* Exit to redisplay map*/
      end
    end

    AE0LW-NO-CHG-SW = " ";

    if (AE0LW00.AE0LWNOU <= 0) /* no changes made*/
      AE0LW-NO-CHG-SW = "Y";
      ABWREC.ABWSWR = " "; /* turn off data request switch*/
      exit stack; /* Exit to redisplay map*/
    end
  end

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to redisplay map*/
  end

end // end AE0L150

// Verify scroll request
Function AE0L151()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && ABWREC.ABWTSP < 2)          /* and no previous pages*/

    ABWREC.ABWPRCSN = "151 "; /* Process number*/
    AE0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && ABWREC.ABWTSP >= ABWREC.TA5TSQIX) /* and no more pages*/

    ABWREC.ABWPRCSN = "151 "; /* Process number*/
    AE0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end


end // end AE0L151

// Edit selection criteria
Function AE0L152()
   /* ============================================================*/
   /* ===== E D I T    S E L E C T I O N    C R I T E R I A  =====*/
   /* =====                                                  =====*/
   /* ===== Compare selection criteria on screen to data on  =====*/
   /* ===== working storage record, if any has changed,     =====*/
   /* ===== validate all selection criteria fields and turn  =====*/
   /* ===== on switch which allows later processing to purge =====*/
   /* ===== temporary storage and re-load it with newly      =====*/
   /* ===== selected data.                                   =====*/
   /* ============================================================*/

  ABWREC.ABWSWR = "N"; /* initialize switch to 'OFF'*/
  AE0LW00.AE0L-PREV-OPTION = AE0LW00.AE0LWOPT; /* init sw to 'OFF'*/
   /* initialize switch to 'OFF'*/
  AE0LW00.AE0LWOPT = " ";
  AE0LW-INVALID-PFKEY = " ";

  if (AE0L-PREV-OPTION == "A" && converseVar.eventKey not pf1 && converseVar.eventKey not pf3 && 
  converseVar.eventKey not enter && converseVar.eventKey not pf13 && converseVar.eventKey not pa2
   && converseVar.eventKey not pf4)
    AE0LW-INVALID-PFKEY = "Y";
  end

  if (converseVar.eventKey is pf13) /* TEST FOR ADD*/
    if (AE0LW00.AE0L-PREV-OPTION != "A") /* TEST FOR ADD*/
      AE0LW00.AE0LWOPT = "A"; /* SET ADD SWITCH ON*/
      ABWREC.ABWSWR = "N"; /* initialize switch to 'on'*/
      AE0LW-PREV-ADD-SCRN = "Y"; /* TURN ON SWITCH*/
      set AE0LM001.AE0LM-PAGE-BACK protect, invisible;
    else
      AE0LW00.AE0LWOPT = "M"; /* SET MAINTNEANCE SWITCH ON*/
      ABWREC.ABWSWR = "Y"; /* initialize switch to 'on'*/
    end
    return; /* RETURN TO PREVIOUS PROCESS*/
  end

  if (AE0L-PREV-OPTION == "A")
    if (converseVar.eventKey is enter)
      ABWREC.ABWSWR = "Y"; /* initialize switch to 'OFF'*/
    end
    if (AE0LW-INVALID-PFKEY == "Y")
      ABWREC.ABWSWR = "N"; /* initialize switch to 'OFF'*/
    end
    AE0LW00.AE0LWOPT = "A"; /* SET MAINTNEANCE SWITCH ON*/
    return; /* RETURN TO PREVIOUS PROCESS*/
  end

  AE0LW00.AE0LWOPT2 = " "; /* INITIALIZE OPTION SWITCH*/
  ABWREC.ABWIXM = 1;
  AE0LW-INDEX = 1;
  AE0LW-CHG-IDX = 1;
  AE0LW-TABLE-GRP = " "; /* INIT TABLE*/
  AE0LW-CHG-TABLE-GRP = " "; /* INIT TABLE*/

  while (ABWREC.ABWIXM <= AE0LW02.AE0LWIDX) /* UNTIL END OF LINES*/

    if (AE0LM001.AE0LMSEL[ABWIXM] > " ") /* TEST FOR SELECTION ENTRY*/
      if (AE0LM001.AE0LMSEL[ABWIXM] == "D") /* TEST FOR DELETE*/
        AE0LM001.AE0LMSEL[ABWIXM] = " "; /* RESET SELECTION*/
        AE0LW00.AE0LWOPT = "D"; /* SET DELETE SWITCH ON*/
        AE0LW-SCHEDULER[AE0LW-INDEX] = AE0LM001.AE0LMSCH[ABWIXM];
        AE0LW-CUST-ID[AE0LW-INDEX] = AE0LM001.AE0LMCUST-ID[ABWIXM];
        AE0LW-TBL-MAP-ROW[AE0LW-INDEX] = ABWIXM;
        AE0LW-INDEX = AE0LW-INDEX + 1; /* INCREMENT INDEX*/
      else
        converseLib.validationFailed(01); /* INDICATE ERROR MESSAGE*/
        ABWREC.ABWPRCSN = "154 "; /* PROCESS NUMBER*/
        return; /* RETURN TO PREVIOUS PROCESS*/
      end
    else
      if (AE0LM001.AE0LMSCH[ABWIXM] > " ") /* ENTRY ON SCREEN*/
        if (AE0LW02.PG-SCHED-SPCLT-CD[ABWIXM] == " ") /* NO ENTRY ON TSQ PAGE*/
          AE0LW00.AE0LWOPT = "A"; /* SET ADD SWITCH ON*/
        else
          if (AE0LM001.AE0LMSCH[ABWIXM] > " ") /* ENTRY ON SCREEN*/
            if (AE0LM001.AE0LMCUST-ID[ABWIXM] != 
            AE0LW02.PC-PRDCU-ID[ABWIXM]) /* NOT SAME AS TSQ PAGE*/
   /* MOVE TO CHG TABLE*/
              AE0LW-CHG-SCHEDULER[AE0LW-CHG-IDX] = AE0LM001.AE0LMSCH[ABWIXM];
              AE0LW-CHG-AFTER-CUST-ID[AE0LW-CHG-IDX] = AE0LM001.AE0LMCUST-ID[ABWIXM];
              AE0LW-CHG-BEFORE-CUST-ID[AE0LW-CHG-IDX] = AE0LW02.PC-PRDCU-ID[ABWIXM];
              AE0LW-MAP-ROW[AE0LW-CHG-IDX] = ABWIXM;
              AE0LW-CHG-IDX = AE0LW-CHG-IDX + 1;
              AE0LW00.AE0LWOPT2 = "C"; /* SET CHANGE SWITCH ON*/
            end
          end
        end
      end
    end
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1;
  end

  ABWREC.ABWSWR = "Y"; /* initialize switch to 'OFF'*/

   /* ====================== END OF PROCESS ======================*/

end // end AE0L152

// Verify any add data
Function AE0L153()
   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/

  if (AE0LM001.AE0LMSCH[ABWIXM] == " "
   && AE0LW02.USER-NAME[ABWIXM] == " ")
    return;
  end
  if (AE0LM001.AE0LMSCH[ABWIXM] > " "
   && AE0LM001.AE0LMCUST-ID[ABWIXM] == " ")
    AE0LW00.AE0LWNOU = AE0LW00.AE0LWNOU + 1;
    return;
  end
  if (AE0LM001.AE0LMCUST-ID[ABWIXM] == AE0LW02.PC-PRDCU-ID[ABWIXM])
    return;
  end
  if (AE0LM001.AE0LMCUST-ID[ABWIXM] > " ")
    AE0LW00.AE0LWNOU = AE0LW00.AE0LWNOU + 1;

     /* -------------------------------------------*/
     /* -- validate scheduler*/
     /* -------------------------------------------*/
    XP1REC.XXXUSER = AE0LM001.AE0LMSCH[ABWIXM];
    XP1REC.PG1SC4CD = " ";

    AE0L156(); /* Validate Scheduler cd*/

  end

end // end AE0L153

// validate scheduler
Function AE0L156()

  if (XP1REC.XXXUSER == "?") /* Pop-up window requested*/
    XP1REC.XXXUSER = " "; /* Space out save area*/
    set AE0LM001.AE0LMSCH[ABWIXM] cursor, bold; /* Highlight field*/
    converseLib.validationFailed(42); /* Indicate pop-up window not available*/
    ABWREC.ABWPRCSN = "53B "; /* Process number*/
    return; /* Return to calling process*/
  end



   /* *=====================================================**/
    /* Perform XPAB010 to retrieve row from DPRODG.VSUSER01*/
   /* *=====================================================**/


  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/

  XPAB010(); /* Validate userid and get scheduler cd*/



   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/

  if (XP1REC.XP1ERRFL == "1") /* IF Row not found*/
                  /* (Field in Error)*/
    XP1REC.XXXUSER = " "; /* Space out save area*/
    set AE0LM001.AE0LMSCH[ABWIXM] cursor, bold; /* Highlight field*/
    converseLib.validationFailed(21); /* Indicate error msg*/
    ABWREC.ABWPRCSN = "53B "; /* Process number*/

    return; /* Return to calling process*/

  else

    if (XP1REC.XP1ERRFL == "2") /* IF Resource not available*/

      converseLib.validationFailed(11); /* Indicate 'DATA BASE BUSY' error*/
      exit stack; /* Exit to redisplay map*/

    else

      if (XP1REC.XP1ERRFL == "3" /* Call not successful*/
       || XP1REC.XP1ERRFL == "4") /* or Unknown DB2 error found*/

        converseLib.validationFailed(10); /* Indicate unexpected error found*/
        exit stack; /* Exit to redisplay map*/

      else /* (ROW FOUND - OK)*/
        if (ABWREC.ABWFIRST == " ")
          AE0LW-SCHED-SPCLT-CD = PG1REC.PG1SC4CD;
  /* MOVE 'N' TO AE0LW-FIRST-TIME; /* set first time sw off*/
        else
          AE0LW02.PG-SCHED-SPCLT-CD[ABWIXM] = PG1REC.PG1SC4CD;
        end

      end

    end

  end



end // end AE0L156

Function AE0L160()
end // end AE0L160

// validate add entries
Function AE0L170()
   /* ------------------------------------------------------------*/
   /* copy map to internal table.*/
   /* clear the screen*/
   /* check for entry errors*/
   /* If any error, display error entry and error message.*/
   /* If no error, add to table.*/
   /* ------------------------------------------------------------*/
  AE0LW-TABLE-GRP = " ";
  AE0LW-CHG-TABLE-GRP = " ";
  ABWREC.ABWSWR = "N"; /* turn off data request flag*/
  AE0LW-INDEX = 1; /* initialize index*/
  ABWREC.ABWIXM = 1; /* initialize index*/
  while (ABWREC.ABWIXM <= 14) /* run through map*/
    if (AE0LMSCH[ABWIXM] > " ") /* check for map entry*/
      AE0LW-SCHEDULER[AE0LW-INDEX] = AE0LMSCH[ABWIXM]; /* move to tbl*/
      AE0LW-CUST-ID[AE0LW-INDEX] = AE0LMCUST-ID[ABWIXM];
      AE0LW-INDEX = AE0LW-INDEX + 1; /* increment index*/
    end
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1;
  end

  ABWREC.ABWIXM = 1; /* initialize index*/
  while (ABWREC.ABWIXM <= 14) /* run through map*/
    AE0LMSCH[ABWIXM] = " ";
    AE0LMCUST-ID[ABWIXM] = " "; /* clear out map*/
    AE0LM-COMMENTS[ABWIXM] = " ";
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1;
  end

  AE0LW-INDEX = 1; /* initialize index*/
  ABWREC.ABWIXM = 1; /* initialize index*/
  while (AE0LW-INDEX <= 14) /* run through WS table*/
    if (AE0LW-SCHEDULER[AE0LW-INDEX] > " ") /* check for table entry*/
      if (AE0LW-CUST-ID[AE0LW-INDEX] == " ")
        AE0LM-COMMENTS[ABWIXM] = "CUST ID REQUIRED";
        AE0LMSCH[ABWIXM] = AE0LW-SCHEDULER[AE0LW-INDEX];
        AE0LMCUST-ID[ABWIXM] = AE0LW-CUST-ID[AE0LW-INDEX];
        ABWIXM = ABWIXM + 1; /* increment map index*/
      else
        AE0LW-SCHED-ERROR = " "; /* initialize switch*/
        AE0L174(); /* verify scheduler code*/
        if (AE0LW-SCHED-ERROR == "Y") /* invalid scheduler code*/
          AE0LM-COMMENTS[ABWIXM] = "INVALID SCHEDULER";
          AE0LMSCH[ABWIXM] = AE0LW-SCHEDULER[AE0LW-INDEX];
          AE0LMCUST-ID[ABWIXM] = AE0LW-CUST-ID[AE0LW-INDEX];
          ABWIXM = ABWIXM + 1; /* increment map index*/
        else
          AE0LW-CUST-ERROR = " "; /* initialize switch*/
          XP1REC.XP1ERRFL = " "; /* init error flag*/
          AE0L175(); /* verify customer id*/
          AE0L176(); /* verify customer id*/
          if (AE0LW-CUST-ERROR == "Y") /* invalid customer xref*/
            AE0LM-COMMENTS[ABWIXM] = "INVALID CUSTOMER ID";
            AE0LMSCH[ABWIXM] = AE0LW-SCHEDULER[AE0LW-INDEX];
            AE0LMCUST-ID[ABWIXM] = AE0LW-CUST-ID[AE0LW-INDEX];
            ABWIXM = ABWIXM + 1; /* increment map index*/
          else
            VSCASN01.PG1SC4D = XP1REC.PG1SC4CD;
            VSCASN01.PC2CUXID = AE0LW-CUST-ID[AE0LW-INDEX];
            ABWREC.ABWSWC = " "; /* init switch*/
            AE0L172(); /* verify entry not on table*/
            if (ABWREC.ABWSWC == "Y") /* duplicate data*/
              AE0LMSCH[ABWIXM] = AE0LW-SCHEDULER[AE0LW-INDEX];
              AE0LMCUST-ID[ABWIXM] = AE0LW-CUST-ID[AE0LW-INDEX];
              AE0LM-COMMENTS[ABWIXM] = "ENTRY ALREADY ON TBL";
              ABWIXM = ABWIXM + 1; /* increment map index*/
            else
              AE0L197(); /* date and time*/
              AE0L173(); /* add table entry*/
            end
          end
        end
      end
    end
    AE0LW-INDEX = AE0LW-INDEX + 1; /* increment WS table index*/
  end


end // end AE0L170

// xpab010 clone for add sched
Function AE0L171()
   /* *************************************************************/
   /* *****                                                    ****/
   /* *****                  A E 0 L 1 7 1                     ****/
   /* *****                                                    ****/
   /* ***** This process will retrieve the two digit SCHEDULER ****/
   /* ***** CODE based on the scheduler code. The program      ****/
   /* ***** will return one of the following RETURN CODES:     ****/
   /* *****           ' ' ..... ROW FOUND,                     ****/
   /* *****           '1' ..... ROW NOT FOUND                  ****/
   /* *****           '2' ..... DATA BASE BUSY, SQLCODE = -911 ****/
   /* *****           '3' ..... CSP CALL TO IOMOD IN ERROR     ****/
   /* *****           '4' ..... UNKNOWN DB2 ERROR              ****/
   /* ***** The two digit scheduler code, If found, will be    ****/
   /* ***** returned in XP1REC.PG1SC4CD.                       ****/
   /* ***** This process executes all error handling required. ****/
   /* *************************************************************/

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key.*/
   /* ------------------------------------------------------------*/

  set PG1REC empty; /* Clear row storage area*/

  PG1REC.XGPCD = "03"; /* Indicate 'APPAREL' GPC code*/
  PG1REC.PG1SC4CD = "**"; /* Indicate 'GET SCHEDULER CODE'*/
  PG1REC.PG1FCTCD = " "; /* FORECASTER CD must be blank*/
  PG1REC.XXXUSER = AE0LW-SCHEDULER[AE0LW-INDEX];

   /* ------------------------------------------------------------*/
   /* CALL IOMOD to retrieve row from DPRODG.VSUSER01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* CHECK CSP and DB2 return codes to see if CALL executed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000") /* If CALL not sucessful*/
    XP1ERRFL = "3"; /* Indicate 'BAD CALL' error*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
  else /* ELSE (CALL to IOMOD, OKAY)*/
    if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
      XP1ERRFL = "1"; /* Indicate 'NOT FOUND' error*/
      return; /* Return to 'CALLING' Process*/

      /* ***** EXIT PROCESS HERE ******/

    else /* ELSE (SQLCODE not = +100)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
        XP1REC.XP1ERRFL = "2";
                                   /* Indicate 'DATA BASE BUSY' error*/
        TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
      else /* ELSE*/
        if (SQLCA.VAGen_SQLCODE != 0) /* IF Unknown DB2 Error occured*/
          XP1REC.XP1ERRFL = "4";
                                   /* Indicate 'UNKNOWN ERROR' error*/
          TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
        else /* ELSE ( SQLCODE = 0, OKAY ! )*/
          XP1REC.PG1SC4CD = PG1REC.PG1SC4CD; /* Move Value to XP1REC.*/
          return; /* Return to 'CALLING' Process*/

          /* ***** EXIT PROCESS HERE ******/

        end /* END of "IF" statement*/
      end /* END of "IF" statement*/
    end /* END of "IF" statement*/
  end /* END of "IF" statement*/

   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/

  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "XPAB010"; /* Process name*/
  TA1REC.TA1LOC = "SELECT PG1SC4CD FROM SIGNON";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = XP1REC.XXXUSER; /* MOVE SIGNON to ERROR-DIAG*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Return to previous process*/



end // end AE0L171

// validate for duplicate entry
Function AE0L172()
   /* ------------------------------------------------------------*/
   /* make table inquiry.*/
   /* If any error, display error entry and error message.*/
   /* ------------------------------------------------------------*/

  try
    call "VSCASN01" ("S ", SQLCA, VSCASN01) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/
   /* ****************************************************/

  if (SQLCA.VAGen_SQLCODE == 100 /* No duplicate row found*/
  )                             
    return; /* Return to previous process*/

  end

  if (SQLCA.VAGen_SQLCODE == 0 /* Duplicate row found*/
  )                           
    ABWREC.ABWSWC = "Y"; /* Indicate duplicate record*/

    return; /* Return to previous process*/

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    ABWREC.ABWPRCSN = "172 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "VERIFY ADD DATA";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSCASN01"; /* Table view name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag. routine*/

    AE0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    return; /* Return to previous process*/

  end
  AE0LW02.AE0LWIDX = AE0LW02.AE0LWIDX + 1; /* Increment line index*/
   /* Save data to display*/
  AE0LW02.USER-NAME[AE0LWIDX] = XP1REC.XXXUSER;
  AE0LW02.PG-SCHED-SPCLT-CD[AE0LWIDX] = VSCASN01.PG1SC4D;
  AE0LW02.PC-PRDCU-ID[AE0LWIDX] = VSCASN01.PC2CUXID;
  AE0LW02.ZZ-CHNG-CNT[AE0LWIDX] = VSCASN01.ZZZCHGCT;


end // end AE0L172

// add entries to sched/cust tbl
Function AE0L173()
   /* ------------------------------------------------------------*/
   /* Add table entry.*/
   /* If any error, display error entry and error message.*/
   /* ------------------------------------------------------------*/


  try
    call "VSCASN01" ("A ", SQLCA, VSCASN01) {isNoRefresh = yes, isExternal = yes};
  end /* add row*/
   /* ****************************************************/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    ABWREC.ABWPRCSN = "173 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "ADD TABLE ENTRY";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSCASN01"; /* Table view name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag. routine*/

    AE0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    return; /* Return to previous process*/

  end


end // end AE0L173

// validate scheduler for add
Function AE0L174()

  XP1REC.XP1ERRFL = " ";
  AE0L171(); /* Get scheduler code*/

   /* check results*/

  if (XP1REC.XP1ERRFL == "1") /* If row not found*/
    AE0LW-SCHED-ERROR = "Y"; /* Scheduler error*/
    XP1REC.XXXUSER = " "; /* Space out save area*/
    return; /* Return to calling process*/
  else
    if (XP1REC.XP1ERRFL == "2") /* If resource not available*/
      converseLib.validationFailed(11); /* Indicate 'database busy' err*/
      exit stack; /* Exit to redisplay map*/
    else
      if (XP1REC.XP1ERRFL == "3" /* Call not successful*/
       || XP1REC.XP1ERRFL == "4") /* or unknown db2 error found*/
        converseLib.validationFailed(10); /* Indicate unexpected error*/
        exit stack; /* Exit to redisplay map*/
      end
    end
  end

end // end AE0L174

// xpab010 clone for add cust id
Function AE0L175()
   /* *************************************************************/
   /* *****                                                    ****/
   /* *****                  A E 0 L 1 7 5                     ****/
   /* *****                                                    ****/
   /* ***** This process will validate the customer x-ref      ****/
   /* *************************************************************/

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key.*/
   /* ------------------------------------------------------------*/

  set PG1REC empty; /* Clear row storage area*/

  PC2REC.XGPCD = "03"; /* Indicate 'APPAREL' GPC code*/
  PC2REC.PC2CUXID = AE0LW-CUST-ID[AE0LW-INDEX];

   /* ------------------------------------------------------------*/
   /* CALL IOMOD to retrieve row from DPRODG.VPRDCU01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* CHECK CSP and DB2 return codes to see if CALL executed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000") /* If CALL not sucessful*/
    XP1ERRFL = "3"; /* Indicate 'BAD CALL' error*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
  else /* ELSE (CALL to IOMOD, OKAY)*/
    if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
      XP1ERRFL = "1"; /* Indicate 'NOT FOUND' error*/
      return; /* Return to 'CALLING' Process*/

      /* ***** EXIT PROCESS HERE ******/

    else /* ELSE (SQLCODE not = +100)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
        XP1REC.XP1ERRFL = "2";
                                   /* Indicate 'DATA BASE BUSY' error*/
        TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
      else /* ELSE*/
        if (SQLCA.VAGen_SQLCODE != 0) /* IF Unknown DB2 Error occured*/
          XP1REC.XP1ERRFL = "4";
                                   /* Indicate 'UNKNOWN ERROR' error*/
          TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
        else /* ELSE ( SQLCODE = 0, OKAY ! )*/
          return; /* Return to 'CALLING' Process*/

          /* ***** EXIT PROCESS HERE ******/

        end /* END of "IF" statement*/
      end /* END of "IF" statement*/
    end /* END of "IF" statement*/
  end /* END of "IF" statement*/

   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/

  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "XPAB010"; /* Process name*/
  TA1REC.TA1LOC = "SELECT CUSTOMER ID";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = XP1REC.XXXUSER; /* MOVE SIGNON to ERROR-DIAG*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Return to previous process*/



end // end AE0L175

// validate cust id for add
Function AE0L176()

   /* check results*/

  if (XP1REC.XP1ERRFL == "1") /* If row not found*/
    AE0LW-CUST-ERROR = "Y"; /* Scheduler error*/
    return; /* Return to calling process*/
  else
    if (XP1REC.XP1ERRFL == "2") /* If resource not available*/
      converseLib.validationFailed(11); /* Indicate 'database busy' err*/
      exit stack; /* Exit to redisplay map*/
    else
      if (XP1REC.XP1ERRFL == "3" /* Call not successful*/
       || XP1REC.XP1ERRFL == "4") /* or unknown db2 error found*/
        converseLib.validationFailed(10); /* Indicate unexpected error*/
        exit stack; /* Exit to redisplay map*/
      end
    end
  end

end // end AE0L176

// verify for delete
Function AE0L180()
   /* ------------------------------------------------------------*/
   /* Set counter to highest table entry.*/
   /* Scan through the table entries.*/
   /* Perform delete for each table entry.*/
   /* ------------------------------------------------------------*/
  AE0LW-INDEX = AE0LW-INDEX - 1; /* set to number of delete entrys*/
  ABWREC.ABWIXM = AE0LW-INDEX; /**/
  AE0LW-INDEX = 1; /* initialize index*/
  AE0LW-MAP-INDEX = 1; /* initialize index*/

  while (AE0LW-INDEX <= ABWREC.ABWIXM) /* run through table*/
    AE0LW-SCHED-NOT-FND-SW = " ";
    AE0L171(); /* get scheduler code*/
    VSCASN01.PG1SC4D = XP1REC.PG1SC4CD;
    VSCASN01.PC2CUXID = AE0LW-CUST-ID[AE0LW-INDEX];
    AE0L182(); /* verify row is in tbl*/
    if (AE0LW-SCHED-NOT-FND-SW == "Y")
      AE0LW-MAP-INDEX = AE0LW-TBL-MAP-ROW[AE0LW-INDEX];
      AE0LM-COMMENTS[AE0LW-MAP-INDEX] = "ENTRY NOT ON TABLE";
    else
      AE0L181(); /* DELETE ROW*/
    end
    AE0LW-INDEX = AE0LW-INDEX + 1; /* increment index*/
  end

  AE0LW-INDEX = 1; /* initialize index*/

  while (AE0LW-INDEX <= 14) /* run through table*/
    set AE0LM001.AE0LM-COMMENTS[AE0LW-INDEX] protect;
    set AE0LM001.AE0LMSCH[AE0LW-INDEX] protect;
    AE0LW-INDEX = AE0LW-INDEX + 1; /* increment index*/
  end

end // end AE0L180

// delete table entry
Function AE0L181()
   /* ------------------------------------------------------------*/
   /* delete table entry.*/
   /* If any error, display error entry and error message.*/
   /* ------------------------------------------------------------*/


  try
    call "VSCASN01" ("D ", SQLCA, VSCASN01) {isNoRefresh = yes, isExternal = yes};
  end /* add row*/
   /* ****************************************************/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    ABWREC.ABWPRCSN = "181 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "DELETE TABLE ENTRY";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSCASN01"; /* Table view name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag. routine*/

    AE0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    return; /* Return to previous process*/

  else
    AE0LW-ENTRY-DELETED = "Y";
  end


end // end AE0L181

// check for duplicate tbl entry
Function AE0L182()
   /* ------------------------------------------------------------*/
   /* retrieve table entry.*/
   /* If any error, display error entry and error message.*/
   /* ------------------------------------------------------------*/


  try
    call "VSCASN01" ("S ", SQLCA, VSCASN01) {isNoRefresh = yes, isExternal = yes};
  end /* add row*/
   /* ****************************************************/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == +100) /* Resource not found*/
      AE0LW-SCHED-NOT-FND-SW = "Y";

    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/

      else

        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/

        converseLib.clearScreen();
         /* Clear screen before redisplay*/

      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      ABWREC.ABWPRCSN = "182 "; /* Process number*/
      TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
      TA1REC.TA1LOC = "VERIFY TABLE ENTRY";
      TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
      TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSCASN01"; /* Table view name*/

      try
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      end /* Error diag. routine*/

      AE0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

      return; /* Return to previous process*/

    end


  end


end // end AE0L182

// verify for update
Function AE0L190()
   /* ------------------------------------------------------------*/
   /* Set counter to highest table entry.*/
   /* Scan through the table entries.*/
   /* Perform UPDATE for each table entry.*/
   /* ------------------------------------------------------------*/
  AE0LW-CHG-IDX = AE0LW-CHG-IDX - 1; /* set nbr of CHG entrys*/
  move AE0LW-CHG-IDX to AE0LW-CHG-TBL-MAX withV60Compat;
  AE0LW-CHG-IDX = 1; /* initialize index*/

  while (AE0LW-CHG-IDX <= AE0LW-CHG-TBL-MAX) /* run through table*/
    AE0L192(); /* GET SCHEDULER CODE*/

    AE0LW-DUP-RCD-SW = " ";
    VSCASN01.PC2CUXID = AE0LW-CHG-AFTER-CUST-ID[AE0LW-CHG-IDX];
    VSCASN01.PG1SC4D = XP1REC.PG1SC4CD;

    AE0L193(); /* verify new xref not on tbl*/

    if (AE0LW-DUP-RCD-SW == "Y") /* duplicate rcd on tbl*/
      AE0LW-MAP-INDEX = AE0LW-MAP-ROW[AE0LW-CHG-IDX];
      AE0LM-COMMENTS[AE0LW-MAP-INDEX] = "DUPLICATE XREF ON TBL";
    else

      VSCASN01.PC2CUXID = AE0LW-CHG-BEFORE-CUST-ID[AE0LW-CHG-IDX];

      AE0L181(); /* DELETE ROW*/

      VSCASN01.PG1SC4D = XP1REC.PG1SC4CD;
      VSCASN01.PC2CUXID = AE0LW-CHG-AFTER-CUST-ID[AE0LW-CHG-IDX];

      AE0L197(); /* DATE AND TIME*/

      AE0L173(); /* ADD ROW*/

      AE0LW-MAP-INDEX = AE0LW-MAP-ROW[AE0LW-CHG-IDX];
      AE0LMCUST-ID[AE0LW-MAP-INDEX] = AE0LW-CHG-AFTER-CUST-ID[AE0LW-CHG-IDX]; /* update map*/
      AE0LW02.PC-PRDCU-ID[AE0LW-MAP-INDEX] = AE0LW-CHG-AFTER-CUST-ID[AE0LW-CHG-IDX];

      AE0L195(); /* update temp store queue*/

    end
    AE0LW-CHG-IDX = AE0LW-CHG-IDX + 1;
  end

  AE0LW-INDEX = 1; /* initialize index*/

  while (AE0LW-INDEX <= 14) /* run through table*/
    set AE0LM001.AE0LM-COMMENTS[AE0LW-INDEX] protect;
    set AE0LM001.AE0LMSCH[AE0LW-INDEX] protect;
    AE0LW-INDEX = AE0LW-INDEX + 1;
  end

end // end AE0L190

// xpab010 clone for update sched
Function AE0L192()
   /* *************************************************************/
   /* *****                                                    ****/
   /* *****                  A E 0 L 1 9 2                     ****/
   /* *****                                                    ****/
   /* ***** This process will retrieve the two digit SCHEDULER ****/
   /* ***** CODE based on the scheduler code. The program      ****/
   /* ***** will return one of the following RETURN CODES:     ****/
   /* *****           ' ' ..... ROW FOUND,                     ****/
   /* *****           '1' ..... ROW NOT FOUND                  ****/
   /* *****           '2' ..... DATA BASE BUSY, SQLCODE = -911 ****/
   /* *****           '3' ..... CSP CALL TO IOMOD IN ERROR     ****/
   /* *****           '4' ..... UNKNOWN DB2 ERROR              ****/
   /* ***** The two digit scheduler code, If found, will be    ****/
   /* ***** returned in XP1REC.PG1SC4CD.                       ****/
   /* ***** This process executes all error handling required. ****/
   /* *************************************************************/

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key.*/
   /* ------------------------------------------------------------*/

  set PG1REC empty; /* Clear row storage area*/

  PG1REC.XGPCD = "03"; /* Indicate 'APPAREL' GPC code*/
  PG1REC.PG1SC4CD = "**"; /* FORECASTER CD must be blank*/
  PG1REC.PG1FCTCD = " "; /* FORECASTER CD must be blank*/
  PG1REC.XXXUSER = AE0LW-CHG-SCHEDULER[AE0LW-CHG-IDX];

   /* ------------------------------------------------------------*/
   /* CALL IOMOD to retrieve row from DPRODG.VSUSER01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* CHECK CSP and DB2 return codes to see if CALL executed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000") /* If CALL not sucessful*/
    XP1ERRFL = "3"; /* Indicate 'BAD CALL' error*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
  else /* ELSE (CALL to IOMOD, OKAY)*/
    if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
      XP1ERRFL = "1"; /* Indicate 'NOT FOUND' error*/
      return; /* Return to 'CALLING' Process*/

      /* ***** EXIT PROCESS HERE ******/

    else /* ELSE (SQLCODE not = +100)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
        XP1REC.XP1ERRFL = "2";
                                   /* Indicate 'DATA BASE BUSY' error*/
        TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
      else /* ELSE*/
        if (SQLCA.VAGen_SQLCODE != 0) /* IF Unknown DB2 Error occured*/
          XP1REC.XP1ERRFL = "4";
                                   /* Indicate 'UNKNOWN ERROR' error*/
          TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
        else /* ELSE ( SQLCODE = 0, OKAY ! )*/
          XP1REC.PG1SC4CD = PG1REC.PG1SC4CD; /* Move Value to XP1REC.*/
          return; /* Return to 'CALLING' Process*/

          /* ***** EXIT PROCESS HERE ******/

        end /* END of "IF" statement*/
      end /* END of "IF" statement*/
    end /* END of "IF" statement*/
  end /* END of "IF" statement*/

   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/

  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "XPAB010"; /* Process name*/
  TA1REC.TA1LOC = "SELECT PG1SC4CD FROM SIGNON";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = XP1REC.XXXUSER; /* MOVE SIGNON to ERROR-DIAG*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Return to previous process*/



end // end AE0L192

// check for duplicate tbl entry
Function AE0L193()
   /* ------------------------------------------------------------*/
   /* retrieve table entry.*/
   /* If any error, display error entry and error message.*/
   /* ------------------------------------------------------------*/


  try
    call "VSCASN01" ("S ", SQLCA, VSCASN01) {isNoRefresh = yes, isExternal = yes};
  end /* add row*/
   /* ****************************************************/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == +100) /* Resource not found*/

    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/

      else

        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/

        converseLib.clearScreen();
         /* Clear screen before redisplay*/

      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      ABWREC.ABWPRCSN = "173 "; /* Process number*/
      TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
      TA1REC.TA1LOC = "ADD TABLE ENTRY";
      TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
      TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSCASN01"; /* Table view name*/

      try
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      end /* Error diag. routine*/

      AE0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

      return; /* Return to previous process*/

    end

  else

    AE0LW-DUP-RCD-SW = "Y";

  end


end // end AE0L193

// update temp stor queue page
Function AE0L195()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  AE0LW02.AE0LWLEN = ABWREC.ABWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = ABWREC.ABWAPPL; /* Application identification*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (AE0LW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                    /* ;subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ABWREC.ABWPRCSN = "195 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "UPDATE TEMP STOR QUE PAGE";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag. routine*/

    AE0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end


end // end AE0L195

// format date and time
Function AE0L197()
   /* ------------------------------------------------------------*/
   /* Set date, time, and change counter.*/
   /* ------------------------------------------------------------*/
  AE0LW-WORK-DATE-1 = VGVar.currentShortGregorianDate;
  move AE0LW-WD1-YY to AE0LW-WD2-YY withV60Compat;
  move AE0LW-WD1-MM to AE0LW-WD2-MM withV60Compat;
  move AE0LW-WD1-DD to AE0LW-WD2-DD withV60Compat;
  move AE0LW-WORK-DATE-1 to AE0LW-WORK-DATE-2 withV60Compat; /**/

  if (AE0LW-WD1-YY < 100
   && AE0LW-WD1-YY > 96)
    AE0LW-WD2-CC = 19;
  else
    AE0LW-WD2-CC = 20;
  end

  move AE0LW-WORK-DATE-1 to AE0LW-WORK-DATE-2 withV60Compat; /* to ccyymmdd char*/
  move AE0LW-WORK-DATE-2 to AE0LW-WORK-DATE-3 withV60Compat; /* char to num*/
  move AE0LW-WORK-DATE-3 to AE0LW-WORK-DATE-4 withV60Compat; /* num to binary*/
  VSCASN01.ZZZCHGDT = AE0LW-WORK-DATE-4;
  AE0LW-CHG-CNT-1 = 0; /* numeric*/
  move AE0LW-CHG-CNT-1 to AE0LW-CHG-CNT-2 withV60Compat; /* to binary*/
  VSCASN01.ZZZCHGCT = AE0LW-CHG-CNT-2; /* to table*/

  AE0LW-CHG-TIME-1 = VGVar.currentFormattedTime;
  move AE0LW-CT1-HH to AE0LW-CT2-HH withV60Compat;
  move AE0LW-CT1-MM to AE0LW-CT2-MM withV60Compat;
  move AE0LW-CHG-TIME-2 to AE0LW-CHG-TIME-6 withV60Compat; /* to numeric*/
  move AE0LW-CHG-TIME-6 to AE0LW-CHG-TIME-4 withV60Compat; /* to binary*/
  VSCASN01.ZZZCHGTM = AE0LW-CHG-TIME-4; /* to table*/

end // end AE0L197

// xpab010 clone for add sched
Function AE0L200()
   /* *************************************************************/
   /* *****                                                    ****/
   /* *****                  A E 0 L 2 0 0                     ****/
   /* *****                                                    ****/
   /* ***** This process will retrieve the two digit SCHEDULER ****/
   /* ***** CODE based on the scheduler code. The program      ****/
   /* ***** will return one of the following RETURN CODES:     ****/
   /* *****           ' ' ..... ROW FOUND,                     ****/
   /* *****           '1' ..... ROW NOT FOUND                  ****/
   /* *****           '2' ..... DATA BASE BUSY, SQLCODE = -911 ****/
   /* *****           '3' ..... CSP CALL TO IOMOD IN ERROR     ****/
   /* *****           '4' ..... UNKNOWN DB2 ERROR              ****/
   /* ***** The two digit scheduler code, If found, will be    ****/
   /* ***** returned in XP1REC.PG1SC4CD.                       ****/
   /* ***** This process executes all error handling required. ****/
   /* *************************************************************/

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key.*/
   /* ------------------------------------------------------------*/

  set PG1REC empty; /* Clear row storage area*/
  XP1ERRFL = "0"; /* Indicate 'BAD CALL' error*/

  PG1REC.XGPCD = "03"; /* Indicate 'APPAREL' GPC code*/
  PG1REC.PG1SC4CD = "**"; /* Indicate 'GET SCHEDULER CODE'*/
  PG1REC.PG1FCTCD = " "; /* FORECASTER CD must be blank*/
  PG1REC.XXXUSER = AE0LM-SCHED-CODE;

   /* ------------------------------------------------------------*/
   /* CALL IOMOD to retrieve row from DPRODG.VSUSER01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* CHECK CSP and DB2 return codes to see if CALL executed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000") /* If CALL not sucessful*/
    XP1ERRFL = "3"; /* Indicate 'BAD CALL' error*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
  else /* ELSE (CALL to IOMOD, OKAY)*/
    if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
      XP1ERRFL = "1"; /* Indicate 'NOT FOUND' error*/
      return; /* Return to 'CALLING' Process*/

      /* ***** EXIT PROCESS HERE ******/

    else /* ELSE (SQLCODE not = +100)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
        XP1REC.XP1ERRFL = "2";
                                   /* Indicate 'DATA BASE BUSY' error*/
        TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
      else /* ELSE*/
        if (SQLCA.VAGen_SQLCODE != 0) /* IF Unknown DB2 Error occured*/
          XP1REC.XP1ERRFL = "4";
                                   /* Indicate 'UNKNOWN ERROR' error*/
          TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
        else /* ELSE ( SQLCODE = 0, OKAY ! )*/
          XP1REC.PG1SC4CD = PG1REC.PG1SC4CD; /* Move Value to XP1REC.*/
          return; /* Return to 'CALLING' Process*/

          /* ***** EXIT PROCESS HERE ******/

        end /* END of "IF" statement*/
      end /* END of "IF" statement*/
    end /* END of "IF" statement*/
  end /* END of "IF" statement*/

   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/

  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "XPAB010"; /* Process name*/
  TA1REC.TA1LOC = "SELECT PG1SC4CD FROM SIGNON";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = XP1REC.XXXUSER; /* MOVE SIGNON to ERROR-DIAG*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Return to previous process*/



end // end AE0L200

// validate scheduler for add
Function AE0L201()

   /* check results*/

  if (XP1REC.XP1ERRFL == "1") /* If row not found*/
    converseLib.validationFailed(20); /* Invalid user*/
    XP1REC.XXXUSER = " "; /* Space out save area*/
    exit stack; /* Return to calling process*/
  else
    if (XP1REC.XP1ERRFL == "2") /* If resource not available*/
      converseLib.validationFailed(11); /* Indicate 'database busy' err*/
      exit stack; /* Exit to redisplay map*/
    else
      if (XP1REC.XP1ERRFL == "3" /* Call not successful*/
       || XP1REC.XP1ERRFL == "4") /* or unknown db2 error found*/
        converseLib.validationFailed(10); /* Indicate unexpected error*/
        exit stack; /* Exit to redisplay map*/
      end
    end
  end

end // end AE0L201

// validate scheduler
Function AE0L210()

  if (XP1REC.XXXUSER == "?") /* Pop-up window requested*/
    XP1REC.XXXUSER = " "; /* Space out save area*/
    set AE0LM001.AE0LM-SCHED-CODE cursor, bold; /* Highlight field*/
    converseLib.validationFailed(42); /* Indicate pop-up window not available*/
    ABWREC.ABWPRCSN = "53B "; /* Process number*/
    return; /* Return to calling process*/
  end



   /* *=====================================================**/
    /* Perform XPAB010 to retrieve row from DPRODG.VSUSER01*/
   /* *=====================================================**/


  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/

  XPAB010(); /* Validate userid and get scheduler cd*/



   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/

  if (XP1REC.XP1ERRFL == "1") /* IF Row not found*/
                  /* (Field in Error)*/
    XP1REC.XXXUSER = " "; /* Space out save area*/
    set AE0LM001.AE0LM-SCHED-CODE cursor, bold; /* Highlight field*/
    converseLib.validationFailed(21); /* Indicate error msg*/
    ABWREC.ABWPRCSN = "53B "; /* Process number*/

    return; /* Return to calling process*/

  else

    if (XP1REC.XP1ERRFL == "2") /* IF Resource not available*/

      converseLib.validationFailed(11); /* Indicate 'DATA BASE BUSY' error*/
      exit stack; /* Exit to redisplay map*/

    else

      if (XP1REC.XP1ERRFL == "3" /* Call not successful*/
       || XP1REC.XP1ERRFL == "4") /* or Unknown DB2 error found*/

        converseLib.validationFailed(10); /* Indicate unexpected error found*/
        exit stack; /* Exit to redisplay map*/

      else /* (ROW FOUND - OK)*/
        if (ABWREC.ABWFIRST == " ")
          AE0LW-SCHED-SPCLT-CD = PG1REC.PG1SC4CD;
        else
          AE0LW02.PG-SCHED-SPCLT-CD[ABWIXM] = PG1REC.PG1SC4CD;
        end

      end

    end

  end



end // end AE0L210

// fetch next table entry
Function AE0L215()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  try
    call "VSCASN01" ("N1", SQLCA, VSCASN01) {isNoRefresh = yes, isExternal = yes};
  end /* Ftch next row*/
   /* ****************************************************/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

    if (AE0LW02.AE0LWIDX == 0)
      ABWREC.ABWSWC = "Y"; /* Indicate end of file*/
      set AE0LM001 initial; /* reset map*/
      converseLib.validationFailed(21); /* Indicate invalid scheduler*/
      set AE0LM-SCHED-CODE cursor; /* move cursor to scheduler*/
      ABWREC.ABWFIRST = "N";
    else
      ABWREC.ABWSWC = "Y"; /* Indicate end of file*/
    end
    return; /* Return to previous process*/

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    ABWREC.ABWPRCSN = "113 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSCASN01"; /* Table view name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag. routine*/

    AE0LM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    return; /* Return to previous process*/

  end
  AE0LW02.AE0LWIDX = AE0LW02.AE0LWIDX + 1; /* Increment line index*/
   /* Save data to display*/
  AE0LW02.USER-NAME[AE0LWIDX] = AE0LW-HOLD-USER-NAME;
  AE0LW02.PG-SCHED-SPCLT-CD[AE0LWIDX] = VSCASN01.PG1SC4D;
  AE0LW02.PC-PRDCU-ID[AE0LWIDX] = VSCASN01.PC2CUXID;
  AE0LW02.ZZ-CHNG-CNT[AE0LWIDX] = VSCASN01.ZZZCHGCT;


end // end AE0L215

//*** RECORD=AE0LW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record AE0LW00 type basicRecord
  10 AE0LWACT AE0LWACT ; 
  10 AE0LWBEG AE0LWBEG ; 
  10 AE0LWMAX AE0LWMAX ; 
  10 AE0LWMNO AE0LWMNO ; 
  10 AE0LWNOU AE0LWNOU ; 
  10 AE0LWOPT AE0LWOPT ; 
  10 AE0LWOPT2 AE0LWOPT2 ; 
  10 AE0L-PREV-OPTION AE0L-PREV-OPTION ; 
  10 AE0LWNXT AE0LWNXT ; 
  10 AE0LWSZA AE0LWSZA ; 
  10 AE0LWSZM AE0LWSZM ; 
  10 AE0LW-ENTRY-DELETED AE0LW-ENTRY-DELETED ; 
  10 AE0LW-INVALID-PFKEY AE0LW-INVALID-PFKEY ; 
  10 AE0LW-INDEX AE0LW-INDEX ; 
  10 AE0LW-MAP-INDEX AE0LW-MAP-INDEX ; 
  10 AE0LW-CHG-IDX AE0LW-CHG-IDX ; 
  10 AE0LW-CHG-TBL-MAX AE0LW-CHG-TBL-MAX ; 
  10 AE0LW-START AE0LW-START ; 
  10 AE0LW-FIRST-TIME char(1) ; // first time thru indicator
  10 AE0LW-GENERIC-FETCH-SW char(1) ; // first time thru indicator
  10 AE0LW-PREV-ADD-SCRN char(1) ; // first time thru indicator
  10 AE0LW-SCHED-NOT-FND-SW char(1) ; // first time thru indicator
  10 AE0LW-NO-CHG-SW char(1) ; // first time thru indicator
  10 AE0LW-DUP-RCD-SW char(1) ; // first time thru indicator
  10 AE0LW-SCHED-ERROR char(1) ; // first time thru indicator
  10 AE0LW-CUST-ERROR char(1) ; // first time thru indicator
  10 AE0LWSMG AE0LWSMG ; 
  10 AE0LWSCH AE0LWSCH ; 
  10 AE0LW-SCHED-SPCLT-CD AE0LW-SCHED-SPCLT-CD ; 
  10 AE0LW-TABLE-GRP char(252) ; // pg1sc4cd
    15 AE0LW-SCHEDULER char(8) [14] ; // pg1sc4cd
    15 AE0LW-CUST-ID char(8) [14] ; // pg1sc4cd
    15 AE0LW-TBL-MAP-ROW num(2) [14] ; // pg1sc4cd
  10 AE0LW-WORK-DATE-1 AE0LW-WORK-DATE-1 ; 
    15 AE0LW-WD1-YY AE0LW-WD1-YY ; 
    15 AE0LW-WD1-MM AE0LW-WD1-MM ; 
    15 AE0LW-WD1-DD AE0LW-WD1-DD ; 
  10 AE0LW-WORK-DATE-2 AE0LW-WORK-DATE-2 ; 
    15 AE0LW-WD2-CC AE0LW-WD2-CC ; 
    15 AE0LW-WD2-YY AE0LW-WD2-YY ; 
    15 AE0LW-WD2-MM AE0LW-WD2-MM ; 
    15 AE0LW-WD2-DD AE0LW-WD2-DD ; 
  10 AE0LW-WORK-DATE-3 AE0LW-WORK-DATE-3 ; 
  10 AE0LW-WORK-DATE-4 AE0LW-WORK-DATE-4 ; 
  10 AE0LW-CHG-TIME-1 AE0LW-CHG-TIME-1 ; 
    15 AE0LW-CT1-HH AE0LW-CT1-HH ; 
    15 AE0LW-CT1-FIL1 AE0LW-CT1-FIL1 ; 
    15 AE0LW-CT1-MM AE0LW-CT1-MM ; 
    15 AE0LW-CT1-FIL2 AE0LW-CT1-FIL2 ; 
    15 AE0LW-CT1-SS AE0LW-CT1-SS ; 
  10 AE0LW-CHG-TIME-2 AE0LW-CHG-TIME-2 ; 
    15 AE0LW-CT2-HH AE0LW-CT2-HH ; 
    15 AE0LW-CT2-MM AE0LW-CT2-MM ; 
  10 AE0LW-CHG-TIME-6 num(4) ; 
  10 AE0LW-CHG-TIME-4 smallint ; 
  10 AE0LW-CHG-CNT-1 AE0LW-CHG-CNT-1 ; 
  10 AE0LW-CHG-CNT-2 AE0LW-CHG-CNT-2 ; 
  10 AE0LW-CHG-TABLE-GRP char(364) ; // pg1sc4cd
    15 AE0LW-CHG-SCHEDULER char(8) [14] ; // pg1sc4cd
    15 AE0LW-CHG-BEFORE-CUST-ID char(8) [14] ; // pg1sc4cd
    15 AE0LW-CHG-AFTER-CUST-ID char(8) [14] ; // pg1sc4cd
    15 AE0LW-MAP-ROW num(2) [14] ; // pg1sc4cd
  10 AE0LW-HOLD-USER-NAME char(8) ; // pg1sc4cd
  10 AE0LW-NEW-SCHED-CODE char(2) ; // pg1sc4cd
end // end AE0LW00

//*** RECORD=AE0LW02 ****
// Temporary storage record for AE0A - Scheduler/Country table
// ***********************
Record AE0LW02 type basicRecord
  5 * char(258) ; 
    10 AE0LWLEN AE0LWLEN ; 
    10 AE0LWIDX AE0LWIDX ; 
    10 * char(18) [14] ; 
      15 AE0LWKEY AE0LWKEY ; 
        20 PG-SCHED-SPCLT-CD PG-SCHED-SPCLT-CD ; 
        20 PC-PRDCU-ID PC-PRDCU-ID ; 
      15 AE0LWATT AE0LWATT ; 
      15 USER-NAME USER-NAME ; 
      15 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end AE0LW02

//*** RECORD=VSCASN01 ****
// ******************** saved forecast ************************
// 
// DB2 TABLE:           DABUY.VSCASN01
// 
// COPYLIB MEMBER:      VSCASN01
// 
// I/O MOD:             VSCASN01
// 
// KEY TO DB2 TABLE:    PG1SC4D
// 
// DATE CREATED:        01/97
// 
// MAINTENANCE LOG:
// 
//   DATE    USERID     COMMENT
// --------  ------     ---------------------------------------
// ??-??      ?????     ????????????????????????????
// ************************
Record VSCASN01 type basicRecord
  5 VSCASN01-GROUP VSCASN01-GROUP ; 
    10 PG1SC4D PG1SC4D ; 
    10 PC2CUXID PC2CUXID ; 
    10 XPL-PROD-LN-CD XPL-PROD-LN-CD ; 
    10 SY-STY-NBR SY-STY-NBR ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VSCASN01

// option requested
DataItem AE0L-PREV-OPTION char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AE0LW-CHG-CNT-1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0LW-CHG-CNT-2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// af0n map array size
DataItem AE0LW-CHG-IDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// af0n map array size
DataItem AE0LW-CHG-TBL-MAX num(2)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

DataItem AE0LW-CHG-TIME-1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AE0LW-CHG-TIME-2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0LW-CT1-FIL1 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0LW-CT1-FIL2 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0LW-CT1-HH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0LW-CT1-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0LW-CT1-SS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0LW-CT2-HH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0LW-CT2-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// af0n map array size
DataItem AE0LW-ENTRY-DELETED char(1)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// af0n map array size
DataItem AE0LW-INDEX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// af0n map array size
DataItem AE0LW-INVALID-PFKEY char(1)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// af0n map array size
DataItem AE0LW-MAP-INDEX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pg1sc4cd
DataItem AE0LW-SCHED-SPCLT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time thru indicator
DataItem AE0LW-START char(4)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

DataItem AE0LW-WD1-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0LW-WD1-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0LW-WD1-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0LW-WD2-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0LW-WD2-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0LW-WD2-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0LW-WD2-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0LW-WORK-DATE-1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AE0LW-WORK-DATE-2 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AE0LW-WORK-DATE-3 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0LW-WORK-DATE-4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of active snapshots
DataItem AE0LWACT num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

DataItem AE0LWATT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Beginning member in array
DataItem AE0LWBEG num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

DataItem AE0LWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0LWKEY char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length
DataItem AE0LWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of snapshots loaded
DataItem AE0LWMAX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// message number
DataItem AE0LWMNO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// no changes made
DataItem AE0LWNOU num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// next member in array
DataItem AE0LWNXT num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// option requested
DataItem AE0LWOPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// option requested
DataItem AE0LWOPT2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AE0LWSCH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// scheduler error msg
DataItem AE0LWSMG char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// affrec array size
DataItem AE0LWSZA num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// af0n map array size
DataItem AE0LWSZM num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// PG_SCHED_SPCLT_CD
DataItem PG1SC4D char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem USER-NAME char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group item for record level
DataItem VSCASN01-GROUP char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

