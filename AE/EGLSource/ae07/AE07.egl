package ae07;

import ab.common.*;
import corpcom2.XP1REC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPAB001;
import corpcom3.XPAB020;
import corpcom3.XPTA0P;
import corpcom3.XSABS01;
import corpcom3.XSABS03;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom6.UT2REC;
import corpx1.XSETBL;
import pg.common.PG1REC;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TA6REC;
import ta.common.TAEREC;
import ta.common.TARJCL;
import ta.common.TARTYPE;
//*** PROGRAM=AE07 ****
// This application allows the user to submit a batch job which
// will add to the Size Break Table.
// 
// This application will validate the information entered by
// the user, and then write and submit JCL (Job Control
// Language).
// 
// Job Control Language statements are formatted and submitted
// through the Internal Reader Transient Data Queue (INTR).
// The job executes in batch and all output is routed to the
// remote destination specified through this application.
// 
// The JCL for each job is stored as a table.
// There are two formats available for a JCL statement.
// They are either a fixed or a variable format.
// 
// A fixed statement is identified in the table by a blank JCL
// statement type (TARTYPE).  These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted.  They are identified
// by a non-blank statement type.  The type determines the data
// that is to be substituted and the columns into which it is
// to be placed, as follows:
// 
// TARTYPE         JCL statement        Variable        Columns
// -------         -------------        --------        -------
//    J                JOB              TARUSRID          5-10
//                     " "              TARUSRNM         27-46
//    N  (Test only)  NOTIFY            TARUSRID         23-28
//    O               OUTPUT            TARCOPY            34
//                    "    "            TARDEST          41-46
//    P             Parameters          TARJCL            1-80
// 
// The data in working storage is substituted and the statement
// is written to the internal reader.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from the menu, only.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          03/23/89  JRAMOS  New application.
//          03/21/90  wkinca  modify notify on job card in jcl.
//          07/16/90  jwood   removed ut2rec from t&r list
// Y2KFIX   12/11/97  KSUMME  Y2K MODIFICATIONS MADE TO:
//                            (global chg due to table chg:
//                             XP1REC, AB3REC, XPAB020)
// *********************
Program AE07 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AB3REC AB3REC; // record
  ABPREC ABPREC; // record
  ABWREC ABWREC; // record
  AE07W01 AE07W01; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PG1REC PG1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  UT2REC UT2REC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use AE07T02; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use AE07M.AE07M001, // form
  		AE07M.TA0PM001,
  		AE07M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAB001: XPAB001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse Apparel Buy Create Color Breakout Process*/
     /* ------------------------------------------------------------*/
    ;
    set AE07M001 initial; /* Initialize map output area*/
    set AE07W01 empty; /* Initialize working storage*/
    set ABPREC empty; /* Initialize working storage*/
    set ABWREC empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set PG1REC empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set TAEREC empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TA5REC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    ABWREC.ABWAPPL = "AE07"; /* Initialize appl id*/
    ABWREC.ABWPRCSN = "0000"; /* Initialize process number*/
    ;
                     /* (Set map item values)*/
    ;
    ABWREC.ABWMAP = "1"; /* Indicate map to be displayed*/
    AE07M001.XXXCURDT = VGVar.currentShortGregorianDate; /* To map current date*/
    ;
                     /* (Process COMMAREA items:)*/
    ;
    if (COMMAREA.CAITEM > " ") /* Application data exists*/
      AE07M001.CAITEM = COMMAREA.CAITEM; /* Applic data to map*/
      set AE07M001.CAITEM modified; /* MDT on*/
      COMMAREA.CAITEM = " "; /* Clear applic data*/
    end
    ;
    ;
    goto AE07-0001; /* Converse the main process*/
    ;
    ;
    AE07-0001: AE07-0001();
    ;
     /* Converse the main process*/
    goto AE07-0001;
  end // end main
end // end AE07

// Application main process
Function AE07-0001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* -- Display the first (and only) map.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *================================================**/
   /* *  Define Map Environment, Assign/Edit Defaults  **/
   /* *================================================**/
  ;
  ABWREC.ABWPRCSN = "M001"; /* Indicate map to system*/
  ABWREC.XXXMAPNM = ABWREC.ABWERLOC; /* Move map name to afwrec*/
  ABWREC.ABWPRCSN = "0000"; /* Re-initialize process name*/
  ;
  ;
  if (ABWREC.ABWFIRST == " ") /* First time through*/
     /* * ============== (Assign Defaults Here) ================= **/
     /* *  Note: check- if defaults NE spaces/zeroes then skip    **/
     /* *        defaults assignment else assign defaults....     **/
     /* * ======================================================= **/
    ;
    /* *************************************************************/
    /* ***** the following code commented by Grant Gilray     ******/
    /* ***** on 7/6/89. I don't think we need to validate     ******/
    /* ***** these values when the program is first entered   ******/
    /* ***** since XP1REC will always contain valid data.     ******/
    /* *************************************************************/
    /* PERFORM AB0M141               ; Edit scheduler name*/
    /* PERFORM AB0M142               ; Edit season yr*/
    /* PERFORM AB0M143               ; Edit season cd/yr*/
    /* PERFORM AB0M144               ; Edit xsnyr/xsecd/buy mo comb*/
    ;
    if (AB3REC.AB3BALBF == " ") /* IF AB_BAL_BLA_FL EQ SPACES*/
      XPAB020(); /* GET AB_BAL_BLA_FL from DB*/
    end /* END of "IF" statement*/
    ;
    if (XP1REC.XP1MNO == 0) /* No errors found*/
      ABWREC.ABWPRCSN = "0001"; /* Process number*/
      AE07M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
      XP1REC.XP1MNO = 28; /* Indicate ready to submit*/
    end
    ;
  end
  ;
  ;
   /* *===============**/
   /* *  Display map  **/
   /* *===============**/
  ;
  AE07-1000(); /* Display map*/
  ;
  ;
end // end AE07-0001

// Driver process for application
Function AE07-1000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  AE07-1100(); /* Format and display the map*/
  ;
  AE07-1200(); /* Check attention identifier*/
  ;
  AE07-1300(); /* Reset fields to normal intensity*/
  ;
  AE07-1500(); /* Process valid input request*/
  ;
  ;
end // end AE07-1000

// Format and display the map
Function AE07-1100()
   /* ------------------------------------------------------------*/
   /* -If no error to display, format and display the map.*/
   /* -Indicate sound audible alarm for any errors detected.*/
   /* -Note that validation is done first (for the defaults)*/
     /* before the first screen is displayed. In this way, the*/
     /* user does not have to press enter to activate the*/
     /* validation process. When the first screen is displayed,*/
     /* all fields have been validated and the results shown.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (XP1REC.XP1MNO != 0) /* Error message to display*/
    set AE07M001 alarm; /* Indicate sound alarm*/
  end
  ;
  ;
  if (XP1REC.XP1MNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(XP1REC.XP1MNO);
  end /* Move message no. for display*/
  ;
  XP1REC.XP1MNO = 0; /* Reset work message area*/
  ;
  ;
  ;
   /* *==============================**/
   /* * Check security authorization **/
   /* *==============================**/
  ;
  if (COMMAREA.CACLVL[2] == "N") /* Scheduler profile*/
    ;
    set AE07M001.CATOAP cursor; /* Cursor position*/
    ;
  end
  ;
  ;
  ;
  converse AE07M001 ;
  ;
  ABWREC.ABWFIRST = "N"; /* Set first time switch off*/
  ;
  ;
end // end AE07-1100

// Check attention identifier
Function AE07-1200()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    ABWREC.ABWPRCSN = "1200"; /* Process number*/
    AE07M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (AE07M001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AE07M001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AE07M001.CAITEM; /* Application data*/
      XSABS01(); /* Exit to another application*/
      XP1REC.XP1MNO = converseVar.validationMsgNum;
                                   /* Save EZEMNO to common msg area*/
    else
      XP1REC.XP1MNO = 4; /* Indicate PF key not valid*/
    end
    ;
    set AE07M001.CATOAP cursor, modified, bold; /* Highlight*/
    ABWREC.ABWPRCSN = "120 "; /* Process number*/
    AE07M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (AE07M001.CAITEM > " ") /* Application data was entered*/
    set AE07M001.CAITEM cursor, modified, bold; /* Highlight data*/
    XP1REC.XP1MNO = 7; /* Enter only with fast path*/
    ABWREC.ABWPRCSN = "120 "; /* Process number*/
    AE07M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    exit stack; /* Redisplay map*/
  end
  ;
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AE07M001"; /* Appl find code*/
    end
    ;
    XSABS03(); /* Exit to another application*/
    ;
    exit stack; /* Exit to redisplay map*/
  end
  ;
  ;
  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    ;
    ABWREC.ABWPRCSN = "120 "; /* Process number*/
    AE07M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    XP1REC.XP1MNO = 4; /* Indicate invalid attention key*/
    ;
    ;
    if (converseVar.eventKey is pa1) /* PA1 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
end // end AE07-1200

// Reset highlighted fields
Function AE07-1300()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  set AE07M001.CATOAP initialAttributes; /* TO application*/
  set AE07M001.CAITEM initialAttributes; /* Application data*/
  ;
  ;
end // end AE07-1300

// Process valid input request
Function AE07-1500()
   /* ------------------------------------------------------------*/
   /* Check for validation errors*/
   /* ------------------------------------------------------------*/
  ;
  if (XP1REC.XP1MNO != 0 /* Validation errors are present*/
   && XP1REC.XP1MNO != 24) /* Not OK to submit*/
    exit stack; /* Redisplay map with message*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  ;
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/
  ;
  if (TA3REC.TA3RGNID == "03") /* Production Region*/
    AE07W01.AE07WIXT = 1; /* Initialize JCL table index*/
  else
    if ("/*EOF" in AE07T02.TARJCL)
      AE07W01.AE07WIXT = sysVar.arrayIndex;
      AE07W01.AE07WIXT = AE07W01.AE07WIXT + 1;
    else
      AE07W01.AE07WIXT = 1; /* Initialize JCL table index*/
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (AE07W01.AE07WIXT > 0) /* Until end of table*/
    ;
    if (AE07T02.TARTYPE[AE07WIXT] == "P") /* Parameters statement*/
      ;
      /* ------------------------------------------------------------*/
       /* Format parameters for the color breakout for submission*/
      /* ------------------------------------------------------------*/
      ;
      set ABPREC empty; /* Reset parameters work area*/
      ;
      ABPREC.ABPBUYMO = XP1REC.AB3BUYMO; /* Buy month*/
      ABPREC.XSECD = XP1REC.XSECD; /* Season cd*/
      ABPREC.ABPXSNYR = XP1REC.XSNYR; /* Season yr*/
      ABPREC.PG1SC4CD = XP1REC.PG1SC4CD; /* Scheduler cd*/
      ABPREC.XGPCD = XP1REC.XGPCD; /* Scheduler cd*/
      ;
      AE07W01.TARJCL = ABPREC.TARJCL; /* Parameter variables*/
      ;
      AE07T02.TARJCL[AE07WIXT] = AE07W01.TARJCL;
      ;
    end
    ;
    ;
    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/
    ;
    TA6REC.TARJCL[TA6INDEX] = AE07T02.TARJCL[AE07WIXT]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = AE07T02.TARTYPE[AE07WIXT]; /* Type*/
    ;
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    ;
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (AE07T02.TARJCL[AE07WIXT] == "/*EOF") /* End of table*/
      AE07W01.AE07WIXT = 0; /* Indicate end of table*/
    else
      AE07W01.AE07WIXT = AE07W01.AE07WIXT + 1; /* Increment table index*/
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AE07-1510(); /* Submit the JCL*/
  ;
  ;
end // end AE07-1500

// Submit Job/Select Printer
Function AE07-1510()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* send message to terminal*/
  ;
  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end
  ;
  ;
   /* ------------------------*/
   /* Fix process location*/
   /* ------------------------*/
  ;
  ABWREC.ABWPRCSN = "1510"; /* Process number*/
  AE07M001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    XP1REC.XP1MNO = 22; /* Indicate job was submitted*/
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    XP1REC.XP1MNO = 23; /* Indicate user cancelled*/
  else
    XP1REC.XP1MNO = 10; /* Indicate system error*/
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end AE07-1510

//*** RECORD=AE07W01 ****
// ********************************
// Application Working Storage (1).
// ********************************
// ***********************
Record AE07W01 type basicRecord
  10 TARJCL TARJCL ; 
  10 TARTYPE TARTYPE ; 
  10 AE07WSWS AE07WSWS ; 
  10 AE07MBAL AE07MBAL ; 
  10 AE07WXSA AE07WXSA ; 
    15 AE07WXSS AE07WXSS ; 
    15 AE07WXYR AE07WXYR ; 
  10 AE07WIXT AE07WIXT ; 
  10 AE07WXSY AE07WXSY ; 
end // end AE07W01

// Balance BLA indicator
DataItem AE07MBAL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JCL table index
DataItem AE07WIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Job submitted switch
DataItem AE07WSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk abrv
DataItem AE07WXSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk season cd
DataItem AE07WXSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xsnyr work area
DataItem AE07WXSY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season yr
DataItem AE07WXYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

