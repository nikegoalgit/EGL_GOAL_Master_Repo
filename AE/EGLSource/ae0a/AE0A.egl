package ae0a;

import ab.common.*;
import corpcom2.XP1REC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPAB001;
import corpcom3.XPAB010;
import corpcom3.XSABS01;
import corpcom3.XSABS02;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XCT-CTRY-CD;
import corpx1.XCT-CTRY-DESC;
import corpx1.XCTTBL;
import corpx1.XSETBL;
import corpz3.ZZ-CHNG-CNT;
import pg.common.PG-SCHED-SPCLT-CD;
import pg.common.PG1REC;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
import vv.common.VSCXCT01;
//*** PROGRAM=AE0A ****
// This application is a prototype for the Apparel Forecast/Buy
// system.  It will display multiple rows from a DB2 table for
// the user to view and/or modify.
// 
// Upon initial entry, the table is read and columns from the
// selected rows are formatted and saved in temporary storage,
// one display page per queue record.
// 
// The records are retrieved from temporary storage one at a
// time, for display to the user.  The user may page forward
// and backward, to view the rows that were selected.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 10/18/93   SBABCO   New application.
// Y2KFIX   12/11/97  KSUMME  Y2K MODIFICATIONS MADE TO:
//                             AE0A163
//                            (global chg due to table chg:
//                             XP1REC, AB3REC, XPAB020)
// *********************
Program AE0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AB00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AB3REC AB3REC; // record
  ABWREC ABWREC; // record
  AE0AW00 AE0AW00; // record
  AE0AW02 AE0AW02; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PG1REC PG1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VSCXCT01 VSCXCT01; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XSETBL; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use AE0AM.AE0AM001, // form
  		AE0AM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAB001: XPAB001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Apparel Buy Prototype process.*/
     /* ------------------------------------------------------------*/


    set ABWREC empty; /* Initialize working storage*/
    set AE0AW00 empty; /* Initialize working storage*/
    set AE0AW02 empty; /* Initialize working storage*/
    set AB3REC empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TA5REC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    set AE0AM001 initial; /* Initialize map output area*/
    ABWREC.ABWAPPL = "AE0A"; /* Initialize appl ID for this appl*/
    ABWREC.ABWPRCSN = "0000"; /* Initialize process number to zero*/

    ABWREC.ABWMAP = "1"; /* Indicate map to be displayed*/
    ABWREC.ABWSWR = "Y"; /* Indicate request for data*/
    move " " to AE0AM001.AE0AMSEL[1] for all;
    AE0AW00.AE0AWSZM = sysVar.arrayIndex; /* calculate the size of the map*/
    move " " to AE0AW02.AE0AWATT[1] for all;
    AE0AW00.AE0AWSZA = sysVar.arrayIndex; /* calculate array size for tsq rec*/
    ABWREC.ABWTSL = 0552;
                                     /* the calculated size of tsq rec*/

    ABWREC.ABWIXM = 1; /* Initialize line index*/
    while (ABWREC.ABWIXM <= AE0AW00.AE0AWSZM) /* Until end of lines*/
      set AE0AM001.AE0AMCTY[ABWIXM] skip, invisible; /* Hide country*/
      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/
    end

    set AE0AM001.AE0AM-START cursor, normal; /* Set cursor*/

    goto AE0A001; /* Converse Apparel Buy Prototype*/


    AE0A001: AE0A001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    goto AE0A001; /* Converse Transportation Prototype*/


  end // end main
end // end AE0A

// Choose which map to display
Function AE0A001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
      /* Otherwise, if specified, display the second map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  ABWREC.ABWPRCSN = "M001"; /* Indicate map # 1*/
  ABWREC.XXXMAPNM = ABWREC.ABWERLOC; /* Move map name to afwrec*/
  ABWREC.ABWPRCSN = "0000"; /* Re-Initialize process name*/

  AE0A100(); /* Display map 1*/



end // end AE0A001

// Driver process for 100 map
Function AE0A100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  AE0A110(); /* Obtain the data to display*/

  AE0A120(); /* Format and display the map*/

  AE0A130(); /* Check attention identifier*/

  AE0A140(); /* Reset fields to normal intensity*/

  AE0A150(); /* Verify the entered data*/

  AE0A160(); /* Process valid input request*/


end // end AE0A100

// Obtain the data to display
Function AE0A110()
   /* ------------------------------------------------------------*/
   /* If data was not requested, return to the previous process.*/
   /* Purge any existing queue in temporary storage.*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At end of rows, add any partial page to the queue.*/
   /* At end of rows, close the selected set cursor.*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/


  if (ABWREC.ABWSWR != "Y") /* Data was not requested*/

    return; /* Return to previous process*/
  end
  if (AE0AW00.AE0AWOPT == "A") /* add option requested*/
    AE0A111(); /* Purge any temporary storage*/
    ABWREC.ABWIXM = 0; /* Initialize display line number*/
    ABWREC.ABWIDX1 = 0; /* Initialize tsq array number*/
    set AE0AW02 empty; /* Clear temporary storage record*/
    return; /* Return to previous process*/
  end

  AE0A111(); /* Purge any temporary storage*/

  AE0A112(); /* Select set and open the cursor*/

  if (converseVar.validationMsgNum == 0) /* No errors were found*/

    ABWREC.ABWSWC = "N"; /* Initialize end of file switch*/
    AE0AW02.AE0AWIDX = 0; /* Initialize tsq array number*/

    set AE0AW02 empty; /* Clear temporary storage record*/

    while (ABWREC.ABWSWC == "N") /* Until cursor end of file*/

      AE0A113(); /* Obtain data and format page*/

      if (AE0AW02.AE0AWIDX == AE0AW00.AE0AWSZM) /* Page is full*/
        AE0A114(); /* Add page to temporary storage*/
      end

      if (converseVar.validationMsgNum != 0) /* Errors were found*/
        ABWREC.ABWSWC = "Y"; /* Force end of file*/
      end

    end

  end

  if (converseVar.validationMsgNum == 0 /* No errors were found*/
   && AE0AW02.AE0AWIDX > 0)             /* and page was formatted*/
    AE0A114(); /* Add page to temporary storage*/
  end

  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    AE0A115(); /* Close the selected set cursor*/
  end

  if (converseVar.validationMsgNum == 0) /* No errors were found*/

    ABWREC.ABWTSP = 1; /* Initialize page number*/
    ABWREC.ABWSWR = "N"; /* Request for data completed*/

  end


end // end AE0A110

// Purge any temporary storage
Function AE0A111()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = ABWREC.ABWAPPL; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (AE0AW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                         /* ; subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    ABWREC.ABWPRCSN = "111 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag routine*/

  end

  ABWREC.ABWTSP = 1; /* Reset current page number*/
  ABWREC.TA5TSQIX = 0; /* Reset highest page number*/


end // end AE0A111

// Select set and open cursor
Function AE0A112()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  VSCXCT01.XCT-CTRY-CD = "****";

  if (AE0AW00.AE0AW-START > " ")
    VSCXCT01.XCT-CTRY-CD = AE0AW00.AE0AW-START;
  end

  try
    call "IO6920" ("S1", SQLCA, VSCXCT01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    ABWREC.ABWPRCSN = "112 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSCXCT01"; /* Table view name*/
    TA1REC.TA1TBLKE = VSCXCT01.VSCXCT01-KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

    AE0AM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    return; /* Return to previous process*/

  end


end // end AE0A112

// Fetch next row and format
Function AE0A113()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6920" ("N1", SQLCA, VSCXCT01) {isNoRefresh = yes, isExternal = yes};
  end /* Fth the next row*/
   /* ****************************************************/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

    ABWREC.ABWSWC = "Y"; /* Indicate end of file*/

    return; /* Return to previous process*/

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    ABWREC.ABWPRCSN = "113 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSCXCT01"; /* Table view name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag. routine*/

    AE0AM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    return; /* Return to previous process*/

  end
  AE0AW02.AE0AWIDX = AE0AW02.AE0AWIDX + 1; /* Increment line index*/
   /* Save data to display*/
  AE0AW02.PG-SCHED-SPCLT-CD[AE0AWIDX] = VSCXCT01.PG-SCHED-SPCLT-CD;
  AE0AW02.XCT-CTRY-CD[AE0AWIDX] = VSCXCT01.XCT-CTRY-CD;
  AE0AW02.ZZ-CHNG-CNT[AE0AWIDX] = VSCXCT01.ZZ-CHNG-CNT;
  if (VSCXCT01.XCT-CTRY-CD in XCTTBL.XCTCD)
    AE0AW02.XCT-CTRY-DESC[AE0AWIDX] = XCTTBL.XCTDESC[sysVar.arrayIndex];
  else
    AE0AW02.XCT-CTRY-DESC[AE0AWIDX] = "NO DESCRIPTION FOUND";
  end


end // end AE0A113

// Add page to temporary storage
Function AE0A114()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  AE0AW02.AE0AWLEN = ABWREC.ABWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = ABWREC.ABWAPPL; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (AE0AW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                    /* ;subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ABWREC.ABWPRCSN = "114 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag. routine*/

    AE0AM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end

  ABWREC.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/

  AE0AW02.AE0AWIDX = 0; /* Reset display line number*/

  set AE0AW02 empty; /* Clear temporary storage record*/


end // end AE0A114

// Close selected set cursor
Function AE0A115()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6920" ("C1", SQLCA, VSCXCT01) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ABWREC.ABWPRCSN = "115 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSCXCT01"; /* Table view name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag. routine*/

    AE0AM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end


end // end AE0A115

// Format and display the map
Function AE0A120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set AE0AM001 alarm; /* Indicate sound alarm*/
  end

  if (converseVar.validationMsgNum == 0 /* No error message to display*/
   || ABWREC.ABWFIRST == " ")           /* or first time through*/

    if (ABWREC.ABWFIRST == " ") /* First time through*/

      if (COMMAREA.CAITEM > " ") /* Application data exists*/

        AE0AM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
        set AE0AM001.CAITEM modified; /* Set MDT on*/
        COMMAREA.CAITEM = " "; /* Clear application data*/

      end

    else

      set AE0AM001 initial; /* Clear map output area*/
      if (AE0AW00.AE0AWOPT != "A")
        AE0AM001.AE0AM-START = AE0AW00.AE0AW-START; /* Reset sel key*/
      end

    end

    ABWREC.ABWFIRST = "N"; /* turn 'first time through' OFF*/

    AE0AM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      if (AE0AW00.AE0AWOPT != "A")
        ABWREC.ABWIXM = 1; /* Initialize line index*/

        while (ABWREC.ABWIXM <= AE0AW00.AE0AWSZM) /* Until end of lines*/
          set AE0AM001.AE0AMCTY[ABWIXM] protect, noHighLight;
          ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/
        end
        AE0A121(); /* Format the data on the page*/
        AE0AM001.AE0AMPFT = "13:ADD";
      else
        set AE0AM001.AE0AMDEL skip, invisible; /* hide title*/
        ABWREC.ABWIXM = 1; /* Initialize line index*/

        while (ABWREC.ABWIXM <= AE0AW00.AE0AWSZM) /* Until end of lines*/
          set AE0AM001.AE0AMSEL[ABWIXM] skip, invisible; /* set to default*/
          set AE0AM001.AE0AMSCH[ABWIXM] normal;
          set AE0AM001.AE0AMCTY[ABWIXM] normal;
          AE0A124(); /* Clear fields*/
          ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/
        end
        set AE0AM001.AE0AMSCH[1] cursor, normal;
        AE0AM001.AE0AMPFT = "13:MAINT.";
        set AE0AM001.AE0AM-COUNTRY-TITLE skip, invisible;
        set AE0AM001.AE0AM-START skip, invisible;

      end
    end

    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      if (ABWREC.ABWNMO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(ABWREC.ABWNMO);
      end /* Information message number*/
    end

  end

  ABWREC.ABWNMO = 0; /* Reset information message number*/

  converse AE0AM001 ;


end // end AE0A120

// Format the selected data
Function AE0A121()
   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the plan sequence data in the map.*/
   /* ------------------------------------------------------------*/

  if (AE0AW00.AE0AWOPT == "A") /* option not equal to add*/

    return; /* Return to previous process*/
  end
  if (ABWREC.TA5TSQIX == 0) /* No data to display*/

    ABWREC.ABWPRCSN = "121 "; /* Process number*/
    AE0AM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(5); /* Indicate no data to display*/

    return; /* Return to previous process*/

  end

  if (ABWREC.ABWTSP != TA5REC.TA5TSQIX /* Desired page not current*/
   || AE0AW02.AE0AWIDX <= 0)           /* no data contained in ab0hw02 rec      x*/
    AE0A122(); /* Obtain temporary storage page*/
  end


  ABWREC.ABWIXM = 1; /* Initialize line index*/
  ABWREC.ABWIDX1 = 1; /* Initialize line index*/

  while (ABWREC.ABWIXM <= AE0AW02.AE0AWIDX) /* Until end of lines*/

    set AE0AM001.AE0AMSEL[ABWIXM] normal; /* Display select flag*/
    set AE0AM001.AE0AMSCH[ABWIXM] normal; /* Display select flag*/
    set AE0AM001.AE0AMCTY[ABWIXM] skip; /* Display select flag*/
    AE0AM001.AE0AMSEL[ABWIXM] = " ";
    AE0A123();
    AE0AM001.AE0AMCTY[ABWIXM] = AE0AW02.XCT-CTRY-CD[ABWIXM];
    if (AE0AW02.XCT-CTRY-CD[ABWIXM] in XCTTBL.XCTCD)
      AE0AW02.XCT-CTRY-DESC[ABWIXM] = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end
    AE0AM001.AE0AMDES[ABWIXM] = AE0AW02.XCT-CTRY-DESC[ABWIXM];

    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/
    ABWREC.ABWIDX1 = ABWREC.ABWIDX1 + 1; /* Increment line index*/

  end
  set AE0AM001.AE0AMSEL[1] cursor, normal; /* Display select flag*/

  while (ABWREC.ABWIXM <= AE0AW00.AE0AWSZM) /* Until end of lines*/
    AE0A124(); /* clear fields*/
    AE0A125(); /* protect fields*/
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/
  end

end // end AE0A121

// Read temporary storage page
Function AE0A122()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  AE0AW02.AE0AWLEN = ABWREC.ABWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = ABWREC.ABWAPPL; /* Application identification*/
  TA5REC.TA5TSQIX = ABWREC.ABWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (AE0AW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                    /* ;subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ABWREC.ABWPRCSN = "122 "; /* Process number*/
    TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

    AE0AM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* Exit to redisplay map*/

  end


end // end AE0A122

// Get SCHEDULER CODE For Sched.
Function AE0A123()
   /* *************************************************************/
   /* *****                                                    ****/
   /* *****                  A E 0 A 1 2 3                     ****/
   /* *****                                                    ****/
   /* ***** This process will retrieve the two digit SCHEDULER ****/
   /* ***** CODE based on a valid CICS SIGNON ID. In order to  ****/
   /* ***** use this process the APPLICATION must use the      ****/
   /* ***** following CSP records:                             ****/
   /* *****           ABWREC...AB, AF COMMON RECORD            ****/
   /* *****           PG1REC...DPRODG.VSUSER01 RECORD          ****/
   /* *****           SQLCA....SQL RECORD                      ****/
   /* *****           TA1REC...ERROR DIAG RECORD               ****/
   /* *****           XP1REC...AB, AF COMMON RECORD            ****/
   /* ***** To use this process move the SIGNON in question to ****/
   /* ***** XP1REC.XXXUSER and PERFORM XPAB010. This process   ****/
   /* ***** will return one of the following RETURN CODES:     ****/
   /* *****           ' ' ..... ROW FOUND,                     ****/
   /* *****           '1' ..... ROW NOT FOUND                  ****/
   /* *****           '2' ..... DATA BASE BUSY, SQLCODE = -911 ****/
   /* *****           '3' ..... CSP CALL TO IOMOD IN ERROR     ****/
   /* *****           '4' ..... UNKNOWN DB2 ERROR              ****/
   /* ***** The two digit scheduler code, If found, will be    ****/
   /* ***** returned in XP1REC.PG1SC4CD.                       ****/
   /* ***** This process executes all error handling required. ****/
   /* *************************************************************/

   /* ------------------------------------------------------------*/
   /* Clear the row storage area and format the key.*/
   /* ------------------------------------------------------------*/

  set PG1REC empty; /* Clear row storage area*/

  PG1REC.XGPCD = "03"; /* Indicate 'APPAREL' GPC code*/
  PG1REC.PG1SC4CD = AE0AW02.PG-SCHED-SPCLT-CD[ABWIXM];
                                   /* Indicate 'SCHED name'*/
  PG1REC.PG1FCTCD = " "; /* FORECASTER CD must be blank*/

   /* ------------------------------------------------------------*/
   /* CALL IOMOD to retrieve row from DPRODG.VSUSER01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1200" ("S ", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* CHECK CSP and DB2 return codes to see if CALL executed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* If CALL  successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
      AE0AM001.AE0AMSCH[ABWIXM] = PG1REC.XXXUSER; /* scheduler name*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
        AE0AW00.AE0AWSCH = AE0AW02.PG-SCHED-SPCLT-CD[ABWIXM];
        AE0AM001.AE0AMSCH[ABWIXM] = AE0AW00.AE0AWSMG;
      end
    end
    return; /* Return to 'CALLING' Process*/
  end
  if (sysVar.errorCode == "00000000" /* If CALL successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* IF Resource not available*/
    converseLib.validationFailed(11); /* Indicate 'DATA BASE BUSY' error*/
    TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
  else /* ELSE*/
    converseLib.validationFailed(10); /* Indicate 'DATA BASE BUSY' error*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
    converseLib.clearScreen();
     /* clear screen before redisplay*/
  end
   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/

  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Process name*/
  ABWREC.ABWPRCSN = "123"; /* Process number*/
  TA1REC.TA1LOC = "SELECT SCHEDULER  FROM PG1";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = XP1REC.XXXUSER; /* MOVE SIGNON to ERROR-DIAG*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Return to previous process*/



end // end AE0A123

// clear unused fields
Function AE0A124()
  AE0AM001.AE0AMSEL[ABWIXM] = " ";
  AE0AM001.AE0AMSCH[ABWIXM] = " ";
  AE0AM001.AE0AMCTY[ABWIXM] = " ";
end // end AE0A124

// protect unused fields
Function AE0A125()
  set AE0AM001.AE0AMSEL[ABWIXM] skip, invisible; /* Display select flag*/
  set AE0AM001.AE0AMSCH[ABWIXM] skip, invisible; /* Display select flag*/
  set AE0AM001.AE0AMCTY[ABWIXM] skip, invisible; /* Display select flag*/
end // end AE0A125

// Check attention identifier
Function AE0A130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set AE0AM001 initial; /* Clear the map fields*/

    exit stack; /* Exit to redisplay map*/

  end

  if (AE0AM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      AE0A111(); /* Purge any temporary storage*/

      COMMAREA.CATOAP = AE0AM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AE0AM001.CAITEM; /* Application data*/

      XSABS01(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    set AE0AM001.CATOAP cursor, modified, bold; /* Highlight*/

    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AE0AM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AE0AM001"; /* Appl find code*/
    end

    AE0A111(); /* Purge any temporary storage*/

    XSABS02(); /* Exit to another application*/

    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AE0AM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf13) /* and PF13 was not pressed*/

    ABWREC.ABWPRCSN = "130 "; /* Process number*/
    AE0AM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    exit stack; /* Exit to redisplay map*/

  end


end // end AE0A130

// Reset highlighted fields
Function AE0A140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (AE0AW00.AE0AWOPT == "A")
    set AE0AM001.AE0AMDEL skip, invisible; /* Display select flag*/
  end
  ABWREC.ABWIXM = 1; /* Initialize line index*/

  while (ABWREC.ABWIXM <= AE0AW00.AE0AWSZM) /* Until end of lines*/

    if (AE0AW00.AE0AWOPT == "A")
      set AE0AM001.AE0AMSEL[ABWIXM] skip, invisible; /* set default attrs*/
      set AE0AM001.AE0AMSCH[ABWIXM] normal;
      set AE0AM001.AE0AMCTY[ABWIXM] normal;
    else
      if (AE0AM001.AE0AMSCH[ABWIXM] != " ")
        set AE0AM001.AE0AMSEL[ABWIXM] normal; /* set default attrs*/
        set AE0AM001.AE0AMSCH[ABWIXM] normal;
        set AE0AM001.AE0AMCTY[ABWIXM] skip;
      else
        AE0A124(); /* clear fields*/
        AE0A125(); /* protect fields*/
      end
    end
    ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/
  end



  set AE0AM001.CATOAP initialAttributes; /* Commarea TO application*/
  set AE0AM001.CAITEM initialAttributes; /* Commarea application data*/


end // end AE0A140

// Verify the entered data
Function AE0A150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (AE0AM001.CAITEM > " ") /* Application data was entered*/

    set AE0AM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    ABWREC.ABWPRCSN = "150 "; /* Process number*/
    AE0AM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  end

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    AE0A151(); /* Verify scroll request*/
  else
    AE0A152(); /* Verify selection criteria*/
    if (ABWREC.ABWSWR == "Y") /* If new selection criteria entered*/
      exit stack; /* Go back to start of appl*/
    else /* Else(selection criteria not changed)*/
      AE0AW00.AE0AWNOU = 0; /* count of screen changes*/
      if (AE0AW00.AE0AWOPT == "A") /* if add option selected*/
        ABWREC.ABWIXM = AE0AW00.AE0AWSZM; /* Initialize line index*/
        while (ABWREC.ABWIXM > 0) /* Until end of lines*/
          AE0A153(); /* Verify any add data*/
          ABWREC.ABWIXM = ABWREC.ABWIXM - 1; /* Increment line index*/

        end
      else
        ABWREC.ABWIXM = AE0AW02.AE0AWIDX; /* Initialize line index*/
        while (ABWREC.ABWIXM > 0) /* Until end of lines*/
          AE0A154(); /* Verify any change  data*/
          ABWREC.ABWIXM = ABWREC.ABWIXM - 1; /* Increment line index*/

        end
      end
      if (AE0AW00.AE0AWNOU <= 0) /* no changes made*/
        exit stack; /* Exit to redisplay map*/
      end
    end
  end

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to redisplay map*/
  end

end // end AE0A150

// Verify scroll request
Function AE0A151()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && ABWREC.ABWTSP < 2)          /* and no previous pages*/

    ABWREC.ABWPRCSN = "151 "; /* Process number*/
    AE0AM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && ABWREC.ABWTSP >= ABWREC.TA5TSQIX) /* and no more pages*/

    ABWREC.ABWPRCSN = "151 "; /* Process number*/
    AE0AM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end


end // end AE0A151

// Edit selection criteria
Function AE0A152()
   /* ============================================================*/
   /* ===== E D I T    S E L E C T I O N    C R I T E R I A  =====*/
   /* =====                                                  =====*/
   /* ===== Compare selection criteria on screen to data on  =====*/
   /* ===== working storage record, if any has changed,     =====*/
   /* ===== validate all selection criteria fields and turn  =====*/
   /* ===== on switch which allows later processing to purge =====*/
   /* ===== temporary storage and re-load it with newly      =====*/
   /* ===== selected data.                                   =====*/
   /* ============================================================*/

  ABWREC.ABWSWR = "N"; /* initialize switch to 'OFF'*/

  if (converseVar.eventKey is pf13)
    if (AE0AW00.AE0AWOPT == "A")
      ABWREC.ABWSWR = "Y"; /* initialize switch to 'OFF'*/
      AE0AW00.AE0AWOPT = " ";
    else
      ABWREC.ABWSWR = "Y"; /* initialize switch to 'OFF'*/
      AE0AW00.AE0AWOPT = "A";
    end
    return; /* return to previous process*/
  end

  if (AE0AM001.AE0AM-START != AE0AW00.AE0AW-START)
    ABWREC.ABWSWR = "Y"; /* initialize switch to 'OFF'*/
    AE0AW00.AE0AWOPT = " ";
    AE0AW00.AE0AW-START = AE0AM001.AE0AM-START;
    return;
  end
   /* ====================== END OF PROCESS ======================*/

end // end AE0A152

// Verify any add data
Function AE0A153()
   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/

  if (AE0AM001.AE0AMSCH[ABWIXM] == " "
   && AE0AM001.AE0AMCTY[ABWIXM] == " ")
    return;
  end
  AE0AW00.AE0AWNOU = AE0AW00.AE0AWNOU + 1;

   /* -------------------------------------------*/
   /* -- validate scheduler*/
   /* -------------------------------------------*/
  XP1REC.XXXUSER = AE0AM001.AE0AMSCH[ABWIXM];
  XP1REC.PG1SC4CD = " ";

  AE0A156(); /* Validate Scheduler cd*/

  AE0A157(); /* Validate Scheduler cd*/

end // end AE0A153

// verify any changed data
Function AE0A154()

  ABWREC.ABWIDX1 = ABWREC.ABWIXM;
  if (AE0AM001.AE0AMSEL[ABWIXM] == "D")
    AE0AW02.AE0AWATT[ABWIDX1] = "D";
    AE0AW00.AE0AWNOU = AE0AWNOU + 1;
    return; /* return to previous process*/
  end
  if (AE0AM001.AE0AMSEL[ABWIXM] != " ")
    set AE0AM001.AE0AMSEL[ABWIXM] cursor, bold; /* Highlight field*/
    converseLib.validationFailed(01); /* Indicate error msg*/
    ABWREC.ABWPRCSN = "154 "; /* Process number*/
    return; /* return to previous process*/
  end

  XP1REC.XXXUSER = AE0AM001.AE0AMSCH[ABWIXM];
  XP1REC.PG1SC4CD = " ";
  XP1REC.XP1ERRFL = " ";

  XPAB010(); /* Validate scheduler*/

   /* check results*/

  if (XP1REC.XP1ERRFL == "1") /* If row not found*/
    XP1REC.XXXUSER = " "; /* Space out save area*/
    set AE0AM001.AE0AMSCH[ABWIXM] cursor, bold; /* Highlight field*/
    converseLib.validationFailed(21); /* Indicate error msg*/
    ABWREC.ABWPRCSN = "154 "; /* Process number*/
    return; /* Return to calling process*/
  else
    if (XP1REC.XP1ERRFL == "2") /* If resource not available*/
      converseLib.validationFailed(11); /* Indicate 'database busy' err*/
      exit stack; /* Exit to redisplay map*/
    else
      if (XP1REC.XP1ERRFL == "3" /* Call not successful*/
       || XP1REC.XP1ERRFL == "4") /* or unknown db2 error found*/
        converseLib.validationFailed(10); /* Indicate unexpected error*/
        exit stack; /* Exit to redisplay map*/
      end
    end
  end

  if (AE0AW02.PG-SCHED-SPCLT-CD[ABWIDX1] == PG1REC.PG1SC4CD)
    return; /* return to previous process*/
  end

  AE0AW02.PG-SCHED-SPCLT-CD[ABWIDX1] = PG1REC.PG1SC4CD;
  AE0AW02.AE0AWATT[ABWIDX1] = "C";
  AE0AW00.AE0AWNOU = AE0AWNOU + 1;
end // end AE0A154

// edit scheduler name
Function AE0A156()

  if (XP1REC.XXXUSER == "?") /* Pop-up window requested*/
    XP1REC.XXXUSER = " "; /* Space out save area*/
    set AE0AM001.AE0AMSCH[ABWIXM] cursor, bold; /* Highlight field*/
    converseLib.validationFailed(42); /* Indicate pop-up window not available*/
    ABWREC.ABWPRCSN = "53B "; /* Process number*/
    return; /* Return to calling process*/
  end



   /* *=====================================================**/
    /* Perform XPAB010 to retrieve row from DPRODG.VSUSER01*/
   /* *=====================================================**/


  XP1REC.XP1ERRFL = " "; /* Reset error indicator*/

  XPAB010(); /* Validate userid and get scheduler cd*/



   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/

  if (XP1REC.XP1ERRFL == "1") /* IF Row not found*/
                  /* (Field in Error)*/
    XP1REC.XXXUSER = " "; /* Space out save area*/
    set AE0AM001.AE0AMSCH[ABWIXM] cursor, bold; /* Highlight field*/
    converseLib.validationFailed(21); /* Indicate error msg*/
    ABWREC.ABWPRCSN = "53B "; /* Process number*/

    return; /* Return to calling process*/

  else

    if (XP1REC.XP1ERRFL == "2") /* IF Resource not available*/

      converseLib.validationFailed(11); /* Indicate 'DATA BASE BUSY' error*/
      exit stack; /* Exit to redisplay map*/

    else

      if (XP1REC.XP1ERRFL == "3" /* Call not successful*/
       || XP1REC.XP1ERRFL == "4") /* or Unknown DB2 error found*/

        converseLib.validationFailed(10); /* Indicate unexpected error found*/
        exit stack; /* Exit to redisplay map*/

      else /* (ROW FOUND - OK)*/
        AE0AW02.PG-SCHED-SPCLT-CD[ABWIXM] = PG1REC.PG1SC4CD;

      end

    end

  end



end // end AE0A156

// edit country code
Function AE0A157()

   /* *=====================================================**/
    /* validate for country code*/
   /* *=====================================================**/

  if (AE0AM001.AE0AMCTY > " "
   && AE0AM001.AE0AMCTY in XCTTBL.XCTCD)
    /* NEXT SENTENCE*/
  else
    ABWREC.ABWPRCSN = "157 "; /* Process number*/
    set AE0AM001.AE0AMCTY cursor, bold; /* Highlight field*/
    converseLib.validationFailed(177); /* Indicate error message*/
    return; /* Return to previous process*/
  end

   /* *======================**/
   /* validate for duplicates**/
   /* *======================**/

  AE0A158(); /* Validate for duplicates*/

end // end AE0A157

// validate country cd for dups
Function AE0A158()

   /* ------------------------------------------------------------*/
   /* Verify country code not found in dabuy.vscxct01*/
   /* ------------------------------------------------------------*/

   /* *=====================**/
   /* *  Build Access Keys  **/
   /* *=====================**/

  set VSCXCT01 empty; /* initialize db record*/
  VSCXCT01.XCT-CTRY-CD = AE0AM001.AE0AMCTY[ABWIXM]; /* country code*/

   /* *=============================**/
   /* *  Access DABUY.VSCXCT01 DB   **/
   /* *=============================**/

  try
    call "IO6920" ("S ", SQLCA, VSCXCT01) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
    /* If successful call, save desc to working storage*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code- dup. found*/
      AE0AM001.AE0AMCTY[ABWIXM] = " "; /* Move blank Country cd*/
      set AE0AM001.AE0AMCTY[ABWIXM] cursor, bold; /* Highlight field*/
      converseLib.validationFailed(176); /* Indicate error message*/
      ABWREC.ABWPRCSN = "158 "; /* Process number*/
      return; /* Return to calling process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* No data found-Not a dup*/
      ABWREC.ABWIX2 = AE0AW00.AE0AWSZM;
      while (ABWREC.ABWIX2 > 0
       && ABWREC.ABWIX2 != ABWREC.ABWIXM)
        if (AE0AM001.AE0AMCTY[ABWIXM] == AE0AM001.AE0AMCTY[ABWIX2])
          converseLib.validationFailed(178);
          set AE0AM001.AE0AMCTY[ABWIXM] cursor, bold;
          ABWREC.ABWPRCSN = "158"; /* Process number*/
          return;
        end
        ABWREC.ABWIX2 = ABWREC.ABWIX2 - 1;
      end
      AE0AW02.XCT-CTRY-CD[ABWIXM] = AE0AM001.AE0AMCTY[ABWIXM];
      return; /* Return to calling process*/
    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return error condition.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "158 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DABUY.VSCXCT01 ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSCXCT01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
  AE0AM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AE0A158

// Process valid input request
Function AE0A160()
   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    ABWREC.ABWTSP = ABWREC.ABWTSP - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    ABWREC.ABWTSP = ABWREC.ABWTSP + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end
  if (converseVar.eventKey is pf13) /* Scroll forward requested*/

    return; /* Return to previous process*/

  end
  if (AE0AW00.AE0AWOPT == "A") /* if add option selected*/
    ABWREC.ABWIXM = 1; /* Initialize line index*/
    while (ABWREC.ABWIXM <= AE0AW00.AE0AWSZM) /* Until end of lines*/
      if (AE0AM001.AE0AMSCH[ABWIXM] != " ")
        ABWREC.ABWNMO = 045;
        AE0A161(); /* Update add data*/
      end
      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

    end
    AE0AW00.AE0AWOPT = " ";
    ABWREC.ABWSWR = "Y";
  else
    ABWREC.ABWIXM = 1; /* Initialize line index*/
    while (ABWREC.ABWIXM <= AE0AW02.AE0AWIDX) /* Until end of lines*/
      if (AE0AW02.AE0AWATT[ABWIXM] == "D")
        AE0A162(); /* Delete  data*/
        ABWREC.ABWNMO = 045;
      else
        if (AE0AW02.AE0AWATT[ABWIXM] == "C")
          AE0A163(); /* Update  change  data*/
          ABWREC.ABWNMO = 045;
        end
      end
      ABWREC.ABWIXM = ABWREC.ABWIXM + 1; /* Increment line index*/

    end
    ABWREC.ABWSWR = "Y";
  end


end // end AE0A160

// Add data to database
Function AE0A161()
   /* ------------------------------------------------------------*/
   /* Format the data from the internal array.*/
   /* ------------------------------------------------------------*/

  set VSCXCT01 empty;

  XX0XS01();
  XP1REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  XP1REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VSCXCT01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT; /* Change date*/
  VSCXCT01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM; /* Change time*/
  VSCXCT01.PG-SCHED-SPCLT-CD = AE0AW02.PG-SCHED-SPCLT-CD[ABWIXM];
  VSCXCT01.XCT-CTRY-CD = AE0AW02.XCT-CTRY-CD[ABWIXM];

   /* ------------------------------------------------------------*/
   /* Add new row in the table.*/
   /* ------------------------------------------------------------*/
   /* If any error, indicate a system error.*/
   /* Format the data in the internal  array display line.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6920" ("A ", SQLCA, VSCXCT01) {isNoRefresh = yes, isExternal = yes};
  end
   /* ****************************************************/

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* ; commit*/
      return; /* return*/
    end
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "161 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE OF THE SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSCXCT01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AE0AM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to display map*/

end // end AE0A161

// Delete data from database
Function AE0A162()
  set VSCXCT01 empty;

  VSCXCT01.PG-SCHED-SPCLT-CD = AE0AW02.PG-SCHED-SPCLT-CD[ABWIXM];
  VSCXCT01.XCT-CTRY-CD = AE0AW02.XCT-CTRY-CD[ABWIXM];
  VSCXCT01.ZZ-CHNG-CNT = AE0AW02.ZZ-CHNG-CNT[ABWIXM];

   /* ------------------------------------------------------------*/
   /* delete row in the table.*/
   /* ------------------------------------------------------------*/
   /* If any error, indicate a system error.*/
   /* Format the data in the internal  array display line.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6920" ("D ", SQLCA, VSCXCT01) {isNoRefresh = yes, isExternal = yes};
  end
   /* ****************************************************/

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* ; commit*/
      return; /* return*/
    end
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "162 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE OF THE SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSCXCT01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AE0AM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to display map*/

end // end AE0A162

// Change data on database
Function AE0A163()
   /* ------------------------------------------------------------*/
   /* Format the data from the internal array.*/
   /* ------------------------------------------------------------*/

  set VSCXCT01 empty;

  XX0XS01();
  XP1REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  XP1REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  VSCXCT01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT; /* Change date*/
  VSCXCT01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM; /* Change time*/
  VSCXCT01.ZZ-CHNG-CNT = AE0AW02.ZZ-CHNG-CNT[ABWIXM];
  XP1REC.XP1BUYMM = XP1REC.XP1CBYMM;
  XP1REC.XP1BUYYY = XP1REC.XP1CBYYY;
   /* ------------- Y2K IN BEGIN --------------------------------*/
   /*  */
  if (XP1REC.XP1BUYYY > 60)
    XP1REC.XP1BUYCC = 19;
  else
    XP1REC.XP1BUYCC = 20;
  end
   /*  */
   /* ------------- Y2K IN END ----------------------------------*/
  XP1REC.AB3BUYMO = XP1REC.XP1BUYMO;
  VSCXCT01.PG-SCHED-SPCLT-CD = AE0AW02.PG-SCHED-SPCLT-CD[ABWIXM];
  VSCXCT01.XCT-CTRY-CD = AE0AW02.XCT-CTRY-CD[ABWIXM]; /* 019 Y2*/

   /* ------------------------------------------------------------*/
   /* update row in the table.*/
   /* ------------------------------------------------------------*/
   /* If any error, indicate a system error.*/
   /* Format the data in the internal  array display line.*/
   /* ------------------------------------------------------------*/

  try
    call "IO6920" ("U ", SQLCA, VSCXCT01) {isNoRefresh = yes, isExternal = yes};
  end
   /* ****************************************************/

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* ; commit*/
      return; /* return*/
    end
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  ABWREC.ABWPRCSN = "163 "; /* Process number*/
  TA1REC.TA1PGMNM = ABWREC.ABWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE OF THE SELECTED TABLE ROW";
  TA1REC.TA1MAP = ABWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DABUY  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSCXCT01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AE0AM001.XXXPRCNM = ABWREC.ABWERLOC; /* Process name*/

  exit stack; /* Exit to display map*/

end // end AE0A163

//*** RECORD=AE0AW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record AE0AW00 type basicRecord
  10 AE0AWACT AE0AWACT ; 
  10 AE0AWBEG AE0AWBEG ; 
  10 AE0AWMAX AE0AWMAX ; 
  10 AE0AWMNO AE0AWMNO ; 
  10 AE0AWNOU AE0AWNOU ; 
  10 AE0AWOPT AE0AWOPT ; 
  10 AE0AWNXT AE0AWNXT ; 
  10 AE0AWSZA AE0AWSZA ; 
  10 AE0AWSZM AE0AWSZM ; 
  10 AE0AW-START AE0AW-START ; 
  10 AE0AWSMG AE0AWSMG ; 
  10 AE0AWSCH AE0AWSCH ; 
end // end AE0AW00

//*** RECORD=AE0AW02 ****
// Temporary storage record for AE0A - Scheduler/Country table
// ***********************
Record AE0AW02 type basicRecord
  5 * char(552) ; 
    10 AE0AWLEN AE0AWLEN ; 
    10 AE0AWIDX AE0AWIDX ; 
    10 * char(39) [14] ; 
      15 AE0AWKEY AE0AWKEY ; 
        20 PG-SCHED-SPCLT-CD PG-SCHED-SPCLT-CD ; 
        20 XCT-CTRY-CD XCT-CTRY-CD ; 
      15 XCT-CTRY-DESC XCT-CTRY-DESC ; 
      15 AE0AWATT AE0AWATT ; 
      15 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end AE0AW02

// first time thru indicator
DataItem AE0AW-START char(4)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// number of active snapshots
DataItem AE0AWACT num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

DataItem AE0AWATT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Beginning member in array
DataItem AE0AWBEG num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

DataItem AE0AWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AE0AWKEY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length
DataItem AE0AWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of snapshots loaded
DataItem AE0AWMAX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// message number
DataItem AE0AWMNO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// no changes made
DataItem AE0AWNOU num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// next member in array
DataItem AE0AWNXT num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// option requested
DataItem AE0AWOPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pg1sc4cd
DataItem AE0AWSCH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// scheduler error msg
DataItem AE0AWSMG char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// affrec array size
DataItem AE0AWSZA num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// af0n map array size
DataItem AE0AWSZM num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

