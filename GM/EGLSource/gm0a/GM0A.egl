package gm0a;

import corpcom2.YSMREC;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXSTAT;
import corpy2.YSMSMDSC;
import corpy2.YSMSRCVL;
import corpy2.YSMSUMCD;
import corpy2.YSMSUMID;
import corpy2.YSMSYSPF;
import corpy2.YSMTBLPF;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
//*** PROGRAM=GM0A ****
// This application is a inq/updte for the GOAL DB2 TABLE MAINT
// system.  It will display multiple rows from a DB2 table for
// the user to view and/or modify.
// 
// Upon initial entry, the table is read and columns from the
// selected rows are formatted and saved in temporary storage,
// one display page per queue record.
// 
// The records are retrieved from temporary storage one at a
// time, for display to the user.  The user may page forward
// and backward, to view the rows that were selected.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          05/06/88  JWOOD   New application.
//          10/12/88  JWOOD   NONCSP OPTION ALL CALL STMNTS
//          03/17/89  JWOOD   xssegtr logic added
//          04/14/89  JWOOD   REMOVED SUM CD EDIT AS PER JBRUCE
//          12/02/91  JWOOD   FIXED CHGTM FOR CHANGE PROCESS
//          01/13/94  LSUTTO  SUB CODE EDIT RE-INSTATED TO
//                            ALLOW DATA MANAGEMENT TO ENTER
//                            ROWS OF DATA WITH REPEATING SUM
//                            CODES...AS PER CHRIS HYDE
// *********************
Program GM0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "GM00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  GM0AW01 GM0AW01; // record
  GM0AW02 GM0AW02; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use GM0AM.GM0AM001,  // forms
      GM0AM.GM0AM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPGM001: XPGM001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the application main process.*/
     /* ------------------------------------------------------------*/

    set GM0AW01 empty; /* Initialize working storage*/
    set GM0AW02 empty; /* Initialize temporary storage*/
    set YSMREC empty;
    set TA1REC empty;
    set TA5REC empty;
    set SQLCA empty;
    set ERRSQLCA empty;
    set GM0AM001 initial; /* Initialize map output area*/
    set GM0AM002 initial; /* Initialize map output area*/

    GM0AWYMD = VGVar.currentShortGregorianDate; /* initialize current date*/
    GM0AW01.GM0AWCEN = 19; /* initialize working century*/
    GM0AW01.GM0AWMAP = "1"; /* indicate map to be displayed*/
    GM0AW01.GM0AWMFL = "N"; /* initialize message flag*/
    GM0AW01.GM0AWPSW = "N"; /* initialize problem switch*/
    GM0AW01.GM0AWSWR = "N"; /* set request for data to no*/


    goto GM0A001; /* Converse application main process*/


    GM0A001: GM0A001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the application main process.*/
     /* ------------------------------------------------------------*/

    goto GM0A001; /* Converse application main process*/


  end // end main
end // end GM0A

// Application main process
Function GM0A001()
  GM0AW01.GM0AWCEN = 19;
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (GM0AW01.GM0AWMAP == "1") /* map 1 was requested*/
    GM0A100(); /* get data and display map #1*/
    exit stack;
  end

   /* ********************* ADD FUNCTION ************************/

  if (GM0AW01.GM0AWMAP == "2" /* map 2 was requested*/
   && GM0AW01.GM0AWFSW == "A") /* and add function*/
    GM0A200(); /* display sum tble add map*/
    exit stack;
  end

   /* ********************* CHANGE FUNCTION *********************/

  if (GM0AW01.GM0AWMAP == "2" /* map 2 was requested*/
   && GM0AW01.GM0AWFSW == "C") /* and change function*/
    GM0AW01.GM0AWIXM = 1; /* initialize index*/
    set GM0AM002 initial;
    while (GM0AW01.GM0AWIXM <= 13 /* until end of page*/
     && GM0AW01.GM0AWMAP != "1") /* and not map 1*/
      if (GM0AM001.GM0AMSEL[GM0AWIXM] == "S") /* if line selected*/
        GM0A300(); /* display sum cd tbl change map*/
      end
      GM0AW01.GM0AWIXM = GM0AW01.GM0AWIXM + 1; /* increment index*/
      if (GM0AW01.GM0AWIXM > 13) /* if last selection complete*/
        GM0AW01.YSMTBLPF = YSMREC.YSMTBLPF;
        GM0AW01.YSMSYSPF = YSMREC.YSMSYSPF;
        GM0AW01.YSMSUMID = 0; /* set for general select*/
        GM0AW01.YSMSUMCD = "**";
        GM0AW01.YSMSRCVL = "****";
        set YSMREC empty;
        set GM0AM002 initial; /* clear map 2*/
        GM0AW01.GM0AWOTS = "Y"; /* set onetime switch*/
        GM0AW01.GM0AWSWR = "Y"; /* set request for data*/
        GM0AW01.GM0AWPSW = "N"; /* set problem switch*/
        GM0AW01.GM0AWSK1 = " "; /* clear save keys*/
        GM0AW01.GM0AWSK2 = " "; /* clear save keys*/
        GM0AW01.GM0AWSK3 = 0; /* clear save keys*/
        GM0AW01.GM0AWSK4 = " "; /* clear save keys*/
        GM0AW01.GM0AWSK5 = " "; /* clear save keys*/
      end
    end
    GM0AW01.GM0AWMAP = "1"; /* set map to sum cd tbl browse*/
    exit stack;
  end

   /* ********************* DELETE FUNCTION *********************/

  if (GM0AW01.GM0AWMAP == "2" /* map 1 was selected*/
   && GM0AW01.GM0AWFSW == "D") /* and delete function*/
    GM0AW01.GM0AWSK1 = " "; /* clear save keys*/
    GM0AW01.GM0AWSK2 = " "; /* clear save keys*/
    GM0AW01.GM0AWSK3 = 0; /* clear save keys*/
    GM0AW01.GM0AWSK4 = " "; /* clear save keys*/
    GM0AW01.GM0AWSK5 = " "; /* clear save keys*/
    GM0AW01.GM0AWSPG = 0; /* set save page to zero*/
    GM0AW01.GM0AWSPG = GM0AW01.GM0AWTSP; /* save page num*/
    GM0AW01.GM0AWSIX = 0; /* initialize save index*/
    GM0AW01.GM0AWIXM = 1; /* initialize index*/

    while (GM0AW01.GM0AWIXM <= 13 /* until end of page*/
     && GM0AW01.GM0AWMAP != "1") /* and not map 1*/
      if (GM0AM001.GM0AMSEL[GM0AWIXM] == "S") /* if line selected*/
        GM0AW01.GM0AWSIX = GM0AW01.GM0AWIXM;
        GM0A400(); /* display sum cd tbl delete map*/
      end
      GM0AW01.GM0AWIXM = GM0AW01.GM0AWIXM + 1;
    end
    if (GM0AW01.GM0AWSIX <= 0 /* if save index less than 1*/
     && GM0AW01.GM0AWSPG != 1) /* and not first page*/
      GM0AW01.GM0AWSIX = 13; /* set index to last entry*/
      GM0AW01.GM0AWSPG = GM0AW01.GM0AWSPG - 1; /* decrement save pg*/
    else
      if (GM0AW01.GM0AWSIX <= 0 /* if save index less than 1*/
       && GM0AW01.GM0AWSPG == 1) /* and IS first page*/
        GM0AW01.GM0AWSIX = 1; /* set index to first entry*/
      end
    end
    GM0AW01.GM0AWMAP = "1"; /* set map to sum cd tbl browse*/
    exit stack;
  end

   /* ********************* COPY FUNCTION ***********************/

  if (GM0AW01.GM0AWMAP == "2" /* map 2 was selected*/
   && GM0AW01.GM0AWFSW == "X") /* and copy function*/
    GM0A500();
    exit stack;
  end

   /* *-------------------- INVALID MAP NUMBER ERROR ----------**/

  TA1REC.TA1TYPE = "APPL"; /* type of error*/
  TA1REC.TA1FUNC = "RETN"; /* termination function*/
  TA1REC.TA1PGMNM = "GM0A001"; /* process name*/
  TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
  TA1REC.TA1MAP = GM0AW01.GM0AWMAP; /* map name*/
  SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/
  XSPF4();



end // end GM0A001

// SELECT process
Function GM0A100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display map #1. Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (GM0AW01.GM0AWSWR == "Y") /* The request for data is yes*/
    GM0A110(); /* Obtain the data to display*/
  end

  GM0A120(); /* Format and display the map*/

  GM0A130(); /* Check attention identifier*/

  GM0A140(); /* Reset fields to normal intensity*/

  GM0A150(); /* Verify the entered data*/

  GM0A160(); /* Process valid input request*/


end // end GM0A100

// get display data from db2
Function GM0A110()
   /* ------------------------------------------------------------*/
   /* Purge any existing queue in temporary storage.*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At end of rows, add any partial page to the queue.*/
   /* At end of rows, close the selected set cursor.*/
   /* If no data found, display error message and return to*/
      /* previous process.*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/


  GM0A111(); /* Purge any temporary storage*/

  set YSMREC empty; /* Clear sum cd tbl   record*/

  YSMREC.YSMTBLPF = GM0AW01.YSMTBLPF; /* Set sumcd rec   search*/
  YSMREC.YSMSYSPF = GM0AW01.YSMSYSPF;
  if (GM0AW01.YSMSUMID > 0)
    YSMREC.YSMSUMID = GM0AW01.YSMSUMID;
  else
    YSMREC.YSMSUMID = -1; /* if no data, set for all sumids*/
  end
  YSMREC.YSMSUMCD = "**";
  YSMREC.YSMSRCVL = "****";

  GM0A112(); /* Select set and open the cursor*/
  if (SQLCA.VAGen_SQLCODE == 0) /* No errors were found*/
    set GM0AW02 empty; /* Clear temporary storage record*/
    GM0AW01.GM0AWIXM = 1; /* Initialize display line number*/
    GM0AW01.GM0AWSWC = "N"; /* Initialize end of file switch*/
    GM0AW01.GM0AWPSW = "N"; /* Init problem found switch*/
    while (GM0AW01.GM0AWSWC == "N" /* Until end of set or problem found*/
     && GM0AW01.GM0AWPSW == "N") /* or until a problem was found*/
      GM0A113(); /* Obtain data and format page*/
      if (GM0AW01.GM0AWIXM > 13) /* Page is full*/
        GM0A114(); /* Add page to temporary storage*/
      end
    end
    if (GM0AW01.GM0AWSWC == "Y") /* end of set was found*/
      if (GM0AW01.GM0AWIXM > 1) /* and some of the page was formatted*/
        GM0A114(); /* Add page to temporary storage*/
      end
      GM0AW01.GM0AWTSP = 1; /* Initialize page number*/
      GM0AW01.GM0AWSWR = "N"; /* Request for data completed*/
      GM0A115(); /* Close the selected set cursor*/
    end
  end

  if (GM0AW01.TA5TSQIX == 0) /* No data to display*/
    GM0AM001.XXXPRCNM = "GM0A110"; /* Process name*/
    converseLib.validationFailed(21); /* Indicate no data to display*/
    GM0AW01.GM0AWPSW = "N"; /* Indicate problem*/
  end


end // end GM0A110

// purge temp storage
Function GM0A111()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "GM0A"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (GM0AW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* TEMP    storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "GM0A111"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "GM0AM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* ERR  diagnosis routine*/

  end

  GM0AW01.GM0AWTSP = 0; /* Reset current page number*/
  GM0AW01.TA5TSQIX = 0; /* Reset highest page number*/


end // end GM0A111

// select set function
Function GM0A112()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  call "IO2640" ("S1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "GM0A112"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "GM0AM001"; /* Map name*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    GM0AM001.XXXPRCNM = "GM0A112"; /* Process name*/
    GM0AW01.GM0AWPSW = "Y"; /* Indicate problem*/

  end


end // end GM0A112

// fetch next row
Function GM0A113()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  call "IO2640" ("N1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    GM0AW01.GM0AWSWC = "Y"; /* end of set found*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      GM0AW01.GM0AWPSW = "Y"; /* Indicate problem*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "GM0A113"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "GM0AM001"; /* Map name*/
      TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      GM0AM001.XXXPRCNM = "GM0A113"; /* Process name*/

    else
      GM0AW02.YSMTBLPF[GM0AWIXM] = YSMREC.YSMTBLPF; /* Save data*/
      GM0AW02.YSMSYSPF[GM0AWIXM] = YSMREC.YSMSYSPF;
      GM0AW02.YSMSUMID[GM0AWIXM] = YSMREC.YSMSUMID;
      GM0AW02.YSMSUMCD[GM0AWIXM] = YSMREC.YSMSUMCD;
      GM0AW02.YSMSRCVL[GM0AWIXM] = YSMREC.YSMSRCVL;
      GM0AW02.YSMSMDSC[GM0AWIXM] = YSMREC.YSMSMDSC;
      GM0AW02.XXXSTAT[GM0AWIXM] = YSMREC.XXXSTAT;
      GM0AW02.ZZZSDT[GM0AWIXM] = YSMREC.ZZZSDT;
      GM0AW02.ZZZCHGDT[GM0AWIXM] = YSMREC.ZZZCHGDT;
      GM0AW02.ZZZCHGTM[GM0AWIXM] = YSMREC.ZZZCHGTM;
      GM0AW02.ZZZCHGCT[GM0AWIXM] = YSMREC.ZZZCHGCT;

      GM0AW01.GM0AWIXM = GM0AW01.GM0AWIXM + 1; /* Increment line index*/
    end
  end



end // end GM0A113

// add to temp storage
Function GM0A114()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  GM0AW02.GM0AWLEN = 663; /* Temporary storage length*/
  TA5REC.TA5APPID = "GM0A"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (GM0AW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* TEMP     storage subroutine*/

  if (TA5REC.TA5RTNCD == 0) /* everything is a-ok*/
    GM0AW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    GM0AW01.GM0AWIXM = 1; /* Reset display line number*/
    set GM0AW02 empty; /* Clear temporary storage record*/
  else /* error was found*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "GM0A114"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "GM0AM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    GM0AM001.XXXPRCNM = "GM0A114"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    GM0AW01.GM0AWPSW = "Y"; /* indicate problem has been found*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end GM0A114

// close select-set cursor
Function GM0A115()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "IO2640" ("C1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "GM0A115"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "GM0AM001"; /* Map name*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    GM0AM001.XXXPRCNM = "GM0A115"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    GM0AW01.GM0AWPSW = "Y"; /* Indicate problem*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end GM0A115

// format and display the map
Function GM0A120()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (GM0AW01.GM0AWPSW == "N") /* No error message to display*/
    set GM0AM001 initial; /* Clear map output area*/
    GM0AM001.GM0AMTPF = GM0AW01.YSMTBLPF;
    GM0AM001.GM0AMSPF = GM0AW01.YSMSYSPF;
    if (GM0AW01.YSMSUMID > 0)
      GM0AM001.GM0AMSMI = GM0AW01.YSMSUMID;
    end
    set GM0AM001.GM0AMSEL[1] cursor; /* set cursor to top field*/
    GM0A121(); /* Format the selected data*/
  end

  if (converseVar.validationMsgNum != 0) /* No error message to display*/
    set GM0AM001 alarm; /* Indicate sound alarm*/
  end

  if (GM0AW01.GM0AWMFL == "Y") /* If message flag is yes*/
    converseLib.validationFailed(44); /* Indicate update was successful*/
    GM0AM001.XXXPRCNM = "GM0A120"; /* Process name*/
    GM0AW01.GM0AWMFL = "N"; /* Reset message flag*/
  end

  GM0AM001.XXXCURDT = GM0AW01.GM0AWDTE; /* Current date*/

  converse GM0AM001 ;

  GM0AW01.GM0AWPSW = "N"; /* Reset problem switch*/

end // end GM0A120

// format selected data
Function GM0A121()
   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the plan sum cd tbl data in the map.*/
   /* ------------------------------------------------------------*/

  GM0AW01.GM0AWDFL = "N"; /* Initialize delete flag*/

  if (GM0AW01.GM0AWSK1 != " " /* If change save key set*/
   || GM0AW01.GM0AWSK2 != " " 
   || GM0AW01.GM0AWSK3 != 0   
   || GM0AW01.GM0AWSK4 != " " 
   || GM0AW01.GM0AWSK5 != " ")
    GM0AW01.GM0AWTSP = 1; /* Initialize search page*/
  end

  if (GM0AW01.GM0AWSPG > GM0AW01.TA5TSQIX) /* If save page was delete*/
    GM0AW01.GM0AWSPG = GM0AW01.GM0AWSPG - 1; /* decrement save page*/
  end

  if (GM0AW01.GM0AWSPG > 0) /* If save page was set*/
    GM0AW01.GM0AWTSP = GM0AW01.GM0AWSPG; /* Move in new page*/
    GM0AW01.GM0AWDFL = "Y"; /* set delete flag*/
    GM0A122(); /* Obtain temporary storage page*/
    set GM0AM001.GM0AMSEL[1] cursor; /* set cursor*/
    GM0AW01.GM0AWSIX = 0; /* Reset save index*/
    GM0AW01.GM0AWSPG = 0; /* Reset save page*/
  end

  if (COMMAREA.CAADDFL == "Y") /* If user can perform add*/
    set GM0AM001.GM0AMADD skip;
    set GM0AM001.GM0AMCPY skip; /* Display copy pf key*/
  end

  if (COMMAREA.CACHGFL == "Y") /* If user can perform change*/
    set GM0AM001.GM0AMCHG skip; /* Display change PF Key*/
  end

  if (COMMAREA.CADELFL == "Y") /* If user can perform delete*/
    set GM0AM001.GM0AMDEL skip; /* Display change PF Key*/
  end

  if (GM0AW01.TA5TSQIX == 0) /* if no data to display*/
    set GM0AM001.GM0AMTPF cursor; /* set cursor*/

    /* Do not format page*/

  else

    while (GM0AW01.GM0AWDFL == "N") /* While delete save key not found*/
      GM0A122(); /* Obtain temporary storage page*/
      GM0A123(); /* locate page with key*/
    end

    if (GM0AW01.GM0AWTSP != TA5REC.TA5TSQIX) /* Desired page not current*/
      GM0A122(); /* Obtain temporary storage page*/
    end

    set GM0AM001.GM0AMPGL skip; /* Display "PAGE" literal*/
    set GM0AM001.GM0AMOFL skip; /* Display "OF" literal*/

    GM0AM001.GM0AWTSP = GM0AW01.GM0AWTSP; /* Current page number*/
    set GM0AM001.GM0AWTSP skip; /* Display number*/
    GM0AM001.TA5TSQIX = GM0AW01.TA5TSQIX; /* Highest page number*/
    set GM0AM001.TA5TSQIX skip; /* Display number*/

    GM0AW01.GM0AWIXM = 1; /* Initialize line index*/
    while (GM0AW01.GM0AWIXM <= 13 /* Until end of lines*/
     && GM0AW02.YSMTBLPF[GM0AWIXM] != " ") /* or last line of data*/

      set GM0AM001.GM0AMSEL[GM0AWIXM] normal; /* Display select flag*/

      GM0AM001.YSMTBLPF[GM0AWIXM] = GM0AW02.YSMTBLPF[GM0AWIXM];
      GM0AM001.YSMSYSPF[GM0AWIXM] = GM0AW02.YSMSYSPF[GM0AWIXM];
      GM0AM001.GM0AMSID[GM0AWIXM] = GM0AW02.YSMSUMID[GM0AWIXM];
      GM0AM001.YSMSUMCD[GM0AWIXM] = GM0AW02.YSMSUMCD[GM0AWIXM];
      GM0AM001.YSMSRCVL[GM0AWIXM] = GM0AW02.YSMSRCVL[GM0AWIXM];

      GM0AW01.GM0AWIXM = GM0AW01.GM0AWIXM + 1; /* Increment line index*/

    end
  end


end // end GM0A121

// read temp storage
Function GM0A122()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  GM0AW02.GM0AWLEN = 663; /* Temporary storage length*/
  TA5REC.TA5APPID = "GM0A"; /* Application identification*/
  TA5REC.TA5TSQIX = GM0AW01.GM0AWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (GM0AW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temp storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "GM0A122"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "GM0AM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    GM0AM001.XXXPRCNM = "GM0A122"; /* Process name*/
    GM0AW01.GM0AWPSW = "Y"; /* Indicate Problem*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* Exit to redisplay map*/

  end


end // end GM0A122

// locate save key
Function GM0A123()
   /* ------------------------------------------------------------*/
   /* Locate the page in which the key is less than or*/
   /* equal to the Change Save Key.*/
   /* ------------------------------------------------------------*/

  if (GM0AW01.GM0AWSK1 == " " /* No table prefix entered*/
   && GM0AW01.GM0AWSK2 == " " 
   && GM0AW01.GM0AWSK3 == 0   
   && GM0AW01.GM0AWSK4 == " " 
   && GM0AW01.GM0AWSK5 == " ")
    GM0AW01.GM0AWDFL = "Y"; /* Indicate key found*/
  else

    GM0AW01.GM0AWIXM = 1; /* Initialize index*/

    while (GM0AW01.GM0AWIXM <= 13) /* Until key is found*/
      if (GM0AW02.YSMSRCVL[GM0AWIXM] == GM0AW01.GM0AWSK5
       && GM0AW02.YSMSUMCD[GM0AWIXM] == GM0AW01.GM0AWSK4
       && GM0AW02.YSMSUMID[GM0AWIXM] == GM0AW01.GM0AWSK3
       && GM0AW02.YSMSYSPF[GM0AWIXM] == GM0AW01.GM0AWSK2
       && GM0AW02.YSMTBLPF[GM0AWIXM] == GM0AW01.GM0AWSK1)
        set GM0AM001.GM0AMSEL[1] cursor; /* Initial cursor*/
        GM0AW01.GM0AWDFL = "Y"; /* Indicate page was found*/
        GM0AW01.GM0AWSK1 = " "; /* Reset starting code*/
        GM0AW01.GM0AWSK2 = " ";
        GM0AW01.GM0AWSK3 = 0;
        GM0AW01.GM0AWSK4 = " ";
        GM0AW01.GM0AWSK5 = " ";
        return; /* stop search*/
      end
      GM0AW01.GM0AWIXM = GM0AW01.GM0AWIXM + 1; /* Increment index*/
    end
    GM0AW01.GM0AWTSP = GM0AW01.GM0AWTSP + 1; /* Increment page*/
  end


end // end GM0A123

// Fetch next row and format
Function GM0A130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set GM0AM001 initial; /* Clear the map fields*/
    GM0AW01.GM0AWSWR = "N"; /* Set request for data = n*/
    set GM0AW02 empty; /* Clear temporary storage*/

    GM0AW01.YSMTBLPF = " "; /* Reset screen keys*/
    GM0AW01.YSMSYSPF = " ";
    GM0AW01.YSMSUMID = 0;
    GM0AW01.YSMSUMCD = " ";
    GM0AW01.YSMSRCVL = " ";

    GM0AW01.TA5TSQIX = 0; /* Reset page numbers*/
    GM0AW01.GM0AWTSP = 0;

    exit stack; /* Exit to redisplay map*/
  end

  if (GM0AM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      GM0A111(); /* Purge any temporary storage*/
      set YSMREC empty; /* Clear record*/
      COMMAREA.CATOAP = GM0AM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = GM0AM001.CAITEM; /* Application data*/
      XSGM001(); /* Exit to another application*/

      YSMREC.YSMTBLPF = GM0AW01.YSMTBLPF; /* Reset load keys*/
      YSMREC.YSMSYSPF = GM0AW01.YSMSYSPF;
      YSMREC.YSMSUMID = GM0AW01.YSMSUMID;
      YSMREC.YSMSUMCD = GM0AW01.YSMSUMCD;
      YSMREC.YSMSRCVL = GM0AW01.YSMSRCVL;

      GM0AW01.GM0AWSWR = "Y"; /* Set request for data switch*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end
    set GM0AM001.CATOAP cursor, modified, bold; /* Highlight*/
    GM0AM001.XXXPRCNM = "GM0A130"; /* Process name*/
    GM0AW01.GM0AWPSW = "Y"; /* Indicate problem*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    COMMAREA.CAFROMAP = "GM0A";
    COMMAREA.CAITEM = " "; /* clear item*/
    GM0A111(); /* Purge any temporary storage*/
    XSGM001(); /* Exit to another application*/
    GM0AM001.XXXPRCNM = "GM0A130"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "GM0AM001"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    GM0A111(); /* Purge any temporary storage*/
    XSGM001(); /* Exit to another application*/
    GM0AM001.XXXPRCNM = "GM0A130"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf15  /* and PF15 was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/

    GM0AM001.XXXPRCNM = "GM0A130"; /* Process name*/
    GM0AW01.GM0AWPSW = "Y"; /* Indicate problem*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf13 /* PF13 was pressed*/
   && COMMAREA.CAADDFL == "N")     /* and user add not authorized*/
    GM0AM001.XXXPRCNM = "GM0A130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    GM0AW01.GM0AWPSW = "Y"; /* Indicate problem*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf14 /* PF14 was pressed*/
   && COMMAREA.CACHGFL == "N")     /* and user chg not authorized*/
    GM0AM001.XXXPRCNM = "GM0A130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    GM0AW01.GM0AWPSW = "Y"; /* Indicate problem*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf15 /* PF15 was pressed*/
   && COMMAREA.CADELFL == "N")     /* and user del not authorized*/
    GM0AM001.XXXPRCNM = "GM0A130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    GM0AW01.GM0AWPSW = "Y"; /* Indicate problem*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf16 /* PF16 was pressed*/
   && COMMAREA.CAADDFL == "N")     /* and user add not authorized*/
    GM0AM001.XXXPRCNM = "GM0A130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    GM0AW01.GM0AWPSW = "Y"; /* Indicate problem*/
    exit stack; /* Exit to redisplay map*/
  end

end // end GM0A130

// Reset highlighted fields
Function GM0A140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set GM0AM001.GM0AMTPF initialAttributes; /* tbl prefix*/
  set GM0AM001.GM0AMSPF initialAttributes; /* sys prefix*/
  set GM0AM001.GM0AMSMI initialAttributes; /* sum id*/

  GM0AW01.GM0AWIXM = 1; /* Initialize line index*/

  while (GM0AW01.GM0AWIXM <= 13 /* Until end of lines*/
   && GM0AM001.YSMTBLPF[GM0AWIXM] != " ") /* and tbl pfx exists*/
    set GM0AM001.GM0AMSEL[GM0AWIXM] normal; /* Reset select flag*/
    GM0AW01.GM0AWIXM = GM0AW01.GM0AWIXM + 1; /* Increment line index*/
  end

  set GM0AM001.CATOAP initialAttributes; /* Commarea TO application*/
  set GM0AM001.CAITEM initialAttributes; /* Commarea application data*/


end // end GM0A140

// Verify the entered data
Function GM0A150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (GM0AM001.CAITEM > " ") /* Application data was entered*/
    set GM0AM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    GM0AW01.GM0AWPSW = "Y"; /* Indicate problem*/
    GM0AM001.XXXPRCNM = "GM0A150"; /* Process name*/
  end

  if (converseVar.eventKey is pf13) /* If add screen requested*/

      /* Return to previous process*/

  else

    if (converseVar.eventKey is pf7 /* Scroll back request*/
     || converseVar.eventKey is pf8) /* or scroll forward request*/
      GM0A151(); /* Verify scroll request*/
    else
      GM0A152(); /* Verify any changed data*/
    end

    if (GM0AW01.GM0AWPSW == "Y") /* Errors were found*/
      exit stack; /* Exit to redisplay map*/
    end
  end


end // end GM0A150

// verify scroll request
Function GM0A151()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && GM0AW01.GM0AWTSP < 2)       /* and no previous pages*/
    GM0AM001.XXXPRCNM = "GM0A151"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
    GM0AW01.GM0AWPSW = "Y"; /* Indicate problem*/
  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && GM0AW01.GM0AWTSP >= GM0AW01.TA5TSQIX) /* and no more pages*/
    GM0AM001.XXXPRCNM = "GM0A151"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
    GM0AW01.GM0AWPSW = "Y"; /* Indicate problem*/
  end

  GM0AW01.GM0AWIXM = 13; /* Initialize line index*/

  while (GM0AW01.GM0AWIXM > 0) /* Until end of lines*/
    if (GM0AM001.GM0AMSEL[GM0AWIXM] != GM0AW02.GM0AMSEL[GM0AWIXM])
      set GM0AM001.GM0AMSEL[GM0AWIXM] cursor, modified, bold; /* Highlight*/
      GM0AM001.XXXPRCNM = "GM0A151"; /* Process name*/
      converseLib.validationFailed(14); /* Modifications not allowed*/
      GM0AW01.GM0AWPSW = "Y"; /* Indicate problem*/
    end
    GM0AW01.GM0AWIXM = GM0AW01.GM0AWIXM - 1; /* Decrement line number*/
  end


end // end GM0A151

// verify changed data
Function GM0A152()
   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/

  GM0AW01.GM0AWSFL = "N"; /* Initialize selection flag*/
  GM0AW01.GM0AWIXM = 13; /* Initialize index*/

  while (GM0AW01.GM0AWIXM > 0) /* Until end of lines*/
    if (GM0AM001.GM0AMSEL[GM0AWIXM] != " ") /* If selection is not blank*/
      GM0AW01.GM0AWSFL = "Y"; /* Initialize selection flag*/
      if (GM0AM001.GM0AMSEL[GM0AWIXM] == "S") /* Save the key*/
         /* Next sentence*/
      else
        converseLib.validationFailed(13); /* Error message and highlight*/
        GM0AW01.GM0AWPSW = "Y"; /* Indicate problem*/
        GM0AM001.XXXPRCNM = "GM0A152"; /* Process name*/
        set GM0AM001.GM0AMSEL[GM0AWIXM] cursor, modified, bold;
        GM0AW01.GM0AWSWR = "N"; /* Set request for data*/
      end
    end
    GM0AW01.GM0AWIXM = GM0AW01.GM0AWIXM - 1; /* Increment line index*/
  end

  if (GM0AM001.GM0AMSMI == 0 /* If select flds are blank*/
   && GM0AM001.GM0AMSPF == " "
   && GM0AM001.GM0AMTPF == " "
   && GM0AM001.YSMTBLPF[1] != " ") /* and data exists*/
    GM0A111(); /* Purge temporary storage*/
    GM0AW01.GM0AWSWR = "N"; /* Set request for data to no*/
    GM0AW01.YSMTBLPF = " "; /* Reset working storage values*/
    GM0AW01.YSMSYSPF = " ";
    GM0AW01.YSMSUMID = 0;
    GM0AW01.YSMSUMCD = " ";
    GM0AW01.YSMSRCVL = " ";
    set GM0AM001.GM0AMTPF cursor;
    exit stack; /* Exit to redisplay map*/
  else
    if (GM0AM001.GM0AMSMI == 0 /* If select flds are blank*/
     && GM0AM001.GM0AMSPF == " "
     && GM0AM001.GM0AMTPF == " "
     && GM0AM001.YSMTBLPF[1] == " ") /* and no  data exists*/
      converseLib.validationFailed(34); /* Set error message 'enter data'*/
      GM0AW01.GM0AWSWR = "N"; /* Set request for data to no*/
      GM0AW01.GM0AWPSW = "Y"; /* Indicate problem*/
      GM0AM001.XXXPRCNM = "GM0A152"; /* Process name*/
    else
      if (GM0AM001.GM0AMTPF == GM0AW01.YSMTBLPF /* If no new data entered*/
       && GM0AM001.GM0AMSPF == GM0AW01.YSMSYSPF 
       && GM0AM001.GM0AMSMI == GM0AW01.YSMSUMID 
       && GM0AW01.GM0AWSFL == "N")             

         /* Continue on*/

      else
        if (GM0AM001.GM0AMTPF == GM0AW01.YSMTBLPF /* If no new data entered*/
         && GM0AM001.GM0AMSPF == GM0AW01.YSMSYSPF 
         && GM0AM001.GM0AMSMI == GM0AW01.YSMSUMID 
         && GM0AM001.YSMTBLPF[1] != " "           /* and data exists*/
         && GM0AW01.GM0AWSFL == "Y")             

           /* keep going*/

        else
          YSMREC.YSMTBLPF = GM0AM001.GM0AMTPF; /* save keys*/
          YSMREC.YSMSYSPF = GM0AM001.GM0AMSPF;
          YSMREC.YSMSUMID = GM0AM001.GM0AMSMI;
          GM0AW01.GM0AWSWR = "Y";
        end
      end
    end
  end


end // end GM0A152

// process valid request
Function GM0A160()
   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  GM0AW01.GM0AWIFL = "N"; /* Set inquiry flag*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    GM0AW01.GM0AWTSP = GM0AW01.GM0AWTSP - 1; /* Decrement page number*/
  else
    if (converseVar.eventKey is pf8) /* Scroll forward requested*/
      GM0AW01.GM0AWTSP = GM0AW01.GM0AWTSP + 1; /* Increment page number*/
    else
      if (converseVar.eventKey is pf13) /* PF13 was pressed*/
        GM0AW01.GM0AWMAP = "2"; /* Select Map #2*/
        GM0AW01.GM0AWFSW = "A"; /* Select add function*/
        converseLib.validationFailed(0); /* Clear error message field*/
      else
        if (converseVar.eventKey is pf14 /* PF14 was pressed*/
         && GM0AW01.GM0AWSFL == "Y")     /* and selection was made*/
          GM0AW01.GM0AWMAP = "2"; /* Select Map #2*/
          GM0AW01.GM0AWFSW = "C"; /* Select change function*/
          converseLib.validationFailed(0); /* Clear error message field*/
        else
          if (converseVar.eventKey is pf14 /* PF14 was pressed*/
           && GM0AW01.GM0AWSFL == "N")     /* and selection was not made*/
            converseLib.validationFailed(53); /* error message*/
            GM0AM001.XXXPRCNM = "GM0A160"; /* Process name*/
            GM0AW01.GM0AWPSW = "Y"; /* error message*/
          else
            if (converseVar.eventKey is pf15 /* PF15 was pressed*/
             && GM0AW01.GM0AWSFL == "Y")     /* and selection was made*/
              GM0AW01.GM0AWMAP = "2"; /* Select Map #2*/
              GM0AW01.GM0AWFSW = "D"; /* Select delete function*/
              converseLib.validationFailed(0); /* Clear error message field*/
            else
              if (converseVar.eventKey is pf15 /* PF15 was pressed*/
               && GM0AW01.GM0AWSFL == "N")     /* and selection was not made*/
                converseLib.validationFailed(53); /* error message*/
                GM0AM001.XXXPRCNM = "GM0A160"; /* Process name*/
                GM0AW01.GM0AWPSW = "Y"; /* error message*/
              else
                if (converseVar.eventKey is pf16 /* PF16 was pressed*/
                 && GM0AW01.GM0AWSFL == "Y")     /* and selection was made*/
                  GM0AW01.GM0AWMAP = "2"; /* Select Map #2*/
                  GM0AW01.GM0AWFSW = "X"; /* Select copy   function*/
                  converseLib.validationFailed(0); /* Clear error message field*/
                else
                  if (converseVar.eventKey is pf16 /* PF16 was pressed*/
                   && GM0AW01.GM0AWSFL == "N")     /* and selection was not made*/
                    converseLib.validationFailed(53); /* error message*/
                    GM0AM001.XXXPRCNM = "GM0A160"; /* Process name*/
                    GM0AW01.GM0AWPSW = "Y"; /* error message*/
                  else
                    if (converseVar.eventKey is enter /* enter was pressed*/
                     && GM0AW01.GM0AWSFL == "Y"       
                     /* and selection was made*/
                     && GM0AM001.GM0AMTPF == GM0AW01.YSMTBLPF
                     && GM0AM001.GM0AMSPF == GM0AW01.YSMSYSPF
                     && GM0AM001.GM0AMSMI == GM0AW01.YSMSUMID)
                      GM0AW01.GM0AWMAP = "2"; /* Select Map #2*/
                      GM0AW01.GM0AWFSW = "C"; /* Select chng funct*/
                      GM0AW01.GM0AWIFL = "Y"; /* Set inquiry flag*/
                      converseLib.validationFailed(0); /* Clear error message field*/
                    else
                      if (converseVar.eventKey is enter /* enter was pressed*/
                       && GM0AW01.GM0AWSFL == "N"       
                       /* and sel not was made*/
                       && GM0AM001.GM0AMTPF == GM0AW01.YSMTBLPF
                       && GM0AM001.GM0AMSPF == GM0AW01.YSMSYSPF
                       && GM0AM001.GM0AMSMI == GM0AW01.YSMSUMID)
                        converseLib.validationFailed(34); /* data must be entered*/
                        GM0AW01.GM0AWPSW = "Y"; /* error message*/
                        GM0AW01.GM0AWSWR = "N"; /* set rqst for data no*/
                        set GM0AM001.GM0AMSEL[1] cursor;
                      else
                        GM0AW01.YSMTBLPF = GM0AM001.GM0AMTPF; /* save code*/
                        GM0AW01.YSMSYSPF = GM0AM001.GM0AMSPF;
                        GM0AW01.YSMSUMID = GM0AM001.GM0AMSMI;
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end


end // end GM0A160

// ADD process
Function GM0A200()
   /* ------------------------------------------------------------*/
   /* This is the process used to display add map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  GM0A210(); /* Format and display the map*/

  GM0A220(); /* Check attention identifier*/

  GM0A230(); /* Reset fields to normal intensity*/

  GM0A240(); /* Verify the entered data*/

  GM0A250(); /* Process valid input request*/


end // end GM0A200

// Format the selected data
Function GM0A210()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (GM0AW01.GM0AWOTS != "N")
    if (GM0AM001.GM0AMTPF != "   ")
      GM0AM002.YSMTBLPF = GM0AM001.GM0AMTPF;
    end
    if (GM0AM001.GM0AMSPF != "  ")
      GM0AM002.YSMSYSPF = GM0AM001.GM0AMSPF;
    end
    if (GM0AM001.GM0AMSMI > 0)
      GM0AM002.YSMSUMID = GM0AM001.GM0AMSMI;
    end
    GM0AW01.GM0AWOTS = "N";
  end

  if (GM0AW01.GM0AWPSW == "N") /* No errors*/
    GM0AM002.GM0AMMSG = "PLEASE ENTER NEW TABLE DATA";
    GM0AM002.GM0AMFUN = " ADD  "; /* Set ADD title to map*/
  end

  GM0AW01.GM0AWCEN = 19;
  GM0AM002.XXXCURDT = GM0AW01.GM0AWDTE; /* Current date*/
  GM0AM002.ZZZSDT = GM0AW01.GM0AWDTE; /* Setup   date*/
  GM0AM002.ZZZCHGDT = GM0AW01.GM0AWDTE; /* Current date*/
  GM0AW01.GM0AWTGP = VGVar.currentFormattedTime; /* Current time*/
  GM0AW01.GM0AWTHR = GM0AW01.GM0AWTMH;
  GM0AW01.GM0AWTMI = GM0AW01.GM0AWTMM;
  GM0AM002.GM0AMCTM = GM0AW01.GM0AWTMG;
  GM0AM002.XXXSTAT = "A";

  if (GM0AW01.GM0AWPSW == "Y") /* error message to display*/
    set GM0AM002 alarm; /* Indicate sound alarm*/
  end

  if (GM0AW01.GM0AWMFL == "Y") /* If add was successful*/
    converseLib.validationFailed(44); /* display a message*/
    GM0AM002.XXXPRCNM = "GM0A210"; /* Process name*/
    GM0AW01.GM0AWMFL = "N"; /* Reset message flag*/
  end

  converse GM0AM002 ;

  GM0AW01.GM0AWPSW = "N"; /* Reset problem switch*/

end // end GM0A210

// check attention identifier
Function GM0A220()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set GM0AM002 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (GM0AM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = GM0AM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = GM0AM002.CAITEM; /* Application data*/
      GM0A111(); /* Purge temporary storage*/
      XSGM001(); /* Exit to another application*/
      if (GM0AW01.YSMTBLPF != " " /* If data keys were saved*/
       || GM0AW01.YSMSYSPF != " " 
       || GM0AW01.YSMSUMID != 0) 
        GM0AW01.GM0AWSWR = "Y"; /* Reset list loading*/
      end
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set GM0AM002.CATOAP cursor, modified, bold; /* Highlight*/
    GM0AM002.XXXPRCNM = "GM0A220"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    set GM0AW01 empty;
    GM0AW01.GM0AWMAP = "1"; /* Move to map 1*/
    GM0AW01.GM0AWMFL = "N"; /* Reset message flag*/
    GM0AW01.GM0AWPSW = "N"; /* Reset problem switch*/
    GM0AW01.GM0AWSWR = "N"; /* Reset request switch*/
    GM0AW01.GM0AWYMD = VGVar.currentShortGregorianDate;
    GM0AW01.GM0AWCEN = 19;
    set GM0AM001 initial;
    set GM0AM002 initial;
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "GM0AM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    GM0A111(); /* Purge temporary storage*/
    XSGM001(); /* Exit to another application*/
    GM0AM002.XXXPRCNM = "GM0A220"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    GM0AM002.XXXPRCNM = "GM0A220"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    GM0AW01.GM0AWPSW = "Y"; /* Indicate problem*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end GM0A220

// reset highlighted flds
Function GM0A230()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set GM0AM002.CATOAP initialAttributes; /* Commarea TO application*/
  set GM0AM002.CAITEM initialAttributes; /* Commarea application data*/
  set GM0AM002.YSMTBLPF initialAttributes;
  set GM0AM002.YSMSYSPF initialAttributes;
  set GM0AM002.YSMSUMID initialAttributes;
  set GM0AM002.YSMSUMCD initialAttributes;
  set GM0AM002.YSMSRCVL initialAttributes;
  set GM0AM002.XXXSTAT initialAttributes;
  set GM0AM002.ZZZSDT initialAttributes;
  set GM0AM002.ZZZCHGDT initialAttributes;
  set GM0AM002.GM0AMCTM initialAttributes;


end // end GM0A230

// validate entry data
Function GM0A240()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  GM0AW01.GM0AWDEF = "N"; /* Initialize data entered flag*/

  if (GM0AM002.CAITEM > " ") /* Application data was entered*/
    set GM0AM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    GM0AW01.GM0AWPSW = "Y"; /* Indicate problem*/
    GM0AM002.XXXPRCNM = "GM0A240"; /* Process name*/
  else
    if (converseVar.eventKey is enter /* If ENTER was pressed*/
     && GM0AM002.YSMTBLPF == " "      /* and no data was entered*/
     && GM0AM002.YSMSYSPF == " "      
     && GM0AM002.YSMSUMID == 0        
     && GM0AM002.YSMSUMCD == " "      
     && GM0AM002.YSMSRCVL == " "      
     && GM0AM002.YSMSMDSC == " ")    
      exit stack; /* Exit to redisplay map*/
    else
      GM0A241(); /* Validate input data*/
    end
  end


end // end GM0A240

// validate entered flds
Function GM0A241()
   /* ------------------------------------------------------------*/
   /* Validate any input data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  GM0AW01.GM0AWDEF = "Y"; /* Data has been entered*/

   /* edit input data field here*/

  if (GM0AM002.XXXSTAT != "A"
   && GM0AM002.XXXSTAT != "I")
    converseLib.validationFailed(36);
    GM0AW01.GM0AWPSW = "Y";
    GM0AM002.XXXPRCNM = "GM0A241";
    GM0AM002.GM0AMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    set GM0AM002.XXXSTAT cursor, modified, bold;
  end

  if (GM0AM002.YSMSRCVL <= "    "
   || GM0AM002.YSMSRCVL > "9999")
    converseLib.validationFailed(39);
    GM0AW01.GM0AWPSW = "Y";
    GM0AM002.XXXPRCNM = "GM0A241";
    GM0AM002.GM0AMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    set GM0AM002.YSMSRCVL cursor, modified, bold;
  end

  if (GM0AM002.YSMSMDSC < "                        A"
   || GM0AM002.YSMSMDSC > "ZZZZZZZZZZZZZZZZZZZZZZZZZ")
    converseLib.validationFailed(38);
    GM0AW01.GM0AWPSW = "Y";
    GM0AM002.XXXPRCNM = "GM0A241";
    GM0AM002.GM0AMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    set GM0AM002.YSMSMDSC cursor, modified, bold;
  end


  if (GM0AM002.YSMSUMID < 1
   || GM0AM002.YSMSUMID > 9999)
    converseLib.validationFailed(43);
    GM0AW01.GM0AWPSW = "Y";
    GM0AM002.XXXPRCNM = "GM0A241";
    GM0AM002.GM0AMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    set GM0AM002.YSMSUMID cursor, modified, bold;
  end

  if (GM0AM002.YSMSYSPF < "AA"
   || GM0AM002.YSMSYSPF > "ZZ")
    converseLib.validationFailed(41);
    GM0AW01.GM0AWPSW = "Y";
    GM0AM002.XXXPRCNM = "GM0A241";
    GM0AM002.GM0AMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    set GM0AM002.YSMSYSPF cursor, modified, bold;
  end

  if (GM0AM002.YSMTBLPF < "AAA"
   || GM0AM002.YSMTBLPF > "ZZZ")
    converseLib.validationFailed(40);
    GM0AW01.GM0AWPSW = "Y";
    GM0AM002.XXXPRCNM = "GM0A241";
    GM0AM002.GM0AMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    set GM0AM002.YSMTBLPF cursor, modified, bold;
  end


end // end GM0A241

// process valid request
Function GM0A250()
   /* ------------------------------------------------------------*/
   /* Verify that no table row exists for the agent.*/
   /* If found then display message that this row exists in*/
     /* either active or inactive status.*/
   /* If not found then add the row.*/
   /* ------------------------------------------------------------*/

  set YSMREC empty; /* clear record*/

  YSMREC.YSMTBLPF = GM0AM002.YSMTBLPF;
  YSMREC.YSMSYSPF = GM0AM002.YSMSYSPF;
  YSMREC.YSMSUMID = GM0AM002.YSMSUMID;
  YSMREC.YSMSUMCD = GM0AM002.YSMSUMCD;
  YSMREC.YSMSRCVL = GM0AM002.YSMSRCVL;
  YSMREC.YSMSMDSC = GM0AM002.YSMSMDSC;
  if (converseVar.eventKey is enter /* Enter was pressed*/
   && GM0AW01.GM0AWDEF == "Y"       /* and data was entered*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    GM0A251(); /* Select  table row*/
    if (SQLCA.VAGen_SQLCODE != 100) /* If row exists*/
      converseLib.validationFailed(52);
      GM0AW01.GM0AWPSW = "Y"; /* Indicate problem*/
      GM0AM002.XXXPRCNM = "GM0A250"; /* Process name*/
      GM0AW01.GM0AWSWR = "Y"; /* Set request for data switch*/
      set GM0AM002.YSMTBLPF modified, bold;
      set GM0AM002.YSMSYSPF modified, bold;
      set GM0AM002.YSMSUMID modified, bold;
      set GM0AM002.YSMSUMCD modified, bold;
      set GM0AM002.YSMSRCVL modified, bold;
    end
    if (GM0AW01.GM0AWPSW == "N") /* No errors exist*/
      GM0A252(); /* Add the new table row*/
      GM0AW01.GM0AWSK1 = GM0AM002.YSMTBLPF; /* Save locate keys*/
      GM0AW01.GM0AWSK2 = GM0AM002.YSMSYSPF;
      GM0AW01.GM0AWSK3 = GM0AM002.YSMSUMID;
      GM0AW01.GM0AWSK4 = GM0AM002.YSMSUMCD;
      GM0AW01.GM0AWSK5 = GM0AM002.YSMSRCVL;
      GM0AW01.GM0AWMFL = "Y"; /* Set message flag to yes*/
    end
  end

  if (GM0AW01.GM0AWPSW == "N") /* No errors exist*/
    GM0AW01.YSMTBLPF = GM0AM002.YSMTBLPF;
    GM0AW01.YSMSYSPF = GM0AM002.YSMSYSPF;
    GM0AW01.YSMSUMID = 0;
    GM0AW01.YSMSUMCD = "*";
    GM0AW01.YSMSRCVL = "****";
    GM0AW01.GM0AWSWR = "Y"; /* Set request for data switch*/
  end


end // end GM0A250

// select db2 table row
Function GM0A251()
   /* ------------------------------------------------------------*/
   /* This module select a table row from the sum cd table.*/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* ------------------------------------------------------------*/

  call "IO2640" ("S ", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "GM0A251"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "GM0AM002"; /* Map name*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    GM0AW01.GM0AWPSW = "Y"; /* Indicate Problem*/
    GM0AM001.XXXPRCNM = "GM0A251"; /* Process name*/
  end


end // end GM0A251

// add db2 tbl row
Function GM0A252()
   /* ------------------------------------------------------------*/
   /* This module adds a sum cd table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  YSMREC.YSMTBLPF = GM0AM002.YSMTBLPF;
  YSMREC.YSMSYSPF = GM0AM002.YSMSYSPF;
  YSMREC.YSMSUMID = GM0AM002.YSMSUMID;
  YSMREC.YSMSUMCD = GM0AM002.YSMSUMCD;
  YSMREC.YSMSRCVL = GM0AM002.YSMSRCVL;
  YSMREC.YSMSMDSC = GM0AM002.YSMSMDSC;
  YSMREC.XXXSTAT = GM0AM002.XXXSTAT;
  YSMREC.ZZZCHGTM = GM0AM002.GM0AMCTM;
  YSMREC.ZZZCHGDT = GM0AW01.GM0AWDTE;
  YSMREC.ZZZSDT = GM0AW01.GM0AWDTE;

  call "IO2640" ("A ", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* Add table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "GM0A252"; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
    TA1REC.TA1MAP = "GM0AM002"; /* Map name*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    GM0AM001.XXXPRCNM = "GM0A252"; /* Process name*/
  end


end // end GM0A252

// select db2 table row
Function GM0A253()
   /* ------------------------------------------------------------*/
   /* This module select a table row from the sum cd table.*/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* ------------------------------------------------------------*/

  call "IO2640" ("SA", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "GM0A253"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "GM0AM002"; /* Map name*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    GM0AW01.GM0AWPSW = "Y"; /* Indicate Problem*/
    GM0AM001.XXXPRCNM = "GM0A253"; /* Process name*/
  end


end // end GM0A253

// CHANGE process
Function GM0A300()
   /* ------------------------------------------------------------*/
   /* This is the process to display a change map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  GM0A310(); /* Obtain the data to display*/

  GM0A320(); /* Format and display the map*/

  GM0A330(); /* Check attention identifier*/

  GM0A340(); /* Reset Highlighted fields*/

  GM0A350(); /* Verify the entered data*/

  GM0A360(); /* Process valid input request*/


end // end GM0A300

// get display data
Function GM0A310()
   /* ------------------------------------------------------------*/
   /* Obtain data to be displayed on delete map from selected*/
     /* row on transit time browse map.*/
   /* ------------------------------------------------------------*/

  if (GM0AW01.GM0AWPSW == "N" /* No errors*/
   || GM0AW01.GM0AWURF == "Y") /* or update reload flag is yes*/
    YSMREC.YSMTBLPF = GM0AM001.YSMTBLPF[GM0AWIXM]; /* tbl pfx*/
    YSMREC.YSMSYSPF = GM0AM001.YSMSYSPF[GM0AWIXM]; /* sys pfx*/
    YSMREC.YSMSUMID = GM0AM001.GM0AMSID[GM0AWIXM]; /* sum id*/
    YSMREC.YSMSUMCD = GM0AM001.YSMSUMCD[GM0AWIXM]; /* sum cd*/
    YSMREC.YSMSRCVL = GM0AM001.YSMSRCVL[GM0AWIXM]; /* src vl*/
    GM0AW01.GM0AWSK1 = GM0AM001.YSMTBLPF[GM0AWIXM]; /* save keys*/
    GM0AW01.GM0AWSK2 = GM0AM001.YSMSYSPF[GM0AWIXM];
    GM0AW01.GM0AWSK3 = GM0AM001.GM0AMSID[GM0AWIXM];
    GM0AW01.GM0AWSK4 = GM0AM001.YSMSUMCD[GM0AWIXM];
    GM0AW01.GM0AWSK5 = GM0AM001.YSMSRCVL[GM0AWIXM];
    GM0A251(); /* Select data for map*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If selection was successful*/

      /* continue*/

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* selection was unsuccesful*/
        GM0AW01.GM0AWMAP = "1"; /* set to map 1*/
        GM0AW01.GM0AWSWR = "Y"; /* reload data*/
        converseLib.validationFailed(69); /* set error*/
        exit stack; /* exit to redisplay map*/
      end
    end
  end


end // end GM0A310

// format & display map 2
Function GM0A320()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (GM0AW01.GM0AWPSW == "N") /* No error*/
    set GM0AM002 initial; /* Clear map output area*/
    set GM0AM002.YSMTBLPF cursor; /* set cursor*/
    GM0AM002.GM0AMFUN = "CHANGE"; /* Move change literal to map*/
    GM0AM002.XXXCURDT = GM0AW01.GM0AWDTE; /* Current date*/
    GM0AM002.YSMTBLPF = YSMREC.YSMTBLPF; /* move table values*/
    GM0AM002.YSMSYSPF = YSMREC.YSMSYSPF;
    GM0AM002.YSMSUMID = YSMREC.YSMSUMID;
    GM0AM002.YSMSUMCD = YSMREC.YSMSUMCD;
    GM0AM002.YSMSRCVL = YSMREC.YSMSRCVL;
    GM0AM002.YSMSMDSC = YSMREC.YSMSMDSC;
    GM0AM002.XXXSTAT = YSMREC.XXXSTAT;
    GM0AM002.ZZZSDT = YSMREC.ZZZSDT;
    GM0AM002.ZZZCHGDT = YSMREC.ZZZCHGDT;
    GM0AM002.GM0AMCTM = YSMREC.ZZZCHGTM;
  end

  if (COMMAREA.CACHGFL == "N" /* if only inquire capabilities*/
   || GM0AW01.GM0AWIFL == "Y") /* or inquiry flag is set*/
    GM0AM002.GM0AMFUN = "INQUIRE"; /* Move inquire literal to map*/
    set GM0AM002.YSMTBLPF protect; /* Set all fields non-modifiable*/
    set GM0AM002.YSMSYSPF protect; /* Set all fields non-modifiable*/
    set GM0AM002.YSMSUMID protect; /* Set all fields non-modifiable*/
    set GM0AM002.YSMSUMCD protect; /* Set all fields non-modifiable*/
    set GM0AM002.YSMSRCVL protect; /* Set all fields non-modifiable*/
    set GM0AM002.YSMSMDSC protect; /* Set all fields non-modifiable*/
    set GM0AM002.XXXSTAT protect; /* Set all fields non-modifiable*/
    set GM0AM002.ZZZSDT protect; /* Set all fields non-modifiable*/
    set GM0AM002.ZZZCHGDT protect; /* Set all fields non-modifiable*/
    set GM0AM002.GM0AMCTM protect; /* Set all fields non-modifiable*/
  end

  if (GM0AW01.GM0AWPSW == "N" /* No error*/
   && GM0AW01.GM0AWIFL == "Y") /* and inquiry flag is set*/
    set GM0AM002.CATOAP cursor; /* Set cursor*/
  end

  if (converseVar.validationMsgNum != 0) /* Errors exist*/
    set GM0AM002 alarm;
  end


  converse GM0AM002 ;

  GM0AW01.GM0AWPSW = "N"; /* Initialize problem switch*/

end // end GM0A320

// check attention id
Function GM0A330()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set GM0AW01 empty;
    set YSMREC empty;
    GM0AW01.GM0AWCEN = 19;
    GM0AW01.GM0AWDTE = VGVar.currentShortGregorianDate;
    GM0AW01.GM0AWMAP = "1"; /* Move to map 1*/
    GM0AW01.GM0AWMFL = "N"; /* Reset message flag*/
    GM0AW01.GM0AWPSW = "N"; /* Reset problem switch*/
    GM0AW01.GM0AWSWR = "N"; /* Reset data request flag*/
    set GM0AM002 initial; /* Clear the map fields*/
    set GM0AM001 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (GM0AM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = GM0AM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = GM0AM002.CAITEM; /* Application data*/
      GM0A111(); /* Purge temporary storage*/
      XSGM001(); /* Exit to another application*/
      GM0AW01.GM0AWSWR = "Y"; /* Reset list loading*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set GM0AM002.CATOAP cursor, modified, bold; /* Highlight*/
    GM0AM002.XXXPRCNM = "GM0A330"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    GM0A111();
    set GM0AW01 empty;
    set YSMREC empty;
    GM0AW01.GM0AWCEN = 19;
    GM0AW01.GM0AWDTE = VGVar.currentShortGregorianDate;
    GM0AW01.GM0AWMAP = "1"; /* Move to map 1*/
    GM0AW01.GM0AWMFL = "N"; /* Reset message flag*/
    GM0AW01.GM0AWPSW = "N"; /* Reset problem switch*/
    GM0AW01.GM0AWSWR = "Y"; /* Reset data request flag*/
    GM0AW01.YSMTBLPF = GM0AM002.YSMTBLPF;
    GM0AW01.YSMSYSPF = GM0AM002.YSMSYSPF;
    GM0AW01.YSMSUMID = 0;
    GM0AW01.YSMSUMCD = "**";
    GM0AW01.YSMSRCVL = "****";
    set GM0AM002 initial; /* Clear the map fields*/
    set GM0AM001 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "GM0AM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    GM0A111(); /* Purge temporary storage*/
    XSGM001(); /* Exit to another application*/
    GM0AM002.XXXPRCNM = "GM0A330"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    GM0AM002.XXXPRCNM = "GM0A330"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    GM0AW01.GM0AWPSW = "Y"; /* Indicate problem*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end GM0A330

// reset highlighted flds
Function GM0A340()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set GM0AM002.CATOAP initialAttributes; /* Commarea TO application*/
  set GM0AM002.CAITEM initialAttributes; /* Commarea application data*/
  set GM0AM002.YSMTBLPF initialAttributes; /* Map fields*/
  set GM0AM002.YSMSYSPF initialAttributes; /* Map fields*/
  set GM0AM002.YSMSUMID initialAttributes; /* Map fields*/
  set GM0AM002.YSMSUMCD initialAttributes; /* Map fields*/
  set GM0AM002.YSMSRCVL initialAttributes; /* Map fields*/
  set GM0AM002.XXXSTAT initialAttributes; /* Map fields*/
  set GM0AM002.ZZZSDT initialAttributes; /* Map fields*/
  set GM0AM002.ZZZCHGDT initialAttributes; /* Map fields*/
  set GM0AM002.GM0AMCTM initialAttributes; /* Map fields*/


end // end GM0A340

// verify entry data
Function GM0A350()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  GM0AW01.GM0AWDEF = "N"; /* Initialize data entered flag*/

  if (GM0AM002.CAITEM > " ") /* Application data was entered*/
    set GM0AM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    GM0AW01.GM0AWPSW = "Y"; /* Indicate problem*/
    GM0AM002.XXXPRCNM = "GM0A350"; /* Process name*/
  else
    if (converseVar.eventKey is enter        /* If ENTER was pressed*/
     && GM0AM002.YSMTBLPF == YSMREC.YSMTBLPF /* and no data was entered*/
     && GM0AM002.YSMSYSPF == YSMREC.YSMSYSPF /* and no data was entered*/
     && GM0AM002.YSMSUMID == YSMREC.YSMSUMID /* and no data was entered*/
     && GM0AM002.YSMSUMCD == YSMREC.YSMSUMCD /* and no data was entered*/
     && GM0AM002.YSMSRCVL == YSMREC.YSMSRCVL /* and no data was entered*/
     && GM0AM002.YSMSMDSC == YSMREC.YSMSMDSC /* and no data was entered*/
     && GM0AM002.XXXSTAT == YSMREC.XXXSTAT)  /* and no data was entered*/
      GM0AM001.GM0AMSEL[GM0AWIXM] = " "; /* Clear selection*/
      exit stack; /* Exit to redisplay map*/
    else
      GM0A351(); /* Validate input data*/
    end
  end


end // end GM0A350

// validate input data
Function GM0A351()
   /* ------------------------------------------------------------*/
   /* Validate any input data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  GM0AW01.GM0AWDEF = "Y"; /* Data has been entered*/

   /* edit input data field here*/

  if (GM0AM002.XXXSTAT != "A"
   && GM0AM002.XXXSTAT != "I")
    converseLib.validationFailed(36);
    GM0AW01.GM0AWPSW = "Y";
    GM0AM002.XXXPRCNM = "GM0A351";
    GM0AM002.GM0AMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    set GM0AM002.XXXSTAT cursor, modified, bold;
  end

  if (GM0AM002.YSMSRCVL <= "    "
   || GM0AM002.YSMSRCVL > "9999")
    converseLib.validationFailed(39);
    GM0AW01.GM0AWPSW = "Y";
    GM0AM002.XXXPRCNM = "GM0A351";
    GM0AM002.GM0AMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    set GM0AM002.YSMSRCVL cursor, modified, bold;
  end

  if (GM0AM002.YSMSMDSC < "                        A"
   || GM0AM002.YSMSMDSC > "ZZZZZZZZZZZZZZZZZZZZZZZZZ")
    converseLib.validationFailed(38);
    GM0AW01.GM0AWPSW = "Y";
    GM0AM002.XXXPRCNM = "GM0A351";
    GM0AM002.GM0AMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    set GM0AM002.YSMSMDSC cursor, modified, bold;
  end


  if (GM0AM002.YSMSUMID < 1
   || GM0AM002.YSMSUMID > 9999)
    converseLib.validationFailed(43);
    GM0AW01.GM0AWPSW = "Y";
    GM0AM002.XXXPRCNM = "GM0A351";
    GM0AM002.GM0AMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    set GM0AM002.YSMSUMID cursor, modified, bold;
  end

  if (GM0AM002.YSMSYSPF < "AA"
   || GM0AM002.YSMSYSPF > "ZZ")
    converseLib.validationFailed(41);
    GM0AW01.GM0AWPSW = "Y";
    GM0AM002.XXXPRCNM = "GM0A351";
    GM0AM002.GM0AMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    set GM0AM002.YSMSYSPF cursor, modified, bold;
  end

  if (GM0AM002.YSMTBLPF < "AAA"
   || GM0AM002.YSMTBLPF > "ZZZ")
    converseLib.validationFailed(40);
    GM0AW01.GM0AWPSW = "Y";
    GM0AM002.XXXPRCNM = "GM0A351";
    GM0AM002.GM0AMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    set GM0AM002.YSMTBLPF cursor, modified, bold;
  end


end // end GM0A351

// process valid request
Function GM0A360()
   /* ------------------------------------------------------------*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  if (GM0AW01.GM0AWPSW == "Y") /* errors occurred*/
    exit stack;
  else
    if (converseVar.eventKey is enter /* ENTER was pressed*/
     && GM0AW01.GM0AWPSW == "N"       /* and no errors*/
     && GM0AW01.GM0AWIFL == "N"       /* and not inquiry*/
     && GM0AW01.GM0AWDEF == "Y")      /* and data was entered*/

      if (GM0AM002.YSMTBLPF != YSMREC.YSMTBLPF /* IF ANY KEY FLDS*/
       || GM0AM002.YSMSYSPF != YSMREC.YSMSYSPF /* HAVE*/
       || GM0AM002.YSMSUMID != YSMREC.YSMSUMID /* BEEN*/
       || GM0AM002.YSMSUMCD != YSMREC.YSMSUMCD /* CHANGED*/
       || GM0AM002.YSMSRCVL != YSMREC.YSMSRCVL)
        YSMREC.YSMTBLPF = GM0AM002.YSMTBLPF; /* MOVE NEW ROW KEYS*/
        YSMREC.YSMSYSPF = GM0AM002.YSMSYSPF;
        YSMREC.YSMSUMID = GM0AM002.YSMSUMID;
        YSMREC.YSMSUMCD = GM0AM002.YSMSUMCD;
        YSMREC.YSMSRCVL = GM0AM002.YSMSRCVL;
        GM0A253(); /* SELECT NEW ROW*/
        if (SQLCA.VAGen_SQLCODE == 0) /* IF NEW ROW EXISTS*/
          converseLib.validationFailed(51); /* ROW EXISTS ERROR*/
          GM0AM002.XXXPRCNM = "GM0A360";
          GM0AW01.GM0AWURF = "Y"; /* SET UPDATE RELOAD FLAG*/
          GM0AW01.GM0AWSWR = "Y"; /* SET REQUEST FOR DATA SWT*/
          GM0AW01.GM0AWPSW = "Y"; /* SET problem switch*/
          exit stack;
        end
      end
       /* PREPARE TO DELETE SELECTED ROW*/
      YSMREC.YSMTBLPF = GM0AM001.YSMTBLPF[GM0AWIXM];
      YSMREC.YSMSYSPF = GM0AM001.YSMSYSPF[GM0AWIXM];
      YSMREC.YSMSUMID = GM0AM001.GM0AMSID[GM0AWIXM];
      YSMREC.YSMSUMCD = GM0AM001.YSMSUMCD[GM0AWIXM];
      YSMREC.YSMSRCVL = GM0AM001.YSMSRCVL[GM0AWIXM];

      GM0A361(); /* DELETE SELECTED ROW*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* COMMIT THE DELETE*/

          /* CONTINUE THE CHANGE (ADD NEW ROW)*/

      YSMREC.YSMTBLPF = GM0AM002.YSMTBLPF; /* ADD NEW ROW*/
      YSMREC.YSMSYSPF = GM0AM002.YSMSYSPF;
      YSMREC.YSMSUMID = GM0AM002.YSMSUMID;
      YSMREC.YSMSUMCD = GM0AM002.YSMSUMCD;
      YSMREC.YSMSRCVL = GM0AM002.YSMSRCVL;
      YSMREC.YSMSMDSC = GM0AM002.YSMSMDSC;
      YSMREC.XXXSTAT = GM0AM002.XXXSTAT;
      YSMREC.ZZZSDT = GM0AW01.GM0AWDTE;
      GM0AW01.GM0AWTGP = VGVar.currentFormattedTime;
      GM0AW01.GM0AWTHR = GM0AW01.GM0AWTMH;
      GM0AW01.GM0AWTMI = GM0AW01.GM0AWTMM;
      YSMREC.ZZZCHGTM = GM0AW01.GM0AWTMG;
      YSMREC.ZZZCHGDT = GM0AW01.GM0AWDTE;


      GM0A362(); /* add table row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* row was added*/
        converseLib.validationFailed(44); /* update successful*/
        GM0AW01.GM0AWMFL = "Y";
        GM0AW01.GM0AWPSW = "N"; /* Set problem switch*/
        GM0AW01.GM0AWSWR = "N"; /* Set request for data switch*/
      else
        converseLib.validationFailed(52); /* row exists error*/
        GM0AM002.XXXPRCNM = "GM0A360";
        GM0AW01.GM0AWURF = "Y";
        GM0AW01.GM0AWSWR = "N";
        GM0AW01.GM0AWPSW = "Y";
        set GM0AM002.YSMTBLPF cursor, modified, bold;
        set GM0AM002.YSMTBLPF modified, bold;
        set GM0AM002.YSMSYSPF modified, bold;
        set GM0AM002.YSMSUMID modified, bold;
        set GM0AM002.YSMSRCVL modified, bold;
      end

    end
  end
  if (GM0AW01.GM0AWPSW == "N") /* IF no errors occured*/
    YSMREC.YSMTBLPF = GM0AM002.YSMTBLPF; /* save reload keys*/
    YSMREC.YSMSYSPF = GM0AM002.YSMSYSPF;
    YSMREC.YSMSUMID = GM0AM002.YSMSUMID;
    YSMREC.YSMSUMCD = GM0AM002.YSMSUMCD;
    YSMREC.YSMSRCVL = GM0AM002.YSMSRCVL;
    GM0AM001.GM0AMSEL[GM0AWIXM] = " "; /* Set blank to select*/
  else
    exit stack; /* Exit to redisplay map*/
  end


end // end GM0A360

// delete selected row
Function GM0A361()
   /* ------------------------------------------------------------*/
   /* Delete the sum cd tbl  row.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "IO2640" ("D ", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    GM0AW01.GM0AWSWC = "Y"; /* Indicate end of file*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        GM0AW01.GM0AWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        GM0AW01.GM0AWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "GM0A461"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "GM0AM002"; /* Map name*/
      TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      GM0AM001.XXXPRCNM = "GM0A361"; /* Process name*/

    end
  end


end // end GM0A361

// add    new row
Function GM0A362()
   /* ------------------------------------------------------------*/
   /* This module adds a sum cd table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  YSMREC.YSMTBLPF = GM0AM002.YSMTBLPF;
  YSMREC.YSMSYSPF = GM0AM002.YSMSYSPF;
  YSMREC.YSMSUMID = GM0AM002.YSMSUMID;
  YSMREC.YSMSUMCD = GM0AM002.YSMSUMCD;
  YSMREC.YSMSRCVL = GM0AM002.YSMSRCVL;
  YSMREC.YSMSMDSC = GM0AM002.YSMSMDSC;
  YSMREC.XXXSTAT = GM0AM002.XXXSTAT;
  YSMREC.ZZZCHGTM = GM0AW01.GM0AWTMG;
  YSMREC.ZZZCHGDT = GM0AW01.GM0AWDTE;
  YSMREC.ZZZSDT = GM0AW01.GM0AWDTE;

  call "IO2640" ("A ", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* Add table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "GM0A362"; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
    TA1REC.TA1MAP = "GM0AM002"; /* Map name*/
    TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    GM0AM001.XXXPRCNM = "GM0A362"; /* Process name*/
  end


end // end GM0A362

// DELETE function
Function GM0A400()
   /* ------------------------------------------------------------*/
   /* This is the process to display a delete map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  GM0A410(); /* Obtain the data to display*/

  GM0A420(); /* Format and display the map*/

  GM0A430(); /* Check attention identifier*/

  GM0A440(); /* Reset Highlighted fields*/

  GM0A450(); /* Verify the entered data*/

  GM0A460(); /* Process valid input request*/


end // end GM0A400

// get display data
Function GM0A410()
   /* ------------------------------------------------------------*/
   /* Obtain data to be displayed on delete map from selected*/
     /* row on Transit time browse map.*/
   /* ------------------------------------------------------------*/

  if (GM0AW01.GM0AWPSW == "N" /* No errors*/
   || GM0AW01.GM0AWURF == "Y") /* or update reload flag is yes*/
    YSMREC.YSMTBLPF = GM0AM001.YSMTBLPF[GM0AWIXM]; /* tbl pfx*/
    YSMREC.YSMSYSPF = GM0AM001.YSMSYSPF[GM0AWIXM]; /* sys pfx*/
    YSMREC.YSMSUMID = GM0AM001.GM0AMSID[GM0AWIXM]; /* sum id*/
    YSMREC.YSMSUMCD = GM0AM001.YSMSUMCD[GM0AWIXM]; /* sum id*/
    YSMREC.YSMSRCVL = GM0AM001.YSMSRCVL[GM0AWIXM]; /* sum id*/
    GM0A251(); /* Select data for map*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If selection was successful*/

      /* continue*/

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* selection was unsuccesful*/
        GM0AW01.GM0AWSIX = GM0AW01.GM0AWSIX - 1; /* decrement save index*/
        GM0AW01.GM0AWMAP = "1"; /* set to map 1*/
        GM0AW01.GM0AWSWR = "Y"; /* reload data*/
        converseLib.validationFailed(69); /* set error*/
        exit stack; /* exit to redisplay map*/
      end
    end
  end


end // end GM0A410

// format & display map 2
Function GM0A420()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (GM0AW01.GM0AWPSW == "N") /* No error*/
    set GM0AM002 initial; /* Clear map output area*/
    set GM0AM002.CATOAP cursor;
    GM0AM002.GM0AMMSG = "PRESS ENTER TO DELETE OR PA2/PF3 TO ABORT";
    GM0AM002.GM0AMFUN = "DELETE"; /* Move delete literal to map*/
    GM0AM002.XXXCURDT = GM0AW01.GM0AWDTE; /* Current date*/
    GM0AM002.YSMTBLPF = YSMREC.YSMTBLPF;
    GM0AM002.YSMSYSPF = YSMREC.YSMSYSPF;
    GM0AM002.YSMSUMID = YSMREC.YSMSUMID;
    GM0AM002.YSMSUMCD = YSMREC.YSMSUMCD;
    GM0AM002.YSMSRCVL = YSMREC.YSMSRCVL;
    GM0AM002.YSMSMDSC = YSMREC.YSMSMDSC;
    GM0AM002.XXXSTAT = YSMREC.XXXSTAT;
    GM0AM002.ZZZSDT = YSMREC.ZZZSDT;
    GM0AM002.ZZZCHGDT = YSMREC.ZZZCHGDT;
    GM0AM002.GM0AMCTM = YSMREC.ZZZCHGTM;
  end

  GM0AM002.XXXCURDT = GM0AW01.GM0AWDTE; /* Current date*/
  set GM0AM002.YSMTBLPF protect; /* Set all fields non-modifiable*/
  set GM0AM002.YSMSYSPF protect; /* Set all fields non-modifiable*/
  set GM0AM002.YSMSUMID protect; /* Set all fields non-modifiable*/
  set GM0AM002.YSMSUMCD protect; /* Set all fields non-modifiable*/
  set GM0AM002.YSMSRCVL protect; /* Set all fields non-modifiable*/
  set GM0AM002.YSMSMDSC protect; /* Set all fields non-modifiable*/
  set GM0AM002.XXXSTAT protect; /* Set all fields non-modifiable*/
  set GM0AM002.ZZZSDT protect; /* Set all fields non-modifiable*/
  set GM0AM002.ZZZCHGDT protect; /* Set all fields non-modifiable*/
  set GM0AM002.GM0AMCTM protect; /* Set all fields non-modifiable*/

  if (converseVar.validationMsgNum != 0) /* Errors exist*/
    set GM0AM002 alarm;
  end

  converse GM0AM002 ;

  GM0AW01.GM0AWPSW = "N"; /* Initialize problem switch*/

end // end GM0A420

// verify entry data
Function GM0A430()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2 /* PA2 was pressed*/
   || converseVar.eventKey is pf3)
    GM0AW01.GM0AWMAP = "1"; /* Move to map 1*/
    GM0AW01.GM0AWMFL = "N"; /* Reset message flag*/
    exit stack; /* Exit to redisplay map*/
  end

  if (GM0AM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = GM0AM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = GM0AM002.CAITEM; /* Application data*/
      GM0A111(); /* Purge temporary storage*/
      XSGM001(); /* Exit to another application*/
      GM0AW01.GM0AWTSP = GM0AW01.GM0AWSPG; /* reset current page*/
      GM0AW01.GM0AWSWR = "Y"; /* Reset list loading*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set GM0AM002.CATOAP cursor, modified, bold; /* Highlight*/
    GM0AM002.XXXPRCNM = "GM0A430"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end


  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "GM0AM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    GM0A111(); /* Purge temporary storage*/
    XSGM001(); /* Exit to another application*/
    GM0AM002.XXXPRCNM = "GM0A430"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    GM0AM002.XXXPRCNM = "GM0A430"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    GM0AW01.GM0AWPSW = "Y"; /* Indicate problem*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end GM0A430

// reset highlighted flds
Function GM0A440()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set GM0AM002.CATOAP initialAttributes; /* Commarea TO application*/
  set GM0AM002.CAITEM initialAttributes; /* Commarea application data*/


end // end GM0A440

// verify entry data
Function GM0A450()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (GM0AM002.CAITEM > " ") /* Application data was entered*/
    set GM0AM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    GM0AW01.GM0AWPSW = "Y"; /* Indicate problem*/
    GM0AM002.XXXPRCNM = "GM0A450"; /* Process name*/
  end


end // end GM0A450

// process valid request
Function GM0A460()
   /* ------------------------------------------------------------*/
   /* If no errors then delete.*/
   /* ------------------------------------------------------------*/

  if (GM0AW01.GM0AWPSW == "Y") /* errors occurred*/
    exit stack;
  else
    if (converseVar.eventKey is enter /* ENTER was pressed*/
     && GM0AW01.GM0AWPSW == "N")      /* and no errors*/

      YSMREC.YSMTBLPF = GM0AM002.YSMTBLPF; /* move in fields*/
      YSMREC.YSMSYSPF = GM0AM002.YSMSYSPF;
      YSMREC.YSMSUMID = GM0AM002.YSMSUMID;
      YSMREC.YSMSUMCD = GM0AM002.YSMSUMCD;
      YSMREC.YSMSRCVL = GM0AM002.YSMSRCVL;

      GM0A461(); /* Delete table row*/

      GM0AW01.GM0AWURF = "N"; /* Initialize upd reload flag*/
      if (SQLCA.VAGen_SQLCODE == 0) /* row was found*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* commit the update*/
        GM0AW01.GM0AWSIX = GM0AW01.GM0AWSIX - 1; /* decrement save index*/
        GM0AW01.GM0AWMFL = "Y"; /* Set message flag to yes*/
        GM0AW01.GM0AWSWR = "Y"; /* Set request for data switch*/
        GM0AM001.GM0AMSEL[GM0AWIXM] = " "; /* Set blank to select*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* row was not found*/
          converseLib.validationFailed(69); /* update error occured*/
          GM0AM002.XXXPRCNM = "GM0A460"; /* Process name*/
          GM0AW01.GM0AWURF = "Y"; /* Set update reload flag*/
          GM0AW01.GM0AWSWR = "Y"; /* Set request for data switch*/
          exit stack; /* exit to redisplay map*/
        end
      end

      if (GM0AW01.GM0AWPSW == "N") /* IF no errors occured*/
        GM0AW01.YSMTBLPF = YSMREC.YSMTBLPF; /* set load fields*/
        GM0AW01.YSMSYSPF = YSMREC.YSMSYSPF;
        GM0AW01.YSMSUMID = -1;
        GM0AW01.YSMSUMCD = "*";
        GM0AW01.YSMSRCVL = "****";
        set GM0AM002 initial; /* Clear map area*/
      else
        exit stack; /* Exit to redisplay map*/
      end
    end
  end


end // end GM0A460

// delete selected row
Function GM0A461()
   /* ------------------------------------------------------------*/
   /* Delete the sum cd tbl  row.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "IO2640" ("D ", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    GM0AW01.GM0AWSWC = "Y"; /* Indicate end of file*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        GM0AW01.GM0AWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        GM0AW01.GM0AWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "GM0A461"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "GM0AM002"; /* Map name*/
      TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      GM0AM001.XXXPRCNM = "GM0A461"; /* Process name*/

    end
  end


end // end GM0A461

// COPY process
Function GM0A500()
   /* ------------------------------------------------------------*/
   /* This is the process to display a copy   map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  GM0AWIXM = 1; /* initialize index*/
  while (GM0AW01.GM0AWOTS != "N"
   && GM0AW01.GM0AWIXM <= 13)
    if (GM0AM001.GM0AMSEL[GM0AWIXM] == "S")
      GM0AWOTS = "N";
      GM0A510(); /* obtain data to display*/
    else
      GM0AW01.GM0AWIXM = GM0AW01.GM0AWIXM + 1;
    end
  end

  GM0A520(); /* Format and display map 2*/

  GM0A530(); /* check attention identifier*/

  GM0A540(); /* reset highlighted fields*/

  GM0A550(); /* Verify the entered data*/

  GM0A560(); /* Process valid input request*/



end // end GM0A500

// get display data
Function GM0A510()
   /* ------------------------------------------------------------*/
   /* Obtain data to be displayed on copy   map from selected*/
     /* row on sum code tbl browse map.*/
   /* ------------------------------------------------------------*/


  if (GM0AW01.GM0AWPSW == "N" /* No errors*/
   || GM0AW01.GM0AWURF == "Y") /* or update reload flag is yes*/
    YSMREC.YSMTBLPF = GM0AM001.YSMTBLPF[GM0AWIXM]; /* tbl pfx*/
    YSMREC.YSMSYSPF = GM0AM001.YSMSYSPF[GM0AWIXM]; /* sys pfx*/
    YSMREC.YSMSUMID = GM0AM001.GM0AMSID[GM0AWIXM]; /* sum id*/
    YSMREC.YSMSUMCD = GM0AM001.YSMSUMCD[GM0AWIXM]; /* sum id*/
    YSMREC.YSMSRCVL = GM0AM001.YSMSRCVL[GM0AWIXM]; /* sum id*/
    GM0AW01.GM0AWSK1 = GM0AM001.YSMTBLPF[GM0AWIXM]; /* save keys*/
    GM0AW01.GM0AWSK2 = GM0AM001.YSMSYSPF[GM0AWIXM];
    GM0AW01.GM0AWSK3 = GM0AM001.GM0AMSID[GM0AWIXM];
    GM0AW01.GM0AWSK4 = GM0AM001.YSMSUMCD[GM0AWIXM];
    GM0AW01.GM0AWSK5 = GM0AM001.YSMSRCVL[GM0AWIXM];
    GM0A251(); /* Select data for map*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If selection was successful*/

      /* continue*/

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* selection was unsuccesful*/
        GM0AW01.GM0AWMAP = "1"; /* set to map 1*/
        GM0AW01.GM0AWSWR = "Y"; /* reload data*/
        converseLib.validationFailed(69); /* set error*/
        exit stack; /* exit to redisplay map*/
      end
    end
  end


end // end GM0A510

// format & display map 2
Function GM0A520()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (GM0AW01.GM0AWPSW == "N") /* No error*/
    set GM0AM002 initial; /* Clear map output area*/
    set GM0AM002.YSMTBLPF cursor; /* set cursor*/
    GM0AM002.GM0AMFUN = "COPY  "; /* Move copy literal to map*/
    GM0AM002.XXXCURDT = GM0AW01.GM0AWDTE; /* Current date*/
    GM0AM002.YSMTBLPF = YSMREC.YSMTBLPF; /* move table values*/
    GM0AM002.YSMSYSPF = YSMREC.YSMSYSPF;
    GM0AM002.YSMSUMID = YSMREC.YSMSUMID;
    GM0AM002.YSMSUMCD = YSMREC.YSMSUMCD;
    GM0AM002.YSMSRCVL = YSMREC.YSMSRCVL;
    GM0AM002.YSMSMDSC = YSMREC.YSMSMDSC;
    GM0AM002.XXXSTAT = "A";
    GM0AM002.ZZZSDT = GM0AW01.GM0AWDTE;
    GM0AM002.ZZZCHGDT = GM0AW01.GM0AWDTE;
    GM0AW01.GM0AWTGP = VGVar.currentFormattedTime; /* current time*/
    GM0AW01.GM0AWTHR = GM0AW01.GM0AWTMH;
    GM0AW01.GM0AWTMI = GM0AW01.GM0AWTMM;
    GM0AM002.GM0AMCTM = GM0AW01.GM0AWTMG;
  end

  if (GM0AW01.GM0AWPSW == "Y") /* error message to display*/
    set GM0AM002 alarm; /* indicate sound alarm*/
  end

  if (GM0AW01.GM0AWMFL == "Y") /* if add successful*/
    converseLib.validationFailed(44); /* display a message*/
    GM0AM002.XXXPRCNM = "GM0A520"; /* process name*/
    GM0AW01.GM0AWMFL = "N"; /* reset message flag*/
  end

          /* protection of map flds not done for copy process*/


  converse GM0AM002 ;


  GM0AW01.GM0AWPSW = "N"; /* Initialize problem switch*/

end // end GM0A520

// Check attention identifier
Function GM0A530()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set GM0AM002 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (GM0AM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = GM0AM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = GM0AM002.CAITEM; /* Application data*/
      GM0A111(); /* Purge temporary storage*/
      XSGM001(); /* Exit to another application*/
      GM0AW01.GM0AWSWR = "Y"; /* Reset list loading*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set GM0AM002.CATOAP cursor, modified, bold; /* Highlight*/
    GM0AM002.XXXPRCNM = "GM0A530"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    set GM0AW01 empty;
    GM0AW01.GM0AWMAP = "1"; /* Move to map 1*/
    GM0AW01.GM0AWOTS = "Y"; /* reset one time switch*/
    GM0AW01.GM0AWMFL = "N"; /* Reset message flag*/
    GM0AW01.GM0AWPSW = "N"; /* Reset problem switch*/
    GM0AW01.GM0AWSPG = 0; /* reset save page*/
    GM0AW01.YSMTBLPF = YSMREC.YSMTBLPF;
    GM0AW01.YSMSYSPF = YSMREC.YSMSYSPF;
    GM0AW01.YSMSUMID = 0;
    GM0AW01.YSMSUMCD = "**";
    GM0AW01.YSMSRCVL = "****";
    GM0AW01.GM0AWSWR = "Y";
    set YSMREC empty;
    set GM0AM001 initial;
    set GM0AM002 initial;
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "GM0AM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    GM0A111(); /* Purge temporary storage*/
    XSGM001(); /* Exit to another application*/
    GM0AM002.XXXPRCNM = "GM0A530"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    GM0AM002.XXXPRCNM = "GM0A530"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    GM0AW01.GM0AWPSW = "Y"; /* Indicate problem*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end GM0A530

// Reset highlighted fields
Function GM0A540()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set GM0AM002.CATOAP initialAttributes; /* Commarea TO application*/
  set GM0AM002.CAITEM initialAttributes; /* Commarea application data*/
  set GM0AM002.YSMTBLPF initialAttributes; /* Map fields*/
  set GM0AM002.YSMSYSPF initialAttributes; /* Map fields*/
  set GM0AM002.YSMSUMID initialAttributes; /* Map fields*/
  set GM0AM002.YSMSUMCD initialAttributes; /* Map fields*/
  set GM0AM002.YSMSRCVL initialAttributes; /* Map fields*/
  set GM0AM002.XXXSTAT initialAttributes; /* Map fields*/
  set GM0AM002.ZZZSDT initialAttributes; /* Map fields*/
  set GM0AM002.ZZZCHGDT initialAttributes; /* Map fields*/
  set GM0AM002.GM0AMCTM initialAttributes; /* Map fields*/


end // end GM0A540

// Verify entered data
Function GM0A550()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  GM0AW01.GM0AWDEF = "N"; /* Initialize data entered flag*/

  if (GM0AM002.CAITEM > " ") /* Application data was entered*/
    set GM0AM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    GM0AW01.GM0AWPSW = "Y"; /* Indicate problem*/
    GM0AM002.XXXPRCNM = "GM0A550"; /* Process name*/
  else
    if (converseVar.eventKey is enter        /* If ENTER was pressed*/
     && GM0AM002.YSMTBLPF == YSMREC.YSMTBLPF /* and no data was changed*/
     && GM0AM002.YSMSYSPF == YSMREC.YSMSYSPF /* and no data was changed*/
     && GM0AM002.YSMSUMID == YSMREC.YSMSUMID /* and no data was changed*/
     && GM0AM002.YSMSUMCD == YSMREC.YSMSUMCD /* and no data was changed*/
     && GM0AM002.YSMSRCVL == YSMREC.YSMSRCVL) /* and no data was changed*/
      converseLib.validationFailed(46);
      GM0AW01.GM0AWPSW = "Y";
      GM0AM002.XXXPRCNM = "GM0A550";
      exit stack; /* Exit to redisplay map*/
    else
      GM0A551(); /* Validate input data*/
    end
  end


end // end GM0A550

// Validate entered data
Function GM0A551()
   /* ------------------------------------------------------------*/
   /* Validate any input data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  GM0AW01.GM0AWDEF = "Y"; /* Data has been entered*/

   /* edit input data field here*/

  if (GM0AM002.XXXSTAT != "A"
   && GM0AM002.XXXSTAT != "I")
    converseLib.validationFailed(36);
    GM0AW01.GM0AWPSW = "Y";
    GM0AM002.XXXPRCNM = "GM0A551";
    GM0AM002.GM0AMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    set GM0AM002.XXXSTAT cursor, modified, bold;
  end

  if (GM0AM002.YSMSMDSC <= "                        A"
   || GM0AM002.YSMSMDSC > "ZZZZZZZZZZZZZZZZZZZZZZZZZ")
    converseLib.validationFailed(38);
    GM0AW01.GM0AWPSW = "Y";
    GM0AM002.XXXPRCNM = "GM0A551";
    GM0AM002.GM0AMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    set GM0AM002.YSMSMDSC cursor, modified, bold;
  end

  if (GM0AM002.YSMSRCVL <= "   A"
   || GM0AM002.YSMSRCVL > "9999")
    converseLib.validationFailed(39);
    GM0AW01.GM0AWPSW = "Y";
    GM0AM002.XXXPRCNM = "GM0A551";
    GM0AM002.GM0AMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    set GM0AM002.YSMSRCVL cursor, modified, bold;
  end


  if (GM0AM002.YSMSUMID < 1
   || GM0AM002.YSMSUMID > 9999)
    converseLib.validationFailed(43);
    GM0AW01.GM0AWPSW = "Y";
    GM0AM002.XXXPRCNM = "GM0A551";
    GM0AM002.GM0AMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    set GM0AM002.YSMSUMID cursor, modified, bold;
  end

  if (GM0AM002.YSMSYSPF < "AA"
   || GM0AM002.YSMSYSPF > "ZZ")
    converseLib.validationFailed(41);
    GM0AW01.GM0AWPSW = "Y";
    GM0AM002.XXXPRCNM = "GM0A551";
    GM0AM002.GM0AMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    set GM0AM002.YSMSYSPF cursor, modified, bold;
  end

  if (GM0AM002.YSMTBLPF < "AAA"
   || GM0AM002.YSMTBLPF > "ZZZ")
    converseLib.validationFailed(40);
    GM0AW01.GM0AWPSW = "Y";
    GM0AM002.XXXPRCNM = "GM0A551";
    GM0AM002.GM0AMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    set GM0AM002.YSMTBLPF cursor, modified, bold;
  end


end // end GM0A551

// Process valid request
Function GM0A560()
   /* ------------------------------------------------------------*/
   /* Verify that no table row exists for the agent.*/
   /* If found then display message that this row exists in*/
     /* either active or inactive status.*/
   /* If not found then add the row.*/
   /* ------------------------------------------------------------*/

  if (GM0AW01.GM0AWPSW == "Y") /* exit if errors occurred*/
    exit stack;
  end

  set YSMREC empty; /* clear record*/

  YSMREC.YSMTBLPF = GM0AM002.YSMTBLPF;
  YSMREC.YSMSYSPF = GM0AM002.YSMSYSPF;
  YSMREC.YSMSUMID = GM0AM002.YSMSUMID;
  YSMREC.YSMSUMCD = GM0AM002.YSMSUMCD;
  YSMREC.YSMSRCVL = GM0AM002.YSMSRCVL;
  if (converseVar.eventKey is enter /* Enter was pressed*/
   && GM0AW01.GM0AWDEF == "Y"       /* and data was entered*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    GM0A251(); /* Select  table row*/
    if (SQLCA.VAGen_SQLCODE != 100) /* If row exists*/
      converseLib.validationFailed(52);
      GM0AW01.GM0AWPSW = "Y"; /* Indicate problem*/
      GM0AM002.XXXPRCNM = "GM0A560"; /* Process name*/
      GM0AW01.GM0AWSWR = "Y"; /* Set request for data switch*/
      set GM0AM002.YSMTBLPF modified, bold;
      set GM0AM002.YSMSYSPF modified, bold;
      set GM0AM002.YSMSUMID modified, bold;
      set GM0AM002.YSMSUMCD modified, bold;
      set GM0AM002.YSMSRCVL modified, bold;
    end
    if (GM0AW01.GM0AWPSW == "N") /* No errors exist*/
      GM0A252(); /* Add the new table row*/
      GM0AW01.GM0AWMFL = "Y";
    end
  end

  if (GM0AW01.GM0AWPSW == "N") /* No errors exist*/
    GM0A111(); /* purge temp storage*/
    GM0AW01.GM0AWSIX = GM0AW01.GM0AWSIX - 1; /* decrement save index*/
    GM0AM001.GM0AMSEL[GM0AWIXM] = " "; /* set blank to sel*/
    GM0AW01.YSMTBLPF = GM0AM002.YSMTBLPF;
    GM0AW01.YSMSYSPF = GM0AM002.YSMSYSPF;
    GM0AW01.YSMSUMID = 0;
    GM0AW01.YSMSUMCD = "*";
    GM0AW01.YSMSRCVL = "****";
    set GM0AM002 initial; /* Clear map*/
    GM0AW01.GM0AWSWR = "Y";
  else
    exit stack;
  end

end // end GM0A560

// Application initialization
Function XPGM001()
   /* ------------------------------------------------------------*/
   /* Ensure that the COMMAREA has been properly formatted.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

   /* ------------------------------------------------------------*/
   /* Set segmented transaction id*/
   /* ------------------------------------------------------------*/

  XSSEGTR(); /* Set segmented transaction id*/

   /* ------------------------------------------------------------*/
   /* Initialize CSP special function data items.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/


end // end XPGM001

// Exit to another application
Function XSGM001()
   /* ------------------------------------------------------------*/
   /* Set the application to be invoked for PF1 or PF4.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/

    COMMAREA.CATOAP = "GD01"; /* Indicate Goal Documentation*/

  end

  if (converseVar.eventKey is pf4) /* PF4 was pressed*/

    COMMAREA.CATOAP = "MN0M"; /* Indicate Master Menu*/

  end


   /* ------------------------------------------------------------*/
   /* Save the application user area in the COMMAREA.*/
   /* ------------------------------------------------------------*/



   /* ------------------------------------------------------------*/
   /* Transfer control to the specified application.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CAFROMAP = "GM0A"; /* From application*/
  XSEXIT(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* If transfer failed, return an error to the calling process.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CAITEM = " "; /* Clear any application data*/

  if (COMMAREA.CASECRC == 3 /* Application not found*/
   || COMMAREA.CASECRC == 4) /* or transfer not allowed*/

    converseLib.validationFailed(6); /* Indicate not allowed*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/

  end


end // end XSGM001

//*** RECORD=GM0AW01 ****
// Working storage for gm0a - goal maintenance
// ***********************
Record GM0AW01 type basicRecord
  10 GM0AWIXM GM0AWIXM ; 
  10 GM0AWSIX GM0AWSIX ; 
  10 GM0AWSWC GM0AWSWC ; 
  10 GM0AWPSW GM0AWPSW ; 
  10 GM0AWOTS GM0AWOTS ; 
  10 GM0AWSWR GM0AWSWR ; 
  10 GM0AWTSP GM0AWTSP ; 
  10 GM0AWSPG GM0AWSPG ; 
  10 GM0AWMAP GM0AWMAP ; 
  10 GM0AWFSW GM0AWFSW ; 
  10 GM0AWSK1 GM0AWSK1 ; 
  10 GM0AWSK2 GM0AWSK2 ; 
  10 GM0AWSK3 GM0AWSK3 ; 
  10 GM0AWSK4 GM0AWSK4 ; 
  10 GM0AWSK5 GM0AWSK5 ; 
  10 YSMTBLPF YSMTBLPF ; 
  10 YSMSYSPF YSMSYSPF ; 
  10 YSMSUMID YSMSUMID ; 
  10 YSMSUMCD YSMSUMCD ; 
  10 YSMSRCVL YSMSRCVL ; 
  10 GM0AWSFL GM0AWSFL ; 
  10 GM0AWMFL GM0AWMFL ; 
  10 GM0AWURF GM0AWURF ; 
  10 GM0AWDEF GM0AWDEF ; 
  10 GM0AWIFL GM0AWIFL ; 
  10 GM0AWDFL GM0AWDFL ; 
  10 GM0AWDTE GM0AWDTE ; 
    15 GM0AWCEN GM0AWCEN ; 
    15 GM0AWYMD GM0AWYMD ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 GM0AWTGP GM0AWTGP ; 
    15 GM0AWTMH GM0AWTMH ; 
    15 * char(1) ; 
    15 GM0AWTMM GM0AWTMM ; 
    15 * char(1) ; 
    15 GM0AWTMS GM0AWTMS ; 
  10 GM0AWTMG GM0AWTMG ; 
    15 GM0AWTHR GM0AWTHR ; 
    15 GM0AWTMI GM0AWTMI ; 
end // end GM0AW01

//*** RECORD=GM0AW02 ****
// Temporary storage record for GM0a - sum cd db2 tbl maint
// ***********************
Record GM0AW02 type basicRecord
  10 GM0AWLEN GM0AWLEN ; 
  10 GM0AWLIN GM0AWLIN [13] ; 
    15 GM0AMSEL GM0AMSEL ; 
    15 YSMTBLPF YSMTBLPF ; 
    15 YSMSYSPF YSMSYSPF ; 
    15 YSMSUMID YSMSUMID ; 
    15 YSMSUMCD YSMSUMCD ; 
    15 YSMSRCVL YSMSRCVL ; 
    15 YSMSMDSC YSMSMDSC ; 
    15 XXXSTAT XXXSTAT ; 
    15 ZZZSDT ZZZSDT ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 ZZZCHGCT ZZZCHGCT ; 
end // end GM0AW02

// selection field
DataItem GM0AMSEL char(1)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

// working century
DataItem GM0AWCEN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data entered  flag
DataItem GM0AWDEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// delete        flag
DataItem GM0AWDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working date
DataItem GM0AWDTE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// add/delete function switch
DataItem GM0AWFSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// inquiry       flag
DataItem GM0AWIFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem GM0AWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temp stge lgnth (663)
DataItem GM0AWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data display line
DataItem GM0AWLIN char(52)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map to be displayed
DataItem GM0AWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message flag
DataItem GM0AWMFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// one time switch
DataItem GM0AWOTS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// problem switch
DataItem GM0AWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection flag
DataItem GM0AWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save index
DataItem GM0AWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ysmtblpf save key1
DataItem GM0AWSK1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ysmsyspf save key2
DataItem GM0AWSK2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ysmsumid save key3
DataItem GM0AWSK3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ysmsumcd save key4
DataItem GM0AWSK4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ysmsrcvl save key5
DataItem GM0AWSK5 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save page
DataItem GM0AWSPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem GM0AWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem GM0AWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current time(hh:mm:ss)
DataItem GM0AWTGP char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hh
DataItem GM0AWTHR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// secondary time group
DataItem GM0AWTMG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hh
DataItem GM0AWTMH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// mm
DataItem GM0AWTMI num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mm
DataItem GM0AWTMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current seconds (ss)
DataItem GM0AWTMS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current temporary storage page
DataItem GM0AWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// update reload flag
DataItem GM0AWURF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working yymmdd
DataItem GM0AWYMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

