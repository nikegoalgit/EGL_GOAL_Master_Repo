package pg0b;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import ff.common.*;
import fg.common.*;
import fk.common.*;
import fy.common.*;
import ku.common.*;
import pa.common.*;
import pc.common.*;
import pg.common.*;
import pw.common.*;
import rd.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PG0B ****
// This application is the style development inquiry/mainten-
// ance program.  The user will enter from the main menu.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 08/09/89   LREIN    Created.
// 10/25/90   trober   added edit for "show on fcst" msty ne 0.
// 12/12/90   JJUCH    Replaced SQL 100 check with -305 when
//                     summing msty qty.
// 07/25/91   MDANGE   Changed to submit footwear forecast job
//                     FF2821 when category or type are changed
// 08/08/91   JMCLAU   added an edit so when the style group
//                     is changed and not on the style group
//                     table, it will check the style develop-
//                     ment table to see if the style is valid
//                     before setting an error message.
// 08/20/91   JMCLAU   chaned size range field from 14 to 20
//                     character field in the map.
// 08/29/91   JALLE1   extend 1st-fut-bk-mo and 1st-prop-bk-mo
//                     to include day - new format is mmddyy.
// 09/03/91   JMCLAU   added an edit for 'show on forecast fl'.
//                     when it changes add a audit record.
// 10/14/91   MDANGE   Change logic of submission of FF2821.
//                     Will submit test jcl in test environment
//                     and prod jcl in production environment.
// 11/06/91   JMCLAU   Remove mold and last from the map.
// 04/17/92   JMCLAU   Put in code to process xml and xmc codes
//                     when writing to the dprodg.vsdaud01 tbl.
// 06/10/92   JMCLAU   June table changes. added fk-nbr-airbag-
//                     shoe, pg-nairbag-mod-fl, sy-duty-rt-cd,
//                     pg-duty-rt-mod-fl to pg0bw04 recd.
// 08/13/92   LDELUH   Allow entry of year up to 4 out from
//                     current for 1st fut bk dt.
// 08/18/92   LDELUH   Allow add of style developments.
// 09/17/92   PMAINW   Add on-line submit of style development
//                     color bridge. (F-172)
// 10/04/92   JALLE1   Add second report (PG2062) to PG206D.
// 01/19/93   LDELUH   Add edit for sty devl to not be spaces.
// 03/02/93   JMCLAU   PG-26&48 Add pg-frst-prdctn-mo and
//                     pg-frst-dlvr-mo to pg5rec.
// 03/15/93   JMCLAU   PG-26&48 Add edit of the 1st p.o. id.
// 04/21/93   LDELUH   Allow add of makeup development plugs
//                     but move in special default values to
//                     some fields.
// 04/22/93   LDELUH   Add cancellation date to screen to view.
// 07/14/93   LDELUH   Add edit for style group to make sure
//                     it is valid for specified category.
// 07/29/93   LDELUH   allow entry of year up to 4 out from
//                     current for prop booking, first prdctn,
//                     first sales, & season.
// 08/10/93   JMCLAU   Add Sports Activity code and Sports
//                     Activity Code modified flag.
// 09/27/93   pmainw   do not allow the add if data is
//                     not retrieved.
// 10/20/93   ldeluh   change printing of pg2051, 61, 62 rpts.
// 01/27/94   ldeluh   Add edit so that only projects with a
//                     div code that forecasting cares about
//                     can have the "show on fcst" flag set
//                     to "Y".
// 07/11/94   JALLE1   Add pf16 to European Style Development
//                     Maintenance screen (PG0F).
// 08/31/94   JALLE1   Fix prodlem of no edits being performed.
// 07/17/95   DPACK    Chg enterable fields for PPS system data
// 04/11/96   cwhit1   change pf15 color bridge to update table
//                     before bridge, send back data to PPS
// 04/24/96   cwhit1   replace several procs to replace those
//                     moved in by accident
// 05/24/96   cwhit1   allow edits in several fields IF items
//                     are in line '11'
// 09/04/96   cwhit1   changed tble tt2 to point to test UNIX
// 10/01/96   cwhit1   use vsydvl03 view,add key model field
// 11/11/96   cwhit1   CORRECT FIELDS/EDITS/CALCS FOR YR 2000
// 12/27/96   cwhit1   CORRECT pg0b630 FOR YR 2000
// 03/26/97   cwhit1   fix sesn yr to add century
// 08/15/97   BBOLEM   Changed process PG0B520 to check for
//                     production forecast, process PG0B500
//                     to check for numeric style development.
// 10/06/97   BBOLEM   Changed process PG0B520 not to check
//                     for production forecast. Commented
//                     the earlier changes.
// 10/14/97   cwhit1   remove edits for close out dates
// 01/08/97   BMUSTI   changed process pg0b520 to check for
//                     buy quanity.
// 02/04/98   CWHIT1   ADDED NEW TECH-DIFF'Z' IN PG0B520
// 02/05/98   CWHIT1   changed 'Z' to 'X' IN PG0B520,USER ERROR
// 04/30/98   SSANKA   Added code to insert/update records in
//                     DPRODG.VSYPRD01 for short style name.
// 05/01/99   CWHIT1   added field to allow deleting plug codes
// 10/11/01   SBUNGO   to validate tech diff cd 'T' alongwith
//                     other codes
// 12/03/01   SBUNGO   TO CREATE A PROCESS FOR DELETING DEV
//                     CODES THRU PG0B SCREEN
// 03/15/02   sbungo   changed stat grp XSFFS62 to call PG6250
//                     instead of FF6250 CICS pgm.  This is
//                     done as part of divestiture exercise to
//                     update max price table only.
// 03/12/02   averma   TO MAINTAIN THE SHORT STYLE NAME IN SYNC
//                     WITH PPS SYSTEM, CODE CHANGED TO VALIDAT
//                     IF IT IS EQUIP PRODUCT, THEN THE SHORT
//                     STYLE NAME CAN BE MAINTAINED THRU THIS
//                     APPLICATION, IF FOOTWEAR THEN WE CANNOT
//                     MAINTAIN THE SHORT STYLE NAME.
//                     *********
//                     CHANGED STATEMENT GRP XSFFS62 TO CALL
//                     PG6250 INSTEAD OF FF6250 CICS PGM. THIS
//                     IS DONE AS PART OF DIVESTITURE EXERCISE
//                     TO UPDATE ONLY MAX PRICE TABLE INSTEAD
//                     OF UPDATING ALL THE OTHER FORECASTING
//                     TABLES
// *********************
Program PG0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FBKREC FBKREC; // record
  FF2REC FF2REC; // record
  FF9REC FF9REC; // record
  FFFREC FFFREC; // record
  FY1REC FY1REC; // record
  PG0BW00 PG0BW00; // record
  PG0BW01 PG0BW01; // record
  PG0BW02 PG0BW02; // record
  PG0BW03 PG0BW03; // record
  PG0BW05 PG0BW05; // record
  PG2REC PG2REC; // record
  PG4REC PG4REC; // record
  PG5REC PG5REC; // record
  PGAREC PGAREC; // record
  PGXREC PGXREC; // record
  SQLCA SQLCA; // record
  SYBREC SYBREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VSSQTB01 VSSQTB01; // record
  VSYDPC02 VSYDPC02; // record
  VSYDVL03 VSYDVL03; // record
  VSYDVX01 VSYDVX01; // record
  WEU0100 WEU0100; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPRTBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XCNTBL; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use XOGTBL {deleteAfterUse = yes}; // table
  use XFCTBL {deleteAfterUse = yes}; // table
  use XSPTBL; // table
  use PG0BT; // table
  use PG0BT01; // table
  use PG0BTT2; // table
  use PG0BT02; // table
  use PG0BM.PG0BM001,  // forms
      PG0BM.TA0PM001, 
      PG0BM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPG002: XPPG002();
     /* ------------------------------------------------------------*/
     /* Initialise working storage and display areas*/
     /* ------------------------------------------------------------*/

    set PG0BM001 initial; /* map area*/
    set PG4REC empty; /* style devel record*/
    set PG5REC empty; /* style devel audit record*/
    set PG0BW01 empty; /* display working storage*/
    set PG0BW00 empty; /* working storage*/
    set SQLCA empty; /* commarea*/
    set TAEREC empty; /* error diagnosis information*/
    set TA1REC empty; /* error diagnosis parameters*/
    set XX0XW01 empty; /* date/time subroutine  area*/

    PG0BW00.PG0BWRDS = "N"; /* no request for data*/
    PG0BW00.PG0BWMCS = "N"; /* format map switch*/

    if (PGXREC.PG4STNBR > " ") /* development code in commarea*/

      PG0BW01.PG4STNBR = PGXREC.PG4STNBR; /* move to display  ws*/
      PG0BM001.PG4STNBR = PGXREC.PG4STNBR; /* move to map*/
      PG0BW00.PG0BWMCS = "Y"; /* format map switch*/
      PG0BW00.PG0BWRDS = "Y"; /* request data*/

    end

     /* ------------------------------------------------------------*/
     /* Initialise working storage and display areas*/
     /* ------------------------------------------------------------*/

    goto PG0B001; /* converse main process*/

    PG0B001: PG0B001();
     /* ------------------------------------------------------------*/
     /* flow to converse the main process*/
     /* ------------------------------------------------------------*/
    goto PG0B001; /* converse the main process*/
  end // end main
end // end PG0B

// style development maint/inqyFunction PG0B001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) obtain data to display.*/
   /* 2) display appropriate map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PG0B100(); /* obtain data to display*/

  PG0B200(); /* format and display map*/

  PG0B300(); /* Check attention identifier*/

  PG0B400(); /* Reset fields to normal intensity*/

  PG0B500(); /* Verify the entered data*/

  PG0B600(); /* Process valid input request*/

end // end PG0B001

// obtain data to display
Function PG0B100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PG0BW00.PG0BWRDS != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Save the key information in map display storage area.*/
   /* ------------------------------------------------------------*/

  PG0BW01.PG4STNBR = PG0BM001.PG4STNBR; /* development code*/
  PGXREC.PG4STNBR = PG0BM001.PG4STNBR; /* development code*/

   /* ------------------------------------------------------------*/
   /* Clear the row storage area, format the key and obtain the*/
   /* table row to be displayed.*/
   /* ------------------------------------------------------------*/

  set VSYDVL03 empty; /* clear area for sty devel table*/
  VSYDVL03.PG4STNBR = PG0BW01.PG4STNBR; /* development code*/
  PG0B110(); /* get the style devel row*/
   /* ------------------------------------------------------------*/
   /* if found, save the data in working storage area*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
    PG0B120(); /* save data in display working storage*/
    PG0BW02.PG0BWGRP = PG0BW01.PG0BWGRP; /* move to audit before area*/
    PG0BW00.PG0BW-DATA-WAS-FOUND-SW = "Y";

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, indicate that no data was found to display*/
    /* ------------------------------------------------------------*/

    PG0BW00.PG0BW-DATA-WAS-FOUND-SW = "N";
    PGXREC.XXXMODID = "100"; /* Module identification*/
    set PG0BM001.PG4STNBR cursor, bold; /* highlight, place cursor*/
    converseLib.validationFailed(18); /* Indicate no data found*/
    PG0BW00.PG0BWMCS = "N"; /* dont format map*/

  end

   /* ------------------------------------------------------------*/
   /* If no error was found, indicate request for data complete.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/
    PG0BW00.PG0BWRDS = "N"; /* Request for data switch*/
  end

end // end PG0B100

// get style devel table row
Function PG0B110()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VSYDVL03" ("S ", SQLCA, VSYDVL03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "110"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVL03"; /* Table view name*/
  TA1REC.TA1TBLKE = VSYDVL03.PG4STNBR; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PG0BW00.PG0BWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/

end // end PG0B110

// move to disp working storage
Function PG0B120()
   /* ------------------------------------------------------------*/
   /* move all enterable fields to display working storage*/
   /* ------------------------------------------------------------*/
  PG0BW01.PG4STNBR = VSYDVL03.PG4STNBR; /* development code*/
  PG0BW01.XPRCD = VSYDVL03.XPRCD; /* product type*/
  PG0BW01.XPLCD = VSYDVL03.XPLCD; /* product line*/
  PG0BW01.XPCCD = VSYDVL03.XPCCD; /* category code*/
  PG0BW01.XGACD = VSYDVL03.XGACD; /* gender age*/
  PG0BW01.XSUCD = VSYDVL03.XSUCD; /* silhouette code*/
  PG0BW01.XSPCD = VSYDVL03.XSPCD; /* sports activity code*/
  PG0BW01.XDMCD = VSYDVL03.XDMCD; /* dimension code*/
  PG0BW01.XSECD = VSYDVL03.XSECD; /* season code*/
  PG0BW01.XSNYR = VSYDVL03.XSNYR; /* season year*/
  PG0BW01.XOGCD = VSYDVL03.XOGCD; /* optional group code*/
  PG0BW01.XDVCD = VSYDVL03.XDVCD; /* division code*/
  PG0BW01.XCNCD = VSYDVL03.XCNCD; /* construction code*/
  PG0BW01.SY1SSTNM = VSYDVL03.SY1SSTNM; /* short style name*/
  PG0BW01.SY2TDIND = VSYDVL03.SY2TDIND; /* TECH DIFF IND*/
  PG0BW01.PG4PRFTY = VSYDVL03.PG4PRFTY; /* PRIMARY PROD FACTORY*/
  PG0BW01.PG4DMGRN = VSYDVL03.PG4DMGRN; /* DEVELOPER*/
  PG0BW01.PG4DSGNM = VSYDVL03.PG4DSGNM; /* DESIGNER*/
  PG0BW01.PG4PMGNM = VSYDVL03.PG4PMGNM; /* PLM*/

   /* ------------------------------------------------------------*/
   /* each of these date fields are stored as one field on the*/
    /* data base, but are entered and displayed as separate yr mo*/
    /* fields on the screen*/
   /* ------------------------------------------------------------*/

  PG0BW00.PG0BWDT1 = VSYDVL03.PG4FSLMO; /* breakout yy mm*/
  PG0BW01.PG0BMSYR = PG0BW00.PG0BW1YR; /* first sales year*/
  PG0BW01.PG0BMSMO = PG0BW00.PG0BW1MO; /* first sales month*/

  PG0BW00.PG0BWDT1 = VSYDVL03.PG2FPDMO; /* breakout yy mm*/
  PG0BW01.PG0BMPYR = PG0BW00.PG0BW1YR; /* first production year*/
  PG0BW01.PG0BMPM1 = PG0BW00.PG0BW1MO; /* first production month*/
  PG0BW00.PG0BWDT1 = VSYDVL03.PG4FDLMO; /* breakout yy mm*/
  PG0BW01.PG0BMPM2 = PG0BW00.PG0BW1MO; /* first delivery month*/

  PG0BW00.PG0BWDT2 = VSYDVL03.SY2FOFBD; /* breakout yy mm dd*/
  PG0BW01.PG0BMFMO = PG0BW00.PG0BW2MO; /* future booking month*/
  PG0BW01.PG0BMFDA = PG0BW00.PG0BW2DA; /* future booking day*/
  PG0BW01.PG0BMFYR = PG0BW00.PG0BW2YR; /* future booking year*/

  PG0BW00.PG0BWDT2 = VSYDVL03.SY2POFBD; /* breakout yy mm dd*/
  PG0BW01.PG0BMBMO = PG0BW00.PG0BW2MO; /* future booking month*/
  PG0BW01.PG0BMBDA = PG0BW00.PG0BW2DA; /* future booking day*/
  PG0BW01.PG0BMBYR = PG0BW00.PG0BW2YR; /* future booking year*/

  PG0BW00.PG0BWDT1 = VSYDVL03.SY2PDCMO; /* breakout yy mm*/
  PG0BW01.PG0BMCYR = PG0BW00.PG0BW1YR; /* dom closeout year*/
  PG0BW01.PG0BMCMO = PG0BW00.PG0BW1MO; /* dom closeout month*/

  PG0BW00.PG0BWDT1 = VSYDVL03.SY2PNCMO; /* breakout yy mm*/
  PG0BW01.PG0BMNYR = PG0BW00.PG0BW1YR; /* nil closeout year*/
  PG0BW01.PG0BMNMO = PG0BW00.PG0BW1MO; /* nil closeout month*/

  PG0BW01.SY2SSCIN = VSYDVL03.SY2SSCIN; /* safety class ind*/
  PG0BW01.PG4RFCFL = VSYDVL03.PG4RFCFL; /* report forecast flag*/
  PG0BW05.PG4DLTFL = VSYDVL03.PG4DLTFL; /* DELETE flag*/
  PG0BW01.KEYMDL = VSYDVL03.KEYMDL; /* key model flag*/
  PG0BW01.SYBSTGNB = VSYDVL03.SYBSTGNB; /* style group number*/
  PG0BW01.PG4SZRNG = VSYDVL03.PG4SZRNG; /* size range*/

   /* ------------------------------------------------------------*/
   /* Save these date fields in database format to be used if*/
   /* an add is requested.*/
   /* ------------------------------------------------------------*/

  PG0BW00.PG4CNFDT = VSYDVL03.PG4CNFDT; /* confirm date*/
  PG0BW00.PG4SSLDT = VSYDVL03.PG4SSLDT; /* slsmn smpl date*/
  PG0BW00.PG4IDT = VSYDVL03.PG4IDT; /* issue date*/

end // end PG0B120

// format and display map
Function PG0B200()
   /* ------------------------------------------------------------*/
   /* format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* a real error, not just info*/
    PGXREC.XXXMSGNO = converseVar.validationMsgNum; /* move it to working storage*/
  end

  if (PG0BW00.PG0BWMCS == "Y") /* map needs to be formatted*/
    PG0B210(); /* format the map*/
  end

  if (COMMAREA.CACHGFL == "Y") /* change authority*/
    PG0B240(); /* poss protect PPS fields*/
  else
    PG0B220(); /* protect all enterable fields*/
  end

  if (PG0BW00.PG0BW-DATA-WAS-FOUND-SW == "N") /* No data found*/
    PG0B230(); /* protect non-key fields*/
  end

  if (PGXREC.XXXMSGNO != 0)
                                   /* error or informational message*/

    if (PGXREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PGXREC.XXXMSGNO);
    end /* move to map*/
    PG0BM001.XXXMODID = PGXREC.XXXMODID; /* error module name*/
    set PG0BM001 alarm; /* indicate sound alarm*/

  end

  converse PG0BM001 ;
   /* ------------------------------------------------------------*/
   /* clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/
  PGXREC.XXXMODID = " "; /* module identification*/
  PGXREC.XXXMSGNO = 0; /* message number*/

  COMMAREA.CATOAP = PG0BM001.CATOAP; /* to application*/
  COMMAREA.CAITEM = PG0BM001.CAITEM; /* application data*/
end // end PG0B200

// format the map
Function PG0B210()
   /* ------------------------------------------------------------*/
   /* clear map area and reset the map switch*/
   /* ------------------------------------------------------------*/

  set PG0BM001 initial; /* map io area*/
  PG0BW00.PG0BWMCS = "N"; /* map format switch*/
  PG0BM001.XXXCURDT = VGVar.currentShortGregorianDate; /* current date*/
  PG0BM001.PG4STNBR = PG0BW01.PG4STNBR; /* development code*/

   /* ------------------------------------------------------------*/
   /* format the map data*/
   /* ------------------------------------------------------------*/

  PG0B211(); /* move pc origin on line modify fields*/
  PG0B212(); /* move on line origin enterable fields*/
  PG0B213(); /* move display only fields*/
  PG0B214(); /* move descriptions*/

   /* ------------------------------------------------------------*/
   /* check if enterable fields need to be protected*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACHGFL != "Y") /* user authorised to update*/
    PG0B220(); /* protect enterable fields*/
  end

end // end PG0B210

// format pc origin online mod
Function PG0B211()
  PG0BM001.XPRCD = PG0BW01.XPRCD; /* product type*/
  PG0BM001.XPLCD = PG0BW01.XPLCD; /* product line*/
  PG0BM001.XPCCD = PG0BW01.XPCCD; /* category code*/
  PG0BM001.XGACD = PG0BW01.XGACD; /* gender age*/
  PG0BM001.XSUCD = PG0BW01.XSUCD; /* silhouette code*/
  PG0BM001.XSPCD = PG0BW01.XSPCD; /* sports activity code*/
  PG0BM001.XDMCD = PG0BW01.XDMCD; /* dimension code*/
  PG0BM001.XSECD = PG0BW01.XSECD; /* season code*/
  PG0BM001.XSNYR = PG0BW01.XSNYR; /* season year*/
  PG0BM001.XDVCD = PG0BW01.XDVCD; /* division code*/
  PG0BM001.XCNCD = PG0BW01.XCNCD; /* construction code*/
  PG0BM001.XOGCD = PG0BW01.XOGCD; /* option group*/
  PG0BM001.SY2TDIND = PG0BW01.SY2TDIND; /* TECH DIFF IND*/
  PG0BM001.PG4PRFTY = PG0BW01.PG4PRFTY; /* PRIM FACTORY*/
  PG0BM001.PG4DMGRN = PG0BW01.PG4DMGRN; /* DEVELOPER*/
  PG0BM001.PG4DSGNM = PG0BW01.PG4DSGNM; /* DESIGNER*/
  PG0BM001.PG4PMGNM = PG0BW01.PG4PMGNM; /* PLM*/
  /* CALL TO GET FACTORY NAME*/
  PG0BW00.FY1FCTYC = PG0BW01.PG4PRFTY; /* PRIM FACTORY*/
  PG0BS01();

  if (SQLCA.VAGen_SQLCODE != 0)
    PG0BM001.PG0BMFN2 = "UNKNOWN";
  else
    PG0BM001.PG0BMFN2 = FY1REC.FY1FCTSN;
  end
end // end PG0B211

// format on line origin fields
Function PG0B212()
  PG0BM001.PG0BMSYR = PG0BW01.PG0BMSYR; /* first sales year*/
  PG0BM001.PG0BMSMO = PG0BW01.PG0BMSMO; /* first sales month*/
  PG0BM001.PG0BMPYR = PG0BW01.PG0BMPYR; /* first production year*/
  PG0BM001.PG0BMPM1 = PG0BW01.PG0BMPM1; /* first production month*/
  PG0BM001.PG0BMPM2 = PG0BW01.PG0BMPM2; /* first delivery month*/
  PG0BM001.PG0BMFMO = PG0BW01.PG0BMFMO; /* future booking month*/
  PG0BM001.PG0BMFDA = PG0BW01.PG0BMFDA; /* future booking day*/
  PG0BM001.PG0BMFYR = PG0BW01.PG0BMFYR; /* future booking year*/
  PG0BM001.PG0BMBMO = PG0BW01.PG0BMBMO; /* future booking month*/
  PG0BM001.PG0BMBDA = PG0BW01.PG0BMBDA; /* future booking day*/
  PG0BM001.PG0BMBYR = PG0BW01.PG0BMBYR; /* future booking year*/
  PG0BM001.PG0BMCYR = PG0BW01.PG0BMCYR; /* dom closeout year*/
  PG0BM001.PG0BMCMO = PG0BW01.PG0BMCMO; /* dom closeout month*/
  PG0BM001.PG0BMNYR = PG0BW01.PG0BMNYR; /* nil closeout year*/
  PG0BM001.PG0BMNMO = PG0BW01.PG0BMNMO; /* nil closeout month*/

  PG0BM001.SY2SSCIN = PG0BW01.SY2SSCIN; /* safety class ind*/
  PG0BW00.PG0BW-DEV-CD = PG0BW01.PG4STNBR;
  if ((PG0BW00.PG0BW-DEV-CD-1ST-3 not numeric)
   && 
  (PG0BW00.PG0BW-DEV-CD-2ND-3 not numeric)
   && 
  (PG0BW01.PG4RFCFL == "N")) /* ONLY FOR PLUGS AND FCSTFL = N*/
    PG0BM001.PG4DLTFL = PG0BW05.PG4DLTFL; /* delete flag*/
    PG0BM001.PG0BDLTH = "DELETE PLUG CODE:"; /* delete flag hdr*/
    set PG0BM001.PG4DLTFL underline; /* delete flag*/
  end
  PG0BM001.PG4RFCFL = PG0BW01.PG4RFCFL; /* report forecast flag*/
  PG0BM001.KEYMDL = PG0BW01.KEYMDL; /* key model flag*/
  PG0BM001.SYBSTGNB = PG0BW01.SYBSTGNB; /* style group number*/
  PG0BM001.PG4SZRNG = PG0BW01.PG4SZRNG; /* size range*/
  PG0BM001.SY1SSTNM = PG0BW01.SY1SSTNM; /* short style name*/
end // end PG0B212

// format display only fields
Function PG0B213()
  PG0BM001.SY1STYNM = VSYDVL03.SY1STYNM; /* model name*/
  PG0BM001.PG4CLRVR = VSYDVL03.PG4CLRVR; /* # color variations*/
  PG0BM001.PG4DFCTY = VSYDVL03.PG4DFCTY; /* development factory*/

  if (VSYDVL03.PG4AIRF1 == "E" /* airbag 1 exists*/
   || VSYDVL03.PG4AIRF2 == "E" /* airbag 2 exists*/
   || VSYDVL03.PG4AIRF3 == "E") /* airbag 3 exists*/
    PG0BM001.PG4AIRFL = "E"; /* airbag exists*/
  else
    PG0BM001.PG4AIRFL = "N"; /* new airbag*/
  end

  PG0BM001.PG4IDT = VSYDVL03.PG4IDT; /* issue date*/
  PG0BM001.PG4PAFTY = VSYDVL03.PG4PAFTY; /* alternate factory*/
  PG0BM001.PG4CNFDT = VSYDVL03.PG4CNFDT; /* confirmation date*/
  PG0BM001.PG4DELDT = VSYDVL03.PG4DELDT; /* cancellation date*/
  PG0BM001.XFCCD1 = VSYDVL03.XFCCD1; /* special feat code 1*/
  PG0BM001.XFCCD2 = VSYDVL03.XFCCD2; /* special feat code 2*/
  PG0BM001.XFCCD3 = VSYDVL03.XFCCD3; /* special feat code 3*/
  PG0BM001.XFCCD4 = VSYDVL03.XFCCD4; /* special feat code 4*/
  PG0BM001.XFCCD5 = VSYDVL03.XFCCD5; /* special feat code 5*/
  PG0BM001.XFCCD6 = VSYDVL03.XFCCD6; /* special feat code 6*/
  PG0BM001.PG4PMKNM = VSYDVL03.PG4PMKNM; /* pattern maker name*/
  PG0BM001.PG4PMGNM = VSYDVL03.PG4PMGNM; /* plm*/
  PG0BM001.PG4ASDNM = VSYDVL03.PG4ASDNM; /* asian developer name*/
  PG0BM001.PG4SSLDT = VSYDVL03.PG4SSLDT; /* salesman sample date*/

  PG0BW00.FY1FCTYC = VSYDVL03.PG4DFCTY; /* factory to workarea*/
  PG0BS01(); /* get factory name*/

  if (SQLCA.VAGen_SQLCODE != 0) /* not normal return code*/
    PG0BM001.PG0BMFN1 = "UNKNOWN"; /* factory name to map*/
  else
    PG0BM001.PG0BMFN1 = FY1REC.FY1FCTSN; /* factory short name to map*/
  end

  PG0BW00.FY1FCTYC = VSYDVL03.PG4PAFTY; /* factory to workarea*/
  PG0BS01(); /* get factory name*/

  if (SQLCA.VAGen_SQLCODE != 0) /* not normal return code*/
    PG0BM001.PG0BMFN3 = "UNKNOWN"; /* factory name to map*/
  else
    PG0BM001.PG0BMFN3 = FY1REC.FY1FCTSN; /* factory short name to map*/
  end

end // end PG0B213

// move descriptions
Function PG0B214()
   /* ------------------------------------------------------------*/
   /* search the appropriate table.  if the description is not*/
   /* found, move 'unknown' to the description field in the map.*/
   /* ------------------------------------------------------------*/

  if (VSYDVL03.XPRCD in XPRTBL.XPRCD) /* product type code*/
    PG0BM001.XPRABRV = XPRTBL.XPRABRV[sysVar.arrayIndex]; /* desc from table*/
  else
    PG0BM001.XPRABRV = "UNKNOWN"; /* not found*/
  end

  if (VSYDVL03.XPLCD in XPLTBL.XPLCD) /* product line code*/
    PG0BM001.XPLSDESC = XPLTBL.XPLSDESC[sysVar.arrayIndex]; /* desc from table*/
  else
    PG0BM001.XPLSDESC = "UNKNOWN"; /* not found*/
  end

  if (VSYDVL03.XPCCD in XPCTBL.XPCCD) /* category code*/
    PG0BM001.XPCSDESC = XPCTBL.XPCSDESC[sysVar.arrayIndex]; /* desc from table*/
  else
    PG0BM001.XPCSDESC = "UNKNOWN"; /* not found*/
  end

  if (VSYDVL03.XGACD in XGATBL.XGACD) /* gender age code*/
    PG0BM001.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex]; /* desc from table*/
  else
    PG0BM001.XGADESC = "UNKNOWN"; /* not found*/
  end

  if (VSYDVL03.XSUCD in XSUTBL.XSUCD) /* silhouette code*/
    PG0BM001.XSUABRV = XSUTBL.XSUABRV[sysVar.arrayIndex]; /* desc from table*/
  else
    PG0BM001.XSUABRV = "UNKNOWN"; /* not found*/
  end

  if (VSYDVL03.XSPCD in XSPTBL.XSPCD) /* sports act code*/
    PG0BM001.XSPDESC = XSPTBL.XSPDESC[sysVar.arrayIndex]; /* desc from table*/
  else
    PG0BM001.XSPDESC = "UNKNOWN"; /* not found*/
  end

  if (VSYDVL03.XDMCD in XDMTBL.XDMCD) /* dimension code*/
    PG0BM001.XDMDESC = XDMTBL.XDMDESC[sysVar.arrayIndex]; /* desc from table*/
  else
    PG0BM001.XDMDESC = "UNKNOWN"; /* not found*/
  end

  if (VSYDVL03.XSECD in XSETBL.XSECD) /* season code*/
    PG0BM001.XSEDESC = XSETBL.XSEDESC[sysVar.arrayIndex]; /* desc from table*/
  else
    PG0BM001.XSEDESC = "UNKNOWN"; /* not found*/
  end

  if (VSYDVL03.XDVCD in XDVTBL.XDVCD) /* division code*/
    PG0BM001.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex]; /* desc from table*/
  else
    PG0BM001.XDVABRV = "UNKNOWN"; /* not found*/
  end

  if (VSYDVL03.XCNCD in XCNTBL.XCNCD) /* construction code*/
    PG0BM001.XCNSDESC = XCNTBL.XCNSDESC[sysVar.arrayIndex]; /* desc from table*/
  else
    PG0BM001.XCNSDESC = "UNKNOWN"; /* not found*/
  end

  if (VSYDVL03.XOGCD in XOGTBL.XOGCD) /* opt grp code*/
    PG0BM001.XOGABRV = XOGTBL.XOGABRV[sysVar.arrayIndex]; /* desc from table*/
  else
    PG0BM001.XOGABRV = "UNKNOWN"; /* not found*/
  end

   /* ------------------------------------------------------------*/
   /* for special features, search the table.  if the description*/
   /* is not found, check if the value is present on file.  if it*/
   /* is, move 'unknown' to the description in the map.  if there*/
   /* is no value on file, move spaces to the description.*/
   /* ------------------------------------------------------------*/

  if (VSYDVL03.XFCCD1 in XFCTBL.XFCCD)
                                   /* special feature code*/
    PG0BM001.PG0BMAB1 = XFCTBL.XFCABRV[sysVar.arrayIndex]; /* desc from table*/
  else

    if (VSYDVL03.XFCCD1 == " ") /* sp feat not on file*/
      PG0BM001.PG0BMAB1 = " ";
    else
      PG0BM001.PG0BMAB1 = "UNKNOWN"; /* not found*/
    end

  end

  if (VSYDVL03.XFCCD2 in XFCTBL.XFCCD)
                                   /* special feature code*/
    PG0BM001.PG0BMAB2 = XFCTBL.XFCABRV[sysVar.arrayIndex]; /* desc from table*/
  else

    if (VSYDVL03.XFCCD2 == " ") /* sp feat not on file*/
      PG0BM001.PG0BMAB2 = " ";
    else
      PG0BM001.PG0BMAB2 = "UNKNOWN"; /* not found*/
    end

  end

  if (VSYDVL03.XFCCD3 in XFCTBL.XFCCD)
                                   /* special feature code*/
    PG0BM001.PG0BMAB3 = XFCTBL.XFCABRV[sysVar.arrayIndex]; /* desc from table*/
  else

    if (VSYDVL03.XFCCD3 == " ") /* sp feat not on file*/
      PG0BM001.PG0BMAB3 = " ";
    else
      PG0BM001.PG0BMAB3 = "UNKNOWN"; /* not found*/
    end

  end

  if (VSYDVL03.XFCCD4 in XFCTBL.XFCCD)
                                   /* special feature code*/
    PG0BM001.PG0BMAB4 = XFCTBL.XFCABRV[sysVar.arrayIndex]; /* desc from table*/
  else

    if (VSYDVL03.XFCCD4 == " ") /* sp feat not on file*/
      PG0BM001.PG0BMAB4 = " ";
    else
      PG0BM001.PG0BMAB4 = "UNKNOWN"; /* not found*/
    end

  end

  if (VSYDVL03.XFCCD5 in XFCTBL.XFCCD)
                                   /* special feature code*/
    PG0BM001.PG0BMAB5 = XFCTBL.XFCABRV[sysVar.arrayIndex]; /* desc from table*/
  else

    if (VSYDVL03.XFCCD5 == " ") /* sp feat not on file*/
      PG0BM001.PG0BMAB5 = " ";
    else
      PG0BM001.PG0BMAB5 = "UNKNOWN"; /* not found*/
    end

  end

  if (VSYDVL03.XFCCD6 in XFCTBL.XFCCD)
                                   /* special feature code*/
    PG0BM001.PG0BMAB6 = XFCTBL.XFCABRV[sysVar.arrayIndex]; /* desc from table*/
  else

    if (VSYDVL03.XFCCD6 == " ") /* sp feat not on file*/
      PG0BM001.PG0BMAB6 = " ";
    else
      PG0BM001.PG0BMAB6 = "UNKNOWN"; /* not found*/
    end

  end

end // end PG0B214

// protect enterable fields
Function PG0B220()
  set PG0BM001.SY1SSTNM skip; /* short style name*/
  set PG0BM001.XPRCD skip; /* product type*/
  set PG0BM001.XPLCD skip; /* product line*/
  set PG0BM001.XPCCD skip; /* category code*/
  set PG0BM001.XGACD skip; /* gender age*/
  set PG0BM001.XSUCD skip; /* silhouette code*/
  set PG0BM001.XSPCD skip; /* sports activity code*/
  set PG0BM001.XDMCD skip; /* dimension code*/
  set PG0BM001.XSECD skip; /* season code*/
  set PG0BM001.XSNYR skip; /* season year*/
  set PG0BM001.XOGCD skip; /* option group*/
  set PG0BM001.XDVCD skip; /* division code*/
  set PG0BM001.XCNCD skip; /* construction code*/

  set PG0BM001.PG0BMSYR skip; /* first sales year*/
  set PG0BM001.PG0BMSMO skip; /* first sales month*/
  set PG0BM001.PG0BMPYR skip; /* first production year*/
  set PG0BM001.PG0BMPM1 skip; /* first production month*/
  set PG0BM001.PG0BMPM2 skip; /* first delivery month*/
  set PG0BM001.PG0BMFMO skip; /* future booking month*/
  set PG0BM001.PG0BMFDA skip; /* future booking day*/
  set PG0BM001.PG0BMFYR skip; /* future booking year*/
  set PG0BM001.PG0BMBMO skip; /* future booking month*/
  set PG0BM001.PG0BMBDA skip; /* future booking day*/
  set PG0BM001.PG0BMBYR skip; /* future booking year*/
  set PG0BM001.PG0BMCYR skip; /* dom closeout year*/
  set PG0BM001.PG0BMCMO skip; /* dom closeout month*/
  set PG0BM001.PG0BMNYR skip; /* nil closeout year*/
  set PG0BM001.PG0BMNMO skip; /* nil closeout month*/

  set PG0BM001.SY2SSCIN skip; /* safety class ind*/
  set PG0BM001.PG4RFCFL skip; /* report forecast flag*/
  set PG0BM001.PG4DLTFL skip; /* delete flag*/
  set PG0BM001.KEYMDL skip; /* key model flag*/
  set PG0BM001.SYBSTGNB skip; /* style group number*/
  set PG0BM001.PG4SZRNG skip; /* size range*/

  set PG0BM001.SY2TDIND skip; /* TECH DIFF IND*/
  set PG0BM001.PG4PRFTY skip; /* PRIMARY FACTORY*/
  set PG0BM001.PG4DMGRN skip; /* DEVELOPER*/
  set PG0BM001.PG4DSGNM skip; /* DESIGNER*/
  set PG0BM001.PG4PMGNM skip; /* PLM*/
  set PG0BM001.PG9CLRNB skip; /* COLR NBR*/

end // end PG0B220

// No data - protect all fields
Function PG0B230()
   /* ------------------------------------------------------------------*/
   /* Protect all non-key fields.*/
   /* ------------------------------------------------------------------*/

  set PG0BM001.SY1STYNM invisible, skip;
  set PG0BM001.PG4CLRVR invisible, skip;
  set PG0BM001.SY1SSTNM invisible, skip;
  set PG0BM001.XPLCD invisible, skip;
  set PG0BM001.XPLSDESC invisible, skip;
  set PG0BM001.XPCCD invisible, skip;
  set PG0BM001.XPCSDESC invisible, skip;
  set PG0BM001.XPRCD invisible, skip;
  set PG0BM001.XPRABRV invisible, skip;
  set PG0BM001.XSUCD invisible, skip;
  set PG0BM001.XSUABRV invisible, skip;
  set PG0BM001.XSPCD invisible, skip;
  set PG0BM001.XSPDESC invisible, skip;
  set PG0BM001.XGACD invisible, skip;
  set PG0BM001.XGADESC invisible, skip;
  set PG0BM001.XDVCD invisible, skip;
  set PG0BM001.XDVABRV invisible, skip;
  set PG0BM001.XDMCD invisible, skip;
  set PG0BM001.XDMDESC invisible, skip;
  set PG0BM001.XSECD invisible, skip;
  set PG0BM001.XSEDESC invisible, skip;
  set PG0BM001.XCNCD invisible, skip;
  set PG0BM001.XCNSDESC invisible, skip;
  set PG0BM001.XOGCD invisible, skip;
  set PG0BM001.XOGABRV invisible, skip;
  set PG0BM001.XSNYR invisible, skip;
  set PG0BM001.PG4DFCTY invisible, skip;
  set PG0BM001.PG0BMFN1 invisible, skip;
  set PG0BM001.SY2TDIND invisible, skip;
  set PG0BM001.PG4IDT invisible, skip;
  set PG0BM001.PG4PRFTY invisible, skip;
  set PG0BM001.PG0BMFN2 invisible, skip;
  set PG0BM001.PG4AIRFL invisible, skip;
  set PG0BM001.PG4CNFDT invisible, skip;
  set PG0BM001.PG4PAFTY invisible, skip;
  set PG0BM001.PG0BMFN3 invisible, skip;
  set PG0BM001.PG4DELDT invisible, skip;
  set PG0BM001.PG4DMGRN invisible, skip;
  set PG0BM001.XFCCD1 invisible, skip;
  set PG0BM001.XFCCD2 invisible, skip;
  set PG0BM001.XFCCD3 invisible, skip;
  set PG0BM001.XFCCD4 invisible, skip;
  set PG0BM001.XFCCD5 invisible, skip;
  set PG0BM001.XFCCD6 invisible, skip;
  set PG0BM001.PG0BMAB1 invisible, skip;
  set PG0BM001.PG0BMAB2 invisible, skip;
  set PG0BM001.PG0BMAB3 invisible, skip;
  set PG0BM001.PG0BMAB4 invisible, skip;
  set PG0BM001.PG0BMAB5 invisible, skip;
  set PG0BM001.PG0BMAB6 invisible, skip;
  set PG0BM001.PG4DSGNM invisible, skip;
  set PG0BM001.PG4PMKNM invisible, skip;
  set PG0BM001.PG4PMGNM invisible, skip;
  set PG0BM001.PG4ASDNM invisible, skip;
  set PG0BM001.PG0BMSYR invisible, skip;
  set PG0BM001.PG0BMSMO invisible, skip;
  set PG0BM001.PG0BMPYR invisible, skip;
  set PG0BM001.PG0BMPM1 invisible, skip;
  set PG0BM001.PG0BMPM2 invisible, skip;
  set PG0BM001.PG0BMFMO invisible, skip;
  set PG0BM001.PG0BMFDA invisible, skip;
  set PG0BM001.PG0BMFYR invisible, skip;
  set PG0BM001.PG0BMBMO invisible, skip;
  set PG0BM001.PG0BMBDA invisible, skip;
  set PG0BM001.PG0BMBYR invisible, skip;
  set PG0BM001.SY2SSCIN invisible, skip;
  set PG0BM001.PG0BMCYR invisible, skip;
  set PG0BM001.PG0BMCMO invisible, skip;
  set PG0BM001.PG0BMNYR invisible, skip;
  set PG0BM001.PG0BMNMO invisible, skip;
  set PG0BM001.PG4RFCFL invisible, skip;
  set PG0BM001.PG4DLTFL invisible, skip;
  set PG0BM001.PG0BDLTH invisible, skip;
  set PG0BM001.KEYMDL invisible, skip;
  set PG0BM001.SYBSTGNB invisible, skip;
  set PG0BM001.PG4SZRNG invisible, skip;
  set PG0BM001.PG4SSLDT invisible, skip;

end // end PG0B230

// protect PPS-source fields
Function PG0B240()
   /* ----------------------------------------------------------*/
   /* Protect enterable fields whose source is the PPS system*/
   /* ----------------------------------------------------------*/

  if (PG0BW01.PG4RFCFL == "Y")
    set PG0BM001.PG4DLTFL skip; /**/
  end

  PG0BW00.PG0BW-DEV-CD = PG0BW01.PG4STNBR;

  if ((PG0BW00.PG0BW-DEV-CD-1ST-3 not numeric)
   /* PPS source data will always*/
   &&  /* have a style/devl number*/
  (PG0BW00.PG0BW-DEV-CD-2ND-3 is numeric))
                                   /* of format XXX999*/

    /* aparna*/
    PG0BS-EU0100-SD(); /* select unique*/

    if (WEU0100.WEU0100-RETURN-CODE == 0) /* good return*/
      if (WEU0100.WEU0100-EQUIP-PROD-FL == "N") /* if not equipment product*/
        set PG0BM001.SY1SSTNM skip, noHighLight;
      end
    end
    /* SET PG0BM001.SY1SSTNM AUTOSKIP;/* short style name*/
    set PG0BM001.XPRCD skip; /* product type*/
    set PG0BM001.XPLCD skip; /* product line*/
    set PG0BM001.XPCCD skip; /* category code*/
    set PG0BM001.XGACD skip; /* gender age*/
    set PG0BM001.XSUCD skip; /* silhouette code*/
    set PG0BM001.XSPCD skip; /* sports activity code*/
    set PG0BM001.XDMCD skip; /* dimension code*/
    set PG0BM001.XSECD skip; /* season code*/
    set PG0BM001.XSNYR skip; /* season year*/
    /* SET PG0BM001.XOGCD AUTOSKIP;   /* option group*/
    set PG0BM001.XDVCD skip; /* division code*/
    set PG0BM001.XCNCD skip; /* construction code*/
    /* SET PG0BM001.SY2SSCIN AUTOSKIP;/* safety class ind*/
    /* SET PG0BM001.PG4RFCFL AUTOSKIP;   /* report forecast flag*/
    set PG0BM001.PG4DLTFL skip; /* delete flag*/
    /* SET PG0BM001.KEYMDL   AUTOSKIP;   /* key model flag*/
    set PG0BM001.SYBSTGNB skip; /* style group number*/
    set PG0BM001.PG4SZRNG skip; /* size range*/
    set PG0BM001.PG0BMFMO skip; /* fut bk mo*/
    set PG0BM001.PG0BMFDA skip; /* fut bk da*/
    set PG0BM001.PG0BMFYR skip; /* fut bk yr*/
    set PG0BM001.PG0BMSMO skip; /* first sls mo*/
    set PG0BM001.PG0BMSYR skip; /* first sls yr*/
    set PG0BM001.SY2TDIND skip; /* TECH DIFF IND*/
    set PG0BM001.PG4PRFTY skip; /* PRIMARY FACTORY*/
    set PG0BM001.PG4DMGRN skip; /* DEVELOPER*/
    set PG0BM001.PG4DSGNM skip; /* DESIGNER*/
    set PG0BM001.PG4PMGNM skip; /* PLM*/
  end
  if (PG0BM001.XPLCD != "11")
    set PG0BM001.SY2TDIND skip; /* TECH DIFF IND*/
    set PG0BM001.PG4PRFTY skip; /* PRIMARY FACTORY*/
    set PG0BM001.PG4DMGRN skip; /* DEVELOPER*/
    set PG0BM001.PG4DSGNM skip; /* DESIGNER*/
    set PG0BM001.PG4PMGNM skip; /* PLM*/
  end

end // end PG0B240

// check attention identifier
Function PG0B300()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PG0BW00.PG0BWMCS = "Y"; /* Clear the map fields*/
    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* application data*/
    PG0BW01.PG0BWGRP = PG0BW02.PG0BWGRP; /* restore original*/
    PG0BW00.PG0BWDLS = "N"; /* dev code delete confirm switch*/
    PG0BW00.PG0BWDLS2 = "N"; /* ssqtb tbl del confirm switch*/

    if (PG0BW00.PG0BWRDS == "Y") /* data was requested*/
      set PG0BW01 empty; /* reset display working storage*/
      set PG0BW02 empty; /* reset display working storage*/
      PG0BW00.PG0BWRDS = "N"; /* reset request for data sw*/
    end

    exit stack; /* Exit to redisplay map*/

  end

  if (PG0BM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSPG002(); /* Exit to another application*/
      PGXREC.XXXMODID = "300"; /* Process name*/
      set PG0BM001.CATOAP cursor, bold; /* Highlight (in case bad xfer)*/

    else

      converseLib.validationFailed(36); /* Indicate only enter with fastpath*/
      PGXREC.XXXMODID = "300"; /* Process name*/

    end

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf16)

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PG0BM001"; /* for help*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "PG0C";
    end

    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "PG0F";
    end

    XSPG002(); /* transfer to another application*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf9 /* update request*/
   || converseVar.eventKey is pf14) /* add request*/
    if (COMMAREA.CACHGFL != "Y") /* authorized for inquiry only*/
      converseLib.validationFailed(3); /* invalid key*/
      PGXREC.XXXMODID = "300"; /* program name*/
      exit stack; /* exit to redisplay map*/
    end
  end

  if (converseVar.eventKey not enter
   && converseVar.eventKey not pf6
   && converseVar.eventKey not pf9
   && converseVar.eventKey not pf14
   && converseVar.eventKey not pf15)

    converseLib.validationFailed(3); /* invalid key*/
    PGXREC.XXXMODID = "300"; /* program name*/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)

      converseLib.clearScreen();
       /* reset map*/

    end

    exit stack;

  end

end // end PG0B300

// reset highlighted fields
Function PG0B400()

  set PG0BM001.SY1STYNM initialAttributes;
  set PG0BM001.PG4CLRVR initialAttributes;
  set PG0BM001.SY1SSTNM initialAttributes;
  set PG0BM001.XPLCD initialAttributes;
  set PG0BM001.XPLSDESC initialAttributes;
  set PG0BM001.XPCCD initialAttributes;
  set PG0BM001.XPCSDESC initialAttributes;
  set PG0BM001.XPRCD initialAttributes;
  set PG0BM001.XPRABRV initialAttributes;
  set PG0BM001.XSUCD initialAttributes;
  set PG0BM001.XSUABRV initialAttributes;
  set PG0BM001.XSPCD initialAttributes;
  set PG0BM001.XSPDESC initialAttributes;
  set PG0BM001.XGACD initialAttributes;
  set PG0BM001.XGADESC initialAttributes;
  set PG0BM001.XDVCD initialAttributes;
  set PG0BM001.XDVABRV initialAttributes;
  set PG0BM001.XDMCD initialAttributes;
  set PG0BM001.XDMDESC initialAttributes;
  set PG0BM001.XSECD initialAttributes;
  set PG0BM001.XSEDESC initialAttributes;
  set PG0BM001.XCNCD initialAttributes;
  set PG0BM001.XCNSDESC initialAttributes;
  set PG0BM001.XOGCD initialAttributes;
  set PG0BM001.XOGABRV initialAttributes;
  set PG0BM001.XSNYR initialAttributes;
  set PG0BM001.PG4DFCTY initialAttributes;
  set PG0BM001.PG0BMFN1 initialAttributes;
  set PG0BM001.SY2TDIND initialAttributes;
  set PG0BM001.PG4IDT initialAttributes;
  set PG0BM001.PG4PRFTY initialAttributes;
  set PG0BM001.PG0BMFN2 initialAttributes;
  set PG0BM001.PG4AIRFL initialAttributes;
  set PG0BM001.PG4CNFDT initialAttributes;
  set PG0BM001.PG4PAFTY initialAttributes;
  set PG0BM001.PG0BMFN3 initialAttributes;
  set PG0BM001.PG4DELDT initialAttributes;
  set PG0BM001.PG4DMGRN initialAttributes;
  set PG0BM001.XFCCD1 initialAttributes;
  set PG0BM001.XFCCD2 initialAttributes;
  set PG0BM001.XFCCD3 initialAttributes;
  set PG0BM001.XFCCD4 initialAttributes;
  set PG0BM001.XFCCD5 initialAttributes;
  set PG0BM001.XFCCD6 initialAttributes;
  set PG0BM001.PG0BMAB1 initialAttributes;
  set PG0BM001.PG0BMAB2 initialAttributes;
  set PG0BM001.PG0BMAB3 initialAttributes;
  set PG0BM001.PG0BMAB4 initialAttributes;
  set PG0BM001.PG0BMAB5 initialAttributes;
  set PG0BM001.PG0BMAB6 initialAttributes;
  set PG0BM001.PG4DSGNM initialAttributes;
  set PG0BM001.PG4PMKNM initialAttributes;
  set PG0BM001.PG4PMGNM initialAttributes;
  set PG0BM001.PG4ASDNM initialAttributes;
  set PG0BM001.PG0BMSYR initialAttributes;
  set PG0BM001.PG0BMSMO initialAttributes;
  set PG0BM001.PG0BMPYR initialAttributes;
  set PG0BM001.PG0BMPM1 initialAttributes;
  set PG0BM001.PG0BMPM2 initialAttributes;
  set PG0BM001.PG0BMFMO initialAttributes;
  set PG0BM001.PG0BMFDA initialAttributes;
  set PG0BM001.PG0BMFYR initialAttributes;
  set PG0BM001.PG0BMBMO initialAttributes;
  set PG0BM001.PG0BMBDA initialAttributes;
  set PG0BM001.PG0BMBYR initialAttributes;
  set PG0BM001.SY2SSCIN initialAttributes;
  set PG0BM001.PG0BMCYR initialAttributes;
  set PG0BM001.PG0BMCMO initialAttributes;
  set PG0BM001.PG0BMNYR initialAttributes;
  set PG0BM001.PG0BMNMO initialAttributes;
  set PG0BM001.PG4RFCFL initialAttributes;
  set PG0BM001.PG4DLTFL initialAttributes;
  set PG0BM001.KEYMDL initialAttributes;
  set PG0BM001.SYBSTGNB initialAttributes;
  set PG0BM001.PG4SZRNG initialAttributes;
  set PG0BM001.PG4SSLDT initialAttributes;

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (PG0BM001.XPRCD == "?" /* product type code*/
   || PG0BM001.XPLCD == "?" /* product line list requested*/
   || PG0BM001.XPCCD == "?" /* or category list requested*/
   || PG0BM001.XGACD == "?" /* or gender/age list requested*/
   || PG0BM001.XSUCD == "?" /* or silhouette list requested*/
   || PG0BM001.XSPCD == "?" /* or sports activity cd list requested*/
   || PG0BM001.XDMCD == "?" /* or dimension list requested*/
   || PG0BM001.XSECD == "?" /* or season list requested*/
   || PG0BM001.XOGCD == "?" /* or option grp list requested*/
   || PG0BM001.XDVCD == "?" /* or division code list requested*/
   || PG0BM001.XCNCD == "?") /* or const code list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      PGXREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type codes*/
   /* ------------------------------------------------------------*/

  if (PG0BM001.XPRCD == "?") /* product type requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PROD TYPE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PG0BM001.XPRCD = PG0BW01.XPRCD; /* Restore prior code*/
    else
      PG0BM001.XPRCD = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/
      PG0BM001.XPRABRV = XPRTBL.XPRABRV[XX0XWPIX]; /* description*/

    end

    set PG0BM001.XPRCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of dimension codes.*/
   /* ------------------------------------------------------------*/

  if (PG0BM001.XDMCD == "?") /* Dimension list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "  DIMENSION"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXDM01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PG0BM001.XDMCD = PG0BW01.XDMCD; /* Restore prior code*/
    else
      PG0BM001.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/
      PG0BM001.XDMDESC = XDMTBL.XDMDESC[XX0XWPIX]; /* Selected desc*/

    end

    set PG0BM001.XDMCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of category codes.*/
   /* ------------------------------------------------------------*/

  if (PG0BM001.XPCCD == "?") /* Category list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  CATEGORY"; /* Heading*/
    XX0XW02.XGPCD = "02"; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PG0BM001.XPCCD = PG0BW01.XPCCD; /* Restore prior code*/
    else
      PG0BM001.XPCCD = XPCTBL.XPCCD[XX0XWPIX]; /* Selected code*/
      PG0BM001.XPCSDESC = XPCTBL.XPCSDESC[XX0XWPIX]; /* Description*/

    end

    set PG0BM001.XPCCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product line codes*/
   /* ------------------------------------------------------------*/

  if (PG0BM001.XPLCD == "?") /* line list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "PROD LINE "; /* Heading*/
    XX0XW02.XGPCD = "02"; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PG0BM001.XPLCD = PG0BW01.XPLCD; /* Restore prior code*/
    else
      PG0BM001.XPLCD = XPLTBL.XPLCD[XX0XWPIX]; /* Selected code*/
      PG0BM001.XPLSDESC = XPLTBL.XPLSDESC[XX0XWPIX]; /* Description*/

    end

    set PG0BM001.XPLCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of sports activity codes*/
   /* ------------------------------------------------------------*/

  if (PG0BM001.XSPCD == "?") /* sports activity code requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "SP ACT CD "; /* Heading*/
    XX0XW02.XGPCD = "02"; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXSP01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PG0BM001.XSPCD = PG0BW01.XSPCD; /* Restore prior code*/
    else
      PG0BM001.XSPCD = XSPTBL.XSPCD[XX0XWPIX]; /* Selected code*/
      PG0BM001.XSPDESC = XSPTBL.XSPDESC[XX0XWPIX]; /* Description*/

    end

    set PG0BM001.XSPCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of gender age codes.*/
   /* ------------------------------------------------------------*/

  if (PG0BM001.XGACD == "?") /* Gender age list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "GENDER AGE"; /* Heading*/
    XX0XW02.XGPCD = "02"; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXGA01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PG0BM001.XGACD = PG0BW01.XGACD; /* Restore prior code*/
    else
      PG0BM001.XGACD = XGATBL.XGACD[XX0XWPIX]; /* Selected code*/
      PG0BM001.XGADESC = XGATBL.XGADESC[XX0XWPIX]; /* Description*/

    end

    set PG0BM001.XGACD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of silhouette codes.*/
   /* ------------------------------------------------------------*/

  if (PG0BM001.XSUCD == "?") /* silhouette list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "SILHOUETTE"; /* Heading*/
    XX0XW02.XGPCD = "02"; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXSU01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PG0BM001.XSUCD = PG0BW01.XSUCD; /* Restore prior code*/
    else
      PG0BM001.XSUCD = XSUTBL.XSUCD[XX0XWPIX]; /* Selected code*/
      PG0BM001.XSUABRV = XSUTBL.XSUABRV[XX0XWPIX]; /* Description*/

    end

    set PG0BM001.XSUCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of season codes.*/
   /* ------------------------------------------------------------*/

  if (PG0BM001.XSECD == "?") /* season list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "OPTION GRP"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXSE01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PG0BM001.XSECD = PG0BW01.XSECD; /* Restore prior code*/
    else
      PG0BM001.XSECD = XSETBL.XSECD[XX0XWPIX]; /* Selected code*/
      PG0BM001.XSEDESC = XSETBL.XSEDESC[XX0XWPIX]; /* Description*/

    end

    set PG0BM001.XSECD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of division codes.*/
   /* ------------------------------------------------------------*/

  if (PG0BM001.XDVCD == "?") /* division list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "DIVSION CD"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXDV01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PG0BM001.XDVCD = PG0BW01.XDVCD; /* Restore prior code*/
    else
      PG0BM001.XDVCD = XDVTBL.XDVCD[XX0XWPIX]; /* Selected code*/
      PG0BM001.XDVABRV = XDVTBL.XDVABRV[XX0XWPIX]; /* Description*/

    end

    set PG0BM001.XCNCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of construction codes.*/
   /* ------------------------------------------------------------*/

  if (PG0BM001.XCNCD == "?") /* season list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "CONST CODE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCN01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PG0BM001.XCNCD = PG0BW01.XCNCD; /* Restore prior code*/
    else
      PG0BM001.XCNCD = XCNTBL.XCNCD[XX0XWPIX]; /* Selected code*/
      PG0BM001.XCNSDESC = XCNTBL.XCNSDESC[XX0XWPIX]; /* Description*/

    end

    set PG0BM001.XCNCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of option groups.*/
   /* ------------------------------------------------------------*/

  if (PG0BM001.XOGCD == "?") /* option groups requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "OPT GROUP "; /* Heading*/
    XX0XW02.XGPCD = "02"; /* GPC code*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXOG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PG0BM001.XOGCD = PG0BW01.XOGCD; /* Restore prior code*/
    else
      PG0BM001.XOGCD = XOGTBL.XOGCD[XX0XWPIX]; /* Selected code*/
      PG0BM001.XOGABRV = XOGTBL.XOGABRV[XX0XWPIX]; /* Description*/

    end

    set PG0BM001.XOGCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  PGXREC.XXXMODID = "400"; /* Module identification*/

  exit stack; /* Exit to display map*/

end // end PG0B400

// verify the entered data
Function PG0B500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PG0BM001.CAITEM > " ") /* Application data was entered*/
    PGXREC.XXXMODID = "500"; /* Module identification*/
    set PG0BM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(2); /* Enter only with FAST PATH*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Check if new key was entered*/
   /* ------------------------------------------------------------*/

  if (PG0BM001.PG4STNBR != PG0BW01.PG4STNBR) /* development code changed*/
    PG0BW00.PG0BW-DEV-CD = PG0BM001.PG4STNBR;
    if (converseVar.eventKey is pf14 /* add request*/
     &&                              /* AND*/
    (PG0BW00.PG0BW-DEV-CD-1ST-3 not numeric)
     /* PPS source data will always*/
     &&                              /* have a style/devl number*/
    (PG0BW00.PG0BW-DEV-CD-2ND-3 is numeric))
                                   /* of format XXX999*/
      PGXREC.XXXMODID = "500"; /* module id*/
      converseLib.validationFailed(507); /* PPS number format error*/
      set PG0BM001.PG4STNBR cursor, bold; /* highlight*/
      exit stack; /* exit to display map*/
    else
      /* begin tcs*/
      if (converseVar.eventKey is pf14 /* add request*/
       &&                              /* AND*/
      (PG0BM001.PG4STNBR is numeric))  /* development code all numeric*/
        PGXREC.XXXMODID = "500"; /* module id*/
        converseLib.validationFailed(522); /* numeric development code*/
        set PG0BM001.PG4STNBR cursor, bold; /* highlight*/
        exit stack; /* exit to display map*/
      else
        PG0BW00.PG0BWKCS = "Y"; /* key data changed*/
      end
      /* end tcs*/
    end
  else
    PG0BW00.PG0BWKCS = "N"; /* key data not changed*/
  end

   /* ------------------------------------------------------------*/
   /* Check if key data missing.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not pf15) /* Not job submit*/
    if (PG0BM001.PG4STNBR == "   ")
      PGXREC.XXXMODID = "500"; /* Module identification*/
      set PG0BM001.PG4STNBR cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate missing*/
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Check if data was changed*/
   /* ------------------------------------------------------------*/

  PG0B510(); /* check if data changed*/

  if (converseVar.eventKey is enter)

    if (PG0BW00.PG0BWKCS == "Y") /* key changed*/
      return; /* Get out to get new data*/
    end

    if (PG0BW00.PG0BWKCS == "N" /* key not changed*/
     && PG0BW00.PG0BWDCS == "N") /* data not changed*/
      exit stack; /* Get out*/
    end

    if (PG0BW00.PG0BWDCS == "Y") /* data was changed*/
      PGXREC.XXXMODID = "500"; /* Module identification*/
      converseLib.validationFailed(460); /* pf9 to updt or 14 to add*/
    end

  end

  if (converseVar.eventKey is pf6
   && PG0BW00.PG0BWKCS == "Y")
    PG0BW00.PG0BWDLS = "N";
    PGXREC.XXXMODID = "500";
    converseLib.validationFailed(560);
    exit stack;
  end

  if (converseVar.eventKey is pf6)
    if (PG0BM001.PG4STNBR == "   "
     || PG0BM001.PG9CLRNB == 0)
      PG0BW00.PG0BWDLS = "N";
      PGXREC.XXXMODID = "500"; /* Module identification*/
      set PG0BM001.PG4STNBR cursor, bold; /* Highlight*/
      converseLib.validationFailed(8); /* Indicate missing*/
      exit stack; /* Exit to display map*/
    end
  end

  if (converseVar.eventKey is pf9 /* update request*/
   && PG0BW00.PG0BWKCS == "Y")    /* key changed*/
    PGXREC.XXXMODID = "500"; /* Module identification*/
    converseLib.validationFailed(128); /* cannot update and change key*/
    exit stack; /* Exit to display map*/
  end

  if (converseVar.eventKey is pf14) /* add request*/
    VSYDVL03.PG4STNBR = PG0BM001.PG4STNBR;
    PG0B522(); /* Check for sydvl*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Sydvl found*/
      PGXREC.XXXMODID = "500"; /* Module identification*/
      converseLib.validationFailed(461); /* Already exists so PF9*/
      set PG0BM001.PG4STNBR cursor, bold; /* Highlight*/
    end
  end

  if (converseVar.eventKey is pf14) /* add request*/
    if (PG0BW00.PG0BW-DATA-WAS-FOUND-SW == "N")
      PGXREC.XXXMODID = "500"; /* Module identification*/
      converseLib.validationFailed(208); /* there is no displayed data to process*/
      set PG0BM001.PG4STNBR cursor, bold; /* Highlight*/
    end
  end

  if (PG0BW00.PG0BWDCS == "Y" /* data changed*/
   && PG0BW00.PG0BWKCS != "Y") /* Key not changed*/
    PG0B520(); /* edit data*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end PG0B500

// check if data changed
Function PG0B510()
  PG0BW00.PG0BWDCS = "N"; /* data didnt change*/
  if (PG0BM001.XPRCD != PG0BW01.XPRCD       /* product type*/
   || PG0BM001.XPLCD != PG0BW01.XPLCD       /* product line*/
   || PG0BM001.XPCCD != PG0BW01.XPCCD       /* category code*/
   || PG0BM001.XGACD != PG0BW01.XGACD       /* gender age*/
   || PG0BM001.XSUCD != PG0BW01.XSUCD       /* silhouette code*/
   || PG0BM001.XSPCD != PG0BW01.XSPCD       /* sports activity code*/
   || PG0BM001.XDMCD != PG0BW01.XDMCD       /* dimension code*/
   || PG0BM001.XDVCD != PG0BW01.XDVCD       /* division code*/
   || PG0BM001.XCNCD != PG0BW01.XCNCD       /* construction code*/
   || PG0BM001.XSECD != PG0BW01.XSECD       /* season code*/
   || PG0BM001.XSNYR != PG0BW01.XSNYR       /* season year*/
   || PG0BM001.XOGCD != PG0BW01.XOGCD       /* season year*/
   || PG0BM001.SY1SSTNM != PG0BW01.SY1SSTNM /* short style name*/
   || PG0BM001.PG0BMSYR != PG0BW01.PG0BMSYR /* first sales year*/
   || PG0BM001.PG0BMSMO != PG0BW01.PG0BMSMO /* first sales month*/
   || PG0BM001.PG0BMPYR != PG0BW01.PG0BMPYR /* first production year*/
   || PG0BM001.PG0BMPM1 != PG0BW01.PG0BMPM1 /* first production month*/
   || PG0BM001.PG0BMPM2 != PG0BW01.PG0BMPM2 /* first delivery month*/
   || PG0BM001.PG0BMFMO != PG0BW01.PG0BMFMO /* future booking month*/
   || PG0BM001.PG0BMFDA != PG0BW01.PG0BMFDA /* future booking day*/
   || PG0BM001.PG0BMFYR != PG0BW01.PG0BMFYR /* future booking year*/
   || PG0BM001.PG0BMBMO != PG0BW01.PG0BMBMO /* prop booking month*/
   || PG0BM001.PG0BMBDA != PG0BW01.PG0BMBDA /* prop booking day*/
   || PG0BM001.PG0BMBYR != PG0BW01.PG0BMBYR /* prop booking year*/
   || PG0BM001.PG0BMCYR != PG0BW01.PG0BMCYR /* dom closeout year*/
   || PG0BM001.PG0BMCMO != PG0BW01.PG0BMCMO /* dom closeout month*/
   || PG0BM001.PG0BMNYR != PG0BW01.PG0BMNYR /* nil closeout year*/
   || PG0BM001.PG0BMNMO != PG0BW01.PG0BMNMO /* nil closeout month*/
                                            
   || PG0BM001.SY2SSCIN != PG0BW01.SY2SSCIN /* safety class ind*/
   || PG0BM001.PG4RFCFL != PG0BW01.PG4RFCFL /* report forecast flag*/
   || PG0BM001.PG4DLTFL != PG0BW05.PG4DLTFL /* delete flag*/
   || PG0BM001.KEYMDL != PG0BW01.KEYMDL     /* key model flag*/
   || PG0BM001.SYBSTGNB != PG0BW01.SYBSTGNB /* style group number*/
   || PG0BM001.PG4SZRNG != PG0BW01.PG4SZRNG /* size range*/
   || PG0BM001.SY2TDIND != PG0BW01.SY2TDIND /* TECH DIFF IND*/
   || PG0BM001.PG4PRFTY != PG0BW01.PG4PRFTY /* PRIMARY FACTORY*/
   || PG0BM001.PG4DMGRN != PG0BW01.PG4DMGRN /* DEVELOPER*/
   || PG0BM001.PG4DSGNM != PG0BW01.PG4DSGNM /* DESIGNER*/
   || PG0BM001.PG4PMGNM != PG0BW01.PG4PMGNM) /* PLM*/
    PG0BW00.PG0BWDCS = "Y"; /* data changed*/
  end

end // end PG0B510

// edit entered data
Function PG0B520()
   /* ------------------------------------------------------------*/
   /* the style group code is validated against the style group*/
   /* table*/
   /* if the style group code is not found on the style group*/
   /* table,then see if the style group code matches up to*/
   /* a development style on the style development table.*/
   /* ------------------------------------------------------------*/

  if (PG0BM001.SYBSTGNB != PG0BW01.SYBSTGNB /* style group changed*/
   && PG0BM001.SYBSTGNB != PG0BM001.PG4STNBR) /* not default*/
    set SYBREC empty;
    SYBREC.SYBSTGNB = PG0BM001.SYBSTGNB; /* build sty grp key*/
    PG0B521(); /* select unique*/

    if (SQLCA.VAGen_SQLCODE != 0) /* not found*/
      PG0BW05.PG8GROUP = VSYDVL03.VSYDVL03-GROUP; /* mv stydev to stor*/
      set PG4REC empty;
      VSYDVL03.PG4STNBR = PG0BM001.SYBSTGNB; /* build sty dev key*/
      PG0B522(); /* select unique*/
      VSYDVL03.VSYDVL03-GROUP = PG0BW05.PG8GROUP; /* mv stydev back*/
    end

    if (SQLCA.VAGen_SQLCODE == 0) /* found*/
      PG0BW05.PG8GROUP = VSYDVL03.VSYDVL03-GROUP; /* mv stydev to stor*/
      PG0B525(); /* edit style group/category*/
      VSYDVL03.VSYDVL03-GROUP = PG0BW05.PG8GROUP; /* mv stydev back*/
      if (PG0BW00.PG0BW-VALID-SGRP-FLAG == "N") /* invalid style group*/
        converseLib.validationFailed(490); /* invalid style group msg*/
        PGXREC.XXXMODID = "520"; /* error module id*/
        set PG0BM001.SYBSTGNB cursor, bold; /* highlight*/
      end
    else /* not found*/
      converseLib.validationFailed(10); /* invalid value entered*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0BM001.SYBSTGNB cursor, bold; /* highlight*/
    end

  end

   /* ------------------------------------------------------------*/
   /* first get the current date using xx0xs01. each of the dates*/
   /* are edited so if they are changed, the months must be*/
   /* between 1 and 12 and the year must be within 2 (future or*/
   /* past) of the current year represented by the xx0xs01 year.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get current date*/

  PG0BW00.PG0BW-CURR-CC = XX0XW01.XX0XW19;
  PG0BW00.PG0BW-CURR-YY = XX0XW01.XX0XWZYY;

  if (PG0BM001.PG0BMNMO != PG0BW01.PG0BMNMO /* nil closeout month*/
   && PG0BM001.PG0BMNMO != 0)              

    if (PG0BM001.PG0BMNMO < "01"
     || PG0BM001.PG0BMNMO > "12")
      converseLib.validationFailed(152); /* must be between 1 and 12*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0BM001.PG0BMNMO cursor, bold; /* highlight*/
    end

  end

  /* IF PG0BM001.PG0BMNYR NE PG0BW01.PG0BMNYR;/* nil closeout year*/
  /* MOVE PG0BM001.PG0BMNYR TO PG0BW00.PG0BW-WRK-YY;*/
  /* PERFORM PG0B526;*/
  /* PG0BW00.PG0BWKYR = PG0BW00.PG0BW-CURR-CCYY - PG0BW00.PG0BW-WRK-CCYY;*/
  /* ;*/
  /* IF PG0BW00.PG0BWKYR LT -10*/
  /* OR PG0BW00.PG0BWKYR GT 10;*/
  /* MOVE 358 TO EZEMNO;          /* must be within 10*/
  /* MOVE '520' TO PGXREC.XXXMODID;/* error module id*/
  /* SET PG0BM001.PG0BMNYR CURSOR,BRIGHT;/* highlight*/
  /* END;*/
  /* ;*/
  /* END;*/

  if (PG0BM001.PG0BMCMO != PG0BW01.PG0BMCMO /* dom closeout month*/
   && PG0BM001.PG0BMCMO != 0)              

    if (PG0BM001.PG0BMCMO < "01"
     || PG0BM001.PG0BMCMO > "12")
      converseLib.validationFailed(152); /* must be between 1 and 12*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0BM001.PG0BMCMO cursor, bold; /* highlight*/
    end

  end

  /* IF PG0BM001.PG0BMCYR NE PG0BW01.PG0BMCYR;/* dom closeout year*/
  /* MOVE PG0BM001.PG0BMCYR TO PG0BW00.PG0BW-WRK-YY;*/
  /* PERFORM PG0B526;*/
  /* PG0BW00.PG0BWKYR = PG0BW00.PG0BW-CURR-CCYY - PG0BW00.PG0BW-WRK-CCYY;*/
  /* ;*/
  /* IF PG0BW00.PG0BWKYR LT -10*/
  /* OR PG0BW00.PG0BWKYR GT 10;*/
  /* MOVE 358 TO EZEMNO;          /* must be within 10*/
  /* MOVE '520' TO PGXREC.XXXMODID;/* error module id*/
  /* SET PG0BM001.PG0BMCYR CURSOR,BRIGHT;/* highlight*/
  /* END;*/
  /* ;*/
  /* END;*/

  if (PG0BM001.PG4RFCFL == "Y")

    if (PG0BM001.PG0BMCMO < "01"
     || PG0BM001.PG0BMCMO > "12")
      converseLib.validationFailed(152); /* must be between 1 and 12*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0BM001.PG0BMCMO cursor, bold; /* highlight*/
    end

  /* MOVE PG0BM001.PG0BMCYR TO PG0BW00.PG0BW-WRK-YY;*/
  /* PERFORM PG0B526;*/
  /* PG0BW00.PG0BWKYR = PG0BW00.PG0BW-CURR-CCYY - PG0BW00.PG0BW-WRK-CCYY;*/
  /* ;*/
  /* IF PG0BW00.PG0BWKYR LT -10*/
  /* OR PG0BW00.PG0BWKYR GT 10;*/
  /* MOVE 358 TO EZEMNO;          /* must be within 2*/
  /* MOVE '520' TO PGXREC.XXXMODID;/* error module id*/
  /* SET PG0BM001.PG0BMCYR CURSOR,BRIGHT;/* highlight*/
  /* END;*/
  /* ;*/
  end

  if (PG0BM001.SY2SSCIN != PG0BW01.SY2SSCIN /* safety class ind*/
   || PG0BM001.PG4RFCFL == "Y")            

    if (PG0BM001.SY2SSCIN != "A"
     && PG0BM001.SY2SSCIN != "B"
     && PG0BM001.SY2SSCIN != "C"
     && PG0BM001.SY2SSCIN != "D")
      converseLib.validationFailed(10); /* invalid value*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0BM001.SY2SSCIN cursor, bold; /* highlight*/
    end

  end

  if (PG0BM001.PG0BMBYR != PG0BW01.PG0BMBYR) /* prop booking year*/
    PG0BW00.PG0BW-WRK-YY = PG0BM001.PG0BMBYR;
    PG0B526();
    PG0BW00.PG0BWKYR = PG0BW00.PG0BW-CURR-CCYY - PG0BW00.PG0BW-WRK-CCYY;

    if (PG0BW00.PG0BWKYR < -4
     || PG0BW00.PG0BWKYR > 2)
      converseLib.validationFailed(459); /* must be within -2 or +4*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0BM001.PG0BMBYR cursor, bold; /* highlight*/
    end

  end

  if (PG0BM001.PG0BMFYR != PG0BW01.PG0BMFYR) /* future booking year*/
    PG0BW00.PG0BW-WRK-YY = PG0BM001.PG0BMFYR;
    PG0B526();
    PG0BW00.PG0BWKYR = PG0BW00.PG0BW-CURR-CCYY - PG0BW00.PG0BW-WRK-CCYY;

    if (PG0BW00.PG0BWKYR < -4
     || PG0BW00.PG0BWKYR > 2)
      converseLib.validationFailed(459); /* must be within -2 or +4*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0BM001.PG0BMFYR cursor, bold; /* highlight*/
    end

  end

  if (PG0BM001.PG0BMPM2 != PG0BW01.PG0BMPM2 /* first delivery month*/
   && PG0BM001.PG0BMPM2 != 0)              

    if (PG0BM001.PG0BMPM2 < "01"
     || PG0BM001.PG0BMPM2 > "12")
      converseLib.validationFailed(152); /* must be between 1 and 12*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0BM001.PG0BMPM2 cursor, bold; /* highlight*/
    end

  end

  if (PG0BM001.PG0BMPM1 != PG0BW01.PG0BMPM1 /* first production month*/
   && PG0BM001.PG0BMPM1 != 0)              

    if (PG0BM001.PG0BMPM1 < "01"
     || PG0BM001.PG0BMPM1 > "12")
      converseLib.validationFailed(152); /* must be between 1 and 12*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0BM001.PG0BMPM1 cursor, bold; /* highlight*/
    end

  end

  if (PG0BM001.PG0BMPYR != PG0BW01.PG0BMPYR) /* first production year*/
    PG0BW00.PG0BW-WRK-YY = PG0BM001.PG0BMPYR;
    PG0B526();
    PG0BW00.PG0BWKYR = PG0BW00.PG0BW-CURR-CCYY - PG0BW00.PG0BW-WRK-CCYY;

    if (PG0BW00.PG0BWKYR < -4
     || PG0BW00.PG0BWKYR > 2)
      converseLib.validationFailed(459); /* must be within -2 or +4*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0BM001.PG0BMPYR cursor, bold; /* highlight*/
    end

  end

  if (PG0BM001.PG0BMSMO != PG0BW01.PG0BMSMO /* first sales month*/
   && PG0BM001.PG0BMSMO != 0)              

    if (PG0BM001.PG0BMSMO < "01"
     || PG0BM001.PG0BMSMO > "12")
      converseLib.validationFailed(152); /* must be between 1 and 12*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0BM001.PG0BMSMO cursor, bold; /* highlight*/
    end

  end

  if (PG0BM001.PG0BMSYR != PG0BW01.PG0BMSYR) /* first sales year*/
    PG0BW00.PG0BW-WRK-YY = PG0BM001.PG0BMSYR;
    PG0B526();
    PG0BW00.PG0BWKYR = PG0BW00.PG0BW-CURR-CCYY - PG0BW00.PG0BW-WRK-CCYY;

    if (PG0BW00.PG0BWKYR < -4
     || PG0BW00.PG0BWKYR > 2)
      converseLib.validationFailed(459); /* must be within -2 or +4*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0BM001.PG0BMSYR cursor, bold; /* highlight*/
    end

  end

  if (PG0BM001.XSNYR != PG0BW01.XSNYR) /* season year*/
    PG0BW00.PG0BW-WRK-YY = PG0BM001.XSNYR;
    PG0B526();
    PG0BW00.PG0BWKYR = PG0BW00.PG0BW-CURR-CCYY - PG0BW00.PG0BW-WRK-CCYY;

    if (PG0BW00.PG0BWKYR < -4
     || PG0BW00.PG0BWKYR > 2)
      converseLib.validationFailed(459); /* must be within -2 or +4*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0BM001.XSNYR cursor, bold; /* highlight*/
    end

  end

  /* IF PG0BM001.PG0BMNYR NE 0        /* year entered*/
  /* AND PG0BM001.PG0BMNMO EQ '  '; /* month not entered*/
  /* MOVE 118 TO EZEMNO;            /* missing field*/
  /* MOVE '520' TO PGXREC.XXXMODID; /* error module id*/
  /* SET PG0BM001.PG0BMNMO CURSOR,BRIGHT;/* highlight*/
  /* END;*/

  if (PG0BM001.PG0BMNMO == 0) /* month not entered*/
  /* AND PG0BM001.PG0BMNYR EQ 0;    /* year not entered*/
    converseLib.validationFailed(118); /* missing field*/
    PGXREC.XXXMODID = "520"; /* error module id*/
    set PG0BM001.PG0BMNMO cursor, bold; /* highlight*/
  end

  /* IF PG0BM001.PG0BMCYR NE 0        /* year entered*/
  /* AND PG0BM001.PG0BMCMO EQ 0;    /* month not entered*/
  /* MOVE 118 TO EZEMNO;            /* missing field*/
  /* MOVE '520' TO PGXREC.XXXMODID; /* error module id*/
  /* SET PG0BM001.PG0BMCMO CURSOR,BRIGHT;/* highlight*/
  /* END;*/

  if (PG0BM001.PG0BMCMO == "  ") /* month not entered*/
  /* AND PG0BM001.PG0BMCYR EQ 0;    /* year not entered*/
    converseLib.validationFailed(118); /* missing field*/
    PGXREC.XXXMODID = "520"; /* error module id*/
    set PG0BM001.PG0BMCMO cursor, bold; /* highlight*/
  end

  if (PG0BM001.PG0BMBMO != PG0BW01.PG0BMBMO /* month changed*/
   || PG0BM001.PG0BMBDA != PG0BW01.PG0BMBDA /* day changed*/
   || PG0BM001.PG0BMBYR != PG0BW01.PG0BMBYR) /* year changed*/

     /* validate 1st prop bkg mo using ta0040*/

    PG0BW00.PG0BWGMM = PG0BM001.PG0BMBMO; /* greg month*/
    PG0BW00.PG0BWGDD = PG0BM001.PG0BMBDA; /* greg day*/
    PG0BW00.PG0BWGYY = PG0BM001.PG0BMBYR; /* greg year*/

    set TA2REC empty; /* init ta2rec*/

    TA2REC.TA2DTOPT = "GREGGREG"; /* date option*/
    TA2REC.TA2GRTYP = "A"; /* date format*/
    TA2REC.TA2GRGAN = PG0BW00.PG0BWGRG; /* move date*/

    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* call date routine*/

    if (sysVar.errorCode == "00000000") /* call successful*/
      if (TA2REC.TA2RTNCD != 0)
        converseLib.validationFailed(17); /* invalid date*/
        PGXREC.XXXMODID = "520"; /* error module id*/
        set PG0BM001.PG0BMBMO cursor, bold; /* highlight*/
        set PG0BM001.PG0BMBDA bold; /* highlight*/
        set PG0BM001.PG0BMBYR bold; /* highlight*/
      end
    end
  end

  if (PG0BM001.PG0BMFMO != PG0BW01.PG0BMFMO /* month changed*/
   || PG0BM001.PG0BMFDA != PG0BW01.PG0BMFDA /* day changed*/
   || PG0BM001.PG0BMFYR != PG0BW01.PG0BMFYR) /* year changed*/

     /* validate 1st fut bkg mo using ta0040*/

    PG0BW00.PG0BWGMM = PG0BM001.PG0BMFMO; /* greg month*/
    PG0BW00.PG0BWGDD = PG0BM001.PG0BMFDA; /* greg day*/
    PG0BW00.PG0BWGYY = PG0BM001.PG0BMFYR; /* greg year*/

    set TA2REC empty; /* init ta2rec*/

    TA2REC.TA2DTOPT = "GREGGREG"; /* date option*/
    TA2REC.TA2GRTYP = "A"; /* date format*/
    TA2REC.TA2GRGAN = PG0BW00.PG0BWGRG; /* move date*/

    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* call date routine*/

    if (sysVar.errorCode == "00000000") /* call successful*/
      if (TA2REC.TA2RTNCD != 0)
        converseLib.validationFailed(17); /* invalid date*/
        PGXREC.XXXMODID = "520"; /* error module id*/
        set PG0BM001.PG0BMFMO cursor, bold; /* highlight*/
        set PG0BM001.PG0BMFDA bold; /* highlight*/
        set PG0BM001.PG0BMFYR bold; /* highlight*/
      end
    end
  end

  /* IF PG0BM001.PG0BMPYR NE 0        /* year entered*/
  /* AND PG0BM001.PG0BMPM2 EQ 0;    /* month not entered*/
  /* MOVE 118 TO EZEMNO;            /* missing field*/
  /* MOVE '520' TO PGXREC.XXXMODID; /* error module id*/
  /* SET PG0BM001.PG0BMPM2 CURSOR,BRIGHT;/* highlight*/
  /* END;*/

  /* IF PG0BM001.PG0BMPM1 EQ 0;       /* year not entered*/
  /* AND PG0BM001.PG0BMPM1 NE ' ';  /* month not entered*/
  /* MOVE 118 TO EZEMNO;            /* missing field*/
  /* MOVE '520' TO PGXREC.XXXMODID; /* error module id*/
  /* SET PG0BM001.PG0BMPM1 CURSOR,BRIGHT;/* highlight*/
  /* END;*/

  if (PG0BM001.PG0BMPM1 != 0 /* month entered*/
   && PG0BM001.PG0BMPM2 == 0) /* month not entered*/
    converseLib.validationFailed(118); /* missing field*/
    PGXREC.XXXMODID = "520"; /* error module id*/
    set PG0BM001.PG0BMPM2 cursor, bold; /* highlight*/
  end

  if (PG0BM001.PG0BMPM2 != 0 /* month entered*/
   && PG0BM001.PG0BMPM1 == 0) /* month not entered*/
    converseLib.validationFailed(118); /* missing field*/
    PGXREC.XXXMODID = "520"; /* error module id*/
    set PG0BM001.PG0BMPM1 cursor, bold; /* highlight*/
  end

  /* IF PG0BM001.PG0BMPM2 NE 0        /* month entered*/
  /* AND PG0BM001.PG0BMPYR EQ 0;    /* year not entered*/
  /* MOVE 118 TO EZEMNO;            /* missing field*/
  /* MOVE '520' TO PGXREC.XXXMODID; /* error module id*/
  /* SET PG0BM001.PG0BMPYR CURSOR,BRIGHT;/* highlight*/
  /* END;*/

  /* IF PG0BM001.PG0BMPM1 NE 0        /* month entered*/
  /* AND PG0BM001.PG0BMPYR EQ 0;    /* year not entered*/
  /* MOVE 118 TO EZEMNO;            /* missing field*/
  /* MOVE '520' TO PGXREC.XXXMODID; /* error module id*/
  /* SET PG0BM001.PG0BMPYR CURSOR,BRIGHT;/* highlight*/
  /* END;*/

  /* IF PG0BM001.PG0BMSMO EQ 0;       /* month NOT entered*/
  /* MOVE 118 TO EZEMNO;            /* missing field*/
  /* MOVE '520' TO PGXREC.XXXMODID; /* error module id*/
  /* SET PG0BM001.PG0BMSMO CURSOR,BRIGHT;/* highlight*/
  /* END;*/

  /* IF PG0BM001.PG0BMSMO NE 0        /* month entered*/
  /* AND PG0BM001.PG0BMSYR EQ 0;    /* year not entered*/
  /* MOVE 118 TO EZEMNO;            /* missing field*/
  /* MOVE '520' TO PGXREC.XXXMODID; /* error module id*/
  /* SET PG0BM001.PG0BMSYR CURSOR,BRIGHT;/* highlight*/
  /* END;*/

   /* ------------------------------------------------------------*/
   /* the various codes are edited against the appropriate table.*/
   /* if there is no match, it is an error, and 'unknown' is*/
   /* placed in the map description.  if there is a match, the*/
   /* description from the table is placed in the map.*/
   /* ------------------------------------------------------------*/

  if (PG0BM001.XCNCD in XCNTBL.XCNCD)
    if (XCNTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      PG0BM001.XCNSDESC = XCNTBL.XCNSDESC[sysVar.arrayIndex];
    else
      PG0BM001.XCNSDESC = "UNKNOWN";
      converseLib.validationFailed(10); /* invalid value*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0BM001.XCNCD cursor, bold; /* highlight*/
      set PG0BM001.XCNSDESC skip, bold; /* highlight*/
    end
  else
    PG0BM001.XCNSDESC = "UNKNOWN";
    converseLib.validationFailed(10); /* invalid value*/
    PGXREC.XXXMODID = "520"; /* error module id*/
    set PG0BM001.XCNCD cursor, bold; /* highlight*/
    set PG0BM001.XCNSDESC skip, bold; /* highlight*/
  end

  if (PG0BM001.XDVCD in XDVTBL.XDVCD)
    if (XDVTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      PG0BM001.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex];
    else
      PG0BM001.XDVABRV = "UNKNOWN";
      converseLib.validationFailed(10); /* invalid value*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0BM001.XDVCD cursor, bold; /* highlight*/
      set PG0BM001.XDVABRV skip, bold; /* highlight*/
    end
  else
    PG0BM001.XDVABRV = "UNKNOWN";
    converseLib.validationFailed(10); /* invalid value*/
    PGXREC.XXXMODID = "520"; /* error module id*/
    set PG0BM001.XDVCD cursor, bold; /* highlight*/
    set PG0BM001.XDVABRV skip, bold; /* highlight*/
  end

  if (PG0BM001.XSECD in XSETBL.XSECD)
    if (XSETBL.XXXSTAT[sysVar.arrayIndex] == "A")
      PG0BM001.XSEDESC = XSETBL.XSEDESC[sysVar.arrayIndex];
    else
      PG0BM001.XSEDESC = "UNKNOWN";
      converseLib.validationFailed(10); /* invalid value*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0BM001.XSECD cursor, bold; /* highlight*/
      set PG0BM001.XSEDESC skip, bold; /* highlight*/
    end
  else
    PG0BM001.XSEDESC = "UNKNOWN";
    converseLib.validationFailed(10); /* invalid value*/
    PGXREC.XXXMODID = "520"; /* error module id*/
    set PG0BM001.XSECD cursor, bold; /* highlight*/
    set PG0BM001.XSEDESC skip, bold; /* highlight*/
  end

  if (PG0BM001.XOGCD in XOGTBL.XOGCD)
    PG0BM001.XOGABRV = XOGTBL.XOGABRV[sysVar.arrayIndex];
  else
    PG0BM001.XOGABRV = "UNKNOWN";
    converseLib.validationFailed(10); /* invalid value*/
    PGXREC.XXXMODID = "520"; /* error module id*/
    set PG0BM001.XOGCD cursor, bold; /* highlight*/
    set PG0BM001.XOGABRV skip, bold; /* highlight*/
  end

  if (PG0BM001.XGACD in XGATBL.XGACD)
    if (XGATBL.XXXSTAT[sysVar.arrayIndex] == "A")
      PG0BM001.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex];
    else
      PG0BM001.XGADESC = "UNKNOWN";
      converseLib.validationFailed(10); /* invalid value*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0BM001.XGACD cursor, bold; /* highlight*/
      set PG0BM001.XGADESC skip, bold; /* highlight*/
    end
  else
    PG0BM001.XGADESC = "UNKNOWN";
    converseLib.validationFailed(10); /* invalid value*/
    PGXREC.XXXMODID = "520"; /* error module id*/
    set PG0BM001.XGACD cursor, bold; /* highlight*/
    set PG0BM001.XGADESC skip, bold; /* highlight*/
  end

  if (PG0BM001.XDMCD in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      PG0BM001.XDMDESC = XDMTBL.XDMDESC[sysVar.arrayIndex];
    else
      PG0BM001.XDMDESC = "UNKNOWN";
      converseLib.validationFailed(10); /* invalid value*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0BM001.XDMCD cursor, bold; /* highlight*/
      set PG0BM001.XDMDESC skip, bold; /* highlight*/
    end
  else
    PG0BM001.XDMDESC = "UNKNOWN";
    converseLib.validationFailed(10); /* invalid value*/
    PGXREC.XXXMODID = "520"; /* error module id*/
    set PG0BM001.XDMCD cursor, bold; /* highlight*/
    set PG0BM001.XDMDESC skip, bold; /* highlight*/
  end

  if (PG0BM001.XSUCD in XSUTBL.XSUCD)
    if (XSUTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      PG0BM001.XSUABRV = XSUTBL.XSUABRV[sysVar.arrayIndex];
    else
      PG0BM001.XSUABRV = "UNKNOWN";
      converseLib.validationFailed(10); /* invalid value*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0BM001.XSUCD cursor, bold; /* highlight*/
      set PG0BM001.XSUABRV skip, bold; /* highlight*/
    end
  else
    PG0BM001.XSUABRV = "UNKNOWN";
    converseLib.validationFailed(10); /* invalid value*/
    PGXREC.XXXMODID = "520"; /* error module id*/
    set PG0BM001.XSUCD cursor, bold; /* highlight*/
    set PG0BM001.XSUABRV skip, bold; /* highlight*/
  end

  if (PG0BM001.XSPCD in XSPTBL.XSPCD)
    if (XSPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      PG0BM001.XSPDESC = XSPTBL.XSPDESC[sysVar.arrayIndex];
    else
      PG0BM001.XSPDESC = "UNKNOWN";
      converseLib.validationFailed(10); /* invalid value*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0BM001.XSPCD cursor, bold; /* highlight*/
      set PG0BM001.XSPDESC skip, bold; /* highlight*/
    end
  else
    PG0BM001.XSPDESC = "UNKNOWN";
    converseLib.validationFailed(10); /* invalid value*/
    PGXREC.XXXMODID = "520"; /* error module id*/
    set PG0BM001.XSPCD cursor, bold; /* highlight*/
    set PG0BM001.XSPDESC skip, bold; /* highlight*/
  end

  if (PG0BM001.XPRCD in XPRTBL.XPRCD)
    if (XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      PG0BM001.XPRABRV = XPRTBL.XPRABRV[sysVar.arrayIndex];
      PG0BW00.PG0BWYPG = XPRTBL.YPGCD[sysVar.arrayIndex]; /* save type group*/
    else
      PG0BM001.XPRABRV = "UNKNOWN";
      converseLib.validationFailed(10); /* invalid value*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0BM001.XPRCD cursor, bold; /* highlight*/
      set PG0BM001.XPRABRV skip, bold; /* highlight*/
    end
  else
    PG0BM001.XPRABRV = "UNKNOWN";
    converseLib.validationFailed(10); /* invalid value*/
    PGXREC.XXXMODID = "520"; /* error module id*/
    set PG0BM001.XPRCD cursor, bold; /* highlight*/
    set PG0BM001.XPRABRV skip, bold; /* highlight*/
  end

  if (PG0BM001.XPCCD in XPCTBL.XPCCD)
    if (XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      PG0BM001.XPCSDESC = XPCTBL.XPCSDESC[sysVar.arrayIndex];
    else
      PG0BM001.XPCSDESC = "UNKNOWN";
      converseLib.validationFailed(10); /* invalid value*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0BM001.XPCCD cursor, bold; /* highlight*/
      set PG0BM001.XPCSDESC skip, bold; /* highlight*/
    end
  else
    PG0BM001.XPCSDESC = "UNKNOWN";
    converseLib.validationFailed(10); /* invalid value*/
    PGXREC.XXXMODID = "520"; /* error module id*/
    set PG0BM001.XPCCD cursor, bold; /* highlight*/
    set PG0BM001.XPCSDESC skip, bold; /* highlight*/
  end

  if (PG0BM001.XPLCD in XPLTBL.XPLCD)
    if (XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      PG0BM001.XPLSDESC = XPLTBL.XPLSDESC[sysVar.arrayIndex];
    else
      PG0BM001.XPLSDESC = "UNKNOWN";
      converseLib.validationFailed(10); /* invalid value*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0BM001.XPLCD cursor, bold; /* highlight*/
      set PG0BM001.XPLSDESC skip, bold; /* highlight*/
    end
  else
    PG0BM001.XPLSDESC = "UNKNOWN";
    converseLib.validationFailed(10); /* invalid value*/
    PGXREC.XXXMODID = "520"; /* error module id*/
    set PG0BM001.XPLCD cursor, bold; /* highlight*/
    set PG0BM001.XPLSDESC skip, bold; /* highlight*/
  end

   /* ------------------------------------------------------------*/
   /* If category changed but style group not changed check*/
   /* cagetory/style group relationship & send warning message*/
   /* if style group not in the new category.*/
   /* ------------------------------------------------------------*/

  if (PG0BM001.SYBSTGNB == PG0BW01.SYBSTGNB
   && PG0BM001.XPCCD != PG0BW01.XPCCD)
    if (PG0BW00.PG0BW-PREV-ERR-MSG == 491)
      PG0BW00.PG0BW-PREV-ERR-MSG = 0;
    else
      PG0BW05.PG8GROUP = VSYDVL03.VSYDVL03-GROUP; /* mv stydev to stor*/
      PG0B525(); /* edit style group/category*/
      VSYDVL03.VSYDVL03-GROUP = PG0BW05.PG8GROUP; /* mv stydev back*/
      if (PG0BW00.PG0BW-VALID-SGRP-FLAG == "N")
        converseLib.validationFailed(491); /* invalid style grp warning*/
        PG0BW00.PG0BW-PREV-ERR-MSG = 491;
        PGXREC.XXXMODID = "520"; /* error module id*/
        set PG0BM001.SYBSTGNB cursor, bold; /* highlight*/
      end
    end
  end

  if (PG0BM001.XPCCD in XPCTBL.XPCCD /* good category*/
   && PG0BM001.XPLCD in XPLTBL.XPLCD /* good line*/
   && PG0BM001.XPRCD in XPRTBL.XPRCD) /* good type*/
    PG0B523(); /* verify combination*/
  end

   /* ------------------------------------------------------------*/
   /* If division is invalid for forecasting do not allow the*/
   /* show on fcst flag to be "y".*/
   /* ------------------------------------------------------------*/

  if (PG0BM001.XDVCD == "03" /* Promo division*/
   && PG0BM001.PG4RFCFL == "Y") /* show on fcst*/
    converseLib.validationFailed(496); /* invalid flag for division*/
    PGXREC.XXXMODID = "520"; /* error module id*/
    set PG0BM001.PG4RFCFL cursor, bold; /* highlight*/
  end

   /* ------------------------------------------------------------*/
   /* do this last to ensure dates and key fields for select to*/
   /* dfcast.vmsty001 are valid, if required.*/
   /* ------------------------------------------------------------*/

  if (PG0BM001.KEYMDL != PG0BW01.KEYMDL) /* key model flag*/

    if (PG0BM001.KEYMDL != "Y"
     && PG0BM001.KEYMDL != "N")
      converseLib.validationFailed(153); /* must be y or n*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0BM001.KEYMDL cursor, bold; /* highlight*/
    end
  end
   /* ------------------------------------------------------------*/
  if (PG0BM001.PG4DLTFL != PG0BW05.PG4DLTFL) /* delete flag*/

    if (PG0BM001.PG4DLTFL != "Y"
     && PG0BM001.PG4DLTFL != "N"
     && PG0BM001.PG4DLTFL != " ")
      converseLib.validationFailed(153); /* must be y or n*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0BM001.PG4DLTFL cursor, bold; /* highlight*/
    end
  end
   /* ------------------------------------------------------------*/
  if (PG0BM001.PG4RFCFL != PG0BW01.PG4RFCFL) /* report forecast flag*/

    if (PG0BM001.PG4RFCFL != "Y"
     && PG0BM001.PG4RFCFL != "N")
      converseLib.validationFailed(153); /* must be y or n*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0BM001.PG4RFCFL cursor, bold; /* highlight*/
    end

    /* ------------------------------------------------------------*/
     /* ff_sls_fcst must be zero to change from "y" to "n"*/
    /* ------------------------------------------------------------*/
    if (converseVar.eventKey not pf14)
      if (VSYDVL03.PG4RFCFL == "Y"
       && PG0BM001.PG4RFCFL == "N")
        PG0B524();
        if (FF9REC.FF6SLFCT != 0)
          converseLib.validationFailed(380); /* ff_sls_fcst ne zero*/
          PGXREC.XXXMODID = "520"; /* error module id*/
          set PG0BM001.PG4RFCFL cursor, bold; /* highlight*/
          return;
        end
        /* begin tcs*/
  /* IF FF9REC.FF6PRFCT NE 0*/
  /* MOVE 521 TO EZEMNO ;     /* ff_Prdctnt_fcst ne zero*/
  /* MOVE '520' TO PGXREC.XXXMODID;/* error module id*/
  /* SET PG0BM001.PG4RFCFL CURSOR,BRIGHT;/* highlight*/
  /* END;*/
        /* end tcs*/
        /* begin tcs*/
        PG0B5201();
        if (FBKREC.FB8FTQTB > 0)
          converseLib.validationFailed(530); /* ff_buy_tot_qtb ne zero*/
          PGXREC.XXXMODID = "520"; /* error module id*/
          set PG0BM001.PG4RFCFL cursor, bold; /* highlight*/
        end
        /* end tcs*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If tech diff is not 'a' - 'i' then error*/
   /* ------------------------------------------------------------*/
  if (PG0BM001.SY2TDIND != "A"
   && PG0BM001.SY2TDIND != "B"
   && PG0BM001.SY2TDIND != "C"
   && PG0BM001.SY2TDIND != "D"
   && PG0BM001.SY2TDIND != "E"
   && PG0BM001.SY2TDIND != "F"
   && PG0BM001.SY2TDIND != "G"
   && PG0BM001.SY2TDIND != "H"
   && PG0BM001.SY2TDIND != "I"
   && PG0BM001.SY2TDIND != "J"
   && PG0BM001.SY2TDIND != "K"
   && PG0BM001.SY2TDIND != "L"
   && PG0BM001.SY2TDIND != "M"
   && PG0BM001.SY2TDIND != "T"
   && PG0BM001.SY2TDIND != "X"
   && PG0BM001.SY2TDIND != " ")
    converseLib.validationFailed(510); /* invalid value*/
    PGXREC.XXXMODID = "520"; /* error module id*/
    set PG0BM001.SY2TDIND cursor, bold; /* highlight*/
  end

   /* ------------------------------------------------------------*/
   /* If factory code is not valid then error*/
   /* ------------------------------------------------------------*/
  PG0BW00.FY1FCTYC = PG0BM001.PG4PRFTY;
  PG0BS01();

  if (SQLCA.VAGen_SQLCODE != 0)
    PG0BM001.PG0BMFN2 = "UNKNOWN";
    converseLib.validationFailed(509); /* invalid value*/
    PGXREC.XXXMODID = "520"; /* error module id*/
    set PG0BM001.PG4PRFTY cursor, bold; /* highlight*/
  else
    PG0BM001.PG0BMFN2 = FY1REC.FY1FCTSN;
  end
end // end PG0B520

// select scan type/cat/line xref
Function PG0B5201()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  set FBKREC empty;
  FBKREC.SY1STNBR = PG0BM001.PG4STNBR;
  FBKREC.SY2CLRID = " ";
  FBKREC.XDMCD = PG0BM001.XDMCD;
  FBKREC.FB8RCTYP = "B";
   /* ------------------------------------------------------------*/
   /* Select scan 1 from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4740" ("SQ", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* end tcs*/
   /* ------------------------------------------------------------*/
   /* If successful, fetch the row*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 || SQLCA.VAGen_SQLCODE == -811 || SQLCA.VAGen_SQLCODE == 100
    )
      return; /* return to previous process*/
    end
  end
   /* end tcs*/

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "5201"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET VFFXRF01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY"; /* Data base name*/
  TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBKREC.SY1STNBR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PG0B5201

// select unique style grp nbr
Function PG0B521()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3150" ("S ", SQLCA, SYBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "521"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYGRP01"; /* Table view name*/
  TA1REC.TA1TBLKE = SYBREC.SYBSTGNB; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PG0B521

// get style devel table row
Function PG0B522()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VSYDVL03" ("S ", SQLCA, VSYDVL03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "522"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVL03"; /* Table view name*/
  TA1REC.TA1TBLKE = VSYDVL03.PG4STNBR; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PG0BW00.PG0BWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/

end // end PG0B522

// select scan type/cat/line xref
Function PG0B523()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/

  set FF2REC empty;
  FF2REC.YPGCD = PG0BW00.PG0BWYPG; /* move type group code;*/
  FF2REC.XPLCD = PG0BM001.XPLCD;
  FF2REC.XPCCD = PG0BM001.XPCCD;
  FF2REC.YSMXDV = "10";
   /* ------------------------------------------------------------*/
   /* Select scan 1 from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("S1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, fetch the row*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PG0BS02(); /* fetch next row*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "523"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET VFFXRF01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PG0B523

// sum vmsty001
Function PG0B524()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/

  set FFFREC empty;
  set FF9REC empty;
  PG0BW00.PG0BWDT3 = 0; /* zero out work date*/
  FFFREC.FFFFUNCD = "SS"; /* function code*/
  if (PG0BM001.PG0BMSYR < 57)
    PG0BW00.PG0BW3CC = 20; /* work cc*/
  else
    PG0BW00.PG0BW3CC = 19; /* work cc*/
  end
  PG0BW00.PG0BW3YR = PG0BM001.PG0BMSYR; /* work yy*/
  PG0BW00.PG0BW3MO = PG0BM001.PG0BMSMO; /* work mm*/
  FFFREC.FFFBEGMO = PG0BW00.PG0BWDT3; /* begin month*/
  PG0BW00.PG0BWDT3 = 0; /* zero out work date*/
  if (PG0BM001.PG0BMCYR < 57)
    PG0BW00.PG0BW3CC = 20; /* work cc*/
  else
    PG0BW00.PG0BW3CC = 19; /* work cc*/
  end
  PG0BW00.PG0BW3YR = PG0BM001.PG0BMCYR; /* work yy*/
  PG0BW00.PG0BW3MO = PG0BM001.PG0BMCMO; /* work mm*/
  FFFREC.FFFENDMO = PG0BW00.PG0BWDT3; /* begin month*/
  FF9REC.YSMXDV = "10"; /* xxx_sum_xdv_cd*/
  FF9REC.XCTCD = "USA"; /* country code*/
  FF9REC.SY1STNBR = PG0BM001.PG4STNBR; /* style number*/
  FF9REC.SY2CLRID = " "; /* color code id*/
  FF9REC.XDMCD = " "; /* dimension code*/
   /* ------------------------------------------------------------*/
   /* Select the set to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3740" (FFFREC, SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Sum row*/

   /* ------------------------------------------------------------*/
   /* If successful*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == -305) /* No rows returned*/
      FF9REC.FF6SLFCT = 0;
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "524"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET VFFXRF01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PG0B524

// Validate sty group/category
Function PG0B525()
   /* ------------------------------------------------------------*/
   /* Validate style group/category against any other styles*/
   /* on product or development data base for that same style*/
   /* group.*/
   /* ------------------------------------------------------------*/

  PG0BW00.PG0BW-VALID-SGRP-FLAG = "Y";

  PG0B5252(); /* Open syclr csr*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (PG0BM001.XPCCD != PG2REC.XPCCD)
      PG0BW00.PG0BW-VALID-SGRP-FLAG = "N";
    end
  else /* validate against sydvl*/
    PG0B5254(); /* open sydvl csr*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (PG0BM001.XPCCD != VSYDVL03.XPCCD)
        PG0BW00.PG0BW-VALID-SGRP-FLAG = "N";
      end
    end
    PG0B5258(); /* close sydvl csr*/
  end

  PG0B5259(); /* close syclr csr*/

end // end PG0B525

// select scan syclr
Function PG0B5252()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/

  set PG2REC empty;
  PG2REC.XGPCD = "02"; /* gpc cd*/
  PG2REC.SYBSTGNB = PG0BM001.SYBSTGNB; /* style group*/

   /* ------------------------------------------------------------*/
   /* Select scan 2 from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("S2", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, fetch the row*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PG0BS10(); /* fetch next row*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "5252"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET VSYCLR01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.SYBSTGNB; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PG0B5252

// select scan sydvl
Function PG0B5254()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/

  set VSYDVL03 empty;
  VSYDVL03.SYBSTGNB = PG0BM001.SYBSTGNB; /* style group*/

   /* ------------------------------------------------------------*/
   /* Select scan 1 from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VSYDVL03" ("S1", SQLCA, VSYDVL03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, fetch the row*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PG0BS12(); /* fetch next row*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "5254"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET VSYCLR01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVL03"; /* Table view name*/
  TA1REC.TA1TBLKE = VSYDVL03.SYBSTGNB; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PG0B5254

// Close sydvl csr
Function PG0B5258()
   /* ------------------------------------------------------------*/
   /* close cursor*/
   /* ------------------------------------------------------------*/

  try
    call "VSYDVL03" ("C1", SQLCA, VSYDVL03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "5258"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR VSYDVL ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVL03"; /* Table view name*/
  TA1REC.TA1TBLKE = VSYDVL03.SYBSTGNB; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PG0B5258

// Close syclr csr
Function PG0B5259()
   /* ------------------------------------------------------------*/
   /* close cursor*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("C2", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "5259"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR VSYCLR ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.SYBSTGNB; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PG0B5259

// DETERMINE CENTURY
Function PG0B526()
   /* ------------------------------------------------------------*/
   /* DETERMINE CENTURY AND MOVE TO WORKING STORAGE*/
   /* ------------------------------------------------------------*/

  if (PG0BW00.PG0BW-WRK-YY < 57)
    PG0BW00.PG0BW-WRK-CC = 20;
  else
    PG0BW00.PG0BW-WRK-CC = 19;
  end

end // end PG0B526

// process valid input request
Function PG0B600()
   /* ------------------------------------------------------------*/
   /* if key fields were changed set request for data flag*/
   /* ------------------------------------------------------------*/

  if (PG0BW00.PG0BWKCS == "Y" /* key changed*/
   && converseVar.eventKey not pf14) /* and not add request*/
    PG0BW00.PG0BWRDS = "Y"; /* set data request switch to yes*/
    PG0BW00.PG0BWMCS = "Y"; /* clear map*/
    set PG0BW01 empty; /* reinitialise display working storage*/
    return; /* return to performing process*/
  end

   /* ------------------------------------------------------------*/
   /* if enter was pressed and no errors, display the map*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* enter was pressed*/
    PGXREC.XXXMODID = "600"; /* process number*/
    PGXREC.XXXMSGNO = 460; /* pf9 to updt or pf14 to add*/
    set PG0BM001.PG4STNBR cursor; /* cursor to development code*/
    return; /* return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* Delete dev code process*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6)
    PG0B710();
  end

   /* ------------------------------------------------------------*/
   /* The update request is processed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf9) /* Update request*/

    PG0BW00.PG0BW-PREV-ERR-MSG = 0;
    VSYDVL03.SY2SSCIN = PG0BM001.SY2SSCIN; /* safety class ind*/
    VSYDVL03.SYBSTGNB = PG0BM001.SYBSTGNB; /* style group number*/
    VSYDVL03.PG4SZRNG = PG0BM001.PG4SZRNG; /* size range*/
    VSYDVL03.KEYMDL = PG0BM001.KEYMDL; /* key model field*/
    VSYDVL03.SY1SSTNM = PG0BM001.SY1SSTNM; /* short style name*/
    VSYDVL03.SY2TDIND = PG0BM001.SY2TDIND; /* TECH DIFF IND*/
    VSYDVL03.PG4PRFTY = PG0BM001.PG4PRFTY; /* PRIMARY FACTORY*/
    VSYDVL03.PG4DMGRN = PG0BM001.PG4DMGRN; /* DEVELOPER*/
    VSYDVL03.PG4DSGNM = PG0BM001.PG4DSGNM; /* DESIGNER*/
    VSYDVL03.PG4PMGNM = PG0BM001.PG4PMGNM; /* PLM*/

    PG0B620(); /* move date fields*/
    XX0XS01(); /* get date and time*/

    if ((PG0BM001.PG4DLTFL == "Y") && (PG0BW05.PG4DLTFL == "N"))
      VSYDVL03.PG4DELDT = XX0XW01.XX0XWDAT;
      VSYDVL03.PG4DLTFL = PG0BM001.PG4DLTFL;
    end

    if ((PG0BM001.PG4DLTFL == "N") && (PG0BW05.PG4DLTFL == "Y"))
      VSYDVL03.PG4DELDT = 0;
      VSYDVL03.PG4DLTFL = PG0BM001.PG4DLTFL;
    end

    if (PG0BW01.XPRCD != PG0BM001.XPRCD       /* product type*/
     || PG0BW01.XPLCD != PG0BM001.XPLCD       /* product line*/
     || PG0BW01.XPCCD != PG0BM001.XPCCD       /* category code*/
     || PG0BW01.XGACD != PG0BM001.XGACD       /* gender age*/
     || PG0BW01.XSUCD != PG0BM001.XSUCD       /* silhouette code*/
     || PG0BW01.XSPCD != PG0BM001.XSPCD       /* sports activity code*/
     || PG0BW01.XDMCD != PG0BM001.XDMCD       /* dimension code*/
     || PG0BW01.XSECD != PG0BM001.XSECD       /* season code*/
     || PG0BW01.XSNYR != PG0BM001.XSNYR       /* season year*/
     || PG0BW01.XOGCD != PG0BM001.XOGCD       /* option group code*/
     || PG0BW01.XDVCD != PG0BM001.XDVCD       /* division code*/
     || PG0BW01.XCNCD != PG0BM001.XCNCD       /* construction code*/
     || PG0BW01.SY2TDIND != PG0BM001.SY2TDIND /* tech difficulty*/
     || PG0BW01.PG4PRFTY != PG0BM001.PG4PRFTY /* primary factory*/
     || PG0BW01.PG4DMGRN != PG0BM001.PG4DMGRN /* developer*/
     || PG0BW01.PG4DSGNM != PG0BM001.PG4DSGNM /* designer*/
     || PG0BW01.PG4PMGNM != PG0BM001.PG4PMGNM /* plm*/
     || PG0BW01.PG4RFCFL != PG0BM001.PG4RFCFL /* show on forecast fl*/
     || PG0BW01.PG0BMPYR != PG0BM001.PG0BMPYR /* first production year*/
     || PG0BW01.PG0BMPM1 != PG0BM001.PG0BMPM1 /* first production month*/
     || PG0BW01.PG0BMPM2 != PG0BM001.PG0BMPM2) /* first delivery month*/
      PG0B630(); /* update pc origin online mod*/
    end

    PG0B640(); /* update data base*/
    /* begin tcs*/
    if (PG0BM001.SY1SSTNM != PG0BW01.SY1SSTNM)
      PG0BS09();
      if (sysVar.errorCode == "00000000"
       && SQLCA.VAGen_SQLCODE == 0)

        PGAREC.PGASSTNM = PG0BM001.SY1SSTNM;
        PGAREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
        PGAREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

        PG0BS06();
      end
    end
    /* end tcs*/
    PG0B610(); /* move dvl03 to pg4rec*/
    TA1REC.TA1PGMNM = "PG0B"; /* in case of error*/
    XSFFS62(); /* to update fcsting mo master*/

   /* ------------------------------------------------------------*/
    /* the program is at this point only if all updates were*/
    /* successful*/
   /* ------------------------------------------------------------*/

    PG0BW00.PG0BWRDS = "Y"; /* request data*/
    PG0BW00.PG0BWMCS = "Y"; /* format map*/
    set PG0BM001.PG4STNBR cursor; /* cursor to development code*/

    if (SQLCA.VAGen_SQLCODE == 0) /* return from fcsting ok*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* commit all changes*/
      if (PG0BM001.PG4RFCFL == "Y") /* show on forecast fl*/
        if (PG0BW01.XPRCD != PG0BM001.XPRCD /* product type changed*/
         || PG0BW01.XPCCD != PG0BM001.XPCCD) /* category code changed*/
          PG0B650(); /* submit FF job to reformat workshts*/
        end
      end
      PGXREC.XXXMODID = "600"; /* process number*/
      PGXREC.XXXMSGNO = 32; /* an info message, not an error*/
    end

  end

   /* ------------------------------------------------------------*/
   /* The add request is processed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf14) /* Add request*/

    XX0XS01(); /* get date and time*/
    PG0B660(); /* move add fields*/
    PG0B670(); /* insert sydvl row*/
    /* begin tcs*/
    if (PG0BM001.SY1SSTNM != " ") /* if short style name is entered*/
      set PGAREC empty;
      PGAREC.PGASSTNM = PG0BM001.SY1SSTNM;
      PGAREC.SY1STNBR = PG0BM001.PG4STNBR;
      PGAREC.XGPCD = "02";
      PGAREC.XTPCD = "00";
      PGAREC.ZZZSDT = XX0XW01.XX0XWDAT;

      PG0BS05();
      PGXREC.XXXMSGNO = 545; /* insert successful msg*/
    else
      PGXREC.XXXMSGNO = 32; /* update successful msg*/
    end
    /* end tcs*/

    set PG5REC empty;
    PG5REC.PG5AUDTP = "1"; /* add audit type*/
    PG0B631(); /* insert audit row*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* commit all changes*/
    PG0BW00.PG0BWRDS = "Y"; /* request data*/
    PG0BW00.PG0BWMCS = "Y"; /* format map*/
    set PG0BM001.PG4STNBR cursor; /* cursor to sty dvl code*/
    PGXREC.XXXMODID = "600"; /* process number*/

  end

  if (converseVar.eventKey is pf15) /* request color bridge*/
    PG0B680(); /* jcl submit*/
  end

end // end PG0B600

// move dvl03 to pg4rec fields
Function PG0B610()
  PG4REC.PG4STNBR = VSYDVL03.PG4STNBR; /* sty nbr*/
  PG4REC.SY1STYNM = VSYDVL03.SY1STYNM; /* model name*/
  PG4REC.SY1TECHS = VSYDVL03.SY1TECHS; /* tech sw*/
  PG4REC.SY2TDIND = VSYDVL03.SY2TDIND; /* tech DIFF IND*/
  PG4REC.XSPCD = VSYDVL03.XSPCD; /**/
  PG4REC.PG-XSP-MOD-FL = VSYDVL03.PG-XSP-MOD-FL; /**/
  PG4REC.PG4CLRVR = VSYDVL03.PG4CLRVR; /* # color variations*/
  PG4REC.FY8LSTCD = VSYDVL03.FY8LSTCD; /* last cd*/
  PG4REC.PG4DFCTY = VSYDVL03.PG4DFCTY; /* development factory*/
  PG4REC.PG4PRFTY = VSYDVL03.PG4PRFTY; /* production  factory*/
  PG4REC.PG4IDT = VSYDVL03.PG4IDT; /* issue date*/
  PG4REC.PG4PAFTY = VSYDVL03.PG4PAFTY; /* alternate factory*/
  PG4REC.PG4CNFDT = VSYDVL03.PG4CNFDT; /* confirmation date*/
  PG4REC.PG4SSLDT = VSYDVL03.PG4SSLDT; /* salesman sample date*/
  PG4REC.PG4DMGRN = VSYDVL03.PG4DMGRN;
  PG4REC.PG4DSGNM = VSYDVL03.PG4DSGNM;
  PG4REC.PG4PMGNM = VSYDVL03.PG4PMGNM;
  PG4REC.PG4PMKNM = VSYDVL03.PG4PMKNM;
  PG4REC.PG4ASDNM = VSYDVL03.PG4ASDNM;
  PG4REC.XBTCD = VSYDVL03.XBTCD;
  PG4REC.XBCCD = VSYDVL03.XBCCD;
  PG4REC.XFMCD = VSYDVL03.XFMCD;
  PG4REC.YCQCD = VSYDVL03.YCQCD;
  PG4REC.PG4AIRF1 = VSYDVL03.PG4AIRF1;
  PG4REC.PG4AIRF2 = VSYDVL03.PG4AIRF2;
  PG4REC.PG4AIRF3 = VSYDVL03.PG4AIRF3;
  PG4REC.PG4AIRB1 = VSYDVL03.PG4AIRB1;
  PG4REC.PG4AIRB2 = VSYDVL03.PG4AIRB2;
  PG4REC.PG4AIRB3 = VSYDVL03.PG4AIRB3;
  PG4REC.FY4FOBPR = VSYDVL03.FY4FOBPR;
  PG4REC.FY4QTDPR = VSYDVL03.FY4QTDPR;
  PG4REC.FY4TGTPR = VSYDVL03.FY4TGTPR;
  PG4REC.FY7MLDCD = VSYDVL03.FY7MLDCD;
  PG4REC.XDVCD = VSYDVL03.XDVCD;
  PG4REC.PG4XDVFL = VSYDVL03.PG4XDVFL;
  PG4REC.XPRCD = VSYDVL03.XPRCD;
  PG4REC.PG4XPRFL = VSYDVL03.PG4XPRFL;
  PG4REC.XPLCD = VSYDVL03.XPLCD;
  PG4REC.PG4XPLFL = VSYDVL03.PG4XPLFL;
  PG4REC.XPCCD = VSYDVL03.XPCCD;
  PG4REC.PG4XPCFL = VSYDVL03.PG4XPCFL;
  PG4REC.XGACD = VSYDVL03.XGACD;
  PG4REC.PG4XGAFL = VSYDVL03.PG4XGAFL;
  PG4REC.XDMCD = VSYDVL03.XDMCD;
  PG4REC.PG4XDMFL = VSYDVL03.PG4XDMFL;
  PG4REC.XSUCD = VSYDVL03.XSUCD;
  PG4REC.PG4XSUFL = VSYDVL03.PG4XSUFL;
  PG4REC.XCNCD = VSYDVL03.XCNCD;
  PG4REC.PG4XCNFL = VSYDVL03.PG4XCNFL;
  PG4REC.FK-NBR-AIRBAG-SHOE = VSYDVL03.FK-NBR-AIRBAG-SHOE;
  PG4REC.PG-NAIRBAG-MOD-FL = VSYDVL03.PG-NAIRBAG-MOD-FL;
  PG4REC.XMLCD = VSYDVL03.XMLCD;
  PG4REC.PG-XML-MOD-FL = VSYDVL03.PG-XML-MOD-FL;
  PG4REC.XMCCD = VSYDVL03.XMCCD;
  PG4REC.PG-XMC-MOD-FL = VSYDVL03.PG-XMC-MOD-FL;
  PG4REC.XSECD = VSYDVL03.XSECD;
  PG4REC.PG4XSEFL = VSYDVL03.PG4XSEFL;
  PG4REC.XSNYR = VSYDVL03.XSNYR;
  PG4REC.PG4XSNFL = VSYDVL03.PG4XSNFL;
  PG4REC.FY4WHLPR = VSYDVL03.FY4WHLPR;
  PG4REC.PG4WMDFL = VSYDVL03.PG4WMDFL;
  PG4REC.PG4RTLPR = VSYDVL03.PG4RTLPR;
  PG4REC.PG4RMDFL = VSYDVL03.PG4RMDFL;
  PG4REC.SY1SSTNM = VSYDVL03.SY1SSTNM;
  PG4REC.PG4SZRNG = VSYDVL03.PG4SZRNG;
  PG4REC.SY2PDCMO = VSYDVL03.SY2PDCMO;
  PG4REC.SY2PNCMO = VSYDVL03.SY2PNCMO;
  PG4REC.SY2POFBD = VSYDVL03.SY2POFBD;
  PG4REC.SY2FOFBD = VSYDVL03.SY2FOFBD;
  PG4REC.PG2FPDMO = VSYDVL03.PG2FPDMO;
  PG4REC.PG4FDLMO = VSYDVL03.PG4FDLMO;
  PG4REC.SY2SSCIN = VSYDVL03.SY2SSCIN;
  PG4REC.SY-DUTY-RT-CD = VSYDVL03.SY-DUTY-RT-CD;
  PG4REC.PG-DUTY-RT-MOD-FL = VSYDVL03.PG-DUTY-RT-MOD-FL;
  PG4REC.PG4FSLMO = VSYDVL03.PG4FSLMO;
  PG4REC.PG4RFCFL = VSYDVL03.PG4RFCFL;
  PG4REC.SYBSTGNB = VSYDVL03.SYBSTGNB;
  PG4REC.XOGCD = VSYDVL03.XOGCD;
  PG4REC.PG4DELDT = VSYDVL03.PG4DELDT; /* cancellation date*/
  PG4REC.PG4DLTFL = VSYDVL03.PG4DLTFL; /* cancellation flag*/
  PG4REC.PG4STYST = VSYDVL03.PG4STYST;

end // end PG0B610

// move date fields
Function PG0B620()
   /* ------------------------------------------------------------*/
   /* each of these date fields are stored as one field on the*/
    /* data base, but are entered and displayed as separate yr mo*/
    /* fields on the screen*/
   /* ------------------------------------------------------------*/

  if (PG0BM001.PG0BMSMO > 0)
    if (PG0BM001.PG0BMSYR < 57)
      PG0BW00.PG0BW1CC = 20;
    else
      PG0BW00.PG0BW1CC = 19;
    end
  end
  PG0BW00.PG0BW1YR = PG0BM001.PG0BMSYR; /* first sales year*/
  PG0BW00.PG0BW1MO = PG0BM001.PG0BMSMO; /* first sales month*/
  VSYDVL03.PG4FSLMO = PG0BW00.PG0BWDT1;
  PG0BW00.PG0BWDT1 = 0;

  if (PG0BM001.PG0BMPM1 > 0)
    if (PG0BM001.PG0BMPYR < 57)
      PG0BW00.PG0BW1CC = 20;
    else
      PG0BW00.PG0BW1CC = 19;
    end
  end
  PG0BW00.PG0BW1YR = PG0BM001.PG0BMPYR; /* first production year*/
  PG0BW00.PG0BW1MO = PG0BM001.PG0BMPM1; /* first production month*/
  VSYDVL03.PG2FPDMO = PG0BW00.PG0BWDT1;
  PG0BW00.PG0BWDT1 = VSYDVL03.PG4FDLMO; /* month is the only thing*/
  if (PG0BM001.PG0BMPM2 > 0)
    if (PG0BM001.PG0BMPYR < 57)
      PG0BW00.PG0BW1CC = 20;
    else
      PG0BW00.PG0BW1CC = 19;
    end
  end
  PG0BW00.PG0BW1YR = PG0BM001.PG0BMPYR;
  PG0BW00.PG0BW1MO = PG0BM001.PG0BMPM2; /* that can change*/
                                   /* so use first production year*/
  VSYDVL03.PG4FDLMO = PG0BW00.PG0BWDT1; /* for year*/
  PG0BW00.PG0BWDT1 = 0;

  if (PG0BM001.PG0BMPM2 == 01 /* if the deliver mo is jan*/
   || PG0BM001.PG0BMPM2 == 02) /* or feb, the deliver year*/
    VSYDVL03.PG4FDLMO = VSYDVL03.PG4FDLMO + 100;
                                   /* is one more than the prod yr*/
  end

  if (PG0BM001.PG0BMFMO > 0)
    if (PG0BM001.PG0BMFYR < 57)
      PG0BW00.PG0BW2CC = 20;
    else
      PG0BW00.PG0BW2CC = 19;
    end
  end
  PG0BW00.PG0BW2YR = PG0BM001.PG0BMFYR; /* future booking year*/
  PG0BW00.PG0BW2MO = PG0BM001.PG0BMFMO; /* future booking month*/
  PG0BW00.PG0BW2DA = PG0BM001.PG0BMFDA; /* future booking day*/
  VSYDVL03.SY2FOFBD = PG0BW00.PG0BWDT2;
  PG0BW00.PG0BWDT2 = 0;

  if (PG0BM001.PG0BMBMO > 0)
    if (PG0BM001.PG0BMBYR < 57)
      PG0BW00.PG0BW2CC = 20;
    else
      PG0BW00.PG0BW2CC = 19;
    end
  end
  PG0BW00.PG0BW2YR = PG0BM001.PG0BMBYR; /* future booking year*/
  PG0BW00.PG0BW2MO = PG0BM001.PG0BMBMO; /* future booking month*/
  PG0BW00.PG0BW2DA = PG0BM001.PG0BMBDA; /* future booking day*/
  VSYDVL03.SY2POFBD = PG0BW00.PG0BWDT2;
  PG0BW00.PG0BWDT2 = 0;

  if (PG0BM001.PG0BMCMO > 0)
    if (PG0BM001.PG0BMCYR < 57)
      PG0BW00.PG0BW1CC = 20;
    else
      PG0BW00.PG0BW1CC = 19;
    end
  end
  PG0BW00.PG0BW1YR = PG0BM001.PG0BMCYR; /* dom closeout year*/
  PG0BW00.PG0BW1MO = PG0BM001.PG0BMCMO; /* dom closeout month*/
  VSYDVL03.SY2PDCMO = PG0BW00.PG0BWDT1;
  PG0BW00.PG0BWDT1 = 0;

  if (PG0BM001.PG0BMNMO > 0)
    if (PG0BM001.PG0BMNYR < 57)
      PG0BW00.PG0BW1CC = 20;
    else
      PG0BW00.PG0BW1CC = 19;
    end
  end
  PG0BW00.PG0BW1YR = PG0BM001.PG0BMNYR; /* nil closeout year*/
  PG0BW00.PG0BW1MO = PG0BM001.PG0BMNMO; /* nil closeout month*/
  VSYDVL03.SY2PNCMO = PG0BW00.PG0BWDT1;
  PG0BW00.PG0BWDT1 = 0;
end // end PG0B620

// update pc origin online mod
Function PG0B630()

   /* ------------------------------------------------------------*/
   /* move 2 for before image to the audit type code; move what*/
   /* is in the style development row to the audit row, insert*/
   /* the audit row (these last two are done in pg0b631), update*/
   /* the style development row with the changed values,*/
   /* move 3 for after image to the audit type code; move what*/
   /* is in the style development row to the audit row, insert*/
   /* the audit row (these last two are done in pg0b631).*/
   /* ------------------------------------------------------------*/

  PG5AUDTP = "2"; /* before image*/
   /* ------------------------------------------------------------*/
   /* move the before image of the first production year, first*/
    /* production month and first delivery month.*/
   /* ------------------------------------------------------------*/

  if (PG0BW02.PG0BMPM1 > 0)
    if (PG0BW02.PG0BMPYR < 57)
      PG0BW00.PG0BW1CC = 20;
    else
      PG0BW00.PG0BW1CC = 19;
    end
  end
  PG0BW00.PG0BW1YR = PG0BW02.PG0BMPYR; /* first production year*/
  PG0BW00.PG0BW1MO = PG0BW02.PG0BMPM1; /* first production month*/
  VSYDVL03.PG2FPDMO = PG0BW00.PG0BWDT1;
                                           /* first delivery month*/
  PG0BW00.PG0BW1MO = PG0BW02.PG0BMPM2; /* that can change*/
  PG0BW00.PG0BW1YR = PG0BW02.PG0BMPYR;
                                   /* so use first production year*/
  VSYDVL03.PG4FDLMO = PG0BW00.PG0BWDT1; /* for year*/
  PG0BW00.PG0BWDT1 = 0;

  if (PG0BW02.PG0BMPM2 == 01 /* if the deliver mo is jan*/
   || PG0BW02.PG0BMPM2 == 02) /* or feb, the deliver year*/
    VSYDVL03.PG4FDLMO = VSYDVL03.PG4FDLMO + 100;
                                   /* is one more than the prod yr*/
  end

  PG0B631(); /* insert audit row*/

  if (PG0BW02.XPRCD != PG0BM001.XPRCD) /* product type*/
    VSYDVL03.XPRCD = PG0BM001.XPRCD;
    VSYDVL03.PG4XPRFL = "Y"; /* modified on line*/
  end

  if (PG0BW02.XPLCD != PG0BM001.XPLCD) /* product line*/
    VSYDVL03.XPLCD = PG0BM001.XPLCD;
    VSYDVL03.PG4XPLFL = "Y"; /* modified on line*/
  end

  if (PG0BW02.XPCCD != PG0BM001.XPCCD) /* category code*/
    VSYDVL03.XPCCD = PG0BM001.XPCCD;
    VSYDVL03.PG4XPCFL = "Y"; /* modified on line*/
  end

  if (PG0BW02.XGACD != PG0BM001.XGACD) /* gender age*/
    VSYDVL03.XGACD = PG0BM001.XGACD;
    VSYDVL03.PG4XGAFL = "Y"; /* modified on line*/
  end

  if (PG0BW02.XSUCD != PG0BM001.XSUCD) /* silhouette code*/
    VSYDVL03.XSUCD = PG0BM001.XSUCD;
    VSYDVL03.PG4XSUFL = "Y"; /* modified on line*/
  end

  if (PG0BW02.XSPCD != PG0BM001.XSPCD) /* sports activity code*/
    VSYDVL03.XSPCD = PG0BM001.XSPCD;
    VSYDVL03.PG-XSP-MOD-FL = "Y"; /* modified on line*/
  end

  if (PG0BW02.XDMCD != PG0BM001.XDMCD) /* dimension code*/
    VSYDVL03.XDMCD = PG0BM001.XDMCD;
    VSYDVL03.PG4XDMFL = "Y"; /* modified on line*/
  end

  if (PG0BW02.XSECD != PG0BM001.XSECD) /* season code*/
    VSYDVL03.XSECD = PG0BM001.XSECD;
    VSYDVL03.PG4XSEFL = "Y"; /* modified on line*/
  end

  if (PG0BW02.XSNYR != PG0BM001.XSNYR) /* season year*/
    VSYDVL03.XSNYR = PG0BM001.XSNYR;
    VSYDVL03.PG4XSNFL = "Y"; /* modified on line*/
  end

  if (PG0BW02.XDVCD != PG0BM001.XDVCD) /* division code*/
    VSYDVL03.XDVCD = PG0BM001.XDVCD;
    VSYDVL03.PG4XDVFL = "Y"; /* modified on line*/
  end

  if (PG0BW02.XCNCD != PG0BM001.XCNCD) /* construction code*/
    VSYDVL03.XCNCD = PG0BM001.XCNCD;
    VSYDVL03.PG4XCNFL = "Y"; /* modified on line*/
  end

  if (PG0BW02.XOGCD != PG0BM001.XOGCD) /* option group*/
    VSYDVL03.XOGCD = PG0BM001.XOGCD;
  end

  if (PG0BW02.PG4RFCFL != PG0BM001.PG4RFCFL) /* show on forecast fl*/
    VSYDVL03.PG4RFCFL = PG0BM001.PG4RFCFL;
  end

  if (PG0BW02.PG0BMPYR != PG0BM001.PG0BMPYR /* production year*/
   || PG0BW02.PG0BMPM1 != PG0BM001.PG0BMPM1 /* production month*/
   || PG0BW02.PG0BMPM2 != PG0BM001.PG0BMPM2) /* delivery month*/
    if (PG0BM001.PG0BMPYR < 57)
      PG0BW00.PG0BW1CC = 20;
    else
      PG0BW00.PG0BW1CC = 19;
    end
    PG0BW00.PG0BW1YR = PG0BM001.PG0BMPYR; /* first production year*/
    PG0BW00.PG0BW1MO = PG0BM001.PG0BMPM1; /* first production month*/
    VSYDVL03.PG2FPDMO = PG0BW00.PG0BWDT1; /* only the*/
    PG0BW00.PG0BW1MO = PG0BM001.PG0BMPM2; /* first delivery month*/
                                   /* can change*/
                                   /* so use first production year*/
    VSYDVL03.PG4FDLMO = PG0BW00.PG0BWDT1;

    if (PG0BM001.PG0BMPM2 == 01 /* if the deliver mo is jan*/
     || PG0BM001.PG0BMPM2 == 02) /* or feb, the deliver year*/
      VSYDVL03.PG4FDLMO = VSYDVL03.PG4FDLMO + 100;
                                         /* is one more than the prod yr*/
    end

  end

  PG5AUDTP = "3"; /* after image*/
  PG0B631(); /* insert audit row*/
end // end PG0B630
// insert row to audit table
Function PG0B631()

   /* ------------------------------------------------------------*/
   /* format audit record fields*/
   /* ------------------------------------------------------------*/

  PG5REC.ZZZSDT = XX0XW01.XX0XWDAT; /* setup date*/
  PG5REC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* setup time*/
  PG5REC.XXX-USER-ID = COMMAREA.CAUSERID; /* user id*/

  PG5REC.PG4STNBR = VSYDVL03.PG4STNBR; /* developer number*/
  PG5REC.XPRCD = VSYDVL03.XPRCD; /* product type*/
  PG5REC.XPLCD = VSYDVL03.XPLCD; /* product line*/
  PG5REC.XPCCD = VSYDVL03.XPCCD; /* category code*/
  PG5REC.XGACD = VSYDVL03.XGACD; /* gender age*/
  PG5REC.XSUCD = VSYDVL03.XSUCD; /* silhouette code*/
  PG5REC.XDMCD = VSYDVL03.XDMCD; /* dimension code*/
  PG5REC.XSECD = VSYDVL03.XSECD; /* season code*/
  PG5REC.XSNYR = VSYDVL03.XSNYR; /* season year*/
  PG5REC.XDVCD = VSYDVL03.XDVCD; /* division code*/
  PG5REC.XCNCD = VSYDVL03.XCNCD; /* construction code*/
  PG5REC.XMLCD[1] = VSYDVL03.XMLCD[1]; /* material lower code*/
  PG5REC.XMLCD[2] = VSYDVL03.XMLCD[2]; /* material lower code*/
  PG5REC.XMLCD[3] = VSYDVL03.XMLCD[3]; /* material lower code*/
  PG5REC.XMLCD[4] = VSYDVL03.XMLCD[4]; /* material lower code*/
  PG5REC.XMCCD[1] = VSYDVL03.XMCCD[1]; /* material content code*/
  PG5REC.XMCCD[2] = VSYDVL03.XMCCD[2]; /* material content code*/
  PG5REC.XMCCD[3] = VSYDVL03.XMCCD[3]; /* material content code*/
  PG5REC.XMCCD[4] = VSYDVL03.XMCCD[4]; /* material content code*/
  PG5REC.FY4WHLPR = VSYDVL03.FY4WHLPR; /* wholesale price*/
  PG5REC.PG4RTLPR = VSYDVL03.PG4RTLPR; /* suggested retail price*/
  PG5REC.PG4RFCFL = VSYDVL03.PG4RFCFL; /* show on forecast flag*/
  PG5REC.PG4FDLMO = VSYDVL03.PG4FDLMO; /* first delivery month*/
  PG5REC.PG2FPDMO = VSYDVL03.PG2FPDMO; /* first production month*/

   /* ------------------------------------------------------------*/
   /* add row*/
   /* ------------------------------------------------------------*/

  try
    call "IO4400" ("A ", SQLCA, PG5REC) {isNoRefresh = yes, isExternal = yes};
  end /* add row*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* a good select*/
    return; /* return to calling process*/
  end

  if (sysVar.errorCode != "00000000" /* bad call*/
   || SQLCA.VAGen_SQLCODE != 0)      /* bad return code*/

    PGXREC.XXXMODID = "631"; /* Module identification*/
    TA1REC.TA1LOC = "ADD AUDIT TABLE ROW"; /* error description*/
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back previous updates*/

      converseLib.validationFailed(19); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back previous updates*/
      converseLib.validationFailed(1); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSDAUD01"; /* Table view name*/
    TA1REC.TA1TBLKE = PG5REC.PG5GROUP; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    exit stack;
  end

end // end PG0B631

// update style development row
Function PG0B640()
  VSYDVL03.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  VSYDVL03.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
  try
    call "VSYDVL03" ("U ", SQLCA, VSYDVL03) {isNoRefresh = yes, isExternal = yes};
  end /* update row*/

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
      PGXREC.XXXMSGNO = 20; /* updated since displayed here*/
      PG0BW00.PG0BWRDS = "Y"; /* set data request switch*/
      PG0BW00.PG0BWMCS = "Y"; /* set map clear switch*/
      PGXREC.XXXMODID = "640"; /* module id*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back previous updates*/
      exit stack; /* return to redisplay map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* bad call*/
   || SQLCA.VAGen_SQLCODE != 0)      /* bad sql function*/
    PGXREC.XXXMODID = "630"; /* Module identification*/
    TA1REC.TA1LOC = "UPDATE ROW         "; /* error description*/
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back previous updates*/
      converseLib.validationFailed(19); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back previous updates*/
      converseLib.validationFailed(01); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSYDVL03"; /* Table view name*/
    TA1REC.TA1TBLKE = VSYDVL03.PG4STNBR; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    exit stack;
  end

end // end PG0B640

// Submit forecast job FF2821
Function PG0B650()

   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/
    if (TA3REC.TA3RGNID == "03") /* if on production system*/
      PG0B651(); /* format production jcl*/
    else
      PG0B652(); /* format development jcl*/
    end
  else

    PGXREC.XXXMODID = "500"; /* module identification*/
    PGXREC.XXXMSGNO = 87; /* Error encountered with print request*/
    exit stack;
  end

end // end PG0B650

// Format/submit production JCL
Function PG0B651()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PG0BT.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      PG0BW03.XPCCD = VSYDVL03.XPCCD; /* Category*/
      if (VSYDVL03.XPRCD in XPRTBL.XPRCD)
        PG0BW03.YPGCD = XPRTBL.YPGCD[sysVar.arrayIndex];
      end /* get type grp*/
      PG0BW03.PG4STNBR = VSYDVL03.PG4STNBR; /* Style devl*/

      TA6REC.TARJCL[TA6INDEX] = PG0BW03.TARJCL; /* Parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PG0BT.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PG0BT.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PG0BT.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* Message switch*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  PGXREC.XXXMODID = "651"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    PGXREC.XXXMSGNO = 86; /* Indicate user cancelled*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/

  end

  exit stack; /* Exit to display map*/

end // end PG0B651

// Format/submit test JCL
Function PG0B652()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (PG0BT01.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      PG0BW03.XPCCD = VSYDVL03.XPCCD; /* Category*/
      if (VSYDVL03.XPRCD in XPRTBL.XPRCD)
        PG0BW03.YPGCD = XPRTBL.YPGCD[sysVar.arrayIndex];
      end /* get type grp*/
      PG0BW03.PG4STNBR = VSYDVL03.PG4STNBR; /* Style devl*/

      TA6REC.TARJCL[TA6INDEX] = PG0BW03.TARJCL; /* Parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = PG0BT01.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = PG0BT01.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (PG0BT01.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* Message switch*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  PGXREC.XXXMODID = "651"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    PGXREC.XXXMSGNO = 86; /* Indicate user cancelled*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/

  end

  exit stack; /* Exit to display map*/

end // end PG0B652

// Move sydvl add fields
Function PG0B660()

  VSYDVL03.PG4STNBR = PG0BM001.PG4STNBR; /* style development nbr*/
  PG0BW00.PG0BW-STYDV-CHARS = PG0BM001.PG4STNBR;
  VSYDVL03.SY1STYNM = PG0BM001.SY1SSTNM; /* long style name*/
  VSYDVL03.SY2TDIND = PG0BM001.SY2TDIND; /* technical diff ind*/
  VSYDVL03.PG4CLRVR = PG0BM001.PG4CLRVR; /* color var*/

  if (PG0BW00.PG0BW-STYDV-CHAR1 == "M" /* If makeup devl plug*/
   && PG0BW00.PG0BW-STYDV-CHAR2 == "P")
    VSYDVL03.PG4DFCTY = "ZZ"; /* devl fcty*/
    VSYDVL03.PG4PRFTY = "ZZ"; /* prdctn fcty*/
    VSYDVL03.PG4PAFTY = "ZZ"; /* prdctn alt fcty*/
    VSYDVL03.PG4CNFDT = 0; /* confirm dt*/
    VSYDVL03.PG4DMGRN = COMMAREA.CAUSERID; /* devl mgr nm*/
    VSYDVL03.PG4DSGNM = "        "; /* dsgnr nm*/
    VSYDVL03.PG4PMGNM = "        "; /* prodln mbr nm*/
    VSYDVL03.PG4PMKNM = "        "; /* patmkr nm*/
    VSYDVL03.PG4ASDNM = "        "; /* asn devl nm*/
    VSYDVL03.XMLCD[1] = "  "; /* material cd1*/
    VSYDVL03.XMLCD[2] = "  "; /* material cd2*/
    VSYDVL03.XMLCD[3] = "  "; /* material cd3*/
    VSYDVL03.XMLCD[4] = "  "; /* material cd4*/
    VSYDVL03.PG4IDT = XX0XW01.XX0XWDAT; /* issue date*/
    PG0BW00.PG0BWDT2 = XX0XW01.XX0XWDAT;
    PG0BW00.PG0BW2MO = PG0BW00.PG0BW2MO + 5;
    if (PG0BW00.PG0BW2MO > 12)
      PG0BW00.PG0BW2MO = PG0BW00.PG0BW2MO - 12;
      PG0BW00.PG0BWDT2 = PG0BW00.PG0BWDT2 + 10000;
    end
    VSYDVL03.PG4DELDT = PG0BW00.PG0BWDT2; /* delt date*/
    VSYDVL03.SY2SSCIN = "C"; /* safety class ind*/
  else
    VSYDVL03.PG4DFCTY = PG0BM001.PG4DFCTY; /* devl fcty*/
    VSYDVL03.PG4PRFTY = PG0BM001.PG4PRFTY; /* prdctn fcty*/
    VSYDVL03.PG4PAFTY = PG0BM001.PG4PAFTY; /* prdctn alt fcty*/
    VSYDVL03.PG4CNFDT = PG0BW00.PG4CNFDT; /* confirm dt*/
    VSYDVL03.PG4DMGRN = PG0BM001.PG4DMGRN; /* devl mgr nm*/
    VSYDVL03.PG4DSGNM = PG0BM001.PG4DSGNM; /* dsgnr nm*/
    VSYDVL03.PG4PMGNM = PG0BM001.PG4PMGNM; /* prodln mbr nm*/
    VSYDVL03.PG4PMKNM = PG0BM001.PG4PMKNM; /* patmkr nm*/
    VSYDVL03.PG4ASDNM = PG0BM001.PG4ASDNM; /* asn devl nm*/
    VSYDVL03.PG4IDT = PG0BW00.PG4IDT; /* issue date*/
    VSYDVL03.SY2SSCIN = PG0BM001.SY2SSCIN; /* safety class ind*/
  end

  VSYDVL03.PG4SSLDT = PG0BW00.PG4SSLDT; /* slsmn smpl dt*/

  VSYDVL03.XFCCD1 = PG0BM001.XFCCD1; /* specl featr code1*/
  VSYDVL03.XFCCD2 = PG0BM001.XFCCD2; /* specl featr code2*/
  VSYDVL03.XFCCD3 = PG0BM001.XFCCD3; /* specl featr code3*/
  VSYDVL03.XFCCD4 = PG0BM001.XFCCD4; /* specl featr code4*/
  VSYDVL03.XFCCD5 = PG0BM001.XFCCD5; /* specl featr code5*/
  VSYDVL03.XFCCD6 = PG0BM001.XFCCD6; /* specl featr code6*/

  VSYDVL03.XDVCD = PG0BM001.XDVCD; /* division code*/
  VSYDVL03.PG4XDVFL = "N"; /* xdv mod flag*/
  VSYDVL03.XPRCD = PG0BM001.XPRCD; /* product type*/
  VSYDVL03.PG4XPRFL = "N"; /* xpr mod flag*/
  VSYDVL03.XPLCD = PG0BM001.XPLCD; /* product line*/
  VSYDVL03.PG4XPLFL = "N"; /* xpl mod flag*/
  VSYDVL03.XPCCD = PG0BM001.XPCCD; /* category code*/
  VSYDVL03.PG4XPCFL = "N"; /* xpc mod flag*/
  VSYDVL03.XGACD = PG0BM001.XGACD; /* gender age*/
  VSYDVL03.PG4XGAFL = "N"; /* xga mod flag*/
  VSYDVL03.XDMCD = PG0BM001.XDMCD; /* dimension code*/
  VSYDVL03.PG4XDMFL = "N"; /* xdm mod flag*/
  VSYDVL03.XSUCD = PG0BM001.XSUCD; /* silhouette code*/
  VSYDVL03.PG4XSUFL = "N"; /* xsu mod flag*/
  VSYDVL03.XSPCD = PG0BM001.XSPCD; /* sports activity code*/
  VSYDVL03.PG-XSP-MOD-FL = "N"; /* xsp mod flag*/
  VSYDVL03.XCNCD = PG0BM001.XCNCD; /* construction code*/
  VSYDVL03.PG4XCNFL = "N"; /* xcn mod flag*/
  VSYDVL03.PG-NAIRBAG-MOD-FL = "N"; /* nairbag mod fl*/
  VSYDVL03.PG-XML-MOD-FL = "N"; /* xml mod flag*/
  VSYDVL03.PG-XMC-MOD-FL = "N"; /* xmc mod flag*/
  VSYDVL03.XSECD = PG0BM001.XSECD; /* season code*/
  VSYDVL03.PG4XSEFL = "N"; /* xse mod flag*/
  VSYDVL03.XSNYR = PG0BM001.XSNYR; /* season year*/
  VSYDVL03.PG4XSNFL = "N"; /* xsn mod flag*/
  VSYDVL03.PG4WMDFL = "N"; /* wmd mod flag*/
  VSYDVL03.PG4RMDFL = "N"; /* rmd mod flag*/
  VSYDVL03.SY1SSTNM = PG0BM001.SY1SSTNM; /* short style name*/
  VSYDVL03.PG4SZRNG = PG0BM001.PG4SZRNG; /* size range*/

  PG0B620(); /* move date fields*/

  VSYDVL03.PG-DUTY-RT-MOD-FL = "N"; /* duty rt mod flag*/
  VSYDVL03.PG4RFCFL = PG0BM001.PG4RFCFL; /* show on fcst fl*/
  VSYDVL03.KEYMDL = PG0BM001.KEYMDL; /* key model flag*/
  VSYDVL03.SYBSTGNB = PG0BM001.SYBSTGNB; /* style group number*/
  VSYDVL03.XOGCD = PG0BM001.XOGCD; /* option group code*/
  VSYDVL03.PG4DLTFL = "N"; /* delete flag*/
  VSYDVL03.ZZZSDT = XX0XW01.XX0XWDAT; /* setup date*/
  VSYDVL03.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  VSYDVL03.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change hhmm*/

end // end PG0B660

// add style development row
Function PG0B670()
  try
    call "VSYDVL03" ("A ", SQLCA, VSYDVL03) {isNoRefresh = yes, isExternal = yes};
  end /* add row*/

  if (sysVar.errorCode == "00000000" /* good call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* good sql function*/
    return; /* return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* bad call*/
   || SQLCA.VAGen_SQLCODE != 0)      /* bad sql function*/
    PGXREC.XXXMODID = "670"; /* Module identification*/
    TA1REC.TA1LOC = "ADD ROW            "; /* error description*/
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back previous updates*/
      converseLib.validationFailed(19); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back previous updates*/
      converseLib.validationFailed(01); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSYDVL03"; /* Table view name*/
    TA1REC.TA1TBLKE = VSYDVL03.PG4STNBR; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    exit stack;
  end

end // end PG0B670

// Submit Global update
Function PG0B680()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/

     /* next sentence*/

  else

    PG0BM001.XXXMODID = "650"; /* module identification*/
    converseLib.validationFailed(87); /* Error encountered with print request*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* if a report has been selected, submit jcl to product report*/
   /* ------------------------------------------------------------*/

  if (TA3REC.TA3RGNID == "03") /* if on production system*/
    PG0B687(); /* format production jcl*/
  else
    PG0B685(); /* format development jcl*/
  end

end // end PG0B680

// test jcl
Function PG0B685()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  set TA6REC empty; /* Subroutine work area*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area*/
   /* for jcl submit in the test environment.*/
   /* ------------------------------------------------------------*/
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PG0BTT2.TARJCL[TA6INDEX];
    TA6REC.TARTYPE[TA6INDEX] = PG0BTT2.TARTYPE[TA6INDEX];
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    if (PG0BTT2.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms inde*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PG0BS04(); /* Submit the JCL*/

end // end PG0B685

// production jcl
Function PG0B687()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/
  set TA6REC empty; /* Subroutine work area*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area*/
   /* for jcl submit in the test environment.*/
   /* ------------------------------------------------------------*/
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    TA6REC.TARJCL[TA6INDEX] = PG0BT02.TARJCL[TA6INDEX];
    TA6REC.TARTYPE[TA6INDEX] = PG0BT02.TARTYPE[TA6INDEX];
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    if (PG0BT02.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms inde*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  PG0BS04(); /* Submit the JCL*/

end // end PG0B687

// VALIDATE DEV CODE AND COLOR
Function PG0B710()

   /* ------------------------------------------------*/
   /* to confirm delete the dev code*/
   /* ------------------------------------------------*/
  if (PG0BW00.PG0BWDLS == "Y")
    if (PG0BW00.PG0BWKCS == "Y"
     || PG0BM001.PG9CLRNB != PG0BW01.PG9CLRNB)
      PG0BW00.PG0BWDLS = "N";
      PG0BW00.PG0BWDLS2 = "N";
      PGXREC.XXXMODID = "710"; /* Module identification*/
      set PG0BM001.PG4STNBR cursor, bold; /* Highlight*/
      converseLib.validationFailed(560); /* key data changed*/
      exit stack;
    end
  end

   /* -------------------------------------------------*/
   /* validate dprodg.vsydvx01 table and if a product*/
   /* is found, send a msg that this dev code cannot*/
   /* be deleted*/
   /* ------------------------------------------------*/

  if (PG0BW00.PG0BWDLS != "Y")

    PG0BS15();

    if (sysVar.errorCode == "00000000"
     && SQLCA.VAGen_SQLCODE == 0)
      PGXREC.XXXMODID = "710"; /* Module identification*/
      set PG0BM001.PG4STNBR cursor, bold; /* Highlight*/
      converseLib.validationFailed(561); /* product already exists*/
      exit stack; /* Exit to display map*/
    end
  end

   /* -------------------------------------------------*/
   /* validate dev code against DFBUY.VFQTBS01 to check*/
   /* if this product exists, if found, send a msg to*/
   /* usr that buy has already been submitted and*/
   /* cannot delete this dev code*/
   /* ------------------------------------------------*/

  if (PG0BW00.PG0BWDLS != "Y")

    PG0BS16();

    if (sysVar.errorCode == "00000000")
      if (SQLCA.VAGen_SQLCODE == 0
       || SQLCA.VAGen_SQLCODE == -811)
        PGXREC.XXXMODID = "710"; /* Module identification*/
        set PG0BM001.PG4STNBR cursor, bold; /* Highlight*/
        converseLib.validationFailed(562); /* buy already submitted*/
        exit stack; /* Exit to display map*/
      end
    end
  end

   /* -------------------------------------------------*/
   /* validate dev code against DPRODG.VSSQTB01 to check*/
   /* if this product exists, if found, you have to*/
   /* delete the dev code from this table also alongwith*/
   /* dprodg.vsydpc table*/
   /* ------------------------------------------------*/

  if (PG0BW00.PG0BWDLS != "Y")

    PG0BS17();

    if (sysVar.errorCode == "00000000")
      if (SQLCA.VAGen_SQLCODE == 0)
        if (VSSQTB01.PG-SLS-SMPL-IND != "C")
          PG0BW00.PG0BWDLS2 = "Y";
        else
          PGXREC.XXXMODID = "710"; /* Module identification*/
          set PG0BM001.PG4STNBR cursor, bold; /* Highlight*/
          converseLib.validationFailed(566); /* autoload already complete*/
          exit stack; /* Exit to display map*/
        end
      end
    end
  end

   /* --------------------------------------------------*/
   /* validate dev code against dprodg.vsydpc01 tbl,*/
   /* if found, delete the record*/
   /* --------------------------------------------------*/

  if (PG0BW00.PG0BWDLS != "Y")

    PG0BS18();

    if (sysVar.errorCode == "00000000"
     && SQLCA.VAGen_SQLCODE == 0)
      PG0BW01.PG9CLRNB = PG0BM001.PG9CLRNB;
      PGXREC.XXXMODID = "710";
      set PG0BM001.PG4STNBR cursor;
      converseLib.validationFailed(564);
      PG0BW00.PG0BWDLS = "Y";
      exit stack;
    else
      PGXREC.XXXMODID = "710"; /* Module identification*/
      set PG0BM001.PG4STNBR cursor, bold; /* Highlight*/
      PG0BW00.PG0BWDLS2 = "N"; /* reset ssqtb del switch back*/
      converseLib.validationFailed(563); /* dev code not exist in sydpc*/
      exit stack; /* Exit to display map*/
    end
  end

   /* -----------------------------------------------------*/
   /* delete the dev code from sydpc table after*/
   /* confirmation from the user by pressing pf6 key again*/
   /* -----------------------------------------------------*/

  if (PG0BW00.PG0BWDLS == "Y")

    if (PG0BW00.PG0BWDLS2 == "Y")

      PG0BS20();

      if (sysVar.errorCode == "00000000"
       && SQLCA.VAGen_SQLCODE == 0)
        PG0BW00.PG0BWDLS2 = "N";
      end
    end

    PG0BS19();

    if (sysVar.errorCode == "00000000"
     && SQLCA.VAGen_SQLCODE == 0)
      PGXREC.XXXMODID = "710";
      set PG0BM001.PG4STNBR cursor;
      PG0BW00.PG0BWDLS = "N"; /* reset the del switch back*/
      converseLib.validationFailed(565); /* deleted successfully*/
      exit stack; /* Exit to display map*/
    end
  end

end // end PG0B710

// EU0100 select unique
Function PG0BS-EU0100-SD()
   /* ------------------- pg0bs-eu0100-sd -------------------------*/

  set WEU0100 empty; /* initialize the passing record*/
  set SQLCA empty; /* initialize sqlca record*/

  WEU0100.WEU0100-EQUIP-PROD-FL = "N"; /* default equip flag 'N'*/

  WEU0100.WEU0100-TASK = "SD";
  WEU0100.WEU0100-CALLER-LOCATION = "PG0BS-EU0100-SD";

  WEU0100.SY1STNBR = PG0BW00.PG0BW-DEV-CD; /* style dev code*/

  try
    call "EU0100" (WEU0100) {isNoRefresh = yes, isExternal = yes};
  end /* select unique*/

  SQLCA.SQLCAREC = WEU0100.SQLCAREC;

  if (WEU0100.WEU0100-RETURN-CODE == 0) /* call successful*/
    return; /* return*/
  end

  TA1REC.TA1MAP = WEU0100.WEU0100-RETURN-CODE; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (WEU0100.WEU0100-RETURN-CODE == 8) /* resource not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
  end

  TA1REC.TA1TYPE = "DB2"; /* type of error*/
  TA1REC.TA1LOC = "PG0BS-EU0100-SD"; /* program location*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "EU0100"; /* called program*/
  TA1REC.TA1DBASE = "DPROD"; /* database name*/
  TA1REC.TA1TBLVU = "VSYDVL03"; /* table view name*/
  TA1REC.TA1TBLKE = WEU0100.SY1STNBR; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

   /* ------------------- pg0bs-eu0100-sd -------------------------*/
end // end PG0BS-EU0100-SD

// get factory name
Function PG0BS01()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set FY1REC empty;
  FY1REC.XGPCD = "02";
  FY1REC.XXXSTAT = "A";
  FY1REC.FY1FCTYC = PG0BW00.FY1FCTYC;
  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT FACTORY   ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFACTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/
end // end PG0BS01

// fetch next cat/line xref
Function PG0BS02()
  set FF2REC empty;
   /* ------------------------------------------------------------*/
   /* fetch the row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("N1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, fetch the row*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PG0BS03(); /* close cursor*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      set PG0BM001.XPLCD cursor, bold;
      set PG0BM001.XPCCD bold; /* highlight*/
      set PG0BM001.XPRCD bold; /* highlight*/
      PGXREC.XXXMODID = "S02"; /* process number*/
      converseLib.validationFailed(463); /* invalid combo*/
      PG0BS03(); /* close cursor*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "S02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT          ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PG0BS02

// close cursor cat/line xref
Function PG0BS03()
   /* ------------------------------------------------------------*/
   /* close cursor*/
   /* ------------------------------------------------------------*/

  try
    call "IO4000" ("C1", SQLCA, FF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "S03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR VFFXRF ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF2REC.FF2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PG0BS03

// call taop
Function PG0BS04()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* no msgs when batch job done*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(76); /* Return message*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    converseLib.validationFailed(86); /* Indicate user cancelled*/
    PG0BM001.XXXMODID = "S01"; /* module identification*/
  else
    converseLib.validationFailed(01); /* Indicate system error*/
    PG0BM001.XXXMODID = "S01"; /* module identification*/

  end

  exit stack; /* Exit to display map*/

end // end PG0BS04

// ADD ROW VSYPRD01
Function PG0BS05()
   /* ----------------------------------------------------------*/
    /* ADD    A UNIQUE ROW FROM DPROG.VSYPRD01*/
   /* ---------------------------------------------------------*/

  try
    call "IO5740" ("A ", SQLCA, PGAREC) {isNoRefresh = yes, isExternal = yes};
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    /* begin tcs*/
    set PG0BM001.PG4STNBR cursor;
    /* MOVE 'Y' TO PG0BW01.PG0BWRFD;*/
    PG0BW00.PG0BWRDS = "Y"; /* request for data*/
    PG0BM001.XXXMODID = "S05";
    return;
    /* end tcs*/

  else

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "INSERT A ROW IN THE TABLE"; /* Error message*/
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSYPRD01"; /* Table view name*/
    TA1REC.TA1TBLKE = PGAREC.PGAKEY; /* Table key*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(19); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    else

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      converseLib.validationFailed(01); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
      /* begin tcs*/
      converseLib.clearScreen();
       /* Clear screen before display*/
      /* end tcs*/

    end

    exit stack; /* Return to previous process*/

  end

end // end PG0BS05

// UPDATE ROW VSYPRD01
Function PG0BS06()
   /* ---------------------------------------------------------*/
   /* UPDATE A UNIQUE ROW FROM DPROG.VSYPRD01*/
   /* ---------------------------------------------------------*/

  try
    call "IO5740" ("U ", SQLCA, PGAREC) {isNoRefresh = yes, isExternal = yes};
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      /* begin tcs*/
      PG0BM001.XXXMODID = "S06";
      PG0BW00.PG0BWRDS = "Y"; /* Request for data switch*/
      /* end tcs*/
      return;

    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      converseLib.validationFailed(43); /* no records found*/
      /* begin tcs*/
      PG0BW01.PG4STNBR = "  ";
      PG0BM001.XXXMODID = "S06";

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back previous updates*/

      /* MOVE 'Y' TO PG0BW01.PG0BWRFD*/
   /* Request for data switch*/
      PG0BW00.PG0BWRDS = "Y"; /* end tcs*/

      exit stack; /* Return to redisplay map*/

    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE ROW"; /* Error description*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYPRD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PGAREC.PGAKEY; /* Table key*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ROLL BACK PREVIOUS UPDATES*/
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    /* begin tcs*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    /* end tcs*/

  end

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to display map*/

end // end PG0BS06

// SELECT UNIQUE FOR VSYPRD01
Function PG0BS09()
   /* ----------------------------------------------------------*/
   /* SELECT A UNIQUE ROW FROM DPROG.VSYPRD01*/
   /* ---------------------------------------------------------*/

  set PGAREC empty;

  PGAREC.XGPCD = "02";

  PGAREC.SY1STNBR = PG0BM001.PG4STNBR;

  try
    call "IO5740" ("S ", SQLCA, PGAREC) {isNoRefresh = yes, isExternal = yes};
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && (SQLCA.VAGen_SQLCODE == 0      /* and normal return code*/
   || SQLCA.VAGen_SQLCODE == 100))  

    return;

  else

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "XSPG201 FETCH FIRST STYLE NUMBER";
    TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSYPRD01"; /* Table view name*/
    TA1REC.TA1TBLKE = PGAREC.PGAKEY; /* Table key*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

    else

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    end

    return; /* Return to previous process*/

  end

end // end PG0BS09

// fetch next syclr csr row
Function PG0BS10()
   /* ------------------------------------------------------------*/
   /* fetch the row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("N2", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, fetch the row*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* rows not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT SYCLR    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG2REC.SYBSTGNB; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PG0BS10

// fetch next sydvl csr row
Function PG0BS12()
   /* ------------------------------------------------------------*/
   /* fetch the row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VSYDVL03" ("N1", SQLCA, VSYDVL03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, fetch the row*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* rows not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "S12"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT SYDVL    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVL03"; /* Table view name*/
  TA1REC.TA1TBLKE = VSYDVL03.SYBSTGNB; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PG0BS12

// SEL UNIQUE ROW FROM VSYDVX TBL
Function PG0BS15()
   /* ------------------------------------------------------------*/
   /* Get unique row from the table.*/
   /* ------------------------------------------------------------*/

  set VSYDVX01 empty;
  VSYDVX01.PG4STNBR = PG0BM001.PG4STNBR;
  VSYDVX01.PG9CLRNB = PG0BM001.PG9CLRNB;

  try
    call "IO0490" ("S ", SQLCA, VSYDVX01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful OR not , return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* rows not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "S15"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SYDVL ROW    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVX01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSYDVX01.PG4STNBR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PG0BS15

// sel unique row from vfqtbs01
Function PG0BS16()

   /* ------------------------------------------------------------*/
   /* Get unique row from the table.*/
   /* ------------------------------------------------------------*/

  set FBKREC empty;
  FBKREC.FB8RCTYP = "B";
  FBKREC.XDMCD = "00";
  FBKREC.SY1STNBR = PG0BM001.PG4STNBR;
  PG0BW00.PG0BW-COLR-NBR = PG0BM001.PG9CLRNB;

  if (PG0BW00.PG0BW-COLR-NBR-1ST-DIG != 0)
    FBKREC.SY2CLRID = PG0BW00.PG0BW-COLR-NBR;
  else
    FBKREC.SY2CLRID = PG0BW00.PG0BW-COLR-NBR-2ND-DIG;
  end

  try
    call "IO4740" ("SQ", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful OR not , return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0   /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100 /* rows not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* more than one row found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "S16"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT VFQTBS01 ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBKREC.SY1STNBR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PG0BS16

// sel unique row from ssqtb
Function PG0BS17()
   /* ------------------------------------------------------------*/
   /* Get unique row from the table.*/
   /* ------------------------------------------------------------*/

  PG0BW00.PG0BWDLS2 = "N";

  set VSSQTB01 empty;
  VSSQTB01.PG-STYDV-NBR = PG0BM001.PG4STNBR;
  VSSQTB01.PG-STYDV-COLR-NBR = PG0BM001.PG9CLRNB;

  try
    call "PG2300" ("S ", SQLCA, VSSQTB01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful OR not , return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* rows not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "S17"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SSQTB ROW    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSSQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSSQTB01.PG-STYDV-NBR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PG0BS17

// SEL UNIQUE ROW FROM SYDPC
Function PG0BS18()
   /* ------------------------------------------------------------*/
   /* SELECT ROW FROM THE TABLE*/
   /* ------------------------------------------------------------*/

  set VSYDPC02 empty;
  VSYDPC02.PG-STYDV-NBR = PG0BM001.PG4STNBR;
  VSYDPC02.PG-STYDV-COLR-NBR = PG0BM001.PG9CLRNB;

  try
    call "VSYDPC02" ("S ", SQLCA, VSYDPC02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* rows not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "S18"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SYDPC ROW    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDPC02"; /* Table view name*/
  TA1REC.TA1TBLKE = VSYDPC02.PG-STYDV-NBR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PG0BS18

// DELETE ROW FROM SYDPC TBL
Function PG0BS19()
   /* ------------------------------------------------------------*/
   /* delete the row from sydpc table*/
   /* ------------------------------------------------------------*/

  set VSYDPC02 empty;
  VSYDPC02.PG-STYDV-NBR = PG0BM001.PG4STNBR;
  VSYDPC02.PG-STYDV-COLR-NBR = PG0BM001.PG9CLRNB;

  try
    call "VSYDPC02" ("D ", SQLCA, VSYDPC02) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PG0BW00.PG0BWDLS = "N"; /* reset del switch back*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "S19"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DEL SYDPC ROW       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDPC02"; /* Table view name*/
  TA1REC.TA1TBLKE = VSYDPC02.PG-STYDV-NBR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PG0BS19

// DEL ROW FROM SSQTB TABLE
Function PG0BS20()
   /* ------------------------------------------------------------*/
   /* delete the row from SSQTB table*/
   /* ------------------------------------------------------------*/

  set VSSQTB01 empty;
  VSSQTB01.PG-STYDV-NBR = PG0BM001.PG4STNBR;
  VSSQTB01.PG-STYDV-COLR-NBR = PG0BM001.PG9CLRNB;

  try
    call "PG2300" ("D ", SQLCA, VSSQTB01) {isNoRefresh = yes, isExternal = yes};
  end /* DEL ROW*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PG0BW00.PG0BWDLS = "N"; /* reset del switch back*/
  PG0BW00.PG0BWDLS2 = "N"; /* reset ssqtb del switch back*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "S20"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DEL SSQTB ROW       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSSQTB01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSSQTB01.PG-STYDV-NBR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PG0BS20


// converse xogtbl pop up window
Function XPXOG01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XOGTBL.XOGCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XOGTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          if (XOGTBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = XOGTBL.XOGCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = XOGTBL.XOGDESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
              XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
            end
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
                                   /* Set selects to normal*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1; /* Increment screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XOGTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          if (XOGTBL.XGPCD[XX0XWCT1] == XX0XW02.XGPCD
           || XX0XW02.XGPCD == " ")
            XX0XM001.XX0XMCD[XX0XWCT2] = XOGTBL.XOGCD[XX0XWCT1];
            XX0XM001.XX0XMDES[XX0XWCT2] = XOGTBL.XOGDESC[XX0XWCT1];
            XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
            set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
            XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1; /* Decrement screen index*/
          end
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end

  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XOGTBL.XOGCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end

end // end XPXOG01
//*** RECORD=PG0BW00 ****
// working storage for pg0b -- style devel inquiry/maintenance
// ***********************
Record PG0BW00 type basicRecord
  10 PG0BWRDS PG0BWRDS ; 
  10 PG0BWMCS PG0BWMCS ; 
  10 PG0BWKCS PG0BWKCS ; 
  10 PG0BWDCS PG0BWDCS ; 
  10 PG0BWKYR PG0BWKYR ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 PG0BWDT1 PG0BWDT1 ; 
    15 PG0BW1CC PG0BW1CC ; 
    15 PG0BW1YR PG0BW1YR ; 
    15 PG0BW1MO PG0BW1MO ; 
  10 PG0BWDT2 PG0BWDT2 ; 
    15 PG0BW2CC PG0BW2CC ; 
    15 PG0BW2YR PG0BW2YR ; 
    15 PG0BW2MO PG0BW2MO ; 
    15 PG0BW2DA PG0BW2DA ; 
  10 PG0BWDT3 PG0BWDT3 ; 
    15 PG0BW3CC PG0BW3CC ; 
    15 PG0BW3YR PG0BW3YR ; 
    15 PG0BW3MO PG0BW3MO ; 
  10 PG0BWGRG PG0BWGRG ; 
    15 PG0BWGMM PG0BWGMM ; 
    15 PG0BWGDD PG0BWGDD ; 
    15 PG0BWGYY PG0BWGYY ; 
  10 PG4CNFDT PG4CNFDT ; 
  10 PG4SSLDT PG4SSLDT ; 
  10 PG4IDT PG4IDT ; 
  10 PG0BWYPG PG0BWYPG ; 
  10 PG0BW-STYDV-CHARS PG0BW-STYDV-CHARS ; 
    15 PG0BW-STYDV-CHAR1 PG0BW-STYDV-CHAR1 ; 
    15 PG0BW-STYDV-CHAR2 PG0BW-STYDV-CHAR2 ; 
    15 PG0BW-STYDV-CHAR3-6 PG0BW-STYDV-CHAR3-6 ; 
  10 PG0BW-VALID-SGRP-FLAG PG0BW-VALID-SGRP-FLAG ; 
  10 PG0BW-PREV-ERR-MSG PG0BW-PREV-ERR-MSG ; 
  10 PG0BW-DATA-WAS-FOUND-SW PG0BW-DATA-WAS-FOUND-SW ; 
  10 PG0BW-DEV-CD PG0BW-DEV-CD ; 
    15 PG0BW-DEV-CD-1ST-3 PG0BW-DEV-CD-1ST-3 ; 
    15 PG0BW-DEV-CD-2ND-3 PG0BW-DEV-CD-2ND-3 ; 
  10 PG0BW-CURR-CCYY PG0BW-CURR-CCYY ; 
    15 PG0BW-CURR-CC PG0BW-CURR-CC ; 
    15 PG0BW-CURR-YY PG0BW-CURR-YY ; 
  10 PG0BW-WRK-CCYY PG0BW-WRK-CCYY ; 
    15 PG0BW-WRK-CC PG0BW-WRK-CC ; 
    15 PG0BW-WRK-YY PG0BW-WRK-YY ; 
  10 PG0BW-COLR-NBR PG0BW-COLR-NBR ; 
    15 PG0BW-COLR-NBR-1ST-DIG PG0BW-COLR-NBR-1ST-DIG ; 
    15 PG0BW-COLR-NBR-2ND-DIG PG0BW-COLR-NBR-2ND-DIG ; 
  10 PG0BWDLS PG0BWDLS ; 
  10 PG0BWDLS2 PG0BWDLS2 ; 
end // end PG0BW00

//*** RECORD=PG0BW01 ****
// display working storage for pg0b -- style devel inq/maint
// ***********************
Record PG0BW01 type basicRecord
  5 PG0BWGRP PG0BWGRP ; 
    10 PG4STNBR PG4STNBR ; 
    10 XPRCD XPRCD ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 XGACD XGACD ; 
    10 XDMCD XDMCD ; 
    10 XSUCD XSUCD ; 
    10 XSPCD XSPCD ; 
    10 XSECD XSECD ; 
    10 XSNYR XSNYR ; 
    10 XOGCD XOGCD ; 
    10 XDVCD XDVCD ; 
    10 XCNCD XCNCD ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 PG0BMSYR PG0BMSYR ; 
    10 PG0BMSMO PG0BMSMO ; 
    10 PG0BMPYR PG0BMPYR ; 
    10 PG0BMPM1 PG0BMPM1 ; 
    10 PG0BMPM2 PG0BMPM2 ; 
    10 PG0BMFYR PG0BMFYR ; 
    10 PG0BMFMO PG0BMFMO ; 
    10 PG0BMFDA PG0BMFDA ; 
    10 PG0BMBYR PG0BMBYR ; 
    10 PG0BMBMO PG0BMBMO ; 
    10 PG0BMBDA PG0BMBDA ; 
    10 SY2SSCIN SY2SSCIN ; 
    10 PG0BMCYR PG0BMCYR ; 
    10 PG0BMCMO PG0BMCMO ; 
    10 PG0BMNYR PG0BMNYR ; 
    10 PG0BMNMO PG0BMNMO ; 
    10 PG4RFCFL PG4RFCFL ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 PG4SZRNG PG4SZRNG ; 
    10 SY2TDIND SY2TDIND ; 
    10 PG4PRFTY PG4PRFTY ; 
    10 PG4DMGRN PG4DMGRN ; 
    10 PG4DSGNM PG4DSGNM ; 
    10 PG4PMGNM PG4PMGNM ; 
    10 KEYMDL KEYMDL ; 
    10 PG9CLRNB PG9CLRNB ; 
end // end PG0BW01

//*** RECORD=PG0BW02 ****
// pg0b working storage for audit row "before" image
// ***********************
Record PG0BW02 type basicRecord
  5 PG0BWGRP PG0BWGRP ; 
    10 PG4STNBR PG4STNBR ; 
    10 XPRCD XPRCD ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 XGACD XGACD ; 
    10 XDMCD XDMCD ; 
    10 XSUCD XSUCD ; 
    10 XSPCD XSPCD ; 
    10 XSECD XSECD ; 
    10 XSNYR XSNYR ; 
    10 XOGCD XOGCD ; 
    10 XDVCD XDVCD ; 
    10 XCNCD XCNCD ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 PG0BMSYR PG0BMSYR ; 
    10 PG0BMSMO PG0BMSMO ; 
    10 PG0BMPYR PG0BMPYR ; 
    10 PG0BMPM1 PG0BMPM1 ; 
    10 PG0BMPM2 PG0BMPM2 ; 
    10 PG0BMFYR PG0BMFYR ; 
    10 PG0BMFMO PG0BMFMO ; 
    10 PG0BMFDA PG0BMFDA ; 
    10 PG0BMBYR PG0BMBYR ; 
    10 PG0BMBMO PG0BMBMO ; 
    10 PG0BMBDA PG0BMBDA ; 
    10 SY2SSCIN SY2SSCIN ; 
    10 PG0BMCYR PG0BMCYR ; 
    10 PG0BMCMO PG0BMCMO ; 
    10 PG0BMNYR PG0BMNYR ; 
    10 PG0BMNMO PG0BMNMO ; 
    10 PG4RFCFL PG4RFCFL ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 PG4SZRNG PG4SZRNG ; 
    10 SY2TDIND SY2TDIND ; 
    10 PG4PRFTY PG4PRFTY ; 
    10 PG4DMGRN PG4DMGRN ; 
    10 PG4DSGNM PG4DSGNM ; 
    10 PG4PMGNM PG4PMGNM ; 
    10 KEYMDL KEYMDL ; 
    10 PG9CLRNB PG9CLRNB ; 
end // end PG0BW02

//*** RECORD=PG0BW03 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record PG0BW03 type basicRecord
  10 TARJCL TARJCL ; 
    15 XPCCD XPCCD ; 
    15 YPGCD YPGCD ; 
    15 PG4STNBR PG4STNBR ; 
    15 * char(70) ; 
end // end PG0BW03

//*** RECORD=PG0BW05 ****
// ******COPY OF THE STYLE DEVELOPMENT TABLE WITH ALL FIELDS
// ***********************
Record PG0BW05 type basicRecord
  5 PG8GROUP PG8GROUP ; 
    10 PG4STNBR PG4STNBR ; 
    10 SY1STYNM SY1STYNM ; 
    10 SY1TECHS SY1TECHS ; 
    10 SY2TDIND SY2TDIND ; 
    10 XSPCD XSPCD ; 
    10 PG-XSP-MOD-FL PG-XSP-MOD-FL ; 
    10 PG4CLRVR PG4CLRVR ; 
    10 KEYMDL KEYMDL ; 
    10 FY8LSTCD FY8LSTCD ; 
    10 PG4DFCTY PG4DFCTY ; 
    10 PG4PRFTY PG4PRFTY ; 
    10 PG4PAFTY PG4PAFTY ; 
    10 PG4CNFDT PG4CNFDT ; 
    10 PG4SSLDT PG4SSLDT ; 
    10 PG4DMGRN PG4DMGRN ; 
    10 PG4DSGNM PG4DSGNM ; 
    10 PG4PMGNM PG4PMGNM ; 
    10 PG4PMKNM PG4PMKNM ; 
    10 PG4ASDNM PG4ASDNM ; 
    10 XBTCD XBTCD ; 
    10 XBCCD XBCCD ; 
    10 XFMCD XFMCD ; 
    10 XFCCD1 XFCCD1 ; 
    10 XFCCD2 XFCCD2 ; 
    10 XFCCD3 XFCCD3 ; 
    10 XFCCD4 XFCCD4 ; 
    10 XFCCD5 XFCCD5 ; 
    10 XFCCD6 XFCCD6 ; 
    10 YCQCD YCQCD ; 
    10 PG4AIRF1 PG4AIRF1 ; 
    10 PG4AIRF2 PG4AIRF2 ; 
    10 PG4AIRF3 PG4AIRF3 ; 
    10 PG4AIRB1 PG4AIRB1 ; 
    10 PG4AIRB2 PG4AIRB2 ; 
    10 PG4AIRB3 PG4AIRB3 ; 
    10 FY4FOBPR FY4FOBPR ; 
    10 FY4QTDPR FY4QTDPR ; 
    10 FY4TGTPR FY4TGTPR ; 
    10 FY7MLDCD FY7MLDCD ; 
    10 RB-MIDSL-VER-CD RB-MIDSL-VER-CD ; 
    10 PG4IDT PG4IDT ; 
    10 XDVCD XDVCD ; 
    10 PG4XDVFL PG4XDVFL ; 
    10 XPRCD XPRCD ; 
    10 PG4XPRFL PG4XPRFL ; 
    10 XPLCD XPLCD ; 
    10 PG4XPLFL PG4XPLFL ; 
    10 XPCCD XPCCD ; 
    10 PG4XPCFL PG4XPCFL ; 
    10 XGACD XGACD ; 
    10 PG4XGAFL PG4XGAFL ; 
    10 XDMCD XDMCD ; 
    10 PG4XDMFL PG4XDMFL ; 
    10 XSUCD XSUCD ; 
    10 PG4XSUFL PG4XSUFL ; 
    10 XCNCD XCNCD ; 
    10 PG4XCNFL PG4XCNFL ; 
    10 FK-NBR-AIRBAG-SHOE FK-NBR-AIRBAG-SHOE ; 
    10 PG-NAIRBAG-MOD-FL PG-NAIRBAG-MOD-FL ; 
    10 XMLCD XMLCD [4] ; 
    10 PG-XML-MOD-FL PG-XML-MOD-FL [4] ; 
    10 XMCCD XMCCD [4] ; 
    10 PG-XMC-MOD-FL PG-XMC-MOD-FL [4] ; 
    10 XSECD XSECD ; 
    10 PG4XSEFL PG4XSEFL ; 
    10 XSNYR XSNYR ; 
    10 PG4XSNFL PG4XSNFL ; 
    10 FY4WHLPR FY4WHLPR ; 
    10 PG4WMDFL PG4WMDFL ; 
    10 PG4RTLPR PG4RTLPR ; 
    10 PG4RMDFL PG4RMDFL ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 PG4SZRNG PG4SZRNG ; 
    10 SY2PDCMO SY2PDCMO ; 
    10 SY2PNCMO SY2PNCMO ; 
    10 SY2POFBD SY2POFBD ; 
    10 SY2FOFBD SY2FOFBD ; 
    10 PG2FPDMO PG2FPDMO ; 
    10 PG4FDLMO PG4FDLMO ; 
    10 SY2SSCIN SY2SSCIN ; 
    10 SY-DUTY-RT-CD SY-DUTY-RT-CD ; 
    10 PG-DUTY-RT-MOD-FL PG-DUTY-RT-MOD-FL ; 
    10 PG4FSLMO PG4FSLMO ; 
    10 PG4RFCFL PG4RFCFL ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 XOGCD XOGCD ; 
    10 PG4DELDT PG4DELDT ; 
    10 PG4DLTFL PG4DLTFL ; 
    10 PG4STYST PG4STYST ; 
    10 RBMFGTB RBMFGTB ; 
      15 RBMFGCH RBMFGCH [8] ; 
    10 RBCSNM RBCSNM ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PG0BW05

//*** RECORD=VSSQTB01 ****
// * SALESMAN SAMPLE TABLE
// 
// DB2 TABLE VIEW:      DPRODG.VSSQTB01
// 
// DCLGEN MEMBER:       DCL01097
// 
// I/O MODULE:          PG2300
// 
// CSP SUBROUTINE:      none
// 
// 
// KEY TO TABLE:        PG-STYDV-NBR
//                      PG-STYDV-COLR-NBR
// 
// MAINTENANCE HISTORY:
// 
//  -------  --------  ------  --------------------------------
//  CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
//  -------  --------  ------  --------------------------------
//          12/20/01  SBUNGO  New record.
// ************************
Record VSSQTB01 type basicRecord
  5 VSSQTB01-GROUP VSSQTB01-GROUP ; 
    10 PG-STYDV-NBR PG-STYDV-NBR ; 
    10 PG-STYDV-COLR-NBR PG-STYDV-COLR-NBR ; 
    10 FY-FCTY-CD FY-FCTY-CD ; 
    10 PG-FCTY-QTB-QTY PG-FCTY-QTB-QTY [40] ; 
    10 PC-PRDCU-ID PC-PRDCU-ID [40] ; 
    10 PG-RQTTIME-SHPDT PG-RQTTIME-SHPDT [40] ; 
    10 PG-SLS-SMPL-IND PG-SLS-SMPL-IND ; 
    10 PC-CNFM-NBR PC-CNFM-NBR ; 
    10 ZZ-SDT ZZ-SDT ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    10 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    10 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end VSSQTB01

//*** RECORD=WEU0100 ****
//                  PASSING RECORD FOR EU0100
// THIS IS A NIKEBOTH INCLUDE. RECORD LENGTH MUST BE 2500
// 
// EU0100-PASS-RECORD IS ACTUALLY 3 SEPARATE RECORDS. DUE TO
// NIKE BOTH LIMITATIONS THEY MUST BE PASSED IN 1 RECORD.
// PLEASE READ THIS BEFORE USING EU0100.
// 
// 
// EU0100-PASSING-INFO:
// 
//  EU0100-TASK IS REQUIRED.  USE ONE OF THE FOLLOWING:
// 
//           SELECT-A-REC                VALUE 'S '.
//           SELECT-A-SET                VALUE 'SS'.
//           SELECT-NEXT-OF-SET          VALUE 'SN'.
//           CLOSE-SET                   VALUE 'CS'.
// 
//  EU0100-CALLER-PROFILE IS INFORMATION NEEDED WHEN
//  DISPLAYING DB2 ERROR MESSAGES IN EU0100 VIA TA0010 OR
//  TA0020.
// 
//    LOCATION    IS ONE 24 CHARACTER FIELD
//                OR THREE 8 CHARACTER FIELDS
// 
//    CALLER APPL IS THE CALLING PROGRAM NAME
// 
//    NOTE ON CALLER LOCATION. THESE 32 CHARACTERS ARE MOVED
//    TO ERRDIAG-LOCATION WHEN DISPLAYING AN ERROR. THE LAST
//    8 CHARACTERS OF ERRDIAG-LOCATION ARE RESERVED FOR THE
//    EU0100 ROUTINE LOCATION. THE 1ST 24 CHARACTERS CAN BE
//    USED BY THE APPLICATION IN ANY WAY, AND IT IS STRONGLY
//    RECOMMENDED TO INCLUDE AT LEAST THE CALLING PROGRAMS
//    PARAGRAPH NAME.
// 
// 
// 
// EU0100-RETURN-INFO:
// 
//  INITIALIZE THE RETURN CODE TO 99 BEFORE CALLING EU0100.
//  EU0100 WILL SET THE RETURN CODE TO ZERO OR ANOTHER VALID
//  RETURN CODE.  THE 99 IS USED TO FIND OUT IF THE CALL
//  REALLY HAPPENED.  IF THE ERRDIAG SAYS 99 THEN THERE IS
//  SOMETHING WRONG WITH THE CALL OR CICS.
// 
//  EU0100-RETURN-CODE WILL HAVE ONE OF THE FOLLOWING VALUES:
// 
//       TASK-PERFORMED                 VALUE      0
//       GOT-A-911                      VALUE      8
//       FATAL-SQLCODE                  VALUE      9
//       INVALID-TASK                   VALUE     10
//       CALL-FAILURE                   VALUE     99
// 
//  EU0100 WILL ALSO RETURN A FLAG INDICATING IF THE PRODUCT
//  IS AN EQUIPMENT PRODUCT OR NOT, AND WHAT EQUIPMENT CATEGORY
//  THE PRODUCT FALLS INTO.  IT WILL ALSO RETURN THE SQLCODE.
// ***********************
Record WEU0100 type basicRecord
  5 WEU0100-PASSING-RECORD WEU0100-PASSING-RECORD ; 
    10 WEU0100-PASSING-INFO WEU0100-PASSING-INFO ; 
      15 WEU0100-TASK WEU0100-TASK ; 
      15 WEU0100-CALLER-PROFILE WEU0100-CALLER-PROFILE ; 
        20 WEU0100-CALLER-LOCATION WEU0100-CALLER-LOCATION ; 
          25 WEU0100-CALLER-LOC-1 WEU0100-CALLER-LOC-1 ; 
          25 WEU0100-CALLER-LOC-2 WEU0100-CALLER-LOC-2 ; 
          25 WEU0100-CALLER-LOC-3 WEU0100-CALLER-LOC-3 ; 
          25 * char(8) ; 
        20 WEU0100-CALLING-APPL WEU0100-CALLING-APPL ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
    10 WEU0100-RETURN-INFO WEU0100-RETURN-INFO ; 
      15 WEU0100-RETURN-CODE WEU0100-RETURN-CODE ; 
      15 WEU0100-EQUIP-PROD-FL WEU0100-EQUIP-PROD-FL ; 
      15 XPCCD XPCCD ; 
      15 SQLCAREC SQLCAREC ; 
    10 * char(2304) ; 
end // end WEU0100
DataItem PC-CNFM-NBR char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PG-FCTY-QTB-QTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PG-RQTTIME-SHPDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PG-SLS-SMPL-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first prop day
DataItem PG0BMBDA num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// prop booking month
DataItem PG0BMBMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// prop booking year
DataItem PG0BMBYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dom close out month
DataItem PG0BMCMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dom close out year
DataItem PG0BMCYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// first futures day
DataItem PG0BMFDA num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// future booking month
DataItem PG0BMFMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// future booking year
DataItem PG0BMFYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// nil close out month
DataItem PG0BMNMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// nil close out year
DataItem PG0BMNYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// first prod month
DataItem PG0BMPM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// first deliv month
DataItem PG0BMPM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// first prod year
DataItem PG0BMPYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// first sales month
DataItem PG0BMSMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// first sales year
DataItem PG0BMSYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PG0BW-COLR-NBR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PG0BW-COLR-NBR-1ST-DIG num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PG0BW-COLR-NBR-2ND-DIG num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PG0BW-CURR-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PG0BW-CURR-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PG0BW-CURR-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data was found switch
DataItem PG0BW-DATA-WAS-FOUND-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PG0BW-DEV-CD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PG0BW-DEV-CD-1ST-3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PG0BW-DEV-CD-2ND-3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous err message
DataItem PG0BW-PREV-ERR-MSG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style devel first char
DataItem PG0BW-STYDV-CHAR1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style devel second char
DataItem PG0BW-STYDV-CHAR2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style devel last four chars
DataItem PG0BW-STYDV-CHAR3-6 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style devel char breakdown
DataItem PG0BW-STYDV-CHARS char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// valid style group flag
DataItem PG0BW-VALID-SGRP-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PG0BW-WRK-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PG0BW-WRK-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PG0BW-WRK-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// breakout century yy mm
DataItem PG0BW1CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// breakout month yy mm
DataItem PG0BW1MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// breakout year yy mm
DataItem PG0BW1YR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// breakout century yy mm dd
DataItem PG0BW2CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// breakout day yy mm dd
DataItem PG0BW2DA num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// breakout month yy mm dd
DataItem PG0BW2MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// breakout year yy mm dd
DataItem PG0BW2YR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century for sum vmsty001
DataItem PG0BW3CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mmfor sum vmsty001
DataItem PG0BW3MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yy for sum vmsty001
DataItem PG0BW3YR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data changed switch
DataItem PG0BWDCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PG0BWDLS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PG0BWDLS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// breakout date yy mm
DataItem PG0BWDT1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// breakout date yy mm dd
DataItem PG0BWDT2 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cc yy mm for sum vmsty001
DataItem PG0BWDT3 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// greg dd
DataItem PG0BWGDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// greg mm
DataItem PG0BWGMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date in greg format (mmddyy)
DataItem PG0BWGRG num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level for work rec
DataItem PG0BWGRP char(132)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// greg yy
DataItem PG0BWGYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// key changed switch
DataItem PG0BWKCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work year
DataItem PG0BWKYR decimal(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// clear map switch
DataItem PG0BWMCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// request data switch
DataItem PG0BWRDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// type group code
DataItem PG0BWYPG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PG8GROUP char(396)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem RBCSNM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem RBMFGCH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem RBMFGTB char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem VSSQTB01-GROUP char(565)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem WEU0100-CALLER-LOC-1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem WEU0100-CALLER-LOC-2 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem WEU0100-CALLER-LOC-3 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem WEU0100-CALLER-LOCATION char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem WEU0100-CALLER-PROFILE char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem WEU0100-CALLING-APPL char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem WEU0100-EQUIP-PROD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem WEU0100-PASSING-INFO char(55)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem WEU0100-PASSING-RECORD char(2500)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem WEU0100-RETURN-CODE num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem WEU0100-RETURN-INFO char(141)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem WEU0100-TASK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end