package pg0d;
import ab.common.*;
import af.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import pc.common.*;
import pg.common.*;
import rd.common.*;
import sy.common.*;
import ta.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=PG0D ****
// ;-----------------------------------------------------------
// ;-----------------------------------------------------------
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          10/01/89  SCOCHR  NEW APPLICATION.
//          09/17/91  JMCLAU  PUT IN -911 ERROR MESSAGE ROUTINE
//          11/01/91  JMCLAU  PUT CODE TO PROCESS STYLE
//                            DEVELOPMENT XML AND XMC CODES.
//          12/09/91  JMCLAU  PUT CODE TO PROCESS IN-LINE
//                            PRODUCTS WHEN JUST THE PRODUCT
//                            STYLE ABBREVIATION IS ADDED OR
//                            MODIFIED.
// PG-20    01/02/91  JMCLAU  ADD CODE TO DISPLAY XML-MAT-CTNTL
//                            CD'S(XML-MAT-CTNTL-CD) WHEN
//                            PROCESSING IN-LINE PRODUCTS.
// PG-34    07/14/92  JMCLAU  ADD DUTY RATE CODE(SY-DUTY-RT-CD)
//                            TO THE MAP AND MAKE IT AN UPDATE-
//                            ABLE FIELD.
// PG-35    07/17/92  JMCLAU  ADD NUMBER OF AIRBAGS(FK-NBR-
//                            AIRBAG-SHOE) TO THE MAP AND MAKE
//                            IT AN UPDATEABLE FIELD.
// PG-27    08/13/92  LDELUH  After pf9 place csr on sty nbr.
// FL342    08/18/92  JMCLAU  ADD SEASON CODE AND YEAR TO MAP.
// PG-26&48 03/02/93  JMCLAU  ADD PG_FRST_PRDCTN_MO AND
//                            PG_FRST_DLVR_MO TO PG5REC.
// PG-46    08/10/93  JMCLAU  Add XXX-USER-ID TO DPRODG.
//                            VSDAUD01 Table and modify to move
//                            XXX-USER-ID into the Audit Table
//                            when writing an audit record.
// fb9995   09/15/93  pmainw  Change map for CSPv4 conversion.
// PG-60    01/12/94  JALLE1  Add mold code description to map.
// PG-61    01/25/94  LDELUH  Chg sty abrv to be npr name.
//          02/01/94  LDELUH  Chg syclr call to only get first
//                            one with valid life cycle (<11).
//          02/03/94  LDELUH  Remove style mold description.
// PG-90    10/18/95  DPACK   chg sydvl01 to sydvl02 and add
//                            mfg char to screen.
// PG9999   11/27/95  JNIESE  Add consumer name and style grp
//                            id to the screen.
//          05/13/96  CWHIT1  Add MIDSOLE VERSION
//                               to the screen.
//          05/23/96  CWHIT1  ALLOW EDITS ON TYPE 11 PRODUCTS
//          06/04/96  DPACK   Fix bug for inline products
//          07/30/96  CWHIT1  add factorys to display screen
//          10/03/96  CWHIT1  add key model   display screen
//          12/19/96  CWHIT1  REGEN FOR YR 2000
//          01/17/96  CWHIT1  allow new td codes
//  PG-790  07/25/97  RKUDPI  Added Midsole and Outsole on
//                            screen. Removed Style and NPR
//                            mold codes.
//  PG9999  01/14/98  jniese  Remove mold and last records
//  Y2KFIX  01/21/98  TTHAN1  RECOMPILE FOR NEW XP1REC SIZE
//          02/16/98  cwhit1  add new tech-diff code of X
//          03/12/02  AVERMA  TO MAINTAIN THE SHORT STYLE NAME
//                            IN SYNC WITH PPS SYSTEM, CODE
//                            CHANGED TO VALIDATE IF IS EQUIP
//                            PRODUCT, THEN SHORT STYLE NAME
//                            CAN BE MAINTAINED THRU THIS SCREE
//                            IF FOOTWEAR, THEN SHORT STYLE NAM
//                            CANNOT BE MAINTAINED.
// *********************
Program PG0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PG00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PG0DW01 PG0DW01; // record
  PG0DW02 PG0DW02; // record
  PG2REC PG2REC; // record
  PG5REC PG5REC; // record
  PGAREC PGAREC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  TA1REC TA1REC; // record
  TAEREC TAEREC; // record
  VDTYRT01 VDTYRT01; // record
  VMFGCH01 VMFGCH01; // record
  VSYDVL03 VSYDVL03; // record
  VTLCMP01 VTLCMP01; // record
  VTLINV01 VTLINV01; // record
  WEU0100 WEU0100; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XTPTBL; // table
  use XGATBL; // table
  use XGPTBL; // table
  use XMLTBL; // table
  use XMCTBL; // table
  use PG0DM.PG0DM001,  // forms
      PG0DM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPG001: XPPG001();
     /* --------------------------------------------------------*/
      /* SET RECORDS AND MAPS EMPTY*/
     /* --------------------------------------------------------*/

    set PGAREC empty;
    set PG2REC empty;
    set VSYDVL03 empty;
    set PG5REC empty;
    set SY1REC empty;
    set PG0DW01 empty;
    set PG0DW02 empty;
    set SQLCA empty;
    set TA1REC empty;
    set TAEREC empty;
    set PG0DM001 initial;
    set XX0XW01 empty;
    set XX0XW02 empty;

    if (COMMAREA.CAUSERA > " ")
      PG0DM001.SY1STNBR = COMMAREA.CAUSERA;
      PG0DW01.PG0DWRFD = "Y"; /* REQUEST FOR DATA FLAG*/
    else
      PG0DW01.PG0DWRFD = "N";

    end

    if (COMMAREA.XGPCD > " ")
      PG0DW01.XGPCD = COMMAREA.XGPCD;
    else
      PG0DW01.XGPCD = "02";

    end
    PG0D001: PG0D001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    if (converseVar.eventKey not pa2)
      goto PG0D001; /* Converse the main process*/
    end

  end // end main
end // end PG0D

// Main process to display a map
Function PG0D001()
   /* ----------------------------------------------------------*/

    /* CREATE AND MAINTAIN THE DPRODG.VSYPRD01*/

   /* ----------------------------------------------------------*/

  PG0D100(); /* OBTAIN THE DATA TO DISPLAY*/

  PG0D200(); /* FORMAT AND DISPLAY THE MAP*/

  PG0D300(); /* CHECK ATTENTION IDENTIFIERS*/

  PG0D400(); /* RESET THE FIELDS*/

  PG0D500(); /* VERIFY THE ENTERED DATA*/

  PG0D600(); /* PROCESS VALID INPUT REQUEST*/

   /* -----------------------END PG0D001-------------------------*/
end // end PG0D001

// OBTAIN THE DATA
Function PG0D100()
   /* ------------------------------------------------------------*/
      /* OBTAIN PRODUCT INFORMATION*/
     /* 0. Exit if key or any of the xmlcd's or xmccd's has not*/
     /* 0. changed*/
     /* 1. IF SY1STNBR EQ SPACES*/
           /* SET HIGHLIGHTED AND RECONVERSE*/
     /* 2. MOVE PRODUCT INFORMATION TO WORKING STORAGE*/
     /* 3. BUILD BEFORE AUDIT ROW IN WORKING STORAGE*/
     /* 4. SET VALUES TO MAP AND EXIT TO RECONVERSE*/
   /* ------------------------------------------------------------*/

  if (PG0DW01.PG0DWRFD == "N") /* Request for data switch*/
    return;
  end

  PG0DWDWF = "N"; /* data was found switch*/
  PG0DWILF = "N"; /* IN-LINE DATA NOT FOUND*/

  if (PG0DM001.SY1STNBR == "      ")
    converseLib.validationFailed(013);
    set PG0DM001.SY1STNBR cursor, bold;
    return;
  end

  PG0DS01(); /* GET STYLE INFORMATION*/

  if (PG0DW01.PG0DW-STYLE-INFO-FOUND-FLAG == "Y")
    PG0DW01.SY1STNBR = PG0DM001.SY1STNBR;
    PG0DWDWF = "Y"; /* data was found switch*/
    PG0DW01.PG0DWRFD = "N"; /* Request for data switch*/
    if (converseVar.validationMsgNum != 23
     && converseVar.validationMsgNum != 24)
      /*  */
      /* determine if this is a equipment product*/

      WEU0100.WEU0100-EQUIP-PROD-FL = "N"; /* default equip flag 'N'*/
      /*  */
      WEU0100.WEU0100-CALLING-APPL = "PG0D"; /* calling application*/
      WEU0100.SQLCAREC = SQLCA.SQLCAREC; /* pass sqlca*/
      /*  */
      WEU0100.SY1STNBR = PG0DW01.SY1STNBR; /* style dev code*/

      PG0DS-EU0100-SD(); /* select unique*/

      if (WEU0100.WEU0100-RETURN-CODE == 0) /* good return*/
        if (WEU0100.WEU0100-EQUIP-PROD-FL == "Y") /* if equipment product*/
          /* then user can edit short style name*/
          set PG0DM001.PGASSTNM normal;
          set PG0DM001.PGASSTNM underline;
                                  /* PRODUCTION SHORT STYLE NAME*/
        else
                                  /* if NOT (equipment or plug code), User*/
                                  /* should NOT edit style name*/
          set PG0DM001.PGASSTNM skip, noHighLight;
        end
      end
      /* SET PG0DM001.PGASSTNM CURSOR;;/*commented this --aparna*/
    end
    if (PG2REC.SY2RSTNB != "      ") /* If root style available*/
      PG0D110(); /* Get NPR data*/
    end
    PG0DS02(); /* GET ALT STYLE DATA*/
  end

  if (VAGen_SQLCODE == 0)
    PG0DW01.XTPCD = PGAREC.XTPCD;
    if (PGAREC.XTPCD in XTPTBL.XTPCD)
      PG0DM001.XTPDESC = XTPTBL.XTPDESC[sysVar.arrayIndex];
    end
  end
  /* -----------------------END PG0D100--------------------------*/
end // end PG0D100

// Get NPR data
Function PG0D110()
   /* -----------------------------------------------------------*/
    /* GET NPR INFORMAION FROM DPRODG.VSYDVL03*/
   /* -----------------------------------------------------------*/

  set VSYDVL03 empty;

  VSYDVL03.PG4STNBR = PG0DM001.SY2RSTNB;

  TA1REC.TA1PGMNM = "XSPG201";

  try
    call "VSYDVL03" ("S ", SQLCA, VSYDVL03) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PG0DM001.PG0DM-SYDVL-NPR-NAME = VSYDVL03.SY1STYNM;
    PG0DM001.PG0DM-RB-STYGRP-CNSMR-NM = VSYDVL03.RB-STYGRP-CNSMR-NM;
    PG0DM001.PG0DM-SY-STY-GRP-NBR = VSYDVL03.SYBSTGNB;
   /* MOVE VSYDVL03.FY7MLDCD TO PG0DM001.PG0DM-SYDVL-NPR-MOLD;*/
   /* MOVE VSYDVL03.RB-MIDSL-VER-CD TO PG0DM001.PG0DM-MIDSL-VER-CD;*/
    set VTLINV01 empty;
    PG0DW01.PG0DW-UPD-SYDVL = "N";
    PG0DW01.PG0DW-END-OF-VTLINV01 = "N";
    VTLINV01.TOOL-GRP-REF-ID = VSYDVL03.FY7MLDCD;
    PG0DS-VTLINV01-S1();
    PG0DS-VTLINV01-N1();
    if (PG0DW01.PG0DW-END-OF-VTLINV01 == "Y")
      PG0DM001.PG0DM-SYDVL-NPR-OUTSOLE = VSYDVL03.FY7MLDCD;
      PG0DM001.PG0DM-SYDVL-NPR-MIDSOLE = "          ";
      PG0DM001.PG0DM-SYDVL-NPR-DESC = "********************";
      PG0DW01.PG0DW-UPD-SYDVL = "Y";
    end
    while (PG0DW01.PG0DW-END-OF-VTLINV01 == "N")
      set VTLCMP01 empty;
      VTLCMP01.TOOL-CMPNT-TYP-CD = VTLINV01.TOOL-CMPNT-TYP-CD;
      VTLCMP01.TOOL-CMPNT-ID = VTLINV01.TOOL-CMPNT-ID;
      PG0DS-VTLCMP01-SU();
      if (SQLCA.VAGen_SQLCODE == 0
       && VTLCMP01.TOOL-CMPNT-PRTY-CD == "01")
        if (VTLINV01.TOOL-CMPNT-TYP-CD == "MS")
          PG0DM001.PG0DM-SYDVL-NPR-MIDSOLE = VTLCMP01.TOOL-CMPNT-NAME;
        else
          if (VTLINV01.TOOL-CMPNT-TYP-CD == "OS")
            PG0DM001.PG0DM-SYDVL-NPR-OUTSOLE = VTLCMP01.TOOL-CMPNT-NAME;
            PG0DM001.PG0DM-SYDVL-NPR-DESC = VTLCMP01.SY-STY-NM;
          end
        end
      end
      PG0DS-VTLINV01-N1();
    end
    PG0DS-VTLINV01-C1();
    PG0DM001.PG0DM-DEV-FCTY-CD = VSYDVL03.PG4DFCTY;
    PG0DM001.PG0DM-PROD-FCTY-CD = VSYDVL03.PG4PRFTY;
    PG0DM001.KEYMDL = VSYDVL03.KEYMDL;
   /* SET FY7REC EMPTY;*/
   /* MOVE PG0DM001.PG0DM-SYDVL-NPR-MOLD TO FY7REC.FY7MLDCD;*/
   /* PG0DS11;                       /* Get mold code desc*/
   /* MOVE FY7REC.FY7MSHDS TO PG0DM001.PG0DM-SYDVL-NPR-MOLD-DESC;*/
    return; /* return to previous process*/

  else

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 100)    /* and row not found*/

      PG0DM001.PG0DM-SYDVL-NPR-NAME = "******************************";
      PG0DM001.PG0DM-RB-STYGRP-CNSMR-NM = "******************************";
      PG0DM001.PG0DM-SY-STY-GRP-NBR = "******";
      PG0DM001.PG0DM-SYDVL-NPR-MIDSOLE = "**********";
      PG0DM001.PG0DM-SYDVL-NPR-OUTSOLE = "**********";
      PG0DM001.PG0DM-SYDVL-NPR-DESC = "******************************";
      return; /* return to previous process*/

    else

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1LOC = "PG0D110 GET NPR DATA";
      TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSYDVL03"; /* Table view name*/
      TA1REC.TA1TBLKE = VSYDVL03.PG4STNBR; /* Table key*/

      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

   /* Data base is busy please*/
        converseLib.validationFailed(11);
      else

        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      end

      return; /* Return to previous process*/

    end

  end

end // end PG0D110

// FORMAT AND DISPLAY THE MAP
Function PG0D200()
   /* ----------------------------------------------------------*/
   /* SETUP DATE IN MAP*/
   /* ----------------------------------------------------------*/

  PG0DM001.XXXCURDT = VGVar.currentShortGregorianDate;
  PG0DM001.CATOAP = COMMAREA.CATOAP;
  PG0DM001.CAITEM = COMMAREA.CAITEM;
  converse PG0DM001 ;
   /* ----------------------------------------------------------*/
   /* RESET THE MODULE ID*/
   /* ----------------------------------------------------------*/
  PG0DM001.XXXMODID = " ";
  COMMAREA.CATOAP = PG0DM001.CATOAP;
  COMMAREA.CAITEM = PG0DM001.CAITEM;
   /* ---------------------END PG0D200--------------------------*/
end // end PG0D200

// CHECK ATTENTION IDENTIFIERS
Function PG0D300()
   /* --------------------------------------------------------*/
   /* CHECK ATTENTION IDENTIFIERS*/
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    COMMAREA.CATOAP = "PG0D"; /* REENTER APPLICATION*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PG0DM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PG0DS05(); /* Exit to another application*/

      set PG0DM001.CATOAP cursor, bold; /* Highlight*/

    else

      PG0DM001.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pa2 
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PG0DM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FY0A"; /* TO application*/
    end

    PG0DS05(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf9)  /* and PF7 was not pressed*/

    PG0DM001.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    exit stack; /* Exit to display map*/

  end

end // end PG0D300

// reset highlighted FIELDS
Function PG0D400()
   /* -----------------------------------------------------------*/
    /* RESET ALL FIELDS*/
   /* -----------------------------------------------------------*/

  if (PG0DM001.SY1STNBR == PG0DW01.SY1STNBR) /* STYLE NOT CHANGED*/
    if (PG0DW01.PG0DWILF == "N") /* PROCESSING STYLE DEV*/
      PG0DW01.PG0DWIN1 = 1; /* MATERIAL LOWER DATA*/
      while (PG0DW01.PG0DWIN1 <= 4)
        set PG0DM001.XMLCD[PG0DWIN1] initialAttributes;
        PG0DW01.PG0DWIN1 = PG0DW01.PG0DWIN1 + 1;
      end
      set PG0DM001.XMCCD1 initialAttributes; /* SHELL MATERIAL*/
      set PG0DM001.XMCCD2 initialAttributes; /* OVERLAY MATERIAL 1*/
      set PG0DM001.SY-DUTY-RT-CD initialAttributes; /* DUTY RATE CODE*/
      set PG0DM001.FK-NBR-AIRBAG-SHOE initialAttributes; /* NUMBER OF AIRBAGS*/
      if (VSYDVL03.XPLCD == "11")
        set PG0DM001.PG0DM-SYDVL-NPR-OUTSOLE initialAttributes; /* OUTSOLE CODE*/
        set PG0DM001.FY8LSTCD initialAttributes; /* LAST CODE*/
        set PG0DM001.PG0DM-TECH-DIFCLT-IND initialAttributes; /* TECH DIFF*/
        set PG0DM001.PG4AIRF1 initialAttributes; /* AIRBAG*/
        set PG0DM001.PG4AIRF2 initialAttributes; /* AIRBAG*/
        set PG0DM001.PG4AIRF3 initialAttributes; /* AIRBAG*/
      end
    else
      PG0DW01.PG0DWIN1 = 1;
      while (PG0DW01.PG0DWIN1 <= 4) /* MATERIAL LOWER DATA*/
        set PG0DM001.XMLCD[PG0DWIN1] protect;
        PG0DW01.PG0DWIN1 = PG0DW01.PG0DWIN1 + 1;
      end
      set PG0DM001.XMCCD1 protect; /* SHELL MATERIAL*/
      set PG0DM001.XMCCD2 protect; /* OVERLAY MATERIAL 1*/
      set PG0DM001.SY-DUTY-RT-CD protect; /* DUTY RATE CODE*/
      set PG0DM001.FK-NBR-AIRBAG-SHOE protect; /* NUMBER OF AIRBAGS*/
      set PG0DM001.PG0DM-SYDVL-NPR-MIDSOLE protect; /* MOLD CODE*/
      set PG0DM001.PG0DM-SYDVL-NPR-OUTSOLE protect; /* MOLD CODE*/
      set PG0DM001.FY8LSTCD protect; /* LAST CODE*/
      set PG0DM001.PG0DM-TECH-DIFCLT-IND protect; /* TECH DIFF*/
      set PG0DM001.PG4AIRF1 protect; /* AIRBAG*/
      set PG0DM001.PG4AIRF2 protect; /* AIRBAG*/
      set PG0DM001.PG4AIRF3 protect; /* AIRBAG*/
    end
  end

  set PG0DM001.SY1STNBR normal; /* STYLE NUMBER*/

  set PG0DM001.PGASSTNM normal; /* PRODUCTION SHORT STYLE NAME*/

  set PG0DM001.XTPCD normal; /* TOOLING CODE*/

  set PG0DM001.CATOAP normal; /* OPTION*/

   /* ------------------------------------------------------------*/
   /* Check if tool code ,material content lower, and/or material*/
   /* content codes were requested.*/
   /* ------------------------------------------------------------*/

  if (PG0DM001.XTPCD == "?"     /* Tool code list requested*/
   || PG0DM001.XTPCD == "??"    /* Tool code list requested*/
   || PG0DM001.XMLCD[1] == "?"  /* Mat ctnt lower code requested*/
   || PG0DM001.XMLCD[1] == "??" /* Mat ctnt lower code requested*/
   || PG0DM001.XMLCD[2] == "?"  /* Mat ctnt lower code requested*/
   || PG0DM001.XMLCD[2] == "??" /* Mat ctnt lower code requested*/
   || PG0DM001.XMLCD[3] == "?"  /* Mat ctnt lower code requested*/
   || PG0DM001.XMLCD[3] == "??" /* Mat ctnt lower code requested*/
   || PG0DM001.XMLCD[4] == "?"  /* Mat ctnt lower code requested*/
   || PG0DM001.XMLCD[4] == "??" /* Mat ctnt lower code requested*/
   || PG0DM001.XMCCD1 == "?"    /* Mat ctnt code requested*/
   || PG0DM001.XMCCD1 == "??"   /* Mat ctnt code requested*/
   || PG0DM001.XMCCD1 == "???"  /* Mat ctnt code requested*/
   || PG0DM001.XMCCD2 == "?"    /* Mat ctnt code requested*/
   || PG0DM001.XMCCD2 == "??"   /* Mat ctnt code requested*/
   || PG0DM001.XMCCD2 == "???"  /* Mat ctnt code requested*/
  )                            
    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      PG0DM001.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(03); /* Indicate PF key not valid*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of tooling codes.*/
   /* ------------------------------------------------------------*/

  if (PG0DM001.XTPCD == "?" /* Tool code list requested*/
   || PG0DM001.XTPCD == "??") /* Tool code list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  TOOLING CODE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXTP01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PG0DM001.XTPCD = "  "; /* Selected code*/
      PG0DM001.XTPDESC = "  "; /* Selected code*/

    else
      PG0DM001.XTPCD = XTPTBL.XTPCD[XX0XWPIX]; /* Selected code*/
      PG0DM001.XTPDESC = XTPTBL.XTPDESC[XX0XWPIX]; /* Description*/

    end

    set PG0DM001.XTPCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of material lower codes*/
   /* for Material Content Lower code1.*/
   /* ------------------------------------------------------------*/
  if (PG0DM001.XMLCD[1] == "?" /* Tool code list requested*/
   || PG0DM001.XMLCD[1] == "??") /* Tool code list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  OUTSOLE PRIMARY CODE "; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXML01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PG0DM001.XMLCD[1] = "  "; /* Selected code*/

    else
      PG0DM001.XMLCD[1] = XMLTBL.XMLCD[XX0XWPIX]; /* Selected code*/
      PG0DM001.XMLSDESC[1] = XMLTBL.XMLSDESC[XX0XWPIX]; /* Description*/

    end

    set PG0DM001.XMLCD[1] cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of material lower codes*/
   /* for Material Content Lower code2.*/
   /* ------------------------------------------------------------*/
  if (PG0DM001.XMLCD[2] == "?" /* Tool code list requested*/
   || PG0DM001.XMLCD[2] == "??") /* Tool code list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  OUTSOLE SECONDARY CODE  "; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXML01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PG0DM001.XMLCD[2] = "  "; /* Selected code*/

    else
      PG0DM001.XMLCD[2] = XMLTBL.XMLCD[XX0XWPIX]; /* Selected code*/
      PG0DM001.XMLSDESC[2] = XMLTBL.XMLSDESC[XX0XWPIX]; /* Description*/

    end

    set PG0DM001.XMLCD[2] cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of material lower codes*/
   /* for Material Content Lower code3.*/
   /* ------------------------------------------------------------*/
  if (PG0DM001.XMLCD[3] == "?" /* Tool code list requested*/
   || PG0DM001.XMLCD[3] == "??") /* Tool code list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  MIDSOLE PRIMARY CODE  "; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXML01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PG0DM001.XMLCD[3] = "  "; /* Selected code*/

    else
      PG0DM001.XMLCD[3] = XMLTBL.XMLCD[XX0XWPIX]; /* Selected code*/
      PG0DM001.XMLSDESC[3] = XMLTBL.XMLSDESC[XX0XWPIX]; /* Description*/

    end

    set PG0DM001.XMLCD[3] cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of material lower codes*/
   /* for Material Content Lower code4.*/
   /* ------------------------------------------------------------*/
  if (PG0DM001.XMLCD[4] == "?" /* Tool code list requested*/
   || PG0DM001.XMLCD[4] == "??") /* Tool code list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  MIDSOLE SECONDARY CODE  "; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXML01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PG0DM001.XMLCD[4] = "  "; /* Selected code*/

    else
      PG0DM001.XMLCD[4] = XMLTBL.XMLCD[XX0XWPIX]; /* Selected code*/
      PG0DM001.XMLSDESC[4] = XMLTBL.XMLSDESC[XX0XWPIX]; /* Description*/

    end

    set PG0DM001.XMLCD[4] cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of material codes*/
   /* for Material Content code1.*/
   /* ------------------------------------------------------------*/
  if (PG0DM001.XMCCD1 == "?"  /* Tool code list requested*/
   || PG0DM001.XMCCD1 == "??" /* Tool code list requested*/
   || PG0DM001.XMCCD1 == "???") /* Tool code list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  SHELL MATERIAL CODE  "; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXMC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PG0DM001.XMCCD1 = "  "; /* Selected code*/

    else
      PG0DM001.XMCCD1 = XMCTBL.XMCCD[XX0XWPIX]; /* Selected code*/
      PG0DM001.XMCSDESC[1] = XMCTBL.XMCSDESC[XX0XWPIX]; /* Description*/

    end

    set PG0DM001.XMCCD1 cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of material codes*/
   /* for Material Content code2.*/
   /* ------------------------------------------------------------*/
  if (PG0DM001.XMCCD2 == "?"  /* Tool code list requested*/
   || PG0DM001.XMCCD2 == "??" /* Tool code list requested*/
   || PG0DM001.XMCCD2 == "???") /* Tool code list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  OVERLAY MATERIAL CODE1  "; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXMC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      PG0DM001.XMCCD2 = "  "; /* Selected code*/

    else
      PG0DM001.XMCCD2 = XMCTBL.XMCCD[XX0XWPIX]; /* Selected code*/
      PG0DM001.XMCSDESC[2] = XMCTBL.XMCSDESC[XX0XWPIX]; /* Description*/

    end

    set PG0DM001.XMCCD2 cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  PG0DM001.XXXMODID = "400"; /* Module identification*/

  exit stack; /* Exit to display map*/

   /* ---------------------END PG0D400---------------------------*/
end // end PG0D400

// VERIFY THE ENTERED DATA
Function PG0D500()
   /* ---------------------------------------------------------*/
   /* VERIFY ENTERED DATA ONLY IF NO ERRORS*/
   /* ---------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0
   || PG0DW01.PG0DWDWF == "N") /* no data found*/
    exit stack;
  end

  if (converseVar.eventKey is pf9)
    if (PG0DM001.SY1STNBR != PG0DW01.SY1STNBR)
      converseLib.validationFailed(022);
      exit stack;
    end
  end

  if (PG0DM001.SY1STNBR != PG0DW01.SY1STNBR)
    PG0DW01.PG0DWRFD = "Y"; /* Request for data switch*/
    exit stack; /* key changed, exit to get new data*/
  end

  if (PG0DW01.SY1STNBR == "      ")
    return;
  end

  if (PG0DM001.FK-NBR-AIRBAG-SHOE > "09")
    converseLib.validationFailed(30);
    set PG0DM001.FK-NBR-AIRBAG-SHOE cursor, bold;
  end

  if (PG0DM001.XMCCD2 > "  ")
    if (PG0DM001.XMCCD2 in XMCTBL.XMCCD)
      PG0DM001.XMCSDESC[2] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
    else
      converseLib.validationFailed(006);
      PG0DM001.XMCSDESC[2] = " ";
      set PG0DM001.XMCCD2 cursor, bold;
    end
  end

  if (PG0DM001.XMCCD1 > "  ")
    if (PG0DM001.XMCCD1 in XMCTBL.XMCCD)
      PG0DM001.XMCSDESC[1] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
    else
      converseLib.validationFailed(006);
      PG0DM001.XMCSDESC[1] = " ";
      set PG0DM001.XMCCD1 cursor, bold;
    end
  end

  if (PG0DM001.SY-DUTY-RT-CD == "  ")
      /* NEXT SENTENCE   DUTY RATE DEFAULT*/
  else

    PG0DS10(); /* VALIDATE DUTY RATE CODE*/

  end

  PG0DW01.PG0DWIN1 = 4;
  while (PG0DW01.PG0DWIN1 >= 1)
    if (PG0DM001.XMLCD[PG0DWIN1] > "  ")
      if (PG0DM001.XMLCD[PG0DWIN1] in XMLTBL.XMLCD)
        PG0DM001.XMLSDESC[PG0DWIN1] = XMLTBL.XMLSDESC[sysVar.arrayIndex];
      else
        converseLib.validationFailed(006);
        PG0DM001.XMLSDESC[PG0DWIN1] = " ";
        set PG0DM001.XMLCD[PG0DWIN1] cursor, bold;
      end
    end
    PG0DW01.PG0DWIN1 = PG0DW01.PG0DWIN1 - 1;
  end

  if (PG0DM001.XTPCD == "  ")
    converseLib.validationFailed(013);
    set PG0DM001.XTPCD cursor, bold;
    PG0DM001.XXXMODID = "500";
  end

  if (PG0DM001.XTPCD > "  ")
    if (PG0DM001.XTPCD in XTPTBL.XTPCD)
      PG0DM001.XTPDESC = XTPTBL.XTPDESC[sysVar.arrayIndex];
    else
      converseLib.validationFailed(006);
      PG0DM001.XTPDESC = " ";
      set PG0DM001.XTPCD cursor, bold;
    end
  end

  if (PG0DM001.PGASSTNM > "  ")
     /* NEXT SENETENCE*/
  else
    converseLib.validationFailed(013);
    PG0DM001.XXXMODID = "500";
    set PG0DM001.PGASSTNM cursor, bold;
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

  if (PG0DW01.PG0DWILF == "Y") /* Processing in-line data*/
    if (PG0DM001.PGASSTNM == PGAREC.PGASSTNM
     && PG0DM001.XTPCD == PGAREC.XTPCD)
      exit stack;
    else
      if (converseVar.eventKey is enter)
        converseLib.validationFailed(025); /* Hit pf9 to update*/
        return;
      end
    end
  else
    if (PG0DM001.PGASSTNM == PGAREC.PGASSTNM
     && PG0DM001.XTPCD == PGAREC.XTPCD
     && PG0DM001.XMLCD[1] == VSYDVL03.XMLCD[1]
     && PG0DM001.XMLCD[2] == VSYDVL03.XMLCD[2]
     && PG0DM001.XMLCD[3] == VSYDVL03.XMLCD[3]
     && PG0DM001.XMLCD[4] == VSYDVL03.XMLCD[4]
     && PG0DM001.XMCCD1 == VSYDVL03.XMCCD[1]
     && PG0DM001.XMCCD2 == VSYDVL03.XMCCD[2]
     && PG0DM001.SY-DUTY-RT-CD == VSYDVL03.SY-DUTY-RT-CD
     && (PG0DM001.PG0DM-SYDVL-NPR-OUTSOLE == VSYDVL03.FY7MLDCD
     || (PG0DM001.PG0DM-SYDVL-NPR-OUTSOLE != VSYDVL03.FY7MLDCD
     && PG0DW01.PG0DW-UPD-SYDVL == "N"))
     && (PG0DM001.FY8LSTCD == VSYDVL03.FY8LSTCD
     || (PG0DM001.FY8LSTCD != VSYDVL03.FY8LSTCD
     && PG0DW01.PG0DW-UPD-SYDVL == "N"))
     && PG0DM001.FK-NBR-AIRBAG-SHOE == VSYDVL03.FK-NBR-AIRBAG-SHOE
     && PG0DM001.PG0DM-TECH-DIFCLT-IND == VSYDVL03.SY2TDIND
     && PG0DM001.PG4AIRF1 == VSYDVL03.PG4AIRF1
     && PG0DM001.PG4AIRF2 == VSYDVL03.PG4AIRF2
     && PG0DM001.PG4AIRF3 == VSYDVL03.PG4AIRF3)
      PG0DM001.PG0DM-SYDVL-NPR-OUTSOLE = PG0DW02.PG0DM-SYDVL-NPR-OUTSOLE;
      PG0DM001.FY8LSTCD = PG0DW02.FY8LSTCD;
      exit stack;
    end
  end

  if (PG0DW01.PG0DWILF == "Y") /* Processing in-line data*/
    return;
  else
    if (PG0DW02.XPLCD != "11"
     && (PG0DM001.PG0DM-SYDVL-NPR-OUTSOLE != 
    PG0DW02.PG0DM-SYDVL-NPR-OUTSOLE
     || PG0DM001.FY8LSTCD != PG0DW02.FY8LSTCD
     || PG0DM001.PG0DM-TECH-DIFCLT-IND != PG0DW02.PG0DM-TECH-DIFCLT-IND
     || PG0DM001.PG4AIRF1 != PG0DW02.PG4AIRF1
     || PG0DM001.PG4AIRF2 != PG0DW02.PG4AIRF2
     || PG0DM001.PG4AIRF3 != PG0DW02.PG4AIRF3))
      converseLib.validationFailed(032);
      exit stack;
    end
  end

   /* The description is available right on the DPROD.VTLCMP01 table*/
   /* Hence no need for this access;*/
   /* IF PG0DM001.PG0DM-SYDVL-NPR-MOLD NE ' ';*/
   /* SET FY7REC EMPTY;*/
   /* MOVE PG0DM001.PG0DM-SYDVL-NPR-MOLD TO FY7REC.FY7MLDCD;*/
   /* PG0DS11;*/
   /* MOVE FY7REC.FY7MSHDS TO PG0DM001.PG0DM-SYDVL-NPR-MOLD-DESC;*/
   /* IF SQLCA.SQLCODE NE 0;*/
   /* MOVE 033 TO EZEMNO;*/
   /* SET PG0DM001.PG0DM-SYDVL-NPR-MOLD CURSOR,BRIGHT;*/
   /* EZEFLO;*/
   /* END;*/
   /* ELSE;*/
   /* MOVE ' ' TO PG0DM001.PG0DM-SYDVL-NPR-MOLD-DESC;*/
   /* END;*/

   /* IF PG0DM001.FY8LSTCD NE ' ';*/
   /* SET FY8REC EMPTY;*/
   /* MOVE PG0DM001.FY8LSTCD TO FY8REC.FY8LSTCD;*/
   /* PG0DS13;*/
   /* IF SQLCA.SQLCODE NE 0;*/
   /* MOVE 034 TO EZEMNO;*/
   /* SET PG0DM001.FY8LSTCD CURSOR,BRIGHT;*/
   /* EZEFLO;*/
   /* END;*/
   /* ;*/

  if (PG0DM001.PG0DM-TECH-DIFCLT-IND != "A"
   && PG0DM001.PG0DM-TECH-DIFCLT-IND != "B"
   && PG0DM001.PG0DM-TECH-DIFCLT-IND != "C"
   && PG0DM001.PG0DM-TECH-DIFCLT-IND != "D"
   && PG0DM001.PG0DM-TECH-DIFCLT-IND != "E"
   && PG0DM001.PG0DM-TECH-DIFCLT-IND != "F"
   && PG0DM001.PG0DM-TECH-DIFCLT-IND != "G"
   && PG0DM001.PG0DM-TECH-DIFCLT-IND != "H"
   && PG0DM001.PG0DM-TECH-DIFCLT-IND != "I"
   && PG0DM001.PG0DM-TECH-DIFCLT-IND != "J"
   && PG0DM001.PG0DM-TECH-DIFCLT-IND != "K"
   && PG0DM001.PG0DM-TECH-DIFCLT-IND != "L"
   && PG0DM001.PG0DM-TECH-DIFCLT-IND != "M"
   && PG0DM001.PG0DM-TECH-DIFCLT-IND != "X"
   && PG0DM001.PG0DM-TECH-DIFCLT-IND != " ")
    converseLib.validationFailed(35);
    set PG0DM001.PG0DM-TECH-DIFCLT-IND cursor, bold;
    exit stack;
  end
  if (PG0DM001.PG4AIRF1 != "E"
   && PG0DM001.PG4AIRF1 != "N"
   && PG0DM001.PG4AIRF1 != " ")
    converseLib.validationFailed(36);
    set PG0DM001.PG4AIRF1 cursor, bold;
    exit stack;
  end
  if (PG0DM001.PG4AIRF2 != "E"
   && PG0DM001.PG4AIRF2 != "N"
   && PG0DM001.PG4AIRF2 != " ")
    converseLib.validationFailed(36);
    set PG0DM001.PG4AIRF2 cursor, bold;
    exit stack;
  end
  if (PG0DM001.PG4AIRF3 != "E"
   && PG0DM001.PG4AIRF3 != "N"
   && PG0DM001.PG4AIRF3 != " ")
    converseLib.validationFailed(36);
    set PG0DM001.PG4AIRF3 cursor, bold;
    exit stack;
  end

  if (converseVar.eventKey is enter)
    converseLib.validationFailed(025); /* Hit pf9 to update*/
    return;
  end
   /* --------------------END PG0D500----------------------------*/
end // end PG0D500

// PROCESS VALID INPUT REQUEST
Function PG0D600()
   /* ------------------------------------------------------------*/
    /* IF ALL EDITS WERE GOOD AND PF9 WAS PRESSED*/
       /* IF PROCESSING AN IN-LINE PRODUCT - UPDATE OR INSERT*/
       /* A ROW IN THE DPRODG.VSYPRD01 TABLE.*/
       /* IF PROCESSING A STYLE DEVELOPMENT PRODUCT*/
            /* IF THE TOOL CODE HAS CHANGED UPDATE OR INSERT A ROW*/
            /* IN THE DPRODG.VSYPRD01 TABLE.*/
            /* IF ANY OF THE MATERIAL CONTENT CODES WERE MODIFIED*/
            /* UPDATE THE DPRODG.VSYDVL02 TABLE.*/
            /* INSERT A AUDIT ROW IN DPRODG.VSDAUD01 TABLE THAT*/
            /* IS A 'BEFORE' IMAGE OF XMLCD AND XMCCD CODES.*/
            /* INSERT A AUDIT ROW IN DPRODG.VSDAUD01 TABLE THAT*/
            /* IS A 'AFTER' IMAGE OF XML AND XMC CODES.*/
            /* FOR EACH XML OR XMC CODE MODIFIED SET A MODIFIED*/
            /* FL TO 'Y'.*/
            /* IF THE DUTY RATE CODE(SY-DUTY-RT-CD) WAS MODIFIED:*/
            /* UPDATE THE DPRODG.VSYDVL02 TABLE.*/
            /* INSERT A AUDIT ROW IN DPRODG.VSDAUD01 TABLE THAT*/
            /* IS A 'BEFORE' IMAGE OF THE DUTY RATE CODE.*/
            /* INSERT A AUDIT ROW IN DPRODG.VSDAUD01 TABLE THAT*/
            /* IS A 'AFTER' IMAGE OF THE DUTY RATE CODE.*/
            /* SET THE MODIFIED FLAG TO 'Y'.*/
            /* IF THE NUMBER OF AIRBAGS FIELD(FB-NBR-AIRBAG-SHOE)*/
            /* WAS MODIFIED:*/
            /* UPDATE THE DPRODG.VSYDVL02 TABLE.*/
            /* INSERT A AUDIT ROW IN DPRODG.VSDAUD01 TABLE THAT*/
            /* IS A 'BEFORE' IMAGE OF THE DUTY RATE CODE.*/
            /* INSERT A AUDIT ROW IN DPRODG.VSDAUD01 TABLE THAT*/
            /* IS A 'AFTER' IMAGE OF THE DUTY RATE CODE.*/
            /* SET THE MODIFIED FLAG TO 'Y'.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not pf9)
    return;
  end

  XX0XS01(); /* DATE TIME ROUTINE*/

   /* ------------------------------------------------------------*/
    /* IF ALL EDITS WERE GOOD AND PF9 WAS PRESSED*/
       /* WRITE OR ADD NEW RECORD*/
   /* ------------------------------------------------------------*/

  if (PG0DW01.PG0DWILF == "Y") /* PROCESSING IN-LINE PRODUCT*/

    PG0D610(); /* PROCESSING IN-LINE TOOL CD*/

    return;

  else /* PROCESS STYLE DEVELOPEMENT PRODUCT*/

    PG0D620(); /* UPDATE STYLE DEVELOPMENT ROW*/

    PG0D630(); /* ADD BEFORE AND AFTER AUDIT ROWS*/

    return;

  end

   /* ------------------------END PG0D600------------------------*/
end // end PG0D600

// PROCESS IN-LINE PRODUCT
Function PG0D610()
   /* ------------------------------------------------------------*/
   /* PROCESS A IN-LINE PRODUCT*/
    /* IF TOOL CODE CHANGED ON THE IN LINE PRODUCT*/
       /* PROCESS TOOL CODE*/
          /* WRITE OR ADD NEW RECORD TO THE TOOL PROGRAM TABLE*/
   /* ------------------------------------------------------------*/

  if (PG0DM001.XTPCD == PG0DW01.XTPCD /* PROGRAM TOOL CODE NOT CHANGED*/
   && PG0DM001.PGASSTNM == PG0DW01.XTPCD) /* PRODUCT STYLE ABBRV NOT CHANGED*/

     /* NEXT SENTANCE*/

  else

    if (PG0DW01.PG0DWRCF == "Y")
      PGAREC.PGASSTNM = PG0DM001.PGASSTNM;
      PGAREC.XTPCD = PG0DM001.XTPCD;
      PGAREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
      PGAREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

      PG0DS03(); /* UPDATE TABLE ROW*/

      return;

    else

      set PGAREC empty;
      PGAREC.PGASSTNM = PG0DM001.PGASSTNM;
      PGAREC.XTPCD = PG0DM001.XTPCD;
      PGAREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
      PGAREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
      PGAREC.XGPCD = PG0DW01.XGPCD;
      PGAREC.SY1STNBR = PG0DM001.SY1STNBR;
      PGAREC.ZZZSDT = XX0XW01.XX0XWDAT;
      PG0DS04(); /* ADD TABLE ROW*/

    end

  end

   /* ------------------------END PG0D610------------------------*/
end // end PG0D610

// PROCESS STYLE DEVL PRODUCT
Function PG0D620()
   /* ------------------------------------------------------------*/
   /* PROCESS A STYLE DEVELOPMENT PRODUCT*/
    /* IF TOOL CODE CHANGED ON THE STYLE DEVELOPMENT PRODUCT*/
       /* PROCESS TOOL CODE*/
          /* WRITE OR ADD NEW RECORD TO THE TOOL PROGRAM TABLE*/
    /* IF ANY OF THE XMLCD'S OR XMCCD'S HAVE CHANGED -*/
       /* CHANGE THE MOD FL FOR THE XMLOR XMC CODE CHANGED*/
       /* UPDATE THE STYLE DEVELOPMENT TABLE.*/
    /* IF THE DUTY RATE CODE HAS CHANGED -*/
       /* CHANGE THE MOD FL*/
       /* UPDATE THE STYLE DEVELOPMENT TABLE.*/
    /* IF THE NUMBER OF AIRBAGS QTY HAS CHANGED -*/
       /* CHANGE THE MOD FL*/
       /* UPDATE THE STYLE DEVELOPMENT TABLE.*/
   /* ------------------------------------------------------------*/

  if (PG0DM001.XTPCD == PGAREC.XTPCD /* PROGRAM TOOL CODE NOT CHANGED*/
   && PG0DM001.PGASSTNM == PGAREC.PGASSTNM) /* PROD STYLE ABBRV NOT CHANGED*/

     /* NEXT SENTANCE*/

  else

    if (PG0DW01.PG0DWRCF == "Y")
      PGAREC.PGASSTNM = PG0DM001.PGASSTNM;
      PGAREC.XTPCD = PG0DM001.XTPCD;
      PGAREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
      PGAREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

      PG0DS03(); /* UPDATE TABLE ROW*/

    else

      set PGAREC empty;
      PGAREC.PGASSTNM = PG0DM001.PGASSTNM;
      PGAREC.XTPCD = PG0DM001.XTPCD;
      PGAREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
      PGAREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
      PGAREC.XGPCD = PG0DW01.XGPCD;
      PGAREC.SY1STNBR = PG0DM001.SY1STNBR;
      PGAREC.ZZZSDT = XX0XW01.XX0XWDAT;

      PG0DS04(); /* ADD TABLE ROW*/

    end

  end
  /* GET PG0D600*/

  if (PG0DM001.XMLCD[1] != VSYDVL03.XMLCD[1]
   || PG0DM001.XMLCD[2] != VSYDVL03.XMLCD[2]
   || PG0DM001.XMLCD[3] != VSYDVL03.XMLCD[3]
   || PG0DM001.XMLCD[4] != VSYDVL03.XMLCD[4]
   || PG0DM001.XMCCD1 != VSYDVL03.XMCCD[1]
   || PG0DM001.XMCCD2 != VSYDVL03.XMCCD[2]
   || PG0DM001.SY-DUTY-RT-CD != VSYDVL03.SY-DUTY-RT-CD
   || PG0DM001.FK-NBR-AIRBAG-SHOE != VSYDVL03.FK-NBR-AIRBAG-SHOE
   || PG0DM001.PG0DM-SYDVL-NPR-OUTSOLE != VSYDVL03.FY7MLDCD
   || PG0DM001.FY8LSTCD != VSYDVL03.FY8LSTCD
   || PG0DM001.PG0DM-TECH-DIFCLT-IND != VSYDVL03.SY2TDIND
   || PG0DM001.PG4AIRF1 != VSYDVL03.PG4AIRF1
   || PG0DM001.PG4AIRF2 != VSYDVL03.PG4AIRF2
   || PG0DM001.PG4AIRF3 != VSYDVL03.PG4AIRF3)

    if (PG0DM001.XMLCD[1] != VSYDVL03.XMLCD[1])
      VSYDVL03.XMLCD[1] = PG0DM001.XMLCD[1];
      VSYDVL03.PG-XML-MOD-FL[1] = "Y";
    end

    if (PG0DM001.XMLCD[2] != VSYDVL03.XMLCD[2])
      VSYDVL03.XMLCD[2] = PG0DM001.XMLCD[2];
      VSYDVL03.PG-XML-MOD-FL[2] = "Y";
    end

    if (PG0DM001.XMLCD[3] != VSYDVL03.XMLCD[3])
      VSYDVL03.XMLCD[3] = PG0DM001.XMLCD[3];
      VSYDVL03.PG-XML-MOD-FL[3] = "Y";
    end

    if (PG0DM001.XMLCD[4] != VSYDVL03.XMLCD[4])
      VSYDVL03.XMLCD[4] = PG0DM001.XMLCD[4];
      VSYDVL03.PG-XML-MOD-FL[4] = "Y";
    end

    if (PG0DM001.XMCCD1 != VSYDVL03.XMCCD[1])
      VSYDVL03.XMCCD[1] = PG0DM001.XMCCD1;
      VSYDVL03.PG-XMC-MOD-FL[1] = "Y";
    end

    if (PG0DM001.XMCCD2 != VSYDVL03.XMCCD[2])
      VSYDVL03.XMCCD[2] = PG0DM001.XMCCD2;
      VSYDVL03.PG-XMC-MOD-FL[2] = "Y";
    end

    if (PG0DM001.SY-DUTY-RT-CD != VSYDVL03.SY-DUTY-RT-CD)
      VSYDVL03.SY-DUTY-RT-CD = PG0DM001.SY-DUTY-RT-CD;
      VSYDVL03.PG-DUTY-RT-MOD-FL = "Y";
    end
    if (PG0DM001.FK-NBR-AIRBAG-SHOE != VSYDVL03.FK-NBR-AIRBAG-SHOE)
      VSYDVL03.FK-NBR-AIRBAG-SHOE = PG0DM001.FK-NBR-AIRBAG-SHOE;
      VSYDVL03.PG-NAIRBAG-MOD-FL = "Y";
    end
    if (PG0DM001.PG0DM-SYDVL-NPR-OUTSOLE != " "
     && PG0DW01.PG0DW-UPD-SYDVL == "Y")
      if (PG0DM001.PG0DM-SYDVL-NPR-OUTSOLE != 
      VSYDVL03.FY7MLDCD)
        VSYDVL03.FY7MLDCD = PG0DM001.PG0DM-SYDVL-NPR-OUTSOLE;
      end
    end
    if (PG0DM001.FY8LSTCD != " "
     && PG0DW01.PG0DW-UPD-SYDVL == "Y")
      if (PG0DM001.FY8LSTCD != VSYDVL03.FY8LSTCD)
        VSYDVL03.FY8LSTCD = PG0DM001.FY8LSTCD;
      end
    end
   /* IF PG0DM001.PG0DM-SYDVL-NPR-MOLD NE VSYDVL03.FY7MLDCD;*/
   /* MOVE PG0DM001.PG0DM-SYDVL-NPR-MOLD TO VSYDVL03.FY7MLDCD;*/
   /* END;*/
   /* IF PG0DM001.FY8LSTCD NE VSYDVL03.FY8LSTCD;*/
   /* MOVE PG0DM001.FY8LSTCD TO VSYDVL03.FY8LSTCD;*/
   /* END;*/
    if (PG0DM001.PG0DM-TECH-DIFCLT-IND != VSYDVL03.SY2TDIND)
      VSYDVL03.SY2TDIND = PG0DM001.PG0DM-TECH-DIFCLT-IND;
    end
    if (PG0DM001.PG4AIRF1 != VSYDVL03.PG4AIRF1)
      VSYDVL03.PG4AIRF1 = PG0DM001.PG4AIRF1;
    end
    if (PG0DM001.PG4AIRF2 != VSYDVL03.PG4AIRF2)
      VSYDVL03.PG4AIRF2 = PG0DM001.PG4AIRF2;
    end
    if (PG0DM001.PG4AIRF3 != VSYDVL03.PG4AIRF3)
      VSYDVL03.PG4AIRF3 = PG0DM001.PG4AIRF3;
    end
    VSYDVL03.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VSYDVL03.ZZZCHGTM = XX0XW01.XX0XWTIM;
    VSYDVL03.PG4STNBR = PG0DM001.SY1STNBR;

    PG0DS08(); /* UPDATE DPRODG.VSYDVL03 TABLE*/

    return;

  end

   /* ------------------------END PG0D620------------------------*/
end // end PG0D620

// update pc origin online mod
Function PG0D630()
   /* ------------------------------------------------------------*/
   /* move 2 for before image to the audit type code; move what*/
   /* is in the style development row to the audit row, insert*/
   /* the audit row (these last two are done in PG0D631), update*/
   /* the style development row with the changed values,*/
   /* move 3 for after image to the audit type code; move what*/
   /* is in the style development row to the audit row, insert*/
   /* the audit row (these last two are done in PG0D631).*/
   /* ------------------------------------------------------------*/

  if (PG0DW02.XMLCD[1] != PG0DM001.XMLCD[1]) /* material content lower code1*/
    PG5REC.XMLCD[1] = PG0DW02.XMLCD[1];
  else
    PG5REC.XMLCD[1] = VSYDVL03.XMLCD[1];
  end

  if (PG0DW02.XMLCD[2] != PG0DM001.XMLCD[2]) /* material content lower code2*/
    PG5REC.XMLCD[2] = PG0DW02.XMLCD[2];
  else
    PG5REC.XMLCD[2] = VSYDVL03.XMLCD[2];
  end

  if (PG0DW02.XMLCD[3] != PG0DM001.XMLCD[3]) /* material content lower code3*/
    PG5REC.XMLCD[3] = PG0DW02.XMLCD[3];
  else
    PG5REC.XMLCD[3] = VSYDVL03.XMLCD[3];
  end

  if (PG0DW02.XMLCD[4] != PG0DM001.XMLCD[4]) /* material content lower code4*/
    PG5REC.XMLCD[4] = PG0DW02.XMLCD[4];
  else
    PG5REC.XMLCD[4] = VSYDVL03.XMLCD[4];
  end

  if (PG0DW02.XMCCD[1] != PG0DM001.XMCCD1) /* material content code1*/
    PG5REC.XMCCD[1] = PG0DW02.XMCCD[1];
  else
    PG5REC.XMCCD[1] = VSYDVL03.XMCCD[1];
  end

  if (PG0DW02.XMCCD[2] != PG0DM001.XMCCD2) /* material content code2*/
    PG5REC.XMCCD[2] = PG0DW02.XMCCD[2];
  else
    PG5REC.XMCCD[2] = VSYDVL03.XMCCD[2];
  end

  PG5AUDTP = "2"; /* before image*/
  PG0D631(); /* insert before image audit row*/

  PG5REC.XMLCD[1] = VSYDVL03.XMLCD[1]; /* load mat ctnt upper cds*/
  PG5REC.XMLCD[2] = VSYDVL03.XMLCD[2];
  PG5REC.XMLCD[3] = VSYDVL03.XMLCD[3];
  PG5REC.XMLCD[4] = VSYDVL03.XMLCD[4];

  PG5REC.XMCCD[1] = VSYDVL03.XMCCD[1]; /* load material ctnt cds*/
  PG5REC.XMCCD[2] = VSYDVL03.XMCCD[2];

  PG5AUDTP = "3"; /* after image*/
  PG0D631(); /* insert after image audit row*/
end // end PG0D630

// insert row to audit table
Function PG0D631()

   /* ------------------------------------------------------------*/
   /* format audit record fields*/
   /* ------------------------------------------------------------*/

  PG5REC.ZZZSDT = XX0XW01.XX0XWDAT; /* setup date*/
  PG5REC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* setup time*/
  PG5REC.XXX-USER-ID = COMMAREA.CAUSERID; /* user id*/

  PG5REC.PG4STNBR = VSYDVL03.PG4STNBR; /* developer number*/
  PG5REC.XPRCD = VSYDVL03.XPRCD; /* product type*/
  PG5REC.XPLCD = VSYDVL03.XPLCD; /* product line*/
  PG5REC.XPCCD = VSYDVL03.XPCCD; /* category code*/
  PG5REC.XGACD = VSYDVL03.XGACD; /* gender age*/
  PG5REC.XSUCD = VSYDVL03.XSUCD; /* silhouette code*/
  PG5REC.XDMCD = VSYDVL03.XDMCD; /* dimension code*/
  PG5REC.XSECD = VSYDVL03.XSECD; /* season code*/
  PG5REC.XSNYR = VSYDVL03.XSNYR; /* season year*/
  PG5REC.XDVCD = VSYDVL03.XDVCD; /* division code*/
  PG5REC.XCNCD = VSYDVL03.XCNCD; /* construction code*/
  PG5REC.FY4WHLPR = VSYDVL03.FY4WHLPR; /* wholesale price*/
  PG5REC.PG4RTLPR = VSYDVL03.PG4RTLPR; /* suggested retail price*/
  PG5REC.PG4RFCFL = VSYDVL03.PG4RFCFL; /* show on forecast flag*/
  PG5REC.PG2FPDMO = VSYDVL03.PG2FPDMO; /* first production month*/
  PG5REC.PG4FDLMO = VSYDVL03.PG4FDLMO; /* first delivery month*/

   /* ------------------------------------------------------------*/
   /* add row*/
   /* ------------------------------------------------------------*/

  try
    call "IO4400" ("A ", SQLCA, PG5REC) {isNoRefresh = yes, isExternal = yes};
  end /* add row*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* a good select*/
    return; /* return to calling process*/
  end

  if (sysVar.errorCode != "00000000" /* bad call*/
   || SQLCA.VAGen_SQLCODE != 0)      /* bad return code*/

    PG0DM001.XXXMODID = "631"; /* Module identification*/
    TA1REC.TA1LOC = "ADD AUDIT TABLE ROW"; /* error description*/
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back previous updates*/

      converseLib.validationFailed(19); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back previous updates*/
      converseLib.validationFailed(1); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PG0DM001.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSDAUD01"; /* Table view name*/
    TA1REC.TA1TBLKE = PG5REC.PG5GROUP; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    exit stack;
  end

end // end PG0D631

// EU0100 select unique
Function PG0DS-EU0100-SD()
   /* ------------------- pg0ds-eu0100-sd -------------------------*/
    /*  */

  WEU0100.WEU0100-TASK = "SD";
  WEU0100.WEU0100-CALLER-LOCATION = "PG0DS-EU0100-SD";

  try
    call "EU0100" (WEU0100) {isNoRefresh = yes, isExternal = yes};
  end /* select unique*/

  SQLCA.SQLCAREC = WEU0100.SQLCAREC;

  if (WEU0100.WEU0100-RETURN-CODE == 0) /* call successful*/
    return; /* return*/
  end

  TA1REC.TA1MAP = WEU0100.WEU0100-RETURN-CODE; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (WEU0100.WEU0100-RETURN-CODE == 8) /* resource not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
  end

  TA1REC.TA1TYPE = "DB2"; /* type of error*/
  TA1REC.TA1LOC = "PG0DS-EU0100-SD"; /* program location*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "EU0100"; /* called program*/
  TA1REC.TA1DBASE = "DPROD"; /* database name*/
  TA1REC.TA1TBLVU = "VSYDVL03"; /* table view name*/
  TA1REC.TA1TBLKE = WEU0100.SY1STNBR; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

   /* ------------------- pg0ds-eu0100-sd -------------------------*/
end // end PG0DS-EU0100-SD

// Select Unique DPROD.VTLCMP01
Function PG0DS-VTLCMP01-SU()
   /* --------------------------PG0DS-VTLINV01-S1---------------------------*/
   /* Select Unique on DPROD.VTLCMP01*/
   /* --------------------------PG0DS-VTLINV01-S1---------------------------*/

  try
    call "VTLCMP01" ("S ", SQLCA, VTLCMP01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch Row*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && (SQLCA.VAGen_SQLCODE == 0      /* And normal return code*/
   || SQLCA.VAGen_SQLCODE == 100))  
    return;
  else
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP Return Code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
    TA1REC.TA1TYPE = "DB2"; /* Type of error*/
    TA1REC.TA1DBASE = "DPROD"; /* DataBase Name*/
    TA1REC.TA1LOC = "PG0DS-VTLCMP01-SU"; /* /Location*/
    TA1REC.TA1TBLVU = "VTLCMP01"; /* Table/View Name*/
    TA1REC.TA1TBLKE = VTLCMP01-KEY; /* Table/View KEYe*/
    if (sysVar.errorCode == "00000000"
     && SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error Diagnosis*/
    else
      TA1REC.TA1FUNC = "RETN";
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error Diagnosis*/
    end
    sysVar.errorCode = TA1REC.TA1MAP;
    SQLCA.SQLCAREC = TAEREC.SQLCAREC;

    return;
  end
end // end PG0DS-VTLCMP01-SU

// Close Cursor DPROD.VTLINV01
Function PG0DS-VTLINV01-C1()
   /* --------------------------PG0DS-VTLINV01-S1---------------------------*/
   /* Close  Cursor on DPROD.VTLINV01*/
   /* --------------------------PG0DS-VTLINV01-S1---------------------------*/

  try
    call "VTLINV01" ("C1", SQLCA, VTLINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch Row*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* And normal return code*/
    return;
  else
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP Return Code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
    TA1REC.TA1TYPE = "DB2"; /* Type of error*/
    TA1REC.TA1DBASE = "DPROD"; /* DataBase Name*/
    TA1REC.TA1LOC = "PG0DS-VTLINV01-C1"; /* /Location*/
    TA1REC.TA1TBLVU = "VTLINV01"; /* Table/View Name*/
    if (sysVar.errorCode == "00000000"
     && SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error Diagnosis*/
    else
      TA1REC.TA1FUNC = "RETN";
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error Diagnosis*/
    end
    sysVar.errorCode = TA1REC.TA1MAP;
    SQLCA.SQLCAREC = TAEREC.SQLCAREC;

    return;
  end
end // end PG0DS-VTLINV01-C1

// Fetch on DPROD.VTLINV01
Function PG0DS-VTLINV01-N1()
   /* --------------------------PG0DS-VTLINV01-S1---------------------------*/
   /* Fetch from Cursor on DPROD.VTLINV01*/
   /* --------------------------PG0DS-VTLINV01-S1---------------------------*/

  try
    call "VTLINV01" ("N1", SQLCA, VTLINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch Row*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && (SQLCA.VAGen_SQLCODE == 0      /* And normal return code*/
   || SQLCA.VAGen_SQLCODE == 100))   /* And normal return code*/
    if (SQLCA.VAGen_SQLCODE == 100)
      PG0DW01.PG0DW-END-OF-VTLINV01 = "Y";
    end
    return;
  else
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP Return Code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
    TA1REC.TA1TYPE = "DB2"; /* Type of error*/
    TA1REC.TA1DBASE = "DPROD"; /* DataBase Name*/
    TA1REC.TA1LOC = "PG0DS-VTLINV01-N1"; /* /Location*/
    TA1REC.TA1TBLVU = "VTLINV01"; /* Table/View Name*/
    TA1REC.TA1TBLKE = VTLINV01.TOOL-GRP-REF-ID;
    if (sysVar.errorCode == "00000000"
     && SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error Diagnosis*/
    else
      TA1REC.TA1FUNC = "RETN";
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error Diagnosis*/
    end
    sysVar.errorCode = TA1REC.TA1MAP;
    SQLCA.SQLCAREC = TAEREC.SQLCAREC;

    return;
  end
end // end PG0DS-VTLINV01-N1

// Cursor on DPROD.VTLINV01
Function PG0DS-VTLINV01-S1()
   /* --------------------------PG0DS-VTLINV01-S1---------------------------*/
   /* Declare and Open Cursor on DPROD.VTLINV01*/
   /* --------------------------PG0DS-VTLINV01-S1---------------------------*/

  try
    call "VTLINV01" ("S1", SQLCA, VTLINV01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* And normal return code*/
    return;
  else
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP Return Code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
    TA1REC.TA1TYPE = "DB2"; /* Type of error*/
    TA1REC.TA1DBASE = "DPROD"; /* DataBase Name*/
    TA1REC.TA1LOC = "PG0DS-VTLINV01-S1"; /* /Location*/
    TA1REC.TA1TBLVU = "VTLINV01"; /* Table/View Name*/
    TA1REC.TA1TBLKE = VTLINV01.TOOL-GRP-REF-ID;
    if (sysVar.errorCode == "00000000"
     && SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error Diagnosis*/
    else
      TA1REC.TA1FUNC = "RETN";
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error Diagnosis*/
    end
    sysVar.errorCode = TA1REC.TA1MAP;
    SQLCA.SQLCAREC = TAEREC.SQLCAREC;

    return;
  end
end // end PG0DS-VTLINV01-S1

// SETUP FOR STYLE SELECT SYCLR
Function PG0DS01()
   /* -----------------------------------------------------------*/
    /* GET STYLE INFORMAION*/
   /* -----------------------------------------------------------*/

  PG0DM001.PG0DWSNS = "    "; /* sesn code and yr comb*/
  PG0DM001.XGACD = " ";
  PG0DM001.XGAABRV = " ";
  PGAREC.SY1STNBR = " ";
  PG0DM001.PGASSTNM = " ";
  PG0DM001.XTPCD = " ";
  PG0DM001.XTPDESC = " ";
  PG0DM001.FY8LSTCD = " ";
  PG0DM001.PG0DM-SYCLR-MIDSOLE = " ";
  PG0DM001.PG0DM-SYCLR-OUTSOLE = " ";
  PG0DM001.PG4AIRF1 = " ";
  PG0DM001.PG4AIRF2 = " ";
  PG0DM001.PG4AIRF3 = " ";
  PG0DM001.PG0DM-TECH-DIFCLT-IND = " ";
  PG0DM001.SY-DUTY-RT-CD = " ";
  PG0DM001.FK-NBR-AIRBAG-SHOE = " ";
  PG0DM001.XMCCD1 = " ";
  PG0DM001.XMCCD2 = " ";
  PG0DM001.PG0DM-MFG-CHAR-DESC1 = " ";
  PG0DM001.PG0DM-MFG-CHAR-DESC2 = " ";
  PG0DM001.PG0DM-MFG-CHAR-DESC3 = " ";
  PG0DM001.PG0DM-MFG-CHAR-DESC4 = " ";
  PG0DM001.PG0DM-MFG-CHAR-DESC5 = " ";
  PG0DW01.PG0DWIN1 = 1;
  while (PG0DW01.PG0DWIN1 <= 4)
    PG0DM001.XMLCD[PG0DWIN1] = " ";
    PG0DM001.XMLSDESC[PG0DWIN1] = " ";
    if (PG0DW01.PG0DWIN1 <= 2)
      PG0DM001.XMCSDESC[PG0DWIN1] = " ";
    end
    PG0DW01.PG0DWIN1 = PG0DWIN1 + 1;
  end

  PG0DW01.PG0DW-VALID-LIFE-CYCLE = "N";
  PG0DW01.PG0DW-STYLE-INFO-FOUND-FLAG = "N";

  PG0DS20(); /* open syclr cursor set*/

  while (SQLCA.VAGen_SQLCODE == 0
   && PG0DW01.PG0DW-VALID-LIFE-CYCLE == "N")
    PG0DS22(); /* fetch syclr cursor*/
  end

  PG0DS25(); /* close syclr cursor set*/

  if (SQLCA.VAGen_SQLCODE == 100)
    if (PG2REC.XGPCD == "02") /* FOR FOOTWEAR*/
      PG0DW01.PG0DW-STYLE-INFO-FOUND-FLAG = "N";
      PG0DS06(); /* SEARCH FOR STYLE IN VSYDVL03*/
      if (PG0DW01.PG0DW-STYLE-INFO-FOUND-FLAG == "N")
        set PG0DM001.SY1STNBR cursor, bold;
        converseLib.validationFailed(026);
        return;
      else
        if (converseVar.eventKey is pf9) /* AUDIT WORKING STORAGE ROW LOADED*/
           /* NEXT SENTENCE*/
        else /**/
          PG0DS07(); /* LOAD BEFORE IMAGE AUDIT ROW*/
        end /**/
        PG0DW01.SY1STNBR = PG0DM001.SY1STNBR;
        PG0DW01.PG0DWIN1 = 1;
        while (PG0DW01.PG0DWIN1 <= 4)
          set PG0DM001.XMLCD[PG0DWIN1] initialAttributes;
          set PG0DM001.XMLSDESC[PG0DWIN1] initialAttributes;
          if (PG0DW01.PG0DWIN1 <= 2)
            set PG0DM001.XMCSDESC[PG0DWIN1] initialAttributes;
          end
          PG0DW01.PG0DWIN1 = PG0DWIN1 + 1;
        end
        set PG0DM001.XMCCD1 initialAttributes;
        set PG0DM001.XMCCD2 initialAttributes;
        set PG0DM001.SY-DUTY-RT-CD initialAttributes;
        set PG0DM001.FK-NBR-AIRBAG-SHOE initialAttributes;
        if (VSYDVL03.XPLCD == "11")
          set PG0DM001.PG0DM-SYDVL-NPR-OUTSOLE initialAttributes;
          set PG0DM001.FY8LSTCD initialAttributes;
          set PG0DM001.PG0DM-TECH-DIFCLT-IND initialAttributes;
          set PG0DM001.PG4AIRF1 initialAttributes;
          set PG0DM001.PG4AIRF2 initialAttributes;
          set PG0DM001.PG4AIRF3 initialAttributes;
        else
          set PG0DM001.PG0DM-SYDVL-NPR-MIDSOLE protect;
          set PG0DM001.PG0DM-SYDVL-NPR-OUTSOLE protect;
          set PG0DM001.FY8LSTCD protect;
          set PG0DM001.PG0DM-TECH-DIFCLT-IND protect;
          set PG0DM001.PG4AIRF1 protect;
          set PG0DM001.PG4AIRF2 protect;
          set PG0DM001.PG4AIRF3 protect;
        end
        return;
      end
    else /* gpc not 02*/
      PG0DM001.SY1STYNM = " ";
      PG0DM001.PG0DM-SYDVL-NPR-NAME = " ";
      PG0DM001.PG0DM-RB-STYGRP-CNSMR-NM = " ";
      PG0DM001.PG0DM-SY-STY-GRP-NBR = " ";
      PG0DM001.SY2RSTNB = " ";
      PG0DM001.XXXMODID = "S01";
      set PG0DM001.SY1STNBR cursor; /* BRIGHT*/
      converseLib.validationFailed(026);
      return;
    end
  else /* syclr row found*/
    PG0DW01.PG0DWIN1 = 1;
    while (PG0DW01.PG0DWIN1 <= 4)
      set PG0DM001.XMLCD[PG0DWIN1] protect;
      PG0DW01.PG0DWIN1 = PG0DWIN1 + 1;
    end
    set PG0DM001.XMCCD1 protect;
    set PG0DM001.XMCCD2 protect;
    set PG0DM001.SY-DUTY-RT-CD protect;
    set PG0DM001.FK-NBR-AIRBAG-SHOE protect;
    set PG0DM001.FY8LSTCD protect;
    set PG0DM001.PG0DM-SYDVL-NPR-OUTSOLE protect;
    set PG0DM001.PG0DM-SYDVL-NPR-MIDSOLE protect;
    set PG0DM001.PG0DM-TECH-DIFCLT-IND protect;
    set PG0DM001.PG4AIRF1 protect;
    set PG0DM001.PG4AIRF2 protect;
    set PG0DM001.PG4AIRF3 protect;
    PG0DW01.PG0DWILF = "Y";
    PG0DW01.SY1STNBR = PG0DM001.SY1STNBR;
    PG0DM001.XGACD = PG2REC.XGACD;
    PG0DW01.XSECD = PG2REC.XSECD; /* sesn*/
    PG0DW01.PG0DSEDT = PG2REC.XSNYR; /* sesn ccyy*/
    PG0DW01.PG0DSEYR = PG0DW01.PG0DSEYY; /* sesn yy*/
    PG0DM001.PG0DWSNS = PG0DW01.PG0DWSNS; /* sesn code and yr comb*/
    PG0DM001.FK-NBR-AIRBAG-SHOE = PG2REC.FK-NBR-AIRBAG-SHOE;
    PG0DM001.PG0DM-TECH-DIFCLT-IND = PG2REC.SY2TDIND;
    PG0DM001.SY-DUTY-RT-CD = PG2REC.SY-DUTY-RT-CD;
   /* MOVE PG2REC.FY7MLDCD TO PG0DM001.FY7MLDCD;*/
   /* MOVE PG2REC.FY8LSTCD TO PG0DM001.FY8LSTCD;*/
    set VTLINV01 empty;
    PG0DW01.PG0DW-END-OF-VTLINV01 = "N";
    VTLINV01.TOOL-GRP-REF-ID = PG2REC.FY7MLDCD;
    PG0DS-VTLINV01-S1();
    PG0DS-VTLINV01-N1();
    if (PG0DW01.PG0DW-END-OF-VTLINV01 == "Y")
      PG0DM001.PG0DM-SYCLR-OUTSOLE = PG2REC.FY7MLDCD;
      PG0DM001.FY8LSTCD = PG2REC.FY8LSTCD;
    end
    while (PG0DW01.PG0DW-END-OF-VTLINV01 == "N")
      set VTLCMP01 empty;
      VTLCMP01.TOOL-CMPNT-TYP-CD = VTLINV01.TOOL-CMPNT-TYP-CD;
      VTLCMP01.TOOL-CMPNT-ID = VTLINV01.TOOL-CMPNT-ID;
      PG0DS-VTLCMP01-SU();
      if (SQLCA.VAGen_SQLCODE == 0
       && VTLCMP01.TOOL-CMPNT-PRTY-CD == "01")
        if (VTLINV01.TOOL-CMPNT-TYP-CD == "MS")
          PG0DM001.PG0DM-SYCLR-MIDSOLE = VTLCMP01.TOOL-CMPNT-NAME;
        else
          if (VTLINV01.TOOL-CMPNT-TYP-CD == "OS")
            PG0DM001.PG0DM-SYCLR-OUTSOLE = VTLCMP01.TOOL-CMPNT-NAME;
          else
            if (VTLINV01.TOOL-CMPNT-TYP-CD == "LT")
              PG0DM001.FY8LSTCD = VTLCMP01.TOOL-CMPNT-NAME;
            end
          end
        end
      end
      PG0DS-VTLINV01-N1();
    end
    PG0DS-VTLINV01-C1();
    PG0DM001.XMCCD1 = PG2REC.XMCCD1;
    PG0DM001.XMCCD2 = PG2REC.XMCCD2;
    PG0DW02.XMCCD[1] = PG2REC.XMCCD1;
    PG0DW02.XMCCD[2] = PG2REC.XMCCD2;

    if (PG2REC.XMCCD1 in XMCTBL.XMCCD)
      PG0DM001.XMCSDESC[1] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
    end

    if (PG2REC.XMCCD2 in XMCTBL.XMCCD)
      PG0DM001.XMCSDESC[2] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
    end

    if (PG2REC.XGACD in XGATBL.XGACD)
      PG0DM001.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex];
    end

    PG0DS09(); /* GET XML CODES*/

  end

  if (SQLCA.VAGen_SQLCODE != 0
   && VAGen_SQLCODE != 100)
    PG0DM001.SY1STYNM = " ";
    PG0DM001.PG0DM-SYDVL-NPR-NAME = " ";
    PG0DM001.PG0DM-RB-STYGRP-CNSMR-NM = " ";
    PG0DM001.PG0DM-SY-STY-GRP-NBR = " ";
    PG0DM001.SY2RSTNB = " ";
    converseLib.validationFailed(018);
    set PG0DM001.SY1STNBR cursor, bold;
    PG0DM001.XXXMODID = "S01";
    return;
  end

  PG0DW01.SY1STNBR = PG0DM001.SY1STNBR;
  PG0DM001.SY1STYNM = PG2REC.SY1STYNM;
  PG0DM001.PG0DM-SYDVL-NPR-NAME = " ";
  PG0DM001.PG0DM-RB-STYGRP-CNSMR-NM = " ";
  PG0DM001.PG0DM-SY-STY-GRP-NBR = " ";
  PG0DM001.SY2RSTNB = PG2REC.SY2RSTNB;

end // end PG0DS01

// SELECT UNIQUE FOR VSYPRD01
Function PG0DS02()
   /* ---------------------------------------------------------*/
    /* SELECT A UNIQUE ROW FROM DPROG.VSYPRD01*/
   /* ---------------------------------------------------------*/

  PG0DM001.PGASSTNM = " ";
  PG0DM001.XTPCD = " ";

  set PGAREC empty;

  PGAREC.XGPCD = PG0DW01.XGPCD;

  PGAREC.SY1STNBR = PG0DM001.SY1STNBR;

  try
    call "IO5740" ("S ", SQLCA, PGAREC) {isNoRefresh = yes, isExternal = yes};
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PG0DW01.PG0DWRCF = "Y"; /* Record found switch*/

  else

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 100)    /* and row not found*/

      PG0DW01.PG0DWRCF = "N"; /* Record found switch*/
      PG0DM001.PGASSTNM = "            ";
      PG0DM001.XTPCD = "  ";
      return;

    else

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1LOC = "XSPG201 FETCH FIRST STYLE NUMBER";
      TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSYPRD01"; /* Table view name*/
      TA1REC.TA1TBLKE = PGAREC.PGAKEY; /* Table key*/

      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

      else

        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      end

      return; /* Return to previous process*/

    end

  end

  if (VAGen_SQLCODE == 0)
    PG0DM001.PGASSTNM = PGAREC.PGASSTNM;
    PG0DM001.XTPCD = PGAREC.XTPCD;
  end

end // end PG0DS02

// UPDATE ROW VSYPRD01
Function PG0DS03()
   /* ---------------------------------------------------------*/
    /* UPDATE A UNIQUE ROW FROM DPROG.VSYPRD01*/
   /* ---------------------------------------------------------*/

  try
    call "IO5740" ("U ", SQLCA, PGAREC) {isNoRefresh = yes, isExternal = yes};
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      converseLib.validationFailed(023);
      set PG0DM001.SY1STNBR cursor;
      PG0DM001.XXXMODID = "S03";
      PG0DW01.PG0DWRFD = "Y"; /* Request for data switch*/
      return;

    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      converseLib.validationFailed(28); /* Record updated since last displayed*/
      PG0DW01.SY1STNBR = "  ";
      PG0DM001.XXXMODID = "S03";

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back previous updates*/

   /* Request for data switch*/
      PG0DW01.PG0DWRFD = "Y";
      exit stack; /* Return to redisplay map*/

    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE ROW"; /* Error description*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYPRD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PGAREC.PGAKEY; /* Table key*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(19); /* Indicate not available*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ROLL BACK PREVIOUS UPDATES*/
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  exit stack; /* Exit to display map*/

end // end PG0DS03

// ADD ROW VSYPRD01
Function PG0DS04()
   /* ---------------------------------------------------------*/
    /* ADD    A UNIQUE ROW FROM DPROG.VSYPRD01*/
   /* ---------------------------------------------------------*/

  try
    call "IO5740" ("A ", SQLCA, PGAREC) {isNoRefresh = yes, isExternal = yes};
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    converseLib.validationFailed(024);
    set PG0DM001.SY1STNBR cursor;
    PG0DW01.PG0DWRFD = "Y"; /* Request for data*/
    PG0DM001.XXXMODID = "S04";
    return;

  else

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "INSERT A ROW IN THE TABLE"; /* Error message*/
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSYPRD01"; /* Table view name*/
    TA1REC.TA1TBLKE = PGAREC.PGAKEY; /* Table key*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(19); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    else

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      converseLib.validationFailed(01); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Return to previous process*/

  end

end // end PG0DS04

// TRANSFER TO ANOTHER APPLICATIO
Function PG0DS05()
   /* ------------------------------------------------------------*/
   /* TRANSFER TO ANOTHER APPLICATION*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Set the application to be invoked for PF1 or PF4.*/
   /* Set the application to be invoked for PF3 if in pa0m.*/
   /* Save the application user area in the COMMAREA.*/
   /* Transfer control to the specified application.*/
   /* If transfer failed, return an error to the calling process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/

    COMMAREA.CATOAP = "GD00"; /* Indicate Goal Documentation*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    COMMAREA.CATOAP = "FY0A"; /* Indicate Production Menu*/

  end

  if (converseVar.eventKey is pf4) /* PF4 was pressed*/

    COMMAREA.CATOAP = "MN0M"; /* Indicate Master Menu*/

  end

  COMMAREA.CAFROMAP = COMMAREA.CACURRAP; /* From application*/
  XSEXIT(); /* Exit to another application*/

  COMMAREA.CAITEM = " "; /* Clear any application data*/

  if (COMMAREA.CASECRC == 3 /* Application not found*/
   || COMMAREA.CASECRC == 4) /* or transfer not allowed*/

    converseLib.validationFailed(17); /* Indicate not allowed*/
  else
    converseLib.validationFailed(18); /* Indicate system error*/

  end

end // end PG0DS05

// GET STYLE FROM DPRODG.VSYDVL01
Function PG0DS06()
   /* -----------------------------------------------------------*/
    /* GET STYLE INFORMAION FROM DPRODG.VSYDVL03*/
   /* -----------------------------------------------------------*/

  set VSYDVL03 empty;

  VSYDVL03.PG4STNBR = PG0DM001.SY1STNBR;

  TA1REC.TA1PGMNM = "XSPG201";

  try
    call "VSYDVL03" ("S ", SQLCA, VSYDVL03) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PG0DW01.PG0DWILF = "N"; /* Processing style dev row*/
    PG0DW01.PG0DW-STYLE-INFO-FOUND-FLAG = "Y";

  else

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 100)    /* and row not found*/

      PG0DW01.PG0DW-STYLE-INFO-FOUND-FLAG = "N";

    else

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1LOC = "PG0DS06 FETCH FIRST STYLE NUMBER";
      TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSYDVL03"; /* Table view name*/
      TA1REC.TA1TBLKE = VSYDVL03.PG4STNBR; /* Table key*/

      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

   /* Data base is busy please*/
        converseLib.validationFailed(11);
      else

        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      end

      return; /* Return to previous process*/

    end

  end

  if (SQLCA.VAGen_SQLCODE == 100)
    PG0DM001.PG0DWSNS = "    "; /* sesn code and yr comb*/
    PG0DM001.SY1STYNM = " ";
    PG0DM001.PG0DM-SYDVL-NPR-NAME = " ";
    PG0DM001.PG0DM-RB-STYGRP-CNSMR-NM = " ";
    PG0DM001.PG0DM-SY-STY-GRP-NBR = " ";
    PG0DM001.PG0DM-SYDVL-NPR-MIDSOLE = " ";
    PG0DM001.PG0DM-SYDVL-NPR-OUTSOLE = " ";
    PG0DM001.PG0DM-SYDVL-NPR-DESC = " ";
    PG0DM001.PG0DM-DEV-FCTY-CD = " ";
    PG0DM001.PG0DM-PROD-FCTY-CD = " ";
    PG0DM001.KEYMDL = " ";
    PG0DM001.SY2RSTNB = " ";
    PG0DM001.XXXMODID = "S06";
    set PG0DM001.SY1STNBR cursor;

    PG0DW01.SY1STNBR = PG0DM001.SY1STNBR;
    PG0DM001.SY1STYNM = " "; /* style name*/
    PG0DM001.PG0DM-SYCLR-MIDSOLE = " ";
    PG0DM001.PG0DM-SYCLR-OUTSOLE = " ";
    PG0DM001.PG0DM-SYDVL-NPR-NAME = VSYDVL03.SY1STYNM;
    PG0DM001.PG0DM-RB-STYGRP-CNSMR-NM = VSYDVL03.RB-STYGRP-CNSMR-NM;
    PG0DM001.PG0DM-SY-STY-GRP-NBR = VSYDVL03.SYBSTGNB;
    PG0DM001.SY2RSTNB = " ";
    return;
  end

  PG0DW01.SY1STNBR = PG0DM001.SY1STNBR;
  PG0DM001.XGACD = VSYDVL03.XGACD;
  PG0DW01.XSECD = VSYDVL03.XSECD; /* sesn cd*/
  PG0DW01.PG0DSEDT = VSYDVL03.XSNYR; /* sesn ccyy*/
  PG0DW01.PG0DSEYR = PG0DW01.PG0DSEYY; /* sesn yy*/
  PG0DM001.PG0DWSNS = PG0DW01.PG0DWSNS; /* sesn code and year comb*/
   /* MOVE VSYDVL03.FY8LSTCD TO PG0DM001.FY8LSTCD;*/
   /* MOVE VSYDVL03.FY7MLDCD TO PG0DM001.PG0DM-SYDVL-NPR-MOLD;*/
  set VTLINV01 empty;
  PG0DW01.PG0DW-END-OF-VTLINV01 = "N";
  PG0DW01.PG0DW-UPD-SYDVL = "N";
  VTLINV01.TOOL-GRP-REF-ID = VSYDVL03.FY7MLDCD;
  PG0DS-VTLINV01-S1();
  PG0DS-VTLINV01-N1();
  if (PG0DW01.PG0DW-END-OF-VTLINV01 == "Y")
    PG0DM001.PG0DM-SYDVL-NPR-OUTSOLE = VSYDVL03.FY7MLDCD;
    PG0DM001.FY8LSTCD = VSYDVL03.FY8LSTCD;
    PG0DM001.PG0DM-SYDVL-NPR-MIDSOLE = "**********";
    PG0DW01.PG0DW-UPD-SYDVL = "Y";
  end
  while (PG0DW01.PG0DW-END-OF-VTLINV01 == "N")
    set VTLCMP01 empty;
    VTLCMP01.TOOL-CMPNT-TYP-CD = VTLINV01.TOOL-CMPNT-TYP-CD;
    VTLCMP01.TOOL-CMPNT-ID = VTLINV01.TOOL-CMPNT-ID;
    PG0DS-VTLCMP01-SU();
    if (SQLCA.VAGen_SQLCODE == 0
     && VTLCMP01.TOOL-CMPNT-PRTY-CD == "01")
      if (VTLINV01.TOOL-CMPNT-TYP-CD == "MS")
        PG0DM001.PG0DM-SYDVL-NPR-MIDSOLE = VTLCMP01.TOOL-CMPNT-NAME;
        PG0DW02.PG0DM-SYDVL-NPR-MIDSOLE = VTLCMP01.TOOL-CMPNT-NAME;
      else
        if (VTLINV01.TOOL-CMPNT-TYP-CD == "OS")
          PG0DM001.PG0DM-SYDVL-NPR-OUTSOLE = VTLCMP01.TOOL-CMPNT-NAME;
          PG0DW02.PG0DM-SYDVL-NPR-OUTSOLE = VTLCMP01.TOOL-CMPNT-NAME;
        else
          if (VTLINV01.TOOL-CMPNT-TYP-CD == "LT")
            PG0DM001.FY8LSTCD = VTLCMP01.TOOL-CMPNT-NAME;
            PG0DW02.FY8LSTCD = VTLCMP01.TOOL-CMPNT-NAME;
          end
        end
      end
    end
    PG0DS-VTLINV01-N1();
  end
  PG0DS-VTLINV01-C1();
  PG0DM001.PG0DM-DEV-FCTY-CD = VSYDVL03.PG4DFCTY;
  PG0DM001.PG0DM-PROD-FCTY-CD = VSYDVL03.PG4PRFTY;
  PG0DM001.KEYMDL = VSYDVL03.KEYMDL;
  PG0DM001.PG4AIRF1 = VSYDVL03.PG4AIRF1;
  PG0DM001.PG4AIRF2 = VSYDVL03.PG4AIRF2;
  PG0DM001.PG4AIRF3 = VSYDVL03.PG4AIRF3;
  PG0DM001.XMCCD1 = VSYDVL03.XMCCD[1];
  PG0DM001.XMCCD2 = VSYDVL03.XMCCD[2];
  PG0DM001.PG0DM-TECH-DIFCLT-IND = VSYDVL03.SY2TDIND;
  PG0DM001.FK-NBR-AIRBAG-SHOE = VSYDVL03.FK-NBR-AIRBAG-SHOE;
  PG0DM001.SY-DUTY-RT-CD = VSYDVL03.SY-DUTY-RT-CD;
  PG0DW01.PG0DWIN1 = 1;
  while (PG0DWIN1 <= 4)
    PG0DM001.XMLCD[PG0DWIN1] = VSYDVL03.XMLCD[PG0DWIN1];
    PG0DW01.PG0DWIN1 = PG0DW01.PG0DWIN1 + 1;
  end
   /* MOVE VSYDVL03.FY7MLDCD TO FY7REC.FY7MLDCD;*/
   /* &PG0DS11;                       /* Get mold code desc*/
   /* MOVE FY7REC.FY7MSHDS TO PG0DM001.PG0DM-SYDVL-NPR-MOLD-DESC;*/
  PG0DM001.PG0DM-SYDVL-NPR-DESC = VTLCMP01.SY-STY-NM;
   /* GET DESCRIPTIONS*/

  PG0DW01.PG0DWIN1 = 1;
  while (PG0DWIN1 <= 4)
    if (VSYDVL03.XMLCD[PG0DWIN1] in XMLTBL.XMLCD)
      PG0DM001.XMLSDESC[PG0DWIN1] = XMLTBL.XMLSDESC[sysVar.arrayIndex];
    end

    if (PG0DW01.PG0DWIN1 <= 2)
      if (VSYDVL03.XMCCD[PG0DWIN1] in XMCTBL.XMCCD)
        PG0DM001.XMCSDESC[PG0DWIN1] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      end
    end
    PG0DW01.PG0DWIN1 = PG0DW01.PG0DWIN1 + 1;
  end

  if (VSYDVL03.XGACD in XGATBL.XGACD)
    PG0DM001.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex];
  end

   /* GET MFG CHARACTERISTIC DESCRIPTIONS*/

  if (VSYDVL03.RB-MFG-CHAR-CD[1] != " ")
    set VMFGCH01 empty;
    VMFGCH01.RB-MFG-CHAR-CD = VSYDVL03.RB-MFG-CHAR-CD[1];
    PG0DS12();
    PG0DM001.PG0DM-MFG-CHAR-DESC1 = VMFGCH01.RB-MFG-CHAR-DESC;
  end
  if (VSYDVL03.RB-MFG-CHAR-CD[2] != " ")
    set VMFGCH01 empty;
    VMFGCH01.RB-MFG-CHAR-CD = VSYDVL03.RB-MFG-CHAR-CD[2];
    PG0DS12();
    PG0DM001.PG0DM-MFG-CHAR-DESC2 = VMFGCH01.RB-MFG-CHAR-DESC;
  end
  if (VSYDVL03.RB-MFG-CHAR-CD[3] != " ")
    set VMFGCH01 empty;
    VMFGCH01.RB-MFG-CHAR-CD = VSYDVL03.RB-MFG-CHAR-CD[3];
    PG0DS12();
    PG0DM001.PG0DM-MFG-CHAR-DESC3 = VMFGCH01.RB-MFG-CHAR-DESC;
  end
  if (VSYDVL03.RB-MFG-CHAR-CD[4] != " ")
    set VMFGCH01 empty;
    VMFGCH01.RB-MFG-CHAR-CD = VSYDVL03.RB-MFG-CHAR-CD[4];
    PG0DS12();
    PG0DM001.PG0DM-MFG-CHAR-DESC4 = VMFGCH01.RB-MFG-CHAR-DESC;
  end
  if (VSYDVL03.RB-MFG-CHAR-CD[5] != " ")
    set VMFGCH01 empty;
    VMFGCH01.RB-MFG-CHAR-CD = VSYDVL03.RB-MFG-CHAR-CD[5];
    PG0DS12();
    PG0DM001.PG0DM-MFG-CHAR-DESC5 = VMFGCH01.RB-MFG-CHAR-DESC;
  end

  PG0DW01.SY1STNBR = PG0DM001.SY1STNBR;
  PG0DM001.SY1STYNM = " "; /* style name*/
  PG0DM001.PG0DM-SYCLR-OUTSOLE = " ";
  PG0DM001.PG0DM-SYCLR-MIDSOLE = " ";
  PG0DM001.PG0DM-SYDVL-NPR-NAME = VSYDVL03.SY1STYNM;
  PG0DM001.PG0DM-RB-STYGRP-CNSMR-NM = VSYDVL03.RB-STYGRP-CNSMR-NM;
  PG0DM001.PG0DM-SY-STY-GRP-NBR = VSYDVL03.SYBSTGNB;
  PG0DM001.SY2RSTNB = " ";

end // end PG0DS06

// MOVE STYDVL TO WORKING STORAGE
Function PG0DS07()
   /* ------------------------------------------------------------*/
   /* move all enterable fields to display working storage*/
   /* stores the 'before' image for the audit file.*/
   /* ------------------------------------------------------------*/
  PG0DW02.PG4STNBR = VSYDVL03.PG4STNBR; /* development code*/
  PG0DW02.XPRCD = VSYDVL03.XPRCD; /* product type*/
  PG0DW02.XPLCD = VSYDVL03.XPLCD; /* product line*/
  PG0DW02.XPCCD = VSYDVL03.XPCCD; /* category code*/
  PG0DW02.XGACD = VSYDVL03.XGACD; /* gender age*/
  PG0DW02.XSUCD = VSYDVL03.XSUCD; /* silhouette code*/
  PG0DW02.XDMCD = VSYDVL03.XDMCD; /* dimension code*/
  PG0DW02.XSECD = VSYDVL03.XSECD; /* season code*/
  PG0DW02.XSNYR = VSYDVL03.XSNYR; /* season year*/
  PG0DW02.XDVCD = VSYDVL03.XDVCD; /* division code*/
  PG0DW02.XCNCD = VSYDVL03.XCNCD; /* construction code*/
  PG0DW02.XMLCD[1] = VSYDVL03.XMLCD[1]; /* material content lower cd1*/
  PG0DW02.XMLCD[2] = VSYDVL03.XMLCD[2]; /* material content lower cd2*/
  PG0DW02.XMLCD[3] = VSYDVL03.XMLCD[3]; /* material content lower cd3*/
  PG0DW02.XMLCD[4] = VSYDVL03.XMLCD[4]; /* material content lower cd4*/
  PG0DW02.XMCCD[1] = VSYDVL03.XMCCD[1]; /* material content cd1*/
  PG0DW02.XMCCD[2] = VSYDVL03.XMCCD[2]; /* material content cd2*/
  PG0DW02.PG4RFCFL = VSYDVL03.PG4RFCFL; /* report forecast flag*/
  PG0DW02.PG0DM-TECH-DIFCLT-IND = VSYDVL03.SY2TDIND;
  PG0DW02.PG4AIRF1 = VSYDVL03.PG4AIRF1;
  PG0DW02.PG4AIRF2 = VSYDVL03.PG4AIRF2;
  PG0DW02.PG4AIRF3 = VSYDVL03.PG4AIRF3;

end // end PG0DS07

// UPDATE ROW VSYDVL01
Function PG0DS08()
   /* ---------------------------------------------------------*/
    /* UPDATE A UNIQUE ROW FROM DPROG.VSYDVL03*/
   /* ---------------------------------------------------------*/

  try
    call "VSYDVL03" ("U ", SQLCA, VSYDVL03) {isNoRefresh = yes, isExternal = yes};
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      converseLib.validationFailed(023);
      set PG0DM001.SY1STNBR cursor;
      PG0DM001.XXXMODID = "S08";
      PG0DW01.PG0DWRFD = "Y"; /* Request for data*/
      return;

    end
    if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      converseLib.validationFailed(28); /* record updated since last displayed*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/
      PG0DW01.PG0DWRFD = "Y"; /* Request for data*/
      PG0DW01.SY1STNBR = "  ";
      PG0DM001.XXXMODID = "S08";
      exit stack;
    end

  end

   /* -------------------------------------------------------------*/
    /* IF DATA NOT AVAILABLE, RETURN AN ERROR MESSAGE TO THE USER.*/
    /* OTHERWISE, INDICATE THAT A SYSTEM ERROR HAS OCCURRED.*/
   /* -------------------------------------------------------------*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* PROGRAM APPLICATION*/
  PG0DM001.XXXMODID = "S08";
  TA1REC.TA1LOC = "UPDATE STYLE DEVELOPMENT ROW    ";
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVL03"; /* Table view name*/
  TA1REC.TA1TBLKE = VSYDVL03.PG4STNBR; /* Table key*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(19); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  end

  exit stack;

end // end PG0DS08

// GET XMLD'S FROM DPROD.VSTYLE01
Function PG0DS09()
   /* -----------------------------------------------------------*/
    /* GET MATERIAL CONTENT LOWER CODES FROM DPROD.VSTYLE01*/
    /* FOR AN IN-LINE PRODUCT.*/
   /* -----------------------------------------------------------*/

  set SY1REC empty;

  SY1REC.XGPCD = PG0DW01.XGPCD;
  SY1REC.SY1STNBR = PG0DM001.SY1STNBR;

  try
    call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

     /* NEXT SENTENCE               ; Next sentence*/

  else

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 100)    /* and row not found*/

      return; /* Return to previous process*/

    else

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1LOC = "PG0DS09 FETCH XML CODES";
      TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSTYLE01"; /* Table view name*/
      TA1REC.TA1TBLKE = SY1REC.SY1KEY; /* Table key*/

      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

   /* Data base is busy please*/
        converseLib.validationFailed(11);
      else

        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      end

      return; /* Return to previous process*/

    end

  end

  if (SQLCA.VAGen_SQLCODE == 0)
    PG0DW01.PG0DWIN1 = 1;
    while (PG0DWIN1 <= 4)
      PG0DM001.XMLCD[PG0DWIN1] = SY1REC.XMLCD[PG0DWIN1];
      PG0DW01.PG0DWIN1 = PG0DW01.PG0DWIN1 + 1;
    end

  end

  if (SQLCA.VAGen_SQLCODE == 0) /* GET DESCRIPTIONS*/
    PG0DW01.PG0DWIN1 = 1;
    while (PG0DWIN1 <= 4)
      if (SY1REC.XMLCD[PG0DWIN1] in XMLTBL.XMLCD)
        PG0DM001.XMLSDESC[PG0DWIN1] = XMLTBL.XMLSDESC[sysVar.arrayIndex];
      end

      PG0DW01.PG0DWIN1 = PG0DW01.PG0DWIN1 + 1;
    end

  end

end // end PG0DS09

// SELECT UNIQUE FOR VDTYRT01
Function PG0DS10()
   /* ---------------------------------------------------------*/
    /* SELECT A UNIQUE ROW FROM DPROD.VDTYRT01*/
   /* ---------------------------------------------------------*/

  VDTYRT01.SY-DUTY-RT-CD = PG0DM001.SY-DUTY-RT-CD;

  try
    call "IO6320" ("S ", SQLCA, VDTYRT01) {isNoRefresh = yes, isExternal = yes};
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  else

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 100)    /* and row not found*/

      converseLib.validationFailed(29); /* Invalid duty rate code*/
      set PG0DM001.SY-DUTY-RT-CD cursor, bold;
      return;

    else

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1LOC = "PG0DS10 DUTY RATE CD LOOK UP";
      TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VDTYRT01"; /* Table view name*/
      TA1REC.TA1TBLKE = PGAREC.PGAKEY; /* Table key*/

      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

      else

        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      end

      return; /* Return to previous process*/

    end

  end

end // end PG0DS10

// SELECT MFG CHAR DESCRIPTION
Function PG0DS12()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VMFGCH01" ("S ", SQLCA, VMFGCH01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/

      VMFGCH01.RB-MFG-CHAR-DESC = "******************************";
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PG0DM001.XXXMODID = "S12"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT MFG CHAR DESCRIPTION";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = PG0DM001.XXXMODID; /* Program name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMFGCH01"; /* Table view name*/
  TA1REC.TA1TBLKE = VMFGCH01.RB-MFG-CHAR-CD; /* Key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/

end // end PG0DS12

// Open DPRODG.VSYCLR01 cursor
Function PG0DS20()

  set PG2REC empty;

  PG2REC.XGPCD = PG0DW01.XGPCD;
  PG2REC.SY1STNBR = PG0DM001.SY1STNBR;

   /* ------------------------------------------------------------*/
   /* Select the set of rows from Production Style/Color Table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  else

    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "S20 OPEN SYCLR CURSOR SET";
    TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
    TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    else

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    end

    sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
    SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

    return; /* Return to previous process*/

  end

end // end PG0DS20

// Fetch DPRODG.VSYCLR01 row
Function PG0DS22()

   /* ------------------------------------------------------------*/
   /* Fetch the row from Production Style/Color Table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch table row*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    PG0DW01.PG0DW-STYLE-INFO-FOUND-FLAG = "Y";

    if (PG2REC.PG-CURR-XLC-CD < "11")
      PG0DW01.PG0DW-VALID-LIFE-CYCLE = "Y";
    end

  else

    PG0DW01.PG0DW-STYLE-INFO-FOUND-FLAG = "N";

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 100)    /* and row not found*/

       /* NEXT SENTENCE               ; Next sentence*/

    else

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1LOC = "S22 FETCH NEXT SYCLR ROW";
      TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
      TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

      else

        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      end

      sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
      SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

      return; /* Return to previous process*/

    end

  end

end // end PG0DS22

// Close DPRODG.VSYCLR01 cursor
Function PG0DS25()

   /* ------------------------------------------------------------*/
   /* Close the set of rows from Production Style/Color Table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, continue to return to the calling process.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

     /* NEXT SENTENCE               ; Next sentence*/

  else

    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "S25 CLOSE SYCLR CURSOR SET";
    TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
    TA1REC.TA1TBLKE = PG2REC.PG2KEY; /* Table key*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  end

   /* ------------------------------------------------------------*/
   /* Restore the CSP return code and SQL commarea.*/
   /* ------------------------------------------------------------*/

  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

end // end PG0DS25

// converse xmltbl pop up window
Function XPXML01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XMLTBL.XMLCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XMLTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          /* IF XMLTBL.XGPCD(XX0XWCT1) EQ XX0XW02.XGPCD;*/
            /* OR XX0XW02.XGPCD EQ ' ';*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XMLTBL.XMLCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XMLTBL.XMLDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
                                   /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1; /* Increment screen index*/
          /* END;*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XMLTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          /* IF XMLTBL.XGPCD(XX0XWCT1) EQ XX0XW02.XGPCD;*/
            /* OR XX0XW02.XGPCD EQ ' ';*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XMLTBL.XMLCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XMLTBL.XMLDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1; /* Decrement screen index*/
          /* END;*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end

  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XMLTBL.XMLCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end

end // end XPXML01

// converse pop up window
Function XPXTP01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XTPTBL.XTPCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XTPTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XTPTBL.XTPCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XTPTBL.XTPDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XTPTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XTPTBL.XTPCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XTPTBL.XTPDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end

  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XTPTBL.XTPCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end

end // end XPXTP01

//*** RECORD=PG0DW01 ****
// ;APPLICATION WORKING STORAGE
// ***********************
Record PG0DW01 type basicRecord
  10 XGPCD XGPCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 XTPCD XTPCD ; 
  10 PG0DWDWF PG0DWDWF ; 
  10 PG0DWRFD PG0DWRFD ; 
  10 PG0DWRCF PG0DWRCF ; 
  10 PG0DWILF PG0DWILF ; 
  10 PG0DWIN1 PG0DWIN1 ; 
  10 PG0DSEDT PG0DSEDT ; 
    15 PG0DSECC PG0DSECC ; 
    15 PG0DSEYY PG0DSEYY ; 
  10 PG0DWSNS PG0DWSNS ; 
    15 XSECD XSECD ; 
    15 PG0DSEYR PG0DSEYR ; 
  10 PG0DW-VALID-LIFE-CYCLE PG0DW-VALID-LIFE-CYCLE ; 
  10 PG0DW-STYLE-INFO-FOUND-FLAG PG0DW-STYLE-INFO-FOUND-FLAG ; 
  10 PG0DW-END-OF-VTLINV01 PG0DW-END-OF-VTLINV01 ; 
  10 PG0DW-UPD-SYDVL PG0DW-UPD-SYDVL ; 
end // end PG0DW01

//*** RECORD=PG0DW02 ****
// pg0d working storage for audit row "before" image
// ***********************
Record PG0DW02 type basicRecord
  5 PG0DWGRP PG0DWGRP ; 
    10 PG4STNBR PG4STNBR ; 
    10 XPRCD XPRCD ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 XGACD XGACD ; 
    10 XDMCD XDMCD ; 
    10 XSUCD XSUCD ; 
    10 XSECD XSECD ; 
    10 XSNYR XSNYR ; 
    10 XDVCD XDVCD ; 
    10 XCNCD XCNCD ; 
    10 XMLCD XMLCD [4] ; 
    10 XMCCD XMCCD [4] ; 
    10 FY4WHLPR FY4WHLPR ; 
    10 PG4RTLPR PG4RTLPR ; 
    10 PG4RFCFL PG4RFCFL ; 
    10 PG0DM-SYDVL-NPR-MIDSOLE PG0DM-SYDVL-NPR-MIDSOLE ; 
    10 PG0DM-SYDVL-NPR-OUTSOLE PG0DM-SYDVL-NPR-OUTSOLE ; 
    10 FY8LSTCD FY8LSTCD ; 
    10 PG0DM-TECH-DIFCLT-IND PG0DM-TECH-DIFCLT-IND ; 
    10 PG4AIRF1 PG4AIRF1 ; 
    10 PG4AIRF2 PG4AIRF2 ; 
    10 PG4AIRF3 PG4AIRF3 ; 
end // end PG0DW02

//*** RECORD=VMFGCH01 ****
// ************MANUFACTURING CHARACTERISTICS TABLE*************
// DB2 TABLE VIEW:  DPRODG.VMFGCH01
// COPYLIB MEMBER:  DMFGCH01
//     I/O MODULE:  VMFGCH01
//  DB2 TABLE KEY:  RB-MFG-CHAR-CD
// * --------------------MAINTENANCE LOG-----------------------
// CONTROL    DATE     NAME   * -----DESCRIPTION OF CHANGE-----
// -------  --------  ------  ---------------------------------
// PG-90    10-16-95  LREIN   New record definition
// ************************************************************
// ************************
Record VMFGCH01 type basicRecord
  5 VMFGCH01-GROUP VMFGCH01-GROUP ; 
    10 RB-MFG-CHAR-CD RB-MFG-CHAR-CD ; 
    10 RB-MFG-CHAR-DESC RB-MFG-CHAR-DESC ; 
    10 XXX-STAT XXX-STAT ; 
    10 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    10 ZZ-SDT ZZ-SDT ; 
    10 XXX-USER-ID XXX-USER-ID ; 
end // end VMFGCH01

// NPR mold code
DataItem PG0DM-SYDVL-NPR-MIDSOLE char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PG0DM-SYDVL-NPR-OUTSOLE char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_TECH_DIFCLT_IND
DataItem PG0DM-TECH-DIFCLT-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SESN CC
DataItem PG0DSECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SESN YEAR CCYY
DataItem PG0DSEDT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SESN YR
DataItem PG0DSEYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SESN YY
DataItem PG0DSEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PG0DW-END-OF-VTLINV01 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PG0DW-STYLE-INFO-FOUND-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PG0DW-UPD-SYDVL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Valid syclr life cycle switch
DataItem PG0DW-VALID-LIFE-CYCLE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data was found switch
DataItem PG0DWDWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level for work rec
DataItem PG0DWGRP char(88)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// IN-LINE PRODUCT FOUND
DataItem PG0DWILF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XML TABLE INDEX
DataItem PG0DWIN1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// RECORD FOUND SWITCH
DataItem PG0DWRCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request of data switch
DataItem PG0DWRFD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SESN CODE AND YR COMB
DataItem PG0DWSNS char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RB_MFG_CHAR_DESC
DataItem RB-MFG-CHAR-DESC char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GROUP LEVEL
DataItem VMFGCH01-GROUP char(51)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end