package pg0c;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ff.common.*;
import fk.common.*;
import fy.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=PG0C ****
// This application is used by footwear production to inquire
// into the sytle development data base.  In addition to the
// inquiry function, some users will be allowed to maintain
// certain fields.. The information displayed on this screen
// originates from the PC based footwear development tracking
// system.  Data is refreshed nightly, so that any modifica-
// tions made on the PC will appear on the screen.  Once a
// field has been changed on this screen, howrver, the field
// will no longer be refreshed with the PC's data.
// the user may exit to any allowed application via fast path
// or pf keys.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 08/12/89   lrein    created
// 03/02/93   jmclau   pg-26&48 added pg_frst_prdctn_mo and
//                     pg_frst_dlvr_mo to pg5rec(dprodg.
//                     vsdaud01 table).
// 08/09/93   jmclau   PG-46 added xxx-user-id to the dprodg.
//                     vsdaud01 table and made the appropriate
//                     changes when inserting an audit record.
// 07/11/94   JALLE1   Add pf16 to euro maint (PG0F).
// 12/19/96   CWHIT1   REGEN FOR YR 2000
// 03/12/02   SBUNGO   CHANGED STATEMENT GRP XSFFS62 TO CALL
//                     PG6250 INSTEAD OF FF6250 CICS PGM. THIS
//                     IS DONE AS PART OF DIVESTITURE EXERCISE
//                     TO UPDATE ONLY MAX PRICE TABLE.
// *********************
Program PG0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PG0CW00 PG0CW00; // record
  PG0CW01 PG0CW01; // record
  PG4REC PG4REC; // record
  PG5REC PG5REC; // record
  PGXREC PGXREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PG0CM.PG0CM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPG002: XPPG002();
     /* ------------------------------------------------------------*/
     /* initialise working storage and display areas.*/
     /* ------------------------------------------------------------*/

    set PG0CM001 initial; /* map area*/
    set PG0CW01 empty; /* display working storage*/
    set PG0CW00 empty; /* application working storage*/
    set SQLCA empty; /* commarea*/
    set TAEREC empty; /* error diagnosis info*/
    set TA1REC empty; /* error diagnosis info*/
    set XX0XW01 empty; /* date time workarea*/
    set PG5REC empty; /* initialize vsdaud01 record*/

    PG0CW00.PG0CWRDS = "N"; /* no request for data*/
    PG0CW00.PG0CWMCS = "N"; /* no format map*/

    if (PGXREC.PG4STNBR > " ") /* development code in commarea*/
      PG0CW01.PG4STNBR = PGXREC.PG4STNBR; /* move to display ws*/
      PG0CM001.PG4STNBR = PGXREC.PG4STNBR; /* move to map area*/
      PG0CW00.PG0CWRDS = "Y"; /* request for data*/
      PG0CW00.PG0CWMCS = "Y"; /* format map switch*/
    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    goto PG0C001; /* Converse main process*/

    PG0C001: PG0C001();
     /* ------------------------------------------------------------*/
     /* flow to converse the main process*/
     /* ------------------------------------------------------------*/

    goto PG0C001; /* converse the main process*/
  end // end main
end // end PG0C

// style devel pricing maint
Function PG0C001()
   /* GET pg0c001*/
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) obtain data to display.*/
   /* 2) display appropriate map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PG0C100(); /* obtain data to display*/

  PG0C200(); /* format and display map*/

  PG0C300(); /* Check attention identifier*/

  PG0C400(); /* Reset fields to normal intensity*/

  PG0C500(); /* Verify the entered data*/

  PG0C600(); /* Process valid input request*/

end // end PG0C001

// obtain data to display
Function PG0C100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PG0CW00.PG0CWRDS != "Y") /* Data was not requested*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Save the key information in map display storage area.*/
   /* ------------------------------------------------------------*/

  PG0CW01.PG4STNBR = PG0CM001.PG4STNBR; /* development code*/
  PGXREC.PG4STNBR = PG0CM001.PG4STNBR; /* development code*/

   /* ------------------------------------------------------------*/
   /* Clear the row storage area, format the key and obtain the*/
   /* table row to be displayed.*/
   /* ------------------------------------------------------------*/

  set PG4REC empty; /* clear area for sty devel table*/
  PG4REC.PG4STNBR = PG0CW01.PG4STNBR; /* development code*/
  PG0C110(); /* get the style devel row*/
   /* ------------------------------------------------------------*/
   /* if found, save the data in working storage area*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
    PG0CW01.FY4WHLPR = PG4REC.FY4WHLPR; /* wholesale price*/
    PG0CW01.PG4RTLPR = PG4REC.PG4RTLPR; /* suggested retail price*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, indicate that no data was found to display*/
    /* ------------------------------------------------------------*/

    PGXREC.XXXMODID = "100"; /* Module identification*/
    set PG0CM001.PG4STNBR cursor, bold; /* highlight, place cursor*/
    converseLib.validationFailed(18); /* Indicate no data found*/

  end

   /* ------------------------------------------------------------*/
   /* check if enterable fields need to be protected*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACHGFL != "Y") /* user not authorised to update*/
    set PG0CM001.FY4WHLPR skip; /* protect enterable fields*/
    set PG0CM001.PG4RTLPR skip; /* protect enterable fields*/
  end

   /* ------------------------------------------------------------*/
   /* If no error was found, indicate request for data complete.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/
    PG0CW00.PG0CWRDS = "N"; /* Request for data switch*/
  end

end // end PG0C100

// get style devel table row
Function PG0C110()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4390" ("S ", SQLCA, PG4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "110"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT STY DEVEL ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG4REC.PG4STNBR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PG0C110

// format and display the map
Function PG0C200()
   /* ------------------------------------------------------------*/
   /* format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* a real error, not just info*/
    PGXREC.XXXMSGNO = converseVar.validationMsgNum; /* move it to working storage*/
  end

  if (PG0CW00.PG0CWMCS == "Y") /* map needs to be formatted*/
    PG0C210(); /* format the map*/
  end

   /* ------------------------------------------------------------*/
   /* check if enterable fields need to be protected*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACHGFL == "Y"    /* user authorised to update*/
   && (PG0CW01.PG0CW-CHAR4 < "0" /* not a numeric field*/
   || PG0CW01.PG0CW-CHAR4 > "9")) /* therefore not from PPS*/
    set PG0CM001.FY4WHLPR normal; /* unprotect enterable wholesale pr*/
    set PG0CM001.PG4RTLPR normal; /* unprotect enterable sug rtl pr*/
  end
  if (PGXREC.XXXMSGNO != 0)
                                   /* error or informational message*/

    if (PGXREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PGXREC.XXXMSGNO);
    end /* move to map*/
    PG0CM001.XXXMODID = PGXREC.XXXMODID; /* error module name*/
    set PG0CM001 alarm; /* indicate sound alarm*/

  end

  converse PG0CM001 ;
   /* ------------------------------------------------------------*/
   /* clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/

  PGXREC.XXXMODID = " "; /* module identification*/
  PGXREC.XXXMSGNO = 0; /* message number*/

  COMMAREA.CATOAP = PG0CM001.CATOAP; /* to application*/
  COMMAREA.CAITEM = PG0CM001.CAITEM; /* application data*/
end // end PG0C200

// format map fields
Function PG0C210()
   /* ------------------------------------------------------------*/
   /* clear map area and reset the map switch*/
   /* ------------------------------------------------------------*/

  set PG0CM001 initial; /* map io area*/
  PG0CW00.PG0CWMCS = "N"; /* map format switch*/
  PG0CM001.XXXCURDT = VGVar.currentShortGregorianDate; /* current date*/
  PG0CM001.PG4STNBR = PG0CW01.PG4STNBR; /* development code*/

   /* ------------------------------------------------------------*/
   /* format the map data*/
   /* ------------------------------------------------------------*/

  PG0CM001.SY1STYNM = PG4REC.SY1STYNM; /* model name*/
  PG0CM001.SY1SSTNM = PG4REC.SY1SSTNM; /* short name*/
  PG0CM001.FY4TGTPR = PG4REC.FY4TGTPR; /* target price*/
  PG0CM001.FY4QTDPR = PG4REC.FY4QTDPR; /* quoted price*/
  PG0CM001.FY4FOBPR = PG4REC.FY4FOBPR; /* fob price*/

  PG0CM001.FY4WHLPR = PG0CW01.FY4WHLPR; /* wholesale price*/
  PG0CM001.PG4RTLPR = PG0CW01.PG4RTLPR; /* suggested retail price*/

   /* ------------------------------------------------------------*/
   /* check if enterable fields need to be protected*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACHGFL == "Y"    /* user authorised to update*/
   && (PG0CW01.PG0CW-CHAR4 < "0" /* not a numeric field*/
   || PG0CW01.PG0CW-CHAR4 > "9")) /* therefore not from PPS*/
    set PG0CM001.FY4WHLPR normal; /* unprotect enterable wholesale pr*/
    set PG0CM001.PG4RTLPR normal; /* unprotect enterable sug rtl pr*/
  end
end // end PG0C210

// check attention identifier
Function PG0C300()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PG0CW00.PG0CWMCS = "Y"; /* Clear the map fields*/
    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* application data*/

    if (PG0CW00.PG0CWRDS == "Y") /* data was requested*/
      set PG0CW01 empty; /* reset display working storage*/
      PG0CW00.PG0CWRDS = "N"; /* reset request for data sw*/
    end

    exit stack; /* Exit to redisplay map*/

  end

  if (PG0CM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSPG002(); /* Exit to another application*/
      PGXREC.XXXMODID = "300"; /* Process name*/
      set PG0CM001.CATOAP cursor, bold; /* Highlight (in case bad xfer)*/

    else

      converseLib.validationFailed(36); /* Indicate only enter with fastpath*/
      PGXREC.XXXMODID = "300"; /* Process name*/

    end

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf16)

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PG0CM001"; /* for help*/
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "PG0B";
    end

    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "PG0F";
    end

    XSPG002(); /* transfer to another application*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter
   && converseVar.eventKey not pf9)

    converseLib.validationFailed(3); /* invalid key*/
    PGXREC.XXXMODID = "300"; /* program name*/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)

      converseLib.clearScreen();
       /* reset map*/

    end

    exit stack;

  end

end // end PG0C300

// reset highlighted fields
Function PG0C400()

  set PG0CM001.CATOAP initialAttributes; /* to application*/
  set PG0CM001.CAITEM initialAttributes; /* application data*/
  set PG0CM001.PG4STNBR initialAttributes; /* development code*/
  set PG0CM001.FY4WHLPR initialAttributes; /* wholesale price*/
  set PG0CM001.PG4RTLPR initialAttributes; /* suggested retail price*/
end // end PG0C400

// verify the entered data
Function PG0C500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PG0CM001.CAITEM > " ") /* Application data was entered*/
    PGXREC.XXXMODID = "500"; /* Module identification*/
    set PG0CM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(2); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* Check if new key was entered*/
   /* ------------------------------------------------------------*/

  if (PG0CM001.PG4STNBR != PG0CW01.PG4STNBR) /* development code changed*/
    PG0CW00.PG0CWKCS = "Y"; /* key data changed*/
  else
    PG0CW00.PG0CWKCS = "N"; /* key data not changed*/
  end

   /* ------------------------------------------------------------*/
   /* Check if data was changed*/
   /* ------------------------------------------------------------*/

  PG0CW00.PG0CWDCS = "N"; /* data didnt change*/

  if (PG0CM001.FY4WHLPR != PG0CW01.FY4WHLPR /* wholesale price changed*/
   || PG0CM001.PG4RTLPR != PG0CW01.PG4RTLPR) /* sugg retail price changed*/
    PG0CW00.PG0CWDCS = "Y"; /* data did change*/
  end

  if (converseVar.eventKey is enter)

    if (PG0CW00.PG0CWKCS == "Y" /* key changed*/
     && PG0CW00.PG0CWDCS == "Y") /* data changed*/
      PGXREC.XXXMODID = "500"; /* Module identification*/
      converseLib.validationFailed(201); /* cannot change key and data*/
    end

    if (PG0CW00.PG0CWKCS == "N" /* key not changed*/
     && PG0CW00.PG0CWDCS == "N") /* data not changed*/
      PGXREC.XXXMODID = "500"; /* Module identification*/
      converseLib.validationFailed(98); /* press pf9 to update*/
    end

  end

  if (converseVar.eventKey is pf9 /* update request*/
   && PG0CW00.PG0CWKCS == "Y")    /* key changed*/
    PGXREC.XXXMODID = "500"; /* Module identification*/
    converseLib.validationFailed(128); /* cannot update and change key*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end PG0C500

// process valid request
Function PG0C600()
   /* ------------------------------------------------------------*/
   /* if key fields were changed set request for data flag*/
   /* ------------------------------------------------------------*/

  if (PG0CW00.PG0CWKCS == "Y") /* key changed*/
    PG0CW00.PG0CWRDS = "Y"; /* set data request switch to yes*/
    PG0CW00.PG0CWMCS = "Y"; /* clear map*/
    set PG0CW01 empty; /* reinitialise display working storage*/
    return; /* return to performing process*/
  end

  if (converseVar.eventKey is enter) /* enter was pressed and no errors*/
    PGXREC.XXXMSGNO = 98; /* press pf9 to update*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* this is now the update pass.  the database is being updated*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get date and time*/

   /* ------------------------------------------------------------*/
   /* move 2 for before image to the audit type code; move what*/
   /* is in the style development row to the audit row, insert*/
   /* the audit row (these last two are done in pg0c610), update*/
   /* the style development row with the changed values,*/
   /* move 3 for after image to the audit type code; move what*/
   /* is in the style development row to the audit row, insert*/
   /* the audit row (these last two are done in pg0c610).*/
   /* ------------------------------------------------------------*/

  PG5AUDTP = "2"; /* before image*/
  PG0C610(); /* insert audit row*/

  if (PG0CM001.FY4WHLPR != PG4REC.FY4WHLPR) /* wholesale price*/
    PG4REC.FY4WHLPR = PG0CM001.FY4WHLPR;
    PG4REC.PG4WMDFL = "Y"; /* modified on line*/
  end

  if (PG0CM001.PG4RTLPR != PG4REC.PG4RTLPR) /* suggested retail price*/
    PG4REC.PG4RTLPR = PG0CM001.PG4RTLPR;
    PG4REC.PG4RMDFL = "Y"; /* modified on line*/
  end

  PG5AUDTP = "3"; /* after image*/
  PG0C610(); /* insert audit row*/
  PG0C620(); /* update data base*/
  TA1REC.TA1PGMNM = "PG0C"; /* in case of error*/
  XSFFS62(); /* update forecasting stuff*/

   /* ------------------------------------------------------------*/
   /* the program is at this point only if all updates were*/
   /* successful*/
   /* ------------------------------------------------------------*/

  PG0CW00.PG0CWRDS = "Y"; /* request data*/

  if (SQLCA.VAGen_SQLCODE == 0)
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* commit all changes*/
    PGXREC.XXXMSGNO = 32; /* an info message, not an error*/
  end

end // end PG0C600

// insert row to audit table
Function PG0C610()

   /* ------------------------------------------------------------*/
   /* format audit record fields*/
   /* ------------------------------------------------------------*/

  PG5REC.ZZZSDT = XX0XW01.XX0XWDAT; /* setup date*/
  PG5REC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* setup time*/
  PG5REC.XXX-USER-ID = COMMAREA.CAUSERID; /* user id*/

  PG5REC.PG4STNBR = PG4REC.PG4STNBR; /* developer number*/
  PG5REC.XPRCD = PG4REC.XPRCD; /* product type*/
  PG5REC.XPLCD = PG4REC.XPLCD; /* product line*/
  PG5REC.XPCCD = PG4REC.XPCCD; /* category code*/
  PG5REC.XGACD = PG4REC.XGACD; /* gender age*/
  PG5REC.XSUCD = PG4REC.XSUCD; /* silhouette code*/
  PG5REC.XDMCD = PG4REC.XDMCD; /* dimension code*/
  PG5REC.XSECD = PG4REC.XSECD; /* season code*/
  PG5REC.XSNYR = PG4REC.XSNYR; /* season year*/
  PG5REC.FY4WHLPR = PG4REC.FY4WHLPR; /* wholesale price*/
  PG5REC.PG4RTLPR = PG4REC.PG4RTLPR; /* suggested retail price*/
  PG5REC.PG2FPDMO = PG4REC.PG2FPDMO; /* first production month*/
  PG5REC.PG4FDLMO = PG4REC.PG4FDLMO; /* first delivery month*/

   /* ------------------------------------------------------------*/
   /* add row*/
   /* ------------------------------------------------------------*/

  try
    call "IO4400" ("A ", SQLCA, PG5REC) {isNoRefresh = yes, isExternal = yes};
  end /* add row*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* a good select*/
    return; /* return to calling process*/
  end

  if (sysVar.errorCode != "00000000" /* bad call*/
   || SQLCA.VAGen_SQLCODE != 0)      /* bad return code*/

    PGXREC.XXXMODID = "101"; /* Module identification*/
    TA1REC.TA1LOC = "ADD AUDIT TABLE ROW"; /* error description*/
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/

      converseLib.validationFailed(19); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back previous updates*/
      converseLib.validationFailed(1); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSDAUD01"; /* Table view name*/
    TA1REC.TA1TBLKE = PG5REC.PG5GROUP; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    exit stack;
  end

end // end PG0C610

// update style development table
Function PG0C620()
  PG4REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  PG4REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
  try
    call "IO4390" ("U ", SQLCA, PG4REC) {isNoRefresh = yes, isExternal = yes};
  end /* update row*/

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
      PGXREC.XXXMSGNO = 20; /* updated since displayed here*/
      PG0CW00.PG0CWRDS = "Y"; /* set data request switch*/
      PG0CW00.PG0CWMCS = "Y"; /* set map clear switch*/
      PGXREC.XXXMODID = "620"; /* module id*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back previous updates*/
      exit stack; /* return to redisplay map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* bad call*/
   || SQLCA.VAGen_SQLCODE != 0)      /* bad sql function*/
    PGXREC.XXXMODID = "630"; /* Module identification*/
    TA1REC.TA1LOC = "UPDATE ROW         "; /* error description*/
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back previous updates*/
      converseLib.validationFailed(19); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back previous updates*/
      converseLib.validationFailed(01); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSYDVL01"; /* Table view name*/
    TA1REC.TA1TBLKE = PG4REC.PG4STNBR; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    exit stack;
  end

end // end PG0C620

//*** RECORD=PG0CW00 ****
// working storage for pg0c -- style devel pricing inq/maint
// ***********************
Record PG0CW00 type basicRecord
  10 PG0CWRDS PG0CWRDS ; 
  10 PG0CWMCS PG0CWMCS ; 
  10 PG0CWKCS PG0CWKCS ; 
  10 PG0CWDCS PG0CWDCS ; 
end // end PG0CW00

//*** RECORD=PG0CW01 ****
// display working storage for pg0c
// ***********************
Record PG0CW01 type basicRecord
  10 PG4STNBR PG4STNBR ; 
    15 * char(3) ; 
    15 PG0CW-CHAR4 PG0CW-CHAR4 ; 
    15 * char(2) ; 
  10 FY4WHLPR FY4WHLPR ; 
  10 PG4RTLPR PG4RTLPR ; 
end // end PG0CW01

// if numeric, then PPS project
DataItem PG0CW-CHAR4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data changed switch
DataItem PG0CWDCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key changed switch
DataItem PG0CWKCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// clear map switch
DataItem PG0CWMCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// request data switch
DataItem PG0CWRDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end