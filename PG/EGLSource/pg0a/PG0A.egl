package pg0a;
import ab.common.*;
import af.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import mn.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import vv.common.*;
//*** PROGRAM=PG0A ****
// This application is the add/delete/maintain application for
// forecasters/schedulers/availability specialist's in the
// PRODUCTION GENERIC system.
// 
// Upon initial entry, the table is read and columns from the
// selected rows are formatted and saved in temporary storage,
// one display page per queue record.
// 
// The records are retrieved from temporary storage one at a
// time, for display to the user.  The user may page forward
// and backward, to view the rows that were selected.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE     NAME       DESCRIPTION OF CHANGE
// --------   ---------  -------------------------------------
// 01/06/89   G Gilray   New application.
// 09/05/89   J WOOD     PG0A154,254 CHANGED FOR NEW MN2REC KEY
// 04/20/93   P KHAN     PGN002: DO NOT ALLOW USER TO DEACTI-
//                       VATE OR DELETE IF ACTIVE STYLES EXIST
//                       FOR THAT SCHEDULER
// 06/17/93   dbruih     changed error checking module pg0a157
//                       to allow sqlcode 100 as valid to
//                       continue processing.
// 11/08/93   MSMIT2     Database changes PG1REC.
// 04/21/94   MADAMS     Corrected temporary storage length.
// 02/27/97   IDICKI     Add region code to VSUSER table (mak-
//                       ing VSUSER02 view). Place region on sc
//                       reen enabling user to request by reg-
//                       ion.
// 01/20/1998 TTHAN1     Y2KFIX - FIX LENGTH ERROR IN PG0AW002.
//                       REGEN FOR NEW XP1REC.
// *********************
Program PG0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PG00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  MN1REC MN1REC; // record
  MN2REC MN2REC { redefines = MN1REC } ; // record
  PG0AW01 PG0AW01; // record
  PG0AW02 PG0AW02; // record
  PGWREC PGWREC; // record
  SQLCA SQLCA; // record
  SY2REC SY2REC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  VSUSER02 VSUSER02; // record
  XP0HW01 XP0HW01; // record
  XP0HW02 XP0HW02; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XDRTBL {deleteAfterUse = yes}; // table
  use PG0AM.PG0AM001,  // forms
      PG0AM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPG001: XPPG001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Apparel Buy Prototype process.*/
     /* ------------------------------------------------------------*/

    set ERRSQLCA empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TA5REC empty; /* Initialize working storage*/
    set MN1REC empty; /* Initialize working storage*/
    set PG0AW01 empty; /* Initialize working storage*/
    set PG0AW02 empty; /* Initialize working storage*/

    move "L" to PG0AW02.XXXSTAT[1] for all; /* Initialize status codes to LAST*/

    set VSUSER02 empty; /* Initialize working storage*/
    set SY2REC empty; /* Initialize working storage*/
    set PGWREC empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/

    set PG0AM001 initial; /* Initialize map output area*/

    PGWREC.PGWAPPL = "PG0A"; /* Initialize appl ID for this appl*/
    PGWREC.PGWPRCSN = " "; /* Initialize process number to blank*/

     /* ------------------------------------------------------------*/
     /* Initialize the literals used in the pg0aw01 record*/
     /* these literals are used when a db2 error occurs and keys*/
     /* need to be moved to the error diag report.*/
     /* ------------------------------------------------------------*/
    PG0AW01.PG0AW1L1 = "GPC:"; /* Initialize GPC code literal*/
    PG0AW01.PG0AW1L2 = ", SCHED-CD:"; /* Initialize sched code literal*/
    PG0AW01.PG0AW1L3 = ", FCST-CD:"; /* Initialize fcst code literal*/
    PG0AW01.PG0AW1L4 = ", REGN-CD:"; /* Initialize fcst code literal*/
     /* ------------------------------------------------------------*/

    PGWREC.PGWMAP = "1"; /* Indicate map to be displayed*/
    PGWREC.PGWSWR = "Y"; /* Indicate request for data*/
    PGWREC.PGWADDFL = "N"; /* Indicate not an ADD function*/

     /* *************************************************************/
     /* ***** this will assign pgwrec.pgwmpmax the value of the *****/
     /* ***** maximum number of rows on the screen.             *****/
     /* *************************************************************/
    move " " to PG0AM001.XXXSTAT[1] for all; /* move blanks to array on map*/
    PGWREC.PGWMPMAX = sysVar.arrayIndex; /* EZETST has value of last occurs nbr*/


     /* *************************************************************/
     /* ***** this will assign pgwrec.pgwtsqsz the value of the *****/
     /* ***** length of the TSQ record to be writen. This value *****/
     /* ***** is calculated based on the physical size of each  *****/
     /* ***** row on the page times the number of rows on the   *****/
     /* ***** screen, as calculated above Plus 4(size of size   *****/
     /* ***** field).                                           *****/
     /* *************************************************************/
    /* ********************Y2K OUT BEGIN*********************/
    /* PGWREC.PGWTSQSZ = 1364           /* temp storage length*/
    /* ********************Y2K OUT END***********************/
    /* ********************Y2K IN BEGIN**********************/
     /* temp storage length*/
     /* ********************Y2K IN END************************/
    PGWREC.PGWTSQSZ = 1396;


     /* *************************************************************/
     /* ***** Initialize GPC code and tpye code of selection   ******/
     /* ***** criteria on map based on value from commarea(GPC)******/
     /* ***** and security flags.                              ******/
     /* *************************************************************/

    if (COMMAREA.CAILVL[2] == "Y" /* IF securtiy says 'schedulers'*/
     || COMMAREA.CAILVL[4] == "Y") /* |*/
      PG0AM001.PG0AMTYP = "S"; /* Initilize to schedulers*/
    else /* ELSE(not forecasters)*/
      if (COMMAREA.CAILVL[1] == "Y" /* IF security says 'Forecasters'*/
       || COMMAREA.CAILVL[3] == "Y") /* |*/
        PG0AM001.PG0AMTYP = "F"; /* Initialize value to Forecasters*/
      else /* else(not fcster or scheds)*/
        converseLib.validationFailed(12); /* no security*/
        set PG0AM001.PG0AMTYP cursor, bold;
        PG0AM001.PG0AMTYP = " "; /* Initilize to blanks*/
        PGWREC.PGWSWR = "N"; /* Do Not Select Any Data*/
      end /* END of "IF" statement*/
    end /* END of "IF" statement*/

    if (COMMAREA.XGPCD == "02") /* IF GPC '02' passed from MENU*/
      if (COMMAREA.CAILVL[1] == "Y" /* IF security says '02' okay*/
       || COMMAREA.CAILVL[2] == "Y") /* |*/
        PG0AM001.XGPCD = "02"; /* Initialize to '02'*/
      else /* ELSE('02' not okay)*/
        converseLib.validationFailed(12); /* no security*/
        set PG0AM001.XGPCD cursor, bold;
        PGWREC.PGWSWR = "N"; /* Do Not Select Any Data*/
        PG0AM001.XGPCD = " "; /* Initialize to blanks*/
      end /* END of "IF" statement*/
    else /* ELSE(GPC '02' not passed)*/
      if (COMMAREA.XGPCD == "03") /* IF GPC '03' passed from MENU*/
        if (COMMAREA.CAILVL[3] == "Y" /* IF security says '03' okay*/
         || COMMAREA.CAILVL[4] == "Y") /* |*/
          PG0AM001.XGPCD = "03"; /* Initialize to '03'*/
        else /* ELSE('03' not okay)*/
          converseLib.validationFailed(12); /* no security*/
          set PG0AM001.XGPCD cursor, bold;
          PGWREC.PGWSWR = "N"; /* Do Not Select Any Data*/
          PG0AM001.XGPCD = " "; /* Initialize to blanks*/
        end
      else
        if (COMMAREA.XGPCD == "  ") /* IF GPC '03' passed from MENU*/
          if (COMMAREA.CAILVL[1] == "Y"
           /* IF security says '02' okay*/
           || COMMAREA.CAILVL[2] == "Y") /* |*/
            PG0AM001.XGPCD = "02";
          else
            if (COMMAREA.CAILVL[3] == "Y" /* IF security says '03' okay*/
             || COMMAREA.CAILVL[4] == "Y") /* |*/
              PG0AM001.XGPCD = "03";
            else
              converseLib.validationFailed(12); /* no security*/
              set PG0AM001.XGPCD cursor, bold;
              PGWREC.PGWSWR = "N"; /* Do Not Select Any Data*/
              PG0AM001.XGPCD = " "; /* Initialize to blanks*/
            end
          end
        else /* ELSE(GPC '03' not passed)*/
          converseLib.validationFailed(12); /* no security*/
          set PG0AM001.XGPCD cursor, bold;
          PGWREC.PGWSWR = "N"; /* Do Not Select Any Data*/
          PG0AM001.XGPCD = " "; /* Initialize to blanks*/
        end /* END of "IF" statement*/
      end /* END of "IF" statement*/
    end /* END of "IF" statement*/

    XP1REC.XGPCD = PG0AM001.XGPCD; /* Move GPC to xp1rec*/
    PGWREC.PGWSVGPC = PG0AM001.XGPCD; /* Move GPC to save*/
    XP1REC.XSECOVFL = PG0AM001.PG0AMTYP; /* Use xse fld as type code*/
    PGWREC.PGWSVTYP = PG0AM001.PG0AMTYP; /* Move type to save*/
    PGWREC.PGWSVREG = PG0AM001.PG0AMREG; /* Move region to save*/

    goto PG0A001; /* Converse Apparel Buy Prototype*/

    PG0A001: PG0A001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    goto PG0A001; /* loop thru processes until xsexit*/


  end // end main
end // end PG0A

// Choose which map to display
Function PG0A001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* GET SYSTEM DATE AND TIME*/

  if (PGWREC.PGWMAP == "1") /* Map 1 was requested*/

    PGWREC.PGWPRCSN = "M001"; /* Indicate map # 1*/
    PGWREC.XXXMAPNM = PGWREC.PGWERLOC; /* Move map name to pgwrec*/
    PGWREC.PGWPRCSN = " "; /* Re-Initialize process name*/

    PG0A100(); /* Display map 1*/

  else

    if (PGWREC.PGWMAP == "2") /* Map 2 was requested*/

      PGWREC.PGWPRCSN = "M001"; /* Indicate map # 2*/
      PGWREC.XXXMAPNM = PGWREC.PGWERLOC; /* Move map name to pgwrec*/
      PGWREC.PGWPRCSN = " "; /* Re-Initialize process name*/

      PG0A200(); /* Display map 2*/

    else

      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      PGWREC.PGWPRCSN = "001 "; /* Process number*/
      TA1REC.TA1PGMNM = PGWREC.PGWERLOC; /* Error location*/
      TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
      TA1REC.TA1MAP = PGWREC.PGWMAP; /* Map name*/
      SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";

      try
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      end
                                   /* Error diagnosis routine*/

      XSPF4(); /* Exit to Master Menu*/

    end

  end


end // end PG0A001

// Driver process for 100 map
Function PG0A100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PG0A110(); /* Obtain the data to display*/

  PG0A120(); /* Format and display the map*/

  PG0A130(); /* Check attention identifier*/

  PG0A140(); /* Reset fields to normal intensity*/

  PG0A150(); /* Verify the entered data*/

  PG0A160(); /* Process valid input request*/


end // end PG0A100

// Obtain the data to display
Function PG0A110()
   /* ------------------------------------------------------------*/
   /* If data was not requested, return to the previous process.*/
   /* Purge any existing queue in temporary storage.*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At end of rows, add any partial page to the queue.*/
   /* At end of rows, close the selected set cursor.*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/


  if (PGWREC.PGWSWR != "Y") /* Data was not requested*/
    return; /* Return to previous process*/
  end

  PG0A111(); /* Purge any temporary storage*/

  PG0A112(); /* Select set and open the cursor*/

  if (converseVar.validationMsgNum == 0) /* No errors were found*/

    PGWREC.PGWSWC = "N"; /* Initialize end of file switch*/
    PGWREC.PGWIXM = 1; /* Initialize display line number*/

    while (PGWREC.PGWSWC == "N") /* Until cursor end of file*/

      PG0A113(); /* Obtain data and format page*/

      if (PGWREC.PGWIXM > PGWREC.PGWMPMAX) /* Page is full*/
        PG0A114(); /* Add page to temporary storage*/
      end

      if (converseVar.validationMsgNum != 0) /* Errors were found*/
        PGWREC.PGWSWC = "Y"; /* Force end of file*/
      end

    end

  end

  if (converseVar.validationMsgNum == 0 /* No errors were found*/
   && PGWREC.PGWIXM > 1)                /* and page was formatted*/
    if (PGWREC.PGWIXM <= PGWREC.PGWMPMAX) /* and page was formatted*/
      set VSUSER02 empty; /* initialize VSUSER02*/
      VSUSER02.XXXSTAT = "L"; /* indicate end of data*/
      while (PGWREC.PGWIXM <= PGWREC.PGWMPMAX) /* empty rows with 'L' status*/
  /* **************************Y2K OUT BEGIN***********************/
  /* MOVE VSUSER02.VS2GROUP TO PG0AW02.PG1GROUP(PGWIXM);*/
  /* **************************Y2K OUT END*************************/
  /* **************************Y2K IN BEGIN***********************/
        PG0AW02.VS2GROUP[PGWIXM] = VSUSER02.VS2GROUP;
  /* **************************Y2K IN END*************************/
        PGWREC.PGWIXM = PGWREC.PGWIXM + 1;
      end /* end of "WHILE" loop*/
    end /* end of "IF" statement*/
    PG0A114(); /* Add page to temporary storage*/
  end

  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    PG0A115(); /* Close the selected set cursor*/
  end

  if (converseVar.validationMsgNum == 0) /* No errors were found*/

    PGWREC.PGWTSP = 1; /* Initialize page number*/
    PGWREC.PGWSWR = "N"; /* Request for data completed*/

  end


end // end PG0A110

// Purge any temporary storage
Function PG0A111()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = PGWREC.PGWAPPL; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PG0AW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* temporaryary storage*/
                                  /* ; subroutine*/

  if (sysVar.errorCode != "00000000" /* Error was found*/
   || TA5REC.TA5RTNCD != 0)         

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PGWREC.PGWPRCSN = "111 "; /* Process number*/
    TA1REC.TA1PGMNM = PGWREC.PGWERLOC; /* Error location*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = PGWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Error diagnosis routine*/

  end

  PGWREC.PGWTSP = 0; /* Reset current page number*/
  PGWREC.TA5TSQIX = 0; /* Reset highest page number*/
  TA5REC.TA5TSQIX = 0; /* Reset highest page number*/

  set PG0AW02 empty; /* Initialize TSQ record*/
  move "L" to PG0AW02.XXXSTAT[1] for all;
                                   /* Initialize Status to Last-Line*/

end // end PG0A111

// Select set and open cursor
Function PG0A112()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set VSUSER02 empty; /* initialize*/
                                   /* VSUSER02(forecaster/scheduler)*/

  if (XP1REC.XGPCD != " " /* If GPC and TYPE code have valid*/
   && XP1REC.XSECOVFL != " ") /* values....*/
    VSUSER02.XGPCD = XP1REC.XGPCD;
                                 /* ;  Move GPC cd from map*/
    if (XP1REC.XSECOVFL == "F") /* IF forecasters selected*/
      VSUSER02.PG1FCTCD = "**"; /* Indicate forecasters selected*/
    else /* ELSE(schedulers selected)*/
      VSUSER02.PG1SC4CD = "**"; /* Indicate schedulers selected*/
    end /* End of "IF" statement*/
  else /* ELSE(Oops....ERROR..ERROR !!)*/
    return; /* goback*/
  end /* END of "IF" statement*/

  VSUSER02.PG1REGCD = PGWREC.PGWSVREG; /* indicate region code*/

  try
    call "VSUSER02" ("SS", SQLCA, VSUSER02) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/

  if (sysVar.errorCode == "00000000") /* If call successful*/
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/

      else

        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/

        converseLib.clearScreen();
         /* Clear screen before redisplay*/

      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      PGWREC.PGWPRCSN = "112 "; /* Process number*/
      TA1REC.TA1PGMNM = PGWREC.PGWERLOC; /* Error location*/
      TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
      TA1REC.TA1MAP = PGWREC.XXXMAPNM; /* Map name*/
      TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSUSER02"; /* Table view name*/
      TA1REC.TA1TBLKE = VSUSER02.VS2KEY; /* Table key*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/

      return; /* Return to previous process*/

    end
  else /* call to VSUSER02 unsuccessfull*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PGWREC.PGWPRCSN = "112 "; /* Process number*/
    TA1REC.TA1PGMNM = PGWREC.PGWERLOC; /* Error location*/
    TA1REC.TA1LOC = "SS CALL TO VSUSER02";
    TA1REC.TA1MAP = PGWREC.XXXMAPNM; /* Map name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Error diagnosis routine*/

    PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    return; /* Return to previous process*/
  end


end // end PG0A112

// Fetch next row and format
Function PG0A113()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  try
    call "VSUSER02" ("SN", SQLCA, VSUSER02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

    PGWREC.PGWSWC = "Y"; /* Indicate end of file*/

    return; /* Return to previous process*/

  end

  if (sysVar.errorCode == "00000000") /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/

      else

        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/

        converseLib.clearScreen();
         /* Clear screen before redisplay*/

      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      PGWREC.PGWPRCSN = "113 "; /* Process number*/
      TA1REC.TA1PGMNM = PGWREC.PGWERLOC; /* Error location*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = PGWREC.XXXMAPNM; /* Map name*/
      TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSUSER02"; /* Table view name*/

      try
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      end /* Error diagnosis*/

      PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/

      return; /* Return to previous process*/

    end

  else /* call to VSUSER02 no-good*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PGWREC.PGWPRCSN = "113 "; /* Process number*/
    TA1REC.TA1FUNC = "RETN"; /* return function*/
    TA1REC.TA1PGMNM = PGWREC.PGWERLOC; /* Error location*/
    TA1REC.TA1LOC = "SN CALL TO VSUSER02";
    TA1REC.TA1MAP = PGWREC.XXXMAPNM; /* Map name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* start over*/

  end

   /* *************************************************************/
   /* ***** IN ORDER TO ALLOW FOR EXCEPTION CONDITIONS THERE ******/
   /* ***** ARE ROWS ON THE DPRODG.VSUSER02 TABLE WHICH HAVE ******/
   /* ***** BLANKS FOR FORECASTER CODE AND SCHEDULER CODE.   ******/
   /* ***** THESE ROWS SHOULD NOT BE MAINTAINED BY THE USER. ******/
   /* ***** THIS APPLICATION WILL NOT ALLOW THESE ROWS TO BE ******/
   /* ***** ADDED, MAINTAINED, DELETED, OR INQUIRED UPON.    ******/
   /* *************************************************************/

  if (VSUSER02.PG1SC4CD == " " /* if row has two blank codes*/
   && VSUSER02.PG1FCTCD == " ") /* do not allow user to maintain it.*/

    /* --- skip this row.....don't show it on map !*/

  else /* ELSE( at least code not blank )*/
    if (PGWREC.PGWIXM == 1) /* IF this is 1st entry*/
      set PG0AW02 empty; /* INITIALIZE TSQ record first*/
      move "L" to PG0AW02.XXXSTAT[1] for all; /* Initialize status to 'last-line'*/
    end /* END of "IF" statement*/
  /* **********************Y2K OUT BEGIN************************/
  /* MOVE VSUSER02.VS2GROUP TO PG0AW02.PG1GROUP(PGWIXM);*/
  /* **********************Y2K OUT END**************************/
  /* **********************Y2K IN BEGIN************************/
    PG0AW02.VS2GROUP[PGWIXM] = VSUSER02.VS2GROUP;
  /* **********************Y2K IN END**************************/
    PGWREC.PGWIXM = PGWREC.PGWIXM + 1; /* Increment line index*/
  end


end // end PG0A113

// Add page to temporary storage
Function PG0A114()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PG0AW02.PGWLEN = PGWREC.PGWTSQSZ; /* Temporary storage length*/
  TA5REC.TA5APPID = PGWREC.PGWAPPL; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PG0AW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                    /* ;subroutine*/

  if (sysVar.errorCode != "00000000"
   || TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    PGWREC.PGWPRCSN = "114 "; /* Process number*/
    TA1REC.TA1PGMNM = PGWREC.PGWERLOC; /* Error location*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = PGWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end

  PGWREC.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/

  PGWREC.PGWIXM = 1; /* Reset display line number*/


end // end PG0A114

// Close selected set cursor
Function PG0A115()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VSUSER02" ("CS", SQLCA, VSUSER02) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   || sysVar.errorCode != "00000000")

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    PGWREC.PGWPRCSN = "115 "; /* Process number*/
    TA1REC.TA1PGMNM = PGWREC.PGWERLOC; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = PGWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSUSER02"; /* Table view name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Error diagnosis routine*/

    PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end


end // end PG0A115

// Format and display the map
Function PG0A120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set PG0AM001 alarm; /* Indicate sound alarm*/
  end

  if (converseVar.validationMsgNum == 0 /* No error message to display*/
   || PGWREC.PGWFIRST == " ")           /* or first time through*/
    if (PGWREC.PGWFIRST == " ") /* First time through*/

      if (COMMAREA.CAITEM > " ") /* Application data exists*/

        PG0AM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
        set PG0AM001.CAITEM modified; /* Set MDT on*/
        COMMAREA.CAITEM = " "; /* Clear application data*/

      end

    else

      set PG0AM001 initial; /* Clear map output area*/

    end

    PGWREC.PGWFIRST = "N"; /* turn 'first time through' OFF*/

    PG0AM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      PG0A121(); /* Format the data on the page*/
    end

    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      if (PGWREC.PGWNMO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PGWREC.PGWNMO);
      end /* Information message number*/
    end

  end


  PGWREC.PGWNMO = 0; /* Reset information message number*/

  PG0AM001.PG0AMPFC = "13:ADD";
                                   /* set pfkey literal field to add*/
  PG0AM001.PG0AMPF7 = "7:FRWD"; /* set pfkey literal field PF7*/
  PG0AM001.PG0AMPF8 = "8:BACK"; /* set pfkey literal field PF8*/

   /* *************************************************************/
   /* ***** Application modified 4/19/89 by Grant Gilray to  ******/
   /* ***** fix problem reported by Bob Beall.               ******/
   /* ***** Problem: Map of Application does not show Appl   ******/
   /* *****          Id or Map Id.                           ******/
   /* *************************************************************/
  PG0AM001.XXXMAPNM = PGWREC.XXXMAPNM; /* Move map name to Map*/
  PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Move Process name to map*/
   /* ******** END OF CODE ADDED BY GRANT GILRAY 4/19/89 **********/

  converse PG0AM001 ;

   /* ********** NEW CODE ADDED BY GRANT GILRAY 4/19/89 ***********/
  PGWREC.PGWPRCSN = " "; /* Clear out Error Process nbr*/
   /* ******** END OF CODE ADDED BY GRANT GILRAY 4/19/89 **********/

end // end PG0A120

// Format the selected data
Function PG0A121()
   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the plan sequence data in the map.*/
   /* ------------------------------------------------------------*/

  if (PGWREC.TA5TSQIX == 0) /* No data to display*/

    PGWREC.PGWPRCSN = "121 "; /* Process number*/
    PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/
    converseLib.validationFailed(21); /* Indicate no data to display*/

    PGWREC.PGWIXM = 1; /* Initialize Index*/
    while (PGWREC.PGWIXM <= PGWREC.PGWMPMAX)
      set PG0AM001.XXXSTAT[PGWIXM] skip, invisible; /* protect unused fields*/
      set PG0AM001.PG0AMCD[PGWIXM] skip, invisible;
      set PG0AM001.XXXUSER[PGWIXM] skip, invisible;
      set PG0AM001.XXXLSTNM[PGWIXM] skip, invisible;
      set PG0AM001.XXXFSTNM[PGWIXM] skip, invisible;
      set PG0AM001.XXXMDINT[PGWIXM] skip, invisible;
      set PG0AM001.PG1JOBTL[PGWIXM] skip, invisible;
      PGWREC.PGWIXM = PGWREC.PGWIXM + 1;
    end

    PG0AM001.XGPCD = XP1REC.XGPCD; /* move selection criteria*/
    PG0AM001.PG0AMTYP = XP1REC.XSECOVFL; /* to map*/
    PG0AM001.PG0AMREG = PGWREC.PGWSVREG; /* and region to*/

    PG0AM001.PG0AMPGN = 1; /* Current page number*/
    PG0AM001.PG0AMOFP = 1; /* Highest page nbr*/

    return; /* Return to previous process*/

  end

  if (PGWREC.PGWTSP != TA5REC.TA5TSQIX) /* Desired page not current*/
    PG0A122(); /* Obtain temporary storage page*/
  end

  PG0AM001.PG0AMPGN = PGWREC.PGWTSP; /* Current page number*/
  PG0AM001.PG0AMOFP = PGWREC.TA5TSQIX; /* Highest page nbr*/

  PG0AM001.XGPCD = XP1REC.XGPCD; /* move selection criteria*/
  PG0AM001.PG0AMTYP = XP1REC.XSECOVFL; /* to map*/
  PG0AM001.PG0AMREG = PGWREC.PGWSVREG; /* and region to*/

  PGWREC.PGWIXM = 1; /* Initialize line index*/

  while (PGWREC.PGWIXM <= PGWREC.PGWMPMAX) /* Until end of lines*/
  /* *********************Y2K OUT BEGIN******************/
  /* MOVE PG0AW02.PG1GROUP(PGWIXM) TO VSUSER02.VS2GROUP;*/
  /* *********************Y2K OUT END********************/
  /* *********************Y2K IN BEGIN******************/
    VSUSER02.VS2GROUP = PG0AW02.VS2GROUP[PGWIXM];
  /* *********************Y2K IN END********************/
    if (VSUSER02.XXXSTAT != "L") /* end of data marker*/
      PG0AM001.XXXSTAT[PGWIXM] = VSUSER02.XXXSTAT; /* move status*/
      if (PG0AM001.PG0AMTYP == "F") /* If forecaster*/
        PG0AM001.PG0AMCD[PGWIXM] = VSUSER02.PG1FCTCD; /* fore. code*/
      else
        PG0AM001.PG0AMCD[PGWIXM] = VSUSER02.PG1SC4CD; /* sched code*/
      end
      set PG0AM001.PG0AMCD[PGWIXM] skip; /* SEt field autoskip*/
      PG0AM001.XXXUSER[PGWIXM] = VSUSER02.XXXUSER; /* cics signon id*/
      PG0AM001.XXXLSTNM[PGWIXM] = VSUSER02.XXXLSTNM; /* move last name*/
      PG0AM001.XXXFSTNM[PGWIXM] = VSUSER02.XXXFSTNM; /* first name*/
      PG0AM001.XXXMDINT[PGWIXM] = VSUSER02.XXXMDINT; /* middle initial*/
      PG0AM001.PG1JOBTL[PGWIXM] = VSUSER02.PG1JOBTL; /* move job title*/
    else
      set PG0AM001.XXXSTAT[PGWIXM] skip, invisible; /* protect unused fields*/
      set PG0AM001.PG0AMCD[PGWIXM] skip, invisible;
      set PG0AM001.XXXUSER[PGWIXM] skip, invisible;
      set PG0AM001.XXXLSTNM[PGWIXM] skip, invisible;
      set PG0AM001.XXXFSTNM[PGWIXM] skip, invisible;
      set PG0AM001.XXXMDINT[PGWIXM] skip, invisible;
      set PG0AM001.PG1JOBTL[PGWIXM] skip, invisible;
    end
    PGWREC.PGWIXM = PGWREC.PGWIXM + 1; /* incriment line number*/
  end


end // end PG0A121

// Read temporary storage page
Function PG0A122()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PG0AW02.PGWLEN = PGWREC.PGWTSQSZ; /* Temporary storage length*/
  TA5REC.TA5APPID = PGWREC.PGWAPPL; /* Application identification*/
  TA5REC.TA5TSQIX = PGWREC.PGWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PG0AW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                                /* ;subroutine*/

  if (sysVar.errorCode != "00000000" /* call not-Okay*/
   || TA5REC.TA5RTNCD != 0)          /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    PGWREC.PGWPRCSN = "122 "; /* Process number*/
    TA1REC.TA1PGMNM = PGWREC.PGWERLOC; /* Error location*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = PGWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diagnosis routine*/

    PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* Exit to redisplay map*/

  end


end // end PG0A122

// Check attention identifier
Function PG0A130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PG0AM001 initial; /* Clear the map fields*/

    exit stack; /* Exit to redisplay map*/

  end

  if (PG0AM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PG0A111(); /* Purge any temporary storage*/

      COMMAREA.CATOAP = PG0AM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PG0AM001.CAITEM; /* Application data*/

      XSPG001(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    set PG0AM001.CATOAP cursor, modified, bold; /* Highlight*/

    PGWREC.PGWPRCSN = "130 "; /* Process number*/
    PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    PG0A111(); /* Purge any temporary storage*/

    XSPG001(); /* Exit to another application*/

    PGWREC.PGWPRCSN = "130 "; /* Process number*/
    PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf13) /* If 'ADD' mode requested*/
    PGWREC.PGWMAP = "2"; /* Indicate switch to 'ADD' mode*/
    set PG0AM001 initial; /* clear screen*/
    exit stack; /* GOTO flow section*/
  end /* END of "IF" statement*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf13) /* and PF13 was not pressed*/

    PGWREC.PGWPRCSN = "130 "; /* Process number*/
    PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    exit stack; /* Exit to redisplay map*/

  end


end // end PG0A130

// Reset highlighted fields
Function PG0A140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to defined intensity.*/
   /* ------------------------------------------------------------*/

  PGWREC.PGWIXM = 1; /* Initialize line index*/

  while (PGWREC.PGWIXM <= PGWREC.PGWMPMAX) /* Until end of lines*/

    if (PG0AW02.XXXSTAT[PGWIXM] != "L") /* if line has data*/
      set PG0AM001.XXXSTAT[PGWIXM] initialAttributes; /* Reset field*/
      set PG0AM001.PG0AMCD[PGWIXM] skip; /* Reset field*/
      set PG0AM001.XXXUSER[PGWIXM] initialAttributes; /* Reset field*/
      set PG0AM001.XXXLSTNM[PGWIXM] initialAttributes; /* Reset field*/
      set PG0AM001.XXXFSTNM[PGWIXM] initialAttributes; /* Reset field*/
      set PG0AM001.XXXMDINT[PGWIXM] initialAttributes; /* Reset field*/
      set PG0AM001.PG1JOBTL[PGWIXM] initialAttributes; /* Reset field*/
    else
      set PG0AM001.XXXSTAT[PGWIXM] skip, invisible;
      set PG0AM001.PG0AMCD[PGWIXM] skip, invisible;
      set PG0AM001.XXXUSER[PGWIXM] skip, invisible;
      set PG0AM001.XXXLSTNM[PGWIXM] skip, invisible;
      set PG0AM001.XXXFSTNM[PGWIXM] skip, invisible;
      set PG0AM001.XXXMDINT[PGWIXM] skip, invisible;
      set PG0AM001.PG1JOBTL[PGWIXM] skip, invisible;
    end

    PGWREC.PGWIXM = PGWREC.PGWIXM + 1; /* Increment line index*/

  end
   /* *************************************************************/
   /* SET AB0DM001.SY1SSTNM DEFINED;*/
   /* *************************************************************/

  set PG0AM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PG0AM001.CAITEM initialAttributes; /* Commarea application data*/


end // end PG0A140

// Verify the entered data
Function PG0A150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (PG0AM001.CAITEM > " ") /* Application data was entered*/

    set PG0AM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PGWREC.PGWPRCSN = "150 "; /* Process number*/
    PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/

  end

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    PG0A151(); /* Verify scroll request*/
  else
    PG0A152(); /* Verify selection criteria*/
    if (PGWREC.PGWSWR == "Y") /* If new selection criteria entered*/
      exit stack; /* Go back to start of appl*/
    else /* Else(selection criteria not changed)*/
      PGWREC.PGWIXM = PGWREC.PGWMPMAX; /* Initialize line index*/
      while (PGWREC.PGWIXM > 0) /* Until end of lines*/
        if (PG0AW02.XXXSTAT[PGWIXM] != "L")
          PG0A153(); /* Verify any changed data*/
        end
        PGWREC.PGWIXM = PGWREC.PGWIXM - 1; /* Decrement line number*/
      end
    end
  end

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end PG0A150

// Verify scroll request
Function PG0A151()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PGWREC.PGWTSP < 2)          /* and no previous pages*/

    PGWREC.PGWPRCSN = "151 "; /* Process number*/
    PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PGWREC.PGWTSP >= PGWREC.TA5TSQIX) /* and no more pages*/

    PGWREC.PGWPRCSN = "151 "; /* Process number*/
    PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end



end // end PG0A151

// Edit selection criteria
Function PG0A152()
   /* ============================================================*/
   /* ===== E D I T    S E L E C T I O N    C R I T E R I A  =====*/
   /* =====                                                  =====*/
   /* ===== Compare selection criteria on screen to data on  =====*/
   /* ===== working storatge record, if any has changed,     =====*/
   /* ===== validate all selection criteria fields and turn  =====*/
   /* ===== on switch which allows later processing to purge =====*/
   /* ===== temporary storage and re-load it with newly      =====*/
   /* ===== selected data.                                   =====*/
   /* ============================================================*/

  PGWREC.PGWSWR = "N"; /* initialize switch to 'OFF'*/
  XP1REC.XP1MNO = 0;

  if (PG0AM001.PG0AMTYP != XP1REC.XSECOVFL)
    PGWREC.PGWSWR = "Y"; /* Turn 'ON' switch to re-select*/
    if (PG0AM001.PG0AMTYP == "F"
     || PG0AM001.PG0AMTYP == "S")
      XP1REC.XSECOVFL = PG0AM001.PG0AMTYP;
    else
      XP1REC.XSECOVFL = " ";
      set PG0AM001.PG0AMTYP cursor, bold;
      XP1REC.XP1MNO = 1;
    end
  end


  if (PG0AM001.XGPCD != XP1REC.XGPCD)
    XP1REC.XGPCD = PG0AM001.XGPCD;
    PGWREC.PGWSWR = "Y"; /* Turn 'ON' switch to re-select*/
    XSAFXGP();
    if (XP1REC.XP1ERRFL == "1")
      XP1REC.XGPCD = " ";
      set PG0AM001.XGPCD cursor, bold;
      XP1REC.XP1MNO = 6;
    else
      if (XP1REC.XXXSTAT == "I")
        XP1REC.XGPCD = " ";
        set PG0AM001.XGPCD cursor, bold;
        XP1REC.XP1MNO = 8;
      else
        PG0AM001.XGPCD = XP1REC.XGPCD;
      end
    end
  end
  if (PG0AM001.PG0AMREG != PGWREC.PGWSVREG)
    PGWREC.PGWSVREG = PG0AM001.PG0AMREG;
    PGWREC.PGWSWR = "Y"; /* Turn 'ON' switch to re-select*/
    XSXDR01(); /* validate XDR code*/
    if (PG0AM001.PG0AMREG != "  ")
      if (XP1REC.XP1ERRFL == "1")
        PGWREC.PGWSVREG = " ";
        set PG0AM001.PG0AMREG cursor, bold;
        XP1REC.XP1MNO = 6;
      else
        if (XP1REC.XXXSTAT == "I")
          PGWREC.PGWSVREG = " ";
          set PG0AM001.PG0AMREG cursor, bold;
          XP1REC.XP1MNO = 8;
        else
          PG0AM001.PG0AMREG = PGWREC.PGWSVREG;
        end
      end
    end
  end

  converseLib.clearScreen();

  if (XP1REC.XP1MNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(XP1REC.XP1MNO);
  end


  if (converseVar.validationMsgNum == 0)
    if (XP1REC.XSECOVFL == "F")
      if (COMMAREA.CAILVL[1] == "Y" /* IF security says 'Forecasters'*/
       || COMMAREA.CAILVL[3] == "Y") /* |*/
        /* next sentence*/
      else /* ELSE(not forecasters)*/
        set PG0AM001.PG0AMTYP cursor, bold;
        converseLib.validationFailed(12);
      end
    else
      if (XP1REC.XSECOVFL == "S")
        if (COMMAREA.CAILVL[2] == "Y" /* IF securtiy says 'schedulers'*/
         || COMMAREA.CAILVL[4] == "Y") /* |*/
          /* next sentence*/
        else /* ELSE(not forecasters)*/
          set PG0AM001.PG0AMTYP cursor, bold;
          converseLib.validationFailed(12);
        end
      else
        set PG0AM001.PG0AMTYP cursor, bold;
        converseLib.validationFailed(12);
      end /* END of "IF" statement*/
    end /* END of "IF" statement*/

    if (XP1REC.XGPCD == "02") /* IF GPC '02' passed from MENU*/
      if (COMMAREA.CAILVL[1] == "Y"
       /* IF security says '02' okay*/
       || COMMAREA.CAILVL[2] == "Y") /* |*/
        /* next sentence*/
      else /* ELSE('02' not okay)*/
        set PG0AM001.XGPCD cursor, bold;
        converseLib.validationFailed(12);
      end /* END of "IF" statement*/
    else /* ELSE(GPC '02' not passed)*/
      if (XP1REC.XGPCD == "03") /* IF GPC '03' passed from MENU*/
        if (COMMAREA.CAILVL[3] == "Y" /* IF security says '03' okay*/
         || COMMAREA.CAILVL[4] == "Y") /* |*/
          /* next sentence*/
        else /* ELSE('03' not okay)*/
          set PG0AM001.XGPCD cursor, bold;
          converseLib.validationFailed(12);
        end /* END of "IF" statement*/
      else /* ELSE(GPC '03' not passed)*/
        set PG0AM001.XGPCD cursor, bold;
        converseLib.validationFailed(12);
      end /* END of "IF" statement*/
    end /* END of "IF" statement*/
  end /* END of "IF" statement*/


   /* ====================== END OF PROCESS ======================*/



end // end PG0A152

// Verify any changed data
Function PG0A153()
   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/

   /* *************************************************************/
   /* *****               edit job title here                ******/
   /* *************************************************************/

   /* job title is free form text and not required,no edit needed*/

   /* *************************************************************/
   /* *****             edit middle initial here             ******/
   /* *************************************************************/

   /* mid init is free form text and not required,no edit needed*/

   /* *************************************************************/
   /* *****               edit first name here               ******/
   /* *************************************************************/

   /* first name is free form text and not required,no edit needed*/

   /* *************************************************************/
   /* *****               edit last name here                ******/
   /* *************************************************************/

  if (PG0AM001.XXXLSTNM[PGWIXM] == " " /* if last name blank*/
   && PG0AM001.XXXSTAT[PGWIXM] != "D") /* delete row*/
    set PG0AM001.XXXLSTNM[PGWIXM] cursor, bold;
    converseLib.validationFailed(13); /* required field*/
  else
    /* next sentence*/
  end

   /* *************************************************************/
   /* *****              edit cics signon here               ******/
   /* *************************************************************/

  if (PG0AM001.XXXUSER[PGWIXM] != PG0AW02.XXXUSER[PGWIXM]
   && PG0AM001.XXXSTAT[PGWIXM] != "D") /* delete row*/
                                   /* ;     if signon ID changed*/
    if (PG0AM001.XXXUSER[PGWIXM] == " ") /* if last name blank*/
      set PG0AM001.XXXUSER[PGWIXM] cursor, bold;
      converseLib.validationFailed(13); /* required field*/
    else
      /* ------------------------------------------------------------*/
      /* ----- look up signon on vsam security table here       -----*/
      /* ------------------------------------------------------------*/
      PG0A154(); /* verify CICS signon ID*/

    end
  else
    /* next sentence*/
  end

   /* *************************************************************/
   /* *****              edit scheduler code here            ******/
   /* *************************************************************/

  if (PG0AM001.PG0AMCD[PGWIXM] == " " /* if sched/forcaster cd blank*/
   && PG0AM001.XXXSTAT[PGWIXM] != "D") /* delete row*/
    set PG0AM001.PG0AMCD[PGWIXM] cursor, bold;
    converseLib.validationFailed(13); /* required field*/
  else
    /* ------------------------------------------------------------*/
    /* ----- look up signon on vsam security table here       -----*/
    /* ------------------------------------------------------------*/
  end


  if (PG0AM001.XXXSTAT[PGWIXM] != PG0AW02.XXXSTAT[PGWIXM])
    if (PG0AM001.XXXSTAT[PGWIXM] != "A" /* active*/
     && PG0AM001.XXXSTAT[PGWIXM] != "I" /* inactive*/
     && PG0AM001.XXXSTAT[PGWIXM] != "D") /* delete row*/
      set PG0AM001.XXXSTAT[PGWIXM] cursor, bold; /* --error--*/
      converseLib.validationFailed(14); /* invalid status*/
    else /* else(valid status)*/
      /* next sentence*/
    end
    /* if scheduler, verify if ok to inactivate or delete*/
    if (converseVar.validationMsgNum == 0
     && PG0AM001.PG0AMTYP == "S") /* SCHEDULER*/
      if (PG0AM001.XXXSTAT[PGWIXM] == "I" /* INACTIVATE*/
       || PG0AM001.XXXSTAT[PGWIXM] == "D") /* DELETE*/
        PG0A155();
      end
    end
  else /* else(status code not changed)*/
    /* next sentence*/
  end

end // end PG0A153

// Verify Signon ID
Function PG0A154()


   /* **********************************************************/
   /* this process in invoked to read the user record*/
   /* **********************************************************/


   /* set up file key for application read*/

  MN2REC.MN1KEY = " "; /* clear key area*/
  MN2REC.MN1TYPE1 = "2"; /* set record type*/
  MN2REC.MN1USER = PG0AM001.XXXUSER[PGWIXM]; /* user field*/
  MN2REC.MN1TYPE2 = "2"; /* set record type*/
  MN2REC.MN1APPL = MN2REC.MN1USER; /* SET APPL  field in key*/


  try
    get MN1REC ;
  end


   /* the following statements check for a file error*/

  if (MN1REC is noRecordFound) /* not found condition*/
    converseLib.validationFailed(15); /* invalid signon*/
    set PG0AM001.XXXUSER[PGWIXM] cursor, modified, bold;
                                 /* ;   highlight error*/
  else /* else(not-not found)*/
    if (MN1REC is ioError) /* other error*/
      converseLib.validationFailed(15); /* other error*/
      set PG0AM001.XXXUSER[PGWIXM] cursor, modified, bold;
                                 /* ;    highlight error*/
    else /* else(return code okay)*/
                                 /* ;    highlight error*/
      PG0A156(); /* Check for duplicate Signon ID*/
                                 /* ;    highlight error*/
    end
  end



end // end PG0A154

// LOOK FOR ACTIVE STYLE RECORDS
Function PG0A155()
   /* ------------------------------------------------------------*/
   /* LOOK FOR ACTIVE STYLE RECORDS IN VCOLOR01*/
   /* ------------------------------------------------------------*/

  set SY2REC empty; /* INITIALIZE RECORD*/
  set SQLCA empty; /* INITIALIZE RECORD*/

   /* ***** MOVE KEY DATA INTO CALLED PARAMETERS *******/
  SY2REC.XGPCD = PG0AM001.XGPCD; /* GPC CODE*/
  SY2REC.PG1SC4CD = PG0AM001.PG0AMCD[PGWIXM]; /* SCHEDULER NO.*/


  try
    call "IO0130" ("S3", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
  end /* DECLARE AND OPEN*/

  PG0A157(); /* CHECK ERROR CODE*/


  try
    call "IO0130" ("N3", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
  end /* READ*/

  while (SQLCA.VAGen_SQLCODE != 100 /* MORE RECORDS TO PROCESS*/
   && converseVar.validationMsgNum == 0) /* AND NO ERROR*/

    PG0A157(); /* CHECK ERROR CODE*/

    if (SY2REC.SY2CEDT1 <= XX0XWDAT) /* FIND CURRENT CODE*/
      if (SY2REC.XLCCD1 == "10" /* ACTIVE CODE*/
       || SY2REC.XLCCD1 == "05") /* IN DEVELOPMENT*/
        converseLib.validationFailed(31);
      end
    else
      if (SY2REC.SY2CEDT2 <= XX0XWDAT)
        if (SY2REC.XLCCD2 == "10"
         || SY2REC.XLCCD2 == "05")
          converseLib.validationFailed(31);
        end
      else
        if (SY2REC.SY2CEDT3 <= XX0XWDAT)
          if (SY2REC.XLCCD3 == "10"
           || SY2REC.XLCCD3 == "05")
            converseLib.validationFailed(31);
          end
        else
          if (SY2REC.SY2CEDT4 <= XX0XWDAT)
            if (SY2REC.XLCCD4 == "10"
             || SY2REC.XLCCD4 == "05")
              converseLib.validationFailed(31);
            end
          end
        end
      end
    end

    try
      call "IO0130" ("N3", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
    end /* READ NEXT*/

  end

  if (converseVar.validationMsgNum != 0)
    set PG0AM001.XXXSTAT[PGWIXM] cursor, bold; /* ERROR IND*/
  end

  try
    call "IO0130" ("C3", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
  end /* CLOSE DB*/

  PG0A157(); /* CHECK ERROR CODE*/
end // end PG0A155

// Check For Duplicate SIGNON ID
Function PG0A156()
   /* ------------------------------------------------------------*/
   /* Select a single row based on keyed data, if return code*/
   /* okay, this is a duplicate entry....that is not OKAY !*/
   /* ------------------------------------------------------------*/

  set VSUSER02 empty; /* Initialize record*/

   /* ***** move data from map ******/
  VSUSER02.XGPCD = PG0AM001.XGPCD; /* MOVE GPC to VSUSER02*/

  VSUSER02.XXXUSER = PG0AM001.XXXUSER[PGWIXM]; /* signon to VSUSER02*/

  VSUSER02.PG1FCTCD = "**";
                                   /* Select all Forecasters*/
  VSUSER02.PG1SC4CD = "**"; /* and schedulers*/

  try
    call "VSUSER02" ("SA", SQLCA, VSUSER02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  if (sysVar.errorCode == "00000000") /* If call OKAY*/
    if (SQLCA.VAGen_SQLCODE == 100) /* If not found, OKAY not a duplicate*/

      /* ***** now make sure no duplicates on add screen ******/
      PGWREC.PGWIDX2 = PGWREC.PGWIXM - 1;
      while (PGWREC.PGWIDX2 >= 1)
        if (PG0AM001.XXXUSER[PGWIXM] == PG0AM001.XXXUSER[PGWIDX2])
          set PG0AM001.XXXUSER[PGWIXM] cursor, bold;
          converseLib.validationFailed(20); /* Duplicates not allowed*/
        end
        PGWREC.PGWIDX2 = PGWREC.PGWIDX2 - 1;
      end

    else
      if (SQLCA.VAGen_SQLCODE == 0) /* DB2 error ( any error )*/
        set PG0AM001.XXXUSER[PGWIXM] cursor, bold;
        converseLib.validationFailed(20); /* Duplicates not allowed*/
      else /* ELSE(other DB2 error)*/

        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        PGWREC.PGWPRCSN = "156 "; /* Process number*/
        TA1REC.TA1FUNC = "RETN"; /* Return function*/
        TA1REC.TA1PGMNM = PGWREC.PGWERLOC; /* Error location*/
        TA1REC.TA1LOC = "UPDATE A SELECTED TABLE ROW";
        TA1REC.TA1MAP = PGWREC.XXXMAPNM; /* Map name*/
        TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
        TA1REC.TA1TBLVU = "VSUSER02"; /* Table view name*/

        try
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        end /* Error*/

        converseLib.validationFailed(10); /* Indicate error occured*/
        PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/

        return; /* Return to previous process*/

      end
    end
  else

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PGWREC.PGWPRCSN = "156 "; /* Process number*/
    TA1REC.TA1FUNC = "RETN"; /* Return function*/
    TA1REC.TA1PGMNM = PGWREC.PGWERLOC; /* Error location*/
    TA1REC.TA1LOC = "UPDATE A SELECTED TABLE ROW";
    TA1REC.TA1MAP = PGWREC.XXXMAPNM; /* Map name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diagnosis*/

    converseLib.validationFailed(10); /* Indicate error occured*/
    PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/

    return; /* Return to previous process*/

  end



end // end PG0A156

// ERROR HANDLING FOR PG0A155
Function PG0A157()
   /* ------------------------------------------------------------*/
   /* ERROR HANDLING FOR PG0A155*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* IF CALL OK*/
    if (SQLCA.VAGen_SQLCODE != 0 /* DB2 ERROR*/
     && SQLCA.VAGen_SQLCODE != 100)

      TA1REC.TA1TYPE = "DB2 "; /* TYPE OF ERROR*/
      PGWREC.PGWPRCSN = "155 "; /* PROCESS NUMBER*/
      TA1REC.TA1FUNC = "RETN"; /* SET FUNCTION TO 'RETURN'*/
      TA1REC.TA1PGMNM = PGWREC.PGWERLOC; /* ERROR LOCATION*/
      TA1REC.TA1LOC = "LOOK FOR ACTIVE STYLE RECS ";
      TA1REC.TA1MAP = PGWREC.XXXMAPNM; /* MAP NAME*/
      TA1REC.TA1DBASE = "DPROD   "; /* DATA BASE NAME*/
      TA1REC.TA1TBLVU = "VCOLOR01"; /* TABLE VIEW NAME*/
      TA1REC.TA1TBLKE = SY2REC.SY2KEY; /* MOVE TBL KEY TO ERRDIAG*/

      try
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      end /* ERROR DIAGNOSIS*/

      converseLib.validationFailed(10); /* INDICATE ERROR OCCURED*/
      PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* PROCESS NAME*/

      exit stack;

    end
  else
    TA1REC.TA1TYPE = "APPL"; /* TYPE OF ERROR*/
    PGWREC.PGWPRCSN = "155 "; /* Process number*/
    TA1REC.TA1FUNC = "RETN"; /* SET FUNCTION TO 'RETURN'*/
    TA1REC.TA1PGMNM = PGWREC.PGWERLOC; /* ERROR LOCATION*/
    TA1REC.TA1LOC = "CALL TO IO0130";
    TA1REC.TA1MAP = PGWREC.XXXMAPNM; /* MAP NAME*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* ERROR DIAGNOSIS*/

    converseLib.validationFailed(10); /* INDICATE ERROR OCCURED*/
    PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* PROCESS NAME*/

    exit stack;

  end

end // end PG0A157

// Process valid input request
Function PG0A160()
   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    PGWREC.PGWTSP = PGWREC.PGWTSP - 1; /* Decrement page number*/
    return; /* Return to previous process*/
  end

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    PGWREC.PGWTSP = PGWREC.PGWTSP + 1; /* Increment page number*/
    return; /* Return to previous process*/
  end

  if (converseVar.validationMsgNum == 0) /* IF no ERRORS found*/
                                 /* ;*/
    PGWREC.PGWIXM = 1; /* Initialize index to 1*/
    PGWREC.PGWUFL = "N"; /* Initialize Update Flag to "NO"*/

    while (PGWREC.PGWIXM <= PGWREC.PGWMPMAX)
            /* LOOP thru entire screen*/
      if (PG0AW02.XXXSTAT[PGWIXM] != "L") /* IF line has valid data*/
        /* ***** IF delete asked for ******/
        if (PG0AM001.XXXSTAT[PGWIXM] == "D") /* If DELETE asked for*/
          PG0A163();
        else
          /* ***** if any fields were changed *************************/
          if (PG0AM001.XXXSTAT[PGWIXM] != PG0AW02.XXXSTAT[PGWIXM]
           || PG0AM001.XXXUSER[PGWIXM] != PG0AW02.XXXUSER[PGWIXM]
           || PG0AM001.XXXLSTNM[PGWIXM] != PG0AW02.XXXLSTNM[PGWIXM]
           || PG0AM001.XXXFSTNM[PGWIXM] != PG0AW02.XXXFSTNM[PGWIXM]
           || PG0AM001.XXXMDINT[PGWIXM] != PG0AW02.XXXMDINT[PGWIXM]
           || PG0AM001.PG1JOBTL[PGWIXM] != PG0AW02.PG1JOBTL[PGWIXM])

            PGWREC.PGWUFL = "Y"; /* Indicate TSQ update needed*/
            PG0A161(); /* update DB2 table*/

  /* ********************Y2K OUT BEGIN*************/
  /* MOVE VSUSER02.VS2GROUP TO PG0AW02.PG1GROUP(PGWIXM);*/
  /* ********************Y2K OUT END***************/
  /* ********************Y2K IN BEGIN*************/
            PG0AW02.VS2GROUP[PGWIXM] = VSUSER02.VS2GROUP;
  /* ********************Y2K IN END***************/
                                  /* ;        Move data to temp storage*/
                                  /* ;        page*/

          end /* End of "IF" statement*/

        end /* End of "IF" statement*/

      end /* End of "IF" statement*/

      PGWREC.PGWIXM = PGWREC.PGWIXM + 1; /* Incriment index up by 1*/

    end /* End of "WHILE" loop*/

    if (PGWREC.PGWUFL != "N") /* if TSQ page needs updating*/
      PG0A162(); /* update TSQ page*/
    end /* End of "IF" statement*/

  end /* End of "IF" statement*/

end // end PG0A160

// Update DPRODG.VSUSER01 tbl
Function PG0A161()
   /* ------------------------------------------------------------*/
   /* Update a single row in DB2*/
   /* ------------------------------------------------------------*/

  set VSUSER02 empty; /* Initialize record*/
  set SQLCA empty; /* Initialize record*/

   /* ***** move key data from TSQ record ******/
  VSUSER02.VS2KEY = PG0AW02.PG1KEY[PGWIXM]; /* Move key to rec*/
  VSUSER02.ZZZCHGCT = PG0AW02.ZZZCHGCT[PGWIXM];

   /* ***** get system date and time & move to VSUSER02 ***********/
  XX0XS01(); /* get system date and time*/
  VSUSER02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Move data*/
  VSUSER02.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* ***** move data from map ******/
  VSUSER02.XXXUSER = PG0AM001.XXXUSER[PGWIXM];
  VSUSER02.XXXFSTNM = PG0AM001.XXXFSTNM[PGWIXM];
  VSUSER02.XXXMDINT = PG0AM001.XXXMDINT[PGWIXM];
  VSUSER02.XXXLSTNM = PG0AM001.XXXLSTNM[PGWIXM];
  VSUSER02.PG1JOBTL = PG0AM001.PG1JOBTL[PGWIXM];
  VSUSER02.PG-GLBL-INCL-FL = " ";
  VSUSER02.XXXSTAT = PG0AM001.XXXSTAT[PGWIXM];
  VSUSER02.PG1REGCD = PG0AM001.PG0AMREG;

  try
    call "VSUSER02" ("U ", SQLCA, VSUSER02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  if (sysVar.errorCode == "00000000") /* If call to VSUSER02 okay*/
    if (SQLCA.VAGen_SQLCODE != 0) /* DB2 error ( any error )*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      PGWREC.PGWPRCSN = "161 "; /* Process number*/
      TA1REC.TA1FUNC = "RETN"; /* set function to 'RETURN'*/
      TA1REC.TA1PGMNM = PGWREC.PGWERLOC; /* Error location*/
      TA1REC.TA1LOC = "UPDATE A SELECTED TABLE ROW";
      TA1REC.TA1MAP = PGWREC.XXXMAPNM; /* Map name*/
      TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSUSER02"; /* Table view name*/
      TA1REC.TA1TBLKE = VSUSER02.VS2KEY; /* move tbl key to errdiag*/

      try
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      end /* Error diagnosis*/

      converseLib.validationFailed(10); /* Indicate error occured*/
      PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/

      return; /* Return to previous process*/

    end
  else
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PGWREC.PGWPRCSN = "161 "; /* Process number*/
    TA1REC.TA1FUNC = "RETN"; /* set function to 'RETURN'*/
    TA1REC.TA1PGMNM = PGWREC.PGWERLOC; /* Error location*/
    TA1REC.TA1LOC = "UPDATE CALL TO VSUSER02";
    TA1REC.TA1MAP = PGWREC.XXXMAPNM; /* Map name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diagnosis*/

    converseLib.validationFailed(10); /* Indicate error occured*/
    PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/

    return; /* Return to previous process*/
  end



end // end PG0A161

// Update TSQ page in place
Function PG0A162()
   /* ------------------------------------------------------------*/
   /* replace the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  PG0AW02.PGWLEN = PGWREC.PGWTSQSZ; /* Temporary storage length*/
  TA5REC.TA5APPID = PGWREC.PGWAPPL; /* Application identification*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  TA5REC.TA5TSQIX = PGWREC.PGWTSP; /* TSQ page number to replace*/

  try
    call "TA0050" (PG0AW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                    /* ;            subroutine*/

  if (sysVar.errorCode != "00000000"
   || TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    PGWREC.PGWPRCSN = "162 "; /* Process number*/
    TA1REC.TA1PGMNM = PGWREC.PGWERLOC; /* Error location*/
    TA1REC.TA1LOC = "REPLACE PAGE TO TEMP STORAGE";
    TA1REC.TA1MAP = PGWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Error diagnosis routine*/

    PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/
    converseLib.validationFailed(16); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end



end // end PG0A162

// DELETE a row from VSUSER01
Function PG0A163()
   /* ------------------------------------------------------------*/
   /* DELETE a single row in DB2*/
   /* ------------------------------------------------------------*/

  set VSUSER02 empty; /* Initialize record*/
  set SQLCA empty; /* Initialize record*/

   /* ***** move key data from TSQ record ******/
  VSUSER02.VS2KEY = PG0AW02.PG1KEY[PGWIXM]; /* Move key to rec*/
  VSUSER02.ZZZCHGCT = PG0AW02.ZZZCHGCT[PGWIXM];


  try
    call "VSUSER02" ("D ", SQLCA, VSUSER02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  if (sysVar.errorCode == "00000000") /* If call to VSUSER02 okay*/
    if (SQLCA.VAGen_SQLCODE != 0) /* DB2 error ( any error )*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      PGWREC.PGWPRCSN = "163 "; /* Process number*/
      TA1REC.TA1FUNC = "RETN"; /* set function to 'RETURN'*/
      TA1REC.TA1PGMNM = PGWREC.PGWERLOC; /* Error location*/
      TA1REC.TA1LOC = "DELETE A SELECTED TABLE ROW";
      TA1REC.TA1MAP = PGWREC.XXXMAPNM; /* Map name*/
      TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSUSER02"; /* Table view name*/
      TA1REC.TA1TBLKE = VSUSER02.VS2KEY; /* move tbl key to errdiag*/

      try
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      end /* Error diagnosis*/

      converseLib.validationFailed(10); /* Indicate error occured*/
      PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/

      return; /* Return to previous process*/

    else /* Return code OKAY, Row deleted*/
      PGWREC.PGWSWR = "Y"; /* RE-SELECT rows on DB*/
    end
  else
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PGWREC.PGWPRCSN = "163 "; /* Process number*/
    TA1REC.TA1FUNC = "RETN"; /* set function to 'RETURN'*/
    TA1REC.TA1PGMNM = PGWREC.PGWERLOC; /* Error location*/
    TA1REC.TA1LOC = "UPDATE CALL TO VSUSER02";
    TA1REC.TA1MAP = PGWREC.XXXMAPNM; /* Map name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diagnosis*/

    converseLib.validationFailed(10); /* Indicate error occured*/
    PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/

    return; /* Return to previous process*/
  end



end // end PG0A163

// Add Entries Function
Function PG0A200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PG0A220(); /* Format and display the map*/

  PG0A230(); /* Check attention identifier*/

  PG0A240(); /* Reset fields to normal intensity*/

  PG0A250(); /* Verify the entered data*/

  PG0A260(); /* Process valid input request*/


end // end PG0A200

// Format and display the map
Function PG0A220()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set PG0AM001 alarm; /* Indicate sound alarm*/
  end

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    PG0AM001.XGPCD = XP1REC.XGPCD; /* move selection criteria*/
    PG0AM001.PG0AMTYP = XP1REC.XSECOVFL; /* to map*/
    PG0AM001.PG0AMREG = PGWREC.PGWSVREG; /* region to*/

    PG0AM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      if (PGWREC.PGWNMO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PGWREC.PGWNMO);
      end /* Information message number*/
    end

    PGWREC.PGWIXM = 1; /* Initialize index to 1*/
    PGWREC.PGWIDX5 = 0; /* Initialize index to 0*/

    while (PGWREC.PGWIXM <= PGWREC.PGWMPMAX) /* LOOP thru entire map*/

      if (PG0AM001.XXXSTAT[PGWIXM] != " ") /* Is status not blank line used*/
        set PG0AM001.XXXSTAT[PGWIXM] skip; /* protect field*/
        set PG0AM001.PG0AMCD[PGWIXM] skip; /* protect field*/
        set PG0AM001.XXXUSER[PGWIXM] skip; /* protect field*/
        set PG0AM001.XXXLSTNM[PGWIXM] skip; /* protect field*/
        set PG0AM001.XXXFSTNM[PGWIXM] skip; /* protect field*/
        set PG0AM001.XXXMDINT[PGWIXM] skip; /* protect field*/
        set PG0AM001.PG1JOBTL[PGWIXM] skip; /* protect field*/

        PGWREC.PGWIDX5 = PGWREC.PGWIXM; /* Set last line used*/

      end

      PGWREC.PGWIXM = PGWREC.PGWIXM + 1; /* Incriment index*/

    end

    PGWREC.PGWIDX5 = PGWREC.PGWIDX5 + 1;

  end

  PGWREC.PGWNMO = 0; /* Reset information message number*/

  PG0AM001.PG0AMPFC = "14:MAINTAIN";
                                   /* set pfkey literal field to add*/
  PG0AM001.PG0AMPF7 = " "; /* No scrolling on add screen*/
  PG0AM001.PG0AMPF8 = " "; /* No Scrolling on Add Screen*/

  if (converseVar.validationMsgNum == 0) /* IF no ERRORS*/
    set PG0AM001.XXXSTAT[PGWIDX5] cursor;
                                   /* put cursor in correct place*/
  end /* END of "IF" statement*/

   /* *************************************************************/
   /* ***** Application modified 4/19/89 by Grant Gilray to  ******/
   /* ***** fix problem reported by Bob Beall.               ******/
   /* ***** Problem: Map of Application does not show Appl   ******/
   /* *****          Id or Map Id.                           ******/
   /* *************************************************************/
  PG0AM001.XXXMAPNM = PGWREC.XXXMAPNM; /* Move map name to Map*/
  PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Move Process name to map*/
   /* ******** END OF CODE ADDED BY GRANT GILRAY 4/19/89 **********/

  converse PG0AM001 ;

   /* ********** NEW CODE ADDED BY GRANT GILRAY 4/19/89 ***********/
  PGWREC.PGWPRCSN = " "; /* Clear out Error Process nbr*/
   /* ******** END OF CODE ADDED BY GRANT GILRAY 4/19/89 **********/

end // end PG0A220

// Check attention identifier
Function PG0A230()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set PG0AM001 initial; /* Clear the map fields*/

    exit stack; /* Exit to redisplay map*/

  end

  if (PG0AM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PG0A111(); /* Purge any temporary storage*/

      COMMAREA.CATOAP = PG0AM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = PG0AM001.CAITEM; /* Application data*/

      XSPG001(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    set PG0AM001.CATOAP cursor, modified, bold; /* Highlight*/

    PGWREC.PGWPRCSN = "230 "; /* Process number*/
    PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    PG0A111(); /* Purge any temporary storage*/

    XSPG001(); /* Exit to another application*/

    PGWREC.PGWPRCSN = "230 "; /* Process number*/
    PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf14) /* If 'maintain' mode requested*/
    PGWREC.PGWMAP = "1"; /* Indicate switch to 'maintain' mode*/
    PGWREC.PGWSWR = "Y"; /* Turn on re-select switch*/
    set PG0AM001 initial; /* CLEAR Map*/
    exit stack; /* GOTO flow section*/
  end /* END of "IF" statement*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf14) /* and PF13 was not pressed*/

    PGWREC.PGWPRCSN = "230 "; /* Process number*/
    PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    exit stack; /* Exit to redisplay map*/

  end


end // end PG0A230

// Reset highlighted fields
Function PG0A240()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to defined intensity.*/
   /* ------------------------------------------------------------*/

  PGWREC.PGWIXM = PGWREC.PGWIDX5; /* Initialize line index*/

  while (PGWREC.PGWIXM <= PGWREC.PGWMPMAX) /* Until end of lines*/

    set PG0AM001.XXXSTAT[PGWIXM] initialAttributes; /* Reset field*/
    set PG0AM001.PG0AMCD[PGWIXM] initialAttributes; /* reset field*/
    set PG0AM001.XXXUSER[PGWIXM] initialAttributes; /* Reset field*/
    set PG0AM001.XXXLSTNM[PGWIXM] initialAttributes; /* Reset field*/
    set PG0AM001.XXXFSTNM[PGWIXM] initialAttributes; /* Reset field*/
    set PG0AM001.XXXMDINT[PGWIXM] initialAttributes; /* Reset field*/
    set PG0AM001.PG1JOBTL[PGWIXM] initialAttributes; /* Reset field*/

    PGWREC.PGWIXM = PGWREC.PGWIXM + 1; /* Increment line index*/

  end
   /* *************************************************************/
   /* SET AB0DM001.SY1SSTNM DEFINED;*/
   /* *************************************************************/

  set PG0AM001.CATOAP initialAttributes; /* Commarea TO application*/
  set PG0AM001.CAITEM initialAttributes; /* Commarea application data*/


end // end PG0A240

// Verify the entered data
Function PG0A250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (PG0AM001.CAITEM > " ") /* Application data was entered*/

    set PG0AM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    PGWREC.PGWPRCSN = "250 "; /* Process number*/
    PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/

  end

  PG0A251(); /* remove any blank lines*/

  PG0A252(); /* Verify selection criteria*/

  PGWREC.PGWIXM = PGWREC.PGWMPMAX; /* Initialize line index*/
  while (PGWREC.PGWIXM >= PGWREC.PGWIDX5) /* Until end of lines*/
    PG0A253(); /* Verify any changed data*/
    PGWREC.PGWIXM = PGWREC.PGWIXM - 1; /* Decrement line number*/
  end /* END of "WHILE" statement*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end PG0A250

// Remove any Blank Lines From Mp
Function PG0A251()
   /* *************************************************************/
   /* ***** R E M O V E    A N Y    B L A N K    L I N E S   ******/
   /* *****                 F R O M    M A P                 ******/
   /* *****                                                  ******/
   /* ***** This process will work its way thru the map and  ******/
   /* ***** Remove any embedded blank input lines.           ******/
   /* *************************************************************/

  PGWREC.PGWIDX2 = PGWREC.PGWMPMAX; /* Set First blank line*/
                                 /* ;        Pointer to max value*/
                                 /* ;*/
  PGWREC.PGWIDX3 = PGWREC.PGWIDX5; /* Set Current line pointer*/
                                 /* ;        to first line*/
                                 /* ;*/
  while (PGWREC.PGWIDX3 < PGWREC.PGWMPMAX) /* Loop Thru Entire Map*/
                                 /* ;*/
    if (PG0AM001.XXXSTAT[PGWIDX3] == " "  /* IF Current Line Blank*/
     && PG0AM001.PG0AMCD[PGWIDX3] == " "  /* |*/
     && PG0AM001.XXXUSER[PGWIDX3] == " "  /* |*/
     && PG0AM001.XXXLSTNM[PGWIDX3] == " " /* |*/
     && PG0AM001.XXXFSTNM[PGWIDX3] == " " /* |*/
     && PG0AM001.XXXMDINT[PGWIDX3] == " " /* |*/
     && PG0AM001.PG1JOBTL[PGWIDX3] == " ") /* |*/
                                 /* ;*/
      PGWREC.PGWIDX2 = PGWREC.PGWIDX3 + 1; /* Start looking For Non-Blanks*/
                                 /* ;            After blank line.*/
      while (PGWREC.PGWIDX2 <= PGWMPMAX) /* Loop Thru Rest Of MAP*/
                                 /* ;*/
        if (PG0AM001.XXXSTAT[PGWIDX2] != " "  /* IF New Line Not Blank*/
         || PG0AM001.PG0AMCD[PGWIDX2] != " "  /* |*/
         || PG0AM001.XXXUSER[PGWIDX2] != " "  /* |*/
         || PG0AM001.XXXLSTNM[PGWIDX2] != " " /* |*/
         || PG0AM001.XXXFSTNM[PGWIDX2] != " " /* |*/
         || PG0AM001.XXXMDINT[PGWIDX2] != " " /* |*/
         || PG0AM001.PG1JOBTL[PGWIDX2] != " ") /* |*/
                                 /* ;*/
          /* ***** move values from New Line to Current Line ******/
          PG0AM001.XXXSTAT[PGWIDX3] = PG0AM001.XXXSTAT[PGWIDX2];
          PG0AM001.PG0AMCD[PGWIDX3] = PG0AM001.PG0AMCD[PGWIDX2];
          PG0AM001.XXXUSER[PGWIDX3] = PG0AM001.XXXUSER[PGWIDX2];
          PG0AM001.XXXLSTNM[PGWIDX3] = PG0AM001.XXXLSTNM[PGWIDX2];
          PG0AM001.XXXFSTNM[PGWIDX3] = PG0AM001.XXXFSTNM[PGWIDX2];
          PG0AM001.XXXMDINT[PGWIDX3] = PG0AM001.XXXMDINT[PGWIDX2];
          PG0AM001.PG1JOBTL[PGWIDX3] = PG0AM001.PG1JOBTL[PGWIDX2];
                                 /* ;*/
          /* ***** Now Move Spaces To New Line Fields ******/
          PG0AM001.XXXSTAT[PGWIDX2] = " ";
          PG0AM001.PG0AMCD[PGWIDX2] = " ";
          PG0AM001.XXXUSER[PGWIDX2] = " ";
          PG0AM001.XXXLSTNM[PGWIDX2] = " ";
          PG0AM001.XXXFSTNM[PGWIDX2] = " ";
          PG0AM001.XXXMDINT[PGWIDX2] = " ";
          PG0AM001.PG1JOBTL[PGWIDX2] = " ";
                                 /* ;*/
          PGWREC.PGWIDX2 = 99; /* Force End To Loop*/
                                 /* ;*/
        else /* Else (Line Is Not Blank)*/
                                 /* ;*/
          PGWREC.PGWIDX2 = PGWREC.PGWIDX2 + 1; /* Incriment Line Index*/
                                 /* ;*/
          if (PGWREC.PGWIDX2 > PGWREC.PGWMPMAX) /* IF NO DATA LINE FOUND*/
            return; /* Force END to LOOP*/
          end /* END Of "IF" Statement*/
                                 /* ;*/
        end /* END of "IF" Statement*/
                                 /* ;*/
      end /* END of "WHILE" Loop*/
                                 /* ;*/
    end /* END of "IF" Statement*/
                                 /* ;*/
    PGWREC.PGWIDX3 = PGWREC.PGWIDX3 + 1; /* Incriment Index By 1*/
                                 /* ;*/
  end /* END of "WHILE" Loop*/
end // end PG0A251

// Edit selection criteria
Function PG0A252()
   /* ============================================================*/
   /* ===== E D I T    S E L E C T I O N    C R I T E R I A  =====*/
   /* =====                                                  =====*/
   /* ===== Compare selection criteria on screen to data on  =====*/
   /* ===== working storatge record, if any has changed,     =====*/
   /* ===== validate all selection criteria fields and turn  =====*/
   /* ===== on switch which allows later processing to purge =====*/
   /* ===== temporary storage and re-load it with newly      =====*/
   /* ===== selected data.                                   =====*/
   /* ============================================================*/

  PGWREC.PGWSWR = "N"; /* initialize switch to 'OFF'*/
  XP1REC.XP1MNO = 0;


  if (PG0AM001.PG0AMTYP != XP1REC.XSECOVFL)
    PGWREC.PGWSWR = "Y"; /* Turn 'ON' switch to re-select*/
    if (PG0AM001.PG0AMTYP == "F"
     || PG0AM001.PG0AMTYP == "S")
      XP1REC.XSECOVFL = PG0AM001.PG0AMTYP;
    else
      XP1REC.XSECOVFL = " ";
      set PG0AM001.PG0AMTYP cursor, bold;
      XP1REC.XP1MNO = 1;
    end
  end


  if (PG0AM001.XGPCD != XP1REC.XGPCD)
    XP1REC.XGPCD = PG0AM001.XGPCD;
    PGWREC.PGWSWR = "Y"; /* Turn 'ON' switch to re-select*/
    XSAFXGP();
    if (XP1REC.XP1ERRFL == "1")
      XP1REC.XGPCD = " ";
      set PG0AM001.XGPCD cursor, bold;
      XP1REC.XP1MNO = 6;
    else
      if (XP1REC.XXXSTAT == "I")
        XP1REC.XGPCD = " ";
        set PG0AM001.XGPCD cursor, bold;
        XP1REC.XP1MNO = 8;
      else
        PG0AM001.XGPCD = XP1REC.XGPCD;
      end
    end
  end
  if (PG0AM001.PG0AMREG != PGWREC.PGWSVREG)
    PGWREC.PGWSVREG = PG0AM001.PG0AMREG;
    /* MOVE 'Y' TO PGWREC.PGWSWR;     /* Turn 'ON' switch to re-select*/
    XSXDR01();
     /* IF PG0AM001.PG0AMREG NE '  ';*/
    if (XP1REC.XP1ERRFL == "1")
      PGWREC.PGWSVREG = " ";
      set PG0AM001.PG0AMREG cursor, bold;
      XP1REC.XP1MNO = 6;
    else
      if (XP1REC.XXXSTAT == "I")
        PGWREC.PGWSVREG = " ";
        set PG0AM001.PG0AMREG cursor, bold;
        XP1REC.XP1MNO = 8;
      else
        PG0AM001.PG0AMREG = PGWREC.PGWSVREG;
      end
    end
    /* END;*/
  end
  converseLib.clearScreen();

  if (XP1REC.XP1MNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(XP1REC.XP1MNO);
  end


  if (converseVar.validationMsgNum == 0)
    if (XP1REC.XSECOVFL == "F")
      if (COMMAREA.CAILVL[1] == "Y" /* IF security says 'Forecasters'*/
       || COMMAREA.CAILVL[3] == "Y") /* |*/
        /* next sentence*/
      else /* ELSE(not forecasters)*/
        set PG0AM001.PG0AMTYP cursor, bold;
        converseLib.validationFailed(12);
      end
    else
      if (XP1REC.XSECOVFL == "S")
        if (COMMAREA.CAILVL[2] == "Y" /* IF securtiy says 'schedulers'*/
         || COMMAREA.CAILVL[4] == "Y") /* |*/
          /* next sentence*/
        else /* ELSE(not forecasters)*/
          set PG0AM001.PG0AMTYP cursor, bold;
          converseLib.validationFailed(12);
        end
      else
        set PG0AM001.PG0AMTYP cursor, bold;
        converseLib.validationFailed(12);
      end /* END of "IF" statement*/
    end /* END of "IF" statement*/

    if (XP1REC.XGPCD == "02") /* IF GPC '02' passed from MENU*/
      if (COMMAREA.CAILVL[1] == "Y"
       /* IF security says '02' okay*/
       || COMMAREA.CAILVL[2] == "Y") /* |*/
        /* next sentence*/
      else /* ELSE('02' not okay)*/
        set PG0AM001.XGPCD cursor, bold;
        converseLib.validationFailed(12);
      end /* END of "IF" statement*/
    else /* ELSE(GPC '02' not passed)*/
      if (XP1REC.XGPCD == "03") /* IF GPC '03' passed from MENU*/
        if (COMMAREA.CAILVL[3] == "Y" /* IF security says '03' okay*/
         || COMMAREA.CAILVL[4] == "Y") /* |*/
          /* next sentence*/
        else /* ELSE('03' not okay)*/
          set PG0AM001.XGPCD cursor, bold;
          converseLib.validationFailed(12);
        end /* END of "IF" statement*/
      else /* ELSE(GPC '03' not passed)*/
        set PG0AM001.XGPCD cursor, bold;
        converseLib.validationFailed(12);
      end /* END of "IF" statement*/
    end /* END of "IF" statement*/
  end /* END of "IF" statement*/

  if (converseVar.validationMsgNum == 0
   && PGWREC.PGWSWR == "Y")
    set PG0AM001 initial;
  end

   /* ====================== END OF PROCESS ======================*/



end // end PG0A252

// Verify All Entered Data
Function PG0A253()
   /* ------------------------------------------------------------*/
   /* Edit the entry if any of the fields on a line has data in*/
   /* it.*/
   /* ------------------------------------------------------------*/

  if (PG0AM001.XXXSTAT[PGWIXM] != " "
   || PG0AM001.PG0AMCD[PGWIXM] != " "
   || PG0AM001.XXXUSER[PGWIXM] != " "
   || PG0AM001.XXXLSTNM[PGWIXM] != " "
   || PG0AM001.XXXFSTNM[PGWIXM] != " "
   || PG0AM001.XXXMDINT[PGWIXM] != " "
   || PG0AM001.PG1JOBTL[PGWIXM] != " ")
    /* *************************************************************/
    /* *****               edit job title here                ******/
    /* *************************************************************/

     /* job title is free form text and not required,no edit needed*/

    /* *************************************************************/
    /* *****             edit middle initial here             ******/
    /* *************************************************************/

     /* mid init is free form text and not required,no edit needed*/

    /* *************************************************************/
    /* *****               edit first name here               ******/
    /* *************************************************************/

    /* first name is free form text and not required,no edit needed*/

    /* *************************************************************/
    /* *****               edit last name here                ******/
    /* *************************************************************/

    if (PG0AM001.XXXLSTNM[PGWIXM] == " ") /* if last name blank*/
      set PG0AM001.XXXLSTNM[PGWIXM] cursor, bold;
      converseLib.validationFailed(13); /* required field*/
    else
      /* next sentence*/
    end


    /* *************************************************************/
    /* *****              edit cics signon here               ******/
    /* *************************************************************/

    if (PG0AM001.XXXUSER[PGWIXM] == " ") /* if last name blank*/
      set PG0AM001.XXXUSER[PGWIXM] cursor, bold;
      converseLib.validationFailed(13); /* required field*/
    else
      /* ------------------------------------------------------------*/
      /* ----- Validate Signon here                             -----*/
      /* ------------------------------------------------------------*/
      PG0A254(); /* verify CICS signon ID*/

    end


    /* *************************************************************/
    /* *****              edit scheduler code here            ******/
    /* *************************************************************/

    if (PG0AM001.PG0AMCD[PGWIXM] == " ") /* if sched/forcaster cd blank*/
      set PG0AM001.PG0AMCD[PGWIXM] cursor, bold;
      converseLib.validationFailed(13); /* required field*/
    else
      PG0A255(); /* check if duplicate entry*/
    end


    /* *************************************************************/
    /* ***** edit status field, only an 'A' is valid for 'add ******/
    /* *************************************************************/

    if (PG0AM001.XXXSTAT[PGWIXM] != "A") /* active*/
      set PG0AM001.XXXSTAT[PGWIXM] cursor, bold; /* --error--*/
      converseLib.validationFailed(19); /* invalid status*/
    else /* else(valid status)*/
      /* next sentence*/
    end
  end

end // end PG0A253

// Verify Signon Id
Function PG0A254()


   /* **********************************************************/
   /* this process in invoked to read the user record*/
   /* **********************************************************/


   /* set up file key for application read*/

  MN2REC.MN1KEY = " "; /* clear key area*/
  MN2REC.MN1TYPE1 = "2"; /* set record type*/
  MN2REC.MN1USER = PG0AM001.XXXUSER[PGWIXM]; /* user field*/
  MN2REC.MN1TYPE2 = "2"; /* set record type*/
  MN2REC.MN1APPL = MN2REC.MN1USER; /* SET APPL  field in key*/



  try
    get MN1REC ;
  end

   /* the following statements check for a file error*/

  if (MN1REC is noRecordFound) /* not found condition*/
    converseLib.validationFailed(15); /* invalid signon*/
    set PG0AM001.XXXUSER[PGWIXM] cursor, modified, bold;
                                 /* ;   highlight error*/
  else /* else(not-not found)*/
    if (MN1REC is ioError) /* other error*/
      converseLib.validationFailed(15); /* other error*/
      set PG0AM001.XXXUSER[PGWIXM] cursor, modified, bold;
                                 /* ;    highlight error*/
    else /* else(return code okay)*/

      PG0A256(); /* validate for duplicate signon id*/

    end
  end



end // end PG0A254

// Check for duplicate entry
Function PG0A255()
   /* ------------------------------------------------------------*/
   /* Select a single row based on keyed data, if return code*/
   /* okay, this is a duplicate entry....that is not OKAY !*/
   /* ------------------------------------------------------------*/

  set VSUSER02 empty; /* Initialize record*/

   /* ***** move data from map ******/
  VSUSER02.XGPCD = PG0AM001.XGPCD; /* MOVe GPC to VSUSER02*/

  if (PG0AM001.PG0AMTYP == "F") /* IF a FORECASTER*/
    VSUSER02.PG1FCTCD = PG0AM001.PG0AMCD[PGWIXM]; /* Set FORECASTER code*/
  else /* ELSE(a SCHEDULER)*/
    VSUSER02.PG1SC4CD = PG0AM001.PG0AMCD[PGWIXM];
                                   /* Set SCHEDULER code*/
  end
                                   /* END of "IF" statement*/

  try
    call "VSUSER02" ("S ", SQLCA, VSUSER02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  if (sysVar.errorCode == "00000000") /* If call OKAY*/
    if (SQLCA.VAGen_SQLCODE == 100) /* If not found, OKAY not a duplicate*/

      /* ***** now make sure no duplicates on add screen ******/
      PGWREC.PGWIDX2 = PGWREC.PGWIXM - 1;
      while (PGWREC.PGWIDX2 >= PGWREC.PGWIDX5)
        if (PG0AM001.PG0AMCD[PGWIXM] == PG0AM001.PG0AMCD[PGWIDX2])
          set PG0AM001.PG0AMCD[PGWIXM] cursor, bold;
          converseLib.validationFailed(20); /* Duplicates not allowed*/
        end
        PGWREC.PGWIDX2 = PGWREC.PGWIDX2 - 1;
      end

    else
      if (SQLCA.VAGen_SQLCODE == 0) /* DB2 error ( any error )*/
        set PG0AM001.PG0AMCD[PGWIXM] cursor, bold;
        converseLib.validationFailed(20); /* Duplicates not allowed*/
      else /* ELSE(other DB2 error)*/

        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        PGWREC.PGWPRCSN = "255 "; /* Process number*/
        TA1REC.TA1FUNC = "RETN"; /* Return function*/
        TA1REC.TA1PGMNM = PGWREC.PGWERLOC; /* Error location*/
        TA1REC.TA1LOC = "UPDATE A SELECTED TABLE ROW";
        TA1REC.TA1MAP = PGWREC.XXXMAPNM; /* Map name*/
        TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
        TA1REC.TA1TBLVU = "VSUSER02"; /* Table view name*/

        try
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        end /* Error*/

        converseLib.validationFailed(10); /* Indicate error occured*/
        PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/

        return; /* Return to previous process*/

      end
    end
  else

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PGWREC.PGWPRCSN = "255 "; /* Process number*/
    TA1REC.TA1FUNC = "RETN"; /* Return function*/
    TA1REC.TA1PGMNM = PGWREC.PGWERLOC; /* Error location*/
    TA1REC.TA1LOC = "UPDATE A SELECTED TABLE ROW";
    TA1REC.TA1MAP = PGWREC.XXXMAPNM; /* Map name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diagnosis*/

    converseLib.validationFailed(10); /* Indicate error occured*/
    PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/

    return; /* Return to previous process*/

  end



end // end PG0A255

// Check for duplicate SIGNON ID
Function PG0A256()
   /* ------------------------------------------------------------*/
   /* Select a single row based on keyed data, if return code*/
   /* okay, this is a duplicate entry....that is not OKAY !*/
   /* ------------------------------------------------------------*/

  set VSUSER02 empty; /* Initialize record*/

   /* ***** move data from map ******/
  VSUSER02.XGPCD = PG0AM001.XGPCD; /* MOVE GPC to VSUSER02*/

  VSUSER02.XXXUSER = PG0AM001.XXXUSER[PGWIXM]; /* Move signon to VSUSER02*/

  VSUSER02.PG1FCTCD = "**";
                                   /* Select all Forecasters*/
  VSUSER02.PG1SC4CD = "**"; /* and schedulers*/

  try
    call "VSUSER02" ("SA", SQLCA, VSUSER02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  if (sysVar.errorCode == "00000000") /* If call OKAY*/
    if (SQLCA.VAGen_SQLCODE == 100) /* If not found, OKAY not a duplicate*/

      /* ***** now make sure no duplicates on add screen ******/
      PGWREC.PGWIDX2 = PGWREC.PGWIXM - 1;
      while (PGWREC.PGWIDX2 >= PGWREC.PGWIDX5)
        if (PG0AM001.XXXUSER[PGWIXM] == PG0AM001.XXXUSER[PGWIDX2])
          set PG0AM001.XXXUSER[PGWIXM] cursor, bold;
          converseLib.validationFailed(20); /* Duplicates not allowed*/
        end
        PGWREC.PGWIDX2 = PGWREC.PGWIDX2 - 1;
      end

    else
      if (SQLCA.VAGen_SQLCODE == 0) /* DB2 error ( any error )*/
        set PG0AM001.XXXUSER[PGWIXM] cursor, bold;
        converseLib.validationFailed(20); /* Duplicates not allowed*/
      else /* ELSE(other DB2 error)*/

        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        PGWREC.PGWPRCSN = "256 "; /* Process number*/
        TA1REC.TA1FUNC = "RETN"; /* Return function*/
        TA1REC.TA1PGMNM = PGWREC.PGWERLOC; /* Error location*/
        TA1REC.TA1LOC = "UPDATE A SELECTED TABLE ROW";
        TA1REC.TA1MAP = PGWREC.XXXMAPNM; /* Map name*/
        TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
        TA1REC.TA1TBLVU = "VSUSER02"; /* Table view name*/

        try
          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
        end /* Error*/

        converseLib.validationFailed(10); /* Indicate error occured*/
        PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/

        return; /* Return to previous process*/

      end
    end
  else

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PGWREC.PGWPRCSN = "256 "; /* Process number*/
    TA1REC.TA1FUNC = "RETN"; /* Return function*/
    TA1REC.TA1PGMNM = PGWREC.PGWERLOC; /* Error location*/
    TA1REC.TA1LOC = "UPDATE A SELECTED TABLE ROW";
    TA1REC.TA1MAP = PGWREC.XXXMAPNM; /* Map name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diagnosis*/

    converseLib.validationFailed(10); /* Indicate error occured*/
    PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/

    return; /* Return to previous process*/

  end



end // end PG0A256

// Process valid input request
Function PG0A260()
   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* IF no ERRORS found*/
                                 /* ;*/
    PGWREC.PGWIXM = PGWREC.PGWIDX5; /* Initialize index to start*/
    PGWREC.PGWUFL = "N"; /* Initialize Update Flag to "NO"*/

    while (PGWREC.PGWIXM <= PGWREC.PGWMPMAX)
            /* LOOP thru entire screen*/
      /* ***** if any fields were added ***************************/
      if (PG0AM001.XXXSTAT[PGWIXM] != " "
       || PG0AM001.PG0AMCD[PGWIXM] != " "
       || PG0AM001.XXXUSER[PGWIXM] != " "
       || PG0AM001.XXXLSTNM[PGWIXM] != " "
       || PG0AM001.XXXFSTNM[PGWIXM] != " "
       || PG0AM001.XXXMDINT[PGWIXM] != " "
       || PG0AM001.PG1JOBTL[PGWIXM] != " ")

        PG0A261();

      end /* End of "IF" statement*/

      PGWREC.PGWIXM = PGWREC.PGWIXM + 1; /* Incriment index up by 1*/
    end /* End of "WHILE" statement*/

  end /* End of "IF" statement*/

end // end PG0A260

// Insert Into DPRODG.VSUSER01
Function PG0A261()
   /* ------------------------------------------------------------*/
   /* Insert a single row in DB2*/
   /* ------------------------------------------------------------*/

  set VSUSER02 empty; /* Initialize record*/

   /* ***** move data from map ***********8*****/
  VSUSER02.XGPCD = PG0AM001.XGPCD;
  if (PG0AM001.PG0AMTYP == "F")
    VSUSER02.PG1FCTCD = PG0AM001.PG0AMCD[PGWIXM];
    VSUSER02.PG1SC4CD = "  ";
  else
    VSUSER02.PG1SC4CD = PG0AM001.PG0AMCD[PGWIXM];
    VSUSER02.PG1FCTCD = "  ";
  end
  VSUSER02.XXXUSER = PG0AM001.XXXUSER[PGWIXM];
  VSUSER02.XXXFSTNM = PG0AM001.XXXFSTNM[PGWIXM];
  VSUSER02.XXXMDINT = PG0AM001.XXXMDINT[PGWIXM];
  VSUSER02.XXXLSTNM = PG0AM001.XXXLSTNM[PGWIXM];
  VSUSER02.PG1JOBTL = PG0AM001.PG1JOBTL[PGWIXM];
  VSUSER02.XXXSTAT = PG0AM001.XXXSTAT[PGWIXM];
  VSUSER02.PG1REGCD = PG0AM001.PG0AMREG;
  VSUSER02.ZZZCHGCT = 0;

   /* ***** get system date & time for insert ******/
  XX0XS01();
  VSUSER02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Move date*/
  VSUSER02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Move time*/

   /* Initialize PG-GLBL-INCL-FL to spaces*/

  VSUSER02.PG-GLBL-INCL-FL = " ";

  try
    call "VSUSER02" ("A ", SQLCA, VSUSER02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE != 0) /* DB2 error ( any error )*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      PGWREC.PGWPRCSN = "261 "; /* Process number*/
      TA1REC.TA1FUNC = "RETN"; /* return function*/
      TA1REC.TA1PGMNM = PGWREC.PGWERLOC; /* Error location*/
      TA1REC.TA1LOC = "UPDATE A SELECTED TABLE ROW";
      TA1REC.TA1MAP = PGWREC.XXXMAPNM; /* Map name*/
      TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSUSER02"; /* Table view name*/
      TA1REC.TA1TBLKE = VSUSER02.VS2KEY; /* move tbl key to errdiag*/

      try
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      end /* Error diagnosis*/

      converseLib.validationFailed(10); /* Indicate error occured*/
      PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/

      return; /* Return to previous process*/

    end
  else
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    PGWREC.PGWPRCSN = "261 "; /* Process number*/
    TA1REC.TA1FUNC = "RETN"; /* return function*/
    TA1REC.TA1PGMNM = PGWREC.PGWERLOC; /* Error location*/
    TA1REC.TA1LOC = "UPDATE A SELECTED TABLE ROW";
    TA1REC.TA1MAP = PGWREC.XXXMAPNM; /* Map name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diagnosis*/

    converseLib.validationFailed(10); /* Indicate error occured*/
    PG0AM001.XXXPRCNM = PGWREC.PGWERLOC; /* Process name*/

    return; /* Return to previous process*/
  end



end // end PG0A261

// General Product Class
Function XSAFXGP()



              /* General Product Classs Retreival*/



  XP1REC.XP1ERRFL = " "; /* set error flag to found status*/

  XP1REC.XXXSTAT = " ";

  if (XP1REC.XGPCD == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "GENERAL PRODUCT CLASS";

    while (XX0XW02.XX0XWEND == "N")

      XPXGP01(); /* perform pop up window routine*/

    end

    if (XX0XW02.XX0XWPIX > 0)
      XP1REC.XGPCD = XGPTBL.XGPCD[XX0XWPIX];
    else
      XP1REC.XP1ERRFL = "1";
    end
  else
    if (XP1REC.XGPCD in XGPTBL.XGPCD)
      XP1REC.XGPCD = XGPTBL.XGPCD[sysVar.arrayIndex];
    else
      XP1REC.XP1ERRFL = "1";
    end
  end


   /* *********  end of general product class **************/
end // end XSAFXGP

// Exit to another application
Function XSPG001()
   /* ------------------------------------------------------------*/
   /* Set the application to be invoked for PF1 or PF4.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/

    COMMAREA.CATOAP = "GD00"; /* Indicate Goal Documentation*/

  else
    if (converseVar.eventKey is pf4) /* PF4 was pressed*/

      COMMAREA.CATOAP = "MN0M"; /* Indicate Master Menu*/

    else

      /* ------------------------------------------------------------*/
       /* Set the application to be invoked for PF3 if in main menu.*/
      /* ------------------------------------------------------------*/

      if (converseVar.eventKey is pf3) /* PF3 was pressed*/
        COMMAREA.CATOAP = "FY0M"; /* Indicate Master Menu*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Save the application user area in the COMMAREA.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CAUSERA = " "; /* Clear user area*/

  if (COMMAREA.CATOSYS == "PG") /* Transfer within same system*/
    COMMAREA.CAUSERA = XP1REC.XP1GROUP;
  else
    /* NEXT SENTENCE*/
  end

   /* ------------------------------------------------------------*/
   /* Transfer control to the specified application.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CAFROMAP = COMMAREA.CACURRAP; /* From application*/
  XSEXIT(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* If transfer failed, return an error to the calling process.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CAITEM = " "; /* Clear any application data*/

  if (COMMAREA.CASECRC == 3 /* Application not found*/
   || COMMAREA.CASECRC == 4) /* or transfer not allowed*/

    converseLib.validationFailed(6); /* Indicate not allowed*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/

  end


end // end XSPG001

// General Product Class
Function XSXDR01()



              /* Region code Retreival*/



  XP1REC.XP1ERRFL = " "; /* set error flag to found status*/

  XP1REC.XXXSTAT = " ";

  if (PGWREC.PGWSVREG == "?")
    XPXX001(); /* init for pop up window*/
    XX0XW02.XX0XWHDR = "REGION CODE          ";

    while (XX0XW02.XX0XWEND == "N")

      XPXDR01(); /* perform pop up window routine*/

    end

    if (XX0XW02.XX0XWPIX > 0)
      PGWREC.PGWSVREG = XDRTBL.XDR-PROD-REG-CD[XX0XWPIX];
    else
      XP1REC.XP1ERRFL = "1";
    end
  else
    if (PGWREC.PGWSVREG in XDRTBL.XDR-PROD-REG-CD)
      PGWREC.PGWSVREG = XDRTBL.XDR-PROD-REG-CD[sysVar.arrayIndex];
    else
      XP1REC.XP1ERRFL = "1";
    end
  end


   /* *********  end of general product class **************/
end // end XSXDR01

//*** RECORD=PG0AW01 ****
// ************************************************************
// ***                    P G 0 A W 0 1                     ***
// ***                                                      ***
// *** Working storage record for PG0A Application.         ***
// ***                                                      ***
// ***                                                      ***
// *** MAINTENANCE LOG:                                     ***
// ***                                                      ***
// ***   DATE    NAME      COMMENT                          ***
// *** --------  --------  -------------------------------- ***
// *** 01/18/89  G Gilray  Initial Record Creation          ***
// *** 02/26/97  IDICKI    Add region code                  ***
// ************************************************************
// ***********************
Record PG0AW01 type basicRecord
  5 PG0AW1GP PG0AW1GP ; 
    10 PG0AWERR PG0AWERR ; 
      15 PG0AW1L1 PG0AW1L1 ; 
      15 XGPCD XGPCD ; 
      15 PG0AW1L2 PG0AW1L2 ; 
      15 PG1SC4CD PG1SC4CD ; 
      15 PG0AW1L3 PG0AW1L3 ; 
      15 PG1FCTCD PG1FCTCD ; 
      15 PG0AW1L4 PG0AW1L4 ; 
      15 PG1PRRCD PG1PRRCD ; 
      15 * char(9) ; 
end // end PG0AW01

//*** RECORD=PG0AW02 ****
// Temporary storage record for TSXX - Transportation Prototype
// ************************************************************
// ***                                                      ***
// *** Maintenance Log :                                    ***
// ***                                                      ***
// ***   DATE    NAME      COMMENT                          ***
// *** --------  --------  -------------------------------- ***
// *** 02/28/97  IDICKI    Add region code value            ***
// *** 01/20/98  TTHAN1    FIX LENGTH ERROR                 ***
// ***                                                      ***
// ***                                                      ***
// ***                                                      ***
// ************************************************************
// ***********************
Record PG0AW02 type basicRecord
  10 PGWLEN PGWLEN ; 
  10 VS2GROUP VS2GROUP [16] ; 
    15 PG1KEY PG1KEY ; 
      20 XGPCD XGPCD ; 
      20 PG1SC4CD PG1SC4CD ; 
      20 PG1FCTCD PG1FCTCD ; 
    15 XXXUSER XXXUSER ; 
    15 XXXFSTNM XXXFSTNM ; 
    15 XXXMDINT XXXMDINT ; 
    15 XXXLSTNM XXXLSTNM ; 
    15 PG1JOBTL PG1JOBTL ; 
    15 PG-GLBL-INCL-FL PG-GLBL-INCL-FL ; 
    15 XXXSTAT XXXSTAT ; 
    15 PG1PRRCD PG1PRRCD ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 ZZZCHGCT ZZZCHGCT ; 
end // end PG0AW02

//*** RECORD=PGWREC ****
// Working storage for TSXX - Transportation Prototype
// **********************
Record PGWREC type basicRecord
  5 PGWGRP PGWGRP ; 
    10 * char(30) ; 
      15 PGWNMO PGWNMO ; 
      15 PGWIXM PGWIXM ; 
      15 PGWIX2 PGWIX2 ; 
      15 PGWIDX1 PGWIDX1 ; 
      15 PGWIDX2 PGWIDX2 ; 
      15 PGWIDX3 PGWIDX3 ; 
      15 PGWIDX4 PGWIDX4 ; 
      15 PGWIDX5 PGWIDX5 ; 
      15 PGWSWC PGWSWC ; 
      15 PGWSWR PGWSWR ; 
      15 PGWTSP PGWTSP ; 
      15 PGWFIRST PGWFIRST ; 
      15 TA5TSQIX TA5TSQIX ; 
      15 PGWMAP PGWMAP ; 
    10 PGWERLOC PGWERLOC ; 
      15 PGWAPPL PGWAPPL ; 
      15 PGWPRCSN PGWPRCSN ; 
    10 XXXMAPNM XXXMAPNM ; 
    10 PGWMPMAX PGWMPMAX ; 
    10 PGWUFL PGWUFL ; 
    10 PGWADDFL PGWADDFL ; 
    10 PGWTSQSZ PGWTSQSZ ; 
    10 PGWUSERA PGWUSERA ; 
    10 PGWSVGPC PGWSVGPC ; 
    10 PGWSVTYP PGWSVTYP ; 
    10 PGWSVREG PGWSVREG ; 
end // end PGWREC

// group level
DataItem PG0AW1GP char(52)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "GPC:" literal
DataItem PG0AW1L1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ", sched-cd:" literal
DataItem PG0AW1L2 char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ", Fcst-cd:" literal
DataItem PG0AW1L3 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ", Regn-cd:" literal
DataItem PG0AW1L4 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key to table for error rpt
DataItem PG0AWERR char(52)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Add function flag
DataItem PGWADDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Application ID
DataItem PGWAPPL char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Location of error
DataItem PGWERLOC char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time thru flag
DataItem PGWFIRST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AFWREC working storage group
DataItem PGWGRP char(657)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// misc working storage index 1
DataItem PGWIDX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// misc working storage index 2
DataItem PGWIDX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// misc working storage index 3
DataItem PGWIDX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// misc working storage index 4
DataItem PGWIDX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// misc working storage index 5
DataItem PGWIDX5 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Second index for map fields
DataItem PGWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PGWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length
DataItem PGWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map to be displayed
DataItem PGWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max number of occurs on map
DataItem PGWMPMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Information message number
DataItem PGWNMO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Process number for error
DataItem PGWPRCSN char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// User area
DataItem PGWSVGPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// User area
DataItem PGWSVREG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// User area
DataItem PGWSVTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem PGWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PGWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current temporary storage page
DataItem PGWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TSQ page length(Calculated)
DataItem PGWTSQSZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Update TSQ flag
DataItem PGWUFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// User area
DataItem PGWUSERA char(600)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

