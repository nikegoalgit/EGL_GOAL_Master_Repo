package pg0f;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import ff.common.*;
import fg.common.*;
import fk.common.*;
import fy.common.*;
import ku.common.*;
import pa.common.*;
import pg.common.*;
import pw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=PG0F ****
// This application will be used to insert and update fields
// on the Style Development Regional Override table.  The
// screen will reside on the domestic MVS region.  A nightly
// batch job will take the overrides entered from PG0F and
// apply them to to the Style Development table on the
// European region.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 06/27/94   JALLE1   Created (Cloned from PG0B).
// 02-10-95   LREIN    Set all override flags to 'y' on 1st chg
// 11-20-96   CWHITE   fix code for YR 2000
// 03-26-97   CWHITE   fix sesnyr to put out century
// 10-14-97   CWHITE   remove edit fm closeout year
// 11-04-97   CWHITE   fix output of prop date in PG0F640,670
// 11-04-97   CWHITE   fix output of prop date in PG0F640,670
// 22-01-98   bmusti   fix the problem in pg0f520 to not allow
//                     to change fcst flag to 'n' .
// 03-04-98   cwhite   fix 1st prop dt in 620&640
// *********************
Program PG0F type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FBKREC FBKREC; // record
  FF2REC FF2REC; // record
  FF9REC FF9REC; // record
  FFFREC FFFREC; // record
  FY1REC FY1REC; // record
  PG0FW00 PG0FW00; // record
  PG0FW01 PG0FW01; // record
  PG0FW02 PG0FW02; // record
  PG2REC PG2REC; // record
  PG4REC PG4REC; // record
  PGXREC PGXREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VSDREG01 VSDREG01; // record
  VSOAUD01 VSOAUD01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPRTBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XCNTBL; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use XOGTBL {deleteAfterUse = yes}; // table
  use XFCTBL {deleteAfterUse = yes}; // table
  use XSPTBL; // table
  use PG0FM.PG0FM001,  // forms
      PG0FM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPG002: XPPG002();
     /* ------------------------------------------------------------*/
     /* Initialise working storage and display areas*/
     /* ------------------------------------------------------------*/

    set PG0FM001 initial; /* map area*/
    set PG4REC empty; /* style devel record*/
    set PG0FW00 empty; /* working storage*/
    set PG0FW01 empty; /* display working storage*/
    set PG0FW02 empty; /* "before" image of map fields*/
    set SQLCA empty; /* commarea*/
    set TAEREC empty; /* error diagnosis information*/
    set TA1REC empty; /* error diagnosis parameters*/
    set XX0XW01 empty; /* date/time subroutine  area*/

    PG0FW00.PG0FWRDS = "N"; /* no request for data*/
    PG0FW00.PG0FWMCS = "N"; /* format map switch*/

    if (PGXREC.PG4STNBR > " ") /* development code in commarea*/

      PG0FW01.PG4STNBR = PGXREC.PG4STNBR; /* move to display  ws*/
      PG0FM001.PG4STNBR = PGXREC.PG4STNBR; /* move to map*/
      PG0FW00.PG0FWMCS = "Y"; /* format map switch*/
      PG0FW00.PG0FWRDS = "Y"; /* request data*/

    end


     /* ------------------------------------------------------------*/
     /* Initialise working storage and display areas*/
     /* ------------------------------------------------------------*/

    goto PG0F001; /* converse main process*/


    PG0F001: PG0F001();
     /* ------------------------------------------------------------*/
     /* flow to converse the main process*/
     /* ------------------------------------------------------------*/
    goto PG0F001; /* converse the main process*/
  end // end main
end // end PG0F

// style development maint/inqy
Function PG0F001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) obtain data to display.*/
   /* 2) display appropriate map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PG0F100(); /* obtain data to display*/

  PG0F200(); /* format and display map*/

  PG0F300(); /* Check attention identifier*/

  PG0F400(); /* Reset fields to normal intensity*/

  PG0F500(); /* Verify the entered data*/

  PG0F600(); /* Process valid input request*/


end // end PG0F001

// obtain data to display
Function PG0F100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PG0FW00.PG0FWRDS != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* Save the key information in map display storage area.*/
   /* ------------------------------------------------------------*/

  set PG0FW01 empty;
  set PG0FW02 empty;

  PG0FW01.PG4STNBR = PG0FM001.PG4STNBR; /* development code*/
  PGXREC.PG4STNBR = PG0FM001.PG4STNBR; /* development code*/


   /* ------------------------------------------------------------*/
   /* Select the DPRODG.VSYDVL01 record.*/
   /* ------------------------------------------------------------*/

  set PG4REC empty;
  PG4REC.PG4STNBR = PG0FW01.PG4STNBR; /* development code*/

  PG0F110(); /* Select DPRODG.VSYDVL01*/


   /* ------------------------------------------------------------*/
   /* Select the DPRODG.VSDREG01 record.*/
   /* ------------------------------------------------------------*/

  set VSDREG01 empty;
  VSDREG01.PG-STYDV-NBR = PG0FW01.PG4STNBR; /* Dev code*/
  VSDREG01.XDR-PROD-REG-CD = "02"; /* Region code*/

  PG0F130(); /* Select DPRODG.VSDREG01*/


   /* ------------------------------------------------------------*/
   /* if found, save the data in working storage area*/
   /* ------------------------------------------------------------*/

  if (PG0FW00.PG0FW-VSYDVL-DATA-FOUND-SW == "Y" /* Vsydvl01 data found*/
   || PG0FW00.PG0FW-VSDREG-DATA-FOUND-SW == "Y") /* Vsdreg01 data found*/

    PG0F120(); /* save data in display working storage*/
    PG0FW00.PG0FW-DATA-WAS-FOUND-SW = "Y";

    if (PG0FW00.PG0FW-VSYDVL-DATA-FOUND-SW != "Y" /* No vsydvl01 data*/
     && PGXREC.XXXMSGNO != 32)                   

      PGXREC.XXXMODID = "100"; /* Module identification*/
      converseLib.validationFailed(497); /* Only European overrides are displayed*/
    end
  else

    /* ------------------------------------------------------------*/
     /* Otherwise, indicate that no data was found to display*/
    /* ------------------------------------------------------------*/

    PG0FW00.PG0FW-DATA-WAS-FOUND-SW = "N";
    PGXREC.XXXMODID = "100"; /* Module identification*/
    set PG0FM001.PG4STNBR cursor, bold; /* highlight, place cursor*/
    converseLib.validationFailed(18); /* Indicate no data found*/
  end


   /* ------------------------------------------------------------*/
   /* If no error was found, indicate request for data complete.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/
    PG0FW00.PG0FWRDS = "N"; /* Request for data switch*/
  end


end // end PG0F100

// get style devel table row
Function PG0F110()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4390" ("S ", SQLCA, PG4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PG0FW00.PG0FW-VSYDVL-DATA-FOUND-SW = "Y";
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      set PG4REC empty;
      PG0FW00.PG0FW-VSYDVL-DATA-FOUND-SW = "N";
      return; /* Return to previous process*/
    end
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PG0FW00.PG0FW-VSYDVL-DATA-FOUND-SW = "N";

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "110"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYDVL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PG4REC.PG4STNBR; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PG0FW00.PG0FWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end PG0F110

// move to disp working storage
Function PG0F120()
   /* ------------------------------------------------------------*/
   /* Save data to display storage.*/
   /* ------------------------------------------------------------*/

  PG0FW01.PG4STNBR = PG0FM001.PG4STNBR; /* development code*/
  PG0FW01.XPLCD = PG4REC.XPLCD; /* product line*/
  PG0FW01.XPCCD = PG4REC.XPCCD; /* category code*/
  PG0FW01.XGACD = PG4REC.XGACD; /* gender age*/
  PG0FW01.XSUCD = PG4REC.XSUCD; /* silhouette code*/
  PG0FW01.XSPCD = PG4REC.XSPCD; /* sports activity code*/
  PG0FW01.XDMCD = PG4REC.XDMCD; /* dimension code*/
  PG0FW01.XOGCD = PG4REC.XOGCD; /* optional group code*/
  PG0FW01.XDVCD = PG4REC.XDVCD; /* division code*/
  PG0FW01.XCNCD = PG4REC.XCNCD; /* construction code*/
  PG0FW01.SY1SSTNM = PG4REC.SY1SSTNM; /* short style name*/
  PG0FW01.SYBSTGNB = PG4REC.SYBSTGNB; /* style group number*/
  PG0FW01.PG4SZRNG = PG4REC.PG4SZRNG; /* size range*/


   /* ------------------------------------------------------------*/
   /* If no override data was found, move DPRODG.VSYDVL01 data*/
   /* to the map.*/
   /* ------------------------------------------------------------*/

  if (PG0FW00.PG0FW-VSDREG-DATA-FOUND-SW != "Y") /* No overrides exist*/

    PG0FW01.XPRCD = PG4REC.XPRCD; /* product type*/
    PG0FW02.XPR-PROD-TYP-CD = PG4REC.XPRCD;

    PG0FW01.XSECD = PG4REC.XSECD; /* season code*/
    PG0FW02.XSE-SESN-CD = PG4REC.XSECD;

    PG0FW01.XSNYR = PG4REC.XSNYR; /* season year*/
    PG0FW02.XSN-SESN-YR-RNG = PG4REC.XSNYR;

    PG0FW00.PG0FWDT1 = PG4REC.SY2PDCMO; /* breakout yy mm*/
    PG0FW01.PG0FMCYR = PG0FW00.PG0FW1YR; /* dom closeout year*/
    PG0FW01.PG0FMCMO = PG0FW00.PG0FW1MO; /* dom closeout month*/
    PG0FW02.SY-PROJ-DOM-CLS-MO = PG4REC.SY2PDCMO;

    PG0FW00.PG0FWDT2 = PG4REC.SY2POFBD; /* breakout yy mm dd*/
    PG0FW01.PG0FMBMO = PG0FW00.PG0FW2MO; /* prop booking month*/
    PG0FW01.PG0FMBDA = PG0FW00.PG0FW2DA; /* prop booking day*/
    PG0FW01.PG0FMBYR = PG0FW00.PG0FW2YR; /* prop booking year*/
    PG0FW02.SY-PROP-OFFER-BDT = PG4REC.SY2POFBD;

    PG0FW00.PG0FWDT2 = PG4REC.SY2FOFBD; /* breakout yy mm dd*/
    PG0FW01.PG0FMFMO = PG0FW00.PG0FW2MO; /* future booking month*/
    PG0FW01.PG0FMFDA = PG0FW00.PG0FW2DA; /* future booking day*/
    PG0FW01.PG0FMFYR = PG0FW00.PG0FW2YR; /* future booking year*/
    PG0FW02.SY-FUTR-OFFER-BDT = PG4REC.SY2FOFBD;

    PG0FW00.PG0FWDT1 = PG4REC.PG2FPDMO; /* breakout yy mm*/
    PG0FW01.PG0FMPYR = PG0FW00.PG0FW1YR; /* first production year*/
    PG0FW01.PG0FMPM1 = PG0FW00.PG0FW1MO; /* first production month*/
    PG0FW00.PG0FWDT1 = PG4REC.PG4FDLMO; /* breakout yy mm*/
    PG0FW01.PG0FMPM2 = PG0FW00.PG0FW1MO; /* first delivery month*/
    PG0FW02.PG-FRST-PRDCTN-MO = PG4REC.PG2FPDMO;
    PG0FW02.PG-FRST-DLVR-MO = PG4REC.PG4FDLMO;

    PG0FW01.SY2SSCIN = PG4REC.SY2SSCIN; /* safety class ind*/
    PG0FW02.SY-SFTY-STKCLS-IND = PG4REC.SY2SSCIN;

    PG0FW00.PG0FWDT2 = PG4REC.SY2FOFBD; /* breakout yy mm dd*/
    PG0FW01.PG0FMSYR = PG0FW00.PG0FW2YR; /* first sales year*/
    PG0FW01.PG0FMSMO = PG0FW00.PG0FW2MO; /* first sales month*/
    if (PG4REC.SY2FOFBD == 0)
      PG0FW02.PG-FRST-SLS-MO = 0;
    else
      PG0FW00.PG0FW1YR = PG0FW01.PG0FMSYR;
      PG0FW00.PG0FW1MO = PG0FW01.PG0FMSMO;
      if (PG0FW00.PG0FW1YR <= 70)
        PG0FW00.PG0FW1CC = 20;
      else
        PG0FW00.PG0FW1CC = 19;
      end
      PG0FW02.PG-FRST-SLS-MO = PG0FW00.PG0FWDT1; /* First sales month*/
    end

    PG0FW01.PG4RFCFL = "N"; /* report forecast flag*/
    PG0FW02.PG-RPT-FCST-FL = "N";

    PG0FW01.VSDREG01-GROUP = " ";
  else

    /* ------------------------------------------------------------*/
     /* Some data was overridden.  Determine what was overridden*/
     /* and save to display storage.*/
    /* ------------------------------------------------------------*/

    if (VSDREG01.PG-XPR-MOD-FL == "Y") /* XPR changed*/
      PG0FW01.XPRCD = VSDREG01.XPR-PROD-TYP-CD; /* product type*/
      PG0FW02.XPR-PROD-TYP-CD = VSDREG01.XPR-PROD-TYP-CD;
    else
      PG0FW01.XPRCD = PG4REC.XPRCD; /* product type*/
      PG0FW02.XPR-PROD-TYP-CD = PG4REC.XPRCD;
    end

    if (VSDREG01.PG-XSE-MOD-FL == "Y") /* XSE changed*/
      PG0FW01.XSECD = VSDREG01.XSE-SESN-CD; /* season code*/
      PG0FW02.XSE-SESN-CD = VSDREG01.XSE-SESN-CD;
    else
      PG0FW01.XSECD = PG4REC.XSECD;
      PG0FW02.XSE-SESN-CD = PG4REC.XSECD;
    end

    if (VSDREG01.PG-XSN-MOD-FL == "Y") /* XSN changed*/
      PG0FW01.XSNYR = VSDREG01.XSN-SESN-YR-RNG; /* season year*/
      PG0FW02.XSN-SESN-YR-RNG = VSDREG01.XSN-SESN-YR-RNG;
    else
      PG0FW01.XSNYR = PG4REC.XSNYR;
      PG0FW02.XSN-SESN-YR-RNG = PG4REC.XSNYR;
    end

    if (VSDREG01.PG-DOM-CLS-MOD-FL == "Y") /* Dom cls mo changed*/
      PG0FW00.PG0FWDT1 = VSDREG01.SY-PROJ-DOM-CLS-MO;
      PG0FW01.PG0FMCYR = PG0FW00.PG0FW1YR; /* dom closeout year*/
      PG0FW01.PG0FMCMO = PG0FW00.PG0FW1MO; /* dom closeout month*/
      PG0FW02.SY-PROJ-DOM-CLS-MO = VSDREG01.SY-PROJ-DOM-CLS-MO;
    else
      PG0FW00.PG0FWDT1 = PG4REC.SY2PDCMO;
      PG0FW01.PG0FMCYR = PG0FW00.PG0FW1YR; /* dom closeout year*/
      PG0FW01.PG0FMCMO = PG0FW00.PG0FW1MO; /* dom closeout month*/
      PG0FW02.SY-PROJ-DOM-CLS-MO = PG4REC.SY2PDCMO;
    end

    if (VSDREG01.PG-PROP-OFDT-MODFL == "Y") /* Prop offer dt changed*/
      PG0FW00.PG0FWDT2 = VSDREG01.SY-PROP-OFFER-BDT;
      PG0FW01.PG0FMBMO = PG0FW00.PG0FW2MO; /* prop booking month*/
      PG0FW01.PG0FMBDA = PG0FW00.PG0FW2DA; /* prop booking day*/
      PG0FW01.PG0FMBYR = PG0FW00.PG0FW2YR; /* prop booking year*/
      PG0FW02.SY-PROP-OFFER-BDT = VSDREG01.SY-PROP-OFFER-BDT;
    else
      PG0FW00.PG0FWDT2 = PG4REC.SY2POFBD;
      PG0FW01.PG0FMBMO = PG0FW00.PG0FW2MO; /* prop booking month*/
      PG0FW01.PG0FMBDA = PG0FW00.PG0FW2DA; /* prop booking day*/
      PG0FW01.PG0FMBYR = PG0FW00.PG0FW2YR; /* prop booking year*/
      PG0FW02.SY-PROP-OFFER-BDT = PG4REC.SY2POFBD;
    end

    if (VSDREG01.PG-FUTR-OFDT-MODFL == "Y") /* Futr offer dt changed*/
      PG0FW00.PG0FWDT2 = VSDREG01.SY-FUTR-OFFER-BDT;
      PG0FW01.PG0FMFMO = PG0FW00.PG0FW2MO; /* future booking month*/
      PG0FW01.PG0FMFDA = PG0FW00.PG0FW2DA; /* future booking day*/
      PG0FW01.PG0FMFYR = PG0FW00.PG0FW2YR; /* future booking year*/
      PG0FW02.SY-FUTR-OFFER-BDT = VSDREG01.SY-FUTR-OFFER-BDT;
    else
      PG0FW00.PG0FWDT2 = PG4REC.SY2FOFBD;
      PG0FW01.PG0FMFMO = PG0FW00.PG0FW2MO; /* future booking month*/
      PG0FW01.PG0FMFDA = PG0FW00.PG0FW2DA; /* future booking day*/
      PG0FW01.PG0FMFYR = PG0FW00.PG0FW2YR; /* future booking year*/
      PG0FW02.SY-FUTR-OFFER-BDT = PG4REC.SY2FOFBD;
    end

    if (VSDREG01.PG-FRST-PO-MOD-FL == "Y") /* Production dt changed*/
      PG0FW00.PG0FWDT1 = VSDREG01.PG-FRST-PRDCTN-MO;
      PG0FW01.PG0FMPYR = PG0FW00.PG0FW1YR; /* first production year*/
      PG0FW01.PG0FMPM1 = PG0FW00.PG0FW1MO; /* first production month*/
      PG0FW00.PG0FWDT1 = VSDREG01.PG-FRST-DLVR-MO;
      PG0FW01.PG0FMPM2 = PG0FW00.PG0FW1MO; /* first delivery month*/
      PG0FW02.PG-FRST-PRDCTN-MO = VSDREG01.PG-FRST-PRDCTN-MO;
      PG0FW02.PG-FRST-DLVR-MO = VSDREG01.PG-FRST-DLVR-MO;
    else
      PG0FW00.PG0FWDT1 = PG4REC.PG2FPDMO;
      PG0FW01.PG0FMPYR = PG0FW00.PG0FW1YR; /* first production year*/
      PG0FW01.PG0FMPM1 = PG0FW00.PG0FW1MO; /* first production month*/
      PG0FW00.PG0FWDT1 = PG4REC.PG4FDLMO;
      PG0FW01.PG0FMPM2 = PG0FW00.PG0FW1MO; /* first delivery month*/
      PG0FW02.PG-FRST-PRDCTN-MO = PG4REC.PG2FPDMO;
      PG0FW02.PG-FRST-DLVR-MO = PG4REC.PG4FDLMO;
    end

    if (VSDREG01.PG-SFTY-STK-MOD-FL == "Y") /* Safety stock changed*/
      PG0FW01.SY2SSCIN = VSDREG01.SY-SFTY-STKCLS-IND;
      PG0FW02.SY-SFTY-STKCLS-IND = VSDREG01.SY-SFTY-STKCLS-IND;
    else
      PG0FW01.SY2SSCIN = PG4REC.SY2SSCIN;
      PG0FW02.SY-SFTY-STKCLS-IND = PG4REC.SY2SSCIN;
    end

    if (VSDREG01.PG-FRST-SLS-MOD-FL == "Y") /* First sls month changed*/
      PG0FW00.PG0FWDT1 = VSDREG01.PG-FRST-SLS-MO;
      PG0FW01.PG0FMSYR = PG0FW00.PG0FW1YR; /* first sales year*/
      PG0FW01.PG0FMSMO = PG0FW00.PG0FW1MO; /* first sales month*/
      PG0FW02.PG-FRST-SLS-MO = VSDREG01.PG-FRST-SLS-MO;
    else
      PG0FW00.PG0FWDT2 = PG4REC.SY2FOFBD; /* breakout yy mm dd*/
      PG0FW01.PG0FMSYR = PG0FW00.PG0FW2YR; /* first sales year*/
      PG0FW01.PG0FMSMO = PG0FW00.PG0FW2MO; /* first sales month*/
      if (PG4REC.SY2FOFBD == 0)
        PG0FW02.PG-FRST-SLS-MO = 0;
      else
        PG0FW00.PG0FW1YR = PG0FW01.PG0FMSYR;
        PG0FW00.PG0FW1MO = PG0FW01.PG0FMSMO;
        if (PG0FW00.PG0FW1YR <= 70)
          PG0FW00.PG0FW1CC = 20;
        else
          PG0FW00.PG0FW1CC = 19;
        end
        PG0FW02.PG-FRST-SLS-MO = PG0FW00.PG0FWDT1; /* First sls month*/
      end
    end

    if (VSDREG01.PG-RPT-FCST-MOD-FL == "Y") /* Rpt fcst flag changed*/
      PG0FW01.PG4RFCFL = VSDREG01.PG-RPT-FCST-FL; /* rpt fcst flag*/
      PG0FW02.PG-RPT-FCST-FL = VSDREG01.PG-RPT-FCST-FL;
    else
      PG0FW01.PG4RFCFL = "N";
      PG0FW02.PG-RPT-FCST-FL = "N";
    end

    PG0FW01.VSDREG01-GROUP = VSDREG01.VSDREG01-GROUP;
  end


   /* ------------------------------------------------------------*/
   /* Save the "before" image in display storage.*/
   /* ------------------------------------------------------------*/

  PG0FW01.PG-AUD-FILLR-COMNT = PG0FW02.PG-AUD-FILLR-COMNT;


end // end PG0F120

// Select DPRODG.VSDREG01 row
Function PG0F130()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO7260" ("S ", SQLCA, VSDREG01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PG0FW00.PG0FW-VSDREG-DATA-FOUND-SW = "Y";
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      set VSDREG01 empty;
      PG0FW00.PG0FW-VSDREG-DATA-FOUND-SW = "N";
      return; /* Return to previous process*/
    end
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  PG0FW00.PG0FW-VSDREG-DATA-FOUND-SW = "N";

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DPRODG.VSDREG01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSDREG01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSDREG01.VSDREG01-KEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PG0FW00.PG0FWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end PG0F130

// format and display map
Function PG0F200()
   /* ------------------------------------------------------------*/
   /* format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* a real error, not just info*/
    PGXREC.XXXMSGNO = converseVar.validationMsgNum; /* move it to working storage*/
  end

  if (PG0FW00.PG0FWMCS == "Y") /* map needs to be formatted*/
    PG0F210(); /* format the map*/
  end

  if (COMMAREA.CACHGFL != "Y") /* inquiry auth only*/
    PG0F220(); /* protect enterable fields*/
  end

  if (PG0FW00.PG0FW-DATA-WAS-FOUND-SW == "N") /* No data to display*/
    PG0F230(); /* protect non-key fields*/
  else
    if (PG0FW00.PG0FW-VSYDVL-DATA-FOUND-SW == "N") /* No sydvl01 data*/
      PG0F240(); /* protect non-sdreg fields*/
    end
  end


  if (PGXREC.XXXMSGNO != 0)
                                   /* error or informational message*/

    if (PGXREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PGXREC.XXXMSGNO);
    end /* move to map*/
    PG0FM001.XXXMODID = PGXREC.XXXMODID; /* error module name*/
    set PG0FM001 alarm; /* indicate sound alarm*/

  end


  converse PG0FM001 ;
   /* ------------------------------------------------------------*/
   /* clear the message fields and save fast path information*/
   /* ------------------------------------------------------------*/
  PGXREC.XXXMODID = " "; /* module identification*/
  PGXREC.XXXMSGNO = 0; /* message number*/

  COMMAREA.CATOAP = PG0FM001.CATOAP; /* to application*/
  COMMAREA.CAITEM = PG0FM001.CAITEM; /* application data*/
end // end PG0F200

// format the map
Function PG0F210()
   /* ------------------------------------------------------------*/
   /* clear map area and reset the map switch*/
   /* ------------------------------------------------------------*/

  set PG0FM001 initial; /* map io area*/
  PG0FW00.PG0FWMCS = "N"; /* map format switch*/
  PG0FM001.XXXCURDT = VGVar.currentShortGregorianDate; /* current date*/
  PG0FM001.PG4STNBR = PG0FW01.PG4STNBR; /* development code*/

   /* ------------------------------------------------------------*/
   /* format the map data*/
   /* ------------------------------------------------------------*/

  PG0F211(); /* move pc origin on line modify fields*/
  PG0F212(); /* move on line origin enterable fields*/
  PG0F213(); /* move display only fields*/
  PG0F214(); /* move descriptions*/

   /* ------------------------------------------------------------*/
   /* check if enterable fields need to be protected*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACHGFL != "Y") /* user authorised to update*/
    PG0F220(); /* protect enterable fields*/
  end


end // end PG0F210

// format pc origin online mod
Function PG0F211()
  PG0FM001.XPRCD = PG0FW01.XPRCD; /* product type*/
  PG0FM001.XPLCD = PG0FW01.XPLCD; /* product line*/
  PG0FM001.XPCCD = PG0FW01.XPCCD; /* category code*/
  PG0FM001.XGACD = PG0FW01.XGACD; /* gender age*/
  PG0FM001.XSUCD = PG0FW01.XSUCD; /* silhouette code*/
  PG0FM001.XSPCD = PG0FW01.XSPCD; /* sports activity code*/
  PG0FM001.XDMCD = PG0FW01.XDMCD; /* dimension code*/
  PG0FM001.XSECD = PG0FW01.XSECD; /* season code*/
  PG0FM001.XSNYR = PG0FW01.XSNYR; /* season year*/
  PG0FM001.XDVCD = PG0FW01.XDVCD; /* division code*/
  PG0FM001.XCNCD = PG0FW01.XCNCD; /* construction code*/
  PG0FM001.XOGCD = PG0FW01.XOGCD; /* option group*/
end // end PG0F211

// format on line origin fields
Function PG0F212()
  PG0FM001.PG0FMSYR = PG0FW01.PG0FMSYR; /* first sales year*/
  PG0FM001.PG0FMSMO = PG0FW01.PG0FMSMO; /* first sales month*/
  PG0FM001.PG0FMPYR = PG0FW01.PG0FMPYR; /* first production year*/
  PG0FM001.PG0FMPM1 = PG0FW01.PG0FMPM1; /* first production month*/
  PG0FM001.PG0FMPM2 = PG0FW01.PG0FMPM2; /* first delivery month*/
  PG0FM001.PG0FMFMO = PG0FW01.PG0FMFMO; /* future booking month*/
  PG0FM001.PG0FMFDA = PG0FW01.PG0FMFDA; /* future booking day*/
  PG0FM001.PG0FMFYR = PG0FW01.PG0FMFYR; /* future booking year*/
  PG0FM001.PG0FMBMO = PG0FW01.PG0FMBMO; /* future booking month*/
  PG0FM001.PG0FMBDA = PG0FW01.PG0FMBDA; /* future booking day*/
  PG0FM001.PG0FMBYR = PG0FW01.PG0FMBYR; /* future booking year*/
  PG0FM001.PG0FMCYR = PG0FW01.PG0FMCYR; /* dom closeout year*/
  PG0FM001.PG0FMCMO = PG0FW01.PG0FMCMO; /* dom closeout month*/
  PG0FM001.PG0FMNYR = PG0FW01.PG0FMNYR; /* nil closeout year*/
  PG0FM001.PG0FMNMO = PG0FW01.PG0FMNMO; /* nil closeout month*/

  PG0FM001.SY2SSCIN = PG0FW01.SY2SSCIN; /* safety class ind*/
  PG0FM001.PG4RFCFL = PG0FW01.PG4RFCFL; /* report forecast flag*/
  PG0FM001.SYBSTGNB = PG0FW01.SYBSTGNB; /* style group number*/
  PG0FM001.PG4SZRNG = PG0FW01.PG4SZRNG; /* size range*/
  PG0FM001.SY1SSTNM = PG0FW01.SY1SSTNM; /* short style name*/
end // end PG0F212

// format display only fields
Function PG0F213()
  PG0FM001.SY1STYNM = PG4REC.SY1STYNM; /* model name*/
  PG0FM001.PG4CLRVR = PG4REC.PG4CLRVR; /* # color variations*/
  PG0FM001.PG4DFCTY = PG4REC.PG4DFCTY; /* development factory*/
  PG0FM001.SY2TDIND = PG4REC.SY2TDIND; /* tech difficulty ind*/

  if (PG4REC.PG4AIRF1 == "E" /* airbag 1 exists*/
   || PG4REC.PG4AIRF2 == "E" /* airbag 2 exists*/
   || PG4REC.PG4AIRF3 == "E") /* airbag 3 exists*/
    PG0FM001.PG4AIRFL = "E"; /* airbag exists*/
  else
    PG0FM001.PG4AIRFL = "N"; /* new airbag*/
  end

  PG0FM001.PG4PRFTY = PG4REC.PG4PRFTY; /* production factory*/
  PG0FM001.PG4IDT = PG4REC.PG4IDT; /* issue date*/
  PG0FM001.PG4PAFTY = PG4REC.PG4PAFTY; /* alternate factory*/
  PG0FM001.PG4CNFDT = PG4REC.PG4CNFDT; /* confirmation date*/
  PG0FM001.PG4DELDT = PG4REC.PG4DELDT; /* cancellation date*/
  PG0FM001.XFCCD1 = PG4REC.XFCCD1; /* special feat code 1*/
  PG0FM001.XFCCD2 = PG4REC.XFCCD2; /* special feat code 2*/
  PG0FM001.XFCCD3 = PG4REC.XFCCD3; /* special feat code 3*/
  PG0FM001.XFCCD4 = PG4REC.XFCCD4; /* special feat code 4*/
  PG0FM001.XFCCD5 = PG4REC.XFCCD5; /* special feat code 5*/
  PG0FM001.XFCCD6 = PG4REC.XFCCD6; /* special feat code 6*/
  PG0FM001.PG4DMGRN = PG4REC.PG4DMGRN; /* development manager name*/
  PG0FM001.PG4DSGNM = PG4REC.PG4DSGNM; /* designer name*/
  PG0FM001.PG4PMKNM = PG4REC.PG4PMKNM; /* pattern maker name*/
  PG0FM001.PG4PMGNM = PG4REC.PG4PMGNM; /* plm*/
  PG0FM001.PG4ASDNM = PG4REC.PG4ASDNM; /* asian developer name*/
  PG0FM001.PG4SSLDT = PG4REC.PG4SSLDT; /* salesman sample date*/

  PG0FW00.FY1FCTYC = PG4REC.PG4DFCTY; /* factory to workarea*/
  PG0FS01(); /* get factory name*/

  if (SQLCA.VAGen_SQLCODE != 0) /* not normal return code*/
    PG0FM001.PG0FMFN1 = "UNKNOWN"; /* factory name to map*/
  else
    PG0FM001.PG0FMFN1 = FY1REC.FY1FCTSN; /* factory short name to map*/
  end

  PG0FW00.FY1FCTYC = PG4REC.PG4PRFTY; /* factory to workarea*/
  PG0FS01(); /* get factory name*/

  if (SQLCA.VAGen_SQLCODE != 0) /* not normal return code*/
    PG0FM001.PG0FMFN2 = "UNKNOWN"; /* factory name to map*/
  else
    PG0FM001.PG0FMFN2 = FY1REC.FY1FCTSN; /* factory short name to map*/
  end

  PG0FW00.FY1FCTYC = PG4REC.PG4PAFTY; /* factory to workarea*/
  PG0FS01(); /* get factory name*/

  if (SQLCA.VAGen_SQLCODE != 0) /* not normal return code*/
    PG0FM001.PG0FMFN3 = "UNKNOWN"; /* factory name to map*/
  else
    PG0FM001.PG0FMFN3 = FY1REC.FY1FCTSN; /* factory short name to map*/
  end

end // end PG0F213

// move descriptions
Function PG0F214()
   /* ------------------------------------------------------------*/
   /* search the appropriate table.  if the description is not*/
   /* found, move 'unknown' to the description field in the map.*/
   /* ------------------------------------------------------------*/

  if (PG0FM001.XPRCD in XPRTBL.XPRCD) /* product type code*/
    PG0FM001.XPRABRV = XPRTBL.XPRABRV[sysVar.arrayIndex]; /* desc from table*/
  else
    PG0FM001.XPRABRV = "UNKNOWN"; /* not found*/
  end

  if (PG0FM001.XPLCD in XPLTBL.XPLCD) /* product line code*/
    PG0FM001.XPLSDESC = XPLTBL.XPLSDESC[sysVar.arrayIndex]; /* desc from table*/
  else
    PG0FM001.XPLSDESC = "UNKNOWN"; /* not found*/
  end

  if (PG0FM001.XPCCD in XPCTBL.XPCCD) /* category code*/
    PG0FM001.XPCSDESC = XPCTBL.XPCSDESC[sysVar.arrayIndex]; /* desc from table*/
  else
    PG0FM001.XPCSDESC = "UNKNOWN"; /* not found*/
  end

  if (PG0FM001.XGACD in XGATBL.XGACD) /* gender age code*/
    PG0FM001.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex]; /* desc from table*/
  else
    PG0FM001.XGADESC = "UNKNOWN"; /* not found*/
  end

  if (PG0FM001.XSUCD in XSUTBL.XSUCD) /* silhouette code*/
    PG0FM001.XSUABRV = XSUTBL.XSUABRV[sysVar.arrayIndex]; /* desc from table*/
  else
    PG0FM001.XSUABRV = "UNKNOWN"; /* not found*/
  end

  if (PG0FM001.XSPCD in XSPTBL.XSPCD) /* sports activity cod*/
    PG0FM001.XSPDESC = XSPTBL.XSPDESC[sysVar.arrayIndex]; /* desc from table*/
  else
    PG0FM001.XSPDESC = "UNKNOWN"; /* not found*/
  end

  if (PG0FM001.XDMCD in XDMTBL.XDMCD) /* dimension code*/
    PG0FM001.XDMDESC = XDMTBL.XDMDESC[sysVar.arrayIndex]; /* desc from table*/
  else
    PG0FM001.XDMDESC = "UNKNOWN"; /* not found*/
  end

  if (PG0FM001.XSECD in XSETBL.XSECD) /* season code*/
    PG0FM001.XSEDESC = XSETBL.XSEDESC[sysVar.arrayIndex]; /* desc from table*/
  else
    PG0FM001.XSEDESC = "UNKNOWN"; /* not found*/
  end

  if (PG0FM001.XDVCD in XDVTBL.XDVCD) /* division code*/
    PG0FM001.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex]; /* desc from table*/
  else
    PG0FM001.XDVABRV = "UNKNOWN"; /* not found*/
  end

  if (PG0FM001.XCNCD in XCNTBL.XCNCD) /* construction code*/
    PG0FM001.XCNSDESC = XCNTBL.XCNSDESC[sysVar.arrayIndex]; /* desc from table*/
  else
    PG0FM001.XCNSDESC = "UNKNOWN"; /* not found*/
  end

  if (PG0FM001.XOGCD in XOGTBL.XOGCD) /* opt grp code*/
    PG0FM001.XOGABRV = XOGTBL.XOGABRV[sysVar.arrayIndex]; /* desc from table*/
  else
    PG0FM001.XOGABRV = "UNKNOWN"; /* not found*/
  end

   /* ------------------------------------------------------------*/
   /* for special features, search the table.  if the description*/
   /* is not found, check if the value is present on file.  if it*/
   /* is, move 'unknown' to the description in the map.  if there*/
   /* is no value on file, move spaces to the description.*/
   /* ------------------------------------------------------------*/

  if (PG0FM001.XFCCD1 in XFCTBL.XFCCD) /* spcl feature code*/
    PG0FM001.PG0FMAB1 = XFCTBL.XFCABRV[sysVar.arrayIndex]; /* desc from table*/
  else

    if (PG0FM001.XFCCD1 == " ") /* sp feat not on file*/
      PG0FM001.PG0FMAB1 = " ";
    else
      PG0FM001.PG0FMAB1 = "UNKNOWN"; /* not found*/
    end

  end

  if (PG0FM001.XFCCD2 in XFCTBL.XFCCD)
    PG0FM001.PG0FMAB2 = XFCTBL.XFCABRV[sysVar.arrayIndex]; /* desc from table*/
  else

    if (PG0FM001.XFCCD2 == " ") /* sp feat not on file*/
      PG0FM001.PG0FMAB2 = " ";
    else
      PG0FM001.PG0FMAB2 = "UNKNOWN"; /* not found*/
    end

  end

  if (PG0FM001.XFCCD3 in XFCTBL.XFCCD)
    PG0FM001.PG0FMAB3 = XFCTBL.XFCABRV[sysVar.arrayIndex]; /* desc from table*/
  else

    if (PG0FM001.XFCCD3 == " ") /* / * sp feat not on file*/
      PG0FM001.PG0FMAB3 = " ";
    else
      PG0FM001.PG0FMAB3 = "UNKNOWN"; /* not found*/
    end

  end

  if (PG0FM001.XFCCD4 in XFCTBL.XFCCD)
    PG0FM001.PG0FMAB4 = XFCTBL.XFCABRV[sysVar.arrayIndex]; /* desc from table*/
  else

    if (PG0FM001.XFCCD4 == " ") /* sp feat not on file*/
      PG0FM001.PG0FMAB4 = " ";
    else
      PG0FM001.PG0FMAB4 = "UNKNOWN"; /* not found*/
    end

  end

  if (PG0FM001.XFCCD5 in XFCTBL.XFCCD)
    PG0FM001.PG0FMAB5 = XFCTBL.XFCABRV[sysVar.arrayIndex]; /* desc from table*/
  else

    if (PG0FM001.XFCCD5 == " ") /* sp feat not on file*/
      PG0FM001.PG0FMAB5 = " ";
    else
      PG0FM001.PG0FMAB5 = "UNKNOWN"; /* not found*/
    end

  end

  if (PG0FM001.XFCCD6 in XFCTBL.XFCCD)
    PG0FM001.PG0FMAB6 = XFCTBL.XFCABRV[sysVar.arrayIndex]; /* desc from table*/
  else

    if (PG0FM001.XFCCD6 == " ") /* sp feat not on file*/
      PG0FM001.PG0FMAB6 = " ";
    else
      PG0FM001.PG0FMAB6 = "UNKNOWN"; /* not found*/
    end

  end

end // end PG0F214

// protect enterable fields
Function PG0F220()
  set PG0FM001.SY1SSTNM skip; /* short style name*/
  set PG0FM001.XPRCD skip; /* product type*/
  set PG0FM001.XPLCD skip; /* product line*/
  set PG0FM001.XPCCD skip; /* category code*/
  set PG0FM001.XGACD skip; /* gender age*/
  set PG0FM001.XSUCD skip; /* silhouette code*/
  set PG0FM001.XSPCD skip; /* sports activity code*/
  set PG0FM001.XDMCD skip; /* dimension code*/
  set PG0FM001.XSECD skip; /* season code*/
  set PG0FM001.XSNYR skip; /* season year*/
  set PG0FM001.XOGCD skip; /* option group*/
  set PG0FM001.XDVCD skip; /* division code*/
  set PG0FM001.XCNCD skip; /* construction code*/

  set PG0FM001.PG0FMSYR skip; /* first sales year*/
  set PG0FM001.PG0FMSMO skip; /* first sales month*/
  set PG0FM001.PG0FMPYR skip; /* first production year*/
  set PG0FM001.PG0FMPM1 skip; /* first production month*/
  set PG0FM001.PG0FMPM2 skip; /* first delivery month*/
  set PG0FM001.PG0FMFMO skip; /* future booking month*/
  set PG0FM001.PG0FMFDA skip; /* future booking day*/
  set PG0FM001.PG0FMFYR skip; /* future booking year*/
  set PG0FM001.PG0FMBMO skip; /* future booking month*/
  set PG0FM001.PG0FMBDA skip; /* future booking day*/
  set PG0FM001.PG0FMBYR skip; /* future booking year*/
  set PG0FM001.PG0FMCYR skip; /* dom closeout year*/
  set PG0FM001.PG0FMCMO skip; /* dom closeout month*/
  set PG0FM001.PG0FMNYR skip; /* nil closeout year*/
  set PG0FM001.PG0FMNMO skip; /* nil closeout month*/

  set PG0FM001.SY2SSCIN skip; /* safety class ind*/
  set PG0FM001.PG4RFCFL skip; /* report forecast flag*/
  set PG0FM001.SYBSTGNB skip; /* style group number*/
  set PG0FM001.PG4SZRNG skip; /* size range*/
end // end PG0F220

// No data - protect all fields
Function PG0F230()
   /* ------------------------------------------------------------------*/
   /* Protect all non-key fields.*/
   /* ------------------------------------------------------------------*/

  set PG0FM001.SY1STYNM invisible, skip;
  set PG0FM001.PG4CLRVR invisible, skip;
  set PG0FM001.SY1SSTNM invisible, skip;
  set PG0FM001.XPLCD invisible, skip;
  set PG0FM001.XPLSDESC invisible, skip;
  set PG0FM001.XPCCD invisible, skip;
  set PG0FM001.XPCSDESC invisible, skip;
  set PG0FM001.XPRCD invisible, skip;
  set PG0FM001.XPRABRV invisible, skip;
  set PG0FM001.XSUCD invisible, skip;
  set PG0FM001.XSUABRV invisible, skip;
  set PG0FM001.XSPCD invisible, skip;
  set PG0FM001.XSPDESC invisible, skip;
  set PG0FM001.XGACD invisible, skip;
  set PG0FM001.XGADESC invisible, skip;
  set PG0FM001.XDVCD invisible, skip;
  set PG0FM001.XDVABRV invisible, skip;
  set PG0FM001.XDMCD invisible, skip;
  set PG0FM001.XDMDESC invisible, skip;
  set PG0FM001.XSECD invisible, skip;
  set PG0FM001.XSEDESC invisible, skip;
  set PG0FM001.XCNCD invisible, skip;
  set PG0FM001.XCNSDESC invisible, skip;
  set PG0FM001.XOGCD invisible, skip;
  set PG0FM001.XOGABRV invisible, skip;
  set PG0FM001.XSNYR invisible, skip;
  set PG0FM001.PG4DFCTY invisible, skip;
  set PG0FM001.PG0FMFN1 invisible, skip;
  set PG0FM001.SY2TDIND invisible, skip;
  set PG0FM001.PG4IDT invisible, skip;
  set PG0FM001.PG4PRFTY invisible, skip;
  set PG0FM001.PG0FMFN2 invisible, skip;
  set PG0FM001.PG4AIRFL invisible, skip;
  set PG0FM001.PG4CNFDT invisible, skip;
  set PG0FM001.PG4PAFTY invisible, skip;
  set PG0FM001.PG0FMFN3 invisible, skip;
  set PG0FM001.PG4DELDT invisible, skip;
  set PG0FM001.PG4DMGRN invisible, skip;
  set PG0FM001.XFCCD1 invisible, skip;
  set PG0FM001.XFCCD2 invisible, skip;
  set PG0FM001.XFCCD3 invisible, skip;
  set PG0FM001.XFCCD4 invisible, skip;
  set PG0FM001.XFCCD5 invisible, skip;
  set PG0FM001.XFCCD6 invisible, skip;
  set PG0FM001.PG0FMAB1 invisible, skip;
  set PG0FM001.PG0FMAB2 invisible, skip;
  set PG0FM001.PG0FMAB3 invisible, skip;
  set PG0FM001.PG0FMAB4 invisible, skip;
  set PG0FM001.PG0FMAB5 invisible, skip;
  set PG0FM001.PG0FMAB6 invisible, skip;
  set PG0FM001.PG4DSGNM invisible, skip;
  set PG0FM001.PG4PMKNM invisible, skip;
  set PG0FM001.PG4PMGNM invisible, skip;
  set PG0FM001.PG4ASDNM invisible, skip;
  set PG0FM001.PG0FMSYR invisible, skip;
  set PG0FM001.PG0FMSMO invisible, skip;
  set PG0FM001.PG0FMPYR invisible, skip;
  set PG0FM001.PG0FMPM1 invisible, skip;
  set PG0FM001.PG0FMPM2 invisible, skip;
  set PG0FM001.PG0FMFMO invisible, skip;
  set PG0FM001.PG0FMFDA invisible, skip;
  set PG0FM001.PG0FMFYR invisible, skip;
  set PG0FM001.PG0FMBMO invisible, skip;
  set PG0FM001.PG0FMBDA invisible, skip;
  set PG0FM001.PG0FMBYR invisible, skip;
  set PG0FM001.SY2SSCIN invisible, skip;
  set PG0FM001.PG0FMCYR invisible, skip;
  set PG0FM001.PG0FMCMO invisible, skip;
  set PG0FM001.PG0FMNYR invisible, skip;
  set PG0FM001.PG0FMNMO invisible, skip;
  set PG0FM001.PG4RFCFL invisible, skip;
  set PG0FM001.SYBSTGNB invisible, skip;
  set PG0FM001.PG4SZRNG invisible, skip;
  set PG0FM001.PG4SSLDT invisible, skip;

end // end PG0F230

// No SYDVL - protect non-SDREG
Function PG0F240()
   /* ------------------------------------------------------------------*/
   /* Protect all fields not found on DPRODG.VSDREG01*/
   /* This code will only be executed if the DPRODG.VSYDVL01 record was*/
   /* deleted, but the DPRODG.VSDREG01 record still exists (this means*/
   /* USA cancelled the project, but Europe did not).*/
   /* ------------------------------------------------------------------*/

  set PG0FM001.SY1STYNM invisible, skip;
  set PG0FM001.PG4CLRVR invisible, skip;
  set PG0FM001.SY1SSTNM invisible, skip;
  set PG0FM001.XPLCD invisible, skip;
  set PG0FM001.XPLSDESC invisible, skip;
  set PG0FM001.XPCCD invisible, skip;
  set PG0FM001.XPCSDESC invisible, skip;
  set PG0FM001.XSUCD invisible, skip;
  set PG0FM001.XSUABRV invisible, skip;
  set PG0FM001.XSPCD invisible, skip;
  set PG0FM001.XSPDESC invisible, skip;
  set PG0FM001.XGACD invisible, skip;
  set PG0FM001.XGADESC invisible, skip;
  set PG0FM001.XDVCD invisible, skip;
  set PG0FM001.XDVABRV invisible, skip;
  set PG0FM001.XDMCD invisible, skip;
  set PG0FM001.XDMDESC invisible, skip;
  set PG0FM001.XCNCD invisible, skip;
  set PG0FM001.XCNSDESC invisible, skip;
  set PG0FM001.XOGCD invisible, skip;
  set PG0FM001.XOGABRV invisible, skip;
  set PG0FM001.PG4DFCTY invisible, skip;
  set PG0FM001.PG0FMFN1 invisible, skip;
  set PG0FM001.SY2TDIND invisible, skip;
  set PG0FM001.PG4IDT invisible, skip;
  set PG0FM001.PG4PRFTY invisible, skip;
  set PG0FM001.PG0FMFN2 invisible, skip;
  set PG0FM001.PG4AIRFL invisible, skip;
  set PG0FM001.PG4CNFDT invisible, skip;
  set PG0FM001.PG4PAFTY invisible, skip;
  set PG0FM001.PG0FMFN3 invisible, skip;
  set PG0FM001.PG4DELDT invisible, skip;
  set PG0FM001.PG4DMGRN invisible, skip;
  set PG0FM001.XFCCD1 invisible, skip;
  set PG0FM001.XFCCD2 invisible, skip;
  set PG0FM001.XFCCD3 invisible, skip;
  set PG0FM001.XFCCD4 invisible, skip;
  set PG0FM001.XFCCD5 invisible, skip;
  set PG0FM001.XFCCD6 invisible, skip;
  set PG0FM001.PG0FMAB1 invisible, skip;
  set PG0FM001.PG0FMAB2 invisible, skip;
  set PG0FM001.PG0FMAB3 invisible, skip;
  set PG0FM001.PG0FMAB4 invisible, skip;
  set PG0FM001.PG0FMAB5 invisible, skip;
  set PG0FM001.PG0FMAB6 invisible, skip;
  set PG0FM001.PG4DSGNM invisible, skip;
  set PG0FM001.PG4PMKNM invisible, skip;
  set PG0FM001.PG4PMGNM invisible, skip;
  set PG0FM001.PG4ASDNM invisible, skip;
  set PG0FM001.PG0FMNYR invisible, skip;
  set PG0FM001.PG0FMNMO invisible, skip;
  set PG0FM001.SYBSTGNB invisible, skip;
  set PG0FM001.PG4SZRNG invisible, skip;
  set PG0FM001.PG4SSLDT invisible, skip;

end // end PG0F240

// check attention identifier
Function PG0F300()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PG0FW00.PG0FWMCS = "Y"; /* Clear the map fields*/
    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* application data*/

    if (PG0FW00.PG0FWRDS == "Y") /* data was requested*/
      set PG0FW01 empty; /* reset display working storage*/
      PG0FW00.PG0FWRDS = "N"; /* reset request for data sw*/
    end

    exit stack; /* Exit to redisplay map*/

  end


  if (PG0FM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSPG002(); /* Exit to another application*/
      PGXREC.XXXMODID = "300"; /* Process name*/
      set PG0FM001.CATOAP cursor, bold; /* Highlight (in case bad xfer)*/

    else

      converseLib.validationFailed(36); /* Indicate only enter with fastpath*/
      PGXREC.XXXMODID = "300"; /* Process name*/

    end

    exit stack; /* Exit to redisplay map*/

  end


  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14)

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PG0FM001"; /* for help*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "PG0C";
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "PG0B";
    end

    XSPG002(); /* transfer to another application*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf9) /* update request*/
    if (COMMAREA.CACHGFL != "Y") /* authorized for inquiry only*/
      converseLib.validationFailed(3); /* invalid key*/
      PGXREC.XXXMODID = "300"; /* program name*/
      exit stack; /* exit to redisplay map*/
    end
  end

  if (converseVar.eventKey not enter
   && converseVar.eventKey not pf9)

    converseLib.validationFailed(3); /* invalid key*/
    PGXREC.XXXMODID = "300"; /* program name*/

    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa3)

      converseLib.clearScreen();
       /* reset map*/

    end

    exit stack;

  end


end // end PG0F300

// reset highlighted fields
Function PG0F400()

  set PG0FM001.PG4STNBR initialAttributes;
  set PG0FM001.SY1STYNM initialAttributes;
  set PG0FM001.PG4CLRVR initialAttributes;
  set PG0FM001.SY1SSTNM initialAttributes;
  set PG0FM001.XPLCD initialAttributes;
  set PG0FM001.XPLSDESC initialAttributes;
  set PG0FM001.XPCCD initialAttributes;
  set PG0FM001.XPCSDESC initialAttributes;
  set PG0FM001.XPRCD initialAttributes;
  set PG0FM001.XPRABRV initialAttributes;
  set PG0FM001.XSUCD initialAttributes;
  set PG0FM001.XSUABRV initialAttributes;
  set PG0FM001.XSPCD initialAttributes;
  set PG0FM001.XSPDESC initialAttributes;
  set PG0FM001.XGACD initialAttributes;
  set PG0FM001.XGADESC initialAttributes;
  set PG0FM001.XDVCD initialAttributes;
  set PG0FM001.XDVABRV initialAttributes;
  set PG0FM001.XDMCD initialAttributes;
  set PG0FM001.XDMDESC initialAttributes;
  set PG0FM001.XSECD initialAttributes;
  set PG0FM001.XSEDESC initialAttributes;
  set PG0FM001.XCNCD initialAttributes;
  set PG0FM001.XCNSDESC initialAttributes;
  set PG0FM001.XOGCD initialAttributes;
  set PG0FM001.XOGABRV initialAttributes;
  set PG0FM001.XSNYR initialAttributes;
  set PG0FM001.PG4DFCTY initialAttributes;
  set PG0FM001.PG0FMFN1 initialAttributes;
  set PG0FM001.SY2TDIND initialAttributes;
  set PG0FM001.PG4IDT initialAttributes;
  set PG0FM001.PG4PRFTY initialAttributes;
  set PG0FM001.PG0FMFN2 initialAttributes;
  set PG0FM001.PG4AIRFL initialAttributes;
  set PG0FM001.PG4CNFDT initialAttributes;
  set PG0FM001.PG4PAFTY initialAttributes;
  set PG0FM001.PG0FMFN3 initialAttributes;
  set PG0FM001.PG4DELDT initialAttributes;
  set PG0FM001.PG4DMGRN initialAttributes;
  set PG0FM001.XFCCD1 initialAttributes;
  set PG0FM001.XFCCD2 initialAttributes;
  set PG0FM001.XFCCD3 initialAttributes;
  set PG0FM001.XFCCD4 initialAttributes;
  set PG0FM001.XFCCD5 initialAttributes;
  set PG0FM001.XFCCD6 initialAttributes;
  set PG0FM001.PG0FMAB1 initialAttributes;
  set PG0FM001.PG0FMAB2 initialAttributes;
  set PG0FM001.PG0FMAB3 initialAttributes;
  set PG0FM001.PG0FMAB4 initialAttributes;
  set PG0FM001.PG0FMAB5 initialAttributes;
  set PG0FM001.PG0FMAB6 initialAttributes;
  set PG0FM001.PG4DSGNM initialAttributes;
  set PG0FM001.PG4PMKNM initialAttributes;
  set PG0FM001.PG4PMGNM initialAttributes;
  set PG0FM001.PG4ASDNM initialAttributes;
  set PG0FM001.PG0FMSYR initialAttributes;
  set PG0FM001.PG0FMSMO initialAttributes;
  set PG0FM001.PG0FMPYR initialAttributes;
  set PG0FM001.PG0FMPM1 initialAttributes;
  set PG0FM001.PG0FMPM2 initialAttributes;
  set PG0FM001.PG0FMFMO initialAttributes;
  set PG0FM001.PG0FMFDA initialAttributes;
  set PG0FM001.PG0FMFYR initialAttributes;
  set PG0FM001.PG0FMBMO initialAttributes;
  set PG0FM001.PG0FMBDA initialAttributes;
  set PG0FM001.PG0FMBYR initialAttributes;
  set PG0FM001.SY2SSCIN initialAttributes;
  set PG0FM001.PG0FMCYR initialAttributes;
  set PG0FM001.PG0FMCMO initialAttributes;
  set PG0FM001.PG0FMNYR initialAttributes;
  set PG0FM001.PG0FMNMO initialAttributes;
  set PG0FM001.PG4RFCFL initialAttributes;
  set PG0FM001.SYBSTGNB initialAttributes;
  set PG0FM001.PG4SZRNG initialAttributes;
  set PG0FM001.PG4SSLDT initialAttributes;

  set PG0FM001.CATOAP initialAttributes;
  set PG0FM001.CAITEM initialAttributes;

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (PG0FM001.XPRCD == "?" /* product type code*/
   || PG0FM001.XSECD == "?") /* or season list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/
      PGXREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(19); /* Indicate PF key not valid*/
      exit stack; /* Exit to display map*/
    end
  else

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of product type codes*/
   /* ------------------------------------------------------------*/

  if (PG0FM001.XPRCD == "?") /* product type requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "PROD TYPE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPR01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PG0FM001.XPRCD = PG0FW01.XPRCD; /* Restore prior code*/
    else
      PG0FM001.XPRCD = XPRTBL.XPRCD[XX0XWPIX]; /* Selected code*/
      PG0FM001.XPRABRV = XPRTBL.XPRABRV[XX0XWPIX]; /* description*/
    end
    set PG0FM001.XPRCD cursor; /* Establish cursor position*/
  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of season codes.*/
   /* ------------------------------------------------------------*/

  if (PG0FM001.XSECD == "?") /* season list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "OPTION GRP"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXSE01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
      PG0FM001.XSECD = PG0FW01.XSECD; /* Restore prior code*/
    else
      PG0FM001.XSECD = XSETBL.XSECD[XX0XWPIX]; /* Selected code*/
      PG0FM001.XSEDESC = XSETBL.XSEDESC[XX0XWPIX]; /* Description*/
    end

    set PG0FM001.XSECD cursor; /* Establish cursor position*/
  end


   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  PGXREC.XXXMODID = "400"; /* Module identification*/

  exit stack; /* Exit to display map*/


end // end PG0F400

// verify the entered data
Function PG0F500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PG0FM001.CAITEM > " ") /* Application data was entered*/
    PGXREC.XXXMODID = "500"; /* Module identification*/
    set PG0FM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(2); /* Enter only with FAST PATH*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Check if new key was entered*/
   /* ------------------------------------------------------------*/

  if (PG0FM001.PG4STNBR != PG0FW01.PG4STNBR) /* development code changed*/
    PG0FW00.PG0FWKCS = "Y"; /* key data changed*/
  else
    PG0FW00.PG0FWKCS = "N"; /* key data not changed*/
  end

   /* ------------------------------------------------------------*/
   /* Check if key data missing.*/
   /* ------------------------------------------------------------*/

  if (PG0FM001.PG4STNBR == "   ")
    PGXREC.XXXMODID = "500"; /* Module identification*/
    set PG0FM001.PG4STNBR cursor, bold; /* Highlight*/
    converseLib.validationFailed(8); /* Indicate missing*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Check if data was changed*/
   /* ------------------------------------------------------------*/

  PG0F510(); /* check if data changed*/

  if (converseVar.eventKey is enter)

    if (PG0FW00.PG0FWKCS == "Y") /* key was changed*/
      return; /* Get out to get new data*/
    end

    if (PG0FW00.PG0FWKCS == "N" /* key not changed*/
     && PG0FW00.PG0FWDCS == "N") /* data not changed*/
      PGXREC.XXXMODID = "500"; /* Module identification*/
      converseLib.validationFailed(98); /* pf9 to updt*/
      exit stack; /* Exit to display map*/
    end

    if (PG0FW00.PG0FWDCS == "Y") /* data was changed*/
      PGXREC.XXXMODID = "500"; /* Module identification*/
      converseLib.validationFailed(98); /* pf9 to updt*/
    end

  end

  if (converseVar.eventKey is pf9 /* update request*/
   && PG0FW00.PG0FWKCS == "Y")    /* key changed*/
    PGXREC.XXXMODID = "500"; /* Module identification*/
    converseLib.validationFailed(128); /* cannot update and change key*/
    exit stack; /* Exit to display map*/
  end

  if (converseVar.eventKey is pf9 /* update request*/
   && PG0FW00.PG0FWDCS != "Y")    /* data not changed*/
    PGXREC.XXXMODID = "500"; /* Module identification*/
    converseLib.validationFailed(181); /* Data not changed/cannot update*/
  end

  if (PG0FW00.PG0FWDCS == "Y" /* data changed*/
   && PG0FW00.PG0FWKCS != "Y") /* key not changed*/
    PG0F520(); /* edit data*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end PG0F500

// check if data changed
Function PG0F510()
   /* ------------------------------------------------------------*/
   /* Check to see if any data changed.*/
   /* ------------------------------------------------------------*/

  PG0FW00.PG0FWDCS = "N"; /* data didnt change*/

  if (PG0FM001.XPRCD != PG0FW01.XPRCD       /* product type*/
   || PG0FM001.XSECD != PG0FW01.XSECD       /* season code*/
   || PG0FM001.XSNYR != PG0FW01.XSNYR       /* season year*/
   || PG0FM001.PG0FMSYR != PG0FW01.PG0FMSYR /* first sales year*/
   || PG0FM001.PG0FMSMO != PG0FW01.PG0FMSMO /* first sales month*/
   || PG0FM001.PG0FMPYR != PG0FW01.PG0FMPYR /* first production year*/
   || PG0FM001.PG0FMPM1 != PG0FW01.PG0FMPM1 /* first production month*/
   || PG0FM001.PG0FMPM2 != PG0FW01.PG0FMPM2 /* first delivery month*/
   || PG0FM001.PG0FMFMO != PG0FW01.PG0FMFMO /* future booking month*/
   || PG0FM001.PG0FMFDA != PG0FW01.PG0FMFDA /* future booking day*/
   || PG0FM001.PG0FMFYR != PG0FW01.PG0FMFYR /* future booking year*/
   || PG0FM001.PG0FMBMO != PG0FW01.PG0FMBMO /* prop booking month*/
   || PG0FM001.PG0FMBDA != PG0FW01.PG0FMBDA /* prop booking day*/
   || PG0FM001.PG0FMBYR != PG0FW01.PG0FMBYR /* prop booking year*/
   || PG0FM001.PG0FMCYR != PG0FW01.PG0FMCYR /* dom closeout year*/
   || PG0FM001.PG0FMCMO != PG0FW01.PG0FMCMO /* dom closeout month*/
   || PG0FM001.SY2SSCIN != PG0FW01.SY2SSCIN /* safety class ind*/
   || PG0FM001.PG4RFCFL != PG0FW01.PG4RFCFL) /* report forecast flag*/
    PG0FW00.PG0FWDCS = "Y"; /* data changed*/
  end


end // end PG0F510

// edit entered data
Function PG0F520()
   /* ------------------------------------------------------------*/
   /* Get current date and time.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get current date*/

  PG0FW00.PG0FW-CURR-CC = XX0XW01.XX0XW19;
  PG0FW00.PG0FW-CURR-YY = XX0XW01.XX0XWZYY;


   /* ------------------------------------------------------------*/
   /* Verify the show on fcst flag.*/
   /* ------------------------------------------------------------*/

  if (PG0FM001.PG4RFCFL != PG0FW01.PG4RFCFL) /* report forecast flag*/

    if (PG0FM001.PG4RFCFL != "Y"
     && PG0FM001.PG4RFCFL != "N")
      converseLib.validationFailed(153); /* must be y or n*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0FM001.PG4RFCFL cursor, bold; /* highlight*/
    end

    /* ff_sls_fcst must be zero to change from "y" to "n"*/
  /* begin tcs*/
    if (converseVar.eventKey not pf14)
      if (PG0FW01.PG4RFCFL == "Y"
       && PG0FM001.PG4RFCFL == "N")
        PG0F524();
        if (FF9REC.FF6SLFCT != 0)
          converseLib.validationFailed(380); /* ff_sls_fcst ne zero*/
          PGXREC.XXXMODID = "520"; /* error module id*/
          set PG0FM001.PG4RFCFL cursor, bold; /* highlight*/
          return;
        end
        PG0F5201();
        if (FBKREC.FB8FTQTB > 0)
          converseLib.validationFailed(530); /* ff_buy_tot_qtb ne zero*/
          PGXREC.XXXMODID = "520"; /* error module id*/
          set PG0FM001.PG4RFCFL cursor, bold; /* highlight*/
        end
        /* end tcs*/
      end
    end
  end
  if (PG0FM001.PG4RFCFL == "Y" /* show on fcst*/
   && PG0FM001.XDVCD == "03")  /* Promo division*/
    converseLib.validationFailed(496); /* invalid flag for division*/
    PGXREC.XXXMODID = "520"; /* error module id*/
    set PG0FM001.PG4RFCFL cursor, bold; /* highlight*/
  end


   /* ------------------------------------------------------------*/
   /* Verify the projected closeout month.*/
   /* ------------------------------------------------------------*/

  if (PG0FM001.PG0FMCMO != PG0FW01.PG0FMCMO /* dom closeout month*/
   && PG0FM001.PG0FMCMO != 0)              

    if (PG0FM001.PG0FMCMO < "01"
     || PG0FM001.PG0FMCMO > "12")
      converseLib.validationFailed(152); /* must be between 1 and 12*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0FM001.PG0FMCMO cursor, bold; /* highlight*/
    end
  end

  /* IF PG0FM001.PG0FMCYR NE PG0FW01.PG0FMCYR; /* dom closeout year*/
  /* MOVE PG0FM001.PG0FMCYR TO PG0FW00.PG0FW-WRK-YY;*/
  /* PERFORM PG0F526;*/
  /* PG0FW00.PG0FWKYR = PG0FW00.PG0FW-CURR-CCYY - PG0FW00.PG0FW-WRK-CCYY;*/
  /* ;*/
  /* IF PG0FW00.PG0FWKYR LT -10*/
  /* OR PG0FW00.PG0FWKYR GT 10;*/
  /* MOVE 358 TO EZEMNO;          /* must be within 10*/
  /* MOVE '520' TO PGXREC.XXXMODID;/* error module id*/
  /* SET PG0FM001.PG0FMCYR CURSOR,BRIGHT;/* highlight*/
  /* END;*/
  /* END;*/

  if (PG0FM001.PG4RFCFL == "Y")

    if (PG0FM001.PG0FMCMO < "01"
     || PG0FM001.PG0FMCMO > "12")
      converseLib.validationFailed(152); /* must be between 1 and 12*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0FM001.PG0FMCMO cursor, bold; /* highlight*/
    end

  /* MOVE PG0FM001.PG0FMCYR TO PG0FW00.PG0FW-WRK-YY;*/
  /* PERFORM PG0F526;*/
  /* PG0FW00.PG0FWKYR = PG0FW00.PG0FW-CURR-CCYY - PG0FW00.PG0FW-WRK-CCYY;*/
  /* ;*/
  /* IF PG0FW00.PG0FWKYR LT -10*/
  /* OR PG0FW00.PG0FWKYR GT 10;*/
  /* MOVE 358 TO EZEMNO;          /* must be within 2*/
  /* MOVE '520' TO PGXREC.XXXMODID;/* error module id*/
  /* SET PG0FM001.PG0FMCYR CURSOR,BRIGHT;/* highlight*/
  /* END;*/
  end

  if (PG0FM001.PG0FMCYR != 0 /* year entered*/
   && PG0FM001.PG0FMCMO == 0) /* month not entered*/
    converseLib.validationFailed(118); /* missing field*/
    PGXREC.XXXMODID = "520"; /* error module id*/
    set PG0FM001.PG0FMCMO cursor, bold; /* highlight*/
  end

   /* IF PG0FM001.PG0FMCMO NE 0        /* month entered*/
   /* AND PG0FM001.PG0FMCYR EQ 0;    /* year not entered*/
   /* MOVE 118 TO EZEMNO;            /* missing field*/
   /* MOVE '520' TO PGXREC.XXXMODID; /* error module id*/
   /* SET PG0FM001.PG0FMCYR CURSOR,BRIGHT;/* highlight*/
   /* END;*/


   /* ------------------------------------------------------------*/
   /* Verify the safety stock class.*/
   /* ------------------------------------------------------------*/

  if (PG0FM001.SY2SSCIN != PG0FW01.SY2SSCIN /* safety class ind*/
   || PG0FM001.PG4RFCFL == "Y")            

    if (PG0FM001.SY2SSCIN != "A"
     && PG0FM001.SY2SSCIN != "B"
     && PG0FM001.SY2SSCIN != "C"
     && PG0FM001.SY2SSCIN != "D")
      converseLib.validationFailed(10); /* invalid value*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0FM001.SY2SSCIN cursor, bold; /* highlight*/
    end
  end


   /* ------------------------------------------------------------*/
   /* Verify the 1st prop booking date.*/
   /* ------------------------------------------------------------*/

  if (PG0FM001.PG0FMBYR != PG0FW01.PG0FMBYR) /* prop booking year*/
    PG0FW00.PG0FW-WRK-YY = PG0FM001.PG0FMBYR;
    PG0F526();
    PG0FW00.PG0FWKYR = PG0FW00.PG0FW-CURR-CCYY - PG0FW00.PG0FW-WRK-CCYY;

    if (PG0FW00.PG0FWKYR < -4
     || PG0FW00.PG0FWKYR > 2)
      converseLib.validationFailed(459); /* must be within -2 or +4*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0FM001.PG0FMBYR cursor, bold; /* highlight*/
    end
  end

  if (PG0FM001.PG0FMBMO != PG0FW01.PG0FMBMO /* month changed*/
   || PG0FM001.PG0FMBDA != PG0FW01.PG0FMBDA /* day changed*/
   || PG0FM001.PG0FMBYR != PG0FW01.PG0FMBYR) /* year changed*/

     /* validate 1st prop bkg mo using ta0040*/

    PG0FW00.PG0FWGMM = PG0FM001.PG0FMBMO; /* greg month*/
    PG0FW00.PG0FWGDD = PG0FM001.PG0FMBDA; /* greg day*/
    PG0FW00.PG0FWGYY = PG0FM001.PG0FMBYR; /* greg year*/

    set TA2REC empty; /* init ta2rec*/

    TA2REC.TA2DTOPT = "GREGGREG"; /* date option*/
    TA2REC.TA2GRTYP = "A"; /* date format*/
    TA2REC.TA2GRGAN = PG0FW00.PG0FWGRG; /* move date*/

    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* call date routine*/

    if (sysVar.errorCode == "00000000") /* call successful*/
      if (TA2REC.TA2RTNCD != 0)
        converseLib.validationFailed(17); /* invalid date*/
        PGXREC.XXXMODID = "520"; /* error module id*/
        set PG0FM001.PG0FMBMO cursor, bold; /* highlight*/
        set PG0FM001.PG0FMBDA bold; /* highlight*/
        set PG0FM001.PG0FMBYR bold; /* highlight*/
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* Verify the 1st futr booking date.*/
   /* ------------------------------------------------------------*/

  if (PG0FM001.PG0FMFYR != PG0FW01.PG0FMFYR) /* future booking year*/
    PG0FW00.PG0FW-WRK-YY = PG0FM001.PG0FMFYR;
    PG0F526();
    PG0FW00.PG0FWKYR = PG0FW00.PG0FW-CURR-CCYY - PG0FW00.PG0FW-WRK-CCYY;

    if (PG0FW00.PG0FWKYR < -4
     || PG0FW00.PG0FWKYR > 2)
      converseLib.validationFailed(459); /* must be within -2 or +4*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0FM001.PG0FMFYR cursor, bold; /* highlight*/
    end
  end

  if (PG0FM001.PG0FMFMO != PG0FW01.PG0FMFMO /* month changed*/
   || PG0FM001.PG0FMFDA != PG0FW01.PG0FMFDA /* day changed*/
   || PG0FM001.PG0FMFYR != PG0FW01.PG0FMFYR) /* year changed*/

     /* validate 1st fut bkg mo using ta0040*/

    PG0FW00.PG0FWGMM = PG0FM001.PG0FMFMO; /* greg month*/
    PG0FW00.PG0FWGDD = PG0FM001.PG0FMFDA; /* greg day*/
    PG0FW00.PG0FWGYY = PG0FM001.PG0FMFYR; /* greg year*/

    set TA2REC empty; /* init ta2rec*/

    TA2REC.TA2DTOPT = "GREGGREG"; /* date option*/
    TA2REC.TA2GRTYP = "A"; /* date format*/
    TA2REC.TA2GRGAN = PG0FW00.PG0FWGRG; /* move date*/

    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* call date routine*/

    if (sysVar.errorCode == "00000000") /* call successful*/
      if (TA2REC.TA2RTNCD != 0)
        converseLib.validationFailed(17); /* invalid date*/
        PGXREC.XXXMODID = "520"; /* error module id*/
        set PG0FM001.PG0FMFMO cursor, bold; /* highlight*/
        set PG0FM001.PG0FMFDA bold; /* highlight*/
        set PG0FM001.PG0FMFYR bold; /* highlight*/
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* Verify the 1st po id.*/
   /* ------------------------------------------------------------*/

  if (PG0FM001.PG0FMPM2 != PG0FW01.PG0FMPM2 /* first delivery month*/
   && PG0FM001.PG0FMPM2 != 0)              

    if (PG0FM001.PG0FMPM2 < "01"
     || PG0FM001.PG0FMPM2 > "12")
      converseLib.validationFailed(152); /* must be between 1 and 12*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0FM001.PG0FMPM2 cursor, bold; /* highlight*/
    end
  end

  if (PG0FM001.PG0FMPM1 != PG0FW01.PG0FMPM1 /* first production month*/
   && PG0FM001.PG0FMPM1 != 0)              

    if (PG0FM001.PG0FMPM1 < "01"
     || PG0FM001.PG0FMPM1 > "12")
      converseLib.validationFailed(152); /* must be between 1 and 12*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0FM001.PG0FMPM1 cursor, bold; /* highlight*/
    end
  end

  if (PG0FM001.PG0FMPYR != PG0FW01.PG0FMPYR) /* first production year*/
    PG0FW00.PG0FW-WRK-YY = PG0FM001.PG0FMPYR;
    PG0F526();
    PG0FW00.PG0FWKYR = PG0FW00.PG0FW-CURR-CCYY - PG0FW00.PG0FW-WRK-CCYY;

    if (PG0FW00.PG0FWKYR < -4
     || PG0FW00.PG0FWKYR > 2)
      converseLib.validationFailed(459); /* must be within -2 or +4*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0FM001.PG0FMPYR cursor, bold; /* highlight*/
    end
  end

  if (PG0FM001.PG0FMPYR != 0 /* year entered*/
   && PG0FM001.PG0FMPM2 == 0) /* month not entered*/
    converseLib.validationFailed(118); /* missing field*/
    PGXREC.XXXMODID = "520"; /* error module id*/
    set PG0FM001.PG0FMPM2 cursor, bold; /* highlight*/
  end

  if (PG0FM001.PG0FMPYR != 0 /* year entered*/
   && PG0FM001.PG0FMPM1 == 0) /* month not entered*/
    converseLib.validationFailed(118); /* missing field*/
    PGXREC.XXXMODID = "520"; /* error module id*/
    set PG0FM001.PG0FMPM1 cursor, bold; /* highlight*/
  end

  if (PG0FM001.PG0FMPM1 != 0 /* month entered*/
   && PG0FM001.PG0FMPM2 == 0) /* month not entered*/
    converseLib.validationFailed(118); /* missing field*/
    PGXREC.XXXMODID = "520"; /* error module id*/
    set PG0FM001.PG0FMPM2 cursor, bold; /* highlight*/
  end

  if (PG0FM001.PG0FMPM2 != 0 /* month entered*/
   && PG0FM001.PG0FMPM1 == 0) /* month not entered*/
    converseLib.validationFailed(118); /* missing field*/
    PGXREC.XXXMODID = "520"; /* error module id*/
    set PG0FM001.PG0FMPM1 cursor, bold; /* highlight*/
  end

   /* ------------------------------------------------------------*/
   /* Verify the 1st sales month.*/
   /* ------------------------------------------------------------*/

  if (PG0FM001.PG0FMSMO != PG0FW01.PG0FMSMO /* first sales month*/
   && PG0FM001.PG0FMSMO != 0)              

    if (PG0FM001.PG0FMSMO < "01"
     || PG0FM001.PG0FMSMO > "12")
      converseLib.validationFailed(152); /* must be between 1 and 12*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0FM001.PG0FMSMO cursor, bold; /* highlight*/
    end
  end

  if (PG0FM001.PG0FMSYR != PG0FW01.PG0FMSYR) /* first sales year*/
    PG0FW00.PG0FW-WRK-YY = PG0FM001.PG0FMSYR;
    PG0F526();
    PG0FW00.PG0FWKYR = PG0FW00.PG0FW-CURR-CCYY - PG0FW00.PG0FW-WRK-CCYY;

    if (PG0FW00.PG0FWKYR < -4
     || PG0FW00.PG0FWKYR > 2)
      converseLib.validationFailed(459); /* must be within -2 or +4*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0FM001.PG0FMSYR cursor, bold; /* highlight*/
    end
  end

  if (PG0FM001.PG0FMSYR != 0 /* year entered*/
   && PG0FM001.PG0FMSMO == 0) /* month not entered*/
    converseLib.validationFailed(118); /* missing field*/
    PGXREC.XXXMODID = "520"; /* error module id*/
    set PG0FM001.PG0FMSMO cursor, bold; /* highlight*/
  end

   /* ------------------------------------------------------------*/
   /* Verify the season year.*/
   /* ------------------------------------------------------------*/

  if (PG0FM001.XSNYR != PG0FW01.XSNYR) /* season year*/
    PG0FW00.PG0FW-WRK-YY = PG0FM001.XSNYR;
    PG0F526();
    PG0FW00.PG0FWKYR = PG0FW00.PG0FW-CURR-CCYY - PG0FW00.PG0FW-WRK-CCYY;

    if (PG0FW00.PG0FWKYR < -4
     || PG0FW00.PG0FWKYR > 2)
      converseLib.validationFailed(459); /* must be within -2 or +4*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0FM001.XSNYR cursor, bold; /* highlight*/
    end
  end


   /* ------------------------------------------------------------*/
   /* Verify the season.*/
   /* ------------------------------------------------------------*/

  if (PG0FM001.XSECD != PG0FW01.XSECD)

    if (PG0FM001.XSECD in XSETBL.XSECD
     && XSETBL.XXXSTAT[sysVar.arrayIndex] == "A")
      PG0FM001.XSEDESC = XSETBL.XSEDESC[sysVar.arrayIndex];
    else
      PG0FM001.XSEDESC = "UNKNOWN";
      converseLib.validationFailed(10); /* invalid value*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0FM001.XSECD cursor, bold; /* highlight*/
      set PG0FM001.XSEDESC skip, bold; /* highlight*/
    end
  end


   /* ------------------------------------------------------------*/
   /* Verify the product type.*/
   /* ------------------------------------------------------------*/

  if (PG0FM001.XPRCD != PG0FW01.XPRCD)

    if (PG0FM001.XPRCD in XPRTBL.XPRCD
     && XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      PG0FM001.XPRABRV = XPRTBL.XPRABRV[sysVar.arrayIndex];
      PG0FW00.PG0FWYPG = XPRTBL.YPGCD[sysVar.arrayIndex]; /* save type group*/
    else
      PG0FM001.XPRABRV = "UNKNOWN";
      converseLib.validationFailed(10); /* invalid value*/
      PGXREC.XXXMODID = "520"; /* error module id*/
      set PG0FM001.XPRCD cursor, bold; /* highlight*/
      set PG0FM001.XPRABRV skip, bold; /* highlight*/
    end
  end


   /* ------------------------------------------------------------*/
   /* If any errors found, return to display the message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
end // end PG0F520

// select scan type/cat/line xref
Function PG0F5201()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  set FBKREC empty;
  FBKREC.SY1STNBR = PG0FM001.PG4STNBR;
  FBKREC.SY2CLRID = " ";
  FBKREC.XDMCD = PG0FM001.XDMCD;
  FBKREC.FB8RCTYP = "B";
   /* ------------------------------------------------------------*/
   /* Select scan 1 from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4740" ("SQ", SQLCA, FBKREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* end tcs*/
   /* ------------------------------------------------------------*/
   /* If successful, fetch the row*/
   /* ------------------------------------------------------------*/

   /* begin tcs*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 || SQLCA.VAGen_SQLCODE == -811 || SQLCA.VAGen_SQLCODE == 100
    )
      return; /* return to previous process*/
    end
  end
   /* end tcs*/

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "5201"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET VFFXRF01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFBUY"; /* Data base name*/
  TA1REC.TA1TBLVU = "VFQTBS01"; /* Table view name*/
  TA1REC.TA1TBLKE = FBKREC.SY1STNBR; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PG0F5201

// sum vmsty001
Function PG0F524()
   /* ------------------------------------------------------------*/
   /* build key*/
   /* ------------------------------------------------------------*/

  set FFFREC empty;
  set FF9REC empty;
  PG0FW00.PG0FWDT3 = 0; /* zero out work date*/
  FFFREC.FFFFUNCD = "SS"; /* function code*/
  if (PG0FM001.PG0FMSYR < 57)
    PG0FW00.PG0FW3CC = 20; /* work cc*/
  else
    PG0FW00.PG0FW3CC = 19; /* work cc*/
  end
  PG0FW00.PG0FW3YR = PG0FM001.PG0FMSYR; /* work yy*/
  PG0FW00.PG0FW3MO = PG0FM001.PG0FMSMO; /* work mm*/
  FFFREC.FFFBEGMO = PG0FW00.PG0FWDT3; /* begin month*/
  PG0FW00.PG0FWDT3 = 0; /* zero out work date*/
  if (PG0FM001.PG0FMCYR < 57)
    PG0FW00.PG0FW3CC = 20; /* work cc*/
  else
    PG0FW00.PG0FW3CC = 19; /* work cc*/
  end
  PG0FW00.PG0FW3YR = PG0FM001.PG0FMCYR; /* work yy*/
  PG0FW00.PG0FW3MO = PG0FM001.PG0FMCMO; /* work mm*/
  FFFREC.FFFENDMO = PG0FW00.PG0FWDT3; /* begin month*/
  FF9REC.YSMXDV = "20"; /* xxx_sum_xdv_cd*/
  FF9REC.XCTCD = "   "; /* country code*/
  FF9REC.SY1STNBR = PG0FM001.PG4STNBR; /* style number*/
  FF9REC.SY2CLRID = " "; /* color code id*/
  FF9REC.XDMCD = " "; /* dimension code*/
   /* ------------------------------------------------------------*/
   /* Select the set to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3740" (FFFREC, SQLCA, FF9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Sum row*/

   /* ------------------------------------------------------------*/
   /* If successful*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == -305) /* No rows returned*/
      FF9REC.FF6SLFCT = 0;
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "524"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(47); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET VFFXRF01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFFXRF01"; /* Table view name*/
  TA1REC.TA1TBLKE = FF9REC.FF9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PG0F524

// DETERMINE CENTURY
Function PG0F526()
   /* ------------------------------------------------------------*/
   /* DETERMINE CENTURY AND MOVE TO WORKING STORAGE*/
   /* ------------------------------------------------------------*/

  if (PG0FW00.PG0FW-WRK-YY < 57)
    PG0FW00.PG0FW-WRK-CC = 20;
  else
    PG0FW00.PG0FW-WRK-CC = 19;
  end

end // end PG0F526

// process valid input request
Function PG0F600()
   /* ------------------------------------------------------------*/
   /* if key fields were changed set request for data flag*/
   /* ------------------------------------------------------------*/

  if (PG0FW00.PG0FWKCS == "Y") /* key changed*/
    PG0FW00.PG0FWRDS = "Y"; /* set data request switch to yes*/
    PG0FW00.PG0FWMCS = "Y"; /* clear map*/
    set PG0FW01 empty; /* reinitialise display working storage*/
    return; /* return to performing process*/
  end

   /* ------------------------------------------------------------*/
   /* if enter was pressed and no errors, display the map*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* enter was pressed*/
    PGXREC.XXXMODID = "600"; /* process number*/
    PGXREC.XXXMSGNO = 98; /* pf9 to updt*/
    set PG0FM001.PG4STNBR cursor; /* cursor to development code*/
    return; /* return to calling process*/
  end

   /* ------------------------------------------------------------*/
   /* Process the update request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf9) /* Update request*/

    XX0XS01(); /* get date and time*/

    set VSDREG01 empty;

    PG0F660(); /* Format DPRODG.VSOAUD01 "before" image*/
    PG0F680(); /* Insert DPRODG.VSOAUD01*/

    if (PG0FW00.PG0FW-VSDREG-DATA-FOUND-SW == "Y")
      PG0F620(); /* Format DPRODG.VSDREG01 for update*/
      PG0F630(); /* Update DPRODG.VSDREG01*/
    else
      PG0F640(); /* Format VSDREG01/VSRAUD01 for insert*/
      PG0F650(); /* Insert DPRODG.VSDREG01*/
    end

    PG0F670(); /* Format DPRODG.VSOAUD01 "after" image*/
    PG0F680(); /* Insert DPRODG.VSOAUD01*/


    /* ------------------------------------------------------------*/
    /* The program is at this point only if all updates were*/
    /* successful*/
    /* ------------------------------------------------------------*/

    PG0FW00.PG0FWRDS = "Y"; /* request data*/
    PG0FW00.PG0FWMCS = "Y"; /* format map*/
    set PG0FM001.PG4STNBR cursor; /* cursor to development code*/

    if (SQLCA.VAGen_SQLCODE == 0) /* return from fcsting ok*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* commit all changes*/
      PGXREC.XXXMODID = "600"; /* process number*/
      PGXREC.XXXMSGNO = 32; /* an info message, not an error*/
    end
  end


end // end PG0F600

// Format DPRODG.VSDREG01 (updt)
Function PG0F620()
   /* ------------------------------------------------------------*/
   /* Format the DPRODG.VSDREG01 record for update.*/
   /* ------------------------------------------------------------*/

  VSDREG01.VSDREG01-GROUP = PG0FW01.VSDREG01-GROUP;


   /* Product type code*/
   /* IF PG0FM001.XPRCD NE PG0FW01.XPRCD;*/
  VSDREG01.XPR-PROD-TYP-CD = PG0FM001.XPRCD;
  VSDREG01.PG-XPR-MOD-FL = "Y";
   /* END;*/


   /* Season code*/
   /* IF PG0FM001.XSECD NE PG0FW01.XSECD;*/
  VSDREG01.XSE-SESN-CD = PG0FM001.XSECD;
  VSDREG01.PG-XSE-MOD-FL = "Y";
   /* END;*/


   /* Season year*/
   /* IF PG0FM001.XSNYR NE PG0FW01.XSNYR;*/
  VSDREG01.XSN-SESN-YR-RNG = PG0FM001.XSNYR;
  VSDREG01.PG-XSN-MOD-FL = "Y";
   /* END;*/


   /* Proj c/o mo*/
   /* IF PG0FM001.PG0FMCYR NE PG0FW01.PG0FMCYR*/
   /* OR PG0FM001.PG0FMCMO NE PG0FW01.PG0FMCMO;*/

  PG0FW00.PG0FW1YR = PG0FM001.PG0FMCYR;
  PG0FW00.PG0FW1MO = PG0FM001.PG0FMCMO;
  if (PG0FM001.PG0FMCMO > 0)
    if (PG0FW00.PG0FW1YR <= 70)
      PG0FW00.PG0FW1CC = 20;
    else
      PG0FW00.PG0FW1CC = 19;
    end
  end
  VSDREG01.SY-PROJ-DOM-CLS-MO = PG0FW00.PG0FWDT1;
  PG0FW00.PG0FWDT1 = 0;
  VSDREG01.PG-DOM-CLS-MOD-FL = "Y";
   /* END;*/


   /* 1st prop bk dt*/
   /* IF PG0FM001.PG0FMBYR NE PG0FW01.PG0FMBYR*/
    /* OR PG0FM001.PG0FMBMO NE PG0FW01.PG0FMBMO*/
    /* OR PG0FM001.PG0FMBDA NE PG0FW01.PG0FMBDA;*/

  PG0FW00.PG0FWDT2 = 0;
  PG0FW00.PG0FW2YR = PG0FM001.PG0FMBYR;
  PG0FW00.PG0FW2MO = PG0FM001.PG0FMBMO;
  PG0FW00.PG0FW2DA = PG0FM001.PG0FMBDA;
  if (PG0FM001.PG0FMBMO > 0)
    if (PG0FW00.PG0FW2YR <= 70)
      PG0FW00.PG0FW2CC = 20;
    else
      PG0FW00.PG0FW2CC = 19;
    end
  end
  VSDREG01.SY-PROP-OFFER-BDT = PG0FW00.PG0FWDT2;
  PG0FW00.PG0FWDT2 = 0;
  VSDREG01.PG-PROP-OFDT-MODFL = "Y";
   /* END;*/


   /* 1st futr bk dt*/
   /* IF PG0FM001.PG0FMFYR NE PG0FW01.PG0FMFYR*/
    /* OR PG0FM001.PG0FMFMO NE PG0FW01.PG0FMFMO*/
   /* OR PG0FM001.PG0FMFDA NE PG0FW01.PG0FMFDA;*/

  PG0FW00.PG0FW2YR = PG0FM001.PG0FMFYR;
  PG0FW00.PG0FW2MO = PG0FM001.PG0FMFMO;
  PG0FW00.PG0FW2DA = PG0FM001.PG0FMFDA;
  if (PG0FM001.PG0FMFMO > 0)
    if (PG0FW00.PG0FW2YR <= 70)
      PG0FW00.PG0FW2CC = 20;
    else
      PG0FW00.PG0FW2CC = 19;
    end
  end
  VSDREG01.SY-FUTR-OFFER-BDT = PG0FW00.PG0FWDT2;
  PG0FW00.PG0FWDT2 = 0;
  VSDREG01.PG-FUTR-OFDT-MODFL = "Y";
   /* END;*/


   /* 1st po id*/
   /* IF PG0FM001.PG0FMPYR NE PG0FW01.PG0FMPYR*/
    /* OR PG0FM001.PG0FMPM1 NE PG0FW01.PG0FMPM1*/
    /* OR PG0FM001.PG0FMPM2 NE PG0FW01.PG0FMPM2;*/

  PG0FW00.PG0FW1YR = PG0FM001.PG0FMPYR;
  PG0FW00.PG0FW1MO = PG0FM001.PG0FMPM1;
  if (PG0FM001.PG0FMPM1 > 0)
    if (PG0FW00.PG0FW1YR <= 70)
      PG0FW00.PG0FW1CC = 20;
    else
      PG0FW00.PG0FW1CC = 19;
    end
  end
  VSDREG01.PG-FRST-PRDCTN-MO = PG0FW00.PG0FWDT1;
  PG0FW00.PG0FWDT1 = 0;

  PG0FW00.PG0FW1YR = PG0FM001.PG0FMPYR;
  PG0FW00.PG0FW1MO = PG0FM001.PG0FMPM2;
  if (PG0FM001.PG0FMPM2 > 0)
    if (PG0FW00.PG0FW1YR <= 70)
      PG0FW00.PG0FW1CC = 20;
    else
      PG0FW00.PG0FW1CC = 19;
    end
  end
  if (PG0FM001.PG0FMPM2 == 01 /* if the deliver mo is jan*/
   || PG0FM001.PG0FMPM2 == 02) /* or feb, the deliver year*/
    PG0FW00.PG0FWDT1 = PG0FW00.PG0FWDT1 + 100;
  end
  VSDREG01.PG-FRST-DLVR-MO = PG0FW00.PG0FWDT1;
  PG0FW00.PG0FWDT1 = 0;

  VSDREG01.PG-FRST-PO-MOD-FL = "Y";
   /* END;*/


   /* Safety stock cls*/
   /* IF PG0FM001.SY2SSCIN NE PG0FW01.SY2SSCIN;*/
  VSDREG01.SY-SFTY-STKCLS-IND = PG0FM001.SY2SSCIN;
  VSDREG01.PG-SFTY-STK-MOD-FL = "Y";
   /* END;*/


   /* 1st sales mo*/
   /* IF PG0FM001.PG0FMSYR NE PG0FW01.PG0FMSYR*/
   /* OR PG0FM001.PG0FMSMO NE PG0FW01.PG0FMSMO;*/

  PG0FW00.PG0FW1YR = PG0FM001.PG0FMSYR;
  PG0FW00.PG0FW1MO = PG0FM001.PG0FMSMO;
  if (PG0FM001.PG0FMSMO > 0)
    if (PG0FW00.PG0FW1YR <= 70)
      PG0FW00.PG0FW1CC = 20;
    else
      PG0FW00.PG0FW1CC = 19;
    end
  end
  VSDREG01.PG-FRST-SLS-MO = PG0FW00.PG0FWDT1;
  PG0FW00.PG0FWDT1 = 0;
  VSDREG01.PG-FRST-SLS-MOD-FL = "Y";
   /* END;*/


   /* Show on fcst*/
   /* IF PG0FM001.PG4RFCFL NE PG0FW01.PG4RFCFL;*/
  VSDREG01.PG-RPT-FCST-FL = PG0FM001.PG4RFCFL;
  VSDREG01.PG-RPT-FCST-MOD-FL = "Y";
   /* END;*/


   /* ZZ change fields*/
  VSDREG01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
  VSDREG01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;


end // end PG0F620

// Update DPRODG.VSDREG01 row
Function PG0F630()
   /* ------------------------------------------------------------*/
   /* Update the table row.*/
   /* ------------------------------------------------------------*/

  try
    call "IO7260" ("U ", SQLCA, VSDREG01) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      PG0FW00.PG0FWRDS = "Y"; /* Request data*/
      PG0FW00.PG0FWMCS = "Y"; /* Format map*/
      PGXREC.XXXMSGNO = 46; /* Data updated by another*/
      PGXREC.XXXMODID = "630"; /* Module identification*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Rollback database changes*/
      exit stack; /* Exit to obtain data*/
    end
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback database changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "630"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE DPRODG.VSDREG01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSDREG01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSDREG01.VSDREG01-KEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PG0FW00.PG0FWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end PG0F630

// Format DPRODG.VSDREG01 (insrt)
Function PG0F640()
   /* ------------------------------------------------------------*/
   /* Format the DPRODG.VSDREG01 record for insert.*/
   /* ------------------------------------------------------------*/

  set VSDREG01 empty;

  VSDREG01.XDR-PROD-REG-CD = "02";
  VSDREG01.PG-STYDV-NBR = PG0FM001.PG4STNBR;


   /* Product type code*/
   /* IF PG0FM001.XPRCD NE PG0FW01.XPRCD;*/
  VSDREG01.XPR-PROD-TYP-CD = PG0FM001.XPRCD;
  VSDREG01.PG-XPR-MOD-FL = "Y";
   /* ELSE;*/
    /* MOVE 'N' TO VSDREG01.PG-XPR-MOD-FL;*/
   /* END;*/


   /* Season code*/
   /* IF PG0FM001.XSECD NE PG0FW01.XSECD;*/
  VSDREG01.XSE-SESN-CD = PG0FM001.XSECD;
  VSDREG01.PG-XSE-MOD-FL = "Y";
   /* ELSE;*/
   /* MOVE 'N' TO VSDREG01.PG-XSE-MOD-FL;*/
   /* END;*/


   /* Season year*/
   /* IF PG0FM001.XSNYR NE PG0FW01.XSNYR;*/
  VSDREG01.XSN-SESN-YR-RNG = PG0FM001.XSNYR;
  VSDREG01.PG-XSN-MOD-FL = "Y";
   /* ELSE;*/
   /* MOVE 'N' TO VSDREG01.PG-XSN-MOD-FL;*/
   /* END;*/


   /* Proj c/o mo*/
   /* IF PG0FM001.PG0FMCYR NE PG0FW01.PG0FMCYR*/
    /* OR PG0FM001.PG0FMCMO NE PG0FW01.PG0FMCMO;*/

  PG0FW00.PG0FW1YR = PG0FM001.PG0FMCYR;
  PG0FW00.PG0FW1MO = PG0FM001.PG0FMCMO;
  if (PG0FW00.PG0FW1YR <= 70)
    PG0FW00.PG0FW1CC = 20;
  else
    PG0FW00.PG0FW1CC = 19;
  end
  VSDREG01.SY-PROJ-DOM-CLS-MO = PG0FW00.PG0FWDT1;
  VSDREG01.PG-DOM-CLS-MOD-FL = "Y";
   /* ELSE;*/
    /* MOVE 'N' TO VSDREG01.PG-DOM-CLS-MOD-FL;*/
   /* END;*/


   /* 1st prop bk dt*/
   /* IF PG0FM001.PG0FMBYR NE PG0FW01.PG0FMBYR*/
    /* OR PG0FM001.PG0FMBMO NE PG0FW01.PG0FMBMO*/
    /* OR PG0FM001.PG0FMBDA NE PG0FW01.PG0FMBDA;*/

  PG0FW00.PG0FWDT2 = 0;
  PG0FW00.PG0FW2YR = PG0FM001.PG0FMBYR;
  PG0FW00.PG0FW2MO = PG0FM001.PG0FMBMO;
  PG0FW00.PG0FW2DA = PG0FM001.PG0FMBDA;
  if (PG0FW00.PG0FW2MO > 0)
    if (PG0FW00.PG0FW2YR <= 70)
      PG0FW00.PG0FW2CC = 20;
    else
      PG0FW00.PG0FW2CC = 19;
    end
  end
  VSDREG01.SY-PROP-OFFER-BDT = PG0FW00.PG0FWDT2;
  PG0FW00.PG0FWDT2 = 0;
  VSDREG01.PG-PROP-OFDT-MODFL = "Y";
   /* ELSE;*/
    /* MOVE 'N' TO VSDREG01.PG-PROP-OFDT-MODFL;*/
   /* END;*/


   /* 1st futr bk dt*/
   /* IF PG0FM001.PG0FMFYR NE PG0FW01.PG0FMFYR*/
    /* OR PG0FM001.PG0FMFMO NE PG0FW01.PG0FMFMO*/
    /* OR PG0FM001.PG0FMFDA NE PG0FW01.PG0FMFDA;*/

  PG0FW00.PG0FW2YR = PG0FM001.PG0FMFYR;
  PG0FW00.PG0FW2MO = PG0FM001.PG0FMFMO;
  PG0FW00.PG0FW2DA = PG0FM001.PG0FMFDA;
  if (PG0FW00.PG0FW2YR <= 70)
    PG0FW00.PG0FW2CC = 20;
  else
    PG0FW00.PG0FW2CC = 19;
  end
  VSDREG01.SY-FUTR-OFFER-BDT = PG0FW00.PG0FWDT2;
  VSDREG01.PG-FUTR-OFDT-MODFL = "Y";
   /* ELSE;*/
    /* MOVE 'N' TO VSDREG01.PG-FUTR-OFDT-MODFL;*/
   /* END;*/


   /* 1st po id*/
   /* IF PG0FM001.PG0FMPYR NE PG0FW01.PG0FMPYR*/
    /* OR PG0FM001.PG0FMPM1 NE PG0FW01.PG0FMPM1*/
    /* OR PG0FM001.PG0FMPM2 NE PG0FW01.PG0FMPM2;*/

  PG0FW00.PG0FW1YR = PG0FM001.PG0FMPYR;
  PG0FW00.PG0FW1MO = PG0FM001.PG0FMPM1;
  if (PG0FW00.PG0FW1YR <= 70)
    PG0FW00.PG0FW1CC = 20;
  else
    PG0FW00.PG0FW1CC = 19;
  end
  VSDREG01.PG-FRST-PRDCTN-MO = PG0FW00.PG0FWDT1;

  PG0FW00.PG0FW1YR = PG0FM001.PG0FMPYR;
  PG0FW00.PG0FW1MO = PG0FM001.PG0FMPM2;
  if (PG0FW00.PG0FW1YR <= 70)
    PG0FW00.PG0FW1CC = 20;
  else
    PG0FW00.PG0FW1CC = 19;
  end
  if (PG0FM001.PG0FMPM2 == 01 /* if the deliver mo is jan*/
   || PG0FM001.PG0FMPM2 == 02) /* or feb, the deliver year*/
    PG0FW00.PG0FWDT1 = PG0FW00.PG0FWDT1 + 100;
  end
  VSDREG01.PG-FRST-DLVR-MO = PG0FW00.PG0FWDT1;

  VSDREG01.PG-FRST-PO-MOD-FL = "Y";
   /* ELSE;*/
    /* MOVE 'N' TO VSDREG01.PG-FRST-PO-MOD-FL;*/
   /* END;*/


   /* Safety stock cls*/
   /* IF PG0FM001.SY2SSCIN NE PG0FW01.SY2SSCIN;*/
  VSDREG01.SY-SFTY-STKCLS-IND = PG0FM001.SY2SSCIN;
  VSDREG01.PG-SFTY-STK-MOD-FL = "Y";
   /* ELSE;*/
    /* MOVE 'N' TO VSDREG01.PG-SFTY-STK-MOD-FL;*/
   /* END;*/


   /* 1st sales mo*/
   /* IF PG0FM001.PG0FMSYR NE PG0FW01.PG0FMSYR*/
   /* OR PG0FM001.PG0FMSMO NE PG0FW01.PG0FMSMO;*/

  PG0FW00.PG0FW1YR = PG0FM001.PG0FMSYR;
  PG0FW00.PG0FW1MO = PG0FM001.PG0FMSMO;
  if (PG0FW00.PG0FW1YR <= 70)
    PG0FW00.PG0FW1CC = 20;
  else
    PG0FW00.PG0FW1CC = 19;
  end
  VSDREG01.PG-FRST-SLS-MO = PG0FW00.PG0FWDT1;
  VSDREG01.PG-FRST-SLS-MOD-FL = "Y";
   /* ELSE;*/
    /* MOVE 'N' TO VSDREG01.PG-FRST-SLS-MOD-FL;*/
   /* END;*/


   /* Show on fcst*/
   /* IF PG0FM001.PG4RFCFL NE PG0FW01.PG4RFCFL;*/
  VSDREG01.PG-RPT-FCST-FL = PG0FM001.PG4RFCFL;
  VSDREG01.PG-RPT-FCST-MOD-FL = "Y";
   /* ELSE;*/
    /* MOVE 'N' TO VSDREG01.PG-RPT-FCST-MOD-FL;*/
   /* END;*/


   /* ZZ fields*/
  VSDREG01.ZZ-SDT = XX0XW01.XX0XWDAT;
  VSDREG01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
  VSDREG01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
  VSDREG01.ZZ-CHNG-CNT = 0;


end // end PG0F640

// Insert DPRODG.VSDREG01 row
Function PG0F650()
   /* ------------------------------------------------------------*/
   /* Insert a row to the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO7260" ("A ", SQLCA, VSDREG01) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    return;
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback database changes*/


  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "650"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT DPRODG.VSDREG01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSDREG01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSDREG01.VSDREG01-KEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PG0FW00.PG0FWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end PG0F650

// Format VSOAUD01 "before" recd
Function PG0F660()
   /* ------------------------------------------------------------*/
   /* Format the "before" image for insert to DPRODG.VSRAUD01.*/
   /* ------------------------------------------------------------*/

  set VSOAUD01 empty;

  VSOAUD01.XDR-PROD-REG-CD = "02";
  VSOAUD01.PG-STYDV-NBR = PG0FM001.PG4STNBR;

  if (PG0FW00.PG0FW-VSDREG-DATA-FOUND-SW == "Y")
    VSOAUD01.PG-AUD-TYP-IND = "C"; /* Change*/
  else
    VSOAUD01.PG-AUD-TYP-IND = "A"; /* Add*/
  end

  VSOAUD01.PG-AUD-STAT-FL = "Y"; /* Before image*/
  VSOAUD01.XXX-USER-ID = COMMAREA.CAUSERID;
  VSOAUD01.ZZ-SDT = XX0XW01.XX0XWDAT;
  VSOAUD01.ZZ-SETUP-HHMMSS = XX0XW01.XX0XWHMS;

  VSOAUD01.PG-AUD-FILLR-COMNT = PG0FW01.PG-AUD-FILLR-COMNT;


end // end PG0F660

// Format VSOAUD01 "after" recd
Function PG0F670()
   /* ------------------------------------------------------------*/
   /* Format the "after" image for insert to DPRODG.VSRAUD01.*/
   /* ------------------------------------------------------------*/

  set VSOAUD01 empty;
  set PG0FW02 empty;

  VSOAUD01.XDR-PROD-REG-CD = "02";
  VSOAUD01.PG-STYDV-NBR = PG0FM001.PG4STNBR;

  if (PG0FW00.PG0FW-VSDREG-DATA-FOUND-SW == "Y")
    VSOAUD01.PG-AUD-TYP-IND = "C"; /* Change*/
  else
    VSOAUD01.PG-AUD-TYP-IND = "A"; /* Change*/
  end

  VSOAUD01.PG-AUD-STAT-FL = "N"; /* Before image*/
  VSOAUD01.XXX-USER-ID = COMMAREA.CAUSERID;
  VSOAUD01.ZZ-SDT = XX0XW01.XX0XWDAT;
  VSOAUD01.ZZ-SETUP-HHMMSS = XX0XW01.XX0XWHMS;

   /* ------------------------------------------------------------*/
   /* Format the pg-aud-filler-comnt area.*/
   /* ------------------------------------------------------------*/

  PG0FW02.XPR-PROD-TYP-CD = PG0FM001.XPRCD;
  PG0FW02.XSE-SESN-CD = PG0FM001.XSECD;
  PG0FW02.XSN-SESN-YR-RNG = PG0FM001.XSNYR;

  if (PG0FM001.PG0FMCYR > 0
   || PG0FM001.PG0FMCMO > 0) /* If data entered*/
    PG0FW00.PG0FW1YR = PG0FM001.PG0FMCYR;
    PG0FW00.PG0FW1MO = PG0FM001.PG0FMCMO;
    if (PG0FW00.PG0FW1YR <= 70)
      PG0FW00.PG0FW1CC = 20;
    else
      PG0FW00.PG0FW1CC = 19;
    end
    PG0FW02.SY-PROJ-DOM-CLS-MO = PG0FW00.PG0FWDT1;
  end

  if (PG0FM001.PG0FMBYR > 0
   || PG0FM001.PG0FMBMO > 0
   || PG0FM001.PG0FMBDA > 0) /* If data entered*/
    PG0FW00.PG0FW2YR = PG0FM001.PG0FMBYR;
    PG0FW00.PG0FW2MO = PG0FM001.PG0FMBMO;
    PG0FW00.PG0FW2DA = PG0FM001.PG0FMBDA;
    if (PG0FW00.PG0FW2YR <= 70)
      PG0FW00.PG0FW2CC = 20;
    else
      PG0FW00.PG0FW2CC = 19;
    end
    PG0FW02.SY-PROP-OFFER-BDT = PG0FW00.PG0FWDT2;
  end

  if (PG0FM001.PG0FMFYR > 0
   || PG0FM001.PG0FMFMO > 0
   || PG0FM001.PG0FMFDA > 0) /* If data entered*/
    PG0FW00.PG0FW2YR = PG0FM001.PG0FMFYR;
    PG0FW00.PG0FW2MO = PG0FM001.PG0FMFMO;
    PG0FW00.PG0FW2DA = PG0FM001.PG0FMFDA;
    if (PG0FW00.PG0FW2YR <= 70)
      PG0FW00.PG0FW2CC = 20;
    else
      PG0FW00.PG0FW2CC = 19;
    end
    PG0FW02.SY-FUTR-OFFER-BDT = PG0FW00.PG0FWDT2;
  end

  if (PG0FM001.PG0FMPYR > 0
   || PG0FM001.PG0FMPM1 > 0)
    PG0FW00.PG0FW1YR = PG0FM001.PG0FMPYR;
    PG0FW00.PG0FW1MO = PG0FM001.PG0FMPM1;
    if (PG0FW00.PG0FW1YR <= 70)
      PG0FW00.PG0FW1CC = 20;
    else
      PG0FW00.PG0FW1CC = 19;
    end
    PG0FW02.PG-FRST-PRDCTN-MO = PG0FW00.PG0FWDT1;
  end

  if (PG0FM001.PG0FMPYR > 0
   || PG0FM001.PG0FMPM2 > 0)
    PG0FW00.PG0FW1YR = PG0FM001.PG0FMPYR;
    PG0FW00.PG0FW1MO = PG0FM001.PG0FMPM2;
    if (PG0FW00.PG0FW1YR <= 70)
      PG0FW00.PG0FW1CC = 20;
    else
      PG0FW00.PG0FW1CC = 19;
    end
    if (PG0FM001.PG0FMPM2 == 01 /* if the deliver mo is jan*/
     || PG0FM001.PG0FMPM2 == 02) /* or feb, the deliver year*/
      PG0FW00.PG0FWDT1 = PG0FW00.PG0FWDT1 + 100;
    end
    PG0FW02.PG-FRST-DLVR-MO = PG0FW00.PG0FWDT1;
  end

  PG0FW02.SY-SFTY-STKCLS-IND = PG0FM001.SY2SSCIN;

  if (PG0FM001.PG0FMSYR > 0
   || PG0FM001.PG0FMSMO > 0) /* If data entered*/
    PG0FW00.PG0FW1YR = PG0FM001.PG0FMSYR;
    PG0FW00.PG0FW1MO = PG0FM001.PG0FMSMO;
    if (PG0FW00.PG0FW2YR <= 70)
      PG0FW00.PG0FW1CC = 20;
    else
      PG0FW00.PG0FW1CC = 19;
    end
    PG0FW02.PG-FRST-SLS-MO = PG0FW00.PG0FWDT1;
  end

  PG0FW02.PG-RPT-FCST-FL = PG0FM001.PG4RFCFL;


  VSOAUD01.PG-AUD-FILLR-COMNT = PG0FW02.PG-AUD-FILLR-COMNT;


end // end PG0F670

// Insert DPRODG.VSOAUD01 row
Function PG0F680()
   /* ------------------------------------------------------------*/
   /* Insert a row to the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO7270" ("A ", SQLCA, VSOAUD01) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    return;
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Rollback database changes*/


  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "680"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT DPRODG.VSRAUD01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRAUD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSOAUD01.VSOAUD01-GROUP; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PG0FW00.PG0FWRDS = "N"; /* dont request data*/
  exit stack; /* Exit to display map*/


end // end PG0F680

// get factory name
Function PG0FS01()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set FY1REC empty;
  FY1REC.XGPCD = "02";
  FY1REC.XXXSTAT = "A";
  FY1REC.FY1FCTYC = PG0FW00.FY1FCTYC;
  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PGXREC.XXXMODID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT FACTORY   ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PGXREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFACTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/
end // end PG0FS01

//*** RECORD=PG0FW00 ****
// working storage for PG0F -- style devel inquiry/maintenance
// ***********************
Record PG0FW00 type basicRecord
  10 PG0FWRDS PG0FWRDS ; 
  10 PG0FWMCS PG0FWMCS ; 
  10 PG0FWKCS PG0FWKCS ; 
  10 PG0FWDCS PG0FWDCS ; 
  10 PG0FWKYR PG0FWKYR ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 PG0FWDT1 PG0FWDT1 ; 
    15 PG0FW1CC PG0FW1CC ; 
    15 PG0FW1YR PG0FW1YR ; 
    15 PG0FW1MO PG0FW1MO ; 
  10 PG0FWDT2 PG0FWDT2 ; 
    15 PG0FW2CC PG0FW2CC ; 
    15 PG0FW2YR PG0FW2YR ; 
    15 PG0FW2MO PG0FW2MO ; 
    15 PG0FW2DA PG0FW2DA ; 
  10 PG0FWDT3 PG0FWDT3 ; 
    15 PG0FW3CC PG0FW3CC ; 
    15 PG0FW3YR PG0FW3YR ; 
    15 PG0FW3MO PG0FW3MO ; 
  10 PG0FWGRG PG0FWGRG ; 
    15 PG0FWGMM PG0FWGMM ; 
    15 PG0FWGDD PG0FWGDD ; 
    15 PG0FWGYY PG0FWGYY ; 
  10 PG4CNFDT PG4CNFDT ; 
  10 PG4SSLDT PG4SSLDT ; 
  10 PG4IDT PG4IDT ; 
  10 PG0FWYPG PG0FWYPG ; 
  10 PG0FW-VALID-SGRP-FLAG PG0FW-VALID-SGRP-FLAG ; 
  10 PG0FW-PREV-ERR-MSG PG0FW-PREV-ERR-MSG ; 
  10 PG0FW-DATA-WAS-FOUND-SW PG0FW-DATA-WAS-FOUND-SW ; 
  10 PG0FW-VSYDVL-DATA-FOUND-SW PG0FW-VSYDVL-DATA-FOUND-SW ; 
  10 PG0FW-VSDREG-DATA-FOUND-SW PG0FW-VSDREG-DATA-FOUND-SW ; 
  10 PG0FW-CURR-CCYY PG0FW-CURR-CCYY ; 
    15 PG0FW-CURR-CC PG0FW-CURR-CC ; 
    15 PG0FW-CURR-YY PG0FW-CURR-YY ; 
  10 PG0FW-WRK-CCYY PG0FW-WRK-CCYY ; 
    15 PG0FW-WRK-CC PG0FW-WRK-CC ; 
    15 PG0FW-WRK-YY PG0FW-WRK-YY ; 
end // end PG0FW00

//*** RECORD=PG0FW01 ****
// display working storage for PG0F -- style devel inq/maint
// ***********************
Record PG0FW01 type basicRecord
  5 PG0FWGRP PG0FWGRP ; 
    10 PG4STNBR PG4STNBR ; 
    10 XPRCD XPRCD ; 
    10 XPLCD XPLCD ; 
    10 XPCCD XPCCD ; 
    10 XGACD XGACD ; 
    10 XDMCD XDMCD ; 
    10 XSUCD XSUCD ; 
    10 XSPCD XSPCD ; 
    10 XSECD XSECD ; 
    10 XSNYR XSNYR ; 
    10 XOGCD XOGCD ; 
    10 XDVCD XDVCD ; 
    10 XCNCD XCNCD ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 PG0FMSYR PG0FMSYR ; 
    10 PG0FMSMO PG0FMSMO ; 
    10 PG0FMPYR PG0FMPYR ; 
    10 PG0FMPM1 PG0FMPM1 ; 
    10 PG0FMPM2 PG0FMPM2 ; 
    10 PG0FMFYR PG0FMFYR ; 
    10 PG0FMFMO PG0FMFMO ; 
    10 PG0FMFDA PG0FMFDA ; 
    10 PG0FMBYR PG0FMBYR ; 
    10 PG0FMBMO PG0FMBMO ; 
    10 PG0FMBDA PG0FMBDA ; 
    10 SY2SSCIN SY2SSCIN ; 
    10 PG0FMCYR PG0FMCYR ; 
    10 PG0FMCMO PG0FMCMO ; 
    10 PG0FMNYR PG0FMNYR ; 
    10 PG0FMNMO PG0FMNMO ; 
    10 PG4RFCFL PG4RFCFL ; 
    10 SYBSTGNB SYBSTGNB ; 
    10 PG4SZRNG PG4SZRNG ; 
    10 PG-AUD-FILLR-COMNT PG-AUD-FILLR-COMNT ; 
    10 VSDREG01-GROUP VSDREG01-GROUP ; 
end // end PG0FW01

//*** RECORD=PG0FW02 ****
// ************************************************************
// Record that will be written to the PG-AUD-FILLR-COMNT field
// in DPRODG.VSOAUD01.
// ************************************************************
// ***********************
Record PG0FW02 type basicRecord
  5 PG-AUD-FILLR-COMNT PG-AUD-FILLR-COMNT ; 
    10 XPR-PROD-TYP-CD XPR-PROD-TYP-CD ; 
    10 XSE-SESN-CD XSE-SESN-CD ; 
    10 XSN-SESN-YR-RNG XSN-SESN-YR-RNG ; 
    10 SY-PROJ-DOM-CLS-MO SY-PROJ-DOM-CLS-MO ; 
    10 SY-PROP-OFFER-BDT SY-PROP-OFFER-BDT ; 
    10 SY-FUTR-OFFER-BDT SY-FUTR-OFFER-BDT ; 
    10 PG-FRST-PRDCTN-MO PG-FRST-PRDCTN-MO ; 
    10 PG-FRST-DLVR-MO PG-FRST-DLVR-MO ; 
    10 SY-SFTY-STKCLS-IND SY-SFTY-STKCLS-IND ; 
    10 PG-FRST-SLS-MO PG-FRST-SLS-MO ; 
    10 PG-RPT-FCST-FL PG-RPT-FCST-FL ; 
    10 * char(30) ; 
end // end PG0FW02

//*** RECORD=VSDREG01 ****
// *******************  STYLE  TABLE  *************************
// 
// DB2 TABLE:           DPRODG.VSDREG01
// 
// COPYLIB MEMBER:      DSDREG01
// IO MODULE:           IO7260
// 
// KEY TO DB2 TABLE:    XDR_PROD_REG_CD
//                      PG_STYDV_NBR
// 
// DATE CREATED:        JULY 11, 1994
// 
// MAINTENANCE LOG:
// 
// DATE     INIT       COMMENTS
// -------- ------     -------------------------------------
// 07/11/94 JALLE1     created csp record
// ************************************************************
// ************************
Record VSDREG01 type basicRecord
  5 VSDREG01-GROUP VSDREG01-GROUP ; 
    10 VSDREG01-KEY VSDREG01-KEY ; 
      15 XDR-PROD-REG-CD XDR-PROD-REG-CD ; 
      15 PG-STYDV-NBR PG-STYDV-NBR ; 
    10 XPR-PROD-TYP-CD XPR-PROD-TYP-CD ; 
    10 PG-XPR-MOD-FL PG-XPR-MOD-FL ; 
    10 XSE-SESN-CD XSE-SESN-CD ; 
    10 PG-XSE-MOD-FL PG-XSE-MOD-FL ; 
    10 XSN-SESN-YR-RNG XSN-SESN-YR-RNG ; 
    10 PG-XSN-MOD-FL PG-XSN-MOD-FL ; 
    10 SY-PROJ-DOM-CLS-MO SY-PROJ-DOM-CLS-MO ; 
    10 PG-DOM-CLS-MOD-FL PG-DOM-CLS-MOD-FL ; 
    10 SY-PROP-OFFER-BDT SY-PROP-OFFER-BDT ; 
    10 PG-PROP-OFDT-MODFL PG-PROP-OFDT-MODFL ; 
    10 SY-FUTR-OFFER-BDT SY-FUTR-OFFER-BDT ; 
    10 PG-FUTR-OFDT-MODFL PG-FUTR-OFDT-MODFL ; 
    10 PG-FRST-PRDCTN-MO PG-FRST-PRDCTN-MO ; 
    10 PG-FRST-DLVR-MO PG-FRST-DLVR-MO ; 
    10 PG-FRST-PO-MOD-FL PG-FRST-PO-MOD-FL ; 
    10 SY-SFTY-STKCLS-IND SY-SFTY-STKCLS-IND ; 
    10 PG-SFTY-STK-MOD-FL PG-SFTY-STK-MOD-FL ; 
    10 PG-FRST-SLS-MO PG-FRST-SLS-MO ; 
    10 PG-FRST-SLS-MOD-FL PG-FRST-SLS-MOD-FL ; 
    10 PG-RPT-FCST-FL PG-RPT-FCST-FL ; 
    10 PG-RPT-FCST-MOD-FL PG-RPT-FCST-MOD-FL ; 
    10 ZZ-SDT ZZ-SDT ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    10 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    10 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end VSDREG01

//*** RECORD=VSOAUD01 ****
// *******************  STYLE  TABLE  *************************
// 
// DB2 TABLE:           DPRODG.VSOAUD01
// 
// COPYLIB MEMBER:      DSOAUD01
// IO MODULE:           IO7270
// 
// KEY TO DB2 TABLE:
// 
// 
// DATE CREATED:        JULY 11, 1994
// 
// MAINTENANCE LOG:
// 
// DATE     INIT       COMMENTS
// -------- ------     -------------------------------------
// 07/11/94 JALLE1     created csp record
// ************************************************************
// ************************
Record VSOAUD01 type basicRecord
  5 VSOAUD01-GROUP VSOAUD01-GROUP ; 
    10 XDR-PROD-REG-CD XDR-PROD-REG-CD ; 
    10 PG-STYDV-NBR PG-STYDV-NBR ; 
    10 PG-AUD-TYP-IND PG-AUD-TYP-IND ; 
    10 PG-AUD-STAT-FL PG-AUD-STAT-FL ; 
    10 XXX-USER-ID XXX-USER-ID ; 
    10 ZZ-SDT ZZ-SDT ; 
    10 ZZ-SETUP-HHMMSS ZZ-SETUP-HHMMSS ; 
    10 PG-AUD-FILLR-COMNT PG-AUD-FILLR-COMNT ; 
end // end VSOAUD01

// PG_AUD_FILLR_COMNT
DataItem PG-AUD-FILLR-COMNT char(62)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PG_AUD_STAT_FL
DataItem PG-AUD-STAT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PG_AUD_TYP_IND
DataItem PG-AUD-TYP-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PG-DOM-CLS-MOD-FL
DataItem PG-DOM-CLS-MOD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PG_FRST_DLVR_MO
DataItem PG-FRST-DLVR-MO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PG_FRST_PO_MOD_FL
DataItem PG-FRST-PO-MOD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PG_FRST_PRDCTN_MO
DataItem PG-FRST-PRDCTN-MO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PG_FRST_SLS_MO
DataItem PG-FRST-SLS-MO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PG_FRST_SLS_MOD_FL
DataItem PG-FRST-SLS-MOD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PG_FUTR_OFDT_MODFL
DataItem PG-FUTR-OFDT-MODFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PG_PROP_OFDT_MODFL
DataItem PG-PROP-OFDT-MODFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PG_RPT_FCST_FL
DataItem PG-RPT-FCST-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PG_RPT_FCST_MOD_FL
DataItem PG-RPT-FCST-MOD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PG_SFTY_STK_MOD_FL
DataItem PG-SFTY-STK-MOD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PG_XPR_MOD_FL
DataItem PG-XPR-MOD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PG_XSE_MOD_FL
DataItem PG-XSE-MOD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PG_XSN_MOD_FL
DataItem PG-XSN-MOD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first prop day
DataItem PG0FMBDA num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// prop booking month
DataItem PG0FMBMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// prop booking year
DataItem PG0FMBYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dom close out month
DataItem PG0FMCMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dom close out year
DataItem PG0FMCYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// first futures day
DataItem PG0FMFDA num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// future booking month
DataItem PG0FMFMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// future booking year
DataItem PG0FMFYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// nil close out month
DataItem PG0FMNMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// nil close out year
DataItem PG0FMNYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// first prod month
DataItem PG0FMPM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// first deliv month
DataItem PG0FMPM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// first prod year
DataItem PG0FMPYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// first sales month
DataItem PG0FMSMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// first sales year
DataItem PG0FMSYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PG0FW-CURR-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PG0FW-CURR-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PG0FW-CURR-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data was found switch
DataItem PG0FW-DATA-WAS-FOUND-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous err message
DataItem PG0FW-PREV-ERR-MSG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// valid style group flag
DataItem PG0FW-VALID-SGRP-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VSYREG01 found switch
DataItem PG0FW-VSDREG-DATA-FOUND-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VSYDVL01 found switch
DataItem PG0FW-VSYDVL-DATA-FOUND-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PG0FW-WRK-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PG0FW-WRK-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PG0FW-WRK-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// breakout century yy mm
DataItem PG0FW1CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// breakout month yy mm
DataItem PG0FW1MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// breakout year yy mm
DataItem PG0FW1YR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// breakout century yy mm dd
DataItem PG0FW2CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// breakout day yy mm dd
DataItem PG0FW2DA num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// breakout month yy mm dd
DataItem PG0FW2MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// breakout year yy mm dd
DataItem PG0FW2YR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century for sum vmsty001
DataItem PG0FW3CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mmfor sum vmsty001
DataItem PG0FW3MO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// yy for sum vmsty001
DataItem PG0FW3YR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data changed switch
DataItem PG0FWDCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// breakout date yy mm
DataItem PG0FWDT1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// breakout date yy mm dd
DataItem PG0FWDT2 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cc yy mm for sum vmsty001
DataItem PG0FWDT3 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// greg dd
DataItem PG0FWGDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// greg mm
DataItem PG0FWGMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date in greg format (mmddyy)
DataItem PG0FWGRG num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level for work rec
DataItem PG0FWGRP char(224)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// greg yy
DataItem PG0FWGYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// key changed switch
DataItem PG0FWKCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work year
DataItem PG0FWKYR decimal(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// clear map switch
DataItem PG0FWMCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// request data switch
DataItem PG0FWRDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// type group code
DataItem PG0FWYPG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data group item entire row
DataItem VSDREG01-GROUP char(62)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key into Table
DataItem VSDREG01-KEY char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data group item entire row
DataItem VSOAUD01-GROUP char(88)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

