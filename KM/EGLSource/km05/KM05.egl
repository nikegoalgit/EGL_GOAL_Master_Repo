package km05;

import corpcom1.CAMSG;
import corpcom1.CATOAP;
import corpcom2.XGPREC;
import corpcom2.XX0XW01;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XSSM003;
import corpcom4.XX0XS01;
import corpcom5.*;
import corpcom6.SQLCA;
import corpx1.XATCD;
import corpx1.XAUTBL;
import corpx1.XLBCD;
import corpx1.XLBTBL;
import corpx1.XLBZPFX;
import corpx2.XXXZIP;
import kl.common.KIZTBL;
import ku.common.KU0XW10;
import ku.common.KU0XW30;
import ku.common.KUCBLAID;
import ku.common.KUCCCAID;
import ku.common.KUCCOAID;
import ku.common.KUCCONM;
import ku.common.KUCREC;
import ku.common.KUMREC;
import ku.common.KURREC;
import ku.common.KUZDATA;
import ku.common.KUZREC;
import nl.common.NLAADRID;
import nl.common.NLAINTGR;
import ta.common.TA1REC;
import vv.common.VLADDR01;
import xa.common.XA1REC;
//*** PROGRAM=KM05 ****
// ;***********************************************************
// ;*           Change NIL Address I.D.
// ;***********************************************************
// ;* Maintenance History:
// ;*
// ;*   Date      Who   Changes Made
// ;* --------  ------  ---------------------------------------
// ;* 09/12/89  dsalzw  application cloned from km0g, to handle
// ;*                   long addresses required by NIL.
// ;* 01/17/90  j fiat  db changes
// ;* 03/30/90  d salzw db changes
// ;* 09/10/90  d salzw added kiztbl for audit trail
// ;* 10/19/90  d salzw update both blgrp and cmpny
// ;* 11/08/90  d salzw fix bugs that was setting blgrp id to
// ;*                   zeroes and not updating ship address id
// ;*                   to match store ship address id
// ;* 02/04/91  dsalzw  remove billgroup (kuarec)
// ;* 10/11/91  CHELLM  Deinstalled CUTAG records. (KUXREC)
// ;* 07/21/93  CHELLM  Fixed PF5 key xfer to KU0M.
// ;* 10/01/93  CHELLM  CSP 4.1 Conversion.
// ;* 11/12/93  CHELLM  DATABASE CHANGES.
// ;* 04/10/95  CHELLM  Added user security for Nike Canada
// *Y2KFIX   11/26/97  DKENNY  Y2K MODIFICATIONS MADE:
// *                   Application regenerated to pick up new
// *                   XX0XS01.
// ;***********************************************************
// *********************
Program KM05 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KM05W01 KM05W01; // record
  KU0XW10 KU0XW10; // record
  KU0XW30 KU0XW30; // record
  KUCREC KUCREC; // record
  KUMREC KUMREC; // record
  KURREC KURREC; // record
  KUZREC KUZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VLADDR01 VLADDR01; // record
  XA1REC XA1REC; // record
  XGPREC XGPREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KIZTBL {deleteAfterUse = yes}; // table
  use XLBTBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use KM05M.KM05M001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KM05000: KM05000();
    goto KM05010;
    KM05010: KM05010();


    goto KM05010;


  end // end main
end // end KM05

// km05 initialization
Function KM05000()

  XSENTRY(); /* check if entered properly*/

  XSSEGTR(); /* set segmented trans id*/

  KM05W01.KM05WMS1 = " COMPANYS, ";
  KM05W01.KM05WMS2 = " STORES, ";
  KM05M001.KUMSTRID = 0;




  KM05S00(); /* handle fast-path entry*/

end // end KM05000

// address id update
Function KM05010()

   /* initialize the screen variables*/


  if (converseVar.validationMsgNum == 0
   && COMMAREA.CASECRC == 0)
    set KM05M001 empty;
  else
    if (COMMAREA.CASECRC != 0)
      KM05M001.CAMSG = COMMAREA.CAMSG;
      set KM05M001 alarm;
    else
      set KM05M001 alarm;
    end
  end


  KM05M001.XXXSCRDT = VGVar.currentShortGregorianDate;


  converse KM05M001 ;


  KM05M001.CAMSG = " ";


  KM05S70(); /* handle special entry (fast-path, pf-keys)*/


  if (converseVar.validationMsgNum == 0
   && COMMAREA.CASECRC == 0)
    KM05S05(); /* edit the fields entered*/
  else
    exit stack;
  end


  if (converseVar.validationMsgNum == 0)
    KM05W01.KM05WESW = "DO EDIT";
    KM05S10(); /* go process the entries*/
  end


  exit stack;




end // end KM05010

// handle fast path entry to km05
Function KM05S00()
  if (COMMAREA.CAITEM != " ")
    KM05M001.XXXSCROP[1] = COMMAREA.CAITMLTR[1];
    if (COMMAREA.CAITMLTR[2] == ".")
      KM05W01.KM05WCID = 0;
      KM05W01.KM05WAID = 0;
      KM05W01.KM05WSID = 0;
      KM05W01.KM05WIN1 = 3;
      KM05W01.KM05WIN2 = 1;
      KM05W01.KM05WFNO = 1;
      while (KM05W01.KM05WIN1 <= 20
       && COMMAREA.CAITMLTR[KM05WIN1] != " ")
        if (COMMAREA.CAITMLTR[KM05WIN1] == ".")
          KM05W01.KM05WFNO = KM05W01.KM05WFNO + 1;
          KM05W01.KM05WIN2 = 0;
        else
          KM05S01(); /* move each letter*/
          if (converseVar.validationMsgNum != 0)
            set KM05M001.CAITEM cursor, bold;
            exit stack;
          end
          KM05W01.KM05WIN1 = KM05W01.KM05WIN1 + 1;
          KM05W01.KM05WIN2 = KM05W01.KM05WIN2 + 1;
        end
      end
      KM05M001.NLAADRID = KM05W01.KM05WAID;
      KM05M001.NLAINTGR = KM05W01.KM05WCID;
      KM05M001.KUMSTRID = KM05W01.KM05WSID;
      COMMAREA.CAITEM = " ";
      KM05S05(); /* validate the fast-path option(s)*/
    else
      COMMAREA.CAITEM = " ";
    end
  end
end // end KM05S00

// break down fast-path item
Function KM05S01()
  if (KM05W01.KM05WFNO == 1)
    if (KM05W01.KM05WIN2 <= 4)
      KM05W01.KM05WALT[KM05WIN2] = COMMAREA.CAITMLTR[KM05WIN1];
    else
      converseLib.validationFailed(109); /* invalid - address id too long*/
    end
  else
    if (KM05W01.KM05WFNO == 2)
      if (KM05W01.KM05WIN2 <= 1)
        KM05M001.XXXSCROP[2] = COMMAREA.CAITMLTR[KM05WIN1];
      else
        converseLib.validationFailed(109); /* invalid - option too long*/
      end
    else
      if (KM05W01.KM05WFNO == 3)
        if (KM05W01.KM05WIN2 <= 7)
          KM05W01.KM05WCLT[KM05WIN2] = COMMAREA.CAITMLTR[KM05WIN1];
        else
          converseLib.validationFailed(109); /* invalid - co id too long*/
        end
      else
        if (KM05W01.KM05WFNO == 4)
          if (KM05W01.KM05WIN2 <= 4)
            KM05W01.KM05WSLT[KM05WIN2] = COMMAREA.CAITMLTR[KM05WIN1];
          else
            converseLib.validationFailed(110); /* invalid - store id too long*/
          end
        end
      end
    end
  end
end // end KM05S01

// edit entry
Function KM05S05()

  set KM05M001.XXXSCROP[1] cursor, normal;
  set KM05M001.NLAADRID normal;
  set KM05M001.XXXSCROP[2] normal;
  set KM05M001.NLAINTGR normal;
  set KM05M001.KUMSTRID normal;


  if (KM05M001.XXXSCROP[1] < 1
   || KM05M001.XXXSCROP[1] > 5)
    converseLib.validationFailed(115); /* ;outside valid range*/
    set KM05M001.XXXSCROP[1] cursor, bold;
  else
    /* next sentence   input is ok*/
  end


  if (KM05M001.XXXSCROP[2] < 1
   || KM05M001.XXXSCROP[2] > 2)
    converseLib.validationFailed(115); /* outside valid range*/
    set KM05M001.XXXSCROP[2] cursor, bold;
  else
    /* next sentenceinput is ok*/
  end


  if (KM05M001.XXXSCROP[1] == 1
   || KM05M001.XXXSCROP[1] == 2
   || KM05M001.XXXSCROP[1] == 3)
    if (KM05M001.XXXSCROP[2] == 1)
      /* next sentence*/
    else
      converseLib.validationFailed(147); /* company (1) is only valid option*/
      set KM05M001.XXXSCROP[2] cursor, bold;
    end
  else
    if (KM05M001.XXXSCROP[1] == 4
     || KM05M001.XXXSCROP[1] == 5)
      if (KM05M001.XXXSCROP[2] == 1
       || KM05M001.XXXSCROP[2] == 2)
        /* next sentence*/
      else
        converseLib.validationFailed(148); /* company (1) or store only valid opts*/
        set KM05M001.XXXSCROP[2] cursor, bold;
      end
    end
  end

  if (KM05M001.NLAINTGR == 0) /* company id is always required*/
    converseLib.validationFailed(114); /* field required for this option*/
    set KM05M001.NLAINTGR cursor, bold;
  end


end // end KM05S05

// process km05m001 entries
Function KM05S10()
   /* ************************************************************/
      /* we get here from two places:  km05s01 if enter was*/
      /* pressed, or km05pfk if pf12 was entered.*/
      /* we go thru the same logic regardless of whether we*/
      /* are only editing or we are updating...the difference*/
      /* being that a switch is tested to see if the update*/
      /* should actually take place.*/
   /* ************************************************************/
  KM05W01.KM05WCCT = 0; /* zero company counter*/
  KM05W01.KM05WSCT = 0; /* zero store counter*/

  if (KM05M001.XXXSCROP[1] == 1 /* change company addr id*/
   || KM05M001.XXXSCROP[1] == 2 /* change alt addr id*/
   || KM05M001.XXXSCROP[1] == 3) /* change bill to addr id*/
    KM05S15();
  else
    if (KM05M001.XXXSCROP[1] == 4 /* change store addr id*/
     || KM05M001.XXXSCROP[1] == 5) /* change ship group addr id*/
      KM05S20();
    end
  end


  if (converseVar.validationMsgNum == 0)
    KM05M001.CAMSG = KM05W01.CAMSG;
    if (KM05W01.KM05WESW == "DO EDIT")
      KM05W01.KM05WESW = "EDIT OK";
      converseLib.validationFailed(22); /* press pf12 to confirm*/
    end
  end
end // end KM05S10

// do view 1 2 & 3
Function KM05S15()
  KM05S30(); /* get company*/

  if (converseVar.validationMsgNum == 0)
    KM05S35(); /* get address*/
    if (converseVar.validationMsgNum == 0)
      KM05S61(); /* update this company*/
    end
  end

end // end KM05S15

// do views 4 and 5
Function KM05S20()
  KM05S35(); /* get address*/

  if (converseVar.validationMsgNum == 0)
    KM05S30(); /* get company*/
    if (converseVar.validationMsgNum == 0)
      KM05S40(); /* get store*/
    end
  end


  if (converseVar.validationMsgNum == 0)
    if (KM05M001.XXXSCROP[2] == 1)
      KM05W01.KM05WENS = "N";
      while (KM05W01.KM05WENS == "N")
        KM05S62(); /* update this store*/
        KM05S45(); /* get next store*/
      end
    else
      if (KM05M001.XXXSCROP[2] == 2)
        KM05S62(); /* update this store*/
      end
    end
  end


end // end KM05S20

// get customer info
Function KM05S30()
  set KM05M001.NLAINTGR normal;

  KUCREC.KUCCOID = KM05M001.NLAINTGR;


  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0)
    KM05W01.NLAINTGR = KUCREC.KUCCOID;
    KM05M001.KUCCONM = KUCREC.KUCCONM;
    KM05M001.KUCCOANM = KUCREC.KUCCOANM;
    KM05W01.KUCCOAID = KUCREC.KUCCOAID;
    KM05W01.KUCCCAID = KUCREC.KUCCCAID;
    KM05W01.KUCBLAID = KUCREC.KUCBLAID;
  else
    KM05M001.KUCCONM = " ";
    KM05M001.KUCCOANM = " ";
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(118);
      set KM05M001.NLAINTGR cursor, bold;
      return;
    else
      XSSM003(); /* abort routine*/
    end
  end

  if (KUCREC.XAUCD in XAUTBL.XAUCD)
    if (XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KM05W01.XATCD = XAUTBL.XATCD[sysVar.arrayIndex];
    else
      KM05W01.XATCD = " ";
    end
  else
    KM05W01.XATCD = " ";
  end

  if (KM05W01.XATCD == "08")
    if (COMMAREA.CADLVL[1] == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(272);
      KM05M001.KUCCONM = " ";
      KM05M001.KUCCOANM = " ";
      KM05M001.KUMSTRNM = " ";
      set KM05M001.NLAINTGR cursor, bold;
    end
  else
    if (KM05W01.XATCD == "03")
      if (COMMAREA.CADLVL[2] == "Y")
        /* next sentence*/
      else
        converseLib.validationFailed(272);
        KM05M001.KUCCONM = " ";
        KM05M001.KUCCOANM = " ";
        KM05M001.KUMSTRNM = " ";
        set KM05M001.NLAINTGR cursor, bold;
      end
    else
      if (COMMAREA.CADLVL[1] == "Y"
       || COMMAREA.CADLVL[2] == "Y")
        converseLib.validationFailed(272);
        KM05M001.KUCCONM = " ";
        KM05M001.KUCCOANM = " ";
        KM05M001.KUMSTRNM = " ";
        set KM05M001.NLAINTGR cursor, bold;
      end
    end
  end
             /* Edit for Nike Canada user*/

  if (KUCREC.XLECD == "03")
    if (COMMAREA.CADLVL[3] == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(272);
      KM05M001.KUCCONM = " ";
      KM05M001.KUCCOANM = " ";
      KM05M001.KUMSTRNM = " ";
      set KM05M001.NLAINTGR cursor, bold;
    end
  else
    if (COMMAREA.CADLVL[3] == "Y")
      converseLib.validationFailed(272);
      KM05M001.KUCCONM = " ";
      KM05M001.KUCCOANM = " ";
      KM05M001.KUMSTRNM = " ";
      set KM05M001.NLAINTGR cursor, bold;
    end
  end
end // end KM05S30

// get address info
Function KM05S35()
  set KM05M001.NLAADRID normal;

  XA1REC.NLATYPIN = "C";
  XA1REC.NLABSIND = " ";
  XA1REC.NLAONECH = " ";
  XA1REC.NLASINT1 = 0;
  XA1REC.NLASINT2 = 0;

  XA1REC.NLAINTGR = KM05M001.NLAINTGR;
  XA1REC.NLAADRID = KM05M001.NLAADRID;

  XA1REC.XA1FUNCT = "G";

  call "XA0C" (XA1REC) {isNoRefresh = yes};


  if (XA1REC.XA1ERIND[1] == 0)
    move XA1REC to VLADDR01 withV60Compat;
  else
    set KM05M001.NLAADRID cursor, bold;
    if (XA1REC.XA1ERIND[1] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA1REC.XA1ERIND[1]);
    end
    return;
  end
end // end KM05S35

// get store
Function KM05S40()
  KUMREC.KUCCOID = KM05M001.NLAINTGR;

  if (KM05M001.XXXSCROP[2] == 1)
    call "IO0340" ("SS", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      KM05S45(); /* get 1st store*/
      if (SQLCA.VAGen_SQLCODE == 0)
        KM05M001.KUMSTRNM = KUMREC.KUMSTRNM;
        return;
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          KM05M001.KUMSTRNM = " ";
          return;
        else
          XSSM003(); /* abort routine*/
        end
      end
    else
      XSSM003(); /* abort routine*/
    end
  else
    KUMREC.KUMSTRID = KM05M001.KUMSTRID;
    call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      KM05M001.KUMSTRNM = KUMREC.KUMSTRNM;
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(116);
        set KM05M001.KUMSTRID cursor, bold;
        KM05W01.KM05WENS = "Y";
        KM05M001.KUMSTRNM = " ";
      else
        XSSM003(); /* abort routine*/
      end
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(116);
      return;
    else
      XSSM003(); /* abort routine*/
    end
  end
end // end KM05S40

// get next store
Function KM05S45()
  call "IO0340" ("SN", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      call "IO0340" ("CS", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* close the cursor*/
      KM05W01.KM05WENS = "Y";
    else
      XSSM003(); /* abort routine*/
    end
  end
end // end KM05S45

// update company
Function KM05S61()

   /* *************************************************************/

    /* Maintenance History:*/
    /* 10-11-91 CHELLM Deinstalled CUTAG record creation.*/

   /* *************************************************************/

  KM05W01.KUZDATA = KUCREC.KUCGRP; /* save before image*/

  KM05W01.KM05WCCT = KM05W01.KM05WCCT + 1;

  if (KM05M001.XXXSCROP[1] == 1) /* updating the company address*/
    KUCREC.KUCCOAID = KM05M001.NLAADRID;
  else
    if (KM05M001.XXXSCROP[1] == 2) /* updating the alternate address*/
      KUCREC.KUCCCAID = KM05M001.NLAADRID;
    else /* updating the bill to address*/
      KUCREC.KUCBLAID = KM05M001.NLAADRID;
      KM05S95(); /* get lockbox*/
      KUCREC.XLBCD = KM05W01.XLBCD;
    end
  end

  XX0XS01(); /* get date and time*/
  KUCREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUCREC.ZZZCHGTM = XX0XW01.XX0XWTIM;


  if (KM05W01.KM05WESW == "UPDATE")
    call "IO0240" ("U ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      KUZREC.KUZTYPE = "C"; /* change*/
      KUZREC.XXXTBLNM = "VCMPNY01"; /* company*/
      KUZREC.KUMSTRID = 0; /* store*/
      KUZREC.XNXCD = 0; /* dept*/
      KUZREC.XGPCD = " "; /* gpc*/
      KM05S80(); /* write audit records*/
    else
      XSSM003(); /* abort routine*/
    end
  end
end // end KM05S61

// update stores
Function KM05S62()
   /* *************************************************************/

    /* Maintenance History:*/
    /* 10-11-91 CHELLM Deinstalled CUTAG records (KUXREC).*/

   /* *************************************************************/

  KM05W01.KM05WSCT = KM05W01.KM05WSCT + 1;

  KM05W01.KUZDATA = KUMREC.KUMGRP; /* save before image*/


  if (KM05M001.XXXSCROP[1] == 4) /* if updating store address id*/
    KUMREC.KUMSTAID = KM05M001.NLAADRID;
    KUMREC.KUMXSTCD = VLADDR01.XSTCD;
    KU0XW30.KU0XW3GP = VLADDR01.XXX-ADDR5; /* compress city name*/
    call "KU0X" (KU0XW30, KU0XW10) {isNoRefresh = yes}; /* down to 10 characters*/
    KUMREC.KUMCITYS = KU0XW10.KU0XW1GP; /* and replace*/
  else /* otherwise, must be ship-group address*/
                                   /* id*/
    KUMREC.KUMSHAID = KM05M001.NLAADRID;
  end


  XX0XS01(); /* get date and time*/
  KUMREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUMREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  if (KM05W01.KM05WESW == "UPDATE")
    call "IO0340" ("U ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      KUZREC.KUZTYPE = "C"; /* change*/
      KUZREC.XXXTBLNM = "VSTORE01"; /* store*/
      KUZREC.KUMSTRID = KUMREC.KUMSTRID;
      KUZREC.XNXCD = 0; /* dept*/
      KUZREC.XGPCD = " "; /* gpc*/
      KM05S80(); /* write audit records*/
    else
      XSSM003();
    end
  end


  if (KM05M001.XXXSCROP[1] == 4)
    return; /* we only do stores for option 4*/
  end

end // end KM05S62

// handle any special entries
Function KM05S70()
  KM05W01.CATOAP = KM05M001.CATOAP;

  if (converseVar.eventKey is enter)
    if (KM05W01.CATOAP != " ")
      KM05S71(); /* handle fast-path option entry*/
    else
      return; /* no special functions...go back*/
    end
  else
    if (converseVar.eventKey is pa2)
      COMMAREA.CATOAP = "KM05";
      XSEXIT();
    else
      if (KM05W01.CATOAP != " ")
        converseLib.validationFailed(48); /* can't use fast-path and pf-key*/
        set KM05M001.CATOAP cursor, bold;
        exit stack; /* reconverse this screen*/
      else
        KM05S72(); /* handle pf key entry*/
      end
    end
  end


end // end KM05S70

// handle fast-path option entry
Function KM05S71()

  if (KM05M001.CATOAP != " ")
    COMMAREA.CATOAP = KM05M001.CATOAP;
    COMMAREA.CAITEM = KM05M001.CAITEM;
    XSEXIT(); /* transfer to requested appl.*/
    set KM05M001.CATOAP cursor, bold;
    exit stack;
  end

end // end KM05S71

// handle any pf key entry
Function KM05S72()
   /* ************************************************************/
      /* we should only get here if a pf-key was entered*/
      /* valid pf-keys are:pf1, pf3, pf4, pf5 and pf12.*/


   /* ************************************************************/
  if (KM05W01.KM05WESW == "EDIT OK") /* if there's maintenance pending*/
    if (converseVar.eventKey is pf1
     || converseVar.eventKey is pf3
     || converseVar.eventKey is pf4
     || converseVar.eventKey is pf5)
      converseLib.validationFailed(47); /* can't exit appl w/maint pending*/
      exit stack;
    end
  end


  if (converseVar.eventKey is pf3)
    KM05S73();
  end
  if (converseVar.eventKey is pf4)
    XSPF4();
  end
  if (converseVar.eventKey is pf3)
    KM05S75();
  end
  if (converseVar.eventKey is pf5)
    KM05S75();
  end
  if (converseVar.eventKey is pf1)
    XSPF1();
  end
  if (converseVar.eventKey is pf12)
    if (KM05W01.KM05WESW == "EDIT OK")
      KM05W01.KM05WESW = "UPDATE";
      KM05S10();
      if (converseVar.validationMsgNum == 0) /* if updated successfully*/
        converseLib.validationFailed(29); /* record updated msg*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* commit the changes*/
        exit stack;
      else
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        exit stack;
      end
    else
      converseLib.validationFailed(101); /* edit not complete*/
      exit stack;
    end
  end


  if (COMMAREA.CASECRC == 0)
    converseLib.validationFailed(3); /* pfkey not supported*/
  end


  exit stack;

end // end KM05S72

// handle pf3 key
Function KM05S73()
  COMMAREA.CATOAP = "KM01"; /* go to master menu*/
  XSEXIT();

end // end KM05S73

// handle pf5 entry
Function KM05S75()
   /* ************************************************************/
   /* *   For this application, pf5 takes you back to*/
   /* *   the Customer Main Menu (ku0m).*/
   /* **/
   /* ************************************************************/

  COMMAREA.CATOAP = "KU0M"; /* set up the commarea to-application*/
  XSEXIT(); /* and go to the customer main menu.*/

end // end KM05S75

// write audit records
Function KM05S80()


  if (KUZREC.XXXTBLNM == "VCMPNY01") /* company*/
    KUZREC.KUZDATA = KUCREC.KUCGRP; /* move after data*/
  else
    if (KUZREC.XXXTBLNM == "VSTORE01") /* store*/
      KUZREC.KUZDATA = KUMREC.KUMGRP; /* move after data*/
    end
  end

  KUZREC.XXXUSER = COMMAREA.CAUSERID; /* move user id to audit rec*/
  KUZREC.KUCCOID = KM05W01.NLAINTGR; /* move co id to audit rec*/

   /* note: change time should be correct, xx0x was called just*/
        /* before update occured.*/

  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT; /* move set up date to audit rec*/
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* move time to audit rec*/
  KUZREC.KUZBFCD = "A"; /* move after-code*/

  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM05   ";
    TA1REC.TA1LOCAT[1] = "KM05S80  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = KUZREC.XXXTBLNM;
    TA1REC.TA1MAP = "KM05M000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = KUZREC.XXXTBLNM;
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod to add*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    XSSM003(); /* abort*/
  end


  if (KUZREC.KUZTYPE == "A") /* if record was added*/
    return; /* then we don't do a before audit*/
                                   /* record*/
  end

  KUZREC.KUZBFCD = "B"; /* move before-code*/
  KUZREC.KUZDATA = KM05W01.KUZDATA; /* move data to audit record*/
  KUZREC.XXXUSER = COMMAREA.CAUSERID; /* move user id to audit rec*/
  KUZREC.KUCCOID = KM05W01.NLAINTGR; /* move co id to audit rec*/

   /* note: change time should be correct, xx0x was called just*/
        /* before update occured.*/

  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT; /* move set up date to audit rec*/
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* move time to audit rec*/
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod to add*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    XSSM003(); /* abort*/
  end

end // end KM05S80

// get new lock-box code
Function KM05S95()

    /* if nike international company, don't change the lockbox*/

  if (KUCREC.XAUCD == "33"
   || KUCREC.XAUCD == "32"
   || KUCREC.XAUCD == "31")
    KM05W01.XLBCD = KUCREC.XLBCD;
  else
                                   /* else set the lockbox by the zip code*/
    KM05W01.XXXZIP = VLADDR01.XXXZIP;
    KM05W01.KM05WIN1 = 1;
    while (XLBTBL.XLBZPFX[KM05WIN1] != "999"
     && XLBTBL.XLBZPFX[KM05WIN1] < KM05W01.XLBZPFX)
      KM05W01.KM05WIN1 = KM05W01.KM05WIN1 + 1;
    end
    KM05W01.XLBCD = XLBTBL.XLBCD[KM05WIN1];
  end


end // end KM05S95

Record KM05W01 type basicRecord
  5 KM05WGRP KM05WGRP ; 
    10 KM05WSGP KM05WSGP ; 
    10 KM05WFSW KM05WFSW ; 
    10 KM05WENS KM05WENS ; 
    10 CAMSG CAMSG ; 
      15 KM05WCCT KM05WCCT ; 
      15 KM05WMS1 KM05WMS1 ; 
      15 KM05WSCT KM05WSCT ; 
      15 KM05WMS2 KM05WMS2 ; 
      15 * char(49) ; 
    10 KUZDATA KUZDATA ; 
    10 KM05WESW KM05WESW ; 
    10 KM05WBSW KM05WBSW ; 
    10 KM05WIN1 KM05WIN1 ; 
    10 KM05WIN2 KM05WIN2 ; 
    10 XLBCD XLBCD ; 
    10 NLAADRID NLAADRID ; 
    10 XXXZIP XXXZIP ; 
      15 XLBZPFX XLBZPFX ; 
      15 * char(7) ; 
    10 KM05WZIP KM05WZIP ; 
      15 KM05WZLT KM05WZLT [10] ; 
    10 NLAINTGR NLAINTGR ; 
    10 KM05WCID KM05WCID ; 
      15 KM05WCLT KM05WCLT [7] ; 
    10 KM05WAID KM05WAID ; 
      15 KM05WALT KM05WALT [4] ; 
    10 KM05WSID KM05WSID ; 
      15 KM05WSLT KM05WSLT [4] ; 
    10 KUCCONM KUCCONM ; 
    10 KUCCCAID KUCCCAID ; 
    10 KUCCOAID KUCCOAID ; 
    10 KUCBLAID KUCBLAID ; 
    10 KM05WFNO KM05WFNO ; 
    10 CATOAP CATOAP ; 
    10 XATCD XATCD ; 
end // end KM05W01

// working storage number
DataItem KM05WAID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// individual numbers
DataItem KM05WALT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// build screen switch
DataItem KM05WBSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// company counter
DataItem KM05WCCT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage number
DataItem KM05WCID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// individual numbers
DataItem KM05WCLT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// eof store
DataItem KM05WENS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// edit switch
DataItem KM05WESW char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of fields
DataItem KM05WFNO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// found switch (y/n)
DataItem KM05WFSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level of record
DataItem KM05WGRP char(598)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index
DataItem KM05WIN1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem KM05WIN2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KM05WMS1 char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KM05WMS2 char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// store counter
DataItem KM05WSCT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// statement group name
DataItem KM05WSGP char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws store id
DataItem KM05WSID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// individual store numbers
DataItem KM05WSLT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KM05WZIP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// individual zip-code letters
DataItem KM05WZLT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

