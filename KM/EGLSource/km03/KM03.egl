package km03;

import corpcom1.CAMSG;
import corpcom1.CATOAP;
import corpcom2.XGPREC;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XSSM003;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx2.XXXZIP;
import ku.common.KUCBLAID;
import ku.common.KUCCCAID;
import ku.common.KUCCOAID;
import ku.common.KUCCONM;
import ku.common.KUCREC;
import ku.common.KUKPCOID;
import ku.common.KUMREC;
import ku.common.KUNREC;
import nl.common.NLAADRID;
import nl.common.NLAINTGR;
import ta.common.TA1REC;
import vv.common.VLADDR01;
import xa.common.XA1REC;
//*** PROGRAM=KM03 ****
// ;***********************************************************
// ;*         Display a Particular long address
// ;*==========================================================
// ;*                   maintenance log
// ;*----------------------------------------------------------
// ;*   date      int              description
// ;*----------------------------------------------------------
// ;* 09/12/89  dsalzw  application cloned from km0e, to handle
// ;*                   long addresses required by NIL.
// ;* 01/17/90  j fiat  db changes
// ;* 10/17/90  dsalzw  removed blgrp
// ;* 10/01/93  CHELLM  Csp 4.1 Conversion.
// ;***********************************************************
// *********************
Program KM03 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KM03W01 KM03W01; // record
  KUCREC KUCREC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VLADDR01 VLADDR01; // record
  XA1REC XA1REC; // record
  XGPREC XGPREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KM03M.KM03M001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KM03000: KM03000();
    goto KM03010;
    KM03010: KM03010();
    ;
    ;
    goto KM03010;
    ;
    ;
  end // end main
end // end KM03

// km03 initialization
Function KM03000()
  ;
  XSENTRY(); /* check if entered properly*/
  ;
  XSSEGTR(); /* set segmented trans id*/
  ;
  KM03W01.KM03WBSW = "N";
  KM03M001.KUMSTRID = 0;
  ;
  ;
  KM03S00(); /* handle fast-path entry*/
  ;
end // end KM03000

// long address view
Function KM03010()
  ;
   /* initialize the screen variables*/
  ;
  ;
  if (converseVar.validationMsgNum == 0
   && COMMAREA.CASECRC == 0)
    if (COMMAREA.CAFROMAP == "KM03")
      /* next sentence*/
    else
      COMMAREA.CAFROMAP = "KM03";
      set KM03M001 initial;
    end
  else
    if (COMMAREA.CASECRC != 0)
      KM03M001.CAMSG = COMMAREA.CAMSG;
      set KM03M001 alarm;
    else
      set KM03M001 alarm;
    end
  end
  ;
  ;
  KM03M001.XXXSCRDT = VGVar.currentShortGregorianDate;
  ;
  ;
  converse KM03M001 ;
  ;
  ;
  KM03M001.CAMSG = " ";
  ;
  set KM03M001.NLAINTGR normal;
  set KM03M001.KUMSTRID normal;
  set KM03M001.XXXSCROP cursor, normal;
  ;
  ;
  ;
  KM03S70(); /* handle special entry (fast-path, pf-keys)*/
  ;
  ;
  if (converseVar.validationMsgNum != 0
   || COMMAREA.CASECRC != 0)
    exit stack;
  else
    if (KM03M001.XXXSCROP == "1"
     || KM03M001.XXXSCROP == "2"
     || KM03M001.XXXSCROP == "3")
      KM03S06(); /* validate views 1 2 & 3*/
      if (converseVar.validationMsgNum == 0)
        KM03S05(); /* do views 1 2 and/or 3*/
      else
        exit stack; /* go show the error*/
      end
    else
      if (KM03M001.XXXSCROP == "4"
       || KM03M001.XXXSCROP == "5")
        KM03S11(); /* validate views 4 and 5*/
        if (converseVar.validationMsgNum == 0)
          KM03S10(); /* do views 4 and/or 5*/
        else
          exit stack; /* go show the error*/
        end
      else
        converseLib.validationFailed(115); /* unknown option*/
        set KM03M001.XXXSCROP cursor, bold;
        exit stack;
      end
    end
  end
  ;
  ;
  ;
  exit stack;
  ;
  ;
end // end KM03010

// handle fast path entry
Function KM03S00()
  if (COMMAREA.CAITEM != " ")
    COMMAREA.CAFROMAP = "KM03";
    KM03W01.KM03WCID = 0;
    KM03W01.KM03WSID = 0;
    KM03W01.KM03WIN1 = 1;
    KM03W01.KM03WIN2 = 1;
    KM03W01.KM03WFNO = 1;
    while (KM03W01.KM03WIN1 <= 20
     && COMMAREA.CAITMLTR[KM03WIN1] != " ")
      if (COMMAREA.CAITMLTR[KM03WIN1] == ".")
        KM03W01.KM03WFNO = KM03W01.KM03WFNO + 1;
        KM03W01.KM03WIN2 = 0;
      else
        KM03S01(); /* move each letter*/
        if (converseVar.validationMsgNum == 0)
          /* next sentence*/
        else
          KM03M001.CAITEM = COMMAREA.CAITEM;
          set KM03M001.CAITEM cursor, bold;
          return;
        end
      end
      KM03W01.KM03WIN1 = KM03W01.KM03WIN1 + 1;
      KM03W01.KM03WIN2 = KM03W01.KM03WIN2 + 1;
    end
    KM03M001.NLAINTGR = KM03W01.KM03WCID;
    KM03M001.KUMSTRID = KM03W01.KM03WSID;
    COMMAREA.CAITEM = " ";
    KM03S05(); /* validate the fast-path option(s)*/
  end
end // end KM03S00

// move each fast-path letter
Function KM03S01()
  if (KM03W01.KM03WFNO == 1)
    if (KM03W01.KM03WIN2 <= 1)
      KM03M001.XXXSCROP = COMMAREA.CAITMLTR[KM03WIN1];
    else
      converseLib.validationFailed(126); /* invalid - option too long*/
    end
  else
    if (KM03W01.KM03WFNO == 2)
      if (KM03W01.KM03WIN2 <= 7)
        KM03W01.KM03WCLT[KM03WIN2] = COMMAREA.CAITMLTR[KM03WIN1];
      else
        converseLib.validationFailed(109); /* invalid - co id too long*/
      end
    else
      if (KM03W01.KM03WFNO == 3)
        if (KM03W01.KM03WIN2 <= 4)
          KM03W01.KM03WSLT[KM03WIN2] = COMMAREA.CAITMLTR[KM03WIN1];
        else
          converseLib.validationFailed(110); /* invalid - store id too long*/
        end
      else
        if (KM03W01.KM03WFNO == 4)
          if (KM03W01.KM03WIN2 <= 2)
            KM03W01.KM03WDLT[KM03WIN2] = COMMAREA.CAITMLTR[KM03WIN1];
          else
            converseLib.validationFailed(111); /* invalid - dept too long*/
          end
        else
          if (KM03W01.KM03WFNO == 5)
            if (KM03W01.KM03WIN2 <= 2)
              KM03W01.KM03WGLT[KM03WIN2] = COMMAREA.CAITMLTR[KM03WIN1];
            else
              converseLib.validationFailed(112); /* invalid - gpc too long*/
            end
          else
            if (KM03W01.KM03WFNO > 6)
              converseLib.validationFailed(113); /* invalid - too many items*/
            end
          end
        end
      end
    end
  end
end // end KM03S01

// edit entry
Function KM03S05()
  ;
  if (KM03M001.NLAINTGR > 0)
    KM03S20(); /* get company*/
    if (converseVar.validationMsgNum == 0)
      KM03S25(); /* get address*/
      if (converseVar.validationMsgNum == 0)
        KM03S30(); /* move address to screen*/
      else
        exit stack;
      end
    else
      exit stack;
    end
  else
    converseLib.validationFailed(114); /* this field required*/
    set KM03M001.NLAINTGR cursor, bold;
    exit stack;
  end
end // end KM03S05

// validate views 1 2 & 3
Function KM03S06()
  if (KM03M001.NLAINTGR != 0)
    KM03M001.KUMSTRID = 0;
    return; /* it's valid, go back*/
  else
    converseLib.validationFailed(114); /* company required*/
    set KM03M001.NLAINTGR cursor, bold;
  end
end // end KM03S06

// view store/ship group address
Function KM03S10()
  KM03S35(); /* get store*/
  if (converseVar.validationMsgNum == 0)
    KM03S25(); /* get address*/
    if (converseVar.validationMsgNum == 0)
      KM03S20(); /* get company*/
      if (converseVar.validationMsgNum == 0)
        KM03S30(); /* move address to screen*/
      else
        exit stack;
      end
    else
      exit stack;
    end
  else
    converseLib.validationFailed(116);
    exit stack;
  end
end // end KM03S10

// validate views 4 and 5
Function KM03S11()
  set KM03M001.NLAINTGR normal;
  set KM03M001.KUMSTRID normal;
  ;
  ;
  if (KM03M001.NLAINTGR != 0)
    if (KM03M001.KUMSTRID != 0)
      return; /* it's valid, go back*/
    else
      KM03M001.KUMSTRID = 0; /* store required*/
    end
  else
    converseLib.validationFailed(114); /* company required*/
    set KM03M001.NLAINTGR cursor, bold;
  end
end // end KM03S11

// get company
Function KM03S20()
  ;
  KUCREC.KUCCOID = KM03M001.NLAINTGR;
  ;
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KM03W01.NLAINTGR = KUCREC.KUCCOID;
    KM03W01.KUCCOAID = KUCREC.KUCCOAID;
    KM03W01.KUCCCAID = KUCREC.KUCCCAID;
    KM03W01.KUCBLAID = KUCREC.KUCBLAID;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(118);
      return;
    else
      XSSM003(); /* abort routine*/
    end
  end
end // end KM03S20

// get address
Function KM03S25()
  ;
  XA1REC.NLATYPIN = "C";
  XA1REC.NLABSIND = " ";
  XA1REC.NLAONECH = " ";
  XA1REC.NLASINT1 = 0;
  XA1REC.NLASINT2 = 0;
  ;
  XA1REC.NLAINTGR = KM03M001.NLAINTGR;
  XA1REC.XA1FUNCT = "G";
  ;
  if (KM03M001.XXXSCROP == 1)
    if (KUCREC.KUCCOID == 0)
      converseLib.validationFailed(141); /* no company address id listed*/
      return;
    else
      XA1REC.NLAADRID = KUCREC.KUCCOAID;
    end
  else
    if (KM03M001.XXXSCROP == 2)
      if (KUCREC.KUCCCAID == 0)
        converseLib.validationFailed(140); /* no alternate addr id listed*/
        return;
      else
        XA1REC.NLAADRID = KUCREC.KUCCCAID;
      end
    else
      if (KM03M001.XXXSCROP == 3)
        if (KUCREC.KUCBLAID == 0)
          converseLib.validationFailed(144); /* no bill group  address id listed*/
          return;
        else
          XA1REC.NLAADRID = KUCREC.KUCBLAID;
        end
      else
        if (KM03M001.XXXSCROP == 4)
          if (KUMREC.KUMSTAID == 0)
            converseLib.validationFailed(142); /* no store address id listed*/
            return;
          else
            XA1REC.NLAADRID = KUMREC.KUMSTAID;
          end
        else
          if (KM03M001.XXXSCROP == 5)
            if (KUMREC.KUMSHAID == 0)
              converseLib.validationFailed(143); /* no ship group  address id listed*/
              return;
            else
              XA1REC.NLAADRID = KUMREC.KUMSHAID;
            end
          end
        end
      end
    end
  end
  ;
  call "XA0C" (XA1REC) {isNoRefresh = yes};
  ;
  ;
  if (XA1REC.XA1ERIND[1] == 0)
    move XA1REC to KM03M001 withV60Compat;
  else
    if (XA1REC.XA1ERIND[1] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA1REC.XA1ERIND[1]);
    end
    return;
  end
end // end KM03S25

// move address to screen
Function KM03S30()
  ;
  KM03M001.KUCCONM = KUCREC.KUCCONM;
  KM03M001.KUCCOANM = KUCREC.KUCCOANM;
  ;
  KM03M001.NLAADRID = XA1REC.NLAADRID;
  KM03M001.XXX-ADDR1 = XA1REC.XXX-ADDR1;
  KM03M001.XXX-ADDR2 = XA1REC.XXX-ADDR2;
  KM03M001.XXX-ADDR3 = XA1REC.XXX-ADDR3;
  KM03M001.XXX-ADDR4 = XA1REC.XXX-ADDR4;
  KM03M001.XXX-ADDR5 = XA1REC.XXX-ADDR5;
  KM03M001.XXX-ADDR6 = XA1REC.XXX-ADDR6;
  KM03M001.XSTCD = XA1REC.XSTCD;
  KM03M001.XSTDESC = XA1REC.XSTDESC;
  KM03M001.XCTCD = XA1REC.XCTCD;
  KM03M001.XCTDESC = XA1REC.XCTDESC;
  ;
  ;
end // end KM03S30

// get store address
Function KM03S35()
  ;
  KUMREC.KUCCOID = KM03M001.NLAINTGR;
  KUMREC.KUMSTRID = KM03M001.KUMSTRID;
  ;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(11);
      return;
    else
      XSSM003(); /* abort routine*/
    end
  end
end // end KM03S35

// handle any special entries
Function KM03S70()
  KM03W01.CATOAP = KM03M001.CATOAP;
  ;
  if (converseVar.eventKey is enter)
    if (KM03W01.CATOAP != " ")
      KM03S71(); /* handle fast-path option entry*/
    else
      return; /* no special functions...go back*/
    end
  else
    if (converseVar.eventKey is pa2)
      COMMAREA.CATOAP = "KM03";
      XSEXIT();
    else
      if (KM03W01.CATOAP != " ")
        converseLib.validationFailed(29); /* can't use fast-path and pf-key*/
        set KM03M001.CATOAP cursor, bold;
        exit stack; /* reconverse this screen*/
      else
        KM03S72(); /* handle cc0mm001 pf key entry*/
      end
    end
  end
  ;
  ;
  ;
end // end KM03S70

// handle fast-path option entry
Function KM03S71()
  ;
  if (KM03M001.CATOAP != " ")
    COMMAREA.CATOAP = KM03M001.CATOAP;
    COMMAREA.CAITEM = KM03M001.CAITEM;
    XSEXIT(); /* transfer to requested appl.*/
    set KM03M001.CATOAP cursor, bold;
    exit stack;
  end
  ;
end // end KM03S71

// handle any pf key entry
Function KM03S72()
  ;
  ;
  ;
  if (converseVar.eventKey is pf3)
    KM03S73();
  end
  if (converseVar.eventKey is pf4)
    XSPF4();
  end
  if (converseVar.eventKey is pf5)
    KM03S75();
  end
  if (converseVar.eventKey is pf1)
    XSPF1();
  end
  ;
  ;
  if (COMMAREA.CASECRC == 0)
    converseLib.validationFailed(3); /* pfkey not supported*/
  end
  ;
  ;
  exit stack;
  ;
end // end KM03S72

// handle pf3 key
Function KM03S73()
  COMMAREA.CATOAP = "KM01"; /* go to master menu*/
  XSEXIT();
  ;
end // end KM03S73

// handle pf5 entry
Function KM03S75()
   /* ************************************************************/
   /* *   For this application, pf5 takes you back to*/
   /* *   the Customer Main Menu (ku0m).*/
   /* **/
   /* ************************************************************/
  ;
  COMMAREA.CATOAP = "KU0M"; /* set up the commarea to-application*/
  XSEXIT(); /* and go to the address maint. menu*/
  ;
end // end KM03S75

Record KM03W01 type basicRecord
  5 KM03WREC KM03WREC ; 
    10 KM03WGRP KM03WGRP ; 
    10 CAMSG CAMSG ; 
    10 KM03WBSW KM03WBSW ; 
    10 KM03WIN1 KM03WIN1 ; 
    10 KM03WIN2 KM03WIN2 ; 
    10 NLAADRID NLAADRID ; 
    10 XXXZIP XXXZIP ; 
    10 KM03WZIP KM03WZIP ; 
      15 KM03WZLT KM03WZLT [10] ; 
    10 NLAINTGR NLAINTGR ; 
    10 KM03WCID KM03WCID ; 
      15 KM03WCLT KM03WCLT [7] ; 
    10 KM03WAID KM03WAID ; 
      15 KM03WALT KM03WALT [4] ; 
    10 KM03WSID KM03WSID ; 
      15 KM03WSLT KM03WSLT [4] ; 
    10 KM03WDEP KM03WDEP ; 
      15 KM03WDLT KM03WDLT [2] ; 
    10 KM03WGPC KM03WGPC ; 
      15 KM03WGLT KM03WGLT [2] ; 
    10 KUCCONM KUCCONM ; 
    10 KUKPCOID KUKPCOID ; 
    10 KUCCCAID KUCCCAID ; 
    10 KUCBLAID KUCBLAID ; 
    10 KUCCOAID KUCCOAID ; 
    10 KM03WFNO KM03WFNO ; 
    10 CATOAP CATOAP ; 
end // end KM03W01

// working storage number
DataItem KM03WAID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// individual numbers
DataItem KM03WALT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// build screen switch
DataItem KM03WBSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage number
DataItem KM03WCID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// individual numbers
DataItem KM03WCLT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws department id
DataItem KM03WDEP num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// individual dept numbers
DataItem KM03WDLT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of fields
DataItem KM03WFNO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// individual gpc letters
DataItem KM03WGLT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws gen prod class code
DataItem KM03WGPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// statement group name
DataItem KM03WGRP char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index
DataItem KM03WIN1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem KM03WIN2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage
DataItem KM03WREC char(193)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws store id
DataItem KM03WSID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// individual store numbers
DataItem KM03WSLT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KM03WZIP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// individual zip-code letters
DataItem KM03WZLT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

