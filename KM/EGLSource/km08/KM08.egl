package km08;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPXAU01;
import corpcom3.XPXX001;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.*;
import corpcom6.SQLCA;
import corpcom7.XXXFSTNM;
import corpcom7.XXXLSTNM;
import corpcom7.XXXMDINT;
import corpx1.XACCD;
import corpx1.XACTBL;
import corpx1.XATCD;
import corpx1.XATTBL;
import corpx1.XAUTBL;
import corpx1.XCATBL;
import corpx1.XCCTBL;
import corpx1.XGPCD;
import corpx1.XIDCD;
import corpx1.XNXTBL;
import corpx2.XNACD;
import corpx2.XNXCD;
import corpx2.XSOCD;
import corpx2.XXXPHN;
import corpx2.XXXPHNA;
import corpx2.XXXPHNN;
import corpx2.XXXPHNP;
import corpy2.YCHTBL;
import corpy2.YCPTBL;
import corpy2.YPOTBL;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import kl.common.KIZTBL;
import ku.common.KUCCOID;
import ku.common.KUCREC;
import ku.common.KUEREC;
import ku.common.KUHREC;
import ku.common.KUJCRIND;
import ku.common.KUKREC;
import ku.common.KUMSTRID;
import ku.common.KUNABOFL;
import ku.common.KUNBOQTY;
import ku.common.KUNMAPCT;
import ku.common.KUNREC;
import ku.common.KUZREC;
import op.common.OP1ALSEQ;
import ta.common.TA1REC;
import vv.common.VCTACT01;
import vv.common.VCULVL01;
import vv.common.VCULVL01-GROUP;
//*** PROGRAM=KM08 ****
// ----------------  km08 - change/inquiry company ------------
// 
// overview:  this application performs change functions for
//            general sales company information
// 
// date written: 01/90
// author:       Juan Fiat
// 
// ************************************************************
// *              maintenance history log                     *
// ************************************************************
// jfiat    03-13-90   added substitution flag
// dsalzw   03-30-90   db changes
// dsalzw   06-12-90   remove xcu - not used
// dsalzw   09-10-90   added kiztbl for audit trail
// dsalzw   10-15-90   update blgrp on cmpny
// dsalzw   12-10-90   add po Req & alloc fields
// dsalzw   02-04-91   db changes
// twatso   02-26-91   add vend auth field
//                     to company record processing
// twatso   03-20-91   add 'g' as another valid
//                     value for looking up sku ind
// dsalzw   05-08-91   removed km0m from security
// dsalzw   05-16-91   changed pf3 to use from appl
// dsalzw   06-09-91   db changes
// dsalzw   06-19-91   require both Ftwr & aprl for Aloc fields
// dsalzw   07-25-91   fix map attributes
// CHELLM   10-11-91   Deinstalled CUTAG record creation KUXREC
// CHELLM   03-13-92   Add channel class code. DB2 changes.
// CHELLM   09-18-92   Added Read and Update logic for:
//                     XACCD(1),SACCD(2),CU-ALOC-SEQ-APRL &
//                     CU-ALOC-SEQ-FTWR from VCMPNY01 to
//                     VCULVL01 (IO0990).  For now these codes
//                     will be maintained in both places.
// CHELLM   09-28-92   If vculvl01 row now found, use vcmpny01
//                     for xaccd and CU-ALOC-SEQ nbrs
// CHELLM   09-28-92   Don't display the 'global' char **, -1
//                     use the assumed value.
// CHELLM   01-26-93   Correct XAC display for inactive company
// CHELLM   05-19-93   Use DARACV.VCTACT01  for Credit Contact
//                     replacing DCUST.VCMPNY01.
// CHELLM   05-27-93   Remove Alloc Cd and Seq Nbr from Map.
//                     Both are now maintained on KG0D.
// 30-june-1993         dlegg    Check for numeric value before
//                               move in km08000.
// 12-JULY-1993         DLEGG    Change call to TA0020 with
//                               ABND to RETN. KM08210,230,240,
//                               295,260,270,280,422,426,466,
//                               468.
// 16-JULY-1993         DLEGG    Add sgrp to initialize all
//                               records used by appl.
// CHELLM   10-01-93   CSP 4.1 Converions.
// CHELLM   11-12-93   DATABASE CHANGES. VCMPNY01
// CHELLM   11-10-94   Added cu-vendor-nbr as display field.
// CHELLM   04-10-95   Added user security for Nike Canada.
// kclar1   09-11-96   chg edi for kucskind to not all g  .
// *Y2KFIX   12/02/97  DKENNY  Y2K MODIFICATIONS MADE TO:
// *                   KM08M100.
// *GDECKE  10-05-00   Require entry of channel class code
// *********************
Program KM08 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KM08W01 KM08W01; // record
  KM08W02 KM08W02; // record
  KM08W03 KM08W03; // record
  KUCREC KUCREC; // record
  KUEREC KUEREC; // record
  KUHREC KUHREC; // record
  KUKREC KUKREC; // record
  KUNREC KUNREC; // record
  KUZREC KUZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VCTACT01 VCTACT01; // record
  VCULVL01 VCULVL01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KIZTBL {deleteAfterUse = yes}; // table
  use XATTBL {deleteAfterUse = yes}; // table
  use XCCTBL {deleteAfterUse = yes}; // table
  use XCATBL {deleteAfterUse = yes}; // table
  use XACTBL {deleteAfterUse = yes}; // table
  use XNXTBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use YCPTBL {deleteAfterUse = yes}; // table
  use YCHTBL {deleteAfterUse = yes}; // table
  use YPOTBL {deleteAfterUse = yes}; // table
  use KM08M.KM08M100,  // forms
      KM08M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KM08000: KM08000();
    goto KM08100; /* converse sales maint/inq screen*/
    ;
    KM08100: KM08100();
    ;
    goto KM08100; /* sales  inq/maint    screen*/
    ;
  end // end main
end // end KM08

// read company
Function KM08-230()
  ;
   /* *************************************************/
   /* get the global customer level record vculvl01*/
   /* *************************************************/
  ;
  set SQLCA empty;
  set VCULVL01 empty;
  VCULVL01.KUCCOID = KM08M100.KUCCOID;
  VCULVL01.KUMSTRID = -1;
  VCULVL01.XNXCD = -1;
  VCULVL01.XGPCD = "**";
  ;
  call "IO0990" ("S ", SQLCA, VCULVL01) {isNoRefresh = yes, isExternal = yes}; /* read vculvl01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    KM08W02.VCULVL01-GROUP = VCULVL01.VCULVL01-GROUP;
    KM08W03.VCULVL01-GROUP = VCULVL01.VCULVL01-GROUP;
    KM08M100.XACCD[1] = VCULVL01.XACCD; /* apprl assn cata*/
    KM08M100.OP1ALSEQ[1] = VCULVL01.OP1ALSEQ; /* apprl alloc seq*/
    KM08M100.XACCD[2] = VCULVL01.XACCD; /* ftwr assn cata*/
    KM08M100.OP1ALSEQ[2] = VCULVL01.OP1ALSEQ; /* ftwr alloc seq*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCULVL01";
    TA1REC.TA1MAP = " ";
    KM08W01.KM08WKEY = KUCREC.KUCCOID;
    TA1REC.TA1TBLKE = KM08W01.KM08WKEY;
    TA1REC.TA1PGMNM = "KM08210";
    TA1REC.TA1LOC = "READ CULVL FOR GLOBAL ALOCATION";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
  ;
   /* *************************************************/
   /* get the footwear customer level record vculvl01*/
   /* *************************************************/
  ;
  VCULVL01.XGPCD = "02";
  ;
  call "IO0990" ("S ", SQLCA, VCULVL01) {isNoRefresh = yes, isExternal = yes}; /* read vculvl01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    KM08W-FTWR-FL = "Y"; /* footwear row exists*/
    KM08W02.VCULVL01-GROUP = VCULVL01.VCULVL01-GROUP;
     /* if the footwear is a global value, use the value from the apparel*/
     /* row for the footwear value.*/
    if (VCULVL01.XACCD == "**")
      KM08M100.XACCD[2] = KM08M100.XACCD[1]; /* FTwr assn cata*/
    else
      KM08M100.XACCD[2] = VCULVL01.XACCD; /* ftwr assn cata*/
    end
    if (VCULVL01.OP1ALSEQ == -1)
      KM08M100.OP1ALSEQ[2] = KM08M100.OP1ALSEQ[1];
    else
      KM08M100.OP1ALSEQ[2] = VCULVL01.OP1ALSEQ; /* ftwr alloc seq*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence  /* no footwear level table row found*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCULVL01";
      TA1REC.TA1MAP = " ";
      KM08W01.KM08WKEY = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KM08W01.KM08WKEY;
      TA1REC.TA1PGMNM = "KM08210";
      TA1REC.TA1LOC = "READING DB2 CULVL01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
  ;
end // end KM08-230

// Get Credit Contact
Function KM08-240()
  ;
   /* *********************************************************/
                          /* KM08-240*/
   /* Get the Credit Contact from the AR Contact table.*/
   /* *********************************************************/
  ;
      /* First try the Customer level Credit Contact.*/
      /* If a Customer level doen't exist, try the Group level*/
  ;
   /* **********************************************************/
  ;
  ;
  set SQLCA empty;
  set VCTACT01 empty;
  KM08W01.KM08W-FIRST-LAST-NAME = " ";
  KM08W01.KM08W-PHONE = " ";
  ;
  VCTACT01.KUCCOID = KM08M100.KUCCOID;
  VCTACT01.XXXSTAT = "A";
  VCTACT01.AR-CTCT-PRTY-IND = "1";
  VCTACT01.KUNCGIND = "C";
  ;
  call "IO3980" ("SA", SQLCA, VCTACT01) {isNoRefresh = yes, isExternal = yes}; /* read vctact01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    KM08W01.XXXLSTNM = VCTACT01.XXXLSTNM; /* last name*/
    KM08W01.XXXFSTNM = VCTACT01.XXXFSTNM; /* first name*/
    KM08W01.XXXMDINT = VCTACT01.XXXMDINT; /* middle initial*/
    KM08W01.XXXPHN = VCTACT01.XXXPHN; /* middle initial*/
    KM08W-PHN-AREA-CD = KM08W01.XXXPHNA; /* format area code*/
    KM08W-PHN-DASH1 = "-"; /* format dash*/
    KM08W-PHN-PREFIX = KM08W01.XXXPHNP; /* format prefix*/
    KM08W-PHN-DASH2 = "-"; /* format dash*/
    KM08W-PHN-NUMBER = KM08W01.XXXPHNN; /* format number*/
    KM08M100.KM08M-PHONE = KM08W01.KM08W-PHONE;
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCTACT01";
      TA1REC.TA1MAP = " ";
      KM08W01.KM08WKEY = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KM08W01.KM08WKEY;
      TA1REC.TA1PGMNM = "KM08-240";
      TA1REC.TA1LOC = "READING DB2 CTACT01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
  ;
  set SQLCA empty;
  set VCTACT01 empty;
  VCTACT01.KUCCOID = KM08M100.KUCCOID;
  VCTACT01.XXXSTAT = "A";
  VCTACT01.AR-CTCT-PRTY-IND = "1";
  VCTACT01.KUNCGIND = "G";
  ;
  call "IO3980" ("SA", SQLCA, VCTACT01) {isNoRefresh = yes, isExternal = yes}; /* read vctact01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    KM08W01.XXXLSTNM = VCTACT01.XXXLSTNM; /* last name*/
    KM08W01.XXXFSTNM = VCTACT01.XXXFSTNM; /* first name*/
    KM08W01.XXXMDINT = VCTACT01.XXXMDINT; /* middle initial*/
    KM08W01.XXXPHN = VCTACT01.XXXPHN; /* phone number*/
    KM08W-PHN-AREA-CD = KM08W01.XXXPHNA; /* format area code*/
    KM08W-PHN-DASH1 = "-"; /* format dash*/
    KM08W-PHN-PREFIX = KM08W01.XXXPHNP; /* format prefix*/
    KM08W-PHN-DASH2 = "-"; /* format dash*/
    KM08W-PHN-NUMBER = KM08W01.XXXPHNN; /* format number*/
    KM08M100.KM08M-PHONE = KM08W01.KM08W-PHONE; /* cr cntct phone*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCTACT01";
      TA1REC.TA1MAP = " ";
      KM08W01.KM08WKEY = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KM08W01.KM08WKEY;
      TA1REC.TA1PGMNM = "KM08-240";
      TA1REC.TA1LOC = "READING DB2 CTACT01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
  ;
  set SQLCA empty;
  set VCTACT01 empty;
  VCTACT01.KUCCOID = KM08M100.KUCGRPID;
  VCTACT01.XXXSTAT = "A";
  VCTACT01.AR-CTCT-PRTY-IND = "1";
  VCTACT01.KUNCGIND = "G";
  ;
  call "IO3980" ("SA", SQLCA, VCTACT01) {isNoRefresh = yes, isExternal = yes}; /* read vctact01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    KM08W01.XXXLSTNM = VCTACT01.XXXLSTNM; /* last name*/
    KM08W01.XXXFSTNM = VCTACT01.XXXFSTNM; /* first name*/
    KM08W01.XXXMDINT = VCTACT01.XXXMDINT; /* middle initial*/
    KM08W01.XXXPHN = VCTACT01.XXXPHN; /* phone number*/
    KM08W-PHN-AREA-CD = KM08W01.XXXPHNA; /* format area code*/
    KM08W-PHN-DASH1 = "-"; /* format dash*/
    KM08W-PHN-PREFIX = KM08W01.XXXPHNP; /* format prefix*/
    KM08W-PHN-DASH2 = "-"; /* format dash*/
    KM08W-PHN-NUMBER = KM08W01.XXXPHNN; /* format number*/
    KM08M100.KM08M-PHONE = KM08W01.KM08W-PHONE; /* cr cntct phone*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KM08M100.KM08M-PHONE = " ";
      /* next sentence*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCTACT01";
      TA1REC.TA1MAP = " ";
      KM08W01.KM08WKEY = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KM08W01.KM08WKEY;
      TA1REC.TA1PGMNM = "KM08-240";
      TA1REC.TA1LOC = "READING DB2 CTACT01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
  ;
   /* ********************** END OF KM08-240 *********************/
end // end KM08-240

// FORMAT CREDIT CONTACT NAME
Function KM08-245()
   /* ***************************************************************/
   /* *  maintenance log:                               *************/
   /* 08/08/93 bcourt Abend with bad subscript for IX2.           **/
   /* (First nm had only 1 char, last name had all 25 chars.)**/
   /* ***************************************************************/
   /* FORMAT CREDIT CONTACT NAME INTO 30 CHARACTERS.*/
  ;
  if (VCTACT01.XXXFSTNM == " ")
    KM08M100.KUCCNTCT = VCTACT01.XXXLSTNM;
    return;
  end
  ;
  KM08W01.KM08W-FIRST-LAST-NAME = VCTACT01.XXXFSTNM;
  KM08W01.KM08W-LAST-NAME = VCTACT01.XXXLSTNM;
  KM08W01.KM08W-IX1 = 1;
  while (KM08W01.KM08W-IX1 < 40
   && KM08W01.KM08W-FLNAME-ARRAY[KM08W-IX1] != "^")
    if (KM08W01.KM08W-FLNAME-ARRAY[KM08W-IX1] == " ")
      KM08W01.KM08W-IX1 = KM08W01.KM08W-IX1 + 1;
      if (KM08W01.KM08W-FLNAME-ARRAY[KM08W-IX1] == " ")
        KM08W01.KM08W-FLNAME-ARRAY[KM08W-IX1] = "^";
        KM08W01.KM08W-IX1 = KM08W01.KM08W-IX1 - 1;
      else
        KM08W01.KM08W-IX1 = KM08W01.KM08W-IX1 - 1;
      end
    end
    KM08W01.KM08W-IX1 = KM08W01.KM08W-IX1 + 1;
  end
  ;
  KM08W01.KM08W-IX2 = 1;
  while (KM08W01.KM08W-IX1 < 40
   && KM08W01.KM08W-IX2 < 26) /* 8/9/93 add check for max*/
    KM08W01.KM08W-FLNAME-ARRAY[KM08W-IX1] = KM08W01.KM08W-LNAME-ARRAY[KM08W-IX2];
    if (KM08W01.KM08W-FLNAME-ARRAY[KM08W-IX1] == " ")
      KM08W01.KM08W-IX2 = KM08W01.KM08W-IX2 + 1;
      if (KM08W01.KM08W-IX2 > 25 /* 8/9/93 add check for max*/
       || KM08W01.KM08W-LNAME-ARRAY[KM08W-IX2] == " ")
        KM08W01.KM08W-IX1 = KM08W01.KM08W-IX1 + 40; /* force end of loop*/
      else
        KM08W01.KM08W-IX2 = KM08W01.KM08W-IX2 - 1;
      end
    end
    KM08W01.KM08W-IX1 = KM08W01.KM08W-IX1 + 1;
    KM08W01.KM08W-IX2 = KM08W01.KM08W-IX2 + 1;
  end
  KM08M100.KUCCNTCT = KM08W01.KM08W-FIRST-LAST-NAME;
end // end KM08-245

// init chg company processing
Function KM08000()
  ;
   /* *********************************************/
    /* initialization of variables used in the  **/
    /* processing of the sales company screen   **/
   /* *********************************************/
  ;
   /* TEMP001;*/
  ;
  XSENTRY();
  ;
  XSSEGTR(); /* set segmented transaction id*/
  ;
  set KM08M100 initial; /* credit maintenance screen*/
  ;
  KM08S-INIT-RECS();
  ;
  KM08W01.KM08WMD1 = "N"; /* init cmpny update flag*/
  KM08W01.KM08WMD2 = "N"; /* init culvl update flag*/
  KM08W01.KM08WMD3 = "N"; /* init cmmnt update flag*/
  KM08W01.KM08WEFL = "N"; /* init ready to update flag*/
  KM08W01.KM08WERR = "N"; /* set error flag*/
  KM08W01.KM08W-FTWR-FL = "N"; /* set footwear row flag*/
  ;
   /* ****************************/
   /* check fast path entry*/
   /* ****************************/
  ;
  if (COMMAREA.CACHGFL == "Y")
    KM08W01.KM08WUPM = "Y"; /* update mode*/
    KM08401(); /* set fields for update*/
  else
    KM08W01.KM08WUPM = "N"; /* inquiry move*/
    KM08402(); /* set fields for inquiry*/
  end
  ;
  ;
  KM08W01.KM08WUSR = COMMAREA.CAUSERA; /* key from add menu*/
  if (COMMAREA.CAITEM != " ")
    KM08W01.KM08WUSR = COMMAREA.CAITEM; /* key from fastpath*/
    if (KM08W01.KM08WCNO-CHAR is numeric)
      KM08M100.KUCCOID = KM08W01.KM08WCNO;
    end
  else
    if (KM08W01.KM08WCNO-CHAR is numeric)
      KM08M100.KUCCOID = KM08W01.KM08WCNO; /* key from chg menu*/
    end
  end
  ;
  if (KM08M100.KUCCOID > 0) /* if a company is available*/
    KM08200(); /* read/format basic company screen*/
  end
  ;
end // end KM08000

// converse map
Function KM08100()
  ;
   /* *******************************************/
   /* customer credit screen process          **/
   /* 1. prepares working variables           **/
   /* 2. presents screen                      **/
   /* 3. edits special keys                   **/
   /* 4. edit screen data                     **/
                                           /* **/
   /* *******************************************/
  ;
  KM08W01.KM08WERR = "N"; /* init error flag*/
  KM08M100.KM08MDAT = VGVar.currentShortGregorianDate; /* set screen date*/
  ;
  ;
  converse KM08M100 ;
  ;
  KM08400(); /* edit pf and special keys*/
  ;
  if (KM08W01.KM08WERR == "N") /* no errors*/
    KM08500(); /* edit screen*/
  end
  ;
  if (KM08W01.KM08WERR == "N" /* no errors*/
   && KM08W01.KM08WUPM == "Y") /* update mode*/
    if (KM08W01.KM08WMD1 == "Y"
     || KM08W01.KM08WMD3 == "Y")
      converseLib.validationFailed(277); /* good edit*/
      KM08W01.KM08WEFL = "Y"; /* setup update flag*/
    end
  end
end // end KM08100

// prepare screen
Function KM08200()
  ;
  ;
  ;
  ;
   /* *********************************************************/
     /* read and format company screen data*/
   /* *********************************************************/
  ;
  set KUCREC empty; /* clear out company record*/
  KM08W01.KM08WCID = 0; /* save current company id*/
  ;
  KUCREC.KUCCOID = KM08M100.KUCCOID; /* set company key*/
  ;
  KM08210(); /* read vcmpny01*/
  if (KM08W01.KM08WERR == "Y") /* not found?*/
    set KM08M100 initial;
    KM08M100.KUCCOID = KUCREC.KUCCOID; /* set company key*/
    set KM08M100.KUCCOID cursor, bold;
    return;
  end
  ;
  KM08220(); /* format cmpny01 to map km08m100*/
  ;
  KM08W01.KM08WCID = KUCREC.KUCCOID; /* save current company id*/
  ;
  ;
   /* *********************************************************/
     /* read and format customer level data*/
   /* *********************************************************/
  ;
  KM08-230(); /* read vculvl01*/
  ;
   /* *********************************************************/
     /* read and format customer contact (credit contact)*/
   /* *********************************************************/
  ;
  KM08-240(); /* read VCTACT01*/
  KM08-245(); /* FORMAT CR CONTACT NAME*/
  ;
  ;
  if (KM08W01.KM08WERR == "Y") /* not found?*/
    set KM08M100 initial;
    KM08M100.KUCCOID = KUCREC.KUCCOID; /* set company key*/
    set KM08M100.KUCCOID cursor, bold;
    return;
  end
  ;
   /* ************************************************/
   /* -----  read/fmt principals---- (credit dept)*/
   /* ************************************************/
  ;
  set KUHREC empty; /* clear out principals record*/
  KUHREC.KUCCOID = KUCREC.KUCCOID; /* set company key*/
  KM08W01.KM08WSUB = 1;
  ;
  while (KM08WSUB <= 3)
      /* clear screen*/
    ;
    KM08M100.KUHPRNM[KM08WSUB] = " ";
    KM08M100.KUHPRTLT[KM08WSUB] = " ";
    ;
    KM08295(); /* read principals*/
    if (VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      ;
      KM08M100.KUHPRNM[KM08WSUB] = KUHREC.KUHPRNM; /* name*/
      KM08M100.KUHPRTLT[KM08WSUB] = KUHREC.KUHPRTLT; /* title*/
    end
    KM08W01.KM08WSUB = KM08W01.KM08WSUB + 1;
  end
  ;
   /* ************************************************/
   /* -----  read/fmt comment  ----- (credit dept)*/
   /* ************************************************/
  ;
  KM08M100.KM08MCMT = " "; /* clear credit comment*/
  KM08M100.KUECOMNT = " "; /* clear sales comment*/
  KM08W01.KM08WCMT = " "; /* clear comment*/
  set KUEREC empty; /* clear out comment record*/
  ;
  if (KUCREC.KUCCOMNT != "Y") /* check comment indicator*/
    /* next sentence*/
  else
    KUEREC.KUECMTID = KUCREC.KUCCOID; /* set comment key*/
    KUEREC.KUECTYP = "C";
    ;
    KM08260(); /* select set on comments within dept*/
    KM08270(); /* select next on comments within dept*/
    ;
    while (SQLCA.VAGen_SQLCODE == 0)
      if (KUEREC.XNDCD == "CRMN") /* credit comment?*/
        SQLCA.VAGen_SQLCODE = 100;
        KM08M100.KM08MCMT = KUEREC.KUECOMNT; /* format to screen*/
      else
        KM08270(); /* read next comment*/
      end
    end
    ;
    KM08280(); /* close set*/
    ;
    ;
    ;
    /* ************************************************/
    /* -----  read/fmt comment  ----- (sales  dept)*/
    /* ************************************************/
    ;
    set KUEREC empty;
    KUEREC.KUECMTID = KUCREC.KUCCOID; /* set comment key*/
    KUEREC.KUECTYP = "C";
    ;
    KM08260(); /* select set on comments within dept*/
    KM08270(); /* select next on comments within dept*/
    ;
    while (SQLCA.VAGen_SQLCODE == 0)
      if (KUEREC.XNDCD == "SMNG") /* sales comment?*/
        SQLCA.VAGen_SQLCODE = 100;
        KM08W01.KM08WCMT = KUEREC.KUEGRP; /* save comment*/
        KM08M100.KUECOMNT = KUEREC.KUECOMNT; /* format to screen*/
      else
        KM08270(); /* read next comment*/
      end
    end
    ;
    KM08280(); /* close set*/
    ;
  end
  ;
  if (KM08W01.KM08WUPM == "Y")
    KM08401(); /* update mode*/
  else
    KM08402(); /* inquiry mode*/
  end
end // end KM08200

// read company
Function KM08210()
  ;
   /* *************************************************/
   /* get company record   kucrec*/
   /* *************************************************/
  ;
  set SQLCA empty;
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* read cmpny01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    set KM08M100.KUCCOID initialAttributes;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(25); /* company not found*/
      KM08W01.KM08WERR = "Y"; /* set error message.*/
      set KM08M100.KUCCOID cursor, bold;
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      TA1REC.TA1MAP = " ";
      KM08W01.KM08WKEY = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KM08W01.KM08WKEY;
      TA1REC.TA1PGMNM = "KM08210";
      TA1REC.TA1LOC = "READING DB2 CMPNY01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
   /* ***********************************/
   /* edit for account class code*/
   /* ***********************************/
  ;
  if (KUCREC.XAUCD in XAUTBL.XAUCD)
    if (XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KM08W01.XATCD = XAUTBL.XATCD[sysVar.arrayIndex];
    else
      KM08W01.XATCD = " ";
    end
  else
    KM08W01.XATCD = " ";
  end
  ;
   /* **********************************************/
   /* edit account type for allowance of user groups*/
   /* **********************************************/
  ;
  if (KM08W01.XATCD == "08") /* edit for cole haan user*/
    if (COMMAREA.CADLVL[1] == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(272); /* not authorized to maint this acct*/
      KM08W01.KM08WUPM = "N"; /* update flag = n*/
    end
  else
    if (KM08W01.XATCD == "03") /* edit for nil users*/
      if (COMMAREA.CADLVL[2] == "Y")
        /* next sentence*/
      else
        converseLib.validationFailed(272); /* not authorized to maint this acct*/
        KM08W01.KM08WUPM = "N"; /* update flag = n*/
      end
    else
      if (COMMAREA.CADLVL[1] == "Y"
       || COMMAREA.CADLVL[2] == "Y")
        converseLib.validationFailed(272); /* not authorized to maint this acct*/
        KM08W01.KM08WUPM = "N"; /* update flag = n*/
      end
    end
  end
                  /* Edit for Nike Canada user*/
  ;
  if (KUCREC.XLECD == "03") /* Edit for Nike Canada users*/
    if (COMMAREA.CADLVL[3] == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(272); /* not authorized to maint this acct*/
      KM08W01.KM08WUPM = "N"; /* update flag = n*/
    end
  else
    if (COMMAREA.CADLVL[3] == "Y")
      converseLib.validationFailed(272); /* not authorized to maint this acct*/
      KM08W01.KM08WUPM = "N"; /* update flag = n*/
    end
  end
  ;
end // end KM08210

// format company
Function KM08220()
  ;
   /* **************************/
   /* format company update*/
   /* **************************/
  ;
  KM08M100.KUCGRPID = KUCREC.KUCGRPID; /* group id*/
  KM08M100.KUKPCOID = KUCREC.KUKPCOID; /* parent id*/
   /* KUCNTCT Credit Contact now taken from DACRCV.VCTACT01 Credit Contact*/
   /* MOVE KUCREC.KUCCNTCT TO KM08M100.KUCCNTCT;/* contact*/
  KM08M100.KUCCONM = KUCREC.KUCCONM; /* company name*/
  KM08M100.KUCCOANM = KUCREC.KUCCOANM; /* company dba name*/
  KM08W01.KM08WBDT = KUCREC.KUCCOBDT; /* bus date*/
  KM08M100.KM08MSBY = KM08W01.KM08WSBY; /* bus year*/
  KM08M100.KM08MSBM = KM08W01.KM08WSBM; /* bus month*/
  KM08M100.KUCCOLCD = KUCREC.KUCCOLCD;
  KM08M100.XXXSTAT = KUCREC.XXXSTAT;
  KM08M100.KUCCRLIN = KUCREC.KUCCRLIN;
  KM08M100.YCH-CHNL-CLS-CD = KUCREC.YCH-CHNL-CLS-CD;
  KM08M100.CU-VEND-NBR = KUCREC.CU-VEND-NBR;
  KM08M100.XLECD = KUCREC.XLECD;
  KM08M100.XCCCD = KUCREC.XCCCD;
  KM08M100.XCUCD[1] = KUCREC.XCUCD[1];
  KM08M100.XCUCD[2] = KUCREC.XCUCD[2];
  KM08M100.YCPCD = KUCREC.YCPCD; /* co-op analyst*/
  KM08M100.XAUCD = KUCREC.XAUCD; /* acct class code*/
  KM08M100.KUCSKIND = KUCREC.KUCSKIND; /* xref code*/
  KM08M100.KUCSSCNT = KUCREC.KUCSSCNT; /* store count*/
  KM08M100.KUCNSCNT = KUCREC.KUCNSCNT; /* nike store count*/
  KM08M100.KUCPSFL = KUCREC.KUCPSFL; /* substitution flag*/
  KM08M100.KUCPOFL = KUCREC.KUCPOFL; /* po req flag*/
  KM08M100.KUCYPOAP = KUCREC.KUCYPOAP; /* aprl - po req*/
  KM08M100.KUCYPOFT = KUCREC.KUCYPOFT; /* ftwr - po req*/
  KM08M100.KUCVNDFL = KUCREC.KUCVNDFL; /* vend auth req ind*/
   /* *  091892 these fields are now taken from VCULVL01*/
   /* MOVE KUCREC.XACCD(1) TO KM08M100.XACCD(1); /* aprl-assign cata*/
   /* MOVE KUCREC.XACCD(2) TO KM08M100.XACCD(2); /* ftwr-assign cata*/
   /* MOVE KUCREC.KUCSEQAP TO KM08M100.KUCSEQAP; /* aprl-alloc seq*/
   /* MOVE KUCREC.KUCSEQFT TO KM08M100.KUCSEQFT; /* ftwr-alloc seq*/
  ;
  ;
end // end KM08220

// open comment cursor
Function KM08260()
  ;
   /* ***********************************************/
   /* open cursor for comments*/
   /* ***********************************************/
  ;
  set SQLCA empty;
  ;
  call "IO0250" ("SS", SQLCA, KUEREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    KM08W01.KM08WSQL = SQLCA.SQLCAREC; /* hold error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* syncpoint rollback*/
    SQLCA.SQLCAREC = KM08W01.KM08WSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCOMNT01";
    TA1REC.TA1MAP = " ";
    KM08W01.KM08WKEY = KUEREC.KUECMTID;
    TA1REC.TA1TBLKE = KM08W01.KM08WKEY;
    TA1REC.TA1PGMNM = "KM08260";
    TA1REC.TA1LOC = "SS ON VCOMNT01   ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
  ;
  ;
end // end KM08260

// read comment
Function KM08270()
  ;
  ;
   /* ******************************/
   /* getnext comment*/
   /* ******************************/
  ;
  set SQLCA empty;
  ;
  call "IO0250" ("SN", SQLCA, KUEREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    KM08W01.KM08WSQL = SQLCA.SQLCAREC; /* hold error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* syncpoint rollback*/
    SQLCA.SQLCAREC = KM08W01.KM08WSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCOMNT01";
    TA1REC.TA1MAP = " ";
    KM08W01.KM08WKEY = KUEREC.KUECMTID;
    TA1REC.TA1TBLKE = KM08W01.KM08WKEY;
    TA1REC.TA1PGMNM = "KM08270";
    TA1REC.TA1LOC = "SN ON VCOMNT01   ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
  ;
  ;
end // end KM08270

// close comment cursor
Function KM08280()
  ;
  ;
   /* ***************************************/
   /* close cursor*/
   /* ***************************************/
  ;
  set SQLCA empty;
  ;
  call "IO0250" ("CS", SQLCA, KUEREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    KM08W01.KM08WSQL = SQLCA.SQLCAREC; /* hold error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* syncpoint rollback*/
    SQLCA.SQLCAREC = KM08W01.KM08WSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCOMNT01";
    TA1REC.TA1MAP = " ";
    KM08W01.KM08WKEY = KUEREC.KUECMTID;
    TA1REC.TA1TBLKE = KM08W01.KM08WKEY;
    TA1REC.TA1PGMNM = "KM08280";
    TA1REC.TA1LOC = "CS ON VCOMNT01   ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
  ;
  ;
end // end KM08280

// get principal
Function KM08295()
  ;
  ;
  ;
  ;
     /* read principal*/
  ;
  KUHREC.KUHSEQNO = KM08W01.KM08WSUB;
  call "IO0320" ("S ", SQLCA, KUHREC) {isNoRefresh = yes, isExternal = yes}; /* read principal*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VPRINC01";
      TA1REC.TA1MAP = " ";
      KM08W01.KM08WKEY = KUHREC.KUCCOID;
      TA1REC.TA1TBLKE = KM08W01.KM08WKEY;
      TA1REC.TA1PGMNM = "KM08295";
      TA1REC.TA1LOC = "READING PRINC01 SEQ";
      KM08W01.KM08WKEY = KUHREC.KUHSEQNO;
      TA1REC.TA1LOCAT[4] = KM08W01.KM08WKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
  ;
  ;
end // end KM08295

// check special keys
Function KM08400()
  ;
   /* ************************************************/
     /* edit all special entry keys                **/
   /* ************************************************/
  ;
  ;
   /* **************************************/
   /* edit pa2 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pa2)
    KM08200(); /* refresh the screen*/
    KM08W01.KM08WERR = "Y"; /* set error flagto display screen*/
    KM08W01.KM08WMD1 = "N";
    KM08W01.KM08WMD2 = "N";
    KM08W01.KM08WMD3 = "N";
    KM08W01.KM08WEFL = "N";
    return;
  end
  ;
   /* **************************************/
   /* edit enter  key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is enter)
    if (KM08M100.CATOAP > " ") /* fast path*/
      COMMAREA.CATOAP = KM08M100.CATOAP;
      if (KM08M100.CAITEM == " ")
        COMMAREA.CAUSERA = KM08M100.KUCCOID;
      else
        COMMAREA.CAITEM = KM08M100.CAITEM;
      end
      COMMAREA.CAFROMAP = "KM08";
      XSEXIT();
      KM08M100.VAGen_EZEMSG = COMMAREA.CAMSG;
      KM08W01.KM08WERR = "Y";
      set KM08M100.CATOAP cursor, bold;
    else
      set KM08M100.CATOAP initialAttributes;
    end
    return;
  else
    if (KM08M100.CATOAP > " ")
      KM08W01.KM08WERR = "Y";
      converseLib.validationFailed(90); /* can not fast path and use pf keys*/
      set KM08M100.CATOAP cursor, bold;
      return;
    else
      set KM08M100.CATOAP modified;
    end
  end
  ;
  ;
   /* **************************************/
   /* edit pf2 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf2) /* update/inquiry tagle*/
    if (KM08W01.KM08WUPM == "N") /* in inquiry mode*/
      if (COMMAREA.CACHGFL == "Y") /* allow to maintenance*/
        KM08W01.KM08WUPM = "Y"; /* change to update mode*/
        KM08401(); /* set fields for update*/
        KM08200(); /* refresh screen*/
        KM08W01.KM08WERR = "Y"; /* display screen*/
        KM08W01.KM08WMD1 = "N";
        KM08W01.KM08WMD2 = "N";
        KM08W01.KM08WMD3 = "N";
        KM08W01.KM08WEFL = "N";
        return;
      else
        converseLib.validationFailed(330);
        KM08W01.KM08WERR = "Y"; /* display screen*/
        return;
      end
    else
      KM08W01.KM08WUPM = "N"; /* change to inquiry mode*/
      KM08402(); /* set fields for inquiry*/
      KM08200(); /* refresh screen*/
      KM08W01.KM08WERR = "Y"; /* display screen*/
      KM08W01.KM08WMD1 = "N";
      KM08W01.KM08WMD2 = "N";
      KM08W01.KM08WMD3 = "N";
      KM08W01.KM08WEFL = "N";
      return;
    end
  end
  ;
   /* **************************************/
   /* edit pf3 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf3) /* back to company update*/
    COMMAREA.CAUSERA = KM08M100.KUCCOID;
    COMMAREA.CAITEM = " ";
    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    COMMAREA.CAFROMAP = "KM08";
    XSEXIT();
    KM08M100.VAGen_EZEMSG = COMMAREA.CAMSG;
    KM08W01.KM08WERR = "Y";
    return;
  end
  ;
   /* **************************************/
   /* edit pf4 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf4) /* back to goal menu*/
    COMMAREA.CAFROMAP = "KM08";
    XSPF4();
    KM08M100.VAGen_EZEMSG = COMMAREA.CAMSG;
    KM08W01.KM08WERR = "Y";
    return;
  end
  ;
  ;
   /* **************************************/
   /* edit pf12 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf12 /* update key*/
   && KM08W01.KM08WEFL == "Y"      /* all edits ok*/
   && KM08W01.KM08WERR == "N")     /* no errors*/
    ;
    KM08500(); /* edit screen*/
    ;
    if (KM08W01.KM08WMD1 == "Y" /* if company data updated*/
     && KM08W01.KM08WERR == "N") /* no errors*/
      KM08420(); /* process kucrec update*/
    end
    ;
    if (KM08W01.KM08WMD3 == "Y" /* if comments data updated*/
     && KM08W01.KM08WERR == "N") /* no errors*/
      KM08460(); /* process kuerec update*/
    end
    ;
    if (KM08W01.KM08WERR == "N") /* no errors*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* commit changes*/
    end
    ;
    if (KM08W01.KM08WERR == "N") /* no errors*/
      converseLib.validationFailed(279); /* all updates ok*/
      KM08W01.KM08WERR = "Y"; /* set error flag*/
      KM08W01.KM08WEFL = "N"; /* updates ok set =n*/
      KM08W01.KM08WMD1 = "N"; /* reset cmpny update*/
      KM08W01.KM08WMD2 = "N"; /* reset cmpny update*/
      KM08W01.KM08WMD3 = "N"; /* reset cmtn  update*/
    else
      KM08W01.KM08WEFL = "N"; /* reset update ok flag*/
    end
    ;
  end
  ;
  if (converseVar.eventKey is pf12 /* update key*/
   && KM08W01.KM08WEFL == "N"      /* edits not ok*/
   && KM08W01.KM08WERR == "N")     /* error flag*/
    KM08W01.KM08WERR = "Y"; /* error flag*/
    converseLib.validationFailed(280); /* can pf12 without pressing enter*/
  end
  ;
  if (KM08W01.KM08WERR == "N")
    converseLib.validationFailed(281); /* invalid pf key message*/
    KM08W01.KM08WERR = "Y";
  end
  ;
  ;
  ;
end // end KM08400

// set fields for update
Function KM08401()
  ;
  ;
   /* *****************************/
   /* set fields for update*/
   /* *****************************/
  ;
  KM08M100.KM08MTTL = "UPDATE ";
  set KM08M100.KM08MTTL initialAttributes;
  ;
  set KM08M100.KUCCOID cursor, initialAttributes;
  ;
  ;
  if (COMMAREA.CACLVL[1] == "Y")
    set KM08M100.YCPCD initialAttributes; /* co-op analyst*/
    set KM08M100.YCH-CHNL-CLS-CD initialAttributes;
    set KM08M100.XAUCD initialAttributes; /* acct class code*/
    set KM08M100.KUCSKIND initialAttributes; /* prod xref*/
    set KM08M100.KUCSSCNT initialAttributes; /* store count*/
    set KM08M100.KUCNSCNT initialAttributes; /* nike store count*/
    set KM08M100.KUCPSFL initialAttributes; /* substitution flag*/
    set KM08M100.KUCPOFL initialAttributes; /* PO Required flag*/
    set KM08M100.KUCYPOAP initialAttributes; /* aprl - PO Required*/
    set KM08M100.KUCYPOFT initialAttributes; /* ftwr - PO Required*/
    set KM08M100.KUCVNDFL initialAttributes; /* vend auth req fl*/
    set KM08M100.KUECOMNT initialAttributes; /* sales comment*/
  end
  ;
  ;
  ;
end // end KM08401

// set fields for inquiry
Function KM08402()
  ;
  ;
   /* *****************************/
   /* set fields for inquiry*/
   /* *****************************/
  ;
  KM08M100.KM08MTTL = "INQUIRY";
  set KM08M100.KM08MTTL skip;
  ;
  set KM08M100.KUCCOID cursor, initialAttributes;
  ;
  ;
  set KM08M100.YCPCD skip; /* co-op analyst*/
  set KM08M100.XAUCD skip; /* acct class code*/
  set KM08M100.YCH-CHNL-CLS-CD skip;
  set KM08M100.KUCSKIND skip; /* prod xref*/
  set KM08M100.KUCSSCNT skip; /* store count*/
  set KM08M100.KUCNSCNT skip; /* nike store count*/
  set KM08M100.KUCPSFL skip; /* substitution flag*/
  set KM08M100.KUCPOFL skip; /* PO Required flag*/
  set KM08M100.KUCYPOAP skip; /* aprl - PO Required*/
  set KM08M100.KUCYPOFT skip; /* ftwr - PO Required*/
  set KM08M100.KUCVNDFL skip; /* vend auth req flag*/
  ;
  set KM08M100.KUECOMNT skip; /* sales comment*/
end // end KM08402

// prepare company for update
Function KM08420()
   /* *************************************************/
   /* update company and create audit trail*/
   /* *************************************************/
  ;
   /* convert csp time/date format to db2 time/date stamp format*/
  XX0XS01();
  ;
  ;
   /* ****************************/
   /* prepare before look audit*/
   /* ****************************/
  ;
  set KUZREC empty;
  KUZREC.KUZTYPE = "C"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = "B"; /* blank-add, b-before, a-after*/
  KUZREC.XXXTBLNM = "VCMPNY01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUCREC.KUCCOID;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUCREC.KUCGRP;
  ;
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM08   ";
    TA1REC.TA1LOCAT[1] = "KM08420  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VCMPNY01 ";
    TA1REC.TA1MAP = "KM08M000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VCMPNY01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  ;
  KM08422(); /* add audit before image for cmpny01*/
  ;
  KM08424(); /* format cmpny general data update*/
  ;
  KM08426(); /* update company*/
  ;
   /* ****************************/
   /* format after look audit*/
   /* ****************************/
  ;
  set KUZREC empty;
  KUZREC.KUZTYPE = "C"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = "A"; /* blank-add, b-before, a-after*/
  KUZREC.XXXTBLNM = "VCMPNY01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUCREC.KUCCOID;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUCREC.KUCGRP;
  ;
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM08   ";
    TA1REC.TA1LOCAT[1] = "KM08420  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VCMPNY01 ";
    TA1REC.TA1MAP = "KM08M000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VCMPNY01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  ;
  KM08422(); /* write audit trail after image*/
  ;
  ;
  ;
end // end KM08420

// inser audit
Function KM08422()
   /* **********************/
    /* add before image*/
   /* **********************/
  ;
  set SQLCA empty;
  ;
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUAUD01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1PGMNM = "KM08422";
    TA1REC.TA1LOC = "ADD DB2 DCUST.VCUAUD01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
  ;
  ;
end // end KM08422

// format company
Function KM08424()
   /* **************************/
   /* format company update*/
   /* **************************/
  KUCREC.YCPCD = KM08M100.YCPCD; /* co-op analyst*/
  KUCREC.XAUCD = KM08M100.XAUCD; /* acct class code*/
  KUCREC.YCH-CHNL-CLS-CD = KM08M100.YCH-CHNL-CLS-CD;
  KUCREC.KUCSKIND = KM08M100.KUCSKIND; /* prod xref*/
  KUCREC.KUCSSCNT = KM08M100.KUCSSCNT; /* store count*/
  KUCREC.KUCNSCNT = KM08M100.KUCNSCNT; /* nike store count*/
  KUCREC.KUCPSFL = KM08M100.KUCPSFL; /* substitution flag*/
  KUCREC.KUCPOFL = KM08M100.KUCPOFL; /* po required flag*/
  KUCREC.KUCYPOAP = KM08M100.KUCYPOAP; /* aprl - po required*/
  KUCREC.KUCYPOFT = KM08M100.KUCYPOFT; /* ftwr - po required*/
  KUCREC.KUCVNDFL = KM08M100.KUCVNDFL; /* vend auth req fl*/
  ;
  if (KM08M100.KUECOMNT > " ")
    KUCREC.KUCCOMNT = "Y"; /* comment indicator*/
  end
  ;
  ;
  KUCREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* stamp chg date*/
  KUCREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* stamp chg time*/
  ;
  ;
  ;
end // end KM08424

// update company
Function KM08426()
   /* **************************/
   /* update company*/
   /* **************************/
  ;
  set SQLCA empty;
  ;
  call "IO0240" ("U ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      converseLib.validationFailed(31); /* cmpny upt since last request msg*/
      KM08W01.KM08WERR = "Y"; /* set error msg*/
      KM08200(); /* refresh the screen*/
      return;
    else
      KM08W01.KM08WSQL = SQLCA.SQLCAREC; /* hold error sqlca*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      SQLCA.SQLCAREC = KM08W01.KM08WSQL;
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      TA1REC.TA1MAP = " ";
      KM08W01.KM08WKEY = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KM08W01.KM08WKEY;
      TA1REC.TA1PGMNM = "KM08426";
      TA1REC.TA1LOC = "UPDATE DB2 DCUST.VCMPNY01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
  ;
  ;
end // end KM08426

// add comment
Function KM08460()
   /* *******************************************/
   /* process comment maintenance*/
   /* *******************************************/
   /* **********format the date to update the "zz" family ****/
  XX0XS01();
  ;
  ;
  if (KM08W01.KM08WCMT == " ") /* if it is a new comment*/
    set KUEREC empty; /* empty out the comment record*/
    KUEREC.KUECMTID = KM08M100.KUCCOID;
  else /* ; if it is an old comment*/
    KUEREC.KUEGRP = KM08W01.KM08WCMT; /* before image*/
  end
  ;
   /* *******************************/
   /* insert before comment audit*/
   /* *******************************/
  ;
  set KUZREC empty;
  KUZREC.KUZTYPE = "C"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = "B"; /* blank-add, b-before, a-after*/
  KUZREC.XXXTBLNM = "VCOMNT01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUEREC.KUECMTID;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUEREC.KUEGRP;
  ;
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM08   ";
    TA1REC.TA1LOCAT[1] = "KM08460  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VCOMNT01 ";
    TA1REC.TA1MAP = "KM08M000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VCOMNT01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  KM08422(); /* insert before image of comment*/
  ;
  KM08464(); /* format comment record*/
  ;
  if (KM08W01.KM08WCMT == " ") /* if it is a new comment*/
    KM08466(); /* insert comment*/
  else
    KM08468(); /* update comment*/
  end
  ;
   /* ************************************/
   /* format audit trail record (after)*/
   /* ************************************/
  ;
  set KUZREC empty;
  KUZREC.KUZTYPE = "C";
  KUZREC.KUZBFCD = "A"; /* change/after*/
  KUZREC.XXXTBLNM = "VCOMNT01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUEREC.KUECMTID;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUEREC.KUEGRP;
  ;
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM08   ";
    TA1REC.TA1LOCAT[1] = "KM08460  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VCOMNT01 ";
    TA1REC.TA1MAP = "KM08M000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VCOMNT01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  KM08422(); /* insert after image of comment*/
  ;
  ;
  ;
end // end KM08460

// prepare comment
Function KM08464()
   /* **************************************/
   /* prepare comment record*/
   /* **************************************/
  ;
  KUEREC.KUECMTID = KM08M100.KUCCOID; /* comment id*/
  KUEREC.KUECTYP = "C";
  KUEREC.KUECSEQ = 1;
  KUEREC.XNDCD = "SMNG"; /* internal dept.*/
  KUEREC.KUECOMNT = KM08M100.KUECOMNT; /* comment*/
  ;
  KUEREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* stamp add date*/
  KUEREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* stamp chg time*/
  ;
  ;
end // end KM08464

// insert comment
Function KM08466()
   /* ********************************************/
   /* insert comment record*/
   /* ********************************************/
  ;
  set SQLCA empty;
  ;
  KM08W01.KM08WCMT = KUEREC.KUEGRP;
  ;
  call "IO0250" ("A ", SQLCA, KUEREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    KM08W01.KM08WSQL = SQLCA.SQLCAREC; /* hold error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* syncpoint rollback*/
    SQLCA.SQLCAREC = KM08W01.KM08WSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCOMNT01";
    TA1REC.TA1MAP = " ";
    KM08W01.KM08WKEY = KUEREC.KUECMTID;
    TA1REC.TA1TBLKE = KM08W01.KM08WKEY;
    TA1REC.TA1PGMNM = "KM08466";
    TA1REC.TA1LOC = "ADD VCOMNT01 DEPT-";
    TA1REC.TA1LOCAT[4] = KUEREC.XNDCD;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
  ;
  ;
end // end KM08466

// update comment
Function KM08468()
   /* **********************/
    /* update comment*/
   /* **********************/
  ;
  set SQLCA empty;
  ;
  call "IO0250" ("U ", SQLCA, KUEREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* different change count?*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      converseLib.validationFailed(32); /* comment upt since last ref. msg*/
      KM08W01.KM08WERR = "Y"; /* set error msg*/
      KM08200(); /* refresh the screen*/
      return;
    else
      KM08W01.KM08WSQL = SQLCA.SQLCAREC; /* hold error sqlca*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      SQLCA.SQLCAREC = KM08W01.KM08WSQL;
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCOMNT01";
      TA1REC.TA1MAP = " ";
      KM08W01.KM08WKEY = KUEREC.KUECMTID;
      TA1REC.TA1TBLKE = KM08W01.KM08WKEY;
      TA1REC.TA1PGMNM = "KM08468";
      TA1REC.TA1LOC = "UPDATE VCOMNT01 DEPT-";
      TA1REC.TA1LOCAT[4] = KUEREC.XNDCD;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
  ;
  ;
end // end KM08468

// edit screen
Function KM08500()
  ;
  ;
   /* ***********************************************************/
   /* ------- edit fields from upt basic co/cr map ------*/
  ;
   /* note: edits are performed in reverse sequence of field*/
         /* appearance.  edit criteria are found in stmt grps.*/
   /* ***********************************************************/
  ;
  set KM08M100.KUCCOID initialAttributes;
  if (KM08M100.KUCCOID == KM08W01.KM08WCID
   && KM08M100.KUCCOID != 0)
    /* next sentence*/
  else
    KM08200(); /* refresh screen*/
    KM08W01.KM08WERR = "Y"; /* set error flag*/
    KM08W01.KM08WEFL = "N"; /* set update flag*/
    KM08W01.KM08WMD1 = "N"; /* set update flag*/
    KM08W01.KM08WMD2 = "N"; /* set update flag*/
    KM08W01.KM08WMD3 = "N"; /* set update flag*/
    return;
  end
  ;
  if (KM08W01.KM08WUPM == "Y") /* if in update mode*/
    KM08401(); /* set fields defined*/
  else
    return;
  end
  ;
   /* **********************/
   /* show pop-up windows*/
   /* **********************/
  ;
  KM08502(); /* show pop-up windows*/
  ;
   /* *******************************************************/
      /* edit comment                     ----------------*/
   /* *******************************************************/
  ;
  if (KM08M100.KUECOMNT != KUEREC.KUECOMNT) /* comment field check*/
    KM08W01.KM08WMD3 = "Y"; /* comnt data modified*/
    if (KUCREC.KUCCOMNT != "Y")
      KM08W01.KM08WMD1 = "Y"; /* cmpny comment flag changes*/
    end
  end
  ;
  ;
   /* ******************************************************/
              /* Edit Sales fields                       **/
   /* yclcd     xaccd    kucskind   ypocd                **/
   /* kucsscnt  kucnscnt kucpsfl                         **/
   /* ******************************************************/
                                                      /* **/
  KM08520();
  ;
  ;
end // end KM08500

// show pop-ups windows
Function KM08502()
  ;
   /* ***********************************/
    /* account class*/
   /* ***********************************/
  ;
  if (KM08M100.XAUCD == "?")
    XPXX001();
    while (XX0XW02.XX0XWEND == "N")
      XPXAU01();
    end
    set KM08M100.XAUCD cursor;
    if (XX0XW02.XX0XWPIX > 0)
      KM08M100.XAUCD = XAUTBL.XAUCD[XX0XWPIX];
    end
  end
  ;
   /* ***********************************/
    /* channel class*/
   /* ***********************************/
  ;
  if (KM08M100.YCH-CHNL-CLS-CD == "?")
    XPXX001();
    while (XX0XW02.XX0XWEND == "N")
      XPYCH01();
    end
    set KM08M100.YCH-CHNL-CLS-CD cursor;
    if (XX0XW02.XX0XWPIX > 0)
      KM08M100.YCH-CHNL-CLS-CD = YCHTBL.YCH-CHNL-CLS-CD[XX0XWPIX];
    end
  end
  ;
   /* ***********************************/
    /* co-op analyst*/
   /* ***********************************/
  ;
  if (KM08M100.YCPCD == 0)
    XPXX001();
    while (XX0XW02.XX0XWEND == "N")
      XPYCP01();
    end
    set KM08M100.YCPCD cursor;
    if (XX0XW02.XX0XWPIX > 0)
      KM08M100.YCPCD = YCPTBL.YCPCD[XX0XWPIX];
    end
  end
  ;
  ;
  converseLib.clearScreen();
  
end // end KM08502

// edit fields
Function KM08520()
   /* * ***********************************************************/
   /* ------- edit fields from upt basic sales map ------*/
  ;
   /* first set of flags codes and indicators*/
   /* ***********************************************************/
   /* **********************************************/
   /* *****     check if company changes        ****/
   /* **********************************************/
   /* ***********************************************************/
   /* *   M A I N T E N A N C E    H I S T O R Y    L O G      **/
   /* *--------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                          **/
   /* *--------------------------------------------------------**/
   /* * 10-05-00 GDECKE   Require entry of channel class code  **/
   /* ***********************************************************/
  ;
  ;
  if (KM08M100.YCPCD != KUCREC.YCPCD       
   || KM08M100.XAUCD != KUCREC.XAUCD       
   || KM08M100.YCH-CHNL-CLS-CD != KUCREC.YCH-CHNL-CLS-CD
   || KM08M100.KUCSKIND != KUCREC.KUCSKIND 
   || KM08M100.KUCPOFL != KUCREC.KUCPOFL   
   || KM08M100.KUCYPOAP != KUCREC.KUCYPOAP 
   || KM08M100.KUCYPOFT != KUCREC.KUCYPOFT 
   || KM08M100.KUCVNDFL != KUCREC.KUCVNDFL /* vend auth flag*/
   || KM08M100.KUCSSCNT != KUCREC.KUCSSCNT 
   || KM08M100.KUCNSCNT != KUCREC.KUCNSCNT 
   || KM08M100.KUCPSFL != KUCREC.KUCPSFL) 
    KM08W01.KM08WMD1 = "Y"; /* cmpny01 modified*/
  else
    return;
  end
  ;
   /* ***********************************************/
    /* substitution flag must be 'y' or 'n'*/
   /* ***********************************************/
  ;
  if (KM08M100.KUCPSFL != KUCREC.KUCPSFL)
    if (KM08M100.KUCPSFL == "Y"
     || KM08M100.KUCPSFL == "N")
      set KM08M100.KUCPSFL initialAttributes;
    else
      KM08W01.KM08WERR = "Y";
      converseLib.validationFailed(20); /* invalid code*/
      set KM08M100.KUCPSFL cursor, modified, bold;
    end
  end
  ;
   /* *****************************************************/
    /* self store count and nike store count have no edits*/
   /* ******************************************************/
  ;
  ;
   /* ***********************************************/
    /* edit po required flag and codes*/
   /* ***********************************************/
  ;
  KM08525();
  ;
   /* ***********************************************/
    /* vend auth req flag must be y or n*/
   /* ***********************************************/
  ;
  if (KM08M100.KUCVNDFL != KUCREC.KUCVNDFL)
    if (KM08M100.KUCVNDFL == "Y"
     || KM08M100.KUCVNDFL == "N")
      set KM08M100.KUCVNDFL initialAttributes;
    else
      if (KM08M100.KUCVNDFL != "Y"
       || KM08M100.KUCVNDFL != "N")
        KM08W01.KM08WERR = "Y";
        converseLib.validationFailed(20); /* must be y or n*/
        set KM08M100.KUCVNDFL cursor, modified, bold;
      end
    end
  end
  ;
   /* ***********************************************/
    /* prod xref (sku) - must be ' ', 'p', or 'c'*/
   /* ***********************************************/
  ;
  if (KM08M100.KUCSKIND != KUCREC.KUCSKIND)
    if (KM08M100.KUCSKIND == " "
     || KM08M100.KUCSKIND == "C")
      /* OR KM08M100.KUCSKIND EQ 'G';*/
      set KM08M100.KUCSKIND initialAttributes;
    else
      if (KM08M100.KUCSKIND == "P")
        if (KUCREC.KUKPCOID > 0)
          set KM08M100.KUCSKIND initialAttributes;
        else
          converseLib.validationFailed(346); /* parent not attached can not use 'p'*/
          set KM08M100.KUCSKIND cursor, modified, bold;
          KM08W01.KM08WERR = "Y"; /* set error flag*/
        end
      else
        set KM08M100.KUCSKIND cursor, modified, bold;
        converseLib.validationFailed(347); /* must be ' ' 'p' 'c'*/
        KM08W01.KM08WERR = "Y"; /* set error flag*/
      end /* end if p*/
    end /* end if c or ' ' or*/
  end
  ;
   /* ************************************/
    /* check co-op analyst code*/
   /* ************************************/
  ;
  if (KM08M100.YCPCD != KUCREC.YCPCD)
    KM08W01.KM08WYCD = KM08M100.YCPCD;
    if (KM08W01.KM08WYCD != 0)
      if (KM08W01.KM08WYCD in YCPTBL.YCPCD
       && YCPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        /* next sentence*/
      else
        converseLib.validationFailed(342); /* invalid co-op analyst*/
        set KM08M100.YCPCD cursor, modified, bold;
        KM08W01.KM08WERR = "Y"; /* set error flag*/
      end
    end
  end
  ;
   /* ******************************************************/
    /* check account class code - req, valid table entry*/
   /* ******************************************************/
  ;
  if (KM08M100.XAUCD != KUCREC.XAUCD)
    if (KM08M100.XAUCD != " ")
      if (KM08M100.XAUCD in XAUTBL.XAUCD)
        if (XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          set KM08M100.XAUCD initialAttributes;
        else
          converseLib.validationFailed(343); /* account class code is inactive*/
          set KM08M100.XAUCD cursor, modified, bold;
          KM08W01.KM08WERR = "Y"; /* set error flag*/
        end
      else
        converseLib.validationFailed(344); /* invalid account class*/
        set KM08M100.XAUCD cursor, modified, bold;
        KM08W01.KM08WERR = "Y"; /* set error flag*/
      end
    else
      converseLib.validationFailed(345); /* account class is required*/
      set KM08M100.XAUCD cursor, modified, bold;
      KM08W01.KM08WERR = "Y"; /* set error flag*/
    end
  end
  ;
   /* ******************************************************/
    /* check channel class code - req, valid table entry*/
   /* ******************************************************/
  ;
  if (KM08M100.YCH-CHNL-CLS-CD != KUCREC.YCH-CHNL-CLS-CD)
    if (KM08M100.YCH-CHNL-CLS-CD != " ")
      if (KM08M100.YCH-CHNL-CLS-CD in YCHTBL.YCH-CHNL-CLS-CD)
        if (YCHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          set KM08M100.YCH-CHNL-CLS-CD initialAttributes;
        else
          converseLib.validationFailed(435); /* channel class code is inactive*/
          set KM08M100.YCH-CHNL-CLS-CD cursor, modified, bold;
          KM08W01.KM08WERR = "Y"; /* set error flag*/
        end
      else
        converseLib.validationFailed(434); /* chennel account class*/
        set KM08M100.YCH-CHNL-CLS-CD cursor, modified, bold;
        KM08W01.KM08WERR = "Y"; /* set error flag*/
      end
    else
      if (KM08M100.XAUCD == "21"
       || KM08M100.XAUCD == "22"
       || KM08M100.XAUCD == "23"
       || KM08M100.XAUCD == "28")
        if (KM08M100.XAUCD in XAUTBL.XAUCD)
          if (XAUTBL.XAUARIND[sysVar.arrayIndex] == "W")
            converseLib.validationFailed(436); /* channel class is required*/
            set KM08M100.YCH-CHNL-CLS-CD cursor, modified, bold;
            KM08W01.KM08WERR = "Y"; /* set error flag*/
          end
        end
      end
    end
  end
  ;
end // end KM08520

// edit po req flag & codes
Function KM08525()
   /* ***********************************************************/
   /* ------- edit fields from upt basic sales map ------*/
  ;
   /* edit po required fl & codes*/
   /* ***********************************************************/
   /* **********************************************/
   /* *****     check if company changes        ****/
   /* **********************************************/
  ;
  if (KM08M100.KUCPOFL != KUCREC.KUCPOFL
   || KM08M100.KUCYPOAP != KUCREC.KUCYPOAP
   || KM08M100.KUCYPOFT != KUCREC.KUCYPOFT)
    KM08W01.KM08WMD1 = "Y"; /* cmpny01 modified*/
  else
    return;
  end
  ;
  ;
   /* ********************************************/
    /* check p.o. required code - footwear*/
   /* ********************************************/
  ;
  if (KM08M100.KUCYPOFT != KUCREC.KUCYPOFT)
    if (KM08M100.KUCYPOFT in YPOTBL.YPOCD)
      if (YPOTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        set KM08M100.KUCYPOFT initialAttributes;
      else
        KM08W01.KM08WERR = "Y";
        converseLib.validationFailed(71); /* code is inactive*/
        set KM08M100.KUCYPOFT initialAttributes;
      end
    else
      KM08W01.KM08WERR = "Y";
      converseLib.validationFailed(17); /* invalid value*/
      set KM08M100.KUCYPOFT cursor, modified, bold;
    end
  end
  ;
  ;
   /* ********************************************/
    /* check p.o. required code - apparel*/
   /* ********************************************/
  ;
  if (KM08M100.KUCYPOAP != KUCREC.KUCYPOAP)
    if (KM08M100.KUCYPOAP in YPOTBL.YPOCD)
      if (YPOTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        set KM08M100.KUCYPOAP initialAttributes;
      else
        KM08W01.KM08WERR = "Y";
        converseLib.validationFailed(71); /* code is inactive*/
        set KM08M100.KUCYPOAP initialAttributes;
      end
    else
      KM08W01.KM08WERR = "Y";
      converseLib.validationFailed(17); /* invalid value*/
      set KM08M100.KUCYPOAP cursor, modified, bold;
    end
  end
  ;
  ;
   /* ********************************************/
    /* check po required flag*/
   /* ********************************************/
  ;
  if (KM08M100.KUCPOFL != KUCREC.KUCPOFL)
    if (KM08M100.KUCPOFL == "Y"
     || KM08M100.KUCPOFL == "N")
      set KM08M100.KUCPOFL initialAttributes;
    else
      KM08W01.KM08WERR = "Y";
      converseLib.validationFailed(20); /* must be y or n*/
      set KM08M100.KUCPOFL cursor, modified, bold;
    end
  end
  ;
  ;
   /* ********************************************/
    /* check po required flag - combinations*/
   /* ********************************************/
  ;
  if (KM08M100.KUCPOFL == "N")
    if (KM08M100.KUCYPOAP == "00"
     && KM08M100.KUCYPOFT == "00")
       /* next sentence*/
    else
      KM08W01.KM08WERR = "Y";
      converseLib.validationFailed(17); /* invalid combination*/
      set KM08M100.KUCYPOAP cursor, modified, bold;
      set KM08M100.KUCYPOFT modified, bold;
    end
  else
    if (KM08M100.KUCPOFL == "Y")
      if (KM08M100.KUCYPOAP == "00"
       || KM08M100.KUCYPOFT == "00")
        KM08W01.KM08WERR = "Y";
        converseLib.validationFailed(17); /* invalid combination*/
        set KM08M100.KUCYPOAP cursor, modified, bold;
        set KM08M100.KUCYPOFT modified, bold;
      end
    end
  end
  ;
  ;
end // end KM08525

// Init records
Function KM08S-INIT-RECS()
  /* ******************************************************************/
  /* Initialize records used by KM08*/
  /* ******************************************************************/
  ;
  set KUCREC empty;
  set KUKREC empty;
  set KUEREC empty;
  set KUHREC empty;
  set KUNREC empty;
  set KUZREC empty;
  set VCULVL01 empty;
  set KM08W01 empty;
  set KM08W02 empty;
  set KM08W03 empty;
  set XX0XW01 empty;
  set XX0XW02 empty;
  set SQLCA empty;
  set TA1REC empty;
end // end KM08S-INIT-RECS

// converse XATTBL pop up window
Function XPYCH01()
   /* ------------------------------------------------------------*/
  ;
              /* CONVERSE POP UP WINDOW*/
  ;
      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/
  ;
   /* ------------------------------------------------------------*/
  ;
   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/
  ;
  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/
    ;
     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/
    ;
    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end
    ;
    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";
    ;
     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/
    ;
    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YCHTBL.YCH-CHNL-CLS-CD[XX0XWCT1] != "99") /* Or end of data*/
        if (YCHTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YCHTBL.YCH-CHNL-CLS-CD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YCHTBL.YCH-CHNL-CLS-DESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end
    ;
     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/
    ;
    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YCHTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YCHTBL.YCH-CHNL-CLS-CD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YCHTBL.YCH-CHNL-CLS-DESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end
  ;
  ;
  converse XX0XM001 ;
  ;
  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/
  ;
     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/
  ;
  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end
  ;
    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/
  ;
  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YCHTBL.YCH-CHNL-CLS-CD[XX0XWCT1] == "99")
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/
        ;
         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/
        ;
        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end
  ;
  ;
end // end XPYCH01

// converse ycpTBL pop up window
Function XPYCP01()
   /* ------------------------------------------------------------*/
  ;
              /* CONVERSE POP UP WINDOW*/
  ;
      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/
  ;
   /* ------------------------------------------------------------*/
  ;
   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/
  ;
  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/
    ;
     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/
    ;
    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end
    ;
    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";
    ;
     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/
    ;
    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YCPTBL.YCPCD[XX0XWCT1] != 9999) /* Or end of data*/
        if (YCPTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YCPTBL.YCPCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YCPTBL.YCPNM[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end
    ;
     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/
    ;
    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YCPTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YCPTBL.YCPCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YCPTBL.YCPNM[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end
  ;
  ;
  converse XX0XM001 ;
  ;
  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/
  ;
     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/
  ;
  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end
  ;
    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/
  ;
  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YCPTBL.YCPCD[XX0XWCT1] == 9999) /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/
        ;
         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/
        ;
        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end
  ;
  ;
end // end XPYCP01

//*** RECORD=KM08W01 ****
// this record contains work fields used entirely within km06.
// ***********************************************************
// *              Maintenance Log
// ***********************************************************
// *
// * 30-june-1993       dlegg     Add character redefinition
// *                              of company number.
// * 17-august-1993     dlegg     DB changes. Increase size of
// *                              KM08WCMT.
// ***********************
Record KM08W01 type basicRecord
  10 KM08WUSR KM08WUSR ; 
    15 KM08WCNO KM08WCNO ; 
      20 KM08WCNO-CHAR KM08WCNO-CHAR ; 
    15 * char(8) ; 
  10 KM08WCID KM08WCID ; 
  10 KM08WKEY KM08WKEY ; 
  10 KM08WERR KM08WERR ; 
  10 KM08WMD1 KM08WMD1 ; 
  10 KM08WMD2 KM08WMD2 ; 
  10 KM08WMD3 KM08WMD3 ; 
  10 KM08WUPM KM08WUPM ; 
  10 KM08WCUS KM08WCUS ; 
  10 KM08WEFL KM08WEFL ; 
  10 KM08WSUB KM08WSUB ; 
  10 KM08WBDT KM08WBDT ; 
    15 KM08WSBC KM08WSBC ; 
    15 KM08WSBY KM08WSBY ; 
    15 KM08WSBM KM08WSBM ; 
    15 KM08WSBD KM08WSBD ; 
  10 KM08WSQL KM08WSQL ; 
  10 KM08WCMT KM08WCMT ; 
  10 KM08WYCD KM08WYCD ; 
  10 XATCD XATCD ; 
  10 XXXPHN XXXPHN ; 
    15 XXXPHNA XXXPHNA ; 
    15 XXXPHNP XXXPHNP ; 
    15 XXXPHNN XXXPHNN ; 
  10 KM08W-PHONE KM08W-PHONE ; 
    15 KM08W-PHN-AREA-CD KM08W-PHN-AREA-CD ; 
    15 KM08W-PHN-DASH1 KM08W-PHN-DASH1 ; 
    15 KM08W-PHN-PREFIX KM08W-PHN-PREFIX ; 
    15 KM08W-PHN-DASH2 KM08W-PHN-DASH2 ; 
    15 KM08W-PHN-NUMBER KM08W-PHN-NUMBER ; 
  10 XXXLSTNM XXXLSTNM ; 
  10 XXXFSTNM XXXFSTNM ; 
  10 XXXMDINT XXXMDINT ; 
  10 KM08W-FTWR-FL KM08W-FTWR-FL ; 
  10 KM08W-FTWR-EQ-APRL-FL KM08W-FTWR-EQ-APRL-FL ; 
  10 KM08W-FIRST-LAST-NAME KM08W-FIRST-LAST-NAME ; 
    15 KM08W-FLNAME-ARRAY KM08W-FLNAME-ARRAY [40] ; 
  10 KM08W-LAST-NAME KM08W-LAST-NAME ; 
    15 KM08W-LNAME-ARRAY KM08W-LNAME-ARRAY [25] ; 
  10 KM08W-IX1 KM08W-IX1 ; 
  10 KM08W-IX2 KM08W-IX2 ; 
end // end KM08W01

//*** RECORD=KM08W02 ****
// csp working storage for customer global process control
// 
// db2 table: vculvl01
// dclgen   : dcl01072
// 
// i/o mod  : ku1540
// 
// key table: kuccoid
//            kumstrid (opt)
//            xnxcd    (opt)
//            xgpcd    (opt)
// 
// maintenance log:
//    who       when      why
// ---------- --------- ---------------------------------------
// 08/20/92   jhemme    created record
// ***********************
Record KM08W02 type basicRecord
  5 VCULVL01-GROUP VCULVL01-GROUP ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 XGPCD XGPCD ; 
    10 XACCD XACCD ; 
    10 OP1ALSEQ OP1ALSEQ ; 
    10 XNACD XNACD ; 
    10 KUNABOFL KUNABOFL ; 
    10 KUNBOQTY KUNBOQTY ; 
    10 KUNMAPCT KUNMAPCT ; 
    10 XIDCD XIDCD ; 
    10 XSOCD XSOCD ; 
    10 KUJCRIND KUJCRIND ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end KM08W02

//*** RECORD=KM08W03 ****
// csp working storage for customer global process control
// 
// db2 table: vculvl01
// dclgen   : dcl01072
// 
// i/o mod  : ku1540
// 
// key table: kuccoid
//            kumstrid (opt)
//            xnxcd    (opt)
//            xgpcd    (opt)
// 
// maintenance log:
//    who       when      why
// ---------- --------- ---------------------------------------
// 08/20/92   jhemme    created record
// ***********************
Record KM08W03 type basicRecord
  5 VCULVL01-GROUP VCULVL01-GROUP ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 XNXCD XNXCD ; 
    10 XGPCD XGPCD ; 
    10 XACCD XACCD ; 
    10 OP1ALSEQ OP1ALSEQ ; 
    10 XNACD XNACD ; 
    10 KUNABOFL KUNABOFL ; 
    10 KUNBOQTY KUNBOQTY ; 
    10 KUNMAPCT KUNMAPCT ; 
    10 XIDCD XIDCD ; 
    10 XSOCD XSOCD ; 
    10 KUJCRIND KUJCRIND ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end KM08W03

// Credit Contact First+Last name
DataItem KM08W-FIRST-LAST-NAME char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Credit Contact F+L name array
DataItem KM08W-FLNAME-ARRAY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Footwear equals Apparel flag
DataItem KM08W-FTWR-EQ-APRL-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Footwear row exists flag
DataItem KM08W-FTWR-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index
DataItem KM08W-IX1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem KM08W-IX2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Credit Contact Last name
DataItem KM08W-LAST-NAME char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Credit Contact L name array
DataItem KM08W-LNAME-ARRAY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format phone area code
DataItem KM08W-PHN-AREA-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format phone dash
DataItem KM08W-PHN-DASH1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format phone dash
DataItem KM08W-PHN-DASH2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format phone number
DataItem KM08W-PHN-NUMBER char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format phone prefix
DataItem KM08W-PHN-PREFIX char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted phone number
DataItem KM08W-PHONE char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work year/month/day
DataItem KM08WBDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current id
DataItem KM08WCID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save area comment b4 image
DataItem KM08WCMT char(77)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   company number
DataItem KM08WCNO num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   company number-redefined
DataItem KM08WCNO-CHAR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update all vcust rows
DataItem KM08WCUS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen updated flag
DataItem KM08WEFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag
DataItem KM08WERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work key
DataItem KM08WKEY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// vcmpny01 modified flag
DataItem KM08WMD1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// vculvl01 modified flag
DataItem KM08WMD2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// vcomnt01 modified flag
DataItem KM08WMD3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   work century
DataItem KM08WSBC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   work day
DataItem KM08WSBD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   work month
DataItem KM08WSBM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   work year
DataItem KM08WSBY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save area for sqlca/reset
DataItem KM08WSQL char(136)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index
DataItem KM08WSUB num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// update/inquiry flag
DataItem KM08WUPM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reformat area for causera
DataItem KM08WUSR char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold area for ycpcd
DataItem KM08WYCD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

