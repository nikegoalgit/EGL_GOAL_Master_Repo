package km0f;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import kl.common.*;
import ku.common.*;
import ta.common.*;
import xa.common.*;
//*** PROGRAM=KM0F ****
// ;***********************************************************
// ;*           New Address/Address Correction
// ;*==========================================================
// ;*                  maintenance log
// ;*----------------------------------------------------------
// ;*  Date       int               description
// ;*----------------------------------------------------------
// ;*08/12/86     DPS      Added address id move to tag rec
// ;*04/07/87     clt      update short city when city modified
// ;*05/18/87     clt      removed kuarec from list
// ;*07/21/87     clt      changed size of kumrec
// ;*09/17/87     crr      added update to blgrp lock box cd
// ;*02/19/88     clt      added county code
// ;*03/01/88     clt      show leading zeros for county code
// ;*03/16/88     clt      company and store table changes
// ;*04/14/88     clt      changed csp county code to xcycd
// ;*11/17/88     jbw      added noncsp opt to calls
// ;*11/17/88     jbw      added xssegtr logic
// ;*05/15/89     clt      database changes
// ;*06/08/89     clt      added security for cole haan
// ;*01/16/90     jfiat    db changes
// ;*03/30/90     dsalzw   db changes
// ;*09/10/90     dsalzw   added kiztbl for audit trail
// ;*10/17/90     dsalzw   update lockbox on company
// ;*10/24/90     jhemme   extended zip to 10 characters
// ;*12/05/90     dsalzw   if xau has doc to ar = 'i',set
// ;*                      lockbox to '00'
// ;*02/04/91     dsalzw   removed billgroup (kuarec)
// ;*10/11/91     CHELLM   Deinstalled CUTAG records KUXREC.
// ;*03/04/93     CHELLM   Removed 'SET ALARM'S on converse.
// ;*03/04/93     CHELLM   Modified XLB defaults for Rep/Agency
// ;*                      internal accounts.
// 7-july-1993          dlegg      Change call to TA0020 with
//                                 ABND to RETN. KM0FS20,S62,
//                                 S61,S66,S67,S90,S95. New:
//                                 KM0FS-DB2-RETN.
// 15-july-1993        dlegg       Add sgrp to initialize all
//                                 records used by appl.
// ;*10/01/93     CHELLM   CSP 4.1 Conversion
// ;*04/10/95     CHELLM   Added Nike Canada User Security.
// *Y2KFIX   12/02/97  DKENNY  Y2K MODIFICATIONS MADE:
// *                   Application regenerated to pick up new
// *                   XX0XS01.
// *********************
Program KM0F type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KM0FW01 KM0FW01; // record
  KU0XW10 KU0XW10; // record
  KU0XW30 KU0XW30; // record
  KUCREC KUCREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  KUZREC KUZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  XA0AW02 XA0AW02; // record
  XGPREC XGPREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KIZTBL {deleteAfterUse = yes}; // table
  use XLBTBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use KM0FM.KM0FM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KM0F000: KM0F000();
    goto KM0F010;
    KM0F010: KM0F010();


    goto KM0F010;


  end // end main
end // end KM0F


// km0f initialization
Function KM0F000()

  XSENTRY(); /* check if entered properly*/

  XSSEGTR(); /* set segmented trans id*/

  KM0FS-INIT-RECS();


  KM0FS00(); /* handle fast-path entry*/

end // end KM0F000


// new/change address
Function KM0F010()

   /* initialize the screen variables*/


  if (converseVar.validationMsgNum == 0
   && COMMAREA.CASECRC == 0)
    if (COMMAREA.CAFROMAP == "KM0F")
      /* next sentence*/
    else
      COMMAREA.CAFROMAP = "KM0F";
      set KM0FM001 empty;
    end
  else
    if (COMMAREA.CASECRC != 0)
      KM0FM001.CAMSG = COMMAREA.CAMSG;
      set KM0FM001 alarm;
    else
      /* next sentence*/
    end
  end


  KM0FM001.XXXSCRDT = VGVar.currentShortGregorianDate;


  converse KM0FM001 ;



  KM0FM001.VAGen_EZEMSG = " ";
  KM0FM001.CAMSG = " ";

  if (KM0FM001.XXXCITY is modified
   || KM0FM001.XSTCD is modified)
    KM0FW01.KM0FWMOD = "X";
  end


  KM0FS70(); /* handle special entry (fast-path, pf-keys)*/


  if (converseVar.validationMsgNum == 0
   && COMMAREA.CASECRC == 0)
    KM0FS10(); /* edit screen entries*/
  end

  exit stack;


end // end KM0F010


// Init recs
Function KM0FS-INIT-RECS()
  /* ***********************************************************************/
  /* *           Initialize records used by KM0FS*/
  /* ***********************************************************************/

  set KM0FW01 empty;
  set KUCREC empty;
  set KULREC empty;
  set KUMREC empty;
  set KUNREC empty;
  set KUZREC empty;
  set XGPREC empty;
  set XA0AW02 empty;
  set SQLCA empty;
  set ERRSQLCA empty;
  set TA1REC empty;
  set XX0XW01 empty;
  set KU0XW10 empty;
  set KU0XW30 empty;
end // end KM0FS-INIT-RECS


// handle fast-path entry to km0f
Function KM0FS00()
  if (COMMAREA.CAITEM != " ")
    KM0FW01.KM0FWCID = 0;
    KM0FW01.KM0FWAID = 0;
    KM0FW01.KM0FWIN1 = 1;
    KM0FW01.KM0FWIN2 = 1;
    KM0FW01.KM0FWFNO = 1;
    while (KM0FW01.KM0FWIN1 <= 20
     && COMMAREA.CAITMLTR[KM0FWIN1] != " ")
      if (COMMAREA.CAITMLTR[KM0FWIN1] == ".")
        KM0FW01.KM0FWFNO = KM0FW01.KM0FWFNO + 1;
        KM0FW01.KM0FWIN2 = 0;
      else
        KM0FS01(); /* move each letter*/
        if (converseVar.validationMsgNum == 0)
          /* NEXT SENTENCE*/
        else
          return;
        end
      end
      KM0FW01.KM0FWIN1 = KM0FW01.KM0FWIN1 + 1;
      KM0FW01.KM0FWIN2 = KM0FW01.KM0FWIN2 + 1;
    end
    KM0FM001.KUCCOID = KM0FW01.KM0FWCID;
    KM0FM001.KULAAID = KM0FW01.KM0FWAID;
    COMMAREA.CAITEM = " ";
    KM0FS10(); /* validate the fast-path option(s)*/
  end
end // end KM0FS00


// move each fast-path letter
Function KM0FS01()
  if (KM0FW01.KM0FWFNO == 1)
    if (KM0FW01.KM0FWIN2 <= 7)
      KM0FW01.KM0FWCLT[KM0FWIN2] = COMMAREA.CAITMLTR[KM0FWIN1];
    else
      converseLib.validationFailed(109); /* co number too long*/
      KM0FW01.KM0FWIN1 = 21; /* force exit from loop*/
    end
  end
  if (KM0FW01.KM0FWFNO == 2)
    if (KM0FW01.KM0FWIN2 <= 7)
      KM0FW01.KM0FWALT[KM0FWIN2] = COMMAREA.CAITMLTR[KM0FWIN1];
    else
      converseLib.validationFailed(125); /* address id too long*/
      KM0FW01.KM0FWIN1 = 21; /* force exit from loop*/
    end
  end
  if (KM0FW01.KM0FWFNO > 2
   || KM0FW01.KM0FWFNO < 1)
    converseLib.validationFailed(19);
    KM0FW01.KM0FWIN1 = 21; /* force exit from loop*/
  end
end // end KM0FS01


// edit cc0mm001 entry
Function KM0FS10()

  XX0XS01(); /* get current date and time*/


  set KM0FM001.KUCCOID normal;
  set KM0FM001.KULAAID normal;

  if (KM0FM001.KUCCOID > 0)
    /* next sentence*/
  else
    converseLib.validationFailed(114); /* this field required*/
    set KM0FM001.KUCCOID cursor, bold;
    return;
  end


  if (KM0FM001.KUCCOID != KM0FW01.KUCCOID)
    KM0FW01.KUCCOID = KM0FM001.KUCCOID;
    KM0FS20(); /* get company record*/
    if (converseVar.validationMsgNum == 0) /* if the company was found*/
      KM0FW01.KULAAID = 99999;
    else
      set KM0FM001.KUCCOID cursor, bold;
      return;
    end
  end



  if (KM0FM001.KULAAID != KM0FW01.KULAAID)
    KM0FW01.KULAAID = KM0FM001.KULAAID;
    if (KM0FM001.KULAAID != 0)
      KM0FS25(); /* get address record*/
      if (converseVar.validationMsgNum == 0)
        move XA0AW02 to KULREC withV60Compat;
        KM0FW01.KULAAID = KM0FM001.KULAAID;
        converseLib.validationFailed(129); /* ok, make changes*/
        set KM0FM001.KM0FM-ADDR1 cursor;
      else
        set KM0FM001.KULAAID cursor, bold;
        return;
      end
    else
      set KM0FM001 initial;
      KM0FM001.KUCCOID = KM0FW01.KUCCOID;
      KM0FM001.KUCCONM = KUCREC.KUCCONM;
      KM0FM001.KUCCOANM = KUCREC.KUCCOANM;
    end
  end



  if (KM0FM001.KM0FM-ADDR1 == " "
   && KM0FM001.KM0FM-ADDR2 == " "
   && KM0FM001.KM0FM-ADDR3 == " "
   && KM0FM001.XXXCITY == " "
   && KM0FM001.XXXZIP == " ")
    converseLib.validationFailed(128); /* ok, enter address*/
    set KM0FM001.KM0FM-ADDR1 cursor;
    return;
  end


  KM0FW01.KM0FWESW = "DO EDIT";
  KM0FW01.XCYCD = KM0FM001.XCYCD;


  KM0FS15(); /* edit address*/

  move XA0AW02 to KM0FM001 withV60Compat;
  KM0FM001.XCYCD = KM0FW01.XCYCD;
  KM0FM001.KM0FM-ADDR1 = XA0AW02.XXX-ADDR1;
  KM0FM001.KM0FM-ADDR2 = XA0AW02.XXX-ADDR2;
  KM0FM001.KM0FM-ADDR3 = XA0AW02.XXX-ADDR3;
  KM0FW01.XXX-ADDR1 = XA0AW02.XXX-ADDR1;
  KM0FW01.XXX-ADDR2 = XA0AW02.XXX-ADDR2;
  KM0FW01.XXX-ADDR3 = XA0AW02.XXX-ADDR3;


  if (converseVar.validationMsgNum == 0)
    KM0FW01.KM0FWESW = "EDIT OK";
    converseLib.validationFailed(22); /* press pf12 to confirm*/
    set KM0FM001.KM0FM-ADDR1 cursor;
    set KM0FM001.KUCCOID skip;
    set KM0FM001.KULAAID skip;
    return;
  else
    return;
  end

end // end KM0FS10


// edit the address
Function KM0FS15()
   /* ************************************************************/
   /* *   Edit the address:*/
   /* *      1. reset the address to normal*/
   /* *      2. edit the address using xa0a*/
   /* *      3. set up any errors*/
   /* *      4. return to calling proc.*/
   /* ************************************************************/

  set KM0FM001.KM0FM-ADDR1 normal;
  set KM0FM001.KM0FM-ADDR2 normal;
  set KM0FM001.KM0FM-ADDR3 normal;
  set KM0FM001.XXXCITY normal;
  set KM0FM001.XXXZIP normal;
  set KM0FM001.XCTCD normal;
  set KM0FM001.XSTCD normal;
  set KM0FM001.XCYCD normal;


  move KM0FM001 to XA0AW02 withV60Compat;
  XA0AW02.XXX-ADDR1 = KM0FM001.KM0FM-ADDR1;
  XA0AW02.XXX-ADDR2 = KM0FM001.KM0FM-ADDR2;
  XA0AW02.XXX-ADDR3 = KM0FM001.KM0FM-ADDR3;

  XA0AW02.XA0AWFNC = "E ";


  call "XA0A" (XA0AW02) {isNoRefresh = yes};


  if (XA0AW02.XA0AWERR[2] > 0)
    set KM0FM001.KM0FM-ADDR1 cursor, bold;
    if (XA0AW02.XA0AWERR[2] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[2]);
    end
  else
    if (XA0AW02.XA0AWERR[3] > 0)
      set KM0FM001.KM0FM-ADDR2 cursor, bold;
      if (XA0AW02.XA0AWERR[3] == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(XA0AW02.XA0AWERR[3]);
      end
    else
      if (XA0AW02.XA0AWERR[4] > 0)
        set KM0FM001.KM0FM-ADDR3 cursor, bold;
        if (XA0AW02.XA0AWERR[4] == 9999)
          converseLib.validationFailed();
        else
          converseLib.validationFailed(XA0AW02.XA0AWERR[4]);
        end
      else
        if (XA0AW02.XA0AWERR[5] > 0)
          set KM0FM001.XXXCITY cursor, bold;
          if (XA0AW02.XA0AWERR[5] == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(XA0AW02.XA0AWERR[5]);
          end
        else
          if (XA0AW02.XA0AWERR[6] > 0)
            set KM0FM001.XSTCD cursor, bold;
            KM0FM001.XSTDESC = " ";
            if (XA0AW02.XA0AWERR[6] == 9999)
              converseLib.validationFailed();
            else
              converseLib.validationFailed(XA0AW02.XA0AWERR[6]);
            end
          else
            if (XA0AW02.XA0AWERR[7] > 0)
              set KM0FM001.XXXZIP cursor, bold;
              if (XA0AW02.XA0AWERR[7] == 9999)
                converseLib.validationFailed();
              else
                converseLib.validationFailed(XA0AW02.XA0AWERR[7]);
              end
            else
              if (XA0AW02.XA0AWERR[8] > 0)
                set KM0FM001.XCTCD cursor, bold;
                KM0FM001.XCTDESC = " ";
                if (XA0AW02.XA0AWERR[8] == 9999)
                  converseLib.validationFailed();
                else
                  converseLib.validationFailed(XA0AW02.XA0AWERR[8]);
                end
              else
              end
            end
          end
        end
      end
    end
  end


end // end KM0FS15


// get company
Function KM0FS20()

  KUCREC.KUCCOID = KM0FM001.KUCCOID;


  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0)
    KM0FW01.KUCCOID = KUCREC.KUCCOID;
    KM0FW01.KUCMADID = KUCREC.KUCMADID;
    KM0FM001.KUCCONM = KUCREC.KUCCONM;
    KM0FM001.KUCCOANM = KUCREC.KUCCOANM;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(118);
      KM0FW01.KUCCOID = 0;
      KM0FW01.KUCMADID = 0;
      KM0FM001.KUCCONM = " ";
      KM0FM001.KUCCOANM = " ";
      KM0FM001.KM0FM-ADDR1 = " ";
      KM0FM001.KM0FM-ADDR2 = " ";
      KM0FM001.KM0FM-ADDR3 = " ";
      KM0FM001.XXXCITY = " ";
      KM0FM001.XSTCD = " ";
      KM0FM001.XCTCD = " ";
      KM0FM001.XCYCD = " ";
      KM0FM001.XSTDESC = " ";
      KM0FM001.XXXZIP = " ";
      KM0FM001.XCTDESC = " ";
      return;
    else
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      TA1REC.TA1PGMNM = "KM0FS20";
      TA1REC.TA1LOC = "SELECT COMPANY";
      KM0FW01.KM0FWCMP = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KM0FW01.KM0FWKEY;
      XSKUS-DB2-RETN(); /* abort routine*/
    end
  end

  if (KUCREC.XAUCD in XAUTBL.XAUCD)
    if (XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KM0FW01.XATCD = XAUTBL.XATCD[sysVar.arrayIndex];
    else
      KM0FW01.XATCD = " ";
    end
  else
    KM0FW01.XATCD = " ";
  end

  if (KM0FW01.XATCD == "08")
    if (COMMAREA.CADLVL[1] == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(272);
      KM0FW01.KUCCOID = 0;
      KM0FW01.KUCMADID = 0;
      KM0FM001.KUCCONM = " ";
      KM0FM001.KUCCOANM = " ";
      KM0FM001.KM0FM-ADDR1 = " ";
      KM0FM001.KM0FM-ADDR2 = " ";
      KM0FM001.KM0FM-ADDR3 = " ";
      KM0FM001.XXXCITY = " ";
      KM0FM001.XSTCD = " ";
      KM0FM001.XCTCD = " ";
      KM0FM001.XCYCD = " ";
      KM0FM001.XSTDESC = " ";
      KM0FM001.XXXZIP = " ";
      KM0FM001.XCTDESC = " ";
      return;
    end
  else
    if (KM0FW01.XATCD == "03")
      if (COMMAREA.CADLVL[2] == "Y")
        /* next sentence*/
      else
        converseLib.validationFailed(272);
        KM0FW01.KUCCOID = 0;
        KM0FW01.KUCMADID = 0;
        KM0FM001.KUCCONM = " ";
        KM0FM001.KUCCOANM = " ";
        KM0FM001.KM0FM-ADDR1 = " ";
        KM0FM001.KM0FM-ADDR2 = " ";
        KM0FM001.KM0FM-ADDR3 = " ";
        KM0FM001.XXXCITY = " ";
        KM0FM001.XSTCD = " ";
        KM0FM001.XCTCD = " ";
        KM0FM001.XCYCD = " ";
        KM0FM001.XSTDESC = " ";
        KM0FM001.XXXZIP = " ";
        KM0FM001.XCTDESC = " ";
      end
    else
      if (COMMAREA.CADLVL[1] == "Y"
       || COMMAREA.CADLVL[2] == "Y")
        converseLib.validationFailed(272);
        KM0FW01.KUCCOID = 0;
        KM0FW01.KUCMADID = 0;
        KM0FM001.KUCCONM = " ";
        KM0FM001.KUCCOANM = " ";
        KM0FM001.KM0FM-ADDR1 = " ";
        KM0FM001.KM0FM-ADDR2 = " ";
        KM0FM001.KM0FM-ADDR3 = " ";
        KM0FM001.XXXCITY = " ";
        KM0FM001.XSTCD = " ";
        KM0FM001.XCTCD = " ";
        KM0FM001.XCYCD = " ";
        KM0FM001.XSTDESC = " ";
        KM0FM001.XXXZIP = " ";
        KM0FM001.XCTDESC = " ";
      end
    end
  end
               /* Edit for Nike Canada User*/

  if (KUCREC.XLECD == "03")
    if (COMMAREA.CADLVL[3] == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(272);
      KM0FW01.KUCCOID = 0;
      KM0FW01.KUCMADID = 0;
      KM0FM001.KUCCONM = " ";
      KM0FM001.KUCCOANM = " ";
      KM0FM001.KM0FM-ADDR1 = " ";
      KM0FM001.KM0FM-ADDR2 = " ";
      KM0FM001.KM0FM-ADDR3 = " ";
      KM0FM001.XXXCITY = " ";
      KM0FM001.XSTCD = " ";
      KM0FM001.XCTCD = " ";
      KM0FM001.XCYCD = " ";
      KM0FM001.XSTDESC = " ";
      KM0FM001.XXXZIP = " ";
      KM0FM001.XCTDESC = " ";
    end
  else
    if (COMMAREA.CADLVL[3] == "Y")
      converseLib.validationFailed(272);
      KM0FW01.KUCCOID = 0;
      KM0FW01.KUCMADID = 0;
      KM0FM001.KUCCONM = " ";
      KM0FM001.KUCCOANM = " ";
      KM0FM001.KM0FM-ADDR1 = " ";
      KM0FM001.KM0FM-ADDR2 = " ";
      KM0FM001.KM0FM-ADDR3 = " ";
      KM0FM001.XXXCITY = " ";
      KM0FM001.XSTCD = " ";
      KM0FM001.XCTCD = " ";
      KM0FM001.XCYCD = " ";
      KM0FM001.XSTDESC = " ";
      KM0FM001.XXXZIP = " ";
      KM0FM001.XCTDESC = " ";
    end
  end
end // end KM0FS20


// get address
Function KM0FS25()

  set XA0AW02 empty; /* initialize the address work record*/


  XA0AW02.XA0AWFNC = "G"; /* get the address record*/

  XA0AW02.KUCCOID = KM0FM001.KUCCOID;
  XA0AW02.KULAAID = KM0FM001.KULAAID;

  call "XA0A" (XA0AW02) {isNoRefresh = yes};


  if (XA0AW02.XA0AWERR[1] == 0)
    move XA0AW02 to KM0FM001 withV60Compat;
    KM0FM001.KM0FM-ADDR1 = XA0AW02.XXX-ADDR1;
    KM0FM001.KM0FM-ADDR2 = XA0AW02.XXX-ADDR2;
    KM0FM001.KM0FM-ADDR3 = XA0AW02.XXX-ADDR3;
  else
    if (XA0AW02.XA0AWERR[1] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[1]);
    end
    return;
  end
end // end KM0FS25


// update the address
Function KM0FS60()
   /* ************************************************************/
   /* *   Edit/replace the address*/
   /* *      1. reset the address to normal*/
   /* *      2. edit the address using xa0a*/
   /* *      3. set up any errors*/
   /* *      4. return to calling proc.*/
   /* ************************************************************/


  XA0AW02.XXXUSER = COMMAREA.CAUSERID;

  if (KM0FM001.KULAAID == 0)
    XA0AW02.XA0AWFNC = "O "; /* insert new address*/
    KM0FW01.KM0FWEND = "N";
    while (KM0FW01.KM0FWEND == "N")
      KM0FS62(); /* generate new address id*/
    end
    KULREC.KULUSCNT = 0; /* set use cnt to 0 for new addr id*/
  else
    XA0AW02.XA0AWFNC = "R "; /* replace existing address*/
  end


  set KM0FM001.KM0FM-ADDR1 normal;
  set KM0FM001.KM0FM-ADDR2 normal;
  set KM0FM001.KM0FM-ADDR3 normal;
  set KM0FM001.XXXCITY normal;
  set KM0FM001.XXXZIP normal;
  set KM0FM001.XCTCD normal;
  set KM0FM001.XSTCD normal;
  set KM0FM001.XCYCD normal;


  move KM0FM001 to XA0AW02 withV60Compat;
  XA0AW02.XXX-ADDR1 = KM0FM001.KM0FM-ADDR1;
  XA0AW02.XXX-ADDR2 = KM0FM001.KM0FM-ADDR2;
  XA0AW02.XXX-ADDR3 = KM0FM001.KM0FM-ADDR3;



  call "XA0A" (XA0AW02) {isNoRefresh = yes};


  if (XA0AW02.XA0AWERR[1] > 0)
    set KM0FM001.KM0FM-ADDR1 cursor;
    if (XA0AW02.XA0AWERR[1] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[1]);
    end
  else
    if (XA0AW02.XA0AWERR[2] > 0)
      set KM0FM001.KM0FM-ADDR1 cursor, bold;
      if (XA0AW02.XA0AWERR[2] == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(XA0AW02.XA0AWERR[2]);
      end
    else
      if (XA0AW02.XA0AWERR[3] > 0)
        set KM0FM001.KM0FM-ADDR2 cursor, bold;
        if (XA0AW02.XA0AWERR[3] == 9999)
          converseLib.validationFailed();
        else
          converseLib.validationFailed(XA0AW02.XA0AWERR[3]);
        end
      else
        if (XA0AW02.XA0AWERR[4] > 0)
          set KM0FM001.KM0FM-ADDR3 cursor, bold;
          if (XA0AW02.XA0AWERR[4] == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(XA0AW02.XA0AWERR[4]);
          end
        else
          if (XA0AW02.XA0AWERR[5] > 0)
            set KM0FM001.XXXCITY cursor, bold;
            if (XA0AW02.XA0AWERR[5] == 9999)
              converseLib.validationFailed();
            else
              converseLib.validationFailed(XA0AW02.XA0AWERR[5]);
            end
          else
            if (XA0AW02.XA0AWERR[6] > 0)
              set KM0FM001.XSTCD cursor, bold;
              KM0FM001.XSTDESC = " ";
              if (XA0AW02.XA0AWERR[6] == 9999)
                converseLib.validationFailed();
              else
                converseLib.validationFailed(XA0AW02.XA0AWERR[6]);
              end
            else
              if (XA0AW02.XA0AWERR[7] > 0)
                set KM0FM001.XXXZIP cursor, bold;
                if (XA0AW02.XA0AWERR[7] == 9999)
                  converseLib.validationFailed();
                else
                  converseLib.validationFailed(XA0AW02.XA0AWERR[7]);
                end
              else
                if (XA0AW02.XA0AWERR[8] > 0)
                  set KM0FM001.XCTCD cursor, bold;
                  KM0FM001.XCTDESC = " ";
                  if (XA0AW02.XA0AWERR[8] == 9999)
                    converseLib.validationFailed();
                  else
                    converseLib.validationFailed(XA0AW02.XA0AWERR[8]);
                  end
                else
                  if (XA0AW02.XA0AWFNC == "R ") /* if update and old zip*/
                    if (KULREC.XXXZIP != XA0AW02.XXXZIP) /* ne new zip*/
                      KM0FS66();
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
end // end KM0FS60


// update company record
Function KM0FS61()

  KM0FW01.KUZDATA = KUCREC.KUCGRP; /* save before image*/

  KUCREC.KUCMADID = KULREC.KULAAID;


  KUCREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUCREC.ZZZCHGTM = XX0XW01.XX0XWTIM;


  if (KM0FW01.KM0FWESW == "UPDATE")
    call "IO0240" ("U ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence...no audit records for this change*/
      /* per sandy kelly*/
    else
      TA1REC.TA1LOC = "UPDATE COMPANY";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      TA1REC.TA1PGMNM = "KM0FS61";
      KM0FW01.KM0FWCMP = KUCREC.KUCCOID;
      KM0FW01.KM0FWADR = KUCREC.KUCMADID;
      TA1REC.TA1TBLKE = KM0FW01.KM0FWKEY;
      XSKUS-DB2-RETN(); /* abort routine*/
    end
  end
end // end KM0FS61


// generate new address id
Function KM0FS62()

  set KULREC empty;

  KULREC.KUCCOID = KM0FM001.KUCCOID;
  KULREC.KULAAID = KM0FW01.KUCMADID + 1;

  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    KM0FW01.KUCMADID = KM0FW01.KUCMADID + 1;
    return; /* ;  go back and try again*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KM0FM001.KULAAID = KULREC.KULAAID;
      KM0FS61(); /* update the company record*/
      KM0FW01.KM0FWEND = "Y";
    else
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VADDR001";
      TA1REC.TA1PGMNM = "KM0FS62";
      KM0FW01.KM0FWCMP = KULREC.KUCCOID;
      KM0FW01.KM0FWADR = KULREC.KULAAID;
      TA1REC.TA1LOC = "SELECT ADDRESS";
      TA1REC.TA1TBLKE = KM0FW01.KM0FWKEY;
      XSKUS-DB2-RETN();
    end
  end
end // end KM0FS62


// check to update lock box
Function KM0FS66()

   /* *************************************************************/

    /* Maintenance History:*/
    /* 10-11-91 CHELLM Deinstalled CUTAG records KUXREC.*/

   /* *************************************************************/


  if (XA0AW02.KULAAID == KUCREC.KUCBLAID) /* if bill group is same addr id*/
      /* if xau is 26,64,83 or 93 set lockbox to '05'*/
      /* otherwise*/
      /* if xau has 'doc to ar' = i set lockbox to '00'*/
      /* otherwise*/
      /* use first 3 characters of zip code to search xlbtbl*/
      /* to find the lock box code*/
    if (KUCREC.XAUCD == "26"
     || KUCREC.XAUCD == "64"
     || KUCREC.XAUCD == "82"
     || KUCREC.XAUCD == "93")
      if (KUCREC.XLBCD == "05")
        return;
      else
        KM0FW01.XLBCD = "05";
      end
    else

      if (KUCREC.XAUCD in XAUTBL.XAUCD)
        XAUTBL.XAUCD = XAUTBL.XAUABRV[sysVar.arrayIndex];
      end
      if (XAUTBL.XAUARIND[sysVar.arrayIndex] == "I" /* if internal company*/
       && XAUTBL.XAUCD[sysVar.arrayIndex] != "90")  /* and not colehaan*/
        KM0FW01.XLBCD = "00";
      else /* else set the lockbox by zip*/

        KM0FW01.XXXZIP = XA0AW02.XXXZIP;
        KM0FW01.KM0FWIN1 = 1; /* look up lock box code*/
        while (XLBTBL.XLBZPFX[KM0FWIN1] != "999"
         && XLBTBL.XLBZPFX[KM0FWIN1] < KM0FW01.XLBZPFX)
          KM0FW01.KM0FWIN1 = KM0FW01.KM0FWIN1 + 1;
        end
        KM0FW01.XLBCD = XLBTBL.XLBCD[KM0FWIN1];
      end
    end

     /* update company*/
    KM0FW01.KUZDATA = KUCREC.KUCGRP; /* save before image*/
    KUCREC.XLBCD = KM0FW01.XLBCD;
    XX0XS01(); /* get date and time*/
    KUCREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KUCREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
    call "IO0240" ("U ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      KUZREC.KUZTYPE = "C"; /* change*/
      KM0FS67(); /* write audit records*/
    else
      TA1REC.TA1LOC = "UPDATE COMPANY   ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      TA1REC.TA1PGMNM = "KM0FS66";
      KM0FW01.KM0FWCMP = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KM0FW01.KM0FWKEY;
      XSKUS-DB2-RETN(); /* abort routine*/
    end
  end
end // end KM0FS66


// write bill group audit recs
Function KM0FS67()

  KUZREC.XXXTBLNM = "VCMPNY01"; /* move tbl name to audit rec*/
  KUZREC.KUZDATA = KUCREC.KUCGRP; /* move after data*/

  KUZREC.XXXUSER = COMMAREA.CAUSERID; /* move user id to audit rec*/
  KUZREC.KUCCOID = KM0FW01.KUCCOID; /* move co id to audit rec*/

   /* note: change time should be correct, xx0x was called just*/
        /* before update occured.*/

  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT; /* move set up date to audit rec*/
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* move time to audit rec*/
  KUZREC.KUZBFCD = "A"; /* move after-code*/

  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM0F   ";
    TA1REC.TA1LOCAT[1] = "KM0FS67  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VBLGRP01 ";
    TA1REC.TA1MAP = "KM0FM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VCMPNY01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod to add*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    XSKUS-DB2-RETN(); /* abort*/
  end

  KUZREC.KUZBFCD = "B"; /* move before-code*/
  KUZREC.KUZDATA = KM0FW01.KUZDATA; /* move data to audit record*/
  KUZREC.XXXUSER = COMMAREA.CAUSERID; /* move user id to audit rec*/
  KUZREC.KUCCOID = KM0FW01.KUCCOID; /* move co id to audit rec*/

   /* note: change time should be correct, xx0x was called just*/
        /* before update occured.*/

  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT; /* move set up date to audit rec*/
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* move time to audit rec*/
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod to add*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    TA1REC.TA1LOC = "WRITE AUDIT";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUAUD01";
    TA1REC.TA1PGMNM = "KM0FS64";
    KM0FW01.KM0FWCMP = KUCREC.KUCCOID;
    TA1REC.TA1TBLKE = KM0FW01.KM0FWKEY;
    XSKUS-DB2-RETN(); /* abort*/
  end

end // end KM0FS67


// handle any special entries
Function KM0FS70()
  KM0FW01.CATOAP = KM0FM001.CATOAP;

  if (converseVar.eventKey is enter)
    if (KM0FW01.CATOAP != " ")
      KM0FS71(); /* handle fast-path option entry*/
    else
      return; /* no special functions...go back*/
    end
  else
    if (converseVar.eventKey is pa2) /* if we want to refresh the screen*/
      KM0FW01.KUCCOID = 0;
      KM0FS10(); /* and do the edit again*/
    else
      if (KM0FW01.CATOAP != " ")
        converseLib.validationFailed(29); /* can't use fast-path and pf-key*/
        set KM0FM001.CATOAP cursor, bold;
      else
        KM0FS72(); /* handle pf key entry*/
      end
    end
  end



end // end KM0FS70


// handle fast-path option entry
Function KM0FS71()

  if (KM0FM001.CATOAP != " ")
    COMMAREA.CATOAP = KM0FM001.CATOAP;
    COMMAREA.CAITEM = KM0FM001.CAITEM;
    XSEXIT(); /* transfer to requested appl.*/
    set KM0FM001.CATOAP cursor, bold;
    exit stack;
  end

end // end KM0FS71


// handle any pf key entry
Function KM0FS72()
   /* ************************************************************/
   /* *   We get here because a pf-key has been entered...*/
   /* *   The valid pf-keys are:   pf1, pf3, pf4, pf5, pf12*/
   /* **/

    /* Maintenance History:*/
    /* 10-11-91 CHELLM Deinstalled CUTAG records KUXREC.*/


   /* *************************************************************/

   /* **/
   /* ***********************************************************/



   /* IF KM0FW01.KMEDITSW = 'EDIT OK' ;if there's maint pending*/
    /* IF EZEAID IS PF1;*/
      /* OR EZEAID IS PF3;*/
      /* OR EZEAID IS PF4;*/
      /* OR EZEAID IS PF5;*/
      /* MOVE 47 TO EZEMNO ;can't exit appl w/maint pending*/
      /* EZEFLO;*/
    /* END ;*/
   /* END ;*/


  if (converseVar.eventKey is pf3)
    KM0FS73();
  end /* handle entry of pf3*/
  if (converseVar.eventKey is pf5)
    KM0FS75();
  end /* handle entry of pf5*/
  if (converseVar.eventKey is pf4)
    XSPF4();
  end /* handle entry of pf4*/
  if (converseVar.eventKey is pf1)
    XSPF1();
  end /* handle entry of pf1*/
  if (converseVar.eventKey is pf12) /* if user wants to update*/
    if (KM0FW01.KM0FWESW == "EDIT OK") /* and the edits were ok*/
      KM0FW01.KM0FWESW = "UPDATE"; /* set switch to update*/
      KM0FS15(); /* edit the address*/
      if (converseVar.validationMsgNum == 0) /* if the edit is ok*/
        move XA0AW02 to KM0FM001 withV60Compat;
        KM0FM001.KM0FM-ADDR1 = XA0AW02.XXX-ADDR1;
        KM0FM001.KM0FM-ADDR2 = XA0AW02.XXX-ADDR2;
        KM0FM001.KM0FM-ADDR3 = XA0AW02.XXX-ADDR3;
        KM0FS60(); /* ;  do the update*/
        if (converseVar.validationMsgNum == 0) /* ;  if update is ok*/
          if (KM0FW01.KM0FWMOD == "X") /* city or state modified*/
            KM0FS90(); /* select all stores for company*/
          end
          converseLib.validationFailed(29); /* give record updated message*/
          set KM0FM001.KUCCOID cursor, normal;
          set KM0FM001.KULAAID normal;
          KM0FW01.KUCCOID = 0;
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.commit();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
        else
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.rollback();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
        end
      end
    else
      converseLib.validationFailed(101); /* cant update till edit ok*/
    end
  end

  if (COMMAREA.CASECRC == 0
   && converseVar.validationMsgNum == 0)
    converseLib.validationFailed(3); /* pfkey not supported*/
  end

  exit stack;


end // end KM0FS72


// handle pf3 key
Function KM0FS73()
  COMMAREA.CATOAP = "KM0A"; /* go to master menu*/
  XSEXIT();

end // end KM0FS73


// handle pf5 entry
Function KM0FS75()
   /* ************************************************************/
   /* *   For this application, pf5 takes you back to*/
   /* *   the Customer Main Menu (ku0m).*/
   /* **/
   /* ************************************************************/

  COMMAREA.CATOAP = "KU0M"; /* set up the commarea to-application*/
  XSEXIT(); /* and go to the customer main menu.*/

end // end KM0FS75


// select all stores for company
Function KM0FS90()

  KUMREC.KUCCOID = KM0FM001.KUCCOID;
  call "IO0340" ("SS", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    KM0FW01.KM0FWEND = "N";
    while (KM0FW01.KM0FWEND == "N")
      KM0FS95();
    end
  else
    TA1REC.TA1LOC = "SELECT SET STORE";
    TA1REC.TA1PGMNM = "KM0FS90";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VSTORE01";
    KM0FW01.KM0FWCMP = KUMREC.KUCCOID;
    TA1REC.TA1TBLKE = KM0FW01.KM0FWKEY;
    XSKUS-DB2-RETN();
  end

  KM0FW01.KM0FWMOD = " ";

end // end KM0FS90


// update store short city/state
Function KM0FS95()

  call "IO0340" ("SN", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KM0FW01.KM0FWEND = "Y";
      return;
    else
      TA1REC.TA1LOC = "SELECT NEXT STORE";
      TA1REC.TA1PGMNM = "KM0FS95";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VSTORE01";
      KM0FW01.KM0FWCMP = KUMREC.KUCCOID;
      KM0FW01.KM0FWSTR = KUMREC.KUMSTRID;
      TA1REC.TA1TBLKE = KM0FW01.KM0FWKEY;
      XSKUS-DB2-RETN();
    end
  end

  if (KUMREC.KUMSTAID == KM0FM001.KULAAID)
    /* next sentence*/
  else
    return;
  end

  XX0XS01();

  set KUZREC empty;
  KUZREC.XXXTBLNM = "VSTORE01";
  KUZREC.KUZDATA = KUMREC.KUMGRP;
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUMREC.KUCCOID;
  KUZREC.KUMSTRID = KUMREC.KUMSTRID;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZBFCD = "B";
  KUZREC.KUZTYPE = "C";


  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM0F   ";
    TA1REC.TA1LOCAT[1] = "KM0FS95  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VSTORE01 ";
    TA1REC.TA1MAP = "KM0FM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VSTORE01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOC = "INSERT AUDIT BEFORE";
    TA1REC.TA1PGMNM = "KM0FS95";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUAUD01";
    KM0FW01.KM0FWCMP = KUMREC.KUCCOID;
    KM0FW01.KM0FWSTR = KUMREC.KUMSTRID;
    TA1REC.TA1TBLKE = KM0FW01.KM0FWKEY;
    XSKUS-DB2-RETN();
  end

  KU0XW30.KU0XW3GP = KM0FM001.XXXCITY;
  call "KU0X" (KU0XW30, KU0XW10) {isNoRefresh = yes};
  KUMREC.KUMCITYS = KU0XW10.KU0XW1GP;
  KUMREC.KUMXSTCD = KM0FM001.XSTCD;
  KUMREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUMREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  call "IO0340" ("U ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOC = "UPDATE STORE";
    TA1REC.TA1PGMNM = "KM0FS95";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VSTORE01";
    KM0FW01.KM0FWCMP = KUMREC.KUCCOID;
    KM0FW01.KM0FWSTR = KUMREC.KUMSTRID;
    TA1REC.TA1TBLKE = KM0FW01.KM0FWKEY;
    XSKUS-DB2-RETN();
  end

  XX0XS01();

  set KUZREC empty;
  KUZREC.XXXTBLNM = "VSTORE01";
  KUZREC.KUZDATA = KUMREC.KUMGRP;
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUMREC.KUCCOID;
  KUZREC.KUMSTRID = KUMREC.KUMSTRID;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZBFCD = "A";
  KUZREC.KUZTYPE = "C";

  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM0F   ";
    TA1REC.TA1LOCAT[1] = "KM0FS95  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VSTORE01 ";
    TA1REC.TA1MAP = "KM0FM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VSTORE01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOC = "INSERT AUDIT AFTER";
    TA1REC.TA1PGMNM = "KM0FS95";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUAUD01";
    KM0FW01.KM0FWCMP = KUMREC.KUCCOID;
    KM0FW01.KM0FWSTR = KUMREC.KUMSTRID;
    TA1REC.TA1TBLKE = KM0FW01.KM0FWKEY;
    XSKUS-DB2-RETN();
  end

end // end KM0FS95


Record KM0FW01 type basicRecord
  5 KM0FWREC KM0FWREC ; 
    10 KM0FWGRP KM0FWGRP ; 
    10 KUZDATA KUZDATA ; 
    10 XXX-ADDR1 XXX-ADDR1 ; 
    10 XXX-ADDR2 XXX-ADDR2 ; 
    10 XXX-ADDR3 XXX-ADDR3 ; 
    10 XCYCD XCYCD ; 
    10 XATCD XATCD ; 
    10 CAMSG CAMSG ; 
    10 KM0FWESW KM0FWESW ; 
    10 KM0FWBSW KM0FWBSW ; 
    10 KM0FWPSW KM0FWPSW ; 
    10 KM0FWFSW KM0FWFSW ; 
    10 KM0FWVAL KM0FWVAL ; 
    10 KM0FWIN1 KM0FWIN1 ; 
    10 KM0FWIN2 KM0FWIN2 ; 
    10 XLBCD XLBCD ; 
    10 KULAAID KULAAID ; 
    10 XXXZIP XXXZIP ; 
      15 XLBZPFX XLBZPFX ; 
      15 * char(7) ; 
    10 KUCCOID KUCCOID ; 
    10 KM0FWCID KM0FWCID ; 
      15 KM0FWCLT KM0FWCLT [7] ; 
    10 KM0FWAID KM0FWAID ; 
      15 KM0FWALT KM0FWALT [4] ; 
    10 KUCCONM KUCCONM ; 
    10 KUCMADID KUCMADID ; 
    10 KUCCOAID KUCCOAID ; 
    10 KM0FWFNO KM0FWFNO ; 
    10 CATOAP CATOAP ; 
    10 KM0FWMOD KM0FWMOD ; 
    10 KM0FWEND KM0FWEND ; 
    10 KM0FWKEY KM0FWKEY ; 
      15 KM0FWCMP KM0FWCMP ; 
      15 * char(1) ; 
      15 KM0FWSTR KM0FWSTR ; 
      15 * char(1) ; 
      15 KM0FWDPT KM0FWDPT ; 
      15 * char(1) ; 
      15 KM0FWGPC KM0FWGPC ; 
      15 * char(1) ; 
      15 KM0FWADR KM0FWADR ; 
end // end KM0FW01


// address id
DataItem KM0FWADR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// working storage number
DataItem KM0FWAID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// individual numbers
DataItem KM0FWALT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// build screen switch
DataItem KM0FWBSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// working storage number
DataItem KM0FWCID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// individual numbers
DataItem KM0FWCLT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// company id
DataItem KM0FWCMP num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// dept id
DataItem KM0FWDPT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// end of stores sw
DataItem KM0FWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// edit switch
DataItem KM0FWESW char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// number of fields
DataItem KM0FWFNO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// record found flag
DataItem KM0FWFSW num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// gpc
DataItem KM0FWGPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// statement group name
DataItem KM0FWGRP char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// index
DataItem KM0FWIN1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// index
DataItem KM0FWIN2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


DataItem KM0FWKEY char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// modify sw for city
DataItem KM0FWMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// maintenance pending flag
DataItem KM0FWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// credit working storage
DataItem KM0FWREC char(724)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// store id
DataItem KM0FWSTR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KM0FWVAL num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end
