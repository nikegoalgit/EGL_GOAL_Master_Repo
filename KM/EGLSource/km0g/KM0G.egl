package km0g;

import corpcom1.CAMSG;
import corpcom1.CATOAP;
import corpcom2.XGPREC;
import corpcom2.XX0XW01;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSKUS-DB2-RETN;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.*;
import corpcom6.SQLCA;
import corpx1.XATCD;
import corpx1.XAUTBL;
import corpx1.XLBCD;
import corpx1.XLBTBL;
import corpx1.XLBZPFX;
import corpx2.XXXZIP;
import kl.common.KIZTBL;
import ku.common.KU0XW10;
import ku.common.KU0XW30;
import ku.common.KUCCCAID;
import ku.common.KUCCOAID;
import ku.common.KUCCOID;
import ku.common.KUCCONM;
import ku.common.KUCREC;
import ku.common.KULAAID;
import ku.common.KULREC;
import ku.common.KUMREC;
import ku.common.KURREC;
import ku.common.KUZDATA;
import ku.common.KUZREC;
import ta.common.TA1REC;
import xa.common.XA0AW02;
//*** PROGRAM=KM0G ****
// ;***********************************************************
// ;*               Change Address I.D.
// ;***********************************************************
// ;*
// ;* Maintenance History:
// ;*
// ;*     Date     By Whom     Changes Made
// ;*   --------   -------     --------------------------------
// ;*   08/12/86     DPS       Chg logic to write one tag/chg
// ;*   05/18/87     clt       chg km0gw01 for kuarec changes
// ;*   07/21/87     clt       changed length of kumrec
// ;*   09/16/87     crr       corrected km0gs95 - lock box
// ;*   09/21/87     crr       added tag rec on lock box chng
// ;*                          also added error msg in km0gs25
// ;*   10/27/87     clt       fixed updating of cust-unit and
// ;*                            writing audit record.
// ;*   03/16/88     clt       company and store changes
// ;*   11/17/88     jbw       checked for noncsp call opts
// ;*   11/17/88     jbw       added xssegtr logic
// ;*   05/15/89     clt       database changes
// ;*   06/08/89     clt       added security for cole haan
// ;*   01/16/90     jfiat     database changes
// ;*   03/30/90     dsalzw    database changes
// ;*   09/10/90     dsalzw    added kiztbl for audit trail
// ;*   10/17/90     dsalzw    updated both blgrp and cmpny
// ;*   11/08/90     dsalzw    fix bug that was moving zeroes
// ;*                          blgrp id and was not updating
// ;*                          ship addr id to = store value
// ;*   02/04/91     dsalzw    removed billgroup (kuarec)
// ;*   10/11/91     CHELLM    Deinstalled CUTAG records(KUXREC
// ;*   01/07/91     CHELLM    Initialize KM0GW01 rec before
// ;*                          processing to elim. garbage msgs
// 9-july-1993          dlegg     Change call to TA0020 with
//                                ABND to RETN. KM0GS30,S40,
//                                S45,S61,S62,S80.
// 15-july-1993         dlegg     Add sgrp to initialize
//                                records used by appl.
// ;*   10/01/93     CHELLM    CSP 4.1 Conversion
// ;*                          - Fixed PF5 xfer to KU0M.
// ;*   04/10/94     CHELLM    Added Nike Canada User security
// *Y2KFIX   12/02/97  DKENNY  Y2K MODIFICATIONS MADE:
// *                   Application regenerated to pick up new
// *                   XX0XS01.
// *********************
Program KM0G type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KM0GW01 KM0GW01; // record
  KU0XW10 KU0XW10; // record
  KU0XW30 KU0XW30; // record
  KUCREC KUCREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  KURREC KURREC; // record
  KUZREC KUZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  XA0AW02 XA0AW02; // record
  XGPREC XGPREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KIZTBL {deleteAfterUse = yes}; // table
  use XLBTBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use KM0GM.KM0GM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KM0G000: KM0G000();
    goto KM0G010;
    KM0G010: KM0G010();
    ;
    ;
    goto KM0G010;
    ;
    ;
  end // end main
end // end KM0G

// km0a initialization
Function KM0G000()
  ;
  XSENTRY(); /* check if entered properly*/
  ;
  XSSEGTR(); /* set segmented trans id*/
  ;
  KM0GS-INIT-RECS();
  ;
  KM0GW01.KM0GWMS1 = " COMPANYS, ";
  KM0GW01.KM0GWMS2 = " STORES  ";
  KM0GM001.KUMSTRID = 0;
  ;
  ;
  ;
  ;
  KM0GS00(); /* handle fast-path entry*/
  ;
end // end KM0G000

// credit menu
Function KM0G010()
  ;
   /* initialize the screen variables*/
  ;
  ;
  if (converseVar.validationMsgNum == 0
   && COMMAREA.CASECRC == 0)
    set KM0GM001 empty;
  else
    if (COMMAREA.CASECRC != 0)
      KM0GM001.CAMSG = COMMAREA.CAMSG;
      set KM0GM001 alarm;
    else
      set KM0GM001 alarm;
    end
  end
  ;
  ;
  KM0GM001.XXXSCRDT = VGVar.currentShortGregorianDate;
  ;
  ;
  converse KM0GM001 ;
  ;
  ;
  KM0GM001.CAMSG = " ";
  ;
  ;
  KM0GS70(); /* handle special entry (fast-path, pf-keys)*/
  ;
  ;
  if (converseVar.validationMsgNum == 0
   && COMMAREA.CASECRC == 0)
    KM0GS05(); /* edit the fields entered*/
  else
    exit stack;
  end
  ;
  ;
  if (converseVar.validationMsgNum == 0)
    KM0GW01.KM0GWESW = "DO EDIT";
    KM0GS10(); /* go process the entries*/
  end
  ;
  ;
  exit stack;
  ;
  ;
  ;
  ;
end // end KM0G010

// Init records
Function KM0GS-INIT-RECS()
   /* *********************************************************************/
   /* *              Initialize records used by KM0G*/
   /* *********************************************************************/
  ;
  set KM0GW01 empty;
  set KUCREC empty;
  set KULREC empty;
  set KUMREC empty;
  set KURREC empty;
  set KUZREC empty;
  set XGPREC empty;
  set KU0XW30 empty;
  set KU0XW10 empty;
  set XA0AW02 empty;
  set SQLCA empty;
  set ERRSQLCA empty;
  set TA1REC empty;
  set XX0XW01 empty;
end // end KM0GS-INIT-RECS

// handle fast path entry to km0g
Function KM0GS00()
  if (COMMAREA.CAITEM != " ")
    KM0GM001.XXXSCROP[1] = COMMAREA.CAITMLTR[1];
    if (COMMAREA.CAITMLTR[2] == ".")
      KM0GW01.KM0GWCID = 0;
      KM0GW01.KM0GWAID = 0;
      KM0GW01.KM0GWSID = 0;
      KM0GW01.KM0GWIN1 = 3;
      KM0GW01.KM0GWIN2 = 1;
      KM0GW01.KM0GWFNO = 1;
      while (KM0GW01.KM0GWIN1 <= 20
       && COMMAREA.CAITMLTR[KM0GWIN1] != " ")
        if (COMMAREA.CAITMLTR[KM0GWIN1] == ".")
          KM0GW01.KM0GWFNO = KM0GW01.KM0GWFNO + 1;
          KM0GW01.KM0GWIN2 = 0;
        else
          KM0GS01(); /* move each letter*/
          if (converseVar.validationMsgNum != 0)
            set KM0GM001.CAITEM cursor, bold;
            exit stack;
          end
          KM0GW01.KM0GWIN1 = KM0GW01.KM0GWIN1 + 1;
          KM0GW01.KM0GWIN2 = KM0GW01.KM0GWIN2 + 1;
        end
      end
      KM0GM001.KULAAID = KM0GW01.KM0GWAID;
      KM0GM001.KUCCOID = KM0GW01.KM0GWCID;
      KM0GM001.KUMSTRID = KM0GW01.KM0GWSID;
      COMMAREA.CAITEM = " ";
      KM0GS05(); /* validate the fast-path option(s)*/
    else
      COMMAREA.CAITEM = " ";
    end
  end
end // end KM0GS00

// break down fast-path item
Function KM0GS01()
  if (KM0GW01.KM0GWFNO == 1)
    if (KM0GW01.KM0GWIN2 <= 4)
      KM0GW01.KM0GWALT[KM0GWIN2] = COMMAREA.CAITMLTR[KM0GWIN1];
    else
      converseLib.validationFailed(109); /* invalid - address id too long*/
    end
  else
    if (KM0GW01.KM0GWFNO == 2)
      if (KM0GW01.KM0GWIN2 <= 1)
        KM0GM001.XXXSCROP[2] = COMMAREA.CAITMLTR[KM0GWIN1];
      else
        converseLib.validationFailed(109); /* invalid - option too long*/
      end
    else
      if (KM0GW01.KM0GWFNO == 3)
        if (KM0GW01.KM0GWIN2 <= 7)
          KM0GW01.KM0GWCLT[KM0GWIN2] = COMMAREA.CAITMLTR[KM0GWIN1];
        else
          converseLib.validationFailed(109); /* invalid - co id too long*/
        end
      else
        if (KM0GW01.KM0GWFNO == 4)
          if (KM0GW01.KM0GWIN2 <= 4)
            KM0GW01.KM0GWSLT[KM0GWIN2] = COMMAREA.CAITMLTR[KM0GWIN1];
          else
            converseLib.validationFailed(110); /* invalid - store id too long*/
          end
        end
      end
    end
  end
end // end KM0GS01

// edit cc0mm001 entry
Function KM0GS05()
  ;
  set KM0GM001.XXXSCROP[1] cursor, normal;
  set KM0GM001.KULAAID normal;
  set KM0GM001.XXXSCROP[2] normal;
  set KM0GM001.KUCCOID normal;
  set KM0GM001.KUMSTRID normal;
  ;
  ;
  if (KM0GM001.XXXSCROP[1] < 1
   || KM0GM001.XXXSCROP[1] > 5)
    converseLib.validationFailed(115); /* ;outside valid range*/
    set KM0GM001.XXXSCROP[1] cursor, bold;
  else
    /* next sentence   input is ok*/
  end
  ;
  ;
  if (KM0GM001.XXXSCROP[2] < 1
   || KM0GM001.XXXSCROP[2] > 3)
    converseLib.validationFailed(115); /* outside valid range*/
    set KM0GM001.XXXSCROP[2] cursor, bold;
  else
    /* next sentenceinput is ok*/
  end
  ;
  ;
  if (KM0GM001.XXXSCROP[1] == 1
   || KM0GM001.XXXSCROP[1] == 2
   || KM0GM001.XXXSCROP[1] == 3)
    if (KM0GM001.XXXSCROP[2] == 1)
      /* next sentence*/
    else
      converseLib.validationFailed(147); /* company (1) is only valid option*/
      set KM0GM001.XXXSCROP[2] cursor, bold;
    end
  else
    if (KM0GM001.XXXSCROP[1] == 4
     || KM0GM001.XXXSCROP[1] == 5)
      if (KM0GM001.XXXSCROP[2] == 1
       || KM0GM001.XXXSCROP[2] == 2)
        /* next sentence*/
      else
        converseLib.validationFailed(148); /* company (1) or store only valid opts*/
        set KM0GM001.XXXSCROP[2] cursor, bold;
      end
    end
  end
  ;
  if (KM0GM001.KUCCOID == 0) /* company id is always required*/
    converseLib.validationFailed(114); /* field required for this option*/
    set KM0GM001.KUCCOID cursor, bold;
  end
  ;
  ;
end // end KM0GS05

// process km0am012 entries
Function KM0GS10()
   /* ************************************************************/
      /* we get here from two places:  km0ge01if enter was*/
      /* pressed, or km0gpfk if pf12 was entered.*/
   /* we go thru the same logic regardless of whether we*/
   /* are only editing or we are updating...the difference*/
      /* being that a switch is tested to see if the update*/
   /* should actually take place.*/
  ;
  ;
  ;
   /* ************************************************************/
  KM0GW01.KM0GWCCT = 0; /* zero company counter*/
  KM0GW01.KM0GWSCT = 0; /* zero store counter*/
  ;
  if (KM0GM001.XXXSCROP[1] == 1 /* change company addr id*/
   || KM0GM001.XXXSCROP[1] == 2 /* change alt addr id*/
   || KM0GM001.XXXSCROP[1] == 3) /* change bill grp addr id*/
    KM0GS15();
  else
    if (KM0GM001.XXXSCROP[1] == 4 /* change store addr id*/
     || KM0GM001.XXXSCROP[1] == 5) /* change ship group addr id*/
      KM0GS20();
    end
  end
  ;
  ;
  if (converseVar.validationMsgNum == 0)
    KM0GM001.CAMSG = KM0GW01.CAMSG;
    if (KM0GW01.KM0GWESW == "DO EDIT")
      KM0GW01.KM0GWESW = "EDIT OK";
      converseLib.validationFailed(22); /* press pf12 to confirm*/
    end
  end
end // end KM0GS10

// do view 1 2 & 3
Function KM0GS15()
  KM0GS30(); /* get company*/
  ;
  if (converseVar.validationMsgNum == 0)
    KM0GS35(); /* get address*/
    if (converseVar.validationMsgNum == 0)
      KM0GS61(); /* update this company*/
    end
  end
  ;
end // end KM0GS15

// do views 4 and 5
Function KM0GS20()
  KM0GS35(); /* get address*/
  ;
  if (converseVar.validationMsgNum == 0)
    KM0GS30(); /* get company*/
    if (converseVar.validationMsgNum == 0)
      KM0GS40(); /* get store*/
    end
  end
  ;
  ;
  if (converseVar.validationMsgNum == 0)
    if (KM0GM001.XXXSCROP[2] == 1)
      KM0GW01.KM0GWENS = "N";
      while (KM0GW01.KM0GWENS == "N")
        KM0GS62(); /* update this store*/
        KM0GS45(); /* get next store*/
      end
    else
      if (KM0GM001.XXXSCROP[2] == 2)
        KM0GS62(); /* update this store*/
      end
    end
  end
  ;
  ;
end // end KM0GS20

// get company
Function KM0GS30()
  set KM0GM001.KUCCOID normal;
  ;
  KUCREC.KUCCOID = KM0GM001.KUCCOID;
  ;
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KM0GW01.KUCCOID = KUCREC.KUCCOID;
    KM0GM001.KUCCONM = KUCREC.KUCCONM;
    KM0GM001.KUCCOANM = KUCREC.KUCCOANM;
    KM0GW01.KUCCOAID = KUCREC.KUCCOAID;
    KM0GW01.KUCCCAID = KUCREC.KUCCCAID;
    KM0GW01.KUCCCAID = KUCREC.KUCBLAID;
  else
    KM0GM001.KUCCONM = " ";
    KM0GM001.KUCCOANM = " ";
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(118);
      set KM0GM001.KUCCOID cursor, bold;
      return;
    else
      XSKUS-DB2-RETN(); /* abort routine*/
    end
  end
  ;
  if (KUCREC.XAUCD in XAUTBL.XAUCD)
    if (XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KM0GW01.XATCD = XAUTBL.XATCD[sysVar.arrayIndex];
    else
      KM0GW01.XATCD = " ";
    end
  else
    KM0GW01.XATCD = " ";
  end
  ;
  if (KM0GW01.XATCD == "08")
    if (COMMAREA.CADLVL[1] == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(272);
      KM0GM001.KUCCONM = " ";
      KM0GM001.KUCCOANM = " ";
      KM0GM001.KUMSTRNM = " ";
      set KM0GM001.KUCCOID cursor, bold;
    end
  else
    if (KM0GW01.XATCD == "03")
      if (COMMAREA.CADLVL[2] == "Y")
        /* next sentence*/
      else
        converseLib.validationFailed(272);
        KM0GM001.KUCCONM = " ";
        KM0GM001.KUCCOANM = " ";
        KM0GM001.KUMSTRNM = " ";
        set KM0GM001.KUCCOID cursor, bold;
      end
    else
      if (COMMAREA.CADLVL[1] == "Y"
       || COMMAREA.CADLVL[2] == "Y")
        converseLib.validationFailed(272);
        KM0GM001.KUCCONM = " ";
        KM0GM001.KUCCOANM = " ";
        KM0GM001.KUMSTRNM = " ";
        set KM0GM001.KUCCOID cursor, bold;
      end
    end
  end
           /* Edit for Nike Canada User Security*/
  ;
  if (KUCREC.XLECD == "03")
    if (COMMAREA.CADLVL[3] == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(272);
      KM0GM001.KUCCONM = " ";
      KM0GM001.KUCCOANM = " ";
      KM0GM001.KUMSTRNM = " ";
      set KM0GM001.KUCCOID cursor, bold;
    end
  else
    if (COMMAREA.CADLVL[3] == "Y")
      converseLib.validationFailed(272);
      KM0GM001.KUCCONM = " ";
      KM0GM001.KUCCOANM = " ";
      KM0GM001.KUMSTRNM = " ";
      set KM0GM001.KUCCOID cursor, bold;
    end
  end
end // end KM0GS30

// get address
Function KM0GS35()
  set KM0GM001.KULAAID normal;
  ;
  XA0AW02.KUCCOID = KM0GM001.KUCCOID;
  XA0AW02.XA0AWFNC = "G";
  ;
  XA0AW02.KULAAID = KM0GM001.KULAAID;
  ;
  call "XA0A" (XA0AW02) {isNoRefresh = yes};
  ;
  ;
  if (XA0AW02.XA0AWERR[1] == 0)
    move XA0AW02 to KULREC withV60Compat;
  else
    set KM0GM001.KULAAID cursor, bold;
    if (XA0AW02.XA0AWERR[1] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[1]);
    end
    return;
  end
end // end KM0GS35

// get store
Function KM0GS40()
  KUMREC.KUCCOID = KM0GM001.KUCCOID;
  ;
  if (KM0GM001.XXXSCROP[2] == 1)
    call "IO0340" ("SS", SQLCA, KUMREC) {isNoRefresh = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      KM0GS45(); /* get 1st store*/
      if (SQLCA.VAGen_SQLCODE == 0)
        KM0GM001.KUMSTRNM = KUMREC.KUMSTRNM;
        return;
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          KM0GM001.KUMSTRNM = " ";
          return;
        else
          XSKUS-DB2-RETN(); /* abort routine*/
        end
      end
    else
      XSKUS-DB2-RETN(); /* abort routine*/
    end
  else
    KUMREC.KUMSTRID = KM0GM001.KUMSTRID;
    call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      KM0GM001.KUMSTRNM = KUMREC.KUMSTRNM;
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(116);
        set KM0GM001.KUMSTRID cursor, bold;
        KM0GW01.KM0GWENS = "Y";
        KM0GM001.KUMSTRNM = " ";
      else
        XSKUS-DB2-RETN(); /* abort routine*/
      end
    end
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(116);
      return;
    else
      XSKUS-DB2-RETN(); /* abort routine*/
    end
  end
end // end KM0GS40

// get next store
Function KM0GS45()
  call "IO0340" ("SN", SQLCA, KUMREC) {isNoRefresh = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      call "IO0340" ("CS", SQLCA, KUMREC) {isNoRefresh = yes}; /* close the cursor*/
      KM0GW01.KM0GWENS = "Y";
    else
      XSKUS-DB2-RETN(); /* abort routine*/
    end
  end
end // end KM0GS45

// update company
Function KM0GS61()
  ;
   /* *************************************************************/
  ;
    /* Maintenance History:*/
    /* 10-11-91 CHELLM Deinstalled CUTAG records KUXREC.*/
  ;
   /* *************************************************************/
  ;
  KM0GW01.KUZDATA = KUCREC.KUCGRP; /* save before image*/
  ;
  KM0GW01.KM0GWCCT = KM0GW01.KM0GWCCT + 1;
  ;
  if (KM0GM001.XXXSCROP[1] == 1) /* updating the company address*/
    KUCREC.KUCCOAID = KM0GM001.KULAAID;
  else
    if (KM0GM001.XXXSCROP[1] == 2) /* updating the alternate address*/
      KUCREC.KUCCCAID = KM0GM001.KULAAID;
    else /* ;  updating the alternate address*/
      KUCREC.KUCBLAID = KM0GM001.KULAAID;
      KM0GS95(); /* get new lockbox*/
      KUCREC.XLBCD = KM0GW01.XLBCD;
    end
  end
  ;
  XX0XS01(); /* get date and time*/
  KUCREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUCREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  ;
  if (KM0GW01.KM0GWESW == "UPDATE")
    call "IO0240" ("U ", SQLCA, KUCREC) {isNoRefresh = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      KUZREC.KUZTYPE = "C"; /* change*/
      KUZREC.XXXTBLNM = "VCMPNY01"; /* company*/
      KUZREC.KUMSTRID = 0; /* store*/
      KUZREC.XNXCD = 0; /* dept*/
      KUZREC.XGPCD = " "; /* gpc*/
      KM0GS80(); /* write audit records*/
    else
      XSKUS-DB2-RETN(); /* abort routine*/
    end
  end
end // end KM0GS61

// update stores
Function KM0GS62()
   /* *************************************************************/
  ;
    /* Maintenance History:*/
    /* 10-11-91 CHELLM Deinstalled CUTAG records KUXREC.*/
  ;
   /* *************************************************************/
  ;
  KM0GW01.KM0GWSCT = KM0GW01.KM0GWSCT + 1;
  ;
  KM0GW01.KUZDATA = KUMREC.KUMGRP; /* save before image*/
  ;
  ;
  if (KM0GM001.XXXSCROP[1] == 4) /* if updating store address id*/
    KUMREC.KUMSTAID = KM0GM001.KULAAID;
    KUMREC.KUMXSTCD = KULREC.XSTCD;
    KU0XW30.KU0XW3GP = KULREC.XXXCITY; /* compress city name*/
    call "KU0X" (KU0XW30, KU0XW10) {isNoRefresh = yes}; /* down to 10 characters*/
    KUMREC.KUMCITYS = KU0XW10.KU0XW1GP; /* and replace*/
  else /* otherwise, must be ship-group address*/
                                   /* id*/
    KUMREC.KUMSHAID = KM0GM001.KULAAID;
  end
  ;
  ;
  XX0XS01(); /* get date and time*/
  KUMREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUMREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  if (KM0GW01.KM0GWESW == "UPDATE")
    call "IO0340" ("U ", SQLCA, KUMREC) {isNoRefresh = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      KUZREC.KUZTYPE = "C"; /* change*/
      KUZREC.XXXTBLNM = "VSTORE01"; /* store*/
      KUZREC.KUMSTRID = KUMREC.KUMSTRID;
      KUZREC.XNXCD = 0; /* dept*/
      KUZREC.XGPCD = " "; /* gpc*/
      KM0GS80(); /* write audit records*/
    else
      XSKUS-DB2-RETN();
    end
  end
  ;
  ;
  if (KM0GM001.XXXSCROP[1] == 4)
    return; /* we only do stores for option 4*/
  end
  ;
end // end KM0GS62

// handle any special entries
Function KM0GS70()
  KM0GW01.CATOAP = KM0GM001.CATOAP;
  ;
  if (converseVar.eventKey is enter)
    if (KM0GW01.CATOAP != " ")
      KM0GS71(); /* handle fast-path option entry*/
    else
      return; /* no special functions...go back*/
    end
  else
    if (converseVar.eventKey is pa2)
      COMMAREA.CATOAP = "KM0G";
      XSEXIT();
    else
      if (KM0GW01.CATOAP != " ")
        converseLib.validationFailed(48); /* can't use fast-path and pf-key*/
        set KM0GM001.CATOAP cursor, bold;
        exit stack; /* reconverse this screen*/
      else
        KM0GS72(); /* handle pf key entry*/
      end
    end
  end
  ;
  ;
end // end KM0GS70

// handle fast-path option entry
Function KM0GS71()
  ;
  if (KM0GM001.CATOAP != " ")
    COMMAREA.CATOAP = KM0GM001.CATOAP;
    COMMAREA.CAITEM = KM0GM001.CAITEM;
    XSEXIT(); /* transfer to requested appl.*/
    set KM0GM001.CATOAP cursor, bold;
    exit stack;
  end
  ;
end // end KM0GS71

// handle any pf key entry
Function KM0GS72()
   /* ************************************************************/
      /* we should only get here if a pf-key was entered*/
      /* valid pf-keys are:pf1, pf3, pf4, pf5 and pf12.*/
  ;
  ;
   /* ************************************************************/
  if (KM0GW01.KM0GWESW == "EDIT OK") /* if there's maintenance pending*/
    if (converseVar.eventKey is pf1
     || converseVar.eventKey is pf3
     || converseVar.eventKey is pf4
     || converseVar.eventKey is pf5)
      converseLib.validationFailed(47); /* can't exit appl w/maint pending*/
      exit stack;
    end
  end
  ;
  ;
  if (converseVar.eventKey is pf3)
    KM0GS73();
  end
  if (converseVar.eventKey is pf4)
    XSPF4();
  end
  if (converseVar.eventKey is pf5)
    KM0GS75();
  end
  if (converseVar.eventKey is pf1)
    XSPF1();
  end
  if (converseVar.eventKey is pf12)
    if (KM0GW01.KM0GWESW == "EDIT OK")
      KM0GW01.KM0GWESW = "UPDATE";
      KM0GS10();
      if (converseVar.validationMsgNum == 0) /* if updated successfully*/
        converseLib.validationFailed(29); /* record updated msg*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* commit the changes*/
        exit stack;
      else
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        exit stack;
      end
    else
      converseLib.validationFailed(101); /* edit not complete*/
      exit stack;
    end
  end
  ;
  ;
  if (COMMAREA.CASECRC == 0)
    converseLib.validationFailed(3); /* pfkey not supported*/
  end
  ;
  ;
  exit stack;
  ;
end // end KM0GS72

// handle pf3 key
Function KM0GS73()
  COMMAREA.CATOAP = "KM0A"; /* go to master menu*/
  XSEXIT();
  ;
end // end KM0GS73

// handle pf5 entry
Function KM0GS75()
   /* ************************************************************/
   /* *   For this application, pf5 takes you back to*/
   /* *   the Customer Main Menu (ku0m).*/
   /* **/
   /* ************************************************************/
  ;
  COMMAREA.CATOAP = "KU0M"; /* set up the commarea to-application*/
  XSEXIT(); /* and go to the customer main menu.*/
  ;
end // end KM0GS75

// write audit records
Function KM0GS80()
  ;
  ;
  if (KUZREC.XXXTBLNM == "VCMPNY01") /* company*/
    KUZREC.KUZDATA = KUCREC.KUCGRP; /* move after data*/
  else
    if (KUZREC.XXXTBLNM == "VSTORE01") /* store*/
      KUZREC.KUZDATA = KUMREC.KUMGRP; /* move after data*/
    end
  end
  ;
  KUZREC.XXXUSER = COMMAREA.CAUSERID; /* move user id to audit rec*/
  KUZREC.KUCCOID = KM0GW01.KUCCOID; /* move co id to audit rec*/
  ;
   /* note: change time should be correct, xx0x was called just*/
        /* before update occured.*/
  ;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT; /* move set up date to audit rec*/
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* move time to audit rec*/
  KUZREC.KUZBFCD = "A"; /* move after-code*/
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM0G   ";
    TA1REC.TA1LOCAT[1] = "KM0GS80  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = KUZREC.XXXTBLNM;
    TA1REC.TA1MAP = "KM0GM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = KUZREC.XXXTBLNM;
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes}; /* call i/o mod to add*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    XSKUS-DB2-RETN(); /* abort*/
  end
  ;
  ;
  if (KUZREC.KUZTYPE == "A") /* if record was added*/
    return; /* then we don't do a before audit*/
                                   /* record*/
  end
  ;
  KUZREC.KUZBFCD = "B"; /* move before-code*/
  KUZREC.KUZDATA = KM0GW01.KUZDATA; /* move data to audit record*/
  KUZREC.XXXUSER = COMMAREA.CAUSERID; /* move user id to audit rec*/
  KUZREC.KUCCOID = KM0GW01.KUCCOID; /* move co id to audit rec*/
  ;
   /* note: change time should be correct, xx0x was called just*/
        /* before update occured.*/
  ;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT; /* move set up date to audit rec*/
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* move time to audit rec*/
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes}; /* call i/o mod to add*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    XSKUS-DB2-RETN(); /* abort*/
  end
  ;
end // end KM0GS80

// get new lock-box code
Function KM0GS95()
  ;
  KM0GW01.XXXZIP = KULREC.XXXZIP;
  ;
  KM0GW01.KM0GWIN1 = 1;
  ;
  while (XLBTBL.XLBZPFX[KM0GWIN1] != "999"
   && XLBTBL.XLBZPFX[KM0GWIN1] < KM0GW01.XLBZPFX)
    KM0GW01.KM0GWIN1 = KM0GW01.KM0GWIN1 + 1;
  end
  ;
  KM0GW01.XLBCD = XLBTBL.XLBCD[KM0GWIN1];
  ;
end // end KM0GS95

//*** RECORD=KM0GW01 ****
// working storage record
// ***********************
Record KM0GW01 type basicRecord
  5 KM0GWGRP KM0GWGRP ; 
    10 KM0GWSGP KM0GWSGP ; 
    10 KM0GWFSW KM0GWFSW ; 
    10 KM0GWENS KM0GWENS ; 
    10 CAMSG CAMSG ; 
      15 KM0GWCCT KM0GWCCT ; 
      15 KM0GWMS1 KM0GWMS1 ; 
      15 KM0GWSCT KM0GWSCT ; 
      15 KM0GWMS2 KM0GWMS2 ; 
      15 * char(49) ; 
    10 KUZDATA KUZDATA ; 
    10 KM0GWESW KM0GWESW ; 
    10 KM0GWBSW KM0GWBSW ; 
    10 KM0GWIN1 KM0GWIN1 ; 
    10 KM0GWIN2 KM0GWIN2 ; 
    10 XLBCD XLBCD ; 
    10 KULAAID KULAAID ; 
    10 XXXZIP XXXZIP ; 
      15 XLBZPFX XLBZPFX ; 
      15 * char(7) ; 
    10 KM0GWZIP KM0GWZIP ; 
      15 KM0GWZLT KM0GWZLT [10] ; 
    10 KUCCOID KUCCOID ; 
    10 KM0GWCID KM0GWCID ; 
      15 KM0GWCLT KM0GWCLT [7] ; 
    10 KM0GWAID KM0GWAID ; 
      15 KM0GWALT KM0GWALT [4] ; 
    10 KM0GWSID KM0GWSID ; 
      15 KM0GWSLT KM0GWSLT [4] ; 
    10 KUCCONM KUCCONM ; 
    10 KUCCCAID KUCCCAID ; 
    10 KUCCOAID KUCCOAID ; 
    10 KM0GWFNO KM0GWFNO ; 
    10 CATOAP CATOAP ; 
    10 XATCD XATCD ; 
end // end KM0GW01

// working storage number
DataItem KM0GWAID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// individual numbers
DataItem KM0GWALT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// build screen switch
DataItem KM0GWBSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// company counter
DataItem KM0GWCCT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage number
DataItem KM0GWCID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// individual numbers
DataItem KM0GWCLT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// eof store
DataItem KM0GWENS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// edit switch
DataItem KM0GWESW char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of fields
DataItem KM0GWFNO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// found switch (y/n)
DataItem KM0GWFSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level of record
DataItem KM0GWGRP char(594)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index
DataItem KM0GWIN1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem KM0GWIN2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KM0GWMS1 char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KM0GWMS2 char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// store counter
DataItem KM0GWSCT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// statement group name
DataItem KM0GWSGP char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws store id
DataItem KM0GWSID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// individual store numbers
DataItem KM0GWSLT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KM0GWZIP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// individual zip-code letters
DataItem KM0GWZLT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

