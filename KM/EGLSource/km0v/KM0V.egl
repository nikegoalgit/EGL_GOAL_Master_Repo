package km0v;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPXGB01;
import corpcom3.XPXNX01;
import corpcom3.XPXSP01;
import corpcom3.XPXX001;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.*;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXSTAT;
import corpx1.XATCD;
import corpx1.XAUTBL;
import corpx1.XGBTBL;
import corpx1.XNXTBL;
import corpx1.XSPTBL;
import corpx2.XNXABRV;
import kl.common.KIZTBL;
import ku.common.KUCREC;
import ku.common.KUJCRIND;
import ku.common.KUJGRP;
import ku.common.KUJREC;
import ku.common.KUJSLFID;
import ku.common.KUJSLFNM;
import ku.common.KUKREC;
import ku.common.KUNREC;
import ku.common.KUZREC;
import ta.common.TA1REC;
//*** PROGRAM=KM0V ****
// ;
// inqurire/maintenance for customer department
// 
// ;
// Maintenance Log:
// 02/20/91 - dsalzw - Created.
// 04/08/91 - dsalzw - db2 changes
// 05/08/91 - dsalzw - removed km0m from setting security
// 06/19/91 - dsalzw - fixed heading for xsp window
// 07/25/91 - dsalzw - fixed map attributes
// 10/11/91 - CHELLM - Changed the Gendr Age screen desc to
//                     Base Gender Age.
// 10/14/91 - CHELLM - Changed length of temp stor size to 1319
// 04/21/92 - CHELLM - Changed edit attrb of xnx field so dept
//                     would fill leading zeros not trailing
//                     zeros for single digit values.
//                          CHA Just=LEF Fill=N to
//                          CHA Just=RIG Fill=N
// 07/17/92 - CHELLM - Changed field attributes on gender age
//                     and sport activity fields to askip.  we
//                     don't want these fields altered once the
//                     SA units have been loaded into VDEPT001.
// 28-june-1993         dlegg     Check for numeric value
//                                before move in km0v000.
// 12-july-1993         dlegg     Change call to TA0020 with
//                                ABND to RETN. KM0V203,205,
//                                210,230,235,438,620,625,630.
// 16-july-1993         dlegg     Add sgrp to initialize all
//                                all records used by appl.
// 10/01/93 - CHELLM - CSP 4.1 Conversion.
// 04/10/95 - CHELLM - Added Nike Canada User Security
// *Y2KFIX   12/05/97  DKENNY  Y2K MODIFICATIONS MADE:
// *                   Application regenerated to pick up new
// *                   XX0XS01.
// *********************
Program KM0V type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KM0VW01 KM0VW01; // record
  KM0VW02 KM0VW02; // record
  KM0VW04 KM0VW04; // record
  KUCREC KUCREC; // record
  KUJREC KUJREC; // record
  KUKREC KUKREC; // record
  KUNREC KUNREC; // record
  KUZREC KUZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KIZTBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use XGBTBL {deleteAfterUse = yes}; // table
  use XSPTBL {deleteAfterUse = yes}; // table
  use XNXTBL {deleteAfterUse = yes}; // table
  use KM0VM.KM0VM010, // form
   KM0VM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KM0V000: KM0V000();
    goto KM0V100;
    KM0V100: KM0V100();
    goto KM0V100;
  end // end main
end // end KM0V

// initialization process
Function KM0V000()
   /* *********************************************/
   /* KM0V000 initialization process*/
   /* *********************************************/
  ;
  XSENTRY();
  ;
  XSSEGTR(); /* set segmented transaction id*/
  ;
  KM0VS-INIT-RECS();
  ;
  set KM0VM010 initial; /* company department screen*/
  ;
  KM0VW01.KM0VWERR = "N"; /* error flag*/
  KM0VW01.KM0VWSIZ = 1319; /* size of temp storage*/
   /* also change KM0VWSAV when changing KM0VWSIZ*/
  KM0VW01.KM0VWMAX = 6; /* nbr of occurs + 1*/
  ;
   /* ****************************/
    /* check security*/
   /* ****************************/
  ;
  if (COMMAREA.CACHGFL == "Y")
    KM0VW01.KM0VWUPD = "Y"; /* update mode*/
    KM0VM010.KM0VMTTL = "UPDATE ";
    set KM0VM010.KM0VMTTL skip;
  else
    KM0VW01.KM0VWUPD = "N"; /* inquiry move*/
    KM0VM010.KM0VMTTL = "INQUIRY";
    set KM0VM010.KM0VMTTL skip;
  end
  ;
  ;
   /* ****************************/
    /* check fast path entry*/
   /* ****************************/
  ;
  KM0VW01.KM0VWUSR = COMMAREA.CAUSERA; /* key from add menu*/
  if (COMMAREA.CAITEM != " ")
    KM0VW01.KM0VWUSR = COMMAREA.CAITEM; /* key from fastpath*/
  end
  ;
  if (KM0VW01.KM0VWCO-CHAR is numeric)
    KM0VM010.KUCCOID = KM0VW01.KM0VWCO;
  else
    KM0VW01.KM0VWCO = 0;
    KM0VM010.KUCCOID = 0;
  end
  ;
  ;
   /* ****************************/
    /* build first screen*/
   /* ****************************/
  ;
  if (KM0VM010.KUCCOID > 0 /* if a company is available*/
   || KM0VM010.KUCCOID > 0)
    KM0V200(); /* process departments*/
  end
  ;
  ;
end // end KM0V000

// departments screen
Function KM0V100()
   /* *******************************************/
   /* KM0V100 - converse dept maintenance screen*/
   /* *******************************************/
  ;
  KM0VM010.KM0VMHDT = VGVar.currentShortGregorianDate;
  if (KM0VW01.KM0VWPND == "Y" /* updates pending*/
   && converseVar.validationMsgNum == 0) /* no other messages*/
    converseLib.validationFailed(277); /* "good edit - pf12 confirm" msg*/
    set KM0VM010.KUCCOID cursor;
  end
  ;
  converse KM0VM010 ;
  ;
  KM0VW01.KM0VWERR = "N";
  KM0VM010.VAGen_EZEMSG = " ";
  ;
  set KM0VM010.CATOAP initialAttributes;
  set KM0VM010.KM0VMPG1 initialAttributes;
  set KM0VM010.KUCCOID initialAttributes;
  ;
  KM0V300(); /* process screen data*/
  ;
end // end KM0V100

// format department screen
Function KM0V200()
   /* *********************************************************/
   /* *  KM0V200 - Format Department screen*/
   /* *     Load company name using company id.*/
   /* *     Load temp storage with departments*/
   /* *********************************************************/
  ;
   /* *********************************************************/
   /* *  FORMAT TO COMPANY SCREEN DATA*/
   /* *********************************************************/
  ;
  set KUCREC empty; /* clear out company record*/
  set KM0VM010.KUCCOID normal; /* set original attributes*/
  ;
  KUCREC.KUCCOID = KM0VM010.KUCCOID; /* set company key*/
  KM0V203(); /* read vcmpny01*/
  ;
  if (KM0VW01.KM0VWERR == "N")
    KM0VM010.KUCCONM = KUCREC.KUCCONM; /* company name*/
    KM0VM010.KUCCOANM = KUCREC.KUCCOANM; /* company alt name*/
    if (KUCREC.XXXSTAT == "I") /* company not inactive*/
         /* MOVE 'Y' TO KM0VW01.KM0VWERR;*/
         /* SET KM0VM010.KUCCOID CURSOR,BRIGHT;*/
         /* MOVE 71 TO EZEMNO    ; "inactive company" msg*/
    end
  end
  ;
  ;
   /* *********************************************************/
   /* *  FORMAT TO PARENT SCREEN DATA*/
   /* *********************************************************/
  ;
  set KUKREC empty; /* clear out parent record*/
  ;
  KUKREC.KUKPCOID = KUCREC.KUKPCOID; /* set parent key*/
  KM0V205(); /* read vparnt01*/
  ;
  KM0VM010.KUKPCOID = KUKREC.KUKPCOID; /* parent id*/
  KM0VM010.KUKPCONM = KUKREC.KUKPCONM; /* parent name*/
  ;
  ;
  ;
  if (KM0VW01.KM0VWERR == "Y") /* company is bad*/
    return;
  end
  ;
   /* *********************************************************/
     /* FORMAT department information*/
   /* *********************************************************/
  ;
  KM0V210(); /* load all departments*/
  ;
  if (KM0VW01.KM0VWERR == "Y") /* error loading stores*/
    return;
  end
  ;
  KM0VW01.KM0VWPGC = 1; /* page counter*/
  KM0VM010.KM0VMPG1 = KM0VW01.KM0VWPGC;
  ;
  KM0VW01.KM0VWDIX = 1; /* start at the top*/
  KM0V270(); /* move departments to the screen*/
  ;
end // end KM0V200

// select company
Function KM0V203()
   /* *****************************/
   /* * KM0V203 - select company **/
   /* *****************************/
  ;
  set SQLCA empty;
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* read cmpny01*/
  if (SQLCA.VAGen_SQLCODE == 0) /* company found*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* company not found*/
      converseLib.validationFailed(25); /* company not found*/
      KM0VW01.KM0VWERR = "Y"; /* set error message.*/
      set KM0VM010.KUCCOID cursor, bold;
      return;
    else
      TA1REC.TA1TYPE = "DB2"; /* company select error*/
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KM0V203";
      TA1REC.TA1LOC = "READING DB2 CMPNY01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      KM0VW01.KM0VWKC = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KM0VW01.KM0VWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4(); /* return to main menu*/
    end
  end
  ;
  ;
   /* ***********************************/
   /* edit for account class code*/
   /* ***********************************/
  ;
  if (KUCREC.XAUCD in XAUTBL.XAUCD)
    if (XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KM0VW01.XATCD = XAUTBL.XATCD[sysVar.arrayIndex];
    else
      KM0VW01.XATCD = " ";
    end
  else
    KM0VW01.XATCD = " ";
  end
  ;
   /* **********************************************/
   /* edit account type for allowance of user groups*/
   /* **********************************************/
  ;
  if (KM0VW01.XATCD == "08") /* edit for cole haan user*/
    if (COMMAREA.CADLVL[1] == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(272); /* not authorized to maint this acct*/
      KM0VW01.KM0VWUPD = "N"; /* update flag= n*/
    end
  else
    if (KM0VW01.XATCD == "03") /* edit for nil user*/
      if (COMMAREA.CADLVL[2] == "Y")
        /* next sentence*/
      else
        converseLib.validationFailed(272); /* not authorized to maint this acct*/
        KM0VW01.KM0VWUPD = "N"; /* updtae flag = n*/
      end
    else
      if (COMMAREA.CADLVL[1] == "Y"
       || COMMAREA.CADLVL[2] == "Y")
        converseLib.validationFailed(272); /* not authorized to maint this acct*/
        KM0VW01.KM0VWUPD = "N"; /* update flag = n*/
      end
    end
  end
               /* Edit for Nike Canada User*/
  ;
  if (KUCREC.XLECD == "03") /* Edit for Nike Canada user*/
    if (COMMAREA.CADLVL[3] == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(272); /* not authorized to maint this acct*/
      KM0VW01.KM0VWUPD = "N"; /* updtae flag = n*/
    end
  else
    if (COMMAREA.CADLVL[3] == "Y")
      converseLib.validationFailed(272); /* not authorized to maint this acct*/
      KM0VW01.KM0VWUPD = "N"; /* update flag = n*/
    end
  end
  ;
end // end KM0V203

// select parent
Function KM0V205()
   /* *************************/
   /* KM0V205 - SELECT PARENT*/
   /* *************************/
  ;
  set SQLCA empty;
  ;
  call "IO0030" ("S ", SQLCA, KUKREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2"; /* company select error*/
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0V205";
    TA1REC.TA1LOC = "READING DB2 PARNT01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VPARNT01";
    KM0VW01.KM0VWKC = KUKREC.KUKPCOID;
    TA1REC.TA1TBLKE = KM0VW01.KM0VWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4(); /* return to main menu*/
  end
  ;
  ;
end // end KM0V205

// load all depts for company
Function KM0V210()
   /* **************************************************/
   /* * KM0V210 - LOAD ALL departmest for a company*/
   /* **************************************************/
  ;
  KM0V220(); /* purge temp work file*/
  if (KM0VW01.KM0VWERR == "Y") /* error in purge*/
    return;
  end
  ;
  set KUJREC empty;
  KUJREC.KUCCOID = KUCREC.KUCCOID;
  ;
  call "IO0290" ("SS", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes}; /* "ss" all departments*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0V210";
    TA1REC.TA1LOC = "SELECT SCAN VDEPT001";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VDEPT001";
    KM0VW01.KM0VWKC = KUCREC.KUCCOID;
    KM0VW01.KM0VWKD = 0;
    TA1REC.TA1TBLKE = KM0VW01.KM0VWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4(); /* return to main menu*/
  end
  ;
  KM0VW01.KM0VWEND = "N"; /* set end-dept flag to 'n'*/
  ;
               /* ; loop/save depts by the screenfull*/
  KM0VW01.KM0VWDIX = 0;
  ;
  while (KM0VW01.KM0VWEND == "N" /* not end of depts*/
   && KM0VW01.KM0VWERR == "N") /* no errors*/
    set KM0VW04 empty;
    KM0VW01.KM0VWCNT = 1;
    while (KM0VW01.KM0VWCNT < KM0VW01.KM0VWMAX /* nbr of occurs*/
     && KM0VW01.KM0VWEND == "N"             /* not end of depts*/
     && KM0VW01.KM0VWERR == "N") /* no errors*/
      KM0V230(); /* select next depts*/
    end /* of while*/
    ;
    if (KM0VW01.KM0VWCNT > 1) /* you have records*/
      KM0V240(); /* write stores to temp storage*/
    end
  end
  ;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  ;
  KM0VW01.KM0VWPGT = KM0VW01.KM0VWDIX; /* total pg remains constant*/
  KM0VM010.KM0VMPG2 = KM0VW01.KM0VWDIX; /* total nbr of pages*/
  ;
end // end KM0V210

// purge dept temp storage
Function KM0V220()
   /* ***************************************/
   /* * KM0V220 - PURGE DEPT TEMP STORAGE  **/
   /* ***************************************/
  ;
  KM0VW02.KM0VW2CT = 0;
  KM0VW02.KM0VW2AP = "KW04";
  KM0VW02.KM0VW2RC = 0;
  KM0VW02.KM0VW2FC = "P"; /* purge temp work file*/
  ;
  set KM0VW04 empty;
  KM0VW04.KM0VW4LG = KM0VW01.KM0VWSIZ;
  ;
  call "TA0050" (KM0VW04, KM0VW02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (KM0VW02.KM0VW2RC != 0) /* error encountered*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    KM0VW01.KM0VWERR = "Y";
    converseLib.validationFailed(228);
  end
  ;
end // end KM0V220

// select next dept
Function KM0V230()
   /* *************************************************************/
   /* * KM0V165 - SELECT NEXT DEPARTMENT*/
  ;
    /* Maintenance History:*/
    /* 10-11-91 CHELLM Remaned XGACD TO XGBCD 1 thru 4*/
  ;
  ;
   /* *************************************************************/
  ;
  ;
  call "IO0290" ("SN", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KM0VW01.KM0VWFND = "Y";
    KM0VW01.KM0VWXNU = KUJREC.XNXCD;
    KM0VW04.KM0VWXNX[KM0VWCNT] = KM0VW01.KM0VWXCH;
    ;
    if (KUJREC.XNXCD in XNXTBL.XNXCD)
      if (XNXTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        KM0VW04.XNXABRV[KM0VWCNT] = "INACTIVE  ";
      else
        KM0VW04.XNXABRV[KM0VWCNT] = XNXTBL.XNXABRV[sysVar.arrayIndex];
      end
    else
      KM0VW04.XNXABRV[KM0VWCNT] = "NOT FOUND ";
    end
    ;
    KM0VW04.KUJSLFID[KM0VWCNT] = KUJREC.KUJSLFID;
    KM0VW04.KUJSLFNM[KM0VWCNT] = KUJREC.KUJSLFNM;
    KM0VW04.KUJCRIND[KM0VWCNT] = KUJREC.KUJCRIND;
    KM0VW04.XXXSTAT[KM0VWCNT] = KUJREC.XXXSTAT;
    KM0VW04.KM0VWGA1[KM0VWCNT] = KUJREC.XGBCD[1];
    KM0VW04.KM0VWGA2[KM0VWCNT] = KUJREC.XGBCD[2];
    KM0VW04.KM0VWGA3[KM0VWCNT] = KUJREC.XGBCD[3];
    KM0VW04.KM0VWGA4[KM0VWCNT] = KUJREC.XGBCD[4];
    KM0VW04.KM0VWSP1[KM0VWCNT] = KUJREC.KUJXSPCD[1];
    KM0VW04.KM0VWSP2[KM0VWCNT] = KUJREC.KUJXSPCD[2];
    KM0VW04.KM0VWSP3[KM0VWCNT] = KUJREC.KUJXSPCD[3];
    KM0VW04.KM0VWSP4[KM0VWCNT] = KUJREC.KUJXSPCD[4];
    KM0VW04.KM0VWSP5[KM0VWCNT] = KUJREC.KUJXSPCD[5];
    KM0VW04.KM0VWSP6[KM0VWCNT] = KUJREC.KUJXSPCD[6];
    KM0VW04.KM0VWSP7[KM0VWCNT] = KUJREC.KUJXSPCD[7];
    KM0VW04.KM0VWSP8[KM0VWCNT] = KUJREC.KUJXSPCD[8];
    KM0VW04.KUJGRP[KM0VWCNT] = KUJREC.KUJGRP;
    KM0VW01.KM0VWCNT = KM0VW01.KM0VWCNT + 1;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KM0VW01.KM0VWEND = "Y";
      KM0V235(); /* close dept cursor*/
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KM0V230";
      TA1REC.TA1LOC = "FETCH NEXT VSTORE01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VDEPT001";
      KM0VW01.KM0VWKC = KUCREC.KUCCOID;
      KM0VW01.KM0VWKD = KUJREC.XNXCD;
      TA1REC.TA1TBLKE = KM0VW01.KM0VWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4(); /* return to main menu*/
    end
  end
  ;
  ;
end // end KM0V230

// close dept cursor
Function KM0V235()
   /* *******************************************/
   /* * KM0V235 - CLOSE DEPT CURSOR*/
   /* *******************************************/
  ;
  call "IO0290" ("CS", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0V235";
    TA1REC.TA1LOC = "CLOSE CURSOR VDEPT001";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VDEPT001";
    KM0VW01.KM0VWKC = KUCREC.KUCCOID;
    KM0VW01.KM0VWKD = KUJREC.XNXCD;
    TA1REC.TA1TBLKE = KM0VW01.KM0VWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4(); /* return to main menu*/
  end
  ;
end // end KM0V235

// write depts to temp storage
Function KM0V240()
   /* ************************************************/
   /* * KM0V240 - WRITE DEPTS TO TEMPORARY STORAGE  **/
   /* ************************************************/
  ;
  if (KM0VW01.KM0VWFND == "Y") /* depts found*/
    set KM0VW02 empty;
    KM0VW02.KM0VW2RC = 0; /* return code*/
    KM0VW02.KM0VW2FC = "A";
    KM0VW02.KM0VW2AP = "KW04";
    KM0VW01.KM0VWDIX = KM0VW01.KM0VWDIX + 1;
    KM0VW02.KM0VW2CT = KM0VW01.KM0VWDIX;
    KM0VW04.KM0VW4LG = KM0VW01.KM0VWSIZ;
    call "TA0050" (KM0VW04, KM0VW02) {isNoRefresh = yes, isExternal = yes};
    if (KM0VW02.KM0VW2RC != 0)
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      KM0VW01.KM0VWEND = "Y";
      KM0VW01.KM0VWERR = "Y";
      converseLib.validationFailed(228);
    end
  end
  ;
end // end KM0V240

// move depts to screen
Function KM0V270()
   /* ***********************************/
   /* * KM0V270 - MOVE DEPTS TO SCREEN*/
   /* ***********************************/
  ;
  KM0VW01.KM0VWCNT = 1; /* counter for screen*/
  ;
  KM0V290(); /* read store temp storage*/
  ;
  while (KM0VW01.KM0VWCNT < KM0VW01.KM0VWMAX)
    if (KM0VW04.KM0VWXNX[KM0VWCNT] == " ")
      KM0VM010.KM0VMXNX[KM0VWCNT] = " ";
      KM0VM010.XNXABRV[KM0VWCNT] = " ";
      KM0VM010.KUJSLFID[KM0VWCNT] = " ";
      KM0VM010.KUJSLFNM[KM0VWCNT] = " ";
      KM0VM010.KUJCRIND[KM0VWCNT] = " ";
      KM0VM010.XXXSTAT[KM0VWCNT] = " ";
      KM0VM010.KM0VMGA1[KM0VWCNT] = " ";
      KM0VM010.KM0VMGA2[KM0VWCNT] = " ";
      KM0VM010.KM0VMGA3[KM0VWCNT] = " ";
      KM0VM010.KM0VMGA4[KM0VWCNT] = " ";
      KM0VM010.KM0VMSP1[KM0VWCNT] = " ";
      KM0VM010.KM0VMSP2[KM0VWCNT] = " ";
      KM0VM010.KM0VMSP3[KM0VWCNT] = " ";
      KM0VM010.KM0VMSP4[KM0VWCNT] = " ";
      KM0VM010.KM0VMSP5[KM0VWCNT] = " ";
      KM0VM010.KM0VMSP6[KM0VWCNT] = " ";
      KM0VM010.KM0VMSP7[KM0VWCNT] = " ";
      KM0VM010.KM0VMSP8[KM0VWCNT] = " ";
      ;
      KM0V295(); /* set add security*/
      ;
      if (converseVar.validationMsgNum == 0) /* no previous message*/
        converseLib.validationFailed(206); /* "end of data" msg*/
      end
    else
      KM0VM010.KM0VMXNX[KM0VWCNT] = KM0VW04.KM0VWXNX[KM0VWCNT];
      set KM0VM010.KM0VMXNX[KM0VWCNT] skip;
      KM0VM010.XNXABRV[KM0VWCNT] = KM0VW04.XNXABRV[KM0VWCNT];
      KM0VM010.KUJSLFID[KM0VWCNT] = KM0VW04.KUJSLFID[KM0VWCNT];
      KM0VM010.KUJSLFNM[KM0VWCNT] = KM0VW04.KUJSLFNM[KM0VWCNT];
      KM0VM010.KUJCRIND[KM0VWCNT] = KM0VW04.KUJCRIND[KM0VWCNT];
      KM0VM010.XXXSTAT[KM0VWCNT] = KM0VW04.XXXSTAT[KM0VWCNT];
      KM0VM010.KM0VMGA1[KM0VWCNT] = KM0VW04.KM0VWGA1[KM0VWCNT];
      KM0VM010.KM0VMGA2[KM0VWCNT] = KM0VW04.KM0VWGA2[KM0VWCNT];
      KM0VM010.KM0VMGA3[KM0VWCNT] = KM0VW04.KM0VWGA3[KM0VWCNT];
      KM0VM010.KM0VMGA4[KM0VWCNT] = KM0VW04.KM0VWGA4[KM0VWCNT];
      KM0VM010.KM0VMSP1[KM0VWCNT] = KM0VW04.KM0VWSP1[KM0VWCNT];
      KM0VM010.KM0VMSP2[KM0VWCNT] = KM0VW04.KM0VWSP2[KM0VWCNT];
      KM0VM010.KM0VMSP3[KM0VWCNT] = KM0VW04.KM0VWSP3[KM0VWCNT];
      KM0VM010.KM0VMSP4[KM0VWCNT] = KM0VW04.KM0VWSP4[KM0VWCNT];
      KM0VM010.KM0VMSP5[KM0VWCNT] = KM0VW04.KM0VWSP5[KM0VWCNT];
      KM0VM010.KM0VMSP6[KM0VWCNT] = KM0VW04.KM0VWSP6[KM0VWCNT];
      KM0VM010.KM0VMSP7[KM0VWCNT] = KM0VW04.KM0VWSP7[KM0VWCNT];
      KM0VM010.KM0VMSP8[KM0VWCNT] = KM0VW04.KM0VWSP8[KM0VWCNT];
      ;
      KM0V285(); /* set change security*/
      ;
    end
    ;
    KM0VW01.KM0VWCNT = KM0VW01.KM0VWCNT + 1;
  end
  ;
  set KM0VM010.KUCCOID cursor;
  ;
end // end KM0V270

// set change security
Function KM0V285()
   /* **********************************/
   /* * KM0V285 - set change security*/
   /* **********************************/
  ;
  ;
  if (KM0VW01.KM0VWUPD == "Y")
    ;
    if (COMMAREA.CACLVL[1] == "Y")
      if (KM0VM010.KM0VMXNX[KM0VWCNT] > " ")
        set KM0VM010.KM0VMXNX[KM0VWCNT] skip;
      else
        set KM0VM010.KM0VMXNX[KM0VWCNT] initialAttributes;
      end
      set KM0VM010.KUJSLFID[KM0VWCNT] initialAttributes;
      set KM0VM010.KUJSLFNM[KM0VWCNT] initialAttributes;
      set KM0VM010.XXXSTAT[KM0VWCNT] initialAttributes;
    else
      set KM0VM010.KM0VMXNX[KM0VWCNT] skip;
      set KM0VM010.KUJSLFID[KM0VWCNT] skip;
      set KM0VM010.KUJSLFNM[KM0VWCNT] skip;
      set KM0VM010.XXXSTAT[KM0VWCNT] skip;
    end
    ;
    if (COMMAREA.CACLVL[2] == "Y")
      set KM0VM010.KUJCRIND[KM0VWCNT] initialAttributes;
    else
      set KM0VM010.KUJCRIND[KM0VWCNT] skip;
    end
    ;
    if (COMMAREA.CACLVL[3] == "Y")
      set KM0VM010.KM0VMGA1[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMGA2[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMGA3[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMGA4[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMSP1[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMSP2[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMSP3[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMSP4[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMSP5[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMSP6[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMSP7[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMSP8[KM0VWCNT] initialAttributes;
    else
      set KM0VM010.KM0VMGA1[KM0VWCNT] skip;
      set KM0VM010.KM0VMGA2[KM0VWCNT] skip;
      set KM0VM010.KM0VMGA3[KM0VWCNT] skip;
      set KM0VM010.KM0VMGA4[KM0VWCNT] skip;
      set KM0VM010.KM0VMSP1[KM0VWCNT] skip;
      set KM0VM010.KM0VMSP2[KM0VWCNT] skip;
      set KM0VM010.KM0VMSP3[KM0VWCNT] skip;
      set KM0VM010.KM0VMSP4[KM0VWCNT] skip;
      set KM0VM010.KM0VMSP5[KM0VWCNT] skip;
      set KM0VM010.KM0VMSP6[KM0VWCNT] skip;
      set KM0VM010.KM0VMSP7[KM0VWCNT] skip;
      set KM0VM010.KM0VMSP8[KM0VWCNT] skip;
    end
  else
    set KM0VM010.KM0VMXNX[KM0VWCNT] skip;
    set KM0VM010.KUJSLFID[KM0VWCNT] skip;
    set KM0VM010.KUJSLFNM[KM0VWCNT] skip;
    set KM0VM010.KUJCRIND[KM0VWCNT] skip;
    set KM0VM010.XXXSTAT[KM0VWCNT] skip;
    set KM0VM010.KM0VMGA1[KM0VWCNT] skip;
    set KM0VM010.KM0VMGA2[KM0VWCNT] skip;
    set KM0VM010.KM0VMGA3[KM0VWCNT] skip;
    set KM0VM010.KM0VMGA4[KM0VWCNT] skip;
    set KM0VM010.KM0VMSP1[KM0VWCNT] skip;
    set KM0VM010.KM0VMSP2[KM0VWCNT] skip;
    set KM0VM010.KM0VMSP3[KM0VWCNT] skip;
    set KM0VM010.KM0VMSP4[KM0VWCNT] skip;
    set KM0VM010.KM0VMSP5[KM0VWCNT] skip;
    set KM0VM010.KM0VMSP6[KM0VWCNT] skip;
    set KM0VM010.KM0VMSP7[KM0VWCNT] skip;
    set KM0VM010.KM0VMSP8[KM0VWCNT] skip;
    ;
  end
  ;
end // end KM0V285

// read depts temp storage
Function KM0V290()
   /* ************************************/
   /* * KM0V290 READ DEPT TEMP STORAGE  **/
   /* ************************************/
  ;
  KM0VW02.KM0VW2RC = 0;
  KM0VW02.KM0VW2CT = KM0VW01.KM0VWDIX;
  KM0VW02.KM0VW2FC = "R";
  KM0VW02.KM0VW2AP = "KW04";
  KM0VW04.KM0VW4LG = KM0VW01.KM0VWSIZ;
  call "TA0050" (KM0VW04, KM0VW02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (KM0VW02.KM0VW2RC == 0)
    /* next sentence*/
  else
    if (KM0VW02.KM0VW2RC == 7)
      converseLib.validationFailed(206); /* end of data*/
      KM0VW01.KM0VWERR = "Y";
      KM0VW01.KM0VWEND = "Y";
    else
      if (KM0VW02.KM0VW2RC == 4)
        converseLib.validationFailed(206); /* no temp storage records*/
        KM0VW01.KM0VWERR = "Y";
        KM0VW01.KM0VWEND = "Y";
      else
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        converseLib.validationFailed(228);
        KM0VW01.KM0VWERR = "Y";
        KM0VW01.KM0VWEND = "Y";
      end
    end
  end
  ;
end // end KM0V290

// set add security
Function KM0V295()
   /* **********************************/
   /* * KM0V295 - set add security*/
   /* **********************************/
  ;
  ;
  if (KM0VW01.KM0VWUPD == "Y")
    if (COMMAREA.CACLVL[1] == "Y")
      set KM0VM010.KM0VMXNX[KM0VWCNT] initialAttributes;
      set KM0VM010.KUJSLFID[KM0VWCNT] initialAttributes;
      set KM0VM010.KUJSLFNM[KM0VWCNT] initialAttributes;
      set KM0VM010.KUJCRIND[KM0VWCNT] initialAttributes;
      set KM0VM010.XXXSTAT[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMGA1[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMGA2[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMGA3[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMGA4[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMSP1[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMSP2[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMSP3[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMSP4[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMSP5[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMSP6[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMSP7[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMSP8[KM0VWCNT] initialAttributes;
    else
      set KM0VM010.KM0VMXNX[KM0VWCNT] skip;
      set KM0VM010.KUJSLFID[KM0VWCNT] skip;
      set KM0VM010.KUJSLFNM[KM0VWCNT] skip;
      set KM0VM010.KUJCRIND[KM0VWCNT] skip;
      set KM0VM010.XXXSTAT[KM0VWCNT] skip;
      set KM0VM010.KM0VMGA1[KM0VWCNT] skip;
      set KM0VM010.KM0VMGA2[KM0VWCNT] skip;
      set KM0VM010.KM0VMGA3[KM0VWCNT] skip;
      set KM0VM010.KM0VMGA4[KM0VWCNT] skip;
      set KM0VM010.KM0VMSP1[KM0VWCNT] skip;
      set KM0VM010.KM0VMSP2[KM0VWCNT] skip;
      set KM0VM010.KM0VMSP3[KM0VWCNT] skip;
      set KM0VM010.KM0VMSP4[KM0VWCNT] skip;
      set KM0VM010.KM0VMSP5[KM0VWCNT] skip;
      set KM0VM010.KM0VMSP6[KM0VWCNT] skip;
      set KM0VM010.KM0VMSP7[KM0VWCNT] skip;
      set KM0VM010.KM0VMSP8[KM0VWCNT] skip;
    end
  else
    set KM0VM010.KM0VMXNX[KM0VWCNT] skip;
    set KM0VM010.KUJSLFID[KM0VWCNT] skip;
    set KM0VM010.KUJSLFNM[KM0VWCNT] skip;
    set KM0VM010.KUJCRIND[KM0VWCNT] skip;
    set KM0VM010.XXXSTAT[KM0VWCNT] skip;
    set KM0VM010.KM0VMGA1[KM0VWCNT] skip;
    set KM0VM010.KM0VMGA2[KM0VWCNT] skip;
    set KM0VM010.KM0VMGA3[KM0VWCNT] skip;
    set KM0VM010.KM0VMGA4[KM0VWCNT] skip;
    set KM0VM010.KM0VMSP1[KM0VWCNT] skip;
    set KM0VM010.KM0VMSP2[KM0VWCNT] skip;
    set KM0VM010.KM0VMSP3[KM0VWCNT] skip;
    set KM0VM010.KM0VMSP4[KM0VWCNT] skip;
    set KM0VM010.KM0VMSP5[KM0VWCNT] skip;
    set KM0VM010.KM0VMSP6[KM0VWCNT] skip;
    set KM0VM010.KM0VMSP7[KM0VWCNT] skip;
    set KM0VM010.KM0VMSP8[KM0VWCNT] skip;
  end
  ;
end // end KM0V295

// process screen keys/data
Function KM0V300()
   /* **************************************/
   /* KM0V300 - process PF keys*/
   /* **************************************/
  ;
   /* **************************************/
   /* edit pa2 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pa2
   && KM0VW01.KM0VWPGT != 0) /* company data is available*/
    KM0VM010.KUCCOID = KM0VW01.KM0VWCO; /* refresh company*/
    KM0V200(); /* refresh screen*/
    KM0VW01.KM0VWPND = "N"; /* reset update pending flag*/
    return;
  end
  ;
   /* **************************************/
   /* check for detail changes*/
   /* **************************************/
  ;
  if (KM0VW01.KM0VWPGT != 0 /* company data is available*/
   && KM0VW01.KM0VWUPD == "Y") /* in update mode*/
    KM0V400(); /* check/save this screen's changes*/
    if (KM0VW01.KM0VWERR == "Y") /* exit on detail errors*/
      return;
    end
    KM0V490(); /* check for changes*/
  end
  ;
   /* **************************************/
   /* edit enter  key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is enter)
    if (KM0VM010.CATOAP > " ") /* test for fast path*/
      if (KM0VW01.KM0VWPND == "Y") /* updates pending*/
        converseLib.validationFailed(367); /* "updates pending" msg*/
        KM0VW01.KM0VWERR = "Y";
        set KM0VM010.CATOAP cursor, bold;
      else /* no updates pending*/
        if (KM0VW01.KM0VWPGT != 0) /* company data is available*/
          KM0V220(); /* purge dept  temp storage*/
        end
        COMMAREA.CATOAP = KM0VM010.CATOAP;
        if (KM0VM010.CAITEM == " ")
          KM0VW01.KM0VWCO = KM0VM010.KUCCOID;
          COMMAREA.CAUSERA = KM0VW01.KM0VWUSR;
        else
          COMMAREA.CAITEM = KM0VM010.CAITEM;
        end
        COMMAREA.CAFROMAP = "KM0V";
        XSEXIT();
        KM0VM010.VAGen_EZEMSG = COMMAREA.CAMSG;
        KM0VW01.KM0VWERR = "Y";
        set KM0VM010.CATOAP cursor, bold;
      end
    else /* test for page# chg*/
      if (KM0VM010.KM0VMPG1 != KM0VW01.KM0VWPGC) /* change in page#*/
        KM0VM010.KUCCOID = KM0VW01.KM0VWCO; /* reset company*/
        if (KM0VM010.KM0VMPG1 > KM0VW01.KM0VWPGT /* greater than max*/
         || KM0VM010.KM0VMPG1 < 1)               /* or less than 1*/
          converseLib.validationFailed(379); /* "invalid page" msg*/
          set KM0VM010.KM0VMPG1 cursor, bold;
          KM0VW01.KM0VWERR = "Y";
        else
          KM0VW01.KM0VWDIX = KM0VM010.KM0VMPG1; /* load rqst'd page*/
          KM0VW01.KM0VWPGC = KM0VM010.KM0VMPG1;
          KM0V270();
        end
      else /* test for company change*/
        if (KM0VM010.KUCCOID == 0) /* company is required*/
          KM0VM010.KUCCOID = KM0VW01.KM0VWCO; /* reset company*/
          converseLib.validationFailed(114); /* "field required" msg*/
          KM0VW01.KM0VWERR = "Y";
          set KM0VM010.KUCCOID cursor, bold;
        else
          KM0V500(); /* check for company chg*/
        end
      end
    end
    return;
  end
  ;
   /* **************************************/
   /* test for fastpath except on <enter>*/
   /* **************************************/
  ;
  if (KM0VM010.CATOAP > " ")
    KM0VW01.KM0VWERR = "Y";
    converseLib.validationFailed(90); /* "fast path / pf keys" msg*/
    set KM0VM010.CATOAP cursor, bold;
    return;
  else
    set KM0VM010.CATOAP modified;
  end
  ;
   /* **************************************/
   /* edit pf2 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf2) /* update/inquiry tagle*/
    if (KM0VW01.KM0VWUPD == "N") /* in inquiry mode*/
      if (COMMAREA.CACHGFL == "Y") /* allow to maintenance*/
        KM0VW01.KM0VWUPD = "Y"; /* change to update mode*/
        KM0VM010.KM0VMTTL = "UPDATE ";
        set KM0VM010.KM0VMTTL skip;
        KM0V270(); /* refresh screen*/
        return;
      else
        converseLib.validationFailed(330);
        KM0VW01.KM0VWERR = "Y"; /* display screen*/
        return;
      end
    else
      KM0VW01.KM0VWUPD = "N"; /* change to inquiry mode*/
      KM0VM010.KM0VMTTL = "INQUIRY";
      set KM0VM010.KM0VMTTL skip;
      KM0V270(); /* refresh screen*/
      return;
    end
  end
  ;
   /* **************************************/
   /* pfkey 1/3/4 edit*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf1 /* help screens*/
   || converseVar.eventKey is pf3 /* return*/
   || converseVar.eventKey is pf4) /* master menu*/
    if (KM0VW01.KM0VWPND == "Y") /* updates pending*/
      KM0V550(); /* scroll screen to the error*/
      converseLib.validationFailed(367);
      KM0VW01.KM0VWERR = "Y";
      return;
    else
      if (KM0VW01.KM0VWPGT != 0) /* company data is available*/
        KM0V220(); /* purge store temp storage*/
      end
    end
  end
  ;
   /* **************************************/
   /* edit pf1 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf1) /* help system*/
    XSPF1();
    KM0VM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    KM0VW01.KM0VWERR = "Y";
    return;
  end
  ;
   /* **************************************/
   /* edit pf3 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf3) /* back to company update*/
    COMMAREA.CAUSERA = KM0VM010.KUCCOID;
    COMMAREA.CAITEM = " ";
    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    COMMAREA.CAFROMAP = "KM0V";
    XSEXIT();
    KM0VM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    KM0VW01.KM0VWERR = "Y";
    return;
  end
  ;
   /* **************************************/
   /* edit pf4 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf4) /* back to goal menu*/
    COMMAREA.CAFROMAP = "KM0V";
    XSPF4();
    KM0VM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    KM0VW01.KM0VWERR = "Y";
    return;
  end
  ;
   /* **************************************/
   /* edit pf12 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf12) /* update databases*/
    if (KM0VW01.KM0VWPND == "Y") /* updates pending*/
      if (KM0VW01.KM0VWERR == "N") /* if no errors*/
        KM0V600(); /* process selection entries*/
      else
        converseLib.validationFailed(174); /* "must pass edits" msg*/
      end
    else
      converseLib.validationFailed(280); /* "no maintenance performed" msg*/
    end
    return;
  end
  ;
   /* **************************************/
   /* edit pf7 key    (page up for depts)*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf7) /* scroll backwards for depts*/
    KM0V700();
    return;
  end
  ;
   /* **************************************/
   /* edit pf8 key  (page down for depts)*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf8) /* scroll forwards for depts*/
    KM0V710();
    return;
  end
  ;
   /* **************************************/
   /* edit pf9 key  (window of dept codes)*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf9) /* window for departmets*/
    KM0V750();
    return;
  end
  ;
   /* ***************************************/
   /* edit pf10 key  (window of gender/age)*/
   /* ***************************************/
  ;
  if (converseVar.eventKey is pf10) /* window for xga*/
    KM0V760();
    return;
  end
  ;
   /* ***************************************/
   /* edit pf11 key  (window of sport act)*/
   /* ***************************************/
  ;
  if (converseVar.eventKey is pf11) /* window for xsp*/
    KM0V770();
    return;
  end
  ;
   /* **************************************/
   /* invalid pf key*/
   /* **************************************/
  ;
  if (KM0VW01.KM0VWERR == "N")
    converseLib.validationFailed(281); /* invalid pf key message*/
    KM0VW01.KM0VWERR = "Y";
  end
  ;
end // end KM0V300

// test for changes on screen
Function KM0V400()
   /* **************************************/
   /* * KM0V400 - check detail level change*/
   /* **************************************/
  ;
  KM0VW01.KM0VWCHG = "N"; /* to dept change*/
  KM0VW01.KM0VWCNT = 1; /* counter for screen*/
  ;
  while (KM0VW01.KM0VWCNT < KM0VW01.KM0VWMAX)
    ;
    KM0V405(); /* shift fields to the left*/
    ;
    /* **** Edit credit hold ind*/
    if (KM0VM010.KUJCRIND[KM0VWCNT] == KM0VW04.KUJCRIND[KM0VWCNT]
     && KM0VM010.KM0VMXNX[KM0VWCNT] == KM0VW04.KM0VWXNX[KM0VWCNT])
      set KM0VM010.KUJCRIND[KM0VWCNT] initialAttributes;
    else
      KM0V410(); /* edit credit hold ind*/
    end
    ;
    /* **** Edit sport activity codes*/
    if (KM0VM010.KM0VMSP1[KM0VWCNT] == KM0VW04.KM0VWSP1[KM0VWCNT]
     && KM0VM010.KM0VMSP2[KM0VWCNT] == KM0VW04.KM0VWSP2[KM0VWCNT]
     && KM0VM010.KM0VMSP3[KM0VWCNT] == KM0VW04.KM0VWSP3[KM0VWCNT]
     && KM0VM010.KM0VMSP4[KM0VWCNT] == KM0VW04.KM0VWSP4[KM0VWCNT]
     && KM0VM010.KM0VMSP5[KM0VWCNT] == KM0VW04.KM0VWSP5[KM0VWCNT]
     && KM0VM010.KM0VMSP6[KM0VWCNT] == KM0VW04.KM0VWSP6[KM0VWCNT]
     && KM0VM010.KM0VMSP7[KM0VWCNT] == KM0VW04.KM0VWSP7[KM0VWCNT]
     && KM0VM010.KM0VMSP8[KM0VWCNT] == KM0VW04.KM0VWSP8[KM0VWCNT])
      set KM0VM010.KM0VMSP1[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMSP2[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMSP3[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMSP4[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMSP5[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMSP6[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMSP7[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMSP8[KM0VWCNT] initialAttributes;
    else
      KM0V420(); /* edit sport activity codes*/
    end
    ;
    /* **** Edit gender age codes*/
    if (KM0VM010.KM0VMGA1[KM0VWCNT] == KM0VW04.KM0VWGA1[KM0VWCNT]
     && KM0VM010.KM0VMGA2[KM0VWCNT] == KM0VW04.KM0VWGA2[KM0VWCNT]
     && KM0VM010.KM0VMGA3[KM0VWCNT] == KM0VW04.KM0VWGA3[KM0VWCNT]
     && KM0VM010.KM0VMGA4[KM0VWCNT] == KM0VW04.KM0VWGA4[KM0VWCNT])
      set KM0VM010.KM0VMGA1[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMGA2[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMGA3[KM0VWCNT] initialAttributes;
      set KM0VM010.KM0VMGA4[KM0VWCNT] initialAttributes;
    else
      KM0V430(); /* edit gender age codes*/
    end
    ;
    /* **** Edit department status*/
    if (KM0VM010.XXXSTAT[KM0VWCNT] == KM0VW04.XXXSTAT[KM0VWCNT]
     && KM0VM010.KM0VMXNX[KM0VWCNT] == KM0VW04.KM0VWXNX[KM0VWCNT])
      set KM0VM010.XXXSTAT[KM0VWCNT] initialAttributes;
    else
      KM0V435(); /* edit department status*/
    end
    ;
    ;
    /* **** Edit department self name*/
    if (KM0VM010.KUJSLFNM[KM0VWCNT] == KM0VW04.KUJSLFNM[KM0VWCNT]
     && KM0VM010.KM0VMXNX[KM0VWCNT] == KM0VW04.KM0VWXNX[KM0VWCNT])
      set KM0VM010.KUJSLFNM[KM0VWCNT] initialAttributes;
    else
      KM0V440(); /* edit department self name*/
    end
    ;
    /* **** Edit department self id*/
    if (KM0VM010.KUJSLFID[KM0VWCNT] == KM0VW04.KUJSLFID[KM0VWCNT]
     && KM0VM010.KM0VMXNX[KM0VWCNT] == KM0VW04.KM0VWXNX[KM0VWCNT])
      set KM0VM010.KUJSLFID[KM0VWCNT] initialAttributes;
    else
      KM0V450(); /* edit department self id*/
    end
    ;
    /* **** Edit new department code*/
    if (KM0VM010.KM0VMXNX[KM0VWCNT] == KM0VW04.KM0VWXNX[KM0VWCNT])
      /* next sentence*/
    else
      KM0VW04.KM0VWXNX[KM0VWCNT] = " "; /* set it to spaces*/
      KM0VW04.XNXABRV[KM0VWCNT] = " ";
      KM0V460(); /* edit new dept code*/
    end
    ;
    KM0VW01.KM0VWCNT = KM0VW01.KM0VWCNT + 1;
  end
  ;
  if (KM0VW01.KM0VWCHG == "Y") /* to dept change*/
    KM0VW01.KM0VWPND = "Y";
    KM0V470(); /* rewrite dept temp storage*/
  end
  ;
end // end KM0V400

// shift fields to the left
Function KM0V405()
   /* **************************************/
   /* * KM0V405 - shift fields to the left*/
   /* **************************************/
  ;
   /* **** shift gender age cd to the left*/
  ;
  if (KM0VM010.KM0VMGA3[KM0VWCNT] == " ")
    KM0VM010.KM0VMGA3[KM0VWCNT] = KM0VM010.KM0VMGA4[KM0VWCNT];
    KM0VM010.KM0VMGA4[KM0VWCNT] = " ";
  end
  if (KM0VM010.KM0VMGA2[KM0VWCNT] == " ")
    KM0VM010.KM0VMGA2[KM0VWCNT] = KM0VM010.KM0VMGA3[KM0VWCNT];
    KM0VM010.KM0VMGA3[KM0VWCNT] = KM0VM010.KM0VMGA4[KM0VWCNT];
    KM0VM010.KM0VMGA4[KM0VWCNT] = " ";
  end
  if (KM0VM010.KM0VMGA1[KM0VWCNT] == " ")
    KM0VM010.KM0VMGA1[KM0VWCNT] = KM0VM010.KM0VMGA2[KM0VWCNT];
    KM0VM010.KM0VMGA2[KM0VWCNT] = KM0VM010.KM0VMGA3[KM0VWCNT];
    KM0VM010.KM0VMGA3[KM0VWCNT] = KM0VM010.KM0VMGA4[KM0VWCNT];
    KM0VM010.KM0VMGA4[KM0VWCNT] = " ";
  end
  ;
   /* **** shift sport activity codes to the left*/
  ;
  if (KM0VM010.KM0VMSP7[KM0VWCNT] == " ")
    KM0VM010.KM0VMSP7[KM0VWCNT] = KM0VM010.KM0VMSP8[KM0VWCNT];
    KM0VM010.KM0VMSP8[KM0VWCNT] = " ";
  end
  if (KM0VM010.KM0VMSP6[KM0VWCNT] == " ")
    KM0VM010.KM0VMSP6[KM0VWCNT] = KM0VM010.KM0VMSP7[KM0VWCNT];
    KM0VM010.KM0VMSP7[KM0VWCNT] = KM0VM010.KM0VMSP8[KM0VWCNT];
    KM0VM010.KM0VMSP8[KM0VWCNT] = " ";
  end
  if (KM0VM010.KM0VMSP5[KM0VWCNT] == " ")
    KM0VM010.KM0VMSP5[KM0VWCNT] = KM0VM010.KM0VMSP6[KM0VWCNT];
    KM0VM010.KM0VMSP6[KM0VWCNT] = KM0VM010.KM0VMSP7[KM0VWCNT];
    KM0VM010.KM0VMSP7[KM0VWCNT] = KM0VM010.KM0VMSP8[KM0VWCNT];
    KM0VM010.KM0VMSP8[KM0VWCNT] = " ";
  end
  if (KM0VM010.KM0VMSP4[KM0VWCNT] == " ")
    KM0VM010.KM0VMSP4[KM0VWCNT] = KM0VM010.KM0VMSP5[KM0VWCNT];
    KM0VM010.KM0VMSP5[KM0VWCNT] = KM0VM010.KM0VMSP6[KM0VWCNT];
    KM0VM010.KM0VMSP6[KM0VWCNT] = KM0VM010.KM0VMSP7[KM0VWCNT];
    KM0VM010.KM0VMSP7[KM0VWCNT] = KM0VM010.KM0VMSP8[KM0VWCNT];
    KM0VM010.KM0VMSP8[KM0VWCNT] = " ";
  end
  if (KM0VM010.KM0VMSP3[KM0VWCNT] == " ")
    KM0VM010.KM0VMSP3[KM0VWCNT] = KM0VM010.KM0VMSP4[KM0VWCNT];
    KM0VM010.KM0VMSP4[KM0VWCNT] = KM0VM010.KM0VMSP5[KM0VWCNT];
    KM0VM010.KM0VMSP5[KM0VWCNT] = KM0VM010.KM0VMSP6[KM0VWCNT];
    KM0VM010.KM0VMSP6[KM0VWCNT] = KM0VM010.KM0VMSP7[KM0VWCNT];
    KM0VM010.KM0VMSP7[KM0VWCNT] = KM0VM010.KM0VMSP8[KM0VWCNT];
    KM0VM010.KM0VMSP8[KM0VWCNT] = " ";
  end
  if (KM0VM010.KM0VMSP2[KM0VWCNT] == " ")
    KM0VM010.KM0VMSP2[KM0VWCNT] = KM0VM010.KM0VMSP3[KM0VWCNT];
    KM0VM010.KM0VMSP3[KM0VWCNT] = KM0VM010.KM0VMSP4[KM0VWCNT];
    KM0VM010.KM0VMSP4[KM0VWCNT] = KM0VM010.KM0VMSP5[KM0VWCNT];
    KM0VM010.KM0VMSP5[KM0VWCNT] = KM0VM010.KM0VMSP6[KM0VWCNT];
    KM0VM010.KM0VMSP6[KM0VWCNT] = KM0VM010.KM0VMSP7[KM0VWCNT];
    KM0VM010.KM0VMSP7[KM0VWCNT] = KM0VM010.KM0VMSP8[KM0VWCNT];
    KM0VM010.KM0VMSP8[KM0VWCNT] = " ";
  end
  if (KM0VM010.KM0VMSP1[KM0VWCNT] == " ")
    KM0VM010.KM0VMSP1[KM0VWCNT] = KM0VM010.KM0VMSP2[KM0VWCNT];
    KM0VM010.KM0VMSP2[KM0VWCNT] = KM0VM010.KM0VMSP3[KM0VWCNT];
    KM0VM010.KM0VMSP3[KM0VWCNT] = KM0VM010.KM0VMSP4[KM0VWCNT];
    KM0VM010.KM0VMSP4[KM0VWCNT] = KM0VM010.KM0VMSP5[KM0VWCNT];
    KM0VM010.KM0VMSP5[KM0VWCNT] = KM0VM010.KM0VMSP6[KM0VWCNT];
    KM0VM010.KM0VMSP6[KM0VWCNT] = KM0VM010.KM0VMSP7[KM0VWCNT];
    KM0VM010.KM0VMSP7[KM0VWCNT] = KM0VM010.KM0VMSP8[KM0VWCNT];
    KM0VM010.KM0VMSP8[KM0VWCNT] = " ";
  end
end // end KM0V405

// edit cr hold ind
Function KM0V410()
   /* **************************************/
   /* * KM0V410 - edit credit hold ind*/
   /* **************************************/
  ;
   /* *** default to 'n'*/
  if (KM0VM010.KUJCRIND[KM0VWCNT] == " ")
    KM0VM010.KUJCRIND[KM0VWCNT] = "N";
  end
  ;
  ;
  if (KM0VM010.KUJCRIND[KM0VWCNT] == "N"
   || KM0VM010.KUJCRIND[KM0VWCNT] == "Y")
    KM0VW04.KUJCRIND[KM0VWCNT] = KM0VM010.KUJCRIND[KM0VWCNT];
    set KM0VM010.KUJCRIND[KM0VWCNT] initialAttributes;
    KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
  else
     /* code invalid*/
    set KM0VM010.KUJCRIND[KM0VWCNT] cursor, bold;
    converseLib.validationFailed(20); /* invalid code*/
    KM0VW01.KM0VWERR = "Y";
  end
  ;
  ;
end // end KM0V410

// edit sport activity
Function KM0V420()
   /* **************************************/
   /* * KM0V420 - edit sport activity*/
   /* **************************************/
  ;
   /* **** edit sport activity codes*/
  ;
  if (KM0VM010.KM0VMSP8[KM0VWCNT] == " ")
    if (KM0VW04.KM0VWSP8[KM0VWCNT] == " ")
       /* next sentence*/
    else
      KM0VW04.KM0VWSP8[KM0VWCNT] = KM0VM010.KM0VMSP8[KM0VWCNT];
      set KM0VM010.KM0VMSP8[KM0VWCNT] initialAttributes;
      KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
    end
  else
    if (KM0VM010.KM0VMSP8[KM0VWCNT] in XSPTBL.XSPCD)
      if (XSPTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KM0VM010.KM0VMSP8[KM0VWCNT] cursor, bold;
        converseLib.validationFailed(71); /* code is inactive*/
        KM0VW01.KM0VWERR = "Y";
      else
        KM0VW04.KM0VWSP8[KM0VWCNT] = KM0VM010.KM0VMSP8[KM0VWCNT];
        set KM0VM010.KM0VMSP8[KM0VWCNT] initialAttributes;
        KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
      end
    else
      set KM0VM010.KM0VMSP8[KM0VWCNT] cursor, bold;
      converseLib.validationFailed(17); /* invalid code*/
      KM0VW01.KM0VWERR = "Y";
    end
  end
  ;
  if (KM0VM010.KM0VMSP7[KM0VWCNT] == " ")
    if (KM0VW04.KM0VWSP7[KM0VWCNT] == " ")
       /* next sentence*/
    else
      KM0VW04.KM0VWSP7[KM0VWCNT] = KM0VM010.KM0VMSP7[KM0VWCNT];
      set KM0VM010.KM0VMSP7[KM0VWCNT] initialAttributes;
      KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
    end
  else
    if (KM0VM010.KM0VMSP7[KM0VWCNT] in XSPTBL.XSPCD)
      if (XSPTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KM0VM010.KM0VMSP7[KM0VWCNT] cursor, bold;
        converseLib.validationFailed(71); /* code is inactive*/
        KM0VW01.KM0VWERR = "Y";
      else
        KM0VW04.KM0VWSP7[KM0VWCNT] = KM0VM010.KM0VMSP7[KM0VWCNT];
        set KM0VM010.KM0VMSP7[KM0VWCNT] initialAttributes;
        KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
      end
    else
      set KM0VM010.KM0VMSP7[KM0VWCNT] cursor, bold;
      converseLib.validationFailed(17); /* invalid code*/
      KM0VW01.KM0VWERR = "Y";
    end
  end
  ;
  if (KM0VM010.KM0VMSP6[KM0VWCNT] == " ")
    if (KM0VW04.KM0VWSP6[KM0VWCNT] == " ")
       /* next sentence*/
    else
      KM0VW04.KM0VWSP6[KM0VWCNT] = KM0VM010.KM0VMSP6[KM0VWCNT];
      set KM0VM010.KM0VMSP6[KM0VWCNT] initialAttributes;
      KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
    end
  else
    if (KM0VM010.KM0VMSP6[KM0VWCNT] in XSPTBL.XSPCD)
      if (XSPTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KM0VM010.KM0VMSP6[KM0VWCNT] cursor, bold;
        converseLib.validationFailed(71); /* code is inactive*/
        KM0VW01.KM0VWERR = "Y";
      else
        KM0VW04.KM0VWSP6[KM0VWCNT] = KM0VM010.KM0VMSP6[KM0VWCNT];
        set KM0VM010.KM0VMSP6[KM0VWCNT] initialAttributes;
        KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
      end
    else
      set KM0VM010.KM0VMSP6[KM0VWCNT] cursor, bold;
      converseLib.validationFailed(17); /* invalid code*/
      KM0VW01.KM0VWERR = "Y";
    end
  end
  ;
  if (KM0VM010.KM0VMSP5[KM0VWCNT] == " ")
    if (KM0VW04.KM0VWSP5[KM0VWCNT] == " ")
       /* next sentence*/
    else
      KM0VW04.KM0VWSP5[KM0VWCNT] = KM0VM010.KM0VMSP5[KM0VWCNT];
      set KM0VM010.KM0VMSP5[KM0VWCNT] initialAttributes;
      KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
    end
  else
    if (KM0VM010.KM0VMSP5[KM0VWCNT] in XSPTBL.XSPCD)
      if (XSPTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KM0VM010.KM0VMSP5[KM0VWCNT] cursor, bold;
        converseLib.validationFailed(71); /* code is inactive*/
        KM0VW01.KM0VWERR = "Y";
      else
        KM0VW04.KM0VWSP5[KM0VWCNT] = KM0VM010.KM0VMSP5[KM0VWCNT];
        set KM0VM010.KM0VMSP5[KM0VWCNT] initialAttributes;
        KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
      end
    else
      set KM0VM010.KM0VMSP5[KM0VWCNT] cursor, bold;
      converseLib.validationFailed(17); /* invalid code*/
      KM0VW01.KM0VWERR = "Y";
    end
  end
  ;
  if (KM0VM010.KM0VMSP4[KM0VWCNT] == " ")
    if (KM0VW04.KM0VWSP4[KM0VWCNT] == " ")
       /* next sentence*/
    else
      KM0VW04.KM0VWSP4[KM0VWCNT] = KM0VM010.KM0VMSP4[KM0VWCNT];
      set KM0VM010.KM0VMSP4[KM0VWCNT] initialAttributes;
      KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
    end
  else
    if (KM0VM010.KM0VMSP4[KM0VWCNT] in XSPTBL.XSPCD)
      if (XSPTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KM0VM010.KM0VMSP4[KM0VWCNT] cursor, bold;
        converseLib.validationFailed(71); /* code is inactive*/
        KM0VW01.KM0VWERR = "Y";
      else
        KM0VW04.KM0VWSP4[KM0VWCNT] = KM0VM010.KM0VMSP4[KM0VWCNT];
        set KM0VM010.KM0VMSP4[KM0VWCNT] initialAttributes;
        KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
      end
    else
      set KM0VM010.KM0VMSP4[KM0VWCNT] cursor, bold;
      converseLib.validationFailed(17); /* invalid code*/
      KM0VW01.KM0VWERR = "Y";
    end
  end
  ;
  if (KM0VM010.KM0VMSP3[KM0VWCNT] == " ")
    if (KM0VW04.KM0VWSP3[KM0VWCNT] == " ")
       /* next sentence*/
    else
      KM0VW04.KM0VWSP3[KM0VWCNT] = KM0VM010.KM0VMSP3[KM0VWCNT];
      set KM0VM010.KM0VMSP3[KM0VWCNT] initialAttributes;
      KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
    end
  else
    if (KM0VM010.KM0VMSP3[KM0VWCNT] in XSPTBL.XSPCD)
      if (XSPTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KM0VM010.KM0VMSP3[KM0VWCNT] cursor, bold;
        converseLib.validationFailed(71); /* code is inactive*/
        KM0VW01.KM0VWERR = "Y";
      else
        KM0VW04.KM0VWSP3[KM0VWCNT] = KM0VM010.KM0VMSP3[KM0VWCNT];
        set KM0VM010.KM0VMSP3[KM0VWCNT] initialAttributes;
        KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
      end
    else
      set KM0VM010.KM0VMSP3[KM0VWCNT] cursor, bold;
      converseLib.validationFailed(17); /* invalid code*/
      KM0VW01.KM0VWERR = "Y";
    end
  end
  ;
  if (KM0VM010.KM0VMSP2[KM0VWCNT] == " ")
    if (KM0VW04.KM0VWSP2[KM0VWCNT] == " ")
       /* next sentence*/
    else
      KM0VW04.KM0VWSP2[KM0VWCNT] = KM0VM010.KM0VMSP2[KM0VWCNT];
      set KM0VM010.KM0VMSP2[KM0VWCNT] initialAttributes;
      KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
    end
  else
    if (KM0VM010.KM0VMSP2[KM0VWCNT] in XSPTBL.XSPCD)
      if (XSPTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KM0VM010.KM0VMSP2[KM0VWCNT] cursor, bold;
        converseLib.validationFailed(71); /* code is inactive*/
        KM0VW01.KM0VWERR = "Y";
      else
        KM0VW04.KM0VWSP2[KM0VWCNT] = KM0VM010.KM0VMSP2[KM0VWCNT];
        set KM0VM010.KM0VMSP2[KM0VWCNT] initialAttributes;
        KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
      end
    else
      set KM0VM010.KM0VMSP2[KM0VWCNT] cursor, bold;
      converseLib.validationFailed(17); /* invalid code*/
      KM0VW01.KM0VWERR = "Y";
    end
  end
  ;
  if (KM0VM010.KM0VMSP1[KM0VWCNT] == " ")
    if (KM0VW04.KM0VWSP1[KM0VWCNT] == " ")
       /* next sentence*/
    else
      KM0VW04.KM0VWSP1[KM0VWCNT] = KM0VM010.KM0VMSP1[KM0VWCNT];
      set KM0VM010.KM0VMSP1[KM0VWCNT] initialAttributes;
      KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
    end
  else
    if (KM0VM010.KM0VMSP1[KM0VWCNT] in XSPTBL.XSPCD)
      if (XSPTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KM0VM010.KM0VMSP1[KM0VWCNT] cursor, bold;
        converseLib.validationFailed(71); /* code is inactive*/
        KM0VW01.KM0VWERR = "Y";
      else
        KM0VW04.KM0VWSP1[KM0VWCNT] = KM0VM010.KM0VMSP1[KM0VWCNT];
        set KM0VM010.KM0VMSP1[KM0VWCNT] initialAttributes;
        KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
      end
    else
      set KM0VM010.KM0VMSP1[KM0VWCNT] cursor, bold;
      converseLib.validationFailed(17); /* invalid code*/
      KM0VW01.KM0VWERR = "Y";
    end
  end
  ;
  ;
end // end KM0V420

// edit gender age codes
Function KM0V430()
   /* **************************************/
   /* * KM0V430 - edit BASE gender age codes*/
   /* **************************************/
  ;
   /* *************************************************************/
  ;
    /* Maintenance History:*/
    /* 10-11-91 CHELLM Remaned XGACD to XGBCD*/
  ;
  ;
   /* *************************************************************/
  ;
   /* **** edit gender age codes*/
  ;
  if (KM0VM010.KM0VMGA4[KM0VWCNT] == " ")
    if (KM0VW04.KM0VWGA4[KM0VWCNT] == " ")
       /* next sentence*/
    else
      KM0VW04.KM0VWGA4[KM0VWCNT] = KM0VM010.KM0VMGA4[KM0VWCNT];
      set KM0VM010.KM0VMGA4[KM0VWCNT] initialAttributes;
      KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
    end
  else
    if (KM0VM010.KM0VMGA4[KM0VWCNT] in XGBTBL.XGBCD)
      if (XGBTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KM0VM010.KM0VMGA4[KM0VWCNT] cursor, bold;
        converseLib.validationFailed(71); /* code is inactive*/
        KM0VW01.KM0VWERR = "Y";
      else
        KM0VW04.KM0VWGA4[KM0VWCNT] = KM0VM010.KM0VMGA4[KM0VWCNT];
        set KM0VM010.KM0VMGA4[KM0VWCNT] initialAttributes;
        KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
      end
    else
      set KM0VM010.KM0VMGA4[KM0VWCNT] cursor, bold;
      converseLib.validationFailed(17); /* invalid code*/
      KM0VW01.KM0VWERR = "Y";
    end
  end
  ;
  if (KM0VM010.KM0VMGA3[KM0VWCNT] == " ")
    if (KM0VW04.KM0VWGA3[KM0VWCNT] == " ")
       /* next sentence*/
    else
      KM0VW04.KM0VWGA3[KM0VWCNT] = KM0VM010.KM0VMGA3[KM0VWCNT];
      set KM0VM010.KM0VMGA3[KM0VWCNT] initialAttributes;
      KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
    end
  else
    if (KM0VM010.KM0VMGA3[KM0VWCNT] in XGBTBL.XGBCD)
      if (XGBTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KM0VM010.KM0VMGA3[KM0VWCNT] cursor, bold;
        converseLib.validationFailed(71); /* code is inactive*/
        KM0VW01.KM0VWERR = "Y";
      else
        KM0VW04.KM0VWGA3[KM0VWCNT] = KM0VM010.KM0VMGA3[KM0VWCNT];
        set KM0VM010.KM0VMGA3[KM0VWCNT] initialAttributes;
        KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
      end
    else
      set KM0VM010.KM0VMGA3[KM0VWCNT] cursor, bold;
      converseLib.validationFailed(17); /* invalid code*/
      KM0VW01.KM0VWERR = "Y";
    end
  end
  ;
  if (KM0VM010.KM0VMGA2[KM0VWCNT] == " ")
    if (KM0VW04.KM0VWGA2[KM0VWCNT] == " ")
       /* next sentence*/
    else
      KM0VW04.KM0VWGA2[KM0VWCNT] = KM0VM010.KM0VMGA2[KM0VWCNT];
      set KM0VM010.KM0VMGA2[KM0VWCNT] initialAttributes;
      KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
    end
  else
    if (KM0VM010.KM0VMGA2[KM0VWCNT] in XGBTBL.XGBCD)
      if (XGBTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KM0VM010.KM0VMGA2[KM0VWCNT] cursor, bold;
        converseLib.validationFailed(71); /* code is inactive*/
        KM0VW01.KM0VWERR = "Y";
      else
        KM0VW04.KM0VWGA2[KM0VWCNT] = KM0VM010.KM0VMGA2[KM0VWCNT];
        set KM0VM010.KM0VMGA2[KM0VWCNT] initialAttributes;
        KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
      end
    else
      set KM0VM010.KM0VMGA2[KM0VWCNT] cursor, bold;
      converseLib.validationFailed(17); /* invalid code*/
      KM0VW01.KM0VWERR = "Y";
    end
  end
  ;
  if (KM0VM010.KM0VMGA1[KM0VWCNT] == " ")
    if (KM0VW04.KM0VWGA1[KM0VWCNT] == " ")
       /* next sentence*/
    else
      KM0VW04.KM0VWGA1[KM0VWCNT] = KM0VM010.KM0VMGA1[KM0VWCNT];
      set KM0VM010.KM0VMGA1[KM0VWCNT] initialAttributes;
      KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
    end
  else
    if (KM0VM010.KM0VMGA1[KM0VWCNT] in XGBTBL.XGBCD)
      if (XGBTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KM0VM010.KM0VMGA1[KM0VWCNT] cursor, bold;
        converseLib.validationFailed(71); /* code is inactive*/
        KM0VW01.KM0VWERR = "Y";
      else
        KM0VW04.KM0VWGA1[KM0VWCNT] = KM0VM010.KM0VMGA1[KM0VWCNT];
        set KM0VM010.KM0VMGA1[KM0VWCNT] initialAttributes;
        KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
      end
    else
      set KM0VM010.KM0VMGA1[KM0VWCNT] cursor, bold;
      converseLib.validationFailed(17); /* invalid code*/
      KM0VW01.KM0VWERR = "Y";
    end
  end
  ;
  ;
end // end KM0V430

// edit department status
Function KM0V435()
   /* **************************************/
   /* * KM0V435 - edit department status*/
   /* **************************************/
  ;
   /* *** default to 'a'*/
  if (KM0VM010.XXXSTAT[KM0VWCNT] == " ")
    KM0VM010.XXXSTAT[KM0VWCNT] = "A";
  end
  ;
  ;
  if (KM0VM010.XXXSTAT[KM0VWCNT] == "A"
   || KM0VM010.XXXSTAT[KM0VWCNT] == "I")
    ;
    if (KM0VM010.XXXSTAT[KM0VWCNT] == "I")
      KM0V438(); /* verify all cust are inactive*/
      if (KM0VW01.KM0VWACT == "N")
        KM0VW04.XXXSTAT[KM0VWCNT] = KM0VM010.XXXSTAT[KM0VWCNT];
        set KM0VM010.XXXSTAT[KM0VWCNT] initialAttributes;
        KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
      else /* dept is used elsewhere*/
        set KM0VM010.XXXSTAT[KM0VWCNT] cursor, bold;
        converseLib.validationFailed(383); /* invalid code*/
        KM0VW01.KM0VWERR = "Y";
      end
    else /* active is valid*/
      KM0VW04.XXXSTAT[KM0VWCNT] = KM0VM010.XXXSTAT[KM0VWCNT];
      set KM0VM010.XXXSTAT[KM0VWCNT] initialAttributes;
      KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
    end
  else
     /* code invalid*/
    set KM0VM010.XXXSTAT[KM0VWCNT] cursor, bold;
    converseLib.validationFailed(162); /* invalid code*/
    KM0VW01.KM0VWERR = "Y";
  end
  ;
  ;
end // end KM0V435

// check for active cust
Function KM0V438()
   /* ************************************************/
   /* * KM0V438 - check for active cust level*/
   /* ************************************************/
  ;
  KM0VW01.KM0VWACT = "N";
  KM0VW01.KM0VWCUS = "N";
  ;
  KUNREC.KUCCOID = KUCREC.KUCCOID;
  KUNREC.KUMSTRID = -1;
  KM0VW01.KM0VWXNU = 0;
  KM0VW01.KM0VWXCH = KM0VM010.KM0VMXNX[KM0VWCNT];
  KUNREC.XNXCD = KM0VW01.KM0VWXNU;
  KUNREC.XGPCD = "**";
  ;
  call "IO0280" ("SS", SQLCA, KUNREC) {isNoRefresh = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUST001";
    TA1REC.TA1MAP = " ";
    KM0VW01.KM0VWKC = KUCREC.KUCCOID;
    KM0VW01.KM0VWKD = KUNREC.XNXCD;
    TA1REC.TA1TBLKE = KM0VW01.KM0VWKEY;
    TA1REC.TA1PGMNM = "KM0V438";
    TA1REC.TA1LOC = "OPEN CURSOR CUST001";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4(); /* return to main menu*/
  end
  ;
  ;
  call "IO0280" ("SN", SQLCA, KUNREC) {isNoRefresh = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      call "IO0280" ("CS", SQLCA, KUNREC) {isNoRefresh = yes}; /* close cursor*/
      KM0VW01.KM0VWACT = "N";
      KM0VW01.KM0VWCUS = "Y";
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUST001";
      TA1REC.TA1MAP = " ";
      KM0VW01.KM0VWKC = KUCREC.KUCCOID;
      KM0VW01.KM0VWKD = KUNREC.XNXCD;
      TA1REC.TA1TBLKE = KM0VW01.KM0VWKEY;
      TA1REC.TA1PGMNM = "KM0V438";
      TA1REC.TA1LOC = "READ NEXT CUST001";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4(); /* return to main menu*/
    end
  end
  ;
  ;
  while (KM0VW01.KM0VWCUS == "N") /* while not end of cust*/
    ;
    if (KUNREC.XXXSTAT == "A")
      KM0VW01.KM0VWACT = "Y";
    end
    ;
    /* --- read next vcust row*/
    call "IO0280" ("SN", SQLCA, KUNREC) {isNoRefresh = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        call "IO0280" ("CS", SQLCA, KUNREC) {isNoRefresh = yes}; /* close cursor*/
        KM0VW01.KM0VWCUS = "Y";
      else
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1DBASE = "DCUST";
        TA1REC.TA1TBLVU = "VCUST001";
        TA1REC.TA1MAP = " ";
        KM0VW01.KM0VWKC = KUCREC.KUCCOID;
        KM0VW01.KM0VWKD = KUNREC.XNXCD;
        TA1REC.TA1TBLKE = KM0VW01.KM0VWKEY;
        TA1REC.TA1PGMNM = "KM0V438";
        TA1REC.TA1LOC = "READ NEXT CUST001";
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
        XSPF4(); /* return to main menu*/
      end
    end
    ;
  end /* while loop*/
  ;
  ;
end // end KM0V438

// edit department self name
Function KM0V440()
   /* **************************************/
   /* * KM0V440 - edit department self name*/
   /* **************************************/
  ;
   /* **** edit department self name*/
  ;
  if (KM0VM010.KM0VMXNX[KM0VWCNT] == "00")
    KM0VW04.KUJSLFNM[KM0VWCNT] = KM0VM010.KUJSLFNM[KM0VWCNT];
    set KM0VM010.KUJSLFNM[KM0VWCNT] initialAttributes;
    KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
  else
    if (KM0VM010.KUJSLFNM[KM0VWCNT] > " ")
      KM0VW04.KUJSLFNM[KM0VWCNT] = KM0VM010.KUJSLFNM[KM0VWCNT];
      set KM0VM010.KUJSLFNM[KM0VWCNT] initialAttributes;
      KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
    else
      set KM0VM010.KUJSLFNM[KM0VWCNT] cursor, bold;
      converseLib.validationFailed(05); /* required field is missing*/
      KM0VW01.KM0VWERR = "Y";
    end
  end
  ;
  ;
end // end KM0V440

// edit department self id
Function KM0V450()
   /* **************************************/
   /* * KM0V450 - edit department self id*/
   /* **************************************/
  ;
   /* **** edit department self id*/
  ;
  if (KM0VM010.KM0VMXNX[KM0VWCNT] == "00")
    KM0VW04.KUJSLFID[KM0VWCNT] = KM0VM010.KUJSLFID[KM0VWCNT];
    set KM0VM010.KUJSLFID[KM0VWCNT] initialAttributes;
    KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
  else
    if (KM0VM010.KUJSLFID[KM0VWCNT] > " ")
      KM0VW04.KUJSLFID[KM0VWCNT] = KM0VM010.KUJSLFID[KM0VWCNT];
      set KM0VM010.KUJSLFID[KM0VWCNT] initialAttributes;
      KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
    else
      set KM0VM010.KUJSLFID[KM0VWCNT] cursor, bold;
      converseLib.validationFailed(05); /* required field is missing*/
      KM0VW01.KM0VWERR = "Y";
    end
  end
  ;
  ;
end // end KM0V450

// edit new department code
Function KM0V460()
   /* **************************************/
   /* * KM0V460 - edit new department code*/
   /* **************************************/
  ;
  KM0VW01.KM0VWXNU = 0;
  KM0VW01.KM0VWXCH = KM0VM010.KM0VMXNX[KM0VWCNT];
  if (KM0VW01.KM0VWXC1 == " ")
    KM0VW01.KM0VWXC1 = "0";
  end
  if (KM0VW01.KM0VWXC2 == " ")
    KM0VW01.KM0VWXC2 = "0";
  end
  KM0VM010.KM0VMXNX[KM0VWCNT] = KM0VW01.KM0VWXCH;
  ;
  if (KM0VW01.KM0VWXCH >= "00"
   && KM0VW01.KM0VWXCH <= "99")
    if (KM0VW01.KM0VWXNU in XNXTBL.XNXCD)
      if (XNXTBL.XXXSTAT[sysVar.arrayIndex] == "I")
        set KM0VM010.KM0VMXNX[KM0VWCNT] cursor, bold;
        converseLib.validationFailed(71); /* code is inactive*/
        KM0VW01.KM0VWERR = "Y";
      else
        KM0VW04.XNXABRV[KM0VWCNT] = XNXTBL.XNXABRV[sysVar.arrayIndex];
        KM0VM010.XNXABRV[KM0VWCNT] = XNXTBL.XNXABRV[sysVar.arrayIndex];
        KM0V465(); /* check for duplicate depts*/
      end
    else
      set KM0VM010.KM0VMXNX[KM0VWCNT] cursor, bold;
      converseLib.validationFailed(17); /* invalid code*/
      KM0VW01.KM0VWERR = "Y";
    end
  else
    set KM0VM010.KM0VMXNX[KM0VWCNT] cursor, bold;
    converseLib.validationFailed(17); /* invalid code*/
    KM0VW01.KM0VWERR = "Y";
  end
  ;
  ;
end // end KM0V460

// edit for duplicate depts
Function KM0V465()
   /* ********************************************/
   /* * KM0V465 - TEST duplicate department*/
   /* ********************************************/
  ;
   /* ****** save the new image of temp storage*/
   /* ****** so you don't lose the changes already made*/
  KM0VW01.KM0VWSAV = KM0VW04.KM0VW4GR;
  ;
   /* loop thru temp storage for duplicate dept*/
  ;
  KM0VW01.KM0VWTIX = 1;
  while (KM0VW01.KM0VWTIX <= KM0VW01.KM0VWPGT
   && KM0VW01.KM0VWERR == "N")
    KM0V290(); /* read store temp storage*/
    KM0VW01.KM0VWCTR = 1;
    while (KM0VW01.KM0VWCTR < KM0VW01.KM0VWMAX
     && KM0VW01.KM0VWERR == "N")
      if (KM0VW04.KM0VWXNX[KM0VWCTR] == KM0VM010.KM0VMXNX[KM0VWCNT])
        set KM0VM010.KM0VMXNX[KM0VWCNT] cursor, bold;
        converseLib.validationFailed(108); /* duplicate codes*/
        KM0VW01.KM0VWERR = "Y";
      else
         /* next sentence*/
      end
      KM0VW01.KM0VWCTR = KM0VW01.KM0VWCTR + 1;
    end
    KM0VW01.KM0VWTIX = KM0VW01.KM0VWTIX + 1;
  end
  ;
   /* ****** replace the new image of temp storage*/
   /* ****** so you don't lose the changes already made*/
  KM0VW04.KM0VW4GR = KM0VW01.KM0VWSAV;
  ;
   /* loop thru map for duplicate dept*/
  ;
  KM0VW01.KM0VWCTR = 1;
  while (KM0VW01.KM0VWCTR < KM0VW01.KM0VWMAX
   && KM0VW01.KM0VWERR == "N")
    if (KM0VW01.KM0VWCNT == KM0VW01.KM0VWCTR) /* same row*/
       /* next sentence*/
    else
      if (KM0VM010.KM0VMXNX[KM0VWCTR] == KM0VM010.KM0VMXNX[KM0VWCNT])
        set KM0VM010.KM0VMXNX[KM0VWCTR] cursor, bold;
        converseLib.validationFailed(108); /* duplicate codes*/
        KM0VW01.KM0VWERR = "Y";
      end
    end
    KM0VW01.KM0VWCTR = KM0VW01.KM0VWCTR + 1;
  end
  ;
  if (converseVar.validationMsgNum == 108
   || KM0VW01.KM0VWERR == "Y")
     /* next sentence*/
  else
    set KM0VM010.KM0VMXNX[KM0VWCNT] initialAttributes;
    KM0VW04.KM0VWXNX[KM0VWCNT] = KM0VW01.KM0VWXCH;
    KM0VW01.KM0VWCHG = "Y"; /* to dept change*/
  end
  ;
end // end KM0V465

// rewrite dept temp storage
Function KM0V470()
   /* *********************************************/
   /* * KG0C470 - REWRITE STORES TO TEMP STORAGE **/
   /* *********************************************/
  ;
  set KM0VW02 empty;
  KM0VW02.KM0VW2RC = 0; /* return code*/
  KM0VW02.KM0VW2FC = "U";
  KM0VW02.KM0VW2AP = "KW04";
  KM0VW02.KM0VW2CT = KM0VW01.KM0VWDIX;
  KM0VW04.KM0VW4LG = KM0VW01.KM0VWSIZ;
  call "TA0050" (KM0VW04, KM0VW02) {isNoRefresh = yes, isExternal = yes};
  if (KM0VW02.KM0VW2RC != 0)
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    KM0VW01.KM0VWEND = "Y";
    KM0VW01.KM0VWERR = "Y";
    converseLib.validationFailed(228);
  end
  ;
end // end KM0V470

// test all depts for change
Function KM0V490()
   /* ********************************************/
   /* * KM0V490 - TEST FOR DATA CHANGE*/
   /* *   read through temp storage to see if any*/
   /* *   updates are pending.*/
   /* ********************************************/
  ;
   /* *************************************************************/
  ;
    /* Maintenance History:*/
    /* 10-11-91 CHELLM Remaned XGACD to XGBCD.*/
  ;
   /* *************************************************************/
  ;
  KM0VW01.KM0VWDIX = 1;
  KM0VW01.KM0VWPND = "N";
  while (KM0VW01.KM0VWDIX <= KM0VW01.KM0VWPGT
   && KM0VW01.KM0VWPND == "N")
    KM0V290(); /* read store temp storage*/
    KM0VW01.KM0VWCNT = 1;
    while (KM0VW01.KM0VWCNT < KM0VW01.KM0VWMAX
     && KM0VW01.KM0VWPND == "N")
      KUJREC.KUJGRP = KM0VW04.KUJGRP[KM0VWCNT];
      KM0VW01.KM0VWXNU = KUJREC.XNXCD;
      if (KM0VW04.KM0VWXNX[KM0VWCNT] > " ")
        if (KM0VW04.KM0VWXNX[KM0VWCNT] == KM0VW01.KM0VWXCH
         && KM0VW04.KUJSLFID[KM0VWCNT] == KUJREC.KUJSLFID
         && KM0VW04.KUJSLFNM[KM0VWCNT] == KUJREC.KUJSLFNM
         && KM0VW04.KUJCRIND[KM0VWCNT] == KUJREC.KUJCRIND
         && KM0VW04.XXXSTAT[KM0VWCNT] == KUJREC.XXXSTAT
         && KM0VW04.KM0VWGA1[KM0VWCNT] == KUJREC.XGBCD[1]
         && KM0VW04.KM0VWGA2[KM0VWCNT] == KUJREC.XGBCD[2]
         && KM0VW04.KM0VWGA3[KM0VWCNT] == KUJREC.XGBCD[3]
         && KM0VW04.KM0VWGA4[KM0VWCNT] == KUJREC.XGBCD[4]
         && KM0VW04.KM0VWSP1[KM0VWCNT] == KUJREC.KUJXSPCD[1]
         && KM0VW04.KM0VWSP2[KM0VWCNT] == KUJREC.KUJXSPCD[2]
         && KM0VW04.KM0VWSP3[KM0VWCNT] == KUJREC.KUJXSPCD[3]
         && KM0VW04.KM0VWSP4[KM0VWCNT] == KUJREC.KUJXSPCD[4]
         && KM0VW04.KM0VWSP5[KM0VWCNT] == KUJREC.KUJXSPCD[5]
         && KM0VW04.KM0VWSP6[KM0VWCNT] == KUJREC.KUJXSPCD[6]
         && KM0VW04.KM0VWSP7[KM0VWCNT] == KUJREC.KUJXSPCD[7]
         && KM0VW04.KM0VWSP8[KM0VWCNT] == KUJREC.KUJXSPCD[8])
          /* next sentence*/
        else
          KM0VW01.KM0VWPND = "Y";
          KM0VW01.KM0VWXXX = KM0VW01.KM0VWDIX;
        end
      end /* of no dept*/
      KM0VW01.KM0VWCNT = KM0VW01.KM0VWCNT + 1;
    end
    KM0VW01.KM0VWDIX = KM0VW01.KM0VWDIX + 1;
  end
  ;
  if (KM0VW01.KM0VWPGT > 0)
    KM0VW01.KM0VWDIX = KM0VW01.KM0VWPGC; /* get current page#*/
    KM0V290(); /* return current page*/
  end
  ;
end // end KM0V490

// test company changing
Function KM0V500()
   /* **********************************/
   /* * KM0V500 - EDIT COMPANY CHANGES*/
   /* **********************************/
  ;
  if (KM0VM010.KUCCOID != KM0VW01.KM0VWCO) /* companies changed*/
    if (KM0VW01.KM0VWPND == "Y") /* updates are pending*/
      converseLib.validationFailed(121); /* "updates not completed" msg*/
      KM0VW01.KM0VWERR = "Y";
      set KM0VM010.KUCCOID cursor, bold;
      KM0VM010.KUCCOID = KM0VW01.KM0VWCO;
    else
      KM0VW01.KM0VWCO = KM0VM010.KUCCOID;
      KM0V200(); /* process new companies*/
    end
  end
  ;
end // end KM0V500

// cursor > first dept change
Function KM0V550()
   /* *********************************************************/
   /* *  KM0V550 - SCROLL SCREEN TO ERROR*/
   /* *    load screen from 1st changed departement*/
   /* *********************************************************/
  ;
  if (KM0VW01.KM0VWXXX != KM0VW01.KM0VWDIX)
    KM0VW01.KM0VWPGC = KM0VW01.KM0VWXXX;
    KM0VM010.KM0VMPG1 = KM0VW01.KM0VWPGC;
    KM0VW01.KM0VWDIX = KM0VW01.KM0VWXXX;
    KM0V270(); /* move dept to screen*/
  end
  ;
   /* **************************************/
   /* *  set cursor on first changed dept*/
   /* **************************************/
  ;
  KM0VW01.KM0VWCNT = 1;
  ;
  while (KM0VW01.KM0VWCNT < KM0VW01.KM0VWSIZ)
    /* IF KM0VW04.KM0VWXNX(KM0VWCNT) NE KM0VW04.KM0VWXNX(KM0VWCNT);*/
       /* SET KM0VM010.KM0VWXNX(KM0VWCNT) CURSOR,BRIGHT;*/
       /* MOVE 04 TO KM0VW01.KM0VWCNT;*/
     /* END ;*/
    KM0VW01.KM0VWCNT = KM0VW01.KM0VWCNT + 1;
  end
end // end KM0V550

// process department changes
Function KM0V600()
   /* ********************************************/
   /* * KM0V600 - PROCESS DEPARTMENT CHANGES*/
   /* ********************************************/
  ;
  KM0VW01.KM0VWDIX = 1;
  while (KM0VW01.KM0VWDIX <= KM0VW01.KM0VWPGT)
    KM0V290(); /* read store temp storage*/
    KM0VW01.KM0VWCNT = 1;
    KM0VW01.KM0VWPND = "N";
    while (KM0VW01.KM0VWCNT < KM0VW01.KM0VWMAX)
      if (KM0VW04.KM0VWXNX[KM0VWCNT] > " ")
        KM0V610(); /* test for changes & update*/
      end
      KM0VW01.KM0VWCNT = KM0VW01.KM0VWCNT + 1;
    end
    if (KM0VW01.KM0VWPND == "Y") /* temp page changed*/
      KM0V470(); /* rewrite temp page*/
    end
    KM0VW01.KM0VWDIX = KM0VW01.KM0VWDIX + 1;
  end
  ;
  KM0V200(); /* rebuild from the database*/
  converseLib.validationFailed(279); /* "upd completed" msg*/
  ;
end // end KM0V600

// test for chgs and update dept
Function KM0V610()
   /* ********************************************/
   /* * KM0V610 - Test for Changes and update*/
   /* ********************************************/
  ;
   /* *************************************************************/
  ;
    /* Maintenance History:*/
    /* 10-11-91 CHELLM Remaned XGACD to XGBCD.*/
  ;
   /* *************************************************************/
  ;
  if (KM0VW04.KUJGRP[KM0VWCNT] == " ") /* no before image*/
    KM0V620(); /* insert department rec*/
  else
    ;
    KUJREC.KUJGRP = KM0VW04.KUJGRP[KM0VWCNT];
    KM0VW01.KM0VWXNU = KUJREC.XNXCD;
    if (KM0VW04.KM0VWXNX[KM0VWCNT] == KM0VW01.KM0VWXCH
     && KM0VW04.KUJSLFID[KM0VWCNT] == KUJREC.KUJSLFID
     && KM0VW04.KUJSLFNM[KM0VWCNT] == KUJREC.KUJSLFNM
     && KM0VW04.KUJCRIND[KM0VWCNT] == KUJREC.KUJCRIND
     && KM0VW04.XXXSTAT[KM0VWCNT] == KUJREC.XXXSTAT
     && KM0VW04.KM0VWGA1[KM0VWCNT] == KUJREC.XGBCD[1]
     && KM0VW04.KM0VWGA2[KM0VWCNT] == KUJREC.XGBCD[2]
     && KM0VW04.KM0VWGA3[KM0VWCNT] == KUJREC.XGBCD[3]
     && KM0VW04.KM0VWGA4[KM0VWCNT] == KUJREC.XGBCD[4]
     && KM0VW04.KM0VWSP1[KM0VWCNT] == KUJREC.KUJXSPCD[1]
     && KM0VW04.KM0VWSP2[KM0VWCNT] == KUJREC.KUJXSPCD[2]
     && KM0VW04.KM0VWSP3[KM0VWCNT] == KUJREC.KUJXSPCD[3]
     && KM0VW04.KM0VWSP4[KM0VWCNT] == KUJREC.KUJXSPCD[4]
     && KM0VW04.KM0VWSP5[KM0VWCNT] == KUJREC.KUJXSPCD[5]
     && KM0VW04.KM0VWSP6[KM0VWCNT] == KUJREC.KUJXSPCD[6]
     && KM0VW04.KM0VWSP7[KM0VWCNT] == KUJREC.KUJXSPCD[7]
     && KM0VW04.KM0VWSP8[KM0VWCNT] == KUJREC.KUJXSPCD[8])
       /* next sentence*/
    else
      KM0V630(); /* update department rec*/
    end
  end
  ;
  ;
end // end KM0V610

// add department record
Function KM0V620()
   /* ********************************************/
   /* * KM0V620 - INSERT TO CONVERSION DATABASE*/
   /* ********************************************/
  ;
  KUJREC.KUCCOID = KM0VW01.KM0VWCO;
  KM0VW01.KM0VWXCH = KM0VW04.KM0VWXNX[KM0VWCNT];
  KUJREC.XNXCD = KM0VW01.KM0VWXNU;
   /* move the rest of the fields to kujrec*/
  KM0V623();
  ;
  XX0XS01();
  KUJREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUJREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  call "IO0290" ("A ", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0V620";
    TA1REC.TA1LOC = "INSERT VDEPT001";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VDEPT001";
    KM0VW01.KM0VWKC = KUJREC.KUCCOID;
    KM0VW01.KM0VWKD = KUJREC.XNXCD;
    TA1REC.TA1TBLKE = KM0VW01.KM0VWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4(); /* return to main menu*/
  end
  ;
  ;
   /* ****************************/
   /* format add audit*/
   /* ****************************/
  ;
  set KUZREC empty;
  KUZREC.KUZTYPE = "A"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = " "; /* blank-add, b-before, a-after*/
  KUZREC.XXXTBLNM = "VCMPNY01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUJREC.KUCCOID;
  KUZREC.XNXCD = KUJREC.XNXCD;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUJREC.KUJGRP;
  ;
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM0V   ";
    TA1REC.TA1LOCAT[1] = "KM0V620  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VDEPT001 ";
    TA1REC.TA1MAP = "KM0VM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VDEPT001";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  ;
  KM0V625(); /* write audit trail after image*/
  ;
end // end KM0V620

// move temp storage to dept
Function KM0V623()
   /* ********************************************/
   /* * KM0V623 - Move temp storage to dept*/
   /* ********************************************/
  ;
   /* *************************************************************/
  ;
    /* Maintenance History:*/
    /* 10-11-91 CHELLM Remaned XGACD to XGBCD.*/
  ;
   /* *************************************************************/
  ;
  KUJREC.KUJSLFID = KM0VW04.KUJSLFID[KM0VWCNT];
  KUJREC.KUJSLFNM = KM0VW04.KUJSLFNM[KM0VWCNT];
  KUJREC.KUJCRIND = KM0VW04.KUJCRIND[KM0VWCNT];
  KUJREC.XXXSTAT = KM0VW04.XXXSTAT[KM0VWCNT];
  KUJREC.XGBCD[1] = KM0VW04.KM0VWGA1[KM0VWCNT];
  KUJREC.XGBCD[2] = KM0VW04.KM0VWGA2[KM0VWCNT];
  KUJREC.XGBCD[3] = KM0VW04.KM0VWGA3[KM0VWCNT];
  KUJREC.XGBCD[4] = KM0VW04.KM0VWGA4[KM0VWCNT];
  KUJREC.KUJXSPCD[1] = KM0VW04.KM0VWSP1[KM0VWCNT];
  KUJREC.KUJXSPCD[2] = KM0VW04.KM0VWSP2[KM0VWCNT];
  KUJREC.KUJXSPCD[3] = KM0VW04.KM0VWSP3[KM0VWCNT];
  KUJREC.KUJXSPCD[4] = KM0VW04.KM0VWSP4[KM0VWCNT];
  KUJREC.KUJXSPCD[5] = KM0VW04.KM0VWSP5[KM0VWCNT];
  KUJREC.KUJXSPCD[6] = KM0VW04.KM0VWSP6[KM0VWCNT];
  KUJREC.KUJXSPCD[7] = KM0VW04.KM0VWSP7[KM0VWCNT];
  KUJREC.KUJXSPCD[8] = KM0VW04.KM0VWSP8[KM0VWCNT];
  ;
  ;
end // end KM0V623

// write customer audit image
Function KM0V625()
   /* ********************************************/
   /* * KM0V625 - Write customer audit image*/
   /* ********************************************/
  ;
  ;
  set SQLCA empty;
  ;
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUAUD01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1PGMNM = "KM0V625";
    TA1REC.TA1LOC = "ADD DB2 DCUST.VCUAUD01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4(); /* return to main menu*/
  end
  ;
  ;
end // end KM0V625

// update department record
Function KM0V630()
   /* ********************************************/
   /* * KM0V630 - UPDATE DEPARTMENT DATABASE*/
   /* ********************************************/
  ;
  KUJREC.KUCCOID = KM0VW01.KM0VWCO;
  KM0VW01.KM0VWXCH = KM0VW04.KM0VWXNX[KM0VWCNT];
  KUJREC.XNXCD = KM0VW01.KM0VWXNU;
   /* move the rest of the fields to kujrec*/
  KM0V623();
  ;
  XX0XS01();
  KUJREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUJREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  ;
   /* ****************************/
   /* prepare before look audit*/
   /* ****************************/
  ;
  set KUZREC empty;
  KUZREC.KUZTYPE = "C"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = "B"; /* blank-add, b-before, a-after*/
  KUZREC.XXXTBLNM = "VDEPT001";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUJREC.KUCCOID;
  KUZREC.XNXCD = KUJREC.XNXCD;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KM0VW04.KUJGRP[KM0VWCNT];
  ;
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM0V   ";
    TA1REC.TA1LOCAT[1] = "KM0V630  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VDEPT001 ";
    TA1REC.TA1MAP = "KM0VM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VDEPTY01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  KM0V625(); /* write audit trail add image*/
  ;
  ;
  ;
  call "IO0290" ("U ", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0V630";
    TA1REC.TA1LOC = "UPDATE VDEPT001";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VDEPT001";
    KM0VW01.KM0VWKC = KUJREC.KUCCOID;
    KM0VW01.KM0VWKD = KUJREC.XNXCD;
    TA1REC.TA1TBLKE = KM0VW01.KM0VWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4(); /* return to main menu*/
  end
  ;
  ;
   /* ****************************/
   /* format after look audit*/
   /* ****************************/
  ;
  set KUZREC empty;
  KUZREC.KUZTYPE = "C"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = "A"; /* blank-add, b-before, a-after*/
  KUZREC.XXXTBLNM = "VDEPT001";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUJREC.KUCCOID;
  KUZREC.XNXCD = KUJREC.XNXCD;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUJREC.KUJGRP;
  ;
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM0V   ";
    TA1REC.TA1LOCAT[1] = "KM0V630  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VDEPT001 ";
    TA1REC.TA1MAP = "KM0VM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VDEPTY01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  ;
  KM0V625(); /* write audit trail after image*/
  ;
  ;
end // end KM0V630

// page up for depts
Function KM0V700()
   /* *******************************/
   /* * KM0V700 - PAGE UP FOR STORES*/
   /* *******************************/
  ;
  if (KM0VW01.KM0VWDIX > 1)
    KM0VW01.KM0VWDIX = KM0VW01.KM0VWDIX - 1;
    KM0VW01.KM0VWPGC = KM0VW01.KM0VWPGC - 1;
    KM0VM010.KM0VMPG1 = KM0VW01.KM0VWPGC;
    KM0V270(); /* move stores to screen*/
  else
    converseLib.validationFailed(208); /* at begining of data*/
  end
  ;
  ;
end // end KM0V700

// page down for depts
Function KM0V710()
   /* **********************/
   /* KM0V710 - page down*/
   /* **********************/
  ;
  if (KM0VW01.KM0VWDIX >= KM0VW01.KM0VWPGT) /* if at end of depts*/
    if (KM0VW01.KM0VWUPD == "Y" /* users might need*/
     && COMMAREA.CACLVL[1] == "Y") /* empty screen for adds*/
      KM0V715();
    else
      converseLib.validationFailed(206);
    end
  else
    KM0VW01.KM0VWDIX = KM0VW01.KM0VWDIX + 1;
    KM0VW01.KM0VWPGC = KM0VW01.KM0VWPGC + 1; /* page counter*/
    KM0VM010.KM0VMPG1 = KM0VW01.KM0VWPGC;
    KM0V270(); /* move depts to screen*/
  end
  ;
  ;
end // end KM0V710

// create empty screen
Function KM0V715()
   /* *******************************************/
   /* KM0V715 - give users an empty screen*/
   /* *******************************************/
  ;
  if (KM0VW04.KM0VWXNX[1] > " " /* if all departments*/
   && KM0VW04.KM0VWXNX[2] > " " /* are filled*/
   && KM0VW04.KM0VWXNX[3] > " " 
   && KM0VW04.KM0VWXNX[4] > " " 
   && KM0VW04.KM0VWXNX[5] > " ")
    set KM0VW04 empty;
    KM0VW01.KM0VWPGT = KM0VW01.KM0VWPGT + 1; /* page counter*/
    KM0VW01.KM0VWPGC = KM0VW01.KM0VWPGC + 1;
    KM0VM010.KM0VMPG2 = KM0VW01.KM0VWPGT;
    KM0VM010.KM0VMPG1 = KM0VW01.KM0VWPGC;
    KM0VWFND = "Y"; /* set found to yes*/
    KM0V240(); /* create empty temp storage*/
    KM0V270(); /* move empty depts to screen*/
  else
    converseLib.validationFailed(206);
  end
  ;
  ;
end // end KM0V715

// windowing routine
Function KM0V750()
   /* ***************************************/
   /* * KM0V750 - pop up window for xnxcd*/
   /* ***************************************/
  ;
  XPXX001(); /* perform pop-up screen initialization*/
  XX0XW02.XX0XWHDR = "VALID DEPARTMENT CODES    ";
  ;
  while (XX0XW02.XX0XWEND == "N")
    XPXNX01(); /* perform xnxcd pop up window*/
    ;
  end
  ;
  converseLib.clearScreen();
   /* reset screen*/
  ;
  KM0VW01.KM0VWDIX = KM0VW01.KM0VWPGC; /* get current page#*/
  KM0V290(); /* return current page*/
  ;
  ;
end // end KM0V750

// windowing routine
Function KM0V760()
   /* ************************************/
   /* * KM0V760 - pop up window for xgb*/
   /* ************************************/
  ;
  XPXX001(); /* perform pop-up screen initialization*/
  XX0XW02.XX0XWHDR = "VALID BASE GENDER/AGE CODES";
  ;
  while (XX0XW02.XX0XWEND == "N")
    XPXGB01(); /* perform xga pop up window*/
    ;
  end
  ;
  converseLib.clearScreen();
   /* reset screen*/
  ;
  KM0VW01.KM0VWDIX = KM0VW01.KM0VWPGC; /* get current page#*/
  KM0V290(); /* return current page*/
  ;
  ;
end // end KM0V760

// windowing routine
Function KM0V770()
   /* *************************************/
   /* * KM0V770 - pop up window for xsp*/
   /* *************************************/
  ;
  XPXX001(); /* perform pop-up screen initialization*/
  XX0XW02.XX0XWHDR = "VALID SPORT ACTIVITY CODES";
  ;
  while (XX0XW02.XX0XWEND == "N")
    XPXSP01(); /* perform xsp pop up window*/
    ;
  end
  ;
  converseLib.clearScreen();
   /* reset screen*/
  ;
  KM0VW01.KM0VWDIX = KM0VW01.KM0VWPGC; /* get current page#*/
  KM0V290(); /* return current page*/
  ;
  ;
end // end KM0V770

// Init records
Function KM0VS-INIT-RECS()
  /* *************************************************************/
  /* *               Initialize records used by KM0V*/
  /* *************************************************************/
  ;
  set KM0VW01 empty;
  set KM0VW02 empty;
  set KM0VW04 empty;
  set XX0XW01 empty;
  set XX0XW02 empty;
  set KUCREC empty;
  set KUJREC empty;
  set KUKREC empty;
  set KUNREC empty;
  set KUZREC empty;
  set TA1REC empty;
  set SQLCA empty;
  set ERRSQLCA empty;
end // end KM0VS-INIT-RECS

//*** RECORD=KM0VW01 ****
// working storage for rep maintenance screen
// ************************************************************
// *             Maintenance Log
// ************************************************************
// *
// * 28-june-1993       dlegg     Redefine company as character
// *
// ***********************
Record KM0VW01 type basicRecord
  10 KM0VWUSR KM0VWUSR ; 
    15 KM0VWCO KM0VWCO ; 
      20 KM0VWCO-CHAR KM0VWCO-CHAR ; 
    15 * num(10) ; 
  10 KM0VWKEY KM0VWKEY ; 
    15 KM0VWKC KM0VWKC ; 
    15 KM0VWKD KM0VWKD ; 
    15 * char(21) ; 
  10 KM0VWSIZ KM0VWSIZ ; 
  10 KM0VWMAX KM0VWMAX ; 
  10 KM0VWUPD KM0VWUPD ; 
  10 KM0VWERR KM0VWERR ; 
  10 KM0VWCHG KM0VWCHG ; 
  10 KM0VWPND KM0VWPND ; 
  10 KM0VWEND KM0VWEND ; 
  10 KM0VWCUS KM0VWCUS ; 
  10 KM0VWACT KM0VWACT ; 
  10 XATCD XATCD ; 
  10 KM0VWFND KM0VWFND ; 
  10 KM0VWCNT KM0VWCNT ; 
  10 KM0VWCTR KM0VWCTR ; 
  10 KM0VWPGC KM0VWPGC ; 
  10 KM0VWPGT KM0VWPGT ; 
  10 KM0VWDIX KM0VWDIX ; 
  10 KM0VWTIX KM0VWTIX ; 
  10 KM0VWXXX KM0VWXXX ; 
  10 KM0VWSAV KM0VWSAV ; 
  10 KM0VWXNU KM0VWXNU ; 
    15 * char(2) ; 
    15 KM0VWXCH KM0VWXCH ; 
      20 KM0VWXC1 KM0VWXC1 ; 
      20 KM0VWXC2 KM0VWXC2 ; 
end // end KM0VW01

//*** RECORD=KM0VW02 ****
// working storage record for parm to ta0050 (temp storage)
// ***********************
Record KM0VW02 type basicRecord
  10 KM0VW2AP KM0VW2AP ; 
  10 KM0VW2CT KM0VW2CT ; 
  10 KM0VW2FC KM0VW2FC ; 
  10 KM0VW2RC KM0VW2RC ; 
end // end KM0VW02

//*** RECORD=KM0VW04 ****
// working storage rec for editing against the screen
// ;
// the following fields (KG0CW01) are used for processing
//  1) KG0CWRIN - misc looping thru the table
//  2) KG0CWRMR - last full position on the table
//  3) KG0CWRIX - last rep on the screen
//  4) KG0CWRCT - counter used to match the screen counter
//                of KG0CWCNT
//  5) KG0CWRPL - holding field when replacing a rep with a
// new rep
// ;
// ***********************
Record KM0VW04 type basicRecord
  3 KM0VW4GR KM0VW4GR ; 
    10 KM0VW4LG KM0VW4LG ; 
    10 KM0VWGRP KM0VWGRP [5] ; 
      15 KM0VWXNX KM0VWXNX ; 
      15 XNXABRV XNXABRV ; 
      15 KUJSLFID KUJSLFID ; 
      15 KUJSLFNM KUJSLFNM ; 
      15 KUJCRIND KUJCRIND ; 
      15 XXXSTAT XXXSTAT ; 
      15 KM0VWGA1 KM0VWGA1 ; 
      15 KM0VWGA2 KM0VWGA2 ; 
      15 KM0VWGA3 KM0VWGA3 ; 
      15 KM0VWGA4 KM0VWGA4 ; 
      15 KM0VWSP1 KM0VWSP1 ; 
      15 KM0VWSP2 KM0VWSP2 ; 
      15 KM0VWSP3 KM0VWSP3 ; 
      15 KM0VWSP4 KM0VWSP4 ; 
      15 KM0VWSP5 KM0VWSP5 ; 
      15 KM0VWSP6 KM0VWSP6 ; 
      15 KM0VWSP7 KM0VWSP7 ; 
      15 KM0VWSP8 KM0VWSP8 ; 
      15 KUJGRP KUJGRP ; 
end // end KM0VW04

// application
DataItem KM0VW2AP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// count
DataItem KM0VW2CT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// function
DataItem KM0VW2FC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// return code
DataItem KM0VW2RC num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level for w04
DataItem KM0VW4GR char(1319)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RECORD LENGTH
DataItem KM0VW4LG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// active cust found flag
DataItem KM0VWACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// to dept change
DataItem KM0VWCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen detail counter
DataItem KM0VWCNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CU_CO_ID
DataItem KM0VWCO num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

//   company redefined
DataItem KM0VWCO-CHAR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp counter for ws
DataItem KM0VWCTR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of cust flag
DataItem KM0VWCUS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dept index
DataItem KM0VWDIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of dept flag
DataItem KM0VWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// application error flag
DataItem KM0VWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dept found flag
DataItem KM0VWFND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGA_GNDR_AGE_CD
DataItem KM0VWGA1 char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// XGA_GNDR_AGE_CD
DataItem KM0VWGA2 char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// XGA_GNDR_AGE_CD
DataItem KM0VWGA3 char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// XGA_GNDR_AGE_CD
DataItem KM0VWGA4 char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// grp level for w04
DataItem KM0VWGRP char(263)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   company number
DataItem KM0VWKC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   department number
DataItem KM0VWKD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// key for abending
DataItem KM0VWKEY char(34)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max nbr of occurances
DataItem KM0VWMAX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// page counter
DataItem KM0VWPGC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total nbr of dept temp recs
DataItem KM0VWPGT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// updates pending flag
DataItem KM0VWPND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// a saved image of w04
DataItem KM0VWSAV char(1319)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size of temp storage
DataItem KM0VWSIZ num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cu_sa_xsp_cd
DataItem KM0VWSP1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_sa_xsp_cd
DataItem KM0VWSP2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_sa_xsp_cd
DataItem KM0VWSP3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_sa_xsp_cd
DataItem KM0VWSP4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_sa_xsp_cd
DataItem KM0VWSP5 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_sa_xsp_cd
DataItem KM0VWSP6 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_sa_xsp_cd
DataItem KM0VWSP7 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu_sa_xsp_cd
DataItem KM0VWSP8 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp dept index
DataItem KM0VWTIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// update mode flag
DataItem KM0VWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// commarea passed
DataItem KM0VWUSR char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first char for xnxcd
DataItem KM0VWXC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// second char for xnxcd
DataItem KM0VWXC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// character xnxcd
DataItem KM0VWXCH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric xnxcd
DataItem KM0VWXNU num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// nike dept code
DataItem KM0VWXNX char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first screen with updates
DataItem KM0VWXXX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

