package km0q;

import corpcom2.XX0XW01;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSKUS-DB2-RETN;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XBCTBL;
import corpx1.XSOTBL;
import corpx2.XXXUSRID;
import ku.common.KUYREC;
import sm.common.SM1REC;
import ta.common.TA1REC;
//*** PROGRAM=KM0Q ****
// ; description:  this application allows adding and changing
// ; of records in the sales service rep db2 table.  option/
// ; item pathing mirrors gd0g if appl was started at gd0g/xsv.
// ;
// ; date written:  5/86.
// ;      author: j. ohrtman
// ;
// ;
// ;----------------maintenance log----------------------------
// ;
// ;
// ; person   date                    change
// ; ------  ------  ------------------------------------------
// ;
// ; johrtm  090586  increase km0q205 occurs from 250 to 500
// ; ctrouw  042387  changed rep cd to character
// ; ctrouw  101387  added selection by userid
// ; ctrouw  111088  increase size of w.s. table
// ; jwood   111788  noncsp opt added to calls
// ; jwood   111788  xssegtr logic added
// ; ctrouw  061689  increase field size for search
// ; dsalzw  101389  remove km0qw05, to allow unlimited # reps
// ; dsalzw  032990  db changes
// ; mhalst  050790  add brand code to screen
// ; jhemme  082390  allow pathing logic to act like gd0g
// ; dsalzw  011891  update the zz family correctly
// ; CHELLM  031392  DB2 changes; Added cu-home-xso-cd
// ; CHELLM  031692  Add message to home xso edit
// 12-july-1993         dlegg     Change call to TA0020 with
//                                ABND to RETN. KM0QS40,S41,
//                                S24,S25,S19.
// 15-july-1993         dlegg     Add sgrp to initialize all
//                                records used by appl.
// ; CHELLM  100193  CSP 4.1 Conversion.
// ; CHELLM  101393  FIX 1006 Table index abend.
// *Y2KFIX   12/05/97  DKENNY  Y2K MODIFICATIONS MADE:
// *                   Application regenerated to pick up new
// *                   XX0XS01.
// *********************
Program KM0Q type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KM0QW01 KM0QW01; // record
  KUYREC KUYREC; // record
  SM1REC SM1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XBCTBL {deleteAfterUse = yes}; // table
  use XSOTBL {deleteAfterUse = yes}; // table
  use KM0QM.KM0QM001,  // forms
      KM0QM.KM0QM005
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KM0Q001: KM0Q001();
    ;
    goto KM0Q005;
    ;
    ;
     /* ------------  end km0q001 flow  ------------*/
    ;
    KM0Q005: KM0Q005();
    ;
    if (converseVar.validationMsgNum != 0
     || KM0QM001.KM0QMMSG != " ")
      goto KM0Q005;
    end
    ;
    if (converseVar.eventKey is pa2)
      goto KM0Q005;
    end
    ;
    goto KM0Q010;
    ;
     /* ------------  end km0q005 flow  ------------*/
    ;
    KM0Q010: KM0Q010();
    ;
    if (KM0QM005.KM0QMMSG != " ")
      goto KM0Q010;
    end
    ;
    if (converseVar.eventKey is pf3)
      KM0QW01.KM0QW1NM[1] = 0;
      KM0QW01.KM0QWLLP = 0;
      goto KM0Q005;
    end
    ;
    if (converseVar.eventKey is pa2)
      goto KM0Q010;
    end
    ;
    goto KM0Q010;
    ;
     /* ------------  end km0q010 flow  ------------*/
    ;
  end // end main
end // end KM0Q

// km0q initialization
Function KM0Q001()
   /* ------------  start process km0q001  ------------*/
  ;
  ;
  XSENTRY();
  ;
  XSSEGTR(); /* set segemented trans id*/
  ;
  KM0QS-INIT-RECS();
  ;
  if (COMMAREA.CAFRMSYS == "GD")
    COMMAREA.CAITEM = " ";
  end
  ;
  ;
  if (COMMAREA.CAITEM != " ")
    KM0QW01.KM0QWITM = COMMAREA.CAITEM;
    COMMAREA.CAITEM = " ";
  end
  ;
end // end KM0Q001

// sales service rep m menu
Function KM0Q005()
   /* ------------  start process km0q005  ------------*/
  ;
   /* initialize the screen variables*/
  ;
  KM0QW01.KM0QWPNO = 1;
  ;
  ;
     /* *********************************************************/
     /* **** when we get to km0q010 we want to know where   *****/
     /* **** we came from so we change the from application *****/
     /* **** here.                                          *****/
     /* *********************************************************/
  ;
  ;
  if (converseVar.validationMsgNum == 0
   && KM0QM001.KM0QMMSG == " ")
    KM0QM001.KM0QMOP2 = " ";
    KM0QM001.XXXUSRID = " ";
    KM0QM001.KUYSVRID = 0;
    set KM0QM001.KM0QMOP2 cursor;
  else
    set KM0QM001 alarm;
  end
  ;
  if (KM0QW01.KM0QWSRP != 0)
    KM0QM001.KUYSVRID = KM0QW01.KM0QWSRP;
    KM0QW01.KM0QWSRP = 0;
  end
  ;
  ;
  set KM0QM001.KM0QMDAT modified;
  KM0QM001.KM0QMDAT = VGVar.currentShortGregorianDate;
  KM0QM001.KM0QMNAM = "KM0Q005";
  ;
  converse KM0QM001 ;
  ;
  set KM0QM001.KM0QMOP2 initialAttributes;
  set KM0QM001.XXXUSRID initialAttributes;
  set KM0QM001.KUYSVRID initialAttributes;
  ;
  KM0QM001.KM0QMMSG = " ";
  KM0QM001.VAGen_EZEMSG = " ";
  ;
  if (converseVar.eventKey is enter)
    if (KM0QM001.CATOAP != " "
     || KM0QM001.CAITEM != " ")
      if (KM0QM001.CATOAP == " "
       && COMMAREA.CAFRMSYS == "GD")
        KM0QM001.CATOAP = "GD0G";
      end
      COMMAREA.CATOAP = KM0QM001.CATOAP;
      COMMAREA.CAITEM = KM0QM001.CAITEM;
      XSEXIT();
      COMMAREA.CATOAP = " ";
      COMMAREA.CAITEM = " ";
      KM0QM001.KM0QMMSG = COMMAREA.CAMSG;
      exit stack;
    end
  end
  ;
  if (converseVar.eventKey is pf3)
    KM0QS13();
  end
  if (converseVar.eventKey is pf4)
    XSPF4();
  end
  if (converseVar.eventKey is pa2)
    exit stack;
  end
  ;
  if (KM0QM001.XXXUSRID != " "
   && KM0QM001.KUYSVRID != 0)
    converseLib.validationFailed(213);
    set KM0QM001.XXXUSRID cursor, bold;
    set KM0QM001.KUYSVRID bold;
  end
  ;
  if (KM0QM001.KM0QMOP2 == "1")
    /* next sentence*/
  else
    if (KM0QM001.KM0QMOP2 == "2")
      /* next sentence*/
    else
      set KM0QM001.KM0QMOP2 cursor, bold;
      converseLib.validationFailed(59);
      exit stack;
    end
  end
  ;
  if (KM0QM001.KM0QMOP2 == "2")
    if (COMMAREA.CAINQFL == "N")
      set KM0QM001.KM0QMOP2 cursor, bold;
      converseLib.validationFailed(41);
      exit stack;
    end
  end
  ;
  if (KM0QM001.KM0QMOP2 == "1")
    if (COMMAREA.CAADDFL == "N")
      if (COMMAREA.CACHGFL == "N")
        if (COMMAREA.CADELFL == "N")
          set KM0QM001.KM0QMOP2 cursor, bold;
          converseLib.validationFailed(41);
          exit stack;
        end
      end
    end
  end
  ;
  if (converseVar.validationMsgNum != 0)
    exit stack;
  end
  ;
  if (KM0QM001.XXXUSRID != " ")
    KUYREC.XXXUSRID = KM0QM001.XXXUSRID;
    KM0QS40(); /* validate userid*/
    if (SQLCA.VAGen_SQLCODE == 0)
      KM0QW01.KM0QW1NM[1] = KUYREC.KUYSVRID;
    else
      converseLib.validationFailed(214);
      set KM0QM001.XXXUSRID cursor, bold;
    end
    exit stack;
  end
  ;
  if (KM0QM001.KUYSVRID != 0)
    KUYREC.KUYSVRID = KM0QM001.KUYSVRID;
    KM0QS41(); /* validate service rep*/
    if (SQLCA.VAGen_SQLCODE == 0)
      KM0QW01.KM0QW1NM[1] = KUYREC.KUYSVRID;
    else
      converseLib.validationFailed(37);
      set KM0QM001.KUYSVRID cursor, bold;
    end
  end
  ;
   /* ------------  end km0q005 process  ------------*/
  ;
end // end KM0Q005

// sales service rep a/c/d scr
Function KM0Q010()
   /* ------------  start process km0q010  ------------*/
  ;
   /* initialize the screen variables*/
  KM0QW01.KM0QWLRS = " "; /* init the last-record switch*/
  KM0QW01.KM0QWPND = " "; /* init the maintenance-pending flag*/
  ;
  if (converseVar.validationMsgNum == 0) /* there are no errors*/
    KM0QW01.KM0QWIX1 = 1;
    while (KM0QW01.KM0QWIX1 < 14)
      KM0QM005.KM0QMOP1[KM0QWIX1] = " ";
      KM0QM005.XBCCD[KM0QWIX1] = " ";
      KM0QM005.XSOCD[KM0QWIX1] = " ";
      KM0QM005.CU-HOME-XSO-ID[KM0QWIX1] = " ";
      KM0QM005.XSVGRPID[KM0QWIX1] = 0;
      KM0QM005.KUYSVRID[KM0QWIX1] = 0;
      KM0QM005.KUYREPNM[KM0QWIX1] = " ";
      KM0QM005.KUYREPCD[KM0QWIX1] = " ";
      KM0QM005.SM1AGYID[KM0QWIX1] = " ";
      KM0QM005.XXXUSRID[KM0QWIX1] = " ";
      KM0QM005.XXXSTAT[KM0QWIX1] = " ";
      KM0QW01.KM0QWIX1 = KM0QW01.KM0QWIX1 + 1;
    end
    KM0QS23(); /* build the km0qm005 screen*/
  else
    set KM0QM005 alarm;
  end
  ;
  ;
  set KM0QM005.KM0QMDAT skip, modified;
  KM0QM005.KM0QMDAT = VGVar.currentShortGregorianDate;
  KM0QM005.KM0QMNAM = "KM0Q010";
  ;
  converse KM0QM005 ;
  ;
  KM0QM005.KM0QMMSG = " ";
  KM0QM005.VAGen_EZEMSG = " ";
  ;
  if (KM0QM005.CATOAP != " "
   || KM0QM005.CAITEM != " ")
    COMMAREA.CATOAP = KM0QM005.CATOAP;
    COMMAREA.CAITEM = KM0QM005.CAITEM;
    XSEXIT();
    COMMAREA.CATOAP = " ";
    COMMAREA.CAITEM = " ";
    KM0QM005.KM0QMMSG = COMMAREA.CAMSG;
    exit stack;
  end
  ;
  if (converseVar.eventKey is pf3)
    exit stack;
  end
  ;
  if (converseVar.eventKey is pf4)
    KM0QS10();
  end
  ;
  if (converseVar.eventKey is pa2)
    exit stack;
  end
  ;
  KM0QS05(); /* edit fields on screen*/
  ;
   /* ------------  end km0q010 process  ------------*/
  ;
end // end KM0Q010

// Init records
Function KM0QS-INIT-RECS()
  /* ***************************************************************/
  /* *               Initialize records used by KM0Q*/
  /* ***************************************************************/
  ;
  set KM0QW01 empty;
  set KUYREC empty;
  set SM1REC empty;
  set SQLCA empty;
  set TA1REC empty;
  set XX0XW01 empty;
  set ERRSQLCA empty;
end // end KM0QS-INIT-RECS

// edit screen entry
Function KM0QS05()
  ;
   /* ------------  start stmt group km0qs05  ------------*/
  ;
  set KM0QM001.KM0QMDAT skip, modified;
  set KM0QM005.KM0QMDAT skip, modified;
  ;
  ;
  KM0QS06(); /* set the maintenance-pending flag*/
  ;
  ;
  if (converseVar.validationMsgNum == 0)
    KM0QS07(); /* handle special entries (fast-path, pf keys)*/
  end
  ;
  ;
  if (converseVar.validationMsgNum == 0)
    KM0QS08(); /* edit screen km0qm005 entries*/
  end
  ;
   /* ------------  end stmt group km0qs05  ------------*/
  ;
end // end KM0QS05

// flag a screen has been changed
Function KM0QS06()
  ;
   /* ------------  start stmt group km0qs06  ------------*/
  ;
  ;
  if (KM0QM005.KM0QMOP1[1] == " " /* and no records are being updated*/
   && KM0QM005.KM0QMOP1[2] == " " 
   && KM0QM005.KM0QMOP1[3] == " " 
   && KM0QM005.KM0QMOP1[4] == " " 
   && KM0QM005.KM0QMOP1[5] == " " 
   && KM0QM005.KM0QMOP1[6] == " " 
   && KM0QM005.KM0QMOP1[7] == " " 
   && KM0QM005.KM0QMOP1[8] == " " 
   && KM0QM005.KM0QMOP1[9] == " " 
   && KM0QM005.KM0QMOP1[10] == " "
   && KM0QM005.KM0QMOP1[11] == " "
   && KM0QM005.KM0QMOP1[12] == " "
   && KM0QM005.KM0QMOP1[13] == " ")
    KM0QW01.KM0QWPND = " "; /* move blank to the pending flag*/
  else
    KM0QW01.KM0QWPND = "X"; /* move 'x' to the pending flag*/
  end
  ;
   /* ------------  end stmt group km0qs06  ------------*/
  ;
end // end KM0QS06

// handle any special entries
Function KM0QS07()
  ;
   /* ------------  start stmt group km0qs07  ------------*/
  ;
  ;
  if (converseVar.eventKey is enter)
    if (KM0QM005.CATOAP != " ")
      KM0QS09(); /* handle fast-path option entry*/
    else
       /* next sentence          ; no special functions...go back*/
    end
  else
    if (KM0QM005.CATOAP != " ")
      converseLib.validationFailed(48); /* can't use fast-path and pf-key*/
      set KM0QM005.CATOAP cursor, bold;
    else
      KM0QS10(); /* handle km0qm005 pf key entry*/
    end
  end
  ;
   /* ------------  end stmt group km0qs07  ------------*/
  ;
end // end KM0QS07

// validate km0qm005 screen entry
Function KM0QS08()
  ;
   /* ------------  start stmt group km0qs08  ------------*/
  ;
  KM0QW01.KM0QWIX1 = 14; /* set record counter*/
  KM0QW01.KM0QWLLP = 1; /* set-up last line on page number*/
  KM0QW01.KM0QWVFD = 0; /* clear edit error switch*/
  ;
  if (KM0QW01.KM0QWPND == "X") /* if maintenance is pending*/
    ;
    while (KM0QW01.KM0QWIX1 > KM0QW01.KM0QWLLP) /* and records remain*/
      ;
      KM0QW01.KM0QWIX1 = KM0QW01.KM0QWIX1 - 1; /* decrement record counter*/
      ;
      if (KM0QM005.KM0QMOP1[KM0QWIX1] == "A"
       && CAADDFL == "N")
        set KM0QM005.KM0QMOP1[KM0QWIX1] cursor, modified, bold;
        KM0QM005.KM0QMMSG = "ADD FUNCTION NOT ALLOWED FOR THIS USER ID";
      else
        if (KM0QM005.KM0QMOP1[KM0QWIX1] == "C"
         && CACHGFL == "N")
          set KM0QM005.KM0QMOP1[KM0QWIX1] cursor, modified, bold;
          KM0QM005.KM0QMMSG = "CHANGE FUNCTION NOT ALLOWED FOR THIS USER ID";
        end
      end
      if (KM0QM005.KM0QMOP1[KM0QWIX1] == "A" /* if adding a record or*/
       && CAADDFL == "Y")                   
        KM0QS11(); /* validate this maintenance line*/
      else
        if (KM0QM005.KM0QMOP1[KM0QWIX1] == "C" /* changing a record*/
         && CACHGFL == "Y")                   
          KM0QS11(); /* validate this maintenance line*/
        else
          if (KM0QM005.KM0QMOP1[KM0QWIX1] == " ") /* if no option entered*/
            /* next sentence*/
          else
            converseLib.validationFailed(44); /* invalid maintenance optionmsg.*/
            set KM0QM005.KM0QMOP1[KM0QWIX1] cursor, bold;
          end
        end
      end
    end
  end
  ;
  if (KM0QW01.KM0QWVFD == 0)
    KM0QW01.KM0QWIX1 = 1;
    while (KM0QW01.KM0QWIX1 < 14)
      if (KM0QM005.KM0QMOP1[KM0QWIX1] == "A"
       && COMMAREA.CAADDFL == "Y")
        KM0QS16();
        KM0QS30();
        if (KM0QW01.KM0QWVFD == 0)
          KM0QS12();
        else
          KM0QW01.KM0QWVFD = 0;
        end
      else
        if (KM0QM005.KM0QMOP1[KM0QWIX1] == "C"
         && COMMAREA.CACHGFL == "Y")
          KM0QS16();
          KM0QS30();
          if (KM0QW01.KM0QWVFD == 0)
            KM0QS12();
          else
            KM0QW01.KM0QWVFD = 0;
          end
        end
      end
      KM0QW01.KM0QWIX1 = KM0QW01.KM0QWIX1 + 1;
    end
  end
  ;
  ;
   /* ------------  end stmt group km0qs08  ------------*/
  ;
end // end KM0QS08

// handle fast-path exit
Function KM0QS09()
  ;
   /* ------------  start stmt group km0qs09  ------------*/
  ;
  if (KM0QW01.KM0QWPND == "X") /* if maintenance is pending*/
    converseLib.validationFailed(46); /* can't fast-path with maintenance pendingmsg.*/
    set KM0QM005.CATOAP cursor, bold;
  else
    COMMAREA.CATOAP = KM0QM005.CATOAP;
    COMMAREA.CAITEM = KM0QM005.CAITEM;
    XSEXIT();
    if (CASECRC + 400 == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(CASECRC + 400);
    end
    set KM0QM005.CATOAP cursor, bold;
  end
  ;
   /* ------------  end stmt group km0qs09  ------------*/
  ;
end // end KM0QS09

// handle pf key entry
Function KM0QS10()
  ;
   /* ------------  start stmt group km0qs10  ------------*/
  ;
  if (KM0QW01.KM0QWPND == "X") /* if there's maintenance pending*/
    if (converseVar.eventKey is pf1
     || converseVar.eventKey is pf3
     || converseVar.eventKey is pf4)
      converseLib.validationFailed(47); /* can't exit appl w/maint pendingmsg.*/
      return;
    end
  end
  ;
  ;
  if (converseVar.eventKey is pf3)
    KM0QS13();
  else
    if (converseVar.eventKey is pf4)
      XSPF4();
    else
      if (converseVar.eventKey is pf7)
        KM0QS14();
      else
        if (converseVar.eventKey is pf8)
          KM0QS15();
        else
          if (converseVar.eventKey is pf1)
            XSPF1();
          else
            converseLib.validationFailed(3); /* pfkey not supported*/
          end
        end
      end
    end
  end
  ;
   /* ------------  end stmt group km0qs10  ------------*/
  ;
end // end KM0QS10

// validate sales svc rep info
Function KM0QS11()
  ;
   /* ------------  start stmt group km0qs11  ------------*/
  ;
  KM0QS28(); /* validate service rep status*/
  KM0QS30(); /* validate user id*/
  KM0QS19(); /* validate service rep's agency*/
  KM0QS18(); /* validate service rep's title*/
  KM0QS17(); /* validate service rep's name*/
  KM0QS16(); /* validate service rep's id*/
  KM0QS29(); /* validate area manager id*/
  KM0QS31(); /* validate sales office code*/
  KM0QS32(); /* validate brand code*/
  KM0QS33(); /* validate home sales office code*/
  ;
   /* ------------  end stmt group km0qs11  ------------*/
  ;
end // end KM0QS11

// update sales service rep table
Function KM0QS12()
  ;
   /* ------------  start stmt group km0qs12  ------------*/
  ;
  if (KM0QM005.XXXSTAT[KM0QWIX1] == " ") /* if status field is blank*/
    KM0QM005.XXXSTAT[KM0QWIX1] = "A"; /* insert an 'a'*/
  end
  ;
  KUYREC.XBCCD = KM0QM005.XBCCD[KM0QWIX1];
  KUYREC.XSOCD = KM0QM005.XSOCD[KM0QWIX1];
  KUYREC.CU-HOME-XSO-ID = KM0QM005.CU-HOME-XSO-ID[KM0QWIX1];
  KUYREC.XSVGRPID = KM0QM005.XSVGRPID[KM0QWIX1];
  KUYREC.KUYSVRID = KM0QM005.KUYSVRID[KM0QWIX1];
  KUYREC.KUYREPNM = KM0QM005.KUYREPNM[KM0QWIX1];
  KUYREC.KUYREPCD = KM0QM005.KUYREPCD[KM0QWIX1];
  KUYREC.SM1AGYID = KM0QM005.SM1AGYID[KM0QWIX1];
  KUYREC.XXXUSRID = KM0QM005.XXXUSRID[KM0QWIX1];
  KUYREC.XXXSTAT = KM0QM005.XXXSTAT[KM0QWIX1];
  ;
  XX0XS01();
  ;
  if (KM0QM005.KM0QMOP1[KM0QWIX1] == "A") /* if adding a record*/
    KUYREC.ZZZSDT = XX0XWDAT;
    KUYREC.ZZZCHGDT = XX0XWDAT;
    KUYREC.ZZZCHGTM = XX0XWTIM;
    KUYREC.ZZZCHGCT = 0;
    KM0QS20(); /* add record to table*/
    KM0QM005.KM0QMOP1[KM0QWIX1] = " "; /* blank out option field*/
    KM0QW01.KM0QWPND = " "; /* blank out pending flag*/
  else
    if (KM0QM005.KM0QMOP1[KM0QWIX1] == "C") /* if changing a record*/
      KUYREC.ZZZCHGDT = XX0XWDAT;
      KUYREC.ZZZCHGTM = XX0XWTIM;
      KM0QS21(); /* update record in table*/
      KM0QM005.KM0QMOP1[KM0QWIX1] = " "; /* blank out option field*/
      KM0QW01.KM0QWPND = " "; /* blank out pending flag*/
    else
    end
  end
  ;
   /* ------------  end stmt group km0qs12  ------------*/
  ;
end // end KM0QS12

// handle pf key 3 entry
Function KM0QS13()
  ;
   /* ------------  start stmt group km0qs13  ------------*/
  ;
  COMMAREA.CATOAP = COMMAREA.CAFROMAP;
  ;
  if (COMMAREA.CAFRMSYS == "GD")
    COMMAREA.CATOAP = "GD0G";
    COMMAREA.CAITEM = " ";
  end
  ;
  XSEXIT();
  if (CASECRC + 400 == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(CASECRC + 400);
  end
  ;
   /* ------------  end stmt group km0qs13  ------------*/
  ;
end // end KM0QS13

// handle pf key 7
Function KM0QS14()
  ;
   /* ------------  start stmt group km0qs14  ------------*/
  ;
  if (KM0QW01.KM0QWPND == "X") /* if a maintenance req. is pending*/
    converseLib.validationFailed(45); /* can't scroll while maint. pending*/
  end
  ;
  ;
  if (KM0QW01.KM0QWPNO == 1)
    converseLib.validationFailed(38); /* no previous page*/
  else
    KM0QW01.KM0QWPNO = KM0QW01.KM0QWPNO - 1; /* decrement page number*/
    KM0QW01.KM0QWLRS = "N"; /* set last record switch*/
  end
  ;
   /* ------------  end stmt group km0qs14  ------------*/
  ;
end // end KM0QS14

// handle pf key 8
Function KM0QS15()
  ;
   /* ------------  start stmt group km0qs15  ------------*/
  ;
  if (KM0QW01.KM0QWPND == "X") /* if maintenance req. is pending*/
    converseLib.validationFailed(45);
                                   /* can't scroll while maint. pendingmsg.*/
  end
  ;
  ;
  if (KM0QW01.KM0QWLRS == "Y") /* if last record*/
    converseLib.validationFailed(39); /* last recordmsg.*/
  else
    KM0QW01.KM0QWPNO = KM0QW01.KM0QWPNO + 1;
    KM0QW01.KM0QW1NM[KM0QWPNO] = KM0QM005.KUYSVRID[KM0QWLLP];
  end
  ;
   /* ------------  end stmt group km0qs15  ------------*/
  ;
end // end KM0QS15

// validate sales service rep #
Function KM0QS16()
  ;
   /* ------------  start stmt group km0qs16  ------------*/
  ;
  set KM0QM005.KUYSVRID[KM0QWIX1] normal;
  ;
  KUYREC.KUYSVRID = KM0QM005.KUYSVRID[KM0QWIX1];
  KM0QS41(); /* validate service rep*/
  if (SQLCA.VAGen_SQLCODE == 0)
    KM0QW01.KM0QWFND = 1;
  else
    KM0QW01.KM0QWFND = 0;
  end
  ;
  ;
  ;
  if (KM0QM005.KM0QMOP1[KM0QWIX1] == "A") /* if we're adding a record*/
    if (KM0QW01.KM0QWFND == 0) /* and the record is not on file*/
       /* next sentence*/
    else
      if (KM0QM005.KUYSVRID[KM0QWIX1] != 0)
        converseLib.validationFailed(60); /* rep already on filemsg.*/
        set KM0QM005.KUYSVRID[KM0QWIX1] cursor, bold;
        KM0QW01.KM0QWVFD = 1;
      else
        converseLib.validationFailed(50); /* required field msg.*/
        set KM0QM005.KUYSVRID[KM0QWIX1] cursor, bold;
        KM0QW01.KM0QWVFD = 1;
      end
    end
  else
    if (KM0QM005.KM0QMOP1[KM0QWIX1] == "C") /* if we're changing a record*/
      if (KM0QM005.KUYSVRID[KM0QWIX1] != KM0QW01.KM0QWHRP[KM0QWIX1])
        converseLib.validationFailed(35); /* can't change rep #msg.*/
        KM0QM005.KUYSVRID[KM0QWIX1] = KM0QW01.KM0QWHRP[KM0QWIX1];
        set KM0QM005.KUYSVRID[KM0QWIX1] cursor, bold;
        KM0QW01.KM0QWVFD = 1;
      end
    end
  end
  ;
   /* ------------  end stmt group km0qs16  ------------*/
  ;
end // end KM0QS16

// validate service rep name
Function KM0QS17()
  ;
   /* ------------  start stmt group km0qs17  ------------*/
  ;
  set KM0QM005.KUYREPNM[KM0QWIX1] normal;
  ;
  if (KM0QM005.KUYREPNM[KM0QWIX1] == " ") /* if rep name is blank*/
    converseLib.validationFailed(36); /* must enter rep's name msg.*/
    set KM0QM005.KUYREPNM[KM0QWIX1] cursor, bold;
    KM0QW01.KM0QWVFD = 1;
  end
  ;
   /* ------------  end stmt group km0qs17  ------------*/
  ;
end // end KM0QS17

// validate sales svc rep title
Function KM0QS18()
  ;
   /* ------------  start stmt group km0qs18  ------------*/
  ;
  set KM0QM005.KUYREPCD[KM0QWIX1] normal;
  ;
  if (KM0QM005.KUYREPCD[KM0QWIX1] == "1" /* if rep title code = 1 or*/
   || KM0QM005.KUYREPCD[KM0QWIX1] == "2" /* title code = 2*/
   || KM0QM005.KUYREPCD[KM0QWIX1] == "3") /* title code = 3*/
    /* next sentence*/
  else
    if (KM0QM005.KUYREPCD[KM0QWIX1] == " ") /* if title code missing*/
      converseLib.validationFailed(49); /* required field msg.*/
      set KM0QM005.KUYREPCD[KM0QWIX1] cursor, bold;
      KM0QW01.KM0QWVFD = 1;
    else
      converseLib.validationFailed(42); /* invalid title code msg.*/
      set KM0QM005.KUYREPCD[KM0QWIX1] cursor, bold;
      KM0QW01.KM0QWVFD = 1;
    end
  end
  ;
   /* ------------  end stmt group km0qs18  ------------*/
  ;
end // end KM0QS18

// validate sales agency id
Function KM0QS19()
  ;
   /* ------------  start stmt group km0qs19  ------------*/
  ;
  set KM0QM005.SM1AGYID[KM0QWIX1] normal;
  ;
  if (KM0QM005.SM1AGYID[KM0QWIX1] == " ")
    return;
  end
  ;
  SM1REC.SM1AGYID = KM0QM005.SM1AGYID[KM0QWIX1];
  ;
  call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if record found*/
    if (SM1REC.SM1STAT == "A") /* check status to see if active*/
      /* next sentence              ;valid record*/
    else
      converseLib.validationFailed(71); /* inactive agency status msg.*/
      set KM0QM005.SM1AGYID[KM0QWIX1] cursor, bold;
      KM0QW01.KM0QWVFD = 1;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
      set KM0QM005.SM1AGYID[KM0QWIX1] cursor, bold;
      converseLib.validationFailed(72); /* agency not on file msg.*/
      KM0QW01.KM0QWVFD = 1;
    else
      XSKUS-DB2-RETN(); /* abort*/
    end
  end
  ;
   /* ------------  end stmt group km0qs19  ------------*/
  ;
end // end KM0QS19

// add routine for sales serv rep
Function KM0QS20()
  ;
   /* ------------  start stmt group km0qs20  ------------*/
  ;
                     /* add record*/
  ;
  call "IO0550" ("A ", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    set KM0QM005.KM0QMOP1[1] cursor;
    if (converseVar.validationMsgNum == 0)
      converseLib.validationFailed(64); /* record has been addedmsg.*/
    end
  else
    KM0QW01.KM0QWSQL = SQLCA.SQLCAREC; /* hold error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* syncpoint rollback*/
    SQLCA.SQLCAREC = KM0QW01.KM0QWSQL;
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "KM0QS20";
    TA1REC.TA1DBTBL = "DCUST.VSVREP01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
   /* ------------  end stmt group km0qs20  ------------*/
  ;
end // end KM0QS20

// update changes to sales rep
Function KM0QS21()
  ;
   /* ------------  start stmt group km0qs21  ------------*/
  ;
    /* update record*/
  call "IO0550" ("U ", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    if (converseVar.validationMsgNum == 0)
      set KM0QM005.KM0QMOP1[1] cursor;
      converseLib.validationFailed(29); /* data updated msg*/
    else
    end
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(61); /* upt since last request msg*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
    else
      KM0QW01.KM0QWSQL = SQLCA.SQLCAREC; /* hold error sqlca*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      SQLCA.SQLCAREC = KM0QW01.KM0QWSQL;
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1PGMNM = "KM0QS21";
      TA1REC.TA1DBTBL = "DCUST.VSVREP01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end
  ;
   /* ------------  end stmt group km0qs21  ------------*/
  ;
end // end KM0QS21

// build km0qm005 screen
Function KM0QS23()
  ;
   /* --------------  start stmt group km0qs23  -------------*/
  ;
  if (KM0QM001.KM0QMOP2 == "1") /* if option 1*/
    KM0QM005.KM0QMDSC = "MAINTENANCE"; /* move to screen heading*/
  else
    if (KM0QM001.KM0QMOP2 == "2") /* if option 2*/
      KM0QM005.KM0QMDSC = "    INQUIRY"; /* move to screen heading*/
    end
  end
  ;
  ;
  if (KM0QW01.KM0QW1NM[1] == 0)
    KUYREC.KUYSVRID = 1;
    KM0QW01.KM0QW1NM[1] = 1;
  else
    KUYREC.KUYSVRID = KM0QW01.KM0QW1NM[KM0QWPNO];
  end
  ;
  ;
  KM0QS24(); /* move svc reps to screen*/
  ;
   /* ------------  end stmt group km0qs23  --------------*/
  ;
end // end KM0QS23

// select scan for screen
Function KM0QS24()
  ;
   /* --------------  start stmt group km0qs24  -------------*/
  ;
  KUYREC.KUYSVRID = KUYREC.KUYSVRID - 1; /* select is greater than*/
  ;
  call "IO0550" ("SS", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes}; /* sales service rep records*/
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KM0QS25();
    call "IO0550" ("CS", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
       /* NEXT SENTENCE*/
    else
      XSKUS-DB2-RETN(); /* abort routine*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
    else
      XSKUS-DB2-RETN(); /* abort routine*/
    end
  end
  ;
  ;
   /* ------------  end stmt group km0qs24  --------------*/
  ;
end // end KM0QS24

// move lines to screen
Function KM0QS25()
  ;
   /* ------------  start stmt group km0qs25  ------------*/
  ;
  KM0QW01.KM0QWLLP = 0;
  while (KM0QW01.KM0QWLLP < 13)
    call "IO0550" ("SN", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      KM0QW01.KM0QWLLP = KM0QW01.KM0QWLLP + 1;
      KM0QS26(); /* build the screen line*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        KM0QW01.KM0QWLRS = "Y"; /* set the last-record-sw,*/
        converseLib.validationFailed(39); /* set up last-record message*/
        return; /* and get out of this loop*/
      else
        XSKUS-DB2-RETN(); /* abort routine*/
      end
    end
  end
  ;
  ;
   /* ------------  end stmt group km0qs25  ------------*/
  ;
end // end KM0QS25

// build one km0qm005 line
Function KM0QS26()
  ;
   /* ------------  start stmt group km0qs26  ------------*/
  ;
  KM0QM005.XBCCD[KM0QWLLP] = KUYREC.XBCCD;
  KM0QM005.XSOCD[KM0QWLLP] = KUYREC.XSOCD;
  KM0QM005.CU-HOME-XSO-ID[KM0QWLLP] = KUYREC.CU-HOME-XSO-ID;
  KM0QM005.XSVGRPID[KM0QWLLP] = KUYREC.XSVGRPID;
  KM0QM005.KUYSVRID[KM0QWLLP] = KUYREC.KUYSVRID;
  KM0QM005.KUYREPNM[KM0QWLLP] = KUYREC.KUYREPNM;
  KM0QM005.KUYREPCD[KM0QWLLP] = KUYREC.KUYREPCD;
  KM0QM005.SM1AGYID[KM0QWLLP] = KUYREC.SM1AGYID;
  KM0QM005.XXXUSRID[KM0QWLLP] = KUYREC.XXXUSRID;
  KM0QM005.XXXSTAT[KM0QWLLP] = KUYREC.XXXSTAT;
  ;
  KM0QW01.XXXUSRID[KM0QWLLP] = KUYREC.XXXUSRID;
  ;
  set KM0QM005.KM0QMOP1[KM0QWLLP] protect, invisible;
  set KM0QM005.XBCCD[KM0QWLLP] protect;
  set KM0QM005.XSOCD[KM0QWLLP] protect;
  set KM0QM005.CU-HOME-XSO-ID[KM0QWLLP] protect;
  set KM0QM005.XSVGRPID[KM0QWLLP] protect;
  set KM0QM005.KUYSVRID[KM0QWLLP] protect;
  set KM0QM005.KUYREPNM[KM0QWLLP] protect;
  set KM0QM005.KUYREPCD[KM0QWLLP] protect;
  set KM0QM005.SM1AGYID[KM0QWLLP] protect;
  set KM0QM005.XXXUSRID[KM0QWLLP] protect;
  set KM0QM005.XXXSTAT[KM0QWLLP] protect;
  ;
  if (KM0QM001.KM0QMOP2 == "1")
    KM0QW01.KM0QWHRP[KM0QWLLP] = KUYREC.KUYSVRID;
    set KM0QM005.KM0QMOP1[KM0QWLLP] normal;
    set KM0QM005.XBCCD[KM0QWLLP] normal;
    set KM0QM005.XSOCD[KM0QWLLP] normal;
    set KM0QM005.CU-HOME-XSO-ID[KM0QWLLP] normal;
    set KM0QM005.XSVGRPID[KM0QWLLP] normal;
    set KM0QM005.KUYSVRID[KM0QWLLP] normal;
    set KM0QM005.KUYREPNM[KM0QWLLP] normal;
    set KM0QM005.KUYREPCD[KM0QWLLP] normal;
    set KM0QM005.SM1AGYID[KM0QWLLP] normal;
    set KM0QM005.XXXUSRID[KM0QWLLP] normal;
    set KM0QM005.XXXSTAT[KM0QWLLP] normal;
    return;
  end
  ;
   /* ------------  end stmt group km0qs26  ------------*/
  ;
end // end KM0QS26

// validate service rep's status
Function KM0QS28()
  ;
   /* ------------  start stmt group km0qs28  ------------*/
  ;
  set KM0QM005.XXXSTAT[KM0QWIX1] normal;
  ;
  if (KM0QM005.XXXSTAT[KM0QWIX1] == "I"
   || KM0QM005.XXXSTAT[KM0QWIX1] == "A"
   || KM0QM005.XXXSTAT[KM0QWIX1] == " ")
    /* next sentence*/
  else
    converseLib.validationFailed(66); /* invalid status msg*/
    set KM0QM005.XXXSTAT[KM0QWIX1] cursor, bold;
    KM0QW01.KM0QWVFD = 1;
  end
  ;
   /* ------------  end stmt group km0qs28  ------------*/
  ;
end // end KM0QS28

// validate area manager id
Function KM0QS29()
  ;
   /* ------------  start stmt group km0qs29  ------------*/
  ;
  set KM0QM005.XSVGRPID[KM0QWIX1] normal;
  ;
  if (KM0QM005.XSVGRPID[KM0QWIX1] != 0)
    /* next sentence*/
  else
    converseLib.validationFailed(151); /* required field missing*/
    set KM0QM005.XSVGRPID[KM0QWIX1] cursor, bold;
    KM0QW01.KM0QWVFD = 1;
  end
  ;
   /* ------------  end stmt group km0qs29  ------------*/
  ;
end // end KM0QS29

// check for user id
Function KM0QS30()
  ;
   /* ------------  start stmt group km0qs30  ------------*/
  ;
  set KM0QM005.XXXUSRID[KM0QWIX1] normal;
  ;
  if (KM0QM005.XXXUSRID[KM0QWIX1] == " ")
                                   /* make sure a userid has been entered*/
    converseLib.validationFailed(120); /* userid is a required field*/
    set KM0QM005.XXXUSRID[KM0QWIX1] cursor, bold;
    KM0QW01.KM0QWVFD = 1;
    return;
  end
  ;
  if (KM0QM005.KM0QMOP1[KM0QWIX1] == "C")
    if (KM0QM005.XXXUSRID[KM0QWIX1] == KM0QW01.XXXUSRID[KM0QWIX1])
      return;
    end
  end
  ;
  if (KM0QM005.KM0QMOP1[KM0QWIX1] == "A"
   || KM0QM005.KM0QMOP1[KM0QWIX1] == "C")
    KUYREC.XXXUSRID = KM0QM005.XXXUSRID[KM0QWIX1];
    KM0QS40(); /* validate userid*/
    if (SQLCA.VAGen_SQLCODE == 0)
      converseLib.validationFailed(58); /* userid already exists*/
      set KM0QM005.XXXUSRID[KM0QWIX1] cursor, bold;
      KM0QW01.KM0QWVFD = 1;
    end
  end
  ;
   /* ------------  end stmt group km0qs30  ------------*/
  ;
end // end KM0QS30

// validate sales office code
Function KM0QS31()
  ;
   /* ------------  start stmt group km0qs31  ------------*/
  ;
  set KM0QM005.XSOCD[KM0QWIX1] normal;
  ;
  if (KM0QM005.XSOCD[KM0QWIX1] == " ")
    converseLib.validationFailed(150); /* required field missing*/
    set KM0QM005.XSOCD[KM0QWIX1] cursor, bold;
    KM0QW01.KM0QWVFD = 1;
    return;
  end
  ;
  if (KM0QM005.XSOCD[KM0QWIX1] in XSOTBL.XSOCD)
    if (KM0QM005.XSOCD[KM0QWIX1] != "99")
      /* next sentence*/
    else
      converseLib.validationFailed(149); /* sales office end of tbl record*/
      set KM0QM005.XSOCD[KM0QWIX1] cursor, bold;
      KM0QW01.KM0QWVFD = 1;
    end
  else
    converseLib.validationFailed(149); /* sales office not on file*/
    set KM0QM005.XSOCD[KM0QWIX1] cursor, bold;
    KM0QW01.KM0QWVFD = 1;
  end
  ;
   /* ------------  end stmt group km0qs31  ------------*/
  ;
end // end KM0QS31

// validate brand code
Function KM0QS32()
  ;
  set KM0QM005.XBCCD[KM0QWIX1] normal;
  ;
  if (KM0QM005.XBCCD[KM0QWIX1] == " ")
    converseLib.validationFailed(114); /* required field missing*/
    set KM0QM005.XBCCD[KM0QWIX1] cursor, bold;
    KM0QW01.KM0QWVFD = 1;
    return;
  end
  ;
  if (KM0QM005.XBCCD[KM0QWIX1] in XBCTBL.XBCCD)
    if (XBCTBL.XBCCD[sysVar.arrayIndex] != "99"
     && XBCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active record*/
      /* next sentence*/
    else
      converseLib.validationFailed(17); /* invalid code (end of tbl rec)*/
      set KM0QM005.XBCCD[KM0QWIX1] cursor, bold;
      KM0QW01.KM0QWVFD = 1;
    end
  else
    converseLib.validationFailed(17); /* invalid code*/
    set KM0QM005.XBCCD[KM0QWIX1] cursor, bold;
    KM0QW01.KM0QWVFD = 1;
  end
  ;
end // end KM0QS32

// validate home sales office id
Function KM0QS33()
  ;
   /* ------------  start stmt group km0qs33  ------------*/
  ;
  set KM0QM005.CU-HOME-XSO-ID[KM0QWIX1] normal;
  ;
  if (KM0QM005.CU-HOME-XSO-ID[KM0QWIX1] == " ")
    converseLib.validationFailed(439); /* required field missing*/
    set KM0QM005.CU-HOME-XSO-ID[KM0QWIX1] cursor, bold;
    KM0QW01.KM0QWVFD = 1;
    return;
  end
  ;
  if (KM0QM005.CU-HOME-XSO-ID[KM0QWIX1] in XSOTBL.XSOCD)
    if (KM0QM005.CU-HOME-XSO-ID[KM0QWIX1] != "99")
      /* next sentence*/
    else
      converseLib.validationFailed(438); /* sales office end of tbl record*/
      set KM0QM005.CU-HOME-XSO-ID[KM0QWIX1] cursor, bold;
      KM0QW01.KM0QWVFD = 1;
    end
  else
    converseLib.validationFailed(438); /* sales office not on file*/
    set KM0QM005.CU-HOME-XSO-ID[KM0QWIX1] cursor, bold;
    KM0QW01.KM0QWVFD = 1;
  end
  ;
   /* ------------  end stmt group km0qs33  ------------*/
  ;
end // end KM0QS33

// select by user id
Function KM0QS40()
  ;
   /* ------------  start stmt group km0qs40  ------------*/
  ;
  call "IO0550" ("SA", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes}; /* sales service rep records*/
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    XSKUS-DB2-RETN(); /* abort routine*/
  end
  ;
   /* ------------  end stmt group km0qs40  ------------*/
  ;
end // end KM0QS40

// select by service rep id
Function KM0QS41()
  ;
   /* ------------  start stmt group km0qs41  ------------*/
  ;
  call "IO0550" ("S ", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes}; /* sales service rep records*/
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    XSKUS-DB2-RETN(); /* abort routine*/
  end
  ;
   /* ------------  end stmt group km0qs41  ------------*/
  ;
end // end KM0QS41

Record KM0QW01 type basicRecord
  5 KM0QWGRP KM0QWGRP ; 
    10 KM0QWPND KM0QWPND ; 
    10 KM0QWFND KM0QWFND ; 
    10 KM0QWVFD KM0QWVFD ; 
    10 KM0QWIX1 KM0QWIX1 ; 
    10 KM0QWPNO KM0QWPNO ; 
    10 KM0QWLRS KM0QWLRS ; 
    10 KM0QWHRP KM0QWHRP [13] ; 
    10 XXXUSRID XXXUSRID [13] ; 
    10 KM0QW1NM KM0QW1NM [160] ; 
    10 KM0QWLLP KM0QWLLP ; 
    10 KM0QWSQL KM0QWSQL ; 
    10 KM0QWITM KM0QWITM ; 
      15 KM0QWSRP KM0QWSRP ; 
      15 KM0QWFLR KM0QWFLR ; 
end // end KM0QW01

// tbl of 1st reps on page
DataItem KM0QW1NM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// filler
DataItem KM0QWFLR char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record found flag
DataItem KM0QWFND num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cust working storage
DataItem KM0QWGRP char(942)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold screen rep numbers
DataItem KM0QWHRP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold area for caitem
DataItem KM0QWITM char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index
DataItem KM0QWIX1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of last line on page
DataItem KM0QWLLP num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last-record switch
DataItem KM0QWLRS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// maintenance pending flag
DataItem KM0QWPND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current screen page number
DataItem KM0QWPNO num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save area for sqlca/reset
DataItem KM0QWSQL char(136)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold area for sales rep
DataItem KM0QWSRP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// valid field counter
DataItem KM0QWVFD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

