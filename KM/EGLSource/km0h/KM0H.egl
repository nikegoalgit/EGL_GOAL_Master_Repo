package km0h;

import corpcom1.CAMSG;
import corpcom1.CATOAP;
import corpcom2.XCTREC;
import corpcom2.XGPREC;
import corpcom2.XSTREC;
import corpcom2.XX0XW01;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSKUS-DB2-RETN;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import kl.common.KIZTBL;
import ku.common.KUKPCOID;
import ku.common.KUKREC;
import ku.common.KUZDATA;
import ku.common.KUZREC;
import ta.common.TA1REC;
import xa.common.XA0AW02;
//*** PROGRAM=KM0H ****
// ************************************************************
// *           Change/View Parent Company Address             *
// ************************************************************
// This application allows the user to change and/or view the
// address associate with a Parent Company.
// *
// ************************************************************
// *  maintenance history:
// *
// *  date    by whom   changes made
// *--------  -------   ---------------------------------------
// *05/18/87    clt     removed kuarec from list
// *07/20/87    clt     removed kunrec,kumrec,kulrec from list
// *11/17/88    jbw     added noncsp opt to calls
// *11/17/88    jbw     added xssegtr logic
// *05/17/89    clt     change size of kuzdata of kuzrec
// *09/10/90  dsalzw    added kiztbl for audit trail
// *03/04/93  CHELLM    Removed 'SET ALARMS's when screen
// *                    is conversed.
// 9-july-1993          dlegg     Change call to TA0020 with
//                                ABND to RETN.
// 15-july-1993         dlegg     Add sgrp to initialize all
//                                records used by appl.
// *10/01/93  CHELLM    CSP 4.1 Conversion.
// *Y2KFIX   12/02/97  DKENNY  Y2K MODIFICATIONS MADE:
// *                   Application regenerated to pick up new
// *                   XX0XS01.
// *********************
Program KM0H type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KM0HW01 KM0HW01; // record
  KUKREC KUKREC; // record
  KUZREC KUZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  XA0AW02 XA0AW02; // record
  XCTREC XCTREC; // record
  XGPREC XGPREC; // record
  XSTREC XSTREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KIZTBL {deleteAfterUse = yes}; // table
  use KM0HM.KM0HM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KM0H000: KM0H000();
    goto KM0H010;
    KM0H010: KM0H010();
    ;
    ;
    goto KM0H010;
    ;
    ;
  end // end main
end // end KM0H

// km0a initialization
Function KM0H000()
   /* ************************************************************/
   /* *    Initialize the KM0H application...*/
   /* *       1. Check that the user entered thru the CSP MENU*/
   /* *          (XSENTRY)*/
   /* *       2. Clear all of the records used*/
   /* *       3. check for, and handle, fast-path entry*/
   /* **/
   /* **/
   /* ************************************************************/
  ;
  ;
  ;
  XSENTRY(); /* check if entered properly*/
  ;
  XSSEGTR(); /* set segmented trans id*/
  ;
  KM0HS-INIT-RECS();
  ;
  KM0HS00(); /* handle fast-path entry*/
  ;
end // end KM0H000

// credit menu
Function KM0H010()
  ;
   /* initialize the screen variables*/
  ;
  ;
  if (converseVar.validationMsgNum == 0 /* if there are no errors*/
   && COMMAREA.CASECRC == 0)           
    if (COMMAREA.CAFROMAP != "KM0H") /* and we're coming from another appl*/
      set KM0HM001 initial; /* then clear the screen*/
      COMMAREA.CAFROMAP = "KM0H"; /* and set from-appl to this appl*/
    else /* we're coming from this appl*/
        /* next sentence               so we don't clear the screen*/
    end
  else /* there are errors*/
    if (COMMAREA.CASECRC != 0)
      KM0HM001.CAMSG = COMMAREA.CAMSG;
      set KM0HM001 alarm;
    else
      /* next sentence;*/
    end
  end
  ;
  ;
  KM0HM001.XXXSCRDT = VGVar.currentShortGregorianDate;
  ;
  ;
  converse KM0HM001 ;
  ;
  ;
  KM0HM001.CAMSG = " ";
  ;
  ;
  KM0HS70(); /* handle special entry (fast-path, pf-keys)*/
  ;
  ;
  if (converseVar.validationMsgNum == 0
   && COMMAREA.CASECRC == 0)
    KM0HS01();
  end
  ;
  exit stack;
  ;
  ;
  ;
end // end KM0H010

// Init records
Function KM0HS-INIT-RECS()
  /* ****************************************************************/
  /* *               Initialize records used by KM0H*/
  /* ****************************************************************/
  ;
  set KM0HW01 empty;
  set KUKREC empty;
  set KUZREC empty;
  set XGPREC empty;
  set XCTREC empty;
  set XSTREC empty;
  set XA0AW02 empty;
  set SQLCA empty;
  set ERRSQLCA empty;
  set TA1REC empty;
  set XX0XW01 empty;
end // end KM0HS-INIT-RECS

// handle fast path entry to km0h
Function KM0HS00()
   /* ************************************************************/
   /* *  Check the commarea fast-path item field...If it's valid*/
   /* *  then move the item field to the screen parent-company-id*/
   /* *  otherwise set up an 'invalid' error message.*/
   /* *  The item field is invalid if it's length is more than*/
   /* *  7 characters, or if it contains an '.' (signifying some*/
   /* *  sub-option has been specified).*/
   /* ************************************************************/
  ;
  set KM0HM001.CAITEM normal;
  ;
  KM0HM001.CAITEM = COMMAREA.CAITEM;
  ;
  ;
  if (COMMAREA.CAITEM != " ")
    KM0HW01.KM0HWIN1 = 1;
    while (KM0HW01.KM0HWIN1 <= 20 /* for the length of the item field*/
     && COMMAREA.CAITMLTR[KM0HWIN1] != " ") /* space delimits the item*/
      if (COMMAREA.CAITMLTR[KM0HWIN1] == ".")
                                   /* if a sub-option is specified*/
        converseLib.validationFailed(113); /* too many fields*/
        KM0HW01.KM0HWIN1 = 21; /* force exit from loop*/
      else
        if (KM0HW01.KM0HWIN1 > 7) /* or the parent number is too long*/
          converseLib.validationFailed(124); /* it's an invalid fast-path item*/
          KM0HW01.KM0HWIN1 = 21; /* force exit from loop*/
        else
          KM0HW01.KM0HWIN1 = KM0HW01.KM0HWIN1 + 1; /* check the next char*/
        end
      end
    end
  else
    return;
  end
  ;
  ;
  if (converseVar.validationMsgNum == 0)
    if (COMMAREA.CAITEM is numeric)
      KM0HM001.KUKPCOID = COMMAREA.CAITEM;
    else
      KM0HM001.KUKPCOID = 0;
    end
    KM0HS01(); /* validate the fast-path option(s)*/
    KM0HM001.CAITEM = " ";
  else
    set KM0HM001.CAITEM cursor, bold;
  end
  ;
  COMMAREA.CAITEM = " ";
end // end KM0HS00

// edit cc0mm001 entry
Function KM0HS01()
  ;
  if (KM0HM001.KUKPCOID > 0)
    if (KM0HM001.KUKPCOID != KM0HW01.KUKPCOID)
      KM0HS25(); /* get parent record*/
      if (converseVar.validationMsgNum == 0)
        KM0HS30(); /* move address to screen*/
        KM0HW01.KM0HWESW = "DO EDIT";
        set KM0HM001.XXXADDR1 cursor;
        converseLib.validationFailed(129); /* ok, make changes*/
      end
    else
      KM0HW01.KM0HWESW = "DO EDIT";
      KM0HS05(); /* edit the address*/
    end
  else
    converseLib.validationFailed(114); /* this field is required*/
  end
  ;
  ;
  return;
  ;
  ;
end // end KM0HS01

// get store
Function KM0HS05()
   /* ************************************************************/
   /* *   Edit the address:*/
   /* *      1. reset the address to normal*/
   /* *      2. edit the address using xa0a*/
   /* *      3. set up any errors*/
   /* *      4. return to calling proc.*/
   /* ************************************************************/
  ;
  ;
  set KM0HM001.XXXADDR1 normal;
  set KM0HM001.XXXADDR2 normal;
  set KM0HM001.XXXADDR3 normal;
  set KM0HM001.XXXCITY normal;
  set KM0HM001.XXXZIP normal;
  set KM0HM001.XCTCD normal;
  set KM0HM001.XSTCD normal;
  ;
  ;
  move KM0HM001 to XA0AW02 withV60Compat;
  ;
  XA0AW02.XA0AWFNC = "E ";
  ;
  ;
  call "XA0A" (XA0AW02) {isNoRefresh = yes};
  ;
  if (XA0AW02.XA0AWERR[1] > 0)
    set KM0HM001.XXXADDR1 cursor, bold;
    if (XA0AW02.XA0AWERR[1] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[1]);
    end
  end
  ;
  if (XA0AW02.XA0AWERR[2] > 0)
    set KM0HM001.XXXADDR1 cursor, bold;
    if (XA0AW02.XA0AWERR[2] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[2]);
    end
  else
    if (XA0AW02.XA0AWERR[3] > 0)
      set KM0HM001.XXXADDR2 cursor, bold;
      if (XA0AW02.XA0AWERR[3] == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(XA0AW02.XA0AWERR[3]);
      end
    else
      if (XA0AW02.XA0AWERR[4] > 0)
        set KM0HM001.XXXADDR3 cursor, bold;
        if (XA0AW02.XA0AWERR[4] == 9999)
          converseLib.validationFailed();
        else
          converseLib.validationFailed(XA0AW02.XA0AWERR[4]);
        end
      else
        if (XA0AW02.XA0AWERR[5] > 0)
          set KM0HM001.XXXCITY cursor, bold;
          if (XA0AW02.XA0AWERR[5] == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(XA0AW02.XA0AWERR[5]);
          end
        else
          if (XA0AW02.XA0AWERR[6] > 0)
            set KM0HM001.XSTCD cursor, bold;
            if (XA0AW02.XA0AWERR[6] == 9999)
              converseLib.validationFailed();
            else
              converseLib.validationFailed(XA0AW02.XA0AWERR[6]);
            end
          else
            if (XA0AW02.XA0AWERR[7] > 0)
              set KM0HM001.XXXZIP cursor, bold;
              if (XA0AW02.XA0AWERR[7] == 9999)
                converseLib.validationFailed();
              else
                converseLib.validationFailed(XA0AW02.XA0AWERR[7]);
              end
            else
              if (XA0AW02.XA0AWERR[8] > 0)
                set KM0HM001.XCTCD cursor, bold;
                if (XA0AW02.XA0AWERR[8] == 9999)
                  converseLib.validationFailed();
                else
                  converseLib.validationFailed(XA0AW02.XA0AWERR[8]);
                end
              else
              end
            end
          end
        end
      end
    end
  end
  ;
  move XA0AW02 to KM0HM001 withV60Compat;
  ;
  ;
  if (KM0HW01.KM0HWESW == "UPDATE")
    /* next sentence*/
  else
    if (converseVar.validationMsgNum == 0)
      KM0HW01.KM0HWESW = "EDIT OK";
      converseLib.validationFailed(22); /* press pf12 to confirm*/
    end
  end
  ;
end // end KM0HS05

// get company
Function KM0HS25()
  ;
  KUKREC.KUKPCOID = KM0HM001.KUKPCOID;
  ;
  ;
  call "IO0030" ("S ", SQLCA, KUKREC) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KM0HW01.KUKPCOID = KUKREC.KUKPCOID;
    move KUKREC to XA0AW02 withV60Compat;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(123); /* parent not on file*/
      return;
    else
      XSKUS-DB2-RETN(); /* abort routine*/
    end
  end
end // end KM0HS25

// get address
Function KM0HS30()
  ;
  move KUKREC to KM0HM001 withV60Compat;
  ;
  ;
  ;
end // end KM0HS30

// update parent co. address
Function KM0HS60()
  ;
  KM0HW01.KUZDATA = KUKREC.KUKGRP; /* save before image*/
  ;
  ;
  ;
  move XA0AW02 to KUKREC withV60Compat;
  ;
  XX0XS01(); /* get date and time*/
  KUKREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUKREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  if (KM0HW01.KM0HWESW == "UPDATE")
    call "IO0030" ("U ", SQLCA, KUKREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      KUZREC.KUZTYPE = "C"; /* change*/
      KUZREC.XXXTBLNM = "VPARNT01"; /* parent*/
      KM0HS80(); /* write audit records*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(122); /* parent updated since last ref*/
        return;
      else
        XSKUS-DB2-RETN(); /* abort routine*/
      end
    end
  end
end // end KM0HS60

// handle any special entries
Function KM0HS70()
   /* ************************************************************/
   /* *   "Special Entries" are: 1. An entry in the fast-path*/
   /* *option field (catoap)*/
   /* *2. Any pf key*/
   /* ************************************************************/
  ;
  ;
  ;
  ;
  KM0HW01.CATOAP = KM0HM001.CATOAP;
  ;
  if (converseVar.eventKey is enter)
    if (KM0HW01.CATOAP != " ")
      KM0HS71(); /* handle fast-path option entry*/
    else
      return; /* no special functions...go back*/
    end
  else /* something other than 'enter' was pressed*/
    if (converseVar.eventKey is pa2) /* if want to refresh screen*/
      KM0HW01.KUKPCOID = 0; /* get the address*/
      KM0HS01();
      exit stack;
    else
      if (KM0HW01.CATOAP != " ")
        converseLib.validationFailed(29); /* can't use fast-path and pf-key*/
        set KM0HM001.CATOAP cursor, bold;
        exit stack; /* reconverse this screen*/
      else
        KM0HS72(); /* handle km0hm002 pf key entry*/
      end
    end
  end
  ;
  ;
end // end KM0HS70

// handle cc0mm001 option entry
Function KM0HS71()
  ;
  if (KM0HM001.CATOAP != " ")
    COMMAREA.CATOAP = KM0HM001.CATOAP;
    COMMAREA.CAITEM = KM0HM001.CAITEM;
    XSEXIT(); /* transfer to requested appl.*/
    set KM0HM001.CATOAP cursor, bold;
    exit stack;
  end
  ;
end // end KM0HS71

// handle pf key entry
Function KM0HS72()
   /* ************************************************************/
   /* *   We get here because a pf-key has been entered...*/
   /* *   The valid pf-keys are:   pf1, pf3, pf4, pf5, pf12*/
   /* **/
   /* **/
   /* ***********************************************************/
  ;
  ;
  ;
   /* IF KM0HW01.KMEDITSW = 'EDIT OK' ;if there's maint pending*/
    /* IF EZEAID IS PF1;*/
      /* OR EZEAID IS PF3;*/
     /* OR EZEAID IS PF4;*/
      /* OR EZEAID IS PF5;*/
      /* MOVE 47 TO EZEMNO;can't exit appl w/maint pending*/
      /* EZEFLO;*/
    /* END ;*/
   /* END ;*/
  ;
  ;
  if (converseVar.eventKey is pf3)
    KM0HS73();
  end /* handle entry of pf3*/
  if (converseVar.eventKey is pf5)
    KM0HS75();
  end /* handle entry of pf5*/
  if (converseVar.eventKey is pf4)
    XSPF4();
  end /* handle entry of pf4*/
  if (converseVar.eventKey is pf1)
    XSPF1();
  end /* handle entry of pf1*/
  if (converseVar.eventKey is pf12) /* if user wants to update*/
    if (KM0HW01.KM0HWESW == "EDIT OK") /* and the edits were ok*/
      KM0HW01.KM0HWESW = "UPDATE"; /* set switch to update*/
      KM0HS05(); /* edit the screen*/
      if (converseVar.validationMsgNum == 0) /* if everything's ok*/
        KM0HS60(); /* update the record*/
        if (converseVar.validationMsgNum == 0)
          converseLib.validationFailed(29); /* record updated*/
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.commit();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
          set KM0HM001.KUKPCOID cursor;
        else
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.rollback();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
        end
      end
    else
      converseLib.validationFailed(101); /* must complete edit*/
    end
  end
  ;
  if (COMMAREA.CASECRC == 0
   && converseVar.validationMsgNum == 0)
    converseLib.validationFailed(3); /* pfkey not supported*/
  end
  ;
  exit stack;
  ;
end // end KM0HS72

// handle pf3 key
Function KM0HS73()
   /* ************************************************************/
   /* *   For this application, pf3 takes you back to*/
   /* *   the Customer Address Maintenance Menu (km0a).*/
   /* **/
   /* ************************************************************/
  ;
  COMMAREA.CATOAP = "KM0A"; /* set up the commarea to-application*/
  XSEXIT(); /* and go to the address maint. menu*/
  ;
end // end KM0HS73

// handle pf5 entry
Function KM0HS75()
   /* ************************************************************/
   /* *   For this application, pf5 takes you back to*/
   /* *   the Customer Main Menu (ku0m).*/
   /* **/
   /* ************************************************************/
  ;
  COMMAREA.CATOAP = "KU0M"; /* set up the commarea to-application*/
  XSEXIT(); /* and go to the address maint. menu*/
  ;
end // end KM0HS75

// write audit records
Function KM0HS80()
  ;
  ;
  KUZREC.KUZDATA = KUKREC.KUKGRP; /* move after data*/
  ;
  KUZREC.XXXUSER = COMMAREA.CAUSERID; /* move user id to audit rec*/
  KUZREC.KUCCOID = KM0HW01.KUKPCOID; /* move co id to audit rec*/
  ;
   /* note: change time should be correct, xx0x was called just*/
        /* before update occured.*/
  ;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT; /* move set up date to audit rec*/
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* move time to audit rec*/
  KUZREC.KUZBFCD = "A"; /* move after-code*/
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM0H   ";
    TA1REC.TA1LOCAT[1] = "KM0HS80  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VPARNT01 ";
    TA1REC.TA1MAP = "KM0HM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VPARNT01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod to add*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    XSKUS-DB2-RETN(); /* abort*/
  end
  ;
  ;
  KUZREC.KUZBFCD = "B"; /* move before-code*/
  KUZREC.KUZDATA = KM0HW01.KUZDATA; /* move data to audit record*/
  KUZREC.XXXUSER = COMMAREA.CAUSERID; /* move user id to audit rec*/
  KUZREC.KUCCOID = KM0HW01.KUKPCOID; /* move co id to audit rec*/
  ;
   /* note: change time should be correct, xx0x was called just*/
        /* before update occured.*/
  ;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT; /* move set up date to audit rec*/
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* move time to audit rec*/
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod to add*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    XSKUS-DB2-RETN(); /* abort*/
  end
  ;
end // end KM0HS80

Record KM0HW01 type basicRecord
  5 KM0HWGRP KM0HWGRP ; 
    10 KM0HWSGP KM0HWSGP ; 
    10 CAMSG CAMSG ; 
    10 KM0HWESW KM0HWESW ; 
    10 KM0HWBSW KM0HWBSW ; 
    10 KM0HWIN1 KM0HWIN1 ; 
    10 KM0HWIN2 KM0HWIN2 ; 
    10 KUKPCOID KUKPCOID ; 
    10 CATOAP CATOAP ; 
    10 KUZDATA KUZDATA ; 
end // end KM0HW01

// build screen switch
DataItem KM0HWBSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// edit switch
DataItem KM0HWESW char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// credit working storage
DataItem KM0HWGRP char(509)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index
DataItem KM0HWIN1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem KM0HWIN2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// statement group name
DataItem KM0HWSGP char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

