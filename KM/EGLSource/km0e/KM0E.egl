package km0e;

import corpcom1.CAMSG;
import corpcom1.CATOAP;
import corpcom2.XGPREC;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSKUS-DB2-RETN;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.*;
import corpcom6.SQLCA;
import corpx2.XXXZIP;
import ku.common.KUCBLAID;
import ku.common.KUCCCAID;
import ku.common.KUCCOAID;
import ku.common.KUCCOID;
import ku.common.KUCCONM;
import ku.common.KUCREC;
import ku.common.KUKPCOID;
import ku.common.KULAAID;
import ku.common.KULREC;
import ku.common.KUMREC;
import ku.common.KUNREC;
import ta.common.TA1REC;
import xa.common.XA0AW02;
//*** PROGRAM=KM0E ****
// ;***********************************************************
// ;*              Display a Particular address
// ;*==========================================================
// ;*                   maintenance log
// ;*----------------------------------------------------------
// ;*   date      int              description
// ;*----------------------------------------------------------
// ;* 02/19/88    clt       added county code
// ;* 04/14/88    clt       changed csp county code to xcycd
// ;* 11/17/88    jbw       added noncsp opt to calls
// ;* 11/17/88    jbw       added xssegtr logic
// :* 06/08/89    clt       change cust nbr to alpha
// :* 01/16/90    jfiat     db changes
// :* 10/18/90    dsalzw    remove blgrp
// 7-july-1993          dlegg      Change call to TA0020 with
//                                 ABND to RETN. KM0ES20,S35.
// 15-july-1993         dlegg      Add sgrp to initialize all
//                                 records used by appl.
// :* 10/01/93    chellm    CSP 4.1 Conversion
// *********************
Program KM0E type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KM0EW01 KM0EW01; // record
  KUCREC KUCREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  XA0AW02 XA0AW02; // record
  XGPREC XGPREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KM0EM.KM0EM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KM0E000: KM0E000();
    goto KM0E010;
    KM0E010: KM0E010();


    goto KM0E010;


  end // end main
end // end KM0E

// km0a initialization
Function KM0E000()

  XSENTRY(); /* check if entered properly*/

  XSSEGTR(); /* set segmented trans id*/

  KM0ES-INIT-RECS();

  KM0EW01.KM0EWBSW = "N";
  KM0EM001.KUMSTRID = 0;


  KM0ES00(); /* handle fast-path entry*/

end // end KM0E000

// credit menu
Function KM0E010()

   /* initialize the screen variables*/


  if (converseVar.validationMsgNum == 0
   && COMMAREA.CASECRC == 0)
    if (COMMAREA.CAFROMAP == "KM0E")
      /* next sentence*/
    else
      COMMAREA.CAFROMAP = "KM0E";
      set KM0EM001 initial;
    end
  else
    if (COMMAREA.CASECRC != 0)
      KM0EM001.CAMSG = COMMAREA.CAMSG;
      set KM0EM001 alarm;
    else
      set KM0EM001 alarm;
    end
  end


  KM0EM001.XXXSCRDT = VGVar.currentShortGregorianDate;


  converse KM0EM001 ;


  KM0EM001.CAMSG = " ";

  set KM0EM001.KUCCOID normal;
  set KM0EM001.KUMSTRID normal;
  set KM0EM001.XXXSCROP cursor, normal;



  KM0ES70(); /* handle special entry (fast-path, pf-keys)*/


  if (converseVar.validationMsgNum != 0
   || COMMAREA.CASECRC != 0)
    exit stack;
  else
    if (KM0EM001.XXXSCROP == 1
     || KM0EM001.XXXSCROP == 2
     || KM0EM001.XXXSCROP == 3)
      KM0ES06(); /* validate views 1,2 & 3*/
      if (converseVar.validationMsgNum == 0)
        KM0ES05(); /* do views 1, 2 and/or 3*/
      else
        exit stack; /* go show the error*/
      end
    else
      if (KM0EM001.XXXSCROP == 4
       || KM0EM001.XXXSCROP == 5)
        KM0ES11(); /* validate views 4 and 5*/
        if (converseVar.validationMsgNum == 0)
          KM0ES10(); /* do views 4 and/or 5*/
        else
          exit stack; /* go show the error*/
        end
      else
        converseLib.validationFailed(115); /* unknown option*/
        set KM0EM001.XXXSCROP cursor, bold;
        exit stack;
      end
    end
  end



  exit stack;


end // end KM0E010

// Init records
Function KM0ES-INIT-RECS()
  /* *********************************************************************/
  /* *            Initialize records used by KM0ES*/
  /* *********************************************************************/

  set KM0EW01 empty;
  set KUCREC empty;
  set KUMREC empty;
  set KUNREC empty;
  set KULREC empty;
  set XGPREC empty;
  set XA0AW02 empty;
  set SQLCA empty;
  set ERRSQLCA empty;
  set TA1REC empty;
end // end KM0ES-INIT-RECS

// handle fast path entry
Function KM0ES00()
  if (COMMAREA.CAITEM != " ")
    COMMAREA.CAFROMAP = "KM0E";
    KM0EW01.KM0EWCID = 0;
    KM0EW01.KM0EWSID = 0;
    KM0EW01.KM0EWDEP = 0;
    KM0EW01.KM0EWGPC = " ";
    KM0EW01.KM0EWIN1 = 1;
    KM0EW01.KM0EWIN2 = 1;
    KM0EW01.KM0EWFNO = 1;
    while (KM0EW01.KM0EWIN1 <= 20
     && COMMAREA.CAITMLTR[KM0EWIN1] != " ")
      if (COMMAREA.CAITMLTR[KM0EWIN1] == ".")
        KM0EW01.KM0EWFNO = KM0EW01.KM0EWFNO + 1;
        KM0EW01.KM0EWIN2 = 0;
      else
        KM0ES01(); /* move each letter*/
        if (converseVar.validationMsgNum == 0)
          /* next sentence*/
        else
          KM0EM001.CAITEM = COMMAREA.CAITEM;
          set KM0EM001.CAITEM cursor, bold;
          return;
        end
      end
      KM0EW01.KM0EWIN1 = KM0EW01.KM0EWIN1 + 1;
      KM0EW01.KM0EWIN2 = KM0EW01.KM0EWIN2 + 1;
    end
    KM0EM001.KUCCOID = KM0EW01.KM0EWCID;
    KM0EM001.KUMSTRID = KM0EW01.KM0EWSID;
    COMMAREA.CAITEM = " ";
    KM0ES05(); /* validate the fast-path option(s)*/
  end
end // end KM0ES00

// move each fast-path letter
Function KM0ES01()
  if (KM0EW01.KM0EWFNO == 1)
    if (KM0EW01.KM0EWIN2 <= 1)
      KM0EM001.XXXSCROP = COMMAREA.CAITMLTR[KM0EWIN1];
    else
      converseLib.validationFailed(126); /* invalid - option too long*/
    end
  else
    if (KM0EW01.KM0EWFNO == 2)
      if (KM0EW01.KM0EWIN2 <= 7)
        KM0EW01.KM0EWCLT[KM0EWIN2] = COMMAREA.CAITMLTR[KM0EWIN1];
      else
        converseLib.validationFailed(109); /* invalid - co id too long*/
      end
    else
      if (KM0EW01.KM0EWFNO == 3)
        if (KM0EW01.KM0EWIN2 <= 4)
          KM0EW01.KM0EWSLT[KM0EWIN2] = COMMAREA.CAITMLTR[KM0EWIN1];
        else
          converseLib.validationFailed(110); /* invalid - store id too long*/
        end
      else
        if (KM0EW01.KM0EWFNO == 4)
          if (KM0EW01.KM0EWIN2 <= 2)
            KM0EW01.KM0EWDLT[KM0EWIN2] = COMMAREA.CAITMLTR[KM0EWIN1];
          else
            converseLib.validationFailed(111); /* invalid - dept too long*/
          end
        else
          if (KM0EW01.KM0EWFNO == 5)
            if (KM0EW01.KM0EWIN2 <= 2)
              KM0EW01.KM0EWGLT[KM0EWIN2] = COMMAREA.CAITMLTR[KM0EWIN1];
            else
              converseLib.validationFailed(112); /* invalid - gpc too long*/
            end
          else
            if (KM0EW01.KM0EWFNO > 6)
              converseLib.validationFailed(113); /* invalid - too many items*/
            end
          end
        end
      end
    end
  end
end // end KM0ES01

// edit entry
Function KM0ES05()

  if (KM0EM001.KUCCOID > 0)
    KM0ES20(); /* get company*/
    if (converseVar.validationMsgNum == 0)
      KM0ES25(); /* get address*/
      if (converseVar.validationMsgNum == 0)
        KM0ES30(); /* move address to screen*/
      else
        exit stack;
      end
    else
      exit stack;
    end
  else
    converseLib.validationFailed(114); /* this field required*/
    set KM0EM001.KUCCOID cursor, bold;
    exit stack;
  end
end // end KM0ES05

// validate views 1 2 & 3
Function KM0ES06()
  if (KM0EM001.KUCCOID != 0)
    KM0EM001.KUMSTRID = 0;
    return; /* it's valid, go back*/
  else
    converseLib.validationFailed(114); /* company required*/
    set KM0EM001.KUCCOID cursor, bold;
  end
end // end KM0ES06

// view store/ship group address
Function KM0ES10()
  KM0ES35(); /* get store*/
  if (converseVar.validationMsgNum == 0)
    KM0ES25(); /* get address*/
    if (converseVar.validationMsgNum == 0)
      KM0ES20(); /* get company*/
      if (converseVar.validationMsgNum == 0)
        KM0ES30(); /* move address to screen*/
      else
        exit stack;
      end
    else
      exit stack;
    end
  else
    converseLib.validationFailed(116);
    exit stack;
  end
end // end KM0ES10

// validate views 4 and 5
Function KM0ES11()
  set KM0EM001.KUCCOID normal;
  set KM0EM001.KUMSTRID normal;


  if (KM0EM001.KUCCOID != 0)
    if (KM0EM001.KUMSTRID != 0)
      return; /* it's valid, go back*/
    else
      KM0EM001.KUMSTRID = 0; /* store required*/
    end
  else
    converseLib.validationFailed(114); /* company required*/
    set KM0EM001.KUCCOID cursor, bold;
  end
end // end KM0ES11

// get company
Function KM0ES20()

  KUCREC.KUCCOID = KM0EM001.KUCCOID;


  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0)
    KM0EW01.KUCCOID = KUCREC.KUCCOID;
    KM0EW01.KUCCOAID = KUCREC.KUCCOAID;
    KM0EW01.KUCCOAID = KUCREC.KUCCCAID;
    KM0EW01.KUCBLAID = KUCREC.KUCBLAID;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(118);
      return;
    else
      XSKUS-DB2-RETN(); /* abort routine*/
    end
  end
end // end KM0ES20

// get address
Function KM0ES25()

  XA0AW02.KUCCOID = KM0EM001.KUCCOID;
  XA0AW02.XA0AWFNC = "G";

  if (KM0EM001.XXXSCROP == 1)
    if (KUCREC.KUCCOID == 0)
      converseLib.validationFailed(141); /* no company address id listed*/
      return;
    else
      XA0AW02.KULAAID = KUCREC.KUCCOAID;
    end
  else
    if (KM0EM001.XXXSCROP == 2)
      if (KUCREC.KUCCCAID == 0)
        converseLib.validationFailed(140); /* no alternate addr id listed*/
        return;
      else
        XA0AW02.KULAAID = KUCREC.KUCCCAID;
      end
    else
      if (KM0EM001.XXXSCROP == 3)
        if (KUCREC.KUCBLAID == 0)
          converseLib.validationFailed(144); /* no bill group  address id listed*/
          return;
        else
          XA0AW02.KULAAID = KUCREC.KUCBLAID;
        end
      else
        if (KM0EM001.XXXSCROP == 4)
          if (KUMREC.KUMSTAID == 0)
            converseLib.validationFailed(142); /* no store address id listed*/
            return;
          else
            XA0AW02.KULAAID = KUMREC.KUMSTAID;
          end
        else
          if (KM0EM001.XXXSCROP == 5)
            if (KUMREC.KUMSHAID == 0)
              converseLib.validationFailed(143); /* no ship group  address id listed*/
              return;
            else
              XA0AW02.KULAAID = KUMREC.KUMSHAID;
            end
          end
        end
      end
    end
  end

  call "XA0A" (XA0AW02) {isNoRefresh = yes};


  if (XA0AW02.XA0AWERR[1] == 0)
    move XA0AW02 to KM0EM001 withV60Compat;
  else
    if (XA0AW02.XA0AWERR[1] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[1]);
    end
    return;
  end
end // end KM0ES25

// move address to screen
Function KM0ES30()

  KM0EM001.KUCCONM = KUCREC.KUCCONM;
  KM0EM001.KUCCOANM = KUCREC.KUCCOANM;

  KM0EM001.KULAAID = XA0AW02.KULAAID;
  KM0EM001.KM0EM-ADDR1 = XA0AW02.XXX-ADDR1;
  KM0EM001.KM0EM-ADDR2 = XA0AW02.XXX-ADDR2;
  KM0EM001.KM0EM-ADDR3 = XA0AW02.XXX-ADDR3;
  KM0EM001.XXXCITY = XA0AW02.XXXCITY;
  KM0EM001.XCYCD = XA0AW02.XCYCD;
  KM0EM001.XSTCD = XA0AW02.XSTCD;
  KM0EM001.XSTDESC = XA0AW02.XSTDESC;
  KM0EM001.XCTCD = XA0AW02.XCTCD;
  KM0EM001.XCTDESC = XA0AW02.XCTDESC;


end // end KM0ES30

// get store address
Function KM0ES35()

  KUMREC.KUCCOID = KM0EM001.KUCCOID;
  KUMREC.KUMSTRID = KM0EM001.KUMSTRID;

  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(11);
      return;
    else
      XSKUS-DB2-RETN(); /* abort routine*/
    end
  end
end // end KM0ES35

// handle any special entries
Function KM0ES70()
  KM0EW01.CATOAP = KM0EM001.CATOAP;

  if (converseVar.eventKey is enter)
    if (KM0EW01.CATOAP != " ")
      KM0ES71(); /* handle fast-path option entry*/
    else
      return; /* no special functions...go back*/
    end
  else
    if (converseVar.eventKey is pa2)
      COMMAREA.CATOAP = "KM0E";
      XSEXIT();
    else
      if (KM0EW01.CATOAP != " ")
        converseLib.validationFailed(29); /* can't use fast-path and pf-key*/
        set KM0EM001.CATOAP cursor, bold;
        exit stack; /* reconverse this screen*/
      else
        KM0ES72(); /* handle cc0mm001 pf key entry*/
      end
    end
  end



end // end KM0ES70

// handle fast-path option entry
Function KM0ES71()

  if (KM0EM001.CATOAP != " ")
    COMMAREA.CATOAP = KM0EM001.CATOAP;
    COMMAREA.CAITEM = KM0EM001.CAITEM;
    XSEXIT(); /* transfer to requested appl.*/
    set KM0EM001.CATOAP cursor, bold;
    exit stack;
  end

end // end KM0ES71

// handle any pf key entry
Function KM0ES72()



  if (converseVar.eventKey is pf3)
    KM0ES73();
  end
  if (converseVar.eventKey is pf4)
    XSPF4();
  end
  if (converseVar.eventKey is pf5)
    KM0ES75();
  end
  if (converseVar.eventKey is pf1)
    XSPF1();
  end


  if (COMMAREA.CASECRC == 0)
    converseLib.validationFailed(3); /* pfkey not supported*/
  end


  exit stack;

end // end KM0ES72

// handle pf3 key
Function KM0ES73()
  COMMAREA.CATOAP = "KM0A"; /* go to master menu*/
  XSEXIT();

end // end KM0ES73

// handle pf5 entry
Function KM0ES75()
   /* GET KM0HPF5*/
   /* ************************************************************/
   /* *   For this application, pf5 takes you back to*/
   /* *   the Customer Main Menu (ku0m).*/
   /* **/
   /* ************************************************************/

  COMMAREA.CATOAP = "KU0M"; /* set up the commarea to-application*/
  XSEXIT(); /* and go to the address maint. menu*/

end // end KM0ES75

Record KM0EW01 type basicRecord
  5 KM0EWREC KM0EWREC ; 
    10 KM0EWGRP KM0EWGRP ; 
    10 CAMSG CAMSG ; 
    10 KM0EWBSW KM0EWBSW ; 
    10 KM0EWIN1 KM0EWIN1 ; 
    10 KM0EWIN2 KM0EWIN2 ; 
    10 KULAAID KULAAID ; 
    10 XXXZIP XXXZIP ; 
    10 KM0EWZIP KM0EWZIP ; 
      15 KM0EWZLT KM0EWZLT [10] ; 
    10 KUCCOID KUCCOID ; 
    10 KM0EWCID KM0EWCID ; 
      15 KM0EWCLT KM0EWCLT [7] ; 
    10 KM0EWAID KM0EWAID ; 
      15 KM0EWALT KM0EWALT [4] ; 
    10 KM0EWSID KM0EWSID ; 
      15 KM0EWSLT KM0EWSLT [4] ; 
    10 KM0EWDEP KM0EWDEP ; 
      15 KM0EWDLT KM0EWDLT [2] ; 
    10 KM0EWGPC KM0EWGPC ; 
      15 KM0EWGLT KM0EWGLT [2] ; 
    10 KUCCONM KUCCONM ; 
    10 KUKPCOID KUKPCOID ; 
    10 KUCCCAID KUCCCAID ; 
    10 KUCBLAID KUCBLAID ; 
    10 KUCCOAID KUCCOAID ; 
    10 KM0EWFNO KM0EWFNO ; 
    10 CATOAP CATOAP ; 
end // end KM0EW01

// working storage number
DataItem KM0EWAID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// individual numbers
DataItem KM0EWALT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// build screen switch
DataItem KM0EWBSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage number
DataItem KM0EWCID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// individual numbers
DataItem KM0EWCLT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws department id
DataItem KM0EWDEP num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// individual dept numbers
DataItem KM0EWDLT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of fields
DataItem KM0EWFNO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// individual gpc letters
DataItem KM0EWGLT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws gen prod class code
DataItem KM0EWGPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// statement group name
DataItem KM0EWGRP char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index
DataItem KM0EWIN1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem KM0EWIN2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// credit working storage
DataItem KM0EWREC char(193)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws store id
DataItem KM0EWSID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// individual store numbers
DataItem KM0EWSLT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KM0EWZIP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// individual zip-code letters
DataItem KM0EWZLT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

