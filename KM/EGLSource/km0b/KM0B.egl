package km0b;

import corpcom1.CAMSG;
import corpcom1.CATOAP;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSKUS-DB2-RETN;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.*;
import corpcom6.SQLCA;
import corpx2.XXXZIP;
import ku.common.KUCCOID;
import ku.common.KUCCONM;
import ku.common.KUCREC;
import ku.common.KULAAID;
import ku.common.KULREC;
import ta.common.TA1REC;
import vv.common.VLADDR01;
//*** PROGRAM=KM0B ****
// ;***********************************************************
// ;*              View All Customer Addresses
// ;*
// ;*==========================================================
// ;*                   maintenance log
// ;*----------------------------------------------------------
// ;*   date     int              description
// ;*----------------------------------------------------------
// ;* 02/19/88   clt    added county code
// ;* 03/23/88   clt    complete error diagnostics
// ;* 03/29/88   clt    fix subscript error
// ;* 04/14/88   clt    changed csp county code to xcycd
// ;* 07/08/88   clt    checked for zero company id
// ;* 11/16/88   jbw    added noncsp opt to calls
// ;* 11/16/88   jbw    added xssegtr logic
// ;* 01/16/90 jfiat   db changes
// 7-july-1993          dlegg      Change call to TA0020 from
//                                 ABND to RETN. KM0BS11,S91,
//                                 S92,S93. Added KM0BS-CALL-
//                                 RETN.
// 15-july-1993         dlegg      Add sgrp to initialize all
//                                 records used by appl.
// *********************
Program KM0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KM0BW01 KM0BW01; // record
  KM0BW02 KM0BW02; // record
  KUCREC KUCREC; // record
  KULREC KULREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VLADDR01 VLADDR01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KM0BM.KM0BM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KM0B000: KM0B000();
    goto KM0B010;
    KM0B010: KM0B010();


    goto KM0B010;



  end // end main
end // end KM0B

// km0a initialization
Function KM0B000()

  XSENTRY(); /* check if entered properly*/

  XSSEGTR(); /* set segmented trans id*/

  KM0BS-INIT-RECS();

  KM0BW01.KM0BWBSW = "N";
  set KM0BM001.KM0BW1ST skip;

  KM0BS00(); /* handle fast-path entry*/

end // end KM0B000

// credit menu
Function KM0B010()

   /* initialize the screen variables*/

  if (converseVar.validationMsgNum == 0
   && COMMAREA.CASECRC == 0)
    if (KM0BW01.KM0BWBSW == "Y")
      KM0BS10(); /* build the km0am003 screen*/
    else
      /* next sentence*/
    end
  else
    if (COMMAREA.CASECRC != 0)
      KM0BM001.CAMSG = COMMAREA.CAMSG;
      set KM0BM001 alarm;
    else
      set KM0BM001 alarm;
    end
  end


  KM0BM001.XXXSCRDT = VGVar.currentShortGregorianDate;

  KM0BS12(); /* protect fields*/


  converse KM0BM001 ;


  KM0BM001.CAMSG = " ";


  KM0BS70(); /* handle special entry (fast-path, pf-keys)*/


  if (converseVar.validationMsgNum == 0
   && COMMAREA.CASECRC == 0)
    KM0BS05(); /* edit cc0mm001 entry*/
  end



  exit stack;


end // end KM0B010

// Init records
Function KM0BS-INIT-RECS()
  /* **********************************************************************/
  /* *              Initialize all records used by KM0B*/
  /* **********************************************************************/

  set KM0BW01 empty;
  set KULREC empty;
  set VLADDR01 empty;
  set KUCREC empty;
  set KM0BW02 empty;
  set SQLCA empty;
  set ERRSQLCA empty;
  set TA1REC empty;
end // end KM0BS-INIT-RECS

// handle fast path entry
Function KM0BS00()


  if (COMMAREA.CAITEM != " ")
    KM0BW01.KM0BWCID = 0;
    KM0BW01.KM0BWAID = 0;
    KM0BW01.KM0BWZIP = " ";
    KM0BW01.KM0BWIN1 = 1;
    KM0BW01.KM0BWIN2 = 1;
    KM0BW01.KM0BWFNO = 1;
    while (KM0BW01.KM0BWIN1 <= 20
     && COMMAREA.CAITMLTR[KM0BWIN1] != " ")
      if (COMMAREA.CAITMLTR[KM0BWIN1] == ".")
        KM0BW01.KM0BWFNO = KM0BW01.KM0BWFNO + 1;
        KM0BW01.KM0BWIN2 = 0;
      else
        KM0BS01(); /* move each letter*/
        if (converseVar.validationMsgNum == 0)
          /* next sentence*/
        else
          set KM0BM001.CAITEM cursor, bold;
          return;
        end
      end
      KM0BW01.KM0BWIN1 = KM0BW01.KM0BWIN1 + 1;
      KM0BW01.KM0BWIN2 = KM0BW01.KM0BWIN2 + 1;
    end
    KM0BM001.KUCCOID = KM0BW01.KM0BWCID;
    KM0BM001.KULAAID[5] = KM0BW01.KM0BWAID;
    KM0BM001.XXXZIP[5] = KM0BW01.KM0BWZIP;
    COMMAREA.CAITEM = " ";
    KM0BS05(); /* validate the fast-path option(s)*/
  end
end // end KM0BS00

// move each caitem letter
Function KM0BS01()
  if (KM0BW01.KM0BWFNO == 1)
    if (KM0BW01.KM0BWIN2 <= 7)
      KM0BW01.KM0BWCLT[KM0BWIN2] = COMMAREA.CAITMLTR[KM0BWIN1];
    else
      converseLib.validationFailed(109); /* co number too long*/
      KM0BW01.KM0BWIN1 = 21; /* force exit from loop*/
    end
  else
    if (KM0BW01.KM0BWFNO == 2)
      if (KM0BW01.KM0BWIN2 <= 9)
        KM0BW01.KM0BWZLT[KM0BWIN2] = COMMAREA.CAITMLTR[KM0BWIN1];
      else
        converseLib.validationFailed(109); /* zip code too long*/
        KM0BW01.KM0BWIN1 = 21; /* force exit from loop*/
      end
    else
      if (KM0BW01.KM0BWFNO == 3)
        if (KM0BW01.KM0BWIN2 <= 4)
          KM0BW01.KM0BWALT[KM0BWIN2] = COMMAREA.CAITMLTR[KM0BWIN1];
        else
          converseLib.validationFailed(125); /* address id too long*/
          KM0BW01.KM0BWIN1 = 21; /* force exit from loop*/
        end
      else
        if (KM0BW01.KM0BWFNO > 3
         || KM0BW01.KM0BWFNO < 1)
          converseLib.validationFailed(113); /* too many fields*/
          KM0BW01.KM0BWIN1 = 21; /* force exit from loop*/
        end
      end
    end
  end
end // end KM0BS01

// edit entry
Function KM0BS05()

  if (KM0BM001.KUCCOID > 0)
    if (KM0BM001.KUCCOID != KM0BW01.KUCCOID
     || KM0BM001.XXXZIP[5] != KM0BW01.XXXZIP
     || KM0BM001.KULAAID[5] != KM0BW01.KULAAID)
      KM0BS90(); /* get and store records for new criteria*/
      if (converseVar.validationMsgNum == 0) /* if records were stored ok*/
        KM0BW01.KUCCOID = KM0BM001.KUCCOID;
                                   /* set up working storage*/
        KM0BW01.XXXZIP = KM0BM001.XXXZIP[5]; /* so we know if the*/
        KM0BW01.KULAAID = KM0BM001.KULAAID[5]; /* criteria changes*/
        KM0BW01.KM0BW1ST = 1;
        KM0BW01.KM0BWBSW = "Y";
      end
    else
      if (KM0BM001.KM0BW1ST != KM0BW01.KM0BW1ST)
        if (KM0BM001.KM0BW1ST <= KM0BW01.KM0BWRCT)
          KM0BW01.KM0BWBSW = "Y";
          if (KM0BM001.KM0BW1ST == 0)
            KM0BM001.KM0BW1ST = KM0BW01.KM0BW1ST;
          else
            KM0BW01.KM0BW1ST = KM0BM001.KM0BW1ST;
          end
        else
          KM0BW01.KM0BWBSW = "N";
          converseLib.validationFailed(115); /* outside valid range*/
          set KM0BM001.KM0BW1ST cursor, bold;
        end
      end
    end
  else
    converseLib.validationFailed(114); /* company number is required*/
    set KM0BM001.KUCCOID cursor, bold;
  end


  exit stack;

end // end KM0BS05

// build the km0bm001 screen
Function KM0BS10()

  set KM0BM001 initial;
  KM0BW01.KM0BWBSW = "N";

  KM0BM001.KUCCOID = KM0BW01.KUCCOID;
  KM0BM001.KUCCONM = KM0BW01.KUCCONM;
  KM0BM001.XXXZIP[5] = KM0BW01.XXXZIP;
  KM0BM001.KULAAID[5] = KM0BW01.KULAAID;
  KM0BM001.KM0BW1ST = KM0BW01.KM0BW1ST;
  KM0BW01.KM0BWIN1 = KM0BW01.KM0BW1ST;
  KM0BM001.KM0BWRCT = KM0BW01.KM0BWRCT;
  KM0BW01.KM0BWIN2 = 1;
  while (KM0BW01.KM0BWIN2 <= 4
   && KM0BW01.KM0BWIN1 <= KM0BW01.KM0BWRCT
   && KM0BW02.KUCCOID[KM0BWIN1] > 0)
    KM0BS11(); /* move addresses to screen*/
    KM0BW01.KM0BWIN1 = KM0BW01.KM0BWIN1 + 1;
    KM0BW01.KM0BWIN2 = KM0BW01.KM0BWIN2 + 1;
  end
  KM0BM001.KM0BW4TH = KM0BW01.KM0BWIN1 - 1;
  KM0BW01.KM0BW4TH = KM0BM001.KM0BW4TH;

end // end KM0BS10

// get addr and move to screen
Function KM0BS11()

  KULREC.KUCCOID = KM0BW02.KUCCOID[KM0BWIN1];
  KULREC.KULAAID = KM0BW02.KULAAID[KM0BWIN1];

  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VADDR001";
    TA1REC.TA1PGMNM = "KM0BS11";
    TA1REC.TA1LOC = "SELECT ADDR";
    KM0BW01.KM0BWCID = KULREC.KUCCOID;
    TA1REC.TA1TBLKE = KM0BW01.KM0BWCID;
    XSKUS-DB2-RETN(); /* abort routine*/
  end


  KM0BM001.KULAAID[KM0BWIN2] = KULREC.KULAAID;
  KM0BM001.XXX-ADDR1[KM0BWIN2] = KULREC.XXX-ADDR1;
  KM0BM001.XXX-ADDR2[KM0BWIN2] = KULREC.XXX-ADDR2;
  KM0BM001.XXX-ADDR3[KM0BWIN2] = KULREC.XXX-ADDR3;
  KM0BM001.XXXCITY[KM0BWIN2] = KULREC.XXXCITY;
  KM0BM001.XCYCD[KM0BWIN2] = KULREC.XCYCD;
  KM0BM001.XSTCD[KM0BWIN2] = KULREC.XSTCD;
  KM0BM001.XCTCD[KM0BWIN2] = KULREC.XCTCD;
  KM0BM001.XXXZIP[KM0BWIN2] = KULREC.XXXZIP;


end // end KM0BS11

// protect fields
Function KM0BS12()
  set KM0BM001.KULAAID[1] skip;
  set KM0BM001.KULAAID[2] skip;
  set KM0BM001.KULAAID[3] skip;
  set KM0BM001.KULAAID[4] skip;
  set KM0BM001.XXXZIP[1] skip;
  set KM0BM001.XXXZIP[2] skip;
  set KM0BM001.XXXZIP[3] skip;
  set KM0BM001.XXXZIP[4] skip;
  set KM0BM001.KM0BW1ST normal;
end // end KM0BS12

// handle any special entries
Function KM0BS70()
  KM0BW01.CATOAP = KM0BM001.CATOAP;

  if (converseVar.eventKey is enter)
    if (KM0BW01.CATOAP != " ")
      KM0BS71(); /* handle fast-path option entry*/
    else
      return; /* no special functions...go back*/
    end
  else
    if (converseVar.eventKey is pa2)
      COMMAREA.CATOAP = "KM0B";
      XSEXIT();
    else
      if (KM0BW01.CATOAP != " ")
        converseLib.validationFailed(29); /* can't use fast-path and pf-key*/
        set KM0BM001.CATOAP cursor, bold;
      else
        KM0BS72(); /* handle cc0mm001 pf key entry*/
      end
    end
  end



end // end KM0BS70

// handle fast-path option entry
Function KM0BS71()

  if (KM0BM001.CATOAP != " ")
    COMMAREA.CATOAP = KM0BM001.CATOAP;
    COMMAREA.CAITEM = KM0BM001.CAITEM;
    XSEXIT(); /* transfer to requested appl.*/
    set KM0BM001.CATOAP cursor, bold;
    exit stack;
  end

end // end KM0BS71

// handle any pf key entry
Function KM0BS72()

  if (converseVar.eventKey is pf3)
    KM0BS73();
  end
  if (converseVar.eventKey is pf4)
    XSPF4();
  end
  if (converseVar.eventKey is pf5)
    KM0BS75();
  end
  if (converseVar.eventKey is pf7)
    KM0BS77();
  end
  if (converseVar.eventKey is pf8)
    KM0BS78();
  end
  if (converseVar.eventKey is pf3)
    KM0BS73();
  end
  if (converseVar.eventKey is pf4)
    XSPF4();
  end
  if (converseVar.eventKey is pf1)
    XSPF1();
  end

  if (COMMAREA.CASECRC == 0)
    converseLib.validationFailed(3); /* pfkey not supported*/
  end


  exit stack;
end // end KM0BS72

// handle pf3 key
Function KM0BS73()
  COMMAREA.CATOAP = "KM0A"; /* go to master menu*/
  XSEXIT();

end // end KM0BS73

// handle pf5 entry
Function KM0BS75()
   /* GET KM0HPF5*/
   /* ************************************************************/
   /* *   For this application, pf5 takes you back to*/
   /* *   the Customer Main Menu (ku0m).*/
   /* **/
   /* ************************************************************/

  COMMAREA.CATOAP = "KU0M"; /* set up the commarea to-application*/
  XSEXIT(); /* and go to the address maint. menu*/

end // end KM0BS75

// handle pf7 entry
Function KM0BS77()

  if (KM0BM001.KM0BW1ST == 1)
    converseLib.validationFailed(38); /* no previous page*/
    exit stack;
  else
    KM0BW01.KM0BWIN1 = KM0BM001.KM0BW1ST - 4;
    if (KM0BW01.KM0BWIN1 <= 0)
      KM0BW01.KM0BW1ST = 1;
    else
      KM0BW01.KM0BW1ST = KM0BW01.KM0BWIN1;
    end
    KM0BW01.KM0BWBSW = "Y";
    exit stack;
  end
end // end KM0BS77

// handle pf8 entry
Function KM0BS78()

  KM0BW01.KM0BWIN1 = KM0BM001.KM0BW4TH + 1;
  if (KM0BW01.KM0BWIN1 > KM0BW01.KM0BWRCT)
    converseLib.validationFailed(39); /* last record displayed*/
    exit stack;
  else
    KM0BW01.KM0BWBSW = "Y";
    KM0BW01.KM0BW1ST = KM0BW01.KM0BWIN1;
    exit stack;
  end


end // end KM0BS78

// get and store company addr.'s
Function KM0BS90()

  KM0BW01.KM0BWIN1 = 0;

  set KM0BW02 empty;

  KM0BS91(); /* select all addresses for company*/


  KM0BS93(); /* get company name*/


  if (converseVar.validationMsgNum == 0)
    KM0BW01.KM0BWASW = "Y";
    while (KM0BW01.KM0BWASW == "Y")
      KM0BS92(); /* build temporary storage*/
    end
    if (KM0BW01.KM0BWIN1 == 0)
      converseLib.validationFailed(145); /* no addresses meet criteria*/
    end
  end

end // end KM0BS90

// build temp storage
Function KM0BS91()

  KULREC.KUCCOID = KM0BM001.KUCCOID;


  call "IO0170" ("SS", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    call "IO0170" ("SN", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* get the 1st record*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if a good return (rec was found)*/
      return; /* go back to km0bbld*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if no records were selected*/
        converseLib.validationFailed(145); /* no records for company msg*/
        return;
      else
        TA1REC.TA1DBASE = "DCUST";
        TA1REC.TA1TBLVU = "VADDR001";
        TA1REC.TA1PGMNM = "KM0BS91";
        TA1REC.TA1LOC = "SELECT NEXT";
        KM0BW01.KM0BWCID = KULREC.KUCCOID;
        TA1REC.TA1TBLKE = KM0BW01.KM0BWCID;
        XSKUS-DB2-RETN(); /* abort routine*/
      end
    end
  else
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VADDR001";
    TA1REC.TA1PGMNM = "KM0BS91";
    TA1REC.TA1LOC = "SELECT SET";
    KM0BW01.KM0BWCID = KULREC.KUCCOID;
    TA1REC.TA1TBLKE = KM0BW01.KM0BWCID;
    XSKUS-DB2-RETN(); /* abort routine*/
  end
end // end KM0BS91

// move addresses to temp storage
Function KM0BS92()

  KM0BW01.KM0BWMSW = "N"; /* reset the record-move switch*/


  if (KM0BM001.XXXZIP[5] == " " /* if no zip and no address id*/
   && KM0BM001.KULAAID[5] == 0) /* were specified*/
    KM0BW01.KM0BWMSW = "Y"; /* move the record*/
  else
    if (KM0BM001.XXXZIP[5] > " "            /* if there was a zip, no address id*/
     && KM0BM001.XXXZIP[5] == KULREC.XXXZIP /* and the zip is equal to*/
     && KM0BM001.KULAAID[5] == 0)           /* the zip in the record*/
      KM0BW01.KM0BWMSW = "Y"; /* move the record*/
    else
      if (KM0BM001.KULAAID[5] > 0               /* if there was an address id, no zip*/
       && KM0BM001.KULAAID[5] == KULREC.KULAAID /* and the address id is*/
       && KM0BM001.XXXZIP[5] == " ")            /* equal to that in the record*/
        KM0BW01.KM0BWMSW = "Y"; /* move the record*/
      else
        if (KM0BM001.XXXZIP[5] > " "            /* if there was both a zip and an*/
         && KM0BM001.KULAAID[5] > 0             /* address id,  and both are equal*/
         && KM0BM001.XXXZIP[5] == KULREC.XXXZIP /* to the record values*/
         && KM0BM001.KULAAID[5] == KULREC.KULAAID)
          KM0BW01.KM0BWMSW = "Y"; /* move the record*/
        end
      end
    end
  end


  if (KM0BW01.KM0BWMSW == "Y")
    KM0BW01.KM0BWIN1 = KM0BW01.KM0BWIN1 + 1;
    KM0BW02.KUCCOID[KM0BWIN1] = KULREC.KUCCOID;
    KM0BW02.KULAAID[KM0BWIN1] = KULREC.KULAAID;
  end

  call "IO0170" ("SN", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    if (KM0BW01.KM0BWIN1 == 2000) /* table max reached,*/
      KM0BW01.KM0BWASW = "N"; /* end selection list*/
    end
    return; /* go move this record to temp storage*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if no records were selected*/
      KM0BW01.KM0BWRCT = KM0BW01.KM0BWIN1; /* set the number of recs*/
      KM0BW01.KM0BWASW = "N";
      return;
    else
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VADDR001";
      TA1REC.TA1PGMNM = "KM0BS92";
      TA1REC.TA1LOC = "SELECT NEXT";
      KM0BW01.KM0BWCID = KULREC.KUCCOID;
      TA1REC.TA1TBLKE = KM0BW01.KM0BWCID;
      XSKUS-DB2-RETN(); /* abort routine*/
    end
  end


end // end KM0BS92

// get company name
Function KM0BS93()

  KUCREC.KUCCOID = KM0BM001.KUCCOID;


  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    KM0BW01.KUCCONM = KUCREC.KUCCONM; /* move name to screen*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if company not found*/
      converseLib.validationFailed(118); /* company not found message*/
      return;
    else
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      KM0BW01.KM0BWCID = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KM0BW01.KM0BWCID;
      TA1REC.TA1PGMNM = "KM0BS93";
      TA1REC.TA1LOC = "SELECT CMPNY";
      XSKUS-DB2-RETN(); /* abort routine*/
    end
  end
end // end KM0BS93

Record KM0BW01 type basicRecord
  5 KM0BWGRP KM0BWGRP ; 
    10 KM0BWSGP KM0BWSGP ; 
    10 CAMSG CAMSG ; 
    10 KM0BWFNO KM0BWFNO ; 
    10 KM0BWBSW KM0BWBSW ; 
    10 KM0BWIN1 KM0BWIN1 ; 
    10 KM0BWIN2 KM0BWIN2 ; 
    10 KM0BWASW KM0BWASW ; 
    10 KULAAID KULAAID ; 
    10 XXXZIP XXXZIP ; 
    10 KM0BWZIP KM0BWZIP ; 
      15 KM0BWZLT KM0BWZLT [10] ; 
    10 KUCCOID KUCCOID ; 
    10 KM0BWCID KM0BWCID ; 
      15 KM0BWCLT KM0BWCLT [7] ; 
    10 KM0BWAID KM0BWAID ; 
      15 KM0BWALT KM0BWALT [4] ; 
    10 KUCCONM KUCCONM ; 
    10 KM0BWRCT KM0BWRCT ; 
    10 CATOAP CATOAP ; 
    10 KM0BW1ST KM0BW1ST ; 
    10 KM0BW4TH KM0BW4TH ; 
    10 KM0BWMSW KM0BWMSW ; 
end // end KM0BW01

//*** RECORD=KM0BW02 ****
// this record describes the layout of the db2 address table
// record.
// ***********************
Record KM0BW02 type basicRecord
  10 KUCCOID KUCCOID [2000] ; 
  10 KULAAID KULAAID [2000] ; 
end // end KM0BW02

// number of 1st addr on scrn
DataItem KM0BW1ST char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of 4th addr on scrn
DataItem KM0BW4TH char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage number
DataItem KM0BWAID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// individual numbers
DataItem KM0BWALT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// address switch
DataItem KM0BWASW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// build screen switch
DataItem KM0BWBSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage number
DataItem KM0BWCID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// individual numbers
DataItem KM0BWCLT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of fields
DataItem KM0BWFNO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// credit working storage
DataItem KM0BWGRP char(184)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index
DataItem KM0BWIN1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem KM0BWIN2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// move-record-to-strg switch
DataItem KM0BWMSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// num of recs in temp strg
DataItem KM0BWRCT num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// statement group name
DataItem KM0BWSGP char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KM0BWZIP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// individual zip-code letters
DataItem KM0BWZLT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

