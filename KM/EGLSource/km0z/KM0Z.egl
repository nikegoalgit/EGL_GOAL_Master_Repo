package km0z;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPXX001;
import corpcom3.XPYNT01;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XATCD;
import corpx1.XATTBL;
import corpx1.XAUTBL;
import corpx2.XXXPHN;
import corpx2.XXXPHNA;
import corpx2.XXXPHNN;
import corpx2.XXXPHNP;
import corpy2.YCUTBL;
import corpy2.YNTTBL;
import corpy2.YPOTBL;
import kl.common.KIZTBL;
import ku.common.KUCREC;
import ku.common.KUKREC;
import ku.common.KUZREC;
import ta.common.TA1REC;
import vv.common.VCTACT01;
import vv.common.VEDTPR01;
import xa.common.XA0AW02;
//*** PROGRAM=KM0Z ****
// ----------------  km0z - change/inquiry company ------------
// 
// overview:  this application performs change functions for
//            general Customer Service company information.
// 
// date written: 04/91
// author:       Dianne Salzwedel
// 
// ************************************************************
// *              maintenance history log                     *
// ************************************************************
//  05/08/91  dsalzw   removed km0m from setting security
//  05/16/91  dsalzw   changed pf3 to use from appl
//  06/09/91  dsalzw   db changes; add kucstynt
//  06/19/91  dsalzw   fix misc bugs with windows
//  08/27/91  chellm   Add autoskip to po required aprl & ftwr
//                     fields for inquiry users.(KM0Z402)
//  10/11/91  chellm   Added CU-STYNM-PRT-FL to map KM0ZM100.
//  03/13/92  chellm   DB2 changes: Added cu-hang-dflt-fl,
//                     cu-doc-by-ord-fl, cu-prt-xref-fl to map,
//                     edits and updates.
//  03/25/92  chellm   Added Advance Ship Notice Ind and ASN
//                     Format Ind to the Map.  Added pop up
//                     windows for ASN indicators.
//  06/12/92  chellm   Added Carton Use Code YCU-CRTN-USE-CD
//                     to the map. Also, DB2 changes.
//  05/19/93  chellm   Use DACRCV.VCTACT01 to get the credit
//                     contact replacing DCUST.VCMPNY01.
// 29-june-1993         dlegg     Check for numeric value
//                                before move in km0z000.
// 12-JULY-1993         DLEGG     Change call to TA0020 with
//                                ABND to RETN. KM0Z210,230,
//                                240,250,422,426.
// 16-JULY-1993         DLEGG     Add sgrp to initialize all
//                                records used by appl.
//  10/01/93  CHELLM   CSP 4.1 Conversion.
//  11/12/93  CHELLM   DB2 cHANGES: Added cu-cusku-sz-fl
//                                        cu-edi-cust-ind
//  03/11/94  CHELLM   DB2 cHANGES: Added cu-max-aprl-ynt-cd
//                                  ReNam cu-max-ftwr-ynt-cd
//  08/01/94  CHELLM   removed edi trading partner fields from
//                     the map.  the addition of the trd id #
//                     to .VEDITP01 causes multiple rows/co-id.
//  11/10/94  CHELLM   Added cu-vend-nbr as display field.
//  04/10/95  CHELLM   Added user security for Nike Canada.
//  02/22/96  KCLAR1   Allow max-carton for apparel and shoes
//                     to be spaces - per T. Morrison
//  09/11/96  KCLAR1   change cusku-ind to not allow g
//  04/28/97  KCLAR1   change to vedtpr01 table
//  10/27/98  UDAFON   Changed logic to allow 'P' as a valid
//                     enter. Task 1520. KM0Z510   was changed.
//  06/21/99  jnaras   CHanged the proc km0z505 to display err
//                     msg if ftwr/apprl ynt cd = 00 when crtn
//                     use cd = '01'
// *********************
Program KM0Z type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KM0ZW01 KM0ZW01; // record
  KUCREC KUCREC; // record
  KUKREC KUKREC; // record
  KUZREC KUZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VCTACT01 VCTACT01; // record
  VEDTPR01 VEDTPR01; // record
  XA0AW02 XA0AW02; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KIZTBL {deleteAfterUse = yes}; // table
  use XATTBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use YCUTBL {deleteAfterUse = yes}; // table
  use YNTTBL {deleteAfterUse = yes}; // table
  use YPOTBL {deleteAfterUse = yes}; // table
  use KM0ZM.KM0ZM100,  // forms
      KM0ZM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KM0Z000: KM0Z000();
    goto KM0Z100; /* converse A/R maintenance screen*/
    ;
    KM0Z100: KM0Z100();
    ;
    goto KM0Z100; /* maintenance screen*/
    ;
  end // end main
end // end KM0Z

// Get Credit Contact
Function KM0Z-250()
  ;
   /* *********************************************************/
                          /* km0z-250*/
   /* Get the Credit Contact from the AR Contact table.*/
   /* *********************************************************/
  ;
      /* First try the Customer level Credit Contact.*/
      /* If a Customer level doen't exist, try the Group level*/
  ;
   /* **********************************************************/
  ;
  ;
  set SQLCA empty;
  set VCTACT01 empty;
  VCTACT01.KUCCOID = KM0ZM100.KUCCOID;
  VCTACT01.XXXSTAT = "A";
  VCTACT01.AR-CTCT-PRTY-IND = "1";
  VCTACT01.KUNCGIND = "C";
  ;
  call "IO3980" ("SA", SQLCA, VCTACT01) {isNoRefresh = yes, isExternal = yes}; /* read vctact01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    KM0ZW01.XXXPHN = VCTACT01.XXXPHN; /* format phone number*/
    KM0ZW01.KM0ZW-PHN-AREA-CD = KM0ZW01.XXXPHNA; /* phone*/
    KM0ZW-PHN-DASH1 = "-";
    KM0ZW01.KM0ZW-PHN-PREFIX = KM0ZW01.XXXPHNP; /* phone*/
    KM0ZW-PHN-DASH2 = "-";
    KM0ZW01.KM0ZW-PHN-NUMBER = KM0ZW01.XXXPHNN; /* phone*/
    KM0ZM100.KM0ZM-PHONE = KM0ZW01.KM0ZW-PHONE; /* phone*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DACRCV";
      TA1REC.TA1TBLVU = "VCTACT01";
      TA1REC.TA1MAP = " ";
      KM0ZW01.KM0ZWKEY = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KM0ZW01.KM0ZWKEY;
      TA1REC.TA1PGMNM = "KM0Z-250";
      TA1REC.TA1LOC = "READING DB2 CTACT01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
  ;
  set SQLCA empty;
  set VCTACT01 empty;
  VCTACT01.KUCCOID = KM0ZM100.KUCCOID;
  VCTACT01.XXXSTAT = "A";
  VCTACT01.AR-CTCT-PRTY-IND = 1;
  VCTACT01.KUNCGIND = "G";
  ;
  call "IO3980" ("SA", SQLCA, VCTACT01) {isNoRefresh = yes, isExternal = yes}; /* read vctact01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    KM0ZW01.XXXPHN = VCTACT01.XXXPHN; /* phone*/
    KM0ZW01.KM0ZW-PHN-AREA-CD = KM0ZW01.XXXPHNA; /* phone*/
    KM0ZW-PHN-DASH1 = "-";
    KM0ZW01.KM0ZW-PHN-PREFIX = KM0ZW01.XXXPHNP; /* phone*/
    KM0ZW-PHN-DASH2 = "-";
    KM0ZW01.KM0ZW-PHN-NUMBER = KM0ZW01.XXXPHNN; /* phone*/
    KM0ZM100.KM0ZM-PHONE = KM0ZW01.KM0ZW-PHONE; /* phone*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DACRCV";
      TA1REC.TA1TBLVU = "VCTACT01";
      TA1REC.TA1MAP = " ";
      KM0ZW01.KM0ZWKEY = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KM0ZW01.KM0ZWKEY;
      TA1REC.TA1PGMNM = "KM0Z-250";
      TA1REC.TA1LOC = "READING DB2 CTACT01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
  ;
  set SQLCA empty;
  set VCTACT01 empty;
  VCTACT01.KUCCOID = KM0ZM100.KUCGRPID;
  VCTACT01.XXXSTAT = "A";
  VCTACT01.AR-CTCT-PRTY-IND = 1;
  VCTACT01.KUNCGIND = "G";
  ;
  call "IO3980" ("SA", SQLCA, VCTACT01) {isNoRefresh = yes, isExternal = yes}; /* read vctact01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    KM0ZW01.XXXPHN = VCTACT01.XXXPHN; /* phone*/
    KM0ZW01.KM0ZW-PHN-AREA-CD = KM0ZW01.XXXPHNA; /* phone*/
    KM0ZW-PHN-DASH1 = "-";
    KM0ZW01.KM0ZW-PHN-PREFIX = KM0ZW01.XXXPHNP; /* phone*/
    KM0ZW-PHN-DASH2 = "-";
    KM0ZW01.KM0ZW-PHN-NUMBER = KM0ZW01.XXXPHNN; /* phone*/
    KM0ZM100.KM0ZM-PHONE = KM0ZW01.KM0ZW-PHONE; /* phone*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KM0ZM100.KM0ZM-PHONE = " "; /* phone*/
      /* next sentence*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DACRCV";
      TA1REC.TA1TBLVU = "VCTACT01";
      TA1REC.TA1MAP = " ";
      KM0ZW01.KM0ZWKEY = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KM0ZW01.KM0ZWKEY;
      TA1REC.TA1PGMNM = "KM0Z-250";
      TA1REC.TA1LOC = "READING DB2 CTACT01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
  ;
   /* ********************** END OF km0z-250 *********************/
end // end KM0Z-250

// windowing routine
Function KM0Z-600()
   /* *********************************************/
   /* * km0z600 - pop up window for edi indicators*/
   /* *********************************************/
  ;
  XPXX001(); /* perform pop-up screen initialization*/
  XX0XW02.XX0XWHDR = "         ASN INDICATORS   ";
  ;
  while (XX0XW02.XX0XWEND == "N")
    KM0Z-610(); /* perform asn pop up window*/
    ;
  end
  ;
  converseLib.clearScreen();
   /* reset screen*/
  ;
  ;
  ;
end // end KM0Z-600

// converse pop up window
Function KM0Z-610()
   /* ------------------------------------------------------------*/
  ;
              /* CONVERSE POP UP WINDOW*/
  ;
      /* 1) If no errors, clear the map and set up for*/
         /* displaying the data.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey errors.*/
      /* 5) If ENTER pressed, return to the main map.*/
  ;
   /* ------------------------------------------------------------*/
  ;
  ;
  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/
    ;
     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/
    ;
    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end
    ;
    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "           HIT ENTER TO RETURN        ";
    XX0XM001.XX0XMTR2 = "                                      ";
    ;
    ;
    XX0XM001.XX0XMCD[2] = "1";
    XX0XM001.XX0XMDES[2] = "EDI ASN IN TEST";
    XX0XM001.XX0XMCD[3] = "2";
    XX0XM001.XX0XMDES[3] = "EDI ASN IN PROD";
    XX0XM001.XX0XMCD[4] = "3";
    XX0XM001.XX0XMDES[4] = "RETAIL ASN     ";
    XX0XM001.XX0XMCD[5] = "4";
    XX0XM001.XX0XMDES[5] = "FAX ASN        ";
    ;
  end
  ;
  converse XX0XM001 ;
  ;
  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/
  ;
     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/
  ;
  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end
  ;
    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/
  ;
  if (converseVar.eventKey is enter) /* If enter pressed*/
    XX0XW02.XX0XWEND = "Y"; /* Set end flag*/
  else
    XX0XW02.XX0XWERR = "Y"; /* set error flag*/
  end
  ;
  ;
end // end KM0Z-610

// windowing routine
Function KM0Z-620()
   /* *********************************************/
   /* * km0z620 - pop up for edi format indicators*/
   /* *********************************************/
  ;
  XPXX001(); /* perform pop-up screen initialization*/
  XX0XW02.XX0XWHDR = "         ASN FORMAT INDICATORS";
  ;
  while (XX0XW02.XX0XWEND == "N")
    KM0Z-630(); /* perform asn pop up window*/
    ;
  end
  ;
  converseLib.clearScreen();
   /* reset screen*/
  ;
  ;
  ;
end // end KM0Z-620

// converse pop up window
Function KM0Z-630()
   /* ------------------------------------------------------------*/
  ;
              /* CONVERSE POP UP WINDOW*/
  ;
      /* 1) If no errors, clear the map and set up for*/
         /* displaying the data.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey errors.*/
      /* 5) If ENTER pressed, return to the main map.*/
  ;
   /* ------------------------------------------------------------*/
  ;
  ;
  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/
    ;
     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/
    ;
    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end
    ;
    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "           HIT ENTER TO RETURN        ";
    XX0XM001.XX0XMTR2 = "                                      ";
    ;
    ;
    XX0XM001.XX0XMCD[2] = "1";
    XX0XM001.XX0XMDES[2] = "BOL BY PO      ";
    XX0XM001.XX0XMCD[3] = "2";
    XX0XM001.XX0XMDES[3] = "BOL BY SO      ";
    XX0XM001.XX0XMCD[4] = "3";
    XX0XM001.XX0XMDES[4] = "STYLE/SIZE     ";
    XX0XM001.XX0XMCD[5] = "4";
    XX0XM001.XX0XMDES[5] = "CARTON         ";
    ;
  end
  ;
  converse XX0XM001 ;
  ;
  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/
  ;
     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/
  ;
  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end
  ;
    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/
  ;
  if (converseVar.eventKey is enter) /* If enter pressed*/
    XX0XW02.XX0XWEND = "Y"; /* Set end flag*/
  else
    XX0XW02.XX0XWERR = "Y"; /* set error flag*/
  end
  ;
  ;
end // end KM0Z-630

// init chg company processing
Function KM0Z000()
   /* *********************************************/
    /* initialization of variables used in the  **/
    /* processing of the Cust Service Screen    **/
   /* *********************************************/
  ;
  XSENTRY();
  ;
  XSSEGTR(); /* set segmented transaction id*/
  ;
  set KM0ZM100 initial; /* maintenance screen*/
  ;
  KM0ZS-INIT-RECS();
  ;
  KM0ZW01.KM0ZWMD1 = "N"; /* init cmpny update flag*/
  KM0ZW01.KM0ZWEFL = "N"; /* init ready to update flag*/
  KM0ZW01.KM0ZWERR = "N"; /* error flag*/
  ;
   /* ****************************/
   /* check fast path entry*/
   /* ****************************/
  ;
  if (COMMAREA.CACHGFL == "Y")
    KM0ZW01.KM0ZWUPM = "Y"; /* update mode*/
    KM0Z401(); /* set fields for update*/
  else
    KM0ZW01.KM0ZWUPM = "N"; /* inquiry move*/
    KM0Z402(); /* set fields for inquiry*/
  end
  ;
  ;
  KM0ZW01.KM0ZWUSR = COMMAREA.CAUSERA; /* key from add menu*/
  if (COMMAREA.CAITEM != " ")
    KM0ZW01.KM0ZWUSR = COMMAREA.CAITEM; /* key from fastpath*/
    if (KM0ZW01.KM0ZWCNO-CHAR is numeric)
      KM0ZM100.KUCCOID = KM0ZW01.KM0ZWCNO;
    end
  else
    if (KM0ZW01.KM0ZWCNO-CHAR is numeric)
      KM0ZM100.KUCCOID = KM0ZW01.KM0ZWCNO; /* key from chg menu*/
    end
  end
  ;
  XX0XS01(); /* get todays date*/
  ;
  ;
  if (KM0ZM100.KUCCOID > 0) /* if a company is available*/
    KM0Z200(); /* read/format basic company screen*/
  end
  ;
end // end KM0Z000

// converse map
Function KM0Z100()
   /* *******************************************/
   /* customer service screen process         **/
   /* 1. prepares working variables           **/
   /* 2. presents screen                      **/
   /* 3. edits special keys                   **/
   /* 4. edit screen data                     **/
                                           /* **/
   /* *******************************************/
  ;
  KM0ZW01.KM0ZWERR = "N"; /* init error flag*/
  KM0ZM100.KM0ZMDAT = VGVar.currentShortGregorianDate; /* set screen date*/
  ;
  ;
  converse KM0ZM100 ;
  ;
  KM0Z400(); /* edit pf and special keys*/
  ;
  if (KM0ZW01.KM0ZWERR == "N") /* no errors*/
    KM0Z500(); /* edit screen*/
  end
  ;
  if (KM0ZW01.KM0ZWERR == "N" /* no errors*/
   && KM0ZW01.KM0ZWUPM == "Y") /* update mode*/
    if (KM0ZW01.KM0ZWMD1 == "Y")
      converseLib.validationFailed(277); /* good edit*/
      KM0ZW01.KM0ZWEFL = "Y"; /* setup update flag*/
    end
  end
end // end KM0Z100

// read/format basic screen
Function KM0Z200()
   /* *********************************************************/
     /* read and format company screen data*/
   /* *********************************************************/
  ;
  set KUCREC empty; /* clear out company record*/
  KM0ZW01.KM0ZWCID = 0;
  ;
  KUCREC.KUCCOID = KM0ZM100.KUCCOID; /* set company key*/
  ;
  KM0Z210(); /* read vcmpny01*/
  if (KM0ZW01.KM0ZWERR == "Y") /* not found?*/
    set KM0ZM100 initial;
    KM0ZM100.KUCCOID = KUCREC.KUCCOID; /* set company key*/
    set KM0ZM100.KUCCOID cursor, bold;
    return;
  end
  ;
  KM0Z220(); /* format cmpny01 to map km0zm100*/
  ;
  KM0ZW01.KM0ZWCID = KUCREC.KUCCOID; /* save current company id*/
  ;
   /* *******************************************************/
   /* --------  read/fmt parent  --------------*/
   /* *******************************************************/
  ;
  KM0ZM100.KUKPCOID = 0; /* clear parent id*/
  KM0ZM100.KUKPCONM = " "; /* clear parent name*/
  set KUKREC empty; /* clear  out parent record*/
  ;
  if (KUCREC.KUKPCOID != 0) /* there is a parent id*/
    KUKREC.KUKPCOID = KUCREC.KUKPCOID; /* set parent key*/
    KM0Z230(); /* read parent*/
    if (VAGen_SQLCODE == 0)
      KM0ZM100.KUKPCOID = KUKREC.KUKPCOID;
      KM0ZM100.KUKPCONM = KUKREC.KUKPCONM;
    else
      converseLib.validationFailed(329);
      KM0ZW01.KM0ZWERR = "Y";
      set KM0ZM100.KUKPCOID cursor, modified, bold;
    end
  end
  ;
   /* *********************************************************/
     /* read and format Trading Partner (EDI) screen data*/
   /* *********************************************************/
  ;
   /* SET VEDITP01 EMPTY;              /* clear out veditp01 rec*/
  ;
   /* MOVE KM0ZM100.KUCCOID TO VEDITP01.KUCCOID;/* set veditp01 key*/
  ;
   /* PERFORM KM0Z240;                 /* read dcust.veditp01*/
   /* IF SQLCODE EQ 0;*/
    /* MOVE VEDITP01.CU-EDI-NOTC-IND TO KM0ZM100.CU-EDI-NOTC-IND;*/
    /* MOVE VEDITP01.CU-EDI-NOTCFMT-IND TO KM0ZM100.CU-EDI-NOTCFMT-IND;*/
    /* IF VEDITP01.CU-EDI-NOTC-IND = '0';*/
      /* MOVE ' ' TO KM0ZM100.CU-EDI-NOTC-IND;*/
    /* END;*/
    /* IF VEDITP01.CU-EDI-NOTCFMT-IND = '0';*/
      /* MOVE ' ' TO KM0ZM100.CU-EDI-NOTCFMT-IND;*/
    /* END;*/
   /* ELSE;*/
    /* MOVE ' ' TO KM0ZM100.CU-EDI-NOTC-IND;*/
    /* MOVE ' ' TO KM0ZM100.CU-EDI-NOTCFMT-IND;*/
   /* END;*/
  ;
  ;
   /* *********************************************************/
     /* read and format Credit Contact Phone number*/
   /* *********************************************************/
  ;
  KM0Z-250(); /* get vctact01 info*/
  ;
  ;
  ;
  if (KM0ZW01.KM0ZWUPM == "Y")
    KM0Z401(); /* set fields defined*/
  else
    KM0Z402(); /* set fields protected*/
  end
  ;
end // end KM0Z200

// read company
Function KM0Z210()
   /* *************************************************/
   /* get company record   kucrec*/
   /* *************************************************/
  ;
  set SQLCA empty;
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* read cmpny01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    set KM0ZM100.KUCCOID initialAttributes;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(25); /* company not found*/
      KM0ZW01.KM0ZWERR = "Y"; /* set error message.*/
      set KM0ZM100.KUCCOID cursor, bold;
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      TA1REC.TA1MAP = " ";
      KM0ZW01.KM0ZWKEY = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KM0ZW01.KM0ZWKEY;
      TA1REC.TA1PGMNM = "KM0Z210";
      TA1REC.TA1LOC = "READING DB2 CMPNY01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
   /* ***********************************/
   /* edit for account class code*/
   /* ***********************************/
  ;
  if (KUCREC.XAUCD in XAUTBL.XAUCD)
    if (XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KM0ZW01.XATCD = XAUTBL.XATCD[sysVar.arrayIndex];
    else
      KM0ZW01.XATCD = " ";
    end
  else
    KM0ZW01.XATCD = " ";
  end
  ;
   /* **********************************************/
   /* edit account type for allowance of user groups*/
   /* **********************************************/
  ;
  if (KM0ZW01.XATCD == "08") /* edit for cole haan user*/
    if (COMMAREA.CADLVL[1] == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(272); /* not authorized to maint this acct*/
      KM0ZW01.KM0ZWUPM = "N"; /* update flag= n*/
    end
  else
    if (KM0ZW01.XATCD == "03") /* edit for nil user*/
      if (COMMAREA.CADLVL[2] == "Y")
        /* next sentence*/
      else
        converseLib.validationFailed(272); /* not authorized to maint this acct*/
        KM0ZW01.KM0ZWUPM = "N"; /* updtae flag = n*/
      end
    else
      if (COMMAREA.CADLVL[1] == "Y"
       || COMMAREA.CADLVL[2] == "Y")
        converseLib.validationFailed(272); /* not authorized to maint this acct*/
        KM0ZW01.KM0ZWUPM = "N"; /* update flag = n*/
      end
    end
  end
                     /* Edit for Nike Canada user*/
  ;
  if (KUCREC.XLECD == "03") /* edit for nil user*/
    if (COMMAREA.CADLVL[3] == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(272); /* not authorized to maint this acct*/
      KM0ZW01.KM0ZWUPM = "N"; /* updtae flag = n*/
    end
  else
    if (COMMAREA.CADLVL[3] == "Y")
      converseLib.validationFailed(272); /* not authorized to maint this acct*/
      KM0ZW01.KM0ZWUPM = "N"; /* update flag = n*/
    end
  end
  ;
  ;
end // end KM0Z210

// prepare cmpny record
Function KM0Z220()
   /* **************************/
   /* prepare company update*/
   /* **************************/
  ;
   /* *************************************************************/
  ;
    /* Maintenance History:*/
    /* 10-11-91 CHELLM Added CU-STYNM-PRT-FL.*/
    /* 11-12-93 CHELLM Added CU-edi-cust-ind.*/
                       /* Added CU-cusku-sz-fl.*/
    /* 11-13-95 kclar1 Added CU-co-self-nbr.*/
  ;
   /* *************************************************************/
  ;
  ;
  KM0ZM100.KUCGRPID = KUCREC.KUCGRPID; /* group id*/
  KM0ZM100.KUKPCOID = KUCREC.KUKPCOID; /* parent id*/
  KM0ZM100.KUCCONM = KUCREC.KUCCONM; /* company name*/
  KM0ZM100.KUCCOANM = KUCREC.KUCCOANM; /* company dba name*/
  KM0ZM100.XLECD = KUCREC.XLECD;
  KM0ZM100.XXXSTAT = KUCREC.XXXSTAT;
  ;
  KM0ZM100.KUCPOFL = KUCREC.KUCPOFL; /* po req flag*/
  KM0ZM100.KUCYPOAP = KUCREC.KUCYPOAP; /* aprl - po req*/
  KM0ZM100.KUCYPOFT = KUCREC.KUCYPOFT; /* ftwr - po req*/
  ;
  KM0ZM100.CU-PL-STYNM-PRT-FL = KUCREC.CU-PL-STYNM-PRT-FL;
  ;
  KM0ZM100.YCU-CRTN-USE-CD = KUCREC.YCU-CRTN-USE-CD;
  KM0ZM100.KUCSKIND = KUCREC.KUCSKIND; /* cu-cusku-ind*/
  KM0ZM100.CU-CUSKU-SZ-FL = KUCREC.CU-CUSKU-SZ-FL;
  KM0ZM100.CU-EDI-CUST-IND = KUCREC.CU-EDI-CUST-IND;
  KM0ZM100.CU-VEND-NBR = KUCREC.CU-VEND-NBR;
  KM0ZM100.CU-CO-SELF-NBR = KUCREC.CU-CO-SELF-NBR; /* ADDED 11/13/95*/
  KM0ZM100.CU-PRT-XREF-FL = KUCREC.CU-PRT-XREF-FL;
  KM0ZM100.CU-HANG-DFLT-FL = KUCREC.CU-HANG-DFLT-FL;
  KM0ZM100.CU-DOC-BY-ORD-FL = KUCREC.CU-DOC-BY-ORD-FL;
  ;
  KM0ZM100.KUCSTYNT = KUCREC.KUCSTYNT; /* std carton*/
  KM0ZM100.CU-MAX-FTWR-YNT-CD = KUCREC.CU-MAX-FTWR-YNT-CD; /* max carton size ftwr*/
  KM0ZM100.CU-MAX-APRL-YNT-CD = KUCREC.CU-MAX-APRL-YNT-CD; /* max carton size aprl*/
  KM0ZM100.KUCUNTCS = KUCREC.KUCUNTCS; /* units/case*/
  ;
end // end KM0Z220

// read parent
Function KM0Z230()
   /* *************************/
   /* get parent*/
   /* *************************/
  ;
  set SQLCA empty;
  ;
  call "IO0030" ("S ", SQLCA, KUKREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    KM0ZW01.KM0ZWSQL = SQLCA.SQLCAREC; /* hold error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* syncpoint rollback*/
    SQLCA.SQLCAREC = KM0ZW01.KM0ZWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VPARNT01";
    TA1REC.TA1MAP = " ";
    KM0ZW01.KM0ZWKEY = KUCREC.KUKPCOID;
    TA1REC.TA1TBLKE = KM0ZW01.KM0ZWKEY;
    TA1REC.TA1PGMNM = "KM0Z230";
    TA1REC.TA1LOC = "READ DB2 DCUST.VPARNT01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
  ;
end // end KM0Z230

// process special and pfkeys
Function KM0Z400()
   /* ************************************************/
     /* edit all special entry keys                **/
   /* ************************************************/
  ;
  ;
   /* **************************************/
   /* edit pa2 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pa2)
    KM0Z200(); /* refresh the screen*/
    KM0ZW01.KM0ZWERR = "Y"; /* set error flagto display screen*/
    KM0ZW01.KM0ZWMD1 = "N";
    KM0ZW01.KM0ZWEFL = "N";
    return;
  end
  ;
   /* **************************************/
   /* edit enter  key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is enter)
    if (KM0ZM100.CATOAP > " ") /* fast path*/
      COMMAREA.CATOAP = KM0ZM100.CATOAP;
      if (KM0ZM100.CAITEM == " ")
        COMMAREA.CAUSERA = KM0ZM100.KUCCOID;
      else
        COMMAREA.CAITEM = KM0ZM100.CAITEM;
      end
      COMMAREA.CAFROMAP = "KM0Z";
      XSEXIT();
      KM0ZM100.VAGen_EZEMSG = COMMAREA.CAMSG;
      KM0ZW01.KM0ZWERR = "Y";
      set KM0ZM100.CATOAP cursor, bold;
    else
      set KM0ZM100.CATOAP initialAttributes;
    end
    return;
  else
    if (KM0ZM100.CATOAP > " ")
      KM0ZW01.KM0ZWERR = "Y";
      converseLib.validationFailed(90); /* can not fast path and use pf keys*/
      set KM0ZM100.CATOAP cursor, bold;
      return;
    else
      set KM0ZM100.CATOAP modified;
    end
  end
  ;
  ;
   /* **************************************/
   /* edit pf2 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf2) /* update/inquiry tagle*/
    if (KM0ZW01.KM0ZWUPM == "N") /* in inquiry mode*/
      if (COMMAREA.CACHGFL == "Y") /* allow to maintenance*/
        KM0ZW01.KM0ZWUPM = "Y"; /* change to update mode*/
        KM0Z401(); /* set fields for update*/
        KM0Z200(); /* refresh screen*/
        KM0ZW01.KM0ZWERR = "Y"; /* display screen*/
        KM0ZW01.KM0ZWMD1 = "N";
        KM0ZW01.KM0ZWEFL = "N";
        return;
      else
        converseLib.validationFailed(330);
        KM0ZW01.KM0ZWERR = "Y"; /* display screen*/
        return;
      end
    else
      KM0ZW01.KM0ZWUPM = "N"; /* change to inquiry mode*/
      KM0Z402(); /* set fields for inquiry*/
      KM0Z200(); /* refresh screen*/
      KM0ZW01.KM0ZWERR = "Y"; /* display screen*/
      KM0ZW01.KM0ZWMD1 = "N";
      KM0ZW01.KM0ZWEFL = "N";
      return;
    end
  end
  ;
   /* **************************************/
   /* edit pf3 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf3) /* back to company update*/
    COMMAREA.CAUSERA = KM0ZM100.KUCCOID;
    COMMAREA.CAITEM = " ";
    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    COMMAREA.CAFROMAP = "KM0Z";
    COMMAREA.CACURRAP = COMMAREA.CAFROMAP;
    XSEXIT();
    KM0ZM100.VAGen_EZEMSG = COMMAREA.CAMSG;
    KM0ZW01.KM0ZWERR = "Y";
    return;
  end
  ;
   /* **************************************/
   /* edit pf4 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf4) /* back to goal menu*/
    COMMAREA.CAFROMAP = "KM0Z";
    XSPF4();
    KM0ZM100.VAGen_EZEMSG = COMMAREA.CAMSG;
    KM0ZW01.KM0ZWERR = "Y";
    return;
  end
  ;
   /* ***********************************/
     /* pf5 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf5)
    KM0Z-600(); /* display ASN ind pop up*/
    return;
  end
  ;
   /* ***********************************/
     /* pf6 edit*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is pf6)
    KM0Z-620(); /* display ASN fmt pop up*/
    return;
  end
  ;
   /* **************************************/
   /* edit pf12 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf12 /* update key*/
   && KM0ZW01.KM0ZWEFL == "Y"      /* all edits ok*/
   && KM0ZW01.KM0ZWERR == "N")     /* no errors*/
    ;
    KM0Z500(); /* edit screen*/
    ;
    if (KM0ZW01.KM0ZWMD1 == "Y") /* if company data updated*/
      if (KM0ZW01.KM0ZWERR == "N") /* no errors*/
        KM0Z420(); /* process kucrec update*/
      end
    end
    ;
    if (KM0ZW01.KM0ZWERR == "N") /* no errors*/
      converseLib.validationFailed(279); /* all updates ok*/
      KM0ZW01.KM0ZWERR = "Y"; /* set error flag*/
      KM0ZW01.KM0ZWEFL = "N"; /* updates ok set =n*/
      KM0ZW01.KM0ZWMD1 = "N"; /* reset cmpny update*/
    else
      KM0ZW01.KM0ZWEFL = "N"; /* reset update ok flag*/
    end
    ;
  end
  ;
  if (converseVar.eventKey is pf12 /* update key*/
   && KM0ZW01.KM0ZWEFL == "N"      /* edits not ok*/
   && KM0ZW01.KM0ZWERR == "N")     /* error flag*/
    KM0ZW01.KM0ZWERR = "Y"; /* error flag*/
    converseLib.validationFailed(280); /* can pf12 without pressing enter*/
  end
  ;
  if (KM0ZW01.KM0ZWERR == "N")
    converseLib.validationFailed(281); /* invalid pf key message*/
    KM0ZW01.KM0ZWERR = "Y";
  end
  ;
  ;
  ;
end // end KM0Z400

// set fields to update mode
Function KM0Z401()
   /* *****************************/
   /* set update fields*/
   /* *****************************/
  ;
   /* all references to kuccoidn are temporary for side 1 fixes*/
  ;
  KM0ZM100.KM0ZMTTL = "UPDATE ";
  set KM0ZM100.KM0ZMTTL initialAttributes;
  ;
  set KM0ZM100.KUCCOID cursor, initialAttributes; /* company id*/
  ;
   /* *********************************/
   /* set up map for users with*/
   /* flag 1 set to 'y'*/
   /* *********************************/
  if (COMMAREA.CACLVL[1] == "Y") /* change flag level 1*/
    set KM0ZM100.KUCSTYNT initialAttributes; /* std carton*/
    set KM0ZM100.CU-MAX-FTWR-YNT-CD initialAttributes; /* max carton ftwr*/
    set KM0ZM100.CU-MAX-APRL-YNT-CD initialAttributes; /* max carton aprl*/
    set KM0ZM100.KUCUNTCS initialAttributes; /* units/case*/
    set KM0ZM100.KUCYPOAP initialAttributes; /* aprl - po req*/
    set KM0ZM100.KUCYPOFT initialAttributes; /* ftwr - po req*/
    set KM0ZM100.CU-PL-STYNM-PRT-FL initialAttributes;
    set KM0ZM100.KUCSKIND initialAttributes; /* cu-cusku-ind*/
    set KM0ZM100.CU-CUSKU-SZ-FL initialAttributes;
    set KM0ZM100.CU-EDI-CUST-IND initialAttributes;
    set KM0ZM100.YCU-CRTN-USE-CD initialAttributes;
    set KM0ZM100.CU-PRT-XREF-FL initialAttributes;
    set KM0ZM100.CU-DOC-BY-ORD-FL initialAttributes;
    set KM0ZM100.CU-HANG-DFLT-FL initialAttributes;
  end
  ;
  ;
end // end KM0Z401

// set fields for inquiry mode
Function KM0Z402()
   /* *****************************/
   /* set fields for inquiry*/
   /* *****************************/
   /* 08-27-91 chellm  added autoskip for op required apprl & ftwr*/
  ;
    /* all references to kuccoidn are temporary fixes for side 1*/
  ;
  KM0ZM100.KM0ZMTTL = "INQUIRY";
  set KM0ZM100.KM0ZMTTL skip;
  set KM0ZM100.KM0ZMTTL initialAttributes;
  ;
  set KM0ZM100.KUCSTYNT skip; /* std carton*/
  set KM0ZM100.CU-MAX-FTWR-YNT-CD skip; /* max carton ftwr*/
  set KM0ZM100.CU-MAX-APRL-YNT-CD skip; /* max carton aprl*/
  set KM0ZM100.KUCUNTCS skip; /* units/case*/
  set KM0ZM100.KUCYPOAP skip; /* po required apprl*/
  set KM0ZM100.KUCYPOFT skip; /* po required ftwr*/
  set KM0ZM100.CU-PL-STYNM-PRT-FL skip;
  set KM0ZM100.YCU-CRTN-USE-CD skip;
  set KM0ZM100.KUCSKIND skip; /* cu-cusku-ind*/
  set KM0ZM100.CU-CUSKU-SZ-FL skip;
  set KM0ZM100.CU-EDI-CUST-IND skip;
  set KM0ZM100.CU-PRT-XREF-FL skip;
  set KM0ZM100.CU-CO-SELF-NBR skip;
  set KM0ZM100.CU-HANG-DFLT-FL skip;
  set KM0ZM100.CU-DOC-BY-ORD-FL skip;
  ;
  ;
end // end KM0Z402

// update company kucrec
Function KM0Z420()
   /* *************************************************/
   /* update company and create audit trail*/
   /* *************************************************/
  ;
   /* convert csp time/date format to db2 time/date stamp format*/
  XX0XS01();
  ;
  ;
   /* ****************************/
   /* prepare before look audit*/
   /* ****************************/
  ;
  set KUZREC empty;
  KUZREC.KUZTYPE = "C"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = "B"; /* blank-add, b-before, a-after*/
  KUZREC.XXXTBLNM = "VCMPNY01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUCREC.KUCCOID;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUCREC.KUCGRP;
  ;
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM0Z   ";
    TA1REC.TA1LOCAT[1] = "KM0Z420  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VCMPNY01 ";
    TA1REC.TA1MAP = "KM0ZM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VCMPNY01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  ;
  KM0Z422(); /* add audit before image for cmpny01*/
  ;
  KM0Z424(); /* format cmpny general data update*/
  ;
  KM0Z426(); /* update company*/
  ;
   /* ****************************/
   /* format after look audit*/
   /* ****************************/
  ;
  set KUZREC empty;
  KUZREC.KUZTYPE = "C"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = "A"; /* blank-add, b-before, a-after*/
  KUZREC.XXXTBLNM = "VCMPNY01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUCREC.KUCCOID;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUCREC.KUCGRP;
  ;
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM0Z   ";
    TA1REC.TA1LOCAT[1] = "KM0Z420  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VCMPNY01 ";
    TA1REC.TA1MAP = "KM0ZM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VCMPNY01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  ;
  KM0Z422(); /* write audit trail after image*/
  ;
  ;
end // end KM0Z420

// inser before cmpny audit
Function KM0Z422()
   /* **********************/
    /* add before image*/
   /* **********************/
  ;
  set SQLCA empty;
  ;
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUAUD01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1PGMNM = "KM0Z422";
    TA1REC.TA1LOC = "ADD DB2 DCUST.VCUAUD01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
  ;
  ;
end // end KM0Z422

// prepare cmpny record
Function KM0Z424()
   /* **************************/
   /* format company update*/
   /* **************************/
  ;
  ;
  KUCREC.KUCSTYNT = KM0ZM100.KUCSTYNT; /* std carton cd*/
  KUCREC.CU-MAX-FTWR-YNT-CD = KM0ZM100.CU-MAX-FTWR-YNT-CD; /* max carton cd ftwr*/
  KUCREC.CU-MAX-APRL-YNT-CD = KM0ZM100.CU-MAX-APRL-YNT-CD; /* max carton cd aprl*/
  KUCREC.KUCUNTCS = KM0ZM100.KUCUNTCS; /* units/case*/
  ;
  KUCREC.KUCYPOAP = KM0ZM100.KUCYPOAP; /* aprl - po req*/
  KUCREC.KUCYPOFT = KM0ZM100.KUCYPOFT; /* ftwr - po req*/
  KUCREC.CU-PL-STYNM-PRT-FL = KM0ZM100.CU-PL-STYNM-PRT-FL;
  KUCREC.YCU-CRTN-USE-CD = KM0ZM100.YCU-CRTN-USE-CD;
  KUCREC.KUCSKIND = KM0ZM100.KUCSKIND; /* cu cusku ind*/
  KUCREC.CU-CUSKU-SZ-FL = KM0ZM100.CU-CUSKU-SZ-FL;
  KUCREC.CU-PRT-XREF-FL = KM0ZM100.CU-PRT-XREF-FL;
  KUCREC.CU-HANG-DFLT-FL = KM0ZM100.CU-HANG-DFLT-FL;
  KUCREC.CU-DOC-BY-ORD-FL = KM0ZM100.CU-DOC-BY-ORD-FL;
  KUCREC.CU-EDI-CUST-IND = KM0ZM100.CU-EDI-CUST-IND;
  KUCREC.CU-CO-SELF-NBR = KM0ZM100.CU-CO-SELF-NBR;
  ;
  KUCREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* stamp chg date*/
  KUCREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* stamp chg time*/
  ;
  ;
end // end KM0Z424

// update cmpny record
Function KM0Z426()
   /* **************************/
   /* update company*/
   /* **************************/
  ;
  set SQLCA empty;
  ;
  call "IO0240" ("U ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      converseLib.validationFailed(31); /* cmpny upt since last request msg*/
      KM0ZW01.KM0ZWERR = "Y"; /* set error msg*/
      KM0Z200(); /* refresh the screen*/
      return;
    else
      KM0ZW01.KM0ZWSQL = SQLCA.SQLCAREC; /* hold error sqlca*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      SQLCA.SQLCAREC = KM0ZW01.KM0ZWSQL;
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      TA1REC.TA1MAP = " ";
      KM0ZW01.KM0ZWKEY = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KM0ZW01.KM0ZWKEY;
      TA1REC.TA1PGMNM = "KM0Z426";
      TA1REC.TA1LOC = "UPDATE DB2 DCUST.VCMPNY01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
  ;
  ;
end // end KM0Z426

// edit screen data
Function KM0Z500()
   /* ***********************************************************/
   /* ------- edit fields from upt basic co/cr map ------*/
  ;
   /* note: edits are performed in reverse sequence of field*/
         /* appearance.  edit criteria are found in stmt grps.*/
   /* ***********************************************************/
  ;
  set KM0ZM100.KUCCOID initialAttributes;
  if (KM0ZM100.KUCCOID == KM0ZW01.KM0ZWCID
   && KM0ZM100.KUCCOID != 0)
    /* next sentence*/
  else
    KM0Z200(); /* refresh screen*/
    KM0ZW01.KM0ZWERR = "Y"; /* set error flag*/
    KM0ZW01.KM0ZWEFL = "N"; /* set update flag*/
    KM0ZW01.KM0ZWMD1 = "N"; /* set update flag*/
    return;
  end
  ;
  if (KM0ZW01.KM0ZWUPM == "Y") /* if in update mode*/
    KM0Z401(); /* set fields defined*/
  else
    return;
  end
  ;
   /* **********************/
   /* show pop-up windows*/
   /* **********************/
  ;
  KM0Z502(); /* show pop-up windows*/
  ;
  ;
  KM0Z505(); /* edit screen*/
  ;
  ;
end // end KM0Z500

// show pop-up windows
Function KM0Z502()
   /* ***********************************/
   /* show pop-up windows*/
   /* ***********************************/
  ;
   /* ***********************************/
    /* PO Required table*/
   /* ***********************************/
  ;
  if (KM0ZM100.KUCYPOAP == "?")
    XPXX001();
    XX0XW02.XX0XWHDR = "VALID PO REQUIRED CODES";
    while (XX0XW02.XX0XWEND == "N")
      XPYPO01();
    end
    set KM0ZM100.KUCYPOAP cursor;
    if (XX0XW02.XX0XWPIX > 0)
      KM0ZM100.KUCYPOAP = YPOTBL.YPOCD[XX0XWPIX];
    end
  end
  ;
  ;
  if (KM0ZM100.KUCYPOFT == "?")
    XPXX001();
    XX0XW02.XX0XWHDR = "VALID PO REQUIRED CODES";
    while (XX0XW02.XX0XWEND == "N")
      XPYPO01();
    end
    set KM0ZM100.KUCYPOFT cursor;
    if (XX0XW02.XX0XWPIX > 0)
      KM0ZM100.KUCYPOFT = YPOTBL.YPOCD[XX0XWPIX];
    end
  end
  ;
  ;
   /* ***********************************/
    /* Carton Type table*/
   /* ***********************************/
  ;
  if (KM0ZM100.KUCSTYNT == "?")
    XPXX001();
    XX0XW02.XX0XWHDR = "VALID CARTON TYPE CODES";
    while (XX0XW02.XX0XWEND == "N")
      XPYNT01();
    end
    set KM0ZM100.KUCSTYNT cursor;
    if (XX0XW02.XX0XWPIX > 0)
      KM0ZM100.KUCSTYNT = YNTTBL.YNTCD[XX0XWPIX];
    end
  end
  ;
  ;
  if (KM0ZM100.CU-MAX-FTWR-YNT-CD == "?")
    XPXX001();
    XX0XW02.XX0XWHDR = "VALID CARTON TYPE CODES";
    while (XX0XW02.XX0XWEND == "N")
      XPYNT01();
    end
    set KM0ZM100.CU-MAX-FTWR-YNT-CD cursor;
    if (XX0XW02.XX0XWPIX > 0)
      KM0ZM100.CU-MAX-FTWR-YNT-CD = YNTTBL.YNTCD[XX0XWPIX];
    end
  end
  ;
  ;
  if (KM0ZM100.CU-MAX-APRL-YNT-CD == "?")
    XPXX001();
    XX0XW02.XX0XWHDR = "VALID CARTON TYPE CODES";
    while (XX0XW02.XX0XWEND == "N")
      XPYNT01();
    end
    set KM0ZM100.CU-MAX-APRL-YNT-CD cursor;
    if (XX0XW02.XX0XWPIX > 0)
      KM0ZM100.CU-MAX-APRL-YNT-CD = YNTTBL.YNTCD[XX0XWPIX];
    end
  end
  ;
  ;
  converseLib.clearScreen();
  
end // end KM0Z502

// edit some flags codes inds
Function KM0Z505()
   /* ***********************************************************/
   /* ------- edit fields from upt basic co/cr map ------*/
  ;
   /* first set of flags codes and indicators*/
   /* ***********************************************************/
   /* **********************************************/
   /* *****     check if company changes        ****/
   /* **********************************************/
  ;
  if (KM0ZM100.KUCSTYNT != KUCREC.KUCSTYNT
   || KM0ZM100.CU-MAX-FTWR-YNT-CD != KUCREC.CU-MAX-FTWR-YNT-CD
   || KM0ZM100.CU-MAX-APRL-YNT-CD != KUCREC.CU-MAX-APRL-YNT-CD
   || KM0ZM100.KUCUNTCS != KUCREC.KUCUNTCS
   || KM0ZM100.KUCYPOAP != KUCREC.KUCYPOAP
   || KM0ZM100.KUCYPOFT != KUCREC.KUCYPOFT
   || KM0ZM100.YCU-CRTN-USE-CD != KUCREC.YCU-CRTN-USE-CD
   || KM0ZM100.KUCSKIND != KUCREC.KUCSKIND
   || KM0ZM100.CU-CUSKU-SZ-FL != KUCREC.CU-CUSKU-SZ-FL
   || KM0ZM100.CU-PL-STYNM-PRT-FL != KUCREC.CU-PL-STYNM-PRT-FL
   || KM0ZM100.CU-PRT-XREF-FL != KUCREC.CU-PRT-XREF-FL
   || KM0ZM100.CU-HANG-DFLT-FL != KUCREC.CU-HANG-DFLT-FL
   || KM0ZM100.CU-CO-SELF-NBR != KUCREC.CU-CO-SELF-NBR
   || KM0ZM100.CU-DOC-BY-ORD-FL != KUCREC.CU-DOC-BY-ORD-FL
   || KM0ZM100.CU-EDI-CUST-IND != KUCREC.CU-EDI-CUST-IND)
    KM0ZW01.KM0ZWMD1 = "Y"; /* cmpny01 modified*/
  end
  ;
  if (KM0ZW01.KM0ZWMD1 == "Y")
    /* NEXT SENTENCE*/
  else
    return;
  end
  ;
   /* *****************************************/
    /* edit max carton code for footwear*/
   /* *****************************************/
  ;
  if (KM0ZM100.CU-MAX-FTWR-YNT-CD == "  ")
  else
    if (KM0ZM100.CU-MAX-FTWR-YNT-CD != KUCREC.CU-MAX-FTWR-YNT-CD)
      if (KM0ZM100.CU-MAX-FTWR-YNT-CD in YNTTBL.YNTCD)
        if (YNTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          set KM0ZM100.CU-MAX-FTWR-YNT-CD initialAttributes;
        else
          converseLib.validationFailed(71);
          KM0ZW01.KM0ZWERR = "Y"; /* set error flag*/
          set KM0ZM100.CU-MAX-FTWR-YNT-CD cursor, modified, bold;
        end
      else
        converseLib.validationFailed(17);
        KM0ZW01.KM0ZWERR = "Y"; /* set error flag*/
        set KM0ZM100.CU-MAX-FTWR-YNT-CD cursor, modified, bold;
      end
    end
  end
  ;
  ;
   /* *****************************************/
    /* edit max carton code for apparel*/
   /* *****************************************/
  ;
  if (KM0ZM100.CU-MAX-APRL-YNT-CD == "  ")
  else
    if (KM0ZM100.CU-MAX-APRL-YNT-CD != KUCREC.CU-MAX-APRL-YNT-CD)
      if (KM0ZM100.CU-MAX-APRL-YNT-CD in YNTTBL.YNTCD)
        if (YNTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          set KM0ZM100.CU-MAX-APRL-YNT-CD initialAttributes;
        else
          converseLib.validationFailed(71);
          KM0ZW01.KM0ZWERR = "Y"; /* set error flag*/
          set KM0ZM100.CU-MAX-APRL-YNT-CD cursor, modified, bold;
        end
      else
        converseLib.validationFailed(17);
        KM0ZW01.KM0ZWERR = "Y"; /* set error flag*/
        set KM0ZM100.CU-MAX-APRL-YNT-CD cursor, modified, bold;
      end
    end
  end
  ;
  ;
   /* *****************************************/
    /* edit po required codes*/
   /* *****************************************/
  ;
  KM0Z508();
  ;
   /* *****************************************/
    /* edit style name print flag*/
   /* *****************************************/
  ;
  KM0Z509();
  ;
  ;
   /* *****************************************/
    /* edit misc other flags*/
   /* *****************************************/
  ;
  KM0Z510();
  ;
  ;
   /* *****************************************/
    /* edit carton use code*/
   /* *****************************************/
  ;
  if (KM0ZM100.YCU-CRTN-USE-CD != KUCREC.YCU-CRTN-USE-CD)
    if (KM0ZM100.YCU-CRTN-USE-CD == " ")
      set KM0ZM100.YCU-CRTN-USE-CD initialAttributes;
    else
      if (KM0ZM100.YCU-CRTN-USE-CD in YCUTBL.YCU-CRTN-USE-CD)
        if (YCUTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          set KM0ZM100.YCU-CRTN-USE-CD initialAttributes;
        else
          converseLib.validationFailed(442);
          KM0ZW01.KM0ZWERR = "Y"; /* set error flag*/
          set KM0ZM100.YCU-CRTN-USE-CD cursor, modified, bold;
        end
      else
        converseLib.validationFailed(442);
        KM0ZW01.KM0ZWERR = "Y"; /* set error flag*/
        set KM0ZM100.YCU-CRTN-USE-CD cursor, modified, bold;
      end
    end
  end
   /* TCS CHANGE BEGINS 06/21/99*/
  if (KM0ZM100.YCU-CRTN-USE-CD == "01")
    if (KM0ZM100.CU-MAX-APRL-YNT-CD == "00")
      converseLib.validationFailed(476);
      KM0ZW01.KM0ZWERR = "Y"; /* set error flag*/
      set KM0ZM100.CU-MAX-APRL-YNT-CD cursor, modified, bold;
    end
    if (KM0ZM100.CU-MAX-FTWR-YNT-CD == "00")
      converseLib.validationFailed(476);
      KM0ZW01.KM0ZWERR = "Y"; /* set error flag*/
      set KM0ZM100.CU-MAX-FTWR-YNT-CD cursor, modified, bold;
    end
  end
   /* TCS CHANGE ENDS   06/21/99*/
  ;
   /* *****************************************/
    /* edit standard carton code*/
   /* *****************************************/
  ;
  if (KM0ZM100.KUCSTYNT != KUCREC.KUCSTYNT)
    if (KM0ZM100.KUCSTYNT in YNTTBL.YNTCD)
      if (YNTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        set KM0ZM100.KUCSTYNT initialAttributes;
      else
        converseLib.validationFailed(71);
        KM0ZW01.KM0ZWERR = "Y"; /* set error flag*/
        set KM0ZM100.KUCSTYNT cursor, modified, bold;
      end
    else
      converseLib.validationFailed(17);
      KM0ZW01.KM0ZWERR = "Y"; /* set error flag*/
      set KM0ZM100.KUCSTYNT cursor, modified, bold;
    end
  end
  ;
  ;
end // end KM0Z505

// edit ypo codes
Function KM0Z508()
   /* ********************************************/
    /* check p.o. required code - footwear*/
   /* ********************************************/
  ;
  if (KM0ZM100.KUCYPOFT != KUCREC.KUCYPOFT)
    if (KM0ZM100.KUCYPOFT in YPOTBL.YPOCD)
      if (YPOTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        set KM0ZM100.KUCYPOFT initialAttributes;
      else
        KM0ZW01.KM0ZWERR = "Y";
        converseLib.validationFailed(71); /* code is inactive*/
        set KM0ZM100.KUCYPOFT initialAttributes;
      end
    else
      KM0ZW01.KM0ZWERR = "Y";
      converseLib.validationFailed(17); /* invalid value*/
      set KM0ZM100.KUCYPOFT cursor, modified, bold;
    end
  end
  ;
  ;
   /* ********************************************/
    /* check p.o. required code - apparel*/
   /* ********************************************/
  ;
  if (KM0ZM100.KUCYPOAP != KUCREC.KUCYPOAP)
    if (KM0ZM100.KUCYPOAP in YPOTBL.YPOCD)
      if (YPOTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        set KM0ZM100.KUCYPOAP initialAttributes;
      else
        KM0ZW01.KM0ZWERR = "Y";
        converseLib.validationFailed(71); /* code is inactive*/
        set KM0ZM100.KUCYPOAP initialAttributes;
      end
    else
      KM0ZW01.KM0ZWERR = "Y";
      converseLib.validationFailed(17); /* invalid value*/
      set KM0ZM100.KUCYPOAP cursor, modified, bold;
    end
  end
  ;
  ;
   /* ********************************************/
    /* check po required flag*/
   /* ********************************************/
  ;
  if (KM0ZM100.KUCPOFL != KUCREC.KUCPOFL)
    if (KM0ZM100.KUCPOFL == "Y"
     || KM0ZM100.KUCPOFL == "N")
      set KM0ZM100.KUCPOFL initialAttributes;
    else
      KM0ZW01.KM0ZWERR = "Y";
      converseLib.validationFailed(20); /* must be y or n*/
      set KM0ZM100.KUCPOFL cursor, modified, bold;
    end
  end
  ;
  ;
   /* ********************************************/
    /* check po required flag - combinations*/
   /* ********************************************/
  ;
  if (KM0ZM100.KUCPOFL == "N")
    if (KM0ZM100.KUCYPOAP == "00"
     && KM0ZM100.KUCYPOFT == "00")
       /* next sentence*/
    else
      KM0ZW01.KM0ZWERR = "Y";
      converseLib.validationFailed(17); /* invalid combination*/
      set KM0ZM100.KUCYPOAP cursor, modified, bold;
      set KM0ZM100.KUCYPOFT modified, bold;
    end
  else
    if (KM0ZM100.KUCPOFL == "Y")
      if (KM0ZM100.KUCYPOAP == "00"
       || KM0ZM100.KUCYPOFT == "00")
        KM0ZW01.KM0ZWERR = "Y";
        converseLib.validationFailed(17); /* invalid combination*/
        set KM0ZM100.KUCYPOAP cursor, modified, bold;
        set KM0ZM100.KUCYPOFT modified, bold;
      end
    end
  end
  ;
  ;
end // end KM0Z508

// edit stynm prt fl
Function KM0Z509()
   /* *************************************************************/
    /* edit style name print flag*/
  ;
    /* Maintenance History:*/
    /* 10-11-91 CHELLM Created.*/
  ;
   /* *************************************************************/
  ;
  ;
   /* ********************************************/
    /* check po required flag*/
   /* ********************************************/
  ;
  if (KM0ZM100.CU-PL-STYNM-PRT-FL != KUCREC.CU-PL-STYNM-PRT-FL)
    if (KM0ZM100.CU-PL-STYNM-PRT-FL == "Y"
     || KM0ZM100.CU-PL-STYNM-PRT-FL == "N")
      set KM0ZM100.CU-PL-STYNM-PRT-FL initialAttributes;
    else
      KM0ZW01.KM0ZWERR = "Y";
      converseLib.validationFailed(20); /* must be y or n*/
      set KM0ZM100.CU-PL-STYNM-PRT-FL cursor, modified, bold;
    end
  end
  ;
  ;
end // end KM0Z509

// edit misc flags
Function KM0Z510()
   /* *************************************************************/
                  /* edit misc flags*/
  ;
    /* Maintenance History:*/
    /* 03-13-92 CHELLM Created.*/
    /* 09-11-96 kclar1 chg edit for kucskind to not all g*/
  ;
   /* *************************************************************/
  ;
  ;
   /* ********************************************/
    /* check customer cross-ref ind*/
   /* ********************************************/
  ;
  if (KM0ZM100.KUCSKIND != KUCREC.KUCSKIND)
    if (KM0ZM100.KUCSKIND == " "
     || KM0ZM100.KUCSKIND == "C")
      /* *  OR KM0ZM100.KUCSKIND EQ 'G';*/
      set KM0ZM100.KUCSKIND initialAttributes;
    else
      if (KM0ZM100.KUCSKIND == "P")
        if (KUCREC.KUKPCOID > 0)
          set KM0ZM100.KUCSKIND initialAttributes;
        else
          converseLib.validationFailed(346); /* parent not attached can not use 'p'*/
          set KM0ZM100.KUCSKIND cursor, modified, bold;
          KM0ZW01.KM0ZWERR = "Y";
        end
      else
        set KM0ZM100.KUCSKIND cursor, modified, bold;
        converseLib.validationFailed(347); /* must be ' ' 'p' 'c'*/
        KM0ZW01.KM0ZWERR = "Y";
      end /* end if p*/
    end /* end if c or ' ' or 'g'*/
  end
  ;
  ;
   /* ********************************************/
    /* check print cross ref flag*/
   /* ********************************************/
  ;
  if (KM0ZM100.CU-PRT-XREF-FL != KUCREC.CU-PRT-XREF-FL)
    if (KM0ZM100.CU-PRT-XREF-FL == "Y"
     || KM0ZM100.CU-PRT-XREF-FL == "N")
      set KM0ZM100.CU-PRT-XREF-FL initialAttributes;
    else
      KM0ZW01.KM0ZWERR = "Y";
      converseLib.validationFailed(20); /* must be y or n*/
      set KM0ZM100.CU-PRT-XREF-FL cursor, modified, bold;
    end
  end
  ;
   /* ********************************************/
    /* check customer-product-cross-ref by size flag*/
   /* ********************************************/
  ;
  if (KM0ZM100.CU-CUSKU-SZ-FL != KUCREC.CU-CUSKU-SZ-FL)
    if (KM0ZM100.CU-CUSKU-SZ-FL == "Y"
     || KM0ZM100.CU-CUSKU-SZ-FL == "N")
      set KM0ZM100.CU-CUSKU-SZ-FL initialAttributes;
    else
      KM0ZW01.KM0ZWERR = "Y";
      converseLib.validationFailed(20); /* must be y or n*/
      set KM0ZM100.CU-CUSKU-SZ-FL cursor, modified, bold;
    end
  end
  ;
   /* ********************************************/
    /* check hanger default flag*/
   /* ********************************************/
  ;
  if (KM0ZM100.CU-HANG-DFLT-FL != KUCREC.CU-HANG-DFLT-FL)
    if (KM0ZM100.CU-HANG-DFLT-FL == "Y"
     || KM0ZM100.CU-HANG-DFLT-FL == "N")
      set KM0ZM100.CU-HANG-DFLT-FL initialAttributes;
    else
      KM0ZW01.KM0ZWERR = "Y";
      converseLib.validationFailed(20); /* must be y or n*/
      set KM0ZM100.CU-HANG-DFLT-FL cursor, modified, bold;
    end
  end
  ;
   /* ********************************************/
    /* check document by order flag*/
   /* ********************************************/
  ;
  if (KM0ZM100.CU-DOC-BY-ORD-FL != KUCREC.CU-DOC-BY-ORD-FL)
    if (KM0ZM100.CU-DOC-BY-ORD-FL == "Y"
     || KM0ZM100.CU-DOC-BY-ORD-FL == "N")
      set KM0ZM100.CU-DOC-BY-ORD-FL initialAttributes;
    else
      KM0ZW01.KM0ZWERR = "Y";
      converseLib.validationFailed(20); /* must be y or n*/
      set KM0ZM100.CU-DOC-BY-ORD-FL cursor, modified, bold;
    end
  end
  ;
   /* ********************************************/
    /* check EDI Customer Indicator*/
   /* ********************************************/
  ;
  if (KM0ZM100.CU-EDI-CUST-IND != KUCREC.CU-EDI-CUST-IND)
    if (KM0ZM100.CU-EDI-CUST-IND == " "
     || KM0ZM100.CU-EDI-CUST-IND == "1"
     || KM0ZM100.CU-EDI-CUST-IND == "2"
     || KM0ZM100.CU-EDI-CUST-IND == "P") /* # 1520*/
      set KM0ZM100.CU-EDI-CUST-IND initialAttributes;
    else
      KM0ZW01.KM0ZWERR = "Y";
      converseLib.validationFailed(464);
      set KM0ZM100.CU-EDI-CUST-IND cursor, modified, bold;
    end
  end
  ;
  ;
end // end KM0Z510

// Init records
Function KM0ZS-INIT-RECS()
  /* *************************************************************/
  /* *             Initialize records used by KM0Z*/
  /* *************************************************************/
  ;
  set KUCREC empty;
  set KUKREC empty;
  set KUZREC empty;
  set VCTACT01 empty;
  set KM0ZW01 empty;
  set XX0XW01 empty;
  set XX0XW02 empty;
  set SQLCA empty;
  set TA1REC empty;
end // end KM0ZS-INIT-RECS

// converse pop up window
Function XPYPO01()
   /* ------------------------------------------------------------*/
  ;
              /* CONVERSE POP UP WINDOW*/
  ;
      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/
  ;
   /* ------------------------------------------------------------*/
  ;
   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/
  ;
  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/
    ;
     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/
    ;
    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end
    ;
    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";
    ;
     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/
    ;
    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YPOTBL.YPOCD[XX0XWCT1] != "99") /* Or end of data*/
        if (YPOTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YPOTBL.YPOCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YPOTBL.YPODESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end
    ;
     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/
    ;
    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YPOTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YPOTBL.YPOCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YPOTBL.YPODESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end
  ;
  ;
  converse XX0XM001 ;
  ;
  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/
  ;
     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/
  ;
  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end
  ;
    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/
  ;
  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YPOTBL.YPOCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/
        ;
         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/
        ;
        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end
  ;
  ;
end // end XPYPO01

//*** RECORD=KM0ZW01 ****
// this record contains work fields used entirely within km06.
// **********************************************************
// *              Maintenance Log                           *
// **********************************************************
// 29-june-1993         dlegg     Add character redefinition
//                                of company number.
// ***********************
Record KM0ZW01 type basicRecord
  10 KM0ZWUSR KM0ZWUSR ; 
    15 KM0ZWCNO KM0ZWCNO ; 
      20 KM0ZWCNO-CHAR KM0ZWCNO-CHAR ; 
    15 * char(8) ; 
  10 KM0ZWCID KM0ZWCID ; 
  10 KM0ZWKEY KM0ZWKEY ; 
  10 KM0ZWERR KM0ZWERR ; 
  10 KM0ZWMD1 KM0ZWMD1 ; 
  10 KM0ZWUPM KM0ZWUPM ; 
  10 KM0ZWEFL KM0ZWEFL ; 
  10 KM0ZWSQL KM0ZWSQL ; 
  10 XATCD XATCD ; 
  10 XXXPHN XXXPHN ; 
    15 XXXPHNA XXXPHNA ; 
    15 XXXPHNP XXXPHNP ; 
    15 XXXPHNN XXXPHNN ; 
  10 KM0ZW-PHONE KM0ZW-PHONE ; 
    15 KM0ZW-PHN-AREA-CD KM0ZW-PHN-AREA-CD ; 
    15 KM0ZW-PHN-DASH1 KM0ZW-PHN-DASH1 ; 
    15 KM0ZW-PHN-PREFIX KM0ZW-PHN-PREFIX ; 
    15 KM0ZW-PHN-DASH2 KM0ZW-PHN-DASH2 ; 
    15 KM0ZW-PHN-NUMBER KM0ZW-PHN-NUMBER ; 
end // end KM0ZW01

// format phone area code
DataItem KM0ZW-PHN-AREA-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format phone dash
DataItem KM0ZW-PHN-DASH1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format phone dash
DataItem KM0ZW-PHN-DASH2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format phone number
DataItem KM0ZW-PHN-NUMBER char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format phone prefix
DataItem KM0ZW-PHN-PREFIX char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted phone number
DataItem KM0ZW-PHONE char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current id
DataItem KM0ZWCID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   company number
DataItem KM0ZWCNO num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   company number redefined
DataItem KM0ZWCNO-CHAR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen updated flag
DataItem KM0ZWEFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag
DataItem KM0ZWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work key
DataItem KM0ZWKEY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// vcmpny01 modified flag
DataItem KM0ZWMD1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save area for sqlca/reset
DataItem KM0ZWSQL char(136)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update/inquiry flag
DataItem KM0ZWUPM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reformat area for causera
DataItem KM0ZWUSR char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

