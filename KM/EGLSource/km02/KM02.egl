package km02;

import corpcom1.CAMSG;
import corpcom1.CATOAP;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XSSM003;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx2.XXXZIP;
import ku.common.KUCCONM;
import ku.common.KUCREC;
import nl.common.NLAADRID;
import nl.common.NLAINTGR;
import ta.common.TA1REC;
import vv.common.VLADDR01;
//*** PROGRAM=KM02 ****
// ;***********************************************************
// ;*         View All long Customer Addresses
// ;*
// ;*==========================================================
// ;*                   maintenance log
// ;*----------------------------------------------------------
// ;*   date     int              description
// ;*----------------------------------------------------------
// ;* 09/12/89 dsalzw   application cloned from km0b, to handle
// ;*                   long addresses required by NIL.
// ;*01-17-90 j fuat    db changes
// ;*10-01-93 CHELLM    CSP 4.1 Conversion.
// ;***********************************************************
// *********************
Program KM02 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KM02W01 KM02W01; // record
  KM02W02 KM02W02; // record
  KUCREC KUCREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VLADDR01 VLADDR01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KM02M.KM02M001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KM02000: KM02000();
    goto KM02010;
    KM02010: KM02010();
    ;
    ;
    goto KM02010;
    ;
    ;
    ;
  end // end main
end // end KM02

// km02 initialization
Function KM02000()
  ;
  XSENTRY(); /* check if entered properly*/
  ;
  XSSEGTR(); /* set segmented trans id*/
  ;
  KM02W01.KM02WBSW = "N";
  set KM02M001.KM02W1ST skip;
  ;
  KM02S00(); /* handle fast-path entry*/
  ;
end // end KM02000

// credit menu
Function KM02010()
  ;
   /* initialize the screen variables*/
  ;
  if (converseVar.validationMsgNum == 0
   && COMMAREA.CASECRC == 0)
    if (KM02W01.KM02WBSW == "Y")
      KM02S10(); /* build the km02m001 screen*/
    else
      /* next sentence*/
    end
  else
    if (COMMAREA.CASECRC != 0)
      KM02M001.CAMSG = COMMAREA.CAMSG;
      set KM02M001 alarm;
    else
      set KM02M001 alarm;
    end
  end
  ;
  ;
  KM02M001.XXXSCRDT = VGVar.currentShortGregorianDate;
  ;
  KM02S12(); /* protect fields*/
  ;
  ;
  converse KM02M001 ;
  ;
  ;
  KM02M001.CAMSG = " ";
  ;
  ;
  KM02S70(); /* handle special entry (fast-path, pf-keys)*/
  ;
  ;
  if (converseVar.validationMsgNum == 0
   && COMMAREA.CASECRC == 0)
    KM02S05(); /* edit cc0mm001 entry*/
  end
  ;
  ;
  ;
  exit stack;
  ;
  ;
end // end KM02010

// handle fast path entry
Function KM02S00()
  ;
  ;
  if (COMMAREA.CAITEM != " ")
    KM02W01.KM02WCID = 0;
    KM02W01.KM02WAID = 0;
    KM02W01.KM02WZIP = " ";
    KM02W01.KM02WIN1 = 1;
    KM02W01.KM02WIN2 = 1;
    KM02W01.KM02WFNO = 1;
    while (KM02W01.KM02WIN1 <= 20
     && COMMAREA.CAITMLTR[KM02WIN1] != " ")
      if (COMMAREA.CAITMLTR[KM02WIN1] == ".")
        KM02W01.KM02WFNO = KM02W01.KM02WFNO + 1;
        KM02W01.KM02WIN2 = 0;
      else
        KM02S01(); /* move each letter*/
        if (converseVar.validationMsgNum == 0)
          /* next sentence*/
        else
          set KM02M001.CAITEM cursor, bold;
          return;
        end
      end
      KM02W01.KM02WIN1 = KM02W01.KM02WIN1 + 1;
      KM02W01.KM02WIN2 = KM02W01.KM02WIN2 + 1;
    end
    KM02M001.NLAINTGR = KM02W01.KM02WCID;
    KM02M001.NLAADRID[3] = KM02W01.KM02WAID;
    KM02M001.XXXZIP[3] = KM02W01.KM02WZIP;
    COMMAREA.CAITEM = " ";
    KM02S05(); /* validate the fast-path option(s)*/
  end
end // end KM02S00

// move each caitem letter
Function KM02S01()
  if (KM02W01.KM02WFNO == 1)
    if (KM02W01.KM02WIN2 <= 7)
      KM02W01.KM02WCLT[KM02WIN2] = COMMAREA.CAITMLTR[KM02WIN1];
    else
      converseLib.validationFailed(109); /* co number too long*/
      KM02W01.KM02WIN1 = 21; /* force exit from loop*/
    end
  else
    if (KM02W01.KM02WFNO == 2)
      if (KM02W01.KM02WIN2 <= 9)
        KM02W01.KM02WZLT[KM02WIN2] = COMMAREA.CAITMLTR[KM02WIN1];
      else
        converseLib.validationFailed(109); /* zip code too long*/
        KM02W01.KM02WIN1 = 21; /* force exit from loop*/
      end
    else
      if (KM02W01.KM02WFNO == 3)
        if (KM02W01.KM02WIN2 <= 4)
          KM02W01.KM02WALT[KM02WIN2] = COMMAREA.CAITMLTR[KM02WIN1];
        else
          converseLib.validationFailed(125); /* address id too long*/
          KM02W01.KM02WIN1 = 21; /* force exit from loop*/
        end
      else
        if (KM02W01.KM02WFNO > 3
         || KM02W01.KM02WFNO < 1)
          converseLib.validationFailed(113); /* too many fields*/
          KM02W01.KM02WIN1 = 21; /* force exit from loop*/
        end
      end
    end
  end
end // end KM02S01

// edit entry
Function KM02S05()
  ;
  if (KM02M001.NLAINTGR > 0)
    if (KM02M001.NLAINTGR != KM02W01.NLAINTGR
     || KM02M001.XXXZIP[3] != KM02W01.XXXZIP
     || KM02M001.NLAADRID[3] != KM02W01.NLAADRID)
      KM02S90(); /* get and store records for new criteria*/
      if (converseVar.validationMsgNum == 0) /* if records were stored ok*/
        KM02W01.NLAINTGR = KM02M001.NLAINTGR; /* set up working storage*/
        KM02W01.XXXZIP = KM02M001.XXXZIP[3]; /* so we know if the*/
        KM02W01.NLAADRID = KM02M001.NLAADRID[3]; /* criteria changes*/
        KM02W01.KM02W1ST = 1;
        KM02W01.KM02WBSW = "Y";
      end
    else
      if (KM02M001.KM02W1ST != KM02W01.KM02W1ST)
        if (KM02M001.KM02W1ST <= KM02W01.KM02WRCT)
          KM02W01.KM02WBSW = "Y";
          if (KM02M001.KM02W1ST == 0)
            KM02M001.KM02W1ST = KM02W01.KM02W1ST;
          else
            KM02W01.KM02W1ST = KM02M001.KM02W1ST;
          end
        else
          KM02W01.KM02WBSW = "N";
          converseLib.validationFailed(115); /* outside valid range*/
          set KM02M001.KM02W1ST cursor, bold;
        end
      end
    end
  else
    converseLib.validationFailed(114); /* company number is required*/
    set KM02M001.NLAINTGR cursor, bold;
  end
  ;
  ;
  exit stack;
  ;
end // end KM02S05

// build the km02m001 screen
Function KM02S10()
  ;
  set KM02M001 initial;
  KM02W01.KM02WBSW = "N";
  ;
  KM02M001.NLAINTGR = KM02W01.NLAINTGR;
  KM02M001.KUCCONM = KM02W01.KUCCONM;
  KM02M001.XXXZIP[3] = KM02W01.XXXZIP;
  KM02M001.NLAADRID[3] = KM02W01.NLAADRID;
  KM02M001.KM02W1ST = KM02W01.KM02W1ST;
  KM02W01.KM02WIN1 = KM02W01.KM02W1ST;
  KM02M001.KM02WRCT = KM02W01.KM02WRCT;
  KM02W01.KM02WIN2 = 1;
  while (KM02W01.KM02WIN2 <= 2
   && KM02W01.KM02WIN1 <= KM02W01.KM02WRCT
   && KM02W02.NLAINTGR[KM02WIN1] > 0)
    KM02S11(); /* move addresses to screen*/
    KM02W01.KM02WIN1 = KM02W01.KM02WIN1 + 1;
    KM02W01.KM02WIN2 = KM02W01.KM02WIN2 + 1;
  end
  KM02M001.KM02W2ND = KM02W01.KM02WIN1 - 1;
  KM02W01.KM02W2ND = KM02M001.KM02W2ND;
  ;
end // end KM02S10

// get addr and move to screen
Function KM02S11()
  ;
  VLADDR01.NLAINTGR = KM02W02.NLAINTGR[KM02WIN1];
  VLADDR01.NLAADRID = KM02W02.NLAADRID[KM02WIN1];
  ;
  call "IO4410" ("S ", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VLADDR01";
    TA1REC.TA1PGMNM = "KM02S11";
    TA1REC.TA1LOC = "SELECT ADDR";
    KM02W01.KM02WCID = VLADDR01.NLAINTGR;
    TA1REC.TA1TBLKE = KM02W01.KM02WCID;
    XSSM003(); /* abort routine*/
  end
  ;
  ;
  KM02M001.NLAADRID[KM02WIN2] = VLADDR01.NLAADRID;
  KM02M001.XXX-ADDR1[KM02WIN2] = VLADDR01.XXX-ADDR1;
  KM02M001.XXX-ADDR2[KM02WIN2] = VLADDR01.XXX-ADDR2;
  KM02M001.XXX-ADDR3[KM02WIN2] = VLADDR01.XXX-ADDR3;
  KM02M001.XXX-ADDR4[KM02WIN2] = VLADDR01.XXX-ADDR4;
  KM02M001.XXX-ADDR5[KM02WIN2] = VLADDR01.XXX-ADDR5;
  KM02M001.XXX-ADDR6[KM02WIN2] = VLADDR01.XXX-ADDR6;
  KM02M001.XSTCD[KM02WIN2] = VLADDR01.XSTCD;
  KM02M001.XCTCD[KM02WIN2] = VLADDR01.XCTCD;
  KM02M001.XXXZIP[KM02WIN2] = VLADDR01.XXXZIP;
  ;
  ;
end // end KM02S11

// protect fields
Function KM02S12()
  set KM02M001.NLAADRID[1] skip;
  set KM02M001.NLAADRID[2] skip;
  set KM02M001.XXXZIP[1] skip;
  set KM02M001.XXXZIP[2] skip;
  set KM02M001.KM02W1ST normal;
end // end KM02S12

// handle any special entries
Function KM02S70()
  KM02W01.CATOAP = KM02M001.CATOAP;
  ;
  if (converseVar.eventKey is enter)
    if (KM02W01.CATOAP != " ")
      KM02S71(); /* handle fast-path option entry*/
    else
      return; /* no special functions...go back*/
    end
  else
    if (converseVar.eventKey is pa2)
      COMMAREA.CATOAP = "KM02";
      XSEXIT();
    else
      if (KM02W01.CATOAP != " ")
        converseLib.validationFailed(29); /* can't use fast-path and pf-key*/
        set KM02M001.CATOAP cursor, bold;
      else
        KM02S72(); /* handle cc0mm001 pf key entry*/
      end
    end
  end
  ;
  ;
  ;
end // end KM02S70

// handle fast-path option entry
Function KM02S71()
  ;
  if (KM02M001.CATOAP != " ")
    COMMAREA.CATOAP = KM02M001.CATOAP;
    COMMAREA.CAITEM = KM02M001.CAITEM;
    XSEXIT(); /* transfer to requested appl.*/
    set KM02M001.CATOAP cursor, bold;
    exit stack;
  end
  ;
end // end KM02S71

// handle any pf key entry
Function KM02S72()
  ;
  if (converseVar.eventKey is pf3)
    KM02S73();
  end
  if (converseVar.eventKey is pf4)
    XSPF4();
  end
  if (converseVar.eventKey is pf5)
    KM02S75();
  end
  if (converseVar.eventKey is pf7)
    KM02S77();
  end
  if (converseVar.eventKey is pf8)
    KM02S78();
  end
  if (converseVar.eventKey is pf3)
    KM02S73();
  end
  if (converseVar.eventKey is pf4)
    XSPF4();
  end
  if (converseVar.eventKey is pf1)
    XSPF1();
  end
  ;
  if (COMMAREA.CASECRC == 0)
    converseLib.validationFailed(3); /* pfkey not supported*/
  end
  ;
  ;
  exit stack;
end // end KM02S72

// handle pf3 key
Function KM02S73()
  COMMAREA.CATOAP = "KM01"; /* go to master menu*/
  XSEXIT();
  ;
end // end KM02S73

// handle pf5 entry
Function KM02S75()
   /* ************************************************************/
   /* *   For this application, pf5 takes you back to*/
   /* *   the Customer Main Menu (ku0m).*/
   /* **/
   /* ************************************************************/
  ;
  COMMAREA.CATOAP = "KU0M"; /* set up the commarea to-application*/
  XSEXIT(); /* and go to the address maint. menu*/
  ;
end // end KM02S75

// handle pf7 entry
Function KM02S77()
  ;
  if (KM02M001.KM02W1ST == 1)
    converseLib.validationFailed(38); /* no previous page*/
    exit stack;
  else
    KM02W01.KM02WIN1 = KM02M001.KM02W1ST - 2;
    if (KM02W01.KM02WIN1 <= 0)
      KM02W01.KM02W1ST = 1;
    else
      KM02W01.KM02W1ST = KM02W01.KM02WIN1;
    end
    KM02W01.KM02WBSW = "Y";
    exit stack;
  end
end // end KM02S77

// handle pf8 entry
Function KM02S78()
  ;
  KM02W01.KM02WIN1 = KM02M001.KM02W2ND + 1;
  if (KM02W01.KM02WIN1 > KM02W01.KM02WRCT)
    converseLib.validationFailed(39); /* last record displayed*/
    exit stack;
  else
    KM02W01.KM02WBSW = "Y";
    KM02W01.KM02W1ST = KM02W01.KM02WIN1;
    exit stack;
  end
  ;
  ;
end // end KM02S78
// get and store company addr.'s
Function KM02S90()
  ;
  KM02W01.KM02WIN1 = 0;
  ;
  set KM02W02 empty;
  ;
  KM02S91(); /* select all addresses for company*/
  ;
  ;
  KM02S93(); /* get company name*/
  ;
  ;
  if (converseVar.validationMsgNum == 0)
    KM02W01.KM02WASW = "Y";
    while (KM02W01.KM02WASW == "Y")
      KM02S92(); /* build temporary storage*/
    end
    if (KM02W01.KM02WIN1 == 0)
      converseLib.validationFailed(145); /* no addresses meet criteria*/
    end
  end
  ;
end // end KM02S90

// build temp storage
Function KM02S91()
  ;
  VLADDR01.NLATYPIN = "C";
  VLADDR01.NLABSIND = " ";
  VLADDR01.NLAONECH = " ";
  VLADDR01.NLAINTGR = KM02M001.NLAINTGR;
  VLADDR01.NLASINT1 = 0;
  VLADDR01.NLASINT2 = 0;
  VLADDR01.NLAADRID = -1;
  ;
  ;
  call "IO4410" ("S1", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    call "IO4410" ("N1", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes}; /* get the 1st record*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if a good return (rec was found)*/
      return; /* go back to km02bld*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if no records were selected*/
        call "IO4410" ("C1", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes};
        converseLib.validationFailed(145); /* no records for company msg*/
        return;
      else
        TA1REC.TA1DBASE = "DNILO";
        TA1REC.TA1TBLVU = "VLADDR01";
        TA1REC.TA1PGMNM = "KM02S91";
        TA1REC.TA1LOC = "SELECT NEXT";
        KM02W01.KM02WCID = VLADDR01.NLAINTGR;
        TA1REC.TA1TBLKE = KM02W01.KM02WCID;
        XSSM003(); /* abort routine*/
      end
    end
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VLADDR01";
    TA1REC.TA1PGMNM = "KM02S91";
    TA1REC.TA1LOC = "SELECT SET";
    KM02W01.KM02WCID = VLADDR01.NLAINTGR;
    TA1REC.TA1TBLKE = KM02W01.KM02WCID;
    XSSM003(); /* abort routine*/
  end
end // end KM02S91

// move addresses to temp storage
Function KM02S92()
  ;
  KM02W01.KM02WMST = "N"; /* reset the record-move switch*/
  ;
  ;
  if (KM02M001.XXXZIP[3] == " " /* if no zip and no address id*/
   && KM02M001.NLAADRID[3] == 0) /* were specified*/
    KM02W01.KM02WMST = "Y"; /* move the record*/
  else
    if (KM02M001.XXXZIP[3] > " "              /* if there was a zip, no address id*/
     && KM02M001.XXXZIP[3] == VLADDR01.XXXZIP /* and the zip is equal to*/
     && KM02M001.NLAADRID[3] == 0)            /* the zip in the record*/
      KM02W01.KM02WMST = "Y"; /* move the record*/
    else
      if (KM02M001.NLAADRID[3] > 0                  /* if there was an address id, no zip*/
       && KM02M001.NLAADRID[3] == VLADDR01.NLAADRID /* and the address id is*/
       && KM02M001.XXXZIP[3] == " ")                /* equal to that in the record*/
        KM02W01.KM02WMST = "Y"; /* move the record*/
      else
        if (KM02M001.XXXZIP[3] > " "              /* if there was both a zip and an*/
         && KM02M001.NLAADRID[3] > 0              
         /* address id,  and both are equal*/
         && KM02M001.XXXZIP[3] == VLADDR01.XXXZIP /* to the record values*/
         && KM02M001.NLAADRID[3] == VLADDR01.NLAADRID)
          KM02W01.KM02WMST = "Y"; /* move the record*/
        end
      end
    end
  end
  ;
  ;
  if (KM02W01.KM02WMST == "Y")
    KM02W01.KM02WIN1 = KM02W01.KM02WIN1 + 1;
    KM02W02.NLAINTGR[KM02WIN1] = VLADDR01.NLAINTGR;
    KM02W02.NLAADRID[KM02WIN1] = VLADDR01.NLAADRID;
  end
  ;
  call "IO4410" ("N1", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    return; /* go move this record to temp storage*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if no records were selected*/
      KM02W01.KM02WRCT = KM02W01.KM02WIN1; /* set the number of recs*/
      KM02W01.KM02WASW = "N";
      call "IO4410" ("C1", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes};
      return;
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VLADDR01";
      TA1REC.TA1PGMNM = "KM02S92";
      TA1REC.TA1LOC = "SELECT NEXT";
      KM02W01.KM02WCID = VLADDR01.NLAINTGR;
      TA1REC.TA1TBLKE = KM02W01.KM02WCID;
      XSSM003(); /* abort routine*/
    end
  end
end // end KM02S92

// get company name
Function KM02S93()
  ;
  KUCREC.KUCCOID = KM02M001.NLAINTGR;
  ;
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    KM02W01.KUCCONM = KUCREC.KUCCONM; /* move name to screen*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if company not found*/
      converseLib.validationFailed(118); /* company not found message*/
      return;
    else
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      KM02W01.KM02WCID = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KM02W01.KM02WCID;
      TA1REC.TA1PGMNM = "KM02S93";
      TA1REC.TA1LOC = "SELECT CMPNY";
      XSSM003(); /* abort routine*/
    end
  end
end // end KM02S93

Record KM02W01 type basicRecord
  5 KM02WGRP KM02WGRP ; 
    10 KM02WSGP KM02WSGP ; 
    10 CAMSG CAMSG ; 
    10 KM02WFNO KM02WFNO ; 
    10 KM02WBSW KM02WBSW ; 
    10 KM02WIN1 KM02WIN1 ; 
    10 KM02WIN2 KM02WIN2 ; 
    10 KM02WASW KM02WASW ; 
    10 NLAADRID NLAADRID ; 
    10 XXXZIP XXXZIP ; 
    10 KM02WZIP KM02WZIP ; 
      15 KM02WZLT KM02WZLT [10] ; 
    10 NLAINTGR NLAINTGR ; 
    10 KM02WCID KM02WCID ; 
      15 KM02WCLT KM02WCLT [7] ; 
    10 KM02WAID KM02WAID ; 
      15 KM02WALT KM02WALT [4] ; 
    10 KUCCONM KUCCONM ; 
    10 KM02WRCT KM02WRCT ; 
    10 CATOAP CATOAP ; 
    10 KM02W1ST KM02W1ST ; 
    10 KM02W2ND KM02W2ND ; 
    10 KM02WMST KM02WMST ; 
end // end KM02W01

//*** RECORD=KM02W02 ****
// this record describes the layout of the db2 address table
// record.
// ***********************
Record KM02W02 type basicRecord
  10 NLAADRID NLAADRID [2000] ; 
  10 NLAINTGR NLAINTGR [2000] ; 
end // end KM02W02

// number of 1st addr on scrn
DataItem KM02W1ST char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of 4th addr on scrn
DataItem KM02W2ND char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage number
DataItem KM02WAID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// individual numbers
DataItem KM02WALT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// address switch
DataItem KM02WASW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// build screen switch
DataItem KM02WBSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage number
DataItem KM02WCID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// individual numbers
DataItem KM02WCLT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of fields
DataItem KM02WFNO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// credit working storage
DataItem KM02WGRP char(184)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index
DataItem KM02WIN1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem KM02WIN2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// move-record-to-strg switch
DataItem KM02WMST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// num of recs in temp strg
DataItem KM02WRCT num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// statement group name
DataItem KM02WSGP char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KM02WZIP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// individual zip-code letters
DataItem KM02WZLT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

