package km0j;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPXOP01;
import corpcom3.XPXPC01;
import corpcom3.XPXX001;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XATCD;
import corpx1.XAUTBL;
import corpx1.XGPCD;
import corpx1.XGPTBL;
import corpx1.XOPTBL;
import corpx1.XPCTBL;
import corpx2.XOPCD;
import corpx2.XOPDESC;
import corpx2.XPCCD;
import corpx2.XPCSDESC;
import ku.common.KUCREC;
import ta.common.TA1REC;
import vv.common.VCUXOP01;
//*** PROGRAM=KM0J ****
// ----  km0j - customer order type validation maintenance ----
// 
// over view:  this application will allow maintenance to the
//             order type validation codes and dates for
//             footwear and apparel.
// 
// date written: 03/31/88
// author:       c. trouw
// 
// ************************************************************
//                 maintenance history log
// ------------------------------------------------------------
//  date     int    modules             description
// ------------------------------------------------------------
// 033188    clt                 initialization
// 050588    clt    km0j000      uncomment xsentry
// 111788    jbw                 added noncsp opt to calls
// 111788    jbw                 added xssegtr logic
// 051589    clt                 database changes
// 061289    clt                 add security for cole haan
// 011590    jfiat               db changes
// 033090    dsalzw              db changes
// 091090    dsalzw              added kiztbl for audit trail
// 052391    dsalzw              removed test for ki0m (menu)
// 25 JUNE 1993  dlegg    Added code to prevent data exception
//                        for CSP v.4. KM0J000
// 9-JULY-1993   DLEGG    CHANGED CALL TO TA0020 WITH ABND TO
//                        RETN. KM0JS01,S20.
// 15-JULY-1993DLEGG    ADD SGRP TO INITIALIZE ALL RECORDS
//                        USED BY APPL.
// 10/01/93 CHELLM  CSP 4.1 Conversion.
// 04/10/95 CHELLM  Added Nike Canada User Security.
// 06/15/96 kclar1  changed application to update new table
//                  vcuxop01 - for order type and sales office
// *********************
Program KM0J type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KM0JW01 KM0JW01; // record
  KM0JW04 KM0JW04; // record
  KUCREC KUCREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VCUXOP01 VCUXOP01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XAUTBL {deleteAfterUse = yes}; // table
  use XOPTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use KM0JM.KM0JM001, // form
   KM0JM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KM0J000: KM0J000();
    ;
    exit program;
    ;
    KM0J005: KM0J005();
  end // end main
end // end KM0J

// enter key processing
Function KM0J-ENT()
   /* ******************************************************************/
   /* km0j-ent*/
   /* ******************************************************************/
  ;
  ;
  if (KM0JM-PAGE-NUM is modified)
    if (KM0JM-PAGE-NUM > KM0JM-PAGE-TOT)
      move KM0JM-PAGE-TOT to KM0JM-PAGE-NUM withV60Compat;
    end
    move KM0JM-PAGE-NUM to KM0JW-PAGE-NUM withV60Compat;
    return;
  end
  ;
  KM0JW01.KM0JWIDX = 1;
  KM0JW-CNT = ((KM0JW-PAGE-NUM - 1) * 13) + 1;
  if (KM0JW-CNT <= 0)
    KM0JW-CNT = 1;
  end
  while (KM0JW01.KM0JWIDX <= 13)
    KM0JW-SEL[KM0JW-CNT] = KM0JSEL[KM0JWIDX];
    if (KM0JM001.KM0JSEL[KM0JWIDX] == "A")
      KM0JS-VERIFY-XGP(); /* verify gpc code*/
      if (KM0JW01.KM0JWERR == "N")
        KM0JS-VERIFY-XPC(); /* verify product code*/
      end
      if (KM0JW01.KM0JWERR == "N")
        KM0JS-VERIFY-XOP(); /* verify order type profile*/
      end
      if (KM0JW01.KM0JWERR == "N")
        KM0JS-VERIFY-CUXOP(); /* verify does not exist*/
      end
      if (KM0JW01.KM0JWERR == "N")
        KM0JW04.XGPCD[KM0JW-CNT] = KM0JM001.XGPCD[KM0JWIDX];
        KM0JW04.XPCCD[KM0JW-CNT] = KM0JM001.XPCCD[KM0JWIDX];
        KM0JW04.XPCSDESC[KM0JW-CNT] = KM0JM001.XPCSDESC[KM0JWIDX];
        KM0JW04.XOPCD[KM0JW-CNT] = KM0JM001.XOPCD[KM0JWIDX];
        KM0JW04.XOPDESC[KM0JW-CNT] = KM0JM001.XOPDESC[KM0JWIDX];
        KM0JWMAX = KM0JWMAX + 1;
      end
    end
    if (KM0JM001.KM0JSEL[KM0JWIDX] == "C")
      if (KM0JM001.XGPCD[KM0JWIDX] == " ")
        KM0JW01.KM0JWERR = "Y";
        converseLib.validationFailed(425);
        return;
      end
      if (KM0JW01.KM0JWERR == "N")
        KM0JS-VERIFY-XOP(); /* verify order type profile*/
      end
      if (KM0JW01.KM0JWERR == "N")
        KM0JW04.XOPCD[KM0JW-CNT] = KM0JM001.XOPCD[KM0JWIDX];
        KM0JW04.XOPDESC[KM0JW-CNT] = KM0JM001.XOPDESC[KM0JWIDX];
      end
    end
    if (KM0JM001.KM0JSEL[KM0JWIDX] == "D"
     && KM0JM001.XGPCD[KM0JWIDX] == " ")
      KM0JW01.KM0JWERR = "Y";
      converseLib.validationFailed(424);
      return;
    end
    if (KM0JM001.KM0JSEL[KM0JWIDX] == "A" || 
    KM0JM001.KM0JSEL[KM0JWIDX] == "C" || 
    KM0JM001.KM0JSEL[KM0JWIDX] == "D" || 
    KM0JM001.KM0JSEL[KM0JWIDX] == " ")
      ;
    else
      set KM0JM001.KM0JSEL[KM0JWIDX] cursor, modified, bold;
      KM0JWERR = "Y";
      converseLib.validationFailed(475);
      return;
    end
    if (KM0JWERR == "N" && KM0JM001.KM0JSEL[KM0JWIDX] != " ")
      KM0JW04.KM0JW-UPDT-FLAG[KM0JW-CNT] = "Y";
      converseLib.validationFailed(277);
    end
    KM0JW01.KM0JWIDX = KM0JW01.KM0JWIDX + 1;
    KM0JW01.KM0JW-CNT = KM0JW01.KM0JW-CNT + 1;
    if (KM0JWIDX <= 13 && KM0JM001.XGPCD[KM0JWIDX] == " " && 
    KM0JM001.KM0JSEL[KM0JWIDX] == " ") /* exit loop*/
      KM0JW01.KM0JWIDX = 14;
    end
  end
  ;
  return;
   /* ******************************************************************/
   /* km0j-ent*/
   /* ******************************************************************/
end // end KM0J-ENT

// main process
Function KM0J000()
   /* **************************************************/
   /* ***  km0j initialization process*/
   /* **************************************************/
  ;
  XSENTRY();
  ;
  XSSEGTR(); /* set segmented trans id*/
  ;
  KM0JS-INIT-RECS();
  ;
  if (COMMAREA.CACHGFL != "Y"
   && COMMAREA.CAINQFL != "Y")
    XSPF4();
  end
  ;
  KM0JW01.KM0JWKEY = COMMAREA.CAUSERA;
  if (COMMAREA.CAITEM != " ")
    KM0JW01.KM0JWKEY = COMMAREA.CAITEM;
  end
  ;
  if (KM0JW01.KM0JWCID-CHAR is numeric)
    if (KM0JW01.KM0JWCID == 0)
      KM0JW01.KM0JWKEY = COMMAREA.CAUSERA;
    end
    KM0JM001.KUCCOID = KM0JW01.KM0JWCID;
  end
  ;
  ;
  COMMAREA.CAITEM = " ";
  COMMAREA.CAUSERA = " ";
  ;
  if (KM0JM001.KUCCOID > 0)
    KM0JW01.KM0JWFST = "Y";
  end
  ;
  KM0JM001.KM0JMDT = VGVar.currentShortGregorianDate;
  KM0JW01.KM0JWHDT = VGVar.currentShortGregorianDate;
  KM0JW01.KM0JWCCT = 19;
  if (KM0JW01.KM0JWCYR < 60)
    KM0JW01.KM0JWCCT = 20;
  end
  ;
  converseVar.commitOnConverse = 1;
  VGVar.handleHardIOErrors = 1;
  KM0JW01.KM0JWEAF = "Y";
  ;
  while (KM0JW01.KM0JWEAF == "Y")
    KM0J005();
  end
  ;
  COMMAREA.CATOAP = COMMAREA.CAFROMAP;
  XSEXIT();
  ;
   /* **************************************************/
   /* ***  km0j000 -  end of process*/
   /* **************************************************/
end // end KM0J000

// cust. o.t. validation screen
Function KM0J005()
   /* ******************************************************************/
   /* km0j005 - begin*/
   /* ******************************************************************/
  ;
  if (KM0JW01.KM0JWFST == "Y")
    KM0JS-GET-DB-INF();
    KM0JW01.KM0JW-CNT = 1;
    KM0JW01.KM0JWFST = "N";
    KM0JW01.KM0JWERR = "N";
  end
  ;
  if (KM0JW01.KM0JWERR == "N")
    set KM0JM001 initial; /* initialize map*/
  end
  ;
  KM0JM001.KM0JMDT = VGVar.currentShortGregorianDate;
  KM0JM001.KM0JMMSG = KM0JW01.KM0JWMSG;
  KM0JW01.KM0JWMSG = " ";
  ;
  if (KM0JW-PAGE-NUM <= 0)
    KM0JW-PAGE-NUM = 1;
  end
  ;
  ;
  KM0JW-CNT = ((KM0JW-PAGE-NUM - 1) * 13) + 1;
  ;
  if (KM0JW-CNT <= 0)
    KM0JW-CNT = 1;
  end
  ;
  if (KM0JW-PAGE-TOT <= 0)
    KM0JW-PAGE-TOT = 1;
  end
  ;
  KM0JW01.KM0JWIDX = 1;
  ;
  KM0JM001.KUCCOID = KM0JW-KUCCOID; /* move comp number*/
  KM0JM001.KUCCONM = KM0JW-KUCCONM; /* move comp name*/
  move KM0JW-PAGE-NUM to KM0JM-PAGE-NUM withV60Compat;
  move KM0JW-PAGE-TOT to KM0JM-PAGE-TOT withV60Compat;
  ;
  while (KM0JWIDX <= 13 && KM0JW-CNT <= KM0JWMAX
   && KM0JWERR == "N")
    KM0JSEL[KM0JWIDX] = KM0JW-SEL[KM0JW-CNT];
    KM0JM001.XGPCD[KM0JWIDX] = KM0JW04.XGPCD[KM0JW-CNT];
    KM0JM001.XPCCD[KM0JWIDX] = KM0JW04.XPCCD[KM0JW-CNT];
    KM0JM001.XPCSDESC[KM0JWIDX] = KM0JW04.XPCSDESC[KM0JW-CNT];
    KM0JM001.XOPCD[KM0JWIDX] = KM0JW04.XOPCD[KM0JW-CNT];
    KM0JM001.XOPDESC[KM0JWIDX] = KM0JW04.XOPDESC[KM0JW-CNT];
    if (KM0JM001.XGPCD[KM0JWIDX] != " " && 
    KM0JW01.KM0JWERR == "N")
      set KM0JM001.XPCCD[KM0JWIDX] skip;
      set KM0JM001.XGPCD[KM0JWIDX] skip;
    end
    KM0JWIDX = KM0JWIDX + 1;
    KM0JW-CNT = KM0JW-CNT + 1;
  end
  ;
  if (KM0JW-POPUP-FLAG == "Y")
    converseLib.clearScreen();
    
  end
  ;
  KM0JW-POPUP-FLAG = "N";
  ;
  converse KM0JM001 ;
  ;
  KM0JW01.KM0JWERR = "N";
  KM0JM001.KM0JMMSG = " ";
  ;
  if (KM0JM001.KUCCOID is modified)
    KM0JWFST = "Y";
    return;
  end
  ;
  ;
  KM0JW01.KM0JWCID = KM0JM001.KUCCOID;
  KM0JW01.KM0JW-KUCCOID = KM0JM001.KUCCOID;
  COMMAREA.CATOAP = KM0JM001.CATOAP;
  COMMAREA.CAITEM = KM0JM001.CAITEM;
  ;
  KM0JS-FPATH-PFK(); /* check fastpath and pf keys*/
  ;
  XX0XS01(); /* get chng date and time*/
  ;
  if (converseVar.eventKey is enter)
    KM0J-ENT();
  end
  ;
  if (converseVar.eventKey is pf8)
    if (KM0JM001.XGPCD[13] != " ")
      KM0JW-PAGE-NUM = KM0JW-PAGE-NUM + 1;
    end
    if (KM0JW-PAGE-NUM > KM0JW-PAGE-TOT)
      move KM0JW-PAGE-NUM to KM0JW-PAGE-TOT withV60Compat;
    end
    if (KM0JW-CNT >= KM0JWMAX)
      converseLib.validationFailed(206);
      return;
    end
  end
  ;
  if (converseVar.eventKey is pf7)
    KM0JW-PAGE-NUM = KM0JW-PAGE-NUM - 1;
    if (KM0JW-PAGE-NUM <= 0)
      KM0JW-PAGE-NUM = 1;
    end
  end
  ;
  if (converseVar.eventKey is pa2)
    KM0JW01.KM0JWFST = "Y";
    return;
  end
  ;
  if (KM0JM001.KUCCOID == 0)
    converseLib.validationFailed(5);
    set KM0JM001.KUCCOID cursor, modified, bold;
    return;
  end
  ;
  if (converseVar.eventKey is pf12 && KM0JW01.KM0JWERR == "N")
    KM0JW01.KM0JWIDX = 1;
    KM0JW-CNT = ((KM0JW-PAGE-NUM - 1) * 13) + 1;
    if (KM0JW-CNT <= 0)
      KM0JW-CNT = 1;
    end
    while (KM0JW01.KM0JWIDX <= 13)
      if (KM0JM001.KM0JSEL[KM0JWIDX] == "A" && 
      KM0JW04.KM0JW-UPDT-FLAG[KM0JW-CNT] == "Y")
        KM0JS-ADD-CUXOP();
      end
      if (KM0JM001.KM0JSEL[KM0JWIDX] == "C" && 
      KM0JW04.KM0JW-UPDT-FLAG[KM0JW-CNT] == "Y")
        KM0JS-CHNG-CUXOP();
      end
      if (KM0JM001.KM0JSEL[KM0JWIDX] == "D" && 
      KM0JW04.KM0JW-UPDT-FLAG[KM0JW-CNT] == "Y")
        KM0JS-DEL-CUXOP();
      end
      if (KM0JM001.KM0JSEL[KM0JWIDX] != " ")
        if (KM0JW04.KM0JW-UPDT-FLAG[KM0JW-CNT] == "Y")
          set KM0JM001.KM0JSEL[KM0JWIDX] skip;
          set KM0JM001.XGPCD[KM0JWIDX] skip;
          set KM0JM001.XOPCD[KM0JWIDX] skip;
          set KM0JM001.XPCCD[KM0JWIDX] skip;
          KM0JM001.KM0JSEL[KM0JWIDX] = "X";
          KM0JW-SEL[KM0JW-CNT] = "X";
          KM0JW-UPDT-FLAG[KM0JW-CNT] = "N";
        else
          KM0JW01.KM0JWERR = "Y";
          set KM0JM001.XOPCD[KM0JWIDX] bold;
          set KM0JM001.XGPCD[KM0JWIDX] bold, cursor;
          set KM0JM001.XPCCD[KM0JWIDX] bold;
          converseLib.validationFailed(257);
          return;
        end
      else
        ;
      end
      KM0JW01.KM0JWIDX = KM0JW01.KM0JWIDX + 1;
      KM0JW01.KM0JW-CNT = KM0JW01.KM0JW-CNT + 1;
    end
    set KM0JM001.KUCCOID cursor;
  end
  ;
   /* ******************************************************************/
   /* km0j005 - end*/
   /* ******************************************************************/
end // end KM0J005

// add cuxop to table
Function KM0JS-ADD-CUXOP()
  ;
    /* check for cuxop prior to adding the row*/
  ;
  VCUXOP01.KUCCOID = KM0JM001.KUCCOID;
  VCUXOP01.XGPCD = KM0JM001.XGPCD[KM0JWIDX];
  KM0JW01.KM0JW-XGPCD = KM0JM001.XGPCD[KM0JWIDX];
  VCUXOP01.XPCCD = KM0JM001.XPCCD[KM0JWIDX];
  KM0JW01.KM0JW-XPCCD = KM0JM001.XPCCD[KM0JWIDX];
  ;
  call "VCUXOP01" ("S ", SQLCA, VCUXOP01) {isNoRefresh = yes, isExternal = yes}; /* select cuxop*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
   /* OVE 194 TO EZEMNO;            /* return if row exists*/
    return;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1LOC = "SELECT VCUXOP01";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUXOP01";
    TA1REC.TA1TBLKE = KM0JW-CU-XOP-KEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
    /* add row if it does not exist*/
  ;
  VCUXOP01.XOPCD = KM0JM001.XOPCD[KM0JWIDX];
  VCUXOP01.ZZZSDT = XX0XW01.XX0XWDAT;
  VCUXOP01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VCUXOP01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  VCUXOP01.ZZZSTM = XX0XW01.XX0XWTIM;
  ;
  call "VCUXOP01" ("A ", SQLCA, VCUXOP01) {isNoRefresh = yes, isExternal = yes}; /* add cuxop*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(262);
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1LOC = "ADD VCUXOP01";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUXOP01";
    TA1REC.TA1TBLKE = KM0JW-CU-XOP-KEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
end // end KM0JS-ADD-CUXOP

// change cuxop table
Function KM0JS-CHNG-CUXOP()
   /* ***********************************************************/
   /* km0js-chng-cuxop*/
   /* ***********************************************************/
  ;
    /* update cuxop*/
  ;
  VCUXOP01.KUCCOID = KM0JM001.KUCCOID;
  VCUXOP01.XGPCD = KM0JM001.XGPCD[KM0JWIDX];
  KM0JW-XGPCD = KM0JM001.XGPCD[KM0JWIDX];
  VCUXOP01.XPCCD = KM0JM001.XPCCD[KM0JWIDX];
  KM0JW-XPCCD = KM0JM001.XPCCD[KM0JWIDX];
  ;
  call "VCUXOP01" ("S ", SQLCA, VCUXOP01) {isNoRefresh = yes, isExternal = yes}; /* update cuxop*/
  if (SQLCA.VAGen_SQLCODE == 0)
    ;
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1LOC = "CHG VCUXOP01";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUXOP01";
    TA1REC.TA1TBLKE = KM0JW-CU-XOP-KEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
  VCUXOP01.XOPCD = KM0JM001.XOPCD[KM0JWIDX];
  VCUXOP01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VCUXOP01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  call "VCUXOP01" ("U ", SQLCA, VCUXOP01) {isNoRefresh = yes, isExternal = yes}; /* update cuxop*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(29);
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1LOC = "CHG VCUXOP01";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUXOP01";
    TA1REC.TA1TBLKE = KM0JW-CU-XOP-KEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
   /* ***********************************************************/
   /* km0js-chng-cuxop - end*/
   /* ***********************************************************/
end // end KM0JS-CHNG-CUXOP

// delete cuxop from table
Function KM0JS-DEL-CUXOP()
   /* *******************************************************************/
   /* km0js-del-cuxop - begin*/
   /* *******************************************************************/
  ;
    /* check for cuxop prior to deleting the row*/
  VCUXOP01.XGPCD = KM0JM001.XGPCD[KM0JWIDX];
  VCUXOP01.XPCCD = KM0JM001.XPCCD[KM0JWIDX];
  ;
  call "VCUXOP01" ("S ", SQLCA, VCUXOP01) {isNoRefresh = yes, isExternal = yes}; /* select cuxop*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence                 /* conitnue if row exists*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(137);
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1LOC = "SELECT VCUXOP01";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUXOP01";
      TA1REC.TA1LOC = "SELECT VCUXOP01";
      TA1REC.TA1TBLKE = KM0JW-CU-XOP-KEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
  call "VCUXOP01" ("D ", SQLCA, VCUXOP01) {isNoRefresh = yes, isExternal = yes}; /* select cuxop*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(62);
    return;
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1LOC = "DELETE VCUXOP01";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUXOP01";
    TA1REC.TA1TBLKE = KM0JW-CU-XOP-KEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
   /* *******************************************************************/
   /* km0js-del-cuxop - end*/
   /* *******************************************************************/
end // end KM0JS-DEL-CUXOP

// check fastpath and pf keys
Function KM0JS-FPATH-PFK()
   /* ******************************************************************/
   /* km0js-fpath-pfk - begin*/
   /* ******************************************************************/
  ;
  if (converseVar.eventKey is enter)
    if (COMMAREA.CATOAP != " ") /* fastpath out*/
      if (COMMAREA.CAITEM == " ")
        COMMAREA.CAITEM = KM0JW01.KM0JWKEY;
      end
      if (COMMAREA.CATOSYS == "KM"
       || COMMAREA.CATOSYS == "KI"
       || COMMAREA.CATOSYS == "KU"
       || COMMAREA.CATOSYS == "KA")
        /* next sentence*/
      else
        COMMAREA.CAITEM = " ";
      end
      XSEXIT();
      KM0JW01.KM0JWMSG = COMMAREA.CAMSG;
    end
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf1) /* help*/
    XSPF1();
    KM0JW01.KM0JWMSG = COMMAREA.CAMSG;
    return;
  end
  ;
  if (converseVar.eventKey is pf3) /* prior menu*/
    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    XSEXIT();
    KM0JW01.KM0JWMSG = COMMAREA.CAMSG;
    return;
  end
  ;
  if (converseVar.eventKey is pf4) /* main menu*/
    XSPF4();
    KM0JW01.KM0JWMSG = COMMAREA.CAMSG;
    return;
  end
  ;
  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2)
  /* MOVE 211 TO EZEMNO;            /* cancelled message*/
    return;
  end
  ;
  if (converseVar.eventKey is pf12
   && COMMAREA.CACHGFL == "Y")
    return;
  end
  ;
  if (converseVar.eventKey is pf7 || 
  converseVar.eventKey is pf8)
    return;
  end
  ;
  converseLib.validationFailed(3); /* invalid pf key*/
  ;
   /* ******************************************************************/
   /* km0js-fpath-pfk - end*/
   /* ******************************************************************/
end // end KM0JS-FPATH-PFK

// read company and CUXOP TBL
Function KM0JS-GET-DB-INF()
  ;
  set KM0JM001.KUCCOID initialAttributes;
  KUCREC.KUCCOID = KM0JM001.KUCCOID;
  VCUXOP01.KUCCOID = KM0JM001.KUCCOID;
  KM0JM001.KUCCONM = " ";
  KM0JW01.KM0JWIDX = 1;
  KM0JW01.KM0JWCNT = 1;
  ;
  set KM0JM001 initial; /* clear map fields*/
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  set KM0JW04 empty; /* clear map fields*/
  ;
  KM0JM001.KUCCOID = KUCREC.KUCCOID;
  KM0JW-KUCCOID = KUCREC.KUCCOID;
  KM0JW-KUCCONM = KUCREC.KUCCONM;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    set KM0JM001.KM0JSEL[1] cursor;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(25);
      set KM0JM001.KUCCOID cursor, modified, bold;
      return;
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KM0JS-GET-DB-INF";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      KM0JW01.KM0JWCID = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KM0JW01.KM0JWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
  if (KUCREC.XAUCD in XAUTBL.XAUCD)
    if (XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KM0JW01.XATCD = XAUTBL.XATCD[sysVar.arrayIndex];
    else
      KM0JW01.XATCD = " ";
    end
  else
    KM0JW01.XATCD = " ";
  end
  ;
  if (KM0JW01.XATCD == "08")
    if (COMMAREA.CADLVL[1] == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(272);
      set KM0JM001.KUCCOID cursor, modified, bold;
      return;
    end
  else
    if (KM0JW01.XATCD == "03")
      if (COMMAREA.CADLVL[2] == "Y")
        /* next sentence*/
      else
        converseLib.validationFailed(272);
        set KM0JM001.KUCCOID cursor, modified, bold;
        return;
      end
    else
      if (COMMAREA.CADLVL[1] == "Y"
       || COMMAREA.CADLVL[2] == "Y")
        converseLib.validationFailed(272);
        set KM0JM001.KUCCOID cursor, modified, bold;
        return;
      end
    end
  end
                    /* Edit for Nike Canada User*/
  ;
  if (KUCREC.XLECD == "03")
    if (COMMAREA.CADLVL[3] == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(272);
      set KM0JM001.KUCCOID cursor, modified, bold;
      return;
    end
  else
    if (COMMAREA.CADLVL[3] == "Y")
      converseLib.validationFailed(272);
      set KM0JM001.KUCCOID cursor, modified, bold;
      return;
    end
  end
  ;
  KM0JM001.KUCCONM = KUCREC.KUCCONM;
  ;
  call "VCUXOP01" ("S1", SQLCA, VCUXOP01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0JS-GET-DB-INF";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUXOP01";
    TA1REC.TA1LOC = "OPEN XOP CURSOR";
    KM0JW01.KM0JWCID = KUCREC.KUCCOID;
    TA1REC.TA1TBLKE = KM0JW01.KM0JWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
  call "VCUXOP01" ("F1", SQLCA, VCUXOP01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(205);
      return;
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KM0JS-GET-DB-INF";
      TA1REC.TA1LOC = "FETCH XOP CURSOR";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUXOP01";
      KM0JW01.KM0JWCID = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KM0JW01.KM0JWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
  KM0JW01.KM0JWCNT = 1;
  ;
  while (KM0JW01.KM0JWCNT < 200 && VAGen_SQLCODE == 0)
    KM0JW04.XGPCD[KM0JWCNT] = VCUXOP01.XGPCD;
    KM0JW04.XOPCD[KM0JWCNT] = VCUXOP01.XOPCD;
    if (VCUXOP01.XOPCD in XOPTBL.XOPCD)
      KM0JW04.XOPDESC[KM0JWCNT] = XOPTBL.XOPDESC[sysVar.arrayIndex];
    else
      KM0JW04.XOPDESC[KM0JWCNT] = "ALL    ";
    end
    KM0JW04.XPCCD[KM0JWCNT] = VCUXOP01.XPCCD;
    if (VCUXOP01.XPCCD in XPCTBL.XPCCD)
      KM0JW04.XPCSDESC[KM0JWCNT] = XPCTBL.XPCSDESC[sysVar.arrayIndex];
    else
      KM0JW04.XPCSDESC[KM0JWCNT] = "ALL    ";
    end
    call "VCUXOP01" ("F1", SQLCA, VCUXOP01) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0 || 
    SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KM0JS-GET-DB-INF";
      TA1REC.TA1LOC = "FETCH XOP CURSOR";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUXOP01";
      KM0JW01.KM0JWCID = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KM0JW01.KM0JWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
    KM0JW01.KM0JWCNT = KM0JW01.KM0JWCNT + 1;
  end
  ;
  KM0JW01.KM0JWMAX = KM0JWCNT - 1;
  KM0JW01.KM0JWCNT = KM0JWCNT - 1;
  ;
  KM0JW-PAGE-NUM = 1;
  ;
  if (KM0JW01.KM0JWMAX < 13)
    converseLib.validationFailed(206);
    KM0JW-PAGE-TOT = 1;
  else
    KM0JW-PAGE-TOT = KM0JWMAX / 13;
    KM0JW-PAGE-TOT = KM0JW-PAGE-TOT * 13;
    if (KM0JW-PAGE-TOT == KM0JWMAX)
      KM0JW-PAGE-TOT = KM0JWMAX / 13;
    else
      KM0JW-PAGE-TOT = (KM0JWMAX / 13) + 1;
    end
  end
  ;
  call "VCUXOP01" ("C1", SQLCA, VCUXOP01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0JS-GET-DB-INF";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUXOP01";
    TA1REC.TA1LOC = "CLOSE XOP CURSOR";
    KM0JW01.KM0JWCID = VCUXOP01.KUCCOID;
    TA1REC.TA1TBLKE = KM0JW01.KM0JWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
end // end KM0JS-GET-DB-INF

// Init records
Function KM0JS-INIT-RECS()
  /* *****************************************************************/
  /* *                KM0J-INIT-RECS*/
  /* *****************************************************************/
  ;
  set KUCREC empty;
  set KM0JW01 empty;
  set KM0JW04 empty;
  set SQLCA empty;
  set TA1REC empty;
  set XX0XW01 empty;
  set VCUXOP01 empty;
  ;
end // end KM0JS-INIT-RECS

// add cuxop to table
Function KM0JS-VERIFY-CUXOP()
  ;
    /* check for cuxop prior to adding the row*/
  ;
  VCUXOP01.XGPCD = KM0JM001.XGPCD[KM0JWIDX];
  KM0JW01.KM0JW-XGPCD = KM0JM001.XGPCD[KM0JWIDX];
  VCUXOP01.XPCCD = KM0JM001.XPCCD[KM0JWIDX];
  KM0JW01.KM0JW-XPCCD = KM0JM001.XPCCD[KM0JWIDX];
  ;
  call "VCUXOP01" ("S ", SQLCA, VCUXOP01) {isNoRefresh = yes, isExternal = yes}; /* select cuxop*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    set KM0JM001.XGPCD[KM0JWIDX] bold;
    set KM0JM001.XPCCD[KM0JWIDX] cursor, bold;
    KM0JW01.KM0JWERR = "Y";
    converseLib.validationFailed(194); /* return if row exists*/
    return;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    return;
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1LOC = "SELECT VCUXOP01";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUXOP01";
    TA1REC.TA1TBLKE = KM0JW-CU-XOP-KEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
end // end KM0JS-VERIFY-CUXOP

// verify gpc code
Function KM0JS-VERIFY-XGP()
   /* ****************************************************************/
   /* km0js-verify-grp - begin*/
   /* ****************************************************************/
  ;
  KM0JW01.KM0JWMOD = "Y";
  ;
   /* F KM0JM001.XGPCD(KM0JWIDX) EQ ' ';*/
   /* MOVE ' ' TO KM0JM001.XOPCD(KM0JWIDX);*/
   /* MOVE ' ' TO KM0JM001.XGPCD(KM0JWIDX);*/
   /* EZERTN;*/
   /* ND;*/
  ;
  if (KM0JM001.XGPCD[KM0JWIDX] in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A"
    ) /* next sentence*/
    else
      converseLib.validationFailed(17);
      KM0JW01.KM0JWERR = "Y";
      set KM0JM001.XGPCD[KM0JWIDX] cursor, bold;
    end
  else
    converseLib.validationFailed(17);
    KM0JW01.KM0JWERR = "Y";
    set KM0JM001.XGPCD[KM0JWIDX] cursor, bold;
  end
  ;
   /* ****************************************************************/
   /* km0js-verify-grp - end*/
   /* ****************************************************************/
end // end KM0JS-VERIFY-XGP

// verify profile code
Function KM0JS-VERIFY-XOP()
   /* ************************************************8*/
   /* km0js-verify-xop*/
   /* ************************************************8*/
  ;
  KM0JW01.KM0JWMOD = "Y";
  ;
  if (KM0JM001.XGPCD[KM0JWIDX] == " ")
    KM0JM001.XOPCD[KM0JWIDX] = " ";
    KM0JM001.XPCCD[KM0JWIDX] = " ";
    return;
  end
  ;
  set KM0JM001.XOPCD[KM0JWIDX] initialAttributes;
  ;
   /* popup order type table*/
  ;
  KM0JW01.KM0JW-CHK-FIELD = KM0JM001.XOPCD[KM0JWIDX];
  if (KM0JW01.KM0JW-CHK-POS-1 == "?")
    XPXX001();
    XX0XW02.XX0XWHDR = "         VALID ORDER TYPE PROFILES ";
    while (XX0XW02.XX0XWEND == "N")
      XPXOP01();
    end
    set KM0JM001.XOPCD[KM0JWIDX] cursor;
    if (XX0XW02.XX0XWPIX > 0)
      KM0JM001.XOPCD[KM0JWIDX] = XOPTBL.XOPCD[XX0XWPIX];
      KM0JM001.XOPDESC[KM0JWIDX] = XOPTBL.XOPDESC[XX0XWPIX];
    end
    if (KM0JW01.KM0JW-POPUP-FLAG == "N")
      KM0JW01.KM0JW-POPUP-FLAG = "Y";
    end
  end
  ;
  if (KM0JM001.XOPCD[KM0JWIDX] in XOPTBL.XOPCD)
    if (XOPTBL.XXXSTAT[sysVar.arrayIndex] == "A"
     && XOPTBL.XGPCD[sysVar.arrayIndex] == KM0JM001.XGPCD[KM0JWIDX])
      KM0JM001.XOPDESC[KM0JWIDX] = XOPTBL.XOPDESC[sysVar.arrayIndex];
    else
      converseLib.validationFailed(474);
      set KM0JM001.XOPCD[KM0JWIDX] cursor, bold;
      KM0JW01.KM0JWERR = "Y";
      return;
    end
  else
    converseLib.validationFailed(17);
    KM0JW01.KM0JWERR = "Y";
    set KM0JM001.XOPCD[KM0JWIDX] cursor, bold;
    return;
  end
  ;
end // end KM0JS-VERIFY-XOP

// verify product category code
Function KM0JS-VERIFY-XPC()
  ;
  KM0JW01.KM0JWMOD = "Y";
  ;
  if (KM0JM001.XGPCD[KM0JWIDX] == " ")
    KM0JM001.XOPCD[KM0JWIDX] = " ";
    KM0JM001.XPCCD[KM0JWIDX] = " ";
    return;
  end
  ;
   /* *** check for pop up table*/
  ;
  KM0JW01.KM0JW-CHK-FIELD = KM0JM001.XPCCD[KM0JWIDX];
  if (KM0JW01.KM0JW-CHK-POS-1 == "?")
    XPXX001();
    XX0XW02.XX0XWHDR = "   VALID PRODUCT CATEGORY CODES    ";
    while (XX0XW02.XX0XWEND == "N")
      XPXPC01();
    end
    set KM0JM001.XPCCD[KM0JWIDX] cursor;
    if (XX0XW02.XX0XWPIX > 0)
      KM0JM001.XPCCD[KM0JWIDX] = XPCTBL.XPCCD[XX0XWPIX];
      KM0JM001.XPCSDESC[KM0JWIDX] = XPCTBL.XPCSDESC[XX0XWPIX];
    end
    if (KM0JW01.KM0JW-POPUP-FLAG == "N")
      KM0JW01.KM0JW-POPUP-FLAG = "Y";
    end
  end
  ;
      /* Verify xpccd in table*/
  ;
  if (KM0JM001.XPCCD[KM0JWIDX] == "  ")
    KM0JM001.XPCSDESC[KM0JWIDX] = "ALL";
    return;
  end
  ;
  KM0JW01-GPCD = KM0JM001.XGPCD[KM0JWIDX];
  KM0JW01-XPCCD = KM0JM001.XPCCD[KM0JWIDX];
  if (KM0JW01-XPCCD in XPCTBL.XPCCD)
    if (KM0JW01-XPCKEY in XPCTBL.XPCKEY)
      if (XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        KM0JM001.XPCSDESC[KM0JWIDX] = XPCTBL.XPCSDESC[sysVar.arrayIndex];
      else
        converseLib.validationFailed(471);
        KM0JW01.KM0JWERR = "Y";
        set KM0JM001.XPCCD[KM0JWIDX] cursor, bold;
        set KM0JM001.XGPCD[KM0JWIDX] bold;
        return;
      end
    else
      converseLib.validationFailed(471);
      KM0JW01.KM0JWERR = "Y";
      set KM0JM001.XPCCD[KM0JWIDX] cursor, bold;
      set KM0JM001.XGPCD[KM0JWIDX] bold;
      return;
    end
  else
    converseLib.validationFailed(473);
    KM0JW01.KM0JWERR = "Y";
    set KM0JM001.XPCCD[KM0JWIDX] cursor, bold;
    return;
  end
  ;
end // end KM0JS-VERIFY-XPC

//*** RECORD=KM0JW01 ****
// ************************************************************
// *           ***   KM0J Work Record   ***
// ************************************************************
// *  Maintenace Log
// ************************************************************
// *
// *   25 JUNE 1993  dlegg    Add redefinitions of numeric
// *                          fields as character.
// ***********************
Record KM0JW01 type basicRecord
  5 KM0JWEAF KM0JWEAF ; 
  5 KM0JWKEY KM0JWKEY ; 
    10 KM0JWCID KM0JWCID ; 
      15 KM0JWCID-CHAR KM0JWCID-CHAR ; 
    10 KM0JWAID KM0JWAID ; 
      15 KM0JWAID-CHAR KM0JWAID-CHAR ; 
  5 KM0JWIDX KM0JWIDX ; 
  5 KM0JWCNT KM0JWCNT ; 
  5 KM0JWMAX KM0JWMAX ; 
  5 KM0JWMSG KM0JWMSG ; 
  5 KM0JWDT KM0JWDT ; 
    10 KM0JWCTY KM0JWCTY ; 
    10 KM0JWYR KM0JWYR ; 
    10 KM0JWMTH KM0JWMTH ; 
    10 KM0JWDAY KM0JWDAY ; 
  5 KM0JWCDT KM0JWCDT ; 
    10 KM0JWCCT KM0JWCCT ; 
    10 KM0JWHDT KM0JWHDT ; 
      15 KM0JWCYR KM0JWCYR ; 
      15 KM0JWCMT KM0JWCMT ; 
      15 KM0JWCDY KM0JWCDY ; 
  5 KM0JWMOD KM0JWMOD ; 
  5 KM0JWERR KM0JWERR ; 
  5 KM0JWFST KM0JWFST ; 
  5 XATCD XATCD ; 
  5 KM0JW-CU-XOP-KEY KM0JW-CU-XOP-KEY ; 
    10 KM0JW-KUCCOID KM0JW-KUCCOID ; 
    10 KM0JW-XGPCD KM0JW-XGPCD ; 
    10 KM0JW-XPCCD KM0JW-XPCCD ; 
  5 KM0JW-KUCCONM KM0JW-KUCCONM ; 
  5 KM0JW-UPDT KM0JW-UPDT ; 
  5 KM0JW-CHK-FIELD KM0JW-CHK-FIELD ; 
    10 KM0JW-CHK-POS-1 KM0JW-CHK-POS-1 ; 
    10 KM0JW-CHK-REMAIN KM0JW-CHK-REMAIN ; 
  5 KM0JW-POPUP-FLAG KM0JW-POPUP-FLAG ; 
  5 KM0JW-PAGE-NUM KM0JW-PAGE-NUM ; 
  5 KM0JW-PAGE-TOT KM0JW-PAGE-TOT ; 
  5 KM0JW-CNT KM0JW-CNT ; 
  5 KM0JW01-XPCKEY KM0JW01-XPCKEY ; 
    10 KM0JW01-XPCCD KM0JW01-XPCCD ; 
    10 KM0JW01-GPCD KM0JW01-GPCD ; 
end // end KM0JW01

Record KM0JW04 type basicRecord
  5 KM0JW04-REC KM0JW04-REC [200] ; 
    10 KM0JW-SEL KM0JW-SEL ; 
    10 XGPCD XGPCD ; 
    10 XPCCD XPCCD ; 
    10 XPCSDESC XPCSDESC ; 
    10 XOPCD XOPCD ; 
    10 XOPDESC XOPDESC ; 
    10 KM0JW-UPDT-FLAG KM0JW-UPDT-FLAG ; 
end // end KM0JW04

DataItem KM0JW-CHK-FIELD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KM0JW-CHK-POS-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KM0JW-CHK-REMAIN char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KM0JW-CNT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KM0JW-CU-XOP-KEY char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_CO_ID
DataItem KM0JW-KUCCOID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// CU_CO_NM
DataItem KM0JW-KUCCONM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KM0JW-PAGE-NUM num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KM0JW-PAGE-TOT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CU_CO_ID
DataItem KM0JW-POPUP-FLAG char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

DataItem KM0JW-SEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_CO_NM
DataItem KM0JW-UPDT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KM0JW-UPDT-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_CO_ID
DataItem KM0JW-XGPCD char(2)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// CU_CO_ID
DataItem KM0JW-XPCCD char(2)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// XGP_GPC_CD
DataItem KM0JW01-GPCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XPC_PROD_CAT_CD
DataItem KM0JW01-XPCCD char(2)  {
  align = left, fillCharacter = " ", inputRequired = no
}
end

// Table row key field
DataItem KM0JW01-XPCKEY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KM0JW04-REC char(52)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// address id
DataItem KM0JWAID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// address id redefined char
DataItem KM0JWAID-CHAR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem KM0JWCCT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date
DataItem KM0JWCDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem KM0JWCDY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// company id
DataItem KM0JWCID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// company redefined char
DataItem KM0JWCID-CHAR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem KM0JWCMT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem KM0JWCNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century
DataItem KM0JWCTY num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem KM0JWCYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem KM0JWDAY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date
DataItem KM0JWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of application flag
DataItem KM0JWEAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// modified switch
DataItem KM0JWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first switch
DataItem KM0JWFST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold date
DataItem KM0JWHDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem KM0JWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// table key
DataItem KM0JWKEY char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index
DataItem KM0JWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// modified switch
DataItem KM0JWMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// message line
DataItem KM0JWMSG char(70)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem KM0JWMTH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem KM0JWYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

