package km0t;

import corpcom1.CAFRMSYS;
import corpcom1.CAITEM;
import corpcom2.XX0XW01;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.*;
import corpcom6.SQLCA;
import corpcom7.XXXSTAT;
import corpx1.XATCD;
import corpx1.XAUTBL;
import corpx1.XWHTBL;
import corpx2.XSTCD;
import corpx2.XWHCD;
import corpx2.XXXZIP;
import corpz3.ZZZCHGCT;
import corpz3.ZZZSDT;
import kl.common.KIZTBL;
import ku.common.KUCREC;
import ku.common.KULREC;
import ku.common.KUMREC;
import ku.common.KUMSTRID;
import ku.common.KUVDCCID;
import ku.common.KUVDCSID;
import ku.common.KUVREC;
import ku.common.KUZREC;
import ta.common.TA1REC;
//*** PROGRAM=KM0T ****
// ******** km0t - pack separate ship together (psst) *********
// 
// overview:  this application will add, change, delete and
//            inquire to the psst db2 table dcust.vpsst001.
// 
// date written: 08/21/87
//       author: c. trouw
// 
// ============================================================
//                    maintenance l0g
// ------------------------------------------------------------
//   date     int   modules   description
// --------   ---   --------  ---------------------------------
// 08/27/87   clt             initiated
// 10/29/87   clt             added audit trail
// 11/17/88   jbw             added noncsp opt to calls
// 11/17/88   jbw             added xssegtr logic
// 06/12/89   clt             added security for cole haan
// 01/16/90   jfiat           db changes
// 09/10/90   dsalzw          added kiztbl for audit trail
// 05/28/91   dsalzw          removed 'ki' checking - security
// 10/01/93   CHELLM          CSP 4.1 Conversion.
//                            - changed ABND TA function to
//                              to RETN w/XSPF4.
// 10/01/93   CHELLM          DB2 CHANGES
// 04/10/95   CHELLM          Added Nike Canada user Security
// *Y2KFIX   12/05/97  DKENNY  Y2K MODIFICATIONS MADE:
// *                   Application regenerated to pick up new
// *                   XX0XS01.
// ************************************************************
// *********************
Program KM0T type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KM0TW01 KM0TW01; // record
  KM0TW02 KM0TW02; // record
  KM0TW03 KM0TW03; // record
  KM0TW04 KM0TW04; // record
  KM0TW05 KM0TW05; // record
  KM0TW06 KM0TW06; // record
  KUCREC KUCREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  KUVREC KUVREC; // record
  KUZREC KUZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KIZTBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use KM0TM.KM0TM005,  // forms
      KM0TM.KM0TM010, 
      KM0TM.KM0TM015, 
      KM0TM.KM0TM020, 
      KM0TM.KM0TM025, 
      KM0TM.KM0TM030
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KM0T001: KM0T001();
    ;
    exit program;
    ;
    KM0T015: KM0T015();
  end // end main
end // end KM0T

// application main logic
Function KM0T001()
  ;
  XSENTRY();
  ;
  XSSEGTR(); /* set segemented trans id*/
  ;
  if (COMMAREA.CACHGFL != "Y"
   && COMMAREA.CAINQFL != "Y"
   && COMMAREA.CAADDFL != "Y"
   && COMMAREA.CADELFL != "Y")
    XSPF4();
  end
  ;
  set KUCREC empty;
  set KULREC empty;
  set KUMREC empty;
  set KUVREC empty;
  set KM0TW01 empty;
  ;
  KM0TW01.CAFRMSYS = COMMAREA.CAFRMSYS;
  ;
  KM0TM005.KM0TMDAT = VGVar.currentShortGregorianDate;
                                   /* move date to all map headings*/
  KM0TM010.KM0TMDAT = VGVar.currentShortGregorianDate;
  KM0TM015.KM0TMDAT = VGVar.currentShortGregorianDate;
  KM0TM020.KM0TMDAT = VGVar.currentShortGregorianDate;
  KM0TM025.KM0TMDAT = VGVar.currentShortGregorianDate;
  KM0TM030.KM0TMDAT = VGVar.currentShortGregorianDate;
  ;
  converseVar.commitOnConverse = 1; /* force commit with each*/
  VGVar.handleHardIOErrors = 1; /* display of maps*/
  ;
  KM0TW01.KM0TWSRN = "1"; /* set screen switch to go to menu*/
  ;
  KM0TW01.KM0TWEAF = "Y"; /* see comment below*/
  ;
   /* this flag is always set to 'y';*/
   /* can only leave program by*/
   /* a pf key or fast path*/
  ;
  while (KM0TW01.KM0TWEAF == "Y")
    KM0T002();
  end
  ;
   /* the program should never get to this point.*/
   /* the following code will force the user to*/
   /* return to the prior application, if by chance*/
   /* the program should get to this point.*/
  ;
  COMMAREA.CATOAP = COMMAREA.CAFROMAP;
  XSEXIT();
  ;
   /* if the program returns from the xsexit*/
   /* then it will hit the ezeclos in the flow.*/
  ;
end // end KM0T001

// decides screens to display
Function KM0T002()
  ;
  KM0TM010.KM0TMWHS = " "; /* initialize additional*/
  KM0TM020.KM0TMWHS = " "; /* whse fields on each map.*/
  KM0TM025.KM0TMWHS = " ";
  ;
  if (KM0TW01.KM0TWSRN == "1")
    KM0TW01.KM0TWESF = "N";
    while (KM0TW01.KM0TWESF == "N")
      KM0T005(); /* psst menu*/
    end
  end
  ;
  if (KM0TW01.KM0TWSRN == "2")
    KM0TW01.KM0TWESF = "N";
    while (KM0TW01.KM0TWESF == "N")
      KM0T010(); /* add function*/
    end
  end
  ;
  if (KM0TW01.KM0TWSRN == "3")
    KM0TW01.KM0TWFST = "Y";
    KM0TW01.KM0TWESF = "N";
    while (KM0TW01.KM0TWESF == "N")
      KM0T020(); /* change function*/
    end
  end
  ;
  if (KM0TW01.KM0TWSRN == "4")
    KM0TW01.KM0TWFST = "Y";
    KM0TW01.KM0TWESF = "N";
    while (KM0TW01.KM0TWESF == "N")
      KM0T025(); /* delete function*/
    end
  end
  ;
  if (KM0TW01.KM0TWSRN == "5")
    KM0TW01.KM0TWFST = "Y";
    KM0TW01.KM0TWESF = "N";
    while (KM0TW01.KM0TWESF == "N")
      KM0T030(); /* inquiry function*/
    end
  end
  ;
end // end KM0T002

// psst menu
Function KM0T005()
  ;
  if (COMMAREA.CAINQFL == "Y"
   && COMMAREA.CAADDFL == "N"
   && COMMAREA.CACHGFL == "N"
   && COMMAREA.CADELFL == "N")
    KM0TM005.KM0TMOPT = "I";
    set KM0TM005.KM0TMOPT skip;
  end
  ;
  KM0TM005.KM0TMMSG = KM0TW01.KM0TWMSG; /* move messages to map*/
  KM0TW01.KM0TWMSG = " ";
  ;
  converse KM0TM005 ;
  ;
  set KM0TM005.XWHCD initialAttributes;
  set KM0TM005.KUVDCCID initialAttributes;
  set KM0TM005.KUVDCSID initialAttributes;
  set KM0TM005.KUCCOID initialAttributes;
  set KM0TM005.KM0TMOPT initialAttributes;
  set KM0TM005.XWHCD cursor, initialAttributes;
  KM0TW01.KM0TWOPT = KM0TM005.KM0TMOPT;
  KM0TM005.KM0TMMSG = " ";
  COMMAREA.CATOAP = KM0TM005.CATOAP;
  COMMAREA.CAITEM = KM0TM005.CAITEM;
  ;
  KM0TS01(); /* check fastpath and pf keys*/
  ;
  if (converseVar.validationMsgNum != 0 /* if errors encountered*/
   || KM0TW01.KM0TWMSG != " ")         
    KM0TS02(); /* set modified fields modified*/
    return;
  end
  ;
  if (converseVar.eventKey is pf3) /* return to prior application*/
    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    COMMAREA.CAITEM = " ";
    XSEXIT();
    COMMAREA.CATOAP = " ";
    KM0TW01.KM0TWMSG = COMMAREA.CAMSG;
    KM0TS02();
    return;
  end
  ;
  if (KM0TM005.KUVDCCID != 0
   || KM0TM005.KUVDCSID != 0)
    if (KM0TM005.KUCCOID != 0)
      KM0TS02(); /* set modified fields modified*/
      converseLib.validationFailed(202); /* no customer nbr entered*/
      set KM0TM005.KUVDCCID cursor, modified, bold;
      set KM0TM005.KUVDCSID modified, bold;
      set KM0TM005.KUCCOID modified, bold;
      return;
    end
  end
  ;
  KM0TW01.XWHCD = KM0TM005.XWHCD;
  KM0TW01.KM0TWWSW = "1";
  KM0TS05(); /* edit warehouse*/
  if (converseVar.validationMsgNum != 0)
    KM0TS02(); /* set modified fields modified*/
    set KM0TM005.XWHCD cursor, modified, bold;
    return;
  end
  ;
  if (KM0TM005.KUVDCCID == 0 /* if no d/c account nbr*/
   && KM0TM005.KUVDCSID == 0) /* ENTERED - NEXT SENTENCE*/
    /* next sentence*/
  else
    if (KM0TM005.KM0TMOPT != "A")
      converseLib.validationFailed(192); /* must select add for d/c accounts*/
      KM0TS02(); /* set modified fields modified*/
      set KM0TM005.KM0TMOPT cursor, modified, bold;
      return;
    end
    KM0TW01.KM0TWCID = KM0TM005.KUVDCCID;
    KM0TW01.KM0TWSID = KM0TM005.KUVDCSID;
    KM0TW01.KM0TWDST = "Y"; /* indicates a d/c account*/
    KM0TS08(); /* edit d/c company & store*/
    if (converseVar.validationMsgNum != 0) /* if invalid account*/
      KM0TS02(); /* set modified fields modified*/
      set KM0TM005.KUVDCCID cursor, modified, bold;
      set KM0TM005.KUVDCSID modified, bold;
      return;
    end
  end
  ;
  if (KM0TM005.KUCCOID == 0)
    /* next sentence*/
  else
    if (KM0TM005.KM0TMOPT == "A") /* must select other options*/
      converseLib.validationFailed(193);
      KM0TS02(); /* set modified fields modified*/
      set KM0TM005.KM0TMOPT cursor, modified, bold;
      return;
    end
    KM0TW01.KM0TWCID = KM0TM005.KUCCOID;
    KM0TS10(); /* edit cust company*/
    if (converseVar.validationMsgNum != 0) /* invalid account*/
      KM0TS02(); /* set modified fields modified*/
      set KM0TM005.KUCCOID cursor, modified, bold;
      return;
    end
  end
  ;
  if (KM0TM005.KM0TMOPT == "A") /* if selecting add option*/
    if (KM0TM005.KUVDCCID == 0) /* must enter d/c account*/
      KM0TS02(); /* set modified fields modified*/
      set KM0TM005.KUVDCCID cursor, modified, bold;
      converseLib.validationFailed(114);
      return;
    end
  else
    if (KM0TM005.KM0TMOPT == "C"
     || KM0TM005.KM0TMOPT == "D"
     || KM0TM005.KM0TMOPT == "I")
      if (KM0TM005.KUCCOID == 0) /* must enter customer nbr*/
        KM0TS02(); /* set modified fields modified*/
        set KM0TM005.KUCCOID cursor, modified, bold;
        converseLib.validationFailed(114);
        return;
      end
    end
  end
  ;
  KM0TS12(); /* check security*/
  ;
  if (converseVar.validationMsgNum != 0) /* if security failed*/
    KM0TS02(); /* set modified fields modified*/
    return; /* return to map*/
  end
  ;
  KM0TW01.KM0TWESF = "Y"; /* set screen switch to end menu*/
                                 /* ; and return to km0t002*/
  ;
end // end KM0T005

// add psst screen
Function KM0T010()
  ;
  if (converseVar.validationMsgNum != 0   
   && converseVar.validationMsgNum != 197 /* rejected store accounts*/
   && converseVar.validationMsgNum != 211) /* cancelled message*/
    /* next sentence*/
  else
    KM0TM010.KM0TMALL = "N"; /* initialize screen*/
    KM0TM010.KM0TMEXP = "N";
    set KM0TM010.KM0TMALL initialAttributes;
    set KM0TM010.KM0TMEXP initialAttributes;
    KM0TW01.KM0TWINX = 1;
    while (KM0TW01.KM0TWINX < 11)
      KM0TS15(); /* initialize fields on map*/
      KM0TW01.KM0TWINX = KM0TW01.KM0TWINX + 1;
    end
    set KM0TM010.KUCCOID[1] cursor;
  end
  ;
  KM0TM010.KM0TMMSG = KM0TW01.KM0TWMSG;
  KM0TW01.KM0TWMSG = " ";
  ;
  converse KM0TM010 ;
  ;
  KM0TM010.KM0TMMSG = " ";
  COMMAREA.CATOAP = KM0TM010.CATOAP;
  COMMAREA.CAITEM = KM0TM010.CAITEM;
  set KM0TM010.XWHCD initialAttributes;
  set KM0TM010.KM0TMWHS initialAttributes;
  set KM0TM010.KUVDCCID initialAttributes;
  set KM0TM010.KUVDCSID initialAttributes;
  ;
  KM0TS17(); /* check fastpath and pf keys*/
  ;
  if (converseVar.validationMsgNum != 0 /* if error encountered*/
   || KM0TW01.KM0TWMSG != " ")         
    KM0TS19(); /* set modified fields modified*/
    return;
  end
  ;
  if (converseVar.eventKey is pf3) /* return to psst menu*/
    KM0TW01.KM0TWESF = "Y";
    KM0TW01.KM0TWSRN = "1";
    return;
  end
  ;
  if (converseVar.eventKey is pf15)
    if (KM0TW01.KM0TWRJF == "Y") /* if any rejections found*/
      KM0TM015.KM0TMTLE = "REJECTIONS";
      if (KM0TW01.KM0TWRJ1 > 120)
        converseLib.validationFailed(199); /* more than 120 rejections*/
      end
      KM0T015(); /* display rejection map*/
      converseLib.validationFailed(0);
      KM0TW01.KM0TWIND = 1;
      while (KM0TW01.KM0TWIND < 121) /* clear rejection map*/
        KM0TM015.KUMSTRID[KM0TWIND] = 0;
        set KM0TM015.KUMSTRID[KM0TWIND] initialAttributes;
        KM0TW01.KM0TWIND = KM0TW01.KM0TWIND + 1;
      end
      set KM0TM015.KUMSTRID[1] cursor;
      KM0TW01.KM0TWRJF = "N";
    else
      converseLib.validationFailed(198); /* no rejections found*/
      KM0TS19(); /* set modified fields modified*/
    end
    return;
  end
  ;
  if (KM0TW01.KM0TWRJF == "Y") /* if rejections found and pf15*/
    KM0TW01.KM0TWIND = 1; /* not pressed - will clear map*/
    while (KM0TW01.KM0TWIND < 121) /* anyway.*/
      KM0TM015.KUMSTRID[KM0TWIND] = 0;
      set KM0TM015.KUMSTRID[KM0TWIND] initialAttributes;
      KM0TW01.KM0TWIND = KM0TW01.KM0TWIND + 1;
    end
    converseLib.validationFailed(0);
    set KM0TM015.KUMSTRID[1] cursor;
    KM0TW01.KM0TWRJF = "N";
  end
  ;
  if (KM0TM010.XWHCD is modified) /* when whse modified*/
    KM0TM010.KM0TMWHS = " "; /* remove additional whse*/
  end
  ;
  if (KM0TM010.KM0TMWHS == KM0TM010.XWHCD)
                                   /* whse & addtn whse can not equal*/
    KM0TS19(); /* set modified fields modified*/
    converseLib.validationFailed(203);
    set KM0TM010.KM0TMWHS cursor, modified, bold;
    set KM0TM010.XWHCD bold;
    return;
  else
    set KM0TM010.KM0TMWHS initialAttributes;
    set KM0TM010.XWHCD initialAttributes;
  end
  ;
  if (KM0TM010.XWHCD is modified)
    KM0TW01.KM0TWWSW = "1"; /* indicates warehouse*/
    KM0TW01.XWHCD = KM0TM010.XWHCD;
    KM0TS05(); /* edit warehouse*/
    if (converseVar.validationMsgNum != 0)
      KM0TS19(); /* set modified fields modified*/
      set KM0TM010.XWHCD cursor, modified, bold;
      return;
    else
      set KM0TM010.XWHCD initialAttributes;
    end
  end
  ;
  if (KM0TM010.KM0TMWHS is modified)
    if (KM0TM010.KM0TMWHS == " ")
      set KM0TM010.KM0TMWHS initialAttributes;
    else
      KM0TW01.KM0TWWSW = "2"; /* indicates additional whse*/
      KM0TW01.XWHCD = KM0TM010.KM0TMWHS;
      KM0TS05(); /* edit warehouse*/
      if (converseVar.validationMsgNum != 0)
        KM0TS19(); /* set modified fields modified*/
        set KM0TM010.KM0TMWHS cursor, modified, bold;
        return;
      else
        set KM0TM010.KM0TMWHS initialAttributes;
      end
    end
  end
  ;
  if (KM0TM010.KUVDCCID is modified
   || KM0TM010.KUVDCSID is modified)
    KM0TW01.KM0TWCID = KM0TM010.KUVDCCID;
    KM0TW01.KM0TWSID = KM0TM010.KUVDCSID;
    KM0TW01.KM0TWDST = "Y"; /* indicates d/c account*/
    KM0TS08(); /* edit d/c company & store*/
    if (converseVar.validationMsgNum != 0)
      KM0TS19(); /* set modified fields modified*/
      set KM0TM010.KUVDCCID cursor, modified, bold;
      set KM0TM010.KUVDCSID modified, bold;
      return;
    else
      set KM0TM010.KUVDCCID initialAttributes;
      set KM0TM010.KUVDCSID initialAttributes;
    end
  end
  ;
  if (KM0TM010.XWHCD is modified
   || KM0TM010.KUVDCCID is modified
   || KM0TM010.KUVDCSID is modified)
    KM0TM010.KM0TMWHS = " "; /* remove additional whse*/
    return;
  end
  ;
  KM0TW01.KM0TWINX = 2;
  ;
  while (KM0TW01.KM0TWINX < 11) /* defaults company id from*/
    if (KM0TM010.KUCCOID[KM0TWINX] == 0) /* previous line on map*/
      if (KM0TM010.KUMSTRID[KM0TWINX] != 0)
        KM0TW01.KM0TWIND = KM0TW01.KM0TWINX - 1;
        KM0TM010.KUCCOID[KM0TWINX] = KM0TM010.KUCCOID[KM0TWIND];
      end
    end
    KM0TW01.KM0TWINX = KM0TW01.KM0TWINX + 1;
  end
  ;
  KM0TW01.KM0TWINX = 10;
  ;
  while (KM0TW01.KM0TWINX > 0)
    KM0TS20(); /* edit data on screen*/
    KM0TW01.KM0TWINX = KM0TW01.KM0TWINX - 1;
  end
  ;
  if (converseVar.validationMsgNum != 0) /* if edit errors encountered*/
    return; /* return to map*/
  end
  ;
  KM0TW01.KM0TWINX = 10; /* checks to see if same data*/
  while (KM0TW01.KM0TWINX > 0) /* entered on another line of map*/
    if (KM0TM010.KUCCOID[KM0TWINX] != 0)
      KM0TW01.KM0TWIND = 1;
      while (KM0TW01.KM0TWIND < 11)
        if (KM0TW01.KM0TWIND != KM0TW01.KM0TWINX)
          if (KM0TM010.KUCCOID[KM0TWIND] == KM0TM010.KUCCOID[KM0TWINX]
           && KM0TM010.KUMSTRID[KM0TWIND] == KM0TM010.KUMSTRID[KM0TWINX])
            converseLib.validationFailed(195);
            set KM0TM010.KUCCOID[KM0TWINX] cursor, modified, bold;
            set KM0TM010.KUMSTRID[KM0TWINX] modified, bold;
          end
        end
        KM0TW01.KM0TWIND = KM0TW01.KM0TWIND + 1;
      end
    end
    KM0TW01.KM0TWINX = KM0TW01.KM0TWINX - 1;
  end
  ;
  if (converseVar.validationMsgNum != 0) /* if error encountered*/
    return; /* return to map*/
  end
  ;
  if (converseVar.eventKey is pf12) /* if edit only - return to map*/
    converseLib.validationFailed(204); /* press enter to update msg*/
    return;
  end
  ;
  KM0TW01.KM0TWRJ1 = 0; /* initialize counters that display*/
  KM0TW01.KM0TWRJ2 = 0; /* in update message*/
  KM0TW01.KM0TWCT1 = 0;
  KM0TW01.KM0TWCT2 = 0;
  KM0TW01.KM0TWMAX = "N";
  ;
  KM0TW01.KM0TWINX = 1;
  ;
  while (KM0TW01.KM0TWINX < 11)
    if (KM0TW01.KM0TWINX == 1) /* if line 1 of map*/
      if (KM0TM010.KM0TMALL == "N") /* if global not selected*/
        KM0TS25(); /* add records to database*/
      else
        KM0TS27(); /* globally add records*/
      end
    else
      KM0TS25(); /* add records to database*/
    end
    KM0TW01.KM0TWINX = KM0TW01.KM0TWINX + 1;
  end
  ;
  if (KM0TW01.KM0TWRJF == "Y") /* if rejects found*/
    converseLib.validationFailed(197); /* rejects message*/
    set KM0TM010 alarm;
    KM0TW01.KM0TWIND = 1;
    while (KM0TW01.KM0TWIND < 121) /* set reject screen to autoskip*/
      set KM0TM015.KUMSTRID[KM0TWIND] skip;
      KM0TW01.KM0TWIND = KM0TW01.KM0TWIND + 1;
    end
  end
  ;
  KM0TW01.KM0TWWH1 = KM0TM010.XWHCD;
  KM0TW01.KM0TWWH2 = KM0TM010.KM0TMWHS;
  ;
  if (KM0TW01.KM0TWADD == "Y") /* if any records added*/
    KM0TS33(); /* build message line*/
    KM0TW01.KM0TWADD = "N";
  end
  ;
end // end KM0T010

// store exceptions screen
Function KM0T015()
  ;
   /* this map is displayed only for store exceptions and*/
   /* store rejections and is performed from several statement*/
   /* groups.*/
  ;
  converse KM0TM015 ;
  ;
  ;
end // end KM0T015

// change psst screen
Function KM0T020()
  ;
  if (converseVar.validationMsgNum != 0   
   && converseVar.validationMsgNum != 206 /* end of data msg*/
   && converseVar.validationMsgNum != 208 /* beginning of data msg*/
   && converseVar.validationMsgNum != 209 /* customer store not found msg*/
   && converseVar.validationMsgNum != 211) /* cancelled msg*/
    /* next sentence*/
  else
    set KM0TM020.KUVDCCID[1] cursor;
    KM0TW01.KM0TWINX = 1;
    while (KM0TW01.KM0TWINX < 10)
      KM0TS35(); /* initialize map*/
      KM0TW01.KM0TWINX = KM0TW01.KM0TWINX + 1;
    end
    ;
    if (KM0TW01.KM0TWFST == "Y") /* if first time thru switch set*/
      KM0TS36(); /* purge temp work file*/
      KM0TW01.KM0TWCID = KM0TM020.KUCCOID;
      KM0TW01.KM0TWWHE = KM0TM020.XWHCD;
      KM0TM020.KM0TMWHS = " ";
      KM0TS37(); /* select set*/
      ;
      KM0TW01.KM0TWFST = "N";
      KM0TW01.KM0TWEND = "N";
      ;
      while (KM0TW01.KM0TWEND == "N")
        KM0TS40(); /* load temp work file*/
      end
      ;
      if (KM0TW01.KM0TWCNT < 1) /* if no records found*/
        converseLib.validationFailed(205); /* return to psst menu*/
        KM0TW01.KM0TWSRN = "1";
        KM0TW01.KM0TWESF = "Y";
        return;
      else
        KM0TW01.KM0TWHC = KM0TW01.KM0TWCNT; /* more rec cnt to hold*/
        KM0TW01.KM0TWCNT = 0;
      end
      ;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
    end
    ;
    KM0TS45(); /* read temp work file*/
    ;
    KM0TW01.KM0TWINX = 1;
    ;
    while (KM0TW01.KM0TWINX < 10)
      KM0TS47(); /* move data to map*/
      KM0TW01.KM0TWINX = KM0TW01.KM0TWINX + 1;
    end
  end
  ;
  KM0TM020.KM0TMMSG = KM0TW01.KM0TWMSG;
  KM0TW01.KM0TWMSG = " ";
  ;
  converse KM0TM020 ;
  ;
  KM0TM020.KM0TMMSG = " ";
  COMMAREA.CATOAP = KM0TM020.CATOAP;
  COMMAREA.CAITEM = KM0TM020.CAITEM;
  set KM0TM020.XWHCD initialAttributes;
  set KM0TM020.KM0TMWHS initialAttributes;
  set KM0TM020.KUCCOID initialAttributes;
  ;
  KM0TS50(); /* check fastpath and pf keys*/
  ;
  if (converseVar.validationMsgNum != 0
   || KM0TW01.KM0TWMSG != " ")
    KM0TS52(); /* set modified field modified*/
    return;
  end
  ;
  if (converseVar.eventKey is pf3) /* return to psst menu*/
    KM0TS36(); /* purge temp work file*/
    KM0TW01.KM0TWESF = "Y";
    KM0TW01.KM0TWSRN = "1";
    return;
  end
  ;
  if (KM0TM020.XWHCD is modified) /* if whse modified*/
    KM0TM020.KM0TMWHS = " "; /* remove additional whse*/
  end
  ;
  if (KM0TM020.KM0TMWHS == KM0TM020.XWHCD)
                                   /* whse & addtn whse can not equal*/
    KM0TS52(); /* set modified fields modified*/
    converseLib.validationFailed(203);
    set KM0TM020.XWHCD cursor, bold;
    set KM0TM020.KM0TMWHS modified, bold;
    return;
  else
    set KM0TM020.XWHCD initialAttributes;
    set KM0TM020.KM0TMWHS initialAttributes;
  end
  ;
  if (KM0TM020.KM0TMWHS is modified)
    if (KM0TM020.KM0TMWHS == " ")
      set KM0TM020.KM0TMWHS initialAttributes;
    else
      KM0TW01.KM0TWWSW = "2"; /* indicates additional whse*/
      KM0TW01.XWHCD = KM0TM020.KM0TMWHS;
      KM0TS05(); /* edit warehouse*/
      if (converseVar.validationMsgNum != 0)
        KM0TS52(); /* set modified fields modified*/
        set KM0TM020.KM0TMWHS cursor, modified, bold;
        return;
      else
        set KM0TM020.KM0TMWHS initialAttributes;
      end
    end
  end
  ;
  if (KM0TM020.XWHCD is modified)
    KM0TW01.KM0TWWSW = "1"; /* indicates warehouse*/
    KM0TW01.XWHCD = KM0TM020.XWHCD;
    KM0TS05(); /* edit warehouse*/
    if (converseVar.validationMsgNum != 0)
      KM0TS52(); /* set modified fields modified*/
      set KM0TM020.XWHCD cursor, modified, bold;
      return;
    else
      set KM0TM020.XWHCD initialAttributes;
    end
  end
  ;
  if (KM0TM020.KUCCOID is modified)
    KM0TW01.KM0TWCID = KM0TM020.KUCCOID;
    KM0TS10(); /* edit company*/
    if (converseVar.validationMsgNum != 0)
      KM0TS52(); /* set modified fields modified*/
      set KM0TM020.KUCCOID cursor, modified, bold;
      return;
    else
      set KM0TM020.KUCCOID initialAttributes;
    end
  end
  ;
  if (KM0TM020.KUCCOID is modified /* if company modified or*/
   || KM0TM020.XWHCD is modified)  /* whse modified*/
    KM0TW01.KM0TWFST = "Y"; /* force new load of temp file*/
    return;
  end
  ;
  KM0TW01.KM0TWINX = 9;
  ;
  while (KM0TW01.KM0TWINX > 0)
    KM0TS55(); /* edit data on screen*/
    KM0TW01.KM0TWINX = KM0TW01.KM0TWINX - 1;
  end
  ;
  if (converseVar.validationMsgNum != 0) /* if errors encounter from edit*/
    return; /* return to map*/
  end
  ;
  if (converseVar.eventKey is pf12) /* if edit only*/
    KM0TS52(); /* set modified fields modified*/
    converseLib.validationFailed(204); /* press enter to update msg*/
    return;
  end
  ;
  KM0TW01.KM0TWINX = 1;
  ;
  while (KM0TW01.KM0TWINX < 10)
    if (KM0TM020.KM0TMALL[KM0TWINX] == "N")
      KM0TS57(); /* single change*/
    else
      if (KM0TM020.KM0TMALL[KM0TWINX] == "Y")
        KM0TS58(); /* global change*/
      end
    end
    KM0TW01.KM0TWINX = KM0TW01.KM0TWINX + 1;
  end
  ;
  KM0TW01.KM0TWWH1 = KM0TM020.XWHCD;
  KM0TW01.KM0TWWH2 = KM0TM020.KM0TMWHS;
  ;
  if (KM0TW01.KM0TWCHG == "Y")
    if (KM0TW01.KM0TWRJ1 > 0
     || KM0TW01.KM0TWRJ2 > 0)
      set KM0TM020 alarm;
    end
    KM0TS65(); /* update temp work file*/
    KM0TS33(); /* build message line*/
    KM0TW01.KM0TWCHG = "N";
  end
  ;
  if (converseVar.eventKey is pf6) /* go to delete screen*/
    KM0TM005.KM0TMOPT = "D";
    KM0TS12(); /* check security*/
    if (converseVar.validationMsgNum != 0) /* reset to change if security failed*/
      KM0TM005.KM0TMOPT = "C";
      set KM0TM005.KM0TMOPT initialAttributes;
    else
      KM0TW01.KM0TWESF = "Y"; /* end of change screen switch*/
      return;
    end
  end
  ;
  if (converseVar.eventKey is pf9) /* go to inquiry screen*/
    KM0TM005.KM0TMOPT = "I";
    KM0TS12(); /* check security*/
    if (converseVar.validationMsgNum != 0)
      KM0TM005.KM0TMOPT = "C"; /* reset to change if security failed*/
      set KM0TM005.KM0TMOPT initialAttributes;
    else
      KM0TW01.KM0TWESF = "Y"; /* end of change screen switch*/
      KM0TW01.KM0TWFST = "Y";
                                   /* force reload of temp work file*/
      return;
    end
  end
  ;
  if (converseVar.eventKey is pf17) /* displays first record*/
    KM0TW01.KM0TWCNT = 0;
    return;
  end
  ;
  if (converseVar.eventKey is pf18) /* displays last record*/
    KM0TW01.KM0TWCNT = KM0TW01.KM0TWHC - 1;
    return;
  end
  ;
  if (converseVar.eventKey is pf7) /* scroll backward*/
    if (KM0TW01.KM0TWCNT > 2)
      KM0TW01.KM0TWCNT = KM0TW01.KM0TWCNT - 2;
    else
      if (KM0TW01.KM0TWCNT > 1)
        KM0TW01.KM0TWCNT = 0;
      else
        converseLib.validationFailed(208);
        KM0TW01.KM0TWCNT = 0;
      end
    end
    return;
  end
  ;
  if (converseVar.eventKey is pf8) /* scroll forward*/
    return;
  end
  ;
  if (converseVar.eventKey is enter)
    if (KM0TM020.CAITEM != " ")
      KM0TW01.CAITEM = KM0TM020.CAITEM;
      KM0TS67(); /* search for cust store*/
      KM0TM020.CAITEM = " ";
      return;
    end
  end
  ;
  if (KM0TW01.KM0TWCNT > 0) /* set to display current screen*/
    KM0TW01.KM0TWCNT = KM0TW01.KM0TWCNT - 1;
  end
  ;
end // end KM0T020

// delete psst screen
Function KM0T025()
  ;
  if (converseVar.validationMsgNum != 0   
   && converseVar.validationMsgNum != 206 /* end of data msg*/
   && converseVar.validationMsgNum != 208 /* beginning of data msg*/
   && converseVar.validationMsgNum != 209 /* cust store not found msg*/
   && converseVar.validationMsgNum != 211) /* cancelled msg*/
    /* next sentence*/
  else
    set KM0TM025.KM0TMSEL[1] cursor;
    KM0TW01.KM0TWINX = 1;
    while (KM0TW01.KM0TWINX < 10)
      KM0TS70(); /* initialize map*/
      KM0TW01.KM0TWINX = KM0TW01.KM0TWINX + 1;
    end
    ;
    if (KM0TW01.KM0TWFST == "Y") /* if first time thur switch set*/
      KM0TS36(); /* purge temp work file*/
      KM0TW01.KM0TWCID = KM0TM025.KUCCOID;
      KM0TW01.KM0TWWHE = KM0TM025.XWHCD;
      KM0TM025.KM0TMWHS = " ";
      KM0TS37(); /* select set*/
      ;
      KM0TW01.KM0TWFST = "N";
      KM0TW01.KM0TWEND = "N";
      ;
      while (KM0TW01.KM0TWEND == "N")
        KM0TS40(); /* load temp work file*/
      end
      ;
      if (KM0TW01.KM0TWCNT < 1) /* if no records found*/
        converseLib.validationFailed(205);
        KM0TW01.KM0TWSRN = "1"; /* go to psst menu*/
        KM0TW01.KM0TWESF = "Y";
        return;
      else
        KM0TW01.KM0TWHC = KM0TW01.KM0TWCNT; /* move rec cnt to hold*/
        KM0TW01.KM0TWCNT = 0;
      end
      ;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
    end
    ;
    KM0TS45(); /* read temp work file*/
    ;
    KM0TW01.KM0TWINX = 1;
    ;
    while (KM0TW01.KM0TWINX < 10)
      KM0TS71(); /* move data to map*/
      KM0TW01.KM0TWINX = KM0TW01.KM0TWINX + 1;
    end
  end
  ;
  KM0TM025.KM0TMMSG = KM0TW01.KM0TWMSG;
  KM0TW01.KM0TWMSG = " ";
  ;
  converse KM0TM025 ;
  ;
  KM0TM025.KM0TMMSG = " ";
  COMMAREA.CATOAP = KM0TM025.CATOAP;
  COMMAREA.CAITEM = KM0TM025.CAITEM;
  ;
  KM0TS72(); /* check fastpath and pf keys*/
  ;
  if (converseVar.validationMsgNum != 0 /* if error encountered*/
   || KM0TW01.KM0TWMSG != " ")         
    KM0TS73(); /* set modified fields modified*/
    return;
  end
  ;
  if (converseVar.eventKey is pf3) /* go to psst menu*/
    KM0TS36(); /* purge temp work file*/
    KM0TW01.KM0TWESF = "Y";
    KM0TW01.KM0TWSRN = "1";
    return;
  end
  ;
  if (KM0TM025.XWHCD is modified) /* if whse modified*/
    KM0TM025.KM0TMWHS = " "; /* remove additional whse*/
  end
  ;
  if (KM0TM025.KM0TMWHS == KM0TM025.XWHCD)
                                   /* whse & addtn whse can not equal*/
    KM0TS73(); /* set modified fields modified*/
    converseLib.validationFailed(203);
    set KM0TM025.XWHCD cursor, bold;
    set KM0TM025.KM0TMWHS modified, bold;
    return;
  else
    set KM0TM025.XWHCD initialAttributes;
    set KM0TM025.KM0TMWHS initialAttributes;
  end
  ;
  if (KM0TM025.KM0TMWHS is modified)
    if (KM0TM025.KM0TMWHS == " ")
      set KM0TM025.KM0TMWHS initialAttributes;
    else
      KM0TW01.KM0TWWSW = "2"; /* indicates additional whse*/
      KM0TW01.XWHCD = KM0TM025.KM0TMWHS;
      KM0TS05(); /* edit warehouse*/
      if (converseVar.validationMsgNum != 0)
        KM0TS73();
        set KM0TM025.KM0TMWHS cursor, modified, bold;
        return;
      else
        set KM0TM025.KM0TMWHS initialAttributes;
      end
    end
  end
  ;
  if (KM0TM025.XWHCD is modified)
    KM0TW01.KM0TWWSW = "1"; /* indicates warehouse*/
    KM0TW01.XWHCD = KM0TM025.XWHCD;
    KM0TS05(); /* edit warehouse*/
    if (converseVar.validationMsgNum != 0)
      KM0TS73(); /* set modified fields modified*/
      set KM0TM025.XWHCD cursor, modified, bold;
      return;
    else
      set KM0TM025.XWHCD initialAttributes;
    end
  end
  ;
  if (KM0TM025.KUCCOID is modified)
    KM0TW01.KM0TWCID = KM0TM025.KUCCOID;
    KM0TS10(); /* edit company*/
    if (converseVar.validationMsgNum != 0)
      KM0TS73(); /* set modified fields modified*/
      set KM0TM025.KUCCOID cursor, modified, bold;
      return;
    else
      set KM0TM025.KUCCOID initialAttributes;
    end
  end
  ;
  if (KM0TM025.KUCCOID is modified /* if company id modified*/
   || KM0TM025.XWHCD is modified)  /* or whse modified*/
    KM0TW01.KM0TWFST = "Y"; /* force load of temp work file*/
    return;
  end
  ;
  KM0TW01.KM0TWINX = 9;
  ;
  while (KM0TW01.KM0TWINX > 0)
    KM0TS74();
                                   /* ; edit data on screen*/
    KM0TW01.KM0TWINX = KM0TW01.KM0TWINX - 1;
  end
  ;
  if (converseVar.validationMsgNum != 0) /* if errors encountered on edit*/
    return; /* return to map*/
  end
  ;
  KM0TW01.KM0TWINX = 9;
  ;
  while (KM0TW01.KM0TWINX > 0) /* checks to see*/
    if (KM0TM025.KM0TMALL[KM0TWINX] == "Y") /* if deleting all and*/
      KM0TW01.KM0TWIND = 1; /* trying to delete on*/
      while (KM0TW01.KM0TWIND < 10) /* another line of the map*/
        if (KM0TW01.KM0TWIND != KM0TW01.KM0TWINX)
          if (KM0TM025.KUVDCCID[KM0TWIND] == KM0TM025.KUVDCCID[KM0TWINX]
           && KM0TM025.KUVDCSID[KM0TWIND] == KM0TM025.KUVDCSID[KM0TWINX]
           && KM0TM025.KM0TMSEL[KM0TWIND] == "D")
            converseLib.validationFailed(210);
            set KM0TM025.KUMSTRID[KM0TWINX] bold;
            set KM0TM025.KM0TMALL[KM0TWINX] bold;
            set KM0TM025.KM0TMSEL[KM0TWINX] cursor, modified, bold;
            set KM0TM025.KUMSTRID[KM0TWIND] bold;
            set KM0TM025.KM0TMSEL[KM0TWIND] bold;
          end
        end
        KM0TW01.KM0TWIND = KM0TW01.KM0TWIND + 1;
      end
    end
    KM0TW01.KM0TWINX = KM0TW01.KM0TWINX - 1;
  end
  ;
  if (converseVar.validationMsgNum != 0) /* if error encountered*/
    return; /* return to map*/
  end
  ;
  if (converseVar.eventKey is pf12) /* if edit only*/
    KM0TS73(); /* set modified fields modified*/
    converseLib.validationFailed(204); /* press enter to update msg*/
    return; /* return to map*/
  end
  ;
  KM0TW01.KM0TWINX = 1;
  ;
  while (KM0TW01.KM0TWINX < 10)
    if (KM0TM025.KM0TMALL[KM0TWINX] == "N")
      KM0TS75(); /* single delete*/
    else
      if (KM0TM025.KM0TMALL[KM0TWINX] == "Y")
        KM0TS77(); /* global delete*/
      end
    end
    KM0TW01.KM0TWINX = KM0TW01.KM0TWINX + 1;
  end
  ;
  KM0TW01.KM0TWWH1 = KM0TM025.XWHCD;
  KM0TW01.KM0TWWH2 = KM0TM025.KM0TMWHS;
  ;
  if (KM0TW01.KM0TWCHG == "Y")
    if (KM0TW01.KM0TWRJ1 > 0
     || KM0TW01.KM0TWRJ2 > 0)
      set KM0TM025 alarm;
    end
    KM0TS85(); /* update temp work file*/
    KM0TS33(); /* build message line*/
    KM0TW01.KM0TWCHG = "N";
  end
  ;
  if (converseVar.eventKey is pf5) /* go to change screen*/
    KM0TM005.KM0TMOPT = "C";
    KM0TS12(); /* check security*/
    if (converseVar.validationMsgNum != 0) /* if security failed*/
      KM0TM005.KM0TMOPT = "D"; /* reset to delete*/
      set KM0TM005.KM0TMOPT initialAttributes;
    else
      KM0TW01.KM0TWESF = "Y"; /* end of delete screen*/
      KM0TW01.KM0TWFST = "Y"; /* force load of temp file*/
      return;
    end
  end
  ;
  if (converseVar.eventKey is pf9) /* go to inquiry*/
    KM0TM005.KM0TMOPT = "I";
    KM0TS12(); /* check security*/
    if (converseVar.validationMsgNum != 0) /* if security failed*/
      KM0TM005.KM0TMOPT = "D"; /* reset to delete*/
      set KM0TM005.KM0TMOPT initialAttributes;
    else
      KM0TW01.KM0TWESF = "Y"; /* end of delete screen*/
      KM0TW01.KM0TWFST = "Y"; /* force load of temp file*/
      return;
    end
  end
  ;
  if (converseVar.eventKey is pf17) /* go to first record*/
    KM0TW01.KM0TWCNT = 0;
    return;
  end
  ;
  if (converseVar.eventKey is pf18) /* go to last record*/
    KM0TW01.KM0TWCNT = KM0TW01.KM0TWHC - 1;
    return;
  end
  ;
  if (converseVar.eventKey is pf7) /* scroll backward*/
    if (KM0TW01.KM0TWCNT > 2)
      KM0TW01.KM0TWCNT = KM0TW01.KM0TWCNT - 2;
    else
      if (KM0TW01.KM0TWCNT > 1)
        KM0TW01.KM0TWCNT = 0;
      else
        converseLib.validationFailed(208);
        KM0TW01.KM0TWCNT = 0;
      end
    end
    return;
  end
  ;
  if (converseVar.eventKey is pf8) /* scroll forward*/
    return;
  end
  ;
  if (converseVar.eventKey is enter)
    if (KM0TM025.CAITEM != " ")
      KM0TW01.CAITEM = KM0TM025.CAITEM;
      KM0TS67(); /* search for cust store*/
      KM0TM025.CAITEM = " ";
      return;
    end
  end
  ;
  if (KM0TW01.KM0TWCNT > 0) /* set to current screen*/
    KM0TW01.KM0TWCNT = KM0TW01.KM0TWCNT - 1;
  end
  ;
end // end KM0T025

// inquire psst screen
Function KM0T030()
  ;
  if (converseVar.validationMsgNum != 0   
   && converseVar.validationMsgNum != 206 /* end of data msg*/
   && converseVar.validationMsgNum != 208 /* beginning of data msg*/
   && converseVar.validationMsgNum != 209 /* cust store not found msg*/
   && converseVar.validationMsgNum != 211) /* cancelled msg*/
    /* next sentence*/
  else
    set KM0TM030.KUCCOID cursor; /* initialize map*/
    KM0TW01.KM0TWINX = 1;
    while (KM0TW01.KM0TWINX < 21)
      set KM0TM030.KUMSTRID[KM0TWINX] initialAttributes;
      set KM0TM030.KUVDCCID[KM0TWINX] initialAttributes;
      set KM0TM030.KUVDCSID[KM0TWINX] initialAttributes;
      set KM0TM030.XXXSTAT[KM0TWINX] initialAttributes;
      if (KM0TW01.KM0TWSRH[KM0TWINX] == "Y")
        set KM0TM030.KUMSTRID[KM0TWINX] skip, bold;
        KM0TW01.KM0TWSRH[KM0TWINX] = "N";
      end
      KM0TW01.KM0TWINX = KM0TW01.KM0TWINX + 1;
    end
    ;
    if (KM0TW01.KM0TWFST == "Y") /* if first time thru*/
      KM0TS86(); /* purge temp work file*/
      KM0TW01.KM0TWCID = KM0TM030.KUCCOID;
      KM0TW01.KM0TWWHE = KM0TM030.XWHCD;
      KM0TS37(); /* select set*/
      ;
      KM0TW01.KM0TWFST = "N";
      KM0TW01.KM0TWEND = "N";
      KM0TW01.KM0TWTOT = 0;
      ;
      while (KM0TW01.KM0TWEND == "N")
        KM0TS87(); /* load data to temp file*/
      end
      ;
      if (KM0TW01.KM0TWCNT < 1) /* if no records found*/
        converseLib.validationFailed(205);
        KM0TW01.KM0TWSRN = "1"; /* go to psst menu*/
        KM0TW01.KM0TWESF = "Y";
        return;
      else
        KM0TM030.KM0TMTOT = KM0TW01.KM0TWTOT; /* total drop ships*/
        KM0TW01.KM0TWHC = KM0TW01.KM0TWCNT; /* move rec cnt to hold*/
        KM0TW01.KM0TWCNT = 0;
      end
      ;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
    end
    ;
    KM0TS90(); /* read temp work file*/
    ;
    KM0TW01.KM0TWINX = 1;
    ;
    while (KM0TW01.KM0TWINX < 21)
      KM0TS92(); /* move data to screen*/
      KM0TW01.KM0TWINX = KM0TW01.KM0TWINX + 1;
    end
  end
  ;
  KM0TM030.KM0TMMSG = KM0TW01.KM0TWMSG;
  KM0TW01.KM0TWMSG = " ";
  ;
  converse KM0TM030 ;
  ;
  KM0TM030.KM0TMMSG = " ";
  COMMAREA.CATOAP = KM0TM030.CATOAP;
  COMMAREA.CAITEM = KM0TM030.CAITEM;
  ;
  KM0TS95(); /* check fastpath and pf keys*/
  ;
  if (converseVar.validationMsgNum != 0 /* if error encountered*/
   || KM0TW01.KM0TWMSG != " ")         
    KM0TS97(); /* set modified fields modified*/
    return;
  end
  ;
  if (converseVar.eventKey is pf3) /* go to psst menu*/
    KM0TS86(); /* purge temp work file*/
    KM0TW01.KM0TWESF = "Y";
    KM0TW01.KM0TWSRN = "1";
    return;
  end
  ;
  if (KM0TM030.XWHCD is modified)
    KM0TW01.KM0TWWSW = "1"; /* indicates a warehouse*/
    KM0TW01.XWHCD = KM0TM030.XWHCD;
    KM0TS05(); /* edit warehouse*/
    if (converseVar.validationMsgNum != 0)
      KM0TS97(); /* set modified fields modified;*/
      set KM0TM030.XWHCD cursor, modified, bold;
      return;
    else
      set KM0TM030.XWHCD initialAttributes;
    end
  end
  ;
  if (KM0TM030.KUCCOID is modified)
    KM0TW01.KM0TWCID = KM0TM030.KUCCOID;
    KM0TS10(); /* edit company id*/
    if (converseVar.validationMsgNum != 0)
      KM0TS97(); /* set modified fields modified*/
      set KM0TM030.KUCCOID cursor, modified, bold;
      return;
    else
      set KM0TM030.KUCCOID initialAttributes;
    end
  end
  ;
  if (KM0TM030.KUCCOID is modified /* if company id is modified*/
   || KM0TM030.XWHCD is modified)  /* or whse is modified*/
    KM0TW01.KM0TWFST = "Y"; /* force load of temp file*/
    return;
  end
  ;
  if (converseVar.eventKey is pf5) /* go to change screen*/
    KM0TM005.KM0TMOPT = "C";
    KM0TS12(); /* check security*/
    if (converseVar.validationMsgNum != 0) /* if security failed*/
      KM0TM005.KM0TMOPT = "I"; /* reset to inquiry*/
      set KM0TM005.KM0TMOPT initialAttributes;
    else
      KM0TW01.KM0TWESF = "Y"; /* end of inquiry screen*/
      KM0TW01.KM0TWFST = "Y"; /* force load of temp file*/
      return;
    end
  end
  ;
  if (converseVar.eventKey is pf6) /* go to delete screen*/
    KM0TM005.KM0TMOPT = "D";
    KM0TS12(); /* check security*/
    if (converseVar.validationMsgNum != 0) /* if security failed*/
      KM0TM005.KM0TMOPT = "I"; /* reset to inquiry*/
      set KM0TM005.KM0TMOPT initialAttributes;
    else
      KM0TW01.KM0TWESF = "Y"; /* end of inquiry screen*/
      KM0TW01.KM0TWFST = "Y"; /* force load of temp file*/
      return;
    end
  end
  ;
  if (converseVar.eventKey is pf17) /* go to first record*/
    KM0TW01.KM0TWCNT = 0;
    return;
  end
  ;
  if (converseVar.eventKey is pf18) /* go to last record*/
    KM0TW01.KM0TWCNT = KM0TW01.KM0TWHC - 1;
    return;
  end
  ;
  if (converseVar.eventKey is pf7) /* scroll backward*/
    if (KM0TW01.KM0TWCNT > 2)
      KM0TW01.KM0TWCNT = KM0TW01.KM0TWCNT - 2;
    else
      if (KM0TW01.KM0TWCNT > 1)
        KM0TW01.KM0TWCNT = 0;
      else
        converseLib.validationFailed(208);
        KM0TW01.KM0TWCNT = 0;
      end
    end
    return;
  end
  ;
  if (converseVar.eventKey is pf8) /* scroll forward*/
    return;
  end
  ;
  if (converseVar.eventKey is enter)
    if (KM0TM030.CAITEM != " ")
      KM0TW01.CAITEM = KM0TM030.CAITEM;
      KM0TS99(); /* search for cust store*/
      KM0TM030.CAITEM = " ";
      return;
    end
  end
  ;
  if (KM0TW01.KM0TWCNT > 0) /* set to current screen*/
    KM0TW01.KM0TWCNT = KM0TW01.KM0TWCNT - 1;
  end
  ;
end // end KM0T030

// check fastpath and pf keys
Function KM0TS01()
  ;
  if (converseVar.eventKey is enter)
    if (COMMAREA.CATOAP != " ")
      XSEXIT();
      KM0TW01.KM0TWMSG = COMMAREA.CAMSG;
    end
    return;
  end
  ;
  if (converseVar.eventKey is pf1)
    XSPF1();
    KM0TW01.KM0TWMSG = COMMAREA.CAMSG;
    return;
  end
  ;
  if (converseVar.eventKey is pf3)
    return;
  end
  ;
  if (converseVar.eventKey is pf4)
    XSPF4();
    KM0TW01.KM0TWMSG = COMMAREA.CAMSG;
    return;
  end
  ;
  if (converseVar.eventKey is pa1 /* pa1 or pa2 will cancel current data*/
   || converseVar.eventKey is pa2) /* entered on screen*/
    converseLib.clearScreen();
     /* reset screen*/
    converseLib.validationFailed(211); /* cancel msg*/
  else
    converseLib.validationFailed(3); /* invalid pf key*/
  end
  ;
end // end KM0TS01

// set fields to modify
Function KM0TS02()
  ;
  if (KM0TM005.XWHCD is modified)
    set KM0TM005.XWHCD modified;
  end
  ;
  if (KM0TM005.KUVDCCID is modified)
    set KM0TM005.KUVDCCID modified;
  end
  ;
  if (KM0TM005.KUVDCSID is modified)
    set KM0TM005.KUVDCSID modified;
  end
  ;
  if (KM0TM005.KUCCOID is modified)
    set KM0TM005.KUCCOID modified;
  end
  ;
  if (KM0TM005.KM0TMOPT is modified)
    set KM0TM005.KM0TMOPT modified;
  end
  ;
end // end KM0TS02

// edit warehouse
Function KM0TS05()
  ;
  if (KM0TW01.XWHCD == " ")
    converseLib.validationFailed(114);
    return;
  end
  ;
  if (KM0TW01.XWHCD == "99")
    converseLib.validationFailed(201);
    return;
  end
  ;
  if (KM0TW01.XWHCD in XWHTBL.XWHCD)
    /* next sentence*/
  else
    converseLib.validationFailed(201);
    return;
  end
  ;
  if (KM0TW01.KM0TWWSW == "2") /* additional whse*/
    return;
  end
  ;
  KM0TM010.XWHNM = XWHTBL.XWHNM[sysVar.arrayIndex];
  KM0TM015.XWHNM = XWHTBL.XWHNM[sysVar.arrayIndex];
  KM0TM020.XWHNM = XWHTBL.XWHNM[sysVar.arrayIndex];
  KM0TM025.XWHNM = XWHTBL.XWHNM[sysVar.arrayIndex];
  KM0TM030.XWHNM = XWHTBL.XWHNM[sysVar.arrayIndex];
  KM0TM005.XWHCD = KM0TW01.XWHCD;
  KM0TM010.XWHCD = KM0TW01.XWHCD;
  KM0TM015.XWHCD = KM0TW01.XWHCD;
  KM0TM020.XWHCD = KM0TW01.XWHCD;
  KM0TM025.XWHCD = KM0TW01.XWHCD;
  KM0TM030.XWHCD = KM0TW01.XWHCD;
  ;
end // end KM0TS05

// edit d/c company & store
Function KM0TS08()
  ;
  KM0TS10(); /* edit company*/
  ;
  if (converseVar.validationMsgNum != 0)
    return;
  end
  ;
  set KUMREC empty;
  KUMREC.KUCCOID = KM0TW01.KM0TWCID;
  KUMREC.KUMSTRID = KM0TW01.KM0TWSID;
  ;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    if (KM0TW01.KM0TWDST == "Y")
      converseLib.validationFailed(200);
    else
      converseLib.validationFailed(23);
    end
    KM0TW01.KM0TWMIS = "Y";
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 0)
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KM0T";
      TA1REC.TA1LOC = "KM0TS08";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VSTORE01";
      TA1REC.TA1TBLKE = KM0TW01.KM0TWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
  if (KM0TW01.KM0TWDST == "Y") /* if d/c get address*/
    /* next sentence*/
  else
    return;
  end
  ;
  KM0TM010.KUVDCCID = KUMREC.KUCCOID;
  KM0TM010.KUMSTRNM = KUMREC.KUMSTRNM;
  KM0TM010.KUVDCSID = KUMREC.KUMSTRID;
  KM0TM005.KUVDCCID = KUMREC.KUCCOID;
  KM0TM005.KUVDCSID = KUMREC.KUMSTRID;
  ;
  KULREC.KUCCOID = KUMREC.KUCCOID;
  KULREC.KULAAID = KUMREC.KUMSHAID;
  ;
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0T";
    TA1REC.TA1LOC = "KM0TS08";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VADDR001";
    TA1REC.TA1TBLKE = KM0TW01.KM0TWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
  KM0TM010.XXX-ADDR3 = KULREC.XXX-ADDR3;
  ;
  KM0TW01.KM0TWADR = KULREC.XXXCITY;
  KM0TW01.KM0TWCT = 0;
  KM0TW01.KM0TWIND = 1;
  ;
  while (KM0TW01.KM0TWIND < 26)
    if (KM0TW01.KM0TWACL[KM0TWIND] == " ")
      KM0TW01.KM0TWCT = KM0TW01.KM0TWCT + 1;
      if (KM0TW01.KM0TWCT > 2)
        KM0TS09(); /* move state and zip code*/
        KM0TW01.KM0TWIND = 30;
      end
    else
      KM0TW01.KM0TWCT = 0;
      if (KM0TW01.KM0TWIND > 24)
        KM0TW01.KM0TWIND = KM0TW01.KM0TWIND + 1;
        KM0TW01.KM0TWACL[KM0TWIND] = ",";
        KM0TW01.KM0TWIND = KM0TWIND + 3;
        KM0TW01.XSTCD = KULREC.XSTCD;
        KM0TW01.KM0TWACL[KM0TWIND] = KM0TW01.KM0TWSCL[1];
        KM0TW01.KM0TWIND = KM0TW01.KM0TWIND + 1;
        KM0TW01.KM0TWACL[KM0TWIND] = KM0TW01.KM0TWSCL[2];
      end
    end
    KM0TW01.KM0TWIND = KM0TW01.KM0TWIND + 1;
  end
  ;
  KM0TM010.XXXCITY = KM0TW01.KM0TWADR;
  ;
end // end KM0TS08

// move state and zip code
Function KM0TS09()
  ;
  KM0TW01.KM0TWIND = KM0TW01.KM0TWIND - 2;
  KM0TW01.KM0TWACL[KM0TWIND] = ",";
  KM0TW01.XSTCD = KULREC.XSTCD;
  KM0TW01.KM0TWIND = KM0TW01.KM0TWIND + 2;
  KM0TW01.KM0TWACL[KM0TWIND] = KM0TW01.KM0TWSCL[1];
  KM0TW01.KM0TWIND = KM0TW01.KM0TWIND + 1;
  KM0TW01.KM0TWACL[KM0TWIND] = KM0TW01.KM0TWSCL[2];
  if (KM0TW01.KM0TWIND < 25)
    KM0TW01.KM0TWIND = KM0TW01.KM0TWIND + 4;
  else
    KM0TW01.KM0TWIND = KM0TW01.KM0TWIND + 2;
  end
  KM0TW01.XXXZIP = KULREC.XXXZIP;
  KM0TW01.KM0TWIDX = 1;
  ;
  while (KM0TW01.KM0TWIDX < 6)
    KM0TW01.KM0TWACL[KM0TWIND] = KM0TW01.KM0TWZCL[KM0TWIDX];
    KM0TW01.KM0TWIDX = KM0TW01.KM0TWIDX + 1;
    KM0TW01.KM0TWIND = KM0TW01.KM0TWIND + 1;
  end
  ;
end // end KM0TS09

// edit company
Function KM0TS10()
  ;
  set KUCREC empty;
  KUCREC.KUCCOID = KM0TW01.KM0TWCID;
  KM0TM015.KUCCONM = " ";
  KM0TM020.KUCCONM = " ";
  KM0TM025.KUCCONM = " ";
  KM0TM030.KUCCONM = " ";
  ;
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(25);
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 0)
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KM0T";
      TA1REC.TA1LOC = "KM0TS10";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      TA1REC.TA1TBLKE = KM0TW01.KM0TWCID;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
  if (KUCREC.XAUCD in XAUTBL.XAUCD)
    if (XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KM0TW01.XATCD = XAUTBL.XATCD[sysVar.arrayIndex];
    else
      KM0TW01.XATCD = " ";
    end
  else
    KM0TW01.XATCD = " ";
  end
  ;
  if (KM0TM005.KM0TMOPT == "I")
    /* next sentence*/
  else
    if (KM0TW01.XATCD == "08")
      if (COMMAREA.CADLVL[1] == "Y")
        /* next sentence*/
      else
        converseLib.validationFailed(272);
        return;
      end
    else
      if (KM0TW01.XATCD == "03")
        if (COMMAREA.CADLVL[2] == "Y")
          /* next sentence*/
        else
          converseLib.validationFailed(272);
          return;
        end
      else
        if (COMMAREA.CADLVL[1] == "Y"
         || COMMAREA.CADLVL[2] == "Y")
          converseLib.validationFailed(272);
          return;
        end
      end
    end
  end
                  /* Edit for Nike Canada User*/
  ;
  if (KUCREC.XLECD == "03")
    if (COMMAREA.CADLVL[3] == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(272);
      return;
    end
  else
    if (COMMAREA.CADLVL[3] == "Y")
      converseLib.validationFailed(272);
      return;
    end
  end
  ;
  if (KM0TW01.KM0TWOPT != "A")
    KM0TM015.KUCCONM = KUCREC.KUCCONM;
    KM0TM020.KUCCONM = KUCREC.KUCCONM;
    KM0TM025.KUCCONM = KUCREC.KUCCONM;
    KM0TM030.KUCCONM = KUCREC.KUCCONM;
    KM0TM005.KUCCOID = KUCREC.KUCCOID;
    KM0TM015.KUCCOID = KUCREC.KUCCOID;
    KM0TM020.KUCCOID = KUCREC.KUCCOID;
    KM0TM025.KUCCOID = KUCREC.KUCCOID;
    KM0TM030.KUCCOID = KUCREC.KUCCOID;
  else
    KM0TM015.KUCCONM = " ";
    KM0TM020.KUCCONM = " ";
    KM0TM025.KUCCONM = " ";
    KM0TM030.KUCCONM = " ";
    KM0TM005.KUCCOID = 0;
    KM0TM015.KUCCOID = 0;
    KM0TM020.KUCCOID = 0;
    KM0TM025.KUCCOID = 0;
    KM0TM030.KUCCOID = 0;
  end
  ;
end // end KM0TS10

// check security
Function KM0TS12()
  ;
  if (KM0TM005.KM0TMOPT == "A")
    if (COMMAREA.CAADDFL != "Y")
      set KM0TM005.KM0TMOPT cursor, modified, bold;
      converseLib.validationFailed(134);
    else
      KM0TM005.KUVDCCID = 0;
      KM0TM005.KUVDCSID = 0;
      KM0TM005.XWHCD = " ";
      KM0TM005.KM0TMOPT = " ";
      KM0TW01.KM0TWSRN = "2";
    end
    return;
  end
  ;
  if (KM0TM005.KM0TMOPT == "C")
    if (COMMAREA.CACHGFL != "Y")
      set KM0TM005.KM0TMOPT cursor, modified, bold;
      converseLib.validationFailed(133);
    else
      KM0TW01.KM0TWSRN = "3";
    end
    return;
  end
  ;
  if (KM0TM005.KM0TMOPT == "D")
    if (COMMAREA.CADELFL != "Y")
      set KM0TM005.KM0TMOPT cursor, modified, bold;
      converseLib.validationFailed(99);
    else
      KM0TW01.KM0TWSRN = "4";
    end
    return;
  end
  ;
  if (KM0TM005.KM0TMOPT == "I")
    if (COMMAREA.CAINQFL != "Y")
      set KM0TM005.KM0TMOPT cursor, modified, bold;
      converseLib.validationFailed(100);
    else
      KM0TW01.KM0TWSRN = "5";
    end
    return;
  end
  ;
  converseLib.validationFailed(59); /* invalid option*/
  set KM0TM005.KM0TMOPT cursor, modified, bold;
  ;
end // end KM0TS12

// intialize map km0tm010
Function KM0TS15()
  ;
  KM0TM010.KUCCOID[KM0TWINX] = 0;
  KM0TM010.KUMSTRID[KM0TWINX] = 0;
  KM0TM010.XXXSTAT[KM0TWINX] = "A";
  ;
  set KM0TM010.KUCCOID[KM0TWINX] initialAttributes;
  set KM0TM010.KUMSTRID[KM0TWINX] initialAttributes;
  set KM0TM010.XXXSTAT[KM0TWINX] initialAttributes;
  ;
end // end KM0TS15

// check fastpath and pf keys
Function KM0TS17()
  ;
  if (converseVar.eventKey is enter)
    if (COMMAREA.CATOAP != " ")
      XSEXIT();
      KM0TW01.KM0TWMSG = COMMAREA.CAMSG;
    end
    return;
  end
  ;
  if (converseVar.eventKey is pf1)
    XSPF1();
    KM0TW01.KM0TWMSG = COMMAREA.CAMSG;
    return;
  end
  ;
  if (converseVar.eventKey is pf3)
    return;
  end
  ;
  if (converseVar.eventKey is pf4)
    XSPF4();
    KM0TW01.KM0TWMSG = COMMAREA.CAMSG;
    return;
  end
  ;
  if (converseVar.eventKey is pf12
   || converseVar.eventKey is pf15)
    return;
  end
  ;
  if (converseVar.eventKey is pa1 /* pa1 and pa2 will cancel current data entered*/
   || converseVar.eventKey is pa2) /* on screen*/
    converseLib.clearScreen();
     /* reset screen*/
    converseLib.validationFailed(211); /* cancelled msg*/
    if (KM0TW01.KM0TWCNT > 0)
      KM0TW01.KM0TWCNT = KM0TW01.KM0TWCNT - 1;
    end
  else
    converseLib.validationFailed(3); /* invalid pf key*/
  end
  ;
end // end KM0TS17

// set fields to modify
Function KM0TS19()
  ;
  if (KM0TM010.XWHCD is modified)
    set KM0TM010.XWHCD modified;
  end
  ;
  if (KM0TM010.KM0TMWHS is modified)
    set KM0TM010.KM0TMWHS modified;
  end
  ;
  if (KM0TM010.KUVDCCID is modified)
    set KM0TM010.KUVDCCID modified;
  end
  ;
  if (KM0TM010.KUVDCSID is modified)
    set KM0TM010.KUVDCSID modified;
  end
  ;
  if (KM0TM010.KM0TMALL is modified)
    set KM0TM010.KM0TMALL modified;
  end
  ;
  if (KM0TM010.KM0TMEXP is modified)
    set KM0TM010.KM0TMEXP modified;
  end
  ;
  KM0TW01.KM0TWIND = 1;
  ;
  while (KM0TW01.KM0TWIND < 11)
    if (KM0TM010.KUCCOID[KM0TWIND] is modified)
      set KM0TM010.KUCCOID[KM0TWIND] modified;
    end
    ;
    if (KM0TM010.KUMSTRID[KM0TWIND] is modified)
      set KM0TM010.KUMSTRID[KM0TWIND] modified;
    end
    ;
    if (KM0TM010.XXXSTAT[KM0TWIND] is modified)
      set KM0TM010.XXXSTAT[KM0TWIND] modified;
    end
    ;
    KM0TW01.KM0TWIND = KM0TW01.KM0TWIND + 1;
  end
  ;
end // end KM0TS19

// edit data for add
Function KM0TS20()
  ;
  if (KM0TM010.KUCCOID[KM0TWINX] != 0 /* if company and store*/
   || KM0TM010.KUMSTRID[KM0TWINX] != 0) /* entered*/
    /* next sentence*/
  else
    return;
  end
  ;
  if (KM0TW01.KM0TWINX == 1) /* if line one of map*/
    if (KM0TM010.KM0TMEXP is modified)
      if (KM0TM010.KM0TMEXP == "Y"
       || KM0TM010.KM0TMEXP == "N")
        set KM0TM010.KM0TMEXP initialAttributes;
      else
        converseLib.validationFailed(20);
        set KM0TM010.KM0TMEXP cursor, modified, bold;
      end
    end
    ;
    if (KM0TM010.KM0TMEXP == "Y"
     && KM0TM010.KM0TMALL == "N")
      converseLib.validationFailed(196);
      set KM0TM010.KM0TMEXP cursor, bold;
    else
      if (KM0TM010.KM0TMEXP == "N")
        set KM0TM010.KM0TMEXP initialAttributes;
      end
    end
    ;
    if (KM0TM010.KM0TMALL is modified)
      if (KM0TM010.KM0TMALL == "Y"
       || KM0TM010.KM0TMALL == "N")
        set KM0TM010.KM0TMALL initialAttributes;
      else
        converseLib.validationFailed(20);
        set KM0TM010.KM0TMALL cursor, modified, bold;
      end
    end
    ;
    if (KM0TM010.KM0TMALL == "Y")
      KM0TM010.KUMSTRID[1] = 0;
    end
  end
  ;
  if (KM0TM010.XXXSTAT[KM0TWINX] is modified)
    if (KM0TM010.XXXSTAT[KM0TWINX] == "A"
     || KM0TM010.XXXSTAT[KM0TWINX] == "I")
      set KM0TM010.XXXSTAT[KM0TWINX] initialAttributes;
    else
      converseLib.validationFailed(162);
      set KM0TM010.XXXSTAT[KM0TWINX] cursor, modified, bold;
    end
  end
  ;
  if (KM0TM010.KUCCOID[KM0TWINX] is modified
   || KM0TM010.KUMSTRID[KM0TWINX] is modified)
    /* next sentence*/
  else
    return;
  end
  ;
  KM0TW01.KM0TWCID = KM0TM010.KUCCOID[KM0TWINX];
  KM0TW01.KM0TWSID = KM0TM010.KUMSTRID[KM0TWINX];
  KM0TW01.KM0TWDST = "N";
  KM0TW01.KM0TWMIS = "N";
  ;
  KM0TS08(); /* edit company and store*/
  ;
  if (KM0TW01.KM0TWMIS == "Y") /* if invalid account*/
    set KM0TM010.KUCCOID[KM0TWINX] cursor, modified, bold;
    set KM0TM010.KUMSTRID[KM0TWINX] modified, bold;
    KM0TW01.KM0TWMIS = "N";
  else
    set KM0TM010.KUCCOID[KM0TWINX] initialAttributes;
    set KM0TM010.KUMSTRID[KM0TWINX] initialAttributes;
  end
  ;
  KM0TW01.KM0TWWHE = KM0TM010.XWHCD;
  KM0TW01.KM0TWDUP = "N";
  ;
  if (KM0TW01.KM0TWINX == 1
   && KM0TM010.KM0TMALL == "Y")
    /* next sentence*/
  else
    KM0TS22(); /* read psst db2 table*/
  end
  ;
  if (KM0TW01.KM0TWDUP == "Y") /* if duplicate*/
    set KM0TM010.KUCCOID[KM0TWINX] cursor, modified, bold;
    set KM0TM010.KUMSTRID[KM0TWINX] modified, bold;
    converseLib.validationFailed(108);
  end
  ;
  if (converseVar.validationMsgNum != 0)
    return;
  end
  ;
end // end KM0TS20

// read psst table
Function KM0TS22()
  ;
  KUVREC.KUCCOID = KM0TW01.KM0TWCID;
  KUVREC.KUMSTRID = KM0TW01.KM0TWSID;
  KUVREC.XWHCD = KM0TW01.KM0TWWHE;
  ;
  call "IO1700" ("S ", SQLCA, KUVREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 0)
      KM0TW01.KM0TWDUP = "Y";
      return;
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KM0T";
      TA1REC.TA1LOC = "KM0TS22";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VPSST001";
      TA1REC.TA1TBLKE = KM0TW01.KM0TWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
end // end KM0TS22

// add records to database
Function KM0TS25()
  ;
  if (KM0TM010.KUCCOID[KM0TWINX] == 0)
    return;
  end
  ;
  KM0TW01.KM0TWADD = "Y";
  KUVREC.KUCCOID = KM0TM010.KUCCOID[KM0TWINX];
  KUVREC.KUMSTRID = KM0TM010.KUMSTRID[KM0TWINX];
  KUVREC.XWHCD = KM0TM010.XWHCD;
  KUVREC.KUVDCCID = KM0TM010.KUVDCCID;
  KUVREC.KUVDCSID = KM0TM010.KUVDCSID;
  KUVREC.XXXSTAT = KM0TM010.XXXSTAT[KM0TWINX];
  ;
  XX0XS01();
  ;
  KUVREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUVREC.ZZZCHGDT = 0;
  KUVREC.ZZZCHGTM = 0;
  KUVREC.ZZZCHGCT = 0;
  ;
  call "IO1700" ("A ", SQLCA, KUVREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KM0TW01.KM0TWCT1 = KM0TW01.KM0TWCT1 + 1;
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0T";
    TA1REC.TA1LOC = "KM0TS25";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VPSST001";
    KM0TW01.KM0TWCID = KUVREC.KUCCOID;
    KM0TW01.KM0TWSID = KUVREC.KUMSTRID;
    KM0TW01.KM0TWWHE = KUVREC.XWHCD;
    TA1REC.TA1TBLKE = KM0TW01.KM0TWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
  KM0TS26(); /* audit record*/
  ;
  if (KM0TM010.KM0TMWHS == " ") /* if additional whse not entered*/
    return; /* exit*/
  end
  ;
  KM0TW01.KM0TWDUP = "N";
  KM0TW01.KM0TWCID = KM0TM010.KUCCOID[KM0TWINX];
  KM0TW01.KM0TWSID = KM0TM010.KUMSTRID[KM0TWINX];
  KM0TW01.KM0TWWHE = KM0TM010.KM0TMWHS;
  ;
  KM0TS22(); /* read psst db2 table*/
  ;
  if (KM0TW01.KM0TWDUP == "Y") /* if duplicate*/
    KM0TW01.KM0TWRJ2 = KM0TW01.KM0TWRJ2 + 1;
    return;
  end
  ;
  KUVREC.XWHCD = KM0TM010.KM0TMWHS;
  ;
  call "IO1700" ("A ", SQLCA, KUVREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KM0TW01.KM0TWCT2 = KM0TW01.KM0TWCT2 + 1;
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1PGMNM = "KM0T";
    TA1REC.TA1LOC = "KM0TS25";
    TA1REC.TA1TBLVU = "VPSST001";
    KM0TW01.KM0TWWHE = KUVREC.XWHCD;
    TA1REC.TA1TBLKE = KM0TW01.KM0TWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
  KM0TS26(); /* audit record*/
  ;
end // end KM0TS25

// write audit record for add
Function KM0TS26()
  ;
  set KUZREC empty;
  ;
  KUZREC.KUZTYPE = "A";
  KUZREC.KUZBFCD = " ";
  KUZREC.XXXTBLNM = "VPSST001";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUVREC.KUCCOID;
  KUZREC.KUMSTRID = KUVREC.KUMSTRID;
  KUZREC.KUZDATA = KUVREC.KUVGRP;
  ;
  ;
  KM0TS28(); /* write audit record*/
  ;
end // end KM0TS26

// globally add records
Function KM0TS27()
  ;
  if (KM0TM010.KUCCOID[KM0TWINX] == 0) /* if company id not entered*/
    return; /* exit*/
  end
  ;
  if (KM0TM010.KM0TMEXP == "Y")
    KM0TM015.KM0TMTTL = " ADD  ";
    KM0TM015.KM0TMTLE = "EXCEPTIONS";
    KM0TM015.KUCCOID = KM0TM010.KUCCOID[KM0TWINX];
    KM0TM015.KUCCONM = KM0TM010.KUMSTRNM;
    set KM0TM015.KUMSTRID[1] cursor;
    KM0T015(); /* display exception screen*/
    if (converseVar.eventKey is pa1 /* if cancelled*/
     || converseVar.eventKey is pa2)
      converseLib.validationFailed(211);
      return;
    end
    KM0TW01.KM0TWIND = 1;
    while (KM0TW01.KM0TWIND < 121)
                                   /* load data from screen to work storage*/
      KM0TW01.KUMSTRID[KM0TWIND] = KM0TM015.KUMSTRID[KM0TWIND];
      KM0TM015.KUMSTRID[KM0TWIND] = 0;
      KM0TW01.KM0TWIND = KM0TW01.KM0TWIND + 1;
    end
  end
  ;
  KM0TW01.KM0TWADD = "Y";
  ;
  set KUMREC empty;
  KUMREC.KUCCOID = KM0TM010.KUCCOID[KM0TWINX];
  ;
  call "IO0340" ("SS", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0T";
    TA1REC.TA1LOC = "KM0TS27";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VSTORE01";
    KM0TW01.KM0TWCID = KUMREC.KUCCOID;
    TA1REC.TA1TBLKE = KM0TW01.KM0TWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
  KM0TW01.KM0TWEND = "N";
  ;
  while (KM0TW01.KM0TWEND == "N")
    KM0TS30(); /* fetch next store record*/
  end
  ;
  if (KM0TM010.KM0TMEXP == "Y")
    KM0TW01.KM0TWIND = 1;
    while (KM0TW01.KM0TWIND < 121)
      KM0TW01.KUMSTRID[KM0TWIND] = 0; /* clear work storage*/
      if (KM0TW01.KM0TWRJF == "Y") /* ; if reject flag set*/
        set KM0TM015.KUMSTRID[KM0TWIND] skip; /* set to askip*/
      end
      KM0TW01.KM0TWIND = KM0TW01.KM0TWIND + 1;
    end
    if (KM0TW01.KM0TWRJF == "Y")
      set KM0TM015.XWHCD cursor;
    end
  end
  ;
end // end KM0TS27

// write audit record
Function KM0TS28()
  ;
  XX0XS01();
  ;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  ;
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM0T   ";
    TA1REC.TA1LOCAT[1] = "KM0TS28  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VPSST001 ";
    TA1REC.TA1MAP = "KM0TM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VPSST001";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  ;
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUAUD01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1PGMNM = "KM0TS28";
    TA1REC.TA1LOC = "ADD DB2 DCUST.VCUAUD01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
end // end KM0TS28

// fetch next store record
Function KM0TS30()
  ;
  call "IO0340" ("SN", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KM0TW01.KM0TWEND = "Y";
      return;
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KM0T";
      TA1REC.TA1LOC = "KM0TS30";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VSTORE01";
      KM0TW01.KM0TWCID = KUMREC.KUCCOID;
      TA1REC.TA1TBLKE = KM0TW01.KM0TWCID;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
  if (KM0TM010.KM0TMEXP == "Y"
   && KUMREC.KUMSTRID != 0)
    KM0TW01.KM0TWMAT = "N";
    KM0TW01.KM0TWIND = 1;
    while (KM0TW01.KM0TWIND < 121) /* check to see if store is exception*/
      if (KUMREC.KUMSTRID == KM0TW01.KUMSTRID[KM0TWIND])
        KM0TW01.KM0TWMAT = "Y";
        KM0TWIND = 900;
      end
      KM0TW01.KM0TWIND = KM0TW01.KM0TWIND + 1;
    end
    if (KM0TW01.KM0TWMAT == "Y") /* if store is exception*/
      return; /* get next store*/
    end
  end
  ;
  KM0TW01.KM0TWDUP = "N";
  KM0TW01.KM0TWCID = KUMREC.KUCCOID;
  KM0TW01.KM0TWSID = KUMREC.KUMSTRID;
  KM0TW01.KM0TWWHE = KM0TM010.XWHCD;
  ;
  KM0TS22(); /* read psst db2 table*/
  ;
  if (KM0TW01.KM0TWDUP == "Y") /* if duplicate*/
    KM0TW01.KM0TWRJ1 = KM0TW01.KM0TWRJ1 + 1;
    if (KM0TW01.KM0TWRJ1 < 121)
      KM0TM015.KUMSTRID[KM0TWRJ1] = KUMREC.KUMSTRID;
      set KM0TM015.KUMSTRID[KM0TWRJ1] bold;
    else
      KM0TW01.KM0TWMAX = "Y";
    end
    KM0TW01.KM0TWRJF = "Y";
    if (KM0TM010.KM0TMWHS != " ")
      KM0TW01.KM0TWRJ2 = KM0TW01.KM0TWRJ2 + 1;
    end
    return;
  end
  ;
  KUVREC.KUCCOID = KUMREC.KUCCOID;
  KUVREC.KUMSTRID = KUMREC.KUMSTRID;
  KUVREC.XWHCD = KM0TM010.XWHCD;
  KUVREC.KUVDCCID = KM0TM010.KUVDCCID;
  KUVREC.KUVDCSID = KM0TM010.KUVDCSID;
  KUVREC.XXXSTAT = KM0TM010.XXXSTAT[KM0TWINX];
  ;
  XX0XS01();
  ;
  KUVREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUVREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUVREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  KUVREC.ZZZCHGCT = 0;
  ;
  call "IO1700" ("A ", SQLCA, KUVREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KM0TW01.KM0TWCT1 = KM0TW01.KM0TWCT1 + 1;
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0T";
    TA1REC.TA1LOC = "KM0TS30";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VPSST001";
    KM0TW01.KM0TWCID = KUVREC.KUCCOID;
    KM0TW01.KM0TWSID = KUVREC.KUMSTRID;
    KM0TW01.KM0TWWHE = KUVREC.XWHCD;
    TA1REC.TA1TBLKE = KM0TW01.KM0TWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
  KM0TS26(); /* audit record*/
  ;
  if (KM0TM010.KM0TMWHS == " ") /* if no additional whse*/
    return; /* exit*/
  end
  ;
  KM0TW01.KM0TWDUP = "N";
  KM0TW01.KM0TWCID = KUMREC.KUCCOID;
  KM0TW01.KM0TWSID = KUMREC.KUMSTRID;
  KM0TW01.KM0TWWHE = KM0TM010.KM0TMWHS;
  ;
  KM0TS22(); /* read psst db2 table*/
  ;
  if (KM0TW01.KM0TWDUP == "Y") /* if duplicate*/
    KM0TW01.KM0TWRJ2 = KM0TW01.KM0TWRJ2 + 1;
    return;
  end
  ;
  KUVREC.XWHCD = KM0TM010.KM0TMWHS;
  ;
  call "IO1700" ("A ", SQLCA, KUVREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KM0TW01.KM0TWCT2 = KM0TW01.KM0TWCT2 + 1;
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1PGMNM = "KM0T";
    TA1REC.TA1LOC = "KM0TS30";
    TA1REC.TA1TBLVU = "VPSST001";
    KM0TW01.KM0TWWHE = KUVREC.XWHCD;
    TA1REC.TA1TBLKE = KM0TW01.KM0TWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
  KM0TS26(); /* audit record*/
  ;
end // end KM0TS30

// build message line
Function KM0TS33()
  ;
  KM0TW01.KM0TWM01 = "  WHSE ";
  KM0TW01.KM0TWM07 = "  WHSE ";
  KM0TW01.KM0TWM02 = KM0TW01.KM0TWWH1;
  KM0TW01.KM0TWM08 = KM0TW01.KM0TWWH2;
  ;
  if (KM0TW01.KM0TWSRN == "2")
    KM0TW01.KM0TWM03 = "   ADD ";
    KM0TW01.KM0TWM09 = "   ADD ";
  else
    if (KM0TW01.KM0TWSRN == "3")
      KM0TW01.KM0TWM03 = "   CHG ";
      KM0TW01.KM0TWM09 = "   CHG ";
    else
      KM0TW01.KM0TWM03 = "   DEL ";
      KM0TW01.KM0TWM09 = "   DEL ";
    end
  end
  ;
  KM0TW01.KM0TWM04 = KM0TW01.KM0TWCT1;
  KM0TW01.KM0TWM10 = KM0TW01.KM0TWCT2;
  ;
  KM0TW01.KM0TWM05 = "   REJ ";
  KM0TW01.KM0TWM11 = "   REJ ";
  ;
  KM0TW01.KM0TWM06 = KM0TW01.KM0TWRJ1;
  KM0TW01.KM0TWM12 = KM0TW01.KM0TWRJ2;
  ;
  KM0TW01.KM0TWMSG = KM0TW01.KM0TWMS1;
  ;
  KM0TW01.KM0TWCT1 = 0;
  KM0TW01.KM0TWCT2 = 0;
  KM0TW01.KM0TWRJ1 = 0;
  KM0TW01.KM0TWRJ2 = 0;
  ;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  ;
end // end KM0TS33

// initialize map km0tm020
Function KM0TS35()
  ;
  KM0TM020.KM0TMALL[KM0TWINX] = "N";
  KM0TM020.KM0TMEXP[KM0TWINX] = "N";
  ;
  set KM0TM020.KUMSTRID[KM0TWINX] initialAttributes;
  set KM0TM020.KUVDCCID[KM0TWINX] initialAttributes;
  set KM0TM020.KUVDCSID[KM0TWINX] initialAttributes;
  set KM0TM020.XXXSTAT[KM0TWINX] initialAttributes;
  set KM0TM020.KM0TMALL[KM0TWINX] initialAttributes;
  set KM0TM020.KM0TMEXP[KM0TWINX] initialAttributes;
  ;
  if (KM0TW01.KM0TWSRH[KM0TWINX] == "Y")
    set KM0TM020.KUMSTRID[KM0TWINX] skip, bold;
    set KM0TM020.KUVDCCID[KM0TWINX] cursor;
    KM0TW01.KM0TWSRH[KM0TWINX] = "N";
  end
  ;
end // end KM0TS35

// purge temp work file
Function KM0TS36()
  ;
  KM0TW02.KM0TW2CT = 0;
  KM0TW02.KM0TW2AP = "KM0T";
  KM0TW02.KM0TW2RC = 0;
  KM0TW02.KM0TW2FC = "P";
  ;
  set KM0TW03 empty;
  KM0TW03.KM0TW3LG = 135;
  ;
  call "TA0050" (KM0TW03, KM0TW02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (KM0TW02.KM0TW2RC != 0)
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "TMP";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0TS36";
    TA1REC.TA1LOC = "PURGING TEMP WORK FILE";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
end // end KM0TS36

// select set for psst table
Function KM0TS37()
  ;
  set KUVREC empty;
  KUVREC.KUCCOID = KM0TW01.KM0TWCID;
  KUVREC.XWHCD = KM0TW01.KM0TWWHE;
  ;
  call "IO1700" ("S1", SQLCA, KUVREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0T";
    TA1REC.TA1LOC = "KM0TS37";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VPSST001";
    TA1TBLKE = KM0TW01.KM0TWCID;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
  KM0TW01.KM0TWCNT = 0;
  KM0TW01.KM0TWHC = 0;
  ;
end // end KM0TS37

// load temp work file
Function KM0TS40()
  ;
  KM0TW02.KM0TW2RC = 0;
  KM0TW02.KM0TW2FC = "A";
  KM0TW02.KM0TW2AP = "KM0T";
  set KM0TW03 empty;
  set KM0TW04 empty;
  KM0TW01.KM0TWINX = 1;
  KM0TW01.KM0TWFND = "N";
  ;
  while (KM0TW01.KM0TWINX < 10)
    KM0TS42(); /* select next*/
    if (KM0TW01.KM0TWEND == "N")
      KM0TW04.KUMSTRID = KUVREC.KUMSTRID;
      KM0TW04.KUVDCCID = KUVREC.KUVDCCID;
      KM0TW04.KUVDCSID = KUVREC.KUVDCSID;
      KM0TW04.XXXSTAT = KUVREC.XXXSTAT;
      KM0TW04.ZZZSDT = KUVREC.ZZZSDT;
      KM0TW04.ZZZCHGCT = KUVREC.ZZZCHGCT;
      KM0TW03.KM0TW3DA[KM0TWINX] = KM0TW04.KM0TW4RL;
    else
      KM0TW01.KM0TWINX = 11;
    end
    KM0TW01.KM0TWINX = KM0TW01.KM0TWINX + 1;
  end
  ;
  if (KM0TW01.KM0TWFND == "Y")
    KM0TW01.KM0TWCNT = KM0TW01.KM0TWCNT + 1;
    KM0TW02.KM0TW2CT = KM0TW01.KM0TWCNT;
    KM0TW03.KM0TW3LG = 135;
    ;
    call "TA0050" (KM0TW03, KM0TW02) {isNoRefresh = yes, isExternal = yes};
    ;
    if (KM0TW02.KM0TW2RC != 0)
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "TMP";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KM0TS40";
      TA1REC.TA1TBLKE = KM0TW01.KM0TWKEY;
      TA1REC.TA1LOC = "LOADING TEMP WORK FILE";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
end // end KM0TS40

// select next kuvrec
Function KM0TS42()
  ;
  call "IO1700" ("N1", SQLCA, KUVREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KM0TW01.KM0TWFND = "Y";
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KM0TW01.KM0TWEND = "Y";
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KM0T";
      TA1REC.TA1LOC = "KM0TS42";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VPSST001";
      TA1REC.TA1TBLKE = KM0TW01.KM0TWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
end // end KM0TS42

// read temp work file
Function KM0TS45()
  ;
  KM0TW02.KM0TW2RC = 0;
  KM0TW03.KM0TW3LG = 135;
  KM0TW01.KM0TWCNT = KM0TW01.KM0TWCNT + 1;
  KM0TW02.KM0TW2CT = KM0TW01.KM0TWCNT;
  KM0TW02.KM0TW2FC = "R";
  KM0TW02.KM0TW2AP = "KM0T";
  ;
  if (KM0TW01.KM0TWCNT >= KM0TW01.KM0TWHC)
    converseLib.validationFailed(206);
    KM0TW01.KM0TWCNT = KM0TW01.KM0TWHC;
  end
  ;
  call "TA0050" (KM0TW03, KM0TW02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (KM0TW02.KM0TW2RC == 0)
    /* next sentence*/
  else
    if (KM0TW02.KM0TW2RC == 7)
      converseLib.validationFailed(206);
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "TMP";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KM0TS45";
      TA1REC.TA1TBLKE = KM0TW01.KM0TWKEY;
      TA1REC.TA1LOC = "READING TEMP WORK FILE";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
end // end KM0TS45

// move data to km0tm020
Function KM0TS47()
  ;
  if (KM0TW03.KM0TW3DA[KM0TWINX] == " ")
    KM0TM020.KUMSTRID[KM0TWINX] = 0;
    KM0TM020.KUVDCCID[KM0TWINX] = 0;
    KM0TM020.KUVDCSID[KM0TWINX] = 0;
    KM0TW01.KM0TWMOD[KM0TWINX] = "N";
    set KM0TM020.KUMSTRID[KM0TWINX] skip, invisible;
    set KM0TM020.KUVDCCID[KM0TWINX] skip, invisible;
    set KM0TM020.KUVDCSID[KM0TWINX] skip, invisible;
    set KM0TM020.XXXSTAT[KM0TWINX] skip, invisible;
    set KM0TM020.KM0TMALL[KM0TWINX] skip, invisible;
    set KM0TM020.KM0TMEXP[KM0TWINX] skip, invisible;
    return;
  end
  ;
  KM0TW04.KM0TW4RL = KM0TW03.KM0TW3DA[KM0TWINX];
  ;
  KM0TM020.KUMSTRID[KM0TWINX] = KM0TW04.KUMSTRID;
  KM0TM020.KUVDCCID[KM0TWINX] = KM0TW04.KUVDCCID;
  KM0TM020.KUVDCSID[KM0TWINX] = KM0TW04.KUVDCSID;
  KM0TM020.XXXSTAT[KM0TWINX] = KM0TW04.XXXSTAT;
  KM0TW01.KUVDCCID[KM0TWINX] = KM0TW04.KUVDCCID;
  KM0TW01.KUVDCSID[KM0TWINX] = KM0TW04.KUVDCSID;
  KM0TW01.ZZZSDT[KM0TWINX] = KM0TW04.ZZZSDT;
  KM0TW01.ZZZCHGCT[KM0TWINX] = KM0TW04.ZZZCHGCT;
  ;
end // end KM0TS47

// check fastpath and pf keys
Function KM0TS50()
  ;
  if (converseVar.eventKey is enter)
    if (COMMAREA.CATOAP != " ")
      KM0TS36();
      XSEXIT();
      KM0TW01.KM0TWMSG = COMMAREA.CAMSG;
      KM0TW01.KM0TWFST = "Y";
    end
    return;
  end
  ;
  if (converseVar.eventKey is pf1)
    KM0TS36();
    XSPF1();
    KM0TW01.KM0TWMSG = COMMAREA.CAMSG;
    KM0TW01.KM0TWFST = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf3)
    return;
  end
  ;
  if (converseVar.eventKey is pf4)
    KM0TS36();
    XSPF4();
    KM0TW01.KM0TWMSG = COMMAREA.CAMSG;
    KM0TW01.KM0TWFST = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf6
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf9
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18)
    return;
  end
  ;
  if (converseVar.eventKey is pa1 /* pa1 or pa2 will cancel current data entered*/
   || converseVar.eventKey is pa2) /* on screen*/
    converseLib.clearScreen();
     /* reset screen*/
    converseLib.validationFailed(211); /* cancel msg*/
    if (KM0TW01.KM0TWCNT > 0)
      KM0TW01.KM0TWCNT = KM0TW01.KM0TWCNT - 1;
    end
  else
    converseLib.validationFailed(3); /* invalid pf key*/
  end
  ;
end // end KM0TS50

// set fields to modified
Function KM0TS52()
  ;
  if (KM0TM020.KUCCOID is modified)
    set KM0TM020.KUCCOID modified;
  end
  ;
  if (KM0TM020.XWHCD is modified)
    set KM0TM020.XWHCD modified;
  end
  ;
  if (KM0TM020.KM0TMWHS is modified)
    set KM0TM020.KM0TMWHS modified;
  end
  ;
  KM0TW01.KM0TWIND = 1;
  ;
  while (KM0TW01.KM0TWIND < 10)
    if (KM0TM020.KUVDCCID[KM0TWIND] is modified)
      set KM0TM020.KUVDCCID[KM0TWIND] modified;
    end
    ;
    if (KM0TM020.KUVDCSID[KM0TWIND] is modified)
      set KM0TM020.KUVDCSID[KM0TWIND] modified;
    end
    ;
    if (KM0TM020.XXXSTAT[KM0TWIND] is modified)
      set KM0TM020.XXXSTAT[KM0TWIND] modified;
    end
    ;
    if (KM0TM020.KM0TMALL[KM0TWIND] is modified)
      set KM0TM020.KM0TMALL[KM0TWIND] modified;
    end
    ;
    if (KM0TM020.KM0TMEXP[KM0TWIND] is modified)
      set KM0TM020.KM0TMEXP[KM0TWIND] modified;
    end
    ;
    KM0TW01.KM0TWIND = KM0TW01.KM0TWIND + 1;
  end
  ;
end // end KM0TS52

// edit data for change
Function KM0TS55()
  ;
  if (KM0TM020.KM0TMEXP[KM0TWINX] is modified)
    if (KM0TM020.KM0TMEXP[KM0TWINX] == "Y"
     || KM0TM020.KM0TMEXP[KM0TWINX] == "N")
      set KM0TM020.KM0TMEXP[KM0TWINX] initialAttributes;
    else
      converseLib.validationFailed(20);
      set KM0TM020.KM0TMEXP[KM0TWINX] cursor, modified, bold;
    end
  end
  ;
  if (KM0TM020.KM0TMALL[KM0TWINX] is modified)
    if (KM0TM020.KM0TMALL[KM0TWINX] == "Y"
     || KM0TM020.KM0TMALL[KM0TWINX] == "N")
      set KM0TM020.KM0TMALL[KM0TWINX] initialAttributes;
    else
      converseLib.validationFailed(20);
      set KM0TM020.KM0TMALL[KM0TWINX] cursor, modified, bold;
    end
  end
  ;
  if (KM0TM020.KM0TMEXP[KM0TWINX] == "Y"
   && KM0TM020.KM0TMALL[KM0TWINX] == "N")
    converseLib.validationFailed(196);
    set KM0TM020.KM0TMEXP[KM0TWINX] cursor, bold;
  else
    if (KM0TM020.KM0TMEXP[KM0TWINX] == "N")
      set KM0TM020.KM0TMEXP[KM0TWINX] initialAttributes;
    end
  end
  ;
  if (KM0TM020.XXXSTAT[KM0TWINX] is modified)
    KM0TW01.KM0TWMOD[KM0TWINX] = "Y";
    if (KM0TM020.XXXSTAT[KM0TWINX] == "A"
     || KM0TM020.XXXSTAT[KM0TWINX] == "I")
      set KM0TM020.XXXSTAT[KM0TWINX] initialAttributes;
    else
      converseLib.validationFailed(162);
      set KM0TM020.XXXSTAT[KM0TWINX] cursor, modified, bold;
    end
  end
  ;
  if (KM0TM020.KUVDCCID[KM0TWINX] is modified
   || KM0TM020.KUVDCSID[KM0TWINX] is modified)
    KM0TW01.KM0TWMOD[KM0TWINX] = "Y";
    KM0TW01.KM0TWDST = "N";
    KM0TW01.KM0TWCID = KM0TM020.KUVDCCID[KM0TWINX];
    KM0TW01.KM0TWSID = KM0TM020.KUVDCSID[KM0TWINX];
    KM0TS08(); /* edit d/c company and store*/
    if (KM0TW01.KM0TWMIS == "Y")
      converseLib.validationFailed(200);
      set KM0TM020.KUVDCCID[KM0TWINX] cursor, modified, bold;
      set KM0TM020.KUVDCSID[KM0TWINX] modified, bold;
      KM0TW01.KM0TWMIS = "N";
    else
      set KM0TM020.KUVDCCID[KM0TWINX] initialAttributes;
      set KM0TM020.KUVDCSID[KM0TWINX] initialAttributes;
    end
  end
  ;
  if (KM0TM020.KM0TMALL[KM0TWINX] == "Y")
    if (KM0TW01.KM0TWMOD[KM0TWINX] == "Y")
      set KM0TM020.KM0TMALL[KM0TWINX] initialAttributes;
    else
      converseLib.validationFailed(207);
      set KM0TM020.KM0TMALL[KM0TWINX] cursor, modified, bold;
    end
  else
    if (KM0TM020.KM0TMALL[KM0TWINX] == "N")
      set KM0TM020.KM0TMALL[KM0TWINX] initialAttributes;
    end
  end
  ;
end // end KM0TS55

// update database
Function KM0TS57()
  ;
  if (KM0TW01.KM0TWMOD[KM0TWINX] == "Y") /* if line on screen modified*/
    /* next sentence*/
  else
    return;
  end
  ;
  KM0TW04.KM0TW4RL = KM0TW03.KM0TW3DA[KM0TWINX];
  KM0TS59(); /* audit before image*/
  ;
  set KUVREC empty;
  ;
  KM0TW01.KM0TWMOD[KM0TWINX] = "N";
  KM0TW01.KM0TWCHG = "Y";
  KUVREC.XWHCD = KM0TM020.XWHCD;
  KUVREC.KUCCOID = KM0TM020.KUCCOID;
  KUVREC.KUMSTRID = KM0TM020.KUMSTRID[KM0TWINX];
  KUVREC.KUVDCCID = KM0TM020.KUVDCCID[KM0TWINX];
  KUVREC.KUVDCSID = KM0TM020.KUVDCSID[KM0TWINX];
  KUVREC.XXXSTAT = KM0TM020.XXXSTAT[KM0TWINX];
  ;
  XX0XS01(); /* retrieve date and time*/
  ;
  KUVREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUVREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  KUVREC.ZZZSDT = KM0TW01.ZZZSDT;
  KUVREC.ZZZCHGCT = KM0TW01.ZZZCHGCT[KM0TWINX];
  KM0TW01.ZZZCHGCT[KM0TWINX] = KM0TW01.ZZZCHGCT[KM0TWINX] + 1;
  ;
  call "IO1700" ("U ", SQLCA, KUVREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KM0TW01.KM0TWCT1 = KM0TW01.KM0TWCT1 + 1;
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0T";
    TA1REC.TA1LOC = "KM0TS57";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VPSST001";
    KM0TW01.KM0TWCID = KUVREC.KUCCOID;
    KM0TW01.KM0TWSID = KUVREC.KUMSTRID;
    KM0TW01.KM0TWWHE = KUVREC.XWHCD;
    TA1REC.TA1TBLKE = KM0TW01.KM0TWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
  KM0TS61(); /* audit after record*/
  ;
  if (KM0TM020.KM0TMWHS == " ") /* if no additional whse*/
    return; /* exit*/
  end
  ;
  KM0TW01.KM0TWCID = KM0TM020.KUCCOID;
  KM0TW01.KM0TWSID = KM0TM020.KUMSTRID[KM0TWINX];
  KM0TW01.KM0TWWHE = KM0TM020.KM0TMWHS;
  KM0TW01.KM0TWDUP = "N";
  ;
  KM0TS22(); /* read psst table*/
  ;
  if (KM0TW01.KM0TWDUP == "Y") /* if record exists*/
    /* next sentence*/
  else
    KM0TW01.KM0TWRJ2 = KM0TW01.KM0TWRJ2 + 1;
    return;
  end
  ;
  if (KUVREC.KUVDCCID == KM0TW01.KUVDCCID[KM0TWINX]
   && KUVREC.KUVDCSID == KM0TW01.KUVDCSID[KM0TWINX])
    /* next sentence*/
  else
    KM0TW01.KM0TWRJ2 = KM0TW01.KM0TWRJ2 + 1;
    return;
  end
  ;
  KM0TS62(); /* audit before record*/
  ;
  KUVREC.KUVDCCID = KM0TM020.KUVDCCID[KM0TWINX];
  KUVREC.KUVDCSID = KM0TM020.KUVDCSID[KM0TWINX];
  KUVREC.XXXSTAT = KM0TM020.XXXSTAT[KM0TWINX];
  KUVREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUVREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  call "IO1700" ("U ", SQLCA, KUVREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KM0TW01.KM0TWCT2 = KM0TW01.KM0TWCT2 + 1;
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0T";
    TA1REC.TA1LOC = "KM0TS57";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VPSST001";
    KM0TW01.KM0TWCID = KUVREC.KUCCOID;
    KM0TW01.KM0TWSID = KUVREC.KUMSTRID;
    KM0TW01.KM0TWWHE = KUVREC.XWHCD;
    TA1REC.TA1TBLKE = KM0TW01.KM0TWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
  KM0TS61(); /* audit after record*/
  ;
end // end KM0TS57

// global change
Function KM0TS58()
  ;
  KM0TW01.KM0TWMOD[KM0TWINX] = "N";
  ;
  if (KM0TM020.KM0TMEXP[KM0TWINX] == "Y")
    KM0TM015.KM0TMTTL = "CHANGE";
    KM0TM015.KM0TMTLE = "EXCEPTIONS";
    KM0TM015.KUCCOID = KM0TM020.KUCCOID;
    set KM0TM015.KUMSTRID[1] cursor;
    KM0T015(); /* display exceptions screen*/
    if (converseVar.eventKey is pa1 /* if cancelled*/
     || converseVar.eventKey is pa2)
      converseLib.validationFailed(211);
      return;
    end
    KM0TW01.KM0TWIND = 1;
    while (KM0TW01.KM0TWIND < 121)
      KM0TW01.KUMSTRID[KM0TWIND] = KM0TM015.KUMSTRID[KM0TWIND];
      KM0TM015.KUMSTRID[KM0TWIND] = 0;
      KM0TW01.KM0TWIND = KM0TW01.KM0TWIND + 1;
    end
  end
  ;
  KM0TW01.KM0TWCCT = KM0TW01.KM0TWCNT;
  KM0TW01.KM0TWCNT = 0;
  ;
  while (KM0TW01.KM0TWCNT < KM0TW01.KM0TWHC)
    KM0TS45(); /* read temp work file*/
    KM0TW01.KM0TWIND = 1;
    while (KM0TW01.KM0TWIND < 10)
      if (KM0TW03.KM0TW3DA[KM0TWIND] != " ")
        KM0TW04.KM0TW4RL = KM0TW03.KM0TW3DA[KM0TWIND];
        if (KM0TW04.KUVDCCID == KM0TW01.KUVDCCID[KM0TWINX]
         && KM0TW04.KUVDCSID == KM0TW01.KUVDCSID[KM0TWINX])
          KM0TS60(); /* globally update database*/
        end
      end
      KM0TW01.KM0TWIND = KM0TW01.KM0TWIND + 1;
    end
    if (KM0TW01.KM0TWCHG == "Y")
      KM0TS63(); /* globally update temp storage*/
      KM0TW01.KM0TWCHG = "N";
    end
  end
  ;
  converseLib.validationFailed(0);
  KM0TW01.KM0TWCNT = KM0TW01.KM0TWCCT;
  KM0TW01.KM0TWWH1 = KM0TM020.XWHCD;
  KM0TW01.KM0TWWH2 = KM0TM020.KM0TMWHS;
  ;
  KM0TS33(); /* build message line*/
  ;
end // end KM0TS58

// write audit before record
Function KM0TS59()
  ;
  set KUZREC empty;
  set KUVREC empty;
  ;
  KUVREC.KUCCOID = KM0TM020.KUCCOID;
  KUVREC.KUMSTRID = KM0TW04.KUMSTRID;
  KUVREC.XWHCD = KM0TM020.XWHCD;
  KUVREC.KUVDCCID = KM0TW04.KUVDCCID;
  KUVREC.KUVDCSID = KM0TW04.KUVDCSID;
  KUVREC.XXXSTAT = KM0TW04.XXXSTAT;
  ;
  KUZREC.KUZTYPE = "C";
  KUZREC.KUZBFCD = "B";
  KUZREC.XXXTBLNM = "VPSST001";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUVREC.KUCCOID;
  KUZREC.KUMSTRID = KUVREC.KUMSTRID;
  KUZREC.KUZDATA = KUVREC.KUVGRP;
  ;
  ;
  KM0TS28(); /* write audit record*/
  ;
end // end KM0TS59

// globally update database
Function KM0TS60()
  ;
  if (KM0TM020.KM0TMEXP[KM0TWINX] == "Y"
   && KM0TW04.KUMSTRID != 0)
    KM0TW01.KM0TWIDX = 1;
    while (KM0TW01.KM0TWIDX < 121) /* check to see if store is exception*/
      if (KM0TW04.KUMSTRID == KM0TW01.KUMSTRID[KM0TWIDX])
        return;
      end
      KM0TW01.KM0TWIDX = KM0TW01.KM0TWIDX + 1;
    end
  end
  ;
  KM0TS59(); /* audit before record*/
  ;
  set KUVREC empty;
  ;
  KUVREC.XWHCD = KM0TM020.XWHCD;
  KUVREC.KUCCOID = KM0TM020.KUCCOID;
  KUVREC.KUMSTRID = KM0TW04.KUMSTRID;
  KUVREC.KUVDCCID = KM0TM020.KUVDCCID[KM0TWINX];
  KUVREC.KUVDCSID = KM0TM020.KUVDCSID[KM0TWINX];
  KUVREC.XXXSTAT = KM0TM020.XXXSTAT[KM0TWINX];
  KUVREC.ZZZSDT = KM0TW04.ZZZSDT;
  KUVREC.ZZZCHGCT = KM0TW04.ZZZCHGCT;
  ;
  XX0XS01();
  ;
  KUVREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUVREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  call "IO1700" ("U ", SQLCA, KUVREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KM0TW01.KM0TWCT1 = KM0TW01.KM0TWCT1 + 1;
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0T";
    TA1REC.TA1LOC = "KM0TS60";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VPSST001";
    KM0TW01.KM0TWCID = KUVREC.KUCCOID;
    KM0TW01.KM0TWSID = KUVREC.KUMSTRID;
    KM0TW01.KM0TWWHE = KUVREC.XWHCD;
    TA1REC.TA1TBLKE = KM0TW01.KM0TWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
  KM0TS61(); /* audit after record*/
  ;
  KM0TW04.KUVDCCID = KUVREC.KUVDCCID;
  KM0TW04.KUVDCSID = KUVREC.KUVDCSID;
  KM0TW04.XXXSTAT = KUVREC.XXXSTAT;
  KM0TW04.ZZZCHGCT = KM0TW04.ZZZCHGCT + 1;
  KM0TW03.KM0TW3DA[KM0TWIND] = KM0TW04.KM0TW4RL;
  KM0TW01.KM0TWCHG = "Y";
  ;
  if (KM0TM020.KM0TMWHS == " ") /* if no additional whse*/
    return; /* exit*/
  end
  ;
  KM0TW01.KM0TWCID = KM0TM020.KUCCOID;
  KM0TW01.KM0TWSID = KM0TW04.KUMSTRID;
  KM0TW01.KM0TWWHE = KM0TM020.KM0TMWHS;
  KM0TW01.KM0TWDUP = "N";
  ;
  KM0TS22(); /* read psst table*/
  ;
  if (KM0TW01.KM0TWDUP == "Y") /* if record exists*/
    /* next sentence*/
  else
    KM0TW01.KM0TWRJ2 = KM0TW01.KM0TWRJ2 + 1;
    return;
  end
  ;
  if (KUVREC.KUVDCCID == KM0TW01.KUVDCCID[KM0TWINX]
   && KUVREC.KUVDCSID == KM0TW01.KUVDCSID[KM0TWINX])
    /* next sentence*/
  else
    KM0TW01.KM0TWRJ2 = KM0TW01.KM0TWRJ2 + 1;
    return;
  end
  ;
  KM0TS62(); /* audit before record*/
  ;
  KUVREC.KUVDCCID = KM0TM020.KUVDCCID[KM0TWINX];
  KUVREC.KUVDCSID = KM0TM020.KUVDCSID[KM0TWINX];
  KUVREC.XXXSTAT = KM0TM020.XXXSTAT[KM0TWINX];
  KUVREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUVREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  call "IO1700" ("U ", SQLCA, KUVREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KM0TW01.KM0TWCT2 = KM0TW01.KM0TWCT2 + 1;
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0T";
    TA1REC.TA1LOC = "KM0TS60";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VPSST001";
    KM0TW01.KM0TWCID = KUVREC.KUCCOID;
    KM0TW01.KM0TWSID = KUVREC.KUMSTRID;
    KM0TW01.KM0TWWHE = KUVREC.XWHCD;
    TA1REC.TA1TBLKE = KM0TW01.KM0TWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
  KM0TS61(); /* audit after record*/
  ;
end // end KM0TS60

// write audit after record
Function KM0TS61()
  ;
  set KUZREC empty;
  ;
  KUZREC.KUZTYPE = "C";
  KUZREC.KUZBFCD = "A";
  KUZREC.XXXTBLNM = "VPSST001";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUVREC.KUCCOID;
  KUZREC.KUMSTRID = KUVREC.KUMSTRID;
  KUZREC.KUZDATA = KUVREC.KUVGRP;
  ;
  KM0TS28(); /* write audit record*/
  ;
end // end KM0TS61

// write audit before record
Function KM0TS62()
  ;
  set KUZREC empty;
  ;
  KUZREC.KUZTYPE = "C";
  KUZREC.KUZBFCD = "B";
  KUZREC.XXXTBLNM = "VPSST001";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUVREC.KUCCOID;
  KUZREC.KUMSTRID = KUVREC.KUMSTRID;
  KUZREC.KUZDATA = KUVREC.KUVGRP;
  ;
  KM0TS28(); /* write audit record*/
  ;
end // end KM0TS62

// globally update temp storage
Function KM0TS63()
  ;
  KM0TW02.KM0TW2RC = 0;
  KM0TW03.KM0TW3LG = 135;
  KM0TW02.KM0TW2CT = KM0TW01.KM0TWCNT;
  KM0TW02.KM0TW2FC = "U";
  KM0TW02.KM0TW2AP = "KM0T";
  ;
  call "TA0050" (KM0TW03, KM0TW02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (KM0TW02.KM0TW2RC == 0)
    /* next sentence*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "TMP";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0T";
    TA1REC.TA1LOC = "KM0TS63";
    KM0TW01.KM0TWWHE = KM0TM020.XWHCD;
    KM0TW01.KM0TWCID = KM0TM020.KUCCOID;
    TA1REC.TA1TBLKE = KM0TW01.KM0TWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
end // end KM0TS63

// update temp work file
Function KM0TS65()
  ;
  KM0TW01.KM0TWIND = 1;
  ;
  while (KM0TW01.KM0TWIND < 10)
    if (KM0TM020.KUVDCCID[KM0TWIND] != 0)
      KM0TW04.KUMSTRID = KM0TM020.KUMSTRID[KM0TWIND];
      KM0TW04.KUVDCCID = KM0TM020.KUVDCCID[KM0TWIND];
      KM0TW04.KUVDCSID = KM0TM020.KUVDCSID[KM0TWIND];
      KM0TW04.XXXSTAT = KM0TM020.XXXSTAT[KM0TWIND];
      KM0TW04.ZZZCHGCT = KM0TW01.ZZZCHGCT[KM0TWIND];
      KM0TW03.KM0TW3DA[KM0TWIND] = KM0TW04.KM0TW4RL;
    else
      KM0TW03.KM0TW3DA[KM0TWIND] = " ";
    end
    KM0TW01.KM0TWIND = KM0TW01.KM0TWIND + 1;
  end
  ;
  KM0TW02.KM0TW2RC = 0;
  KM0TW03.KM0TW3LG = 135;
  KM0TW02.KM0TW2CT = KM0TW01.KM0TWCNT;
  KM0TW02.KM0TW2FC = "U";
  KM0TW02.KM0TW2AP = "KM0T";
  ;
  call "TA0050" (KM0TW03, KM0TW02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (KM0TW02.KM0TW2RC == 0)
    /* next sentence*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "TMP";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0T";
    TA1REC.TA1LOC = "KM0TS65";
    KM0TW01.KM0TWWHE = KM0TM020.XWHCD;
    KM0TW01.KM0TWCID = KM0TM020.KUCCOID;
    TA1REC.TA1TBLKE = KM0TW01.KM0TWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
end // end KM0TS65

// search for customer store
Function KM0TS67()
  ;
  KM0TW01.KM0TWSID = KM0TW01.KM0TWSTR;
  KM0TW01.KM0TWCNT = 0;
  KM0TW01.KM0TWEND = "N";
  ;
  while (KM0TW01.KM0TWEND == "N")
    KM0TS45(); /* read temp work file*/
    if (KM0TW02.KM0TW2RC == 7)
      converseLib.validationFailed(209);
      KM0TW01.KM0TWEND = "Y";
      KM0TW01.KM0TWCNT = 0;
    else
      KM0TW01.KM0TWIND = 1;
      while (KM0TW01.KM0TWIND < 10)
        KM0TW04.KM0TW4RL = KM0TW03.KM0TW3DA[KM0TWIND];
        if (KM0TW04.KUMSTRID == KM0TW01.KM0TWSID)
          KM0TW01.KM0TWSRH[KM0TWIND] = "Y";
          KM0TW01.KM0TWIND = 11;
          KM0TW01.KM0TWEND = "Y";
          KM0TW01.KM0TWCNT = KM0TW01.KM0TWCNT - 1;
        end
        KM0TW01.KM0TWIND = KM0TW01.KM0TWIND + 1;
      end
    end
  end
  ;
end // end KM0TS67

// initialize map km0tm025
Function KM0TS70()
  ;
  KM0TM025.KM0TMALL[KM0TWINX] = "N";
  KM0TM025.KM0TMEXP[KM0TWINX] = "N";
  KM0TM025.KM0TMSEL[KM0TWINX] = " ";
  ;
  set KM0TM025.KM0TMALL[KM0TWINX] initialAttributes;
  set KM0TM025.KM0TMEXP[KM0TWINX] initialAttributes;
  set KM0TM025.KM0TMSEL[KM0TWINX] initialAttributes;
  set KM0TM025.KUMSTRID[KM0TWINX] initialAttributes;
  set KM0TM025.KUVDCCID[KM0TWINX] initialAttributes;
  set KM0TM025.KUVDCSID[KM0TWINX] initialAttributes;
  set KM0TM025.XXXSTAT[KM0TWINX] initialAttributes;
  ;
  if (KM0TW01.KM0TWSRH[KM0TWINX] == "Y")
    set KM0TM025.KUMSTRID[KM0TWINX] skip, bold;
    set KM0TM025.KM0TMSEL[KM0TWINX] cursor;
    KM0TW01.KM0TWSRH[KM0TWINX] = "N";
  end
  ;
end // end KM0TS70

// move data to km0tm025
Function KM0TS71()
  ;
  if (KM0TW03.KM0TW3DA[KM0TWINX] == " ")
    KM0TM025.KM0TMSEL[KM0TWINX] = " ";
    KM0TM025.KUMSTRID[KM0TWINX] = 0;
    KM0TM025.KUVDCCID[KM0TWINX] = 0;
    KM0TM025.KUVDCSID[KM0TWINX] = 0;
    set KM0TM025.KM0TMSEL[KM0TWINX] skip, invisible;
    set KM0TM025.KUMSTRID[KM0TWINX] skip, invisible;
    set KM0TM025.KUVDCCID[KM0TWINX] skip, invisible;
    set KM0TM025.KUVDCSID[KM0TWINX] skip, invisible;
    set KM0TM025.XXXSTAT[KM0TWINX] skip, invisible;
    set KM0TM025.KM0TMALL[KM0TWINX] skip, invisible;
    set KM0TM025.KM0TMEXP[KM0TWINX] skip, invisible;
    return;
  end
  ;
  KM0TW04.KM0TW4RL = KM0TW03.KM0TW3DA[KM0TWINX];
  ;
  KM0TM025.KUMSTRID[KM0TWINX] = KM0TW04.KUMSTRID;
  KM0TM025.KUVDCCID[KM0TWINX] = KM0TW04.KUVDCCID;
  KM0TM025.KUVDCSID[KM0TWINX] = KM0TW04.KUVDCSID;
  KM0TM025.XXXSTAT[KM0TWINX] = KM0TW04.XXXSTAT;
  KM0TW01.KUVDCCID[KM0TWINX] = KM0TW04.KUVDCCID;
  KM0TW01.KUVDCSID[KM0TWINX] = KM0TW04.KUVDCSID;
  KM0TW01.ZZZSDT[KM0TWINX] = KM0TW04.ZZZSDT;
  KM0TW01.ZZZCHGCT[KM0TWINX] = KM0TW04.ZZZCHGCT;
  ;
end // end KM0TS71

// check fastpath and pf keys
Function KM0TS72()
  ;
  if (converseVar.eventKey is enter)
    if (COMMAREA.CATOAP != " ")
      KM0TS36();
      XSEXIT();
      KM0TW01.KM0TWMSG = COMMAREA.CAMSG;
      KM0TW01.KM0TWFST = "Y";
    end
    return;
  end
  ;
  if (converseVar.eventKey is pf1)
    KM0TS36();
    XSPF1();
    KM0TW01.KM0TWMSG = COMMAREA.CAMSG;
    KM0TW01.KM0TWFST = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf3)
    return;
  end
  ;
  if (converseVar.eventKey is pf4)
    KM0TS36();
    XSPF4();
    KM0TW01.KM0TWMSG = COMMAREA.CAMSG;
    KM0TW01.KM0TWFST = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf5
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf9
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18)
    return;
  end
  ;
  if (converseVar.eventKey is pa1 /* pa1 or pa2 will cancel current data*/
   || converseVar.eventKey is pa2) /* entered on screen*/
    converseLib.clearScreen();
     /* reset screen*/
    converseLib.validationFailed(211); /* cancel message*/
    if (KM0TW01.KM0TWCNT > 0) /* reset to current data*/
      KM0TW01.KM0TWCNT = KM0TW01.KM0TWCNT - 1;
    end
  else
    converseLib.validationFailed(3); /* invalid pf key*/
  end
  ;
end // end KM0TS72

// set modified fields to modify
Function KM0TS73()
  ;
  if (KM0TM025.KUCCOID is modified)
    set KM0TM025.KUCCOID modified;
  end
  ;
  if (KM0TM025.XWHCD is modified)
    set KM0TM025.XWHCD modified;
  end
  ;
  if (KM0TM025.KM0TMWHS is modified)
    set KM0TM025.KM0TMWHS modified;
  end
  ;
  KM0TW01.KM0TWIND = 1;
  ;
  while (KM0TW01.KM0TWIND < 10)
    if (KM0TM025.KM0TMSEL[KM0TWIND] is modified)
      set KM0TM025.KM0TMSEL[KM0TWIND] modified;
    end
    ;
    if (KM0TM025.KM0TMALL[KM0TWIND] is modified)
      set KM0TM025.KM0TMALL[KM0TWIND] modified;
    end
    ;
    if (KM0TM025.KM0TMEXP[KM0TWIND] is modified)
      set KM0TM025.KM0TMEXP[KM0TWIND] modified;
    end
    ;
    KM0TW01.KM0TWIND = KM0TW01.KM0TWIND + 1;
  end
  ;
end // end KM0TS73

// edit data on screen
Function KM0TS74()
  ;
  if (KM0TM025.KM0TMEXP[KM0TWINX] is modified)
    if (KM0TM025.KM0TMEXP[KM0TWINX] == "Y"
     || KM0TM025.KM0TMEXP[KM0TWINX] == "N")
      set KM0TM025.KM0TMEXP[KM0TWINX] initialAttributes;
    else
      converseLib.validationFailed(20);
      set KM0TM025.KM0TMEXP[KM0TWINX] cursor, modified, bold;
    end
  end
  ;
  if (KM0TM025.KM0TMALL[KM0TWINX] is modified)
    if (KM0TM025.KM0TMALL[KM0TWINX] == "Y"
     || KM0TM025.KM0TMALL[KM0TWINX] == "N")
      set KM0TM025.KM0TMALL[KM0TWINX] initialAttributes;
    else
      converseLib.validationFailed(20);
      set KM0TM025.KM0TMALL[KM0TWINX] cursor, modified, bold;
    end
  end
  ;
  if (KM0TM025.KM0TMSEL[KM0TWINX] is modified)
    if (KM0TM025.KM0TMSEL[KM0TWINX] == "D"
     || KM0TM025.KM0TMSEL[KM0TWINX] == " ")
      /* next sentence*/
    else
      converseLib.validationFailed(59);
      set KM0TM025.KM0TMSEL[KM0TWINX] cursor, modified, bold;
    end
  end
  ;
  if (KM0TM025.KM0TMALL[KM0TWINX] == "Y")
    if (KM0TM025.KM0TMSEL[KM0TWINX] == "D")
      set KM0TM025.KM0TMALL[KM0TWINX] initialAttributes;
    else
      converseLib.validationFailed(207);
      set KM0TM025.KM0TMALL[KM0TWINX] cursor, modified, bold;
    end
  else
    if (KM0TM025.KM0TMALL[KM0TWINX] == "N")
      set KM0TM025.KM0TMALL[KM0TWINX] initialAttributes;
    end
  end
  ;
end // end KM0TS74

// delete from database
Function KM0TS75()
  ;
  if (KM0TM025.KM0TMSEL[KM0TWINX] == "D") /* if selected for delete*/
    /* next sentence*/
  else
    return;
  end
  ;
  set KUVREC empty;
  ;
  KM0TM025.KM0TMSEL[KM0TWINX] = " ";
  KM0TW01.KM0TWCHG = "Y";
  KUVREC.XWHCD = KM0TM025.XWHCD;
  KUVREC.KUCCOID = KM0TM025.KUCCOID;
  KUVREC.KUMSTRID = KM0TM025.KUMSTRID[KM0TWINX];
  KUVREC.KUVDCCID = KM0TM025.KUVDCCID[KM0TWINX];
  KUVREC.KUVDCSID = KM0TM025.KUVDCSID[KM0TWINX];
  KUVREC.XXXSTAT = KM0TM025.XXXSTAT[KM0TWINX];
  KUVREC.ZZZCHGCT = KM0TW01.ZZZCHGCT[KM0TWINX];
  KM0TW01.ZZZCHGCT[KM0TWINX] = 0;
  ;
  call "IO1700" ("D ", SQLCA, KUVREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KM0TW01.KM0TWCT1 = KM0TW01.KM0TWCT1 + 1;
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0T";
    TA1REC.TA1LOC = "KM0TS75";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VPSST001";
    KM0TW01.KM0TWCID = KUVREC.KUCCOID;
    KM0TW01.KM0TWSID = KUVREC.KUMSTRID;
    KM0TW01.KM0TWWHE = KUVREC.XWHCD;
    TA1REC.TA1TBLKE = KM0TW01.KM0TWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
  KM0TS76(); /* audit record*/
  ;
  KM0TM025.KUVDCCID[KM0TWINX] = 0;
  KM0TM025.KUVDCSID[KM0TWINX] = 0;
  ;
  if (KM0TM025.KM0TMWHS == " ") /* if no addition whse*/
    KM0TW01.KUVDCCID[KM0TWINX] = 0; /* exit*/
    KM0TW01.KUVDCSID[KM0TWINX] = 0;
    return;
  end
  ;
  KM0TW01.KM0TWCID = KM0TM025.KUCCOID;
  KM0TW01.KM0TWSID = KM0TM025.KUMSTRID[KM0TWINX];
  KM0TW01.KM0TWWHE = KM0TM025.KM0TMWHS;
  KM0TW01.KM0TWDUP = "N";
  ;
  KM0TS22(); /* read psst table*/
  ;
  if (KM0TW01.KM0TWDUP == "Y") /* if record exists*/
    /* next sentence*/
  else
    KM0TW01.KM0TWRJ2 = KM0TW01.KM0TWRJ2 + 1;
    return;
  end
  ;
  if (KUVREC.KUVDCCID == KM0TW01.KUVDCCID[KM0TWINX]
   && KUVREC.KUVDCSID == KM0TW01.KUVDCSID[KM0TWINX])
    /* next sentence*/
  else
    KM0TW01.KM0TWRJ2 = KM0TW01.KM0TWRJ2 + 1;
    return;
  end
  ;
  call "IO1700" ("D ", SQLCA, KUVREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KM0TW01.KM0TWCT2 = KM0TW01.KM0TWCT2 + 1;
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0T";
    TA1REC.TA1LOC = "KM0TS75";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VPSST001";
    KM0TW01.KM0TWCID = KUVREC.KUCCOID;
    KM0TW01.KM0TWSID = KUVREC.KUMSTRID;
    KM0TW01.KM0TWWHE = KUVREC.XWHCD;
    TA1REC.TA1TBLKE = KM0TW01.KM0TWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
  KM0TS76(); /* audit record*/
  ;
  KM0TW01.KUVDCCID[KM0TWINX] = 0;
  KM0TW01.KUVDCSID[KM0TWINX] = 0;
  ;
end // end KM0TS75

// write audit record for delete
Function KM0TS76()
  ;
  set KUZREC empty;
  ;
  KUZREC.KUZTYPE = "C";
  KUZREC.KUZBFCD = "D";
  KUZREC.XXXTBLNM = "VPSST001";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUVREC.KUCCOID;
  KUZREC.KUMSTRID = KUVREC.KUMSTRID;
  KUZREC.KUZDATA = KUVREC.KUVGRP;
  ;
  KM0TS28(); /* write audit record*/
  ;
end // end KM0TS76

// gl0bal delete from database
Function KM0TS77()
  ;
  KM0TM025.KM0TMSEL[KM0TWINX] = " ";
  ;
  if (KM0TM025.KM0TMEXP[KM0TWINX] == "Y")
    KM0TM015.KM0TMTTL = "DELETE";
    KM0TM015.KM0TMTLE = "EXCEPTIONS";
    KM0TM015.KUCCOID = KM0TM025.KUCCOID;
    set KM0TM015.KUMSTRID[1] cursor;
    KM0T015(); /* display exceptions screen*/
    if (converseVar.eventKey is pa1 /* if cancelled*/
     || converseVar.eventKey is pa2)
      converseLib.validationFailed(211);
      return;
    end
    KM0TW01.KM0TWIND = 1;
    while (KM0TW01.KM0TWIND < 121) /* check to see if store exception*/
      KM0TW01.KUMSTRID[KM0TWIND] = KM0TM015.KUMSTRID[KM0TWIND];
      KM0TM015.KUMSTRID[KM0TWIND] = 0;
      KM0TW01.KM0TWIND = KM0TW01.KM0TWIND + 1;
    end
  end
  ;
  KM0TW01.KM0TWCCT = KM0TW01.KM0TWCNT;
  KM0TW01.KM0TWCNT = 0;
  ;
  while (KM0TW01.KM0TWCNT < KM0TW01.KM0TWHC)
    KM0TS45(); /* read temp work file*/
    KM0TW01.KM0TWIND = 1;
    while (KM0TW01.KM0TWIND < 10)
      if (KM0TW03.KM0TW3DA[KM0TWIND] != " ")
        KM0TW04.KM0TW4RL = KM0TW03.KM0TW3DA[KM0TWIND];
        if (KM0TW04.KUVDCCID == KM0TW01.KUVDCCID[KM0TWINX]
         && KM0TW04.KUVDCSID == KM0TW01.KUVDCSID[KM0TWINX])
          KM0TS80(); /* globally delete from database*/
        end
      end
      KM0TW01.KM0TWIND = KM0TW01.KM0TWIND + 1;
    end
    if (KM0TW01.KM0TWCHG == "Y")
      KM0TW01.KM0TWFST = "Y"; /* force to reload temp storage*/
      KM0TW01.KM0TWCHG = "N";
    end
  end
  ;
  converseLib.validationFailed(0);
  KM0TW01.KM0TWCNT = KM0TW01.KM0TWCCT;
  KM0TW01.KM0TWWH1 = KM0TM025.XWHCD;
  KM0TW01.KM0TWWH2 = KM0TM025.KM0TMWHS;
  ;
  KM0TS33(); /* build message line*/
  ;
end // end KM0TS77

// globally delete from database
Function KM0TS80()
  ;
  if (KM0TM025.KM0TMEXP[KM0TWINX] == "Y"
   && KM0TW04.KUMSTRID != 0)
    KM0TW01.KM0TWIDX = 1;
    while (KM0TW01.KM0TWIDX < 121) /* check to see if store exception*/
      if (KM0TW04.KUMSTRID == KM0TW01.KUMSTRID[KM0TWIDX])
        return;
      end
      KM0TW01.KM0TWIDX = KM0TW01.KM0TWIDX + 1;
    end
  end
  ;
  set KUVREC empty;
  ;
  KUVREC.XWHCD = KM0TM025.XWHCD;
  KUVREC.KUCCOID = KM0TM025.KUCCOID;
  KUVREC.KUMSTRID = KM0TW04.KUMSTRID;
  KUVREC.KUVDCCID = KM0TW04.KUVDCCID;
  KUVREC.KUVDCSID = KM0TW04.KUVDCSID;
  KUVREC.XXXSTAT = KM0TW04.XXXSTAT;
  KUVREC.ZZZCHGCT = KM0TW04.ZZZCHGCT;
  ;
  call "IO1700" ("D ", SQLCA, KUVREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KM0TW01.KM0TWCT1 = KM0TW01.KM0TWCT1 + 1;
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0T";
    TA1REC.TA1LOC = "KM0TS80";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VPSST001";
    KM0TW01.KM0TWCID = KUVREC.KUCCOID;
    KM0TW01.KM0TWSID = KUVREC.KUMSTRID;
    KM0TW01.KM0TWWHE = KUVREC.XWHCD;
    TA1REC.TA1TBLKE = KM0TW01.KM0TWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
  KM0TS76(); /* audit record*/
  ;
  KM0TW03.KM0TW3DA[KM0TWIND] = " ";
  KM0TW01.KM0TWCHG = "Y";
  ;
  if (KM0TM025.KM0TMWHS == " ") /* if no additional whse*/
    return; /* exit*/
  end
  ;
  KM0TW01.KM0TWCID = KM0TM025.KUCCOID;
  KM0TW01.KM0TWSID = KM0TW04.KUMSTRID;
  KM0TW01.KM0TWWHE = KM0TM025.KM0TMWHS;
  KM0TW01.KM0TWDUP = "N";
  ;
  KM0TS22(); /* read psst table*/
  ;
  if (KM0TW01.KM0TWDUP == "Y") /* if record exists*/
    /* next sentence*/
  else
    KM0TW01.KM0TWRJ2 = KM0TW01.KM0TWRJ2 + 1;
    return;
  end
  ;
  if (KUVREC.KUVDCCID == KM0TW01.KUVDCCID[KM0TWINX]
   && KUVREC.KUVDCSID == KM0TW01.KUVDCSID[KM0TWINX])
    /* next sentence*/
  else
    KM0TW01.KM0TWRJ2 = KM0TW01.KM0TWRJ2 + 1;
    return;
  end
  ;
  call "IO1700" ("D ", SQLCA, KUVREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KM0TW01.KM0TWCT2 = KM0TW01.KM0TWCT2 + 1;
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0T";
    TA1REC.TA1LOC = "KM0TS80";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VPSST001";
    KM0TW01.KM0TWCID = KUVREC.KUCCOID;
    KM0TW01.KM0TWSID = KUVREC.KUMSTRID;
    KM0TW01.KM0TWWHE = KUVREC.XWHCD;
    TA1REC.TA1TBLKE = KM0TW01.KM0TWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
  KM0TS76(); /* audit record*/
  ;
end // end KM0TS80

// update temp work file
Function KM0TS85()
  ;
  KM0TW01.KM0TWIND = 1;
  ;
  while (KM0TW01.KM0TWIND < 10)
    if (KM0TM025.KUVDCCID[KM0TWIND] != 0)
      KM0TW04.KUMSTRID = KM0TM025.KUMSTRID[KM0TWIND];
      KM0TW04.KUVDCCID = KM0TM025.KUVDCCID[KM0TWIND];
      KM0TW04.KUVDCSID = KM0TM025.KUVDCSID[KM0TWIND];
      KM0TW04.XXXSTAT = KM0TM025.XXXSTAT[KM0TWIND];
      KM0TW04.ZZZCHGCT = KM0TW01.ZZZCHGCT[KM0TWIND];
      KM0TW03.KM0TW3DA[KM0TWIND] = KM0TW04.KM0TW4RL;
    else
      KM0TW03.KM0TW3DA[KM0TWIND] = " ";
    end
    KM0TW01.KM0TWIND = KM0TW01.KM0TWIND + 1;
  end
  ;
  KM0TW02.KM0TW2RC = 0;
  KM0TW03.KM0TW3LG = 135;
  KM0TW02.KM0TW2CT = KM0TW01.KM0TWCNT;
  KM0TW02.KM0TW2FC = "U";
  KM0TW02.KM0TW2AP = "KM0T";
  ;
  call "TA0050" (KM0TW03, KM0TW02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (KM0TW02.KM0TW2RC == 0)
    /* next sentence*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "TMP";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0T";
    TA1REC.TA1LOC = "KM0TS85";
    KM0TW01.KM0TWWHE = KM0TM025.XWHCD;
    KM0TW01.KM0TWCID = KM0TM025.KUCCOID;
    TA1REC.TA1TBLKE = KM0TW01.KM0TWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
end // end KM0TS85

// purge temp work file
Function KM0TS86()
  ;
  KM0TW02.KM0TW2CT = 0;
  KM0TW02.KM0TW2AP = "KM0T";
  KM0TW02.KM0TW2RC = 0;
  KM0TW02.KM0TW2FC = "P";
  ;
  set KM0TW05 empty;
  KM0TW05.KM0TW5LG = 180;
  ;
  call "TA0050" (KM0TW05, KM0TW02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (KM0TW02.KM0TW2RC != 0)
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "TMP";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0TS86";
    TA1REC.TA1LOC = "PURGING TEMP WORK FILE";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end
  ;
end // end KM0TS86

// load temp work file
Function KM0TS87()
  ;
  KM0TW02.KM0TW2RC = 0;
  KM0TW02.KM0TW2FC = "A";
  KM0TW02.KM0TW2AP = "KM0T";
  set KM0TW05 empty;
  set KM0TW06 empty;
  KM0TW01.KM0TWINX = 1;
  KM0TW01.KM0TWFND = "N";
  ;
  while (KM0TW01.KM0TWINX < 21)
    KM0TS42(); /* select next*/
    if (KM0TW01.KM0TWEND == "N")
      KM0TW06.KUMSTRID = KUVREC.KUMSTRID;
      KM0TW06.KUVDCCID = KUVREC.KUVDCCID;
      KM0TW06.KUVDCSID = KUVREC.KUVDCSID;
      KM0TW06.XXXSTAT = KUVREC.XXXSTAT;
      KM0TW05.KM0TW5DA[KM0TWINX] = KM0TW06.KM0TW6RL;
      KM0TW01.KM0TWTOT = KM0TW01.KM0TWTOT + 1;
    else
      KM0TW01.KM0TWINX = 22;
    end
    KM0TW01.KM0TWINX = KM0TW01.KM0TWINX + 1;
  end
  ;
  if (KM0TW01.KM0TWFND == "Y")
    KM0TW01.KM0TWCNT = KM0TW01.KM0TWCNT + 1;
    KM0TW02.KM0TW2CT = KM0TW01.KM0TWCNT;
    KM0TW05.KM0TW5LG = 180;
    ;
    call "TA0050" (KM0TW05, KM0TW02) {isNoRefresh = yes, isExternal = yes};
    ;
    if (KM0TW02.KM0TW2RC != 0)
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "TMP";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KM0TS87";
      TA1REC.TA1TBLKE = KM0TW01.KM0TWKEY;
      TA1REC.TA1LOC = "LOADING TEMP WORK FILE";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
end // end KM0TS87

// read temp work file
Function KM0TS90()
  ;
  KM0TW02.KM0TW2RC = 0;
  KM0TW05.KM0TW5LG = 180;
  KM0TW01.KM0TWCNT = KM0TW01.KM0TWCNT + 1;
  KM0TW02.KM0TW2CT = KM0TW01.KM0TWCNT;
  KM0TW02.KM0TW2FC = "R";
  KM0TW02.KM0TW2AP = "KM0T";
  ;
  if (KM0TW01.KM0TWCNT >= KM0TW01.KM0TWHC)
    converseLib.validationFailed(206);
    KM0TW01.KM0TWCNT = KM0TW01.KM0TWHC;
  end
  ;
  call "TA0050" (KM0TW05, KM0TW02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (KM0TW02.KM0TW2RC == 0)
    /* next sentence*/
  else
    if (KM0TW02.KM0TW2RC == 7)
      converseLib.validationFailed(206);
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "TMP";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KM0TS90";
      TA1REC.TA1TBLKE = KM0TW01.KM0TWKEY;
      TA1REC.TA1LOC = "READING TEMP WORK FILE";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end
  ;
end // end KM0TS90

// move data to km0tm025
Function KM0TS92()
  ;
  if (KM0TW05.KM0TW5DA[KM0TWINX] == " ")
    KM0TM030.KUMSTRID[KM0TWINX] = 0;
    KM0TM030.KUVDCCID[KM0TWINX] = 0;
    KM0TM030.KUVDCSID[KM0TWINX] = 0;
    set KM0TM030.KUMSTRID[KM0TWINX] skip, invisible;
    set KM0TM030.KUVDCCID[KM0TWINX] skip, invisible;
    set KM0TM030.KUVDCSID[KM0TWINX] skip, invisible;
    set KM0TM030.XXXSTAT[KM0TWINX] skip, invisible;
    return;
  end
  ;
  KM0TW06.KM0TW6RL = KM0TW05.KM0TW5DA[KM0TWINX];
  ;
  KM0TM030.KUMSTRID[KM0TWINX] = KM0TW06.KUMSTRID;
  KM0TM030.KUVDCCID[KM0TWINX] = KM0TW06.KUVDCCID;
  KM0TM030.KUVDCSID[KM0TWINX] = KM0TW06.KUVDCSID;
  KM0TM030.XXXSTAT[KM0TWINX] = KM0TW06.XXXSTAT;
  ;
end // end KM0TS92

// check fastpath and pf keys
Function KM0TS95()
  ;
  if (converseVar.eventKey is enter)
    if (COMMAREA.CATOAP != " ")
      KM0TS86();
      XSEXIT();
      KM0TW01.KM0TWMSG = COMMAREA.CAMSG;
      KM0TW01.KM0TWFST = "Y";
    end
    return;
  end
  ;
  if (converseVar.eventKey is pf1)
    KM0TS86();
    XSPF1();
    KM0TW01.KM0TWMSG = COMMAREA.CAMSG;
    KM0TW01.KM0TWFST = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf3)
    return;
  end
  ;
  if (converseVar.eventKey is pf4)
    KM0TS86();
    XSPF4();
    KM0TW01.KM0TWMSG = COMMAREA.CAMSG;
    KM0TW01.KM0TWFST = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf5
   || converseVar.eventKey is pf6
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18)
    return;
  end
  ;
  if (converseVar.eventKey is pa1 /* pa1 or pa2 will cancel current data*/
   || converseVar.eventKey is pa2) /* entered on screen*/
    converseLib.clearScreen();
     /* reset screen*/
    converseLib.validationFailed(211); /* cancel message*/
    if (KM0TW01.KM0TWCNT > 0) /* reset to current data*/
      KM0TW01.KM0TWCNT = KM0TW01.KM0TWCNT - 1;
    end
  else
    converseLib.validationFailed(3); /* invalid pf key*/
  end
  ;
end // end KM0TS95

// set modified fields to modify
Function KM0TS97()
  ;
  if (KM0TM030.KUCCOID is modified)
    set KM0TM030.KUCCOID modified;
  end
  ;
  if (KM0TM030.XWHCD is modified)
    set KM0TM030.XWHCD modified;
  end
  ;
end // end KM0TS97

// search for customer store
Function KM0TS99()
  ;
  KM0TW01.KM0TWSID = KM0TW01.KM0TWSTR;
  KM0TW01.KM0TWCNT = 0;
  KM0TW01.KM0TWEND = "N";
  ;
  while (KM0TW01.KM0TWEND == "N")
    KM0TS90(); /* read temp work file*/
    if (KM0TW02.KM0TW2RC == 7)
      converseLib.validationFailed(209);
      KM0TW01.KM0TWEND = "Y";
      KM0TW01.KM0TWCNT = 0;
    else
      KM0TW01.KM0TWIND = 1;
      while (KM0TW01.KM0TWIND < 21)
        KM0TW06.KM0TW6RL = KM0TW05.KM0TW5DA[KM0TWIND];
        if (KM0TW06.KUMSTRID == KM0TW01.KM0TWSID)
          KM0TW01.KM0TWSRH[KM0TWIND] = "Y";
          KM0TW01.KM0TWIND = 22;
          KM0TW01.KM0TWEND = "Y";
          KM0TW01.KM0TWCNT = KM0TW01.KM0TWCNT - 1;
        end
        KM0TW01.KM0TWIND = KM0TW01.KM0TWIND + 1;
      end
    end
  end
  ;
end // end KM0TS99

Record KM0TW01 type basicRecord
  5 KM0TWEAF KM0TWEAF ; 
  5 KM0TWESF KM0TWESF ; 
  5 KM0TWSRN KM0TWSRN ; 
  5 KM0TWKEY KM0TWKEY ; 
    10 KM0TWCID KM0TWCID ; 
    10 * char(1) ; 
    10 KM0TWSID KM0TWSID ; 
    10 * char(1) ; 
    10 KM0TWWHE KM0TWWHE ; 
  5 KUMSTRID KUMSTRID [120] ; 
  5 XWHCD XWHCD ; 
  5 XATCD XATCD ; 
  5 KM0TWINX KM0TWINX ; 
  5 KM0TWIND KM0TWIND ; 
  5 KM0TWIDX KM0TWIDX ; 
  5 KM0TWCT1 KM0TWCT1 ; 
  5 KM0TWCT2 KM0TWCT2 ; 
  5 KM0TWRJ1 KM0TWRJ1 ; 
  5 KM0TWRJ2 KM0TWRJ2 ; 
  5 KM0TWRJF KM0TWRJF ; 
  5 KM0TWDUP KM0TWDUP ; 
  5 KM0TWEND KM0TWEND ; 
  5 KM0TWDST KM0TWDST ; 
  5 KM0TWMAT KM0TWMAT ; 
  5 KM0TWMAX KM0TWMAX ; 
  5 KM0TWWH1 KM0TWWH1 ; 
  5 KM0TWWH2 KM0TWWH2 ; 
  5 KM0TWWSW KM0TWWSW ; 
  5 KM0TWMIS KM0TWMIS ; 
  5 KM0TWOPT KM0TWOPT ; 
  5 KM0TWCNT KM0TWCNT ; 
  5 KM0TWHC KM0TWHC ; 
  5 KM0TWCCT KM0TWCCT ; 
  5 KM0TWCT KM0TWCT ; 
  5 KM0TWTOT KM0TWTOT ; 
  5 KM0TWFND KM0TWFND ; 
  5 KM0TWFST KM0TWFST ; 
  5 KM0TWSRH KM0TWSRH [20] ; 
  5 KM0TWMOD KM0TWMOD [9] ; 
  5 KUVDCCID KUVDCCID [9] ; 
  5 KUVDCSID KUVDCSID [9] ; 
  5 ZZZSDT ZZZSDT [9] ; 
  5 ZZZCHGCT ZZZCHGCT [9] ; 
  5 KM0TWCHG KM0TWCHG ; 
  5 KM0TWADD KM0TWADD ; 
  5 CAFRMSYS CAFRMSYS ; 
  5 CAITEM CAITEM ; 
    10 KM0TWSTR KM0TWSTR ; 
    10 * char(16) ; 
  5 KM0TWMSG KM0TWMSG ; 
  5 * char(3) ; 
  5 KM0TWMS1 KM0TWMS1 ; 
    10 KM0TWM01 KM0TWM01 ; 
    10 KM0TWM02 KM0TWM02 ; 
    10 KM0TWM03 KM0TWM03 ; 
    10 KM0TWM04 KM0TWM04 ; 
    10 KM0TWM05 KM0TWM05 ; 
    10 KM0TWM06 KM0TWM06 ; 
    10 KM0TWM07 KM0TWM07 ; 
    10 KM0TWM08 KM0TWM08 ; 
    10 KM0TWM09 KM0TWM09 ; 
    10 KM0TWM10 KM0TWM10 ; 
    10 KM0TWM11 KM0TWM11 ; 
    10 KM0TWM12 KM0TWM12 ; 
    10 * char(3) ; 
  5 KM0TWADR KM0TWADR ; 
    10 KM0TWACL KM0TWACL [32] ; 
  5 * char(1) ; 
  5 XSTCD XSTCD ; 
    10 KM0TWSCL KM0TWSCL [2] ; 
  5 * char(1) ; 
  5 XXXZIP XXXZIP ; 
    10 KM0TWZCL KM0TWZCL [10] ; 
  5 * char(1) ; 
end // end KM0TW01

Record KM0TW02 type basicRecord
  5 KM0TW2RL KM0TW2RL ; 
    10 KM0TW2AP KM0TW2AP ; 
    10 KM0TW2CT KM0TW2CT ; 
    10 KM0TW2FC KM0TW2FC ; 
    10 KM0TW2RC KM0TW2RC ; 
end // end KM0TW02

Record KM0TW03 type basicRecord
  5 KM0TW3RL KM0TW3RL ; 
    10 KM0TW3LG KM0TW3LG ; 
    10 KM0TW3DA KM0TW3DA [9] ; 
    10 KM0TW3FL KM0TW3FL ; 
end // end KM0TW03

Record KM0TW04 type basicRecord
  5 KM0TW4RL KM0TW4RL ; 
    10 KUMSTRID KUMSTRID ; 
    10 KUVDCCID KUVDCCID ; 
    10 KUVDCSID KUVDCSID ; 
    10 XXXSTAT XXXSTAT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end KM0TW04

Record KM0TW05 type basicRecord
  5 KM0TW5RL KM0TW5RL ; 
    10 KM0TW5LG KM0TW5LG ; 
    10 KM0TW5DA KM0TW5DA [20] ; 
    10 KM0TW5FL KM0TW5FL ; 
end // end KM0TW05

Record KM0TW06 type basicRecord
  5 KM0TW6RL KM0TW6RL ; 
    10 KUMSTRID KUMSTRID ; 
    10 KUVDCCID KUVDCCID ; 
    10 KUVDCSID KUVDCSID ; 
    10 XXXSTAT XXXSTAT ; 
end // end KM0TW06

// application
DataItem KM0TW2AP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// count
DataItem KM0TW2CT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// function
DataItem KM0TW2FC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// return code
DataItem KM0TW2RC num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KM0TW2RL char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record data
DataItem KM0TW3DA char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler
DataItem KM0TW3FL char(260)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record length
DataItem KM0TW3LG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KM0TW3RL char(399)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KM0TW4RL char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record data
DataItem KM0TW5DA char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler
DataItem KM0TW5FL char(215)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record length
DataItem KM0TW5LG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KM0TW5RL char(399)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KM0TW6RL char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// address columns
DataItem KM0TWACL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// add flag
DataItem KM0TWADD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// address
DataItem KM0TWADR char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current count
DataItem KM0TWCCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change flag
DataItem KM0TWCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// company id
DataItem KM0TWCID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// temp storage record count
DataItem KM0TWCNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// column count
DataItem KM0TWCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// counter 1
DataItem KM0TWCT1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// counter 2
DataItem KM0TWCT2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// distrbution center flag
DataItem KM0TWDST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// duplicate flag
DataItem KM0TWDUP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of application flag
DataItem KM0TWEAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of cursor flag
DataItem KM0TWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of screen flag
DataItem KM0TWESF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// found kuvrec
DataItem KM0TWFND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time thru switch
DataItem KM0TWFST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold count
DataItem KM0TWHC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen index
DataItem KM0TWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen index
DataItem KM0TWIND smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen index
DataItem KM0TWINX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// table key
DataItem KM0TWKEY char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse
DataItem KM0TWM01 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first warehouse
DataItem KM0TWM02 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// add
DataItem KM0TWM03 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// add cnt for 1st whse
DataItem KM0TWM04 num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reject
DataItem KM0TWM05 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reject cnt for 1st whse
DataItem KM0TWM06 num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// warehouse
DataItem KM0TWM07 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// second warehouse
DataItem KM0TWM08 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// add
DataItem KM0TWM09 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// add cnt for 2nd whse
DataItem KM0TWM10 num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reject
DataItem KM0TWM11 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reject cnt for 2nd whse
DataItem KM0TWM12 num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// except store match flag
DataItem KM0TWMAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max reject store flag
DataItem KM0TWMAX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer missing switch
DataItem KM0TWMIS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// modified flag
DataItem KM0TWMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// results of maintenance msg
DataItem KM0TWMS1 char(69)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// results of maintenance msg
DataItem KM0TWMSG char(69)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen option
DataItem KM0TWOPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reject counter 1
DataItem KM0TWRJ1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reject counter 2
DataItem KM0TWRJ2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reject flag
DataItem KM0TWRJF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// state columns
DataItem KM0TWSCL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// store id
DataItem KM0TWSID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// search switch
DataItem KM0TWSRH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen indicator flag
DataItem KM0TWSRN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// store id
DataItem KM0TWSTR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// store total
DataItem KM0TWTOT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// warehouse 1
DataItem KM0TWWH1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse 2
DataItem KM0TWWH2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse code
DataItem KM0TWWHE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse switch
DataItem KM0TWWSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// zip columns
DataItem KM0TWZCL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

