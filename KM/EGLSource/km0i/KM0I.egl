package km0i;

import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.*;
import corpcom6.SQLCA;
import corpcom7.XXXSTAT;
import ku.common.KUCREC;
import ku.common.KULAAID;
import ku.common.KULREC;
import ku.common.KUMREC;
import ku.common.KUMSTRID;
import ta.common.TA1REC;
//*** PROGRAM=KM0I ****
// ------------  km0i - address association inquiry  ----------
// 
// overview:  this application will display address id and
//            what levels the address is associated with.
// 
// date written: 01/88
// author:       c. trouw
// 
// ************************************************************
//                 maintenance history log
// ------------------------------------------------------------
//  date    int   modules            description
// ------------------------------------------------------------
// 012688   clt               initialization
// 020588   clt               fix pf7 & pf8 after fields modif.
// 111788   jbw               added noncsp opt to calls
// 111788   jbw               added xssegtr logic
// 011690   jfiat             db changes
// 032990   dsalzw            db changes
// 101590   dsalzw            change blgrp to company
// 9-july-1993          dlegg     Change call to TA0020 with
//                                ABND to RETN. KM0IS06,S08,
//                                S25,S30.
// 15-july-1993         dlegg     Add sgrp to initialize all
//                                records used by this appl.
// 10/01/93 CHELLM  CSP 4.1 Conversion.
// 11/12/93 CHELLM  Database Changes: VADDR001, VCMPNY01.
// *********************
Program KM0I type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KM0IW01 KM0IW01; // record
  KM0IW02 KM0IW02; // record
  KM0IW03 KM0IW03; // record
  KUCREC KUCREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KM0IM.KM0IM005 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KM0I000: KM0I000();

    exit program;

    KM0I005: KM0I005();
  end // end main
end // end KM0I

// main process
Function KM0I000()

  XSENTRY();

  XSSEGTR(); /* set segmented trans id*/

  KM0IS-INIT-RECS();

  KM0IW01.KM0IWKEY = COMMAREA.CAITEM;

  if (KM0IW01.KM0IWKEY is numeric)
    KM0IM005.KUCCOID = KM0IW01.KM0IWCID;
  else
    KM0IM005.KUCCOID = 0;
  end

  set KM0IM005.KUCCOID modified;

  KM0IM005.KM0IMDT = VGVar.currentShortGregorianDate;
  converseVar.commitOnConverse = 1;
  VGVar.handleHardIOErrors = 1;
  KM0IW01.KM0IWIDX = 1;
  KM0IW01.KM0IWFST = "Y";
  KM0IW01.KM0IWEAF = "Y";

  while (KM0IW01.KM0IWEAF == "Y")
    KM0I005();
  end

  COMMAREA.CATOAP = COMMAREA.CAFROMAP;
  XSEXIT();

end // end KM0I000

// address association screen
Function KM0I005()

  if (KM0IW01.KM0IWFST == "Y")
    KM0IW01.KM0IWFST = "N";
  else
    if (converseVar.validationMsgNum == 0)
      KM0IS01(); /* read temp work file*/
    end
  end

  KM0IW01.KM0IWIDX = 1;
  while (KM0IW01.KM0IWIDX < 21)
    if (KM0IM005.KM0IMASC[KM0IWIDX] == " ")
      set KM0IM005.KM0IMSEL[KM0IWIDX] skip, invisible;
    end
    KM0IW01.KM0IWIDX = KM0IW01.KM0IWIDX + 1;
  end

  if (KM0IW01.KM0IWDSP == "Y")
    KM0IW01.KM0IWTTL = KM0IW01.KM0IWTOT;
    KM0IW01.KM0IWTNM = " ADDRESSES SELECTED";
    KM0IW01.KM0IWMSG = KM0IW01.KM0IWTTE;
    KM0IW01.KM0IWTOT = 0;
    KM0IW01.KM0IWDSP = "N";
  end

  KM0IM005.KM0IMMSG = KM0IW01.KM0IWMSG;
  KM0IW01.KM0IWMSG = " ";

  converse KM0IM005 ;

  KM0IW01.KM0IWCID = KM0IM005.KUCCOID;
  COMMAREA.CATOAP = KM0IM005.CATOAP;
  COMMAREA.CAITEM = KM0IM005.CAITEM;

  KM0IS02(); /* check fast path and pf keys*/

  if (KM0IW01.KM0IWSEL == "Y")
    KM0IM005.KUCCOAID = 0;
    KM0IM005.KM0IMADR[1] = " ";
    KM0IM005.KM0IMADR[2] = " ";
    KM0IM005.KM0IMADR[3] = " ";
    KM0IM005.KM0IMADR[4] = " ";
    KM0IW01.KM0IWSEL = "N";
  end

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2)
    converseLib.clearScreen();
    
    return;
  end

  if (converseVar.validationMsgNum != 0
   || KM0IW01.KM0IWMSG != " ")
    KM0IS03(); /* set modified fields modified*/
    return;
  end

  set KM0IM005.KUCCOID cursor, initialAttributes;
  set KM0IM005.KUCCOAID initialAttributes;

  KM0IW01.KM0IWIDX = 5;
  while (KM0IW01.KM0IWIDX > 0)
    if (KM0IM005.KM0IMOPT[KM0IWIDX] == " "
     || KM0IM005.KM0IMOPT[KM0IWIDX] == "X")
      if (KM0IM005.KM0IMOPT[KM0IWIDX] is modified)
        KM0IW01.KM0IWMOD = "Y";
      end
      set KM0IM005.KM0IMOPT[KM0IWIDX] initialAttributes;
    else
      converseLib.validationFailed(229);
      set KM0IM005.KM0IMOPT[KM0IWIDX] cursor, modified, bold;
    end
    KM0IW01.KM0IWIDX = KM0IW01.KM0IWIDX - 1;
  end

  if (KM0IM005.KUCCOAID is modified
   || KM0IM005.KUCCOID is modified)
    KM0IW01.KM0IWMOD = "Y";
    if (KM0IM005.KUCCOAID > 0)
      KULREC.KUCCOID = KM0IM005.KUCCOID;
      KULREC.KULAAID = KM0IM005.KUCCOAID;
      KM0IS06(); /* ; edit address id*/
    else
      KM0IM005.KM0IMADR[1] = " ";
      KM0IM005.KM0IMADR[2] = " ";
      KM0IM005.KM0IMADR[3] = " ";
      KM0IM005.KM0IMADR[4] = " ";
    end
    KM0IW01.KM0IWADR = KM0IM005.KUCCOAID;
  end

  if (KM0IM005.KUCCOID == 0)
    KM0IW01.KM0IWMOD = "Y";
    converseLib.validationFailed(25);
    set KM0IM005.KUCCOID cursor, modified, bold;
  else
    if (KM0IM005.KUCCOID is modified) /* if company id modified*/
      KM0IW01.KM0IWMOD = "Y";
      KUCREC.KUCCOID = KM0IM005.KUCCOID;
      KM0IS08(); /* edit company*/
    end
  end

  if (KM0IW01.KM0IWMOD == "Y")
    KM0IW01.KM0IWIDX = 1;
    while (KM0IW01.KM0IWIDX < 21)
      KM0IM005.KM0IMSEL[KM0IWIDX] = " ";
      KM0IW01.KM0IWIDX = KM0IW01.KM0IWIDX + 1;
    end
  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

  KM0IW01.KM0IWIDX = 20;
  while (KM0IW01.KM0IWIDX > 0)
    if (KM0IM005.KM0IMSEL[KM0IWIDX] == "V")
      KM0IM005.KM0IMSEL[KM0IWIDX] = " ";
    end
    if (KM0IM005.KM0IMSEL[KM0IWIDX] == " "
     || KM0IM005.KM0IMSEL[KM0IWIDX] == "S")
      set KM0IM005.KM0IMSEL[KM0IWIDX] initialAttributes;
    else
      converseLib.validationFailed(224);
      set KM0IM005.KM0IMSEL[KM0IWIDX] cursor, modified, bold;
      return;
    end
    if (KM0IM005.KM0IMSEL[KM0IWIDX] == "S"
     && KM0IM005.KUCCOAID > 0)
      converseLib.validationFailed(230);
      set KM0IM005.KM0IMSEL[KM0IWIDX] cursor, modified, bold;
      return;
    end
    KM0IW01.KM0IWIDX = KM0IW01.KM0IWIDX - 1;
  end

  if (KM0IM005.KUCCOID is modified
   || KM0IM005.KUCCOAID is modified
   || KM0IM005.KM0IMOPT[1] is modified
   || KM0IM005.KM0IMOPT[2] is modified
   || KM0IM005.KM0IMOPT[3] is modified
   || KM0IM005.KM0IMOPT[4] is modified
   || KM0IM005.KM0IMOPT[5] is modified)
    set KM0IW03 empty;
    KM0IS05(); /* purge temp work file*/
    KM0IW01.KM0IWOPT[1] = KM0IM005.KM0IMOPT[1];
    KM0IW01.KM0IWOPT[2] = KM0IM005.KM0IMOPT[2];
    KM0IW01.KM0IWOPT[3] = KM0IM005.KM0IMOPT[3];
    KM0IW01.KM0IWOPT[4] = KM0IM005.KM0IMOPT[4];
    KM0IW01.KM0IWOPT[5] = KM0IM005.KM0IMOPT[5];
    KM0IW01.KM0IWCNT = 0;
    KM0IW01.KM0IWIDX = 0;
    if (KM0IM005.KM0IMOPT[1] == "X"
     || KM0IM005.KM0IMOPT[2] == "X"
     || KM0IM005.KM0IMOPT[3] == "X")
      if (KM0IM005.KM0IMOPT[4] == " "
       && KM0IM005.KM0IMOPT[5] == " ")
        KM0IS10(); /* company address id's*/
        KM0IS20(); /* build temp storage*/
        if (converseVar.validationMsgNum != 0)
          set KM0IM005.KUCCOID modified;
          return;
        end
      end
    end
    if (KM0IM005.KM0IMOPT[1] == " "
     && KM0IM005.KM0IMOPT[2] == " "
     && KM0IM005.KM0IMOPT[3] == " "
     && KM0IM005.KM0IMOPT[4] == " "
     && KM0IM005.KM0IMOPT[5] == " ")
      KM0IW01.KM0IWOPT[1] = "X";
      KM0IW01.KM0IWOPT[2] = "X";
      KM0IW01.KM0IWOPT[3] = "X";
      KM0IW01.KM0IWOPT[4] = "X";
      KM0IW01.KM0IWOPT[5] = "X";
      KM0IS10(); /* company address id's*/
      KM0IS25(); /* select all stores*/
      if (converseVar.validationMsgNum != 0)
        set KM0IM005.KUCCOID modified;
        return;
      end
    end
    if (KM0IM005.KM0IMOPT[1] == "X"
     || KM0IM005.KM0IMOPT[2] == "X"
     || KM0IM005.KM0IMOPT[3] == "X")
      if (KM0IM005.KM0IMOPT[4] == "X"
       || KM0IM005.KM0IMOPT[5] == "X")
        KM0IS10(); /* company address id's*/
        KM0IS25(); /* select all stores*/
        if (converseVar.validationMsgNum != 0)
          set KM0IM005.KUCCOID modified;
          return;
        end
      end
    end
    if (KM0IM005.KM0IMOPT[1] == " "
     && KM0IM005.KM0IMOPT[2] == " "
     && KM0IM005.KM0IMOPT[3] == " ")
      if (KM0IM005.KM0IMOPT[4] == "X"
       || KM0IM005.KM0IMOPT[5] == "X")
        KM0IS25(); /* select all stores*/
        if (converseVar.validationMsgNum != 0)
          set KM0IM005.KUCCOID modified;
          return;
        end
      end
    end
    KM0IW01.KM0IWHC = KM0IW01.KM0IWCNT;
    KM0IW01.KM0IWCNT = 1;
  end

  if (KM0IW01.KM0IWMOD == "Y")
    KM0IW01.KM0IWMOD = "N";
    return;
  end

  if (converseVar.eventKey is enter)
    KM0IW01.KM0IWIDX = 1;
    while (KM0IW01.KM0IWIDX < 21)
      if (KM0IM005.KM0IMSEL[KM0IWIDX] == "S")
        KM0IW01.KM0IWSEL = "Y";
        KM0IM005.KM0IMSEL[KM0IWIDX] = "V";
        KM0IM005.KUCCOAID = KM0IM005.KULAAID[KM0IWIDX];
        KULREC.KULAAID = KM0IM005.KULAAID[KM0IWIDX];
        KULREC.KUCCOID = KM0IM005.KUCCOID;
        KM0IS06(); /* ; edit address id*/
        KM0IW01.KM0IWIDX = 21;
      end
      KM0IW01.KM0IWIDX = KM0IW01.KM0IWIDX + 1;
    end
    return;
  else
    KM0IW01.KM0IWIDX = 1;
    while (KM0IW01.KM0IWIDX < 21)
      KM0IW01.KM0IWSEL = "N";
      KM0IM005.KM0IMSEL[KM0IWIDX] = " ";
      KM0IW01.KM0IWIDX = KM0IW01.KM0IWIDX + 1;
    end
  end

  if (converseVar.eventKey is pf7)
    if (KM0IW01.KM0IWCNT > 1)
      KM0IW01.KM0IWCNT = KM0IW01.KM0IWCNT - 1;
    else
      converseLib.validationFailed(208);
    end
    return;
  end

  if (converseVar.eventKey is pf8)
    KM0IW01.KM0IWCNT = KM0IW01.KM0IWCNT + 1;
    return;
  end

  if (converseVar.eventKey is pf17)
    KM0IW01.KM0IWCNT = 1;
    return;
  end

  if (converseVar.eventKey is pf18)
    KM0IW01.KM0IWCNT = KM0IW01.KM0IWHC;
    return;
  end

end // end KM0I005

// Init records
Function KM0IS-INIT-RECS()
  /* ******************************************************************/
  /* *               Initialize records used by KM0I*/
  /* ******************************************************************/

  set KM0IW01 empty;

  KM0IW01.KM0IWCID = 0;

  set KM0IW02 empty;
  set KM0IW03 empty;
  set KUCREC empty;
  set KULREC empty;
  set KUMREC empty;
  set SQLCA empty;
  set TA1REC empty;
end // end KM0IS-INIT-RECS

// read temp work file
Function KM0IS01()

  KM0IW02.KM0IW2RC = 0;
  KM0IW03.KM0IW3LG = 160;
  KM0IW02.KM0IW2CT = KM0IW01.KM0IWCNT;
  KM0IW02.KM0IW2FC = "R";
  KM0IW02.KM0IW2AP = "KM0I";

  if (KM0IW01.KM0IWCNT > KM0IW01.KM0IWHC)
    converseLib.validationFailed(206); /* end of data*/
    KM0IW01.KM0IWCNT = KM0IW01.KM0IWHC;
    return;
  end

  call "TA0050" (KM0IW03, KM0IW02) {isNoRefresh = yes, isExternal = yes};

  if (KM0IW02.KM0IW2RC == 0)
    /* next sentence*/
  else
    if (KM0IW02.KM0IW2RC == 7)
      converseLib.validationFailed(206); /* end of data*/
      KM0IW01.KM0IWCNT = KM0IW01.KM0IWHC;
      return;
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      set KM0IM005.KUCCOID modified;
      converseLib.validationFailed(228);
      return;
    end
  end

  KM0IW01.KM0IWIDX = 1;
  while (KM0IW01.KM0IWIDX < 21)
    if (KM0IW03.KM0IWASC[KM0IWIDX] == " ")
      KM0IM005.KULAAID[KM0IWIDX] = 0;
      KM0IM005.KM0IMASC[KM0IWIDX] = " ";
      KM0IM005.KM0IMKEY[KM0IWIDX] = " ";
      KM0IM005.XXXSTAT[KM0IWIDX] = " ";
      KM0IM005.KM0IMSEL[KM0IWIDX] = " ";
    else
      KM0IM005.KULAAID[KM0IWIDX] = KM0IW03.KULAAID[KM0IWIDX];
      KM0IW01.KM0IWCST = " ";
      KM0IW01.KM0IWCMY = KUCREC.KUCCOID;
      KM0IM005.XXXSTAT[KM0IWIDX] = KM0IW03.XXXSTAT[KM0IWIDX];
      if (KM0IW03.KM0IWASC[KM0IWIDX] == "1")
        KM0IM005.KM0IMASC[KM0IWIDX] = "HDQT";
      else
        if (KM0IW03.KM0IWASC[KM0IWIDX] == "2")
          KM0IM005.KM0IMASC[KM0IWIDX] = "ALT  ";
        else
          if (KM0IW03.KM0IWASC[KM0IWIDX] == "3")
            KM0IM005.KM0IMASC[KM0IWIDX] = "BILL  ";
          else
            if (KM0IW03.KM0IWASC[KM0IWIDX] == "4")
              KM0IW01.KM0IWSTR = KM0IW03.KUMSTRID[KM0IWIDX];
              KM0IW01.KM0IWPER = ".";
              KM0IM005.KM0IMASC[KM0IWIDX] = "STORE";
            else
              KM0IW01.KM0IWSTR = KM0IW03.KUMSTRID[KM0IWIDX];
              KM0IW01.KM0IWPER = ".";
              KM0IM005.KM0IMASC[KM0IWIDX] = "SHIP ";
            end
          end
        end
      end
      KM0IM005.KM0IMKEY[KM0IWIDX] = KM0IW01.KM0IWCST;
    end
    KM0IW01.KM0IWIDX = KM0IW01.KM0IWIDX + 1;
  end

end // end KM0IS01

// check fastpath and pf keys
Function KM0IS02()

  if (converseVar.eventKey is enter)
    if (COMMAREA.CATOAP != " ") /* fastpath out*/
      KM0IS05(); /* purge temp work file*/
      if (COMMAREA.CAITEM == " ")
        COMMAREA.CAITEM = KM0IW01.KM0IWKEY;
      end
      if (COMMAREA.CATOSYS == "KM"
       || COMMAREA.CATOSYS == "KI"
       || COMMAREA.CATOSYS == "KU"
       || COMMAREA.CATOSYS == "KA")
        /* next sentence*/
      else
        COMMAREA.CAITEM = " ";
      end
      XSEXIT();
      KM0IW01.KM0IWMSG = COMMAREA.CAMSG;
    end
    return;
  end

  if (converseVar.eventKey is pf1) /* help*/
    KM0IS05(); /* purge temp work file*/
    XSPF1();
    KM0IW01.KM0IWMSG = COMMAREA.CAMSG;
    return;
  end

  if (converseVar.eventKey is pf3) /* prior menu*/
    KM0IS05(); /* purge temp work file*/
    COMMAREA.CATOAP = "KM0A";
    XSEXIT();
    KM0IW01.KM0IWMSG = COMMAREA.CAMSG;
    return;
  end

  if (converseVar.eventKey is pf4) /* main menu*/
    KM0IS05(); /* purge temp work file*/
    XSPF4();
    KM0IW01.KM0IWMSG = COMMAREA.CAMSG;
    return;
  end

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2)
    converseLib.validationFailed(211); /* cancelled message*/
    return;
  end

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18)
    return;
  end

  converseLib.validationFailed(3); /* invalid pf key*/

end // end KM0IS02

// set fields modified
Function KM0IS03()

  if (KM0IM005.KUCCOID is modified)
    set KM0IM005.KUCCOID modified;
  end

  if (KM0IM005.KUCCOAID is modified)
    set KM0IM005.KUCCOAID modified;
  end

  KM0IW01.KM0IWIDX = 1;
  while (KM0IW01.KM0IWIDX < 6)
    if (KM0IM005.KM0IMOPT[KM0IWIDX] is modified)
      set KM0IM005.KM0IMOPT[KM0IWIDX] modified;
    end
    KM0IW01.KM0IWIDX = KM0IW01.KM0IWIDX + 1;
  end

  KM0IW01.KM0IWIDX = 1;
  while (KM0IW01.KM0IWIDX < 21)
    if (KM0IM005.KM0IMSEL[KM0IWIDX] is modified)
      set KM0IM005.KM0IMSEL[KM0IWIDX] modified;
    end
    KM0IW01.KM0IWIDX = KM0IW01.KM0IWIDX + 1;
  end

end // end KM0IS03

// purge temp work file
Function KM0IS05()

  KM0IW02.KM0IW2CT = 0;
  KM0IW02.KM0IW2AP = "KM0I";
  KM0IW02.KM0IW2RC = 0;
  KM0IW02.KM0IW2FC = "P"; /* purge temp work file*/

  set KM0IW03 empty;
  KM0IW03.KM0IW3LG = 160;

  call "TA0050" (KM0IW03, KM0IW02) {isNoRefresh = yes, isExternal = yes};

  if (KM0IW02.KM0IW2RC != 0) /* error encountered*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    converseLib.validationFailed(228);
  end

end // end KM0IS05

// edit address id
Function KM0IS06()

  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set KM0IM005.KUCCOAID cursor, modified, bold;
      converseLib.validationFailed(14);
      return;
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KM0IS06";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VADDR001";
      KM0IW01.KM0IWCID = KULREC.KUCCOID;
      TA1REC.TA1TBLKE = KM0IW01.KM0IWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end

  KM0IS07(); /* SET UP ADDRESS*/

end // end KM0IS06

// set up address
Function KM0IS07()

  KM0IW01.KM0IWIND = 1;
  KM0IW01.KM0IWCT = 0;
  KM0IW01.KM0IWADD = KULREC.XXXCITY;

  while (KM0IW01.KM0IWIND < 28)
    if (KM0IW01.KM0IWACL[KM0IWIND] == " ")
      KM0IW01.KM0IWCT = KM0IW01.KM0IWCT + 1;
      if (KM0IW01.KM0IWCT > 2)
        KM0IW01.KM0IWIND = KM0IW01.KM0IWIND - 2;
        KM0IW01.KM0IWACL[KM0IWIND] = ",";
        if (KULREC.XSTCD != " ")
          KM0IW01.KM0IWST = KULREC.XSTCD;
          KM0IW01.KM0IWIND = KM0IW01.KM0IWIND + 2;
          KM0IW01.KM0IWACL[KM0IWIND] = KM0IW01.KM0IWSCL[1];
          KM0IW01.KM0IWIND = KM0IW01.KM0IWIND + 1;
          KM0IW01.KM0IWACL[KM0IWIND] = KM0IW01.KM0IWSCL[2];
          if (KM0IW01.KM0IWIND < 25)
            KM0IW01.KM0IWIND = KM0IW01.KM0IWIND + 2;
            KM0IW01.KM0IWZIP = KULREC.XXXZIP;
            KM0IW01.KM0IWIZX = 1;
            while (KM0IW01.KM0IWIZX < 6)
              KM0IW01.KM0IWACL[KM0IWIND] = KM0IW01.KM0IWZCL[KM0IWIZX];
              KM0IW01.KM0IWIZX = KM0IW01.KM0IWIZX + 1;
              KM0IW01.KM0IWIND = KM0IW01.KM0IWIND + 1;
            end
          end
        else
          if (KM0IW01.KM0IWIND < 26)
            KM0IW01.KM0IWIND = KM0IW01.KM0IWIND + 2;
          else
            KM0IW01.KM0IWIND = KM0IW01.KM0IWIND + 1;
          end
          KM0IW01.KM0IWCTY = KULREC.XCTCD;
          KM0IW01.KM0IWICX = 1;
          while (KM0IW01.KM0IWICX < 5)
            KM0IW01.KM0IWACL[KM0IWIND] = KM0IW01.KM0IWCCL[KM0IWICX];
            KM0IW01.KM0IWICX = KM0IW01.KM0IWICX + 1;
            KM0IW01.KM0IWIND = KM0IW01.KM0IWIND + 1;
          end
        end
        KM0IW01.KM0IWIND = 30;
      end
    else
      KM0IW01.KM0IWCT = 0;
    end
    KM0IW01.KM0IWIND = KM0IW01.KM0IWIND + 1;
  end

  if (KULREC.XXX-ADDR1 != " ")
    KM0IM005.KM0IMADR[1] = KULREC.XXX-ADDR1;
    KM0IM005.KM0IMADR[2] = KULREC.XXX-ADDR2;
    KM0IM005.KM0IMADR[3] = KULREC.XXX-ADDR3;
    KM0IM005.KM0IMADR[4] = KM0IW01.KM0IWADD;
  else
    if (KULREC.XXX-ADDR2 != " ")
      KM0IM005.KM0IMADR[1] = KULREC.XXX-ADDR2;
      KM0IM005.KM0IMADR[2] = KULREC.XXX-ADDR3;
      KM0IM005.KM0IMADR[3] = KM0IW01.KM0IWADD;
      KM0IM005.KM0IMADR[4] = " ";
    else
      KM0IM005.KM0IMADR[1] = KULREC.XXX-ADDR3;
      KM0IM005.KM0IMADR[2] = KM0IW01.KM0IWADD;
      KM0IM005.KM0IMADR[3] = " ";
      KM0IM005.KM0IMADR[4] = " ";
    end
  end

end // end KM0IS07

// check if company exists
Function KM0IS08()

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    KM0IM005.KUCCONM = KUCREC.KUCCONM;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(25);
      set KM0IM005.KUCCOID cursor, modified, bold;
      return;
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KM0IS08";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      KM0IW01.KM0IWCID = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KM0IW01.KM0IWKEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end

end // end KM0IS08

// company address id's
Function KM0IS10()

  if (KM0IW01.KM0IWOPT[1] == "X")
    if (KM0IW01.KM0IWADR == 0
     || KM0IW01.KM0IWADR == KUCREC.KUCCOAID)
      KM0IW01.KM0IWIDX = KM0IW01.KM0IWIDX + 1;
      KM0IW01.KM0IWTOT = KM0IW01.KM0IWTOT + 1;
      KM0IW03.KULAAID[KM0IWIDX] = KUCREC.KUCCOAID;
      KM0IW03.XXXSTAT[KM0IWIDX] = KUCREC.XXXSTAT;
      KM0IW03.KM0IWASC[KM0IWIDX] = "1";
    end
  end

  if (KM0IW01.KM0IWOPT[2] == "X")
    if (KUCREC.KUCCCAID > 0)
      if (KM0IW01.KM0IWADR == 0
       || KM0IW01.KM0IWADR == KUCREC.KUCCCAID)
        KM0IW01.KM0IWIDX = KM0IW01.KM0IWIDX + 1;
        KM0IW01.KM0IWTOT = KM0IW01.KM0IWTOT + 1;
        KM0IW03.KULAAID[KM0IWIDX] = KUCREC.KUCCCAID;
        KM0IW03.XXXSTAT[KM0IWIDX] = KUCREC.XXXSTAT;
        KM0IW03.KM0IWASC[KM0IWIDX] = "2";
      end
    end
  end

  if (KM0IW01.KM0IWOPT[3] == "X")
    if (KM0IW01.KM0IWADR == 0
     || KM0IW01.KM0IWADR == KUCREC.KUCBLAID)
      KM0IW01.KM0IWIDX = KM0IW01.KM0IWIDX + 1;
      KM0IW01.KM0IWTOT = KM0IW01.KM0IWTOT + 1;
      KM0IW03.KULAAID[KM0IWIDX] = KUCREC.KUCBLAID;
      KM0IW03.XXXSTAT[KM0IWIDX] = KUCREC.XXXSTAT;
      KM0IW03.KM0IWASC[KM0IWIDX] = "3";
    end
  end

end // end KM0IS10

// load temp work file
Function KM0IS20()

  set KM0IW02 empty;

  KM0IW02.KM0IW2RC = 0;
  KM0IW02.KM0IW2FC = "A";
  KM0IW02.KM0IW2AP = "KM0I";
  KM0IW01.KM0IWCNT = KM0IW01.KM0IWCNT + 1;
  KM0IW02.KM0IW2CT = KM0IW01.KM0IWCNT;
  KM0IW03.KM0IW3LG = 160;

  call "TA0050" (KM0IW03, KM0IW02) {isNoRefresh = yes, isExternal = yes};

  if (KM0IW02.KM0IW2RC != 0)
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    KM0IW01.KM0IWEND = "Y";
    converseLib.validationFailed(228);
    return;
  end

  set KM0IW03 empty;
  KM0IW01.KM0IWIDX = 1;
  KM0IW01.KM0IWDSP = "Y";

end // end KM0IS20

// select all stores
Function KM0IS25()

  KUMREC.KUCCOID = KUCREC.KUCCOID;

  call "IO0340" ("SS", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0IS25";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VSTORE01";
    KM0IW01.KM0IWCID = KUMREC.KUCCOID;
    TA1REC.TA1TBLKE = KM0IW01.KM0IWKEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end

  KM0IW01.KM0IWEND = "N";
  while (KM0IW01.KM0IWEND == "N")
    KM0IS30(); /* select next store*/
  end

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

end // end KM0IS25

// select next store
Function KM0IS30()

  call "IO0340" ("SN", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KM0IS20();
      KM0IW01.KM0IWEND = "Y";
      return;
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KM0IS30";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VSTORE01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end

  if (KM0IW01.KM0IWOPT[4] == "X")
    if (KM0IW01.KM0IWADR == 0
     || KM0IW01.KM0IWADR == KUMREC.KUMSTAID)
      KM0IW01.KM0IWIDX = KM0IW01.KM0IWIDX + 1;
      KM0IW01.KM0IWTOT = KM0IW01.KM0IWTOT + 1;
      if (KM0IW01.KM0IWIDX > 20)
        KM0IS20();
        if (converseVar.validationMsgNum != 0)
          return;
        end
      end
      KM0IW03.KUMSTRID[KM0IWIDX] = KUMREC.KUMSTRID;
      KM0IW03.KULAAID[KM0IWIDX] = KUMREC.KUMSTAID;
      KM0IW03.XXXSTAT[KM0IWIDX] = KUMREC.XXXSTAT;
      KM0IW03.KM0IWASC[KM0IWIDX] = "4";
    end
  end

  if (KM0IW01.KM0IWOPT[5] == "X")
    if (KM0IW01.KM0IWADR == 0
     || KM0IW01.KM0IWADR == KUMREC.KUMSHAID)
      KM0IW01.KM0IWIDX = KM0IW01.KM0IWIDX + 1;
      KM0IW01.KM0IWTOT = KM0IW01.KM0IWTOT + 1;
      if (KM0IW01.KM0IWIDX > 20)
        KM0IS20();
        if (converseVar.validationMsgNum != 0)
          return;
        end
      end
      KM0IW03.KUMSTRID[KM0IWIDX] = KUMREC.KUMSTRID;
      KM0IW03.KULAAID[KM0IWIDX] = KUMREC.KUMSHAID;
      KM0IW03.XXXSTAT[KM0IWIDX] = KUMREC.XXXSTAT;
      KM0IW03.KM0IWASC[KM0IWIDX] = "5";
    end
  end

end // end KM0IS30

Record KM0IW01 type basicRecord
  5 KM0IWGRP KM0IWGRP ; 
    10 KM0IWEAF KM0IWEAF ; 
    10 KM0IWMSG KM0IWMSG ; 
    10 KM0IWIDX KM0IWIDX ; 
    10 KM0IWKEY KM0IWKEY ; 
      15 KM0IWCID KM0IWCID ; 
    10 KM0IWCNT KM0IWCNT ; 
    10 KM0IWHC KM0IWHC ; 
    10 KM0IWEND KM0IWEND ; 
    10 KM0IWFST KM0IWFST ; 
    10 KM0IWCST KM0IWCST ; 
      15 KM0IWCMY KM0IWCMY ; 
      15 KM0IWPER KM0IWPER ; 
      15 KM0IWSTR KM0IWSTR ; 
    10 KM0IWOPT KM0IWOPT [5] ; 
    10 KM0IWADR KM0IWADR ; 
    10 KM0IWIND KM0IWIND ; 
    10 KM0IWCT KM0IWCT ; 
    10 KM0IWIZX KM0IWIZX ; 
    10 KM0IWICX KM0IWICX ; 
    10 KM0IWSEL KM0IWSEL ; 
    10 KM0IWMOD KM0IWMOD ; 
    10 KM0IWDSP KM0IWDSP ; 
    10 KM0IWTOT KM0IWTOT ; 
    10 * char(3) ; 
    10 KM0IWTTE KM0IWTTE ; 
      15 KM0IWTTL KM0IWTTL ; 
      15 KM0IWTNM KM0IWTNM ; 
    10 * char(1) ; 
    10 KM0IWADD KM0IWADD ; 
      15 KM0IWACL KM0IWACL [30] ; 
    10 * char(1) ; 
    10 KM0IWST KM0IWST ; 
      15 KM0IWSCL KM0IWSCL [2] ; 
    10 * char(3) ; 
    10 KM0IWZIP KM0IWZIP ; 
      15 KM0IWZCL KM0IWZCL [5] ; 
    10 * char(1) ; 
    10 KM0IWCTY KM0IWCTY ; 
      15 KM0IWCCL KM0IWCCL [4] ; 
end // end KM0IW01

Record KM0IW02 type basicRecord
  5 KM0IW2RL KM0IW2RL ; 
    10 KM0IW2AP KM0IW2AP ; 
    10 KM0IW2CT KM0IW2CT ; 
    10 KM0IW2FC KM0IW2FC ; 
    10 KM0IW2RC KM0IW2RC ; 
end // end KM0IW02

Record KM0IW03 type basicRecord
  5 KM0IW3RL KM0IW3RL ; 
    10 KM0IW3LG KM0IW3LG ; 
    10 KUMSTRID KUMSTRID [20] ; 
    10 KULAAID KULAAID [20] ; 
    10 KM0IWASC KM0IWASC [20] ; 
    10 XXXSTAT XXXSTAT [20] ; 
end // end KM0IW03

// application
DataItem KM0IW2AP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// count
DataItem KM0IW2CT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// function
DataItem KM0IW2FC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// return code
DataItem KM0IW2RC num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KM0IW2RL char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record length
DataItem KM0IW3LG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KM0IW3RL char(164)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KM0IWACL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KM0IWADD char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// address id
DataItem KM0IWADR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// association
DataItem KM0IWASC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KM0IWCCL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// company id
DataItem KM0IWCID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// company id
DataItem KM0IWCMY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record count
DataItem KM0IWCNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KM0IWCST char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// counter
DataItem KM0IWCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KM0IWCTY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display switch
DataItem KM0IWDSP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of application flag
DataItem KM0IWEAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of while
DataItem KM0IWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time switch
DataItem KM0IWFST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KM0IWGRP char(200)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold count
DataItem KM0IWHC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem KM0IWICX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen index
DataItem KM0IWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem KM0IWIND smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem KM0IWIZX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KM0IWKEY char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// modified switch
DataItem KM0IWMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// messages
DataItem KM0IWMSG char(70)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// options
DataItem KM0IWOPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// period
DataItem KM0IWPER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KM0IWSCL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select switch
DataItem KM0IWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KM0IWST char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// store id
DataItem KM0IWSTR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// message
DataItem KM0IWTNM char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total selected
DataItem KM0IWTOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// address select message
DataItem KM0IWTTE char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total selected
DataItem KM0IWTTL num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KM0IWZCL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem KM0IWZIP char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

