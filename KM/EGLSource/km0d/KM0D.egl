package km0d;

import corpcom2.XX0XW01;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.*;
import corpcom6.SQLCA;
import corpx1.XATCD;
import corpx1.XATTBL;
import corpx1.XAUTBL;
import corpx1.XGATBL;
import corpx1.XGPTBL;
import corpx1.XHDTBL;
import corpx1.XIDTBL;
import corpx1.XLBTBL;
import corpx1.XLCTBL;
import corpx1.XNATBL;
import corpx1.XNDTBL;
import corpx1.XNXTBL;
import corpx1.XQATBL;
import corpx1.XSGTBL;
import corpx1.XSOTBL;
import corpx1.XSPTBL;
import kl.common.KIZTBL;
import ku.common.KU3REC;
import ku.common.KUCREC;
import ku.common.KUMREC;
import ku.common.KUNREC;
import ku.common.KUPREC;
import ku.common.KUQREC;
import ku.common.KUSREC;
import ku.common.KUZREC;
import ta.common.TA1REC;
import vv.common.VCULVLPD;
//*** PROGRAM=KM0D ****
// ----------------  km0d - change customer unit --------------
// 
// overview:  this application performs change functions for
//            general customer unit level data.
// 
// date written: 06/86
// author:       david ply - cap gemini america
// 
// ************************************************************
// maintenance history log:
// ************************************************************
//  date   int   modules              comments
// ------  ---   -------    -----------------------------------
// 021987  clt   km0d055    corrected problem when updating the
//               km0ds04    sales rep history file. was using
//               km0dw01    the new rep id instead of the old.
// 
// 030287  clt   km0ds04    display slsmn eff date on screen.
//               km0ds11
//               km0dm020
// 031787  clt   km0dss9    fixed security for cash bank ind.
//               km0d020
// 032787  clt   km0d175    reset spec inst flag to 'n' when
//               km0ds42    all spec inst records deleted.
//               km0dw01
// 040987  clt   km0dw01    changed special customer group to
//               km0d140    delete record from file when all
//               km0d145    special customer groups are removed
//               km0d150
// 041087  clt   km0d045    delete label record
// 051987  clt   km0d035    change made due to change in kuarec
// 060287  clt   km0d020    fixed bug in pf12 after error msg
// 070987  clt   km0ds4a    edit of comm class to mjr grp id
// 010588  clt   km0ds11    add natl acct code
// 041888  clt              changed csp kunote to kutendt
// 042788  clt   km0d010    removed o.t. terms maintenance
// 062988  clt   km0ds4a    change edit of comm. class
// 111788  jbw              added noncsp opt to calls
// 111788  jbw              added xssegtr logic
// 120988  clt   km0ds36    added edit of duplicate group codes
// 012389  clt              added class class indicator
// 051589  clt              database changes
// 060889  clt              added security for cole haan
// 011690  jfiat            db changes
// 030290  dsalzw           removed sales agency, sales rep
//                          and commissions info from screen
// 032990  dsalzw           db changes
// 091090  dsalzw           added kiztbl for audit trail
// 100390  dsalzw           db changes
// 110690  dsalzw           if inv dist ind shows sending inv
//                          to alt address, alt address must be
//                          present on company
// 121090  dsalzw           remove po req & alloc fields from
//                          to map, moved to company
// 020491  dsalzw           db changes
// 022691  t watson         remove vend auth flag from map
// 031591  t watson         remove inv dist code  from map
// 040191  t watson         remove handling codes from map
// 041591  t watson         remove call class code
// 041591  t watson         remove credit hold indicator
// 041691  t watson         remove special customer grps 11-40
// 041691  t watson         remove order ack xcicd
// 051691  dsalzw           change pf3 to use from appl
// 051791  dsalzw           removed retrictions - see kg0g
// 052391  dsalzw           removed all security for inquiry
// 060991  dsalzw           db changes
// 061291  dsalzw           cugrp ind is not being set correct
// 061991  dsalzw           remove xci table - deinstalled
// 072591  dsalzw           fix map attributes
// 101191  CHELLM           Dinstalled CUTAG records KUXREC.
// 101692  CHELLM           Removed SM5REC from records list
//                          becaused it wasn't being used.
// 030993  cancie           Removed 'set km0dm020 alarm' from
//                          km0d020 PF12 update.
// 031793  CHELLM           'Turned off' XNA update on VCUST.
//                          Made XNA display only from VCULVL.
// 7-july-1993          dlegg     Change call to TA0020 with
//                                ABND to RETN. KM0D025,045,
//                                050,135,145,150,165,026,S08,
//                                S09,S10,S14,S16,S40,S41,S42.
// 15-july-1993         dlegg     Add sgrp to initialize all
//                                records used by this appl.
// 100193  CHELLM           CSP 4.1 Conversion
// 04/10/95  CHELLM         Added Nike Canada User Security.
// *Y2KFIX   12/02/97  DKENNY  Y2K MODIFICATIONS MADE:
// *                   Application regenerated to pick up new
// *                   XX0XS01.
// *********************
Program KM0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KM0DW01 KM0DW01; // record
  KM0DW02 KM0DW02; // record
  KU3REC KU3REC; // record
  KUCREC KUCREC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  KUPREC KUPREC; // record
  KUQREC KUQREC; // record
  KUSREC KUSREC; // record
  KUZREC KUZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VCULVLPD VCULVLPD; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KIZTBL {deleteAfterUse = yes}; // table
  use XATTBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XHDTBL {deleteAfterUse = yes}; // table
  use XLBTBL {deleteAfterUse = yes}; // table
  use XLCTBL {deleteAfterUse = yes}; // table
  use XIDTBL {deleteAfterUse = yes}; // table
  use XNATBL {deleteAfterUse = yes}; // table
  use XNDTBL {deleteAfterUse = yes}; // table
  use XNXTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XSGTBL {deleteAfterUse = yes}; // table
  use XSOTBL {deleteAfterUse = yes}; // table
  use XSPTBL {deleteAfterUse = yes}; // table
  use KM0DM.KM0DM010,  // forms
      KM0DM.KM0DM020, 
      KM0DM.KM0DM130, 
      KM0DM.KM0DM160
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KM0D005: KM0D005();
     /* ----------- km0d005 flow  -----------*/
    if (KM0DW02.KM0DWOPT == 6)
      set KM0DW01 empty;

      KM0DW01.KM0DWCID = 0;
      KM0DW01.KM0DWSID = 0;
      KM0DW01.KM0DWXNX = 0;
      KM0DW01.KM0DWOPT = 0;

      goto KM0D125; /* req. spc cust grp from km0m menu*/

    end

    set KM0DW01 empty;

    KM0DW01.KM0DWCID = 0;
    KM0DW01.KM0DWSID = 0;
    KM0DW01.KM0DWXNX = 0;
    KM0DW01.KM0DWOPT = 0;

    goto KM0D010; /* to converse chg customer menu*/
    KM0D010: KM0D010();
     /* -----------  km0d010 flow  -----------------*/

    if (KM0DM010.KM0DMMSG != " "
     || KM0DM010.VAGen_EZEMSG != " "
     || converseVar.validationMsgNum != 0)
      goto KM0D010; /* errors/msg's - redisplay menu*/
    end

    if (converseVar.eventKey is pa2) /* reset screen*/
      goto KM0D005;
    end

      /* check options, branch to function*/

    if (KM0DM010.KM0DMACT == 1)
      goto KM0D015; /* to basic customer unit*/
    else
      if (KM0DM010.KM0DMACT == 3)
        goto KM0D125; /* to special customers*/
      else
        if (KM0DM010.KM0DMACT == 4)
          goto KM0D155; /* to special instructions*/
        else
          KM0DM010.KM0DMMSG = "INVALID OPTION";
        end
      end
    end


    goto KM0D010;

    KM0D015: KM0D015();
     /* ----------  flow for km0c015 --------------*/

    if (KM0DM010.KUCCOID > 0)
                                     /* company entered from menu?*/
      KM0DM020.KUCCOID = KM0DM010.KUCCOID;
      KM0DM020.KUMSTRID = KM0DM010.KUMSTRID;
      KM0DM020.XNXCD = KM0DM010.XNXCD;
      KM0DM020.XGPCD = KM0DM010.XGPCD;
      goto KM0D025; /* yes - read/fmt data*/
    else
      goto KM0D020; /* no - display empty basic customer unit screen*/
    end

    KM0D020: KM0D020();
     /* -----------  km0c020 flow -------------------------*/

    if (converseVar.eventKey is pa2)
      KM0DM010.KUCCOID = KM0DW01.KM0DWCID;
      KM0DM010.KUMSTRID = KM0DW01.KM0DWSID;
      KM0DM010.XNXCD = KM0DW01.KM0DWXNX;
      KM0DM010.XGPCD = KM0DW01.KM0DWGPC;
      goto KM0D015; /* reload data*/
    end

    if (converseVar.eventKey is pf3)
      KM0DM010.KUCCOID = KM0DM020.KUCCOID;
      KM0DM010.KUMSTRID = KM0DM020.KUMSTRID;
      KM0DM010.XNXCD = KM0DM020.XNXCD;
      KM0DM010.XGPCD = KM0DM020.XGPCD;
      goto KM0D010; /* back to customer chg menu*/
    end

     /* check for errors or messages*/
    if (KM0DM020.VAGen_EZEMSG != " "
     || KM0DM020.KM0DMMSG != " "
     || converseVar.validationMsgNum != 0)
      goto KM0D020; /* errors/msg - redisplay*/
    end

    if (KM0DW01.KM0DWNR == "X")
      KM0DM010.KUCCOID = KM0DM020.KUCCOID;
      KM0DM010.KUMSTRID = KM0DM020.KUMSTRID;
      KM0DM010.XNXCD = KM0DM020.XNXCD;
      KM0DM010.XGPCD = KM0DM020.XGPCD;
      goto KM0D015; /* reload data*/
    end

    if (converseVar.eventKey is pf12)
      goto KM0D030; /* update request*/
    else
      set KM0DM020.KUCCOID cursor;
      KM0DM020.KM0DMMSG = "PRESS PF12 TO CONFIRM UPDATE";
      goto KM0D020; /* redisplay*/
    end

    KM0D025: KM0D025();

     /* -------------  flow for km0d025 ----------*/

    goto KM0D020; /* to converse customer unit map*/

    KM0D030: KM0D030();
     /* --------- flow for km0d030 --------------*/

    if (converseVar.validationMsgNum != 0 /* errors/msgs*/
     && converseVar.validationMsgNum != 29) /* data updated msg*/
      KM0DW01.KM0DWMD1 = " ";
      KM0DW01.KM0DWMD2 = " ";
      KM0DW01.KM0DWMD3 = " ";
      KM0DW01.KM0DWMD4 = " ";
      goto KM0D020; /* display errors/msgs*/
    else
      goto KM0D040; /* check lable update*/
    end

    KM0D040: KM0D040();
     /* --------- flow for km0d040 --------------*/

    if (KM0DW01.KM0DWMD3 != "X") /* label field not modified?*/
      goto KM0D060;
    end

      /* check add for label(s)*/
    if (KM0DW01.KM0DWACS != "Y") /* record to be added*/
      goto KM0D050; /* to add labels*/
    end


      /* check upt for label(s)*/
    if (KM0DW01.KM0DWACS == "Y") /* record to be updated*/
      goto KM0D045; /* to upt labels*/
    end

    goto KM0D060;


    KM0D045: KM0D045();
     /* --------- flow for km0d045 --------------*/

    if (converseVar.validationMsgNum != 0 /* errors/msgs*/
     && converseVar.validationMsgNum != 29) /* data updated msg*/
      KM0DW01.KM0DWMD1 = " ";
      KM0DW01.KM0DWMD2 = " ";
      KM0DW01.KM0DWMD3 = " ";
      KM0DW01.KM0DWMD4 = " ";
      goto KM0D020; /* display errors/msgs*/
    else
      goto KM0D060;
    end


    KM0D050: KM0D050();
     /* -----------  km0d050 flow -------------*/

    if (converseVar.validationMsgNum != 0 /* errors/msgs*/
     && converseVar.validationMsgNum != 29) /* data updated msg*/
      KM0DW01.KM0DWMD1 = " ";
      KM0DW01.KM0DWMD2 = " ";
      KM0DW01.KM0DWMD3 = " ";
      KM0DW01.KM0DWMD4 = " ";
      goto KM0D020; /* display errors/msgs*/
    else
      goto KM0D060;
    end


    KM0D060: KM0D060();

     /* --------------  km0d060 flow ----------------*/

    goto KM0D020; /* redisplay basic customer map*/

    KM0D125: KM0D125();

     /* ----------  flow for km0c125 --------------*/

    if (KM0DM010.KUCCOID > 0)
                                     /* company entered from menu?*/
      KM0DM130.KUCCOID = KM0DM010.KUCCOID;
      KM0DM130.KUMSTRID = KM0DM010.KUMSTRID;
      KM0DM130.XNXCD = KM0DM010.XNXCD;
      KM0DM130.XGPCD = KM0DM010.XGPCD;
      goto KM0D135; /* yes - read/fmt data*/
    else
      goto KM0D130; /* no - display empty spc. cust grp screen*/
    end


    KM0D130: KM0D130();

     /* -----------  km0c130 flow -------------------------*/

    if (converseVar.eventKey is pa2)
      KM0DM010.KUCCOID = KM0DW01.KM0DWCID;
      KM0DM010.KUMSTRID = KM0DW01.KM0DWSID;
      KM0DM010.XNXCD = KM0DW01.KM0DWXNX;
      KM0DM010.XGPCD = KM0DW01.KM0DWGPC;
      goto KM0D125; /* reset  screen*/
    end

    if (converseVar.eventKey is pf3)
      KM0DM010.KUCCOID = KM0DM130.KUCCOID;
      KM0DM010.KUMSTRID = KM0DM130.KUMSTRID;
      KM0DM010.XNXCD = KM0DM130.XNXCD;
      KM0DM010.XGPCD = KM0DM130.XGPCD;
      goto KM0D010; /* back to customer chg menu*/
    end

     /* check for errors or messages*/
    if (KM0DM130.VAGen_EZEMSG != " "
     || KM0DM130.KM0DMMSG != " "
     || converseVar.validationMsgNum != 0)
      goto KM0D130; /* errors/msg - redisplay*/
    end

    if (KM0DW01.KM0DWNR == "X")
      KM0DM010.KUCCOID = KM0DM130.KUCCOID;
      KM0DM010.KUMSTRID = KM0DM130.KUMSTRID;
      KM0DM010.XNXCD = KM0DM130.XNXCD;
      KM0DM010.XGPCD = KM0DM130.XGPCD;
      goto KM0D125; /* reset  screen*/
    end

    if (converseVar.eventKey is pf12)
      goto KM0D140; /* update request*/
    else
      KM0DM130.KM0DMMSG = "PRESS PF12 TO CONFIRM UPDATE";
      goto KM0D130; /* redisplay*/
    end


    KM0D135: KM0D135();

     /* -------------  flow for km0d135 ----------*/

    goto KM0D130; /* to converse spc. cust. grp map*/


    KM0D140: KM0D140();

     /* --------- flow for km0d140 --------------*/

    if (converseVar.validationMsgNum != 0 /* errors/msgs*/
     && converseVar.validationMsgNum != 29) /* data updated msg*/
      KM0DW01.KM0DWMD1 = " ";
      KM0DW01.KM0DWMD6 = " ";
      goto KM0D130; /* display errors/msgs*/
    end



    if (KUPREC.ZZZSDT == 0) /* vcugrp01 not set up yet?*/
      goto KM0D150; /* add vcugpr01*/
    else
      goto KM0D145; /* upt vcugrp01*/
    end

    KM0D145: KM0D145();

     /* --------- flow for km0d145 --------------*/

    goto KM0D130; /* back to converse spc cust grp*/

    KM0D150: KM0D150();

     /* --------- flow for km0d150 --------------*/

    goto KM0D130; /* back to converse spc cust grp*/

    KM0D155: KM0D155();

     /* ----------  flow for km0c155 --------------*/

    if (KM0DM010.KUCCOID > 0)
                                     /* company entered from menu?*/
      KM0DM160.KUCCOID = KM0DM010.KUCCOID;
      KM0DM160.KUMSTRID = KM0DM010.KUMSTRID;
      KM0DM160.XNXCD = KM0DM010.XNXCD;
      KM0DM160.XGPCD = KM0DM010.XGPCD;
      goto KM0D165; /* yes - read/fmt data*/
    else
      goto KM0D160; /* no - display empty spc. cust grp screen*/
    end


    KM0D160: KM0D160();

     /* -----------  km0d160 flow -------------------------*/

    if (converseVar.eventKey is pa2)
      KM0DM010.KUCCOID = KM0DW01.KM0DWCID;
      KM0DM010.KUMSTRID = KM0DW01.KM0DWSID;
      KM0DM010.XNXCD = KM0DW01.KM0DWXNX;
      KM0DM010.XGPCD = KM0DW01.KM0DWGPC;
      goto KM0D155; /* reset  screen*/
    end

    if (converseVar.eventKey is pf3)
      KM0DM010.KUCCOID = KM0DM160.KUCCOID;
      KM0DM010.KUMSTRID = KM0DM160.KUMSTRID;
      KM0DM010.XNXCD = KM0DM160.XNXCD;
      KM0DM010.XGPCD = KM0DM160.XGPCD;
      goto KM0D010; /* back to customer chg menu*/
    end

     /* check for errors or messages*/
    if (KM0DM160.VAGen_EZEMSG != " "
     || KM0DM160.KM0DMMSG != " "
     || converseVar.validationMsgNum != 0)
      goto KM0D160; /* errors/msg - redisplay*/
    end

    if (KM0DW01.KM0DWNR == "X")
      KM0DM010.KUCCOID = KM0DM160.KUCCOID;
      KM0DM010.KUMSTRID = KM0DM160.KUMSTRID;
      KM0DM010.XNXCD = KM0DM160.XNXCD;
      KM0DM010.XGPCD = KM0DM160.XGPCD;
      goto KM0D155; /* reset  screen*/
    end

    if (converseVar.eventKey is pf12)
      goto KM0D170; /* update request*/
    else
      KM0DM130.KM0DMMSG = "PRESS PF12 TO CONFIRM UPDATE";
      goto KM0D160; /* redisplay*/
    end


    KM0D165: KM0D165();

     /* -------------  flow for km0d165 ----------*/

    goto KM0D160; /* to converse spc. instr. map*/


    KM0D170: KM0D170();

     /* --------- flow for km0d170 --------------*/

    if (converseVar.validationMsgNum != 0 /* errors/msgs*/
     && converseVar.validationMsgNum != 29) /* data updated msg*/
      KM0DW01.KM0DWMD1 = " ";
      KM0DW01.KM0DWMD7 = " ";
      goto KM0D160; /* display errors/msgs*/
    end


    goto KM0D175; /* to update vinst001*/


    KM0D175: KM0D175();

     /* --------- flow for km0d175 --------------*/

    goto KM0D180; /* to sperry tag process*/

    KM0D180: KM0D180();

     /* --------- flow for km0d180 --------------*/

    goto KM0D160; /* to converse inst. map*/

  end // end main
end // end KM0D

// read company
Function KM0D-026()

   /* *************************************************/
   /* get the global customer level record vculvlpd*/
   /* *************************************************/

  set SQLCA empty;
  set VCULVLPD empty;
  VCULVLPD.KUCCOID = KM0DM020.KUCCOID;
  VCULVLPD.KUMSTRID = KM0DM020.KUMSTRID;
  VCULVLPD.XNXCD = KM0DM020.XNXCD;
  VCULVLPD.XGPCD = KM0DM020.XGPCD;

  call "KU1540" (VCULVLPD) {isNoRefresh = yes, isExternal = yes}; /* read vculvl01*/
  if (VCULVLPD.XXX-SQLCODE == 0)
    KM0DM020.XNACD = VCULVLPD.XNACD; /* National Account Code*/
    KM0DM020.XACCD = VCULVLPD.XACCD; /* Assign Ctrl id*/
    KM0DM020.OP1ALSEQ = VCULVLPD.OP1ALSEQ; /* alloc seq*/
  else
    TA1REC.TA1TYPE = VCULVLPD.XXX-SQLTYPE;
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = VCULVLPD.XXX-SQLNAME;
    TA1REC.TA1TBLVU = VCULVLPD.XXX-SQLVIEW;
    TA1REC.TA1MAP = " ";
    TA1REC.TA1TBLKE = KM0DM020.KUCCOID;
    TA1REC.TA1PGMNM = "KM0D-026";
    TA1REC.TA1LOC = "READING DB2 CULVL01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end



end // end KM0D-026

// init chg cust. processing
Function KM0D005()

    /* -------------  execute process km0d005  --------------*/

  XSENTRY(); /* appl entry security*/

  XSSEGTR(); /* set segmented trans id*/

  KM0DS-INIT-RECS();

     /* set map id's, date*/


  set KM0DM010 initial;

  KM0DW01.KM0DWUSR = COMMAREA.CAUSERA; /* key from chg menu*/
  if (COMMAREA.CAITEM != " ")
    KM0DW01.KM0DWUSR = COMMAREA.CAITEM; /* key from fastpath*/
    COMMAREA.CAITEM = " ";
  end

  if (KM0DW01.KM0DWCID-CHAR is numeric)
    KM0DM010.KUCCOID = KM0DW01.KM0DWCID; /* company*/
  else
    KM0DM010.KUCCOID = 0;
  end

  if (KM0DW01.KM0DWSID-CHAR is numeric)
    KM0DM010.KUMSTRID = KM0DW01.KM0DWSID; /* STORE*/
  else
    KM0DM010.KUMSTRID = 0;
  end

  if (KM0DW01.KM0DWXNX-CHAR is numeric)
    KM0DM010.XNXCD = KM0DW01.KM0DWXNX; /* dept*/
  else
    KM0DM010.XNXCD = 0;
  end

  KM0DM010.XGPCD = KM0DW01.KM0DWGPC; /* gpc*/

  if (KM0DW01.KM0DWOPT-CHAR is numeric)
    KM0DW02.KM0DWOPT = KM0DW01.KM0DWOPT; /* option*/
  else
    KM0DW02.KM0DWOPT = 0;
  end

  KM0DM010.KM0DMDT = VGVar.currentShortGregorianDate; /* system date*/

   /* -------------  end process km0d005  --------------------*/

end // end KM0D005

// converse customer menu
Function KM0D010()
   /* -----------  before stage - km0d010 -----*/

    /* no processing*/

  converse KM0DM010 ;
   /* -----------------  km0d010  -----------------------------*/
    /* after stage:  check aid byte, process accordingly     **/
   /* ---------------------------------------------------------*/

   /* ------------- clear message flds ------------------*/

  KM0DM010.VAGen_EZEMSG = " ";
  KM0DM010.KM0DMMSG = " ";

   /* --------------- check aid byte ---------------------*/

  KM0DS01(); /* check standard pf keys*/
  KM0DM010.KM0DMMSG = KM0DW01.KM0DWMSG;

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = COMMAREA.CAFROMAP; /* xfer to main chg menu*/
    KM0DW01.KM0DWCID = KM0DM010.KUCCOID;
    KM0DW01.KM0DWSID = KM0DM010.KUMSTRID;
    KM0DW01.KM0DWXNX = KM0DM010.XNXCD;
    KM0DW01.KM0DWGPC = KM0DM010.XGPCD;
    COMMAREA.CAUSERA = KM0DW01.KM0DWUSR;
    XSEXIT();
    KM0DM010.KM0DMMSG = COMMAREA.CAMSG; /* security error*/
  end


  if (converseVar.validationMsgNum != 0 /* invalid pf*/
   || KM0DM010.KM0DMMSG != " ")         /* invalid security*/
    exit stack;
  end

   /* --------   check for fastpath  --------------*/

  if (KM0DM010.KM0DMOPT > " ") /* fastpath request*/
    COMMAREA.CATOAP = KM0DM010.KM0DMOPT;
    COMMAREA.CAITEM = KM0DM010.KM0DMITM;
    XSEXIT(); /* check security/xfer*/
    KM0DM010.KM0DMMSG = COMMAREA.CAMSG; /* security failed*/
    COMMAREA.CATOAP = " ";
    exit stack;
  end

    /* ***** menu options checked in flow  *******/


    /* -----------   end of process km0d010  ------------*/

end // end KM0D010

// init basic customer screen
Function KM0D015()

   /* -------- start process km0d015 --------------*/

      /* set date in map, initialize work flds*/

  set KM0DM020 initial; /* clear map fields*/
  KM0DM020.KM0DMDT = VGVar.currentShortGregorianDate; /* move sys date to map*/

   /* ------------  end of process km0d015 --------------*/

end // end KM0D015

// converse basic cust screen
Function KM0D020()
   /* ------------------ km0d020 ------------------------------*/
    /* before stage: check field security                    **/
   /* ---------------------------------------------------------*/

  if (COMMAREA.CACLVL[3] == "N")
    KM0DSS5(); /* group 3 change*/
  end

  if (COMMAREA.CACLVL[4] == "N")
    KM0DSS7(); /* group 4 change*/
  end

  if (COMMAREA.CACLVL[5] == "N")
    KM0DSS9(); /* group 5 change*/
  end

  KM0DS00(); /* set cursor, blank headings on*/
                                   /* notfound*/

  if (KM0DM020.KUCCOID == 0)
    set KM0DM020.KUCCOID cursor;
  end


  converse KM0DM020 ;

   /* ------------------ km0d020 ------------------------------*/
    /* after stage:  check aid byte, process accordingly     **/
   /* ---------------------------------------------------------*/

   /* ------------- clear message flds ------------------*/

  KM0DM020.VAGen_EZEMSG = " ";
  KM0DM020.KM0DMMSG = " ";

   /* --------------- check aid byte ---------------------*/


  KM0DS01(); /* check standard entry keys*/
  KM0DM020.KM0DMMSG = KM0DW01.KM0DWMSG;

  if (converseVar.validationMsgNum != 0
   || KM0DM020.KM0DMMSG != " ") /* invalid security*/
    exit stack; /* invalid pf*/
  end

  if (converseVar.eventKey is pf3) /* pf3- return to company chg menu*/
    exit stack;
  end


  if (converseVar.eventKey is pf12 /* pf12 - drop thru for upt*/
   && KM0DW01.KM0DWGED == "X")    
    /* /* REMOVED SET KM0DM020 ALARM*/
    /* next sentence*/
  else
    if (converseVar.eventKey is pf12) /* pf12 - upt request invalid*/
      KM0DM020.KM0DMMSG = "YOU MUST PASS THE EDIT BEFORE UPDATE";
    end
  end

   /* --------   check for fastpath  --------------*/

  if (KM0DM020.KM0DMOPT > " ") /* fastpath request*/
    if (converseVar.eventKey is enter)
      COMMAREA.CATOAP = KM0DM020.KM0DMOPT;
      COMMAREA.CAITEM = KM0DM020.KM0DMITM;
      XSEXIT(); /* check security/xfer*/
      KM0DM020.KM0DMMSG = COMMAREA.CAMSG; /* security failed*/
      COMMAREA.CATOAP = " ";
      exit stack;
    else
      converseLib.validationFailed(90); /* must key enter with fastpath*/
      exit stack;
    end
  end

   /* ---------  check if new id request  --------------*/

  if (KM0DM020.KUCCOID == 0)
    converseLib.validationFailed(25); /* company not found*/
    exit stack;
  end

  if (KM0DM020.KUCCOID == KM0DW01.KM0DWCID
   && KM0DM020.KUMSTRID == KM0DW01.KM0DWSID
   && KM0DM020.XNXCD == KM0DW01.KM0DWXNX
   && KM0DM020.XGPCD == KM0DW01.KM0DWGPC)
    KM0DW01.KM0DWNR = " ";
    KM0DW01.KM0DWACS = KUNREC.KUNLABIN;
  else
    KM0DW01.KM0DWNR = "X"; /* new request*/
    exit stack;
  end

   /* ---- edit fields from upt basic customer unit map ----*/

   /* note: edits are performed in reverse sequence of field*/
         /* appearance.  edit criteria are found in stmt grps.*/

  KM0DS02(); /* edit labels, cash bank ind*/

   /* KM0DS4A;*/

  KM0DS05(); /* edit sport activity, gender age*/

  KM0DS06(); /* edit subs allowed, change*/
                                   /* acknowledged, back*/
                  /* order acknowledged, order acknowledged,*/
                                  /* and p.o. number required*/

  KM0DS07(); /* edit ded. writeoff, min. backorder*/
                                   /* qty,*/
                  /* item backorder code, credit hold code,*/
                  /* allocation sequence, assgn cntrl category,*/
                  /* customer unit status*/

     /* ---------------   end of edit  ---------------------*/

     /* ----------  check for clean edit    ------------*/

  if (KM0DM020.KM0DMMSG == " "
   && converseVar.validationMsgNum == 0)
    if (KM0DW01.KM0DWGED == "X")
       /* next sentence*/
    else
      set KM0DM020.KUCCOID cursor;
      KM0DW01.KM0DWGED = "X"; /* set good edit flag*/
      KM0DM020.KM0DMMSG = "GOOD EDIT - PRESS PF12 TO CONFIRM UPDATE";
    end
  end

    /* -----------   end of process km0d020  ------------*/

end // end KM0D020

// read/fmt basic cust screen
Function KM0D025()
   /* ----------  start process km0d025 ----------------*/


   /* ----  get new heading data if neccessary  ---------*/

  if (KM0DM020.KUCCOID != KM0DW01.KM0DWCID) /* COMPANY CHANGE?*/
    KUCREC.KUCCOID = KM0DM020.KUCCOID;
    KM0DS08(); /* read company table*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      converseLib.validationFailed(25); /* company not found*/
      exit stack;
    end
    KM0DW01.KM0DWSID = -9999; /* force check for new store*/
  end
  KM0DM020.KUCCONM = KUCREC.KUCCONM;
  KM0DM020.KUCCOANM = KUCREC.KUCCOANM;


  if (KM0DM020.KUMSTRID != KM0DW01.KM0DWSID) /* store change?*/
    KUMREC.KUCCOID = KM0DM020.KUCCOID;
    KUMREC.KUMSTRID = KM0DM020.KUMSTRID;
    KM0DS09(); /* read store table*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      converseLib.validationFailed(26); /* store not found*/
      exit stack;
    end
  end
  KM0DM020.KUMSTRNM = KUMREC.KUMSTRNM;

  if (KM0DM020.XNXCD in XNXTBL.XNXCD)
    KM0DM020.XNXDESC = XNXTBL.XNXDESC[sysVar.arrayIndex];
  end /* decode dept*/

  if (KM0DM020.XGPCD in XGPTBL.XGPCD)
    KM0DM020.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  end /* decode gpc*/

   /* - - - - - - - - - - - - - - - - - - - - - - - - - - -*/

  set KM0DW01 empty; /* clear work record*/

  KM0DW01.KM0DWCID = 0;
  KM0DW01.KM0DWSID = 0;
  KM0DW01.KM0DWXNX = 0;
  KM0DW01.KM0DWOPT = 0;

   /* -----  read/fmt customer unit table to km0dm020  -----*/

      /* build customer key*/
  set KUNREC empty;
  KUNREC.KUCCOID = KM0DM020.KUCCOID;
  KUNREC.KUMSTRID = KM0DM020.KUMSTRID;
  KUNREC.XNXCD = KM0DM020.XNXCD;
  KUNREC.XGPCD = KM0DM020.XGPCD;

  KM0DS10(); /* read vcust001 (kunrec)*/
  if (SQLCA.VAGen_SQLCODE == 0)
    KM0DW01.KM0DWCID = KM0DM020.KUCCOID; /* save current key*/
    KM0DW01.KM0DWSID = KM0DM020.KUMSTRID;
    KM0DW01.KM0DWXNX = KM0DM020.XNXCD;
    KM0DW01.KM0DWGPC = KM0DM020.XGPCD;
  else
    converseLib.validationFailed(23); /* customer not found*/
    exit stack;
  end

  KM0DS11(); /* fmt vcust001 to km0dm020*/


   /* ------- read VCULVL01 for National Account Code -------*/

  KM0D-026();


   /* ------- read label(s) if indicator on -------*/

  set KUSREC empty;

  KM0DW01.KM0DWACS = "N";

  if (KUNREC.KUNLABIN == "Y") /* any labels?*/
    KUSREC.KUCCOID = KM0DM020.KUCCOID; /* build key*/
    KUSREC.KUMSTRID = KM0DM020.KUMSTRID;
    KUSREC.XNXCD = KM0DM020.XNXCD;
    KUSREC.XGPCD = KM0DM020.XGPCD;

    call "IO0310" ("S ", SQLCA, KUSREC) {isNoRefresh = yes, isExternal = yes}; /* read vlabel01*/

    if (SQLCA.VAGen_SQLCODE == 0)
      KM0DW01.KM0DWACS = "Y";
      KM0DM020.KUSTEXT1 = KUSREC.KUSTEXT1;
      KM0DM020.KUSTEXT2 = KUSREC.KUSTEXT2;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        KM0DM020.KM0DMMSG = "LABEL DATA MISSING";
      else
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "ABND";
        TA1REC.TA1DBASE = "DCUST";
        TA1REC.TA1TBLVU = "VLABEL01";
        TA1REC.TA1MAP = "KM0DM020";
        KM0DW01.KM0DWCID = KUNREC.KUCCOID;
        TA1REC.TA1LOCAT[1] = KM0DW01.KM0DWCID;
        KM0DW01.KM0DWCID = KUNREC.KUMSTRID;
        TA1REC.TA1LOCAT[2] = KM0DW01.KM0DWCID;
        KM0DW01.KM0DWCID = KUNREC.XNXCD;
        TA1REC.TA1LOCAT[3] = KM0DW01.KM0DWCID;
        TA1REC.TA1LOCAT[4] = KUNREC.XGPCD;
        TA1REC.TA1PGMNM = "KM0D025";
        TA1REC.TA1TBLKE = "KEY IN LOCATION";
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end
    end
  end


   /* ----------  end process km0d025 ----------------*/
end // end KM0D025

// upt/audit basic customer data
Function KM0D030()
   /* ----------  start process km0d030 ----------------*/

    /* convert csp time/date format to db2 time/date stamp format*/
  XX0XS01();

    /* check if vcust001 data modified. true, continue.*/
    /* false, exit.*/
  if (KM0DW01.KM0DWMD1 != "X")
    exit stack;
  end


  KM0DS12(); /* format/add audit before image for vcust001*/

  KM0DS13(); /* format cust general data update*/

  KM0DS14(); /* update vcust001*/

  KM0DS15(); /* fmt/write audit trail after image*/

   /* ----------  end process km0d030 ----------------*/
end // end KM0D030

// check label add/upt
Function KM0D040()
   /* ----------  start process km0d040 ----------------*/

      /* work done in flow*/

   /* ----------  end process km0d040 ----------------*/
end // end KM0D040

// update labels
Function KM0D045()
   /* ----------  start process km0d045 ----------------*/

    /* format before audit recorD*/

  set KUZREC empty;

  if (KM0DM020.KUSTEXT1 == " "
   && KM0DM020.KUSTEXT2 == " ")
    KUZREC.KUZTYPE = "D";
  else
    KUZREC.KUZTYPE = "C"; /* a-add,c-change,d-delete,i-inactivate*/
  end

  KUZREC.KUZBFCD = "B"; /* blank-add, b-before, a-after*/
  KUZREC.XXXTBLNM = "VLABEL01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUSREC.KUCCOID;
  KUZREC.KUMSTRID = KUSREC.KUMSTRID;
  KUZREC.XNXCD = KUSREC.XNXCD;
  KUZREC.XGPCD = KUSREC.XGPCD;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUSREC.KUSGRP;

  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM0D   ";
    TA1REC.TA1LOCAT[1] = "KM0D045  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VLABEL01 ";
    TA1REC.TA1MAP = "KM0DM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VLABEL01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end


  KM0DS16(); /* write audit record*/


     /* format change to labels*/

  if (KM0DM020.KUSTEXT1 == " "
   && KM0DM020.KUSTEXT2 == " ")
    call "IO0310" ("D ", SQLCA, KUSREC) {isNoRefresh = yes, isExternal = yes}; /* delete vlabel01*/
  else
    KUSREC.KUSTEXT1 = KM0DM020.KUSTEXT1;
    KUSREC.KUSTEXT2 = KM0DM020.KUSTEXT2;
    KUSREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KUSREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
    call "IO0310" ("U ", SQLCA, KUSREC) {isNoRefresh = yes, isExternal = yes}; /* update vlabel01*/
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(29); /* data updated*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(80); /* label upt since last ref*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
    else
      KM0DW01.KM0DWSQL = SQLCA.SQLCAREC; /* hold error sqlca*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      SQLCA.SQLCAREC = KM0DW01.KM0DWSQL;
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VLABEL01";
      TA1REC.TA1MAP = "KM0DM020";
      KM0DW01.KM0DWCID = KUSREC.KUCCOID;
      TA1REC.TA1LOCAT[1] = KM0DW01.KM0DWCID;
      KM0DW01.KM0DWCID = KUSREC.KUMSTRID;
      TA1REC.TA1LOCAT[2] = KM0DW01.KM0DWCID;
      KM0DW01.KM0DWCID = KUSREC.XNXCD;
      TA1REC.TA1LOCAT[3] = KM0DW01.KM0DWCID;
      TA1REC.TA1LOCAT[4] = KUSREC.XGPCD;
      TA1REC.TA1PGMNM = "KM0D045";
      TA1REC.TA1TBLKE = "KEY IN LOCATION";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end

    /* format after audit recorD*/

  if (KM0DM020.KUSTEXT1 == " "
   && KM0DM020.KUSTEXT2 == " ")
    exit stack;
  end

  KUZREC.KUZBFCD = "A"; /* blank-add, b-before, a-after*/
  KUZREC.KUZDATA = KUSREC.KUSGRP;

  KM0DS16(); /* write audit record*/

   /* ----------  end process km0d045 ----------------*/
end // end KM0D045

// add labels
Function KM0D050()
   /* ----------  start process km0d050 ----------------*/

     /* format add to labels*/

  set KUSREC empty;
  KUSREC.KUCCOID = KM0DM020.KUCCOID;
  KUSREC.KUMSTRID = KM0DM020.KUMSTRID;
  KUSREC.XNXCD = KM0DM020.XNXCD;
  KUSREC.XGPCD = KM0DM020.XGPCD;
  KUSREC.KUSTEXT1 = KM0DM020.KUSTEXT1;
  KUSREC.KUSTEXT2 = KM0DM020.KUSTEXT2;
  KUSREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUSREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

     /* add labels*/

  call "IO0310" ("A ", SQLCA, KUSREC) {isNoRefresh = yes, isExternal = yes}; /* read vlabel01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(29); /* data updated*/
  else
    if (SQLCA.VAGen_SQLCODE == -803)
      converseLib.validationFailed(80); /* label upt since last ref*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
    else
      KM0DW01.KM0DWSQL = SQLCA.SQLCAREC; /* hold error sqlca*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      SQLCA.SQLCAREC = KM0DW01.KM0DWSQL;
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VLABEL01";
      TA1REC.TA1MAP = "KM0DM020";
      KM0DW01.KM0DWCID = KUSREC.KUCCOID;
      TA1REC.TA1LOCAT[1] = KM0DW01.KM0DWCID;
      KM0DW01.KM0DWCID = KUSREC.KUMSTRID;
      TA1REC.TA1LOCAT[2] = KM0DW01.KM0DWCID;
      KM0DW01.KM0DWCID = KUSREC.XNXCD;
      TA1REC.TA1LOCAT[3] = KM0DW01.KM0DWCID;
      TA1REC.TA1LOCAT[4] = KUSREC.XGPCD;
      TA1REC.TA1PGMNM = "KM0D050";
      TA1REC.TA1TBLKE = "KEY IN LOCATION";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end

    /* format after audit recorD*/

  set KUZREC empty;
  KUZREC.KUZTYPE = "A"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = " "; /* blank-add, b-before, a-after*/
  KUZREC.XXXTBLNM = "VLABEL01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUSREC.KUCCOID;
  KUZREC.KUMSTRID = KUSREC.KUMSTRID;
  KUZREC.XNXCD = KUSREC.XNXCD;
  KUZREC.XGPCD = KUSREC.XGPCD;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUSREC.KUSGRP;

  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM0D   ";
    TA1REC.TA1LOCAT[1] = "KM0D050  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VLABEL01 ";
    TA1REC.TA1MAP = "KM0DM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VLABEL01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end


  KM0DS16(); /* write audit record*/

   /* ----------  end process km0d050 ----------------*/
end // end KM0D050

// add sperry tag (opt 1)
Function KM0D060()

   /* ----------  start process km0d060 ----------------*/

    /* if changes to data on basic customer info screen,*/
    /* commit changes*/

  if (KM0DW01.KM0DWMD1 == "X"
   || KM0DW01.KM0DWMD2 == "X"
   || KM0DW01.KM0DWMD3 == "X"
   || KM0DW01.KM0DWMD4 == "X")
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* commit changes*/
  end

  KM0DW01.KM0DWMD1 = " ";
  KM0DW01.KM0DWMD2 = " ";
  KM0DW01.KM0DWMD3 = " ";
  KM0DW01.KM0DWMD4 = " ";

   /* ----------  end process km0d060 ----------------*/

end // end KM0D060

// init special cust. group map
Function KM0D125()
   /* -------- start process km0d125 --------------*/

      /* set date in map, initialize work flds*/

  set KM0DM130 initial; /* clear map fields*/
  KM0DM130.KM0DMDT = VGVar.currentShortGregorianDate; /* move sys date to map*/

   /* ------------  end of process km0d130 --------------*/

end // end KM0D125

// converse spc. cust. grp. map
Function KM0D130()
   /* ------------------ km0d130 ------------------------------*/
    /* before stage: check field security                    **/
   /* ---------------------------------------------------------*/

  if (COMMAREA.CACLVL[9] == "N") /* group 9 change*/
    KM0DSSF(); /* protect fields*/
  end

  KM0DS3B(); /* set cursor, blank headings on notfound*/

  if (KM0DM130.KUCCOID == 0)
    set KM0DM130.KUCCOID cursor;
  end


  converse KM0DM130 ;

   /* ------------------ km0d130 ------------------------------*/
    /* after stage:  check aid byte, process accordingly     **/
   /* ---------------------------------------------------------*/

   /* ------------- clear message flds ------------------*/

  KM0DM130.VAGen_EZEMSG = " ";
  KM0DM130.KM0DMMSG = " ";

   /* --------------- check aid byte ---------------------*/


  KM0DS01(); /* check standard entry keys*/
  KM0DM130.KM0DMMSG = KM0DW01.KM0DWMSG;

  if (converseVar.validationMsgNum != 0
   || KM0DM130.KM0DMMSG != " ") /* invalid security*/
    exit stack; /* invalid pf*/
  end

  if (converseVar.eventKey is pf3) /* pf3- return to company chg menu*/
    if (KM0DW02.KM0DWOPT == 6
     && COMMAREA.CAFROMAP == "KM0M")
      KM0DW01.KM0DWCID = KM0DM130.KUCCOID;
      KM0DW01.KM0DWSID = KM0DM130.KUMSTRID;
      KM0DW01.KM0DWXNX = KM0DM130.XNXCD;
      KM0DW01.KM0DWGPC = KM0DM130.XGPCD;
      COMMAREA.CAUSERA = KM0DW01.KM0DWUSR;
      COMMAREA.CATOAP = "KM0M";
      XSEXIT();
      KM0DM010.KM0DMMSG = COMMAREA.CAMSG;
    end
    exit stack;
  end


  if (converseVar.eventKey is pf12 /* pf12 - drop thru for upt*/
   && KM0DW01.KM0DWGED == "X")    
    /* next sentence*/
  else
    if (converseVar.eventKey is pf12) /* pf12 - upt request invalid*/
      KM0DM130.KM0DMMSG = "YOU MUST PASS THE EDIT BEFORE UPDATE";
      exit stack;
    end
  end

   /* --------   check for fastpath  --------------*/

  if (KM0DM130.KM0DMOPT > " ") /* fastpath request*/
    if (converseVar.eventKey is enter)
      COMMAREA.CATOAP = KM0DM130.KM0DMOPT;
      COMMAREA.CAITEM = KM0DM130.KM0DMITM;
      XSEXIT(); /* check security/xfer*/
      KM0DM130.KM0DMMSG = COMMAREA.CAMSG; /* security failed*/
      COMMAREA.CATOAP = " ";
      exit stack;
    else
      converseLib.validationFailed(90); /* must key enter with fastpath*/
      exit stack;
    end
  end

   /* ---------  check if new id request  --------------*/

  if (KM0DM130.KUCCOID == 0)
    converseLib.validationFailed(25); /* company not found*/
    exit stack;
  end

  if (KM0DM130.KUCCOID == KM0DW01.KM0DWCID
   && KM0DM130.KUMSTRID == KM0DW01.KM0DWSID
   && KM0DM130.XNXCD == KM0DW01.KM0DWXNX
   && KM0DM130.XGPCD == KM0DW01.KM0DWGPC)
    KM0DW01.KM0DWNR = " ";
  else
    KM0DW01.KM0DWNR = "X"; /* new request*/
    exit stack;
  end

   /* ---- edit fields from update restrictions map ----*/

   /* note: edits are performed in reverse sequence of field*/
         /* appearance.  edit criteria are found in stmt grps.*/

  KM0DW01.KM0DWGSW = "N"; /* set cugrp ind to 'n'*/

  KM0DS3D(); /* edit sales office*/

  KM0DS36(); /* check 40 special cust. group fields*/


     /* ---------------   end of edit  ---------------------*/

     /* ----------  check for clean edit    ------------*/

  if (KM0DM130.KM0DMMSG == " "
   && converseVar.validationMsgNum == 0)
    if (KM0DW01.KM0DWGED == "X")
       /* next sentence*/
    else
      KM0DW01.KM0DWGED = "X"; /* set good edit flag*/
      KM0DM130.KM0DMMSG = "GOOD EDIT - PRESS PF12 TO CONFIRM UPDATE";
    end
  end

    /* -----------   end of process km0d130  ------------*/

end // end KM0D130

// read/fmt spc. cust. grp. map
Function KM0D135()
   /* ----------  start process km0d135 ----------------*/


   /* ----  get new heading data if neccessary  ---------*/

  if (KM0DM130.KUCCOID != KM0DW01.KM0DWCID) /* COMPANY CHANGE?*/
    KUCREC.KUCCOID = KM0DM130.KUCCOID;
    KM0DS08(); /* read company table*/
    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      converseLib.validationFailed(25); /* company not found*/
      exit stack;
    end
    KM0DW01.KM0DWSID = -9999; /* force check for new store*/
  end
  KM0DM130.KUCCONM = KUCREC.KUCCONM;
  KM0DM130.KUCCOANM = KUCREC.KUCCOANM;


  if (KM0DM130.KUMSTRID != KM0DW01.KM0DWSID) /* store change?*/
    KUMREC.KUCCOID = KM0DM130.KUCCOID;
    KUMREC.KUMSTRID = KM0DM130.KUMSTRID;
    KM0DS09(); /* read store table*/
    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      converseLib.validationFailed(26); /* store not found*/
      exit stack;
    end
  end
  KM0DM130.KUMSTRNM = KUMREC.KUMSTRNM;

  if (KM0DM130.XNXCD in XNXTBL.XNXCD)
    KM0DM130.XNXDESC = XNXTBL.XNXDESC[sysVar.arrayIndex];
  end /* decode dept*/

  if (KM0DM130.XGPCD in XGPTBL.XGPCD)
    KM0DM130.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  end /* decode gpc*/

   /* - - - - - - - - - - - - - - - - - - - - - - - - - - -*/

  set KM0DW01 empty; /* clear work record*/

  KM0DW01.KM0DWCID = 0;
  KM0DW01.KM0DWSID = 0;
  KM0DW01.KM0DWXNX = 0;
  KM0DW01.KM0DWOPT = 0;

   /* -----  read customer unit to insure valid key ----*/

      /* build customer key*/
  KUNREC.KUCCOID = KM0DM130.KUCCOID;
  KUNREC.KUMSTRID = KM0DM130.KUMSTRID;
  KUNREC.XNXCD = KM0DM130.XNXCD;
  KUNREC.XGPCD = KM0DM130.XGPCD;

  KM0DS10(); /* read vcust001 (kunrec)*/
  if (SQLCA.VAGen_SQLCODE == 0)
    KM0DW01.KM0DWCID = KM0DM130.KUCCOID; /* save current key*/
    KM0DW01.KM0DWSID = KM0DM130.KUMSTRID;
    KM0DW01.KM0DWXNX = KM0DM130.XNXCD;
    KM0DW01.KM0DWGPC = KM0DM130.XGPCD;
  else
    converseLib.validationFailed(23); /* customer not found*/
    exit stack;
  end


   /* -----  read/fmt special cust. group to km0dm130  -----*/

      /* build customer unit key for kuprec (vcugrp01)*/
  set KUPREC empty;
  KUPREC.KUCCOID = KM0DM130.KUCCOID;
  KUPREC.KUMSTRID = KM0DM130.KUMSTRID;
  KUPREC.XNXCD = KM0DM130.XNXCD;
  KUPREC.XGPCD = KM0DM130.XGPCD;

    /* read vcugrp01*/

  call "IO0260" ("S ", SQLCA, KUPREC) {isNoRefresh = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KM0DM130.KM0DMMSG = "NO CUST. GROUPS SET UP FOR THIS CUSTOMER";
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUGRP01";
      TA1REC.TA1MAP = "KM0DM130";
      KM0DW01.KM0DWCID = KUPREC.KUCCOID;
      TA1REC.TA1LOCAT[1] = KM0DW01.KM0DWCID;
      KM0DW01.KM0DWCID = KUPREC.KUMSTRID;
      TA1REC.TA1LOCAT[2] = KM0DW01.KM0DWCID;
      KM0DW01.KM0DWCID = KUPREC.XNXCD;
      TA1REC.TA1LOCAT[3] = KM0DW01.KM0DWCID;
      TA1REC.TA1LOCAT[4] = KUPREC.XGPCD;
      TA1REC.TA1PGMNM = "KM0D135";
      TA1REC.TA1TBLKE = "KEY IS IN LOCATION ";
      call "TA0020" (TA1REC, SQLCA);
      XSPF4();
    end
  end


       /* fmt vcugrp01 to km0dm130*/

  KM0DM130.XSOCD = KUPREC.XSOCD; /* move sales office*/

  KM0DWIX1 = 1;
  while (KM0DWIX1 <= 10)
    if (KUPREC.XSGCD[KM0DWIX1] != " ")
      KM0DM130.XSGCD[KM0DWIX1] = KUPREC.XSGCD[KM0DWIX1];
      if (KM0DM130.XSGCD[KM0DWIX1] in XSGTBL.XSGCD)
        KM0DM130.XSGABRV[KM0DWIX1] = XSGTBL.XSGABRV[sysVar.arrayIndex];
      end
    else
      KM0DM130.XSGCD[KM0DWIX1] = " ";
      KM0DM130.XSGABRV[KM0DWIX1] = " ";
    end
    KM0DWIX1 = KM0DWIX1 + 1;
  end


   /* ----------  end process km0d135 ----------------*/

end // end KM0D135

// upt/audit vcust001 (cust grp)
Function KM0D140()
   /* ----------  start process km0d140 ----------------*/

    /* convert csp time/date format to db2 time/date stamp format*/
  XX0XS01();

    /* if vcugrp01 record is to be added, the customer group*/
    /* indicator in vcust001 should be updated.*/

  if (KM0DW01.KM0DWGSW == "N") /* no special cust groups*/
    /* next sentence*/
  else
    if (KUPREC.ZZZSDT == 0 /* vcugrp01 not set up?*/
     && KM0DW01.KM0DWMD6 == "X") /* data modified?*/
       /* next sentence*/
    else
      exit stack;
    end
  end


  KM0DS12(); /* format/add audit before image for vcust001*/

  if (KM0DW01.KM0DWGSW == "Y") /* special cust grp exists*/
    KUNREC.KUNCGIND = "Y";
  else
    KUNREC.KUNCGIND = "N";
  end

  KUNREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUNREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  KM0DS14(); /* update vcust001*/

  KM0DS15(); /* fmt/write audit trail after image*/

   /* ----------  end process km0d140 ----------------*/

end // end KM0D140

// upt/audit vcugrp01
Function KM0D145()
   /* ----------  start process km0d145 ----------------*/

     /* update vcugrp01*/

  if (KM0DW01.KM0DWMD6 != "X") /* vcugrp01 data modified?*/
    exit stack; /* not modified - bypass update*/
  end


    /* format/add audit before image for vcugrp01*/

  set KUZREC empty;
  KUZREC.KUZTYPE = "C"; /* a-add,c-change,d-delete,i-inactivate*/
  if (KM0DW01.KM0DWGSW == "Y") /* special cust grp exist*/
    KUZREC.KUZBFCD = "B"; /* blank-add, b-before, a-after*/
  else
    KUZREC.KUZBFCD = "D"; /* all special cust groups gone*/
  end
  KUZREC.XXXTBLNM = "VCUGRP01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUPREC.KUCCOID;
  KUZREC.KUMSTRID = KUPREC.KUMSTRID;
  KUZREC.XNXCD = KUPREC.XNXCD;
  KUZREC.XGPCD = KUPREC.XGPCD;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUPREC.KUPGRP;


  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM0D   ";
    TA1REC.TA1LOCAT[1] = "KM0D145  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VCUGRP01 ";
    TA1REC.TA1MAP = "KM0DM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VCUGRP01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

  KM0DS16(); /* write before image audit record*/


    /* update vcugrp01*/

  if (KM0DW01.KM0DWGSW == "Y") /* special cust grp exist*/
    KM0DS37(); /* format change to vcugrp01*/
    call "IO0260" ("U ", SQLCA, KUPREC) {isNoRefresh = yes, isExternal = yes};
  else
    call "IO0260" ("D ", SQLCA, KUPREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(91); /* vcugrp01 upt since last ref*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      exit stack;
    else
      KM0DW01.KM0DWSQL = SQLCA.SQLCAREC; /* hold error sqlca*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      SQLCA.SQLCAREC = KM0DW01.KM0DWSQL;
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUST001";
      TA1REC.TA1MAP = " ";
      KM0DW01.KM0DWCID = KUPREC.KUCCOID;
      TA1REC.TA1LOCAT[1] = KM0DW01.KM0DWCID;
      KM0DW01.KM0DWCID = KUPREC.KUMSTRID;
      TA1REC.TA1LOCAT[2] = KM0DW01.KM0DWCID;
      KM0DW01.KM0DWCID = KUPREC.XNXCD;
      TA1REC.TA1LOCAT[3] = KM0DW01.KM0DWCID;
      TA1REC.TA1LOCAT[4] = KUPREC.XGPCD;
      TA1REC.TA1PGMNM = "KM0DS10";
      TA1REC.TA1TBLKE = "KEY IS IN LOCATION ";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end

  if (KM0DW01.KM0DWGSW == "Y") /* special cust grp exist*/
    KM0DS38(); /* fmt/write audit trail after image*/
  else
    KUPREC.ZZZSDT = 0;
  end

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  converseLib.validationFailed(29);
  set KM0DM130 alarm;

   /* ----------  end process km0d145 ----------------*/

end // end KM0D145

// add/audit vcugrp01
Function KM0D150()
   /* ----------  start process km0d150 ----------------*/

     /* add vcugrp01/audit*/

  if (KM0DW01.KM0DWMD6 != "X") /* vcugrp01 data modified?*/
    exit stack; /* not modified - bypass update*/
  end

  KM0DS37(); /* format change to vcugrp01*/

    /* add vcugrp01*/

  call "IO0260" ("A ", SQLCA, KUPREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -803)
      converseLib.validationFailed(108); /* vcugrp01 upt since last ref*/
      set KM0DM130 alarm;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      exit stack;
    else
      KM0DW01.KM0DWSQL = SQLCA.SQLCAREC; /* hold error sqlca*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      SQLCA.SQLCAREC = KM0DW01.KM0DWSQL;
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUST001";
      TA1REC.TA1MAP = " ";
      KM0DW01.KM0DWCID = KUPREC.KUCCOID;
      TA1REC.TA1LOCAT[1] = KM0DW01.KM0DWCID;
      KM0DW01.KM0DWCID = KUPREC.KUMSTRID;
      TA1REC.TA1LOCAT[2] = KM0DW01.KM0DWCID;
      KM0DW01.KM0DWCID = KUPREC.XNXCD;
      TA1REC.TA1LOCAT[3] = KM0DW01.KM0DWCID;
      TA1REC.TA1LOCAT[4] = KUPREC.XGPCD;
      TA1REC.TA1PGMNM = "KM0D150";
      TA1REC.TA1TBLKE = "KEY IS IN LOCATION ";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end

  KM0DS38(); /* fmt/write audit trail after image*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  converseLib.validationFailed(29);
  set KM0DM130 alarm;

   /* ----------  end process km0d150 ----------------*/

end // end KM0D150

// init special instr. screen
Function KM0D155()
   /* -------- start process km0d155 --------------*/

      /* set date in map, initialize work flds*/

  set KM0DM160 initial; /* clear map fields*/
  KM0DM160.KM0DMDT = VGVar.currentShortGregorianDate; /* move sys date to map*/

   /* ------------  end of process km0d155 --------------*/

end // end KM0D155

// converse spc. instr. screen
Function KM0D160()
   /* ------------------ km0d160 ------------------------------*/
    /* before stage: check field security                    **/
   /* ---------------------------------------------------------*/

  if (COMMAREA.CACLVL[8] == "N") /* group 8 change*/
    KM0DSSH(); /* protect fields*/
  end


  KM0DS3C(); /* set cursor, blank headings on*/
                                   /* notfound*/

  if (KM0DM160.KUCCOID == 0)
    set KM0DM160.KUCCOID cursor;
  end

  converse KM0DM160 ;

   /* ------------------ km0d160 ------------------------------*/
    /* after stage:  check aid byte, process accordingly     **/
   /* ---------------------------------------------------------*/

   /* ------------- clear message flds ------------------*/

  KM0DM160.VAGen_EZEMSG = " ";
  KM0DM160.KM0DMMSG = " ";

   /* --------------- check aid byte ---------------------*/


  KM0DS01(); /* check standard entry keys*/
  KM0DM160.KM0DMMSG = KM0DW01.KM0DWMSG;

  if (converseVar.validationMsgNum != 0
   || KM0DM160.KM0DMMSG != " ") /* invalid security*/
    exit stack; /* invalid pf*/
  end

  if (converseVar.eventKey is pf3) /* pf3- return to company chg menu*/
    exit stack;
  end


  if (converseVar.eventKey is pf12 /* pf12 - drop thru for upt*/
   && KM0DW01.KM0DWGED == "X")    
    /* next sentence*/
  else
    if (converseVar.eventKey is pf12) /* pf12 - upt request invalid*/
      KM0DM160.KM0DMMSG = "YOU MUST PASS THE EDIT BEFORE UPDATE";
      exit stack;
    end
  end

   /* --------   check for fastpath  --------------*/

  if (KM0DM160.KM0DMOPT > " ") /* fastpath request*/
    if (converseVar.eventKey is enter)
      COMMAREA.CATOAP = KM0DM160.KM0DMOPT;
      COMMAREA.CAITEM = KM0DM160.KM0DMITM;
      XSEXIT(); /* check security/xfer*/
      KM0DM160.KM0DMMSG = COMMAREA.CAMSG; /* security failed*/
      COMMAREA.CATOAP = " ";
      exit stack;
    else
      converseLib.validationFailed(90); /* must key enter with fastpath*/
      exit stack;
    end
  end

   /* ---------  check if new id request  --------------*/

  if (KM0DM160.KUCCOID == 0)
    converseLib.validationFailed(25); /* company not found*/
    exit stack;
  end

  if (KM0DM160.KUCCOID == KM0DW01.KM0DWCID
   && KM0DM160.KUMSTRID == KM0DW01.KM0DWSID
   && KM0DM160.XNXCD == KM0DW01.KM0DWXNX
   && KM0DM160.XGPCD == KM0DW01.KM0DWGPC)
    KM0DW01.KM0DWNR = " ";
  else
    KM0DW01.KM0DWNR = "X"; /* new request*/
    exit stack;
  end

   /* ---- edit fields from update instructions map ----*/

   /* note: edits are performed in reverse sequence of field*/
         /* appearance.  edit criteria are found in stmt grps.*/

  KM0DS39(); /* check 10 special inst. fields*/


     /* ---------------   end of edit  ---------------------*/

     /* ----------  check for clean edit    ------------*/

  if (KM0DM160.KM0DMMSG == " "
   && converseVar.validationMsgNum == 0)
    if (KM0DW01.KM0DWGED == "X")
      /* next sentence*/
    else
      KM0DW01.KM0DWGED = "X"; /* set good edit flag*/
      KM0DM160.KM0DMMSG = "GOOD EDIT - PRESS PF12 TO CONFIRM UPDATE";
    end
  end

    /* -----------   end of process km0d160  ------------*/

end // end KM0D160

// read/fmt spc. instr. screen
Function KM0D165()
   /* ----------  start process km0d165 ----------------*/


   /* ----  get new heading data if neccessary  ---------*/

  if (KM0DM160.KUCCOID != KM0DW01.KM0DWCID) /* COMPANY CHANGE?*/
    KUCREC.KUCCOID = KM0DM160.KUCCOID;
    KM0DS08(); /* read company table*/
    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      converseLib.validationFailed(25); /* company not found*/
      exit stack;
    end
    KM0DW01.KM0DWSID = -9999; /* force check for new store*/
  end
  KM0DM160.KUCCONM = KUCREC.KUCCONM;
  KM0DM160.KUCCOANM = KUCREC.KUCCOANM;


  if (KM0DM160.KUMSTRID != KM0DW01.KM0DWSID) /* store change?*/
    KUMREC.KUCCOID = KM0DM160.KUCCOID;
    KUMREC.KUMSTRID = KM0DM160.KUMSTRID;
    KM0DS09(); /* read store table*/
    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      converseLib.validationFailed(26); /* store not found*/
      exit stack;
    end
  end
  KM0DM160.KUMSTRNM = KUMREC.KUMSTRNM;

  if (KM0DM160.XNXCD in XNXTBL.XNXCD)
    KM0DM160.XNXDESC = XNXTBL.XNXDESC[sysVar.arrayIndex];
  end /* decode dept*/

  if (KM0DM160.XGPCD in XGPTBL.XGPCD)
    KM0DM160.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  end /* decode gpc*/

   /* - - - - - - - - - - - - - - - - - - - - - - - - - - -*/

  set KM0DW01 empty; /* clear work record*/

  KM0DW01.KM0DWCID = 0;
  KM0DW01.KM0DWSID = 0;
  KM0DW01.KM0DWXNX = 0;
  KM0DW01.KM0DWOPT = 0;

   /* -----  read customer unit to insure valid key ----*/

      /* build customer key*/
  KUNREC.KUCCOID = KM0DM160.KUCCOID;
  KUNREC.KUMSTRID = KM0DM160.KUMSTRID;
  KUNREC.XNXCD = KM0DM160.XNXCD;
  KUNREC.XGPCD = KM0DM160.XGPCD;

  KM0DS10(); /* read vcust001 (kunrec)*/
  if (SQLCA.VAGen_SQLCODE == 0)
    KM0DW01.KM0DWCID = KM0DM160.KUCCOID; /* save current key*/
    KM0DW01.KM0DWSID = KM0DM160.KUMSTRID;
    KM0DW01.KM0DWXNX = KM0DM160.XNXCD;
    KM0DW01.KM0DWGPC = KM0DM160.XGPCD;
  else
    converseLib.validationFailed(23); /* customer not found*/
    exit stack;
  end


   /* -----  read/fmt special cust. inst. to km0dm160  -----*/

      /* build customer unit key for kuqrec (vinst001)*/
  set KUQREC empty;
  KUQREC.KUCCOID = KM0DM160.KUCCOID;
  KUQREC.KUMSTRID = KM0DM160.KUMSTRID;
  KUQREC.XNXCD = KM0DM160.XNXCD;
  KUQREC.XGPCD = KM0DM160.XGPCD;

    /* select set in vinst001*/

  call "IO0300" ("SS", SQLCA, KUQREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VINST001";
    TA1REC.TA1MAP = "KM0DM160";
    KM0DW01.KM0DWCID = KUQREC.KUCCOID;
    TA1REC.TA1LOCAT[1] = KM0DW01.KM0DWCID;
    KM0DW01.KM0DWCID = KUQREC.KUMSTRID;
    TA1REC.TA1LOCAT[2] = KM0DW01.KM0DWCID;
    KM0DW01.KM0DWCID = KUQREC.XNXCD;
    TA1REC.TA1LOCAT[3] = KM0DW01.KM0DWCID;
    TA1REC.TA1LOCAT[4] = KUQREC.XGPCD;
    TA1REC.TA1PGMNM = "KM0D165";
    TA1REC.TA1TBLKE = "KEY IS IN LOCATION ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end

       /* fmt vinst001 to km0dm160*/

  KM0DS40(); /* read next vinst001*/

  KM0DWIX1 = 1;
  while (SQLCA.VAGen_SQLCODE != 100)

    KM0DW01.KM0DWXND[KM0DWIX1] = KUQREC.XNDCD; /* save key*/
    KM0DW01.KM0DWSEQ[KM0DWIX1] = KUQREC.KUQSIS; /* to array*/
    KM0DM160.XNDCD[KM0DWIX1] = KUQREC.XNDCD; /* move fields*/
    KM0DM160.KUQSINST[KM0DWIX1] = KUQREC.KUQSINST; /* to screen*/

    KM0DS40(); /* read next vinst001*/
    KM0DWIX1 = KM0DWIX1 + 1;
  end

    /* close set in vinst001*/

  call "IO0300" ("CS", SQLCA, KUQREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VINST001";
    TA1REC.TA1MAP = "KM0DM160";
    KM0DW01.KM0DWCID = KUQREC.KUCCOID;
    TA1REC.TA1LOCAT[1] = KM0DW01.KM0DWCID;
    KM0DW01.KM0DWCID = KUQREC.KUMSTRID;
    TA1REC.TA1LOCAT[2] = KM0DW01.KM0DWCID;
    KM0DW01.KM0DWCID = KUQREC.XNXCD;
    TA1REC.TA1LOCAT[3] = KM0DW01.KM0DWCID;
    TA1REC.TA1LOCAT[4] = KUQREC.XGPCD;
    TA1REC.TA1PGMNM = "KM0D165";
    TA1REC.TA1TBLKE = "KEY IS IN LOCATION ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end

   /* ----------  end process km0d165 ----------------*/

end // end KM0D165

// upt/audit vcust001 (inst ind)
Function KM0D170()
   /* ----------  start process km0d170 ----------------*/

    /* convert csp time/date format to db2 time/date stamp format*/
  XX0XS01();

    /* if vinst001 record is to be added, the instructions*/
    /* indicator in vcust001 should be updated.*/

  if (KUNREC.KUNISIND != "Y" /* label ind not set to y?*/
   && KM0DW01.KM0DWMD7 == "X") /* inst data modified?*/
     /* next sentence*/
  else
    exit stack;
  end


  KM0DS12(); /* format/add audit before image for vcust001*/

  KUNREC.KUNISIND = "Y";
  KUNREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUNREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  KM0DS14(); /* update vcust001*/

  KM0DS15(); /* fmt/write audit trail after image*/

   /* ----------  end process km0d170 ----------------*/

end // end KM0D170

// upt/audit vinst001
Function KM0D175()
   /* ----------  start process km0d175 ----------------*/

     /* update vinst001*/

  if (KM0DW01.KM0DWMD7 != "X") /* vinst001 data modified?*/
    exit stack; /* not modified - bypass update*/
  end

    /* to allow maximum flexability on change, all current*/
    /* current instructions are deleted, and all new instructions*/
    /* are added.  normally, no more than 1 or 2 instructions*/
    /* will be present.*/

    /* --- delete old instructions ---*/
  KM0DWIX1 = 1;
  while (KM0DWIX1 <= 10)
    if (KM0DW01.KM0DWXND[KM0DWIX1] != " ")
      KM0DS41(); /* delete/audit old image*/
    end
    KM0DWIX1 = KM0DWIX1 + 1;
  end


   /* --- upward adjust new lines ---*/
  KM0DWIX1 = 1;
  while (KM0DWIX1 <= 10)

    if (KM0DM160.XNDCD[KM0DWIX1] == "  " /* current row empty?*/
     && KM0DM160.KUQSINST[KM0DWIX1] == " ")

      KM0DWIX2 = KM0DWIX1 + 1;
      while (KM0DWIX2 <= 10) /* look for next non empty row*/

        if (KM0DM160.XNDCD[KM0DWIX2] != " " /* found next non empty row?*/
         || KM0DM160.KUQSINST[KM0DWIX2] != " ")
          KM0DM160.XNDCD[KM0DWIX1] = KM0DM160.XNDCD[KM0DWIX2];
          KM0DM160.KUQSINST[KM0DWIX1] = KM0DM160.KUQSINST[KM0DWIX2];
          KM0DM160.XNDCD[KM0DWIX2] = " ";
          KM0DM160.KUQSINST[KM0DWIX2] = " ";
          KM0DWIX2 = 10;
        end
        KM0DWIX2 = KM0DWIX2 + 1;

      end /* end while(look for non empty row)*/

    end /* end if current row empty*/
    KM0DWIX1 = KM0DWIX1 + 1;

  end /* end cycle thru current rows*/


   /* --- rebuild work array after upward adjustment ---*/
  KM0DWIX1 = 1;
  while (KM0DWIX1 <= 10)
    KM0DW01.KM0DWXND[KM0DWIX1] = KM0DM160.XNDCD[KM0DWIX1];
    KM0DW01.KM0DWSEQ[KM0DWIX1] = KM0DWIX1;
    KM0DWIX1 = KM0DWIX1 + 1;
  end


   /* ---- add new instructions ----*/
  KM0DW01.KM0DWISW = " ";
  KM0DWIX1 = 1;
  while (KM0DWIX1 <= 10)
    if (KM0DM160.XNDCD[KM0DWIX1] != " ")
      KM0DS42(); /* add/audit new image*/
    end
    KM0DWIX1 = KM0DWIX1 + 1;
  end

  if (KM0DW01.KM0DWISW != "X") /* no spec. inst. added*/
    KUNREC.KUNISIND = "N";
    KM0DS14();
  end

  KM0DW01.KM0DWGED = " "; /* reset edit switch*/

   /* ----------  end process km0d175 ----------------*/

end // end KM0D175

// add sperry tag (opt 5)
Function KM0D180()
   /* ----------  start process km0d180 ----------------*/

    /* if changes to customer restrictions,*/
    /* commit changes*/

  if (KM0DW01.KM0DWMD1 == "X"
   || KM0DW01.KM0DWMD7 == "X")
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* commit changes*/
  end

  KM0DW01.KM0DWMD1 = " ";
  KM0DW01.KM0DWMD7 = " ";

   /* ----------  end process km0d180 ----------------*/

end // end KM0D180

// Init records
Function KM0DS-INIT-RECS()
  /* *********************************************************************/
  /* *            Initialize records used by KM0DS*/
  /* *********************************************************************/

  set KUCREC empty;
  set KUMREC empty;
  set KUNREC empty;
  set KUSREC empty;
  set KUPREC empty;
  set KUQREC empty;
  set KUZREC empty;
  set KU3REC empty;
  set VCULVLPD empty;
  set KM0DW01 empty;
  set KM0DW02 empty;
  set XX0XW01 empty;
  set SQLCA empty;
  set TA1REC empty;

  KM0DW01.KM0DWCID = 0;
  KM0DW01.KM0DWSID = 0;
  KM0DW01.KM0DWXNX = 0;
  KM0DW01.KM0DWOPT = 0;
end // end KM0DS-INIT-RECS

// headings process for notfound
Function KM0DS00()
   /* ------------------ km0ds00  start------------------------*/

    /* set cursor at appropriate key for not found*/

  if (converseVar.validationMsgNum == 25 /* company not found?*/
   || converseVar.validationMsgNum == 272) /* not auth to maint*/
    if (KM0DM020.KUCCOID == 0)
      KM0DM020.KM0DMMSG = "PLEASE ENTER VALID CUSTOMER ID";
    end
    set KM0DM020.KUCCOID cursor, bold;
    KM0DW01.KM0DWCID = -9999; /* force read for new heading*/
    KM0DM020.KUCCONM = " ";
    KM0DM020.KUCCOANM = " ";
    KM0DM020.KUMSTRNM = " ";
    KM0DM020.XNXDESC = " ";
    KM0DM020.XGPDESC = " ";
  end

  if (converseVar.validationMsgNum == 26) /* store not found?*/
    set KM0DM020.KUMSTRID cursor, bold;
    KM0DW01.KM0DWCID = -9999; /* force read for new heading*/
    KM0DW01.KM0DWSID = -9999; /* force read for new heading*/
    KM0DM020.KUMSTRNM = " ";
    KM0DM020.XNXDESC = " ";
    KM0DM020.XGPDESC = " ";
  end

  if (converseVar.validationMsgNum == 23) /* cust not found?*/
    set KM0DM020.XNXCD cursor, bold;
    set KM0DM020.XGPCD bold;
    KM0DM020.XNXDESC = " ";
    KM0DM020.XGPDESC = " ";
  end


   /* ------------------ km0ds00 end --------------------------*/
end // end KM0DS00

// check standard entry keys
Function KM0DS01()


    /* ---------- start stmt grp km0ds01 -----------------*/

    /* statement group km0ds01 - check valid entry key,*/
       /* do menu transfers if requested*/

  KM0DW01.KM0DWMSG = " ";

  if (converseVar.eventKey is enter) /* enter - return to process*/
    return;
  else
    if (converseVar.eventKey is pa2) /* pa2 - exit application*/
      exit stack;
    else
      if (converseVar.eventKey is pf1) /* pf1 - help (not yet active)*/
        XSPF1();
        KM0DW01.KM0DWMSG = COMMAREA.CAMSG;
        COMMAREA.CATOAP = " ";
        exit stack;
      else
        if (converseVar.eventKey is pf3) /* pf3 - return to prior menu*/
          return;
        else
          if (converseVar.eventKey is pf4) /* pf4 - return to main menu*/
            XSPF4();
            KM0DW01.KM0DWMSG = COMMAREA.CAMSG; /* security error*/
            COMMAREA.CATOAP = " ";
            exit stack;
          else
            if (converseVar.eventKey is pf12) /* pf12 - confirm entry*/
              return;
            else
              converseLib.validationFailed(3); /* invalid pf key*/
            end
          end
        end
      end
    end
  end


    /* -----------   end of stmt grp km0ds01  ------------*/

end // end KM0DS01

// check labels,cash bk ind
Function KM0DS02()
   /* -----------  stmt group km0ds02 start  ---------------*/

   /* -----check labels - no value edit, set modified flag(s)*/

  if (KM0DM020.KUSTEXT1 is modified
   || KM0DM020.KUSTEXT2 is modified)
    KM0DW01.KM0DWMD3 = "X"; /* vlabel01 data modified*/
    KM0DW01.KM0DWMD1 = "X"; /* vcust001 data modified*/
  end

   /* -----------  stmt group km0ds02 end    ---------------*/
end // end KM0DS02

// check sport act., gender age
Function KM0DS05()
   /* -----------  stmt group km0ds05 start  ---------------*/

    /* check sport activity codes, gender age codes*/

   /* *****     e d i t    s p o r t    a c t i v i t y      ******/

    /* left adjust sport activity codes*/
  KM0DWIX1 = 1;
  KM0DWIX2 = 1;
  while (KM0DWIX2 <= 8)
    if (KM0DM020.KUNSPCD[KM0DWIX2] != " ")

      KM0DM020.KUNSPCD[KM0DWIX1] = KM0DM020.KUNSPCD[KM0DWIX2];
      if (KM0DWIX1 != KM0DWIX2)
        KM0DM020.KUNSPCD[KM0DWIX2] = " ";
      end
      KM0DWIX1 = KM0DWIX1 + 1;

    end
    KM0DWIX2 = KM0DWIX2 + 1;
  end


    /* must be in sport activity table*/

  KM0DWIX1 = 8;
  while (KM0DWIX1 >= 1)

    set KM0DM020.KUNSPCD[KM0DWIX1] initialAttributes;
    if (KM0DM020.KUNSPCD[KM0DWIX1] is modified)
      KM0DW01.KM0DWMD1 = "X"; /* vcust001 data modified*/

      if (KM0DM020.KUNSPCD[KM0DWIX1] != " ") /* not blank*/

        if (KM0DM020.KUNSPCD[KM0DWIX1] in XSPTBL.XSPCD) /* in act. tbl?*/

          if (XSPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* status is active?*/
            /* next sentence*/
          else
            KM0DM020.KM0DMMSG = "SPORT ACTIVITY CODE INACTIVE";
            set KM0DM020.KUNSPCD[KM0DWIX1] cursor, modified, bold;
          end

        else
          KM0DM020.KM0DMMSG = "INVALID SPORT ACTIVITY CODE";
          set KM0DM020.KUNSPCD[KM0DWIX1] cursor, modified, bold;
        end /* end if in table*/

      end /* end if not blank*/

    end /* end if modified*/

    KM0DWIX1 = KM0DWIX1 - 1;
  end /* end while*/


   /* *****          e d i t    g e n d e r    a g e         ******/

    /* left adjust gendoer age codes*/
  KM0DWIX1 = 1;
  KM0DWIX2 = 1;
  while (KM0DWIX2 <= 4)
    if (KM0DM020.XGACD[KM0DWIX2] != " ")

      KM0DM020.XGACD[KM0DWIX1] = KM0DM020.XGACD[KM0DWIX2];
      if (KM0DWIX1 != KM0DWIX2)
        KM0DM020.XGACD[KM0DWIX2] = " ";
      end
      KM0DWIX1 = KM0DWIX1 + 1;

    end
    KM0DWIX2 = KM0DWIX2 + 1;
  end

    /* must be in gender age table*/

  KM0DWIX1 = 4;
  while (KM0DWIX1 >= 1)

    set KM0DM020.XGACD[KM0DWIX1] initialAttributes;
    if (KM0DM020.XGACD[KM0DWIX1] is modified)
      KM0DW01.KM0DWMD1 = "X"; /* vcust001 data modified*/

      if (KM0DM020.XGACD[KM0DWIX1] != " ")

        if (KM0DM020.XGACD[KM0DWIX1] in XGATBL.XGACD) /* in gender age tbl?*/

          if (XGATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* if status is not active*/
             /* next sentence*/
          else
            KM0DM020.KM0DMMSG = "GENDER AGE CODE INACTIVE";
            set KM0DM020.XGACD[KM0DWIX1] cursor, modified, bold;
          end /* end if active*/

        else
          KM0DM020.KM0DMMSG = "GENDER AGE CODE INVALID";
          set KM0DM020.XGACD[KM0DWIX1] cursor, modified, bold;
        end /* end if in table*/

      end /* ; end if not blank*/

    end /* end if modified*/

    KM0DWIX1 = KM0DWIX1 - 1;
  end /* end while*/


   /* -----------  stmt group km0ds05 end    ---------------*/
end // end KM0DS05

// check acknowledged, req. flags
Function KM0DS06()
   /* -----------  stmt group km0ds06 start  ---------------*/

    /* check vendor authorization,*/
    /* order acknowldeged,*/
    /* change acknowledged, substitutes allowed.*/

   /* ***** e d i t    s u b s t i t u t e s   a l l o w e d ******/

    /* must be y or n*/

  set KM0DM020.KUNNOSFL initialAttributes;
  if (KM0DM020.KUNNOSFL is modified)
    if (KM0DM020.KUNNOSFL == "Y"
     || KM0DM020.KUNNOSFL == "N")
      KM0DW01.KM0DWMD1 = "X"; /* vcust001 data modified*/
    else
      KM0DM020.KM0DMMSG = "SUBS ALLOWED NOT Y OR N";
      set KM0DM020.KUNNOSFL cursor, modified, bold;
    end
  end

   /* *****               e d i t    c h a n g e             ******/
   /* *****       a c k n o w l e d g m e n t   f l a g      ******/

      /* must be y or n*/

  set KM0DM020.KUNCAFL initialAttributes;
  if (KM0DM020.KUNCAFL is modified)
    if (KM0DM020.KUNCAFL == "Y"
     || KM0DM020.KUNCAFL == "N")
      KM0DW01.KM0DWMD1 = "X"; /* vcust001 data modified*/
    else
      KM0DM020.KM0DMMSG = "CHG ACKNOWLEDGEMENT MUST BE Y OR N";
      set KM0DM020.KUNCAFL cursor, modified, bold;
    end
  end

   /* -----------  stmt group km0ds06 end    ---------------*/
end // end KM0DS06

// check miscl other
Function KM0DS07()
   /* -----------  stmt group km0ds07 start  ---------------*/

    /* check min alloc %*/
    /* natl acct code,*/
    /* minimum backorder qty,*/
    /* item backorder code, credit hold code,*/

   /* ***********    edit min alloc percent    **************/

  set KM0DM020.KUNMAPCT initialAttributes;
  if (KM0DM020.KUNMAPCT is modified)
    KM0DW01.KM0DWMD1 = "X"; /* vcust001 data modified*/
    if (KM0DM020.KUNMAPCT != 0)
      if (KM0DM020.KUNMAPCT > 100)
        KM0DM020.KM0DMMSG = "PERCENT MUST BE LESS THAN 101";
        set KM0DM020.KUNMAPCT cursor, modified, bold;
      end
    end
  end


   /* ***********    edit national account code     **************/

  set KM0DM020.XNACD initialAttributes;
  if (KM0DM020.XNACD is modified)
    KM0DW01.KM0DWMD1 = "X"; /* vcust001 data modified*/
    if (KM0DM020.XNACD != " ")
      if (KM0DM020.XNACD in XNATBL.XNACD)
        if (XNATBL.XXXSTAT[sysVar.arrayIndex] == "A")
           /* next sentence*/
        else
          KM0DM020.KM0DMMSG = "NATL ACCT CODE INACTIVE";
          set KM0DM020.XNACD cursor, modified, bold;
        end
      else
        KM0DM020.KM0DMMSG = "NATL ACCT CODE INVALID";
        set KM0DM020.XNACD cursor, modified, bold;
      end
    end /* end if ne blank*/
  end /* end if modified/not blank*/


   /* *****      e d i t    m i n    b a c k o r d e r       ******/
   /* *****                q u a n t i t y                   ******/
   /* ***  e d i t    i t e m    b a c k o r d e r    c o d e  ****/

    /* qty must be zero if backorder code is 'n', greater than*/
    /* zero if backorder code is 'y'.*/

  set KM0DM020.KUNABOFL initialAttributes;
  set KM0DM020.KUNBOQTY initialAttributes;
  if (KM0DM020.KUNBOQTY is modified
   || KM0DM020.KUNABOFL is modified)

    if (KM0DM020.KUNABOFL == "N")
      if (KM0DM020.KUNBOQTY == 0)
        KM0DW01.KM0DWMD1 = "X"; /* vcust001 data modified*/
      else
        set KM0DM020.KUNBOQTY cursor, modified, bold;
        KM0DM020.KM0DMMSG = "MIN BO QTY MUST BE 0 IF BO CODE = N";
      end

    else /* (code not 'n')*/

      if (KM0DM020.KUNABOFL == "Y")
        if (KM0DM020.KUNBOQTY > 0)
          KM0DW01.KM0DWMD1 = "X"; /* vcust001 data modified*/
        else
          set KM0DM020.KUNBOQTY cursor, modified, bold;
          KM0DM020.KM0DMMSG = "MIN BO QTY MUST BE > 0 IF BO CODE = Y";
        end

      else /* (code not 'n' or 'y')*/

        KM0DM020.KM0DMMSG = "ITEM BO CODE MUST BE Y OR N";
        set KM0DM020.KUNABOFL cursor, modified, bold;

      end /* end if code = y*/
    end /* end if code = n*/
  end /* end if qty or code modified*/

   /* ***  e d i t   c u s t o m e r   u n i t   s t a t u s   ****/

    /* must be a or i*/

  set KM0DM020.XXXSTAT initialAttributes;
  if (KM0DM020.XXXSTAT is modified)
    if (KM0DM020.XXXSTAT == "A"
     || KM0DM020.XXXSTAT == "I")
      KM0DW01.KM0DWMD1 = "X"; /* vcust001 data modified*/
    else
      KM0DM020.KM0DMMSG = "CUSTOMER UNIT STATUS MUST BE A OR I";
      set KM0DM020.XXXSTAT cursor, modified, bold;
    end
  end


   /* -----------  stmt group km0ds07 end    ---------------*/
end // end KM0DS07

// read vcmpny01 table
Function KM0DS08()
   /* -----------  stmt group km0ds08 start  ---------------*/

    /* read company table*/

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* read cmpny01*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(25); /* company not found*/
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      TA1REC.TA1MAP = " ";
      KM0DW01.KM0DWCID = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KM0DW01.KM0DWCID;
      TA1REC.TA1PGMNM = "KM0DS08";
      TA1REC.TA1LOC = "READING DB2 CMPNY01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end

  if (KUCREC.XAUCD in XAUTBL.XAUCD)
    if (XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KM0DW01.XATCD = XAUTBL.XATCD[sysVar.arrayIndex];
    else
      KM0DW01.XATCD = " ";
    end
  else
    KM0DW01.XATCD = " ";
  end

  if (KM0DW01.XATCD == "08")
    if (COMMAREA.CADLVL[1] == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(272);
      exit stack;
    end
  else
    if (KM0DW01.XATCD == "03")
      if (COMMAREA.CADLVL[2] == "Y")
        /* next sentence*/
      else
        converseLib.validationFailed(272);
        exit stack;
      end
    else
      if (COMMAREA.CADLVL[1] == "Y"
       || COMMAREA.CADLVL[2] == "Y")
        converseLib.validationFailed(272);
        exit stack;
      end
    end
  end
               /* Edit for Nike Canada user*/

  if (KUCREC.XLECD == "03")
    if (COMMAREA.CADLVL[3] == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(272);
      exit stack;
    end
  else
    if (COMMAREA.CADLVL[3] == "Y")
      converseLib.validationFailed(272);
      exit stack;
    end
  end
   /* -----------  stmt group km0ds08 end    ---------------*/
end // end KM0DS08

// read vstore01 table
Function KM0DS09()
   /* -----------  stmt group km0ds09 start  ---------------*/

      /* read store table*/

  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return; /* good read?*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(26); /* not found msg*/
      exit stack;
    else
      /* *****  call error routine  *******/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "KM0DS09 ";
      TA1REC.TA1LOCAT[1] = "COMPANY ";
      TA1REC.TA1LOCAT[2] = KM0DW01.KM0DWCID;
      TA1REC.TA1LOCAT[3] = "STORE   ";
      TA1REC.TA1LOCAT[4] = KM0DW01.KM0DWSID;
      TA1REC.TA1MAP = "N/A     ";
      TA1REC.TA1DBASE = "DCUST   ";
      TA1REC.TA1TBLVU = "VSTORE01";
      KM0DW01.KM0DWSQL = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KM0DW01.KM0DWSQL; /* restore sqlca to original*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      XSPF4();
    end
  end


   /* -----------  stmt group km0ds09 end    ---------------*/
end // end KM0DS09

// read vcust001 table
Function KM0DS10()
   /* -----------  stmt group km0ds10 start  ---------------*/

    /* read customer unit table*/

  call "IO0280" ("S ", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes}; /* read vcust001*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(23); /* customer not found*/
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUST001";
      TA1REC.TA1MAP = " ";
      KM0DW01.KM0DWCID = KUNREC.KUCCOID;
      TA1REC.TA1LOCAT[1] = KM0DW01.KM0DWCID;
      KM0DW01.KM0DWCID = KUNREC.KUMSTRID;
      TA1REC.TA1LOCAT[2] = KM0DW01.KM0DWCID;
      KM0DW01.KM0DWCID = KUNREC.XNXCD;
      TA1REC.TA1LOCAT[3] = KM0DW01.KM0DWCID;
      TA1REC.TA1LOCAT[4] = KUNREC.XGPCD;
      TA1REC.TA1PGMNM = "KM0DS10";
      TA1REC.TA1TBLKE = "KEY IS IN LOCATION ";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end


   /* -----------  stmt group km0ds10 end    ---------------*/
end // end KM0DS10

// format vcust001 to km0dm020
Function KM0DS11()
   /* -----------  stmt group km0ds11 start  ---------------*/
     /* format vcust001 to basic customer chg map*/

  KM0DM020.XXXSTAT = KUNREC.XXXSTAT; /* customer unit status*/
  KM0DM020.KUNABOFL = KUNREC.KUNABOFL; /* back order code*/
  KM0DM020.KUNBOQTY = KUNREC.KUNBOQTY; /* back order qty*/
  KM0DM020.KUNMAPCT = KUNREC.KUNMAPCT; /* min alloc pct*/
  KM0DM020.KUNCAFL = KUNREC.KUNCAFL; /* change ack. flag*/
  KM0DM020.KUNNOSFL = KUNREC.KUNNOSFL; /* subs. allowed flag*/
  KM0DM020.XGACD[1] = KUNREC.XGACD[1]; /* gender age 1*/
  KM0DM020.XGACD[2] = KUNREC.XGACD[2]; /* gender age 2*/
  KM0DM020.XGACD[3] = KUNREC.XGACD[3]; /* gender age 3*/
  KM0DM020.XGACD[4] = KUNREC.XGACD[4]; /* gender age 4*/
  KM0DM020.KUNSPCD[1] = KUNREC.KUNSPCD[1]; /* sport activity 1*/
  KM0DM020.KUNSPCD[2] = KUNREC.KUNSPCD[2]; /* sport activity 2*/
  KM0DM020.KUNSPCD[3] = KUNREC.KUNSPCD[3]; /* sport activity 3*/
  KM0DM020.KUNSPCD[4] = KUNREC.KUNSPCD[4]; /* sport activity 4*/
  KM0DM020.KUNSPCD[5] = KUNREC.KUNSPCD[5]; /* sport activity 5*/
  KM0DM020.KUNSPCD[6] = KUNREC.KUNSPCD[6]; /* sport activity 6*/
  KM0DM020.KUNSPCD[7] = KUNREC.KUNSPCD[7]; /* sport activity 7*/
  KM0DM020.KUNSPCD[8] = KUNREC.KUNSPCD[8]; /* sport activity 8*/
  KM0DM020.XNACD = KUNREC.XNACD; /* natl acct cd*/

   /* -----------  stmt group km0ds11 end    ---------------*/
end // end KM0DS11

// format/write vcust001 b4 image
Function KM0DS12()
   /* -----------  stmt group km0ds12 start  ---------------*/

    /* format audit recorD (cust before)*/

  set KUZREC empty;
  KUZREC.KUZTYPE = "C"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = "B"; /* blank-add, b-before, a-after*/
  KUZREC.XXXTBLNM = "VCUST001";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUNREC.KUCCOID;
  KUZREC.KUMSTRID = KUNREC.KUMSTRID;
  KUZREC.XNXCD = KUNREC.XNXCD;
  KUZREC.XGPCD = KUNREC.XGPCD;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUNREC.KUNGRP;

  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM0D   ";
    TA1REC.TA1LOCAT[1] = "KM0DS12  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VCUST001 ";
    TA1REC.TA1MAP = "KM0DM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VCUST001";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end


  KM0DS16(); /* write audit record*/

   /* -----------  stmt group km0ds12 end    ---------------*/
end // end KM0DS12

// format km0dm020 to vcust001
Function KM0DS13()
   /* -----------  stmt group km0ds13 start  ---------------*/
     /* format basic customer chg map to vcust001*/

  KUNREC.XXXSTAT = KM0DM020.XXXSTAT; /* customer unit status*/
  KUNREC.KUNABOFL = KM0DM020.KUNABOFL; /* back order code*/
  KUNREC.KUNBOQTY = KM0DM020.KUNBOQTY; /* back order qty*/
  KUNREC.KUNMAPCT = KM0DM020.KUNMAPCT; /* min alloc pct*/
  KUNREC.KUNCAFL = KM0DM020.KUNCAFL; /* change ack. flag*/
  KUNREC.KUNNOSFL = KM0DM020.KUNNOSFL; /* subs. allowed flag*/
  KUNREC.XGACD[1] = KM0DM020.XGACD[1]; /* gender age 1*/
  KUNREC.XGACD[2] = KM0DM020.XGACD[2]; /* gender age 2*/
  KUNREC.XGACD[3] = KM0DM020.XGACD[3]; /* gender age 3*/
  KUNREC.XGACD[4] = KM0DM020.XGACD[4]; /* gender age 4*/
  KUNREC.KUNSPCD[1] = KM0DM020.KUNSPCD[1]; /* sport activity 1*/
  KUNREC.KUNSPCD[2] = KM0DM020.KUNSPCD[2]; /* sport activity 2*/
  KUNREC.KUNSPCD[3] = KM0DM020.KUNSPCD[3]; /* sport activity 3*/
  KUNREC.KUNSPCD[4] = KM0DM020.KUNSPCD[4]; /* sport activity 4*/
  KUNREC.KUNSPCD[5] = KM0DM020.KUNSPCD[5]; /* sport activity 5*/
  KUNREC.KUNSPCD[6] = KM0DM020.KUNSPCD[6]; /* sport activity 6*/
  KUNREC.KUNSPCD[7] = KM0DM020.KUNSPCD[7]; /* sport activity 7*/
  KUNREC.KUNSPCD[8] = KM0DM020.KUNSPCD[8]; /* sport activity 8*/
  KUNREC.XNACD = KM0DM020.XNACD; /* natl acct cd*/

    /* check add for label(s)*/

  if (KM0DM020.KUSTEXT1 == " " /* label data entered?*/
   && KM0DM020.KUSTEXT2 == " ")
    KUNREC.KUNLABIN = "N"; /* set labels indicator*/
  else
    KUNREC.KUNLABIN = "Y";
  end

  KUNREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUNREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* -----------  stmt group km0ds13 end    ---------------*/
end // end KM0DS13

// update vcust001
Function KM0DS14()
   /* -----------  stmt group km0ds14 start  ---------------*/

    /* update customer unit table*/

  call "IO0280" ("U ", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(29); /* data updated*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(81); /* customer upt since last ref*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
    else
      KM0DW01.KM0DWSQL = SQLCA.SQLCAREC; /* hold error sqlca*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      SQLCA.SQLCAREC = KM0DW01.KM0DWSQL;
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUST001";
      TA1REC.TA1MAP = " ";
      KM0DW01.KM0DWCID = KUNREC.KUCCOID;
      TA1REC.TA1LOCAT[1] = KM0DW01.KM0DWCID;
      KM0DW01.KM0DWCID = KUNREC.KUMSTRID;
      TA1REC.TA1LOCAT[2] = KM0DW01.KM0DWCID;
      KM0DW01.KM0DWCID = KUNREC.XNXCD;
      TA1REC.TA1LOCAT[3] = KM0DW01.KM0DWCID;
      TA1REC.TA1LOCAT[4] = KUNREC.XGPCD;
      TA1REC.TA1PGMNM = "KM0DS14";
      TA1REC.TA1TBLKE = "KEY IS IN LOCATION ";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end


   /* -----------  stmt group km0ds14 end    ---------------*/
end // end KM0DS14

// fmt/write vcust001 aft image
Function KM0DS15()
   /* -----------  stmt group km0ds15 start  ---------------*/

    /* format audit recorD (cust after)*/

  set KUZREC empty;
  KUZREC.KUZTYPE = "C"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = "A"; /* blank-add, b-before, a-after*/
  KUZREC.XXXTBLNM = "VCUST001";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUNREC.KUCCOID;
  KUZREC.KUMSTRID = KUNREC.KUMSTRID;
  KUZREC.XNXCD = KUNREC.XNXCD;
  KUZREC.XGPCD = KUNREC.XGPCD;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUNREC.KUNGRP;

  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM0D   ";
    TA1REC.TA1LOCAT[1] = "KM0DS15  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VCUST001 ";
    TA1REC.TA1MAP = "KM0DM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VCUST001";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

  KM0DS16(); /* write audit record*/

   /* -----------  stmt group km0ds15 end    ---------------*/
end // end KM0DS15

// write audit record
Function KM0DS16()
   /* -----------  stmt group km0ds16 start  ---------------*/

     /* write audit record*/

  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    KM0DW01.KM0DWSQL = SQLCA.SQLCAREC; /* hold error sqlca*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* syncpoint rollback*/
    SQLCA.SQLCAREC = KM0DW01.KM0DWSQL;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUAUD01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1PGMNM = "KM0DS16";
    TA1REC.TA1LOC = "ADD DB2 DCUST.VCUAUD01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end

   /* -----------  stmt group km0ds16 end    ---------------*/
end // end KM0DS16

// edit special cust. grp fields
Function KM0DS36()
   /* -------------  start stmt grp km0ds36  ---------------*/

      /* check special customer group codes*/
      /* must be in xsgtbl if present*/

  if (KM0DM130 is modified) /* in any fields modified*/
    /* ***** left justify spcl cust groups on screen ******/

    /* **********  find first blank field  *************************/
    KM0DW01.KM0DWIX1 = 1; /* initialize index to 1*/
    while (KM0DW01.KM0DWIX1 <= 10
     /* loop thru scrn to find empty*/
     && KM0DM130.XSGCD[KM0DWIX1] != " ") /* loop thru scrn to find empty*/
      KM0DW01.KM0DWIX1 = KM0DW01.KM0DWIX1 + 1; /* increment index*/
    end /* end of "while" loop*/
                                   /* ;*/
    /* *****  suck up any non-blank fields into blank fields ******/
    KM0DW01.KM0DWIX2 = KM0DW01.KM0DWIX1 + 1; /* index 2 = index 1 + 1*/
    while (KM0DW01.KM0DWIX2 <= 10) /* loop thru rest of fields*/
      if (KM0DM130.XSGCD[KM0DWIX2] != " ") /* if next field not blank*/
        KM0DM130.XSGCD[KM0DWIX1] = KM0DM130.XSGCD[KM0DWIX2];
                                   /* ;             move field to blank*/
        KM0DM130.XSGCD[KM0DWIX2] = " "; /* blank out from field*/
        KM0DW01.KM0DWIX1 = KM0DW01.KM0DWIX1 + 1; /* increment index 1*/
        KM0DW01.KM0DWIX2 = KM0DW01.KM0DWIX2 + 1; /* increment index 2*/
      else /* else(field not blank)*/
        KM0DW01.KM0DWIX2 = KM0DW01.KM0DWIX2 + 1; /* increment index 2*/
      end /* end of "if" statement*/
    end /* end of "while" loop*/

    /* *************************************************************/

    KM0DWIX1 = 10;
    while (KM0DWIX1 > 0)
      set KM0DM130.XSGCD[KM0DWIX1] initialAttributes;
      set KM0DM130.XSGCD[KM0DWIX1] modified;
      KM0DM130.XSGABRV[KM0DWIX1] = " ";

      if (KM0DM130.XSGCD[KM0DWIX1] != " ") /* code entered ?*/
        KM0DW01.KM0DWGSW = "Y";
        if (KM0DM130.XSGCD[KM0DWIX1] in XSGTBL.XSGCD) /* in table?*/

          if (XSGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active code?*/
            KM0DM130.XSGABRV[KM0DWIX1] = XSGTBL.XSGABRV[sysVar.arrayIndex];
          else
            set KM0DM130.XSGCD[KM0DWIX1] cursor, modified, bold;
            KM0DM130.KM0DMMSG = "SPECIAL CUST. GROUP ID INACTIVE";
          end

        else
          set KM0DM130.XSGCD[KM0DWIX1] cursor, modified, bold;
          KM0DM130.KM0DMMSG = "SPECIAL CUST. GROUP ID INVALID";
        end
      end


      KM0DWIX1 = KM0DWIX1 - 1;
    end /* end while gt 0*/
  end /* end of "if" statement*/

   /* *********************************************************/
          /* edit for duplicate group codes*/

  if (KM0DM130 is modified)
    KM0DW01.KM0DWIX1 = 1;

    while (KM0DW01.KM0DWIX1 <= 10)
      KM0DW01.KM0DWIX2 = 10;
      while (KM0DW01.KM0DWIX2 > 0)
        if (KM0DM130.XSGCD[KM0DWIX1] == KM0DM130.XSGCD[KM0DWIX2]
         && KM0DM130.XSGCD[KM0DWIX1] != " "
         && KM0DW01.KM0DWIX1 != KM0DW01.KM0DWIX2)
          set KM0DM130.XSGCD[KM0DWIX2] cursor, modified, bold;
          KM0DM130.KM0DMMSG = "DUPLICATE CUST. GROUP CODE";
        end
        KM0DW01.KM0DWIX2 = KM0DW01.KM0DWIX2 - 1;
      end
      if (KM0DM130.XSGCD[KM0DWIX1] == " ")
        KM0DW01.KM0DWIX1 = 10;
      end
      KM0DW01.KM0DWIX1 = KM0DW01.KM0DWIX1 + 1;
    end
  end


  KM0DW01.KM0DWMD6 = "X"; /* vcugrp01 data modified*/

   /* -------------  end   stmt grp km0ds36  ---------------*/
end // end KM0DS36

// fmt change to vcugrp01
Function KM0DS37()
   /* -----------  stmt group km0ds37 start  ---------------*/

     /* format special cust. group changes to vcugrp01*/

     /* (key fields should still be in kuprec)*/

  KUPREC.XSOCD = KM0DM130.XSOCD; /* sales off id*/

  KM0DWIX1 = 1;
  while (KM0DWIX1 <= 10)
    KUPREC.XSGCD[KM0DWIX1] = KM0DM130.XSGCD[KM0DWIX1]; /* spc grp id*/
    KM0DWIX1 = KM0DWIX1 + 1;
  end

  if (KUPREC.ZZZSDT != 0)
    KUPREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* new change date*/
  else
    KUPREC.ZZZSDT = XX0XW01.XX0XWDAT; /* new setup date*/
  end
  KUPREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

   /* -----------  stmt group km0ds37 end    ---------------*/
end // end KM0DS37

// fmt/write vcugrp01 after audit
Function KM0DS38()
   /* ----------  start stmt grp km0ds38 ----------------*/

      /* format/write vcugrp01 aft audit*/

  set KUZREC empty;
  if (KUPREC.ZZZSDT == XX0XW01.XX0XWDAT
   && KUPREC.ZZZCHGTM == XX0XW01.XX0XWTIM)
    KUZREC.KUZTYPE = "A"; /* a-add,c-change,d-delete,i-inactivate*/
    KUZREC.KUZBFCD = " "; /* blank-add, b-before, a-after*/
  else
    KUZREC.KUZTYPE = "C"; /* a-add,c-change,d-delete,i-inactivate*/
    KUZREC.KUZBFCD = "A"; /* blank-add, b-before, a-after*/
  end
  KUZREC.XXXTBLNM = "VCUGRP01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUPREC.KUCCOID;
  KUZREC.KUMSTRID = KUPREC.KUMSTRID;
  KUZREC.XNXCD = KUPREC.XNXCD;
  KUZREC.XGPCD = KUPREC.XGPCD;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUPREC.KUPGRP;

  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM0D   ";
    TA1REC.TA1LOCAT[1] = "KM0DS38  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VCUGRP01 ";
    TA1REC.TA1MAP = "KM0DM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VCUGRP01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

  KM0DS16(); /* write after image audit record*/

   /* ----------  end stmt grp km0ds38 ----------------*/
end // end KM0DS38

// edit special instr. lines
Function KM0DS39()
   /* -------------  start stmt grp km0ds39  ---------------*/

      /* check special instruction lines*/
      /* xndcd must be in xndtbl if present*/

  KM0DWIX1 = 10;
  while (KM0DWIX1 > 0)

    set KM0DM160.XNDCD[KM0DWIX1] initialAttributes;
    set KM0DM160.KUQSINST[KM0DWIX1] initialAttributes;
    if (KM0DM160.XNDCD[KM0DWIX1] is modified
     || KM0DM160.KUQSINST[KM0DWIX1] is modified)
      KM0DW01.KM0DWMD7 = "X"; /* vinst001 data modified*/

      if (KM0DM160.XNDCD[KM0DWIX1] == " " /* delete request?*/
       && KM0DM160.KUQSINST[KM0DWIX1] == " ")
         /* next sentence*/
      end

      if (KM0DM160.XNDCD[KM0DWIX1] == " " /* no dept and inst?*/
       && KM0DM160.KUQSINST[KM0DWIX1] != " ")
        set KM0DM160.XNDCD[KM0DWIX1] cursor, modified, bold;
        KM0DM160.KM0DMMSG = "MUST HAVE DEPT WITH INSTRUCTION";
      end

      if (KM0DM160.XNDCD[KM0DWIX1] != " " /* dept and no inst?*/
       && KM0DM160.KUQSINST[KM0DWIX1] == " ")
        set KM0DM160.KUQSINST[KM0DWIX1] cursor, modified, bold;
        KM0DM160.KM0DMMSG = "MUST HAVE INSTRUCTION WITH DEPT";
      end

      if (KM0DM160.XNDCD[KM0DWIX1] != " " /* dept and inst?*/
       && KM0DM160.KUQSINST[KM0DWIX1] != " ")
        if (KM0DM160.XNDCD[KM0DWIX1] in XNDTBL.XNDCD) /* valid dept id?*/
          if (XNDTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active?*/
             /* next sentence*/
          else
            set KM0DM160.XNDCD[KM0DWIX1] cursor, modified, bold;
            KM0DM160.KM0DMMSG = "DEPT ID INACTIVE";
          end /* end if active*/
        else
          set KM0DM160.XNDCD[KM0DWIX1] cursor, modified, bold;
          KM0DM160.KM0DMMSG = "DEPT ID INVALID";
        end /* end if in dept*/
      end /* end if dept and inst present*/

    end /* end if dept or inst modified*/

    KM0DWIX1 = KM0DWIX1 - 1;
  end /* end while gt 0*/


   /* -------------  end stmt grp km0ds39  ---------------*/
end // end KM0DS39

// heading process on notfound
Function KM0DS3B()
   /* ------------------ km0ds3b start ------------------------*/

    /* set cursor at appropriate key for not found*/

  if (converseVar.validationMsgNum == 25 /* company not found?*/
   || converseVar.validationMsgNum == 272) /* not auth to maint*/
    if (KM0DM130.KUCCOID == 0)
      KM0DM130.KM0DMMSG = "PLEASE ENTER VALID CUSTOMER ID";
    end
    set KM0DM130.KUCCOID cursor, bold;
    KM0DW01.KM0DWCID = -9999; /* force read for new heading*/
    KM0DM130.KUCCONM = " ";
    KM0DM130.KUCCOANM = " ";
    KM0DM130.KUMSTRNM = " ";
    KM0DM130.XNXDESC = " ";
    KM0DM130.XGPDESC = " ";
  end

  if (converseVar.validationMsgNum == 26) /* store not found?*/
    set KM0DM130.KUMSTRID cursor, bold;
    KM0DW01.KM0DWCID = -9999; /* force read for new heading*/
    KM0DW01.KM0DWSID = -9999; /* force read for new heading*/
    KM0DM130.KUMSTRNM = " ";
    KM0DM130.XNXDESC = " ";
    KM0DM130.XGPDESC = " ";
  end

  if (converseVar.validationMsgNum == 23) /* cust not found?*/
    set KM0DM130.XNXCD cursor, bold;
    set KM0DM130.XGPCD bold;
    KM0DM130.XNXDESC = " ";
    KM0DM130.XGPDESC = " ";
  end

   /* ------------------ km0ds3b end --------------------------*/
end // end KM0DS3B

// headings process on notfound
Function KM0DS3C()
   /* ------------------ km0ds3c start ------------------------*/

    /* set cursor at appropriate key for not found*/

  if (converseVar.validationMsgNum == 25 /* company not found?*/
   || converseVar.validationMsgNum == 272) /* not auth to maint*/
    if (KM0DM160.KUCCOID == 0)
      KM0DM160.KM0DMMSG = "PLEASE ENTER VALID CUSTOMER ID";
    end
    set KM0DM160.KUCCOID cursor, bold;
    KM0DW01.KM0DWCID = -9999; /* force read for new heading*/
    KM0DM160.KUCCONM = " ";
    KM0DM160.KUCCOANM = " ";
    KM0DM160.KUMSTRNM = " ";
    KM0DM160.XNXDESC = " ";
    KM0DM160.XGPDESC = " ";
  end

  if (converseVar.validationMsgNum == 26) /* store not found?*/
    set KM0DM160.KUMSTRID cursor, bold;
    KM0DW01.KM0DWCID = -9999; /* force read for new heading*/
    KM0DW01.KM0DWSID = -9999; /* force read for new heading*/
    KM0DM160.KUMSTRNM = " ";
    KM0DM160.XNXDESC = " ";
    KM0DM160.XGPDESC = " ";
  end

  if (converseVar.validationMsgNum == 23) /* cust not found?*/
    set KM0DM160.XNXCD cursor, bold;
    set KM0DM160.XGPCD bold;
    KM0DM160.XNXDESC = " ";
    KM0DM160.XGPDESC = " ";
  end

   /* ------------------ km0ds3c end --------------------------*/
end // end KM0DS3C

// edit sales office code
Function KM0DS3D()


   /* *************************************************************/
   /* *****    e d i t    s a l e s   o f f i c e   c o d e  ******/
   /* *************************************************************/


  set KM0DM130.XSOCD initialAttributes; /* initialize field attributes*/

  if (KM0DM130.XSOCD != " ")
                                   /* if sales office is not blank*/
    if (KM0DM130.XSOCD in XSOTBL.XSOCD) /* if sales office in tbl*/
      /* ***************  check status code of entry  ****************/
      if (XSOTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KM0DM130.XSOCD cursor, bold; /* highlight error*/
      else /* ;end of "if" statement*/
        KM0DW01.KM0DWGSW = "Y"; /* set grp to 'y'*/
      end /* end of "if" statement*/
    else /* else(not in tbl)*/
      converseLib.validationFailed(17); /* error"invalide code"*/
      set KM0DM130.XSOCD cursor, bold; /* highlight error*/
    end /* end of "if" statement*/
  else /* else(sls off code blank*/
    /* next sentence                ;               okay*/
  end /* end of "if" statement*/



end // end KM0DS3D

// read next vinst001 row
Function KM0DS40()
   /* ----------  start stmt grp km0ds40 ----------------*/

    /* read next row in vinst001 selected set*/

  call "IO0300" ("SN", SQLCA, KUQREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VINST001";
    TA1REC.TA1MAP = "KM0DM160";
    KM0DW01.KM0DWCID = KUQREC.KUCCOID;
    TA1REC.TA1LOCAT[1] = KM0DW01.KM0DWCID;
    KM0DW01.KM0DWCID = KUQREC.KUMSTRID;
    TA1REC.TA1LOCAT[2] = KM0DW01.KM0DWCID;
    KM0DW01.KM0DWCID = KUQREC.XNXCD;
    TA1REC.TA1LOCAT[3] = KM0DW01.KM0DWCID;
    TA1REC.TA1LOCAT[4] = KUQREC.XGPCD;
    TA1REC.TA1PGMNM = "KM0DS40";
    TA1REC.TA1TBLKE = "KEY IS IN LOCATION ";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4();
  end

   /* ----------  end stmt grp km0ds40 ----------------*/
end // end KM0DS40

// delete/audit old vinst001
Function KM0DS41()
   /* ----------  start stmt grp km0ds41 ---------------*/

        /* delete old instructions*/

   /* ----  build key ----*/
  KUQREC.KUCCOID = KM0DM160.KUCCOID;
  KUQREC.KUMSTRID = KM0DM160.KUMSTRID;
  KUQREC.XNXCD = KM0DM160.XNXCD;
  KUQREC.XGPCD = KM0DM160.XGPCD;
  KUQREC.XNDCD = KM0DW01.KM0DWXND[KM0DWIX1];
  KUQREC.KUQSIS = KM0DW01.KM0DWSEQ[KM0DWIX1];

   /* ---  read old instruction record for audit image ---*/
  call "IO0300" ("S ", SQLCA, KUQREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      converseLib.validationFailed(92); /* data updated since last ref*/
      exit stack;
    else
      KM0DW01.KM0DWSQL = SQLCA.SQLCAREC; /* hold error sqlca*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      SQLCA.SQLCAREC = KM0DW01.KM0DWSQL;
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VINST001";
      TA1REC.TA1MAP = "KM0DM160";
      KM0DW01.KM0DWCID = KUQREC.KUCCOID;
      TA1REC.TA1LOCAT[1] = KM0DW01.KM0DWCID;
      KM0DW01.KM0DWCID = KUQREC.KUMSTRID;
      TA1REC.TA1LOCAT[2] = KM0DW01.KM0DWCID;
      KM0DW01.KM0DWCID = KUQREC.XNXCD;
      TA1REC.TA1LOCAT[3] = KM0DW01.KM0DWCID;
      TA1REC.TA1LOCAT[4] = KUQREC.XGPCD;
      TA1REC.TA1PGMNM = "KM0DS41";
      TA1REC.TA1TBLKE = "KEY IS IN LOCATION ";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end

   /* ---  format delete audit recorD  ----*/
  set KUZREC empty;
  KUZREC.KUZTYPE = "C"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = "D"; /* blank-add, b-before, a-after*/
  KUZREC.XXXTBLNM = "VINST001";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUQREC.KUCCOID;
  KUZREC.KUMSTRID = KUQREC.KUMSTRID;
  KUZREC.XNXCD = KUQREC.XNXCD;
  KUZREC.XGPCD = KUQREC.XGPCD;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUQREC.KUQGRP;


  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM0D   ";
    TA1REC.TA1LOCAT[1] = "KM0DS41  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VINST001 ";
    TA1REC.TA1MAP = "KM0DM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VINST001";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

   /* --- delete vinst001----*/
  call "IO0300" ("D ", SQLCA, KUQREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      converseLib.validationFailed(92); /* data updated since last ref*/
      exit stack;
    else
      KM0DW01.KM0DWSQL = SQLCA.SQLCAREC; /* hold error sqlca*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      SQLCA.SQLCAREC = KM0DW01.KM0DWSQL;
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VINST001";
      TA1REC.TA1MAP = "KM0DM160";
      KM0DW01.KM0DWCID = KUQREC.KUCCOID;
      TA1REC.TA1LOCAT[1] = KM0DW01.KM0DWCID;
      KM0DW01.KM0DWCID = KUQREC.KUMSTRID;
      TA1REC.TA1LOCAT[2] = KM0DW01.KM0DWCID;
      KM0DW01.KM0DWCID = KUQREC.XNXCD;
      TA1REC.TA1LOCAT[3] = KM0DW01.KM0DWCID;
      TA1REC.TA1LOCAT[4] = KUQREC.XGPCD;
      TA1REC.TA1PGMNM = "KM0DS41";
      TA1REC.TA1TBLKE = "KEY IS IN LOCATION ";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end

  KM0DS16(); /* write audit record*/

   /* ----------  end stmt grp km0ds41  --------------*/
end // end KM0DS41

// add/audit new vinst001
Function KM0DS42()
   /* ----------  start stmt grp km0ds42 ---------------*/

        /* add new instructions*/

      /* --- format for add ---*/
  KUQREC.KUCCOID = KM0DM160.KUCCOID;
  KUQREC.KUMSTRID = KM0DM160.KUMSTRID;
  KUQREC.XNXCD = KM0DM160.XNXCD;
  KUQREC.XGPCD = KM0DM160.XGPCD;
  KUQREC.XNDCD = KM0DM160.XNDCD[KM0DWIX1];
  KUQREC.KUQSIS = KM0DWIX1;
  KUQREC.KUQSINST = KM0DM160.KUQSINST[KM0DWIX1];
  KUQREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  KUQREC.ZZZSDT = XX0XW01.XX0XWDAT;

    /* add new vinst001*/
  call "IO0300" ("A ", SQLCA, KUQREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(29);
  else
    if (SQLCA.VAGen_SQLCODE == -803)
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      converseLib.validationFailed(92); /* data updated since last ref*/
      exit stack;
    else
      KM0DW01.KM0DWSQL = SQLCA.SQLCAREC; /* hold error sqlca*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      SQLCA.SQLCAREC = KM0DW01.KM0DWSQL;
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VINST001";
      TA1REC.TA1MAP = "KM0DM160";
      KM0DW01.KM0DWCID = KUQREC.KUCCOID;
      TA1REC.TA1LOCAT[1] = KM0DW01.KM0DWCID;
      KM0DW01.KM0DWCID = KUQREC.KUMSTRID;
      TA1REC.TA1LOCAT[2] = KM0DW01.KM0DWCID;
      KM0DW01.KM0DWCID = KUQREC.XNXCD;
      TA1REC.TA1LOCAT[3] = KM0DW01.KM0DWCID;
      TA1REC.TA1LOCAT[4] = KUQREC.XGPCD;
      TA1REC.TA1PGMNM = "KM0DS42";
      TA1REC.TA1TBLKE = "KEY IS IN LOCATION ";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4();
    end
  end

   /* ---  format add audit recorD  ----*/
  set KUZREC empty;
  KUZREC.KUZTYPE = "A"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = " "; /* blank-add, b-before, a-after*/
  KUZREC.XXXTBLNM = "VINST001";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUQREC.KUCCOID;
  KUZREC.KUMSTRID = KUQREC.KUMSTRID;
  KUZREC.XNXCD = KUQREC.XNXCD;
  KUZREC.XGPCD = KUQREC.XGPCD;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUQREC.KUQGRP;

  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM0D   ";
    TA1REC.TA1LOCAT[1] = "KM0DS42  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VINST001 ";
    TA1REC.TA1MAP = "KM0DM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VINST001";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

  KM0DS16(); /* write audit record*/

  KM0DW01.KM0DWISW = "X"; /* indicates spec inst exists*/

   /* ----------  end stmt grp km0ds42 ---------------*/
end // end KM0DS42

// field security - group 3 chg
Function KM0DSS5()
   /* -----------  start stmt grp km0dss5 ------------------------*/

    /* set group 3 change security*/

  set KM0DM020.KUSTEXT1 skip; /* special label 1*/
  set KM0DM020.KUSTEXT2 skip; /* special label 2*/
  set KM0DM020.KUNABOFL skip; /* item backorder code*/
  set KM0DM020.KUNBOQTY skip; /* minimum backorder qty*/
  set KM0DM020.KUNMAPCT skip; /* minimum backorder qty*/
  set KM0DM020.KUNCAFL skip; /* change ack. flag*/
  set KM0DM020.KUNNOSFL skip; /* subs allowed flag*/

   /* ----------- end stmt grp km0dss5 ------------------------*/
end // end KM0DSS5

// field security - group 4 chg
Function KM0DSS7()
   /* -----------  start stmt grp km0dss7 ------------------------*/

    /* set group 4 change security*/

  set KM0DM020.XGACD[1] skip; /* gender age (1)*/
  set KM0DM020.XGACD[2] skip; /* gender age (2)*/
  set KM0DM020.XGACD[3] skip; /* gender age (3)*/
  set KM0DM020.XGACD[4] skip; /* gender age (4)*/
  set KM0DM020.KUNSPCD[1] skip; /* sport activity code (1)*/
  set KM0DM020.KUNSPCD[2] skip; /* sport activity code (2)*/
  set KM0DM020.KUNSPCD[3] skip; /* sport activity code (3)*/
  set KM0DM020.KUNSPCD[4] skip; /* sport activity code (4)*/
  set KM0DM020.KUNSPCD[5] skip; /* sport activity code (5)*/
  set KM0DM020.KUNSPCD[6] skip; /* sport activity code (6)*/
  set KM0DM020.KUNSPCD[7] skip; /* sport activity code (7)*/
  set KM0DM020.KUNSPCD[8] skip; /* sport activity code (8)*/
  set KM0DM020.XNACD skip; /* national acct code*/

   /* ----------- end stmt grp km0dss7 ------------------------*/
end // end KM0DSS7

// field security - group 5 chg
Function KM0DSS9()
   /* -----------  start stmt grp km0dss9 ------------------------*/

    /* set group 5 change security*/

  set KM0DM020.XXXSTAT skip; /* customer unit status*/

   /* ----------- end stmt grp km0dss9 ------------------------*/
end // end KM0DSS9

// group 9 field security - chg
Function KM0DSSF()
   /* ------------------ km0dssf start ------------------------*/

    /* group 9 field security - chg*/

  set KM0DM130.XSOCD skip;

  KM0DW01.KM0DWIX1 = 1; /* initialize index to 1*/
  while (KM0DW01.KM0DWIX1 <= 10) /* loop thru all fields on screen*/
    set KM0DM130.XSGCD[KM0DWIX1] skip;
    set KM0DM130.XSGABRV[KM0DWIX1] skip;
    KM0DW01.KM0DWIX1 = KM0DW01.KM0DWIX1 + 1;
  end /* end of "while" loop*/

   /* ------------------ km0dssf end   ------------------------*/
end // end KM0DSSF

// field security - group 8 chg
Function KM0DSSH()
   /* ------------------ km0dssh start-------------------------*/

    /* field group 8 security - chg*/


  KM0DW01.KM0DWIX1 = 1; /* initialize index to 1*/
  while (KM0DW01.KM0DWIX1 <= 10) /* loop thru all lines on screen*/
    set KM0DM160.XNDCD[KM0DWIX1] skip;
    set KM0DM160.KUQSINST[KM0DWIX1] skip;
                             /* ;      protect fields*/
    KM0DW01.KM0DWIX1 = KM0DW01.KM0DWIX1 + 1;
                             /* ;      incriment index*/
  end /* end of "while" loop*/

   /* ------------------ km0dssh end  -------------------------*/
end // end KM0DSSH

//*** RECORD=KM0DW01 ****
// this record contains work fields used entirely within km0d.
// ***********************
Record KM0DW01 type basicRecord
  10 KM0DWUSR KM0DWUSR ; 
    15 KM0DWCID KM0DWCID ; 
      20 KM0DWCID-CHAR KM0DWCID-CHAR ; 
    15 KM0DWSID KM0DWSID ; 
      20 KM0DWSID-CHAR KM0DWSID-CHAR ; 
    15 KM0DWXNX KM0DWXNX ; 
      20 KM0DWXNX-CHAR KM0DWXNX-CHAR ; 
    15 KM0DWGPC KM0DWGPC ; 
    15 KM0DWOPT KM0DWOPT ; 
      20 KM0DWOPT-CHAR KM0DWOPT-CHAR ; 
  10 KM0DWGED KM0DWGED ; 
  10 KM0DWMD1 KM0DWMD1 ; 
  10 KM0DWMD2 KM0DWMD2 ; 
  10 KM0DWMD3 KM0DWMD3 ; 
  10 KM0DWMD4 KM0DWMD4 ; 
  10 KM0DWMD6 KM0DWMD6 ; 
  10 KM0DWMD7 KM0DWMD7 ; 
  10 KM0DWNR KM0DWNR ; 
  10 KM0DWIX1 KM0DWIX1 ; 
  10 KM0DWIX2 KM0DWIX2 ; 
  10 KM0DWXND KM0DWXND [10] ; 
  10 KM0DWSEQ KM0DWSEQ [10] ; 
  10 KM0DWSQL KM0DWSQL ; 
  10 KM0DWMSG KM0DWMSG ; 
  10 KM0DWACS KM0DWACS ; 
  10 KM0DWISW KM0DWISW ; 
  10 KM0DWGSW KM0DWGSW ; 
  10 XATCD XATCD ; 
end // end KM0DW01

Record KM0DW02 type basicRecord
  10 KM0DWOPT KM0DWOPT ; 
end // end KM0DW02

// add/change switch
DataItem KM0DWACS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   company
DataItem KM0DWCID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   company redefined as char
DataItem KM0DWCID-CHAR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// good edit flag
DataItem KM0DWGED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   gpc
DataItem KM0DWGPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special cust grp switch
DataItem KM0DWGSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special instruction switch
DataItem KM0DWISW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index 1
DataItem KM0DWIX1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index 2
DataItem KM0DWIX2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// vcust001 modified
DataItem KM0DWMD1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// vblgrp01 modified
DataItem KM0DWMD2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// vlabel01 modified
DataItem KM0DWMD3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// vreph001 modified
DataItem KM0DWMD4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// vcugrp01 modified
DataItem KM0DWMD6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// vinst001 modified
DataItem KM0DWMD7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// stage area for camsg
DataItem KM0DWMSG char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new cust unit request
DataItem KM0DWNR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   option from km0m
DataItem KM0DWOPT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   option redefined as char
DataItem KM0DWOPT-CHAR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// instruction sequence
DataItem KM0DWSEQ num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   store
DataItem KM0DWSID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   store redefined as char
DataItem KM0DWSID-CHAR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save area for sqlca/reset
DataItem KM0DWSQL char(136)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reformat area for causera
DataItem KM0DWUSR char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// instruction dept
DataItem KM0DWXND char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//   dept
DataItem KM0DWXNX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   dept redefined as char
DataItem KM0DWXNX-CHAR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

