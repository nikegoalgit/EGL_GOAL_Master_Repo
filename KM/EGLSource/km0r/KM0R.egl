package km0r;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import kl.common.*;
import ku.common.*;
import pw.common.*;
import sy.common.*;
import ta.common.*;
import xa.common.*;
//*** PROGRAM=KM0R ****
// ----------------  km0r - chg/inq handle exceptions ---------
// 
// overview:  this application performs change functions for
//            the handling exception table.
// 
// date written: 03/91
// author:       Dianne Salzwedel
// 
// ************************************************************
// *              maintenance history log                     *
// ************************************************************
// * 05/08/91   dsalzw    removed km0m from setting security
// * 06/09/91   dsalzw    db changes
// * 06/19/91   dsalzw    fix misc problems with windows
// * 10/11/91   CHELLM    Added handling costs 1 thru 5.
// * 02/10/92   WJOHNS    Allow application to use wild cards
// *                      for store, dept, gpc.
// * 08/26/92   cancie    complete rewrite.
// 12-july-1993         dlegg      Change call to TA0020 with
//                                 ABND to RETN. KM0R-205,210,
//                                 215,225,230,235,335,340,412,
//                                 425,430,440,450.
// 15-july-1993         dlegg      Add sgrp to initialize all
//                                 records used by appl. Also
//                                 check for numeric values
//                                 before moves in KM0R-000.
// * 10/01/93   CHELLM    CSP 4.1 Conversion.
// * 04/10/95   CHELLM    Added User Security For Nike Canada.
// * 06/16/97   kclar1    Added wildcard requests
// *********************
Program KM0R type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KM0RW01 KM0RW01; // record
  KM0RW02 KM0RW02; // record
  KUCREC KUCREC; // record
  KUFREC KUFREC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  KUZREC KUZREC; // record
  PWRREC PWRREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  XA0AW02 XA0AW02; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KIZTBL {deleteAfterUse = yes}; // table
  use XATTBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XHDTBL {deleteAfterUse = yes}; // table
  use XNXTBL {deleteAfterUse = yes}; // table
  use XPATBL {deleteAfterUse = yes}; // table
  use KM0RM.KM0RM000,  // forms
      KM0RM.KM0RM010, 
      KM0RM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KM0R-000: KM0R-000();
    goto KM0R-100; /* converse HNDLX maint screen*/

    KM0R-100: KM0R-100();

    goto KM0R-100; /* handle except maint screen*/

  end // end main
end // end KM0R


// Initialize
Function KM0R-000()
   /* ********************************************/
   /* km0r-000  initialization of variables   **/
   /* used in the processing of the hndlx     **/
   /* screen                                  **/
   /* ********************************************/

  XSENTRY();

  XSSEGTR(); /* set segmented transaction id*/

  set KM0RM000 initial; /**/
  set KM0RM010 initial; /**/

  KM0RS-INIT-RECS();

  KM0RW01.KM0RW-HNDL-MOD-FL = "N"; /* init hndlx update flag*/
  KM0RW01.KM0RW-EDIT-FL = "N"; /* init ready to update flag*/
  KM0RW01.KM0RW-ERR-FL = "N"; /* error flag*/
  KM0RW01.KM0RW-FIRST-TIME-FLAG = "Y";
  KM0RW01.KM0RW-CURSOR-SWAP = 1;

   /* ****************************/
   /* set user security*/
   /* ****************************/

  if (COMMAREA.CACHGFL == "Y")
    KM0RW01.KM0RW-UPDT-INQ-FL = "Y"; /* update mode*/
  else
    KM0RW01.KM0RW-UPDT-INQ-FL = "N"; /* inquiry move*/
  end

   /* ****************************/
   /* check fast path entry*/
   /* ****************************/

  KM0RW01.KM0RW-USER-AREA = COMMAREA.CAUSERA; /* key from add menu*/
  if (COMMAREA.CAITEM != " ")
    KM0RW01.KM0RW-USER-AREA = COMMAREA.CAITEM; /* key from fastpath*/
  end

  if (KM0RW01.KM0RW-CO-NO-CHAR is numeric)
    KM0RM000.KUCCOID = KM0RW01.KM0RW-CO-NO;
  else
    KM0RW01.KM0RW-CO-NO = 0;
  end

  if (KM0RW01.KM0RW-STOR-NO-CHAR is numeric)
  /* *next sentence*/
  else
    KM0RW01.KM0RW-STOR-NO = 0;
  end

  if (KM0RW01.KM0RW-STOR-NO == 0)
    KM0RM000.KUMSTRID = "    ";
  end

  if (KM0RW01.KM0RW-STOR-NO == -1)
    KM0RM000.KUMSTRID = "  -1";
  end

  if (KM0RW01.KM0RW-STOR-NO == 0)
    KM0RM000.KUMSTRID = "    ";
  end

  if (KM0RW01.KM0RW-STOR-NO == -1 || 
  KM0RW01.KM0RW-STOR-NO == 0)
  /* next sentence;*/
  else
    KM0RW01.KM0RW-STRID = KM0RW01.KM0RW-STOR-NO;
    KM0RM000.KUMSTRID = KM0RW01.KM0RW-STORE-ID;
  end

  if (KM0RW01.KM0RW-DEPT-NO-CHAR is numeric)
  /* * next sentence*/
  else
    KM0RW01.KM0RW-DEPT-NO = 0;
  end

  if (KM0RW01.KM0RW-DEPT-NO == 0)
    KM0RM000.XNXCD = "  ";
  end
  if (KM0RW01.KM0RW-DEPT-NO == -1)
    KM0RM000.XNXCD = "-1";
  end
  if (KM0RW01.KM0RW-DEPT-NO == -1 || 
  KM0RW01.KM0RW-DEPT-NO == 0)
  /* next sentence*/
  else
    KM0RW01.KM0RW-XNXCD = KM0RW01.KM0RW-DEPT-NO;
    KM0RM000.XNXCD = KM0RW01.KM0RW-DEPT-ID;
  end

  KM0RM000.XGPCD = KM0RW01.KM0RW-GPC-NO;

  XX0XS01(); /* get todays date*/


  if (KM0RM000.KUCCOID > 0) /* if a company is available*/
    KM0R-200(); /* read/format basic company screen*/
  end

  if (KM0RM000.KUCCOID == 0) /* if a company not available*/
    KM0RW01.KM0RW-HDX = 2;
    while (KM0RW01.KM0RW-HDX <= 11)
      set KM0RM000.KM0RM-SELECT[KM0RW-HDX] protect, invisible;
      KM0RW01.KM0RW-HDX = KM0RW01.KM0RW-HDX + 1;
    end
  end

end // end KM0R-000


// Converse Inquiry Screen
Function KM0R-100()
   /* ********************************************/
   /* km0r-100  cust handl exceptions screen  **/
   /* 1. prepares working variables           **/
   /* 2. presents screen                      **/
   /* 3. edits special keys                   **/
   /* 4. edit screen data                     **/
   /* ********************************************/

  KM0RW01.KM0RW-ERR-FL = "N"; /* init error flag*/
  KM0RM000.KM0RM-SCRN-DATE = VGVar.currentShortGregorianDate; /* set screen date*/


  converse KM0RM000 ;

  KM0RM000.KM0RM-ERR-MSG = " ";
  KM0RM000.VAGen_EZEMSG = " ";

  KM0R-300(); /* edit pf and special keys*/

  if (KM0RW01.KM0RW-ERR-FL == "Y") /* if errors*/
    return;
  end


  KM0R-305(); /* edit screen*/

  if (KM0RW01.KM0RW-ERR-FL == "Y") /* if errors*/
    if (KM0RM000.KUCCOID == 0
     || converseVar.validationMsgNum == 205)
      KM0RW01.KM0RW-HDX = 2;
      while (KM0RW01.KM0RW-HDX <= 11)
        set KM0RM000.KM0RM-SELECT[KM0RW-HDX] protect, invisible;
        KM0RW01.KM0RW-HDX = KM0RW01.KM0RW-HDX + 1;
      end
    end
  end

  if (KM0RW01.KM0RW-ERR-FL == "Y") /* if errors*/
    return;
  end

  KM0R-310(); /* process second screen*/

end // end KM0R-100


// Read/Format Basic Screen
Function KM0R-200()
   /* *******************************************************/
   /* km0r-200  read and format handle exception screen  **/
   /* *******************************************************/

   /* *********** read company ***********************/

  set KUCREC empty;
  KM0RW01.KM0RW-CURR-CO-ID = 0;

  KUCREC.KUCCOID = KM0RM000.KUCCOID; /* set company key*/

  KM0R-205(); /* read vcmpny01*/
  if (KM0RW01.KM0RW-ERR-FL == "Y") /* not found?*/
    set KM0RM000 initial;
    KM0RM000.KUCCOID = KUCREC.KUCCOID; /* set company key*/
    set KM0RM000.KUCCOID cursor, bold;
    return;
  end

   /* *********** read store ***********************/
  set KUMREC empty;

  KUMREC.KUCCOID = KM0RM000.KUCCOID; /* set store key*/
   /*  */
  KM0RW01.KM0RW-STORE-ID = KM0RM000.KUMSTRID;
   /*  */
  if (KM0RM000.KUMSTRID == "   ")
    KUMREC.KUMSTRNM = "       ";
  end
   /*  */
  if (KM0RM000.KUMSTRID == "  -1")
    KUMREC.KUMSTRID = -1;
    KUMREC.KUMSTRNM = "       ";
  end
   /*  */
  if (KM0RM000.KUMSTRID == "  -1" || 
  KM0RM000.KUMSTRID == "    ")
  /* next sentence*/
  else
    KUMREC.KUMSTRID = KM0RW-STRID;
    KM0R-210(); /* read vstore01*/
    if (KM0RW01.KM0RW-ERR-FL == "Y") /* not found?*/
      set KM0RM000 initial;
      KM0RM000.KUCCOID = KUMREC.KUCCOID;
      KM0RW01.KM0RW-STRID = KUMREC.KUMSTRID;
      KM0RM000.KUMSTRID = KM0RW01.KM0RW-STORE-ID;
      set KM0RM000.KUMSTRID cursor, bold;
      return;
    end
  end


   /* *********** read gpc ***********************/
  set KUNREC empty;
  KM0RW01.KM0RM-CURR-DEPT-ID = 0;
  KM0RW01.KM0RW-CURR-GPC-ID = " ";

  KUNREC.KUCCOID = KM0RM000.KUCCOID; /* set dept  key*/

  KM0RW-DEPT-ID = KM0RM000.XNXCD;

  if (KM0RM000.XNXCD == "  ")
    KM0RW-XNXCD = 0;
  end


  if (KM0RM000.XNXCD == "  -1" || 
  KM0RM000.XNXCD == "    ")
     /* next sentence*/
  else
    KUNREC.XNXCD = KM0RW-XNXCD;
    KUNREC.XGPCD = KM0RM000.XGPCD;
    KM0R-215(); /* read vcust001*/
    if (KM0RW01.KM0RW-ERR-FL == "Y") /* not found?*/
      set KM0RM000 initial;
      KM0RM000.KUCCOID = KUNREC.KUCCOID;
      KM0RW01.KM0RW-STRID = KUNREC.KUMSTRID;
      KM0RM000.KUMSTRID = KM0RW01.KM0RW-STORE-ID;
      /* MOVE KUNREC.KUMSTRID TO KM0RM000.KUMSTRID;*/
      KM0RW01.KM0RW-XNXCD = KUNREC.XNXCD;
      /* MOVE KM0RW01.KM0RW-DEPT-ID TO KM0RM000.XNXCD;*/
      /* MOVE KUNREC.XNXCD TO KM0RM000.XNXCD;*/
      KM0RM000.XGPCD = KUNREC.XGPCD;
      set KM0RM000.XNXCD cursor, bold;
      set KM0RM000.XGPCD bold;
      return;
    end
  end



   /* *********** build screen *******************/

  KM0RW01.KM0RW-CURR-CO-ID = KUCREC.KUCCOID;
                                   /* save current company id*/
  KM0RW01.KM0RW-CURR-STOR-ID = KUMREC.KUMSTRID;
  KM0RW01.KM0RM-CURR-DEPT-ID = KUNREC.XNXCD;
  KM0RW01.KM0RW-CURR-GPC-ID = KUNREC.XGPCD;

  KM0RW01.KUCCOID = KM0RM000.KUCCOID;
  KM0RW01.KM0RW-STORE-ID = KM0RM000.KUMSTRID;

  if (KM0RM000.KUMSTRID != "  ")
    KM0RW01.KUMSTRID = KM0RW01.KM0RW-STRID;
  end
   /* OVE KM0RM000.KUMSTRID TO KM0RW01.KUMSTRID;*/
  KM0RW01.KM0RW-DEPT-ID = KM0RM000.XNXCD;

  if (KM0RM000.XNXCD != "  ")
    KM0RW01.XNXCD = KM0RW01.KM0RW-XNXCD;
  end
   /* OVE KM0RM000.XNXCD TO KM0RW01.XNXCD;*/
  KM0RW01.XGPCD = KM0RM000.XGPCD;

  set KM0RM000.KUCCOID cursor;


  KM0R-220(); /* format hndlx01 to map km0rm000*/

end // end KM0R-200


// Read Company
Function KM0R-205()
   /* *****************************************/
   /* km0r-205  get company record kucrec  **/
   /* *****************************************/

  set SQLCA empty;

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* read cmpny01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    set KM0RM000.KUCCOID initialAttributes;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(205); /* company not found*/
      KM0RW01.KM0RW-ERR-FL = "Y"; /* set error message.*/
      set KM0RM000.KUCCOID cursor, bold;
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      TA1REC.TA1MAP = " ";
      KM0RW01.KM0RW-CURR-CO-ID = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KM0RW01.KM0RW-KEY;
      TA1REC.TA1PGMNM = "KM0R-205";
      TA1REC.TA1LOC = "READING DB2 CMPNY01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4(); /* transfer to main menu*/
    end
  end

   /* ***********************************/
   /* edit for account class code*/
   /* ***********************************/

  if (KUCREC.XAUCD in XAUTBL.XAUCD)
    if (XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KM0RW01.XATCD = XAUTBL.XATCD[sysVar.arrayIndex];
    else
      KM0RW01.XATCD = " ";
    end
  else
    KM0RW01.XATCD = " ";
  end

   /* **********************************************/
   /* edit account type for allowance of user groups*/
   /* **********************************************/

  if (KM0RW01.XATCD == "08") /* edit for cole haan user*/
    if (COMMAREA.CADLVL[1] == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(272); /* not authorized to maint this acct*/
      KM0RW01.KM0RW-UPDT-INQ-FL = "N"; /* update flag= n*/
    end
  else
    if (KM0RW01.XATCD == "03") /* edit for nil user*/
      if (COMMAREA.CADLVL[2] == "Y")
        /* next sentence*/
      else
        converseLib.validationFailed(272); /* not authorized to maint this acct*/
        KM0RW01.KM0RW-UPDT-INQ-FL = "N"; /* updtae flag = n*/
      end
    else
      if (COMMAREA.CADLVL[1] == "Y"
       || COMMAREA.CADLVL[2] == "Y")
        converseLib.validationFailed(272); /* not authorized to maint this acct*/
        KM0RW01.KM0RW-UPDT-INQ-FL = "N"; /* update flag = n*/
      end
    end
  end
                   /* Edit for Nike Canada User*/

  if (KUCREC.XLECD == "03") /* edit for Nike Canada user*/
    if (COMMAREA.CADLVL[3] == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(272); /* not authorized to maint this acct*/
      KM0RW01.KM0RW-UPDT-INQ-FL = "N"; /* updtae flag = n*/
    end
  else
    if (COMMAREA.CADLVL[3] == "Y")
      converseLib.validationFailed(272); /* not authorized to maint this acct*/
      KM0RW01.KM0RW-UPDT-INQ-FL = "N"; /* update flag = n*/
    end
  end


end // end KM0R-205


// Read Store
Function KM0R-210()
   /* ***************************************/
   /* km0r-210  get store record kumrec  **/
   /* ***************************************/

  set SQLCA empty;

  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* read cmpny01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    set KM0RM000.KUMSTRID initialAttributes;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(205); /* store not found*/
      KM0RW01.KM0RW-ERR-FL = "Y"; /* set error message.*/
      set KM0RM000.KUMSTRID cursor, bold;
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VSTORE01";
      TA1REC.TA1MAP = " ";
      KM0RW01.KM0RW-CURR-CO-ID = KUMREC.KUCCOID;
      KM0RW01.KM0RW-CURR-STOR-ID = KUMREC.KUMSTRID;
      TA1REC.TA1TBLKE = KM0RW01.KM0RW-KEY;
      TA1REC.TA1PGMNM = "KM0R-210";
      TA1REC.TA1LOC = "READING DB2 STORE01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4(); /* return to main menu*/
    end
  end


end // end KM0R-210


// Read Customer
Function KM0R-215()
   /* ******************************************/
   /* km0r-215  get customer record kunrec  **/
   /* ******************************************/

  set SQLCA empty;

  call "IO0280" ("SS", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes}; /* read cmpny01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    set KM0RM000.XNXCD initialAttributes;
    set KM0RM000.XGPCD initialAttributes;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(205); /* cust not found*/
      KM0RW01.KM0RW-ERR-FL = "Y"; /* set error message.*/
      set KM0RM000.XNXCD cursor, bold;
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCUST001";
      TA1REC.TA1MAP = " ";
      KM0RW01.KM0RW-CURR-CO-ID = KUNREC.KUCCOID;
      KM0RW01.KM0RW-CURR-STOR-ID = KUNREC.KUMSTRID;
      KM0RW01.KM0RM-CURR-DEPT-ID = KUNREC.XNXCD;
      KM0RW01.KM0RW-CURR-GPC-ID = KUNREC.XGPCD;
      TA1REC.TA1TBLKE = KM0RW01.KM0RW-KEY;
      TA1REC.TA1PGMNM = "KM0R-215";
      TA1REC.TA1LOC = "READING DB2 CUST001";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4(); /* return to main menu*/
    end
  end

   /* ******************************************/
   /* close scan                 **/
   /* ******************************************/

  set SQLCA empty;

  call "IO0280" ("CS", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes}; /* read cmpny01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUST001";
    TA1REC.TA1MAP = " ";
    KM0RW01.KM0RW-CURR-CO-ID = KUNREC.KUCCOID;
    KM0RW01.KM0RW-CURR-STOR-ID = KUNREC.KUMSTRID;
    KM0RW01.KM0RM-CURR-DEPT-ID = KUNREC.XNXCD;
    KM0RW01.KM0RW-CURR-GPC-ID = KUNREC.XGPCD;
    TA1REC.TA1TBLKE = KM0RW01.KM0RW-KEY;
    TA1REC.TA1PGMNM = "KM0R-215";
    TA1REC.TA1LOC = "CLOSING DB2 CUST001";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4(); /* return to  main menu*/
  end


end // end KM0R-215


// Build Screen
Function KM0R-220()
  /* *************************************************************/
  /* km0r-220                             **/
  /* *************************************************************/
  /* Build Screen                           **/
  /* *************************************************************/
  /* move company, store, department names to map heading.     **/
  /* *************************************************************/
  KM0RM000.KUCCONM = KUCREC.KUCCONM; /* company name*/
  KM0RM000.KUMSTRNM = KUMREC.KUMSTRNM; /* store name*/

  if (KM0RM000.XNXCD == " " || 
  KM0RM000.XNXCD == "-1")
    /* next sentence*/
  else
    if (KM0RW01.KM0RW-XNXCD in XNXTBL.XNXCD)
      KM0RM000.XNXDESC = XNXTBL.XNXABRV[sysVar.arrayIndex];
    end /* dept desc*/
  end

  if (KM0RM000.XNXCD == "-1")
    KM0RM000.XNXDESC = " ";
  end
  /* *************************************************************/
  /* set up key, open cursor, and fetch first vhndlx01 row.    **/
  /* *************************************************************/
  set KUFREC empty;

  KUFREC.KUCCOID = KM0RM000.KUCCOID; /* set key*/
  KM0RW01.KM0RW-STORE-ID = KM0RM000.KUMSTRID;

  if (KM0RM000.KUMSTRID == " " || 
  KM0RM000.KUMSTRID == "-1")
    /* next sentence*/
  else
    KUFREC.KUMSTRID = KM0RW01.KM0RW-STRID;
  end

  if (KM0RM000.KUMSTRID == " ")
    KUFREC.KUMSTRID = -2;
  end

  if (KM0RM000.KUMSTRID == "  -1")
    KUFREC.KUMSTRID = -1;
  end

  KM0RW01.KM0RW-DEPT-ID = KM0RM000.XNXCD;

  if (KM0RM000.XNXCD == " " || 
  KM0RM000.XNXCD == "-1")
  else
    KUFREC.XNXCD = KM0RW01.KM0RW-XNXCD;
  end

  if (KM0RM000.XNXCD == " ")
    KUFREC.XNXCD = -2;
  end

  if (KM0RM000.XNXCD == "-1")
    KUFREC.XNXCD = -1;
  end

  KUFREC.XGPCD = KM0RM000.XGPCD;

  if (KM0RM000.XGPCD == " ")
    KUFREC.XGPCD = "**";
  end

  KM0R-225(); /* select scan on vhndlx01*/
  KM0R-230(); /* select next vhndlx01*/

  KM0RW01.KM0RW-HDX = 1;
  while (KM0RW01.KM0RW-HDX <= 11)
    KM0RM000.KM0RM-SELECT[KM0RW-HDX] = " ";
    if (VAGen_SQLCODE == 0)
      KM0RM000.KM0RM-STORE[KM0RW-HDX] = KUFREC.KUMSTRID;
      KM0RM000.KM0RM-DEPT[KM0RW-HDX] = KUFREC.XNXCD;
      KM0RM000.KM0RM-GPC[KM0RW-HDX] = KUFREC.XGPCD;
      KM0RM000.KM0RM-HANDLE1[KM0RW-HDX] = KUFREC.XHDCD[1];
      KM0RM000.KM0RM-HANDLE2[KM0RW-HDX] = KUFREC.XHDCD[2];
      KM0RM000.KM0RM-HANDLE3[KM0RW-HDX] = KUFREC.XHDCD[3];
      KM0RM000.KM0RM-HANDLE4[KM0RW-HDX] = KUFREC.XHDCD[4];
      KM0RM000.KM0RM-HANDLE5[KM0RW-HDX] = KUFREC.XHDCD[5];
      KM0RM000.KM0RM-LABEL1[KM0RW-HDX] = KUFREC.PWRLBCD[1];
      KM0RM000.KM0RM-LABEL2[KM0RW-HDX] = KUFREC.PWRLBCD[2];
      KM0RM000.KM0RM-PACK[KM0RW-HDX] = KUFREC.XPACD;
      KM0RM000.KM0RM-MIX[KM0RW-HDX] = KUFREC.KUFMIXBL;
      KM0RM000.KM0RM-STAT[KM0RW-HDX] = KUFREC.XXXSTAT;
      KM0RW02.KUFGRP[KM0RW-HDX] = KUFREC.KUFGRP;

      set KM0RM000.KM0RM-SELECT[KM0RW-HDX] initialAttributes;
      set KM0RM000.KM0RM-STORE[KM0RW-HDX] initialAttributes;
      set KM0RM000.KM0RM-DEPT[KM0RW-HDX] initialAttributes;
      set KM0RM000.KM0RM-GPC[KM0RW-HDX] initialAttributes;
      set KM0RM000.KM0RM-HANDLE1[KM0RW-HDX] initialAttributes;
      set KM0RM000.KM0RM-HANDLE2[KM0RW-HDX] initialAttributes;
      set KM0RM000.KM0RM-HANDLE3[KM0RW-HDX] initialAttributes;
      set KM0RM000.KM0RM-HANDLE4[KM0RW-HDX] initialAttributes;
      set KM0RM000.KM0RM-HANDLE5[KM0RW-HDX] initialAttributes;
      set KM0RM000.KM0RM-LABEL1[KM0RW-HDX] initialAttributes;
      set KM0RM000.KM0RM-LABEL2[KM0RW-HDX] initialAttributes;
      set KM0RM000.KM0RM-PACK[KM0RW-HDX] initialAttributes;
      set KM0RM000.KM0RM-MIX[KM0RW-HDX] initialAttributes;
      set KM0RM000.KM0RM-STAT[KM0RW-HDX] initialAttributes;

      KM0R-230();
    else
      set KM0RM000.KM0RM-SELECT[KM0RW-HDX] protect, invisible;
      set KM0RM000.KM0RM-STORE[KM0RW-HDX] protect, invisible;
      set KM0RM000.KM0RM-DEPT[KM0RW-HDX] protect, invisible;
      set KM0RM000.KM0RM-GPC[KM0RW-HDX] protect, invisible;
      set KM0RM000.KM0RM-HANDLE1[KM0RW-HDX] protect, invisible;
      set KM0RM000.KM0RM-HANDLE2[KM0RW-HDX] protect, invisible;
      set KM0RM000.KM0RM-HANDLE3[KM0RW-HDX] protect, invisible;
      set KM0RM000.KM0RM-HANDLE4[KM0RW-HDX] protect, invisible;
      set KM0RM000.KM0RM-HANDLE5[KM0RW-HDX] protect, invisible;
      set KM0RM000.KM0RM-LABEL1[KM0RW-HDX] protect, invisible;
      set KM0RM000.KM0RM-LABEL2[KM0RW-HDX] protect, invisible;
      set KM0RM000.KM0RM-PACK[KM0RW-HDX] protect, invisible;
      set KM0RM000.KM0RM-MIX[KM0RW-HDX] protect, invisible;
      set KM0RM000.KM0RM-STAT[KM0RW-HDX] protect, invisible;
    end

    KM0RW01.KM0RW-HDX = KM0RW01.KM0RW-HDX + 1;
  end

  KM0R-235();

  set KM0RM000.KM0RM-SELECT[1] initialAttributes;

end // end KM0R-220


// Select Scan VHNDLX01
Function KM0R-225()
   /* ***************************************************/
   /* km0r-225  get handle exceptions record kufrec  **/
   /* ***************************************************/

  set SQLCA empty;

  call "IO0200" ("S2", SQLCA, KUFREC) {isNoRefresh = yes, isExternal = yes}; /* read hndlx01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VHNDKX01";
      TA1REC.TA1MAP = " ";
      KM0RW01.KM0RW-CURR-CO-ID = KUFREC.KUCCOID;
      KM0RW01.KM0RW-CURR-STOR-ID = KUFREC.KUMSTRID;
      KM0RW01.KM0RM-CURR-DEPT-ID = KUFREC.XNXCD;
      KM0RW01.KM0RW-CURR-GPC-ID = KUFREC.XGPCD;
      TA1REC.TA1TBLKE = KM0RW01.KM0RW-KEY;
      TA1REC.TA1PGMNM = "KM0R-225";
      TA1REC.TA1LOC = "READING DB2 HNDLX01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4(); /* return to main menu*/
    end
  end


end // end KM0R-225


// Select Next VHNDLX01
Function KM0R-230()
   /* *********************************/
   /* km0r-230  get next vhndlx01  **/
   /* *********************************/

  set SQLCA empty;

  call "IO0200" ("N2", SQLCA, KUFREC) {isNoRefresh = yes, isExternal = yes}; /* read hndlx01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VHNDLX01";
      TA1REC.TA1MAP = " ";
      KM0RW01.KM0RW-CURR-CO-ID = KUFREC.KUCCOID;
      KM0RW01.KM0RW-CURR-STOR-ID = KUFREC.KUMSTRID;
      KM0RW01.KM0RM-CURR-DEPT-ID = KUFREC.XNXCD;
      KM0RW01.KM0RW-CURR-GPC-ID = KUFREC.XGPCD;
      TA1REC.TA1TBLKE = KM0RW01.KM0RW-KEY;
      TA1REC.TA1PGMNM = "KM0R-230";
      TA1REC.TA1LOC = "READING DB2 HNDLX01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4(); /* return to main menu*/
    end
  end


end // end KM0R-230


// Close Cursor VHNDLX01
Function KM0R-235()
   /* ****************************************/
   /* km0r-235  close cursor on vhndlx01  **/
   /* ****************************************/

  call "IO0200" ("C2", SQLCA, KUFREC) {isNoRefresh = yes, isExternal = yes}; /* read hndlx01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VHNDLX01";
    TA1REC.TA1MAP = " ";
    KM0RW01.KM0RW-CURR-CO-ID = KUFREC.KUCCOID;
    KM0RW01.KM0RW-CURR-STOR-ID = KUFREC.KUMSTRID;
    KM0RW01.KM0RM-CURR-DEPT-ID = KUFREC.XNXCD;
    KM0RW01.KM0RW-CURR-GPC-ID = KUFREC.XGPCD;
    TA1REC.TA1TBLKE = KM0RW01.KM0RW-KEY;
    TA1REC.TA1PGMNM = "KM0R-235";
    TA1REC.TA1LOC = "READING DB2 HNDLX01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4(); /* return to main menu*/
  end


end // end KM0R-235


// Process Special And PFkeys
Function KM0R-300()
   /* *******************************************/
   /* km0r-300  edit all special entry keys  **/
   /* *******************************************/

   /* **************************************/
   /* edit pa2 key*/
   /* **************************************/

  if (converseVar.eventKey is pa2)
    KM0R-200(); /* refresh the screen*/
    KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flagto display screen*/
    KM0RW01.KM0RW-HNDL-MOD-FL = "N";
    KM0RW01.KM0RW-EDIT-FL = "N";
    return;
  end

   /* **************************************/
   /* edit enter  key*/
   /* **************************************/

  if (converseVar.eventKey is enter)
    if (KM0RM000.CATOAP > " ") /* fast path*/
      COMMAREA.CATOAP = KM0RM000.CATOAP;
      if (KM0RM000.CAITEM == " ")
        KM0RW01.KM0RW-CO-NO = KM0RM000.KUCCOID;
        KM0RW01.KM0RW-STOR-NO-CHAR = KM0RM000.KUMSTRID;
        KM0RW01.KM0RW-DEPT-NO-CHAR = KM0RM000.XNXCD;
        KM0RW01.KM0RW-GPC-NO = KM0RM000.XGPCD;
        COMMAREA.CAUSERA = KM0RW01.KM0RW-USER-AREA;
      else
        COMMAREA.CAITEM = KM0RM000.CAITEM;
      end
      COMMAREA.CAFROMAP = "KM0R";
      XSEXIT();
      KM0RM000.VAGen_EZEMSG = COMMAREA.CAMSG;
      KM0RW01.KM0RW-ERR-FL = "Y";
      set KM0RM000.CATOAP cursor, bold;
    else
      set KM0RM000.CATOAP initialAttributes;
    end
    COMMAREA.CAUSERA = KM0RW01.KM0RW-USER-AREA;
    return;
  else
    if (KM0RM000.CATOAP > " ")
      KM0RW01.KM0RW-ERR-FL = "Y";
      converseLib.validationFailed(90); /* can not fast path and use pf keys*/
      set KM0RM000.CATOAP cursor, bold;
      return;
    else
      set KM0RM000.CATOAP modified;
    end
  end

   /* **************************************/
   /* edit pf3 key*/
   /* **************************************/

  if (converseVar.eventKey is pf3) /* back to from application*/
    KM0RW01.KM0RW-CO-NO = KM0RM000.KUCCOID;
    KM0RW01.KM0RW-STOR-NO = KM0RM000.KUMSTRID;
    KM0RW01.KM0RW-DEPT-NO = KM0RM000.XNXCD;
    KM0RW01.KM0RW-GPC-NO = KM0RM000.XGPCD;
    COMMAREA.CAUSERA = KM0RW01.KM0RW-USER-AREA;
    COMMAREA.CAITEM = " ";
    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    COMMAREA.CAFROMAP = "KM0R";
    XSEXIT();
    KM0RM000.VAGen_EZEMSG = COMMAREA.CAMSG;
    KM0RW01.KM0RW-ERR-FL = "Y";
    return;
  end

   /* **************************************/
   /* edit pf4 key*/
   /* **************************************/

  if (converseVar.eventKey is pf4) /* back to goal menu*/
    COMMAREA.CAFROMAP = "KM0R";
    XSPF4();
    KM0RM000.VAGen_EZEMSG = COMMAREA.CAMSG;
    KM0RW01.KM0RW-ERR-FL = "Y";
    return;
  end

   /* **************************************/
   /* edit pf24 KEY*/
   /* **************************************/

  if (converseVar.eventKey is pf24) /* cursor swap*/
    if (KM0RW01.KM0RW-CURSOR-SWAP == 1)
      KM0RW01.KM0RW-CURSOR-SWAP = 2;
      set KM0RM000.KM0RM-SELECT[1] cursor;
    else
      KM0RW01.KM0RW-CURSOR-SWAP = 1;
      set KM0RM000.KUCCOID cursor;
    end
    KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag to display screen*/
    return;
  end

   /* **************************************/
   /* edit invalid key*/
   /* **************************************/

  if (KM0RW01.KM0RW-ERR-FL == "N")
    converseLib.validationFailed(281); /* invalid pf key message*/
    KM0RW01.KM0RW-ERR-FL = "Y";
  end



end // end KM0R-300


// edit screen data
Function KM0R-305()
   /* **********************************************/
   /* km0r-305  edit fields from update screen  **/
   /* **********************************************/

  set KM0RM000.KUCCOID initialAttributes;
  if (KM0RM000.KUCCOID == KM0RW01.KM0RW-CURR-CO-ID
   /* AND KM0RW01.KM0RW-STRID EQ*/
   /* KM0RW01.KM0RW-CURR-STOR-ID*/
   && KM0RW01.KM0RW-STORE-ID == KM0RM000.KUMSTRID
   /* AND KM0RW01.KM0RW-XNXCD EQ*/
   /* KM0RW01.KM0RM-CURR-DEPT-ID*/
   && KM0RM000.XNXCD == KM0RW01.KM0RW-DEPT-ID
   && KM0RM000.XGPCD == KM0RW01.KM0RW-CURR-GPC-ID
   && KM0RM000.KUCCOID != 0)
    /* next sentence*/
  else
    KM0R-200(); /* refresh screen*/
    KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
    KM0RW01.KM0RW-EDIT-FL = "N"; /* set update flag*/
    KM0RW01.KM0RW-HNDL-MOD-FL = "N"; /* set update flag*/
    return;
  end


  /* ************************************************/
  /* edit selection fields*/
  /* ************************************************/
  KM0RW01.KM0RW-HDX = 11;
  while (KM0RW01.KM0RW-HDX > 0)
    if (KM0RM000.KM0RM-SELECT[KM0RW-HDX] == " ")
      if (KM0RM000.KM0RM-STAT[KM0RW-HDX] == " ")
        /* next sentence*/
      else
        set KM0RM000.KM0RM-SELECT[KM0RW-HDX] initialAttributes;
      end
    else
      if (KM0RM000.KM0RM-SELECT[KM0RW-HDX] == "I" /* inquiry*/
       || KM0RM000.KM0RM-SELECT[KM0RW-HDX] == "A" /* add*/
       || KM0RM000.KM0RM-SELECT[KM0RW-HDX] == "D" /* delete*/
       || KM0RM000.KM0RM-SELECT[KM0RW-HDX] == "C" /* change*/
       || KM0RM000.KM0RM-SELECT[KM0RW-HDX] == " ") /* spaces*/
        set KM0RM000.KM0RM-SELECT[KM0RW-HDX] initialAttributes;
        if (KM0RW01.KM0RW-UPDT-INQ-FL == "N") /* if inquiry*/
          if (KM0RM000.KM0RM-SELECT[KM0RW-HDX] == "A" /* and selecting*/
           || KM0RM000.KM0RM-SELECT[KM0RW-HDX] == "D" /* a, d or c*/
           || KM0RM000.KM0RM-SELECT[KM0RW-HDX] == "C") /* display error*/
            set KM0RM000.KM0RM-SELECT[KM0RW-HDX] cursor, bold;
            KM0RW01.KM0RW-ERR-FL = "Y";
            converseLib.validationFailed(451);
          end
        end
      else
        set KM0RM000.KM0RM-SELECT[KM0RW-HDX] cursor, bold;
        KM0RW01.KM0RW-ERR-FL = "Y";
        converseLib.validationFailed(444);
      end
    end
    KM0RW01.KM0RW-HDX = KM0RW01.KM0RW-HDX - 1;
  end


end // end KM0R-305


// process detail screen
Function KM0R-310()
   /* ************************************/
   /* km0r-310  process detail screen  **/
   /* ************************************/

  KM0RW01.KM0RW-END = "N"; /* init end flag*/

  KM0RW01.KM0RW-HDX = 1; /* counter for screen*/
  while (KM0RW01.KM0RW-HDX <= 11)
    if (KM0RM000.KM0RM-SELECT[KM0RW-HDX] == " ")
         /* next sentence*/
    else
      if (KM0RW01.KM0RW-END == "Y") /* if users have pressed pf3*/
        KM0RM000.KM0RM-SELECT[KM0RW-HDX] = " "; /* clear select*/
      else
        KM0R-315(); /* display second screen*/
      end

    end

    KM0RW01.KM0RW-HDX = KM0RW01.KM0RW-HDX + 1;
  end /* while loop - max*/


  KM0R-200(); /* rebuild the screen*/

end // end KM0R-310


// build second screen
Function KM0R-315()
   /* ***********************************/
   /* km0r-315  build detail screen  **/
   /* ***********************************/

  if (KM0RM000.KM0RM-SELECT[KM0RW-HDX] == "A")
    KM0R-320(); /* set fields to update*/
    set KM0RM010 empty;
    KM0RM010.KM0RM-MODE = "ADD";
    KM0RM010.KUCCOID = KUCREC.KUCCOID;
    KM0RM010.KUMSTRID = KM0RM000.KUMSTRID;
    KM0RM010.XNXCD = KM0RM000.XNXCD;
    KM0RM010.XGPCD = KM0RM000.XGPCD;
  else
    if (KM0RM000.KM0RM-SELECT[KM0RW-HDX] == "C")
      KM0RM010.KM0RM-MODE = "CHANGE ";
      KM0R-320(); /* set fields to update*/
      KM0R-330(); /* format map km0rm010*/
    else
      if (KM0RM000.KM0RM-SELECT[KM0RW-HDX] == "D")
        KM0RM010.KM0RM-MODE = "DELETE";
        KM0R-320(); /* set fields to protect*/
        KM0R-330(); /* format map km0rm010*/
      else
        KM0RM010.KM0RM-MODE = "INQUIRY";
        set KM0RM010.KUCCOID cursor; /* place cursor on co id*/
        KM0R-345(); /* set fields to protect*/
        KM0R-330(); /* format map km0rm010*/
      end
    end
  end

  KM0RW01.KM0RW-DONE = "N"; /* done flag*/
  while (KM0RW01.KM0RW-DONE == "N")
    KM0R-400(); /* converse screen 2*/
  end


end // end KM0R-315


// Set Fields To Update Mode
Function KM0R-320()
  /* *************************************/
  /* km0r-320  Set Fields For Update  **/
  /* *************************************/

  if (KM0RM000.KM0RM-SELECT[KM0RW-HDX] == "A")
    set KM0RM010.KUMSTRID cursor, initialAttributes; /* store id*/
    set KM0RM010.XNXCD initialAttributes; /* dept id*/
    set KM0RM010.XGPCD initialAttributes; /* gpc cod*/
  else
    if (KM0RM000.KM0RM-SELECT[KM0RW-HDX] == "C")
      set KM0RM010.KUMSTRID skip; /* store id*/
      set KM0RM010.XNXCD skip; /* dept id*/
      set KM0RM010.XGPCD skip; /* gpc cod*/
      set KM0RM010.XXXSTAT cursor; /* place cursor on stat cd*/
    else
      if (KM0RM000.KM0RM-SELECT[KM0RW-HDX] == "D")
        set KM0RM010.KUCCOID cursor; /* place cursor on co id*/
        set KM0RM010.KUMSTRID skip; /* store id*/
        set KM0RM010.XNXCD skip; /* dept id*/
        set KM0RM010.XGPCD skip; /* gpc cod*/
      end
    end
  end

  /* T KM0RM010.KUMSTRID DEFINED;   /* store id*/
  /* T KM0RM010.XNXCD DEFINED;      /* dept id*/
  /* T KM0RM010.XGPCD DEFINED;      /* gpc cod*/

  set KM0RM010.XHDCD[1] initialAttributes; /* handle code*/
  set KM0RM010.XHDCD[2] initialAttributes; /* handle code*/
  set KM0RM010.XHDCD[3] initialAttributes; /* handle code*/
  set KM0RM010.XHDCD[4] initialAttributes; /* handle code*/
  set KM0RM010.XHDCD[5] initialAttributes; /* handle code*/
  set KM0RM010.XHDCHG[1] initialAttributes; /* handle charge*/
  set KM0RM010.XHDCHG[2] initialAttributes; /* handle charge*/
  set KM0RM010.XHDCHG[3] initialAttributes; /* handle charge*/
  set KM0RM010.XHDCHG[4] initialAttributes; /* handle charge*/
  set KM0RM010.XHDCHG[5] initialAttributes; /* handle charge*/
  set KM0RM010.XHD-HNDL-CST[1] initialAttributes; /* handle cost*/
  set KM0RM010.XHD-HNDL-CST[2] initialAttributes; /* handle cost*/
  set KM0RM010.XHD-HNDL-CST[3] initialAttributes; /* handle cost*/
  set KM0RM010.XHD-HNDL-CST[4] initialAttributes; /* handle cost*/
  set KM0RM010.XHD-HNDL-CST[5] initialAttributes; /* handle cost*/
  set KM0RM010.PWRLBCD[1] initialAttributes; /* label code*/
  set KM0RM010.PWRLBCD[2] initialAttributes; /* label code*/
  set KM0RM010.XPACD initialAttributes; /* pack code*/
  set KM0RM010.KUFMIXBL initialAttributes; /* mix box flag*/
  set KM0RM010.XXXSTAT initialAttributes; /* status*/

end // end KM0R-320


// Format Update screen
Function KM0R-330()
  /* ************************************/
  /* km0r-330  Format Update Screen  **/
  /* ************************************/

  KM0RM010.KUCCOID = KUCREC.KUCCOID;

  KM0RM010.KUMSTRID = KM0RM000.KM0RM-STORE[KM0RW-HDX];
  KM0RM010.XNXCD = KM0RM000.KM0RM-DEPT[KM0RW-HDX];
  KM0RM010.XGPCD = KM0RM000.KM0RM-GPC[KM0RW-HDX];

  KM0R-335(); /* read handling table*/

  KM0RM010.XHDCD[1] = KUFREC.XHDCD[1]; /* handling codes*/
  KM0RM010.XHDCD[2] = KUFREC.XHDCD[2];
  KM0RM010.XHDCD[3] = KUFREC.XHDCD[3];
  KM0RM010.XHDCD[4] = KUFREC.XHDCD[4];
  KM0RM010.XHDCD[5] = KUFREC.XHDCD[5];
  KM0RM010.XHDCHG[1] = KUFREC.XHDCHG[1]; /* handling charges*/
  KM0RM010.XHDCHG[2] = KUFREC.XHDCHG[2];
  KM0RM010.XHDCHG[3] = KUFREC.XHDCHG[3];
  KM0RM010.XHDCHG[4] = KUFREC.XHDCHG[4];
  KM0RM010.XHDCHG[5] = KUFREC.XHDCHG[5];
  KM0RM010.XHD-HNDL-CST[1] = KUFREC.XHD-HNDL-CST[1]; /* handling cost*/
  KM0RM010.XHD-HNDL-CST[2] = KUFREC.XHD-HNDL-CST[2]; /* handling cost*/
  KM0RM010.XHD-HNDL-CST[3] = KUFREC.XHD-HNDL-CST[3]; /* handling cost*/
  KM0RM010.XHD-HNDL-CST[4] = KUFREC.XHD-HNDL-CST[4]; /* handling cost*/
  KM0RM010.XHD-HNDL-CST[5] = KUFREC.XHD-HNDL-CST[5]; /* handling cost*/
  KM0RM010.PWRLBCD[1] = KUFREC.PWRLBCD[1]; /* labeling codes*/
  KM0RM010.PWRLBCD[2] = KUFREC.PWRLBCD[2];
  KM0RM010.XPACD = KUFREC.XPACD; /* packing code*/
  KM0RM010.KUFMIXBL = KUFREC.KUFMIXBL; /* mix box flag*/
  KM0RM010.XXXSTAT = KUFREC.XXXSTAT; /* status*/

   /* ***** get label abrv from the picking label table*/
  if (KM0RM010.PWRLBCD[1] != " ")
    PWRREC.PWRLBCD = KM0RM010.PWRLBCD[1];
    KM0R-340(); /* read picking label table*/
    if (KM0RW01.KM0RW-LBL-FL == "Y")
      KM0RM010.PWRLBABR[1] = PWRREC.PWRLBABR;
    else
      KM0RM010.PWRLBABR[1] = " ";
    end
  else
    KM0RM010.PWRLBABR[1] = " "; /* label abrv*/
  end

  if (KM0RM010.PWRLBCD[2] != " ")
    PWRREC.PWRLBCD = KM0RM010.PWRLBCD[2];
    KM0R-340(); /* read picking label table*/
    if (KM0RW01.KM0RW-LBL-FL == "Y")
      KM0RM010.PWRLBABR[2] = PWRREC.PWRLBABR;
    else
      KM0RM010.PWRLBABR[2] = " ";
    end
  else
    KM0RM010.PWRLBABR[2] = " "; /* label abrv*/
  end

   /* ***** get picking abrv from the table*/
  if (KM0RM010.XPACD != " ")
    if (KM0RM010.XPACD in XPATBL.XPACD)
      KM0RM010.XPADESC = XPATBL.XPADESC[sysVar.arrayIndex];
    end /* pick abrv*/
  else
    KM0RM010.XPADESC = " "; /* picking abrv*/
  end

end // end KM0R-330


// read VHNDLX01
Function KM0R-335()
  /* *********************************/
  /* km0r-335  read handle table  **/
  /* *********************************/

  KUFREC.KUCCOID = KUCREC.KUCCOID;
  KUFREC.KUMSTRID = KM0RM000.KM0RM-STORE[KM0RW-HDX];
  KUFREC.XNXCD = KM0RM000.KM0RM-DEPT[KM0RW-HDX];
  KUFREC.XGPCD = KM0RM000.KM0RM-GPC[KM0RW-HDX];

  set SQLCA empty;

  call "IO0200" ("S ", SQLCA, KUFREC) {isNoRefresh = yes, isExternal = yes}; /* read hndlx01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VHNDKX01";
      TA1REC.TA1MAP = " ";
      KM0RW01.KM0RW-CURR-CO-ID = KUFREC.KUCCOID;
      KM0RW01.KM0RW-CURR-STOR-ID = KUFREC.KUMSTRID;
      KM0RW01.KM0RM-CURR-DEPT-ID = KUFREC.XNXCD;
      KM0RW01.KM0RW-CURR-GPC-ID = KUFREC.XGPCD;
      TA1REC.TA1TBLKE = KM0RW01.KM0RW-KEY;
      TA1REC.TA1PGMNM = "KM0R-335";
      TA1REC.TA1LOC = "READING DB2 HNDLX01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4(); /* return to main menu*/
    end
  end


end // end KM0R-335


// read picking labels
Function KM0R-340()
   /* ***********************************************/
   /* km0r-340  get picking label record pwrrec  **/
   /* ***********************************************/

  set SQLCA empty;

  call "IO5750" ("S ", SQLCA, PWRREC) {isNoRefresh = yes, isExternal = yes}; /* read cmpny01*/
  if (SQLCA.VAGen_SQLCODE == 0)
    KM0RW01.KM0RW-LBL-FL = "Y";
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KM0RW01.KM0RW-LBL-FL = "N";
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DPICK";
      TA1REC.TA1TBLVU = "VZLABL01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1TBLKE = PWRREC.PWRLBCD;
      TA1REC.TA1PGMNM = "KM0R-340";
      TA1REC.TA1LOC = "READING DB2 ZLABL01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4(); /* return to main menu*/
    end
  end


end // end KM0R-340


// Set Fields For Inquiry Mode
Function KM0R-345()
  /* **************************************/
  /* km0r-325  Set Fields For Inquiry  **/
  /* **************************************/

  set KM0RM010.KUMSTRID skip; /* store id*/
  set KM0RM010.XNXCD skip; /* dept id*/
  set KM0RM010.XGPCD skip; /* gpc id*/

  set KM0RM010.XHDCD[1] skip; /* handle code*/
  set KM0RM010.XHDCD[2] skip; /* handle code*/
  set KM0RM010.XHDCD[3] skip; /* handle code*/
  set KM0RM010.XHDCD[4] skip; /* handle code*/
  set KM0RM010.XHDCD[5] skip; /* handle code*/
  set KM0RM010.XHDCHG[1] skip; /* handle charge*/
  set KM0RM010.XHDCHG[2] skip; /* handle charge*/
  set KM0RM010.XHDCHG[3] skip; /* handle charge*/
  set KM0RM010.XHDCHG[4] skip; /* handle charge*/
  set KM0RM010.XHDCHG[5] skip; /* handle charge*/
  set KM0RM010.XHD-HNDL-CST[1] skip; /* handle cost*/
  set KM0RM010.XHD-HNDL-CST[2] skip; /* handle cost*/
  set KM0RM010.XHD-HNDL-CST[3] skip; /* handle cost*/
  set KM0RM010.XHD-HNDL-CST[4] skip; /* handle cost*/
  set KM0RM010.XHD-HNDL-CST[5] skip; /* handle cost*/
  set KM0RM010.PWRLBCD[1] skip; /* label code*/
  set KM0RM010.PWRLBCD[2] skip; /* label code*/
  set KM0RM010.XPACD skip; /* pack code*/
  set KM0RM010.KUFMIXBL skip; /* mix box flag*/
  set KM0RM010.XXXSTAT skip; /* status*/


end // end KM0R-345


// Converse Update Screen
Function KM0R-400()
   /* ******************************************/
   /* km0r-400  handling exceptions screen  **/
   /* ******************************************/

  KM0RW01.KM0RW-RESEND-MAP-FLAG = "N";
  KM0RW01.KM0RW-ERR-FL = "N";

  converse KM0RM010 ;
  KM0RM010.KM0RM-ERR-MSG = " ";

  KM0R-405(); /* check special keys*/

  if (converseVar.eventKey is enter)
    KM0R-455(); /* check pop up window*/
    if (KM0RW01.KM0RW-RESEND-MAP-FLAG == "N")
      KM0R-410(); /* edit handling data*/
    end
  end

  if (KM0RW01.KM0RW-ERR-FL == "N" /* no errors*/
   && KM0RW01.KM0RW-END == "N")   /* not pf3*/
    if (KM0RM000.KM0RM-SELECT[KM0RW-HDX] == "I")
      KM0RW01.KM0RW-DONE = "Y"; /* done with inq*/
      KM0RM000.KM0RM-SELECT[KM0RW-HDX] = " ";
    else
      if (KM0RW01.KM0RW-HNDL-MOD-FL == "Y")
        converseLib.validationFailed(277); /* good edit*/
        KM0RW01.KM0RW-EDIT-FL = "Y"; /* setup update flag*/
        KM0RW01.KM0RW-RESEND-MAP-FLAG = "Y";
      end
    end
  end

end // end KM0R-400


// Process Special And PFkeys
Function KM0R-405()
   /* ************************************************/
     /* edit all special entry keys                **/
   /* ************************************************/


   /* **************************************/
   /* edit pa2 key*/
   /* **************************************/

  if (converseVar.eventKey is pa2)
    if (KM0RM010.KM0RM-MODE == "ADD    ")
      set KM0RM010 empty;
      KM0RM010.KM0RM-MODE = "ADD    ";
      KM0RM010.KUCCOID = KM0RM000.KUCCOID;
    else
      KM0R-330(); /* refresh screen*/
    end
    KM0RW01.KM0RW-ERR-FL = "Y";
    KM0RW01.KM0RW-HNDL-MOD-FL = "N";
    return;
  end

   /* **************************************/
   /* edit enter  key*/
   /* **************************************/

  if (converseVar.eventKey is enter)
    return;
  end
   /* **************************************/
   /* edit pf3 key*/
   /* **************************************/

  if (converseVar.eventKey is pf3) /* back to from application*/
    converseLib.validationFailed(0);
    KM0RM010.KM0RM-ERR-MSG = " ";
    KM0RW01.KM0RW-ERR-FL = "N";
    KM0RW01.KM0RW-END = "Y";
    KM0RW01.KM0RW-DONE = "Y";
    return;
  end

   /* **************************************/
   /* edit pf9 key*/
   /* **************************************/

  if (converseVar.eventKey is pf9) /* back to from application*/
                                  /* skip to next selected hndl exception*/
    KM0RW01.KM0RW-DONE = "Y"; /* set done flag*/
    KM0RM000.KM0RM-SELECT[KM0RW-HDX] = " "; /* blank select*/
    return;
  end

   /* **************************************/
   /* edit pf12 key*/
   /* **************************************/

  if (converseVar.eventKey is pf12 /* update key*/
   && KM0RW01.KM0RW-EDIT-FL == "Y" /* all edits ok*/
   && KM0RW01.KM0RW-ERR-FL == "N") /* no errors*/
    KM0R-410(); /* edit screen*/
    if (KM0RW01.KM0RW-HNDL-MOD-FL == "Y") /* if company data updated*/
      if (KM0RW01.KM0RW-ERR-FL == "N") /* no errors*/
        if (KM0RM000.KM0RM-SELECT[KM0RW-HDX] == "A")
          KM0R-415(); /* process hndlx add*/
                                  /* don't set done, stay in loop*/
        else
          if (KM0RM000.KM0RM-SELECT[KM0RW-HDX] == "D")
            KM0R-435(); /* process hndlx delete*/
            KM0RW01.KM0RW-DONE = "Y"; /* pick next select*/
            KM0RM000.KM0RM-SELECT[KM0RW-HDX] = " ";
          else
            KM0R-445(); /* process hndlx update*/
            KM0RW01.KM0RW-DONE = "Y"; /* pick next select*/
            KM0RM000.KM0RM-SELECT[KM0RW-HDX] = " ";
          end
        end
      end
    end

    if (KM0RW01.KM0RW-ERR-FL == "N") /* no errors*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* commit updates*/
      converseLib.validationFailed(279); /* all updates ok*/
      KM0RW01.KM0RW-EDIT-FL = "N"; /* updates ok set =n*/
      KM0RW01.KM0RW-HNDL-MOD-FL = "N"; /* reset cmpny update*/
      KM0RW01.KM0RW-RESEND-MAP-FLAG = "N";
      return;
    else
      KM0RW01.KM0RW-EDIT-FL = "N"; /* reset update ok flag;*/
    end

  end

  if (converseVar.eventKey is pf12) /* update key*/
    if (KM0RM000.KM0RM-SELECT[KM0RW-HDX] == "I")
      KM0RW01.KM0RW-ERR-FL = "Y"; /* error flag*/
      converseLib.validationFailed(281); /* invalid key was pressed*/
      return;
    else
      if (KM0RW01.KM0RW-EDIT-FL == "N" /* edits not ok*/
       && KM0RW01.KM0RW-ERR-FL == "N") /* error flag*/
        KM0RW01.KM0RW-ERR-FL = "Y"; /* error flag*/
        converseLib.validationFailed(280); /* can pf12 without pressing enter*/
        return;
      end
    end
  end


   /* **************************************/
   /* edit invalid key*/
   /* **************************************/

  if (KM0RW01.KM0RW-ERR-FL == "N")
    converseLib.validationFailed(281); /* invalid pf key message*/
    KM0RW01.KM0RW-ERR-FL = "Y";
  end



end // end KM0R-405


// edit handling data
Function KM0R-410()
   /* **********************************************************/
   /* km0r-410  edit fields from handling exception screen  **/
   /* **********************************************************/
   /*  */
   /* **********************************************************/
   /* first set of flags, codes and indicators         **/
   /* **********************************************************/
   /*  */
   /* **********************************************************/
   /* check if any changes                     **/
   /* **********************************************************/

  if (KM0RM010.KUMSTRID != KUFREC.KUMSTRID
   || KM0RM010.XNXCD != KUFREC.XNXCD
   || KM0RM010.XGPCD != KUFREC.XGPCD
   || KM0RM010.XHDCD[1] != KUFREC.XHDCD[1]
   || KM0RM010.XHDCD[2] != KUFREC.XHDCD[2]
   || KM0RM010.XHDCD[3] != KUFREC.XHDCD[3]
   || KM0RM010.XHDCD[4] != KUFREC.XHDCD[4]
   || KM0RM010.XHDCD[5] != KUFREC.XHDCD[5]
   || KM0RM010.XHDCHG[1] != KUFREC.XHDCHG[1]
   || KM0RM010.XHDCHG[2] != KUFREC.XHDCHG[2]
   || KM0RM010.XHDCHG[3] != KUFREC.XHDCHG[3]
   || KM0RM010.XHDCHG[4] != KUFREC.XHDCHG[4]
   || KM0RM010.XHDCHG[5] != KUFREC.XHDCHG[5]
   || KM0RM010.XHD-HNDL-CST[1] != KUFREC.XHD-HNDL-CST[1]
   || KM0RM010.XHD-HNDL-CST[2] != KUFREC.XHD-HNDL-CST[2]
   || KM0RM010.XHD-HNDL-CST[3] != KUFREC.XHD-HNDL-CST[3]
   || KM0RM010.XHD-HNDL-CST[4] != KUFREC.XHD-HNDL-CST[4]
   || KM0RM010.XHD-HNDL-CST[5] != KUFREC.XHD-HNDL-CST[5]
   || KM0RM010.PWRLBCD[1] != KUFREC.PWRLBCD[1]
   || KM0RM010.PWRLBCD[2] != KUFREC.PWRLBCD[2]
   || KM0RM010.XPACD != KUFREC.XPACD
   || KM0RM010.KUFMIXBL != KUFREC.KUFMIXBL
   || KM0RM010.XXXSTAT != KUFREC.XXXSTAT
   || KM0RW01.KM0RW-ADD-FL == "Y")
    KM0RW01.KM0RW-HNDL-MOD-FL = "Y"; /* hndlx01 modified*/
  end

  if (KM0RM000.KM0RM-SELECT[KM0RW-HDX] == "D"
   || KM0RM000.KM0RM-SELECT[KM0RW-HDX] == "A")
    KM0RW01.KM0RW-HNDL-MOD-FL = "Y";
  end

  if (KM0RW01.KM0RW-HNDL-MOD-FL == "Y")
    /* NEXT SENTENCE*/
  else
    return;
  end


   /* ****************************************/
   /* edit handling code & charge and cost 5*/
   /* ****************************************/
  if (KM0RM010.XHDCHG[5] != KUFREC.XHDCHG[5])
    if (KM0RM010.XHDCHG[5] > 0
     && KM0RM010.XHDCD[5] != "  ")
      set KM0RM010.XHDCHG[5] initialAttributes;
    else
      if (KM0RM010.XHDCHG[5] > 0
       && KM0RM010.XHDCD[5] == "  ")
        KM0RM010.KM0RM-ERR-MSG = "CODE IS REQ FOR A HANDLE CHARGE";
        set KM0RM010.XHDCHG[5] cursor, modified, bold;
        KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
      end
    end
  end

  if (KM0RM010.XHD-HNDL-CST[5] != KUFREC.XHD-HNDL-CST[5])
    if (KM0RM010.XHD-HNDL-CST[5] > 0
     && KM0RM010.XHDCD[5] != "  ")
      set KM0RM010.XHD-HNDL-CST[5] initialAttributes;
    else
      if (KM0RM010.XHD-HNDL-CST[5] > 0
       && KM0RM010.XHDCD[5] == "  ")
        KM0RM010.KM0RM-ERR-MSG = "CODE IS REQ FOR A HANDLING COST";
        set KM0RM010.XHD-HNDL-CST[5] cursor, modified, bold;
        KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
      end
    end
  end


  if (KM0RM010.XHDCD[5] != KUFREC.XHDCD[5])
    if (KM0RM010.XHDCD[5] != "  ")
      KM0RW01.XHDCD = KM0RM010.XHDCD[5];
      KM0RW01.KM0RW-XGP-CD = KM0RM010.XGPCD;
      if (KM0RW01.KM0RW-XHDTBL-KEY in XHDTBL.XHDKEY)
        if (XHDTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          if (KM0RM010.XHDCHG[5] == 0)
            KM0RM010.XHDCHG[5] = XHDTBL.XHDCHG[sysVar.arrayIndex];
          end
          if (KM0RM010.XHD-HNDL-CST[5] == 0)
            KM0RM010.XHD-HNDL-CST[5] = XHDTBL.XHD-HNDL-CST[sysVar.arrayIndex];
          end
          set KM0RM010.XHDCD[5] initialAttributes;
          set KM0RM010.XHDCHG[5] initialAttributes;
          set KM0RM010.XHD-HNDL-CST[5] initialAttributes;
        else
          KM0RM010.KM0RM-ERR-MSG = "HANDLE CODE IS INACTIVE";
          set KM0RM010.XHDCD[5] cursor, modified, bold;
          KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
        end
      else
        KM0RM010.KM0RM-ERR-MSG = "HANDLE CODE IS INVALID /W GPC";
        set KM0RM010.XHDCD[5] cursor, modified, bold;
        KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
      end
    else
      KM0RM010.XHDCHG[5] = 0;
      KM0RM010.XHD-HNDL-CST[5] = 0;
    end
  else
    if (KM0RM010.XHDCD[5] == "  ")
      KM0RM010.XHDCHG[5] = 0;
      KM0RM010.XHD-HNDL-CST[5] = 0;
    end
  end


   /* *************************************/
   /* edit handling code, charge & cost 4*/
   /* *************************************/
  if (KM0RM010.XHDCHG[4] != KUFREC.XHDCHG[4])
    if (KM0RM010.XHDCHG[4] > 0
     && KM0RM010.XHDCD[4] != "  ")
      set KM0RM010.XHDCHG[4] initialAttributes;
    else
      if (KM0RM010.XHDCHG[4] > 0
       && KM0RM010.XHDCD[4] == "  ")
        KM0RM010.KM0RM-ERR-MSG = "CODE IS REQ FOR A HANDLE CHARGE";
        set KM0RM010.XHDCHG[4] cursor, modified, bold;
        KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
      end
    end
  end

  if (KM0RM010.XHD-HNDL-CST[4] != KUFREC.XHD-HNDL-CST[4])
    if (KM0RM010.XHD-HNDL-CST[4] > 0
     && KM0RM010.XHDCD[4] != "  ")
      set KM0RM010.XHD-HNDL-CST[4] initialAttributes;
    else
      if (KM0RM010.XHD-HNDL-CST[4] > 0
       && KM0RM010.XHDCD[4] == "  ")
        KM0RM010.KM0RM-ERR-MSG = "CODE IS REQ FOR A HANDLING COST";
        set KM0RM010.XHD-HNDL-CST[4] cursor, modified, bold;
        KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
      end
    end
  end


  if (KM0RM010.XHDCD[4] != KUFREC.XHDCD[4])
    if (KM0RM010.XHDCD[4] != "  ")
      KM0RW01.XHDCD = KM0RM010.XHDCD[4];
      KM0RW01.KM0RW-XGP-CD = KM0RM010.XGPCD;
      if (KM0RW01.KM0RW-XHDTBL-KEY in XHDTBL.XHDKEY)
        if (XHDTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          if (KM0RM010.XHDCHG[4] == 0)
            KM0RM010.XHDCHG[4] = XHDTBL.XHDCHG[sysVar.arrayIndex];
          end
          if (KM0RM010.XHD-HNDL-CST[4] == 0)
            KM0RM010.XHD-HNDL-CST[4] = XHDTBL.XHD-HNDL-CST[sysVar.arrayIndex];
          end
          set KM0RM010.XHDCD[4] initialAttributes;
          set KM0RM010.XHDCHG[4] initialAttributes;
          set KM0RM010.XHD-HNDL-CST[4] initialAttributes;
        else
          KM0RM010.KM0RM-ERR-MSG = "HANDLE CODE IS INACTIVE";
          set KM0RM010.XHDCD[4] cursor, modified, bold;
          KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
        end
      else
        KM0RM010.KM0RM-ERR-MSG = "HANDLE CODE IS INVALID /W GPC";
        set KM0RM010.XHDCD[4] cursor, modified, bold;
        KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
      end
    else
      KM0RM010.XHDCHG[4] = 0;
      KM0RM010.XHD-HNDL-CST[4] = 0;
    end
  else
    if (KM0RM010.XHDCD[4] == "  ")
      KM0RM010.XHDCHG[4] = 0;
      KM0RM010.XHD-HNDL-CST[4] = 0;
    end
  end


   /* *************************************/
   /* edit handling code, charge & cost 3*/
   /* *************************************/
  if (KM0RM010.XHDCHG[3] != KUFREC.XHDCHG[3])
    if (KM0RM010.XHDCHG[3] > 0
     && KM0RM010.XHDCD[3] != "  ")
      set KM0RM010.XHDCHG[3] initialAttributes;
    else
      if (KM0RM010.XHDCHG[3] > 0
       && KM0RM010.XHDCD[3] == "  ")
        KM0RM010.KM0RM-ERR-MSG = "CODE IS REQ FOR A HANDLE CHARGE";
        set KM0RM010.XHDCHG[3] cursor, modified, bold;
        KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
      end
    end
  end

  if (KM0RM010.XHD-HNDL-CST[3] != KUFREC.XHD-HNDL-CST[3])
    if (KM0RM010.XHD-HNDL-CST[3] > 0
     && KM0RM010.XHDCD[3] != "  ")
      set KM0RM010.XHD-HNDL-CST[3] initialAttributes;
    else
      if (KM0RM010.XHD-HNDL-CST[3] > 0
       && KM0RM010.XHDCD[3] == "  ")
        KM0RM010.KM0RM-ERR-MSG = "CODE IS REQ FOR A HANDLING COST";
        set KM0RM010.XHD-HNDL-CST[3] cursor, modified, bold;
        KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
      end
    end
  end


  if (KM0RM010.XHDCD[3] != KUFREC.XHDCD[3])
    if (KM0RM010.XHDCD[3] != "  ")
      KM0RW01.XHDCD = KM0RM010.XHDCD[3];
      KM0RW01.KM0RW-XGP-CD = KM0RM010.XGPCD;
      if (KM0RW01.KM0RW-XHDTBL-KEY in XHDTBL.XHDKEY)
        if (XHDTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          if (KM0RM010.XHDCHG[3] == 0)
            KM0RM010.XHDCHG[3] = XHDTBL.XHDCHG[sysVar.arrayIndex];
          end
          if (KM0RM010.XHD-HNDL-CST[3] == 0)
            KM0RM010.XHD-HNDL-CST[3] = XHDTBL.XHD-HNDL-CST[sysVar.arrayIndex];
          end
          set KM0RM010.XHDCD[3] initialAttributes;
          set KM0RM010.XHDCHG[3] initialAttributes;
          set KM0RM010.XHD-HNDL-CST[3] initialAttributes;
        else
          KM0RM010.KM0RM-ERR-MSG = "HANDLE CODE IS INACTIVE";
          set KM0RM010.XHDCD[3] cursor, modified, bold;
          KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
        end
      else
        KM0RM010.KM0RM-ERR-MSG = "HANDLE CODE IS INVALID /W GPC";
        set KM0RM010.XHDCD[3] cursor, modified, bold;
        KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
      end
    else
      KM0RM010.XHDCHG[3] = 0;
      KM0RM010.XHD-HNDL-CST[3] = 0;
    end
  else
    if (KM0RM010.XHDCD[3] == "  ")
      KM0RM010.XHDCHG[3] = 0;
      KM0RM010.XHD-HNDL-CST[3] = 0;
    end
  end


   /* *****************************************/
    /* edit packing code*/
   /* *****************************************/

  if (KM0RM010.XPACD != KUFREC.XPACD)
    if (KM0RM010.XPACD == " ")
      set KM0RM010.XPACD initialAttributes;
    else
      if (KM0RM010.XPACD in XPATBL.XPACD)
        if (XPATBL.XXXSTAT[sysVar.arrayIndex] == "A")
          set KM0RM010.XPACD initialAttributes;
          if (KM0RM010.XPACD in XPATBL.XPACD)
            KM0RM010.XPADESC = XPATBL.XPADESC[sysVar.arrayIndex];
          end
        else
          converseLib.validationFailed(71);
          KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
          set KM0RM010.XPACD cursor, modified, bold;
        end
      else
        converseLib.validationFailed(17);
        KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
        set KM0RM010.XPACD cursor, modified, bold;
      end
    end
  end


   /* *************************************/
   /* edit handling code, charge & cost 2*/
   /* *************************************/
  if (KM0RM010.XHDCHG[2] != KUFREC.XHDCHG[2])
    if (KM0RM010.XHDCHG[2] > 0
     && KM0RM010.XHDCD[2] != "  ")
      set KM0RM010.XHDCHG[2] initialAttributes;
    else
      if (KM0RM010.XHDCHG[2] > 0
       && KM0RM010.XHDCD[2] == "  ")
        KM0RM010.KM0RM-ERR-MSG = "CODE IS REQ FOR A HANDLE CHARGE";
        set KM0RM010.XHDCHG[2] cursor, modified, bold;
        KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
      end
    end
  end

  if (KM0RM010.XHD-HNDL-CST[2] != KUFREC.XHD-HNDL-CST[2])
    if (KM0RM010.XHD-HNDL-CST[2] > 0
     && KM0RM010.XHDCD[2] != "  ")
      set KM0RM010.XHD-HNDL-CST[2] initialAttributes;
    else
      if (KM0RM010.XHD-HNDL-CST[2] > 0
       && KM0RM010.XHDCD[2] == "  ")
        KM0RM010.KM0RM-ERR-MSG = "CODE IS REQ FOR A HANDLING COST";
        set KM0RM010.XHD-HNDL-CST[2] cursor, modified, bold;
        KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
      end
    end
  end


  if (KM0RM010.XHDCD[2] != KUFREC.XHDCD[2])
    if (KM0RM010.XHDCD[2] != "  ")
      KM0RW01.XHDCD = KM0RM010.XHDCD[2];
      KM0RW01.KM0RW-XGP-CD = KM0RM010.XGPCD;
      if (KM0RW01.KM0RW-XHDTBL-KEY in XHDTBL.XHDKEY)
        if (XHDTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          if (KM0RM010.XHDCHG[2] == 0)
            KM0RM010.XHDCHG[2] = XHDTBL.XHDCHG[sysVar.arrayIndex];
          end
          if (KM0RM010.XHD-HNDL-CST[2] == 0)
            KM0RM010.XHD-HNDL-CST[2] = XHDTBL.XHD-HNDL-CST[sysVar.arrayIndex];
          end
          set KM0RM010.XHDCD[2] initialAttributes;
          set KM0RM010.XHDCHG[2] initialAttributes;
          set KM0RM010.XHD-HNDL-CST[2] initialAttributes;
        else
          KM0RM010.KM0RM-ERR-MSG = "HANDLE CODE IS INACTIVE";
          set KM0RM010.XHDCD[2] cursor, modified, bold;
          KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
        end
      else
        KM0RM010.KM0RM-ERR-MSG = "HANDLE CODE IS INVALID /W GPC";
        set KM0RM010.XHDCD[2] cursor, modified, bold;
        KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
      end
    else
      KM0RM010.XHDCHG[2] = 0;
      KM0RM010.XHD-HNDL-CST[2] = 0;
    end
  else
    if (KM0RM010.XHDCD[2] == "  ")
      KM0RM010.XHDCHG[2] = 0;
      KM0RM010.XHD-HNDL-CST[2] = 0;
    end
  end


   /* *************************************/
   /* edit handling code, charge & cost 1*/
   /* *************************************/
  if (KM0RM010.XHDCHG[1] != KUFREC.XHDCHG[1])
    if (KM0RM010.XHDCHG[1] > 0
     && KM0RM010.XHDCD[1] != "  ")
      set KM0RM010.XHDCHG[1] initialAttributes;
    else
      if (KM0RM010.XHDCHG[1] > 0
       && KM0RM010.XHDCD[1] == "  ")
        KM0RM010.KM0RM-ERR-MSG = "CODE IS REQ FOR A HANDLE CHARGE";
        set KM0RM010.XHDCHG[1] cursor, modified, bold;
        KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
      end
    end
  end

  if (KM0RM010.XHD-HNDL-CST[1] != KUFREC.XHD-HNDL-CST[1])
    if (KM0RM010.XHD-HNDL-CST[1] > 0
     && KM0RM010.XHDCD[1] != "  ")
      set KM0RM010.XHD-HNDL-CST[1] initialAttributes;
    else
      if (KM0RM010.XHD-HNDL-CST[1] > 0
       && KM0RM010.XHDCD[1] == "  ")
        KM0RM010.KM0RM-ERR-MSG = "CODE IS REQ FOR A HANDLING COST";
        set KM0RM010.XHD-HNDL-CST[1] cursor, modified, bold;
        KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
      end
    end
  end


  if (KM0RM010.XHDCD[1] != KUFREC.XHDCD[1])
    if (KM0RM010.XHDCD[1] != "  ")
      KM0RW01.XHDCD = KM0RM010.XHDCD[1];
      KM0RW01.KM0RW-XGP-CD = KM0RM010.XGPCD;
      if (KM0RW01.KM0RW-XHDTBL-KEY in XHDTBL.XHDKEY)
        if (XHDTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          if (KM0RM010.XHDCHG[1] == 0)
            KM0RM010.XHDCHG[1] = XHDTBL.XHDCHG[sysVar.arrayIndex];
          end
          if (KM0RM010.XHD-HNDL-CST[1] == 0)
            KM0RM010.XHD-HNDL-CST[1] = XHDTBL.XHD-HNDL-CST[sysVar.arrayIndex];
          end
          set KM0RM010.XHDCD[1] initialAttributes;
          set KM0RM010.XHDCHG[1] initialAttributes;
          set KM0RM010.XHD-HNDL-CST[1] initialAttributes;
        else
          KM0RM010.KM0RM-ERR-MSG = "HANDLE CODE IS INACITVE";
          set KM0RM010.XHDCD[1] cursor, modified, bold;
          KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
        end
      else
        KM0RM010.KM0RM-ERR-MSG = "HANDLE CODE IS INVALID /W GPC";
        set KM0RM010.XHDCD[1] cursor, modified, bold;
        KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
      end
    else
      KM0RM010.XHDCHG[1] = 0;
      KM0RM010.XHD-HNDL-CST[1] = 0;
    end
  else
    if (KM0RM010.XHDCD[1] == "  ")
      KM0RM010.XHDCHG[1] = 0;
      KM0RM010.XHD-HNDL-CST[1] = 0;
    end
  end


   /* *****************************************/
    /* edit label code*/
   /* *****************************************/

  if (KM0RM010.PWRLBCD[2] != KUFREC.PWRLBCD[2])
    if (KM0RM010.PWRLBCD[2] == " ")
      set KM0RM010.PWRLBCD[2] initialAttributes;
      KM0RM010.PWRLBABR[2] = " ";
    else
      PWRREC.PWRLBCD = KM0RM010.PWRLBCD[2];
      KM0R-340(); /* read picking labels*/
      if (KM0RW01.KM0RW-LBL-FL == "Y")
        if (PWRREC.XXXSTAT == "A")
          set KM0RM010.PWRLBCD[2] initialAttributes;
          KM0RM010.PWRLBABR[2] = PWRREC.PWRLBABR;
        else
          converseLib.validationFailed(71);
          KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
          set KM0RM010.PWRLBCD[2] cursor, modified, bold;
        end
      else
        converseLib.validationFailed(17);
        KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
        set KM0RM010.PWRLBCD[2] cursor, modified, bold;
      end
    end
  end

  if (KM0RM010.PWRLBCD[1] != KUFREC.PWRLBCD[1])
    if (KM0RM010.PWRLBCD[1] == " ")
      set KM0RM010.PWRLBCD[1] initialAttributes;
      KM0RM010.PWRLBABR[1] = " ";
    else
      PWRREC.PWRLBCD = KM0RM010.PWRLBCD[1];
      KM0R-340(); /* read picking labels*/
      if (KM0RW01.KM0RW-LBL-FL == "Y")
        if (PWRREC.XXXSTAT == "A")
          set KM0RM010.PWRLBCD[1] initialAttributes;
          KM0RM010.PWRLBABR[1] = PWRREC.PWRLBABR;
        else
          converseLib.validationFailed(71);
          KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
          set KM0RM010.PWRLBCD[1] cursor, modified, bold;
        end
      else
        converseLib.validationFailed(17);
        KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
        set KM0RM010.PWRLBCD[1] cursor, modified, bold;
      end
    end
  end


   /* ***************************************/
   /* *****     edit mix box flag      ******/
   /* ***************************************/

  if (KM0RM010.KUFMIXBL != " ")
    if (KM0RM010.KUFMIXBL == "Y"
     || KM0RM010.KUFMIXBL == "N")
      set KM0RM010.KUFMIXBL initialAttributes;
    else
      converseLib.validationFailed(20);
      KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
      set KM0RM010.KUFMIXBL cursor, modified, bold;
    end
  else
    KM0RM010.KUFMIXBL = "N";
    set KM0RM010.KUFMIXBL initialAttributes;
  end


   /* ****************************************************/
   /* *****     edit status indicator               ******/
   /* ****************************************************/

  if (KM0RM010.XXXSTAT != " ")
    if (KM0RM010.XXXSTAT == "I"
     || KM0RM010.XXXSTAT == "A")
      set KM0RM010.XXXSTAT initialAttributes;
    else
      converseLib.validationFailed(162);
      KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
      set KM0RM010.XXXSTAT cursor, modified, bold;
    end
  else
    KM0RM010.XXXSTAT = "A";
    set KM0RM010.XXXSTAT initialAttributes;
  end

   /* ****************************************************/
   /* *****       EDIT FOR VALID KEY DATA           ******/
   /* *****    during add key data must be equal    ******/
   /* *****    to first map or a global add         ******/
   /* ****************************************************/
  if (KM0RM000.KM0RM-SELECT[KM0RW-HDX] == "A")
    if (KM0RM010.XGPCD == KM0RM000.XGPCD
     || KM0RM010.XGPCD == "**")
      set KM0RM010.XGPCD initialAttributes;
      /* next sentence*/
    else
      converseLib.validationFailed(446);
      KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
      set KM0RM010.XGPCD cursor, modified, bold;
    end

    if (KM0RM010.XNXCD == KM0RM000.XNXCD
     || KM0RM010.XNXCD == -1)
      set KM0RM010.XNXCD initialAttributes;
      /* next sentence*/
    else
      converseLib.validationFailed(446);
      KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
      set KM0RM010.XNXCD cursor, modified, bold;
    end

    if (KM0RM010.KUMSTRID == KM0RM000.KUMSTRID
     || KM0RM010.KUMSTRID == -1)
      set KM0RM010.KUMSTRID initialAttributes;
      /* next sentence*/
    else
      converseLib.validationFailed(446);
      KM0RW01.KM0RW-ERR-FL = "Y"; /* set error flag*/
      set KM0RM010.KUMSTRID cursor, modified, bold;
    end
  end

  if (KM0RW01.KM0RW-ERR-FL == "Y")
    return;
  end

   /* check for duplicate record*/
  if (KM0RM000.KM0RM-SELECT[KM0RW-HDX] == "A")
    KM0R-412();
  end

end // end KM0R-410


// add hndlx record
Function KM0R-412()
   /* ******************************************/
   /* km0r-427  check for duplicate record  **/
   /* ******************************************/

  set SQLCA empty;

  KUFREC.KUCCOID = KM0RM010.KUCCOID; /* set new record key*/
  KUFREC.KUMSTRID = KM0RM010.KUMSTRID;
  KUFREC.XNXCD = KM0RM010.XNXCD;
  KUFREC.XGPCD = KM0RM010.XGPCD;

  call "IO0200" ("S ", SQLCA, KUFREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0) /* record found*/
    converseLib.validationFailed(194); /* record already exists*/
    KM0RW01.KM0RW-ERR-FL = "Y"; /* set error msg*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* not found*/
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VHNDKX01";
      TA1REC.TA1PGMNM = "KM0R-412";
      TA1REC.TA1LOC = "READING DB2 HNDLX01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4(); /* return to main menu*/
    end
  end

end // end KM0R-412


// process add record
Function KM0R-415()
   /* **************************************************************/
   /* km0r-415  add handling exceptions and create audit trail  **/
   /* **************************************************************/

   /* convert csp time/date format to db2 time/date stamp format*/
  XX0XS01();

  KM0R-420(); /* format hndlx general data update*/


   /* *****************************/
   /* prepare add audit trail  **/
   /* *****************************/

  set KUZREC empty;
  KUZREC.KUZTYPE = "A"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = " "; /* blank-add, b-before, a-after*/
  KUZREC.XXXTBLNM = "VHNDLX01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUFREC.KUCCOID;
  KUZREC.KUMSTRID = KUFREC.KUMSTRID;
  KUZREC.XNXCD = KUFREC.XNXCD;
  KUZREC.XGPCD = KUFREC.XGPCD;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUFREC.KUFGRP;


  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM0R   ";
    TA1REC.TA1LOCAT[1] = "KM0R500  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VHNDLX01 ";
    TA1REC.TA1MAP = "KM0RM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VHNDLX01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

  KM0R-425(); /* add audit image for hndlx01*/

  KM0R-430(); /* add handlx record*/

end // end KM0R-415


// prepare hndlx record
Function KM0R-420()
   /* ***********************************************/
   /* km0r-420  format handle exceptions update  **/
   /* **********************************************/
   /*  */
   /* ***********************************************/
   /* Maintenance History:                        **/
   /* 10-11-91 CHELLM Added XHD-HNDL-CST 1 thru 5.**/
   /* ***********************************************/

  KUFREC.KUCCOID = KM0RM010.KUCCOID; /* company*/
  KUFREC.KUMSTRID = KM0RM010.KUMSTRID; /* store*/
  KUFREC.XNXCD = KM0RM010.XNXCD; /* dept*/
  KUFREC.XGPCD = KM0RM010.XGPCD; /* gpc*/

  KUFREC.XHDCD[1] = KM0RM010.XHDCD[1]; /* handling codes*/
  KUFREC.XHDCD[2] = KM0RM010.XHDCD[2];
  KUFREC.XHDCD[3] = KM0RM010.XHDCD[3];
  KUFREC.XHDCD[4] = KM0RM010.XHDCD[4];
  KUFREC.XHDCD[5] = KM0RM010.XHDCD[5];
  KUFREC.XHDCHG[1] = KM0RM010.XHDCHG[1]; /* handling charges*/
  KUFREC.XHDCHG[2] = KM0RM010.XHDCHG[2];
  KUFREC.XHDCHG[3] = KM0RM010.XHDCHG[3];
  KUFREC.XHDCHG[4] = KM0RM010.XHDCHG[4];
  KUFREC.XHDCHG[5] = KM0RM010.XHDCHG[5];
  KUFREC.XHD-HNDL-CST[1] = KM0RM010.XHD-HNDL-CST[1];
  KUFREC.XHD-HNDL-CST[2] = KM0RM010.XHD-HNDL-CST[2];
  KUFREC.XHD-HNDL-CST[3] = KM0RM010.XHD-HNDL-CST[3];
  KUFREC.XHD-HNDL-CST[4] = KM0RM010.XHD-HNDL-CST[4];
  KUFREC.XHD-HNDL-CST[5] = KM0RM010.XHD-HNDL-CST[5];
  KUFREC.PWRLBCD[1] = KM0RM010.PWRLBCD[1]; /* labeling codes*/
  KUFREC.PWRLBCD[2] = KM0RM010.PWRLBCD[2];
  KUFREC.XPACD = KM0RM010.XPACD; /* packing code*/
  KUFREC.KUFMIXBL = KM0RM010.KUFMIXBL; /* mix box flag*/
  KUFREC.XXXSTAT = KM0RM010.XXXSTAT; /* status*/


  KUFREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* stamp chg date*/
  KUFREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* stamp chg time*/



end // end KM0R-420


// write audit record
Function KM0R-425()
   /* ********************************/
   /* km0r-425  add before image  **/
   /* ********************************/

  set SQLCA empty;

  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUAUD01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1PGMNM = "KM0R-425";
    TA1REC.TA1LOC = "ADD DB2 DCUST.VCUAUD01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    XSPF4(); /* return to main menu*/
  end


end // end KM0R-425


// add hndlx record
Function KM0R-430()
   /* ***************************************/
   /* km0r-430  add handling exceptions  **/
   /* ***************************************/

  set SQLCA empty;

  KUFREC.ZZZSDT = XX0XW01.XX0XWDAT; /* stamp setup date*/


  call "IO0200" ("A ", SQLCA, KUFREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      converseLib.validationFailed(31); /* hndlx upt since last request msg*/
      KM0RW01.KM0RW-ERR-FL = "Y"; /* set error msg*/
      KM0R-200(); /* refresh the screen*/
      return;
    else
      KM0RW01.KM0RW-SAVE-SQLCD = SQLCA.SQLCAREC; /* hold error sqlca*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      SQLCA.SQLCAREC = KM0RW01.KM0RW-SAVE-SQLCD;
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VHNDLX01";
      TA1REC.TA1MAP = " ";
      KM0RW01.KM0RW-CURR-CO-ID = KUFREC.KUCCOID;
      KM0RW01.KM0RW-CURR-STOR-ID = KUFREC.KUMSTRID;
      KM0RW01.KM0RM-CURR-DEPT-ID = KUFREC.XNXCD;
      KM0RW01.KM0RW-CURR-GPC-ID = KUFREC.XGPCD;
      TA1REC.TA1TBLKE = KM0RW01.KM0RW-KEY;
      TA1REC.TA1PGMNM = "KM0R-430";
      TA1REC.TA1LOC = "UPDATE DB2 DCUST.VCMPNY01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4(); /* return to main menu*/
    end
  end


end // end KM0R-430


// process add record
Function KM0R-435()
   /* *****************************************************************/
   /* km0r-435  delete handling exceptions and create audit trail  **/
   /* *****************************************************************/

   /* convert csp time/date format to db2 time/date stamp format*/
  XX0XS01();

  KM0R-420(); /* format hndlx general data update*/


   /* ********************************/
   /* prepare delete audit trail  **/
   /* ********************************/

  set KUZREC empty;
  KUZREC.KUZTYPE = "D"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = " "; /* blank-add, b-before, a-after*/
  KUZREC.XXXTBLNM = "VHNDLX01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUFREC.KUCCOID;
  KUZREC.KUMSTRID = KUFREC.KUMSTRID;
  KUZREC.XNXCD = KUFREC.XNXCD;
  KUZREC.XGPCD = KUFREC.XGPCD;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUFREC.KUFGRP;


  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM0R   ";
    TA1REC.TA1LOCAT[1] = "KM0R-435 ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VHNDLX01 ";
    TA1REC.TA1MAP = "KM0RM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VHNDLX01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end


  KM0R-425(); /* add audit image for hndlx01*/

  KM0R-440(); /* delete handling exceptions*/


end // end KM0R-435


// add hndlx record
Function KM0R-440()
   /* ******************************************/
   /* km0r-440  delete handling exceptions  **/
   /* ******************************************/

  set SQLCA empty;

  KUFREC.ZZZSDT = XX0XW01.XX0XWDAT; /* stamp setup date*/


  call "IO0200" ("D ", SQLCA, KUFREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      converseLib.validationFailed(31); /* hndlx upt since last request msg*/
      KM0RW01.KM0RW-ERR-FL = "Y"; /* set error msg*/
      return;
    else
      KM0RW01.KM0RW-SAVE-SQLCD = SQLCA.SQLCAREC; /* hold error sqlca*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      SQLCA.SQLCAREC = KM0RW01.KM0RW-SAVE-SQLCD;
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VHNDLX01";
      TA1REC.TA1MAP = " ";
      KM0RW01.KM0RW-CURR-CO-ID = KUFREC.KUCCOID;
      KM0RW01.KM0RW-CURR-STOR-ID = KUFREC.KUMSTRID;
      KM0RW01.KM0RM-CURR-DEPT-ID = KUFREC.XNXCD;
      KM0RW01.KM0RW-CURR-GPC-ID = KUFREC.XGPCD;
      TA1REC.TA1TBLKE = KM0RW01.KM0RW-KEY;
      TA1REC.TA1PGMNM = "KM0R-440";
      TA1REC.TA1LOC = "UPDATE DB2 DCUST.VCMPNY01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4(); /* return to main menu*/
    end
  end


end // end KM0R-440


// process update record
Function KM0R-445()
   /* ***********************************************************/
   /* km0r-445  update handle except and create audit trail  **/
   /* ***********************************************************/

   /* convert csp time/date format to db2 time/date stamp format*/
  XX0XS01();


   /* *******************************/
   /* prepare before look audit  **/
   /* *******************************/

  set KUZREC empty;
  KUZREC.KUZTYPE = "C"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = "B"; /* blank-add, b-before, a-after*/
  KUZREC.XXXTBLNM = "VHNDLX01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUFREC.KUCCOID;
  KUZREC.KUMSTRID = KUFREC.KUMSTRID;
  KUZREC.XNXCD = KUFREC.XNXCD;
  KUZREC.XGPCD = KUFREC.XGPCD;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUFREC.KUFGRP;


  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM0R   ";
    TA1REC.TA1LOCAT[1] = "KM0R-445 ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VHNDLX01 ";
    TA1REC.TA1MAP = "KM0RM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VHNDLX01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end


  KM0R-425(); /* add audit before image for cmpny01*/

  KM0R-420(); /* format handle general data update*/

  KM0R-450(); /* update handl;e exception*/

   /* *****************************/
   /* format after look audit  **/
   /* *****************************/

  set KUZREC empty;
  KUZREC.KUZTYPE = "C"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = "A"; /* blank-add, b-before, a-after*/
  KUZREC.XXXTBLNM = "VHNDLX01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUFREC.KUCCOID;
  KUZREC.KUMSTRID = KUFREC.KUMSTRID;
  KUZREC.XNXCD = KUFREC.XNXCD;
  KUZREC.XGPCD = KUFREC.XGPCD;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUFREC.KUFGRP;


  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM0R   ";
    TA1REC.TA1LOCAT[1] = "KM0R-445 ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VHNDLX01 ";
    TA1REC.TA1MAP = "KM0RM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VHNDLX01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end


  KM0R-425(); /* write audit trail after image*/


end // end KM0R-445


// update hndlx record
Function KM0R-450()
   /* ************************************/
   /* km0r-450  update handlx record  **/
   /* ************************************/

  set SQLCA empty;

  call "IO0200" ("U ", SQLCA, KUFREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      converseLib.validationFailed(31); /* hndlx upt since last request msg*/
      KM0RW01.KM0RW-ERR-FL = "Y"; /* set error msg*/
      return;
    else
      KM0RW01.KM0RW-SAVE-SQLCD = SQLCA.SQLCAREC; /* hold error sqlca*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      SQLCA.SQLCAREC = KM0RW01.KM0RW-SAVE-SQLCD;
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VHNDLX01";
      TA1REC.TA1MAP = " ";
      KM0RW01.KM0RW-CURR-CO-ID = KUFREC.KUCCOID;
      KM0RW01.KM0RW-CURR-STOR-ID = KUFREC.KUMSTRID;
      KM0RW01.KM0RM-CURR-DEPT-ID = KUFREC.XNXCD;
      KM0RW01.KM0RW-CURR-GPC-ID = KUFREC.XGPCD;
      TA1REC.TA1TBLKE = KM0RW01.KM0RW-KEY;
      TA1REC.TA1PGMNM = "KM0R-450";
      TA1REC.TA1LOC = "UPDATE DB2 HNDLX01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      XSPF4(); /* return to main menu*/
    end
  end


end // end KM0R-450


// show pop-up windows
Function KM0R-455()

   /* ******************************/
   /* km0r-455  pop-up windows  **/
   /* ******************************/

   /* ******************************/
   /* handling codes table    **/
   /* ******************************/

  if (KM0RM010.XHDCD[1] == "?")
    KM0RW01.KM0RW-RESEND-MAP-FLAG = "Y";
    XPXX001();
    XX0XW02.XX0XWHDR = "VALID HANDLING CODES      ";
    while (XX0XW02.XX0XWEND == "N")
      XPXHD01();
    end
    set KM0RM010.XHDCD[1] cursor;
    if (XX0XW02.XX0XWPIX > 0)
      KM0RM010.XHDCD[1] = XHDTBL.XHDCD[XX0XWPIX];
    end
  end

  if (KM0RM010.XHDCD[2] == "?")
    KM0RW01.KM0RW-RESEND-MAP-FLAG = "Y";
    XPXX001();
    XX0XW02.XX0XWHDR = "VALID HANDLING CODES      ";
    while (XX0XW02.XX0XWEND == "N")
      XPXHD01();
    end
    set KM0RM010.XHDCD[2] cursor;
    if (XX0XW02.XX0XWPIX > 0)
      KM0RM010.XHDCD[2] = XHDTBL.XHDCD[XX0XWPIX];
    end
  end

  if (KM0RM010.XHDCD[3] == "?")
    KM0RW01.KM0RW-RESEND-MAP-FLAG = "Y";
    XPXX001();
    XX0XW02.XX0XWHDR = "VALID HANDLING CODES      ";
    while (XX0XW02.XX0XWEND == "N")
      XPXHD01();
    end
    set KM0RM010.XHDCD[3] cursor;
    if (XX0XW02.XX0XWPIX > 0)
      KM0RM010.XHDCD[3] = XHDTBL.XHDCD[XX0XWPIX];
    end
  end

  if (KM0RM010.XHDCD[4] == "?")
    KM0RW01.KM0RW-RESEND-MAP-FLAG = "Y";
    XPXX001();
    XX0XW02.XX0XWHDR = "VALID HANDLING CODES      ";
    while (XX0XW02.XX0XWEND == "N")
      XPXHD01();
    end
    set KM0RM010.XHDCD[4] cursor;
    if (XX0XW02.XX0XWPIX > 0)
      KM0RM010.XHDCD[4] = XHDTBL.XHDCD[XX0XWPIX];
    end
  end

  if (KM0RM010.XHDCD[5] == "?")
    KM0RW01.KM0RW-RESEND-MAP-FLAG = "Y";
    XPXX001();
    XX0XW02.XX0XWHDR = "VALID HANDLING CODES      ";
    while (XX0XW02.XX0XWEND == "N")
      XPXHD01();
    end
    set KM0RM010.XHDCD[5] cursor;
    if (XX0XW02.XX0XWPIX > 0)
      KM0RM010.XHDCD[5] = XHDTBL.XHDCD[XX0XWPIX];
    end
  end


   /* ****  Packing codes table  ***********/

  if (KM0RM010.XPACD == "?")
    KM0RW01.KM0RW-RESEND-MAP-FLAG = "Y";
    XPXX001();
    XX0XW02.XX0XWHDR = "VALID PACKING CODES       ";
    while (XX0XW02.XX0XWEND == "N")
      XPXPA01();
    end
    set KM0RM010.XPACD cursor;
    if (XX0XW02.XX0XWPIX > 0)
      KM0RM010.XPACD = XPATBL.XPACD[XX0XWPIX];
      KM0RM010.XPADESC = XPATBL.XPADESC[XX0XWPIX];
    end
  end


  converseLib.clearScreen();
  
end // end KM0R-455


// Init records
Function KM0RS-INIT-RECS()
  /* ************************************************************/
  /* *                 Initialize records used by KM0R*/
  /* ************************************************************/

  set KUCREC empty;
  set KUFREC empty;
  set KUMREC empty;
  set KUNREC empty;
  set KUZREC empty;
  set PWRREC empty;
  set KM0RW01 empty;
  set KM0RW02 empty;
  set XX0XW01 empty;
  set XX0XW02 empty;
  set XA0AW02 empty;
  set SQLCA empty;
  set TA1REC empty;
end // end KM0RS-INIT-RECS


// converse pop up window
Function XPXPA01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XPATBL.XPACD[XX0XWCT1] != "99") /* Or end of data*/
        if (XPATBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XPATBL.XPACD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XPATBL.XPADESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XPATBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XPATBL.XPACD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XPATBL.XPADESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XPATBL.XPACD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXPA01


//*** RECORD=KM0RW01 ****
// this record contains work fields used entirely within km06.
// ;---------------------------------------------------------
// ;            European Cloning
// ;---------------------------------------------------------
// ;
// 15-july-1993         dlegg     Add redefinitions of numeric
//                                fields.
// ***********************
Record KM0RW01 type basicRecord
  10 KM0RW-USER-AREA KM0RW-USER-AREA ; 
    15 KM0RW-CO-NO KM0RW-CO-NO ; 
      20 KM0RW-CO-NO-CHAR KM0RW-CO-NO-CHAR ; 
    15 KM0RW-STOR-NO KM0RW-STOR-NO ; 
      20 KM0RW-STOR-NO-CHAR KM0RW-STOR-NO-CHAR ; 
    15 KM0RW-DEPT-NO KM0RW-DEPT-NO ; 
      20 KM0RW-DEPT-NO-CHAR KM0RW-DEPT-NO-CHAR ; 
    15 KM0RW-GPC-NO KM0RW-GPC-NO ; 
  10 KM0RW-KEY KM0RW-KEY ; 
    15 KM0RW-CURR-CO-ID KM0RW-CURR-CO-ID ; 
    15 KM0RW-CURR-STOR-ID KM0RW-CURR-STOR-ID ; 
    15 KM0RM-CURR-DEPT-ID KM0RM-CURR-DEPT-ID ; 
    15 KM0RW-CURR-GPC-ID KM0RW-CURR-GPC-ID ; 
  10 KUCCOID KUCCOID ; 
  10 KUMSTRID KUMSTRID ; 
  10 KM0RW-STRID KM0RW-STRID ; 
    15 KM0RW-STORE-ID KM0RW-STORE-ID ; 
  10 XNXCD XNXCD ; 
  10 KM0RW-XNXCD KM0RW-XNXCD ; 
    15 KM0RW-DEPT-ID KM0RW-DEPT-ID ; 
  10 XGPCD XGPCD ; 
  10 KM0RW-ERR-FL KM0RW-ERR-FL ; 
  10 KM0RW-FIRST-TIME-FLAG KM0RW-FIRST-TIME-FLAG ; 
  10 KM0RW-RESEND-MAP-FLAG KM0RW-RESEND-MAP-FLAG ; 
  10 KM0RW-ADD-MODE-FLAG KM0RW-ADD-MODE-FLAG ; 
  10 KM0RW-DEL-MODE-FLAG KM0RW-DEL-MODE-FLAG ; 
  10 KM0RW-CURSOR-SWAP KM0RW-CURSOR-SWAP ; 
  10 KM0RW-END KM0RW-END ; 
  10 KM0RW-LBL-FL KM0RW-LBL-FL ; 
  10 KM0RW-HNDL-MOD-FL KM0RW-HNDL-MOD-FL ; 
  10 KM0RW-UPDT-INQ-FL KM0RW-UPDT-INQ-FL ; 
  10 KM0RW-EDIT-FL KM0RW-EDIT-FL ; 
  10 KM0RW-SAVE-SQLCD KM0RW-SAVE-SQLCD ; 
  10 XATCD XATCD ; 
  10 KM0RW-XHDTBL-KEY KM0RW-XHDTBL-KEY ; 
    15 XHDCD XHDCD ; 
    15 KM0RW-XGP-CD KM0RW-XGP-CD ; 
  10 KM0RW-HDX KM0RW-HDX ; 
  10 KM0RW-ADD-FL KM0RW-ADD-FL ; 
  10 KM0RW-DONE KM0RW-DONE ; 
end // end KM0RW01


//*** RECORD=KM0RW02 ****
// Before immage of vhndlx01 records
// 
//       MAINTENANCE LOG
// 
//    who       when      why
// ---------- --------- ---------------------------------------
// 02/10/92   WJOHNS    created record
// ***********************
Record KM0RW02 type basicRecord
  5 KUFGRP KUFGRP [11] ; 
end // end KM0RW02


// current dept id
DataItem KM0RM-CURR-DEPT-ID num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// add mode flag
DataItem KM0RW-ADD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// error flag
DataItem KM0RW-ADD-MODE-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


//   company number
DataItem KM0RW-CO-NO num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


//   company number
DataItem KM0RW-CO-NO-CHAR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// current company id
DataItem KM0RW-CURR-CO-ID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// current gpc code
DataItem KM0RW-CURR-GPC-ID char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// current store id
DataItem KM0RW-CURR-STOR-ID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// error flag
DataItem KM0RW-CURSOR-SWAP num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// error flag
DataItem KM0RW-DEL-MODE-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem KM0RW-DEPT-ID char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


//   dept number
DataItem KM0RW-DEPT-NO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


//   dept number
DataItem KM0RW-DEPT-NO-CHAR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// second scrn done flag
DataItem KM0RW-DONE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// screen updated flag
DataItem KM0RW-EDIT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// end second screen display
DataItem KM0RW-END char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// error flag
DataItem KM0RW-ERR-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// error flag
DataItem KM0RW-FIRST-TIME-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


//   gpc code
DataItem KM0RW-GPC-NO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// hndlg code table key
DataItem KM0RW-HDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// vhndlx01 modified flag
DataItem KM0RW-HNDL-MOD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// work key
DataItem KM0RW-KEY char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// label found flag
DataItem KM0RW-LBL-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// error flag
DataItem KM0RW-RESEND-MAP-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// save area for sqlca/reset
DataItem KM0RW-SAVE-SQLCD char(136)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


//   store number
DataItem KM0RW-STOR-NO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


//   store number
DataItem KM0RW-STOR-NO-CHAR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem KM0RW-STORE-ID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem KM0RW-STRID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// update/inquiry flag
DataItem KM0RW-UPDT-INQ-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// reformat area for causera
DataItem KM0RW-USER-AREA char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// XGP_GPC_CD
DataItem KM0RW-XGP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// hndlg code table key
DataItem KM0RW-XHDTBL-KEY char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem KM0RW-XNXCD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


