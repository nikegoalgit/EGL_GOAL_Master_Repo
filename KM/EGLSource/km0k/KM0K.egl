package km0k;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import kl.common.*;
import ku.common.*;
import ta.common.*;
import xa.common.*;
//*** PROGRAM=KM0K ****
// ----------------  km0k - chg/inq terms information ---------
// 
// overview:  this application performs add, change, delete and
//            inquiry on the customer terms data
// 
// date written: 05/92
// author:       Dianne Salzwedel
// 
// ************************************************************
// *              maintenance history log                     *
// ************************************************************
// * 05/13/92  DSALZW  created
// * 04/10/95  CHELLM  Added User Security for Nike Canada.
// * 12/12/95  kclar1  corrected display of NO department when
// *                   there is a department.  Changed default
// *                   to spaces instead of zeros for
// *                   departent and store
// * 06/05/96  kclar1  SET TERM FLAGS TO YES FOR ALL CANADIAN
// *                   ADDS
// * 06/09/97  kclar1  Fix bug in km0k-685 where searching xgp
// *                   and verifying xot table
// *Y2KFIX   12/04/97  DKENNY  Y2K MODIFICATIONS MADE TO:
// *                   KM0KM200, KM0K-605, KM0K-610, KM0K-615,
// *                   KM0K-620, KM0K-630, KM0K-640, KM0K-650,
// *                   KM0K-670, KM0K-670X, KM0K-675, KM0K-675X
// *********************
Program KM0K type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KM0KW01 KM0KW01; // record
  KM0KW02 KM0KW02; // record
  KM0KW04 KM0KW04; // record
  KUCREC KUCREC; // record
  KUJREC KUJREC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  KUTREC KUTREC; // record
  KUZREC KUZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  XA0AW02 XA0AW02; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KIZTBL {deleteAfterUse = yes}; // table
  use XATTBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XNXTBL {deleteAfterUse = yes}; // table
  use XPTTBL {deleteAfterUse = yes}; // table
  use XCPTBL {deleteAfterUse = yes}; // table
  use XAATBL {deleteAfterUse = yes}; // table
  use XTDTBL {deleteAfterUse = yes}; // table
  use XDATBL {deleteAfterUse = yes}; // table
  use KM0KM.KM0KM100,  // forms
      KM0KM.KM0KM200, 
      KM0KM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KM0K-000: KM0K-000();
    goto KM0K-100; /* converse terms select screen*/

    KM0K-100: KM0K-100();

    goto KM0K-100; /* terms selection screen*/

  end // end main
end // end KM0K


// init terms screen
Function KM0K-000()
   /* *********************************************/
   /* * km0k000 - init customer terms screen*/
   /* *********************************************/

  XSENTRY();

  XSSEGTR(); /* set segmented transaction id*/

  set KM0KM100 initial; /* terms select screen*/
  set KM0KM200 initial; /* terms detail screen*/
  set KM0KW01 empty; /* working storage 1*/
  KM0KW01.KM0KW-KUMSTRID = 0;
  KM0KW01.KM0KW-XNXCD = 0;
  KM0KW01.KM0KW-CAUSERA-COMP = 0;
  KM0KW01.KM0KW-CAUSERA-STORE = 0;
  KM0KW01.KM0KW-CAUSERA-DEPT = 0;
  set KM0KW02 empty; /* working storage 2*/
  set KM0KW04 empty; /* temporary storage definition*/
  KM0KW04.KM0KW-04-LENGTH = 0;
  KM0KW04.KUMSTRID = 0;
  KM0KW04.XNXCD = 0;
  KM0KW04.KUTENDT = 0;
  KM0KW04.KUTXNDT = 0;
  set SQLCA empty;
  set TA1REC empty;
  set TA2REC empty;
  set KUCREC empty; /* company record*/
  set KUMREC empty; /* store record*/
  set KUJREC empty; /* dept record*/
  set KUTREC empty; /* terms record*/
  set KUZREC empty; /* audit record*/
  set XX0XW01 empty;
  set XX0XW02 empty;
  set XA0AW02 empty;

  KM0KW01.KM0KW-ERROR-FLAG = "N"; /* error flag*/
  KM0KW01.KM0KW-TS-SIZE = 274; /* size of temp storage*/
  KM0KW01.KM0KW-MAX-NBR-OCCURS = 10; /* nbr of occurs*/


   /* ****************************/
   /* check fast path entry*/
   /* ****************************/

  KM0KW01.KM0KW-CAUSERA = COMMAREA.CAUSERA; /* key from add menu*/
  if (COMMAREA.CAITEM != " ")
   /* * key from fastpath*/
    KM0KW01.KM0KW-CAUSERA = COMMAREA.CAITEM;
    if (KM0KW01.KM0KW-CA-COMP-CHAR is numeric)
      KM0KM100.KUCCOID = KM0KW01.KM0KW-CAUSERA-COMP;
    else
      KM0KM100.KUCCOID = 0;
    end
    if (KM0KW01.KM0KW-CA-STORE-CHAR is numeric)
      if (KM0KW01.KM0KW-CAUSERA-STORE == -1)
        KM0KM100.KM0KM-STORE-SELECT = "  -1";
      else
        KM0KM100.KM0KM-STORE-SELECT = KM0KW01.KM0KW-CAUSERA-STORE;
        KM0KW01.KM0KW-KUMSTRID = KM0KW01.KM0KW-CAUSERA-STORE;
      end
      if (KM0KW01.KM0KW-CAUSERA-STORE == 0) /* added 12/15/95 kclark*/
        KM0KM100.KM0KM-STORE-SELECT = "    ";
      end /* 12/15/95 to default to spaces and all*/
                                   /* terms displayed*/
    else
      KM0KM100.KM0KM-STORE-SELECT = "    "; /* chg to default to sp*/
      KM0KW01.KM0KW-KUMSTRID = 0;
    end
    if (KM0KW01.KM0KW-CA-DEPT-CHAR is numeric)
      if (KM0KW01.KM0KW-CAUSERA-DEPT == -1)
        KM0KM100.KM0KM-DEPT-SELECT = "  -1";
      else
        KM0KW01.KM0KW-XNXCD = KM0KW01.KM0KW-CAUSERA-DEPT;
        KM0KM100.KM0KM-DEPT-SELECT = KM0KW01.KM0KW-XNXCD;
      end
      if (KM0KW01.KM0KW-CAUSERA-DEPT == 0) /* 12/15/95 - to default to sp*/
        KM0KM100.KM0KM-DEPT-SELECT = "    ";
      end /* 12/15/95 added to default to spaces*/
    else
      KM0KM100.KM0KM-DEPT-SELECT = "    "; /* chg to default to sps*/
      KM0KW01.KM0KW-XNXCD = 0;
    end
    KM0KM100.XGPCD = KM0KW01.KM0KW-CAUSERA-GPC;
  else
   /* * key from chg menu*/
    if (KM0KW01.KM0KW-CA-COMP-CHAR is numeric)
      KM0KM100.KUCCOID = KM0KW01.KM0KW-CAUSERA-COMP;
    else
      KM0KM100.KUCCOID = 0;
    end
    if (KM0KW01.KM0KW-CA-STORE-CHAR is numeric)
      if (KM0KW01.KM0KW-CAUSERA-STORE == -1)
        KM0KM100.KM0KM-STORE-SELECT = "  -1";
      else
        KM0KM100.KM0KM-STORE-SELECT = KM0KW01.KM0KW-CAUSERA-STORE;
        KM0KW01.KM0KW-KUMSTRID = KM0KW01.KM0KW-CAUSERA-STORE;
      end
      if (KM0KW01.KM0KW-CAUSERA-STORE == 0) /* *//*added to default to spaces*/
        KM0KM100.KM0KM-STORE-SELECT = "    ";
      end /* *//*added to default to spaces 12/15/95*/
    else
      KM0KM100.KM0KM-STORE-SELECT = "    "; /* /*/
      KM0KW01.KM0KW-KUMSTRID = 0;
    end
    if (KM0KW01.KM0KW-CA-DEPT-CHAR is numeric)
      if (KM0KW01.KM0KW-CAUSERA-DEPT == -1)
        KM0KM100.KM0KM-DEPT-SELECT = "  -1";
      else
        KM0KW01.KM0KW-XNXCD = KM0KW01.KM0KW-CAUSERA-DEPT;
        KM0KM100.KM0KM-DEPT-SELECT = KM0KW01.KM0KW-XNXCD;
      end
      if (KM0KW01.KM0KW-CAUSERA-DEPT == 0) /* added to default to spaces*/
        KM0KM100.KM0KM-DEPT-SELECT = "    ";
      end /* added 12/15/95 to default to spaces*/
    else
      KM0KM100.KM0KM-DEPT-SELECT = "    "; /* chg to default to sps*/
      KM0KW01.KM0KW-XNXCD = 0;
    end
    KM0KM100.XGPCD = KM0KW01.KM0KW-CAUSERA-GPC;
  end

  XX0XS01(); /* get todays date*/


  if (KM0KM100.KUCCOID > 0) /* if a company is available*/
    KM0K-110(); /* build temp storage*/
  end

end // end KM0K-000


// converse selection screen
Function KM0K-100()
   /* *******************************************/
   /* * km0k100 - converse selection screen*/
   /* *******************************************/


  KM0KM100.KM0KM-MAP-DATE = VGVar.currentShortGregorianDate; /* set screen date*/


  converse KM0KM100 ;

  KM0KW01.KM0KW-ERROR-FLAG = "N";
  KM0KM100.VAGen_EZEMSG = " ";

  set KM0KM100.KUCCOID cursor, initialAttributes;
  set KM0KM100.KM0KM-CURRENT-PAGE initialAttributes;


  KM0K-300(); /* edit pfkeys*/


   /* test and edit for change in page number*/
  if (KM0KW01.KM0KW-ERROR-FLAG == "N") /* no errors*/
    if (KM0KM100.KM0KM-CURRENT-PAGE != KM0KW01.KM0KW-CURRENT-PAGE)
      if (KM0KM100.KM0KM-CURRENT-PAGE > KM0KW01.KM0KW-MAX-PAGE
       || KM0KM100.KM0KM-CURRENT-PAGE < 1)
        converseLib.validationFailed(379); /* "invalid page" msg*/
        set KM0KM100.KM0KM-CURRENT-PAGE cursor, bold;
        KM0KW01.KM0KW-ERROR-FLAG = "Y";
      else /* load requested page*/
        KM0KW01.KM0KW-PAGE-IDX = KM0KM100.KM0KM-CURRENT-PAGE;
        KM0KW01.KM0KW-CURRENT-PAGE = KM0KM100.KM0KM-CURRENT-PAGE;
        KM0K-200();
      end
    else
      if (converseVar.eventKey is enter)
        KM0K-400(); /* check for second screen*/
      end
    end
  end


end // end KM0K-100


// build screen & temp storage
Function KM0K-110()
   /* *********************************************************/
   /* *  km0k110 - build screen & temp storage*/
   /* *********************************************************/

   /* *****  format company data*/
  set KUCREC empty; /* clear out company record*/
  set KUMREC empty; /* clear out store record*/
  set KUJREC empty; /* clear out dept record*/

  KUCREC.KUCCOID = KM0KM100.KUCCOID; /* set company key*/
  KM0K-120(); /* read vcmpny01*/

  if (KM0KW01.KM0KW-ERROR-FLAG == "Y") /* not found?*/
    set KM0KM100 initial;
    KM0KM100.KUCCOID = KUCREC.KUCCOID; /* set company key*/
    set KM0KM100.KUCCOID cursor, bold;
    return;
  end

   /* *****  edit all or active indicator*/
  if (KM0KM100.KM0KM-ACTIVE-IND == "ALL"
   || KM0KM100.KM0KM-ACTIVE-IND == "ACT"
   || KM0KM100.KM0KM-ACTIVE-IND == "   ")
    set KM0KM100.KM0KM-ACTIVE-IND initialAttributes;
    if (KM0KM100.KM0KM-ACTIVE-IND == "   ")
      KM0KM100.KM0KM-ACTIVE-IND = "ACT";
    end
  else
    set KM0KM100.KM0KM-ACTIVE-IND cursor, bold;
    converseLib.validationFailed(452);
    KM0KW01.KM0KW-ERROR-FLAG = "Y";
    return;
  end


   /* ***** edit store selection*/
  if (KM0KM100.KM0KM-STORE-SELECT == " ")
    KM0KM100.KUMSTRNM = "ALL         ";
    set KM0KM100.KM0KM-STORE-SELECT initialAttributes;
  else
    if (KM0KM100.KM0KM-STORE-SELECT == "  -1")
      KM0KM100.KUMSTRNM = "GLOBAL STORE";
      set KM0KM100.KM0KM-STORE-SELECT initialAttributes;
    else
      KUMREC.KUCCOID = KM0KM100.KUCCOID; /* set store key*/
      KM0KW01.KM0KW-STORE-SELECT = KM0KM100.KM0KM-STORE-SELECT;
      KUMREC.KUMSTRID = KM0KW01.KM0KW-KUMSTRID;
      KM0K-130(); /* read vstore01*/
      if (SQLCA.VAGen_SQLCODE == 0)
        if (KUMREC.XXXSTAT == "A")
          set KM0KM100.KM0KM-STORE-SELECT initialAttributes;
          KM0KM100.KUMSTRNM = KUMREC.KUMSTRNM;
        else
          set KM0KM100.KM0KM-STORE-SELECT bold;
          converseLib.validationFailed(453);
        end
      else
        KM0KW01.KM0KW-ERROR-FLAG = "Y";
        set KM0KM100.KM0KM-STORE-SELECT cursor, bold;
        converseLib.validationFailed(137);
      end

    end
  end


   /* ***** edit dept selection*/
  if (KM0KM100.KM0KM-DEPT-SELECT == " ")
    KM0KM100.KUJSLFNM = "ALL";
  else
    if (KM0KM100.KM0KM-DEPT-SELECT == "  -1")
      KM0KM100.KUJSLFNM = "GLOBAL DEPARTMENT ";
    else
      KUJREC.KUCCOID = KM0KM100.KUCCOID; /* set dept key*/
      KM0KW01.KM0KW-DEPT-SELECT = KM0KM100.KM0KM-DEPT-SELECT;
      KUJREC.XNXCD = KM0KW01.KM0KW-XNXCD;
      KM0K-140(); /* read vdept001*/
      if (SQLCA.VAGen_SQLCODE == 0)
        if (KUJREC.XXXSTAT == "A")
          if (KM0KM100.KM0KM-DEPT-SELECT != "  00") /* chg 12/15/95 to*/
            KM0KM100.KUJSLFNM = KUJREC.KUJSLFNM; /* display dept*/
          else /* correctly*/
            KM0KM100.KUJSLFNM = "NO DEPARTMENT";
          end
        else
          KM0KM100.KUJSLFNM = "NO DEPARTMENT";
          set KM0KM100.KM0KM-DEPT-SELECT bold;
          converseLib.validationFailed(454);
        end
      else
        KM0KW01.KM0KW-ERROR-FLAG = "Y";
        set KM0KM100.KM0KM-DEPT-SELECT cursor, bold;
        converseLib.validationFailed(137);
      end

    end
  end


   /* ***** edit gpc code*/
  set KM0KM100.XGPCD initialAttributes;
  if (KM0KM100.XGPCD == " "
   || KM0KM100.XGPCD == "**")
    /* next sentence*/
  else
    if (KM0KM100.XGPCD in XGPTBL.XGPCD)
      if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        set KM0KM100.XGPCD initialAttributes;
      else
        set KM0KM100.XGPCD bold;
        converseLib.validationFailed(455);
      end
    else
      converseLib.validationFailed(17);
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      set KM0KM100.XGPCD cursor, bold;
    end
  end


   /* ***** edit xot code*/
  set KM0KM100.KM0KM-XOT-SELECT initialAttributes;
  if (KM0KM100.KM0KM-XOT-SELECT == " ")
    KM0KM100.XOTDESC = "ALL";
  else
    if (KM0KM100.KM0KM-XOT-SELECT == "**")
      KM0KM100.XOTDESC = "GLOBAL";
    else
      if (KM0KM100.KM0KM-XOT-SELECT in XOTTBL.XOTCD)
        if (XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          set KM0KM100.KM0KM-XOT-SELECT initialAttributes;
          KM0KM100.XOTDESC = XOTTBL.XOTDESC[sysVar.arrayIndex];
        else
          KM0KM100.XOTDESC = XOTTBL.XOTDESC[sysVar.arrayIndex];
          set KM0KM100.KM0KM-XOT-SELECT bold;
          converseLib.validationFailed(255);
        end
      else
        converseLib.validationFailed(17);
        KM0KW01.KM0KW-ERROR-FLAG = "Y";
        set KM0KM100.KM0KM-XOT-SELECT cursor, bold;
      end
    end
  end


  if (KM0KW01.KM0KW-ERROR-FLAG == "Y") /* error in select data*/
    return;
  end

   /* save select options to compare for changes later*/
  KM0KW01.KM0KW-COMPANY = KM0KM100.KUCCOID;
  KM0KW01.KM0KW-ACTIVE-IND = KM0KM100.KM0KM-ACTIVE-IND;
  KM0KW01.KM0KW-STORE = KM0KM100.KM0KM-STORE-SELECT;
  KM0KW01.KM0KW-DEPT-ID = KM0KM100.KM0KM-DEPT-SELECT;
  KM0KW01.KM0KW-GPC-CD = KM0KM100.XGPCD;
  KM0KW01.KM0KW-XOT-CD = KM0KM100.KM0KM-XOT-SELECT;


   /* *****  load terms data*/
  KM0K-150(); /* load all terms*/

  if (KM0KW01.KM0KW-ERROR-FLAG == "Y") /* error in terms data*/
    return;
  end


  KM0KW01.KM0KW-PAGE-IDX = 1; /* start at the top*/
  KM0K-200(); /* move terms to the screen*/

end // end KM0K-110


// read company information
Function KM0K-120()
   /* *************************************************/
   /* * km0k120 - get company record*/
   /* *************************************************/

  set SQLCA empty;

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* read cmpny01*/


  if (SQLCA.VAGen_SQLCODE == 0)
    set KM0KM100.KUCCOID initialAttributes;
    KM0KM100.KUCCONM = KUCREC.KUCCONM;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      converseLib.validationFailed(25);
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      TA1REC.TA1MAP = " ";
      KM0KW01.KM0KW-COMPANY = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KM0KW01.KM0KW-WORK-KEY;
      TA1REC.TA1PGMNM = "KM0K120";
      TA1REC.TA1LOC = "READING DB2 CMPNY01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end



   /* ***********************************/
   /* edit for account class code*/
   /* ***********************************/

  if (KUCREC.XAUCD in XAUTBL.XAUCD)
    if (XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KM0KW01.XATCD = XAUTBL.XATCD[sysVar.arrayIndex];
    else
      KM0KW01.XATCD = " ";
    end
  else
    KM0KW01.XATCD = " ";
  end

end // end KM0K-120


// read store information
Function KM0K-130()
   /* *************************************************/
   /* * km0k130 - get store record*/
   /* *************************************************/

  set SQLCA empty;

  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* read cmpny01*/


  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VSTORE01";
    TA1REC.TA1MAP = " ";
    KM0KW01.KM0KW-WORK-KEY = " ";
    KM0KW01.KM0KW-COMPANY-WK = KUMREC.KUCCOID;
    KM0KW01.KM0KW-STORE-WK = KUMREC.KUMSTRID;
    KM0KW01.KM0KW-DASH1-WK = "-";
    TA1REC.TA1TBLKE = KM0KW01.KM0KW-WORK-KEY;
    TA1REC.TA1PGMNM = "KM0K130";
    TA1REC.TA1LOC = "READING DB2 STORE01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end KM0K-130


// read dept information
Function KM0K-140()
   /* ******************************/
   /* * km0k140 - get dept record*/
   /* ******************************/

  set SQLCA empty;

  call "IO0290" ("S ", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes}; /* read cmpny01*/


  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
   /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VDEPT001";
    TA1REC.TA1MAP = " ";
    KM0KW01.KM0KW-WORK-KEY = " ";
    KM0KW01.KM0KW-COMPANY-WK = KUJREC.KUCCOID;
    KM0KW01.KM0KW-DEPT-ID-WK = KUJREC.XNXCD;
    KM0KW01.KM0KW-DASH1-WK = "-";
    KM0KW01.KM0KW-DASH2-WK = "-";
    TA1REC.TA1TBLKE = KM0KW01.KM0KW-WORK-KEY;
    TA1REC.TA1PGMNM = "KM0K140";
    TA1REC.TA1LOC = "READING DB2 DEPT001";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end KM0K-140


// build terms temp storage
Function KM0K-150()
   /* **************************************************/
   /* * km0k150 - load all terms for a company*/
   /* **************************************************/

  KM0K-155(); /* purge temp work file*/
  if (KM0KW01.KM0KW-ERROR-FLAG == "Y")
    return;
  end

  set KUTREC empty;

  KUTREC.KUCCOID = KM0KM100.KUCCOID;

  if (KM0KM100.KM0KM-STORE-SELECT == " ") /* set up store id*/
    KUTREC.KUMSTRID = -2;
  else
    if (KM0KM100.KM0KM-STORE-SELECT == "  -1")
      KUTREC.KUMSTRID = -1;
    else
      KM0KW01.KM0KW-STORE-SELECT = KM0KM100.KM0KM-STORE-SELECT;
      KUTREC.KUMSTRID = KM0KW01.KM0KW-KUMSTRID;
    end
  end

  if (KM0KM100.KM0KM-DEPT-SELECT == " ") /* set up dept id*/
    KUTREC.XNXCD = -2;
  else
    if (KM0KM100.KM0KM-DEPT-SELECT == "  -1")
      KUTREC.XNXCD = -1;
    else
      KM0KW01.KM0KW-DEPT-SELECT = KM0KM100.KM0KM-DEPT-SELECT;
      KUTREC.XNXCD = KM0KW01.KM0KW-XNXCD;
    end
  end

  if (KM0KM100.XGPCD == " ") /* set up gpc code*/
    KUTREC.XGPCD = "**";
  else
    KUTREC.XGPCD = KM0KM100.XGPCD;
  end

  if (KM0KM100.KM0KM-XOT-SELECT == " ") /* set up order type cd*/
    KUTREC.XOTCD = "**";
  else
    KUTREC.XOTCD = KM0KM100.KM0KM-XOT-SELECT;
  end


  KM0KW01.KM0KW-END-FLAG = "N"; /* set end-terms flag to 'n'*/

  KM0K-160(); /* select terms*/
  KM0K-165(); /* select next term*/

   /* loop/save terms by the screenfull*/
  KM0KW01.KM0KW-PAGE-IDX = 0;
  KM0KW01.KM0KW-COUNT = 0;

  while (KM0KW01.KM0KW-END-FLAG == "N") /* not end of terms*/

   /* Note: when table is normalized - you will only need*/
           /* to test once not three times*/

    if (KM0KW01.KM0KW-COUNT == KM0KW01.KM0KW-MAX-NBR-OCCURS) /* nbr of occurs*/
      KM0K-170(); /* write terms to temp storage*/
      set KM0KW04 empty;
      KM0KW01.KM0KW-COUNT = 0;
    end
    KM0KW01.KM0KW-OCCURS-IND = 3; /* set to first term*/
    if (KM0KM100.KM0KM-ACTIVE-IND == "ACT")
      if (KUTREC.KUTXNDT[KM0KW-OCCURS-IND] == 99999999
       || KUTREC.KUTXNDT[KM0KW-OCCURS-IND] >= XX0XW01.XX0XWDAT)
        KM0KW01.KM0KW-COUNT = KM0KW01.KM0KW-COUNT + 1;
        KM0K-180(); /* move to ws*/
      end
    else
      if (KUTREC.KUTENDT[KM0KW-OCCURS-IND] == 0) /* if terms are set up*/
        /* next sentence*/
      else
        KM0KW01.KM0KW-COUNT = KM0KW01.KM0KW-COUNT + 1;
        KM0K-180(); /* move to ws*/
      end
    end

    if (KM0KW01.KM0KW-COUNT == KM0KW01.KM0KW-MAX-NBR-OCCURS) /* nbr of occurs*/
      KM0K-170(); /* write terms to temp storage*/
      set KM0KW04 empty;
      KM0KW01.KM0KW-COUNT = 0;
    end
    KM0KW01.KM0KW-OCCURS-IND = 2; /* set to first term*/
    if (KM0KM100.KM0KM-ACTIVE-IND == "ACT")
      if (KUTREC.KUTXNDT[KM0KW-OCCURS-IND] == 99999999
       || KUTREC.KUTXNDT[KM0KW-OCCURS-IND] >= XX0XW01.XX0XWDAT)
        KM0KW01.KM0KW-COUNT = KM0KW01.KM0KW-COUNT + 1;
        KM0K-180(); /* move to ws*/
      end
    else
      if (KUTREC.KUTENDT[KM0KW-OCCURS-IND] == 0) /* if terms are set up*/
        /* next sentence*/
      else
        KM0KW01.KM0KW-COUNT = KM0KW01.KM0KW-COUNT + 1;
        KM0K-180(); /* move to ws*/
      end
    end

    if (KM0KW01.KM0KW-COUNT == KM0KW01.KM0KW-MAX-NBR-OCCURS) /* nbr of occurs*/
      KM0K-170(); /* write terms to temp storage*/
      set KM0KW04 empty;
      KM0KW01.KM0KW-COUNT = 0;
    end
    KM0KW01.KM0KW-OCCURS-IND = 1; /* set to first term*/
    if (KM0KM100.KM0KM-ACTIVE-IND == "ACT")
      if (KUTREC.KUTXNDT[KM0KW-OCCURS-IND] == 99999999
       || KUTREC.KUTXNDT[KM0KW-OCCURS-IND] >= XX0XW01.XX0XWDAT)
        KM0KW01.KM0KW-COUNT = KM0KW01.KM0KW-COUNT + 1;
        KM0K-180(); /* move to ws*/
      end
    else
      if (KUTREC.KUTENDT[KM0KW-OCCURS-IND] == 0) /* if terms are set up*/
        /* next sentence*/
      else
        KM0KW01.KM0KW-COUNT = KM0KW01.KM0KW-COUNT + 1;
        KM0K-180(); /* move to ws*/
      end
    end

    KM0K-165(); /* select next term*/

  end /* of  while loop*/

  KM0KW01.KM0KW-OCCURS-IND = KM0KW01.KM0KW-COUNT; /**/

  if (KM0KW01.KM0KW-COUNT > 0) /* you have records*/
    KM0K-170(); /* write terms to temp storage*/
  end


  if (KM0KW01.KM0KW-PAGE-IDX == 0 /* no record written*/
   && COMMAREA.CACHGFL == "Y")    /* and 'add' security*/
    KM0K-170(); /* write blank terms to temp storage*/
  end

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value


   /* set max page numbers*/
  KM0KW01.KM0KW-MAX-PAGE = KM0KW01.KM0KW-PAGE-IDX;
  KM0KM100.KM0KM-MAX-PAGE = KM0KW01.KM0KW-PAGE-IDX;


end // end KM0K-150


// purge temp storage
Function KM0K-155()
   /* ***************************************/
   /* * km0k155 - purge temp storage*/
   /* ***************************************/

  KM0KW02.KM0KW-TS-COUNT = 0;
  KM0KW02.KM0KW-TS-APPL-NAME = "KW04";
  KM0KW02.KM0KW-TS-RTN-CD = 0;
  KM0KW02.KM0KW-TS-FUNCTN-CD = "P"; /* purge temp work file*/

  set KM0KW04 empty;
  KM0KW04.KM0KW-04-LENGTH = KM0KW01.KM0KW-TS-SIZE;

  call "TA0050" (KM0KW04, KM0KW02) {isNoRefresh = yes, isExternal = yes};

  if (KM0KW02.KM0KW-TS-RTN-CD != 0) /* error encountered*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    KM0KW01.KM0KW-ERROR-FLAG = "Y";
    converseLib.validationFailed(228);
  end


end // end KM0K-155


// select terms
Function KM0K-160()
   /* **************************************************/
   /* * km0k160 - select customer terms*/
   /* **************************************************/

  call "IO0350" ("S3", SQLCA, KUTREC) {isNoRefresh = yes, isExternal = yes}; /* read cusku01*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VTERMS01";
    TA1REC.TA1MAP = " ";
    KM0KW01.KM0KW-WORK-KEY = " ";
    KM0KW01.KM0KW-COMPANY-WK = KUTREC.KUCCOID;
    KM0KW01.KM0KW-STORE-WK = KUTREC.KUMSTRID;
    KM0KW01.KM0KW-DEPT-ID-WK = KUTREC.XNXCD;
    KM0KW01.KM0KW-GPC-CD-WK = KUTREC.XGPCD;
    TA1REC.TA1TBLKE = KM0KW01.KM0KW-WORK-KEY;
    TA1REC.TA1PGMNM = "KM0K160";
    TA1REC.TA1LOC = "SCAN    DB2 TERMS01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end


end // end KM0K-160


// select next term
Function KM0K-165()
   /* *******************************************/
   /* * km0k165 - select next customer terms*/
   /* *******************************************/

  call "IO0350" ("N3", SQLCA, KUTREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KM0KW01.KM0KW-END-FLAG = "Y";
      KM0K-168(); /* close cursor*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "KM0K165";
      TA1REC.TA1LOC = "FETCH NEXT VTERMS01";
      TA1REC.TA1MAP = " ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VTERMS01";
      KM0KW01.KM0KW-WORK-KEY = " ";
      KM0KW01.KM0KW-COMPANY-WK = KUTREC.KUCCOID;
      KM0KW01.KM0KW-DASH1-WK = "-";
      KM0KW01.KM0KW-STORE-WK = KUTREC.KUMSTRID;
      KM0KW01.KM0KW-DASH2-WK = "-";
      KM0KW01.KM0KW-DEPT-ID-WK = KUTREC.XNXCD;
      KM0KW01.KM0KW-DASH3-WK = "-";
      KM0KW01.KM0KW-GPC-CD-WK = KUTREC.XGPCD;
      TA1REC.TA1TBLKE = KM0KW01.KM0KW-WORK-KEY;
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end


end // end KM0K-165


// close terms
Function KM0K-168()
   /* *********************************************/
   /* * km0k168 - close customer terms*/
   /* *********************************************/

  call "IO0350" ("C3", SQLCA, KUTREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "KM0K168";
    TA1REC.TA1LOC = "CLOSE CURSOR VTERMS01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VTERMS01";
    KM0KW01.KM0KW-WORK-KEY = " ";
    KM0KW01.KM0KW-COMPANY-WK = KUTREC.KUCCOID;
    KM0KW01.KM0KW-DASH1-WK = "-";
    KM0KW01.KM0KW-STORE-WK = KUTREC.KUMSTRID;
    KM0KW01.KM0KW-DASH2-WK = "-";
    KM0KW01.KM0KW-DEPT-ID-WK = KUTREC.XNXCD;
    KM0KW01.KM0KW-DASH3-WK = "-";
    KM0KW01.KM0KW-GPC-CD-WK = KUTREC.XGPCD;
    TA1REC.TA1TBLKE = KM0KW01.KM0KW-WORK-KEY;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end


end // end KM0K-168


// write info to temp storage
Function KM0K-170()
   /* ************************************************/
   /* * km0k170 - write info to temporary storage*/
   /* ************************************************/

  set KM0KW02 empty;
  KM0KW02.KM0KW-TS-RTN-CD = 0;
  KM0KW02.KM0KW-TS-FUNCTN-CD = "A";
  KM0KW02.KM0KW-TS-APPL-NAME = "KW04";
  KM0KW04.KM0KW-04-LENGTH = KM0KW01.KM0KW-TS-SIZE;

  KM0KW01.KM0KW-PAGE-IDX = KM0KW01.KM0KW-PAGE-IDX + 1;
  KM0KW02.KM0KW-TS-COUNT = KM0KW01.KM0KW-PAGE-IDX;

  call "TA0050" (KM0KW04, KM0KW02) {isNoRefresh = yes, isExternal = yes};

  if (KM0KW02.KM0KW-TS-RTN-CD != 0)
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    KM0KW01.KM0KW-END-FLAG = "Y";
    KM0KW01.KM0KW-ERROR-FLAG = "Y";
    converseLib.validationFailed(228);
  end


end // end KM0K-170


// move kutrec to temp storage
Function KM0K-180()
   /* **********************************************/
   /* * km0k180 - move term values to temp storage*/
   /* **********************************************/

  KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] = " ";
  KM0KW04.KUMSTRID[KM0KW-COUNT] = KUTREC.KUMSTRID;
  KM0KW04.XNXCD[KM0KW-COUNT] = KUTREC.XNXCD;
  KM0KW04.XGPCD[KM0KW-COUNT] = KUTREC.XGPCD;
  KM0KW04.XOTCD[KM0KW-COUNT] = KUTREC.XOTCD;
  KM0KW04.XPTCD[KM0KW-COUNT] = KUTREC.XPTCD[KM0KW-OCCURS-IND];
  KM0KW04.XCPCD[KM0KW-COUNT] = KUTREC.XCPCD[KM0KW-OCCURS-IND];
  KM0KW04.XAACD[KM0KW-COUNT] = KUTREC.XAACD[KM0KW-OCCURS-IND];
  KM0KW04.XTDCD[KM0KW-COUNT] = KUTREC.XTDCD[KM0KW-OCCURS-IND];
  KM0KW04.XDACD[KM0KW-COUNT] = KUTREC.XDACD[KM0KW-OCCURS-IND];
  KM0KW04.KUTENDT[KM0KW-COUNT] = KUTREC.KUTENDT[KM0KW-OCCURS-IND];
  KM0KW04.KUTXNDT[KM0KW-COUNT] = KUTREC.KUTXNDT[KM0KW-OCCURS-IND];


end // end KM0K-180


// move temp storage to screen
Function KM0K-200()
   /* ******************************************/
   /* * km0k200 - move temp storage to screen*/
   /* ******************************************/

  KM0KW01.KM0KW-COUNT = 1;

  KM0KW01.KM0KW-CURRENT-PAGE = KM0KW01.KM0KW-PAGE-IDX;
  KM0KM100.KM0KM-CURRENT-PAGE = KM0KW01.KM0KW-PAGE-IDX;

  KM0K-210(); /* read store temp storage*/

  while (KM0KW01.KM0KW-COUNT <= KM0KW01.KM0KW-MAX-NBR-OCCURS)

    set KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] initialAttributes;

    if (KM0KW04.XOTCD[KM0KW-COUNT] == " ") /* no row, make blank*/
      KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] = " ";
      KM0KM100.KUMSTRID[KM0KW-COUNT] = 0;
      set KM0KM100.KUMSTRID[KM0KW-COUNT] invisible, protect;
      KM0KM100.XNXCD[KM0KW-COUNT] = 0;
      set KM0KM100.XNXCD[KM0KW-COUNT] invisible, protect;
      KM0KM100.XOTCD[KM0KW-COUNT] = " ";
      KM0KM100.XOTSABRV[KM0KW-COUNT] = " ";
      KM0KM100.KM0KM-EFFECT-DATE[KM0KW-COUNT] = " ";
      KM0KM100.KM0KM-TERM-DATE[KM0KW-COUNT] = " ";
      KM0KM100.XPTABRV[KM0KW-COUNT] = " ";
      KM0KM100.XCPABRV[KM0KW-COUNT] = " ";
      KM0KM100.XAAABRV[KM0KW-COUNT] = " ";
      KM0KM100.XTDABRV[KM0KW-COUNT] = " ";
      KM0KM100.XDAABRV[KM0KW-COUNT] = " ";

      if (converseVar.validationMsgNum == 0) /* no previous message*/
        converseLib.validationFailed(206); /* "end of data" msg*/
      end
    else
   /* ******** move detail to screen *******************/

      KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] = KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT];
      if (KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "X")
        set KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] skip;
      else
        set KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] initialAttributes;
      end

      KM0KM100.KUMSTRID[KM0KW-COUNT] = KM0KW04.KUMSTRID[KM0KW-COUNT];
      set KM0KM100.KUMSTRID[KM0KW-COUNT] initialAttributes;
      KM0KM100.XNXCD[KM0KW-COUNT] = KM0KW04.XNXCD[KM0KW-COUNT];
      set KM0KM100.XNXCD[KM0KW-COUNT] initialAttributes;
      KM0KM100.XOTCD[KM0KW-COUNT] = KM0KW04.XOTCD[KM0KW-COUNT];

       /* retrieve order type abrv*/
      if (KM0KW04.XOTCD[KM0KW-COUNT] == "  ")
        KM0KM100.XOTSABRV[KM0KW-COUNT] = " ";
      else
        if (KM0KW04.XOTCD[KM0KW-COUNT] in XOTTBL.XOTCD)
          KM0KM100.XOTSABRV[KM0KW-COUNT] = XOTTBL.XOTSABRV[sysVar.arrayIndex];
        end
      end


      KM0KW01.KM0KW-DATE-BREAKDOWN = KM0KW04.KUTENDT[KM0KW-COUNT];
      KM0K-220(); /* format date*/
      KM0KM100.KM0KM-EFFECT-DATE[KM0KW-COUNT] = KM0KW01.KM0KW-FORMATT-DATE;

      if (KM0KW04.KUTXNDT[KM0KW-COUNT] == 99999999)
        KM0KM100.KM0KM-TERM-DATE[KM0KW-COUNT] = " ";
      else
        KM0KW01.KM0KW-DATE-BREAKDOWN = KM0KW04.KUTXNDT[KM0KW-COUNT];
        KM0K-220(); /* format date*/
        KM0KM100.KM0KM-TERM-DATE[KM0KW-COUNT] = KM0KW01.KM0KW-FORMATT-DATE;
      end

       /* retrieve payment code abrv*/
      if (KM0KW04.XPTCD[KM0KW-COUNT] == "  ")
        KM0KM100.XPTABRV[KM0KW-COUNT] = " ";
      else
        if (KM0KW04.XPTCD[KM0KW-COUNT] in XPTTBL.XPTCD)
          KM0KM100.XPTABRV[KM0KW-COUNT] = XPTTBL.XPTABRV[sysVar.arrayIndex];
        end
      end
       /* retrieve coop code abrv*/
      if (KM0KW04.XCPCD[KM0KW-COUNT] == "  ")
        KM0KM100.XCPABRV[KM0KW-COUNT] = " ";
      else
        if (KM0KW04.XCPCD[KM0KW-COUNT] in XCPTBL.XCPCD)
          KM0KM100.XCPABRV[KM0KW-COUNT] = XCPTBL.XCPABRV[sysVar.arrayIndex];
        end
      end
       /* retrieve advertise allow code abrv*/
      if (KM0KW04.XAACD[KM0KW-COUNT] == "  ")
        KM0KM100.XAAABRV[KM0KW-COUNT] = " ";
      else
        if (KM0KW04.XAACD[KM0KW-COUNT] in XAATBL.XAACD)
          KM0KM100.XAAABRV[KM0KW-COUNT] = XAATBL.XAAABRV[sysVar.arrayIndex];
        end
      end
       /* retrieve trade discount code abrv*/
      if (KM0KW04.XTDCD[KM0KW-COUNT] == "  ")
        KM0KM100.XTDABRV[KM0KW-COUNT] = " ";
      else
        if (KM0KW04.XTDCD[KM0KW-COUNT] in XTDTBL.XTDCD)
          KM0KM100.XTDABRV[KM0KW-COUNT] = XTDTBL.XTDABRV[sysVar.arrayIndex];
        end
      end
       /* retrieve defective allow code abrv*/
      if (KM0KW04.XDACD[KM0KW-COUNT] == "  ")
        KM0KM100.XDAABRV[KM0KW-COUNT] = " ";
      else
        if (KM0KW04.XDACD[KM0KW-COUNT] in XDATBL.XDACD)
          KM0KM100.XDAABRV[KM0KW-COUNT] = XDATBL.XDAABRV[sysVar.arrayIndex];
        end
      end

    end

    KM0KW01.KM0KW-COUNT = KM0KW01.KM0KW-COUNT + 1;
  end

  set KM0KM100.KUCCOID cursor;


end // end KM0K-200


// read temp storage
Function KM0K-210()
   /* ************************************/
   /* * km0k210 - read terms temp storage*/
   /* ************************************/

  KM0KW02.KM0KW-TS-RTN-CD = 0;
  KM0KW02.KM0KW-TS-FUNCTN-CD = "R";
  KM0KW02.KM0KW-TS-APPL-NAME = "KW04";
  KM0KW04.KM0KW-04-LENGTH = KM0KW01.KM0KW-TS-SIZE;
  KM0KW02.KM0KW-TS-COUNT = KM0KW01.KM0KW-PAGE-IDX;

  call "TA0050" (KM0KW04, KM0KW02) {isNoRefresh = yes, isExternal = yes};

  if (KM0KW02.KM0KW-TS-RTN-CD == 0)
    /* next sentence*/
  else
    if (KM0KW02.KM0KW-TS-RTN-CD == 7 /* end of data*/
     || KM0KW02.KM0KW-TS-RTN-CD == 4) /* no temp storage records*/
      converseLib.validationFailed(206);
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      KM0KW01.KM0KW-END-FLAG = "Y";
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      converseLib.validationFailed(228);
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      KM0KW01.KM0KW-END-FLAG = "Y";
    end
  end


end // end KM0K-210


// format dates
Function KM0K-220()
   /* **********************************************/
   /* * km0k220 - format dates*/
   /* **********************************************/

  KM0KW01.KM0KW-F-MONTH = KM0KW01.KM0KW-DT-MM;
  KM0KW01.KM0KW-F-SLASH-1 = "/";
  KM0KW01.KM0KW-F-DAY = KM0KW01.KM0KW-DT-DD;
  KM0KW01.KM0KW-F-SLASH-2 = "/";
  KM0KW01.KM0KW-F-YEAR = KM0KW01.KM0KW-DT-YY;

end // end KM0K-220


// process pfkeys - scrn 1
Function KM0K-300()
   /* ************************************************/
   /* * km0k300 - process pfkeys for scroll screen*/
   /* ************************************************/

   /* **************************************/
   /* edit pa2 key*/
   /* **************************************/

  if (converseVar.eventKey is pa2)
    KM0K-110(); /* refresh the screen*/
    KM0KW01.KM0KW-ERROR-FLAG = "Y"; /* set error flag*/
    return;
  end

   /* **************************************/
   /* edit pf3 key*/
   /* **************************************/

  if (converseVar.eventKey is pf3) /* back to from application*/
    if (KM0KW01.KM0KW-MAX-PAGE != 0) /* terms data is available*/
      KM0K-155(); /* purge terms temp storage*/
    end
    KM0KW01.KM0KW-CAUSERA-COMP = KM0KM100.KUCCOID;
    KM0KW01.KM0KW-CAUSERA-STORE = KM0KM100.KUMSTRID;
    KM0KW01.KM0KW-CAUSERA-DEPT = KM0KM100.XNXCD;
    KM0KW01.KM0KW-CAUSERA-GPC = KM0KM100.XGPCD;
    COMMAREA.CAUSERA = KM0KW01.KM0KW-CAUSERA;
    COMMAREA.CAITEM = " ";
    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    COMMAREA.CAFROMAP = "KM0K";
    XSEXIT();
    KM0KM100.VAGen_EZEMSG = COMMAREA.CAMSG;
    KM0KW01.KM0KW-ERROR-FLAG = "Y";
    return;
  end

   /* **************************************/
   /* edit pf4 key*/
   /* **************************************/

  if (converseVar.eventKey is pf4) /* back to goal menu*/
    if (KM0KW01.KM0KW-MAX-PAGE != 0) /* terms data is available*/
      KM0K-155(); /* purge terms temp storage*/
    end
    COMMAREA.CAFROMAP = "KM0K";
    XSPF4();
    KM0KM100.VAGen_EZEMSG = COMMAREA.CAMSG;
    KM0KW01.KM0KW-ERROR-FLAG = "Y";
    return;
  end


   /* **************************************/
   /* edit pf1 key*/
   /* **************************************/

  if (converseVar.eventKey is pf1) /* help system*/
    if (KM0KW01.KM0KW-MAX-PAGE != 0) /* terms data is available*/
      KM0K-155(); /* purge terms temp storage*/
    end
    XSPF1();
    KM0KM100.VAGen_EZEMSG = COMMAREA.CAMSG;
    KM0KW01.KM0KW-ERROR-FLAG = "Y";
    return;
  end


   /* **************************************/
   /* edit enter  key*/
   /* **************************************/

  if (converseVar.eventKey is enter)
    if (KM0KM100.CATOAP > " ") /* test for fast path*/
      if (KM0KW01.KM0KW-MAX-PAGE != 0) /* terms data is available*/
        KM0K-155(); /* purge terms temp storage*/
      end
      COMMAREA.CATOAP = KM0KM100.CATOAP;
      if (KM0KM100.CAITEM == " ")
        KM0KW01.KM0KW-CAUSERA-COMP = KM0KM100.KUCCOID;
        KM0KW01.KM0KW-CAUSERA-STORE = KM0KM100.KUMSTRID;
        KM0KW01.KM0KW-CAUSERA-DEPT = KM0KM100.XNXCD;
        KM0KW01.KM0KW-CAUSERA-GPC = KM0KM100.XGPCD;
        COMMAREA.CAUSERA = KM0KW01.KM0KW-CAUSERA;
      else
        COMMAREA.CAITEM = KM0KM100.CAITEM;
      end
      COMMAREA.CAFROMAP = "KM0K";
      XSEXIT();
      KM0KM100.VAGen_EZEMSG = COMMAREA.CAMSG;
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      set KM0KM100.CATOAP cursor, bold;
      return;
    end
  end

   /* **************************************/
   /* test for fastpath except on <enter>*/
   /* **************************************/

  if (KM0KM100.CATOAP > " ")
    KM0KW01.KM0KW-ERROR-FLAG = "Y";
    converseLib.validationFailed(90); /* "fast path & pf keys" msg*/
    set KM0KM100.CATOAP cursor, bold;
    return;
  else
    set KM0KM100.CATOAP modified;
  end


   /* **************************************/
   /* edit selection screen*/
   /* **************************************/

  KM0K-310(); /* edit screen*/
  if (KM0KW01.KM0KW-ERROR-FLAG == "Y")
    return;
  else
    if (converseVar.eventKey is enter) /* enter for edit*/
      return;
    end
  end


   /* **************************************/
   /* edit pf7 key    (page up for terms)*/
   /* **************************************/

  if (converseVar.eventKey is pf7) /* scroll backwards for terms*/
    KM0K-340();
    return;
  end

   /* **************************************/
   /* edit pf8 key  (page down for terms)*/
   /* **************************************/

  if (converseVar.eventKey is pf8) /* scroll forwards for terms*/
    KM0K-350();
    return;
  end


   /* **************************************/
   /* edit invalid key*/
   /* **************************************/

  if (KM0KW01.KM0KW-ERROR-FLAG == "N")
    converseLib.validationFailed(003); /* invalid pf key message*/
    KM0KW01.KM0KW-ERROR-FLAG = "Y";
  end


end // end KM0K-300


// edit selection screen
Function KM0K-310()
  set KM0KM100.KUCCOID initialAttributes;
  set KM0KM100.KM0KM-ACTIVE-IND initialAttributes;
  set KM0KM100.KM0KM-STORE-SELECT initialAttributes;
  set KM0KM100.KM0KM-DEPT-SELECT initialAttributes;
  set KM0KM100.XGPCD initialAttributes;
  set KM0KM100.KM0KM-XOT-SELECT initialAttributes;

   /* ******************************/
   /* * km0k310 - edit scroll screen*/
   /* ******************************/

   /* IF KM0KM100.KM0KM-STORE-SELECT = ' ';*/
    /* MOVE '  -1' TO KM0KW01.KM0KW-STORE-SELECT;*/
    /* MOVE '  -1' TO KM0KM100.KM0KM-STORE-SELECT;*/
    /* MOVE -1 TO KM0KW01.KM0KW-KUMSTRID;*/
   /* ELSE;*/
  KM0KW01.KM0KW-STORE-SELECT = KM0KM100.KM0KM-STORE-SELECT;
   /* END;*/
   /* IF KM0KM100.KM0KM-DEPT-SELECT = ' ';*/
    /* MOVE '  -1' TO KM0KW01.KM0KW-DEPT-SELECT;*/
    /* MOVE '  -1' TO KM0KM100.KM0KM-DEPT-SELECT;*/
    /* MOVE -1 TO KM0KW01.KM0KW-XNXCD;*/
   /* ELSE;*/
  KM0KW01.KM0KW-DEPT-SELECT = KM0KM100.KM0KM-DEPT-SELECT;
   /* END;*/

   /* ******* edit for selection changes*/
  if (KM0KM100.KUCCOID == KM0KW01.KM0KW-COMPANY
   && KM0KM100.KM0KM-ACTIVE-IND == KM0KW01.KM0KW-ACTIVE-IND
   && KM0KM100.KM0KM-STORE-SELECT == KM0KW01.KM0KW-STORE
   && KM0KM100.KM0KM-DEPT-SELECT == KM0KW01.KM0KW-DEPT-ID
   && KM0KM100.XGPCD == KM0KW01.KM0KW-GPC-CD
   && KM0KM100.KM0KM-XOT-SELECT == KM0KW01.KM0KW-XOT-CD)
    /* no changes to the select options*/
    /* next sentence*/
  else
    KM0K-110(); /* refresh screen*/
    KM0KW01.KM0KW-ERROR-FLAG = "Y"; /* set error flag*/
    return;
  end


   /* ******* edit for select fields*/
  KM0KW01.KM0KW-COUNT = KM0KW01.KM0KW-MAX-NBR-OCCURS;
  KM0KW01.KM0KW-CHG-FLAG = "N";

  while (KM0KW01.KM0KW-COUNT > 0)

    if (KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] == 
    KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT])
      set KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] initialAttributes;
    else
      if (KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] == "A" /* add*/
       || KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] == "R" /* replace*/
       || KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] == "C" /* change*/
       || KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] == "T" /* terminate*/
       || KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] == "D" /* delete*/
       || KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] == "S" /* select*/
       || KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] == " ") /**/
        KM0K-320(); /* edit select value*/
      else
        set KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] cursor, bold;
        KM0KW01.KM0KW-ERROR-FLAG = "Y";
        converseLib.validationFailed(443); /* invalid select value*/
      end
    end

    KM0KW01.KM0KW-COUNT = KM0KW01.KM0KW-COUNT - 1;

  end /* of while*/


  if (KM0KW01.KM0KW-ERROR-FLAG == "N" /* rewrite temp*/
   && KM0KW01.KM0KW-CHG-FLAG == "Y") 
    KM0K-330();
  end


end // end KM0K-310


// edit select values
Function KM0K-320()
   /* ******************************/
   /* * km0k320 - edit select values*/
   /* ******************************/

   /* test if the user spaced out request*/
  if (KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] == " ")
    KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] = KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT];
    set KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] initialAttributes;
    KM0KW01.KM0KW-CHG-FLAG = "Y"; /* rewrite temp*/
    return;
  end


  if (KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] == "S")
    if (KM0KM100.XOTCD[KM0KW-COUNT] == " ")
      set KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] cursor, bold;
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      converseLib.validationFailed(390); /* can not use opt on blank line*/
    else
      KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] = KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT];
      set KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] initialAttributes;
      KM0KW01.KM0KW-CHG-FLAG = "Y"; /* rewrite temp*/
    end
    return;
  end


  if (KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] == "A" /* add*/
   || KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] == "R" /* replace*/
   || KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] == "C" /* change*/
   || KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] == "T" /* terminate*/
   || KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] == "D") /* delete*/

    /* IF COMMAREA.CACLVL(1) = 'Y'    /* user has security*/
     /* AND KM0KW01.KM0KW-XLE-SECURITY = 'Y';/* and correct xle*/
     /* ; /* next sentence*/
    /* ELSE;*/
     /* SET KM0KM100.KM0KM-SELECT-IND(KM0KW-COUNT) CURSOR,BRIGHT;*/
     /* MOVE 'Y' TO KM0KW01.KM0KW-ERROR-FLAG;*/
     /* MOVE 401 TO EZEMNO;          /* no security for user*/
     /* EZERTN;*/
    /* END;*/

    if (KUCREC.XXXSTAT == "A") /* company active*/
       /* next sentence*/
    else
      set KM0KM100.KUCCOID cursor, bold;
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      converseLib.validationFailed(71); /* inactive status*/
      return;
    end
  end


  if (KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] == "R"
   || KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] == "T"
   || KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] == "C"
   || KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] == "D")

    if (KM0KM100.XOTCD[KM0KW-COUNT] == " ")
      set KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] cursor, bold;
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      converseLib.validationFailed(390); /* can't be on blank line*/
      return;
    end

  end

  if (KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] == "R"
   || KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] == "T")

    if (KM0KM100.KM0KM-TERM-DATE[KM0KW-COUNT] != " ")
      set KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] cursor, bold;
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      converseLib.validationFailed(450); /* term date already exists*/
      return;
    end

  end


  if (KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] == "D"
   || KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] == "C")

    if (KM0KW04.KUTENDT[KM0KW-COUNT] <= XX0XW01.XX0XWDAT)
      set KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] cursor, bold;
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      converseLib.validationFailed(445); /* effect date > current date*/
      return;
    end

  end

   /* ************** select value is valid ***************************/
  KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] = KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT];
  set KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] initialAttributes;
  KM0KW01.KM0KW-CHG-FLAG = "Y"; /* rewrite temp*/


end // end KM0K-320


// rewrite temp storage
Function KM0K-330()
   /* **********************************/
   /* * km0k330 - rewrite temp storage*/
   /* **********************************/

  set KM0KW02 empty;
  KM0KW02.KM0KW-TS-RTN-CD = 0;
  KM0KW02.KM0KW-TS-FUNCTN-CD = "U";
  KM0KW02.KM0KW-TS-APPL-NAME = "KW04";
  KM0KW02.KM0KW-TS-COUNT = KM0KW01.KM0KW-PAGE-IDX;
  KM0KW04.KM0KW-04-LENGTH = KM0KW01.KM0KW-TS-SIZE;

  call "TA0050" (KM0KW04, KM0KW02) {isNoRefresh = yes, isExternal = yes};

  if (KM0KW02.KM0KW-TS-RTN-CD != 0)
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    KM0KW01.KM0KW-END-FLAG = "Y";
    KM0KW01.KM0KW-ERROR-FLAG = "Y";
    converseLib.validationFailed(228);
  end


end // end KM0K-330


// scroll page up
Function KM0K-340()
   /* *******************************/
   /* * km0k340 - scroll page up*/
   /* *******************************/

  if (KM0KW01.KM0KW-PAGE-IDX > 1)
    KM0KW01.KM0KW-PAGE-IDX = KM0KW01.KM0KW-PAGE-IDX - 1;
    KM0KW01.KM0KW-CURRENT-PAGE = KM0KW01.KM0KW-CURRENT-PAGE - 1;
    KM0KM100.KM0KM-CURRENT-PAGE = KM0KW01.KM0KW-CURRENT-PAGE;
    KM0K-200(); /* move cusku to screen*/
  else
    converseLib.validationFailed(208); /* at begining of data*/
  end


end // end KM0K-340


// scroll page down
Function KM0K-350()
   /* *******************************/
   /* * km0k350 - scroll page down*/
   /* *******************************/

   /* test for end of terms*/
  if (KM0KW01.KM0KW-PAGE-IDX >= KM0KW01.KM0KW-MAX-PAGE)
    converseLib.validationFailed(206);
  else
    KM0KW01.KM0KW-PAGE-IDX = KM0KW01.KM0KW-PAGE-IDX + 1;
    KM0KW01.KM0KW-CURRENT-PAGE = KM0KW01.KM0KW-CURRENT-PAGE + 1;
    KM0KM100.KM0KM-CURRENT-PAGE = KM0KW01.KM0KW-CURRENT-PAGE;
    KM0K-200(); /* move terms to screen*/
  end


end // end KM0K-350


// process detail screen
Function KM0K-400()
   /* *************************************************/
   /* * km0k400 - process detail screen*/
   /* *************************************************/


  KM0KW01.KM0KW-END-FLAG = "N"; /* end second screen*/
  KM0KW01.KM0KW-PAGE-IDX = 1; /* terms index*/

  while (KM0KW01.KM0KW-PAGE-IDX <= KM0KW01.KM0KW-MAX-PAGE)

    KM0K-210(); /* read terms temp storage*/
    KM0KW01.KM0KW-CHG-FLAG = "N"; /* rewrite temp storage*/

    KM0KW01.KM0KW-COUNT = 1; /* counter for screen*/
    while (KM0KW01.KM0KW-COUNT <= KM0KW01.KM0KW-MAX-NBR-OCCURS)
      if (KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == " "
       || KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "X")
         /* next sentence*/
      else
        if (KM0KW01.KM0KW-END-FLAG == "Y") /* if users have pressed pf3*/
          KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] = " ";
                                   /* clear select*/
          KM0KW01.KM0KW-CHG-FLAG = "Y"; /* rewrite temp*/
        else
          KM0K-410(); /* show 2nd scrn*/
          KM0KW01.KM0KW-CHG-FLAG = "Y"; /* rewrite temp*/
        end

      end

      KM0KW01.KM0KW-COUNT = KM0KW01.KM0KW-COUNT + 1;
    end /* while loop - max*/

    if (KM0KW01.KM0KW-CHG-FLAG == "Y") /* if changes*/
      KM0K-330(); /* rewrite temp storage*/
      KM0KW01.KM0KW-CHG-FLAG = "N";
    end

    KM0KW01.KM0KW-PAGE-IDX = KM0KW01.KM0KW-PAGE-IDX + 1;
  end /* while loop - temp storage*/


   /* ******* start from where left off  ******************/
  KM0KW01.KM0KW-PAGE-IDX = KM0KW01.KM0KW-CURRENT-PAGE;
  KM0K-200(); /* move terms to the screen*/


end // end KM0K-400


// build second screen
Function KM0K-410()
   /* ***********************************/
   /* * km0k410 - build detail screen*/
   /* ***********************************/

  KM0KW01.KM0KW-ERROR-FLAG = "N"; /* set error to no*/
  KM0KW01.KM0KW-MODIFIED-FL = "N"; /* set modified to no*/

   /* *********** read terms *********************/
  set KUTREC empty;
  set KM0KM200 initial;

  if (KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] == "A")
      /* no terms to read*/
  else
    KUTREC.KUCCOID = KM0KM100.KUCCOID;
    KUTREC.KUMSTRID = KM0KW04.KUMSTRID[KM0KW-COUNT];
    KUTREC.XNXCD = KM0KW04.XNXCD[KM0KW-COUNT];
    KUTREC.XGPCD = KM0KW04.XGPCD[KM0KW-COUNT];
    KUTREC.XOTCD = KM0KW04.XOTCD[KM0KW-COUNT];

    KM0K-420(); /* read vterms01*/
  end

  KM0K-430(); /* format terms01 to map km0km200*/


  KM0KW01.KM0KW-DONE-FLAG = "N"; /* done flag*/
  while (KM0KW01.KM0KW-DONE-FLAG == "N")
    KM0K-500(); /* converse screen 2*/
  end


end // end KM0K-410


// read terms for detail
Function KM0K-420()
   /* *************************************************/
   /* * km0k420 - read customer terms for detail screen*/
   /* *************************************************/

  set SQLCA empty;

  call "IO0350" ("S ", SQLCA, KUTREC) {isNoRefresh = yes, isExternal = yes}; /* read cusku01*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VTERMS01";
    TA1REC.TA1MAP = " ";
    KM0KW01.KM0KW-WORK-KEY = " ";
    KM0KW01.KM0KW-COMPANY-WK = KUTREC.KUCCOID;
    KM0KW01.KM0KW-DASH1-WK = "-";
    KM0KW01.KM0KW-STORE-WK = KUTREC.KUMSTRID;
    KM0KW01.KM0KW-DASH2-WK = "-";
    KM0KW01.KM0KW-DEPT-ID-WK = KUTREC.XNXCD;
    KM0KW01.KM0KW-DASH3-WK = "-";
    KM0KW01.KM0KW-GPC-CD-WK = KUTREC.XGPCD;
    TA1REC.TA1TBLKE = KM0KW01.KM0KW-WORK-KEY;
    TA1REC.TA1PGMNM = "KM0K420";
    TA1REC.TA1LOC = "READING DB2 TERMS01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end


end // end KM0K-420


// move terms to screen
Function KM0K-430()
   /* ********************************/
   /* * km0k430 - move terms to screen*/
   /* ********************************/

  if (KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "S" /* inquiry mode*/
   || KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "T" /* terminate mode*/
   || KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "D" /* delete mode*/
   || KM0KW01.KM0KW-ERROR-FLAG == "Y")             /* no terms found - ??*/
    KM0K-440(); /* set fields protected*/
  else
    KM0K-450(); /* set fields defined*/
  end


  if (KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "A")
    KM0KM200.KM0KM-TITLE = "ADD";
    if (KM0KW04.XOTCD[KM0KW-COUNT] == " ")
      set KM0KM200.KM0KM-STORE-SELECT cursor, initialAttributes;
    else
      set KM0KM200.XGPCD cursor, initialAttributes;
    end
  else
    if (KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "C")
      KM0KM200.KM0KM-TITLE = "CHANGE";
      set KM0KM200.KM0KM-EFF-MM cursor, initialAttributes;
      set KM0KM200.KM0KM-STORE-SELECT skip;
      set KM0KM200.KM0KM-DEPT-SELECT skip;
      set KM0KM200.XGPCD skip;
      set KM0KM200.XOTCD skip;
    else
      if (KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "R")
        KM0KM200.KM0KM-TITLE = "REPLACE";
        set KM0KM200.KM0KM-EFF-MM cursor, initialAttributes;
        set KM0KM200.KM0KM-STORE-SELECT skip;
        set KM0KM200.KM0KM-DEPT-SELECT skip;
        set KM0KM200.XGPCD skip;
        set KM0KM200.XOTCD skip;
      else
        if (KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "T")
          KM0KM200.KM0KM-TITLE = "TERMINATE";
          set KM0KM200.KM0KM-EXP-MM cursor, initialAttributes;
          set KM0KM200.KM0KM-EXP-DD initialAttributes;
          set KM0KM200.KM0KM-EXP-YY initialAttributes;
        else
          if (KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "D")
            KM0KM200.KM0KM-TITLE = "DELETE";
          else
            KM0KM200.KM0KM-TITLE = "INQUIRY";
          end
        end
      end
    end
  end

  KM0KM200.KUCCOID = KM0KM100.KUCCOID; /* customer id*/
  KM0KM200.KUCCONM = KM0KM100.KUCCONM; /* customer name*/

  if (KM0KW04.KUMSTRID[KM0KW-COUNT] == -1)
    KM0KM200.KM0KM-STORE-SELECT = "  -1";
  else
    KM0KW01.KM0KW-KUMSTRID = KM0KW04.KUMSTRID[KM0KW-COUNT];
    KM0KM200.KM0KM-STORE-SELECT = KM0KW01.KM0KW-STORE-SELECT;
  end

  if (KM0KW04.XNXCD[KM0KW-COUNT] == -1)
    KM0KM200.KM0KM-DEPT-SELECT = "  -1";
  else
    KM0KW01.KM0KW-XNXCD = KM0KW04.XNXCD[KM0KW-COUNT];
    KM0KM200.KM0KM-DEPT-SELECT = KM0KW01.KM0KW-DEPT-SELECT; /* dept id*/
  end
  KM0KM200.KUJSLFNM = KM0KM100.KUJSLFNM; /* dept desc*/

  if (KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "A"
   && KM0KW04.XOTCD[KM0KW-COUNT] == " ") /* and adding from blank line*/
    KM0KM200.KUMSTRNM = " ";
    KM0KM200.KM0KM-STORE-SELECT = " ";
  else

    if (KM0KM200.KM0KM-STORE-SELECT == "  -1")
      KM0KM200.KUMSTRNM = "GLOBAL STORE      ";
    else
      set KUMREC empty;
      KUMREC.KUCCOID = KM0KM200.KUCCOID;
      KUMREC.KUMSTRID = KM0KW01.KM0KW-KUMSTRID;
      KM0K-130(); /* read store*/
      if (SQLCA.VAGen_SQLCODE == 0)
        KM0KM200.KUMSTRNM = KUMREC.KUMSTRNM;
      end
    end

  end


  if (KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "A"
   && KM0KW04.XOTCD[KM0KW-COUNT] == " ") /* and adding from blank line*/
    KM0KM200.KUJSLFNM = " ";
    KM0KM200.KM0KM-DEPT-SELECT = " ";
  else

    if (KM0KM200.KM0KM-DEPT-SELECT == "  -1")
      KM0KM200.KUJSLFNM = "GLOBAL DEPARTMENT ";
    else
      set KUMREC empty;
      KUJREC.KUCCOID = KM0KM200.KUCCOID;
      KUJREC.XNXCD = KM0KW01.KM0KW-XNXCD;
      KM0K-140(); /* read dept*/
      if (SQLCA.VAGen_SQLCODE == 0)
        KM0KM200.KUJSLFNM = KUJREC.KUJSLFNM;
      end
    end

  end


  KM0KM200.XGPCD = KUTREC.XGPCD; /* gpc code*/

  KM0KM200.XOTCD = KUTREC.XOTCD; /* order type code*/
  if (KM0KM200.XOTCD in XOTTBL.XOTCD)
    KM0KM200.XOTDESC = XOTTBL.XOTDESC[sysVar.arrayIndex];
    KM0KW-FUT-FL = XOTTBL.XOTFUTRF[sysVar.arrayIndex];
    KM0KW-PROP-FL = XOTTBL.XOTPROPF[sysVar.arrayIndex];
  else
    if (KM0KM200.XOTCD == "**")
      KM0KM200.XOTDESC = "GLOBAL";
    end
  end

   /* *********************************************************/
    /* NOTE: when this table is normalized, you will not*/
          /* need to check all three*/
   /* *********************************************************/

   /* *test which of the three the users selected*/
  if (KM0KW04.KUTENDT[KM0KW-COUNT] == KUTREC.KUTENDT[1]) /* test for 1st*/
    KM0KW01.KM0KW-OCCURS-IND = 1;
  else
    if (KM0KW04.KUTENDT[KM0KW-COUNT] == KUTREC.KUTENDT[2]) /* test for 2nd*/
      KM0KW01.KM0KW-OCCURS-IND = 2;
    else
      KM0KW01.KM0KW-OCCURS-IND = 3;
    end
  end

   /* *if add set it to one*/
  if (KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "A")
    KM0KW01.KM0KW-OCCURS-IND = 1;
  end

   /* move selected terms to screen*/
  if (KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "R")
   /* don't move dates on existing record*/
  else
    KM0KW01.KM0KW-EFF-DATE = KUTREC.KUTENDT[KM0KW-OCCURS-IND];
    KM0KM200.KM0KM-EFF-MM = KM0KW01.KM0KW-EFF-MM;
    KM0KM200.KM0KM-EFF-DD = KM0KW01.KM0KW-EFF-DD;
    KM0KM200.KM0KM-EFF-YY = KM0KW01.KM0KW-EFF-YY;

    if (KUTREC.KUTXNDT[KM0KW-OCCURS-IND] == 99999999
    ) /* next sentence*/
    else
      KM0KW01.KM0KW-EXP-DATE = KUTREC.KUTXNDT[KM0KW-OCCURS-IND];
      KM0KM200.KM0KM-EXP-MM = KM0KW01.KM0KW-EXP-MM;
      KM0KM200.KM0KM-EXP-DD = KM0KW01.KM0KW-EXP-DD;
      KM0KM200.KM0KM-EXP-YY = KM0KW01.KM0KW-EXP-YY;
    end
  end

  KM0KM200.XPTCD = KUTREC.XPTCD[KM0KW-OCCURS-IND]; /* term cd*/
  if (KM0KM200.XPTCD in XPTTBL.XPTCD)
    KM0KM200.XPTABRV = XPTTBL.XPTDESC[sysVar.arrayIndex];
  end

  KM0KM200.XCPCD = KUTREC.XCPCD[KM0KW-OCCURS-IND]; /* coop cd*/
  if (KM0KM200.XCPCD in XCPTBL.XCPCD)
    KM0KM200.XCPABRV = XCPTBL.XCPDESC[sysVar.arrayIndex];
  end

  KM0KM200.XAACD = KUTREC.XAACD[KM0KW-OCCURS-IND]; /* allow code*/
  if (KM0KM200.XAACD in XAATBL.XAACD)
    KM0KM200.XAAABRV = XAATBL.XAADESC[sysVar.arrayIndex];
  end
  KM0KM200.KUTAPBK = KUTREC.KUTAPBK[KM0KW-OCCURS-IND];
  KM0KM200.KUTAPOF = KUTREC.KUTAPOF[KM0KW-OCCURS-IND];
  KM0KM200.KUTAANET = KUTREC.KUTAANET[KM0KW-OCCURS-IND];

  KM0KM200.XTDCD = KUTREC.XTDCD[KM0KW-OCCURS-IND]; /* trade code*/
  if (KM0KM200.XTDCD in XTDTBL.XTDCD)
    KM0KM200.XTDABRV = XTDTBL.XTDDESC[sysVar.arrayIndex];
  end
  KM0KM200.KUTTDPBK = KUTREC.KUTTDPBK[KM0KW-OCCURS-IND];
  KM0KM200.KUTTDPOF = KUTREC.KUTTDPOF[KM0KW-OCCURS-IND];
  KM0KM200.KUTTDNET = KUTREC.KUTTDNET[KM0KW-OCCURS-IND];

  KM0KM200.XDACD = KUTREC.XDACD[KM0KW-OCCURS-IND]; /* defect cd*/
  if (KM0KM200.XDACD in XDATBL.XDACD)
    KM0KM200.XDAABRV = XDATBL.XDADESC[sysVar.arrayIndex];
  end
  KM0KM200.KUTDABK = KUTREC.KUTDABK[KM0KW-OCCURS-IND];
  KM0KM200.KUTDAOF = KUTREC.KUTDAOF[KM0KW-OCCURS-IND];
  KM0KM200.KUTDANET = KUTREC.KUTDANET[KM0KW-OCCURS-IND];

  KM0KM200.KUTAAFCG = KUTREC.KUTAAFCG[KM0KW-OCCURS-IND];
  KM0KM200.KUTAAFCN = KUTREC.KUTAAFCN[KM0KW-OCCURS-IND];
  KM0KM200.KUTTDSPN = KUTREC.KUTTDSPN[KM0KW-OCCURS-IND];
  KM0KM200.KUTTDDSN = KUTREC.KUTTDDSN[KM0KW-OCCURS-IND];
  KM0KM200.KUTDAHCN = KUTREC.KUTDAHCN[KM0KW-OCCURS-IND];


end // end KM0K-430


// set fields to inquiry mode
Function KM0K-440()
   /* ***********************************/
   /* * km0k440 - set fields for inquiry*/
   /* ***********************************/

  set KM0KM200.KM0KM-TITLE skip;

  set KM0KM200.CATOAP cursor, initialAttributes;

  set KM0KM200.KUCCOID skip;
  set KM0KM200.KM0KM-STORE-SELECT skip;
  set KM0KM200.KM0KM-DEPT-SELECT skip;
  set KM0KM200.XGPCD skip;
  set KM0KM200.XOTCD skip;

  set KM0KM200.KM0KM-EFF-MM skip;
  set KM0KM200.KM0KM-EFF-DD skip;
  set KM0KM200.KM0KM-EFF-YY skip;
  set KM0KM200.KM0KM-EXP-MM skip;
  set KM0KM200.KM0KM-EXP-DD skip;
  set KM0KM200.KM0KM-EXP-YY skip;

  set KM0KM200.XPTCD skip;
  set KM0KM200.XCPCD skip;
  set KM0KM200.XAACD skip;
  set KM0KM200.KUTAPBK skip;
  set KM0KM200.KUTAPOF skip;
  set KM0KM200.KUTAANET skip;
  set KM0KM200.XTDCD skip;
  set KM0KM200.KUTTDPBK skip;
  set KM0KM200.KUTTDPOF skip;
  set KM0KM200.KUTTDNET skip;
  set KM0KM200.XDACD skip;
  set KM0KM200.KUTDABK skip;
  set KM0KM200.KUTDAOF skip;
  set KM0KM200.KUTDANET skip;
  set KM0KM200.KUTAAFCG skip;
  set KM0KM200.KUTAAFCN skip;
  set KM0KM200.KUTTDSPN skip;
  set KM0KM200.KUTTDDSN skip;
  set KM0KM200.KUTDAHCN skip;


end // end KM0K-440


// set fields to update mode
Function KM0K-450()
   /* ***************************************/
   /* * km0k450 - set fields to update mode*/
   /* ***************************************/

  set KM0KM200.KM0KM-TITLE initialAttributes;

  set KM0KM200.KUCCOID skip;
  set KM0KM200.KM0KM-STORE-SELECT initialAttributes;
  set KM0KM200.KM0KM-DEPT-SELECT initialAttributes;
  set KM0KM200.XGPCD initialAttributes;
  set KM0KM200.XOTCD initialAttributes;

  set KM0KM200.KM0KM-EFF-MM initialAttributes;
  set KM0KM200.KM0KM-EFF-DD initialAttributes;
  set KM0KM200.KM0KM-EFF-YY initialAttributes;
  set KM0KM200.KM0KM-EXP-MM initialAttributes;
  set KM0KM200.KM0KM-EXP-DD initialAttributes;
  set KM0KM200.KM0KM-EXP-YY initialAttributes;

  set KM0KM200.XPTCD initialAttributes;
  set KM0KM200.XCPCD initialAttributes;
  set KM0KM200.XAACD initialAttributes;
  set KM0KM200.KUTAPBK initialAttributes;
  set KM0KM200.KUTAPOF initialAttributes;
  set KM0KM200.KUTAANET initialAttributes;
  set KM0KM200.XTDCD initialAttributes;
  set KM0KM200.KUTTDPBK initialAttributes;
  set KM0KM200.KUTTDPOF initialAttributes;
  set KM0KM200.KUTTDNET initialAttributes;
  set KM0KM200.XDACD initialAttributes;
  set KM0KM200.KUTDABK initialAttributes;
  set KM0KM200.KUTDAOF initialAttributes;
  set KM0KM200.KUTDANET initialAttributes;
  set KM0KM200.KUTAAFCG initialAttributes;
  set KM0KM200.KUTAAFCN initialAttributes;
  set KM0KM200.KUTTDSPN initialAttributes;
  set KM0KM200.KUTTDDSN initialAttributes;
  set KM0KM200.KUTDAHCN initialAttributes;


end // end KM0K-450


// converse detail screen
Function KM0K-500()
   /* *******************************************/
   /* * km0k500 - converse detail screen         **/
   /* *******************************************/

  KM0KM200.KM0KM-MAP-DATE = VGVar.currentShortGregorianDate; /* set screen date*/


  converse KM0KM200 ;


  KM0KW01.KM0KW-ERROR-FLAG = "N"; /* init error flag*/
  KM0KM200.VAGen_EZEMSG = " ";

  KM0K-510(); /* edit pf and special keys*/


  if (KM0KW01.KM0KW-ERROR-FLAG == "N" /* no errors*/
   && KM0KW01.KM0KW-END-FLAG == "N")  /* not pf3*/
    if (KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "S")
      KM0KW01.KM0KW-DONE-FLAG = "Y"; /* done with inq*/
      KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] = " ";
    else
      if (KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "A"
       || KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "R"
       || KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "C"
       || KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "T"
       || KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "D")
        if (KM0KW01.KM0KW-MODIFIED-FL == "Y")
          converseLib.validationFailed(277); /* good edit*/
        end
      end
    end
  end


end // end KM0K-500


// process pfkeys - scrn 2
Function KM0K-510()
   /* ********************************************/
   /* * km0k510 - process pfkeys for detail screen*/
   /* ********************************************/

   /* **************************************/
   /* edit pa2 key*/
   /* **************************************/

  if (converseVar.eventKey is pa2)
    set KUTREC empty;
    set KM0KM200 initial;

    if (KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] == "A")
      /* next sentence*/
    else
      KUTREC.KUCCOID = KM0KM100.KUCCOID;
      KUTREC.KUMSTRID = KM0KW04.KUMSTRID[KM0KW-COUNT];
      KUTREC.XNXCD = KM0KW04.XNXCD[KM0KW-COUNT];
      KUTREC.XGPCD = KM0KW04.XGPCD[KM0KW-COUNT];
      KUTREC.XOTCD = KM0KW04.XOTCD[KM0KW-COUNT];

      KM0K-420(); /* read vterms01*/
    end
    KM0K-430(); /* format terms01 to map km0km200*/
    KM0KW01.KM0KW-ERROR-FLAG = "Y"; /* set error flagto display screen*/
    KM0KW01.KM0KW-MODIFIED-FL = "N";
    return;
  end

   /* **************************************/
   /* edit pf3 key*/
   /* **************************************/

  if (converseVar.eventKey is pf3) /* back to from application*/
    if (KM0KW01.KM0KW-MODIFIED-FL == "Y")
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      converseLib.validationFailed(367); /* can not with update pending*/
      set KM0KM200.KM0KM-EFF-MM cursor, initialAttributes;
    else
       /* return back to select screen*/
      KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] = " "; /* blank select*/
      KM0KW01.KM0KW-END-FLAG = "Y"; /* end processing*/
      KM0KW01.KM0KW-DONE-FLAG = "Y"; /* set done flag*/
    end
    return;
  end

   /* **************************************/
   /* edit pf9 key*/
   /* **************************************/

  if (converseVar.eventKey is pf9) /* cancel option on term*/
     /* skip to next selected product*/
    KM0KW01.KM0KW-DONE-FLAG = "Y"; /* set done flag*/
    KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] = " "; /* blank select*/
    return;
  end


   /* **************************************/
   /* edit enter  key*/
   /* **************************************/

  if (converseVar.eventKey is enter)
    if (KM0KM200.CATOAP > " ") /* fast path*/
      if (KM0KW01.KM0KW-MODIFIED-FL == "Y")
        KM0KW01.KM0KW-ERROR-FLAG = "Y";
        converseLib.validationFailed(47); /* can not with update pending*/
        set KM0KM200.CATOAP cursor, bold;
        return;
      end
      COMMAREA.CATOAP = KM0KM200.CATOAP;
      if (KM0KM200.CAITEM == " ")
        KM0KW01.KM0KW-CAUSERA-COMP = KM0KM200.KUCCOID;
        KM0KW01.KM0KW-STORE-SELECT = KM0KM200.KM0KM-STORE-SELECT;
        KM0KW01.KM0KW-CAUSERA-STORE = KM0KW01.KM0KW-KUMSTRID;
        KM0KW01.KM0KW-DEPT-SELECT = KM0KM200.KM0KM-DEPT-SELECT;
        KM0KW-CAUSERA-DEPT = KM0KW01.KM0KW-XNXCD;
        KM0KW01.KM0KW-CAUSERA-GPC = KM0KM200.XGPCD;
        COMMAREA.CAUSERA = KM0KW01.KM0KW-CAUSERA;
      else
        COMMAREA.CAITEM = KM0KM200.CAITEM;
      end
      COMMAREA.CAFROMAP = "KM0K";
      XSEXIT();
      KM0KM200.VAGen_EZEMSG = COMMAREA.CAMSG;
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      set KM0KM200.CATOAP cursor, bold;
      return;
    end
  end

   /* **************************************/
   /* test for fastpath except on <enter>*/
   /* **************************************/

  if (KM0KM200.CATOAP > " ")
    KM0KW01.KM0KW-ERROR-FLAG = "Y";
    converseLib.validationFailed(90); /* can not fast path and use pf keys*/
    set KM0KM200.CATOAP cursor, bold;
    return;
  else
    set KM0KM200.CATOAP initialAttributes;
  end


   /* **************************************/
   /* edit screen*/
   /* **************************************/

  if (KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "S")
    if (converseVar.eventKey is enter) /* enter key*/
      return;
    end
  else
    KM0K-530(); /* edit screen*/
    if (KM0KW01.KM0KW-ERROR-FLAG == "Y")
      return;
    else
      if (converseVar.eventKey is enter) /* enter key*/
        return;
      end
    end
  end


   /* **************************************/
   /* edit pf12 key*/
   /* **************************************/

  if (converseVar.eventKey is pf12) /* update key*/

    if (KM0KW01.KM0KW-MODIFIED-FL == "Y" /* if terms data updated*/
     && KM0KW01.KM0KW-ERROR-FLAG == "N") /* and no errors*/
      if (KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "A")
        KM0K-800(); /* process terms add*/
        KM0KW01.KM0KW-DONE-FLAG = "Y"; /* set done flag*/
        KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] = "X";
      else
        if (KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "D")
          KM0K-860(); /* process terms delete*/
          KM0KW01.KM0KW-DONE-FLAG = "Y"; /* set done flag*/
          KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] = "X";
        else
          if (KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "R")
            KM0K-880(); /* process terms replace*/
            KM0KW01.KM0KW-DONE-FLAG = "Y"; /* set done flag*/
            KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] = " ";
          else
            KM0K-890(); /* process terms update*/
            KM0KW01.KM0KW-DONE-FLAG = "Y"; /* set done flag*/
            KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] = " ";
          end /* if 'r'*/
        end /* if 'd'*/
      end /* if 'a'*/

      if (KM0KW01.KM0KW-ERROR-FLAG == "N") /* no errors*/
        converseLib.validationFailed(29); /* all updates ok*/
        KM0KW01.KM0KW-ERROR-FLAG = "Y"; /* set error flag*/
        KM0KW01.KM0KW-MODIFIED-FL = "N"; /* reset terms update*/
      end

    else /* screen not modified*/
      if (KM0KW01.KM0KW-ERROR-FLAG == "N") /* and no errors*/
        KM0KW01.KM0KW-ERROR-FLAG = "Y"; /* error flag*/
        converseLib.validationFailed(280); /* can pf12 without pressing enter*/
      end
    end /* of modified test*/
  end /* of PF12*/


   /* **************************************/
   /* edit invalid key*/
   /* **************************************/

  if (KM0KW01.KM0KW-ERROR-FLAG == "N")
    converseLib.validationFailed(003); /* invalid pf key message*/
    KM0KW01.KM0KW-ERROR-FLAG = "Y";
  end


end // end KM0K-510


// edit detail screen info
Function KM0K-530()
   /* *************************************/
   /* * km0k530 - edit detail screen info*/
   /* *************************************/


  if (KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "A")
    if (KM0KW04.XOTCD[KM0KW-COUNT] == " ")
      set KM0KM200.KM0KM-STORE-SELECT cursor, initialAttributes;
    else
      set KM0KM200.XGPCD cursor, initialAttributes;
    end
  else
    if (KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "C")
      set KM0KM200.KM0KM-EFF-MM cursor, initialAttributes;
    else
      if (KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "R")
        set KM0KM200.KM0KM-EFF-MM cursor, initialAttributes;
      else
        if (KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "T")
          set KM0KM200.KM0KM-EXP-MM cursor, initialAttributes;
        else
          set KM0KM200.CATOAP cursor, initialAttributes;
        end
      end
    end
  end


  if (KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "D")
    KM0KW01.KM0KW-MODIFIED-FL = "Y"; /* yes, screen was displayed*/
    return;
  end


  KM0K-550(); /* show pop-up windows*/

  KM0K-730(); /* get existing terms*/

  KM0K-600(); /* edit screen*/


end // end KM0K-530


// show pop-up windows
Function KM0K-550()
   /* ***********************************/
   /* * km0k550 - show pop-up windows*/
   /* ***********************************/


   /* ****  Payment terms table  ***********/
  if (KM0KM200.XPTCD == "?")
    XPXX001();
    XX0XW02.XX0XWHDR = "VALID PAYMENT TERMS CODES ";
    while (XX0XW02.XX0XWEND == "N")
      XPXPT01();
    end
    set KM0KM200.XPTCD cursor;
    if (XX0XW02.XX0XWPIX > 0)
      KM0KM200.XPTCD = XPTTBL.XPTCD[XX0XWPIX];
      KM0KM200.XPTABRV = XPTTBL.XPTABRV[XX0XWPIX];
    end
  end


   /* ****  coop code table  ***********/
  if (KM0KM200.XCPCD == "?")
    XPXX001();
    XX0XW02.XX0XWHDR = "VALID COOP CODES          ";
    while (XX0XW02.XX0XWEND == "N")
      XPXCP01();
    end
    set KM0KM200.XCPCD cursor;
    if (XX0XW02.XX0XWPIX > 0)
      KM0KM200.XCPCD = XCPTBL.XCPCD[XX0XWPIX];
      KM0KM200.XCPABRV = XCPTBL.XCPABRV[XX0XWPIX];
    end
  end


   /* ****  advert allow table *********/
  if (KM0KM200.XAACD == "?")
    XPXX001();
    XX0XW02.XX0XWHDR = "VALID ADVERT ALLOW CODES  ";
    while (XX0XW02.XX0XWEND == "N")
      XPXAA01();
    end
    set KM0KM200.XAACD cursor;
    if (XX0XW02.XX0XWPIX > 0)
      KM0KM200.XAACD = XAATBL.XAACD[XX0XWPIX];
      KM0KM200.XAAABRV = XAATBL.XAAABRV[XX0XWPIX];
    end
  end


   /* ****  trade discount table *******/
  if (KM0KM200.XTDCD == "?")
    XPXX001();
    XX0XW02.XX0XWHDR = "VALID TRADE DISCOUNT CODES";
    while (XX0XW02.XX0XWEND == "N")
      XPXTD01();
    end
    set KM0KM200.XTDCD cursor;
    if (XX0XW02.XX0XWPIX > 0)
      KM0KM200.XTDCD = XTDTBL.XTDCD[XX0XWPIX];
      KM0KM200.XTDABRV = XTDTBL.XTDABRV[XX0XWPIX];
    end
  end


   /* ****  defective allow table ******/
  if (KM0KM200.XDACD == "?")
    XPXX001();
    XX0XW02.XX0XWHDR = "VALID DEFECTIVE ALLOW CDS ";
    while (XX0XW02.XX0XWEND == "N")
      XPXDA01();
    end
    set KM0KM200.XDACD cursor;
    if (XX0XW02.XX0XWPIX > 0)
      KM0KM200.XDACD = XDATBL.XDACD[XX0XWPIX];
      KM0KM200.XDAABRV = XDATBL.XDAABRV[XX0XWPIX];
    end
  end


  converseLib.clearScreen();


end // end KM0K-550


// edit terms data
Function KM0K-600()
   /* ***********************************************************/
   /* * km0k600 - edit terms detail data*/
   /* ***********************************************************/

   /* **********************************************/
   /* ****     check for any changes            ****/
   /* **********************************************/


  KM0KW01.KM0KW-MODIFIED-FL = "Y"; /* terms01 modified*/


  if (KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] != "T")

    KM0K-605(); /* edit def alw hnd chg net flag*/

    KM0K-610(); /* edit trd disc dir shp net flag*/

    KM0K-615(); /* edit trade disc sls prog flag*/

    KM0K-620(); /* edit fix unit chg net flag*/

    KM0K-625(); /* edit fix unit charge*/

    KM0K-630(); /* edit def alw net flag*/

    KM0K-635(); /* edit def alw % and code*/

    KM0K-640(); /* edit trade disc net flag*/

    KM0K-645(); /* edit trade disc % and code*/

    KM0K-650(); /* edit ad alw net flag*/

    KM0K-655(); /* edit ad alw % and code*/

    KM0K-660(); /* edit coop code*/

    KM0K-665(); /* edit payment terms code*/

    KM0K-670(); /* edit expiration date*/

    KM0K-675(); /* edit effective date*/

    KM0K-680(); /* edit some data must be entered*/

  else

    KM0K-670(); /* edit expiration date*/

  end


  if (KM0KM100.KM0KM-SELECT-IND[KM0KW-COUNT] == "A")
    KM0K-685(); /* edit order type*/

    KM0K-700(); /* edit for valid store*/

    KM0K-710(); /* edit for valid department*/

    if (KM0KW01.KM0KW-ERROR-FLAG == "N")
      KM0K-720(); /* edit for valid store/dept*/

      KM0K-730(); /* edit against existing terms*/
    end

  end


end // end KM0K-600


// edit handle net
Function KM0K-605()
   /* *********************************************/
   /* * km0k605 - edit defect alw hand chg net fl*/
   /* *********************************************/

  set KM0KM200.KUTDAHCN initialAttributes;

  if (KM0KM200.KUTDAHCN != " ")
    if ((KM0KM200.KUTDAHCN == "Y"
     || KM0KM200.KUTDAHCN == "N"))
      /* next sentence*/
    else
      converseLib.validationFailed(20);
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      set KM0KM200.KUTDAHCN cursor, bold;
    end
  else

  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF (KM0KM200.KM0KM-EFF-MM GT 0*/
  /* OR KM0KM200.KM0KM-EFF-YY GT 0*/
  /* OR KM0KM200.KM0KM-EFF-DD GT 0);*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/

  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
    if ((KM0KM200.KM0KM-EFF-MM > 0
     || KM0KM200.KM0KM-EFF-DD > 0))
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/

      if (XDZ-DATA-DIST-CD == "CA")
        KM0KM200.KUTDAHCN = "Y";
      else
        KM0KM200.KUTDAHCN = "N";
      end
    else
      KM0KM200.KUTDAHCN = " ";
    end
  end


end // end KM0K-605


// edit direct ship net
Function KM0K-610()
   /* *********************************************/
   /* * km0k610 - edit trade disc dir shp net fl*/
   /* *********************************************/

  set KM0KM200.KUTTDDSN initialAttributes;

  if (KM0KM200.KUTTDDSN != " ")
    if (KM0KM200.KUTTDDSN == "Y"
     || KM0KM200.KUTTDDSN == "N")
      /* next sentence*/
    else
      converseLib.validationFailed(20);
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      set KM0KM200.KUTTDDSN cursor, bold;
    end
  else

  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF KM0KM200.KM0KM-EFF-MM GT 0*/
  /* OR KM0KM200.KM0KM-EFF-YY GT 0*/
  /* OR KM0KM200.KM0KM-EFF-DD GT 0;*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/

  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
    if (KM0KM200.KM0KM-EFF-MM > 0
     || KM0KM200.KM0KM-EFF-DD > 0)
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/

      if (XDZ-DATA-DIST-CD == "CA")
        KM0KM200.KUTTDDSN = "Y";
      else
        KM0KM200.KUTTDDSN = "N";
      end
    else
      KM0KM200.KUTTDDSN = " ";
    end
  end


end // end KM0K-610


// edit sales pgm net
Function KM0K-615()
   /* *********************************************/
   /* * km0k615 - edit trade disc sls prog fl*/
   /* *********************************************/

  set KM0KM200.KUTTDSPN initialAttributes;

  if (KM0KM200.KUTTDSPN != " ")
    if (KM0KM200.KUTTDSPN == "Y"
     || KM0KM200.KUTTDSPN == "N")
      /* next sentence*/
    else
      converseLib.validationFailed(20);
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      set KM0KM200.KUTTDSPN cursor, bold;
    end
  else

  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF KM0KM200.KM0KM-EFF-MM GT 0*/
  /* OR KM0KM200.KM0KM-EFF-YY GT 0*/
  /* OR KM0KM200.KM0KM-EFF-DD GT 0;*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/

  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
    if (KM0KM200.KM0KM-EFF-MM > 0
     || KM0KM200.KM0KM-EFF-DD > 0)
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/

      if (XDZ-DATA-DIST-CD == "CA")
        KM0KM200.KUTTDSPN = "Y";
      else
        KM0KM200.KUTTDSPN = "N";
      end
      KM0KM200.KUTTDSPN = " ";
    end
  end


end // end KM0K-615


// edit unit charge net
Function KM0K-620()
   /* *********************************************/
   /* * km0k620 - edit fix unit charge net fl*/
   /* *********************************************/

  set KM0KM200.KUTAAFCN initialAttributes;

  if (KM0KM200.KUTAAFCN != " ")
    if (KM0KM200.KUTAAFCN == "Y"
     || KM0KM200.KUTAAFCN == "N")
      /* next sentence*/
    else
      converseLib.validationFailed(20);
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      set KM0KM200.KUTAAFCN cursor, bold;
    end
  else

  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF KM0KM200.KM0KM-EFF-MM GT 0*/
  /* OR KM0KM200.KM0KM-EFF-YY GT 0*/
  /* OR KM0KM200.KM0KM-EFF-DD GT 0;*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/

  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
    if (KM0KM200.KM0KM-EFF-MM > 0
     || KM0KM200.KM0KM-EFF-DD > 0)
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/

      if (XDZ-DATA-DIST-CD == "CA")
        KM0KM200.KUTAAFCN = "Y";
      else
        KM0KM200.KUTAAFCN = "N";
      end
    else
      KM0KM200.KUTAAFCN = " ";
    end
  end


end // end KM0K-620


// edit unit change
Function KM0K-625()
   /* **********************************************/
   /* * km0k625 - edit fix unit charge*/
   /* **********************************************/

  set KM0KM200.KUTAAFCG initialAttributes;

  if (KM0KM200.KUTAAFCG >= 0)
      /* next sentence               /* no edit for charge*/
  end


end // end KM0K-625


// edit def alllow net
Function KM0K-630()
   /* ***********************************************/
   /* * km0k-630 edit defective alw net fl*/
   /* ***********************************************/

  set KM0KM200.KUTDANET initialAttributes;

  if (KM0KM200.KUTDANET != " ")
    if (KM0KM200.KUTDANET == "Y"
     || KM0KM200.KUTDANET == "N")
      /* next sentence*/
    else
      converseLib.validationFailed(20);
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      set KM0KM200.KUTDANET cursor, bold;
    end
  else

  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF KM0KM200.KM0KM-EFF-MM GT 0*/
  /* OR KM0KM200.KM0KM-EFF-YY GT 0*/
  /* OR KM0KM200.KM0KM-EFF-DD GT 0;*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/

  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
    if (KM0KM200.KM0KM-EFF-MM > 0
     || KM0KM200.KM0KM-EFF-DD > 0)
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/

      KM0KM200.KUTDANET = "N";
    else
      KM0KM200.KUTDANET = " ";
    end
  end


end // end KM0K-630


// edit def allow % and code
Function KM0K-635()
   /* ************************************/
   /* * km0k635 - edit defective allow*/
   /* ************************************/

    /* if any defective allow fields modified, all must pass edit*/

  set KM0KM200.XDACD initialAttributes;
  set KM0KM200.KUTDAOF initialAttributes;
  set KM0KM200.KUTDABK initialAttributes;
  KM0KM200.XDAABRV = " ";

    /* check for pct's with blank code*/

  if (KM0KM200.XDACD == " ") /* def allow. code blank?*/
    if (KM0KM200.KUTDAOF != 0
     || KM0KM200.KUTDABK != 0)
      converseLib.validationFailed(241);
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      set KM0KM200.KUTDABK cursor, bold;
      set KM0KM200.KUTDAOF bold;
    end
    return; /* blank discount and pcts o.k.*/
  end

   /* --- defective allow code must be in valid code table ----*/


  if (KM0KM200.XDACD in XDATBL.XDACD)

    if (XDATBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KM0KM200.XDAABRV = XDATBL.XDAABRV[sysVar.arrayIndex];
    else
      converseLib.validationFailed(242);
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      set KM0KM200.XDACD cursor, bold;
    end

  else
    converseLib.validationFailed(17);
    KM0KW01.KM0KW-ERROR-FLAG = "Y";
    set KM0KM200.XDACD cursor, bold;
    return;
  end

   /* ---  face and bank pct's must add up to pct associated with*/
       /* defective allow code in defective allow table.*/

  KM0KW-PERCENT = KM0KM200.KUTDAOF + KM0KM200.KUTDABK;
  if (KM0KW01.KM0KW-PERCENT == XDATBL.XDAPCT[sysVar.arrayIndex])
    /* next sentence*/
  else
    converseLib.validationFailed(243);
    KM0KW01.KM0KW-ERROR-FLAG = "Y";
    set KM0KM200.KUTDABK cursor, bold;
    set KM0KM200.KUTDAOF bold;
  end


end // end KM0K-635


// edit trade disc net
Function KM0K-640()
   /* *************************************************/
   /* * km0k640 - edit trade discount net fl*/
   /* *************************************************/

  set KM0KM200.KUTTDNET initialAttributes;

  if (KM0KM200.KUTTDNET != " ")
    if (KM0KM200.KUTTDNET == "Y"
     || KM0KM200.KUTTDNET == "N")
      /* next sentence*/
    else
      converseLib.validationFailed(20);
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      set KM0KM200.KUTTDNET cursor, bold;
    end
  else

  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF KM0KM200.KM0KM-EFF-MM GT 0*/
  /* OR KM0KM200.KM0KM-EFF-YY GT 0*/
  /* OR KM0KM200.KM0KM-EFF-DD GT 0;*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/

  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
    if (KM0KM200.KM0KM-EFF-MM > 0
     || KM0KM200.KM0KM-EFF-DD > 0)
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/

      if (XDZ-DATA-DIST-CD == "CA")
        KM0KM200.KUTTDNET = "Y";
      else
        KM0KM200.KUTTDNET = "N";
      end
    else
      KM0KM200.KUTTDSPN = " ";
    end
  end


end // end KM0K-640


// edit trade disc % and code
Function KM0K-645()
   /* ******************************************/
   /* * km0k645 - edit trade disc % and code*/
   /* ******************************************/

  set KM0KM200.XTDCD initialAttributes;
  set KM0KM200.KUTTDPOF initialAttributes;
  set KM0KM200.KUTTDPBK initialAttributes;
  KM0KM200.XTDABRV = " ";

    /* check for pct's with blank code*/

  if (KM0KM200.XTDCD == " ") /* trade disc. code blank?*/
    if (KM0KM200.KUTTDPOF != 0
     || KM0KM200.KUTTDPBK != 0)
      converseLib.validationFailed(244);
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      set KM0KM200.KUTTDPBK cursor, bold;
      set KM0KM200.KUTTDPOF bold;
    end
    return; /* blank discount and pcts o.k.*/
  end

   /* --- trade discount code must be in valid code table ----*/

  if (KM0KM200.XTDCD in XTDTBL.XTDCD)

    if (XTDTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KM0KM200.XTDABRV = XTDTBL.XTDABRV[sysVar.arrayIndex];
    else
      converseLib.validationFailed(245);
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      set KM0KM200.XTDCD cursor, bold;
      return;
    end

  else
    converseLib.validationFailed(17);
    KM0KW01.KM0KW-ERROR-FLAG = "Y";
    set KM0KM200.XTDCD cursor, bold;
    return;
  end
   /* ---  face and bank pct's must add up to pct associated with*/
       /* trade discount code in trade discount table.*/

  KM0KW-PERCENT = KM0KM200.KUTTDPOF + KM0KM200.KUTTDPBK;
  if (KM0KW01.KM0KW-PERCENT == XTDTBL.XTDPCT[sysVar.arrayIndex])
    /* next sentence*/
  else
    converseLib.validationFailed(246);
    KM0KW01.KM0KW-ERROR-FLAG = "Y";
    set KM0KM200.KUTTDPBK cursor, bold;
    set KM0KM200.KUTTDPOF bold;
  end


end // end KM0K-645


// edit advert allow net
Function KM0K-650()
   /* **********************************************/
   /* * km0k650 - edit ad allowance net fl*/
   /* **********************************************/

  set KM0KM200.KUTAANET initialAttributes;

  if (KM0KM200.KUTAANET != " ")
    if (KM0KM200.KUTAANET == "Y"
     || KM0KM200.KUTAANET == "N")
      /* next sentence*/
    else
      converseLib.validationFailed(20);
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      set KM0KM200.KUTAANET cursor, bold;
    end
  else

  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF KM0KM200.KM0KM-EFF-MM GT 0*/
  /* OR KM0KM200.KM0KM-EFF-YY GT 0*/
  /* OR KM0KM200.KM0KM-EFF-DD GT 0;*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/

  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
    if (KM0KM200.KM0KM-EFF-MM > 0
     || KM0KM200.KM0KM-EFF-DD > 0)
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/

      if (XDZ-DATA-DIST-CD == "CA")
        KM0KM200.KUTAANET = "Y";
      else
        KM0KM200.KUTAANET = "N";
      end
    else
      KM0KM200.KUTAANET = " ";
    end
  end


end // end KM0K-650


// edit advert allow % and code
Function KM0K-655()
   /* **********************************************/
   /* * km0k655 - edit ad allowance % and code*/
   /* **********************************************/

  set KM0KM200.XAACD initialAttributes;
  set KM0KM200.KUTAPOF initialAttributes;
  set KM0KM200.KUTAPBK initialAttributes;
  KM0KM200.XAAABRV = " ";

    /* check for pct's with blank code*/

  if (KM0KM200.XAACD == " ") /* ad allow. code blank?*/
    if (KM0KM200.KUTAPOF != 0
     || KM0KM200.KUTAPBK != 0)
      converseLib.validationFailed(247);
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      set KM0KM200.KUTAPBK cursor, bold;
      set KM0KM200.KUTAPOF bold;
    end
    return; /* blank code and pcts o.k.*/
  end

   /* ----  ad allowance code must be in valid code table*/

  if (KM0KM200.XAACD in XAATBL.XAACD)

    if (XAATBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KM0KM200.XAAABRV = XAATBL.XAAABRV[sysVar.arrayIndex];
    else
      converseLib.validationFailed(248);
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      set KM0KM200.XAACD cursor, bold;
      return;
    end

  else
    converseLib.validationFailed(17);
    KM0KW01.KM0KW-ERROR-FLAG = "Y";
    set KM0KM200.XAACD cursor, bold;
    return;
  end

   /* ---  face and bank pct's must add up to pct associated with*/
       /* ad allowance code in ad allowance table.*/

  KM0KW-PERCENT = KM0KM200.KUTAPOF + KM0KM200.KUTAPBK;
  if (KM0KW01.KM0KW-PERCENT == XAATBL.XAAPCT[sysVar.arrayIndex])
     /* next sentence*/
  else
    converseLib.validationFailed(249);
    KM0KW01.KM0KW-ERROR-FLAG = "Y";
    set KM0KM200.KUTAPBK cursor, bold;
    set KM0KM200.KUTAPOF bold;
  end


end // end KM0K-655


// edit coop code
Function KM0K-660()
   /* *********************************/
   /* * km0k660 - edit co-op code*/
   /* *********************************/

    /* must be in valid coop table*/

  set KM0KM200.XCPCD initialAttributes;
  KM0KM200.XCPABRV = " ";

  if (KM0KM200.XCPCD != " ")

    if (KM0KM200.XCPCD in XCPTBL.XCPCD)
      if (XCPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        KM0KM200.XCPABRV = XCPTBL.XCPABRV[sysVar.arrayIndex];
      else
        converseLib.validationFailed(250);
        KM0KW01.KM0KW-ERROR-FLAG = "Y";
        set KM0KM200.XCPCD cursor, bold;
      end /* end if active*/
    else
      converseLib.validationFailed(17);
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      set KM0KM200.XCPCD cursor, bold;

    end /* end if in table*/
  end /* end if blank*/


end // end KM0K-660


// edit payment terms code
Function KM0K-665()
   /* *******************************/
   /* * km0k665 - edit terms code*/
   /* *******************************/

  set KM0KM200.XPTCD initialAttributes;
  KM0KM200.XPTABRV = " ";

  if (KM0KM200.XPTCD != " ")

    if (KM0KM200.XPTCD in XPTTBL.XPTCD)

      if (XPTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        KM0KM200.XPTABRV = XPTTBL.XPTABRV[sysVar.arrayIndex];
      else
        converseLib.validationFailed(251);
        KM0KW01.KM0KW-ERROR-FLAG = "Y";
        set KM0KM200.XPTCD cursor, bold;
      end /* end if active*/

    else
      converseLib.validationFailed(17);
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      set KM0KM200.XPTCD cursor, bold;

    end /* end if in table*/
  end /* end if blank*/


end // end KM0K-665


// edit expiration date
Function KM0K-670()
   /* ******************************************/
   /* * km0k670 - edit terms expiration date*/
   /* ******************************************/

  set KM0KM200.KM0KM-EXP-YY initialAttributes;
  set KM0KM200.KM0KM-EXP-MM initialAttributes;
  set KM0KM200.KM0KM-EXP-DD initialAttributes;

    /* date range check*/

  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF KM0KM200.KM0KM-EXP-MM EQ 0*/
  /* AND KM0KM200.KM0KM-EXP-YY EQ 0*/
  /* AND KM0KM200.KM0KM-EXP-DD EQ 0;*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/

  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
  if (KM0KM200.KM0KM-EXP-MM == 0
   && KM0KM200.KM0KM-EXP-DD == 0)
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/

    if (KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "T")
      converseLib.validationFailed(261);
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      set KM0KM200.KM0KM-EXP-MM cursor, bold;
      set KM0KM200.KM0KM-EXP-DD bold;
      set KM0KM200.KM0KM-EXP-YY bold;
    end
    return;
  end

    /* ********* valid date entered *******************/

  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF KM0KM200.KM0KM-EXP-YY GT 0;*/
  /* ;  /* next sentence*/
  /* ELSE;*/
  /* MOVE 5 TO EZEMNO;*/
  /* MOVE 'Y' TO KM0KW01.KM0KW-ERROR-FLAG;*/
  /* SET KM0KM200.KM0KM-EXP-YY CURSOR,MODIFIED,BRIGHT;*/
  /* END;*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/

  if (KM0KM200.KM0KM-EXP-DD >= 1
   && KM0KM200.KM0KM-EXP-DD <= 31)
      /* next sentence*/
  else
    converseLib.validationFailed(53);
    KM0KW01.KM0KW-ERROR-FLAG = "Y";
    set KM0KM200.KM0KM-EXP-DD cursor, modified, bold;
  end

  if (KM0KM200.KM0KM-EXP-MM >= 1
   && KM0KM200.KM0KM-EXP-MM <= 12)
      /* next sentence*/
  else
    converseLib.validationFailed(52);
    KM0KW01.KM0KW-ERROR-FLAG = "Y";
    set KM0KM200.KM0KM-EXP-MM cursor, modified, bold;
  end


    /* ********* edit date against current date *******/
  KM0KW01.KM0KW-EXP-MM = KM0KM200.KM0KM-EXP-MM;
  KM0KW01.KM0KW-EXP-YY = KM0KM200.KM0KM-EXP-YY;
  KM0KW01.KM0KW-EXP-DD = KM0KM200.KM0KM-EXP-DD;
  if (KM0KW01.KM0KW-EXP-YY > 90)
    KM0KW01.KM0KW-EXP-CC = 19;
  else
    KM0KW01.KM0KW-EXP-CC = 20;
  end

  if (KM0KW01.KM0KW-EXP-DATE < XX0XW01.XX0XWDAT)
    converseLib.validationFailed(456);
    KM0KW01.KM0KW-ERROR-FLAG = "Y";
    set KM0KM200.KM0KM-EXP-MM cursor, bold;
    set KM0KM200.KM0KM-EXP-YY bold;
    set KM0KM200.KM0KM-EXP-DD bold;
  end


    /* ********* edit date against effect date *******/
          /* see effective date logic*/
   /* OVE KM0KM200.KM0KM-EFF-MM TO KM0KW01.KM0KW-EFF-MM;*/
   /* OVE KM0KM200.KM0KM-EFF-YY TO KM0KW01.KM0KW-EFF-YY;*/
   /* OVE KM0KM200.KM0KM-EFF-DD TO KM0KW01.KM0KW-EFF-DD;*/
   /* F KM0KW01.KM0KW-EFF-YY GT 90;*/
   /* MOVE 19 TO KM0KW01.KM0KW-EXP-CC;*/
   /* LSE;*/
   /* MOVE 20 TO KM0KW01.KM0KW-EXP-CC;*/
   /* ND;*/

   /* F KM0KW01.KM0KW-EXP-DATE GT KM0KW01.KM0KW-EFF-DATE;*/
   /* ;  /* next sentence*/
   /* LSE;*/
   /* MOVE 258 TO EZEMNO;*/
   /* MOVE 'Y' TO KM0KW01.KM0KW-ERROR-FLAG;*/
   /* SET KM0KM200.KM0KM-EXP-MM CURSOR,MODIFIED,BRIGHT;*/
   /* SET KM0KM200.KM0KM-EXP-DD MODIFIED,BRIGHT;*/
   /* SET KM0KM200.KM0KM-EXP-YY MODIFIED,BRIGHT;*/
   /* ND;*/


   /* ****** edit for exp date < next eff date ******/
       /* note: this will change when table is*/
             /* normalized*/
   /* commented out 11-10-92. -675 checks for eff data > prior exdt*/
   /* which is the same edit.*/
  if (KM0KW01.KM0KW-OCCURS-IND == 3)
   /* next sentence                 /* no next terms*/
  else
    KM0KW01.KM0KW-OCCURS-IND = KM0KW01.KM0KW-OCCURS-IND + 1;
    KM0KW01.KM0KW-EFF-DATE = KUTREC.KUTENDT[KM0KW-OCCURS-IND];
    KM0KW01.KM0KW-OCCURS-IND = KM0KW01.KM0KW-OCCURS-IND - 1;
    if (KM0KW01.KM0KW-EFF-DATE <= KM0KW01.KM0KW-EXP-DATE
     && KM0KW01.KM0KW-EFF-DATE > 0)
      converseLib.validationFailed(260);
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      set KM0KM200.KM0KM-EFF-MM cursor, bold;
      set KM0KM200.KM0KM-EFF-DD bold;
      set KM0KM200.KM0KM-EFF-YY bold;
    end
  end


end // end KM0K-670


// edit effective date
Function KM0K-675()
   /* ****************************************/
   /* * km0k675 - edit terms effective date*/
   /* ****************************************/

  if (KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "A"
   || KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "C"
   || KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "R")
     /* next sentence*/
  else
    return;
  end

  set KM0KM200.KM0KM-EFF-YY initialAttributes;
  set KM0KM200.KM0KM-EFF-MM initialAttributes;
  set KM0KM200.KM0KM-EFF-DD initialAttributes;

    /* date range check*/

   /* ****** effective date required ********/

  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF KM0KM200.KM0KM-EFF-MM EQ 0*/
  /* AND KM0KM200.KM0KM-EFF-YY EQ 0*/
  /* AND KM0KM200.KM0KM-EFF-DD EQ 0;*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/

  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
  if (KM0KM200.KM0KM-EFF-MM == 0
   && KM0KM200.KM0KM-EFF-DD == 0)
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/

    converseLib.validationFailed(378);
    KM0KW01.KM0KW-ERROR-FLAG = "Y";
    set KM0KM200.KM0KM-EFF-MM cursor, modified, bold;
    set KM0KM200.KM0KM-EFF-DD bold;
    set KM0KM200.KM0KM-EFF-YY bold;
    return;
  end

   /* ****** edit for valid date ************/

  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF KM0KM200.KM0KM-EFF-YY GT 0;*/
  /* ;  /* next sentence*/
  /* ELSE;*/
  /* MOVE 5 TO EZEMNO;*/
  /* MOVE 'Y' TO KM0KW01.KM0KW-ERROR-FLAG;*/
  /* SET KM0KM200.KM0KM-EFF-YY CURSOR,MODIFIED,BRIGHT;*/
  /* END;*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/

  if (KM0KM200.KM0KM-EFF-DD >= 1
   && KM0KM200.KM0KM-EFF-DD <= 31)
      /* next sentence*/
  else
    converseLib.validationFailed(53);
    KM0KW01.KM0KW-ERROR-FLAG = "Y";
    set KM0KM200.KM0KM-EFF-DD cursor, modified, bold;
  end

  if (KM0KM200.KM0KM-EFF-MM >= 1
   && KM0KM200.KM0KM-EFF-MM <= 12)
      /* next sentence*/
  else
    converseLib.validationFailed(52);
    KM0KW01.KM0KW-ERROR-FLAG = "Y";
    set KM0KM200.KM0KM-EFF-MM cursor, modified, bold;
  end


   /* ***** check effective date against current ******/
  KM0KW01.KM0KW-EFF-MM = KM0KM200.KM0KM-EFF-MM;
  KM0KW01.KM0KW-EFF-DD = KM0KM200.KM0KM-EFF-DD;
  KM0KW01.KM0KW-EFF-YY = KM0KM200.KM0KM-EFF-YY;
  if (KM0KW01.KM0KW-EFF-YY > 90)
    KM0KW01.KM0KW-EFF-CC = 19;
  else
    KM0KW01.KM0KW-EFF-CC = 20;
  end

  if (KM0KW01.KM0KW-EFF-DATE < XX0XW01.XX0XWDAT)
    converseLib.validationFailed(378); /* edt must be ge current date*/
    KM0KW01.KM0KW-ERROR-FLAG = "Y";
    set KM0KM200.KM0KM-EFF-MM cursor, modified, bold;
    set KM0KM200.KM0KM-EFF-YY bold;
    set KM0KM200.KM0KM-EFF-DD bold;
    return;
  end


   /* ****** edit for eff date < exp date ***/
  if (KM0KM200.KM0KM-EXP-MM == 0
   && KM0KM200.KM0KM-EXP-DD == 0
   && KM0KM200.KM0KM-EXP-YY == 0)
      /* next sentence*/
  else
    KM0KW01.KM0KW-EXP-MM = KM0KM200.KM0KM-EXP-MM;
    KM0KW01.KM0KW-EXP-DD = KM0KM200.KM0KM-EXP-DD;
    KM0KW01.KM0KW-EXP-YY = KM0KM200.KM0KM-EXP-YY;
    if (KM0KW01.KM0KW-EXP-YY > 90)
      KM0KW01.KM0KW-EXP-CC = 19;
    else
      KM0KW01.KM0KW-EXP-CC = 20;
    end

    if (KM0KW01.KM0KW-EFF-DATE <= KM0KW01.KM0KW-EXP-DATE)
      /* next sentence*/
    else
      converseLib.validationFailed(259); /* edt must be less than tdt*/
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      set KM0KM200.KM0KM-EFF-MM cursor, modified, bold;
      set KM0KM200.KM0KM-EFF-DD bold;
      set KM0KM200.KM0KM-EFF-YY bold;
    end
  end


   /* ****** edit for eff date > prior exp date ******/
   /* note: this will change when table is normalized*/

  if (KUTREC.KUTENDT[1] > 0)
    if (KM0KW01.KM0KW-EFF-DATE > KUTREC.KUTXNDT[1])
        /* next sentence*/
    else
      if (KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "A")
        if (KUTREC.KUTXNDT[1] == 99999999)
          converseLib.validationFailed(466); /* active term needs tdt*/
          KM0KW01.KM0KW-ERROR-FLAG = "Y";
          set KM0KM200.KM0KM-EFF-MM cursor, modified, bold;
          set KM0KM200.KM0KM-EFF-DD bold;
          set KM0KM200.KM0KM-EFF-YY bold;
          return;
        else
          converseLib.validationFailed(258); /* edt must be gt then prior tdt*/
          KM0KW01.KM0KW-ERROR-FLAG = "Y";
          set KM0KM200.KM0KM-EFF-MM cursor, modified, bold;
          set KM0KM200.KM0KM-EFF-DD bold;
          set KM0KM200.KM0KM-EFF-YY bold;
          return;
        end
      end
    end
  end

  if (KUTREC.KUTENDT[2] > 0)
    if (KM0KW01.KM0KW-EFF-DATE > KUTREC.KUTXNDT[2])
       /* next sentence*/
    else
      if (KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "A")
        if (KUTREC.KUTXNDT[2] == 99999999)
          converseLib.validationFailed(466); /* active term needs term date*/
          KM0KW01.KM0KW-ERROR-FLAG = "Y";
          set KM0KM200.KM0KM-EFF-MM cursor, modified, bold;
          set KM0KM200.KM0KM-EFF-DD bold;
          set KM0KM200.KM0KM-EFF-YY bold;
          return;
        else
          converseLib.validationFailed(258); /* edt must be gt then prior tdt*/
          KM0KW01.KM0KW-ERROR-FLAG = "Y";
          set KM0KM200.KM0KM-EFF-MM cursor, modified, bold;
          set KM0KM200.KM0KM-EFF-DD bold;
          set KM0KM200.KM0KM-EFF-YY bold;
          return;
        end
      end
    end
  end

  if (KUTREC.KUTENDT[3] > 0)
    if (KM0KW01.KM0KW-EFF-DATE > KUTREC.KUTXNDT[3])
       /* next sentence*/
    else
      if (KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "A")
        if (KUTREC.KUTXNDT[3] == 99999999)
          converseLib.validationFailed(466); /* edt must be gt then prior tdt*/
          KM0KW01.KM0KW-ERROR-FLAG = "Y";
          set KM0KM200.KM0KM-EFF-MM cursor, modified, bold;
          set KM0KM200.KM0KM-EFF-DD bold;
          set KM0KM200.KM0KM-EFF-YY bold;
          return;
        else
          converseLib.validationFailed(258); /* edt must be gt then prior tdt*/
          KM0KW01.KM0KW-ERROR-FLAG = "Y";
          set KM0KM200.KM0KM-EFF-MM cursor, modified, bold;
          set KM0KM200.KM0KM-EFF-DD bold;
          set KM0KM200.KM0KM-EFF-YY bold;
          return;
        end
      end
    end
  end

end // end KM0K-675


// edit some data entered
Function KM0K-680()
   /* **************************************/
   /* * km0k680 - edit some data required*/
   /* **************************************/

    /* some data besides effective date must be entered*/

  if (KM0KW01.KM0KW-ERROR-FLAG == "Y"
  ) /* next sentence*/
  else

    if (KM0KM200.XPTCD != " "    /* terms*/
     || KM0KM200.XCPCD != " "    /* co-op*/
     || KM0KM200.XAACD != " "    /* ad allowance*/
     || KM0KM200.KUTAPOF != 0    /* ad face pct*/
     || KM0KM200.KUTAPBK != 0    /* ad bank pct*/
     || KM0KM200.KUTAANET != "N" /* ad net flag*/
     || KM0KM200.KUTAAFCG != 0   /* ad fixed chgs*/
     || KM0KM200.KUTAAFCN != "N" /* ad fixed chgs net flag*/
     || KM0KM200.XTDCD != " "    /* trade discount*/
     || KM0KM200.KUTTDPOF != 0   /* trade disc. face pct*/
     || KM0KM200.KUTTDPBK != 0   /* trade disc. bank pct*/
     || KM0KM200.KUTTDNET != "N" /* trade disc. net flag*/
     || KM0KM200.KUTTDSPN != "N" 
     /* trade disc. sls prg net flag*/
     || KM0KM200.KUTTDDSN != "N" 
     /* trade disc. dir shp net flag*/
     || KM0KM200.XDACD != " "    /* defect*/
     || KM0KM200.KUTDABK != 0    /* def allow. bank pct*/
     || KM0KM200.KUTDAOF != 0    /* def allow. face pct*/
     || KM0KM200.KUTDANET != "N" /* def allow. net flag*/
     || KM0KM200.KUTDAHCN != "N") /* def allow. hnd chg net flag*/
      /* next sentence*/
    else
      converseLib.validationFailed(254);
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      set KM0KM200.XPTCD cursor, bold;
      set KM0KM200.XCPCD bold;
      set KM0KM200.XAACD bold;
      set KM0KM200.KUTAPOF bold;
      set KM0KM200.KUTAPBK bold;
      set KM0KM200.KUTAANET bold;
      set KM0KM200.KUTAAFCG bold;
      set KM0KM200.KUTAAFCN bold;
      set KM0KM200.XTDCD bold;
      set KM0KM200.KUTTDPOF bold;
      set KM0KM200.KUTTDPBK bold;
      set KM0KM200.KUTTDNET bold;
      set KM0KM200.KUTTDSPN bold;
      set KM0KM200.KUTTDDSN bold;
      set KM0KM200.XDACD bold;
      set KM0KM200.KUTDABK bold;
      set KM0KM200.KUTDAOF bold;
      set KM0KM200.KUTDANET bold;
      set KM0KM200.KUTDAHCN bold;
    end
  end


end // end KM0K-680


// edit order type
Function KM0K-685()
   /* ***********************************/
   /* * km0k685 - edit order type code*/
   /* ***********************************/

    /* order type can only be entered on an add.  no edits will*/
    /* be performed on chg, as no order type chg is allowed.*/


   /* ---- order type code must be in table xottbl ---*/

  set KM0KM200.XOTCD initialAttributes;
  set KM0KM200.XGPCD initialAttributes;

  if (KM0KM200.XOTCD in XOTTBL.XOTCD)
    if (XOTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KM0KW01.KM0KW-PROP-FL = XOTTBL.XOTPROPF[sysVar.arrayIndex];
      KM0KW01.KM0KW-FUT-FL = XOTTBL.XOTFUTRF[sysVar.arrayIndex];
      KM0KM200.XOTDESC = XOTTBL.XOTDESC[sysVar.arrayIndex];
      if (KM0KM200.XGPCD == XOTTBL.XGPCD[sysVar.arrayIndex])
          /* next sentence*/
      else
        converseLib.validationFailed(256);
        KM0KW01.KM0KW-ERROR-FLAG = "Y";
        set KM0KM200.XOTCD cursor, bold;
        set KM0KM200.XGPCD cursor, bold;
        return;
      end
    else
      converseLib.validationFailed(255);
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      set KM0KM200.XOTCD cursor, bold;
      return;
    end
  else
    if (KM0KM200.XOTCD == "**")
      KM0KM200.XOTDESC = "GLOBAL";
    else
      converseLib.validationFailed(17);
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      set KM0KM200.XOTCD cursor, bold;
      set KM0KM200.XGPCD cursor, bold;
      return;
    end
  end

  if (KM0KM200.XGPCD == "**")
      /* next sentence*/
  else
    if (KM0KM200.XGPCD in XGPTBL.XGPCD)
      if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        /* next sentence*/
      else
        converseLib.validationFailed(256);
        KM0KW01.KM0KW-ERROR-FLAG = "Y";
        set KM0KM200.XOTCD cursor, bold;
        set KM0KM200.XGPCD cursor, bold;
        return;
      end
    else
      converseLib.validationFailed(256);
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      set KM0KM200.XOTCD cursor, bold;
      set KM0KM200.XGPCD cursor, bold;
      return;
    end
  end



end // end KM0K-685


// edit for valid store
Function KM0K-700()
   /* **********************************/
   /* * km0k700 - edit for valid store*/
   /* **********************************/

  set KM0KM200.KM0KM-STORE-SELECT initialAttributes;

  if (KM0KM200.KM0KM-STORE-SELECT == "  -1")
    KM0KM200.KUMSTRNM = "GLOBAL STORE ";
  else
    set KUMREC empty;
    KUMREC.KUCCOID = KM0KM200.KUCCOID;
    KM0KW01.KM0KW-STORE-SELECT = KM0KM200.KM0KM-STORE-SELECT;
    KUMREC.KUMSTRID = KM0KW01.KM0KW-KUMSTRID;
    KM0K-130(); /* read store*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (KUMREC.XXXSTAT == "I") /* store inactive*/
        KM0KM200.KUMSTRNM = KUMREC.KUMSTRNM;
        KM0KW01.KM0KW-ERROR-FLAG = "Y";
        set KM0KM200.KM0KM-STORE-SELECT cursor, modified, bold;
        converseLib.validationFailed(071);
      else
        KM0KM200.KUMSTRNM = KUMREC.KUMSTRNM;
        set KM0KM200.KM0KM-STORE-SELECT initialAttributes;
      end
    else
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      set KM0KM200.KM0KM-STORE-SELECT cursor, bold;
      converseLib.validationFailed(137);
    end
  end


end // end KM0K-700


// edit for valid dept
Function KM0K-710()
   /* ****************************************/
   /* * km0k710 - edit for valid department*/
   /* ****************************************/

  set KM0KM200.KM0KM-DEPT-SELECT initialAttributes;

  if (KM0KM200.KM0KM-DEPT-SELECT == "  -1")
    KM0KM200.KUJSLFNM = "GLOBAL DEPARTMENT ";
  else
    set KUJREC empty;
    KUJREC.KUCCOID = KM0KM200.KUCCOID;
    KM0KW01.KM0KW-DEPT-SELECT = KM0KM200.KM0KM-DEPT-SELECT;
    KUJREC.XNXCD = KM0KW01.KM0KW-XNXCD;
    KM0K-140(); /* read dept*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (KUJREC.XXXSTAT == "I") /* dept inactive*/
        KM0KM200.KUJSLFNM = KUJREC.KUJSLFNM;
        KM0KW01.KM0KW-ERROR-FLAG = "Y";
        set KM0KM200.KM0KM-DEPT-SELECT cursor, bold;
        converseLib.validationFailed(071);
      else
        KM0KM200.KUJSLFNM = KUJREC.KUJSLFNM;
        set KM0KM200.KM0KM-DEPT-SELECT initialAttributes;
      end
    else
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      set KM0KM200.KM0KM-DEPT-SELECT cursor, bold; /* dept not found*/
      converseLib.validationFailed(137);
    end
  end


end // end KM0K-710


// edit for valid store/dept
Function KM0K-720()
   /* *************************************************/
   /* * km0k720 - edit for valid store/dept combination*/
   /* *************************************************/


  if (KM0KM200.KM0KM-STORE-SELECT == "  -1"
   || KM0KM200.KM0KM-DEPT-SELECT == "  -1")
     /* next sentence*/
  else

    set KUNREC empty;
    KUNREC.KUCCOID = KM0KM200.KUCCOID;
    KM0KW01.KM0KW-STORE-SELECT = KM0KM200.KM0KM-STORE-SELECT;
    KUNREC.KUMSTRID = KM0KW01.KM0KW-KUMSTRID;
    KM0KW01.KM0KW-STORE-SELECT = KM0KM200.KM0KM-DEPT-SELECT;
    KUNREC.XNXCD = KM0KW01.KM0KW-XNXCD;
    KUNREC.XGPCD = KM0KM200.XGPCD;

    KM0K-725(); /* read vcust*/

    if (SQLCA.VAGen_SQLCODE == 0)
      if (KUNREC.XXXSTAT == "I") /* cust inactive*/
        KM0KW01.KM0KW-ERROR-FLAG = "Y";
        set KM0KM200.KM0KM-STORE-SELECT cursor, bold;
        set KM0KM200.KM0KM-DEPT-SELECT bold;
        set KM0KM200.XGPCD bold;
        converseLib.validationFailed(071);
      end
    else
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      set KM0KM200.KM0KM-STORE-SELECT cursor, bold;
      set KM0KM200.KM0KM-DEPT-SELECT bold;
      set KM0KM200.XGPCD bold;
      converseLib.validationFailed(137);
    end
  end

end // end KM0K-720


// read vcust information
Function KM0K-725()
   /* *******************************/
   /* * km0K725 - get vcust record*/
   /* *******************************/

  set SQLCA empty;

  call "IO0280" ("S ", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes}; /* read cmpny01*/


  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUST001";
    TA1REC.TA1MAP = " ";
    KM0KW01.KM0KW-WORK-KEY = " ";
    KM0KW01.KM0KW-COMPANY-WK = KUNREC.KUCCOID;
    KM0KW01.KM0KW-DASH1-WK = "-";
    KM0KW01.KM0KW-STORE-WK = KUNREC.KUMSTRID;
    KM0KW01.KM0KW-DASH2-WK = "-";
    KM0KW01.KM0KW-DEPT-ID-WK = KUNREC.XNXCD;
    KM0KW01.KM0KW-DASH3-WK = "-";
    KM0KW01.KM0KW-GPC-CD-WK = KUNREC.XGPCD;
    TA1REC.TA1TBLKE = KM0KW01.KM0KW-WORK-KEY;
    TA1REC.TA1PGMNM = "KM0K725";
    TA1REC.TA1LOC = "READING DB2 VCUST01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

end // end KM0K-725


// edit for existing terms
Function KM0K-730()
   /* ************************************/
   /* * km0k730 - edit for existing terms*/
   /* ************************************/

  KUTREC.KUCCOID = KM0KM200.KUCCOID;
  if (KM0KM200.KM0KM-STORE-SELECT == "  -1")
    KUTREC.KUMSTRID = -1;
  else
    KM0KW01.KM0KW-STORE-SELECT = KM0KM200.KM0KM-STORE-SELECT;
    KUTREC.KUMSTRID = KM0KW01.KM0KW-KUMSTRID;
  end
  if (KM0KM200.KM0KM-DEPT-SELECT == "  -1")
    KUTREC.XNXCD = -1;
  else
    KM0KW01.KM0KW-DEPT-SELECT = KM0KM200.KM0KM-DEPT-SELECT;
    KUTREC.XNXCD = KM0KW01.KM0KW-XNXCD;
  end
  KUTREC.XGPCD = KM0KM200.XGPCD;
  KUTREC.XOTCD = KM0KM200.XOTCD;
  KM0KW01.KM0KW-TERMS-FOUND = "Y";

  KM0K-420(); /* read terms*/

  if (SQLCA.VAGen_SQLCODE == +100)
    KM0KW01.KM0KW-TERMS-FOUND = "N";
    return;
  end

   /* F KUTREC.KUTXNDT(1) = 99999999;*/
   /* OR KUTREC.KUTXNDT(2) = 99999999;*/
   /* OR KUTREC.KUTXNDT(3) = 99999999;*/
   /* MOVE 'Y' TO KM0KW01.KM0KW-ERROR-FLAG;/* active terms found*/
   /* SET KM0KM200.KUMSTRID BRIGHT,CURSOR;*/
   /* SET KM0KM200.XOTCD BRIGHT;*/
   /* MOVE 108 TO EZEMNO;*/
   /* EZERTN;*/
   /* ND;*/

   /* ** set position within record*/
     /* this test done in effect date logic*/
   /* F KUTREC.KUTXNDT(2) GT 0;*/
   /* MOVE 2 TO KM0KW01.KM0KW-OCCURS-IND;*/
   /* ND;*/
   /* F KUTREC.KUTXNDT(3) GT 0;*/
   /* MOVE 3 TO KM0KW01.KM0KW-OCCURS-IND;*/
   /* ND;*/

   /* OVE 0 TO KM0KW01.KM0KW-EFF-DATE;*/
   /* OVE KM0KM200.KM0KM-EFF-YY TO KM0KW01.KM0KW-EFF-YY;/* eff. date*/
   /* OVE KM0KM200.KM0KM-EFF-MM TO KM0KW01.KM0KW-EFF-MM;*/
   /* OVE KM0KM200.KM0KM-EFF-DD TO KM0KW01.KM0KW-EFF-DD;*/
   /* F KM0KW01.KM0KW-EFF-YY GT 90;*/
   /* MOVE 19 TO KM0KW01.KM0KW-EFF-CC;*/
   /* LSE;*/
   /* MOVE 20 TO KM0KW01.KM0KW-EFF-CC;*/
   /* ND;*/

   /* F KM0KW01.KM0KW-EFF-DATE LE KUTREC.KUTXNDT(KM0KW-OCCURS-IND);*/
                                  /* MOVE 'Y' TO*/
                                   /* KM0KW01.KM0KW-ERROR-FLAG;/* date*/
                                   /* overlap on existing terms*/
     /* SET KM0KM200.KM0KM-EFF-MM CURSOR,BRIGHT;*/
     /* SET KM0KM200.KM0KM-EFF-DD BRIGHT;*/
     /* SET KM0KM200.KM0KM-EFF-YY BRIGHT;*/
   /* MOVE 259 TO EZEMNO;*/
   /* ND;*/


end // end KM0K-730


// Handle Adding new term
Function KM0K-800()
   /* *********************************************/
   /* * km0k800 - handle Adding a new term*/
   /* *********************************************/


  if (KM0KW01.KM0KW-TERMS-FOUND == "N")
   /* add entire row*/
    KM0K-805();
  else
   /* update current record*/
    KM0K-840();
  end


end // end KM0K-800


// process ADD record
Function KM0K-805()
   /* **********************************/
   /* * km0k805 - process ADDing record*/
   /* **********************************/

   /* convert csp time/date format to db2 time/date stamp format*/
  XX0XS01();

  set KUTREC empty;
  KM0K-810(); /* format terms general data update*/


   /* ****************************/
   /* prepare add audit trail*/
   /* ****************************/
  set KUZREC empty;
  KUZREC.KUZTYPE = "A"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = " "; /* blank-add, b-before, a-after*/
  KM0K-820(); /* add audit image for terms01*/


   /* ****************************/
   /* update temp storage*/
   /* ****************************/
  KM0K-825(); /* update temp storage*/


   /* ****************************/
   /* add row to the database*/
   /* ****************************/
  KM0K-835(); /* add customer terms*/


end // end KM0K-805


// move screen data to kutrec
Function KM0K-810()
   /* **************************************/
   /* * km0k810 - move screen data to terms*/
   /* **************************************/

  KUTREC.KUCCOID = KM0KM200.KUCCOID; /* company id*/
  if (KM0KM200.KM0KM-STORE-SELECT == "  -1")
    KUTREC.KUMSTRID = -1; /* store id*/
  else
    KM0KW01.KM0KW-STORE-SELECT = KM0KM200.KM0KM-STORE-SELECT;
    KUTREC.KUMSTRID = KM0KW01.KM0KW-KUMSTRID; /* store id*/
  end
  if (KM0KM200.KM0KM-DEPT-SELECT == "  -1")
    KUTREC.XNXCD = -1; /* dept id*/
  else
    KM0KW01.KM0KW-DEPT-SELECT = KM0KM200.KM0KM-DEPT-SELECT;
    KUTREC.XNXCD = KM0KW01.KM0KW-XNXCD; /* dept id*/
  end

  KUTREC.XGPCD = KM0KM200.XGPCD; /* gpc code*/
  KUTREC.XOTCD = KM0KM200.XOTCD; /* order type*/


  KM0KW01.KM0KW-EFF-DATE = 0;
  KM0KW01.KM0KW-EFF-YY = KM0KM200.KM0KM-EFF-YY; /* eff. date*/
  KM0KW01.KM0KW-EFF-MM = KM0KM200.KM0KM-EFF-MM;
  KM0KW01.KM0KW-EFF-DD = KM0KM200.KM0KM-EFF-DD;
  if (KM0KW01.KM0KW-EFF-YY > 90)
    KM0KW01.KM0KW-EFF-CC = 19;
  else
    KM0KW01.KM0KW-EFF-CC = 20;
  end
  KUTREC.KUTENDT[KM0KW-OCCURS-IND] = KM0KW01.KM0KW-EFF-DATE;

  KM0KW01.KM0KW-EXP-DATE = 0;
  KM0KW01.KM0KW-EXP-YY = KM0KM200.KM0KM-EXP-YY; /* eff. date*/
  KM0KW01.KM0KW-EXP-MM = KM0KM200.KM0KM-EXP-MM;
  KM0KW01.KM0KW-EXP-DD = KM0KM200.KM0KM-EXP-DD;
  if (KM0KW01.KM0KW-EXP-DATE == 0
   && KUTREC.KUTENDT[KM0KW-OCCURS-IND] > 0)
    KUTREC.KUTXNDT[KM0KW-OCCURS-IND] = 99999999;
  else
    if (KM0KW01.KM0KW-EXP-YY > 90)
      KM0KW01.KM0KW-EXP-CC = 19;
    else
      KM0KW01.KM0KW-EXP-CC = 20;
    end
    KUTREC.KUTXNDT[KM0KW-OCCURS-IND] = KM0KW01.KM0KW-EXP-DATE;
  end

  KUTREC.XPTCD[KM0KW-OCCURS-IND] = KM0KM200.XPTCD; /* terms*/
  KUTREC.XCPCD[KM0KW-OCCURS-IND] = KM0KM200.XCPCD; /* co-op*/
  KUTREC.XAACD[KM0KW-OCCURS-IND] = KM0KM200.XAACD; /* ad allow.*/
  KUTREC.KUTAPOF[KM0KW-OCCURS-IND] = KM0KM200.KUTAPOF; /* ad face*/
  KUTREC.KUTAPBK[KM0KW-OCCURS-IND] = KM0KM200.KUTAPBK; /* ad bank*/
  KUTREC.KUTAANET[KM0KW-OCCURS-IND] = KM0KM200.KUTAANET; /* ad net*/
  KUTREC.KUTAAFCG[KM0KW-OCCURS-IND] = KM0KM200.KUTAAFCG; /* ad f chg*/
  KUTREC.KUTAAFCN[KM0KW-OCCURS-IND] = KM0KM200.KUTAAFCN; /* ad f c n*/
  KUTREC.XTDCD[KM0KW-OCCURS-IND] = KM0KM200.XTDCD; /* trade disc*/
  KUTREC.KUTTDPOF[KM0KW-OCCURS-IND] = KM0KM200.KUTTDPOF; /* face*/
  KUTREC.KUTTDPBK[KM0KW-OCCURS-IND] = KM0KM200.KUTTDPBK; /* bank*/
  KUTREC.KUTTDNET[KM0KW-OCCURS-IND] = KM0KM200.KUTTDNET; /* t/d net*/
  KUTREC.KUTTDSPN[KM0KW-OCCURS-IND] = KM0KM200.KUTTDSPN; /* t/d s p*/
  KUTREC.KUTTDDSN[KM0KW-OCCURS-IND] = KM0KM200.KUTTDDSN; /* t/d dsn*/
  KUTREC.XDACD[KM0KW-OCCURS-IND] = KM0KM200.XDACD; /* defect*/
  KUTREC.KUTDABK[KM0KW-OCCURS-IND] = KM0KM200.KUTDABK; /* def bank*/
  KUTREC.KUTDAOF[KM0KW-OCCURS-IND] = KM0KM200.KUTDAOF; /* def face*/
  KUTREC.KUTDANET[KM0KW-OCCURS-IND] = KM0KM200.KUTDANET; /* def net*/
  KUTREC.KUTDAHCN[KM0KW-OCCURS-IND] = KM0KM200.KUTDAHCN; /* def hnd*/

  KUTREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* stamp chg date*/
  KUTREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* stamp chg time*/


   /* *************************************************/
   /* * update flags on company*/
   /* *************************************************/

  if (KM0KW01.KM0KW-FUT-FL == "Y")
    if (KUCREC.KUCFTRTI == "Y")
      /* next sentence*/
    else
      KUCREC.KUCFTRTI = "Y";
      KM0K-815(); /* update company*/
    end
  else
    if (KM0KW01.KM0KW-PROP-FL == "Y")
      if (KUCREC.KUCPRPTI == "Y")
        /* next sentence*/
      else
        KUCREC.KUCPRPTI = "Y";
        KM0K-815(); /* update company*/
      end
    end
  end


end // end KM0K-810


// UPDATE company terms ind
Function KM0K-815()
   /* *****************************************/
   /* * km0k815 - update terms ind on company*/
   /* *****************************************/

  XX0XS01();

  KUCREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUCREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  call "IO0240" ("U ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(31);
      KM0KW01.KM0KW-ERROR-FLAG = "Y";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      return;
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      TA1REC.TA1MAP = " ";
      KM0KW01.KM0KW-COMPANY = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KM0KW01.KM0KW-WORK-KEY;
      TA1REC.TA1PGMNM = "KM0K815";
      TA1REC.TA1LOC = "UPDATING DB2 CMPNY01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end

end // end KM0K-815


// write audit record
Function KM0K-820()
   /* ********************************/
   /* * km0k820 - write audit record*/
   /* ********************************/

   /* prepare add audit trail*/
  KUZREC.XXXTBLNM = "VTERMS01";
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUTREC.KUCCOID;
  KUZREC.KUMSTRID = KUTREC.KUMSTRID;
  KUZREC.XNXCD = KUTREC.XNXCD;
  KUZREC.XGPCD = KUTREC.XGPCD;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZDATA = KUTREC.KUTGRP;


  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM0K   ";
    TA1REC.TA1LOCAT[1] = "KM0K820  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VTERMS01 ";
    TA1REC.TA1MAP = "KM0KM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VTERMS01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end


  set SQLCA empty;

  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUAUD01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1PGMNM = "KM0K820";
    TA1REC.TA1LOC = "ADD DB2 DCUST.VCUAUD01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end


end // end KM0K-820


// update info in temp storage
Function KM0K-825()
   /* *****************************************/
   /* * km0k825 - update info in temp storage*/
   /* *****************************************/


  if (KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "A"
   || KM0KW04.KM0KW-SELECT-IND[KM0KW-COUNT] == "R")
   /* * add new row to temp storage*/
    KM0K-830();
  else
   /* * rewrite temp storage*/
    KM0K-180(); /* move to temp*/
    KM0K-330(); /* rewrite temp storage*/
  end


end // end KM0K-825


// add new rec to temp storage
Function KM0K-830()
   /* *****************************************/
   /* * km0k830 - add records to temp storage*/
   /* *****************************************/

  KM0KW01.KM0KW-COUNT-2 = KM0KW01.KM0KW-COUNT; /* save count*/
  KM0KW01.KM0KW-PAGE-IDX2 = KM0KW01.KM0KW-PAGE-IDX; /* save page*/
  KM0KW01.KM0KW-PAGE-IDX = KM0KW01.KM0KW-MAX-PAGE;
  KM0K-210(); /* read temp storage*/

   /* ***** test for adding a new row in temp storage *********/
  KM0KW01.KM0KW-COUNT = 1;
  KM0KW01.KM0KW-INSERT-FLAG = "Y";
  while (KM0KW01.KM0KW-COUNT <= KM0KW01.KM0KW-MAX-NBR-OCCURS)
    if (KM0KW04.XOTCD[KM0KW-COUNT] == " ")
      KM0K-180(); /* move to temp*/
      KM0KW01.KM0KW-COUNT = KM0KW01.KM0KW-MAX-NBR-OCCURS;
      KM0KW01.KM0KW-INSERT-FLAG = "N";
    end

    KM0KW01.KM0KW-COUNT = KM0KW01.KM0KW-COUNT + 1;
  end /* of while*/


  if (KM0KW01.KM0KW-INSERT-FLAG == "Y") /* need an empty page added*/
    KM0K-330(); /* save page with updates*/
    set KM0KW04 empty;
    KM0KW01.KM0KW-MAX-PAGE = KM0KW01.KM0KW-MAX-PAGE + 1; /* page counter*/
    KM0KM100.KM0KM-MAX-PAGE = KM0KW01.KM0KW-MAX-PAGE;
    KM0K-170(); /* create empty temp storage*/
    KM0KW01.KM0KW-COUNT = 1;
    KM0K-180(); /* move kutrec to temp*/
  end

  KM0K-330(); /* rewrite temp storage*/

  KM0KW01.KM0KW-COUNT = KM0KW01.KM0KW-COUNT-2; /* reset cnt*/
  KM0KW01.KM0KW-PAGE-IDX = KM0KW01.KM0KW-PAGE-IDX2; /* reset page*/
  KM0K-210(); /* read temp storage*/


end // end KM0K-830


// ADD terms record
Function KM0K-835()
   /* *****************************/
   /* * km0k835 - ADD terms record*/
   /* *****************************/

  set SQLCA empty;

  KUTREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* stamp setup date*/


  call "IO0350" ("A ", SQLCA, KUTREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      converseLib.validationFailed(403); /* terms upt since last request msg*/
      KM0KW01.KM0KW-ERROR-FLAG = "Y"; /* set error msg*/
      KM0K-420(); /* refresh the screen*/
      return;
    else
      KM0KW01.KM0KW-SQL-DISPLAY = SQLCA.SQLCAREC; /* hold error sqlca*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      SQLCA.SQLCAREC = KM0KW01.KM0KW-SQL-DISPLAY;
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VTERMS01";
      TA1REC.TA1MAP = " ";
      KM0KW01.KM0KW-WORK-KEY = " ";
      KM0KW01.KM0KW-COMPANY-WK = KUTREC.KUCCOID;
      KM0KW01.KM0KW-DASH1-WK = "-";
      KM0KW01.KM0KW-STORE-WK = KUTREC.KUMSTRID;
      KM0KW01.KM0KW-DASH2-WK = "-";
      KM0KW01.KM0KW-DEPT-ID-WK = KUTREC.XNXCD;
      KM0KW01.KM0KW-DASH3-WK = "-";
      KM0KW01.KM0KW-GPC-CD-WK = KUTREC.XGPCD;
      TA1REC.TA1TBLKE = KM0KW01.KM0KW-WORK-KEY;
      TA1REC.TA1PGMNM = "KM0K835";
      TA1REC.TA1LOC = "ADD    DB2 DCUST.VTERMS01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end


end // end KM0K-835


// process ADD rec using UPDT
Function KM0K-840()
   /* ************************************/
   /* * km0k840 - process Add rec w/UPDT*/
   /* ************************************/

   /* convert csp time/date format to db2 time/date stamp format*/
  XX0XS01();


   /* ****************************/
   /* prepare before look audit*/
   /* ****************************/

  set KUZREC empty;
  KUZREC.KUZTYPE = "C"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = "B"; /* blank-add, b-before, a-after*/
  KM0K-820(); /* add audit before image for terms*/


   /* if occurs = 3, roll off first occurance and add new one*/
  if (KM0KW01.KM0KW-OCCURS-IND == 3)
    KM0K-845(); /* move 2 to 1 & 3 to 2 & clear 3*/
    KM0KW01.KM0KW-OCCURS-IND = 2;
  end


  KM0KW01.KM0KW-OCCURS-IND = KM0KW01.KM0KW-OCCURS-IND + 1;

  KM0K-810(); /* move map to kut & temp*/

  KM0K-825(); /* update temp storage*/

  KM0K-850(); /* update terms*/


   /* ****************************/
   /* format after look audit*/
   /* ****************************/

  set KUZREC empty;
  KUZREC.KUZTYPE = "C"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = "A"; /* blank-add, b-before, a-after*/
  KM0K-820(); /* write audit trail after image*/

end // end KM0K-840


// roll off oldest term
Function KM0K-845()
   /* ************************************/
   /* * km0k845 - roll off oldest term*/
   /* ************************************/

   /* move TWO to ONE*/
  KUTREC.KUTENDT[1] = KUTREC.KUTENDT[2];
  KUTREC.KUTXNDT[1] = KUTREC.KUTXNDT[2];
  KUTREC.XPTCD[1] = KUTREC.XPTCD[2]; /* terms*/
  KUTREC.XCPCD[1] = KUTREC.XCPCD[2]; /* co-op*/
  KUTREC.XAACD[1] = KUTREC.XAACD[2]; /* ad allow.*/
  KUTREC.KUTAPOF[1] = KUTREC.KUTAPOF[2]; /* ad face*/
  KUTREC.KUTAPBK[1] = KUTREC.KUTAPBK[2]; /* ad bank*/
  KUTREC.KUTAANET[1] = KUTREC.KUTAANET[2]; /* ad net*/
  KUTREC.KUTAAFCG[1] = KUTREC.KUTAAFCG[2]; /* ad f chg*/
  KUTREC.KUTAAFCN[1] = KUTREC.KUTAAFCN[2]; /* ad f c n*/
  KUTREC.XTDCD[1] = KUTREC.XTDCD[2]; /* trade disc*/
  KUTREC.KUTTDPOF[1] = KUTREC.KUTTDPOF[2]; /* face*/
  KUTREC.KUTTDPBK[1] = KUTREC.KUTTDPBK[2]; /* bank*/
  KUTREC.KUTTDNET[1] = KUTREC.KUTTDNET[2]; /* t/d net*/
  KUTREC.KUTTDSPN[1] = KUTREC.KUTTDSPN[2]; /* t/d s p*/
  KUTREC.KUTTDDSN[1] = KUTREC.KUTTDDSN[2]; /* t/d dsn*/
  KUTREC.XDACD[1] = KUTREC.XDACD[2]; /* defect*/
  KUTREC.KUTDABK[1] = KUTREC.KUTDABK[2]; /* def bank*/
  KUTREC.KUTDAOF[1] = KUTREC.KUTDAOF[2]; /* def face*/
  KUTREC.KUTDANET[1] = KUTREC.KUTDANET[2]; /* def net*/
  KUTREC.KUTDAHCN[1] = KUTREC.KUTDAHCN[2]; /* def hnd*/


   /* move THREE to TWO*/
  KUTREC.KUTENDT[2] = KUTREC.KUTENDT[3];
  KUTREC.KUTXNDT[2] = KUTREC.KUTXNDT[3];
  KUTREC.XPTCD[2] = KUTREC.XPTCD[3]; /* terms*/
  KUTREC.XCPCD[2] = KUTREC.XCPCD[3]; /* co-op*/
  KUTREC.XAACD[2] = KUTREC.XAACD[3]; /* ad allow.*/
  KUTREC.KUTAPOF[2] = KUTREC.KUTAPOF[3]; /* ad face*/
  KUTREC.KUTAPBK[2] = KUTREC.KUTAPBK[3]; /* ad bank*/
  KUTREC.KUTAANET[2] = KUTREC.KUTAANET[3]; /* ad net*/
  KUTREC.KUTAAFCG[2] = KUTREC.KUTAAFCG[3]; /* ad f chg*/
  KUTREC.KUTAAFCN[2] = KUTREC.KUTAAFCN[3]; /* ad f c n*/
  KUTREC.XTDCD[2] = KUTREC.XTDCD[3]; /* trade disc*/
  KUTREC.KUTTDPOF[2] = KUTREC.KUTTDPOF[3]; /* face*/
  KUTREC.KUTTDPBK[2] = KUTREC.KUTTDPBK[3]; /* bank*/
  KUTREC.KUTTDNET[2] = KUTREC.KUTTDNET[3]; /* t/d net*/
  KUTREC.KUTTDSPN[2] = KUTREC.KUTTDSPN[3]; /* t/d s p*/
  KUTREC.KUTTDDSN[2] = KUTREC.KUTTDDSN[3]; /* t/d dsn*/
  KUTREC.XDACD[2] = KUTREC.XDACD[3]; /* defect*/
  KUTREC.KUTDABK[2] = KUTREC.KUTDABK[3]; /* def bank*/
  KUTREC.KUTDAOF[2] = KUTREC.KUTDAOF[3]; /* def face*/
  KUTREC.KUTDANET[2] = KUTREC.KUTDANET[3]; /* def net*/
  KUTREC.KUTDAHCN[2] = KUTREC.KUTDAHCN[3]; /* def hnd*/


   /* clear out terms THREE*/
  KUTREC.KUTENDT[3] = 0;
  KUTREC.KUTXNDT[3] = 0;
  KUTREC.XPTCD[3] = " "; /* terms*/
  KUTREC.XCPCD[3] = " "; /* co-op*/
  KUTREC.XAACD[3] = " "; /* ad allow.*/
  KUTREC.KUTAPOF[3] = 0; /* ad face*/
  KUTREC.KUTAPBK[3] = 0; /* ad bank*/
  KUTREC.KUTAANET[3] = " "; /* ad net*/
  KUTREC.KUTAAFCG[3] = 0; /* ad f chg*/
  KUTREC.KUTAAFCN[3] = " "; /* ad f c n*/
  KUTREC.XTDCD[3] = " "; /* trade disc*/
  KUTREC.KUTTDPOF[3] = 0; /* face*/
  KUTREC.KUTTDPBK[3] = 0; /* bank*/
  KUTREC.KUTTDNET[3] = " "; /* t/d net*/
  KUTREC.KUTTDSPN[3] = " "; /* t/d s p*/
  KUTREC.KUTTDDSN[3] = " "; /* t/d dsn*/
  KUTREC.XDACD[3] = " "; /* defect*/
  KUTREC.KUTDABK[3] = 0; /* def bank*/
  KUTREC.KUTDAOF[3] = 0; /* def face*/
  KUTREC.KUTDANET[3] = " "; /* def net*/
  KUTREC.KUTDAHCN[3] = " "; /* def hnd*/

end // end KM0K-845


// UPDATE term record
Function KM0K-850()
   /* **********************************/
   /* * km0k850 - UPDATE terms record*/
   /* **********************************/

  set SQLCA empty;

  call "IO0350" ("U ", SQLCA, KUTREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      converseLib.validationFailed(403); /* terms upt since last request msg*/
      KM0KW01.KM0KW-ERROR-FLAG = "Y"; /* set error msg*/
      KM0K-420(); /* refresh the screen*/
      return;
    else
      KM0KW01.KM0KW-SQL-DISPLAY = SQLCA.SQLCAREC; /* hold error sqlca*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      SQLCA.SQLCAREC = KM0KW01.KM0KW-SQL-DISPLAY;
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VTERMS01";
      TA1REC.TA1MAP = " ";
      KM0KW01.KM0KW-WORK-KEY = " ";
      KM0KW01.KM0KW-COMPANY-WK = KUTREC.KUCCOID;
      KM0KW01.KM0KW-DASH1-WK = "-";
      KM0KW01.KM0KW-STORE-WK = KUTREC.KUMSTRID;
      KM0KW01.KM0KW-DASH2-WK = "-";
      KM0KW01.KM0KW-DEPT-ID-WK = KUTREC.XNXCD;
      KM0KW01.KM0KW-DASH3-WK = "-";
      KM0KW01.KM0KW-GPC-CD-WK = KUTREC.XGPCD;
      TA1REC.TA1TBLKE = KM0KW01.KM0KW-WORK-KEY;
      TA1REC.TA1PGMNM = "KM0K850";
      TA1REC.TA1LOC = "UPDATE DB2 DCUST.VTERMS01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end


end // end KM0K-850


// Handle DELETING term
Function KM0K-860()
   /* ************************************/
   /* * km0k860 - Handle Deleting terms*/
   /* ************************************/

  if (KM0KW01.KM0KW-OCCURS-IND == 1
   && KUTREC.KUTENDT[2] == 0
   && KUTREC.KUTENDT[3] == 0)
    KM0K-863(); /* update company terms indicator*/
                                  /* delete entire row*/
    KM0K-865();
  else
   /* clear out occurance*/
    KM0K-875();
  end

end // end KM0K-860


// Update Company Terms Ind
Function KM0K-863()

   /* *************************************************/
   /* * update flags on company*/
   /* * set both flags to since the last term is*/
   /* * being deleted.*/
   /* *************************************************/

  if (KM0KW01.KM0KW-FUT-FL == "Y")
    KM0KW01.KM0KW-FUT-FL = "N";
    if (KUCREC.KUCFTRTI == "Y")
      KUCREC.KUCFTRTI = "N";
      KM0K-815(); /* update company*/
    else
      /* next sentence*/
    end
  else

    if (KM0KW01.KM0KW-PROP-FL == "Y")
      KM0KW01.KM0KW-PROP-FL = "N";
      if (KUCREC.KUCPRPTI == "Y")
        KUCREC.KUCPRPTI = "N";
        KM0K-815(); /* update company*/
      else
        /* next sentence*/
      end
    else
      /* next sentence*/
    end

  end


end // end KM0K-863


// process DELETE term
Function KM0K-865()
   /* *********************************/
   /* * km0k865 - process DEL record*/
   /* *********************************/

   /* convert csp time/date format to db2 time/date stamp format*/
  XX0XS01();

   /* ****************************/
   /* prepare delete audit trail*/
   /* ****************************/

  set KUZREC empty;
  KUZREC.KUZTYPE = "D"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = " "; /* blank-add, b-before, a-after*/
  KM0K-820(); /* add audit image for terms01*/

  KM0K-330(); /* rewrite temp storage*/

  KM0K-870(); /* delete term*/


end // end KM0K-865


// DELETE term record
Function KM0K-870()
   /* ********************************/
   /* * km0k870 - DELETE terms record*/
   /* *********************************/

  set SQLCA empty;

  KUTREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* stamp setup date*/


  call "IO0350" ("D ", SQLCA, KUTREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      converseLib.validationFailed(403); /* terms upt since last request msg*/
      KM0KW01.KM0KW-ERROR-FLAG = "Y"; /* set error msg*/
      KM0K-420(); /* refresh the screen*/
      return;
    else
      KM0KW01.KM0KW-SQL-DISPLAY = SQLCA.SQLCAREC; /* hold error sqlca*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* syncpoint rollback*/
      SQLCA.SQLCAREC = KM0KW01.KM0KW-SQL-DISPLAY;
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VTERMS01";
      TA1REC.TA1MAP = " ";
      KM0KW01.KM0KW-WORK-KEY = " ";
      KM0KW01.KM0KW-COMPANY-WK = KUTREC.KUCCOID;
      KM0KW01.KM0KW-DASH1-WK = "-";
      KM0KW01.KM0KW-STORE-WK = KUTREC.KUMSTRID;
      KM0KW01.KM0KW-DASH2-WK = "-";
      KM0KW01.KM0KW-DEPT-ID-WK = KUTREC.XNXCD;
      KM0KW01.KM0KW-DASH3-WK = "-";
      KM0KW01.KM0KW-GPC-CD-WK = KUTREC.XGPCD;
      TA1REC.TA1TBLKE = KM0KW01.KM0KW-WORK-KEY;
      TA1REC.TA1PGMNM = "KM0K870";
      TA1REC.TA1LOC = "DELETE DB2 DCUST.VTERMS01";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
  end


end // end KM0K-870


// process DELETE rec using UPDT
Function KM0K-875()
   /* ************************************/
   /* * km0k875 - process Del rec w/Updt*/
   /* ************************************/

   /* convert csp time/date format to db2 time/date stamp format*/
  XX0XS01();


   /* ****************************/
   /* prepare before look audit*/
   /* ****************************/

  set KUZREC empty;
  KUZREC.KUZTYPE = "C"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = "B"; /* blank-add, b-before, a-after*/
  KM0K-820(); /* add audit before image for terms*/

   /* clear out terms*/
  if (KM0KW-OCCURS-IND == 3)
    KUTREC.KUTENDT[KM0KW-OCCURS-IND] = 0;
    KUTREC.KUTXNDT[KM0KW-OCCURS-IND] = 0;
    KUTREC.XPTCD[KM0KW-OCCURS-IND] = " "; /* terms*/
    KUTREC.XCPCD[KM0KW-OCCURS-IND] = " "; /* co-op*/
    KUTREC.XAACD[KM0KW-OCCURS-IND] = " "; /* ad allow.*/
    KUTREC.KUTAPOF[KM0KW-OCCURS-IND] = 0; /* ad face*/
    KUTREC.KUTAPBK[KM0KW-OCCURS-IND] = 0; /* ad bank*/
    KUTREC.KUTAANET[KM0KW-OCCURS-IND] = " "; /* ad net*/
    KUTREC.KUTAAFCG[KM0KW-OCCURS-IND] = 0; /* ad f chg*/
    KUTREC.KUTAAFCN[KM0KW-OCCURS-IND] = " "; /* ad f c n*/
    KUTREC.XTDCD[KM0KW-OCCURS-IND] = " "; /* trade disc*/
    KUTREC.KUTTDPOF[KM0KW-OCCURS-IND] = 0; /* face*/
    KUTREC.KUTTDPBK[KM0KW-OCCURS-IND] = 0; /* bank*/
    KUTREC.KUTTDNET[KM0KW-OCCURS-IND] = " "; /* t/d net*/
    KUTREC.KUTTDSPN[KM0KW-OCCURS-IND] = " "; /* t/d s p*/
    KUTREC.KUTTDDSN[KM0KW-OCCURS-IND] = " "; /* t/d dsn*/
    KUTREC.XDACD[KM0KW-OCCURS-IND] = " "; /* defect*/
    KUTREC.KUTDABK[KM0KW-OCCURS-IND] = 0; /* def bank*/
    KUTREC.KUTDAOF[KM0KW-OCCURS-IND] = 0; /* def face*/
    KUTREC.KUTDANET[KM0KW-OCCURS-IND] = " "; /* def net*/
    KUTREC.KUTDAHCN[KM0KW-OCCURS-IND] = " "; /* def hnd*/
  else
    if (KM0KW-OCCURS-IND == 2
    ) /* move term 3 to term 2.*/
      KUTREC.KUTENDT[2] = KUTREC.KUTENDT[3];
      KUTREC.KUTXNDT[2] = KUTREC.KUTXNDT[3];
      KUTREC.XPTCD[2] = KUTREC.XPTCD[3]; /* terms*/
      KUTREC.XCPCD[2] = KUTREC.XCPCD[3]; /* co-op*/
      KUTREC.XAACD[2] = KUTREC.XAACD[3]; /* ad allow.*/
      KUTREC.KUTAPOF[2] = KUTREC.KUTAPOF[3]; /* ad face*/
      KUTREC.KUTAPBK[2] = KUTREC.KUTAPBK[3]; /* ad bank*/
      KUTREC.KUTAANET[2] = KUTREC.KUTAANET[3]; /* ad net*/
      KUTREC.KUTAAFCG[2] = KUTREC.KUTAAFCG[3];
      KUTREC.KUTAAFCN[2] = KUTREC.KUTAAFCN[3]; /* ad f c n*/
      KUTREC.XTDCD[2] = KUTREC.XTDCD[3]; /* trade disc*/
      KUTREC.KUTTDPOF[2] = KUTREC.KUTTDPOF[3]; /* face*/
      KUTREC.KUTTDPBK[2] = KUTREC.KUTTDPBK[3]; /* bank*/
      KUTREC.KUTTDNET[2] = KUTREC.KUTTDNET[3]; /* t/d net*/
      KUTREC.KUTTDSPN[2] = KUTREC.KUTTDSPN[3]; /* t/d s p*/
      KUTREC.KUTTDDSN[2] = KUTREC.KUTTDDSN[3]; /* t/d dsn*/
      KUTREC.XDACD[2] = KUTREC.XDACD[3]; /* defect*/
      KUTREC.KUTDABK[2] = KUTREC.KUTDABK[3]; /* def bank*/
      KUTREC.KUTDAOF[2] = KUTREC.KUTDAOF[3]; /* def face*/
      KUTREC.KUTDANET[2] = KUTREC.KUTDANET[3]; /* def net*/
      KUTREC.KUTDAHCN[2] = KUTREC.KUTDAHCN[3]; /* def hnd*/
       /* then clear out term 3*/
      KUTREC.KUTENDT[3] = 0;
      KUTREC.KUTXNDT[3] = 0;
      KUTREC.XPTCD[3] = " "; /* terms*/
      KUTREC.XCPCD[3] = " "; /* co-op*/
      KUTREC.XAACD[3] = " "; /* ad allow.*/
      KUTREC.KUTAPOF[3] = 0; /* ad face*/
      KUTREC.KUTAPBK[3] = 0; /* ad bank*/
      KUTREC.KUTAANET[3] = " "; /* ad net*/
      KUTREC.KUTAAFCG[3] = 0; /* ad f chg*/
      KUTREC.KUTAAFCN[3] = " "; /* ad f c n*/
      KUTREC.XTDCD[3] = " "; /* trade disc*/
      KUTREC.KUTTDPOF[3] = 0; /* face*/
      KUTREC.KUTTDPBK[3] = 0; /* bank*/
      KUTREC.KUTTDNET[3] = " "; /* t/d net*/
      KUTREC.KUTTDSPN[3] = " "; /* t/d s p*/
      KUTREC.KUTTDDSN[3] = " "; /* t/d dsn*/
      KUTREC.XDACD[3] = " "; /* defect*/
      KUTREC.KUTDABK[3] = 0; /* def bank*/
      KUTREC.KUTDAOF[3] = 0; /* def face*/
      KUTREC.KUTDANET[3] = " "; /* def net*/
      KUTREC.KUTDAHCN[3] = " "; /* def hnd*/
    else
       /* move term 2 to term 1.*/
      KUTREC.KUTENDT[1] = KUTREC.KUTENDT[2];
      KUTREC.KUTXNDT[1] = KUTREC.KUTXNDT[2];
      KUTREC.XPTCD[1] = KUTREC.XPTCD[2]; /* terms*/
      KUTREC.XCPCD[1] = KUTREC.XCPCD[2]; /* co-op*/
      KUTREC.XAACD[1] = KUTREC.XAACD[2]; /* ad allow.*/
      KUTREC.KUTAPOF[1] = KUTREC.KUTAPOF[2]; /* ad face*/
      KUTREC.KUTAPBK[1] = KUTREC.KUTAPBK[2]; /* ad bank*/
      KUTREC.KUTAANET[1] = KUTREC.KUTAANET[2]; /* ad net*/
      KUTREC.KUTAAFCG[1] = KUTREC.KUTAAFCG[2];
      KUTREC.KUTAAFCN[1] = KUTREC.KUTAAFCN[2]; /* ad f c n*/
      KUTREC.XTDCD[1] = KUTREC.XTDCD[2]; /* trade disc*/
      KUTREC.KUTTDPOF[1] = KUTREC.KUTTDPOF[2]; /* face*/
      KUTREC.KUTTDPBK[1] = KUTREC.KUTTDPBK[2]; /* bank*/
      KUTREC.KUTTDNET[1] = KUTREC.KUTTDNET[2]; /* t/d net*/
      KUTREC.KUTTDSPN[1] = KUTREC.KUTTDSPN[2]; /* t/d s p*/
      KUTREC.KUTTDDSN[1] = KUTREC.KUTTDDSN[2]; /* t/d dsn*/
      KUTREC.XDACD[1] = KUTREC.XDACD[2]; /* defect*/
      KUTREC.KUTDABK[1] = KUTREC.KUTDABK[2]; /* def bank*/
      KUTREC.KUTDAOF[1] = KUTREC.KUTDAOF[2]; /* def face*/
      KUTREC.KUTDANET[1] = KUTREC.KUTDANET[2]; /* def net*/
      KUTREC.KUTDAHCN[1] = KUTREC.KUTDAHCN[2]; /* def hnd*/
       /* move term 3 to term 2.*/
      KUTREC.KUTENDT[2] = KUTREC.KUTENDT[3];
      KUTREC.KUTXNDT[2] = KUTREC.KUTXNDT[3];
      KUTREC.XPTCD[2] = KUTREC.XPTCD[3]; /* terms*/
      KUTREC.XCPCD[2] = KUTREC.XCPCD[3]; /* co-op*/
      KUTREC.XAACD[2] = KUTREC.XAACD[3]; /* ad allow.*/
      KUTREC.KUTAPOF[2] = KUTREC.KUTAPOF[3]; /* ad face*/
      KUTREC.KUTAPBK[2] = KUTREC.KUTAPBK[3]; /* ad bank*/
      KUTREC.KUTAANET[2] = KUTREC.KUTAANET[3]; /* ad net*/
      KUTREC.KUTAAFCG[2] = KUTREC.KUTAAFCG[3];
      KUTREC.KUTAAFCN[2] = KUTREC.KUTAAFCN[3]; /* ad f c n*/
      KUTREC.XTDCD[2] = KUTREC.XTDCD[3]; /* trade disc*/
      KUTREC.KUTTDPOF[2] = KUTREC.KUTTDPOF[3]; /* face*/
      KUTREC.KUTTDPBK[2] = KUTREC.KUTTDPBK[3]; /* bank*/
      KUTREC.KUTTDNET[2] = KUTREC.KUTTDNET[3]; /* t/d net*/
      KUTREC.KUTTDSPN[2] = KUTREC.KUTTDSPN[3]; /* t/d s p*/
      KUTREC.KUTTDDSN[2] = KUTREC.KUTTDDSN[3]; /* t/d dsn*/
      KUTREC.XDACD[2] = KUTREC.XDACD[3]; /* defect*/
      KUTREC.KUTDABK[2] = KUTREC.KUTDABK[3]; /* def bank*/
      KUTREC.KUTDAOF[2] = KUTREC.KUTDAOF[3]; /* def face*/
      KUTREC.KUTDANET[2] = KUTREC.KUTDANET[3]; /* def net*/
      KUTREC.KUTDAHCN[2] = KUTREC.KUTDAHCN[3]; /* def hnd*/
       /* then clear out term 3*/
      KUTREC.KUTENDT[3] = 0;
      KUTREC.KUTXNDT[3] = 0;
      KUTREC.XPTCD[3] = " "; /* terms*/
      KUTREC.XCPCD[3] = " "; /* co-op*/
      KUTREC.XAACD[3] = " "; /* ad allow.*/
      KUTREC.KUTAPOF[3] = 0; /* ad face*/
      KUTREC.KUTAPBK[3] = 0; /* ad bank*/
      KUTREC.KUTAANET[3] = " "; /* ad net*/
      KUTREC.KUTAAFCG[3] = 0; /* ad f chg*/
      KUTREC.KUTAAFCN[3] = " "; /* ad f c n*/
      KUTREC.XTDCD[3] = " "; /* trade disc*/
      KUTREC.KUTTDPOF[3] = 0; /* face*/
      KUTREC.KUTTDPBK[3] = 0; /* bank*/
      KUTREC.KUTTDNET[3] = " "; /* t/d net*/
      KUTREC.KUTTDSPN[3] = " "; /* t/d s p*/
      KUTREC.KUTTDDSN[3] = " "; /* t/d dsn*/
      KUTREC.XDACD[3] = " "; /* defect*/
      KUTREC.KUTDABK[3] = 0; /* def bank*/
      KUTREC.KUTDAOF[3] = 0; /* def face*/
      KUTREC.KUTDANET[3] = " "; /* def net*/
      KUTREC.KUTDAHCN[3] = " "; /* def hnd*/
    end
  end

  KUTREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* stamp chg date*/
  KUTREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* stamp chg time*/


  KM0K-850(); /* update terms*/


   /* ****************************/
   /* format after look audit*/
   /* ****************************/

  set KUZREC empty;
  KUZREC.KUZTYPE = "C"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = "A"; /* blank-add, b-before, a-after*/
  KM0K-820(); /* write audit trail after image*/


end // end KM0K-875


// Handle REPLACING term
Function KM0K-880()
   /* ************************************/
   /* * km0k880 - Handle Replace record*/
   /* ************************************/

   /* convert csp time/date format to db2 time/date stamp format*/
  XX0XS01();


   /* ****************************/
   /* prepare before look audit*/
   /* ****************************/

  set KUZREC empty;
  KUZREC.KUZTYPE = "C"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = "B"; /* blank-add, b-before, a-after*/
  KM0K-820(); /* add audit before image for terms*/


   /* if occurs = 3, roll off first occurance and add new one*/
  if (KM0KW01.KM0KW-OCCURS-IND == 3)
    KM0K-845(); /* move 2 to 1 & 3 to 2 & clear 3*/
    KM0KW01.KM0KW-OCCURS-IND = 2;
  end


  KM0KW01.KM0KW-EFF-DATE = 0;
  KM0KW01.KM0KW-EFF-YY = KM0KM200.KM0KM-EFF-YY; /* eff. date*/
  KM0KW01.KM0KW-EFF-MM = KM0KM200.KM0KM-EFF-MM;
  KM0KW01.KM0KW-EFF-DD = KM0KM200.KM0KM-EFF-DD;
  if (KM0KW01.KM0KW-EFF-YY > 90)
    KM0KW01.KM0KW-EFF-CC = 19;
  else
    KM0KW01.KM0KW-EFF-CC = 20;
  end

  KM0K-885(); /* get effective date - 1*/

  KM0K-330(); /* update temp storage*/


  KM0KW01.KM0KW-OCCURS-IND = KM0KW01.KM0KW-OCCURS-IND + 1;

  KM0K-810(); /* move map to kut & temp*/

  KM0K-825(); /* update temp storage*/

  KM0K-850(); /* update terms*/


   /* ****************************/
   /* format after look audit*/
   /* ****************************/

  set KUZREC empty;
  KUZREC.KUZTYPE = "C"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = "A"; /* blank-add, b-before, a-after*/
  KM0K-820(); /* write audit trail after image*/

end // end KM0K-880


// get effective date - 1
Function KM0K-885()
   /* ************************************/
   /* * km0k885 - get effective date - 1*/
   /* ************************************/

  set TA2REC empty;
  TA2REC.TA2GRGGN = KM0KW01.KM0KW-EFF-DATE; /* (old eff date - 1)*/

  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2DYAOD = -1;

  call "TA0040" (TA2REC) {isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    KUTREC.KUTXNDT[KM0KW-OCCURS-IND] = TA2REC.TA2GRGGN;
    KM0KW04.KUTXNDT[KM0KW-COUNT] = TA2REC.TA2GRGGN;
  else
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "KM0K885";
    TA1REC.TA1LOC = "SUBTRACTING DATES ";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBTBL = " ";
    TA1REC.TA1TBLKE = TA2REC.TA2RTNCD;
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end


end // end KM0K-885


// Handle CHANGING term
Function KM0K-890()
   /* ************************************/
   /* * km0k890 - Handle Change record*/
   /* ************************************/

   /* convert csp time/date format to db2 time/date stamp format*/
  XX0XS01();


   /* ****************************/
   /* prepare before look audit*/
   /* ****************************/

  set KUZREC empty;
  KUZREC.KUZTYPE = "C"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = "B"; /* blank-add, b-before, a-after*/
  KM0K-820(); /* add audit before image for terms*/

  KM0K-810(); /* format terms general data update*/

  KM0K-825(); /* update temp storage*/

  KM0K-850(); /* update terms*/


   /* ****************************/
   /* format after look audit*/
   /* ****************************/

  set KUZREC empty;
  KUZREC.KUZTYPE = "C"; /* a-add,c-change,d-delete,i-inactivate*/
  KUZREC.KUZBFCD = "A"; /* blank-add, b-before, a-after*/
  KM0K-820(); /* write audit trail after image*/


end // end KM0K-890


// converse xbctbl pop up window
Function XPXAA01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XAATBL.XAACD[XX0XWCT1] != "99") /* Or end of data*/
        if (XAATBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XAATBL.XAACD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XAATBL.XAADESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XAATBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XAATBL.XAACD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XAATBL.XAADESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XAATBL.XAACD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXAA01


// converse xbctbl pop up window
Function XPXCP01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XCPTBL.XCPCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XCPTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XCPTBL.XCPCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XCPTBL.XCPDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XCPTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XCPTBL.XCPCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XCPTBL.XCPDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XCPTBL.XCPCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXCP01


// converse xbctbl pop up window
Function XPXDA01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XDATBL.XDACD[XX0XWCT1] != "99") /* Or end of data*/
        if (XDATBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XDATBL.XDACD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XDATBL.XDADESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XDATBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XDATBL.XDACD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XDATBL.XDADESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XDATBL.XDACD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXDA01


// converse xbctbl pop up window
Function XPXTD01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XTDTBL.XTDCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XTDTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XTDTBL.XTDCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XTDTBL.XTDDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XTDTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XTDTBL.XTDCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XTDTBL.XTDDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XTDTBL.XTDCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPXTD01


//*** RECORD=KM0KW01 ****
// this record contains work fields used entirely within km06.
// ***********************
Record KM0KW01 type basicRecord
  10 KM0KW-TS-SIZE KM0KW-TS-SIZE ; 
  10 KM0KW-MAX-NBR-OCCURS KM0KW-MAX-NBR-OCCURS ; 
  10 KM0KW-CURRENT-PAGE KM0KW-CURRENT-PAGE ; 
  10 KM0KW-MAX-PAGE KM0KW-MAX-PAGE ; 
  10 KM0KW-PAGE-IDX KM0KW-PAGE-IDX ; 
  10 KM0KW-PAGE-IDX2 KM0KW-PAGE-IDX2 ; 
  10 KM0KW-OCCURS-IND KM0KW-OCCURS-IND ; 
  10 KM0KW-COUNT KM0KW-COUNT ; 
  10 KM0KW-COUNT-2 KM0KW-COUNT-2 ; 
  10 KM0KW-END-FLAG KM0KW-END-FLAG ; 
  10 KM0KW-TERMS-FOUND KM0KW-TERMS-FOUND ; 
  10 KM0KW-INSERT-FLAG KM0KW-INSERT-FLAG ; 
  10 KM0KW-DONE-FLAG KM0KW-DONE-FLAG ; 
  10 KM0KW-CHG-FLAG KM0KW-CHG-FLAG ; 
  10 KM0KW-CAUSERA KM0KW-CAUSERA ; 
    15 KM0KW-CAUSERA-COMP KM0KW-CAUSERA-COMP ; 
      20 KM0KW-CA-COMP-CHAR KM0KW-CA-COMP-CHAR ; 
    15 KM0KW-CAUSERA-STORE KM0KW-CAUSERA-STORE ; 
      20 KM0KW-CA-STORE-CHAR KM0KW-CA-STORE-CHAR ; 
    15 KM0KW-CAUSERA-DEPT KM0KW-CAUSERA-DEPT ; 
      20 KM0KW-CA-DEPT-CHAR KM0KW-CA-DEPT-CHAR ; 
    15 KM0KW-CAUSERA-GPC KM0KW-CAUSERA-GPC ; 
    15 * char(9) ; 
  10 KM0KW-WORK-KEY KM0KW-WORK-KEY ; 
    15 KM0KW-COMPANY-WK KM0KW-COMPANY-WK ; 
    15 KM0KW-DASH1-WK KM0KW-DASH1-WK ; 
    15 KM0KW-STORE-WK KM0KW-STORE-WK ; 
    15 KM0KW-DASH2-WK KM0KW-DASH2-WK ; 
    15 KM0KW-DEPT-ID-WK KM0KW-DEPT-ID-WK ; 
    15 KM0KW-DASH3-WK KM0KW-DASH3-WK ; 
    15 KM0KW-GPC-CD-WK KM0KW-GPC-CD-WK ; 
    15 KM0KW-DASH4-WK KM0KW-DASH4-WK ; 
    15 KM0KW-XOT-CD-WK KM0KW-XOT-CD-WK ; 
  10 * char(3) ; 
  10 KM0KW-COMPANY KM0KW-COMPANY ; 
  10 KM0KW-STORE KM0KW-STORE ; 
  10 KM0KW-DEPT-ID KM0KW-DEPT-ID ; 
  10 KM0KW-GPC-CD KM0KW-GPC-CD ; 
  10 KM0KW-XOT-CD KM0KW-XOT-CD ; 
  10 KM0KW-ACTIVE-IND KM0KW-ACTIVE-IND ; 
  10 KM0KW-ERROR-FLAG KM0KW-ERROR-FLAG ; 
  10 KM0KW-PERCENT KM0KW-PERCENT ; 
  10 KM0KW-DATE-BREAKDOWN KM0KW-DATE-BREAKDOWN ; 
    15 KM0KW-DT-CC KM0KW-DT-CC ; 
    15 KM0KW-DT-YY KM0KW-DT-YY ; 
    15 KM0KW-DT-MM KM0KW-DT-MM ; 
    15 KM0KW-DT-DD KM0KW-DT-DD ; 
  10 KM0KW-FORMATT-DATE KM0KW-FORMATT-DATE ; 
    15 KM0KW-F-MONTH KM0KW-F-MONTH ; 
    15 KM0KW-F-SLASH-1 KM0KW-F-SLASH-1 ; 
    15 KM0KW-F-DAY KM0KW-F-DAY ; 
    15 KM0KW-F-SLASH-2 KM0KW-F-SLASH-2 ; 
    15 KM0KW-F-YEAR KM0KW-F-YEAR ; 
  10 KM0KW-SQL-DISPLAY KM0KW-SQL-DISPLAY ; 
  10 XATCD XATCD ; 
  10 KM0KW-EXP-DATE KM0KW-EXP-DATE ; 
    15 KM0KW-EXP-CC KM0KW-EXP-CC ; 
    15 KM0KW-EXP-YY KM0KW-EXP-YY ; 
    15 KM0KW-EXP-MM KM0KW-EXP-MM ; 
    15 KM0KW-EXP-DD KM0KW-EXP-DD ; 
  10 KM0KW-EFF-DATE KM0KW-EFF-DATE ; 
    15 KM0KW-EFF-CC KM0KW-EFF-CC ; 
    15 KM0KW-EFF-YY KM0KW-EFF-YY ; 
    15 KM0KW-EFF-MM KM0KW-EFF-MM ; 
    15 KM0KW-EFF-DD KM0KW-EFF-DD ; 
  10 KM0KW-PROP-FL KM0KW-PROP-FL ; 
  10 KM0KW-FUT-FL KM0KW-FUT-FL ; 
  10 KM0KW-SCRN-DATA KM0KW-SCRN-DATA ; 
    15 KUCCOID KUCCOID ; 
    15 KM0KW-STORE-SELECT KM0KW-STORE-SELECT ; 
      20 KM0KW-KUMSTRID num(4) ; // CU_STOR_ID
    15 KM0KW-DEPT-SELECT KM0KW-DEPT-SELECT ; 
      20 KM0KW-XNXCD KM0KW-XNXCD ; 
    15 XGPCD XGPCD ; 
    15 KM0KW-XOT-SELECT KM0KW-XOT-SELECT ; 
  10 KM0KW-MODIFIED-FL KM0KW-MODIFIED-FL ; 
  10 KM0KW-XLE-SECURITY KM0KW-XLE-SECURITY ; 
end // end KM0KW01


//*** RECORD=KM0KW02 ****
// working storage record for parm to ta0050 (temp storage)
// ***********************
Record KM0KW02 type basicRecord
  10 KM0KW-TS-APPL-NAME KM0KW-TS-APPL-NAME ; 
  10 KM0KW-TS-COUNT KM0KW-TS-COUNT ; 
  10 KM0KW-TS-FUNCTN-CD KM0KW-TS-FUNCTN-CD ; 
  10 KM0KW-TS-RTN-CD KM0KW-TS-RTN-CD ; 
end // end KM0KW02


//*** RECORD=KM0KW04 ****
// working storage rec for editing against the screen
// ;
// the following fields (KG0CW01) are used for processing
//  1) KG0CWRIN - misc looping thru the table
//  2) KG0CWRMR - last full position on the table
//  3) KG0CWRIX - last rep on the screen
//  4) KG0CWRCT - counter used to match the screen counter
//                of KG0CWCNT
//  5) KG0CWRPL - holding field when replacing a rep with a
// new rep
// ;
// ***********************
Record KM0KW04 type basicRecord
  3 KM0KW-04-GROUP KM0KW-04-GROUP ; 
    10 KM0KW-04-LENGTH KM0KW-04-LENGTH ; 
    10 KM0KW-GROUP-04 KM0KW-GROUP-04 [10] ; 
      15 KM0KW-SELECT-IND KM0KW-SELECT-IND ; 
      15 KUMSTRID KUMSTRID ; 
      15 XNXCD XNXCD ; 
      15 XGPCD XGPCD ; 
      15 XOTCD XOTCD ; 
      15 KUTENDT KUTENDT ; 
      15 KUTXNDT KUTXNDT ; 
      15 XPTCD XPTCD ; 
      15 XCPCD XCPCD ; 
      15 XAACD XAACD ; 
      15 XTDCD XTDCD ; 
      15 XDACD XDACD ; 
end // end KM0KW04


// group level for w04
DataItem KM0KW-04-GROUP char(274)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// RECORD LENGTH
DataItem KM0KW-04-LENGTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// work key
DataItem KM0KW-ACTIVE-IND char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


//   company number
DataItem KM0KW-CA-COMP-CHAR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


//   dept number
DataItem KM0KW-CA-DEPT-CHAR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


//   dept number
DataItem KM0KW-CA-STORE-CHAR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// reformat area for causera
DataItem KM0KW-CAUSERA char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


//   company number
DataItem KM0KW-CAUSERA-COMP num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


//   dept number
DataItem KM0KW-CAUSERA-DEPT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


//   dept number
DataItem KM0KW-CAUSERA-GPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


//   dept number
DataItem KM0KW-CAUSERA-STORE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// rewrite temp storage
DataItem KM0KW-CHG-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// current company id
DataItem KM0KW-COMPANY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// current company id
DataItem KM0KW-COMPANY-WK num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// screen detail counter
DataItem KM0KW-COUNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// save screen detail counter
DataItem KM0KW-COUNT-2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// page counter
DataItem KM0KW-CURRENT-PAGE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


DataItem KM0KW-DASH1-WK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem KM0KW-DASH2-WK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem KM0KW-DASH3-WK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem KM0KW-DASH4-WK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// ws date break down
DataItem KM0KW-DATE-BREAKDOWN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// current dept id
DataItem KM0KW-DEPT-ID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// current dept id
DataItem KM0KW-DEPT-ID-WK num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


DataItem KM0KW-DEPT-SELECT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// second scrn done flag
DataItem KM0KW-DONE-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// ws century
DataItem KM0KW-DT-CC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// ws day
DataItem KM0KW-DT-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// ws month
DataItem KM0KW-DT-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// ws year
DataItem KM0KW-DT-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// effective century
DataItem KM0KW-EFF-CC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// effective date
DataItem KM0KW-EFF-DATE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// effective day
DataItem KM0KW-EFF-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// effective month
DataItem KM0KW-EFF-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// effective year
DataItem KM0KW-EFF-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// end of cusku flag
DataItem KM0KW-END-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// error flag
DataItem KM0KW-ERROR-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// expiration century
DataItem KM0KW-EXP-CC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// expiration date
DataItem KM0KW-EXP-DATE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// expiration day
DataItem KM0KW-EXP-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// expiration month
DataItem KM0KW-EXP-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// expiration year
DataItem KM0KW-EXP-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// ws month
DataItem KM0KW-F-DAY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// ws century
DataItem KM0KW-F-MONTH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// ws year
DataItem KM0KW-F-SLASH-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// ws year
DataItem KM0KW-F-SLASH-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// ws day
DataItem KM0KW-F-YEAR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// ws date break down
DataItem KM0KW-FORMATT-DATE char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// future order type
DataItem KM0KW-FUT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// current gpc id
DataItem KM0KW-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// current gpc id
DataItem KM0KW-GPC-CD-WK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// grp level for w04
DataItem KM0KW-GROUP-04 char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// add empty page flag
DataItem KM0KW-INSERT-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// max nbr of occurances
DataItem KM0KW-MAX-NBR-OCCURS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// total nbr of pages
DataItem KM0KW-MAX-PAGE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


DataItem KM0KW-MODIFIED-FL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// occurs for kutrec
DataItem KM0KW-OCCURS-IND num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// temp storage index
DataItem KM0KW-PAGE-IDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KM0KW-PAGE-IDX2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work pct accumulator
DataItem KM0KW-PERCENT num(6,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// prop order type
DataItem KM0KW-PROP-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// save area
DataItem KM0KW-SCRN-DATA char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// select second scrn
DataItem KM0KW-SELECT-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// save area for sqlca/reset
DataItem KM0KW-SQL-DISPLAY char(136)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// current store id
DataItem KM0KW-STORE char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem KM0KW-STORE-SELECT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// current store id
DataItem KM0KW-STORE-WK num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// terms found flag
DataItem KM0KW-TERMS-FOUND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// application
DataItem KM0KW-TS-APPL-NAME char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// count
DataItem KM0KW-TS-COUNT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// function
DataItem KM0KW-TS-FUNCTN-CD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// return code
DataItem KM0KW-TS-RTN-CD num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// size of temp storage
DataItem KM0KW-TS-SIZE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// work key
DataItem KM0KW-WORK-KEY char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// update/inquiry flag
DataItem KM0KW-XLE-SECURITY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// XNX_DEPT_ID_XREF
DataItem KM0KW-XNXCD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end


// current xot cd
DataItem KM0KW-XOT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// current xot cd
DataItem KM0KW-XOT-CD-WK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem KM0KW-XOT-SELECT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


