package km0w;

import corpcom2.XX0XW01;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.*;
import corpcom6.SQLCA;
import corpcom7.XXXADDR1;
import corpcom7.XXXADDR2;
import corpcom7.XXXADDR3;
import corpcom7.XXXSTAT;
import corpx1.XACCD;
import corpx1.XACTBL;
import corpx1.XAUCD;
import corpx1.XAUTBL;
import corpx1.XCCCD;
import corpx1.XCCTBL;
import corpx1.XCETBL;
import corpx1.XCFCD;
import corpx1.XCFTBL;
import corpx1.XCTCD;
import corpx1.XCUCD;
import corpx1.XCUTBL;
import corpx1.XGACD;
import corpx1.XGATBL;
import corpx1.XGPCD;
import corpx1.XGPTBL;
import corpx1.XIDCD;
import corpx1.XIDTBL;
import corpx1.XLCCD;
import corpx1.XLCTBL;
import corpx1.XNDTBL;
import corpx1.XNITBL;
import corpx1.XOTTBL;
import corpx1.XQATBL;
import corpx1.XSGTBL;
import corpx1.XSPTBL;
import corpx1.XWHTBL;
import corpx2.XNDCD;
import corpx2.XNXCD;
import corpx2.XQACD;
import corpx2.XSGCD;
import corpx2.XSPCD;
import corpx2.XSTCD;
import corpx2.XWHCD;
import corpx2.XXXCITY;
import corpx2.XXXUSRID;
import corpx2.XXXZIP;
import corpy2.YSVCD;
import corpy2.YSVTBL;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import ku.common.KUCCOID;
import ku.common.KUCCONM;
import ku.common.KUCCRLEX;
import ku.common.KUCGRPID;
import ku.common.KUCIDIND;
import ku.common.KUCNSCNT;
import ku.common.KUCSSCNT;
import ku.common.KUGRPEDT;
import ku.common.KUMSTRID;
import ku.common.KUMSTRNM;
import ku.common.KUMXNIAP;
import ku.common.KUMXNIFT;
import ku.common.KUNBOCD;
import ku.common.KUNBOQTY;
import ku.common.KUNCAFL;
import ku.common.KUNNOSFL;
import ku.common.KUNSPCD;
import ku.common.KUQSINST;
import ku.common.KUSTEXT1;
import ku.common.KUSTEXT2;
import ku.common.KUWREC;
import ku.common.KUYREC;
import sm.common.SM1AGYID;
import sm.common.SM4REPID;
import ta.common.TA1REC;
import xa.common.XA0AW02;
//*** PROGRAM=KM0W ****
// this application sends request records to a vsam file.
// these are requests for global maintenance on the customer
// master.  the maintenance will be performed later in a batch
// job.
// 
// maintenance log:
// date     name      desc
// 8/27/87  c ross    added company status and store status
// 7/06/88  c trouw   added several new fields at various lvls
// 11/18/88 j wood    added noncsp opt to calls
// 11/18/88 j wood    added xssegtr logic
// 01/30/89 c trouw   changed spcl inst, dflt whse,
//                    added call class
// 03/14/89 c trouw   replaced sic code with store class code
// 04/14/89 c trouw   removed sales service reps
// 04/26/89 c trouw   removed order type and small order charge
// 05/15/89 c trouw   database changes
// 01/17/90 j fiat    database changes
// 03/16/90 dsalzw    changed some names as part of multiple
//                    rep changes
// 03/29/90 dsalzw    database changes
// 06/12/90 dsalzw    replaced xcuttlcd with xcurmgr
// 12/10/90 dsalzw    fix problem with xce table
// 12/12/90 dsalzw    autoskip po req & aloc fields at vcust001
//                    level because moved to vcmpny01
// 02/04/91 dsalzw    database changes
// 02/26/91 t watson  autoskip vend auth  fields at m050
//                    level because moved to vcmpny01
// 03/15/91 t watson  autoskip inv dist fields on map040
// 04/15/91 t watson  autoskip call class fields
// 04/15/91 t watson  autoskip credit hold indicator
// 05/10/91 dsalzw    autoskip changing store address, messed
//                    short city on store; users said ok
// 05/16/91 dsalzw    change pf3 to use from appl
// 06/10/91 dsalzw    database changes
// 06/19/91 dsalzw    remove xci table - deinstalled
// 07/25/91 dsalzw    fix map attributes
// 04/17/92 CHELLM    DB2 changes Renamed sm5stat to xxxstat
// 10/16/92 CHELLM    DB2 changes Removed sm5rec, not used.
// 10/01/93 CHELLM    CSP 4.1 Conversion.
// 03/11/94 CHELLM    DB2 CHANGES. CORRECT XA0AW02 REFERENCE.
// 04/18/94 CHELLM    Added edit to give NIL users access to
//                    option 6, Store Option.
// 04/10/95 CHELLM    Added edit to prevent NikeCanada use.
// *Y2KFIX   12/08/97  DKENNY  Y2K MODIFICATIONS MADE TO:
// *                   KM0WS14, KM0WS21 and KM0W070.
// *********************
Program KM0W type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KM0WW01 KM0WW01; // record
  KU1REC KU1REC; // record
  KU1REC01 KU1REC01 { redefines = KU1REC } ; // record
  KU1REC02 KU1REC02 { redefines = KU1REC } ; // record
  KU1REC03 KU1REC03 { redefines = KU1REC } ; // record
  KU1REC04 KU1REC04 { redefines = KU1REC } ; // record
  KU1REC05 KU1REC05 { redefines = KU1REC } ; // record
  KU1REC06 KU1REC06 { redefines = KU1REC } ; // record
  KU1REC07 KU1REC07 { redefines = KU1REC } ; // record
  KU1REC08 KU1REC08 { redefines = KU1REC } ; // record
  KU1REC09 KU1REC09 { redefines = KU1REC } ; // record
  KU1REC10 KU1REC10 { redefines = KU1REC } ; // record
  KU1REC11 KU1REC11 { redefines = KU1REC } ; // record
  KU1REC12 KU1REC12 { redefines = KU1REC } ; // record
  KU1REC13 KU1REC13 { redefines = KU1REC } ; // record
  KU1REC14 KU1REC14 { redefines = KU1REC } ; // record
  KU1REC16 KU1REC16 { redefines = KU1REC } ; // record
  KU1REC17 KU1REC17 { redefines = KU1REC } ; // record
  KU1REC18 KU1REC18 { redefines = KU1REC } ; // record
  KU1REC19 KU1REC19 { redefines = KU1REC } ; // record
  KU1REC20 KU1REC20 { redefines = KU1REC } ; // record
  KU1REC21 KU1REC21 { redefines = KU1REC } ; // record
  KU1REC22 KU1REC22 { redefines = KU1REC } ; // record
  KU1REC23 KU1REC23 { redefines = KU1REC } ; // record
  KU1REC24 KU1REC24 { redefines = KU1REC } ; // record
  KU1REC26 KU1REC26 { redefines = KU1REC } ; // record
  KU1REC27 KU1REC27 { redefines = KU1REC } ; // record
  KU1REC28 KU1REC28 { redefines = KU1REC } ; // record
  KU1REC29 KU1REC29 { redefines = KU1REC } ; // record
  KU1REC30 KU1REC30 { redefines = KU1REC } ; // record
  KU1REC31 KU1REC31 { redefines = KU1REC } ; // record
  KU1REC32 KU1REC32 { redefines = KU1REC } ; // record
  KU1REC33 KU1REC33 { redefines = KU1REC } ; // record
  KU1REC35 KU1REC35 { redefines = KU1REC } ; // record
  KU1REC36 KU1REC36 { redefines = KU1REC } ; // record
  KU1REC37 KU1REC37 { redefines = KU1REC } ; // record
  KU1REC38 KU1REC38 { redefines = KU1REC } ; // record
  KU1REC39 KU1REC39 { redefines = KU1REC } ; // record
  KU1REC40 KU1REC40 { redefines = KU1REC } ; // record
  KU1REC41 KU1REC41 { redefines = KU1REC } ; // record
  KU1REC42 KU1REC42 { redefines = KU1REC } ; // record
  KU1REC43 KU1REC43 { redefines = KU1REC } ; // record
  KU1REC44 KU1REC44 { redefines = KU1REC } ; // record
  KU1REC45 KU1REC45 { redefines = KU1REC } ; // record
  KU1REC46 KU1REC46 { redefines = KU1REC } ; // record
  KUWREC KUWREC; // record
  KUYREC KUYREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  XA0AW02 XA0AW02; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XACTBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use XCUTBL {deleteAfterUse = yes}; // table
  use XCETBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XIDTBL {deleteAfterUse = yes}; // table
  use XLCTBL {deleteAfterUse = yes}; // table
  use XNDTBL {deleteAfterUse = yes}; // table
  use XNITBL {deleteAfterUse = yes}; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XSGTBL {deleteAfterUse = yes}; // table
  use XSPTBL {deleteAfterUse = yes}; // table
  use XCFTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XCCTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YSVTBL {deleteAfterUse = yes}; // table
  use KM0WM.KM0WM010,  // forms
      KM0WM.KM0WM020, 
      KM0WM.KM0WM030, 
      KM0WM.KM0WM040, 
      KM0WM.KM0WM050, 
      KM0WM.KM0WM060, 
      KM0WM.KM0WM070, 
      KM0WM.KM0WM080, 
      KM0WM.KM0WM090, 
      KM0WM.KM0WM130, 
      KM0WM.KM0WM140
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KM0W010: KM0W010();
    ;
    if (KM0WM010.KM0WMPIK == 1)
      goto KM0W020;
    else
      if (KM0WM010.KM0WMPIK == 2)
        goto KM0W030;
      else
        if (KM0WM010.KM0WMPIK == 3)
          goto KM0W040;
        else
          if (KM0WM010.KM0WMPIK == 4)
            goto KM0W070;
          else
            if (KM0WM010.KM0WMPIK == 5)
              goto KM0W080;
            else
              if (KM0WM010.KM0WMPIK == 6)
                goto KM0W090;
              else
                if (KM0WM010.KM0WMPIK == 8)
                  goto KM0W135;
                else
                  goto KM0W010;
                end
              end
            end
          end
        end
      end
    end
    KM0W020: KM0W020();
    if (converseVar.eventKey is pa2)
      converseLib.validationFailed(0);
      set KM0WM020 initial;
      KM0WM020.KM0WMDT = VGVar.currentShortGregorianDate;
      goto KM0W020;
    end
    ;
    if (converseVar.eventKey is pf3)
      converseLib.validationFailed(0);
      KM0WW01.KM0WWIX2 = 0;
      goto KM0W010;
    end
    ;
    if (converseVar.validationMsgNum != 0
     || KM0WM020.KM0WMMSG != " ")
      goto KM0W020;
    end
    ;
    if (converseVar.eventKey is pf12)
      goto KM0W110;
    else
      if (converseVar.eventKey is enter)
        converseLib.validationFailed(22);
        goto KM0W020;
      else
        goto KM0W020;
      end
    end
    KM0W030: KM0W030();
    if (converseVar.eventKey is pa2)
      converseLib.validationFailed(0);
      set KM0WM030 initial;
      KM0WM030.KM0WMDT = VGVar.currentShortGregorianDate;
      goto KM0W030;
    end
    ;
    if (converseVar.eventKey is pf3)
      converseLib.validationFailed(0);
      KM0WW01.KM0WWIX2 = 0;
      goto KM0W010;
    end
    ;
    if (converseVar.validationMsgNum != 0
     || KM0WM030.KM0WMMSG != " ")
      goto KM0W030;
    end
    ;
    if (converseVar.eventKey is pf12)
      goto KM0W110;
    else
      if (converseVar.eventKey is enter)
        converseLib.validationFailed(22);
        goto KM0W030;
      else
        goto KM0W030;
      end
    end
    KM0W040: KM0W040();
    if (converseVar.eventKey is pa2)
      converseLib.validationFailed(0);
      set KM0WM040 initial;
      KM0WM040.KM0WMDT = VGVar.currentShortGregorianDate;
      goto KM0W040;
    end
    ;
    if (converseVar.eventKey is pf3)
      converseLib.validationFailed(0);
      KM0WW01.KM0WWIX2 = 0;
      goto KM0W010;
    end
    ;
    if (converseVar.eventKey is pf8)
      converseLib.validationFailed(0);
      goto KM0W050;
    end
    ;
    if (converseVar.eventKey is pf7)
      converseLib.validationFailed(3);
      goto KM0W040;
    end
    ;
    if (converseVar.validationMsgNum != 0
     || KM0WM040.KM0WMMSG != " ")
      goto KM0W040;
    end
    ;
    if (converseVar.eventKey is pf12)
      goto KM0W110;
    else
      if (converseVar.eventKey is enter)
        converseLib.validationFailed(22);
        goto KM0W040;
      else
        goto KM0W040;
      end
    end
    KM0W050: KM0W050();
    if (converseVar.eventKey is pa2)
      converseLib.validationFailed(0);
      set KM0WM050 initial;
      KM0WM050.KM0WMDT = VGVar.currentShortGregorianDate;
      goto KM0W050;
    end
    ;
    if (converseVar.eventKey is pf3)
      converseLib.validationFailed(0);
      KM0WW01.KM0WWIX2 = 0;
      goto KM0W010;
    end
    ;
    if (converseVar.eventKey is pf7)
      converseLib.validationFailed(0);
      goto KM0W040;
    end
    ;
    if (converseVar.eventKey is pf8)
      converseLib.validationFailed(0);
      goto KM0W060;
    end
    ;
    if (converseVar.validationMsgNum != 0
     || KM0WM050.KM0WMMSG != " ")
      goto KM0W050;
    end
    ;
    if (converseVar.eventKey is pf12)
      goto KM0W110;
    else
      if (converseVar.eventKey is enter)
        converseLib.validationFailed(22);
        goto KM0W050;
      else
        goto KM0W050;
      end
    end
    KM0W060: KM0W060();
    if (converseVar.eventKey is pa2)
      converseLib.validationFailed(0);
      set KM0WM060 initial;
      KM0WM060.KM0WMDT = VGVar.currentShortGregorianDate;
      goto KM0W060;
    end
    ;
    if (converseVar.eventKey is pf3)
      converseLib.validationFailed(0);
      KM0WW01.KM0WWIX2 = 0;
      goto KM0W010;
    end
    ;
    if (converseVar.eventKey is pf7)
      converseLib.validationFailed(0);
      goto KM0W050;
    end
    ;
    if (converseVar.eventKey is pf8)
      converseLib.validationFailed(0);
      goto KM0W140;
    end
    ;
    if (converseVar.validationMsgNum != 0
     || KM0WM060.KM0WMMSG != " ")
      goto KM0W060;
    end
    ;
    if (converseVar.eventKey is pf12)
      goto KM0W110;
    else
      if (converseVar.eventKey is enter)
        converseLib.validationFailed(22);
        goto KM0W060;
      else
        goto KM0W060;
      end
    end
    KM0W070: KM0W070();
    if (converseVar.eventKey is pa2)
      converseLib.validationFailed(0);
      set KM0WM070 initial;
      KM0WM070.KM0WMDT = VGVar.currentShortGregorianDate;
      goto KM0W070;
    end
    ;
    if (converseVar.eventKey is pf3)
      converseLib.validationFailed(0);
      KM0WW01.KM0WWIX2 = 0;
      goto KM0W010;
    end
    ;
    if (converseVar.validationMsgNum != 0
     || KM0WM070.KM0WMMSG != " ")
      goto KM0W070;
    end
    ;
    if (converseVar.eventKey is pf12)
      goto KM0W110;
    else
      if (converseVar.eventKey is enter)
        converseLib.validationFailed(22);
        goto KM0W070;
      else
        goto KM0W070;
      end
    end
    KM0W080: KM0W080();
    if (converseVar.eventKey is pa2)
      converseLib.validationFailed(0);
      set KM0WM080 initial;
      KM0WM080.KM0WMDT = VGVar.currentShortGregorianDate;
      goto KM0W080;
    end
    ;
    if (converseVar.eventKey is pf3)
      converseLib.validationFailed(0);
      KM0WW01.KM0WWIX2 = 0;
      goto KM0W010;
    end
    ;
    if (converseVar.validationMsgNum != 0
     || KM0WM080.KM0WMMSG != " ")
      goto KM0W080;
    end
    ;
    if (converseVar.eventKey is pf12)
      goto KM0W110;
    else
      if (converseVar.eventKey is enter)
        converseLib.validationFailed(22);
        goto KM0W080;
      else
        goto KM0W080;
      end
    end
    KM0W090: KM0W090();
    if (converseVar.eventKey is pa2)
      converseLib.validationFailed(0);
      set KM0WM090 initial;
      KM0WM090.KM0WMDT = VGVar.currentShortGregorianDate;
      goto KM0W090;
    end
    ;
    if (converseVar.eventKey is pf3)
      converseLib.validationFailed(0);
      KM0WW01.KM0WWIX2 = 0;
      goto KM0W010;
    end
    ;
    if (converseVar.validationMsgNum != 0
     || KM0WM090.KM0WMMSG != " ")
      goto KM0W090;
    end
    ;
    if (converseVar.eventKey is pf12)
      goto KM0W110;
    else
      if (converseVar.eventKey is enter)
        converseLib.validationFailed(22);
        goto KM0W090;
      else
        goto KM0W090;
      end
    end
    KM0W110: KM0W110();
    KM0WW01.KM0WWMS1 = "REQUESTS ADDED TO BATCH FILE:";
    ;
    if (KM0WW01.KM0WWOUT[KM0WWIDX] == " ") /* *******************************/
      KM0WW01.KM0WWIDX = 1; /* * the loop below             **/
      while (KM0WWIDX < 157) /* * will clear the ws output   **/
        KM0WW01.KM0WWOUT[KM0WWIDX] = " "; /* * table, must change this if **/
        KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1; /* * size of that table changes **/
      end /* *******************************/
      if (KM0WW01.KM0WWMFL == "020")
        set KM0WM020 initial;
        KM0WM020.KM0WMDT = VGVar.currentShortGregorianDate;
        KM0WM020.KM0WMMSG = KM0WW01.KM0WWMSG;
        goto KM0W020;
      else
        if (KM0WW01.KM0WWMFL == "030")
          set KM0WM030 initial;
          KM0WM030.KM0WMDT = VGVar.currentShortGregorianDate;
          KM0WM030.KM0WMMSG = KM0WW01.KM0WWMSG;
          goto KM0W030;
        else
          if (KM0WW01.KM0WWMFL == "040")
            set KM0WM040 initial;
            KM0WM040.KM0WMDT = VGVar.currentShortGregorianDate;
            KM0WM040.KM0WMMSG = KM0WW01.KM0WWMSG;
            goto KM0W040;
          else
            if (KM0WW01.KM0WWMFL == "050")
              set KM0WM050 initial;
              KM0WM050.KM0WMDT = VGVar.currentShortGregorianDate;
              KM0WM050.KM0WMMSG = KM0WW01.KM0WWMSG;
              goto KM0W050;
            else
              if (KM0WW01.KM0WWMFL == "060")
                set KM0WM060 initial;
                KM0WM060.KM0WMDT = VGVar.currentShortGregorianDate;
                KM0WM060.KM0WMMSG = KM0WW01.KM0WWMSG;
                goto KM0W060;
              else
                if (KM0WW01.KM0WWMFL == "070")
                  set KM0WM070 initial;
                  KM0WM070.KM0WMDT = VGVar.currentShortGregorianDate;
                  KM0WM070.KM0WMMSG = KM0WW01.KM0WWMSG;
                  goto KM0W070;
                else
                  if (KM0WW01.KM0WWMFL == "080")
                    set KM0WM080 initial;
                    KM0WM080.KM0WMDT = VGVar.currentShortGregorianDate;
                    KM0WM080.KM0WMMSG = KM0WW01.KM0WWMSG;
                    goto KM0W080;
                  else
                    if (KM0WW01.KM0WWMFL == "090")
                      set KM0WM090 initial;
                      KM0WM090.KM0WMDT = VGVar.currentShortGregorianDate;
                      KM0WM090.KM0WMMSG = KM0WW01.KM0WWMSG;
                      goto KM0W090;
                    else
                      if (KM0WW01.KM0WWMFL == "130")
                        set KM0WM130 initial;
                        KM0WM130.KM0WMDT = VGVar.currentShortGregorianDate;
                        KM0WM130.KM0WMMSG = KM0WW01.KM0WWMSG;
                        goto KM0W130;
                      else
                        if (KM0WW01.KM0WWMFL == "140")
                          set KM0WM140 initial;
                          KM0WM140.KM0WMDT = VGVar.currentShortGregorianDate;
                          KM0WM140.KM0WMMSG = KM0WW01.KM0WWMSG;
                          goto KM0W140;
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    else
      goto KM0W110;
    end
    KM0W120: KM0W120();
    if (KM0WW01.KM0WWMFL == "020")
      KM0WM020.KM0WMMSG = KM0WW01.KM0WWMSG;
      goto KM0W020;
    else
      if (KM0WW01.KM0WWMFL == "030")
        KM0WM030.KM0WMMSG = KM0WW01.KM0WWMSG;
        goto KM0W030;
      else
        if (KM0WW01.KM0WWMFL == "040")
          KM0WM040.KM0WMMSG = KM0WW01.KM0WWMSG;
          goto KM0W040;
        else
          if (KM0WW01.KM0WWMFL == "050")
            KM0WM050.KM0WMMSG = KM0WW01.KM0WWMSG;
            goto KM0W050;
          else
            if (KM0WW01.KM0WWMFL == "060")
              KM0WM060.KM0WMMSG = KM0WW01.KM0WWMSG;
              goto KM0W060;
              if (KM0WW01.KM0WWMFL == "070")
                KM0WM070.KM0WMMSG = KM0WW01.KM0WWMSG;
                goto KM0W070;
              else
                if (KM0WW01.KM0WWMFL == "080")
                  KM0WM080.KM0WMMSG = KM0WW01.KM0WWMSG;
                  goto KM0W080;
                else
                  if (KM0WW01.KM0WWMFL == "090")
                    KM0WM090.KM0WMMSG = KM0WW01.KM0WWMSG;
                    goto KM0W090;
                  else
                    if (KM0WW01.KM0WWMFL == "130")
                      KM0WM130.KM0WMMSG = KM0WW01.KM0WWMSG;
                      goto KM0W130;
                    else
                      if (KM0WW01.KM0WWMFL == "140")
                        KM0WM140.KM0WMMSG = KM0WW01.KM0WWMSG;
                        goto KM0W140;
                      else
                        goto KM0W110;
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    KM0W130: KM0W130();
    if (converseVar.eventKey is pa2)
      converseLib.validationFailed(0);
      set KM0WM130 initial;
      KM0WM130.KM0WMDT = VGVar.currentShortGregorianDate;
      goto KM0W130;
    end
    ;
    if (converseVar.eventKey is pf3)
      converseLib.validationFailed(0);
      KM0WW01.KM0WWIX2 = 0;
      goto KM0W010;
    end
    ;
    if (converseVar.validationMsgNum != 0
     || KM0WM130.KM0WMMSG != " ")
      goto KM0W130;
    end
    ;
    if (converseVar.eventKey is pf12)
      goto KM0W110;
    else
      if (converseVar.eventKey is enter)
        converseLib.validationFailed(22);
        goto KM0W130;
      else
        goto KM0W130;
      end
    end
    ;
    KM0W135: KM0W135();
    KM0W140: KM0W140();
    if (converseVar.eventKey is pa2)
      converseLib.validationFailed(0);
      set KM0WM140 initial;
      KM0WM140.KM0WMDT = VGVar.currentShortGregorianDate;
      goto KM0W140;
    end
    ;
    if (converseVar.eventKey is pf3)
      converseLib.validationFailed(0);
      KM0WW01.KM0WWIX2 = 0;
      goto KM0W010;
    end
    ;
    if (converseVar.eventKey is pf7)
      converseLib.validationFailed(0);
      goto KM0W060;
    end
    ;
    if (converseVar.eventKey is pf8)
      converseLib.validationFailed(3);
      goto KM0W140;
    end
    ;
    if (converseVar.validationMsgNum != 0
     || KM0WM140.KM0WMMSG != " ")
      goto KM0W140;
    end
    ;
    if (converseVar.eventKey is pf12)
      goto KM0W110;
    else
      if (converseVar.eventKey is enter)
        converseLib.validationFailed(22);
        goto KM0W140;
      else
        goto KM0W140;
      end
    end
  end // end main
end // end KM0W

// converse global menu
Function KM0W010()
  XSENTRY();
  ;
  XSSEGTR(); /* set segmented trans id*/
  ;
  KM0WS00(); /* initialize environment*/
  ;
  KM0WM010.KM0WMMSG = COMMAREA.CAMSG; /* display any security msg*/
  COMMAREA.CAMSG = " ";
  converse KM0WM010 ;
  ;
  KM0WM010.VAGen_EZEMSG = " ";
  KM0WM010.KM0WMMSG = " ";
  ;
   /* --------------- check aid byte ---------------------*/
  ;
  KM0WSS1(); /* check standard pf keys*/
  KM0WM010.KM0WMMSG = KM0WW01.KM0WWMSG;
  ;
  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = COMMAREA.CAFROMAP; /* xfer to main chg menu*/
    XSEXIT();
    KM0WM010.KM0WMMSG = COMMAREA.CAMSG; /* security error*/
  end
  ;
  KM0WS-EDIT-NILUSER();
  ;
  if (converseVar.validationMsgNum != 0 /* invalid pf*/
   || KM0WM010.KM0WMMSG != " ")         /* invalid security*/
    exit stack;
  end
  ;
   /* --------   check for fastpath  --------------*/
  ;
  if (KM0WM010.KM0WMOPT > " ") /* fastpath request*/
    COMMAREA.CATOAP = KM0WM010.KM0WMOPT;
    COMMAREA.CAITEM = KM0WM010.KM0WMITM;
    XSEXIT(); /* check security/xfer*/
    COMMAREA.CATOAP = " ";
    exit stack;
  end
  ;
end // end KM0W010

// converse company map
Function KM0W020()
  KM0WSS0(); /* check field security*/
   /* ****** this sets security for db changes 01/17/90*/
  ;
  set KM0WM020.KM0WMSRT[1] skip;
  set KM0WM020.KM0WMSRT[2] skip;
  set KM0WM020.KM0WW2P1 skip;
  set KM0WM020.KM0WW2P2 skip;
  set KM0WM020.KM0WW5P1 skip;
  set KM0WM020.KM0WW5P2 skip;
  set KM0WM020.XCUCD[1] skip;
  set KM0WM070.KM0WMSTM skip; /* send statement ind*/
  set KM0WM020.KM0WMSTM[1] skip;
  set KM0WM020.KM0WMSTM[2] skip;
  set KM0WM020.KUCGRPID[2] skip;
  ;
  converse KM0WM020 ;
  ;
  KM0WM020.VAGen_EZEMSG = " ";
  KM0WM020.KM0WMMSG = " ";
  ;
   /* --------------- check aid byte ---------------------*/
  ;
  KM0WSS1(); /* check standard pf keys*/
  KM0WM020.KM0WMMSG = KM0WW01.KM0WWMSG;
  if (converseVar.validationMsgNum != 0 /* invalid pf*/
   || KM0WM020.KM0WMMSG != " ")         /* invalid security*/
    exit stack;
  end
  ;
   /* --------   check for fastpath  --------------*/
  ;
  if (KM0WM020.KM0WMOPT > " ") /* fastpath request*/
    COMMAREA.CATOAP = KM0WM020.KM0WMOPT;
    COMMAREA.CAITEM = KM0WM020.KM0WMITM;
    XSEXIT(); /* check security/xfer*/
    KM0WM020.KM0WMMSG = COMMAREA.CAMSG; /* security failed*/
    COMMAREA.CAMSG = " ";
    COMMAREA.CATOAP = " ";
    exit stack;
  end
  ;
  ;
  set KM0WM020.KM0WW1P1 initialAttributes;
  set KM0WM020.KM0WW1P2 initialAttributes;
   /* SET KM0WM020.KM0WW2P1 DEFINED;*/
   /* SET KM0WM020.KM0WW2P2 DEFINED;*/
  set KM0WM020.KM0WW3P1 initialAttributes;
  set KM0WM020.KM0WW3P2 initialAttributes;
  set KM0WM020.KM0WW4P1 initialAttributes;
  set KM0WM020.KM0WW4P2 initialAttributes;
   /* SET KM0WM020.KM0WW5P1 DEFINED;*/
   /* SET KM0WM020.KM0WW5P2 DEFINED;*/
  set KM0WM020.KM0WW6P1 initialAttributes;
  set KM0WM020.KM0WW6P2 initialAttributes;
  set KM0WM020.KM0WW7P1 initialAttributes;
  set KM0WM020.KM0WW8P1 initialAttributes;
  ;
   /* this will check that all params are 'x'd if entered*/
  ;
  KM0WS31();
  ;
   /* ******* check nike store count field *********/
    /* must only be numeric - checked by map*/
  ;
  if (KM0WM020.KUCNSCNT is modified
   || KM0WM020.KM0WW8P1 is modified)
    if (KM0WM020.KUCNSCNT != 0) /* if field not used skip*/
      if (KM0WM020.KM0WW8P1 == " ")
        set KM0WM020.KM0WW8P1 cursor, modified, bold;
        converseLib.validationFailed(156); /* must use a param*/
      end
    end
  end
  ;
   /* ******* check store count field *********/
    /* must only be numeric - checked by map*/
  ;
  if (KM0WM020.KUCSSCNT is modified
   || KM0WM020.KM0WW7P1 is modified)
    if (KM0WM020.KUCSSCNT != 0) /* if field not used skip*/
      if (KM0WM020.KM0WW7P1 == " ")
        set KM0WM020.KM0WW7P1 cursor, modified, bold;
        converseLib.validationFailed(156); /* must use a param*/
      end
    end
  end
  ;
   /* ******* check cr stat field **********/
  ;
  if (KM0WM020.XCCCD[1] is modified
   || KM0WM020.KM0WW6P1 is modified)
    set KM0WM020.XCCCD[1] initialAttributes;
    if (KM0WM020.XCCCD[1] != " ") /* if field not used skip*/
      KM0WS04();
      if (KM0WM020.KM0WW6P1 != " ") /* if any param besides prv val*/
         /* next sentence*/
      else
        if (KM0WM020.KM0WW6P2 != " ")
          set KM0WM020.KM0WW6P1 cursor, modified, bold;
          converseLib.validationFailed(155); /* prv val cant be only param*/
        else
          set KM0WM020.KM0WW6P1 cursor, modified, bold;
          converseLib.validationFailed(156); /* must use a param*/
        end
      end
    end
  end
  ;
   /* *********** check cash sort key field *************/
  ;
  if (KM0WM020.KM0WMSRT[1] is modified
   || KM0WM020.KM0WW5P1 is modified)
    set KM0WM020.KM0WMSRT[1] initialAttributes;
    if (KM0WM020.KM0WMSRT[1] != " ") /* if field not used skip*/
      if (KM0WM020.KM0WMSRT[1] >= "A" /* cash sort key*/
       && KM0WM020.KM0WMSRT[1] <= "L") /* must be one of a - l*/
         /* next sentence*/
      else
        set KM0WM020.KM0WMSRT[1] cursor, modified, bold;
        converseLib.validationFailed(17); /* invalid code*/
      end
      if (KM0WM020.KM0WW5P1 != " ") /* if any param besides prv val*/
         /* next sentence*/
      else
        if (KM0WM020.KM0WW5P2 != " ")
          set KM0WM020.KM0WW5P1 cursor, modified, bold;
          converseLib.validationFailed(155); /* prv val cant be only param*/
        else
          set KM0WM020.KM0WW5P1 cursor, modified, bold;
          converseLib.validationFailed(156); /* must use a param*/
        end
      end
    end
  end
  ;
   /* ********* check cr resp field ***********/
  ;
  if (KM0WM020.XCUCD[3] is modified
   || KM0WM020.KM0WW4P1 is modified)
    set KM0WM020.XCUCD[3] initialAttributes;
    if (KM0WM020.XCUCD[3] != " ") /* if field not used skip*/
      KM0WS03();
      if (KM0WM020.KM0WW4P1 != " ") /* if any param besides prv val*/
         /* next sentence*/
      else
        if (KM0WM020.KM0WW4P2 != " ")
          set KM0WM020.KM0WW4P1 cursor, modified, bold;
          converseLib.validationFailed(155); /* prv val cant be only param*/
        else
          set KM0WM020.KM0WW4P1 cursor, modified, bold;
          converseLib.validationFailed(156); /* must use a param*/
        end
      end
    end
  end
  ;
   /* *********** check analyst code field ************/
  ;
  if (KM0WM020.XCUCD[2] is modified
   || KM0WM020.KM0WW3P1 is modified)
    set KM0WM020.XCUCD[2] initialAttributes;
    if (KM0WM020.XCUCD[2] != " ") /* if field not used skip*/
      KM0WS02();
      if (KM0WM020.KM0WW3P1 != " ") /* if any param besides prv val*/
         /* next sentence*/
      else
        if (KM0WM020.KM0WW3P2 != " ")
          set KM0WM020.KM0WW3P1 cursor, modified, bold;
          converseLib.validationFailed(155); /* prv val cant be only param*/
        else
          set KM0WM020.KM0WW3P1 cursor, modified, bold;
          converseLib.validationFailed(156); /* must use a param*/
        end
      end
    end
  end
  ;
   /* *********** check send statmnt field ************/
  ;
  if (KM0WM020.KM0WMSTM[1] is modified
   || KM0WM020.KM0WW2P1 is modified)
    set KM0WM020.KM0WMSTM[1] initialAttributes;
    if (KM0WM020.KM0WMSTM[1] != " ") /* if field not used skip*/
      if (KM0WM020.KM0WMSTM[1] != "Y"
       && KM0WM020.KM0WMSTM[1] != "N")
        set KM0WM020.KM0WMSTM[1] cursor, modified, bold;
        converseLib.validationFailed(20); /* must be 'y' or 'n'*/
      else
         /* next sentence*/
      end
      if (KM0WM020.KM0WW2P1 != " ") /* edit if any param besides prv val*/
         /* next sentence*/
      else
        if (KM0WM020.KM0WW2P2 != " ")
          set KM0WM020.KM0WW2P1 cursor, modified, bold;
          converseLib.validationFailed(155); /* prv val cant be only param*/
        else
          set KM0WM020.KM0WW2P1 cursor, modified, bold;
          converseLib.validationFailed(156); /* must use a param*/
        end
      end
    end
  end
  ;
   /* ******** check acct class code field **********/
  ;
  if (KM0WM020.XAUCD[1] is modified
   || KM0WM020.KM0WW1P1 is modified)
    set KM0WM020.XAUCD[1] initialAttributes;
    if (KM0WM020.XAUCD[1] != " ") /* if field not used skip*/
      KM0WS01();
      if (KM0WM020.KM0WW1P1 != " ") /* if any param besides prv val*/
         /* next sentence*/
      else
        if (KM0WM020.KM0WW1P2 != " ")
          set KM0WM020.KM0WW1P1 cursor, modified, bold;
          converseLib.validationFailed(155); /* prv val cant be only param*/
        else
          set KM0WM020.KM0WW1P1 cursor, modified, bold;
          converseLib.validationFailed(156); /* must use a param*/
        end
      end
    end
  end
  ;
  KM0WW01.KM0WWMFL = "020";
  ;
  if (converseVar.validationMsgNum == 0)
    if (converseVar.eventKey is pf12)
      KM0WS05();
    end
  end
  ;
end // end KM0W020

// converse store map
Function KM0W030()
  KM0WSS0(); /* check field security*/
  converse KM0WM030 ;
  ;
  KM0WM030.VAGen_EZEMSG = " ";
  KM0WM030.KM0WMMSG = " ";
  ;
   /* --------------- check aid byte ---------------------*/
  ;
  KM0WSS1(); /* check standard pf keys*/
  KM0WM030.KM0WMMSG = KM0WW01.KM0WWMSG;
  if (converseVar.validationMsgNum != 0 /* invalid pf*/
   || KM0WM030.KM0WMMSG != " ")         /* invalid security*/
    exit stack;
  end
  ;
   /* --------   check for fastpath  --------------*/
  ;
  if (KM0WM030.KM0WMOPT > " ") /* fastpath request*/
    COMMAREA.CATOAP = KM0WM030.KM0WMOPT;
    COMMAREA.CAITEM = KM0WM030.KM0WMITM;
    XSEXIT(); /* check security/xfer*/
    KM0WM030.KM0WMMSG = COMMAREA.CAMSG; /* security failed*/
    COMMAREA.CAMSG = " ";
    COMMAREA.CATOAP = " ";
    exit stack;
  end
  ;
  ;
  ;
  set KM0WM030.KM0WW1P1 cursor;
  set KM0WM030.KM0WW1P2 initialAttributes;
  set KM0WM030.KM0WW1P3 initialAttributes;
  set KM0WM030.KM0WW2P1 initialAttributes;
  set KM0WM030.KM0WW2P2 initialAttributes;
  set KM0WM030.KM0WW2P3 initialAttributes;
  set KM0WM030.KM0WW3P1 initialAttributes;
  set KM0WM030.KM0WW3P2 initialAttributes;
  set KM0WM030.KM0WW3P3 initialAttributes;
  set KM0WM030.KM0WW3P4 initialAttributes;
  set KM0WM030.KM0WW3P5 initialAttributes;
  set KM0WM030.KM0WW3P6 initialAttributes;
  set KM0WM030.KM0WW3P7 initialAttributes;
  set KM0WM030.KM0WW4P1 initialAttributes;
  set KM0WM030.KM0WW4P2 initialAttributes;
  set KM0WM030.KM0WW4P3 initialAttributes;
  set KM0WM030.KM0WW6P1 initialAttributes;
  set KM0WM030.KM0WW6P2 initialAttributes;
  set KM0WM030.KM0WW6P3 initialAttributes;
  set KM0WM030.XGPCD[1] initialAttributes;
  set KM0WM030.XWHCD[1] initialAttributes;
  set KM0WM030.XGPCD[2] initialAttributes;
  set KM0WM030.XWHCD[2] initialAttributes;
  ;
   /* this will check that chosen params are 'x'd*/
  ;
  KM0WS32();
  ;
   /* ****** check footwear image field ************/
  ;
  if (KM0WM030.KUMXNIFT[1] is modified
   || KM0WM030.KM0WW6P1 is modified
   || KM0WM030.KUMXNIFT[1] != " ")
    set KM0WM030.KUMXNIFT[1] initialAttributes;
    if (KM0WM030.KUMXNIFT[1] != " ") /* if field not used skip*/
      KM0WS11();
      if (KM0WM030.KM0WW6P1 != " " /* if any param besides prv val*/
       || KM0WM030.KM0WW6P2 != " ")
         /* next sentence*/
      else
        if (KM0WM030.KM0WW6P3 != " ")
          set KM0WM030.KM0WW6P1 cursor, modified, bold;
          converseLib.validationFailed(155); /* prv val cant be only param*/
        else
          set KM0WM030.KM0WW6P1 cursor, modified, bold;
          converseLib.validationFailed(156); /* must use a param*/
        end
      end
    end
  end
  ;
  ;
   /* ****** check store class code field ********/
  ;
  if (KM0WM030.YSVCD[1] is modified
   || KM0WM030.KM0WW4P1 is modified
   || KM0WM030.YSVCD[1] != " ")
    set KM0WM030.YSVCD[1] initialAttributes;
    if (KM0WM030.YSVCD[1] != " ") /* if field not used skip*/
      KM0WS10();
      if (KM0WM030.KM0WW4P1 != " " /* if any param besides prv val*/
       || KM0WM030.KM0WW4P2 != " ")
         /* next sentence*/
      else
        if (KM0WM030.KM0WW4P3 != " ")
          set KM0WM030.KM0WW4P1 cursor, modified, bold;
          converseLib.validationFailed(155); /* prv val cant be only param*/
        else
          set KM0WM030.KM0WW4P1 cursor, modified, bold;
          converseLib.validationFailed(156); /* must use a param*/
        end
      end
    end
  end
  ;
   /* ****** check warehouse/gpc code field ***********/
  ;
  if (KM0WM030.XWHCD[1] is modified
   || KM0WM030.XGPCD[1] is modified
   || KM0WM030.KM0WW3P7 is modified
   || KM0WM030.KM0WW3P6 is modified
   || KM0WM030.XWHCD[2] is modified
   || KM0WM030.XGPCD[2] is modified
   || KM0WM030.XWHCD[1] != " "
   || KM0WM030.XGPCD[1] != " ")
    set KM0WM030.XWHCD[1] initialAttributes;
    set KM0WM030.XGPCD[1] initialAttributes;
    set KM0WM030.XWHCD[2] initialAttributes;
    set KM0WM030.XGPCD[2] initialAttributes;
    if (KM0WM030.XWHCD[1] != " " /* if field not used skip*/
     || KM0WM030.XGPCD[1] != " ")
      KM0WS09();
      if (KM0WM030.KM0WW3P1 != " " /* if any param besides prv val*/
       || KM0WM030.KM0WW3P2 != " " 
       || KM0WM030.KM0WW3P3 != " " 
       || KM0WM030.KM0WW3P4 != " " 
       || KM0WM030.KM0WW3P5 != " " 
       || KM0WM030.KM0WW3P6 != " " 
       || KM0WM030.KM0WW3P7 != " ")
         /* next sentence*/
      else
        set KM0WM030.KM0WW3P1 cursor, modified, bold;
        converseLib.validationFailed(156); /* must use a param*/
      end
    end
  end
  ;
   /* ****** check cust self image field ***********/
  ;
  if (KM0WM030.XCFCD[1] is modified
   || KM0WM030.KM0WW2P1 is modified
   || KM0WM030.XCFCD[1] != " ")
    set KM0WM030.XCFCD[1] initialAttributes;
    if (KM0WM030.XCFCD[1] != " ") /* if field not used skip*/
      KM0WS08();
      if (KM0WM030.KM0WW2P1 != " " /* if any param besides prv val*/
       || KM0WM030.KM0WW2P2 != " ")
         /* next sentence*/
      else
        if (KM0WM030.KM0WW2P3 != " ")
          set KM0WM030.KM0WW2P1 cursor, modified, bold;
          converseLib.validationFailed(155); /* prv val cant be only param*/
        else
          set KM0WM030.KM0WW2P1 cursor, modified, bold;
          converseLib.validationFailed(156); /* must use a param*/
        end
      end
    end
  end
  ;
   /* ****** check apparel image field ***********/
  ;
  if (KM0WM030.KUMXNIAP[1] is modified
   || KM0WM030.KM0WW1P1 is modified
   || KM0WM030.KUMXNIAP[1] != " ")
    set KM0WM030.KUMXNIAP[1] initialAttributes;
    if (KM0WM030.KUMXNIAP[1] != " ") /* if field not used skip*/
      KM0WS06();
      if (KM0WM030.KM0WW1P1 != " " /* if any param besides prv val*/
       || KM0WM030.KM0WW1P2 != " ")
         /* next sentence*/
      else
        if (KM0WM030.KM0WW1P3 != " ")
          set KM0WM030.KM0WW1P1 cursor, modified, bold;
          converseLib.validationFailed(155); /* prv val cant be only param*/
        else
          set KM0WM030.KM0WW1P1 cursor, modified, bold;
          converseLib.validationFailed(156); /* must use a param*/
        end
      end
    end
  end
  ;
  KM0WW01.KM0WWMFL = "030";
  ;
  if (converseVar.validationMsgNum == 0)
    if (converseVar.eventKey is pf12)
      KM0WS13();
    end
  end
end // end KM0W030

// converse cust unit map1
Function KM0W040()
  KM0WSS0(); /* check field security*/
   /* ****** this sets security for mult reps changes*/
   /* ****** 04/04/90*/
  set KM0WM040.SM4REPID[1] skip;
  set KM0WM040.KM0WW1P1 skip;
  set KM0WM040.KUCCOID[1] skip;
  set KM0WM040.SM1AGYID[1] skip;
  set KM0WM040.KM0WW1P2 skip;
  set KM0WM040.XGPCD[1] skip;
  set KM0WM040.KUFRESCD skip;
  set KM0WM040.KM0WW1P3 skip;
  set KM0WM040.SM4REPID[2] skip;
  set KM0WM040.KM0WMMTH skip;
  set KM0WM040.KM0WMDAY skip;
  set KM0WM040.KM0WMYR skip;
  set KM0WM040.KM0WW1P4 skip;
  set KM0WM040.SM1AGYID[2] skip;
  ;
   /* ****** autoskip fields moved to company*/
   /* ****** 12/12/90*/
  set KM0WM040.XACCD[1] skip;
  set KM0WM040.KM0WW2P1 skip;
  set KM0WM040.KUCCOID[2] skip;
  set KM0WM040.KM0WW2P2 skip;
  set KM0WM040.KUCGRPID[1] skip;
  set KM0WM040.KM0WW2P3 skip;
  set KM0WM040.KUMSTRID[1] skip;
  set KM0WM040.KM0WW2P4 skip;
  set KM0WM040.XGPCD[2] skip;
  set KM0WM040.KM0WW2P5 skip;
  set KM0WM040.XACCD[2] skip;
  set KM0WM040.KUNALSEQ[1] skip;
  set KM0WM040.KM0WW4P1 skip;
  set KM0WM040.KUCCOID[4] skip;
  set KM0WM040.KM0WW4P2 skip;
  set KM0WM040.KUCGRPID[2] skip;
  set KM0WM040.KM0WW4P3 skip;
  set KM0WM040.KUMSTRID[3] skip;
  set KM0WM040.KM0WW4P4 skip;
  set KM0WM040.XGPCD[4] skip;
  set KM0WM040.KM0WW4P5 skip;
  set KM0WM040.KUNALSEQ[2] skip;
  ;
   /* ****** autoskip fields moved to store*/
   /* ****** 03/14/91 moved from customer level to store*/
  ;
  set KM0WM040.XIDCD[1] skip;
  set KM0WM040.KM0WW5P1 skip;
  set KM0WM040.KUCCOID[5] skip;
  set KM0WM040.KM0WW5P2 skip;
  set KM0WM040.KUCGRPID[3] skip;
  set KM0WM040.KM0WW5P3 skip;
  set KM0WM040.KUMSTRID[4] skip;
  set KM0WM040.KM0WW5P4 skip;
  set KM0WM040.XGPCD[5] skip;
  set KM0WM040.KM0WW5P5 skip;
  set KM0WM040.XIDCD[2] skip;
  ;
  converse KM0WM040 ;
  ;
  KM0WM040.VAGen_EZEMSG = " ";
  KM0WM040.KM0WMMSG = " ";
  ;
   /* --------------- check aid byte ---------------------*/
  ;
  KM0WSS1(); /* check standard pf keys*/
  KM0WM040.KM0WMMSG = KM0WW01.KM0WWMSG;
  if (converseVar.validationMsgNum != 0 /* invalid pf*/
   || KM0WM040.KM0WMMSG != " ")         /* invalid security*/
    exit stack;
  end
  ;
   /* --------   check for fastpath  --------------*/
  ;
  if (KM0WM040.KM0WMOPT > " ") /* fastpath request*/
    COMMAREA.CATOAP = KM0WM040.KM0WMOPT;
    COMMAREA.CAITEM = KM0WM040.KM0WMITM;
    XSEXIT(); /* check security/xfer*/
    KM0WM040.KM0WMMSG = COMMAREA.CAMSG; /* security failed*/
    COMMAREA.CAMSG = " ";
    COMMAREA.CATOAP = " ";
    exit stack;
  end
  ;
  ;
   /* sET KM0WM040.KM0WW1P1 DEFINED;*/
   /* sET KM0WM040.KM0WW1P2 DEFINED;*/
   /* sET KM0WM040.KM0WW1P3 DEFINED;*/
   /* sET KM0WM040.KM0WW1P4 DEFINED;*/
  ;
   /* sET KM0WM040.KM0WW5P1 DEFINED;*/
   /* sET KM0WM040.KM0WW5P2 DEFINED;*/
   /* sET KM0WM040.KM0WW5P3 DEFINED;*/
   /* sET KM0WM040.KM0WW5P4 DEFINED;*/
   /* sET KM0WM040.KM0WW5P5 DEFINED;*/
  ;
  set KM0WM040.KM0WW2P1 initialAttributes;
  set KM0WM040.KM0WW2P2 initialAttributes;
  set KM0WM040.KM0WW2P3 initialAttributes;
  set KM0WM040.KM0WW2P4 initialAttributes;
  set KM0WM040.KM0WW2P5 initialAttributes;
  set KM0WM040.KM0WW3P1 initialAttributes;
  set KM0WM040.KM0WW3P2 initialAttributes;
  set KM0WM040.KM0WW3P3 initialAttributes;
  set KM0WM040.KM0WW3P4 initialAttributes;
  set KM0WM040.KM0WW3P5 initialAttributes;
  set KM0WM040.KM0WW4P1 initialAttributes;
  set KM0WM040.KM0WW4P2 initialAttributes;
  set KM0WM040.KM0WW4P3 initialAttributes;
  set KM0WM040.KM0WW4P4 initialAttributes;
  set KM0WM040.KM0WW4P5 initialAttributes;
  set KM0WM040.KM0WW6P1 initialAttributes;
  set KM0WM040.KM0WW6P2 initialAttributes;
  set KM0WM040.KM0WW6P3 initialAttributes;
  set KM0WM040.KM0WW6P4 initialAttributes;
  set KM0WM040.KM0WW6P5 initialAttributes;
  set KM0WM040.KUFRESCD initialAttributes;
  set KM0WM040.KM0WMYR initialAttributes;
  set KM0WM040.KM0WMMTH initialAttributes;
  set KM0WM040.KM0WMDAY initialAttributes;
  set KM0WM040.XGACD[2] initialAttributes;
  ;
   /* perform basic paramater edits*/
  ;
  KM0WS28();
  ;
   /* ****** check gender/age field ************/
  ;
  if (KM0WM040.XGACD[1] is modified
   || KM0WM040.KM0WW6P1 is modified
   || KM0WM040.KM0WW6P5 is modified
   || KM0WM040.XGACD[1] != " ")
    set KM0WM040.XGACD[1] initialAttributes;
    if (KM0WM040.XGACD[1] != " ") /* if field not used skip*/
      if (KM0WM040.KM0WW6P5 == " ")
        set KM0WM040.XGACD[2] cursor, modified, bold;
        set KM0WM040.KM0WW6P5 cursor, modified, bold;
        converseLib.validationFailed(114);
      end
      KM0WS17();
      if (KM0WM040.KM0WW6P1 != " " /* if any param besides prv val*/
       || KM0WM040.KM0WW6P2 != " " 
       || KM0WM040.KM0WW6P3 != " " 
       || KM0WM040.KM0WW6P4 != " ")
         /* next sentence*/
      else
        if (KM0WM040.KM0WW6P5 != " ")
          set KM0WM040.KM0WW6P1 cursor, modified, bold;
          converseLib.validationFailed(155); /* prv val cant be only param*/
        else
          set KM0WM040.KM0WW6P1 cursor, modified, bold;
          converseLib.validationFailed(156); /* must use a param*/
        end
      end
    end
  end
  ;
   /* ****** check invoice dist ind  *********/
   /* this paragraph can be removed i think 3-14-91*/
  ;
   /* F KM0WM040.XIDCD(1) IS MODIFIED;*/
   /* OR KM0WM040.KM0WW5P1 IS MODIFIED;*/
   /* OR KM0WM040.XIDCD(1) NE ' ';*/
   /* SET KM0WM040.XIDCD(1) DEFINED;*/
   /* IF KM0WM040.XIDCD(1) NE ' '   ;   if field not used skip*/
     /* KM0WS44;*/
   /* IF KM0WM040.KM0WW5P1 NE ' ' ; if any param besides prv val*/
       /* OR KM0WM040.KM0WW5P2 NE ' ';*/
       /* OR KM0WM040.KM0WW5P3 NE ' ';*/
       /* OR KM0WM040.KM0WW5P4 NE ' ';*/
       /* ; next sentence*/
     /* ELSE ;*/
       /* IF KM0WM040.KM0WW5P5 NE ' ';*/
         /* SET KM0WM040.KM0WW5P1 CURSOR,MODIFIED,BRIGHT;*/
         /* MOVE 155 TO EZEMNO;        prv val cant be only param*/
       /* ELSE ;*/
         /* SET KM0WM040.KM0WW5P1 CURSOR,MODIFIED,BRIGHT;*/
         /* MOVE 156 TO EZEMNO      ;         must use a param*/
       /* END ;*/
     /* END ;*/
   /* END ;*/
   /* ND ;*/
  ;
   /* ****** check assgn alloc seq field  ***********/
  ;
  if (KM0WM040.KUNALSEQ[1] is modified
   || KM0WM040.KM0WW4P1 is modified
   || KM0WM040.KUNALSEQ[1] != 0)
    set KM0WM040.KUNALSEQ[1] initialAttributes;
    if (KM0WM040.KUNALSEQ[1] != 0) /* if field not used skip*/
      if (KM0WM040.KM0WW4P1 != " " /* if any param besides prv val*/
       || KM0WM040.KM0WW4P2 != " " 
       || KM0WM040.KM0WW4P3 != " " 
       || KM0WM040.KM0WW4P4 != " ")
         /* next sentence*/
      else
        if (KM0WM040.KM0WW4P5 != " ")
          set KM0WM040.KM0WW4P1 cursor, modified, bold;
          converseLib.validationFailed(155); /* prv val cant be only param*/
        else
          set KM0WM040.KM0WW4P1 cursor, modified, bold;
          converseLib.validationFailed(156); /* must use a param*/
        end
      end
    end
  end
  ;
   /* ****** check cust unit status field ***********/
  ;
    /* must be a or i*/
  ;
  if (KM0WM040.XXXSTAT[1] is modified
   || KM0WM040.KM0WW3P1 is modified
   || KM0WM040.XXXSTAT[1] != " ")
    set KM0WM040.XXXSTAT[1] initialAttributes;
    if (KM0WM040.XXXSTAT[1] != " ")
      if (KM0WM040.XXXSTAT[1] != "A"
       && KM0WM040.XXXSTAT[1] != "I")
        converseLib.validationFailed(162);
        set KM0WM040.XXXSTAT[1] cursor, modified, bold;
      else
         /* next sentence*/
      end
      if (KM0WM040.KM0WW3P1 != " " /* if any param besides prv val*/
       || KM0WM040.KM0WW3P2 != " " 
       || KM0WM040.KM0WW3P3 != " " 
       || KM0WM040.KM0WW3P4 != " ")
         /* next sentence*/
      else
        if (KM0WM040.KM0WW3P5 != " ")
          set KM0WM040.KM0WW3P1 cursor, modified, bold;
          converseLib.validationFailed(155); /* prv val cant be only param*/
        else
          set KM0WM040.KM0WW3P1 cursor, modified, bold;
          converseLib.validationFailed(156); /* must use a param*/
        end
      end
    end
  end
  ;
   /* ****** check assgn control cat field *********/
  ;
  if (KM0WM040.XACCD[1] is modified
   || KM0WM040.KM0WW2P1 is modified
   || KM0WM040.XACCD[1] != " ")
    set KM0WM040.XACCD[1] initialAttributes;
    if (KM0WM040.XACCD[1] != " ") /* if field not used skip*/
      KM0WS15();
      if (KM0WM040.KM0WW2P1 != " " /* if any param besides prv val*/
       || KM0WM040.KM0WW2P2 != " " 
       || KM0WM040.KM0WW2P3 != " " 
       || KM0WM040.KM0WW2P4 != " ")
         /* next sentence*/
      else
        if (KM0WM040.KM0WW2P5 != " ")
          set KM0WM040.KM0WW2P1 cursor, modified, bold;
          converseLib.validationFailed(155); /* prv val cant be only param*/
        else
          set KM0WM040.KM0WW2P1 cursor, modified, bold;
          converseLib.validationFailed(156); /* must use a param*/
        end
      end
    end
  end
  ;
  ;
  KM0WW01.KM0WWMFL = "040";
  ;
  if (converseVar.validationMsgNum == 0)
    if (converseVar.eventKey is pf12)
      KM0WS18();
    end
  end
end // end KM0W040

// converse cust unit map2
Function KM0W050()
  KM0WSS0(); /* check field security*/
   /* ****** autoskip fields moved to company*/
   /* ****** 12/12/90*/
  set KM0WM050.KUNPORFL[1] skip;
  set KM0WM050.KM0WW4P1 skip;
  set KM0WM050.KUCCOID[4] skip;
  set KM0WM050.KM0WW4P2 skip;
  set KM0WM050.KUCGRPID[4] skip;
  set KM0WM050.KM0WW4P3 skip;
  set KM0WM050.KUMSTRID[4] skip;
  set KM0WM050.KM0WW4P4 skip;
  set KM0WM050.XGPCD[4] skip;
  set KM0WM050.KM0WW4P5 skip;
  set KM0WM050.KUNPORFL[2] skip;
  ;
   /* 03/91 added vend auth fields to this list*/
  set KM0WM050.KUNCRFL[1] skip;
  set KM0WM050.KM0WW2P1 skip;
  set KM0WM050.KUCCOID[2] skip;
  set KM0WM050.KM0WW2P2 skip;
  set KM0WM050.KUCGRPID[2] skip;
  set KM0WM050.KM0WW2P3 skip;
  set KM0WM050.KUMSTRID[2] skip;
  set KM0WM050.KM0WW2P4 skip;
  set KM0WM050.XGPCD[2] skip;
  set KM0WM050.KM0WW2P5 skip;
  set KM0WM050.KUNCRFL[2] skip;
  ;
   /* 04/91 added call class codes to this list*/
  set KM0WM050.YCLCD[1] skip;
  set KM0WM050.KM0WW6P1 skip;
  set KM0WM050.KUCCOID[5] skip;
  set KM0WM050.KM0WW6P2 skip;
  set KM0WM050.KUMSTRID[5] skip;
  set KM0WM050.KM0WW6P3 skip;
  set KM0WM050.XGPCD[5] skip;
  set KM0WM050.KM0WW6P4 skip;
  set KM0WM050.YCLCD[2] skip;
  ;
   /* 06/91 added order confirm to this list*/
  set KM0WM050.KM0WXCI[1] skip;
  set KM0WM050.KM0WW3P1 skip;
  set KM0WM050.KUCCOID[3] skip;
  set KM0WM050.KM0WW3P2 skip;
  set KM0WM050.KUCGRPID[3] skip;
  set KM0WM050.KM0WW3P3 skip;
  set KM0WM050.KUMSTRID[3] skip;
  set KM0WM050.KM0WW3P4 skip;
  set KM0WM050.XGPCD[3] skip;
  set KM0WM050.KM0WW3P5 skip;
  set KM0WM050.KM0WXCI[2] skip;
  ;
  converse KM0WM050 ;
  ;
  KM0WM050.VAGen_EZEMSG = " ";
  KM0WM050.KM0WMMSG = " ";
  ;
   /* --------------- check aid byte ---------------------*/
  ;
  KM0WSS1(); /* check standard pf keys*/
  KM0WM050.KM0WMMSG = KM0WW01.KM0WWMSG;
  if (converseVar.validationMsgNum != 0 /* invalid pf*/
   || KM0WM050.KM0WMMSG != " ")         /* invalid security*/
    exit stack;
  end
  ;
   /* --------   check for fastpath  --------------*/
  ;
  if (KM0WM050.KM0WMOPT > " ") /* fastpath request*/
    COMMAREA.CATOAP = KM0WM050.KM0WMOPT;
    COMMAREA.CAITEM = KM0WM050.KM0WMITM;
    XSEXIT(); /* check security/xfer*/
    KM0WM050.KM0WMMSG = COMMAREA.CAMSG; /* security failed*/
    COMMAREA.CAMSG = " ";
    COMMAREA.CATOAP = " ";
    exit stack;
  end
  ;
  set KM0WM050.KM0WW1P1 initialAttributes;
  set KM0WM050.KM0WW1P2 initialAttributes;
  set KM0WM050.KM0WW1P3 initialAttributes;
  set KM0WM050.KM0WW1P4 initialAttributes;
  set KM0WM050.KM0WW1P5 initialAttributes;
  set KM0WM050.KM0WW1P6 initialAttributes;
  set KM0WM050.KM0WW2P1 initialAttributes;
  set KM0WM050.KM0WW2P2 initialAttributes;
  set KM0WM050.KM0WW2P3 initialAttributes;
  set KM0WM050.KM0WW2P4 initialAttributes;
  set KM0WM050.KM0WW2P5 initialAttributes;
  set KM0WM050.KM0WW3P1 initialAttributes;
  set KM0WM050.KM0WW3P2 initialAttributes;
  set KM0WM050.KM0WW3P3 initialAttributes;
  set KM0WM050.KM0WW3P4 initialAttributes;
  set KM0WM050.KM0WW3P5 initialAttributes;
  set KM0WM050.KM0WW4P1 initialAttributes;
  set KM0WM050.KM0WW4P2 initialAttributes;
  set KM0WM050.KM0WW4P3 initialAttributes;
  set KM0WM050.KM0WW4P4 initialAttributes;
  set KM0WM050.KM0WW4P5 initialAttributes;
  ;
   /* perform basic edits for the parameters*/
  ;
  KM0WS29();
  ;
   /* ****** check po nbr field  ***********/
  ;
    /* must be y or n*/
  ;
  if (KM0WM050.KUNPORFL[1] is modified
   || KM0WM050.KM0WW4P1 is modified
   || KM0WM050.KUNPORFL[1] != " ")
    set KM0WM050.KUNPORFL[1] initialAttributes;
    if (KM0WM050.KUNPORFL[1] != " ")
      if (KM0WM050.KUNPORFL[1] != "Y"
       && KM0WM050.KUNPORFL[1] != "N")
        converseLib.validationFailed(20);
        set KM0WM050.KUNPORFL[1] cursor, modified, bold;
      end
      if (KM0WM050.KM0WW4P1 != " " /* if any param besides prv val*/
       || KM0WM050.KM0WW4P2 != " " /* then perform edit*/
       || KM0WM050.KM0WW4P3 != " " 
       || KM0WM050.KM0WW4P4 != " ")
         /* next sentence*/
      else
        if (KM0WM050.KM0WW4P5 != " ")
          set KM0WM050.KM0WW4P1 cursor, modified, bold;
          converseLib.validationFailed(155); /* prv val cant be only param*/
        else
          set KM0WM050.KM0WW4P1 cursor, modified, bold;
          converseLib.validationFailed(156); /* must use a param*/
        end
      end
    end
  end
  ;
   /* ****** check order field ***********/
  ;
  ;
   /* F KM0WM050.km0wxci(1) IS MODIFIED;*/
   /* OR KM0WM050.KM0WW3P1 IS MODIFIED;*/
   /* OR KM0WM050.km0wxci(1) NE ' ';*/
   /* SET KM0WM050.km0wxci(1) DEFINED;*/
   /* IF KM0WM050.km0wxci(1) NE ' ';*/
     /* IF KM0WM050.km0wxci(1) IN XCITBL.km0wxci;*/
       /* IF XCITBL.XXXSTAT(EZETST) EQ 'A';*/
         /* ;next sentence*/
       /* ELSE ;*/
         /* MOVE 17 TO EZEMNO;*/
         /* SET KM0WM050.km0wxci(1) CURSOR,MODIFIED,BRIGHT;*/
       /* END ;*/
     /* ELSE ;*/
  converseLib.validationFailed(17);
       /* SET KM0WM050.km0wxci(1) CURSOR,MODIFIED,BRIGHT;*/
     /* END ;*/
     /* IF KM0WM050.KM0WW3P1 NE ' ' ;if any param besides prv val*/
       /* OR KM0WM050.KM0WW3P2 NE ' '      ;   then perform edit*/
       /* OR KM0WM050.KM0WW3P3 NE ' ';*/
       /* OR KM0WM050.KM0WW3P4 NE ' ';*/
       /* ; next sentence*/
     /* ELSE ;*/
       /* IF KM0WM050.KM0WW3P5 NE ' ';*/
         /* SET KM0WM050.KM0WW3P1 CURSOR,MODIFIED,BRIGHT;*/
         /* MOVE 155 TO EZEMNO;prv val cant be only param*/
       /* ELSE ;*/
         /* SET KM0WM050.KM0WW3P1 CURSOR,MODIFIED,BRIGHT;*/
         /* MOVE 156 TO EZEMNO ;  must use a param*/
       /* END ;*/
     /* END ;*/
   /* END ;*/
   /* nD ;*/
  ;
   /* ****** check vend auth cat field *********/
  ;
    /* must be y or n*/
  ;
  if (KM0WM050.KUNCRFL[1] is modified
   || KM0WM050.KM0WW2P1 is modified
   || KM0WM050.KUNCRFL[1] != " ")
    set KM0WM050.KUNCRFL[1] initialAttributes;
    if (KM0WM050.KUNCRFL[1] != " ")
      if (KM0WM050.KUNCRFL[1] != "Y"
       && KM0WM050.KUNCRFL[1] != "N")
        converseLib.validationFailed(20);
        set KM0WM050.KUNCRFL[1] cursor, modified, bold;
      end
      if (KM0WM050.KM0WW2P1 != " " /* if any param besides prv val*/
       || KM0WM050.KM0WW2P2 != " " /* then perform edit*/
       || KM0WM050.KM0WW2P3 != " " 
       || KM0WM050.KM0WW2P4 != " ")
         /* next sentence*/
      else
        if (KM0WM050.KM0WW2P5 != " ")
          set KM0WM050.KM0WW2P1 cursor, modified, bold;
          converseLib.validationFailed(155); /* prv val cant be only param*/
        else
          set KM0WM050.KM0WW2P1 cursor, modified, bold;
          converseLib.validationFailed(156); /* must use a param*/
        end
      end
    end
  end
  ;
   /* ****** check bo cd/bo qty fields **********/
  ;
    /* must be y or n*/
  ;
  if (KM0WM050.KUNBOCD[1] is modified
   || KM0WM050.KUNBOQTY[1] is modified
   || KM0WM050.KM0WW1P1 is modified
   || KM0WM050.KUNBOCD[1] != " "
   || KM0WM050.KUNBOQTY[1] != 0)
    set KM0WM050.KUNBOCD[1] initialAttributes;
    set KM0WM050.KUNBOQTY[1] initialAttributes;
    if (KM0WM050.KUNBOCD[1] != " ")
      if (KM0WM050.KUNBOCD[1] == "Y")
        if (KM0WM050.KUNBOQTY == 0)
          converseLib.validationFailed(163);
          set KM0WM050.KUNBOQTY cursor, modified, bold;
        end
      else
        if (KM0WM050.KUNBOCD[1] == "N")
          if (KM0WM050.KUNBOQTY != 0)
            converseLib.validationFailed(157);
            set KM0WM050.KUNBOQTY cursor, modified, bold;
          end
        else
          converseLib.validationFailed(20);
          set KM0WM050.KUNBOCD[1] cursor, modified, bold;
        end
      end
      if (KM0WM050.KM0WW1P1 != " " /* if any param besides prv val*/
       || KM0WM050.KM0WW1P2 != " " /* then perform edit*/
       || KM0WM050.KM0WW1P3 != " " 
       || KM0WM050.KM0WW1P4 != " ")
         /* next sentence*/
      else
        if (KM0WM050.KM0WW1P5 != " ")
          set KM0WM050.KM0WW1P1 cursor, modified, bold;
          converseLib.validationFailed(155); /* prv val cant be only param*/
        else
          set KM0WM050.KM0WW1P1 cursor, modified, bold;
          converseLib.validationFailed(156); /* must use a param*/
        end
      end
    else /* IF ITEM BO CODE NOT ENTERED*/
      if (KM0WM050.KUNBOQTY == 0) /* if min bo qty = 0*/
        /* next sentence           ;ok*/
      else /* if min bo qty = any amount*/
        converseLib.validationFailed(114);
        set KM0WM050.KUNBOCD[1] cursor, modified, bold;
      end
    end
  end
  ;
  KM0WW01.KM0WWMFL = "050";
  ;
  if (converseVar.validationMsgNum == 0)
    if (converseVar.eventKey is pf12)
      KM0WS19();
    end
  end
end // end KM0W050

// converse cust unit map3
Function KM0W060()
  KM0WSS0(); /* check field security*/
  converse KM0WM060 ;
  ;
  KM0WM060.VAGen_EZEMSG = " ";
  KM0WM060.KM0WMMSG = " ";
  ;
   /* --------------- check aid byte ---------------------*/
  ;
  KM0WSS1(); /* check standard pf keys*/
  KM0WM060.KM0WMMSG = KM0WW01.KM0WWMSG;
  if (converseVar.validationMsgNum != 0 /* invalid pf*/
   || KM0WM060.KM0WMMSG != " ")         /* invalid security*/
    exit stack;
  end
  ;
   /* --------   check for fastpath  --------------*/
  ;
  if (KM0WM060.KM0WMOPT > " ") /* fastpath request*/
    COMMAREA.CATOAP = KM0WM060.KM0WMOPT;
    COMMAREA.CAITEM = KM0WM060.KM0WMITM;
    XSEXIT(); /* check security/xfer*/
    KM0WM060.KM0WMMSG = COMMAREA.CAMSG; /* security failed*/
    COMMAREA.CAMSG = " ";
    COMMAREA.CATOAP = " ";
    exit stack;
  end
  ;
  ;
  set KM0WM060.KM0WW1P1 initialAttributes;
  set KM0WM060.KM0WW1P2 initialAttributes;
  set KM0WM060.KM0WW1P3 initialAttributes;
  set KM0WM060.KM0WW1P4 initialAttributes;
  set KM0WM060.KM0WW1P5 initialAttributes;
  set KM0WM060.KM0WW2P1 initialAttributes;
  set KM0WM060.KM0WW2P2 initialAttributes;
  set KM0WM060.KM0WW2P3 initialAttributes;
  set KM0WM060.KM0WW2P4 initialAttributes;
  set KM0WM060.KM0WW2P5 initialAttributes;
  set KM0WM060.KM0WW3P1 initialAttributes;
  set KM0WM060.KM0WW3P2 initialAttributes;
  set KM0WM060.KM0WW3P3 initialAttributes;
  set KM0WM060.KM0WW3P4 initialAttributes;
  set KM0WM060.KM0WW3P5 initialAttributes;
  set KM0WM060.KM0WW3P6 initialAttributes;
  set KM0WM060.KM0WW4P1 initialAttributes;
  set KM0WM060.KM0WW4P2 initialAttributes;
  set KM0WM060.KM0WW4P3 initialAttributes;
  set KM0WM060.KM0WW4P4 initialAttributes;
  set KM0WM060.KM0WW4P5 initialAttributes;
  set KM0WM060.KM0WW4P6 initialAttributes;
  set KM0WM060.KM0WW4P7 initialAttributes;
  set KM0WM060.KUNSPCD[2] initialAttributes;
  ;
   /* perform basic parameter edits*/
  ;
  KM0WS30();
  ;
   /* ****** check special labels fields ***********/
  ;
  if (KM0WM060.KUSTEXT1[1] is modified
   || KM0WM060.KUSTEXT2[1] is modified
   || KM0WM060.KM0WWNBL[1] is modified
   || KM0WM060.KM0WWNBL[2] is modified
   || KM0WM060.KM0WW4P1 is modified)
    set KM0WM060.KUSTEXT1[1] initialAttributes;
    set KM0WM060.KUSTEXT2[1] initialAttributes;
    if (KM0WM060.KUSTEXT1[1] != " "
     || KM0WM060.KUSTEXT2[1] != " "
     || KM0WM060.KM0WWNBL[1] != " "
     || KM0WM060.KM0WWNBL[2] != " ")
      if (KM0WM060.KUSTEXT2[1] != " "
       && KM0WM060.KM0WWNBL[2] != " ")
        converseLib.validationFailed(166); /* cannot have blank and filled values*/
        set KM0WM060.KUSTEXT2[1] cursor, modified, bold;
      end
      if (KM0WM060.KUSTEXT1[1] != " "
       && KM0WM060.KM0WWNBL[1] != " ")
        converseLib.validationFailed(166); /* cannot have blank and filled values*/
        set KM0WM060.KUSTEXT1[1] cursor, modified, bold;
      end
      if (KM0WM060.KM0WW4P1 != " " /* if any param besides prv val*/
       || KM0WM060.KM0WW4P2 != " " 
       || KM0WM060.KM0WW4P3 != " " 
       || KM0WM060.KM0WW4P4 != " " 
       || KM0WM060.KM0WW4P5 != " ")
         /* next sentence*/
      else
        if (KM0WM060.KM0WW4P6 != " "
         || KM0WM060.KM0WW4P7 != " ")
          set KM0WM060.KM0WW4P1 cursor, modified, bold;
          converseLib.validationFailed(155); /* prv val cant be only param*/
        else
          set KM0WM060.KM0WW4P1 cursor, modified, bold;
          converseLib.validationFailed(156); /* must use a param*/
        end
      end
    end
  end
  ;
   /* ****** check sport activity field ***********/
  ;
  if (KM0WM060.KUNSPCD[1] is modified
   || KM0WM060.KM0WW3P1 is modified
   || KM0WM060.KM0WW3P5 is modified
   || KM0WM060.KM0WW3P6 is modified)
    set KM0WM060.KUNSPCD[1] initialAttributes;
    if (KM0WM060.KUNSPCD[1] != " ")
      if (KM0WM060.KM0WW3P6 == " ")
        set KM0WM060.KUNSPCD[2] modified, bold;
        set KM0WM060.KM0WW3P6 cursor, modified, bold;
        converseLib.validationFailed(114);
      end
      KM0WS16();
      if (KM0WM060.KM0WW3P1 != " " /* if any param besides prv val*/
       || KM0WM060.KM0WW3P2 != " " 
       || KM0WM060.KM0WW3P3 != " " 
       || KM0WM060.KM0WW3P4 != " " 
       || KM0WM060.KM0WW3P5 != " ")
         /* next sentence*/
      else
        if (KM0WM060.KM0WW3P6 != " ")
          set KM0WM060.KM0WW3P1 cursor, modified, bold;
          converseLib.validationFailed(155); /* prv val cant be only param*/
        else
          set KM0WM060.KM0WW3P1 cursor, modified, bold;
          converseLib.validationFailed(156); /* must use a param*/
        end
      end
    end
  end
  ;
   /* ****** check subs field *********/
  ;
    /* must be y or n*/
  ;
  if (KM0WM060.KUNNOSFL[1] is modified
   || KM0WM060.KM0WW2P1 is modified)
    set KM0WM060.KUNNOSFL[1] initialAttributes;
    if (KM0WM060.KUNNOSFL[1] != " ")
      if (KM0WM060.KUNNOSFL[1] != "Y"
       && KM0WM060.KUNNOSFL[1] != "N")
        converseLib.validationFailed(20);
        set KM0WM060.KUNNOSFL[1] cursor, modified, bold;
      end
      if (KM0WM060.KM0WW2P1 != " " /* if any param besides prv val*/
       || KM0WM060.KM0WW2P2 != " " 
       || KM0WM060.KM0WW2P3 != " " 
       || KM0WM060.KM0WW2P4 != " ")
         /* next sentence*/
      else
        if (KM0WM060.KM0WW2P5 != " ")
          set KM0WM060.KM0WW2P1 cursor, modified, bold;
          converseLib.validationFailed(155); /* prv val cant be only param*/
        else
          set KM0WM060.KM0WW2P1 cursor, modified, bold;
          converseLib.validationFailed(156); /* must use a param*/
        end
      end
    end
  end
  ;
   /* ****** check chg field **********/
  ;
    /* must be y or n*/
  ;
  if (KM0WM060.KUNCAFL[1] is modified
   || KM0WM060.KM0WW1P1 is modified)
    set KM0WM060.KUNCAFL[1] initialAttributes;
    if (KM0WM060.KUNCAFL[1] != " ")
      if (KM0WM060.KUNCAFL[1] != "Y"
       && KM0WM060.KUNCAFL[1] != "N")
        converseLib.validationFailed(20);
        set KM0WM060.KUNCAFL[1] cursor, modified, bold;
      end
      if (KM0WM060.KM0WW1P1 != " " /* if any param besides prv val*/
       || KM0WM060.KM0WW1P2 != " " 
       || KM0WM060.KM0WW1P3 != " " 
       || KM0WM060.KM0WW1P4 != " ")
         /* next sentence*/
      else
        if (KM0WM060.KM0WW1P5 != " ")
          set KM0WM060.KM0WW1P1 cursor, modified, bold;
          converseLib.validationFailed(155); /* prv val cant be only param*/
        else
          set KM0WM060.KM0WW1P1 cursor, modified, bold;
          converseLib.validationFailed(156); /* must use a param*/
        end
      end
    end
  end
  ;
  KM0WW01.KM0WWMFL = "060";
  ;
  if (converseVar.validationMsgNum == 0)
    if (converseVar.eventKey is pf12)
      KM0WS20();
    end
  end
end // end KM0W060

// converse list of cmpny map
Function KM0W070()
  KM0WSS0(); /* check field security*/
   /* GET KM0WSS4*/
  set KM0WM070.KM0WMSTM skip; /* send statement ind*/
  set KM0WM070.KM0WW7P1 skip; /* select option*/
  ;
  converse KM0WM070 ;
  ;
  KM0WM070.VAGen_EZEMSG = " ";
  KM0WM070.KM0WMMSG = " ";
  ;
   /* --------------- check aid byte ---------------------*/
  ;
  KM0WSS1(); /* check standard pf keys*/
  KM0WM070.KM0WMMSG = KM0WW01.KM0WWMSG;
  if (converseVar.validationMsgNum != 0 /* invalid pf*/
   || KM0WM070.KM0WMMSG != " ")         /* invalid security*/
    exit stack;
  end
  ;
   /* --------   check for fastpath  --------------*/
  ;
  if (KM0WM070.KM0WMOPT > " ") /* fastpath request*/
    COMMAREA.CATOAP = KM0WM070.KM0WMOPT;
    COMMAREA.CAITEM = KM0WM070.KM0WMITM;
    XSEXIT(); /* check security/xfer*/
    KM0WM070.KM0WMMSG = COMMAREA.CAMSG; /* security failed*/
    COMMAREA.CAMSG = " ";
    COMMAREA.CATOAP = " ";
    exit stack;
  end
  ;
  ;
  set KM0WM070.XXXSTAT initialAttributes;
  set KM0WM070.KUCCONM initialAttributes;
  set KM0WM070.XCUCD[1] initialAttributes;
  set KM0WM070.XCUCD[2] initialAttributes;
  set KM0WM070.KUCIDIND initialAttributes;
  set KM0WM070.KM0WMMTH initialAttributes;
  set KM0WM070.KM0WMYR initialAttributes;
  set KM0WM070.KUCCOID[1] initialAttributes;
   /* SET KM0WM070.Km0wmSTM DEFINED;*/
  ;
   /* below will check that a company param was entered*/
  ;
  if (KM0WM070.KUCCOID[1] == 0)
    set KM0WM070.KUCCOID[1] cursor, modified, bold;
    converseLib.validationFailed(156); /* must use a param*/
  end
  ;
   /* ****** check send statement *********/
  ;
  if (KM0WM070.KM0WW7P1 is modified
   || KM0WM070.KM0WMSTM is modified
   || KM0WM070.KM0WMSTM != " ")
    set KM0WM070.KM0WW7P1 initialAttributes;
    if (KM0WM070.KM0WW7P1 != " ") /* if field used*/
      if (KM0WM070.KM0WMSTM != "Y" /* field must be y or n*/
       && KM0WM070.KM0WMSTM != "N")
        converseLib.validationFailed(20);
        set KM0WM070.KM0WMSTM cursor, modified, bold;
      end
    end
  end
  ;
   /* ****** check invoice delay **********/
  ;
  if (KM0WM070.KM0WW6P1 is modified
   || KM0WM070.KUCIDIND is modified
   || KM0WM070.KUCIDIND != " ")
    set KM0WM070.KM0WW6P1 initialAttributes;
    if (KM0WM070.KM0WW6P1 != " ") /* if field used*/
      if (KM0WM070.KUCIDIND != "Y" /* field must be y or n*/
       && KM0WM070.KUCIDIND != "N")
        converseLib.validationFailed(20);
        set KM0WM070.KUCIDIND cursor, modified, bold;
      end
    end
  end
  ;
   /* ****** check credit resp **********/
  ;
  if (KM0WM070.KM0WW5P1 is modified
   || KM0WM070.XCUCD[2] is modified
   || KM0WM070.XCUCD[2] != " ")
    set KM0WM070.KM0WW5P1 initialAttributes;
    if (KM0WM070.KM0WW5P1 != " ") /* if field used*/
      KM0WS45(); /* edit credit resp*/
    end
  end
  ;
   /* ****** check company status **********/
  ;
  if (KM0WM070.KM0WW4P1 is modified
   || KM0WM070.XXXSTAT is modified
   || KM0WM070.XXXSTAT != " ")
    set KM0WM070.KM0WW4P1 initialAttributes;
    if (KM0WM070.KM0WW4P1 != " ") /* if field used*/
      if (KM0WM070.XXXSTAT != "A" /* field must be a or i*/
       && KM0WM070.XXXSTAT != "I")
        converseLib.validationFailed(162);
        set KM0WM070.XXXSTAT cursor, modified, bold;
      end
    end
  end
  ;
  ;
   /* ****** check analyst code ************/
  ;
  if (KM0WM070.KM0WW3P1 is modified
   || KM0WM070.XCUCD[1] is modified
   || KM0WM070.XCUCD[1] != " ")
    set KM0WM070.KM0WW3P1 initialAttributes;
    if (KM0WM070.KM0WW3P1 != " ") /* if field used*/
      KM0WS43();
    end
  end
  ;
   /* ****** check credit line xdate ************/
  ;
  if (KM0WM070.KM0WW2P1 is modified
   || KM0WM070.KM0WMMTH is modified
   || KM0WM070.KM0WMYR is modified
   || KM0WM070.KM0WMMTH != 0
   || KM0WM070.KM0WMYR != 0)
    set KM0WM070.KM0WW2P1 initialAttributes;
    if (KM0WM070.KM0WW2P1 != " ") /* if field used*/
      ;
  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF KM0WM070.KM0WMYR EQ 0;          /* field must be filled in*/
  /* MOVE 114 TO EZEMNO;*/
  /* SET KM0WM070.KM0WMYR CURSOR,MODIFIED,BRIGHT;*/
  /* END;*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/
      ;
      if (KM0WM070.KM0WMMTH >= 1
       && KM0WM070.KM0WMMTH <= 12)
         /* next sentence*/
      else
        converseLib.validationFailed(52);
        set KM0WM070.KM0WMMTH cursor, modified, bold;
      end
    end
  end
  ;
   /* ****** check company name ***********/
  ;
  if (KM0WM070.KM0WW1P1 is modified
   || KM0WM070.KUCCONM is modified
   || KM0WM070.KUCCONM != " ")
    set KM0WM070.KM0WW1P1 initialAttributes;
    if (KM0WM070.KM0WW1P1 != " ") /* if field used*/
      if (KM0WM070.KUCCONM == " ") /* cannot be blank*/
        converseLib.validationFailed(114);
        set KM0WM070.KUCCONM cursor, modified, bold;
      end
    end
  end
  ;
   /* this will check if param entered but 'x' not in front of it*/
  ;
  ;
  if (KM0WM070.KM0WMSTM != " ")
    if (KM0WM070.KM0WW7P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM070.KM0WW7P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM070.KUCIDIND != " ")
    if (KM0WM070.KM0WW6P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM070.KM0WW6P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM070.XCUCD[2] != " ")
    if (KM0WM070.KM0WW5P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM070.KM0WW5P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM070.XXXSTAT != " ")
    if (KM0WM070.KM0WW4P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM070.KM0WW4P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM070.XCUCD[1] != " ")
    if (KM0WM070.KM0WW3P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM070.KM0WW3P1 cursor, modified, bold;
    end
  end
  ;
  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF KM0WM070.KM0WMMTH NE 0*/
  /* OR KM0WM070.KM0WMYR NE 0;*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/
  ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
  if (KM0WM070.KM0WMMTH != 0)
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/
    ;
    if (KM0WM070.KM0WW2P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM070.KM0WW2P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM070.KUCCONM != " ")
    if (KM0WM070.KM0WW1P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM070.KM0WW1P1 cursor, modified, bold;
    end
  end
  ;
    /* this will check that only one field is used*/
  ;
  if (KM0WM070.KM0WW1P1 is modified
   || KM0WM070.KM0WW2P1 is modified
   || KM0WM070.KM0WW3P1 is modified
   || KM0WM070.KM0WW4P1 is modified
   || KM0WM070.KM0WW5P1 is modified
   || KM0WM070.KM0WW6P1 is modified
   || KM0WM070.KM0WW7P1 is modified)
    if (KM0WM070.KM0WW1P1 != " ")
                                   /* only one field per list of co's*/
      if (KM0WM070.KM0WW2P1 != " "
       || KM0WM070.KM0WW3P1 != " "
       || KM0WM070.KM0WW4P1 != " "
       || KM0WM070.KM0WW5P1 != " "
       || KM0WM070.KM0WW6P1 != " "
       || KM0WM070.KM0WW7P1 != " ")
        converseLib.validationFailed(11);
        set KM0WM070.KM0WW7P1 cursor, modified, bold;
        set KM0WM070.KM0WW6P1 cursor, modified, bold;
        set KM0WM070.KM0WW5P1 cursor, modified, bold;
        set KM0WM070.KM0WW4P1 cursor, modified, bold;
        set KM0WM070.KM0WW3P1 cursor, modified, bold;
        set KM0WM070.KM0WW2P1 cursor, modified, bold;
        set KM0WM070.KM0WW1P1 cursor, modified, bold;
      end
    else
      if (KM0WM070.KM0WW2P1 != " ") /* we know that 1p1 is blank*/
        if (KM0WM070.KM0WW3P1 != " "
         || KM0WM070.KM0WW4P1 != " "
         || KM0WM070.KM0WW5P1 != " "
         || KM0WM070.KM0WW6P1 != " "
         || KM0WM070.KM0WW7P1 != " ")
          converseLib.validationFailed(11);
          set KM0WM070.KM0WW7P1 cursor, modified, bold;
          set KM0WM070.KM0WW6P1 cursor, modified, bold;
          set KM0WM070.KM0WW5P1 cursor, modified, bold;
          set KM0WM070.KM0WW4P1 cursor, modified, bold;
          set KM0WM070.KM0WW3P1 cursor, modified, bold;
          set KM0WM070.KM0WW2P1 cursor, modified, bold;
          set KM0WM070.KM0WW1P1 cursor, modified, bold;
        end
      else
        if (KM0WM070.KM0WW3P1 != " ") /* we know that 1p1 and 2p1 are blank*/
          if (KM0WM070.KM0WW4P1 != " "
           || KM0WM070.KM0WW5P1 != " "
           || KM0WM070.KM0WW6P1 != " "
           || KM0WM070.KM0WW7P1 != " ")
            converseLib.validationFailed(11);
            set KM0WM070.KM0WW7P1 cursor, modified, bold;
            set KM0WM070.KM0WW6P1 cursor, modified, bold;
            set KM0WM070.KM0WW5P1 cursor, modified, bold;
            set KM0WM070.KM0WW4P1 cursor, modified, bold;
            set KM0WM070.KM0WW3P1 cursor, modified, bold;
            set KM0WM070.KM0WW2P1 cursor, modified, bold;
            set KM0WM070.KM0WW1P1 cursor, modified, bold;
          end
        else
          if (KM0WM070.KM0WW4P1 != " ") /* we know that 1p1 and 2p1 and*/
            if (KM0WM070.KM0WW5P1 != " " /* 3p1 are blank*/
             || KM0WM070.KM0WW6P1 != " " 
             || KM0WM070.KM0WW7P1 != " ")
              converseLib.validationFailed(11);
              set KM0WM070.KM0WW7P1 cursor, modified, bold;
              set KM0WM070.KM0WW6P1 cursor, modified, bold;
              set KM0WM070.KM0WW5P1 cursor, modified, bold;
              set KM0WM070.KM0WW4P1 cursor, modified, bold;
              set KM0WM070.KM0WW3P1 cursor, modified, bold;
              set KM0WM070.KM0WW2P1 cursor, modified, bold;
              set KM0WM070.KM0WW1P1 cursor, modified, bold;
            end
          else
            if (KM0WM070.KM0WW5P1 != " ") /* we know that 1p1 and 2p1 and*/
              if (KM0WM070.KM0WW6P1 != " " /* 3p1 and 4p1 are blank*/
               || KM0WM070.KM0WW7P1 != " ")
                converseLib.validationFailed(11);
                set KM0WM070.KM0WW7P1 cursor, modified, bold;
                set KM0WM070.KM0WW6P1 cursor, modified, bold;
                set KM0WM070.KM0WW5P1 cursor, modified, bold;
                set KM0WM070.KM0WW4P1 cursor, modified, bold;
                set KM0WM070.KM0WW3P1 cursor, modified, bold;
                set KM0WM070.KM0WW2P1 cursor, modified, bold;
                set KM0WM070.KM0WW1P1 cursor, modified, bold;
              end
            else
              if (KM0WM070.KM0WW6P1 != " ") /* 3p1 and 4p1 are blank*/
                if (KM0WM070.KM0WW7P1 != " ")
                  converseLib.validationFailed(11);
                  set KM0WM070.KM0WW7P1 cursor, modified, bold;
                  set KM0WM070.KM0WW6P1 cursor, modified, bold;
                  set KM0WM070.KM0WW5P1 cursor, modified, bold;
                  set KM0WM070.KM0WW4P1 cursor, modified, bold;
                  set KM0WM070.KM0WW3P1 cursor, modified, bold;
                  set KM0WM070.KM0WW2P1 cursor, modified, bold;
                  set KM0WM070.KM0WW1P1 cursor, modified, bold;
                end
              end
            end
          end
        end
      end
    end
  end
  ;
  KM0WW01.KM0WWMFL = "070";
  ;
   /* if number of subscript companies on screen changes must*/
     /* change the 89 below*/
  ;
  KM0WW01.KM0WWIDX = 1;
  if (converseVar.validationMsgNum == 0)
    if (converseVar.eventKey is pf12)
      while (KM0WW01.KM0WWIDX < 89
       && KM0WM070.KUCCOID[KM0WWIDX] != 0)
        KM0WS21();
      end
    end
  end
  KM0WW01.KM0WWIDX = 0;
  ;
end // end KM0W070

// converse store and list cmpny
Function KM0W080()
  KM0WSS0(); /* check field security*/
  ;
   /* ****** autoskip address so user can't mess up*/
   /* ****** short city on store, if want this option*/
   /* ****** back, change cu1120 to update short city*/
   /* ****** 05/10/91*/
  set KM0WM080.KM0WW1P1 skip;
  set KM0WM080.XXXADDR1 skip;
  set KM0WM080.XXXADDR2 skip;
  set KM0WM080.XXXADDR3 skip;
  set KM0WM080.XXXCITY skip;
  set KM0WM080.XSTCD skip;
  set KM0WM080.XXXZIP skip;
  set KM0WM080.XCTCD skip;
  ;
  converse KM0WM080 ;
  ;
  KM0WM080.VAGen_EZEMSG = " ";
  KM0WM080.KM0WMMSG = " ";
  ;
   /* --------------- check aid byte ---------------------*/
  ;
  KM0WSS1(); /* check standard pf keys*/
  KM0WM080.KM0WMMSG = KM0WW01.KM0WWMSG;
  if (converseVar.validationMsgNum != 0 /* invalid pf*/
   || KM0WM080.KM0WMMSG != " ")         /* invalid security*/
    exit stack;
  end
  ;
   /* --------   check for fastpath  --------------*/
  ;
  if (KM0WM080.KM0WMOPT > " ") /* fastpath request*/
    COMMAREA.CATOAP = KM0WM080.KM0WMOPT;
    COMMAREA.CAITEM = KM0WM080.KM0WMITM;
    XSEXIT(); /* check security/xfer*/
    KM0WM080.KM0WMMSG = COMMAREA.CAMSG; /* security failed*/
    COMMAREA.CAMSG = " ";
    COMMAREA.CATOAP = " ";
    exit stack;
  end
  ;
  ;
  set KM0WM080.XXXADDR1 initialAttributes;
  set KM0WM080.XXXADDR2 initialAttributes;
  set KM0WM080.XXXADDR3 initialAttributes;
  set KM0WM080.XXXCITY initialAttributes;
  set KM0WM080.XSTCD initialAttributes;
  set KM0WM080.XXXZIP initialAttributes;
  set KM0WM080.XCTCD initialAttributes;
  set KM0WM080.KUMSTRNM initialAttributes;
  set KM0WM080.KUMSTRID initialAttributes;
  set KM0WM080.KUCCOID[1] initialAttributes;
  ;
   /* below checks that a store id and a company id were entered*/
  ;
  if (KM0WM080.KUCCOID[1] == 0)
    set KM0WM080.KUCCOID[1] cursor, bold;
    converseLib.validationFailed(156); /* must use a param*/
  end
  if (KM0WM080.KUMSTRID is modified)
    set KM0WM080.KUMSTRID modified;
  else
    set KM0WM080.KUMSTRID cursor, bold;
    converseLib.validationFailed(156); /* must use a param*/
  end
  ;
   /* ****** check store name ***********/
  ;
  if (KM0WM080.KM0WW2P1 is modified
   || KM0WM080.KUMSTRNM is modified)
    set KM0WM080.KM0WW2P1 initialAttributes;
    if (KM0WM080.KM0WW2P1 != " ") /* if field used*/
      if (KM0WM080.KUMSTRNM == " ") /* cannot be blank*/
        converseLib.validationFailed(114);
        set KM0WM080.KUMSTRNM cursor, modified, bold;
      end
    end
  end
  ;
   /* ****** check address ************/
  ;
  if (KM0WM080.KM0WW1P1 is modified
   || KM0WM080.XXXADDR1 is modified
   || KM0WM080.XXXADDR2 is modified
   || KM0WM080.XXXADDR3 is modified
   || KM0WM080.XXXCITY is modified
   || KM0WM080.XSTCD is modified
   || KM0WM080.XXXZIP is modified
   || KM0WM080.XCTCD is modified)
    set KM0WM080.KM0WW1P1 initialAttributes;
    if (KM0WM080.KM0WW1P1 != " ") /* if field used*/
      KM0WS22();
    end
  end
  ;
   /* this will check if param entered but 'x' not in front of it*/
  ;
  ;
  if (KM0WM080.KUMSTRNM != " ")
    if (KM0WM080.KM0WW2P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM080.KM0WW2P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM080.XXXADDR1 != " "
   || KM0WM080.XXXADDR2 != " "
   || KM0WM080.XXXADDR3 != " "
   || KM0WM080.XXXCITY != " "
   || KM0WM080.XSTCD != " "
   || KM0WM080.XXXZIP != " "
   || KM0WM080.XCTCD != " ")
    if (KM0WM080.KM0WW1P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM080.KM0WW1P1 cursor, modified, bold;
    end
  end
  ;
   /* below will only one field to be chosen for update req*/
  ;
  if (KM0WM080.KM0WW1P1 is modified
   || KM0WM080.KM0WW2P1 is modified)
    if (KM0WM080.KM0WW1P1 != " "
     /* only one field per list of co's*/
     && KM0WM080.KM0WW2P1 != " ")
      converseLib.validationFailed(11);
      set KM0WM080.KM0WW2P1 cursor, modified, bold;
      set KM0WM080.KM0WW1P1 cursor, modified, bold;
    end
  end
  ;
  KM0WW01.KM0WWMFL = "080";
  ;
   /* below must be chngd where 57, if screen array amount chngs*/
  ;
  KM0WW01.KM0WWIDX = 1;
  if (converseVar.validationMsgNum == 0)
    if (converseVar.eventKey is pf12)
      while (KM0WW01.KM0WWIDX < 57
       && KM0WM080.KUCCOID[KM0WWIDX] != 0)
        KM0WS23();
      end
    end
  end
  KM0WW01.KM0WWIDX = 0;
  ;
end // end KM0W080

// converse cmpny and list store
Function KM0W090()
  KM0WSS0(); /* check field security*/
  converse KM0WM090 ;
  ;
  KM0WM090.VAGen_EZEMSG = " ";
  KM0WM090.KM0WMMSG = " ";
  ;
   /* --------------- check aid byte ---------------------*/
  ;
  KM0WSS1(); /* check standard pf keys*/
  KM0WM090.KM0WMMSG = KM0WW01.KM0WWMSG;
  if (converseVar.validationMsgNum != 0 /* invalid pf*/
   || KM0WM090.KM0WMMSG != " ")         /* invalid security*/
    exit stack;
  end
  ;
   /* --------   check for fastpath  --------------*/
  ;
  if (KM0WM090.KM0WMOPT > " ") /* fastpath request*/
    COMMAREA.CATOAP = KM0WM090.KM0WMOPT;
    COMMAREA.CAITEM = KM0WM090.KM0WMITM;
    XSEXIT(); /* check security/xfer*/
    KM0WM090.KM0WMMSG = COMMAREA.CAMSG; /* security failed*/
    COMMAREA.CAMSG = " ";
    COMMAREA.CATOAP = " ";
    exit stack;
  end
  ;
  ;
  set KM0WM090.XXXSTAT initialAttributes;
  set KM0WM090.KUMSTRNM initialAttributes;
  set KM0WM090.KUCCOID initialAttributes;
  set KM0WM090.KUMSTRID[1] initialAttributes;
  ;
   /* below will allow for loop that builds ws output recs*/
    /* - once modified - a store id field will remain 'modified'*/
         /* must chng 144 below if screen array amount changes*/
  ;
  KM0WW01.KM0WWIDX = 1;
  while (KM0WW01.KM0WWIDX < 144
   && KM0WM090.KUMSTRID[KM0WWIDX] is modified)
    set KM0WM090.KUMSTRID[KM0WWIDX] modified;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
  end
  ;
   /* below checks that one store id is entered and a company id*/
  ;
  if (KM0WM090.KUMSTRID[1] is modified)
     /* next sentence*/
  else
    set KM0WM090.KUMSTRID[1] cursor, bold;
    converseLib.validationFailed(156); /* must use a param*/
  end
  if (KM0WM090.KUCCOID == 0)
    set KM0WM090.KUCCOID cursor, bold;
    converseLib.validationFailed(156); /* must use a param*/
  end
  ;
   /* ****** check store status *********/
  ;
  if (KM0WM090.KM0WW2P1 is modified
   || KM0WM090.XXXSTAT is modified)
    set KM0WM090.KM0WW2P1 initialAttributes;
    if (KM0WM090.KM0WW2P1 != " ") /* if field used*/
      if (KM0WM090.XXXSTAT != "A"
       && KM0WM090.XXXSTAT != "I")
        converseLib.validationFailed(162);
        set KM0WM090.XXXSTAT cursor, modified, bold;
      end
    end
  end
  ;
   /* ****** check store name ***********/
  ;
  if (KM0WM090.KM0WW1P1 is modified
   || KM0WM090.KUMSTRNM is modified)
    set KM0WM090.KM0WW1P1 initialAttributes;
    if (KM0WM090.KM0WW1P1 != " ") /* if field used*/
      if (KM0WM090.KUMSTRNM == " ") /* cannot be blank*/
        converseLib.validationFailed(114);
        set KM0WM090.KUMSTRNM cursor, modified, bold;
      end
    end
  end
  ;
   /* this will check if param entered but 'x' not in front of it*/
  ;
  ;
  if (KM0WM090.XXXSTAT != " ")
    if (KM0WM090.KM0WW2P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM090.KM0WW2P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM090.KUMSTRNM != " ")
    if (KM0WM090.KM0WW1P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM090.KM0WW1P1 cursor, modified, bold;
    end
  end
  ;
   /* this will check that only one field is used*/
  ;
  ;
  if (KM0WM090.KM0WW1P1 is modified
   || KM0WM090.KM0WW2P1 is modified)
    if (KM0WM090.KM0WW1P1 != " "
     && KM0WM090.KM0WW2P1 != " ")
      converseLib.validationFailed(11);
      set KM0WM090.KM0WW2P1 cursor, modified, bold;
      set KM0WM090.KM0WW1P1 cursor, modified, bold;
    end
  end
  ;
  KM0WW01.KM0WWMFL = "090";
  ;
   /* must chng 144 below if screen array amount changes*/
  ;
  KM0WW01.KM0WWIDX = 1;
  if (converseVar.validationMsgNum == 0)
    if (converseVar.eventKey is pf12)
      while (KM0WW01.KM0WWIDX < 144
       && KM0WM090.KUMSTRID[KM0WWIDX] is modified)
        KM0WS24();
      end
    end
  end
  KM0WW01.KM0WWIDX = 0;
  ;
end // end KM0W090

// add global chng requests
Function KM0W110()
  KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
  if (KM0WW01.KM0WWOUT[KM0WWIDX] == " ")
    exit stack;
  end
  KM0WW01.KM0WWMS2 = KM0WW01.KM0WWIDX;
  KU1REC.KU1ALL = KM0WW01.KM0WWOUT[KM0WWIDX];
  try
    add KU1REC ;
    onException exit stack KM0W120 ;
  end
end // end KM0W110

// error routine for adding recs
Function KM0W120()
  ;
  if (sysVar.errorCode != "00000000")
    KM0WW01.KM0WWMSG = "FATAL ERROR - EXIT & NOTIFY SYSTEM ADMIN";
  end
  ;
end // end KM0W120

// converse restrictions map
Function KM0W130()
  KM0WSS0(); /* check field security*/
  converse KM0WM130 ;
  ;
  KM0WM130.VAGen_EZEMSG = " ";
  KM0WM130.KM0WMMSG = " ";
  ;
   /* --------------- check aid byte ---------------------*/
  ;
  KM0WSS1(); /* check standard pf keys*/
  KM0WM130.KM0WMMSG = KM0WW01.KM0WWMSG;
  if (converseVar.validationMsgNum != 0 /* invalid pf*/
   || KM0WM130.KM0WMMSG != " ")         /* invalid security*/
    exit stack;
  end
  ;
   /* --------   check for fastpath  --------------*/
  ;
  if (KM0WM130.KM0WMOPT > " ") /* fastpath request*/
    COMMAREA.CATOAP = KM0WM130.KM0WMOPT;
    COMMAREA.CAITEM = KM0WM130.KM0WMITM;
    XSEXIT(); /* check security/xfer*/
    KM0WM130.KM0WMMSG = COMMAREA.CAMSG; /* security failed*/
    COMMAREA.CAMSG = " ";
    COMMAREA.CATOAP = " ";
    exit stack;
  end
  ;
  ;
  set KM0WM130.KM0WW1P1 initialAttributes;
  set KM0WM130.KM0WW1P2 initialAttributes;
  set KM0WM130.KM0WW1P3 initialAttributes;
  set KM0WM130.KM0WW1P4 initialAttributes;
  set KM0WM130.KM0WW1P5 initialAttributes;
  set KM0WM130.KM0WW1P6 initialAttributes;
  set KM0WM130.KM0WW1P7 initialAttributes;
  set KM0WM130.KM0WW2P1 initialAttributes;
  set KM0WM130.KM0WW2P2 initialAttributes;
  set KM0WM130.KM0WW2P3 initialAttributes;
  set KM0WM130.KM0WW2P4 initialAttributes;
  set KM0WM130.KM0WW2P5 initialAttributes;
  set KM0WM130.KM0WW2P6 initialAttributes;
  set KM0WM130.KM0WW2P7 initialAttributes;
  set KM0WM130.KM0WW3P1 initialAttributes;
  set KM0WM130.KM0WW3P2 initialAttributes;
  set KM0WM130.KM0WW3P3 initialAttributes;
  set KM0WM130.KM0WW3P4 initialAttributes;
  set KM0WM130.KM0WW3P5 initialAttributes;
  set KM0WM130.KM0WW3P6 initialAttributes;
  set KM0WM130.KM0WW3P7 initialAttributes;
  ;
   /* perform basic parameter edits*/
  ;
  KM0WS38();
  ;
   /* ****** check quality restriction field *******/
  ;
  if (KM0WM130.KUNQLIND[1] is modified
   || KM0WM130.KUNQLIND[2] is modified
   || KM0WM130.XQACD[1] is modified
   || KM0WM130.KM0WWNBL[3] is modified
   || KM0WM130.KM0WW3P1 is modified
   || KM0WM130.KM0WW3P6 is modified
   || KM0WM130.KM0WW3P7 is modified)
    set KM0WM130.KUNQLIND[1] initialAttributes;
    set KM0WM130.XQACD[1] initialAttributes;
    if (KM0WM130.KUNQLIND[1] != " "
     || KM0WM130.XQACD[1] != " "
     || KM0WM130.KM0WWNBL[3] != " ")
      KM0WS39();
      if (KM0WM130.KM0WW3P1 != " " /* if any param besides prv val*/
       || KM0WM130.KM0WW3P2 != " " 
       || KM0WM130.KM0WW3P3 != " " 
       || KM0WM130.KM0WW3P4 != " " 
       || KM0WM130.KM0WW3P5 != " ")
         /* next sentence*/
      else
        if (KM0WM130.KM0WW3P6 != " "
         || KM0WM130.KM0WW3P7 != " ")
          set KM0WM130.KM0WW3P1 cursor, modified, bold;
          converseLib.validationFailed(155); /* prv val cant be only param*/
        else
          set KM0WM130.KM0WW3P1 cursor, modified, bold;
          converseLib.validationFailed(156); /* must use a param*/
        end
      end
    end
  end
  ;
   /* ****** check sport act restrictn field *******/
  ;
  if (KM0WM130.KUNSPCIN[1] is modified
   || KM0WM130.KUNSPCIN[2] is modified
   || KM0WM130.XSPCD[1] is modified
   || KM0WM130.KM0WWNBL[2] is modified
   || KM0WM130.KM0WW2P1 is modified
   || KM0WM130.KM0WW2P6 is modified
   || KM0WM130.KM0WW2P7 is modified)
    set KM0WM130.KUNSPCIN[1] initialAttributes;
    set KM0WM130.XSPCD[1] initialAttributes;
    if (KM0WM130.KUNSPCIN[1] != " "
     || KM0WM130.XSPCD[1] != " "
     || KM0WM130.KM0WWNBL[2] != " ")
      KM0WS40();
      if (KM0WM130.KM0WW2P1 != " " /* if any param besides prv val*/
       || KM0WM130.KM0WW2P2 != " " 
       || KM0WM130.KM0WW2P3 != " " 
       || KM0WM130.KM0WW2P4 != " " 
       || KM0WM130.KM0WW2P5 != " ")
         /* next sentence*/
      else
        if (KM0WM130.KM0WW2P6 != " "
         || KM0WM130.KM0WW2P7 != " ")
          set KM0WM130.KM0WW2P1 cursor, modified, bold;
          converseLib.validationFailed(155); /* prv val cant be only param*/
        else
          set KM0WM130.KM0WW2P1 cursor, modified, bold;
          converseLib.validationFailed(156); /* must use a param*/
        end
      end
    end
  end
  ;
   /* ****** check life cycl restrictn field *******/
  ;
  if (KM0WM130.KUNLCIND[1] is modified
   || KM0WM130.KUNLCIND[2] is modified
   || KM0WM130.XLCCD[1] is modified
   || KM0WM130.KM0WWNBL[1] is modified
   || KM0WM130.KM0WW1P1 is modified
   || KM0WM130.KM0WW1P6 is modified
   || KM0WM130.KM0WW1P7 is modified)
    set KM0WM130.KUNLCIND[1] initialAttributes;
    set KM0WM130.XLCCD[1] initialAttributes;
    if (KM0WM130.KUNLCIND[1] != " "
     || KM0WM130.XLCCD[1] != " "
     || KM0WM130.KM0WWNBL[1] != " ")
      KM0WS41();
      if (KM0WM130.KM0WW1P1 != " " /* if any param besides prv val*/
       || KM0WM130.KM0WW1P2 != " " 
       || KM0WM130.KM0WW1P3 != " " 
       || KM0WM130.KM0WW1P4 != " " 
       || KM0WM130.KM0WW1P5 != " ")
         /* next sentence*/
      else
        if (KM0WM130.KM0WW1P6 != " "
         || KM0WM130.KM0WW1P7 != " ")
          set KM0WM130.KM0WW1P1 cursor, modified, bold;
          converseLib.validationFailed(155); /* prv val cant be only param*/
        else
          set KM0WM130.KM0WW1P1 cursor, modified, bold;
          converseLib.validationFailed(156); /* must use a param*/
        end
      end
    end
  end
  ;
  ;
  KM0WW01.KM0WWMFL = "130";
  ;
  if (converseVar.validationMsgNum == 0)
    if (converseVar.eventKey is pf12)
      KM0WS42();
    end
  end
end // end KM0W130

// Transfer control to 'kg0a'
Function KM0W135()
   /* ******************************************************/
   /* Transfer control to 'kg0a'*/
   /* ******************************************************/
  ;
  COMMAREA.CATOAP = "KG0A";
  ;
  XSEXIT();
  ;
  KM0WM010.KM0WMMSG = COMMAREA.CAMSG;
  ;
end // end KM0W135

// converse cust unit map4
Function KM0W140()
  KM0WSS0(); /* check field security*/
  converse KM0WM140 ;
  ;
  KM0WM140.VAGen_EZEMSG = " ";
  KM0WM140.KM0WMMSG = " ";
  ;
   /* --------------- check aid byte ---------------------*/
  ;
  KM0WSS1(); /* check standard pf keys*/
  KM0WM140.KM0WMMSG = KM0WW01.KM0WWMSG;
  if (converseVar.validationMsgNum != 0 /* invalid pf*/
   || KM0WM140.KM0WMMSG != " ")         /* invalid security*/
    exit stack;
  end
  ;
   /* --------   check for fastpath  --------------*/
  ;
  if (KM0WM140.KM0WMOPT > " ") /* fastpath request*/
    COMMAREA.CATOAP = KM0WM140.KM0WMOPT;
    COMMAREA.CAITEM = KM0WM140.KM0WMITM;
    XSEXIT(); /* check security/xfer*/
    KM0WM140.KM0WMMSG = COMMAREA.CAMSG; /* security failed*/
    COMMAREA.CAMSG = " ";
    COMMAREA.CATOAP = " ";
    exit stack;
  end
  ;
  ;
  set KM0WM140.KM0WW1P1 initialAttributes;
  set KM0WM140.KM0WW1P2 initialAttributes;
  set KM0WM140.KM0WW1P3 initialAttributes;
  set KM0WM140.KM0WW1P4 initialAttributes;
  set KM0WM140.KM0WW1P5 initialAttributes;
  set KM0WM140.KM0WW1P6 initialAttributes;
  set KM0WM140.KM0WW2P1 initialAttributes;
  set KM0WM140.KM0WW2P2 initialAttributes;
  set KM0WM140.KM0WW2P3 initialAttributes;
  set KM0WM140.KM0WW2P4 initialAttributes;
  set KM0WM140.KM0WW2P5 initialAttributes;
  set KM0WM140.KM0WW2P6 initialAttributes;
  set KM0WM140.KM0WW2P7 initialAttributes;
  set KM0WM140.XNDCD[2] initialAttributes;
  set KM0WM140.KUQSINST[2] initialAttributes;
  set KM0WM140.XSGCD[1] cursor;
  ;
   /* perform basic parameter edits*/
  ;
  KM0WS34();
  ;
   /* ****** check special instruction field *******/
  ;
  if (KM0WM140.KUQSINST[1] is modified
   || KM0WM140.KM0WWNBL[2] is modified
   || KM0WM140.XNDCD[1] is modified
   || KM0WM140.KM0WW2P1 is modified
   || KM0WM140.KM0WW2P6 is modified
   || KM0WM140.KM0WW2P7 is modified
   || KM0WM140.KM0WWNBL[2] != " "
   || KM0WM140.XNDCD[1] != " "
   || KM0WM140.KUQSINST[1] != " ")
    set KM0WM140.KUQSINST[1] initialAttributes;
    set KM0WM140.XNDCD[1] initialAttributes;
    set KM0WM140.KM0WWNBL[2] initialAttributes;
    if (KM0WM140.KUQSINST[1] != " "
     || KM0WM140.KM0WWNBL[2] != " "
     || KM0WM140.XNDCD[1] != " ")
      KM0WS35();
                                   /* perform edits for fields and params*/
      if (KM0WM140.KM0WW2P1 != " " /* if any param besides prv val*/
       || KM0WM140.KM0WW2P2 != " " 
       || KM0WM140.KM0WW2P3 != " " 
       || KM0WM140.KM0WW2P4 != " " 
       || KM0WM140.KM0WW2P5 != " ")
         /* next sentence*/
      else
        if (KM0WM140.KM0WW2P6 != " "
         || KM0WM140.KM0WW2P7 != " ")
          if (KM0WM140.KM0WWNBL[2] == " ")
            set KM0WM140.KM0WW2P1 cursor, modified, bold;
            converseLib.validationFailed(155);
                                   /* prv val cant be only param*/
          end
        else
          set KM0WM140.KM0WW2P1 cursor, modified, bold;
          converseLib.validationFailed(156); /* must use a param*/
        end
      end
    end
  end
  ;
   /* ****** check special cust group field *******/
  ;
  if (KM0WM140.XSGCD[1] is modified
   || KM0WM140.KM0WWNBL[1] is modified
   || KM0WM140.KM0WW1P1 is modified
   || KM0WM140.KM0WW1P6 is modified)
    set KM0WM140.XSGCD[1] initialAttributes;
    if (KM0WM140.XSGCD[1] != " "
     || KM0WM140.KM0WWNBL[1] != " ")
      KM0WS36();
      if (KM0WM140.KM0WW1P1 != " " /* if any param besides prv val*/
       || KM0WM140.KM0WW1P2 != " " 
       || KM0WM140.KM0WW1P3 != " " 
       || KM0WM140.KM0WW1P4 != " " 
       || KM0WM140.KM0WW1P5 != " ")
         /* next sentence*/
      else
        if (KM0WM140.KM0WW1P6 != " ")
          set KM0WM140.KM0WW1P1 cursor, modified, bold;
          converseLib.validationFailed(155); /* prv val cant be only param*/
        else
          set KM0WM140.KM0WW1P1 cursor, modified, bold;
          converseLib.validationFailed(156); /* must use a param*/
        end
      end
    end
  end
  ;
  ;
  KM0WW01.KM0WWMFL = "140";
  ;
  if (converseVar.validationMsgNum == 0)
    if (converseVar.eventKey is pf12)
      KM0WS37();
    end
  end
end // end KM0W140

// Edit for NIL User
Function KM0WS-EDIT-NILUSER()
  ;
          /* Check for NIL user*/
       /* allow only option 6 entry*/
  ;
  KM0WW01.KM0WWMSG = " ";
  ;
  if (COMMAREA.CADLVL[3] == "Y") /* if Nike Canada User*/
    converseLib.validationFailed(41); /* invalid option for user;*/
    KM0WM010.KM0WMPIK = 00;
    return;
  end
  ;
  if (COMMAREA.CADLVL[2] == "Y") /* if NIL user*/
    if (KM0WM010.KM0WMPIK != 0)
      if (KM0WM010.KM0WMPIK == 6)
                                  /* next sentence*/
      else
        converseLib.validationFailed(41); /* invalid option for user;*/
        KM0WM010.KM0WMPIK = 00;
      end
    end
  else
      /* next sentence*/
  end
  ;
end // end KM0WS-EDIT-NILUSER

// initialize fields & maps
Function KM0WS00()
  set KU1REC empty;
  set KUYREC empty;
  set KUWREC empty;
  set TA1REC empty;
  set SQLCA empty;
  set XA0AW02 empty;
  set KM0WW01 empty;
  set KM0WM010 initial;
  set KM0WM020 initial;
  set KM0WM030 initial;
  set KM0WM040 initial;
  set KM0WM050 initial;
  set KM0WM060 initial;
  set KM0WM070 initial;
  set KM0WM080 initial;
  set KM0WM090 initial;
  set KM0WM130 initial;
  set KM0WM140 initial;
  KM0WM010.KM0WMDT = VGVar.currentShortGregorianDate;
  KM0WM020.KM0WMDT = VGVar.currentShortGregorianDate;
  KM0WM030.KM0WMDT = VGVar.currentShortGregorianDate;
  KM0WM040.KM0WMDT = VGVar.currentShortGregorianDate;
  KM0WM050.KM0WMDT = VGVar.currentShortGregorianDate;
  KM0WM060.KM0WMDT = VGVar.currentShortGregorianDate;
  KM0WM070.KM0WMDT = VGVar.currentShortGregorianDate;
  KM0WM080.KM0WMDT = VGVar.currentShortGregorianDate;
  KM0WM090.KM0WMDT = VGVar.currentShortGregorianDate;
  KM0WM130.KM0WMDT = VGVar.currentShortGregorianDate;
  KM0WM140.KM0WMDT = VGVar.currentShortGregorianDate;
end // end KM0WS00

// edit account class code
Function KM0WS01()
  ;
    /* check account class code - req, valid table entry*/
  ;
  if (KM0WM020.XAUCD[1] in XAUTBL.XAUCD)
    if (XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      converseLib.validationFailed(17); /* invalid code*/
      set KM0WM020.XAUCD[1] cursor, modified, bold;
    end
  else
    converseLib.validationFailed(17); /* invalid code*/
    set KM0WM020.XAUCD[1] cursor, modified, bold;
  end
  ;
end // end KM0WS01

// edit analyst cd
Function KM0WS02()
    /* edit analyst code*/
  ;
  if (KM0WM020.XCUCD[2] in XCETBL.XCECD)
    if (XCETBL.XXXSTAT[sysVar.arrayIndex] == "A")
      /* next sentence*/
    else
      converseLib.validationFailed(159);
      set KM0WM020.XCUCD[2] cursor, modified, bold;
    end
  else
    converseLib.validationFailed(158);
    set KM0WM020.XCUCD[2] cursor, modified, bold;
  end
  ;
end // end KM0WS02

// edit cr resp
Function KM0WS03()
    /* edit credit responsibility*/
  ;
  if (KM0WM020.XCUCD[3] in XCUTBL.XCUCD)
    if (XCUTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XCUTBL.XCURMGR[sysVar.arrayIndex] == "AA" /* c & a rep*/
       || XCUTBL.XCURMGR[sysVar.arrayIndex] == "JS70") /* coll rep*/
        converseLib.validationFailed(160);
        set KM0WM020.XCUCD[3] cursor, modified, bold;
      else
        /* next sentence*/
      end
    else
      converseLib.validationFailed(161);
      set KM0WM020.XCUCD[3] cursor, modified, bold;
    end
  else
    converseLib.validationFailed(160);
    set KM0WM020.XCUCD[3] cursor, modified, bold;
  end
  ;
end // end KM0WS03

// edit credit status code
Function KM0WS04()
    /* check credit status code - req, valid table entry*/
  ;
  if (KM0WM020.XCCCD[1] in XCCTBL.XCCCD)
    if (XCCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      converseLib.validationFailed(17); /* invalid code*/
      set KM0WM020.XCCCD[1] cursor, modified, bold;
    end
  else
    converseLib.validationFailed(17); /* invalid code*/
    set KM0WM020.XCCCD[1] cursor, modified, bold;
  end
  ;
end // end KM0WS04

// build out recs tbl for co map
Function KM0WS05()
  XX0XS01();
  ;
  KM0WW01.KM0WWIDX = 0;
  KM0WW01.KM0WWIX2 = KM0WW01.KM0WWIX2 + 1;
  ;
   /* format account class code record type*/
  ;
  if (KM0WM020.XAUCD[1] != " ")
    set KU1REC01 empty;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
    KU1REC01.KU1RTYPE = "01";
    KU1REC01.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC01.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC01.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC01.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC01.XAUCD = KM0WM020.XAUCD[1];
    KU1REC01.KU1P1CHO = KM0WM020.KM0WW1P1;
    KU1REC01.KUCGRPID = KM0WM020.KUCGRPID[1];
    KU1REC01.KU1P2CHO = KM0WM020.KM0WW1P2;
    KU1REC01.KU1XAUCD = KM0WM020.XAUCD[2];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC01.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC01.KU1DATA;
  end
  ;
   /* format send statement record type*/
  ;
  if (KM0WM020.KM0WMSTM[1] != " ")
    set KU1REC09 empty;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
    KU1REC09.KU1RTYPE = "09";
    KU1REC09.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC09.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC09.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC09.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC09.KM0WWSTM = KM0WM020.KM0WMSTM[1];
    KU1REC09.KU1P1CHO = KM0WM020.KM0WW2P1;
    KU1REC09.XCUCD = KM0WM020.XCUCD[1];
    KU1REC09.KU1P2CHO = KM0WM020.KM0WW2P2;
    KU1REC09.KU1NOSTM = KM0WM020.KM0WMSTM[2];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC06.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC06.KU1DATA;
  end
  ;
   /* format analyst code record type*/
  ;
  if (KM0WM020.XCUCD[2] != " ")
    set KU1REC02 empty;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
    KU1REC02.KU1RTYPE = "02";
    KU1REC02.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC02.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC02.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC02.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC02.XCUCD = KM0WM020.XCUCD[2];
    KU1REC02.KU1P1CHO = KM0WM020.KM0WW3P1;
    KU1REC02.XSTCD = KM0WM020.XSTCD;
    KU1REC02.KU1P2CHO = KM0WM020.KM0WW3P2;
    KU1REC02.KU1XCUCD = KM0WM020.XCUCD[4];
    KU1REC02.KU1P3CHO = " ";
    KU1REC02.KUCCOID = 0;
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC02.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC02.KU1DATA;
  end
  ;
   /* format credit responsibility record type*/
  ;
  if (KM0WM020.XCUCD[3] != " ")
    set KU1REC06 empty;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
    KU1REC06.KU1RTYPE = "06";
    KU1REC06.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC06.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC06.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC06.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC06.XCUCD = KM0WM020.XCUCD[3];
    KU1REC06.KU1P1CHO = KM0WM020.KM0WW4P1;
    KU1REC06.SM1AGYID = KM0WM020.SM1AGYID;
    KU1REC06.KU1P2CHO = KM0WM020.KM0WW4P2;
    KU1REC06.KU1XCUCD = KM0WM020.XCUCD[5];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC06.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC06.KU1DATA;
  end
  ;
   /* format cash sort key record type*/
  ;
  if (KM0WM020.KM0WMSRT[1] != " ")
    set KU1REC03 empty;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
    KU1REC03.KU1RTYPE = "03";
    KU1REC03.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC03.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC03.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC03.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC03.KM0WWSRT = KM0WM020.KM0WMSRT[1];
    KU1REC03.KU1P1CHO = KM0WM020.KM0WW5P1;
    KU1REC03.KUCGRPID = KM0WM020.KUCGRPID[2];
    KU1REC03.KU1P2CHO = KM0WM020.KM0WW5P2;
    KU1REC03.KU1CSRT = KM0WM020.KM0WMSRT[2];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC03.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC03.KU1DATA;
  end
  ;
   /* format credit status record type*/
  ;
  if (KM0WM020.XCCCD[1] != " ")
    set KU1REC07 empty;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
    KU1REC07.KU1RTYPE = "07";
    KU1REC07.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC07.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC07.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC07.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC07.XCCCD = KM0WM020.XCCCD[1];
    KU1REC07.KU1P1CHO = KM0WM020.KM0WW6P1;
    KU1REC07.KUCGRPID = KM0WM020.KUCGRPID[3];
    KU1REC07.KU1P2CHO = KM0WM020.KM0WW6P2;
    KU1REC07.KU1XCCCD = KM0WM020.XCCCD[2];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC07.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC07.KU1DATA;
  end
  ;
   /* format store count record type*/
  ;
  if (KM0WM020.KUCSSCNT != 0)
    set KU1REC10 empty;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
    KU1REC10.KU1RTYPE = "10";
    KU1REC10.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC10.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC10.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC10.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC10.KUCSSCNT = KM0WM020.KUCSSCNT;
    KU1REC10.KU1P1CHO = KM0WM020.KM0WW7P1;
    KU1REC10.KUCGRPID = KM0WM020.KUCGRPID[4];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC10.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC10.KU1DATA;
  end
  ;
   /* format nike store count record type*/
  ;
  if (KM0WM020.KUCNSCNT != 0)
    set KU1REC08 empty;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
    KU1REC08.KU1RTYPE = "08";
    KU1REC08.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC08.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC08.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC08.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC08.KUCNSCNT = KM0WM020.KUCNSCNT;
    KU1REC08.KU1P1CHO = KM0WM020.KM0WW8P1;
    KU1REC08.KUCGRPID = KM0WM020.KUCGRPID[5];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC08.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC08.KU1DATA;
  end
  ;
   /* below will reset index prior to add to output batch file*/
  ;
  KM0WW01.KM0WWIDX = 0;
  ;
end // end KM0WS05

// pass apparel image to edit
Function KM0WS06()
   /* ******** pass apparel image to edit **************/
  ;
  KM0WW01.KM0WWIMG = KM0WM030.KUMXNIAP[1];
                                   /* set up apparel image for edit*/
  KM0WS07();
  if (KM0WW01.KM0WWERR > 0)
    set KM0WM030.KUMXNIAP[1] cursor, modified, bold;
    if (KM0WW01.KM0WWERR == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(KM0WW01.KM0WWERR);
    end
  end
  ;
end // end KM0WS06

// edit apparel or footwear image
Function KM0WS07()
   /* *************************************************************/
   /* *****        e d i t    a p p a r e l   i m a g e      ******/
   /* *************************************************************/
                              /* o r*/
   /* *************************************************************/
   /* *****        e d i t    f o o t w e a r   i m a g e    ******/
   /* *************************************************************/
  ;
  KM0WW01.KM0WWERR = 0;
  ;
  if (KM0WW01.KM0WWIMG in XNITBL.XNICD)
    if (XNITBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
      KM0WW01.KM0WWERR = 17; /* error "invalid code*/
    else /* else(status is active)*/
      /* next sentence                ;  okay*/
    end /* end of "if" statement*/
  else
    KM0WW01.KM0WWERR = 17; /* error "invalid code*/
  end /* end of "if" statement*/
  ;
end // end KM0WS07

// edit self image code
Function KM0WS08()
  ;
   /* *************************************************************/
   /* *****   e d i t    s e l f    i m a g e    c o d e     ******/
   /* *************************************************************/
  ;
  if (KM0WM030.XCFCD[1] in XCFTBL.XCFCD)
    if (XCFTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      converseLib.validationFailed(17); /* error "invalid code"*/
      set KM0WM030.XCFCD[1] cursor, modified, bold;
    end
  else
    converseLib.validationFailed(17); /* error "invalid code"*/
    set KM0WM030.XCFCD[1] cursor, modified, bold;
  end
  ;
end // end KM0WS08

// edit warehouse id
Function KM0WS09()
  ;
   /* *************************************************************/
   /* *****      e d i t    w a r e h o u s e   i d ' s      ******/
   /* *************************************************************/
  ;
  if (KM0WM030.XWHCD[2] != " ")
    if (KM0WM030.XWHCD[2] in XWHTBL.XWHCD)
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KM0WM030.XWHCD[2] cursor, modified, bold;
      else /* else(status is active)*/
        /* ***** test that warehouse supplies customers gpc ******/
        if (XWHTBL.XGPCD1[sysVar.arrayIndex] != KM0WM030.XGPCD[2]
         && XWHTBL.XGPCD2[sysVar.arrayIndex] != KM0WM030.XGPCD[2]
         && XWHTBL.XGPCD3[sysVar.arrayIndex] != KM0WM030.XGPCD[2]
         && XWHTBL.XGPCD4[sysVar.arrayIndex] != KM0WM030.XGPCD[2]
         && XWHTBL.XGPCD5[sysVar.arrayIndex] != KM0WM030.XGPCD[2]
         && XWHTBL.XGPCD6[sysVar.arrayIndex] != KM0WM030.XGPCD[2]
         && XWHTBL.XGPCD7[sysVar.arrayIndex] != KM0WM030.XGPCD[2]
         && XWHTBL.XGPCD8[sysVar.arrayIndex] != KM0WM030.XGPCD[2])
          converseLib.validationFailed(87);
                                   /* error "invalid warehouse, gpc"*/
          set KM0WM030.XWHCD[2] cursor, modified, bold;
          set KM0WM030.XGPCD[2] modified, bold;
        else /* else(valid warehouse for gpc)*/
          /* next sentence        ;        okay*/
        end /* end of "if" statement*/
      end /* end of "if" statement*/
    else
      converseLib.validationFailed(17); /* error "invalid code*/
      set KM0WM030.XWHCD[2] cursor, modified, bold;
    end
  end /* end of "if" statement*/
  ;
  if (KM0WM030.XWHCD[1] in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
      converseLib.validationFailed(17); /* error "invalid code*/
      set KM0WM030.XWHCD[1] cursor, modified, bold;
    else /* else(status is active)*/
      /* ***** test that warehouse supplies customers gpc ******/
      if (XWHTBL.XGPCD1[sysVar.arrayIndex] != KM0WM030.XGPCD[1]
       && XWHTBL.XGPCD2[sysVar.arrayIndex] != KM0WM030.XGPCD[1]
       && XWHTBL.XGPCD3[sysVar.arrayIndex] != KM0WM030.XGPCD[1]
       && XWHTBL.XGPCD4[sysVar.arrayIndex] != KM0WM030.XGPCD[1]
       && XWHTBL.XGPCD5[sysVar.arrayIndex] != KM0WM030.XGPCD[1]
       && XWHTBL.XGPCD6[sysVar.arrayIndex] != KM0WM030.XGPCD[1]
       && XWHTBL.XGPCD7[sysVar.arrayIndex] != KM0WM030.XGPCD[1]
       && XWHTBL.XGPCD8[sysVar.arrayIndex] != KM0WM030.XGPCD[1])
        converseLib.validationFailed(87);
                                   /* error "invalid warehouse, gpc"*/
        set KM0WM030.XWHCD[1] cursor, modified, bold;
        set KM0WM030.XGPCD[1] modified, bold;
      else /* else(valid warehouse for gpc)*/
        /* next sentence        ;        okay*/
      end /* end of "if" statement*/
    end
  else
    converseLib.validationFailed(17); /* error "invalid code*/
    set KM0WM030.XWHCD[1] cursor, modified, bold;
  end
  ;
  ;
  if (KM0WM030.KM0WW3P2 != " ")
    if (KM0WM030.KM0WW3P3 != " ")
      converseLib.validationFailed(154); /* error cannot have country and state*/
      set KM0WM030.KM0WW3P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM030.XWHCD[2] != " ")
    if (KM0WM030.XGPCD[2] == " ")
      converseLib.validationFailed(5);
      set KM0WM030.XGPCD[2] cursor, modified, bold;
    end
  end
  ;
  if (KM0WM030.KM0WW3P7 == " " /* if gpc code param not used*/
   && KM0WM030.XGPCD[2] == " ")
    converseLib.validationFailed(5); /* error "required"*/
    set KM0WM030.KM0WW3P7 cursor, modified, bold;
  end
  ;
  if (KM0WM030.XGPCD[2] != " ")
    if (KM0WM030.XWHCD[2] == " ")
      converseLib.validationFailed(5);
      set KM0WM030.XWHCD[2] cursor, modified, bold;
    end
  end
  ;
  if (KM0WM030.KM0WW3P6 == " " /* if whse cd param not used*/
   && KM0WM030.XWHCD[2] == " ")
    converseLib.validationFailed(5); /* error "required"*/
    set KM0WM030.KM0WW3P6 cursor, modified, bold;
  end
  ;
  if (KM0WM030.XWHCD[1] != " ")
    if (KM0WM030.XGPCD[1] == " ")
      converseLib.validationFailed(5);
      set KM0WM030.XGPCD[1] cursor, modified, bold;
    end
  end
  ;
  if (KM0WM030.XGPCD[1] != " ")
    if (KM0WM030.XWHCD[1] == " ")
      converseLib.validationFailed(5);
      set KM0WM030.XWHCD[1] cursor, modified, bold;
    end
  end
  ;
  if (KM0WM030.KM0WW3P1 == " "
   && KM0WM030.KM0WW3P2 == " "
   && KM0WM030.KM0WW3P3 == " "
   && KM0WM030.KM0WW3P4 == " "
   && KM0WM030.KM0WW3P5 == " ")
    if (KM0WM030.KM0WW3P6 != " "
     && KM0WM030.KM0WW3P7 != " "
     && KM0WM030.XGPCD[2] == " "
     && KM0WM030.XWHCD[2] == " ")
      converseLib.validationFailed(155);
      set KM0WM030.KM0WW3P1 cursor, modified, bold;
    end
  end
  ;
  ;
end // end KM0WS09

// edit sic code
Function KM0WS10()
  ;
   /* *************************************************************/
   /* *****     e d i t     s t o r e     c l a s s          ******/
   /* *************************************************************/
  ;
  if (KM0WM030.YSVCD[1] in YSVTBL.YSVCD)
    if (YSVTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
      converseLib.validationFailed(17); /* error "invalid code*/
      set KM0WM030.YSVCD[1] cursor, modified, bold;
    else /* else(status is active)*/
      /* next sentence            ;       okay*/
    end /* end of "if" statement*/
  else
    converseLib.validationFailed(17); /* code not in table*/
    set KM0WM030.YSVCD[1] cursor, modified, bold;
  end /* end of "if" statement*/
  ;
end // end KM0WS10

// pass footwear image to edit
Function KM0WS11()
  ;
   /* ********* pass footwear image to edit *********/
  ;
  KM0WW01.KM0WWIMG = KM0WM030.KUMXNIFT[1];
  KM0WS07();
  if (KM0WW01.KM0WWERR > 0)
    set KM0WM030.KUMXNIFT[1] cursor, modified, bold;
    if (KM0WW01.KM0WWERR == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(KM0WW01.KM0WWERR);
    end
  end
  ;
end // end KM0WS11

// build out recs table for store
Function KM0WS13()
  XX0XS01();
  ;
  KM0WW01.KM0WWIDX = 0;
  KM0WW01.KM0WWIX2 = KM0WW01.KM0WWIX2 + 1;
  ;
   /* format apparel image code record type*/
  ;
  if (KM0WM030.KUMXNIAP[1] != " ")
    set KU1REC12 empty;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
    KU1REC12.KU1RTYPE = "12";
    KU1REC12.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC12.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC12.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC12.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC12.KUMXNIAP = KM0WM030.KUMXNIAP[1];
    KU1REC12.KU1P1CHO = KM0WM030.KM0WW1P1;
    KU1REC12.KUCCOID = KM0WM030.KUCCOID[1];
    KU1REC12.KU1P2CHO = KM0WM030.KM0WW1P2;
    KU1REC12.KUCGRPID = KM0WM030.KUCGRPID[1];
    KU1REC12.KU1P3CHO = KM0WM030.KM0WW1P3;
    KU1REC12.KU1ACIMG = KM0WM030.KUMXNIAP[2];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC12.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC12.KU1DATA;
  end
  ;
   /* format cust self image record type*/
  ;
  if (KM0WM030.XCFCD[1] != " ")
    set KU1REC13 empty;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
    KU1REC13.KU1RTYPE = "13";
    KU1REC13.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC13.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC13.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC13.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC13.XCFCD = KM0WM030.XCFCD[1];
    KU1REC13.KU1P1CHO = KM0WM030.KM0WW2P1;
    KU1REC13.KUCCOID = KM0WM030.KUCCOID[2];
    KU1REC13.KU1P2CHO = KM0WM030.KM0WW2P2;
    KU1REC13.KUCGRPID = KM0WM030.KUCGRPID[2];
    KU1REC13.KU1P3CHO = KM0WM030.KM0WW2P3;
    KU1REC13.KU1XCFCD = KM0WM030.XCFCD[2];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC13.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC13.KU1DATA;
  end
  ;
   /* format warehouse/gpc record type*/
  ;
  if (KM0WM030.XWHCD[1] != " "
   && KM0WM030.XGPCD[1] != " ")
    set KU1REC18 empty;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
    KU1REC18.KU1RTYPE = "18";
    KU1REC18.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC18.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC18.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC18.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC18.XWHCD = KM0WM030.XWHCD[1];
    KU1REC18.XGPCD = KM0WM030.XGPCD[1];
    KU1REC18.KU1P1CHO = KM0WM030.KM0WW3P1;
    KU1REC18.KUCGRPID = KM0WM030.KUCGRPID[3];
    KU1REC18.KU1P2CHO = KM0WM030.KM0WW3P2;
    KU1REC18.XSTCD = KM0WM030.XSTCD;
    KU1REC18.KU1P3CHO = KM0WM030.KM0WW3P3;
    KU1REC18.XCTCD = KM0WM030.XCTCD;
    KU1REC18.KU1P4CHO = KM0WM030.KM0WW3P4;
    KU1REC18.KUCCOID = KM0WM030.KUCCOID[3];
    KU1REC18.KU1P5CHO = KM0WM030.KM0WW3P5;
    KU1REC18.SM1AGYID = KM0WM030.SM1AGYID;
    KU1REC18.KU1P6CHO = KM0WM030.KM0WW3P6;
    KU1REC18.KU1XWHCD = KM0WM030.XWHCD[2];
    KU1REC18.KU1P7CHO = KM0WM030.KM0WW3P7;
    KU1REC18.KU1XGPCD = KM0WM030.XGPCD[2];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC18.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC18.KU1DATA;
  end
  ;
   /* format store class code record type*/
  ;
  if (KM0WM030.YSVCD[1] != " ")
    set KU1REC16 empty;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
    KU1REC16.KU1RTYPE = "16";
    KU1REC16.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC16.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC16.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC16.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC16.YSVCD = KM0WM030.YSVCD[1];
    KU1REC16.KU1P1CHO = KM0WM030.KM0WW4P1;
    KU1REC16.KUCCOID = KM0WM030.KUCCOID[4];
    KU1REC16.KU1P2CHO = KM0WM030.KM0WW4P2;
    KU1REC16.KUCGRPID = KM0WM030.KUCGRPID[4];
    KU1REC16.KU1P3CHO = KM0WM030.KM0WW4P3;
    KU1REC16.KU1YSVCD = KM0WM030.YSVCD[2];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC16.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC16.KU1DATA;
  end
  ;
   /* format footwear image code record type*/
  ;
  if (KM0WM030.KUMXNIFT[1] != " ")
    set KU1REC14 empty;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
    KU1REC14.KU1RTYPE = "14";
    KU1REC14.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC14.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC14.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC14.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC14.KUMXNIFT = KM0WM030.KUMXNIFT[1];
    KU1REC14.KU1P1CHO = KM0WM030.KM0WW6P1;
    KU1REC14.KUCCOID = KM0WM030.KUCCOID[5];
    KU1REC14.KU1P2CHO = KM0WM030.KM0WW6P2;
    KU1REC14.KUCGRPID = KM0WM030.KUCGRPID[5];
    KU1REC14.KU1P3CHO = KM0WM030.KM0WW6P3;
    KU1REC14.KU1FCIMG = KM0WM030.KUMXNIFT[2];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC14.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC14.KU1DATA;
  end
  ;
   /* below will reset index prior to add to output batch file*/
  ;
  KM0WW01.KM0WWIDX = 0;
  ;
end // end KM0WS13

// edit assgn control category
Function KM0WS15()
  ;
   /* *************************************************************/
   /* ***** e d i t    a s s i g n m e n t    c o n t r o l  ******/
   /* *****                 c a t a g o r y                  ******/
   /* *************************************************************/
  ;
  if (KM0WM040.XACCD[1] in XACTBL.XACCD)
    if (XACTBL.XXXSTAT[sysVar.arrayIndex] != "A")
      converseLib.validationFailed(17); /* error "invalid code*/
      set KM0WM040.XACCD[1] cursor, modified, bold;
    else
      /* next sentence*/
    end
  else
    converseLib.validationFailed(17); /* error "invalid code"*/
    set KM0WM040.XACCD[1] cursor, modified, bold;
  end
  ;
end // end KM0WS15

// edit sport activity
Function KM0WS16()
  ;
   /* *************************************************************/
   /* *****     e d i t    s p o r t    a c t i v i t y      ******/
   /* *************************************************************/
  ;
  if (KM0WM060.KUNSPCD[1] in XSPTBL.XSPCD)
    if (XSPTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
      converseLib.validationFailed(17); /* error "invalid code*/
      set KM0WM060.KUNSPCD[1] cursor, modified, bold;
    else
      /* next sentence            ;*/
    end
  else /* else(sport activity not found)*/
    converseLib.validationFailed(17); /* error "invalid code"*/
    set KM0WM060.KUNSPCD[1] cursor, modified, bold;
  end
  ;
end // end KM0WS16

// edit gender/age
Function KM0WS17()
  ;
   /* *************************************************************/
   /* *****          e d i t    g e n d e r    a g e         ******/
   /* *************************************************************/
  ;
  if (KM0WM040.XGACD[1] in XGATBL.XGACD)
    if (XGATBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
      converseLib.validationFailed(17); /* error "invalid code*/
      set KM0WM040.XGACD[1] cursor, modified, bold;
    else /* else(status is active)*/
      /* next sentence            ;       okay*/
    end
  else /* else(gender age not found)*/
    converseLib.validationFailed(17); /* error "invalid code"*/
    set KM0WM040.XGACD[1] cursor, modified, bold;
  end
  ;
end // end KM0WS17

// bld output table for cust map1
Function KM0WS18()
  XX0XS01();
  ;
  KM0WW01.KM0WWIDX = 0;
  KM0WW01.KM0WWIX2 = KM0WW01.KM0WWIX2 + 1;
  ;
  ;
   /* format assign ctrl cat record type*/
  ;
  if (KM0WM040.XACCD[1] != " ")
    set KU1REC27 empty;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
    KU1REC27.KU1RTYPE = "27";
    KU1REC27.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC27.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC27.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC27.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC27.XACCD = KM0WM040.XACCD[1];
    KU1REC27.KU1P1CHO = KM0WM040.KM0WW2P1;
    KU1REC27.KUCCOID = KM0WM040.KUCCOID[2];
    KU1REC27.KU1P2CHO = KM0WM040.KM0WW2P2;
    KU1REC27.KUCGRPID = KM0WM040.KUCGRPID[1];
    KU1REC27.KU1P3CHO = KM0WM040.KM0WW2P3;
    KU1REC27.KUMSTRID = KM0WM040.KUMSTRID[1];
    KU1REC27.KU1P4CHO = KM0WM040.KM0WW2P4;
    KU1REC27.XGPCD = KM0WM040.XGPCD[2];
    KU1REC27.KU1P5CHO = KM0WM040.KM0WW2P5;
    KU1REC27.KU1XACCD = KM0WM040.XACCD[2];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC27.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC27.KU1DATA;
  end
  ;
   /* format cust unit stat record type*/
  ;
  if (KM0WM040.XXXSTAT[1] != " ")
    set KU1REC29 empty;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
    KU1REC29.KU1RTYPE = "29";
    KU1REC29.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC29.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC29.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC29.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC29.XXXSTAT = KM0WM040.XXXSTAT[1];
    KU1REC29.KU1P1CHO = KM0WM040.KM0WW3P1;
    KU1REC29.KUCCOID = KM0WM040.KUCCOID[3];
    KU1REC29.KU1P2CHO = KM0WM040.KM0WW3P2;
    KU1REC29.KUMSTRID = KM0WM040.KUMSTRID[2];
    KU1REC29.KU1P3CHO = KM0WM040.KM0WW3P3;
    KU1REC29.XNXCD = KM0WM040.XNXCD;
    KU1REC29.KU1P4CHO = KM0WM040.KM0WW3P4;
    KU1REC29.XGPCD = KM0WM040.XGPCD[3];
    KU1REC29.KU1P5CHO = KM0WM040.KM0WW3P5;
    KU1REC29.KU1CSTAT = KM0WM040.XXXSTAT[2];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC29.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC29.KU1DATA;
  end
  ;
   /* format assgn alloctn seq record type*/
  ;
   /* F KM0WM040.KUNALSEQ(1) NE 0;*/
   /* SET KU1REC28 EMPTY;*/
   /* KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;*/
   /* MOVE '28' TO KU1REC28.KU1RTYPE;*/
   /* MOVE XX0XW01.XX0XWDAT TO KU1REC28.ZZZCHGDT;*/
   /* MOVE XX0XW01.XX0XWTIM TO KU1REC28.ZZZCHGTM;*/
   /* MOVE KM0WW01.KM0WWIX2 TO KU1REC28.KU1SEQID;*/
   /* MOVE COMMAREA.CAUSERID TO KU1REC28.XXXUSRID;*/
   /* MOVE KM0WM040.KUNALSEQ(1) TO KU1REC28.KUNALSEQ;*/
   /* MOVE KM0WM040.KM0WW4P1 TO KU1REC28.KU1P1CHO;*/
   /* MOVE KM0WM040.KUCCOID(4) TO KU1REC28.KUCCOID;*/
   /* MOVE KM0WM040.KM0WW4P2 TO KU1REC28.KU1P2CHO;*/
   /* MOVE KM0WM040.KUCGRPID(2) TO KU1REC28.KUCGRPID;*/
   /* MOVE KM0WM040.KM0WW4P3 TO KU1REC28.KU1P3CHO;*/
   /* MOVE KM0WM040.KUMSTRID(3) TO KU1REC28.KUMSTRID;*/
   /* MOVE KM0WM040.KM0WW4P4 TO KU1REC28.KU1P4CHO;*/
   /* MOVE KM0WM040.XGPCD(4) TO KU1REC28.XGPCD;*/
   /* MOVE KM0WM040.KM0WW4P5 TO KU1REC28.KU1P5CHO;*/
   /* MOVE KM0WM040.KUNALSEQ(2) TO KU1REC28.KU1ALSEQ;*/
   /* ;*/
   /* MOVE KU1REC28.KU1KEY TO KM0WW01.KM0WWOTK(KM0WWIDX);*/
   /* MOVE KU1REC28.KU1DATA TO KM0WW01.KM0WWOTD(KM0WWIDX);*/
   /* ND ;*/
  ;
   /* format invoice dist ind record type*/
  ;
   /* this is something that has to happen another*/
   /* way xidcd is being moved to another level*/
  ;
  ;
   /* F KM0WM040.XIDCD(1) NE ' ';*/
   /* SET KU1REC42 EMPTY;*/
   /* KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;*/
   /* MOVE '42' TO KU1REC42.KU1RTYPE;*/
   /* MOVE XX0XW01.XX0XWDAT TO KU1REC42.ZZZCHGDT;*/
   /* MOVE XX0XW01.XX0XWTIM TO KU1REC42.ZZZCHGTM;*/
   /* MOVE KM0WW01.KM0WWIX2 TO KU1REC42.KU1SEQID;*/
   /* MOVE COMMAREA.CAUSERID TO KU1REC42.XXXUSRID;*/
   /* MOVE KM0WM040.XIDCD(1) TO KU1REC42.XIDCD;*/
   /* MOVE KM0WM040.KM0WW5P1 TO KU1REC42.KU1P1CHO;*/
   /* MOVE KM0WM040.KUCCOID(5) TO KU1REC42.KUCCOID;*/
   /* MOVE KM0WM040.KM0WW5P2 TO KU1REC42.KU1P2CHO;*/
   /* MOVE KM0WM040.KUCGRPID(3) TO KU1REC42.KUCGRPID;*/
   /* MOVE KM0WM040.KM0WW5P3 TO KU1REC42.KU1P3CHO;*/
   /* MOVE KM0WM040.KUMSTRID(4) TO KU1REC42.KUMSTRID;*/
   /* MOVE KM0WM040.KM0WW5P4 TO KU1REC42.KU1P4CHO;*/
   /* MOVE KM0WM040.XGPCD(5) TO KU1REC42.XGPCD;*/
   /* MOVE KM0WM040.KM0WW5P5 TO KU1REC42.KU1P5CHO;*/
   /* MOVE KM0WM040.XIDCD(2) TO KU1REC42.KU1IDCD;*/
   /* ;*/
   /* MOVE KU1REC42.KU1KEY TO KM0WW01.KM0WWOTK(KM0WWIDX);*/
   /* MOVE KU1REC42.KU1DATA TO KM0WW01.KM0WWOTD(KM0WWIDX);*/
   /* ND ;*/
  ;
   /* format gender/age record type*/
  ;
  if (KM0WM040.XGACD[1] != " ")
    set KU1REC32 empty;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
    KU1REC32.KU1RTYPE = "32";
    KU1REC32.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC32.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC32.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC32.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC32.XGACD = KM0WM040.XGACD[1];
    KU1REC32.KU1P1CHO = KM0WM040.KM0WW6P1;
    KU1REC32.KUCCOID = KM0WM040.KUCCOID[6];
    KU1REC32.KU1P2CHO = KM0WM040.KM0WW6P2;
    KU1REC32.KUCGRPID = KM0WM040.KUCGRPID[4];
    KU1REC32.KU1P3CHO = KM0WM040.KM0WW6P3;
    KU1REC32.KUMSTRID = KM0WM040.KUMSTRID[5];
    KU1REC32.KU1P4CHO = KM0WM040.KM0WW6P4;
    KU1REC32.XGPCD = KM0WM040.XGPCD[6];
    KU1REC32.KU1P5CHO = KM0WM040.KM0WW6P5;
    KU1REC32.KU1XGACD = KM0WM040.XGACD[2];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC32.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC32.KU1DATA;
  end
  ;
   /* below will reset index prior to add to output batch file*/
  ;
  KM0WW01.KM0WWIDX = 0;
  ;
end // end KM0WS18

// bld output table for cust map2
Function KM0WS19()
  XX0XS01();
  ;
  KM0WW01.KM0WWIDX = 0;
  KM0WW01.KM0WWIX2 = KM0WW01.KM0WWIX2 + 1;
  ;
   /* format item bo/bo qty record type*/
  ;
  if (KM0WM050.KUNBOCD[1] != " ")
    set KU1REC30 empty;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
    KU1REC30.KU1RTYPE = "30";
    KU1REC30.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC30.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC30.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC30.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC30.KUNBOCD = KM0WM050.KUNBOCD[1];
    KU1REC30.KUNBOQTY = KM0WM050.KUNBOQTY[1];
    KU1REC30.KU1P1CHO = KM0WM050.KM0WW1P1;
    KU1REC30.KUCCOID = KM0WM050.KUCCOID[1];
    KU1REC30.KU1P2CHO = KM0WM050.KM0WW1P2;
    KU1REC30.KUCGRPID = KM0WM050.KUCGRPID[1];
    KU1REC30.KU1P3CHO = KM0WM050.KM0WW1P3;
    KU1REC30.KUMSTRID = KM0WM050.KUMSTRID[1];
    KU1REC30.KU1P4CHO = KM0WM050.KM0WW1P4;
    KU1REC30.XGPCD = KM0WM050.XGPCD[1];
    KU1REC30.KU1P5CHO = KM0WM050.KM0WW1P5;
    KU1REC30.KU1BOCD = KM0WM050.KUNBOCD[2];
    KU1REC30.KU1P6CHO = KM0WM050.KM0WW1P6;
    KU1REC30.KU1BOQTY = KM0WM050.KUNBOQTY[2];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC30.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC30.KU1DATA;
  end
  ;
   /* format vend auth record type*/
  ;
   /* F KM0WM050.KUNCRFL(1) NE ' ';*/
   /* SET KU1REC20 EMPTY;*/
   /* KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;*/
   /* MOVE '20' TO KU1REC20.KU1RTYPE;*/
   /* MOVE XX0XW01.XX0XWDAT TO KU1REC20.ZZZCHGDT;*/
   /* MOVE XX0XW01.XX0XWTIM TO KU1REC20.ZZZCHGTM;*/
   /* MOVE KM0WW01.KM0WWIX2 TO KU1REC20.KU1SEQID;*/
   /* MOVE COMMAREA.CAUSERID TO KU1REC20.XXXUSRID;*/
   /* MOVE KM0WM050.KUNCRFL(1) TO KU1REC20.KUNCRFL;*/
   /* MOVE KM0WM050.KM0WW2P1 TO KU1REC20.KU1P1CHO;*/
   /* MOVE KM0WM050.KUCCOID(2) TO KU1REC20.KUCCOID;*/
   /* MOVE KM0WM050.KM0WW2P2 TO KU1REC20.KU1P2CHO;*/
   /* MOVE KM0WM050.KUCGRPID(2) TO KU1REC20.KUCGRPID;*/
   /* MOVE KM0WM050.KM0WW2P3 TO KU1REC20.KU1P3CHO;*/
   /* MOVE KM0WM050.KUMSTRID(2) TO KU1REC20.KUMSTRID;*/
   /* MOVE KM0WM050.KM0WW2P4 TO KU1REC20.KU1P4CHO;*/
   /* MOVE KM0WM050.XGPCD(2) TO KU1REC20.XGPCD;*/
   /* MOVE KM0WM050.KM0WW2P5 TO KU1REC20.KU1P5CHO;*/
   /* MOVE KM0WM050.KUNCRFL(2) TO KU1REC20.KU1CRFL;*/
   /* ;*/
   /* MOVE KU1REC20.KU1KEY TO KM0WW01.KM0WWOTK(KM0WWIDX);*/
   /* MOVE KU1REC20.KU1DATA TO KM0WW01.KM0WWOTD(KM0WWIDX);*/
   /* ND ;*/
  ;
   /* format order record type*/
  ;
   /* F KM0WM050.XCICD(1) NE ' ';*/
   /* SET KU1REC21 EMPTY;*/
   /* KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;*/
   /* MOVE '21' TO KU1REC21.KU1RTYPE;*/
   /* MOVE XX0XW01.XX0XWDAT TO KU1REC21.ZZZCHGDT;*/
   /* MOVE XX0XW01.XX0XWTIM TO KU1REC21.ZZZCHGTM;*/
   /* MOVE KM0WW01.KM0WWIX2 TO KU1REC21.KU1SEQID;*/
   /* MOVE COMMAREA.CAUSERID TO KU1REC21.XXXUSRID;*/
   /* MOVE KM0WM050.XCICD(1) TO KU1REC21.XCICD;*/
   /* MOVE KM0WM050.KM0WW3P1 TO KU1REC21.KU1P1CHO;*/
   /* MOVE KM0WM050.KUCCOID(3) TO KU1REC21.KUCCOID;*/
   /* MOVE KM0WM050.KM0WW3P2 TO KU1REC21.KU1P2CHO;*/
   /* MOVE KM0WM050.KUCGRPID(3) TO KU1REC21.KUCGRPID;*/
   /* MOVE KM0WM050.KM0WW3P3 TO KU1REC21.KU1P3CHO;*/
   /* MOVE KM0WM050.KUMSTRID(3) TO KU1REC21.KUMSTRID;*/
   /* MOVE KM0WM050.KM0WW3P4 TO KU1REC21.KU1P4CHO;*/
   /* MOVE KM0WM050.XGPCD(3) TO KU1REC21.XGPCD;*/
   /* MOVE KM0WM050.KM0WW3P5 TO KU1REC21.KU1P5CHO;*/
   /* MOVE KM0WM050.XCICD(2) TO KU1REC21.KU1XCICD;*/
   /* ;*/
   /* MOVE KU1REC21.KU1KEY TO KM0WW01.KM0WWOTK(KM0WWIDX);*/
   /* MOVE KU1REC21.KU1DATA TO KM0WW01.KM0WWOTD(KM0WWIDX);*/
   /* ND ;*/
  ;
   /* format po nbr record type*/
  ;
   /* F KM0WM050.KUNPORFL(1) NE ' ';*/
   /* SET KU1REC19 EMPTY;*/
   /* KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;*/
   /* MOVE '19' TO KU1REC19.KU1RTYPE;*/
   /* MOVE XX0XW01.XX0XWDAT TO KU1REC19.ZZZCHGDT;*/
   /* MOVE XX0XW01.XX0XWTIM TO KU1REC19.ZZZCHGTM;*/
   /* MOVE KM0WW01.KM0WWIX2 TO KU1REC19.KU1SEQID;*/
   /* MOVE COMMAREA.CAUSERID TO KU1REC19.XXXUSRID;*/
   /* MOVE KM0WM050.KUNPORFL(1) TO KU1REC19.KUNPORFL;*/
   /* MOVE KM0WM050.KM0WW4P1 TO KU1REC19.KU1P1CHO;*/
   /* MOVE KM0WM050.KUCCOID(4) TO KU1REC19.KUCCOID;*/
   /* MOVE KM0WM050.KM0WW4P2 TO KU1REC19.KU1P2CHO;*/
   /* MOVE KM0WM050.KUCGRPID(4) TO KU1REC19.KUCGRPID;*/
   /* MOVE KM0WM050.KM0WW4P3 TO KU1REC19.KU1P3CHO;*/
   /* MOVE KM0WM050.KUMSTRID(4) TO KU1REC19.KUMSTRID;*/
   /* MOVE KM0WM050.KM0WW4P4 TO KU1REC19.KU1P4CHO;*/
   /* MOVE KM0WM050.XGPCD(4) TO KU1REC19.XGPCD;*/
   /* MOVE KM0WM050.KM0WW4P5 TO KU1REC19.KU1P5CHO;*/
   /* MOVE KM0WM050.KUNPORFL(2) TO KU1REC19.KU1PORFL;*/
   /* ;*/
   /* MOVE KU1REC19.KU1KEY TO KM0WW01.KM0WWOTK(KM0WWIDX);*/
   /* MOVE KU1REC19.KU1DATA TO KM0WW01.KM0WWOTD(KM0WWIDX);*/
   /* ND ;*/
  ;
  ;
   /* format call class code*/
  ;
   /* F KM0WM050.YCLCD(1) NE ' ';*/
   /* SET KU1REC45 EMPTY;*/
   /* KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;*/
   /* MOVE '45' TO KU1REC45.KU1RTYPE;*/
   /* MOVE XX0XW01.XX0XWDAT TO KU1REC45.ZZZCHGDT;*/
   /* MOVE XX0XW01.XX0XWTIM TO KU1REC45.ZZZCHGTM;*/
   /* MOVE KM0WW01.KM0WWIX2 TO KU1REC45.KU1SEQID;*/
   /* MOVE COMMAREA.CAUSERID TO KU1REC45.XXXUSRID;*/
   /* MOVE KM0WM050.YCLCD(1) TO KU1REC45.YCLCD;*/
   /* MOVE KM0WM050.KM0WW6P1 TO KU1REC45.KU1P1CHO;*/
   /* MOVE KM0WM050.KUCCOID(5) TO KU1REC45.KUCCOID;*/
   /* MOVE KM0WM050.KM0WW6P2 TO KU1REC45.KU1P2CHO;*/
   /* MOVE KM0WM050.KUMSTRID(5) TO KU1REC45.KUMSTRID;*/
   /* MOVE KM0WM050.KM0WW6P3 TO KU1REC45.KU1P3CHO;*/
   /* MOVE KM0WM050.XGPCD(5) TO KU1REC45.XGPCD;*/
   /* MOVE KM0WM050.KM0WW6P4 TO KU1REC45.KU1P4CHO;*/
   /* MOVE KM0WM050.YCLCD(2) TO KU1REC45.KU1YCLCD;*/
   /* ;*/
   /* MOVE KU1REC45.KU1KEY TO KM0WW01.KM0WWOTK(KM0WWIDX);*/
   /* MOVE KU1REC45.KU1DATA TO KM0WW01.KM0WWOTD(KM0WWIDX);*/
   /* ND ;*/
  ;
  ;
   /* below will reset index prior to add to output batch file*/
  ;
  KM0WW01.KM0WWIDX = 0;
  ;
end // end KM0WS19

// bld output table for cust map3
Function KM0WS20()
  XX0XS01();
  ;
  KM0WW01.KM0WWIDX = 0;
  KM0WW01.KM0WWIX2 = KM0WW01.KM0WWIX2 + 1;
  ;
   /* format chg record type*/
  ;
  if (KM0WM060.KUNCAFL[1] != " ")
    set KU1REC23 empty;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
    KU1REC23.KU1RTYPE = "23";
    KU1REC23.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC23.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC23.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC23.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC23.KUNCAFL = KM0WM060.KUNCAFL[1];
    KU1REC23.KU1P1CHO = KM0WM060.KM0WW1P1;
    KU1REC23.KUCCOID = KM0WM060.KUCCOID[1];
    KU1REC23.KU1P2CHO = KM0WM060.KM0WW1P2;
    KU1REC23.KUCGRPID = KM0WM060.KUCGRPID[1];
    KU1REC23.KU1P3CHO = KM0WM060.KM0WW1P3;
    KU1REC23.KUMSTRID = KM0WM060.KUMSTRID[1];
    KU1REC23.KU1P4CHO = KM0WM060.KM0WW1P4;
    KU1REC23.XGPCD = KM0WM060.XGPCD[1];
    KU1REC23.KU1P5CHO = KM0WM060.KM0WW1P5;
    KU1REC23.KU1CAFL = KM0WM060.KUNCAFL[2];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC23.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC23.KU1DATA;
  end
  ;
   /* format subs record type*/
  ;
  if (KM0WM060.KUNNOSFL[1] != " ")
    set KU1REC24 empty;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
    KU1REC24.KU1RTYPE = "24";
    KU1REC24.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC24.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC24.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC24.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC24.KUNNOSFL = KM0WM060.KUNNOSFL[1];
    KU1REC24.KU1P1CHO = KM0WM060.KM0WW2P1;
    KU1REC24.KUCCOID = KM0WM060.KUCCOID[2];
    KU1REC24.KU1P2CHO = KM0WM060.KM0WW2P2;
    KU1REC24.KUCGRPID = KM0WM060.KUCGRPID[2];
    KU1REC24.KU1P3CHO = KM0WM060.KM0WW2P3;
    KU1REC24.KUMSTRID = KM0WM060.KUMSTRID[2];
    KU1REC24.KU1P4CHO = KM0WM060.KM0WW2P4;
    KU1REC24.XGPCD = KM0WM060.XGPCD[2];
    KU1REC24.KU1P5CHO = KM0WM060.KM0WW2P5;
    KU1REC24.KU1NOSFL = KM0WM060.KUNNOSFL[2];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC24.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC24.KU1DATA;
  end
  ;
   /* format sport activity*/
  ;
  if (KM0WM060.KUNSPCD[1] != " ")
    set KU1REC33 empty;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
    KU1REC33.KU1RTYPE = "33";
    KU1REC33.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC33.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC33.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC33.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC33.KUNSPCD = KM0WM060.KUNSPCD[1];
    KU1REC33.KU1P1CHO = KM0WM060.KM0WW3P1;
    KU1REC33.KUCCOID = KM0WM060.KUCCOID[3];
    KU1REC33.KU1P2CHO = KM0WM060.KM0WW3P2;
    KU1REC33.KUCGRPID = KM0WM060.KUCGRPID[3];
    KU1REC33.KU1P3CHO = KM0WM060.KM0WW3P3;
    KU1REC33.KUMSTRID = KM0WM060.KUMSTRID[3];
    KU1REC33.KU1P4CHO = KM0WM060.KM0WW3P4;
    KU1REC33.XGPCD = KM0WM060.XGPCD[3];
    KU1REC33.KU1P5CHO = KM0WM060.KM0WW3P5;
    KU1REC33.SM1AGYID = KM0WM060.SM1AGYID;
    KU1REC33.KU1P6CHO = KM0WM060.KM0WW3P6;
    KU1REC33.KU1SPCD = KM0WM060.KUNSPCD[2];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC33.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC33.KU1DATA;
  end
  ;
   /* format special labels record type*/
  ;
  if (KM0WM060.KUSTEXT1[1] != " "
   || KM0WM060.KUSTEXT2[1] != " "
   || KM0WM060.KM0WWNBL[1] != " "
   || KM0WM060.KM0WWNBL[2] != " ")
    set KU1REC31 empty;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
    KU1REC31.KU1RTYPE = "31";
    KU1REC31.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC31.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC31.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC31.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC31.KUSTEXT1 = KM0WM060.KUSTEXT1[1];
    KU1REC31.KUSTEXT2 = KM0WM060.KUSTEXT2[1];
    KU1REC31.KU1NBLK1 = KM0WM060.KM0WWNBL[1];
    KU1REC31.KU1NBLK2 = KM0WM060.KM0WWNBL[2];
    KU1REC31.KU1P1CHO = KM0WM060.KM0WW4P1;
    KU1REC31.KUCCOID = KM0WM060.KUCCOID[4];
    KU1REC31.KU1P2CHO = KM0WM060.KM0WW4P2;
    KU1REC31.KUCGRPID = KM0WM060.KUCGRPID[4];
    KU1REC31.KU1P3CHO = KM0WM060.KM0WW4P3;
    KU1REC31.KUMSTRID = KM0WM060.KUMSTRID[4];
    KU1REC31.KU1P4CHO = KM0WM060.KM0WW4P4;
    KU1REC31.XNXCD = KM0WM060.XNXCD;
    KU1REC31.KU1P5CHO = KM0WM060.KM0WW4P5;
    KU1REC31.XGPCD = KM0WM060.XGPCD[4];
    KU1REC31.KU1P6CHO = KM0WM060.KM0WW4P6;
    KU1REC31.KU1TEXT1 = KM0WM060.KUSTEXT1[2];
    KU1REC31.KU1P7CHO = KM0WM060.KM0WW4P7;
    KU1REC31.KU1TEXT2 = KM0WM060.KUSTEXT2[2];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC31.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC31.KU1DATA;
  end
  ;
  ;
  ;
   /* below will reset index prior to add to output batch file*/
  ;
  KM0WW01.KM0WWIDX = 0;
  ;
end // end KM0WS20

// bld output tbl for list o cmpn
Function KM0WS21()
  XX0XS01();
  ;
  KM0WW01.KM0WWIX2 = KM0WW01.KM0WWIX2 + 1;
  ;
   /* format company name record type*/
  ;
  if (KM0WM070.KM0WW1P1 != " ")
    set KU1REC04 empty;
    KU1REC04.KU1RTYPE = "04";
    KU1REC04.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC04.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC04.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC04.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC04.KUCCONM = KM0WM070.KUCCONM;
    KU1REC04.KUCCOID = KM0WM070.KUCCOID[KM0WWIDX];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC04.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC04.KU1DATA;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
  end
  ;
   /* format cr line xdate record type*/
  ;
  if (KM0WM070.KM0WW2P1 != " ")
    set KU1REC05 empty;
    KU1REC05.KU1RTYPE = "05";
    KU1REC05.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC05.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC05.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC05.XXXUSRID = COMMAREA.CAUSERID;
    ;
  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* MOVE 19 TO KM0WW01.KM0WWYDC;*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/
    ;
  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
    if (KM0WM070.KM0WMMTH > 0)
      if (KM0WM070.KM0WMYR > 60)
        KM0WW01.KM0WWYDC = 19;
      else
        KM0WW01.KM0WWYDC = 20;
      end
    else
      KM0WW01.KM0WWYDC = 0;
    end
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/
    ;
    KM0WW01.KM0WWYDY = KM0WM070.KM0WMYR;
    KM0WW01.KM0WWYDM = KM0WM070.KM0WMMTH;
    KM0WW01.KM0WWYDD = 00;
    KU1REC05.KUCCRLEX = KM0WW01.KM0WWYMD;
    KU1REC05.KUCCOID = KM0WM070.KUCCOID[KM0WWIDX];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC05.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC05.KU1DATA;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
  end
  ;
  ;
   /* format analyst code record type*/
  ;
  if (KM0WM070.KM0WW3P1 != " ")
    set KU1REC02 empty;
    KU1REC02.KU1RTYPE = "02";
    KU1REC02.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC02.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC02.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC02.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC02.XCUCD = KM0WM070.XCUCD[1];
    KU1REC02.KU1P1CHO = " ";
    KU1REC02.XSTCD = " ";
    KU1REC02.KU1P2CHO = " ";
    KU1REC02.KU1XCUCD = " ";
    KU1REC02.KU1P3CHO = KM0WM070.KM0WW3P1;
    KU1REC02.KUCCOID = KM0WM070.KUCCOID[KM0WWIDX];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC02.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC02.KU1DATA;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
  end
  ;
  ;
   /* format company status record type*/
  ;
  if (KM0WM070.KM0WW4P1 != " ")
    set KU1REC40 empty;
    KU1REC40.KU1RTYPE = "40";
    KU1REC40.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC40.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC40.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC40.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC40.XXXSTAT = KM0WM070.XXXSTAT;
    KU1REC40.KUCCOID = KM0WM070.KUCCOID[KM0WWIDX];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC40.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC40.KU1DATA;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
  end
  ;
  ;
   /* format credit resp record type*/
  ;
  if (KM0WM070.KM0WW5P1 != " ")
    set KU1REC43 empty;
    KU1REC02.KU1RTYPE = "43";
    KU1REC43.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC43.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC43.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC43.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC43.XCUCD = KM0WM070.XCUCD[2];
    KU1REC43.KU1P1CHO = KM0WM070.KM0WW5P1;
    KU1REC43.KUCCOID = KM0WM070.KUCCOID[KM0WWIDX];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC43.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC43.KU1DATA;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
  end
  ;
   /* format invoice delay record type*/
  ;
  if (KM0WM070.KM0WW6P1 != " ")
    set KU1REC44 empty;
    KU1REC44.KU1RTYPE = "44";
    KU1REC44.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC44.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC44.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC44.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC44.KUCIDIND = KM0WM070.KUCIDIND;
    KU1REC44.KU1P1CHO = KM0WM070.KM0WW6P1;
    KU1REC44.KUCCOID = KM0WM070.KUCCOID[KM0WWIDX];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC44.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC44.KU1DATA;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
  end
  ;
   /* format send statement record type*/
  ;
  if (KM0WM070.KM0WW7P1 != " ")
    set KU1REC46 empty;
    KU1REC46.KU1RTYPE = "46";
    KU1REC46.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC46.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC46.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC46.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC46.KM0WWSTM = KM0WM070.KM0WMSTM;
    KU1REC46.KU1P1CHO = KM0WM070.KM0WW7P1;
    KU1REC46.KUCCOID = KM0WM070.KUCCOID[KM0WWIDX];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC46.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC46.KU1DATA;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
  end
  ;
  ;
  ;
   /* below is a bug catcher - only if user hit pf12 without*/
     /* choosing a new field will this come into play to*/
     /* prevent a loop situation*/
  ;
  if (KM0WM070.KM0WW1P1 != " "
   || KM0WM070.KM0WW2P1 != " "
   || KM0WM070.KM0WW3P1 != " "
   || KM0WM070.KM0WW4P1 != " "
   || KM0WM070.KM0WW5P1 != " "
   || KM0WM070.KM0WW6P1 != " ")
     /* next sentence*/
  else
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
  end
  ;
end // end KM0WS21

// edit addr,city,state,zip,ctry
Function KM0WS22()
  ;
    /* check store address - use xa0a - address appl*/
  ;
  set XA0AW02 empty; /* clear work fields*/
  XA0AW02.XXX-ADDR1 = KM0WM080.XXXADDR1;
  XA0AW02.XXX-ADDR2 = KM0WM080.XXXADDR2;
  XA0AW02.XXX-ADDR3 = KM0WM080.XXXADDR3;
  XA0AW02.XXXCITY = KM0WM080.XXXCITY;
  XA0AW02.XSTCD = KM0WM080.XSTCD;
  XA0AW02.XXXZIP = KM0WM080.XXXZIP;
  XA0AW02.XCTCD = KM0WM080.XCTCD;
  XA0AW02.XA0AWFNC = "E"; /* request edit*/
  ;
  call "XA0A" (XA0AW02) {isNoRefresh = yes}; /* call address appl*/
  KM0WM080.XCTCD = XA0AW02.XCTCD;
  ;
  if (XA0AW02.XA0AWERR[8] != 0) /* check country code*/
    set KM0WM080.XCTCD cursor, modified, bold;
    if (XA0AW02.XA0AWERR[8] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[8]);
    end
  end
  if (XA0AW02.XA0AWERR[7] != 0) /* check zip code*/
    set KM0WM080.XXXZIP cursor, modified, bold;
    if (XA0AW02.XA0AWERR[7] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[7]);
    end
  end
  if (XA0AW02.XA0AWERR[6] != 0) /* check state code*/
    set KM0WM080.XSTCD cursor, modified, bold;
    if (XA0AW02.XA0AWERR[6] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[6]);
    end
  end
  if (XA0AW02.XA0AWERR[5] != 0) /* check city code*/
    set KM0WM080.XXXCITY cursor, modified, bold;
    if (XA0AW02.XA0AWERR[5] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[5]);
    end
  end
  if (XA0AW02.XA0AWERR[4] != 0) /* check address line*/
    set KM0WM080.XXXADDR3 cursor, modified, bold;
    if (XA0AW02.XA0AWERR[4] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA0AW02.XA0AWERR[4]);
    end
  end
  ;
  KM0WM080.XXXADDR1 = XA0AW02.XXX-ADDR1;
  KM0WM080.XXXADDR2 = XA0AW02.XXX-ADDR2;
  KM0WM080.XXXADDR3 = XA0AW02.XXX-ADDR3;
  ;
end // end KM0WS22

// bld ws tbl for str & lst cmpny
Function KM0WS23()
  XX0XS01();
  ;
  KM0WW01.KM0WWIX2 = KM0WW01.KM0WWIX2 + 1;
  ;
   /* format address record type*/
  ;
  if (KM0WM080.KM0WW1P1 != " ")
    set KU1REC11 empty;
    KU1REC11.KU1RTYPE = "11";
    KU1REC11.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC11.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC11.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC11.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC11.XXXADDR1 = KM0WM080.XXXADDR1;
    KU1REC11.XXXADDR2 = KM0WM080.XXXADDR2;
    KU1REC11.XXXADDR3 = KM0WM080.XXXADDR3;
    KU1REC11.XXXCITY = KM0WM080.XXXCITY;
    KU1REC11.XSTCD = KM0WM080.XSTCD;
    KU1REC11.XXXZIP = KM0WM080.XXXZIP;
    KU1REC11.XCTCD = KM0WM080.XCTCD;
    KU1REC11.KUMSTRID = KM0WM080.KUMSTRID;
    KU1REC11.KUCCOID = KM0WM080.KUCCOID[KM0WWIDX];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC11.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC11.KU1DATA;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
  end
  ;
   /* format store name record type*/
  ;
  if (KM0WM080.KM0WW2P1 != " ")
    set KU1REC17 empty;
    KU1REC17.KU1RTYPE = "17";
    KU1REC17.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC17.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC17.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC17.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC17.KUMSTRNM = KM0WM080.KUMSTRNM;
    KU1REC17.KUMSTRID = KM0WM080.KUMSTRID;
    KU1REC17.KUCCOID = KM0WM080.KUCCOID[KM0WWIDX];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC17.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC17.KU1DATA;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
  end
  ;
   /* below is used to prevent infinite loop*/
  ;
  if (KM0WM080.KM0WW1P1 != " "
   || KM0WM080.KM0WW2P1 != " ")
     /* next sentence*/
  else
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
  end
  ;
end // end KM0WS23

// bld ws tbl for cmpny & lst str
Function KM0WS24()
  XX0XS01();
  ;
  KM0WW01.KM0WWIX2 = KM0WW01.KM0WWIX2 + 1;
  ;
   /* format store name record type*/
  ;
  if (KM0WM090.KM0WW1P1 != " ")
    set KU1REC17 empty;
    KU1REC17.KU1RTYPE = "17";
    KU1REC17.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC17.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC17.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC17.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC17.KUMSTRNM = KM0WM090.KUMSTRNM;
    KU1REC17.KUMSTRID = KM0WM090.KUMSTRID[KM0WWIDX];
    KU1REC17.KUCCOID = KM0WM090.KUCCOID;
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC17.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC17.KU1DATA;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
  end
  ;
   /* format store status record type*/
  ;
  if (KM0WM090.KM0WW2P1 != " ")
    set KU1REC41 empty;
    KU1REC41.KU1RTYPE = "41";
    KU1REC41.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC41.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC41.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC41.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC41.XXXSTAT = KM0WM090.XXXSTAT;
    KU1REC41.KUMSTRID = KM0WM090.KUMSTRID[KM0WWIDX];
    KU1REC41.KUCCOID = KM0WM090.KUCCOID;
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC41.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC41.KU1DATA;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
  end
  ;
   /* below is used to prevent infinite loop*/
  ;
  if (KM0WM090.KM0WW1P1 != " "
   || KM0WM090.KM0WW2P1 != " ")
     /* next sentence*/
  else
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
  end
  ;
end // end KM0WS24

// perform basic parameter edits
Function KM0WS28()
  ;
   /* this will check if param entered but 'x' not in front of it*/
  ;
  ;
  if (KM0WM040.XGACD[2] != " ")
    if (KM0WM040.KM0WW6P5 == " ")
      converseLib.validationFailed(165);
      set KM0WM040.KM0WW6P5 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM040.XGPCD[6] != " ")
    if (KM0WM040.KM0WW6P4 == " ")
      converseLib.validationFailed(165);
      set KM0WM040.KM0WW6P4 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM040.KUMSTRID[5] != 0)
    if (KM0WM040.KM0WW6P3 == " ")
      converseLib.validationFailed(165);
      set KM0WM040.KM0WW6P3 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM040.KUCGRPID[4] != 0)
    if (KM0WM040.KM0WW6P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM040.KM0WW6P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM040.KUCCOID[6] != 0)
    if (KM0WM040.KM0WW6P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM040.KM0WW6P1 cursor, modified, bold;
    end
  end
  ;
   /* F KM0WM040.XIDCD(2) NE ' ';*/
   /* IF KM0WM040.KM0WW5P5 EQ ' ';*/
     /* MOVE 165 TO EZEMNO;*/
     /* SET KM0WM040.KM0WW5P5 CURSOR,MODIFIED,BRIGHT;*/
   /* END ;*/
   /* ND ;*/
  ;
   /* F KM0WM040.XGPCD(5) NE ' ';*/
   /* IF KM0WM040.KM0WW5P4 EQ ' ';*/
     /* MOVE 165 TO EZEMNO;*/
     /* SET KM0WM040.KM0WW5P4 CURSOR,MODIFIED,BRIGHT;*/
   /* END ;*/
   /* ND ;*/
  ;
   /* F KM0WM040.KUMSTRID(4) NE 0;*/
   /* IF KM0WM040.KM0WW5P3 EQ ' ';*/
     /* MOVE 165 TO EZEMNO;*/
     /* SET KM0WM040.KM0WW5P3 CURSOR,MODIFIED,BRIGHT;*/
   /* END ;*/
   /* ND ;*/
  ;
   /* F KM0WM040.KUCGRPID(3) NE 0;*/
   /* IF KM0WM040.KM0WW5P2 EQ ' ';*/
     /* MOVE 165 TO EZEMNO;*/
     /* SET KM0WM040.KM0WW5P2 CURSOR,MODIFIED,BRIGHT;*/
   /* END ;*/
   /* ND ;*/
  ;
   /* F KM0WM040.KUCCOID(5) NE 0;*/
   /* IF KM0WM040.KM0WW5P1 EQ ' ';*/
     /* MOVE 165 TO EZEMNO;*/
     /* SET KM0WM040.KM0WW5P1 CURSOR,MODIFIED,BRIGHT;*/
   /* END ;*/
   /* ND ;*/
  ;
  if (KM0WM040.KUNALSEQ[2] != 0)
    if (KM0WM040.KM0WW4P5 == " ")
      converseLib.validationFailed(165);
      set KM0WM040.KM0WW4P5 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM040.XGPCD[4] != " ")
    if (KM0WM040.KM0WW4P4 == " ")
      converseLib.validationFailed(165);
      set KM0WM040.KM0WW4P4 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM040.KUMSTRID[3] != 0)
    if (KM0WM040.KM0WW4P3 == " ")
      converseLib.validationFailed(165);
      set KM0WM040.KM0WW4P3 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM040.KUCGRPID[2] != 0)
    if (KM0WM040.KM0WW4P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM040.KM0WW4P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM040.KUCCOID[4] != 0)
    if (KM0WM040.KM0WW4P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM040.KM0WW4P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM040.XXXSTAT[2] != " ")
    if (KM0WM040.KM0WW3P5 == " ")
      converseLib.validationFailed(165);
      set KM0WM040.KM0WW3P5 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM040.XGPCD[3] != " ")
    if (KM0WM040.KM0WW3P4 == " ")
      converseLib.validationFailed(165);
      set KM0WM040.KM0WW3P4 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM040.XNXCD != 0)
    if (KM0WM040.KM0WW3P3 == " ")
      converseLib.validationFailed(165);
      set KM0WM040.KM0WW3P3 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM040.KUMSTRID[2] != 0)
    if (KM0WM040.KM0WW3P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM040.KM0WW3P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM040.KUCCOID[3] != 0)
    if (KM0WM040.KM0WW3P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM040.KM0WW3P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM040.XACCD[2] != " ")
    if (KM0WM040.KM0WW2P5 == " ")
      converseLib.validationFailed(165);
      set KM0WM040.KM0WW2P5 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM040.XGPCD[2] != " ")
    if (KM0WM040.KM0WW2P4 == " ")
      converseLib.validationFailed(165);
      set KM0WM040.KM0WW2P4 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM040.KUMSTRID[1] != 0)
    if (KM0WM040.KM0WW2P3 == " ")
      converseLib.validationFailed(165);
      set KM0WM040.KM0WW2P3 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM040.KUCGRPID[1] != 0)
    if (KM0WM040.KM0WW2P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM040.KM0WW2P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM040.KUCCOID[2] != 0)
    if (KM0WM040.KM0WW2P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM040.KM0WW2P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM040.SM1AGYID[2] != " ")
    if (KM0WM040.KM0WW1P4 == " ")
      converseLib.validationFailed(165);
      set KM0WM040.KM0WW1P4 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM040.SM4REPID[2] != 0)
    if (KM0WM040.KM0WW1P3 == " ")
      converseLib.validationFailed(165);
      set KM0WM040.KM0WW1P3 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM040.XGPCD[1] != " ")
    if (KM0WM040.KM0WW1P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM040.KM0WW1P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM040.KUCCOID[1] != 0)
    if (KM0WM040.KM0WW1P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM040.KM0WW1P1 cursor, modified, bold;
    end
  end
  ;
  ;
   /* this will edit for either company or grp must be chosen*/
  ;
  if (KM0WM040.XGACD[1] != " ")
    if (KM0WM040.KUCCOID[6] == 0
     && KM0WM040.KUCGRPID[4] == 0)
      converseLib.validationFailed(164);
      set KM0WM040.KM0WW6P1 cursor, modified, bold;
    end
  end
  ;
   /* F KM0WM040.XIDCD(1) NE ' ';*/
   /* IF KM0WM040.kUCCOID(5) EQ 0;*/
     /* AND KM0WM040.KUCGRPID(3) EQ 0;*/
     /* MOVE 164 TO EZEMNO;*/
     /* SET KM0WM040.KM0WW5P1 CURSOR,MODIFIED,BRIGHT;*/
   /* END ;*/
   /* ND ;*/
  ;
  if (KM0WM040.KUNALSEQ[1] != 0)
    if (KM0WM040.KUCCOID[4] == 0
     && KM0WM040.KUCGRPID[2] == 0)
      converseLib.validationFailed(164);
      set KM0WM040.KM0WW4P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM040.XXXSTAT[1] != " ")
    if (KM0WM040.KUCCOID[3] == 0)
      converseLib.validationFailed(114); /* required field*/
      set KM0WM040.KM0WW3P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM040.XACCD[1] != " ")
    if (KM0WM040.KUCCOID[2] == 0
     && KM0WM040.KUCGRPID[1] == 0)
      converseLib.validationFailed(164);
      set KM0WM040.KM0WW2P1 cursor, modified, bold;
    end
  end
  ;
end // end KM0WS28

// perform basic param edits
Function KM0WS29()
  ;
   /* this will check if param entered but 'x' not in front of it*/
  ;
  ;
  if (KM0WM050.YCLCD[2] != " ")
    if (KM0WM050.KM0WW6P4 == " ")
      converseLib.validationFailed(165);
      set KM0WM050.KM0WW6P4 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM050.XGPCD[5] != " ")
    if (KM0WM050.KM0WW6P3 == " ")
      converseLib.validationFailed(165);
      set KM0WM050.KM0WW6P3 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM050.KUMSTRID[5] != 0)
    if (KM0WM050.KM0WW6P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM050.KM0WW6P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM050.KUCCOID[5] != 0)
    if (KM0WM050.KM0WW6P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM050.KM0WW6P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM050.KUNPORFL[2] != " ")
    if (KM0WM050.KM0WW4P5 == " ")
      converseLib.validationFailed(165);
      set KM0WM050.KM0WW4P5 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM050.XGPCD[4] != " ")
    if (KM0WM050.KM0WW4P4 == " ")
      converseLib.validationFailed(165);
      set KM0WM050.KM0WW4P4 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM050.KUMSTRID[4] != 0)
    if (KM0WM050.KM0WW4P3 == " ")
      converseLib.validationFailed(165);
      set KM0WM050.KM0WW4P3 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM050.KUCGRPID[4] != 0)
    if (KM0WM050.KM0WW4P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM050.KM0WW4P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM050.KUCCOID[4] != 0)
    if (KM0WM050.KM0WW4P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM050.KM0WW4P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM050.KM0WXCI[2] != " ")
    if (KM0WM050.KM0WW3P5 == " ")
      converseLib.validationFailed(165);
      set KM0WM050.KM0WW3P5 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM050.XGPCD[3] != " ")
    if (KM0WM050.KM0WW3P4 == " ")
      converseLib.validationFailed(165);
      set KM0WM050.KM0WW3P4 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM050.KUMSTRID[3] != 0)
    if (KM0WM050.KM0WW3P3 == " ")
      converseLib.validationFailed(165);
      set KM0WM050.KM0WW3P3 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM050.KUCGRPID[3] != 0)
    if (KM0WM050.KM0WW3P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM050.KM0WW3P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM050.KUCCOID[3] != 0)
    if (KM0WM050.KM0WW3P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM050.KM0WW3P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM050.KUNCRFL[2] != " ")
    if (KM0WM050.KM0WW2P5 == " ")
      converseLib.validationFailed(165);
      set KM0WM050.KM0WW2P5 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM050.XGPCD[2] != " ")
    if (KM0WM050.KM0WW2P4 == " ")
      converseLib.validationFailed(165);
      set KM0WM050.KM0WW2P4 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM050.KUMSTRID[2] != 0)
    if (KM0WM050.KM0WW2P3 == " ")
      converseLib.validationFailed(165);
      set KM0WM050.KM0WW2P3 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM050.KUCGRPID[2] != 0)
    if (KM0WM050.KM0WW2P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM050.KM0WW2P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM050.KUCCOID[2] != 0)
    if (KM0WM050.KM0WW2P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM050.KM0WW2P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM050.KUNBOQTY[2] != 0)
    if (KM0WM050.KM0WW1P6 == " ")
      converseLib.validationFailed(165);
      set KM0WM050.KM0WW1P6 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM050.KUNBOCD[2] != " ")
    if (KM0WM050.KM0WW1P5 == " ")
      converseLib.validationFailed(165);
      set KM0WM050.KM0WW1P5 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM050.XGPCD[1] != " ")
    if (KM0WM050.KM0WW1P4 == " ")
      converseLib.validationFailed(165);
      set KM0WM050.KM0WW1P4 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM050.KUMSTRID[1] != 0)
    if (KM0WM050.KM0WW1P3 == " ")
      converseLib.validationFailed(165);
      set KM0WM050.KM0WW1P3 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM050.KUCGRPID[1] != 0)
    if (KM0WM050.KM0WW1P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM050.KM0WW1P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM050.KUCCOID[1] != 0)
    if (KM0WM050.KM0WW1P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM050.KM0WW1P1 cursor, modified, bold;
    end
  end
  ;
  ;
   /* this will edit for either company or grp must be chosen*/
  ;
  if (KM0WM050.KUNPORFL[1] != " ")
    if (KM0WM050.KUCCOID[4] == 0
     && KM0WM050.KUCGRPID[4] == 0)
      converseLib.validationFailed(164);
      set KM0WM050.KM0WW4P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM050.KM0WXCI[1] != " ")
    if (KM0WM050.KUCCOID[3] == 0
     && KM0WM050.KUCGRPID[3] == 0)
      converseLib.validationFailed(164);
      set KM0WM050.KM0WW3P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM050.KUNCRFL[1] != " ")
    if (KM0WM050.KUCCOID[2] == 0
     && KM0WM050.KUCGRPID[2] == 0)
      converseLib.validationFailed(164);
      set KM0WM050.KM0WW2P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM050.KUNBOCD[1] != " ")
    if (KM0WM050.KUCCOID[1] == 0
     && KM0WM050.KUCGRPID[1] == 0)
      converseLib.validationFailed(164);
      set KM0WM050.KM0WW1P1 cursor, modified, bold;
    end
  end
  ;
  ;
end // end KM0WS29

// perform basic parameter edits
Function KM0WS30()
  ;
   /* this will check if param entered but 'x' not in front of it*/
  ;
  ;
  if (KM0WM060.KUSTEXT2[2] != " ")
    if (KM0WM060.KM0WW4P7 == " ")
      converseLib.validationFailed(165);
      set KM0WM060.KM0WW4P7 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM060.KUSTEXT1[2] != " ")
    if (KM0WM060.KM0WW4P6 == " ")
      converseLib.validationFailed(165);
      set KM0WM060.KM0WW4P6 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM060.XGPCD[4] != " ")
    if (KM0WM060.KM0WW4P5 == " ")
      converseLib.validationFailed(165);
      set KM0WM060.KM0WW4P5 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM060.XNXCD != 0)
    if (KM0WM060.KM0WW4P4 == " ")
      converseLib.validationFailed(165);
      set KM0WM060.KM0WW4P4 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM060.KUMSTRID[4] != 0)
    if (KM0WM060.KM0WW4P3 == " ")
      converseLib.validationFailed(165);
      set KM0WM060.KM0WW4P3 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM060.KUCGRPID[4] != 0)
    if (KM0WM060.KM0WW4P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM060.KM0WW4P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM060.KUCCOID[4] != 0)
    if (KM0WM060.KM0WW4P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM060.KM0WW4P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM060.KUNSPCD[2] != " ")
    if (KM0WM060.KM0WW3P6 == " ")
      converseLib.validationFailed(165);
      set KM0WM060.KM0WW3P6 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM060.SM1AGYID != " ")
    if (KM0WM060.KM0WW3P5 == " ")
      converseLib.validationFailed(165);
      set KM0WM060.KM0WW3P5 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM060.XGPCD[3] != " ")
    if (KM0WM060.KM0WW3P4 == " ")
      converseLib.validationFailed(165);
      set KM0WM060.KM0WW3P4 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM060.KUMSTRID[3] != 0)
    if (KM0WM060.KM0WW3P3 == " ")
      converseLib.validationFailed(165);
      set KM0WM060.KM0WW3P3 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM060.KUCGRPID[3] != 0)
    if (KM0WM060.KM0WW3P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM060.KM0WW3P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM060.KUCCOID[3] != 0)
    if (KM0WM060.KM0WW3P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM060.KM0WW3P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM060.KUNNOSFL[2] != " ")
    if (KM0WM060.KM0WW2P5 == " ")
      converseLib.validationFailed(165);
      set KM0WM060.KM0WW2P5 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM060.XGPCD[2] != " ")
    if (KM0WM060.KM0WW2P4 == " ")
      converseLib.validationFailed(165);
      set KM0WM060.KM0WW2P4 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM060.KUMSTRID[2] != 0)
    if (KM0WM060.KM0WW2P3 == " ")
      converseLib.validationFailed(165);
      set KM0WM060.KM0WW2P3 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM060.KUCGRPID[2] != 0)
    if (KM0WM060.KM0WW2P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM060.KM0WW2P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM060.KUCCOID[2] != 0)
    if (KM0WM060.KM0WW2P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM060.KM0WW2P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM060.KUNCAFL[2] != " ")
    if (KM0WM060.KM0WW1P5 == " ")
      converseLib.validationFailed(165);
      set KM0WM060.KM0WW1P5 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM060.XGPCD[1] != " ")
    if (KM0WM060.KM0WW1P4 == " ")
      converseLib.validationFailed(165);
      set KM0WM060.KM0WW1P4 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM060.KUMSTRID[1] != 0)
    if (KM0WM060.KM0WW1P3 == " ")
      converseLib.validationFailed(165);
      set KM0WM060.KM0WW1P3 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM060.KUCGRPID[1] != 0)
    if (KM0WM060.KM0WW1P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM060.KM0WW1P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM060.KUCCOID[1] != 0)
    if (KM0WM060.KM0WW1P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM060.KM0WW1P1 cursor, modified, bold;
    end
  end
  ;
  ;
   /* this will edit for either company or grp must be chosen*/
  ;
  if (KM0WM060.KUSTEXT1[1] != " "
   || KM0WM060.KUSTEXT2[1] != " "
   || KM0WM060.KM0WWNBL[1] != " "
   || KM0WM060.KM0WWNBL[2] != " ")
    if (KM0WM060.KUCCOID[4] == 0
     && KM0WM060.KUCGRPID[4] == 0)
      converseLib.validationFailed(164);
      set KM0WM060.KM0WW4P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM060.KUNSPCD[1] != " ")
    if (KM0WM060.KUCCOID[3] == 0
     && KM0WM060.KUCGRPID[3] == 0
     && KM0WM060.SM1AGYID == " ")
      converseLib.validationFailed(164);
      set KM0WM060.KM0WW3P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM060.KUNNOSFL[1] != " ")
    if (KM0WM060.KUCCOID[2] == 0
     && KM0WM060.KUCGRPID[2] == 0)
      converseLib.validationFailed(164);
      set KM0WM060.KM0WW2P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM060.KUNCAFL[1] != " ")
    if (KM0WM060.KUCCOID[1] == 0
     && KM0WM060.KUCGRPID[1] == 0)
      converseLib.validationFailed(164);
      set KM0WM060.KM0WW1P1 cursor, modified, bold;
    end
  end
  ;
  ;
end // end KM0WS30

// error routine for params
Function KM0WS31()
  ;
   /* this will check if param entered but 'x' not in front of it*/
  ;
  ;
  if (KM0WM020.KUCGRPID[5] != 0)
    if (KM0WM020.KM0WW8P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM020.KM0WW8P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM020.KUCGRPID[4] != 0)
    if (KM0WM020.KM0WW7P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM020.KM0WW7P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM020.XCCCD[2] != " ")
    if (KM0WM020.KM0WW6P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM020.KM0WW6P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM020.KUCGRPID[3] != 0)
    if (KM0WM020.KM0WW6P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM020.KM0WW6P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM020.KM0WMSRT[2] != " ")
    if (KM0WM020.KM0WW5P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM020.KM0WW5P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM020.KUCGRPID[2] != 0)
    if (KM0WM020.KM0WW5P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM020.KM0WW5P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM020.XCUCD[5] != " ")
    if (KM0WM020.KM0WW4P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM020.KM0WW4P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM020.SM1AGYID != " ")
    if (KM0WM020.KM0WW4P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM020.KM0WW4P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM020.XCUCD[4] != " ")
    if (KM0WM020.KM0WW3P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM020.KM0WW3P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM020.XSTCD != " ")
    if (KM0WM020.KM0WW3P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM020.KM0WW3P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM020.KM0WMSTM[2] != " ")
    if (KM0WM020.KM0WW2P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM020.KM0WW2P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM020.XCUCD[1] != " ")
    if (KM0WM020.KM0WW2P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM020.KM0WW2P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM020.XAUCD[2] != " ")
    if (KM0WM020.KM0WW1P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM020.KM0WW1P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM020.KUCGRPID[1] != 0)
    if (KM0WM020.KM0WW1P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM020.KM0WW1P1 cursor, modified, bold;
    end
  end
  ;
end // end KM0WS31

// error routine for params
Function KM0WS32()
  ;
   /* this will check if param entered but 'x' not in front of it*/
  ;
  ;
  if (KM0WM030.KUMXNIFT[2] != " ")
    if (KM0WM030.KM0WW6P3 == " ")
      converseLib.validationFailed(165);
      set KM0WM030.KM0WW6P3 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM030.KUCGRPID[5] != 0)
    if (KM0WM030.KM0WW6P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM030.KM0WW6P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM030.KUCCOID[5] != 0)
    if (KM0WM030.KM0WW6P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM030.KM0WW6P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM030.YSVCD[2] != " ")
    if (KM0WM030.KM0WW4P3 == " ")
      converseLib.validationFailed(165);
      set KM0WM030.KM0WW4P3 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM030.KUCGRPID[4] != 0)
    if (KM0WM030.KM0WW4P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM030.KM0WW4P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM030.KUCCOID[4] != 0)
    if (KM0WM030.KM0WW4P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM030.KM0WW4P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM030.XGPCD[2] != " ")
    if (KM0WM030.KM0WW3P7 == " ")
      converseLib.validationFailed(165);
      set KM0WM030.KM0WW3P7 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM030.XWHCD[2] != " ")
    if (KM0WM030.KM0WW3P6 == " ")
      converseLib.validationFailed(165);
      set KM0WM030.KM0WW3P6 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM030.KUCCOID[3] != 0)
    if (KM0WM030.KM0WW3P4 == " ")
      converseLib.validationFailed(165);
      set KM0WM030.KM0WW3P4 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM030.XCTCD != " ")
    if (KM0WM030.KM0WW3P3 == " ")
      converseLib.validationFailed(165);
      set KM0WM030.KM0WW3P3 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM030.XSTCD != " ")
    if (KM0WM030.KM0WW3P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM030.KM0WW3P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM030.KUCGRPID[3] != 0)
    if (KM0WM030.KM0WW3P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM030.KM0WW3P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM030.XCFCD[2] != " ")
    if (KM0WM030.KM0WW2P3 == " ")
      converseLib.validationFailed(165);
      set KM0WM030.KM0WW2P3 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM030.KUCGRPID[2] != 0)
    if (KM0WM030.KM0WW2P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM030.KM0WW2P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM030.KUCCOID[2] != 0)
    if (KM0WM030.KM0WW2P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM030.KM0WW2P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM030.KUMXNIAP[2] != " ")
    if (KM0WM030.KM0WW1P3 == " ")
      converseLib.validationFailed(165);
      set KM0WM030.KM0WW1P3 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM030.KUCGRPID[1] != 0)
    if (KM0WM030.KM0WW1P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM030.KM0WW1P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM030.KUCCOID[1] != 0)
    if (KM0WM030.KM0WW1P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM030.KM0WW1P1 cursor, modified, bold;
    end
  end
  ;
end // end KM0WS32

// perform basic parameter edits
Function KM0WS34()
  ;
   /* this will check if param entered but 'x' not in front of it*/
  ;
  ;
  if (KM0WM140.KUQSINST[2] != " ")
    if (KM0WM140.KM0WW2P7 == " ")
      converseLib.validationFailed(165);
      set KM0WM140.KM0WW2P7 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM140.XNDCD[2] != " ")
    if (KM0WM140.KM0WW2P6 == " ")
      converseLib.validationFailed(165);
      set KM0WM140.KM0WW2P6 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM140.XGPCD[2] != " ")
    if (KM0WM140.KM0WW2P5 == " ")
      converseLib.validationFailed(165);
      set KM0WM140.KM0WW2P5 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM140.XNXCD[2] != 0)
    if (KM0WM140.KM0WW2P4 == " ")
      converseLib.validationFailed(165);
      set KM0WM140.KM0WW2P4 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM140.KUMSTRID[2] != 0)
    if (KM0WM140.KM0WW2P3 == " ")
      converseLib.validationFailed(165);
      set KM0WM140.KM0WW2P3 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM140.KUCGRPID[2] != 0)
    if (KM0WM140.KM0WW2P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM140.KM0WW2P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM140.KUCCOID[2] != 0)
    if (KM0WM140.KM0WW2P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM140.KM0WW2P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM140.XSGCD[2] != " ")
    if (KM0WM140.KM0WW1P6 == " ")
      converseLib.validationFailed(165);
      set KM0WM140.KM0WW1P6 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM140.XGPCD[1] != " ")
    if (KM0WM140.KM0WW1P5 == " ")
      converseLib.validationFailed(165);
      set KM0WM140.KM0WW1P5 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM140.XNXCD[1] != 0)
    if (KM0WM140.KM0WW1P4 == " ")
      converseLib.validationFailed(165);
      set KM0WM140.KM0WW1P4 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM140.KUMSTRID[1] != 0)
    if (KM0WM140.KM0WW1P3 == " ")
      converseLib.validationFailed(165);
      set KM0WM140.KM0WW1P3 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM140.KUCGRPID[1] != 0)
    if (KM0WM140.KM0WW1P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM140.KM0WW1P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM140.KUCCOID[1] != 0)
    if (KM0WM140.KM0WW1P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM140.KM0WW1P1 cursor, modified, bold;
    end
  end
  ;
  ;
   /* this will edit for either company or grp must be chosen*/
  ;
  if (KM0WM140.KUQSINST[1] != " "
   || KM0WM140.KM0WWNBL[2] != " ")
    if (KM0WM140.KUCCOID[2] == 0
     && KM0WM140.KUCGRPID[2] == 0)
      converseLib.validationFailed(164);
      set KM0WM140.KM0WW2P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM140.XSGCD[1] != " "
   || KM0WM140.KM0WWNBL[1] != " ")
    if (KM0WM140.KUCCOID[1] == 0
     && KM0WM140.KUCGRPID[1] == 0)
      converseLib.validationFailed(164);
      set KM0WM140.KM0WW1P1 cursor, modified, bold;
    end
  end
  ;
end // end KM0WS34

// edit spec instr & params
Function KM0WS35()
  ;
   /* ****** edit spec instr field and parameters  ********/
  ;
  if (KM0WM140.XNDCD[2] == " ")
    if (KM0WM140.KM0WWNBL[2] != " ")
      converseLib.validationFailed(114); /* field required*/
      set KM0WM140.XNDCD[2] cursor, modified, bold;
    end
  end
  ;
  if (KM0WM140.KM0WW2P6 == " ")
    converseLib.validationFailed(114); /* field required*/
    set KM0WM140.KM0WW2P6 cursor, modified, bold;
  end
  ;
  if (KM0WM140.KUQSINST[1] != " "
   && KM0WM140.KM0WWNBL[2] != " ")
    converseLib.validationFailed(166); /* cannot have blank and filled values*/
    set KM0WM140.KUQSINST[1] cursor, modified, bold;
  end
  ;
  if (KM0WM140.KUQSINST[1] != " ") /* require dept*/
    if (KM0WM140.XNDCD[1] == " ") /* no dept*/
      set KM0WM140.XNDCD[1] cursor, modified, bold;
      converseLib.validationFailed(114); /* field required*/
    else
      if (KM0WM140.XNDCD[1] in XNDTBL.XNDCD) /* valid dept id?*/
        if (XNDTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active?*/
           /* next sentence*/
        else
          set KM0WM140.XNDCD[1] cursor, modified, bold;
          converseLib.validationFailed(17); /* invalid code*/
        end
      else
        set KM0WM140.XNDCD[1] cursor, modified, bold;
        converseLib.validationFailed(17); /* invalid code*/
      end
    end
  end
  ;
  if (KM0WM140.XNDCD[1] != " "
   && KM0WM140.KUQSINST[1] == " ")
    converseLib.validationFailed(114);
    set KM0WM140.KUQSINST[1] cursor, modified, bold;
  end
  ;
end // end KM0WS35

// edit spec cust group & params
Function KM0WS36()
  ;
   /* ****** edit special cust group & params *******/
  ;
  if (KM0WM140.KM0WW1P6 == " ")
    converseLib.validationFailed(114); /* field required*/
    set KM0WM140.KM0WW1P6 cursor, modified, bold;
  end
  ;
  if (KM0WM140.XSGCD[1] != " "
   && KM0WM140.KM0WWNBL[1] != " ")
    converseLib.validationFailed(166); /* cannot have blank and filled values*/
    set KM0WM140.XSGCD[1] cursor, modified, bold;
  end
  ;
  if (KM0WM140.XSGCD[1] == " ")
     /* next sentence*/
  else
    if (KM0WM140.XSGCD[1] in XSGTBL.XSGCD) /* in table?*/
      if (XSGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active code?*/
         /* next sentence*/
      else
        set KM0WM140.XSGCD[1] cursor, modified, bold;
        converseLib.validationFailed(17); /* invalid code*/
      end
    else
      set KM0WM140.XSGCD[1] cursor, modified, bold;
      converseLib.validationFailed(17); /* invalid code*/
    end
  end
  ;
end // end KM0WS36

// bld output table for cust map4
Function KM0WS37()
  XX0XS01();
  ;
  KM0WW01.KM0WWIDX = 0;
  KM0WW01.KM0WWIX2 = KM0WW01.KM0WWIX2 + 1;
  ;
   /* format special cust group record type*/
  ;
  if (KM0WM140.XSGCD[1] != " "
   || KM0WM140.KM0WWNBL[1] != " ")
    set KU1REC35 empty;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
    KU1REC35.KU1RTYPE = "35";
    KU1REC35.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC35.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC35.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC35.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC35.XSGCD = KM0WM140.XSGCD[1];
    KU1REC35.KU1P1CHO = KM0WM140.KM0WW1P1;
    KU1REC35.KUCCOID = KM0WM140.KUCCOID[1];
    KU1REC35.KU1P2CHO = KM0WM140.KM0WW1P2;
    KU1REC35.KUCGRPID = KM0WM140.KUCGRPID[1];
    KU1REC35.KU1P3CHO = KM0WM140.KM0WW1P3;
    KU1REC35.KUMSTRID = KM0WM140.KUMSTRID[1];
    KU1REC35.KU1P4CHO = KM0WM140.KM0WW1P4;
    KU1REC35.XNXCD = KM0WM140.XNXCD[1];
    KU1REC35.KU1P5CHO = KM0WM140.KM0WW1P5;
    KU1REC35.XGPCD = KM0WM140.XGPCD[1];
    KU1REC35.KU1P6CHO = KM0WM140.KM0WW1P6;
    KU1REC35.KU1XSGCD = KM0WM140.XSGCD[2];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC35.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC35.KU1DATA;
  end
  ;
   /* format special instruction record type*/
  ;
  if (KM0WM140.KUQSINST[1] != " "
   || KM0WM140.KM0WWNBL[2] != " ")
    set KU1REC36 empty;
    KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;
    KU1REC36.KU1RTYPE = "36";
    KU1REC36.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KU1REC36.ZZZCHGTM = XX0XW01.XX0XWTIM;
    KU1REC36.KU1SEQID = KM0WW01.KM0WWIX2;
    KU1REC36.XXXUSRID = COMMAREA.CAUSERID;
    KU1REC36.KUQSINST = KM0WM140.KUQSINST[1];
    KU1REC36.XNDCD = KM0WM140.XNDCD[1];
    KU1REC36.KU1P1CHO = KM0WM140.KM0WW2P1;
    KU1REC36.KUCCOID = KM0WM140.KUCCOID[2];
    KU1REC36.KU1P2CHO = KM0WM140.KM0WW2P2;
    KU1REC36.KUCGRPID = KM0WM140.KUCGRPID[2];
    KU1REC36.KU1P3CHO = KM0WM140.KM0WW2P3;
    KU1REC36.KUMSTRID = KM0WM140.KUMSTRID[2];
    KU1REC36.KU1P4CHO = KM0WM140.KM0WW2P4;
    KU1REC36.XNXCD = KM0WM140.XNXCD[2];
    KU1REC36.KU1P5CHO = KM0WM140.KM0WW2P5;
    KU1REC36.XGPCD = KM0WM140.XGPCD[2];
    KU1REC36.KU1P6CHO = KM0WM140.KM0WW2P6;
    KU1REC36.KU1XNDCD = KM0WM140.XNDCD[2];
    KU1REC36.KU1P7CHO = KM0WM140.KM0WW2P7;
    KU1REC36.KU1SINST = KM0WM140.KUQSINST[2];
    ;
    KM0WW01.KM0WWOTK[KM0WWIDX] = KU1REC36.KU1KEY;
    KM0WW01.KM0WWOTD[KM0WWIDX] = KU1REC36.KU1DATA;
  end
  ;
  ;
   /* below will reset index prior to add to output batch file*/
  ;
  KM0WW01.KM0WWIDX = 0;
  ;
end // end KM0WS37

// perform basic parameter edits
Function KM0WS38()
  ;
   /* this will check if param entered but 'x' not in front of it*/
  ;
  ;
  if (KM0WM130.XQACD[2] != " ")
    if (KM0WM130.KM0WW3P7 == " ")
      converseLib.validationFailed(165);
      set KM0WM130.KM0WW3P7 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM130.KUNQLIND[2] != " ")
    if (KM0WM130.KM0WW3P6 == " ")
      converseLib.validationFailed(165);
      set KM0WM130.KM0WW3P6 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM130.XGPCD[3] != " ")
    if (KM0WM130.KM0WW3P5 == " ")
      converseLib.validationFailed(165);
      set KM0WM130.KM0WW3P5 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM130.XNXCD[3] != 0)
    if (KM0WM130.KM0WW3P4 == " ")
      converseLib.validationFailed(165);
      set KM0WM130.KM0WW3P4 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM130.KUMSTRID[3] != 0)
    if (KM0WM130.KM0WW3P3 == " ")
      converseLib.validationFailed(165);
      set KM0WM130.KM0WW3P3 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM130.KUCGRPID[3] != 0)
    if (KM0WM130.KM0WW3P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM130.KM0WW3P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM130.KUCCOID[3] != 0)
    if (KM0WM130.KM0WW3P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM130.KM0WW3P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM130.XSPCD[2] != " ")
    if (KM0WM130.KM0WW2P7 == " ")
      converseLib.validationFailed(165);
      set KM0WM130.KM0WW2P7 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM130.KUNSPCIN[2] != " ")
    if (KM0WM130.KM0WW2P6 == " ")
      converseLib.validationFailed(165);
      set KM0WM130.KM0WW2P6 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM130.XGPCD[2] != " ")
    if (KM0WM130.KM0WW2P5 == " ")
      converseLib.validationFailed(165);
      set KM0WM130.KM0WW2P5 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM130.XNXCD[2] != 0)
    if (KM0WM130.KM0WW2P4 == " ")
      converseLib.validationFailed(165);
      set KM0WM130.KM0WW2P4 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM130.KUMSTRID[2] != 0)
    if (KM0WM130.KM0WW2P3 == " ")
      converseLib.validationFailed(165);
      set KM0WM130.KM0WW2P3 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM130.KUCGRPID[2] != 0)
    if (KM0WM130.KM0WW2P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM130.KM0WW2P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM130.KUCCOID[2] != 0)
    if (KM0WM130.KM0WW2P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM130.KM0WW2P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM130.XLCCD[2] != " ")
    if (KM0WM130.KM0WW1P7 == " ")
      converseLib.validationFailed(165);
      set KM0WM130.KM0WW1P7 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM130.KUNLCIND[2] != " ")
    if (KM0WM130.KM0WW1P6 == " ")
      converseLib.validationFailed(165);
      set KM0WM130.KM0WW1P6 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM130.XGPCD[1] != " ")
    if (KM0WM130.KM0WW1P5 == " ")
      converseLib.validationFailed(165);
      set KM0WM130.KM0WW1P5 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM130.XNXCD[1] != 0)
    if (KM0WM130.KM0WW1P4 == " ")
      converseLib.validationFailed(165);
      set KM0WM130.KM0WW1P4 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM130.KUMSTRID[1] != 0)
    if (KM0WM130.KM0WW1P3 == " ")
      converseLib.validationFailed(165);
      set KM0WM130.KM0WW1P3 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM130.KUCGRPID[1] != 0)
    if (KM0WM130.KM0WW1P2 == " ")
      converseLib.validationFailed(165);
      set KM0WM130.KM0WW1P2 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM130.KUCCOID[1] != 0)
    if (KM0WM130.KM0WW1P1 == " ")
      converseLib.validationFailed(165);
      set KM0WM130.KM0WW1P1 cursor, modified, bold;
    end
  end
  ;
  ;
   /* this will edit for either company or grp must be chosen*/
  ;
  if (KM0WM130.KUNQLIND[1] != " "
   || KM0WM130.XQACD[1] != " "
   || KM0WM130.KM0WWNBL[3] != " ")
    if (KM0WM130.KUCCOID[3] == 0
     && KM0WM130.KUCGRPID[3] == 0)
      converseLib.validationFailed(164);
      set KM0WM130.KM0WW3P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM130.KUNSPCIN[1] != " "
   || KM0WM130.XSPCD[1] != " "
   || KM0WM130.KM0WWNBL[2] != " ")
    if (KM0WM130.KUCCOID[2] == 0
     && KM0WM130.KUCGRPID[2] == 0)
      converseLib.validationFailed(164);
      set KM0WM130.KM0WW2P1 cursor, modified, bold;
    end
  end
  ;
  if (KM0WM130.XLCCD[1] != " "
   || KM0WM130.KUNLCIND[1] != " "
   || KM0WM130.KM0WWNBL[1] != " ")
    if (KM0WM130.KUCCOID[1] == 0
     && KM0WM130.KUCGRPID[1] == 0)
      converseLib.validationFailed(164);
      set KM0WM130.KM0WW1P1 cursor, modified, bold;
    end
  end
  ;
end // end KM0WS38

// edit quality rstrct & params
Function KM0WS39()
  ;
   /* ****** edit quality rstrct field and parameters  ********/
  ;
    /* this will edit to not allow a change on the indicator*/
  ;
  if (KM0WM130.KUNQLIND[1] != " "
   && KM0WM130.KUNQLIND[2] != " ")
    if (KM0WM130.KUNQLIND[1] != KM0WM130.KUNQLIND[2])
      set KM0WM130.KUNQLIND[1] cursor, modified, bold;
      converseLib.validationFailed(170);
    end
  end
  ;
  if (KM0WM130.KM0WW3P7 == " ")
    converseLib.validationFailed(114); /* field required*/
    set KM0WM130.KM0WW3P7 cursor, modified, bold;
  end
  ;
  if (KM0WM130.KM0WW3P6 == " ")
    converseLib.validationFailed(114); /* field required*/
    set KM0WM130.KM0WW3P6 cursor, modified, bold;
  end
  ;
  if (KM0WM130.XQACD[1] != " ")
    if (KM0WM130.KUNQLIND[1] == " ")
      set KM0WM130.KUNQLIND[1] cursor, modified, bold;
      converseLib.validationFailed(114);
    end
  end
  ;
  if (KM0WM130.KUNQLIND[1] != " ") /* code required*/
    if (KM0WM130.XQACD[1] == " ") /* code present?*/
      set KM0WM130.XQACD[1] cursor, modified, bold;
      converseLib.validationFailed(114);
    else
      if (KM0WM130.XQACD[1] in XQATBL.XQACD)
        if (XQATBL.XXXSTAT == "A")
          /* next sentence*/
        else
          set KM0WM130.XQACD[1] cursor, modified, bold;
          converseLib.validationFailed(17);
        end
      else
        set KM0WM130.XQACD[1] cursor, modified, bold;
        converseLib.validationFailed(17);
      end
    end
  end
  ;
  if (KM0WM130.KUNQLIND[1] != " ")
    if (KM0WM130.KUNQLIND[1] != "1"
     && KM0WM130.KUNQLIND[1] != "2")
      converseLib.validationFailed(17);
      set KM0WM130.KUNQLIND[1] cursor, modified, bold;
    end
  end
  ;
  if (KM0WM130.KUNQLIND[1] != " "
   || KM0WM130.XQACD[1] != " ")
    if (KM0WM130.KM0WWNBL[3] != " ")
      converseLib.validationFailed(166); /* cannot have blank and filled values*/
      set KM0WM130.KUNQLIND[1] cursor, modified, bold;
    end
  end
  ;
end // end KM0WS39

// edit sport act rstrct & params
Function KM0WS40()
  ;
   /* ****** edit sport act rstrct field and parameters  ********/
  ;
   /* this will edit to not allow a change on the indicator*/
  ;
  if (KM0WM130.KUNSPCIN[1] != " "
   && KM0WM130.KUNSPCIN[2] != " ")
    if (KM0WM130.KUNSPCIN[1] != KM0WM130.KUNSPCIN[2])
      set KM0WM130.KUNSPCIN[1] cursor, modified, bold;
      converseLib.validationFailed(170);
    end
  end
  ;
  if (KM0WM130.KM0WW2P7 == " ")
    converseLib.validationFailed(114); /* field required*/
    set KM0WM130.KM0WW2P7 cursor, modified, bold;
  end
  ;
  if (KM0WM130.KM0WW2P6 == " ")
    converseLib.validationFailed(114); /* field required*/
    set KM0WM130.KM0WW2P6 cursor, modified, bold;
  end
  ;
  if (KM0WM130.XSPCD[1] != " ")
    if (KM0WM130.KUNSPCIN[1] == " ")
      set KM0WM130.KUNSPCIN[1] cursor, modified, bold;
      converseLib.validationFailed(114);
    end
  end
  ;
  if (KM0WM130.KUNSPCIN[1] != " ") /* code required*/
    if (KM0WM130.XSPCD[1] == " ") /* code present?*/
      set KM0WM130.XSPCD[1] cursor, modified, bold;
      converseLib.validationFailed(114);
    else
      if (KM0WM130.XSPCD[1] in XSPTBL.XSPCD) /* in table?*/
        if (XSPTBL.XXXSTAT == "A") /* active code?*/
          /* next sentence*/
        else
          set KM0WM130.XSPCD[1] cursor, modified, bold;
          converseLib.validationFailed(17);
        end
      else
        set KM0WM130.XSPCD[1] cursor, modified, bold;
        converseLib.validationFailed(17);
      end
    end
  end
  ;
  if (KM0WM130.KUNSPCIN[1] != " ")
    if (KM0WM130.KUNSPCIN[1] != "1"
     && KM0WM130.KUNSPCIN[1] != "2")
      converseLib.validationFailed(17);
      set KM0WM130.KUNSPCIN[1] cursor, modified, bold;
    end
  end
  ;
  if (KM0WM130.KUNSPCIN[1] != " "
   || KM0WM130.XSPCD[1] != " ")
    if (KM0WM130.KM0WWNBL[2] != " ")
      converseLib.validationFailed(166); /* cannot have blank and filled values*/
      set KM0WM130.KUNSPCIN[1] cursor, modified, bold;
    end
  end
  ;
end // end KM0WS40

// edit life cycl rstrct & params
Function KM0WS41()
  ;
   /* ****** edit life cycle rstrct field and parameters  ********/
  ;
   /* this will edit to not allow a change to the indicator*/
  ;
  if (KM0WM130.KUNLCIND[1] != " "
   && KM0WM130.KUNLCIND[2] != " ")
    if (KM0WM130.KUNLCIND[1] != KM0WM130.KUNLCIND[2])
      set KM0WM130.KUNLCIND[1] cursor, modified, bold;
      converseLib.validationFailed(170);
    end
  end
  ;
  if (KM0WM130.KM0WW1P7 == " ")
    converseLib.validationFailed(114); /* field required*/
    set KM0WM130.KM0WW1P7 cursor, modified, bold;
  end
  ;
  if (KM0WM130.KM0WW1P6 == " ")
    converseLib.validationFailed(114); /* field required*/
    set KM0WM130.KM0WW1P6 cursor, modified, bold;
  end
  ;
  if (KM0WM130.XLCCD[1] != " ")
    if (KM0WM130.KUNLCIND[1] == " ")
      set KM0WM130.KUNLCIND[1] cursor, modified, bold;
      converseLib.validationFailed(114);
    end
  end
  ;
  if (KM0WM130.KUNLCIND[1] != " ") /* code required*/
    if (KM0WM130.XLCCD[1] == " ") /* code present?*/
      set KM0WM130.XLCCD[1] cursor, modified, bold;
      converseLib.validationFailed(114);
    else
      if (KM0WM130.XLCCD[1] in XLCTBL.XLCCD)
        if (XLCTBL.XXXSTAT == "A")
          /* next sentence*/
        else
          set KM0WM130.XLCCD[1] cursor, modified, bold;
          converseLib.validationFailed(17);
        end
      else
        set KM0WM130.XLCCD[1] cursor, modified, bold;
        converseLib.validationFailed(17);
      end
    end
  end
  ;
  if (KM0WM130.KUNLCIND[1] != " ")
    if (KM0WM130.KUNLCIND[1] != "1"
     && KM0WM130.KUNLCIND[1] != "2")
      converseLib.validationFailed(17);
      set KM0WM130.KUNLCIND[1] cursor, modified, bold;
    end
  end
  ;
  if (KM0WM130.KUNLCIND[1] != " "
   || KM0WM130.XLCCD[1] != " ")
    if (KM0WM130.KM0WWNBL[1] != " ")
      converseLib.validationFailed(166); /* cannot have blank and filled values*/
      set KM0WM130.KUNLCIND[1] cursor, modified, bold;
    end
  end
  ;
end // end KM0WS41

// bld output table for rstrcts
Function KM0WS42()
  XX0XS01();
  ;
  KM0WW01.KM0WWIDX = 0;
  KM0WW01.KM0WWIX2 = KM0WW01.KM0WWIX2 + 1;
  ;
   /* format life cycle restrct record type*/
  ;
   /* F KM0WM130.KUNLCIND(1) NE ' ';*/
   /* OR KM0WM130.XLCCD(1) NE ' ';*/
   /* OR KM0WM130.KM0WWNBL(1) NE ' ';*/
   /* SET KU1REC37 EMPTY;*/
   /* KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;*/
   /* MOVE '37' TO KU1REC37.KU1RTYPE;*/
   /* MOVE XX0XW01.XX0XWDAT TO KU1REC37.ZZZCHGDT;*/
   /* MOVE XX0XW01.XX0XWTIM TO KU1REC37.ZZZCHGTM;*/
   /* MOVE KM0WW01.KM0WWIX2 TO KU1REC37.KU1SEQID;*/
   /* MOVE COMMAREA.CAUSERID TO KU1REC37.XXXUSRID;*/
   /* MOVE KM0WM130.KUNLCIND(1) TO KU1REC37.KUNLCIND;*/
   /* MOVE KM0WM130.XLCCD(1) TO KU1REC37.XLCCD;*/
   /* MOVE KM0WM130.KM0WW1P1 TO KU1REC37.KU1P1CHO;*/
   /* MOVE KM0WM130.KUCCOID(1) TO KU1REC37.KUCCOID;*/
   /* MOVE KM0WM130.KM0WW1P2 TO KU1REC37.KU1P2CHO;*/
   /* MOVE KM0WM130.KUCGRPID(1) TO KU1REC37.KUCGRPID;*/
   /* MOVE KM0WM130.KM0WW1P3 TO KU1REC37.KU1P3CHO;*/
   /* MOVE KM0WM130.KUMSTRID(1) TO KU1REC37.KUMSTRID;*/
   /* MOVE KM0WM130.KM0WW1P4 TO KU1REC37.KU1P4CHO;*/
   /* MOVE KM0WM130.XNXCD(1) TO KU1REC37.XNXCD;*/
   /* MOVE KM0WM130.KM0WW1P5 TO KU1REC37.KU1P5CHO;*/
   /* MOVE KM0WM130.XGPCD(1) TO KU1REC37.XGPCD;*/
   /* MOVE KM0WM130.KM0WW1P6 TO KU1REC37.KU1P6CHO;*/
   /* MOVE KM0WM130.KUNLCIND(2) TO KU1REC37.KU1LCIND;*/
   /* MOVE KM0WM130.KM0WW1P7 TO KU1REC37.KU1P7CHO;*/
   /* MOVE KM0WM130.XLCCD(2) TO KU1REC37.KU1XLCCD;*/
   /* ;*/
   /* MOVE KU1REC37.KU1KEY TO KM0WW01.KM0WWOTK(KM0WWIDX);*/
   /* MOVE KU1REC37.KU1DATA TO KM0WW01.KM0WWOTD(KM0WWIDX);*/
   /* ND ;*/
  ;
   /* format sport activity rstrct record type*/
  ;
   /* F KM0WM130.KUNSPCIN(1) NE ' ';*/
   /* OR KM0WM130.XSPCD(1) NE ' ';*/
   /* OR KM0WM130.KM0WWNBL(2) NE ' ';*/
   /* SET KU1REC38 EMPTY;*/
   /* KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;*/
   /* MOVE '38' TO KU1REC38.KU1RTYPE;*/
   /* MOVE XX0XW01.XX0XWDAT TO KU1REC38.ZZZCHGDT;*/
   /* MOVE XX0XW01.XX0XWTIM TO KU1REC38.ZZZCHGTM;*/
   /* MOVE KM0WW01.KM0WWIX2 TO KU1REC38.KU1SEQID;*/
   /* MOVE COMMAREA.CAUSERID TO KU1REC38.XXXUSRID;*/
   /* MOVE KM0WM130.KUNSPCIN(1) TO KU1REC38.KUNSPCIN;*/
   /* MOVE KM0WM130.XSPCD(1) TO KU1REC38.XSPCD;*/
   /* MOVE KM0WM130.KM0WW2P1 TO KU1REC38.KU1P1CHO;*/
   /* MOVE KM0WM130.KUCCOID(2) TO KU1REC38.KUCCOID;*/
   /* MOVE KM0WM130.KM0WW2P2 TO KU1REC38.KU1P2CHO;*/
   /* MOVE KM0WM130.KUCGRPID(2) TO KU1REC38.KUCGRPID;*/
   /* MOVE KM0WM130.KM0WW2P3 TO KU1REC38.KU1P3CHO;*/
   /* MOVE KM0WM130.KUMSTRID(2) TO KU1REC38.KUMSTRID;*/
   /* MOVE KM0WM130.KM0WW2P4 TO KU1REC38.KU1P4CHO;*/
   /* MOVE KM0WM130.XNXCD(2) TO KU1REC38.XNXCD;*/
   /* MOVE KM0WM130.KM0WW2P5 TO KU1REC38.KU1P5CHO;*/
   /* MOVE KM0WM130.XGPCD(2) TO KU1REC38.XGPCD;*/
   /* MOVE KM0WM130.KM0WW2P6 TO KU1REC38.KU1P6CHO;*/
   /* MOVE KM0WM130.KUNSPCIN(2) TO KU1REC38.KU1SPCIN;*/
   /* MOVE KM0WM130.KM0WW2P7 TO KU1REC38.KU1P7CHO;*/
   /* MOVE KM0WM130.XSPCD(2) TO KU1REC38.KU1XSPCD;*/
   /* ;*/
   /* MOVE KU1REC38.KU1KEY TO KM0WW01.KM0WWOTK(KM0WWIDX);*/
   /* MOVE KU1REC38.KU1DATA TO KM0WW01.KM0WWOTD(KM0WWIDX);*/
   /* ND ;*/
  ;
   /* format quality restriction record type*/
  ;
   /* F KM0WM130.KUNQLIND(1) NE ' ';*/
   /* OR KM0WM130.XQACD(1) NE ' ';*/
   /* OR KM0WM130.KM0WWNBL(3) NE ' ';*/
   /* SET KU1REC39 EMPTY;*/
   /* KM0WW01.KM0WWIDX = KM0WW01.KM0WWIDX + 1;*/
   /* mOVE '39' TO KU1REC39.KU1RTYPE;*/
   /* MOVE XX0XW01.XX0XWDAT TO KU1REC39.ZZZCHGDT;*/
   /* MOVE XX0XW01.XX0XWTIM TO KU1REC39.ZZZCHGTM;*/
   /* MOVE KM0WW01.KM0WWIX2 TO KU1REC39.KU1SEQID;*/
   /* MOVE COMMAREA.CAUSERID TO KU1REC39.XXXUSRID;*/
   /* MOVE KM0WM130.KUNQLIND(1) TO KU1REC39.KUNQLIND;*/
   /* MOVE KM0WM130.XQACD(1) TO KU1REC39.XQACD;*/
   /* MOVE KM0WM130.KM0WW3P1 TO KU1REC39.KU1P1CHO;*/
   /* MOVE KM0WM130.KUCCOID(3) TO KU1REC39.KUCCOID;*/
   /* MOVE KM0WM130.KM0WW3P2 TO KU1REC39.KU1P2CHO;*/
   /* MOVE KM0WM130.KUCGRPID(3) TO KU1REC39.KUCGRPID;*/
   /* MOVE KM0WM130.KM0WW3P3 TO KU1REC39.KU1P3CHO;*/
   /* MOVE KM0WM130.KUMSTRID(3) TO KU1REC39.KUMSTRID;*/
   /* MOVE KM0WM130.KM0WW3P4 TO KU1REC39.KU1P4CHO;*/
   /* MOVE KM0WM130.XNXCD(3) TO KU1REC39.XNXCD;*/
   /* MOVE KM0WM130.KM0WW3P5 TO KU1REC39.KU1P5CHO;*/
   /* MOVE KM0WM130.XGPCD(3) TO KU1REC39.XGPCD;*/
   /* MOVE KM0WM130.KM0WW3P6 TO KU1REC39.KU1P6CHO;*/
   /* MOVE KM0WM130.KUNQLIND(2) TO KU1REC39.KU1QLIND;*/
   /* MOVE KM0WM130.KM0WW3P7 TO KU1REC39.KU1P7CHO;*/
   /* MOVE KM0WM130.XQACD(2) TO KU1REC39.KU1XQACD;*/
   /* ;*/
   /* MOVE KU1REC39.KU1KEY TO KM0WW01.KM0WWOTK(KM0WWIDX);*/
   /* MOVE KU1REC39.KU1DATA TO KM0WW01.KM0WWOTD(KM0WWIDX);*/
   /* ND ;*/
  ;
  ;
   /* below will reset index prior to add to output batch file*/
  ;
  KM0WW01.KM0WWIDX = 0;
  ;
end // end KM0WS42

// edit analyst cd
Function KM0WS43()
    /* edit analyst code*/
  ;
  if (KM0WM070.XCUCD[1] in XCETBL.XCECD)
    if (XCETBL.XXXSTAT[sysVar.arrayIndex] == "A")
      /* next sentence*/
    else
      converseLib.validationFailed(159);
      set KM0WM070.XCUCD[1] cursor, modified, bold;
    end
  else
    converseLib.validationFailed(158);
    set KM0WM070.XCUCD[1] cursor, modified, bold;
  end
  ;
end // end KM0WS43

// edit credit resp
Function KM0WS45()
    /* edit credit resp*/
  ;
  if (KM0WM070.XCUCD[2] in XCUTBL.XCUCD)
    if (XCUTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XCUTBL.XCURMGR[sysVar.arrayIndex] != "AA") /* cr analyst title?*/
        /* next sentence*/
      else
        converseLib.validationFailed(160);
        set KM0WM070.XCUCD[2] cursor, modified, bold;
      end
    else
      converseLib.validationFailed(161);
      set KM0WM070.XCUCD[2] cursor, modified, bold;
    end
  else
    converseLib.validationFailed(160);
    set KM0WM070.XCUCD[2] cursor, modified, bold;
  end
  ;
end // end KM0WS45

// check field security
Function KM0WSS0()
  ;
   /* ********        check field security             *********/
  ;
  if (COMMAREA.CACLVL[1] == "N")
    KM0WSS2(); /* group 1*/
  end
  ;
  if (COMMAREA.CACLVL[2] == "N")
    KM0WSS3(); /* group 2*/
  end
  ;
  if (COMMAREA.CACLVL[3] == "N")
    KM0WSS4(); /* group 3*/
  end
  ;
  if (COMMAREA.CACLVL[4] == "N")
    KM0WSS5(); /* group 4*/
  end
  ;
  if (COMMAREA.CACLVL[5] == "N")
    KM0WSS6(); /* group 5*/
  end
  ;
  if (COMMAREA.CACLVL[6] == "N")
    KM0WSS7(); /* group 6*/
  end
  ;
  if (COMMAREA.CACLVL[7] == "N")
    KM0WSS8(); /* group 7*/
  end
  ;
  ;
end // end KM0WSS0

// check standard entry keys
Function KM0WSS1()
  ;
          /* check valid entry key,*/
       /* do menu transfers if requested*/
  ;
  KM0WW01.KM0WWMSG = " ";
  ;
  if (converseVar.eventKey is enter) /* enter - return to process*/
    return;
  else
    if (converseVar.eventKey is pf7)
      return;
    else
      if (converseVar.eventKey is pf8)
        return;
      else
        if (converseVar.eventKey is pa2) /* pa2*/
          return;
        else
          if (converseVar.eventKey is pf1) /* pf1 - help*/
            XSPF1();
            KM0WW01.KM0WWMSG = COMMAREA.CAMSG;
            COMMAREA.CATOAP = " ";
            exit stack;
          else
            if (converseVar.eventKey is pf3) /* pf3 - return to prior menu*/
              return;
            else
              if (converseVar.eventKey is pf4) /* pf4 - return to main menu*/
                XSPF4();
                KM0WW01.KM0WWMSG = COMMAREA.CAMSG; /* security error*/
                COMMAREA.CATOAP = " ";
                exit stack;
              else
                if (converseVar.eventKey is pf12) /* pf12 - confirm entry*/
                  return;
                else
                  converseLib.validationFailed(3); /* invalid pf key*/
                end
              end
            end
          end
        end
      end
    end
  end
  ;
end // end KM0WSS1

// security for fields in group1
Function KM0WSS2()
   /* ****** this sets security for fields in group1*/
  ;
  ;
  set KM0WM020.XAUCD[1] skip;
  set KM0WM020.KUCNSCNT skip;
  set KM0WM020.KUCSSCNT skip;
  set KM0WM030.KUMXNIAP[1] skip;
  set KM0WM030.XCFCD[1] skip;
  set KM0WM030.KUMXNIFT[1] skip;
  set KM0WM030.YSVCD[1] skip;
  set KM0WM050.KUNPORFL[1] skip;
  set KM0WM050.KUNCRFL[1] skip;
   /* ET KM0WM050.XCICD(1) AUTOSKIP;*/
  set KM0WM050.YCLCD[1] skip;
  set KM0WM060.KUNCAFL[1] skip;
  set KM0WM060.KUNNOSFL[1] skip;
  set KM0WM060.KUSTEXT1[1] skip;
  set KM0WM060.KUSTEXT2[1] skip;
  set KM0WM060.KM0WWNBL[1] skip;
  set KM0WM060.KM0WWNBL[2] skip;
  set KM0WM050.KUNBOCD[1] skip;
  set KM0WM050.KUNBOQTY[1] skip;
  set KM0WM040.XGACD[1] skip;
  set KM0WM060.KUNSPCD[1] skip;
  set KM0WM130.KUNLCIND[1] skip;
  set KM0WM130.KUNQLIND[1] skip;
  set KM0WM130.KUNSPCIN[1] skip;
  set KM0WM130.XLCCD[1] skip;
  set KM0WM130.XQACD[1] skip;
  set KM0WM130.XSPCD[1] skip;
  set KM0WM130.KM0WWNBL[1] skip;
  set KM0WM130.KM0WWNBL[2] skip;
  set KM0WM130.KM0WWNBL[3] skip;
  set KM0WM140.XSGCD[1] skip;
  set KM0WM140.KUQSINST[1] skip;
  set KM0WM140.KM0WWNBL[1] skip;
  set KM0WM140.KM0WWNBL[2] skip;
  ;
end // end KM0WSS2

// security for fields in group2
Function KM0WSS3()
   /* ****** this sets security for fields in group2*/
  ;
  set KM0WM070.KM0WW1P1 skip; /* this is for company name*/
  set KM0WM080.KM0WW2P1 skip; /* this is for store name*/
  set KM0WM090.KM0WW1P1 skip; /* also for store name*/
  ;
end // end KM0WSS3

// security for fields in group3
Function KM0WSS4()
   /* ****** this sets security for fields in group3*/
  ;
  set KM0WM020.XCUCD[2] skip; /* analyst code*/
  set KM0WM020.KM0WMSRT[1] skip;
  set KM0WM070.KM0WW2P1 skip; /* credit line expiration date*/
  set KM0WM070.XCUCD[1] skip; /* analyst code*/
  set KM0WM070.XCUCD[2] skip; /* credit resp*/
  set KM0WM070.XXXSTAT skip; /* company status*/
  set KM0WM070.KUCIDIND skip; /* invoice delay ind*/
  set KM0WM070.KM0WMSTM skip; /* send statement ind*/
  set KM0WM090.XXXSTAT skip; /* store status*/
  set KM0WM020.XCUCD[3] skip; /* cr resp*/
  set KM0WM020.XCCCD[1] skip;
  set KM0WM020.KM0WMSTM[1] skip;
  set KM0WM040.XXXSTAT[1] skip;
  set KM0WM040.XIDCD[1] skip; /* invoice dist ind*/
  ;
end // end KM0WSS4

// security for fields in group4
Function KM0WSS5()
   /* ****** this sets security for fields in group4*/
  ;
  set KM0WM080.KM0WW1P1 skip; /* address*/
  ;
end // end KM0WSS5

// security for fields in group5
Function KM0WSS6()
   /* ****** this sets security for fields in group5*/
  ;
  set KM0WM030.XWHCD[1] skip;
  set KM0WM030.XGPCD[2] skip;
  ;
end // end KM0WSS6

// security for fields in group6
Function KM0WSS7()
   /* ****** this sets security for fields in group6*/
  ;
  set KM0WM040.SM1AGYID[1] skip;
  set KM0WM040.SM4REPID[1] skip;
  ;
end // end KM0WSS7

// security for fields in group7
Function KM0WSS8()
   /* ****** this sets security for fields in group7*/
  ;
  set KM0WM040.XACCD[1] skip;
  set KM0WM040.KUNALSEQ[1] skip;
  ;
end // end KM0WSS8

Record KM0WW01 type basicRecord
  10 KM0WWIMG KM0WWIMG ; 
  10 KM0WWERR KM0WWERR ; 
  10 KM0WWMSG KM0WWMSG ; 
    15 KM0WWMS1 KM0WWMS1 ; 
    15 KM0WWMS2 KM0WWMS2 ; 
    15 KM0WWMS3 KM0WWMS3 ; 
  10 KM0WWMFL KM0WWMFL ; 
  10 KM0WWOUT KM0WWOUT [156] ; 
    15 KM0WWOTK KM0WWOTK ; 
    15 KM0WWOTD KM0WWOTD ; 
  10 KM0WWIDX KM0WWIDX ; 
  10 KM0WWIX2 KM0WWIX2 ; 
  10 KM0WWYMD KM0WWYMD ; 
    15 KM0WWYDC KM0WWYDC ; 
    15 KM0WWYDY KM0WWYDY ; 
    15 KM0WWYDM KM0WWYDM ; 
    15 KM0WWYDD KM0WWYDD ; 
  10 KM0WWNBL KM0WWNBL ; 
  10 KM0WW1P1 KM0WW1P1 ; 
  10 KM0WW1P2 KM0WW1P2 ; 
  10 KM0WW1P3 KM0WW1P3 ; 
  10 KM0WW1P4 KM0WW1P4 ; 
  10 KM0WW1P5 KM0WW1P5 ; 
  10 KM0WW1P6 KM0WW1P6 ; 
  10 KM0WW1P7 KM0WW1P7 ; 
  10 KM0WW2P1 KM0WW2P1 ; 
  10 KM0WW2P2 KM0WW2P2 ; 
  10 KM0WW2P3 KM0WW2P3 ; 
  10 KM0WW2P4 KM0WW2P4 ; 
  10 KM0WW2P5 KM0WW2P5 ; 
  10 KM0WW2P6 KM0WW2P6 ; 
  10 KM0WW2P7 KM0WW2P7 ; 
  10 KM0WW3P1 KM0WW3P1 ; 
  10 KM0WW3P2 KM0WW3P2 ; 
  10 KM0WW3P3 KM0WW3P3 ; 
  10 KM0WW3P4 KM0WW3P4 ; 
  10 KM0WW3P5 KM0WW3P5 ; 
  10 KM0WW3P6 KM0WW3P6 ; 
  10 KM0WW3P7 KM0WW3P7 ; 
  10 KM0WW4P1 KM0WW4P1 ; 
  10 KM0WW4P2 KM0WW4P2 ; 
  10 KM0WW4P3 KM0WW4P3 ; 
  10 KM0WW4P4 KM0WW4P4 ; 
  10 KM0WW4P5 KM0WW4P5 ; 
  10 KM0WW4P6 KM0WW4P6 ; 
  10 KM0WW4P7 KM0WW4P7 ; 
  10 KM0WW5P1 KM0WW5P1 ; 
  10 KM0WW5P2 KM0WW5P2 ; 
  10 KM0WW5P3 KM0WW5P3 ; 
  10 KM0WW5P4 KM0WW5P4 ; 
  10 KM0WW5P5 KM0WW5P5 ; 
  10 KM0WW5P6 KM0WW5P6 ; 
  10 KM0WW5P7 KM0WW5P7 ; 
  10 KM0WW6P1 KM0WW6P1 ; 
  10 KM0WW6P2 KM0WW6P2 ; 
  10 KM0WW6P3 KM0WW6P3 ; 
  10 KM0WW6P4 KM0WW6P4 ; 
  10 KM0WW6P5 KM0WW6P5 ; 
  10 KM0WW7P1 KM0WW7P1 ; 
end // end KM0WW01

Record KU1REC type indexedRecord  {
  fileName = "KU1GLBL", keyItem = KU1KEY
  }
  10 KU1ALL KU1ALL ; 
    15 KU1KEY KU1KEY ; 
    15 KU1DATA KU1DATA ; 
end // end KU1REC

//*** RECORD=KU1REC01 ****
// rec type for account class code
// ************************
Record KU1REC01 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 XAUCD XAUCD ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCGRPID KUCGRPID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KU1XAUCD KU1XAUCD ; 
    15 * char(195) ; 
end // end KU1REC01

//*** RECORD=KU1REC02 ****
// rec type for analyst code
// ************************
Record KU1REC02 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 XCUCD XCUCD ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 XSTCD XSTCD ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KU1XCUCD KU1XCUCD ; 
    15 KU1P3CHO KU1P3CHO ; 
    15 KUCCOID KUCCOID ; 
    15 * char(188) ; 
end // end KU1REC02

//*** RECORD=KU1REC03 ****
// rec type for cash sort key
// ************************
Record KU1REC03 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 KM0WWSRT KM0WWSRT ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCGRPID KUCGRPID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KU1CSRT KU1CSRT ; 
    15 * char(197) ; 
end // end KU1REC03

//*** RECORD=KU1REC04 ****
// rec type for company name
// ************************
Record KU1REC04 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 KUCCONM KUCCONM ; 
    15 KUCCOID KUCCOID ; 
    15 * char(171) ; 
end // end KU1REC04

//*** RECORD=KU1REC05 ****
// rec type for cr line xdate
// ************************
Record KU1REC05 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 KUCCRLEX KUCCRLEX ; 
    15 KUCCOID KUCCOID ; 
    15 * char(197) ; 
end // end KU1REC05

//*** RECORD=KU1REC06 ****
// rec type for credit responsibility
// ************************
Record KU1REC06 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 XCUCD XCUCD ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 SM1AGYID SM1AGYID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KU1XCUCD KU1XCUCD ; 
    15 * char(191) ; 
end // end KU1REC06

//*** RECORD=KU1REC07 ****
// rec type for credit status code
// ************************
Record KU1REC07 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 XCCCD XCCCD ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCGRPID KUCGRPID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KU1XCCCD KU1XCCCD ; 
    15 * char(195) ; 
end // end KU1REC07

//*** RECORD=KU1REC08 ****
// rec type for nike store count
// ************************
Record KU1REC08 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 KUCNSCNT KUCNSCNT ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCGRPID KUCGRPID ; 
    15 * char(198) ; 
end // end KU1REC08

//*** RECORD=KU1REC09 ****
// rec type for send statement code
// ************************
Record KU1REC09 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 KM0WWSTM KM0WWSTM ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 XCUCD XCUCD ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KU1NOSTM KU1NOSTM ; 
    15 * char(197) ; 
end // end KU1REC09

//*** RECORD=KU1REC10 ****
// rec type for store count
// ************************
Record KU1REC10 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 KUCSSCNT KUCSSCNT ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCGRPID KUCGRPID ; 
    15 * char(198) ; 
end // end KU1REC10

//*** RECORD=KU1REC11 ****
// rec type for address
// ************************
Record KU1REC11 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 XXXADDR1 XXXADDR1 ; 
    15 XXXADDR2 XXXADDR2 ; 
    15 XXXADDR3 XXXADDR3 ; 
    15 XXXCITY XXXCITY ; 
    15 XSTCD XSTCD ; 
    15 XXXZIP XXXZIP ; 
    15 XCTCD XCTCD ; 
    15 KUMSTRID KUMSTRID ; 
    15 KUCCOID KUCCOID ; 
    15 * char(68) ; 
end // end KU1REC11

//*** RECORD=KU1REC12 ****
// rec type for apparel image
// ************************
Record KU1REC12 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 KUMXNIAP KUMXNIAP ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCCOID KUCCOID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KUCGRPID KUCGRPID ; 
    15 KU1P3CHO KU1P3CHO ; 
    15 KU1ACIMG KU1ACIMG ; 
    15 * char(190) ; 
end // end KU1REC12

//*** RECORD=KU1REC13 ****
// rec type for cust self image
// ************************
Record KU1REC13 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 XCFCD XCFCD ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCCOID KUCCOID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KUCGRPID KUCGRPID ; 
    15 KU1P3CHO KU1P3CHO ; 
    15 KU1XCFCD KU1XCFCD ; 
    15 * char(190) ; 
end // end KU1REC13

//*** RECORD=KU1REC14 ****
// rec type for footwear image
// ************************
Record KU1REC14 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 KUMXNIFT KUMXNIFT ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCCOID KUCCOID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KUCGRPID KUCGRPID ; 
    15 KU1P3CHO KU1P3CHO ; 
    15 KU1FCIMG KU1FCIMG ; 
    15 * char(190) ; 
end // end KU1REC14

//*** RECORD=KU1REC16 ****
// record type for sic code
// ************************
Record KU1REC16 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 YSVCD YSVCD ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCCOID KUCCOID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KUCGRPID KUCGRPID ; 
    15 KU1P3CHO KU1P3CHO ; 
    15 KU1YSVCD KU1YSVCD ; 
    15 * char(186) ; 
end // end KU1REC16

//*** RECORD=KU1REC17 ****
// rec type for store name
// ************************
Record KU1REC17 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 KUMSTRNM KUMSTRNM ; 
    15 KUMSTRID KUMSTRID ; 
    15 KUCCOID KUCCOID ; 
    15 * char(169) ; 
end // end KU1REC17

//*** RECORD=KU1REC18 ****
// rec type for warehouse/gpc code
// ************************
Record KU1REC18 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 XWHCD XWHCD ; 
    15 XGPCD XGPCD ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCGRPID KUCGRPID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 XSTCD XSTCD ; 
    15 KU1P3CHO KU1P3CHO ; 
    15 XCTCD XCTCD ; 
    15 KU1P4CHO KU1P4CHO ; 
    15 KUCCOID KUCCOID ; 
    15 KU1P5CHO KU1P5CHO ; 
    15 SM1AGYID SM1AGYID ; 
    15 KU1P6CHO KU1P6CHO ; 
    15 KU1XWHCD KU1XWHCD ; 
    15 KU1P7CHO KU1P7CHO ; 
    15 KU1XGPCD KU1XGPCD ; 
    15 * char(172) ; 
end // end KU1REC18

//*** RECORD=KU1REC19 ****
// rec type for po nbr
// ************************
Record KU1REC19 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 * char(1) ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCCOID KUCCOID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KUCGRPID KUCGRPID ; 
    15 KU1P3CHO KU1P3CHO ; 
    15 KUMSTRID KUMSTRID ; 
    15 KU1P4CHO KU1P4CHO ; 
    15 XGPCD XGPCD ; 
    15 KU1P5CHO KU1P5CHO ; 
    15 KU1PORFL KU1PORFL ; 
    15 * char(186) ; 
end // end KU1REC19

//*** RECORD=KU1REC20 ****
// rec type for vend auth
// ************************
Record KU1REC20 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 * char(1) ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCCOID KUCCOID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KUCGRPID KUCGRPID ; 
    15 KU1P3CHO KU1P3CHO ; 
    15 KUMSTRID KUMSTRID ; 
    15 KU1P4CHO KU1P4CHO ; 
    15 XGPCD XGPCD ; 
    15 KU1P5CHO KU1P5CHO ; 
    15 KU1CRFL KU1CRFL ; 
    15 * char(186) ; 
end // end KU1REC20

//*** RECORD=KU1REC21 ****
// rec type for order
// ************************
Record KU1REC21 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 * char(2) ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCCOID KUCCOID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KUCGRPID KUCGRPID ; 
    15 KU1P3CHO KU1P3CHO ; 
    15 KUMSTRID KUMSTRID ; 
    15 KU1P4CHO KU1P4CHO ; 
    15 XGPCD XGPCD ; 
    15 KU1P5CHO KU1P5CHO ; 
    15 KU1XCICD KU1XCICD ; 
    15 * char(184) ; 
end // end KU1REC21

//*** RECORD=KU1REC22 ****
// rec type for bo
// ************************
Record KU1REC22 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 * char(1) ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCCOID KUCCOID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KUCGRPID KUCGRPID ; 
    15 KU1P3CHO KU1P3CHO ; 
    15 KUMSTRID KUMSTRID ; 
    15 KU1P4CHO KU1P4CHO ; 
    15 XGPCD XGPCD ; 
    15 KU1P5CHO KU1P5CHO ; 
    15 KU1BOAFL KU1BOAFL ; 
    15 * char(186) ; 
end // end KU1REC22

//*** RECORD=KU1REC23 ****
// rec type for chg
// ************************
Record KU1REC23 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 KUNCAFL KUNCAFL ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCCOID KUCCOID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KUCGRPID KUCGRPID ; 
    15 KU1P3CHO KU1P3CHO ; 
    15 KUMSTRID KUMSTRID ; 
    15 KU1P4CHO KU1P4CHO ; 
    15 XGPCD XGPCD ; 
    15 KU1P5CHO KU1P5CHO ; 
    15 KU1CAFL KU1CAFL ; 
    15 * char(186) ; 
end // end KU1REC23

//*** RECORD=KU1REC24 ****
// rec type for subs
// ************************
Record KU1REC24 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 KUNNOSFL KUNNOSFL ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCCOID KUCCOID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KUCGRPID KUCGRPID ; 
    15 KU1P3CHO KU1P3CHO ; 
    15 KUMSTRID KUMSTRID ; 
    15 KU1P4CHO KU1P4CHO ; 
    15 XGPCD XGPCD ; 
    15 KU1P5CHO KU1P5CHO ; 
    15 KU1NOSFL KU1NOSFL ; 
    15 * char(186) ; 
end // end KU1REC24

//*** RECORD=KU1REC26 ****
// rec type for salesman/agency
// ************************
Record KU1REC26 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 SM4REPID SM4REPID ; 
    15 SM1AGYID SM1AGYID ; 
    15 KUFRESCD KUFRESCD ; 
    15 KUGRPEDT KUGRPEDT ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCCOID KUCCOID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 XGPCD XGPCD ; 
    15 KU1P3CHO KU1P3CHO ; 
    15 KU1WSRID KU1WSRID ; 
    15 KU1P4CHO KU1P4CHO ; 
    15 KU1WSID KU1WSID ; 
    15 * char(178) ; 
end // end KU1REC26

//*** RECORD=KU1REC27 ****
// rec type for assign control category
// ************************
Record KU1REC27 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 XACCD XACCD ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCCOID KUCCOID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KUCGRPID KUCGRPID ; 
    15 KU1P3CHO KU1P3CHO ; 
    15 KUMSTRID KUMSTRID ; 
    15 KU1P4CHO KU1P4CHO ; 
    15 XGPCD XGPCD ; 
    15 KU1P5CHO KU1P5CHO ; 
    15 KU1XACCD KU1XACCD ; 
    15 * char(184) ; 
end // end KU1REC27

//*** RECORD=KU1REC28 ****
// rec type for assign allocation sequence
// ************************
Record KU1REC28 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 * int ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCCOID KUCCOID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KUCGRPID KUCGRPID ; 
    15 KU1P3CHO KU1P3CHO ; 
    15 KUMSTRID KUMSTRID ; 
    15 KU1P4CHO KU1P4CHO ; 
    15 XGPCD XGPCD ; 
    15 KU1P5CHO KU1P5CHO ; 
    15 KU1ALSEQ KU1ALSEQ ; 
    15 * char(180) ; 
end // end KU1REC28

//*** RECORD=KU1REC29 ****
// rec type for cust unit status
// ************************
Record KU1REC29 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 XXXSTAT XXXSTAT ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCCOID KUCCOID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KUMSTRID KUMSTRID ; 
    15 KU1P3CHO KU1P3CHO ; 
    15 XNXCD XNXCD ; 
    15 KU1P4CHO KU1P4CHO ; 
    15 XGPCD XGPCD ; 
    15 KU1P5CHO KU1P5CHO ; 
    15 KU1CSTAT KU1CSTAT ; 
    15 * char(188) ; 
end // end KU1REC29

//*** RECORD=KU1REC30 ****
// rec type for item bo code & min bo qty
// ************************
Record KU1REC30 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 KUNBOCD KUNBOCD ; 
    15 KUNBOQTY KUNBOQTY ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCCOID KUCCOID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KUCGRPID KUCGRPID ; 
    15 KU1P3CHO KU1P3CHO ; 
    15 KUMSTRID KUMSTRID ; 
    15 KU1P4CHO KU1P4CHO ; 
    15 XGPCD XGPCD ; 
    15 KU1P5CHO KU1P5CHO ; 
    15 KU1BOCD KU1BOCD ; 
    15 KU1P6CHO KU1P6CHO ; 
    15 KU1BOQTY KU1BOQTY ; 
    15 * char(181) ; 
end // end KU1REC30

//*** RECORD=KU1REC31 ****
// rec type for special labels
// ************************
Record KU1REC31 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 KUSTEXT1 KUSTEXT1 ; 
    15 KUSTEXT2 KUSTEXT2 ; 
    15 KU1NBLK1 KU1NBLK1 ; 
    15 KU1NBLK2 KU1NBLK2 ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCCOID KUCCOID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KUCGRPID KUCGRPID ; 
    15 KU1P3CHO KU1P3CHO ; 
    15 KUMSTRID KUMSTRID ; 
    15 KU1P4CHO KU1P4CHO ; 
    15 XNXCD XNXCD ; 
    15 KU1P5CHO KU1P5CHO ; 
    15 XGPCD XGPCD ; 
    15 KU1P6CHO KU1P6CHO ; 
    15 KU1TEXT1 KU1TEXT1 ; 
    15 KU1P7CHO KU1P7CHO ; 
    15 KU1TEXT2 KU1TEXT2 ; 
    15 * char(62) ; 
end // end KU1REC31

//*** RECORD=KU1REC32 ****
// rec type for gender/age code
// ************************
Record KU1REC32 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 XGACD XGACD ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCCOID KUCCOID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KUCGRPID KUCGRPID ; 
    15 KU1P3CHO KU1P3CHO ; 
    15 KUMSTRID KUMSTRID ; 
    15 KU1P4CHO KU1P4CHO ; 
    15 XGPCD XGPCD ; 
    15 KU1P5CHO KU1P5CHO ; 
    15 KU1XGACD KU1XGACD ; 
    15 * char(184) ; 
end // end KU1REC32

//*** RECORD=KU1REC33 ****
// rec type for sport/activity code
// ************************
Record KU1REC33 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 KUNSPCD KUNSPCD ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCCOID KUCCOID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KUCGRPID KUCGRPID ; 
    15 KU1P3CHO KU1P3CHO ; 
    15 KUMSTRID KUMSTRID ; 
    15 KU1P4CHO KU1P4CHO ; 
    15 XGPCD XGPCD ; 
    15 KU1P5CHO KU1P5CHO ; 
    15 SM1AGYID SM1AGYID ; 
    15 KU1P6CHO KU1P6CHO ; 
    15 KU1SPCD KU1SPCD ; 
    15 * char(179) ; 
end // end KU1REC33

//*** RECORD=KU1REC35 ****
// rec type for special customer groups
// ************************
Record KU1REC35 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 XSGCD XSGCD ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCCOID KUCCOID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KUCGRPID KUCGRPID ; 
    15 KU1P3CHO KU1P3CHO ; 
    15 KUMSTRID KUMSTRID ; 
    15 KU1P4CHO KU1P4CHO ; 
    15 XNXCD XNXCD ; 
    15 KU1P5CHO KU1P5CHO ; 
    15 XGPCD XGPCD ; 
    15 KU1P6CHO KU1P6CHO ; 
    15 KU1XSGCD KU1XSGCD ; 
    15 * char(181) ; 
end // end KU1REC35

//*** RECORD=KU1REC36 ****
// rec type for special instructions
// ************************
Record KU1REC36 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 KUQSINST KUQSINST ; 
    15 XNDCD XNDCD ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCCOID KUCCOID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KUCGRPID KUCGRPID ; 
    15 KU1P3CHO KU1P3CHO ; 
    15 KUMSTRID KUMSTRID ; 
    15 KU1P4CHO KU1P4CHO ; 
    15 XNXCD XNXCD ; 
    15 KU1P5CHO KU1P5CHO ; 
    15 XGPCD XGPCD ; 
    15 KU1P6CHO KU1P6CHO ; 
    15 KU1XNDCD KU1XNDCD ; 
    15 KU1P7CHO KU1P7CHO ; 
    15 KU1SINST KU1SINST ; 
    15 * char(56) ; 
end // end KU1REC36

//*** RECORD=KU1REC37 ****
// rec type for life cycle restriction
// ************************
Record KU1REC37 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 * char(1) ; 
    15 XLCCD XLCCD ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCCOID KUCCOID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KUCGRPID KUCGRPID ; 
    15 KU1P3CHO KU1P3CHO ; 
    15 KUMSTRID KUMSTRID ; 
    15 KU1P4CHO KU1P4CHO ; 
    15 XNXCD XNXCD ; 
    15 KU1P5CHO KU1P5CHO ; 
    15 XGPCD XGPCD ; 
    15 KU1P6CHO KU1P6CHO ; 
    15 KU1LCIND KU1LCIND ; 
    15 KU1P7CHO KU1P7CHO ; 
    15 KU1XLCCD KU1XLCCD ; 
    15 * char(178) ; 
end // end KU1REC37

//*** RECORD=KU1REC38 ****
// rec type for sport activity restriction
// ************************
Record KU1REC38 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 * char(1) ; 
    15 XSPCD XSPCD ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCCOID KUCCOID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KUCGRPID KUCGRPID ; 
    15 KU1P3CHO KU1P3CHO ; 
    15 KUMSTRID KUMSTRID ; 
    15 KU1P4CHO KU1P4CHO ; 
    15 XNXCD XNXCD ; 
    15 KU1P5CHO KU1P5CHO ; 
    15 XGPCD XGPCD ; 
    15 KU1P6CHO KU1P6CHO ; 
    15 KU1SPCIN KU1SPCIN ; 
    15 KU1P7CHO KU1P7CHO ; 
    15 KU1XSPCD KU1XSPCD ; 
    15 * char(178) ; 
end // end KU1REC38

//*** RECORD=KU1REC39 ****
// rec type for quality restriction
// ************************
Record KU1REC39 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 * char(1) ; 
    15 XQACD XQACD ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCCOID KUCCOID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KUCGRPID KUCGRPID ; 
    15 KU1P3CHO KU1P3CHO ; 
    15 KUMSTRID KUMSTRID ; 
    15 KU1P4CHO KU1P4CHO ; 
    15 XNXCD XNXCD ; 
    15 KU1P5CHO KU1P5CHO ; 
    15 XGPCD XGPCD ; 
    15 KU1P6CHO KU1P6CHO ; 
    15 KU1QLIND KU1QLIND ; 
    15 KU1P7CHO KU1P7CHO ; 
    15 KU1XQACD KU1XQACD ; 
    15 * char(178) ; 
end // end KU1REC39

//*** RECORD=KU1REC40 ****
// rec type for company status code
// ************************
Record KU1REC40 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 XXXSTAT XXXSTAT ; 
    15 KUCCOID KUCCOID ; 
    15 * char(200) ; 
end // end KU1REC40

//*** RECORD=KU1REC41 ****
// rec type for store status code
// ************************
Record KU1REC41 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 XXXSTAT XXXSTAT ; 
    15 KUCCOID KUCCOID ; 
    15 KUMSTRID KUMSTRID ; 
    15 * char(198) ; 
end // end KU1REC41

//*** RECORD=KU1REC42 ****
// rec type for invoice distribution indicator
// ************************
Record KU1REC42 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 XIDCD XIDCD ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCCOID KUCCOID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KUCGRPID KUCGRPID ; 
    15 KU1P3CHO KU1P3CHO ; 
    15 KUMSTRID KUMSTRID ; 
    15 KU1P4CHO KU1P4CHO ; 
    15 XGPCD XGPCD ; 
    15 KU1P5CHO KU1P5CHO ; 
    15 KU1IDCD KU1IDCD ; 
    15 * char(184) ; 
end // end KU1REC42

//*** RECORD=KU1REC43 ****
// rec type for credit responsibility
// ************************
Record KU1REC43 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 XCUCD XCUCD ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCCOID KUCCOID ; 
    15 * char(196) ; 
end // end KU1REC43

//*** RECORD=KU1REC44 ****
// rec type for invoice delay flag
// ************************
Record KU1REC44 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 KUCIDIND KUCIDIND ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCCOID KUCCOID ; 
    15 * char(199) ; 
end // end KU1REC44

//*** RECORD=KU1REC45 ****
// rec type for call class code
// ************************
Record KU1REC45 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 * char(2) ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCCOID KUCCOID ; 
    15 KU1P2CHO KU1P2CHO ; 
    15 KUMSTRID KUMSTRID ; 
    15 KU1P3CHO KU1P3CHO ; 
    15 XGPCD XGPCD ; 
    15 KU1P4CHO KU1P4CHO ; 
    15 KU1YCLCD KU1YCLCD ; 
    15 * char(189) ; 
end // end KU1REC45

//*** RECORD=KU1REC46 ****
// rec type for send statement indicator
// ************************
Record KU1REC46 type basicRecord // VAGen Info - redefined KU1REC
  10 KU1KEY KU1KEY ; 
    15 KU1RTYPE KU1RTYPE ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 KU1SEQID KU1SEQID ; 
    15 XXXUSRID XXXUSRID ; 
  10 KU1DATA KU1DATA ; 
    15 KM0WWSTM KM0WWSTM ; 
    15 KU1P1CHO KU1P1CHO ; 
    15 KUCCOID KUCCOID ; 
    15 * char(199) ; 
end // end KU1REC46

// flag for a map field1,param1
DataItem KM0WW1P1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field1,param2
DataItem KM0WW1P2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field1,param3
DataItem KM0WW1P3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field1,param4
DataItem KM0WW1P4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field1,param5
DataItem KM0WW1P5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field1,param6
DataItem KM0WW1P6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field1,param7
DataItem KM0WW1P7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field2,param1
DataItem KM0WW2P1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field2,param2
DataItem KM0WW2P2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field2,param3
DataItem KM0WW2P3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field2,param4
DataItem KM0WW2P4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field2,param5
DataItem KM0WW2P5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field2,param6
DataItem KM0WW2P6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field2,param7
DataItem KM0WW2P7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field3,param1
DataItem KM0WW3P1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field3,param2
DataItem KM0WW3P2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field3,param3
DataItem KM0WW3P3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field3,param4
DataItem KM0WW3P4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field3,param5
DataItem KM0WW3P5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field3,param6
DataItem KM0WW3P6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field3,param7
DataItem KM0WW3P7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field4,param1
DataItem KM0WW4P1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field4,param2
DataItem KM0WW4P2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field4,param3
DataItem KM0WW4P3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field4,param4
DataItem KM0WW4P4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field4,param5
DataItem KM0WW4P5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field4,param6
DataItem KM0WW4P6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field4,param7
DataItem KM0WW4P7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field5,param1
DataItem KM0WW5P1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field5,param2
DataItem KM0WW5P2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field5,param3
DataItem KM0WW5P3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field5,param4
DataItem KM0WW5P4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field5,param5
DataItem KM0WW5P5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field5,param6
DataItem KM0WW5P6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field5,param7
DataItem KM0WW5P7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field6,param1
DataItem KM0WW6P1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field6,param2
DataItem KM0WW6P2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field6,param3
DataItem KM0WW6P3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field6,param4
DataItem KM0WW6P4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field6,param5
DataItem KM0WW6P5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag for a map field7,param1
DataItem KM0WW7P1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws error return number
DataItem KM0WWERR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for km0wwout
DataItem KM0WWIDX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws image codes holder
DataItem KM0WWIMG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index output sequence number
DataItem KM0WWIX2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// flag for last map displayed
DataItem KM0WWMFL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// area1 of msg area
DataItem KM0WWMS1 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// area2 of msg area
DataItem KM0WWMS2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// area3 of msg area
DataItem KM0WWMS3 char(47)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// stage area for camsg
DataItem KM0WWMSG char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag that new value is blank
DataItem KM0WWNBL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table rec data
DataItem KM0WWOTD char(205)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table rec key
DataItem KM0WWOTK char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table of recs to be output
DataItem KM0WWOUT char(224)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cash sort key
DataItem KM0WWSRT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// send statement flag
DataItem KM0WWSTM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work century
DataItem KM0WWYDC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work day
DataItem KM0WWYDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work month
DataItem KM0WWYDM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem KM0WWYDY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year/month/day
DataItem KM0WWYMD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prv apparel image
DataItem KU1ACIMG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// entire record area
DataItem KU1ALL char(224)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev assgn alloc seq code
DataItem KU1ALSEQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prev bo acknldgment flag
DataItem KU1BOAFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev item bo code
DataItem KU1BOCD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev min bo qty
DataItem KU1BOQTY smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prev chnge acknldgment flag
DataItem KU1CAFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev vend auth req flag
DataItem KU1CRFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev cash sort key
DataItem KU1CSRT char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// prev cust unit status
DataItem KU1CSTAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data for file
DataItem KU1DATA char(205)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prv footwear image
DataItem KU1FCIMG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev invoice dist ind
DataItem KU1IDCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key to file
DataItem KU1KEY char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev life cycle indicator
DataItem KU1LCIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag that new text1 is blank
DataItem KU1NBLK1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag that new text2 is blank
DataItem KU1NBLK2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev no subs allowed flag
DataItem KU1NOSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev send statement flag
DataItem KU1NOSTM char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// flag that param 1 chosen
DataItem KU1P1CHO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag that param 2 chosen
DataItem KU1P2CHO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag that param 3 chosen
DataItem KU1P3CHO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag that param 4 chosen
DataItem KU1P4CHO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag that param 5 chosen
DataItem KU1P5CHO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag that param 6 chosen
DataItem KU1P6CHO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag that param 7 chosen
DataItem KU1P7CHO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev po number req flag
DataItem KU1PORFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev quality indicator
DataItem KU1QLIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record type
DataItem KU1RTYPE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// num of rec type added at time
DataItem KU1SEQID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev special instruction
DataItem KU1SINST char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev sport/activity code
DataItem KU1SPCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev sport act indicator
DataItem KU1SPCIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev special label line 1
DataItem KU1TEXT1 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev special label line 2
DataItem KU1TEXT2 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev agency id
DataItem KU1WSID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev sales rep id
DataItem KU1WSRID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// prev assgn control cat code
DataItem KU1XACCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev account class code
DataItem KU1XAUCD char(2)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// prev credit status code
DataItem KU1XCCCD char(2)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// prv cust self image code
DataItem KU1XCFCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev order acknldgment code
DataItem KU1XCICD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev cr resp code
DataItem KU1XCUCD char(4)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// prev gender age code
DataItem KU1XGACD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gpc code
DataItem KU1XGPCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev life cycle code
DataItem KU1XLCCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev nike dept code
DataItem KU1XNDCD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev quality code
DataItem KU1XQACD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev special cust group
DataItem KU1XSGCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev sport act code
DataItem KU1XSPCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prv warehouse code
DataItem KU1XWHCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev class class code
DataItem KU1YCLCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prv store class code
DataItem KU1YSVCD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reason code
DataItem KUFRESCD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

