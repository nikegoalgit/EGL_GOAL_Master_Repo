package km01;

import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.*;
//*** PROGRAM=KM01 ****
// ------------ km01 - customer NIL menu ----------------------
// 
// overview:  this application will transfer control to a
//            specific NIL customer applications.
// 
// ************************************************************
//                    maintenance log
// ------------------------------------------------------------
//   date     int               description
// ------------------------------------------------------------
// 05/16/91  dsalzw   complete rewrite of old km01, which was
//                    a clone of km0a.
// 10/01/93  CHELLM   CSP 4.1 Conversion.
// *********************
Program KM01 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KM01W01 KM01W01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KM01M.KM01M005 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KM01000: KM01000();
     /* ------------  km01001 flow ---------------------*/
    ;
    goto KM01100; /* to converse NIL menu*/
    KM01100: KM01100();
     /* -----------  km01005 flow -------------------------*/
    ;
    goto KM01100;
    ;
  end // end main
end // end KM01

// init NIL menu
Function KM01000()
   /* *****************************************/
   /* * km01000 - initialize customer menu*/
   /* *****************************************/
  ;
  XSENTRY(); /* check security*/
  ;
  XSSEGTR(); /* set segmented trans id*/
  ;
  ;
  set KM01M005 initial; /* clear map fields*/
  ;
   /* set up passed fields*/
  if (COMMAREA.CAITEM != " ")
    KM01W01.KM01WGRP = COMMAREA.CAITEM;
  else
    KM01W01.KM01WGRP = COMMAREA.CAUSERA;
  end
  ;
  COMMAREA.CAITEM = " ";
  COMMAREA.CAUSERA = " ";
  if (KM01W01.KM01WCID-CHAR is numeric)
    KM01M005.KUCCOID = KM01W01.KM01WCID;
  else
    KM01M005.KUCCOID = 0;
    KM01W01.KM01WCID = 0;
  end
  ;
  if (KM01W01.KM01WSID-CHAR is numeric)
    KM01M005.KUMSTRID = KM01W01.KM01WSID;
  else
    KM01M005.KUMSTRID = 0;
    KM01W01.KM01WSID = 0;
  end
  ;
  if (KM01W01.KM01WDID-CHAR is numeric)
    KM01M005.XNXCD = KM01W01.KM01WDID;
  else
    KM01M005.XNXCD = 0;
    KM01W01.KM01WDID = 0;
  end
  ;
  KM01M005.XGPCD = KM01W01.KM01WGID;
  ;
  KM01M005.KM01MDT = VGVar.currentShortGregorianDate; /* move sys date to map*/
  ;
  ;
end // end KM01000

// display NIL menu
Function KM01100()
   /* ******************************************/
   /* * km01100 - converse NIL menu*/
   /* ******************************************/
  ;
   /* no before processing*/
  ;
  converse KM01M005 ;
  ;
  ;
  KM01M005.VAGen_EZEMSG = " ";
  KM01M005.KM01MMSG = " ";
  ;
  ;
  KM01110(); /* edit special keys/fast paths*/
  ;
  KM01120(); /* edit screen input*/
  ;
  ;
end // end KM01100

// test pf & special keys
Function KM01110()
   /* ************************************************/
     /* edit all special entry keys                **/
   /* ************************************************/
  ;
  ;
   /* **************************************/
   /* edit pa2 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pa2)
    COMMAREA.CATOAP = "MN0M"; /* master menu*/
    COMMAREA.CAFROMAP = "KM01"; /* comming from appl*/
    XSEXIT();
    KM01M005.VAGen_EZEMSG = COMMAREA.CAMSG;
    return;
  end
  ;
   /* **************************************/
   /* edit enter  key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is enter)
    if (KM01M005.CATOAP > " ") /* fast path*/
      COMMAREA.CATOAP = KM01M005.CATOAP;
      COMMAREA.CAITEM = KM01W01.KM01WGRP;
      COMMAREA.CAFROMAP = "KM01";
      XSEXIT();
      converseLib.validationFailed(41); /* invalid fast path*/
      set KM01M005.CATOAP cursor, modified, bold;
      return;
    else
      set KM01M005.CATOAP initialAttributes;
      return;
    end
    return;
  else
    if (KM01M005.CATOAP > " ")
      converseLib.validationFailed(48); /* can not fast path and use pf keys*/
      set KM01M005.CATOAP cursor, bold;
      return;
    else
      set KM01M005.CATOAP modified;
    end
  end
  ;
  ;
   /* **************************************/
   /* edit pf1 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf1) /* help screens*/
    COMMAREA.CACURRAP = "KM01";
    XSPF1();
    KM01M005.VAGen_EZEMSG = COMMAREA.CAMSG;
    return;
  end
  ;
   /* **************************************/
   /* edit pf3 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf3) /* back to master menu*/
    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    COMMAREA.CAFROMAP = "KM01";
    XSEXIT();
    KM01M005.VAGen_EZEMSG = COMMAREA.CAMSG;
    return;
  end
  ;
   /* **************************************/
   /* edit pf4 key*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf4) /* back to goal menu*/
    COMMAREA.CAFROMAP = "KM01";
    XSPF4();
    KM01M005.VAGen_EZEMSG = COMMAREA.CAMSG;
    return;
  end
  ;
  ;
   /* **************************************/
   /* invalid pf key*/
   /* **************************************/
  ;
  converseLib.validationFailed(3); /* invalid pf key message*/
  return;
  ;
  ;
end // end KM01110

// edit the screen
Function KM01120()
   /* **********************************************/
    /* edit the menu option                      **/
   /* **********************************************/
  ;
  ;
  set KM01M005.KM01MOPT cursor, initialAttributes;
  ;
  KM01W01.KM01WCID = KM01M005.KUCCOID;
  KM01W01.KM01WSID = KM01M005.KUMSTRID;
  KM01W01.KM01WDID = KM01M005.XNXCD;
  KM01W01.KM01WGID = KM01M005.XGPCD;
  COMMAREA.CAUSERA = KM01W01.KM01WGRP;
  ;
   /* ****************************************/
   /* * company options*/
   /* ****************************************/
  if (KM01M005.KM01MOPT == "11") /* company - info*/
    COMMAREA.CATOAP = "KM09";
    XSEXIT();
    converseLib.validationFailed(41); /* not authorized for that option*/
    set KM01M005.KM01MOPT cursor, bold;
    return;
  end
  ;
  ;
  if (KM01M005.KM01MOPT == "12") /* company - terms*/
    COMMAREA.CATOAP = "KM0N";
    XSEXIT();
    converseLib.validationFailed(41); /* not authorized for that option*/
    set KM01M005.KM01MOPT cursor, bold;
    return;
  end
  ;
  ;
  ;
   /* ****************************************/
   /* * address options*/
   /* ****************************************/
  if (KM01M005.KM01MOPT == "21") /* address - inquiry*/
    COMMAREA.CATOAP = "KM02";
    XSEXIT();
    converseLib.validationFailed(41); /* not authorized for that option*/
    set KM01M005.KM01MOPT cursor, bold;
    return;
  end
  ;
  ;
  if (KM01M005.KM01MOPT == "22") /* address - view*/
    COMMAREA.CATOAP = "KM03";
    XSEXIT();
    converseLib.validationFailed(41); /* not authorized for that option*/
    set KM01M005.KM01MOPT cursor, bold;
    return;
  end
  ;
  ;
  if (KM01M005.KM01MOPT == "23") /* address - add/chg*/
    COMMAREA.CATOAP = "KM04";
    XSEXIT();
    converseLib.validationFailed(41); /* not authorized for that option*/
    set KM01M005.KM01MOPT cursor, bold;
    return;
  end
  ;
  ;
  if (KM01M005.KM01MOPT == "24") /* address - chg id*/
    COMMAREA.CATOAP = "KM05";
    XSEXIT();
    converseLib.validationFailed(41); /* not authorized for that option*/
    set KM01M005.KM01MOPT cursor, bold;
    return;
  end
  ;
  ;
   /* ****************************************/
   /* * invalid option*/
   /* ****************************************/
  converseLib.validationFailed(40); /* invalid option*/
  set KM01M005.KM01MOPT cursor, bold;
  return;
  ;
  ;
end // end KM01120

//*** RECORD=KM01W01 ****
// this record formats the data passed to the customer menu and
// applications thru the commarea.causera field.
// ***********************
Record KM01W01 type basicRecord
  5 KM01WGRP KM01WGRP ; 
    10 KM01WCID KM01WCID ; 
      15 KM01WCID-CHAR KM01WCID-CHAR ; 
    10 KM01WSID KM01WSID ; 
      15 KM01WSID-CHAR KM01WSID-CHAR ; 
    10 KM01WDID KM01WDID ; 
      15 KM01WDID-CHAR KM01WDID-CHAR ; 
    10 KM01WGID KM01WGID ; 
end // end KM01W01

// company id
DataItem KM01WCID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// company id
DataItem KM01WCID-CHAR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dept id
DataItem KM01WDID num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dept id
DataItem KM01WDID-CHAR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gen prod class code
DataItem KM01WGID char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group name
DataItem KM01WGRP char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// store id
DataItem KM01WSID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// store id
DataItem KM01WSID-CHAR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

