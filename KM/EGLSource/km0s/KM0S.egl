package km0s;

import corpcom2.XX0XW01;
import corpcom2.XZZREC;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.*;
import corpcom6.SQLCA;
import corpx1.XATCD;
import corpx1.XATTBL;
import corpx1.XAUTBL;
import corpx1.XCFABRV;
import corpx1.XCFTBL;
import corpx1.XGPTBL;
import corpx1.XIDTBL;
import corpx1.XNITBL;
import corpx1.XWHTBL;
import corpx2.XNIABRV;
import corpy2.YSVTBL;
import kl.common.KIZTBL;
import ku.common.KU0XW10;
import ku.common.KU0XW30;
import ku.common.KUCREC;
import ku.common.KUMREC;
import ku.common.KUNREC;
import ku.common.KUWREC;
import ku.common.KUYREC;
import ku.common.KUZREC;
import ta.common.TA1REC;
import vv.common.VCUSAP01;
import vv.common.VDSTRB01;
import xa.common.XA0AW02;
//*** PROGRAM=KM0S ****
// ----------------  km0s - change store  ---------------------
// 
// overview:  this application performs change functions for
//            general store data
// 
// date written: 06/86
// author:       grant gilray
// 
// ************************************************************
//                   maintenance history log
// ------------------------------------------------------------
//  date    int   modules            description
// ------------------------------------------------------------
// 031887   clt   km0sm010   fixed length of cust store number
// 071687   clt   km0s020    changed cursor position
// 072187   clt              added 3 new fields to kumrec
// 120287   clt   km0s015    fixed fastpath
// 121587   clt   km0s020    fixed fastpath
// 031088   clt              added deferred mailing indicator
// 032288   clt              fix security for deferred mailing
// 111788   jbw              noncsp opt added to calls
// 111788   jbw              added xssegtr logic
// 031489   clt              replace sic code with store class
//                           and remove sperry store type
// 041489   clt              removed sales service reps
// 042489   JWOOD            removed XSRTBL FROM T & AR LIST
// 051589   clt              database changes
// 060889   clt              added security for cole haan
// 011690   jfiat            database changes
// 032990   dsalzw           database changes
// 091090   dsalzw           added kiztbl for audit trail
// 121490   dsalzw           edit gpc code for image codes
// 020491   dsalzw           db changes
// 031591   twatso           adding invoice distribution to
//                           store level
// 040991   twatso           stopped updating customer if inv
//                           dist doesn't change.
// 042591   dsalzw           change heading to store self id
// 051691   dsalzw           change pf3 to use from appl
// 052391   dsalzw           removed all security for inquiry
// 060991   dsalzw           db changes
// 072591   dsalzw           fix map attributes
// 101191   CHELLM           Added CU-OFSHR-FL
//                           Deinstalled CUTAG records KUXREC
// 031392   CHELLM           March DB2 changes, fixed colors
// 050493   cancie           Added new sgrp km0ss04. Check for
//                           commarea.caclvl(4) in proc km0s020
// 28-june-1993     dlegg    Check for numeric values before
//                           move. km0s015
// 12-july-1993     dlegg    Change call to TA0020 with ABND
//                           to RETN. KM0S016,017,S30,S31.
// 16-july-1993     dlegg    Add sgrp to initialize all records
//                           used by appl.
// 10/01/93 CHELLM           CSP 4.1 Conversion.
// 03/11/94 CHELLM           DB2 changes.
//                           Added edit to prevent Europe only
//                           XIDCD entry.
// 04/10/95 CHELLM           Added Nike Canada User Security
// *Y2KFIX   12/05/97  DKENNY  Y2K MODIFICATIONS MADE:
// *                   Application regenerated to pick up new
// *                   XX0XS01.
// *03-13-01     GDECKE     ADD INSERT AND DELETE FUNCTIONS FOR
//                          TABLE VCUSAP01 TO SUPPORT NIKE
//                          INTERNATINAL CUSTOMER MAINTENANCE
// *12-01-01     NJANA      Modified to get the correct addr
//                          id and status
// *********************
Program KM0S type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KM0SW01 KM0SW01; // record
  KU0XW10 KU0XW10; // record
  KU0XW30 KU0XW30; // record
  KUCREC KUCREC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  KUWREC KUWREC; // record
  KUYREC KUYREC; // record
  KUZREC KUZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VCUSAP01 VCUSAP01; // record
  VDSTRB01 VDSTRB01; // record
  XA0AW02 XA0AW02; // record
  XX0XW01 XX0XW01; // record
  XZZREC XZZREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KIZTBL {deleteAfterUse = yes}; // table
  use XATTBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use XCFTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XIDTBL {deleteAfterUse = yes}; // table
  use XNITBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YSVTBL {deleteAfterUse = yes}; // table
  use KM0SM.KM0SM010 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KM0S015: KM0S015();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    if (KM0SM010.KUCCOID > 0) /* if company id passed to app*/
      goto KM0S016; /* read store and format screen*/
    else /* else(complete key not supplied)*/
      goto KM0S020; /* converse screen*/
    end /* end of "if" statement*/


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KM0S016: KM0S016();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    if (converseVar.validationMsgNum == 0) /* if company found*/
      goto KM0S017; /* proceed to naext process*/
    else /* else(company not found)*/
      goto KM0S020; /* converse screen with error*/
    end /* end of "if" statement*/


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KM0S017: KM0S017();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    if (converseVar.validationMsgNum == 0 /* is store found*/
     || converseVar.validationMsgNum == 29) /* or error msg is "recd updated"*/
      goto KM0S018; /* format screen*/
    else /* else(store not found)*/
      goto KM0S020; /* converse screen with error*/
    end /* end of "if" statement*/


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KM0S018: KM0S018();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    goto KM0S020; /* proceed to next process*/


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KM0S020: KM0S020();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    if (converseVar.eventKey is pa2)
      goto KM0S018;
    else
      if (converseVar.validationMsgNum != 41)
        if (KM0SM010.KUCCOID != KM0SW01.KM0SWLCI)
          KM0SW01.KM0SWCID = KM0SM010.KUCCOID;
          KM0SW01.KM0SWSID = KM0SM010.KUMSTRID;
          set KM0SM010 initial;
          goto KM0S016;
        else
          if (KM0SM010.KUMSTRID != KM0SW01.KM0SWLSI)
            KM0SW01.KM0SWSID = KM0SM010.KUMSTRID;
            set KM0SM010 initial;
            goto KM0S017;
          else
            /* next sentence*/
          end
        end
      else
        /* next sentence*/
      end
      if (converseVar.validationMsgNum == 0)
        if (KM0SW01.KM0SWFST == "Y")
          if (KM0SM010 is modified)
            converseLib.validationFailed(22);
            KM0SW01.KM0SWFST = "N";
            goto KM0S020;
          end
        else
          if (converseVar.eventKey is pf12)
            goto KM0S030;
          else
            if (KM0SM010 is modified)
              converseLib.validationFailed(22);
              goto KM0S020;
            end
          end
        end
      else
        set KM0SM010 alarm;
        goto KM0S020;
      end
    end


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
    KM0S030: KM0S030();
     /* *************************************************************/
     /* *****          f  l  o  w      s  t  a  g  e           ******/
     /* *************************************************************/


    goto KM0S017; /* start over*/


     /* *************************************************************/
     /* *****   e  n  d       f  l  o  w       s  t  a  g  e   ******/
     /* *************************************************************/
  end // end main
end // end KM0S

// ADD AUDIT RECORD
Function KM0S-ADD-AUDT-RECD()
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
                                 /* call i/o mod to add*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "KM0S-ADD-AUDIT-RECD  ";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = "KM0S"; /* Program number*/
    TA1REC.TA1DBASE = "DCUST  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCUAUD01"; /* Table view name*/
    TA1REC.TA1TBLKE = VCUSAP01.VCUSAP01-KEY; /* Table key*/
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes}; /* call error routine*/
    XSPF4();
  end
end // end KM0S-ADD-AUDT-RECD

// Add VCUSAP01
Function KM0S-ADD-VCUSAP01()
  /* * KM0S-ADD-VCUSAP01*/
  /* * ADD NEW ROW FROM DCUST.VCUSAP01*/
  /* * THIS IS EXECUTED AFTER DELETING THE OLD VERSION OF THE VCUSAP01*/
  /* * ROW. CU-CO-ID AND CU-STOR-ID ARE KEY FIELDS THAT ARE TO BE*/
  /* * UPDATED, SO A DELETE AND ADD IS DONE INSTEAD OF AN UPDATE.*/
  /*  */
  /* the remaining fields were already filled in when the SAP/GOAL*/
  /* link program initially added the VCUSAP01 line.*/
  /* TCS change begins-dated 12/01/01*/
  VCUSAP01.CU-ADDR-ID = KUMREC.KUMSHAID;
  VCUSAP01.CU-BLGRP-ID = KUMREC.KUCCOID;
  if (VCUSAP01.KUCCOID == 9777777)
    VCUSAP01.XXX-STAT = "I";
  else
    VCUSAP01.XXX-STAT = KM0SM010.XXXSTAT;
  end
  /* TCS change ends  -dated 12/01/01*/
  VCUSAP01.XXXPGUID = "NILMAINT";

   /* GET SYSTEM DATE AND TIME, MOVE TO ZZ- FIELDS*/
  XX0XS01();
  VCUSAP01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
  VCUSAP01.ZZ-SDT = XX0XW01.XX0XWDAT;
  VCUSAP01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
  VCUSAP01.ZZ-CHNG-CNT = VCUSAP01.ZZ-CHNG-CNT + 1;


  try
    call "VCUSAP01" ("A ", SQLCA, VCUSAP01) {isNoRefresh = yes, isExternal = yes};
  end /* Select record*/

  /* ------------------------------------------------------------*/
  /* IF NOT SUCCESSFUL, SHOW ERROR MESSAGE*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
  )                                 
    if (SQLCA.VAGen_SQLCODE == 0)
      if (VCUSAP01.KUCCOID == 9777777)
        KM0SS-ADD-VPARM101();
      else
        if (VCUSAP01.KUCCOID != 9777777
         && VCUSAP01.XXX-STAT == "A")
          KM0SS-ADD-VPARM101(); /* INSERT VPARM0101 LINE TO LET*/
        end /* SAP KNOW THE SAP# WAS REASSIGNED*/
      end
        /* TCS CHANGE 12/21/2001 BEGIN  ADD AUDIT RECORD*/
      KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
      KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;

      KUZREC.KUZTYPE = "A"; /* assign type code value*/
      KUZREC.KUZBFCD = " "; /* assign "after" code*/
      KUZREC.XXXTBLNM = "VCUSAP01";
                                   /* move tbl name to audit rec*/
      KUZREC.XXXUSER = COMMAREA.CAUSERID; /* move user id to audit rec*/
      KUZREC.KUCCOID = VCUSAP01.KUCCOID; /* move co id to audit rec*/
      KUZREC.KUMSTRID = VCUSAP01.KUMSTRID;
                                   /* move store id to audit rec*/
      KUZREC.XNXCD = 0;
                               /* move 0 TO DEPT*/
      KUZREC.KUZDATA = VCUSAP01.VCUSAP01-RECORD-GROUP; /* MOVE GRP DA*/
      if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
        KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
        KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
        KM0S-ADD-AUDT-RECD();
      else
        KUZREC.KUZSSEQ = 0;
        KUZREC.KUZLEN = 0;
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "KM0S   ";
        TA1REC.TA1LOCAT[1] = "KM0S-ADD-";
        TA1REC.TA1LOCAT[2] = "KIZTBL   ";
        TA1REC.TA1LOCAT[3] = "VCUSAP01 ";
        TA1REC.TA1MAP = "KM0SM001";
        TA1REC.TA1DBASE = "DCUST.";
        TA1REC.TA1TBLVU = "VCUSAP01";
        TA1TBLKE = "TABLE NOT FOUND";
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end

        /* TCS CHANGE 12/21/2001 END    ADD AUDIT RECORD*/
      return; /* Return to previous process*/
    else
      converseLib.validationFailed(481); /* Invalid SAP number*/
      return; /* Return to previous process*/
    end

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  move SQLCA to ERRSQLCA withV60Compat;

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(478); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(477); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "KM0S-ADD-VCUSAP01    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "KM0S"; /* Program number*/
  TA1REC.TA1DBASE = "DCUST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUSAP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCUSAP01.VCUSAP01-KEY; /* Table key*/

  call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end KM0S-ADD-VCUSAP01

// Delete VCUSAP01
Function KM0S-DEL-VCUSAP01()
  /* * KM0S-DEL-VCUSAP01*/
  /* * REMOVE SELECTED ROW FROM DCUST.VCUSAP01*/
  /*  */
  /* DO NOT ALTER THESE FIELDS - THE VALUES THAT WERE RETURNED*/
  /* FROM THE ORIGINAL SELECT ARE THE ONES NEEDED TO TARGET THE*/
  /* ROW THAT MUST BE DELETED.*/
  /* SET VCUSAP01 EMPTY;*/
  /* MOVE KM0SM010.KUCCOID TO VCUSAP01.KUCCOID;*/
  /* MOVE KM0SM010.KUMSTRID TO VCUSAP01.KUMSTRID;*/
  /* MOVE 0 TO VCUSAP01.XNXCD;*/

  try
    call "VCUSAP01" ("D ", SQLCA, VCUSAP01) {isNoRefresh = yes, isExternal = yes};
  end /* Select record*/

  /* ------------------------------------------------------------*/
  /* IF NOT SUCCESSFUL, SHOW ERROR MESSAGE*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
  )                                 
    if (SQLCA.VAGen_SQLCODE == 0)
      /* TCS CHANGE 12/21/2001 BEGIN  ADD AUDIT RECORD*/
      XX0XS01();
      KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
      KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;

      KUZREC.KUZTYPE = "D"; /* assign type code value*/
      KUZREC.KUZBFCD = " "; /* assign "after" code*/
      KUZREC.XXXTBLNM = "VCUSAP01";
                                   /* move tbl name to audit rec*/
      KUZREC.XXXUSER = COMMAREA.CAUSERID; /* move user id to audit rec*/
      KUZREC.KUCCOID = VCUSAP01.KUCCOID; /* move co id to audit rec*/
      KUZREC.KUMSTRID = VCUSAP01.KUMSTRID;
                                   /* move store id to audit rec*/
      KUZREC.XNXCD = 0;
                                   /* move 0 TO DEPT*/
      KUZREC.KUZDATA = VCUSAP01.VCUSAP01-RECORD-GROUP; /* MOVE GRP DA*/
      if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
        KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
        KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
        KM0S-ADD-AUDT-RECD();
      else
        KUZREC.KUZSSEQ = 0;
        KUZREC.KUZLEN = 0;
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "KM0S   ";
        TA1REC.TA1LOCAT[1] = "KM0S-DEL-";
        TA1REC.TA1LOCAT[2] = "KIZTBL   ";
        TA1REC.TA1LOCAT[3] = "VCUSAP01 ";
        TA1REC.TA1MAP = "KM0SM001";
        TA1REC.TA1DBASE = "DCUST.";
        TA1REC.TA1TBLVU = "VCUSAP01";
        TA1TBLKE = "TABLE NOT FOUND";
        call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
      end

      /* TCS CHANGE 12/21/2001 END    ADD AUDIT RECORD*/
      return; /* Return to previous process*/
    else
      converseLib.validationFailed(481); /* Invalid SAP number*/
      return; /* Return to previous process*/
    end

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  move SQLCA to ERRSQLCA withV60Compat;

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(478); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(477); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "KM0S-DEL-VCUSAP01    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "KM0S"; /* Program number*/
  TA1REC.TA1DBASE = "DCUST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUSAP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCUSAP01.VCUSAP01-KEY; /* Table key*/

  call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end KM0S-DEL-VCUSAP01

// Select VCUSAP01
Function KM0S-DUP-VCUSAP01()
  /* * KM0S-DUP-VCUSAP01*/
  /* * SELECT ROW FROM DCUST.VCUSAP01 USING COMPANY, STORE AND DEPT=0.*/
  /* * IF FOUND, A ROW ALREADY EXISTS FOR THE STORE, AND THE UPDATE*/
  /* * TO THE SAP NUMBER SHOULD NOT BE DONE BECAUSE THE RESULT WILL BE*/
  /* * A DUPLICATE ON COMPANY AND STORE, WHICH CAN CAUSE PROCESSING*/
  /* * ERRORS WHEN DOING SELECTS LATER. SHOW ERROR MESSAGE.*/
  /*  */
  KM0SW01.KM0SW-VCUSAP01-COPY = VCUSAP01-RECORD-GROUP;
  /*  */
  set VCUSAP01 empty;

  VCUSAP01.KUCCOID = KM0SM010.KUCCOID;
  VCUSAP01.KUMSTRID = KM0SM010.KUMSTRID;
  VCUSAP01.XNXCD = 0;

  try
    call "VCUSAP01" ("SB", SQLCA, VCUSAP01) {isNoRefresh = yes, isExternal = yes};
  end /* Select record*/

  /* ------------------------------------------------------------*/
  /* IF NOT SUCCESSFUL, SHOW ERROR MESSAGE*/
  /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
  )                                 
    if (SQLCA.VAGen_SQLCODE == 0)
      if (KM0SM010.CU-SAP-ACCT-ID == VCUSAP01.CU-SAP-ACCT-ID)
        KM0SW01.KM0SW-SKIP-CUSAP-UPDT = "Y";
        VCUSAP01-RECORD-GROUP = KM0SW01.KM0SW-VCUSAP01-COPY;
   /* *TCS CHANGE BEGIN - 12/20/01*/
        if (KM0SM010.RESENDFL == "Y")
          KM0S-DEL-VCUSAP01();
          KM0S-ADD-VCUSAP01();
          KM0SM010.RESENDFL = "N";
        end
   /* *TCS CHANGE END - 12/20/01*/
        return;
      else
        if (KM0SW01.KM0SW-DUP-SAP-OVRD-FL == "Y"
         && converseVar.eventKey is pf12)
          /* UPDATE COMPANY-ID ON THE OLD SAP ROW TO 9777777 AND CONTINUE*/
          /* WITH THE STORE UPDATE. OTHERWISE, SHOW WARNING MESSAGE*/
          KM0S-DEL-VCUSAP01();
          VCUSAP01.KUCCOID = 9777777;
          VCUSAP01.KUMSTRID = KUMREC.KUMSTRID;
          KM0S-ADD-VCUSAP01();
          KM0SW01.KM0SW-DUP-SAP-OVRD-FL = "N";


        else
          KM0SW01.KM0SW-REPLACE-SAP-LIT = "PRESS PF12 AGAIN TO REPLACE SAP ACCT ";
          KM0SW01.KM0SW-REPLACE-SAP-ACCT-ID = VCUSAP01.CU-SAP-ACCT-ID;
          KM0SM010.KM0SMMSG = KM0SW01.KM0SW-REPLACE-SAP-MSG;

          KM0SW01.KM0SWDOE = "N"; /* move "no" to do-edits-flag*/
          /* MOVE -1 TO KM0SW01.KM0SWLSI; /* hose up last store id*/
          set KM0SM010.CU-SAP-ACCT-ID cursor, modified, bold;
          converseLib.validationFailed(485); /* UPDATE WOULD CAUSE DUPLICATE ROW*/
          /* MOVE VCUSAP01.CU-SAP-ACCT-ID TO KM0SM010.CU-SAP-ACCT-ID;*/
          /* MOVE VCUSAP01.CU-SAP-ACCT-ID TO KM0SW01.CU-SAP-ACCT-ID;*/
        end
        VCUSAP01-RECORD-GROUP = KM0SW01.KM0SW-VCUSAP01-COPY;
        return; /* Return to previous process*/
      end
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        VCUSAP01-RECORD-GROUP = KM0SW01.KM0SW-VCUSAP01-COPY;
        return; /* Return to previous process*/
      end
    end

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  move SQLCA to ERRSQLCA withV60Compat;

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(478); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(477); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "KM0S-DUP-VCUSAP01    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "KM0S"; /* Program number*/
  TA1REC.TA1DBASE = "DCUST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUSAP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCUSAP01.VCUSAP01-KEY; /* Table key*/

  call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end KM0S-DUP-VCUSAP01

// Select VCUSAP01
Function KM0S-SEL-VCUSAP01()
  /* * KM0S-SEL-VCUSAP01*/
  /* * SELECT ROW FROM DCUST.VCUSAP01*/
  /*  */
  set VCUSAP01 empty;

  if (KM0SW01.KM0SW-ENTERED-SAP-ACCT == "Y")
    VCUSAP01.CU-SAP-ACCT-ID = KM0SM010.CU-SAP-ACCT-ID;

    try
      call "VCUSAP01" ("S ", SQLCA, VCUSAP01) {isNoRefresh = yes, isExternal = yes};
    end /* Select record*/

  else
    VCUSAP01.KUCCOID = KM0SM010.KUCCOID;
    VCUSAP01.KUMSTRID = KM0SM010.KUMSTRID;
    VCUSAP01.XNXCD = 0;

    try
      call "VCUSAP01" ("SB", SQLCA, VCUSAP01) {isNoRefresh = yes, isExternal = yes};
    end /* Select record*/

  end

  /* ------------------------------------------------------------*/
  /* IF NOT SUCCESSFUL, SHOW ERROR MESSAGE*/
  /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
  )                                 
    if (SQLCA.VAGen_SQLCODE == 0)

      if (KM0SW01.KM0SW-ENTERED-SAP-ACCT == "N")
        KM0SM010.CU-SAP-ACCT-ID = VCUSAP01.CU-SAP-ACCT-ID;
        KM0SW01.CU-SAP-ACCT-ID = VCUSAP01.CU-SAP-ACCT-ID;
      else
        KM0SW01.KM0SW-FROM-CUST-IS-NIL = "Y";
        if (VCUSAP01.KUCCOID == 9777777)
           /* next sentence*/
        else
  /* TCS CHANGE BEGIN 12/20/2001*/
  /* KM0SS-SEL-VCMPNY01;*/
  /* IF KM0SW01.KM0SW-FROM-CUST-IS-NIL = 'N';*/
  /* MOVE 'N' TO KM0SW01.KM0SWDOE;/* move "no" to do-edits-flag*/
  /* MOVE -1 TO KM0SW01.KM0SWLSI;/* hose up last store id*/
  /* SET KM0SM010.CU-SAP-ACCT-ID CURSOR,MODIFIED,BRIGHT;*/
  /* MOVE 481 TO EZEMNO;    /* Invalid SAP number*/
  /* END;*/
  /* TCS CHANGE END   12/20/2001*/
        end
      end

      return; /* Return to previous process*/
    else
  /* TCS CHANGE BEGIN 12/20/2001*/
      if (SQLCA.VAGen_SQLCODE == 100)
        if (KM0SW01.KM0SW-ENTERED-SAP-ACCT == "Y")
          set KM0SM010.CU-SAP-ACCT-ID cursor, modified, bold;
          converseLib.validationFailed(481); /* Invalid SAP number*/
        end
        return; /* Return to previous process*/
  /* TCS CHANGE END   12/20/2001*/
      end
    end

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  move SQLCA to ERRSQLCA withV60Compat;

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(478); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(477); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "KM0S-SEL-VCUSAP01    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "KM0S"; /* Program number*/
  TA1REC.TA1DBASE = "DCUST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUSAP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VCUSAP01.VCUSAP01-KEY; /* Table key*/

  call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end KM0S-SEL-VCUSAP01

// init basic store screen
Function KM0S015()


   /* *************************************************************/
   /* *****     i n i t i a l   s t o r e    c h a n g e     ******/
   /* *****                p r o c e s s i n g               ******/
   /* *************************************************************/


  XSENTRY();

  XSSEGTR(); /* set segmented trans id*/

   /* ****** initiaize all records used by this application *******/
  KM0SS-INIT-RECS();

   /* *************************************************************/
  set KM0SM010 initial; /* initialize screen*/
                                 /* ;*/
  KM0SW01.KM0SWDOE = "N"; /* initialize do-edits-flag to "no"*/
                                 /* ;*/
  KM0SW01.KM0SWGRP = COMMAREA.CAUSERA;
  if (COMMAREA.CAITEM != " ")
    KM0SW01.KM0SWGRP = COMMAREA.CAITEM;
  end
                                 /* ; move data to work rec*/
  if (KM0SW01.KM0SWCID-CHAR is numeric)
    KM0SM010.KUCCOID = KM0SW01.KM0SWCID;
  else
    KM0SW01.KM0SWCID = 0;
    KM0SM010.KUCCOID = 0;
  end
                                 /* ; move company id passed*/
  if (KM0SW01.KM0SWSID-CHAR is numeric)
    KM0SM010.KUMSTRID = KM0SW01.KM0SWSID;
  else
    KM0SW01.KM0SWSID = 0;
    KM0SM010.KUMSTRID = 0;
  end

  if (KM0SW01.CU-SAP-ACCT-ID != " ")
    KM0SM010.CU-SAP-ACCT-ID = KM0SW01.CU-SAP-ACCT-ID;
  else
    KM0SW01.CU-SAP-ACCT-ID = " ";
    KM0SM010.CU-SAP-ACCT-ID = " ";
  end
                                 /* ; move store id passed*/
  KM0SW01.KM0SWLCI = -1; /* initialize last-co-id*/
  KM0SW01.KM0SWLSI = -1; /* initialize last-store-id*/





end // end KM0S015

// read company record
Function KM0S016()


   /* *************************************************************/
   /* *****     r e a d    c o m p a n y    r e c o r d      ******/
   /* *************************************************************/

  set KUCREC empty; /* initialize company record*/

   /* ******** move key to record  *************/
  KUCREC.KUCCOID = KM0SW01.KM0SWCID;

   /* ******** move keys to map ****************/
  KM0SM010.KUCCOID = KM0SW01.KM0SWCID;
  KM0SM010.KUMSTRID = KM0SW01.KM0SWSID;
  KM0SM010.CU-SAP-ACCT-ID = KM0SW01.CU-SAP-ACCT-ID;

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
                                 /* ;call io mod to get store rec*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if return code not okay*/
    KM0SW01.KM0SWDOE = "N"; /* move "no" to do-edits-flag*/
    KM0SW01.KM0SWLCI = -1; /* hose up last-co-id*/
    if (SQLCA.VAGen_SQLCODE == 100) /* if return code = "not found"*/
      converseLib.validationFailed(25); /* error "cmpny does not exist"*/
      set KM0SM010.KUCCOID cursor, bold;
    else /* else(return code not 100)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
      TA1REC.TA1PGMNM = "KM0S016 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "KM0SM010";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VCMPNY01"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KUCREC.KUCCOID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                  /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                  /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      XSPF4(); /* return to main menu*/
    end /* end of "if" statement*/
  else /* else(return code okay)*/
    KM0SW01.KM0SWLCI = KM0SW01.KM0SWCID;
                                 /* ;  save company-id*/
  end /* end of "if" statement*/


  if (KUCREC.XAUCD in XAUTBL.XAUCD)
    if (XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KM0SW01.XATCD = XAUTBL.XATCD[sysVar.arrayIndex];
    else
      KM0SW01.XATCD = " ";
    end
  else
    KM0SW01.XATCD = " ";
  end

  if (KM0SW01.XATCD == "08")
    if (COMMAREA.CADLVL[1] == "Y")
      /* next sentence*/
    else
      KM0SW01.KM0SWDOE = "N"; /* move "no" to do-edits-flag*/
      KM0SW01.KM0SWLCI = -1; /* hose up last-co-id*/
      converseLib.validationFailed(272); /* not auth to maing*/
      set KM0SM010.KUCCOID cursor, bold;
    end
  else
    if (KM0SW01.XATCD == "03")
      if (COMMAREA.CADLVL[2] == "Y")
        /* next sentence*/
      else
        KM0SW01.KM0SWDOE = "N"; /* move "no" to do-edits-flag*/
        KM0SW01.KM0SWLCI = -1; /* hose up last-co-id*/
        converseLib.validationFailed(272); /* not auth to maing*/
        set KM0SM010.KUCCOID cursor, bold;
      end
    else
      if (COMMAREA.CADLVL[1] == "Y"
       || COMMAREA.CADLVL[2] == "Y")
        KM0SW01.KM0SWDOE = "N"; /* move "no" to do-edits-flag*/
        KM0SW01.KM0SWLCI = -1; /* hose up last-co-id*/
        converseLib.validationFailed(272); /* not auth to maing*/
        set KM0SM010.KUCCOID cursor, bold;
      end
    end
  end
                    /* Edit for Nike Canada User*/

  if (KUCREC.XLECD == "03")
    if (COMMAREA.CADLVL[3] == "Y")
      /* next sentence*/
    else
      KM0SW01.KM0SWDOE = "N"; /* move "no" to do-edits-flag*/
      KM0SW01.KM0SWLCI = -1; /* hose up last-co-id*/
      converseLib.validationFailed(272); /* not auth to maing*/
      set KM0SM010.KUCCOID cursor, bold;
    end
  else
    if (COMMAREA.CADLVL[3] == "Y")
      KM0SW01.KM0SWDOE = "N"; /* move "no" to do-edits-flag*/
      KM0SW01.KM0SWLCI = -1; /* hose up last-co-id*/
      converseLib.validationFailed(272); /* not auth to maing*/
      set KM0SM010.KUCCOID cursor, bold;
    end
  end


end // end KM0S016

// read store record
Function KM0S017()


   /* *************************************************************/
   /* *****       r e a d    s t o r e    r e c o r d        ******/
   /* *************************************************************/


  set KUMREC empty; /* initialize store record*/

   /* ******** move keys to record  *************/
  KUMREC.KUCCOID = KUCREC.KUCCOID;
  KUMREC.KUMSTRID = KM0SW01.KM0SWSID;

   /* ******** move keys to map *****************/
  KM0SM010.KUCCOID = KM0SW01.KM0SWCID;
  KM0SM010.KUMSTRID = KM0SW01.KM0SWSID;
  KM0SM010.CU-SAP-ACCT-ID = KM0SW01.CU-SAP-ACCT-ID;


  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
                                 /* ;call io mod to get store rec*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if return code not okay*/
    KM0SW01.KM0SWDOE = "N"; /* move "no" to do-edits-flag*/
    KM0SW01.KM0SWLSI = -1; /* hose up last store id*/
    if (SQLCA.VAGen_SQLCODE == 100) /* if return code = "not found"*/
      converseLib.validationFailed(26); /* error "store does not exist"*/
      set KM0SM010.KUMSTRID cursor, bold; /* highlight errors{*/
    else /* else(return code not 100)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
      TA1REC.TA1PGMNM = "KM0S017 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "KM0SM010";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VSTORE01"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KM0SM010.KUCCOID;
      KUWREC.KUMSTRID = KM0SM010.KUMSTRID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                  /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                  /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      XSPF4(); /* return to main menu*/
    end /* end of "if" statement*/
  else /* else(return code okay)*/
    KM0SW01.KM0SWDOE = "Y"; /* move "yes" to do-edits-flag*/
    KM0SW01.KM0SWLSI = KM0SW01.KM0SWSID;
  end /* end of "if" statement*/

   /* determine if this is a NIL customer*/
  if (KM0SM010.KUCCOID != 0)
    KM0SS-SEL-VDSTRB01();
  end

  if (KM0SM010.KUCCOID == 0
   || KM0SW01.KM0SW-NIL-CUST-IND == "N")
     /* next sentence - do not process the SAP account*/
  else

    if (KM0SM010.CU-SAP-ACCT-ID == " ")
      KM0SW01.KM0SW-ENTERED-SAP-ACCT = "N";
      KM0S-SEL-VCUSAP01();
      KM0SM010.CU-SAP-ACCT-ID = VCUSAP01.CU-SAP-ACCT-ID;
    else
      KM0SW01.KM0SW-ENTERED-SAP-ACCT = "Y";
      KM0S-SEL-VCUSAP01();
    end
  end

end // end KM0S017

// format screen
Function KM0S018()


   /* *************************************************************/
   /* *****           f o r m a t    s c r e e n             ******/
   /* *************************************************************/

   /* *************************************************************/

    /* Maintenance History:*/
    /* 10-11-91 CHELLM Added CU-OFSHR-FL*/

   /* *************************************************************/


  set KM0SM010 initial; /* clear screen*/
  KM0SW01.KM0SWUPD = "N"; /* initialize update flag to 'no'*/

  KM0SM010.KM0SMDT = VGVar.currentShortGregorianDate; /* move date to map*/

   /* ****** move data to screen ************/
   /* added xidcd 3-18*/

  KM0SM010.KUCCOID = KM0SW01.KM0SWCID;
  KM0SM010.KUCCONM = KUCREC.KUCCONM;
  KM0SM010.KUCCOANM = KUCREC.KUCCOANM;
  KM0SM010.KUMSTRID = KM0SW01.KM0SWSID;
  KM0SM010.CU-SAP-ACCT-ID = KM0SW01.CU-SAP-ACCT-ID;
  KM0SM010.KUMSTRNM = KUMREC.KUMSTRNM;
  KM0SM010.KUMPHN = KUMREC.KUMPHN;
  KM0SM010.XXXFAX = KUMREC.XXXFAX;
  KM0SM010.XXXSTAT = KUMREC.XXXSTAT;
  KM0SM010.KUMSLFID = KUMREC.KUMSLFID;
  KM0SM010.KUMDMIND = KUMREC.KUMDMIND;
  KM0SM010.CU-OFSHR-FL = KUMREC.CU-OFSHR-FL;
  KM0SM010.KUMDCIND = KUMREC.KUMDCIND;
  KM0SM010.KUMNRSVC = KUMREC.KUMNRSVC;
  KM0SM010.YSVCD = KUMREC.YSVCD;
  KM0SM010.XCFCD = KUMREC.XCFCD;
  KM0SM010.KUMXNIAP = KUMREC.KUMXNIAP;
  KM0SM010.KUMXNIFT = KUMREC.KUMXNIFT;
  KM0SM010.KUMRQRWF = KUMREC.KUMRQRWF;
  KM0SM010.KUMRQLBF = KUMREC.KUMRQLBF;
  KM0SM010.KUMRQDSF = KUMREC.KUMRQDSF;
  KM0SM010.KUMRQPKF = KUMREC.KUMRQPKF;
  KM0SM010.XIDCD = KUMREC.XIDCD;

  KM0SW01.KM0SWNDX = 1;
  while (KM0SW01.KM0SWNDX <= 3) /* loop thru all gpc's and warehouses*/
    KM0SM010.XGPCD[KM0SWNDX] = KUMREC.XGPCD[KM0SWNDX];
    KM0SM010.XWHCD[KM0SWNDX] = KUMREC.XWHCD[KM0SWNDX];
                                 /* ;*/
    if (KM0SM010.XWHCD[KM0SWNDX] != " ")
                                 /* ;  if gpc code not blank*/
      if (KM0SM010.XWHCD[KM0SWNDX] in XWHTBL.XWHCD)
        KM0SM010.XWHNM[KM0SWNDX] = XWHTBL.XWHNM[sysVar.arrayIndex];
      end
                                 /* ;    retrieve warehouse name*/
    end /* end of "if" statement*/
                                 /* ;*/
    if (KM0SM010.XGPCD[KM0SWNDX] != " ")
                                 /* ;  if gpc code not blank*/
      if (KM0SM010.XGPCD[KM0SWNDX] in XGPTBL.XGPCD)
        KM0SM010.XGPABRV[KM0SWNDX] = XGPTBL.XGPABRV[sysVar.arrayIndex];
      end
                                 /* ;    retrieve gpc decode*/
    end /* end of "if" statement*/
                                 /* ;*/
    KM0SW01.KM0SWNDX = KM0SW01.KM0SWNDX + 1;
                                 /* ;  increment index by 1*/
  end /* end of "while" loop*/
                                 /* ;*/
  KM0SW01.KM0SWFST = "Y"; /* initialize first time thru to 'y'*/





end // end KM0S018

// converse basic store screen
Function KM0S020()


   /* *************************************************************/
   /* *****    c o n v e r s e    c h a n g e   s t o r e    ******/
   /* *****                    s c r e e n                   ******/
   /* *************************************************************/



  if (COMMAREA.CACLVL[4] == "Y")
    KM0SS04(); /* security check field grp 4*/
  else
    KM0SS01(); /* security check field grp 1*/
    KM0SS02(); /* security check field grp 2*/
    KM0SS03(); /* security check field grp 3*/
  end

  if (KM0SW01.KM0SW-NIL-CUST-IND == "N")
    KM0SM010.CU-SAP-ACCT-ID = " ";
    set KM0SM010.KM0SM-SAP-ACCT-LIT invisible, protect;
    set KM0SM010.CU-SAP-ACCT-ID invisible, protect;
  else
    KM0SW01.KM0SW-PREV-SAP-ACCT = KM0SM010.CU-SAP-ACCT-ID;
    KM0SW01.KM0SW-PREV-CO-ID = KM0SM010.KUCCOID;
    KM0SW01.KM0SW-PREV-STOR-ID = KM0SM010.KUMSTRID;
  end
  if (KM0SW01.KM0SW-DUP-SAP-OVRD-FL == "N"
   && converseVar.validationMsgNum == 485)
    KM0SW01.KM0SW-DUP-SAP-OVRD-FL = "Y";
  else
    KM0SW01.KM0SW-DUP-SAP-OVRD-FL = "N";
  end

  converse KM0SM010 ;


  set KM0SM010.KUMSTRNM cursor; /* initialize cursor position*/
                                 /* ;*/
  KM0SSPF(); /* check standard entry keys*/
                                 /* ;*/
  if (KM0SM010 is modified /* if any fields changed*/
   || converseVar.eventKey is pf12)
    KM0SW01.KM0SWUPD = "Y"; /* set update flag to 'yes'*/
  end /* end of "if" statement*/


  KM0SM010.VAGen_EZEMSG = " "; /* clear out message line*/
  KM0SM010.KM0SMMSG = " "; /* clear out message line*/


  KM0SS00(); /* set modified fields modified*/


   /* --------   check for fastpath  --------------*/

  set KM0SM010.CATOAP initialAttributes; /* initialize attribute*/
  if (KM0SM010.CATOAP > " ") /* if fastpath requested*/
    if (converseVar.eventKey is enter) /* if enter was pressed*/
      COMMAREA.CATOAP = KM0SM010.CATOAP;
      COMMAREA.CAITEM = KM0SM010.CAITEM;
      COMMAREA.CAUSERA = " ";
      XSEXIT(); /* check security/xfer*/
      KM0SM010.KM0SMMSG = COMMAREA.CAMSG; /* security failed*/
      COMMAREA.CATOAP = " "; /* clear out to app from commarea*/
      converseLib.validationFailed(41); /* error "unauthorized"*/
      exit stack; /* goto flow*/
    else /* else(pf12 was not pressed)*/
      converseLib.validationFailed(90); /* error "cannot fastpath & pf12"*/
      set KM0SM010.CATOAP cursor, bold; /* highlight field in error*/
    end /* end of "if" statement*/
  else /* fast path not requested*/
    /* next sentence                ;   okay*/
  end /* end of "if" statement*/

   /* ---------  check if new id request  --------------*/

  if (converseVar.validationMsgNum == 0) /* if no previous errors*/
    if (KM0SM010.KUCCOID != KM0SW01.KM0SWLCI
     || KM0SM010.KUMSTRID != KM0SW01.KM0SWLSI)
                                 /* ;  if keys changed*/
      /* next sentence              ;    skip editing of this screen*/
    else /* else(id's same as before)*/
      if (KM0SW01.KM0SWDOE == "Y") /* if do-edits-flag = 'yes'*/
        KM0SS10(); /* edit fields on screen*/
      else /* else(do-edits-flag not = 'yes')*/
        /* next sentence            ;      skip screen editing*/
      end /* end of "if" statement*/
    end /* end of "if" statement*/
  else /* else(previous errors*/
    /* next sentence                ;  skip editing*/
  end /* end of "if" statement*/

   /* would have preferred to do this in the flow for this process*/
   /* but could not access the flow*/
   /* synchronize ws with value found in KM0SM010.CU-SAP-ACCT-ID*/


   /* determine if this is a NIL customer*/
  if (KM0SM010.KUCCOID != 0)
    KM0SS-SEL-VDSTRB01();
  end

  if (KM0SM010.KUCCOID == 0
   || KM0SW01.KM0SW-NIL-CUST-IND == "N")
     /* next sentence - do not process the SAP account*/
  else

    if (KM0SM010.KUCCOID != KM0SW01.KM0SW-PREV-CO-ID
     || KM0SM010.KUMSTRID != KM0SW01.KM0SW-PREV-STOR-ID)
      if (KM0SM010.CU-SAP-ACCT-ID == KM0SW01.KM0SW-PREV-SAP-ACCT)
        KM0SM010.CU-SAP-ACCT-ID = " ";
        VCUSAP01.CU-SAP-ACCT-ID = " ";
        KM0SW01.CU-SAP-ACCT-ID = " ";
      end
    end

    /* CHECK FOR POSSIBLE DUPLICATE IF VCUSAP01 GETS UPDATED*/
    /* IF KM0SM010.CU-SAP-ACCT-ID NE ' ';*/
     /* PERFORM KM0S-DUP-VCUSAP01;*/
     /* IF EZEMNO = 485;*/
       /* ;/* NEXT SENTENCE*/
     /* END;*/
    /* END;*/

  /* TCS CHANGE BEGIN   12/20/2001*/
    /* IF KM0SM010.CU-SAP-ACCT-ID = ' ';*/
    /* MOVE ' ' TO VCUSAP01.CU-SAP-ACCT-ID;*/
    /* MOVE ' ' TO KM0SW01.CU-SAP-ACCT-ID;*/
    /* ELSE;*/
    /* IF KM0SM010.CU-SAP-ACCT-ID = KM0SW01.CU-SAP-ACCT-ID;*/
    /* ;/* NEXT SENTENCE*/
    /* ELSE;*/
    /* END;*/
  /* TCS CHANGE END     12/20/2001*/
  end

end // end KM0S020

// update store record
Function KM0S030()
   /* will need to maintain customer behind the scene*/
   /* until july database changes*/
   /* *************************************************************/
   /* *****     u p d a t e    s t o r e    r e c o r d      ******/
   /* *************************************************************/

    /* Maintenance History:*/
    /* 10-11-91 CHELLM Added CU-OFSHR-FL*/

   /* *************************************************************/

   /* CHECK FOR POSSIBLE DUPLICATE IF VCUSAP01 GETS UPDATED*/
  KM0SW01.KM0SW-SKIP-CUSAP-UPDT = "N";
  if (KM0SW01.KM0SW-NIL-CUST-IND == "Y"
   && KM0SM010.CU-SAP-ACCT-ID != " ")
    KM0S-DUP-VCUSAP01();
    if (converseVar.validationMsgNum == 485)
      return;
    end
  end

  if (KM0SW01.KM0SWUPD == "Y") /* if update flag equal 'yes'*/
    KM0SW01.KM0SWBEF = KUMREC.KUMGRP;
                                 /* ;  save before image if store*/
    /* ******* get system date and time ********/
    XX0XS01();
    KUMREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KUMREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

    /* ***** move data from screen to record ******/
    KUMREC.KUCCOID = KM0SM010.KUCCOID;
    KUMREC.KUMSTRID = KM0SM010.KUMSTRID;
    KUMREC.KUMSTRNM = KM0SM010.KUMSTRNM;
    KU0XW30.KU0XW3GP = KM0SM010.KUMSTRNM;
    call "KU0X" (KU0XW30, KU0XW10) {isNoRefresh = yes};
    KUMREC.KUMSTSNM = KU0XW10.KU0XW1GP;
    KUMREC.KUMPHN = KM0SM010.KUMPHN;
    KUMREC.XXXFAX = KM0SM010.XXXFAX;
    KUMREC.XXXSTAT = KM0SM010.XXXSTAT;
    KUMREC.KUMSLFID = KM0SM010.KUMSLFID;
    KUMREC.KUMDMIND = KM0SM010.KUMDMIND;
    KUMREC.CU-OFSHR-FL = KM0SM010.CU-OFSHR-FL;
    KUMREC.KUMDCIND = KM0SM010.KUMDCIND;
    KUMREC.KUMNRSVC = KM0SM010.KUMNRSVC;
    KUMREC.YSVCD = KM0SM010.YSVCD;
    KUMREC.XCFCD = KM0SM010.XCFCD;
    KUMREC.KUMXNIAP = KM0SM010.KUMXNIAP;
    KUMREC.KUMXNIFT = KM0SM010.KUMXNIFT;
    KUMREC.KUMRQRWF = KM0SM010.KUMRQRWF;
    KUMREC.KUMRQLBF = KM0SM010.KUMRQLBF;
    KUMREC.KUMRQDSF = KM0SM010.KUMRQDSF;
    KUMREC.KUMRQPKF = KM0SM010.KUMRQPKF;
    KUMREC.XIDCD = KM0SM010.XIDCD;

    KM0SW01.KM0SWNDX = 1;
    while (KM0SW01.KM0SWNDX <= 3) /* loop thru all gpc's and warehouses*/
      KUMREC.XGPCD[KM0SWNDX] = KM0SM010.XGPCD[KM0SWNDX];
      KUMREC.XWHCD[KM0SWNDX] = KM0SM010.XWHCD[KM0SWNDX];
      KM0SW01.KM0SWNDX = KM0SW01.KM0SWNDX + 1;
                                 /* ;    increment index*/
    end /* end of "while" loop*/
                                 /* ;*/
    KM0SS30(); /* update store record*/

    /* ALSO UPDATE VCUSAP01 ROW IF COMPANY OR STORE HAS CHANGED*/
    /* THIS WOULD HAPPEN IF THE CU-SAP-ACCT-ID WAS ENTERED, AND THE*/
    /* COMPANY AND STORE IS STILL SET TO THE VALUE LOADED BY THE*/
    /* SAP/GOAL LINK PROGRAMS (IT2010).*/


    if (KM0SM010.KUCCOID == 0
     || KM0SW01.KM0SW-NIL-CUST-IND == "N"
     || KM0SW01.KM0SW-SKIP-CUSAP-UPDT == "Y")
      /* next sentence - do not process the SAP account*/
    else

      KM0S-DEL-VCUSAP01();
      VCUSAP01.KUCCOID = KUMREC.KUCCOID;
      VCUSAP01.KUMSTRID = KUMREC.KUMSTRID;
      KM0S-ADD-VCUSAP01();
    end
  end
                                 /* ;*/
  if (converseVar.validationMsgNum == 0) /* if update went okay*/
    converseLib.validationFailed(29); /* message "store record updated"*/
  else /* else(update flag equal 'no')*/
      /* next sentence                ;  skip update*/
  end /* end of "if" statement*/

end // end KM0S030

// add a line on the parm table
Function KM0SS-ADD-VPARM101()
  /* * KM0S-ADD-VPARM101*/
  /* * INSERT AN NIL CUSTOMER SAP CHANGE TRANSACTION TO THE VPARM101 TABLE*/
  /*  */
  set XZZREC empty;

  XZZREC.XZZQRYID = "IT2010";
  KM0SW01.KM0SW-SAP-TEN-CHAR = VCUSAP01.CU-SAP-ACCT-ID;
  XZZREC.XZZ4CHR1 = KM0SW01.KM0SW-SAP-FOUR-CHAR;
  XZZREC.XZZ6CHR = KM0SW01.KM0SW-SAP-SIX-CHAR;
   /* TCS CHANGE  12/21/2001 BEGIN*/
  XZZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  XZZREC.ZZZSTM = XX0XW01.XX0XWTIM;
   /* TCS CHANGE  12/21/2001 END*/

  try
    call "IO1000" ("A ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select record*/

  /* ------------------------------------------------------------*/
  /* IF NOT SUCCESSFUL, SHOW ERROR MESSAGE*/
  /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0)
      return; /* Return to previous process*/
    end
  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  move SQLCA to ERRSQLCA withV60Compat;

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(478); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(477); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "KM0S-ADD-VPARM101    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "KM0S"; /* Program number*/
  TA1REC.TA1DBASE = "DCUST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
  TA1REC.TA1DBASE = "DCUST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/
  TA1REC.TA1TBLKE = KM0SW01.KM0SW-SAP-TEN-CHAR; /* Table key*/

  call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

                                   /* Exit to display map*/


end // end KM0SS-ADD-VPARM101

// Init records
Function KM0SS-INIT-RECS()
  /* ****************************************************************/
  /* *            Initialize all records used by KM0S*/
  /* ****************************************************************/

  set KUCREC empty;
  set KUMREC empty;
  set KUNREC empty;
  set KUYREC empty;
  set KM0SW01 empty;
  set XA0AW02 empty;
  set SQLCA empty;
  set TA1REC empty;
  set XX0XW01 empty;
  set KU0XW10 empty;
  set KU0XW30 empty;
  set KUWREC empty;

  KM0SW01.KM0SWCID = 0;
  KM0SW01.KM0SWSID = 0;
  KM0SW01.KM0SWDID = 0;
  KM0SW01.CU-SAP-ACCT-ID = " ";

end // end KM0SS-INIT-RECS

// select for cust on distrib tbl
Function KM0SS-SEL-VDSTRB01()
  /* * KM0S-SEL-VDSTRB01*/
  /* * SELECT ROW FROM DCUST.VDSTRB01*/
  /*  */
  set VDSTRB01 empty;

  VDSTRB01.KUCCOID = KM0SM010.KUCCOID;

  try
    call "IO4600" ("S ", SQLCA, VDSTRB01) {isNoRefresh = yes, isExternal = yes};
  end /* Select record*/

  /* ------------------------------------------------------------*/
  /* IF NOT SUCCESSFUL, SHOW ERROR MESSAGE*/
  /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
  )                                 
    if (SQLCA.VAGen_SQLCODE == 0)
      KM0SW01.KM0SW-NIL-CUST-IND = "Y";
      return; /* Return to previous process*/
    else
      KM0SW01.KM0SW-NIL-CUST-IND = "N";
      return; /* Return to previous process*/
    end

  end

  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  move SQLCA to ERRSQLCA withV60Compat;

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(478); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(477); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "KM0S-SEL-VDSTRB01    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "KM0S"; /* Program number*/
  TA1REC.TA1DBASE = "DNILO  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDSTRB01"; /* Table view name*/
  TA1REC.TA1DBASE = "DNILO  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDSTRB01"; /* Table view name*/
  KM0SW01.KM0SW-NUM-CU-CO-ID = VDSTRB01.KUCCOID;
  TA1REC.TA1TBLKE = KM0SW01.KM0SW-CHAR-CU-CO-ID; /* Table key*/

  call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

                                   /* Exit to display map*/


end // end KM0SS-SEL-VDSTRB01

// set modified fields modified
Function KM0SS00()


   /* *************************************************************/
   /* *****      s e t    m o d i f i e d    f i e l d s     ******/
   /* *****                 m o d i f i e d                  ******/
   /* *************************************************************/

   /* *************************************************************/

    /* Maintenance History:*/
    /* 10-11-91 CHELLM Added CU-OFSHR-FL*/

   /* *************************************************************/


  if (KM0SM010.KUCCOID is modified)
    set KM0SM010.KUCCOID modified;
  end
  if (KM0SM010.CU-SAP-ACCT-ID is modified)
    set KM0SM010.CU-SAP-ACCT-ID modified;
  end
  if (KM0SM010.KUMSTRID is modified)
    set KM0SM010.KUMSTRID modified;
  end
  if (KM0SM010.KUMSTRNM is modified)
    set KM0SM010.KUMSTRNM modified;
  end
  if (KM0SM010.KUMPHN is modified)
    set KM0SM010.KUMPHN modified;
  end
  if (KM0SM010.XXXFAX is modified)
    set KM0SM010.XXXFAX modified;
  end
  if (KM0SM010.KUMDMIND is modified)
    set KM0SM010.KUMDMIND modified;
  end
  if (KM0SM010.CU-OFSHR-FL is modified)
    set KM0SM010.CU-OFSHR-FL modified;
  end
  if (KM0SM010.KUMDCIND is modified)
    set KM0SM010.KUMDCIND modified;
  end
  if (KM0SM010.XCFCD is modified)
    set KM0SM010.XCFCD modified;
  end
  if (KM0SM010.KUMNRSVC is modified)
    set KM0SM010.KUMNRSVC modified;
  end
  if (KM0SM010.KUMXNIAP is modified)
    set KM0SM010.KUMXNIAP modified;
  end
  if (KM0SM010.KUMSLFID is modified)
    set KM0SM010.KUMSLFID modified;
  end
  if (KM0SM010.KUMXNIFT is modified)
    set KM0SM010.KUMXNIFT modified;
  end
  if (KM0SM010.YSVCD is modified)
    set KM0SM010.YSVCD modified;
  end
  if (KM0SM010.XXXSTAT is modified)
    set KM0SM010.XXXSTAT modified;
  end
  if (KM0SM010.XIDCD is modified)
    set KM0SM010.XIDCD modified;
  end
  if (KM0SM010.XGPCD[1] is modified)
    set KM0SM010.XGPCD[1] modified;
  end
  if (KM0SM010.XWHCD[1] is modified)
    set KM0SM010.XWHCD[1] modified;
  end
  if (KM0SM010.XGPCD[2] is modified)
    set KM0SM010.XGPCD[2] modified;
  end
  if (KM0SM010.XWHCD[2] is modified)
    set KM0SM010.XWHCD[2] modified;
  end
  if (KM0SM010.XGPCD[3] is modified)
    set KM0SM010.XGPCD[3] modified;
  end
  if (KM0SM010.XWHCD[3] is modified)
    set KM0SM010.XWHCD[3] modified;
  end

end // end KM0SS00

// security check field grp 1
Function KM0SS01()


   /* *************************************************************/
   /* *****      s e c u r i t y    c h e c k    f o r       ******/
   /* *****      f i e l d    g r o u p    1                 ******/
   /* *************************************************************/


  if (COMMAREA.CACLVL[1] != "Y") /* if user cannot change*/

    /* ***** set fields autoskip ******/
    set KM0SM010.KUMDCIND skip;
    set KM0SM010.KUMNRSVC skip;
    set KM0SM010.KUMSLFID skip;
    set KM0SM010.XCFCD skip;
    set KM0SM010.KUMXNIAP skip;
    set KM0SM010.KUMXNIFT skip;
    set KM0SM010.YSVCD skip;
    /* ******************************/

  end /* end of "if" statement*/

end // end KM0SS01

// security check field grp 2
Function KM0SS02()


   /* *************************************************************/
   /* *****      s e c u r i t y    c h e c k    f o r       ******/
   /* *****      f i e l d    g r o u p    2                 ******/
   /* *************************************************************/


  if (COMMAREA.CACLVL[2] != "Y") /* if user cannot change*/

    /* ***** set fields autoskip ******/
    set KM0SM010.KUMRQRWF skip;
    set KM0SM010.KUMRQLBF skip;
    set KM0SM010.KUMRQDSF skip;
    set KM0SM010.KUMRQPKF skip;
    set KM0SM010.XGPCD[1] skip;
    set KM0SM010.XGPCD[2] skip;
    set KM0SM010.XGPCD[3] skip;
    set KM0SM010.XGPABRV[1] skip;
    set KM0SM010.XGPABRV[2] skip;
    set KM0SM010.XGPABRV[3] skip;
    set KM0SM010.XWHCD[1] skip;
    set KM0SM010.XWHCD[2] skip;
    set KM0SM010.XWHCD[3] skip;
    set KM0SM010.XWHNM[1] skip;
    set KM0SM010.XWHNM[2] skip;
    set KM0SM010.XWHNM[3] skip;
    /* ******************************/

  end /* end of "if" statement*/





end // end KM0SS02

// security check field grp 3
Function KM0SS03()
   /* probably need this*/

   /* *************************************************************/
   /* *****      s e c u r i t y    c h e c k    f o r       ******/
   /* *****      f i e l d    g r o u p    3                 ******/
   /* *************************************************************/
   /*  */
   /* *************************************************************/

    /* Maintenance History:*/
    /* 10-11-91 CHELLM Added CU-OFSHR-FL*/

   /* *************************************************************/



  if (COMMAREA.CACLVL[3] != "Y") /* if user cannot change*/

    /* ***** set fields autoskip ******/
    set KM0SM010.KUMSTRNM skip;
    set KM0SM010.XXXSTAT skip;
    set KM0SM010.KUMDMIND skip;
    set KM0SM010.CU-OFSHR-FL skip;
    set KM0SM010.XIDCD skip;
    /* ******************************/

  end /* end of "if" statement*/


  if (COMMAREA.CACLVL[2] == "Y" /* if user cannot change*/
   || COMMAREA.CACLVL[3] == "Y") /* if user cannot change*/
    /* next sentence*/
  else
    set KM0SM010.KUMPHN skip;
    set KM0SM010.XXXFAX skip;
  end


end // end KM0SS03

// security check field grp 2
Function KM0SS04()


   /* *************************************************************/
   /* *****      s e c u r i t y    c h e c k    f o r       ******/
   /* *****      f i e l d    g r o u p    4                 ******/
   /* *************************************************************/


  if (COMMAREA.CACLVL[4] == "Y") /* user can only change phone nbr & fax*/

    /* ***** set fields autoskip ******/
    set KM0SM010.KUMDCIND skip;
    set KM0SM010.KUMNRSVC skip;
    set KM0SM010.KUMSLFID skip;
    set KM0SM010.XCFCD skip;
    set KM0SM010.KUMXNIAP skip;
    set KM0SM010.KUMXNIFT skip;
    set KM0SM010.YSVCD skip;
    set KM0SM010.KUMSTRNM skip;
    set KM0SM010.XXXSTAT skip;
    set KM0SM010.KUMDMIND skip;
    set KM0SM010.CU-OFSHR-FL skip;
    set KM0SM010.XIDCD skip;
    set KM0SM010.KUMRQRWF skip;
    set KM0SM010.KUMRQLBF skip;
    set KM0SM010.KUMRQDSF skip;
    set KM0SM010.KUMRQPKF skip;
    set KM0SM010.XGPCD[1] skip;
    set KM0SM010.XGPCD[2] skip;
    set KM0SM010.XGPCD[3] skip;
    set KM0SM010.XGPABRV[1] skip;
    set KM0SM010.XGPABRV[2] skip;
    set KM0SM010.XGPABRV[3] skip;
    set KM0SM010.XWHCD[1] skip;
    set KM0SM010.XWHCD[2] skip;
    set KM0SM010.XWHCD[3] skip;
    set KM0SM010.XWHNM[1] skip;
    set KM0SM010.XWHNM[2] skip;
    set KM0SM010.XWHNM[3] skip;
    /* ******************************/

  end /* end of "if" statement*/





end // end KM0SS04

// edit fields on screen km0sm010
Function KM0SS10()

   /* *************************************************************/
   /* ***** e d i t    f i e l d s    o n    k m 0 s m 0 1 0 ******/
   /* *************************************************************/

    /* Maintenance History:*/
    /* 10-11-91 CHELLM Added KM0SS1F to edit CU-OFSHR-FL.*/

   /* *************************************************************/



  KM0SW01.KM0SWNDX = 3; /* initialize index to 3*/
  while (KM0SW01.KM0SWNDX >= 1)
                                   /* loop thru warehouse lines on screen*/
    if (KM0SM010.XWHCD[KM0SWNDX] is modified)
                                 /* ;     if warehouse code modified*/
      set KM0SM010.XWHCD[KM0SWNDX] initialAttributes; /* set attributes defined*/
      set KM0SM010.XWHCD[KM0SWNDX] modified; /* set attributes modified*/
      set KM0SM010.XWHNM[KM0SWNDX] initialAttributes; /* set attributes defined*/
      KM0SM010.XWHNM[KM0SWNDX] = " "; /* initialize warehouse name*/
      KM0SS21(); /* edit warehouse*/
    end /* end of "if" statement*/
                                 /* ;*/
    if (KM0SM010.XGPCD[KM0SWNDX] is modified)
                                 /* ;      if gpc code modified*/
      set KM0SM010.XGPCD[KM0SWNDX] initialAttributes; /* set attributes defined*/
      set KM0SM010.XGPCD[KM0SWNDX] modified; /* set attributes modified*/
      set KM0SM010.XGPABRV[KM0SWNDX] initialAttributes; /* set attributes defined*/
      KM0SM010.XGPABRV[KM0SWNDX] = " "; /* initialize gpc decode*/
      KM0SS21(); /* edit warehouse*/
      KM0SS23(); /* edit gpc code*/
      KM0SS2B(); /* edit for duplicate gpc's*/
    end /* end of "if" statement*/
    KM0SW01.KM0SWNDX = KM0SW01.KM0SWNDX - 1;
                                  /* decriment index*/
  end /* end of while loop*/
  if (converseVar.validationMsgNum == 0) /* if no previous errors*/
    KM0SS29(); /* top justify all warehouse lines*/
    KM0SS2A(); /* insure one warehouse entered*/
  end /* end of "if" statement*/






   /* *************************************************************/

  if (KM0SM010.KUMRQRWF is modified /* if field modified*/
   || KM0SM010.KUMRQLBF is modified 
   || KM0SM010.KUMRQDSF is modified 
   || KM0SM010.KUMRQPKF is modified)
    KM0SS1K(); /* edit require flags, xidcd*/
  end /* end of "if" statement*/
                                 /* ;*/
  if (KM0SM010.KUMXNIFT is modified) /* if field modified*/
    KM0SS12(); /* edit nike footwear image codes*/
  end /* end of "if" statement*/
                                 /* ;*/
  if (KM0SM010.KUMXNIAP is modified) /* if field modified*/
    KM0SS1D(); /* edit nike aparel image codes*/
  end /* end of "if" statement*/
                                 /* ;*/
  if (KM0SM010.XCFCD is modified) /* if field modified*/
    KM0SS13(); /* edit customer self image code*/
  end /* end of "if" statement*/
                                 /* ;*/
  if (KM0SM010.YSVCD is modified) /* if field modified*/
    KM0SS14(); /* edit store class code*/
  end /* end of "if" statement*/
                                 /* ;*/
  if (KM0SM010.KUMNRSVC is modified) /* if field modified*/
    KM0SS17(); /* edit nbr of stores serviced*/
  end /* end of "if" statement*/

  if (KM0SM010.KUMDCIND is modified) /* if field modified*/
    KM0SS18(); /* edit distribution center ind*/
  end /* end of "if" statement*/

  if (KM0SM010.KUMDMIND is modified) /* if field modified*/
    KM0SS1J(); /* edit deferred mailing ind*/
  end /* end of "if" statement*/

  if (KM0SM010.CU-OFSHR-FL is modified) /* if field modified*/
    KM0SS1F(); /* edit deferred mailing ind*/
  end /* end of "if" statement*/
                                 /* ;*/
  if (KM0SM010.XIDCD is modified) /* if field modified*/
    KM0SS19(); /* edit invoice distribution ind*/
  end /* end of "if" statement*/
                                 /* ;*/
  if (KM0SM010.KUMSLFID is modified) /* if field modified*/
    KM0SS16(); /* edit customers store number*/
  end /* end of "if" statement*/

  if (KM0SM010.XXXSTAT is modified) /* if field modified*/
    KM0SS1H(); /* edit store status cd*/
  end /* end*/

  if (KM0SM010.KUMPHN is modified /* if field modified*/
   || KM0SM010.XXXFAX is modified) /* if field modified*/
    KM0SS1B(); /* edit store phone number*/
  end /* end of "if" statement*/
                                 /* ;*/
  if (KM0SM010.KUMSTRNM is modified) /* if field modified*/
    KM0SS1C(); /* edit store name*/
  end /* end of "if" statement*/

   /* /TCS CHANGE 12/20 BEGIN - VALIDATE CU-SAP-ID*/
  if (KM0SW01.KM0SW-NIL-CUST-IND == "Y")
    if (KM0SM010.CU-SAP-ACCT-ID == " ")
      set KM0SM010.CU-SAP-ACCT-ID cursor, modified, bold;
      converseLib.validationFailed(481); /* Invalid SAP number*/
    end
    if (KM0SM010.CU-SAP-ACCT-ID is modified)
      KM0SW01.KM0SW-ENTERED-SAP-ACCT = "Y";
      VCUSAP01.CU-SAP-ACCT-ID = KM0SM010.CU-SAP-ACCT-ID;
      KM0SW01.CU-SAP-ACCT-ID = KM0SM010.CU-SAP-ACCT-ID;
      KM0S-SEL-VCUSAP01();
    end
  end
   /* /TCS CHANGE 12/20 END   - VALIDATE CU-SAP-ID*/





end // end KM0SS10

// edit footwear image code
Function KM0SS12()


   /* *************************************************************/
   /* *****        e d i t    f o o t w e a r   i m a g e    ******/
   /* *************************************************************/


  set KM0SM010.KUMXNIFT initialAttributes; /* set field attribute to defined value*/
  set KM0SM010.KUMXNIFT modified; /* set field attribute to modified*/
  if (KM0SM010.KUMXNIFT != " ") /* if footwear image is not blank*/

    if (KM0SM010.KUMXNIFT in XNITBL.XNICD)
                                     /* search table for image cd*/
      /* ***************  check status code of entry  ****************/
      if (XNITBL.XXXSTAT[sysVar.arrayIndex] == "A" /* if status is active*/
       && XNITBL.XGPCD[sysVar.arrayIndex] == "02") /* and gpc 02 (ftwr)*/
        /* next sentence            ;      okay*/
      else /* else(status is active)*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KM0SM010.KUMXNIFT cursor, modified, bold;
                                        /* highlight field in error*/
      end /* end of "if" statement*/
      /* *************************************************************/
    else /* else(image code not found)*/
      converseLib.validationFailed(17); /* error "invalid code"*/
      set KM0SM010.KUMXNIFT cursor, modified, bold;
                                         /* highlight field in error*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/


end // end KM0SS12

// edit customer self image code
Function KM0SS13()


   /* *************************************************************/
   /* *************************************************************/
   /* *****   e d i t    s e l f    i m a g e    c o d e s   ******/
   /* *************************************************************/
   /* *************************************************************/

  set KM0SM010.XCFCD initialAttributes; /* set field attribute to defined*/
  set KM0SM010.XCFCD modified; /* set field attribute to modified*/
  if (KM0SM010.XCFCD != " ") /* if self image is not blank*/
    if (KM0SM010.XCFCD in XCFTBL.XCFCD) /* if self image cd in tbl*/
      /* ***************  check status code of entry  ****************/
      if (XCFTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KM0SM010.XCFCD cursor, modified, bold; /* highlight field in error*/
      else /* else(status is active)*/
        /* next sentence            ;       okay*/
      end /* end of "if" statement*/
      /* *************************************************************/
    else /* else(image code not found)*/
      converseLib.validationFailed(17); /* error "invalid code"*/
      set KM0SM010.XCFCD cursor, modified, bold;
                                   /* highlight field in error*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





end // end KM0SS13

// edit store class code
Function KM0SS14()


   /* *************************************************************/
   /* *************************************************************/
   /* *****       e d i t    s t o r e    c l a s s          ******/
   /* *************************************************************/
   /* *************************************************************/

  set KM0SM010.YSVCD initialAttributes; /* set field attribute to defined*/
  set KM0SM010.YSVCD modified; /* set field attribute to modified*/
  if (KM0SM010.YSVCD != " ") /* if store class is not blank*/
    if (KM0SM010.YSVCD in YSVTBL.YSVCD) /* if store class cd on table*/
      /* ***************  check status code of entry  ****************/
      if (YSVTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KM0SM010.YSVCD cursor, modified, bold; /* highlight field in error*/
      else /* else(status is active)*/
        /* next sentence            ;       okay*/
      end /* end of "if" statement*/
      /* *************************************************************/
    else /* else(store class not found)*/
      converseLib.validationFailed(17); /* error "invalid code"*/
      set KM0SM010.YSVCD cursor, modified, bold;
                                   /* highlight field in error*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





end // end KM0SS14

// edit customers store nbr
Function KM0SS16()


   /* *************************************************************/
   /* *****   e d i t    c u s t o m e r s    s t o r e      ******/
   /* *****                 n u m b e r                      ******/
   /* *************************************************************/


   /* *************************************************************/
   /* *****   this field is optional and free form.....      ******/
   /* *****   no validation is required, anything entered in ******/
   /* *****   this field is acceptable.                      ******/
   /* *************************************************************/





end // end KM0SS16

// edit nbr of stores serviced
Function KM0SS17()


   /* *************************************************************/
   /* *****  e d i t    n u m b e r    o f    s t o r e s    ******/
   /* *****        s e r v i c e d    b y    d / c           ******/
   /* *************************************************************/


  set KM0SM010.KUMNRSVC initialAttributes; /* set field attribute to defined*/
  set KM0SM010.KUMNRSVC modified; /* set field attribute to modified*/

  if (KM0SM010.KUMDCIND == "N")
    if (KM0SM010.KUMNRSVC != 0)
      converseLib.validationFailed(21);
      set KM0SM010.KUMNRSVC cursor, modified, bold;
    else
      /* next sentence              ;    okay*/
    end
  else /* else(dist center ind = 'y')*/
    if (KM0SM010.KUMNRSVC == 0) /* if nbr of stores serviced = 0*/
      converseLib.validationFailed(5); /* error "required field missing"*/
      set KM0SM010.KUMNRSVC cursor, modified, bold;
                                 /* ;    highlight error*/
    else /* else(nbr stores serviced not 0)*/
      /* next sentence              ;    okay*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





end // end KM0SS17

// edit distribution center ind
Function KM0SS18()


   /* *************************************************************/
   /* *****       e d i t    d i s t r i b u t i o n         ******/
   /* *****        c e n t e r    i n d i c a t o r          ******/
   /* *************************************************************/


  set KM0SM010.KUMDCIND initialAttributes; /* set attribute to defined*/
  set KM0SM010.KUMDCIND modified; /* set attribute to modified*/

  if (KM0SM010.KUMDCIND != "Y" /* if dist center ind not 'y'*/
   && KM0SM010.KUMDCIND != "N") /* and dist center ind not 'n'*/
    if (KM0SM010.KUMDCIND == " ") /* if dist center field is blank*/
      converseLib.validationFailed(5); /* error "required missing"*/
    else
                                   /* else(dist center ind not blank)*/
      converseLib.validationFailed(20); /* error "'y' or 'n' only"*/
    end /* end of "if" statement*/
    set KM0SM010.KUMDCIND cursor, modified, bold; /* highlight error field*/
  else /* else(dist center ind ok)*/
    if (KM0SM010.KUMNRSVC is modified)
                                   /* if no stores serviced modified*/
      /* next sentence              ;          skip*/
    else /* else(not)*/
      if (KM0SM010.KUMDCIND == "Y" /* if dist center ind not 'y'*/
       && KM0SM010.KUMNRSVC == 0)  /* and no stores serviced*/
        converseLib.validationFailed(119); /* error*/
        set KM0SM010.KUMDCIND cursor, modified, bold;
                                 /* ;            highlight*/
      else
        if (KM0SM010.KUMDCIND == "N" /* if dist center ind not 'y'*/
         && KM0SM010.KUMNRSVC != 0)  /* and no stores serviced*/
          KM0SM010.KUMNRSVC = 0; /* zero out*/
        end
      end
    end
  end /* end of "if" statement*/






end // end KM0SS18

// edit invoice dist ind
Function KM0SS19()

   /* this was added 3-15-91*/
   /* *************************************************************/
   /* *****  e d i t    x i d c d  invoice dist indicator      ****/
   /* *************************************************************/

  if (KM0SM010.XIDCD == " ") /* if inv dist flag is ' '*/
    converseLib.validationFailed(5); /* error "required missing"*/
    set KM0SM010.XIDCD cursor, modified, bold;
  else /* else(dist flag is not blank)*/
    if (KM0SM010.XIDCD in XIDTBL.XIDCD)
      if (XIDTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(17);
        set KM0SM010.XIDCD cursor, modified, bold;
      else
      end
    else
      converseLib.validationFailed(17);
      set KM0SM010.XIDCD cursor, modified, bold;
    end
  end

  if (KM0SM010.XIDCD == "10" /* EUROPE ONLY CODE,*/
   || KM0SM010.XIDCD == "11") /* flag as error.*/
    converseLib.validationFailed(17);
    set KM0SM010.XIDCD cursor, modified, bold;
  end


end // end KM0SS19

// edit store phone nbr
Function KM0SS1B()


   /* *************************************************************/
   /* *****   e d i t    s t o r e    p h o n e    n b r     ******/
   /* *****   e d i t    f a x        p h o n e    n b r     ******/
   /* *************************************************************/


   /* *************************************************************/
   /* *****   this field is optional, and free form.....     ******/
   /* *****   anything entered in this field is acceptable   ******/
   /* *****   no validation is required.                     ******/
   /* *************************************************************/





end // end KM0SS1B

// edit store name
Function KM0SS1C()


   /* *************************************************************/
   /* *****       e d i t    s t o r e    n a m e            ******/
   /* *************************************************************/


  set KM0SM010.KUMSTRNM initialAttributes; /* set field attribute to defined*/
  set KM0SM010.KUMSTRNM modified; /* set field attribute to modified*/
  if (KM0SM010.KUMSTRNM == " ") /* if store name is blank*/
    converseLib.validationFailed(5); /* error "required missing"*/
    set KM0SM010.KUMSTRNM cursor, modified, bold; /* highlight error field*/
  else /* else(same-ship-sw not blank)*/
    /* next sentence                ;          okay*/
  end /* end of "if" statement*/






end // end KM0SS1C

// edit apparel image code
Function KM0SS1D()


   /* *************************************************************/
   /* *****        e d i t    a p p a r e l   i m a g e      ******/
   /* *************************************************************/


  set KM0SM010.KUMXNIAP initialAttributes; /* set field attribute to defined value*/
  set KM0SM010.KUMXNIAP modified; /* set field attribute to modified*/
  if (KM0SM010.KUMXNIAP != " ") /* if apperal image is not blank*/
    if (KM0SM010.KUMXNIAP in XNITBL.XNICD)
                                     /* search table for image cd*/
      /* ***************  check status code of entry  ****************/
      if (XNITBL.XXXSTAT[sysVar.arrayIndex] == "A" /* if status is active*/
       && XNITBL.XGPCD[sysVar.arrayIndex] == "03") /* and gpc 03 (aprl)*/
        /* next sentence                ;  okay*/
      else /* else(status is active)*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KM0SM010.KUMXNIAP cursor, modified, bold;
                                     /* ;  highlight field in error*/
      end /* end of "if" statement*/
      /* *************************************************************/
    else /* else(image code not found)*/
      converseLib.validationFailed(17); /* error "invalid code"*/
      set KM0SM010.KUMXNIAP cursor, modified, bold;
                                 /* ;     highlight field in error*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/


end // end KM0SS1D

// edit deferred mailing ind
Function KM0SS1F()

   /* *************************************************************/

    /* Maintenance History:*/
    /* 10-11-91 CHELLM Created.*/

   /* *************************************************************/

  set KM0SM010.CU-OFSHR-FL initialAttributes;

  if (KM0SM010.CU-OFSHR-FL == " ")
    converseLib.validationFailed(5);
    set KM0SM010.CU-OFSHR-FL cursor, modified, bold;
    return;
  end

  if (KM0SM010.CU-OFSHR-FL == "Y"
   || KM0SM010.CU-OFSHR-FL == "N")
    /* next sentence*/
  else
    converseLib.validationFailed(20);
    set KM0SM010.CU-OFSHR-FL cursor, modified, bold;
  end

end // end KM0SS1F

// check store status
Function KM0SS1H()
   /* ----------  start stmt group km0ss1h  -----------------*/



    /* store status must be a or i*/
  if (KM0SM010.XXXSTAT is modified)
    if (KM0SM010.XXXSTAT == "A"
     || KM0SM010.XXXSTAT == "I")
      set KM0SM010.XXXSTAT initialAttributes;
    else
      set KM0SM010.XXXSTAT cursor, modified, bold;
      converseLib.validationFailed(162); /* incorrect status must be 'a' or 'i'*/
    end
  end




   /* ------------ stmt grp km0ss1h end ------------*/
end // end KM0SS1H

// edit deferred mailing ind
Function KM0SS1J()

  set KM0SM010.KUMDMIND initialAttributes;

  if (KM0SM010.KUMDMIND == " ")
    converseLib.validationFailed(5);
    set KM0SM010.KUMDMIND cursor, modified, bold;
    return;
  end

  if (KM0SM010.KUMDMIND == "Y"
   || KM0SM010.KUMDMIND == "N")
    /* next sentence*/
  else
    converseLib.validationFailed(20);
    set KM0SM010.KUMDMIND cursor, modified, bold;
  end

end // end KM0SS1J

// edit require flags
Function KM0SS1K()

   /* *************************************************************/
   /* *****       e d i t    r e q u i r e   f l a g s       ******/
   /* *************************************************************/

  set KM0SM010.KUMRQPKF initialAttributes; /* set attribute to defined*/
  set KM0SM010.KUMRQPKF modified; /* set attribute to modified*/

  if (KM0SM010.KUMRQPKF != "Y" /* if pack flag is not 'y'*/
   && KM0SM010.KUMRQPKF != "N") /* and pack flag is not 'n'*/
    if (KM0SM010.KUMRQPKF == " ") /* if pack flag is blank*/
      converseLib.validationFailed(5); /* error "required missing"*/
    else /* else(pack flag is not blank)*/
      converseLib.validationFailed(20); /* error "'y' or 'n' only"*/
    end /* end of "if" statement*/
    set KM0SM010.KUMRQPKF cursor, modified, bold; /* highlight error field*/
  end /* end of "if" statement*/

  set KM0SM010.KUMRQDSF initialAttributes; /* set attribute to defined*/
  set KM0SM010.KUMRQDSF modified; /* set attribute to modified*/

  if (KM0SM010.KUMRQDSF != "Y" /* if dist flag is not 'y'*/
   && KM0SM010.KUMRQDSF != "N") /* and dist flag is not 'n'*/
    if (KM0SM010.KUMRQDSF == " ") /* if dist flag is blank*/
      converseLib.validationFailed(5); /* error "required missing"*/
    else /* else(dist flag is not blank)*/
      converseLib.validationFailed(20); /* error "'y' or 'n' only"*/
    end /* end of "if" statement*/
    set KM0SM010.KUMRQDSF cursor, modified, bold; /* highlight error field*/
  end /* end of "if" statement*/

  set KM0SM010.KUMRQLBF initialAttributes; /* set attribute to defined*/
  set KM0SM010.KUMRQLBF modified; /* set attribute to modified*/

  if (KM0SM010.KUMRQLBF != "Y" /* if label flag is not 'y'*/
   && KM0SM010.KUMRQLBF != "N") /* and label flag is not 'n'*/
    if (KM0SM010.KUMRQLBF == " ") /* if label flag is blank*/
      converseLib.validationFailed(5); /* error "required missing"*/
    else /* else(label flag is not blank)*/
      converseLib.validationFailed(20); /* error "'y' or 'n' only"*/
    end /* end of "if" statement*/
    set KM0SM010.KUMRQLBF cursor, modified, bold; /* highlight error field*/
  end /* end of "if" statement*/

  set KM0SM010.KUMRQRWF initialAttributes; /* set attribute to defined*/
  set KM0SM010.KUMRQRWF modified; /* set attribute to modified*/

  if (KM0SM010.KUMRQRWF != "Y" /* if review flag is not 'y'*/
   && KM0SM010.KUMRQRWF != "N") /* and review flag is not 'n'*/
    if (KM0SM010.KUMRQRWF == " ") /* if review flag is blank*/
      converseLib.validationFailed(5); /* error "required missing"*/
    else
                                   /* else(review flag is not blank)*/
      converseLib.validationFailed(20); /* error "'y' or 'n' only"*/
    end /* end of "if" statement*/
    set KM0SM010.KUMRQRWF cursor, modified, bold; /* highlight error field*/
  end /* end of "if" statement*/


end // end KM0SS1K

// edit warehouse id
Function KM0SS21()


   /* *************************************************************/
   /* *****      e d i t    w a r e h o u s e   i d ' s      ******/
   /* *************************************************************/


  if (KM0SM010.XWHCD[KM0SWNDX] != " ") /* if warehouse code is not blank*/
    if (KM0SM010.XWHCD[KM0SWNDX] in XWHTBL.XWHCD)
      KM0SM010.XWHNM[KM0SWNDX] = XWHTBL.XWHNM[sysVar.arrayIndex];
    end
                                        /* search table for image*/
    if (sysVar.arrayIndex == 0) /* if warehouse code not found*/
      converseLib.validationFailed(17); /* error "invalid code"*/
      set KM0SM010.XWHCD[KM0SWNDX] cursor, modified, bold;
                                 /* ;          highlight field in err*/
    else /* else(warehouse cd found)*/
      /* ***************  check status code of entry  ****************/
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KM0SM010.XWHCD[KM0SWNDX] cursor, modified, bold;
                                     /* ;        highlight field in err*/
        KM0SM010.XWHNM[KM0SWNDX] = " ";
                                 /* ;        blank out decode*/
      else /* else(status is active)*/
        if (KM0SM010.XGPCD[KM0SWNDX] != " ") /* if gpc code is not blank*/
          /* ***** test that warehouse supplies customers gpc ******/
          if (XWHTBL.XGPCD1[sysVar.arrayIndex] != KM0SM010.XGPCD[KM0SWNDX]
           && XWHTBL.XGPCD2[sysVar.arrayIndex] != KM0SM010.XGPCD[KM0SWNDX]
           && XWHTBL.XGPCD3[sysVar.arrayIndex] != KM0SM010.XGPCD[KM0SWNDX]
           && XWHTBL.XGPCD4[sysVar.arrayIndex] != KM0SM010.XGPCD[KM0SWNDX]
           && XWHTBL.XGPCD5[sysVar.arrayIndex] != KM0SM010.XGPCD[KM0SWNDX]
           && XWHTBL.XGPCD6[sysVar.arrayIndex] != KM0SM010.XGPCD[KM0SWNDX]
           && XWHTBL.XGPCD7[sysVar.arrayIndex] != KM0SM010.XGPCD[KM0SWNDX]
           && XWHTBL.XGPCD8[sysVar.arrayIndex] != KM0SM010.XGPCD[KM0SWNDX])
            converseLib.validationFailed(87);
                                   /* error "invalid warehouse, gpc"*/
            if (KM0SM010.XWHCD[KM0SWNDX] is modified)
                                 /* ;          if warehouse was modified*/
              set KM0SM010.XWHCD[KM0SWNDX] cursor, modified, bold;
              set KM0SM010.XWHNM[KM0SWNDX] skip, bold;
                                   /* ;        highlight error*/
            else /* else warehouse not modified*/
              set KM0SM010.XGPCD[KM0SWNDX] cursor, modified, bold;
              set KM0SM010.XGPABRV[KM0SWNDX] skip, bold;
            end /* end of "if" statement*/
          else /* else(valid warehouse for gpc)*/
            /* next sentence        ;        okay*/
          end /* end of "if" statement*/
        else /* else(gpc code not entered)*/
          /* next sentence          ;      don't bother*/
        end /* end of "if" statement*/
      end /* end of "if" statement*/
      /* *************************************************************/
    end /* end of "if" statement*/
    /* IF Km0SM010.XGPCD(Km0SWNDX) EQ ' ';if gpc code is blank*/
      /* MOVE 5 TO EZEMNO            ;      error "required"*/
      /* SET Km0SM010.XGPCD(Km0SWNDX) CURSOR,BRIGHT;highlight field*/
    /* ELSE                          ;    else(gpc code not blank)*/
      /* ;next sentence              ;      okay(checked later)*/
    /* END                           ;    end of "if" statement*/
  else /* else(warehouse code not blank)*/
    if (KM0SM010.XGPCD[KM0SWNDX] != " ") /* if gpc code not blank*/
      converseLib.validationFailed(5); /* error "required missing"*/
      set KM0SM010.XWHCD[KM0SWNDX] cursor, modified, bold;
    else /* else(gpc code entered)*/
      /* next sentence              ;      okay(checked later)*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





end // end KM0SS21

// edit gpc code
Function KM0SS23()


   /* *************************************************************/
   /* *****          e d i t    g p c    c o d e s           ******/
   /* *************************************************************/


  if (KM0SM010.XGPCD[KM0SWNDX] != " ") /* if gpc code is not blank*/
    if (KM0SM010.XGPCD[KM0SWNDX] in XGPTBL.XGPCD)
      KM0SM010.XGPABRV[KM0SWNDX] = XGPTBL.XGPABRV[sysVar.arrayIndex];
    end
                                 /* ;        search table for gpc*/
    if (sysVar.arrayIndex == 0) /* if gpc code not found*/
      if (converseVar.validationMsgNum == 87) /* if last error was*/
                                 /* ;            "warehouse invalid*/
                                 /* ;            for gpc specified"*/
        if (KM0SM010.XWHCD is modified) /* if warehouse modified*/
          set KM0SM010.XWHCD[KM0SWNDX] initialAttributes; /* reset attribute*/
          set KM0SM010.XWHCD[KM0SWNDX] modified; /* RESET ATTRIBUTE*/
        else /* else(warehouse not modified)*/
          set KM0SM010.XWHCD[KM0SWNDX] initialAttributes; /* reset attribute*/
        end /* end of "if" statement*/
        set KM0SM010.XWHNM[KM0SWNDX] initialAttributes; /* reset attribute*/
      else /* else(other error)*/
        /* next sentence            ;            continue*/
      end /* end of "if" statement*/
      converseLib.validationFailed(17); /* error "invalid code"*/
      set KM0SM010.XGPCD[KM0SWNDX] cursor, modified, bold;
                                 /* ;          highlight field in err*/
    else /* else(if gpc code found)*/
      /* ***************  check status code of entry  ****************/
      if (XGPTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
        if (converseVar.validationMsgNum == 87) /* if last error was*/
                                 /* ;              "warehouse invalid*/
                                 /* ;              for gpc specified"*/
          if (KM0SM010.XWHCD is modified) /* if warehouse modified*/
            set KM0SM010.XWHCD[KM0SWNDX] initialAttributes; /* reset attribute*/
            set KM0SM010.XWHCD[KM0SWNDX] modified; /* RESET ATTRIBUTE*/
          else /* else(warehouse not modified)*/
            set KM0SM010.XWHCD[KM0SWNDX] initialAttributes; /* reset attribute*/
          end /* end of "if" statement*/
          set KM0SM010.XWHNM[KM0SWNDX] initialAttributes; /* reset attribute*/
        else /* else(other error)*/
          /* next sentence          ;              continue*/
        end /* end of "if" statement*/
        converseLib.validationFailed(17); /* error "invalid code*/
        set KM0SM010.XGPCD[KM0SWNDX] cursor, modified, bold;
                                 /* ;            highlight field in err*/
      else /* else(status is active)*/
        /* next sentence            ;            okay*/
      end /* end of "if" statement*/
      /* *************************************************************/
    end /* end of "if" statement*/
    /* IF Km0SM010.XWHCD(Km0SWNDX) EQ ' ';    if warehouse blank*/
      /* IF EZETST NE 0              ;          if no previous err*/
        /* MOVE 5 TO EZEMNO          ;            error "required"*/
        /* SET Km0SM010.XWHCD(Km0SWNDX) CURSOR,BRIGHT;*/
        /* ;                         ;            highlight error*/
      /* ELSE                        ;          else(prev error)*/
        /* SET Km0SM010.XWHCD(Km0SWNDX) BRIGHT;   highlight error*/
      /* END                         ;          end of "if" stmt*/
    /* END                           ;        end of "if" statement*/
  else /* else(gpc code is blank)*/
    if (KM0SM010.XWHCD[KM0SWNDX] != " ") /* if warehouse not blank*/
      converseLib.validationFailed(5); /* error "required missing"*/
      set KM0SM010.XGPCD[KM0SWNDX] cursor, modified, bold;
                                 /* ;          highlight error*/
    else /* else*/
      /* next sentence              ;          okay*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





end // end KM0SS23

// top justify warehouses
Function KM0SS29()


   /* *************************************************************/
   /* *****   t o p    j u s t i f y    w a r e h o u s e    ******/
   /* *****                    l i n e s                     ******/
   /* *************************************************************/


  if (KM0SM010.XWHCD[2] == " " /* if warehouse code blank*/
   && KM0SM010.XGPCD[2] == " ") /* and gpc code blank*/
    KM0SM010.XWHCD[2] = KM0SM010.XWHCD[3]; /* move warehouse 3 to 2*/
    KM0SM010.XWHNM[2] = KM0SM010.XWHNM[3]; /* move warehouse nm 3 to 2*/
    KM0SM010.XGPCD[2] = KM0SM010.XGPCD[3]; /* move gpc 3 to 2*/
    KM0SM010.XGPABRV[2] = KM0SM010.XGPABRV[3]; /* move gpc decode 3 to 2*/
    KM0SM010.XWHCD[3] = " "; /* blank out warehouse 3*/
    KM0SM010.XGPCD[3] = " "; /* blank out gpc 3*/
    KM0SM010.XWHNM[3] = " "; /* blank out warehouse nm 3*/
    KM0SM010.XGPABRV[3] = " ";
                                   /* BLANK OUT GPC DECODE 3*/
  end /* end of "if" statement*/
  if (KM0SM010.XWHCD[1] == " " /* if warehouse code blank*/
   && KM0SM010.XGPCD[1] == " ") /* and gpc code blank*/
    KM0SM010.XWHCD[1] = KM0SM010.XWHCD[2]; /* move warehouse 2 to 1*/
    KM0SM010.XWHNM[1] = KM0SM010.XWHNM[2]; /* move warehouse nm 3 to 2*/
    KM0SM010.XGPCD[1] = KM0SM010.XGPCD[2]; /* move gpc 2 to 1*/
    KM0SM010.XGPABRV[1] = KM0SM010.XGPABRV[2]; /* move gpc decode 3 to 2*/
    KM0SM010.XWHCD[2] = KM0SM010.XWHCD[3]; /* move warehouse 3 to 2*/
    KM0SM010.XWHNM[2] = KM0SM010.XWHNM[3]; /* move warehouse nm 3 to 2*/
    KM0SM010.XGPCD[2] = KM0SM010.XGPCD[3]; /* move gpc 3 to 2*/
    KM0SM010.XGPABRV[2] = KM0SM010.XGPABRV[3]; /* move gpc decode 3 to 2*/
    KM0SM010.XWHCD[3] = " "; /* blank out warehouse 3*/
    KM0SM010.XGPCD[3] = " "; /* blank out gpc 3*/
    KM0SM010.XWHNM[3] = " "; /* blank out warehouse nm 3*/
    KM0SM010.XGPABRV[3] = " ";
                                   /* BLANK OUT GPC DECODE 3*/
  end /* end of "if" statement*/





end // end KM0SS29

// insure at least 1 entered
Function KM0SS2A()


   /* *************************************************************/
   /* *****       i n s u r e    b o t h    c o d e s        ******/
   /* *****                   e n t e r e d                  ******/
   /* *************************************************************/


  if (KM0SM010.XWHCD[1] == " "
   && KM0SM010.XGPCD[1] == " ")
    converseLib.validationFailed(28);
    set KM0SM010.XGPCD[1] cursor, modified, bold;
    set KM0SM010.XWHCD[1] modified, bold;
  else
    /* next sentence*/
  end





end // end KM0SS2A

// check for duplicate gpc's
Function KM0SS2B()


   /* *************************************************************/
   /* ****  c h e c k    f o r    d u p l i c a t e    g p c  *****/
   /* ****                     c o d e s                      *****/
   /* *************************************************************/


  if (KM0SW01.KM0SWNDX == 3) /* if editing 3rd line*/
    if (KM0SM010.XGPCD[3] != " ") /* if gpc not blanc*/
      if (KM0SM010.XGPCD[3] == KM0SM010.XGPCD[2] /* if 3rd gpc = 2nd gpc*/
       || KM0SM010.XGPCD[3] == KM0SM010.XGPCD[1]) /* or 3rd gpc eq 1st gpc*/
        converseLib.validationFailed(88); /* error "no duplicates"*/
        set KM0SM010.XGPCD[3] cursor, modified, bold; /* highlight error*/
        set KM0SM010.XGPABRV[3] skip, bold; /* highlight error*/
      end /* end of "if" statement*/
    else /* else(gpc is blank)*/
      /* next sentence              ;             okay*/
    end /* end of "if" statement*/
  else /* else(index not eq 3)*/
    if (KM0SW01.KM0SWNDX == 2) /* if editing 2nd line*/
      if (KM0SM010.XGPCD[2] != " ") /* if gpc not blanc*/
        if (KM0SM010.XGPCD[2] == KM0SM010.XGPCD[1] /* if 2nd gpc eq 1st gpc*/
         || KM0SM010.XGPCD[2] == KM0SM010.XGPCD[3])
                                   /* or 3rd gpc eq 1st gpc*/
          converseLib.validationFailed(88); /* error "noduplicates"*/
          set KM0SM010.XGPCD[2] cursor, modified, bold; /* highlight error*/
          set KM0SM010.XGPABRV[2] skip, bold; /* highlight error*/
        end /* end of "if" statement*/
      else /* else(gpc is blank)*/
        /* next sentence            ;               okay*/
      end /* end of "if" statement*/
    else /* else(editing 1st line)*/
      if (KM0SW01.KM0SWNDX == 1) /* if editing 1nd line*/
        if (KM0SM010.XGPCD[1] != " ")
                                   /* if gpc not blanc*/
          if (KM0SM010.XGPCD[1] == KM0SM010.XGPCD[2] /* if 1st gpc eq 2nd gpc*/
           || KM0SM010.XGPCD[1] == KM0SM010.XGPCD[3]) /* or 1rd gpc eq 3rd gpc*/
            converseLib.validationFailed(88); /* error "noduplicates"*/
            set KM0SM010.XGPCD[1] cursor, modified, bold; /* highlight error*/
            set KM0SM010.XGPABRV[1] skip, bold; /* highlight error*/
          end
                                   /* end of "if" statement*/
        else /* else(gpc is blank)*/
          /* next sentence          ;                  okay*/
        end /* end of "if" statement*/
      else /* else(should never get here*/
        /* next sentence            ;                no edit*/
      end /* end of "if" statement*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





end // end KM0SS2B

// update store record
Function KM0SS30()


   /* *************************************************************/
   /* *****     u p d a t e    s t o r e    r e c o r d      ******/
   /* *************************************************************/


  call "IO0340" ("U ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod to update store*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if return code not okay*/
    if (SQLCA.VAGen_SQLCODE == 100) /* if record updated since last*/
      converseLib.validationFailed(97); /* error "record updated"*/
      exit stack;
    else
      /* GET ERROR*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
      TA1REC.TA1PGMNM = "KM0SS30 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "KM0SM010";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VSTORE01"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KUMREC.KUCCOID;
      KUWREC.KUMSTRID = KUMREC.KUMSTRID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                  /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                  /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      XSPF4(); /* return to main menu*/
    end /* end of "if" statement*/
  else /* else(return code okay)*/
    KM0SS31(); /* write audit records*/
  end /* end of "if" statement*/
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* commit data*/





end // end KM0SS30

// write audit records
Function KM0SS31()


   /* *************************************************************/
   /* *****     w r i t e    a u d i t    r e c o r d s      ******/
   /* *************************************************************/


   /* ********** format and write audit report record ***********/
  KUZREC.KUZTYPE = "C"; /* assign type code value*/
  KUZREC.KUZBFCD = "A"; /* assign "after" code*/
  KUZREC.XXXTBLNM = "VSTORE01"; /* move tbl name to audit rec*/
  KUZREC.XXXUSER = COMMAREA.CAUSERID; /* move user id to audit rec*/
  KUZREC.KUCCOID = KUMREC.KUCCOID; /* move co id to audit rec*/
  KUZREC.KUMSTRID = KUMREC.KUMSTRID; /* move store id to audit rec*/
  KUZREC.ZZZSDT = KUMREC.ZZZCHGDT;
                                   /* move set up date to audit rec*/
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* move time to audit rec*/
  KUZREC.KUZDATA = KUMREC.KUMGRP; /* move data to audit record*/

  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM0S   ";
    TA1REC.TA1LOCAT[1] = "KM0SS31  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VSTORE01 ";
    TA1REC.TA1MAP = "KM0SM000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VSTORE01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end

  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod to add*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
                                 /* ;              ne -803)*/
    /* **********************  call error routine  *****************/
    TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
    TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
    TA1REC.TA1PGMNM = "KM0SS31 "; /* move program name to error rec*/
    TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
    TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
    TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
    TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
    TA1REC.TA1MAP = "N/A     "; /* move map name to error record*/
    TA1REC.TA1DBASE = "DCUST   ";
                                   /* move database name to error rec*/
    TA1REC.TA1TBLVU = "VSTORE01";
                                   /* move table view to error record*/
    set KUWREC empty; /* initialize error work rec*/
    /* ************* move keys to error work record  ***************/
    KUWREC.KUCCOID = KUZREC.KUCCOID;
    KUWREC.KUMSTRID = KUZREC.KUMSTRID;
    /* *************************************************************/
    TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                  /* ;     move table key value*/
    KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* call db backout*/
    SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                  /* ;*/
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
    XSPF4(); /* return to main menu*/
  else /* else(return code okay)*/
    /* ********** format and write audit report record ***********/
    KUZREC.KUZBFCD = "B"; /* assign "before" code*/
    KUZREC.KUZDATA = KM0SW01.KM0SWBEF; /* move before image to rec*/
    call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
                                   /* call i/o mod to add*/
    if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
                                  /* ;              ne -803)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "RETN"; /* move function to error record*/
      TA1REC.TA1PGMNM = "KM0SS31 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VSTORE01"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KUZREC.KUCCOID;
      KUWREC.KUMSTRID = KUZREC.KUMSTRID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                  /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                  /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      XSPF4(); /* return to main menu*/
    else /* else(return code okay)*/
      /* next sentence              ;    okay*/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





end // end KM0SS31

// check pfkeys
Function KM0SSPF()


   /* *************************************************************/
   /* *****            c h e c k    p f - k e y s            ******/
   /* *************************************************************/


  if (converseVar.eventKey is enter)
    return;
  end
  if (converseVar.eventKey is pf1)
    XSPF1();
    converseLib.validationFailed(41);
    return;
  end
  if (converseVar.eventKey is pf2)
    return;
  end
  if (converseVar.eventKey is pf3)
    COMMAREA.CAUSERA = KM0SW01.KM0SWGRP;
    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    XSEXIT();
    converseLib.validationFailed(41);
    exit stack;
  else
    /* next sentnece*/
  end
  if (converseVar.eventKey is pf4)
    COMMAREA.CAUSERA = KM0SW01.KM0SWGRP;
    XSPF4();
    converseLib.validationFailed(41);
    exit stack;
  else
    /* next sentnece*/
  end
  if (converseVar.eventKey is pf5)
    COMMAREA.CAUSERA = KM0SW01.KM0SWGRP;
    COMMAREA.CATOAP = "KU0M";
    XSEXIT();
    converseLib.validationFailed(41);
    exit stack;
  else
    /* next sentence*/
  end
  if (converseVar.eventKey is pf12)
    return;
  end
  if (converseVar.eventKey is pa2)
    exit stack;
  end
  converseLib.validationFailed(3);
  exit stack;





end // end KM0SSPF

//*** RECORD=KM0SW01 ****
// this is the working storage record for the km0s application
// "change store"
// ***********************************************************
// *             Maintenance Log
// ***********************************************************
// *
// * 28 june 1993       dlegg   Add redefinitions of numeric
// *                            fields.
// ***********************
Record KM0SW01 type basicRecord
  5 KM0SWNDX KM0SWNDX ; 
  5 KM0SWGRP KM0SWGRP ; 
    7 KM0SWKEY KM0SWKEY ; 
      10 KM0SWCID KM0SWCID ; 
        15 KM0SWCID-CHAR KM0SWCID-CHAR ; 
      10 KM0SWSID KM0SWSID ; 
        15 KM0SWSID-CHAR KM0SWSID-CHAR ; 
      10 KM0SWDID KM0SWDID ; 
        15 KM0SWDID-CHAR KM0SWDID-CHAR ; 
      10 KM0SWGID KM0SWGID ; 
    7 KM0SWERR KM0SWERR ; 
  5 XATCD XATCD ; 
  5 KM0SWCOV KM0SWCOV ; 
  5 XNIABRV XNIABRV ; 
  5 XCFABRV XCFABRV ; 
  5 KM0SWLCI KM0SWLCI ; 
  5 KM0SWLSI KM0SWLSI ; 
  5 KM0SWDT KM0SWDT ; 
    10 * char(1) ; 
    10 KM0SWCCD KM0SWCCD ; 
    10 KM0SWYDT KM0SWYDT ; 
    10 KM0SWMDT KM0SWMDT ; 
    10 KM0SWDDT KM0SWDDT ; 
  5 KM0SWCDT KM0SWCDT ; 
    10 KM0SWMM KM0SWMM ; 
    10 KM0SWDD KM0SWDD ; 
    10 KM0SWYY KM0SWYY ; 
  5 KM0SWFST KM0SWFST ; 
  5 KM0SWCFL KM0SWCFL ; 
  5 KM0SW4FL KM0SW4FL ; 
  5 KM0SW5FL KM0SW5FL ; 
  5 KM0SWDOE KM0SWDOE ; 
  5 KM0SWUPD KM0SWUPD ; 
  5 KM0SWNML KM0SWNML ; 
  5 KM0SWNMS KM0SWNMS ; 
  5 KM0SWGST KM0SWGST ; 
    10 KM0SWD1 KM0SWD1 ; 
    10 KM0SWD2 KM0SWD2 ; 
    10 KM0SWD3 KM0SWD3 ; 
    10 KM0SWD4 KM0SWD4 ; 
  5 KM0SW2ST KM0SW2ST ; 
    10 KM0SWD21 KM0SWD21 ; 
    10 KM0SWD22 KM0SWD22 ; 
    10 KM0SWD23 KM0SWD23 ; 
    10 KM0SWD24 KM0SWD24 ; 
  5 KM0SWBEF KM0SWBEF ; 
  5 CU-SAP-ACCT-ID CU-SAP-ACCT-ID ; 
  5 KM0SW-ENTERED-SAP-ACCT KM0SW-ENTERED-SAP-ACCT ; 
  5 KM0SW-NIL-CUST-IND KM0SW-NIL-CUST-IND ; 
  5 KM0SW-NUM-CU-CO-ID KM0SW-NUM-CU-CO-ID ; 
    10 KM0SW-CHAR-CU-CO-ID KM0SW-CHAR-CU-CO-ID ; 
  5 KM0SW-PREV-SAP-ACCT KM0SW-PREV-SAP-ACCT ; 
  5 KM0SW-PREV-CO-ID KM0SW-PREV-CO-ID ; 
  5 KM0SW-PREV-STOR-ID KM0SW-PREV-STOR-ID ; 
  5 KM0SW-VCUSAP01-COPY KM0SW-VCUSAP01-COPY ; 
  5 KM0SW-DUP-SAP-OVRD-FL KM0SW-DUP-SAP-OVRD-FL ; 
  5 KM0SW-REPLACE-SAP-MSG KM0SW-REPLACE-SAP-MSG ; 
    10 KM0SW-REPLACE-SAP-LIT KM0SW-REPLACE-SAP-LIT ; 
    10 KM0SW-REPLACE-SAP-ACCT-ID KM0SW-REPLACE-SAP-ACCT-ID ; 
  5 KM0SW-SAP-TEN-CHAR KM0SW-SAP-TEN-CHAR ; 
    10 KM0SW-SAP-FOUR-CHAR KM0SW-SAP-FOUR-CHAR ; 
    10 KM0SW-SAP-SIX-CHAR KM0SW-SAP-SIX-CHAR ; 
  5 KM0SW-FROM-CUST-IS-NIL KM0SW-FROM-CUST-IS-NIL ; 
  5 KM0SW-SAVE-VCMPNY01-RECORD KM0SW-SAVE-VCMPNY01-RECORD ; 
  5 KM0SW-SKIP-CUSAP-UPDT KM0SW-SKIP-CUSAP-UPDT ; 
end // end KM0SW01

// company - display character
DataItem KM0SW-CHAR-CU-CO-ID char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ALLOW REPLACING DUP CUSAP LINE
DataItem KM0SW-DUP-SAP-OVRD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ENTERED='Y', NOT ENTERED='N'
DataItem KM0SW-ENTERED-SAP-ACCT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VCUSAP01 FROM CUST IS NIL
DataItem KM0SW-FROM-CUST-IS-NIL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NIL CUSTOMER='Y', NOT NIL='N'
DataItem KM0SW-NIL-CUST-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// company - display numeric
DataItem KM0SW-NUM-CU-CO-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PREVIOUS COMPANY ID
DataItem KM0SW-PREV-CO-ID char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PREVIOUS SAP ACCOUNT ID
DataItem KM0SW-PREV-SAP-ACCT char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PREVIOUS STORE ID
DataItem KM0SW-PREV-STOR-ID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DUP SAP NUMBER ERR MSG ACCT ID
DataItem KM0SW-REPLACE-SAP-ACCT-ID char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DUP SAP NUMBER ERR MSG LITERAL
DataItem KM0SW-REPLACE-SAP-LIT char(37)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DUPLICATE SAP NUMBER ERR MSG
DataItem KM0SW-REPLACE-SAP-MSG char(47)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FIRST 4 CHARS - SAP ACCT ID
DataItem KM0SW-SAP-FOUR-CHAR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// LAST 6 CHARS - SAP ACCT ID
DataItem KM0SW-SAP-SIX-CHAR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GRP ITEM FOR SAP ACCT ID SPLIT
DataItem KM0SW-SAP-TEN-CHAR char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// AREA FOR SAVING VCMPNY01 COPY
DataItem KM0SW-SAVE-VCMPNY01-RECORD char(400)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SKIP VCUSAP01 UPDATE IF NO CHG
DataItem KM0SW-SKIP-CUSAP-UPDT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SAVE A COPY OF VCUSAP01 RECORD
DataItem KM0SW-VCUSAP01-COPY char(70)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// num group store id
DataItem KM0SW2ST num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// confirmation for pf4 flag
DataItem KM0SW4FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// confirmation for pf5 flag
DataItem KM0SW5FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// before image of store rec
DataItem KM0SWBEF char(146)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century date for database
DataItem KM0SWCCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// convert date field
DataItem KM0SWCDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// confirmation for pf3 flag
DataItem KM0SWCFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// company id
DataItem KM0SWCID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//  company redefined
DataItem KM0SWCID-CHAR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// convertion field
DataItem KM0SWCOV num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// digit 1
DataItem KM0SWD1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// digit 2
DataItem KM0SWD2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// digit 1
DataItem KM0SWD21 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// digit 2
DataItem KM0SWD22 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// digit 3
DataItem KM0SWD23 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// digit 4
DataItem KM0SWD24 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// digit 3
DataItem KM0SWD3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// digit 4
DataItem KM0SWD4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date convert dayes
DataItem KM0SWDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// day date for database
DataItem KM0SWDDT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dept id
DataItem KM0SWDID num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//  dept redefined
DataItem KM0SWDID-CHAR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// do edits flag
DataItem KM0SWDOE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date for database format
DataItem KM0SWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ezemno error number
DataItem KM0SWERR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first time thru flag
DataItem KM0SWFST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gen prod class code
DataItem KM0SWGID char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group name
DataItem KM0SWGRP char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group store id
DataItem KM0SWGST char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer key
DataItem KM0SWKEY char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last store id
DataItem KM0SWLCI num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last store id
DataItem KM0SWLSI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month date for database
DataItem KM0SWMDT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date convert monthes
DataItem KM0SWMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table index
DataItem KM0SWNDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// long name
DataItem KM0SWNML char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// short name(compressed)
DataItem KM0SWNMS char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// store id
DataItem KM0SWSID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//  store redefined
DataItem KM0SWSID-CHAR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update flag
DataItem KM0SWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year date for database
DataItem KM0SWYDT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date convert years
DataItem KM0SWYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

