package km04;

import corpcom1.CAMSG;
import corpcom1.CATOAP;
import corpcom2.XGPREC;
import corpcom2.XX0XW01;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XSSM003;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXX-ADDR5;
import corpcom7.XXX-ADDR6;
import corpx1.XATCD;
import corpx1.XAUTBL;
import corpx1.XLBCD;
import corpx1.XLBTBL;
import corpx1.XLBZPFX;
import corpx2.XXX-ADDR1;
import corpx2.XXX-ADDR2;
import corpx2.XXX-ADDR3;
import corpx2.XXX-ADDR4;
import corpx2.XXXZIP;
import kl.common.KIZTBL;
import ku.common.KU0XW10;
import ku.common.KU0XW30;
import ku.common.KUCCONM;
import ku.common.KUCMADID;
import ku.common.KUCREC;
import ku.common.KULAAID;
import ku.common.KUMREC;
import ku.common.KUNREC;
import ku.common.KUZDATA;
import ku.common.KUZREC;
import nl.common.NLAADRID;
import nl.common.NLAINTGR;
import ta.common.TA1REC;
import vv.common.VLADDR01;
import xa.common.XA1REC;
//*** PROGRAM=KM04 ****
// ;***********************************************************
// ;*       New NIL Address/NIL Address Correction
// ;*==========================================================
// ;*                  maintenance log
// ;*----------------------------------------------------------
// ;*  Date       int               description
// ;*----------------------------------------------------------
// ;* 09/12/89  dsalzw  application cloned from km0e, to handle
// ;*                   long addresses required by NIL.
// ;* 01/17/90  j fiat  db changes
// ;* 03/30/90  d salzw db changes
// ;* 09/10/90  d salzw added kiztbl for audit trail
// ;* 10/17/90  d salzw update both blgrp and cmpny
// ;* 02/04/91  dsalzw  remove billgroup (kuarec)
// ;* 10/11/91  chellm  deinstalled cutag record creation.
// ;* 10/01/93  CHELLM  CSP 4.1 Conversion.
// ;* 04/10/95  CHELLM  Added user security for Nike Canada.
// *Y2KFIX   11/25/97  DKENNY  Y2K MODIFICATIONS MADE:
// *                   Application regenerated to pick up new
// *                   XX0XS01.
// ;***********************************************************
// *********************
Program KM04 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KM04W01 KM04W01; // record
  KU0XW10 KU0XW10; // record
  KU0XW30 KU0XW30; // record
  KUCREC KUCREC; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  KUZREC KUZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VLADDR01 VLADDR01; // record
  XA1REC XA1REC; // record
  XGPREC XGPREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KIZTBL {deleteAfterUse = yes}; // table
  use XLBTBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use KM04M.KM04M001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KM04000: KM04000();
    goto KM04010;
    KM04010: KM04010();
    ;
    ;
    goto KM04010;
    ;
    ;
  end // end main
end // end KM04

// km04 initialization
Function KM04000()
  ;
  XSENTRY(); /* check if entered properly*/
  ;
  XSSEGTR(); /* set segmented trans id*/
  ;
  set VLADDR01 empty; /* initialize the address record*/
  set KUCREC empty; /* initialize the customer record*/
  set KM04W01 empty;
                                   /* initialize the working storage record*/
  set TA1REC empty; /* initialize the abort record*/
  set KU0XW30 empty;
                                   /* initialize the condense name/city rec*/
  set KU0XW10 empty;
                                   /* initialize the condense name/city rec*/
  ;
  ;
  KM04S00(); /* handle fast-path entry*/
  ;
end // end KM04000

// new/change address
Function KM04010()
  ;
   /* initialize the screen variables*/
  ;
  ;
  if (converseVar.validationMsgNum == 0
   && COMMAREA.CASECRC == 0)
    if (COMMAREA.CAFROMAP == "KM04")
      /* next sentence*/
    else
      COMMAREA.CAFROMAP = "KM04";
      set KM04M001 empty;
    end
  else
    if (COMMAREA.CASECRC != 0)
      KM04M001.CAMSG = COMMAREA.CAMSG;
      set KM04M001 alarm;
    else
      set KM04M001 alarm;
    end
  end
  ;
  ;
  KM04M001.XXXSCRDT = VGVar.currentShortGregorianDate;
  ;
  ;
  converse KM04M001 ;
  ;
  ;
  ;
  KM04M001.VAGen_EZEMSG = " ";
  KM04M001.CAMSG = " ";
  ;
  if (KM04M001.XXX-ADDR6 is modified
   || KM04M001.XSTCD is modified)
    KM04W01.KM04WMOD = "X";
  end
  ;
  ;
  KM04S70(); /* handle special entry (fast-path, pf-keys)*/
  ;
  ;
  if (converseVar.validationMsgNum == 0
   && COMMAREA.CASECRC == 0)
    KM04S10(); /* edit screen entries*/
  end
  ;
  exit stack;
  ;
  ;
end // end KM04010

// handle fast-path entry to km04
Function KM04S00()
  if (COMMAREA.CAITEM != " ")
    KM04W01.KM04WCID = 0;
    KM04W01.KM04WAID = 0;
    KM04W01.KM04WIN1 = 1;
    KM04W01.KM04WIN2 = 1;
    KM04W01.KM04WFNO = 1;
    while (KM04W01.KM04WIN1 <= 20
     && COMMAREA.CAITMLTR[KM04WIN1] != " ")
      if (COMMAREA.CAITMLTR[KM04WIN1] == ".")
        KM04W01.KM04WFNO = KM04W01.KM04WFNO + 1;
        KM04W01.KM04WIN2 = 0;
      else
        KM04S01(); /* move each letter*/
        if (converseVar.validationMsgNum == 0)
          /* NEXT SENTENCE*/
        else
          return;
        end
      end
      KM04W01.KM04WIN1 = KM04W01.KM04WIN1 + 1;
      KM04W01.KM04WIN2 = KM04W01.KM04WIN2 + 1;
    end
    KM04M001.NLAINTGR = KM04W01.KM04WCID;
    KM04M001.NLAADRID = KM04W01.KM04WAID;
    COMMAREA.CAITEM = " ";
    KM04S10(); /* validate the fast-path option(s)*/
  end
end // end KM04S00

// move each fast-path letter
Function KM04S01()
  if (KM04W01.KM04WFNO == 1)
    if (KM04W01.KM04WIN2 <= 7)
      KM04W01.KM04WCLT[KM04WIN2] = COMMAREA.CAITMLTR[KM04WIN1];
    else
      converseLib.validationFailed(109); /* co number too long*/
      KM04W01.KM04WIN1 = 21; /* force exit from loop*/
    end
  end
  if (KM04W01.KM04WFNO == 2)
    if (KM04W01.KM04WIN2 <= 7)
      KM04W01.KM04WALT[KM04WIN2] = COMMAREA.CAITMLTR[KM04WIN1];
    else
      converseLib.validationFailed(125); /* address id too long*/
      KM04W01.KM04WIN1 = 21; /* force exit from loop*/
    end
  end
  if (KM04W01.KM04WFNO > 2
   || KM04W01.KM04WFNO < 1)
    converseLib.validationFailed(19);
    KM04W01.KM04WIN1 = 21; /* force exit from loop*/
  end
end // end KM04S01

// edit screen entry
Function KM04S10()
  ;
  XX0XS01(); /* get current date and time*/
  ;
  ;
  set KM04M001.NLAINTGR normal;
  set KM04M001.NLAADRID normal;
  ;
  if (KM04M001.NLAINTGR > 0)
    /* next sentence*/
  else
    converseLib.validationFailed(114); /* this field required*/
    set KM04M001.NLAINTGR cursor, bold;
    return;
  end
  ;
  ;
  if (KM04M001.NLAINTGR != KM04W01.NLAINTGR)
    KM04W01.NLAINTGR = KM04M001.NLAINTGR;
    KM04S20(); /* get company record*/
    if (converseVar.validationMsgNum == 0) /* if the company was found*/
      KM04W01.NLAADRID = 99999;
    else
      set KM04M001.NLAINTGR cursor, bold;
      return;
    end
  end
  ;
  ;
  ;
  if (KM04M001.NLAADRID != KM04W01.NLAADRID)
    KM04W01.NLAADRID = KM04M001.NLAADRID;
    if (KM04M001.NLAADRID != 0)
      KM04S25(); /* get address record*/
      if (converseVar.validationMsgNum == 0)
        move XA1REC to VLADDR01 withV60Compat;
        KM04W01.NLAADRID = KM04M001.NLAADRID;
        converseLib.validationFailed(129); /* ok, make changes*/
        set KM04M001.XXX-ADDR1 cursor;
      else
        set KM04M001.NLAADRID cursor, bold;
        return;
      end
    else
      set KM04M001 initial;
      KM04M001.NLAINTGR = KM04W01.NLAINTGR;
      KM04M001.KUCCONM = KUCREC.KUCCONM;
      KM04M001.KUCCOANM = KUCREC.KUCCOANM;
    end
  end
  ;
  ;
  ;
  if (KM04M001.XXX-ADDR1 == " "
   && KM04M001.XXX-ADDR2 == " "
   && KM04M001.XXX-ADDR3 == " "
   && KM04M001.XXX-ADDR4 == " "
   && KM04M001.XXX-ADDR5 == " "
   && KM04M001.XXX-ADDR6 == " "
   && KM04M001.XXXZIP == " ")
    converseLib.validationFailed(128); /* ok, enter address*/
    set KM04M001.XXX-ADDR1 cursor;
    return;
  end
  ;
  ;
  KM04W01.KM04WESW = "DO EDIT";
  ;
  ;
  KM04S15(); /* edit address*/
  ;
  move XA1REC to KM04M001 withV60Compat;
  KM04W01.XXX-ADDR1 = XA1REC.XXX-ADDR1;
  KM04W01.XXX-ADDR2 = XA1REC.XXX-ADDR2;
  KM04W01.XXX-ADDR3 = XA1REC.XXX-ADDR3;
  KM04W01.XXX-ADDR4 = XA1REC.XXX-ADDR4;
  KM04W01.XXX-ADDR5 = XA1REC.XXX-ADDR5;
  KM04W01.XXX-ADDR6 = XA1REC.XXX-ADDR6;
  ;
  ;
  if (converseVar.validationMsgNum == 0)
    KM04W01.KM04WESW = "EDIT OK";
    converseLib.validationFailed(22); /* press pf12 to confirm*/
    set KM04M001.XXX-ADDR1 cursor;
    set KM04M001.NLAINTGR skip;
    set KM04M001.NLAADRID skip;
    return;
  else
    return;
  end
  ;
end // end KM04S10

// edit the address
Function KM04S15()
   /* ************************************************************/
   /* *   Edit the address:*/
   /* *      1. reset the address to normal*/
   /* *      2. edit the address using xa0a*/
   /* *      3. set up any errors*/
   /* *      4. return to calling proc.*/
   /* ************************************************************/
  ;
  set KM04M001.XXX-ADDR1 normal;
  set KM04M001.XXX-ADDR2 normal;
  set KM04M001.XXX-ADDR3 normal;
  set KM04M001.XXX-ADDR4 normal;
  set KM04M001.XXX-ADDR5 normal;
  set KM04M001.XXX-ADDR6 normal;
  set KM04M001.XXXZIP normal;
  set KM04M001.XCTCD normal;
  set KM04M001.XSTCD normal;
  ;
  ;
  move KM04M001 to XA1REC withV60Compat;
  ;
  XA1REC.XA1FUNCT = "E ";
  ;
  ;
  call "XA0C" (XA1REC) {isNoRefresh = yes};
  ;
  ;
  if (XA1REC.XA1ERIND[2] > 0)
    set KM04M001.XXX-ADDR1 cursor, bold;
    if (XA1REC.XA1ERIND[2] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA1REC.XA1ERIND[2]);
    end
  else
    if (XA1REC.XA1ERIND[3] > 0)
      set KM04M001.XXX-ADDR2 cursor, bold;
      if (XA1REC.XA1ERIND[3] == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(XA1REC.XA1ERIND[3]);
      end
    else
      if (XA1REC.XA1ERIND[4] > 0)
        set KM04M001.XXX-ADDR3 cursor, bold;
        if (XA1REC.XA1ERIND[4] == 9999)
          converseLib.validationFailed();
        else
          converseLib.validationFailed(XA1REC.XA1ERIND[4]);
        end
      else
        if (XA1REC.XA1ERIND[5] > 0)
          set KM04M001.XXX-ADDR4 cursor, bold;
          if (XA1REC.XA1ERIND[5] == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(XA1REC.XA1ERIND[5]);
          end
        else
          if (XA1REC.XA1ERIND[6] > 0)
            set KM04M001.XXX-ADDR5 cursor, bold;
            if (XA1REC.XA1ERIND[6] == 9999)
              converseLib.validationFailed();
            else
              converseLib.validationFailed(XA1REC.XA1ERIND[6]);
            end
          else
            if (XA1REC.XA1ERIND[7] > 0)
              set KM04M001.XXX-ADDR6 cursor, bold;
              if (XA1REC.XA1ERIND[7] == 9999)
                converseLib.validationFailed();
              else
                converseLib.validationFailed(XA1REC.XA1ERIND[7]);
              end
            else
              if (XA1REC.XA1ERIND[8] > 0)
                set KM04M001.XSTCD cursor, bold;
                KM04M001.XSTDESC = " ";
                if (XA1REC.XA1ERIND[8] == 9999)
                  converseLib.validationFailed();
                else
                  converseLib.validationFailed(XA1REC.XA1ERIND[8]);
                end
              else
                if (XA1REC.XA1ERIND[9] > 0)
                  set KM04M001.XXXZIP cursor, bold;
                  if (XA1REC.XA1ERIND[9] == 9999)
                    converseLib.validationFailed();
                  else
                    converseLib.validationFailed(XA1REC.XA1ERIND[9]);
                  end
                else
                  if (XA1REC.XA1ERIND[10] > 0)
                    set KM04M001.XCTCD cursor, bold;
                    KM04M001.XCTDESC = " ";
                    if (XA1REC.XA1ERIND[10] == 9999)
                      converseLib.validationFailed();
                    else
                      converseLib.validationFailed(XA1REC.XA1ERIND[10]);
                    end
                  else
                  end
                end
              end
            end
          end
        end
      end
    end
  end
  ;
  ;
end // end KM04S15

// get company
Function KM04S20()
  ;
  KUCREC.KUCCOID = KM04M001.NLAINTGR;
  ;
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KM04W01.NLAINTGR = KUCREC.KUCCOID;
    KM04W01.KUCMADID = KUCREC.KUCMADID;
    KM04M001.KUCCONM = KUCREC.KUCCONM;
    KM04M001.KUCCOANM = KUCREC.KUCCOANM;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(118);
      KM04W01.NLAINTGR = 0;
      KM04W01.KUCMADID = 0;
      KM04M001.KUCCONM = " ";
      KM04M001.KUCCOANM = " ";
      KM04M001.XXX-ADDR1 = " ";
      KM04M001.XXX-ADDR2 = " ";
      KM04M001.XXX-ADDR3 = " ";
      KM04M001.XXX-ADDR4 = " ";
      KM04M001.XXX-ADDR5 = " ";
      KM04M001.XXX-ADDR6 = " ";
      KM04M001.XSTCD = " ";
      KM04M001.XCTCD = " ";
      KM04M001.XSTDESC = " ";
      KM04M001.XXXZIP = " ";
      KM04M001.XCTDESC = " ";
      return;
    else
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      TA1REC.TA1PGMNM = "KM04S20";
      TA1REC.TA1LOC = "SELECT COMPANY";
      KM04W01.KM04WCMP = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KM04W01.KM04WKEY;
      XSSM003(); /* abort routine*/
    end
  end
  ;
  if (KUCREC.XAUCD in XAUTBL.XAUCD)
    if (XAUTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      KM04W01.XATCD = XAUTBL.XATCD[sysVar.arrayIndex];
    else
      KM04W01.XATCD = " ";
    end
  else
    KM04W01.XATCD = " ";
  end
  ;
  if (KM04W01.XATCD == "08")
    if (COMMAREA.CADLVL[1] == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(272);
      KM04W01.NLAINTGR = 0;
      KM04W01.KUCMADID = 0;
      KM04M001.KUCCONM = " ";
      KM04M001.KUCCOANM = " ";
      KM04M001.XXX-ADDR1 = " ";
      KM04M001.XXX-ADDR2 = " ";
      KM04M001.XXX-ADDR3 = " ";
      KM04M001.XXX-ADDR4 = " ";
      KM04M001.XXX-ADDR5 = " ";
      KM04M001.XXX-ADDR6 = " ";
      KM04M001.XSTCD = " ";
      KM04M001.XCTCD = " ";
      KM04M001.XSTDESC = " ";
      KM04M001.XXXZIP = " ";
      KM04M001.XCTDESC = " ";
      return;
    end
  else
    if (KM04W01.XATCD == "03")
      if (COMMAREA.CADLVL[2] == "Y")
        /* next sentence*/
      else
        converseLib.validationFailed(272);
        KM04W01.NLAINTGR = 0;
        KM04W01.KUCMADID = 0;
        KM04M001.KUCCONM = " ";
        KM04M001.KUCCOANM = " ";
        KM04M001.XXX-ADDR1 = " ";
        KM04M001.XXX-ADDR2 = " ";
        KM04M001.XXX-ADDR3 = " ";
        KM04M001.XXX-ADDR4 = " ";
        KM04M001.XXX-ADDR5 = " ";
        KM04M001.XXX-ADDR6 = " ";
        KM04M001.XSTCD = " ";
        KM04M001.XCTCD = " ";
        KM04M001.XSTDESC = " ";
        KM04M001.XXXZIP = " ";
        KM04M001.XCTDESC = " ";
      end
    else
      if (COMMAREA.CADLVL[1] == "Y"
       || COMMAREA.CADLVL[2] == "Y")
        converseLib.validationFailed(272);
        KM04W01.NLAINTGR = 0;
        KM04W01.KUCMADID = 0;
        KM04M001.KUCCONM = " ";
        KM04M001.KUCCOANM = " ";
        KM04M001.XXX-ADDR1 = " ";
        KM04M001.XXX-ADDR2 = " ";
        KM04M001.XXX-ADDR3 = " ";
        KM04M001.XXX-ADDR4 = " ";
        KM04M001.XXX-ADDR5 = " ";
        KM04M001.XXX-ADDR6 = " ";
        KM04M001.XSTCD = " ";
        KM04M001.XSTDESC = " ";
        KM04M001.XXXZIP = " ";
        KM04M001.XCTDESC = " ";
      end
    end
  end
            /* Edit for Nike Canada user*/
  ;
  if (KUCREC.XLECD == "03")
    if (COMMAREA.CADLVL[3] == "Y")
      /* next sentence*/
    else
      converseLib.validationFailed(272);
      KM04W01.NLAINTGR = 0;
      KM04W01.KUCMADID = 0;
      KM04M001.KUCCONM = " ";
      KM04M001.KUCCOANM = " ";
      KM04M001.XXX-ADDR1 = " ";
      KM04M001.XXX-ADDR2 = " ";
      KM04M001.XXX-ADDR3 = " ";
      KM04M001.XXX-ADDR4 = " ";
      KM04M001.XXX-ADDR5 = " ";
      KM04M001.XXX-ADDR6 = " ";
      KM04M001.XSTCD = " ";
      KM04M001.XCTCD = " ";
      KM04M001.XSTDESC = " ";
      KM04M001.XXXZIP = " ";
      KM04M001.XCTDESC = " ";
    end
  else
    if (COMMAREA.CADLVL[3] == "Y")
      converseLib.validationFailed(272);
      KM04W01.NLAINTGR = 0;
      KM04W01.KUCMADID = 0;
      KM04M001.KUCCONM = " ";
      KM04M001.KUCCOANM = " ";
      KM04M001.XXX-ADDR1 = " ";
      KM04M001.XXX-ADDR2 = " ";
      KM04M001.XXX-ADDR3 = " ";
      KM04M001.XXX-ADDR4 = " ";
      KM04M001.XXX-ADDR5 = " ";
      KM04M001.XXX-ADDR6 = " ";
      KM04M001.XSTCD = " ";
      KM04M001.XSTDESC = " ";
      KM04M001.XXXZIP = " ";
      KM04M001.XCTDESC = " ";
    end
  end
end // end KM04S20

// get address
Function KM04S25()
  ;
  set XA1REC empty; /* initialize the address work record*/
  ;
  ;
   /* GET KM05S35*/
  ;
  XA1REC.NLATYPIN = "C";
  XA1REC.NLABSIND = " ";
  XA1REC.NLAONECH = " ";
  XA1REC.NLASINT1 = 0;
  XA1REC.NLASINT2 = 0;
  ;
  XA1REC.NLAINTGR = KM04M001.NLAINTGR;
  XA1REC.NLAADRID = KM04M001.NLAADRID;
  ;
  XA1REC.XA1FUNCT = "G"; /* get the address record*/
  ;
  call "XA0C" (XA1REC) {isNoRefresh = yes};
  ;
  ;
  if (XA1REC.XA1ERIND[1] == 0)
    move XA1REC to KM04M001 withV60Compat;
  else
    if (XA1REC.XA1ERIND[1] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA1REC.XA1ERIND[1]);
    end
    return;
  end
end // end KM04S25

// update the address
Function KM04S60()
   /* ************************************************************/
   /* *   Edit/replace the address*/
   /* *      1. reset the address to normal*/
   /* *      2. edit the address using xa0c*/
   /* *      3. set up any errors*/
   /* *      4. return to calling proc.*/
   /* ************************************************************/
  ;
  ;
  XA1REC.XXXUSER = COMMAREA.CAUSERID;
  ;
  if (KM04M001.NLAADRID == 0)
    XA1REC.XA1FUNCT = "O "; /* insert new address*/
    KM04W01.KM04WEND = "N";
    while (KM04W01.KM04WEND == "N")
      KM04S62(); /* generate new address id*/
    end
  else
    XA1REC.XA1FUNCT = "R "; /* replace existing address*/
  end
  ;
  ;
  set KM04M001.XXX-ADDR1 normal;
  set KM04M001.XXX-ADDR2 normal;
  set KM04M001.XXX-ADDR3 normal;
  set KM04M001.XXX-ADDR4 normal;
  set KM04M001.XXX-ADDR5 normal;
  set KM04M001.XXX-ADDR6 normal;
  set KM04M001.XXXZIP normal;
  set KM04M001.XCTCD normal;
  set KM04M001.XSTCD normal;
  ;
  ;
  move KM04M001 to XA1REC withV60Compat;
  ;
  XA1REC.NLATYPIN = "C";
  XA1REC.NLABSIND = " ";
  XA1REC.NLAONECH = " ";
  XA1REC.NLASINT1 = 0;
  XA1REC.NLASINT2 = 0;
  ;
  ;
  call "XA0C" (XA1REC) {isNoRefresh = yes};
  ;
  ;
  if (XA1REC.XA1ERIND[1] > 0)
    set KM04M001.XXX-ADDR1 cursor;
    if (XA1REC.XA1ERIND[1] == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XA1REC.XA1ERIND[1]);
    end
  else
    if (XA1REC.XA1ERIND[2] > 0)
      set KM04M001.XXX-ADDR1 cursor, bold;
      if (XA1REC.XA1ERIND[2] == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(XA1REC.XA1ERIND[2]);
      end
    else
      if (XA1REC.XA1ERIND[3] > 0)
        set KM04M001.XXX-ADDR2 cursor, bold;
        if (XA1REC.XA1ERIND[3] == 9999)
          converseLib.validationFailed();
        else
          converseLib.validationFailed(XA1REC.XA1ERIND[3]);
        end
      else
        if (XA1REC.XA1ERIND[4] > 0)
          set KM04M001.XXX-ADDR3 cursor, bold;
          if (XA1REC.XA1ERIND[4] == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(XA1REC.XA1ERIND[4]);
          end
        else
          if (XA1REC.XA1ERIND[5] > 0)
            set KM04M001.XXX-ADDR4 cursor, bold;
            if (XA1REC.XA1ERIND[5] == 9999)
              converseLib.validationFailed();
            else
              converseLib.validationFailed(XA1REC.XA1ERIND[5]);
            end
          else
            if (XA1REC.XA1ERIND[6] > 0)
              set KM04M001.XXX-ADDR5 cursor, bold;
              if (XA1REC.XA1ERIND[6] == 9999)
                converseLib.validationFailed();
              else
                converseLib.validationFailed(XA1REC.XA1ERIND[6]);
              end
            else
              if (XA1REC.XA1ERIND[7] > 0)
                set KM04M001.XXX-ADDR6 cursor, bold;
                if (XA1REC.XA1ERIND[7] == 9999)
                  converseLib.validationFailed();
                else
                  converseLib.validationFailed(XA1REC.XA1ERIND[7]);
                end
              else
                if (XA1REC.XA1ERIND[8] > 0)
                  set KM04M001.XSTCD cursor, bold;
                  KM04M001.XSTDESC = " ";
                  if (XA1REC.XA1ERIND[8] == 9999)
                    converseLib.validationFailed();
                  else
                    converseLib.validationFailed(XA1REC.XA1ERIND[8]);
                  end
                else
                  if (XA1REC.XA1ERIND[9] > 0)
                    set KM04M001.XXXZIP cursor, bold;
                    if (XA1REC.XA1ERIND[9] == 9999)
                      converseLib.validationFailed();
                    else
                      converseLib.validationFailed(XA1REC.XA1ERIND[9]);
                    end
                  else
                    if (XA1REC.XA1ERIND[10] > 0)
                      set KM04M001.XCTCD cursor, bold;
                      KM04M001.XCTDESC = " ";
                      if (XA1REC.XA1ERIND[10] == 9999)
                        converseLib.validationFailed();
                      else
                        converseLib.validationFailed(XA1REC.XA1ERIND[10]);
                      end
                    else
                      if (XA1REC.XA1FUNCT == "R ") /* if update and old zip*/
                        if (VLADDR01.XXXZIP != XA1REC.XXXZIP) /* ne new zip*/
                          KM04S66();
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
end // end KM04S60

// update company record
Function KM04S61()
  ;
  KM04W01.KUZDATA = KUCREC.KUCGRP; /* save before image*/
  ;
  KUCREC.KUCMADID = VLADDR01.NLAADRID;
  ;
  ;
  KUCREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUCREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  ;
  if (KM04W01.KM04WESW == "UPDATE")
    call "IO0240" ("U ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence...no audit records for this change*/
      /* per sandy kelly*/
    else
      TA1REC.TA1LOC = "UPDATE COMPANY";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      TA1REC.TA1PGMNM = "KM04S61";
      KM04W01.KM04WCMP = KUCREC.KUCCOID;
      KM04W01.KM04WADR = KUCREC.KUCMADID;
      TA1REC.TA1TBLKE = KM04W01.KM04WKEY;
      XSSM003(); /* abort routine*/
    end
  end
end // end KM04S61

// generate new address id
Function KM04S62()
  ;
  set VLADDR01 empty;
  ;
  VLADDR01.NLAINTGR = KM04M001.NLAINTGR;
  VLADDR01.NLAADRID = KM04W01.KUCMADID + 1;
  ;
  call "IO4410" ("S ", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    KM04W01.KUCMADID = KM04W01.KUCMADID + 1;
    return; /* ;  go back and try again*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KM04M001.NLAADRID = VLADDR01.NLAADRID;
      KM04S61(); /* update the company record*/
      KM04W01.KM04WEND = "Y";
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VLADDR01";
      TA1REC.TA1PGMNM = "KM04S62";
      KM04W01.KM04WCMP = VLADDR01.NLAINTGR;
      KM04W01.KM04WADR = VLADDR01.NLAADRID;
      TA1REC.TA1LOC = "SELECT ADDRESS";
      TA1REC.TA1TBLKE = KM04W01.KM04WKEY;
      XSSM003();
    end
  end
end // end KM04S62

// check to update lock box
Function KM04S66()
  ;
    /* if nike international company, don't change lockbox*/
  if (KUCREC.XAUCD == "33"
   || KUCREC.XAUCD == "32"
   || KUCREC.XAUCD == "31")
    return;
  end
  ;
  if (XA1REC.NLAADRID == KUCREC.KUCBLAID) /* if bill group is same addr id*/
    ;
    KM04W01.XXXZIP = XA1REC.XXXZIP;
    ;
    KM04W01.KM04WIN1 = 1; /* look up lock box code*/
    while (XLBTBL.XLBZPFX[KM04WIN1] != "999"
     && XLBTBL.XLBZPFX[KM04WIN1] < KM04W01.XLBZPFX)
      KM04W01.KM04WIN1 = KM04W01.KM04WIN1 + 1;
    end
    KM04W01.XLBCD = XLBTBL.XLBCD[KM04WIN1];
    ;
     /* update company*/
    KM04W01.KUZDATA = KUCREC.KUCGRP; /* save before image*/
    KUCREC.XLBCD = KM04W01.XLBCD;
    XX0XS01(); /* get date and time*/
    KUCREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    KUCREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
    call "IO0240" ("U ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      KUZREC.KUZTYPE = "C"; /* change*/
      KM04S67(); /* write audit records*/
    else
      TA1REC.TA1LOC = "UPDATE COMPANY   ";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      TA1REC.TA1PGMNM = "KM04S66";
      KM04W01.KM04WCMP = KUCREC.KUCCOID;
      TA1REC.TA1TBLKE = KM04W01.KM04WKEY;
      XSSM003(); /* abort routine*/
    end
  end
end // end KM04S66

// write bill group audit recs
Function KM04S67()
  ;
  KUZREC.XXXTBLNM = "VCMPNY01"; /* move tbl name to audit rec*/
  KUZREC.KUZDATA = KUCREC.KUCGRP; /* move after data*/
  ;
  KUZREC.XXXUSER = COMMAREA.CAUSERID; /* move user id to audit rec*/
  KUZREC.KUCCOID = KM04W01.NLAINTGR; /* move co id to audit rec*/
  ;
   /* note: change time should be correct, xx0x was called just*/
        /* before update occured.*/
  ;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT; /* move set up date to audit rec*/
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* move time to audit rec*/
  KUZREC.KUZBFCD = "A"; /* move after-code*/
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM04   ";
    TA1REC.TA1LOCAT[1] = "KM04S64  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VBLGRP01 ";
    TA1REC.TA1MAP = "KM04M000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VBLGRP01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod to add*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    XSSM003(); /* abort*/
  end
  ;
  KUZREC.KUZBFCD = "B"; /* move before-code*/
  KUZREC.KUZDATA = KM04W01.KUZDATA; /* move data to audit record*/
  KUZREC.XXXUSER = COMMAREA.CAUSERID; /* move user id to audit rec*/
  KUZREC.KUCCOID = KM04W01.NLAINTGR; /* move co id to audit rec*/
  ;
   /* note: change time should be correct, xx0x was called just*/
        /* before update occured.*/
  ;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT; /* move set up date to audit rec*/
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* move time to audit rec*/
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod to add*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    TA1REC.TA1LOC = "WRITE AUDIT";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUAUD01";
    TA1REC.TA1PGMNM = "KM04S64";
    KM04W01.KM04WCMP = KUCREC.KUCCOID;
    TA1REC.TA1TBLKE = KM04W01.KM04WKEY;
    XSSM003(); /* abort*/
  end
  ;
end // end KM04S67

// handle any special entries
Function KM04S70()
  KM04W01.CATOAP = KM04M001.CATOAP;
  ;
  if (converseVar.eventKey is enter)
    if (KM04W01.CATOAP != " ")
      KM04S71(); /* handle fast-path option entry*/
    else
      return; /* no special functions...go back*/
    end
  else
    if (converseVar.eventKey is pa2) /* if we want to refresh the screen*/
      KM04W01.NLAINTGR = 0;
      KM04S10(); /* and do the edit again*/
    else
      if (KM04W01.CATOAP != " ")
        converseLib.validationFailed(29); /* can't use fast-path and pf-key*/
        set KM04M001.CATOAP cursor, bold;
      else
        KM04S72(); /* handle pf key entry*/
      end
    end
  end
  ;
  ;
  ;
end // end KM04S70

// handle fast-path option entry
Function KM04S71()
  ;
  if (KM04M001.CATOAP != " ")
    COMMAREA.CATOAP = KM04M001.CATOAP;
    COMMAREA.CAITEM = KM04M001.CAITEM;
    XSEXIT(); /* transfer to requested appl.*/
    set KM04M001.CATOAP cursor, bold;
    exit stack;
  end
  ;
end // end KM04S71

// handle any pf key entry
Function KM04S72()
   /* ************************************************************/
   /* *   We get here because a pf-key has been entered...*/
   /* *   The valid pf-keys are:   pf1, pf3, pf4, pf5, pf12*/
   /* **/
   /* **/
   /* ***********************************************************/
  ;
  ;
  ;
   /* IF KM04W01.KMEDITSW = 'EDIT OK' ;if there's maint pending*/
    /* IF EZEAID IS PF1;*/
      /* OR EZEAID IS PF3;*/
      /* OR EZEAID IS PF4;*/
      /* OR EZEAID IS PF5;*/
      /* MOVE 47 TO EZEMNO ;can't exit appl w/maint pending*/
      /* EZEFLO;*/
    /* END ;*/
   /* END ;*/
  ;
  ;
  if (converseVar.eventKey is pf3)
    KM04S73();
  end /* handle entry of pf3*/
  if (converseVar.eventKey is pf5)
    KM04S75();
  end /* handle entry of pf5*/
  if (converseVar.eventKey is pf4)
    XSPF4();
  end /* handle entry of pf4*/
  if (converseVar.eventKey is pf1)
    XSPF1();
  end /* handle entry of pf1*/
  if (converseVar.eventKey is pf12) /* if user wants to update*/
    if (KM04W01.KM04WESW == "EDIT OK") /* and the edits were ok*/
      KM04W01.KM04WESW = "UPDATE"; /* set switch to update*/
      KM04S15(); /* edit the address*/
      if (converseVar.validationMsgNum == 0) /* if the edit is ok*/
        move XA1REC to KM04M001 withV60Compat;
        KM04S60(); /* ;  do the update*/
        if (converseVar.validationMsgNum == 0) /* if the update is ok*/
          if (KM04W01.KM04WMOD == "X") /* city or state modified*/
            KM04S90(); /* select all stores for company*/
          end
          converseLib.validationFailed(29); /* give record updated message*/
          set KM04M001.NLAINTGR cursor, normal;
          set KM04M001.NLAADRID normal;
          KM04W01.NLAINTGR = 0;
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.commit();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
        else
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.rollback();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
        end
      end
    else
      converseLib.validationFailed(101); /* cant update till edit ok*/
    end
  end
  ;
  if (COMMAREA.CASECRC == 0
   && converseVar.validationMsgNum == 0)
    converseLib.validationFailed(3); /* pfkey not supported*/
  end
  ;
  exit stack;
  ;
  ;
end // end KM04S72

// handle pf3 key
Function KM04S73()
  COMMAREA.CATOAP = "KM01"; /* go to master menu*/
  XSEXIT();
  ;
end // end KM04S73

// handle pf5 entry
Function KM04S75()
   /* ************************************************************/
   /* *   For this application, pf5 takes you back to*/
   /* *   the Customer Main Menu (ku0m).*/
   /* **/
   /* ************************************************************/
  ;
  COMMAREA.CATOAP = "KU0M"; /* set up the commarea to-application*/
  XSEXIT(); /* and go to the customer main menu.*/
  ;
end // end KM04S75

// select all stores for company
Function KM04S90()
  ;
  KUMREC.KUCCOID = KM04M001.NLAINTGR;
  call "IO0340" ("SS", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    KM04W01.KM04WEND = "N";
    while (KM04W01.KM04WEND == "N")
      KM04S95();
    end
  else
    TA1REC.TA1LOC = "SELECT SET STORE";
    TA1REC.TA1PGMNM = "KM04S90";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VSTORE01";
    KM04W01.KM04WCMP = KUMREC.KUCCOID;
    TA1REC.TA1TBLKE = KM04W01.KM04WKEY;
    XSSM003();
  end
  ;
  KM04W01.KM04WMOD = " ";
  ;
end // end KM04S90

// update store short city/state
Function KM04S95()
  ;
  call "IO0340" ("SN", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      KM04W01.KM04WEND = "Y";
      return;
    else
      TA1REC.TA1LOC = "SELECT NEXT STORE";
      TA1REC.TA1PGMNM = "KM04S95";
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VSTORE01";
      KM04W01.KM04WCMP = KUMREC.KUCCOID;
      KM04W01.KM04WSTR = KUMREC.KUMSTRID;
      TA1REC.TA1TBLKE = KM04W01.KM04WKEY;
      XSSM003();
    end
  end
  ;
  if (KUMREC.KUMSTAID == KM04M001.NLAADRID)
    /* next sentence*/
  else
    return;
  end
  ;
  XX0XS01();
  ;
  set KUZREC empty;
  KUZREC.XXXTBLNM = "VSTORE01";
  KUZREC.KUZDATA = KUMREC.KUMGRP;
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUMREC.KUCCOID;
  KUZREC.KUMSTRID = KUMREC.KUMSTRID;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZBFCD = "B";
  KUZREC.KUZTYPE = "C";
  ;
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM04   ";
    TA1REC.TA1LOCAT[1] = "KM04S95  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VSTORE01 ";
    TA1REC.TA1MAP = "KM04M000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VSTORE01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOC = "INSERT AUDIT BEFORE";
    TA1REC.TA1PGMNM = "KM04S95";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUAUD01";
    KM04W01.KM04WCMP = KUMREC.KUCCOID;
    KM04W01.KM04WSTR = KUMREC.KUMSTRID;
    TA1REC.TA1TBLKE = KM04W01.KM04WKEY;
    XSSM003();
  end
  ;
  KU0XW30.KU0XW3GP = KM04M001.XXX-ADDR6;
  call "KU0X" (KU0XW30, KU0XW10) {isNoRefresh = yes};
  KUMREC.KUMCITYS = KU0XW10.KU0XW1GP;
  KUMREC.KUMXSTCD = KM04M001.XSTCD;
  KUMREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  KUMREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  call "IO0340" ("U ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOC = "UPDATE STORE";
    TA1REC.TA1PGMNM = "KM04S95";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VSTORE01";
    KM04W01.KM04WCMP = KUMREC.KUCCOID;
    KM04W01.KM04WSTR = KUMREC.KUMSTRID;
    TA1REC.TA1TBLKE = KM04W01.KM04WKEY;
    XSSM003();
  end
  ;
  XX0XS01();
  ;
  set KUZREC empty;
  KUZREC.XXXTBLNM = "VSTORE01";
  KUZREC.KUZDATA = KUMREC.KUMGRP;
  KUZREC.XXXUSER = COMMAREA.CAUSERID;
  KUZREC.KUCCOID = KUMREC.KUCCOID;
  KUZREC.KUMSTRID = KUMREC.KUMSTRID;
  ;
  KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
  KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  KUZREC.KUZBFCD = "A";
  KUZREC.KUZTYPE = "C";
  ;
  if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
    KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
    KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
  else
    KUZREC.KUZSSEQ = 0;
    KUZREC.KUZLEN = 0;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "KM04   ";
    TA1REC.TA1LOCAT[1] = "KM04S95  ";
    TA1REC.TA1LOCAT[2] = "KIZTBL   ";
    TA1REC.TA1LOCAT[3] = "VSTORE01 ";
    TA1REC.TA1MAP = "KM04M000";
    TA1REC.TA1DBASE = "DCUST.";
    TA1REC.TA1TBLVU = "VSTORE01";
    TA1TBLKE = "TABLE NOT FOUND";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
  end
  ;
  call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOC = "INSERT AUDIT AFTER";
    TA1REC.TA1PGMNM = "KM04S95";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCUAUD01";
    KM04W01.KM04WCMP = KUMREC.KUCCOID;
    KM04W01.KM04WSTR = KUMREC.KUMSTRID;
    TA1REC.TA1TBLKE = KM04W01.KM04WKEY;
    XSSM003();
  end
  ;
end // end KM04S95

Record KM04W01 type basicRecord
  5 KM04WREC KM04WREC ; 
    10 KM04WGRP KM04WGRP ; 
    10 KUZDATA KUZDATA ; 
    10 XXX-ADDR1 XXX-ADDR1 ; 
    10 XXX-ADDR2 XXX-ADDR2 ; 
    10 XXX-ADDR3 XXX-ADDR3 ; 
    10 XXX-ADDR4 XXX-ADDR4 ; 
    10 XXX-ADDR5 XXX-ADDR5 ; 
    10 XXX-ADDR6 XXX-ADDR6 ; 
    10 XATCD XATCD ; 
    10 CAMSG CAMSG ; 
    10 KM04WESW KM04WESW ; 
    10 KM04WBSW KM04WBSW ; 
    10 KM04WPSW KM04WPSW ; 
    10 KM04WFSW KM04WFSW ; 
    10 KM04WVAL KM04WVAL ; 
    10 KM04WIN1 KM04WIN1 ; 
    10 KM04WIN2 KM04WIN2 ; 
    10 XLBCD XLBCD ; 
    10 KULAAID KULAAID ; 
    10 XXXZIP XXXZIP ; 
      15 XLBZPFX XLBZPFX ; 
      15 * char(7) ; 
    10 NLAINTGR NLAINTGR ; 
    10 KM04WCID KM04WCID ; 
      15 KM04WCLT KM04WCLT [7] ; 
    10 KM04WAID KM04WAID ; 
      15 KM04WALT KM04WALT [4] ; 
    10 KUCCONM KUCCONM ; 
    10 KUCMADID KUCMADID ; 
    10 NLAADRID NLAADRID ; 
    10 KM04WFNO KM04WFNO ; 
    10 CATOAP CATOAP ; 
    10 KM04WMOD KM04WMOD ; 
    10 KM04WEND KM04WEND ; 
    10 KM04WKEY KM04WKEY ; 
      15 KM04WCMP KM04WCMP ; 
      15 * char(1) ; 
      15 KM04WSTR KM04WSTR ; 
      15 * char(1) ; 
      15 KM04WDPT KM04WDPT ; 
      15 * char(1) ; 
      15 KM04WGPC KM04WGPC ; 
      15 * char(1) ; 
      15 KM04WADR KM04WADR ; 
end // end KM04W01

// address id
DataItem KM04WADR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage number
DataItem KM04WAID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// individual numbers
DataItem KM04WALT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// build screen switch
DataItem KM04WBSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage number
DataItem KM04WCID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// individual numbers
DataItem KM04WCLT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// company id
DataItem KM04WCMP num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dept id
DataItem KM04WDPT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of stores sw
DataItem KM04WEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// edit switch
DataItem KM04WESW char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of fields
DataItem KM04WFNO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record found flag
DataItem KM04WFSW num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// gpc
DataItem KM04WGPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// statement group name
DataItem KM04WGRP char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index
DataItem KM04WIN1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem KM04WIN2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem KM04WKEY char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// modify sw for city
DataItem KM04WMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// maintenance pending flag
DataItem KM04WPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// credit working storage
DataItem KM04WREC char(835)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// store id
DataItem KM04WSTR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// valid field counter
DataItem KM04WVAL num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

