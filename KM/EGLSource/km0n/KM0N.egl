package km0n;

import corpcom2.XX0XW01;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.*;
import corpcom6.SQLCA;
import corpx1.XAUTBL;
import corpx1.XCTTBL;
import corpx1.XPTTBL;
import ku.common.KUCCOID;
import ku.common.KUCREC;
import ta.common.TA1REC;
import vv.common.VNLXPT01;
//*** PROGRAM=KM0N ****
// ;
// This application will only be used be NIL users.
// The application is to do all maintence on all Nil Terms.
// ;
// Maintenance Log:
//  8/30/89 - DSALZW - created application.
// 10/10/89 - DSALZW - add edit to verify the company is NIL
// 01/16/90 - jfiat  - db changes
// 07/03/90 - jjudki - add generic gpc 01,04,07 updates
// 06/19/91 - dsalzw - chg security so appl could be put into
//                     security table 2 for inquiry users
// 10/01/93 - CHELLM - CSP 4.1 Conversion.
// 11/15/93 - CHELLM - fix commarea redefine entry logic.
// 03/11/94 - CHELLM - Database Changes;
//                     increased min order value defaults
// *Y2KFIX   12/05/97  DKENNY  Y2K MODIFICATIONS MADE:
// *                   Application regenerated to pick up new
// *                   XX0XS01.
// *********************
Program KM0N type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KM0NW01 KM0NW01; // record
  KUCREC KUCREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VNLXPT01 VNLXPT01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XAUTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XPTTBL {deleteAfterUse = yes}; // table
  use KM0NM.KM0NM010 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    KM0N000: KM0N000();
    goto KM0N100; /* go on to km0n nil terms screen*/
    KM0N100: KM0N100();

    goto KM0N100; /* customer nil terms screen*/


  end // end main
end // end KM0N

// km0n initialization process
Function KM0N000()
   /* *********************************************/
    /* initialization of variables used in the  **/
    /* orders released process                  **/
   /* *********************************************/


  XSENTRY();

  XSSEGTR(); /* set segmented transaction id*/

  set KM0NW01 empty; /* working storage 1*/
  set TA1REC empty;
  set SQLCA empty;
  set ERRSQLCA empty;
  set KUCREC empty; /* company record*/
  set XX0XW01 empty;
  set VNLXPT01 empty; /* nil terms record*/

  set KM0NM010 initial; /* customer nil terms screen*/

  KM0NW01.KM0NWADD = "Y"; /* default add flag*/

   /* ********* set screen security*/
  if (COMMAREA.CACHGFL == "Y")
    KM0N115(); /* set change security*/
  else
    KM0N120(); /* set inquiry security*/
  end


  KM0NW01.KM0NWUSR = COMMAREA.CAUSERA; /* key from add menu*/
  if (KM0NW01.KM0NWUSR != " ")
    if (KM0NW01.KM0NWCNO-CHAR is numeric)
      KM0NM010.KUCCOID = KM0NW01.KM0NWCNO;
    else
      KM0NM010.KUCCOID = 0;
      KM0NW01.KM0NWCNO = 0;
    end
  else
    KM0NM010.KUCCOID = 0; /* key from chg menu*/
    KM0NW01.KM0NWCNO = 0; /* key from chg menu*/
  end

  COMMAREA.CAUSERA = COMMAREA.CAFROMAP; /* store prev application*/


  if (KM0NM010.KUCCOID > 0)
    KM0NW01.KM0NWERR = "N";
    KM0N200(); /* build new screen - new customer*/
  end


  set KM0NM010.KUCCOID cursor, initialAttributes;


  KM0NM010.XXXSCRDT = VGVar.currentShortGregorianDate;


end // end KM0N000

// cust nil terms screen
Function KM0N100()




  converse KM0NM010 ;


  KM0NM010.VAGen_EZEMSG = " ";
  KM0NW01.KM0NWERR = "N";


  KM0N110(); /* edit special keys/fast paths*/


  if (KM0NW01.KM0NWERR == "N") /* if no errors*/
    if (KM0NM010.KUCCOID == KM0NW01.KUCCOID
     && KM0NM010.KUCCOID > 0)
       /* next sentence*/
    else
      KM0N200(); /* build new screen - new customer*/
    end
  end


  if (KM0NW01.KM0NWERR == "N" /* if no errors*/
   && COMMAREA.CACHGFL == "Y") /* and change security*/
    KM0N300(); /* edit the nil terms*/
  end


  if (KM0NW01.KM0NWERR == "N" /* if no errors*/
   && converseVar.eventKey is pf12) /* and pf12 was pressed*/
    KM0N400(); /* write to the nil terms*/
    KM0NW01.KM0NWADD = "Y"; /* terms added*/
    if (COMMAREA.CAFROMAP == "KA0C") /* from company add*/
      COMMAREA.CATOAP = "KA0S";
      COMMAREA.CAUSERA = KM0NW01.KM0NWUSR;
      COMMAREA.CACURRAP = "KA0C";
      XSEXIT();
      COMMAREA.CACURRAP = "KM0N";
      KM0NM010.VAGen_EZEMSG = COMMAREA.CAMSG;
      KM0NW01.KM0NWERR = "Y";
    end
  end

end // end KM0N100

// edit special keys
Function KM0N110()
   /* ************************************************/
     /* edit all special entry keys                **/
   /* ************************************************/


   /* **************************************/
   /* edit pa2 key*/
   /* **************************************/

  if (converseVar.eventKey is pa2)
    KM0NW01.KM0NWERR = "N"; /* rebuild screen*/
    KM0NW01.KUCCOID = 0; /* from database*/
    return;
  end

   /* **************************************/
   /* edit enter  key*/
   /* **************************************/

  if (converseVar.eventKey is enter)
    if (KM0NM010.CATOAP > " ") /* fast path*/
      COMMAREA.CATOAP = KM0NM010.CATOAP;
      COMMAREA.CAITEM = KM0NM010.CAITEM;
      COMMAREA.CAFROMAP = "KM0N";
      XSEXIT();
      converseLib.validationFailed(40); /* invalid fast path*/
      KM0NW01.KM0NWERR = "Y";
      set KM0NM010.CATOAP cursor, bold;
    else
      set KM0NM010.CATOAP initialAttributes;
    end
    return;
  else
    if (KM0NM010.CATOAP > " ")
      KM0NW01.KM0NWERR = "Y";
      converseLib.validationFailed(48); /* can not fast path and use pf keys*/
      set KM0NM010.CATOAP cursor, bold;
      return;
    else
      set KM0NM010.CATOAP modified;
    end
  end


   /* **************************************/
   /* edit pf12 key*/
   /* **************************************/

  if (converseVar.eventKey is pf12)
    return;
  end

   /* **************************************/
   /* edit pf1 key*/
   /* **************************************/

  if (converseVar.eventKey is pf1) /* help screens*/
    COMMAREA.CACURRAP = "KM0N";
    XSPF1();
    KM0NM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    KM0NW01.KM0NWERR = "Y";
    return;
  end

   /* **************************************/
   /* edit pf3 key*/
   /* **************************************/

  if (converseVar.eventKey is pf3) /* back to prev menu*/
    if (KM0NW01.KM0NWADD == "Y" /* are terms present*/
     || COMMAREA.CACHGFL == "N") /* or only inquiry security*/
      COMMAREA.CATOAP = COMMAREA.CAUSERA;
      COMMAREA.CAUSERA = KM0NM010.KUCCOID;
      COMMAREA.CAFROMAP = "KM0N";
      XSEXIT();
      KM0NM010.VAGen_EZEMSG = COMMAREA.CAMSG;
      KM0NW01.KM0NWERR = "Y";
    else
      KM0NW01.KM0NWERR = "Y";
      converseLib.validationFailed(276); /* can not exit w/o terms added*/
      return;
    end
  end

   /* **************************************/
   /* edit pf4 key*/
   /* **************************************/

  if (converseVar.eventKey is pf4) /* back to goal menu*/
    if (KM0NW01.KM0NWADD == "Y" /* are terms present*/
     || COMMAREA.CACHGFL == "N") /* or only inquiry security*/
      COMMAREA.CAFROMAP = "KM0N";
      XSPF4();
      KM0NM010.VAGen_EZEMSG = COMMAREA.CAMSG;
      KM0NW01.KM0NWERR = "Y";
    else
      KM0NW01.KM0NWERR = "Y";
      converseLib.validationFailed(276); /* can not exit w/o terms added*/
      return;
    end
  end

   /* **************************************/
   /* edit pf5 key*/
   /* **************************************/

  if (converseVar.eventKey is pf5) /* back to cust menu*/
    if (KM0NW01.KM0NWADD == "Y" /* are terms present*/
     || COMMAREA.CACHGFL == "N") /* or only inquiry security*/
      COMMAREA.CATOAP = "KU0M";
      COMMAREA.CAFROMAP = "KM0N";
      XSEXIT();
      KM0NM010.VAGen_EZEMSG = COMMAREA.CAMSG;
      KM0NW01.KM0NWERR = "Y";
    else
      KM0NW01.KM0NWERR = "Y";
      converseLib.validationFailed(276); /* can not exit w/o terms added*/
      return;
    end
  end

  converseLib.validationFailed(3); /* invalid pf key message*/
  KM0NW01.KM0NWERR = "Y";



end // end KM0N110

// set change security
Function KM0N115()
   /* *****************************************************/
   /* * km0n115 - set fields to defined*/
   /* *****************************************************/

  set KM0NM010.XPTCD[1] initialAttributes;
  set KM0NM010.NILLOVAL[1] initialAttributes;

  set KM0NM010.XPTCD[2] initialAttributes;
  set KM0NM010.NILLOVAL[2] initialAttributes;

  set KM0NM010.XPTCD[3] initialAttributes;
  set KM0NM010.NILLOVAL[3] initialAttributes;

  set KM0NM010.XPTCD[4] initialAttributes;
  set KM0NM010.NILLOVAL[4] initialAttributes;

  set KM0NM010.XPTCD[5] initialAttributes;
  set KM0NM010.NILLOVAL[5] initialAttributes;

  set KM0NM010.XPTCD[6] initialAttributes;
  set KM0NM010.NILLOVAL[6] initialAttributes;

  set KM0NM010.XPTCD[7] initialAttributes;
  set KM0NM010.NILLOVAL[7] initialAttributes;

  set KM0NM010.XPTCD[8] initialAttributes;
  set KM0NM010.NILLOVAL[8] initialAttributes;

  set KM0NM010.XPTCD[9] initialAttributes;
  set KM0NM010.NILLOVAL[9] initialAttributes;

  set KM0NM010.XPTCD[10] initialAttributes;
  set KM0NM010.NILLOVAL[10] initialAttributes;

  set KM0NM010.XPTCD[11] initialAttributes;
  set KM0NM010.NILLOVAL[11] initialAttributes;

  set KM0NM010.XPTCD[12] initialAttributes;
  set KM0NM010.NILLOVAL[12] initialAttributes;


end // end KM0N115

// set inquiry security
Function KM0N120()
   /* *****************************************************/
   /* * km0n120 - set fields to autoskip*/
   /* *****************************************************/

  set KM0NM010.XPTCD[1] skip;
  set KM0NM010.NILLOVAL[1] skip;

  set KM0NM010.XPTCD[2] skip;
  set KM0NM010.NILLOVAL[2] skip;

  set KM0NM010.XPTCD[3] skip;
  set KM0NM010.NILLOVAL[3] skip;

  set KM0NM010.XPTCD[4] skip;
  set KM0NM010.NILLOVAL[4] skip;

  set KM0NM010.XPTCD[5] skip;
  set KM0NM010.NILLOVAL[5] skip;

  set KM0NM010.XPTCD[6] skip;
  set KM0NM010.NILLOVAL[6] skip;

  set KM0NM010.XPTCD[7] skip;
  set KM0NM010.NILLOVAL[7] skip;

  set KM0NM010.XPTCD[8] skip;
  set KM0NM010.NILLOVAL[8] skip;

  set KM0NM010.XPTCD[9] skip;
  set KM0NM010.NILLOVAL[9] skip;

  set KM0NM010.XPTCD[10] skip;
  set KM0NM010.NILLOVAL[10] skip;

  set KM0NM010.XPTCD[11] skip;
  set KM0NM010.NILLOVAL[11] skip;

  set KM0NM010.XPTCD[12] skip;
  set KM0NM010.NILLOVAL[12] skip;


end // end KM0N120

// build nil terms screen
Function KM0N200()
   /* **********************************************/
    /* build the nil terms screen                **/
   /* **********************************************/


   /* ********************************************/
   /* edit customer number                   **/
   /* ********************************************/

  if (KM0NM010.KUCCOID > 0)
    KM0NW01.KUCCOID = KM0NM010.KUCCOID;
    KM0NW01.KM0NWADD = "N"; /* reset add flag*/
    set KM0NM010 initial;
    KM0NM010.KUCCOID = KM0NW01.KUCCOID;
    KM0N210(); /* get company*/
    if (SQLCA.VAGen_SQLCODE == 100)
      KM0NW01.KM0NWADD = "Y"; /* reset add flag*/
      KM0NW01.KUCCOID = 0;
      KM0NW01.KM0NWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(25); /* invalid company*/
      set KM0NM010.KUCCOID cursor, bold;
      return;
    end
  else
    KM0NW01.KM0NWERR = "Y"; /* set error flag*/
    converseLib.validationFailed(114); /* company is required*/
    set KM0NM010.KUCCOID cursor, bold;
    return;
  end


  if (KUCREC.XAUCD in XAUTBL.XAUCD
   && XAUTBL.XATCD[sysVar.arrayIndex] == "03")
    /* next sentence*/
  else
    KM0NW01.KM0NWADD = "Y"; /* reset add flag*/
    KM0NW01.KUCCOID = 0;
    KM0NW01.KM0NWERR = "Y"; /* set error flag*/
    converseLib.validationFailed(275); /* company must be nil*/
    set KM0NM010.KUCCOID cursor, bold;
    return;
  end

  KM0NM010.KUCCONM = KUCREC.KUCCONM;

   /* ********************************************/
   /* defualt country from company           **/
   /* ********************************************/

  KM0NM010.XCTCD = KUCREC.XCTCD;

  if (KUCREC.XCTCD in XCTTBL.XCTCD
   && KUCREC.XCTCD != "99")
    KM0NM010.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
  else
    KM0NM010.XCTDESC = "COUNTRY NOT FOUND ";
  end



   /* ********************************************/
   /* get nil terms                          **/
   /* ********************************************/

  KM0N230(); /* get nil terms*/



   /* ********************************************/
   /* set screen security*/
   /* ********************************************/

  if (COMMAREA.CACHGFL == "Y")
    KM0N115(); /* set change security*/
  else
    KM0N120(); /* set inquiry security*/
  end


end // end KM0N200

// get company info
Function KM0N210()
   /* ********************************************************/
   /* *   get company record*/
   /* ********************************************************/


  KUCREC.KUCCOID = KM0NW01.KUCCOID;

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0N210";
    TA1REC.TA1LOCAT[4] = "IO0240";
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCMPNY01";
    TA1REC.TA1MAP = " ";
    KM0NW01.KM0NWCID = KUCREC.KUCCOID;
    TA1REC.TA1TBLKE = KM0NW01.KM0NWCID;
    TA1LOC = "READING DB2 TBL DCUST.VCMPNY";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* print diagnostic screen*/
    XSPF4();
  end


end // end KM0N210

// get all nil terms
Function KM0N230()


  if (KM0NW01.KM0NWERR == "N") /* no errors*/

    KM0N240(); /* load future terms*/

    KM0N260(); /* load prop terms*/

    KM0N280(); /* load generic gpc terms*/

    KM0N270(); /* load default terms*/

  end


end // end KM0N230

// load future terms
Function KM0N240()


   /* --------- get future ftwr terms -----------------------*/

  VNLXPT01.KUCCOID = KM0NM010.KUCCOID;
  VNLXPT01.YSMXOB = "F1";
  VNLXPT01.XGPCD = "02";
  VNLXPT01.NILLOVAL = 0;

  KM0N250(); /* get first term*/

  if (SQLCA.VAGen_SQLCODE == 0)
    KM0NW01.KM0NWADD = "Y"; /* terms found*/
    KM0NM010.NILLOVAL[1] = VNLXPT01.NILLOVAL;
    KM0NM010.NILHIVAL[1] = 9999999.99;
    KM0NM010.XPTCD[1] = VNLXPT01.XPTCD;
    if (VNLXPT01.XPTCD in XPTTBL.XPTCD
     && VNLXPT01.XPTCD != "99")
      KM0NM010.XPTDESC[1] = XPTTBL.XPTDESC[sysVar.arrayIndex];
    else
      KM0NM010.XPTDESC[1] = "PAYMENT TERMS NOT FOUND";
    end
    VNLXPT01.KUCCOID = KM0NM010.KUCCOID;
    VNLXPT01.YSMXOB = "F1";
    VNLXPT01.XGPCD = "02";
    VNLXPT01.NILLOVAL = 9999999.99;

    KM0N250(); /* get second term*/

    if (SQLCA.VAGen_SQLCODE == 0
     && VNLXPT01.NILLOVAL > 0) /* there is a second term*/
      KM0NM010.NILLOVAL[2] = VNLXPT01.NILLOVAL;
      KM0NM010.NILHIVAL[1] = VNLXPT01.NILLOVAL - .01;
      KM0NM010.NILHIVAL[2] = 9999999.99;
      KM0NM010.XPTCD[2] = VNLXPT01.XPTCD;
      if (VNLXPT01.XPTCD in XPTTBL.XPTCD
       && VNLXPT01.XPTCD != "99")
        KM0NM010.XPTDESC[2] = XPTTBL.XPTDESC[sysVar.arrayIndex];
      else
        KM0NM010.XPTDESC[2] = "PAYMENT TERMS NOT FOUND";
      end

    end
  end



   /* --------- get future aprl terms -----------------------*/

  VNLXPT01.KUCCOID = KM0NM010.KUCCOID;
  VNLXPT01.YSMXOB = "F1";
  VNLXPT01.XGPCD = "03";
  VNLXPT01.NILLOVAL = 0;

  KM0N250(); /* get first term*/

  if (SQLCA.VAGen_SQLCODE == 0)
    KM0NW01.KM0NWADD = "Y"; /* terms found*/
    KM0NM010.NILLOVAL[3] = VNLXPT01.NILLOVAL;
    KM0NM010.NILHIVAL[3] = 9999999.99;
    KM0NM010.XPTCD[3] = VNLXPT01.XPTCD;
    if (VNLXPT01.XPTCD in XPTTBL.XPTCD
     && VNLXPT01.XPTCD != "99")
      KM0NM010.XPTDESC[3] = XPTTBL.XPTDESC[sysVar.arrayIndex];
    else
      KM0NM010.XPTDESC[3] = "PAYMENT TERMS NOT FOUND";
    end
    VNLXPT01.KUCCOID = KM0NM010.KUCCOID;
    VNLXPT01.YSMXOB = "F1";
    VNLXPT01.XGPCD = "03";
    VNLXPT01.NILLOVAL = 9999999.99;

    KM0N250(); /* get second term*/

    if (SQLCA.VAGen_SQLCODE == 0
     && VNLXPT01.NILLOVAL > 0) /* there is a second term*/
      KM0NM010.NILLOVAL[4] = VNLXPT01.NILLOVAL;
      KM0NM010.NILHIVAL[3] = VNLXPT01.NILLOVAL - .01;
      KM0NM010.NILHIVAL[4] = 9999999.99;
      KM0NM010.XPTCD[4] = VNLXPT01.XPTCD;
      if (VNLXPT01.XPTCD in XPTTBL.XPTCD
       && VNLXPT01.XPTCD != "99")
        KM0NM010.XPTDESC[4] = XPTTBL.XPTDESC[sysVar.arrayIndex];
      else
        KM0NM010.XPTDESC[4] = "PAYMENT TERMS NOT FOUND";
      end

    end
  end

end // end KM0N240

// fetch the first term
Function KM0N250()
   /* ********************************************************/
   /* *   get the next term record*/
   /* ********************************************************/


  call "IO4490" ("SF", SQLCA, VNLXPT01) {isNoRefresh = yes, isExternal = yes}; /* read nil terms*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0N250";
    TA1REC.TA1LOCAT[4] = "IO4490";
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNLXPT01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1TBLKE = VNLXPT01.NILGROUP;
    TA1LOC = "READING DB2 TBL DNILO.VNLXPT01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* print diagnostic screen*/
    XSPF4();
  end



end // end KM0N250

// load prop terms
Function KM0N260()


   /* --------- get prop ftwr terms -----------------------*/

  VNLXPT01.KUCCOID = KM0NM010.KUCCOID;
  VNLXPT01.YSMXOB = "P1";
  VNLXPT01.XGPCD = "02";
  VNLXPT01.NILLOVAL = 0;

  KM0N250(); /* get first term*/

  if (SQLCA.VAGen_SQLCODE == 0)
    KM0NW01.KM0NWADD = "Y"; /* nil terms found*/
    KM0NM010.NILLOVAL[5] = VNLXPT01.NILLOVAL;
    KM0NM010.NILHIVAL[5] = 9999999.99;
    KM0NM010.XPTCD[5] = VNLXPT01.XPTCD;
    if (VNLXPT01.XPTCD in XPTTBL.XPTCD
     && VNLXPT01.XPTCD != "99")
      KM0NM010.XPTDESC[5] = XPTTBL.XPTDESC[sysVar.arrayIndex];
    else
      KM0NM010.XPTDESC[5] = "PAYMENT TERMS NOT FOUND";
    end
    VNLXPT01.KUCCOID = KM0NM010.KUCCOID;
    VNLXPT01.YSMXOB = "P1";
    VNLXPT01.XGPCD = "02";
    VNLXPT01.NILLOVAL = 9999999.99;

    KM0N250(); /* get second term*/

    if (SQLCA.VAGen_SQLCODE == 0
     && VNLXPT01.NILLOVAL > 0) /* there is a second term*/
      KM0NM010.NILLOVAL[6] = VNLXPT01.NILLOVAL;
      KM0NM010.NILHIVAL[5] = VNLXPT01.NILLOVAL - .01;
      KM0NM010.NILHIVAL[6] = 9999999.99;
      KM0NM010.XPTCD[6] = VNLXPT01.XPTCD;
      if (VNLXPT01.XPTCD in XPTTBL.XPTCD
       && VNLXPT01.XPTCD != "99")
        KM0NM010.XPTDESC[6] = XPTTBL.XPTDESC[sysVar.arrayIndex];
      else
        KM0NM010.XPTDESC[6] = "PAYMENT TERMS NOT FOUND";
      end

    end
  end



   /* --------- get prop aprl terms -----------------------*/

  VNLXPT01.KUCCOID = KM0NM010.KUCCOID;
  VNLXPT01.YSMXOB = "P1";
  VNLXPT01.XGPCD = "03";
  VNLXPT01.NILLOVAL = 0;

  KM0N250(); /* get first term*/

  if (SQLCA.VAGen_SQLCODE == 0)
    KM0NW01.KM0NWADD = "Y"; /* nil terms found*/
    KM0NM010.NILLOVAL[7] = VNLXPT01.NILLOVAL;
    KM0NM010.NILHIVAL[7] = 9999999.99;
    KM0NM010.XPTCD[7] = VNLXPT01.XPTCD;
    if (VNLXPT01.XPTCD in XPTTBL.XPTCD
     && VNLXPT01.XPTCD != "99")
      KM0NM010.XPTDESC[7] = XPTTBL.XPTDESC[sysVar.arrayIndex];
    else
      KM0NM010.XPTDESC[7] = "PAYMENT TERMS NOT FOUND";
    end
    VNLXPT01.KUCCOID = KM0NM010.KUCCOID;
    VNLXPT01.YSMXOB = "P1";
    VNLXPT01.XGPCD = "03";
    VNLXPT01.NILLOVAL = 9999999.99;

    KM0N250(); /* get second term*/

    if (SQLCA.VAGen_SQLCODE == 0
     && VNLXPT01.NILLOVAL > 0) /* there is a second term*/
      KM0NM010.NILLOVAL[8] = VNLXPT01.NILLOVAL;
      KM0NM010.NILHIVAL[7] = VNLXPT01.NILLOVAL - .01;
      KM0NM010.NILHIVAL[8] = 9999999.99;
      KM0NM010.XPTCD[8] = VNLXPT01.XPTCD;
      if (VNLXPT01.XPTCD in XPTTBL.XPTCD
       && VNLXPT01.XPTCD != "99")
        KM0NM010.XPTDESC[8] = XPTTBL.XPTDESC[sysVar.arrayIndex];
      else
        KM0NM010.XPTDESC[8] = "PAYMENT TERMS NOT FOUND";
      end

    end
  end

end // end KM0N260

// load default terms
Function KM0N270()


   /* ----------- get default terms -----------------------*/

  VNLXPT01.KUCCOID = KM0NM010.KUCCOID;
  VNLXPT01.YSMXOB = "  ";
  VNLXPT01.XGPCD = "  ";
  VNLXPT01.NILLOVAL = 0;

  KM0N250(); /* get first term*/

  if (SQLCA.VAGen_SQLCODE == 0)
    KM0NW01.KM0NWADD = "Y"; /* nil term found*/
    KM0NM010.NILLOVAL[11] = VNLXPT01.NILLOVAL;
    KM0NM010.NILHIVAL[11] = 9999999.99;
    KM0NM010.XPTCD[11] = VNLXPT01.XPTCD;
    if (VNLXPT01.XPTCD in XPTTBL.XPTCD
     && VNLXPT01.XPTCD != "99")
      KM0NM010.XPTDESC[11] = XPTTBL.XPTDESC[sysVar.arrayIndex];
    else
      KM0NM010.XPTDESC[11] = "PAYMENT TERMS NOT FOUND";
    end
    VNLXPT01.KUCCOID = KM0NM010.KUCCOID;
    VNLXPT01.YSMXOB = "  ";
    VNLXPT01.XGPCD = "  ";
    VNLXPT01.NILLOVAL = 9999999.99;

    KM0N250(); /* get second term*/

    if (SQLCA.VAGen_SQLCODE == 0
     && VNLXPT01.NILLOVAL > 0) /* there is a second term*/
      KM0NM010.NILLOVAL[12] = VNLXPT01.NILLOVAL;
      KM0NM010.NILHIVAL[11] = VNLXPT01.NILLOVAL - .01;
      KM0NM010.NILHIVAL[12] = 9999999.99;
      KM0NM010.XPTCD[12] = VNLXPT01.XPTCD;
      if (VNLXPT01.XPTCD in XPTTBL.XPTCD
       && VNLXPT01.XPTCD != "99")
        KM0NM010.XPTDESC[12] = XPTTBL.XPTDESC[sysVar.arrayIndex];
      else
        KM0NM010.XPTDESC[12] = "PAYMENT TERMS NOT FOUND";
      end

    end
  end



end // end KM0N270

// load generic gpc terms
Function KM0N280()


   /* ----------- get generic gpc terms -------------------*/



   /* *******************************************************/
       /* Get Generic Gpc 01 terms*/
   /* which represents the same terms as Gpc 04, and 07*/
   /* *******************************************************/



  VNLXPT01.KUCCOID = KM0NM010.KUCCOID;
  VNLXPT01.YSMXOB = "  ";
  VNLXPT01.XGPCD = "01";
  VNLXPT01.NILLOVAL = 0;

  KM0N500(); /* get first term*/

  if (SQLCA.VAGen_SQLCODE == 0)
    KM0NW01.KM0NWADD = "Y"; /* nil term found*/
    KM0NM010.NILLOVAL[9] = VNLXPT01.NILLOVAL;
    KM0NM010.NILHIVAL[9] = 9999999.99;
    KM0NM010.XPTCD[9] = VNLXPT01.XPTCD;
    if (VNLXPT01.XPTCD in XPTTBL.XPTCD
     && VNLXPT01.XPTCD != "99")
      KM0NM010.XPTDESC[9] = XPTTBL.XPTDESC[sysVar.arrayIndex];
    else
      KM0NM010.XPTDESC[9] = "PAYMENT TERMS NOT FOUND";
    end
    VNLXPT01.KUCCOID = KM0NM010.KUCCOID;
    VNLXPT01.YSMXOB = "  ";
    VNLXPT01.XGPCD = "01";
    VNLXPT01.NILLOVAL = 9999999.99;

    KM0N250(); /* get second term*/

    if (SQLCA.VAGen_SQLCODE == 0
     && VNLXPT01.NILLOVAL > 0) /* there is a second term*/
      KM0NM010.NILLOVAL[10] = VNLXPT01.NILLOVAL;
      KM0NM010.NILHIVAL[9] = VNLXPT01.NILLOVAL - .01;
      KM0NM010.NILHIVAL[10] = 9999999.99;
      KM0NM010.XPTCD[10] = VNLXPT01.XPTCD;
      if (VNLXPT01.XPTCD in XPTTBL.XPTCD
       && VNLXPT01.XPTCD != "99")
        KM0NM010.XPTDESC[10] = XPTTBL.XPTDESC[sysVar.arrayIndex];
      else
        KM0NM010.XPTDESC[10] = "PAYMENT TERMS NOT FOUND";
      end

    end
  end




end // end KM0N280

// edit customer nil terms
Function KM0N300()

   /* **********************************************/
    /* edit the nil terms screen                 **/
   /* **********************************************/

  set KM0NM010.KUCCOID cursor, initialAttributes;


  if (KM0NW01.KM0NWERR == "N") /* no errors*/
    KM0N310(); /* edit future terms*/
  end

  if (KM0NW01.KM0NWERR == "N") /* no errors*/
    KM0N320(); /* edit prop terms*/
  end

  if (KM0NW01.KM0NWERR == "N") /* no errors*/
    KM0N340(); /* edit generic gpc terms*/
  end

  if (KM0NW01.KM0NWERR == "N") /* no errors*/
    KM0N330(); /* edit default terms*/
  end

  if (KM0NW01.KM0NWERR == "N") /* no errors*/
    converseLib.validationFailed(22); /* press pf12 to comfirm*/
  end


end // end KM0N300

// edit future terms
Function KM0N310()


   /* *********************************************/
   /* * edit future ftwr first range & term      **/
   /* *********************************************/
  if (KM0NM010.NILLOVAL[1] == 0)
    KM0NM010.NILLOVAL[1] = 0.00;
    KM0NM010.NILHIVAL[1] = 9999999.99;
    set KM0NM010.NILLOVAL[1] initialAttributes;
  else
    KM0NW01.KM0NWERR = "Y"; /* set error flag*/
    converseLib.validationFailed(273); /* first must be zero*/
    set KM0NM010.NILLOVAL[1] cursor, bold;
    return;
  end

  if (KM0NM010.XPTCD[1] in XPTTBL.XPTCD
   && KM0NM010.XPTCD != "99"
   && XPTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    if (XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "N" /* NIL Term*/
     || XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "B") /* or both terms*/
      KM0NM010.XPTDESC[1] = XPTTBL.XPTDESC[sysVar.arrayIndex];
      set KM0NM010.XPTCD[1] initialAttributes;
    else
      KM0NW01.KM0NWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(17); /* not a nil payment term*/
      set KM0NM010.XPTCD[1] cursor, bold;
      return;
    end
  else
    KM0NW01.KM0NWERR = "Y"; /* set error flag*/
    converseLib.validationFailed(17); /* invalid payment term*/
    set KM0NM010.XPTCD[1] cursor, bold;
    return;
  end

   /* *********************************************/
   /* * edit future ftwr second range & term     **/
   /* *********************************************/
  if (KM0NM010.NILLOVAL[2] == 0
   && KM0NM010.XPTCD[2] == "  ") /* no data*/
    KM0NM010.XPTDESC[2] = " ";
    set KM0NM010.XPTCD[2] initialAttributes;
    set KM0NM010.NILLOVAL[2] initialAttributes;
  else
    if (KM0NM010.NILLOVAL[2] > KM0NM010.NILLOVAL[1])
      KM0NM010.NILHIVAL[2] = 9999999.99;
      KM0NM010.NILHIVAL[1] = KM0NM010.NILLOVAL[2] - .01;
      set KM0NM010.NILLOVAL[2] initialAttributes;
    else
      KM0NW01.KM0NWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(274); /* second must be greater than first*/
      set KM0NM010.NILLOVAL[2] cursor, bold;
      return;
    end

    if (KM0NM010.XPTCD[2] in XPTTBL.XPTCD
     && KM0NM010.XPTCD != "99"
     && XPTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "N" /* NIL Term*/
       || XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "B") /* or both terms*/
        KM0NM010.XPTDESC[2] = XPTTBL.XPTDESC[sysVar.arrayIndex];
        set KM0NM010.XPTCD[2] initialAttributes;
      else
        KM0NW01.KM0NWERR = "Y"; /* set error flag*/
        converseLib.validationFailed(17); /* not a nil payment term*/
        set KM0NM010.XPTCD[2] cursor, bold;
        return;
      end
    else
      KM0NW01.KM0NWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(17); /* invalid payment term*/
      set KM0NM010.XPTCD[2] cursor, bold;
      return;
    end
  end



   /* *********************************************/
   /* * edit future aprl first range & term      **/
   /* *********************************************/
  if (KM0NM010.NILLOVAL[3] == 0)
    KM0NM010.NILLOVAL[3] = 0.00;
    KM0NM010.NILHIVAL[3] = 9999999.99;
    set KM0NM010.NILLOVAL[3] initialAttributes;
  else
    KM0NW01.KM0NWERR = "Y"; /* set error flag*/
    converseLib.validationFailed(273); /* first must be zero*/
    set KM0NM010.NILLOVAL[3] cursor, bold;
    return;
  end

  if (KM0NM010.XPTCD[3] in XPTTBL.XPTCD
   && KM0NM010.XPTCD != "99"
   && XPTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    if (XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "N" /* NIL Term*/
     || XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "B") /* or both terms*/
      KM0NM010.XPTDESC[3] = XPTTBL.XPTDESC[sysVar.arrayIndex];
      set KM0NM010.XPTCD[3] initialAttributes;
    else
      KM0NW01.KM0NWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(17); /* not a nil payment term*/
      set KM0NM010.XPTCD[3] cursor, bold;
      return;
    end
  else
    KM0NW01.KM0NWERR = "Y"; /* set error flag*/
    converseLib.validationFailed(17); /* invalid payment term*/
    set KM0NM010.XPTCD[3] cursor, bold;
    return;
  end

   /* *********************************************/
   /* * edit future aprl second range & term     **/
   /* *********************************************/
  if (KM0NM010.NILLOVAL[4] == 0
   && KM0NM010.XPTCD[4] == "  ") /* no data*/
    KM0NM010.XPTDESC[4] = " ";
    set KM0NM010.XPTCD[4] initialAttributes;
    set KM0NM010.NILLOVAL[4] initialAttributes;
  else
    if (KM0NM010.NILLOVAL[4] > KM0NM010.NILLOVAL[3])
      KM0NM010.NILHIVAL[4] = 9999999.99;
      KM0NM010.NILHIVAL[3] = KM0NM010.NILLOVAL[4] - .01;
      set KM0NM010.NILLOVAL[4] initialAttributes;
    else
      KM0NW01.KM0NWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(274); /* second must be greater than first*/
      set KM0NM010.NILLOVAL[4] cursor, bold;
      return;
    end

    if (KM0NM010.XPTCD[4] in XPTTBL.XPTCD
     && KM0NM010.XPTCD != "99"
     && XPTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "N" /* NIL Term*/
       || XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "B") /* or both terms*/
        KM0NM010.XPTDESC[4] = XPTTBL.XPTDESC[sysVar.arrayIndex];
        set KM0NM010.XPTCD[4] initialAttributes;
      else
        KM0NW01.KM0NWERR = "Y"; /* set error flag*/
        converseLib.validationFailed(17); /* not a nil payment term*/
        set KM0NM010.XPTCD[4] cursor, bold;
        return;
      end
    else
      KM0NW01.KM0NWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(17); /* invalid payment term*/
      set KM0NM010.XPTCD[4] cursor, bold;
      return;
    end
  end

end // end KM0N310

// edit prop terms
Function KM0N320()

   /* *********************************************/
   /* * edit prop ftwr first range & term        **/
   /* *********************************************/
  if (KM0NM010.NILLOVAL[5] == 0)
    KM0NM010.NILLOVAL[5] = 0;
    KM0NM010.NILHIVAL[5] = 9999999.99;
    set KM0NM010.NILLOVAL[5] initialAttributes;
  else
    KM0NW01.KM0NWERR = "Y"; /* set error flag*/
    converseLib.validationFailed(273); /* first must be zero*/
    set KM0NM010.NILLOVAL[5] cursor, bold;
    return;
  end

  if (KM0NM010.XPTCD[5] in XPTTBL.XPTCD
   && KM0NM010.XPTCD != "99"
   && XPTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    if (XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "N" /* NIL Term*/
     || XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "B") /* or both terms*/
      KM0NM010.XPTDESC[5] = XPTTBL.XPTDESC[sysVar.arrayIndex];
      set KM0NM010.XPTCD[5] initialAttributes;
    else
      KM0NW01.KM0NWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(17); /* not a nil payment term*/
      set KM0NM010.XPTCD[5] cursor, bold;
      return;
    end
  else
    KM0NW01.KM0NWERR = "Y"; /* set error flag*/
    converseLib.validationFailed(17); /* invalid payment term*/
    set KM0NM010.XPTCD[5] cursor, bold;
    return;
  end

   /* *********************************************/
   /* * edit prop ftwr second range & term       **/
   /* *********************************************/
  if (KM0NM010.NILLOVAL[6] == 0
   && KM0NM010.XPTCD[6] == "  ") /* no data*/
    KM0NM010.XPTDESC[6] = " ";
    set KM0NM010.NILLOVAL[6] initialAttributes;
    set KM0NM010.XPTCD[6] initialAttributes;
  else
    if (KM0NM010.NILLOVAL[6] > KM0NM010.NILLOVAL[5])
      KM0NM010.NILHIVAL[6] = 9999999.99;
      KM0NM010.NILHIVAL[5] = KM0NM010.NILLOVAL[6] - .01;
      set KM0NM010.NILLOVAL[6] initialAttributes;
    else
      KM0NW01.KM0NWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(274); /* second must be greater than first*/
      set KM0NM010.NILLOVAL[6] cursor, bold;
      return;
    end

    if (KM0NM010.XPTCD[6] in XPTTBL.XPTCD
     && KM0NM010.XPTCD != "99"
     && XPTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "N" /* NIL Term*/
       || XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "B") /* or both terms*/
        KM0NM010.XPTDESC[6] = XPTTBL.XPTDESC[sysVar.arrayIndex];
        set KM0NM010.XPTCD[6] initialAttributes;
      else
        KM0NW01.KM0NWERR = "Y"; /* set error flag*/
        converseLib.validationFailed(17); /* not a nil payment term*/
        set KM0NM010.XPTCD[6] cursor, bold;
        return;
      end
    else
      KM0NW01.KM0NWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(17); /* invalid payment term*/
      set KM0NM010.XPTCD[6] cursor, bold;
      return;
    end
  end



   /* *********************************************/
   /* * edit prop aprl first range & term        **/
   /* *********************************************/
  if (KM0NM010.NILLOVAL[7] == 0)
    KM0NM010.NILLOVAL[7] = 0;
    KM0NM010.NILHIVAL[7] = 9999999.99;
    set KM0NM010.NILLOVAL[7] initialAttributes;
  else
    KM0NW01.KM0NWERR = "Y"; /* set error flag*/
    converseLib.validationFailed(273); /* first must be zero*/
    set KM0NM010.NILLOVAL[7] cursor, bold;
    return;
  end

  if (KM0NM010.XPTCD[7] in XPTTBL.XPTCD
   && KM0NM010.XPTCD != "99"
   && XPTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    if (XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "N" /* NIL Term*/
     || XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "B") /* or both terms*/
      KM0NM010.XPTDESC[7] = XPTTBL.XPTDESC[sysVar.arrayIndex];
      set KM0NM010.XPTCD[7] initialAttributes;
    else
      KM0NW01.KM0NWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(17); /* not a nil payment term*/
      set KM0NM010.XPTCD[7] cursor, bold;
      return;
    end
  else
    KM0NW01.KM0NWERR = "Y"; /* set error flag*/
    converseLib.validationFailed(17); /* invalid payment term*/
    set KM0NM010.XPTCD[7] cursor, bold;
    return;
  end

   /* *********************************************/
   /* * edit prop aprl second range & term       **/
   /* *********************************************/
  if (KM0NM010.NILLOVAL[8] == 0
   && KM0NM010.XPTCD[8] == "  ") /* no data*/
    KM0NM010.XPTDESC[8] = " ";
    set KM0NM010.NILLOVAL[8] initialAttributes;
    set KM0NM010.XPTCD[8] initialAttributes;
  else
    if (KM0NM010.NILLOVAL[8] > KM0NM010.NILLOVAL[7])
      KM0NM010.NILHIVAL[8] = 9999999.99;
      KM0NM010.NILHIVAL[7] = KM0NM010.NILLOVAL[8] - .01;
      set KM0NM010.NILLOVAL[8] initialAttributes;
    else
      KM0NW01.KM0NWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(274); /* second must be greater than first*/
      set KM0NM010.NILLOVAL[8] cursor, bold;
      return;
    end

    if (KM0NM010.XPTCD[8] in XPTTBL.XPTCD
     && KM0NM010.XPTCD != "99"
     && XPTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "N" /* NIL Term*/
       || XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "B") /* or both terms*/
        KM0NM010.XPTDESC[8] = XPTTBL.XPTDESC[sysVar.arrayIndex];
        set KM0NM010.XPTCD[8] initialAttributes;
      else
        KM0NW01.KM0NWERR = "Y"; /* set error flag*/
        converseLib.validationFailed(17); /* not a nil payment term*/
        set KM0NM010.XPTCD[8] cursor, bold;
        return;
      end
    else
      KM0NW01.KM0NWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(17); /* invalid payment term*/
      set KM0NM010.XPTCD[8] cursor, bold;
      return;
    end
  end


end // end KM0N320

// edit default terms
Function KM0N330()


   /* *********************************************/
   /* * edit default first range & term          **/
   /* *********************************************/
  if (KM0NM010.NILLOVAL[11] == 0)
    KM0NM010.NILLOVAL[11] = 0;
    KM0NM010.NILHIVAL[11] = 9999999.99;
    set KM0NM010.NILLOVAL[11] initialAttributes;
  else
    KM0NW01.KM0NWERR = "Y"; /* set error flag*/
    converseLib.validationFailed(273); /* first must be zero*/
    set KM0NM010.NILLOVAL[11] cursor, bold;
    return;
  end

  if (KM0NM010.XPTCD[11] in XPTTBL.XPTCD
   && KM0NM010.XPTCD != "99"
   && XPTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    if (XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "N" /* NIL Term*/
     || XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "B") /* or both terms*/
      KM0NM010.XPTDESC[11] = XPTTBL.XPTDESC[sysVar.arrayIndex];
      set KM0NM010.XPTCD[11] initialAttributes;
    else
      KM0NW01.KM0NWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(17); /* not a nil payment term*/
      set KM0NM010.XPTCD[11] cursor, bold;
      return;
    end
  else
    KM0NW01.KM0NWERR = "Y"; /* set error flag*/
    converseLib.validationFailed(17); /* invalid payment term*/
    set KM0NM010.XPTCD[11] cursor, bold;
    return;
  end

   /* *********************************************/
   /* * edit default second range & term         **/
   /* *********************************************/
  if (KM0NM010.NILLOVAL[12] == 0
   && KM0NM010.XPTCD[12] == "  ") /* no data*/
    KM0NM010.XPTDESC[12] = " ";
    set KM0NM010.NILLOVAL[12] initialAttributes;
    set KM0NM010.XPTCD[12] initialAttributes;
  else
    if (KM0NM010.NILLOVAL[12] > KM0NM010.NILLOVAL[11])
      KM0NM010.NILHIVAL[12] = 9999999.99;
      KM0NM010.NILHIVAL[11] = KM0NM010.NILLOVAL[12] - .01;
      set KM0NM010.NILLOVAL[12] initialAttributes;
    else
      KM0NW01.KM0NWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(274); /* second must be greater than first*/
      set KM0NM010.NILLOVAL[12] cursor, bold;
      return;
    end

    if (KM0NM010.XPTCD[12] in XPTTBL.XPTCD
     && KM0NM010.XPTCD != "99"
     && XPTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "N" /* NIL Term*/
       || XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "B") /* or both terms*/
        KM0NM010.XPTDESC[12] = XPTTBL.XPTDESC[sysVar.arrayIndex];
        set KM0NM010.XPTCD[12] initialAttributes;
      else
        KM0NW01.KM0NWERR = "Y"; /* set error flag*/
        converseLib.validationFailed(17); /* not a nil payment term*/
        set KM0NM010.XPTCD[12] cursor, bold;
        return;
      end
    else
      KM0NW01.KM0NWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(17); /* invalid payment term*/
      set KM0NM010.XPTCD[12] cursor, bold;
      return;
    end
  end



end // end KM0N330

// edit generic gpc terms
Function KM0N340()


   /* *********************************************/
   /* * edit generic gpc first range & term      **/
   /* *********************************************/
  if (KM0NM010.NILLOVAL[9] == 0)
    KM0NM010.NILLOVAL[9] = 0;
    KM0NM010.NILHIVAL[9] = 9999999.99;
    set KM0NM010.NILLOVAL[9] initialAttributes;
  else
    KM0NW01.KM0NWERR = "Y"; /* set error flag*/
    converseLib.validationFailed(273); /* first must be zero*/
    set KM0NM010.NILLOVAL[9] cursor, bold;
    return;
  end

  if (KM0NM010.XPTCD[9] in XPTTBL.XPTCD
   && KM0NM010.XPTCD != "99"
   && XPTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    if (XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "N" /* NIL Term*/
     || XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "B") /* or both terms*/
      KM0NM010.XPTDESC[9] = XPTTBL.XPTDESC[sysVar.arrayIndex];
      set KM0NM010.XPTCD[9] initialAttributes;
    else
      KM0NW01.KM0NWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(17); /* not a nil payment term*/
      set KM0NM010.XPTCD[9] cursor, bold;
      return;
    end
  else
    KM0NW01.KM0NWERR = "Y"; /* set error flag*/
    converseLib.validationFailed(17); /* invalid payment term*/
    set KM0NM010.XPTCD[9] cursor, bold;
    return;
  end

   /* *********************************************/
   /* * edit generic GPC second range & term         **/
   /* *********************************************/
  if (KM0NM010.NILLOVAL[10] == 0
   && KM0NM010.XPTCD[10] == "  ") /* no data*/
    KM0NM010.XPTDESC[10] = " ";
    set KM0NM010.NILLOVAL[10] initialAttributes;
    set KM0NM010.XPTCD[10] initialAttributes;
  else
    if (KM0NM010.NILLOVAL[10] > KM0NM010.NILLOVAL[9])
      KM0NM010.NILHIVAL[10] = 9999999.99;
      KM0NM010.NILHIVAL[9] = KM0NM010.NILLOVAL[10] - .01;
      set KM0NM010.NILLOVAL[10] initialAttributes;
    else
      KM0NW01.KM0NWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(274); /* second must be greater than first*/
      set KM0NM010.NILLOVAL[10] cursor, bold;
      return;
    end

    if (KM0NM010.XPTCD[10] in XPTTBL.XPTCD
     && KM0NM010.XPTCD != "99"
     && XPTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "N" /* NIL Term*/
       || XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "B") /* or both terms*/
        KM0NM010.XPTDESC[10] = XPTTBL.XPTDESC[sysVar.arrayIndex];
        set KM0NM010.XPTCD[10] initialAttributes;
      else
        KM0NW01.KM0NWERR = "Y"; /* set error flag*/
        converseLib.validationFailed(17); /* not a nil payment term*/
        set KM0NM010.XPTCD[10] cursor, bold;
        return;
      end
    else
      KM0NW01.KM0NWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(17); /* invalid payment term*/
      set KM0NM010.XPTCD[10] cursor, bold;
      return;
    end
  end



end // end KM0N340

// write customer nil terms
Function KM0N400()

   /* **********************************************/
    /* write/update the nil terms                **/
   /* **********************************************/

  XX0XS01(); /* convert system date & time*/

  KM0N410(); /* write future terms*/

  KM0N450(); /* write prop terms*/

  KM0N470(); /* write generic gpc terms*/

  KM0N460(); /* write default terms*/


  if (KM0NW01.KM0NWERR == "N") /* no errors*/
    converseLib.validationFailed(29); /* record updated*/
  end


end // end KM0N400

// write future terms
Function KM0N410()


   /* *********************************************/
   /* * write future ftwr first range & term     **/
   /* *********************************************/

  VNLXPT01.KUCCOID = KM0NM010.KUCCOID;
  VNLXPT01.YSMXOB = "F1";
  VNLXPT01.XGPCD = "02";
  VNLXPT01.NILLOVAL = 0;

  KM0N250(); /* re-read terms*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (KM0NM010.XPTCD[1] == VNLXPT01.XPTCD)
       /* next sentence*/
    else
      VNLXPT01.XPTCD = KM0NM010.XPTCD[1];
      KM0N420(); /* update terms*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      VNLXPT01.XPTCD = KM0NM010.XPTCD[1];
      KM0N430(); /* add terms*/
    end
  end


   /* *********************************************/
   /* * write future ftwr second range & term    **/
   /* *********************************************/

  VNLXPT01.KUCCOID = KM0NM010.KUCCOID;
  VNLXPT01.YSMXOB = "F1";
  VNLXPT01.XGPCD = "02";
  VNLXPT01.NILLOVAL = 9999999.99;

  KM0N250(); /* re-read terms*/

  if (SQLCA.VAGen_SQLCODE == 0
   && VNLXPT01.NILLOVAL != 0)
    if (KM0NM010.XPTCD[2] == VNLXPT01.XPTCD
     && KM0NM010.NILLOVAL[2] == VNLXPT01.NILLOVAL)
       /* next sentence*/
    else
      if (KM0NM010.XPTCD[2] == "  "
       && KM0NM010.NILLOVAL[2] == 0)
        KM0N440(); /* delete terms*/
      else
        if (KM0NM010.XPTCD[2] != VNLXPT01.XPTCD
         && KM0NM010.NILLOVAL[2] == VNLXPT01.NILLOVAL)
          VNLXPT01.XPTCD = KM0NM010.XPTCD[2];
          KM0N420(); /* update terms*/
        else
          KM0N440(); /* delete terms*/
          VNLXPT01.XPTCD = KM0NM010.XPTCD[2];
          VNLXPT01.NILLOVAL = KM0NM010.NILLOVAL[2];
          KM0N430(); /* add terms*/
        end
      end
    end
  else
    if (KM0NM010.NILLOVAL[2] == 0
     && KM0NM010.XPTCD[2] == "  ")
       /* next sentence*/
    else
      VNLXPT01.XPTCD = KM0NM010.XPTCD[2];
      VNLXPT01.NILLOVAL = KM0NM010.NILLOVAL[2];
      KM0N430(); /* add terms*/
    end
  end



   /* *********************************************/
   /* * edit future aprl first range & term      **/
   /* *********************************************/

  VNLXPT01.KUCCOID = KM0NM010.KUCCOID;
  VNLXPT01.YSMXOB = "F1";
  VNLXPT01.XGPCD = "03";
  VNLXPT01.NILLOVAL = 0;

  KM0N250(); /* re-read terms*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (KM0NM010.XPTCD[3] == VNLXPT01.XPTCD)
       /* next sentence*/
    else
      VNLXPT01.XPTCD = KM0NM010.XPTCD[3];
      KM0N420(); /* update terms*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      VNLXPT01.XPTCD = KM0NM010.XPTCD[3];
      KM0N430(); /* add terms*/
    end
  end


   /* *********************************************/
   /* * write aprl ftwr second range & term      **/
   /* *********************************************/

  VNLXPT01.KUCCOID = KM0NM010.KUCCOID;
  VNLXPT01.YSMXOB = "F1";
  VNLXPT01.XGPCD = "03";
  VNLXPT01.NILLOVAL = 9999999.99;

  KM0N250(); /* re-read terms*/

  if (SQLCA.VAGen_SQLCODE == 0
   && VNLXPT01.NILLOVAL != 0)
    if (KM0NM010.XPTCD[4] == VNLXPT01.XPTCD
     && KM0NM010.NILLOVAL[4] == VNLXPT01.NILLOVAL)
       /* next sentence*/
    else
      if (KM0NM010.XPTCD[4] == "  "
       && KM0NM010.NILLOVAL[4] == 0)
        KM0N440(); /* delete terms*/
      else
        if (KM0NM010.XPTCD[4] != VNLXPT01.XPTCD
         && KM0NM010.NILLOVAL[4] == VNLXPT01.NILLOVAL)
          VNLXPT01.XPTCD = KM0NM010.XPTCD[4];
          KM0N420(); /* update terms*/
        else
          KM0N440(); /* delete terms*/
          VNLXPT01.XPTCD = KM0NM010.XPTCD[4];
          VNLXPT01.NILLOVAL = KM0NM010.NILLOVAL[4];
          KM0N430(); /* add terms*/
        end
      end
    end
  else
    if (KM0NM010.NILLOVAL[4] == 0
     && KM0NM010.XPTCD[4] == "  ")
       /* next sentence*/
    else
      VNLXPT01.XPTCD = KM0NM010.XPTCD[4];
      VNLXPT01.NILLOVAL = KM0NM010.NILLOVAL[4];
      KM0N430(); /* add terms*/
    end
  end



end // end KM0N410

// update the terms
Function KM0N420()
   /* ********************************************************/
   /* * updating the term record*/
   /* ********************************************************/

  VNLXPT01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VNLXPT01.ZZZCHGTM = XX0XW01.XX0XWTIM;

  call "IO4490" ("U ", SQLCA, VNLXPT01) {isNoRefresh = yes, isExternal = yes}; /* read nil terms*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0N420";
    TA1REC.TA1LOCAT[4] = "IO4490";
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNLXPT01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1TBLKE = VNLXPT01.NILGROUP;
    TA1LOC = "UPDATING DB2 TBL DNILO.VNLXPT01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* print diagnostic screen*/
    XSPF4();
  end



end // end KM0N420

// add the terms
Function KM0N430()
   /* ********************************************************/
   /* * add a term record*/
   /* ********************************************************/

  VNLXPT01.XXXSTAT = "A";
  VNLXPT01.ZZZSDT = XX0XW01.XX0XWDAT;
  VNLXPT01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VNLXPT01.ZZZCHGTM = XX0XW01.XX0XWTIM;

  call "IO4490" ("A ", SQLCA, VNLXPT01) {isNoRefresh = yes, isExternal = yes}; /* read nil terms*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0N430";
    TA1REC.TA1LOCAT[4] = "IO4490";
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNLXPT01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1TBLKE = VNLXPT01.NILGROUP;
    TA1LOC = "ADDING TO DB2 TBL DNILO.VNLXPT01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* print diagnostic screen*/
    XSPF4();
  end



end // end KM0N430

// delete the terms
Function KM0N440()
   /* ********************************************************/
   /* * delete the term record*/
   /* ********************************************************/


  call "IO4490" ("D ", SQLCA, VNLXPT01) {isNoRefresh = yes, isExternal = yes}; /* read nil terms*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0N460";
    TA1REC.TA1LOCAT[4] = "IO4490";
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNLXPT01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1TBLKE = VNLXPT01.NILGROUP;
    TA1LOC = "DELETING DB2 TBL DNILO.VNLXPT01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* print diagnostic screen*/
    XSPF4();
  end



end // end KM0N440

// write prop terms
Function KM0N450()


   /* *********************************************/
   /* * write prop ftwr first range & term       **/
   /* *********************************************/

  VNLXPT01.KUCCOID = KM0NM010.KUCCOID;
  VNLXPT01.YSMXOB = "P1";
  VNLXPT01.XGPCD = "02";
  VNLXPT01.NILLOVAL = 0;

  KM0N250(); /* re-read terms*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (KM0NM010.XPTCD[5] == VNLXPT01.XPTCD)
       /* next sentence*/
    else
      VNLXPT01.XPTCD = KM0NM010.XPTCD[5];
      KM0N420(); /* update terms*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      VNLXPT01.XPTCD = KM0NM010.XPTCD[5];
      KM0N430(); /* add terms*/
    end
  end


   /* *********************************************/
   /* * write prop ftwr second range & term      **/
   /* *********************************************/

  VNLXPT01.KUCCOID = KM0NM010.KUCCOID;
  VNLXPT01.YSMXOB = "P1";
  VNLXPT01.XGPCD = "02";
  VNLXPT01.NILLOVAL = 9999999.99;

  KM0N250(); /* re-read terms*/

  if (SQLCA.VAGen_SQLCODE == 0
   && VNLXPT01.NILLOVAL != 0)
    if (KM0NM010.XPTCD[6] == VNLXPT01.XPTCD
     && KM0NM010.NILLOVAL[6] == VNLXPT01.NILLOVAL)
       /* next sentence*/
    else
      if (KM0NM010.XPTCD[6] == "  "
       && KM0NM010.NILLOVAL[6] == 0)
        KM0N440(); /* delete terms*/
      else
        if (KM0NM010.XPTCD[6] != VNLXPT01.XPTCD
         && KM0NM010.NILLOVAL[6] == VNLXPT01.NILLOVAL)
          VNLXPT01.XPTCD = KM0NM010.XPTCD[6];
          KM0N420(); /* update terms*/
        else
          KM0N440(); /* delete terms*/
          VNLXPT01.XPTCD = KM0NM010.XPTCD[6];
          VNLXPT01.NILLOVAL = KM0NM010.NILLOVAL[6];
          KM0N430(); /* add terms*/
        end
      end
    end
  else
    if (KM0NM010.NILLOVAL[6] == 0
     && KM0NM010.XPTCD[6] == "  ")
       /* next sentence*/
    else
      VNLXPT01.XPTCD = KM0NM010.XPTCD[6];
      VNLXPT01.NILLOVAL = KM0NM010.NILLOVAL[6];
      KM0N430(); /* add terms*/
    end
  end



   /* *********************************************/
   /* * edit prop aprl first range & term        **/
   /* *********************************************/

  VNLXPT01.KUCCOID = KM0NM010.KUCCOID;
  VNLXPT01.YSMXOB = "P1";
  VNLXPT01.XGPCD = "03";
  VNLXPT01.NILLOVAL = 0;

  KM0N250(); /* re-read terms*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (KM0NM010.XPTCD[7] == VNLXPT01.XPTCD)
       /* next sentence*/
    else
      VNLXPT01.XPTCD = KM0NM010.XPTCD[7];
      KM0N420(); /* update terms*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      VNLXPT01.XPTCD = KM0NM010.XPTCD[7];
      KM0N430(); /* add terms*/
    end
  end


   /* *********************************************/
   /* * write aprl ftwr second range & term      **/
   /* *********************************************/

  VNLXPT01.KUCCOID = KM0NM010.KUCCOID;
  VNLXPT01.YSMXOB = "P1";
  VNLXPT01.XGPCD = "03";
  VNLXPT01.NILLOVAL = 9999999.99;

  KM0N250(); /* re-read terms*/

  if (SQLCA.VAGen_SQLCODE == 0
   && VNLXPT01.NILLOVAL != 0)
    if (KM0NM010.XPTCD[8] == VNLXPT01.XPTCD
     && KM0NM010.NILLOVAL[8] == VNLXPT01.NILLOVAL)
       /* next sentence*/
    else
      if (KM0NM010.XPTCD[8] == "  "
       && KM0NM010.NILLOVAL[8] == 0)
        KM0N440(); /* delete terms*/
      else
        if (KM0NM010.XPTCD[8] != VNLXPT01.XPTCD
         && KM0NM010.NILLOVAL[8] == VNLXPT01.NILLOVAL)
          VNLXPT01.XPTCD = KM0NM010.XPTCD[8];
          KM0N420(); /* update terms*/
        else
          KM0N440(); /* delete terms*/
          VNLXPT01.XPTCD = KM0NM010.XPTCD[8];
          VNLXPT01.NILLOVAL = KM0NM010.NILLOVAL[8];
          KM0N430(); /* add terms*/
        end
      end
    end
  else
    if (KM0NM010.NILLOVAL[8] == 0
     && KM0NM010.XPTCD[8] == "  ")
       /* next sentence*/
    else
      VNLXPT01.XPTCD = KM0NM010.XPTCD[8];
      VNLXPT01.NILLOVAL = KM0NM010.NILLOVAL[8];
      KM0N430(); /* add terms*/
    end
  end



end // end KM0N450

// write default terms
Function KM0N460()


   /* *********************************************/
   /* * write default first range & term         **/
   /* *********************************************/

  VNLXPT01.KUCCOID = KM0NM010.KUCCOID;
  VNLXPT01.YSMXOB = "  ";
  VNLXPT01.XGPCD = "  ";
  VNLXPT01.NILLOVAL = 0;

  KM0N250(); /* re-read terms*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (KM0NM010.XPTCD[11] == VNLXPT01.XPTCD)
       /* next sentence*/
    else
      VNLXPT01.XPTCD = KM0NM010.XPTCD[11];
      KM0N420(); /* update terms*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      VNLXPT01.XPTCD = KM0NM010.XPTCD[11];
      KM0N430(); /* add terms*/
    end
  end


   /* *********************************************/
   /* * write defualt second range & term        **/
   /* *********************************************/

  VNLXPT01.KUCCOID = KM0NM010.KUCCOID;
  VNLXPT01.YSMXOB = "  ";
  VNLXPT01.XGPCD = "  ";
  VNLXPT01.NILLOVAL = 9999999.99;

  KM0N250(); /* re-read terms*/

  if (SQLCA.VAGen_SQLCODE == 0
   && VNLXPT01.NILLOVAL != 0)
    if (KM0NM010.XPTCD[12] == VNLXPT01.XPTCD
     && KM0NM010.NILLOVAL[12] == VNLXPT01.NILLOVAL)
       /* next sentence*/
    else
      if (KM0NM010.XPTCD[12] == "  "
       && KM0NM010.NILLOVAL[12] == 0)
        KM0N440(); /* delete terms*/
      else
        if (KM0NM010.XPTCD[12] != VNLXPT01.XPTCD
         && KM0NM010.NILLOVAL[12] == VNLXPT01.NILLOVAL)
          VNLXPT01.XPTCD = KM0NM010.XPTCD[12];
          KM0N420(); /* update terms*/
        else
          KM0N440(); /* delete terms*/
          VNLXPT01.XPTCD = KM0NM010.XPTCD[12];
          VNLXPT01.NILLOVAL = KM0NM010.NILLOVAL[12];
          KM0N430(); /* add terms*/
        end
      end
    end
  else
    if (KM0NM010.NILLOVAL[12] == 0
     && KM0NM010.XPTCD[12] == "  ")
       /* next sentence*/
    else
      VNLXPT01.XPTCD = KM0NM010.XPTCD[12];
      VNLXPT01.NILLOVAL = KM0NM010.NILLOVAL[12];
      KM0N430(); /* add terms*/
    end
  end



end // end KM0N460

// write generic gpc terms
Function KM0N470()


   /* *********************************************/
   /* * write generic gpc ranges and terms       **/
   /* *********************************************/

   /* *********************************************/
   /* * write generic gpc 01 first range & term  **/
   /* *********************************************/

  VNLXPT01.KUCCOID = KM0NM010.KUCCOID;
  VNLXPT01.YSMXOB = "  ";
  VNLXPT01.XGPCD = "01";
  VNLXPT01.NILLOVAL = 0;

  KM0N500(); /* re-read terms*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (KM0NM010.XPTCD[9] == VNLXPT01.XPTCD)
       /* next sentence*/
    else
      VNLXPT01.XPTCD = KM0NM010.XPTCD[9];
      KM0N420(); /* update terms*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      VNLXPT01.XPTCD = KM0NM010.XPTCD[9];
      KM0N430(); /* add terms*/
    end
  end


   /* *********************************************/
   /* * write generic gpc 01 second range & term **/
   /* *********************************************/

  VNLXPT01.KUCCOID = KM0NM010.KUCCOID;
  VNLXPT01.YSMXOB = "  ";
  VNLXPT01.XGPCD = "01";
  VNLXPT01.NILLOVAL = 9999999.99;

  KM0N250(); /* re-read terms*/

  if (SQLCA.VAGen_SQLCODE == 0
   && VNLXPT01.NILLOVAL != 0)
    if (KM0NM010.XPTCD[10] == VNLXPT01.XPTCD
     && KM0NM010.NILLOVAL[10] == VNLXPT01.NILLOVAL)
       /* next sentence*/
    else
      if (KM0NM010.XPTCD[10] == "  "
       && KM0NM010.NILLOVAL[10] == 0)
        KM0N440(); /* delete terms*/
      else
        if (KM0NM010.XPTCD[10] != VNLXPT01.XPTCD
         && KM0NM010.NILLOVAL[10] == VNLXPT01.NILLOVAL)
          VNLXPT01.XPTCD = KM0NM010.XPTCD[10];
          KM0N420(); /* update terms*/
        else
          KM0N440(); /* delete terms*/
          VNLXPT01.XPTCD = KM0NM010.XPTCD[10];
          VNLXPT01.NILLOVAL = KM0NM010.NILLOVAL[10];
          KM0N430(); /* add terms*/
        end
      end
    end
  else
    if (KM0NM010.NILLOVAL[10] == 0
     && KM0NM010.XPTCD[10] == "  ")
       /* next sentence*/
    else
      VNLXPT01.XPTCD = KM0NM010.XPTCD[10];
      VNLXPT01.NILLOVAL = KM0NM010.NILLOVAL[10];
      KM0N430(); /* add terms*/
    end
  end




   /* *********************************************/
   /* * write generic gpc 04 first range & term  **/
   /* *********************************************/

  VNLXPT01.KUCCOID = KM0NM010.KUCCOID;
  VNLXPT01.YSMXOB = "  ";
  VNLXPT01.XGPCD = "04";
  VNLXPT01.NILLOVAL = 0;

  KM0N500(); /* re-read terms*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (KM0NM010.XPTCD[9] == VNLXPT01.XPTCD)
       /* next sentence*/
    else
      VNLXPT01.XPTCD = KM0NM010.XPTCD[9];
      KM0N420(); /* update terms*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      VNLXPT01.XPTCD = KM0NM010.XPTCD[9];
      KM0N430(); /* add terms*/
    end
  end


   /* *********************************************/
   /* * write generic gpc 04 second range & term **/
   /* *********************************************/

  VNLXPT01.KUCCOID = KM0NM010.KUCCOID;
  VNLXPT01.YSMXOB = "  ";
  VNLXPT01.XGPCD = "04";
  VNLXPT01.NILLOVAL = 9999999.99;

  KM0N250(); /* re-read terms*/

  if (SQLCA.VAGen_SQLCODE == 0
   && VNLXPT01.NILLOVAL != 0)
    if (KM0NM010.XPTCD[10] == VNLXPT01.XPTCD
     && KM0NM010.NILLOVAL[10] == VNLXPT01.NILLOVAL)
       /* next sentence*/
    else
      if (KM0NM010.XPTCD[10] == "  "
       && KM0NM010.NILLOVAL[10] == 0)
        KM0N440(); /* delete terms*/
      else
        if (KM0NM010.XPTCD[10] != VNLXPT01.XPTCD
         && KM0NM010.NILLOVAL[10] == VNLXPT01.NILLOVAL)
          VNLXPT01.XPTCD = KM0NM010.XPTCD[10];
          KM0N420(); /* update terms*/
        else
          KM0N440(); /* delete terms*/
          VNLXPT01.XPTCD = KM0NM010.XPTCD[10];
          VNLXPT01.NILLOVAL = KM0NM010.NILLOVAL[10];
          KM0N430(); /* add terms*/
        end
      end
    end
  else
    if (KM0NM010.NILLOVAL[10] == 0
     && KM0NM010.XPTCD[10] == "  ")
       /* next sentence*/
    else
      VNLXPT01.XPTCD = KM0NM010.XPTCD[10];
      VNLXPT01.NILLOVAL = KM0NM010.NILLOVAL[10];
      KM0N430(); /* add terms*/
    end
  end


   /* *********************************************/
   /* * write generic gpc 07 first range & term  **/
   /* *********************************************/

  VNLXPT01.KUCCOID = KM0NM010.KUCCOID;
  VNLXPT01.YSMXOB = "  ";
  VNLXPT01.XGPCD = "07";
  VNLXPT01.NILLOVAL = 0;

  KM0N500(); /* re-read terms*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (KM0NM010.XPTCD[9] == VNLXPT01.XPTCD)
       /* next sentence*/
    else
      VNLXPT01.XPTCD = KM0NM010.XPTCD[9];
      KM0N420(); /* update terms*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      VNLXPT01.XPTCD = KM0NM010.XPTCD[9];
      KM0N430(); /* add terms*/
    end
  end


   /* *********************************************/
   /* * write generic gpc 07 second range & term **/
   /* *********************************************/

  VNLXPT01.KUCCOID = KM0NM010.KUCCOID;
  VNLXPT01.YSMXOB = "  ";
  VNLXPT01.XGPCD = "07";
  VNLXPT01.NILLOVAL = 9999999.99;

  KM0N250(); /* re-read terms*/

  if (SQLCA.VAGen_SQLCODE == 0
   && VNLXPT01.NILLOVAL != 0)
    if (KM0NM010.XPTCD[10] == VNLXPT01.XPTCD
     && KM0NM010.NILLOVAL[10] == VNLXPT01.NILLOVAL)
       /* next sentence*/
    else
      if (KM0NM010.XPTCD[10] == "  "
       && KM0NM010.NILLOVAL[10] == 0)
        KM0N440(); /* delete terms*/
      else
        if (KM0NM010.XPTCD[10] != VNLXPT01.XPTCD
         && KM0NM010.NILLOVAL[10] == VNLXPT01.NILLOVAL)
          VNLXPT01.XPTCD = KM0NM010.XPTCD[10];
          KM0N420(); /* update terms*/
        else
          KM0N440(); /* delete terms*/
          VNLXPT01.XPTCD = KM0NM010.XPTCD[10];
          VNLXPT01.NILLOVAL = KM0NM010.NILLOVAL[10];
          KM0N430(); /* add terms*/
        end
      end
    end
  else
    if (KM0NM010.NILLOVAL[10] == 0
     && KM0NM010.XPTCD[10] == "  ")
       /* next sentence*/
    else
      VNLXPT01.XPTCD = KM0NM010.XPTCD[10];
      VNLXPT01.NILLOVAL = KM0NM010.NILLOVAL[10];
      KM0N430(); /* add terms*/
    end
  end




end // end KM0N470

// fetch the first term
Function KM0N500()
   /* ********************************************************/
   /* *   get the next term record*/
   /* ********************************************************/


  call "IO4490" ("S ", SQLCA, VNLXPT01) {isNoRefresh = yes, isExternal = yes}; /* read nil terms*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "KM0N500";
    TA1REC.TA1LOCAT[4] = "IO4490";
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNLXPT01";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1TBLKE = VNLXPT01.NILGROUP;
    TA1LOC = "READING DB2 TBL DNILO.VNLXPT01";
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* print diagnostic screen*/
    XSPF4();
  end



end // end KM0N500

Record KM0NW01 type basicRecord
  5 KM0NWGRP KM0NWGRP ; 
    10 KM0NWERR KM0NWERR ; 
    10 KM0NWEOF KM0NWEOF ; 
    10 KM0NWADD KM0NWADD ; 
    10 KUCCOID KUCCOID ; 
    10 KM0NWCID KM0NWCID ; 
    10 KM0NWUSR KM0NWUSR ; 
      15 KM0NWCNO KM0NWCNO ; 
        20 KM0NWCNO-CHAR KM0NWCNO-CHAR ; 
      15 * char(8) ; 
end // end KM0NW01

// add terms flag
DataItem KM0NWADD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work key field
DataItem KM0NWCID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   company number
DataItem KM0NWCNO num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   company number
DataItem KM0NWCNO-CHAR char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of file
DataItem KM0NWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag
DataItem KM0NWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// km0n working storage record
DataItem KM0NWGRP char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reformat area for causera
DataItem KM0NWUSR char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

