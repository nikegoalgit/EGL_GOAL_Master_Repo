package gs0b;

import corpcom2.X2CREC;
import corpcom3.XPTA0P;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSSEGTR;
import corpcom4.XSX2CDT;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XWHTBL;
import sl.common.SLWREC;
import ta.common.TA1REC;
import ta.common.TA6REC;
import ta.common.TARREC;
import vv.common.VRCVSH01;
//*** PROGRAM=GS0B ****
// ************************************************************
// 
//                    STOCK LOCATE
//           receiving maintenance functions
//           ===============================
// 
// ************************************************************
// 
// OVERVIEW: This application is intended to transfer control
//           to other applications and/or functions within its
//           application depending on the selction number
//           entered on the map or passed via fast path's
//           item area (first character only).
// 
//           These are:
//             1) receiving count entry/maintenance
// 
//             2) receiving inspection
// 
//             3) receiving update
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// 00  02/25/87  Ward Jones  created prototype
// 01  05/13/87  Ward Jones  created production version
// 02  08/03/87  Ward Jones  reset sexsw in s5u and
//                           use ws size in s5q, s5t & s5x
// 03  08/04/87  Ward Jones  zeroed -803's in s5y
// 04  09/26/88  Ward Jones  fix audit ID's
// 05  09/29/88  Ward Jones  add use of transaction DB > 6pm
// 06  11/10/88  John Wood   added xssegtr sgrp
// 07  12/21/88  rob yonker  entry of group codes eq to 10 only
// 08  01/11/89  Ward Jones  init. new initm eom fld
// 08  04/11/89  rob yonker  fix effective date logic in s1n
// 10  07/05/89  kande1      added receiving log comment logic
//                           to add, update and display comment
// 11  08/21/89  esmith      remove shd/spec cntl logic
// 12  08/30/89  kande1      added logic to update or insert
//                           availability header, f and n qty
//                           rows for whse 09 or 12 only.
//                           added the followinf records sy1rec
//                           sy2rec, sy5rec, sy6rec, av4rec,
//                           av5rec, av6rec and taerec. added
//                           the season table xsntbl. added i/o
//                           modules are io2310, io2300, io2320
//                           io4380, io4370, io0380, io0130,
//                           io0120 and io0360.
// 13  10/20/89  ryonke      added table slgrec and logic to
//                           add rows to this table when a size
//                           has been received that is valid
//                           for the product size/scale ,but
//                           not set up for the product.
// 14  11/16/89  ryonke      added fields for phase 4 db2 chngs
// 15  01/29/90  ryonke      changed the update process to an
//                           on-line submitted batch job.
// 15  05/30/90  ryonke      allowed whse 09, gpc 01,04 to be
//                           entered without a po required.
// 16  06/04/90  ryonke      fixed edit problem with product
//                           fields in options 1, 2, and 4.
// 16  06/06/90  ryonke      allow whse '09' and gpc '01' the
//                           option of entering po fields.
// 17  06/12/90  kande1      removed ts1rec from the table list
// FIX      07/03/90  SPOPA   Change to pass TARTYPE to TA0P.
// 18  10/09/90  sjohns      db2 table changes
//                             - init slnrec.swepllnb to 0
//                             - rename xsdcd to pc2inseg
//                             - rename xsacd to xegcd
//                             - delete pd1ponbr
// 19  10/24/90  j moore     warehouse '51' not valid.
// 20  01/03/91  j lucas     PF3 will transfer to SW0R - Receip
//                           Entry Maint. Menu
// 21  01/04/91  j lucas     valid area code 09 was showing up
//                           invalid first time thru.
// sl212  01/28/91 kande1    made po not required for trans.
//                           type '17' misc
// 22     02/12/91 ryonke    code changes required because of
//                           table changes.
//     05/14/91   jmoore     warehouse '51' is valid.
//     05/15/91   JCAMPB     FIX SL0CSC2 TO INCLUDE WHSE CD
//                           WHEN LOOKING UP XOWCD
//     05/17/91   cengel     added units-per-case data item
//                           to options 1 & 2.
//     05/20/91   cengel     corrected warehouse edit (option
//                           2) for 5/17/91 modification.
// 23  06/03/91   ryonke     Disallow any access if container
//                           exists as part of a receiving plan
// 24  07/01/91   sjohns     add whse 51 edit - total qty must
//                           be divisible by units/case-opt 1,2
// SL#0     10/09/91  SPOPA   Change "Allow Implicits" to NO.
//                            Set Receiving Log Item (SL2REC)
//                            empty before format for insert.
//                            Remove SLNREC from record list.
// wil.retro 10/23/91 KANDE1  CHG TO ALLOW WHSE 07 TO PROCESS
//                            UNITS PER CASE LIKE WHSE 51.
// ----      01/16/92 jwood   initialization of maps added
// 04.retro  10/23/91 KANDE1  CHG TO ALLOW WHSE 04 TO PROCESS
//                            UNITS PER CASE.
// sl#0      08/24/92 Ryonke  Fix pksty oversite.
// 02.retro  08/07/91 KANDE1  CHG TO ALLOW WHSE 02 TO PROCESS
//                            UNITS PER CASE.
// whse 25   02/11/93 kande1  add whse 25 NSG to program
// sl#458    03/29/94 Ryonke  Make whse '03' receipts like '09'
// Tblchg    04/04/94 Ryonke  Change reference in sy6rec.
// Tblchg    08/22/95 Ryonke  Added warehouse specific logic
//                            for Canada Warehouse (whse=42).
// Canada    08/25/95 CBRINE  Added call to SY2000.  Added
//                            XCTCD to SLWREC.
// y2kproj   02-03-98 oricha  y2k modifications:  SL0CS1M,
//                             SL0CSC2, SL0CSC4.
// retroft   09-24-98 sjohn6  do not allow updates between
//                            21:00 and 03:00 for dcms
// slmaint   03-22-00 SSETHU  Changed for WHSE 07 To Accept
//                            Only Receipt Type 10 And 13
//                            Per JIM BUDLONG
// slmaint   09-27-00 LPATTN  Changed for Warehouse 07
//                            The Pallet Number is validated
//                            to accept only numeric digits
// gds4nsc   04-11-00 marbuc  Created SL0CT06, which is a clone
//                            of SL0CT05.  SL0CT06 will submit
//                            jcl to create goods receipt file
//                            for SAP.  Modify SL0CSH5 to use
//                            SL0CT06 for warehouse 42 and all
//                            other warehouses to still use
//                            SL0CT05.
//                            Modified SL0CSD5 to not allow
//                            submit of receipt between 8:00 pm
//                            and 2:30 am for whse 42 (Canada)
// 
//  dlvrusa  02/19/01 ssethu  Modified for US go live
// List of Rules :
// ---------------
// 1. Container Number should be present on DSTLOC.VRCVSH01
// 2. PO should be valid for the corresponding CNTNR
// 3. PO vs SAP PO should be valid
// 4. UOM should be present on DPROD.VCOLOR02
// 5. Either PO or SAP PO can be entered. If both entered
//    then, it should be a right combination
// 6. Time constraint for Whse 42 (between 8.00pm and 2.30am)
//    has been removed.
// 7. JCL will always be submitted for SL0CT06.
// 8. Inventory Stock XFER is commented out for all the warehou
// 9. XIT of 13 cannot be received for any warehouse
// 10. Any receiving should have a valid PO/SAP PO
// 11. Entire Online screen will use new views like VSYLOC02
//     VRCVPH01, VRCVSH01
// 12. There is no check against the DTRANS tables at all
// 13. Validation against the region code has been removed
// 
// IO Modules :
// ===========
// vrlitm02  used to insert the items with pc sap po nbr
// vrcvph01  used to check whether the container, pc po nbr
// pc sap po nbr is valid or not
// ************************************************************
// ************************************************************
// *********************
Program GS0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  GS0BW01 GS0BW01; // record
  GSSREC GSSREC; // record
  GSXREC GSXREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA6REC TA6REC; // record
  TARREC TARREC; // record
  VRCVSH01 VRCVSH01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use GS0BT07 {deleteAfterUse = yes}; // table
  use GS0BM.GS0BM610 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    GS0B610: GS0B610();
    ;
    ;
     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/
    ;
    SLWREC.XXXLOCID = "620 "; /* error id location id*/
    goto SL0C620; /* <=== converse map*/
    ;
     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/
    ;
    ;
    GS0B620: GS0B620();
    ;
    ;
     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/
    ;
    if (converseVar.eventKey is pa2)
      goto SL0C610; /* <=== re-start this function*/
    end
    ;
    if (converseVar.eventKey is pf2)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0CM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0C020; /* <=== re-display menu*/
    end
    ;
    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0CM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0C020; /* <=== re-display menu*/
    end
    ;
    ;
     /* ************************************************************/
     /* *** if enter perform this process again                 ****/
     /* ************************************************************/
    ;
    if (converseVar.eventKey is enter)
      goto SL0C620; /* <=== converse map*/
    end
    ;
     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/
    ;
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "620Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0C620; /* <=== display this screen*/
    ;
     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/
    ;
    ;
  end // end main
end // end GS0B

// one time initializations
Function GS0B610()
  ;
  ;
   /* ************************************************************/
   /* *** standard security checking                          ****/
   /* *** note: comment out if exec'g from your msl           ****/
   /* ************************************************************/
  ;
  XSENTRY();
  ;
   /* ************************************************************/
   /* *** standard segmented trans id setting                 ****/
   /* ************************************************************/
  ;
  XSSEGTR();
  ;
   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/
  ;
  converseLib.clearScreen();
  set GS0BM610 initial; /* resets fld values, attr.s & cursor*/
  ;
   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/
  ;
  /*MOVE 'GS0BM610' TO GSWREC.XXXMAPNM;*/
  GSWREC.XXXTITLE = "PRINT CONTAINER BARCODE";
  ;
  XSX2CDT(); /* <=== get current ccyymmdd*/
  ;
  GSWREC.GSWTALOC = "GS0B610 "; /* TA0020 exec location(2)*/
  TA1REC.TA1MAP = "GS0BM610"; /* TA0020 current map name*/
  ;
  GSWREC.GSWERRSW = "N"; /* error switch*/
  GSWREC.GSWMSGNO = 0; /* saved msg number*/
  ;
   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/
  ;
  GS0BM610.XXXMAPNM = GSWREC.XXXMAPNM;
  GS0BM610.XXXRVNBR = GSWREC.XXXRVNBR;
  GS0BM610.XXXTITLE = GSWREC.XXXTITLE;
  GS0BM610.XXXCURDT = X2CREC.X2CCURSD;
  ;
   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/
  ;
  if (COMMAREA.CAUSERA > " ")
    GS0BS06(); /* <=== causera input processing*/
  end
  ;
  GS0BM610.XWHCD = COMMAREA.XWHCD;
  if (GS0BM610.XWHCD == "07")
    GS0BM610.RMTNBR = "RMT72";
  end
  ;
   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/
  ;
  ;
end // end GS0B610

// converse & control key entry
Function GS0B620()
  ;
  ;
   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/
  ;
  if (GSWREC.GSWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(GSWREC.GSWMSGNO);
  end
  GS0BM610.XXXERRID = GSWREC.XXXERRID;
  ;
  ;
  converse GS0BM610 ;
  ;
  ;
   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/
  ;
  if (converseVar.eventKey is pa2)
    exit stack;
  end
  ;
   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/
  ;
  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    GSWREC.GSWERRSW = "Y";
    GSWREC.XXXLOCID = "620A";
    GSWREC.GSWMSGNO = 0;
    GS0BM610.VAGen_EZEMSG = CAMSG;
    exit stack;
  end
  ;
   /* ************************************************************/
   /* *** if PF2: Validate and submit the job             ****/
   /* ************************************************************/
  ;
  if (converseVar.eventKey is pf2)
    GS0BSH7();
    exit stack;
  end
  ;
   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/
  ;
  if (converseVar.eventKey is pf3)
    exit stack;
  end
  ;
   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/
  ;
  if (GS0BM610.CATOAP > " ")
    COMMAREA.CATOAP = GS0BM610.CATOAP;
    COMMAREA.CAITEM = GS0BM610.CAITEM;
    XSEXIT();
    GSWREC.GSWERRSW = "Y";
    GSWREC.XXXLOCID = "620E";
    GSWREC.GSWMSGNO = 0;
    GS0BM610.VAGen_EZEMSG = COMMAREA.CAMSG;
    set GS0BM610.CATOAP cursor, bold;
    exit stack;
  end
  ;
   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/
  ;
  GSWREC.GSWMSGNO = 0;
  GSWREC.GSWERRSW = "N";
  GS0BM510.VAGen_EZEMSG = " ";
  set GS0BM610.CATOAP initialAttributes;
  set GS0BM610.CAITEM initialAttributes;
  ;
   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/
  ;
  set GS0BM610.XWHCD initialAttributes;
  set GS0BM610.TS3CNTNR initialAttributes;
  set GS0BM610.SHIPNBR initialAttributes;
  set GS0BM610.GATENBR initialAttributes;
  set GS0BM610.RMTNBR initialAttributes;
  ;
   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/
  ;
  if (GS0BM610.CAITEM > " ")
    GSWREC.GSWERRSW = "Y";
    GSWREC.XXXLOCID = "620F";
    GSWREC.GSWMSGNO = 0002; /* <--- option required msg*/
    set GS0BM610.CAITEM cursor, bold;
    exit stack;
  end
  ;
   /* ************************************************************/
   /* *** if ENTER: do edits                                            ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/
  ;
  if (converseVar.eventKey is enter)
    GS0BSH6(); /* <=== perform edits*/
    exit stack;
  end
  ;
  ;
   /* ************************************************************/
   /* *** if either pa2 or pa3 has been pressed:              ****/
   /* *** use the 'set map-name page' (only) to make sure     ****/
   /* *** the screen shows the original data since any input  ****/
   /* *** will not have been transmitted                      ****/
   /* ************************************************************/
  ;
  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa3)
    converseLib.clearScreen();
    
  end
  ;
   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/
  ;
  GSWREC.GSWERRSW = "Y";
  GSWREC.XXXLOCID = "620I";
  GSWREC.GSWMSGNO = 0004; /* <--- invlaid pfkey msg*/
  ;
   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/
  ;
  ;
end // end GS0B620

// causera input processing
Function GS0BS06()
  ;
  ;
   /* ************************************************************/
   /* *** if entered, use CAUSERA data by first moving it     ****/
   /* *** to the GSXREC working storage layout in order to    ****/
   /* *** 'read' the specific keys for this situation         ****/
   /* *** note: first make sure data present is from one of   ****/
   /* ***       designated sending maps                       ****/
   /* ************************************************************/
  ;
  GSXREC.GSXUSERA = COMMAREA.CAUSERA;
  ;
  if (GSXREC.GSXFRMAP == "SL0AM110"
   || GSXREC.GSXFRMAP == "SL0AM210"
   || GSXREC.GSXFRMAP == "SL0AM310"
   || GSXREC.GSXFRMAP == "SL0BM110"
   || GSXREC.GSXFRMAP == "SL0BM210"
   || GSXREC.GSXFRMAP == "GS0BM110"
   || GSXREC.GSXFRMAP == "GS0BM210"
   || GSXREC.GSXFRMAP == "GS0BM310"
   || GSXREC.GSXFRMAP == "GS0BM410"
   || GSXREC.GSXFRMAP == "GS0BM510"
   || GSXREC.GSXFRMAP == "GS0BM610"
   || GSXREC.GSXFRMAP == "SL0DM110")
    GS0BM610.TS3CNTNR = GSXREC.TS3CNTNR;
    return;
  end
  ;
   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
  ;
  ;
end // end GS0BS06

// USERA exit processing
Function GS0BS16()
  ;
  ;
   /* ************************************************************/
   /* *** move this map's name and key fields to the working  ****/
   /* *** storage user area layout and then move the entire   ****/
   /* *** GSXREC to the commarea's user area field            ****/
   /* ************************************************************/
  ;
  GSXREC.GSXFRMAP = "GS0BM610";
  ;
  GSXREC.XWHCD = GS0BM610.XWHCD;
  GSXREC.TS3CNTNR = GS0BM610.TS3CNTNR;
  ;
  COMMAREA.CAUSERA = GSXREC.GSXUSERA;
  ;
   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
  ;
  ;
end // end GS0BS16

// select unique shp hdr tbl row
Function GS0BS9A()
  ;
  ;
   /* ************************************************************/
   /* *** select unique from: transportation container        ****/
   /* *** using the std module:  VRCVSH01                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/
  ;
   /* ************************************************************/
   /* *** select unique with these fields:                    ****/
   /* ***   ts_nike_shp_id                                    ****/
   /* ************************************************************/
  ;
  VRCVSH01.SL-SAP-SHP-ID = GS0BM610.SHIPNBR;
  ;
  GSSREC.GSSFNC = "S ";
  ;
  call "VRCVSH01" (GSSREC, SQLCA, VRCVSH01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "GS0BS9A ";
    TA1REC.TA1LOCAT[1] = "VRCVSH01";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "UNIQUE  ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VRCVSH01";
    TA1REC.TA1TBLKE = VRCVSH01.RCVSHPKEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  else
    if (GS0BM610.XWHCD == VRCVSH01.XWHCD
     && GS0BM610.TS3CNTNR == VRCVSH01.TS3CNTNR)
                   /* Next Sentence*/
    else
      GSWREC.GSWVERSW = "Y";
      GSWREC.GSWERRSW = "Y";
      GSWREC.XXXLOCID = "S9BA";
      GSWREC.GSWMSGNO = 0495; /* Display 'Whse does not match' message*/
    end
  end
  ;
  ;
   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
  ;
  ;
end // end GS0BS9A

// key missing input edits
Function GS0BSA6()
  ;
  ;
   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/
  ;
  if (GS0BM610.GATENBR > 0)
     /* ** next sentence ***/
  else
    GSWREC.GSWERRSW = "Y";
    GSWREC.XXXLOCID = "SA6A";
    GSWREC.GSWMSGNO = 0009; /* <--- missing required field msg*/
    set GS0BM610.GATENBR cursor, bold;
  end
  ;
  if (GS0BM610.SHIPNBR > " ")
     /* ** next sentence ***/
  else
    GSWREC.GSWERRSW = "Y";
    GSWREC.XXXLOCID = "SA6B";
    GSWREC.GSWMSGNO = 0009; /* <--- missing required field msg*/
    set GS0BM610.SHIPNBR cursor, bold;
  end
  ;
  if (GS0BM610.TS3CNTNR > " ")
     /* ** next sentence ***/
  else
    GSWREC.GSWERRSW = "Y";
    GSWREC.XXXLOCID = "SA6C";
    GSWREC.GSWMSGNO = 0009; /* <--- missing required field msg*/
    set GS0BM610.TS3CNTNR cursor, bold;
  end
  ;
  if (GS0BM610.XWHCD > " ")
     /* ** next sentence ***/
  else
    GSWREC.GSWERRSW = "Y";
    GSWREC.XXXLOCID = "SA6D";
    GSWREC.GSWMSGNO = 0009; /* <--- missing required field msg*/
    set GS0BM610.XWHCD cursor, bold;
  end
  ;
   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
  ;
  ;
end // end GS0BSA6

// key field edits
Function GS0BSC6()
  ;
  ;
   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/
  ;
   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/
  ;
  if (GS0BM610.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      GS0BM610.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      GSWREC.XWHOWNGF = XWHTBL.XWHOWNGF[sysVar.arrayIndex];
      GSWREC.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex]; /* CANA save country code*/
    else
      GS0BM610.XWHABRV = " ";
      GSWREC.GSWERRSW = "Y";
      GSWREC.XXXLOCID = "SC6A";
      GSWREC.GSWMSGNO = 0010; /* <--- inactive msg*/
      set GS0BM610.XWHCD cursor, bold;
    end
  else
    GS0BM610.XWHABRV = " ";
    GSWREC.GSWERRSW = "Y";
    GSWREC.XXXLOCID = "SC6B";
    GSWREC.GSWMSGNO = 0011; /* <--- invalid value msg*/
    set GS0BM610.XWHCD cursor, bold;
  end
  ;
  if (GS0BM610.XWHCD == "07")
    GS0BM610.RMTNBR = "RMT72";
  else
    GS0BM610.RMTNBR = " ";
  end
   /* ************************************************************/
   /* *** Validate the container and shipment number ****/
   /* ************************************************************/
  ;
   /*SET CTNREC EMPTY;*/
   /*MOVE GS0BM610.TS3CNTNR TO CTNREC.TS3CNTNR; /* Container*/
   /*MOVE GS0BM610.SHIPNBR TO CTNREC.SHIPNBR; /* Shipment Number*/
   /*MOVE GS0BM610.XWHCD TO CTNREC.XWHCD; /* Warehouse code*/
  ;
   /* CALL IO0560 'S ',SQLCA,SYCREC (NOMAPS,NONCSP; /* Select unique row*/
  ;
   /*IF SQLCA.SQLCODE EQ 0*/
   /*  OR SQLCA.SQLCODE EQ -811;*/
   /*    MOVE 'Y' TO GSWREC.GSWERRSW;*/
   /*    MOVE 'S1MC' TO GSWREC.XXXLOCID;*/
   /*    MOVE 0478 TO GSWREC.GSWMSGNO; /* < Duplicate Container*/
   /*    SET GS0BM610.TS3CNTNR CURSOR,BRIGHT;*/
   /*ELSE;*/
   /*  IF SQLCA.SQLCODE EQ +100;*/
  GS0BS9A(); /* Validate Shipment id and container and warehouse*/
   /*  ELSE;*/
   /*    IF SQLCA.SQLCODE EQ -911;*/
   /*       MOVE 'Y' TO GSWREC.GSWERRSW;*/
   /*       MOVE 'S1MC' TO GSWREC.XXXLOCID;*/
   /*       MOVE 0031 TO GSWREC.GSWMSGNO;*/
   /*       SET GS0BM610.TS3CNTNR CURSOR,BRIGHT;*/
   /*    ELSE;*/
   /*        MOVE 'Y' TO GSWREC.GSWERRSW;*/
   /*        MOVE 'S1MC' TO GSWREC.XXXLOCID;*/
   /*        MOVE 0001 TO GSWREC.GSWMSGNO;*/
   /*        SET GS0BM610.TS3CNTNR CURSOR,BRIGHT;*/
   /*      END;*/
   /*    END;*/
   /*END;*/
   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
  ;
  ;
end // end GS0BSC6

// save current key value(s)
Function GS0BSF6()
  ;
  ;
   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/
  ;
  COMMAREA.XWHCD = GS0BM610.XWHCD;
  ;
   /*MOVE GS0BM610.XWHCD TO GS0BW05.XWHCD;*/
  ;
   /*IF SL0CM510.TS3CNTNR NE SL0CW05.TS3CNTNR;*/
   /*  MOVE SL0CM510.TS3CNTNR TO SL0CW05.TS3CNTNR;*/
  GS0BS16(); /* <=== causera output processing*/
   /*END;*/
  ;
   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
  ;
  ;
end // end GS0BSF6

// ENTER processing
Function GS0BSH6()
  ;
  ;
   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/
  ;
  GS0BSA6(); /* <=== missing input edits*/
  ;
  if (GSWREC.GSWERRSW == "Y")
   /*  MOVE 'N' TO SL0CW05.SL0CWUPS;*/
    return;
  end
  ;
   /* ************************************************************/
   /* *** no missing fields: edit individual fields           ****/
   /* ************************************************************/
  ;
  GS0BSC6(); /* <=== field edits*/
  ;
  if (GSWREC.GSWERRSW == "Y")
   /*  MOVE 'N' TO SL0CW05.SL0CWUPS;*/
    return;
  end

  ;
   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
  ;
  ;
end // end GS0BSH6

// ENTER processing
Function GS0BSH7()
  ;
  ;
   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/
  ;
  GS0BSA6(); /* <=== missing input edits*/
  ;
  if (GSWREC.GSWERRSW == "Y")
   /*  MOVE 'N' TO SL0CW05.SL0CWUPS;*/
    return;
  end
  ;
   /* ************************************************************/
   /* *** no missing fields: edit individual fields           ****/
   /* ************************************************************/
  ;
  GS0BSC6(); /* <=== field edits*/
  ;
  if (GSWREC.GSWERRSW == "Y")
   /*  MOVE 'N' TO SL0CW05.SL0CWUPS;*/
    return;
  end
  ;
  ;
   /* ************************************************************/
   /* *** no errors: submit the  job               ****/
   /* ************************************************************/
  ;
  GS0BSF6();
  ;
  GS0BSU7(); /* <=== Format and submit the batch job*/
  ;
   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
  ;
  ;
end // end GS0BSH7

// key missing input edits
Function GS0BSU7()
  ;
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set TA6REC empty; /* Subroutine work area*/
  ;
  TA6REC.TA6INDEX = 1; /* Initialize index*/
  ;
   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/
  ;
  while (TA6REC.TA6INDEX > 0) /* Until end of table*/
    ;
    /* ------------------------------------------------------------*/
     /* Format the variable parameters entered by the user.*/
    /* ------------------------------------------------------------*/
    ;
    if (GS0BT07.TARTYPE[TA6INDEX] == "A") /* first parm*/
      GS0BT07.GS0BWWS2[TA6INDEX] = GS0BM610.XWHCD;
    else
      if (GS0BT07.TARTYPE[TA6INDEX] == "B") /* second parm*/
        GS0BT07.GS0BWWS3[TA6INDEX] = GS0BM610.XWHCD;
      else
        if (GS0BT07.TARTYPE[TA6INDEX] == "C") /* third parm*/
          GS0BT07.GS0BWWS1[TA6INDEX] = GS0BM610.XWHCD;
          GS0BT07.GS0BWCNR[TA6INDEX] = GS0BM610.TS3CNTNR;
          GS0BT07.GS0BWSNR[TA6INDEX] = GS0BM610.SHIPNBR;
          GS0BT07.GS0BWGNR[TA6INDEX] = GS0BM610.GATENBR;
        end
      end
    end
    ;
    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/
    ;
    TA6REC.TARJCL[TA6INDEX] = GS0BT07.TARJCL[TA6INDEX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = GS0BT07.TARTYPE[TA6INDEX]; /* Type*/
    ;
    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/
    ;
    if (GS0BT07.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/
      ;
      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      ;
    end
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* Submit JCL for background job*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    ;
    converseLib.validationFailed(01); /* Unexpected error occurred*/
    GSWREC.XXXLOCID = "SU7A"; /* Module identification*/
    GSWREC.GSWERRSW = "Y"; /* trigger error switch*/
    ;
  end
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end GS0BSU7

