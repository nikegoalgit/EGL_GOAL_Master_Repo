package oc0m;

import corpcom2.XS0AW02;
import corpcom3.XS0AS02;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF4;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XS0AT02;
import oc.common.*;
import ta.common.TA1REC;
//*** PROGRAM=OC0M ****
// APPLICATION OVERVIEW:
// 
//      This appication is the menu for the order information
//   subsystem.  Fastpathing is allowed from this menu.
// 
// 
// 
// 
// **********************************************************
//              M A I N T E N A N C E   L O G
// **********************************************************
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 04/26/91   skott    Created
// 09/11/91   schase   Added check ocwrtncd='05' for batch edit
//                     running when OF0C is called. S09.
// 11/06/91   dflesh   adjusted pf key locations on map.
// 01/07/92   scantr   added missing segmented tran id. oc0m000
// 09/15/93   clenni   added code to OC0MS07 to init ocwrec
//                     properly before transferring to new app.
// 01/25/94   gcalki   #1002 - recompile for change to ocwrec.
// *********************
Program OC0M type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  OC0MW01 OC0MW01; // record
  OCWREC OCWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  XS0AW02 XS0AW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XS0AT02; // table
  use OC0MM.OC0MM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OC0M000: OC0M000();
    goto OC0M010;
    OC0M010: OC0M010();
    goto OC0M010;
  end // end main
end // end OC0M

// ORDER INFORMATION MENU
Function OC0M000()
     /* Check csp and order information security*/

  XSENTRY();

     /* Set segmented transaction id*/

  CAEZSAP = sysVar.transactionID;
  CAEZSG12 = "OC";
  CAEZSG4 = "M";
  sysVar.transactionID = CAEZSAP;

     /* Initialize application - init records*/
                              /* save map name for XS sgrp's*/
  OC0MS01();


     /* Display commarea message*/

  OC0MM001.VAGen_EZEMSG = COMMAREA.CAMSG;
  COMMAREA.CAMSG = " ";


     /* Build map for display*/

  OC0MS02();


end // end OC0M000

// CONVERSE OCOMM001
Function OC0M010()

  converseLib.clearScreen();
   /* set map page*/
  converseVar.segmentedMode = 1; /* force segmented converse mode*/

  converse OC0MM001 ;

     /* Init error stuff*/

  converseLib.validationFailed(0); /* clear last error msg*/
  OC0MM001.VAGen_EZEMSG = " "; /* clear last commarea msg*/
  OC0MW01.OC0MWERR = "N"; /* clear error flag*/


     /* process PF Keys*/

  OC0MSPF();


  if (OC0MW01.OC0MWERR == "N") /* no errors*/

       /* Reset field attributes*/

    OC0MS05();


       /* Edit map*/

    OC0MS07();

  end

     /* transfer to requested option*/

  if (OC0MW01.OC0MWERR == "N") /* no errors*/
    OC0MS09(); /* process option*/
  end


end // end OC0M010

// initialize
Function OC0MS01()
       /* ***************************************************/
       /* *  INITIALIZE oc0m APPLICATION.                  **/
       /* ***************************************************/



  set OCWREC empty; /* global work record, inited only in this application*/

  set TA1REC empty; /* diag record*/
  set ERRSQLCA empty; /* diag record*/
  set SQLCA empty; /* diag record*/

  set OC0MM001 empty;
  set OC0MW01 empty;

  TA1REC.TA1MAP = "OC0MM001"; /* map name*/


end // end OC0MS01

// build map
Function OC0MS02()
       /* ****************************************************/
       /* *  BUILD oc0m MAP.                                **/
       /* ****************************************************/


  OC0MM001.OPMPRC = "OC0M"; /* process name*/

  OC0MM001.OPMMAP = "M1"; /* map name*/

  OC0MM001.OPMDTE = VGVar.currentShortGregorianDate; /* current date*/

  if (COMMAREA.CAITEM != " ") /* item has been entered*/
    XS0AS02(); /* Check for numeric CAITEM*/
  end
  if (OCWREC.OCWCUOID > 0) /* order number entered and numeric*/
    OC0MM001.OCWCUOID = OCWREC.OCWCUOID;
  end

  if (COMMAREA.CAMSG != " ") /* commarea contains a pass msg*/
    OC0MM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* format msg field*/
  end


end // end OC0MS02

// reset attributes
Function OC0MS05()
    /* ****  RESET ALL FIELD ATTRIBUTES DEFINED ON MAP.  ****/

  set OC0MM001.CATOAP initialAttributes;
  set OC0MM001.OC0MMITM initialAttributes;
  set OC0MM001.OC0MMOPT initialAttributes;
  set OC0MM001.OCWCUOID initialAttributes;


end // end OC0MS05

// edit map
Function OC0MS07()
   /* *****       EDIT MAP FIELDS.                *******/

       /* edit bottom up - fastpath fields first*/

  if (OC0MM001.CATOAP == " ") /* if blank*/
     /* next sentence*/
  else
    COMMAREA.CATOAP = OC0MM001.CATOAP; /* move map field to commarea*/
    COMMAREA.CAITEM = OC0MM001.OC0MMITM; /* move item to commarea*/
    if (COMMAREA.CATOSYS == "OC") /* if going to an 'oc' application*/
      set OCWREC empty;
      COMMAREA.CAUSERA = OCWREC.OCWGROUP;
    else
      COMMAREA.CAUSERA = " "; /* clear causera of ocwrec info*/
    end
    XSEXIT(); /* transfer to requested appl*/
    OC0MM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* if didn't work*/
    OC0MW01.OC0MWERR = "Y"; /* flag error for reconverse*/
    return;
  end


  if (OC0MM001.OC0MMOPT == 0) /* nothing entered*/
    converseLib.validationFailed(045); /* enter option and order number*/
    OC0MW01.OC0MWERR = "Y"; /* flag error for reconverse*/
    set OC0MM001.OC0MMOPT cursor, bold;
    return;
  end


          /* edit order number*/

  if (OC0MM001.OCWCUOID == 0) /* nothing entered*/
    converseLib.validationFailed(008); /* order number is required.*/
    OC0MW01.OC0MWERR = "Y"; /* flag error for reconverse*/
    set OC0MM001.OCWCUOID cursor, bold;
  end

          /* edit option*/


  if (OC0MM001.OC0MMOPT <= 3) /* option can be  1, 2, or 3*/
    /* next sentence*/
  else
    converseLib.validationFailed(001); /* option entered is incorrect*/
    OC0MW01.OC0MWERR = "Y"; /* flag error for reconverse*/
    set OC0MM001.OC0MMOPT cursor, bold;
  end

end // end OC0MS07

// call oc0f to load work rec
Function OC0MS09()
   /* *****      call OC0F to load work record     *******/


  OCWREC.OCWCUOID = OC0MM001.OCWCUOID; /* move ord nbr*/
  OCWREC.OCWRTNCD = "00"; /* init return code*/

  call "OC0F" (OCWREC) {isNoRefresh = yes}; /* mapless appl to load ocwrec*/

  if (OCWREC.OCWRTNCD == "01" /* all is well*/
   || OCWREC.OCWRTNCD == "02") /* invalid order number or NIL*/
    OC0MS50(); /* transfer to option*/
  else
    if (OCWREC.OCWRTNCD == "03") /* -911*/
      converseLib.validationFailed(006); /* database busy - please try again*/
      OC0MW01.OC0MWERR = "Y";
    else
      if (OCWREC.OCWRTNCD == "04") /* fatal problem*/
        converseLib.validationFailed(038); /* data problem, please try later*/
        OC0MW01.OC0MWERR = "Y"; /* flag as error*/
      else
        if (OCWREC.OCWRTNCD == "05") /* Batch edit is running*/
          OC0MM001.VAGen_EZEMSG = "AIRSPEED BATCH EDIT IS RUNNING, PLEASE TRY LATER";
          OC0MW01.OC0MWERR = "Y"; /* flag as error*/
        end
      end
    end
  end


end // end OC0MS09

// transfer to option
Function OC0MS50()
   /* *****       transfer to requested option     *******/

  COMMAREA.CAUSERA = OCWREC.OCWGROUP; /* passing data*/


  if (OC0MM001.OC0MMOPT == 1) /* Add discrepancies*/
    COMMAREA.CATOAP = "OC0A"; /* commarea "to" application*/
    XSEXIT();
  end


  if (OC0MM001.OC0MMOPT == 2) /* Display current discrepancy letter*/
    COMMAREA.CATOAP = "OC0B"; /* commarea "to" application*/
    XSEXIT();
  end


  if (OC0MM001.OC0MMOPT == 3) /* list all letters*/
    COMMAREA.CATOAP = "OC0C"; /* commarea "to" application*/
    XSEXIT();
  end


  OC0MM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* transfer failed*/
  OC0MW01.OC0MWERR = "Y"; /* set error flag*/


end // end OC0MS50

// process pf keys
Function OC0MSPF()

  COMMAREA.CAUSERA = OCWREC.OCWGROUP; /* ready to xfer out*/


  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "OP0M";
    XSEXIT();
  else

    if (converseVar.eventKey is pf4)
      XSPF4(); /* go to main menu*/
    else


      if (converseVar.eventKey is enter)
        return; /* continue with process*/
      else
        converseLib.validationFailed(002); /* invalid pf key*/
        OC0MW01.OC0MWERR = "Y"; /* set error flag*/
        return;
      end
    end
  end

  OC0MM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* transfer failed*/
  OC0MW01.OC0MWERR = "Y"; /* set error flag*/


end // end OC0MSPF

//*** RECORD=OC0MW01 ****
// 04/26/91  skott   created
// ***********************
Record OC0MW01 type basicRecord
  10 OC0MWERR OC0MWERR ; 
end // end OC0MW01

// error  flag
DataItem OC0MWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

