package oc0c;
import corpcom2.XS0AW02;
import corpcom2.XX0XW01;
import corpcom3.XS0AS00;
import corpcom3.XS0AS02;
import corpcom3.XS0AS03;
import corpcom3.XS0AS05;
import corpcom3.XS0AS06;
import corpcom3.XS0ASDC;
import corpcom3.XS0ASDL;
import corpcom3.XS0ASDP;
import corpcom3.XS0ASDR;
import corpcom3.XS0ASNP;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF4;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XS0AT02;
import kb.common.KBXREC;
import ku.common.KUMREC;
import oc.common.*;
import op.common.OP1CUPO;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
import xx.common.*;
import xx.common.XGPCD;
import xx.common.ZZZCHGDT;
import xx.common.ZZZCHGTM;
import xx02.*;
import xx02.XGPTBL;
import xx03.*;
import xx03.XLDCD;
import xx03.XLDTBL;
//*** PROGRAM=OC0C ****
// APPLICATION OVERVIEW:
// 
//   Display all confirmation and discrepancy letters for a
//   specific order number. The letters are to be displayed
//   by date to send in ascending order. This screen will
//   primarily be used for selecting discrepancy letters to
//   view. It also provides a history of all correspondence
//   for an order.
// 
// OBJECTIVE:
// 
//   Display the history of all letters, sent and unsent, for
//   a particular order number. This list of letters includes
//   an entry for a derived confirmation letter, if approp-
//   riate. Derived confirmations are displayed for any order
//   whose initial mailing date has not yet passed and for
//   which there is at least one buyer requesting a confirm-
//   ation. The 'send to' field comes from the Order Corres-
//   pondence Distribution Table (DORDC.VDISTB01) for sent
//   letters. For unsent letters, 'send to' is obtained from
//   the buyer system and depends on the type of letter being
//   displayed and the type of correspondence a given buyer has
//   requested.
//   Any or all discrepancy letters displayed on the current
//   page may be selected for viewing on the Discrepancy Letter
//   Display (OC0B). Any sent discrepancy letter may be sel-
//   ected for reprint. A request to reprint creates a new
//   letter header on the Letter Header Table (DORDC.VLETTR01)
//   PF9 is used to request a special confirmation. A request
//   for a special confirmation also creates a new letter
//   letter header.
// 
//   Called module OC5050 actually inserts any new letter
//   headers requested on the Letter Summary screen. Called
//   module OC5100 is used to set up the date-to-send and
//   initial mailing flag if that data has not yet been
//   initialized in the global record.
//   This application is accessed by selecting option 3 (List
//   All Letters) from the OC Menu (OC0M). It can also be
//   accessed by pressing PF13 from several of the Order
//   Correspondence (OC) applications.
// 
// **********************************************************
//              M A I N T E N A N C E   L O G
// **********************************************************
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 04/29/90   dlegg    Created
// 09/11/91   schase   Added check ocwrtncd='05' for batch edit
//                     is running when OC0F is called. s73.
// 10/24/91   TROBER   SPECIALTY STORE ENHANCEMENTS; DO NOT
//                     DISPLAY TWO CONFIRMATION LETTERS.
// 11/06/91   dflesh   adjusted pf key locations on map.
// 12/31/91   dcaust   changed posting routine from call to
//                     oc5050 in s80 and s83; from call oc5100
//                     in s20; dropped line from s81 (if sql
//                     not = 0).
// 01/03/92   trober   Added call to OC0G to see if order is
//                     is eligible for an auto cnfm.
//                     s03, s12, s18, s23, s25.
// 01/13/92   trober   Added call to OC5200 to format the
//                     buyer name for unsent letters in sf29.
// 06/12/92   scantr   Remove KBAREC, no longer used. s01
// 02/08/93   bbake2   log#820 - changed method of calling
//                     oc5150.  New passed parameters, new
//                     return codes. s59, s60, s61, s18, s30
// 01/25/94   gcalki   log#1002 - only allow confirmation
//                     letters for active orders. spf, ocwrec.
// *********************
Program OC0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KBXREC KBXREC; // record
  KUMREC KUMREC; // record
  OC0CW01 OC0CW01; // record
  OC0CW02 OC0CW02; // record
  OC0CW03 OC0CW03; // record
  OC0CW04 OC0CW04; // record
  OC1REC OC1REC; // record
  OC2REC OC2REC; // record
  OCBREC OCBREC; // record
  OCCREC OCCREC; // record
  OCEREC OCEREC; // record
  OCGREC OCGREC; // record
  OCHREC OCHREC; // record
  OCWREC OCWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XS0AW02 XS0AW02; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XS0AT02 {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XLDTBL {deleteAfterUse = yes}; // table
  use OC0CM.OC0CM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OC0C000: OC0C000();
     /* Flow to converse*/
    ;
    goto OC0C010;
    OC0C010: OC0C010();
     /* Flow back to converse*/
    ;
    goto OC0C010;
  end // end main
end // end OC0C

// Letter Summary Initialization
Function OC0C000()
     /* Check csp and order information security*/
  ;
  XSENTRY();
  OC0CS98();
  ;
   /* ****************************************************/
   /* *** set segmented trans id                      ****/
   /* ****************************************************/
  ;
  CAEZSAP = sysVar.transactionID;
  CAEZSG12 = "OC";
  CAEZSG4 = "C";
  sysVar.transactionID = CAEZSAP;
  ;
     /* Initialize application - init records, get zz date/time,*/
                              /* save map name for XS sgrp's*/
  OC0CS01();
  ;
  if (COMMAREA.CAFRMSYS != "OC") /* If coming from another system*/
    set OCWREC empty; /* Initialize system work rec*/
  end
  ;
  if (COMMAREA.CAITEM != " ")
    XS0AS02(); /* Check for numeric CAITEM*/
    OC0CM001.OCWCUOID = OCWREC.OCWCUOID; /* Move passed ord# to map*/
    OC0CS73(); /* Order number change routine*/
    COMMAREA.CAITEM = " ";
  end
  ;
  ;
     /* Load data and build initial map*/
  ;
  if (OCWREC.OCWCUOID != 0) /* If passed order number not zero*/
    if (OC0CW01.OC0CWERR != "Y") /* no error on passed item lookup*/
      OC0CS02(); /* Build map for passed order#*/
    else
       /* next sentence*/
    end
  else
    OC0CS05();
                                   /* Set field attr - display blank screen*/
    set OC0CM001.OCWCUOID cursor; /* Place cursor on order number*/
    converseLib.validationFailed(8); /* 'Enter order number'*/
  end
  ;
     /* Display commarea message*/
  ;
  if (COMMAREA.CAMSG != " ")
    OC0CM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CAMSG = " ";
  end
  ;
  if (COMMAREA.CACHGFL == "Y")
    OC0CM001.OC0CMPF5 = "5:ADD";
    OC0CM001.OC0CMPF9 = "9:SEND CON";
  end
end // end OC0C000

// Converse OC0CM001
Function OC0C010()
  ;
  converseLib.clearScreen();
   /* set map page*/
  converseVar.segmentedMode = 1; /* force segmented converse mode*/
  ;
  converse OC0CM001 ;
  ;
  ;
     /* Init error stuff, edit flags*/
  ;
  OC0CW01.OC0CWERR = "N";
  converseLib.validationFailed(0); /* clear last error msg*/
  OC0CM001.VAGen_EZEMSG = " "; /* clear last commarea msg*/
  OC0CW01.OC0CWNPG = " "; /* initialize request for new page*/
  OC0CW01.OC0CWCHG = " "; /* initialize order number change flag*/
  OC0CW01.OC0CWREQ = " "; /* initialize type option requested*/
  ;
  ;
   /* --------------------------------------------;*/
     /* Process PF Keys - May exit application   ;*/
     /* processing in this statement group if    ;*/
     /* certain PF Keys have been entered.       ;*/
   /* --------------------------------------------;*/
  ;
  OC0CSPF();
  ;
  OC0CSDB(); /* Check for DB busy on map build*/
  ;
   /* --------------------------------------------;*/
     /* Reset field attributes*/
   /* --------------------------------------------;*/
  ;
  OC0CS05();
  ;
   /* --------------------------------------------;*/
     /* Edit map*/
   /* --------------------------------------------;*/
  ;
  if (OC0CW01.OC0CWERR == "N") /* If no errors so far and*/
    if (converseVar.eventKey is enter /* Select*/
     || converseVar.eventKey is pf7   /* Scroll back*/
     || converseVar.eventKey is pf8   /* Scroll fwrd*/
     || converseVar.eventKey is pf9   /* Special request confirmation*/
     || converseVar.eventKey is pf19) /* Refresh*/
      OC0CS07(); /* Edit map*/
    end
  end
  ;
   /* ____________________________________________;*/
     /* Update;*/
   /* --------------------------------------------;*/
  ;
  if (OC0CW01.OC0CWERR == "Y" /* If there are edit errors*/
   || OC0CW01.OC0CWNPG == "Y" /* or a request to display a different page*/
   || OC0CW01.OC0CWCHG == "Y") /* or a new order number was entered*/
     /* next sentence            don't update*/
  else
    if (converseVar.eventKey is enter /* If update-type AID,*/
     || converseVar.eventKey is pf9   /* do update*/
     || converseVar.eventKey is pf19)
      OC0CS13();
    end
  end
  ;
   /* ----------------------------------------------------------;*/
     /* Transfer to Discrepancy Letter (OC0B) passing selected ;*/
     /* letter keys.                                           ;*/
   /* ----------------------------------------------------------;*/
  ;
  if (OC0CW01.OC0CWERR == "Y" /* If there are edit/update errors*/
   || OC0CW01.OC0CWNPG == "Y" /* or a request to display a different page*/
   || OC0CW01.OC0CWCHG == "Y") /* or a new order number was entered*/
     /* next sentence            don't transfer*/
  else
    if (converseVar.eventKey is enter) /* If processing select options*/
      if (OC0CW01.OC0CWREQ == "S" /* and at least one letter selected*/
       || OC0CW01.OC0CWREQ == "A") /* or all letters selected*/
        OCWREC.OCWCULTR = OCWREC.OC1LTRNB[1]; /* 1st sel ltr to curr*/
        OC0CS72(); /* Purge temp storage*/
        XS0AS06(); /* Exit - Transfer to OC0B*/
      end
    end
  end
  ;
   /* ----------------------------------------------------------;*/
     /* If letter lines are to be inserted or deleted, or a    ;*/
     /* new order number has been entered, or a special con-   ;*/
     /* firmation has been created, reinvoke this application  ;*/
     /* to build fresh pages.                                  ;*/
   /* ----------------------------------------------------------;*/
  ;
  if (OC0CW01.OC0CWERR == "Y") /* If there are edit/update errors*/
     /* next sentence*/
  else
    if (OC0CW01.OC0CWREQ == "R" /* If reprints were added*/
     || OC0CW01.OC0CWREQ == "D" /* or letters were deleted*/
     || OC0CW01.OC0CWCHG == "Y" /* or new order number entered*/
     || converseVar.eventKey is pf9) /* or special confirmation created*/
      OC0CS72(); /* Purge temp storage*/
      XS0AS00(); /* Exit - Reinvoke this application*/
    end
  end
  ;
   /* ----------------------------------------------------------;*/
     /* If a scrolling request has occurred, build the new     ;*/
     /* page before the next converse.                         ;*/
   /* ----------------------------------------------------------;*/
  ;
  if (OC0CW01.OC0CWERR == "N") /* If there are no edit errors*/
    if (OC0CW01.OC0CWNPG == "Y" /* and there is a scrolling request*/
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      OC0CS04(); /* build the new page*/
    else
      OC0CS12(); /* Check to see if anything entered*/
    end
  end
end // end OC0C010

// format 'no buyer' message
Function OC0CS-NO-BUYER-LN()
  if (OC0CW01.OCERTNCD > 00
   && OC0CW01.OC0CWBCT == 0)
    if (OC0CW01.OCERTNCD == 01)
      OC0CW02.OC0CWSTO[OC0CWLIX] = "NO BUYER FOUND - NO ACTIVE PRODUCT";
    end
    if (OC0CW01.OCERTNCD == 02)
      OC0CW02.OC0CWSTO[OC0CWLIX] = "NO BUYER FOUND - NO ACTIVE REP";
    end
    if (OC0CW01.OCERTNCD == 03)
      OC0CW02.OC0CWSTO[OC0CWLIX] = "NO BUYER FOUND - NO BUYER ASSIGNED";
    end
  else
    OC0CW02.OC0CWSTO[OC0CWLIX] = "NO BUYER DISTRIBUTION";
  end
end // end OC0CS-NO-BUYER-LN

// Initialize OC0C application
Function OC0CS01()
       /* ***************************************************/
       /* *  INITIALIZE OC0C APPLICATION.                  **/
       /* ***************************************************/
  ;
  ;
  set OC0CM001 empty; /* map*/
  set OC0CW01 empty; /* application w-s*/
  set OC0CW02 empty; /* TS letter line array*/
  set OC0CW03 empty; /* Buyer name table*/
  set OC0CW04 empty; /* Reprint array*/
  set OC1REC empty; /* Letter header*/
  set OC2REC empty; /* Distribution record*/
  set OCBREC empty; /* OC5050 pass record*/
  set OCCREC empty; /* OC5100 pass record*/
  set KBXREC empty; /* Buyer x-ref*/
  set KUMREC empty; /* Customer name*/
  set XS0AW02 empty; /* CAITEM edit work*/
  set SQLCA empty; /* SQL comm area*/
  set ERRSQLCA empty; /* Error SQL comm area*/
  set TAEREC empty;
  set TA1REC empty;
  set TA5REC empty;
  ;
  XX0XS01();
  OC0CW01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  OC0CW01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  COMMAREA.CACURRAP = "OC0C"; /* current appl*/
  TA1REC.TA1MAP = "OC0CM001"; /* map name*/
  OC0CM001.OCMDTE = VGVar.currentShortGregorianDate; /* current date*/
  OC0CM001.OCMPRC = "OC0C"; /* appl id*/
  OC0CM001.OCMMAP = "M1"; /* map id*/
  ;
   /* Purge any temp storage for OC0C that might be hanging*/
   /* around.*/
  OC0CS72(); /* Purge application TS*/
  ;
end // end OC0CS01

// Build map
Function OC0CS02()
    /* Build OC0C Map*/
    /* Letter lines are loaded and written to temp storage.*/
    /* Order heading lines and letter lines for the current*/
    /* page are moved to the map.*/
   /* --------------------------------------------------------*/
  ;
  OC0CS03(); /* Load letter lines*/
  ;
  if (SQLCA.VAGen_SQLCODE == -911)
    OC0CW01.OC0CWERR = "Y"; /* SET ERR FLAG ON*/
    OC0CW01.OC0CWBSY = "Y"; /* SET DB busy flag on*/
  end
  ;
  OC0CW01.OC0CMCPG = 1; /* Set current page to 1*/
  ;
  OC0CS25(); /* Move map order headings out*/
  ;
  OC0CS04(); /* Move map letter lines out*/
  ;
  if (SQLCA.VAGen_SQLCODE == -911)
    OC0CW01.OC0CWERR = "Y"; /* SET ERR FLAG ON*/
    OC0CW01.OC0CWBSY = "Y"; /* SET DB busy flag on*/
    converseLib.validationFailed(006);
  end
  ;
  if (OC0CW01.OC0CWBSY == "Y" /* If DB busy found on build*/
   || OC0CW01.OC0CWERR == "Y") /* or other error on build*/
    OC0CW01.OC0CWLIX = 1; /* Set line subs to 1*/
    while (OC0CW01.OC0CWLIX <= 12)
      set OC0CM001.OC0CMSEL[OC0CWLIX] skip, invisible;
      set OC0CM001.OC0CWTYP[OC0CWLIX] skip, invisible;
      set OC0CM001.OC0CMSDT[OC0CWLIX] skip, invisible;
      set OC0CM001.OC0CMADT[OC0CWLIX] skip, invisible;
      set OC0CM001.OC0CWHLD[OC0CWLIX] skip, invisible;
      set OC0CM001.OC0CWSTO[OC0CWLIX] skip, invisible;
      OC0CW01.OC0CWLIX = OC0CW01.OC0CWLIX + 1; /* Increment subs*/
    end
  end
  ;
end // end OC0CS02

// Load letter lines
Function OC0CS03()
     /* Obtain data and load letter lines.*/
     /* First load any reprints for the order into a WS*/
     /* array. Then select all sent letters and create*/
     /* sent letter lines, merging any reprints in after*/
     /* the original letter. If no sent letters are found,*/
     /* check to see if a automatic confirmation should be*/
     /* built. Next, select all unsent letters and create*/
     /* unsent letter lines.*/
   /* ---------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* Load reprints*/
   /* ------------------------------------------------------------*/
  ;
  OC0CS09(); /* Get any reprints*/
  ;
  if (SQLCA.VAGen_SQLCODE == -911) /* Check for -911 after reprint load*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Sent letters*/
   /* ------------------------------------------------------------*/
  ;
   /* Set up selection criteria for sent letters*/
  ;
  set OC1REC empty;
  OC1REC.OP1CUOID = OCWREC.OCWCUOID; /* Cust order id*/
  OC1REC.OP1PARTN = OCWREC.OP1PARTN; /* Part char*/
  OC1REC.OC1SNTDT = -1; /* Option to select all letters*/
  ;
  OC0CS50(); /* Select sent letters*/
  ;
  if (SQLCA.VAGen_SQLCODE == -911) /* Check for -911 select*/
    return;
  end
  ;
  OC0CW01.OC0CWLIX = 0; /* Set letter line subscript to 0*/
  OC0CW01.OC0CWSNF = "N"; /* initialize sent letter found*/
  ;
  OC0CS51(); /* Fetch first sent letter*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0) /* For each sent letter*/
    OC0CS10(); /* Build sent letter lines for this ltr*/
    OC0CS51(); /* Fetch next sent letter*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE == -911) /* Check for -911 for sent letters*/
    return;
  end
  ;
  OC0CS52(); /* Close select cursor for sent ltrs*/
  ;
   /* ------------------------------------------------------------*/
   /* automatic confirmation - derive one if letter not sent and*/
   /* no "CI" letters exist and buyers wants distribution and*/
   /* initial mailing has already past (flag = "n")*/
   /* ------------------------------------------------------------*/
  ;
  OC0CW01.OC0CWCLF = "N"; /* initialize cnfm letters found flag*/
  OC0CW01.OC0CWDCF = "N"; /* initialize auto cnfm flag*/
  if (OC0CW01.OC0CWSNF == "N") /* If there are no sent letters*/
    OC0CS23(); /* check for initial cnfm(s)*/
    if (SQLCA.VAGen_SQLCODE == -911 /* Check for -911 on initial cnfm*/
     || OC0CW01.OC0CWERR == "Y")    /* or other error*/
      return;
    end
    if (OC0CW01.OC0CWCLF == "N") /* no initial cnfm(s) found*/
      OC0CS18(); /* Check for a auto cnfm(s)*/
    end
  end
  if (SQLCA.VAGen_SQLCODE == -911 /* Check for -911 on auto cnfr*/
   || OC0CW01.OC0CWERR == "Y")    /* or other error*/
    return;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Unsent letters*/
   /* ------------------------------------------------------------*/
  ;
   /* Set up unsent letter selection criteria*/
  ;
  set OC1REC empty;
  OC1REC.OP1CUOID = OCWREC.OCWCUOID; /* Cust order id*/
  OC1REC.OP1PARTN = OCWREC.OP1PARTN; /* Part char*/
  OC1REC.OC1SNTDT = 0; /* Option to select unsent letters*/
  ;
  OC0CS50(); /* Select unsent letters*/
  ;
  if (SQLCA.VAGen_SQLCODE == -911) /* Check for -911 select*/
    return;
  end
  ;
  OC0CW01.OC0CWUSF = "N"; /* initialize unsent letter found*/
  OC0CS51(); /* Fetch first selected letter*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0) /* For each unsent letter*/
    OC0CS17(); /* Build unsent lines for this ltr*/
    OC0CS51(); /* Fetch next selected letter*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE == -911) /* Check for -911 for unsent letters*/
    return;
  end
  ;
  OC0CS52(); /* Close select cursor for unsent ltrs*/
  ;
   /* --------------------------------------*/
   /* Write final temp storage page*/
   /* --------------------------------------*/
  if (OC0CW01.OC0CWLIX > 0) /* If there are lines on the current pg*/
    OC0CS70(); /* Write page to temp storage*/
  end
end // end OC0CS03

// Move letter lines to map
Function OC0CS04()
   /* Read temp storage for letter lines (current page).*/
   /* Move letter lines from TS line array*/
   /* retrieved from temp storage to the map lines.*/
   /* ---------------------------------------------------*/
  ;
  OC0CM001.OC0CMCPG = OC0CW01.OC0CMCPG; /* Current page to map*/
  set OC0CM001.OCWCUOID cursor; /* Default cursor*/
  ;
  if (OC0CW01.OC0CWTSA == "Y") /* If any temp storage was written*/
    OC0CS71(); /* Read current temp storage page*/
  end
  ;
    /* Build map letter lines*/
  ;
  OC0CW01.OC0CWLIX = 12; /* Set line subscript to last line*/
  while (OC0CW01.OC0CWLIX > 0) /* Move out 12 lines, bottom up*/
    OC0CS21(); /* Move 1 TS line to map line*/
    OC0CW01.OC0CWLIX = OC0CW01.OC0CWLIX - 1; /* Decrement line subscript*/
  end
  ;
   /* ---------------------------------------------------------*/
   /* Check the global record letter array to see if letter*/
   /* on the line was viewed.*/
   /* If a letter is displayed that was loaded into the global*/
   /* record array for letters to view, display on the map the*/
   /* select character passed in the global record.*/
   /* ---------------------------------------------------------*/
  OC0CW01.OC0CWLIX = 1; /* Set line subscript to 1*/
  while (OC0CW01.OC0CWLIX < 13) /* For each of 12 lines*/
    OC0CM001.OC0CMSEL[OC0CWLIX] = " "; /* Init select*/
    if (OC0CW02.OC1LTRNB[OC0CWLIX] > 0) /* If there's a letter on line*/
      OC0CW01.OC0CWVIX = 1; /* Set viewed ltr subscrpt to 1*/
      while (OC0CW01.OC0CWVIX < 15) /* Search global array for match*/
        if (OCWREC.OC1LTRNB[OC0CWVIX] == OC0CW02.OC1LTRNB[OC0CWLIX])
          OC0CM001.OC0CMSEL[OC0CWLIX] = OCWREC.OCWSELCD[OC0CWVIX];
        end
        OC0CW01.OC0CWVIX = OC0CW01.OC0CWVIX + 1;
      end
    end
    OC0CW01.OC0CWLIX = OC0CW01.OC0CWLIX + 1;
  end
  ;
end // end OC0CS04

// Reset field attributes
Function OC0CS05()
    /* Reset field attributes after edit*/
   /* --------------------------------------------*/
  ;
   /* SET OC0CM001.CATOAP DEFINED;*/
   /* SET OC0CM001.CAITEM DEFINED;*/
  set OC0CM001.OCWCUOID initialAttributes; /* Order number*/
  set OC0CM001.OC0CMCPG initialAttributes; /* Current page*/
  ;
  OC0CW01.OC0CWLIX = 1; /* Set line subscript to 1*/
  while (OC0CW01.OC0CWLIX < 13) /* For 12 lines*/
    if (OC0CW02.OC0CWSEL[OC0CWLIX] == "Y") /* If select option enterable*/
      set OC0CM001.OC0CMSEL[OC0CWLIX] initialAttributes;
    else
      set OC0CM001.OC0CMSEL[OC0CWLIX] skip, invisible;
    end
    OC0CW01.OC0CWLIX = OC0CW01.OC0CWLIX + 1; /* Increment line subscript*/
  end
end // end OC0CS05

// Build map for blank order#
Function OC0CS06()
    /* Build blank OC0C map*/
    /* Used to blank out screen when no order number is*/
    /* entered.*/
   /* --------------------------------------------------------*/
  ;
  OC0CM001.OC0CMCPG = 1; /* Set current page to 1*/
  OC0CW01.OC0CMCPG = 1;
  OC0CM001.OC0CMMPG = 1; /* Set max page to 1*/
  OC0CW01.OC0CMMPG = 1;
  ;
  OC0CM001.OCMPRC = "OC0C"; /* process name*/
  OC0CM001.OCMDTE = VGVar.currentShortGregorianDate; /* current date*/
  OC0CM001.OC0CMMPG = OC0CW01.OC0CMMPG; /* max page nbr*/
  OC0CM001.OP1CUPO = " "; /* Customer PO*/
  OC0CM001.OCWCUST = " "; /* Customer number*/
  OC0CM001.KUMSTRNM = " "; /* Store name*/
  OC0CM001.XGPABRV = " ";
  ;
  OC0CW01.OC0CWLIX = 1; /* Set line subs to 1*/
  while (OC0CW01.OC0CWLIX <= 12)
    set OC0CM001.OC0CMSEL[OC0CWLIX] skip, invisible;
    set OC0CM001.OC0CWTYP[OC0CWLIX] skip, invisible;
    set OC0CM001.OC0CMSDT[OC0CWLIX] skip, invisible;
    set OC0CM001.OC0CMADT[OC0CWLIX] skip, invisible;
    set OC0CM001.OC0CWHLD[OC0CWLIX] skip, invisible;
    set OC0CM001.OC0CWSTO[OC0CWLIX] skip, invisible;
    OC0CW01.OC0CWLIX = OC0CW01.OC0CWLIX + 1; /* Increment subs*/
  end
  ;
end // end OC0CS06

// Edit map
Function OC0CS07()
   /* Order number change is valid only if AID is ENTER.*/
   /* PF7 and PF8 are scrolling requests.*/
   /* PF9 is a request for a special confirmation.*/
   /* PF19 is a request to refresh the screen.*/
   /* -----------------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter)
    if (OCWREC.OCWCUOID != OC0CM001.OCWCUOID /* If order number entered*/
     || OC0CM001.OCWCUOID == 0)              /* or order number blank*/
      OC0CS73(); /* Order number edit routine*/
    else
      OC0CS40(); /* Continue ENTER edit if no new order number entered*/
    end
  else
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      if (OCWREC.OCWCUOID != OC0CM001.OCWCUOID) /* Order number changed*/
        OC0CW01.OC0CWERR = "Y"; /* Turn on error flag*/
        converseLib.validationFailed(004); /* 'Cannot scroll and modify'*/
      else
        OC0CS41(); /* Continue scroll edit*/
      end
    else
      if (converseVar.eventKey is pf9)
        if (OCWREC.OCWCUOID != OC0CM001.OCWCUOID) /* Order number changed*/
          OC0CW01.OC0CWERR = "Y"; /* Turn on error flag*/
          converseLib.validationFailed(051); /* 'Cannot request confirmation and change*/
        else /* order number'*/
          OC0CS42();
                                   /* Continue special confirmation request*/
        end /* edit*/
      else
        if (converseVar.eventKey is pf19)
          if (OCWREC.OCWCUOID != OC0CM001.OCWCUOID) /* Order number change*/
            OC0CW01.OC0CWERR = "Y"; /* Turn on error flag*/
            converseLib.validationFailed(052); /* 'Cannot refresh and change order number'*/
          else
            OC0CS43(); /* Continue refresh screen edit*/
          end
        end
      end
    end
  end
  ;
  if (SQLCA.VAGen_SQLCODE == -911)
    OC0CW01.OC0CWERR = "Y"; /* error flag on*/
    converseLib.validationFailed(006); /* db busy try again*/
    return;
  end
  ;
  ;
end // end OC0CS07

// Get reprints
Function OC0CS09()
   /* Find and load reprints to an array.*/
   /* Reprints are ordered by original letter sequence*/
   /* number.*/
   /* ------------------------------------------------*/
  ;
  OC0CS56(); /* Select reprints*/
  ;
  if (SQLCA.VAGen_SQLCODE != -911) /* If not DB busy*/
    OC0CS57(); /* Fetch first selected reprint*/
  end
  ;
  ;
  OC0CW01.OC0CWRIX = 0; /* Set reprint subscript to 0*/
  while (SQLCA.VAGen_SQLCODE == 0 /* For each reprint*/
   && OC0CW01.OC0CWRIX <= 50) /* and array not maxed out*/
    OC0CS14(); /* Load reprint into array*/
    OC0CS57(); /* Fetch next selected reprint*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE == -911) /* Check for DB busy*/
    OC0CW01.OC0CWERR = "Y"; /* SET ERR FLAG ON*/
    converseLib.validationFailed(006); /* db busy try again*/
    return;
  end
  ;
  OC0CS58(); /* Close selection cursor*/
end // end OC0CS09

// Build sent letter lines
Function OC0CS10()
   /* For sent letters, addressee information is found on*/
   /* the Distribution Table (DORDC.VDISTB01).*/
   /* Reprints appear directly below the original letter.*/
   /* -----------------------------------------------------*/
  ;
  if (OC1REC.XLDCD == "DR" /* If this is a reprint*/
   || OC1REC.OC1SNTDT <= 0) /* or an unsent letter*/
    return; /* skip (handled in reprint*/
  end /* table)*/
  ;
   /* Save fields from the first sent letter.*/
   /* They may be needed to build the order information*/
   /* at the top of the map*/
  ;
  if (OC0CW01.OC0CWSNF == "N") /* This is the first sent letter*/
    OC0CW01.OC0CWSNF = "Y"; /* set Sent Ltr Found flag to yes*/
    OC0CW01.XGPCD = OC1REC.XGPCD; /* GPC code*/
    OC0CW01.OP1CUPO = OC1REC.OP1CUPO; /* Customer PO*/
    OC0CW01.OCWCOID = OC1REC.KUCCOID; /* Company*/
    OC0CW01.OCWSTRID = OC1REC.KUMSTRID; /* Store ID*/
    OC0CW01.OCWXNXCD = OC1REC.XNXCD; /* Dept code*/
  end
  ;
  set OC2REC empty; /* Distribution record*/
  OC2REC.OC1LTRNB = OC1REC.OC1LTRNB; /* Set up letter# key*/
  OC0CS53();
                                   /* Select all addressees for this letter*/
  ;
  OC0CS54(); /* Fetch first addressee*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* If no addressees found for sent ltr*/
    if (OC1REC.XLDCD == "CI" /* and confirmation-type letter*/
     || OC1REC.XLDCD == "CR")
      TA1REC.TA1LOCAT[1] = "OC0CS10"; /* Stmt group*/
      TA1REC.TA1LOCAT[2] = " "; /* i/o mod*/
      TA1REC.TA1LOCAT[3] = "  "; /* function*/
      OC0CW01.OC0CWPKY = OCWREC.OP1PARTN; /* Error part char*/
      OC0CW01.OC0CWOKY = OCWREC.OCWCUOID; /* Error order number key*/
      OC0CW01.OC0CWLKY = OC1REC.OC1LTRNB; /* Error letter number key*/
      TA1REC.TA1TBLKE = OC0CW01.OC0CWEKY; /* Formatted error key*/
      TAEREC.TAEDESC1 = "WARNING - NO DISTRIB FOUND FOR SENT CONFIRM";
      TAEREC.TAEDESC2 = OC0CW01.OC0CWEKY;
      XS0ASNP(); /* post diagnostics and return here*/
    end
  end
  ;
  OC0CW01.OC0CWSNF = "Y"; /* Set sent letter found flag to yes*/
  OC0CW01.OC0CWLN1 = "Y"; /* Set 1st line flag to yes*/
  OC0CW01.OC0CWLTP = " "; /* Set line type to normal(not reprint)*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* If no distribution found*/
    if (OC1REC.XLDCD == "D " /* and discrepancy-type letter*/
     || OC1REC.XLDCD == "DR")
      OC0CS45(); /* Format 'Rep Only' line*/
    else
      OC0CS30(); /* Format 'No distribution' line*/
    end
  end
  ;
  while (SQLCA.VAGen_SQLCODE == 0) /* For each addressee found*/
    OC0CS15(); /* Format a sent letter line*/
    OC0CS54(); /* Fetch next addressee*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE == -911) /* Check for DB busy on distrib fetch*/
    OC0CW01.OC0CWERR = "Y"; /* Set err flag on*/
    converseLib.validationFailed(006); /* db busy try again*/
    return;
  end
  ;
  OC0CS55(); /* Close distribution selection cursor*/
  ;
  OC0CS16(); /* See if there is a reprint for this letter*/
  ;
  if (SQLCA.VAGen_SQLCODE == -911) /* Check for DB busy after reprint process*/
    OC0CW01.OC0CWERR = "Y"; /* Set error flag on*/
    converseLib.validationFailed(006); /* db busy try again*/
    return;
  end
  ;
end // end OC0CS10

// Last check for message
Function OC0CS12()
   /* Assign the message to displayed if nothing was*/
   /* entered on the screen.*/
   /* ------------------------------------------------*/
  ;
  if (converseVar.eventKey is enter
   && OC0CW01.OC0CWREQ == " ") /* No options requested*/
    if (OC0CW01.OC0CWSNF == "N" /* No sent letters*/
     && OC0CW01.OC0CWUSF == "N" /* and no unsent letters*/
     && OC0CW01.OC0CWDCF == "N") /* and no auto cnfm*/
      converseLib.validationFailed(048); /* 'No letters to display for order'*/
      set OC0CM001.OCWCUOID cursor;
    else
      converseLib.validationFailed(069); /* 'Valid options are...'*/
    end
  end
  ;
end // end OC0CS12

// Update process
Function OC0CS13()
   /* Update routine*/
   /* -----------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf9) /* If special confirmation request*/
    OC0CS80(); /* Create special confirmation*/
  else
    if (converseVar.eventKey is enter) /* If processing select options*/
      OC0CS81(); /* Process selections*/
    else
      if (converseVar.eventKey is pf19) /* If request to refresh*/
        OC0CS82(); /* Refresh selection options*/
      end
    end
  end
  ;
  if (SQLCA.VAGen_SQLCODE == -911)
    OC0CW01.OC0CWERR = "Y"; /* error flag on*/
    converseLib.validationFailed(006); /* db busy try again*/
    return;
  end
  ;
end // end OC0CS13
// Load reprint into array
Function OC0CS14()
   /* Move fields from letter header record into reprint array.*/
   /* Reprints are saved in a WS array so they can be merged*/
   /* in to appear directly after the original letter that was*/
   /* reprinted. There can be a maximum of 50 reprints loaded.*/
   /* ---------------------------------------------------------*/
  ;
  OC0CW01.OC0CWRIX = OC0CW01.OC0CWRIX + 1; /* Increment reprint subscript*/
  ;
  if (OC0CW01.OC0CWRIX > 50) /* If subscript greater than max*/
    TA1REC.TA1LOCAT[1] = "OC0CS14"; /* Stmt group*/
    TA1REC.TA1TBLKE = OCWREC.OCWCUOID; /* Current order number*/
    TAEREC.TAEDESC1 = "MORE THAN 50 REPRINTS FOUND FOR ORDER";
    XS0ASNP(); /* Post error*/
    converseLib.validationFailed(047); /* 'Too many reprints to display'*/
    return; /* Return to calling statement group*/
  end
  ;
   /* Move Letter Header row to WS array row*/
  OC0CW04.OC1LTRNB[OC0CWRIX] = OC1REC.OC1LTRNB; /* Letter number*/
  OC0CW04.XLDCD[OC0CWRIX] = OC1REC.XLDCD; /* Letter type*/
  OC0CW04.OC1LPRTN[OC0CWRIX] = OC1REC.OC1LPRTN; /* Orig letter number*/
  OC0CW04.OC1SNDDT[OC0CWRIX] = OC1REC.OC1SNDDT; /* Date to send*/
  OC0CW04.OC1SNTDT[OC0CWRIX] = OC1REC.OC1SNTDT; /* Actual date sent*/
  OC0CW04.OC1LTRST[OC0CWRIX] = OC1REC.OC1LTRST; /* Letter status*/
  ;
  OC0CW01.OC0CWRCT = OC0CW01.OC0CWRCT + 1; /* Add 1 to total reprint count*/
  ;
end // end OC0CS14

// Format sent letter line
Function OC0CS15()
   /* Format a sent letter line*/
   /* ---------------------------------------------*/
  ;
  OC0CW01.OC0CWLIX = OC0CW01.OC0CWLIX + 1; /* Increment line subscript*/
  ;
  if (OC0CW01.OC0CWLN1 == "Y") /* If 1st line for letter*/
    OC0CW01.OC0CWLN1 = "N"; /* Set 1st line flag to no*/
    if (OC0CW01.OC0CWLTP == "R") /* If reprint*/
      OC0CS34(); /* Move letter fields for reprint*/
    else /* else*/
      OC0CS19(); /* Move letter fields from record*/
    end
  end
  ;
   /* Move address attention to 'send to' field*/
  OC0CW02.OC0CWSTO[OC0CWLIX] = OC2REC.XXXATTN;
  ;
  if (OC0CW01.OC0CWLIX == 12) /* If page is full*/
    OC0CS70(); /* Write page to temp storage*/
    OC0CW01.OC0CWLN1 = "Y"; /* Set 1st line flag to yes*/
  end
  ;
end // end OC0CS15

// Check for reprint
Function OC0CS16()
   /* See if there are any reprints in the reprint array*/
   /* for the letter whose lines have just been created.*/
   /* ---------------------------------------------------------*/
  ;
  OC0CW01.OC0CWRIX = 1; /* Set reprint subscript to 1*/
  ;
   /* Check each reprint in the array (OC0CWRCT is the*/
   /* total number of reprints loaded).*/
   /* If the original letter number on the reprint*/
   /* equals the letter seq number of the letter lines*/
   /* just created, create letter lines for the reprint.*/
  ;
  while (OC0CWRIX <= OC0CW01.OC0CWRCT) /* For each reprint in array*/
    if (OC0CW04.OC1LPRTN[OC0CWRIX] == OC1REC.OC1LTRNB) /* If reprint match*/
      if (OC0CW04.OC1SNTDT[OC0CWRIX] > 0) /* If a sent reprint*/
        OC0CS32(); /* build sent reprint lines*/
      else /* else*/
        OC0CS33(); /* build unsent reprint lines*/
      end
    end
    OC0CWRIX = OC0CWRIX + 1; /* Increment reprint subscript*/
  end
end // end OC0CS16

// Build unsent letter lines
Function OC0CS17()
   /* Build unsent letter lines.*/
   /* 'Send to' field for unsent letters comes from the*/
   /* buyer system.*/
   /* ----------------------------------------------------*/
  ;
  if (OC1REC.XLDCD == "DR") /* If reprint*/
    return; /* skip*/
  end
  ;
  if (OC0CW01.OC0CWUSF == "N") /* This is first unsent letter*/
    OC0CW01.OC0CWUSF = "Y"; /* Set unsent letter found flag to yes*/
  end
  ;
  if (OC0CW01.OC0CWBYF != "Y") /* If buyer name table not loaded*/
    OC0CS27(); /* Load the buyer name table*/
  end
  ;
  OC0CW01.OC0CWLTP = " "; /* Letter type is normal (not reprint)*/
  OC0CW01.OC0CWLN1 = "Y"; /* Set 1st line flag to yes*/
  OC0CW01.OC0CWBIX = 1; /* Set buyer subscript to 1*/
  OC0CW01.OC0CWLCT = 0; /* Initialize lines written cnt*/
  while (OC0CW01.OC0CWBIX <= OC0CW01.OC0CWBCT) /* For each buyer found*/
    OC0CS28(); /* Format an unsent letter line*/
    OC0CW01.OC0CWBIX = OC0CW01.OC0CWBIX + 1; /* Increment buyer subscript*/
  end
  ;
  if (OC0CW01.OC0CWLCT == 0) /* If no lines were written*/
    OC0CS30(); /* Format 'No buyer distrib' line*/
  end
end // end OC0CS17

// Check for auto cnfirmation
Function OC0CS18()
   /* An unsent confirmation letter is displayed if*/
   /* the initial mailing date for the order has not*/
   /* yet passed and at least one buyer has requested*/
   /* to receive confirmations.*/
   /* Orders which are not currently found on OP or*/
   /* Airspeed are bypassed.*/
   /* --------------------------------------------------*/
  ;
  if (OCWREC.OCWSYSID == "NO") /* If order not on OP or Airspeed*/
    return; /* there is no confirmation display.*/
  end /* Return to calling routine.*/
  ;
  if (OCWREC.OP-SND-CNFM-FL == "N") /* auto cnfm cancelled*/
    return;
  end
  ;
  OCGREC.XDVCD = OCWREC.XDVCD; /* division code*/
  OCGREC.XSOCD = OCWREC.XSOCD; /* sales office id*/
  OCGREC.XOTCD = OCWREC.XOTCD; /* order type code*/
  OCGREC.XBDCD = OCWREC.XBDCD; /* bulk draw code*/
  OCGREC.OCG-OC-ELIG-FOR-CNFM-FL = " "; /* elig for cnfm flag*/
  ;
  call "OC0G" (OCGREC) {isNoRefresh = yes}; /* correct xso, xot, xbd, xdv for*/
                                  /* an auto cnfm?*/
  ;
  if (OCGREC.OCG-OC-ELIG-FOR-CNFM-FL == "N") /* not eligible for cnfm*/
    return;
  end
  ;
  if (OCWREC.OCWINIFL == " ") /* If initial mailing flag not set up*/
                                   /* yet*/
    OC0CS20(); /* Set up the initial mailing flag*/
  end
  ;
  if (OCWREC.OCWINIFL == "N") /* If the initial mailing date has*/
    return;
                                   /* already past there is no confirmation*/
  end /* to display. Return to calling*/
                                   /* routine.*/
  ;
  if (OC0CW01.OC0CWBYF != "Y") /* If buyer name table not yet loaded*/
    OC0CS27(); /* load buyer name table*/
  end
  ;
    /* before looping thru the table, we have to check the oc5150 return*/
    /* code for 'no buyer found' situations.  If we have one, then special*/
    /* messages will be set up for display instead of the buyer name,*/
    /* to indicate which part of the buyer find routine was unsuccessful*/
  ;
  if (OC0CW01.OCERTNCD > 00
   && OC0CW01.OC0CWBCT == 0)
    OC0CW03.OC0CWDFL[1] = "Y";
    OC0CW03.OC0CWCFL[1] = "Y";
    OC0CW01.OC0CWBCT = 1;
    if (OC0CW01.OCERTNCD == 01)
      OC0CW03.OC0CWBNM[1] = "NO BUYER FOUND - NO ACTIVE PRODUCT";
    end
    if (OC0CW01.OCERTNCD == 02)
      OC0CW03.OC0CWBNM[1] = "NO BUYER FOUND - NO ACTIVE REP";
    end
    if (OC0CW01.OCERTNCD == 03)
      OC0CW03.OC0CWBNM[1] = "NO BUYER FOUND - NO BUYER ASSIGNED";
    end
  end
  ;
  OC0CW01.OC0CWBIX = 1; /* Initialize buyer subscript*/
  while (OC0CWBIX <= OC0CW01.OC0CWBCT /* Search buyers until end or*/
   && OC0CW03.OC0CWCFL[OC0CWBIX] != "Y") /* buyer wanting confrm found*/
    if (OC0CW03.OC0CWCFL[OC0CWBIX] == "Y") /* If buyer wants confrm*/
       /* don't increment subscript*/
    else
      OC0CWBIX = OC0CWBIX + 1; /* Increment subscript*/
    end
  end
  ;
  if (OC0CW03.OC0CWDFL[OC0CWBIX] == "Y") /* Buyer wanting confrm found*/
    OC0CW01.OC0CWDCF = "Y"; /* Turn on auto confrm flag*/
     /* Load 'temporary' header to move fields from ;*/
    OC1REC.XLDCD = "CI";
    OC1REC.OC1SNDDT = OCWREC.OC1SNDDT;
    OC1REC.OC1SNTDT = 0;
    OC1REC.OC1LTRST = "RL";
    OC1REC.OC1LTRNB = 0;
    ;
    OC0CW01.OC0CWLN1 = "Y"; /* Set 1st line flag to yes*/
    OC0CW01.OC0CWBIX = 1; /* Set buyer subscript to 1*/
    while (OC0CW01.OC0CWBIX <= OC0CW01.OC0CWBCT) /* For each buyer found*/
      OC0CS28(); /* Format an unsent letter line*/
      OC0CW01.OC0CWBIX = OC0CW01.OC0CWBIX + 1; /* Increment buyer subscript*/
    end
  end
end // end OC0CS18

// Move letter fields to WS line
Function OC0CS19()
   /* Move fields from Letter Header row (DORDC.VLETTR01)*/
   /* to current line in TS array, formatting for display*/
   /* if necessary.*/
   /* --------------------------------------------------------*/
  ;
      /* Letter type code*/
  OC0CW02.XLDCD[OC0CWLIX] = OC1REC.XLDCD;
      /* Letter type text*/
  sysVar.arrayIndex = 1; /* Init letter table subscript*/
  if (OC1REC.XLDCD in XLDTBL.XLDCD)
    OC0CW02.OC0CWTYP[OC0CWLIX] = XLDTBL.XLDABRV[sysVar.arrayIndex];
  else
    OC0CW02.OC0CWTYP[OC0CWLIX] = "UNKNOWN";
  end
  ;
      /* Date-to-send*/
  OC0CW02.OC1SNDDT[OC0CWLIX] = OC1REC.OC1SNDDT;
  ;
      /* Actual date sent*/
  OC0CW02.OC1SNTDT[OC0CWLIX] = OC1REC.OC1SNTDT;
  ;
      /* On Hold indicator*/
  if (OC1REC.XLDCD == "D "
   || OC1REC.XLDCD == "DR")
    if (OC1REC.OC1LTRST == "NR"
     || OC1REC.OC1LTRST == "OB")
      OC0CW02.OC0CWHLD[OC0CWLIX] = "Y";
    else
      OC0CW02.OC0CWHLD[OC0CWLIX] = " ";
    end
  else
    OC0CW02.OC0CWHLD[OC0CWLIX] = " ";
  end
  ;
  if (OC1REC.XLDCD == "D ") /* If dscrp letter*/
    OC0CW02.OC0CWSEL[OC0CWLIX] = "Y"; /* Yes, select is enterable*/
  else
    if (OC1REC.OC1SNTDT == 0) /* If unsent letter*/
      if (OC1REC.XLDCD == "DR" /* and reprint or req confirmation*/
       || OC1REC.XLDCD == "CR")
        OC0CW02.OC0CWSEL[OC0CWLIX] = "Y"; /* Yes, select is enterable*/
      else
        OC0CW02.OC0CWSEL[OC0CWLIX] = "N"; /* Select is not enterable*/
      end
    else
      OC0CW02.OC0CWSEL[OC0CWLIX] = "N"; /* Select is not enterable*/
    end
  end
      /* Letter number*/
  OC0CW02.OC1LTRNB[OC0CWLIX] = OC1REC.OC1LTRNB;
end // end OC0CS19

// Set up initial mailing data
Function OC0CS20()
   /* Calls OC5100 to find next date to send and*/
   /* check if initial mailing date has past.*/
   /* ---------------------------------------------------*/
  ;
   /* Set up parameters for call*/
  set OCCREC empty; /* Initialize pass record*/
  OCCREC.OP1ENTDT = OCWREC.OP1ENTDT; /* Order entry date*/
  OCCREC.XGPCD = OCWREC.XGPCD; /* Order GPC code*/
  OCCREC.XOTCD = OCWREC.XOTCD; /* Order type code*/
  OCCREC.OP1CUOID = OCWREC.OP1CUOID; /* customer order id*/
  OCCREC.XSOCD = OCWREC.XSOCD; /* sales office id*/
  ;
  call "OC5100" (OCCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (OCCREC.OCCRTNCD == 0) /* If good return code, move returned*/
                                   /* fields to global work record*/
    OCWREC.OCWINIFL = OCCREC.OCWINIFL; /* Initial mailing flag*/
    OCWREC.OC1SNDDT = OCCREC.OC1SNDDT; /* Next sched send date*/
  else /* Handle bad codes*/
    if (OCCREC.OCCRTNCD == 1) /* db busy*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Rollback*/
      converseLib.validationFailed(006); /* DB busy*/
      OC0CW01.OC0CWERR = "Y"; /* Turn on error flag*/
    else
      TA1REC.TA1LOCAT[1] = "OC0CS20"; /* stmt group*/
      TA1REC.TA1LOCAT[2] = "OC5100"; /* subroutine called*/
      OC0CW01.OC0CWKY1 = " "; /* init error key*/
      OC0CW01.OC0CWRTN = OCCREC.OCCRTNCD; /* return code to key*/
      OC0CW01.OC0CWORD = OCWREC.OCWCUOID; /* cust ord id to key*/
      TAEREC.TAEDESC2 = OC0CW01.OC0CWKY1; /* key to desc*/
      if (OCCREC.OCCRTNCD == 3)
        TAEREC.TAEDESC1 = "BAD RTN CD FROM OC5100 - CUTOFF ROW NOT FOUND";
        converseLib.validationFailed(094); /* no valid production cutoff date*/
                                   /* found - cannot display letters*/
        OC0CW01.OC0CWERR = "Y";
      else
        TAEREC.TAEDESC1 = "BAD RTN CD FROM OC5100 - DATA PROBLEM";
        converseLib.validationFailed(038); /* data problem - contact the help desk*/
        OC0CW01.OC0CWERR = "Y";
      end
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      XS0ASNP(); /* non-DB2 post, return here*/
    end
  end
  ;
end // end OC0CS20

// Move 1 letter line to map
Function OC0CS21()
   /* Move fields from one line of the retrieved temp*/
   /* temp storage page record to the map line.*/
   /* ----------------------------------------------------*/
  ;
         /* Letter type description*/
  OC0CM001.OC0CWTYP[OC0CWLIX] = OC0CW02.OC0CWTYP[OC0CWLIX];
  ;
         /* Date-to-send*/
  OC0CW01.OC0CWDTE = OC0CW02.OC1SNDDT[OC0CWLIX]; /* reformat date*/
  OC0CM001.OC0CMSDT[OC0CWLIX] = OC0CW01.OC0CWYMD;
  ;
         /* Actual date sent*/
  OC0CW01.OC0CWDTE = OC0CW02.OC1SNTDT[OC0CWLIX]; /* reformat date*/
  OC0CM001.OC0CMADT[OC0CWLIX] = OC0CW01.OC0CWYMD;
  ;
         /* Held flag*/
  OC0CM001.OC0CWHLD[OC0CWLIX] = OC0CW02.OC0CWHLD[OC0CWLIX];
  ;
         /* Formatted 'send to'*/
  OC0CM001.OC0CWSTO[OC0CWLIX] = OC0CW02.OC0CWSTO[OC0CWLIX];
  ;
  if (OC0CW02.OC0CWSEL[OC0CWLIX] == "Y") /* Select option valid for line*/
    set OC0CM001.OC0CMSEL[OC0CWLIX] cursor, initialAttributes; /* Show select option*/
  else
    set OC0CM001.OC0CMSEL[OC0CWLIX] skip, invisible; /* Darken select option*/
  end
end // end OC0CS21

// IO5850 - Select initial cnfm
Function OC0CS23()
   /* ------------------------------------------------*/
   /* SELECT FOR AUTOMATIC CONFIRMATION EXISTENCE*/
   /* ------------------------------------------------*/
  ;
  set OC1REC empty;
  OC1REC.OP1CUOID = OCWREC.OCWCUOID; /* op_cust_ord_id*/
  OC1REC.OP1PARTN = OCWREC.OP1PARTN; /* op_ord_part_char*/
  OC1REC.XLDCD = "CI"; /* xld_ltr_typ_cd*/
  ;
  call "IO5850" ("SE", SQLCA, OC1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* one row satisfied select*/
   || SQLCA.VAGen_SQLCODE == -811) /* multiple rows satisfied select*/
    OC0CW01.OC0CWCLF = "Y"; /* confirmation(s) found*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* No rows satisfied select*/
      OC0CW01.OC0CWCLF = "N"; /* no confirmation found*/
    else
      TA1REC.TA1LOCAT[1] = "OC0CS23"; /* stmt group*/
      TA1REC.TA1LOCAT[2] = "IO5850"; /* i/o mod*/
      TA1REC.TA1LOCAT[3] = "SE"; /* transaction*/
      OC0CW01.OC0CWPCH = OCWREC.OP1PARTN; /* op_ord_part_char*/
      OC0CW01.OC0CWOID = OCWREC.OCWCUOID; /* op_cust_ord_id*/
      OC0CW01.OC0CWXLD = "CI"; /* xld_ltr_typ_cd*/
      TA1REC.TA1TBLKE = OC0CW01.OC0CWELF; /* error key*/
      TA1REC.TA1DBASE = "DORDC"; /* database name*/
      TA1REC.TA1TBLVU = "VLETTR01"; /* database view name*/
      if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
        XS0ASDP(); /* Post and come back*/
        converseLib.validationFailed(006); /* DB busy*/
        OC0CW01.OC0CWERR = "Y"; /* Turn on error flag*/
      else
        COMMAREA.CAMSG = "DATA PROBLEM - CONTACT HELP DESK";
        OC0CS72(); /* Purge TS*/
        XS0ASDC(); /* Post and exit*/
      end
    end
  end
  ;
end // end OC0CS23

// Get store name
Function OC0CS24()
   /* Read customer DB for store name*/
   /* ---------------------------------------------------*/
  ;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* call was good*/
    OCWREC.KUMSTRNM = KUMREC.KUMSTRNM; /* store name*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* cust not found*/
      OCWREC.KUMSTRNM = "UNKNOWN";
    else
      OCWREC.KUMSTRNM = "UNDETERMINED";
    end
  end
  ;
  ;
  ;
end // end OC0CS24

// Move order headings to map
Function OC0CS25()
   /* Initialize map headings and build order heading*/
   /* lines on the map.*/
   /* For orders currently found on OP or Airspeed, order*/
   /* information comes from the global (OCWREC) record.*/
   /* For non-current orders, use fields saved from the first*/
   /* sent letter, if there is a sent letter. Otherwise*/
   /* only formatted order number is displayed.*/
   /* -----------------------------------------------------*/
  ;
  OC0CM001.OCMPRC = "OC0C"; /* process name*/
  OC0CM001.OCMDTE = VGVar.currentShortGregorianDate; /* current date*/
  OC0CM001.OC0CMMPG = OC0CW01.OC0CMMPG; /* max page nbr*/
  ;
   /* Order Headings*/
  ;
  OC0CM001.OCWCUOID = OCWREC.OCWCUOID; /* Order number*/
  ;
  if (OCWREC.OCWSYSID != "NO") /* If a current order, use global rec*/
    OC0CM001.OP1CUPO = OCWREC.OP1CUPO; /* Customer PO*/
    OC0CM001.OCWCUST = OCWREC.OCWCUST; /* Customer number*/
    OC0CM001.KUMSTRNM = OCWREC.KUMSTRNM; /* Store name*/
    ;
     /* GPC Abbrev lookup*/
    ;
    sysVar.arrayIndex = 1;
    if (OCWREC.XGPCD in XGPTBL.XGPCD
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      OC0CM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    else
      OC0CM001.XGPABRV = "UNKNWN";
    end
    ;
     /* Check for any letters*/
    ;
    if (OC0CW01.OC0CWSNF == "N" /* No sent letters found*/
     && OC0CW01.OC0CWUSF == "N" /* and no unsent letters found*/
     && OC0CW01.OC0CWDCF == "N") /* and no auto cnfm*/
      converseLib.validationFailed(091); /* 'No letters found for this order'*/
      set OC0CM001.OCWCUOID cursor;
    end
    ;
     /* Done with orders currently on OP or Airspeed*/
    return; /* Return to calling statement group*/
    ;
  end
   /* --------------------------------------------------*/
   /* Now processing only non-current orders;*/
   /* --------------------------------------------------*/
  if (OC0CW01.OC0CWSNF == "Y") /* If there's a sent letter for order*/
     /* Move fields saved from first sent letter*/
    OC0CM001.OP1CUPO = OC0CW01.OP1CUPO; /* Customer PO*/
    OC0CM001.OCWCUST = OC0CW01.OCWCUST; /* Customer number*/
     /* Need to get store name here*/
    KUMREC.KUCCOID = OC0CW01.OCWCOID; /* Company ID*/
    KUMREC.KUMSTRID = OC0CW01.OCWSTRID; /* Store ID*/
    OC0CS24();
    ;
     /* GPC Abbrev lookup*/
    ;
    sysVar.arrayIndex = 1;
    if (OC0CW01.XGPCD in XGPTBL.XGPCD
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      OC0CM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    else
      OC0CM001.XGPABRV = "UNKNWN";
    end
     /* Done with non-current order with sent letter*/
    return; /* Return to calling statement group*/
    ;
  end
   /* -------------------------------------------------------;*/
   /* Now processing only non-current orders without a sent ;*/
   /* letter                                                ;*/
   /* -------------------------------------------------------;*/
  if (OC0CW01.OC0CWUSF == "N" /* If no unsent letters found*/
   && OC0CW01.OC0CWDCF == "N") /* and no auto cnfm(s)*/
    converseLib.validationFailed(091); /* 'No letters for order'*/
    set OC0CM001.OCWCUOID cursor;
  else
    converseLib.validationFailed(096); /* 'Not a current order'*/
  end
  ;
end // end OC0CS25

// Load buyer array
Function OC0CS27()
   /* Load a WS array with buyers requesting either*/
   /* confirmation and/or discrepancy letters. Flags*/
   /* in the array indicate if the buyer wants discrepancy*/
   /* only or confirmation and discrepancy letters. Array*/
   /* holds up to 50 buyers. If there are more buyers, an*/
   /* overflow message is written in the last array line.*/
   /* Buyer name is reformatted to first name, space, last*/
   /* name to be displayed.*/
   /* ------------------------------------------------------*/
  ;
   /* Set up buyer selection criteria (customer/store/dept)*/
  ;
  OC0CS59(); /* Select buyers*/
  ;
  OC0CW01.OC0CWBCT = 0; /* Initialize selected buyer count*/
  if (OCEREC.OCERTNCD == 00)
    OC0CS60(); /* Fetch first selected buyer*/
  end
  OC0CW01.OC0CWBIX = 0; /* Initialize buyer subscript*/
  while (OCEREC.OCERTNCD == 00 /* For each selected buyer*/
   && OC0CW01.OC0CWBCT < 51) /* or until max buyers*/
    OC0CS29(); /* Load buyer array occurence*/
    OC0CS60(); /* Fetch next selected buyer*/
  end
  ;
  if (OCEREC.OCERTNCD == 09) /* Check for DB busy on buyer fetch*/
    OC0CW01.OC0CWERR = "Y"; /* Set error flag on*/
    converseLib.validationFailed(006); /* db busy try again*/
    return;
  end
  ;
  if (OC0CW01.OC0CWBCT >= 50 /* If max # buyers loaded*/
   && OCEREC.OCERTNCD != 03) /* and not at end of selected buyers*/
    OC0CW03.OC0CWBNM[51] = "MORE THAN 50 BUYERS FOR ACCOUNT";
    OC0CW03.OC0CWBNM[52] = "SEE BUYER SYSTEM FOR COMPLETE LIST";
    OC0CW01.OC0CWBCT = 52; /* Set buyer count to 22*/
  end
  ;
  OC0CW01.OCERTNCD = OCEREC.OCERTNCD; /* save oc5150 return code*/
  if (OCEREC.OCERTNCD == 00
   || OCEREC.OCERTNCD == 03) /* cursor is open*/
    OC0CS61(); /* Close buyer selection cursor*/
  end
  ;
  OC0CW01.OC0CWBYF = "Y"; /* Yes, buyer table now loaded*/
  ;
end // end OC0CS27

// Format unsent letter line
Function OC0CS28()
   /* Format unsent letter line. A line is created*/
   /* only if the letter is a type that the buyer*/
   /* has requested to receive.*/
   /* ---------------------------------------------*/
  ;
  if (OC0CW01.OC0CWLTP == " ") /* If normal letter line (not reprint)*/
    if (OC1REC.XLDCD == "CI" /* If confirmation*/
     || OC1REC.XLDCD == "CR") /* or request confirmation*/
      if (OC0CW03.OC0CWCFL[OC0CWBIX] != "Y") /* and buyer doesn't want*/
        return; /* return to calling stmt group*/
      end
    end
  end
  ;
  if (OC0CW01.OC0CWLTP == " ") /* If normal letter line (not reprint)*/
    if (OC1REC.XLDCD == "D " /* If discrepancy*/
     || OC1REC.XLDCD == "DR") /* or discrepancy reprint*/
      if (OC0CW03.OC0CWDFL[OC0CWBIX] == "N") /* and buyer doesn't want*/
        return; /* return to calling stmt group*/
      end
    end
  end
  ;
   /* Do a special check for discrepancy reprints since the*/
   /* relevant fields are in a working storage array and not*/
   /* in the OC1REC area.*/
  ;
  if (OC0CW01.OC0CWLTP == "R") /* If discrepancy reprint*/
    if (OC0CW03.OC0CWDFL[OC0CWBIX] == "N") /* and buyer doesn't want*/
      return; /* return to calling stmt group*/
    end
  end
  ;
   /* OK. A letter line is really going to be written*/
  ;
  OC0CW01.OC0CWLCT = OC0CW01.OC0CWLCT + 1; /* Add 1 to lines written cnt*/
  OC0CWLIX = OC0CWLIX + 1; /* Increment line subscript*/
  ;
  if (OC0CW01.OC0CWLN1 == "Y") /* If 1st line for letter*/
    OC0CW01.OC0CWLN1 = "N"; /* Set 1st line flag to no*/
    if (OC0CW01.OC0CWLTP == "R") /* If reprint*/
      OC0CS34(); /* Move letter fields from array*/
    else
      OC0CS19(); /* Move letter fields from record*/
    end
  end
  ;
   /* Move buyer name to line*/
  OC0CW02.OC0CWSTO[OC0CWLIX] = OC0CW03.OC0CWBNM[OC0CWBIX];
  ;
  if (OC0CWLIX == 12) /* If page is full*/
    OC0CS70(); /* Write page to temp storage*/
    OC0CW01.OC0CWLN1 = "Y"; /* Set 1st line flag to yes*/
  end
  ;
end // end OC0CS28

// Move buyer to array row
Function OC0CS29()
   /* Set distribution flags and reformat buyer name*/
   /* ----------------------------------------------------*/
  ;
  OC0CW01.OC0CWBCT = OC0CW01.OC0CWBCT + 1; /* Add 1 to total buyer count*/
  OC0CW01.OC0CWBIX = OC0CW01.OC0CWBIX + 1; /* Increment buyer subscript*/
  ;
  if (OCEREC.YMLCD == "03") /* Mail code is for confrm & dscrp*/
    OC0CW03.OC0CWDFL[OC0CWBIX] = "Y"; /* Set dscrp flag to yes*/
    OC0CW03.OC0CWCFL[OC0CWBIX] = "Y"; /* Set confrm flag to yes*/
  else
    if (OCEREC.YMLCD == "04") /* Dscrp only mail code*/
      OC0CW03.OC0CWDFL[OC0CWBIX] = "Y"; /* Set dscrp flag to yes*/
    end
  end
  ;
   /* format Buyer name*/
  set OCHREC empty; /* initialze ochrec*/
  OCHREC.XXXLSTNM = OCEREC.XXXLSTNM; /* last name*/
  OCHREC.XXXFSTNM = OCEREC.XXXFSTNM; /* first name*/
  OCHREC.XXXMDINT = OCEREC.XXXMDINT; /* middle initial*/
  OCHREC.XXXGNTNM = OCEREC.XXXGNTNM; /* generation name*/
  ;
  call "OC5200" (OCHREC) {isNoRefresh = yes, isExternal = yes}; /* format buyer name*/
  ;
   /* Move formatted name to buyer name array line*/
  OC0CW03.OC0CWBNM[OC0CWBIX] = OCHREC.OCH-RSLT-NM;
  ;
end // end OC0CS29

// Format no distrib line
Function OC0CS30()
   /* Format 'No Distribution' line.*/
   /* If there is no distribution for an unsent letter,*/
   /* the letter is displayed with 'No Distribution' in*/
   /* the 'send to' field.*/
   /* ---------------------------------------------*/
  ;
  OC0CW01.OC0CWLIX = OC0CW01.OC0CWLIX + 1; /* Increment line subscript*/
  ;
  if (OC0CW01.OC0CWLN1 == "Y") /* If 1st line for letter*/
    OC0CW01.OC0CWLN1 = "N"; /* Set 1st line flag to no*/
    if (OC0CW01.OC0CWLTP == "R") /* If reprint*/
      OC0CS34(); /* Move letter fields from array*/
    else
      OC0CS19(); /* Move letter fields from record*/
    end
  end
  ;
   /* Letter line with 'No Distribution' in 'Send To'*/
  if (OC0CW02.XLDCD[OC0CWLIX] == "CI" /* If confirmation-type letter*/
   || OC0CW02.XLDCD[OC0CWLIX] == "CR") /* and no distb was found*/
    if (OC0CW02.OC1SNTDT[OC0CWLIX] > 0) /* If a sent letter*/
      OC0CW02.OC0CWSTO[OC0CWLIX] = "DISTRIBUTION NOT AVAILABLE";
    else
      OC0CS-NO-BUYER-LN();
    end
  else
    OC0CS-NO-BUYER-LN();
  end
  ;
  if (OC0CWLIX == 12) /* If page is full*/
    OC0CS70(); /* Write page to temp storage*/
    OC0CWLIX = 0; /* Initialize line subscript*/
    OC0CW01.OC0CWLN1 = "Y"; /* Set 1st line flag to yes*/
  end
  ;
end // end OC0CS30

// Build sent reprint lines
Function OC0CS32()
   /* For sent reprints, addressee information is found on*/
   /* the Distribution Table (DORDC.VDISTB01).*/
   /* -----------------------------------------------------*/
  ;
   /* Move selection criteria for addressee lookup*/
  set OC2REC empty; /* Distribution record*/
  OC2REC.OC1LTRNB = OC0CW04.OC1LTRNB[OC0CWRIX]; /* Letter# key*/
  ;
  OC0CS53();
                                   /* Select all addressees for this letter*/
  ;
  OC0CS54(); /* Fetch first addressee*/
  ;
  OC0CW01.OC0CWLN1 = "Y"; /* Set 1st line flag to yes*/
  OC0CW01.OC0CWLTP = "R"; /* Set line type to reprint*/
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* If no distribution found*/
    OC0CS30(); /* Format 'No Distribution' line*/
  end
  ;
  while (SQLCA.VAGen_SQLCODE == 0) /* For each addressee found*/
    OC0CS15(); /* Format a sent letter line*/
    OC0CS54(); /* Fetch next addressee*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE == -911) /* Check for DB busy on distrib fetch*/
    OC0CW01.OC0CWERR = "Y"; /* Set err flag on*/
    converseLib.validationFailed(006); /* db busy try again*/
    return;
  end
  ;
  OC0CS55(); /* Close distribution selection cursor*/
  ;
end // end OC0CS32

// Build unsent reprint lines
Function OC0CS33()
   /* Build unsent reprint lines.*/
   /* 'Send to' field for unsent letters comes from the*/
   /* buyer system.*/
   /* ----------------------------------------------------*/
  ;
  if (OC0CW01.OC0CWBYF != "Y") /* If buyer name table not loaded*/
    OC0CS27(); /* Load the buyer name table*/
  end
  ;
  OC0CW01.OC0CWLTP = "R"; /* Set line type to reprint*/
  OC0CW01.OC0CWLN1 = "Y"; /* Set 1st line flag to yes*/
  OC0CW01.OC0CWBIX = 1; /* Set buyer subscript to 1*/
  OC0CW01.OC0CWLCT = 0; /* Initialize lines written cnt*/
  ;
  while (OC0CWBIX <= OC0CW01.OC0CWBCT) /* For each buyer found*/
    OC0CS28(); /* Format an unsent letter line*/
    OC0CWBIX = OC0CWBIX + 1; /* Increment buyer subscript*/
  end
  ;
  if (OC0CW01.OC0CWLCT == 0) /* If no lines were written*/
    OC0CS30(); /* Format 'No Distrib' line*/
  end
end // end OC0CS33

// Move letter fields for reprint
Function OC0CS34()
   /* Move fields from WS reprint array (OC0CW04)*/
   /* to current line in TS array, formatting for display*/
   /* if necessary.*/
   /* --------------------------------------------------------*/
  ;
      /* Letter type text*/
  OC0CW02.XLDCD[OC0CWLIX] = "DR";
      /* Letter type text*/
  OC0CW02.OC0CWTYP[OC0CWLIX] = "REPRINT";
      /* Date-to-send*/
  OC0CW02.OC1SNDDT[OC0CWLIX] = OC0CW04.OC1SNDDT[OC0CWRIX];
      /* Actual date sent*/
  OC0CW02.OC1SNTDT[OC0CWLIX] = OC0CW04.OC1SNTDT[OC0CWRIX];
      /* On Hold indicator*/
  if (OC0CW04.OC1LTRST[OC0CWRIX] == "NR"
   || OC0CW04.OC1LTRST[OC0CWRIX] == "OB")
    OC0CW02.OC0CWHLD[OC0CWLIX] = "Y";
  else
    OC0CW02.OC0CWHLD[OC0CWLIX] = " ";
  end
  ;
  if (OC0CW04.OC1SNTDT[OC0CWRIX] == 0) /* If unsent letter*/
    OC0CW02.OC0CWSEL[OC0CWLIX] = "Y"; /* Yes, select is enterable*/
  else
    OC0CW02.OC0CWSEL[OC0CWLIX] = "N"; /* Not enterable for sent ltrs*/
  end
      /* Letter number*/
  OC0CW02.OC1LTRNB[OC0CWLIX] = OC0CW04.OC1LTRNB[OC0CWRIX];
end // end OC0CS34

// Continue ENTER edit
Function OC0CS40()
   /* Check for request for new page.*/
   /* If not a new page request, edit the select*/
   /* options.*/
   /* -------------------------------------------------------*/
  ;
   /* -------------------------------------------------;*/
   /* Check for request for new page                  ;*/
   /* -------------------------------------------------;*/
  ;
  if (OC0CW01.OC0CMCPG != OC0CM001.OC0CMCPG) /* If page# changed*/
    OC0CW01.OC0CWLIX = 12; /* Set line subscript to 12*/
    while (OC0CWLIX > 0)
                                   /* Look at each line, starting at bottom*/
      if (OC0CM001.OC0CMSEL[OC0CWLIX] == " " /* If option is blank*/
       || OC0CM001.OC0CMSEL[OC0CWLIX] == "V") /* or 'viewed'*/
         /* OK - next sentence*/
      else
        converseLib.validationFailed(004); /* Cannot scroll and select options*/
        OC0CW01.OC0CWERR = "Y";
        set OC0CM001.OC0CMSEL[OC0CWLIX] bold;
      end
      OC0CWLIX = OC0CWLIX - 1; /* Decrement line subscript*/
    end
    if (converseVar.validationMsgNum == 004) /* If scrolling error found*/
      set OC0CM001.OC0CMCPG cursor, bold;
      return;
    end
  end
  ;
  if (OC0CW01.OC0CMCPG != OC0CM001.OC0CMCPG) /* If page# changed*/
    if (OC0CM001.OC0CMCPG > OC0CW01.OC0CMMPG) /* If page GT max page*/
      converseLib.validationFailed(003); /* Page GT max page*/
      OC0CW01.OC0CWERR = "Y"; /* Turn on error flag*/
      set OC0CM001.OC0CMCPG cursor, bold;
      return; /* Skip other edits*/
    end
    if (OC0CM001.OC0CMCPG < 1) /* Page LT 1*/
      converseLib.validationFailed(013); /* Page number LT 1*/
      OC0CW01.OC0CWERR = "Y"; /* Turn on error flag*/
      set OC0CM001.OC0CMCPG cursor, bold;
      return; /* Skip other edits*/
    end
    OC0CW01.OC0CMCPG = OC0CM001.OC0CMCPG; /* Move new page number*/
    OC0CW01.OC0CWNPG = "Y"; /* Turn on new page flag*/
    return; /* Skip other edits*/
  end
  ;
   /* -------------------------------------------------;*/
   /* Edit select options - bottom up                 ;*/
   /* -------------------------------------------------;*/
  OC0CW01.OC0CWREQ = " "; /* Initialize type request flag*/
  OC0CW01.OC0CWDSF = " "; /* Initialize dscrp ltr found flag*/
  OC0CW01.OC0CWLIX = 12; /* Set line subscript to last line*/
  ;
  while (OC0CW01.OC0CWLIX > 0)
                                   /* Check all 12 lines, bottom to top*/
    if (COMMAREA.CACHGFL == "Y") /* If user has update authority*/
      if (OC0CM001.OC0CMSEL[OC0CWLIX] == " " /* Valid select option values*/
       || OC0CM001.OC0CMSEL[OC0CWLIX] == "A" 
       || OC0CM001.OC0CMSEL[OC0CWLIX] == "D" 
       || OC0CM001.OC0CMSEL[OC0CWLIX] == "S" 
       || OC0CM001.OC0CMSEL[OC0CWLIX] == "R" 
       || OC0CM001.OC0CMSEL[OC0CWLIX] == "V")
        OC0CS44(); /* More edits for valid option types*/
      else
        OC0CW01.OC0CWERR = "Y"; /* Invalid select option*/
        converseLib.validationFailed(001); /* Option not valid*/
        set OC0CM001.OC0CMSEL[OC0CWLIX] cursor, bold;
      end
    else /* User is inquiry-only*/
      if (OC0CM001.OC0CMSEL[OC0CWLIX] == " "
       || OC0CM001.OC0CMSEL[OC0CWLIX] == "A"
       || OC0CM001.OC0CMSEL[OC0CWLIX] == "S"
       || OC0CM001.OC0CMSEL[OC0CWLIX] == "V")
        OC0CS44(); /* More edits for valid option types*/
      else
        OC0CW01.OC0CWERR = "Y"; /* Invalid select option*/
        converseLib.validationFailed(001); /* Option not valid*/
        set OC0CM001.OC0CMSEL[OC0CWLIX] cursor, bold;
      end
    end
    OC0CW01.OC0CWLIX = OC0CW01.OC0CWLIX - 1; /* Decrement line subscript*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* There must be at least one discrepancy letter displayed*/
   /* on the current page for the 'select all to view' option*/
   /* to be valid.*/
   /* ------------------------------------------------------------*/
  if (OC0CW01.OC0CWREQ == "A") /* If option is select all to view*/
    if (OC0CW01.OC0CWDSF == " ") /* If no discrepancy letters displayed*/
      converseLib.validationFailed(053); /* No discrepancy letters to view*/
      OC0CW01.OC0CWERR = "Y"; /* on this page*/
      set OC0CM001.OC0CMSEL[1] cursor, bold;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If more than one option was selected, highlight all*/
   /* select bytes*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum == 054)
    OC0CW01.OC0CWLIX = 12; /* Set line subscript to 1st line*/
    while (OC0CW01.OC0CWLIX > 0)
      if (OC0CM001.OC0CMSEL[OC0CWLIX] != " ")
        set OC0CM001.OC0CMSEL[OC0CWLIX] cursor, bold;
      end
      OC0CW01.OC0CWLIX = OC0CW01.OC0CWLIX - 1;
    end
  end
  ;
end // end OC0CS40

// Continue scroll edit
Function OC0CS41()
   /* Cannot change page and scroll at the same time.*/
   /* Cannot enter any select options and scroll at*/
   /* the same time. Cannot scroll out of page range.*/
   /* ----------------------------------------------------*/
  ;
  if (OC0CM001.OC0CMCPG != OC0CW01.OC0CMCPG) /* Page# changed*/
    converseLib.validationFailed(012); /* Cannot scroll and change page#*/
    OC0CW01.OC0CWERR = "Y";
    set OC0CM001.OC0CMCPG cursor, bold;
  end
  ;
  OC0CW01.OC0CWLIX = 12; /* Set line subscript to 12*/
  while (OC0CWLIX > 0)
                                   /* Look at each line, starting at bottom*/
    if (OC0CM001.OC0CMSEL[OC0CWLIX] == " " /* If option is blank*/
     || OC0CM001.OC0CMSEL[OC0CWLIX] == "V") /* or 'viewed'*/
       /* OK - next sentence*/
    else
      converseLib.validationFailed(004); /* Cannot scroll and select options*/
      OC0CW01.OC0CWERR = "Y";
      set OC0CM001.OC0CMSEL[OC0CWLIX] cursor, bold;
    end
    OC0CWLIX = OC0CWLIX - 1; /* Decrement line subscript*/
  end
  ;
  if (converseVar.eventKey is pf7 /* If request to scroll back*/
   && OC0CW01.OC0CWERR != "Y")    /* and no errors so far*/
    OC0CW01.OC0CMCPG = OC0CW01.OC0CMCPG - 1; /* Subtract 1 from page*/
    if (OC0CW01.OC0CMCPG < 1)
      OC0CW01.OC0CMCPG = 1; /* Set page to 1*/
      converseLib.validationFailed(009); /* 1st page - cannot scroll back*/
      OC0CW01.OC0CWERR = "Y";
    end
  else
    if (converseVar.eventKey is pf8 /* Request to scroll forward*/
     && OC0CW01.OC0CWERR != "Y")    /* and no errors so far*/
      OC0CW01.OC0CMCPG = OC0CW01.OC0CMCPG + 1; /* Add 1 to page*/
      if (OC0CW01.OC0CMCPG > OC0CW01.OC0CMMPG) /* If past page max*/
        OC0CW01.OC0CMCPG = OC0CW01.OC0CMMPG; /* Set page to max*/
        converseLib.validationFailed(010); /* Last page - cannot scroll forward*/
        OC0CW01.OC0CWERR = "Y";
      end
    end
  end
  ;
end // end OC0CS41

// Continue spec confrmtn edit
Function OC0CS42()
   /* Cannot change page and process special confirmation*/
   /* at the same time.*/
   /* Cannot enter any select options and process special*/
   /* confirmation request at the same time.*/
   /* Cannot request a special confirmation unless the*/
   /* initial mailing date for the order has past.*/
   /* ----------------------------------------------------*/
  ;
  if (OC0CM001.OC0CMCPG != OC0CW01.OC0CMCPG) /* Page# changed*/
    converseLib.validationFailed(058); /* Cannot req conf and chge page#*/
    OC0CW01.OC0CWERR = "Y";
    set OC0CM001.OC0CMCPG cursor, bold;
  end
  ;
  OC0CW01.OC0CWLIX = 12; /* Set line subscript to 12*/
  while (OC0CWLIX > 0)
                                   /* Look at each line, starting at bottom*/
    if (OC0CM001.OC0CMSEL[OC0CWLIX] == " " /* If option is blank*/
     || OC0CM001.OC0CMSEL[OC0CWLIX] == "V") /* or 'viewed'*/
       /* OK - next sentence*/
    else
      converseLib.validationFailed(059); /* Cannot req confrm and select options*/
      OC0CW01.OC0CWERR = "Y";
      set OC0CM001.OC0CMSEL[OC0CWLIX] cursor, bold;
    end
    OC0CWLIX = OC0CWLIX - 1; /* Decrement line subscript*/
  end
  ;
  if (OCWREC.OCWSYSID == "NO") /* If order not on OP or Airspeed*/
    converseLib.validationFailed(060); /* Cannot req confrm if order not*/
                                   /* current*/
    OC0CW01.OC0CWERR = "Y";
    set OC0CM001.OCWCUOID cursor, bold;
    return; /* Done - return to calling routine*/
  end
  ;
   /* Only current orders are left*/
  if (OCWREC.OCWINIFL == " ") /* If initial mailing flag not set up*/
                                   /* yet*/
    OC0CS20(); /* Set up the initial mailing flag*/
  end
  ;
  if (OCWREC.OCWINIFL == "Y" /* If before the initial mailing date*/
   && OC0CW01.OC0CWSNF != "Y") /* and there are no sent letters*/
    converseLib.validationFailed(061); /* Cannot req confrm before initial*/
    OC0CW01.OC0CWERR = "Y"; /* mailing date*/
  end
  ;
end // end OC0CS42

// Continue refresh edit
Function OC0CS43()
   /* Cannot change page and refresh at the same time.*/
   /* ----------------------------------------------------*/
  ;
  if (OC0CM001.OC0CMCPG != OC0CW01.OC0CMCPG) /* Page# changed*/
    converseLib.validationFailed(062); /* Cannot refresh and chge page#*/
    OC0CW01.OC0CWERR = "Y";
    set OC0CM001.OC0CMCPG cursor, bold;
  end
  ;
end // end OC0CS43

// More edits for valid options
Function OC0CS44()
   /* Only 1 type of option (select all, select, delete,*/
   /* or reprint request) may be selected at a time.*/
   /* Additional edits are required for reprint requests,*/
   /* select to view requests, and delete requests.*/
  ;
   /* Note: Fields from the record (OC0CW02) from which the*/
   /* map line was built are referenced, as well as map line*/
   /* fields.*/
   /* ------------------------------------------------------------*/
  ;
   /* -----------------------------------------------------*/
   /* To select all displayed letters to view, at least one*/
   /* displayed letter must be a discrepancy letter. Set*/
   /* flag here to check later.*/
   /* -----------------------------------------------------*/
  if (OC0CM001.OC0CWTYP[OC0CWLIX] == "DSCRP") /* If discrepancy letter*/
    OC0CW01.OC0CWDSF = "Y"; /* Turn on dscrp letter*/
  end /* found flag*/
  ;
  ;
  if (OC0CM001.OC0CMSEL[OC0CWLIX] == " " /* Select option blank*/
   || OC0CM001.OC0CMSEL[OC0CWLIX] == "V") /* Previously viewed*/
    return; /* Skip further edits, return to calling stmt*/
  end
  ;
  if (OC0CW01.OC0CWREQ == " ") /* 1st time thru, initialize type*/
                                   /* request*/
    OC0CW01.OC0CWREQ = OC0CM001.OC0CMSEL[OC0CWLIX];
  end
  ;
   /* ----------------------------------------------------*/
   /* Check for mulitple type option selection          ;*/
   /* ----------------------------------------------------*/
  if (OC0CW01.OC0CWREQ != OC0CM001.OC0CMSEL[OC0CWLIX])
    if (OC0CW01.OC0CWREQ == "S" /* A & S combination is valid*/
     || OC0CW01.OC0CWREQ == "A")
      if (OC0CM001.OC0CMSEL[OC0CWLIX] == "S"
       || OC0CM001.OC0CMSEL[OC0CWLIX] == "A")
        OC0CW01.OC0CWREQ = "A";
      else
        converseLib.validationFailed(054); /* Only one type option valid*/
        OC0CW01.OC0CWERR = "Y"; /* Turn on error flag*/
        set OC0CM001.OC0CMSEL[OC0CWLIX] cursor, bold;
        OC0CW01.OC0CWREQ = OC0CM001.OC0CMSEL[OC0CWLIX];
      end
    else
      converseLib.validationFailed(054); /* Only one type option valid*/
      OC0CW01.OC0CWERR = "Y"; /* Turn on error flag*/
      set OC0CM001.OC0CMSEL[OC0CWLIX] cursor, bold;
      OC0CW01.OC0CWREQ = OC0CM001.OC0CMSEL[OC0CWLIX];
    end
  else
    OC0CW01.OC0CWREQ = OC0CM001.OC0CMSEL[OC0CWLIX];
  end
  ;
   /* -----------------------------------------------------*/
   /* For reprint request, letter on line must be sent   ;*/
   /* discrepancy letter.                                ;*/
   /* -----------------------------------------------------*/
  if (OC0CM001.OC0CMSEL[OC0CWLIX] == "R") /* Request to reprint*/
    if (OC0CW02.XLDCD[OC0CWLIX] != "D " /* Not discrepancy*/
     || OC0CW02.OC1SNTDT[OC0CWLIX] == 0) /* or not sent*/
      converseLib.validationFailed(055); /* Can only reprint sent dscrp letters*/
      OC0CW01.OC0CWERR = "Y";
      set OC0CM001.OC0CMSEL[OC0CWLIX] cursor, bold;
    end
  end
  ;
   /* -----------------------------------------------------*/
   /* For select to view request, letter on line must be*/
   /* a discrepancy letter.*/
   /* -----------------------------------------------------*/
  if (OC0CM001.OC0CMSEL[OC0CWLIX] == "S") /* Request to view*/
    if (OC0CW02.XLDCD[OC0CWLIX] != "D ") /* Not discrepancy*/
      converseLib.validationFailed(056); /* Can only view dscrp letters*/
      OC0CW01.OC0CWERR = "Y";
      set OC0CM001.OC0CMSEL[OC0CWLIX] cursor, bold;
    end
  end
  ;
   /* -----------------------------------------------------*/
   /* For delete request, letter on line must be discrepancy*/
   /* reprint or special request confirmation. Cannot*/
   /* delete a sent letter.*/
   /* -----------------------------------------------------*/
  if (OC0CM001.OC0CMSEL[OC0CWLIX] == "D") /* Request to delete*/
    if (OC0CW02.XLDCD[OC0CWLIX] == "DR" /* If dscrp reprint*/
     || OC0CW02.XLDCD[OC0CWLIX] == "CR") /* or req confirmtn*/
      if (OC0CW02.OC1SNTDT[OC0CWLIX] == 0) /* and an unsent letter*/
         /* OK - next sentence*/
      else
        converseLib.validationFailed(057); /* Can't delete sent letter*/
        OC0CW01.OC0CWERR = "Y";
        set OC0CM001.OC0CMSEL[OC0CWLIX] cursor, bold;
      end
    else
      converseLib.validationFailed(057); /* Can only delete unsent reprints*/
      OC0CW01.OC0CWERR = "Y"; /* and request confirmations*/
      set OC0CM001.OC0CMSEL[OC0CWLIX] cursor, bold;
    end
  end
  ;
end // end OC0CS44

// Format Rep Only line
Function OC0CS45()
   /* Format 'Rep Only' line.*/
   /* If there is no distribution for a sent letter,*/
   /* the letter is displayed with 'Rep Only' in*/
   /* the 'send to' field.*/
   /* ---------------------------------------------*/
  ;
  OC0CWLIX = OC0CWLIX + 1; /* Increment line subscript*/
  ;
  if (OC0CW01.OC0CWLN1 == "Y") /* If 1st line for letter*/
    OC0CW01.OC0CWLN1 = "N"; /* Set 1st line flag to no*/
    if (OC0CW01.OC0CWLTP == "R") /* If reprint*/
      OC0CS34(); /* Move letter fields from array*/
    else
      OC0CS19(); /* Move letter fields from record*/
    end
  end
  ;
   /* Letter line with 'Rep Only' in 'Send To'*/
  OC0CW02.OC0CWSTO[OC0CWLIX] = "REP ONLY";
  ;
  if (OC0CWLIX == 12) /* If page is full*/
    OC0CS70(); /* Write page to temp storage*/
    OC0CWLIX = 0; /* Initialize line subscript*/
    OC0CW01.OC0CWLN1 = "Y"; /* Set 1st line flag to yes*/
  end
  ;
end // end OC0CS45

// IO5850 - Select letters
Function OC0CS50()
   /* Declare and open selection cursor for sent or*/
   /* unsent letter headers. Selected items are ordered*/
   /* by actual date sent, date-to-send. See the calling*/
   /* statement group for selection criteria.*/
   /* -------------------------------------------------------*/
  ;
  call "IO5850" ("S1", SQLCA, OC1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "OC0CS50"; /* stmt group*/
    TA1REC.TA1LOCAT[2] = "IO5850"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "S1"; /* function*/
    OC0CW01.OC0CWPKY = OCWREC.OP1PARTN; /* Error part char*/
    OC0CW01.OC0CWOKY = OCWREC.OCWCUOID; /* Error order number key*/
    OC0CW01.OC0CWLKY = 0; /* Error letter number key*/
    OC0CW01.OC0CWDKY = OC1REC.OC1SNTDT; /* Error sent date key*/
    TA1REC.TA1TBLKE = OC0CW01.OC0CWEKY; /* Formatted error key*/
    TA1REC.TA1DBASE = "DORDC"; /* database name*/
    TA1REC.TA1TBLVU = "VLETTR01"; /* database view name*/
    if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
      XS0ASDP();
      converseLib.validationFailed(006); /* DB busy*/
      OC0CW01.OC0CWERR = "Y"; /* Turn on error flag*/
    else /* all other codes - abort*/
      COMMAREA.CAMSG = "DATA PROBLEM - TRY AGAIN LATER";
      OC0CS72(); /* Purge TS*/
      XS0ASDC();
    end
    return;
  end
  ;
end // end OC0CS50

// IO5850 - Fetch letter
Function OC0CS51()
   /* Fetch letter header*/
   /* ---------------------------------------*/
  ;
  call "IO5850" ("N1", SQLCA, OC1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* No more letters*/
      return;
    else
      TA1REC.TA1LOCAT[1] = "OC0CS51"; /* stmt group*/
      TA1REC.TA1LOCAT[2] = "IO5850"; /* i/o mod*/
      TA1REC.TA1LOCAT[3] = "N1"; /* function*/
      OC0CW01.OC0CWPKY = OCWREC.OP1PARTN; /* Error part char*/
      OC0CW01.OC0CWOKY = OCWREC.OCWCUOID; /* Error order number key*/
      OC0CW01.OC0CWLKY = OC1REC.OC1LTRNB; /* Error letter number key*/
      OC0CW01.OC0CWDKY = OC1REC.OC1SNTDT; /* Error sent date key*/
      TA1REC.TA1TBLKE = OC0CW01.OC0CWEKY; /* Formatted error key*/
      TA1REC.TA1DBASE = "DORDC"; /* database name*/
      TA1REC.TA1TBLVU = "VLETTR01"; /* database view name*/
      if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
        XS0ASDP();
        converseLib.validationFailed(006); /* DB busy*/
        OC0CW01.OC0CWERR = "Y"; /* Turn on error flag*/
      else /* all other codes - abort*/
        COMMAREA.CAMSG = "DATA PROBLEM - TRY AGAIN LATER";
        OC0CS72(); /* Purge TS*/
        XS0ASDC(); /* Post and exit*/
      end
      return;
    end
  end
  ;
end // end OC0CS51

// IO5850 - Close letter cursor
Function OC0CS52()
   /* Close letter header cursor*/
   /* ---------------------------------------*/
  ;
  call "IO5850" ("C1", SQLCA, OC1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "OC0CS52"; /* stmt group*/
    TA1REC.TA1LOCAT[2] = "IO5850"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "C1"; /* transaction*/
    TA1REC.TA1LOCAT[4] = OCWREC.OP1PARTN; /* part char*/
    TA1REC.TA1TBLKE = OCWREC.OCWCUOID; /* order nbr*/
    TA1REC.TA1DBASE = "DORDC"; /* database name*/
    TA1REC.TA1TBLVU = "VLETTR01"; /* database view name*/
    if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
      XS0ASDP(); /* Post and come back*/
      converseLib.validationFailed(006); /* DB busy*/
      OC0CW01.OC0CWERR = "Y"; /* Turn on error flag*/
    else
      COMMAREA.CAMSG = "BAD DB RETURN ON CLOSE LETTER";
      XS0ASDC(); /* Post and exit*/
    end
  end
  ;
end // end OC0CS52

// IO5860 - Select distribution
Function OC0CS53()
   /* Select all addressees for a letter*/
   /* from the Distribution Table (DORDC.VDISTB01)*/
   /* --------------------------------------------------*/
  ;
  OC2REC.OP1CUOID = OCWREC.OCWCUOID; /* Customer order id*/
  OC2REC.OP1PARTN = OCWREC.OP1PARTN; /* Part char*/
  ;
  call "IO5860" ("S1", SQLCA, OC2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "OC0CS53"; /* stmt group*/
    TA1REC.TA1LOCAT[2] = "IO5860"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "S1"; /* function*/
    OC0CW01.OC0CWPKY = OCWREC.OP1PARTN; /* Error part char*/
    OC0CW01.OC0CWOKY = OCWREC.OCWCUOID; /* Error order nbr key*/
    OC0CW01.OC0CWLKY = OC2REC.OC1LTRNB; /* Error letter nbr key*/
    TA1REC.TA1TBLKE = OC0CW01.OC0CWEKY; /* Formatted error key*/
    TA1REC.TA1DBASE = "DORDC"; /* database name*/
    TA1REC.TA1TBLVU = "VDISTB01"; /* database view name*/
    if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
      XS0ASDP(); /* Post and return*/
      converseLib.validationFailed(006); /* DB busy*/
      OC0CW01.OC0CWERR = "Y"; /* Turn on error flag*/
    else
      COMMAREA.CAMSG = "DATA PROBLEM - TRY AGAIN LATER      ";
      OC0CS72(); /* Purge TS*/
      XS0ASDC(); /* Post and exit*/
    end
    return;
  end
  ;
end // end OC0CS53

// IO5860 - Fetch distribution
Function OC0CS54()
   /* Fetch distribution row for sent letter from*/
   /* DORDC.VDISTB01*/
   /* -------------------------------------------------*/
  ;
  call "IO5860" ("N1", SQLCA, OC2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* No more distrib rows*/
      return;
    else
      TA1REC.TA1LOCAT[1] = "OC0CS54"; /* stmt group*/
      TA1REC.TA1LOCAT[2] = "IO5860"; /* i/o mod*/
      TA1REC.TA1LOCAT[3] = "N1"; /* function*/
      OC0CW01.OC0CWOKY = OCWREC.OCWCUOID; /* Error order number key*/
      OC0CW01.OC0CWPKY = OCWREC.OP1PARTN; /* Error part char key*/
      OC0CW01.OC0CWLKY = OC1REC.OC1LTRNB; /* Error letter key*/
      TA1REC.TA1TBLKE = OC0CW01.OC0CWEKY; /* Formatted error key*/
      TA1REC.TA1DBASE = "DORDC"; /* database name*/
      TA1REC.TA1TBLVU = "VDISTB01"; /* database view name*/
      if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
        XS0ASDP(); /* Post and come back*/
        converseLib.validationFailed(006); /* DB busy*/
        OC0CW01.OC0CWERR = "Y"; /* Turn on error flag*/
      else
        COMMAREA.CAMSG = "DATA PROBLEM - TRY AGAIN LATER     ";
        OC0CS72(); /* Purge TS*/
        XS0ASDC(); /* Post and exit*/
      end
      return;
    end
  end
  ;
end // end OC0CS54

// IO5860 - Close distrib cursor
Function OC0CS55()
   /* Close distribution table selection cursor*/
   /* --------------------------------------------*/
  ;
  call "IO5860" ("C1", SQLCA, OC2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "OC0CS55"; /* stmt group*/
    TA1REC.TA1LOCAT[2] = "IO5860"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "C1"; /* function*/
    OC0CW01.OC0CWPKY = OCWREC.OP1PARTN; /* error part char*/
    OC0CW01.OC0CWOKY = OCWREC.OCWCUOID; /* error order number*/
    OC0CW01.OC0CWLKY = OC1REC.OC1LTRNB; /* error letter number*/
    TA1REC.TA1TBLKE = OC0CW01.OC0CWEKY; /* formatted error key*/
    TA1REC.TA1DBASE = "DORDC"; /* database name*/
    TA1REC.TA1TBLVU = "VDISTB01"; /* database view name*/
    if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
      XS0ASDP(); /* Post and come back*/
      converseLib.validationFailed(006); /* DB busy*/
      OC0CW01.OC0CWERR = "Y"; /* Turn on error flag*/
    else
      COMMAREA.CAMSG = "DATA PROBLEM - TRY AGAIN LATER";
      OC0CS72(); /* Purge TS*/
      XS0ASDC(); /* Post and exit*/
    end
  end
  ;
end // end OC0CS55

// IO5850 - Select reprints
Function OC0CS56()
   /* Select all reprints for this order*/
   /* -----------------------------------------------------*/
  ;
  set OC1REC empty;
  OC1REC.OP1CUOID = OCWREC.OCWCUOID; /* op-cust-ord-id*/
  OC1REC.OP1PARTN = OCWREC.OP1PARTN; /* op-ord-part-char*/
  ;
   /* Call to select reprints only*/
  ;
  call "IO5850" ("S2", SQLCA, OC1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "OC0CS56"; /* stmt group*/
    TA1REC.TA1LOCAT[2] = "IO5850"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "S2"; /* function*/
    TA1REC.TA1TBLKE = OCWREC.OCWCUOID; /* order nbr*/
    TA1REC.TA1DBASE = "DORDC"; /* database name*/
    TA1REC.TA1TBLVU = "VLETTR01"; /* database view name*/
    if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
      XS0ASDP();
      converseLib.validationFailed(006); /* DB busy*/
      OC0CW01.OC0CWERR = "Y"; /* Turn on error flag*/
    else /* all other codes - abort*/
      COMMAREA.CAMSG = "DATA PROBLEM - TRY AGAIN LATER";
      OC0CS72(); /* Purge TS*/
      XS0ASDC();
    end
    return;
  end
  ;
end // end OC0CS56

// IO5850 - Fetch reprint
Function OC0CS57()
   /* Fetch reprint*/
   /* ------------------------------------------------*/
  ;
  call "IO5850" ("N2", SQLCA, OC1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* No more reprints*/
      return;
    else
      TA1REC.TA1LOCAT[1] = "OC0CS57"; /* stmt group*/
      TA1REC.TA1LOCAT[2] = "IO5850"; /* i/o mod*/
      TA1REC.TA1LOCAT[3] = "N2"; /* transaction*/
      TA1REC.TA1TBLKE = OCWREC.OCWCUOID; /* order nbr*/
      TA1REC.TA1DBASE = "DORDC"; /* database name*/
      TA1REC.TA1TBLVU = "VLETTR01"; /* database view name*/
      if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
        XS0ASDP(); /* Post and come back*/
        converseLib.validationFailed(006); /* DB busy*/
        OC0CW01.OC0CWERR = "Y"; /* Turn on error flag*/
      else
        COMMAREA.CAMSG = "BAD DB RETURN ON FETCH REPRINT";
        OC0CS72(); /* Purge TS*/
        XS0ASDC(); /* Post and exit*/
      end
      return;
    end
  end
  ;
end // end OC0CS57

// IO5850 - Close reprint cursor
Function OC0CS58()
   /* Close reprint selection cursor*/
   /* ---------------------------------------------------------*/
  ;
          /* close set*/
  call "IO5850" ("C2", SQLCA, OC1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "OC0CS58"; /* stmt group*/
    TA1REC.TA1LOCAT[2] = "IO5850"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "C2"; /* transaction*/
    TA1REC.TA1TBLKE = OCWREC.OCWCUOID; /* order nbr*/
    TA1REC.TA1DBASE = "DORDC"; /* database name*/
    TA1REC.TA1TBLVU = "VLETTR01"; /* database view name*/
    if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
      XS0ASDP(); /* Post and come back*/
      converseLib.validationFailed(006); /* DB busy*/
      OC0CW01.OC0CWERR = "Y"; /* Turn on error flag*/
    else
      COMMAREA.CAMSG = "DATA PROBLEM - TRY AGAIN LATER";
      OC0CS72(); /* Purge TS*/
      XS0ASDC(); /* Post and exit*/
    end
  end
  ;
end // end OC0CS58

// OC5150 - Select buyers
Function OC0CS59()
   /* Select buyers along with mail codes*/
   /* ---------------------------------------*/
  ;
  set KBXREC empty; /* Buyer Xref record*/
  set OCEREC empty; /* OC5150 Pass record*/
  set SQLCA empty;
   /* Selection parameters*/
  OCEREC.OCETASK = "S1"; /* Declare and open cursor*/
  KBXREC.KUCCOID = OCWREC.OCWCOID; /* Company id*/
  KBXREC.KUMSTRID = OCWREC.OCWSTRID; /* Store id*/
  KBXREC.XNXCD = OCWREC.OCWXNXCD; /* Dept code*/
  OCEREC.OP1PARTN = OCWREC.OP1PARTN;
  OCEREC.OP1CUOID = OCWREC.OP1CUOID;
  OCEREC.XGPCD = OCWREC.XGPCD;
  OCEREC.XDVCD = OCWREC.XDVCD;
  OCEREC.OCEDATE = XX0XWDAT; /* Current date*/
  ;
  call "OC5150" (OCEREC, SQLCA, KBXREC) {isNoRefresh = yes, isExternal = yes};
  ;
    /* if the return code is less than 08 - got buyer(s) or*/
                                  /* got a reason why there*/
                                  /* isn't one*/
    /* if the return code is 08 - we got a db2 error*/
    /* if the return code is 09 - we got a -911*/
   /* oc5150 has posted all error conditions*/
  ;
  if (OCEREC.OCERTNCD < 08)
    /* next sentence*/
  else
    if (OCEREC.OCERTNCD == 09)
      converseLib.validationFailed(006); /* DB busy*/
      OC0CW01.OC0CWERR = "Y"; /* Turn on error flag*/
    else
      if (OCEREC.OCERTNCD == 99)
        COMMAREA.CAMSG = "INVALID REQUEST CODE = 99";
        OC0CS72(); /* Purge TS*/
        XS0AS03(); /* xfer to oc menu*/
      else
        COMMAREA.CAMSG = "DATA PROBLEM - TRY AGAIN LATER";
        OC0CS72(); /* Purge TS*/
        XS0AS03();
      end
      OC0CM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* transfer failed*/
      OC0CW01.OC0CWERR = "Y"; /* set error flag*/
    end
  end
end // end OC0CS59

// OC5150 - Fetch buyer
Function OC0CS60()
   /* Fetch buyer*/
   /* ------------------------------------------*/
  ;
  OCEREC.OCETASK = "N1"; /* Fetch next*/
  ;
  call "OC5150" (OCEREC, SQLCA, KBXREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (OCEREC.OCERTNCD == 00)
    /* next sentence*/
  else
    if (OCEREC.OCERTNCD == 03) /* No more buyers*/
      return;
    else
      if (OCEREC.OCERTNCD == 09) /* timed out*/
        converseLib.validationFailed(006); /* DB busy*/
        OC0CW01.OC0CWERR = "Y"; /* Turn on error flag*/
      else
        if (OCEREC.OCERTNCD == 99)
          COMMAREA.CAMSG = "INVALID REQUEST CODE = 99";
          OC0CS72(); /* Purge TS*/
          XS0AS03(); /* exit program*/
        else
          COMMAREA.CAMSG = "DATA PROBLEM - TRY AGAIN LATER";
          OC0CS72(); /* Purge TS*/
          XS0AS03(); /* Post and exit*/
        end
        OC0CM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* transfer failed*/
        OC0CW01.OC0CWERR = "Y"; /* set error flag*/
      end
    end
  end
end // end OC0CS60

Function OC0CS61()
   /* Close buyer cursor*/
   /* -------------------------------------*/
  ;
  OCEREC.OCETASK = "C1";
  call "OC5150" (OCEREC, SQLCA, KBXREC) {isNoRefresh = yes, isExternal = yes};
  ;
    /* if the return code is less than 08 - got buyer(s)*/
                                  /* got a reason why there*/
                                  /* isn't one*/
    /* if the return code is 08 - we got a db2 error*/
    /* if the return code is 09 - we got a -911*/
   /* oc5150 has posted all error conditions*/
  if (OCEREC.OCERTNCD < 08)
   /* next sentence*/
  else
    if (OCEREC.OCERTNCD == 09)
      converseLib.validationFailed(006); /* DB busy*/
      OC0CW01.OC0CWERR = "Y"; /* Turn on error flag*/
    else
      if (OCEREC.OCERTNCD == 99)
        COMMAREA.CAMSG = "INVALID REQUEST CODE = 99";
        OC0CS72(); /* Purge TS*/
        XS0AS03(); /* xfer to oc menu*/
      else
        COMMAREA.CAMSG = "DATA PROBLEM - TRY AGAIN LATER";
        OC0CS72(); /* Purge TS*/
        XS0AS03(); /* xfer to oc menu*/
      end
      OC0CM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* transfer failed*/
      OC0CW01.OC0CWERR = "Y"; /* set error flag*/
    end
  end
end // end OC0CS61
// TA0050 - add temp storage page
Function OC0CS70()
   /* Write page of letter lines to temp storage*/
  ;
   /* remember to set oc0cw02 empty after writing ts*/
   /* -----------------------------------------------------------*/
  ;
  set TA5REC empty;
  TA5REC.TA5APPID = "OC0C"; /* appl identification*/
  TA5REC.TA5FNCCD = "A"; /* function code*/
  OC0CW02.OC0CWTSL = 712; /* length of record*/
  ;
  call "TA0050" (OC0CW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD == 0)
    OC0CW01.OC0CMMPG = TA5REC.TA5TSQIX; /* max page number*/
    set OC0CW02 empty; /* reinitialize page*/
    OC0CW01.OC0CWLIX = 0; /* reinitialize line subscript*/
    OC0CW01.OC0CWTSA = "Y"; /* turn on TS added flag*/
  else
    TA1REC.TA1LOCAT[1] = "ADD TS1";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = OC0CW02.OC0CWTSR[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    XS0ASNP(); /* post, no rollback, non db2*/
  end
end // end OC0CS70

// TA0050 - Read temp storage
Function OC0CS71()
   /* Read current temp storage page containing*/
   /* letter line array*/
   /* -------------------------------------------------*/
  ;
  set OC0CW02 empty;
  set TA5REC empty;
  ;
  TA5REC.TA5APPID = "OC0C"; /* appl identification*/
  TA5REC.TA5FNCCD = "R"; /* function code*/
  TA5REC.TA5TSQIX = OC0CW01.OC0CMCPG; /* current page*/
  OC0CW02.OC0CWTSL = 712; /* length of record*/
  ;
  call "TA0050" (OC0CW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "READ TS1";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = OC0CW02.OC0CWTSR[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    XS0ASNP(); /* post, no rollback, non db2 diags*/
    ;
    ;
  end
end // end OC0CS71

// TA0050 - Purge temp storage
Function OC0CS72()
   /* This statement group purges all temp storage*/
   /* for this application (OC0C).*/
   /* -------------------------------------------------------*/
  ;
  set TA5REC empty;
  TA5REC.TA5APPID = "OC0C"; /* appl identification*/
  TA5REC.TA5FNCCD = "P"; /* function code*/
  call "TA0050" (OC0CW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD == 0)
    OC0CW01.OC0CMCPG = 1; /* current page*/
    OC0CW01.OC0CWLIX = 1; /* row subscript*/
    OC0CW01.OC0CMMPG = 1; /* max number of pages*/
  else
    TA1REC.TA1LOCAT[1] = "PRGE TS1";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1TBLKE = OC0CW02.OC0CWTSR[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    XS0ASNP(); /* post,  no rollback, non db2*/
  end
end // end OC0CS72

// Call OC0F for order# change
Function OC0CS73()
   /* Call OC0F to load order fields in the global record*/
   /* (OCWREC). This statement group performed when a new*/
   /* order number is entered.*/
   /* -------------------------------------------------------*/
  ;
  if (OC0CM001.OCWCUOID == 0) /* If order number is blank*/
    converseLib.validationFailed(008); /* Order number required*/
    OC0CW01.OC0CWERR = "Y"; /* Turn on error flag*/
    set OC0CM001.OCWCUOID cursor, bold;
    OC0CS06(); /* Blank out screen*/
    return; /* Don't call order number routine*/
  end
  ;
  OCWREC.OCWCUOID = OC0CM001.OCWCUOID; /* Move order nbr*/
  OCWREC.OCWRTNCD = "00"; /* Init return code*/
  ;
  call "OC0F" (OCWREC) {isNoRefresh = yes}; /* Mapless appl to load ocwrec*/
  ;
  if (OCWREC.OCWRTNCD == "01" /* All is well*/
   || OCWREC.OCWRTNCD == "02")
    OC0CW01.OC0CWCHG = "Y"; /* Turn on order# changed flag*/
  else
    if (OCWREC.OCWRTNCD == "03") /* database is busy*/
      converseLib.validationFailed(006); /**/
      OC0CW01.OC0CWERR = "Y"; /* Turn on error flag*/
    end
    if (OCWREC.OCWRTNCD == "05") /* Batch edit is running*/
      COMMAREA.CAMSG = "AIRSPEED BATCH EDIT IS RUNNING, PLEASE TRY LATER"; /* Format the message field*/
      XS0AS03(); /* DXFR to OC0M*/
    else /* '04' = bad sqlcode*/
      converseLib.validationFailed(038); /* Data problem, please try later*/
      OC0CW01.OC0CWERR = "Y"; /* Turn on error flag*/
    end
  end
  ;
end // end OC0CS73

// Update for special confrm
Function OC0CS80()
   /* Create a letter header for a special request*/
   /* confirmation.*/
   /* -----------------------------------------------*/
  ;
  if (OCWREC.OC1SNDDT == 0) /* If date-to-send not found yet*/
    OC0CS20(); /* Get date-to-send*/
    if (OC0CW01.OC0CWERR == "Y") /* If date-to-send error*/
      return;
    end
  end
  ;
   /* Set up parameters for call to letter header insert module*/
  ;
  set OCBREC empty; /* Initialize pass record*/
  OCBREC.OP1PARTN = OCWREC.OP1PARTN; /* Part char*/
  OCBREC.OP1CUOID = OCWREC.OP1CUOID; /* Cust order id*/
  OCBREC.XLDCD = "CR"; /* Letter type code*/
  OCBREC.OP1ENTDT = OCWREC.OP1ENTDT; /* Order entered date*/
  OCBREC.XGPCD = OCWREC.XGPCD; /* GPC*/
  OCBREC.XOTCD = OCWREC.XOTCD; /* Order type code*/
  OCBREC.XXXUSRID = COMMAREA.CAUSERID; /* User ID*/
  OCBREC.ZZZCHGDT = OC0CW01.ZZZCHGDT;
  OCBREC.ZZZCHGTM = OC0CW01.ZZZCHGTM;
  OCBREC.OC1SNDDT = OCWREC.OC1SNDDT; /* Date-to-send*/
  OCBREC.OCWINIFL = OCWREC.OCWINIFL; /* initial mail flag*/
  OCBREC.XSOCD = OCWREC.XSOCD; /* sales office id*/
  ;
  call "OC5050" (OCBREC) {isNoRefresh = yes, isExternal = yes};
  ;
   /* -------------------------------------------------------*/
   /* Check Return Code:*/
  ;
   /* SQL error posting is done in the called module.*/
  ;
   /* For DB busy, flag as update error and return to*/
   /* converse loop.*/
  ;
   /* For confirmation already queued, just pass information*/
   /* back in to commarea message*/
  ;
   /* For all other return codes post, rollback and exit.*/
   /* -------------------------------------------------------*/
  ;
  if (OCBREC.OCBRTNCD == 0) /* Everything is ok*/
    COMMAREA.CAMSG = "SPECIAL REQUEST CONFIRMATION ADDED";
  else
    if (OCBREC.OCBRTNCD == 1)
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Rollback*/
      converseLib.validationFailed(006); /* DB busy*/
      OC0CW01.OC0CWERR = "Y"; /* Turn on error flag*/
    else
      if (OCBREC.OCBRTNCD == 4)
        COMMAREA.CAMSG = "CONFIRMATION LETTER ALREADY QUEUED";
      else
        TA1REC.TA1LOCAT[1] = "OC0CS80"; /* stmt group*/
        TA1REC.TA1LOCAT[2] = "OC5050"; /* subroutine called*/
        OC0CW01.OC0CWKY1 = " "; /* init error key*/
        OC0CW01.OC0CWRTN = OCBREC.OCBRTNCD; /* return code to key*/
        OC0CW01.OC0CWORD = OCWREC.OCWCUOID; /* cust order id to key*/
        TAEREC.TAEDESC2 = OC0CW01.OC0CWKY1; /* error key to desc*/
        TAEREC.TAEDESC1 = "BAD RETURN CODE FROM OC5050 - DATA PROBLEM";
        COMMAREA.CAMSG = "DATA PROBLEM - CONTACT THE HELP DESK";
        XS0ASNP();
        OC0CS99(); /* Rollback, exit*/
      end
    end
  end
  ;
end // end OC0CS80

// Update for select options
Function OC0CS81()
   /* Update according to type of option being processed*/
   /* ----------------------------------------------------*/
  ;
   /* ---------------------------------------------------------*/
   /* Process option 'S' - Select letters to view            ;*/
   /* Load letter number of each selected letter into        ;*/
   /* the global record letter array to pass to Discrepancy  ;*/
   /* Letter display (OC0B).                                 ;*/
   /* ---------------------------------------------------------*/
  if (OC0CW01.OC0CWREQ == "S") /* If selecting letters to view*/
    OC0CW01.OC0CWLIX = 1; /* Set line subscript to 1*/
    OC0CW01.OC0CWVIX = 1; /* Set view ltr array subscrpt to 1*/
    while (OC0CWLIX < 13) /* For each of 12 lines*/
      if (OC0CM001.OC0CMSEL[OC0CWLIX] == "S") /* If selected for view*/
        OCWREC.OC1LTRNB[OC0CWVIX] = OC0CW02.OC1LTRNB[OC0CWLIX];
        OCWREC.OCWSELCD[OC0CWVIX] = "S";
        OC0CW01.OC0CWVIX = OC0CW01.OC0CWVIX + 1; /* Increment ltr subscr*/
      end
      OC0CW01.OC0CWLIX = OC0CW01.OC0CWLIX + 1; /* Increment line subscr*/
    end
    return; /* Done with update processing - return*/
                                   /* to calling statement*/
  end
  ;
   /* ---------------------------------------------------------*/
   /* Process option 'A' - Select all displayed discrepancy  ;*/
   /* letters to view.                                       ;*/
   /* Load letter number of each discrepancy letter displayed;*/
   /* to the global record letter array to pass to Discrepan-;*/
   /* cy Letter display (OC0B).                              ;*/
   /* ---------------------------------------------------------*/
  if (OC0CW01.OC0CWREQ == "A") /* If selecting all letters to view*/
    OC0CW01.OC0CWLIX = 1; /* Set line subscript to 1*/
    OC0CW01.OC0CWVIX = 1; /* Set letter array subscript to 1*/
    while (OC0CWLIX < 13) /* For each of 12 lines*/
      if (OC0CW02.XLDCD[OC0CWLIX] == "D ") /* If dscrp letter*/
        OCWREC.OC1LTRNB[OC0CWVIX] = OC0CW02.OC1LTRNB[OC0CWLIX];
        OCWREC.OCWSELCD[OC0CWVIX] = "S";
        OC0CW01.OC0CWVIX = OC0CW01.OC0CWVIX + 1; /* Increment ltr subscr*/
      end
      OC0CW01.OC0CWLIX = OC0CW01.OC0CWLIX + 1; /* Increment line subscr*/
    end
    return; /* Done with update processing - return*/
                                   /* to calling statement*/
  end
  ;
   /* --------------------------------------------------------;*/
   /* Process option 'R' - Request to reprint discrepancy    ;*/
   /* letters.                                               ;*/
   /* ---------------------------------------------------------*/
  if (OC0CW01.OC0CWREQ == "R") /* If processing reprint requests*/
    OC0CW01.OC0CWLIX = 1; /* Set line subscript to 1*/
    while (OC0CWLIX < 13) /* For each of 12 lines*/
      if (OC0CM001.OC0CMSEL[OC0CWLIX] == "R")
        OC0CS83(); /* Create reprint letter hdr*/
        if (OC0CW01.OC0CWERR == "Y") /* error*/
          return; /* Exit this routine*/
        end
      end
      OC0CW01.OC0CWLIX = OC0CW01.OC0CWLIX + 1; /* Increment line subscr*/
    end
    return; /* Done with update processing - return*/
                                   /* to calling statement*/
  end
  ;
   /* --------------------------------------------------------;*/
   /* Process option 'D' - Delete reprints or special con-   ;*/
   /* firmation letter headers.                              ;*/
   /* ---------------------------------------------------------*/
  if (OC0CW01.OC0CWREQ == "D") /* If processing deletes*/
    OC0CW01.OC0CWLIX = 1; /* Set line subscript to 1*/
    while (OC0CWLIX < 13) /* For each of 13 lines*/
      if (OC0CM001.OC0CMSEL[OC0CWLIX] == "D")
        set OC1REC empty;
        OC1REC.OP1CUOID = OCWREC.OCWCUOID; /* Order number*/
        OC1REC.OP1PARTN = OCWREC.OP1PARTN; /* Part char*/
        OC1REC.OC1LTRNB = OC0CW02.OC1LTRNB[OC0CWLIX]; /* Letter# key*/
        OC0CS84(); /* Delete this letter header*/
        if (SQLCA.VAGen_SQLCODE != 0) /* If delete failed*/
          OC0CW01.OC0CWERR = "Y";
          return; /* Exit this routine*/
        end
      end
      OC0CW01.OC0CWLIX = OC0CW01.OC0CWLIX + 1; /* Increment line subscr*/
    end
    return; /* Done with update processing - return*/
                                   /* to calling statement*/
  end
  ;
end // end OC0CS81
// Update for refresh
Function OC0CS82()
   /* Blank out all the select options*/
   /* -------------------------------------------------*/
  ;
  OC0CW01.OC0CWLIX = 1; /* Set line subscript to 1*/
  ;
  while (OC0CWLIX < 13) /* For each of 12 lines*/
    OC0CM001.OC0CMSEL[OC0CWLIX] = " "; /* Blank out select option*/
    OC0CW01.OC0CWLIX = OC0CW01.OC0CWLIX + 1; /* INCREMENT SUBSCRIPT*/
  end
  ;
end // end OC0CS82

// Create reprint letter header
Function OC0CS83()
   /* Call letter header insert module to add a*/
   /* discrepancy reprint*/
   /* ----------------------------------------------*/
  ;
  if (OCWREC.OC1SNDDT == 0) /* If date-to-send not found yet*/
    OC0CS20(); /* Get date-to-send*/
    if (OC0CW01.OC0CWERR == "Y") /* If date-to-send error*/
      return;
    end
  end
  ;
   /* Set up parameters to add reprint letter header*/
  ;
  set OCBREC empty; /* Initialize pass record*/
  OCBREC.OP1PARTN = OCWREC.OP1PARTN; /* Part char*/
  OCBREC.OP1CUOID = OCWREC.OP1CUOID; /* Cust order id*/
  OCBREC.XLDCD = "DR"; /* Letter type code*/
  OCBREC.OP1ENTDT = OCWREC.OP1ENTDT; /* Order entered date*/
  OCBREC.XGPCD = OCWREC.XGPCD; /* GPC*/
  OCBREC.XOTCD = OCWREC.XOTCD; /* Order type code*/
  OCBREC.XXXUSRID = COMMAREA.CAUSERID; /* User ID*/
  OCBREC.ZZZCHGDT = OC0CW01.ZZZCHGDT;
  OCBREC.ZZZCHGTM = OC0CW01.ZZZCHGTM;
  OCBREC.OC1SNDDT = OCWREC.OC1SNDDT; /* Date-to-send*/
  OCBREC.OCWINIFL = OCWREC.OCWINIFL; /* initial mail flag*/
  OCBREC.XSOCD = OCWREC.XSOCD; /* sales office id*/
  ;
   /* The reprint letter number of the reprint is set*/
   /* to the letter number of the letter being reprinted*/
  ;
  OCBREC.OC1LPRTN = OC0CW02.OC1LTRNB[OC0CWLIX];
  ;
  call "OC5050" (OCBREC) {isNoRefresh = yes, isExternal = yes}; /* Letter header insert module*/
  ;
   /* Check return codes - posting for SQL errors*/
   /* was done in the called module*/
  ;
   /* If a reprint request was made for a letter that already*/
   /* has a unsent reprint queued, pass back that information,*/
   /* but don't flag as an error.*/
  ;
  if (OCBREC.OCBRTNCD == 0)
    COMMAREA.CAMSG = "REPRINT(S) ADDED";
  else
    if (OCBREC.OCBRTNCD == 1)
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Rollback*/
      converseLib.validationFailed(006); /* DB busy*/
      OC0CW01.OC0CWERR = "Y"; /* Turn on error flag*/
    else /**/
      if (OCBREC.OCBRTNCD == 4)
        COMMAREA.CAMSG = "REQUESTED LETTER REPRINT ALREADY QUEUED";
      else
        TA1REC.TA1LOCAT[1] = "OC0CS83"; /* stmt group*/
        TA1REC.TA1LOCAT[2] = "OC5100"; /* subroutine called*/
        OC0CW01.OC0CWKY1 = " "; /* init error key*/
        TAEREC.TAEDESC1 = "BAD RETURN CODE FROM OC5100 - DATA PROBLEM";
        OC0CW01.OC0CWRTN = OCBREC.OCBRTNCD; /* return code to key*/
        OC0CW01.OC0CWORD = OCWREC.OCWCUOID; /* cust ord id to key*/
        TAEREC.TAEDESC2 = OC0CW01.OC0CWKY1; /* error key to desc*/
        COMMAREA.CAMSG = "DATA PROBLEM - CONTACT HELP DESK";
        XS0ASNP(); /* appl post*/
        OC0CS99(); /* xfer to oc menu*/
      end
    end
  end
  ;
end // end OC0CS83

// Delete letter header
Function OC0CS84()
   /* Delete selected letter header*/
   /* ----------------------------------------------*/
  ;
  set SQLCA empty;
  ;
  call "IO5850" ("D ", SQLCA, OC1REC) {isNoRefresh = yes, isExternal = yes};
  ;
   /* Check return code*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    COMMAREA.CAMSG = "LETTER(S) DELETED";
  else
    TA1REC.TA1LOCAT[1] = "OC0CS84"; /* stmt group*/
    TA1REC.TA1LOCAT[2] = "IO5850"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "D "; /* transaction*/
    TA1REC.TA1LOCAT[4] = OCWREC.OP1PARTN; /* part char*/
    TA1REC.TA1TBLKE = OCWREC.OCWCUOID; /* order nbr*/
    TA1REC.TA1DBASE = "DORDC"; /* database name*/
    TA1REC.TA1TBLVU = "VLETTR01"; /* database view name*/
    if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
      XS0ASDL(); /* Post, rollback and come back*/
      converseLib.validationFailed(006); /* DB busy*/
      OC0CW01.OC0CWERR = "Y"; /* Turn on error flag*/
    else
      XS0ASDR(); /* Post, rollback, exit*/
    end
  end
  ;
end // end OC0CS84

// OC0C security
Function OC0CS98()
  ;
  ;
   /* **** retrieve o/c commarea and check security *****/
  ;
  ;
  ;
  OCWREC.OCWGROUP = COMMAREA.CAUSERA; /* get commarea*/
end // end OC0CS98

// Rollback, exit, no post
Function OC0CS99()
    /* Used to rollback and exit without posting, as after*/
    /* calls to sub-modules where posting was done in the*/
    /* sub-module.*/
   /* --------------------------------------------------------*/
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* rollback*/
  OC0CS72(); /* purge temp storage*/
  XS0AS03(); /* i/o menu*/
  exit program; /* menu failure*/
  ;
  ;
end // end OC0CS99

// Check for DB busy on build
Function OC0CSDB()
   /* If there was a DB busy condition (-911) on*/
   /* the initial map build, restart application*/
   /* from the top.*/
   /* ----------------------------------------------*/
  ;
  if (OC0CW01.OC0CWBSY == "Y") /* If DB busy during initial build*/
    OC0CS72(); /* Purge temp storage*/
    XS0AS00(); /* Reinvoke this appl*/
  end
  ;
end // end OC0CSDB

// Process PF Keys
Function OC0CSPF()
  ;
  if (OC0CM001.CATOAP != " ") /* Fast path application*/
    COMMAREA.CATOAP = OC0CM001.CATOAP;
    if (OC0CM001.OC0CMITM != " ") /* Fast path item*/
      COMMAREA.CAITEM = OC0CM001.OC0CMITM;
    end
  else
    COMMAREA.CATOAP = " ";
  end
  ;
  if (converseVar.eventKey is enter) /* Check for fast-path request*/
    if (COMMAREA.CATOAP != " ") /* If fast path application entered*/
      OC0CS72(); /* purge temp storage*/
      if (CATOSYS != "OC") /* If not going to another OC appl*/
        COMMAREA.CAUSERA = " "; /* reinit user commarea*/
      end
      XSEXIT();
      ;
      sysVar.transferName = "OC0M";
      transfer to transaction sysVar.transferName passing COMMAREA;
    end
  end
  ;
  COMMAREA.CAUSERA = OCWREC.OCWGROUP;
  ;
  if (converseVar.eventKey is pf3)
    OC0CS72(); /* purge temp storage*/
    XS0AS03(); /* go to o/c menu*/
  end
  ;
  if (converseVar.eventKey is pf4)
    OC0CS72(); /* purge temp storage*/
    XSPF4(); /* go to main menu*/
    OC0CM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* transfer failed*/
    return; /* converse map*/
  end
  ;
  if (converseVar.eventKey is pf5)
    if (COMMAREA.CACHGFL != "Y") /* If user is inquiry-only*/
      converseLib.validationFailed(002); /* Appl not avail for inquiry-only*/
      OC0CW01.OC0CWERR = "Y";
      return; /* Converse*/
    else
      OC0CS72(); /* purge temp storage*/
      XS0AS05(); /* transfer to dscrp add*/
      OC0CM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* transfer failed*/
      return; /* converse map*/
    end
  end
  ;
  if (converseVar.eventKey is pf9)
    if (COMMAREA.CACHGFL != "Y") /* If user is inquiry-only*/
      converseLib.validationFailed(002); /* Function not avail for inquiry-only*/
      OC0CW01.OC0CWERR = "Y";
      return; /* Converse*/
    else
      if (OCWREC.XOSCD == "XL") /* order status cancelled*/
        converseLib.validationFailed(060); /* order must be current for option*/
        OC0CW01.OC0CWERR = "Y";
        return; /* Converse*/
      end
    end
  end
  ;
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf7 /* scroll back*/
   || converseVar.eventKey is pf8 /* scroll forward*/
   || converseVar.eventKey is pf9 /* request special confirmation*/
   || converseVar.eventKey is pf19) /* refresh select options*/
     /* next sentence*/
  else
    converseLib.validationFailed(002); /* invalid pf key*/
    OC0CW01.OC0CWERR = "Y"; /* set error flag*/
  end
  ;
end // end OC0CSPF

//*** RECORD=OC0CW01 ****
// *
// *    General working storage for OC0C - Letter Summary.
// *    Contains subscripts, flags, counts, and work areas.
// *
// *                   MODIFICATIONS
// ------------------------------------------------------------
// 05/02/91     dlegg    initial creation
// 01/10/92     trober   deleted oc0cwtch, xxxlstnm, xxxfstnm
//                       oc0cwfrn, oc0cwton, oc0cwfch,
//                       oc0cwxxf, oc0cwnx1, oc0cwnx2, oc0cwnam
//                       and oc0cwxx2 because they were no
//                       longer used in oc0cs29.
// ***********************
Record OC0CW01 type basicRecord
  5 OC0CWGR1 OC0CWGR1 ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 OC0CWLIX OC0CWLIX ; 
    10 OC0CWBIX OC0CWBIX ; 
    10 OC0CWRIX OC0CWRIX ; 
    10 OC0CWVIX OC0CWVIX ; 
    10 OC0CWERR OC0CWERR ; 
    10 OC0CWBSY OC0CWBSY ; 
    10 OC0CWTSA OC0CWTSA ; 
    10 OC0CWNPG OC0CWNPG ; 
    10 OC0CWCHG OC0CWCHG ; 
    10 OC0CWREQ OC0CWREQ ; 
    10 OC0CWSNF OC0CWSNF ; 
    10 OC0CWUSF OC0CWUSF ; 
    10 OC0CWDCF OC0CWDCF ; 
    10 OC0CWDSF OC0CWDSF ; 
    10 OC0CWLTP OC0CWLTP ; 
    10 OC0CWLN1 OC0CWLN1 ; 
    10 OC0CWBYF OC0CWBYF ; 
    10 OC0CWRCT OC0CWRCT ; 
    10 OC0CWBCT OC0CWBCT ; 
    10 OC0CWLCT OC0CWLCT ; 
    10 OC0CMCPG OC0CMCPG ; 
    10 OC0CMMPG OC0CMMPG ; 
    10 OP1CUPO OP1CUPO ; 
    10 OC0CWEKY OC0CWEKY ; 
      15 OC0CWPKY OC0CWPKY ; 
      15 OC0CWOKY OC0CWOKY ; 
      15 OC0CWLKY OC0CWLKY ; 
      15 OC0CWDKY OC0CWDKY ; 
    10 XGPCD XGPCD ; 
    10 OCWCUST OCWCUST ; 
      15 OCWCOID OCWCOID ; 
      15 OCWFILL2 OCWFILL2 ; 
      15 OCWSTRID OCWSTRID ; 
      15 OCWFILL3 OCWFILL3 ; 
      15 OCWXNXCD OCWXNXCD ; 
    10 OC0CWDTE OC0CWDTE ; 
      15 OC0CW0CC OC0CW0CC ; 
      15 OC0CWYMD OC0CWYMD ; 
    10 OC0CWCLF OC0CWCLF ; 
    10 OC0CWELF OC0CWELF ; 
      15 OC0CWOID OC0CWOID ; 
      15 OC0CWPCH OC0CWPCH ; 
      15 OC0CWXLD OC0CWXLD ; 
    10 OC0CWKY1 OC0CWKY1 ; 
      15 OC0CWRTN OC0CWRTN ; 
      15 OC0CWORD OC0CWORD ; 
    10 OCERTNCD OCERTNCD ; 
end // end OC0CW01

//*** RECORD=OC0CW02 ****
// *     Temporary storage record used to hold letter lines
// *     for the Letter Summary screen (OC0C).
// *
// *     Csp record: OC0CW02
// *
// *      file name: OC0C
// *
// *      Data from: DORDC.VLETTR01
// *                 DORDC.VDISTB01
// *                 buyer
// *
// *       Built in: OC0C - OC0CS03
// *       Added in: OC0C - OC0CS70
// *        read in: OC0C - OC0CS71
// *      Purged in: OC0C - OC0CS72
// *
// *   Displayed in: OC0C
// *
// *      Subscript: OC0CW01.OC0CWLIX
// *
// *
// *
// ***********************
Record OC0CW02 type basicRecord
  5 OC0CWGP2 OC0CWGP2 ; 
    10 OC0CWTSL OC0CWTSL ; 
    10 OC0CWTSR OC0CWTSR [12] ; 
      15 OC0CWSEL OC0CWSEL ; 
      15 OC0CWTYP OC0CWTYP ; 
      15 OC1SNDDT OC1SNDDT ; 
      15 OC1SNTDT OC1SNTDT ; 
      15 OC0CWHLD OC0CWHLD ; 
      15 OC0CWSTO OC0CWSTO ; 
      15 OC1LTRNB OC1LTRNB ; 
      15 XLDCD XLDCD ; 
end // end OC0CW02

//*** RECORD=OC0CW03 ****
// *     Table contains formatted buyer names for display in
// *     'send to' field on Letter Summary screen (OC0C).
// *     Flags indicate if buyer has requested discrepancy
// *     letters and/or confirmation letters.
// *
// *     Csp record: OC0CW03
// *
// *      Data from: buyer
// *
// *      Subscript: OC0CW01.OC0CWBIX
// *
// *
// *-----------------------------------------------------------
// ***********************
Record OC0CW03 type basicRecord
  5 OC0CWGP3 OC0CWGP3 ; 
    10 OC0CWBRW OC0CWBRW [52] ; 
      15 OC0CWBNM OC0CWBNM ; 
      15 OC0CWDFL OC0CWDFL ; 
      15 OC0CWCFL OC0CWCFL ; 
end // end OC0CW03

//*** RECORD=OC0CW04 ****
// ************ Saved Reprint Letter Fields Table *************
// *
// * DATE CREATED:     05/02/91
// *
// * DESCRIPTION;      This table contains saved fields for
// *                   letter reprints for an order number. In
// *                   the Letter Summary application (OC0C),
// *                   it is loaded with all reprints (up to
// *                   50) found for an order so that reprints
// *                   can be displayed directly after the
// *                   letter being reprinted.
// *
// * SUBSCRIPT:        OC0CW01.OC0CWRIX
// *
// *
// * MAINTENANCE LOG:
// *
// *    DATE       INIT       COMMENT
// * ----------   ------      ---------------------------------
// *  05/02/91    DLEGG       INITIAL RECORD CREATION
// ************************************************************
// ***********************
Record OC0CW04 type basicRecord
  5 OC0CWGP4 OC0CWGP4 ; 
    10 OC0CWRPT OC0CWRPT [50] ; 
      15 OC1LTRNB OC1LTRNB ; 
      15 XLDCD XLDCD ; 
      15 OC1LPRTN OC1LPRTN ; 
      15 OC1SNDDT OC1SNDDT ; 
      15 OC1SNTDT OC1SNTDT ; 
      15 OC1LTRST OC1LTRST ; 
end // end OC0CW04

// Current page number
DataItem OC0CMCPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Max page number
DataItem OC0CMMPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// 0CC portion of date
DataItem OC0CW0CC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total buyer count
DataItem OC0CWBCT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Subscript for buyer table
DataItem OC0CWBIX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted buyer name
DataItem OC0CWBNM char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buyer row
DataItem OC0CWBRW char(37)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DB busy on build flag
DataItem OC0CWBSY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Buyer table loaded flag
DataItem OC0CWBYF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buyer wants confrm flag
DataItem OC0CWCFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order number change flag
DataItem OC0CWCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// confirmation letter found flag
DataItem OC0CWCLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Derived confirmation flag
DataItem OC0CWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buyer wants dscrp flag
DataItem OC0CWDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error date key
DataItem OC0CWDKY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Discrepancy letter found flag
DataItem OC0CWDSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 0CCYYMMDD date
DataItem OC0CWDTE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted error key
DataItem OC0CWEKY char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// confirm letter found error key
DataItem OC0CWELF char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Error flag
DataItem OC0CWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// oc0cw02 group level
DataItem OC0CWGP2 char(712)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// oc0cw03 group level
DataItem OC0CWGP3 char(1924)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// oc0cw04 group level
DataItem OC0CWGP4 char(800)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OC0CW01 group level
DataItem OC0CWGR1 char(156)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// letter on hold indicator
DataItem OC0CWHLD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group for diags
DataItem OC0CWKY1 char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Lines per letter count
DataItem OC0CWLCT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Subscript for TS/Map line
DataItem OC0CWLIX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display ltr nbr for err key
DataItem OC0CWLKY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 1st letter line flag
DataItem OC0CWLN1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Reprint/original flag
DataItem OC0CWLTP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// New page flag
DataItem OC0CWNPG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op_cust_ord_id
DataItem OC0CWOID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error ord id
DataItem OC0CWOKY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op_cust_ord_id for diag
DataItem OC0CWORD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op_ord_part_char
DataItem OC0CWPCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error part char
DataItem OC0CWPKY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Total reprint count
DataItem OC0CWRCT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Type option request
DataItem OC0CWREQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Subscript for reprint table
DataItem OC0CWRIX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved reprint fields
DataItem OC0CWRPT char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// return code for diag
DataItem OC0CWRTN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection indicator
DataItem OC0CWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sent letter found flag
DataItem OC0CWSNF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted send to addressee
DataItem OC0CWSTO char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS written flag
DataItem OC0CWTSA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage lgth
DataItem OC0CWTSL num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage row
DataItem OC0CWTSR char(59)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// letter type abbrev
DataItem OC0CWTYP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Unsent letter found flag
DataItem OC0CWUSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Subscript for letter array
DataItem OC0CWVIX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xld_ltr_typ_cd
DataItem OC0CWXLD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YYMMDD portion of date
DataItem OC0CWYMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

