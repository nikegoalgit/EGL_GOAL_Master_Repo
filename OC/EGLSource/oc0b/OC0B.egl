package oc0b;
import corpcom2.XS0AW02;
import corpcom2.XX0XW01;
import corpcom3.*;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF4;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.ZZZSTM;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import kb.common.KBXREC;
import ku.common.KUIPRDID;
import oc.common.*;
import om.common.OMCREC;
import op.common.OP1CUNDT;
import op.common.OP1CUOID;
import op.common.OP1PARTN;
import op.common.OP1REC;
import op.common.OP2CPLNB;
import sm.common.SM1AGYID;
import sy.common.SY2CLRDS;
import sy.common.*;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TAEREC;

//*** PROGRAM=OC0B ****
// APPLICATION OVERVIEW:
// 
//      This appication shows the Formatted Discrepancy Letter
//   either by choosing a letter or group of letters from
//   OC0C (Letter Summary) or by accessing the latest letter.
// 
// 
// 
// **********************************************************
//              M A I N T E N A N C E   L O G
// **********************************************************
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 06/26/90   skott    Created
// 09/11/91   schase   Added check ocwrtncd='05' for batch edit
//                     is running when OC0F is called. sr1.
// 10/01/91   trober   corrected logic to always check for
//                     an order number change in oc0bs20.
//                     user was entering invalid order numbers
//                     pushing "pf7" or "pf8" causing a post
//                     to occur on temp storage.
// 10/15/91   dflesh   corrected logic in sf2.  if the last
//                     name had a space in it (ie. di smith)
//                     the asterisk was formatting incorrectly.
//                     increased map length by 1 for 'sent to'.
//                     added oc0bwffl, chgd length of wfnm &
//                     wsto to 41, chgd occurance of wbnm &
//                     wcha to 41 in oc0bw01.
// 10/24/91   trober   REMOVED PRODUCT DESC; REPLACED WITH
//                     STYLE NAME AND ADDED COLOR DESCRIPTION
// 11/06/91   dflesh   adjusted pf key placement on map.
// 01/06/92   dcaust   add select unique b-4 update in SU3.
// 01/13/92   dcaust   add call to oc5200 format name in sf1.
// 02/08/93   bbake2   log#820 - change the way oc5150
//                     is called, added new fields to the pass
//                     record and got new return codes back
//                     sr6, sf6, sc6, s14.
// 02/10/93   bbake2   log#820 - oops! seems I tried to close
//                     the cursor from oc5150 when it wasn't
//                     open.
// 01/26/94   gcalki   #1002 - recompile for change to ocwrec.
// *********************
Program OC0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KBXREC KBXREC; // record
  OC0BW01 OC0BW01; // record
  OC0BW02 OC0BW02; // record
  OC1REC OC1REC; // record
  OC2REC OC2REC; // record
  OC3REC OC3REC; // record
  OC4REC OC4REC; // record
  OC5REC OC5REC; // record
  OCDREC OCDREC; // record
  OCEREC OCEREC; // record
  OCFREC OCFREC; // record
  OCHREC OCHREC; // record
  OCWREC OCWREC; // record
  OMCREC OMCREC; // record
  OP1REC OP1REC; // record
  SQLCA SQLCA; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XS0AW02 XS0AW02; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDTTBL {deleteAfterUse = yes}; // table
  use XS0AT02 {deleteAfterUse = yes}; // table
  use OC0BM.OC0BM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OC0B000: OC0B000();
    goto OC0B010;
    OC0B010: OC0B010();
    goto OC0B010;
  end // end main
end // end OC0B

// FORMATTED DISCREPANCY LETTER
Function OC0B000()
     /* Check csp security*/
  XSENTRY();

   /* **** retrieve o/c commarea *****/
  OCWREC.OCWGROUP = COMMAREA.CAUSERA; /* get commarea*/


   /* ****************************************************/
   /* *** set segmented trans id                      ****/
   /* ****************************************************/

  CAEZSAP = sysVar.transactionID;
  CAEZSG12 = "OC";
  CAEZSG4 = "B";
  sysVar.transactionID = CAEZSAP;


     /* Initialize application - init records, check fastpathing*/
                              /* save map name for XS sgrp's*/
                              /* read records*/
  OC0BS01();

     /* build temp storage for paging*/
  if (OC0BW01.OC0BWERR == "N") /* no errors*/
    OC0BS05();
  end


     /* Build map for display*/
  OC0BS10();

     /* Display commarea message*/
  if (COMMAREA.CAMSG == " ") /* no message in commarea*/
    /* next sentence*/
  else
    converseLib.validationFailed(0); /* clear msg in msg nbr*/
    OC0BM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CAMSG = " ";
  end

     /* set attributes*/
  OC0BS15();


end // end OC0B000

// CONVERSE OCOBM001
Function OC0B010()

  converseLib.clearScreen();
   /* set map page*/
  converseVar.segmentedMode = 1; /* force segmented converse mode*/

  converse OC0BM001 ;

     /* Init error stuff*/

  converseLib.validationFailed(0); /* clear last error msg*/
  OC0BM001.VAGen_EZEMSG = " "; /* clear last commarea msg*/
  OC0BW01.OC0BWERR = "N"; /* clear error flag*/


     /* process PF Keys*/

  OC0BSPF();


  if (OC0BW01.OC0BWERR == "N") /* no errors*/
       /* Reset field attributes*/

    OC0BS15();


       /* Edit map*/
    OC0BS20();

  end

       /* update*/
  if (OC0BW01.OC0BWERR == "N") /* no errors*/
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf13)
      if (OC0BW01.OC0BWCHG == "C" /* comment chg was made*/
       || OC0BW01.OC0BWDEL == "C" /* comment was deleted*/
       || OC0BW01.OC0BWDEL == "D") /* dscrp was deleted*/
        OC0BS40(); /* update*/
      end
    end
  end

  if (OC0BW01.OC0BWERR == "N") /* no errors*/
    OC0BS60(); /* process transfers or options*/
  end

end // end OC0B010

// initialize, read records
Function OC0BS01()

    /* SET RECORDS EMPTY*/

  set OC1REC empty;
  set OC2REC empty;
  set OC3REC empty;
  set OC4REC empty;
  set OC5REC empty;
  set OCDREC empty;
  set OCEREC empty;
  set OCFREC empty;
  set OP1REC empty;
  set OMCREC empty;
  set SYCREC empty;
  set KBXREC empty;
  set ERRSQLCA empty;
  set SQLCA empty;
  set TAEREC empty;
  set TA1REC empty;
  set TA2REC empty;
  set TA5REC empty;
  set OC0BW01 empty;
  set OC0BW02 empty;
  set XX0XW01 empty;
  set XS0AW02 empty;

  set OC0BM001 empty;

  TA1REC.TA1MAP = "OC0BM001"; /* for diags*/

  OC0BW01.OC0BWERR = "N"; /* init err flag*/
  OC0BW01.OC0BWLTR = "N"; /* init letters flag*/

  XX0XS01(); /* get date and time*/

  OC0BSS1(); /* check fastpathing*/

  if (OC0BW01.OC0BWERR == "N")
    OC0BS02(); /* read records*/
  end


end // end OC0BS01

// read records
Function OC0BS02()

    /* ****   read records depending on information in OCWREC*/


  if (OCWREC.OCWCUOID == 0) /* no letter entered*/
    OC0BW01.OC0BWERR = "Y";
    converseLib.validationFailed(081); /* enter order number to view letter*/
  else
    if (OCWREC.OCWCULTR == 0)
      OC0BSR2(); /* read oc1rec with max option*/
    else
      OC0BSR3(); /* read oc1rec with select*/
    end
  end

  if (OC0BW01.OC0BWLTR == "Y") /* letters exist*/
    if (OC1REC.OC1LTRST == "SN") /* letter was sent*/
      OC0BSR5(); /* read oc2rec for distribution*/
    else
      OC0BSR6(); /* select buyer set*/
      if (OCWREC.OCWOTUNT > 0 /* total units already loaded*/
       && OCWREC.OCWOVALU > 0) /* total value already loaded*/
        /* next sentence*/
      else
        if (OCWREC.OCWSYSID == "OP") /* order on op database*/
          OC0BSR4(); /* sum call to op1rec*/
        end
      end
    end
  end




end // end OC0BS02

// initialize letter array
Function OC0BS03()


  OC0BW01.OC0BWSB1 = 1;
  while (OC0BW01.OC0BWSB1 <= 15)
    OCWREC.OCWSELCD[OC0BWSB1] = " "; /* select code*/
    OCWREC.OC1LTRNB[OC0BWSB1] = 0; /* letter number*/
    OC0BW01.OC0BWSB1 = OC0BW01.OC0BWSB1 + 1;
  end

end // end OC0BS03

// build temp storage
Function OC0BS05()

      /* ****   build temp storage for map detail lines   *****/

  OC0BSTP();
                                   /* purge any temp storage hanging around*/

  OC0BW01.OC0BWRW2 = " "; /* init format line*/
  OC0BW01.OC0BWRW3 = " "; /* init format line*/
  OC0BW01.OC0BWSB1 = 0; /* line counter*/
  OC0BW01.OC0BWCPG = 1; /* current page*/
  OC0BW01.OC0BWMPG = 1; /* max pages*/
  OC0BW01.OC0BWSB2 = 1; /* page counter*/
  OC0BW01.OC0BWPXD = " "; /* prev discrepancy type*/
  OC0BW01.OC0BWPND = 0; /* prev need date*/

  OC0BSR7(); /* select dscrp record*/

  while (SQLCA.VAGen_SQLCODE == 0)
    if (OC5REC.XDTCD == OC0BW01.OC0BWPXD /* dscrp tp = prev dscrp type*/
     && OC0BW01.OC0BWSB1 < 13)           /* need at least 2 lines for dscrp*/
      /* next sentence*/
    else
      OC0BS06(); /* create dscrp heading line*/
    end
    if (OC5REC.XDTCD == "ND") /* if dscrp type is need date*/
      if (OC0BW01.OC0BWPXD == "ND" /* prev dscrp tp is need date*/
       && OC5REC.OP1CUNDT == OC0BW01.OC0BWPND) /* nd dte on dscrp = prev*/
         /* next sentence*/
      else
        OC0BS07(); /* need date change line*/
      end
    end
    OC0BS08(); /* format dscrp detail*/
    OC0BSF7(); /* fetch dscrp*/
  end

  OC0BSC7(); /* close dscrp*/

  OC0BS09(); /* format comments*/


end // end OC0BS05

// format dscrp heading line
Function OC0BS06()

      /* ****   format dscrp heading line  *****/
        /* this includes formatting a new type of dscrp*/
        /* or starting a new page because*/
          /* a) 2 lines for a dscrp in a list of dscrps were not*/
             /* available*/
          /* b) 4 lines for a new type of dscrp were not avaiable*/



    /* a new dscrp must have 4 lines: 1 blank, 1 desc, 2 detail*/

  if (OC0BW01.OC0BWSB1 < 11) /* must have 4 lines for dscrp*/
    OC0BW01.OC0BWSB1 = OC0BW01.OC0BWSB1 + 1; /* create blank line*/
  else
    OC0BS17(); /* write temp storage page*/
  end

  OC0BS16(); /* format heading*/

  OC0BW01.OC0BWPXD = OC5REC.XDTCD; /* move dscrp tp to prev*/
  OC0BW01.OC0BWPND = OC5REC.OP1CUNDT; /* nd dt to prev*/

end // end OC0BS06

// format new need date line
Function OC0BS07()

            /* ****   format new need date line  *****/
        /* if in a sequence of need date dscrps, the need date*/
        /* changes, skip a line and format the next dscrp.*/
        /* Format the dscrp on the same page if 3 lines are*/
        /* available, otherwise start a new page.*/



    /* a new nd dt must have 3 lines: 1 blank,  2 detail*/

  if (OC0BW01.OC0BWSB1 < 12)
    OC0BW01.OC0BWSB1 = OC0BW01.OC0BWSB1 + 1; /* create blank line*/
  else
    OC0BS17(); /* WRITE TEMP PAGE*/
    OC0BS16(); /* format heading*/
  end


  OC0BW01.OC0BWPXD = OC5REC.XDTCD; /* move dscrp tp to prev*/
  OC0BW01.OC0BWPND = OC5REC.OP1CUNDT; /* nd dt to prev*/

end // end OC0BS07

// format discrepancy detail
Function OC0BS08()

            /* ****   format discrepancy detail  *****/


  OC0BW02.OC0BWTYP[OC0BWSB1] = "2";
  OC0BW02.OC0BWSEQ[OC0BWSB1] = OC5REC.OC4DSCPN;

  if (OC5REC.OC4STYFL == "Y") /* all styles*/
    OC0BW01.OC0BWPRD = "ALL STYLES";
  else
    if (OC5REC.SY1STNBR != " ") /* style filled in*/
      OC0BW01.SY1STNBR = OC5REC.SY1STNBR;
      OC0BW01.OC0BWFL1 = "-"; /* format with  -*/
      if (OC5REC.SY2CLRID == "  0")
        OC0BW01.SY2CLRID = "00 ";
      else
        OC0BW01.SY2CLRID = OC5REC.SY2CLRID;
      end
      OC0BW01.OC0BWFL2 = "-"; /* format with  -*/
      if (OC5REC.XDMCD == "0 ")
        OC0BW01.XDMCD = "00";
      else
        OC0BW01.XDMCD = OC5REC.XDMCD;
      end
      OC0BSR9(); /* read sycrec for prd desc*/
    end
  end

  OC0BW01.OC0BWWAS = "WAS: ";
  OC0BW01.OC0BWEXP = OC5REC.OC4EXPEC; /* expected value*/

  OC0BW02.OC0BWROW[OC0BWSB1] = OC0BW01.OC0BWRW2; /* move to ts*/

  OC0BW02.OC0BWOFL[OC0BWSB1] = OC5REC.OC4STYFL; /* all styles flag*/

  OC0BW02.OC0BWXDT[OC0BWSB1] = OC5REC.XDTCD; /* dscrep type*/

  OC0BW01.OC0BWRW2 = " "; /* init formatting rw2*/
  OC0BW01.OC0BWSB1 = OC0BW01.OC0BWSB1 + 1;


      /* second dscrp line*/
  OC0BW02.OC0BWTYP[OC0BWSB1] = "3";
  OC0BW02.OC0BWSEQ[OC0BWSB1] = OC5REC.OC4DSCPN;

  if (OC5REC.OC4ACTUA == " ") /* actual value is empty*/
    /* next sentence*/
  else
    OC0BW01.OC0BWIS = " IS: ";
    OC0BW01.OC0BWACT = OC5REC.OC4ACTUA; /* actual value*/
  end

  if (OC5REC.KUIPRDID == "00") /* no customer prod id*/
    /* next sentence*/
  else
    OC0BW01.OC0BWKPD = OC5REC.KUIPRDID;
  end

  OC0BW02.OC0BWROW[OC0BWSB1] = OC0BW01.OC0BWRW3; /* move to ts*/

  OC0BW01.OC0BWRW3 = " "; /* init formatting rw3*/
  OC0BW01.OC0BWSB1 = OC0BW01.OC0BWSB1 + 1;

end // end OC0BS08

// format comments
Function OC0BS09()

       /* ****   format comment section of temp storage  *****/


  if (OC0BW01.OC0BWSB1 == 1) /* at start of new page*/
     /* next sentence*/
  else
    OC0BW01.OC0BWSB1 = OC0BW01.OC0BWSB1 + 1;
  end

  if (OC0BW01.OC0BWSB1 < 13) /* room for heading and 1 comment*/
    /* next sentence*/
  else
    OC0BS17(); /* write last page of dscrps*/
  end

  OC0BS37(); /* format comment heading*/

  OC0BSR8(); /* select set of comments*/

  while (SQLCA.VAGen_SQLCODE == 0)
    OC0BS18(); /* format comment detail lines*/
  end

  if (OC0BW01.OC0BWSB1 <= 14) /* last page of comments not written*/
    OC0BS27(); /* format blanks for comments*/
    OC0BS17(); /* write comments page*/
  end

  if (OC1REC.OC1LTRST == "SN" /* sent*/
   || OC1REC.OC1LTRST == "IP" /* in process*/
   || COMMAREA.CACHGFL == "N") /* not secured for update*/
    /* next sentence*/
  else
    OC0BS37(); /* format comment heading*/
    OC0BS27(); /* format blanks for comments*/
    OC0BS17(); /* write additional page of comments*/
  end

  OC0BSC8(); /* close cursor*/


end // end OC0BS09

// build map
Function OC0BS10()
           /* ****  BUILD OC0B MAP.     *****/


  OC0BM001.OPMPRC = "OC0B"; /* process name*/

  OC0BM001.OPMMAP = "M1"; /* map name*/

  OC0BM001.OPMDTE = VGVar.currentShortGregorianDate; /* current date*/


  OC0BM001.OC0BMPF9 = "9:RELEASE";
  OC0BM001.OC0BMPF5 = "5:ADD";

  OC0BM001.OCWCUOID = OCWREC.OCWCUOID; /* order number*/

  if (OCWREC.OCWCUOID > 0) /* nbr in record*/
    OC0BM001.OCWCUST = OCWREC.OCWCUST; /* customer nbr*/
    OC0BM001.KUMSTRNM = OCWREC.KUMSTRNM; /* customer nm*/

    if (OC0BW01.OC0BWLTR == "Y") /* letters found for order*/
      if (OC1REC.OC1LTRST == "SN") /* letter was sent*/
        OC0BS11(); /* format sent headings*/
      else
        OC0BS31(); /* format unsent headings*/
      end
      OC0BS32(); /* format misc data*/
      OC0BS12(); /* format detail lines*/
    else
      if (OCWREC.OCWCUST != " ") /* order exists*/
        OC0BS31(); /* format unsent headings*/
      end
    end
  end


end // end OC0BS10

// format sent headings
Function OC0BS11()


  OC0BM001.OP1CUPO = OC1REC.OP1CUPO; /* po number*/
  OC0BW01.SM1AGYID = OC1REC.SM1AGYID; /* agency id*/
  OC0BW01.OC0BWSLH = "/"; /* filler*/
  OC0BW01.OC0BWREP = OC1REC.SM4REPID; /* rep id*/
  OC0BM001.OC0BMARP = OC0BW01.OC0BWARP; /* agency rep formatted*/
  OC0BM001.OC0BMNDT = OC1REC.OP1CUNDT; /* need date*/
  OC0BM001.OP1ORDBY = OC1REC.OP1ORDBY; /* ordered by*/
  OC0BM001.OC0BMVLU = OC1REC.OP1OVALU; /* order value*/
  OC0BM001.OC0BMTNT = OC1REC.OP1OTUNT; /* order total units*/
  OC0BM001.OC0BMTDT = OC1REC.OC1SNTDT; /* actual sent date*/
  OC0BM001.OC0BMSTO = OC0BW01.OC0BWSTO; /* sent to*/


end // end OC0BS11

// move temp strg detail to map
Function OC0BS12()
           /* ****  move detail lines from temp storage to map*/
                   /* for current page                     *****/

  OC0BW01.OC0BWCPG = OC0BM001.OC0BMCPG;

  OC0BSTR(); /* read temp storage*/

  OC0BW01.OC0BWSB1 = 1; /* line sub*/

  while (OC0BW01.OC0BWSB1 <= 13) /* 13 is full page*/
    OC0BM001.OC0BMROW[OC0BWSB1] = OC0BW02.OC0BWROW[OC0BWSB1];
    OC0BW01.OC0BWSB1 = OC0BW01.OC0BWSB1 + 1;
  end

end // end OC0BS12

// determine distribution
Function OC0BS13()

  OC0BSF5(); /* fetch 1st dist record*/
  if (SQLCA.VAGen_SQLCODE == 0)
    OC0BW01.OC0BWSTO = OC2REC.XXXATTN; /* Hold for build map*/
    OC0BSF5(); /* fetch next record*/
    if (SQLCA.VAGen_SQLCODE == 0) /* more distribution*/
      OC0BSF2(); /* format asterisk*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OC0BW01.OC0BWSTO = "REP ONLY";
    end
  end


end // end OC0BS13

// determine buyer(s)
Function OC0BS14()

       /* this statement group is called only on unsent letters*/

      /* look at the return code from oc5150, to see if there*/
      /* is any buyer to be read*/

  if (OCEREC.OCERTNCD == 01)
    OC0BW01.OC0BWSTO = "NO BUYER FOUND - NO ACTIVE PRODUCT";
    return;
  end
  if (OCEREC.OCERTNCD == 02)
    OC0BW01.OC0BWSTO = "NO BUYER FOUND - NO ACTIVE REP";
    return;
  end

    /* now we can start scrolling for buyers.*/

  OC0BSF6(); /* fetch 1st buyer record*/

  if (OCEREC.OCERTNCD == 00) /* we got at least one buyer*/
    OC0BSF1(); /* format buyer name*/
    OC0BSF6(); /* fetch next record*/
    if (OCEREC.OCERTNCD == 00) /* more distribution*/
      OC0BSF2(); /* format asterisk*/
    end
  else
    if (OCEREC.OCERTNCD == 03) /* we didn't find any buyers*/
      OC0BW01.OC0BWSTO = "NO BUYER FOUND - NO BUYER ASSIGNED";
    end
  end


end // end OC0BS14

// set field attributes
Function OC0BS15()
       /* ****  set field attributes  *****/

  if (OC0BW01.OC0BWLTR == "N") /* error or missing information*/
    set OC0BM001.OCWCUOID cursor, bold;
    set OC0BM001.OC0BMCPG skip; /* Current page*/
  else
    set OC0BM001.OCWCUOID initialAttributes; /* Order number*/
    set OC0BM001.OC0BMCPG initialAttributes; /* Current page*/
  end


  if (OC1REC.OC1LTRST == "IP" /* letter in process*/
   || OC1REC.OC1LTRST == "SN" /* letter sent*/
   || COMMAREA.CACHGFL == "N" /* no user authority to upd*/
   || OC0BW01.OC0BWLTR == "N") /* no letters found*/
    OC0BS25(); /* set map protected*/
  else
    OC0BS26(); /* set lines defined*/
  end

end // end OC0BS15

// format heading
Function OC0BS16()

       /* ****   this routine places the dscrp description*/
                 /* and type in working storage    ******/

  OC0BW02.OC0BWTYP[OC0BWSB1] = "1";

  if (OC5REC.XDTCD in XDTTBL.XDTCD) /* dscrp type table*/
    OC0BW02.OC0BWROW[OC0BWSB1] = XDTTBL.XDTTEXT1[sysVar.arrayIndex];
  else
    OC0BW02.OC0BWROW[OC0BWSB1] = "UNKNOWN DISCREPANCY";
  end

  OC0BW01.OC0BWSB1 = OC0BW01.OC0BWSB1 + 1;

end // end OC0BS16

// write page to temp storage
Function OC0BS17()

  OC0BSTW(); /* write temp storage*/
  set OC0BW02 empty;
  OC0BW01.OC0BWSB2 = OC0BW01.OC0BWSB2 + 1;
  OC0BW01.OC0BWSB1 = 1; /* init line count*/


end // end OC0BS17

// format comment detail lines
Function OC0BS18()

  if (OC0BW01.OC0BWSB1 > 13) /* time to write page to temp storage*/
    OC0BS17();
    OC0BS37(); /* format comment heading*/
  end

  OC0BW02.OC0BWTYP[OC0BWSB1] = "4";
  OC0BW02.OC0BWSEQ[OC0BWSB1] = OC3REC.OC3CMNTN;
  OC0BW02.OC0BWROW[OC0BWSB1] = OC3REC.OC3CTEXT;
  OC0BW02.ZZZCHGCT[OC0BWSB1] = OC3REC.ZZZCHGCT;
  OC0BW01.OC0BWSB1 = OC0BW01.OC0BWSB1 + 1;
  OC0BSF8(); /* get next comment*/

end // end OC0BS18

// edit map
Function OC0BS20()
   /* *****   edit map   *******/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf9) /* release*/
    OC0BS33(); /* check fast path option*/
    if (OC0BW01.OC0BWERR == "Y")
      return; /* fast path error, no further edits*/
    end
  end
  OC0BS34(); /* check order number change*/


  if (OC0BW01.OC0BWLTR == "Y") /* letter found*/
    OC0BW01.OC0BWCHG = "N"; /* init change flag*/
    OC0BW01.OC0BWDEL = "N"; /* init delete flag*/

    OC0BW01.OC0BWSB1 = 13;

    while (OC0BW01.OC0BWSB1 >= 1) /* work bottom up*/
      OC0BS21(); /* check select values*/
      OC0BW01.OC0BWSB1 = OC0BW01.OC0BWSB1 - 1;
    end

    OC0BS23(); /* perform paging edits*/

    if (OC0BW01.OC0BWERR == "N")
      OC0BS24(); /* perform misc edits*/
    end

    if (OC0BW01.OC0BWERR == "Y")
      OC0BS2A(); /* highlight selections*/
    else
      OC0BS2B(); /* check for invalid options*/
    end

  end

end // end OC0BS20

// edit detail selections
Function OC0BS21()
   /* *****   edit detail selections  ******/

    /* there are 2 indicators; the OC0BWDEL (delete ind) and*/
      /* the OC0BWCHG (chg ind).*/
       /* OC0BWDEL = 'C'  ---  COMMENTS DELETED*/
       /* OC0BWDEL = 'D'  ---  DSCRPS DELETED*/
       /* OC0BWCHG = 'C'  ---  COMMENTS CHANGED*/
       /* OC0BWCHG = 'S'  ---  DSCRPS SELECTED*/
       /* OC0BWCHG = 'A'  ---  ALL DSCRPS SELECTED*/

          /* check comments*/

  if (OC0BM001.OC0BMROW[OC0BWSB1] == OC0BW02.OC0BWROW[OC0BWSB1])
    /* next sentence*/
  else /* comment change*/
    if (OC0BM001.OC0BMROW[OC0BWSB1] == " ") /* comment deleted*/
      OC0BW01.OC0BWDEL = "C"; /* comment delete indicator*/
    else
      OC0BW01.OC0BWCHG = "C"; /* comment change indicator*/
    end
  end

         /* check dscrp selections*/

  if (OC0BM001.OC0BMSEL[OC0BWSB1] == " ") /* nothing entered*/
    /* next sentence*/
  else
    if (OC0BM001.OC0BMSEL[OC0BWSB1] == "S" /* dscrp selected*/
     || OC0BM001.OC0BMSEL[OC0BWSB1] == "A") /* dscrp selected*/
      OC0BS2C(); /* edit for non-applic dscrp types*/
      OC0BS22(); /* check processes already done*/
    else
      if (OC0BM001.OC0BMSEL[OC0BWSB1] == "D") /* dscrp deleted*/
        if (OC0BW01.OC0BWCHG == "S" /* dscrp already processed*/
         || OC0BW01.OC0BWCHG == "A") /* all dscrp process*/
          OC0BW01.OC0BWERR = "Y";
          converseLib.validationFailed(074); /* 'can't delete and select'*/
        else
          OC0BW01.OC0BWDEL = "D"; /* delete dscrp*/
        end
      end
    end
  end


end // end OC0BS21

// check selections already made
Function OC0BS22()
   /* *****    edit selections already processed  *******/


  if (OC0BW01.OC0BWDEL == "D") /* dscrp already deleted*/
    OC0BW01.OC0BWERR = "Y";
    converseLib.validationFailed(074); /* 'can't delete and select'*/
  else
    if (OC0BW01.OC0BWDEL == "C" /* comment already deleted*/
     || OC0BW01.OC0BWCHG == "C") /* comment already chgd*/
      OC0BW01.OC0BWERR = "Y";
      converseLib.validationFailed(075); /* 'can't chg cmts and proces dscrps'*/
    else
      if (OC0BM001.OC0BMSEL[OC0BWSB1] == "A")
        OC0BW01.OC0BWCHG = "A"; /* process all*/
      else
        if (OC0BW01.OC0BWCHG != "A") /* leave process all option*/
          OC0BW01.OC0BWCHG = "S"; /* process dscrp*/
        end
      end
    end
  end

end // end OC0BS22

// perform paging edits
Function OC0BS23()
   /* *****   edit paging options  ******/

      /* options are:*/
          /* change page number between 1 and max number of pages*/
          /* pf7 for scroll back*/
          /* pf8 for scroll fwrd*/


  if (OC0BM001.OC0BMCPG < 1) /* cant scroll back*/
    OC0BW01.OC0BWERR = "Y";
    converseLib.validationFailed(013); /* 'page nbr must be gt 0'*/
    set OC0BM001.OC0BMCPG cursor, bold;
  else
    if (OC0BM001.OC0BMCPG > OC0BM001.OC0BMMPG) /* cant scroll fwrd*/
      OC0BW01.OC0BWERR = "Y";
      converseLib.validationFailed(003); /* 'page nbr exceeds total'*/
      set OC0BM001.OC0BMCPG cursor, bold;
    end
  end

  if (OC0BM001.OC0BMCPG == OC0BW01.OC0BWCPG) /* no chg*/
    /* next sentence*/
  else
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      OC0BW01.OC0BWERR = "Y";
      converseLib.validationFailed(012); /* 'cant pg and pf7/pf8'*/
      set OC0BM001.OC0BMCPG cursor, bold;
      return;
    end
  end

  if (converseVar.eventKey is pf7)
    if (OC0BM001.OC0BMCPG == 1)
      OC0BW01.OC0BWERR = "Y";
      converseLib.validationFailed(009); /* 'end of scroll back'*/
      set OC0BM001.OC0BMCPG cursor, bold;
    end
  else
    if (converseVar.eventKey is pf8)
      if (OC0BM001.OC0BMCPG == OC0BM001.OC0BMMPG) /* past max pgs*/
        OC0BW01.OC0BWERR = "Y";
        converseLib.validationFailed(010); /* 'end of scroll fwrd'*/
        set OC0BM001.OC0BMCPG cursor, bold;
      end
    end
  end


  if (OC0BW01.OC0BWCHG == "N" /* no changes made*/
   && OC0BW01.OC0BWDEL == "N") /* no deletions made*/
    /* next sentence*/
  else
    if (converseVar.eventKey is pf7 /* pg back*/
     || converseVar.eventKey is pf8) /* pg fwrd*/
      OC0BW01.OC0BWERR = "Y";
      converseLib.validationFailed(076); /* 'cant make chgs on more than 1 pg'*/
    else
      if (OC0BM001.OC0BMCPG != OC0BW01.OC0BWCPG) /* pg chd*/
        OC0BW01.OC0BWERR = "Y";
        converseLib.validationFailed(076); /* 'cant make chgs on more than 1 pg'*/
        set OC0BMCPG cursor, bold;
      end
    end
  end

end // end OC0BS23

// perform misc edits
Function OC0BS24()
   /* *****   miscellaneous edits  ******/


  if (converseVar.eventKey is enter)
    if (OC0BW01.OC0BWCHG == "N" /* nothing processed*/
     && OC0BW01.OC0BWDEL == "N" /* nothing deleted*/
     && OC0BM001.OC0BMCPG == OC0BW01.OC0BWCPG) /* no pg chg*/
      OC0BW01.OC0BWERR = "Y";
      converseLib.validationFailed(073); /* 'enter s, a, d or chg comments'*/
    end
  end

  if (converseVar.eventKey is pf9) /* release letter*/
    if (OC0BW01.OC0BWDEL != "N") /* something deleted*/
      OC0BW01.OC0BWERR = "Y";
      converseLib.validationFailed(083); /* 'hit enter to reformat bfr rls'*/
    else
      if (OC0BW01.OC0BWCHG != "N") /* something processed*/
        OC0BW01.OC0BWERR = "Y";
        converseLib.validationFailed(077); /* 'cant process chgs and release'*/
      end
    end
  end


end // end OC0BS24

// set map protected
Function OC0BS25()

  if (OC0BW01.OC0BWLTR == "N") /* no letter found*/
    set OC0BM001.OC0BMPF5 initialAttributes; /* pf 5 to add dscrp*/
  else
    set OC0BM001.OC0BMPF5 skip, invisible; /* pf 5 to add dscrp*/
  end

  set OC0BM001.OC0BMPF9 skip, invisible; /* pf 9 to release letter*/

  OC0BW01.OC0BWSB1 = 1;

  while (OC0BW01.OC0BWSB1 <= 13) /* For 13 lines*/

    if (OC0BW02.OC0BWTYP[OC0BWSB1] == "1") /* heading*/
      set OC0BM001.OC0BMROW[OC0BWSB1] skip, bold;
    else
      set OC0BM001.OC0BMROW[OC0BWSB1] skip;
    end

    set OC0BM001.OC0BMSEL[OC0BWSB1] skip, invisible;

    OC0BW01.OC0BWSB1 = OC0BW01.OC0BWSB1 + 1; /* Increment line subscript*/
  end
end // end OC0BS25

// set detail line attributes
Function OC0BS26()


  set OC0BM001.OC0BMPF5 initialAttributes; /* pf 5 to add*/
  set OC0BM001.OC0BMPF9 initialAttributes; /* pf 9 to release letter*/

  OC0BW01.OC0BWSB1 = 1;

  while (OC0BW01.OC0BWSB1 <= 13) /* For 13 lines*/
    if (OC0BW02.OC0BWTYP[OC0BWSB1] == "1") /* heading*/
      set OC0BM001.OC0BMROW[OC0BWSB1] skip, bold;
      set OC0BM001.OC0BMSEL[OC0BWSB1] skip, invisible;
    else
      if (OC0BW02.OC0BWTYP[OC0BWSB1] == "2") /* dscrp*/
        set OC0BM001.OC0BMROW[OC0BWSB1] skip;
        set OC0BM001.OC0BMSEL[OC0BWSB1] initialAttributes;
      else
        if (OC0BW02.OC0BWTYP[OC0BWSB1] == "3") /* dscrp line 2*/
          set OC0BM001.OC0BMROW[OC0BWSB1] skip;
          set OC0BM001.OC0BMSEL[OC0BWSB1] skip, invisible;
        else
          if (OC0BW02.OC0BWTYP[OC0BWSB1] == "4") /* comment*/
            set OC0BM001.OC0BMROW[OC0BWSB1] initialAttributes;
            set OC0BM001.OC0BMSEL[OC0BWSB1] skip, invisible;
          else
            if (OC0BM001.OC0BMROW[OC0BWSB1] == " ") /* no data in row*/
              set OC0BM001.OC0BMROW[OC0BWSB1] skip, invisible;
              set OC0BM001.OC0BMSEL[OC0BWSB1] skip, invisible;
            end
          end
        end
      end
    end
    OC0BWSB1 = OC0BWSB1 + 1; /* Increment line subscript*/
  end

end // end OC0BS26

// write page of comments for
Function OC0BS27()


  while (OC0BW01.OC0BWSB1 <= 13)
    OC0BW02.OC0BWTYP[OC0BWSB1] = "4"; /* comments*/
    OC0BW02.OC0BWROW[OC0BWSB1] = " ";
    OC0BW01.OC0BWSB1 = OC0BW01.OC0BWSB1 + 1;
  end

end // end OC0BS27

// highlight selections
Function OC0BS2A()


  OC0BW01.OC0BWSB1 = 13;

  while (OC0BW01.OC0BWSB1 >= 1)

    if (OC0BM001.OC0BMSEL[OC0BWSB1] == " ")
       /* next sentence*/
    else
      set OC0BM001.OC0BMSEL[OC0BWSB1] cursor, bold;
    end

    OC0BW01.OC0BWSB1 = OC0BW01.OC0BWSB1 - 1;
  end


  if (OC0BM001.OC0BMCPG != OC0BW01.OC0BWCPG) /* pg nbr chgd*/
    set OC0BM001.OC0BMCPG cursor, bold;
  end

end // end OC0BS2A

// check invalid options
Function OC0BS2B()


  OC0BW01.OC0BWSB1 = 13;

  while (OC0BW01.OC0BWSB1 >= 1)

    if (OC0BM001.OC0BMSEL[OC0BWSB1] == " "
     || OC0BM001.OC0BMSEL[OC0BWSB1] == "A"
     || OC0BM001.OC0BMSEL[OC0BWSB1] == "S"
     || OC0BM001.OC0BMSEL[OC0BWSB1] == "D")
       /* next sentence*/
    else
      set OC0BM001.OC0BMSEL[OC0BWSB1] cursor, bold;
      OC0BW01.OC0BWERR = "Y";
      converseLib.validationFailed(001); /* 'invalid option..'*/
    end

    OC0BW01.OC0BWSB1 = OC0BW01.OC0BWSB1 - 1;
  end


end // end OC0BS2B

// edit for non-appl dscrp types
Function OC0BS2C()
   /* *****   edit for non-applic dscrp types   ******/


  if (OC0BW02.OC0BWOFL[OC0BWSB1] == "N") /* not all styles*/
    if (OC0BW02.OC0BWXDT[OC0BWSB1] == "PO" /* po number*/
     || OC0BW02.OC0BWXDT[OC0BWSB1] == "TD" /* trade discount*/
     || OC0BW02.OC0BWXDT[OC0BWSB1] == "PT" /* payment terms*/
     || OC0BW02.OC0BWXDT[OC0BWSB1] == "DI" /* netted discount*/
     || OC0BW02.OC0BWXDT[OC0BWSB1] == "SA" /* do not ship after*/
     || OC0BW02.OC0BWXDT[OC0BWSB1] == "SB" /* do not ship before*/
     || OC0BW02.OC0BWXDT[OC0BWSB1] == "SP") /* sales program*/
      OC0BW01.OC0BWERR = "Y"; /* set error flag*/
      converseLib.validationFailed(097); /* 'delete & re-add to change'*/
    end
  end

end // end OC0BS2C

// format unsent headings
Function OC0BS31()

  OC0BM001.OP1CUPO = OCWREC.OP1CUPO; /* po number*/
  OC0BW01.SM1AGYID = OCWREC.SM1AGYID; /* agency id*/
       /* don't move slash or zeroes to map if no rep on file*/
  if (OCWREC.SM4REPID == 0) /* no rep on the order*/
    OC0BW01.OC0BWARP = " "; /* init field to blank*/
  else
    OC0BW01.OC0BWSLH = "/"; /* filler*/
    OC0BW01.OC0BWREP = OCWREC.SM4REPID; /* rep id*/
  end

  OC0BM001.OC0BMARP = OC0BW01.OC0BWARP; /* agency rep formatted*/

  OC0BM001.OC0BMNDT = OCWREC.OP1CUNDT; /* need date*/
  OC0BM001.OP1ORDBY = OCWREC.OP1ORDBY; /* ordered by*/
  OC0BM001.OC0BMVLU = OCWREC.OCWOVALU; /* order value*/
  OC0BM001.OC0BMTNT = OCWREC.OCWOTUNT; /* order total units*/
  OC0BM001.OC0BMSTO = OC0BW01.OC0BWSTO; /* sent to*/

end // end OC0BS31

// format misc stuff
Function OC0BS32()


  if (OCWREC.OCWCPG <= 0) /* not saved previously*/
    OC0BM001.OC0BMCPG = 1; /* start with pg 1*/
  else
    OC0BM001.OC0BMCPG = OCWREC.OCWCPG;
  end

  OC0BM001.OC0BMMPG = OC0BW01.OC0BWMPG; /* total pages avail*/


end // end OC0BS32

// edit fastpathing
Function OC0BS33()
        /* edit fastpath option*/

  if (OC0BM001.CATOAP == " ") /* Fast path application*/
    COMMAREA.CATOAP = " ";
  else
    if (OC0BM001.CATOAP == "OC0E") /* fastpath to change discrepancy*/
      set OC0BM001.CATOAP cursor, bold;
      OC0BW01.OC0BWERR = "Y";
      converseLib.validationFailed(98); /* cannot fastpath to this option*/
    else
      COMMAREA.CATOAP = OC0BM001.CATOAP;
      COMMAREA.CAITEM = OC0BM001.OC0BMITM; /* fast past item*/
      OC0BSTP(); /* purge temp storage*/
      OC0BS03(); /* init letter array*/
      OCWREC.OCWCULTR = 0; /* curr letter*/
      COMMAREA.CAUSERA = OCWREC.OCWGROUP; /* ready to xfer out*/
      XSEXIT(); /* go to fast path appl*/

      sysVar.transferName = "OC0M";
      transfer to transaction sysVar.transferName passing COMMAREA;

    end
  end
end // end OC0BS33

// edit order number change
Function OC0BS34()

          /* edit order number*/

  if (OC0BM001.OCWCUOID == OCWREC.OCWCUOID)
    if (OC0BW01.OC0BWLTR == "N") /* no letters found for ord nbr*/
      OC0BW01.OC0BWERR = "Y"; /* flag error for reconverse*/
      set OC0BM001.OCWCUOID cursor, bold;
      if (OCWREC.OCWCUOID == 0)
        converseLib.validationFailed(081); /* 'enter order nbr to view '*/
      else
        converseLib.validationFailed(048); /* 'no letters for order nbr'*/
      end
      return;
    end
  else
    OCWREC.OCWCUOID = OC0BM001.OCWCUOID; /* use new ord nbr*/
    OC0BSR1(); /* call oc0f to get order info*/
    OC0BSTP(); /* purge temp storage*/
    COMMAREA.CAUSERA = OCWREC.OCWGROUP;
    XS0AS00(); /* restart oc0b to use new order nbr*/
    OC0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* mn0s will load msg*/
    OC0BW01.OC0BWERR = "Y"; /* flag error for reconverse*/
    set OC0BM001.OCWCUOID cursor, skip;
    return;
  end


end // end OC0BS34

// format comment heading
Function OC0BS37()

  OC0BW02.OC0BWTYP[OC0BWSB1] = "1";

  OC0BW02.OC0BWSEQ[OC0BWSB1] = 0;

  OC0BW02.ZZZCHGCT[OC0BWSB1] = 0;

  OC0BW02.OC0BWROW[OC0BWSB1] = "COMMENTS"; /* to ts*/

  OC0BW01.OC0BWSB1 = OC0BW01.OC0BWSB1 + 1;


end // end OC0BS37

// update database and temp strg
Function OC0BS40()
   /* *****     update database records and temp storage    ******/
   /* *****     there is no reaseon to update temp storage  ******/
   /* *****     if any deletions were done, as the application ***/
   /* *****     will be restarted, temp storage rebuilt.    ******/


  OC0BW01.OC0BWSB1 = 1;

  while (OC0BW01.OC0BWSB1 <= 13)
    if (OC0BM001.OC0BMSEL[OC0BWSB1] == "D") /* dscrp deleted*/
      OC0BSD4(); /* delete oc4rec*/
    end

    if (OC0BW02.OC0BWTYP[OC0BWSB1] == "4") /* comment*/
      OC0BS41(); /* check comment chgs*/
    end
    OC0BW01.OC0BWSB1 = OC0BW01.OC0BWSB1 + 1;
  end

  if (OC0BW01.OC0BWCHG == "C") /* only update ts if comments chgd*/
    OC0BSTU(); /* update temp storage*/
  end


         /* next check for dscrps and comments.  If none*/
          /* found delete the letter header and inform user*/

  OC0BSRD(); /* read dscrp file for dscrp count*/

  if (SQLCA.VAGen_SQLCODE == 0 /* good retn from db2*/
   && OCDREC.OCDCOUNT > 0)     /* dscrps*/
    /* next sentence*/
  else
    OC0BSRC(); /* read count on comments*/
    if (SQLCA.VAGen_SQLCODE == 0 /* good retn from db2*/
     && OCFREC.OCFCOUNT > 0)     /* comments*/
      COMMAREA.CAMSG = "DISCREPANCIES DELETED, ONLY COMMENTS REMAIN";
    else
      OC0BSD1(); /* delete letter header*/
      COMMAREA.CAMSG = "LETTER DELETED";
    end
  end

end // end OC0BS40

// check comment changes
Function OC0BS41()
   /* *****     check comments for deletions, inserts or    ******/
                       /* changes*/

  if (OC0BW02.OC0BWROW[OC0BWSB1] != OC0BM001.OC0BMROW[OC0BWSB1]) /* cmt chg*/
    if (OC0BM001.OC0BMROW[OC0BWSB1] == " ") /* cmt deleted*/
      OC0BSD3(); /* delete oc3rec*/
    else
      if (OC0BW02.OC0BWROW[OC0BWSB1] == " ") /* cmt added*/
        OC0BSI3(); /* insert oc3rec*/
        OC0BW02.OC0BWROW[OC0BWSB1] = OC3REC.OC3CTEXT; /* ts*/
        OC0BW02.OC0BWSEQ[OC0BWSB1] = OC3REC.OC3CMNTN; /* ts cmt nbr*/
      else
        OC0BSU3(); /* update oc3rec*/
        OC0BW02.OC0BWROW[OC0BWSB1] = OC3REC.OC3CTEXT; /* ts*/
        OC0BW02.ZZZCHGCT[OC0BWSB1] = OC3REC.ZZZCHGCT; /* ts chg ct*/
      end
    end
  end

end // end OC0BS41

// process transfers
Function OC0BS60()
     /* ****   process next letter, reformat letter,  ******/
    /* *****   release letter, transfer out, or page   *****/


  if (converseVar.eventKey is pf13) /* letter summary*/
    OC0BSTP(); /* purge temp storage*/
    OC0BS80(); /* find next letter*/
         /* if still in statement group, xfer to letter summary*/
    COMMAREA.CAUSERA = OCWREC.OCWGROUP;
    XS0AS13(); /* to letter summary*/
  end


  if (OC0BM001.OC0BMCPG != OC0BW01.OC0BWCPG
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    OC0BS91(); /* process paging*/
  end

  if (converseVar.eventKey is pf9) /* release letter*/
    OC0BS92();
  end

  if (OC0BW01.OC0BWDEL == "D" /* dscrps  deleted*/
   || OC0BW01.OC0BWDEL == "C") /* comments deleted*/
    OCWREC.OCWCPG = OC0BW01.OC0BWCPG; /* save pg number*/
    OC0BSTP(); /* purge temp storage*/
    COMMAREA.CAUSERA = OCWREC.OCWGROUP; /* pass info*/
    XS0AS00(); /* restart oc0b*/
  end

  if (converseVar.eventKey is enter)
    if (OC0BW01.OC0BWCHG == "S" /* discrepancies selected*/
     || OC0BW01.OC0BWCHG == "A") /* all dscrps selected*/
      OC0BS70(); /* process selections*/
    end
  end

end // end OC0BS60

// process selected dscrps
Function OC0BS70()
     /* ****   if dscrps were selected xfer to chg screen   *****/


  OC0BW01.OC0BWSB1 = 1; /* line sub*/

  while (OC0BW01.OC0BWSB1 <= 13) /* nbr of dscps possible*/
    if (OC0BW02.OC0BWTYP[OC0BWSB1] == "2") /* dscrp line 1*/
      if (OC0BM001.OC0BMSEL[OC0BWSB1] == "S"
       || OC0BW01.OC0BWCHG == "A") /* all dscrps selected*/
        if (OC0BW01.OC0BWCHG == "A") /* all dscrps selected*/
          if (OC0BW02.OC0BWOFL[OC0BWSB1] == "N") /* not all styles*/
            if (OC0BW02.OC0BWXDT[OC0BWSB1] == "PO" /* po number*/
             || OC0BW02.OC0BWXDT[OC0BWSB1] == "TD" /* trade discount*/
             || OC0BW02.OC0BWXDT[OC0BWSB1] == "PT" /* payment terms*/
             || OC0BW02.OC0BWXDT[OC0BWSB1] == "DI" /* netted discount*/
             || OC0BW02.OC0BWXDT[OC0BWSB1] == "SA" /* do not ship after*/
             || OC0BW02.OC0BWXDT[OC0BWSB1] == "SB" /* do not ship before*/
             || OC0BW02.OC0BWXDT[OC0BWSB1] == "SP") /* sales program*/
               /* next sentence*/
            else
              OCWREC.OC4DSCPN[OC0BWSB1] = OC0BW02.OC0BWSEQ[OC0BWSB1];
            end
          else
            OCWREC.OC4DSCPN[OC0BWSB1] = OC0BW02.OC0BWSEQ[OC0BWSB1];
          end
        else
          OCWREC.OC4DSCPN[OC0BWSB1] = OC0BW02.OC0BWSEQ[OC0BWSB1];
        end
      end
    end
    OC0BW01.OC0BWSB1 = OC0BW01.OC0BWSB1 + 1;
  end

  OCWREC.OCWCPG = 1; /* init current page for next time*/
  OC0BS03(); /* clear letter array*/

  OC0BSTP(); /* purge temp storage*/

  COMMAREA.CAUSERA = OCWREC.OCWGROUP;
   /* Transfer to Order Information - discrepancy change*/

  COMMAREA.CATOAP = "OC0E";
  XSEXIT();

end // end OC0BS70

// process next letter or pf13
Function OC0BS80()
           /* ****  if more letters were selected on letter*/
                   /* summary screen, process them         *****/
                   /* otherwise, go to letter summary.*/
                   /* mark letter as viewed*/



  OC0BW01.OC0BWSB1 = 1; /* line sub*/

  while (OC0BW01.OC0BWSB1 <= 15) /* nbr of letters possible*/
    if (OCWREC.OCWSELCD[OC0BWSB1] == "S")
      if (OCWREC.OC1LTRNB[OC0BWSB1] == OCWREC.OCWCULTR)
        OCWREC.OCWSELCD[OC0BWSB1] = "V"; /* mark as viewed*/
      else
        OCWREC.OCWCULTR = OCWREC.OC1LTRNB[OC0BWSB1]; /* move current*/
        OCWREC.OCWCPG = 1;
        COMMAREA.CAUSERA = OCWREC.OCWGROUP;
        XS0AS00(); /* restart appl*/
      end
    end
    OC0BW01.OC0BWSB1 = OC0BW01.OC0BWSB1 + 1;
  end

  OCWREC.OCWCULTR = 0; /* init current letter*/

end // end OC0BS80

// process paging
Function OC0BS91()
   /* *****    process paging     ******/


  if (converseVar.eventKey is pf7) /* page back*/
    OC0BM001.OC0BMCPG = OC0BM001.OC0BMCPG - 1;
  else
    if (converseVar.eventKey is pf8) /* page fwrd*/
      OC0BM001.OC0BMCPG = OC0BM001.OC0BMCPG + 1;
    end
  end

  OC0BS12(); /* build detail lines*/

  OC0BS15(); /* set attributes*/

end // end OC0BS91

// release letter
Function OC0BS92()
   /* *****     release letter    ******/

  OC1REC.OC1LTRST = "RL"; /* released letter stat*/
  OC1REC.XXXUSRID = COMMAREA.CAUSERID; /* user id*/
  OC1REC.OC1RLSDT = XX0XW01.XX0XWDAT; /* release date*/

  OC0BSU1(); /* update letter header*/

  if (OCWREC.OCWSYSID == "OB" /* order batch*/
   || OCWREC.OCWSYSID == "PL") /* partial load*/
    converseLib.validationFailed(072); /* 'letter released, but still on Airspeed'*/
  else
    converseLib.validationFailed(071); /* 'letter released'*/
  end


end // end OC0BS92

// IO5860 - close cursor
Function OC0BSC5()
         /* ***   close distribution cursor*/
               /* DORDC.VDISTB01*/


  call "IO5860" ("C1", SQLCA, OC2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "OC0BSF5"; /* stmt group*/
    TA1REC.TA1LOCAT[2] = "IO5860"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "C1"; /* function*/
    TA1REC.TA1LOCAT[4] = " "; /* init to blank*/
    OC0BW01.OC0BWOKY = OC2REC.OP1CUOID; /* Error order number key*/
    OC0BW01.OC0BWPKY = OC2REC.OP1PARTN; /* Error part char key*/
    OC0BW01.OC0BWLKY = OC2REC.OC1LTRNB; /* Error letter key*/
    TA1REC.TA1TBLKE = OC0BW01.OC0BWEKY; /* Formatted error key*/
    TA1REC.TA1DBASE = "DORDC"; /* database name*/
    TA1REC.TA1TBLVU = "VDISTB01"; /* database view name*/
    XS0ASDP(); /* Post and come back*/
  end



end // end OC0BSC5

// OC5150- close cursor
Function OC0BSC6()
         /* ***   close buyer cursor  ****/

  set OCEREC empty;

  OCEREC.OCETASK = "C1";

  call "OC5150" (OCEREC, SQLCA, KBXREC) {isNoRefresh = yes, isExternal = yes};

    /* if the return code is less than 08 - got buyer(s)*/
                                  /* got a reason why there*/
                                  /* isn't one*/
    /* if the return code is 08 - we got a db2 error*/
    /* if the return code is 09 - we got a -911*/
   /* oc5150 has posted all error conditions, and we got what we*/
   /* wanted, so who cares if the cursor close failed.  we'll just*/
   /* keep going here.*/
end // end OC0BSC6

// io1440 - close cursor
Function OC0BSC7()
         /* ***   close distcrepancy cursor  *****/


  OCDREC.OCDTASK = "C1";

  call "IO1440" (OCDREC, SQLCA, OC5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "OC0BSC7"; /* stmt group*/
    TA1REC.TA1LOCAT[2] = "IO1440"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "C1"; /* function*/
    TA1REC.TA1LOCAT[4] = " "; /* init to blank*/
    OC0BW01.OC0BWOKY = OC5REC.OP1CUOID; /* Error order number key*/
    OC0BW01.OC0BWPKY = OC5REC.OP1PARTN; /* Error part char key*/
    OC0BW01.OC0BWLKY = OC5REC.OC1LTRNB; /* Error letter key*/
    TA1REC.TA1TBLKE = OC0BW01.OC0BWEKY; /* Formatted error key*/
    TA1REC.TA1DBASE = "DORDC"; /* database name*/
    TA1REC.TA1TBLVU = "VDSCRP01"; /* database view name*/
    XS0ASDP(); /* Post and come back*/
  end



end // end OC0BSC7

// IO5870 - close cursor
Function OC0BSC8()
         /* ***   close comments cursor  *****/

  set OCFREC empty;

  OCFREC.OCFTASK = "C1";

  call "IO5870" (OCFREC, SQLCA, OC3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "OC0BSC8"; /* stmt group*/
    TA1REC.TA1LOCAT[2] = "IO5870"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "C1"; /* function*/
    TA1REC.TA1LOCAT[4] = " "; /* init to blank*/
    OC0BW01.OC0BWOKY = OC3REC.OP1CUOID; /* Error order number key*/
    OC0BW01.OC0BWPKY = OC3REC.OP1PARTN; /* Error part char key*/
    OC0BW01.OC0BWLKY = OC3REC.OC1LTRNB; /* Error letter key*/
    TA1REC.TA1TBLKE = OC0BW01.OC0BWEKY; /* Formatted error key*/
    TA1REC.TA1DBASE = "DORDC"; /* database name*/
    TA1REC.TA1TBLVU = "VOCCMT01"; /* database view name*/
    XS0ASDP(); /* Post and come back*/
  end



end // end OC0BSC8

// IO5850 - delete letter header
Function OC0BSD1()
           /* **** delete letter header after all dscrps and*/
                 /* comments have gone                *******/


  call "IO5850" ("D ", SQLCA, OC1REC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100) /* already gone*/
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "OC0BSD1"; /* stmt group*/
    TA1REC.TA1LOCAT[2] = "OC5850"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "D "; /* function*/
    TA1REC.TA1LOCAT[4] = " "; /* dscrp nbr*/
    OC0BW01.OC0BWPKY = OC1REC.OP1PARTN; /* part char key*/
    OC0BW01.OC0BWOKY = OC1REC.OP1CUOID; /* order nbr key*/
    OC0BW01.OC0BWLKY = OC1REC.OC1LTRNB; /* letter number*/
    TA1REC.TA1TBLKE = OC0BW01.OC0BWEKY; /* error key*/
    TA1REC.TA1DBASE = "DORDC"; /* database name*/
    TA1REC.TA1TBLVU = "VLETTR01"; /* database view name*/
    OC0BSTP(); /* purge temp storage*/
    if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
      COMMAREA.CAMSG = "DATABASE BUSY - TRY AGAIN LATER";
      XS0ASDL(); /* Post and rollback*/
      COMMAREA.CAUSERA = OCWREC.OCWGROUP; /* init pass area*/
      XS0AS00(); /* restart appl*/
    else
      COMMAREA.CAMSG = "DATA PROBLEM - TRY AGAIN LATER";
      XS0ASDR(); /* Post, rollback, exit*/
    end

  end


end // end OC0BSD1

// OC5870 - delete comments
Function OC0BSD3()
           /* **** delete comments  *****/

  set OC3REC empty;
  set OCFREC empty;

  OC3REC.OP1PARTN = OCWREC.OP1PARTN; /* Part char*/
  OC3REC.OP1CUOID = OCWREC.OP1CUOID; /* Cust order id*/
  OC3REC.OC1LTRNB = OC1REC.OC1LTRNB; /* Letter number*/
  OC3REC.OC3CMNTN = OC0BW02.OC0BWSEQ[OC0BWSB1]; /* comment number*/


  OCFREC.OCFTASK = "D ";

  call "IO5870" (OCFREC, SQLCA, OC3REC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100) /* already gone*/
    COMMAREA.CAMSG = "COMMENTS DELETED "; /* to show on converse*/
  else
    TA1REC.TA1LOCAT[1] = "OC0BSD3"; /* stmt group*/
    TA1REC.TA1LOCAT[2] = "OC5870"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "D "; /* function*/
    TA1REC.TA1LOCAT[4] = " ";
    OC0BW01.OC0BWPKY = OC3REC.OP1PARTN; /* part char key*/
    OC0BW01.OC0BWOKY = OC3REC.OP1CUOID; /* order nbr key*/
    OC0BW01.OC0BWLKY = OC3REC.OC1LTRNB; /* letter number*/
    OC0BW01.OC0BWSKY = OC3REC.OC3CMNTN; /* cmt nbr*/
    TA1REC.TA1TBLKE = OC0BW01.OC0BWEKY; /* error key*/
    TA1REC.TA1DBASE = "DORDC"; /* database name*/
    TA1REC.TA1TBLVU = "VOCCMT01"; /* database view name*/
    OC0BSTP(); /* purge temp storage*/
    if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
      COMMAREA.CAMSG = "DATABASE BUSY - TRY AGAIN LATER";
      XS0ASDL(); /* Post and rollback*/
      COMMAREA.CAUSERA = OCWREC.OCWGROUP; /* init pass area*/
      XS0AS00(); /* restart appl*/
    else
      COMMAREA.CAMSG = "DATA PROBLEM - TRY AGAIN LATER";
      XS0ASDR(); /* Post, rollback, exit*/
    end

  end


end // end OC0BSD3

// IO5880 - delete dscrpancies
Function OC0BSD4()
           /* **** select discrepancies  *****/

  set OC4REC empty;
  set OCDREC empty; /* Dscrp IO mod pass record*/

  OC4REC.OP1PARTN = OCWREC.OP1PARTN; /* Part char*/
  OC4REC.OP1CUOID = OCWREC.OP1CUOID; /* Cust order id*/
  OC4REC.OC1LTRNB = OC1REC.OC1LTRNB; /* Letter number*/
  OC4REC.OC4DSCPN = OC0BW02.OC0BWSEQ[OC0BWSB1]; /* dscrp number*/

  OCDREC.OCDTASK = "D "; /* select set*/

  call "IO5880" (OCDREC, SQLCA, OC4REC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100) /* already gone*/
    COMMAREA.CAMSG = "DISCREPANCIES DELETED";
  else
    TA1REC.TA1LOCAT[1] = "OC0BSD4"; /* stmt group*/
    TA1REC.TA1LOCAT[2] = "OC5880"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "D "; /* function*/
    TA1REC.TA1LOCAT[4] = " ";
    OC0BW01.OC0BWPKY = OC4REC.OP1PARTN; /* part char key*/
    OC0BW01.OC0BWOKY = OC4REC.OP1CUOID; /* order nbr key*/
    OC0BW01.OC0BWLKY = OC4REC.OC1LTRNB; /* letter number*/
    OC0BW01.OC0BWSKY = OC4REC.OC4DSCPN; /* dscrp nbr*/
    TA1REC.TA1TBLKE = OC0BW01.OC0BWEKY; /* error key*/
    TA1REC.TA1DBASE = "DORDC"; /* database name*/
    TA1REC.TA1TBLVU = "VDSCRP01"; /* database view name*/
    OC0BSTP(); /* purge temp storage*/
    if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
      COMMAREA.CAMSG = "DATABASE BUSY - TRY AGAIN LATER";
      XS0ASDL(); /* Post and rollback*/
      COMMAREA.CAUSERA = OCWREC.OCWGROUP; /* init pass area*/
      XS0AS00(); /* restart appl*/
    else
      COMMAREA.CAMSG = "DATA PROBLEM - TRY AGAIN LATER";
      XS0ASDR(); /* Post, rollback, exit*/
    end

  end


end // end OC0BSD4

// call oc5200 format buyer name
Function OC0BSF1()
        /* ****  call oc5200 for formatted buyer name   *****/

  set OCHREC empty; /* initialize ochrec*/

  OCHREC.XXXLSTNM = OCEREC.XXXLSTNM; /* last name*/
  OCHREC.XXXFSTNM = OCEREC.XXXFSTNM; /* first name*/
  OCHREC.XXXMDINT = OCEREC.XXXMDINT; /* middle initial*/
  OCHREC.XXXGNTNM = OCEREC.XXXGNTNM; /* generation name*/

  call "OC5200" (OCHREC) {isNoRefresh = yes, isExternal = yes}; /* get formatted name*/

  OC0BW01.OC0BWSTO = OCHREC.OCH-RSLT-NM; /* move to 'sent to'*/
end // end OC0BSF1

// format buyer asterisk
Function OC0BSF2()
        /* ****  format buyer name for send to field    *****/


  OC0BW01.OC0BWBLK = "N"; /* init blank flag*/
  OC0BW01.OC0BWFFL = "N"; /* init found character flag*/

  OC0BW01.OC0BWSB1 = 40; /* set sub to walkthru nm*/

  while (OC0BW01.OC0BWFFL == "N" /* found character flag*/
   && OC0BW01.OC0BWSB1 > 0)
    if (OC0BW01.OC0BWBNM[OC0BWSB1] == " ") /* keep 1 blank btwn names*/
      OC0BW01.OC0BWSB1 = OC0BW01.OC0BWSB1 - 1;
    else
      OC0BW01.OC0BWFFL = "Y"; /* get out of loop*/
    end
  end

  OC0BW01.OC0BWSB1 = OC0BW01.OC0BWSB1 + 1;
  OC0BW01.OC0BWBNM[OC0BWSB1] = "*";
end // end OC0BSF2

// IO5860 - Fetch distribution
Function OC0BSF5()
         /* ***   Fetch distribution row for sent letter from*/
               /* DORDC.VDISTB01*/


  call "IO5860" ("N1", SQLCA, OC2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100) /* No more distrib rows*/
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "OC0BSF5"; /* stmt group*/
    TA1REC.TA1LOCAT[2] = "IO5860"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "N1"; /* function*/
    TA1REC.TA1LOCAT[4] = " "; /* init to blank*/
    OC0BW01.OC0BWOKY = OC2REC.OP1CUOID; /* Error order number key*/
    OC0BW01.OC0BWPKY = OC2REC.OP1PARTN; /* Error part char key*/
    OC0BW01.OC0BWLKY = OC2REC.OC1LTRNB; /* Error letter key*/
    TA1REC.TA1TBLKE = OC0BW01.OC0BWEKY; /* Formatted error key*/
    TA1REC.TA1DBASE = "DORDC"; /* database name*/
    TA1REC.TA1TBLVU = "VDISTB01"; /* database view name*/
    if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
      XS0ASDP(); /* Post and come back*/
      COMMAREA.CAMSG = "DATABASE BUSY - TRY AGAIN LATER";
      XS0AS03(); /* back to oc menu*/
    else
      COMMAREA.CAMSG = "BAD DB RETURN ON FETCH DISTRIBUTION";
      XS0ASDC(); /* Post and exit*/
    end

    OC0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* transfer failed*/
    OC0BW01.OC0BWERR = "Y"; /* set error flag*/

  end



end // end OC0BSF5

// OC5150 - Fetch buyer
Function OC0BSF6()
             /* *****     Fetch buyer*/

  set OCEREC empty;

  OCEREC.OCETASK = "N1";

  call "OC5150" (OCEREC, SQLCA, KBXREC) {isNoRefresh = yes, isExternal = yes};

    /* if the return code is less than 08 - got buyer(s)*/
                                  /* got a reason why there*/
                                  /* isn't one*/
    /* if the return code is 08 - we got a db2 error*/
    /* if the return code is 09 - we got a -911*/
   /* oc5150 has posted all error conditions*/

  if (OCEREC.OCERTNCD < 08)
   /* next sentence*/
  else
    if (OCEREC.OCERTNCD == 09)
      COMMAREA.CAMSG = "DATABASE BUSY - TRY AGAIN LATER";
      XS0AS03(); /* xfer to oc menu*/
    else
      if (OCEREC.OCERTNCD == 99)
        COMMAREA.CAMSG = "INVALID REQUEST CODE = 99";
        XS0AS03(); /* xfer to oc menu*/
      else
        COMMAREA.CAMSG = "DATA PROBLEM - TRY AGAIN LATER";
        XS0AS03(); /* xfer to oc menu*/
      end
    end

    OC0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* transfer failed*/
    OC0BW01.OC0BWERR = "Y"; /* set error flag*/

  end
end // end OC0BSF6

// io1440 - fetch dscrpancies
Function OC0BSF7()
           /* **** select discrepancies  *****/


  OCDREC.OCDTASK = "N1"; /* select set*/

  call "IO1440" (OCDREC, SQLCA, OC5REC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "OC0BSF7"; /* stmt group*/
    TA1REC.TA1LOCAT[2] = "IO1440"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "N1"; /* function*/
    TA1REC.TA1LOCAT[4] = " ";
    OC0BW01.OC0BWPKY = OC5REC.OP1PARTN; /* part char key*/
    OC0BW01.OC0BWOKY = OC5REC.OP1CUOID; /* order nbr key*/
    OC0BW01.OC0BWLKY = OC5REC.OC1LTRNB; /* letter number*/
    TA1REC.TA1TBLKE = OC0BW01.OC0BWEKY; /* error key*/
    TA1REC.TA1DBASE = "DORDC"; /* database name*/
    TA1REC.TA1TBLVU = "VDSCRP01"; /* database view name*/
    OC0BSTP(); /* purge temp storage*/
    if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
      XS0ASDP(); /* Post and come back*/
      COMMAREA.CAMSG = "DATABASE BUSY - TRY AGAIN LATER";
      XS0AS03(); /* xfer to oc menu*/
    else
      COMMAREA.CAMSG = "DATA PROBLEM - TRY AGAIN LATER";
      XS0ASDC(); /* Post and exit*/
    end

    OC0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* transfer failed*/
    OC0BW01.OC0BWERR = "Y"; /* set error flag*/

  end


end // end OC0BSF7

// IO5870 - fetch comments
Function OC0BSF8()
           /* **** select comments     *****/


  OCFREC.OCFTASK = "N1";

  call "IO5870" (OCFREC, SQLCA, OC3REC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "OC0BSF8"; /* stmt group*/
    TA1REC.TA1LOCAT[2] = "OC5870"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "N1"; /* function*/
    TA1REC.TA1LOCAT[4] = " ";
    OC0BW01.OC0BWPKY = OC3REC.OP1PARTN; /* part char key*/
    OC0BW01.OC0BWOKY = OC3REC.OP1CUOID; /* order nbr key*/
    OC0BW01.OC0BWLKY = OC3REC.OC1LTRNB; /* letter number*/
    TA1REC.TA1TBLKE = OC0BW01.OC0BWEKY; /* error key*/
    TA1REC.TA1DBASE = "DORDC"; /* database name*/
    TA1REC.TA1TBLVU = "VOCCMT01"; /* database view name*/
    OC0BSTP(); /* purge temp storage*/
    if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
      XS0ASDP(); /* Post and come back*/
      COMMAREA.CAMSG = "DATABASE BUSY - TRY AGAIN LATER";
      XS0AS03(); /* xfer to oc menu*/
    else
      COMMAREA.CAMSG = "DATA PROBLEM - TRY AGAIN LATER";
      XS0ASDC(); /* Post and exit*/
    end

    OC0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* transfer failed*/
    OC0BW01.OC0BWERR = "Y"; /* set error flag*/

  end


end // end OC0BSF8

// IO5870 - insert comments
Function OC0BSI3()
           /* **** insert comments  *****/

      /* first find last comment and add 1 to cmt nbr*/

  if (OC0BW01.OC0BWCNB == 0) /* max call not performed yet*/
    OC0BSMC();
  end


      /* ***   max count call brought back highest record  ******/

  OC3REC.OC3CMNTN = OC0BW01.OC0BWCNB + 1; /* COMMENT NUMBER*/
  OC3REC.OC3CORCD = "M"; /* maual origin*/
  OC3REC.XXXUSRID = COMMAREA.CAUSERID; /* user id*/
  OC3REC.OC3CTEXT = OC0BM001.OC0BMROW[OC0BWSB1];

  OC3REC.ZZZSDT = XX0XW01.XX0XWDAT;
  OC3REC.ZZZSTM = XX0XW01.XX0XWTIM;
  OC3REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  OC3REC.ZZZCHGTM = XX0XW01.XX0XWTIM;


  OCFREC.OCFTASK = "A ";

  call "IO5870" (OCFREC, SQLCA, OC3REC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0)
    OC0BW01.OC0BWCNB = OC3REC.OC3CMNTN; /* make ws current*/
    converseLib.validationFailed(084); /* 'comments added '*/
  else
    TA1REC.TA1LOCAT[1] = "OC0BSI3"; /* stmt group*/
    TA1REC.TA1LOCAT[2] = "OC5870"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "A "; /* function*/
    TA1REC.TA1LOCAT[4] = " ";
    OC0BW01.OC0BWPKY = OC3REC.OP1PARTN; /* part char key*/
    OC0BW01.OC0BWOKY = OC3REC.OP1CUOID; /* order nbr key*/
    OC0BW01.OC0BWLKY = OC3REC.OC1LTRNB; /* letter number*/
    TA1REC.TA1TBLKE = OC0BW01.OC0BWEKY; /* error key*/
    TA1REC.TA1DBASE = "DORDC"; /* database name*/
    TA1REC.TA1TBLVU = "VOCCMT01"; /* database view name*/
    OC0BSTP(); /* purge temp storage*/
    if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
      COMMAREA.CAMSG = "DATABASE BUSY - TRY AGAIN LATER";
      XS0ASDL(); /* Post and rollback*/
      COMMAREA.CAUSERA = OCWREC.OCWGROUP; /* init pass area*/
      XS0AS00(); /* restart appl*/
    else
      COMMAREA.CAMSG = "DATA PROBLEM - TRY AGAIN LATER";
      XS0ASDR(); /* Post, rollback, exit*/
    end

  end


end // end OC0BSI3

// IO5870 - read max on comments
Function OC0BSMC()
           /* **** find nbr of last comment added  *****/

  set OC3REC empty;
  set OCFREC empty;

  OC3REC.OP1PARTN = OCWREC.OP1PARTN; /* Part char*/
  OC3REC.OP1CUOID = OCWREC.OP1CUOID; /* Cust order id*/
  OC3REC.OC1LTRNB = OC1REC.OC1LTRNB; /* Letter number*/

  OCFREC.OCFTASK = "SM";

  call "IO5870" (OCFREC, SQLCA, OC3REC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0)
    if (OCFREC.OCFIND >= 0) /* io ok*/
      OC0BW01.OC0BWCNB = OC3REC.OC3CMNTN; /* keep comment nbr*/
    else
      OC3REC.OC3CMNTN = 0; /* init cmnt nbr*/
    end
  else
    TA1REC.TA1LOCAT[1] = "OC0BSMC"; /* stmt group*/
    TA1REC.TA1LOCAT[2] = "OC5870"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "SM"; /* function*/
    TA1REC.TA1LOCAT[4] = " ";
    OC0BW01.OC0BWPKY = OC3REC.OP1PARTN; /* part char key*/
    OC0BW01.OC0BWOKY = OC3REC.OP1CUOID; /* order nbr key*/
    OC0BW01.OC0BWLKY = OC3REC.OC1LTRNB; /* letter number*/
    TA1REC.TA1TBLKE = OC0BW01.OC0BWEKY; /* error key*/
    TA1REC.TA1DBASE = "DORDC"; /* database name*/
    TA1REC.TA1TBLVU = "VOCCMT01"; /* database view name*/
    OC0BSTP(); /* purge temp storage*/
    if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
      COMMAREA.CAMSG = "DATABASE BUSY - TRY AGAIN";
      XS0ASDL(); /* Post and rollback*/
      COMMAREA.CAUSERA = OCWREC.OCWGROUP; /* init pass area*/
      XS0AS00(); /* restart appl*/
    else
      COMMAREA.CAMSG = "DATA PROBLEM - TRY AGAIN LATER";
      XS0ASDR(); /* Post, rollback, exit*/
    end

  end


end // end OC0BSMC

// process pf keys, fastpath out
Function OC0BSPF()


  if (converseVar.eventKey is pf3)
    OC0BSTP(); /* purge temp storage*/
    XS0AS03(); /* back to oc menu*/
  else

    if (converseVar.eventKey is pf4)
      OC0BSTP(); /* purge temp storage*/
      XSPF4(); /* go to main menu*/
    else

      if (converseVar.eventKey is pf5)
        if (OC1REC.OC1LTRST == "IP" /* letter in process*/
         || OC1REC.OC1LTRST == "SN" /* letter sent*/
         || COMMAREA.CACHGFL == "N") /* no user authority to upd*/
          converseLib.validationFailed(002); /* invalid pf key*/
          OC0BW01.OC0BWERR = "Y"; /* set error flag*/
          return;
        else
          OCWREC.OCWCPG = 1; /* set pg number for return*/
          OC0BSTP(); /* purge temp storage*/
          OC0BS03(); /* init letter array*/
          OCWREC.OCWCULTR = 0; /* curr letter*/
          XS0AS05(); /* go to add screen*/
        end
      else

        if (converseVar.eventKey is pf9) /* release letter*/
          if (OC1REC.OC1LTRST == "IP" /* letter in process*/
           || OC1REC.OC1LTRST == "SN" /* letter sent*/
           || COMMAREA.CACHGFL == "N" /* no user authority to upd*/
           || OC0BW01.OC0BWLTR == "N") /* no letters found*/

            converseLib.validationFailed(002); /* invalid pf key*/
            OC0BW01.OC0BWERR = "Y"; /* set error flag*/
          end
          return;
        else

          if (converseVar.eventKey is enter
           || converseVar.eventKey is pf7 /* page back*/
           || converseVar.eventKey is pf8 /* page forward*/
           || converseVar.eventKey is pf13) /* to letter summary*/
            /* next sentence         ;continue with process*/
          else
            converseLib.validationFailed(002); /* invalid pf key*/
            OC0BW01.OC0BWERR = "Y"; /* set error flag*/
          end
          return;
        end
      end
    end
  end

  OC0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* transfer failed*/
  OC0BW01.OC0BWERR = "Y"; /* set error flag*/


end // end OC0BSPF

// call oc0f to load work rec
Function OC0BSR1()
   /* *****      call OC0F to load work record     *******/


  OCWREC.OCWRTNCD = "00"; /* init return code*/

  call "OC0F" (OCWREC) {isNoRefresh = yes}; /* mapless appl to load ocwrec*/

     /* if order number is found, retn code is '01'.*/
     /* if order is not found, shipped, or cancelled, retn*/
       /* code is '02'.  We want to display letter in any case*/

  if (OCWREC.OCWRTNCD == "01" /* all is well*/
   || OCWREC.OCWRTNCD == "02") /* invalid order number, SH, XL*/
    /* next sentence*/
  else
    if (OCWREC.OCWRTNCD == "03") /* -911*/
      COMMAREA.CAMSG = "DATABASE BUSY - TRY AGAIN LATER";
      XS0AS03(); /* xfer to oc menu*/
    else
      if (OCWREC.OCWRTNCD == "05") /* Batch edit is running*/
        COMMAREA.CAMSG = "AIRSPEED BATCH EDIT IS RUNNING, PLEASE TRY LATER"; /* Format the message field*/
        XS0AS03(); /* DXFR to OC0M*/
      else
        COMMAREA.CAMSG = "DATA PROBLEM - PLEASE TRY LATER";
        XS0ASDC(); /* Post and exit*/
      end
    end

    OC0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* transfer failed*/
    OC0BW01.OC0BWERR = "Y"; /* set error flag*/

  end


end // end OC0BSR1

// IO5850 - Select latest letter
Function OC0BSR2()
      /* ***** Select most recent letter     ********/


  set OC1REC empty;
  OC1REC.OP1CUOID = OCWREC.OP1CUOID; /* op-cust-ord-id*/
  OC1REC.OP1PARTN = OCWREC.OP1PARTN; /* op-ord-part-char*/

   /* Call to select latest letter*/

  call "IO5850" ("SA", SQLCA, OC1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OC0BW01.OC0BWLTR = "Y"; /* letters exist flag*/
    OCWREC.OCWCULTR = OC1REC.OC1LTRNB; /* upd curr ltr nbr*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OC0BW01.OC0BWERR = "Y";
      converseLib.validationFailed(048); /* 'no letters found for this order'*/
    else
      TA1REC.TA1LOCAT[1] = "OC0BSR2"; /* stmt group*/
      TA1REC.TA1LOCAT[2] = "IO5850"; /* i/o mod*/
      TA1REC.TA1LOCAT[3] = "SA"; /* function*/
      TA1REC.TA1LOCAT[4] = " "; /* init to blank*/
      TA1REC.TA1TBLKE = OCWREC.OCWCUOID; /* Error order number key*/
      TA1REC.TA1DBASE = "DORDC"; /* database name*/
      TA1REC.TA1TBLVU = "VLETTR01"; /* database view name*/
      if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
        XS0ASDP();
        COMMAREA.CAMSG = "DATABASE BUSY - TRY AGAIN LATER";
        XS0AS03(); /* xfer to oc menu*/
      else /* all other codes - abort*/
        COMMAREA.CAMSG = "DATA PROBLEM - PLEASE TRY LATER";
        XS0ASDC();
      end

      OC0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* transfer failed*/
      OC0BW01.OC0BWERR = "Y"; /* set error flag*/

    end
  end



end // end OC0BSR2

// IO5850 - Select letter header
Function OC0BSR3()
       /* **** Select letter header for this order  *****/


  set OC1REC empty;
  OC1REC.OP1CUOID = OCWREC.OP1CUOID; /* op-cust-ord-id*/
  OC1REC.OP1PARTN = OCWREC.OP1PARTN; /* op-ord-part-char*/
  OC1REC.OC1LTRNB = OCWREC.OCWCULTR; /* oc-ltr-nbr*/

   /* Call to select letter header*/

  call "IO5850" ("S ", SQLCA, OC1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OC0BW01.OC0BWLTR = "Y"; /* letters exist*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OC0BW01.OC0BWERR = "Y";
      converseLib.validationFailed(048); /* 'no letter for this order'*/
    else
      TA1REC.TA1LOCAT[1] = "OC0BS56"; /* stmt group*/
      TA1REC.TA1LOCAT[2] = "IO5850"; /* i/o mod*/
      TA1REC.TA1LOCAT[3] = "S "; /* function*/
      TA1REC.TA1LOCAT[4] = " "; /* init to blank*/
      OC0BW01.OC0BWOKY = OCWREC.OCWCUOID; /* Error order number key*/
      OC0BW01.OC0BWPKY = OCWREC.OP1PARTN; /* Error part char key*/
      OC0BW01.OC0BWLKY = OC1REC.OC1LTRNB; /* Error letter key*/
      TA1REC.TA1TBLKE = OC0BW01.OC0BWEKY; /* Formatted error key*/
      TA1REC.TA1DBASE = "DORDC"; /* database name*/
      TA1REC.TA1TBLVU = "VLETTR01"; /* database view name*/
      if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
        XS0ASDP();
        COMMAREA.CAMSG = "DATABASE BUSY - TRY AGAIN LATER";
        XS0AS03(); /* xfer to oc menu*/
      else /* all other codes - abort*/
        COMMAREA.CAMSG = "DATA PROBLEM - PLEASE TRY LATER";
        XS0ASDC();
      end

      OC0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* transfer failed*/
      OC0BW01.OC0BWERR = "Y"; /* set error flag*/

    end
  end





end // end OC0BSR3

// sum total value and units
Function OC0BSR4()

      /* * this option will total all units and dollars for all*/
      /* * suborders, given a particular op1cuoid.*/


  set OP1REC empty;
  set OMCREC empty;

  OMCREC.OMCFUNCT = "MC"; /* max/count function*/

  OP1REC.OP1CUOID = OCWREC.OP1CUOID; /* order number*/
  OP1REC.OP1PARTN = OCWREC.OP1PARTN; /* part char*/

  call "IO0430" (OMCREC, SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   && OMCREC.OMCCTIND >= 0 /* problem if negative*/
   && OMCREC.OMCTAIND >= 0) /* problem if negative*/
    OCWREC.OCWOVALU = OMCREC.OMCTAMT; /* total value*/
    OCWREC.OCWOTUNT = OMCREC.OMCTQTY; /* total units*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OC0BW01.OC0BWERR = "Y";
      converseLib.validationFailed(081); /* 'enter order number to view letter'*/
    else
      if (OMCREC.OMCCTIND < 0
       || OMCREC.OMCTAIND < 0)
        converseLib.validationFailed(082); /* 'problem calculating order totals'*/
      else
        TA1REC.TA1LOCAT[1] = "OC0BSR4"; /* stmt group*/
        TA1REC.TA1LOCAT[2] = "IO0430"; /* i/o mod*/
        TA1REC.TA1LOCAT[3] = "MC"; /* function*/
        TA1REC.TA1LOCAT[4] = " "; /* init to blank*/
        TA1REC.TA1TBLKE = OCWREC.OCWCUOID; /* Error order number key*/
        TA1REC.TA1DBASE = "DORDER"; /* database name*/
        TA1REC.TA1TBLVU = "VORHDR01"; /* database view name*/
        if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
          XS0ASDP();
          COMMAREA.CAMSG = "DATABASE BUSY - TRY AGAIN LATER";
          XS0AS03(); /* xfer to oc menu*/
        else /* all other codes - abort*/
          COMMAREA.CAMSG = "DATA PROBLEM - PLEASE TRY LATER";
          XS0ASDC();
        end

        OC0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* transfer failed*/
        OC0BW01.OC0BWERR = "Y"; /* set error flag*/

      end
    end
  end





end // end OC0BSR4

// IO5860 - select distribution
Function OC0BSR5()
       /* ***    select distribution rows for sent letter from*/
               /* DORDC.VDISTB01*/

  set OC2REC empty;

  OC2REC.OP1PARTN = OCWREC.OP1PARTN; /* part char*/
  OC2REC.OP1CUOID = OCWREC.OP1CUOID; /* customer ord id*/
  OC2REC.OC1LTRNB = OC1REC.OC1LTRNB; /* current letter nbr*/

  call "IO5860" ("S1", SQLCA, OC2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    OC0BS13(); /* find distribution*/
  else
    TA1REC.TA1LOCAT[1] = "OC0BSR5"; /* stmt group*/
    TA1REC.TA1LOCAT[2] = "IO5860"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "S1"; /* function*/
    TA1REC.TA1LOCAT[4] = " "; /* init to blank*/
    OC0BW01.OC0BWOKY = OC2REC.OP1CUOID; /* Error order number key*/
    OC0BW01.OC0BWPKY = OC2REC.OP1PARTN; /* Error part char key*/
    OC0BW01.OC0BWLKY = OC2REC.OC1LTRNB; /* Error letter key*/
    TA1REC.TA1TBLKE = OC0BW01.OC0BWEKY; /* Formatted error key*/
    TA1REC.TA1DBASE = "DORDC"; /* database name*/
    TA1REC.TA1TBLVU = "VDISTB01"; /* database view name*/
    if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
      XS0ASDP(); /* Post and come back*/
      COMMAREA.CAMSG = "DATABASE BUSY - TRY AGAIN LATER";
      XS0AS03(); /* xfer to oc menu*/
    else
      COMMAREA.CAMSG = "DATA PROBLEM - TRY AGIAN LATER";
      XS0ASDC(); /* Post and exit*/
    end

    OC0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* transfer failed*/
    OC0BW01.OC0BWERR = "Y"; /* set error flag*/

  end


  OC0BSC5(); /* close cursor*/

end // end OC0BSR5

// OC5150 - select buyer
Function OC0BSR6()
           /* **** select buyer ******/

  set KBXREC empty;
  set OCEREC empty;

  KBXREC.KUCCOID = OCWREC.OCWCOID; /* Company id*/
  KBXREC.KUMSTRID = OCWREC.OCWSTRID; /* Store id*/
  KBXREC.XNXCD = OCWREC.OCWXNXCD; /* Dept code*/
  OCEREC.OP1PARTN = OCWREC.OP1PARTN;
  OCEREC.OP1CUOID = OCWREC.OP1CUOID;
  OCEREC.XGPCD = OCWREC.XGPCD;
  OCEREC.XDVCD = OCWREC.XDVCD;
  OCEREC.OCEDATE = XX0XW01.XX0XWDAT; /* Current date*/

  OCEREC.OCETASK = "S1";

  call "OC5150" (OCEREC, SQLCA, KBXREC) {isNoRefresh = yes, isExternal = yes};

    /* if the return code is less than 08 - got a buyer or*/
                                  /* got a reason why there*/
                                  /* isn't one*/
    /* if the return code is 08 - we got a db2 error*/
    /* if the return code is 09 - we got a -911*/
   /* oc5150 has posted all error conditions*/
  if (OCEREC.OCERTNCD < 08)
    OC0BS14(); /* determine buyer(s)*/
  else
    if (OCEREC.OCERTNCD == 09)
      COMMAREA.CAMSG = "DATABASE BUSY - TRY AGAIN LATER";
      XS0AS03(); /* xfer to oc menu*/
    else
      if (OCEREC.OCERTNCD == 99)
        COMMAREA.CAMSG = "INVALID REQUEST CODE = 99";
        XS0AS03(); /* xfer to oc menu*/
      else
        COMMAREA.CAMSG = "DATA PROBLEM - TRY AGAIN LATER";
        XS0AS03(); /* xfer to oc menu*/
      end
    end

    OC0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* transfer failed*/
    OC0BW01.OC0BWERR = "Y"; /* set error flag*/

  end

  if (OCEREC.OCERTNCD == 00
   || OCEREC.OCERTNCD == 03)
    OC0BSC6(); /* close cursor*/
  end
end // end OC0BSR6

// io1440 - select dscrpancies
Function OC0BSR7()
           /* **** select discrepancies  *****/

  set OC5REC empty;
  set OCDREC empty; /* Dscrp IO mod pass record*/

  OC5REC.OP1PARTN = OCWREC.OP1PARTN; /* Part char*/
  OC5REC.OP1CUOID = OCWREC.OP1CUOID; /* Cust order id*/
  OC5REC.OC1LTRNB = OC1REC.OC1LTRNB; /* Letter number*/

  OCDREC.OCDTASK = "S1"; /* select set*/

  call "IO1440" (OCDREC, SQLCA, OC5REC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0)
    OC0BSF7(); /* fetch dscrps*/
  else
    TA1REC.TA1LOCAT[1] = "OC0BSR7"; /* stmt group*/
    TA1REC.TA1LOCAT[2] = "IO1440"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "S1"; /* function*/
    TA1REC.TA1LOCAT[4] = " ";
    OC0BW01.OC0BWPKY = OC5REC.OP1PARTN; /* part char key*/
    OC0BW01.OC0BWOKY = OC5REC.OP1CUOID; /* order nbr key*/
    OC0BW01.OC0BWLKY = OC5REC.OC1LTRNB; /* letter number*/
    TA1REC.TA1TBLKE = OC0BW01.OC0BWEKY; /* error key*/
    TA1REC.TA1DBASE = "DORDC"; /* database name*/
    TA1REC.TA1TBLVU = "VDSCRP01"; /* database view name*/
    OC0BSTP(); /* purge temp storage*/
    if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
      XS0ASDP(); /* Post and come back*/
      COMMAREA.CAMSG = "DATABASE BUSY - TRY AGAIN LATER";
      XS0AS03(); /* xfer to oc menu*/
    else
      COMMAREA.CAMSG = "DATA PROBLEM - TRY AGAIN LATER";
      XS0ASDC(); /* Post and exit*/
    end

    OC0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* transfer failed*/
    OC0BW01.OC0BWERR = "Y"; /* set error flag*/

  end


end // end OC0BSR7

// IO5870 - select comments
Function OC0BSR8()
           /* **** select comments  *****/

  set OC3REC empty;
  set OCFREC empty;

  OC3REC.OP1PARTN = OCWREC.OP1PARTN; /* Part char*/
  OC3REC.OP1CUOID = OCWREC.OP1CUOID; /* Cust order id*/
  OC3REC.OC1LTRNB = OC1REC.OC1LTRNB; /* Letter number*/


  OCFREC.OCFTASK = "S1";

  call "IO5870" (OCFREC, SQLCA, OC3REC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0)
    OC0BSF8(); /* fetch comments*/
  else
    TA1REC.TA1LOCAT[1] = "OC0BSR8"; /* stmt group*/
    TA1REC.TA1LOCAT[2] = "OC5870"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "S1"; /* function*/
    TA1REC.TA1LOCAT[4] = " ";
    OC0BW01.OC0BWPKY = OC3REC.OP1PARTN; /* part char key*/
    OC0BW01.OC0BWOKY = OC3REC.OP1CUOID; /* order nbr key*/
    OC0BW01.OC0BWLKY = OC3REC.OC1LTRNB; /* letter number*/
    TA1REC.TA1TBLKE = OC0BW01.OC0BWEKY; /* error key*/
    TA1REC.TA1DBASE = "DORDC"; /* database name*/
    TA1REC.TA1TBLVU = "VOCCMT01"; /* database view name*/
    OC0BSTP(); /* purge temp storage*/
    if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
      XS0ASDP(); /* Post and come back*/
      COMMAREA.CAMSG = "DATABASE BUSY - TRY AGAIN LATER";
      XS0AS03(); /* xfer to oc menu*/
    else
      COMMAREA.CAMSG = "DATA PROBLEM - TRY AGAIN LATER";
      XS0ASDC(); /* Post and exit*/
    end

    OC0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* transfer failed*/
    OC0BW01.OC0BWERR = "Y"; /* set error flag*/

  end


end // end OC0BSR8

// IO0560 - fetch style name/desc
Function OC0BSR9()
           /* **** select product description  *****/

  set SYCREC empty;

  SYCREC.XGPCD = OCWREC.XGPCD; /* gpc*/
  SYCREC.SY1STNBR = OC5REC.SY1STNBR; /* style*/
  SYCREC.SY2CLRID = OC5REC.SY2CLRID; /* color*/
  SYCREC.XDMCD = OC5REC.XDMCD; /* dimension*/


  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0)
    if (SYCREC.XCLCD1 == "000"
     && SYCREC.XCLCD2 == "000"
     && SYCREC.XCLCD3 == "000"
     && SYCREC.XCLCD4 == "000")
      OC0BW01.OC0BWDES = SYCREC.SY1STYNM; /* move sy-sty-nm*/
      OC0BW01.SY2CLRDS = " "; /* move sy-sty-colr-desc*/
      OC0BW01.OC0BWCLD = " "; /* truncated color desc*/
    else
      OC0BW01.OC0BWDES = SYCREC.SY1STYNM; /* move sy-sty-nm*/
      OC0BW01.SY2CLRDS = SYCREC.SY2CLRDS; /* sy-sty-colr-desc*/
      OC0BW01.OC0BWCLD = OC0BW01.OC0BWCDS; /* truncated color desc*/
    end
  else
    OC0BW01.OC0BWDES = " "; /* prod invaild sy-sty-nm*/
    OC0BW01.SY2CLRDS = " "; /* prod invalid sy-sty-colr-desc*/
    OC0BW01.OC0BWCLD = " "; /* truncated color desc*/
  end


end // end OC0BSR9

// IO5870 - read count on comment
Function OC0BSRC()
           /* **** insert comments  *****/

  set OC3REC empty;
  set OCFREC empty;

  OC3REC.OP1PARTN = OCWREC.OP1PARTN; /* Part char*/
  OC3REC.OP1CUOID = OCWREC.OP1CUOID; /* Cust order id*/
  OC3REC.OC1LTRNB = OC1REC.OC1LTRNB; /* Letter number*/

  OCFREC.OCFTASK = "SC";

  call "IO5870" (OCFREC, SQLCA, OC3REC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "OC0BSRC"; /* stmt group*/
    TA1REC.TA1LOCAT[2] = "OC5870"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "SC"; /* function*/
    TA1REC.TA1LOCAT[4] = " ";
    OC0BW01.OC0BWPKY = OC3REC.OP1PARTN; /* part char key*/
    OC0BW01.OC0BWOKY = OC3REC.OP1CUOID; /* order nbr key*/
    OC0BW01.OC0BWLKY = OC3REC.OC1LTRNB; /* letter number*/
    TA1REC.TA1TBLKE = OC0BW01.OC0BWEKY; /* error key*/
    TA1REC.TA1DBASE = "DORDC"; /* database name*/
    TA1REC.TA1TBLVU = "VOCCMT01"; /* database view name*/
    OC0BSTP(); /* purge temp storage*/
    if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
      COMMAREA.CAMSG = "DATABASE BUSY - TRY AGAIN";
      XS0ASDL(); /* Post and rollback*/
      COMMAREA.CAUSERA = OCWREC.OCWGROUP; /* init pass area*/
      XS0AS00(); /* restart appl*/
    else
      COMMAREA.CAMSG = "DATA PROBLEM - TRY AGAIN LATER";
      XS0ASDR(); /* Post, rollback, exit*/
    end

  end


end // end OC0BSRC

// IO5880 - count dscrpancies
Function OC0BSRD()
           /* **** select discrepancies  *****/

  set OC4REC empty;
  set OCDREC empty; /* Dscrp IO mod pass record*/

  OC4REC.OP1PARTN = OCWREC.OP1PARTN; /* Part char*/
  OC4REC.OP1CUOID = OCWREC.OP1CUOID; /* Cust order id*/
  OC4REC.OC1LTRNB = OC1REC.OC1LTRNB; /* Letter number*/

  OCDREC.OCDTASK = "SC"; /* select set*/

  call "IO5880" (OCDREC, SQLCA, OC4REC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "OC0BSRD"; /* stmt group*/
    TA1REC.TA1LOCAT[2] = "OC5880"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "SC"; /* function*/
    TA1REC.TA1LOCAT[4] = " ";
    OC0BW01.OC0BWPKY = OC4REC.OP1PARTN; /* part char key*/
    OC0BW01.OC0BWOKY = OC4REC.OP1CUOID; /* order nbr key*/
    OC0BW01.OC0BWLKY = OC4REC.OC1LTRNB; /* letter number*/
    TA1REC.TA1TBLKE = OC0BW01.OC0BWEKY; /* error key*/
    TA1REC.TA1DBASE = "DORDC"; /* database name*/
    TA1REC.TA1TBLVU = "VDSCRP01"; /* database view name*/
    OC0BSTP(); /* purge temp storage*/
    if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
      COMMAREA.CAMSG = "DATABASE BUSY - TRY AGAIN LATER";
      XS0ASDL(); /* Post and rollback*/
      COMMAREA.CAUSERA = OCWREC.OCWGROUP; /* init pass area*/
      XS0AS00(); /* restart appl*/
    else
      COMMAREA.CAMSG = "DATA PROBLEM - TRY AGAIN LATER";
      XS0ASDR(); /* Post, rollback, exit*/
    end

  end


end // end OC0BSRD

// check fastpathing
Function OC0BSS1()

  if (COMMAREA.CAFRMSYS == "OC") /* If coming from OC system*/
    /* next sentence*/
  else
    COMMAREA.CAFROMAP = "OC0M"; /* in OC now*/
    set OCWREC empty; /* Initialize system work rec*/
  end

  if (COMMAREA.CAFROMAP == "OC0B") /* in appl*/
    /* next sentence*/
  else
    if (COMMAREA.CAITEM != " ") /* item has been entered*/
      XS0AS02(); /* Check for numeric CAITEM*/
      if (OCWREC.OCWCUOID > 0) /* order number entered and numeric*/
        OC0BSR1(); /* Order number change routine*/
      else
        OC0BW01.OC0BWERR = "Y"; /* set err flag to display map*/
        converseLib.validationFailed(081); /* 'enter order nbr... view letter'*/
      end
    end
  end



end // end OC0BSS1

// purge temp storage
Function OC0BSTP()


      /* ****  this statement group purges a temp storage*/
            /* file and resets the subscripts to 1.*/
            /* This temp storage file represents pages*/
            /* of data for scrolling.*/

   /* purge temporary storage 1*/

  TA5REC.TA5APPID = "OC0B"; /* appl identification*/
  TA5REC.TA5FNCCD = "P"; /* function code*/
  call "TA0050" (OC0BW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "OC0BSTP"; /* statement group*/
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1TBLKE = OC0BW02.OC0BWROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = "TEMP STORAGE PURGE FAILED "; /* info message*/
    TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* subroutine parms*/
    XS0ASNP(); /* post,  no rollback, non db2*/
  end
end // end OC0BSTP

// read temp storage
Function OC0BSTR()



   /* read temporary storage 1*/

  set OC0BW02 empty;

  TA5REC.TA5APPID = "OC0B"; /* appl identification*/
  TA5REC.TA5FNCCD = "R"; /* function code*/
  TA5REC.TA5TSQIX = OC0BW01.OC0BWCPG; /* current page*/
  OC0BW02.OC0BWLEN = 1135; /* length of record*/

  call "TA0050" (OC0BW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "OC0BSTR"; /* statement group*/
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1LOCAT[4] = "  ";
    TA1REC.TA1TBLKE = OC0BW02.OC0BWROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = "TEMP STORAGE READ FAILED "; /* info message*/
    TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* subroutine parms*/
    XS0ASNP(); /* post, no rollback, non db2 diags*/
  end
end // end OC0BSTR

// update temp storage
Function OC0BSTU()



   /* update temporary storage 1*/

  TA5REC.TA5APPID = "OC0B"; /* appl identification*/
  TA5REC.TA5FNCCD = "U"; /* function code*/
  TA5REC.TA5TSQIX = OC0BW01.OC0BWCPG; /* current page*/
  OC0BW02.OC0BWLEN = 1135; /* length of record*/

  call "TA0050" (OC0BW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "OC0BSTU"; /* statement group*/
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1TBLKE = OC0BW02.OC0BWROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = "TEMP STORAGE UPDATE FAILED "; /* info message*/
    TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* subroutine parms*/
    XS0ASNP(); /* post, no rollback, non db2*/
  end
end // end OC0BSTU

// write temp storage
Function OC0BSTW()



   /* write temporary storage 1*/

  TA5REC.TA5APPID = "OC0B"; /* appl identification*/
  TA5REC.TA5FNCCD = "A"; /* function code*/
  OC0BW02.OC0BWLEN = 1135; /* length of record*/

  call "TA0050" (OC0BW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    OC0BW01.OC0BWMPG = TA5REC.TA5TSQIX;
                                   /* max number of rows for rec*/
  else
    TA1REC.TA1LOCAT[1] = "OC0BSTW"; /* statement group*/
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1LOCAT[4] = " "; /**/
    TA1REC.TA1TBLKE = OC0BW02.OC0BWROW[1]; /* first row, first rec*/
    TAEREC.TAEDESC1 = "TEMP STORAGE WRITE FAILED "; /* info message*/
    TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* subroutine parms*/
    XS0ASNP(); /* post, no rollback, non db2*/
  end
end // end OC0BSTW

// IO5850 - update letter header
Function OC0BSU1()
           /* **** update letter header to show released*/

  OC1REC.XXXUSRID = COMMAREA.CAUSERID;

  OC1REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  OC1REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  call "IO5850" ("U ", SQLCA, OC1REC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100) /* already gone*/
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "OC0BSD1"; /* stmt group*/
    TA1REC.TA1LOCAT[2] = "OC5850"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "D "; /* function*/
    TA1REC.TA1LOCAT[4] = " "; /* dscrp nbr*/
    OC0BW01.OC0BWPKY = OC1REC.OP1PARTN; /* part char key*/
    OC0BW01.OC0BWOKY = OC1REC.OP1CUOID; /* order nbr key*/
    OC0BW01.OC0BWLKY = OC1REC.OC1LTRNB; /* letter number*/
    TA1REC.TA1TBLKE = OC0BW01.OC0BWEKY; /* error key*/
    TA1REC.TA1DBASE = "DORDC"; /* database name*/
    TA1REC.TA1TBLVU = "VLETTR01"; /* database view name*/
    OC0BSTP(); /* purge temp storage*/
    if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
      COMMAREA.CAMSG = "DATABASE BUSY - TRY AGAIN LATER";
      XS0ASDL(); /* Post and rollback*/
      COMMAREA.CAUSERA = OCWREC.OCWGROUP; /* init pass area*/
      XS0AS00(); /* restart appl*/
    else
      COMMAREA.CAMSG = "DATA PROBLEM - TRY AGAIN LATER";
      XS0ASDR(); /* Post, rollback, exit*/
    end

  end


end // end OC0BSU1

// IO5870 - update comments
Function OC0BSU3()
           /* **** update comments  *****/


  set OC3REC empty;
  set OCFREC empty;

  OC3REC.OP1PARTN = OCWREC.OP1PARTN; /* Part char*/
  OC3REC.OP1CUOID = OCWREC.OP1CUOID; /* Cust order id*/
  OC3REC.OC1LTRNB = OC1REC.OC1LTRNB; /* Letter number*/
  OC3REC.OC3CMNTN = OC0BW02.OC0BWSEQ[OC0BWSB1]; /* comment number*/

  OCFREC.OCFTASK = "S "; /* select unique*/

  call "IO5870" (OCFREC, SQLCA, OC3REC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0)
            /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "OC0BSU3"; /* stmt group*/
    TA1REC.TA1LOCAT[2] = "OC5870"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "S "; /* function*/
    TA1REC.TA1LOCAT[4] = " ";
    OC0BW01.OC0BWPKY = OC3REC.OP1PARTN; /* part char key*/
    OC0BW01.OC0BWOKY = OC3REC.OP1CUOID; /* order nbr key*/
    OC0BW01.OC0BWLKY = OC3REC.OC1LTRNB; /* letter number*/
    OC0BW01.OC0BWSKY = OC3REC.OC3CMNTN; /* cmt nbr*/
    TA1REC.TA1TBLKE = OC0BW01.OC0BWEKY; /* error key*/
    TA1REC.TA1DBASE = "DORDC"; /* database name*/
    TA1REC.TA1TBLVU = "VOCCMT01"; /* database view name*/
    OC0BSTP(); /* purge temp storage*/
    if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
      COMMAREA.CAMSG = "DATABASE BUSY - TRY AGAIN LATER";
      XS0ASDL(); /* Post and rollback*/
      COMMAREA.CAUSERA = OCWREC.OCWGROUP; /* init pass area*/
      XS0AS00(); /* restart appl*/
    else
      COMMAREA.CAMSG = "DATA PROBLEM - TRY AGAIN LATER";
      XS0ASDR(); /* Post, rollback, exit*/
    end

  end

  OC3REC.XXXUSRID = COMMAREA.CAUSERID; /* user id*/
  OC3REC.OC3CORCD = "M"; /* Format origin*/
  OC3REC.OC3CTEXT = OC0BM001.OC0BMROW[OC0BWSB1];

  OC3REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  OC3REC.ZZZCHGTM = XX0XW01.XX0XWTIM;


  OCFREC.OCFTASK = "U ";

  call "IO5870" (OCFREC, SQLCA, OC3REC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(078); /* 'comments updated'*/
  else
    TA1REC.TA1LOCAT[1] = "OC0BSU3"; /* stmt group*/
    TA1REC.TA1LOCAT[2] = "OC5870"; /* i/o mod*/
    TA1REC.TA1LOCAT[3] = "U "; /* function*/
    TA1REC.TA1LOCAT[4] = " ";
    OC0BW01.OC0BWPKY = OC3REC.OP1PARTN; /* part char key*/
    OC0BW01.OC0BWOKY = OC3REC.OP1CUOID; /* order nbr key*/
    OC0BW01.OC0BWLKY = OC3REC.OC1LTRNB; /* letter number*/
    OC0BW01.OC0BWSKY = OC3REC.OC3CMNTN; /* cmt nbr*/
    TA1REC.TA1TBLKE = OC0BW01.OC0BWEKY; /* error key*/
    TA1REC.TA1DBASE = "DORDC"; /* database name*/
    TA1REC.TA1TBLVU = "VOCCMT01"; /* database view name*/
    OC0BSTP(); /* purge temp storage*/
    if (SQLCA.VAGen_SQLCODE == -911) /* timed out*/
      COMMAREA.CAMSG = "DATABASE BUSY - TRY AGAIN LATER";
      XS0ASDL(); /* Post and rollback*/
      COMMAREA.CAUSERA = OCWREC.OCWGROUP; /* init pass area*/
      XS0AS00(); /* restart appl*/
    else
      COMMAREA.CAMSG = "DATA PROBLEM - TRY AGAIN LATER";
      XS0ASDR(); /* Post, rollback, exit*/
    end

  end


end // end OC0BSU3

//*** RECORD=OC0BW01 ****
// *     working storage record for oc0b
// *
// *                 modifications
// *  ------------------------------------------------------
// *    skott   06/06/91         created
// *    dflesh  10/16/91         added oc0bwffl; chgd length
// *                             of wfnm & wsto to 41; chgd
// *                             occurance of wbnm & wcha to 41
// *    trober  10/31/91         added oc0bwcld (truncated
// *                             sy2clrds)
// *    dcaust  01/13/92         delete wsnd, xxxfstnm,
// *                             xxxlstnm, wfnm, wcha.
// ***********************
Record OC0BW01 type basicRecord
  10 OC0BWERR OC0BWERR ; 
  10 OC0BWSB1 OC0BWSB1 ; 
  10 OC0BWSB2 OC0BWSB2 ; 
  10 OC0BWCHG OC0BWCHG ; 
  10 OC0BWDEL OC0BWDEL ; 
  10 OC0BWBLK OC0BWBLK ; 
  10 OC0BWLTR OC0BWLTR ; 
  10 OC0BWCNB OC0BWCNB ; 
  10 OC0BWCPG OC0BWCPG ; 
  10 OC0BWMPG OC0BWMPG ; 
  10 OC0BWPXD OC0BWPXD ; 
  10 OC0BWPND OC0BWPND ; 
  10 OC0BWRW2 OC0BWRW2 ; 
    15 OC0BWPRD OC0BWPRD ; 
      20 SY1STNBR SY1STNBR ; 
      20 OC0BWFL1 OC0BWFL1 ; 
      20 SY2CLRID SY2CLRID ; 
      20 OC0BWFL2 OC0BWFL2 ; 
      20 XDMCD XDMCD ; 
    15 OC0BWFL3 OC0BWFL3 ; 
    15 OC0BWDES OC0BWDES ; 
    15 OC0BWFL5 OC0BWFL5 ; 
    15 OC0BWWAS OC0BWWAS ; 
    15 OC0BWEXP OC0BWEXP ; 
  10 OC0BWRW3 OC0BWRW3 ; 
    15 OC0BWFL6 OC0BWFL6 ; 
    15 OC0BWKPD OC0BWKPD ; 
    15 OC0BWFL7 OC0BWFL7 ; 
    15 OC0BWCLD OC0BWCLD ; 
    15 OC0BWFL8 OC0BWFL8 ; 
    15 OC0BWIS OC0BWIS ; 
    15 OC0BWACT OC0BWACT ; 
  10 OC0BWSTO OC0BWSTO ; 
    15 OC0BWBNM OC0BWBNM [41] ; 
  10 OC0BWEKY OC0BWEKY ; 
    15 OC0BWOKY OC0BWOKY ; 
    15 OC0BWPKY OC0BWPKY ; 
    15 OC0BWLKY OC0BWLKY ; 
    15 OC0BWSKY OC0BWSKY ; 
  10 OC0BWITM OC0BWITM ; 
    15 OC0BWDGT OC0BWDGT [9] ; 
  10 OC0BWARP OC0BWARP ; 
    15 SM1AGYID SM1AGYID ; 
    15 OC0BWSLH OC0BWSLH ; 
    15 OC0BWREP OC0BWREP ; 
  10 OC0BWFFL OC0BWFFL ; 
  10 SY2CLRDS SY2CLRDS ; 
    15 OC0BWCDS OC0BWCDS ; 
    15 OC0BWFL9 OC0BWFL9 ; 
end // end OC0BW01

//*** RECORD=OC0BW02 ****
// *     Temporary storage record used to hold a page of map
// *     data for Order Confirmation - Display Letter 'OC0B'
// *
// *     Csp record: OC0BW02
// *
// *      file name: OCF1
// *
// *      Data from: DOINFO.VLCMT001
// *                 DOINFO.VDSCRP01
// *                 DCORP.VXDT001
// *                 Data formatted in subprogram OC9999
// *
// *      Loaded in: OC0B
// 
// *   Displayed in: OC0B
// *
// *      system statement groups: XSOCT1P - purge
// *                               XSOCT1A - add/insert
// *                               XSOCT1R - read
// *                               XSOBT1U - update
// *
// *
// *
// ***********************
Record OC0BW02 type basicRecord
  5 OC0BWGRP OC0BWGRP ; 
    10 OC0BWLEN OC0BWLEN ; 
    10 OC0BWLNA OC0BWLNA [13] ; 
      15 OC0BWSEQ OC0BWSEQ ; 
      15 OC0BWTYP OC0BWTYP ; 
      15 OC0BWSEL OC0BWSEL ; 
      15 OC0BWOFL OC0BWOFL ; 
      15 OC0BWXDT OC0BWXDT ; 
      15 OC0BWROW OC0BWROW ; 
      15 ZZZCHGCT ZZZCHGCT ; 
end // end OC0BW02

//*** RECORD=OC5REC ****
// *********** ORDER INFORMATION DISCREPANCY TABLE ************
// *
// * DB2 TABLE:         DORDC.VDSCRP02
// *
// * COPYLIB MEMBER:    DCL00933
// *
// * I/O MOD:           IO1440
// *
// *
// * KEY TO DB2 TABLE:  OP1PARTN
// *                    OP1CUOID
// *                    OC4DSCPN
// *
// * DATE CREATED:      08/06/91
// *
// * DESCRIPTION:       This table contains one row for each
// *                    discrepancy noted for an order.
// *                    This is a view that joins
// *                    DORDC.VDSCRP01 and DCORP.VXDT0001
// *
// * MAINTENANCE LOG:
// *
// *  DATE      INIT    COMMENTS
// * --------  -------  ---------------------------------------
// * 08/06/91  bbake2   INITIAL RECORD CREATION
// **********************
Record OC5REC type basicRecord
  5 OC5GROUP OC5GROUP ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OC1LTRNB OC1LTRNB ; 
    10 OC4DSCPN OC4DSCPN ; 
    10 XDTCD XDTCD ; 
    10 XXXRKNBR XXXRKNBR ; 
    10 OC4STYFL OC4STYFL ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 KUIPRDID KUIPRDID ; 
    10 OC4EXPEC OC4EXPEC ; 
    10 OC4ACTUA OC4ACTUA ; 
    10 OP2CPLNB OP2CPLNB ; 
    10 OP1CUNDT OP1CUNDT ; 
    10 OC4DORCD OC4DORCD ; 
    10 XXXUSRID XXXUSRID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end OC5REC

//  actual value
DataItem OC0BWACT char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted agency and rep
DataItem OC0BWARP char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// blank  flag
DataItem OC0BWBLK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// buyer name ready to move
DataItem OC0BWBNM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sy-sty-colr-desc
DataItem OC0BWCDS char(28)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// change flag
DataItem OC0BWCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_COLR_DESC
DataItem OC0BWCLD char(28)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// oc-ltr-comnt-nbr
DataItem OC0BWCNB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current page
DataItem OC0BWCPG num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// delete flag
DataItem OC0BWDEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_NM
DataItem OC0BWDES char(31)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// check caitem for chars
DataItem OC0BWDGT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem OC0BWEKY char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag
DataItem OC0BWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// expected or actual value
DataItem OC0BWEXP char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// character found flag
DataItem OC0BWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash
DataItem OC0BWFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash
DataItem OC0BWFL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OC0BWFL3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OC0BWFL5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OC0BWFL6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OC0BWFL7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OC0BWFL8 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OC0BWFL9 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// oc0bw02 group
DataItem OC0BWGRP char(1135)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//  'is:'
DataItem OC0BWIS char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// redefine of caitem
DataItem OC0BWITM char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer prod nbr
DataItem OC0BWKPD char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage lgth
DataItem OC0BWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// letter nbr key
DataItem OC0BWLKY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map line array
DataItem OC0BWLNA char(87)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// letters exist flag
DataItem OC0BWLTR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total pages
DataItem OC0BWMPG num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order header only flag
DataItem OC0BWOFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order nbr key
DataItem OC0BWOKY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// part char
DataItem OC0BWPKY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev need date
DataItem OC0BWPND int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style,clr, dm
DataItem OC0BWPRD char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev dscrp typ
DataItem OC0BWPXD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sm-srep-id
DataItem OC0BWREP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map line data
DataItem OC0BWROW char(76)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dscrp map data
DataItem OC0BWRW2 char(76)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dscrp map data
DataItem OC0BWRW3 char(76)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sub 1
DataItem OC0BWSB1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sub 2
DataItem OC0BWSB2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map option select field
DataItem OC0BWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dscrp nbr or dmnt nbr
DataItem OC0BWSEQ num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dscrp or comnt nbr
DataItem OC0BWSKY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// '/'
DataItem OC0BWSLH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sent to form map out
DataItem OC0BWSTO char(41)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map line type
DataItem OC0BWTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'was:'
DataItem OC0BWWAS char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dscrep type code
DataItem OC0BWXDT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// oc5REC group level
DataItem OC5GROUP char(122)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

