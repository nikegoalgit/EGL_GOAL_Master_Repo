package oc0d;
import corpcom2.XX0XW01;
import corpcom3.XS0ASNP;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF4;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpx1.*;
import oc.common.*;
import ta.common.TA1REC;
import ta.common.TAEREC;

//*** PROGRAM=OC0D ****
// APPLICATION OVERVIEW:
// 
//      This application will display all active discrepancy
//      codes and their descriptions.  The user will be allowed
//      to select one of the discrepancy codes on this screen
//      and the code will be passed back to the previous
//      application.
// 
// **********************************************************
//              M A I N T E N A N C E   L O G
// **********************************************************
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 05/14/91   lluck    Created
// 01/06/92   trober   added code to prevent fast path
//                     from applications other than OC0A
//                     or OC0E, (OC0D000, OC0DS-CHECK-FPATH).
// 01/08/92   scantr   Removed use of XS0AS01 for system
//                     security.  Replaced by 1/6 fix. OC0D000
// 01/25/94   gcalki   #1002 - recompile for change to ocwrec.
// *********************
Program OC0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OC00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  OC0DW01 OC0DW01; // record
  OCWREC OCWREC; // record
  TA1REC TA1REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDTTBL {deleteAfterUse = yes}; // table
  use OC0DM.OC0DM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OC0D000: OC0D000();
    goto OC0D010;
    OC0D010: OC0D010();
    goto OC0D010;
  end // end main
end // end OC0D

// Discrepancy code display
Function OC0D000()
     /* Check csp and order information security*/

  XSENTRY();

  OCWREC.OCWGROUP = COMMAREA.CAUSERA; /* get commarea*/

   /* ****************************************************/
   /* *** set segmented trans id                      ****/
   /* ****************************************************/

  CAEZSAP = sysVar.transactionID;
  CAEZSG12 = "OC";
  CAEZSG4 = "D";
  sysVar.transactionID = CAEZSAP;

     /* Initialize application - init records, get zz date/time,*/
                              /* save map name for XS sgrp's*/

  OC0DS-CHECK-FPATH(); /* VALIDATE NOT FASTPATH*/

  OC0DS01();


     /* Display commarea message*/

  OC0DM001.VAGen_EZEMSG = COMMAREA.CAMSG;
  COMMAREA.CAMSG = " ";


     /* Build map from XDTTBL table*/

  OC0DS02();

  if (OC0DW01.OC0DWEFL == "N"
   && OC0DM001.VAGen_EZEMSG == " ")
    converseLib.validationFailed(70); /* select discrepancy and press enter*/
  end

end // end OC0D000

// CONVERSE Oc0dm001
Function OC0D010()
  converseLib.clearScreen();
  
  converseVar.segmentedMode = 1;
  converse OC0DM001 ;
  converseLib.validationFailed(0); /* clear last error msg*/
  OC0DWEFL = "N"; /* clear error flag*/
  OC0DM001.VAGen_EZEMSG = " "; /* clear last commarea msg*/

   /* ----------------------------------------;*/
   /* Process PF keys - May exit application ;*/
   /* processing in this statment group if   ;*/
   /* certain PF keys have been entered      ;*/
   /* ----------------------------------------;*/

  OC0DSPF();

  if (OC0DW01.OC0DWEFL == "N")
    OC0DS04(); /* reset select bytes*/
  end

  if (OC0DW01.OC0DWEFL == "N")
    OC0DS03(); /* edit map*/
  end

  if (OC0DW01.OC0DWEFL == "N")
    if (converseVar.eventKey is enter)
      OCWREC.XDTCD = OC0DW01.XDTCD; /* load selected abrv*/
      COMMAREA.CAUSERA = OCWREC.OCWGROUP;
      COMMAREA.CATOAP = COMMAREA.CAFROMAP;
      XSEXIT();
      OC0DM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    end
  end
end // end OC0D010

// validate not fast path
Function OC0DS-CHECK-FPATH()


   /* prevent user from entering application via fast path*/
   /* application can only be entered via oc0a (discrepancy add) or*/
   /* oc0e (discrepancy update) by entering a question mark in the*/
   /* discrepancy type field and pressing ENTER*/

  if (COMMAREA.CAFROMAP == "OC0A" /* a "?" entered in oc0a*/
   || COMMAREA.CAFROMAP == "OC0E") /* or a "?" entered in oc0e*/
    /* next sentence - valid entry point*/
  else
    COMMAREA.CAMSG = "CAN NOT FAST PATH TO OC0D, DISCREPANCY TYPE SCREEN";
    COMMAREA.CATOAP = "OC0M"; /* go to OC menu*/
    COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
    COMMAREA.CACURRAP = COMMAREA.CATOAP;
    COMMAREA.CATOAP = "  ";
    sysVar.transferName = COMMAREA.CACURRAP;
    transfer to program sysVar.transferName passing COMMAREA;
    XSPF4(); /* transfer failure*/
    exit program;
  end


end // end OC0DS-CHECK-FPATH

// initialize
Function OC0DS01()
       /* ***************************************************/
       /* *  INITIALIZE oc0d APPLICATION.                  **/
       /* ***************************************************/


  set TAEREC empty;
  set TA1REC empty;
  set OC0DM001 empty;
  set XX0XW01 empty;
  set OC0DW01 empty;

  XX0XS01();

  TA1REC.TA1MAP = "OC0DM001"; /* map name*/
  OC0DM001.OPMPRC = "OC0D"; /* map process*/
  OC0DM001.OPMMAP = "M1"; /* map name*/
  OCWREC.OCWGROUP = COMMAREA.CAUSERA;

  OC0DM001.OPMDTE = VGVar.currentShortGregorianDate; /* load current date to map*/

  OC0DW01.OC0DWEFL = "N"; /* set error flag to 'n'*/

end // end OC0DS01

// build discrepancy code map
Function OC0DS02()
       /* ****************************************************/
       /* *                BUILD OC0D MAP**/
       /* *                                                 **/
       /* *  This statement group will read XDTTBL table    **/
       /* *  and move all active discrepancy codes and      **/
       /* *  descriptions to the map.                       **/
       /* *                                                 **/
       /* ****************************************************/

  OC0DW01.OC0DWSUB = 1; /* set map sub to 1*/

  while (OC0DW01.OC0DWSUB <= 30)
    set OC0DM001.OC0DMSEL[OC0DWSUB] skip, invisible;
    OC0DW01.OC0DWSUB = OC0DW01.OC0DWSUB + 1;
  end

  OC0DW01.OC0DWSUB = 0; /* set map sub to zero*/
  OC0DW01.OC0DWTSB = 1; /* set table sub*/

  while (OC0DW01.OC0DWSUB <= 30
   && XDTTBL.XDTCD[OC0DWTSB] != "99")
    if (XDTTBL.XXXSTAT[OC0DWTSB] == "A") /* active discrepancy code*/
      OC0DW01.OC0DWSUB = OC0DW01.OC0DWSUB + 1; /* increment map sub*/
      OC0DM001.XDTCD[OC0DWSUB] = XDTTBL.XDTCD[OC0DWTSB];
      OC0DM001.XDTDESC[OC0DWSUB] = XDTTBL.XDTDESC[OC0DWTSB];
      set OC0DM001.OC0DMSEL[OC0DWSUB] initialAttributes;
    end
    OC0DW01.OC0DWTSB = OC0DW01.OC0DWTSB + 1;
  end

  if (OC0DW01.OC0DWSUB == 0)
    TA1REC.TA1LOCAT[1] = "OC0DS02"; /* transaction*/
    TA1REC.TA1LOCAT[2] = "XDTTBL"; /* table name*/
    TAEREC.TAEDESC1 = "XDTTBL TABLE EMPTY"; /* message*/
    XS0ASNP(); /* post*/
    converseLib.validationFailed(067); /* no active discrepancys to display*/
    OC0DW01.OC0DWEFL = "Y"; /* set error flag to 'y'*/
    return;
  end

  if (OC0DW01.OC0DWSUB == 30)
    if (XDTTBL.XDTCD[OC0DWTSB] != "99") /* not end of table*/
      TA1REC.TA1LOCAT[1] = "OC0DS02"; /* transaction*/
      TA1REC.TA1LOCAT[2] = "XDTTBL"; /* table name*/
      TAEREC.TAEDESC1 = "XDTTBL HAS TO MANY ROWS TO"; /* message*/
      TAEREC.TAEDESC2 = "DISPLAY ON SELECT SCREEN"; /* message*/
      XS0ASNP(); /* post*/
      converseLib.validationFailed(066); /* not all discrepancys codes displayed*/
      OC0DW01.OC0DWEFL = "Y"; /* set error flag to 'y'*/
      return;
    end
  end

  if (OC0DW01.OC0DWSUB > 26)
    TA1REC.TA1LOCAT[1] = "OC0DS02"; /* transaction*/
    TA1REC.TA1LOCAT[2] = "XDTTBL"; /* table name*/
    TAEREC.TAEDESC1 = "XDTTBL HAS ALMOST TO MANY "; /* message*/
    TAEREC.TAEDESC2 = "ROWS TO DISPLAY ON SELECT SCREEN"; /* message*/
    XS0ASNP(); /* post*/
    return;
  end


end // end OC0DS02

// edit map fields
Function OC0DS03()
       /* ****************************************************/
       /* *                Edit OC0D Map.                   **/
       /* *                                                 **/
       /* *  This statement group will check the select byte**/
       /* *  and determine if only one code has been        **/
       /* *  selected.  The selected code will be saved off **/
       /* *  and passed back to the calling application.    **/
       /* *                                                 **/
       /* ****************************************************/
  OC0DW01.OC0DWSUB = 1; /* set map sub to one*/
  OC0DW01.OC0DWSCT = 0; /* set select count to zero*/

  while (OC0DW01.OC0DWSUB <= 30)
    if (OC0DM001.XDTCD[OC0DWSUB] > " ")
      if (OC0DM001.OC0DMSEL[OC0DWSUB] != " ")
        OC0DW01.OC0DWSCT = OC0DW01.OC0DWSCT + 1; /* count codes selected*/
        OC0DW01.XDTCD = OC0DM001.XDTCD[OC0DWSUB]; /* save abrv*/
        set OC0DM001.OC0DMSEL[OC0DWSUB] bold;
      else
        /* next*/
      end
    else
      OC0DW01.OC0DWSUB = 31; /* end loop*/
    end
    OC0DW01.OC0DWSUB = OC0DW01.OC0DWSUB + 1;
  end


  if (OC0DW01.OC0DWSCT > 1) /* set select count to zero*/
    OC0DW01.OC0DWSUB = 1; /* init subscript*/
    OC0DW01.OC0DWEFL = "Y"; /* set error flag*/
    converseLib.validationFailed(46); /* select only one discrepancy*/
    while (OC0DW01.OC0DWSUB <= 30)
      if (OC0DM001.OC0DMSEL[OC0DWSUB] > " ")
        set OC0DM001.OC0DMSEL[OC0DWSUB] cursor;
        OC0DW01.OC0DWSUB = 31;
      else
        OC0DW01.OC0DWSUB = OC0DW01.OC0DWSUB + 1;
      end
    end
  end

end // end OC0DS03

// reset map fields
Function OC0DS04()
       /* ****************************************************/
       /* *              Reset map attributes               **/
       /* *                                                 **/
       /* *  This statement group will set all select bytes **/
       /* *  to defined.                                    **/
       /* *                                                 **/
       /* ****************************************************/

  OC0DW01.OC0DWSUB = 1; /* set map sub to one*/

  while (OC0DW01.OC0DWSUB <= 30)
    if (OC0DM001.XDTCD[OC0DWSUB] > " ")
      set OC0DM001.OC0DMSEL[OC0DWSUB] initialAttributes; /* reset map field*/
    else
      OC0DW01.OC0DWSUB = 31; /* end loop*/
    end
    OC0DW01.OC0DWSUB = OC0DW01.OC0DWSUB + 1;
  end


end // end OC0DS04

// process pf keys
Function OC0DSPF()
       /* ****************************************************/
       /* *  process pf keys.                               **/
       /* ****************************************************/

  if (converseVar.eventKey is enter)
    return;
  end

  converseLib.validationFailed(1); /* invalid key*/
  OC0DW01.OC0DWEFL = "Y"; /* set error flag*/

end // end OC0DSPF

//*** RECORD=OC0DW01 ****
// *
// *    General working storage for OC0C - Letter Summary.
// *    Contains subscripts, flags, counts, and work areas.
// *
// *                   MODIFICATIONS
// ------------------------------------------------------------
// 05/02/91     dlegg    initial creation
// ***********************
Record OC0DW01 type basicRecord
  10 OC0DWSUB OC0DWSUB ; 
  10 OC0DWTSB OC0DWTSB ; 
  10 OC0DWSCT OC0DWSCT ; 
  10 OC0DWEFL OC0DWEFL ; 
  10 XDTCD XDTCD ; 
end // end OC0DW01

// Error flag
DataItem OC0DWEFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Select item count
DataItem OC0DWSCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Subscript for map line
DataItem OC0DWSUB num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Subscript for XDTTBL
DataItem OC0DWTSB num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

