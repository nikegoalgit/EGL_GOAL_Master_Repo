package iv0k;

import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSIVS02;
import corpcom4.XSIVSEN;
import corpcom4.XSIVSFP;
import corpcom4.XSIVXF;
import corpcom4.XSPF1;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XSOTBL;
import iv.common.*;
import ku.common.KUCREC;
import op.common.OP1CUOID;
import op.common.OP1NORID;
import op.common.OP1PARTN;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=IV0K ****
//     Invoice Inquiry     Shipping charge orders list
// 
// Overview: this application displays all wog orders associ-
//           ated with an invoice.
// 
// Date created: 12/22/86
//       Author: P. Gilhousen
// 
// Maintenance history:
// 
//     Date     By whom     Overview of changes made
//   -------- ------------  -----------------------------------
//   12/22/86 P.Gilhousen   Program Creation.
// 
// 
// *********************
Program IV0K type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "IV00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IV0REC IV0REC; // record
  IV6REC IV6REC; // record
  IV8REC IV8REC; // record
  IVAREC IVAREC; // record
  IVFREC IVFREC; // record
  IVGREC IVGREC; // record
  IVXREC IVXREC; // record
  IVYREC IVYREC; // record
  KUCREC KUCREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XSOTBL {deleteAfterUse = yes}; // table
  use IV0KM.IV0KM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    IV0K001: IV0K001();
    goto IV0K005;
    IV0K002: IV0K002();
    goto IV0K005;
    IV0K005: IV0K005();
    ;
       /* if an error, redisplay screen*/
    ;
    if (IVYREC.IVYERR == "Y")
      IVYREC.IVYERR = "N";
      goto IV0K005;
    end
    ;
       /* if scroll, reset display*/
    ;
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      goto IV0K002;
    end
    ;
       /* escape route*/
    ;
    goto IV0K005;
    ;
    ;
  end // end main
end // end IV0K

// Program Initialization
Function IV0K001()
  ;
  ;
     /* **********************************************************/
     /* * this process performs the following functions:        **/
     /* *     - checks entry security                           **/
     /* *     - moves the working storage and invoicing work    **/
     /* *       record from the incoming common area            **/
     /* *     - initializes the map and working fields          **/
     /* *       -- reads invoice header index and company       **/
     /* *          record if came in fastpath                   **/
     /* *       -- reads gl record for ship charges             **/
     /* *       -- reads wog orders records                     **/
     /* **********************************************************/
  ;
  ;
  ;
  XSENTRY(); /* system security check*/
  ;
  ;
  IV0KSPI(); /* initialize program*/
  ;
  ;
  IV0KM001.XXXRVNBR = "1"; /* set map revision number*/
  ;
  ;
  IV0KSDB(); /* read in database records*/
  ;
  ;
  IV0KSMG(); /* display WOG count message*/
  ;
  ;
end // end IV0K001

// Scrolling
Function IV0K002()
  ;
  ;
     /* **********************************************************/
     /* * this process handles scrolling of the WOG order       **/
     /* * screen.   The map is not reinitialized, so that       **/
     /* * reretrieval and setting of header fields is not       **/
     /* * necessary.  WOG records only are found and processed. **/
     /* * Any remaining lines are cleared from previous screen. **/
     /* **********************************************************/
  ;
   /* select set of WOG records, then process*/
  ;
  IV0KSSS(); /* select set*/
  IV0KSSN(); /* read and display WOGs*/
  ;
     /* clear remaining lines*/
  ;
  IV0KSCL();
  ;
  ;
end // end IV0K002

// Converse Map
Function IV0K005()
  ;
  ;
     /* **********************************************************/
     /* * this process presents the ship charge orders screen   **/
     /* * for review, and passes control to the next screen as  **/
     /* * requested                                             **/
     /* **********************************************************/
  ;
  ;
   /* *************************************************************/
  converse IV0KM001 ;
   /* *************************************************************/
  ;
     /* pass immediately if user selected fastpath*/
  ;
  if (IV0KM001.CATOAP != " " /* fastpath selected*/
   || IV0KM001.CAITEM != " ") /* 11-12-87*/
    COMMAREA.CATOAP = IV0KM001.CATOAP; /* set up commarea*/
    COMMAREA.CAITEM = IV0KM001.CAITEM;
    XSIVXF(); /* 11-12-87 edit option/item*/
    if (converseVar.validationMsgNum == 0) /* 11-12-87*/
      XSEXIT(); /* attempt to pass*/
      IV0KM001.XXXMSG = COMMAREA.CAMSG; /* if get here, pass was*/
      set IV0KM001.CATOAP cursor, bold; /* unsuccessful - inform user*/
      set IV0KM001 alarm;
      converseLib.validationFailed(18);
    else
      set IV0KM001.CAITEM cursor, bold; /* 11-12-87*/
    end
    IVYREC.IVYERR = "Y";
    exit stack;
  end
  ;
     /* reset catoap from any prevoius errors*/
  ;
  set IV0KM001.CATOAP initialAttributes;
  set IV0KM001.CAITEM initialAttributes; /* 11-12-87*/
  ;
    /* pass to the next screen based on user input, and the*/
    /* option from the main menu screen.*/
  ;
  if (converseVar.eventKey is enter)
    IV0KSEN();
  else
    if (converseVar.eventKey is pf1)
      XSPF1();
      converseLib.validationFailed(18);
      IVYREC.IVYERR = "Y";
    else
      if (converseVar.eventKey is pf3)
        IV0KS03();
      else
        if (converseVar.eventKey is pf4)
          IV0KS04();
        else
          if (converseVar.eventKey is pf13)
            IV0KS13();
          else
            if (converseVar.eventKey is pf7)
              if (IVYREC.IVYSVSUB == 1)
                converseLib.validationFailed(4);
                IVYREC.IVYERR = "Y";
              else
                IVYREC.IVYSVSUB = IVYREC.IVYSVSUB - 13;
                if (IVYREC.IVYSVSUB < 1)
                  IVYREC.IVYSVSUB = 1;
                end
              end
            else
              if (converseVar.eventKey is pf8)
                if (IVYREC.IVYSUB1 >= IVYREC.IVYSUB2)
                  converseLib.validationFailed(5);
                  IVYREC.IVYERR = "Y";
                else
                  IVYREC.IVYSVSUB = IVYREC.IVYSUB1 + 1;
                end
              else
                IVYREC.IVYERR = "Y";
                converseLib.validationFailed(3);
              end
            end
          end
        end
      end
    end
  end
  ;
  ;
end // end IV0K005

// PF3 Pressed Actions
Function IV0KS03()
  ;
  ;
  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  COMMAREA.CATOAP = "IV0A";
  XSEXIT(); /* transfer to invoicing main menu*/
  converseLib.validationFailed(15); /* transfer failed*/
  IVYREC.IVYERR = "Y"; /* mark as error*/
  ;
  ;
end // end IV0KS03

// PF4 Pressed Actions
Function IV0KS04()
  ;
  ;
  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  COMMAREA.CATOAP = "MN0M";
  XSEXIT(); /* transfer to system menu*/
  converseLib.validationFailed(15); /* transfer failed*/
  IVYREC.IVYERR = "Y"; /* mark as error*/
  ;
  ;
end // end IV0KS04

// PF13 Pressed Actions
Function IV0KS13()
  ;
  ;
  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  COMMAREA.CATOAP = "IV0G";
  XSEXIT(); /* transfer to Header 1*/
  converseLib.validationFailed(15); /* transfer failed*/
  IVYREC.IVYERR = "Y"; /* mark as error*/
  ;
  ;
end // end IV0KS13

// Clear Remaining lines
Function IV0KSCL()
  ;
     /* ***   This statement group is used to clear out any ****/
     /* *** unused lines that may have data in them from the****/
     /* *** last display of this screen                     ****/
  ;
     /* use ivysub - screen index*/
  ;
  while (IVYREC.IVYSUB < 14)
    IV0KM001.IV0KMORD[IVYSUB] = " ";
    IVYREC.IVYSUB = IVYREC.IVYSUB + 1;
  end
  ;
  ;
end // end IV0KSCL

// Data Base Reads
Function IV0KSDB()
  ;
     /* blank areas*/
  ;
  set IVAREC empty;
  set SQLCA empty;
  ;
    /* set up key for read*/
  ;
  IVAREC.IV0IVCID = IVXREC.IV0IVCID;
  IVYREC.IVYIVCN = IVXREC.IV0IVCID;
  IVAREC.IV0PARTN = IVYREC.IV0PARTN;
  ;
   /* read invoice header for shiping invoice 'flag'*/
  ;
  call "IO1040" ("S ", SQLCA, IVAREC) {isNoRefresh = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1PGMNM = "IV0K    ";
    TA1REC.TA1MAP = "IV0KM001";
    TA1REC.TA1DBASE = "DINVC   ";
    TA1REC.TA1TBLVU = "VIVHDR01";
    TA1REC.TA1TBLKE = IVAREC.IV0KEY;
    TA1REC.TA1LOCAT[3] = "IV0KSDB"; /* 10-30-87*/
    TA1REC.TA1LOCAT[4] = "IO1040";
    XSIVS02();
  end
  ;
     /* initialize ivxrec fields while have the record*/
  ;
  IVXREC.OP1CUPO = IVAREC.OP1CUPO;
  IVXREC.SP1ID = IVAREC.SP1ID;
  IVXREC.XOCCD = IVAREC.XOCCD;
  ;
     /* set start position to 1 for new screen*/
     /* then read and display any WOG orders found*/
  ;
  IVYREC.IVYSVSUB = 1;
  if (IVAREC.IVASHPIV == -1)
    IV0KSSS(); /* select wog order set*/
    IV0KSSN(); /* display wog order set*/
  else
    converseLib.validationFailed(38);
  end
  ;
  ;
  IV0KSGL(); /* select gl for ship charges*/
  ;
  ;
end // end IV0KSDB

// Enter Key Pressed Actions
Function IV0KSEN()
  ;
     /* ***   this statement group handles passing control    ****/
     /* ***   to the next screen if the enter key is pressed. ****/
     /* ***   option from main menu screen determines flow.   ****/
  ;
     /* pass ivxrec in userarea for next app to use*/
  ;
  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  ;
     /* pass to next application based on main menu option*/
  ;
  if (IVXREC.IVXOPTN == 2
   || IVXREC.IVXOPTN == 6)
    COMMAREA.CATOAP = "IV0G";
    XSEXIT(); /* transfer to Header 1*/
    converseLib.validationFailed(15); /* transfer failed*/
    IVYREC.IVYERR = "Y"; /* mark as error*/
  else
    if (IVXREC.IVXOPTN == 1
     || IVXREC.IVXOPTN == 3)
      COMMAREA.CATOAP = "IV0N";
      XSEXIT(); /* transfer to Product Summary*/
      converseLib.validationFailed(15); /* transfer failed*/
      IVYREC.IVYERR = "Y"; /* mark as error*/
    else
      if (IVXREC.IVXOPTN == 7)
        COMMAREA.CATOAP = "IV0H";
        XSEXIT(); /* transfer to commissions & payment*/
        converseLib.validationFailed(15); /* transfer failed*/
        IVYREC.IVYERR = "Y"; /* mark as error*/
      else
        if (IVXREC.IVXOPTN == 8)
          COMMAREA.CATOAP = "IV0I";
          XSEXIT(); /* transfer to address*/
          converseLib.validationFailed(15); /* transfer failed*/
          IVYREC.IVYERR = "Y"; /* mark as error*/
        else
          if (IVXREC.IVXOPTN == 9)
            COMMAREA.CATOAP = "IV0J";
            XSEXIT(); /* transfer to messages and inst.*/
            converseLib.validationFailed(15); /* transfer failed*/
            IVYREC.IVYERR = "Y"; /* mark as error*/
          else
            if (IVXREC.IVXOPTN == 4)
              if (IVXREC.IVXTYPFL == "I")
                COMMAREA.CATOAP = "IV0A";
                XSEXIT(); /* transfer to invoice menu*/
                converseLib.validationFailed(15); /* transfer failed*/
                IVYREC.IVYERR = "Y"; /* mark as error*/
              else
                XSIVSEN(); /* determine if more sels, and pass*/
                if (converseVar.validationMsgNum != 0) /* if error return*/
                  IVYREC.IVYERR = "Y"; /* mark as error*/
                end
              end
            end
          end
        end
      end
    end
  end
  ;
  ;
end // end IV0KSEN

// Select Ship Charge GL record
Function IV0KSGL()
  ;
    /* ***  this statement group is used to find the  ****/
    /* ***  ship charge gl record.  This has an xref  ****/
    /* ***  value of 'shp'                            ****/
  ;
   /* blank records*/
  ;
  set IV6REC empty;
  set SQLCA empty;
  ;
   /* set key for read of gl ship charge record*/
  ;
  IV6REC.IV0IVCID = IVAREC.IV0IVCID;
  IV6REC.IV0PARTN = IVAREC.IV0PARTN;
  IV6REC.PFJXREF = "SHP";
  IV6REC.IV6FBTYP = "F";
  IV6REC.OP2LNINB = 0;
  IV6REC.IV6GLSEQ = " ";
  ;
  call "IO1080" ("S ", SQLCA, IV6REC) {isNoRefresh = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    IV0KM001.IV0KMSHP = IV6REC.IV6GLAMT;
  else
    if (SQLCA.VAGen_SQLCODE > 100)
      TA1REC.TA1PGMNM = "IV0K    ";
      TA1REC.TA1MAP = "IV0KM001";
      TA1REC.TA1DBASE = "DINVC   ";
      TA1REC.TA1TBLVU = "VIVGLX01";
      TA1REC.TA1TBLKE = IV6REC.IV6KEY;
      TA1REC.TA1LOCAT[3] = "IV0KSGL"; /* 10-30-87*/
      TA1REC.TA1LOCAT[4] = "IO1080";
      XSIVS02();
    end
  end
  ;
  ;
  ;
end // end IV0KSGL

// Display WOG Count
Function IV0KSMG()
  ;
     /* ***   this statement group formats the display   ****/
     /* *** at screen bottom of number of WOGs for the   ****/
     /* *** invoice.  Uses xxxmsg.                       ****/
  ;
     /* format WOG count display*/
  ;
  IVYREC.IVYNUMB = IVYREC.IVYSUB2; /* move bin to num*/
  IVYREC.IVYNBR = IVYREC.IVYNUMB; /* move num to char*/
  IVYREC.IVYSUB3 = 1; /* set loop index*/
  while (IVYREC.IVYSUB3 < 9) /* change leading 0s to space*/
    if (IVYREC.IVYNBR1[IVYSUB3] == "0") /* leading zero found*/
      IVYREC.IVYNBR1[IVYSUB3] = " "; /* change to space*/
      IVYREC.IVYSUB3 = IVYREC.IVYSUB3 + 1; /* continue loop*/
    else /* non-zero found*/
      IVYREC.IVYSUB3 = 9; /* end loop*/
    end
  end
  ;
  IVYREC.IVYMTXT = "WOG ORDERS FOR THIS INVOICE";
  ;
     /* display in xxxmsg on screen*/
  ;
  IV0KM001.XXXMSG = IVYREC.IVYMSG;
  ;
  ;
end // end IV0KSMG

// Map Initialization
Function IV0KSMI()
  ;
  ;
  converseLib.clearScreen();
  set IV0KM001 initial; /* initializes map*/
  ;
  ;
  IV0KM001.XXXCURDT = VGVar.currentShortGregorianDate;
  IV0KM001.IV0IVCID = IVXREC.IV0IVCID; /* move in invoice number*/
  IV0KM001.KUCCOID = IVXREC.KUCCOID; /* move in company*/
  IV0KM001.KUMSTRID = IVXREC.KUMSTRID; /* move in store*/
  IV0KM001.XNXCD = IVXREC.XNXCD; /* move in dept*/
  IV0KM001.KUCCONM = IVXREC.KUCCONM; /* move in customer name*/
  IV0KM001.IV0IVCDT = IVXREC.IV0IVCDT;
  ;
  ;
  ;
end // end IV0KSMI

// Order Number Formatter
Function IV0KSOF()
  ;
     /* ***   This statement group formats order numbers for ****/
     /* *** display, editting leading zeroes for cust ord,   ****/
     /* *** and putting a separator character between cust   ****/
     /* *** ord and nike ord.                                ****/
  ;
     /* first, edit leading zeroes from order number*/
  ;
  IVYREC.IVYSUB4 = 1;
  ;
  IVYREC.IVYNUMB = IV8REC.OP1CUOID; /* bin to num*/
  IVYREC.IVYNBR = IVYREC.IVYNUMB; /* num to cha*/
  ;
  while (IVYREC.IVYSUB4 < 9) /* loop thru chars of number*/
    if (IVYREC.IVYNBR1[IVYSUB4] == "0") /* substituting leading zeros*/
      IVYREC.IVYNBR1[IVYSUB4] = " "; /* with spaces*/
      IVYREC.IVYSUB4 = IVYREC.IVYSUB4 + 1; /* continue loop*/
    else /* non-zero found*/
      IVYREC.IVYSUB4 = 9; /* end loop*/
    end
  end
  ;
  IVYREC.IVYCORD = IVYREC.IVYNBR; /* move in formatted cust ord*/
  ;
  IVYREC.IVYSEPO = "."; /* move in separator*/
  ;
  IVYREC.IVYNUM4 = IV8REC.OP1NORID; /* move in nike ord*/
  IVYREC.IVYCHA4 = IVYREC.IVYNUM4;
  IVYREC.IVYNORD = IVYREC.IVYCHA2;
  ;
  ;
end // end IV0KSOF

// Program Initialization
Function IV0KSPI()
  ;
     /* ***   This statement group handles initial clearing ****/
     /* *** of working fields for IV0K, and fetch of header ****/
     /* *** index and company records if came in fastpath   ****/
  ;
     /* initialize work record*/
  ;
  set IVYREC empty;
  ;
     /* determine if came in fastpath*/
  ;
  if (COMMAREA.CAITEM != " " /* fastpath entry*/
   || COMMAREA.CAFRMSYS != COMMAREA.CACURSYS) /* from other sys,10-28-87*/
    IVYREC.IVYMTXT = "IV0KSPI"; /* in case of error 1-26-88*/
    XSIVSFP(); /* find header index and company*/
    IVYREC.IVYMTXT = " "; /* 1-26-88*/
    if (IVXREC.IVXMSSNB != 0) /* if had an error on invoice lookup*/
      COMMAREA.CAUSERA = IVXREC.IVXGROUP;
      COMMAREA.CATOAP = "IV0A";
      XSEXIT(); /* pass to menu screen*/
    end
    COMMAREA.CAITEM = " "; /* reset caitem to space*/
  else /* not fastpath*/
    IVXREC.IVXGROUP = COMMAREA.CAUSERA; /* setup up program storage*/
    if (IVXREC.IVXINIT != "IV0") /* If not inited*/
      set IVXREC empty;
      IVXREC.IVXMSSNB = 18; /* must have come fastpath w/o item*/
      IVXREC.IVXINIT = "IV0"; /* set so iv0a will look for message*/
      COMMAREA.CAUSERA = IVXREC.IVXGROUP; /* return to iv0a*/
      COMMAREA.CATOAP = "IV0A";
      XSEXIT();
    end
  end
  ;
  ;
  IV0KSMI(); /* initialize map*/
  ;
  ;
end // end IV0KSPI

// Select Next WOG record
Function IV0KSSN()
  ;
    /* ***  this statement group reads the selected WOG  ****/
    /* ***  records, and sends to be displayed on screen ****/
  ;
    /* blank records*/
  ;
  set IV8REC empty;
  set SQLCA empty;
  ;
    /* set key for select next*/
  ;
  IV8REC.IV8KEY = IVAREC.IV0KEY;
  ;
     /* set indexes*/
  ;
  IVYREC.IVYSUB = 1; /* screen index*/
  IVYREC.IVYSUB1 = 0; /* highest WOG displayed count*/
  IVYREC.IVYSUB2 = 0; /* Total WOGs for invoice count*/
     /* ivyrec.ivysvsub used as start position for scrolling*/
  ;
    /* loop thru Wog records, sending each to screen*/
  ;
  while (SQLCA.VAGen_SQLCODE == 0)
    call "IO1090" ("SN", SQLCA, IV8REC) {isNoRefresh = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      IV0KSSW(); /* display WOG on map*/
    else
      if (SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1PGMNM = "IV0K    ";
        TA1REC.TA1MAP = "IV0KM001";
        TA1REC.TA1DBASE = "DINVC   ";
        TA1REC.TA1TBLVU = "VIVWOG01";
        TA1REC.TA1TBLKE = IV8REC.IV8KEY;
        TA1REC.TA1LOCAT[3] = "IV0KSSN"; /* 10-30-87*/
        TA1REC.TA1LOCAT[4] = "IO1090";
        XSIVS02();
      end
    end
  end
  ;
   /* close database*/
  ;
  call "IO1090" ("CS", SQLCA, IV8REC) {isNoRefresh = yes};
  ;
  ;
end // end IV0KSSN

// Select Set WOG Records
Function IV0KSSS()
  ;
    /* ****  this statement group does the select set   *****/
    /* ****  for the WOG records.                       *****/
  ;
  ;
  set IV8REC empty;
  set SQLCA empty;
  ;
    /* set key for select set*/
  ;
  IV8REC.IV8KEY = IVAREC.IV0KEY;
  ;
  call "IO1090" ("SS", SQLCA, IV8REC) {isNoRefresh = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1PGMNM = "IV0K    ";
    TA1REC.TA1MAP = "IV0KM001";
    TA1REC.TA1DBASE = "DINVC   ";
    TA1REC.TA1TBLVU = "VIVWOG01";
    TA1REC.TA1TBLKE = IV8REC.IV8KEY;
    TA1REC.TA1LOCAT[3] = "IV0KSSS"; /* 10-30-87*/
    TA1REC.TA1LOCAT[4] = "IO1090";
    XSIVS02();
  end
  ;
  ;
end // end IV0KSSS

// Display WOG records
Function IV0KSSW()
  ;
     /* set up index WOG count*/
  ;
  IVYREC.IVYSUB2 = IVYREC.IVYSUB2 + 1;
  ;
  ;
    /* *** display WOG records on screen       ****/
  ;
  if (IVYREC.IVYSUB < 14 /* if screen not yet full, and*/
   && IVYREC.IVYSUB2 >= IVYREC.IVYSVSUB) /* have read past those*/
     /* already displayed*/
    IV0KSOF(); /* format order for display*/
    IV0KM001.IV0KMORD[IVYSUB] = IVYREC.IVYORDW; /* display on screen*/
    IVYREC.IVYSUB = IVYREC.IVYSUB + 1; /* set up screen index*/
    IVYREC.IVYSUB1 = IVYREC.IVYSUB2;
                                   /* set up highest displayed index*/
  end
     /* clear iv8rec before next read*/
  ;
  IV8REC.OP1CUOID = 0;
  IV8REC.OP1NORID = 0;
  ;
  ;
end // end IV0KSSW

//*** RECORD=IV8REC ****
// ******************** Invoice WOG Table  ********************
// 
// DB2 Table:           DINVC.VIVWOG01
// 
// Copylib Member:      DCL00193
// 
// I/O Mod:             IO1090
// 
// Key to DB2 Table:    IV0PARTN
//                      IV0IVCID
// 
// Date Created:        12/01/86
// 
// Maintenance Log:
// 
//   Date    Init.      Comment
// --------  -----      ---------------------------------------
// 12-01-86   PAG       Initial record creation
// 
// **********************
Record IV8REC type basicRecord
  5 IV8GROUP IV8GROUP ; 
    10 IV8KEY IV8KEY ; 
      15 IV0PARTN IV0PARTN ; 
      15 IV0IVCID IV0IVCID ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
end // end IV8REC

// record group level
DataItem IV8GROUP char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// iv8rec key
DataItem IV8KEY char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

