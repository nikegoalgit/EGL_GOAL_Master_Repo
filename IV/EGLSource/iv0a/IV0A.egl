package iv0a;

import corpcom3.XPIV003;
import corpcom3.XPIV005;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSIVSN2;
import corpcom4.XSIVSN4;
import corpcom4.XSIVSN6;
import corpcom4.XSIVXF;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXRVNBR;
import corpx1.XDVTBL;
import corpx1.XGPTBL;
import corpx1.XLCTBL;
import corpx1.XOBTBL;
import corpx1.XOCTBL;
import corpx1.XQATBL;
import corpx1.XSOTBL;
import corpx1.XWHTBL;
import iv.common.*;
import ku.common.KUCREC;
import ku.common.KUJREC;
import ku.common.KULREC;
import ku.common.KUMREC;
import sm.common.SM1REC;
import sm.common.SM4REC;
import sm.common.SM5REC;
import sp.common.SP1REC;
import sy.common.SY2REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=IV0A ****
//     Invoicing Inquiry     Selection Menus
// Overview: This application is the entry point to the invoice
//           inquiry system.  There are three selction maps -
//           the main menu, where top level selections are made
//           and the option set, a customer sub-menu, and a
//           salesman sub-menu.
// Date Created: 12/28/86
//       Author: M. Halstead
// Maintenance History:
//     Date     By Whom     Overview of Changes Made
// -------- ------------  -----------------------------------
// 12/28/86 M.Halstead    Program Creation
// 01/13/86 P.Gilhousen   Completed screens, and made work
//                        with rest of invoicing.
// 05/08/91 l.grossman    allow inquiry be customer id
//                        including department code
// 03/13/92 lgross        store cu-prt-xref-fl from dcust.
//                        vcmpny01 on ivxrec changed iv0a150
//                        will be used in iv0n
// 09/14/92 jhecke        rep name is no longer found on
//                        dslsmn.vragcy01 and now must be
//                        obtained from dslsmn.vreps001.
//                        iv0a300.
// 10/29/92 lgross        removed 90 day restriction when
//                        searching on po in iv0am002
//                        changed:  iv0a250
// 04/01/93  lgross       Changed flow of application.  Will
//                        return to IV0AM002 rather than
//                        IV0AM001 when returning from IV0E.
//                        Will return all values previously
//                        entered on IV0AM002.
//                        changed:  iv0asd3, iv0aw01, iv0a050
//                        iv0a150, iv0a200
// 04/15/93  lgross       corrected iv0a050 to clear ivxrec
//                        when ivxrec.ivxtypfl not = 'c'
//                        (indicating not returning from
//                        customer selection screen)
// 06/17/93lgross        changed application to allow messages
//                       to appear on the screen when returning
//                       from other applications.
//                       Allow the fields in error to be hi-
//                       lighted and shown by cursor.
//                       changed:  iv0a050, iv0a150, iv0a300
// 06/24/93 lgross       added message 66 to indicate when
//                       we need to load value to IV0AM002
//                       from ivxrec in IV0A150.
// 07/08/93  lgross      clear ivxrec when returning to
//                       application from searching on order
//                       in IV0E or IV0D
//                       Changed:  IV0A050
// 07/26/93  lgross      expand search dates to 6 months from
//                       3 months  Changed:  IV0A250
// 08/24/93  lgross      added option 12 for invoice carton
//                       tracking screen. Changed: IV0A100,
//                       IV0AM001
// 11/17/93  lgross      don't clear ivxrec when returning
//                       from order or list request and no
//                       invoices are available.  Changes:
//                       iv0a050
// 04/14/00  rrajag      regenerated for resolving EK0E ASRA
//                       abend.
// *********************
Program IV0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "IV00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IV0AW01 IV0AW01; // record
  IVFREC IVFREC; // record
  IVGREC IVGREC; // record
  IVXREC IVXREC; // record
  IVYREC IVYREC; // record
  IVZREC IVZREC; // record
  KUCREC KUCREC; // record
  KUJREC KUJREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  SM1REC SM1REC; // record
  SM4REC SM4REC; // record
  SM5REC SM5REC; // record
  SP1REC SP1REC; // record
  SQLCA SQLCA; // record
  SY2REC SY2REC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XOBTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XSOTBL {deleteAfterUse = yes}; // table
  use XOCTBL {deleteAfterUse = yes}; // table
  use XLCTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use IV0AM.IV0AM001,  // forms
      IV0AM.IV0AM002, 
      IV0AM.IV0AM003
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    IV0A050: IV0A050();

       /* if an error message, pass to appropriate screen*/

    if (converseVar.validationMsgNum == 35) /* if none found error*/
      if (IVXREC.IVXTYPFL == "C") /* if a cust screen message*/
        goto IV0A150; /* pass to customer screen setup*/
      else
        if (IVXREC.IVXTYPFL == "S") /* if a salesman screen message*/
          goto IV0A300; /* pass to salesman screen setup*/
        end
      end
    end

       /* all other messages, or no message... display main screen*/

    if (IVXREC.IVXTYPFL == "C" /* if a cust screen message*/
     && converseVar.validationMsgNum != 21) /* customer number not found*/
      goto IV0A150; /* pass to customer screen setup*/
    end
    goto IV0A100;


    IV0A100: IV0A100();

       /* if any errors, redisplay screen*/

    if (converseVar.validationMsgNum != 0)
      goto IV0A100;
    end

       /* pass to sub-selection menus if flags set*/

    if (IVXREC.IVXTYPFL == "C") /* customer inq*/
      goto IV0A150;
    else
      if (IVXREC.IVXTYPFL == "S") /* salesman inq*/
        goto IV0A300;
      end
    end

       /* escape route*/

    goto IV0A100;


    IV0A150: IV0A150();

       /* if any messages, return to main menu*/

    if (IVXREC.IVXMSSNB != 0)
      goto IV0A050;
    end

       /* continue - flow to map display*/

    goto IV0A200;


    IV0A200: IV0A200();

       /* if any errors, redisplay screen*/

    if (converseVar.validationMsgNum != 0)
      goto IV0A200;
    end

       /* if pf3 was entered, pass back to begin of app*/

    if (converseVar.eventKey is pf3)
      goto IV0A050;
    end

       /* continue - validate entries*/

    goto IV0A250;


    IV0A250: IV0A250();

       /* if any errors, redisplay screen*/

    if (converseVar.validationMsgNum != 0)
      set IV0AM002 alarm;
      goto IV0A200;
    end

       /* escape route*/

    goto IV0A200;


    IV0A300: IV0A300();

       /* if any errors, redisplay main menu*/

    if (IVXREC.IVXMSSNB != 0)
      goto IV0A050;
    end

       /* flow to converse*/

    goto IV0A350;


    IV0A350: IV0A350();

       /* if any errors, redisplay screen*/

    if (converseVar.validationMsgNum != 0)
      goto IV0A350;
    end

       /* if pf3 entered, pass back to begin of app*/

    if (converseVar.eventKey is pf3)
      goto IV0A050;
    end

       /* continue - validate entries*/

    goto IV0A400;


    IV0A400: IV0A400();

       /* if any errors, redisplay screen*/

    if (converseVar.validationMsgNum != 0)
      set IV0AM003 alarm;
      goto IV0A350;
    end

       /* escape route*/

    goto IV0A350;


  end // end main
end // end IV0A

// program initialization
Function IV0A050()

     /* ***   This process is the entry process into the   ****/
     /* *** Invoice Inquiry system.  Functions performed   ****/
     /* *** are: security checking, and map initialization ****/

     /* check entry security*/
   /* 03-25-93  lgross iv application entered form IV0E, proceed*/
   /* to IV0M002 by clearing message line if there are*/
   /* no error messages.  Otherwise it will print enter*/
   /* optional information for this invoice.*/
   /* Changed flow to go to iv0a150 when ivxtypfl = 'c'*/
   /* and there are no messages indicating a customer*/
   /* number cannot be found.  Will allow user to return*/
   /* from iv0e to iv0am002 rather than iv0am001.*/
   /* 04/15/93 lgross allowed ivxrec to be cleared when ivxrec.ivxtypfl not*/
   /* = 'c' indicating returning from iv0e without customer*/
   /* number search (will return to iv0am001 rather than*/
   /* IV0AM002)*/
   /* 06/17/93  lgross allowed messages from other applications to be*/
   /* displayed and the fields hilighted.  Removed code that*/
   /* ws reinitializing the field in ivxrec.  Added code*/
   /* code to provide for the hilighted of iv0ivcid, op1cuoid*/
   /* and op1norid*/
   /* 07/08/93  lgross clear ivxrec when ivxrec.vixtypfl = 'l' or 'o'*/
   /* indicating screen returning from iv0e(searching on order)*/
   /* or iv0d (searching for sub order)*/
   /* 10/06/93  lgross  don't clear ivxrec when returning from 'l' or 'o'*/
   /* ***********************************************************************/
  XSENTRY(); /* check security*/

     /* if first time entry to program, clean out ivxrec,*/
     /* otherwise, use values from causera*/

  IVXREC.IVXGROUP = COMMAREA.CAUSERA;
  XPIV003(); /* purge 'ivg'  temp storage*/
  XPIV005(); /* purge 'iv0d' temp storage*/
   /* /*/
  if (IVXREC.IVXINIT != "IV0") /* if ivxrec not yet inited*/
    set IVXREC empty; /* clear ivxrec*/
    IVXREC.IVXINIT = "IV0"; /* and init*/
  else /* if coming back thru*/
    if (COMMAREA.CAFROMAP != "IV0E" /* not from customer screen*/
     && IVXREC.IVXMSSNB == 0)       /* check for passed messages*/
      IVYREC.IVYSVSUB = IVXREC.IVXOPTN; /* if none, save option*/
      set IVXREC empty; /* clear ivxrec*/
      IVXREC.IVXINIT = "IV0"; /* init storage*/
      IVXREC.IVXOPTN = IVYREC.IVYSVSUB; /* and reinstate option*/
    end
    if (IVXREC.IVXTYPFL == "L" /* if coming from order listing(iv0e)*/
     || IVXREC.IVXTYPFL == "O") /* if coming from order selection*/
      if (IVXREC.IVXMSSNB == 0)
        IVYREC.IVYSVSUB = IVXREC.IVXOPTN; /* if none, save option*/
        set IVXREC empty; /* clear ivxrec*/
        IVXREC.IVXINIT = "IV0"; /* init storage*/
        IVXREC.IVXOPTN = IVYREC.IVYSVSUB; /* and reinstate option*/
      end
    end
  end

     /* initialize work records*/

  set IV0AW01 empty;
  set IVYREC empty;
  set SQLCA empty;
  set TA1REC empty;
  set TA2REC empty;

     /* initialize all three screens*/
     /* (screen 1 is not cleared if delivering error from a later*/
      /* process in this app, because have cursor set)*/

  if (IVXREC.IVXMSSNB == 0) /* if have a message to display*/
    converseLib.clearScreen();
    set IV0AM001 initial; /* clear screen 1*/
  end

  if (IVXREC.IVXMSSNB == 35) /* if no invoice found*/
    set IV0AM001.IV0IVCID cursor, bold; /* hilight invoice fields*/
  end

  if (IVXREC.IVXMSSNB == 66) /* no invoices for this order #*/
    set IV0AM001.OP1CUOID cursor, bold; /* hilight fields*/
    set IV0AM001.OP1NORID bold;
  end
  converseLib.clearScreen();
  set IV0AM002 initial;
  converseLib.clearScreen();
  set IV0AM003 initial;
  if (COMMAREA.CAFROMAP == "IV0E") /* if coming from iv0e, display*/
    if (IVXREC.IVXMSSNB == 0) /* if there are no error messages*/
      IV0AM002.XXXMSG = " "; /* clear hard coded statement*/
    end
  end

     /* move in initial values*/

  IV0AM001.XXXCURDT = VGVar.currentShortGregorianDate;
  IV0AM002.XXXCURDT = VGVar.currentShortGregorianDate;
  IV0AM003.XXXCURDT = VGVar.currentShortGregorianDate;
  IV0AW01.XXXRVNBR = "01";
  IV0AM001.XXXRVNBR = IV0AW01.XXXRVNBR; /* program revision number*/
  IV0AM002.XXXRVNBR = IV0AW01.XXXRVNBR; /* program revision number*/
  IV0AM003.XXXRVNBR = IV0AW01.XXXRVNBR; /* program revision number*/

     /* set default option.  Set to 1 if first time thru*/

  if (IVXREC.IVXOPTN > 0
   && IVXREC.IVXOPTN < 10)
    IV0AM001.IV0AMOPT = IVXREC.IVXOPTN;
  else
    IV0AM001.IV0AMOPT = 1;
  end

     /* if a passed message, clear ivxrec values, and set screen*/

  if (IVXREC.IVXMSSNB != 0) /* check for passed messages*/
    if (IVXREC.IVXMSSNB == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(IVXREC.IVXMSSNB);
    end
    IVXREC.IVXMSSNB = 0; /* reset message number*/
    IV0ASCX(); /* clear ivxrec selection fields*/
    IV0ASD1(); /* display remaining*/
  end


end // end IV0A050

Function IV0A100()

     /* ***   This process converses the main selection menu ****/
     /* *** screen for the Invoice Inquiry system            ****/

  converse IV0AM001 ;

     /* reset all fields to normal from any previous errors*/
     /* 07/08/92  lgross allow for option 11 to invoice comment*/
     /* 08/24/93  lgross allow for option 12 to carton tracking*/
   /* screen*/
  set IV0AM001.IV0IVCID initialAttributes;
  set IV0AM001.KUCCOID initialAttributes;
  set IV0AM001.IV0AMSTR initialAttributes;
  set IV0AM001.XNXCD initialAttributes;
  set IV0AM001.OP1CUOID initialAttributes;
  set IV0AM001.OP1NORID initialAttributes;
  set IV0AM001.SM1AGYID initialAttributes;
  set IV0AM001.SM4REPID initialAttributes;
  set IV0AM001.IV0JCPB initialAttributes;
  set IV0AM001.KU0JCPSD initialAttributes;
  set IV0AM001.IV0AMOPT initialAttributes;
  set IV0AM001.CATOAP initialAttributes;
  set IV0AM001.CAITEM initialAttributes; /* 11-12-87*/
  IV0AM001.XXXMSG = " ";

     /* check first for fastpath entry*/
     /* if a transfer w/i invoice inquiry, must have item field*/

   /* *************************************************************/
   /* ***** The following code added by Grant Gilray 6/12/87 ******/
   /* ***** if the 'item' field on the screen is blank.....  ******/
   /* ***** move spaces to the item field in the commarea.   ******/
   /* *************************************************************/
  if (IV0AM001.CAITEM == " ") /* if item field on screen blank*/
    COMMAREA.CAITEM = " "; /* blank out commarea field*/
  end
   /* *************************************************************/

  if (IV0AM001.CATOAP != "    " /* requesting transfer*/
   || IV0AM001.CAITEM != " ")   /* or have item 11-12-87*/
    COMMAREA.CATOAP = IV0AM001.CATOAP;
    COMMAREA.CAITEM = IV0AM001.CAITEM;
    XSIVXF(); /* xfer within ivc inq requires item 11-12-87*/
    if (converseVar.validationMsgNum == 0) /* 11-12-87*/
      XSEXIT(); /* try and get there*/
      IV0AM001.XXXMSG = COMMAREA.CAMSG; /* failed, move in msg*/
      set IV0AM001.CATOAP cursor, bold;
      set IV0AM001 alarm; /* and set bell*/
      converseLib.validationFailed(18); /* to trigger flow*/
    else
      set IV0AM001.CAITEM cursor, bold; /* 11-12-87*/
    end
  else
       /* check user entry - if come back from this, there*/
       /* is an error, or user hit enter or PF3*/
    IV0AS01(); /* check pf keys*/
  end

     /* if a transfer failure, set xxxmsg*/
     /* other errors, go to ezeflo*/

  if (converseVar.validationMsgNum != 0) /* if error from pfkey check*/
    if (converseVar.validationMsgNum == 18) /* transfer failed*/
      IV0AM001.XXXMSG = COMMAREA.CAMSG;
      set IV0AM001 alarm;
    end
    exit stack; /* ; pass to flow for all errors*/
  end

     /* send to iv0m if pf3*/

  if (converseVar.eventKey is pf3)
    IV0AS03();
  end

     /* check option field for valid values*/

  if (IV0AM001.IV0AMOPT < 1  /* check option code for*/
   || IV0AM001.IV0AMOPT > 12 /* valid range*/
   || IV0AM001.IV0AMOPT == 5) /* no opt 5*/
    converseLib.validationFailed(2); /* invalid action*/
    set IV0AM001.IV0AMOPT cursor, bold;
    exit stack;
  else
    IVXREC.IVXOPTN = IV0AM001.IV0AMOPT;
  end

     /* now check to see what fields were entered so we*/
     /* can figure out where we need to go next.*/

     /* if an invoice # entered, can go directly to screen*/
     /* specified by option*/

  if (IV0AM001.IV0IVCID != 0) /* inquire by invoice*/
    IVXREC.IV0IVCID = IV0AM001.IV0IVCID;
    IVXREC.IVXTYPFL = "I"; /* set type flag to individual*/
    COMMAREA.CAUSERA = IVXREC.IVXGROUP;
    if (IV0AM001.IV0AMOPT == 1
     || IV0AM001.IV0AMOPT == 2
     || IV0AM001.IV0AMOPT == 6)
      COMMAREA.CATOAP = "IV0G"; /* move in program*/
      IV0AS05(); /* try and get there*/
      exit stack; /* failed, to flow*/
    end
    if (IV0AM001.IV0AMOPT == 3
     || IV0AM001.IV0AMOPT == 4)
      COMMAREA.CATOAP = "IV0N";
      IV0AS05(); /* try and get there*/
      exit stack; /* failed, to flow*/
    end
    if (IV0AM001.IV0AMOPT == 7)
      COMMAREA.CATOAP = "IV0H";
      IV0AS05(); /* try it*/
      exit stack; /* failed, to flow*/
    end
    if (IV0AM001.IV0AMOPT == 8)
      COMMAREA.CATOAP = "IV0I";
      IV0AS05(); /* try it*/
      exit stack; /* failed, to flow*/
    end
    if (IV0AM001.IV0AMOPT == 9)
      COMMAREA.CATOAP = "IV0J";
      IV0AS05(); /* try it*/
      exit stack; /* failed*/
    end
    if (IV0AM001.IV0AMOPT == 10) /* if order comment screen requested*/
      COMMAREA.CATOAP = "IV0C";
      IV0AS05();
      exit stack;
    end
    if (IV0AM001.IV0AMOPT == 11) /* if invoice comment screen requested*/
      COMMAREA.CATOAP = "IV0U";
      IV0AS05();
      exit stack;
    end
    if (IV0AM001.IV0AMOPT == 12) /* if carton tracking report requested*/
      COMMAREA.CATOAP = "IV0V";
      IV0AS05();
      exit stack;
    end
  end

     /* if customer data entered, go to subselection screen*/
     /* (iv0a150)*/

  if (IV0AM001.KUCCOID != 0) /* customer number inq*/
    IVXREC.IVXKUCCO = IV0AM001.KUCCOID;
    if (IV0AM001.IV0AMSTR == " ") /* if no store entered*/
      IVXREC.IVXKUMST = -1; /* pass as -1*/
    else
      IVYREC.IVYIVCN = IV0AM001.IV0AMSTR; /* move to a numeric*/
      IVXREC.IVXKUMST = IVYREC.IVYIVCN;
    end
    IVXREC.IVXXNXCD = IV0AM001.XNXCD;
    IV0AW01.IV0AWPFL = "C"; /* to control flow*/
    IVXREC.IVXTYPFL = "C"; /* set type flag to customer*/
    COMMAREA.CAUSERA = IVXREC.IVXGROUP; /* save off values*/
    exit stack; /* and to flow*/
  end

     /* if cust and nike order #s entered, pass to list screen*/
     /* if just cust order entered, pass to sub-order screen*/

  if (IV0AM001.OP1CUOID != 0) /* order number inq*/
    IVXREC.IVXOP1CO = IV0AM001.OP1CUOID;
    if (IV0AM001.OP1NORID != 0)
      IVXREC.IVXOP1NO = IV0AM001.OP1NORID;
      IVXREC.IVXTYPFL = "L"; /* set type flag to list*/
      COMMAREA.CAUSERA = IVXREC.IVXGROUP;
      COMMAREA.CATOAP = "IV0E";
      IV0AS05();
      exit stack;
    else /* no nike ord*/
      IVXREC.IVXOP1NO = 0;
      IVXREC.IVXTYPFL = "O"; /* set type flag to sub-order*/
      COMMAREA.CAUSERA = IVXREC.IVXGROUP;
      COMMAREA.CAFROMAP = "IV0A";
      COMMAREA.CACURRAP = "IV0D";
      transfer to transaction "IV0D" passing COMMAREA;
    end
  end

     /* if agency and rep entered, pass to salesman submenu*/

  if (IV0AM001.SM1AGYID != " ") /* agency/rep. inq*/
    if (IV0AM001.SM4REPID == 0) /* if rep not entered*/
      converseLib.validationFailed(46); /* error*/
      set IV0AM001.SM4REPID cursor, bold;
      exit stack;
    end
    IVXREC.IVXSM1AG = IV0AM001.SM1AGYID;
    IVXREC.IVXSM4RP = IV0AM001.SM4REPID;
    IV0AW01.IV0AWPFL = "S"; /* for flow control*/
    IVXREC.IVXTYPFL = "S"; /* set type flag to salesman*/
    COMMAREA.CAUSERA = IVXREC.IVXGROUP; /* save off values*/
    exit stack;
  end

     /* if a jcpenny batch search, pass to list screen*/

  if (IV0AM001.IV0JCPB != 0) /* jc penny batch inq*/
    IVXREC.IV0JCPB = IV0AM001.IV0JCPB;
    IVXREC.KU0JCPSD = IV0AM001.KU0JCPSD;
    IVXREC.IVXTYPFL = "J"; /* set type flag to list*/
    COMMAREA.CAUSERA = IVXREC.IVXGROUP;
    COMMAREA.CATOAP = "IV0E";
    IV0AS05();
    exit stack;
  end

   /* if we get this far, the user has not entered any*/
   /* inquiry info, so tell them about it.*/

  converseLib.validationFailed(2); /* invalid action*/
  IV0AM001.XXXMSG = "PLEASE ENTER DATA FOR INQUIRY";

end // end IV0A100

// validate customer & store data
Function IV0A150()
     /* ***   This process handles setting up the customer ****/
     /* *** selection screen.  Lookup for company, store,  ****/
     /* *** and display address.  Department is not yet    ****/
     /* *** really used, so validation at this point is    ****/
     /* *** that if entered, it must be '00'               ****/

   /* 03-25-91 bcourt Hold KUCSKIND for use in IV0NSDC.*/

     /* first set values in case of DB2 error*/

   /* 08/12/91 lgross move kucgrpid to kukgrpid when kucskind = 'r'*/
   /* 03/13/92 lgross move cu-prt-xref-fl to ivxrec.  This will*/
   /* be used in iv0n to check whether to get customer id*/
   /* or use nike product id.*/
   /* 03/25/93  lgross call iv0asd3 which will load values from*/
   /* ivxrec to map*/
   /* 06/17/93  lgross clear page when displaying error message 21*/
   /* in order to avoid picking up unwanted fields from*/
   /* previous display*/
   /* 06/24/93  lgross added message 65 to indicate needed to be*/
   /* from ivxrec to iv0am002*/
   /* 11-9-93    lgross changed kulrec.xxxaddr1,2,3 to kulrec.*/
   /* xxx-addr1,2,3*/
   /* *******************************************************************/
  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1FUNC = "ABND";
  TA1REC.TA1PGMNM = "IV0A";
  TA1REC.TA1LOC = "IV0A150";
  TA1REC.TA1MAP = "IV0AM001";

     /* lookup company record*/

  KUCREC.KUCCOID = IVXREC.IVXKUCCO;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes};
  if (SQLCA.VAGen_SQLCODE == 100) /* company not on file*/
    IVXREC.IVXMSSNB = 21; /* set message nbr*/
    COMMAREA.CAUSERA = IVXREC.IVXGROUP;
    converseLib.clearScreen();
    set IV0AM001 initial; /* clear page*/
    IV0AM001.KUCCOID = IVXREC.IVXKUCCO; /* /replace map value*/
    set IV0AM001.KUCCOID cursor, bold; /* set map 1 field*/
    exit stack; /* flow will send to top of app*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* data base error*/
      TA1REC.TA1DBASE = "DCUST";
      TA1REC.TA1TBLVU = "VCMPNY01";
      TA1REC.TA1LOCAT[4] = "IO0240"; /* 10-30-87*/
      TA1REC.TA1PGMNM = "IV0A"; /* 10-30-87*/
      TA1REC.TA1LOCAT[3] = "IV0A150"; /* 10-30-87*/
      TA1REC.TA1MAP = "IV0AM002"; /* 10-30-87*/
      IVYREC.IVYNUMB = IVXREC.IVXKUCCO; /* 10-30-87*/
      TA1REC.TA1TBLKE = IVYREC.IVYNUMB; /* 10-30-87*/
      call "TA0020" (TA1REC, SQLCA);
    end
  end

     /* now check for valid store id.  Make sure to distinguish*/
     /* between a store of 0, and no store*/
     /* (also set address id here - use ship group if a store*/
     /* entered, or use company address)*/

  if (IVXREC.IVXKUMST != -1) /* store id was entered*/
    KUMREC.KUMSTRID = IVXREC.IVXKUMST;
    KUMREC.KUCCOID = IVXREC.IVXKUCCO;
    call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes};
    if (SQLCA.VAGen_SQLCODE == 100) /* store not on file*/
      IVXREC.IVXMSSNB = 21;
      COMMAREA.CAUSERA = IVXREC.IVXGROUP;
      set IV0AM001.IV0AMSTR cursor, bold;
      exit stack;
    else
      if (SQLCA.VAGen_SQLCODE != 0) /* data base error*/
        TA1REC.TA1DBASE = "DCUST";
        TA1REC.TA1TBLVU = "VSTORE01";
        TA1REC.TA1LOCAT[4] = "IO0340"; /* 10-30-87*/
        TA1REC.TA1PGMNM = "IV0A"; /* 10-30-87*/
        TA1REC.TA1LOCAT[3] = "IV0A150"; /* 10-30-87*/
        TA1REC.TA1MAP = "IV0AM002"; /* 10-30-87*/
        TA1REC.TA1TBLKE = KUMREC.KUMGRP; /* 10-30-87*/
        call "TA0020" (TA1REC, SQLCA);
      else
        KULREC.KULAAID = KUMREC.KUMSHAID;
      end
    end
  else
    KULREC.KULAAID = KUCREC.KUCCOAID;
  end

     /* 'validate' department code*/

  if (IV0AM001.XNXCD > 0)
    KUJREC.KUCCOID = IVXREC.IVXKUCCO;
    KUJREC.XNXCD = IVXREC.IVXXNXCD;
    call "IO0290" ("S ", SQLCA, KUJREC) {isNoRefresh = yes};
    if (SQLCA.VAGen_SQLCODE == 100) /* dept id not on file*/
      IVXREC.IVXMSSNB = 21;
      COMMAREA.CAUSERA = IVXREC.IVXGROUP;
      set IV0AM001.XNXCD cursor, bold;
      exit stack;
    else
      if (SQLCA.VAGen_SQLCODE != 0) /* data base error*/
        TA1REC.TA1DBASE = "DDEPT";
        TA1REC.TA1TBLVU = "VSTORE01";
        TA1REC.TA1LOCAT[4] = "IO0290"; /* 10-30-87*/
        TA1REC.TA1PGMNM = "IV0A"; /* 10-30-87*/
        TA1REC.TA1LOCAT[3] = "IV0A150"; /* 10-30-87*/
        TA1REC.TA1MAP = "IV0AM002"; /* 10-30-87*/
             /* MOVE KUDREC.KUCCOID TO TA1REC.TA1TBLKE; 10-30-87*/
        call "TA0020" (TA1REC, SQLCA);
      end
    end
  else
    IVXREC.IVXXNXCD = 0;
  end

     /* lookup company or shipto address record*/

  KULREC.KUCCOID = IVXREC.IVXKUCCO;
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes};
  if (SQLCA.VAGen_SQLCODE != 0) /* data base error (may be not found)*/
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VADDR001";
    TA1REC.TA1LOCAT[4] = "IO0170"; /* 10-30-87*/
    TA1REC.TA1PGMNM = "IV0A"; /* 10-30-87*/
    TA1REC.TA1LOCAT[3] = "IV0A150"; /* 10-30-87*/
    TA1REC.TA1MAP = "IV0AM002"; /* 10-30-87*/
    IVYREC.IVYNUMB = IVXREC.IVXKUCCO; /* 10-30-87*/
    TA1REC.TA1TBLKE = IVYREC.IVYNUMB; /* 10-30-87*/
    call "TA0020" (TA1REC, SQLCA);
  end

     /* move fields to screen*/

  IV0AM002.KUCCOID = IVXREC.IVXKUCCO;
  if (IVXREC.IVXKUMST == -1)
    IV0AM002.IV0AMSTR = " ";
    IV0AM002.KUCCONM = KUCREC.KUCCONM;
  else
    IVYREC.IVYNUM4 = IVXREC.IVXKUMST;
    IV0AM002.IV0AMSTR = IVYREC.IVYNUM4;
    IV0AM002.KUCCONM = KUMREC.KUMSTRNM;
  end
  IV0AM002.XNXCD = IVXREC.IVXXNXCD;
  IV0AM002.XXXADDR1 = KULREC.XXX-ADDR1;
  IV0AM002.XXXADDR2 = KULREC.XXX-ADDR2;
  IV0AM002.XXXADDR3 = KULREC.XXX-ADDR3;
  IV0AM002.XXXCITY = KULREC.XXXCITY;
  IV0AM002.XSTCD = KULREC.XSTCD;
  IV0AM002.XXXZIP = KULREC.XXXZIP;

     /* move company name to ivxrec*/

  IVXREC.KUCCONM = KUCREC.KUCCONM;
  IVXREC.KUCSKIND = KUCREC.KUCSKIND; /* 3-27-91 add*/
  IVXREC.CU-PRT-XREF-FL = KUCREC.CU-PRT-XREF-FL; /* used in iv0nsdc*/
  if (KUCREC.KUCSKIND == "P")
    IVXREC.KUKPCOID = KUCREC.KUKPCOID; /* 3-27-91 used in iv0nsdc*/
  end
  if (KUCREC.KUCSKIND == "R")
    IVXREC.KUCGRPID = KUCREC.KUCGRPID; /* 8-12-91 used in iv0nsdc*/
  end
     /* get rest of values from ivxrec if no errors found*/
  if (converseVar.validationMsgNum == 0)
    IV0ASD3();
  end

     /* if have none found message, set values from ivxrec*/

  if (converseVar.validationMsgNum == 35
   || converseVar.validationMsgNum == 66)
    IV0ASD2();
  end


end // end IV0A150

Function IV0A200()

     /* ***   This process displays the Customer Sub-      ****/
     /* *** Selection menu, validates entry keys, and then ****/
     /* *** passes to next process (iv0*/
     /* *** entries.                                       ****/
   /* 032693 lgross move 'i' to ivxrec.ivxtypfl when pf3   ****/
   /* is pressed to return to top of         ****/
   /* application                            ****/

  converse IV0AM002 ;

     /* reset screen from any previous errors*/

  set IV0AM002.IV0AMIDL initialAttributes;
  set IV0AM002.IV0AMIDH initialAttributes;
  set IV0AM002.IV0AMPO initialAttributes;
  set IV0AM002.IV0AMOB1 initialAttributes;
  set IV0AM002.IV0AMOB2 initialAttributes;
  set IV0AM002.XGPCD initialAttributes;
  set IV0AM002.XDVCD initialAttributes;
  set IV0AM002.SM1AGYID initialAttributes;
  set IV0AM002.SM4REPID initialAttributes;
  set IV0AM002.XSOCD initialAttributes;
  set IV0AM002.IV0AMNDL initialAttributes;
  set IV0AM002.IV0AMNDH initialAttributes;
  set IV0AM002.IV0AMDL initialAttributes;
  set IV0AM002.IV0AMDH initialAttributes;
  set IV0AM002.XWHCD initialAttributes;
  set IV0AM002.SP1ID initialAttributes;
  set IV0AM002.XOCCD initialAttributes;
  set IV0AM002.SY1STNBR initialAttributes;
  set IV0AM002.SY2CLRID initialAttributes;
  set IV0AM002.XDMCD initialAttributes;
  set IV0AM002.XGPCD2 initialAttributes;
  set IV0AM002.XLCCD initialAttributes;
  set IV0AM002.XQACD initialAttributes;
  set IV0AM002.CATOAP initialAttributes;
  set IV0AM002.CAITEM initialAttributes; /* 11-12-87*/
  IV0AM002.XXXMSG = " ";

   /* *************************************************************/
   /* ***** The following code added by Grant Gilray 6/12/87 ******/
   /* ***** if the 'item' field on the screen is blank.....  ******/
   /* ***** move blanks to the 'item' field on commarea.     ******/
   /* *************************************************************/
  if (IV0AM002.CAITEM == " ") /* if 'item' field is blank*/
    COMMAREA.CAITEM = " "; /* blank out commarea field*/
  end /* end of "if" statement*/
   /* *************************************************************/

     /* check for fastpath entry*/
     /* transfer w/i invoice inquiry requires item field*/

  if (IV0AM002.CATOAP != " " /* requesting transfer*/
   || IV0AM002.CAITEM != " ") /* 11-12-87*/
    COMMAREA.CATOAP = IV0AM002.CATOAP;
    COMMAREA.CAITEM = IV0AM002.CAITEM;
    XSIVXF(); /* edit option/item 11-12-87*/
    if (converseVar.validationMsgNum == 0) /* 11-12-87*/
      XSEXIT(); /* try and get there*/
      IV0AM002.XXXMSG = COMMAREA.CAMSG; /* failed, move in msg*/
      set IV0AM002.CATOAP cursor, bold;
      set IV0AM002 alarm;
      converseLib.validationFailed(18);
    else
      set IV0AM002.CAITEM cursor, bold; /* 11-12-87*/
    end
  else
       /* check pf key entry.  Come back from here if have a*/
       /* passing error, or if enter of pf3 were pressed*/
    IV0AS01(); /* check pf keys*/
  end

     /* pass to ezeflo if have an error*/

  if (converseVar.validationMsgNum != 0)
    if (converseVar.validationMsgNum == 18) /* transfer failed*/
      IV0AM002.XXXMSG = COMMAREA.CAMSG;
      set IV0AM002 alarm;
    end
    exit stack;
  end

     /* be sure causera gets reset with latest values before*/
     /* pass back to top of application*/
     /* move 'i' to type flag will tell application to go*/
     /* to iv0am001 rather than iv0am002*/

  if (converseVar.eventKey is pf3)
    COMMAREA.CAUSERA = IVXREC.IVXGROUP;
    IVXREC.IVXTYPFL = "I";
    COMMAREA.CAFROMAP = "IV0A";
  end


end // end IV0A200

// validate data from iv0am002
Function IV0A250()

     /* ***   This process goes thru all data entered on the ****/
     /* *** customer sub-selection screen and validates.     ****/
     /* *** Also, sets up ivxrec values for next screen.     ****/
     /* *** Fields are validated in reverse order, so that   ****/
     /* *** first field with an error will have cursor.  If  ****/
     /* *** no errors are found, control is passed to IV0E.  ****/

     /* Validate product data*/

     /* validate quality code*/
     /* lgross 10-29-92  remove 90 day restriction when searching*/
     /* on po*/
     /* lgross 07-27-93  expand 90 day restriction to 180 days*/
   /* 11/09/93 lgross changed kulrec.xxxaddr1,2,3 to kulrec.*/
   /* xxx-addr1,2,3*/

  if (IV0AM002.XQACD != "  ")
    if (IV0AM002.XQACD in XQATBL.XQACD)
      IVXREC.XQACD = IV0AM002.XQACD;
    else
      converseLib.validationFailed(28);
      set IV0AM002.XQACD cursor, bold;
    end
  else
    IVXREC.XQACD = " ";
  end

     /* validate life cycle*/

  if (IV0AM002.XLCCD != "  ")
    if (IV0AM002.XLCCD in XLCTBL.XLCCD)
      IVXREC.XLCCD = IV0AM002.XLCCD;
    else
      converseLib.validationFailed(27);
      set IV0AM002.XLCCD cursor, bold;
    end
  else
    IVXREC.XLCCD = " ";
  end

     /* validate gpc*/

  if (IV0AM002.XGPCD2 != "  ") /* if gpccd2 not spaces*/
    if (IV0AM002.XGPCD2 in XGPTBL.XGPCD) /* if gpccd2 in gpc table*/
      IVXREC.IVXXGPCD = IV0AM002.XGPCD2; /* move gpccd2 to work gpc1*/
      IVXREC.XGPCD = IV0AM002.XGPCD2; /* move gpccd2 to work gpc2*/
    else /* else*/
      converseLib.validationFailed(23); /* move error message*/
      set IV0AM002.XGPCD2 cursor, bold; /* set cursor*/
    end /* end*/
  else /* else*/
    IVXREC.IVXXGPCD = " "; /* move spaces to work gpc1*/
    IVXREC.XGPCD = " "; /* move spaces to work gpc2*/
  end /* end*/

     /* validate style.  Use select set on color table.  GPC*/
     /* is required for any style search.*/

  if (IV0AM002.SY1STNBR != " ")
    if (IV0AM002.XGPCD2 == " ")
      if (IV0AM002.XGPCD == " ")
        converseLib.validationFailed(44);
        set IV0AM002.XGPCD2 cursor, bold;
      else
        IV0AM002.XGPCD2 = IV0AM002.XGPCD;
        IVXREC.XGPCD = IV0AM002.XGPCD;
        IVXREC.IVXXGPCD = IV0AM002.XGPCD;
      end
    end
  end
  if (IV0AM002.SY1STNBR != " ")
    if (converseVar.validationMsgNum == 0)
      IVXREC.SY1STNBR = IV0AM002.SY1STNBR; /* set fo0 stmt group use*/
      IV0AS35(); /* this validates with color too if entered*/
      if (IV0AWNOF == "Y") /* could not find record*/
        converseLib.validationFailed(31);
        set IV0AM002.SY1STNBR cursor, bold;
        set IV0AM002.XGPCD2 bold;
      else
        IVXREC.SY1STNBR = IV0AM002.SY1STNBR;
        IVXREC.SY2CLRID = IV0AM002.SY2CLRID;
        IVXREC.XDMCD = IV0AM002.XDMCD;
      end
    end
  else
    IVXREC.SY1STNBR = " ";
  end
  if (IV0AM002.SY2CLRID == " ")
    IVXREC.SY2CLRID = " ";
  end
  if (IV0AM002.XDMCD == " ")
    IVXREC.XDMCD = " ";
  end

     /* Validate order class*/

  if (IV0AM002.XOCCD != "  ")
    if (IV0AM002.XOCCD in XOCTBL.XOCCD)
      IVXREC.IVXXOCCD = IV0AM002.XOCCD;
    else
      converseLib.validationFailed(26); /* invalid*/
      set IV0AM002.XOCCD cursor, bold;
    end
  else
    IVXREC.IVXXOCCD = " ";
  end

     /* Validate sales program*/

  if (IV0AM002.SP1ID != "    ")
    SP1REC.SP1ID = IV0AM002.SP1ID;
    IV0AS15(); /* try and find record*/
    if (SQLCA.VAGen_SQLCODE == 100) /* not found, tell user*/
      converseLib.validationFailed(30); /* invalid sales program*/
      set IV0AM002.SP1ID cursor, bold;
    else
      IVXREC.IVXSP1ID = IV0AM002.SP1ID;
    end
  else
    IVXREC.IVXSP1ID = " ";
  end

   /* Validate ship from warehouse*/

  if (IV0AM002.XWHCD != "  ")
    if (IV0AM002.XWHCD in XWHTBL.XWHCD)
      IVXREC.XWHCD = IV0AM002.XWHCD;
    else
      converseLib.validationFailed(29);
      set IV0AM002.XWHCD cursor, bold;
    end
  else
    IVXREC.XWHCD = "  ";
  end

     /* Validate invoice dollar amt range*/

  if (IV0AM002.IV0AMDL != 0)
    IVXREC.IVAIVAMT = IV0AM002.IV0AMDL;
  else
    IVXREC.IVAIVAMT = 0;
  end
  if (IV0AM002.IV0AMDH != 0)
    if (IV0AM002.IV0AMDH >= IV0AM002.IV0AMDL)
      IVXREC.IVXIVAMT = IV0AM002.IV0AMDH;
    else
      converseLib.validationFailed(37);
      set IV0AM002.IV0AMDH cursor, bold;
    end
  else
    IVXREC.IVXIVAMT = 0;
  end

     /* Validate need date range.  Use routine TA0020*/

     /* validate high date first*/

  if (IV0AM002.IV0AMNDH != 0)
    IV0AW01.IV0AWDTE = IV0AM002.IV0AMNDH;
    IV0AS10(); /* validate date*/
    if (TA2REC.TA2RTNCD == 0)
      IVXREC.IVXCUNDT = TA2REC.TA2GRGGN;
    else
      converseLib.validationFailed(22);
      set IV0AM002.IV0AMNDH cursor, bold;
    end
  else
    IVXREC.IVXCUNDT = 0;
  end

     /* validate low date*/

  if (IV0AM002.IV0AMNDL != 0)
    IV0AW01.IV0AWDTE = IV0AM002.IV0AMNDL;
    IV0AS10(); /* validate routine*/
    if (TA2REC.TA2RTNCD == 0) /* date ok*/
      IVXREC.OP1CUNDT = TA2REC.TA2GRGGN;
    else
      converseLib.validationFailed(22);
      set IV0AM002.IV0AMNDL cursor, bold;
    end
  else
    IVXREC.OP1CUNDT = 0;
  end

     /* then validate that range is from lo to high*/

  if (IVXREC.OP1CUNDT != 0
   && IVXREC.IVXCUNDT != 0)
    if (IVXREC.IVXCUNDT < IVXREC.OP1CUNDT)
      converseLib.validationFailed(37);
      set IV0AM002.IV0AMNDL cursor, bold;
      set IV0AM002.IV0AMNDH bold;
    end
  end


     /* Validate sales office*/

  if (IV0AM002.XSOCD != "  ")
    if (IV0AM002.XSOCD in XSOTBL.XSOCD)
      IVXREC.IVXXSOCD = IV0AM002.XSOCD;
    else
      converseLib.validationFailed(25);
      set IV0AM002.XSOCD cursor, bold;
    end
  else
    IVXREC.IVXXSOCD = " ";
  end

     /* Validate agency/rep*/
     /* validate the combination if both entered, or individual*/
     /* fields if only one or the other entered*/

  IVXREC.IVXSM1AG = " ";
  IVXREC.IVXSM4RP = 0;
  if (IV0AM002.SM1AGYID != "    "
   && IV0AM002.SM4REPID != 0)
    SM5REC.SM1AGYID = IV0AM002.SM1AGYID;
    SM5REC.SM4REPID = IV0AM002.SM4REPID;
    XSIVSN2();
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(34); /* invalid rep/agency*/
      set IV0AM002.SM4REPID bold;
      set IV0AM002.SM1AGYID cursor, bold;
    else
      IVXREC.IVXSM1AG = IV0AM002.SM1AGYID;
      IVXREC.IVXSM4RP = IV0AM002.SM4REPID;
    end
  else
    if (IV0AM002.SM1AGYID != "    ")
      SM1REC.SM1AGYID = IV0AM002.SM1AGYID;
      IV0AS20();
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(32); /* invalid agency*/
        set IV0AM002.SM1AGYID cursor, bold;
      else
        IVXREC.IVXSM1AG = IV0AM002.SM1AGYID;
      end
    else
      if (IV0AM002.SM4REPID != 0)
        SM4REC.SM4REPID = IV0AM002.SM4REPID;
        IV0AS25();
        if (SQLCA.VAGen_SQLCODE == 100)
          converseLib.validationFailed(33); /* invalid rep.*/
          set IV0AM002.SM4REPID cursor, bold;
        else
          IVXREC.IVXSM4RP = IV0AM002.SM4REPID;
        end
      end
    end
  end

     /* Validate gpc*/

  if (IV0AM002.XGPCD != "  ")
    if (IV0AM002.XGPCD in XGPTBL.XGPCD)
      IVXREC.IVXXGPCD = IV0AM002.XGPCD;
    else
      converseLib.validationFailed(23);
      set IV0AM002.XGPCD cursor, bold;
    end
  else
     /* IF IV0AM002.XGPCD2 EQ ' ';*/
       /* MOVE ' ' TO IVXREC.IVXXGPCD;*/
     /* END ;*/
  end

     /* validate that if both gpcs were entered, they are equal*/

  if (IV0AM002.XGPCD != "  "
   && IV0AM002.XGPCD2 != "  ")
    if (IV0AM002.XGPCD != IV0AM002.XGPCD2)
      converseLib.validationFailed(42);
      set IV0AM002.XGPCD cursor, bold;
      set IV0AM002.XGPCD2 bold;
    end
  end


     /* Validate divison code*/

  if (IV0AM002.XDVCD != "  ") /* if xdvcd entered on screen*/
    if (IV0AM002.XDVCD in XDVTBL.XDVCD) /* if xdvcd found in xdvtbl*/
      IVXREC.XDVCD = IV0AM002.XDVCD; /* move xdvcd to work record*/
    else /* else*/
      converseLib.validationFailed(54); /* error*/
      set IV0AM002.XDVCD cursor, bold; /* set field attributes*/
    end /* end*/
  else /* else*/
    IVXREC.XDVCD = " "; /* move spaces to work record*/
  end /* end*/
     /* Validate order type*/

  if (IV0AM002.IV0AMOB2 != "  ")
    if (IV0AM002.IV0AMOB2 in XOBTBL.XOBCD)
      IVXREC.XOBCD2 = IV0AM002.IV0AMOB2;
    else
      converseLib.validationFailed(53);
      set IV0AM002.IV0AMOB2 cursor, bold;
    end
  else
    IVXREC.XOBCD2 = " ";
  end

  if (IV0AM002.IV0AMOB1 != "  ")
    if (IV0AM002.IV0AMOB1 in XOBTBL.XOBCD)
      IVXREC.XOBCD1 = IV0AM002.IV0AMOB1;
    else
      converseLib.validationFailed(53);
      set IV0AM002.IV0AMOB1 cursor, bold;
    end
  else
    IVXREC.XOBCD1 = " ";
  end

     /* Move in customer po (no validation)*/

  if (IV0AM002.IV0AMPO != " ")
    IVXREC.IVXOP1CP = IV0AM002.IV0AMPO;
  else
    IVXREC.IVXOP1CP = " ";
  end

     /* Validate invoice dates*/

     /* first validate high date*/

  if (IV0AM002.IV0AMIDH != 0)
    IV0AW01.IV0AWDTE = IV0AM002.IV0AMIDH;
    IV0AS10(); /* validate date*/
    if (TA2REC.TA2RTNCD == 0)
      IVXREC.IVXIVCDH = TA2REC.TA2GRGGN;
    else
      converseLib.validationFailed(22);
      set IV0AM002.IV0AMIDH cursor, bold;
    end
  else
    IVXREC.IVXIVCDH = 0;
  end

     /* then validate low date*/

  if (IV0AM002.IV0AMIDL != 0)
    IV0AW01.IV0AWDTE = IV0AM002.IV0AMIDL;
    IV0AS10(); /* validate routine*/
    if (TA2REC.TA2RTNCD == 0) /* date ok*/
      IVXREC.IVXIVCDL = TA2REC.TA2GRGGN;
    else
      converseLib.validationFailed(22);
      set IV0AM002.IV0AMIDL cursor, bold;
    end
  else
    if (IV0AMPO != " ")
      IVXREC.IVXIVCDL = 0;
    else
      converseLib.validationFailed(47); /* no invoice date entered - error*/
      set IV0AM002.IV0AMIDL cursor, bold;
      IVXREC.IVXIVCDL = 0;
    end
  end

     /* then check that range is correct*/

  if (IVXREC.IVXIVCDH != 0
   && IVXREC.IVXIVCDL != 0)
    if (IVXREC.IVXIVCDH < IVXREC.IVXIVCDL)
      converseLib.validationFailed(37);
      set IV0AM002.IV0AMIDL cursor, bold;
      set IV0AM002.IV0AMIDH bold;
    end
  end


   /* ********** Code Added By Grant Gilray 7/8/87 ***********/
  if (converseVar.validationMsgNum == 0 /* if no previous errors*/
   && IVXREC.IVXIVCDH > 0               /* and second date entered*/
   && IV0AM002.IV0AMPO == " ")          /* and no po entered*/

    IV0AS26(); /* call ta0040 from fiff between dates*/

    if (TA2REC.TA2RTNCD == 0) /* if return from ta0040 okay*/
      if (TA2REC.TA2DBDDN > 180) /* if difference btween dates > 180*/
        converseLib.validationFailed(50); /* error "too great"*/
        set IV0AM002.IV0AMIDL cursor, bold;
                                   /* ;      set error bright*/
        set IV0AM002.IV0AMIDH bold; /* set error bright*/
      else /* else (difference < 90 days)*/
        /* next sentence              ;      Okay*/
      end /* end of "if" statement*/
    else /* else(return code not "okay")*/
      /* next sentence                ;    too insignificant to worry*/
    end /* end of "if" statement*/
  end /* end of "if" statement.*/
   /* **********************************************8*********/

     /* 'validate' department code*/

  if (IV0AM002.XNXCD > 0)
    KUJREC.KUCCOID = IVXREC.IVXKUCCO;
    KUJREC.XNXCD = IVXREC.IVXXNXCD;
    call "IO0290" ("S ", SQLCA, KUJREC) {isNoRefresh = yes};
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(21);
      set IV0AM002.XNXCD cursor, bold;
    end
  else
    IVXREC.IVXXNXCD = 0;
  end

     /* Validate store if newly entered*/

  if (IVXREC.IVXKUMST == -1
   && IV0AM002.IV0AMSTR != " ")
    IVYREC.IVYNUM4 = IV0AM002.IV0AMSTR;
    KUMREC.KUMSTRID = IVYREC.IVYNUM4;
    KUMREC.KUCCOID = IVXREC.IVXKUCCO;
    call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes};
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(21);
      set IV0AM002.IV0AMSTR cursor, bold;
    else
      if (SQLCA.VAGen_SQLCODE != 0)
        TA1REC.TA1DBASE = "DCUST";
        TA1REC.TA1TBLVU = "VSTORE01";
        call "TA0020" (TA1REC, SQLCA);
      else
        IVXREC.IVXKUMST = KUMREC.KUMSTRID; /* save store on ivxrec*/
        KULREC.KULAAID = KUMREC.KUMSHAID; /* set keys for store*/
        KULREC.KUCCOID = IVXREC.IVXKUCCO; /* address lookup*/
        call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes};
        if (SQLCA.VAGen_SQLCODE != 0)
          TA1REC.TA1DBASE = "DCUST";
          TA1REC.TA1TBLVU = "VADDR001";
          call "TA0020" (TA1REC, SQLCA);
        else /* move in store address*/
          IV0AM002.XXXADDR1 = KULREC.XXX-ADDR1;
          IV0AM002.XXXADDR2 = KULREC.XXX-ADDR2;
          IV0AM002.XXXADDR3 = KULREC.XXX-ADDR3;
          IV0AM002.XXXCITY = KULREC.XXXCITY;
          IV0AM002.XSTCD = KULREC.XSTCD;
          IV0AM002.XXXZIP = KULREC.XXXZIP;
        end
      end
    end
  end

     /* if no errors were found, pass to IV0E*/

  if (converseVar.validationMsgNum == 0)
    COMMAREA.CAUSERA = IVXREC.IVXGROUP;
    COMMAREA.CAFROMAP = "IV0A";
    COMMAREA.CACURRAP = "IV0E";
    transfer to transaction "IV0E" passing COMMAREA;
  end


end // end IV0A250

// validate sales agency & rep
Function IV0A300()

     /* ***   This process goes validates the sales agency   ****/
     /* *** and rep as entered on iv0am001, and sets up      ****/
     /* *** salesman sub-menu for display                    ****/


     /* Validate agency/rep combination if both entered*/
     /* if no good, return to menu screen immediately*/
   /* date    done by   description*/
   /* 06/17/93 lgross   clear map before displaying error message 34*/
                     /* to avoid unwanted fields being displayed*/
   /* **************************************************************/

  if (IVXREC.IVXSM1AG != "    "
   && IVXREC.IVXSM4RP != 0)
    SM5REC.SM1AGYID = IVXREC.IVXSM1AG;
    SM5REC.SM4REPID = IVXREC.IVXSM4RP;
    SM4REC.SM4REPID = IVXREC.IVXSM4RP;
    XSIVSN4();
    if (SQLCA.VAGen_SQLCODE == 100)
      IVXREC.IVXMSSNB = 34; /* invalid rep/agency*/
      COMMAREA.CAUSERA = IVXREC.IVXGROUP;
      converseLib.clearScreen();
      set IV0AM001 initial; /* clear map*/
      IV0AM001.SM4REPID = IVXREC.IVXSM4RP;
      IV0AM001.SM1AGYID = IVXREC.IVXSM1AG;
      set IV0AM001.SM4REPID bold;
      set IV0AM001.SM1AGYID cursor, bold;
      exit stack;
    else
      IV0AM003.SM4REPID = IVXREC.IVXSM4RP;
      IV0AM003.IVZFNAME = IVZREC.IVZFNAME;
    end
  end

     /* if agency entered, lookup for agency name*/

  if (IVXREC.IVXSM1AG != "    ")
    SM1REC.SM1AGYID = IVXREC.IVXSM1AG;
    IV0AS20();
    if (SQLCA.VAGen_SQLCODE == 100)
      IVXREC.IVXMSSNB = 32; /* invalid agency*/
      COMMAREA.CAUSERA = IVXREC.IVXGROUP;
      set IV0AM001.SM1AGYID cursor, bold;
      exit stack;
    else
      IV0AM003.SM1AGYID = IVXREC.IVXSM1AG;
      IV0AM003.SM1AGYNM = SM1REC.SM1AGYNM;
    end
  end

     /* lookup up rep record for rep name if didn't get above*/

  if (IVXREC.IVXSM4RP != 0
   && IVXREC.IVXSM1AG == " ")
    SM4REC.SM4REPID = IVXREC.IVXSM4RP;
    IV0AS25();
    if (SQLCA.VAGen_SQLCODE == 100)
      IVXREC.IVXMSSNB = 33; /* invalid rep.*/
      COMMAREA.CAUSERA = IVXREC.IVXGROUP;
      set IV0AM001.SM4REPID cursor, bold;
      exit stack;
    else
      IV0AM003.SM4REPID = IVXREC.IVXSM4RP;
       /* fake out salesrep name routine, and pass as if from sm4rec*/
      XSIVSN6(); /* name format routine*/
      IV0AM003.IVZFNAME = IVZREC.IVZFNAME;
    end
  end


end // end IV0A300

Function IV0A350()

     /* ***   This process displays the salesman sub-       ****/
     /* *** selection screen, then checks user entry to see ****/
     /* *** where to go next.  If enter, pass thru to next  ****/
     /* *** process - iv0a400                               ****/

  converse IV0AM003 ;

     /* reset screen from any previous errors*/

  set IV0AM003.IV0AMIDL initialAttributes;
  set IV0AM003.IV0AMIDH initialAttributes;
  set IV0AM003.IV0AMOB1 initialAttributes;
  set IV0AM003.IV0AMOB2 initialAttributes;
  set IV0AM003.XGPCD initialAttributes;
  set IV0AM003.XDVCD initialAttributes;
  set IV0AM003.SP1ID initialAttributes;
  set IV0AM003.XOCCD initialAttributes;
  set IV0AM003.CATOAP initialAttributes;
  set IV0AM003.CAITEM initialAttributes; /* 11-12-87*/
  IV0AM003.XXXMSG = " ";

   /* *************************************************************/
   /* ***** The following code added by Grant Gilray 6/12/87 ******/
   /* ***** If the 'item' field on the screen is blank.....  ******/
   /* ***** move spaces to the 'item' field on commarea.     ******/
   /* *************************************************************/
  if (IV0AM003.CAITEM == " ") /* if item is blank*/
    COMMAREA.CAITEM = " "; /* blank out commarea*/
  end /* end of "if" statement*/

     /* check to see if user entered fastpath*/
     /* transfer w/i invoice inquiry requires item*/

  if (IV0AM003.CATOAP != " " /* request for transfer*/
   || IV0AM003.CAITEM != " ") /* 11-12-87*/
    COMMAREA.CATOAP = IV0AM003.CATOAP;
    COMMAREA.CAITEM = IV0AM003.CAITEM;
    XSIVXF();
    if (converseVar.validationMsgNum == 0) /* 11-12-87*/
      XSEXIT(); /* try and get there*/
      IV0AM003.XXXMSG = COMMAREA.CAMSG; /* failed, move in msg*/
      set IV0AM003.CATOAP cursor, bold;
      set IV0AM003 alarm;
      converseLib.validationFailed(18);
    else
      set IV0AM003.CAITEM cursor, bold; /* 11-12-87*/
    end
  else
       /* check user entry.  If a valid pf key, pass as requested*/
    IV0AS01(); /* check pf keys*/
  end

     /* if came back from above, there is an error, or user*/
     /* pressed enter or pf3, which will be handled in flow*/

  if (converseVar.validationMsgNum != 0)
    if (converseVar.validationMsgNum == 18) /* transfer failed*/
      IV0AM003.XXXMSG = COMMAREA.CAMSG;
      set IV0AM003 alarm;
    end
    exit stack;
  end

     /* be sure causera gets set with latest values from ivxrec*/
     /* before pass back to top of application*/

  if (converseVar.eventKey is pf3)
    COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  end


end // end IV0A350

// validate data from iv0am003
Function IV0A400()

     /* ***   This process goes thru all data entered on the ****/
     /* *** salesman sub-selection screen and validates.     ****/
     /* *** Also, sets up ivxrec values for next screen.     ****/
     /* *** Fields are validated in reverse order, so that   ****/
     /* *** first field with an error will have cursor.  If  ****/
     /* *** no errors are found, control is passed to IV0E.  ****/


     /* Validate order class*/

  if (IV0AM003.XOCCD != "  ")
    if (IV0AM003.XOCCD in XOCTBL.XOCCD)
      IVXREC.IVXXOCCD = IV0AM003.XOCCD;
    else
      converseLib.validationFailed(26); /* invalid*/
      set IV0AM003.XOCCD cursor, bold;
    end
  else
    IVXREC.IVXXOCCD = " ";
  end

     /* Validate sales program*/

  if (IV0AM003.SP1ID != "    ")
    SP1REC.SP1ID = IV0AM003.SP1ID;
    IV0AS15(); /* try and find record*/
    if (SQLCA.VAGen_SQLCODE == 100) /* not found, tell user*/
      converseLib.validationFailed(30); /* invalid sales program*/
      set IV0AM003.SP1ID cursor, bold;
    else
      IVXREC.IVXSP1ID = IV0AM003.SP1ID;
    end
  else
    IVXREC.IVXSP1ID = " ";
  end

     /* Validate gpc*/

  if (IV0AM003.XGPCD != "  ")
    if (IV0AM003.XGPCD in XGPTBL.XGPCD)
      IVXREC.IVXXGPCD = IV0AM003.XGPCD;
    else
      converseLib.validationFailed(23);
      set IV0AM003.XGPCD cursor, bold;
    end
  else
    IVXREC.IVXXGPCD = " ";
  end

     /* Validate division*/

  if (IV0AM003.XDVCD != "  ") /* if xdvcd entered on screen*/
    if (IV0AM003.XDVCD in XDVTBL.XDVCD) /* if xdvcd found in xdvtbl*/
      IVXREC.XDVCD = IV0AM003.XDVCD; /* move xdvcd to work record*/
    else /* else*/
      converseLib.validationFailed(54); /* error*/
      set IV0AM003.XDVCD cursor, bold; /* set field attributes*/
    end /* end*/
  else /* else*/
    IVXREC.XDVCD = " "; /* move spaces to work record*/
  end /* end*/

     /* Validate order type*/

  if (IV0AM003.IV0AMOB2 != "  ")
    if (IV0AM003.IV0AMOB2 in XOBTBL.XOBCD)
      IVXREC.XOBCD2 = IV0AM003.IV0AMOB2;
    else
      converseLib.validationFailed(53);
      set IV0AM003.IV0AMOB2 cursor, bold;
    end
  else
    IVXREC.XOBCD2 = " ";
  end

  if (IV0AM003.IV0AMOB1 != "  ")
    if (IV0AM003.IV0AMOB1 in XOBTBL.XOBCD)
      IVXREC.XOBCD1 = IV0AM003.IV0AMOB1;
    else
      converseLib.validationFailed(53);
      set IV0AM003.IV0AMOB1 cursor, bold;
    end
  else
    IVXREC.XOBCD1 = " ";
  end

     /* Validate invoice dates*/

     /* first validate high date*/

  if (IV0AM003.IV0AMIDH != 0)
    IV0AW01.IV0AWDTE = IV0AM003.IV0AMIDH;
    IV0AS10(); /* validate date*/
    if (TA2REC.TA2RTNCD == 0)
      IVXREC.IVXIVCDH = TA2REC.TA2GRGGN;
    else
      converseLib.validationFailed(22);
      set IV0AM003.IV0AMIDH cursor, bold;
    end
  else
    IVXREC.IVXIVCDH = 0;
  end

     /* then validate low date*/

  if (IV0AM003.IV0AMIDL != 0)
    IV0AW01.IV0AWDTE = IV0AM003.IV0AMIDL;
    IV0AS10(); /* validate routine*/
    if (TA2REC.TA2RTNCD == 0) /* date ok*/
      IVXREC.IVXIVCDL = TA2REC.TA2GRGGN;
    else
      converseLib.validationFailed(22);
      set IV0AM003.IV0AMIDL cursor, bold;
    end
  else
    converseLib.validationFailed(47); /* no invoice date entered - error*/
    set IV0AM003.IV0AMIDL cursor, bold;
    IVXREC.IVXIVCDL = 0;
  end

     /* then check that range is correct*/

  if (IVXREC.IVXIVCDL != 0
   && IVXREC.IVXIVCDH != 0)
    if (IVXREC.IVXIVCDH < IVXREC.IVXIVCDL)
      converseLib.validationFailed(37);
      set IV0AM003.IV0AMIDL cursor, bold;
      set IV0AM003.IV0AMIDH bold;
    end
  end

     /* if no errors were found, pass to IV0E*/

  if (converseVar.validationMsgNum == 0)
    COMMAREA.CAUSERA = IVXREC.IVXGROUP;
    COMMAREA.CAFROMAP = "IV0A";
    COMMAREA.CACURRAP = "IV0E";
    transfer to transaction "IV0E" passing COMMAREA;
  end


end // end IV0A400

// check pfkeys
Function IV0AS01()

     /* ******************************************************/
     /* ***   This statement group checks for valid pfkey  ****/
     /* *** by the user.   All three screens in group allow****/
     /* *** same entries.                                  ****/
     /* ******************************************************/

  if (converseVar.eventKey is pf1)
    XSPF1();
    converseLib.validationFailed(18);
  else
    if (converseVar.eventKey is pf4)
      XSPF4();
      converseLib.validationFailed(18);
    else
      if (converseVar.eventKey is pf3)
        return;
      else
        if (converseVar.eventKey is enter)
          return;
        else
          converseLib.validationFailed(3); /* invalid pf key*/
        end
      end
    end
  end


end // end IV0AS01

// PF3 Pressed Actions
Function IV0AS03()


  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  COMMAREA.CAFROMAP = "IV0D";
  COMMAREA.CACURRAP = "IV0M";
  transfer to transaction "IV0M" passing COMMAREA;


end // end IV0AS03

// transfer flow to requested app
Function IV0AS05()
   /* this statement group will try and transfer control*/
   /* to the requested application.  if it fails, we*/
   /* will move in the appropriate error messages before*/
   /* returning.*/

  XSEXIT(); /* try and get there*/
   /* we didn't make it, so move in the messages*/
  converseLib.validationFailed(18); /* transfer failed*/
  IV0AM001.XXXMSG = COMMAREA.CAMSG; /* plus system msg*/
  set IV0AM001 alarm;
end // end IV0AS05

// date validation routine
Function IV0AS10()

   /* date validation routine:*/
    /* this routine will use the date (mmddyy) placed into*/
    /* iv0awdte and will validate it using ta0040.*/

  TA2REC.TA2GRGAN = IV0AW01.IV0AWDTE;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2DYAOD = 0;
  call "TA0040" (TA2REC) {isNoRefresh = yes};
end // end IV0AS10

// date conversion routine
Function IV0AS11()

    /* this routine will use the date (yyddmm) placed into*/
    /* iv0awdte and will convert it using ta0040.*/
    /* The date will be returned mmddyy*/
   /* 04/01/93   lgross       installed*/

  set TA2REC empty;
  TA2REC.TA2GRGGN = IV0AW01.IV0AWDTE2;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2DYAOD = 0;
  call "TA0040" (TA2REC) {isNoRefresh = yes};
end // end IV0AS11

// validate sales program
Function IV0AS15()
   /* this routine will validate the sales program by*/
   /* using the data in the sp1rec.*/

  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes};
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "IV0A";
    TA1REC.TA1LOCAT = "IV0AS15";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DSPGM";
    TA1REC.TA1TBLVU = "VSPGM001";
    TA1REC.TA1TBLKE = SP1REC.SP1KEY;
    call "TA0020" (TA1REC, SQLCA);
  end
end // end IV0AS15

// validate sales agency
Function IV0AS20()
   /* this routine will validate the sales agency by*/
   /* using the data in the sm1rec.*/

  call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes};
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "IV0A";
    TA1REC.TA1LOCAT = "IV0AS20";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DSLSMN";
    TA1REC.TA1TBLVU = "VSAGCY01";
    TA1REC.TA1TBLKE = SM1REC.SM1AGYID;
    call "TA0020" (TA1REC, SQLCA);
  end
end // end IV0AS20

// validate sales rep.
Function IV0AS25()
   /* this routine will validate the sales rep. by*/
   /* using the data in the sm4rec.*/

  call "IO0020" ("S ", SQLCA, SM4REC) {isNoRefresh = yes};
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "IV0A";
    TA1REC.TA1LOCAT = "IV0AS25";
    TA1REC.TA1MAP = " ";
    TA1REC.TA1DBASE = "DSLSMN";
    TA1REC.TA1TBLVU = "VREPS001";
    IVYREC.IVYNUMB = SM4REC.SM4REPID; /* 10-30-87*/
    TA1REC.TA1TBLKE = IVYREC.IVYNUMB; /* 10-30-87*/
    call "TA0020" (TA1REC, SQLCA);
  end
end // end IV0AS25

// Insure Dates < 90 Days apart
Function IV0AS26()
   /* *************************************************************/
   /* ***** I N S U R E     D A T E S     A R E    L E S S   ******/
   /* *****   T H A N     9 0     D A Y S     A P A R T      ******/
   /* *************************************************************/


  set TA2REC empty;

  TA2REC.TA2DBDFN = IVXREC.IVXIVCDL;
  TA2REC.TA2DBDTN = IVXREC.IVXIVCDH;
  TA2REC.TA2DTOPT = "DAYSDIFF";
  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2DYAOD = 0;

  call "TA0040" (TA2REC) {isNoRefresh = yes};

end // end IV0AS26

// locate style/color on vcolor01
Function IV0AS35()
  SY2REC.XGPCD = IVXREC.IVXXGPCD;
  SY2REC.SY1STNBR = IVXREC.SY1STNBR;
  call "IO0130" ("SS", SQLCA, SY2REC) {isNoRefresh = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1TYPE = "DB2";
    TA1FUNC = "ABND";
    TA1PGMNM = "IV0A";
    TA1LOC = "IV0AS35";
    TA1DBASE = "DPROD";
    TA1TBLVU = "VCOLOR01";
    TA1REC.TA1LOCAT[4] = "IO0130"; /* 10-30-87*/
    TA1REC.TA1TBLKE = SY2REC.SY2KEY; /* 10-30-87*/
    call "TA0020" (TA1REC, SQLCA);
  end
  if (IV0AM002.SY2CLRID == "   ")
    IV0AS36();
  else
    SY2REC.SY2CLRID = "   ";
    while (SQLCA.VAGen_SQLCODE == 0
     && SY2REC.SY2CLRID != IV0AM002.SY2CLRID)
      IV0AS36();
    end
  end
  if (SQLCA.VAGen_SQLCODE == 100)
    IV0AWNOF = "Y";
  else
    IV0AWNOF = "N";
  end
  call "IO0130" ("CS", SQLCA, SY2REC) {isNoRefresh = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1TYPE = "DB2";
    TA1FUNC = "ABND";
    TA1PGMNM = "IV0A";
    TA1LOC = "IV0AS35";
    TA1DBASE = "DPROD";
    TA1TBLVU = "VCOLOR01";
    TA1REC.TA1LOCAT[4] = "IO0130"; /* 10-30-87*/
    TA1REC.TA1TBLKE = SY2REC.SY2KEY; /* 10-30-87*/
    call "TA0020" (TA1REC, SQLCA);
  end
end // end IV0AS35

// get next style/color row
Function IV0AS36()
  call "IO0130" ("SN", SQLCA, SY2REC) {isNoRefresh = yes};
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1TYPE = "DB2";
    TA1FUNC = "ABND";
    TA1PGMNM = "IV0A";
    TA1LOC = "IV0AS36";
    TA1DBASE = "DPROD";
    TA1TBLVU = "VCOLOR01";
    TA1REC.TA1TBLKE = SY2REC.SY2KEY; /* 10-30-87*/
    TA1REC.TA1LOCAT[4] = "IO0130"; /* 10-30-87*/
    call "TA0020" (TA1REC, SQLCA);
  end
end // end IV0AS36

// Clear IVXREC selection fields
Function IV0ASCX()

     /* ***   This statement group takes care of clearing  ****/
     /* *** the selection fields on the ivxrec if starting ****/
     /* *** application over but not clearing ivxrec       ****/

  if (IVXREC.IVXTYPFL == "C"
   || IVXREC.IVXTYPFL == "S")
      /* don't clear if customer or salesman selects*/
  else
    IVXREC.IVXIVCDL = 0;
    IVXREC.IVXIVCDH = 0;
    IVXREC.XOBCD1 = "  ";
    IVXREC.XOBCD2 = "  ";
    IVXREC.XDVCD = "  ";
    IVXREC.IVXSP1ID = "    ";
    IVXREC.IVXXGPCD = "  ";
    IVXREC.IVXXOCCD = "  ";
    IVXREC.IVXSM1AG = " ";
    IVXREC.IVXSM4RP = 0;
  end
  if (IVXREC.IVXTYPFL == "C")
      /* don't clear customer fields if a cust select*/
  else
    IVXREC.IVXKUCCO = 0;
    IVXREC.IVXKUMST = -1;
    IVXREC.IVXXNXCD = 0;
    IVXREC.OP1CUNDT = 0;
    IVXREC.IVXCUNDT = 0;
    IVXREC.IVAIVAMT = 0;
    IVXREC.IVXIVAMT = 0;
    IVXREC.IVXXSOCD = "  ";
    IVXREC.XWHCD = "  ";
    IVXREC.SY1STNBR = " ";
    IVXREC.SY2CLRID = " ";
    IVXREC.XDMCD = "  ";
    IVXREC.XLCCD = "  ";
    IVXREC.XQACD = "  ";
    IVXREC.IVXOP1CP = " ";
  end

  if (IVXREC.IVXTYPFL != "I")
    IVXREC.IV0IVCID = 0;
  end
  if (IVXREC.IVXTYPFL != "L"
   && IVXREC.IVXTYPFL != "O")
    IVXREC.IVXOP1CO = 0;
  end
  if (IVXREC.IVXTYPFL != "L")
    IVXREC.IVXOP1NO = 0;
  end
  if (IVXREC.IVXTYPFL != "J")
    IVXREC.IV0JCPB = 0;
    IVXREC.KU0JCPSD = "   ";
  end

  IVXREC.IVXAPPL = "IV0A";
                                   /* move application to appropriate field*/
  IVXREC.IVXWGTSL = 3000; /* move temp storage length constant*/

end // end IV0ASCX

// Display Entered Criteria
Function IV0ASD1()

     /* ***   This statement group handles display of entered ****/
     /* *** criteria on the main menu in the event that the   ****/
     /* *** screen is being returned to for the display of a  ****/
     /* *** message...                                        ****/

  if (IVXREC.IVXKUCCO != 0)
    IV0AM001.KUCCOID = IVXREC.IVXKUCCO;
  end
  if (IVXREC.IVXKUMST != -1)
    IVYREC.IVYNUM4 = IVXREC.IVXKUMST;
    IV0AM001.IV0AMSTR = IVYREC.IVYNUM4;
  end
  if (IVXREC.IVXXNXCD != 0)
    IV0AM001.XNXCD = IVXREC.IVXXNXCD;
  end
  if (IVXREC.IV0IVCID != 0)
    IV0AM001.IV0IVCID = IVXREC.IV0IVCID;
  end
  if (IVXREC.IV0JCPB != 0)
    IV0AM001.IV0JCPB = IVXREC.IV0JCPB;
  end
  if (IVXREC.KU0JCPSD != " ") /* 10-27-87*/
    IV0AM001.KU0JCPSD = IVXREC.KU0JCPSD;
  end
  if (IVXREC.IVXSM1AG != "    ")
    IV0AM001.SM1AGYID = IVXREC.IVXSM1AG;
  end
  if (IVXREC.IVXSM4RP != 0)
    IV0AM001.SM4REPID = IVXREC.IVXSM4RP;
  end
  if (IVXREC.IVXOP1CO != 0)
    IV0AM001.OP1CUOID = IVXREC.IVXOP1CO;
  end
  if (IVXREC.IVXOP1NO != 0)
    IV0AM001.OP1NORID = IVXREC.IVXOP1NO;
  end


end // end IV0ASD1

// Display Entered Criteria
Function IV0ASD2()

     /* ***   This statement group handles display of entered ****/
     /* *** criteria on the Customer Sub-Selection menu in the****/
     /* *** event that the screen is being returned to for the****/
     /* *** display of a message...                           ****/

  if (IVXREC.IVXIVCDL != 0)
    IVYREC.IVYWDT = IVXREC.IVXIVCDL;
    IVYREC.IVYYYDT = IVYREC.IVYWYY;
    IVYREC.IVYMMDT = IVYREC.IVYWMM;
    IVYREC.IVYDDDT = IVYREC.IVYWDD;
    IV0AM002.IV0AMIDL = IVYREC.IVYDATE;
  end
  if (IVXREC.IVXIVCDH != 0)
    IVYREC.IVYWDT = IVXREC.IVXIVCDH;
    IVYREC.IVYYYDT = IVYREC.IVYWYY;
    IVYREC.IVYMMDT = IVYREC.IVYWMM;
    IVYREC.IVYDDDT = IVYREC.IVYWDD;
    IV0AM002.IV0AMIDH = IVYREC.IVYDATE;
  end
  if (IVXREC.IVXOP1CP != " ")
    IV0AM002.IV0AMPO = IVXREC.IVXOP1CP;
  end
  if (IVXREC.XOBCD1 != "  ")
    IV0AM002.IV0AMOB1 = IVXREC.XOBCD1;
  end
  if (IVXREC.XOBCD2 != "  ")
    IV0AM002.IV0AMOB2 = IVXREC.XOBCD2;
  end
  if (IVXREC.XDVCD != "  ")
    IV0AM002.XDVCD = IVXREC.XDVCD;
  end
  if (IVXREC.IVXXGPCD != "  ")
    IV0AM002.XGPCD = IVXREC.IVXXGPCD;
  end
  if (IVXREC.IVXSM1AG != "    ")
    IV0AM002.SM1AGYID = IVXREC.IVXSM1AG;
  end
  if (IVXREC.IVXSM4RP != 0)
    IV0AM002.SM4REPID = IVXREC.IVXSM4RP;
  end
  if (IVXREC.IVXXSOCD != "  ")
    IV0AM002.XSOCD = IVXREC.IVXXSOCD;
  end
  if (IVXREC.OP1CUNDT != 0)
    IVYREC.IVYWDT = IVXREC.OP1CUNDT;
    IVYREC.IVYYYDT = IVYREC.IVYWYY;
    IVYREC.IVYMMDT = IVYREC.IVYWMM;
    IVYREC.IVYDDDT = IVYREC.IVYWDD;
    IV0AM002.IV0AMNDL = IVYREC.IVYDATE;
  end
  if (IVXREC.IVXCUNDT != 0)
    IVYREC.IVYWDT = IVXREC.IVXCUNDT;
    IVYREC.IVYYYDT = IVYREC.IVYWYY;
    IVYREC.IVYMMDT = IVYREC.IVYWMM;
    IVYREC.IVYDDDT = IVYREC.IVYWDD;
    IV0AM002.IV0AMNDH = IVYREC.IVYDATE;
  end
  if (IVXREC.IVAIVAMT != 0)
    IV0AM002.IV0AMDL = IVXREC.IVAIVAMT;
  end
  if (IVXREC.IVXIVAMT != 0)
    IV0AM002.IV0AMDH = IVXREC.IVXIVAMT;
  end
  if (IVXREC.XWHCD != "  ")
    IV0AM002.XWHCD = IVXREC.XWHCD;
  end
  if (IVXREC.IVXSP1ID != "    ")
    IV0AM002.SP1ID = IVXREC.IVXSP1ID;
  end
  if (IVXREC.IVXXOCCD != "  ")
    IV0AM002.XOCCD = IVXREC.IVXXOCCD;
  end
  if (IVXREC.SY1STNBR != " ")
    IV0AM002.SY1STNBR = IVXREC.SY1STNBR;
    if (IVXREC.XGPCD != "  ")
      IV0AM002.XGPCD2 = IVXREC.XGPCD;
    end
  end
  if (IVXREC.SY2CLRID != "   ")
    IV0AM002.SY2CLRID = IVXREC.SY2CLRID;
  end
  if (IVXREC.XDMCD != "  ")
    IV0AM002.XDMCD = IVXREC.XDMCD;
  end
  if (IVXREC.XLCCD != "  ")
    IV0AM002.XLCCD = IVXREC.XLCCD;
  end
  if (IVXREC.XQACD != "  ")
    IV0AM002.XQACD = IVXREC.XQACD;
  end


end // end IV0ASD2

// move fields to iv0m002
Function IV0ASD3()
   /* *********************************************************************/
   /* this statement group move fields from ivxrec to iv0am002          **/
   /* 03/25/93  lgross    installed                                     **/
   /* *********************************************************************/
  if (IVXREC.XQACD > " ") /* quality code*/
    IV0AM002.XQACD = IVXREC.XQACD;
  end
  if (IVXREC.XLCCD > " ") /* life cycle*/
    IV0AM002.XLCCD = IVXREC.XLCCD;
  end
  if (IVXREC.XGPCD > " " /* gpc code*/
   || IVXREC.IVXXGPCD > " ")
    if (IV0AM002.SY1STNBR > " ")
      IV0AM002.XGPCD = IVXREC.XGPCD;
      IV0AM002.XGPCD2 = IVXREC.XGPCD;
    else
      IV0AM002.XGPCD = IVXREC.IVXXGPCD;
    end
  end
  if (IVXREC.SY1STNBR > " ") /* style number*/
    IV0AM002.SY1STNBR = IVXREC.SY1STNBR;
  end
  if (IVXREC.SY2CLRID > " ") /* color id*/
    IV0AM002.SY2CLRID = IVXREC.SY2CLRID;
  end
  if (IVXREC.XDMCD > " ") /* dimension code*/
    IV0AM002.XDMCD = IVXREC.XDMCD;
  end
  if (IVXREC.IVXXOCCD > " ") /* order class*/
    IV0AM002.XOCCD = IVXREC.IVXXOCCD;
  end
  if (IVXREC.IVXSP1ID > " ") /* sales program*/
    IV0AM002.SP1ID = IVXREC.IVXSP1ID;
  end
  if (IVXREC.XWHCD > " ") /* warehouse code*/
    IV0AM002.XWHCD = IVXREC.XWHCD;
  end
  if (IVXREC.IVAIVAMT > 0) /* invoice amount lo*/
    IV0AM002.IV0AMDL = IVXREC.IVAIVAMT;
  end
  if (IVXREC.IVXIVAMT > 0) /* invoice amount  hi*/
    IV0AM002.IV0AMDH = IVXREC.IVXIVAMT;
  end
  if (IVXREC.IVXXSOCD > " ") /* sales office code*/
    IV0AM002.XSOCD = IVXREC.IVXXSOCD;
  end
  if (IVXREC.IVXSM1AG > " ") /* sales agency*/
    IV0AM002.SM1AGYID = IVXREC.IVXSM1AG;
  end
  if (IVXREC.IVXSM4RP > 0) /* sales rep*/
    IV0AM002.SM4REPID = IVXREC.IVXSM4RP;
  end
  if (IVXREC.XDVCD > " ") /* division code*/
    IV0AM002.XDVCD = IVXREC.XDVCD;
  end
  if (IVXREC.XOBCD2 > " ") /* base order type*/
    IV0AM002.IV0AMOB2 = IVXREC.XOBCD2;
  end
  if (IVXREC.XOBCD1 > " ")
    IV0AM002.IV0AMOB1 = IVXREC.XOBCD1;
  end
  if (IVXREC.IVXOP1CP > " ") /* purchase order number*/
    IV0AM002.IV0AMPO = IVXREC.IVXOP1CP;
  end
  if (IVXREC.IVXIVCDH > 0) /* hi invoice date*/
    IV0AW01.IV0AWDTE2 = IVXREC.IVXIVCDH;
    IV0AS11();
    IV0AM002.IV0AMIDH = TA2REC.TA2GRGAN;
  end
  if (IVXREC.IVXIVCDL > 0) /* lo invoice date*/
    IV0AW01.IV0AWDTE2 = IVXREC.IVXIVCDL;
    IV0AS11();
    IV0AM002.IV0AMIDL = TA2REC.TA2GRGAN;
  end
  if (IVXREC.IVXCUNDT > 0) /* hi need date*/
    IV0AW01.IV0AWDTE2 = IVXREC.IVXCUNDT;
    IV0AS11();
    IV0AM002.IV0AMNDH = TA2REC.TA2GRGAN;
  end
  if (IVXREC.OP1CUNDT > 0) /* lo need date*/
    IV0AW01.IV0AWDTE2 = IVXREC.OP1CUNDT;
    IV0AS11();
    IV0AM002.IV0AMNDL = TA2REC.TA2GRGAN;
  end
  if (IVXREC.IVXXNXCD > 0) /* department code*/
    IV0AM002.XNXCD = IVXREC.IVXXNXCD;
  end
end // end IV0ASD3

//*** RECORD=IV0AW01 ****
// ;working storage record for iv0a application
// 03/26/93 lgross added iv0awdte2
// ***********************
Record IV0AW01 type basicRecord
  10 XXXRVNBR XXXRVNBR ; 
  10 IV0AWPFL IV0AWPFL ; 
  10 IV0AWDTE IV0AWDTE ; 
  10 IV0AWDTE2 IV0AWDTE2 ; 
  10 IV0AWNOF IV0AWNOF ; 
  10 IV0AWITM IV0AWITM ; 
end // end IV0AW01

// work date for iv0aws10
DataItem IV0AWDTE num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem IV0AWDTE2 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// check caitem field
DataItem IV0AWITM char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style/color on file (y/n)
DataItem IV0AWNOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flow control flag
DataItem IV0AWPFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

