package iv0n;

import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSIVS02;
import corpcom4.XSIVSEN;
import corpcom4.XSIVSFH;
import corpcom4.XSIVSFP;
import corpcom4.XSIVXF;
import corpcom4.XSPF1;
import corpcom5.COMMAREA;
import corpcom5.CU-CUST-PROD-ID;
import corpcom5.CU-PROD-ID-OVRDFL;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XDMCD;
import corpx1.XGPTBL;
import corpx1.XHDCD;
import corpx1.XHDKEY;
import corpx1.XHDTBL;
import corpx1.XOBTBL;
import corpx1.XOCTBL;
import corpx1.XSOTBL;
import corpx1.XUMTBL;
import corpx2.XPGCD;
import corpz3.ZZ-CHNG-CNT;
import corpz3.ZZ-CHNG-DT;
import corpz3.ZZ-CHNG-HHMM;
import corpz3.ZZ-SDT;
import iv.common.*;
import ku.common.KUCREC;
import ku.common.KUIPRDNM;
import op.common.OP-LINE-ITEM-NBR;
import op.common.OP2LNINB;
import sp.common.SP1REC;
import sy.common.SY-SZ-ID;
import sy.common.SY1REC;
import sy.common.SY1SSTNM;
import sy.common.SY1STNBR;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import sy.common.SY2REC;
import sy.common.SY4REC;
import sy.common.SY4SZSCL;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
import vv.common.VIVITM02;
import vv.common.VIVSIZ02;
import ww.common.WCU1710;
//*** PROGRAM=IV0N ****
//     Invoicing Inquiry     Product Summary and Detail
// 
// overview: this application displays line items and selcted
//           detail for the invoice.
// 
// date created: 12/28/86
//       author: P. Gilhousen
// 
// maintenance history:
// 
//     date     by whom     overview of changes made
//   -------- ------------  -----------------------------------
//   12/28/86 P.Gilhousen   Program Creation.
// 
//   04/10/91 lgross        application will now display 5
//                          handling codes
//   02/19/92 lgross        changed flow to iv0g instead of
//                          iv0a when enter is pressed
//                          changed: iv0nsen
// 03/13/92lgross only check the product cross reference table
//                when print xref flag = 'y' changed: iv0nsdx
//                xsivsfh
// 05/26/92 lgross allow pf20 to order comment screen
//                changes:  iv0n010, iv0ns20, iv0n020, iv0n030
// 07/08/92 lgross allow pf21 to invoice comment screen
//                changes: IV0NM001,IV0N010,IV0N020,IV0NM002,
//                         IV0NM003, IV0NS21
// 10/16/92 lgross file size changes to iv0nw01 - see record
//                 prologue
// 04/12/93 lgross changed maps to allow for larger invoice
//                 amount fields chaneged IV0NM001, IV0NM002
// 08/24/93 lgross allow pf24 to invoice carton tracking screen
//                 changes: IV0NM001, IV0NM002, IV0NM003,
//                 IV0N010, IV0NS24, IV0N020, IV0N030
// 07/08/96 GDECKE  INTEGRATE USE OF CU-CUST-PROD-ID BY SIZE.
// 08/12/97 GDECKE  CORRECT DISPLAY OF 2ND PAGE - IVONM003.
// *********************
Program IV0N type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "IV00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IV0NW01 IV0NW01; // record
  IV0NW02 IV0NW02; // record
  IV0NWCUS IV0NWCUS; // record
  IV0NWMOD IV0NWMOD; // record
  IV0NWPRM IV0NWPRM; // record
  IV0NWTB2 IV0NWTB2; // record
  IV0NWTB3 IV0NWTB3; // record
  IV0NWTBL IV0NWTBL; // record
  IV0REC IV0REC; // record
  IV3REC IV3REC; // record
  IV4REC IV4REC; // record
  IV6REC IV6REC; // record
  IVAREC IVAREC; // record
  IVFREC IVFREC; // record
  IVGREC IVGREC; // record
  IVXREC IVXREC; // record
  IVYREC IVYREC; // record
  KUCREC KUCREC; // record
  SP1REC SP1REC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SY2REC SY2REC; // record
  SY4REC SY4REC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VIVITM02 VIVITM02; // record
  VIVSIZ02 VIVSIZ02; // record
  VIVSKU01 VIVSKU01; // record
  WCU1710 WCU1710; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XHDTBL {deleteAfterUse = yes}; // table
  use XOCTBL {deleteAfterUse = yes}; // table
  use XOBTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XSOTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use IV0NM.IV0NM001,  // forms
      IV0NM.IV0NM002, 
      IV0NM.IV0NM003
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    IV0N001: IV0N001();

       /* pass to detail screen with out summary display if*/
       /* option 2 or 4*/

    if (IVXREC.IVXOPTN == 4
     || IVXREC.IVXOPTN == 2)
      IVXREC.OP2LNINB = IV0NW01.OP2LNINB[1];
      IV0NW01.IV0NWIX = 1;
      IV0NW01.IV0NWSZX = 1;
      goto IV0N025;
    end

       /* pass to summary 1 screen display*/

    goto IV0N010;


    IV0N005: IV0N005();
    goto IV0N010;
    IV0N010: IV0N010();

       /* if an error, redisplay screen with message*/

    if (IVYREC.IVYERR == "Y")
      IVYREC.IVYERR = "N";
      goto IV0N010;
    end

       /* pass to detail screen if an item selected*/

    if (IVXREC.OP2LNINB != 0)
      IVXREC.SY5SZID = 0;
      IV0NW01.IV0NWSZX = 1;
      goto IV0N025;
    end

       /* pass to summ 2 screen if pf11*/

    if (converseVar.eventKey is pf11)
      goto IV0N015;
    end

       /* if scroll, reset display*/

    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      goto IV0N005;
    end

       /* not sure how to get here, but an escape hatch*/

    goto IV0N010; /* branch to converse*/


    IV0N015: IV0N015();
    goto IV0N020;
    IV0N020: IV0N020();

       /* if an error, redisplay screen with message*/

    if (IVYREC.IVYERR == "Y")
      IVYREC.IVYERR = "N";
      goto IV0N020;
    end

       /* pass to detail screen if an item selected*/

    if (IVXREC.OP2LNINB != 0)
      IVXREC.SY5SZID = 0;
      goto IV0N025;
    end

       /* pass to summ 1 screen if pf10*/

    if (converseVar.eventKey is pf10)
      goto IV0N005;
    end

       /* if scroll, reset display*/

    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      goto IV0N015;
    end

       /* escape route*/

    goto IV0N020;


    IV0N025: IV0N025();
    goto IV0N030;
    IV0N030: IV0N030();

       /* if an error, redisplay screen with message*/

    if (IVYREC.IVYERR == "Y")
      IVYREC.IVYERR = "N";
      goto IV0N030;
    end

       /* pass back to display next detail if an active line item*/

    if (IVXREC.OP2LNINB != 0)
      goto IV0N025;
    end

       /* if pf9, or if enter pressed, and no further selections,*/
       /* go back to prod summ*/
        /* first be sure index is reset if came from summ 2*/

    if (converseVar.eventKey is pf9
     || converseVar.eventKey is enter)
      if (IV0NW01.IV0NWSSI != 0)
        IV0NW01.IV0NWSIX = IV0NW01.IV0NWSSI; /* reset to summ 1 values*/
        IV0NW01.IV0NWSNX = IV0NW01.IV0NWSSN;
        IV0NW01.IV0NWSSI = 0; /* reset so as not to*/
        IV0NW01.IV0NWSSN = 0; /* get led astray*/
      end
      goto IV0N005;
    end

       /* if scroll, reset display*/

    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      goto IV0N025;
    end

       /* escape route*/

    goto IV0N030;


  end // end main
end // end IV0N

// Program Initialization
Function IV0N001()


     /* **********************************************************/
     /* * this process performs the following functions:        **/
     /* *     - checks entry security                           **/
     /* *     - moves the working storage and invoicing work    **/
     /* *       record from the incoming common area            **/
     /* *     - initializes the map and working fields          **/
     /* *       -- reads invoice header index and company       **/
     /* *          record if came in fastpath                   **/
     /* *       -- reads header                                 **/
     /* *     - reads line items*/
     /* **********************************************************/



  XSENTRY(); /* system security check*/


  IV0NSPI(); /* initialize program*/


  IV0NM001.XXXRVNBR = "1"; /* set map revision number*/
  IV0NM002.XXXRVNBR = "1"; /* for map 2*/
  IV0NM003.XXXRVNBR = "1"; /* for map 3*/


  IV0NSLN(); /* look up line items*/

     /* if option 2 or 4, summ screen won't be displayed, but*/
     /* are to display all details, so mark all entries in array*/
     /* with 's'*/
  if (IVXREC.IVXOPTN == 2
   || IVXREC.IVXOPTN == 4)
    IV0NSAL(); /* mark all entries as selected*/
  end


end // end IV0N001

// Scroll Summ 1 Display
Function IV0N005()

     /* ***   this statement group is used to look thru the ****/
     /* *** line item array, and display the next or        ****/
     /* *** previous set of lines, as requested             ****/

     /* set screen index*/

  IV0NW01.IV0NWIX = IV0NW01.IV0NWSIX; /* move saved begin point to*/
  IV0NW01.IV0NWNX = IV0NW01.IV0NWSNX; /* working array indexes*/
  IVYREC.IVYSUB = 1; /* screen index*/
   /* ivysub1 used to clear remaining lines*/

     /* set screen indicator*/

  IV0NW01.IV0NWSCR = 2;

     /* loop thru and display lines*/

  while (IVYREC.IVYSUB < 15)
    IV0NSUL(); /* do select unique for the line item,*/
                                   /* and display*/
    IV0NW01.IV0NWIX = IV0NW01.IV0NWIX + 1; /* set for next line item*/
    if (IV0NW01.IV0NWIX > IV0NW01.IV0NWIMX) /* if array processing complete*/
      IVYREC.IVYSUB = IVYREC.IVYSUB + 1;
                                   /* set screen index for next line*/
      if (IVYREC.IVYSUB < 15) /* if screen not already full*/
        IV0NSC1(); /* clear remaining lines*/
      end
      IVYREC.IVYSUB = 15; /* set index to end loop*/
    else
      IVYREC.IVYSUB = IVYREC.IVYSUB + 1; /* continue processing array*/
    end
  end


end // end IV0N005

// Converse Product Summary
Function IV0N010()


     /* **********************************************************/
     /* * this process presents the Product Summary screen for  **/
     /* * review, and passes control to the next screen as      **/
     /* * requested                                             **/
     /* * 05-12-92   lgross allow pf20 - order comment screen   **/
     /* * 07/09/92   lgross allow PF21 - invoice comment screen **/
     /* * 08/24/93   lgross allow pf24 - invoice carton tracking**/
     /* **********************************************************/


   /* *************************************************************/
  converse IV0NM001 ;
   /* *************************************************************/

     /* pass immediately if user selected fastpath*/

  if (IV0NM001.CATOAP != " " /* if fastpath entered*/
   || IV0NM001.CAITEM != " ") /* 11-12-87*/
    COMMAREA.CATOAP = IV0NM001.CATOAP; /* set up commarea*/
    COMMAREA.CAITEM = IV0NM001.CAITEM;
    XSIVXF(); /* 11-12-87 edit option/item*/
    if (converseVar.validationMsgNum == 0) /* 11-12-87*/
      XSEXIT(); /* attempt to pass*/
      IV0NM001.XXXMSG = COMMAREA.CAMSG; /* if get here, pass was*/
      set IV0NM001.CATOAP cursor, bold; /* unsuccessful - let user know*/
      set IV0NM001 alarm;
      converseLib.validationFailed(18);
    else
      set IV0NM001.CAITEM cursor, bold; /* 11-12-87*/
    end
    IVYREC.IVYERR = "Y";
    exit stack; /* 11-12-87*/
  end

     /* reset screen from any previous errors*/

  set IV0NM001.CATOAP normal;
  set IV0NM001.CAITEM normal; /* 11-12-87*/
  IVYREC.IVYSUB = 1;
  while (IVYREC.IVYSUB < 15)
    set IV0NM001.IV0NMSEL[IVYSUB] initialAttributes;
    IVYREC.IVYSUB = IVYREC.IVYSUB + 1;
  end

     /* blank line item field, so don't get led astray*/

  IVXREC.OP2LNINB = 0;

     /* ***   Any selections made by the user must be saved ****/
     /* *** from the screen before passing off.  This will  ****/
     /* *** be done if enter,pf7, or pf8 are pressed.       ****/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf11)
    if (IV0NM001 is modified)
      IV0NSEL();
    end
  end

     /* if invalid entry, go to flow*/

  if (IVYREC.IVYERR == "Y")
    exit stack;
  end

     /* pass to the appropriate screen depending on user entry*/

  if (converseVar.eventKey is enter)
    IV0NSEN();
  else
    if (converseVar.eventKey is pf1)
      XSPF1();
      converseLib.validationFailed(18);
      IVYREC.IVYERR = "Y";
    else
      if (converseVar.eventKey is pf3)
        IV0NS03();
      else
        if (converseVar.eventKey is pf4)
          IV0NS04();
        else
          if (converseVar.eventKey is pf7)
            if (IV0NW01.IV0NWSIX == 1)
              converseLib.validationFailed(4);
              IVYREC.IVYERR = "Y";
            else
              IV0NW01.IV0NWSNX = 1;
              IV0NW01.IV0NWSIX = IV0NW01.IV0NWSIX - 14;
              if (IV0NW01.IV0NWSIX < 1)
                IV0NW01.IV0NWSIX = 1;
              end
            end
          else
            if (converseVar.eventKey is pf8)
              if (IV0NW01.IV0NWIX > IV0NW01.IV0NWIMX)
                converseLib.validationFailed(5);
                IVYREC.IVYERR = "Y";
              else
                IV0NW01.IV0NWSIX = IV0NW01.IV0NWIX;
                IV0NW01.IV0NWSNX = IV0NW01.IV0NWNX;
              end
            else
              if (converseVar.eventKey is pf11) /* pass to summ 2*/
                IV0NWSSI = IV0NW01.IV0NWSIX; /* save off indexes*/
                IV0NWSSN = IV0NW01.IV0NWSNX;
              else
                if (converseVar.eventKey is pf13)
                  IV0NS13();
                else

                  if (converseVar.eventKey is pf14)
                    IV0NS14();
                  else
                    if (converseVar.eventKey is pf15)
                      IV0NS15();
                    else
                      if (converseVar.eventKey is pf16)
                        IV0NS16();
                      else
                        if (converseVar.eventKey is pf20)
                          IV0NS20(); /* order comment screen*/
                        else
                          if (converseVar.eventKey is pf21)
                            IV0NS21(); /* invoice comment screen*/
                          else
                            if (converseVar.eventKey is pf24)
                              IV0NS24(); /* invoice carton  screen*/
                            else
                              IVYREC.IVYERR = "Y";
                              converseLib.validationFailed(3); /* Invalid pfkey*/
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end


end // end IV0N010

// Prepare Summ 2 Display
Function IV0N015()

     /* ***   this process will fill the summ 2 screen    ****/
     /* *** based on the current line item array index    ****/
     /* *** There may be multiple display lines for a     ****/
     /* *** line item on this screen if multiple handling ****/
     /* *** charges have been assessed.                   ****/

     /* set screen index*/

  IV0NW01.IV0NWIX = IV0NW01.IV0NWSIX; /* move saved begin point to*/
  IV0NW01.IV0NWNX = IV0NW01.IV0NWSNX; /* working array indexes*/
  IVYREC.IVYSUB = 1; /* screen index*/
   /* ivysub1 used to clear any remaining lines from screen*/

     /* set screen indicator*/

  IV0NW01.IV0NWSCR = 3;

     /* loop thru and display lines*/

  while (IVYREC.IVYSUB < 15) /* while screen not yet full*/
    IV0NSUL();
                                   /* find line item from array and display*/
    IV0NW01.IV0NWIX = IV0NW01.IV0NWIX + 1; /* set array index up*/
    if (IV0NW01.IV0NWIX > IV0NW01.IV0NWIMX)
                                   /* if have processed whole array*/
      IVYREC.IVYSUB = IVYREC.IVYSUB + 1; /* set for next line for iv0nsc2*/
      if (IVYREC.IVYSUB < 15) /* if screen not full*/
        IV0NSC2(); /* clear remaining lines*/
      end
      IVYREC.IVYSUB = 15; /* set screen index to end loop*/
    else /* screen not full*/
      IVYREC.IVYSUB = IVYREC.IVYSUB + 1; /* prepare for next screen line*/
    end
  end


end // end IV0N015

// Converse Product Summary 2
Function IV0N020()


     /* **********************************************************/
     /* * this process presents the Product Summary 2 screen    **/
     /* * for review, and passes control to the next screen as  **/
     /* * requested                                             **/
     /* * 05-12-92  lgross  Allow pf20 to order comments        **/
     /* * 07/09/92  lgross  Allow PF21 to invoice comments      **/
     /* * 08/24/93  lgross  Allow PF23 to carton tracking       **/
     /* **********************************************************/


   /* *************************************************************/
  converse IV0NM002 ;
   /* *************************************************************/

     /* pass immediately if user selected fastpath*/

  if (IV0NM002.CATOAP != " " /* if fastpath selected*/
   || IV0NM002.CAITEM != " ") /* 11-12-87*/
    COMMAREA.CATOAP = IV0NM002.CATOAP; /* set up commarea*/
    COMMAREA.CAITEM = IV0NM002.CAITEM;
    XSIVXF(); /* 11-12-87 edit option/item*/
    if (converseVar.validationMsgNum == 0) /* 11-12-87*/
      XSEXIT(); /* attempt to pass*/
      IV0NM001.XXXMSG = COMMAREA.CAMSG; /* if get here, pass was*/
      set IV0NM002.CATOAP cursor, bold; /* unsuccessful - let user know*/
      set IV0NM002 alarm;
      converseLib.validationFailed(18);
    else
      set IV0NM002.CAITEM cursor, bold; /* 11-12-87*/
    end
    IVYREC.IVYERR = "Y";
    exit stack; /* 11-12-87*/
  end

     /* reset screen from any previous errors*/

  set IV0NM002.CATOAP initialAttributes; /* 11-12-87*/
  set IV0NM002.CAITEM initialAttributes; /* 11-12-87*/

     /* blank line item field, so don't get led astray*/

  IVXREC.OP2LNINB = 0;

     /* pass to the appropriate screen depending on user entry*/

  if (converseVar.eventKey is enter)
    IV0NSE2();
  else
    if (converseVar.eventKey is pf1)
      XSPF1();
      converseLib.validationFailed(18);
      IVYREC.IVYERR = "Y";
    else
      if (converseVar.eventKey is pf3)
        IV0NS03();
      else
        if (converseVar.eventKey is pf4)
          IV0NS04();
        else
          if (converseVar.eventKey is pf7)
            if (IV0NW01.IV0NWSIX == 1)
              converseLib.validationFailed(4);
              IVYREC.IVYERR = "Y";
            else
              IV0NW01.IV0NWSNX = 1;
              IV0NW01.IV0NWSIX = IV0NW01.IV0NWSIX - 14;
              if (IV0NW01.IV0NWSIX < 1)
                IV0NW01.IV0NWSIX = 1;
              end
            end
          else
            if (converseVar.eventKey is pf8)
              if (IV0NW01.IV0NWIX > IV0NW01.IV0NWIMX)
                converseLib.validationFailed(5);
                IVYREC.IVYERR = "Y";
              else
                IV0NW01.IV0NWSIX = IV0NW01.IV0NWIX;
                IV0NW01.IV0NWSNX = IV0NW01.IV0NWNX;
              end
            else
              if (converseVar.eventKey is pf10)
                IV0NW01.IV0NWSIX = IV0NW01.IV0NWSSI; /* restore saved*/
                IV0NW01.IV0NWSNX = IV0NW01.IV0NWSSN; /* indexes*/
                IV0NW01.IV0NWSSI = 0; /* reset so as not to*/
                IV0NW01.IV0NWSSN = 0; /* get led astray*/
              else
                if (converseVar.eventKey is pf13)
                  IV0NS13();
                else
                  if (converseVar.eventKey is pf14)
                    IV0NS14();
                  else
                    if (converseVar.eventKey is pf15)
                      IV0NS15();
                    else
                      if (converseVar.eventKey is pf16)
                        IV0NS16();
                      else
                        if (converseVar.eventKey is pf20) /* order comments*/
                          IV0NS20();
                        else
                          if (converseVar.eventKey is pf21) /* invoice comments*/
                            IV0NS21();
                          else
                            if (converseVar.eventKey is pf24) /* carton tracking*/
                              IV0NS24();
                            else
                              IVYREC.IVYERR = "Y"; /* invalid pfkey*/
                              converseLib.validationFailed(3);
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end


end // end IV0N020

// Prepare Detail Display
Function IV0N025()

     /* ***   This process fills the Product Detail screen ****/
     /* *** for the requested line item.  Most header info ****/
     /* *** is previously filled in, so must look up line  ****/
     /* *** item, size and scale records only.             ****/

     /* lookup line item*/

  if (IV0NW01.IV0NWSZX == 1) /* first display for this line item*/
    IV0NSLD();
  end

     /* lookup style record if don't have scale code*/
      /* (don't have if this line item hasn't been displayed on*/
       /* a summary screen)*/

  if (IV0NW01.SY4SZSCL[IV0NWIX] == " ")
    IV0NSTY();
  end

     /* look up scale record*/

  IV0NSCL();

     /* look up sizes and display*/

  IV0NSZL();


end // end IV0N025

// Converse Product Detail
Function IV0N030()

   /* **********************************************************/
   /* *  IV0N030 - CONVERSE PRODUCT DETAIL                    **/
   /* *                                                       **/
   /* *-------------------------------------------------------**/
   /* *  M A I N T E N A N C E    H I S T O R Y    L O G      **/
   /* *-------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                         **/
   /* *-------------------------------------------------------**/
   /* * 08-12-97  GDECKE  CORRECT PF7, PF8 ON IV0NM003        **/
   /* **********************************************************/
     /* ***   This process displays the Product Detail   ****/
     /* *** screen, then passes control to the next      ****/
     /* *** screen based on user input.                  ****/
     /* *** 05-12-92 lgross add pf20 to order comments   ****/
     /* *** 07-09-02 lgross add pf21 to invoice comments ****/

  converse IV0NM003 ;
   /* **********************************************************/

     /* pass immediately if user selected fastpath*/

  if (IV0NM003.CATOAP != " " /* if fastpath entered*/
   || IV0NM003.CAITEM != " ") /* 11-12-87*/
    COMMAREA.CATOAP = IV0NM003.CATOAP; /* setup commarea*/
    COMMAREA.CAITEM = IV0NM003.CAITEM;
    XSIVXF(); /* 11-12-87 edit option/item*/
    if (converseVar.validationMsgNum == 0) /* 11-12-87*/
      XSEXIT(); /* attempt to pass*/
      IV0NM003.XXXMSG = COMMAREA.CAMSG; /* if get here - pass was*/
      set IV0NM003.CATOAP cursor, bold; /* unsuccessful - let user know*/
      set IV0NM003 alarm;
      converseLib.validationFailed(18);
    else
      set IV0NM003.CAITEM cursor, bold; /* 11-12-87*/
    end
    IVYREC.IVYERR = "Y";
    exit stack; /* 11-12-87*/
  end

     /* reset screen from any previous errors*/

  set IV0NM003.CATOAP initialAttributes;
  set IV0NM003.CAITEM initialAttributes; /* 11-12-87*/

     /* unless scrolling, don't want ole line item any more*/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    /* next sentence*/
  else
    IVXREC.OP2LNINB = 0;
  end

     /* ***   Control is passed based first on the key   ****/
     /* *** pressed by the user, then be the option      ****/
     /* *** from the main menu screen.                   ****/

  if (converseVar.eventKey is enter)
    IV0NSE3();
  else
    if (converseVar.eventKey is pf1)
      XSPF1();
      converseLib.validationFailed(18);
      IVYREC.IVYERR = "Y";
    else
      if (converseVar.eventKey is pf3)
        IV0NS03();
      else
        if (converseVar.eventKey is pf4)
          IV0NS04();
        else
          if (converseVar.eventKey is pf7)
            if (IV0NW01.IV0NWSZX == 1)
              /* MOVE 4 TO EZEMNO;*/
              /* MOVE 'Y' TO IVYREC.IVYERR;*/
              IV0NW01.IV0NWSZX = 1;
              IVXREC.SY5SZID = 0;
            else
              IVXREC.SY5SZID = 0;
              if (IV0NW01.IV0NWSZX == 41)
                if (IV3REC.IV3NBRSZ > 39)
                  IV0NW01.IV0NWSZX = 40;
                else
                  if (IV3REC.IV3NBRSZ > 26)
                    IV0NW01.IV0NWSZX = 27;
                  else
                    if (IV3REC.IV3NBRSZ > 13)
                      IV0NW01.IV0NWSZX = 14;
                    end
                  end
                end
              end
              IV0NW01.IV0NWSZX = IV0NW01.IV0NWSZX - 13;
              if (IV0NWSZX < 1)
                IV0NW01.IV0NWSZX = 1;
              end
            end
          else
            if (converseVar.eventKey is pf8)
              if (IV0NW01.IV0NWZX > IV3REC.IV3NBRSZ)
                converseLib.validationFailed(5);
                IVYREC.IVYERR = "Y";
              else
                IVXREC.SY5SZID = IV4REC.SY5SZID;
                IV0NW01.IV0NWSZX = IV0NW01.IV0NWZX;
              end
            else
              if (converseVar.eventKey is pf9)
                if (IV0NW01.IV0NWISF[IV0NWIX] == "S")
                  IV0NW01.IV0NWISF[IV0NWIX] = "V"; /* mark as viewed*/
                end
                              /* flow will pass to iv0ns05 for prod summ*/
              else
                if (converseVar.eventKey is pf13)
                  IV0NS13();
                else
                  if (converseVar.eventKey is pf14)
                    IV0NS14();
                  else
                    if (converseVar.eventKey is pf15)
                      IV0NS15();
                    else
                      if (converseVar.eventKey is pf16)
                        IV0NS16();
                      else
                        if (converseVar.eventKey is pf20) /* order comments*/
                          IV0NS20();
                        else
                          if (converseVar.eventKey is pf21) /* invoice comments*/
                            IV0NS21();
                          else
                            if (converseVar.eventKey is pf24) /**/
                              IV0NS24();
                            else
                              IVYREC.IVYERR = "Y";
                              converseLib.validationFailed(3);
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end


end // end IV0N030

// CALL IV1880 - GET CU PROD SKU
Function IV0NS-CALL-IV1880()
   /* CALL IO MODULE IV1880 TO ACCESS VIEW DINVC.VIVSKU01, VIVITM01*/
   /* AND VIVSIZ01 TO SUPPORT CUST PROD ID BY SIZE.*/
   /* *******************************************************************/
   /* *       M A I N T E N A N C E     H I S T O R Y    L O G         **/
   /* *----------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                                  **/
   /* *----------------------------------------------------------------**/
   /* * 12-18-96  GDECKE  CALL NEW IOMOD IV1880 - CHECK RETURN CODE    **/
   /* * 08-12-97  GDECKE  REMOVE OVERLAPPING MOVES                     **/
   /* *******************************************************************/
   /*  */
  IV0NW02.IV0NW-CURR-PROC-NM = "IV0NS-CALL-IV1880";

    /* NEED TO SAVE RETURNDE VALUES FROM VIVITM02 AND VIVSIZ02 WHEN*/
    /* DOING A 'NEXT' FUNCTION.*/

  if (IV0NW-IOMOD-FUNCTION == "N1"
   || IV0NW-IOMOD-FUNCTION == "N2")
    /* NEXT SENTENCE*/
  else
    move IV3REC to VIVITM02 withV60Compat;
    move IV4REC to VIVSIZ02 withV60Compat;
  end

  IVYREC.IVYSUB3 = 1;
  while (IVYREC.IVYSUB3 < 21)
    IV0NW-PARM-PARAGRAPH-GRP[IVYSUB3] = " ";
    IVYREC.IVYSUB3 = IVYREC.IVYSUB3 + 1;
  end

  if (IV0NW-IOMOD-FUNCTION == "N1")
    VIVITM02.IV0PARTN = IV0NW01.IV-IVC-PART-CHAR;
    VIVITM02.IV0IVCID = IV0NW01.IV-IVC-ID;
    VIVITM02.OP2LNINB = IV0NW01.OP-LINE-ITEM-NBR;
    VIVITM02.KUIPRDID = IV0NWPRM.CU-CUST-PROD-ID;
    IV0NWPRM.IV0NW-MORE-SKU-SUMM-LINES = IV0NW01.IV0NW-MORE-SKU-SUMM-LINES;
  end

  if (IV0NW-IOMOD-FUNCTION == "N2")
    VIVSIZ02.IV0PARTN = IV0NW01.IV-IVC-PART-CHAR;
    VIVSIZ02.IV0IVCID = IV0NW01.IV-IVC-ID;
    VIVSIZ02.OP2LNINB = IV0NW01.OP-LINE-ITEM-NBR;
    IV0NWPRM.IV0NW-MORE-SKU-SUMM-LINES = IV0NW01.IV0NW-MORE-SKU-SUMM-LINES;
  end

  call "IV1880" (IV0NWMOD, SQLCA, VIVSKU01, VIVITM02, VIVSIZ02, IV0NWPRM) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    IV0NW02.IV0NW-DEADLOCK-FL = "N";
    IV0NW02.IV0NW-DEADLOCK-CT = 0; /* deadlock count*/
    move VIVITM02 to IV3REC withV60Compat;
    move VIVSIZ02 to IV4REC withV60Compat;

    if (IV0NW-IOMOD-FUNCTION == "S1"
     || IV0NW-IOMOD-FUNCTION == "N1")
      IV0NW01.IV-IVC-PART-CHAR = VIVITM02.IV0PARTN;
      IV0NW01.IV-IVC-ID = VIVITM02.IV0IVCID;
      IV0NW01.OP-LINE-ITEM-NBR = VIVITM02.OP2LNINB;
      IV0NW01.IV0NW-MORE-SKU-SUMM-LINES = IV0NWPRM.IV0NW-MORE-SKU-SUMM-LINES;
    end

    if (IV0NW-IOMOD-FUNCTION == "S2"
     || IV0NW-IOMOD-FUNCTION == "N2")
      IV0NW01.IV-IVC-PART-CHAR = VIVSIZ02.IV0PARTN;
      IV0NW01.IV-IVC-ID = VIVSIZ02.IV0IVCID;
      IV0NW01.OP-LINE-ITEM-NBR = VIVSIZ02.OP2LNINB;
      IV0NW01.IV0NW-MORE-SKU-SUMM-LINES = IV0NWPRM.IV0NW-MORE-SKU-SUMM-LINES;
    end
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    IV0NW02.IV0NW-DEADLOCK-FL = "N";
    IV0NW02.IV0NW-DEADLOCK-CT = 0; /* deadlock count*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* deadlock*/
    IV0NW02.IV0NW-DEADLOCK-CT = IV0NW02.IV0NW-DEADLOCK-CT + 1;
    if (IV0NW02.IV0NW-DEADLOCK-CT > 2)
      converseLib.validationFailed(85); /* database busy*/
      IV0NW02.IV0NW-DEADLOCK-FL = "N"; /* deadlock flag*/
      IV0NW02.IV0NW-ERROR-FLAG = "Y"; /* error flag*/
    end
    return;
  end

  TA1REC.TA1PGMNM = "IV0N    ";
  TA1REC.TA1MAP = "IV0NM001";
  TA1REC.TA1LOCAT[3] = "IV0NS-CALL-IV1880";
  TA1REC.TA1LOCAT[4] = "VIVSKU01";
  TA1REC.TA1DBASE = "DINVC"; /* database*/
  TA1REC.TA1TBLVU = "VIVSKU01"; /* table view*/
  IV0NW02.IV0NW-DISP-IVC-ID = VIVSKU01.IV-IVC-ID; /* REFORMAT*/
  TA1REC.TA1TBLKE = IV0NW02.IV0NW-DISP-IVC-ID; /* table key*/

  XSIVS02(); /* error diagnosis routine*/

end // end IV0NS-CALL-IV1880

// FETCH CUST PROD ID'S BY SIZE
Function IV0NS-CU-PROD-NM()
   /* *  IV0NS-CU-PROD-NM*/
   /* **/
   /* * CALL SUBROUTINE CU1710 TO GET THE CUSTOMER PRODUCT CROSS REFERENCE*/
   /* * PRODUCT NAME.*/
   /* **/
   /* **********************************************************************/
   /* *   M A I N T E N A N C E    H I S T O R Y    L O G                 **/
   /* *-------------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                                     **/
   /* *-------------------------------------------------------------------**/
   /* * 01-27-97  GDECKE  ADD STATEMENT GROUP                             **/
   /* **********************************************************************/
   /* **/
   /* **/
   /* SET WCU1710 EMPTY;*/
  IV0NS-CU1710-EMPTY();
   /*  */
  WCU1710-INQUIRY-OPTION = "2";
  WCU1710-IN-CU-CO-ID = IVXREC.KUCCOID;
  WCU1710-IN-CU-CUST-PROD-ID = IV0NWPRM.CU-CUST-PROD-ID;
  WCU1710-XNX-DEPT-ID-XREF = IVXREC.XNXCD;
  WCU1710-IN-GET-XTRA-SIZE-FL = "N";
  CU-PROD-XREF-EDT = IVAREC.OP1ORCDT;
  WCU1710-IN-OP-CUST-ORD-ID = 0;
  WCU1710-IN-OP-ORD-PART-CHAR = " ";
  WCU1710-IN-SY-STY-NBR = " "; /* M*/
  WCU1710-IN-SY-COLR-CD-ID = " ";
  WCU1710-IN-XDM-DIM-CD = " ";
  WCU1710-IN-CU-PROD-SZ-ID = " ";
  WCU1710-IN-XQA-QUAL-CD = " ";
  WCU1710-IN-XGP-GPC-CD = " ";
  move WCU1710-PASSING-RECORD to IV0NW-DATA-RECORD withV60Compat;

  call "CU1710" (IV0NWCUS) {isNoRefresh = yes, isExternal = yes};

  move IV0NW-DATA-RECORD to WCU1710-PASSING-RECORD withV60Compat;

  if (WCU1710-RETURN-CODE != 0)
    WCU1710.CU-PROD-NM[1] = "NAME NOT FOUND";
  end

end // end IV0NS-CU-PROD-NM

// FETCH CUST PROD ID'S BY SIZE
Function IV0NS-CU1710-EMPTY()
   /* *  IV0NS-CU1710-EMPTY*/
   /* **/
   /* * CALL SUBROUTINE CU1710 TO GET THE CUSTOMER PRODUCT CROSS REFERENCE*/
   /* * PRODUCT NAME.*/
   /* **/
   /* **********************************************************************/
   /* *   M A I N T E N A N C E    H I S T O R Y    L O G                 **/
   /* *-------------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                                     **/
   /* *-------------------------------------------------------------------**/
   /* * 02-10-97  GDECKE  ADD STATEMENT GROUP                             **/
   /* **********************************************************************/
   /* **/
   /* **/
  set WCU1710 empty;
end // end IV0NS-CU1710-EMPTY

// Select Set of Line Items
Function IV0NS-NEXT-IVITM()
   /* ************************************************************/
   /* *   M A I N T E N A N C E     H I S T O R Y    L O G      **/
   /* *---------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                           **/
   /* *---------------------------------------------------------**/
   /* * 01-07-96  GDECKE  CALL IV1880 INSTEAD OF IO1100 TO GET  **/
   /* * DINVC.VIVITM01 LINES.                                   **/
   /* ************************************************************/

     /* ***   this statement group does the select NEXT ***/
     /* *** for line items for the invoice             ****/

     /* blank records*/

  set IV3REC empty;
  set SQLCA empty;


     /* call io mod with select option 1 for all line items*/

   /* **     CALL IO1100 'S1',SQLCA,IV3REC (NOMAPS;*/
  IV0NW02.IV0NW-DEADLOCK-CT = 0;
  IV0NW02.IV0NW-DEADLOCK-FL = "Y";
  IV0NWMOD.IV0NW-IOMOD-FUNCTION = "N1";

  while (IV0NW02.IV0NW-DEADLOCK-FL == "Y")
    IV0NS-CALL-IV1880();
  end

  if (IV0NW02.IV0NW-DEADLOCK-CT == 0)
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
      return;
    end
  end

  TA1REC.TA1PGMNM = "IV0N    ";
  TA1REC.TA1MAP = "IV0NM001";
  TA1REC.TA1DBASE = "DINVC   ";
  TA1REC.TA1TBLVU = "VIVITM02";
  TA1REC.TA1TBLKE = IV3REC.IV3KEY;
  TA1REC.TA1LOCAT[3] = "IV0NS-NEXT-IVITM"; /* 10-30-87*/
  TA1REC.TA1LOCAT[4] = "IV1880";
  XSIVS02();


end // end IV0NS-NEXT-IVITM

// PF3 Pressed Actions
Function IV0NS03()


  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  COMMAREA.CATOAP = "IV0A";
  XSEXIT(); /* transfer to invoicing main menu*/
  converseLib.validationFailed(15); /* transfer failed*/
  IVYREC.IVYERR = "Y"; /* mark as error*/


end // end IV0NS03

// PF4 Pressed Actions
Function IV0NS04()


  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  COMMAREA.CATOAP = "MN0M";
  XSEXIT(); /* transfer to system menu*/
  converseLib.validationFailed(15); /* transfer failed*/
  IVYREC.IVYERR = "Y"; /* mark as error*/


end // end IV0NS04

// PF13 Pressed Actions
Function IV0NS13()


  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  COMMAREA.CATOAP = "IV0G";
  XSEXIT(); /* transfer to Header 1*/
  converseLib.validationFailed(15); /* transfer failed*/
  IVYREC.IVYERR = "Y"; /* mark as error*/


end // end IV0NS13

// PF14 Pressed Actions
Function IV0NS14()

  COMMAREA.CAUSERA = " ";
  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  COMMAREA.CATOAP = "IV0H";
  XSEXIT();
  converseLib.validationFailed(15); /* invalid security to xfer*/
  IVYREC.IVYERR = "Y"; /* mark as error*/
  exit stack;


end // end IV0NS14

// PF15 Pressed Actions
Function IV0NS15()

  COMMAREA.CAUSERA = " ";
  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  COMMAREA.CATOAP = "IV0J";
  XSEXIT();
  converseLib.validationFailed(15); /* invalid security to xfer*/
  IVYREC.IVYERR = "Y"; /* mark as error*/
  exit stack;
end // end IV0NS15

// PF16 Pressed Actions
Function IV0NS16()

  COMMAREA.CAUSERA = " ";
  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  COMMAREA.CATOAP = "IV0I";
  XSEXIT();
  converseLib.validationFailed(15); /* invalid security to xfer*/
  IVYREC.IVYERR = "Y"; /* mark as error*/
  exit stack;


end // end IV0NS16

// PF20 Pressed Actions
Function IV0NS20()

   /* ****   pass to order comment screen*/

  COMMAREA.CAUSERA = " ";
  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  COMMAREA.CATOAP = "IV0C";
  XSEXIT();
  converseLib.validationFailed(15); /* invalid security to xfer*/
  IVYREC.IVYERR = "Y"; /* mark as error*/
  exit stack;


end // end IV0NS20

Function IV0NS21()

   /* ****   pass to order comment screen*/

  COMMAREA.CAUSERA = " ";
  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  COMMAREA.CATOAP = "IV0U";
  XSEXIT();
  converseLib.validationFailed(15); /* invalid security to xfer*/
  IVYREC.IVYERR = "Y"; /* mark as error*/
  exit stack;


end // end IV0NS21

// PF24 KEY TO CARTON SCREEN
Function IV0NS24()

   /* ****   pass to invoice carton tracking screen*/

  COMMAREA.CAUSERA = " ";
  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  COMMAREA.CATOAP = "IV0V";
  XSEXIT();
  converseLib.validationFailed(15); /* invalid security to xfer*/
  IVYREC.IVYERR = "Y"; /* mark as error*/
  exit stack;


end // end IV0NS24

// For All Selection, Set all 'S'
Function IV0NSAL()

     /* ***   this statement group has the chore of looping ****/
     /* *** thru the line item array and marking each entry ****/
     /* *** with an 's', because some silly user has decided****/
     /* *** to display all detail screen for the invoice.   ****/

     /* set index*/

  IVYREC.IVYSUB1 = 1;

     /* loop thru and mark each entry*/

  while (IV0NW01.IV0NWIMX >= IVYREC.IVYSUB1)
    IV0NW01.IV0NWISF[IVYSUB1] = "S";
    IVYREC.IVYSUB1 = IVYREC.IVYSUB1 + 1;
  end
end // end IV0NSAL

// Clear lines on Summ 1 screen
Function IV0NSC1()

     /* ***   This statement group clears out any lines not ****/
     /* *** filled by this screen that may have stuff left  ****/
     /* *** over from last display.  Also sets extra select ****/
     /* *** lines to not have tab stops.                    ****/

     /* move screen working index to new work index, so ivysub*/
     /* value doesn't get corrupted for iv0nsnl*/

  IVYREC.IVYSUB1 = IVYREC.IVYSUB;

     /* loop thru and set any unused lines*/

  while (IVYREC.IVYSUB1 < 15)
    set IV0NM001.IV0NMSEL[IVYSUB1] skip, invisible;
    IV0NM001.IV0NMPRD[IVYSUB1] = " ";
    IV0NM001.IV0NMDSC[IVYSUB1] = " ";
    IV0NM001.XLCCD[IVYSUB1] = " ";
    IV0NM001.IV3LNSQ[IVYSUB1] = 0;
    IV0NM001.IV3NLNUP[IVYSUB1] = 0;
    IV0NM001.OP2PRCOF[IVYSUB1] = " ";
    IV0NM001.IV3NLNMA[IVYSUB1] = 0;
    IV0NM001.IV0NMXHD[IVYSUB1] = " ";
    IVYREC.IVYSUB1 = IVYREC.IVYSUB1 + 1;
  end


end // end IV0NSC1

// Clear lines on Summ 2 screen
Function IV0NSC2()

     /* ***   This statement group clears out any lines not ****/
     /* *** filled by this screen that may have stuff left  ****/
     /* *** over from last display.                         ****/

     /* move screen working index to new work index, so ivysub*/
     /* value doesn't get corrupted*/

  IVYREC.IVYSUB1 = IVYREC.IVYSUB;

     /* loop thru and set any unused lines*/

  while (IVYREC.IVYSUB1 < 15)
    IV0NM002.IV0NMPRD[IVYSUB1] = " ";
    IV0NM002.IV0NMDSS[IVYSUB1] = " ";
    IV0NM002.XSDCD[IVYSUB1] = " ";
    IV0NM002.XPGCD[IVYSUB1] = " ";
    IV0NM002.GLACD[IVYSUB1] = " ";
    IV0NM002.XHDABRV[IVYSUB1] = " ";
    IV0NM002.IV6GLPCT[IVYSUB1] = 0;
    IV0NM002.IV3LNSQ[IVYSUB1] = 0;
    IV0NM002.IV6GLAMT[IVYSUB1] = 0;
    IVYREC.IVYSUB1 = IVYREC.IVYSUB1 + 1;
  end


end // end IV0NSC2

// Clear lines - Detail screen
Function IV0NSC3()

     /* ***   This statement group clears out any lines not ****/
     /* *** filled by this screen that may have stuff left  ****/
     /* *** over from last display.                         ****/

     /* move screen working index to new work index, so ivysub*/
     /* value doesn't get corrupted.  Thru with ivysub1 by now*/
     /* from iv0nsiz.*/

  IVYREC.IVYSUB1 = IVYREC.IVYSUB;

     /* loop thru and set any unused lines*/

  while (IVYREC.IVYSUB1 < 14)
    IV0NM003.SY4IDDSC[IVYSUB1] = " ";
    IV0NM003.IV4OQ[IVYSUB1] = 0;
    IV0NM003.IV4SHPQ[IVYSUB1] = 0;
    IV0NM003.IV4BOQ[IVYSUB1] = 0;
    IV0NM003.IV4NUP[IVYSUB1] = 0;
    IV0NM003.OP2PRCOF[IVYSUB1] = " ";
    IV0NM003.IV0NMSZT[IVYSUB1] = 0;
    IV0NM003.IV4GUP[IVYSUB1] = 0;
    IVYREC.IVYSUB1 = IVYREC.IVYSUB1 + 1;
  end


end // end IV0NSC3

// Read Scale Record
Function IV0NSCL()
     /* ***   this statement group is used to look up ****/
     /* *** the scale record for the style            ****/

     /* blank records for scale read*/

  set SY4REC empty;
  set SQLCA empty;

    /* set up key for read*/

  SY4REC.SY4SZSCL = IV0NW01.SY4SZSCL[IV0NWIX];

   /* read scale record*/

  call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes};


  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1PGMNM = "IV0N    ";
    TA1REC.TA1MAP = "IV0NM003";
    TA1REC.TA1DBASE = "DPROD   ";
    TA1REC.TA1TBLVU = "VSCALE01";
    TA1REC.TA1TBLKE = SY4REC.SY4SZSCL;
    TA1REC.TA1LOCAT[3] = "IV0NSCL"; /* 10-30-87*/
    TA1REC.TA1LOCAT[4] = "IO0040";
    XSIVS02();
  end


end // end IV0NSCL

// Display Line Item on Summ 2
Function IV0NSD2()
   /* ***************************************************************/
   /* *    M A I N T E N A N C E    H I S T O R Y    L O G         **/
   /* *------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                              **/
   /* *------------------------------------------------------------**/
   /* * 01-27-97  GDECKE  GET PRODUCT NAME USING CU1710            **/
   /* ***************************************************************/

     /* ***   this statement group fills the product summary ****/
     /* *** 2 screen.  Look up to GL for any handling charge ****/
     /* *** codes.  Also calls for customer product id       ****/
     /* *** name look up if needed.                          ****/

     /* move into screen*/

  IV0NM002.XSDCD[IVYSUB] = IV3REC.PC2INSEG; /* move in spec*/
  IV0NM002.XPGCD[IVYSUB] = IV3REC.XPGCD; /* move in package type*/

   /* move ship quantity to map 2*/
  IV0NM002.IV3LNSQ[IVYSUB] = IV0NWTB3.IV-LN-SHIPPED-QTY[IV0NWIX]; /* move in qty shipped*/

   /* MOVE IV3REC.IV3LNSQ IV0NM002.IV3LNSQ(IVYSUB);/* move in qty shipped*/

    /* if needed, look up customer product name*/

  if (IV3REC.KUIPRDID != " ") /* if has a customer product id*/

    /* MOVE CUST PROD ID FROM W/S TABLE TO MAP, NOT FROM IV3REC*/
    IV0NW02.IV0NW-CU-CUST-PROD-ID = IV0NWTBL.IV0NW-CU-CUST-PROD-ID[IV0NWIX];
    IV0NW02.IV0NW-CU-CUST-PROD-ID2 = IV0NWTB2.IV0NW-CU-CUST-PROD-ID2[IV0NWIX];
    IV0NM002.IV0NMPRD[IVYSUB] = IV0NW02.CU-CUST-PROD-ID; /* use as product id*/

      /* MOVE IV3REC.KUIPRDID TO*/
      /* IV0NM002.IV0NMPRD(IVYSUB); /* use as PRODUCT ID*/
    IV0NS-CU-PROD-NM(); /* look up cust prod id for name*/
    if (WCU1710.CU-PROD-NM[1] == " "
     || WCU1710.CU-PROD-NM[1] == "NAME NOT FOUND")
      IV0NSDS();
      IV0NM002.IV0NMDSS[IVYSUB] = IV0NW01.IV0NWFDC; /* move desc*/
    else
      IV0NM002.IV0NMDSS[IVYSUB] = WCU1710.CU-PROD-NM[1];
    end
  else
    IV0NW01.SY1STNBR = IV3REC.SY1STNBR; /* format nike prod id*/
    IV0NW01.SY2CLRID = IV3REC.SY2CLRID;
    IV0NW01.XDMCD = IV3REC.XDMCD;
    IV0NM002.IV0NMPRD[IVYSUB] = IV0NW01.IV0NWFID;
    IV0NSDS(); /* look up style name and color abrv*/
    IV0NM002.IV0NMDSS[IVYSUB] = IV0NW01.IV0NWFDC; /* move frmtd desc*/
  end

     /* find gl for any handling charges*/

  if (IV3REC.XHDCD[1] != " ")
    IV0NSGL();
     /* if overflow on handling charge lines,*/
    if (IVYREC.IVYSUB > 14) /* want to redisplay whole line*/
      IV0NW01.IV0NWIX = IV0NW01.IV0NWIX - 1;
                                   /* item on next screen , so set*/
    end /* index down*/
  else /* if none, clear fields*/
    IV0NM002.GLACD[IVYSUB] = " ";
    IV0NM002.IV6GLPCT[IVYSUB] = 0;
    IV0NM002.IV6GLAMT[IVYSUB] = 0;
    IV0NM002.XHDABRV[IVYSUB] = " ";
  end


end // end IV0NSD2

// Display Line Item
Function IV0NSDL()
   /* *****************************************************************/
   /* *   M A I N T E N A N C E     H I S T O R Y     L O G          **/
   /* *--------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                                **/
   /* *--------------------------------------------------------------**/
   /* * 01-24-97  GDECKE  MOVE CUST PROD GROUP QTY,PRICE, AMT TO MAP.**/
   /* *****************************************************************/
     /* ***   this statement group fills the product summary ****/
     /* *** 1 screen.  Also calls for customer product id    ****/
     /* *** name look up if needed.                          ****/

     /* move into screen*/

  IV0NM001.IV0NMSEL[IVYSUB] = IV0NW01.IV0NWISF[IV0NWIX];
  IV0NM001.XLCCD[IVYSUB] = IV3REC.XLCCD; /* move in life cycle*/

   /* MOVE SHIPPED QUANTITY*/
  IV0NM001.IV3LNSQ[IVYSUB] = IV0NWTB3.IV-LN-SHIPPED-QTY[IV0NWIX];

   /* MOVE IV3REC.IV3LNSQ TO IV0NM001.IV3LNSQ(IVYSUB);/* move in ship qty*/

   /* MOVE UNIT PRICE*/
  IV0NM001.IV3NLNUP[IVYSUB] = IV0NWTB3.IV-NET-UNIT-PRC[IV0NWIX];

                                  /* MOVE IV3REC.IV3NLNUP TO*/
                                   /* IV0NM001.IV3NLNUP(IVYSUB);/* move in*/
                                   /* unit price*/

  if (IV3REC.OP2PRCOF == "G") /* if price ovrd flag = global order prc*/
                                   /* ovrd*/
    IV0NM001.OP2PRCOF[IVYSUB] = "Y"; /* move 'Y' to prc override flag*/
  else
    IV0NM001.OP2PRCOF[IVYSUB] = IV3REC.OP2PRCOF; /* move price ovrd flag*/
  end

   /* MOVE MERCH AMOUNT*/
  IV0NM001.IV3NLNMA[IVYSUB] = IV0NWTB3.IV-NET-LN-MRCH-AMT[IV0NWIX];

   /* MOVE IV3REC.IV3NLNMA TO IV0NM001.IV3NLNMA(IVYSUB);*/
                                   /* move in net mrch amt*/

     /* set handling charge flag if code 1 is non-blank*/

  if (IV3REC.XHDCD[1] != " ")
    IV0NM001.IV0NMXHD[IVYSUB] = "*";
  else
    IV0NM001.IV0NMXHD[IVYSUB] = " ";
  end

    /* if needed, look up customer product name*/

  if (IV3REC.KUIPRDID != " ") /* if has a customer product id*/

    /* MOVE PRODUCT ID FROM SAVE TABLE INSTEAD OF FROM IV3REC*/
    IV0NW02.IV0NW-CU-CUST-PROD-ID = IV0NWTBL.IV0NW-CU-CUST-PROD-ID[IV0NWIX];
    IV0NW02.IV0NW-CU-CUST-PROD-ID2 = IV0NWTB2.IV0NW-CU-CUST-PROD-ID2[IV0NWIX];
    IV0NM001.IV0NMPRD[IVYSUB] = IV0NW02.CU-CUST-PROD-ID;

    /* MOVE IV3REC.KUIPRDID TO IV0NM001.IV0NMPRD(IVYSUB);*/
    IV0NS-CU-PROD-NM(); /* look up cust prod id for name*/
    if (WCU1710.CU-PROD-NM[1] == " "
     || WCU1710.CU-PROD-NM[1] == "NAME NOT FOUND")
      IV0NSDS(); /* look up style name and color abrv*/
      IV0NM001.IV0NMDSC[IVYSUB] = IV0NW01.IV0NWFDC;
                                   /* move formatted desc*/
    else
      IV0NM001.IV0NMDSC[IVYSUB] = WCU1710.CU-PROD-NM[1]; /* move in descrip*/
    end
  else
    IV0NW01.SY1STNBR = IV3REC.SY1STNBR; /* format nike prod id*/
    IV0NW01.SY2CLRID = IV3REC.SY2CLRID;
    IV0NW01.XDMCD = IV3REC.XDMCD;
    IV0NM001.IV0NMPRD[IVYSUB] = IV0NW01.IV0NWFID;
    IV0NSDS(); /* look up style name and color abrv*/
    IV0NM001.IV0NMDSC[IVYSUB] = IV0NW01.IV0NWFDC; /* move formatted desc*/
  end


end // end IV0NSDL

// Look up Style and Color Descs
Function IV0NSDS()
     /* ***   this statement group is used to look up ****/
     /* *** the style and color descriptions          ****/

     /* blank records for style read*/

  set SY1REC empty;
  set SQLCA empty;

    /* set up key for read*/

  SY1REC.XGPCD = IVXREC.XGPCD;
  SY1REC.SY1STNBR = IV3REC.SY1STNBR;

   /* read style record for short name*/

  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes};


  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1PGMNM = "IV0N    ";
    TA1REC.TA1MAP = "IV0NM001";
    TA1REC.TA1DBASE = "DPROD   ";
    TA1REC.TA1TBLVU = "VSTYLE01";
    TA1REC.TA1TBLKE = SY1REC.SY1KEY;
    TA1REC.TA1LOCAT[3] = "IV0NSDS";
    TA1REC.TA1LOCAT[4] = "IO0120";
    XSIVS02();
  end


  IV0NW01.SY1SSTNM = SY1REC.SY1SSTNM; /* move in to work desc format*/

     /* also save scale in array to save fetch by detail*/

  IV0NW01.SY4SZSCL[IV0NWIX] = SY1REC.SY4SZSCL;

     /* blank records for color read*/

  set SY2REC empty;
  set SQLCA empty;

    /* set up key for read*/

  SY2REC.XGPCD = IVXREC.XGPCD;
  SY2REC.SY1STNBR = IV3REC.SY1STNBR;
  SY2REC.SY2CLRID = IV3REC.SY2CLRID;
  SY2REC.XDMCD = IV3REC.XDMCD;

   /* read color record for abrv desc*/

  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes};


  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1PGMNM = "IV0N    ";
    TA1REC.TA1MAP = "IV0NM001";
    TA1REC.TA1DBASE = "DPROD   ";
    TA1REC.TA1TBLVU = "VCOLOR01";
    TA1REC.TA1TBLKE = SY2REC.SY2KEY;
    TA1REC.TA1LOCAT[3] = "IV0NSDS"; /* 10-30-87*/
    TA1REC.TA1LOCAT[4] = "IO0130";
    XSIVS02();
  end


  IV0NW01.SY2CLRAB = SY2REC.SY2CLRAB; /* move in to work desc format*/


end // end IV0NSDS

// Enter Key Pressed Actions
Function IV0NSE2()

     /* ***   this statement group handles the case where  ****/
     /* *** the enter key was pressed on the summ 2 screen.****/
     /* *** Passing is based on main menu option value.    ****/

  COMMAREA.CAUSERA = IVXREC.IVXGROUP;

  if (IVXREC.IVXOPTN == 1
   || IVXREC.IVXOPTN == 2
   || IVXREC.IVXOPTN == 3
   || IVXREC.IVXOPTN == 4)
    if (IVXREC.IVXTYPFL == "I")
      COMMAREA.CAFROMAP = "IV0N";
      COMMAREA.CACURRAP = "IV0A";
      transfer to transaction "IV0A" passing COMMAREA; /* transfer to main menu*/
    else
      COMMAREA.CAFROMAP = "IV0N";
      XSIVSEN(); /* routine to determine if any*/
                                   /* selections, and pass*/
    end
  else
    if (IVXREC.IVXOPTN == 6)
      COMMAREA.CAFROMAP = "IV0N";
      COMMAREA.CACURRAP = "IV0G";
      transfer to transaction "IV0G" passing COMMAREA; /* transfer to Header 1*/
    else
      if (IVXREC.IVXOPTN == 7)
        COMMAREA.CAFROMAP = "IV0N";
        COMMAREA.CACURRAP = "IV0H";
        transfer to transaction "IV0H" passing COMMAREA; /* transfer to commissions & payment*/
      else
        if (IVXREC.IVXOPTN == 8)
          COMMAREA.CAFROMAP = "IV0N";
          COMMAREA.CACURRAP = "IV0I";
          transfer to transaction "IV0I" passing COMMAREA; /* transfer to address*/
        else
          if (IVXREC.IVXOPTN == 9)
            COMMAREA.CAFROMAP = "IV0N";
            COMMAREA.CACURRAP = "IV0J";
            transfer to transaction "IV0J" passing COMMAREA; /* transfer to messages & instr*/
          end
        end
      end
    end
  end


end // end IV0NSE2

// Enter Key Pressed from Detail
Function IV0NSE3()
   /* ***************************************************************/
   /* *   M A I N T E N A N C E    H I S T O R Y    L O G          **/
   /* *------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                              **/
   /* *------------------------------------------------------------**/
   /* * 01-08-96  GDECKE  HANDLE CUSTOMER PRODUCT ID BY SIZE       **/
   /* ***************************************************************/

     /* ***   this statement group handles the case where  ****/
     /* *** the enter key was pressed on the Detail screen.****/
     /* *** Loop thru user selections - if another found,  ****/
     /* *** set line number.  Also be sure to set current  ****/
     /* *** selection code value to 'V'.                   ****/

     /* if user selections, set current to V, then check for next*/

  if (IV0NW01.IV0NWISF[IV0NWIX] == "S")
    IV0NW01.IV0NWISF[IV0NWIX] = "V";
    IVYREC.IVYSUB2 = IV0NW01.IV0NWIX + 1; /* start loop with next entry*/

       /* loop thru checking for additional selections.  If found*/
        /* set up for next line item's detail screen*/

    while (IVYREC.IVYSUB2 <= IV0NW01.IV0NWIMX
     && IVXREC.OP2LNINB == 0)
      if (IV0NW01.IV0NWISF[IVYSUB2] == "S")
        IVXREC.OP2LNINB = IV0NW01.OP2LNINB[IVYSUB2];
        IV0NW02.IV0NW-CU-CUST-PROD-ID = IV0NWTBL.IV0NW-CU-CUST-PROD-ID[IVYSUB2];
        IV0NW02.IV0NW-CU-CUST-PROD-ID2 = IV0NWTB2.IV0NW-CU-CUST-PROD-ID2[IVYSUB2];
        IV0NWPRM.CU-CUST-PROD-ID = IV0NW02.CU-CUST-PROD-ID;

        IV0NW01.IV0NWIX = IVYREC.IVYSUB2;
        IV0NW01.IV0NWSZX = 1;
      else
        IVYREC.IVYSUB2 = IVYREC.IVYSUB2 + 1;
      end
    end
  end


end // end IV0NSE3

// Save off Selections to array
Function IV0NSEL()

     /* ***   This statement group checks for any selections ****/
     /* *** made by the user on the summary 1 screen, and    ****/
     /* *** records them in the line item array.             ****/

     /* set indexes*/

  IVYREC.IVYSUB = 1;
  IV0NW01.IV0NWIX = IV0NW01.IV0NWSIX;

     /* loop thru and record selections*/

  while (IVYREC.IVYSUB < 15
   && IV0NW01.IV0NWIX <= IV0NW01.IV0NWIMX) /* don't fall off end of array*/
    if (IV0NM001.IV0NMSEL[IVYSUB] == " " /* no entry, or erase selection*/
     || IV0NM001.IV0NMSEL[IVYSUB] == "S" /* line selected*/
     || IV0NM001.IV0NMSEL[IVYSUB] == "V") /* marked as viewed*/
      IV0NW01.IV0NWISF[IV0NWIX] = IV0NM001.IV0NMSEL[IVYSUB];
      IVYREC.IVYSUB = IVYREC.IVYSUB + 1; /* set indexes for next*/
      IV0NW01.IV0NWIX = IV0NW01.IV0NWIX + 1;
    else
      if (IV0NM001.IV0NMSEL[IVYSUB] == "A" /* all lines selected*/
       && IV0NW01.IV0NWIX == 1)            /* entered on line 1*/
        IV0NSAL(); /* set all entries in array to s*/
        IVYREC.IVYSUB = 15; /* get out of loop*/
      else
        converseLib.validationFailed(40); /* invalid selection*/
        IVYREC.IVYERR = "Y";
        set IV0NM001.IV0NMSEL[IVYSUB] cursor, bold;
        IVYREC.IVYSUB = 15;
      end
    end
  end


end // end IV0NSEL

// Enter Key Pressed Actions
Function IV0NSEN()
   /* ***********************************************************/
   /* *   M A I N T E N A N C E    H I S T O R Y   L O G       **/
   /* *--------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                          **/
   /* *--------------------------------------------------------**/
   /* * 01-08-96  GDECKE  HANDLE CUSTOMER PRODUCT ID BY SIZE   **/
   /* *                   NOT SURE IF A CHANGE IS NEEDED HERE  **/
   /* ***********************************************************/

     /* ***   this statement group handles the case where  ****/
     /* *** the enter key was pressed on the summ 1 screen.****/
     /* *** First, if any selections were made by the user,****/
     /* *** pass to the Detail screen after setting values.****/
     /* *** If no selections active, proceed as main menu  ****/
     /* *** option dictates.                               ****/

     /* set index for selection check.*/
     /* lgross   02-10-92 when enter is hit, app will go   ****/
     /* to iv0g rather than iv0a         ****/

  IVYREC.IVYSUB2 = 1;

     /* loop thru checking for any selections.  If found*/
      /* pass to detail screen set-up*/

  while (IVYREC.IVYSUB2 <= IV0NW01.IV0NWIMX)
    if (IV0NW01.IV0NWISF[IVYSUB2] == "S")
      IVXREC.OP2LNINB = IV0NW01.OP2LNINB[IVYSUB2];

      IV0NW02.IV0NW-CU-CUST-PROD-ID = IV0NWTBL.IV0NW-CU-CUST-PROD-ID[IVYSUB2];
      IV0NW02.IV0NW-CU-CUST-PROD-ID2 = IV0NWTB2.IV0NW-CU-CUST-PROD-ID2[IVYSUB2];
      IV0NWPRM.CU-CUST-PROD-ID = IV0NW02.CU-CUST-PROD-ID;
      IV0NW01.IV0NWIX = IVYREC.IVYSUB2;
      IVYREC.IVYSUB2 = IV0NW01.IV0NWIMX + 1;
    else
      IVYREC.IVYSUB2 = IVYREC.IVYSUB2 + 1;
    end
  end

     /* get out of here if plan to pass to detail*/

  if (IVXREC.OP2LNINB != 0)
    return;
  end

     /* pass to the next screen as dictated by the main*/
     /* menu option*/

  COMMAREA.CAUSERA = IVXREC.IVXGROUP;

  if (IVXREC.IVXOPTN == 1
   || IVXREC.IVXOPTN == 2
   || IVXREC.IVXOPTN == 3
   || IVXREC.IVXOPTN == 4)
    if (IVXREC.IVXTYPFL == "I")
      COMMAREA.CATOAP = "IV0G";
      XSEXIT(); /* transfer to main menu*/
      converseLib.validationFailed(15); /* transfer failed*/
      IVYREC.IVYERR = "Y"; /* mark as error*/
    else
      XSIVSEN(); /* routine to check for more selections,*/
                                   /* and pass*/
      if (converseVar.validationMsgNum != 0) /* if error return*/
        IVYREC.IVYERR = "Y"; /* mark as error*/
      end
    end
  else
    if (IVXREC.IVXOPTN == 6)
      COMMAREA.CATOAP = "IV0G";
      XSEXIT(); /* transfer to Header 1*/
      converseLib.validationFailed(15); /* transfer failed*/
      IVYREC.IVYERR = "Y"; /* mark as error*/
    else
      if (IVXREC.IVXOPTN == 7)
        COMMAREA.CATOAP = "IV0H";
        XSEXIT(); /* transfer to commissions & payment*/
        converseLib.validationFailed(15); /* transfer failed*/
        IVYREC.IVYERR = "Y"; /* mark as error*/
      else
        if (IVXREC.IVXOPTN == 8)
          COMMAREA.CATOAP = "IV0I";
          XSEXIT(); /* transfer to address*/
          converseLib.validationFailed(15); /* transfer failed*/
          IVYREC.IVYERR = "Y"; /* mark as error*/
        else
          if (IVXREC.IVXOPTN == 9)
            COMMAREA.CATOAP = "IV0J";
            XSEXIT(); /* transfer to messages & instr*/
            converseLib.validationFailed(15); /* transfer failed*/
            IVYREC.IVYERR = "Y"; /* mark as error*/
          end
        end
      end
    end
  end


end // end IV0NSEN

// Look up Handling charge GL
Function IV0NSGL()

     /* ***   this statement group does a look up for each ****/
     /* *** of three possible handling charge gl records   ****/
     /* *** for the line item.  Also look up handling code ****/
     /* *** to xhd table for description.                  ****/
     /* *** 10/09/81 lgross add gpc to key in xhd table    ****/

     /* blank records*/

  set IV6REC empty;
  set SQLCA empty;

     /* set up key for reads*/

  IV6REC.IV6KEY = IVAREC.IV0KEY;
  IV6REC.PFJXREF = "XHD";
  IV6REC.IV6FBTYP = "F";
  IV6REC.OP2LNINB = IV3REC.OP2LNINB;

     /* set key for read for first handling code*/

  IV6GLSEQ = "1";

     /* read unique on gl recs*/

  IV0NSGU();

     /* look up handling code abbreviation*/

  IV0NW01.XHDCD = IV3REC.XHDCD[1];
  IV0NW01.XPGCD = IV3REC.XPGCD;
  if (IV0NW01.XHDKEY in XHDTBL.XHDKEY)
    IV0NM002.XHDABRV[IVYSUB] = XHDTBL.XHDABRV[sysVar.arrayIndex];
  end
  if (sysVar.arrayIndex == 0)
    IV0NM002.XHDABRV[IVYSUB] = IV3REC.XHDCD[1];
  end

     /* if no second handling code, go back*/

  if (IV3REC.XHDCD[2] == " ")
    return;
  end

     /* blank sqlca again, set up screen line index*/

  set SQLCA empty;
  IVYREC.IVYSUB = IVYREC.IVYSUB + 1;
  if (IVYREC.IVYSUB > 14) /* if screen full*/
    return; /* go back*/
  end

     /* clear style portion of line*/

  IV0NM002.XSDCD[IVYSUB] = " ";
  IV0NM002.XPGCD[IVYSUB] = " ";
  IV0NM002.IV0NMPRD[IVYSUB] = " ";
  IV0NM002.IV0NMDSS[IVYSUB] = " ";
  IV0NM002.IV3LNSQ[IVYSUB] = 0;

     /* set key for read of second record*/

  IV6GLSEQ = "2";

     /* read unique on gl recs*/

  IV0NSGU();

     /* look up handling code abbreviation*/

  IV0NW01.XHDCD = IV3REC.XHDCD[2];
  IV0NW01.XPGCD = IV3REC.XPGCD;
  if (IV0NW01.XHDKEY in XHDTBL.XHDKEY)
    IV0NM002.XHDABRV[IVYSUB] = XHDTBL.XHDABRV[sysVar.arrayIndex];
  end
  if (sysVar.arrayIndex == 0)
    IV0NM002.XHDABRV[IVYSUB] = IV3REC.XHDCD[2];
  end

     /* if no third handling code, go back*/

  if (IV3REC.XHDCD[3] == " ")
    return;
  end

     /* blank sqlca again, set up screen line index*/

  set SQLCA empty;
  IVYREC.IVYSUB = IVYREC.IVYSUB + 1;
  if (IVYREC.IVYSUB > 14) /* if screen full*/
    return; /* go back*/
  end

     /* clear style portion of line*/

  IV0NM002.XSDCD[IVYSUB] = " ";
  IV0NM002.XPGCD[IVYSUB] = " ";
  IV0NM002.IV0NMPRD[IVYSUB] = " ";
  IV0NM002.IV0NMDSS[IVYSUB] = " ";
  IV0NM002.IV3LNSQ[IVYSUB] = 0;

     /* set key for read of third record*/

  IV6GLSEQ = "3";

     /* read unique on gl recs*/

  IV0NSGU();

     /* look up handling code abbreviation*/

  IV0NW01.XHDCD = IV3REC.XHDCD[3];
  IV0NW01.XPGCD = IV3REC.XPGCD;
  if (IV0NW01.XHDKEY in XHDTBL.XHDKEY)
    IV0NM002.XHDABRV[IVYSUB] = XHDTBL.XHDABRV[sysVar.arrayIndex];
  end
  if (sysVar.arrayIndex == 0)
    IV0NM002.XHDABRV[IVYSUB] = IV3REC.XHDCD[3];
  end



     /* if no fourth handling code, go back*/

  if (IV3REC.XHDCD[4] == " ")
    return;
  end

     /* blank sqlca again, set up screen line index*/

  set SQLCA empty;
  IVYREC.IVYSUB = IVYREC.IVYSUB + 1;
  if (IVYREC.IVYSUB > 14) /* if screen full*/
    return; /* go back*/
  end

     /* clear style portion of line*/

  IV0NM002.XSDCD[IVYSUB] = " ";
  IV0NM002.XPGCD[IVYSUB] = " ";
  IV0NM002.IV0NMPRD[IVYSUB] = " ";
  IV0NM002.IV0NMDSS[IVYSUB] = " ";
  IV0NM002.IV3LNSQ[IVYSUB] = 0;

     /* set key for read of fourth record*/

  IV6GLSEQ = "4";

     /* read unique on gl recs*/

  IV0NSGU();

     /* look up handling code abbreviation*/

  IV0NW01.XHDCD = IV3REC.XHDCD[4];
  IV0NW01.XPGCD = IV3REC.XPGCD;
  if (IV0NW01.XHDKEY in XHDTBL.XHDKEY)
    IV0NM002.XHDABRV[IVYSUB] = XHDTBL.XHDABRV[sysVar.arrayIndex];
  end
  if (sysVar.arrayIndex == 0)
    IV0NM002.XHDABRV[IVYSUB] = IV3REC.XHDCD[4];
  end



     /* if no fifth handling code, go back*/

  if (IV3REC.XHDCD[5] == " ")
    return;
  end

     /* blank sqlca again, set up screen line index*/

  set SQLCA empty;
  IVYREC.IVYSUB = IVYREC.IVYSUB + 1;
  if (IVYREC.IVYSUB > 14) /* if screen full*/
    return; /* go back*/
  end

     /* clear style portion of line*/

  IV0NM002.XSDCD[IVYSUB] = " ";
  IV0NM002.XPGCD[IVYSUB] = " ";
  IV0NM002.IV0NMPRD[IVYSUB] = " ";
  IV0NM002.IV0NMDSS[IVYSUB] = " ";
  IV0NM002.IV3LNSQ[IVYSUB] = 0;

     /* set key for read of fourth record*/

  IV6GLSEQ = "5";

     /* read unique on gl recs*/

  IV0NSGU();

     /* look up handling code abbreviation*/

  IV0NW01.XHDCD = IV3REC.XHDCD[5];
  IV0NW01.XPGCD = IV3REC.XPGCD;
  if (IV0NW01.XHDKEY in XHDTBL.XHDKEY)
    IV0NM002.XHDABRV[IVYSUB] = XHDTBL.XHDABRV[sysVar.arrayIndex];
  end
  if (sysVar.arrayIndex == 0)
    IV0NM002.XHDABRV[IVYSUB] = IV3REC.XHDCD[5];
  end
end // end IV0NSGL

// Select Hndl Charge GL record
Function IV0NSGU()

     /* ***  this statement group is used to find the      ****/
     /* ***  handling charge GL record.  This has an xref  ****/
     /* ***  value of 'xhd'                                ****/

     /* read GL record as selected in iv0nsgl*/

  call "IO1080" ("S ", SQLCA, IV6REC) {isNoRefresh = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    IV0NM002.GLACD[IVYSUB] = IV6REC.GLACD;
    IV0NM002.IV6GLPCT[IVYSUB] = IV6REC.IV6GLPCT;
    IV0NM002.IV6GLAMT[IVYSUB] = IV6REC.IV6GLAMT;
  else
    if (SQLCA.VAGen_SQLCODE > 100)
      TA1REC.TA1PGMNM = "IV0N    ";
      TA1REC.TA1MAP = "IV0NM001";
      TA1REC.TA1DBASE = "DINVC   ";
      TA1REC.TA1TBLVU = "VIVGLX01";
      TA1REC.TA1TBLKE = IV6REC.IV6KEY;
      TA1REC.TA1LOCAT[3] = "IV0NSGU"; /* 10-30-87*/
      TA1REC.TA1LOCAT[4] = "IO1080";
      XSIVS02();
    end
  end



end // end IV0NSGU

// Select Invoice Header
Function IV0NSH1()
     /* ***   this statement group is used to look up ****/
     /* *** the header record for display fields      ****/

     /* blank records*/

  set IVAREC empty;
  set SQLCA empty;

    /* set up key for read*/

  IVAREC.IV0IVCID = IVXREC.IV0IVCID;
  IVYREC.IVYIVCN = IVXREC.IV0IVCID;
  IVAREC.IV0PARTN = IVYREC.IV0PARTN;

   /* read invoice header for order class, sales program*/

  call "IO1040" ("S ", SQLCA, IVAREC) {isNoRefresh = yes};

     /* if not found - if an individual find, pass back to menu*/

  if (SQLCA.VAGen_SQLCODE == 100)
    if (IVXREC.IVXTYPFL == "I") /* if an individual invoice find*/
      IVXREC.IVXMSSNB = 43;
      COMMAREA.CAUSERA = IVXREC.IVXGROUP;
      COMMAREA.CAFROMAP = "IV0N";
      COMMAREA.CACURRAP = "IV0A";
      transfer to transaction "IV0A" passing COMMAREA; /* pass back to main menu*/
    end
  end

     /* all other cases, kill program*/

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1PGMNM = "IV0N    ";
    TA1REC.TA1MAP = "IV0NM001";
    TA1REC.TA1DBASE = "DINVC   ";
    TA1REC.TA1TBLVU = "VIVHDR01";
    TA1REC.TA1TBLKE = IVAREC.IV0KEY;
    TA1REC.TA1LOCAT[3] = "IV0NSH1"; /* 10-30-87*/
    TA1REC.TA1LOCAT[4] = "IO1040";
    XSIVS02();
  end


  IVXREC.OP1CUPO = IVAREC.OP1CUPO;
  IVXREC.SP1ID = IVAREC.SP1ID;
  IVXREC.XOCCD = IVAREC.XOCCD;


end // end IV0NSH1

// Loop thru and display sizes
Function IV0NSIZ()
  /* *  IV0NSIZ  --  GET SIZE DATA, MOVE TO MAP IV0NM003      **/
  /* *                                                        **/
  /* ***********************************************************/
  /* *   M A I N T E N A N C E    H I S T O R Y   L O G       **/
  /* *--------------------------------------------------------**/
  /* *   DATE    PGMR    DESCRIPTION                          **/
  /* *--------------------------------------------------------**/
  /* * 08-12-97  GDECKE  CORRECT DISPLAY OF SECOND PAGE       **/
  /* ***********************************************************/

     /* ***   This statement group loops thru all sizes for ****/
     /* *** the line item, and displays on screen.  Look up ****/
     /* *** for size description is required.               ****/

     /* blank records*/

  set IV4REC empty;
  set SQLCA empty;

     /* set key for read*/

  IV4REC.IV4KEY = IV3REC.IV3KEY;

     /* read next record*/

   /* -- CALL IO1130 'SN',SQLCA,IV4REC (NOMAPS;*/

  IV0NW02.IV0NW-DEADLOCK-CT = 0;
  IV0NW02.IV0NW-DEADLOCK-FL = "Y";
  IV0NWMOD.IV0NW-IOMOD-FUNCTION = "N2";

  while (IV0NW02.IV0NW-DEADLOCK-FL == "Y")
    IV0NS-CALL-IV1880();
  end


  if (SQLCA.VAGen_SQLCODE == 100)
    IV0NW01.IV0NWZX = 41;
    return;
  else
    if (IV0NW02.IV0NW-DEADLOCK-CT > 0
     || SQLCA.VAGen_SQLCODE != 0)
      TA1REC.TA1PGMNM = "IV0N    ";
      TA1REC.TA1MAP = "IV0NM003";
      TA1REC.TA1DBASE = "DINVC   ";
      TA1REC.TA1TBLKE = "VIVSIZ01";
      TA1REC.TA1TBLKE = IV4REC.IV4KEY;
      TA1REC.TA1LOCAT[3] = "IV0NSIZ"; /* 10-30-87*/
      TA1REC.TA1LOCAT[4] = "IO1130";
      XSIVS02();
    end
  end

     /* set up counter for loop*/

  IVYREC.IVYSUB1 = IVYREC.IVYSUB1 + 1;

     /* to find first size to display, may have to loop thru*/
     /* some records:*/
      /* if scrolling forward, will have sy5szid*/
      /* if backward, will have iv0nwzx*/

  if (IVXREC.SY5SZID == 0) /* scrolling back, or first time*/
    if (IVYREC.IVYSUB1 < IV0NW01.IV0NWZX) /* zx has occurance to start at*/
      return;
    end
  else
    if (IV4REC.SY5SZID <= IVXREC.SY5SZID)
                                   /* sy5szid of last on prev screen*/
      return;
    end
  end

     /* display this record*/

  IV0NM003.KUIPRDID = IV0NWPRM.CU-CUST-PROD-ID;
  IVYREC.IVYSUB2 = IV4REC.SY5SZID; /* move to avoid too long line*/
  IV0NM003.SY4IDDSC[IVYSUB] = SY4REC.SY4IDDSC[IVYSUB2];
  IV0NM003.IV4OQ[IVYSUB] = IV4REC.IV4OQ;
  IV0NM003.IV4SHPQ[IVYSUB] = IV4REC.IV4SHPQ;
  IV0NM003.IV4BOQ[IVYSUB] = IV4REC.IV4BOQ;
  IV0NM003.IV4NUP[IVYSUB] = IV4REC.IV4NUP;

   /* global price overrides from the order are denoted by a 'G'*/
   /* in the price override flag field but should be displayed as*/
   /* a 'Y'*/
  if (IV4REC.OP2PRCOF == "G") /* if global price override from the*/
                                   /* order*/
    IV0NM003.OP2PRCOF[IVYSUB] = "Y"; /* show it as a price override*/
  else
    IV0NM003.OP2PRCOF[IVYSUB] = IV4REC.OP2PRCOF;

  end
  IV0NM003.IV0NMSZT[IVYSUB] = IV4REC.IV4SHPQ * IV4REC.IV4NUP;
  IV0NM003.IV4GUP[IVYSUB] = IV4REC.IV4GUP;

     /* set up screen index*/

  IVYREC.IVYSUB = IVYREC.IVYSUB + 1;


end // end IV0NSIZ

// Select Line Item for Display
Function IV0NSLD()

     /* ***   this statement group reads the selected  ****/
     /* *** line item, and displays on Product Detail. ****/

     /* blank records*/

  set IV3REC empty;
  set SQLCA empty;

     /* set key for read*/

  IV3REC.IV3KEY = IVAREC.IV0KEY;
  IV3REC.OP2LNINB = IVXREC.OP2LNINB;

     /* read line item*/

  call "IO1100" ("S ", SQLCA, IV3REC) {isNoRefresh = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1PGMNM = "IV0N    ";
    TA1REC.TA1MAP = "IV0NM003";
    TA1REC.TA1DBASE = "DINVC   ";
    TA1REC.TA1TBLVU = "VIVITM01";
    TA1REC.TA1TBLKE = IV3REC.IV3KEY;
    TA1REC.TA1LOCAT[3] = "IV0NSLD"; /* 10-30-87*/
    TA1REC.TA1LOCAT[4] = "IO1100";
    XSIVS02();
  end

     /* display on screen*/

  IV0NM003.SY1STNBR = IV3REC.SY1STNBR;
  IV0NM003.SY2CLRID = IV3REC.SY2CLRID;
  IV0NM003.XDMCD = IV3REC.XDMCD;
  IV0NM003.KUIPRDID = IV3REC.KUIPRDID;
  IV0NM003.XLCCD = IV3REC.XLCCD;
  IV0NM003.XQACD = IV3REC.XQACD;

     /* retrieve unit of measure description*/

  if (IV3REC.XUMCD in XUMTBL.XUMCD)
    IV0NM003.XUMDESC = XUMTBL.XUMDESC[sysVar.arrayIndex];
  end
  if (sysVar.arrayIndex == 0) /* if not found*/
    IV0NM003.XUMDESC = IV3REC.XUMCD; /* display code*/
  end

     /* format number of sizes display*/

  IVYREC.IVYNUMB = IV3REC.IV3NBRSZ; /* move bin to num*/
  IVYREC.IVYNBR = IVYREC.IVYNUMB; /* move num to cha*/
  IVYREC.IVYSUB = 1; /* loop index*/
  while (IVYREC.IVYSUB < 9) /* loop backwards thru number*/
    if (IVYREC.IVYNBR1[IVYSUB] == "0") /* if a leading zero*/
      IVYREC.IVYNBR1[IVYSUB] = " "; /* change to space*/
      IVYREC.IVYSUB = IVYREC.IVYSUB + 1; /* and continue*/
    else /* if a non-zero found*/
      IVYREC.IVYSUB = 9; /* end loop*/
    end
  end
  IVYREC.IVYMTXT = "SIZES FOR THIS LINE ITEM";

  IV0NM003.XXXMSG = IVYREC.IVYMSG;


end // end IV0NSLD

// Build Line Item Array
Function IV0NSLI()
   /* ************************************************************/
   /* *    M A I N T E N A N C E    H I S T O R Y     L O G     **/
   /* *---------------------------------------------------------**/
   /* *   DATE    PGMR    COMMENT                               **/
   /* *---------------------------------------------------------**/
   /* * 01-07-96  GDECKE  SAVE CU-CUST-PROD-ID IN WS TABLE.     **/
   /* ************************************************************/

     /* ***   this statement group fills the line item array ****/
     /* *** with data.  Also fills summ 1 screen if not yet  ****/
     /* *** full                                             ****/

     /* move into array*/

  IV0NW01.OP2LNINB[IV0NWIX] = IV3REC.OP2LNINB;
   /* move cust prod id to work area to split in half*/
  if (IV0NWPRM.CU-CUST-PROD-ID == " ")
    IV0NW02.CU-CUST-PROD-ID = IV3REC.KUIPRDID;
  else
    IV0NW02.CU-CUST-PROD-ID = IV0NWPRM.CU-CUST-PROD-ID;
  end
   /* move first 15 char of cust-prod-id to table.*/
  IV0NWTBL.IV0NW-CU-CUST-PROD-ID[IV0NWIX] = IV0NW02.IV0NW-CU-CUST-PROD-ID;
   /* move last 10 char of cust-prod-id to table.*/
  IV0NWTB2.IV0NW-CU-CUST-PROD-ID2[IV0NWIX] = IV0NW02.IV0NW-CU-CUST-PROD-ID2;

    /* save qty shp, net price, mrch amt in w/s table*/
  IV0NWTB3.IV-LN-SHIPPED-QTY[IV0NWIX] = IV3REC.IV3LNSQ;
  IV0NWTB3.IV-NET-UNIT-PRC[IV0NWIX] = IV3REC.IV3NLNUP;
  IV0NWTB3.IV-NET-LN-MRCH-AMT[IV0NWIX] = IV3REC.IV3NLNMA;

     /* display on screen if not yet full*/
      /* (if option 2 or 4, will bypass screen display)*/

  if (IVXREC.IVXOPTN != 4
   && IVXREC.IVXOPTN != 2)
    if (IVYREC.IVYSUB < 15)
      IV0NSDL(); /* fill screen*/
      IVYREC.IVYSUB = IVYREC.IVYSUB + 1; /* set screen index up*/
    end
  end

     /* set array index up*/

  IV0NW01.IV0NWIX = IV0NW01.IV0NWIX + 1;

     /* clear iv3rec before next read*/

  set IV3REC empty;


end // end IV0NSLI

// Read all Line Items
Function IV0NSLN()

     /* ***   this statement group handles the calls to ****/
     /* *** read all line items for the invoice, and    ****/
     /* *** fill the line item array.  At the same time,****/
     /* *** the first product summary screen is filled  ****/
     /* *** unless the menu option from primary screen  ****/
     /* *** is 2 or 4, where product summ screen is not ****/
     /* *** displayed                                   ****/

     /* perform select set for line items*/

  IV0NSSL();

     /* perform select next to get each line item and*/
     /* load to array*/

  IV0NSNL();


end // end IV0NSLN

// Map Initialization
Function IV0NSMI()

     /* ***   this statement group initializes all three ****/
     /* *** maps in the application, and sets up the     ****/
     /* *** header info                                  ****/

     /* initialize maps*/

  converseLib.clearScreen();
  set IV0NM001 initial;
  converseLib.clearScreen();
  set IV0NM002 initial;
  converseLib.clearScreen();
  set IV0NM003 initial;

  IV0NM001.XXXCURDT = VGVar.currentShortGregorianDate; /* move in current date*/
  IV0NM002.XXXCURDT = VGVar.currentShortGregorianDate;
  IV0NM003.XXXCURDT = VGVar.currentShortGregorianDate;
  IV0NM001.IV0IVCID = IVXREC.IV0IVCID; /* move in invoice number*/
  IV0NM002.IV0IVCID = IVXREC.IV0IVCID;
  IV0NM003.IV0IVCID = IVXREC.IV0IVCID;
  IV0NM001.KUCCOID = IVXREC.KUCCOID; /* move in company*/
  IV0NM002.KUCCOID = IVXREC.KUCCOID;
  IV0NM003.KUCCOID = IVXREC.KUCCOID;
  IV0NM001.KUMSTRID = IVXREC.KUMSTRID; /* move in store*/
  IV0NM002.KUMSTRID = IVXREC.KUMSTRID;
  IV0NM003.KUMSTRID = IVXREC.KUMSTRID;
  IV0NM001.XNXCD = IVXREC.XNXCD; /* move in dept*/
  IV0NM002.XNXCD = IVXREC.XNXCD;
  IV0NM003.XNXCD = IVXREC.XNXCD;
  IV0NM001.KUCCONM = IVXREC.KUCCONM; /* move in customer name*/
  IV0NM002.KUCCONM = IVXREC.KUCCONM;
  IV0NM003.KUCCONM = IVXREC.KUCCONM;
  IV0NM001.IV0IVCDT = IVXREC.IV0IVCDT; /* move in invoice date*/
  IV0NM002.IV0IVCDT = IVXREC.IV0IVCDT; /* (not on detail screen)*/
  IV0NM001.OP1CUPO = IVXREC.OP1CUPO; /* move in po number*/
  IV0NM003.OP1CUPO = IVXREC.OP1CUPO; /* (not on summ 2 screen)*/
  IV0NM003.XGPCD = IVXREC.XGPCD; /* (only on detail screen)*/

     /* look up order type abbreviation*/

  if (IVXREC.XOBCD in XOBTBL.XOBCD)
    IV0NM001.XOBABRV = XOBTBL.XOBABRV[sysVar.arrayIndex];
  end
  if (sysVar.arrayIndex == 0)
    IV0NM001.XOBABRV = IVXREC.XOBCD; /* if not found, display code*/
  end
  IV0NM002.XOBABRV = IV0NM001.XOBABRV; /* move in to summ 2 screen*/

   /* look up gpc abbreviation*/

  if (IVXREC.XGPCD in XGPTBL.XGPCD) /* if gpc in table*/
    IV0NM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
                                   /* move abbrv to screen*/
  else /* else*/
    IV0NM001.XGPABRV = IVXREC.XGPCD;
                                   /* move xgpcd to screen*/
  end
  IV0NM002.XGPABRV = IV0NM001.XGPABRV; /* move in to summ 2 screen*/

     /* look up order class abbreviation*/

  if (IVXREC.XOCCD != " ")
    if (IVXREC.XOCCD in XOCTBL.XOCCD)
      IV0NM001.XOCABRV = XOCTBL.XOCABRV[sysVar.arrayIndex];
    end
    if (sysVar.arrayIndex == 0)
      IV0NM001.XOCABRV = IVXREC.XOCCD; /* if not found, display code*/
    end
  end
  IV0NM002.XOCABRV = IV0NM001.XOCABRV; /* move in to summ 2 screen*/

     /* look up sales program*/

  if (IVXREC.SP1ID != " ")
    IV0NSSP();
  end
  IV0NM002.SP1ABRV = IV0NM001.SP1ABRV; /* move in to summ 2 screen*/

     /* move in net bill flag*/

  IV0NM001.IVANBLFL = IVAREC.IVANBLFL;
  IV0NM002.IVANBLFL = IVAREC.IVANBLFL;

     /* format number of line items display*/

  IVYREC.IVYNUMB = IVAREC.IVANBITM; /* move bin to num*/
  IVYREC.IVYNBR = IVYREC.IVYNUMB; /* move num to char*/
  IVYREC.IVYSUB = 1; /* set loop index*/
  while (IVYREC.IVYSUB < 9) /* change leading 0s to space*/
    if (IVYREC.IVYNBR1[IVYSUB] == "0") /* leading zero found*/
      IVYREC.IVYNBR1[IVYSUB] = " "; /* change to space*/
      IVYREC.IVYSUB = IVYREC.IVYSUB + 1; /* continue loop*/
    else /* non-zero found*/
      IVYREC.IVYSUB = 9; /* end loop*/
    end
  end

  IVYREC.IVYMTXT = "LINE ITEMS FOR THIS INVOICE";

     /* display in xxxmsg on screens 1 and 2*/

  IV0NM001.XXXMSG = IVYREC.IVYMSG;
  IV0NM002.XXXMSG = IVYREC.IVYMSG;


end // end IV0NSMI

// Select Next Line Item
Function IV0NSNL()

     /* ***   this statement group reads each selected ****/
     /* *** line item, and adds to the line item array ****/

     /* blank records*/

  set IV3REC empty;
  set SQLCA empty;

     /* set key for read*/

  IV3REC.IV3KEY = IVAREC.IV0KEY;

     /* set indexes, then read thru line items*/

  IVYREC.IVYSUB = 1; /* line item screen index*/
   /* ivysub1 used to clear remaining lines*/
  IV0NW01.IV0NWIX = 1; /* line item index*/
  IV0NW01.IV0NWSIX = 1; /* saved beginning line item index*/
  IV0NW01.IV0NWNX = 1; /* name array index*/
  IV0NW01.IV0NWNMX = 1; /* name array max*/
  IV0NW01.IV0NWSNX = 1; /* saved beginning name index*/
  while (SQLCA.VAGen_SQLCODE == 0)
    IV0NS-NEXT-IVITM();
   /* CALL IO1100 'N1',SQLCA,IV3REC (NOMAPS;*/
    if (SQLCA.VAGen_SQLCODE == 0)
      IV0NSLI(); /* add to array and display on map*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if no more found*/
        if (IVYREC.IVYSUB < 15  /* if screen not full*/
         && IVXREC.IVXOPTN != 4 /* and screen is being filled*/
         && IVXREC.IVXOPTN != 2)
          IV0NSC1(); /* clear remainder of screen*/
        end
      else /* error other than not found - report*/
        TA1REC.TA1PGMNM = "IV0N    ";
        TA1REC.TA1MAP = "IV0NM001";
        TA1REC.TA1DBASE = "DINVC   ";
        TA1REC.TA1TBLVU = "VIVITM01";
        TA1REC.TA1TBLKE = IV3REC.IV3KEY;
        TA1REC.TA1LOCAT[3] = "IV0NSNL"; /* 10-30-87*/
        TA1REC.TA1LOCAT[4] = "IO1100";
        XSIVS02();
      end
    end
  end


   /* --CALL IO1100 'C1',SQLCA,IV3REC (NOMAPS;*/

  IV0NW02.IV0NW-DEADLOCK-CT = 0;
  IV0NW02.IV0NW-DEADLOCK-FL = "Y";
  IV0NWMOD.IV0NW-IOMOD-FUNCTION = "C1";

  while (IV0NW02.IV0NW-DEADLOCK-FL == "Y")
    IV0NS-CALL-IV1880();
  end


     /* move in max values*/
      /* work indexes are for next entry, so must set down one*/

  IV0NW01.IV0NWIMX = IV0NW01.IV0NWIX - 1; /* line item max*/
  IV0NW01.IV0NWNMX = IV0NW01.IV0NWNX - 1; /* name max*/

     /* set index to reflect end of screen - can do this here*/
   /* because ivysub is lines used on screen (+1), while iv0nwix*/
   /* has max number of lines right now.  For scrolling use*/
   /* want iv0nwix to have next line item entry to be displayed*/
   /* on screen*/

  IV0NW01.IV0NWIX = IVYREC.IVYSUB;


end // end IV0NSNL

// Program Initialization
Function IV0NSPI()
   /* *   IV0NSPI  -  INITIALIZATION SECTION   **********************/
   /* ***************************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y    L O G        **/
   /* *------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                              **/
   /* *------------------------------------------------------------**/
   /* * 01-27-97  GDECKE  INITIALIZE NEW WS RECORDS FOR CUST PROD ID*/
   /* ***************************************************************/

     /* ***   this statement group initializes work areas,  ****/
     /* *** retrieves header info, and initializes all three****/
     /* *** screens for IV0N.                               ****/

     /* blank work records, set screen flag*/

  set IVYREC empty;
  set IV0NW01 empty;
  set IV0NWTBL empty;
  set IV0NWTB2 empty;
  set IV0NWTB3 empty;
  set IV0NWPRM empty;
  IV0NW01.IV0NWSCR = 1; /* screen flag - indicates first time*/
                                   /* thru*/

     /* determine if came in fastpath*/

  if (COMMAREA.CAITEM != " " /* fastpath entry*/
   || COMMAREA.CAFRMSYS != COMMAREA.CACURSYS) /* from other sys,10-28-87*/
    IVYREC.IVYMTXT = "IV0NSPI"; /* in case of error 1-26-88*/
    XSIVSFP(); /* find header index and company*/
    IVYREC.IVYMTXT = " "; /* 1-26-88*/
    if (IVXREC.IVXMSSNB != 0) /* if had error on invoice lookup*/
      COMMAREA.CAUSERA = IVXREC.IVXGROUP;
      COMMAREA.CATOAP = "IV0A";
      XSEXIT(); /* pass to menu screen*/
    end
    COMMAREA.CAITEM = " "; /* reset caitem to space*/
  else /* not fastpath*/
    IVXREC.IVXGROUP = COMMAREA.CAUSERA; /* setup up program storage*/
    if (IVXREC.IVXINIT != "IV0") /* if ivxrec not inited*/
      set IVXREC empty;
      IVXREC.IVXMSSNB = 18; /* must have been fast path w/o item*/
      IVXREC.IVXINIT = "IV0"; /* set so that iv0a will look for*/
                                   /* message*/
      COMMAREA.CAUSERA = IVXREC.IVXGROUP; /* return to iv0a*/
      COMMAREA.CATOAP = "IV0A";
      XSEXIT();
    end
  end

     /* if came here direct from menu, will still need to*/
     /* retrieve header index and company.  use kuccoid as check*/

  if (IVXREC.KUCCOID <= 0)
    IVYREC.IVYMTXT = "IV0NSPI"; /* in case of error 1-26-88*/
    XSIVSFH(); /* routine to do lookups*/
    IVYREC.IVYMTXT = " "; /* in case of error 1-26-88*/
     /* below added 1-22-88*/
    if (IVXREC.IVXMSSNB != 0) /* if error on invoice lookup*/
      COMMAREA.CAUSERA = IVXREC.IVXGROUP;
      COMMAREA.CATOAP = "IV0A";
      XSEXIT(); /* pass to menu screen*/
    end
     /* above added 1-22-88*/
  end


     /* find header for display fields*/

  IV0NSH1();

     /* initialize all 3 maps*/

  IV0NSMI();


end // end IV0NSPI

// Select Set of Line Items
Function IV0NSSL()
   /* ************************************************************/
   /* *   M A I N T E N A N C E     H I S T O R Y    L O G      **/
   /* *---------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                           **/
   /* *---------------------------------------------------------**/
   /* * 01-07-96  GDECKE  CALL IV1880 INSTEAD OF IO1100 TO GET  **/
   /* * DINVC.VIVITM01 LINES.                                   **/
   /* ************************************************************/

     /* ***   this statement group does the select set ****/
     /* *** for line items for the invoice             ****/

     /* blank records*/

  set IV3REC empty;
  set SQLCA empty;

     /* set up key for find of iv3rec*/

  IV3REC.IV3KEY = IVAREC.IV0KEY;
  IV3REC.OP2LNINB = -1;

     /* call io mod with select option 1 for all line items*/

   /* **     CALL IO1100 'S1',SQLCA,IV3REC (NOMAPS;*/
  IV0NW02.IV0NW-DEADLOCK-CT = 0;
  IV0NW02.IV0NW-DEADLOCK-FL = "Y";
  IV0NWMOD.IV0NW-IOMOD-FUNCTION = "S1";

  while (IV0NW02.IV0NW-DEADLOCK-FL == "Y")
    IV0NS-CALL-IV1880();
  end

  if (IV0NW02.IV0NW-DEADLOCK-CT > 0
   || SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1PGMNM = "IV0N    ";
    TA1REC.TA1MAP = "IV0NM001";
    TA1REC.TA1DBASE = "DINVC   ";
    TA1REC.TA1TBLVU = "VIVITM01";
    TA1REC.TA1TBLKE = IV3REC.IV3KEY;
    TA1REC.TA1LOCAT[3] = "IV0NSSL"; /* 10-30-87*/
    TA1REC.TA1LOCAT[4] = "IO1100";
    XSIVS02();
  end


end // end IV0NSSL

// Select Sales Program record
Function IV0NSSP()

    /* ***  this statement group is used to find the  ****/
    /* ***  sales program description.                ****/

     /* blank records*/

  set SP1REC empty;
  set SQLCA empty;

     /* set key for read of sales program record*/

  SP1REC.SP1ID = IVAREC.SP1ID;

  call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    IV0NM001.SP1ABRV = SP1REC.SP1ABRV;
  else
    if (SQLCA.VAGen_SQLCODE > 100)
      TA1REC.TA1PGMNM = "IV0N    ";
      TA1REC.TA1MAP = "IV0NM001";
      TA1REC.TA1DBASE = "DSPGM   ";
      TA1REC.TA1TBLVU = "VSPGM001";
      TA1REC.TA1TBLKE = SP1REC.SP1ID;
      TA1REC.TA1LOCAT[3] = "IV0NSSP"; /* 10-30-87*/
      TA1REC.TA1LOCAT[4] = "IO0070";
      XSIVS02();
    end
  end



end // end IV0NSSP

// Look up Style for Scale Code
Function IV0NSTY()
     /* ***   this statement group is used to look up ****/
     /* *** the style record for the scale code.      ****/

     /* blank records for style read*/

  set SY1REC empty;
  set SQLCA empty;

    /* set up key for read*/

  SY1REC.XGPCD = IVXREC.XGPCD;
  SY1REC.SY1STNBR = IV3REC.SY1STNBR;

   /* read style record*/

  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes};


  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1PGMNM = "IV0N    ";
    TA1REC.TA1MAP = "IV0NM001";
    TA1REC.TA1DBASE = "DPROD   ";
    TA1REC.TA1TBLVU = "VSTYLE01";
    TA1REC.TA1TBLKE = SY1REC.SY1KEY;
    TA1REC.TA1LOCAT[3] = "IV0NSTY";
    TA1REC.TA1LOCAT[4] = "IO0120";
    XSIVS02();
  end


  IV0NW01.SY4SZSCL[IV0NWIX] = SY1REC.SY4SZSCL;


end // end IV0NSTY

// Select Unique Line Item
Function IV0NSUL()
   /* **********************************************************/
   /* *    M A I N T E N A N C E     H I S T O R Y     L O G  **/
   /* *-------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                         **/
   /* *-------------------------------------------------------**/
   /* * 01-08-96  GDECKE  HANDLE CUST PROD ID BY SIZE         **/
   /* **********************************************************/

     /* ***   this statement group reads the selected  ****/
     /* *** line item.                                 ****/

     /* blank records*/

  set IV3REC empty;
  set SQLCA empty;

     /* set key for read*/

  IV3REC.IV3KEY = IVAREC.IV0KEY;
  IV3REC.OP2LNINB = IV0NW01.OP2LNINB[IV0NWIX];

    /* MOVE CUST PROD ID FROM TABLE TO PARM RECORD*/
  IV0NW02.IV0NW-CU-CUST-PROD-ID = IV0NWTBL.IV0NW-CU-CUST-PROD-ID[IV0NWIX];
  IV0NW02.IV0NW-CU-CUST-PROD-ID2 = IV0NWTB2.IV0NW-CU-CUST-PROD-ID2[IV0NWIX];
  IV0NWPRM.CU-CUST-PROD-ID = IV0NW02.CU-CUST-PROD-ID;

     /* read line item*/

  call "IO1100" ("S ", SQLCA, IV3REC) {isNoRefresh = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1PGMNM = "IV0N    ";
    TA1REC.TA1MAP = "IV0NM001";
    TA1REC.TA1DBASE = "DINVC   ";
    TA1REC.TA1TBLVU = "VIVITM01";
    TA1REC.TA1TBLKE = IV3REC.IV3KEY;
    TA1REC.TA1LOCAT[3] = "IV0NSUL"; /* 10-30-87*/
    TA1REC.TA1LOCAT[4] = "IO1100";
    XSIVS02();
  end

     /* display on screen*/
      /* determine which screen by iv0nwscr value*/
      /* 2 - scrolling summ 1; 3 - summ 2*/

  if (IV0NW01.IV0NWSCR == 2)
    IV0NSDL();
  else
    IV0NSD2();
  end


end // end IV0NSUL

// Set Select for Size, and loop
Function IV0NSZL()
   /* ***************************************************************/
   /* *    M A I N T E N A N C E    H I S T O R Y    L O G         **/
   /* *------------------------------------------------------------**/
   /* *   DATE    PGMR    DESCRIPTION                              **/
   /* *------------------------------------------------------------**/
   /* * 01-07-97  GDECKE  USE IV1880 INSTEAD OF IO1130 TO GET SIZE **/
   /* * 08-12-97  GDECKE  correct display of second page           **/
   /* ***************************************************************/

     /* ***   this statement group controls the loop thru ****/
     /* *** size records for screen display               ****/

     /* set key for size read*/

    /* IV1880 WILL USE CU-CUST-PROD-ID TO GET REQUIRED LINES.*/
  IV4REC.IV4KEY = IV3REC.IV3KEY;
  IV4REC.SY5SZID = IVXREC.SY5SZID;

     /* do set select for size records*/

   /* -- CALL IO1130 'SS',SQLCA,IV4REC (NOMAPS;*/

  IV0NW02.IV0NW-DEADLOCK-CT = 0;
  IV0NW02.IV0NW-DEADLOCK-FL = "Y";
  IV0NWMOD.IV0NW-IOMOD-FUNCTION = "S2";

  while (IV0NW02.IV0NW-DEADLOCK-FL == "Y")
    IV0NS-CALL-IV1880();
  end

  if (IV0NW02.IV0NW-DEADLOCK-CT > 0
   || SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1PGMNM = "IV0N    ";
    TA1REC.TA1MAP = "IV0NM003";
    TA1REC.TA1DBASE = "DINVC   ";
    TA1REC.TA1TBLVU = "VIVSIZ01";
    TA1REC.TA1TBLKE = IV4REC.IV4KEY;
    TA1REC.TA1LOCAT[3] = "IV0NSZL"; /* 10-30-87*/
    TA1REC.TA1LOCAT[4] = "IO1130";
    XSIVS02();
  end

     /* set index for loop*/

  IVYREC.IVYSUB = 1; /* screen index*/
  IVYREC.IVYSUB1 = 0; /* loop count index*/
   /* note ivysub2 used in iv0nsiz for size index*/
  IV0NW01.IV0NWZX = IV0NW01.IV0NWSZX; /* scrolling index*/

     /* use nbr-sz from item to control loop*/

  while (IV0NW01.IV0NWZX < 41
   && IVYREC.IVYSUB < 14)
    IV0NSIZ();
  end

     /* close database*/

   /* --- CALL IO1130 'CS',SQLCA,IV4REC (NOMAPS;*/

  IV0NW02.IV0NW-DEADLOCK-CT = 0;
  IV0NW02.IV0NW-DEADLOCK-FL = "Y";
  IV0NWMOD.IV0NW-IOMOD-FUNCTION = "C2";

  while (IV0NW02.IV0NW-DEADLOCK-FL == "Y")
    IV0NS-CALL-IV1880();
  end


     /* if screen not full, loop thru and blank out any*/
     /* unused lines*/
     /* ivysub1 used in loop - done with it from above loop*/

  if (IVYREC.IVYSUB < 14) /* if screen not full*/
    IV0NSC3(); /* loop thru and clear out lines*/
  end
end // end IV0NSZL

//*** RECORD=IV0NW01 ****
// invoice inq common work field working storage.  these are
// common work areas used by most of the invoice inq programs.
// these fields are not kept globally as the ivx  record is,
// and will go away when the program is exited.
// 
// maintenance log
// 
// 083090 fjelli         increase item array from 200 to 500.
// 05-24-91 bcourt  hold IV0NSNL SQL code while in IV0NSDC.
// 10/11/91 lgross       added ivonxhdk - handling code key
// 10/16/92 lgross       increased size of iv0nw01 and iv0nwgrp
//                       from 3015 to 2315 and iv0nwnam from
//                       440 to 640 because of the resizing of
//                       kuiprdnm from 20 to 30
// 01/06/96 GDECKE       CHANGE TABLE OCCURS FROM 500 TO 2000
//                       TO HANDLE SUMMARY OF CUST PROD BY SIZE
// 
// ***********************
Record IV0NW01 type basicRecord
  5 IV0NWGRP IV0NWGRP ; 
    10 IV0NWITM IV0NWITM [2000] ; 
      15 OP2LNINB OP2LNINB ; 
      15 IV0NWISF IV0NWISF ; 
      15 SY4SZSCL SY4SZSCL ; 
    10 IV0NWIX IV0NWIX ; 
    10 IV0NWSIX IV0NWSIX ; 
    10 IV0NWSSI IV0NWSSI ; 
    10 IV0NWIMX IV0NWIMX ; 
    10 IV0NWNAM IV0NWNAM ; 
      15 IV0NWOLN IV0NWOLN [20] ; 
      15 KUIPRDNM KUIPRDNM [20] ; 
    10 IV0NWNX IV0NWNX ; 
    10 IV0NWSNX IV0NWSNX ; 
    10 IV0NWSSN IV0NWSSN ; 
    10 IV0NWNMX IV0NWNMX ; 
    10 IV0NWFID IV0NWFID ; 
      15 * char(1) ; 
      15 SY1STNBR SY1STNBR ; 
      15 * char(1) ; 
      15 SY2CLRID SY2CLRID ; 
      15 * char(1) ; 
      15 XDMCD XDMCD ; 
      15 * char(1) ; 
    10 IV0NWFDC IV0NWFDC ; 
      15 SY1SSTNM SY1SSTNM ; 
      15 * char(1) ; 
      15 SY2CLRAB SY2CLRAB ; 
    10 IV0NWSCR IV0NWSCR ; 
    10 IV0NWNLN IV0NWNLN ; 
    10 IV0NWFFL IV0NWFFL ; 
    10 IV0NWZX IV0NWZX ; 
    10 IV0NWSZX IV0NWSZX ; 
    10 IV0NWSQL IV0NWSQL ; 
    10 XHDKEY XHDKEY ; 
      15 XHDCD XHDCD ; 
      15 XPGCD XPGCD ; 
    10 IV-IVC-PART-CHAR IV-IVC-PART-CHAR ; 
    10 IV-IVC-ID IV-IVC-ID ; 
    10 OP-LINE-ITEM-NBR OP-LINE-ITEM-NBR ; 
    10 IV0NW-MORE-SKU-SUMM-LINES IV0NW-MORE-SKU-SUMM-LINES ; 
end // end IV0NW01

//*** RECORD=IV0NW02 ****
// ************************************************************
// *   SAVE AREA FOR FIELDS ASSOCIATED WITH SELECTING CUSTOMER*
// *   PRODUCT CROSS REFERENCE DATA FROM DINVC.VIVSKU01 BY    *
// *   IOMOD IV1880 FOR BUILDING SUMMARY AND DETAIL PRODUCT   *
// *   DISPLAYS.                                              *
// *                                                          *
// ************************************************************
// *    M A I N T E N A N C E    H I S T O R Y    L O G       *
// *----------------------------------------------------------*
// *   DATE    PGMR    DESCRIPTION                            *
// *----------------------------------------------------------*
// * 12-18-96  GDECKE  NEW APPLICATION                        *
// ************************************************************
// ***********************
Record IV0NW02 type basicRecord
  5 IV0NW-WS-REC-GROUP IV0NW-WS-REC-GROUP ; 
    10 IV-IVC-ID IV-IVC-ID ; 
    10 IV0NW-IVC-ID-CHAR IV0NW-IVC-ID-CHAR ; 
      15 IV0NW-IVC-ID-FILL IV0NW-IVC-ID-FILL ; 
      15 IV0NW-IVC-PART-CHAR IV0NW-IVC-PART-CHAR ; 
    10 IV0NW-DEADLOCK-CT IV0NW-DEADLOCK-CT ; 
    10 IV0NW-DEADLOCK-FL IV0NW-DEADLOCK-FL ; 
    10 IV0NW-CURR-PROC-NM IV0NW-CURR-PROC-NM ; 
    10 IV0NW-DISP-IVC-ID IV0NW-DISP-IVC-ID ; 
    10 IV0NW-ERROR-FLAG IV0NW-ERROR-FLAG ; 
    10 IV0NW-LINE-INDEX IV0NW-LINE-INDEX ; 
    10 IV0NW-INDEX2 IV0NW-INDEX2 ; 
    10 IV0NW-INDEX3 IV0NW-INDEX3 ; 
    10 IV0NW-CSR-EOF-FL IV0NW-CSR-EOF-FL ; 
    10 IV0NW-CURR-ITEM-PTR IV0NW-CURR-ITEM-PTR ; 
    10 IV0NW-CURR-SCRN-PTR IV0NW-CURR-SCRN-PTR ; 
    10 IV0NW-CURR-PAGE-PTR IV0NW-CURR-PAGE-PTR ; 
    10 CU-CUST-PROD-ID CU-CUST-PROD-ID ; 
      15 IV0NW-CU-CUST-PROD-ID IV0NW-CU-CUST-PROD-ID ; 
      15 IV0NW-CU-CUST-PROD-ID2 IV0NW-CU-CUST-PROD-ID2 ; 
end // end IV0NW02

//*** RECORD=IV0NWCUS ****
// ************************************************************
// *   RECORD CONTAINS ONE FIELD - IV0NW-DATA-RECORD          *
// *                                                          *
// *   THE USE OF THIS RECORD WHEN CALLING CU1710 ALLOWS      *
// *   THE FULL RECORD DEFINITION TO BE PASSED BETWEEN THE    *
// *   CALLING PROGRAM AND THE SUBROUTINE.                    *
// *                                                          *
// ************************************************************
// *    M A I N T E N A N C E    H I S T O R Y    L O G       *
// *----------------------------------------------------------*
// *   DATE    PGMR    DESCRIPTION                            *
// *----------------------------------------------------------*
// * 02-10-97  GDECKE  NEW RECORD                             *
// ************************************************************
// ************************
Record IV0NWCUS type basicRecord
  5 IV0NW-DATA-RECORD IV0NW-DATA-RECORD ; 
end // end IV0NWCUS

//*** RECORD=IV0NWMOD ****
// ************************************************************
// *   RECORD CONTAINS ONE FIELD - IV0NW-IOMOD-FUNCTION       *
// *                                                          *
// *   THE USE OF THIS RECORD IN THE DATABASE CALLS ALLOWS    *
// *   THE APPLICATION TO BE CODED WITH JUST ONE CALL TO      *
// *   EACH IOMOD. THE ONE CALL WILL HANDLE ANY FUNCTION CODE *
// *   AS LONG AS THE VALUE IS MOVED TO THE FUNCTION FIELD    *
// *   IN THIS RECORD BEFORE THE IOMOD ROUTINE IS USED.       *
// *                                                          *
// ************************************************************
// *    M A I N T E N A N C E    H I S T O R Y    L O G       *
// *----------------------------------------------------------*
// *   DATE    PGMR    DESCRIPTION                            *
// *----------------------------------------------------------*
// * 12-12-96  GDECKE  NEW APPLICATION                        *
// ************************************************************
// ************************
Record IV0NWMOD type basicRecord
  5 IV0NW-IOMOD-FUNCTION IV0NW-IOMOD-FUNCTION ; 
end // end IV0NWMOD

//*** RECORD=IV0NWPRM ****
// ************************************************************
// *   RECORD CONTAINS ONE FIELD - CU-CUST-PROD-ID            *
// *                                                          *
// *   THE USE OF THIS RECORD IN THE DATABASE CALLS ALLOWS    *
// *   THE 25 BYTE CUSTOMER PRODUCT ID TO BE PASSED FROM THE  *
// *   IV1880 IO MOD TO THE CALLING APPLICATION.              *
// *                                                          *
// ************************************************************
// *    M A I N T E N A N C E    H I S T O R Y    L O G       *
// *----------------------------------------------------------*
// *   DATE    PGMR    DESCRIPTION                            *
// *----------------------------------------------------------*
// * 01-06-97  GDECKE  NEW RECORD                             *
// ************************************************************
// ************************
Record IV0NWPRM type basicRecord
  5 IV0NW-PARM-GROUP-ITM IV0NW-PARM-GROUP-ITM ; 
    10 CU-CUST-PROD-ID CU-CUST-PROD-ID ; 
    10 IV0NW-MORE-SKU-SUMM-LINES IV0NW-MORE-SKU-SUMM-LINES ; 
    10 IV0NW-PARM-PARAGRAPH-GRP IV0NW-PARM-PARAGRAPH-GRP [20] ; 
      15 IV0NW-PARM-SQLCODE IV0NW-PARM-SQLCODE ; 
      15 IV0NW-PARM-PARAGRAPH IV0NW-PARM-PARAGRAPH ; 
end // end IV0NWPRM

//*** RECORD=IV0NWTB2 ****
// ************************************************************
// *   RECORD CONTAINS ONE FIELD - IV0NW-CU-CUST-PROD-ID2     *
// *                                                          *
// *   SAVES 2000 OCCURANCES OF CU-CUST-PROD-ID FOR USE BY    *
// *   IV0N SUMMARY SCREENS. SAVES LAST 10  CHARACTERS. THE   *
// *   REMAINING 15 CHARACTERS STORED IN IV0N-CUST-PROD-TBL   *
// *                                                          *
// ************************************************************
// *    M A I N T E N A N C E    H I S T O R Y    L O G       *
// *----------------------------------------------------------*
// *   DATE    PGMR    DESCRIPTION                            *
// *----------------------------------------------------------*
// * 01-06-97  GDECKE  NEW RECORD                             *
// ************************************************************
// ************************
Record IV0NWTB2 type basicRecord
  5 IV0NW-CUST-PROD-ID-GROUP2 IV0NW-CUST-PROD-ID-GROUP2 ; 
    10 IV0NW-CU-CUST-PROD-ID2 IV0NW-CU-CUST-PROD-ID2 [2000] ; 
end // end IV0NWTB2

//*** RECORD=IV0NWTB3 ****
// ************************************************************
// *   RECORD CONTAINS three fields with 2000 occurances each *
// *                                                          *
// *   SAVES 2000 OCCURANCES OF shipped quantity, net unit    *
// *   price and net merchandise amount for display on summary*
// *   screen along with saved value of cu-cust-prod-id       *
// *                                                          *
// ************************************************************
// *    M A I N T E N A N C E    H I S T O R Y    L O G       *
// *----------------------------------------------------------*
// *   DATE    PGMR    DESCRIPTION                            *
// *----------------------------------------------------------*
// * 01-23-97  GDECKE  NEW RECORD                             *
// ************************************************************
// ************************
Record IV0NWTB3 type basicRecord
  5 IV0NW-CUST-PROD-ID-GROUP3 IV0NW-CUST-PROD-ID-GROUP3 ; 
    10 IV-LN-SHIPPED-QTY IV-LN-SHIPPED-QTY [2000] ; 
    10 IV-NET-UNIT-PRC IV-NET-UNIT-PRC [2000] ; 
    10 IV-NET-LN-MRCH-AMT IV-NET-LN-MRCH-AMT [2000] ; 
end // end IV0NWTB3

//*** RECORD=IV0NWTBL ****
// ************************************************************
// *   RECORD CONTAINS ONE FIELD - IV0NW-CU-CUST-PROD-ID      *
// *                                                          *
// *   SAVES 2000 OCCURANCES OF CU-CUST-PROD-ID FOR USE BY    *
// *   IV0N SUMMARY SCREENS. SAVES FIRST 15 CHARACTERS. THE   *
// *   REMAINING 10 CHARACTERS STORED IN IV0N-CUST-PROD-TB2   *
// *                                                          *
// ************************************************************
// *    M A I N T E N A N C E    H I S T O R Y    L O G       *
// *----------------------------------------------------------*
// *   DATE    PGMR    DESCRIPTION                            *
// *----------------------------------------------------------*
// * 01-06-97  GDECKE  NEW RECORD                             *
// ************************************************************
// ************************
Record IV0NWTBL type basicRecord
  5 IV0NW-CUST-PROD-ID-GROUP IV0NW-CUST-PROD-ID-GROUP ; 
    10 IV0NW-CU-CUST-PROD-ID IV0NW-CU-CUST-PROD-ID [2000] ; 
end // end IV0NWTBL

//*** RECORD=VIVSKU01 ****
// *************  INVOICE CORRECTION HEADER TABLE  ************
// *                                                          *
// * DB2 TABLE:          DINVC.VIVSKU01                       *
// *                                                          *
// * COPYLIB MEMBER:     DIVSKU01                             *
// *                                                          *
// * I/0 MOD:            IV1880                               *
// *                                                          *
// * KEY TO DB2 TABLE:   IV-IVC-PART-CHAR                     *
// *                     IV-IVC-ID                            *
// *                     OP-LINE-ITEM-NBR                     *
// *                     SY-SZ-ID                             *
// *                                                          *
// * DATE CREATED        12-12-96                             *
// *                                                          *
// * MAINTENANCE HISTORY LOG:                                 *
// *   DATE    PGMR     DESCRIPTION                           *
// * --------  ------  ---------------------------------------*
// * 12-12-96  GDECKE  INITIAL RECORD CREATION                *
// *                                                          *
// ************************************************************
// ************************
Record VIVSKU01 type basicRecord
  5 VIVSKU01-GROUP VIVSKU01-GROUP ; 
    10 IV-IVC-PART-CHAR IV-IVC-PART-CHAR ; 
    10 IV-IVC-ID IV-IVC-ID ; 
    10 OP-LINE-ITEM-NBR OP-LINE-ITEM-NBR ; 
    10 SY-SZ-ID SY-SZ-ID ; 
    10 CU-CUST-PROD-ID CU-CUST-PROD-ID ; 
    10 CU-PROD-ID-OVRDFL CU-PROD-ID-OVRDFL ; 
    10 ZZ-SDT ZZ-SDT ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    10 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    10 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end VIVSKU01

// END OF FILE FOR CURSOR SELECT
DataItem IV0NW-CSR-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu-cust-prod-id - first 15 chr
DataItem IV0NW-CU-CUST-PROD-ID char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu-cust-prod-id - last 10 char
DataItem IV0NW-CU-CUST-PROD-ID2 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CURRENT ITEM POINTER IN TABLE
DataItem IV0NW-CURR-ITEM-PTR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// CURRENT PAGE POINTER ON TABLE
DataItem IV0NW-CURR-PAGE-PTR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CURRENT PROCESS NAME
DataItem IV0NW-CURR-PROC-NM char(24)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// CURRENT ITEM POINTER ON SCREEN
DataItem IV0NW-CURR-SCRN-PTR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// SAVE ALL CUST-PROD-ID'S
DataItem IV0NW-CUST-PROD-ID-GROUP char(30000)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// SAVE ALL CUST-PROD-ID'S
DataItem IV0NW-CUST-PROD-ID-GROUP2 char(20000)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// SAVE ALL CUST-PROD-ID'S
DataItem IV0NW-CUST-PROD-ID-GROUP3 char(28000)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// DATA RECORD PASSED TO CU1710
DataItem IV0NW-DATA-RECORD char(8192)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DEADLOCK COUNT
DataItem IV0NW-DEADLOCK-CT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// DEADLOCK FLAG
DataItem IV0NW-DEADLOCK-FL char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// display format for ivc-id
DataItem IV0NW-DISP-IVC-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ERROR FLAG
DataItem IV0NW-ERROR-FLAG char(1)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// INDEX #2
DataItem IV0NW-INDEX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// INDEX #3
DataItem IV0NW-INDEX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// iomod function to perform
DataItem IV0NW-IOMOD-FUNCTION char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// DISPLAY VERSION OF INVOICE ID
DataItem IV0NW-IVC-ID-CHAR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FIRST PART OF INVOICE ID
DataItem IV0NW-IVC-ID-FILL char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// LAST DIGIT OF INVOICE ID
DataItem IV0NW-IVC-PART-CHAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// INVOICE LINE INDEX
DataItem IV0NW-LINE-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// FOR IV1880 - SELECT STATUS FLG
DataItem IV0NW-MORE-SKU-SUMM-LINES char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// iv0nw-cust-prod-prm group itm
DataItem IV0NW-PARM-GROUP-ITM char(726)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// trace paragraph
DataItem IV0NW-PARM-PARAGRAPH char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// trace last 20 from iv1880
DataItem IV0NW-PARM-PARAGRAPH-GRP char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// trace sqlcode
DataItem IV0NW-PARM-SQLCODE char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// IVC CORRECTION ORIGINAL DATA
DataItem IV0NW-WS-REC-GROUP char(88)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// prod desc format
DataItem IV0NWFDC char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// found name flag
DataItem IV0NWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prod id format
DataItem IV0NWFID char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// iv0n work group
DataItem IV0NWGRP char(10723)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// item array max
DataItem IV0NWIMX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// item select flag
DataItem IV0NWISF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line item array
DataItem IV0NWITM char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// item index
DataItem IV0NWIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// name array
DataItem IV0NWNAM char(640)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of lines
DataItem IV0NWNLN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// name array max
DataItem IV0NWNMX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// name index
DataItem IV0NWNX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// line item nbr
DataItem IV0NWOLN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current screen
DataItem IV0NWSCR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved item index
DataItem IV0NWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved name index
DataItem IV0NWSNX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved SQL code
DataItem IV0NWSQL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save six from summ1 to 2
DataItem IV0NWSSI smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save snx from summ1 to 2
DataItem IV0NWSSN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved size index
DataItem IV0NWSZX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size index
DataItem IV0NWZX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CORRECTION HEADER GROUP ITEM
DataItem VIVSKU01-GROUP char(47)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

