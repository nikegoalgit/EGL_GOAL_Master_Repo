package iv0d;

import corpcom3.XPIV001;
import corpcom3.XPIV002;
import corpcom3.XPIV003;
import corpcom3.XPIV004;
import corpcom3.XPIV005;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSIVS02;
import corpcom4.XSIVSIT;
import corpcom4.XSIVXF;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XWHTBL;
import corpx2.XOBCD;
import iv.common.*;
import ku.common.KUCREC;
import op.common.OP1CUNDT;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=IV0D ****
//      Invoicing Inquiry     Sub-Order Selection List
// 
// Overview: This application presents the user with a
//           list of all sub-orders for the passed (from
//           IV0A) customer order number.  The user is
//           allowed to select one or more of these to
//           view the associated invoices.  Control is
//           then passed in most cases to IV0E.
// 
// Date Created: 01/03/87
//       Author: P. Gilhousen
// 
// Maintenance History:
// 
//     Date     By Whom     Overview of Change
//   -------- ------------  -----------------------------------
//   01/03/87 P.Gilhousen   Program Creation
//   06/17/94 lgross        changed error message 35 to 66
//                          changed: iv0esis
// *********************
Program IV0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "IV00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IV0DW01 IV0DW01; // record
  IVDREC IVDREC; // record
  IVFREC IVFREC; // record
  IVGREC IVGREC; // record
  IVXREC IVXREC; // record
  IVYREC IVYREC; // record
  KUCREC KUCREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use IV0DM.IV0DM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    IV0D001: IV0D001();
    goto IV0D005;
    IV0D005: IV0D005();
    ;
       /* reach the flow only on error, so return to display*/
       /* error message*/
    ;
    if (IVYREC.IVYERR == "Y")
      IVYREC.IVYERR = "N";
    end
    ;
    ;
    goto IV0D005;
    ;
    ;
  end // end main
end // end IV0D

Function IV0D001()
  ;
     /* ***   This process performs the following functions:  ****/
     /* ***     - Checks entry security                       ****/
     /* ***     - Moves the working storage and invoicing     ****/
     /* ***     - work record from the incoming common area   ****/
     /* ***     - initializes the map and working fields      ****/
     /* ***         - reads database combined partial header  ****/
     /* ***           and header index records                ****/
  ;
  ;
  XSENTRY(); /* system security check*/
  ;
  ;
  IV0DSPI(); /* initialize program*/
  ;
     /* if a new selection, search database for records;*/
     /* otherwise, use existing array to redisplay records*/
  ;
  if (COMMAREA.CAFROMAP == "IV0A")
    IV0DSOS(); /* select order records*/
  else
    IV0DSDO(); /* display existing orders list*/
  end
  ;
     /* if only one sub-order found, by-pass display of the*/
     /* screen - process as if ENTER had been pressed*/
  ;
  if (IVXREC.IVXOAMAX == 1)
    IVXREC.IVXOASFL[1] = "S"; /* mark as selected*/
    IV0DSEN();
                                   /* Enter key routine - will send to iv0e*/
  end
  ;
  ;
end // end IV0D001

// read 'iv0d' temp storage
Function IV0D002()
  ;
  ;
  ;
   /* read temp storage*/
  ;
  IVFREC.IVFLNGTH = 414; /* temp storage length*/
  TA5REC.TA5APPID = "IV0D"; /* appl identification*/
  TA5REC.TA5FNCCD = "R"; /* function code*/
  TA5REC.TA5TSQIX = IVXREC.IVXWFQIX; /* index number*/
  ;
  ;
  call "TA0050" (IVFREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD == +0)
     /* next sentence*/
  else
    converseLib.validationFailed(10); /* database busy*/
     /* MOVE 'Y' TO IV0DW01.IV0DWEMF  ; turn on error flag*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
    TA1REC.TA1TYPE = "APPL"; /* type of error*/
    TA1REC.TA1PGMNM = IVXREC.IVXAPPL;
    TA1REC.TA1MAP = "IV0DM001"; /* map name*/
    TA1REC.TA1LOCAT[1] = "TA0050";
    TA1REC.TA1LOCAT[2] = "IV0DRTS";
    TA1REC.TA1LOCAT[3] = IVXREC.IVXLOC;
    TAEREC.TAEDESC1 = "READ PAGE TO TEMP STORAGE";
     /* MOVE IV0DW01.OSHRQTID TO TAEREC.TAEDESC2;*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
    ;
  end
  ;
  ;
  ;
end // end IV0D002

// add iv0d temp storage
Function IV0D003()
  ;
   /* add temp storage*/
  ;
  ;
  IVFREC.IVFLNGTH = 414; /* temp storage length*/
  TA5REC.TA5APPID = "IV0D"; /* APPL IDENTIFICATION*/
  TA5REC.TA5FNCCD = "A"; /* function code*/
  TA5REC.TA5TSQIX = IVXREC.IVXWFQIX;
  ;
  ;
  call "TA0050" (IVFREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD == +0)
     /* MOVE TA5REC.TA5TSQIX TO IV0DW01.TA5TSQIX; highest page nbr*/
     /* SET IVFREC EMPTY;*/
  else
    converseLib.validationFailed(10); /* database busy*/
     /* MOVE 'Y' TO IV0DW01.IV0DWEMF  ; turn on error flag*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
    TA1REC.TA1TYPE = "APPL"; /* type of error*/
    TA1REC.TA1PGMNM = IVXREC.IVXAPPL;
    TA1REC.TA1LOCAT[1] = "TA0050";
    TA1REC.TA1LOCAT[2] = "IV0DATS";
    TA1REC.TA1LOCAT[3] = IVXREC.IVXLOC;
    TA1REC.TA1MAP = "IV0DM001"; /* map name*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA;
    TAEREC.TAEDESC2 = "ADD PAGE TO TEMPORARY STORAGE";
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
    ;
  end
  ;
  ;
  ;
  ;
end // end IV0D003

// update temp storage
Function IV0D004()
  ;
  ;
  ;
   /* update temp storage*/
  ;
  IVFREC.IVFLNGTH = 414; /* temp storage length*/
  TA1REC.TA1PGMNM = IVXREC.IVXAPPL;
  TA5REC.TA5APPID = "IV0D"; /* appl identification*/
  TA5REC.TA5FNCCD = "U"; /* function code*/
  TA5REC.TA5TSQIX = IVXREC.IVXWFQIX;
  ;
  call "TA0050" (IVFREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD == +0)
     /* next sentence*/
  else
    converseLib.validationFailed(10); /* database busy*/
     /* MOVE 'Y' TO IV0DW01.IV0DWEMF  ; turn on error flag*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
    TA1REC.TA1TYPE = "APPL"; /* type of error*/
    TA1REC.TA1PGMNM = IVXREC.IVXAPPL;
    TA1REC.TA1LOCAT[1] = "TA0050";
    TA1REC.TA1LOCAT[2] = "IV0DUTS";
    TA1REC.TA1LOCAT[3] = IVXREC.IVXLOC;
     /* MOVE 'IV0DM001' TO TA1REC.TA1MAP     ; map name*/
    TAEREC.TAEDESC1 = "UPDATE TO TEMP STORAGE FAILED";
     /* MOVE ivfREC.OSHRQTID TO TAEDESC2;*/
    ;
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
    ;
  end
  ;
end // end IV0D004

// Converse Sub-Order List
Function IV0D005()
  ;
     /* ***   This process presents the Sub-Order selection ****/
     /* *** list for the user, and passes control to the    ****/
     /* *** Selection list screen after the user has        ****/
     /* *** indicated their selection(s).                   ****/
  ;
  converse IV0DM001 ;
  ;
  ;
     /* pass immediately if user has selected fastpath*/
  ;
  if (IV0DM001.CATOAP != " " /* if fastpath entered*/
   || IV0DM001.CAITEM != " ") /* 11-12-87*/
    COMMAREA.CATOAP = IV0DM001.CATOAP; /* set up commarea*/
    COMMAREA.CAITEM = IV0DM001.CAITEM;
    XSIVXF(); /* edit option/item pair*/
    if (converseVar.validationMsgNum == 0) /* if no errors 11-12-87*/
      if (IVXREC.IVXWGQIX != 0) /* if 'ivg' temp storage record exists*/
        XPIV003(); /* purge temp storage*/
        IVXREC.IVXWGQIX = 0; /* initialize index*/
      end
      if (IVXREC.IVXWFQIX != 0) /* if 'iv0d' temp storage record exists*/
        XPIV005(); /* purge temp storage*/
        IVXREC.IVXWFQIX = 0; /* initialize index*/
      end
      XSEXIT(); /* attempt to pass*/
      IV0DM001.XXXMSG = COMMAREA.CAMSG; /* if got here, pass was*/
      set IV0DM001.CATOAP cursor, bold; /* unsuccessful - let user know*/
      set IV0DM001 alarm;
      converseLib.validationFailed(18);
    else
      set IV0DM001.CAITEM cursor, bold; /* 11-12-87*/
    end /* 11-12-87*/
    IVYREC.IVYERR = "Y"; /* 11-12-87*/
    exit stack; /* 11-12-87*/
  end
  ;
     /* reset screen from any previous errors*/
  ;
  set IV0DM001.CATOAP normal;
  set IV0DM001.CAITEM initialAttributes; /* 11-12-87*/
  ;
  IVYREC.IVYSUB = 1;
  while (IVYREC.IVYSUB < 11)
    set IV0DM001.IV0DMSEL[IVYSUB] initialAttributes;
    IVYREC.IVYSUB = IVYREC.IVYSUB + 1;
  end
  ;
     /* record any selections made by the user*/
  ;
  if (converseVar.eventKey is enter)
     /* IF IV0DM001 IS MODIFIED       ; only if some entry made*/
    IV0DSEL(); /* record user selections*/
     /* END ;*/
  end
  ;
     /* if bad entry, go to flow to redisplay screen*/
  ;
  if (IVYREC.IVYERR == "Y")
    exit stack;
  end
  ;
     /* pass to appropriate screen based on user entry*/
  ;
  if (converseVar.eventKey is enter)
    IV0DSEN();
  else
    if (converseVar.eventKey is pf3)
      IV0DS03();
    else
      if (converseVar.eventKey is pf4)
        IV0DS04();
      else
        if (converseVar.eventKey is pf7) /* if pf7 entered*/
          if (IVXREC.IVXWFIXC == 1) /* if current map is at page 1*/
            converseLib.validationFailed(4); /* error*/
            IV0D006(); /* darken remaining selects*/
          else /* else*/
            IV0DSEN();
            if (IV0DM001 is modified) /* if some entry made*/
              IV0DSEL(); /* record user selections*/
            end
            IVXREC.IVXWFIXC = IVXREC.IVXWFIXC - 1; /* decrement page*/
            IV0DSDO(); /* display page*/
          end
        else
          if (converseVar.eventKey is pf8)
            if (IVXREC.IVXWFIXC == IVXREC.IVXWFIXM) /* if map is on last page*/
              converseLib.validationFailed(5); /* error*/
              IV0D006(); /* darken remaining selects*/
            else /* else*/
              IV0DSEN();
              if (IV0DM001 is modified) /* if some entry made*/
                IV0DSEL(); /* record user selections*/
              end
              IVXREC.IVXWFIXC = IVXREC.IVXWFIXC + 1; /* increment page*/
              IV0DSDO(); /* display page*/
            end
          else
            converseLib.validationFailed(3);
            IVYREC.IVYERR = "Y";
          end
        end
      end
    end
  end
  ;
  ;
  ;
end // end IV0D005

// set unused select flds to dark
Function IV0D006()
  ;
  ;
  ;
  ;
     /* set any unused select lines back to dark*/
     /* so redisplay looks right*/
  ;
  IVYREC.IVYSUB = +1; /* initilaize subscript*/
  while (IVYREC.IVYSUB < 11)
    if (IV0DM001.XWHCD[IVYSUB] == "  ") /* if warehouse is blank*/
      set IV0DM001.IV0DMSEL[IVYSUB] skip, invisible; /* darken select flag*/
    end
    IVYREC.IVYSUB = IVYREC.IVYSUB + 1;
  end
  ;
  ;
  ;
  ;
end // end IV0D006

// load data to ivfrec array
Function IV0D007()
  ;
  ;
  ;
     /* ***   This PROCESS LOADS SCREEN VALUES            ****/
     /* ***   TO THE TEMP STORAGE RECORD                  ****/
  ;
  IVFREC.OP1NORID[IVXWFIDX] = IVDREC.OP1NORID;
  IVFREC.OP1CUNDT[IVXWFIDX] = IVDREC.OP1CUNDT;
  IVFREC.XWHCD[IVXWFIDX] = IVDREC.XWHCD;
  IVFREC.XDSCD[IVXWFIDX] = IVDREC.XDSCD;
  IVFREC.OP1CUPO[IVXWFIDX] = IVDREC.OP1CUPO;
  ;
     /* look-up warehouse abbreviation*/
  ;
  if (IVDREC.XWHCD in XWHTBL.XWHCD)
    IVFREC.XWHSABRV[IVXWFIDX] = XWHTBL.XWHSABRV[sysVar.arrayIndex];
  end
  if (sysVar.arrayIndex == 0) /* if not found on table*/
    IVFREC.XWHSABRV[IVXWFIDX] = IVDREC.XWHCD; /* display code*/
  end
  ;
     /* set select flag from array value*/
  ;
  IVFREC.IVFMSEL[IVXWFIDX] = IVXOASFL[IVXOAIDX];
  ;
  ;
  ;
end // end IV0D007

// PF3 Pressed Actions
Function IV0DS03()
  ;
  ;
  if (IVXREC.IVXWGQIX != 0) /* if 'ivg' temp storage record exists*/
    XPIV003(); /* purge temp storage*/
    IVXREC.IVXWGQIX = 0; /* initialize index*/
  end
  if (IVXREC.IVXWFQIX != 0) /* if 'iv0d' temp storage record exists*/
    XPIV005(); /* purge temp storage*/
    IVXREC.IVXWFQIX = 0; /* initialize index*/
  end
  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  COMMAREA.CATOAP = "IV0A";
  XSEXIT();
  converseLib.validationFailed(15); /* transfer failed*/
  IVYREC.IVYERR = "Y"; /* flag as error*/
  ;
  ;
end // end IV0DS03

// PF4 Pressed Actions
Function IV0DS04()
  ;
  ;
  if (IVXREC.IVXWGQIX != 0) /* if 'ivg' temp storage record exists*/
    XPIV003(); /* purge temp storage*/
    IVXREC.IVXWGQIX = 0; /* initialize index*/
  end
  if (IVXREC.IVXWFQIX != 0) /* if 'iv0d' temp storage record exists*/
    XPIV005(); /* purge temp storage*/
    IVXREC.IVXWFQIX = 0; /* initialize index*/
  end
  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  COMMAREA.CATOAP = "MN0M";
  XSEXIT();
  converseLib.validationFailed(15); /* transfer failed*/
  IVYREC.IVYERR = "Y"; /* mark as error*/
  ;
  ;
end // end IV0DS04

// Close Database
Function IV0DSCD()
  ;
     /* ***   This statement group is used to close the    ****/
     /* *** database after find next using IO1150.         ****/
  ;
     /* close database*/
  ;
  set IV0DW01 empty;
  IV0DW01.IV0DWSSS = "CS";
  call "IO1150" (IV0DW01, SQLCA, IVDREC) {isNoRefresh = yes};
  ;
  ;
end // end IV0DSCD

// Redisplay invoices for Order
Function IV0DSDO()
  ;
     /* ***   This statement group reads thru the order    ****/
     /* *** array, and displays one line for each array    ****/
     /* *** entry.  Also, sets viewed flag for sub-order   ****/
     /* *** in ivxrec - presumably passed from IV0E.       ****/
  ;
  IVXREC.IVXWFQIX = IVXREC.IVXWFIXC; /* set  ts index to current*/
  IVXREC.IVXLOC = "IV0DSDO"; /* move module name to location*/
  IV0D002(); /* read temp storage*/
  ;
   /* the following three lines are done this way due to csp's*/
   /* inability to deal with semi-complex math statements.*/
  ;
  IVXREC.IVXOAIDX = IVXREC.IVXWFIXC - 1;
                                   /* order array index = current page -1*/
  IVXREC.IVXOAIDX = IVXREC.IVXOAIDX * 10; /* multiply result by 10*/
  IVXREC.IVXOAIDX = IVXREC.IVXOAIDX + 1; /* add 1 to result*/
  ;
  IVYREC.IVYSUB = 1; /* screen index*/
  IVXREC.IVXWFIDX = 0; /* initialize ts array index*/
  ;
     /* loop thru array and display*/
  while (IVXREC.IVXOAIDX <= IVXREC.IVXOAMAX)
    set IVDREC empty; /* clear db record before read*/
    IVYREC.IVYIVCN = IVXREC.IVXOAIVC[IVXOAIDX];
                                   /* get invoice part no*/
    IVDREC.IV0PARTN = IVYREC.IV0PARTN;
    IVDREC.IV0IVCID = IVXREC.IVXOAIVC[IVXOAIDX];
    IVXREC.IVXWFIDX = IVXREC.IVXWFIDX + 1; /* increment ts array index*/
    if (IVYREC.IVYSUB == 1) /* first one*/
      IV0DSSU(); /* get invoice for customer data*/
      IV0DSFC(); /* find customer*/
    end /* not first one*/
    if (IVYREC.IVYSUB < 11) /* if screen not full*/
      IV0DSSC(); /* display on screen*/
      IVYREC.IVYSUB = IVYREC.IVYSUB + 1; /* set up screen idx*/
    end
    IVXREC.IVXOAIDX = IVXREC.IVXOAIDX + 1;
  end
  ;
     /* reset op1norid so as not to get lead astray*/
  ;
  IVXREC.IVXOP1NO = 0;
  ;
     /* loop thru and set any unused selects to dark*/
  ;
  while (IVYREC.IVYSUB < 11)
    set IV0DM001.IV0DMSEL[IVYSUB] skip, invisible;
    IVYREC.IVYSUB = IVYREC.IVYSUB + 1;
  end
  ;
  ;
  ;
end // end IV0DSDO
// Find Customer
Function IV0DSCU()
     /* ***   This statement group is used to retrieve     ****/
     /* *** company record if ivxrec value not initialized ****/
  ;
   /* 03-27-91 bcourt Hold KUCSKIND for use in IV0NSDC.*/
   /* 08/12/91 lgross move kukgrpid when kucskind = 'r'*/
     /* blank records*/
  ;
  set KUCREC empty;
  set SQLCA empty;
  ;
   /* look up company record to get name*/
  ;
  KUCREC.KUCCOID = IVDREC.KUCCOID;
  ;
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE != 0)
      TA1REC.TA1PGMNM = "IV0D    ";
      TA1REC.TA1MAP = "IV0DM001";
      TA1REC.TA1DBASE = "DCUST   ";
      TA1REC.TA1TBLVU = "VCMPNY01";
      TA1REC.TA1TBLKE = KUCREC.KUCGRP;
      TA1REC.TA1LOCAT[3] = "IV0DSCU";
      TA1REC.TA1LOCAT[4] = "IO0240";
      XSIVS02();
    end
  end
  ;
  IVXREC.KUCCONM = KUCREC.KUCCONM;
  IVXREC.KUCSKIND = KUCREC.KUCSKIND; /* 3-27-91 ADDED*/
  if (KUCREC.KUCSKIND == "P")
    IVXREC.KUKPCOID = KUCREC.KUKPCOID; /* used in iv0nsdc*/
  end
  if (KUCREC.KUCSKIND == "R")
    IVXREC.KUCGRPID = KUCREC.KUCGRPID; /* used in iv0nsdc*/
  end
  ;
  ;
end // end IV0DSCU

// Save off Selections to array
Function IV0DSEL()
  ;
     /* ***   This statement group checks for any selections ****/
     /* *** made by the user on the Sub-order screen, and    ****/
     /* *** records them in the order array.                 ****/
  ;
  IV0D002(); /* read 'iv0d' temp storage*/
     /* set indexes*/
  ;
  IVYREC.IVYSUB = 1;
  ;
  IVXREC.IVXWFIDX = 0;
  ;
  ;
   /* the following three lines are done this way due to csp's*/
   /* inability to deal with semi-complex math statements.*/
  ;
  IVXREC.IVXOAIDX = IVXREC.IVXWFIXC - 1;
                                   /* order array index = current page -1*/
  IVXREC.IVXOAIDX = IVXREC.IVXOAIDX * 10; /* multiply result by 10*/
  IVXREC.IVXOAIDX = IVXREC.IVXOAIDX + 1; /* add 1 to result*/
  ;
     /* loop thru and record selections*/
  ;
  while (IVYREC.IVYSUB < 11)
    IVXREC.IVXWFIDX = IVXREC.IVXWFIDX + 1; /* increment ts array index*/
    if (IV0DMSEL[IVYSUB] == " " /* no entry, or erase selection*/
     || IV0DMSEL[IVYSUB] == "S" /* line selected*/
     || IV0DMSEL[IVYSUB] == "V") /* marked as viewed*/
      IVXREC.IVXOASFL[IVXOAIDX] = IV0DMSEL[IVYSUB];
      IVFREC.IVFMSEL[IVXWFIDX] = IV0DMSEL[IVYSUB];
      IVYREC.IVYSUB = IVYREC.IVYSUB + 1; /* set indexes for next*/
      IVXREC.IVXOAIDX = IVXREC.IVXOAIDX + 1;
    else
      converseLib.validationFailed(40); /* invalid selection*/
      IVYREC.IVYERR = "Y";
      set IV0DM001.IV0DMSEL[IVYSUB] cursor, bold;
      IVYREC.IVYSUB = IVYREC.IVYSUB + 1;
      IVXREC.IVXOAIDX = IVXREC.IVXOAIDX + 1;
    end
  end
  ;
     /* set any unused select lines back to dark if an error*/
     /* so redisplay looks right*/
  ;
  if (IVYREC.IVYERR == "Y")
    IVYREC.IVYSUB = IVXREC.IVXOAMAX + 1;
    while (IVYREC.IVYSUB < 11)
      set IV0DM001.IV0DMSEL[IVYSUB] skip, invisible;
      IVYREC.IVYSUB = IVYREC.IVYSUB + 1;
    end
  end
  ;
  ;
  if (IVXREC.IVXWFQIX > 0) /* ;if temp storage record exists*/
    IV0D004(); /* ;  update temp storage*/
  end
  ;
  ;
  ;
  ;
end // end IV0DSEL

// Enter Key Pressed Actions
Function IV0DSEN()
  ;
     /* ***   this statement group handles the case where  ****/
     /* *** the enter key was pressed on the Sub-order     ****/
     /* *** screen.  Find the first selection made by the  ****/
     /* *** user and pass to the List screen after setting ****/
     /* *** values.  If no selections made, pass back to   ****/
     /* *** menu screen.*/
  ;
  IVXREC.IVXLOC = "IV0DSEN"; /* move module name to work field*/
  XPIV002(); /* read temp storage*/
  ;
     /* set indexes for selection check.*/
  ;
  IVYREC.IVYSUB = 1;
  IVYREC.IVYSUB1 = 1;
  ;
     /* set array indexes to 0 to be able to tell if sel found*/
  ;
  IVXREC.IVXIASDX = 0;
  IVXREC.IVXOAIDX = 0;
  ;
     /* loop thru checking for any selections.  If found*/
      /* pass to detail screen set-up*/
  ;
  while (IVYREC.IVYSUB <= IVXREC.IVXOAMAX)
    if (IVXREC.IVXOASFL[IVYSUB] == "S")
      while (IVYREC.IVYSUB1 <= IVXREC.IVXIAMAX)
        if (IVXREC.IVXOAIVC[IVYSUB] == IVGREC.IVGIAIVC[IVYSUB1])
          if (IVGREC.IVGIASTR[IVYSUB1] == "B")
            IVGREC.IVGIASTR[IVYSUB1] = "O";
          else
            if (IVGREC.IVGIASTR[IVYSUB1] == "O")
              /* next sentence ( leave code = 'O' )*/
            else
              IVGREC.IVGIASTR[IVYSUB1] = "T";
            end
          end
          IVXREC.IVXIASDX = IVYREC.IVYSUB1;
          IVYREC.IVYSUB1 = IVXREC.IVXIAMAX + 1;
        else
          IVYREC.IVYSUB1 = IVYREC.IVYSUB1 + 1;
        end
      end
      IVXREC.IVXOP1NO = IVXREC.IVXNORID[IVYSUB];
      IVXREC.IVXOAIDX = IVYREC.IVYSUB;
      IVYREC.IVYSUB = IVXREC.IVXOAMAX + 1;
    else
      IVYREC.IVYSUB = IVYREC.IVYSUB + 1;
    end
  end
  ;
  if (IVXREC.IVXWGQIX > 0) /* ;if temp storage record exists*/
    XPIV004(); /* ;  update temp storage*/
  end
  ;
     /* set up commarea for call of next screen*/
  ;
  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  ;
  ;
     /* if selections were made, pass to selection list screen*/
      /* otherwise, pass back to selection menu*/
      /* note: this will not be done when the screen*/
            /* is being paged*/
  ;
  if (converseVar.eventKey is pf7)
      /* next sentence*/
  else
    if (converseVar.eventKey is pf8)
        /* next sentence*/
    else
      if (IVXREC.IVXIASDX != 0)
        if (IVXREC.IVXWGQIX != 0) /* if temp storage record exists*/
          XPIV004(); /* update temp storage*/
        end
        COMMAREA.CATOAP = "IV0E";
        XSEXIT(); /* transfer to list screen*/
        converseLib.validationFailed(15); /* transfer failed*/
        IVYREC.IVYERR = "Y";
      else
        COMMAREA.CATOAP = "IV0A";
        XSEXIT(); /* transfer to selection menu*/
        converseLib.validationFailed(15); /* transfer failed*/
        IVYREC.IVYERR = "Y";
      end
    end
  end
  ;
  ;
end // end IV0DSEN

// Set-up for Customer read
Function IV0DSFC()
  ;
     /* ***   This statement group is used to check for and ****/
     /* *** set ivxrec values if necessary prior to the call****/
     /* *** to find the customer record for name.  If the   ****/
     /* *** company name is already in ivxrec, as will be   ****/
     /* *** the case on redisplays, the io mod call is not  ****/
     /* *** done.                                           ****/
  ;
     /* if don't already have company name, call io mod*/
  ;
  if (IVXREC.KUCCONM == " ")
    IV0DSCU();
  end
  ;
     /* set ivxrec values so display on iv0e*/
  ;
  IVXREC.IVXKUCCO = IVDREC.KUCCOID;
  IVXREC.IVXKUMST = IVDREC.KUMSTRID;
  IVXREC.XNXCD = IVDREC.XNXCD;
  ;
     /* initialize map now that have customer info*/
  ;
  IV0DSMI();
  ;
  ;
end // end IV0DSFC

// Map Initialization
Function IV0DSMI()
  ;
     /* ***   this statement group initializes the map   ****/
  ;
     /* initialize map*/
  ;
  converseLib.clearScreen();
  set IV0DM001 initial;
  ;
     /* set revision number*/
  ;
  IV0DM001.XXXRVNBR = "1";
  ;
     /* move in fields.  NOTE: company, store and department are*/
     /* taken from the current ivdrec*/
  ;
  IV0DM001.XXXCURDT = VGVar.currentShortGregorianDate; /* move in current date*/
  IV0DM001.OP1CUOID = IVXREC.IVXOP1CO; /* move in cust order num*/
  IV0DM001.KUCCOID = IVDREC.KUCCOID; /* move in company*/
  IV0DM001.KUMSTRID = IVDREC.KUMSTRID; /* move in store*/
  IV0DM001.XNXCD = IVDREC.XNXCD; /* move in dept*/
  IV0DM001.KUCCONM = IVXREC.KUCCONM; /* move in customer name*/
  IV0DM001.IV0DMPGN = IVXREC.IVXWFIXC; /* move page number*/
  IV0DM001.IV0DMPGX = IVXREC.IVXWFIXM; /* move page maximum*/
  ;
  ;
end // end IV0DSMI

// Read invoices for Order
Function IV0DSOS()
  ;
  ;
  ;
  ;
  ;
     /* ***   This statement group reads thru all invoices ****/
     /* *** for the selected order, and displays one line  ****/
     /* *** for each different sub-order (Nike order).     ****/
     /* *** also sets up arrays to be used in controlling  ****/
     /* *** selections for this and IV0E.                  ****/
  ;
     /* do select set for orders*/
   /* DATE     DONE BY            DESCRIPTION*/
   /* 06/17/93  LGROSS        CHANGED ERROR MESSAGE CODE TO 66 FROM 35*/
  ;
  IV0DSSS();
  ;
     /* set select criteria to go thru retrieved records*/
  ;
  set IV0DW01 empty;
  set IVGREC empty; /* initialize temp  storage record*/
  set IVFREC empty; /* initialize temp  storage record*/
  IV0DW01.IV0DWSSS = "SN";
  ;
     /* loop thru selected orders and process*/
  ;
  IVXREC.IVXWFIDX = 0; /* SUB ORDER*/
  IVXREC.IVXWFIXC = 0; /* SUB ORDER screen index current*/
  IVXREC.IVXWFIXM = 0; /* SUB ORDER screen index high*/
  IVYREC.IVYSUB = 1; /* screen index*/
  IVXREC.IVXIAIDX = 1; /* invoice array index*/
  IVXREC.IVXOAIDX = 1; /* order array index*/
  while (SQLCA.VAGen_SQLCODE == 0
   && IVXREC.IVXIAIDX < 501)
    IV0DSSN();
    if (SQLCA.VAGen_SQLCODE == 0)
      IVGREC.IVGIAIVC[IVXIAIDX] = IVDREC.IV0IVCID;
                                   /* save to inv array*/
      IVXREC.IVXIAIDX = IVXREC.IVXIAIDX + 1;
      if (IVDREC.OP1NORID != IVXREC.IVXOP1NO) /* ivx used to hold prev*/
        IVXREC.IVXNORID[IVXOAIDX] = IVDREC.OP1NORID; /* ord array*/
        IVXREC.IVXOAIVC[IVXOAIDX] = IVDREC.IV0IVCID;
                                   /* track first inv*/
        if (IVXREC.IVXOP1NO == 0) /* first one*/
          IV0DSFC(); /* find customer*/
        else /* not first one*/
          IVYREC.IVYSUB1 = IVXREC.IVXIAIDX - 2; /* want to mark prev inv*/
          IVGREC.IVGIASTR[IVYSUB1] = "B";
                                   /* mark as last for prev ord*/
        end
        IVXREC.IVXOP1NO = IVDREC.OP1NORID; /* set for next prev*/
        ;
        IVXREC.IVXWFIDX = IVXREC.IVXWFIDX + 1; /* increment ivfrec index*/
        if (IVXREC.IVXWFIDX > 10) /* if ivfrec array index > 10*/
          IVXREC.IVXWFQIX = IVXREC.IVXWFQIX + 1; /* increment ts pointer*/
          IVXREC.IVXWFIXC = IVXREC.IVXWFIXC + 1; /* increment current index*/
          IV0D003(); /* add record to temp stor*/
          set IVFREC empty; /* initialize temp  storage record*/
          IVXREC.IVXWFIDX = 1; /* set index to 1*/
        end
        ;
        IV0D007(); /* add screen data to temp storage record*/
        if (IVYREC.IVYSUB < 11) /* if screen not full*/
          IV0DSSC(); /* display on screen*/
          IVYREC.IVYSUB = IVYREC.IVYSUB + 1; /* set up screen idx*/
        end
        IVXREC.IVXOAIDX = IVXREC.IVXOAIDX + 1;
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        if (IVXREC.IVXIAIDX == 1) /* if no records found*/
          IV0DSCD(); /* be sure to close db*/
          IVXREC.IVXMSSNB = 66; /* send message to user*/
          COMMAREA.CAUSERA = IVXREC.IVXGROUP;
          COMMAREA.CAFROMAP = "IV0D";
          COMMAREA.CACURRAP = "IV0A";
          transfer to transaction "IV0A" passing COMMAREA;
        end
      end
    end
  end
  ;
  IVXREC.IVXLOC = "IV0DSOS"; /* move module name to location*/
  IVXREC.IVXWGQIX = 1; /* set temp stor index to 1*/
  XPIV001(); /* add to temp storage*/
  ;
  IVXREC.IVXWFQIX = IVXREC.IVXWFQIX + 1; /* increment ts pointer*/
  IVXREC.IVXWFIXC = IVXREC.IVXWFIXC + 1; /* increment current index*/
  IV0D003(); /* add record to 'iv0d' ts*/
  set IVFREC empty; /* initialize temp  storage record*/
  IVXREC.IVXWFIDX = 1; /* set index to 1*/
  ;
  IVXREC.IVXWFIXM = IVXREC.IVXWFIXC; /* set high index*/
  IVXREC.IVXWFIXC = 1; /* reset SUB ORDER index current*/
  ;
   /* now that page numbers have been set, move them to map*/
  ;
  IV0DM001.IV0DMPGN = IVXREC.IVXWFIXC; /* move page number*/
  IV0DM001.IV0DMPGX = IVXREC.IVXWFIXM; /* move page maximum*/
  ;
   /* if the sql code is zero*/
     /* if 500 invoices*/
        /* read the next row*/
        /* if there is another row*/
            /* send message to the screen*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if more rows left*/
    if (IVXREC.IVXIAIDX > 499) /* if more than 499 invoices*/
      IV0DSSN(); /* read the next row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* if another  row is found*/
        converseLib.validationFailed(58); /* move error message*/
      end
    end
  end
  ;
  ;
     /* reset op1norid so as not to get lead astray*/
  ;
  IVXREC.IVXOP1NO = 0;
  ;
     /* close database*/
  ;
  IV0DSCD();
  ;
     /* set array max values*/
  ;
  IVXREC.IVXOAMAX = IVXREC.IVXOAIDX - 1;
  IVXREC.IVXIAMAX = IVXREC.IVXIAIDX - 1;
  ;
     /* set any unused selects to dark*/
  ;
  while (IVYREC.IVYSUB < 11)
    set IV0DM001.IV0DMSEL[IVYSUB] skip, invisible;
    IVYREC.IVYSUB = IVYREC.IVYSUB + 1;
  end
  ;
  ;
end // end IV0DSOS

// Program Initialization
Function IV0DSPI()
  ;
     /* ***   this statement group initializes work areas,  ****/
     /* *** and initializes the screen                      ****/
  ;
     /* blank work records, initialize ivxrec*/
  ;
  set IV0DW01 empty;
  set IVYREC empty;
  IVXREC.IVXGROUP = COMMAREA.CAUSERA; /* setup up program storage*/
  ;
     /* if came in fastpath, initialize areas, set option*/
     /* code, and initialize nike order number.  Setting of*/
     /* cafromap is done to ensure that code to find orders*/
     /* is executed (see iv0d001).*/
  ;
  if (COMMAREA.CAITEM != " " /* fastpath in*/
   || COMMAREA.CAFRMSYS != COMMAREA.CACURSYS) /* from other sys, 10-27-87*/
    COMMAREA.CAUSERA = " "; /* blank user area*/
    set IVXREC empty; /* set work area empty*/
    IVXREC.IVXINIT = "IV0"; /* init new ivxrec*/
    IVXREC.IVXOPTN = 1; /* reset option code*/
    IVXREC.IVXTYPFL = "O"; /* set type flag*/
    COMMAREA.CAFROMAP = "IV0A"; /* set from app to find recs*/
    XSIVSIT(); /* verify that caitem is numeric*/
    IVYREC.IVYORDN = COMMAREA.CAITEM; /* move to numeric*/
    IVXREC.IVXOP1CO = IVYREC.IVYORDN;
    COMMAREA.CAITEM = " "; /* reset caitem to space*/
  else
    if (IVXREC.IVXINIT != "IV0") /* if not inited*/
      IVXREC.IVXMSSNB = 18; /* send back to menu*/
      IVXREC.IVXINIT = "IV0"; /* set so iv0a will look for message*/
      COMMAREA.CAUSERA = IVXREC.IVXGROUP;
      COMMAREA.CAFROMAP = "IV0D";
      COMMAREA.CACURRAP = "IV0A";
      transfer to transaction "IV0A" passing COMMAREA;
    end
  end
  ;
  ;
end // end IV0DSPI

// Set-up screen for display
Function IV0DSSC()
  ;
     /* ***   This statement group sets screen values for ****/
     /* *** a line on the sub-order screen                ****/
  ;
  IV0DM001.OP1NORID[IVYSUB] = IVFREC.OP1NORID[IVXWFIDX]; /* sub order*/
  IV0DM001.OP1CUNDT[IVYSUB] = IVFREC.OP1CUNDT[IVXWFIDX]; /* need date*/
  IV0DM001.XWHCD[IVYSUB] = IVFREC.XWHCD[IVXWFIDX]; /* warehouse code*/
  IV0DM001.XWHSABRV[IVYSUB] = IVFREC.XWHSABRV[IVXWFIDX]; /* whse abrev*/
  IV0DM001.XDSCD[IVYSUB] = IVFREC.XDSCD[IVXWFIDX]; /* direct ship code*/
  IV0DM001.OP1CUPO[IVYSUB] = IVFREC.OP1CUPO[IVXWFIDX]; /* cust id*/
  IV0DM001.IV0DMSEL[IVYSUB] = IVXREC.IVXOASFL[IVXOAIDX];
                                   /* select flag*/
  IVFREC.IVFMSEL[IVXWFIDX] = IVXREC.IVXOASFL[IVXOAIDX];
  ;
  ;
end // end IV0DSSC

// Select Next for invoices
Function IV0DSSN()
  ;
     /* ***   this statement group does the select next ****/
     /* *** for invoices with specified order number    ****/
  ;
     /* blank records*/
  ;
  set IVDREC empty;
  set SQLCA empty;
  ;
     /* call io mod with select next option*/
  ;
  call "IO1150" (IV0DW01, SQLCA, IVDREC) {isNoRefresh = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1PGMNM = "IV0D    ";
    TA1REC.TA1MAP = "IV0DM001";
    TA1REC.TA1DBASE = "DINVC   ";
    TA1REC.TA1TBLVU = "VIVHDR03";
    TA1REC.TA1TBLKE = IVDREC.IVDKEY;
    TA1REC.TA1LOCAT[3] = "IV0DSSN";
    TA1REC.TA1LOCAT[4] = "IO1150";
    XSIVS02();
  end
  ;
  ;
end // end IV0DSSN

// Select Set of Sub-Orders
Function IV0DSSS()
  ;
     /* ***   this statement group will set up keys for a   ****/
     /* *** select set to find sub-orders for a given order ****/
  ;
  ;
  set SQLCA empty;
  set IVDREC empty;
  ;
     /* set select set option, and sort parameters*/
  ;
  IV0DW01.IV0DWSSS = "SS";
  IV0DW01.IV0DWSIN[1] = 5; /* primary sort on nike order*/
  IV0DW01.IV0DWSAD[1] = "A";
  IV0DW01.IV0DWSIN[2] = 2; /* secondary sort on invoice*/
  IV0DW01.IV0DWSAD[2] = "A";
  ;
     /* set up keys.  For Dynamic select, all values must be set*/
     /* to 'wildcard' type values except the order number*/
  ;
  IVDREC.OP1CUOID = IVXREC.IVXOP1CO;
  IVYREC.IVYORDN = IVXREC.IVXOP1CO; /* split for part char*/
  IVDREC.OP1PARTN = IVYREC.OP1PARTN;
  ;
  IVDREC.OP1NORID = -1; /* set all remaining to wildcard*/
  IVDREC.KUCCOID = -1;
  IVDREC.KUMSTRID = -1;
  IVDREC.XNXCD = -1;
  IVDREC.XDVCD = "**"; /* initialize xdv-div-cd*/
  IVDREC.XGPCD = "**";
  IVDREC.SM1AGYID = "****";
  IVDREC.SM4REPID = -1;
  IVDREC.IV0JCPB = -1;
  IVDREC.XOBCD = "**";
  IVDREC.IV0POIDX = "**";
  IVDREC.OP1CUPO = "*";
  IVDREC.XWHCD = "**";
  IVDREC.SP1ID = "****";
  IVDREC.XOCCD = "**";
  IVDREC.XSOCD = "**";
  IVDREC.IV0IVCDT = -1;
  IVDREC.OP1CUNDT = -1;
  IVDREC.IVAIVAMT = -1;
  IVDREC.KU0JCPSD = "***";
  IV0DW01.XOBCD = "**";
  IV0DW01.IV0IVCDT = -1;
  IV0DW01.OP1CUNDT = -1;
  IV0DW01.IVAIVAMT = -1;
  ;
     /* call io mod with select option list - for all*/
     /* invoices with specified customer order number*/
  ;
  call "IO1150" (IV0DW01, SQLCA, IVDREC) {isNoRefresh = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1PGMNM = "IV0D    ";
    TA1REC.TA1MAP = "IV0DM001";
    TA1REC.TA1DBASE = "DINVC   ";
    TA1REC.TA1TBLVU = "VIVHDR03";
    TA1REC.TA1TBLKE = IVDREC.IVDGROUP; /* 10-30-87*/
    TA1REC.TA1LOCAT[3] = "IV0DSSS"; /* 10-30-87*/
    TA1REC.TA1LOCAT[4] = "IO1150";
    XSIVS02();
  end
  ;
  ;
end // end IV0DSSS

// Select Unique Invoices
Function IV0DSSU()
  ;
     /* ***   this statement group does the select for  ****/
     /* *** invoices from the order array.              ****/
  ;
     /* blank record*/
  ;
  set SQLCA empty;
  ;
     /* set select criteria to do select unique for invoice*/
  ;
  set IV0DW01 empty;
  IV0DW01.IV0DWSSS = "S ";
  ;
     /* call io mod with select unique option*/
  ;
  call "IO1150" (IV0DW01, SQLCA, IVDREC) {isNoRefresh = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1PGMNM = "IV0D    ";
    TA1REC.TA1MAP = "IV0DM001";
    TA1REC.TA1DBASE = "DINVC   ";
    TA1REC.TA1TBLVU = "VIVHDR03";
    TA1REC.TA1TBLKE = IVDREC.IVDGROUP; /* 10-30-87*/
    TA1REC.TA1LOCAT[3] = "IV0DSSU"; /* 10-30-87*/
    TA1REC.TA1LOCAT[4] = "IO1150";
    XSIVS02();
  end
  ;
  ;
end // end IV0DSSU

//*** RECORD=IV0DW01 ****
// Working storage used exclusively by the IV0D application.
// This area wil go away when the program is exited.  Used
// mainly to hold the selection information for the dynamic
// select for IO1150.
// 
// maintenance history
// 
// date     changer change#  comments
// 03-21-89 fjelle  iv89012  change xotcd to xobcd
// ***********************
Record IV0DW01 type basicRecord
  5 IV0DWGRP IV0DWGRP ; 
    10 IV0DWSGP IV0DWSGP ; 
      15 IV0DWSSS IV0DWSSS ; 
      15 IV0DWAGP IV0DWAGP [10] ; 
        20 IV0DWSIN IV0DWSIN ; 
        20 IV0DWSAD IV0DWSAD ; 
      15 XOBCD XOBCD ; 
      15 IV0IVCDT IV0IVCDT ; 
      15 OP1CUNDT OP1CUNDT ; 
      15 IVAIVAMT IVAIVAMT ; 
end // end IV0DW01

// sort array group
DataItem IV0DWAGP char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// iv0d internal work area
DataItem IV0DWGRP char(68)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sort asc or desc
DataItem IV0DWSAD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select set option list
DataItem IV0DWSGP char(68)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sort item number
DataItem IV0DWSIN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sql option - select set
DataItem IV0DWSSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

