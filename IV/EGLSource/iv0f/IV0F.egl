package iv0f;

import corpcom1.CLACLMNB;
import corpcom1.CLASTTDT;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSIVXF;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpy2.YCRCD;
import corpy2.YCRTBL;
import corpy2.YCSCD;
import corpy2.YCTCD;
import corpy2.YITCD;
import iv.common.IV0IVCID;
import iv.common.IV0PARTN;
import iv.common.IV0REC;
import iv.common.IVFREC;
import iv.common.IVGREC;
import iv.common.IVXREC;
import iv.common.IVYREC;
import op.common.OP1CUOID;
import op.common.OP1NORID;
import op.common.OP1PARTN;
import pf.common.PFJREC;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=IV0F ****
// This program will display the oldest ten claim numbers,
// their status and claim dates for an invoice.
// This program will be entered from IV0G.
// 
// Maintenance Log
// Date   Done by       Reason
// 12-01-91 lgross       installed
// 05-26-92 lgross       allow pf20 to order comment change
//                       screen - changes: iv0fm001, iv0f200
// 07/09/92 lgross       allow pf21 to invoice comment
//                       changes: IV0FM001,IV0F200
// *********************
Program IV0F type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "IV00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IV0FW01 IV0FW01; // record
  IV0FW08 IV0FW08; // record
  IV0REC IV0REC; // record
  IVFREC IVFREC; // record
  IVGREC IVGREC; // record
  IVXREC IVXREC; // record
  IVYREC IVYREC; // record
  PFJREC PFJREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YCRTBL {deleteAfterUse = yes}; // table
  use IV0FM.IV0FM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    IV0F000: IV0F000();
    ;
    ;
     /* *************************************************************/
     /* *****               F L O W    S T A G E               ******/
     /* *************************************************************/
    ;
    goto IV0F000;
    ;
     /* *************************************************************/
     /* *****          E N D    F L O W     S T A G E          ******/
     /* *************************************************************/
    ;
    ;
    ;
    IV0F050: IV0F050();
    goto IV0F050;
    ;
    ;
    ;
  end // end main
end // end IV0F

// application driver
Function IV0F000()
  ;
  ;
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  ;
  IV0F001(); /* initialize the application*/
  ;
  ;
  IV0F050(); /* process application*/
  ;
  ;
  ;
end // end IV0F000

// initialize application
Function IV0F001()
  ;
  ;
   /* ************************************************************/
   /* *      initialize the application working storage         **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  XSENTRY(); /* check entered thru main menu*/
  ;
  VGVar.handleHardIOErrors = 1; /* return control to program if hard db2 error*/
  ;
                       /* ; CLEAR ALL WORKING STORAGE RECORDS*/
  set ERRSQLCA empty;
  set IVXREC empty;
  set IVYREC empty;
  set IV0FW01 empty;
  set IV0REC empty;
  set IV0FW08 empty;
  set SQLCA empty;
  set TA1REC empty;
  ;
  IV0FM001.XXXCURDT = VGVar.currentShortGregorianDate; /* MOVE CURRENT DATE TO SCREEN*/
  ;
  if (COMMAREA.CAFROMAP == "IV0G") /* program should be entered from iv0h*/
    IVXREC.IVXGROUP = COMMAREA.CAUSERA; /* move commarea to ivxrec*/
  else
    COMMAREA.CATOAP = "IV0A";
    XSEXIT();
    XSPF4();
    exit program;
  end
  ;
  IV0FW01.IV0FWCT1 = 0; /* initialize map line index*/
  ;
  IV0FW01.IV0FWEAF = "N"; /* set application-done flag to 'no'*/
  ;
  IV0FW01.IV0FWERF = "N"; /* set error flag to 'no'*/
  ;
  ;
end // end IV0F001

// converse map
Function IV0F050()
  ;
  ;
   /* *************************************************************/
   /* *****     F O R M A T     S C R E E N     W I T H      ******/
   /* *****                     D A T A                      ******/
   /* *************************************************************/
   /* this module is performed from iv0f000*/
   /* *************************************************************/
  if (IV0FW01.IV0FWERF == "N") /* if no error*/
    IV0F100(); /* move header data*/
  end
  ;
  if (IV0FW01.IV0FWERF == "N") /* if no error*/
    IV0F110(); /* move cl data*/
  end
  ;
   /* converse iv0fm001*/
  converse IV0FM001 ;
  ;
  IV0F200(); /* edit screen*/
  ;
  ;
  ;
end // end IV0F050

// error routine
Function IV0F099()
  ;
  ;
      /* *********************************************************/
      /* * online abort routine for iv system                   **/
      /* *********************************************************/
  ;
  TA1REC.TA1TYPE = "DB2"; /* abend type*/
  TA1REC.TA1FUNC = "RETN"; /* abend func*/
  set ERRSQLCA empty; /* clear area*/
  move SQLCA to ERRSQLCA withV60Compat; /* save orig sqlca*/
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* synpoint rollback*/
  try
    call "TA0020" (TA1REC, ERRSQLCA);
  end /* abend module*/
  COMMAREA.CAUSERA = " "; /* clear user commarea*/
  XSPF4(); /* master menu*/
  exit program; /* master menu failure*/
  ;
  ;
  ;
end // end IV0F099

// load header data to screen
Function IV0F100()
  ;
  ;
   /* *************************************************************/
   /* *****     F O R M A T     h e a d e r  d a t a         ******/
   /* *************************************************************/
  ;
  IV0FM001.IV0IVCID = IVXREC.IV0IVCID;
  IV0FM001.KUCCOID = IVXREC.KUCCOID;
  IV0FM001.KUMSTRID = IVXREC.KUMSTRID;
  IV0FM001.XNXCD = IVXREC.XNXCD;
  IV0FM001.KUCCONM = IVXREC.KUCCONM;
  IV0FM001.IV0IVCDT = IVXREC.IV0IVCDT;
  ;
  ;
  ;
end // end IV0F100

// GET CLAIM ROWS
Function IV0F110()
  ;
  ;
   /* *************************************************************/
   /* *****           G E T     G L      R O W S             ******/
   /* *************************************************************/
  ;
  ;
  SQLCA.VAGen_SQLCODE = 0;
  IV0FW01.IV0FWCT1 = 0;
  IV0FW08.IV0IVCID = IVXREC.IV0IVCID;
  IV0FW01.IV0FW-IVID = IVXREC.IV0IVCID;
  IV0FW08.IV0PARTN = IV0FW01.IV0PARTN;
  IV0FW08.IV0FWSQL = "SC";
  call "CL2320" (IV0FW08, SQLCA) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    /* *****************************************************/
    /* *****  THIS IS DBII ERROR PROCESSING CODE      ******/
    /* *****************************************************/
    TA1REC.TA1PGMNM = "IV0F";
    TA1REC.TA1MAP = "IV0FM001";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VCLIVX01";
    TA1REC.TA1TBLKE = IV0FW01.IV0FW-IVID;
    TA1REC.TA1LOCAT[3] = "IV0F111";
    TA1REC.TA1LOCAT[4] = "CL2320";
    IV0F099();
    /* *****************************************************/
  end
  ;
  IV0FW01.IV0FWCLF = "Y"; /* initialize claim flag*/
  ;
  while (IV0FW01.IV0FWCLF == "Y"
   && IV0FW01.IV0FWCT1 < 15)
    set IV0FW08 empty;
    IV0FW08.IV0IVCID = IVXREC.IV0IVCID;
    IV0FW08.IV0PARTN = IV0FW01.IV0PARTN;
    IV0FW08.IV0FWSQL = "SN";
    call "CL2320" (IV0FW08, SQLCA) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE != 0)
      IV0FW01.IV0FWCLF = "N"; /* move 'n' to cl flag*/
      if (SQLCA.VAGen_SQLCODE != 100)
        /* *****************************************************/
        /* *****  THIS IS DBII ERROR PROCESSING CODE      ******/
        /* *****************************************************/
        TA1REC.TA1PGMNM = "IV0F";
        TA1REC.TA1MAP = "IV0FM001";
        TA1REC.TA1DBASE = "CLAIM";
        TA1REC.TA1TBLVU = "VIVCLX01";
        TA1REC.TA1TBLKE = IV0FW01.IV0FW-IVID;
        TA1REC.TA1LOCAT[3] = "IV0F112";
        TA1REC.TA1LOCAT[4] = "CL2320";
        IV0F099();
        /* *****************************************************/
      end
    else
      IV0F111(); /* move fields to screen*/
    end
  end
  ;
  IV0FW08.IV0FWSQL = "CS";
  call "CL2320" (IV0FW08, SQLCA) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    /* *****************************************************/
    /* *****  THIS IS DBII ERROR PROCESSING CODE      ******/
    /* *****************************************************/
    TA1REC.TA1PGMNM = "IV0F";
    TA1REC.TA1MAP = "IV0FM001";
    TA1REC.TA1DBASE = "DCLAIM";
    TA1REC.TA1TBLVU = "VIVCLX01";
    TA1REC.TA1TBLKE = IV0FW01.IV0FW-IVID;
    TA1REC.TA1LOCAT[3] = "IV0F113 ";
    TA1REC.TA1LOCAT[4] = "CL2320";
    IV0F099();
    /* *****************************************************/
  end
  ;
  ;
  ;
end // end IV0F110

// MOVE CLAIM DATA TO SCREEN
Function IV0F111()
  ;
  ;
   /* *************************************************************/
   /* *****   G E T    &    F O R M A T    G L A   D A T A   ******/
   /* *****               O N     S C R E E N                ******/
   /* *************************************************************/
  ;
  IV0FW01.IV0FWCT1 = IV0FW01.IV0FWCT1 + 1; /* increment array index*/
  ;
  if (IV0FW01.IV0FWCT1 == 15)
    converseLib.validationFailed(059);
  else
    IV0FM001.CLACLMNB[IV0FWCT1] = IV0FW08.CLACLMNB; /* claim number*/
    IV0FM001.YCSCD[IV0FWCT1] = IV0FW08.YCSCD[1]; /* claim status*/
    IV0FM001.IV0FSTTDT[IV0FWCT1] = IV0FW08.CLASTTDT; /* CLAIM DATE*/
    IV0FM001.YCRCD[IV0FWCT1] = IV0FW08.YCRCD; /* REASON CODE*/
    IV0FM001.YCTCD[IV0FWCT1] = IV0FW08.YCTCD; /* CLAIM TYPE*/
    if (IV0FM001.YCRCD[IV0FWCT1] in YCRTBL.YCRCD)
      IV0FM001.YCRSDESC[IV0FWCT1] = YCRTBL.YCRSDESC[sysVar.arrayIndex];
    else
      IV0FM001.YCRSDESC[IV0FWCT1] = "UNKNOWN";
    end
  end
  ;
  ;
  ;
  ;
end // end IV0F111

// DECIDE WHERE TO GO NOW !
Function IV0F200()
  ;
  ;
   /* *************************************************************/
   /* *****  T R A N S F E R    T O     R E Q U E S T E D    ******/
   /* *****              A P P L I C A T I O N               ******/
   /* *****                                                  ******/
   /* *****  THIS PROCESS WILL TRANSFER CONTROL TO THE AP-   ******/
   /* *****  PROPRIATE APPLICATION.                          ******/
   /* *****  05/26/92  lgross  Allow pf20 to order comment   ******/
   /* *****                    change screen                 ******/
   /* *************************************************************/
  ;
  IV0FW01.IV0FWERF = "N"; /* initializer error flag*/
  ;
  if (IV0FM001.CAITEM > " " /* if fastpath item out*/
   && IV0FM001.CATOAP == " ")
                                   /* and fastpath application is blank*/
    converseLib.validationFailed(55); /* invalid security to xfer*/
    IV0FW01.IV0FWERF = "Y"; /* set error flag to yes*/
    return; /* return*/
  end
  ;
  ;
  if (IV0FM001.CATOAP > " ") /* check for fastpath out*/
    COMMAREA.CATOAP = IV0FM001.CATOAP;
    COMMAREA.CAITEM = IV0FM001.CAITEM;
    XSIVXF(); /* edit option/item*/
    if (converseVar.validationMsgNum == 0)
      XSEXIT();
      IV0FW01.IV0FWERF = "Y"; /* set error flag to yes*/
      converseLib.validationFailed(15); /* invalid security to xfer*/
    end
    set IV0FM001.CAITEM cursor, bold;
    return;
  end
  ;
  ;
  if (converseVar.eventKey is enter)
    COMMAREA.CAUSERA = IVXREC.IVXGROUP;
    COMMAREA.CATOAP = "IV0G"; /* invoice header*/
    XSEXIT();
    converseLib.validationFailed(15); /* invalid security to xfer*/
    IV0FW01.IV0FWERF = "Y"; /* set error flag to yes*/
    return;
  else /* else("enter" not pressed)*/
    if (converseVar.eventKey is pf1)
      XSPF1();
      converseLib.validationFailed(15); /* invalid security to xfer*/
      return;
    end
    ;
    if (converseVar.eventKey is pf3)
      COMMAREA.CAUSERA = IVXREC.IVXGROUP;
      COMMAREA.CATOAP = "IV0A"; /* invoice menu*/
      XSEXIT();
      converseLib.validationFailed(15); /* invalid security to xfer*/
      IV0FW01.IV0FWERF = "Y"; /* set error flag to yes*/
      return;
    end
    ;
    if (converseVar.eventKey is pf4)
      COMMAREA.CAUSERA = " ";
      COMMAREA.CATOAP = "MN0M";
      XSEXIT();
      converseLib.validationFailed(15); /* invalid security to xfer*/
      IV0FW01.IV0FWERF = "Y"; /* set error flag to yes*/
      return;
    end
    ;
    if (converseVar.eventKey is pf13)
      COMMAREA.CAUSERA = IVXREC.IVXGROUP;
      COMMAREA.CATOAP = "IV0G"; /* invoice header*/
      XSEXIT();
      converseLib.validationFailed(15); /* invalid security to xfer*/
      IV0FW01.IV0FWERF = "Y"; /* set error flag to yes*/
      return;
    end
    ;
    if (converseVar.eventKey is pf15)
      COMMAREA.CAUSERA = IVXREC.IVXGROUP;
      COMMAREA.CATOAP = "IV0J"; /* instructions*/
      XSEXIT();
      converseLib.validationFailed(15); /* invalid security to xfer*/
      IV0FW01.IV0FWERF = "Y"; /* set error flag to yes*/
      return;
    end
    ;
    if (converseVar.eventKey is pf16)
      COMMAREA.CAUSERA = IVXREC.IVXGROUP;
      COMMAREA.CATOAP = "IV0I";
      XSEXIT();
      converseLib.validationFailed(15); /* invalid security to xfer*/
      IV0FW01.IV0FWERF = "Y"; /* set error flag to yes*/
      return;
    end
    ;
    if (converseVar.eventKey is pf14)
      COMMAREA.CAUSERA = IVXREC.IVXGROUP;
      COMMAREA.CATOAP = "IV0H"; /* commissions&payments*/
      XSEXIT();
      converseLib.validationFailed(15); /* invalid security to xfer*/
      IV0FW01.IV0FWERF = "Y"; /* set error flag to yes*/
      return;
    end
    ;
    if (converseVar.eventKey is pf20)
      COMMAREA.CAUSERA = IVXREC.IVXGROUP;
      COMMAREA.CATOAP = "IV0C"; /* order comments*/
      XSEXIT();
      converseLib.validationFailed(15); /* invalid security to xfer*/
      IV0FW01.IV0FWERF = "Y"; /* set error flag to yes*/
      return;
    end
    if (converseVar.eventKey is pf21)
      COMMAREA.CAUSERA = IVXREC.IVXGROUP;
      COMMAREA.CATOAP = "IV0U"; /* invoice comment screen*/
      XSEXIT();
      converseLib.validationFailed(15); /* invalid security to xfer*/
      IV0FW01.IV0FWERF = "Y"; /* set error flag to yes*/
      return;
    end
    ;
    /* *************************************************************/
    /* ** at this point we have determined that an invalid "PF"  ***/
    /* ** key was pressed. display error message and go to "flow"***/
    /* ** which will re-converse screen.                         ***/
    /* *************************************************************/
    ;
    converseLib.validationFailed(3);
  end
  ;
  ;
  ;
end // end IV0F200

//*** RECORD=IV0FW01 ****
// Work Record for IV0G
// 
// Maintenance History
// ********************
// 12-01-91       lgross           record created
// ********************************************************
// ***********************
Record IV0FW01 type basicRecord
  5 IV0FWGRP IV0FWGRP ; 
    10 IV0FWCT1 IV0FWCT1 ; 
    10 IV0FWEAF IV0FWEAF ; 
    10 IV0FWCLF IV0FWCLF ; 
    10 IV0FWERF IV0FWERF ; 
    10 IV0FW-IVID IV0FW-IVID ; 
      15 * char(8) ; 
      15 IV0PARTN IV0PARTN ; 
end // end IV0FW01

//*** RECORD=IV0FW08 ****
// This working storage member will be used to access cl2320.
// date       done by       reason
// 12-01-91   lgross        installation
// ***********************
Record IV0FW08 type basicRecord
  5 IV0FW8GP IV0FW8GP ; 
    10 IV0FWSQL IV0FWSQL ; 
    10 YCSCD YCSCD [9] ; 
    10 CLACLMNB CLACLMNB ; 
    10 IV0IVCID IV0IVCID ; 
    10 IV0PARTN IV0PARTN ; 
    10 YITCD YITCD ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 OP1PARTN OP1PARTN ; 
    10 IV0FWCN1 IV0FWCN1 ; 
    10 IV0FWRTN IV0FWRTN ; 
    10 CLASTTDT CLASTTDT ; 
    10 YCTCD YCTCD ; 
    10 YCRCD YCRCD ; 
end // end IV0FW08

DataItem IV0FW-IVID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem IV0FW8GP char(62)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// general ledger flag
DataItem IV0FWCLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem IV0FWCN1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen array line counter
DataItem IV0FWCT1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end of application flag
DataItem IV0FWEAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag
DataItem IV0FWERF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WORKING STORAGE REC
DataItem IV0FWGRP char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem IV0FWRTN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem IV0FWSQL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

