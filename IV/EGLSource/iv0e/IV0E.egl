package iv0e;

import corpcom3.XPIV001;
import corpcom3.XPIV002;
import corpcom3.XPIV004;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSIVS02;
import corpcom4.XSIVXF;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XOBTBL;
import corpx2.XOBCD;
import iv.common.*;
import op.common.OP1CUNDT;
import op.common.OP1CUPO;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=IV0E ****
//      Invoicing Inquiry     Selection List Screens
// 
// Overview: This application presents the user with a
//           list of invoices for the entered selection
//           criteria (from IV0A).  The user is allowed
//           to select one or more of these lines to view
//           their invoice screens in the order specified
//           by the main menu option.
// 
// Date Created: 01/07/87
//       Author: P. Gilhousen
// 
// Maintenance History:
// 
//     Date     By Whom     Overview of Change
//   -------- ------------  -----------------------------------
//   01/07/87 P.Gilhousen   Program Creation
//   03/03/88 J.Baker       Added 'move -1' STMT in IV0ESSI
//                          due to change in IO1100.
//   12/05/88 C.Trouw       Fixed subscript error in iv0esl2
//   05/30/90 jwood         added noncsp option to calls....
//   04/01/93 lgross        display cu-stor-id rather than
//                          sr-ship-dt  changed IV0ESSC
//   06/17/93 lgross        changed error message 35 to 66
//                          Changed:  iv0esis
//   08/02/93 lgross        changed error message 37 to 67
//                          Changed: IV0ESQI
// *********************
Program IV0E type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "IV00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IV0EW01 IV0EW01; // record
  IV0EW02 IV0EW02; // record
  IV3REC IV3REC; // record
  IVDREC IVDREC; // record
  IVFREC IVFREC; // record
  IVGREC IVGREC; // record
  IVXREC IVXREC; // record
  IVYREC IVYREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XOBTBL {deleteAfterUse = yes}; // table
  use IV0EM.IV0EM001,  // forms
      IV0EM.IV0EM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    IV0E001: IV0E001();
    goto IV0E005;
    IV0E002: IV0E002();
    goto IV0E005;
    IV0E005: IV0E005();
    ;
       /* if an error, redisplay screen*/
    ;
    if (IVYREC.IVYERR == "Y")
      IVYREC.IVYERR = "N";
      goto IV0E005;
    end
    ;
       /* if pf11, pass to List 2*/
    ;
    if (converseVar.eventKey is pf11)
      goto IV0E010;
    end
    ;
       /* if scroll, reset display*/
    ;
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      goto IV0E002;
    end
    ;
       /* if new sub-order selection, go back to beginning*/
    ;
    if (IVXREC.IVXIASDX != 0)
      goto IV0E001;
    end
    ;
       /* escape route*/
    ;
    goto IV0E005;
    ;
    ;
    IV0E010: IV0E010();
    goto IV0E015;
    IV0E015: IV0E015();
    ;
       /* if an error, redisplay screen with message*/
    ;
    if (IVYREC.IVYERR == "Y")
      IVYREC.IVYERR = "N";
      goto IV0E015;
    end
    ;
       /* pass to Selection List 1 if pf10*/
    ;
    if (converseVar.eventKey is pf10)
      goto IV0E002;
    end
    ;
       /* if scrolling, reset display*/
    ;
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      goto IV0E010;
    end
    ;
       /* if a new sub-order selection, pass to top of app*/
    ;
    if (IVXREC.IVXIASDX != 0)
      goto IV0E001;
    end
    ;
       /* escape route*/
    ;
    goto IV0E015;
    ;
    ;
  end // end main
end // end IV0E

Function IV0E001()
  ;
     /* ***   This process performs the following functions:  ****/
     /* ***     - Checks entry security                       ****/
     /* ***     - Moves the working storage and invoicing     ****/
     /* ***     - work record from the incoming common area   ****/
     /* ***     - initializes the map and working fields      ****/
     /* ***         - reads database combined partial header  ****/
     /* ***           and header index records                ****/
  ;
  ;
  XSENTRY(); /* system security check*/
  ;
  ;
  IV0ESPI(); /* initialize program*/
  ;
     /* set screen indicator*/
  ;
  IV0EW02.IV0EWSCR = "1";
  ;
     /* if a new selection, search database for records;*/
     /* otherwise, use existing array to redisplay records*/
  ;
  if (COMMAREA.CAFROMAP == "IV0A")
    IV0ESIS(); /* select invoice records*/
  else
    IV0ESDI(); /* display existing invoice list*/
  end
  ;
  ;
end // end IV0E001

Function IV0E002()
  ;
     /* ***   This process performs scrolling for the   ****/
     /* *** Selection List 2 screen.                    ****/
  ;
     /* reinitialize map*/
  ;
  IV0ESMI();
  ;
     /* set screen indicator*/
  ;
  IV0EW02.IV0EWSCR = "1";
  ;
     /* display records from invoice array*/
  ;
  IV0ESDI();
  ;
  ;
end // end IV0E002

// Converse Selection List 1
Function IV0E005()
  ;
     /* ***   This process presents the invoice selection   ****/
     /* *** list for the user, and passes control to the    ****/
     /* *** next screen as dictated by user entry, and/or   ****/
     /* *** the option from the main menu.                  ****/
  ;
  converse IV0EM001 ;
  ;
     /* pass immediately if user has selected fastpath*/
  ;
  if (IV0EM001.CATOAP != " " /* if fastpath entered*/
   || IV0EM001.CAITEM != " ") /* 11-12-87*/
    COMMAREA.CATOAP = IV0EM001.CATOAP; /* set up commarea*/
    COMMAREA.CAITEM = IV0EM001.CAITEM;
    XSIVXF(); /* 11-12-87 edit option/item*/
    if (converseVar.validationMsgNum == 0) /* 11-12-87*/
      XSEXIT(); /* attempt to pass*/
      IV0EM001.XXXMSG = COMMAREA.CAMSG; /* if got here, pass was*/
      set IV0EM001.CATOAP cursor, bold; /* unsuccessful - let user know*/
      set IV0EM001 alarm;
      converseLib.validationFailed(18);
    else
      set IV0EM001.CAITEM cursor, bold; /* 11-12-87*/
    end /* 11-12-87*/
    IVYREC.IVYERR = "Y";
    exit stack;
  end
  ;
     /* reset screen from any previous errors*/
  ;
  set IV0EM001.CATOAP initialAttributes;
  set IV0EM001.CAITEM initialAttributes; /* 11-12-87*/
  IVYREC.IVYSUB = 1;
  while (IVYREC.IVYSUB < 13)
    if (IV0EM001.IV0IVCID[IVYSUB] == 0)
      /* next sentence*/
    else
      set IV0EM001.IV0EMSEL[IVYSUB] initialAttributes;
    end
    IVYREC.IVYSUB = IVYREC.IVYSUB + 1;
  end
  ;
     /* record any selections made by the user*/
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf11)
    if (IV0EM001 is modified) /* only if some entry made*/
      IV0ESEL(); /* record user selections*/
    end
  end
  ;
     /* if invalid entry, go to flow*/
  ;
  if (IVYREC.IVYERR == "Y")
    exit stack;
  end
  ;
     /* pass to appropriate screen based on user entry*/
  ;
  if (converseVar.eventKey is enter)
    IV0ESEN();
  else
    if (converseVar.eventKey is pf3)
      IV0ES03();
    else
      if (converseVar.eventKey is pf4)
        IV0ES04();
      else
        if (converseVar.eventKey is pf7)
          if (IVXREC.IVXIASDX == IVXREC.IVXIASST)
            converseLib.validationFailed(4);
            IVYREC.IVYERR = "Y";
          else
            IVXREC.IVXIASDX = IVXREC.IVXIASDX - 13;
            if (IVXREC.IVXIASDX < IVXREC.IVXIASST)
              IVXREC.IVXIASDX = IVXREC.IVXIASST;
            end
          end
        else
          if (converseVar.eventKey is pf8)
            if (IVXREC.IVXIAIDX > IVXREC.IVXIATMX)
              converseLib.validationFailed(5);
              IVYREC.IVYERR = "Y";
            else
              IVXREC.IVXIASDX = IVXREC.IVXIAIDX;
            end
          else
            if (converseVar.eventKey is pf11)
               /* no action here - pass to Selection List 2*/
            else
              converseLib.validationFailed(3);
              IVYREC.IVYERR = "Y";
            end
          end
        end
      end
    end
  end
  ;
  ;
end // end IV0E005

Function IV0E010()
  ;
     /* ***   This process displays the Selection List 2      ****/
     /* *** screen.  This program reads selected IVDRECs, and ****/
     /* *** displays on screen.                               ****/
  ;
     /* set screen indicator*/
  ;
  IV0EW02.IV0EWSCR = "2";
  ;
  ;
  IV0ESM2(); /* initialize map 2*/
  ;
  ;
  IV0ESDI(); /* display existing invoice list*/
  ;
  ;
end // end IV0E010

// Converse Selection List 2
Function IV0E015()
  ;
     /* ***   This process presents the invoice selection 2 ****/
     /* *** list for the user, and passes control to the    ****/
     /* *** next screen as dictated by user entry, and/or   ****/
     /* *** the option from the main menu.                  ****/
  ;
  converse IV0EM002 ;
  ;
     /* pass immediately if user has selected fastpath*/
  ;
  if (IV0EM002.CATOAP != " " /* if fastpath entered*/
   || IV0EM002.CAITEM != " ") /* 11-12-87*/
    COMMAREA.CATOAP = IV0EM002.CATOAP; /* set up commarea*/
    COMMAREA.CAITEM = IV0EM002.CAITEM;
    XSIVXF(); /* 11-12-87 edit option/item*/
    if (converseVar.validationMsgNum == 0) /* 11-12-87*/
      XSEXIT(); /* attempt to pass*/
      IV0EM002.XXXMSG = COMMAREA.CAMSG; /* if got here, pass was*/
      set IV0EM002.CATOAP cursor, bold; /* unsuccessful - let user know*/
      set IV0EM002 alarm;
      converseLib.validationFailed(18);
    else
      set IV0EM002.CAITEM cursor, bold; /* 11-12-87*/
    end /* 11-12-87*/
    IVYREC.IVYERR = "Y";
    exit stack;
  end
  ;
     /* reset screen from any previous errors*/
  ;
  set IV0EM002.CATOAP normal;
  set IV0EM002.CAITEM normal; /* 11-12-87*/
  IVYREC.IVYSUB = 1;
  while (IVYREC.IVYSUB < 13)
    if (IV0EM002.IV0IVCID[IVYSUB] == 0)
      /* next sentence*/
    else
      set IV0EM002.IV0EMSEL[IVYSUB] initialAttributes;
    end
    IVYREC.IVYSUB = IVYREC.IVYSUB + 1;
  end
  ;
     /* record any selections made by the user*/
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf10)
    if (IV0EM002 is modified) /* only if some entry made*/
      IV0ESL2(); /* record user selections*/
    end
  end
  ;
     /* if invalid entry, go to flow*/
  ;
  if (IVYREC.IVYERR == "Y")
    exit stack;
  end
  ;
     /* pass to appropriate screen based on user entry*/
  ;
  if (converseVar.eventKey is enter)
    IV0ESEN();
  else
    if (converseVar.eventKey is pf3)
      IV0ES03();
    else
      if (converseVar.eventKey is pf4)
        IV0ES04();
      else
        if (converseVar.eventKey is pf7)
          if (IVXREC.IVXIASDX == IVXREC.IVXIASST)
            converseLib.validationFailed(4);
            IVYREC.IVYERR = "Y";
          else
            IVXREC.IVXIASDX = IVXREC.IVXIASDX - 13;
            if (IVXREC.IVXIASDX < IVXREC.IVXIASST)
              IVXREC.IVXIASDX = IVXREC.IVXIASST;
            end
          end
        else
          if (converseVar.eventKey is pf8)
            if (IVXREC.IVXIAIDX > IVXREC.IVXIATMX)
              converseLib.validationFailed(5);
              IVYREC.IVYERR = "Y";
            else
              IVXREC.IVXIASDX = IVXREC.IVXIAIDX;
            end
          else
            if (converseVar.eventKey is pf10)
               /* no action here - pass to Selection List 1*/
            else
              converseLib.validationFailed(3);
              IVYREC.IVYERR = "Y";
            end
          end
        end
      end
    end
  end
  ;
  ;
end // end IV0E015

// PF3 Pressed Actions
Function IV0ES03()
  ;
  ;
  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  COMMAREA.CATOAP = "IV0A";
  XSEXIT(); /* transfer to main menu*/
  converseLib.validationFailed(15);
  IVYREC.IVYERR = "Y";
  ;
  ;
end // end IV0ES03

// PF4 Pressed Actions
Function IV0ES04()
  ;
  ;
  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  COMMAREA.CATOAP = "MN0M";
  XSEXIT(); /* transfer to system main menu*/
  converseLib.validationFailed(15);
  IVYREC.IVYERR = "Y";
  ;
  ;
end // end IV0ES04

// For All Selection, Set all 'S'
Function IV0ESAL()
  ;
     /* ***   this statement group has the chore of looping ****/
     /* *** thru the invoice array and marking each entry   ****/
     /* *** with an 's', because some silly user has decided****/
     /* *** to display all selected invoices.               ****/
  ;
  IVXREC.IVXLOC = "IV0ESAL"; /* move module name to work field*/
  XPIV002(); /* read temp storage*/
  ;
     /* set index to start position*/
  ;
  IVYREC.IVYSUB2 = IVXREC.IVXIASST;
  ;
     /* loop thru and mark each entry*/
  ;
  while (IVYREC.IVYSUB2 <= IVXREC.IVXIATMX) /* loop thru invoice array*/
    IVGREC.IVGIASFL[IVYSUB2] = "S"; /* setting each sel flag to 's'*/
    IVYREC.IVYSUB2 = IVYREC.IVYSUB2 + 1; /* continue loop*/
  end
  ;
  ;
  if (IVXREC.IVXWGQIX > 0) /* ;if temp storage record exists*/
    XPIV004(); /* ;  update temp storage*/
  end
  ;
  ;
  ;
  ;
end // end IV0ESAL

// Set screen 2 for display
Function IV0ESC2()
  ;
     /* ***   This statement group sets screen values for ****/
     /* *** a line on the selection list 2 screen         ****/
  ;
  IV0EM002.IV0IVCID[IVYSUB] = IVDREC.IV0IVCID;
  IV0ESO2(); /* format order number*/
  IV0EM002.IV0EMORD[IVYSUB] = IVYREC.IVYORDW;
  IV0EM002.IV0IVCDT[IVYSUB] = IVDREC.IV0IVCDT;
  IV0EM002.OP1CUPO[IVYSUB] = IVDREC.OP1CUPO;
  ;
     /* set select flag from array value*/
  ;
  IV0EM002.IV0EMSEL[IVYSUB] = IVGREC.IVGIASFL[IVXIAIDX];
  ;
  ;
end // end IV0ESC2

// Close Database
Function IV0ESCD()
  ;
     /* ***   This statement group is used to close the    ****/
     /* *** database after find next using IO1150.         ****/
  ;
     /* close database*/
  ;
  set IV0EW01 empty;
  IV0EW01.IV0EWSSS = "CS";
  call "IO1150" (IV0EW01, SQLCA, IVDREC) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
end // end IV0ESCD

// Set Unused Lines to Dark
Function IV0ESD1()
  ;
     /* ***   This statement group loops thru and sets any ****/
     /* *** unused lines on screen 1 to dark               ****/
  ;
  IVYREC.IVYSUB2 = IVYREC.IVYSVSUB;
  ;
  while (IVYREC.IVYSUB2 < 13)
    set IV0EM001.IV0EMSEL[IVYSUB2] skip, invisible;
    IVYREC.IVYSUB2 = IVYREC.IVYSUB2 + 1;
  end
  ;
  ;
end // end IV0ESD1

// Set Unused Lines to Dark
Function IV0ESD2()
  ;
     /* ***   This statement group loops thru and sets any ****/
     /* *** unused lines on screen 2 to dark               ****/
  ;
  IVYREC.IVYSUB2 = IVYREC.IVYSVSUB;
  ;
  while (IVYREC.IVYSUB2 < 13)
    set IV0EM002.IV0EMSEL[IVYSUB2] skip, invisible;
    IVYREC.IVYSUB2 = IVYREC.IVYSUB2 + 1;
  end
  ;
  ;
end // end IV0ESD2

// Display Customer for Order
Function IV0ESDC()
  ;
     /* ***   This statement group sets customer values to  ****/
     /* *** screen, and stores in ivxrec for order searches ****/
     /* *** Customer info in this case comes from the first ****/
     /* *** invoice found, but should be the same for all...****/
     /* *** Also sets PO nbr, which should also be the same ****/
  ;
     /* move to ivxrec*/
  ;
  IVXREC.IVXKUCCO = IVDREC.KUCCOID;
  IVXREC.IVXKUMST = IVDREC.KUMSTRID;
  IVXREC.IVXXNXCD = IVDREC.XNXCD;
  IVXREC.IVXOP1CP = IVDREC.OP1CUPO;
  ;
     /* move to header portion of screen*/
  ;
  IV0EM001.KUCCOID = IVDREC.KUCCOID;
  IVYREC.IVYNUM4 = IVDREC.KUMSTRID;
  IV0EM001.IV0EMSTR = IVYREC.IVYNUM4;
  IV0EM001.XNXCD = IVDREC.XNXCD;
  IV0EM001.OP1CUPO = IVDREC.OP1CUPO;
  ;
  ;
end // end IV0ESDC

// Redisplay Invoices from array
Function IV0ESDI()
  ;
     /* ***   This statement group reads thru the invoice  ****/
     /* *** array, and displays one screen's worth of array****/
     /* *** entries.  Also, sets viewed flag for invoice   ****/
     /* *** in ivxrec.                                     ****/
  ;
  ;
  IVXREC.IVXLOC = "IV0ESDI"; /* move module name to work field*/
  XPIV002(); /* read temp storage*/
  ;
  IVYREC.IVYSUB = 1; /* screen index*/
  ;
  IVXREC.IVXIATMX = 0; /* initialize max to 0*/
  ;
     /* set array index.  Figure out where the top and bottom of*/
     /* the current subset of invoice array are (if came from*/
     /* sub-order list), to control screen length and scrolling*/
  ;
  IVXREC.IVXIAIDX = IVXREC.IVXIASDX; /* set work index*/
  if (IVGREC.IVGIASTR[IVXIAIDX] == "T") /* if marked as top of sub-ord list*/
    IVXREC.IVXIASST = IVXREC.IVXIAIDX; /* set begin spot for scroll*/
    IVYREC.IVYSUB1 = IVXREC.IVXIAIDX;
    while (IVYREC.IVYSUB1 <= IVXREC.IVXIAMAX) /* loop to find bottom*/
      if (IVGREC.IVGIASTR[IVYSUB1] == "B") /* found bottom*/
        IVXREC.IVXIATMX = IVYREC.IVYSUB1; /* set temp max*/
        IVYREC.IVYSUB1 = IVXREC.IVXIAMAX + 1; /* and end loop*/
      else
        IVYREC.IVYSUB1 = IVYREC.IVYSUB1 + 1; /* continue loop*/
      end
    end
  else
    if (IVGREC.IVGIASTR[IVXIAIDX] == "O") /* if a single invoice*/
      IVXREC.IVXIASST = IVXREC.IVXIAIDX; /* set begin*/
      IVXREC.IVXIATMX = IVXREC.IVXIAIDX; /* and end indexes*/
       /* if not T or O, must be scrolling - SST and TMX already set*/
    end
  end
     /* just in case, be sure begin and end set to something*/
  ;
  if (IVXREC.IVXIASST == 0)
    IVXREC.IVXIASST = 1;
  end
  ;
  if (IVXREC.IVXIATMX == 0)
    IVXREC.IVXIATMX = IVXREC.IVXIAMAX;
  end
  ;
     /* loop thru array and display*/
  ;
  while (IVXREC.IVXIAIDX <= IVXREC.IVXIATMX /* while entries left in table*/
   && IVYREC.IVYSUB < 13) /* and screen not yet full*/
    set IVDREC empty;
    IVYREC.IVYIVCN = IVGREC.IVGIAIVC[IVXIAIDX];
                                   /* get invoice part no*/
    IVDREC.IV0PARTN = IVYREC.IV0PARTN;
    IVDREC.IV0IVCID = IVGREC.IVGIAIVC[IVXIAIDX];
    IV0ESSU(); /* find the invoice*/
    if (IV0EW02.IV0EWSCR == "1")
      IV0ESSC(); /* display on screen 1*/
    else
      IV0ESC2(); /* display on screen 2*/
    end
    IVYREC.IVYSUB = IVYREC.IVYSUB + 1; /* set up screen idx*/
    IVXREC.IVXIAIDX = IVXREC.IVXIAIDX + 1; /* loop for next invoice*/
  end
  ;
  if (IVXREC.IVXWGQIX > 0) /* ;if temp storage record exists*/
    XPIV004(); /* ;  update temp storage*/
  end
  ;
     /* blank remaining lines*/
  ;
  if (IVYREC.IVYSUB < 13)
    IVYREC.IVYSVSUB = IVYREC.IVYSUB; /* save last for use by iv0esel*/
    if (IV0EW02.IV0EWSCR == "1")
      IV0ESD1(); /* set lines to dark on 1*/
    else
      IV0ESD2(); /* set to dark on 2*/
    end
  else
    IVYREC.IVYSVSUB = 13;
  end
  ;
     /* format invoice count message*/
  ;
  IV0ESMG();
  ;
     /* now set invoice to 0 so as not to get led astray*/
  ;
  IVXREC.IV0IVCID = 0;
  ;
  ;
end // end IV0ESDI

// Save off Selections to array
Function IV0ESEL()
  ;
     /* ***   This statement group checks for any selections ****/
     /* *** made by the user on the Sel List 1 screen, and   ****/
     /* *** records them in the invoice array.               ****/
  ;
  ;
  IVXREC.IVXLOC = " XIVSEN"; /* move module name to work field*/
  XPIV002(); /* read temp storage*/
  ;
  ;
  ;
     /* set indexes*/
  ;
  IVYREC.IVYSUB = 1;
  IVYREC.IVYSUB1 = IVXREC.IVXIASDX;
   /* ivysub2 used in iv0esal if called*/
  ;
     /* loop thru and record selections*/
  ;
  while (IVYREC.IVYSUB < 13)
    if (IV0EM001.IV0EMSEL[IVYSUB] == " " /* no entry, or clear an entry*/
     || IV0EM001.IV0EMSEL[IVYSUB] == "S" /* this line selected - record*/
     || IV0EM001.IV0EMSEL[IVYSUB] == "V") /* marked as viewed*/
      if (IVYREC.IVYSUB1 > 500)
        IVYREC.IVYSUB = 13;
      else
        IVGREC.IVGIASFL[IVYSUB1] = IV0EM001.IV0EMSEL[IVYSUB];
        IVYREC.IVYSUB = IVYREC.IVYSUB + 1; /* set indexes for next*/
        IVYREC.IVYSUB1 = IVYREC.IVYSUB1 + 1;
      end
    else
      if (IV0EM001.IV0EMSEL[IVYSUB] == "A" /* all invoices selected*/
       && IVYREC.IVYSUB1 == 1)             /* valid only on first invoice*/
        IV0ESAL(); /* mark all as 's'*/
        IVYREC.IVYSUB = 13; /* end loop*/
      else
        converseLib.validationFailed(40); /* invalid selection*/
        IVYREC.IVYERR = "Y";
        set IV0EM001.IV0EMSEL[IVYSUB] cursor, bold;
        IVYREC.IVYSUB = IVYREC.IVYSUB + 1;
        IVYREC.IVYSUB1 = IVYREC.IVYSUB1 + 1;
      end
    end
  end
  ;
  if (IVXREC.IVXWGQIX > 0) /* ;if temp storage record exists*/
    XPIV004(); /* ;  update temp storage*/
  end
  ;
     /* if an error, reset unused select slots to dark, so that*/
     /* redisplay looks reasonable*/
  ;
  if (IVYREC.IVYERR == "Y")
    IV0ESD1(); /* blank unused lines*/
  end
  ;
  IVYREC.IVYSVSUB = 0; /* clear index - done with it*/
  ;
  ;
end // end IV0ESEL

// Enter Key Pressed Actions
Function IV0ESEN()
  ;
     /* ***   this statement group handles the case where  ****/
     /* *** the enter key was pressed on the Selection List****/
     /* *** screen.  Find the first selection made by the  ****/
     /* *** user and pass to the next screen after setting ****/
     /* *** values.  If no selections made, pass back to   ****/
     /* *** menu screen.*/
  ;
     /* set index for selection check.*/
  ;
  IVXREC.IVXLOC = "IV0ESEN"; /* move module name to work field*/
  XPIV002(); /* read temp storage*/
  ;
  IVYREC.IVYSUB = IVXREC.IVXIASST;
  ;
     /* set invoice id to zero to be able to tell if sel found*/
  ;
  IVXREC.IV0IVCID = 0;
  ;
     /* loop thru checking for any selections.  If found*/
      /* pass to detail screen set-up*/
  ;
  while (IVYREC.IVYSUB <= IVXREC.IVXIATMX)
    if (IVGREC.IVGIASFL[IVYSUB] == "S") /* selection encountered*/
      IVXREC.IV0IVCID = IVGREC.IVGIAIVC[IVYSUB];
                                   /* set invoice number*/
      IVYREC.IVYSUB = IVXREC.IVXIATMX + 1; /* end loop*/
    else
      IVYREC.IVYSUB = IVYREC.IVYSUB + 1; /* continue loop*/
    end
  end
  ;
     /* set up commarea for call of next screen*/
  ;
  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  ;
     /* if no selections, pass back to selection menu*/
  ;
  if (IVXREC.IV0IVCID == 0)
    if (IVXREC.IVXOAMAX == 0) /* if didn't come from order list*/
      COMMAREA.CATOAP = "IV0A";
      XSEXIT(); /* transfer to main menu*/
      converseLib.validationFailed(15); /* transfer failed*/
      IVYREC.IVYERR = "Y"; /* mark as error*/
    else /* if came from sub-order list*/
      IV0ESNO(); /* check for add'l selections on order*/
      COMMAREA.CAUSERA = IVXREC.IVXGROUP; /* refresh from chgs*/
      if (IVXREC.IVXIASDX == 0) /* no add'l sel found*/
        COMMAREA.CATOAP = "IV0D";
        XSEXIT(); /* transfer to sub-order list*/
        converseLib.validationFailed(15); /* transfer failed*/
        IVYREC.IVYERR = "Y"; /* mark as error*/
      else /* new sub-order to display*/
        return; /* return so can flow to top of app*/
      end
    end
  end
  ;
     /* pass to screen as dictated by option from menu screen*/
  ;
  if (IVXREC.IVXOPTN == 1
   || IVXREC.IVXOPTN == 2
   || IVXREC.IVXOPTN == 6)
    COMMAREA.CATOAP = "IV0G";
    XSEXIT(); /* transfer to Header 1*/
    converseLib.validationFailed(15); /* transfer failed*/
    IVYREC.IVYERR = "Y"; /* mark as error*/
  else
    if (IVXREC.IVXOPTN == 3
     || IVXREC.IVXOPTN == 4)
      COMMAREA.CATOAP = "IV0N";
      XSEXIT(); /* transfer to Prod Summ & Detail*/
      converseLib.validationFailed(15); /* transfer failed*/
      IVYREC.IVYERR = "Y"; /* mark as error*/
    else
      if (IVXREC.IVXOPTN == 7)
        COMMAREA.CATOAP = "IV0H";
        XSEXIT(); /* transfer to Comm & Paymt Terms*/
        converseLib.validationFailed(15); /* transfer failed*/
        IVYREC.IVYERR = "Y"; /* mark as error*/
      else
        if (IVXREC.IVXOPTN == 8)
          COMMAREA.CATOAP = "IV0I";
          XSEXIT(); /* transfer to Addresses*/
          converseLib.validationFailed(15); /* transfer failed*/
          IVYREC.IVYERR = "Y"; /* mark as error*/
        else
          if (IVXREC.IVXOPTN == 9)
            COMMAREA.CATOAP = "IV0J";
            XSEXIT(); /* transfer to Msgs & Instr*/
            converseLib.validationFailed(15); /* transfer failed*/
            IVYREC.IVYERR = "Y"; /* mark as error*/
          end
        end
      end
    end
  end
  ;
  ;
end // end IV0ESEN

// Read Selected Invoices
Function IV0ESIS()
  ;
     /* ***   This statement group reads thru all invoices ****/
     /* *** selected, and displays one line for each.      ****/
     /* *** also sets up arrays to be used in controlling  ****/
     /* *** selections.                                    ****/
  ;
     /* do select set for invoices*/
     /* (uses IVYSUB and IVYSUB1 thru IV0ESP0)*/
   /* DATE   NAME    DESCRIPTION*/
   /* 06/17/93 LGROSS CHANGED MESSAGE NUMBER FROM 35 TO 66*/
  ;
  IV0ESSS();
  ;
     /* set select criteria to go thru retrieved records*/
  ;
  set IV0EW01 empty;
  set IVGREC empty;
  IV0EW01.IV0EWSSS = "SN";
  ;
     /* loop thru selected invoices and process*/
  ;
  IVYREC.IVYSUB = 1; /* screen index*/
  IVXREC.IVXIAIDX = 1; /* invoice array index*/
  IVXREC.IVXIASST = 1; /* set start position*/
  IVXREC.IVXIASDX = 1; /* set scroll begin pointer*/
  while (SQLCA.VAGen_SQLCODE == 0
   && IVXREC.IVXIAIDX < 501)
    IV0ESSN();
    if (SQLCA.VAGen_SQLCODE == 0)
      IV0ESQI(); /* qualify by product, save to array, and display*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        if (IVXREC.IVXIAIDX == 1) /* if no records found*/
          IV0ESCD(); /* be sure to close db*/
          IVXREC.IVXMSSNB = 66; /* send message to user*/
          COMMAREA.CAUSERA = IVXREC.IVXGROUP;
          COMMAREA.CAFROMAP = "IV0E";
          COMMAREA.CACURRAP = "IV0A";
          transfer to transaction "IV0A" passing COMMAREA;
        end
      end
    end
  end
  ;
  ;
  IVXREC.IVXLOC = "IV0ESIS"; /* move module name to location*/
  IVXREC.IVXWGQIX = 1; /* set temp stor index to 1*/
  XPIV001(); /* add to temp storage*/
  ;
     /* close database*/
  ;
  IV0ESCD();
  ;
     /* set remaining lines dark*/
  ;
  if (IVYREC.IVYSUB < 13) /* if screen not full*/
    IVYREC.IVYSVSUB = IVYREC.IVYSUB; /* save last screen entry*/
    IV0ESD1(); /* set lines to dark*/
  else
    IVYREC.IVYSVSUB = 13;
  end
  ;
     /* set array max bottom values*/
     /* SST and TMX are set to indicate whole array is to be used*/
     /* (if came in thru IV0D, would be using partial array)*/
  ;
  IVXREC.IVXIAMAX = IVXREC.IVXIAIDX - 1;
  IVXREC.IVXIATMX = IVXREC.IVXIAMAX; /* set temp max*/
  IVXREC.IVXIAIDX = IVYREC.IVYSVSUB; /* used for scroll fwd*/
  ;
     /* format invoice count message*/
  ;
  IV0ESMG();
  ;
  ;
end // end IV0ESIS

// Save off Selections to array
Function IV0ESL2()
  ;
     /* ***   This statement group checks for any selections ****/
     /* *** made by the user on the Sel List 2 screen, and   ****/
     /* *** records them in the invoice array.               ****/
  ;
  IVXREC.IVXLOC = " XIVSL2"; /* move module name to work field*/
  XPIV002(); /* read temp storage*/
  ;
     /* set indexes*/
  ;
  IVYREC.IVYSUB = 1;
  IVYREC.IVYSUB1 = IVXREC.IVXIASDX;
   /* ivysub2 used in iv0esal if called*/
  ;
     /* loop thru and record selections*/
  ;
  while (IVYREC.IVYSUB < 13)
    if (IV0EM002.IV0EMSEL[IVYSUB] == " " /* no entry, or elim entry*/
     || IV0EM002.IV0EMSEL[IVYSUB] == "S" /* line selected*/
     || IV0EM002.IV0EMSEL[IVYSUB] == "V") /* marked as viewed,*/
      if (IVYREC.IVYSUB1 > 200)
        IVYREC.IVYSUB = 13;
      else
        IVGREC.IVGIASFL[IVYSUB1] = IV0EM002.IV0EMSEL[IVYSUB];
        IVYREC.IVYSUB = IVYREC.IVYSUB + 1; /* set indexes for next*/
        IVYREC.IVYSUB1 = IVYREC.IVYSUB1 + 1;
      end
    else
      if (IV0EM002.IV0EMSEL[IVYSUB] == "A" /* all invoices selected*/
       && IVYREC.IVYSUB1 == 1)             /* valid only on first line*/
        IV0ESAL(); /* mark all entries as 's'*/
        IVYREC.IVYSUB = 13; /* end loop*/
      else
        converseLib.validationFailed(40); /* invalid selection*/
        IVYREC.IVYERR = "Y";
        set IV0EM002.IV0EMSEL[IVYSUB] cursor, bold;
        IVYREC.IVYSUB = IVYREC.IVYSUB + 1;
        IVYREC.IVYSUB1 = IVYREC.IVYSUB1 + 1;
      end
    end
  end
  ;
  if (IVXREC.IVXWGQIX > 0) /* ;if temp storage record exists*/
    XPIV004(); /* ;  update temp storage*/
  end
  ;
     /* if an error, reset unused select slots to dark, so that*/
     /* redisplay looks reasonable*/
  ;
  if (IVYREC.IVYERR == "Y")
    IV0ESD2(); /* blank unused lines*/
  end
  ;
  IVYREC.IVYSVSUB = 0; /* clear index - done with it*/
  ;
  ;
  ;
end // end IV0ESL2

// Map Initialization
Function IV0ESM2()
  ;
     /* ***   this statement group initializes Selection  ****/
     /* *** List 2 map                                    ****/
  ;
     /* initialize map*/
  ;
  converseLib.clearScreen();
  set IV0EM002 initial;
  ;
     /* set revision number*/
  ;
  IV0EM002.XXXRVNBR = "1";
  ;
  ;
  IV0EM002.XXXCURDT = VGVar.currentShortGregorianDate; /* move in current date*/
  IV0EM002.KUCCOID = IVXREC.IVXKUCCO; /* move in company*/
  if (IVXREC.IVXTYPFL == "C" /* want zero value displayed for cust*/
   || IVXREC.IVXTYPFL == "O") /* or order search only*/
    if (IVXREC.IVXKUMST != -1) /* if a store was entered*/
      IVYREC.IVYNUM4 = IVXREC.IVXKUMST; /* move in store*/
      IV0EM002.IV0EMSTR = IVYREC.IVYNUM4;
    end
  else
    if (IVXREC.IVXKUMST != 0
     && IVXREC.IVXKUMST != -1)
      IVYREC.IVYNUM4 = IVXREC.IVXKUMST; /* move in store*/
      IV0EM002.IV0EMSTR = IVYREC.IVYNUM4;
    end
  end
  IV0EM002.XNXCD = IVXREC.IVXXNXCD; /* move in dept*/
  IV0EM002.KUCCONM = IVXREC.KUCCONM; /* move in customer name*/
  IV0EM002.IV0EMCPO = IVXREC.IVXOP1CP; /* move in po number*/
  IV0ESOF(); /* format order #*/
  IV0EM002.IV0EMORH = IVYREC.IVYORDW; /* move in formatted order*/
  IV0EM002.SM1AGYID = IVXREC.IVXSM1AG; /* move in sales agency*/
  IV0EM002.SM4REPID = IVXREC.IVXSM4RP; /* move in sales rep*/
  IV0EM002.IV0JCPB = IVXREC.IV0JCPB; /* move in penneys batch*/
  IV0EM002.IVXIVCDL = IVXREC.IVXIVCDL; /* move in low date*/
  IV0EM002.IVXIVCDH = IVXREC.IVXIVCDH; /* move in high date*/
  ;
  ;
end // end IV0ESM2

// Display Invoice Count
Function IV0ESMG()
  ;
     /* ***   this statement group formats the display   ****/
     /* *** at screen bottom of number of invoices       ****/
     /* *** selected.  Uses xxxmsg.                      ****/
  ;
     /* figure count from tmx and sst (because may be using*/
     /* partial array).  sub3 used to for calculation only here*/
  ;
  IVYREC.IVYSUB3 = IVXREC.IVXIATMX - IVXREC.IVXIASST;
  IVYREC.IVYSUB3 = IVYREC.IVYSUB3 + 1; /* set up 1 for start*/
  ;
     /* format invoice count display*/
  ;
  IVYREC.IVYNUMB = IVYREC.IVYSUB3; /* move bin to num*/
  IVYREC.IVYNBR = IVYREC.IVYNUMB; /* move num to char*/
  IVYREC.IVYSUB3 = 1; /* now use sub3 as loop idx*/
  while (IVYREC.IVYSUB3 < 9) /* change leading 0s to space*/
    if (IVYREC.IVYNBR1[IVYSUB3] == "0") /* leading zero found*/
      IVYREC.IVYNBR1[IVYSUB3] = " "; /* change to space*/
      IVYREC.IVYSUB3 = IVYREC.IVYSUB3 + 1; /* continue loop*/
    else /* non-zero found*/
      IVYREC.IVYSUB3 = 9; /* end loop*/
    end
  end
  ;
  IVYREC.IVYMTXT = "INVOICE(S) SELECTED";
  ;
     /* display in xxxmsg on screen*/
  ;
  if (IV0EW02.IV0EWSCR == "1")
    IV0EM001.XXXMSG = IVYREC.IVYMSG;
  else
    IV0EM002.XXXMSG = IVYREC.IVYMSG;
  end
  ;
  ;
end // end IV0ESMG

// Map Initialization
Function IV0ESMI()
  ;
     /* ***   this statement group initializes Selection  ****/
     /* *** List 1 map                                    ****/
  ;
     /* initialize map*/
  ;
  converseLib.clearScreen();
  set IV0EM001 initial;
  ;
     /* set revision number*/
  ;
  IV0EM001.XXXRVNBR = "1";
  ;
  ;
  IV0EM001.XXXCURDT = VGVar.currentShortGregorianDate; /* move in current date*/
  IV0EM001.KUCCOID = IVXREC.IVXKUCCO; /* move in company*/
  if (IVXREC.IVXTYPFL == "C" /* want zero value displayed for cust*/
   || IVXREC.IVXTYPFL == "O") /* or order search only*/
    if (IVXREC.IVXKUMST != -1)
      IVYREC.IVYNUM4 = IVXREC.IVXKUMST; /* move in store*/
      IV0EM001.IV0EMSTR = IVYREC.IVYNUM4;
    end
  else
    if (IVXREC.IVXKUMST != 0
     && IVXREC.IVXKUMST != -1)
      IVYREC.IVYNUM4 = IVXREC.IVXKUMST;
      IV0EM001.IV0EMSTR = IVYREC.IVYNUM4;
    end
  end
  IV0EM001.XNXCD = IVXREC.IVXXNXCD; /* move in dept*/
  if (IVXREC.IVXKUCCO != 0) /* if a customer search*/
    IV0EM001.KUCCONM = IVXREC.KUCCONM; /* move in customer name*/
  end
  IV0EM001.OP1CUPO = IVXREC.IVXOP1CP; /* move in po number*/
  IV0ESOF(); /* format order number*/
  IV0EM001.IV0EMORH = IVYREC.IVYORDW; /* move in formatted order*/
  IV0EM001.SM1AGYID = IVXREC.IVXSM1AG; /* move in sales agency*/
  IV0EM001.SM4REPID = IVXREC.IVXSM4RP; /* move in sales rep*/
  IV0EM001.IV0JCPB = IVXREC.IV0JCPB; /* move in penneys batch*/
  IV0EM001.IVXIVCDL = IVXREC.IVXIVCDL; /* move in low date*/
  IV0EM001.IVXIVCDH = IVXREC.IVXIVCDH; /* move in high date*/
  ;
  ;
end // end IV0ESMI

// Select Next for LIne Items
Function IV0ESNI()
  ;
     /* ***   this statement group does the select next   ****/
     /* *** for line items.  Only one record is retrieved ****/
     /* *** for an invoice, because at this point are     ****/
     /* *** just checking that invoice qualifies for list.****/
  ;
     /* blank records*/
  ;
  set IV3REC empty;
  set SQLCA empty;
  ;
     /* call io mod with select next option*/
  ;
  call "IO1100" ("N2", SQLCA, IV3REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1PGMNM = "IV0E    ";
    TA1REC.TA1MAP = "IV0EM001";
    TA1REC.TA1DBASE = "DINVC   ";
    TA1REC.TA1TBLVU = "VIVITM01";
    TA1REC.TA1TBLKE = IV3REC.IV3KEY;
    TA1REC.TA1LOCAT[3] = "IV0ESNI"; /* 10-30-87*/
    TA1REC.TA1LOCAT[4] = "IO1100";
    XSIVS02();
  end
  ;
  ;
end // end IV0ESNI

// Check for Next Sub-order
Function IV0ESNO()
  ;
     /* ***   this statement group marks the order array   ****/
     /* *** entry just completed as viewed, and checks for ****/
     /* *** additional selections.  If another selection   ****/
     /* *** found, set up for restart of this app (IV0E).  ****/
  ;
  IVXREC.IVXLOC = "XIVSEN"; /* move module name to work field*/
  XPIV002(); /* read temp storage*/
  ;
  ;
     /* set indexes for selection check.*/
  ;
  IVYREC.IVYSUB = 1;
  IVYREC.IVYSUB1 = 1;
  ;
     /* set array indexes to 0 to be able to tell if sel found*/
  ;
  IVXREC.IVXIASDX = 0;
  IVXREC.IVXOAIDX = 0;
  ;
     /* loop thru checking for any selections.  If found*/
      /* pass to detail screen set-up*/
  ;
  while (IVYREC.IVYSUB <= IVXREC.IVXOAMAX) /* loop thru order array*/
    if (IVXREC.IVXOASFL[IVYSUB] == "S") /* selection found*/
      if (IVXREC.IVXOP1NO == IVXREC.IVXNORID[IVYSUB]) /* if order just viewed*/
        IVXREC.IVXOASFL[IVYSUB] = "V"; /* mark, and*/
        IVYREC.IVYSUB = IVYREC.IVYSUB + 1; /* continue loop*/
      else /* not order just viewed - look for invoice*/
        while (IVYREC.IVYSUB1 <= IVXREC.IVXIAMAX) /* loop thru invoice array*/
          if (IVXREC.IVXOAIVC[IVYSUB] == IVGREC.IVGIAIVC[IVYSUB1])
                                   /* if match*/
            if (IVGREC.IVGIASTR[IVYSUB1] == "B") /* mark if single invoice*/
              IVGREC.IVGIASTR[IVYSUB1] = "O";
            else /* mark as top of list*/
              IVGREC.IVGIASTR[IVYSUB1] = "T";
            end
            IVXREC.IVXIASDX = IVYREC.IVYSUB1;
                                   /* set invoice array idx*/
            IVYREC.IVYSUB1 = IVXREC.IVXIAMAX + 1; /* end invoice loop*/
          else /* invoice match not yet found*/
            IVYREC.IVYSUB1 = IVYREC.IVYSUB1 + 1; /* continue i loop*/
          end
        end /* have found start invoice for order now,so set keys*/
        IVXREC.IVXOP1NO = IVXREC.IVXNORID[IVYSUB];
        IVXREC.IVXOAIDX = IVYREC.IVYSUB;
        IVYREC.IVYSUB = IVXREC.IVXOAMAX + 1; /* end order loop*/
      end
    else
      IVYREC.IVYSUB = IVYREC.IVYSUB + 1; /* continue order loop*/
    end
  end
  ;
  if (IVXREC.IVXWGQIX > 0) /* ;if temp storage record exists*/
    XPIV004(); /* ;  update temp storage*/
  end
  ;
     /* if new selection found, set from ap to 'IV0D', so that*/
      /* will look right for app restart*/
  ;
  if (IVXREC.IVXIASDX != 0)
    COMMAREA.CAFROMAP = "IV0D";
    IVXREC.IVXIATMX = 0; /* don't get stuck with old value*/
  end
  ;
  ;
end // end IV0ESNO

// Order Number Formatter
Function IV0ESO2()
  ;
     /* ***   This statement group formats order numbers    ****/
     /* *** from the ivdrec - to be displayed in detail     ****/
     /* *** portions of screens                             ****/
  ;
     /* first, edit leading zeroes from order number*/
  ;
  IVYREC.IVYSUB4 = 1;
  ;
  IVYREC.IVYNUMB = IVDREC.OP1CUOID; /* bin to num*/
  IVYREC.IVYNBR = IVYREC.IVYNUMB; /* num to cha*/
  ;
  while (IVYREC.IVYSUB4 < 9) /* loop thru chars of number*/
    if (IVYREC.IVYNBR1[IVYSUB4] == "0") /* substituting leading zeros*/
      IVYREC.IVYNBR1[IVYSUB4] = " "; /* with spaces*/
      IVYREC.IVYSUB4 = IVYREC.IVYSUB4 + 1; /* continue loop*/
    else /* non-zero found*/
      IVYREC.IVYSUB4 = 9; /* end loop*/
    end
  end
  ;
  IVYREC.IVYCORD = IVYREC.IVYNBR; /* move in formatted cust ord*/
  ;
  IVYREC.IVYSEPO = "."; /* move in separator*/
  ;
  IVYREC.IVYNUM4 = IVDREC.OP1NORID; /* move in nike ord*/
  IVYREC.IVYCHA4 = IVYREC.IVYNUM4;
  IVYREC.IVYNORD = IVYREC.IVYCHA2;
  ;
  ;
end // end IV0ESO2

// Order Number Formatter
Function IV0ESOF()
  ;
     /* ***   This statement group formats the order number ****/
     /* *** for display on the header.                      ****/
  ;
     /* first, edit leading zeroes from order number*/
  ;
  IVYREC.IVYSUB4 = 1;
  ;
  IVYREC.IVYNUMB = IVXREC.IVXOP1CO; /* bin to num*/
  IVYREC.IVYNBR = IVYREC.IVYNUMB; /* num to cha*/
  ;
  while (IVYREC.IVYSUB4 < 10) /* loop thru chars of number*/
    if (IVYREC.IVYNBR1[IVYSUB4] == "0") /* substituting leading zeros*/
      IVYREC.IVYNBR1[IVYSUB4] = " "; /* with spaces*/
      IVYREC.IVYSUB4 = IVYREC.IVYSUB4 + 1; /* continue loop*/
    else /* non-zero found*/
      IVYREC.IVYSUB4 = 10; /* end loop*/
    end
  end
  ;
  IVYREC.IVYCORD = IVYREC.IVYNBR; /* move in formatted cust ord*/
  ;
  if (IVXREC.IVXOP1NO != 0)
    IVYREC.IVYSEPO = "."; /* move in separator*/
    IVYREC.IVYNUM4 = IVXREC.IVXOP1NO; /* move in nike ord*/
    IVYREC.IVYCHA4 = IVYREC.IVYNUM4;
    IVYREC.IVYNORD = IVYREC.IVYCHA2;
  else
    IVYREC.IVYSEPO = " ";
    IVYREC.IVYNORD = "  ";
  end
  ;
  ;
end // end IV0ESOF

// Program Initialization
Function IV0ESPI()
  ;
     /* ***   this statement group initializes work areas,  ****/
     /* *** and initializes the screen                      ****/
  ;
     /* blank work records, initialize ivxrec*/
  ;
  set IV0EW01 empty;
  set IV0EW02 empty;
  set IVYREC empty;
  IVXREC.IVXGROUP = COMMAREA.CAUSERA; /* setup up program storage*/
  ;
     /* if came in fastpath, send to menu*/
  ;
  if (COMMAREA.CAITEM != " "
   || IVXREC.IVXINIT != "IV0"
   || COMMAREA.CAFRMSYS != COMMAREA.CACURSYS) /* from other sys,10-28-87*/
    COMMAREA.CAITEM = " ";
    COMMAREA.CATOAP = "IV0A";
    IVXREC.IVXMSSNB = 18;
    IVXREC.IVXINIT = "IV0";
    COMMAREA.CAUSERA = IVXREC.IVXGROUP;
      /* leave fromap setting as is*/
    transfer to transaction "IV0A" passing COMMAREA; /* pass to main menu*/
  end
  ;
     /* initialize map*/
  ;
  IV0ESMI();
  ;
  ;
end // end IV0ESPI

// Build PO idx from PO
Function IV0ESPO()
  ;
     /* ***   This statement group figures out what the  ****/
     /* *** two rightmost characters of the entered po   ****/
     /* *** are, so that the poidx can be sent as part of****/
     /* *** the key to ivdrec.  Check for spaces starting****/
     /* *** from the left because set in db2 with an un- ****/
     /* *** string, which find first space.              ****/
  ;
     /* move po to work area, set index*/
  ;
  IV0EW02.OP1CUPO = IVXREC.IVXOP1CP;
  IVYREC.IVYSUB = 1;
  IVYREC.IVYSUB1 = 0;
  ;
     /* determine which is the rightmost character by looping*/
     /* forward thru po, stop when encounter a space*/
  ;
  while (IVYREC.IVYSUB < 26)
    if (IV0EW02.IV0EWCHR[IVYSUB] == " ") /* found first space*/
      IVYREC.IVYSUB1 = IVYREC.IVYSUB - 1; /* save last position*/
      IVYREC.IVYSUB = 26; /* end loop*/
    else
      IVYREC.IVYSUB = IVYREC.IVYSUB + 1; /* continue loop*/
    end
  end
  ;
     /* use ivysub1 to set poidx.  if value 1, use space as*/
     /* first char of poidx.*/
  ;
  IV0EW02.IV0EWX2 = IV0EW02.IV0EWCHR[IVYSUB1];
  IVYREC.IVYSUB1 = IVYREC.IVYSUB1 - 1;
  if (IVYREC.IVYSUB1 > 0)
    IV0EW02.IV0EWX1 = IV0EW02.IV0EWCHR[IVYSUB1];
  else
    IV0EW02.IV0EWX1 = " ";
  end
  ;
     /* move in to ivdrec field*/
  ;
  IVDREC.IV0POIDX = IV0EW02.IV0EWIDX;
  ;
  ;
end // end IV0ESPO

// Process Selected Invoices
Function IV0ESQI()
  ;
     /* ***   This statement group checks that invoices    ****/
     /* *** foundany entered style criteria, and if so     ****/
     /* *** places the invoice in an array to be carried   ****/
     /* *** for any scrolling.                             ****/
  ;
     /* if product selection entered, do select set for*/
     /* line items*/
   /* 08-02-93  lgross changed message to read selected first*/
   /* 500(67) rather that 200 invoices(36)*/
  ;
  if (IVXREC.SY1STNBR != " ")
    IV0ESSI(); /* select set of line items*/
    IV0ESNI(); /* select next to see if any found*/
    if (SQLCA.VAGen_SQLCODE == 100) /* none found*/
      call "IO1100" ("C2", SQLCA, IV3REC) {isNoRefresh = yes, isExternal = yes}; /* CLOSE BUT*/
      return; /* return without adding to array*/
    else /* at least one found*/
      call "IO1100" ("C2", SQLCA, IV3REC) {isNoRefresh = yes, isExternal = yes}; /* close & contin*/
    end
  end
  ;
     /* save qualified invoices to array*/
  ;
  IVGREC.IVGIAIVC[IVXIAIDX] = IVDREC.IV0IVCID; /* save to inv array*/
  ;
     /* if screen not yet full, display*/
  ;
  if (IVYREC.IVYSUB < 13) /* if screen not full*/
    IV0ESSC(); /* display on screen*/
    IVYREC.IVYSUB = IVYREC.IVYSUB + 1; /* set up screen idx*/
  end
  ;
     /* set up array index.  If over 499 invoices selected,*/
     /* display warning message to user*/
  ;
  IVXREC.IVXIAIDX = IVXREC.IVXIAIDX + 1; /* set up invoice array index*/
  if (IVXREC.IVXIAIDX > 499)
    converseLib.validationFailed(67);
  end
  ;
  ;
end // end IV0ESQI

// Set-up screen for display
Function IV0ESSC()
  ;
     /* ***   This statement group sets screen values for ****/
     /* *** a line on the selection list screen           ****/
  ;
   /* 04/01/93 lgross Will display store id rather than ship date*/
  ;
     /* if the first invoice for an order selection, get cust*/
     /* info and po nbr for header*/
  ;
  if (IVXREC.IVXIAIDX == IVXREC.IVXIASST)
    if (IVXREC.IVXTYPFL == "L"
     || IVXREC.IVXTYPFL == "O")
      IV0ESDC();
    end
  end
  ;
     /* now move in invoice data to screen*/
  ;
  IV0EM001.IV0IVCID[IVYSUB] = IVDREC.IV0IVCID;
  IV0ESO2(); /* format order number*/
  IV0EM001.IV0EMORD[IVYSUB] = IVYREC.IVYORDW;
  IV0EM001.XPTCD[IVYSUB] = IVDREC.XPTCD;
  IV0EM001.CU-STOR-ID[IVYSUB] = IVDREC.KUMSTRID; /* store id*/
  IV0EM001.IV0IVCDT[IVYSUB] = IVDREC.IV0IVCDT;
  IV0EM001.IVAIVAMT[IVYSUB] = IVDREC.IVAIVAMT;
  IV0EM001.XGPCD[IVYSUB] = IVDREC.XGPCD;
  ;
     /* look-up order type abbreviation*/
  ;
  if (IVDREC.XOBCD in XOBTBL.XOBCD)
    IV0EM001.XOBABRV[IVYSUB] = XOBTBL.XOBABRV[sysVar.arrayIndex];
  end
  if (sysVar.arrayIndex == 0) /* if not found on table*/
    IV0EM001.XOBABRV[IVYSUB] = IVDREC.XOBCD; /* display code*/
  end
  ;
     /* set select flag from array value*/
  ;
  IV0EM001.IV0EMSEL[IVYSUB] = IVGREC.IVGIASFL[IVXIAIDX];
  ;
  ;
end // end IV0ESSC

// Select Set of Line Items
Function IV0ESSI()
  ;
     /* ***   this statement group will set up keys for a   ****/
     /* *** select set to find any line itmes on this       ****/
     /* *** invoice with the selected style.  This part of  ****/
     /* *** the qualification has to be done separately, as ****/
     /* *** style info is not on the header.                ****/
  ;
     /* blank records*/
  ;
  set SQLCA empty;
  set IV3REC empty;
  ;
     /* set up keys.  Will always pass a style code.  Pass other*/
     /* values selected, or a 'wildcard' in other variables, so*/
     /* that search characteristics vary with entered data*/
  ;
     /* always pass style number*/
  ;
  IV3REC.IV0IVCID = IVDREC.IV0IVCID;
  IV3REC.IV0PARTN = IVDREC.IV0PARTN;
  IV3REC.SY1STNBR = IVXREC.SY1STNBR;
  IV3REC.OP2LNINB = -1;
  ;
  if (IVXREC.SY2CLRID != " ")
    IV3REC.SY2CLRID = IVXREC.SY2CLRID;
  else
    IV3REC.SY2CLRID = "***";
  end
  ;
  if (IVXREC.XDMCD != "  ")
    IV3REC.XDMCD = IVXREC.XDMCD;
  else
    IV3REC.XDMCD = "**";
  end
  ;
  if (IVXREC.XLCCD != "  ")
    IV3REC.XLCCD = IVXREC.XLCCD;
  else
    IV3REC.XLCCD = "**";
  end
  ;
  if (IVXREC.XQACD != "  ")
    IV3REC.XQACD = IVXREC.XQACD;
  else
    IV3REC.XQACD = "**";
  end
  ;
     /* call io mod IO1100 to start select*/
  ;
  call "IO1100" ("S2", SQLCA, IV3REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1PGMNM = "IV0E    ";
    TA1REC.TA1MAP = "IV0EM001";
    TA1REC.TA1DBASE = "DINVC   ";
    TA1REC.TA1TBLVU = "VIVITM01";
    TA1REC.TA1TBLKE = IV3REC.IV3KEY;
    TA1REC.TA1LOCAT[3] = "IV0ESSI"; /* 10-30-87*/
    TA1REC.TA1LOCAT[4] = "IO1100";
    XSIVS02();
  end
  ;
  ;
end // end IV0ESSI

// Select Next for invoices
Function IV0ESSN()
  ;
     /* ***   this statement group does the select next ****/
     /* *** for invoices                                ****/
  ;
     /* blank records*/
  ;
  set IVDREC empty;
  set SQLCA empty;
  ;
     /* call io mod with select next option*/
  ;
  call "IO1150" (IV0EW01, SQLCA, IVDREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1PGMNM = "IV0E    ";
    TA1REC.TA1MAP = "IV0EM001";
    TA1REC.TA1DBASE = "DINVC   ";
    TA1REC.TA1TBLVU = "VIVHDR03";
    TA1REC.TA1TBLKE = IVDREC.IVDKEY;
    TA1REC.TA1LOCAT[3] = "IV0ESSN"; /* 10-30-87*/
    TA1REC.TA1LOCAT[4] = "IO1150";
    XSIVS02();
  end
  ;
  ;
end // end IV0ESSN

// Select Set of Invoices
Function IV0ESSS()
  ;
     /* ***   this statement group will set up keys for a   ****/
     /* *** select set to find sub-orders for a given order ****/
  ;
     /* blank records*/
  ;
  set SQLCA empty;
  set IVDREC empty;
  ;
     /* set select set option, and sort option*/
  ;
  IV0EW01.IV0EWSSS = "SS";
  IV0EW01.IV0EWSIN[1] = 2; /* sort on invoice id*/
  IV0EW01.IV0EWSAD[1] = "A";
  ;
     /* set up keys.  For Dynamic select, all values must be set*/
     /* to 'wildcard' type values if no specific value is to be*/
     /* checked for*/
  ;
  ;
  if (IVXREC.IVXOP1CO != 0)
    IVDREC.OP1CUOID = IVXREC.IVXOP1CO;
    IVYREC.IVYORDN = IVXREC.IVXOP1CO; /* split for part char*/
    IVDREC.OP1PARTN = IVYREC.OP1PARTN;
  else
    IVDREC.OP1CUOID = -1;
    IVDREC.OP1PARTN = "*";
  end
  ;
  if (IVXREC.IVXOP1NO != 0)
    IVDREC.OP1NORID = IVXREC.IVXOP1NO;
  else
    IVDREC.OP1NORID = -1;
  end
  ;
  if (IVXREC.IVXKUCCO != 0)
    IVDREC.KUCCOID = IVXREC.IVXKUCCO;
  else
    IVDREC.KUCCOID = -1;
  end
  ;
     /* store already set to -1 if no value (zero is a*/
     /* valid value) for customer searches. Others don't use*/
  ;
  if (IVXREC.IVXTYPFL == "C")
    IVDREC.KUMSTRID = IVXREC.IVXKUMST;
  else
    IVDREC.KUMSTRID = -1;
  end
  ;
  if (IVXREC.IVXXNXCD != 0)
    IVDREC.XNXCD = IVXREC.IVXXNXCD;
  else
    IVDREC.XNXCD = -1;
  end
  ;
  if (IVXREC.IVXXGPCD != "  ")
    IVDREC.XGPCD = IVXREC.IVXXGPCD;
  else
    IVDREC.XGPCD = "**";
  end
  ;
  if (IVXREC.IVXSM1AG != " ")
    IVDREC.SM1AGYID = IVXREC.IVXSM1AG;
  else
    IVDREC.SM1AGYID = "****";
  end
  ;
  if (IVXREC.IVXSM4RP != 0)
    IVDREC.SM4REPID = IVXREC.IVXSM4RP;
  else
    IVDREC.SM4REPID = -1;
  end
  ;
  if (IVXREC.IV0JCPB != 0)
    IVDREC.IV0JCPB = IVXREC.IV0JCPB;
  else
    IVDREC.IV0JCPB = -1;
  end
  ;
     /* 2 order types may have been selected:pass 2nd in iv0ew01*/
  ;
  if (IVXREC.XOBCD1 != "  ")
    IVDREC.XOBCD = IVXREC.XOBCD1;
  else
    IVDREC.XOBCD = "**";
  end
  if (IVXREC.XOBCD2 != "  ") /* if a second order type specified*/
    IV0EW01.XOBCD = IVXREC.XOBCD2; /* pass in io area*/
  else /* no second value*/
    IV0EW01.XOBCD = "**"; /* pass as a wildcard*/
  end
  ;
  ;
  ;
  ;
  if (IVXREC.XDVCD != "  ")
                                   /* if division code entered*/
    IVDREC.XDVCD = IVXREC.XDVCD; /* move to i/o record*/
  else /* else*/
    IVDREC.XDVCD = "**"; /* pass as wildcard*/
  end
  ;
  if (IVXREC.IVXOP1CP != " ")
    IVDREC.OP1CUPO = IVXREC.IVXOP1CP;
    IV0ESPO(); /* split off rightmost two chars for poidx*/
  else
    IVDREC.OP1CUPO = "*";
    IVDREC.IV0POIDX = "**";
  end
  ;
  if (IVXREC.XWHCD != "  ")
    IVDREC.XWHCD = IVXREC.XWHCD;
  else
    IVDREC.XWHCD = "**";
  end
  ;
  if (IVXREC.IVXSP1ID != "    ")
    IVDREC.SP1ID = IVXREC.IVXSP1ID;
  else
    IVDREC.SP1ID = "****";
  end
  ;
  if (IVXREC.IVXXOCCD != "  ")
    IVDREC.XOCCD = IVXREC.IVXXOCCD;
  else
    IVDREC.XOCCD = "**";
  end
  ;
  if (IVXREC.IVXXSOCD != "  ")
    IVDREC.XSOCD = IVXREC.IVXXSOCD;
  else
    IVDREC.XSOCD = "**";
  end
  ;
     /* one date, or a range of dates may have been selected*/
     /* if one, pass same date in both.  If not selected, pass*/
     /* both as -1*/
  ;
  if (IVXREC.IVXIVCDL != 0)
    IVDREC.IV0IVCDT = IVXREC.IVXIVCDL;
  else
    IVDREC.IV0IVCDT = -1;
  end
  if (IVXREC.IVXIVCDH != 0) /* if a high invoice date entered*/
    IV0EW01.IV0IVCDT = IVXREC.IVXIVCDH; /* move in high for range*/
  else /* if none specified*/
    IV0EW01.IV0IVCDT = IVDREC.IV0IVCDT; /* want same value as ivdrec*/
  end
  ;
     /* see date comment for invoice date above*/
  ;
  if (IVXREC.OP1CUNDT != 0)
    IVDREC.OP1CUNDT = IVXREC.OP1CUNDT;
  else
    IVDREC.OP1CUNDT = -1;
  end
  if (IVXREC.IVXCUNDT != 0) /* if a high need date entered*/
    IV0EW01.OP1CUNDT = IVXREC.IVXCUNDT; /* move in high for range*/
  else /* if none specified*/
    IV0EW01.OP1CUNDT = IVDREC.OP1CUNDT; /* want same value as ivdrec*/
  end
  ;
     /* one amount, or a range of amounts may have been selected*/
     /* pass same date in both if one amount.  If amount not*/
     /* selected, pass -1 in both.*/
  ;
  if (IVXREC.IVAIVAMT != 0)
    IVDREC.IVAIVAMT = IVXREC.IVAIVAMT;
  else
    IVDREC.IVAIVAMT = -1;
  end
  if (IVXREC.IVXIVAMT != 0) /* if a high amount entered*/
    IV0EW01.IVAIVAMT = IVXREC.IVXIVAMT; /* move in high for range*/
  else /* if none specified,*/
    IV0EW01.IVAIVAMT = IVDREC.IVAIVAMT; /* want same value as ivdrec*/
  end
  ;
  if (IVXREC.KU0JCPSD != "   ")
    IVDREC.KU0JCPSD = IVXREC.KU0JCPSD;
  else
    IVDREC.KU0JCPSD = "***";
  end
  ;
     /* call io mod with select option list - for all*/
     /* invoices with specified criteria*/
  ;
  call "IO1150" (IV0EW01, SQLCA, IVDREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1PGMNM = "IV0E    ";
    TA1REC.TA1MAP = "IV0EM001";
    TA1REC.TA1DBASE = "DINVC   ";
    TA1REC.TA1TBLVU = "VIVHDR03";
    TA1REC.TA1TBLKE = IVDREC.IVDKEY;
    TA1REC.TA1LOCAT[3] = "IV0ESSS";
    TA1REC.TA1LOCAT[4] = "IO1150";
    XSIVS02();
  end
  ;
  ;
end // end IV0ESSS

// Select Unique Invoices
Function IV0ESSU()
  ;
     /* ***   this statement group does the select for      ****/
     /* *** invoices from the invoice array.  If any return ****/
     /* *** other than 0 from read, pass to error screen,   ****/
     /* *** because if in invoice array, it should be on db.****/
  ;
     /* blank records*/
  ;
   /* SET IVDREC EMPTY;don't empty as key values set before call*/
  set SQLCA empty;
  ;
     /* set select criteria to do select unique for invoice*/
  ;
  set IV0EW01 empty;
  IV0EW01.IV0EWSSS = "S ";
  ;
     /* call io mod with select unique option*/
  ;
  call "IO1150" (IV0EW01, SQLCA, IVDREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1PGMNM = "IV0E    ";
    TA1REC.TA1MAP = "IV0EM001";
    TA1REC.TA1DBASE = "DINVC   ";
    TA1REC.TA1TBLVU = "VIVHDR03";
    TA1REC.TA1TBLKE = IVDREC.IVDKEY;
    TA1REC.TA1LOCAT[3] = "IV0ESSU";
    TA1REC.TA1LOCAT[4] = "IO1150";
    XSIVS02();
  end
  ;
  ;
end // end IV0ESSU

//*** RECORD=IV0EW01 ****
// Working storage used exclusively by the IV0D application.
// This area wil go away when the program is exited.  Used
// mainly to hold the selection information for the dynamic
// select for IO1150.
// 
// maintenance history
// 
// Date      Person  Change# Comments
// 03-20-89  FJELLI  iv89012 Change xotcd to xobcd
// ***********************
Record IV0EW01 type basicRecord
  5 IV0EWGRP IV0EWGRP ; 
    10 IV0EWSGP IV0EWSGP ; 
      15 IV0EWSSS IV0EWSSS ; 
      15 IV0EWSAY IV0EWSAY [10] ; 
        20 IV0EWSIN IV0EWSIN ; 
        20 IV0EWSAD IV0EWSAD ; 
      15 XOBCD XOBCD ; 
      15 IV0IVCDT IV0IVCDT ; 
      15 OP1CUNDT OP1CUNDT ; 
      15 IVAIVAMT IVAIVAMT ; 
end // end IV0EW01

//*** RECORD=IV0EW02 ****
// invoice inq common work field working storage.  these are
// common work areas used by most of the invoice inq programs.
// these fields are not kept globally as the ivx  record is,
// and will go away when the program is exited.
// ***********************
Record IV0EW02 type basicRecord
  5 IV0EWGP2 IV0EWGP2 ; 
    10 OP1CUPO OP1CUPO ; 
      15 IV0EWCHR IV0EWCHR [25] ; 
    10 IV0EWIDX IV0EWIDX ; 
      15 IV0EWX1 IV0EWX1 ; 
      15 IV0EWX2 IV0EWX2 ; 
    10 IV0EWSCR IV0EWSCR ; 
end // end IV0EW02

// one char of po
DataItem IV0EWCHR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// iv0e work area
DataItem IV0EWGP2 char(28)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// iv0e internal work area
DataItem IV0EWGRP char(68)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po idx work field
DataItem IV0EWIDX char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sort asc or desc
DataItem IV0EWSAD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// array for sort
DataItem IV0EWSAY char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen 1 or 2 ind
DataItem IV0EWSCR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select set option list
DataItem IV0EWSGP char(68)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sort item number
DataItem IV0EWSIN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sql option - select set
DataItem IV0EWSSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// idx char 1
DataItem IV0EWX1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// idx char 2
DataItem IV0EWX2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

