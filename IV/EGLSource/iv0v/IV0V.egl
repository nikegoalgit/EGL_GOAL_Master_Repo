package iv0v;

import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSIVS02;
import corpcom4.XSIVSFH;
import corpcom4.XSIVSFP;
import corpcom5.COMMAREA;
import corpcom5.CU-DEPT-SELF-ID;
import corpcom5.CU-STOR-SELF-ID;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XDM-DIM-CD;
import corpx1.XSOTBL;
import corpx1.XUMTBL;
import corpy2.YNTTBL;
import iv.common.*;
import ku.common.KUCREC;
import ku.common.KUJREC;
import ku.common.KUMREC;
import pk.common.PK-ACTL-CRTN-WT;
import pk.common.PK-PICK-TYP-CD;
import sr.common.SR-SHP-QTY;
import sy.common.SY-COLR-CD-ID;
import sy.common.SY-STY-NBR;
import sy.common.SY-SZ-ID;
import sy.common.SY-SZ-SCL-CD;
import sy.common.SY1REC;
import sy.common.SY4REC;
import sy.common.SYGREC;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
import tf.common.TF-PRO-NBR;
import vv.common.VIVCTN02;
//*** PROGRAM=IV0V ****
// This application will access DINVC.vivctn01 and present it
// by carton on the screen.
// 09/15/93  lgross corrected iv0v-load-screen to not look at
//                  hold-size desc
// ASN????   kviswa replaced all occurrences of vivctn01 with
//     12/04/97     vivctn02.
//                  will access DINVC.VIVctn02 instead of
//                  vivctn01.
//                  will call view VIVctn02 instead of
//                  io6620.
//                  added Packing list nbr on IV0VM001
//                  changed IV0VW01, IV0VW02, IV0VW03 AND
//                  IV0VW05 ACCORDINGLY
// *********************
Program IV0V type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "IV00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IV0REC IV0REC; // record
  IV0VW01 IV0VW01; // record
  IV0VW02 IV0VW02; // record
  IV0VW03 IV0VW03; // record
  IV0VW05 IV0VW05; // record
  IV3REC IV3REC; // record
  IV4REC IV4REC; // record
  IVAREC IVAREC; // record
  IVXREC IVXREC; // record
  IVYREC IVYREC; // record
  KUCREC KUCREC; // record
  KUJREC KUJREC; // record
  KUMREC KUMREC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SY4REC SY4REC; // record
  SYGREC SYGREC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VIVCTN02 VIVCTN02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XSOTBL; // table
  use YNTTBL; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use IV0VM.IV0VM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    IV0V-1000-START: IV0V-1000-START();
    IV0V-2000-CONV-MAP: IV0V-2000-CONV-MAP();
    if (IVYREC.IVYERR == "Y")
      IVYREC.IVYERR = "N";
      goto IV0V-2000-CONV-MAP;
    else
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf8
       || converseVar.eventKey is enter)
        goto IV0V-2000-CONV-MAP;
      end
    end
  end // end main
end // end IV0V

// Program Initialization
Function IV0V-1000-START()


     /* **********************************************************/
     /* * this process performs the following functions:        **/
     /* *     - checks entry security                           **/
     /* *     - moves the working storage and invoicing work    **/
     /* *       record from the incoming common area            **/
     /* *     - initializes the map and working fields          **/
     /* *       -- reads invoice header index and company       **/
     /* *          record if came in fastpath                   **/
     /* *       -- reads header                                 **/
      /* *       -- reads dept and store*/
     /* **********************************************************/



  XSENTRY(); /* system security check*/

  IV0VSINITIALIZE(); /* initialize program*/

  IV0VSINIT-MAP(); /* initial map and set up header*/

  IV0VM001.XXXRVNBR = "1"; /* set map revision number*/

  IV0VSREAD-VIVCTN02(); /* read DINVC.vivctn02*/
end // end IV0V-1000-START

// Converse Carton List
Function IV0V-2000-CONV-MAP()

     /* ***   This process presents the carton information  ****/
     /* *** to the user.                                    ****/

  converse IV0VM001 ;


     /* pass immediately if user has selected fastpath*/

  if (IV0VM001.CATOAP != " " /* if fastpath entered*/
   || IV0VM001.CAITEM != " ") /**/
    COMMAREA.CATOAP = IV0VM001.CATOAP; /* set up commarea*/
    COMMAREA.CAITEM = IV0VM001.CAITEM;
    IV0VSCHECK-EXIT(); /* check if xfer outside 'iv'*/
    if (converseVar.validationMsgNum == 0) /* if no errors*/
      if (IVXREC.IVXIAIDX != 0) /* if temp storage record exists*/
        IV0VSPURGE-TEMP(); /* purge temp storage*/
        IVXREC.IVXIAIDX = 0; /* initialize index*/
      end
      XSEXIT(); /* attempt to pass*/
      IV0VM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* if got here, pass was*/
      set IV0VM001.CATOAP cursor, bold; /* unsuccessful - let user know*/
      set IV0VM001 alarm;
      converseLib.validationFailed(18);
    else
      set IV0VM001.CAITEM cursor, bold;
    end
    IVYREC.IVYERR = "Y";
    exit stack;
  end

     /* reset screen from any previous errors*/

  set IV0VM001.CATOAP normal;
  set IV0VM001.CAITEM initialAttributes;

     /* record any selections made by the user*/

     /* pass to appropriate screen based on user entry*/

  if (converseVar.eventKey is enter)
    IV0VSENTER();
  else
    if (converseVar.eventKey is pf1)
      IV0VSPF1();
    else
      if (converseVar.eventKey is pf3)
        IV0VSPF3();
      else
        if (converseVar.eventKey is pf4)
          IV0VSPF4();
        else
          if (converseVar.eventKey is pf13)
            IV0VSPF13();
          else
            if (converseVar.eventKey is pf14)
              IV0VSPF14();
            else
              if (converseVar.eventKey is pf15)
                IV0VSPF15();
              else
                if (converseVar.eventKey is pf16)
                  IV0VSPF16();
                else
                  if (converseVar.eventKey is pf20)
                    IV0VSPF20();
                  else
                    if (converseVar.eventKey is pf21)
                      IV0VSPF21();
                    else
                      if (converseVar.eventKey is pf7) /* if pf7 entered*/
                        if (IV0VW01.IV0VW-IV-ARRAY-CNT < 16) /* if current map is at page 1*/
                          converseLib.validationFailed(4); /* error*/
                          IVYREC.IVYERR = "Y";
                        else /* else*/
                          IVXREC.IVXWFIXC = IVXREC.IVXWFIXC - 1; /* decrement page*/
                          if (IV0VW01.IV0VW-IV-ARRAY-CNT == IVXREC.IVXIAIDX)
                                                           /* at last entry*/
                            IV0VW01.IV0VW-IV-CALC-AMT = IV0VW01.IV0VW-IVY-SUB-HOLD + 14;
                            IV0VW01.IV0VW-IV-ARRAY-CNT = IV0VW01.IV0VW-IV-ARRAY-CNT -                                      IV0VW01.IV0VW-IV-CALC-AMT;
                          else
                            IV0VW01.IV0VW-IV-ARRAY-CNT = IV0VW01.IV0VW-IV-ARRAY-CNT -                             29;
                                                      /* decement array*/
                          end
                          IVXREC.IVXWFIXC = IVXREC.IVXWFIXC - 1; /* decrement page*/
                          IV0VSDISP-SCREEN(); /* display page*/
                        end
                      else
                        if (converseVar.eventKey is pf8)
                          if (IV0VW01.IV0VW-IV-ARRAY-CNT >= IVXREC.IVXIAIDX)
                                                           /* at last entry*/
                            converseLib.validationFailed(5); /* error*/
                            IVYREC.IVYERR = "Y";
                          else /* else*/
                            IVXREC.IVXWFIXC = IVXREC.IVXWFIXC + 1; /* increment page*/
                            IV0VW01.IV0VW-IV-ARRAY-CNT = IV0VW01.IV0VW-IV-ARRAY-CNT + 1;
                                                                         /*  */
                                                    /* increment array*/
                            IV0VSDISP-SCREEN(); /* display page*/
                          end
                        else
                          converseLib.validationFailed(3);
                          IVYREC.IVYERR = "Y";
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end



end // end IV0V-2000-CONV-MAP

// blank out rest of screen
Function IV0VSBLANK-REST()
   /* *****************************************************************/
   /* this statement group will blank out the rest of the lines when**/
   /* we are at the last page of the array                          **/
   /* *****************************************************************/
  while (IVYREC.IVYSUB < 15) /* while page is not completely filled*/
    IVYREC.IVYSUB = IVYREC.IVYSUB + 1;
    IV0VSMOVE-BLANKS(); /* blank out all fields*/
  end
end // end IV0VSBLANK-REST

// Calculate carton weight
Function IV0VSCALC-CRTN-WT()
   /* *********************************************************************/
   /* this procedure will get the carton weight from the corporate table**/
   /* DCORP.VYNT0001.                                                   **/
   /* *********************************************************************/
  if (VIVCTN02.YNT-CRTN-TYP-CD in YNTTBL.YNTCD)
    IV0VW02.YNT-CRTN-WT = YNTCRWT[sysVar.arrayIndex];
  end
end // end IV0VSCALC-CRTN-WT

// Calculate units weight
Function IV0VSCALC-UNIT-WT()
   /* *****************************************************************/
   /* This statement group will calculate estimated weight of units **/
   /* per size.                                                     **/
   /* *****************************************************************/
  IV0VW02.SY-SZ-WT = IV0VW02.SR-SHP-QTY * IV0VW01.SY-SZ-WT;
end // end IV0VSCALC-UNIT-WT

// check if xfer outside of 'IV'
Function IV0VSCHECK-EXIT()
   /* *************************************************************/
   /* *****    validate option/item pair                     ******/
   /* *************************************************************/

  if (COMMAREA.CATOAP == " ") /* item requires option*/
    if (COMMAREA.CAITEM != " ")
      converseLib.validationFailed(45); /* item data invalid*/
    end
  end


   /* *************************************************************/
   /* *****    Check if transfer outside of "IV" system.     ******/
   /* *****    If so..... purge ts record if neccessary      ******/
   /* *****               move spaces to causera.            ******/
   /* *****    If not.... must have item field.              ******/
   /* *************************************************************/

  if (COMMAREA.CATOSYS != COMMAREA.CACURSYS)
    if (IVXREC.IVXIAIDX != 0) /* if temp storage record exists*/
      IV0VSPURGE-TEMP(); /* purge temp storage*/
      IVXREC.IVXIAIDX = 0; /* initialize index*/
    end
    COMMAREA.CAUSERA = " ";
  else
    COMMAREA.CAUSERA = IVXREC.IVXGROUP; /* pass data*/
    if (COMMAREA.CAITEM == " ") /* no item entered*/
      if (COMMAREA.CATOAP == "IV0D")
        if (IVXREC.IVXOP1CO != 0) /* use exising order, if any*/
          IVYREC.IVYNUMB = IVXREC.IVXOP1CO;
          COMMAREA.CAITEM = IVYREC.IVYNUMB;
        else
          converseLib.validationFailed(51);
                                   /* ord reqd for xfer in ivc inq*/
        end
      else
        if (COMMAREA.CATOAP == "IV0E") /* ivc list not allowed*/
          converseLib.validationFailed(52); /* 11-12-87 can't fastpath to iv0e,go to iv0a*/
        else
          if (COMMAREA.CATOAP == "IV0A" /* menu o.k.*/
           || COMMAREA.CATOAP == "IV0M" /* system menu o.k.*/
           || COMMAREA.CATOAP == "IV0S") /* sales rep override o.k.*/
            /* next sentence*/
          else
            if (IVXREC.IV0IVCID != 0) /* use exising ivc, if any*/
              IVYREC.IVYNUMB = IVXREC.IV0IVCID;
              COMMAREA.CAITEM = IVYREC.IVYNUMB;
            else
              converseLib.validationFailed(49);
                                   /*  */
            end
          end
        end
      end
    end
  end


end // end IV0VSCHECK-EXIT

Function IV0VSDISP-SCREEN()

     /* ***   This statement group reads thru the carton   ****/
     /* *** array, and displays one line for each array    ****/
     /* *** entry.*/

  IVYREC.IVYSUB = 0; /* set screen index to 0*/
  IV0VW01.IV0VW-LAST-CRTN = "N"; /* set entry flag to no*/
  while (IVYREC.IVYSUB < 15)
    if (IV0VW01.IV0VW-LAST-CRTN == "Y") /* no more items*/
      IV0VSBLANK-REST(); /* blank out remaining lines*/
      IVYREC.IVYSUB = 15; /* exit loop*/
    else /* otherwise load screen*/
      if (IVYREC.IVYSUB != 0) /* first entry is set*/
        IV0VW01.IV0VW-IV-ARRAY-CNT = IV0VW01.IV0VW-IV-ARRAY-CNT + 1;
      end
      IV0VSREAD-TEMP();
      IV0VSLOAD-SCREEN(); /**/
      IV0VW01.IV0VW-IVY-SUB-HOLD = IVYREC.IVYSUB; /* save for paging*/
      if (IV0VW01.IV0VW-IV-ARRAY-CNT == IVXREC.IVXIAIDX) /* no more items*/
        IV0VW01.IV0VW-LAST-CRTN = "Y"; /* mark end*/
      end
    end
  end




end // end IV0VSDISP-SCREEN

// Enter is pressed
Function IV0VSENTER()
   /* ******************************************************************/
   /* If enter is pressed, application will return to previous screen**/
   /* ******************************************************************/
   /* move for next application*/
  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  COMMAREA.CATOAP = COMMAREA.CAFROMAP;
  XSEXIT(); /* transer to other application*/
  converseLib.validationFailed(15); /* transfer failed*/
  IVYREC.IVYERR = "Y"; /* mark as error*/
end // end IV0VSENTER

// Get unit weights
Function IV0VSGET-UNIT-WT()
   /* *******************************************************************/
   /* Read DPROD.VSIZWT01 or DPROD.VSTYLE01 to get unit weight.       **/
   /* *******************************************************************/
  set SYGREC empty;
  set SQLCA empty;
   /* set up key*/
  SYGREC.XGPCD = IVXREC.XGPCD;
  SYGREC.SY1STNBR = IV3REC.SY1STNBR;
  SYGREC.SY2CLRID = " "; /* field is not populated on DPROD.VSIZWT01*/
  SYGREC.XDMCD = IV3REC.XDMCD;
  SYGREC.XWHCD = " "; /* field is not populated on DPROD.VSIZWT01*/
   /* SET up size array to read sygrec*/
  IVYREC.IVYSUB2 = IV0VW01.SY-SZ-ID;

  call "IO1690" ("S ", SQLCA, SYGREC) {isNoRefresh = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* if found use this weight*/
    IV0VW01.SY-SZ-WT = SYGREC.SYGSZWT[IVYSUB2];
  else
    set SQLCA empty;
    set SY1REC empty;
    SY1REC.SY1STNBR = IV3REC.SY1STNBR; /* set up key*/
    SY1REC.XGPCD = IVXREC.XGPCD;
    call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes};
    if (SQLCA.VAGen_SQLCODE == 0) /* if found, use this weight*/
      IV0VW01.SY-SZ-WT = SY1REC.SY1AVEWT;
    else
      TA1REC.TA1PGMNM = "IV0V    ";
      TA1REC.TA1MAP = "IV0VM001";
      TA1REC.TA1DBASE = "DPROD   ";
      TA1REC.TA1TBLVU = "VSTYLE01";
      TA1REC.TA1TBLKE = SY1REC.SY1KEY;
      TA1REC.TA1LOCAT[3] = "IV0V-GET-UNIT-WT";
      TA1REC.TA1LOCAT[4] = "IO0120";
      XSIVS02();
    end
  end


end // end IV0VSGET-UNIT-WT

// map Initialization
Function IV0VSINIT-MAP()

     /* ***   this statement group initializes the map   ****/
     /* *** in the application and sets up header info   ****/

     /* initialize maps*/

  converseLib.clearScreen();
  set IV0VM001 initial;

  IVXREC.IVXWFIXC = 1; /* set page to 1*/
  IV0VM001.XXXCURDT = VGVar.currentShortGregorianDate; /* move in current date*/
  IV0VM001.IV-IVC-ID = IVXREC.IV0IVCID; /* move in invoice number*/
  IV0VM001.CU-CO-ID = IVXREC.KUCCOID; /* move in company*/
  IV0VM001.CU-STOR-ID = IVXREC.KUMSTRID; /* move in store*/
  IV0VM001.OP-CUST-ORD-ID = IVXREC.OP1CUOID; /* order #*/
  IV0VM001.OP-NIKE-ORD-ID = IVXREC.OP1NORID; /* nike order id*/
  IV0VM001.XNX-DEPT-ID-XREF = IVXREC.XNXCD; /* move in dept*/
  IV0VM001.OP-CUST-PO = IVXREC.OP1CUPO; /* move in po number*/
  IV0VM001.TF-PRO-NBR = IV0VW01.TF-PRO-NBR;
                                                      /* move in pro number*/
  IV0VM001.CU-STOR-SELF-ID = IV0VW01.CU-STOR-SELF-ID; /* store self id*/
  IV0VM001.CU-DEPT-SELF-ID = IV0VW01.CU-DEPT-SELF-ID; /* dept self id*/
  IV0VM001.PK-NBR-OF-CARTONS = IVAREC.PK1NBCTN; /* number of cartons*/
  IV0VM001.SR-TOT-NBR-CARTONS = IVAREC.SR2TNBCT; /* total cartons*/



end // end IV0VSINIT-MAP

// Program Initialization
Function IV0VSINITIALIZE()

     /* ***   this statement group initializes work areas,  ****/
     /* *** retrieves header info, and initializes screen   ****/
     /* *** for iv0v.                                       ****/

     /* blank work records, set screen flag*/

  set IV0VW01 empty;
  set IV0VW02 empty;
  set IV0VW03 empty;
  set IV0VW05 empty;

     /* determine if came in fastpath*/

  if (COMMAREA.CAITEM != " " /* fastpath entry*/
   || COMMAREA.CAFRMSYS != COMMAREA.CACURSYS) /* from other sys*/
    IVYREC.IVYMTXT = "IV0V-INITIALIZE"; /* error message*/
    XSIVSFP(); /* find header index and company*/
    IVYREC.IVYMTXT = " ";
    if (IVXREC.IVXMSSNB != 0) /* if had error on invoice lookup*/
      COMMAREA.CAUSERA = IVXREC.IVXGROUP;
      COMMAREA.CATOAP = "IV0A";
      XSEXIT(); /* pass to menu screen*/
    end
    COMMAREA.CAITEM = " "; /* reset caitem to space*/
  else /* not fastpath*/
    IVXREC.IVXGROUP = COMMAREA.CAUSERA; /* setup up program storage*/
    if (IVXREC.IVXINIT != "IV0") /* if ivxrec not inited*/
      set IVXREC empty;
      IVXREC.IVXMSSNB = 18; /* must have been fast path w/o item*/
      IVXREC.IVXINIT = "IV0"; /* set so that iv0a will look for*/
                                   /* message*/
      COMMAREA.CAUSERA = IVXREC.IVXGROUP; /* return to iv0a*/
      COMMAREA.CATOAP = "IV0A";
      XSEXIT();
    end
  end

     /* if came here direct from menu, will still need to*/
     /* retrieve header index and company.  use kuccoid as check*/

  if (IVXREC.KUCCOID <= 0)
    IVYREC.IVYMTXT = "IV0NSPI"; /* in case of error*/
    XSIVSFH(); /* routine to do lookups*/
    IVYREC.IVYMTXT = " "; /* in case of error*/
     /*  */
    if (IVXREC.IVXMSSNB != 0) /* if error on invoice lookup*/
      COMMAREA.CAUSERA = IVXREC.IVXGROUP;
      COMMAREA.CATOAP = "IV0A";
      XSEXIT(); /* pass to menu screen*/
    end
     /* above added 1-22-88*/
  end
     /* find header for display fields*/

  IV0VSPURGE-TEMP(); /* do now in case there is anything left over*/
  IV0VSREAD-HEADER();
  IV0VSREAD-STORE();
  IV0VSREAD-DEPT();

  IV0VSINIT-MAP();


end // end IV0VSINITIALIZE

// Load data to temp storage
Function IV0VSLOAD-ARRAY()
   /* This statement group will load data to temporary storage to be*/
   /* retrieved when user scrolls forward or backward.*/
   /* set records empty*/
  set IV0VW05 empty;
  set TA5REC empty;

  IV0VW05.IV0VW05-GRP = IV0VW02.IV0VW02-GRP;
  IVXREC.IVXIAIDX = IVXREC.IVXIAIDX + 1; /* increment counter*/
  IV0VW05.IV0VW-IVVLNGTH = 61; /* temp storage length*/
  TA5REC.TA5APPID = "IVV"; /* appl identification*/
  TA5REC.TA5FNCCD = "A"; /* function code*/
  TA5REC.TA5TSQIX = IVXREC.IVXIAIDX;

  call "TA0050" (IV0VW05, TA5REC) {isNoRefresh = yes, isExternal = yes};

  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    converseLib.validationFailed(10); /* /database busy*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
    TA1REC.TA1TYPE = "APPL"; /* type of error*/
    TA1REC.TA1PGMNM = "IV0V";
    TA1REC.TA1LOCAT[1] = "TA0050";
    TA1REC.TA1LOCAT[2] = "IV0V-LOAD-ARRAY";
    TAEREC.TAEDESC1 = "READ PAGE TO TEMP STORAGE";
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
  end
end // end IV0VSLOAD-ARRAY

// Loads line values onto screen
Function IV0VSLOAD-SCREEN()
   /* ******************************************************************/
   /* This statement group loads values from the array to the screen.**/
   /* ******************************************************************/
   /* set index for next write*/
  IVYREC.IVYSUB = IVYREC.IVYSUB + 1;

  if (IV0VW02.IV0VW-TS-NIKE-PL-NBR-NUM != 
  IV0VW03.IV0VW-TS-NIKE-PL-NBR-HOLD
   || IVYREC.IVYSUB == 1) /* if this is first line on map*/
    IV0VM001.TS-NIKE-PL-NBR[IVYSUB] = IV0VW02.IV0VW-TS-NIKE-PL-NBR-NUM;
    IV0VM001.PK-CRTN-SEQ-NBR[IVYSUB] = IV0VW02.IV0VW-PK-CRTN-SEQ-NBR-NUM;
    IV0VM001.PK-PICK-TYP-CD[IVYSUB] = IV0VW02.PK-PICK-TYP-CD;
    IV0VM001.SY-STY-NBR[IVYSUB] = IV0VW02.SY-STY-NBR;
    IV0VM001.SY-COLR-CD-ID[IVYSUB] = IV0VW02.SY-COLR-CD-ID;
    IV0VM001.XDM-DIM-CD[IVYSUB] = IV0VW02.XDM-DIM-CD;
    IV0VM001.SZ-ID-DESC[IVYSUB] = IV0VW02.SZ-ID-DESC;
    IV0VM001.XUM-UOM-DESC[IVYSUB] = IV0VW02.XUM-UOM-DESC;
    IV0VM001.SR-SHP-QTY[IVYSUB] = IV0VW02.SR-SHP-QTY;
    IV0VM001.SY-SZ-WT[IVYSUB] = IV0VW02.SY-SZ-WT;
    IV0VM001.YNT-CRTN-WT[IVYSUB] = IV0VW02.YNT-CRTN-WT;
    IV0VM001.PK-ACTL-CRTN-WT[IVYSUB] = IV0VW02.PK-ACTL-CRTN-WT;
  else
    if (IV0VW02.IV0VW-PK-CRTN-SEQ-NBR-NUM != 
    IV0VW03.IV0VW-PK-CRTN-SEQ-NBR-HOLD)
  /* OR IVYREC.IVYSUB = 1;  /* if this is first line on map*/
      IV0VM001.TS-NIKE-PL-NBR[IVYSUB] = 0;
      IV0VM001.PK-CRTN-SEQ-NBR[IVYSUB] = IV0VW02.IV0VW-PK-CRTN-SEQ-NBR-NUM;
      IV0VM001.PK-PICK-TYP-CD[IVYSUB] = IV0VW02.PK-PICK-TYP-CD;
      IV0VM001.SY-STY-NBR[IVYSUB] = IV0VW02.SY-STY-NBR;
      IV0VM001.SY-COLR-CD-ID[IVYSUB] = IV0VW02.SY-COLR-CD-ID;
      IV0VM001.XDM-DIM-CD[IVYSUB] = IV0VW02.XDM-DIM-CD;
      IV0VM001.SZ-ID-DESC[IVYSUB] = IV0VW02.SZ-ID-DESC;
      IV0VM001.XUM-UOM-DESC[IVYSUB] = IV0VW02.XUM-UOM-DESC;
      IV0VM001.SR-SHP-QTY[IVYSUB] = IV0VW02.SR-SHP-QTY;
      IV0VM001.SY-SZ-WT[IVYSUB] = IV0VW02.SY-SZ-WT;
      IV0VM001.YNT-CRTN-WT[IVYSUB] = IV0VW02.YNT-CRTN-WT;
      IV0VM001.PK-ACTL-CRTN-WT[IVYSUB] = IV0VW02.PK-ACTL-CRTN-WT;
    else
   /* IF IV0VW02.PK-CRTN-SEQ-NBR-NUM EQ IV0VW03.PK-CRTN-SEQ-NBR-HOLD;*/
      if (IV0VW02.SY-STY-NBR != IV0VW03.IV0VW-SY-STY-NBR-HOLD
       || IV0VW02.SY-COLR-CD-ID != IV0VW03.IV0VW-SY-COLR-CD-ID-HOLD
       || IV0VW02.XDM-DIM-CD != IV0VW03.IV0VW-XDM-DIM-CD-HOLD)
        IV0VM001.TS-NIKE-PL-NBR[IVYSUB] = 0;
        IV0VM001.PK-CRTN-SEQ-NBR[IVYSUB] = 0;
        IV0VM001.PK-PICK-TYP-CD[IVYSUB] = " ";
        IV0VM001.SY-STY-NBR[IVYSUB] = IV0VW02.SY-STY-NBR;
        IV0VM001.SY-COLR-CD-ID[IVYSUB] = IV0VW02.SY-COLR-CD-ID;
        IV0VM001.XDM-DIM-CD[IVYSUB] = IV0VW02.XDM-DIM-CD;
        IV0VM001.SZ-ID-DESC[IVYSUB] = IV0VW02.SZ-ID-DESC;
        IV0VM001.XUM-UOM-DESC[IVYSUB] = IV0VW02.XUM-UOM-DESC;
        IV0VM001.SR-SHP-QTY[IVYSUB] = IV0VW02.SR-SHP-QTY;
        IV0VM001.SY-SZ-WT[IVYSUB] = IV0VW02.SY-SZ-WT;
        IV0VM001.YNT-CRTN-WT[IVYSUB] = 0;
        IV0VM001.PK-ACTL-CRTN-WT[IVYSUB] = 0;
      else
        if (IV0VW02.IV0VW-PK-CRTN-SEQ-NBR-NUM == 
        IV0VW03.IV0VW-PK-CRTN-SEQ-NBR-HOLD
         && IV0VW02.SY-STY-NBR == IV0VW03.IV0VW-SY-STY-NBR-HOLD
         && IV0VW02.SY-COLR-CD-ID == IV0VW03.IV0VW-SY-COLR-CD-ID-HOLD
         && IV0VW02.XDM-DIM-CD == IV0VW03.IV0VW-XDM-DIM-CD-HOLD)
  /* AND IV0VW02.SZ-ID-DESC NE IV0VW03.IV0VW-SZ-ID-DESC-HOLD;*/
          IV0VM001.TS-NIKE-PL-NBR[IVYSUB] = 0;
          IV0VM001.PK-CRTN-SEQ-NBR[IVYSUB] = 0;
          IV0VM001.PK-PICK-TYP-CD[IVYSUB] = " ";
          IV0VM001.SY-STY-NBR[IVYSUB] = " ";
          IV0VM001.SY-STY-NBR[IVYSUB] = " ";
          IV0VM001.SY-COLR-CD-ID[IVYSUB] = " ";
          IV0VM001.XDM-DIM-CD[IVYSUB] = " ";
          IV0VM001.SZ-ID-DESC[IVYSUB] = IV0VW02.SZ-ID-DESC;
          IV0VM001.XUM-UOM-DESC[IVYSUB] = " ";
          IV0VM001.SR-SHP-QTY[IVYSUB] = IV0VW02.SR-SHP-QTY;
          IV0VM001.SY-SZ-WT[IVYSUB] = IV0VW02.SY-SZ-WT;
          IV0VM001.YNT-CRTN-WT[IVYSUB] = 0;
          IV0VM001.PK-ACTL-CRTN-WT[IVYSUB] = 0;
        end
      end
    end
  end
  /* move records to hold fields when checking next line write to map*/
  IV0VW03.IV0VW-TS-NIKE-PL-NBR-HOLD = IV0VW02.IV0VW-TS-NIKE-PL-NBR-NUM;
  IV0VW03.IV0VW-PK-CRTN-SEQ-NBR-HOLD = IV0VW02.IV0VW-PK-CRTN-SEQ-NBR-NUM;
  IV0VW03.IV0VW-SY-STY-NBR-HOLD = IV0VW02.SY-STY-NBR;
  IV0VW03.IV0VW-SY-COLR-CD-ID-HOLD = IV0VW02.SY-COLR-CD-ID;
  IV0VW03.IV0VW-XDM-DIM-CD-HOLD = IV0VW02.XDM-DIM-CD;
  IV0VW03.IV0VW-SZ-ID-DESC-HOLD = IV0VW02.SZ-ID-DESC;
end // end IV0VSLOAD-SCREEN

// look up Style for Scale Code
Function IV0VSLOOKUP-STYLE()
     /* ***   this statement group is used to look up ****/
     /* *** the style record for the scale code.      ****/

     /* blank records for style read*/

  set SY1REC empty;
  set SQLCA empty;

    /* set up key for read*/

  SY1REC.XGPCD = IVXREC.XGPCD;
  SY1REC.SY1STNBR = IV3REC.SY1STNBR;

   /* read style record*/

  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes};


  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1PGMNM = "IV0V    ";
    TA1REC.TA1MAP = "IV0VM001";
    TA1REC.TA1DBASE = "DPROD   ";
    TA1REC.TA1TBLVU = "VSTYLE01";
    TA1REC.TA1TBLKE = SY1REC.SY1KEY;
    TA1REC.TA1LOCAT[3] = "IV0V-LOOKUP-STYLE";
    TA1REC.TA1LOCAT[4] = "IO0120";
    XSIVS02();
  end


  IV0VW01.SY-SZ-SCL-CD = SY1REC.SY4SZSCL;


end // end IV0VSLOOKUP-STYLE

// Move blanks to screen
Function IV0VSMOVE-BLANKS()
   /* *********************************************************************/
   /* THIS STATEMENT GROUP WILL move blanks to unoccupied fields on      **/
   /* IV0VM001                                                          **/
   /* *********************************************************************/
  IV0VM001.TS-NIKE-PL-NBR[IVYSUB] = 0;
  IV0VM001.PK-CRTN-SEQ-NBR[IVYSUB] = 0;
  IV0VM001.PK-PICK-TYP-CD[IVYSUB] = " ";
  IV0VM001.SY-STY-NBR[IVYSUB] = " ";
  IV0VM001.SY-COLR-CD-ID[IVYSUB] = " ";
  IV0VM001.XDM-DIM-CD[IVYSUB] = " ";
  IV0VM001.XUM-UOM-DESC[IVYSUB] = " ";
  IV0VM001.SZ-ID-DESC[IVYSUB] = " ";
  IV0VM001.SR-SHP-QTY[IVYSUB] = 0;
  IV0VM001.SY-SZ-WT[IVYSUB] = 0;
  IV0VM001.YNT-CRTN-WT[IVYSUB] = 0;
  IV0VM001.PK-ACTL-CRTN-WT[IVYSUB] = 0;
end // end IV0VSMOVE-BLANKS

// PF1  Pressed Actions
Function IV0VSPF1()


  if (IVXREC.IVXIAIDX != 0) /* if  temp storage record exists*/
    IV0VSPURGE-TEMP(); /* purge temp storage*/
    IVXREC.IVXIAIDX = 0; /* initialize index*/
  end
  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  COMMAREA.CATOAP = "GD00";
  XSEXIT();
  converseLib.validationFailed(15); /* transfer failed*/
  IVYREC.IVYERR = "Y"; /* mark as error*/


end // end IV0VSPF1

// PF13 Pressed Actions
Function IV0VSPF13()


  if (IVXREC.IVXIAIDX != 0) /* if  temp storage record exists*/
    IV0VSPURGE-TEMP(); /* purge temp storage*/
    IVXREC.IVXIAIDX = 0; /* initialize index*/
  end
  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  COMMAREA.CATOAP = "IV0G";
  XSEXIT();
  converseLib.validationFailed(15); /* transfer failed*/
  IVYREC.IVYERR = "Y"; /* mark as error*/


end // end IV0VSPF13

// PF14 Pressed Actions
Function IV0VSPF14()


  if (IVXREC.IVXIAIDX != 0) /* if  temp storage record exists*/
    IV0VSPURGE-TEMP(); /* purge temp storage*/
    IVXREC.IVXIAIDX = 0; /* initialize index*/
  end
  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  COMMAREA.CATOAP = "IV0H";
  XSEXIT();
  converseLib.validationFailed(15); /* transfer failed*/
  IVYREC.IVYERR = "Y"; /* mark as error*/


end // end IV0VSPF14

// PF15 Pressed Actions
Function IV0VSPF15()


  if (IVXREC.IVXIAIDX != 0) /* if  temp storage record exists*/
    IV0VSPURGE-TEMP(); /* purge temp storage*/
    IVXREC.IVXIAIDX = 0; /* initialize index*/
  end
  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  COMMAREA.CATOAP = "IV0J";
  XSEXIT();
  converseLib.validationFailed(15); /* transfer failed*/
  IVYREC.IVYERR = "Y"; /* mark as error*/


end // end IV0VSPF15

// PF16 Pressed Actions
Function IV0VSPF16()


  if (IVXREC.IVXIAIDX != 0) /* if  temp storage record exists*/
    IV0VSPURGE-TEMP(); /* purge temp storage*/
    IVXREC.IVXIAIDX = 0; /* initialize index*/
  end
  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  COMMAREA.CATOAP = "IV0I";
  XSEXIT();
  converseLib.validationFailed(15); /* transfer failed*/
  IVYREC.IVYERR = "Y"; /* mark as error*/


end // end IV0VSPF16

// PF20 Pressed Actions
Function IV0VSPF20()


  if (IVXREC.IVXIAIDX != 0) /* if  temp storage record exists*/
    IV0VSPURGE-TEMP(); /* purge temp storage*/
    IVXREC.IVXIAIDX = 0; /* initialize index*/
  end
  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  COMMAREA.CATOAP = "IV0C";
  XSEXIT();
  converseLib.validationFailed(15); /* transfer failed*/
  IVYREC.IVYERR = "Y"; /* mark as error*/


end // end IV0VSPF20

// PF21 Pressed Actions
Function IV0VSPF21()


  if (IVXREC.IVXIAIDX != 0) /* if  temp storage record exists*/
    IV0VSPURGE-TEMP(); /* purge temp storage*/
    IVXREC.IVXIAIDX = 0; /* initialize index*/
  end
  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  COMMAREA.CATOAP = "IV0U";
  XSEXIT();
  converseLib.validationFailed(15); /* transfer failed*/
  IVYREC.IVYERR = "Y"; /* mark as error*/


end // end IV0VSPF21

// PF3 Pressed Actions
Function IV0VSPF3()


  if (IVXREC.IVXIAIDX != 0) /* if  temp storage record exists*/
    IV0VSPURGE-TEMP(); /* purge temp storage*/
    IVXREC.IVXIAIDX = 0; /* initialize index*/
  end
  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  COMMAREA.CATOAP = "IV0A";
  XSEXIT();
  converseLib.validationFailed(15); /* transfer failed*/
  IVYREC.IVYERR = "Y"; /* flag as error*/


end // end IV0VSPF3

// PF4 Pressed Actions
Function IV0VSPF4()


  if (IVXREC.IVXIAIDX != 0) /* if  temp storage record exists*/
    IV0VSPURGE-TEMP(); /* purge temp storage*/
    IVXREC.IVXIAIDX = 0; /* initialize index*/
  end
  COMMAREA.CAUSERA = IVXREC.IVXGROUP;
  COMMAREA.CATOAP = "MN0M";
  XSEXIT();
  converseLib.validationFailed(15); /* transfer failed*/
  IVYREC.IVYERR = "Y"; /* mark as error*/


end // end IV0VSPF4

// Purge temporary storage
Function IV0VSPURGE-TEMP()


   /* purge temp storage*/

  set TA5REC empty;
  IVXREC.IVXWFQIX = 0; /* reset temp storage index*/

  TA5REC.TA5APPID = "IVV"; /* appl identification*/
  TA5REC.TA5FNCCD = "P"; /* function code*/

  call "TA0050" (IV0VW05, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == +0)
    /* next sentence*/
  else
    TA1REC.TA1FUNC = "POST"; /* termination function*/
    TA1REC.TA1TYPE = "APPL"; /* type of error*/
    TA1REC.TA1PGMNM = IVXREC.IVXAPPL;
    TA1REC.TA1MAP = "IV0VM001"; /* map name*/
    TA1REC.TA1LOCAT[1] = "TA0050";
    TA1REC.TA1LOCAT[2] = "IV0V-PURGE-TEMP";
    TA1REC.TA1LOCAT[3] = IVXREC.IVXLOC;
    TAEREC.TAEDESC1 = "PURGE TEMP STORAGE FAILED";

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/

  end



end // end IV0VSPURGE-TEMP

// Read dcust.vdept001
Function IV0VSREAD-DEPT()
     /* ***   this statement group is used to look up ****/
     /* *** the dcust.vdept01 for store self id       ****/

     /* blank records*/

  set KUJREC empty;
  set SQLCA empty;

    /* set up key for read*/

  KUJREC.KUCCOID = IVXREC.KUCCOID; /* company id*/
  KUJREC.XNXCD = IVXREC.XNXCD; /* department id*/

   /* read dcust.vdept01 to customer department self id*/

  call "IO0290" ("S ", SQLCA, KUJREC) {isNoRefresh = yes, isExternal = yes};

     /* if not found - abend*/

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1PGMNM = "IV0V    ";
    TA1REC.TA1MAP = "IV0VM001";
    TA1REC.TA1DBASE = "DCUST   ";
    TA1REC.TA1TBLVU = "VDEPT001";
   /* MOVE KUMREC.KUCCOID TO TA1REC.TA1TBLKE;*/
    TA1REC.TA1LOCAT[3] = "IV0V-READ-DEPT";
    TA1REC.TA1LOCAT[4] = "IO0290";
    XSIVS02();
  end


  IV0VW01.CU-DEPT-SELF-ID = KUJREC.KUJSLFID; /* dept  self id*/
                                                 /* to working storage*/

end // end IV0VSREAD-DEPT

// select Invoice Header
Function IV0VSREAD-HEADER()
     /* ***   this statement group is used to look up ****/
     /* *** the header record for display fields      ****/

     /* blank records*/

  set IVAREC empty;
  set SQLCA empty;

    /* set up key for read*/

  IVAREC.IV0IVCID = IVXREC.IV0IVCID;
  IVYREC.IVYIVCN = IVXREC.IV0IVCID;
  IVAREC.IV0PARTN = IVYREC.IV0PARTN;

   /* read invoice header for customer po and pro number*/

  call "IO1040" ("S ", SQLCA, IVAREC) {isNoRefresh = yes, isExternal = yes};

     /* if not found - if an individual find, pass back to menu*/

  if (SQLCA.VAGen_SQLCODE == 100)
    if (IVXREC.IVXTYPFL == "I") /* if an individual invoice find*/
      IVXREC.IVXMSSNB = 43;
      COMMAREA.CAUSERA = IVXREC.IVXGROUP;
      COMMAREA.CAFROMAP = "IV0N";
      COMMAREA.CACURRAP = "IV0A";
      transfer to transaction "IV0A" passing COMMAREA; /* pass back to main menu*/
    end
  end

     /* all other cases, kill program*/

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1PGMNM = "IV0V    ";
    TA1REC.TA1MAP = "IV0VM001";
    TA1REC.TA1DBASE = "DINVC   ";
    TA1REC.TA1TBLVU = "VIVHDR01";
    TA1REC.TA1TBLKE = IVAREC.IV0KEY;
    TA1REC.TA1LOCAT[3] = "IV0V-READ-HEADER";
    TA1REC.TA1LOCAT[4] = "IO1040";
    XSIVS02();
  end


  IVXREC.OP1CUPO = IVAREC.OP1CUPO;
  IV0VW01.TF-PRO-NBR = IVAREC.TF2PRONO;


end // end IV0VSREAD-HEADER

// select Invoice Line Item
Function IV0VSREAD-LINE()
     /* ***   this statement group is used to look up ****/
     /* *** the line record.                          ****/

     /* blank records*/

  set IV3REC empty;
  set SQLCA empty;

    /* set up key for read*/

  IV3REC.IV0IVCID = IVXREC.IV0IVCID;
  IV3REC.IV0PARTN = IVYREC.IV0PARTN;
  IV3REC.OP2LNINB = VIVCTN02.OP-LINE-ITEM-NBR;

   /* read invoice line item*/

  call "IO1100" ("S ", SQLCA, IV3REC) {isNoRefresh = yes, isExternal = yes};

     /* if not found - if an individual find, pass back to menu*/

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1PGMNM = "IV0V    ";
    TA1REC.TA1MAP = "IV0VM001";
    TA1REC.TA1DBASE = "DINVC   ";
    TA1REC.TA1TBLVU = "VIVITM01";
    TA1REC.TA1TBLKE = IV3REC.IV3KEY;
    TA1REC.TA1LOCAT[3] = "READ-LINE";
    TA1REC.TA1LOCAT[4] = "IO1100";
    XSIVS02();
  end

  IV0VW02.SY-STY-NBR = IV3REC.SY1STNBR;
  IV0VW02.SY-COLR-CD-ID = IV3REC.SY2CLRID;
  IV0VW02.XDM-DIM-CD = IV3REC.XDMCD;
  if (IV3REC.XUMCD in XUMTBL.XUMCD) /* get description form xumtbl*/
    IV0VW02.XUM-UOM-DESC = XUMTBL.XUMDESC[sysVar.arrayIndex];
  else
    IV0VW02.XUM-UOM-DESC = IV3REC.XUMCD;
  end

end // end IV0VSREAD-LINE

// read Scale Record
Function IV0VSREAD-SCALE()
     /* ***   this statement group is used to look up ****/
     /* *** the scale record for the style            ****/

     /* blank records for scale read*/

  set SY4REC empty;
  set SQLCA empty;

    /* set up key for read*/

  SY4REC.SY4SZSCL = IV0VW01.SY-SZ-SCL-CD;

   /* read scale record*/

  call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes};


  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1PGMNM = "IV0V    ";
    TA1REC.TA1MAP = "IV0VM001";
    TA1REC.TA1DBASE = "DPROD   ";
    TA1REC.TA1TBLVU = "VSCALE01";
    TA1REC.TA1TBLKE = SY4REC.SY4SZSCL;
    TA1REC.TA1LOCAT[3] = "READ-SCALE";
    TA1REC.TA1LOCAT[4] = "IO0040";
    XSIVS02();
  end


end // end IV0VSREAD-SCALE

// Read dcust.vstore01
Function IV0VSREAD-STORE()
     /* ***   this statement group is used to look up ****/
     /* *** the store record for store self id        ****/

     /* blank records*/

  set KUMREC empty;
  set SQLCA empty;

    /* set up key for read*/

  KUMREC.KUCCOID = IVXREC.KUCCOID;
  KUMREC.KUMSTRID = IVXREC.KUMSTRID;

   /* read dcust.vstore01 to customer store self id*/

  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes};

     /* if not found - abend*/

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1PGMNM = "IV0V    ";
    TA1REC.TA1MAP = "IV0VM001";
    TA1REC.TA1DBASE = "DCUST   ";
    TA1REC.TA1TBLVU = "VSTORE01";
     /* mOVE KUMREC.KUCCOID TO TA1REC.TA1TBLKE;*/
    TA1REC.TA1LOCAT[3] = "IV0V-READ-STORE";
    TA1REC.TA1LOCAT[4] = "IO0340";
    XSIVS02();
  end


  IV0VW01.CU-STOR-SELF-ID = KUMREC.KUMSLFID; /* store self id*/
                                                 /* to working storage*/

end // end IV0VSREAD-STORE

// Read temporary storage
Function IV0VSREAD-TEMP()
   /* *****************************************************************/
   /* This statement group will read detail lines of iv0vm001 placed**/
   /* into temporary storage.  Will be used for scrolling purposes. **/
   /* *****************************************************************/
  set IV0VW05 empty;
  set TA5REC empty;
  IV0VW05.IV0VW-IVVLNGTH = 61; /* temp storage lenghth*/
  TA5REC.TA5APPID = "IVV"; /* application id*/
  TA5REC.TA5FNCCD = "R"; /* function code*/
  TA5REC.TA5TSQIX = IV0VW01.IV0VW-IV-ARRAY-CNT; /* index number*/

  call "TA0050" (IV0VW05, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == +0 /* if record found*/
   || TA5REC.TA5RTNCD == +7) /* if end of queue*/
    /* next sentence*/
  else
    converseLib.validationFailed(10); /* database is busy*/
    TA1REC.TA1FUNC = "READ";
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1PGMNM = "IV0V";
    TA1REC.TA1LOCAT[1] = "TA0050";
    TA1REC.TA1LOCAT[2] = "IV0V-READ-TEMP";
    TAEREC.TAEDESC1 = "READ PAGE FROM TEMP STORAGE";
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
  end

  if (TA5REC.TA5RTNCD == +0) /* if found*/
    move IV0VW05-GRP to IV0VW02-GRP withV60Compat; /* move to record it can be written*/
  end /* to map with*/
end // end IV0VSREAD-TEMP

// read all carton records
Function IV0VSREAD-VIVCTN02()
   /* This procedure will read all carton records for an invoice, calculate*/
   /* each line to be displayed on the screen.  It will display the first*/
   /* fifteen lines and store all the lines in temp storage.*/
   /* ***********************************************************************/
  IVYREC.IVYSUB = 0; /* screen index*/
  IVXREC.IVXIAIDX = 0; /* array index*/
  IV0VSSETUP-READ(); /* / select set for DINVC.vivctn02*/
  IV0VW01-EOF-VIVCTN02 = "N"; /* set eof file for vivctn02*/
  while (IV0VW01-EOF-VIVCTN02 == "N" /* while not at end of file*/
   && IVXREC.IVXIAIDX < 500) /* only 500 items in array*/
    IV0VSSELECT-NEXT(); /* get next vivctn02 record*/
    if (SQLCA.VAGen_SQLCODE == 0)
      IV0VW02.IV0VW-TS-NIKE-PL-NBR-NUM = VIVCTN02.TS-NIKE-PL-NBR;
      IV0VW02.IV0VW-PK-CRTN-SEQ-NBR-NUM = VIVCTN02.PK-CRTN-SEQ-NBR;

      IV0VW02.PK-PICK-TYP-CD = VIVCTN02.PK-PICK-TYP-CD;
      IV0VSREAD-LINE(); /* read dinvc.vivitm01*/
      IV0VSLOOKUP-STYLE(); /* lookup dprod.vstyle01*/
      IV0VSREAD-SCALE(); /* will get size descriptions*/
      IV0VSCALC-CRTN-WT(); /* calc carton weight from DCORP.VYNT0001*/
      if (VIVCTN02.SY-SZ-ID1 > 0) /* if size is present*/
        IV0VW01.SY-SZ-ID = VIVCTN02.SY-SZ-ID1;
        IV0VW02.SR-SHP-QTY = VIVCTN02.PK-ALOC-PICK-QTY1;
        IV0VSSIZE-DESC(); /* get size description*/
        IV0VSGET-UNIT-WT(); /* get weight from dprod.vsizwt01*/
                                          /* or dprod.vstyle01*/
        IV0VSCALC-UNIT-WT(); /* calc weight of units sent*/
        if (IVYREC.IVYSUB < 15) /* if first screen not full*/
          IV0VSLOAD-SCREEN();
        end
        IV0VSLOAD-ARRAY();
      end
      if (VIVCTN02.SY-SZ-ID2 > 0) /* if size is present*/
        IV0VW01.SY-SZ-ID = VIVCTN02.SY-SZ-ID2;
        IV0VW02.SR-SHP-QTY = VIVCTN02.PK-ALOC-PICK-QTY2;
        IV0VSSIZE-DESC(); /* get size description*/
        IV0VSGET-UNIT-WT(); /* get weight from dprod.vsizwt01*/
                                          /* or dprod.vstyle01*/
        IV0VSCALC-UNIT-WT(); /* calc weight of units sent*/
        IV0VSLOAD-ARRAY();
        if (IVYREC.IVYSUB < 15) /* if first screen not full*/
          IV0VSLOAD-SCREEN();
        end
      end
      if (VIVCTN02.SY-SZ-ID3 > 0) /* if size is present*/
        IV0VW01.SY-SZ-ID = VIVCTN02.SY-SZ-ID3;
        IV0VW02.SR-SHP-QTY = VIVCTN02.PK-ALOC-PICK-QTY3;
        IV0VSSIZE-DESC(); /* get size description*/
        IV0VSGET-UNIT-WT(); /* get weight from dprod.vsizwt01*/
                                          /* or dprod.vstyle01*/
        IV0VSCALC-UNIT-WT(); /* calc weight of units sent*/
        if (IVYREC.IVYSUB < 15) /* if first screen not full*/
          IV0VSLOAD-SCREEN();
        end
        IV0VSLOAD-ARRAY();
      end
      if (VIVCTN02.SY-SZ-ID4 > 0) /* if size is present*/
        IV0VW01.SY-SZ-ID = VIVCTN02.SY-SZ-ID4;
        IV0VW02.SR-SHP-QTY = VIVCTN02.PK-ALOC-PICK-QTY4;
        IV0VSSIZE-DESC(); /* get size description*/
        IV0VSGET-UNIT-WT(); /* get weight from dprod.vsizwt01*/
                                          /* or dprod.vstyle01*/
        IV0VSCALC-UNIT-WT(); /* calc weight of units sent*/
        if (IVXREC.IVXIAIDX < 15) /* if first screen not full*/
          IV0VSLOAD-SCREEN();
        end
        IV0VSLOAD-ARRAY();
      end
      if (VIVCTN02.SY-SZ-ID5 > 0) /* if size is present*/
        IV0VW01.SY-SZ-ID = VIVCTN02.SY-SZ-ID5;
        IV0VW02.SR-SHP-QTY = VIVCTN02.PK-ALOC-PICK-QTY5;
        IV0VSSIZE-DESC(); /* get size description*/
        IV0VSGET-UNIT-WT(); /* get weight from dprod.vsizwt01*/
                                          /* or dprod.vstyle01*/
        IV0VSCALC-UNIT-WT(); /* calc weight of units sent*/
        if (IVYREC.IVYSUB < 15) /* if first screen not full*/
          IV0VSLOAD-SCREEN();
        end
        IV0VSLOAD-ARRAY();
      end
      if (IVXREC.IVXIAIDX > 499) /* display message to get printout*/
        converseLib.validationFailed(65); /* if more than 500 lines*/
      end
    end
  end

  IV0VW01.IV0VW-IV-ARRAY-CNT = IVYREC.IVYSUB; /* move to hold a place*/
  call "VIVCTN02" ("C1", SQLCA, IV3REC) {isNoRefresh = yes}; /* close cursor*/
end // end IV0VSREAD-VIVCTN02

// select Next Carton Record
Function IV0VSSELECT-NEXT()

     /* ***   this statement group reads each selected ****/
     /* *** carton record                              ****/

     /* blank records*/

  set VIVCTN02 empty;
  set SQLCA empty;

     /* set key for read*/

  VIVCTN02.IV-IVC-ID = IVAREC.IV0IVCID;
  VIVCTN02.IV-IVC-PART-CHAR = IVYREC.IV0PARTN;

     /* ***   this statement group does the select next ****/
     /* *** for invoices with specified order number    ****/

     /* blank records*/

  set VIVCTN02 empty;
  set SQLCA empty;

     /* call io mod with select next option*/

  call "VIVCTN02" ("N1", SQLCA, VIVCTN02) {isNoRefresh = yes};

  if (SQLCA.VAGen_SQLCODE == 100) /* record found not found*/
    IV0VW01-EOF-VIVCTN02 = "Y";
  else /* something wrong with database*/
    if (SQLCA.VAGen_SQLCODE != 0)
      TA1REC.TA1PGMNM = "IV0V    ";
      TA1REC.TA1MAP = "IV0VM001";
      TA1REC.TA1DBASE = "DINVC   ";
      TA1REC.TA1TBLVU = "VIVCTN02";
   /* MOVE vivctn02.IV-IVC-ID TO TA1REC.TA1TBLKE;*/
      TA1REC.TA1LOCAT[3] = "IV0V-SELECT-NEXT";
      TA1REC.TA1LOCAT[4] = "VIVCTN02";
      XSIVS02();
    end
  end

  IV0VW02.IV0VW-TS-NIKE-PL-NBR-NUM = VIVCTN02.TS-NIKE-PL-NBR;
  IV0VW02.IV0VW-PK-CRTN-SEQ-NBR-NUM = VIVCTN02.PK-CRTN-SEQ-NBR;
  IV0VW02.PK-PICK-TYP-CD = VIVCTN02.PK-PICK-TYP-CD;
  IV0VW02.PK-ACTL-CRTN-WT = VIVCTN02.PK-ACTL-CRTN-WT;


end // end IV0VSSELECT-NEXT

// Setup read for carton records
Function IV0VSSETUP-READ()
   /* This procedure will read setup the read for carton records.*/
   /* *****************************************************************/
  set VIVCTN02 empty;
  set SQLCA empty;

   /* set up key for find of iv3rec*/
  VIVCTN02.IV-IVC-ID = IVXREC.IV0IVCID;
  VIVCTN02.IV-IVC-PART-CHAR = IVYREC.IV0PARTN;

  call "VIVCTN02" ("S1", SQLCA, VIVCTN02) {isNoRefresh = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1PGMNM = "IV0V    ";
    TA1REC.TA1MAP = "IV0NM001";
    TA1REC.TA1DBASE = "DINVC   ";
    TA1REC.TA1TBLVU = "VIVCTN02";
    TA1REC.TA1TBLKE = VIVCTN02.IV-IVC-PART-CHAR;
    TA1REC.TA1LOCAT[3] = "IV0V-READ-VIVCTN02";
    TA1REC.TA1LOCAT[4] = "VIVCTN02";
    XSIVS02();
  end
end // end IV0VSSETUP-READ

// get size description
Function IV0VSSIZE-DESC()
   /* *****************************************************************/
   /* this statement group will read dprod.vscale to that size      **/
   /* descriptions can be found                                     **/
   /* *****************************************************************/
  IV0VSLOOKUP-STYLE(); /* get style needed for read of dprod.vscale01*/

  IV0VSREAD-SCALE(); /* read dprod.vscale01*/
  IVYREC.IVYSUB2 = IV0VW01.SY-SZ-ID;
  IV0VW02.SZ-ID-DESC = SY4REC.SY4IDDSC[IVYSUB2];
end // end IV0VSSIZE-DESC

//*** RECORD=IV0VW01 ****
// Working storage variables for iv0v
// ***********************
Record IV0VW01 type basicRecord
  5 IV0VW01-GRP IV0VW01-GRP ; 
    10 IV0VW-IV-ARRAY-CNT IV0VW-IV-ARRAY-CNT ; 
    10 CU-STOR-SELF-ID CU-STOR-SELF-ID ; 
    10 CU-DEPT-SELF-ID CU-DEPT-SELF-ID ; 
    10 TF-PRO-NBR TF-PRO-NBR ; 
    10 SY-SZ-WT SY-SZ-WT ; 
    10 SY-SZ-SCL-CD SY-SZ-SCL-CD ; 
    10 SY-SZ-ID SY-SZ-ID ; 
    10 IV0VW01-EOF-VIVCTN02 IV0VW01-EOF-VIVCTN02 ; 
    10 IV0VW-IVY-SUB-HOLD IV0VW-IVY-SUB-HOLD ; 
    10 IV0VW-IV-CALC-AMT IV0VW-IV-CALC-AMT ; 
    10 IV0VW-LAST-CRTN IV0VW-LAST-CRTN ; 
end // end IV0VW01

//*** RECORD=IV0VW02 ****
// This record holds the fields to be loaded onto the map and
// loaded into temporary storage.
// 
// ***********************
Record IV0VW02 type basicRecord
  5 IV0VW02-GRP IV0VW02-GRP ; 
    10 IV0VW-TS-NIKE-PL-NBR-NUM IV0VW-TS-NIKE-PL-NBR-NUM ; 
    10 IV0VW-PK-CRTN-SEQ-NBR-NUM IV0VW-PK-CRTN-SEQ-NBR-NUM ; 
    10 PK-PICK-TYP-CD PK-PICK-TYP-CD ; 
    10 SY-STY-NBR SY-STY-NBR ; 
    10 SY-COLR-CD-ID SY-COLR-CD-ID ; 
    10 XDM-DIM-CD XDM-DIM-CD ; 
    10 SZ-ID-DESC SZ-ID-DESC ; 
    10 XUM-UOM-DESC XUM-UOM-DESC ; 
    10 SR-SHP-QTY SR-SHP-QTY ; 
    10 SY-SZ-WT SY-SZ-WT ; 
    10 YNT-CRTN-WT YNT-CRTN-WT ; 
    10 PK-ACTL-CRTN-WT PK-ACTL-CRTN-WT ; 
end // end IV0VW02

//*** RECORD=IV0VW03 ****
// this record contains the hold fields used in iv0v
// ***********************
Record IV0VW03 type basicRecord
  5 IV0VW03-GRP IV0VW03-GRP ; 
    10 IV0VW-TS-NIKE-PL-NBR-HOLD IV0VW-TS-NIKE-PL-NBR-HOLD ; 
    10 IV0VW-PK-CRTN-SEQ-NBR-HOLD IV0VW-PK-CRTN-SEQ-NBR-HOLD ; 
    10 IV0VW-SY-STY-NBR-HOLD IV0VW-SY-STY-NBR-HOLD ; 
    10 IV0VW-SY-COLR-CD-ID-HOLD IV0VW-SY-COLR-CD-ID-HOLD ; 
    10 IV0VW-XDM-DIM-CD-HOLD IV0VW-XDM-DIM-CD-HOLD ; 
    10 IV0VW-SZ-ID-DESC-HOLD IV0VW-SZ-ID-DESC-HOLD ; 
end // end IV0VW03

//*** RECORD=IV0VW05 ****
// This record will be used to load temporary storage
// this record will contain a single line of line item data for
// the map iv0vm001.
// ***********************
Record IV0VW05 type basicRecord
  5 IV0VW05-GROUP IV0VW05-GROUP ; 
    10 IV0VW-IVVLNGTH IV0VW-IVVLNGTH ; 
    10 IV0VW05-GRP IV0VW05-GRP ; 
      15 IV0VW-TS-NIKE-PL-NBR-NUM IV0VW-TS-NIKE-PL-NBR-NUM ; 
      15 IV0VW-PK-PICK-SEQ-NBR-NUM IV0VW-PK-PICK-SEQ-NBR-NUM ; 
      15 PK-PICK-TYP-CD PK-PICK-TYP-CD ; 
      15 SY-STY-NBR SY-STY-NBR ; 
      15 SY-COLR-CD-ID SY-COLR-CD-ID ; 
      15 XDM-DIM-CD XDM-DIM-CD ; 
      15 SZ-ID-DESC SZ-ID-DESC ; 
      15 XUM-UOM-DESC XUM-UOM-DESC ; 
      15 SR-SHP-QTY SR-SHP-QTY ; 
      15 SY-SZ-WT SY-SZ-WT ; 
      15 YNT-CRTN-WT YNT-CRTN-WT ; 
      15 PK-ACTL-CRTN-WT PK-ACTL-CRTN-WT ; 
end // end IV0VW05

DataItem IV0VW-IV-ARRAY-CNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem IV0VW-IV-CALC-AMT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem IV0VW-IVVLNGTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem IV0VW-IVY-SUB-HOLD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem IV0VW-LAST-CRTN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem IV0VW-PK-CRTN-SEQ-NBR-HOLD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem IV0VW-PK-CRTN-SEQ-NBR-NUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem IV0VW-PK-PICK-SEQ-NBR-NUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem IV0VW-SY-COLR-CD-ID-HOLD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem IV0VW-SY-STY-NBR-HOLD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem IV0VW-SZ-ID-DESC-HOLD char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem IV0VW-TS-NIKE-PL-NBR-HOLD num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem IV0VW-TS-NIKE-PL-NBR-NUM num(5)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem IV0VW-XDM-DIM-CD-HOLD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of dinvc.vivctn02
DataItem IV0VW01-EOF-VIVCTN02 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working sto
DataItem IV0VW01-GRP char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem IV0VW02-GRP char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem IV0VW03-GRP char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem IV0VW05-GROUP char(54)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem IV0VW05-GRP char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SY-SZ-WT decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SZ-ID-DESC char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XUM-UOM-DESC char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem YNT-CRTN-WT decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

