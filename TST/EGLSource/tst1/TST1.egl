package tst1;
import corpcom1.*;
import corpcom5.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import mn.common.*;
import ta.common.*;
//*** PROGRAM=TST1 ****
// temporary test program
// 
// overview: this application receives from the user their id
//           and then verifies that the user is an active user
//           within the csp menu/security system.  if the user
//           is valid this application will set up the
// MN0M MENU VIA XFER PROCESS.
// -----------------------------------------------------------
// 02/24/87: MODIFICATIONS MADE TO ACCESS THE '&' GROUP RECORD
//           IF THE USERID/MN0M APPLICATION RECORD WAS NOT
//           FOUND IN THE SCTY FILE....JWOOD
// 09/05/89: changed user record inquiry to include mn1appl fld
//           as part of the type 2 record inquiry key....jwood
// 07/06/90: REMOVED SEARCH OF SCTY FILE FOR MN0M SINCE MN0S IS
//           NO LONGER LOOKING FOR SECURITY TO XQT MN0M...
// *********************
Program TST1 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = yes, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  inputRecord = COMMAREA, segmented = no
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  MN1REC MN1REC; // record
  MN2REC MN2REC { redefines = MN1REC } ; // record
  MN3REC MN3REC { redefines = MN1REC } ; // record
  TST1W01 TST1W01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use TST1M.TST1M01 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    TST1001: TST1001();
    goto TST1002;
    TST1002: TST1002();


     /* ************************************************************/
        /* This flow section will check the validity of the pfkeys*/
        /* entered and take the appropriate action based upon*/
        /* which one was pressed.  the enter key will be used to*/
        /* verify the user id.  the pf3 key will cause*/
        /* the program to terminate via an ezeclos.  any other*/
        /* pf key will be assumed to be an invalid key.*/
     /* ************************************************************/


    if (converseVar.eventKey is pf3)
      exit program;
    else
      if (converseVar.eventKey is enter)
        if (TST1M01.CAUSERID != " ")
          goto TST1004;
        else
          TST1M01.VAGen_EZEMSG = "please enter user id";
          goto TST1002;
        end
      else
        TST1M01.VAGen_EZEMSG = "invalid pfkey, try again";
        goto TST1002;
      end
    end
    TST1004: TST1004();


    if (MN1REC is noRecordFound)
      goto TST1002;
    end
    if (MN1REC is ioError)
      goto TST1002;
    end
    goto TST1005;
    TST1005: TST1005();
    goto TST1002;
  end // end main
end // end TST1

// tst1 initialization
Function TST1001()


   /* ************************************************************/
      /* the purpose of this process is to initialize the work*/
      /* areas that will be used within the application*/
   /* ************************************************************/

  set TST1W01 empty;
  set TST1M01 initial;
  set COMMAREA empty;
  TST1MDT = VGVar.currentShortGregorianDate;


end // end TST1001

// converse screen for user id
Function TST1002()


   /* ************************************************************/
      /* the purpose of this process is to converse the screen*/
      /* so that a user id can be entered.*/
   /* ************************************************************/

  converseLib.clearScreen();

  converse TST1M01 ;



  TST1M01.VAGen_EZEMSG = " ";



end // end TST1002

// read user rec for validation
Function TST1004()


  set MN1REC empty;

   /* **********************************************************/
   /* this process in invoked to read the user record*/
   /* **********************************************************/


   /* set up file key for application read*/

  MN2REC.MN1KEY = " "; /* clear key area*/
  MN2REC.MN1TYPE1 = "2"; /* set record type*/
  MN2REC.MN1USER = TST1M01.CAUSERID; /* do not user user field*/
  MN2REC.MN1TYPE2 = "2"; /* set record type*/
  MN2REC.MN1APPL = MN2REC.MN1USER; /* set up apl fld  in key*/



  try
    get MN1REC ;
  end



   /* the following statements check for a file error*/

  if (MN1REC is noRecordFound) /* not found condition*/
    TST1M01.VAGen_EZEMSG = "USER DOES NOT EXIST - REENTER";
  else
    if (MN1REC is ioError) /* not found condition*/
      TST1M01.VAGen_EZEMSG = "ERROR FOUND ON MENU FILE I/O";
    else
      COMMAREA.XNDCD = MN2REC.XNDCD;
      COMMAREA.XDVCD = MN2REC.XDVCD;
      COMMAREA.XWHCD = MN2REC.XWHCD;
      COMMAREA.XSOCD = MN2REC.XSOCD;
      COMMAREA.XGPCD = " ";
    end
  end



end // end TST1004

// read menu rec for validation
Function TST1005()


   /* **********************************************************/





  COMMAREA.CASYSINT = "CSP"; /* clear message*/
  COMMAREA.CAUSERID = TST1M01.CAUSERID;
  COMMAREA.CAFROMAP = "TST1";
  COMMAREA.CACURRAP = "MN0M";
  COMMAREA.CAITEM = " ";
  COMMAREA.CAMSG = " ";
  COMMAREA.CAADD = "NNNNNNNNNNN";
  COMMAREA.CACHG = "NNNNNNNNNNN";
  COMMAREA.CADEL = "NNNNNNNNNNN";
  COMMAREA.CAINQ = "YNNNNNNNNNN";
  COMMAREA.CAUSERA = " ";
  transfer to transaction "MN0M" passing COMMAREA;
  TST1M01.VAGen_EZEMSG = "XFER FROM TST1005 DIDNT WORK";



end // end TST1005

//*** RECORD=TST1W01 ****
// ************************************************************
// ***  WORKING STORAGE RECORD FOR MN0S PROCESSING          ***
// ***------------------------------------------------------***
// *** 02/16/87: ADDED TST1 MSG AREA TO INCLUDE ERROR CODES ***
// ***           AS A RESULT OF FILE ACCESSING - JWOOD      ***
// ************************************************************
// ***********************
Record TST1W01 type basicRecord
  5 TST1WLNG TST1WLNG ; 
    10 TST1WAPP TST1WAPP ; 
      20 TST1WAPX TST1WAPX ; 
      20 * char(2) ; 
    10 TST1WGRP TST1WGRP ; 
      20 TST1WGCP TST1WGCP ; 
        30 TST1WGCH TST1WGCH ; 
        30 TST1WGPX TST1WGPX ; 
      20 TST1WGLV TST1WGLV ; 
    10 TST1WSKY TST1WSKY ; 
    10 TST1WMSG TST1WMSG ; 
      20 TST1WCRC TST1WCRC ; 
      20 TST1WHYP TST1WHYP ; 
      20 TST1WEZR TST1WEZR ; 
      20 * char(1) ; 
      20 TST1WMKY TST1WMKY ; 
      20 * char(1) ; 
      20 TST1WERR TST1WERR ; 
end // end TST1W01

// application code
DataItem TST1WAPP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// application prefix
DataItem TST1WAPX char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MN0S READ ERROR RETURN CODE
DataItem TST1WCRC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ERROR MSG
DataItem TST1WERR char(51)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// EZERT8 ERROR CODEVALUE
DataItem TST1WEZR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special character (& or #)
DataItem TST1WGCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group code
DataItem TST1WGCP char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level
DataItem TST1WGLV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// application prefix
DataItem TST1WGPX char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group application
DataItem TST1WGRP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// HYPHEN LITERAL
DataItem TST1WHYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record
DataItem TST1WLNG char(100)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MN1REC.MN1KEY VALUE
DataItem TST1WMKY char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ERROR MSG WORK AREA
DataItem TST1WMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MN1KEY VALUE BEFORE READ
DataItem TST1WSKY char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

