package sl05;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SL05 ****
// This application allows a user to inquire and maintain rows
// in a DB2 table.
// 
// There are two different screens that may be displayed.
// 
// The first screen displayed to the user allows specification
// of the search criteria to be used to list the rows in the
// table.  The list is displayed and the user may page backward
// and forward to view the information.
// 
// When a line is selected on the screen, the second screen is
// displayed, showing all information for that table row.
// 
// If the user has sufficient security to change the data, the
// modifiable fields remain unprotected.  Otherwise, they are
// protected from modification by the user.
// 
// If any data is modified, it is verified and, if complete and
// correct, the table row is updated with the changed data.
// The screen is redisplayed to the user, indicating that the
// update is completed.
// 
// If more that one line was selected on the first screen, the
// next selection is displayed when the user presses the ENTER
// key without making any change to the displayed data.
// 
// When the user exits the second screen (either via PF3 key or
// after all selections have been viewed) the first screen is
// redisplayed, indicating the selections that were viewed.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      08/15/93  hchapm  New application.
// *********************
Program SL05 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC2REC PC2REC; // record
  SL05W00 SL05W00; // record
  SL05W01 SL05W01; // record
  SL4REC SL4REC; // record
  SL5REC SL5REC; // record
  SL6REC SL6REC; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SYCREC SYCREC; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use XARTBL; // table
  use YLSTBL; // table
  use SL05M.SL05M001,  // forms
      SL05M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SL05M001 initial; /* M001 input/output*/
    set SL05W00 empty; /* Working storage*/
    set SL05W01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/

    SL05W00.SL05W-FORMAT-MAP-SW = "Y"; /* Format the map switch*/
    SL05W00.SL05W-RQT-DATA-SW = "N"; /* Request for data switch*/
    SL05W00.SL05W-SIZE-DETAIL-SW = "N";

     /* ------------------------------------------------------------*/
     /* If all key info is passed in SLWREC, use as initial key*/
     /* ------------------------------------------------------------*/

    if (SLWREC.XAR-AREA-CD > " "
     && SLWREC.SL-ZONE-CD > " "
     && SLWREC.SL-LOC-CD > " ")
      SL05W00.SL05W-RQT-DATA-SW = "Y";
    end

    if (SLWREC.SL-LOC-CD > " ") /* area code is passed*/
      SL05M001.SL05M-SL-LOC-CD = SLWREC.SL-LOC-CD; /* area code*/
    end


    if (SLWREC.SL-ZONE-CD > " ") /* zone code is passed*/
      SL05M001.SL05M-SL-ZONE-CD = SLWREC.SL-ZONE-CD; /* zone code*/
    end


    if (SLWREC.XAR-AREA-CD > " ") /* area code is passed*/
      SL05M001.SL05M-XAR-AREA-CD = SLWREC.XAR-AREA-CD; /* area code*/
    end


    if (SLWREC.XWHCD > " ") /* if whse code is passed in slwrec*/
      SL05M001.SL05M-XWH-WHSE-CD = SLWREC.XWHCD; /* move it to work area*/
    else
      if (COMMAREA.XWHCD > " ") /* if whse code is passed in commarea*/
        SL05M001.SL05M-XWH-WHSE-CD = COMMAREA.XWHCD; /* move towrk area*/
      end
    end


    SL05W00.SL05W-GPC-CD = "* ";


    SL05W00.SL05W-STY-NBR = "*     ";


    SL05W00.SL05W-COLR-CD-ID = "*  ";


    SL05W00.SL05W-DIM-CD = "* ";

    SL05W00.SL05W-QUAL-CD = "* ";

    SL05W00.SL05W-IN-SEG-CD = "*  ";

    SL05W00.SL05W-ENGR-DIFF-CD = "*  ";

    SL05W00.SL05W-CLASS-CD = "*  ";

    SL05W00.SL05W-UOM-CD = "* ";

    SL05W00.SL05W-OWN-GRP-CD = "* ";

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SL05001; /* Converse the main process*/


    SL05001: SL05001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SL05001; /* Converse the main process*/


  end // end main
end // end SL05

// Obtain the data to display
Function SL05-100()
   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/

  if (SL05W00.SL05W-RQT-DATA-SW == "Y") /* Data was not requested*/

    SL05-120(); /* Purge any temporary storage*/

  end

  SL05W01.SL05W-XWH-WHSE-CD = SL05M001.SL05M-XWH-WHSE-CD; /* whse cd*/
  SL05W01.SL05W-XAR-AREA-CD = SL05M001.SL05M-XAR-AREA-CD; /* area cd*/
  SL05W01.SL05W-SL-LOC-CD = SL05M001.SL05M-SL-LOC-CD; /* location*/
  SL05W01.SL05W-SL-ZONE-CD = SL05M001.SL05M-SL-ZONE-CD; /* zone cd*/

   /* ------------------------------------------------------------*/
   /* find warehouse name*/
   /* ------------------------------------------------------------*/
  if (SL05W01.SL05W-XWH-WHSE-CD in XWHTBL.XWHCD)
    SL05W01.SL05W-XWH-WHSE-NM = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end

   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SL05W00.SL05W-RQT-DATA-SW != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  SL05W00.XXXTSLEN = 1040; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO == 0) /* No message to display*/
    SL05W00.XXXTSPAG = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* find location status code and description*/
   /* ------------------------------------------------------------*/

  SL5REC.XARCD = SL05M001.SL05M-XAR-AREA-CD; /* area code*/
  SL5REC.SL5LOCTN = SL05M001.SL05M-SL-LOC-CD; /* location*/
  SL5REC.SL4ZONE = SL05M001.SL05M-SL-ZONE-CD; /* zone code*/

  SL05W00.SL05W-LOC-STATUS-INFO = " ";
  SL05-130(); /* find status from header information*/

  SL05W00.SL05W-LOC-STATUS = SL5REC.YLSCD;

  if (SL5REC.YLSCD in YLSTBL.YLSCD)

    SL05W00.SL05W-LOC-STATUS-ABRV = YLSTBL.YLSABRV[sysVar.arrayIndex];

  else

    SL05W00.SL05W-LOC-STATUS-ABRV = " ";

  end
  SL05W01.SL05W-YLS-LOC-STAT-INFO = SL05W00.SL05W-LOC-STATUS-INFO;

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  SL05-140(); /* Select set and open cursor*/

  SL05W00.SL05W-ACCUM-LOC-OH-QTY = 0; /* initialize accumulators*/
  SL05W00.SL05W-ACCUM-LOC-RSRV-QTY = 0;
  SL05W00.SL05W-ACCUM-LOC-SAS-QTY = 0;

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  SL05W00.SL05W-END-CURSOR-SW = "N"; /* End of cursor switch*/
  SL05W00.SL05W-FIRST-FETCH = "Y"; /* first fetch switch*/
  SL05W00.SL05W-MAP-FIELD-INX = 1; /* Display line index*/
  while (SL05W00.SL05W-END-CURSOR-SW == "N") /* Until end of cursor*/

    SL05-150(); /* Fetch next row in the cursor*/

    /* ------------------------------------------------------------*/
     /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/

    if (SL05W00.SL05W-END-CURSOR-SW == "N") /* Not end of cursor*/
      SL05-160(); /* Save data in display storage*/
    end
  end

    /* process last row*/

  if (SL05W00.TA5TSQIX > 0 /* Not the first page*/
   && SL05W00.SL05W-MAP-FIELD-INX == 1) /* and first line on page*/

    SL05W01.SL05W-XWH-WHSE-CD = SL6REC.XWHCD; /* warehouse code*/
    SL05W01.SL05W-XAR-AREA-CD = SL6REC.XARCD; /* area code*/
    SL05W01.SL05W-SL-ZONE-CD = SL6REC.SL4ZONE; /* zone code*/
    SL05W01.SL05W-SL-LOC-CD = SL6REC.SL5LOCTN; /* location*/
    SL05W01.SL05W-XWH-WHSE-NM = SL05M001.SL05M-XWH-WHSE-NM;
    SL05W01.SL05W-YLS-LOC-STAT-INFO = SL05W00.SL05W-LOC-STATUS-INFO;

  end
  if (SL05W00.SL05W-SIZE-DETAIL-SW == "N")
    if (SL05W00.SL05W-HOLD-UNPCS != SL05W01.SL05W-SY-UNITS-PER-CASE)
      SL05W01.SL05W-SY-UNITS-PER-CASE = "-1";
    end

   /* move accumulated fields to map storage*/

    SL05W01.SL05W-SL-SY-LOC-RSRV-QTY[SL05W-MAP-FIELD-INX] = SL05W00.SL05W-ACCUM-LOC-RSRV-QTY;
    SL05W01.SL05W-SL-SY-LOC-OH-QTY[SL05W-MAP-FIELD-INX] = SL05W00.SL05W-ACCUM-LOC-OH-QTY;
    SL05W01.SL05W-SL-SY-LOC-SAS-QTY[SL05W-MAP-FIELD-INX] = SL05W00.SL05W-ACCUM-LOC-SAS-QTY;

   /* increment index to next map row*/

    SL05W00.SL05W-MAP-FIELD-INX = SL05W00.SL05W-MAP-FIELD-INX + 1;

  end

  SL05-170();
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  SL05-180(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (SL05W00.TA5TSQIX == 0) /* No pages formatted*/

    SLWREC.XXXLOCID = "100"; /* Module identification*/
    SLWREC.SLWMSGNO = 44; /* No data was found to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SL05W00.SL05W-RQT-DATA-SW = "N"; /* Request for data switch*/


end // end SL05-100

// Purge any temporary storage
Function SL05-120()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SL05W01 empty; /* M001 display storage*/

  SL05W00.SL05W-UPD-PAGE-SW = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SL05W00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SL05W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "110"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL05-120

// Select set and open cursor
Function SL05-130()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set SL5REC empty; /* Clear row storage area*/

  SL5REC.XWHCD = SL05W01.SL05W-XWH-WHSE-CD; /* warehouse code*/
  SL5REC.XARCD = SL05W01.SL05W-XAR-AREA-CD; /* area code*/
  SL5REC.SL4ZONE = SL05W01.SL05W-SL-ZONE-CD; /* zone code*/
  SL5REC.SL5LOCTN = SL05W01.SL05W-SL-LOC-CD; /* location*/

  try
    call "IO1490" ("S ", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "161"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(011); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYLOC01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL6REC.SL6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL05-130

// Select set and open cursor
Function SL05-140()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table depending*/
   /* on sl05w-size-detail-sw = 'y' or 'n'*/
   /* ------------------------------------------------------------*/

  set SL6REC empty; /* Clear row storage area*/

  SL6REC.XWHCD = SL05W01.SL05W-XWH-WHSE-CD; /* warehouse code*/
  SL6REC.XARCD = SL05W01.SL05W-XAR-AREA-CD; /* area code*/
  SL6REC.SL5LOCTN = SL05W01.SL05W-SL-LOC-CD; /* location*/
  SL6REC.SL4ZONE = SL05W01.SL05W-SL-ZONE-CD;
  SL6REC.XGPCD = SL05W00.SL05W-GPC-CD;
  SL6REC.SY1STNBR = SL05W00.SL05W-STY-NBR;
  SL6REC.SY2CLRID = SL05W00.SL05W-COLR-CD-ID;
  SL6REC.XDMCD = SL05W00.SL05W-DIM-CD;
  SL6REC.XQACD = SL05W00.SL05W-QUAL-CD;
  SL6REC.PC2INSEG = SL05W00.SL05W-IN-SEG-CD;
  SL6REC.XEGCD = SL05W00.SL05W-ENGR-DIFF-CD;
  SL6REC.XSLCD = SL05W00.SL05W-CLASS-CD;
  SL6REC.XUMCD = SL05W00.SL05W-UOM-CD;
  SL6REC.XOWCD = SL05W00.SL05W-OWN-GRP-CD;

  try
    call "IO1470" ("SE", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "140"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(011); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYLOC01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL6REC.SL6KEY; /* Table key*/
  TA1REC.TA1MAPNO = "M001"; /* map number*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL05-140

// Fetch next row in the cursor
Function SL05-150()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1470" ("NE", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

   /* Indicate end of cursor*/
      SL05W00.SL05W-END-CURSOR-SW = "Y";
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "150"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYLOC01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL6REC.SL6KEY; /* Table key*/
  TA1REC.TA1MAPNO = "M001"; /* map number*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL05-150

// Save data in display storage
Function SL05-160()
   /* ------------------------------------------------------------*/
   /* If first line on subsequent page, save heading information.*/
   /* ------------------------------------------------------------*/

  if (SL05W00.TA5TSQIX > 0 /* Not the first page*/
   && SL05W00.SL05W-MAP-FIELD-INX == 1) /* and first line on page*/

    SL05W01.SL05W-XWH-WHSE-CD = SL6REC.XWHCD; /* warehouse code*/
    SL05W01.SL05W-XAR-AREA-CD = SL6REC.XARCD; /* area code*/
    SL05W01.SL05W-SL-ZONE-CD = SL6REC.SL4ZONE; /* zone code*/
    SL05W01.SL05W-SL-LOC-CD = SL6REC.SL5LOCTN; /* location*/
    SL05W01.SL05W-XWH-WHSE-NM = SL05M001.SL05M-XWH-WHSE-NM;
    SL05W01.SL05W-YLS-LOC-STAT-INFO = SL05W00.SL05W-LOC-STATUS-INFO;

  end

   /* ------------------------------------------------------------*/
   /* save product fields to test for break*/
   /* ------------------------------------------------------------*/

  if (SL05W00.SL05W-SIZE-DETAIL-SW == "Y")
    SL05-164(); /* process detail*/
    SL05W00.SL05W-FIRST-FETCH = "N";
    return; /* skip summary logic*/
  end

  if (SL05W00.SL05W-FIRST-FETCH == "Y")

    SL05W01.SL05W-XGP-GPC-CD[SL05W-MAP-FIELD-INX] = SL6REC.XGPCD; /* gpc*/
    SL05W01.SL05W-SY-STY-NBR[SL05W-MAP-FIELD-INX] = SL6REC.SY1STNBR; /* style nbr*/
    SL05W01.SL05W-SY-COLR-CD-ID[SL05W-MAP-FIELD-INX] = SL6REC.SY2CLRID; /* color code*/
    SL05W01.SL05W-XDM-DIM-CD[SL05W-MAP-FIELD-INX] = SL6REC.XDMCD; /* dimension*/
    SL05W01.SL05W-XQA-QUAL-CD[SL05W-MAP-FIELD-INX] = SL6REC.XQACD; /* quality code*/
    SL05W01.SL05W-PC-CU-IN-SEG-CD[SL05W-MAP-FIELD-INX] = SL6REC.PC2INSEG; /* inventory*/
    SL05W01.SL05W-XEG-ENGR-DIFF-CD[SL05W-MAP-FIELD-INX] = SL6REC.XEGCD; /* engr diff*/
    SL05W01.SL05W-XSL-CLASS-CD[SL05W-MAP-FIELD-INX] = SL6REC.XSLCD; /* class*/
    SL05W01.SL05W-XUM-UOM-CD[SL05W-MAP-FIELD-INX] = SL6REC.XUMCD; /* unit meas*/
    SL05W01.SL05W-XOW-OWN-GRP-CD[SL05W-MAP-FIELD-INX] = SL6REC.XOWCD; /* own grp*/
    SL05W01.SL05W-SL-RLOG-PLT-NBR[SL05W-MAP-FIELD-INX] = SL6REC.SL2PALET;
    SL05W01.SL05W-SIZE[SL05W-MAP-FIELD-INX] = "    *";

    SL05W00.SL05W-HOLD-UNPCS = SL6REC.SY1UNPCS;
    SL05W01.SL05W-SY-UNITS-PER-CASE = SL6REC.SY1UNPCS;

    SL05W00.SL05W-FIRST-FETCH = "N";

  end

   /* ------------------------------------------------------------*/
   /* test for break in product fields*/
   /* ------------------------------------------------------------*/

  if (SL6REC.XGPCD != 
  SL05W01.SL05W-XGP-GPC-CD[SL05W-MAP-FIELD-INX]
   || SL6REC.SY1STNBR != 
  SL05W01.SL05W-SY-STY-NBR[SL05W-MAP-FIELD-INX]
   || SL6REC.SY2CLRID != 
  SL05W01.SL05W-SY-COLR-CD-ID[SL05W-MAP-FIELD-INX]
   || SL6REC.XDMCD != 
  SL05W01.SL05W-XDM-DIM-CD[SL05W-MAP-FIELD-INX]
   || SL6REC.XQACD != 
  SL05W01.SL05W-XQA-QUAL-CD[SL05W-MAP-FIELD-INX]
   || SL6REC.PC2INSEG != 
  SL05W01.SL05W-PC-CU-IN-SEG-CD[SL05W-MAP-FIELD-INX]
   || SL6REC.XEGCD != 
  SL05W01.SL05W-XEG-ENGR-DIFF-CD[SL05W-MAP-FIELD-INX]
   || SL6REC.XOWCD != 
  SL05W01.SL05W-XOW-OWN-GRP-CD[SL05W-MAP-FIELD-INX])

    SL05-163(); /* move line to map storage*/

  end

   /* for each row, accumulate fields and move unit per case*/

  SL05W00.SL05W-ACCUM-LOC-SAS-QTY = SL05W00.SL05W-ACCUM-LOC-SAS-QTY +   SL6REC.SL6STASD;
  SL05W00.SL05W-ACCUM-LOC-OH-QTY = SL05W00.SL05W-ACCUM-LOC-OH-QTY +   SL6REC.SL6ONHND;
  SL05W00.SL05W-ACCUM-LOC-RSRV-QTY = SL05W00.SL05W-ACCUM-LOC-RSRV-QTY +   SL6REC.SL6PKRSV;

  SL05W01.SL05W-SY-UNITS-PER-CASE[SL05W-MAP-FIELD-INX] = SL6REC.SY1UNPCS;
end // end SL05-160

Function SL05-163()
   /* ------------------------------------------------------------*/
   /* process data when key fields change*/
   /* ------------------------------------------------------------*/

   /* if more than one unit per case, display as wildcard*/

  if (SL05W00.SL05W-HOLD-UNPCS != SL05W01.SL05W-SY-UNITS-PER-CASE)
    SL05W01.SL05W-SY-UNITS-PER-CASE = "-1";
  end

   /* move accumulated fields to map storage*/

  SL05W01.SL05W-SL-SY-LOC-RSRV-QTY[SL05W-MAP-FIELD-INX] = SL05W00.SL05W-ACCUM-LOC-RSRV-QTY;
  SL05W01.SL05W-SL-SY-LOC-OH-QTY[SL05W-MAP-FIELD-INX] = SL05W00.SL05W-ACCUM-LOC-OH-QTY;
  SL05W01.SL05W-SL-SY-LOC-SAS-QTY[SL05W-MAP-FIELD-INX] = SL05W00.SL05W-ACCUM-LOC-SAS-QTY;

   /* increment index to next map row*/

  SL05W00.SL05W-MAP-FIELD-INX = SL05W00.SL05W-MAP-FIELD-INX + 1;
  if (SL05W00.SL05W-MAP-FIELD-INX > 15)
    SL05-170();
    SL05W00.SL05W-MAP-FIELD-INX = 1;
    SL05W01.SL05W-XWH-WHSE-CD = SL6REC.XWHCD; /* warehouse code*/
    SL05W01.SL05W-XAR-AREA-CD = SL6REC.XARCD; /* area code*/
    SL05W01.SL05W-SL-ZONE-CD = SL6REC.SL4ZONE; /* zone code*/
    SL05W01.SL05W-SL-LOC-CD = SL6REC.SL5LOCTN; /* location*/
    SL05W01.SL05W-XWH-WHSE-NM = SL05M001.SL05M-XWH-WHSE-NM;
    SL05W01.SL05W-YLS-LOC-STAT-INFO = SL05W00.SL05W-LOC-STATUS-INFO;
  end

  SL05W00.SL05W-ACCUM-LOC-SAS-QTY = 0;
  SL05W00.SL05W-ACCUM-LOC-OH-QTY = 0;
  SL05W00.SL05W-ACCUM-LOC-RSRV-QTY = 0;

   /* move current vsyloc01 row to storage*/

  SL05W01.SL05W-XGP-GPC-CD[SL05W-MAP-FIELD-INX] = SL6REC.XGPCD; /* gpc*/
  SL05W01.SL05W-SY-STY-NBR[SL05W-MAP-FIELD-INX] = SL6REC.SY1STNBR; /* style nbr*/
  SL05W01.SL05W-SY-COLR-CD-ID[SL05W-MAP-FIELD-INX] = SL6REC.SY2CLRID; /* color code*/
  SL05W01.SL05W-XDM-DIM-CD[SL05W-MAP-FIELD-INX] = SL6REC.XDMCD; /* dimension*/
  SL05W01.SL05W-XQA-QUAL-CD[SL05W-MAP-FIELD-INX] = SL6REC.XQACD; /* quality code*/
  SL05W01.SL05W-PC-CU-IN-SEG-CD[SL05W-MAP-FIELD-INX] = SL6REC.PC2INSEG; /* inventory*/
  SL05W01.SL05W-XEG-ENGR-DIFF-CD[SL05W-MAP-FIELD-INX] = SL6REC.XEGCD; /* engr diff*/
  SL05W01.SL05W-XUM-UOM-CD[SL05W-MAP-FIELD-INX] = SL6REC.XUMCD; /* unit meas*/
  SL05W01.SL05W-XSL-CLASS-CD[SL05W-MAP-FIELD-INX] = SL6REC.XSLCD; /* class*/
  SL05W01.SL05W-XOW-OWN-GRP-CD[SL05W-MAP-FIELD-INX] = SL6REC.XOWCD; /* own grp*/
  SL05W01.SL05W-SL-RLOG-PLT-NBR[SL05W-MAP-FIELD-INX] = SL6REC.SL2PALET;
  SL05W01.SL05W-SIZE[SL05W-MAP-FIELD-INX] = "    *";

  SL05W00.SL05W-HOLD-UNPCS = SL6REC.SY1UNPCS;
  SL05W01.SL05W-SY-UNITS-PER-CASE = SL6REC.SY1UNPCS;

end // end SL05-163

Function SL05-164()
   /* *--------------------------------------------------------------------*/
   /* * Process detail screen (no summary logic)*/
   /* *--------------------------------------------------------------------*/
  if (SL05W00.SL05W-MAP-FIELD-INX > 15)
    SL05-170();
    SL05W00.SL05W-MAP-FIELD-INX = 1;
    SL05W01.SL05W-XWH-WHSE-CD = SL6REC.XWHCD; /* warehouse code*/
    SL05W01.SL05W-XAR-AREA-CD = SL6REC.XARCD; /* area code*/
    SL05W01.SL05W-SL-ZONE-CD = SL6REC.SL4ZONE; /* zone code*/
    SL05W01.SL05W-SL-LOC-CD = SL6REC.SL5LOCTN; /* location*/
    SL05W01.SL05W-XWH-WHSE-NM = SL05M001.SL05M-XWH-WHSE-NM;
    SL05W01.SL05W-YLS-LOC-STAT-INFO = SL05W00.SL05W-LOC-STATUS-INFO;
  end

  SL05W01.SL05W-XGP-GPC-CD[SL05W-MAP-FIELD-INX] = SL6REC.XGPCD; /* gpc*/
  SL05W01.SL05W-SY-STY-NBR[SL05W-MAP-FIELD-INX] = SL6REC.SY1STNBR; /* style nbr*/
  SL05W01.SL05W-SY-COLR-CD-ID[SL05W-MAP-FIELD-INX] = SL6REC.SY2CLRID; /* color code*/
  SL05W01.SL05W-XDM-DIM-CD[SL05W-MAP-FIELD-INX] = SL6REC.XDMCD; /* dimension*/
  SL05W01.SL05W-XQA-QUAL-CD[SL05W-MAP-FIELD-INX] = SL6REC.XQACD; /* quality code*/
  SL05W01.SL05W-PC-CU-IN-SEG-CD[SL05W-MAP-FIELD-INX] = SL6REC.PC2INSEG; /* inventory*/
  SL05W01.SL05W-XEG-ENGR-DIFF-CD[SL05W-MAP-FIELD-INX] = SL6REC.XEGCD; /* engr diff*/
  SL05W01.SL05W-XUM-UOM-CD[SL05W-MAP-FIELD-INX] = SL6REC.XUMCD; /* unit meas*/
  SL05W01.SL05W-XSL-CLASS-CD[SL05W-MAP-FIELD-INX] = SL6REC.XSLCD; /* class*/
  SL05W01.SL05W-XOW-OWN-GRP-CD[SL05W-MAP-FIELD-INX] = SL6REC.XOWCD; /* own grp*/
  SL05W01.SL05W-SL-RLOG-PLT-NBR[SL05W-MAP-FIELD-INX] = SL6REC.SL2PALET;
  SL05W01.SL05W-SY-UNITS-PER-CASE = SL6REC.SY1UNPCS;
  SL05W00.SL05W-HOLD-SIZE = SL6REC.SY5SZID;

  SL05-1645(); /* convert to external size*/

  if (SYPREC.SYPRC == 0)
    SL05W01.SL05W-SIZE[SL05W-MAP-FIELD-INX] = SYPREC.SY4IDDSC;
  else
    SL05W01.SL05W-SIZE[SL05W-MAP-FIELD-INX] = "*NF*";
  end

  SL05W01.SL05W-SL-SY-LOC-SAS-QTY[SL05W-MAP-FIELD-INX] = SL6REC.SL6STASD;
  SL05W01.SL05W-SL-SY-LOC-OH-QTY[SL05W-MAP-FIELD-INX] = SL6REC.SL6ONHND;
  SL05W01.SL05W-SL-SY-LOC-RSRV-QTY[SL05W-MAP-FIELD-INX] = SL6REC.SL6PKRSV;

  SL05W00.SL05W-MAP-FIELD-INX = SL05W00.SL05W-MAP-FIELD-INX + 1;
end // end SL05-164

// obtain external size
Function SL05-1645()
   /* ************************************************************/
   /* *** obtain external size                                ****/
   /* ************************************************************/

  set SYPREC empty;

  SYPREC.SYPFC = "IE"; /* external to internal translate*/
  SYPREC.SYPCMPSW = "C"; /* indicate compressed format*/

  SYPREC.XGPCD = SL05W01.SL05W-XGP-GPC-CD[SL05W-MAP-FIELD-INX];
  SYPREC.SY1STNBR = SL05W01.SL05W-SY-STY-NBR[SL05W-MAP-FIELD-INX];
  SYPREC.SY2CLRID = SL05W01.SL05W-SY-COLR-CD-ID[SL05W-MAP-FIELD-INX];
  SYPREC.XDMCD = SL05W01.SL05W-XDM-DIM-CD[SL05W-MAP-FIELD-INX];
  SYPREC.XQACD = SL05W01.SL05W-XQA-QUAL-CD[SL05W-MAP-FIELD-INX];
  SYPREC.SY5SZID[1] = SL05W00.SL05W-HOLD-SIZE;


  TA1REC.TA1LOCAT[2] = "SL05162 ";
  TA1REC.TA1MAP = "SL05M001";

  call "SY1190" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes}; /* convert internal size*/

end // end SL05-1645

// Add page to temporary storage
Function SL05-170()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  SL05W01.XXXTSLEN = SL05W00.XXXTSLEN; /* Temporary storage   lengt;*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (SL05W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set SL05W01 empty; /* M001 display storage*/

    SL05W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "170"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL05-170

// Close selected set cursor
Function SL05-180()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1470" ("CE", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "180"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYLOC01"; /* Table view name*/
  TA1REC.TA1MAPNO = "M001"; /* map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL05-180

// Format and converse the map
Function SL05-200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SL05W00.SL05W-RQT-DATA-SW == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SL05W00.SL05W-FORMAT-MAP-SW == "Y") /* Map must be formatted*/
      SL05-210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SL05M001.SL05M-XXX-CURR-DT = VGVar.currentShortGregorianDate; /* Current date*/

  SL05M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SL05M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SL05M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SL05M001.SL05M-XXX-MODID = SLWREC.XXXLOCID; /* Module ID*/

    set SL05M001 alarm; /* Indicate sound alarm*/

  end

  converse SL05M001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SL05M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SL05M001.CAITEM; /* Application data*/


end // end SL05-200

// Format the display data
Function SL05-210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SL05M001 initial; /* map input/output area*/

  SL05W00.SL05W-FORMAT-MAP-SW = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (SL05W00.TA5TSQIX > 0) /* Pages were formatted*/

    if (SL05W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (SL05W00.SL05W-UPD-PAGE-SW == "Y") /* Current page was changed*/

        SL05S01(); /* Update temporary storage page*/

        SL05W00.SL05W-UPD-PAGE-SW = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (SL05W00.XXXTSPAG > SL05W00.TA5TSQIX) /* Desired greater highest*/
        SL05W00.XXXTSPAG = SL05W00.TA5TSQIX; /* Default to highest*/
      end

      SL05S02(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set SL05M001.XXXLITPG skip; /* "PAGE" literal*/
    SL05M001.XXXTSPAG = SL05W00.XXXTSPAG; /* Current page*/
    set SL05M001.XXXLITOF skip; /* "OF" literal*/
    SL05M001.TA5TSQIX = SL05W00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  SL05M001.SL05M-XWH-WHSE-CD = SL05W01.SL05W-XWH-WHSE-CD; /* warehouse code*/

  SL05M001.SL05M-XWH-WHSE-NM = SL05W01.SL05W-XWH-WHSE-NM; /* warehouse code*/

  SL05M001.SL05M-XAR-AREA-CD = SL05W01.SL05W-XAR-AREA-CD;

  SL05M001.SL05M-SL-ZONE-CD = SL05W01.SL05W-SL-ZONE-CD;

  SL05M001.SL05M-SL-LOC-CD = SL05W01.SL05W-SL-LOC-CD;

  SL05M001.SL05M-YLS-LOC-STAT-INFO = SL05W01.SL05W-YLS-LOC-STAT-INFO;


   /* set cursor at empty fields*/

  if (SL05M001.SL05M-XAR-AREA-CD == " ")
    set SL05M001.SL05M-XAR-AREA-CD cursor;
  else
    if (SL05M001.SL05M-SL-ZONE-CD == " ")
      set SL05M001.SL05M-SL-ZONE-CD cursor;
    else
      if (SL05M001.SL05M-SL-LOC-CD == " ")
        set SL05M001.SL05M-SL-LOC-CD cursor;
      end
    end
  end
  SL05W00.SL05W-MAP-FIELD-INX = 1; /* Initialize line index*/

  while (SL05W00.SL05W-MAP-FIELD-INX <= 15 /* Until screen is full*/
   && SL05W01.SL05W-XGP-GPC-CD[SL05W-MAP-FIELD-INX] > " ")

    if (SL05W00.SL05W-MAP-FIELD-INX == 1) /* First select field*/

      set SL05M001.SL05M-SELECT[SL05W-MAP-FIELD-INX] cursor, normal;
    else
      set SL05M001.SL05M-SELECT[SL05W-MAP-FIELD-INX] normal; /* Unprotect*/

    end

   /* --------------------------------------------------------------------*/
   /* move display rows from working storage*/
   /* --------------------------------------------------------------------*/

    /* selection column*/
    SL05M001.SL05M-SELECT[SL05W-MAP-FIELD-INX] = SL05W01.SL05W-SELECT[SL05W-MAP-FIELD-INX];

    SL05M001.SL05M-XGP-GPC-CD[SL05W-MAP-FIELD-INX] = SL05W01.SL05W-XGP-GPC-CD[SL05W-MAP-FIELD-INX]; /* GPC code*/

    SL05M001.SL05M-SY-STY-NBR[SL05W-MAP-FIELD-INX] = SL05W01.SL05W-SY-STY-NBR[SL05W-MAP-FIELD-INX]; /* Style number*/

    SL05M001.SL05M-SY-COLR-CD-ID[SL05W-MAP-FIELD-INX] = SL05W01.SL05W-SY-COLR-CD-ID[SL05W-MAP-FIELD-INX]; /* color code*/

    SL05M001.SL05M-XDM-DIM-CD[SL05W-MAP-FIELD-INX] = SL05W01.SL05W-XDM-DIM-CD[SL05W-MAP-FIELD-INX]; /* / * dimension code*/

    SL05M001.SL05M-XQA-QUAL-CD[SL05W-MAP-FIELD-INX] = SL05W01.SL05W-XQA-QUAL-CD[SL05W-MAP-FIELD-INX]; /* quality code*/

    SL05M001.SL05M-PC-CU-IN-SEG-CD[SL05W-MAP-FIELD-INX] = SL05W01.SL05W-PC-CU-IN-SEG-CD[SL05W-MAP-FIELD-INX];

    SL05M001.SL05M-XEG-ENGR-DIFF-CD[SL05W-MAP-FIELD-INX] = SL05W01.SL05W-XEG-ENGR-DIFF-CD[SL05W-MAP-FIELD-INX];

    SL05M001.SL05M-XSL-CLASS-CD[SL05W-MAP-FIELD-INX] = SL05W01.SL05W-XSL-CLASS-CD[SL05W-MAP-FIELD-INX];

    SL05M001.SL05M-XUM-UOM-CD[SL05W-MAP-FIELD-INX] = SL05W01.SL05W-XUM-UOM-CD[SL05W-MAP-FIELD-INX];

    SL05M001.SL05M-XOW-OWN-GRP-CD[SL05W-MAP-FIELD-INX] = SL05W01.SL05W-XOW-OWN-GRP-CD[SL05W-MAP-FIELD-INX];

    SL05M001.SL05M-SIZE[SL05W-MAP-FIELD-INX] = SL05W01.SL05W-SIZE[SL05W-MAP-FIELD-INX];

    SL05M001.SL05M-SY-UNITS-PER-CASE[SL05W-MAP-FIELD-INX] = SL05W01.SL05W-SY-UNITS-PER-CASE[SL05W-MAP-FIELD-INX];

    SL05M001.SL05M-SL-RLOG-PLT-NBR[SL05W-MAP-FIELD-INX] = SL05W01.SL05W-SL-RLOG-PLT-NBR[SL05W-MAP-FIELD-INX];

    SL05M001.SL05M-SL-SY-LOC-OH-QTY[SL05W-MAP-FIELD-INX] = SL05W01.SL05W-SL-SY-LOC-OH-QTY[SL05W-MAP-FIELD-INX];

    SL05M001.SL05M-SL-SY-LOC-RSRV-QTY[SL05W-MAP-FIELD-INX] = SL05W01.SL05W-SL-SY-LOC-RSRV-QTY[SL05W-MAP-FIELD-INX];

    SL05M001.SL05M-SL-SY-LOC-SAS-QTY[SL05W-MAP-FIELD-INX] = SL05W01.SL05W-SL-SY-LOC-SAS-QTY[SL05W-MAP-FIELD-INX];

    SL05W00.SL05W-MAP-FIELD-INX = SL05W00.SL05W-MAP-FIELD-INX + 1;

  end


end // end SL05-210

// Check attention identifier
Function SL05-300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (SL05W00.SL05W-RQT-DATA-SW == "Y") /* Request for data*/
      set SL05W01 empty; /* M001 display storage*/
    end

    SL05W00.SL05W-FORMAT-MAP-SW = "Y"; /* Format the map switch*/
    SL05W00.SL05W-RQT-DATA-SW = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SL05M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SL05-120(); /* Purge temporary storage*/

      XSSL001(); /* Exit to another application*/

      set SL05M001.CATOAP cursor, bold; /* Highlight*/

    else

      SLWREC.XXXLOCID = "300"; /* Module identification*/
      converseLib.validationFailed(258); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SL05M001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SL0A"; /* TO application*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* TO application*/
    end

    SL05-120(); /* Purge temporary storage*/

    XSSL001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pf6   /* and PF6 was  pressed*/
   || converseVar.eventKey is pf12  /* and PF12 was  pressed*/
   || converseVar.eventKey is pf13  /* and PF13 was  pressed*/
   || converseVar.eventKey is pf14  /* and PF14 was  pressed*/
   || converseVar.eventKey is pf15  /* and PF15 was  pressed*/
   || converseVar.eventKey is pf17  /* and PF17 was  pressed*/
   || converseVar.eventKey is pf18  /* and PF18 was  pressed*/
   || converseVar.eventKey is enter /* ENTER was not pressed*/
   || converseVar.eventKey is pf7   /* and PF7 was  pressed*/
   || converseVar.eventKey is pf8)  /* and PF8 was  pressed*/

    /* next sentence*/

  else

    SLWREC.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SL05-300

// Reset highlighted fields
Function SL05-400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SL05M001.SL05M-XWH-WHSE-CD initialAttributes; /* warehouse code*/
  set SL05M001.SL05M-XAR-AREA-CD initialAttributes; /* area code*/
  set SL05M001.SL05M-SL-ZONE-CD initialAttributes; /* zone code*/
  set SL05M001.SL05M-SL-LOC-CD initialAttributes; /* location code*/

  SL05W00.SL05W-MAP-FIELD-INX = 1; /* Initialize line index*/

  while (SL05W00.SL05W-MAP-FIELD-INX <= 15 /* Until end of lines*/
   && SL05M001.SL05M-XGP-GPC-CD[SL05W-MAP-FIELD-INX] > " ")
                                  /* or end of display*/

    set SL05M001.SL05M-SELECT[SL05W-MAP-FIELD-INX] normal;
                                  /* reset select flag*/

    SL05W00.SL05W-MAP-FIELD-INX = SL05W00.SL05W-MAP-FIELD-INX + 1;
                                  /* Increment line index*/

  end

  set SL05M001.CATOAP initialAttributes; /* TO application*/
  set SL05M001.CAITEM initialAttributes; /* Application data*/

   /* ----------------------------------------------------------------------*/
    /* pop-up window option -- if not selected, return to previous process*/
   /* ----------------------------------------------------------------------*/

  if (SL05M001.SL05M-XWH-WHSE-CD == "?")

    if (converseVar.eventKey not enter) /* enter was not pressed*/

      SLWREC.XXXLOCID = "400"; /* module identification*/
      converseLib.validationFailed(4); /* pkkey invalid*/

      exit stack; /* exit to display map*/

    end

  else

    return; /* return to previous processing*/

  end

  SL05-410();

   /* ----------------------------------------------------------------------*/
   /* clear screen for pop-ups, then display map*/
   /* ----------------------------------------------------------------------*/

  converseLib.clearScreen();
   /* clear screen before display*/

  exit stack; /* exit to display map*/
end // end SL05-400

// Pop-up window lists
Function SL05-410()
   /* ------------------------------------------------------------*/
   /* warehouse pop-up window*/
   /* ------------------------------------------------------------*/

  if (SL05M001.SL05M-XWH-WHSE-CD == "?") /* Warehouse list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  WAREHOUSE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SL05M001.SL05M-XWH-WHSE-CD = SL05W01.SL05W-XWH-WHSE-CD;
    else
      SL05M001.SL05M-XWH-WHSE-CD = XWHTBL.XWHCD[XX0XWPIX];
      SL05W01.SL05W-XWH-WHSE-CD = XWHTBL.XWHCD[XX0XWPIX];

    end

    set SL05M001.SL05M-XWH-WHSE-CD cursor;
    SLWREC.XXXLOCID = "410"; /* module indentification*/
    return;

  end

end // end SL05-410

// Verify data that was entered
Function SL05-500()
   /* -----------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (SL05M001.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SL05M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(259); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    SL05-510(); /* Verify scroll request*/

  else

    if (SL05W00.TA5TSQIX > 0) /* page was formatted*/

      SL05W00.SL05W-MAP-FIELD-INX = 15; /* initialize map index*/
      SL05W00.SL05W-ROW-SELECTED = "N";

      while (SL05W00.SL05W-MAP-FIELD-INX > 0) /* until end of lines*/

        SL05-520(); /* verify data in line*/

        SL05W00.SL05W-MAP-FIELD-INX = SL05W00.SL05W-MAP-FIELD-INX - 1;
              /* decrement index*/
      end
    end
  end
   /* ------------------------------------------------------------*/
   /* bypass edits if want to transfer without selecting line*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf12 /* transfer pf keys are pressed*/
   || converseVar.eventKey is pf13 
   || converseVar.eventKey is pf14 
   || converseVar.eventKey is pf15 
   || converseVar.eventKey is pf16 
   || converseVar.eventKey is pf17 
   || converseVar.eventKey is pf18)

    return; /* return to logic flow to skip edits*/

  end

   /* ------------------------------------------------------------*/
   /* Verify header fields--- warehouse code*/
   /* -------------------------------------------------------------*/

  if (SL05M001.SL05M-XWH-WHSE-CD in XWHTBL.XWHCD
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")

  /*  */

  else

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SL05M001.SL05M-XWH-WHSE-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(373); /* invalid warehouse*/

  end

   /* ------------------------------------------------------------*/
   /* Verify header fields--- area code*/
   /* -------------------------------------------------------------*/

  if (SL05M001.SL05M-XAR-AREA-CD in XARTBL.XARCD
   && XARTBL.XXXSTAT[sysVar.arrayIndex] == "A")

   /* next sentence*/

  else

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SL05M001.SL05M-XWH-WHSE-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(36); /* invalid area code*/

  end

   /* ------------------------------------------------------------*/
   /* Validate area/zone*/
   /* ------------------------------------------------------------*/

  set SL4REC empty; /* Clear row storage area*/

  SL4REC.XWHCD = SL05M001.SL05M-XWH-WHSE-CD;
  SL4REC.XARCD = SL05M001.SL05M-XAR-AREA-CD;
  SL4REC.SL4ZONE = SL05M001.SL05M-SL-ZONE-CD;

  try
    call "IO1480" ("S ", SQLCA, SL4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE != 0) /* Normal return code*/
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

        converseLib.validationFailed(35); /* invalid area/zone*/

        SLWREC.XXXLOCID = "500"; /* module identification*/

        exit stack; /* Return to flow*/

      else

        if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/

          converseLib.validationFailed(31); /* Data in use by another*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
          SLWREC.XXXLOCID = "500"; /* Module identification*/

        else

          converseLib.validationFailed(01); /* Unexpected error occurred*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/

          converseLib.clearScreen();
           /* Clear screen before display*/

          TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
          TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1LOC = "OBTAIN STYLE NAME FOR HEADING";
          TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
          TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
          TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
          TA1REC.TA1TBLVU = "VAZONE01"; /* Table view name*/
          TA1REC.TA1TBLKE = SL4REC.SL4KEY; /* Table key*/
          TA1REC.TA1MAPNO = "M001"; /* map number*/

          call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

          exit stack; /* Exit to display map*/

        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Validate area/zone/location*/
   /* ------------------------------------------------------------*/

  set SL5REC empty; /* Clear row storage area*/

  SL5REC.XWHCD = SL05M001.SL05M-XWH-WHSE-CD;
  SL5REC.XARCD = SL05M001.SL05M-XAR-AREA-CD;
  SL5REC.SL4ZONE = SL05M001.SL05M-SL-ZONE-CD;
  SL5REC.SL5LOCTN = SL05M001.SL05M-SL-LOC-CD;

  try
    call "IO1490" ("S ", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE != 0) /* Normal return code*/
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

        converseLib.validationFailed(38); /* invalid area/zone/location*/

        SLWREC.XXXLOCID = "500"; /* module identification*/

        exit stack; /* Return to flow*/

      else

        if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/

          converseLib.validationFailed(31); /* Data in use by another*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
          SLWREC.XXXLOCID = "500"; /* Module identification*/

        else

          converseLib.validationFailed(01); /* Unexpected error occurred*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/

          converseLib.clearScreen();
           /* Clear screen before display*/

          TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
          TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1LOC = "OBTAIN STYLE NAME FOR HEADING";
          TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
          TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
          TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
          TA1REC.TA1TBLVU = "VLOCAT01"; /* Table view name*/
          TA1REC.TA1TBLKE = SL4REC.SL4KEY; /* Table key*/
          TA1REC.TA1MAPNO = "M001"; /* map number*/

          call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

          exit stack; /* Exit to display map*/

        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end SL05-500

// Verify scroll request
Function SL05-510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && SL05W00.XXXTSPAG < 2)       /* and no previous pages*/

    SLWREC.XXXLOCID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && SL05W00.XXXTSPAG >= SL05W00.TA5TSQIX) /* and no more pages*/

    SLWREC.XXXLOCID = "510"; /* Module identification*/
    converseLib.validationFailed(8); /* No more pages to display*/

  end

end // end SL05-510

// Verify data in the line
Function SL05-520()
   /* ------------------------------------------------------------*/
   /* selection may be made only with a single 's'.  Multiple*/
   /* 's' and characters other than 's' and ' ' are not allowed.*/
   /* ------------------------------------------------------------*/

  if (SL05M001.SL05M-SELECT[SL05W-MAP-FIELD-INX] != " ")
    if (SL05M001.SL05M-SELECT[SL05W-MAP-FIELD-INX] == "S")
      if (SL05W00.SL05W-ROW-SELECTED == "Y")

        SLWREC.XXXLOCID = "520"; /* Module identification*/
        set SL05M001.SL05M-SELECT[SL05W-MAP-FIELD-INX] cursor, bold;
                                  /* highlight*/
        converseLib.validationFailed(51); /* Only one row may be selected*/

      else

        SL05W00.SL05W-ROW-SELECTED = "Y";

        SLWREC.XGPCD = SL05W01.SL05W-XGP-GPC-CD[SL05W-MAP-FIELD-INX]; /* gpc code*/
        SL05W00.SL05W-GPC-CD = SL05W01.SL05W-XGP-GPC-CD[SL05W-MAP-FIELD-INX];

        SLWREC.SY1STNBR = SL05W01.SL05W-SY-STY-NBR[SL05W-MAP-FIELD-INX]; /* style nbr*/
        SL05W00.SL05W-STY-NBR = SL05W01.SL05W-SY-STY-NBR[SL05W-MAP-FIELD-INX];

        SLWREC.SY2CLRID = SL05W01.SL05W-SY-COLR-CD-ID[SL05W-MAP-FIELD-INX]; /* color cd*/
        SL05W00.SL05W-COLR-CD-ID = SL05W01.SL05W-SY-COLR-CD-ID[SL05W-MAP-FIELD-INX];

        SLWREC.XDMCD = SL05W01.SL05W-XDM-DIM-CD[SL05W-MAP-FIELD-INX]; /* dimension code*/
        SL05W00.SL05W-DIM-CD = SL05W01.SL05W-XDM-DIM-CD[SL05W-MAP-FIELD-INX];

        SLWREC.XQACD = SL05W01.SL05W-XQA-QUAL-CD[SL05W-MAP-FIELD-INX]; /* quality code*/
        SL05W00.SL05W-QUAL-CD = SL05W01.SL05W-XQA-QUAL-CD[SL05W-MAP-FIELD-INX];

        SLWREC.PC2INSEG = SL05W01.SL05W-PC-CU-IN-SEG-CD[SL05W-MAP-FIELD-INX]; /* inventory segment code*/
        SL05W00.SL05W-IN-SEG-CD = SL05W01.SL05W-PC-CU-IN-SEG-CD[SL05W-MAP-FIELD-INX];

        SLWREC.XEG-ENGR-DIFF-CD = SL05W01.SL05W-XEG-ENGR-DIFF-CD[SL05W-MAP-FIELD-INX]; /* engineering difference code*/
        SL05W00.SL05W-ENGR-DIFF-CD = SL05W01.SL05W-XEG-ENGR-DIFF-CD[SL05W-MAP-FIELD-INX];

        SLWREC.XSLCD = SL05W01.SL05W-XSL-CLASS-CD[SL05W-MAP-FIELD-INX]; /* class code*/
        SL05W00.SL05W-CLASS-CD = SL05W01.SL05W-XSL-CLASS-CD[SL05W-MAP-FIELD-INX];

        SLWREC.XUMCD = SL05W01.SL05W-XUM-UOM-CD[SL05W-MAP-FIELD-INX]; /* unit of measure code*/
        SL05W00.SL05W-UOM-CD = SL05W01.SL05W-XUM-UOM-CD[SL05W-MAP-FIELD-INX];

        SLWREC.XOWCD = SL05W01.SL05W-XOW-OWN-GRP-CD[SL05W-MAP-FIELD-INX]; /* own group code*/
        SL05W00.SL05W-OWN-GRP-CD = SL05W01.SL05W-XOW-OWN-GRP-CD[SL05W-MAP-FIELD-INX];

        if (SL05W01.SL05W-SIZE[SL05W-MAP-FIELD-INX] == "    *")
          SLWREC.SY-SZ-ID-DESC = "     ";
        else
          SLWREC.SY-SZ-ID-DESC = SL05W01.SL05W-SIZE[SL05W-MAP-FIELD-INX]; /* size*/
        end

        SLWREC.SY-UNITS-PER-CASE = SL05W01.SL05W-SY-UNITS-PER-CASE[SL05W-MAP-FIELD-INX]; /* units per case*/

      end

    else

      SLWREC.XXXLOCID = "520"; /* Module identification*/
      set SL05M001.SL05M-SELECT[SL05W-MAP-FIELD-INX] cursor, bold;
                                  /* highlight*/
      converseLib.validationFailed(228); /* Only "S" may be entered*/

    end
  end

end // end SL05-520

// Process valid input request
Function SL05-600()
   /* ------------------------------------------------------------*/
   /* load slwrec with info to be passed*/
   /* ------------------------------------------------------------*/

  SL05-610(); /* move map working storage to slwrec*/

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    SL05W00.XXXTSPAG = SL05W00.XXXTSPAG - 1; /* Decrement page number*/
    SL05W00.SL05W-FORMAT-MAP-SW = "Y";

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    SL05W00.XXXTSPAG = SL05W00.XXXTSPAG + 1; /* Increment page number*/
    SL05W00.SL05W-FORMAT-MAP-SW = "Y";

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf6) /* PF6 was pressed*/
    if (SL05W00.SL05W-SIZE-DETAIL-SW == "Y")
      COMMAREA.CATOAP = "SL06"; /* TO application*/
    else
      SL05W00.SL05W-SIZE-DETAIL-SW = "Y";
      SL05W00.SL05W-RQT-DATA-SW = "Y";
      SL05W00.SL05W-FORMAT-MAP-SW = "Y"; /* format map*/
      exit stack; /* loop back with detail data*/
    end
  end

  if (converseVar.eventKey is pf12) /* PF12 was pressed*/
    COMMAREA.CATOAP = "SL01"; /* TO application*/
  end

  if (converseVar.eventKey is pf13) /* PF13 was pressed*/
    COMMAREA.CATOAP = "SL02"; /* TO application*/
  end

  if (converseVar.eventKey is pf14) /* PF14 was pressed*/
    COMMAREA.CATOAP = "SL03"; /* TO application*/
  end

  if (converseVar.eventKey is pf15) /* PF16 was pressed*/
    COMMAREA.CATOAP = "SL04"; /* TO application*/
  end

  if (converseVar.eventKey is pf17) /* PF17 was pressed*/
    COMMAREA.CATOAP = "SL0Q"; /* TO application*/
    SLWREC.SLWCASNO = "7"; /* option number*/
  end

  if (converseVar.eventKey is pf18) /* PF18 was pressed*/
    COMMAREA.CATOAP = "SL0Q"; /* TO application*/
    SLWREC.SLWCASNO = "8"; /* option number*/
  end

  if (COMMAREA.CATOAP > " ")

    SL05-120(); /* Purge temporary storage*/

    XSSL001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

  /* --------------------------------------------------------------*/
     /* indicate the map needs to be formatted*/
  /* --------------------------------------------------------------*/

  SL05W00.SL05W-FORMAT-MAP-SW = "Y"; /* format map*/

  /* --------------------------------------------------------------*/
     /* verify header information has not changed*/
  /* --------------------------------------------------------------*/

  if (SL05W01.SL05W-XWH-WHSE-CD != SL05M001.SL05M-XWH-WHSE-CD
   || SL05W01.SL05W-XAR-AREA-CD != SL05M001.SL05M-XAR-AREA-CD
   || SL05W01.SL05W-SL-LOC-CD != SL05M001.SL05M-SL-LOC-CD
   || SL05W01.SL05W-SL-ZONE-CD != SL05M001.SL05M-SL-ZONE-CD)

    SL05W00.SL05W-RQT-DATA-SW = "Y"; /* Request for data switch*/

  end

  if (converseVar.eventKey is enter) /* enter was pressed*/
    if (SL05W00.SL05W-RQT-DATA-SW == "Y")
      exit stack;
    else
      if (SL05W00.SL05W-SIZE-DETAIL-SW == "Y")
        COMMAREA.CATOAP = "SL06"; /* TO application*/
        SL05W00.SL05W-FORMAT-MAP-SW = "N"; /* keep 's' on screen*/
        SL05-120(); /* Purge temporary storage*/
        XSSL001(); /* Exit to another application*/
        exit stack;
      else
        SL05W00.SL05W-SIZE-DETAIL-SW = "Y";
        SL05W00.SL05W-RQT-DATA-SW = "Y";
        SL05W00.SL05W-FORMAT-MAP-SW = "Y"; /* format map*/
        exit stack; /* loop back with detail data*/
      end
    end
  end

end // end SL05-600

// Verify data in the line
Function SL05-610()
   /* ------------------------------------------------------------*/
   /* load map header working storage into slwrec to be passed*/
   /* ------------------------------------------------------------*/

  SLWREC.XWHCD = SL05W01.SL05W-XWH-WHSE-CD; /* whse code*/

  SLWREC.XAR-AREA-CD = SL05W01.SL05W-XAR-AREA-CD; /* area code*/

  SLWREC.SL-ZONE-CD = SL05W01.SL05W-SL-ZONE-CD; /* zone code*/

  SLWREC.SL-LOC-CD = SL05W01.SL05W-SL-LOC-CD; /* own group code*/

end // end SL05-610

// Main process to display a map
Function SL05001()
  /* -----------------------------------------------------------------------*/
      /* main logic - get data from tables using I/O modules*/
  /* -----------------------------------------------------------------------*/

  SL05-100();

  /* -----------------------------------------------------------------------*/
      /* converse sl05M001 - move data to screen*/
  /* -----------------------------------------------------------------------*/

  SL05-200();

  /* -----------------------------------------------------------------------*/
      /* validate keystrokes*/
  /* -----------------------------------------------------------------------*/

  SL05-300();

  /* -----------------------------------------------------------------------*/
      /* reset fields on map, pop-up window processing*/
  /* -----------------------------------------------------------------------*/

  SL05-400();

  /* -----------------------------------------------------------------------*/
       /* validate entered data*/
  /* -----------------------------------------------------------------------*/

  SL05-500();

  /* -----------------------------------------------------------------------*/
       /* process valid request*/
  /* -----------------------------------------------------------------------*/

  SL05-600();
end // end SL05001

// Update temporary storage page
Function SL05S01()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (SL05W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S01"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL05S01

// Read temporary storage page
Function SL05S02()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  SL05W01.XXXTSLEN = SL05W00.XXXTSLEN; /* Temporary storage   lengt;*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = SL05W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SL05W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S02"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL05S02

//*** RECORD=SL05W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record SL05W00 type basicRecord
  10 SL05W-MAP-FIELD-INX SL05W-MAP-FIELD-INX ; 
  10 SL05W-END-CURSOR-SW SL05W-END-CURSOR-SW ; 
  10 SL05W-PF-APPL-TRANSF-SW SL05W-PF-APPL-TRANSF-SW ; 
  10 SL05W-DISPLAY-MAP-SW SL05W-DISPLAY-MAP-SW ; 
  10 SL05W-FORMAT-MAP-SW SL05W-FORMAT-MAP-SW ; 
  10 SL05W-SIZE-DETAIL-SW SL05W-SIZE-DETAIL-SW ; 
  10 SL05W-RQT-DATA-SW SL05W-RQT-DATA-SW ; 
  10 SL05W-UPD-PAGE-SW SL05W-UPD-PAGE-SW ; 
  10 SL05W-ROW-SELECTED SL05W-ROW-SELECTED ; 
  10 SL05W-FIRST-FETCH SL05W-FIRST-FETCH ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 SL05W-HOLD-UNPCS SL05W-HOLD-UNPCS ; 
  10 SL05W-HOLD-SIZE SL05W-HOLD-SIZE ; 
  10 SL05W-ACCUM-LOC-OH-QTY SL05W-ACCUM-LOC-OH-QTY ; 
  10 SL05W-ACCUM-LOC-RSRV-QTY SL05W-ACCUM-LOC-RSRV-QTY ; 
  10 SL05W-ACCUM-LOC-SAS-QTY SL05W-ACCUM-LOC-SAS-QTY ; 
  10 SL05W-LOC-STATUS-INFO SL05W-LOC-STATUS-INFO ; 
    15 SL05W-LOC-STATUS SL05W-LOC-STATUS ; 
    15 SL05W-FILLER SL05W-FILLER ; 
    15 SL05W-LOC-STATUS-ABRV SL05W-LOC-STATUS-ABRV ; 
  10 SL05W-GPC-CD SL05W-GPC-CD ; 
  10 SL05W-STY-NBR SL05W-STY-NBR ; 
  10 SL05W-COLR-CD-ID SL05W-COLR-CD-ID ; 
  10 SL05W-DIM-CD SL05W-DIM-CD ; 
  10 SL05W-QUAL-CD SL05W-QUAL-CD ; 
  10 SL05W-IN-SEG-CD SL05W-IN-SEG-CD ; 
  10 SL05W-ENGR-DIFF-CD SL05W-ENGR-DIFF-CD ; 
  10 SL05W-CLASS-CD SL05W-CLASS-CD ; 
  10 SL05W-UOM-CD SL05W-UOM-CD ; 
  10 SL05W-OWN-GRP-CD SL05W-OWN-GRP-CD ; 
end // end SL05W00

//*** RECORD=SL05W01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record SL05W01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(1012) ; 
    10 SL05W-XWH-WHSE-CD SL05W-XWH-WHSE-CD ; 
    10 SL05W-XWH-WHSE-NM SL05W-XWH-WHSE-NM ; 
    10 SL05W-XAR-AREA-CD SL05W-XAR-AREA-CD ; 
    10 SL05W-SL-ZONE-CD SL05W-SL-ZONE-CD ; 
    10 SL05W-SL-LOC-CD SL05W-SL-LOC-CD ; 
    10 SL05W-YLS-LOC-STAT-INFO SL05W-YLS-LOC-STAT-INFO ; 
    10 SL05W-SELECT SL05W-SELECT [15] ; 
    10 SL05W-XGP-GPC-CD SL05W-XGP-GPC-CD [15] ; 
    10 SL05W-SY-STY-NBR SL05W-SY-STY-NBR [15] ; 
    10 SL05W-SY-COLR-CD-ID SL05W-SY-COLR-CD-ID [15] ; 
    10 SL05W-XDM-DIM-CD SL05W-XDM-DIM-CD [15] ; 
    10 SL05W-XQA-QUAL-CD SL05W-XQA-QUAL-CD [15] ; 
    10 SL05W-PC-CU-IN-SEG-CD SL05W-PC-CU-IN-SEG-CD [15] ; 
    10 SL05W-XEG-ENGR-DIFF-CD SL05W-XEG-ENGR-DIFF-CD [15] ; 
    10 SL05W-XSL-CLASS-CD SL05W-XSL-CLASS-CD [15] ; 
    10 SL05W-XUM-UOM-CD SL05W-XUM-UOM-CD [15] ; 
    10 SL05W-XOW-OWN-GRP-CD SL05W-XOW-OWN-GRP-CD [15] ; 
    10 SL05W-SIZE SL05W-SIZE [15] ; 
    10 SL05W-SY-UNITS-PER-CASE SL05W-SY-UNITS-PER-CASE [15] ; 
    10 SL05W-SL-RLOG-PLT-NBR SL05W-SL-RLOG-PLT-NBR [15] ; 
    10 SL05W-SL-SY-LOC-OH-QTY SL05W-SL-SY-LOC-OH-QTY [15] ; 
    10 SL05W-SL-SY-LOC-RSRV-QTY SL05W-SL-SY-LOC-RSRV-QTY [15] ; 
    10 SL05W-SL-SY-LOC-SAS-QTY SL05W-SL-SY-LOC-SAS-QTY [15] ; 
end // end SL05W01

DataItem SL05W-ACCUM-LOC-OH-QTY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SL05W-ACCUM-LOC-RSRV-QTY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SL05W-ACCUM-LOC-SAS-QTY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XGP_GPC_CD
DataItem SL05W-CLASS-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// color code
DataItem SL05W-COLR-CD-ID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dim code
DataItem SL05W-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem SL05W-DISPLAY-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem SL05W-END-CURSOR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem SL05W-ENGR-DIFF-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL05W-FILLER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL05W-FIRST-FETCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem SL05W-FORMAT-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gen prod class code
DataItem SL05W-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem SL05W-HOLD-SIZE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem SL05W-HOLD-UNPCS num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem SL05W-IN-SEG-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL05W-LOC-STATUS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL05W-LOC-STATUS-ABRV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL05W-LOC-STATUS-INFO char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem SL05W-MAP-FIELD-INX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem SL05W-OWN-GRP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem SL05W-PC-CU-IN-SEG-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem SL05W-PF-APPL-TRANSF-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// qual code
DataItem SL05W-QUAL-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL05W-ROW-SELECTED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem SL05W-RQT-DATA-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line selection indicator
DataItem SL05W-SELECT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem SL05W-SIZE char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem SL05W-SIZE-DETAIL-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL05W-SL-LOC-CD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL05W-SL-RLOG-PLT-NBR char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL05W-SL-SY-LOC-OH-QTY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL05W-SL-SY-LOC-RSRV-QTY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL05W-SL-SY-LOC-SAS-QTY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL05W-SL-ZONE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style number
DataItem SL05W-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// color code
DataItem SL05W-SY-COLR-CD-ID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style number
DataItem SL05W-SY-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL05W-SY-UNITS-PER-CASE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem SL05W-UOM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem SL05W-UPD-PAGE-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL05W-XAR-AREA-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dim code
DataItem SL05W-XDM-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem SL05W-XEG-ENGR-DIFF-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gen prod class code
DataItem SL05W-XGP-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem SL05W-XOW-OWN-GRP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// qual code
DataItem SL05W-XQA-QUAL-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem SL05W-XSL-CLASS-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem SL05W-XUM-UOM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse code
DataItem SL05W-XWH-WHSE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse code
DataItem SL05W-XWH-WHSE-NM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL05W-YLS-LOC-STAT-INFO char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

