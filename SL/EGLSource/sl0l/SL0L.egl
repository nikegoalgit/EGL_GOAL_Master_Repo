package sl0l;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SL0L ****
// ************************************************************
// 
//           STOCK LOCATE MENU SKELETON
//           ==========================
// 
// ************************************************************
// 
// OVERVIEW: This application is intended to transfer control
//           to other applications and/or functions within its
//           application depending on the selction number
//           entered on the map or passed via fast path's
//           item area (first character only).
// 
//           notes:
//             1) selection number (since single digit) is
//                setup as a character type field in order to
//                make the use of CAITEM easier as well as
//                easier for the user and program to deal
//                with the map field.
//             2) if selections include both external appl.s
//                and internal functions,  the internal func.s
//                should be listed first so that they will
//                correspond to the level number used in the
//                multiple function naming convention(s).
//             3) transfer to external applications will use
//                xsexit and require these selection values
//                be tested in the after section in either
//                the process or the related statement group
//                  CAITEM: 110 After or SY1
//                  SelNo.: 120 After or SB1
// 
// 
// MAINTENANCE HISTORY:
// ===================
// RVN
// NBR   DATE       NAME          DESCRIPTION OF CHANGES
// --- --------  ----------  ----------------------------------
// 00  01/28/87  Ward Jones  created
// 01  03/03/88  Sue Atkin   add s/e dates to lvl 3 & 4
// 02  08/31/88  Ward Jones  add reset scrn on fast path error
// 03  11/14/88  Ward Jones  fix printer limit abend
// 04  11/15/88  John Wood   added xssegtr logic
// 05  07/25/89  Ernie Smith fix abend/display bug - add b rec
//                             types on empty lines sent to tsq
// 06  09/13/90  RVAKEL      move code in sl0l420 to allow for
//                           printer selection and proper
//                           routing to jes via print jcl
// 07  09/21/90  RVAKEL      move code in sl0l320 to allow for
//                           printer selection and proper
//                           routing to jes via print jcl
// 08  10/09/90  sjohns      xrocd increased to 4 bytes so end
//                           of table now 9999
// 09  11/20/90  RVAKEL      overrid default cursor settings:
//                           SL0L120  -  modify code for
//                             Sl0LM110  cursor on area code.
//                           SL0L220  -  modify code for
//                             SL0LM210  cursor on style.
// 10  12/11/90 bgilde       sl0ls4b  -  removed comma after
//                             exec sl5211.
// 11  12/27/90 jcampb       increase size of rmt printer flds
//                           to 6 in sl0lm310 and 410.
// 12  03/12/91 jlucas       printer enhancement to m310 & m410
//                           to call ta0p.
// --  01/15/92 gray         initialize maps and records
//     08/25/92 Ryonke       change dprod calls to dpick calls
// --  04/29/93 GRAY         fix return code testing in SL0LSAA
// --  09/29/93 WTATE        FIX MAP PAGE CLEAR FOR CSP4.1
//     07/01/97 dgerlt       Added and option to screens 3 & 4
//                           to print the audit log for whse 51
//     07/23/97 dgerlt       Added and option to screens 3 & 4
//                           to print the audit log for whse 04
//                           and 07.
//     08/14/97 RVEMPA       In record SL0LWB1 and SL0LWB2
//                           limit to no.of occurs increased
//                           from 10 to 13.
//     08/05/00 marbuc       Following changes for Canada only
//                           (warehouse 42).
//                           SL0LSP1/SP2 modify to display
//                            size/quantity/time/userid columns
//                            for Canada.
//                           SL0LS1C/S2C modify to add the time
//                            userid to the audit size/quantity
//                           SL0LS1D/SL0LS2D Add logic so if
//                            the number of adjustments is more
//                            than a page then it will continue
//                            on the next page.
//                           SL0LWB1/B2 Add time/userid for
//                            columns 1 & 2
//                           SL0LWD1/D2/S1/S2 Expand data area
//                            to incorporate audit time/userid
//                           SL0LW01/02 Add time and display
//                            time
//                           SL0L110/210 Increase max sum and
//                            detail length
//                           SL0L127/227 Add to display new
//                            detail line with time/userid
//                           SL0LM117/217 Add to map new dtl
//                            line with time/userid for each
//                            size/quantity.
//     05/02/2001 SRAMA1     THE CHANGES THAT WERE DONE FOR
//                DLVRUSA    CANADA (WAREHOUSE 42) TO DISPLAY
//                           SIZE/QUANTITY/TIME/USERID IS MADE
//                           FOR ALL WAREHOUSES OTHER THAN THE
//                           COLEHAAN (WAREHOUSE 02)
//                           SL0LSP1/SL0LSP2: Modify to display
//                                    size/quantity/time/userid
//                                    columns
//                           SL0LS1C/SL0LS2C: Modify to add the
//                                    time/userid to  the audit
//                                    size/quantity
// 
// I/O Modules:
// ===========
// 
// NAME      DESCRIPTION
// --------  --------------------------------------------------
// IO1620     stock locate audit
// SY1190     size translation
// 
// ************************************************************
// ************************************************************
// *********************
Program SL0L type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SL0LW01 SL0LW01; // record
  SL0LW02 SL0LW02; // record
  SL0LW03 SL0LW03; // record
  SL0LW04 SL0LW04; // record
  SL0LW05 SL0LW05; // record
  SL0LW06 SL0LW06; // record
  SL0LWB1 SL0LWB1; // record
  SL0LWB2 SL0LWB2; // record
  SL0LWD1 SL0LWD1; // record
  SL0LWD2 SL0LWD2; // record
  SL0LWS1 SL0LWS1; // record
  SL0LWS2 SL0LWS2; // record
  SLAREC SLAREC; // record
  SLPREC SLPREC; // record
  SLUREC SLUREC; // record
  SLVREC SLVREC; // record
  SLWREC SLWREC; // record
  SLYREC SLYREC; // record
  SQLCA SQLCA; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  X2CREC X2CREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SL0LT03 {deleteAfterUse = yes}; // table
  use SL0LT04 {deleteAfterUse = yes}; // table
  use SL0LT05 {deleteAfterUse = yes}; // table
  use SL0LT06 {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use XITTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XROTBL {deleteAfterUse = yes}; // table
  use SL0LM.SL0LM010,  // forms
      SL0LM.SL0LM110, 
      SL0LM.SL0LM111, 
      SL0LM.SL0LM112, 
      SL0LM.SL0LM115, 
      SL0LM.SL0LM116, 
      SL0LM.SL0LM117, 
      SL0LM.SL0LM119, 
      SL0LM.SL0LM210, 
      SL0LM.SL0LM211, 
      SL0LM.SL0LM212, 
      SL0LM.SL0LM215, 
      SL0LM.SL0LM216, 
      SL0LM.SL0LM217, 
      SL0LM.SL0LM219, 
      SL0LM.SL0LM310, 
      SL0LM.SL0LM410, 
      SL0LM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SL0L010: SL0L010();


     /* ************************************************************/
     /* *** if the map selection no. setup:                     ****/
     /* *** use it to go directly to selection (skip converse)  ****/
     /* ************************************************************/

    if (SL0LM010.XMSLMSNO > " ")
      if (SL0LM010.XMSLMSNO == "1")
        goto SL0L110; /* <=== new function*/
      end
      if (SL0LM010.XMSLMSNO == "2")
        goto SL0L210; /* <=== new function*/
      end
      if (SL0LM010.XMSLMSNO == "3")
        goto SL0L310; /* <=== new function*/
      end
      if (SL0LM010.XMSLMSNO == "4")
        goto SL0L410; /* <=== new function*/
      end
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "010Z";
      SLWREC.SLWMSGNO = 0017; /* <--- invalid selection msg*/
      set SL0LM010.XMSLMSNO cursor, bold;
      goto SL0L020; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "020 "; /* error id location id*/
    goto SL0L020; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0L020: SL0L020();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0L010; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0L110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0L210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0L310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0L410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0L020; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      if (SL0LM010.XMSLMSNO == "1")
        goto SL0L110; /* <=== new function*/
      end
      if (SL0LM010.XMSLMSNO == "2")
        goto SL0L210; /* <=== new function*/
      end
      if (SL0LM010.XMSLMSNO == "3")
        goto SL0L310; /* <=== new function*/
      end
      if (SL0LM010.XMSLMSNO == "4")
        goto SL0L410; /* <=== new function*/
      end
       /* ************************************************************/
       /* *** note: invalid selection is detected at this point   ****/
       /* ************************************************************/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "020H";
      SLWREC.SLWMSGNO = 0017; /* <--- invalid selection msg*/
      set SL0LM010.XMSLMSNO cursor, bold;
      goto SL0L020; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0L020; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0L110: SL0L110();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "120 "; /* error id location id*/
    goto SL0L120; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0L120: SL0L120();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0L110; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0LM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0L020; /* <=== re-display menu*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pf14)
      goto SL0L210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0L310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0L410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0L120; /* <=== re-display this screen*/
    end

    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf6
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      goto SL0L120; /* <=== converse map*/
    end
     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0L120; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0L121: SL0L121();
    SL0L122: SL0L122();
    SL0L125: SL0L125();
    SL0L126: SL0L126();
    SL0L129: SL0L129();
    SL0L210: SL0L210();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "220 "; /* error id location id*/
    goto SL0L220; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0L220: SL0L220();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0L210; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0LM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0L020; /* <=== re-display menu*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pf13)
      goto SL0L110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0L310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0L410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0L220; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf6
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      goto SL0L220; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0L220; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0L221: SL0L221();
    SL0L222: SL0L222();
    SL0L225: SL0L225();
    SL0L226: SL0L226();
    SL0L229: SL0L229();
    SL0L310: SL0L310();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "320 "; /* error id location id*/
    goto SL0L320; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0L320: SL0L320();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0L310; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0LM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0L020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0L110; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf14)
      goto SL0L210; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf16)
      goto SL0L410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0L320; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto SL0L320; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0L320; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0L410: SL0L410();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "420 "; /* error id location id*/
    goto SL0L420; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0L420: SL0L420();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0L410; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0LM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0L020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0L110; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf14)
      goto SL0L210; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf15)
      goto SL0L310; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0L420; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto SL0L420; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0L420; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


  end // end main
end // end SL0L

// one time initializations
Function SL0L010()


   /* ************************************************************/
   /* *** standard security checking                          ****/
   /* *** note: comment out if exec'g from your msl           ****/
   /* ************************************************************/

  XSENTRY();

   /* ************************************************************/
   /* *** standard segmented trans id setting                 ****/
   /* ************************************************************/

  XSSEGTR();

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0LM010 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0LM110 initial; /**/
  converseLib.clearScreen();
  set SL0LM111 initial; /**/
  converseLib.clearScreen();
  set SL0LM112 initial; /**/
  converseLib.clearScreen();
  set SL0LM115 initial; /**/
  converseLib.clearScreen();
  set SL0LM116 initial; /**/
  converseLib.clearScreen();
  set SL0LM119 initial; /**/
  converseLib.clearScreen();
  set SL0LM210 initial; /**/
  converseLib.clearScreen();
  set SL0LM211 initial; /**/
  converseLib.clearScreen();
  set SL0LM212 initial; /**/
  converseLib.clearScreen();
  set SL0LM215 initial; /**/
  converseLib.clearScreen();
  set SL0LM216 initial; /**/
  converseLib.clearScreen();
  set SL0LM219 initial; /**/
  converseLib.clearScreen();
  set SL0LM310 initial; /**/
  converseLib.clearScreen();
  set SL0LM410 initial; /**/
  converseLib.clearScreen();
  set TA0PM001 initial; /**/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SLAREC empty; /* common w-s fields*/
  set SLPREC empty; /* common w-s fields*/
  set SLUREC empty; /* common w-s fields*/
  set SLVREC empty; /* common w-s fields*/
  set SLWREC empty; /* common w-s fields*/
  set SLYREC empty; /* ta0050 parameter #1*/
  set TA5REC empty; /* ta0050 parameter #2*/
  set SL0LW01 empty; /**/
  set SL0LWB1 empty; /**/
  set SL0LWD1 empty; /**/
  set SL0LWS1 empty; /**/
  set SL0LW02 empty; /**/
  set SL0LWB2 empty; /**/
  set SL0LWD2 empty; /**/
  set SL0LWS2 empty; /**/
  set SL0LW03 empty; /**/
  set SL0LW04 empty; /**/
  set SL0LW05 empty; /**/
  set SL0LW06 empty; /**/
  set SYPREC empty; /**/
  set TA1REC empty; /* TA0020 record*/
  set TA2REC empty; /**/
  set TA3REC empty; /**/
  set TA6REC empty; /**/
  set TAEREC empty; /**/
  set SQLCA empty; /* SQL returned data rec*/
  set ERRSQLCA empty; /* TA0020 version of SQLCA*/
  set X2CREC empty; /**/

   /* ************************************************************/
   /* *** maintenance information:                            ****/
   /* *** =======================                             ****/
   /* *** rvsn   date    update by:    description:           ****/
   /* *** ---- --------  ------------  ---------------------- ****/
   /* ***  00  01/28/87  W. Jones      created                ****/
   /* ***  01  03/03/88  S. Atkin      add s/e dates lvl 3 & 4****/
   /* ***  02  08/31/88  W. Jones      add reset scrn on fast ****/
   /* ***                              path exit error        ****/
   /* ***  03  11/14/88  W. Jones      fix printer limit abend****/
   /* ***  04  11/15/88  J. Wood       added xssegtr logic    ****/
   /* ************************************************************/

  SLWREC.XXXRVNBR = "04";

  SLWREC.XXXMAPNM = "SL0LM010";
  SLWREC.XXXTITLE = "   LOCATION AUDIT MENU    ";

  XSX2CDT(); /* <=== get CCYYMMDD*/
  SLWREC.SLWWKCC = X2CREC.X2CCURCC;
  SLWREC.SLWINYY = X2CREC.X2CCURYY;
  SLWREC.SLWINMM = X2CREC.X2CCURMM;
  SLWREC.SLWINDD = X2CREC.X2CCURDD;

  SLWREC.XXXAPPID = "SL0L"; /* error id appl. name*/
  SLWREC.SLWTALOC = "SL0L010 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0LM010"; /* TA0020 current map name*/

  SLWREC.SLWSUMQU = "SLSL"; /* summary tsq appl id*/
  SLWREC.SLWDETQU = "SLDL"; /* detail tsq appl id*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg nbr*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0LM010.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0LM010.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0LM010.XXXTITLE = SLWREC.XXXTITLE;
  SL0LM010.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SLWREC.SLWLINPP = 14; /* total data lines per page*/

   /* ************************************************************/
   /* *** check commarea fast path item to see if it should   ****/
   /* *** be used to setup working storage &/or map fields    ****/
   /* ************************************************************/

  if (COMMAREA.CAITEM > " ")
    SL0LSY0(); /* <=== use commarea item*/
    COMMAREA.CAITEM = " ";
  end

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0L010

// converse & control key entry
Function SL0L020()


   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  converseLib.clearScreen();
  
  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0LM010.XXXERRID = SLWREC.XXXERRID;


  converse SL0LM010 ;


   /* ************************************************************/
   /* *** commented EZECLOS code to be used ONLY in test      ****/
   /* *** in order to end application without canceling it    ****/
   /* ************************************************************/

   /* IF EZEAID IS PF9;*/
    /* EZECLOS;*/
   /* END ;*/

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020A";
    SLWREC.SLWMSGNO = 0;
    SL0LM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020B";
    SLWREC.SLWMSGNO = 0;
    SL0LM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020C";
    SLWREC.SLWMSGNO = 0;
    SL0LM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020D";
    SLWREC.SLWMSGNO = 0;
    SL0LM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0LM010.CATOAP > " ")
    COMMAREA.CATOAP = SL0LM010.CATOAP;
    COMMAREA.CAITEM = SL0LM010.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020E";
    SLWREC.SLWMSGNO = 0;
    SL0LM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0LM010.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0LM010.VAGen_EZEMSG = " ";
  SLWREC.SLWTALOC = "020 ";
  set SL0LM010.CATOAP initialAttributes;
  set SL0LM010.CAITEM initialAttributes;
  set SL0LM010.XMSLMSNO cursor, initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0LM010.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0LM010.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0LSH0(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "020G";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0L020

// one time initializations
Function SL0L110()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0LM110 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0LW01 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0LM110";
  SLWREC.XXXTITLE = "LOCATION INV AUDIT BY LOCATION";

  SLWREC.SLWTALOC = "SL0L110 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0LM110"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg nbr*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed during resets and for multiple levels     ****/
   /* ************************************************************/

  SL0LM110.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0LM110.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0LM110.XXXTITLE = SLWREC.XXXTITLE;
  SL0LM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0LM110.XWHCD = COMMAREA.XWHCD;
  SL0LM110.SL0LMSDT = SLWREC.SLWINDTE;
  SL0LM110.SL0LMEDT = SLWREC.SLWINDTE;
  SL0LM110.SL0LMXIF = "A";
  SL0LM110.XITCD = "A ";

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

   /* 09/06/00 increase max lengths from 854, because of adding the auditt*/
   /* time to detail line for sizes 1, 2, and 3.*/
  SL0LWS1.SL0LWLTH = 1302; /* max summary tsq length*/
  SL0LWD1.SL0LWLTH = 1302; /* max detail tsq length*/
  SLWREC.SLWLASRL = "10"; /* last right left pfkey*/

   /* ************************************************************/
   /* *** purge any existing storage in case of 'left overs'  ****/
   /* *** note: not found is acceptable return code           ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

   /* ************************************************************/
   /* *** setup the floating map lines for a blank map        ****/
   /* ************************************************************/

  SL0LSN1(); /* <=== setup blank screen*/

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0L110

// converse & control
Function SL0L120()


   /* ************************************************************/
   /* *** no "before" processing ...                          ****/
   /* *** ... except msg no.  and  error id setup             ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0LM110.XXXERRID = SLWREC.XXXERRID;

   /* ************************************************************/
   /* *** override default cursor setting                     ****/
   /* *** set cursor to area code field  (not start date)     ****/
   /* *** CHNG REQ # SL133           RVAKEL  11/20/90         ****/
   /* ************************************************************/
  if (SL0LM110.SL0LMSDT != "      ")
    set SL0LM110.XARCD cursor;
  end

  converse SL0LM110 ;


   /* ************************************************************/
   /* *** note: if leaving screen/application, purge tsq      ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120A";
    SLWREC.SLWMSGNO = 0;
    SL0LM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120B";
    SLWREC.SLWMSGNO = 0;
    SL0LM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120C";
    SLWREC.SLWMSGNO = 0;
    SL0LM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0LM110.CATOAP > " ")
    COMMAREA.CATOAP = SL0LM110.CATOAP;
    COMMAREA.CAITEM = SL0LM110.CAITEM;
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SL0LST1(); /* <=== reset scrn*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120D";
    SLWREC.SLWMSGNO = 0;
    SL0LM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0LM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0LM110.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "120 ";
  set SL0LM110.CATOAP initialAttributes;
  set SL0LM110.CAITEM initialAttributes;
  set SL0LM110.XWHCD cursor;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0LM110.XWHCD initialAttributes;
  set SL0LM110.SL0LMSDT initialAttributes;
  set SL0LM110.SL0LMEDT initialAttributes;
  set SL0LM110.XARCD initialAttributes;
  set SL0LM110.SL4ZONE initialAttributes;
  set SL0LM110.SL5LOCTN initialAttributes;
  set SL0LM110.SL0LMXIF initialAttributes;
  set SL0LM110.XITCD initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0LM110.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120E";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0LM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    if (SLWREC.SLWLASPF == "E")
      SLWREC.SLWIDX01 = 1;
      while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
        if (SL0LM110.XMSLMSEL[SLWIDX01] > " ")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "120F";
          SLWREC.SLWMSGNO = 0003; /* <--- use pf6 msg*/
          exit stack;
        else
          SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
        end
      end
    end
    SL0LSH1(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF6: do edits & process inputs                   ****/
   /* *** note: check first for need to save selected subkey  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf6)
    if (SLWREC.SLWLASPF == "6")
      SLWREC.SLWIDX01 = 1;
      while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
        if (SL0LM110.XMSLMSEL[SLWIDX01] > " ")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "120G";
          SLWREC.SLWMSGNO = 0018; /* <--- <enter> only msg*/
          exit stack;
        else
          SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
        end
      end
    end
    SL0LSI1(); /* <=== PF6 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if selection input now: display error msg           ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0LM110.XMSLMSEL[SLWIDX01] > " ")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "120H";
      SLWREC.SLWMSGNO = 0003; /* <--- use pf6 msg*/
      exit stack;
    else
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
    end
  end

   /* ************************************************************/
   /* *** if PF7: scroll backwards, key changes NOT allowed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf7)
    SL0LSJ1(); /* <=== PF7 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF8: scroll forwards, key changes NOT allowed    ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf8)
    SL0LSK1(); /* <=== PF8 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "120I";
  SLWREC.SLWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0L120

// disp left sum line
Function SL0L121()


   /* *** move summary fields to map fields ****/

  SL0LM111.XGPCD = SL0LWB1.XGPCD;
  SL0LM111.SY1STNBR = SL0LWB1.SY1STNBR;
  SL0LM111.SY2CLRID = SL0LWB1.SY2CLRID;
  SL0LM111.XDMCD = SL0LWB1.XDMCD;
  SL0LM111.XQACD = SL0LWB1.XQACD;
  SL0LM111.XSDCD = SL0LWB1.XSDCD;
  SL0LM111.XSLCD = SL0LWB1.XSLCD;
  SL0LM111.XPGCD = SL0LWB1.XPGCD;
  SL0LM111.XUMCD = SL0LWB1.XUMCD;
  SL0LM111.XOWCD = SL0LWB1.XOWCD;
  SL0LM111.IN5TRDCD = SL0LWB1.IN5TRDCD;
  SL0LM111.SL0LMTDC = SL0LWB1.SL0LWTDC;
  SL0LM111.SL0LMTSB = SL0LWB1.SL0LWTSB;
  SL0LM111.SL0LMTRD = SL0LWB1.SL0LWTRD;
  SL0LM111.SL0LMXIF = SL0LWB1.SL0LWTFN;
  SL0LM111.XITCD = SL0LWB1.XITCD;
  SL0LM111.SL0LMSQT = SL0LWB1.SL0LWSQT;

  display SL0LM111 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0L121

// disp left det line
Function SL0L122()


  SL0LM112.SL0LMSZ1 = SL0LWB1.SL0LWSZ1[1];
  SL0LM112.SL0LMQT1 = SL0LWB1.SL0LWQT1[1];
  SL0LM112.SL0LMSZ2 = SL0LWB1.SL0LWSZ2[1];
  SL0LM112.SL0LMQT2 = SL0LWB1.SL0LWQT2[1];
  SL0LM112.SL0LMSZ3 = SL0LWB1.SL0LWSZ3[1];
  SL0LM112.SL0LMQT3 = SL0LWB1.SL0LWQT3[1];
  SL0LM112.SL0LMSZ4 = SL0LWB1.SL0LWSZ4[1];
  SL0LM112.SL0LMQT4 = SL0LWB1.SL0LWQT4[1];


  display SL0LM112 ;


   /* ************************************************************/
   /* *** no DISPLAY AFTER processing                         ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0L122

// disp top column title
Function SL0L125()


   /* ************************************************************/
   /* *** no "before" processing... except to setup "S"       ****/
   /* ************************************************************/

  SL0LM110.XMSLMSSS = "S";
  set SL0LM110.XMSLMSSS initialAttributes;


  display SL0LM115 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0L125

// disp bot column title
Function SL0L126()


   /* ************************************************************/
   /* *** no "before" processing... except to blank "S"       ****/
   /* ************************************************************/

  if (SLWREC.SLWLASPF == "6")
    SL0LM110.XMSLMSSS = " ";
    set SL0LM110.XMSLMSSS skip, invisible;
  else
    SL0LM110.XMSLMSSS = "S";
    set SL0LM110.XMSLMSSS initialAttributes;
  end


  display SL0LM116 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0L126

// disp left det line w/ time
Function SL0L127()

   /* 08/29/00*/
   /* For Canada the adjust time was added to the detail line. So the*/
   /* forth column is no longer displayed*/

  SL0LM117.SL0LMSZ1 = SL0LWB1.SL0LWSZ1[1];
  SL0LM117.SL0LMQT1 = SL0LWB1.SL0LWQT1[1];
  SL0LM117.SL0LMTM1 = SL0LWB1.SL0LWTM1[1];
  SL0LM117.SL0LMBY1 = SL0LWB1.SL0LWBY1[1];
  SL0LM117.SL0LMSZ2 = SL0LWB1.SL0LWSZ2[1];
  SL0LM117.SL0LMQT2 = SL0LWB1.SL0LWQT2[1];
  SL0LM117.SL0LMTM2 = SL0LWB1.SL0LWTM2[1];
  SL0LM117.SL0LMBY2 = SL0LWB1.SL0LWBY2[1];

  display SL0LM117 ;


   /* ************************************************************/
   /* *** no DISPLAY AFTER processing                         ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0L127

// disp blank line
Function SL0L129()


   /* ************************************************************/
   /* *** set selection fields ASKIP,DARK                     ****/
   /* ************************************************************/

  set SL0LM110.XMSLMSEL[SLWIDX01] skip, invisible;


  display SL0LM119 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0L129

// one time initializations
Function SL0L210()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0LM210 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0LW02 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0LM210";
  SLWREC.XXXTITLE = "LOCATION INV AUDIT BY PRODUCT";
  SL0LM210.XGPCD = "02";
  SL0LM210.SY2CLRID = "00 ";
  SL0LM210.XDMCD = "00";
  SL0LM210.XQACD = "01";

  SLWREC.SLWTALOC = "SL0L210 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0LM210"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg nbr*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed during resets and for multiple levels     ****/
   /* ************************************************************/

  SL0LM210.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0LM210.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0LM210.XXXTITLE = SLWREC.XXXTITLE;
  SL0LM210.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0LM210.XWHCD = COMMAREA.XWHCD;
  SL0LM210.SL0LMSDT = SLWREC.SLWINDTE;
  SL0LM210.SL0LMEDT = SLWREC.SLWINDTE;
  SL0LM210.SL0LMXIF = "A";
  SL0LM210.XITCD = "A ";

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

   /* 09/06/00 increase max lengths from 826, because of adding the audit*/
   /* time to detail line for sizes 1, 2, and 3.*/
  SL0LWS2.SL0LWLTH = 1274; /* max sum tsq length*/
  SL0LWD2.SL0LWLTH = 1274; /* max det tsq length*/
  SLWREC.SLWLASRL = "10"; /* last right left pfkey*/

   /* ************************************************************/
   /* *** purge any existing storage in case of 'left overs'  ****/
   /* *** note: not found is acceptable return code           ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

   /* ************************************************************/
   /* *** setup the floating map lines for a blank map        ****/
   /* ************************************************************/

  SL0LSN2(); /* <=== setup blank screen*/

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0L210

// converse & control
Function SL0L220()


   /* ************************************************************/
   /* *** no "before" processing ...                          ****/
   /* *** ... except msg no.  and  error id setup             ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0LM210.XXXERRID = SLWREC.XXXERRID;

   /* ************************************************************/
   /* *** override default cursor setting                     ****/
   /* *** set cursor to style field  (not start date)         ****/
   /* *** CHNG REQ # SL133         RVAKEL  11/20/90           ****/
   /* ************************************************************/

  if (SL0LM210.SL0LMSDT != "      ")
    set SL0LM210.SY1STNBR cursor;
  end
  converse SL0LM210 ;


   /* ************************************************************/
   /* *** note: if leaving screen/application, purge tsq      ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220A";
    SLWREC.SLWMSGNO = 0;
    SL0LM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220B";
    SLWREC.SLWMSGNO = 0;
    SL0LM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220C";
    SLWREC.SLWMSGNO = 0;
    SL0LM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0LM210.CATOAP > " ")
    COMMAREA.CATOAP = SL0LM210.CATOAP;
    COMMAREA.CAITEM = SL0LM210.CAITEM;
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SL0LST2(); /* <=== reset scrn*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220D";
    SLWREC.SLWMSGNO = 0;
    SL0LM210.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0LM210.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0LM210.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "220 ";
  set SL0LM210.CATOAP initialAttributes;
  set SL0LM210.CAITEM initialAttributes;
  set SL0LM210.XWHCD cursor;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0LM210.XWHCD initialAttributes;
  set SL0LM210.SL0LMSDT initialAttributes;
  set SL0LM210.SL0LMEDT initialAttributes;
  set SL0LM210.XGPCD initialAttributes;
  set SL0LM210.SY1STNBR initialAttributes;
  set SL0LM210.SY2CLRID initialAttributes;
  set SL0LM210.XDMCD initialAttributes;
  set SL0LM210.XQACD initialAttributes;
  set SL0LM210.SL0LMXIF initialAttributes;
  set SL0LM210.XITCD initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0LM210.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220E";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0LM210.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    if (SLWREC.SLWLASPF == "E")
      SLWREC.SLWIDX01 = 1;
      while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
        if (SL0LM210.XMSLMSEL[SLWIDX01] > " ")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "220F";
          SLWREC.SLWMSGNO = 0003; /* <--- use pf6 msg*/
          exit stack;
        else
          SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
        end
      end
    end
    SL0LSH2(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF6: do edits & process inputs                   ****/
   /* *** note: check first for need to save selected subkey  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf6)
    if (SLWREC.SLWLASPF == "6")
      SLWREC.SLWIDX01 = 1;
      while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
        if (SL0LM210.XMSLMSEL[SLWIDX01] > " ")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "220G";
          SLWREC.SLWMSGNO = 0018; /* <--- <enter> only msg*/
          exit stack;
        else
          SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
        end
      end
    end
    SL0LSI2(); /* <=== PF6 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if selection input now: display error msg           ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0LM210.XMSLMSEL[SLWIDX01] > " ")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "220H";
      SLWREC.SLWMSGNO = 0003; /* <--- use pf6 msg*/
      exit stack;
    else
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
    end
  end

   /* ************************************************************/
   /* *** if PF7: scroll backwards, key changes NOT allowed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf7)
    SL0LSJ2(); /* <=== PF7 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF8: scroll forwards, key changes NOT allowed    ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf8)
    SL0LSK2(); /* <=== PF8 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "220I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0L220

// disp left sum line
Function SL0L221()


   /* ************************************************************/
   /* *** move summary fields to map fields.                  ****/
   /* ************************************************************/


  SL0LM211.XSDCD = SL0LWB2.XSDCD;
  SL0LM211.XSLCD = SL0LWB2.XSLCD;
  SL0LM211.XPGCD = SL0LWB2.XPGCD;
  SL0LM211.XUMCD = SL0LWB2.XUMCD;
  SL0LM211.XOWCD = SL0LWB2.XOWCD;
  SL0LM211.XARCD = SL0LWB2.XARCD;
  SL0LM211.SL4ZONE = SL0LWB2.SL4ZONE;
  SL0LM211.SL5LOCTN = SL0LWB2.SL5LOCTN;
  SL0LM211.IN5TRDCD = SL0LWB2.IN5TRDCD;
  SL0LM211.SL0LMTDC = SL0LWB2.SL0LWTDC;
  SL0LM211.SL0LMTSB = SL0LWB2.SL0LWTSB;
  SL0LM211.SL0LMTRD = SL0LWB2.SL0LWTRD;
  SL0LM211.SL0LMXIF = SL0LWB2.SL0LWTFN;
  SL0LM211.XITCD = SL0LWB2.XITCD;
  SL0LM211.XIRCD = SL0LWB2.XIRCD;
  SL0LM211.SL0LMSQT = SL0LWB2.SL0LWSQT;

  display SL0LM211 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0L221

// disp left det line
Function SL0L222()


  SL0LM212.SL0LMSZ1 = SL0LWB2.SL0LWSZ1[1];
  SL0LM212.SL0LMQT1 = SL0LWB2.SL0LWQT1[1];
  SL0LM212.SL0LMSZ2 = SL0LWB2.SL0LWSZ2[1];
  SL0LM212.SL0LMQT2 = SL0LWB2.SL0LWQT2[1];
  SL0LM212.SL0LMSZ3 = SL0LWB2.SL0LWSZ3[1];
  SL0LM212.SL0LMQT3 = SL0LWB2.SL0LWQT3[1];
  SL0LM212.SL0LMSZ4 = SL0LWB2.SL0LWSZ4[1];
  SL0LM212.SL0LMQT4 = SL0LWB2.SL0LWQT4[1];


  display SL0LM212 ;


   /* ************************************************************/
   /* *** no DISPLAY AFTER processing                         ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0L222

// disp left sum title
Function SL0L225()


   /* ************************************************************/
   /* *** no "before" processing... except to setup "S"       ****/
   /* ************************************************************/

  SL0LM210.XMSLMSSS = "S";
  set SL0LM210.XMSLMSSS initialAttributes;


  display SL0LM215 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0L225

// disp left det title
Function SL0L226()


   /* ************************************************************/
   /* *** no "before" processing... except to blank "S"       ****/
   /* ************************************************************/

  if (SLWREC.SLWLASPF == "6")
    SL0LM210.XMSLMSSS = " ";
    set SL0LM210.XMSLMSSS skip, invisible;
  else
    SL0LM210.XMSLMSSS = "S";
    set SL0LM210.XMSLMSSS initialAttributes;
  end


  display SL0LM216 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0L226

// disp left det line w/ time
Function SL0L227()

   /* 08/29/00*/
   /* For Canada the adjust time was added to the detail line. So the*/
   /* forth column is no longer displayed*/

  SL0LM217.SL0LMSZ1 = SL0LWB2.SL0LWSZ1[1];
  SL0LM217.SL0LMQT1 = SL0LWB2.SL0LWQT1[1];
  SL0LM217.SL0LMTM1 = SL0LWB2.SL0LWTM1[1];
  SL0LM217.SL0LMBY1 = SL0LWB2.SL0LWBY1[1];
  SL0LM217.SL0LMSZ2 = SL0LWB2.SL0LWSZ2[1];
  SL0LM217.SL0LMQT2 = SL0LWB2.SL0LWQT2[1];
  SL0LM217.SL0LMTM2 = SL0LWB2.SL0LWTM2[1];
  SL0LM217.SL0LMBY2 = SL0LWB2.SL0LWBY2[1];

  display SL0LM217 ;


   /* ************************************************************/
   /* *** no DISPLAY AFTER processing                         ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0L227

// disp blank line
Function SL0L229()


   /* ************************************************************/
   /* *** set selection fields ASKIP,DARK                     ****/
   /* ************************************************************/

  set SL0LM210.XMSLMSEL[SLWIDX01] skip, invisible;


  display SL0LM219 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0L229

// one time initializations
Function SL0L310()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0LM310 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  SLWREC.XXXMAPNM = "SL0LM310";
  SLWREC.XXXTITLE = "LOCATION AUDIT REPORT BY LOCATION";

  SLWREC.SLWTALOC = "SL0L310 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0LM310"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg no.*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0LM310.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0LM310.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0LM310.XXXTITLE = SLWREC.XXXTITLE;
  SL0LM310.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0LM310.SL0LMSDT = SLWREC.SLWINDTE; /* start = currentdt*/
  SL0LM310.SL0LMEDT = SLWREC.SLWINDTE; /* end = current date*/
  SL0LM310.XWHCD = COMMAREA.XWHCD;
  SL0LM310.SL0LAUDT = "N";

   /* ************************************************************/
   /* *** if being transf from other appl do not save causera ****/
   /* *** fld. if transf from same appl save the causera fld  ****/
   /* *** which contains current printer.                     ****/
   /* ************************************************************/
  if (COMMAREA.CAFROMAP == COMMAREA.CACURRAP)
    /* next sentence*/
  else
    COMMAREA.CAUSERA = " ";
  end

  if (COMMAREA.CAUSERA > " ")
    SL0LM310.SL0LMPID = COMMAREA.CAUSERA;
    TA6REC.XURDEST = COMMAREA.CAUSERA;
    COMMAREA.CAUSERA = " ";
    SLWREC.SLWFTMSW = "N";
  end

  if (SLWREC.SLWFTMSW == "N")
    SL0LM310.SL0LMPID = TA6REC.XURDEST; /* move dest field from*/
  end

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0LW03 empty; /* appl. working storage area*/
  set SL0LW05 empty; /* appl. working storage area*/
  SL0LW03.XWHCD = COMMAREA.XWHCD;
  SL0LW05.XWHCD = COMMAREA.XWHCD;

  if (SL0LM310.XWHCD == "  ")
    set SL0LM310.XWHCD cursor;
  end

  if (SL0LM310.XWHCD != "51"
   && SL0LM310.XWHCD != "07"
   && SL0LM310.XWHCD != "04")
    set SL0LM310.SL0LAUDT invisible, skip, noHighLight;
    set SL0LM310.SL0LAUDTM invisible, skip, noHighLight;
  end

end // end SL0L310

// conv & cntl fixed
Function SL0L320()


  if (SL0LM310.XWHCD == "  ")
    set SL0LM310.XWHCD cursor;
  end

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0LM310.XXXERRID = SLWREC.XXXERRID;


  converse SL0LM310 ;


   /* ************************************************************/
   /* *** commented EZECLOS code to be used ONLY in test      ****/
   /* *** in order to end application without canceling it    ****/
   /* ************************************************************/

   /* IF EZEAID IS PF9;*/
    /* EZECLOS;*/
   /* END ;*/

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320A";
    SLWREC.SLWMSGNO = 0;
    SL0LM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320C";
    SLWREC.SLWMSGNO = 0;
    SL0LM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320D";
    SLWREC.SLWMSGNO = 0;
    SL0LM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0LM310.CATOAP > " ")
    COMMAREA.CATOAP = SL0LM310.CATOAP;
    COMMAREA.CAITEM = SL0LM310.CAITEM;
    COMMAREA.CAUSERA = SL0LM310.SL0LMPID;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320E";
    SLWREC.SLWMSGNO = 0;
    SL0LM310.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0LM310.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0LM310.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "320 ";
  set SL0LM310.CATOAP initialAttributes;
  set SL0LM310.CAITEM initialAttributes;
  set SL0LM310.SL0LMSDT cursor;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0LM310.XWHCD initialAttributes;
  set SL0LM310.SL0LMSDT initialAttributes;
  set SL0LM310.SL0LMEDT initialAttributes;
  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 6)
    set SL0LM310.XARCD[SLWIDX01] initialAttributes;
    set SL0LM310.SL4ZONE[SLWIDX01] initialAttributes;
    set SL0LM310.SL5LOCTN[SLWIDX01] initialAttributes;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end
  set SL0LM310.SL0LAUDT initialAttributes;
  set SL0LM310.SL0LAUDTM initialAttributes;
  if (SL0LM310.XWHCD != "51"
   && SL0LM310.XWHCD != "07"
   && SL0LM310.XWHCD != "04")
    set SL0LM310.SL0LAUDT invisible, skip, noHighLight;
    set SL0LM310.SL0LAUDTM invisible, skip, noHighLight;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0LM310.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0LM310.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf16)
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0LSH3(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "320I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0L320

// one time initializations
Function SL0L410()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0LM410 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0LW04 empty; /* appl. working storage area*/
  set SL0LW06 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0LM410";
  SLWREC.XXXTITLE = "LOCATION AUDIT REPORT BY PRODUCT";

  SLWREC.SLWTALOC = "SL0L410 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0LM410"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg no.*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed during resets and for multiple levels     ****/
   /* ************************************************************/

  SL0LM410.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0LM410.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0LM410.XXXTITLE = SLWREC.XXXTITLE;
  SL0LM410.XXXCURDT = X2CREC.X2CCURSD;

  SL0LM410.SL0LMSDT = SLWREC.SLWINDTE; /* start = current*/
  SL0LM410.SL0LMEDT = SLWREC.SLWINDTE; /* end = current*/
  SL0LM410.XWHCD = COMMAREA.XWHCD;
  SL0LW04.XWHCD = COMMAREA.XWHCD;
  SL0LW06.XWHCD = COMMAREA.XWHCD;
  SL0LM410.SL0LAUDT = "N";

  if (SL0LM410.XWHCD == "  ")
    set SL0LM410.XWHCD cursor;
  end

   /* ************************************************************/
   /* *** if being transf from other appl do not save causera ****/
   /* *** fld. if transf from same appl save the causera fld  ****/
   /* *** which contains current printer                      ****/
   /* ************************************************************/
  if (COMMAREA.CAFROMAP == COMMAREA.CACURRAP)
    /* next sentence*/
  else
    COMMAREA.CAUSERA = " ";
  end

  if (COMMAREA.CAUSERA > " ")
    SL0LM410.SL0LMPID = COMMAREA.CAUSERA;
    TA6REC.XURDEST = COMMAREA.CAUSERA;
    COMMAREA.CAUSERA = " ";
    SLWREC.SLWFTMSW = "N";
  end

  if (SLWREC.SLWFTMSW == "N")
    SL0LM410.SL0LMPID = TA6REC.XURDEST;
  end

   /* *** move default values into map fields ****/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 5)
    SL0LM410.XGPCD[SLWIDX01] = "02";
    SL0LM410.SY2CLRID[SLWIDX01] = "00 ";
    SL0LM410.XDMCD[SLWIDX01] = "00";
    SL0LM410.XQACD[SLWIDX01] = "01";
    SL0LM410.XSDCD[SLWIDX01] = "000";
    SL0LM410.XSLCD[SLWIDX01] = "000";
    SL0LM410.XPGCD[SLWIDX01] = "00";
    SL0LM410.XUMCD[SLWIDX01] = "01";
    SL0LM410.XOWCD[SLWIDX01] = "00";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  if (SL0LM410.XWHCD != "51"
   && SL0LM410.XWHCD != "07"
   && SL0LM410.XWHCD != "04")
    set SL0LM410.SL0LAUDT invisible, skip, noHighLight;
    set SL0LM410.SL0LAUDTM invisible, skip, noHighLight;
  end

end // end SL0L410

// conv & cntl fixed
Function SL0L420()


  if (SL0LM410.XWHCD == "  ")
    set SL0LM410.XWHCD cursor;
  end

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0LM410.XXXERRID = SLWREC.XXXERRID;


  converse SL0LM410 ;


   /* ************************************************************/
   /* *** commented EZECLOS code to be used ONLY in test      ****/
   /* *** in order to end application without canceling it    ****/
   /* ************************************************************/

   /* if ezeaid is pf9;*/
    /* ezeclos;*/
   /* end ;*/

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420A";
    SLWREC.SLWMSGNO = 0;
    SL0LM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420C";
    SLWREC.SLWMSGNO = 0;
    SL0LM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420D";
    SLWREC.SLWMSGNO = 0;
    SL0LM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0LM410.CATOAP > " ")
    COMMAREA.CATOAP = SL0LM410.CATOAP;
    COMMAREA.CAITEM = SL0LM410.CAITEM;
    COMMAREA.CAUSERA = SL0LM410.SL0LMPID;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420E";
    SLWREC.SLWMSGNO = 0;
    SL0LM410.VAGen_EZEMSG = COMMAREA.CAMSG;
     /* SET SL0LM410.CATOAP CURSOR,BRIGHT;*/
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0LM410.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "420 ";
  set SL0LM410.CATOAP initialAttributes;
  set SL0LM410.CAITEM initialAttributes;
  set SL0LM410.SL0LMSDT cursor;
  SLWREC.SLWIDX01 = 1;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0LM410.XWHCD initialAttributes;
  set SL0LM410.SL0LMSDT initialAttributes;
  set SL0LM410.SL0LMEDT initialAttributes;
  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 5)
    set SL0LM410.XGPCD[SLWIDX01] initialAttributes;
    set SL0LM410.SY1STNBR[SLWIDX01] initialAttributes;
    set SL0LM410.SY2CLRID[SLWIDX01] initialAttributes;
    set SL0LM410.XDMCD[SLWIDX01] initialAttributes;
    set SL0LM410.XQACD[SLWIDX01] initialAttributes;
    set SL0LM410.XSDCD[SLWIDX01] initialAttributes;
    set SL0LM410.XSLCD[SLWIDX01] initialAttributes;
    set SL0LM410.XPGCD[SLWIDX01] initialAttributes;
    set SL0LM410.XUMCD[SLWIDX01] initialAttributes;
    set SL0LM410.XOWCD[SLWIDX01] initialAttributes;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end
  set SL0LM410.SL0LAUDT initialAttributes;
  set SL0LM410.SL0LAUDTM initialAttributes;
  if (SL0LM410.XWHCD != "51"
   && SL0LM410.XWHCD != "07"
   && SL0LM410.XWHCD != "04")
    set SL0LM410.SL0LAUDT invisible, skip, noHighLight;
    set SL0LM410.SL0LAUDTM invisible, skip, noHighLight;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0LM410.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0LM410.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15)
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0LSH4(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "420I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0L420

// save product key data
Function SL0LS1A()


  SL0LW01.SL0LWDGP = SLAREC.XGPCD;
  SL0LW01.SL0LWDSY = SLAREC.SY1STNBR;
  SL0LW01.SL0LWDCR = SLAREC.SY2CLRID;
  SL0LW01.SL0LWDDM = SLAREC.XDMCD;
  SL0LW01.SL0LWDQA = SLAREC.XQACD;


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0LS1A

// save summary line data
Function SL0LS1B()


  SL0LW01.SL0LWSGP = SLAREC.XGPCD;
  SL0LW01.SL0LWSSY = SLAREC.SY1STNBR;
  SL0LW01.SL0LWSCR = SLAREC.SY2CLRID;
  SL0LW01.SL0LWSDM = SLAREC.XDMCD;
  SL0LW01.SL0LWSQA = SLAREC.XQACD;
  SL0LW01.SL0LWSSD = SLAREC.XSDCD;
  SL0LW01.SL0LWSCC = SLAREC.XSLCD;
  SL0LW01.SL0LWSPT = SLAREC.XPGCD;
  SL0LW01.SL0LWSUM = SLAREC.XUMCD;
  SL0LW01.SL0LWSOW = SLAREC.XOWCD;
  SL0LW01.IN5TRDCD = SLAREC.IN5TRDCD;
  SL0LW01.IN5TRDOC = SLAREC.IN5TRDOC;
  SL0LW01.IN5TRSUB = SLAREC.IN5TRSUB;
  SL0LW01.SL0LWTDT = SLAREC.SLATRDTE;
  SL0LW01.SL0LWXIF = SLAREC.XIFCD;
  SL0LW01.SL0LWXIT = SLAREC.XITCD;


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0LS1B

// format size det in det buffer
Function SL0LS1C()


  SL0LW01.SL0LWID1 = SLAREC.SY5SZID; /* set syprec size subscript*/

   /* 08/30/00 format time to be displayed on detail line.*/
  SL0LW01.SL0LWSTM = SLAREC.ZZHHMMSS; /* load adjust time*/
  SL0LW01.SL0LWMHH = SL0LW01.SL0LWSHH; /* format hour for map*/
  SL0LW01.SL0LWMC1 = ":"; /* load first colon*/
  SL0LW01.SL0LWMMN = SL0LW01.SL0LWSMN; /* format minutes for map*/
  SL0LW01.SL0LWMC2 = ":"; /* load second colon*/
  SL0LW01.SL0LWMSS = SL0LW01.SL0LWSSS; /* format seconds for map*/

  if (SL0LW01.SL0LWIX1 == 1)
    SLWREC.SLWBUFLX = SLWREC.SLWBUFLX + 1;
    SL0LWB1.SL0LWSZ2[SLWBUFLX] = "     ";
    SL0LWB1.SL0LWQT2[SLWBUFLX] = 0;
    SL0LWB1.SL0LWTM2[SLWBUFLX] = "        ";
    SL0LWB1.SL0LWBY2[SLWBUFLX] = "        ";
    SL0LWB1.SL0LWSZ3[SLWBUFLX] = "     ";
    SL0LWB1.SL0LWQT3[SLWBUFLX] = 0;
    SL0LWB1.SL0LWSZ4[SLWBUFLX] = "     ";
    SL0LWB1.SL0LWQT4[SLWBUFLX] = 0;
    SL0LWB1.SL0LWSZ1[SLWBUFLX] = SYPREC.SY4IDDSC[SL0LWID1];
    SL0LWB1.SL0LWQT1[SLWBUFLX] = SLAREC.SLATRQTY;
    SL0LWB1.SL0LWTM1[SLWBUFLX] = SL0LW01.SL0LWMTM;
    SL0LWB1.SL0LWBY1[SLWBUFLX] = SLAREC.SLATRBY;
    SL0LWB1.SL0LWSQT = SL0LWB1.SL0LWSQT + SL0LWB1.SL0LWQT1[SLWBUFLX];
    SL0LW01.SL0LWIX1 = SL0LW01.SL0LWIX1 + 1;
    return;
  end

  if (SL0LW01.SL0LWIX1 == 2)
    SL0LWB1.SL0LWSZ2[SLWBUFLX] = SYPREC.SY4IDDSC[SL0LWID1];
    SL0LWB1.SL0LWQT2[SLWBUFLX] = SLAREC.SLATRQTY;
    SL0LWB1.SL0LWTM2[SLWBUFLX] = SL0LW01.SL0LWMTM;
    SL0LWB1.SL0LWBY2[SLWBUFLX] = SLAREC.SLATRBY;
    SL0LWB1.SL0LWSQT = SL0LWB1.SL0LWSQT + SL0LWB1.SL0LWQT2[SLWBUFLX];
    SL0LW01.SL0LWIX1 = SL0LW01.SL0LWIX1 + 1;

     /* for canada since the time and user id is display with the size/*/
     /* quantity there is not third nor forth size/quantity on the line*/
     /* DLVRUSA STARTS - SAIRAM*/
     /* IF SL0LM110.XWHCD EQ '42';*/
    if (SL0LM110.XWHCD != "02")
     /* DLVRUSA ENDS   - SAIRAM*/
      SL0LW01.SL0LWIX1 = 1;
    end

    return;
  end

  if (SL0LW01.SL0LWIX1 == 3)
    SL0LWB1.SL0LWSZ3[SLWBUFLX] = SYPREC.SY4IDDSC[SL0LWID1];
    SL0LWB1.SL0LWQT3[SLWBUFLX] = SLAREC.SLATRQTY;
    SL0LWB1.SL0LWSQT = SL0LWB1.SL0LWSQT + SL0LWB1.SL0LWQT3[SLWBUFLX];
    SL0LW01.SL0LWIX1 = SL0LW01.SL0LWIX1 + 1;
    return;
  end

  if (SL0LW01.SL0LWIX1 == 4)
    SL0LWB1.SL0LWSZ4[SLWBUFLX] = SYPREC.SY4IDDSC[SL0LWID1];
    SL0LWB1.SL0LWQT4[SLWBUFLX] = SLAREC.SLATRQTY;
    SL0LWB1.SL0LWSQT = SL0LWB1.SL0LWSQT + SL0LWB1.SL0LWQT4[SLWBUFLX];
    SL0LW01.SL0LWIX1 = 1;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LS1C

// summary line break processing
Function SL0LS1D()


   /* *** test for summary line break ****/
   /* added 9/27/00  when the number of adjustments is more than a page*/
   /* continue on the next page.*/

  if (SLAREC.XGPCD != SL0LW01.SL0LWSGP
   || SLAREC.SY1STNBR != SL0LW01.SL0LWSSY
   || SLAREC.SY2CLRID != SL0LW01.SL0LWSCR
   || SLAREC.XDMCD != SL0LW01.SL0LWSDM
   || SLAREC.XQACD != SL0LW01.SL0LWSQA
   || SLAREC.XSDCD != SL0LW01.SL0LWSSD
   || SLAREC.XSLCD != SL0LW01.SL0LWSCC
   || SLAREC.XPGCD != SL0LW01.SL0LWSPT
   || SLAREC.XUMCD != SL0LW01.SL0LWSUM
   || SLAREC.XOWCD != SL0LW01.SL0LWSOW
   || SLAREC.IN5TRDCD != SL0LW01.IN5TRDCD
   || SLAREC.IN5TRDOC != SL0LW01.IN5TRDOC
   || SLAREC.IN5TRSUB != SL0LW01.IN5TRSUB
   || SLAREC.SLATRDTE != SL0LW01.SL0LWTDT
   || SLAREC.XIFCD != SL0LW01.SL0LWXIF
   || SLAREC.XITCD != SL0LW01.SL0LWXIT
   || SQLCA.VAGen_SQLCODE == +100
   || (SLWREC.SLWBUFLX == 13
   && SL0LW01.SL0LWIX1 == 1))
     /* ** next sentence***/
  else
    return;
  end

   /* *** is there room for sum line on this sum rec page? ****/
   /* *** if maximum nbr of lines reached, put sum rec page****/
   /* ***  to tsq.                                         ****/

  SLWREC.SLWSUMLX = SLWREC.SLWSUMLX + 1;
  if (SLWREC.SLWSUMLX > SLWREC.SLWLINPP) /* not fit on sum page*/
    TA5REC.TA5APPID = SLWREC.SLWSUMQU;
    TA5REC.TA5FNCCD = "A";
    call "TA0050" (SL0LWS1, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1DA";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end

    SLWREC.SLWSUMLX = 1; /* set up for top of new sum pg*/
    SLWREC.SLWSNXTR = SLWREC.SLWSNXTR + 1; /* increment sum page counter*/
  end

   /* *** move sum line save data to sum buffer area ****/

  SL0LWB1.XGPCD = SL0LW01.SL0LWSGP;
  SL0LWB1.SY1STNBR = SL0LW01.SL0LWSSY;
  SL0LWB1.SY2CLRID = SL0LW01.SL0LWSCR;
  SL0LWB1.XDMCD = SL0LW01.SL0LWSDM;
  SL0LWB1.XQACD = SL0LW01.SL0LWSQA;
  SL0LWB1.XSDCD = SL0LW01.SL0LWSSD;
  SL0LWB1.XSLCD = SL0LW01.SL0LWSCC;
  SL0LWB1.XPGCD = SL0LW01.SL0LWSPT;
  SL0LWB1.XUMCD = SL0LW01.SL0LWSUM;
  SL0LWB1.XOWCD = SL0LW01.SL0LWSOW;
  SL0LWB1.IN5TRDCD = SL0LW01.IN5TRDCD;
  SL0LWB1.SL0LWTDC = SL0LW01.IN5TRDOC;
  SL0LWB1.SL0LWTSB = SL0LW01.IN5TRSUB;
  SL0LWB1.SL0LWTYY = SL0LW01.SL0LWSYY;
  SL0LWB1.SL0LWTMM = SL0LW01.SL0LWSMM;
  SL0LWB1.SL0LWTDD = SL0LW01.SL0LWSDD;
  SL0LWB1.SL0LWTFN = SL0LW01.SL0LWFLD;
  SL0LWB1.XITCD = SL0LW01.SL0LWXIT;

   /* *** make sure have room for detail line on this        ****/
   /* ***  detail rec page.  if max nbr of lines reached,    ****/
   /* ***  put det rec page to tsq.                          ****/

  SL0LW01.SL0LWDLL = SLWREC.SLWLINPP - SLWREC.SLWDETLX; /* calc lines left*/
  SL0LW01.SL0LWDLL = SL0LW01.SL0LWDLL - 1;
                                   /* to account for sum line in det*/

  if (SLWREC.SLWBUFLX > SL0LW01.SL0LWDLL) /* not fit on det rec page*/

     /* add blank lines to fill out page if lines are left on page*/

    while (SLWREC.SLWDETLX != SLWREC.SLWLINPP) /* lines left on page*/
      SLWREC.SLWDETLX = SLWREC.SLWDETLX + 1; /* increment line index*/
      SL0LWD1.SL0LWRTY[SLWDETLX] = "B"; /* add a blank line*/
    end

    TA5REC.TA5APPID = SLWREC.SLWDETQU;
    TA5REC.TA5FNCCD = "A";
    call "TA0050" (SL0LWD1, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1DB";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end

    SLWREC.SLWDETLX = 1; /* position for sum on new det page*/
    SLWREC.SLWDNXTR = SLWREC.SLWDNXTR + 1; /* increment det page counter*/
  else
    SLWREC.SLWDETLX = SLWREC.SLWDETLX + 1; /* setup for sum on det curr pg*/
  end

   /* *** move sum & det page nbrs to sum & det rec ****/
   /* ***  page nbr fields.                         ****/

  SL0LWD1.SL0LWSPG[SLWDETLX] = SLWREC.SLWSNXTR;
  SL0LWS1.SL0LWDPG[SLWSUMLX] = SLWREC.SLWDNXTR;

   /* *** move sum buffer line to sum & det rec pages ****/

  SL0LWS1.SL0LWRTY[SLWSUMLX] = "S";
  SL0LWS1.SL0LWSD1[SLWSUMLX] = SL0LWB1.SL0LWSM1;
  SL0LWD1.SL0LWRTY[SLWDETLX] = "S";
  SL0LWD1.SL0LWDD1[SLWDETLX] = SL0LWB1.SL0LWSM1;

   /* *** move detail buffer lines to detail rec page ****/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWBUFLX)
    SLWREC.SLWDETLX = SLWREC.SLWDETLX + 1;
    SL0LWD1.SL0LWRTY[SLWDETLX] = "D";
    SL0LWD1.SL0LWDD1[SLWDETLX] = SL0LWB1.SL0LWDT1[SLWIDX01];
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* *** if room on det rec page, put blank line after ****/
   /* ***  last detail.                                 ****/

  if (SLWREC.SLWDETLX < SLWREC.SLWLINPP)
    SLWREC.SLWDETLX = SLWREC.SLWDETLX + 1;
    SL0LWD1.SL0LWRTY[SLWDETLX] = "B";
  end

  SL0LS1B(); /* save sum line data*/

   /* *** reinitialize fields for new group processing ****/

  SLWREC.SLWBUFLX = 0;
  SL0LWB1.SL0LWSQT = 0;
  SL0LW01.SL0LWIX1 = 1;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LS1D

// product break processing
Function SL0LS1E()


   /* *** test for product break ****/

  if (SLAREC.XGPCD != SL0LW01.SL0LWDGP
   || SLAREC.SY1STNBR != SL0LW01.SL0LWDSY
   || SLAREC.SY2CLRID != SL0LW01.SL0LWDCR
   || SLAREC.XDMCD != SL0LW01.SL0LWDDM
   || SLAREC.XQACD != SL0LW01.SL0LWDQA)
     /* ** next sentence ***/
  else
    return;
  end

   /* *** obtain valid size descriptions ****/

  set SYPREC empty;
  SYPREC.XGPCD = SLAREC.XGPCD;
  SYPREC.SY1STNBR = SLAREC.SY1STNBR;
  SYPREC.SY2CLRID = SLAREC.SY2CLRID;
  SYPREC.XDMCD = SLAREC.XDMCD;
  SYPREC.XQACD = SLAREC.XQACD;

  SL0LSAA(); /* perform size translation call*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0LS1A(); /* save product key data*/


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LS1E

// last group processing
Function SL0LS1F()


   /* *** fill in rest of last sum rec page with blank lines ****/

  while (SLWREC.SLWSUMLX < SLWREC.SLWLINPP)
    SLWREC.SLWSUMLX = SLWREC.SLWSUMLX + 1;
    SL0LWS1.SL0LWRTY[SLWSUMLX] = "B";
  end

   /* *** add last sum rec page to tsq ****/

  TA5REC.TA5APPID = SLWREC.SLWSUMQU;
  TA5REC.TA5FNCCD = "A";
  call "TA0050" (SL0LWS1, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1FA";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* *** save maximum number of summary records ****/

  SLWREC.SLWSMAXR = TA5REC.TA5TSQIX;

   /* *** fill in rest of last det rec page with blank lines ****/

  while (SLWREC.SLWDETLX < SLWREC.SLWLINPP)
    SLWREC.SLWDETLX = SLWREC.SLWDETLX + 1;
    SL0LWD1.SL0LWRTY[SLWDETLX] = "B";
  end

   /* *** add last det rec page to tsq ****/

  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5FNCCD = "A";
  call "TA0050" (SL0LWD1, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1FB";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* *** keep track of last detail relative record number ****/

  SLWREC.SLWDMAXR = TA5REC.TA5TSQIX;

   /* **********************************************************/
   /* *** end of statement group                            ****/
   /* **********************************************************/


end // end SL0LS1F

// obtain first sum rec page
Function SL0LS1G()


  TA5REC.TA5APPID = SLWREC.SLWSUMQU;
  TA5REC.TA5TSQIX = 0001;
  TA5REC.TA5FNCCD = "R";
  call "TA0050" (SL0LWS1, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1GA";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  SLWREC.SLWSUMIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0LS1G

// obtain first det rec page
Function SL0LS1H()


  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5TSQIX = 0001;
  TA5REC.TA5FNCCD = "R";
  call "TA0050" (SL0LWD1, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1HA";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  SLWREC.SLWDETIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0LS1H

// save summary line data
Function SL0LS2B()


  SL0LW02.XSDCD = SLAREC.XSDCD;
  SL0LW02.XSLCD = SLAREC.XSLCD;
  SL0LW02.XPGCD = SLAREC.XPGCD;
  SL0LW02.XUMCD = SLAREC.XUMCD;
  SL0LW02.XOWCD = SLAREC.XOWCD;
  SL0LW02.XARCD = SLAREC.XARCD;
  SL0LW02.SL4ZONE = SLAREC.SL4ZONE;
  SL0LW02.SL5LOCTN = SLAREC.SL5LOCTN;
  SL0LW02.IN5TRDCD = SLAREC.IN5TRDCD;
  SL0LW02.IN5TRDOC = SLAREC.IN5TRDOC;
  SL0LW02.IN5TRSUB = SLAREC.IN5TRSUB;
  SL0LW02.SL0LWTDT = SLAREC.SLATRDTE;
  SL0LW02.SL0LWXIF = SLAREC.XIFCD;
  SL0LW02.SL0LWXIT = SLAREC.XITCD;
  SL0LW02.XIRCD = SLAREC.XIRCD;

   /* ****************************************************/
   /* *** end of statement group                      ****/
   /* ****************************************************/


end // end SL0LS2B

// format size det in det buffer
Function SL0LS2C()


  SL0LW02.SL0LWID2 = SLAREC.SY5SZID; /* set syprec size subscript*/

   /* 08/30/00 format time to be displayed on detail line.*/
  SL0LW02.SL0LWSTM = SLAREC.ZZHHMMSS; /* load adjust time*/
  SL0LW02.SL0LWMHH = SL0LW02.SL0LWSHH; /* format hour for map*/
  SL0LW02.SL0LWMC1 = ":"; /* load first colon*/
  SL0LW02.SL0LWMMN = SL0LW02.SL0LWSMN; /* format minutes for map*/
  SL0LW02.SL0LWMC2 = ":"; /* load second colon*/
  SL0LW02.SL0LWMSS = SL0LW02.SL0LWSSS; /* format seconds for map*/

  if (SL0LW02.SL0LWIX2 == 1)
    SLWREC.SLWBUFLX = SLWREC.SLWBUFLX + 1;
    SL0LWB2.SL0LWSZ2[SLWBUFLX] = "     ";
    SL0LWB2.SL0LWQT2[SLWBUFLX] = 0;
    SL0LWB2.SL0LWTM2[SLWBUFLX] = "        ";
    SL0LWB2.SL0LWBY2[SLWBUFLX] = "        ";
    SL0LWB2.SL0LWSZ3[SLWBUFLX] = "     ";
    SL0LWB2.SL0LWQT3[SLWBUFLX] = 0;
    SL0LWB2.SL0LWSZ4[SLWBUFLX] = "     ";
    SL0LWB2.SL0LWQT4[SLWBUFLX] = 0;
    SL0LWB2.SL0LWSZ1[SLWBUFLX] = SYPREC.SY4IDDSC[SL0LWID2];
    SL0LWB2.SL0LWQT1[SLWBUFLX] = SLAREC.SLATRQTY;
    SL0LWB2.SL0LWTM1[SLWBUFLX] = SL0LW02.SL0LWMTM;
    SL0LWB2.SL0LWBY1[SLWBUFLX] = SLAREC.SLATRBY;
    SL0LWB2.SL0LWSQT = SL0LWB2.SL0LWSQT + SL0LWB2.SL0LWQT1[SLWBUFLX];
    SL0LW02.SL0LWIX2 = SL0LW02.SL0LWIX2 + 1;
    return;
  end

  if (SL0LW02.SL0LWIX2 == 2)
    SL0LWB2.SL0LWSZ2[SLWBUFLX] = SYPREC.SY4IDDSC[SL0LWID2];
    SL0LWB2.SL0LWQT2[SLWBUFLX] = SLAREC.SLATRQTY;
    SL0LWB2.SL0LWTM2[SLWBUFLX] = SL0LW02.SL0LWMTM;
    SL0LWB2.SL0LWBY2[SLWBUFLX] = SLAREC.SLATRBY;
    SL0LWB2.SL0LWSQT = SL0LWB2.SL0LWSQT + SL0LWB2.SL0LWQT2[SLWBUFLX];
    SL0LW02.SL0LWIX2 = SL0LW02.SL0LWIX2 + 1;

     /* for canada since the time and user id is display with the size/*/
     /* quantity there is not third nor forth size/quantity on the line*/
     /* DLVRUSA STARTS - SAIRAM*/
     /* IF SL0LM210.XWHCD EQ '42';*/
    if (SL0LM210.XWHCD != "02")
     /* DLVRUSA ENDS   - SAIRAM*/
      SL0LW02.SL0LWIX2 = 1;
    end

    return;
  end

  if (SL0LW02.SL0LWIX2 == 3)
    SL0LWB2.SL0LWSZ3[SLWBUFLX] = SYPREC.SY4IDDSC[SL0LWID2];
    SL0LWB2.SL0LWQT3[SLWBUFLX] = SLAREC.SLATRQTY;
    SL0LWB2.SL0LWSQT = SL0LWB2.SL0LWSQT + SL0LWB2.SL0LWQT3[SLWBUFLX];
    SL0LW02.SL0LWIX2 = SL0LW02.SL0LWIX2 + 1;
    return;
  end

  if (SL0LW02.SL0LWIX2 == 4)
    SL0LWB2.SL0LWSZ4[SLWBUFLX] = SYPREC.SY4IDDSC[SL0LWID2];
    SL0LWB2.SL0LWQT4[SLWBUFLX] = SLAREC.SLATRQTY;
    SL0LWB2.SL0LWSQT = SL0LWB2.SL0LWSQT + SL0LWB2.SL0LWQT4[SLWBUFLX];
    SL0LW02.SL0LWIX2 = 1;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LS2C

// summary line break processing
Function SL0LS2D()


   /* *** test for summary line break ****/
   /* added 9/27/00  when the number of adjustments is more than a page*/
   /* continue on the next page.*/

  if (SLAREC.XSDCD != SL0LW02.XSDCD
   || SLAREC.XSLCD != SL0LW02.XSLCD
   || SLAREC.XPGCD != SL0LW02.XPGCD
   || SLAREC.XUMCD != SL0LW02.XUMCD
   || SLAREC.XOWCD != SL0LW02.XOWCD
   || SLAREC.XARCD != SL0LW02.XARCD
   || SLAREC.SL4ZONE != SL0LW02.SL4ZONE
   || SLAREC.SL5LOCTN != SL0LW02.SL5LOCTN
   || SLAREC.IN5TRDCD != SL0LW02.IN5TRDCD
   || SLAREC.IN5TRDOC != SL0LW02.IN5TRDOC
   || SLAREC.IN5TRSUB != SL0LW02.IN5TRSUB
   || SLAREC.SLATRDTE != SL0LW02.SL0LWTDT
   || SLAREC.XIFCD != SL0LW02.SL0LWXIF
   || SLAREC.XITCD != SL0LW02.SL0LWXIT
   || SLAREC.XIRCD != SL0LW02.XIRCD
   || SQLCA.VAGen_SQLCODE == +100
   || (SLWREC.SLWBUFLX == 13
   && SL0LW02.SL0LWIX2 == 1))
     /* ** next sentence***/
  else
    return;
  end

   /* *** is there room for sum line on this sum rec page? ****/
   /* *** if maximum nbr of lines reached, put sum rec page****/
   /* ***  to tsq.                                         ****/

  SLWREC.SLWSUMLX = SLWREC.SLWSUMLX + 1;
  if (SLWREC.SLWSUMLX > SLWREC.SLWLINPP) /* not fit on sum page*/
    TA5REC.TA5APPID = SLWREC.SLWSUMQU;
    TA5REC.TA5FNCCD = "A";
    call "TA0050" (SL0LWS2, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2DA";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end

    SLWREC.SLWSUMLX = 1; /* set up for top of new sum pg*/
    SLWREC.SLWSNXTR = SLWREC.SLWSNXTR + 1; /* increment sum page counter*/
  end

   /* *** move sum line save data to sum buffer area ****/

  SL0LWB2.XSDCD = SL0LW02.XSDCD;
  SL0LWB2.XSLCD = SL0LW02.XSLCD;
  SL0LWB2.XPGCD = SL0LW02.XPGCD;
  SL0LWB2.XUMCD = SL0LW02.XUMCD;
  SL0LWB2.XOWCD = SL0LW02.XOWCD;
  SL0LWB2.XARCD = SL0LW02.XARCD;
  SL0LWB2.SL4ZONE = SL0LW02.SL4ZONE;
  SL0LWB2.SL5LOCTN = SL0LW02.SL5LOCTN;
  SL0LWB2.IN5TRDCD = SL0LW02.IN5TRDCD;
  SL0LWB2.SL0LWTDC = SL0LW02.IN5TRDOC;
  SL0LWB2.SL0LWTSB = SL0LW02.IN5TRSUB;
  SL0LWB2.SL0LWTYY = SL0LW02.SL0LWSYY;
  SL0LWB2.SL0LWTMM = SL0LW02.SL0LWSMM;
  SL0LWB2.SL0LWTDD = SL0LW02.SL0LWSDD;
  SL0LWB2.SL0LWTFN = SL0LW02.SL0LWFLD;
  SL0LWB2.XITCD = SL0LW02.SL0LWXIT;
  SL0LWB2.XIRCD = SL0LW02.XIRCD;

   /* *** make sure have room for detail line on this        ****/
   /* ***  detail rec page.  if max nbr of lines reached,    ****/
   /* ***  put det rec page to tsq.                          ****/

  SL0LW02.SL0LWDLL = SLWREC.SLWLINPP - SLWREC.SLWDETLX; /* calc lines left*/
  SL0LW02.SL0LWDLL = SL0LW02.SL0LWDLL - 1;
                                   /* to account for sum line in det*/

  if (SLWREC.SLWBUFLX > SL0LW02.SL0LWDLL) /* not fit on det rec page*/

     /* add blank lines to fill page if lines left on page*/

    while (SLWREC.SLWDETLX != SLWREC.SLWLINPP) /* lines left on page*/
      SLWREC.SLWDETLX = SLWREC.SLWDETLX + 1; /* increment line index*/
      SL0LWD2.SL0LWRTY[SLWDETLX] = "B"; /* put blank line in buffer*/
    end

    TA5REC.TA5APPID = SLWREC.SLWDETQU;
    TA5REC.TA5FNCCD = "A";
    call "TA0050" (SL0LWD2, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2DB";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end

    SLWREC.SLWDETLX = 1; /* position for sum on new det page*/
    SLWREC.SLWDNXTR = SLWREC.SLWDNXTR + 1; /* increment det page counter*/
  else
    SLWREC.SLWDETLX = SLWREC.SLWDETLX + 1; /* setup for sum on det curr pg*/
  end

   /* *** move sum & det page nbrs to sum & det rec ****/
   /* ***  page nbr fields.                         ****/

  SL0LWD2.SL0LWSPG[SLWDETLX] = SLWREC.SLWSNXTR;
  SL0LWS2.SL0LWDPG[SLWSUMLX] = SLWREC.SLWDNXTR;

   /* *** move sum buffer line to sum & det rec pages ****/

  SL0LWS2.SL0LWRTY[SLWSUMLX] = "S";
  SL0LWS2.SL0LWSD2[SLWSUMLX] = SL0LWB2.SL0LWSM2;
  SL0LWD2.SL0LWRTY[SLWDETLX] = "S";
  SL0LWD2.SL0LWDD2[SLWDETLX] = SL0LWB2.SL0LWSM2;

   /* *** move detail buffer lines to detail rec page ****/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWBUFLX)
    SLWREC.SLWDETLX = SLWREC.SLWDETLX + 1;
    SL0LWD2.SL0LWRTY[SLWDETLX] = "D";
    SL0LWD2.SL0LWDD2[SLWDETLX] = SL0LWB2.SL0LWDT2[SLWIDX01];
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* *** if room on det rec page, put blank line after ****/
   /* ***  last detail.                                 ****/

  if (SLWREC.SLWDETLX < SLWREC.SLWLINPP)
    SLWREC.SLWDETLX = SLWREC.SLWDETLX + 1;
    SL0LWD2.SL0LWRTY[SLWDETLX] = "B";
  end

  SL0LS2B(); /* save sum line data*/

   /* *** reinitialize fields for new group processing ****/

  SLWREC.SLWBUFLX = 0;
  SL0LWB2.SL0LWSQT = 0;
  SL0LW02.SL0LWIX2 = 1;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LS2D

// last group processing
Function SL0LS2F()


   /* *** fill in rest of last sum rec page with blank lines ****/

  while (SLWREC.SLWSUMLX < SLWREC.SLWLINPP)
    SLWREC.SLWSUMLX = SLWREC.SLWSUMLX + 1;
    SL0LWS2.SL0LWRTY[SLWSUMLX] = "B";
  end

   /* *** add last sum rec page to tsq ****/

  TA5REC.TA5APPID = SLWREC.SLWSUMQU;
  TA5REC.TA5FNCCD = "A";
  call "TA0050" (SL0LWS2, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2FA";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* *** save maximum number of summary records ****/

  SLWREC.SLWSMAXR = TA5REC.TA5TSQIX;

   /* *** fill in rest of last det rec page with blank lines ****/

  while (SLWREC.SLWDETLX < SLWREC.SLWLINPP)
    SLWREC.SLWDETLX = SLWREC.SLWDETLX + 1;
    SL0LWD2.SL0LWRTY[SLWDETLX] = "B";
  end

   /* *** add last det rec page to tsq ****/

  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5FNCCD = "A";
  call "TA0050" (SL0LWD2, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2FB";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* *** keep track of last detail relative record number ****/

  SLWREC.SLWDMAXR = TA5REC.TA5TSQIX;

   /* **********************************************************/
   /* *** end of statement group                            ****/
   /* **********************************************************/


end // end SL0LS2F

// obtain first sum rec page
Function SL0LS2G()


  TA5REC.TA5APPID = SLWREC.SLWSUMQU;
  TA5REC.TA5TSQIX = 0001;
  TA5REC.TA5FNCCD = "R";
  call "TA0050" (SL0LWS2, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2GA";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  SLWREC.SLWSUMIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0LS2G

// obtain first det rec page
Function SL0LS2H()


  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5TSQIX = 0001;
  TA5REC.TA5FNCCD = "R";
  call "TA0050" (SL0LWD2, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2HA";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  SLWREC.SLWDETIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LS2H

// format & submit jcl
Function SL0LS3B()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/
  SLWREC.SLWIDX02 = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SL0LT03.TARTYPE[SLWIDX02] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user area*/
      /* ------------------------------------------------------------*/

      SL0LW03.SL0LWWHS = SL0LM310.XWHCD;
      SL0LW03.SL0LWSDT = SL0LM310.SL0LMSDT;
      SL0LW03.SL0LWEDT = SL0LM310.SL0LMEDT;

      SLWREC.SLWIDX01 = 1;
      while (SLWREC.SLWIDX01 <= 6)
        if (SL0LM310.XARCD[SLWIDX01] != "  ")
          SL0LW03.XARCD = SL0LM310.XARCD[SLWIDX01];
          SL0LW03.SL4ZONE = SL0LM310.SL4ZONE[SLWIDX01];
          SL0LW03.SL5LOCTN = SL0LM310.SL5LOCTN[SLWIDX01];

          TA6REC.TARJCL[TA6INDEX] = SL0LW03.SL0LWPRM; /* Parametrs*/
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

        end

        SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;

      end

      TA6REC.TA6INDEX = TA6REC.TA6INDEX - 1; /* Keep table position*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SL0LT03.TARJCL[SLWIDX02]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SL0LT03.TARTYPE[SLWIDX02]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SL0LT03.TARJCL[SLWIDX02] == "/*EOF") /* End of Table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  if (SL0LM310.SL0LMPID == " ")
    TA6REC.TA6SUBSW = "Y"; /* display map, tailor and submit JCL*/
  else
    TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  end

  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/
  TA6REC.XURDEST = SL0LM310.SL0LMPID; /* Destination*/

  set TA3REC empty;
  TA3REC.TA3OPTN = "USRNAME";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   || TA3REC.TA3RTNCD == "0")       

    TA6REC.XURUSRNM = TA3REC.TA3USRID;
  else
    /* ------------------------------------------------------------*/
     /* Call not successful, ta0p scr will ask for output recepient*/
    /* ------------------------------------------------------------*/
  end

  XPTA0P();

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWFTMSW = "N";
  if (sysVar.errorCode == "00000000" /* Call successful*/
   || TA6REC.TA6RTNCD == "0")       

    SLWREC.SLWMSGNO = 59; /* job submitted message*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    SLWREC.SLWMSGNO = 58; /* Unexpected error occurred*/
    SLWREC.SLWERRSW = "Y";

  end

  if (TA6REC.TA6RTNCD == "1") /* Call was cancelled*/
    TA6REC.XURDEST = "      ";
  end


end // end SL0LS3B

// format & submit jcl
Function SL0LS3C()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/
  SLWREC.SLWIDX02 = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SL0LT05.TARTYPE[SLWIDX02] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user area*/
      /* ------------------------------------------------------------*/

      SL0LW05.XWHCD = SL0LM310.XWHCD;
      SL0LW05.SL0LWSDT = SL0LM310.SL0LMSDT;
      SL0LW05.SL0LWEDT = SL0LM310.SL0LMEDT;

      SLWREC.SLWIDX01 = 1;
      while (SLWREC.SLWIDX01 <= 6)
        if (SL0LM310.XARCD[SLWIDX01] != "  ")
          SL0LW05.XARCD[SLWIDX01] = SL0LM310.XARCD[SLWIDX01];
          SL0LW05.SL4ZONE[SLWIDX01] = SL0LM310.SL4ZONE[SLWIDX01];
          SL0LW05.SL5LOCTN[SLWIDX01] = SL0LM310.SL5LOCTN[SLWIDX01];

        end

        SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;

      end

      TA6REC.TARJCL[TA6INDEX] = SL0LW05.SL0LWPRM; /* Parametrs*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SL0LT05.TARJCL[SLWIDX02]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SL0LT05.TARTYPE[SLWIDX02]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SL0LT05.TARJCL[SLWIDX02] == "/*EOF") /* End of Table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  if (SL0LM310.SL0LMPID == " ")
    TA6REC.TA6SUBSW = "Y"; /* display map, tailor and submit JCL*/
  else
    TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  end

  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/
  TA6REC.XURDEST = SL0LM310.SL0LMPID; /* Destination*/

  set TA3REC empty;
  TA3REC.TA3OPTN = "USRNAME";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   || TA3REC.TA3RTNCD == "0")       

    TA6REC.XURUSRNM = TA3REC.TA3USRID;
  else
    /* ------------------------------------------------------------*/
     /* Call not successful, ta0p scr will ask for output recepient*/
    /* ------------------------------------------------------------*/
  end

  XPTA0P();

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWFTMSW = "N";
  if (sysVar.errorCode == "00000000" /* Call successful*/
   || TA6REC.TA6RTNCD == "0")       

    SLWREC.SLWMSGNO = 59; /* job submitted message*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    SLWREC.SLWMSGNO = 58; /* Unexpected error occurred*/
    SLWREC.SLWERRSW = "Y";

  end

  if (TA6REC.TA6RTNCD == "1") /* Call was cancelled*/
    TA6REC.XURDEST = "      ";
  end


end // end SL0LS3C

// format & submit JCL
Function SL0LS4B()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/
  SLWREC.SLWIDX02 = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SL0LT04.TARTYPE[SLWIDX02] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user area*/
      /* ------------------------------------------------------------*/

      SL0LW04.SL0LWWHS = SL0LM410.XWHCD;
      SL0LW04.SL0LWSDT = SL0LM410.SL0LMSDT;
      SL0LW04.SL0LWEDT = SL0LM410.SL0LMEDT;

      SLWREC.SLWIDX01 = 1;
      while (SLWREC.SLWIDX01 <= 5)
        if (SL0LM410.SY1STNBR[SLWIDX01] != "      ")
          SL0LW04.XGPCD = SL0LM410.XGPCD[SLWIDX01];
          SL0LW04.SY1STNBR = SL0LM410.SY1STNBR[SLWIDX01];
          SL0LW04.SY2CLRID = SL0LM410.SY2CLRID[SLWIDX01];
          SL0LW04.XDMCD = SL0LM410.XDMCD[SLWIDX01];
          SL0LW04.XQACD = SL0LM410.XQACD[SLWIDX01];

          TA6REC.TARJCL[TA6INDEX] = SL0LW04.SL0LWPAR; /* Parametrs*/
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

        end

        SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;

      end

      TA6REC.TA6INDEX = TA6REC.TA6INDEX - 1; /* Keep table position*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SL0LT04.TARJCL[SLWIDX02]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SL0LT04.TARTYPE[SLWIDX02]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SL0LT04.TARJCL[SLWIDX02] == "/*EOF") /* End of Table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  if (SL0LM410.SL0LMPID == " ")
    TA6REC.TA6SUBSW = "Y"; /* display map, tailor and submit JCL*/
  else
    TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  end

  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/
  TA6REC.XURDEST = SL0LM410.SL0LMPID; /* Destination*/

  set TA3REC empty;
  TA3REC.TA3OPTN = "USRNAME";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   || TA3REC.TA3RTNCD == "0")       

    TA6REC.XURUSRNM = TA3REC.TA3USRID;
  else
    /* ------------------------------------------------------------*/
     /* Call not successful, ta0p scr will ask for output recepient*/
    /* ------------------------------------------------------------*/
  end

  XPTA0P();

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWFTMSW = "N";
  if (sysVar.errorCode == "00000000" /* Call successful*/
   || TA6REC.TA6RTNCD == "0")       

    SLWREC.SLWMSGNO = 59; /* job submitted message*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    SLWREC.SLWMSGNO = 58; /* Unexpected error occurred*/
    SLWREC.SLWERRSW = "Y";

  end

  if (TA6REC.TA6RTNCD == "1") /* Call was cancelled*/
    TA6REC.XURDEST = "      ";
  end


end // end SL0LS4B

// format & submit JCL
Function SL0LS4C()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/
  SLWREC.SLWIDX02 = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SL0LT06.TARTYPE[SLWIDX02] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user area*/
      /* ------------------------------------------------------------*/

      SL0LW06.XWHCD = SL0LM410.XWHCD;
      SL0LW06.SL0LWSDT = SL0LM410.SL0LMSDT;
      SL0LW06.SL0LWEDT = SL0LM410.SL0LMEDT;

      SLWREC.SLWIDX01 = 1;
      while (SLWREC.SLWIDX01 <= 5)
        if (SL0LM410.SY1STNBR[SLWIDX01] != "      ")
          SL0LW06.XGPCD[SLWIDX01] = SL0LM410.XGPCD[SLWIDX01];
          SL0LW06.SY1STNBR[SLWIDX01] = SL0LM410.SY1STNBR[SLWIDX01];
          SL0LW06.SY2CLRID[SLWIDX01] = SL0LM410.SY2CLRID[SLWIDX01];
          SL0LW06.XDMCD[SLWIDX01] = SL0LM410.XDMCD[SLWIDX01];

        end

        SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;

      end

      TA6REC.TARJCL[TA6INDEX] = SL0LW06.SL0LWPRM; /* Parametrs*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SL0LT06.TARJCL[SLWIDX02]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SL0LT06.TARTYPE[SLWIDX02]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SL0LT06.TARJCL[SLWIDX02] == "/*EOF") /* End of Table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  if (SL0LM410.SL0LMPID == " ")
    TA6REC.TA6SUBSW = "Y"; /* display map, tailor and submit JCL*/
  else
    TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  end

  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/
  TA6REC.XURDEST = SL0LM410.SL0LMPID; /* Destination*/

  set TA3REC empty;
  TA3REC.TA3OPTN = "USRNAME";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   || TA3REC.TA3RTNCD == "0")       

    TA6REC.XURUSRNM = TA3REC.TA3USRID;
  else
    /* ------------------------------------------------------------*/
     /* Call not successful, ta0p scr will ask for output recepient*/
    /* ------------------------------------------------------------*/
  end

  XPTA0P();

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWFTMSW = "N";
  if (sysVar.errorCode == "00000000" /* Call successful*/
   || TA6REC.TA6RTNCD == "0")       

    SLWREC.SLWMSGNO = 59; /* job submitted message*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    SLWREC.SLWMSGNO = 58; /* Unexpected error occurred*/
    SLWREC.SLWERRSW = "Y";

  end

  if (TA6REC.TA6RTNCD == "1") /* Call was cancelled*/
    TA6REC.XURDEST = "      ";
  end


end // end SL0LS4C

// missing input edits
Function SL0LSA0()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0LM010.XMSLMSNO > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA0A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0LM010.XMSLMSNO cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSA0

// missing key inputs edits
Function SL0LSA1()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0LM110.XITCD == "  ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0LM110.XITCD cursor, bold;
  end

  if (SL0LM110.SL0LMXIF == " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0LM110.SL0LMXIF cursor, bold;
  end

  if (SL0LM110.SL5LOCTN == "      ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0LM110.SL5LOCTN cursor, bold;
  end

  if (SL0LM110.SL4ZONE == "  ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1D";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0LM110.SL4ZONE cursor, bold;
  end

  if (SL0LM110.XARCD == "  ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1E";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0LM110.XARCD cursor, bold;
  end

  if (SL0LM110.SL0LMEDT == 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1F";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0LM110.SL0LMEDT cursor, bold;
  end

  if (SL0LM110.SL0LMSDT == 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1G";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0LM110.SL0LMSDT cursor, bold;
  end

  if (SL0LM110.XWHCD == "  ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1H";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0LM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSA1

// missing key inputs edits
Function SL0LSA2()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0LM210.XITCD == "  ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0LM210.XITCD cursor, bold;
  end

  if (SL0LM210.SL0LMXIF == " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0LM210.SL0LMXIF cursor, bold;
  end

  if (SL0LM210.SY1STNBR == "      ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0LM210.SY1STNBR cursor, bold;
  end

  if (SL0LM210.XGPCD == "  ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2D";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0LM210.XGPCD cursor, bold;
  end

  if (SL0LM210.SL0LMEDT == 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2E";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0LM210.SL0LMEDT cursor, bold;
  end

  if (SL0LM210.SL0LMSDT == 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2F";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0LM210.SL0LMSDT cursor, bold;
  end

  if (SL0LM210.XWHCD == "  ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2G";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0LM210.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSA2

// missing input edits
Function SL0LSA3()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/


  SLWREC.SLWFTMSW = "Y";
  SLWREC.SLWIDX01 = 6;
  while (SLWREC.SLWIDX01 >= 1
   && SLWREC.SLWFTMSW == "Y")
    if (SL0LM310.SL5LOCTN[SLWIDX01] > " "
     || SL0LM310.SL4ZONE[SLWIDX01] > " "
     || SL0LM310.XARCD[SLWIDX01] > " ")
      SLWREC.SLWFTMSW = "N";
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  if (SLWREC.SLWFTMSW == "Y") /* location data not entered*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0LM310.XARCD[1] cursor, bold;
    set SL0LM310.SL4ZONE[1] bold;
    set SL0LM310.SL5LOCTN[1] bold;
  end

  if (SL0LM310.SL0LMSDT == 0) /* start date*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0LM310.SL0LMSDT cursor, bold;
  end

  if (SL0LM310.SL0LMEDT == 0) /* end date*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0LM310.SL0LMEDT cursor, bold;
  end

  if (SL0LM310.XWHCD > " ") /* warehouse code*/
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3D";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0LM310.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSA3

// missing input edits
Function SL0LSA4()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0LM410.XOWCD[1] > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0LM410.XOWCD[SLWIDX01] cursor, bold;
  end


  if (SL0LM410.SY1STNBR[1] > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0LM410.SY1STNBR[SLWIDX01] cursor, bold;
  end


  if (SL0LM410.SL0LMSDT == 0) /* start date*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0LM410.SL0LMSDT cursor, bold;
  end

  if (SL0LM410.SL0LMEDT == 0) /* end date*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4D";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0LM410.SL0LMEDT cursor, bold;
  end


  if (SL0LM410.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4E";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0LM410.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSA4

// perform size translation
Function SL0LSAA()


   /* ************************************************************/
   /* *** obtain all valid size data for use during detail    ****/
   /* *** (size) row creatation                               ****/
   /* ************************************************************/

  SYPREC.SYPFC = "PC";
  SYPREC.SYPCMPSW = "N";
  SYPREC.XQACD = "**";

  SL0LSPI(); /* <=== get size xlations*/

  if (SYPREC.SYPRC == 0)
     /* ** next sentence ***/
  else
    if (SYPREC.SYPRC == +09)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SAA1";
      SLWREC.SLWMSGNO = 0031; /* <--- busy try again msg*/
      return;
    end
    if (SYPREC.SYPRC == +10)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SAA2";
      SLWREC.SLWMSGNO = 0057; /* <--- not on SIZE DB*/
      return;
    end
    if (SYPREC.SYPRC == +11)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SAA3";
      SLWREC.SLWMSGNO = 0124; /* <--- not on STYLE DB*/
      return;
    end
    if (SYPREC.SYPRC == +16)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SAA4";
      SLWREC.SLWMSGNO = 0125; /* <--- not on SCALE DB*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SAA5";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSAA

// same key edits
Function SL0LSB1()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw (slwskysw).****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0LM110.XWHCD != SL0LW01.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0LM110.SL0LMSDT != SL0LW01.SL0LWSDT)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0LM110.SL0LMEDT != SL0LW01.SL0LWEDT)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0LM110.XARCD != SL0LW01.XARCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0LM110.SL4ZONE != SL0LW01.SL4ZONE)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0LM110.SL5LOCTN != SL0LW01.SL5LOCTN)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0LM110.SL0LMXIF != SL0LW01.SL0LWTFN)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0LM110.XITCD != SL0LW01.XITCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSB1

// same key edits
Function SL0LSB2()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (slwskysw)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0LM210.XWHCD != SL0LW02.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0LM210.SL0LMSDT != SL0LW02.SL0LWSDT)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0LM210.SL0LMEDT != SL0LW02.SL0LWEDT)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0LM210.XGPCD != SL0LW02.XGPCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0LM210.SY1STNBR != SL0LW02.SY1STNBR)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0LM210.SY2CLRID != SL0LW02.SY2CLRID)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0LM210.XDMCD != SL0LW02.XDMCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0LM210.XQACD != SL0LW02.XQACD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0LM210.SL0LMXIF != SL0LW02.SL0LWTFN)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0LM210.XITCD != SL0LW02.XITCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSB2

// key field edits
Function SL0LSC1()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if transaction type not 'all', is in table, & is    ****/
   /* *** active continue by checking for valid field code.   ****/
   /* ************************************************************/

  if (SL0LM110.XITCD != "A "
   && SL0LM110.XITCD != " A"
   && SL0LM110.XITCD != "AL")
    if (SL0LM110.XITCD in XITTBL.XITCD)
      if (XITTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* ** next sentence ***/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC1A";
        SLWREC.SLWMSGNO = 0010; /* <---inactive msg*/
        set SL0LM110.XITCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1B";
      SLWREC.SLWMSGNO = 0011; /* <---invalid value msg*/
      set SL0LM110.XITCD cursor, bold;
    end
  end
  if (SL0LM110.SL0LMXIF != "1"
   && SL0LM110.SL0LMXIF != "2"
   && SL0LM110.SL0LMXIF != "3"
   && SL0LM110.SL0LMXIF != "4"
   && SL0LM110.SL0LMXIF != "A")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1C";
    SLWREC.SLWMSGNO = 0314; /* <--- only 1,2,3,4,a msg*/
    set SL0LM110.SL0LMXIF cursor, bold;
  end

   /* ************************************************************/
   /* *** validate entered end & start dates using ta0040.    ****/
   /* *** note: defaults to current date.                     ****/
   /* ************************************************************/

  set TA2REC empty;
  TA2REC.TA2GRGAN = SL0LM110.SL0LMEDT;
  TA2REC.TA2CENT = SLWREC.SLWWKCC;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    SL0LW01.SL0LWEDB = TA2REC.TA2GRGGN;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1D";
    SLWREC.SLWMSGNO = 011; /* <---invalid value msg*/
    set SL0LM110.SL0LMEDT cursor, bold;
  end

  set TA2REC empty;
  TA2REC.TA2GRGAN = SL0LM110.SL0LMSDT;
  TA2REC.TA2CENT = SLWREC.SLWWKCC;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    SL0LW01.SL0LWSDB = TA2REC.TA2GRGGN;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1E";
    SLWREC.SLWMSGNO = 011; /* <---invalid value msg*/
    set SL0LM110.SL0LMSDT cursor, bold;
  end

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0LM110.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0LM110.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SL0LM110.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1F";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0LM110.XWHCD cursor, bold;
    end
  else
    SL0LM110.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1G";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0LM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSC1

// key field edits
Function SL0LSC2()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if transaction type not 'all', is in table, & is    ****/
   /* *** active continue by checking for valid field code.   ****/
   /* ************************************************************/

  if (SL0LM210.XITCD != "A "
   && SL0LM210.XITCD != " A"
   && SL0LM210.XITCD != "AL")
    if (SL0LM210.XITCD in XITTBL.XITCD)
      if (XITTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* ** next sentence ***/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC2A";
        SLWREC.SLWMSGNO = 0010; /* <---inactive msg*/
        set SL0LM210.XITCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2B";
      SLWREC.SLWMSGNO = 0011; /* <---invalid value msg*/
      set SL0LM210.XITCD cursor, bold;
    end
  end
   /* ***/
  if (SL0LM210.SL0LMXIF != "1"
   && SL0LM210.SL0LMXIF != "2"
   && SL0LM210.SL0LMXIF != "3"
   && SL0LM210.SL0LMXIF != "4"
   && SL0LM210.SL0LMXIF != "A")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2C";
    SLWREC.SLWMSGNO = 0314; /* <--- only 1,2,3,4,a msg*/
    set SL0LM210.SL0LMXIF cursor, bold;
  end
   /* ***/
  if (SL0LM210.XQACD in XQATBL.XQACD)
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2D";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0LM210.XQACD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2E";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0LM210.XQACD cursor, bold;
  end
   /* ***/
  if (SL0LM210.XDMCD in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      /* next sentence;*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2F";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0LM210.XDMCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2G";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0LM210.XDMCD cursor, bold;
  end
   /* ***/
  if (SL0LM210.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2H";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0LM210.XGPCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2I";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0LM210.XGPCD cursor, bold;
  end

   /* ************************************************************/
   /* *** validate entered end & start dates using ta0040.    ****/
   /* *** note: defaults to current date.                     ****/
   /* ************************************************************/

  set TA2REC empty;
  TA2REC.TA2GRGAN = SL0LM210.SL0LMEDT;
  TA2REC.TA2CENT = SLWREC.SLWWKCC;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    SL0LW02.SL0LWEDB = TA2REC.TA2GRGGN;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2J";
    SLWREC.SLWMSGNO = 011; /* <---invalid value msg*/
    set SL0LM210.SL0LMEDT cursor, bold;
  end

  set TA2REC empty;
  TA2REC.TA2GRGAN = SL0LM210.SL0LMSDT;
  TA2REC.TA2CENT = SLWREC.SLWWKCC;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    SL0LW02.SL0LWSDB = TA2REC.TA2GRGGN;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2K";
    SLWREC.SLWMSGNO = 011; /* <---invalid value msg*/
    set SL0LM210.SL0LMSDT cursor, bold;
  end
   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0LM210.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0LM210.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SL0LM210.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2L";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0LM210.XWHCD cursor, bold;
    end
  else
    SL0LM210.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2M";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0LM210.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSC2

// field edits
Function SL0LSC3()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** validate entered audit selection field.             ****/
   /* ************************************************************/

  if (SL0LM310.SL0LAUDT != "Y"
   && SL0LM310.SL0LAUDT != "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3A";
    SLWREC.SLWMSGNO = 011; /* <---invalid value msg*/
    set SL0LM310.SL0LAUDT cursor, bold;
  end

   /* ************************************************************/
   /* *** validate entered end & start dates using ta0040.    ****/
   /* *** note: defaults to current date.                     ****/
   /* ************************************************************/

  set TA2REC empty;
  TA2REC.TA2GRGAN = SL0LM310.SL0LMEDT;
  TA2REC.TA2CENT = SLWREC.SLWWKCC;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    SL0LW03.SL0LWEDB = TA2REC.TA2GRGGN;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3A";
    SLWREC.SLWMSGNO = 011; /* <---invalid value msg*/
    set SL0LM310.SL0LMEDT cursor, bold;
  end

  set TA2REC empty;
  TA2REC.TA2GRGAN = SL0LM310.SL0LMSDT;
  TA2REC.TA2CENT = SLWREC.SLWWKCC;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    SL0LW03.SL0LWSDB = TA2REC.TA2GRGGN;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3B";
    SLWREC.SLWMSGNO = 011; /* <---invalid value msg*/
    set SL0LM310.SL0LMSDT cursor, bold;
  end


   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0LM310.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      /* *** next sentence******/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3C";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0LM310.XWHCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3D";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0LM310.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSC3

// field edits
Function SL0LSC4()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

    /* ************************************************************/
    /* *** validate entered audit selection field.             ****/
    /* ************************************************************/

  if (SL0LM410.SL0LAUDT != "Y"
   && SL0LM410.SL0LAUDT != "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC4A";
    SLWREC.SLWMSGNO = 011; /* <---invalid value msg*/
    set SL0LM410.SL0LAUDT cursor, bold;
  end

   /* ************************************************************/
   /* *** validate entered end & start dates using ta0040.    ****/
   /* *** note: defaults to current date.                     ****/
   /* ************************************************************/

  set TA2REC empty;
  TA2REC.TA2GRGAN = SL0LM410.SL0LMEDT;
  TA2REC.TA2CENT = SLWREC.SLWWKCC;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    SL0LW04.SL0LWEDB = TA2REC.TA2GRGGN;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC4A";
    SLWREC.SLWMSGNO = 011; /* <---invalid value msg*/
    set SL0LM410.SL0LMEDT cursor, bold;
  end

  set TA2REC empty;
  TA2REC.TA2GRGAN = SL0LM410.SL0LMSDT;
  TA2REC.TA2CENT = SLWREC.SLWWKCC;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    SL0LW04.SL0LWSDB = TA2REC.TA2GRGGN;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC4B";
    SLWREC.SLWMSGNO = 011; /* <---invalid value msg*/
    set SL0LM410.SL0LMSDT cursor, bold;
  end


   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0LM410.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      /* **** next sentence ******/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC4C";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0LM410.XWHCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC4D";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0LM410.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSC4

// key relational edits
Function SL0LSD1()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** start date cannot be greater than the end date      ****/
   /* ************************************************************/

  if (SL0LW01.SL0LWSDB > SL0LW01.SL0LWEDB)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD1A";
    SLWREC.SLWMSGNO = 0022; /* <--- end > start msg*/
    set SL0LM110.SL0LMSDT cursor, bold;
    set SL0LM110.SL0LMEDT bold;
    return;
  end

   /* ************************************************************/
   /* *** cannot be more than 30 days between dates           ****/
   /* *** note: check is non-incluse (re: use of '29')        ****/
   /* ************************************************************/

  set TA2REC empty;
  TA2REC.TA2DBDFN = SL0LW01.SL0LWSDB;
  TA2REC.TA2DBDTN = SL0LW01.SL0LWEDB;
  TA2REC.TA2CENT = SLWREC.SLWWKCC;
  TA2REC.TA2DTOPT = "DAYSDIFF";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    if (TA2REC.TA2DBDDN > 30)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD1B";
      SLWREC.SLWMSGNO = 0023; /* <--- days between exceeded*/
      set SL0LM110.SL0LMEDT cursor, bold;
      set SL0LM110.SL0LMSDT bold;
      return;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD1C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    set SL0LM110.SL0LMEDT cursor, bold;
    set SL0LM110.SL0LMSDT bold;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSD1

// key relational edits
Function SL0LSD2()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** start date cannot be greater than the end date      ****/
   /* ************************************************************/

  if (SL0LW02.SL0LWSDB > SL0LW02.SL0LWEDB)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD2A";
    SLWREC.SLWMSGNO = 0022; /* <--- end > start msg*/
    set SL0LM210.SL0LMSDT cursor, bold;
    set SL0LM210.SL0LMEDT bold;
    return;
  end

   /* ************************************************************/
   /* *** cannot be more than 30 days between dates           ****/
   /* *** note: check is non-incluse (re: use of '29')        ****/
   /* ************************************************************/

  set TA2REC empty;
  TA2REC.TA2DBDFN = SL0LW02.SL0LWSDB;
  TA2REC.TA2DBDTN = SL0LW02.SL0LWEDB;
  TA2REC.TA2CENT = SLWREC.SLWWKCC;
  TA2REC.TA2DTOPT = "DAYSDIFF";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    if (TA2REC.TA2DBDDN > 30)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD2B";
      SLWREC.SLWMSGNO = 0023; /* <--- days between exceeded*/
      set SL0LM210.SL0LMEDT cursor, bold;
      set SL0LM210.SL0LMSDT bold;
      return;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD2C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    set SL0LM210.SL0LMEDT cursor, bold;
    set SL0LM210.SL0LMSDT bold;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSD2

// relational edits
Function SL0LSD3()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** start date cannot be greater than the end date      ****/
   /* ************************************************************/

  if (SL0LW03.SL0LWSDB > SL0LW03.SL0LWEDB)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD3A";
    SLWREC.SLWMSGNO = 0022; /* <--- end > start msg*/
    set SL0LM310.SL0LMSDT cursor, bold;
    set SL0LM310.SL0LMEDT bold;
    return;
  end


   /* ************************************************************/
   /* *** cannot be more than 30 days between dates           ****/
   /* ************************************************************/

  set TA2REC empty;
  TA2REC.TA2DBDFN = SL0LW03.SL0LWSDB;
  TA2REC.TA2DBDTN = SL0LW03.SL0LWEDB;
  TA2REC.TA2CENT = SLWREC.SLWWKCC;
  TA2REC.TA2DTOPT = "DAYSDIFF";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    if (TA2REC.TA2DBDDN > 30)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD3B";
      SLWREC.SLWMSGNO = 0023; /* <--- days between exceeded*/
      set SL0LM310.SL0LMEDT cursor, bold;
      set SL0LM310.SL0LMSDT bold;
      return;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD3C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    set SL0LM310.SL0LMEDT cursor, bold;
    set SL0LM310.SL0LMSDT bold;
    return;
  end



   /* ************************************************************/
   /* *** check location data                                 ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 6;
  while (SLWREC.SLWIDX01 >= 1)
    if (SL0LM310.XARCD[SLWIDX01] != "  ")
      if (SL0LM310.SL5LOCTN[SLWIDX01] == "      ")
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SD3F";
        SLWREC.SLWMSGNO = 0009;
        set SL0LM310.SL5LOCTN[SLWIDX01] cursor, bold;
      end
      if (SL0LM310.SL4ZONE[SLWIDX01] == "  ")
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SD3F";
        SLWREC.SLWMSGNO = 0009;
        set SL0LM310.SL4ZONE[SLWIDX01] cursor, bold;
      end
    else
      if (SL0LM310.SL4ZONE[SLWIDX01] != "  ")
        if (SL0LM310.SL5LOCTN[SLWIDX01] == "      ")
          set SL0LM310.SL5LOCTN[SLWIDX01] bold;
        end
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SD3G";
        SLWREC.SLWMSGNO = 0009;
        set SL0LM310.XARCD[SLWIDX01] cursor, bold;
      else
        if (SL0LM310.SL5LOCTN[SLWIDX01] != "      ")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SD3D";
          SLWREC.SLWMSGNO = 0009;
          set SL0LM310.SL4ZONE[SLWIDX01] bold;
          set SL0LM310.XARCD[SLWIDX01] cursor, bold;
        end
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSD3

// relational edits
Function SL0LSD4()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** start date cannot be greater than the end date      ****/
   /* ************************************************************/

  if (SL0LW04.SL0LWSDB > SL0LW04.SL0LWEDB)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD4A";
    SLWREC.SLWMSGNO = 0022; /* <--- end > start msg*/
    set SL0LM410.SL0LMSDT cursor, bold;
    set SL0LM410.SL0LMEDT bold;
    return;
  end


   /* ************************************************************/
   /* *** cannot be more than 30 days between dates           ****/
   /* ************************************************************/

  set TA2REC empty;
  TA2REC.TA2DBDFN = SL0LW04.SL0LWSDB;
  TA2REC.TA2DBDTN = SL0LW04.SL0LWEDB;
  TA2REC.TA2CENT = SLWREC.SLWWKCC;
  TA2REC.TA2DTOPT = "DAYSDIFF";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    if (TA2REC.TA2DBDDN > 30)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD4B";
      SLWREC.SLWMSGNO = 0023; /* <--- days between exceeded*/
      set SL0LM410.SL0LMEDT cursor, bold;
      set SL0LM410.SL0LMSDT bold;
      return;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD4C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    set SL0LM410.SL0LMEDT cursor, bold;
    set SL0LM410.SL0LMSDT bold;
    return;
  end



   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSD4

// obtain table data
Function SL0LSE1()


   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSE1

// obtain table data
Function SL0LSE2()


   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSE2

// save current key value(s)
Function SL0LSF1()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0LM110.XWHCD;

  SL0LW01.XWHCD = SL0LM110.XWHCD;
  SL0LW01.SL0LWSDT = SL0LM110.SL0LMSDT;
  SL0LW01.SL0LWEDT = SL0LM110.SL0LMEDT;
  SL0LW01.XARCD = SL0LM110.XARCD;
  SL0LW01.SL4ZONE = SL0LM110.SL4ZONE;
  SL0LW01.SL5LOCTN = SL0LM110.SL5LOCTN;
  SL0LW01.SL0LWTFN = SL0LM110.SL0LMXIF;
  SL0LW01.XITCD = SL0LM110.XITCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSF1

// save current key value(s)
Function SL0LSF2()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0LM210.XWHCD;

  SL0LW02.XWHCD = SL0LM210.XWHCD;
  SL0LW02.SL0LWSDT = SL0LM210.SL0LMSDT;
  SL0LW02.SL0LWEDT = SL0LM210.SL0LMEDT;
  SL0LW02.XGPCD = SL0LM210.XGPCD;
  SL0LW02.SY1STNBR = SL0LM210.SY1STNBR;
  SL0LW02.SY2CLRID = SL0LM210.SY2CLRID;
  SL0LW02.XDMCD = SL0LM210.XDMCD;
  SL0LW02.XQACD = SL0LM210.XQACD;
  SL0LW02.SL0LWTFN = SL0LM210.SL0LMXIF;
  SL0LW02.XITCD = SL0LM210.XITCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSF2

// setup map key fields
Function SL0LSG1()


   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0LM110.XWHCD = SL0LW01.XWHCD;
  SL0LM110.SL0LMSDT = SL0LW01.SL0LWSDT;
  SL0LM110.SL0LMEDT = SL0LW01.SL0LWEDT;
  SL0LM110.XARCD = SL0LW01.XARCD;
  SL0LM110.SL4ZONE = SL0LW01.SL4ZONE;
  SL0LM110.SL5LOCTN = SL0LW01.SL5LOCTN;
  SL0LM110.SL0LMXIF = SL0LW01.SL0LWTFN;
  SL0LM110.XITCD = SL0LW01.XITCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSG1

// setup map key fields
Function SL0LSG2()


   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0LM210.XWHCD = SL0LW02.XWHCD;
  SL0LM210.SL0LMSDT = SL0LW02.SL0LWSDT;
  SL0LM210.SL0LMEDT = SL0LW02.SL0LWEDT;
  SL0LM210.XGPCD = SL0LW02.XGPCD;
  SL0LM210.SY1STNBR = SL0LW02.SY1STNBR;
  SL0LM210.SY2CLRID = SL0LW02.SY2CLRID;
  SL0LM210.XDMCD = SL0LW02.XDMCD;
  SL0LM210.XQACD = SL0LW02.XQACD;
  SL0LM210.SL0LMXIF = SL0LW02.SL0LWTFN;
  SL0LM210.XITCD = SL0LW02.XITCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSG2

// ENTER processing
Function SL0LSH0()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0LSA0(); /* <=== missing input edits*/

   /* ************************************************************/
   /* *** no missing fields:                                  ****/
   /* *** invalid selection detected in flow when             ****/
   /* *** transfer of control is attempted                    ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSH0

// ENTER processing
Function SL0LSH1()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0LSA1(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: save key will be blank & NOT = on first time  ****/
   /* *** note: slwskysw=Y; if fields NOT changed (=same key) ****/
   /* ************************************************************/

  SL0LSB1(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "Y")
     /* ************************************************************/
     /* *** if same key fields & enter last used: setup error   ****/
     /* ************************************************************/
    if (SLWREC.SLWLASPF == "E")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SH1A";
      SLWREC.SLWMSGNO = 0005; /* <--- new input required msg*/
      return;
    end
     /* ************************************************************/
     /* *** since last pfkey was NOT ENTER (was pf6) & key is   ****/
     /* ***   same: find the corresponding sum page as on det,  ****/
     /* ***   get to top of that page, & setup this page of sum ****/
     /* ***   data lines for display.                           ****/
     /* *** note: last pfkey can't be blank (first time thru)   ****/
     /* ***       re: same key checks will eq 'n'               ****/
     /* ************************************************************/
    SLWREC.SLWLASPF = "E";
    SL0LSU1(); /* <=== match to a sum rec page*/
    if (SLWREC.SLWERRSW == "Y")
      SL0LST1(); /* <=== reset screen (empty)*/
      return;
    end
    SL0LSO1(); /* <=== setup left sum scrn*/
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  SL0LSC1(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0LSD1(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    SL0LSF1(); /* <=== save current key value(s)*/
    SL0LST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses             ****/
   /* ************************************************************/

  SL0LSE1(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0LSF1(); /* <=== save current key value(s)*/
    SL0LST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as ENTER  ****/
   /* ************************************************************/

  SL0LSF1(); /* <=== save current key value(s)*/

  SLWREC.SLWLASPF = "E";

   /* ************************************************************/
   /* *** data present & changed: purge both tsqs             ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

  if (SLWREC.SLWERRSW == "Y")
    SL0LST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup summary tsq & obtain first sum page****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    SL0LM110.XMSLMSEL[SLWIDX01] = " ";
    set SL0LM110.XMSLMSEL[SLWIDX01] skip, invisible;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  SL0LSS1(); /* <=== setup all pages in tsq*/

  if (SLWREC.SLWERRSW == "Y")
    SL0LST1(); /* <=== reset screen (empty)*/
    return;
  end

  SL0LS1G(); /* <=== obtain first sum page*/

   /* ************************************************************/
   /* *** setup sum screen                                    ****/
   /* ************************************************************/

  SL0LSO1(); /* <=== setup left sum scrn*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSH1

// ENTER processing
Function SL0LSH2()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0LSA2(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: save key will be blank & NOT = on first time  ****/
   /* *** note: slwskysw=Y; if fields NOT changed (=same key) ****/
   /* ************************************************************/

  SL0LSB2(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "Y")
     /* ************************************************************/
     /* *** if same key fields & enter last used: setup error   ****/
     /* ************************************************************/
    if (SLWREC.SLWLASPF == "E")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SH2A";
      SLWREC.SLWMSGNO = 0005; /* <--- new input required msg*/
      return;
    end
     /* ************************************************************/
     /* *** since last pfkey was NOT ENTER & key is the same:   ****/
     /* ***   setup last pfkey = ENTER, find the corresponding  ****/
     /* ***   sum page as ond etail, get to top of that page,   ****/
     /* ***   & setup this page of sum data lines for display.  ****/
     /* *** note: last pfkey can't be blank (first time thru)   ****/
     /* ***       re: same key checks will eq 'n'               ****/
     /* ************************************************************/
    SLWREC.SLWLASPF = "E";
    SL0LSU2(); /* <=== match to a sum page*/
    if (SLWREC.SLWERRSW == "Y")
      SL0LST2(); /* <=== reset screen (empty)*/
      return;
    end
    SL0LSO2(); /* <=== setup left sum scrn*/
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  SL0LSC2(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0LSD2(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    SL0LSF2(); /* <=== save current key value(s)*/
    SL0LST2(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses             ****/
   /* ************************************************************/

  SL0LSE2(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0LSF2(); /* <=== save current key value(s)*/
    SL0LST2(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as ENTER  ****/
   /* ************************************************************/

  SL0LSF2(); /* <=== save current key value(s)*/

  SLWREC.SLWLASPF = "E";

   /* ************************************************************/
   /* *** data present & changed: purge both tsqs             ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

  if (SLWREC.SLWERRSW == "Y")
    SL0LST2(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup summary tsq & obtain first sum page****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    SL0LM210.XMSLMSEL[SLWIDX01] = " ";
    set SL0LM210.XMSLMSEL[SLWIDX01] skip, invisible;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  SL0LSS2(); /* <=== setup all pages in tsq*/

  if (SLWREC.SLWERRSW == "Y")
    SL0LST2(); /* <=== reset screen (empty)*/
    return;
  end

  SL0LS2G(); /* obtain first sum page*/

   /* ************************************************************/
   /* *** setup sum screen                                    ****/
   /* ************************************************************/

  SL0LSO2(); /* <=== setup left sum scrn*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSH2

// ENTER processing
Function SL0LSH3()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0LSA3(); /* <=== missing input edits*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  SL0LSC3(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** relational edits                                    ****/
   /* ************************************************************/

  SL0LSD3(); /* relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  if ((SL0LM310.XWHCD == "51"
   || SL0LM310.XWHCD == "04"
   || SL0LM310.XWHCD == "07")
   && SL0LM310.SL0LAUDT == "Y")
    SL0LS3C();
  else
    SL0LS3B(); /* format jcl data and submit jcl to*/
  end
                                   /* queue*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 6)
    SL0LM310.XARCD[SLWIDX01] = "  ";
    SL0LM310.SL4ZONE[SLWIDX01] = "  ";
    SL0LM310.SL5LOCTN[SLWIDX01] = "      ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  SL0LM310.SL0LMPID = TA6REC.XURDEST;


end // end SL0LSH3

// ENTER processing
Function SL0LSH4()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  SL0LSA4(); /* <=== missing input edits*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  SL0LSC4(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** relational edits                                    ****/
   /* ************************************************************/

  SL0LSD4(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  if ((SL0LM410.XWHCD == "51"
   || SL0LM410.XWHCD == "04"
   || SL0LM410.XWHCD == "07")
   && SL0LM410.SL0LAUDT == "Y")
    SL0LS4C();
  else
    SL0LS4B(); /* format jcl data and submit jcl to*/
  end
                                   /* queue*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* *** move default values into map fields ****/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 5)
    SL0LM410.SY1STNBR[SLWIDX01] = "      ";
    SL0LM410.SY2CLRID[SLWIDX01] = "00 ";
    SL0LM410.XDMCD[SLWIDX01] = "00";
    SL0LM410.XQACD[SLWIDX01] = "01";
    SL0LM410.XSDCD[SLWIDX01] = "000";
    SL0LM410.XSLCD[SLWIDX01] = "000";
    SL0LM410.XPGCD[SLWIDX01] = "00";
    SL0LM410.XUMCD[SLWIDX01] = "01";
    SL0LM410.XOWCD[SLWIDX01] = "00";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  SL0LM410.SL0LMPID = TA6REC.XURDEST;


end // end SL0LSH4

// PF6 processing
Function SL0LSI1()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0LSA1(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check for changes to the key fields                 ****/
   /* *** note: if first time: save keys = blanks & are NOT = ****/
   /* *** note: slwskysw = Y : same keys as last saved        ****/
   /* ************************************************************/

  SL0LSB1(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "Y")
     /* ************************************************************/
     /* *** if same key fields & last pfkey was PF6: error msg  ****/
     /* ************************************************************/
    if (SLWREC.SLWLASPF == "6")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SI1A";
      SLWREC.SLWMSGNO = 0005; /* <--- new input required msg*/
      return;
    end
     /* ************************************************************/
     /* *** since the last pfkey was NOT PF6 (was enter) & key  ****/
     /* ***  is same: setup last pfkey = pf6, find current det  ****/
     /* ***  page as on sum, get to top of that page, & setup   ****/
     /* ***  this page of det data lines for display.           ****/
     /* *** note: same key checks prevent last pfkey = blank    ****/
     /* ************************************************************/
    SLWREC.SLWLASPF = "6";
    SL0LSW1(); /* <=== match to a det rec page*/
    if (SLWREC.SLWERRSW == "Y")
      SL0LST1(); /* <=== reset screen (empty)*/
      return;
    end
    SL0LSP1(); /* <=== setup left det scrn*/
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  SL0LSC1(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0LSD1(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    SL0LSF1(); /* <=== save current key value(s)*/
    SL0LST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses             ****/
   /* ************************************************************/

  SL0LSE1(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0LSF1(); /* <=== save current key value(s)*/
    SL0LST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as PF6    ****/
   /* ************************************************************/

  SL0LSF1(); /* <=== save current key value(s)*/

  SLWREC.SLWLASPF = "6";

   /* ************************************************************/
   /* *** data present & changed: purge tsq(s)                ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

  if (SLWREC.SLWERRSW == "Y")
    SL0LST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup detail tsq & obtain first det page.****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    SL0LM110.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  SL0LSS1(); /* <=== setup both tsqs*/

  if (SLWREC.SLWERRSW == "Y")
    SL0LST1(); /* <=== reset screen (empty)*/
    return;
  end

  SL0LS1H(); /* <=== obtain first det rec page*/

   /* ************************************************************/
   /* *** setup det scrn depending on last right/left pfkey   ****/
   /* ************************************************************/


  SL0LSP1(); /* <=== setup left det scrn*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSI1

// PF6 processing
Function SL0LSI2()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0LSA2(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check for changes to the key fields                 ****/
   /* *** note: if first time: save keys = blanks & are NOT = ****/
   /* *** note: slwskysw = Y : same keys as last saved        ****/
   /* ************************************************************/

  SL0LSB2(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "Y")
     /* ************************************************************/
     /* *** if same key fields & last pfkey was PF6: error msg  ****/
     /* ************************************************************/
    if (SLWREC.SLWLASPF == "6")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SI2A";
      SLWREC.SLWMSGNO = 0005; /* <--- new input required msg*/
      return;
    end
     /* ************************************************************/
     /* *** since the last pfkey was NOT PF6 & key is the same: ****/
     /* ***   setup last pfkey = PF6, find the corresponding    ****/
     /* ***   det page as on summary, get to top of that page,  ****/
     /* ***   & setup this page of det data lines for display.  ****/
     /* *** note: same key checks prevent last pfkey = blank    ****/
     /* ************************************************************/
    SLWREC.SLWLASPF = "6";
    SL0LSW2(); /* <=== match to a det page*/
    if (SLWREC.SLWERRSW == "Y")
      SL0LST2(); /* <=== reset screen (empty)*/
      return;
    end
    SL0LSP2(); /* <=== setup left det scrn*/
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  SL0LSC2(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0LSD2(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    SL0LSF2(); /* <=== save current key value(s)*/
    SL0LST2(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses             ****/
   /* ************************************************************/

  SL0LSE2(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0LSF2(); /* <=== save current key value(s)*/
    SL0LST2(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as PF6    ****/
   /* ************************************************************/

  SL0LSF2(); /* <=== save current key value(s)*/

  SLWREC.SLWLASPF = "6";

   /* ************************************************************/
   /* *** data present & changed: purge tsq(s)                ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

  if (SLWREC.SLWERRSW == "Y")
    SL0LST2(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup detail tsq & obtain first det page.****/
   /* ************************************************************/


  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    SL0LM210.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  SL0LSS2(); /* <=== setup both tsqs*/

  if (SLWREC.SLWERRSW == "Y")
    SL0LST2(); /* <=== reset screen (empty)*/
    return;
  end

  SL0LS2H(); /* <=== obtain first det rec page*/

   /* ************************************************************/
   /* *** setup det screen depending on last right/left pfkey.****/
   /* ************************************************************/

  SL0LSP2(); /* <=== setup left det scrn*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSI2

// PF7 (scroll back) processing
Function SL0LSJ1()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: slwskysw=N; if fields changed (keys different)****/
   /* ************************************************************/

  SL0LSA1(); /* <=== check for missing data*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0LSB1(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SJ1A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** decrement the last relative record number           ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (SLWREC.SLWLASPF == "E")
    if (SLWREC.SLWSUMIX == 1)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SJ1B";
      SLWREC.SLWMSGNO = 0007; /* <--- top of data msg*/
    else
      SLWREC.SLWSUMIX = SLWREC.SLWSUMIX - 1;
      TA5REC.TA5TSQIX = SLWREC.SLWSUMIX;
      TA5REC.TA5APPID = SLWREC.SLWSUMQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0LWS1, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SJ1C";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        return;
      end
      SL0LSO1(); /* <=== setup left sum scrn*/
    end
  else
    if (SLWREC.SLWDETIX == 1)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SJ1D";
      SLWREC.SLWMSGNO = 0007; /* <--- top of data msg*/
    else
      SLWREC.SLWDETIX = SLWREC.SLWDETIX - 1;
      TA5REC.TA5TSQIX = SLWREC.SLWDETIX;
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0LWD1, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SJ1E";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        return;
      end
      SL0LSP1(); /* <=== setup left det scrn*/
    end
  end

  if (SLWREC.SLWERRSW == "N")
    SLWREC.XXXLOCID = "SJ1F";
    SLWREC.SLWMSGNO = 0014; /* <--- scroll back sucessful msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0LSJ1

// PF7 (scroll back) processing
Function SL0LSJ2()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: slwskysw=N; if fields changed (keys different)****/
   /* ************************************************************/

  SL0LSA2(); /* <=== check for missing data*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0LSB2(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SJ2A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** decrement the last relative record number           ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (SLWREC.SLWLASPF == "E")
    if (SLWREC.SLWSUMIX == 1)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SJ2B";
      SLWREC.SLWMSGNO = 0007; /* <--- top of data msg*/
    else
      SLWREC.SLWSUMIX = SLWREC.SLWSUMIX - 1;
      TA5REC.TA5TSQIX = SLWREC.SLWSUMIX;
      TA5REC.TA5APPID = SLWREC.SLWSUMQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0LWS2, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SJ2C";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        return;
      end
      SL0LSO2(); /* <=== setup left sum scrn*/
    end
  else
    if (SLWREC.SLWDETIX == 1)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SJ2D";
      SLWREC.SLWMSGNO = 0007; /* <--- top of data msg*/
    else
      SLWREC.SLWDETIX = SLWREC.SLWDETIX - 1;
      TA5REC.TA5TSQIX = SLWREC.SLWDETIX;
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0LWD2, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SJ2E";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        return;
      end
      SL0LSP2(); /* <=== setup left det scrn*/
    end
  end

  if (SLWREC.SLWERRSW == "N")
    SLWREC.XXXLOCID = "SJ2F";
    SLWREC.SLWMSGNO = 0014; /* <--- scroll back sucessful msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSJ2

// PF8 (scroll fwrd) processing
Function SL0LSK1()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: slwskysw=N; if fields changed (keys different)****/
   /* ************************************************************/

  SL0LSA1(); /* <=== missing input check*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0LSB1(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SK1A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end


  if (SLWREC.SLWLASPF == "E")
    if (SLWREC.SLWSUMIX == SLWREC.SLWSMAXR)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SK1B";
      SLWREC.SLWMSGNO = 0008; /* <--- bottom of data msg*/
      return;
    else
      SLWREC.SLWSUMIX = SLWREC.SLWSUMIX + 1;
      TA5REC.TA5TSQIX = SLWREC.SLWSUMIX;
      TA5REC.TA5APPID = SLWREC.SLWSUMQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0LWS1, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SK1C";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        return;
      end
      SL0LSO1(); /* <=== setup left sum scrn*/
    end
  else
    if (SLWREC.SLWDETIX == SLWREC.SLWDMAXR)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SK1D";
      SLWREC.SLWMSGNO = 0008; /* <--- bottom of data msg*/
      return;
    else
      SLWREC.SLWDETIX = SLWREC.SLWDETIX + 1;
      TA5REC.TA5TSQIX = SLWREC.SLWDETIX;
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0LWD1, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SK1E";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        return;
      end
      SL0LSP1(); /* <=== setup left det scrn*/
    end
  end

  if (SLWREC.SLWERRSW == "N")
    SLWREC.XXXLOCID = "SK1F";
    SLWREC.SLWMSGNO = 0013; /* <--- scroll fwrd successful msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSK1

// PF8 (scroll fwd) processing
Function SL0LSK2()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: slwskysw=N; if fields changed (keys different)****/
   /* ************************************************************/

  SL0LSA2(); /* <=== missing input check*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0LSB2(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SK2A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end


  if (SLWREC.SLWLASPF == "E")
    if (SLWREC.SLWSUMIX == SLWREC.SLWSMAXR)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SK2B";
      SLWREC.SLWMSGNO = 0008; /* <--- bottom of data msg*/
      return;
    else
      SLWREC.SLWSUMIX = SLWREC.SLWSUMIX + 1;
      TA5REC.TA5TSQIX = SLWREC.SLWSUMIX;
      TA5REC.TA5APPID = SLWREC.SLWSUMQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0LWS2, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SK2C";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        return;
      end
      SL0LSO2(); /* <=== setup left sum scrn*/
    end
  else
    if (SLWREC.SLWDETIX == SLWREC.SLWDMAXR)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SK2D";
      SLWREC.SLWMSGNO = 0008; /* <--- bottom of data msg*/
      return;
    else
      SLWREC.SLWDETIX = SLWREC.SLWDETIX + 1;
      TA5REC.TA5TSQIX = SLWREC.SLWDETIX;
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0LWD2, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SK2E";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        return;
      end
      SL0LSP2(); /* <=== setup left det scrn*/
    end
  end

  if (SLWREC.SLWERRSW == "N")
    SLWREC.XXXLOCID = "SK2F";
    SLWREC.SLWMSGNO = 0013; /* <--- scroll fwrd successful msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSK2

// setup blank screen
Function SL0LSN1()


   /* ************************************************************/
   /* *** display a blank screen by:                          ****/
   /* *** displaying the top & bottom column titles and       ****/
   /* *** displaying blank lines until the page is full.      ****/
   /* ************************************************************/

  SL0L125(); /* <=== disp top col title*/

  SL0L126(); /* <=== disp bot col title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    SL0L129(); /* <=== disp blank line*/
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSN1

// setup blank screen
Function SL0LSN2()


   /* ************************************************************/
   /* *** display a blank screen by:                          ****/
   /* *** displaying the top & bottom column titles and       ****/
   /* *** displaying bland lines until the page is full.      ****/
   /* ************************************************************/

  SL0L225(); /* <=== disp top col title*/

  SL0L226(); /* <=== disp bot col title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    SL0L229(); /* <=== disp blank line*/
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSN2

// setup left sum scrn
Function SL0LSO1()


   /* ************************************************************/
   /* *** setup the left side of the summary data screen by:  ****/
   /* *** displaying the left summary title  and              ****/
   /* *** performing the display of the left summary line     ****/
   /* *** until the page is full                              ****/
   /* ************************************************************/

  SL0L125(); /* <=== disp top col title*/

  SL0L126(); /* <=== disp bot col title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0LWS1.SL0LWRTY[SLWIDX01] == "S")
      set SL0LM110.XMSLMSEL[SLWIDX01] initialAttributes;
      /* *** format summary line ****/
      SL0LWB1.SL0LWSM1 = SL0LWS1.SL0LWSD1[SLWIDX01];
      SL0L121(); /* <=== disp left sum line*/
    else
      set SL0LM110.XMSLMSEL[SLWIDX01] skip, invisible;
      SL0L129(); /* <=== disp blank line*/
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if error: display the cleared screen                ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    SL0LST1(); /* <=== reset screen (empty)*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSO1

// setup left sum scrn
Function SL0LSO2()


   /* ************************************************************/
   /* *** setup the left side of the summary data screen by:  ****/
   /* *** displaying the left summary title  and              ****/
   /* *** performing the display of the left summary line     ****/
   /* *** until the page is full                              ****/
   /* ************************************************************/

  SL0L225(); /* <=== disp top col title*/

  SL0L226(); /* <=== disp bot col title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0LWS2.SL0LWRTY[SLWIDX01] == "S")
      set SL0LM210.XMSLMSEL[SLWIDX01] initialAttributes;
      /* *** format summary line ****/
      SL0LWB2.SL0LWSM2 = SL0LWS2.SL0LWSD2[SLWIDX01];
      SL0L221(); /* <=== disp left sum line*/
    else
      set SL0LM210.XMSLMSEL[SLWIDX01] skip, invisible;
      SL0L229(); /* <=== disp blank line*/
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if error: display the cleared screen                ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    SL0LST2(); /* <=== reset screen (empty)*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSO2

// setup left det scrn
Function SL0LSP1()


   /* ************************************************************/
   /* *** setup the left side of the detail data screen by:   ****/
   /* *** displaying the left detail title  and               ****/
   /* *** performing the display of the left detail line      ****/
   /* *** until the page is full                              ****/
   /* *** note: the left summary display will be used each    ****/
   /* ***       time a summary line type is detected          ****/
   /* ************************************************************/

  SL0L125(); /* <=== disp top col title*/

  SL0L126(); /* <=== disp bot col title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0LWD1.SL0LWRTY[SLWIDX01] == "S")
      set SL0LM110.XMSLMSEL[SLWIDX01] initialAttributes;
      SL0LWB1.SL0LWSM1 = SL0LWD1.SL0LWDD1[SLWIDX01];
      SL0L121(); /* <=== disp left sum line*/
    else
      if (SL0LWD1.SL0LWRTY[SLWIDX01] == "D")
        set SL0LM110.XMSLMSEL[SLWIDX01] skip, invisible;
        SL0LWB1.SL0LWDT1[1] = SL0LWD1.SL0LWDD1[SLWIDX01];
   /* For Canada display detail with time for each size/quantity*/
   /* DLVRUSA STARTS - SAIRAM*/
   /* IF SL0LM110.XWHCD EQ '42';*/
        if (SL0LM110.XWHCD != "02")
   /* DLVRUSA ENDS   - SAIRAM*/
          SL0L127(); /* <=== disp left det line w/ time*/
        else
          SL0L122(); /* <=== disp left det line*/
        end
      else
        if (SL0LWD1.SL0LWRTY[SLWIDX01] == "B")
          set SL0LM110.XMSLMSEL[SLWIDX01] skip, invisible;
          SL0L129(); /* <=== disp blank line*/
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SP1A";
          SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        end
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if error: display the cleared screen                ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    SL0LST1(); /* <=== reset screen (empty)*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSP1

// setup left det scrn
Function SL0LSP2()


   /* ************************************************************/
   /* *** setup the left side of the detail data screen by:   ****/
   /* *** displaying the left detail title  and               ****/
   /* *** performing the display of the left detail line      ****/
   /* *** until the page is full                              ****/
   /* *** note: the left summary display will be used each    ****/
   /* ***       time a summary line type is detected          ****/
   /* ************************************************************/

  SL0L225(); /* <=== disp top col title*/

  SL0L226(); /* <=== disp bot col title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0LWD2.SL0LWRTY[SLWIDX01] == "S")
      set SL0LM210.XMSLMSEL[SLWIDX01] initialAttributes;
      SL0LWB2.SL0LWSM2 = SL0LWD2.SL0LWDD2[SLWIDX01];
      SL0L221(); /* <=== disp left sum line*/
    else
      if (SL0LWD2.SL0LWRTY[SLWIDX01] == "D")
        set SL0LM210.XMSLMSEL[SLWIDX01] skip, invisible;
        SL0LWB2.SL0LWDT2[1] = SL0LWD2.SL0LWDD2[SLWIDX01];
   /* For Canada display detail with time for each size/quantity*/
   /* DLVRUSA STARTS - SAIRAM*/
   /* IF SL0LM210.XWHCD EQ '42';*/
        if (SL0LM210.XWHCD != "02")
   /* DLVRUSA ENDS   - SAIRAM*/
          SL0L227(); /* <=== disp left det line w/ time*/
        else
          SL0L222(); /* <=== disp left det line*/
        end
      else
        if (SL0LWD2.SL0LWRTY[SLWIDX01] == "B")
          set SL0LM210.XMSLMSEL[SLWIDX01] skip, invisible;
          SL0L229(); /* <=== disp blank line*/
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SP2A";
          SLWREC.SLWMSGNO = 0001;
        end
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if error: display the cleared screen                ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    SL0LST2(); /* <=== reset screen (empty)*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSP2

// inquiry : sz xlate : 0
Function SL0LSPI()


   /* ************************************************************/
   /* *** obtain the desired size description/size id (no.)   ****/
   /* *** using the std module:  SY1190                       ****/
   /* *** code the following before this is executed:         ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* ***   note: or setup during init. & use a comment       ****/
   /* ***   SYPREC.SYPFC:   PC = all valid sizes              ****/
   /* ***                   IE = int. sz id to desc.          ****/
   /* ***                   EI = desc. to int. sz id          ****/
   /* ***   SYPREC.SYPCMPSW: Y = compressed (first blank or   ****/
   /* ***                        zero is end of data)         ****/
   /* ***                    N = not compressed (positional)  ****/
   /* *** code the action for the following return codes:     ****/
   /* *** note: check the SYPREC.SYPRC (NOT sqlcode)          ****/
   /* ***      0 = successful                                 ****/
   /* ***      9 = deadlock                                   ****/
   /* ***     10 = not found                                  ****/
   /* ***  other = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** call sy1190                                         ****/
   /* *** note: func & compress sw setup prior to this sgrp   ****/
   /* ************************************************************/

  call "SY1190" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes};

  if (SYPREC.SYPRC == 0)
    return;
  end

  if (SYPREC.SYPRC == 9)
    return;
  end

  if (SYPREC.SYPRC == 10)
    return;
  end

  if (SYPREC.SYPRC == 11)
    return;
  end

  if (SYPREC.SYPRC == 16)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SL0LSPI ";
  TA1REC.TA1LOCAT[1] = "SY1190  ";
  TA1REC.TA1LOCAT[3] = SYPREC.SYPRCX;
  TA1REC.TA1LOCAT[4] = "SZ XLATE";
  TA1REC.TA1DBASE = "MULTIPLE";
  TA1REC.TA1TBLVU = "DB VIEWS";
  TA1REC.TA1TBLKE = SYPREC.SYPKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSPI

// setup sum tsq
Function SL0LSS1()


   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0LSS1 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* *************** format loc audit rec ***********************/

  set SLAREC empty;
  SLAREC.XWHCD = SL0LM110.XWHCD;
  SLAREC.XARCD = SL0LM110.XARCD;
  SLAREC.SL4ZONE = SL0LM110.SL4ZONE;
  SLAREC.SL5LOCTN = SL0LM110.SL5LOCTN;

  if (SL0LM110.SL0LMXIF == "A")
    SLAREC.XIFCD = "*";
  else
    SL0LW01.SL0LWFLC = SL0LM110.SL0LMXIF;
    SLAREC.XIFCD = SL0LW01.SL0LWHFC;
  end

  if (SL0LM110.XITCD == "AL"
   || SL0LM110.XITCD == "A "
   || SL0LM110.XITCD == " A")
    SLAREC.XITCD = "*";
  else
    SLAREC.XITCD = SL0LM110.XITCD;
  end

  SLVREC.SLVSDT = SL0LW01.SL0LWSDB;
  SLVREC.SLVEDT = SL0LW01.SL0LWEDB;

  XSSLAS1(); /* select set of loc audit recs*/

  if (SQLCA.VAGen_SQLCODE == +100) /* for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SS1A";
    SLWREC.SLWMSGNO = 0115; /* <--- rec(s) not found msg*/
    set SL0LM110.XWHCD cursor, bold;
    set SL0LM110.SL0LMSDT bold;
    set SL0LM110.SL0LMEDT bold;
    set SL0LM110.XARCD bold;
    set SL0LM110.SL4ZONE bold;
    set SL0LM110.SL5LOCTN bold;
    set SL0LM110.SL0LMXIF bold;
    set SL0LM110.XITCD bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SS1B";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0) /* for any initial db access*/
    SLWREC.SLWERRSW = "Y"; /* for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SS1C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0LST1(); /* <=== clear scrn (empty)*/
    return;
  end

   /* *** obtain valid size descriptions ****/

  set SYPREC empty;
  SYPREC.XGPCD = SLAREC.XGPCD;
  SYPREC.SY1STNBR = SLAREC.SY1STNBR;
  SYPREC.SY2CLRID = SLAREC.SY2CLRID;
  SYPREC.XDMCD = SLAREC.XDMCD;
  SYPREC.XQACD = SLAREC.XQACD;

  SL0LSAA(); /* <=== size translation call*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* *** initialize fields for loop processing ****/

  SLWREC.SLWBUFLX = 0; /* buffer area index*/
  SLWREC.SLWDETLX = 0; /* detail area index*/
  SLWREC.SLWSUMLX = 0; /* summary area index*/
  SL0LWB1.SL0LWSQT = 0; /* summary quantity*/
  SLWREC.SLWSNXTR = 1; /* next sum page to be filled*/
  SLWREC.SLWDNXTR = 1; /* next det page to be filled*/
  SL0LW01.SL0LWIX1 = 1; /* sz/qtys on detail line index*/

  SL0LS1A(); /* <=== save prod key data*/

  SL0LS1B(); /* <=== save sum line data*/

   /* *** process each loc audit record & build tsqs ****/

  while (SQLCA.VAGen_SQLCODE == +0
   && SLWREC.SLWERRSW == "N")
    SL0LS1C(); /* <=== format size det in buffer*/
    XSSLAF1(); /* <=== select next audit record*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
    SL0LS1D(); /* <=== sum line break processing*/
    if (SQLCA.VAGen_SQLCODE == +100)
       /* ** next sentence ***/
    else
      if (SQLCA.VAGen_SQLCODE != +0
       || SLWREC.SLWERRSW == "Y")
        return;
      end
      SL0LS1E(); /* <=== product break processing*/
    end
  end
  SL0LS1F(); /* <=== last group processing*/


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSS1

// setup sum tsq
Function SL0LSS2()


   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0LSS2 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* *** obtain valid size descriptions ****/

  set SYPREC empty;
  SYPREC.XGPCD = SL0LM210.XGPCD;
  SYPREC.SY1STNBR = SL0LM210.SY1STNBR;
  SYPREC.SY2CLRID = SL0LM210.SY2CLRID;
  SYPREC.XDMCD = SL0LM210.XDMCD;
  SYPREC.XQACD = SL0LM210.XQACD;

  SL0LSAA(); /* <=== size translation call*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* *************** format loc audit rec ***********************/

  set SLAREC empty;
  SLAREC.XWHCD = SL0LM210.XWHCD;
  SLAREC.XGPCD = SL0LM210.XGPCD;
  SLAREC.SY1STNBR = SL0LM210.SY1STNBR;
  SLAREC.SY2CLRID = SL0LM210.SY2CLRID;
  SLAREC.XDMCD = SL0LM210.XDMCD;
  SLAREC.XQACD = SL0LM210.XQACD;

  if (SL0LM210.SL0LMXIF == "A")
    SLAREC.XIFCD = "*";
  else
    SL0LW02.SL0LWFLC = SL0LM210.SL0LMXIF;
    SLAREC.XIFCD = SL0LW02.SL0LWHFC;
  end

  if (SL0LM210.XITCD == "AL"
   || SL0LM210.XITCD == "A "
   || SL0LM210.XITCD == " A")
    SLAREC.XITCD = "*";
  else
    SLAREC.XITCD = SL0LM210.XITCD;
  end

  SLVREC.SLVSDT = SL0LW02.SL0LWSDB;
  SLVREC.SLVEDT = SL0LW02.SL0LWEDB;

  XSSLAS2(); /* select set of loc audit recs*/

  if (SQLCA.VAGen_SQLCODE == +100) /* for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SS2A";
    SLWREC.SLWMSGNO = 0115; /* <--- rec(s) not found msg*/
    set SL0LM210.XWHCD cursor, bold;
    set SL0LM210.SL0LMSDT bold;
    set SL0LM210.SL0LMEDT bold;
    set SL0LM210.XGPCD bold;
    set SL0LM210.SY1STNBR bold;
    set SL0LM210.SY2CLRID bold;
    set SL0LM210.XDMCD bold;
    set SL0LM210.XQACD bold;
    set SL0LM210.SL0LMXIF bold;
    set SL0LM210.XITCD bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SS2B";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0) /* for any initial db access*/
    SLWREC.SLWERRSW = "Y"; /* for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SS2C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0LST2(); /* <=== clear scrn (empty)*/
    return;
  end


   /* *** initialize fields for loop processing ****/

  SLWREC.SLWBUFLX = 0; /* buffer area index*/
  SLWREC.SLWDETLX = 0; /* detail area index*/
  SLWREC.SLWSUMLX = 0; /* summary area index*/
  SL0LWB2.SL0LWSQT = 0; /* summary quantity*/
  SLWREC.SLWSNXTR = 1; /* next sum page to be filled*/
  SLWREC.SLWDNXTR = 1; /* next det page to be filled*/
  SL0LW02.SL0LWIX2 = 1; /* sz/qtys on detail line index*/

  SL0LS2B(); /* <=== save sum line data*/

   /* *** process each loc audit record & build tsqs ****/

  while (SQLCA.VAGen_SQLCODE == +0
   && SLWREC.SLWERRSW == "N")
    SL0LS2C(); /* <=== format size det in buffer*/
    XSSLAF2(); /* <=== select next audit record*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
    SL0LS2D(); /* <=== sum line break processing*/
    if (SQLCA.VAGen_SQLCODE == +100)
       /* ** next sentence ***/
    else
      if (SQLCA.VAGen_SQLCODE != +0
       || SLWREC.SLWERRSW == "Y")
        return;
      end
    end
  end
  SL0LS2F(); /* <=== last group processing*/


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSS2

// reset screen (empty)
Function SL0LST1()


   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0LM110 empty; /* resets entire screen*/

  SL0LSG1(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0LM110.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0LM110.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0LM110.XXXTITLE = SLWREC.XXXTITLE;
  SL0LM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0LW01 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** purge any existing storage in case of 'left overs'  ****/
   /* *** note: not found is acceptable return code           ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

   /* ************************************************************/
   /* *** setup the floating map lines for a blank map        ****/
   /* ************************************************************/

  SL0LSN1(); /* <=== setup blank screen*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LST1

// reset screen (empty)
Function SL0LST2()


   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0LM210 empty; /* resets entire screen*/

  SL0LSG2(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0LM210.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0LM210.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0LM210.XXXTITLE = SLWREC.XXXTITLE;
  SL0LM210.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0LW02 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** purge any existing storage in case of 'left overs'  ****/
   /* *** note: not found is acceptable return code           ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

   /* ************************************************************/
   /* *** setup the floating map lines for a blank map        ****/
   /* ************************************************************/

  SL0LSN2(); /* <=== setup blank screen*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LST2

// match to a sum rec page
Function SL0LSU1()


   /* *******************************************************/
   /* *** when on detail screen & wish to go to summary  ****/
   /* *** obtain summary page number from page number on ****/
   /* *** detail record and then perform call to get the ****/
   /* *** summary record.                                ****/
   /* *******************************************************/

  SLWREC.SLWIDX01 = SLWREC.SLWLINPP;
  SL0LW01.SL0LWSE1 = 1;

   /* *** if selection was made on det screen use it, ****/
   /* *** else use first sum line on current det page.****/

  while (SLWIDX01 >= 1)
    if (SL0LM110.XMSLMSEL[SLWIDX01] != " ")
      SL0LW01.SL0LWSE1 = SLWREC.SLWIDX01;
    end
    SL0LM110.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  TA5REC.TA5TSQIX = SL0LWD1.SL0LWSPG[SL0LWSE1];
  TA5REC.TA5APPID = SLWREC.SLWSUMQU;
  TA5REC.TA5FNCCD = "R";

  call "TA0050" (SL0LWS1, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SU1A";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  SLWREC.SLWSUMIX = TA5REC.TA5TSQIX;


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSU1

// match to a sum rec page
Function SL0LSU2()


   /* *******************************************************/
   /* *** when on detail screen & wish to go to summary  ****/
   /* *** obtain summary page number from page number on ****/
   /* *** detail record and then perform call to get the ****/
   /* *** summary record.                                ****/
   /* *******************************************************/

  SLWREC.SLWIDX01 = SLWREC.SLWLINPP;
  SL0LW02.SL0LWSE2 = 1;

   /* *** if selection was made on det screen use it, ****/
   /* *** else use first sum line on current det page.****/

  while (SLWIDX01 >= 1)
    if (SL0LM210.XMSLMSEL[SLWIDX01] != " ")
      SL0LW02.SL0LWSE2 = SLWREC.SLWIDX01;
    end
    SL0LM210.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  TA5REC.TA5TSQIX = SL0LWD2.SL0LWSPG[SL0LWSE2];
  TA5REC.TA5APPID = SLWREC.SLWSUMQU;
  TA5REC.TA5FNCCD = "R";

  call "TA0050" (SL0LWS2, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SU2A";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  SLWREC.SLWSUMIX = TA5REC.TA5TSQIX;


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSU2

// match to a det rec page
Function SL0LSW1()


   /* ********************************************************/
   /* *** when on summary screen & wish to go to detail   ****/
   /* *** obtain detail page number from page number on   ****/
   /* *** summary record and then perform call to get the ****/
   /* *** detail record.                                  ****/
   /* ********************************************************/

  SLWREC.SLWIDX01 = SLWREC.SLWLINPP;
  SL0LW01.SL0LWSE1 = 1;

   /* *** if selection was made on sum screen use it, ****/
   /* *** else use first sum line on current sum page.****/

  while (SLWIDX01 >= 1)
    if (SL0LM110.XMSLMSEL[SLWIDX01] != " ")
      SL0LW01.SL0LWSE1 = SLWREC.SLWIDX01;
    end
    SL0LM110.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  TA5REC.TA5TSQIX = SL0LWS1.SL0LWDPG[SL0LWSE1];
  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5FNCCD = "R";

  call "TA0050" (SL0LWD1, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SW1A";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  SLWREC.SLWDETIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSW1

// match to a det rec page
Function SL0LSW2()


   /* ********************************************************/
   /* *** when on summary screen & wish to go to detail   ****/
   /* *** obtain detail page number from page number on   ****/
   /* *** summary record and then perform call to get the ****/
   /* *** detail record.                                  ****/
   /* ********************************************************/

  SLWREC.SLWIDX01 = SLWREC.SLWLINPP;
  SL0LW02.SL0LWSE2 = 1;

   /* *** if selection was made on sum screen use it, ****/
   /* *** else use first sum line on current sum page.****/

  while (SLWIDX01 >= 1)
    if (SL0LM210.XMSLMSEL[SLWIDX01] != " ")
      SL0LW02.SL0LWSE2 = SLWREC.SLWIDX01;
    end
    SL0LM210.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  TA5REC.TA5TSQIX = SL0LWS2.SL0LWDPG[SL0LWSE2];
  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5FNCCD = "R";

  call "TA0050" (SL0LWD2, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SW2A";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  SLWREC.SLWDETIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSW2

// CAITEM  processing
Function SL0LSY0()


   /* ************************************************************/
   /* *** if entered, use CAITEM data by first moving it to   ****/
   /* *** a ws field to make use of it with "redefines"       ****/
   /* *** note: CAITEM = character data as passed             ****/
   /* ************************************************************/

  SLWREC.CAITEM = COMMAREA.CAITEM;

  if (SLWREC.SLWCASNO > " ")
    SL0LM010.XMSLMSNO = SLWREC.SLWCASNO;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0LSY0

// close : sl audit : 1
Function XSSLAC1()


   /* ************************************************************/
   /* *** close select set of:  stock locate audit            ****/
   /* *** using the std module:  IO1620                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "C1";

  call "IO1620" (SLVREC, SQLCA, SLAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSLAC1 ";
  TA1REC.TA1LOCAT[1] = "IO1620  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSLAUD01";
  TA1REC.TA1TBLKE = SLAREC.SLAKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLAC1

// close : sl audit : 2
Function XSSLAC2()


   /* ************************************************************/
   /* *** close select set of:  stock locate audit            ****/
   /* *** using the std module:  IO1620                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "C2";

  call "IO1620" (SLVREC, SQLCA, SLAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSLAC2 ";
  TA1REC.TA1LOCAT[1] = "IO1620  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSLAUD01";
  TA1REC.TA1TBLKE = SLAREC.SLAKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLAC2

// fetch : sl audit : 1
Function XSSLAF1()


   /* ************************************************************/
   /* *** fetch next row from:  stock locate audit            ****/
   /* *** using the std module:  IO1620                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "N1";

  call "IO1620" (SLVREC, SQLCA, SLAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSLAC1(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSLAF1 ";
  TA1REC.TA1LOCAT[1] = "IO1620  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSLAUD01";
  TA1REC.TA1TBLKE = SLAREC.SLAKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLAF1

// fetch : sl audit : 2
Function XSSLAF2()


   /* ************************************************************/
   /* *** fetch next row from:  stock locate audit            ****/
   /* *** using the std module:  IO1620                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "N2";

  call "IO1620" (SLVREC, SQLCA, SLAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSLAC2(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSLAF2 ";
  TA1REC.TA1LOCAT[1] = "IO1620  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSLAUD01";
  TA1REC.TA1TBLKE = SLAREC.SLAKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLAF2

// setinq : sl audit : 1
Function XSSLAS1()


   /* ************************************************************/
   /* *** select set of rows from:  stock locate audit        ****/
   /* *** using the std module:  IO1620                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl4zone                                           ****/
   /* ***   sl5loctn                                          ****/
   /* ***   xifcd                                             ****/
   /* *** the following must have range values:               ****/
   /* ***   zzsdt     (use slvrec)                            ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   xifcd                                             ****/
   /* ***   xitcd                                             ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xitcd                                             ****/
   /* ***   zzsdt                                             ****/
   /* ************************************************************/

  SLVFNC = "S1";

  call "IO1620" (SLVREC, SQLCA, SLAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSLAS1 ";
    TA1REC.TA1LOCAT[1] = "IO1620  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VSLAUD01";
    TA1REC.TA1TBLKE = SLAREC.SLAKEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSLAF1(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLAS1

// setinq : sl audit : 2
Function XSSLAS2()


   /* ************************************************************/
   /* *** select set of rows from:  stock locate audit        ****/
   /* *** using the std module:  IO1620                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* *** the following must have range values:               ****/
   /* ***   zzsdt     (use slvrec)                            ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   xifcd                                             ****/
   /* ***   xitcd                                             ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xslcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   sy5szid                                           ****/
   /* ************************************************************/

  SLVFNC = "S2";

  call "IO1620" (SLVREC, SQLCA, SLAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSLAS2 ";
    TA1REC.TA1LOCAT[1] = "IO1620  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VSLAUD01";
    TA1REC.TA1TBLKE = SLAREC.SLAKEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSLAF2(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLAS2

//*** RECORD=SL0LW01 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-87  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0LW01 type basicRecord
  10 SL0LWLK1 SL0LWLK1 ; 
    15 XWHCD XWHCD ; 
    15 SL0LWSDT SL0LWSDT ; 
    15 SL0LWEDT SL0LWEDT ; 
    15 XARCD XARCD ; 
    15 SL4ZONE SL4ZONE ; 
    15 SL5LOCTN SL5LOCTN ; 
    15 SL0LWTFN SL0LWTFN ; 
    15 XITCD XITCD ; 
  10 SL0LWSE1 SL0LWSE1 ; 
  10 SL0LWSDB SL0LWSDB ; 
  10 SL0LWEDB SL0LWEDB ; 
  10 SL0LWID1 SL0LWID1 ; 
  10 SL0LWIX1 SL0LWIX1 ; 
  10 SL0LWDLL SL0LWDLL ; 
  10 SL0LWDSV SL0LWDSV ; 
    15 SL0LWDGP SL0LWDGP ; 
    15 SL0LWDSY SL0LWDSY ; 
    15 SL0LWDCR SL0LWDCR ; 
    15 SL0LWDDM SL0LWDDM ; 
    15 SL0LWDQA SL0LWDQA ; 
  10 SL0LWSV1 SL0LWSV1 ; 
    15 SL0LWSGP SL0LWSGP ; 
    15 SL0LWSSY SL0LWSSY ; 
    15 SL0LWSCR SL0LWSCR ; 
    15 SL0LWSDM SL0LWSDM ; 
    15 SL0LWSQA SL0LWSQA ; 
    15 SL0LWSSD SL0LWSSD ; 
    15 SL0LWSCC SL0LWSCC ; 
    15 SL0LWSPT SL0LWSPT ; 
    15 SL0LWSUM SL0LWSUM ; 
    15 SL0LWSOW SL0LWSOW ; 
    15 IN5TRDCD IN5TRDCD ; 
    15 IN5TRDOC IN5TRDOC ; 
    15 IN5TRSUB IN5TRSUB ; 
    15 SL0LWTDT SL0LWTDT ; 
      20 * num(3) ; 
      20 SL0LWTRD SL0LWTRD ; 
        25 SL0LWSYY SL0LWSYY ; 
        25 SL0LWSMM SL0LWSMM ; 
        25 SL0LWSDD SL0LWSDD ; 
    15 SL0LWXIF SL0LWXIF ; 
      20 * char(1) ; 
      20 SL0LWFLD SL0LWFLD ; 
    15 SL0LWXIT SL0LWXIT ; 
  10 SL0LWHFC SL0LWHFC ; 
    15 * num(1) ; 
    15 SL0LWFLC SL0LWFLC ; 
  10 SL0LWSTM SL0LWSTM ; 
    15 * num(3) ; 
    15 SL0LWSHH SL0LWSHH ; 
    15 SL0LWSMN SL0LWSMN ; 
    15 SL0LWSSS SL0LWSSS ; 
  10 SL0LWMTM SL0LWMTM ; 
    15 SL0LWMHH SL0LWMHH ; 
    15 SL0LWMC1 char(1) ; 
    15 SL0LWMMN SL0LWMMN ; 
    15 SL0LWMC2 char(1) ; 
    15 SL0LWMSS SL0LWMSS ; 
end // end SL0LW01

//*** RECORD=SL0LW02 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-87  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0LW02 type basicRecord
  10 SL0LWLK2 SL0LWLK2 ; 
    15 XWHCD XWHCD ; 
    15 SL0LWSDT SL0LWSDT ; 
    15 SL0LWEDT SL0LWEDT ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 SL0LWTFN SL0LWTFN ; 
    15 XITCD XITCD ; 
  10 SL0LWSE2 SL0LWSE2 ; 
  10 SL0LWSDB SL0LWSDB ; 
  10 SL0LWEDB SL0LWEDB ; 
  10 SL0LWID2 SL0LWID2 ; 
  10 SL0LWIX2 SL0LWIX2 ; 
  10 SL0LWDLL SL0LWDLL ; 
  10 SL0LWSV2 SL0LWSV2 ; 
    15 XSDCD XSDCD ; 
    15 XSLCD XSLCD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XOWCD XOWCD ; 
    15 XARCD XARCD ; 
    15 SL4ZONE SL4ZONE ; 
    15 SL5LOCTN SL5LOCTN ; 
    15 IN5TRDCD IN5TRDCD ; 
    15 IN5TRDOC IN5TRDOC ; 
    15 IN5TRSUB IN5TRSUB ; 
    15 SL0LWTDT SL0LWTDT ; 
      20 * num(3) ; 
      20 SL0LWTRD SL0LWTRD ; 
        25 SL0LWSYY SL0LWSYY ; 
        25 SL0LWSMM SL0LWSMM ; 
        25 SL0LWSDD SL0LWSDD ; 
    15 SL0LWXIF SL0LWXIF ; 
      20 * char(1) ; 
      20 SL0LWFLD SL0LWFLD ; 
    15 SL0LWXIT SL0LWXIT ; 
    15 XIRCD XIRCD ; 
  10 SL0LWHFC SL0LWHFC ; 
    15 * num(1) ; 
    15 SL0LWFLC SL0LWFLC ; 
  10 SL0LWSTM SL0LWSTM ; 
    15 * num(3) ; 
    15 SL0LWSHH SL0LWSHH ; 
    15 SL0LWSMN SL0LWSMN ; 
    15 SL0LWSSS SL0LWSSS ; 
  10 SL0LWMTM SL0LWMTM ; 
    15 SL0LWMHH SL0LWMHH ; 
    15 SL0LWMC1 SL0LWMC1 ; 
    15 SL0LWMMN SL0LWMMN ; 
    15 SL0LWMC2 SL0LWMC2 ; 
    15 SL0LWMSS SL0LWMSS ; 
end // end SL0LW02

//*** RECORD=SL0LW03 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 08-04-87  l. deluhery  created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0LW03 type basicRecord
  10 XWHCD XWHCD ; 
  10 SL0LWPTR SL0LWPTR ; 
  10 SL0LWSSW SL0LWSSW ; 
  10 SL0LWJLN SL0LWJLN ; 
    15 SL0LWJSL SL0LWJSL ; 
    15 SL0LWJOB SL0LWJOB ; 
    15 SL0LWJST SL0LWJST ; 
  10 SL0LWOUP SL0LWOUP ; 
    15 SL0LWOUS SL0LWOUS ; 
    15 SL0LWDES SL0LWDES ; 
    15 SL0LWSPC SL0LWSPC ; 
  10 SL0LWPRM SL0LWPRM ; 
    15 SL0LWWHS SL0LWWHS ; 
    15 SL0LWLOC SL0LWLOC ; 
      20 XARCD XARCD ; 
      20 SL4ZONE SL4ZONE ; 
      20 SL5LOCTN SL5LOCTN ; 
    15 SL0LWSDT SL0LWSDT ; 
    15 SL0LWEDT SL0LWEDT ; 
    15 * char(56) ; 
  10 SL0LWSDB SL0LWSDB ; 
  10 SL0LWEDB SL0LWEDB ; 
end // end SL0LW03

//*** RECORD=SL0LW04 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 08-04-87  l. deluhery  created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0LW04 type basicRecord
  10 XWHCD XWHCD ; 
  10 SL0LWPTR SL0LWPTR ; 
  10 SL0LWSSW SL0LWSSW ; 
  10 SL0LWJLN SL0LWJLN ; 
    15 SL0LWJSL SL0LWJSL ; 
    15 SL0LWJOB SL0LWJOB ; 
    15 SL0LWJST SL0LWJST ; 
  10 SL0LWOUP SL0LWOUP ; 
    15 SL0LWOUS SL0LWOUS ; 
    15 SL0LWDES SL0LWDES ; 
    15 SL0LWSPC SL0LWSPC ; 
  10 SL0LWPAR SL0LWPAR ; 
    15 SL0LWWHS SL0LWWHS ; 
    15 SL0LWPRD SL0LWPRD ; 
      20 XGPCD XGPCD ; 
      20 SY1STNBR SY1STNBR ; 
      20 SY2CLRID SY2CLRID ; 
      20 XDMCD XDMCD ; 
      20 XQACD XQACD ; 
    15 SL0LWSDT SL0LWSDT ; 
    15 SL0LWEDT SL0LWEDT ; 
    15 * char(51) ; 
  10 SL0LWSDB SL0LWSDB ; 
  10 SL0LWEDB SL0LWEDB ; 
end // end SL0LW04

//*** RECORD=SL0LW05 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 08-04-87  l. deluhery  created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0LW05 type basicRecord
  5 SL0LWPRM SL0LWPRM ; 
    10 XWHCD XWHCD ; 
    10 SL0LWSDT SL0LWSDT ; 
    10 SL0LWEDT SL0LWEDT ; 
    10 SL0LWLOC SL0LWLOC [6] ; 
      15 XARCD XARCD ; 
      15 SL4ZONE SL4ZONE ; 
      15 SL5LOCTN SL5LOCTN ; 
    10 * char(6) ; 
end // end SL0LW05

//*** RECORD=SL0LW06 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 08-04-87  l. deluhery  created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0LW06 type basicRecord
  5 SL0LWPRM SL0LWPRM ; 
    10 XWHCD XWHCD ; 
    10 SL0LWSDT SL0LWSDT ; 
    10 SL0LWEDT SL0LWEDT ; 
    10 SL0LWPRDA SL0LWPRDA [5] ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
    10 * char(1) ; 
end // end SL0LW06

//*** RECORD=SL0LWB1 ****
// buffer area for use with tsq logic.
// ***********************
Record SL0LWB1 type basicRecord
  10 SL0LWSM1 SL0LWSM1 ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 XSDCD XSDCD ; 
    15 XSLCD XSLCD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XOWCD XOWCD ; 
    15 IN5TRDCD IN5TRDCD ; 
    15 SL0LWTDC SL0LWTDC ; 
    15 SL0LWTSB SL0LWTSB ; 
    15 SL0LWTRD SL0LWTRD ; 
      20 SL0LWTMM SL0LWTMM ; 
      20 SL0LWTDD SL0LWTDD ; 
      20 SL0LWTYY SL0LWTYY ; 
    15 SL0LWTFN SL0LWTFN ; 
    15 XITCD XITCD ; 
    15 SL0LWSQT SL0LWSQT ; 
  10 SL0LWDT1 SL0LWDT1 [13] ; 
    15 SL0LWSZ1 SL0LWSZ1 ; 
    15 SL0LWQT1 SL0LWQT1 ; 
    15 SL0LWTM1 SL0LWTM1 ; 
    15 SL0LWBY1 SL0LWBY1 ; 
    15 SL0LWSZ2 SL0LWSZ2 ; 
    15 SL0LWQT2 SL0LWQT2 ; 
    15 SL0LWTM2 SL0LWTM2 ; 
    15 SL0LWBY2 SL0LWBY2 ; 
    15 SL0LWSZ3 SL0LWSZ3 ; 
    15 SL0LWQT3 SL0LWQT3 ; 
    15 SL0LWSZ4 SL0LWSZ4 ; 
    15 SL0LWQT4 SL0LWQT4 ; 
end // end SL0LWB1

//*** RECORD=SL0LWB2 ****
// buffer area for use with tsq logic.
// ***********************
Record SL0LWB2 type basicRecord
  10 SL0LWSM2 SL0LWSM2 ; 
    15 XSDCD XSDCD ; 
    15 XSLCD XSLCD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XOWCD XOWCD ; 
    15 XARCD XARCD ; 
    15 SL4ZONE SL4ZONE ; 
    15 SL5LOCTN SL5LOCTN ; 
    15 IN5TRDCD IN5TRDCD ; 
    15 SL0LWTDC SL0LWTDC ; 
    15 SL0LWTSB SL0LWTSB ; 
    15 SL0LWTRD SL0LWTRD ; 
      20 SL0LWTMM SL0LWTMM ; 
      20 SL0LWTDD SL0LWTDD ; 
      20 SL0LWTYY SL0LWTYY ; 
    15 SL0LWTFN SL0LWTFN ; 
    15 XITCD XITCD ; 
    15 XIRCD XIRCD ; 
    15 SL0LWSQT SL0LWSQT ; 
  10 SL0LWDT2 SL0LWDT2 [13] ; 
    15 SL0LWSZ1 SL0LWSZ1 ; 
    15 SL0LWQT1 SL0LWQT1 ; 
    15 SL0LWTM1 SL0LWTM1 ; 
    15 SL0LWBY1 SL0LWBY1 ; 
    15 SL0LWSZ2 SL0LWSZ2 ; 
    15 SL0LWQT2 SL0LWQT2 ; 
    15 SL0LWTM2 SL0LWTM2 ; 
    15 SL0LWBY2 SL0LWBY2 ; 
    15 SL0LWSZ3 SL0LWSZ3 ; 
    15 SL0LWQT3 SL0LWQT3 ; 
    15 SL0LWSZ4 SL0LWSZ4 ; 
    15 SL0LWQT4 SL0LWQT4 ; 
end // end SL0LWB2

//*** RECORD=SL0LWD1 ****
// detail record layout unique to sl0l for use with tsq logic.
// ***********************
Record SL0LWD1 type basicRecord
  10 SL0LWLTH SL0LWLTH ; 
  10 * char(93) [14] ; 
    15 SL0LWRTY SL0LWRTY ; 
    15 SL0LWSPG SL0LWSPG ; 
    15 SL0LWDD1 SL0LWDD1 ; 
end // end SL0LWD1

//*** RECORD=SL0LWD2 ****
// detail record layout unique to sl0l for use with tsq logic.
// ***********************
Record SL0LWD2 type basicRecord
  10 SL0LWLTH SL0LWLTH ; 
  10 * char(91) [14] ; 
    15 SL0LWRTY SL0LWRTY ; 
    15 SL0LWSPG SL0LWSPG ; 
    15 SL0LWDD2 SL0LWDD2 ; 
end // end SL0LWD2

//*** RECORD=SL0LWS1 ****
// summary record layout unique to sl0l for use with tsq logic.
// ***********************
Record SL0LWS1 type basicRecord
  10 SL0LWLTH SL0LWLTH ; 
  10 * char(85) [14] ; 
    15 SL0LWRTY SL0LWRTY ; 
    15 SL0LWDPG SL0LWDPG ; 
    15 SL0LWSD1 SL0LWSD1 ; 
end // end SL0LWS1

//*** RECORD=SL0LWS2 ****
// summary record layout unique to sl0l for use with tsq logic.
// ***********************
Record SL0LWS2 type basicRecord
  10 SL0LWLTH SL0LWLTH ; 
  10 * char(83) [14] ; 
    15 SL0LWRTY SL0LWRTY ; 
    15 SL0LWDPG SL0LWDPG ; 
    15 SL0LWSD2 SL0LWSD2 ; 
end // end SL0LWS2

// detail quantity 1
DataItem SL0LWBY1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail quantity 1
DataItem SL0LWBY2 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// det saved color code
DataItem SL0LWDCR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// actual detail data
DataItem SL0LWDD1 char(88)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// actual detail data
DataItem SL0LWDD2 char(86)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// det saved dimension code
DataItem SL0LWDDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// output destination
DataItem SL0LWDES char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// det saved gen prod class cd
DataItem SL0LWDGP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// lines left on det rec page
DataItem SL0LWDLL num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// detail page nbr
DataItem SL0LWDPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// det saved quality code
DataItem SL0LWDQA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product key saves
DataItem SL0LWDSV char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// det saved style number
DataItem SL0LWDSY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail line data
DataItem SL0LWDT1 char(76)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail line data
DataItem SL0LWDT2 char(76)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end date binary
DataItem SL0LWEDB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end date
DataItem SL0LWEDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0LWFLC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sum saved field code
DataItem SL0LWFLD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// host field code
DataItem SL0LWHFC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// subscript for syprec szs
DataItem SL0LWID1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subscript for syprec szs
DataItem SL0LWID2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sz/qtys on detail line sub
DataItem SL0LWIX1 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sz/qtys on det line sub
DataItem SL0LWIX2 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// job line of jcl
DataItem SL0LWJLN char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jobname
DataItem SL0LWJOB char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jobcard slashes
DataItem SL0LWJSL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// rest of the job card
DataItem SL0LWJST char(70)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// complete last key
DataItem SL0LWLK1 char(27)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// complete last key
DataItem SL0LWLK2 char(32)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// location data from screen
DataItem SL0LWLOC char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data length
DataItem SL0LWLTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SL0LWMC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0LWMC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0LWMHH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0LWMMN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0LWMSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// host field code
DataItem SL0LWMTM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jes2 output line of jcl
DataItem SL0LWOUP char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jes2 output statement
DataItem SL0LWOUS char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// parm record
DataItem SL0LWPAR char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product data from screen
DataItem SL0LWPRD char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product data from screen
DataItem SL0LWPRDA char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// parm record
DataItem SL0LWPRM char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// printer save field
DataItem SL0LWPTR char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail quantity 1
DataItem SL0LWQT1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// detail quantity 2
DataItem SL0LWQT2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// detail quantity 3
DataItem SL0LWQT3 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// detail quantity 4
DataItem SL0LWQT4 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record type
DataItem SL0LWRTY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sum saved slc code
DataItem SL0LWSCC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sum saved color code
DataItem SL0LWSCR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// actual summary data
DataItem SL0LWSD1 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// actual summary data
DataItem SL0LWSD2 char(78)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// start date binary
DataItem SL0LWSDB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sum saved transaction day
DataItem SL0LWSDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sum saved dimension code
DataItem SL0LWSDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// start date
DataItem SL0LWSDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// save selection entered
DataItem SL0LWSE1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save selection entered
DataItem SL0LWSE2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sum saved gen prod class cd
DataItem SL0LWSGP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0LWSHH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// summary line data
DataItem SL0LWSM1 char(56)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// summary line data
DataItem SL0LWSM2 char(54)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sum saved transaction month
DataItem SL0LWSMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SL0LWSMN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sum saved onwer group code
DataItem SL0LWSOW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// output spaces
DataItem SL0LWSPC char(42)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// corresponding summary page
DataItem SL0LWSPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sum saved pkg type code
DataItem SL0LWSPT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sum saved quality code
DataItem SL0LWSQA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// summary quantity
DataItem SL0LWSQT num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// sum saved spec diff code
DataItem SL0LWSSD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0LWSSS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// printers shown flag
DataItem SL0LWSSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sum saved style number
DataItem SL0LWSSY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// host field code
DataItem SL0LWSTM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sum saved unit of measure cd
DataItem SL0LWSUM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// summary line saves
DataItem SL0LWSV1 char(47)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// summary line saves
DataItem SL0LWSV2 char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sum saved transaction year
DataItem SL0LWSYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// detail size 1
DataItem SL0LWSZ1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail size 2
DataItem SL0LWSZ2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail size 3
DataItem SL0LWSZ3 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail size 4
DataItem SL0LWSZ4 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// audit tran doc nbr
DataItem SL0LWTDC num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// transaction day
DataItem SL0LWTDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SL0LWTDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// transaction field number
DataItem SL0LWTFN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail quantity 1
DataItem SL0LWTM1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail quantity 1
DataItem SL0LWTM2 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// transaction month
DataItem SL0LWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// transaction date
DataItem SL0LWTRD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// audit tran doc sub
DataItem SL0LWTSB num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// transaction year
DataItem SL0LWTYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// warehouse code
DataItem SL0LWWHS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0LWXIF char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sum saved trans type
DataItem SL0LWXIT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

