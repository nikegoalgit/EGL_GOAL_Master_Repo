package sl07;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import ww.common.*;
//*** PROGRAM=SL07 ****
// This application allows a user to inquire and maintain rows
// in a DB2 table.
// 
// There are two different screens that may be displayed.
// 
// The first screen displayed to the user allows specification
// of the search criteria to be used to list the rows in the
// table.  The list is displayed and the user may page backward
// and forward to view the information.
// 
// When a line is selected on the screen, the second screen is
// displayed, showing all information for that table row.
// 
// If the user has sufficient security to change the data, the
// modifiable fields remain unprotected.  Otherwise, they are
// protected from modification by the user.
// 
// If any data is modified, it is verified and, if complete and
// correct, the table row is updated with the changed data.
// The screen is redisplayed to the user, indicating that the
// update is completed.
// 
// If more that one line was selected on the first screen, the
// next selection is displayed when the user presses the ENTER
// key without making any change to the displayed data.
// 
// When the user exits the second screen (either via PF3 key or
// after all selections have been viewed) the first screen is
// redisplayed, indicating the selections that were viewed.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      07/15/93  hchapm  New application.
// CANADA   08/25/95  CBRINE  Added call to SY2000. Added XCTCD
//                            to SLWREC.
// *********************
Program SL07 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC2REC PC2REC; // record
  PKNREC PKNREC; // record
  SL07W00 SL07W00; // record
  SL07W01 SL07W01; // record
  SL5REC SL5REC; // record
  SL6REC SL6REC; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SWVREC SWVREC; // record
  SYCREC SYCREC; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  WSY2000 WSY2000; // record
  XSSLW01 XSSLW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use XBCTBL; // table
  use SL07M.SL07M001,  // forms
      SL07M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SL07M001 initial; /* M001 input/output*/
    set SL07W00 empty; /* Working storage*/
    set SL07W01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/

    SL07W00.SL07W-FORMAT-MAP-SW = "Y"; /* Format the map switch*/
    SL07W00.SL07W-RQT-DATA-SW = "N"; /* Request for data switch*/

    if (SLWREC.XWHCD > " ") /* if whse code is passed in slwrec*/

      SL07M001.SL07M-XWH-WHSE-CD = SLWREC.XWHCD; /* move it to work area*/

    else

      if (COMMAREA.XWHCD > " ") /* if whse code is passed in commarea*/

        SL07M001.SL07M-XWH-WHSE-CD = COMMAREA.XWHCD; /* move towrk area*/

      end

    end

    SL07M001.SL07M-XBC-BRAND-CD = "08"; /* default for Cole Haan*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SL07001; /* Converse the main process*/


    SL07001: SL07001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SL07001; /* Converse the main process*/


  end // end main
end // end SL07

// Obtain the data to display
Function SL07-100()
   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/

  if (SL07W00.SL07W-RQT-DATA-SW == "Y") /* Data was not requested*/

    SL07-120(); /* Purge any temporary storage*/

  end

  SL07W01.SL07W-XWH-WHSE-CD = SL07M001.SL07M-XWH-WHSE-CD;
  SL07W01.SL07W-XBC-BRAND-CD = SL07M001.SL07M-XBC-BRAND-CD;
  SL07W01.SL07W-SL-RLOG-CASE = SL07M001.SL07M-SL-RLOG-CASE;

   /* ------------------------------------------------------------*/
   /* find warehouse code*/
   /* ------------------------------------------------------------*/

  if (SL07W01.SL07W-XWH-WHSE-CD in XWHTBL.XWHCD)
    SL07W01.SL07W-XWH-WHSE-NM = XWHTBL.XWHABRV[sysVar.arrayIndex];
    SLWREC.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex]; /* CANA save country code*/
  end

   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SL07W00.SL07W-RQT-DATA-SW != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  SL07W00.XXXTSLEN = 935; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO == 0) /* No message to display*/
    SL07W00.XXXTSPAG = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  SL07-140(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  SL07W00.SL07W-END-CURSOR-SW = "N"; /* End of cursor switch*/
  SL07W00.SL07W-MAP-FIELD-INX = 1; /* Display line index*/
  while (SL07W00.SL07W-END-CURSOR-SW == "N") /* Until end of cursor*/

    SL07-150(); /* Fetch next row in the cursor*/

    /* ------------------------------------------------------------*/
     /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/

    if (SL07W00.SL07W-END-CURSOR-SW == "N") /* Not end of cursor*/
      SL07-160(); /* Save data in display storage*/
    end

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (SL07W00.SL07W-MAP-FIELD-INX > 4) /* Page is full*/

      SL07-170(); /* Add page to temporary storage*/

      SL07W00.SL07W-MAP-FIELD-INX = 1; /* Display line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (SL07W00.SL07W-MAP-FIELD-INX > 1) /* Page was formatted*/
    SL07-170(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  SL07-180(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (SL07W00.TA5TSQIX == 0) /* No pages formatted*/

    SLWREC.XXXLOCID = "100"; /* Module identification*/
    SLWREC.SLWMSGNO = 44; /* No data was found to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SL07W00.SL07W-RQT-DATA-SW = "N"; /* Request for data switch*/


end // end SL07-100

Function SL07-110()
  /* -----------------------------------------------------------------------*/
   /* obtain current date (ccyymmdd) using TA0040*/
  /* -----------------------------------------------------------------------*/

  set TA2REC empty; /* clear TA2REC*/

  TA2REC.TA2DTOPT = "GETDATE "; /* use getdate option in date routine*/
  TA2REC.TA2GRTYP = "G";

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/

  if (TA5REC.TA5RTNCD == 0) /* and normal return code*/

    SL07W00.SL07W-CURRENT-DATE = TA2REC.TA2GRGGN; /* current date*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "110"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "GET CURRENT DATE           ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL07-110

// Purge any temporary storage
Function SL07-120()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SL07W01 empty; /* M001 display storage*/

  SL07W00.SL07W-UPD-PAGE-SW = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SL07W00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SL07W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "110"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL07-120

// Select set and open cursor
Function SL07-140()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set SL6REC empty; /* Clear row storage area*/

  SL6REC.XWHCD = SL07W01.SL07W-XWH-WHSE-CD; /* warehouse code*/
  SL6REC.XBCCD = SL07W01.SL07W-XBC-BRAND-CD; /* brand cd*/
  SL6REC.SL2CASE = SL07W01.SL07W-SL-RLOG-CASE; /* case no*/

  try
    call "IO1470" ("SG", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "140"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(011); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYLOC01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL6REC.SL6KEY; /* Table key*/
  TA1REC.TA1MAPNO = "M001"; /* map number*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL07-140

// Fetch next row in the cursor
Function SL07-150()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1470" ("NG", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

   /* Indicate end of cursor*/
      SL07W00.SL07W-END-CURSOR-SW = "Y";
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "150"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYLOC01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL6REC.SL6KEY; /* Table key*/
  TA1REC.TA1MAPNO = "M001"; /* map number*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL07-150

// Save data in display storage
Function SL07-160()
   /* ------------------------------------------------------------*/
   /* If first line on subsequent page, save heading information.*/
   /* ------------------------------------------------------------*/

  if (SL07W00.TA5TSQIX > 0 /* Not the first page*/
   && SL07W00.SL07W-MAP-FIELD-INX == 1) /* and first line on page*/

    SL07W01.SL07W-XWH-WHSE-CD = SL6REC.XWHCD; /* warehouse code*/
    SL07W01.SL07W-XWH-WHSE-NM = SL07M001.SL07M-XWH-WHSE-NM;
    SL07W01.SL07W-XBC-BRAND-CD = SL6REC.XBCCD; /* brand code*/
    SL07W01.SL07W-SL-RLOG-CASE = SL6REC.SL2CASE; /* case nbr*/

  end

  SL07W01.SL07W-XAR-AREA-CD[SL07W-MAP-FIELD-INX] = SL6REC.XARCD;
  SL07W01.SL07W-SL-LOC-CD[SL07W-MAP-FIELD-INX] = SL6REC.SL5LOCTN;
  SL07W01.SL07W-SL-ZONE-CD[SL07W-MAP-FIELD-INX] = SL6REC.SL4ZONE;
  SL07W01.SL07W-SL-RCV-LOT-ID[SL07W-MAP-FIELD-INX] = SL6REC.SL-RCV-LOT-ID;

  SL07-161(); /* find style name and color name*/

  SL07W01.SL07W-SY-STY-NM = PKNREC.SY1SSTNM; /* Style name*/
  SL07W01.SL07W-SY-COLR-NM = PKNREC.SY2CLRAB; /* color name*/

  SL07W01.SL07W-XGP-GPC-CD[SL07W-MAP-FIELD-INX] = SL6REC.XGPCD;
  SL07W01.SL07W-SY-STY-NBR[SL07W-MAP-FIELD-INX] = SL6REC.SY1STNBR;
  SL07W01.SL07W-SY-COLR-CD-ID[SL07W-MAP-FIELD-INX] = SL6REC.SY2CLRID;
  SL07W01.SL07W-XDM-DIM-CD[SL07W-MAP-FIELD-INX] = SL6REC.XDMCD;
  SL07W01.SL07W-XQA-QUAL-CD[SL07W-MAP-FIELD-INX] = SL6REC.XQACD;
  SL07W01.SL07W-PC-CU-IN-SEG-CD[SL07W-MAP-FIELD-INX] = SL6REC.PC2INSEG;
  SL07W01.SL07W-XEG-ENGR-DIFF-CD[SL07W-MAP-FIELD-INX] = SL6REC.XEGCD;
  SL07W01.SL07W-XSL-CLASS-CD[SL07W-MAP-FIELD-INX] = SL6REC.XSLCD;
  SL07W01.SL07W-XUM-UOM-CD[SL07W-MAP-FIELD-INX] = SL6REC.XUMCD;
  SL07W01.SL07W-XOW-OWN-GRP-CD[SL07W-MAP-FIELD-INX] = SL6REC.XOWCD;
  SL07W01.SL07W-SY-UNITS-PER-CASE[SL07W-MAP-FIELD-INX] = SL6REC.SY1UNPCS;

  SL07-162();
  SL07W01.SL07W-SIZE[SL07W-MAP-FIELD-INX] = SYPREC.SY4IDDSC;

  SL07W00.SL07W-NET-CALC = SL6REC.SL6ONHND - SL6REC.SL6STASD   - SL6REC.SL6PKRSV;
  SL07W01.SL07W-NET-QTY[SL07W-MAP-FIELD-INX] = SL07W00.SL07W-NET-CALC;
  SL07W01.SL07W-SL-SY-LOC-SAS-QTY[SL07W-MAP-FIELD-INX] = SL6REC.SL6STASD;
  SL07W01.SL07W-SL-SY-LOC-OH-QTY[SL07W-MAP-FIELD-INX] = SL6REC.SL6ONHND;
  SL07W01.SL07W-SL-SY-LOC-RSRV-QTY[SL07W-MAP-FIELD-INX] = SL6REC.SL6PKRSV;

  SL07W00.SL07W-MAP-FIELD-INX = SL07W00.SL07W-MAP-FIELD-INX + 1;

end // end SL07-160

// Select the heading information
Function SL07-161()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set PKNREC empty; /* Clear row storage area*/

  PKNREC.XGPCD = SL6REC.XGPCD; /* GPC code*/
  PKNREC.SY1STNBR = SL6REC.SY1STNBR; /* Style number*/
  PKNREC.SY2CLRID = SL6REC.SY2CLRID; /* color id*/
  PKNREC.XDMCD = SL6REC.XDMCD; /* dimension code*/

  try
    call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      /* CANADA 08/25/95*/

      if (SLWREC.XCTCD == "CANA")

        /* format ta1rec in case of bad return code from call to SY2000*/

        TA1REC.TA1PGMNM = "SL07"; /* CANA program name*/
        TA1REC.TA1LOC = "SL07161"; /* CANA sgrp name*/

        XSSL-CALL-SY2000(); /* CANA call SY2000 to get*/
                              /* product region record*/
        if (WSY2000.WSY2000-RETURN-CODE == 0) /* CANA row found*/
          return;
        else
          if (WSY2000.WSY2000-RETURN-CODE == 02) /* CANA row not found*/
            PKNREC.SY2CLRAB = " "; /* no description*/
            PKNREC.SY1SSTNM = " ";
            return;
          end
          if (WSY2000.WSY2000-RETURN-CODE == 98) /* CANA database busy*/

            converseLib.validationFailed(31); /* Data in use by another*/
            TA1REC.TA1FUNC = "POST"; /* Termination function*/

          else

            converseLib.validationFailed(01); /* Unexpected error occurred*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/

            converseLib.clearScreen();
             /* Clear screen before display*/

          end
          converseLib.validationFailed(0001); /* Indicate system error*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1LOC = "CALL SY2000";
          TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program appl*/
          TA1REC.TA1PGMNM = "SL0ESCI"; /* Program number*/
          TA1REC.TA1MAP = SLWREC.XXXMAPNM; /* Map name*/
          TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
          TA1REC.TA1TBLVU = "VSYREG02"; /* Table view name*/
          TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* Table key*/

                              /* Error diagnosis routine*/
          call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

          exit stack; /* Exit to display map*/

        end
      end
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PKNREC.SY2CLRAB = " "; /* no description*/
      PKNREC.SY1SSTNM = " ";

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN STYLE NAME FOR HEADING";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSTYLE01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* Table key*/
  TA1REC.TA1MAPNO = "M001"; /* map number*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL07-161

// obtain external size
Function SL07-162()
   /* ************************************************************/
   /* *** obtain external size                                ****/
   /* ************************************************************/

  set SYPREC empty;

  SYPREC.SYPFC = "IE"; /* external to internal translate*/
  SYPREC.SYPCMPSW = "C"; /* indicate compressed format*/

  SYPREC.XGPCD = SL07W01.SL07W-XGP-GPC-CD;
  SYPREC.SY1STNBR = SL07W01.SL07W-SY-STY-NBR;
  SYPREC.SY2CLRID = SL07W01.SL07W-SY-COLR-CD-ID;
  SYPREC.XDMCD = SL07W01.SL07W-XDM-DIM-CD;
  SYPREC.XQACD = SL07W01.SL07W-XQA-QUAL-CD;
  SYPREC.SY5SZID[1] = SL6REC.SY5SZID;


  TA1REC.TA1LOCAT[2] = "SL07162 ";
  TA1REC.TA1MAP = "SL07M001";

  call "SY1190" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes}; /* convert internal size*/

end // end SL07-162

// Add page to temporary storage
Function SL07-170()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  SL07W01.XXXTSLEN = SL07W00.XXXTSLEN; /* Temporary storage   lengt;*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (SL07W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set SL07W01 empty; /* M001 display storage*/

    SL07W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "170"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL07-170

// Close selected set cursor
Function SL07-180()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1470" ("CG", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "180"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYLOC01"; /* Table view name*/
  TA1REC.TA1MAPNO = "M001"; /* map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL07-180

// Format and converse the map
Function SL07-200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SL07W00.SL07W-RQT-DATA-SW == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SL07W00.SL07W-FORMAT-MAP-SW == "Y") /* Map must be formatted*/
      SL07-210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SL07M001.SL07M-XXX-CURR-DT = VGVar.currentShortGregorianDate; /* Current date*/

  SL07M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SL07M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SL07M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SL07M001.SL07M-XXX-MODID = SLWREC.XXXLOCID; /* Module ID*/

    set SL07M001 alarm; /* Indicate sound alarm*/

  end

  converse SL07M001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SL07M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SL07M001.CAITEM; /* Application data*/


end // end SL07-200

// Format the display data
Function SL07-210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SL07M001 initial; /* map input/output area*/

  SL07W00.SL07W-FORMAT-MAP-SW = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (SL07W00.TA5TSQIX > 0) /* Pages were formatted*/

    if (SL07W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (SL07W00.SL07W-UPD-PAGE-SW == "Y") /* Current page was changed*/

        SL07S01(); /* Update temporary storage page*/

        SL07W00.SL07W-UPD-PAGE-SW = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (SL07W00.XXXTSPAG > SL07W00.TA5TSQIX) /* Desired greater highest*/
        SL07W00.XXXTSPAG = SL07W00.TA5TSQIX; /* Default to highest*/
      end

      SL07S02(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set SL07M001.XXXLITPG skip; /* "PAGE" literal*/
    SL07M001.XXXTSPAG = SL07W00.XXXTSPAG; /* Current page*/
    set SL07M001.XXXLITOF skip; /* "OF" literal*/
    SL07M001.TA5TSQIX = SL07W00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  SL07M001.SL07M-XWH-WHSE-CD = SL07W01.SL07W-XWH-WHSE-CD; /* warehouse code*/

  SL07M001.SL07M-XWH-WHSE-NM = SL07W01.SL07W-XWH-WHSE-NM; /* warehouse code*/

  SL07M001.SL07M-XBC-BRAND-CD = SL07W01.SL07W-XBC-BRAND-CD; /* warehouse code*/

  SL07M001.SL07M-SL-RLOG-CASE = SL07W01.SL07W-SL-RLOG-CASE; /* warehouse code*/


  SL07W00.SL07W-MAP-FIELD-INX = 1; /* Initialize line index*/

  while (SL07W00.SL07W-MAP-FIELD-INX <= 4 /* Until screen is full*/
   && SL07W01.SL07W-XAR-AREA-CD[SL07W-MAP-FIELD-INX] > " ")

    if (SL07W00.SL07W-MAP-FIELD-INX == 1) /* First select field*/

      set SL07M001.SL07M-SELECT[SL07W-MAP-FIELD-INX] cursor, normal;
    else
      set SL07M001.SL07M-SELECT[SL07W-MAP-FIELD-INX] normal; /* Unprotect*/

    end
  /* display headers as needed*/

    set SL07M001.SL07M-S[SL07W-MAP-FIELD-INX] normal;
    set SL07M001.SL07M-GP[SL07W-MAP-FIELD-INX] normal;
    set SL07M001.SL07M-STYLE[SL07W-MAP-FIELD-INX] normal;
    set SL07M001.SL07M-CLR[SL07W-MAP-FIELD-INX] normal;
    set SL07M001.SL07M-DM[SL07W-MAP-FIELD-INX] normal;
    set SL07M001.SL07M-QL[SL07W-MAP-FIELD-INX] normal;
    set SL07M001.SL07M-ISG[SL07W-MAP-FIELD-INX] normal;
    set SL07M001.SL07M-EDF[SL07W-MAP-FIELD-INX] normal;
    set SL07M001.SL07M-SLC[SL07W-MAP-FIELD-INX] normal;
    set SL07M001.SL07M-UM[SL07W-MAP-FIELD-INX] normal;
    set SL07M001.SL07M-OW[SL07W-MAP-FIELD-INX] normal;
    set SL07M001.SL07M-SIZE-H[SL07W-MAP-FIELD-INX] normal;
    set SL07M001.SL07M-U-C[SL07W-MAP-FIELD-INX] normal;
    set SL07M001.SL07M-NET[SL07W-MAP-FIELD-INX] normal;
    set SL07M001.SL07M-ONHAND[SL07W-MAP-FIELD-INX] normal;
    set SL07M001.SL07M-PK-RES[SL07W-MAP-FIELD-INX] normal;
    set SL07M001.SL07M-SAS[SL07W-MAP-FIELD-INX] normal;
    set SL07M001.SL07M-AREA[SL07W-MAP-FIELD-INX] normal;
    set SL07M001.SL07M-ZONE[SL07W-MAP-FIELD-INX] normal;
    set SL07M001.SL07M-LOCATION[SL07W-MAP-FIELD-INX] normal;
    set SL07M001.SL07M-LOT-ID[SL07W-MAP-FIELD-INX] normal;

   /* --------------------------------------------------------------------*/
   /* move display fields from working storage*/
   /* --------------------------------------------------------------------*/

    /* selection column*/
    SL07M001.SL07M-SELECT[SL07W-MAP-FIELD-INX] = SL07W01.SL07W-SELECT[SL07W-MAP-FIELD-INX];

    SL07M001.SL07M-XAR-AREA-CD[SL07W-MAP-FIELD-INX] = SL07W01.SL07W-XAR-AREA-CD[SL07W-MAP-FIELD-INX];

    SL07M001.SL07M-SL-ZONE-CD[SL07W-MAP-FIELD-INX] = SL07W01.SL07W-SL-ZONE-CD[SL07W-MAP-FIELD-INX];

    SL07M001.SL07M-SL-LOC-CD[SL07W-MAP-FIELD-INX] = SL07W01.SL07W-SL-LOC-CD[SL07W-MAP-FIELD-INX];

    SL07M001.SL07M-SL-RCV-LOT-ID[SL07W-MAP-FIELD-INX] = SL07W01.SL07W-SL-RCV-LOT-ID[SL07W-MAP-FIELD-INX];

    SL07M001.SL07M-SY-STY-NM[SL07W-MAP-FIELD-INX] = SL07W01.SL07W-SY-STY-NM[SL07W-MAP-FIELD-INX];

    SL07M001.SL07M-SY-COLR-NM[SL07W-MAP-FIELD-INX] = SL07W01.SL07W-SY-COLR-NM[SL07W-MAP-FIELD-INX];

    SL07M001.SL07M-XGP-GPC-CD[SL07W-MAP-FIELD-INX] = SL07W01.SL07W-XGP-GPC-CD[SL07W-MAP-FIELD-INX];

    SL07M001.SL07M-SY-STY-NBR[SL07W-MAP-FIELD-INX] = SL07W01.SL07W-SY-STY-NBR[SL07W-MAP-FIELD-INX];

    SL07M001.SL07M-SY-COLR-CD-ID[SL07W-MAP-FIELD-INX] = SL07W01.SL07W-SY-COLR-CD-ID[SL07W-MAP-FIELD-INX];

    SL07M001.SL07M-XDM-DIM-CD[SL07W-MAP-FIELD-INX] = SL07W01.SL07W-XDM-DIM-CD[SL07W-MAP-FIELD-INX];

    SL07M001.SL07M-XQA-QUAL-CD[SL07W-MAP-FIELD-INX] = SL07W01.SL07W-XQA-QUAL-CD[SL07W-MAP-FIELD-INX];

    SL07M001.SL07M-PC-CU-IN-SEG-CD[SL07W-MAP-FIELD-INX] = SL07W01.SL07W-PC-CU-IN-SEG-CD[SL07W-MAP-FIELD-INX];

    SL07M001.SL07M-XEG-ENGR-DIFF-CD[SL07W-MAP-FIELD-INX] = SL07W01.SL07W-XEG-ENGR-DIFF-CD[SL07W-MAP-FIELD-INX];

    SL07M001.SL07M-XSL-CLASS-CD[SL07W-MAP-FIELD-INX] = SL07W01.SL07W-XSL-CLASS-CD[SL07W-MAP-FIELD-INX];

    SL07M001.SL07M-XUM-UOM-CD[SL07W-MAP-FIELD-INX] = SL07W01.SL07W-XUM-UOM-CD[SL07W-MAP-FIELD-INX];

    SL07M001.SL07M-XOW-OWN-GRP-CD[SL07W-MAP-FIELD-INX] = SL07W01.SL07W-XOW-OWN-GRP-CD[SL07W-MAP-FIELD-INX];

    SL07M001.SL07M-SIZE[SL07W-MAP-FIELD-INX] = SL07W01.SL07W-SIZE[SL07W-MAP-FIELD-INX];

    SL07M001.SL07M-SY-UNITS-PER-CASE[SL07W-MAP-FIELD-INX] = SL07W01.SL07W-SY-UNITS-PER-CASE[SL07W-MAP-FIELD-INX];

    SL07M001.SL07M-SY-UNITS-PER-CASE[SL07W-MAP-FIELD-INX] = SL07W01.SL07W-SY-UNITS-PER-CASE[SL07W-MAP-FIELD-INX];

    SL07M001.SL07M-NET-QTY[SL07W-MAP-FIELD-INX] = SL07W01.SL07W-NET-QTY[SL07W-MAP-FIELD-INX];

    SL07M001.SL07M-SL-SY-LOC-OH-QTY[SL07W-MAP-FIELD-INX] = SL07W01.SL07W-SL-SY-LOC-OH-QTY[SL07W-MAP-FIELD-INX];

    SL07M001.SL07M-SL-SY-LOC-RSRV-QTY[SL07W-MAP-FIELD-INX] = SL07W01.SL07W-SL-SY-LOC-RSRV-QTY[SL07W-MAP-FIELD-INX];

    SL07M001.SL07M-SL-SY-LOC-SAS-QTY[SL07W-MAP-FIELD-INX] = SL07W01.SL07W-SL-SY-LOC-SAS-QTY[SL07W-MAP-FIELD-INX];

    SL07W00.SL07W-MAP-FIELD-INX = SL07W00.SL07W-MAP-FIELD-INX + 1;

  end


end // end SL07-210

// Check attention identifier
Function SL07-300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (SL07W00.SL07W-RQT-DATA-SW == "Y") /* Request for data*/
      set SL07W01 empty; /* M001 display storage*/
    end

    SL07W00.SL07W-FORMAT-MAP-SW = "Y"; /* Format the map switch*/
    SL07W00.SL07W-RQT-DATA-SW = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SL07M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SL07-110(); /* Purge temporary storage*/

      XSSL001(); /* Exit to another application*/

      set SL07M001.CATOAP cursor, bold; /* Highlight*/

    else

      SLWREC.XXXLOCID = "300"; /* Module identification*/
      converseLib.validationFailed(258); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SL07M001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SL0A"; /* TO application*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* TO application*/
    end

    SL07-110(); /* Purge temporary storage*/

    XSSL001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pf6   /* and PF6 was  pressed*/
   || converseVar.eventKey is pf12  /* and PF12 was  pressed*/
   || converseVar.eventKey is pf13  /* and PF13 was  pressed*/
   || converseVar.eventKey is pf14  /* and PF14 was  pressed*/
   || converseVar.eventKey is pf15  /* and PF15 was  pressed*/
   || converseVar.eventKey is pf16  /* and PF16 was  pressed*/
   || converseVar.eventKey is pf17  /* and PF17 was  pressed*/
   || converseVar.eventKey is pf18  /* and PF18 was  pressed*/
   || converseVar.eventKey is enter /* ENTER was not pressed*/
   || converseVar.eventKey is pf7   /* and PF7 was  pressed*/
   || converseVar.eventKey is pf8)  /* and PF8 was  pressed*/

    /* next sentence*/

  else

    SLWREC.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SL07-300

// Reset highlighted fields
Function SL07-400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SL07M001.SL07M-XWH-WHSE-CD initialAttributes; /* warehouse code*/
  set SL07M001.SL07M-XBC-BRAND-CD initialAttributes; /* warehouse code*/
  set SL07M001.SL07M-SL-RLOG-CASE initialAttributes; /* warehouse code*/

  SL07W00.SL07W-MAP-FIELD-INX = 1; /* Initialize line index*/

  while (SL07W00.SL07W-MAP-FIELD-INX <= 4 /* Until end of lines*/
   && SL07M001.SL07M-NET-QTY[SL07W-MAP-FIELD-INX] > 0)
                                  /* or end of display*/

    set SL07M001.SL07M-SELECT[SL07W-MAP-FIELD-INX] normal;
                                  /* reset select flag*/

    SL07W00.SL07W-MAP-FIELD-INX = SL07W00.SL07W-MAP-FIELD-INX + 1;
                                  /* Increment line index*/

  end

  set SL07M001.CATOAP initialAttributes; /* TO application*/
  set SL07M001.CAITEM initialAttributes; /* Application data*/

   /* ----------------------------------------------------------------------*/
    /* pop-up window option -- if not selected, return to previous process*/
   /* ----------------------------------------------------------------------*/

  if (SL07M001.SL07M-XWH-WHSE-CD == "?"
   || SL07M001.SL07M-XBC-BRAND-CD == "?")

    if (converseVar.eventKey not enter) /* enter was not pressed*/

      SLWREC.XXXLOCID = "400"; /* module identification*/
      converseLib.validationFailed(4); /* pkkey invalid*/

      exit stack; /* exit to display map*/

    end

  else

    return; /* return to previous processing*/

  end

  SL07-410();

   /* ----------------------------------------------------------------------*/
   /* clear screen for pop-ups, then display map*/
   /* ----------------------------------------------------------------------*/

  converseLib.clearScreen();
   /* clear screen before display*/

  exit stack; /* exit to display map*/
end // end SL07-400

// Pop-up window lists
Function SL07-410()
   /* ------------------------------------------------------------*/
   /* warehouse pop-up window*/
   /* ------------------------------------------------------------*/

  if (SL07M001.SL07M-XWH-WHSE-CD == "?") /* Warehouse list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  WAREHOUSE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SL07M001.SL07M-XWH-WHSE-CD = SL07W01.SL07W-XWH-WHSE-CD;
    else
      SL07M001.SL07M-XWH-WHSE-CD = XWHTBL.XWHCD[XX0XWPIX];
      SL07W01.SL07W-XWH-WHSE-CD = XWHTBL.XWHCD[XX0XWPIX];

    end

    set SL07M001.SL07M-XWH-WHSE-CD cursor;
    SLWREC.XXXLOCID = "410"; /* module indentification*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* brand code pop-up window*/
   /* ------------------------------------------------------------*/

  if (SL07M001.SL07M-XBC-BRAND-CD == "?") /* Warehouse list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "      BRAND"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXBC01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SL07M001.SL07M-XBC-BRAND-CD = SL07W01.SL07W-XBC-BRAND-CD;
    else
      SL07M001.SL07M-XBC-BRAND-CD = XBCTBL.XBCCD[XX0XWPIX];
      SL07W01.SL07W-XBC-BRAND-CD = XBCTBL.XBCCD[XX0XWPIX];

    end

    set SL07M001.SL07M-XBC-BRAND-CD cursor;
    SLWREC.XXXLOCID = "410"; /* module indentification*/
    return;

  end

end // end SL07-410

// Verify data that was entered
Function SL07-500()
   /* -----------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (SL07M001.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SL07M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(259); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    SL07-510(); /* Verify scroll request*/

  else

    if (SL07W00.TA5TSQIX > 0) /* page was formatted*/

      SL07W00.SL07W-MAP-FIELD-INX = 4; /* initialize map index*/
      SL07W00.SL07W-ROW-SELECTED = "N";

      while (SL07W00.SL07W-MAP-FIELD-INX > 0) /* until end of lines*/

        SL07-520(); /* verify data in line*/

        SL07W00.SL07W-MAP-FIELD-INX = SL07W00.SL07W-MAP-FIELD-INX - 1;
              /* decrement index*/
      end
    end
  end
   /* ------------------------------------------------------------*/
   /* bypass edits if want to transfer without selecting line*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf12 /* transfer pf keys are pressed*/
   || converseVar.eventKey is pf13 
   || converseVar.eventKey is pf14 
   || converseVar.eventKey is pf15 
   || converseVar.eventKey is pf16 
   || converseVar.eventKey is pf17 
   || converseVar.eventKey is pf18)

    return; /* return to logic flow to skip edits*/

  end

   /* ------------------------------------------------------------*/
   /* Verify header fields--- brand code*/
   /* -------------------------------------------------------------*/
  if (SL07M001.SL07M-XBC-BRAND-CD in XBCTBL.XBCCD
   && XBCTBL.XXXSTAT[sysVar.arrayIndex] == "A")

   /* next sentence*/

  else

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SL07M001.SL07M-XBC-BRAND-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* invalid value in brand*/

  end

   /* ------------------------------------------------------------*/
   /* Verify header fields--- warehouse code*/
   /* -------------------------------------------------------------*/
  if (SL07M001.SL07M-XWH-WHSE-CD in XWHTBL.XWHCD
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")

    SL07M001.SL07M-XWH-WHSE-NM = XWHTBL.XWHABRV[sysVar.arrayIndex];
    SLWREC.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex]; /* CANA save country code*/

  else

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SL07M001.SL07M-XWH-WHSE-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(373); /* invalid warehouse*/

  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end SL07-500

// Verify scroll request
Function SL07-510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && SL07W00.XXXTSPAG < 2)       /* and no previous pages*/

    SLWREC.XXXLOCID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && SL07W00.XXXTSPAG >= SL07W00.TA5TSQIX) /* and no more pages*/

    SLWREC.XXXLOCID = "510"; /* Module identification*/
    converseLib.validationFailed(8); /* No more pages to display*/

  end

end // end SL07-510

// Verify data in the line
Function SL07-520()
   /* ------------------------------------------------------------*/
   /* selection may be made only with a single 's'.  Multiple*/
   /* 's' and characters other than 's' and ' ' are not allowed.*/
   /* ------------------------------------------------------------*/

  if (SL07M001.SL07M-SELECT[SL07W-MAP-FIELD-INX] != " ")
    if (SL07M001.SL07M-SELECT[SL07W-MAP-FIELD-INX] == "S")
      if (SL07W00.SL07W-ROW-SELECTED == "Y")

        SLWREC.XXXLOCID = "520"; /* Module identification*/
        set SL07M001.SL07M-SELECT[SL07W-MAP-FIELD-INX] cursor, bold;
                                  /* highlight*/
        converseLib.validationFailed(51); /* Only one row may be selected*/

      else

        SL07W00.SL07W-ROW-SELECTED = "Y";

        SLWREC.XAR-AREA-CD = SL07W01.SL07W-XAR-AREA-CD[SL07W-MAP-FIELD-INX]; /* area code*/

        SLWREC.SL-ZONE-CD = SL07W01.SL07W-SL-ZONE-CD[SL07W-MAP-FIELD-INX]; /* zone code*/

        SLWREC.SL-LOC-CD = SL07W01.SL07W-SL-LOC-CD[SL07W-MAP-FIELD-INX]; /* own group code*/

        SLWREC.XGPCD = SL07W01.SL07W-XGP-GPC-CD[SL07W-MAP-FIELD-INX]; /* gpc code*/

        SLWREC.SY1STNBR = SL07W01.SL07W-SY-STY-NBR[SL07W-MAP-FIELD-INX]; /* style nbr*/

        SLWREC.SY2CLRID = SL07W01.SL07W-SY-COLR-CD-ID[SL07W-MAP-FIELD-INX]; /* color cd*/

        SLWREC.XDMCD = SL07W01.SL07W-XDM-DIM-CD[SL07W-MAP-FIELD-INX]; /* dimension code*/

        SLWREC.XQACD = SL07W01.SL07W-XQA-QUAL-CD[SL07W-MAP-FIELD-INX]; /* quality code*/

        SLWREC.PC2INSEG = SL07W01.SL07W-PC-CU-IN-SEG-CD[SL07W-MAP-FIELD-INX]; /* inventory segment code*/

        SLWREC.XEG-ENGR-DIFF-CD = SL07W01.SL07W-XEG-ENGR-DIFF-CD[SL07W-MAP-FIELD-INX]; /* engineering difference code*/

        SLWREC.XSLCD = SL07W01.SL07W-XSL-CLASS-CD[SL07W-MAP-FIELD-INX]; /* class code*/

        SLWREC.XUMCD = SL07W01.SL07W-XUM-UOM-CD[SL07W-MAP-FIELD-INX]; /* unit of measure code*/

        SLWREC.XOWCD = SL07W01.SL07W-XOW-OWN-GRP-CD[SL07W-MAP-FIELD-INX]; /* own group code*/

        SLWREC.SY-UNITS-PER-CASE = SL07W01.SL07W-SY-UNITS-PER-CASE[SL07W-MAP-FIELD-INX];

        SLWREC.SY-SZ-ID-DESC = SL07W01.SL07W-SIZE[SL07W-MAP-FIELD-INX];

      end

    else

      SLWREC.XXXLOCID = "520"; /* Module identification*/
      set SL07M001.SL07M-SELECT[SL07W-MAP-FIELD-INX] cursor, bold;
                                  /* highlight*/
      converseLib.validationFailed(228); /* Only "S" may be entered*/

    end
  end

end // end SL07-520

// Process valid input request
Function SL07-600()
   /* ------------------------------------------------------------*/
   /* load slwrec with info to be passed*/
   /* ------------------------------------------------------------*/

  SL07-610(); /* move map working storage to slwrec*/

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    SL07W00.XXXTSPAG = SL07W00.XXXTSPAG - 1; /* Decrement page number*/
    SL07W00.SL07W-FORMAT-MAP-SW = "Y"; /* format map*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    SL07W00.XXXTSPAG = SL07W00.XXXTSPAG + 1; /* Increment page number*/
    SL07W00.SL07W-FORMAT-MAP-SW = "Y"; /* format map*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf6) /* PF6 was pressed*/
    COMMAREA.CATOAP = "SL05"; /* TO application*/
  end

  if (converseVar.eventKey is pf12) /* PF12 was pressed*/
    COMMAREA.CATOAP = "SL01"; /* TO application*/
  end

  if (converseVar.eventKey is pf13) /* PF13 was pressed*/
    COMMAREA.CATOAP = "SL02"; /* TO application*/
  end

  if (converseVar.eventKey is pf14) /* PF14 was pressed*/
    COMMAREA.CATOAP = "SL03"; /* TO application*/
  end

  if (converseVar.eventKey is pf15) /* PF15 was pressed*/
    COMMAREA.CATOAP = "SL04"; /* TO application*/
  end

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    COMMAREA.CATOAP = "SL05"; /* TO application*/
  end

  if (converseVar.eventKey is pf17) /* PF17 was pressed*/
    COMMAREA.CATOAP = "SL0Q"; /* TO application*/
    SLWREC.SLWCASNO = "7"; /* option number*/
  end

  if (converseVar.eventKey is pf18) /* PF18 was pressed*/
    COMMAREA.CATOAP = "SL0Q"; /* TO application*/
    SLWREC.SLWCASNO = "8"; /* option number*/
  end

  if (COMMAREA.CATOAP > " ")

    SL07-110(); /* Purge temporary storage*/

    XSSL001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

  /* --------------------------------------------------------------*/
     /* indicate the map needs to be formatted*/
  /* --------------------------------------------------------------*/

  SL07W00.SL07W-FORMAT-MAP-SW = "Y"; /* format map*/

  /* --------------------------------------------------------------*/
     /* verify header information has not changed*/
  /* --------------------------------------------------------------*/

  if (SL07W01.SL07W-XWH-WHSE-CD != SL07M001.SL07M-XWH-WHSE-CD
   || SL07W01.SL07W-XBC-BRAND-CD != SL07M001.SL07M-XBC-BRAND-CD
   || SL07W01.SL07W-SL-RLOG-CASE != SL07M001.SL07M-SL-RLOG-CASE)

    SL07W00.SL07W-RQT-DATA-SW = "Y"; /* Request for data switch*/

    exit stack;

  end

  if (converseVar.eventKey is enter) /* enter was pressed*/
    exit stack;
    SL07W00.SL07W-FORMAT-MAP-SW = "N"; /* format map*/
  end

end // end SL07-600

// Verify data in the line
Function SL07-610()
   /* ------------------------------------------------------------*/
   /* load map header working storage into slwrec to be passed*/
   /* ------------------------------------------------------------*/

  SLWREC.XWHCD = SL07W01.SL07W-XWH-WHSE-CD; /* whse code*/

end // end SL07-610

// Main process to display a map
Function SL07001()
  /* -----------------------------------------------------------------------*/
      /* main logic - get data from tables using I/O modules*/
  /* -----------------------------------------------------------------------*/

  SL07-100();

  /* -----------------------------------------------------------------------*/
      /* converse SL07M001 - move data to screen*/
  /* -----------------------------------------------------------------------*/

  SL07-200();

  /* -----------------------------------------------------------------------*/
      /* validate keystrokes*/
  /* -----------------------------------------------------------------------*/

  SL07-300();

  /* -----------------------------------------------------------------------*/
      /* reset fields on map, pop-up window processing*/
  /* -----------------------------------------------------------------------*/

  SL07-400();

  /* -----------------------------------------------------------------------*/
       /* validate entered data*/
  /* -----------------------------------------------------------------------*/

  SL07-500();

  /* -----------------------------------------------------------------------*/
       /* process valid request*/
  /* -----------------------------------------------------------------------*/

  SL07-600();
end // end SL07001

// Update temporary storage page
Function SL07S01()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (SL07W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S01"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL07S01

// Read temporary storage page
Function SL07S02()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  SL07W01.XXXTSLEN = SL07W00.XXXTSLEN; /* Temporary storage   lengt;*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = SL07W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SL07W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S02"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL07S02

//*** RECORD=SL07W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record SL07W00 type basicRecord
  10 SL07W-MAP-FIELD-INX SL07W-MAP-FIELD-INX ; 
  10 SL07W-END-CURSOR-SW SL07W-END-CURSOR-SW ; 
  10 SL07W-DISPLAY-MAP-SW SL07W-DISPLAY-MAP-SW ; 
  10 SL07W-FORMAT-MAP-SW SL07W-FORMAT-MAP-SW ; 
  10 SL07W-RQT-DATA-SW SL07W-RQT-DATA-SW ; 
  10 SL07W-UPD-PAGE-SW SL07W-UPD-PAGE-SW ; 
  10 SL07W-ROW-SELECTED SL07W-ROW-SELECTED ; 
  10 SL07W-FIRST-FETCH SL07W-FIRST-FETCH ; 
  10 SL07W-CURRENT-DATE SL07W-CURRENT-DATE ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 SL07W-NET-CALC SL07W-NET-CALC ; 
  10 SL07W-ACCUM-LOC-OH-QTY SL07W-ACCUM-LOC-OH-QTY ; 
  10 SL07W-ACCUM-LOC-RSRV-QTY SL07W-ACCUM-LOC-RSRV-QTY ; 
  10 SL07W-ACCUM-LOC-SAS-QTY SL07W-ACCUM-LOC-SAS-QTY ; 
  10 SL07W-PO-NUM SL07W-PO-NUM ; 
  10 SL07W-PC-PO-ID-MO-RNG SL07W-PC-PO-ID-MO-RNG ; 
  10 SL07W-PC-PO-OT-CD SL07W-PC-PO-OT-CD ; 
  10 SL07W-PC-PO-ID-SESN-CD SL07W-PC-PO-ID-SESN-CD ; 
  10 SL07W-FY-FCTY-CD SL07W-FY-FCTY-CD ; 
end // end SL07W00

//*** RECORD=SL07W01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record SL07W01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(470) ; 
    10 SL07W-XWH-WHSE-CD SL07W-XWH-WHSE-CD ; 
    10 SL07W-XWH-WHSE-NM SL07W-XWH-WHSE-NM ; 
    10 SL07W-XBC-BRAND-CD SL07W-XBC-BRAND-CD ; 
    10 SL07W-SL-RLOG-CASE SL07W-SL-RLOG-CASE ; 
    10 SL07W-SELECT SL07W-SELECT [4] ; 
    10 SL07W-XAR-AREA-CD SL07W-XAR-AREA-CD [4] ; 
    10 SL07W-SL-ZONE-CD SL07W-SL-ZONE-CD [4] ; 
    10 SL07W-SL-LOC-CD SL07W-SL-LOC-CD [4] ; 
    10 SL07W-SL-RCV-LOT-ID SL07W-SL-RCV-LOT-ID [4] ; 
    10 SL07W-SY-STY-NM SL07W-SY-STY-NM [4] ; 
    10 SL07W-SY-COLR-NM SL07W-SY-COLR-NM [4] ; 
    10 SL07W-XGP-GPC-CD SL07W-XGP-GPC-CD [4] ; 
    10 SL07W-SY-STY-NBR SL07W-SY-STY-NBR [4] ; 
    10 SL07W-SY-COLR-CD-ID SL07W-SY-COLR-CD-ID [4] ; 
    10 SL07W-XDM-DIM-CD SL07W-XDM-DIM-CD [4] ; 
    10 SL07W-XQA-QUAL-CD SL07W-XQA-QUAL-CD [4] ; 
    10 SL07W-PC-CU-IN-SEG-CD SL07W-PC-CU-IN-SEG-CD [4] ; 
    10 SL07W-XEG-ENGR-DIFF-CD SL07W-XEG-ENGR-DIFF-CD [4] ; 
    10 SL07W-XSL-CLASS-CD SL07W-XSL-CLASS-CD [4] ; 
    10 SL07W-XUM-UOM-CD SL07W-XUM-UOM-CD [4] ; 
    10 SL07W-XOW-OWN-GRP-CD SL07W-XOW-OWN-GRP-CD [4] ; 
    10 SL07W-SIZE SL07W-SIZE [4] ; 
    10 SL07W-UNPCS SL07W-UNPCS [4] ; 
    10 SL07W-SY-UNITS-PER-CASE SL07W-SY-UNITS-PER-CASE [4] ; 
    10 SL07W-NET-QTY SL07W-NET-QTY [4] ; 
    10 SL07W-SL-SY-LOC-OH-QTY SL07W-SL-SY-LOC-OH-QTY [4] ; 
    10 SL07W-SL-SY-LOC-RSRV-QTY SL07W-SL-SY-LOC-RSRV-QTY [4] ; 
    10 SL07W-SL-SY-LOC-SAS-QTY SL07W-SL-SY-LOC-SAS-QTY [4] ; 
end // end SL07W01

DataItem SL07W-ACCUM-LOC-OH-QTY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SL07W-ACCUM-LOC-RSRV-QTY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SL07W-ACCUM-LOC-SAS-QTY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SL07W-CURRENT-DATE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map to be displayed switch
DataItem SL07W-DISPLAY-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem SL07W-END-CURSOR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL07W-FIRST-FETCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem SL07W-FORMAT-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL07W-FY-FCTY-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem SL07W-MAP-FIELD-INX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL07W-NET-CALC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SL07W-NET-QTY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem SL07W-PC-CU-IN-SEG-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL07W-PC-PO-ID-MO-RNG int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SL07W-PC-PO-ID-SESN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem SL07W-PC-PO-OT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL07W-PO-NUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SL07W-ROW-SELECTED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem SL07W-RQT-DATA-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line selection indicator
DataItem SL07W-SELECT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem SL07W-SIZE char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL07W-SL-LOC-CD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL07W-SL-RCV-LOT-ID num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL07W-SL-RLOG-CASE char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL07W-SL-SY-LOC-OH-QTY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL07W-SL-SY-LOC-RSRV-QTY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL07W-SL-SY-LOC-SAS-QTY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL07W-SL-ZONE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// color code
DataItem SL07W-SY-COLR-CD-ID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_NM
DataItem SL07W-SY-COLR-NM char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style number
DataItem SL07W-SY-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_NM
DataItem SL07W-SY-STY-NM char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL07W-SY-UNITS-PER-CASE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL07W-UNPCS num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem SL07W-UPD-PAGE-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL07W-XAR-AREA-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL07W-XBC-BRAND-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dim code
DataItem SL07W-XDM-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem SL07W-XEG-ENGR-DIFF-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gen prod class code
DataItem SL07W-XGP-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem SL07W-XOW-OWN-GRP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// qual code
DataItem SL07W-XQA-QUAL-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem SL07W-XSL-CLASS-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem SL07W-XUM-UOM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse code
DataItem SL07W-XWH-WHSE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse code
DataItem SL07W-XWH-WHSE-NM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

