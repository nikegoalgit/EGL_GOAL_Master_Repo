package sl0y;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import pk.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SL0Y ****
// This application allows a user to inquire in a DB2 table.
// 
// There are two different screens that may be displayed.
// 
// The first screen displayed to the user allows specification
// of the search criteria to be used to list the rows in the
// table.  The list is displayed and the user may page backward
// and forward to view the information.
// 
// When a line is selected on the screen, the second screen is
// displayed, showing all information for that table row.  The
// user may page backward and forward to view the information.
// 
// When the user exits the second screen the first screen is
// redisplayed.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      12/11/90  MKRAUS  New application.
// FIX      02/01/91  BGILDE  Changed size description to show
//                            external size.
// sl#0     06/26/91  mpluth  Changed the map size from NUM to
//                            CHA.
// SL#0     10/10/91  SPOPA   Change "Allow Implicits" to NO.
// SL#0     07/06/91  mpluth  unknown
// *********************
Program SL0Y type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SL0YW00 SL0YW00; // record
  SL0YW01 SL0YW01; // record
  SL0YW02 SL0YW02; // record
  SL8REC SL8REC; // record
  SL9REC SL9REC; // record
  SLBREC SLBREC; // record
  SLCREC SLCREC; // record
  SLVREC SLVREC; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SWVREC SWVREC; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL; // table
  use XWHTBL; // table
  use YWSTBL; // table
  use YWTTBL; // table
  use SL0YM.SL0YM001,  // forms
      SL0YM.SL0YM002, 
      SL0YM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SL0YM001 initial; /* M001 input/output*/
    set SL0YM002 initial; /* M002 input/output*/
    set XX0XM001 initial; /* M002 input/output*/
    set SL0YW00 empty; /* Working storage*/
    set SL0YW01 empty; /* M001 display storage*/
    set SL0YW02 empty; /* M001 display storage*/
    set SLBREC empty;
    set SLCREC empty;
    set SLVREC empty;
    set SL8REC empty;
    set SL9REC empty;
    set SWVREC empty;
    set SYPREC empty;
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty;
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set XX0XW02 empty;
    set SQLCA empty; /* SQL communication area*/
    set ERRSQLCA empty; /* SQL communication area*/

    SL0YW00.SL0YWSWD = "1"; /* Map to be displayed switch*/
    SL0YW00.SL0YWSWF = "Y"; /* Format the map switch*/
    SL0YW00.SL0YWSWR = "N"; /* Request for data switch*/

     /* ------------------------------------------------------------*/
     /* If data was passed in the COMMAREA, use as the initial key.*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.CAITEM > " ") /* Data was passed*/

      SL0YM001.XWHCD = COMMAREA.XWHCD; /* Warehouse code*/

      COMMAREA.CAITEM = " "; /* Clear passed data*/

      SL0YW00.SL0YWSWR = "Y"; /* Request for data switch*/

    else

      SL0YW01.XWHCD = COMMAREA.XWHCD; /* Warehouse code*/

    end


     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SL0Y001; /* Converse the main process*/


    SL0Y001: SL0Y001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SL0Y001; /* Converse the main process*/


  end // end main
end // end SL0Y

// Main process to display a map
Function SL0Y001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (SL0YW00.SL0YWSWD == "1") /* Map 1 was requested*/

    SL0Y100(); /* Display map 1*/

  else

    if (SL0YW00.SL0YWSWD == "2") /* Map 2 was requested*/

      SL0Y200(); /* Display map 2*/

    else

      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/

      SLWREC.XXXLOCID = "001"; /* Module identification*/
      SLWREC.SLWMSGNO = 10; /* Unexpected error occurred*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = SL0YW00.SL0YWSWD; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/

      COMMAREA.CATOAP = "SL0Y"; /* TO application*/

      XSSL001(); /* Exit to another application*/

      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/

      TA1REC.TA1FUNC = "ABND"; /* Termination function*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    end

  end


end // end SL0Y001

// Main process to display a map
Function SL0Y100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SL0Y110(); /* Obtain the data to display*/

  SL0Y120(); /* Format and converse the map*/

  SL0Y130(); /* Check attention identifier*/

  SL0Y140(); /* Reset highlighted fields*/

  SL0Y150(); /* Verify entered data*/

  SL0Y160(); /* Process valid input request*/

end // end SL0Y100

// Obtain the data to display
Function SL0Y110()
   /* ------------------------------------------------------------*/
   /* Default to current date*/
   /* ------------------------------------------------------------*/

  if (SL0YW00.SL0YWDTT == 0) /* to date*/
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "E";
    TA2REC.TA2GRGEN = VGVar.currentShortGregorianDate;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    if (TA2REC.TA2RTNCD == 0)
      SL0YW01.SL0YWTDT = TA2REC.TA2GRGAN;
      SL0YW00.SL0YWDTT = TA2REC.TA2GRGGN;
    else
      SLWREC.SLWERRSW = "Y";
      set SL0YM001.SL0YMTDT cursor, bold; /* highlight*/
      SLWREC.XXXLOCID = "110";
      converseLib.validationFailed(21); /* Invalid date entered*/
    end
  end

  if (SL0YW00.SL0YWDTF == 0) /* from date*/
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "E";
    TA2REC.TA2GRGEN = VGVar.currentShortGregorianDate;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    if (TA2REC.TA2RTNCD == 0)
      SL0YW01.SL0YWFDT = TA2REC.TA2GRGAN; /* from date*/
      SL0YW00.SL0YWCUD = TA2REC.TA2GRGB; /* current date*/
      SL0YW00.SL0YWDTF = TA2REC.TA2GRGGN; /* to date*/
    else
      SLWREC.SLWERRSW = "Y";
      set SL0YM001.SL0YMFDT cursor, bold; /* highlight*/
      SLWREC.XXXLOCID = "110";
      converseLib.validationFailed(21); /* Invalid date entered*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SL0YW00.SL0YWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  SL0YW00.XXXTSLEN = 1624; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO == 0) /* No message to display*/
    SL0YW00.XXXTSPAG = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage.*/
   /* ------------------------------------------------------------*/

  SL0Y111(); /* Purge any temporary storage SL0YW01*/

   /* ------------------------------------------------------------*/
   /* Save key fields.*/
   /* ------------------------------------------------------------*/

  SL0YS05();

  SL0YW00.SL0YWSL8 = " "; /* init current/historical flag*/

  if (converseVar.validationMsgNum > 0)
    return;
  end

   /* ------------------------------------------------------------*/
   /* Select the current info to display in map1.*/
   /* ------------------------------------------------------------*/

  SL0Y112(); /* Select heading info from current*/
  if (SL0YW00.SL0YWSL8 == "Y") /* If current*/
    SL0Y114();
  end
  SL0Y118(); /* Close current sursor*/

   /* ------------------------------------------------------------*/
   /* Select the historical info to display in map1.*/
   /* ------------------------------------------------------------*/

  SL0Y113(); /* Select heading info from historical*/
  if (SL0YW00.SL0YWSL8 == "N") /* If historical*/
    SL0Y114();
  end
  SL0Y119(); /* Close historical cursor*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SL0YW00.SL0YWSWR = "N"; /* Request for data switch*/


end // end SL0Y110

// Purge temporary storage map1
Function SL0Y111()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SL0YW01 empty; /* M001 display storage*/

  SL0YW00.SL0YWSWU = "N"; /* Storage update switch*/
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SL0YW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SL0YW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "111"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0Y111

// Select the heading information
Function SL0Y112()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set SL8REC empty; /* Clear row storage area*/

  SL8REC.XWHCD = SL0YW01.XWHCD; /* Warehouse code*/
  SL8REC.XGPCD = SL0YW01.XGPCD; /* GPC*/
  SL8REC.PC3PONBR = SL0YW01.SL0YWPON; /* PO Nbr*/

  if (SL0YW01.YWSCD == " ") /* status*/
    SL8REC.YWSCD = "*";
  else
    SL8REC.YWSCD = SL0YW01.YWSCD;
  end

  if (SL0YW01.YWTCD == " ") /* wo type*/
    SL8REC.YWTCD = "*";
  else
    SL8REC.YWTCD = SL0YW01.YWTCD;
  end

  SLVREC.SLVFNC = "S7"; /* function code for SLVREC*/
  SLVREC.SLVSDT = SL0YW00.SL0YWDTF;
  SLVREC.SLVEDT = SL0YW00.SL0YWDTT;

  try
    call "IO1510" (SLVREC, SQLCA, SL8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      SL0YW00.SL0YWSL8 = "N"; /* Not current*/
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* Successful*/
        SL0YW00.SL0YWSL8 = "Y"; /* Current*/
      else
        SLWREC.XXXLOCID = "112"; /* module identification*/
        TA1REC.TA1TBLKE = SL8REC.SL8KEY; /* table key*/
        TA1REC.TA1LOC = "SELECT SET WORK ORDER HEADER "; /* LOC*/
        SL0YS08(); /* common error routine*/
      end
    end
  else
    SLWREC.XXXLOCID = "112"; /* module identification*/
    TA1REC.TA1TBLKE = SL8REC.SL8KEY; /* table key*/
    TA1REC.TA1LOC = "SELECT SET WORK ORDER HEADER "; /* LOC*/
    SL0YS08(); /* common error routine*/
  end


end // end SL0Y112

// Select the heading information
Function SL0Y113()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set SLBREC empty; /* Clear row storage area*/

  SLBREC.XWHCD = SL0YW01.XWHCD; /* Warehouse code*/
  SLBREC.XGPCD = SL0YW01.XGPCD; /* GPC*/
  SLBREC.PC3PONBR = SL0YW01.SL0YWPON; /* PO Nbr*/

  if (SL0YW01.YWSCD == " ") /* status*/
    SLBREC.YWSCD = "*";
  else
    SLBREC.YWSCD = SL0YW01.YWSCD;
  end

  if (SL0YW01.YWTCD == " ") /* wo type*/
    SLBREC.YWTCD = "*";
  else
    SLBREC.YWTCD = SL0YW01.YWTCD;
  end

  SLVREC.SLVFNC = "S6"; /* function code for SLVREC*/
  SLVREC.SLVSDT = SL0YW00.SL0YWDTF;
  SLVREC.SLVEDT = SL0YW00.SL0YWDTT;

  try
    call "IO1530" (SLVREC, SQLCA, SLBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      SL0YW00.SL0YWSL8 = " "; /* Not historical*/
      converseLib.validationFailed(12); /* Record not found*/
      SLWREC.XXXLOCID = "113"; /* module identification*/
      set SL0YM001.SL0YMPON cursor, bold; /* highlight*/
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* Successful*/
        SL0YW00.SL0YWSL8 = "N"; /* Historical*/
      else
        SLWREC.XXXLOCID = "113"; /* module identification*/
        TA1REC.TA1TBLKE = SLBREC.SLBKEY; /* table key*/
        TA1REC.TA1LOC = "SELECT SET WORK ORDER HEADER "; /* LOC*/
        SL0YS08(); /* common error routine*/
      end
    end
  else
    SLWREC.XXXLOCID = "113"; /* module identification*/
    TA1REC.TA1TBLKE = SLBREC.SLBKEY; /* table key*/
    TA1REC.TA1LOC = "SELECT SET WORK ORDER HEADER "; /* LOC*/
    SL0YS08(); /* common error routine*/
  end


end // end SL0Y113

// Obtain the data to display
Function SL0Y114()
   /* ------------------------------------------------------------*/
   /* Set index to one*/
   /* ------------------------------------------------------------*/

  SL0YW00.SL0YWIXM = 1; /* Display line index*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  SL0YW00.SL0YWSWC = "N"; /* End of cursor switch*/

  while (SL0YW00.SL0YWSWC == "N") /* Until end of cursor*/

    /* ------------------------------------------------------------*/
     /* If current call SL8REC else is old call SLBREC.*/
    /* ------------------------------------------------------------*/

    if (SL0YW00.SL0YWSL8 == "Y") /* Current*/
      SL0Y115(); /* Fetch next*/
      SL0YW00.SL0YWSWT = SL8REC.YWTCD; /* save wo type*/
    end

    if (SL0YW00.SL0YWSL8 == "N") /* Old*/
      SL0Y116(); /* Fetch next*/
      SL0YW00.SL0YWSWT = SLBREC.YWTCD; /* save wo type*/
    end

    /* ------------------------------------------------------------*/
     /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/

    if (SL0YW00.SL0YWSWC == "N" /* Not end of cursor*/
     && SL0YM001.SL0YMOMI != SL0YW00.SL0YWSWT) /* exclude omit type*/
      SL0Y117(); /* Save data in display storage*/
    end

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (SL0YW00.SL0YWIXM > 15) /* Page is full*/

      SL0YS03();
                                   /* Add page to temporary storage Map 001*/

      SL0YW00.SL0YWIXM = 1; /* Display line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (SL0YW00.SL0YWIXM > 1) /* Page was formatted*/
    SL0YS03();
                                   /* Add page to temporary storage Map 001*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (SL0YW00.TA5TSQIX == 0 /* No pages formatted*/
   && SL0YW00.SL0YWSL8 == "N") /* Old*/

    SLWREC.XXXLOCID = "114"; /* Module identification*/
    converseLib.validationFailed(12); /* Record not on data base*/

    return; /* Return to previous process*/

  end


end // end SL0Y114

// Fetch next row in the cursor
Function SL0Y115()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1510" ("N7", SQLCA, SL8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      SL0YW00.SL0YWSWC = "Y"; /* Indicate end of cursor*/
    else
      if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return*/
        SLWREC.XXXLOCID = "115"; /* module identification*/
        TA1REC.TA1TBLKE = SL8REC.SL8KEY; /* table key*/
        TA1REC.TA1LOC = "SELECT NEXT WORK ORDER HEADER   "; /* LOC*/
        SL0YS08(); /* common error routine*/
      end
    end
  else
    SLWREC.XXXLOCID = "115"; /* module identification*/
    TA1REC.TA1TBLKE = SL8REC.SL8KEY; /* table key*/
    TA1REC.TA1LOC = "SELECT NEXT WORK ORDER HEADER   "; /* LOC*/
    SL0YS08(); /* common error routine*/
  end


end // end SL0Y115

// Fetch next row in the cursor
Function SL0Y116()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1530" ("N6", SQLCA, SLBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      SL0YW00.SL0YWSWC = "Y"; /* Indicate end of cursor*/
    else
      if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return*/
        SLWREC.XXXLOCID = "116"; /* module identification*/
        TA1REC.TA1TBLKE = SLBREC.SLBKEY; /* table key*/
        TA1REC.TA1LOC = "SELECT NEXT WORK ORDER HEADER   "; /* LOC*/
        SL0YS08(); /* common error routine*/
      end
    end
  else
    SLWREC.XXXLOCID = "116"; /* module identification*/
    TA1REC.TA1TBLKE = SLBREC.SLBKEY; /* table key*/
    TA1REC.TA1LOC = "SELECT NEXT WORK ORDER HEADER   "; /* LOC*/
    SL0YS08(); /* common error routine*/
  end


end // end SL0Y116

// Save data in display storage
Function SL0Y117()
   /* ------------------------------------------------------------*/
   /* If first line on page, save heading information.*/
   /* ------------------------------------------------------------*/

  if (SL0YW00.SL0YWIXM == 1) /* first line on page*/
    SL0YW01.SL0YWPGL = 0; /* Page line counter*/
    SL0YW01.XWHSABRV = SL0YM001.XWHSABRV; /* Warehouse abbrev*/
    SL0YW01.SL0YWPOI = SL0YM001.SL0YMPOI; /* PO Id*/
    SL0YW01.PCFSECD = SL0YM001.PCFSECD;
    SL0YW01.SL0YWPON = SL0YM001.SL0YMPON; /* PO Nbr*/
    SL0YW01.SL0YWOMI = SL0YM001.SL0YMOMI; /* Omit type*/
    SL0YW01.SL0YWFDT = SL0YM001.SL0YMFDT; /* From date*/
    SL0YW01.SL0YWTDT = SL0YM001.SL0YMTDT; /* To date*/
    SL0YW01.XGPCD = SL0YM001.XGPCD; /* GPC*/
    if (SL0YW00.SL0YWSL8 == "Y") /* If current*/
      SL0YW01.XWHCD = SL8REC.XWHCD; /* Warehouse code*/
      SL0YW01.SL0YWSCD = SL8REC.YWSCD; /* Status*/
      SL0YW01.SL0YWTCD = SL8REC.YWTCD; /* type code*/
    else
      if (SL0YW00.SL0YWSL8 == "N") /* If historical*/
        SL0YW01.XWHCD = SLBREC.XWHCD; /* Warehouse code*/
        SL0YW01.SL0YWSCD = SLBREC.YWSCD; /* Status*/
        SL0YW01.SL0YWTCD = SLBREC.YWTCD; /* type code*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  if (SL0YW00.SL0YWSL8 == "Y") /* If current*/
    SL0YW01.SL0YMSEL[SL0YWIXM] = SL0YM001.SL0YMSEL[SL0YWIXM];
    SL0YW01.YWSCD[SL0YWIXM] = SL8REC.YWSCD; /* Status*/
    SL0YW01.YWTCD[SL0YWIXM] = SL8REC.YWTCD; /* Type*/
    SL0YW01.SL8WONBR[SL0YWIXM] = SL8REC.SL8WONBR; /* WO Nbr*/
    SL0YW01.SL2PALET[SL0YWIXM] = SL8REC.SL2PALET; /* Palet*/
    SL0YW01.SL2CASE[SL0YWIXM] = SL8REC.SL2CASE; /* CASE*/
    SL0YW01.SL8WOGRP[SL0YWIXM] = SL8REC.SL8WOGRP; /* WO Group*/
    SL0YW01.SL8FRAR[SL0YWIXM] = SL8REC.SL8FRAR; /* FROM AREA*/
    SL0YW01.SL8FRZN[SL0YWIXM] = SL8REC.SL8FRZN; /* FROM ZONE*/
    SL0YW01.SL8FRLC[SL0YWIXM] = SL8REC.SL8FRLC; /* FROM LOCATION*/
    SL0YW01.SL8TOAR[SL0YWIXM] = SL8REC.SL8TOAR; /* To Area*/
    SL0YW01.SL8TOZN[SL0YWIXM] = SL8REC.SL8TOZN; /* To Zone*/
    SL0YW01.SL8TOLC[SL0YWIXM] = SL8REC.SL8TOLC; /* To Location*/
    SL0YW01.SL0YWRDT[SL0YWIXM] = SL8REC.ZZZSDT; /* Create date*/

    SL0YW01.SWEPLLNB[SL0YWIXM] = SL8REC.SWEPLLNB; /* Plan nbr*/
    SL0YW01.SL8WOPY[SL0YWIXM] = SL8REC.SL8WOPY; /* Priority*/
    SL0YW01.SL8CRTBY[SL0YWIXM] = SL8REC.SL8CRTBY; /* Created by*/
    SL0YW01.XGPCD[SL0YWIXM] = SL8REC.XGPCD; /* Gen prod class*/
    SL0YW01.SY1STNBR[SL0YWIXM] = SL8REC.SY1STNBR; /* Style*/
    SL0YW01.SY2CLRID[SL0YWIXM] = SL8REC.SY2CLRID; /* Color*/
    SL0YW01.XDMCD[SL0YWIXM] = SL8REC.XDMCD; /* Dimension*/
    SL0YW01.XQACD[SL0YWIXM] = SL8REC.XQACD; /* Quality*/
    SL0YW01.PC2INSEG[SL0YWIXM] = SL8REC.PC2INSEG; /* ISEG*/
    SL0YW01.XEGCD[SL0YWIXM] = SL8REC.XEGCD; /* EDF*/
    SL0YW01.XSLCD[SL0YWIXM] = SL8REC.XSLCD; /* slc*/
    SL0YW01.XPGCD[SL0YWIXM] = SL8REC.XPGCD; /* Package*/
    SL0YW01.XUMCD[SL0YWIXM] = SL8REC.XUMCD; /* Unit*/
    SL0YW01.XOWCD[SL0YWIXM] = SL8REC.XOWCD; /* Owner*/
    SL0YW01.SL0YWCDT[SL0YWIXM] = SL8REC.ZZZCHGDT; /* Comp/cancel dt*/

  else
    if (SL0YW00.SL0YWSL8 == "N") /* If current*/
      SL0YW01.SL0YMSEL[SL0YWIXM] = SL0YM001.SL0YMSEL[SL0YWIXM];
      SL0YW01.YWSCD[SL0YWIXM] = SLBREC.YWSCD; /* Status*/
      SL0YW01.YWTCD[SL0YWIXM] = SLBREC.YWTCD; /* Type*/
      SL0YW01.SL8WONBR[SL0YWIXM] = SLBREC.SL8WONBR; /* WO Nbr*/
      SL0YW01.SL2PALET[SL0YWIXM] = SLBREC.SL2PALET; /* Palet*/
      SL0YW01.SL2CASE[SL0YWIXM] = SLBREC.SL2CASE; /* CASE*/
      SL0YW01.SL8WOGRP[SL0YWIXM] = SLBREC.SL8WOGRP; /* WO Group*/
      SL0YW01.SL8FRAR[SL0YWIXM] = SLBREC.SL8FRAR; /* FROM AREA*/
      SL0YW01.SL8FRZN[SL0YWIXM] = SLBREC.SL8FRZN; /* FROM ZONE*/
      SL0YW01.SL8FRLC[SL0YWIXM] = SLBREC.SL8FRLC; /* FROM LOCATION*/
      SL0YW01.SL8TOAR[SL0YWIXM] = SLBREC.SL8TOAR; /* To Area*/
      SL0YW01.SL8TOZN[SL0YWIXM] = SLBREC.SL8TOZN; /* To Zone*/
      SL0YW01.SL8TOLC[SL0YWIXM] = SLBREC.SL8TOLC; /* To Location*/
      SL0YW01.SL0YWRDT[SL0YWIXM] = SLBREC.ZZZSDT; /* Create date*/

      SL0YW01.SWEPLLNB[SL0YWIXM] = SLBREC.SWEPLLNB; /* Plan nbr*/
      SL0YW01.SL8WOPY[SL0YWIXM] = SLBREC.SL8WOPY; /* Priority*/
      SL0YW01.SL8CRTBY[SL0YWIXM] = SLBREC.SL8CRTBY; /* Created by*/
      SL0YW01.XGPCD[SL0YWIXM] = SLBREC.XGPCD; /* Gen prod class*/
      SL0YW01.SY1STNBR[SL0YWIXM] = SLBREC.SY1STNBR; /* Style*/
      SL0YW01.SY2CLRID[SL0YWIXM] = SLBREC.SY2CLRID; /* Color*/
      SL0YW01.XDMCD[SL0YWIXM] = SLBREC.XDMCD; /* Dimension*/
      SL0YW01.XQACD[SL0YWIXM] = SLBREC.XQACD; /* Quality*/
      SL0YW01.PC2INSEG[SL0YWIXM] = SLBREC.PC2INSEG; /* ISEG*/
      SL0YW01.XEGCD[SL0YWIXM] = SLBREC.XEGCD; /* EDF*/
      SL0YW01.XSLCD[SL0YWIXM] = SLBREC.XSLCD; /* slc*/
      SL0YW01.XPGCD[SL0YWIXM] = SLBREC.XPGCD; /* Package*/
      SL0YW01.XUMCD[SL0YWIXM] = SLBREC.XUMCD; /* Unit*/
      SL0YW01.XOWCD[SL0YWIXM] = SLBREC.XOWCD; /* Owner*/
      SL0YW01.SL0YWCDT[SL0YWIXM] = SLBREC.ZZZCHGDT; /* Comp/cancel dt*/

    end
  end

  SL0YW01.SL0YWPGL = SL0YW01.SL0YWPGL + 1; /* Increment page line counter*/
  SL0YW00.SL0YWIXM = SL0YW00.SL0YWIXM + 1; /* Increment line index*/


end // end SL0Y117

// Close Selected Set Cursor
Function SL0Y118()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1510" ("C7", SQLCA, SL8REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "118"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VXTA0001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0Y118

// Close Selected Set Cursor
Function SL0Y119()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1530" ("C6", SQLCA, SLBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "119"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VXTA0001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0Y119

// Format and converse the map
Function SL0Y120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SL0YW00.SL0YWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SL0YW00.SL0YWSWF == "Y") /* Map must be formatted*/
      SL0Y121(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SL0YM001.XXXCURDT = SL0YW00.SL0YWCUD; /* Current date*/

  SL0YM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SL0YM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    if (SLWREC.SLWMSGNO != 0) /* Message to display*/
      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SL0YM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
    end
    SL0YM001.XXXLOCID = SLWREC.XXXLOCID; /* Module identification*/
    set SL0YM001 alarm; /* Indicate sound alarm*/
  end

  converse SL0YM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SL0YM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SL0YM001.CAITEM; /* Application data*/


end // end SL0Y120

// Format the display data
Function SL0Y121()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SL0YM001 initial; /* M001 input/output area*/

  SL0YW00.SL0YWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (SL0YW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (SL0YW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (SL0YW00.XXXTSPAG > SL0YW00.TA5TSQIX) /* Desired greater highest*/
        SL0YW00.XXXTSPAG = SL0YW00.TA5TSQIX; /* Default to highest*/
      end
      SL0YS01(); /* Obtain temporary storage page*/
    end

    set SL0YM001.XXXLITPG skip; /* "PAGE" literal*/
    SL0YM001.XXXTSPAG = SL0YW00.XXXTSPAG; /* Current page*/
    set SL0YM001.XXXLITOF skip; /* "OF" literal*/
    SL0YM001.TA5TSQIX = SL0YW00.TA5TSQIX; /* Highest page*/
    set SL0YM001.SL0YMSEL[1] cursor, bold; /* set cursor*/

  end

  SL0Y122();


end // end SL0Y121

// Format the display data
Function SL0Y122()
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  SL0YM001.XWHCD = SL0YW01.XWHCD; /* Warehouse code*/
  SL0YM001.XWHSABRV = SL0YW01.XWHSABRV; /* Warehouse abbrev*/
  SL0YM001.SL0YMFDT = SL0YW01.SL0YWFDT; /* From date*/
  SL0YM001.SL0YMTDT = SL0YW01.SL0YWTDT; /* To date*/
  SL0YM001.XGPCD = SL0YW01.XGPCD; /* GPC*/
  SL0YM001.SL0YMPON = SL0YW01.SL0YWPON; /* PO Nbr*/
  SL0YM001.SL0YMPOI = SL0YW01.SL0YWPOI; /* PO Id*/
  SL0YM001.PCFSECD = SL0YW01.PCFSECD;
  SL0YM001.SL0YMOMI = SL0YW01.SL0YWOMI; /* Omit type*/
  SL0YM001.SL0YMSCD = SL0YW01.SL0YWSCD; /* Status code*/
  SL0YM001.SL0YMTCD = SL0YW01.SL0YWTCD; /* Type code*/

  SL0YW00.SL0YWIXM = 1; /* Initialize line index*/

  while (SL0YW00.SL0YWIXM <= 15) /* Until screen is full*/

    SL0YM001.SL0YMSEL[SL0YWIXM] = SL0YW01.SL0YMSEL[SL0YWIXM];
    if (SL0YW01.YWSCD[SL0YWIXM] == " ")
      set SL0YM001.SL0YMSEL[SL0YWIXM] initialAttributes; /* defined*/
    else
      set SL0YM001.SL0YMSEL[SL0YWIXM] normal; /* unprotect*/
    end
    SL0YM001.YWSCD[SL0YWIXM] = SL0YW01.YWSCD[SL0YWIXM];
    SL0YM001.YWTCD[SL0YWIXM] = SL0YW01.YWTCD[SL0YWIXM];
    SL0YM001.SL8WONBR[SL0YWIXM] = SL0YW01.SL8WONBR[SL0YWIXM];
    SL0YM001.SL2PALET[SL0YWIXM] = SL0YW01.SL2PALET[SL0YWIXM];
    SL0YM001.SL2CASE[SL0YWIXM] = SL0YW01.SL2CASE[SL0YWIXM];
    SL0YM001.SL8WOGRP[SL0YWIXM] = SL0YW01.SL8WOGRP[SL0YWIXM];
    SL0YM001.SL8FRAR[SL0YWIXM] = SL0YW01.SL8FRAR[SL0YWIXM];
    SL0YM001.SL8FRZN[SL0YWIXM] = SL0YW01.SL8FRZN[SL0YWIXM];
    SL0YM001.SL8FRLC[SL0YWIXM] = SL0YW01.SL8FRLC[SL0YWIXM];
    SL0YM001.SL8TOAR[SL0YWIXM] = SL0YW01.SL8TOAR[SL0YWIXM];
    SL0YM001.SL8TOZN[SL0YWIXM] = SL0YW01.SL8TOZN[SL0YWIXM];
    SL0YM001.SL8TOLC[SL0YWIXM] = SL0YW01.SL8TOLC[SL0YWIXM];
    SL0YM001.ZZZSDT[SL0YWIXM] = SL0YW01.SL0YWRDT[SL0YWIXM];

    SL0YW00.SL0YWIXM = SL0YW00.SL0YWIXM + 1; /* Increment line index*/

  end


end // end SL0Y122

// Check attention identifier
Function SL0Y130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    if (SL0YW00.SL0YWSWR == "Y") /* Request for data*/
      set SL0YW01 empty; /* M001 display storage*/
    end
    SL0YW00.SL0YWSWF = "Y"; /* Format the map switch*/
    SL0YW00.SL0YWSWR = "N"; /* Request for data switch*/
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SL0YM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      SL0Y111(); /* Purge temporary storage*/
      XSSL001(); /* Exit to another application*/
      set SL0YM001.CATOAP cursor, bold; /* Highlight*/
    else
      SLWREC.XXXLOCID = "130"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key may not be used*/
    end
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf4  /* or PF4 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14 was pressed*/
   || converseVar.eventKey is pf15 /* or PF15 was pressed*/
   || converseVar.eventKey is pf16) /* or PF16 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SL0YM001"; /* Application find code*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SW0R"; /* TO application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "SL0F"; /* TO application*/
      COMMAREA.CAITEM = "M001"; /* TO application*/
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "SL0F"; /* TO application*/
      COMMAREA.CAITEM = "M002"; /* TO application*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "SL0F"; /* TO application*/
      COMMAREA.CAITEM = "M003"; /* TO application*/
    end

    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "SL0F"; /* TO application*/
      COMMAREA.CAITEM = "M004"; /* TO application*/
    end

    SL0Y111(); /* Purge temporary storage*/

    XSSL001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/
    SLWREC.XXXLOCID = "130"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Exit to display map*/
  end


end // end SL0Y130

// Reset highlighted fields
Function SL0Y140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SL0YM001.XWHCD initialAttributes;
  set SL0YM001.SL0YMFDT initialAttributes;
  set SL0YM001.SL0YMTDT initialAttributes;
  set SL0YM001.SL0YMSCD initialAttributes;
  set SL0YM001.XGPCD initialAttributes;
  set SL0YM001.SL0YMPON initialAttributes;
  set SL0YM001.SL0YMPOI initialAttributes;
  set SL0YM001.SL0YMTCD initialAttributes;
  set SL0YM001.SL0YMOMI initialAttributes;
  set SL0YM001.CATOAP initialAttributes;
  set SL0YM001.CAITEM initialAttributes;

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SL0YM001.XWHCD == "?") /* WAREHOUSE CODE*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      SLWREC.XXXLOCID = "400"; /* Module identification*/
      converseLib.validationFailed(18);
                                   /* Indicate PF key not valid press enter*/
      exit stack; /* Exit to display map*/

    end

    /* ------------------------------------------------------------*/
     /* If requested, display the list of whse codes*/
    /* ------------------------------------------------------------*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "             WAREHOUSE CODES"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SL0YW00.SL0YWSWF = "Y"; /* reformat screen*/

    else

      SL0YM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Save code*/
      SL0YM001.XWHSABRV = XWHTBL.XWHSABRV[XX0XWPIX]; /* Save abrv*/
      SL0YW00.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX]; /* Save abrv*/
      SLWREC.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* store code*/
      SL0YW00.SL0YWSWF = "Y"; /* request for screen format*/
      SL0YW00.SL0YWSWR = "Y"; /* request for new data*/

    end

    converseLib.clearScreen();
     /* Clear screen before displa*/
    SLWREC.XXXLOCID = "400"; /* Module identification*/
    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* See if '?' was entered in gpc display field.*/
   /* ------------------------------------------------------------*/

  if (SL0YM001.XGPCD == "?") /* gpc code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      SLWREC.XXXLOCID = "400"; /* Module identification*/
      converseLib.validationFailed(18);
                                   /* Indicate PF key not valid press enter*/
      exit stack; /* Exit to display map*/

    end
    /* -------------------------------------------------------*/
     /* Provide pop-up window to show valid gpc codes.*/
    /* -------------------------------------------------------*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "       GENERAL PRODUCT CLASS"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXGP01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SL0YW00.SL0YWSWF = "Y"; /* reformat screen*/

    else

      SL0YM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* Save code*/
      SLWREC.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* store code*/
      SL0YW00.SL0YWSWF = "Y"; /* request for screen format*/
      SL0YW00.SL0YWSWR = "Y"; /* request for new data*/

    end

    converseLib.clearScreen();
     /* Clear screen before displa*/
    SLWREC.XXXLOCID = "400"; /* Module identification*/
    exit stack; /* Exit to display map*/

  end


end // end SL0Y140

// Verify data that was entered
Function SL0Y150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (SL0YM001.CAITEM > " ") /* Application data was entered*/
    SLWREC.XXXLOCID = "150"; /* Module identification*/
    set SL0YM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(18); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* Scroll forward request*/
    SL0Y151(); /* Verify scroll request*/
  else

    /* ------------------------------------------------------------*/
     /* Return to top of program if key fields not entered.*/
    /* ------------------------------------------------------------*/

    if (SL0YM001.SL0YMTCD == " ") /* type code*/
      SL0YM001.SL0YMTCD = "A"; /* default to 'A'*/
    end

    if (SL0YM001.SL0YMPON == 0 /* po nbr*/
     && SL0YM001.SL0YMPOI == 0) /* po id*/
      set SL0YM001.SL0YMPON cursor, bold; /* bright*/
      set SL0YM001.SL0YMPOI bold; /* bright*/
      set SL0YM001.PCFSECD bold; /* bright*/
      converseLib.validationFailed(192); /* required field*/
    else
      if (SL0YM001.SL0YMPON > 0 /* po nbr*/
       && SL0YM001.SL0YMPOI > 0) /* po id*/
        set SL0YM001.SL0YMPON cursor, bold; /* bright*/
        set SL0YM001.SL0YMPOI bold; /* bright*/
        set SL0YM001.PCFSECD bold; /* bright*/
        converseLib.validationFailed(192); /* required field*/
        SLWREC.XXXLOCID = "150"; /* Module identification*/
      end
    end

    if (SL0YM001.SL0YMPOI > 0 /* po id*/
     && SL0YM001.PCFSECD == " ")
      set SL0YM001.PCFSECD cursor, bold; /* bright*/
      converseLib.validationFailed(192); /* required field*/
    end

    if (SL0YM001.SL0YMPON > 0 /* po nbr*/
     && SL0YM001.PCFSECD > " ")
      set SL0YM001.SL0YMPON cursor, bold; /* bright*/
      set SL0YM001.SL0YMPOI bold; /* bright*/
      set SL0YM001.PCFSECD bold; /* bright*/
      converseLib.validationFailed(192); /* required field*/
    end

    if (SL0YM001.XGPCD == " ") /* gpc*/
      set SL0YM001.XGPCD cursor, bold; /* bright*/
      converseLib.validationFailed(9); /* required field*/
      SLWREC.XXXLOCID = "150"; /* Module identification*/
    end

    if (SL0YM001.SL0YMSCD == " ") /* status code*/
      SL0YM001.SL0YMSCD = "A"; /* default to 'A'*/
    end

    if (SL0YM001.SL0YMTDT == " ") /* to date*/
      set SL0YM001.SL0YMTDT cursor, bold; /* bright*/
      converseLib.validationFailed(21); /* invalid date*/
      SLWREC.XXXLOCID = "150"; /* Module identification*/
    end

    if (SL0YM001.SL0YMFDT == " ") /* to date*/
      set SL0YM001.SL0YMFDT cursor, bold; /* bright*/
      converseLib.validationFailed(21); /* invalid date*/
      SLWREC.XXXLOCID = "150"; /* Module identification*/
    end

    if (SL0YM001.XWHCD == " ") /* warehouse code*/
      set SL0YM001.XWHCD cursor, bold; /* bright*/
      converseLib.validationFailed(9); /* required firld*/
      SLWREC.XXXLOCID = "150"; /* Module identification*/
    end

    if (converseVar.validationMsgNum != 0)
      exit stack;
    end

  end

   /* ------------------------------------------------------------*/
   /* If page was formatted, verify data in the line.*/
   /* ------------------------------------------------------------*/

  if (SL0YW00.TA5TSQIX > 0) /* Page was formatted*/
    SL0YW00.SL0YWIXM = 15; /* Initialize line index*/
    while (SL0YW00.SL0YWIXM > 0) /* Until end of lines*/
      SL0Y152(); /* Verify data in the line*/
      SL0YW00.SL0YWIXM = SL0YW00.SL0YWIXM - 1; /* Decrement line number*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end SL0Y150

// Verify scroll request
Function SL0Y151()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && SL0YW00.XXXTSPAG < 2)       /* and no previous pages*/
    SLWREC.XXXLOCID = "151"; /* Module identification*/
    converseLib.validationFailed(7); /* No previous page to display*/
  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && SL0YW00.XXXTSPAG >= SL0YW00.TA5TSQIX) /* and no more pages*/
    SLWREC.XXXLOCID = "151"; /* Module identification*/
    converseLib.validationFailed(8); /* No more pages to display*/
  end

end // end SL0Y151

// Verify data in the line
Function SL0Y152()
   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "S", indicate that*/
   /* only "S" may be entered to select a line.*/
   /* ------------------------------------------------------------*/

  if (SL0YM001.SL0YMSEL[SL0YWIXM] != SL0YW01.SL0YMSEL[SL0YWIXM]
   && SL0YM001.SL0YMSEL[SL0YWIXM] != "S") /* and is not a "S"*/

    SLWREC.XXXLOCID = "152"; /* Module identification*/
    set SL0YM001.SL0YMSEL[SL0YWIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(228); /* Only "S" may be entered*/

  end


end // end SL0Y152

// Process valid input request
Function SL0Y160()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  SL0YW00.SL0YWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA.*/
   /* ------------------------------------------------------------*/

  COMMAREA.XWHCD = SL0YM001.XWHCD; /* Warehouse code*/

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/

  if (SL0YM001.XWHCD != SL0YW01.XWHCD       /* Warehouse code*/
   || SL0YM001.XGPCD != SL0YW01.XGPCD       /* GPC*/
   || SL0YM001.SL0YMPON != SL0YW01.SL0YWPON /* PO Nbr*/
   || SL0YM001.SL0YMPOI != SL0YW01.SL0YWPOI /* PO Id*/
   || SL0YM001.PCFSECD != SL0YW01.PCFSECD) 

    /* ------------------------------------------------------------*/
     /* If a search key was entered, request the data to display.*/
     /* Otherwise, purge any existing pages from temporary storage.*/
    /* ------------------------------------------------------------*/

    SL0YW00.SL0YWSWR = "Y"; /* Request for data switch*/

    SL0Y111(); /* Purge any temporary storage*/

    exit stack;

  else

    SL0YW00.SL0YWSWR = "N"; /* Request for data switch*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    SL0YW00.XXXTSPAG = SL0YW00.XXXTSPAG - 1; /* Decrement page number*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    SL0YW00.XXXTSPAG = SL0YW00.XXXTSPAG + 1; /* Increment page number*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If a line was selected, save the key fields and indicate*/
   /* that map 002 is to be displayed.*/
   /* ------------------------------------------------------------*/

  if ("S" in SL0YM001.SL0YMSEL) /* Line was selected*/
    SL0YW00.SL0YWSWD = "2"; /* Map to be displayed switch*/
    SL0YW00.SL0YWSWR = "Y"; /* Request for data switch*/
    SL0YW00.SL0YWIXM = sysVar.arrayIndex; /* Map line index*/
    SL0YM001.SL0YMSEL[SL0YWIXM] = " "; /* selection indicator*/
  end


end // end SL0Y160

// Main process to display a map
Function SL0Y200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SL0Y210(); /* Obtain the data to display*/

  SL0Y220(); /* Format and converse the map*/

  SL0Y230(); /* Check attention identifier*/

  SL0Y240(); /* Reset highlighted fields*/

  SL0Y250(); /* Verify entered data*/

end // end SL0Y200

// Obtain the data to display
Function SL0Y210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SL0YW00.SL0YWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length*/
   /* and purge temporary storage.*/
   /* ------------------------------------------------------------*/

  SL0YW00.XXXTSLEN = 578; /* Temporary storage page length*/
  SL0YS06(); /* Purge temp storage*/

   /* ------------------------------------------------------------*/
   /* Set flags.*/
   /* ------------------------------------------------------------*/

  SL0YW00.SL0YWSL8 = " "; /* init current/historical flag*/
  SL0YW00.SL0YWDPG = "N"; /* display page flag*/

   /* ------------------------------------------------------------*/
   /* Select the current info to display in the map heading.*/
   /* ------------------------------------------------------------*/

  SL0Y212(); /* Select heading info from current*/
  if (SL0YW00.SL0YWSL8 == "Y") /* If current*/
    SL0Y214();
  end
  SL0Y218(); /* Close current cursor*/

   /* ------------------------------------------------------------*/
   /* Select the historical info to display in the map heading.*/
   /* ------------------------------------------------------------*/

  SL0Y213(); /* Select heading info from historical*/
  if (SL0YW00.SL0YWSL8 == "N") /* If current*/
    SL0Y214();
  end
  SL0Y219(); /* Close historical cursor*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SL0YW00.SL0YWSWR = "N"; /* Request for data switch*/
  SL0YW01.SL0YMSEL[SL0YWIXM] = "V"; /* Request for data switch*/


end // end SL0Y210

// Select the heading information
Function SL0Y212()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set SL9REC empty; /* Clear row storage area*/

  SL9REC.XWHCD = SL0YW01.XWHCD; /* Warehouse code*/
  SL9REC.SL8WONBR = SL0YW01.SL8WONBR[SL0YWIXM]; /* WO Nbr*/

  try
    call "IO1520" ("S1", SQLCA, SL9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      SL0YW00.SL0YWSL8 = "N"; /* Not current*/
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* Successful*/
        SL0YW00.SL0YWSL8 = "Y"; /* Current*/
      else
        SLWREC.XXXLOCID = "212"; /* module identification*/
        TA1REC.TA1TBLKE = SL9REC.SL9KEY; /* table key*/
        TA1REC.TA1LOC = "SELECT SET WORK ORDER HEADER "; /* LOC*/
        SL0YS08(); /* common error routine*/
      end
    end
  else
    SLWREC.XXXLOCID = "212"; /* module identification*/
    TA1REC.TA1TBLKE = SL9REC.SL9KEY; /* table key*/
    TA1REC.TA1LOC = "SELECT SET WORK ORDER HEADER "; /* LOC*/
    SL0YS08(); /* common error routine*/
  end


end // end SL0Y212

// Select the heading information
Function SL0Y213()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set SLCREC empty; /* Clear row storage area*/

  SLCREC.XWHCD = SL0YW01.XWHCD; /* Warehouse code*/
  SLCREC.SL8WONBR = SL0YW01.SL8WONBR[SL0YWIXM]; /* WO Nbr*/

  try
    call "IO1540" ("S1", SQLCA, SLCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      SL0YW00.SL0YWSL8 = " "; /* Not historical*/
      converseLib.validationFailed(12); /* record not on database*/
      SLWREC.XXXLOCID = "213"; /* module identification*/
      set SL0YM002.SL0YMPON cursor, bold; /* highlight*/
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* Successful*/
        SL0YW00.SL0YWSL8 = "N"; /* Historical*/
      else
        SLWREC.XXXLOCID = "213"; /* module identification*/
        TA1REC.TA1TBLKE = SLCREC.SLCKEY; /* table key*/
        TA1REC.TA1LOC = "SELECT SET WORK ORDER HEADER "; /* LOC*/
        SL0YS08(); /* common error routine*/
      end
    end
  else
    SLWREC.XXXLOCID = "213"; /* module identification*/
    TA1REC.TA1TBLKE = SLCREC.SLCKEY; /* table key*/
    TA1REC.TA1LOC = "SELECT SET WORK ORDER HEADER "; /* LOC*/
    SL0YS08(); /* common error routine*/
  end


end // end SL0Y213

// Obtain the data to display
Function SL0Y214()
   /* ------------------------------------------------------------*/
   /* Set index to one*/
   /* ------------------------------------------------------------*/

  SL0YW00.SL0YWIX2 = 1; /* Display line index*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  SL0YW00.SL0YWSWC = "N"; /* End of cursor switch*/

  while (SL0YW00.SL0YWSWC == "N") /* Until end of cursor*/

    /* ------------------------------------------------------------*/
     /* If current call SL9REC else is old call SLCREC.*/
    /* ------------------------------------------------------------*/

    if (SL0YW00.SL0YWSL8 == "Y") /* Current*/
      SL0Y215(); /* Fetch next*/
    end

    if (SL0YW00.SL0YWSL8 == "N") /* Old*/
      SL0Y216(); /* Fetch next*/
    end

    /* ------------------------------------------------------------*/
     /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/

    if (SL0YW00.SL0YWSWC == "N") /* Not end of cursor*/
      SL0Y217(); /* Save data in display storage*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (SL0YW00.SL0YWDPG == "N" /* No pages formatted*/
   && SL0YW00.SL0YWSL8 == "N") /* Old*/
    set SL0YM002 initial; /* Clear map 002*/
    SLWREC.XXXLOCID = "214"; /* Module identification*/
    converseLib.validationFailed(12); /* No data was found to display*/
    return; /* Return to previous process*/
  end


end // end SL0Y214

// Fetch next row in the cursor
Function SL0Y215()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1520" ("N1", SQLCA, SL9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      SL0YW00.SL0YWSWC = "Y"; /* Indicate end of cursor*/
    else
      if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return*/
        SLWREC.XXXLOCID = "215"; /* module identification*/
        TA1REC.TA1TBLKE = SL9REC.SL9KEY; /* table key*/
        TA1REC.TA1LOC = "SELECT NEXT WORK ORDER HEADER   "; /* LOC*/
        SL0YS08(); /* common error routine*/
      end
    end
  else
    SLWREC.XXXLOCID = "215"; /* module identification*/
    TA1REC.TA1TBLKE = SL9REC.SL9KEY; /* table key*/
    TA1REC.TA1LOC = "SELECT NEXT WORK ORDER HEADER   "; /* LOC*/
    SL0YS08(); /* common error routine*/
  end


end // end SL0Y215

// Fetch next row in the cursor
Function SL0Y216()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1540" ("N1", SQLCA, SLCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      SL0YW00.SL0YWSWC = "Y"; /* Indicate end of cursor*/
    else
      if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return*/
        SLWREC.XXXLOCID = "216"; /* module identification*/
        TA1REC.TA1TBLKE = SLCREC.SLCKEY; /* table key*/
        TA1REC.TA1LOC = "SELECT NEXT WORK ORDER HEADER   "; /* LOC*/
        SL0YS08(); /* common error routine*/
      end
    end
  else
    SLWREC.XXXLOCID = "216"; /* module identification*/
    TA1REC.TA1TBLKE = SLCREC.SLCKEY; /* table key*/
    TA1REC.TA1LOC = "SELECT NEXT WORK ORDER HEADER   "; /* LOC*/
    SL0YS08(); /* common error routine*/
  end


end // end SL0Y216

// Save data in display storage
Function SL0Y217()
   /* ------------------------------------------------------------*/
   /* Save heading information*/
   /* ------------------------------------------------------------*/

  if (SL0YW00.SL0YWIX2 == 1) /* Save on first index*/
    SL0YW00.SL0YWDPG = "Y"; /* display page switch*/
    SL0YW02.XWHCD = SL0YW01.XWHCD; /* Warehouse cd*/
    SL0YW02.SL0YWPON = SL0YW01.SL0YWPON; /* PO Nbr*/
    SL0YW02.SL0YWPOI = SL0YW01.SL0YWPOI; /* PO Id*/
    SL0YW02.PCFSECD = SL0YW01.PCFSECD;

    SL0YW02.SL8WOGRP = SL0YW01.SL8WOGRP[SL0YWIXM];
    SL0YW02.SL8WONBR = SL0YW01.SL8WONBR[SL0YWIXM];
    SL0YW02.YWSCD = SL0YW01.YWSCD[SL0YWIXM];
    SL0YW02.YWTCD = SL0YW01.YWTCD[SL0YWIXM];
    SL0YW02.SL2PALET = SL0YW01.SL2PALET[SL0YWIXM];
    SL0YW02.SL2CASE = SL0YW01.SL2CASE[SL0YWIXM];
    SL0YW02.SL8FRAR = SL0YW01.SL8FRAR[SL0YWIXM];
    SL0YW02.SL8FRZN = SL0YW01.SL8FRZN[SL0YWIXM];
    SL0YW02.SL8FRLC = SL0YW01.SL8FRLC[SL0YWIXM];
    SL0YW02.SL8TOAR = SL0YW01.SL8TOAR[SL0YWIXM];
    SL0YW02.SL8TOZN = SL0YW01.SL8TOZN[SL0YWIXM];
    SL0YW02.SL8TOLC = SL0YW01.SL8TOLC[SL0YWIXM];
    SL0YW02.SL0YWRDT = SL0YW01.SL0YWRDT[SL0YWIXM];
    if (SL0YW01.YWSCD == "01")
      SL0YW02.SL0YWCDT = 0;
    else
      SL0YW02.SL0YWCDT = SL0YW01.SL0YWCDT[SL0YWIXM];
    end
    SL0YW02.SWEPLLNB = SL0YW01.SWEPLLNB[SL0YWIXM]; /* Plan nbr*/
    SL0YW02.SL8WOPY = SL0YW01.SL8WOPY[SL0YWIXM]; /* Priority*/
    SL0YW02.SL8CRTBY = SL0YW01.SL8CRTBY[SL0YWIXM]; /* Created by*/
    SL0YW02.XGPCD = SL0YW01.XGPCD[SL0YWIXM]; /* Gen prod class*/
    SL0YW02.SY1STNBR = SL0YW01.SY1STNBR[SL0YWIXM]; /* Style*/
    SL0YW02.SY2CLRID = SL0YW01.SY2CLRID[SL0YWIXM]; /* Color*/
    SL0YW02.XDMCD = SL0YW01.XDMCD[SL0YWIXM]; /* Dimension*/
    SL0YW02.XQACD = SL0YW01.XQACD[SL0YWIXM]; /* Quality*/
    SL0YW02.PC2INSEG = SL0YW01.PC2INSEG[SL0YWIXM]; /* ISEG*/
    SL0YW02.XEGCD = SL0YW01.XEGCD[SL0YWIXM]; /* EDF*/
    SL0YW02.XSLCD = SL0YW01.XSLCD[SL0YWIXM]; /* slc*/
    SL0YW02.XPGCD = SL0YW01.XPGCD[SL0YWIXM]; /* Package*/
    SL0YW02.XUMCD = SL0YW01.XUMCD[SL0YWIXM]; /* Unit*/
    SL0YW02.XOWCD = SL0YW01.XOWCD[SL0YWIXM]; /* Owner*/
  end

   /* ------------------------------------------------------------*/
   /* If not in current process old.*/
   /* ------------------------------------------------------------*/

  if (SL0YW00.SL0YWSL8 == "Y") /* If current*/

    SL0YW02.SY5SZID[SL0YWIX2] = SL9REC.SY5SZID; /* size*/
    SL0YW02.SL9WOQTY[SL0YWIX2] = SL9REC.SL9WOQTY; /* quantity*/

  else
    if (SL0YW00.SL0YWSL8 == "N") /* If current*/

      SL0YW02.SY5SZID[SL0YWIX2] = SLCREC.SY5SZID; /* size*/
      SL0YW02.SL9WOQTY[SL0YWIX2] = SLCREC.SL9WOQTY; /* quantity*/

    end
  end

  SL0YS10(); /* convert size to external*/
  SL0YW02.SY4IDDSC[SL0YWIX2] = SYPREC.SY4IDDSC[1]; /* size*/

  SL0YW00.SL0YWIX2 = SL0YW00.SL0YWIX2 + 1; /* Increment line index*/


end // end SL0Y217

// Close Selected Set Cursor
Function SL0Y218()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1520" ("C1", SQLCA, SL9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "218"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VXTA0001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0Y218

// Close Selected Set Cursor
Function SL0Y219()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1540" ("C1", SQLCA, SLCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "219"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VXTA0001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0Y219

// Format and converse the map
Function SL0Y220()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SL0YW00.SL0YWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SL0YW00.SL0YWSWF == "Y") /* Map must be formatted*/
      SL0Y221(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SL0YM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SL0YM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    if (SLWREC.SLWMSGNO != 0) /* Message to display*/
      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SL0YM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
    end
    SL0YM002.XXXLOCID = SLWREC.XXXLOCID; /* Module identification*/
    set SL0YM002 alarm; /* Indicate sound alarm*/
  end

  converse SL0YM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SL0YM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SL0YM002.CAITEM; /* Application data*/


end // end SL0Y220

// Format the display data
Function SL0Y221()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SL0YM002 initial; /* M002 input/output area*/

  SL0YW00.SL0YWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Move desired data to temporary storage.*/
   /* ------------------------------------------------------------*/

  SL0YM002.XWHCD = SL0YW02.XWHCD; /* Warehouse code*/
  SL0YM002.XWHABRV = SL0YW00.XWHABRV; /* Warehouse abbrev*/
  SL0YM002.SL8WONBR = SL0YW02.SL8WONBR; /* WO nbr*/
  SL0YM002.XXXCURDT = SL0YW00.SL0YWCUD; /* Current date*/
  SL0YM002.SL0YMPOI = SL0YW02.SL0YWPOI; /* PO Id*/
  SL0YM002.PCFSECD = SL0YW02.PCFSECD;
  SL0YM002.SL0YMPON = SL0YW02.SL0YWPON; /* PO Nbr*/

  SL0YM002.SWEPLLNB = SL0YW02.SWEPLLNB; /* Plan nbr*/
  SL0YM002.SL8WOGRP = SL0YW02.SL8WOGRP; /* WO group*/
  SL0YM002.YWSCD = SL0YW02.YWSCD; /* Status*/
  SL0YM002.YWTCD = SL0YW02.YWTCD; /* type*/
  SL0YM002.SL2PALET = SL0YW02.SL2PALET; /* palet*/
  SL0YM002.SL2CASE = SL0YW02.SL2CASE; /* case*/
  SL0YM002.SL8FRAR = SL0YW02.SL8FRAR; /* from area*/
  SL0YM002.SL8FRZN = SL0YW02.SL8FRZN; /* from zone*/
  SL0YM002.SL8FRLC = SL0YW02.SL8FRLC; /* from location*/
  SL0YM002.SL8TOAR = SL0YW02.SL8TOAR; /* to area*/
  SL0YM002.SL8TOZN = SL0YW02.SL8TOZN; /* to zone*/
  SL0YM002.SL8TOLC = SL0YW02.SL8TOLC; /* tolocation*/
  SL0YM002.ZZZSDT = SL0YW02.SL0YWRDT; /* create date*/
  SL0YM002.ZZZCHGDT = SL0YW02.SL0YWCDT; /* create date*/
  SL0YM002.SL8WOPY = SL0YW02.SL8WOPY; /* priority*/
  SL0YM002.SL8CRTBY = SL0YW02.SL8CRTBY; /* creator*/
  SL0YM002.XGPCD = SL0YW02.XGPCD; /* general product class*/
  SL0YM002.SY1STNBR = SL0YW02.SY1STNBR; /* style*/
  SL0YM002.SY2CLRID = SL0YW02.SY2CLRID; /* color*/
  SL0YM002.XDMCD = SL0YW02.XDMCD; /* dimension*/
  SL0YM002.XQACD = SL0YW02.XQACD; /* quality*/
  SL0YM002.PC2INSEG = SL0YW02.PC2INSEG;
  SL0YM002.XEGCD = SL0YW02.XEGCD;
  SL0YM002.XSLCD = SL0YW02.XSLCD; /* class*/
  SL0YM002.XPGCD = SL0YW02.XPGCD; /* package*/
  SL0YM002.XUMCD = SL0YW02.XUMCD; /* unit*/
  SL0YM002.XOWCD = SL0YW02.XOWCD; /* owner*/

  SL0YW00.SL0YWIX2 = 1; /* Initialize line index*/

  while (SL0YW00.SL0YWIX2 <= 40) /* Until screen is full*/

    SL0YM002.SY4IDDSC[SL0YWIX2] = SL0YW02.SY4IDDSC[SL0YWIX2];
    SL0YM002.SL9WOQTY[SL0YWIX2] = SL0YW02.SL9WOQTY[SL0YWIX2];

    SL0YW00.SL0YWIX2 = SL0YW00.SL0YWIX2 + 1; /* Increment line index*/

  end


end // end SL0Y221

// Check attention identifier
Function SL0Y230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    if (SL0YW00.SL0YWSWR == "Y") /* Request for data*/
      set SL0YW01 empty; /* M001 display storage*/
    end
    SL0YW00.SL0YWSWF = "Y"; /* Format the map switch*/
    SL0YW00.SL0YWSWR = "N"; /* Request for data switch*/
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SL0YM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      SL0YS06(); /* Purge temporary storage*/
      XSSL001(); /* Exit to another application*/
      set SL0YM002.CATOAP cursor, bold; /* Highlight*/
    else
      SLWREC.XXXLOCID = "230"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
    end
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf4  /* or PF4 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf6  /* or PF6 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14 was pressed*/
   || converseVar.eventKey is pf15 /* or PF15 was pressed*/
   || converseVar.eventKey is pf16) /* or PF16 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SL0YM002"; /* Application find code*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      set SL0YM002 initial; /* Clear map 002*/
      SL0YW00.SL0YWSWD = "1"; /* Set map switch to 001*/
      SL0YW00.SL0YWSWF = "Y"; /* Format map*/
      exit stack;
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf6) /* PF6 was pressed*/
      COMMAREA.CATOAP = "SW0R"; /* TO application*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "SL0F"; /* TO application*/
      COMMAREA.CAITEM = "M001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "SL0F"; /* TO application*/
      COMMAREA.CAITEM = "M002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "SL0F"; /* TO application*/
      COMMAREA.CAITEM = "M003"; /* Application find code*/
    end

    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "SL0F"; /* TO application*/
      COMMAREA.CAITEM = "M004"; /* Application find code*/
    end

    SL0YS06(); /* Purge temporary storage*/

    XSSL001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf3   /* and PF3 was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf15  /* and PF15 was not pressed*/
   && converseVar.eventKey not pf16) /* and PF16 was not pressed*/
    SLWREC.XXXLOCID = "230"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Exit to display map*/
  end


end // end SL0Y230

// Reset highlighted fields
Function SL0Y240()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SL0YM002.XWHCD initialAttributes; /* Warehouse code*/

  SL0YW00.SL0YWIX2 = 1; /* Initialize line index*/

  while (SL0YW00.SL0YWIX2 <= 40 /* Until end of lines*/
   && SL0YM002.SY4IDDSC[SL0YWIX2] > " ") /* or end of display*/

    set SL0YM002.SY4IDDSC[SL0YWIX2] normal; /* Reset size*/
    set SL0YM002.SL9WOQTY[SL0YWIX2] normal; /* Reset quantity*/

    SL0YW00.SL0YWIX2 = SL0YW00.SL0YWIX2 + 1; /* Increment line index*/

  end

  set SL0YM002.CATOAP initialAttributes; /* TO application*/
  set SL0YM002.CAITEM initialAttributes; /* Application data*/


end // end SL0Y240

// Verify data that was entered
Function SL0Y250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (SL0YM002.CAITEM > " ") /* Application data was entered*/
    SLWREC.XXXLOCID = "250"; /* Module identification*/
    set SL0YM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(18); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    SL0Y251(); /* Verify scroll request*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end SL0Y250

// Verify scroll request
Function SL0Y251()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back request*/
    SL0YW00.SL0YWIXM = SL0YW00.SL0YWIXM - 1; /* decrement index*/
    if (SL0YW00.SL0YWIXM < 1) /* and no previous pages*/
      SL0YW00.SL0YWIXM = SL0YW00.SL0YWIXM + 1; /* decrement index*/
      SLWREC.XXXLOCID = "251"; /* Module identification*/
      converseLib.validationFailed(7); /* No previous page to display*/
    else
      SL0YW00.SL0YWSWR = "Y"; /* Data requested switch*/
      SL0YW00.SL0YWSWF = "Y"; /* Format the map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward request*/
    SL0YW00.SL0YWIXM = SL0YW00.SL0YWIXM + 1; /* increment index*/
    if (SL0YW00.SL0YWIXM > SL0YW01.SL0YWPGL) /* and no more records*/
      SL0YW00.SL0YWIXM = SL0YW00.SL0YWIXM - 1; /* decrement index*/
      SLWREC.XXXLOCID = "251"; /* Module identification*/
      converseLib.validationFailed(8); /* No more pages to display*/
    else
      SL0YW00.SL0YWSWR = "Y"; /* Data requested switch*/
      SL0YW00.SL0YWSWF = "Y"; /* Format the map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (SL0YM002.XWHCD != SL0YW02.XWHCD) /* Warehouse code*/
    SLWREC.XXXLOCID = "251"; /* Module identification*/
    set SL0YM002.XWHCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Field may not change*/
  end


end // end SL0Y251

// Read temporary storage page
Function SL0YS01()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  SL0YW01.XXXTSLEN = SL0YW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = SL0YW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SL0YW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S01"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0YS01

// Add temp. storage page Map 1
Function SL0YS03()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage (Map 001).*/
   /* ------------------------------------------------------------*/

  SL0YW01.XXXTSLEN = SL0YW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (SL0YW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set SL0YW01 empty; /* M001 display storage*/

    SL0YW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S03"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0YS03

// Edit and save key fields.
Function SL0YS05()
   /* ----------------------------------------------------------*/
   /* Edit input and move to working storage*/
   /* ----------------------------------------------------------*/

  SL0YW01.SL0YWOMI = SL0YM001.SL0YMOMI; /* Omit type*/

  if (SL0YM001.SL0YMTCD > " ") /* WO Type*/
    SL0YW01.SL0YWTCD = SL0YM001.SL0YMTCD;
  else
    SL0YW01.SL0YWTCD = "A";
  end

  if (SL0YM001.XGPCD == " ") /* gpc*/
    set SL0YM001.XGPCD cursor, bold; /* bright*/
    converseLib.validationFailed(9); /* required field*/
    SLWREC.XXXLOCID = "S05";
    set SL0YM001.XGPCD cursor, bold; /* bright*/
  else
    if (SL0YM001.XGPCD == "03"
     && SL0YM001.SL0YMPOI > 0)
      converseLib.validationFailed(329); /* po id not valid for gpc 03*/
      SLWREC.XXXLOCID = "S05";
      set SL0YM001.SL0YMPON cursor, bold; /* bright*/
    end
  end

  if (SL0YM001.SL0YMPON == 0 /* po nbr*/
   && SL0YM001.SL0YMPOI == 0) /* po id*/
    set SL0YM001.SL0YMPON cursor, bold; /* bright*/
    set SL0YM001.SL0YMPOI bold; /* bright*/
    set SL0YM001.PCFSECD bold; /* bright*/
    converseLib.validationFailed(192); /* required field*/
    SLWREC.XXXLOCID = "S05";
  else
    if (SL0YM001.SL0YMPON > 0 /* po nbr*/
     && SL0YM001.SL0YMPOI > 0) /* po id*/
      set SL0YM001.SL0YMPON cursor, bold; /* bright*/
      set SL0YM001.SL0YMPOI bold; /* bright*/
      set SL0YM001.PCFSECD bold; /* bright*/
      converseLib.validationFailed(192); /* required field*/
      SLWREC.XXXLOCID = "S05";
    end
  end

  if (SL0YM001.SL0YMPON == 0) /* po nbr*/
    if (SL0YM001.SL0YMPOI > 0 /* po id*/
     && SL0YM001.PCFSECD == " ") /* pcfsecd*/
      set SL0YM001.PCFSECD cursor, bold; /* bright*/
      converseLib.validationFailed(192); /* required field*/
    end
  end

  if (SL0YM001.SL0YMPON > 0 /* po nbr*/
   && SL0YM001.PCFSECD > " ") /* pcfsecd*/
    set SL0YM001.SL0YMPON cursor, bold; /* bright*/
    set SL0YM001.SL0YMPOI bold; /* bright*/
    set SL0YM001.PCFSECD bold; /* bright*/
    converseLib.validationFailed(192); /* required field*/
  end

  if (converseVar.validationMsgNum == 0)
    SL0YW01.SL0YWPOI = SL0YM001.SL0YMPOI; /* PO ID*/
    if (SL0YM001.XGPCD == "02" /* GPC*/
     && SL0YM001.SL0YMPON == 0)
      SWVREC.SWVWFNC = "T2"; /* function code*/
      SWVREC.XGPCD = SL0YM001.XGPCD; /* GPC*/
      SWVREC.PC3POIDT = SL0YW01.SL0YWPID; /* PO ID*/
      SWVREC.PCFSECD = SL0YW01.PCFSECD;
      SWVREC.FY1FCTYC = SL0YW01.FY1FCTYC; /* Factory code*/
      XSSLS10(); /* po id routine*/
      SL0YW01.SL0YWPON = SWVREC.SWVWPONB;
      SL0YW01.SL0YWPOI = SWVREC.SWVWPOID;
    else
      SL0YW01.SL0YWPON = SL0YM001.SL0YMPON; /* PO Nbr*/
      SL0YW01.SL0YWPOI = 0; /* PO Id*/
    end
  end

  SL0YW01.XGPCD = SL0YM001.XGPCD; /* gpc*/

  if (SL0YM001.SL0YMSCD > " ") /* Status*/
    SL0YW01.SL0YWSCD = SL0YM001.SL0YMSCD;
  else
    SL0YW01.SL0YWSCD = "A";
  end

  if (SL0YM001.SL0YMTDT > 0) /* to date entered*/
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "A";
    TA2REC.TA2GRGAN = SL0YM001.SL0YMTDT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    if (TA2REC.TA2RTNCD == 0)
      SL0YW00.SL0YWDTT = TA2REC.TA2GRGGN;
      SL0YW01.SL0YWTDT = TA2REC.TA2GRGAN;
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S05";
      converseLib.validationFailed(21); /* Invalid date entered*/
      set SL0YM001.SL0YMTDT cursor, bold; /* Highlight*/
    end
  end

  if (SL0YM001.SL0YMFDT > 0) /* from date entered*/
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "A";
    TA2REC.TA2GRGAN = SL0YM001.SL0YMFDT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    if (TA2REC.TA2RTNCD == 0)
      SL0YW00.SL0YWDTF = TA2REC.TA2GRGGN;
      SL0YW01.SL0YWFDT = TA2REC.TA2GRGAN;
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S05";
      converseLib.validationFailed(21); /* Invalid date entered*/
      set SL0YM001.SL0YMFDT cursor, bold; /* Highlight*/
    end
  end

  if (SL0YM001.XWHCD == " ") /* warehouse code*/
    set SL0YM001.XWHCD cursor, bold; /* bright*/
    converseLib.validationFailed(9); /* required field*/
    SLWREC.XXXLOCID = "S05";
  else
    if (SL0YM001.XWHCD in XWHTBL.XWHCD) /* code in table*/
      SL0YW01.XWHCD = SL0YM001.XWHCD; /* Warehouse code*/
      SL0YW01.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex]; /* Warehouse abbrev*/
      SL0YW00.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* Short warehouse abbr*/
      SL0YM001.XWHSABRV = SL0YW01.XWHSABRV; /* Warehouse abbrev*/
    else
      SLWREC.XXXLOCID = "S05"; /* module identification*/
      set SL0YM001.XWHCD cursor, bold; /* highlight*/
      converseLib.validationFailed(118); /* Invalid warehouse code*/
    end
  end


end // end SL0YS05

// Purge temporary storage Map 2
Function SL0YS06()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SL0YW02 empty; /* M001 display storage*/

  SL0YW00.SL0YWSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SL0YW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SL0YW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S06"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0YS06

// common call error routine
Function SL0YS08()
   /* ------------------------------------------------------------*/
   /* If error using called module*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* And resource not available*/
    SLWREC.SLWMSGNO = 31; /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    SLWREC.SLWMSGNO = 01; /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0YS08

// translate size subroutine
Function SL0YS10()
   /* ************************************************************/
   /* *** obtain external size                                ****/
   /* ************************************************************/

  set SYPREC empty;

  SYPREC.SYPFC = "PC"; /* all valid sizes*/
  SYPREC.SYPCMPSW = "C"; /* indicate compressed format*/

  SYPREC.XGPCD = SL0YW02.XGPCD;
  SYPREC.SY1STNBR = SL0YW02.SY1STNBR;
  SYPREC.SY2CLRID = SL0YW02.SY2CLRID;
  SYPREC.XDMCD = SL0YW02.XDMCD;
  SYPREC.XQACD = SL0YW02.XQACD;
  SYPREC.SY5SZID[1] = SL0YW02.SY5SZID[SL0YWIX2];


  TA1REC.TA1LOCAT[2] = "SL0YS10 ";
  TA1REC.TA1MAP = "SL0YM002";

  XSSYPI1(); /* <=== get size xlations*/

  if (SYPREC.SYPRC == 0
   || SYPREC.SYPRC == 02
   || SYPREC.SYPRC == 10)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S10";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    else
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "S10";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0YS10

//*** RECORD=SL0YW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record SL0YW00 type basicRecord
  10 SL0YWIX2 SL0YWIX2 ; 
  10 SL0YWIXM SL0YWIXM ; 
  10 SL0YWDPG SL0YWDPG ; 
  10 SL0YWSWC SL0YWSWC ; 
  10 SL0YWSWD SL0YWSWD ; 
  10 SL0YWSWF SL0YWSWF ; 
  10 SL0YWSWR SL0YWSWR ; 
  10 SL0YWSWU SL0YWSWU ; 
  10 SL0YWSL8 SL0YWSL8 ; 
  10 XWHCD XWHCD ; 
  10 XWHSABRV XWHSABRV ; 
  10 XWHABRV XWHABRV ; 
  10 SL0YWDTF SL0YWDTF ; 
  10 SL0YWDTT SL0YWDTT ; 
  10 SL0YWPOI SL0YWPOI ; 
  10 PCFSECD PCFSECD ; 
  10 SL0YWPON SL0YWPON ; 
  10 SL0YWOMI SL0YWOMI ; 
  10 SL0YWTCD SL0YWTCD ; 
  10 SL0YWPTP SL0YWPTP ; 
  10 SL8WOPY SL8WOPY [15] ; 
  10 SWEPLLNB SWEPLLNB [15] ; 
  10 SL8CRTBY SL8CRTBY [15] ; 
  10 XGPCD XGPCD [15] ; 
  10 SY1STNBR SY1STNBR [15] ; 
  10 SY2CLRID SY2CLRID [15] ; 
  10 XDMCD XDMCD [15] ; 
  10 XQACD XQACD [15] ; 
  10 PC2INSEG PC2INSEG [15] ; 
  10 XEGCD XEGCD [15] ; 
  10 XSLCD XSLCD [15] ; 
  10 XPGCD XPGCD [15] ; 
  10 XUMCD XUMCD [15] ; 
  10 XOWCD XOWCD [15] ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 SL0YWCUD SL0YWCUD ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 YWSCD YWSCD [15] ; 
  10 YWTCD YWTCD [15] ; 
  10 SL0YWSWT SL0YWSWT ; 
  10 SL8WONBR SL8WONBR [15] ; 
  10 SL2PALET SL2PALET [15] ; 
  10 SL2CASE SL2CASE [15] ; 
  10 SL8WOGRP SL8WOGRP [15] ; 
  10 SL8FRAR SL8FRAR [15] ; 
  10 SL8FRZN SL8FRZN [15] ; 
  10 SL8FRLC SL8FRLC [15] ; 
  10 SL8TOAR SL8TOAR [15] ; 
  10 SL8TOZN SL8TOZN [15] ; 
  10 SL8TOLC SL8TOLC [15] ; 
  10 SL0YWRDT SL0YWRDT [15] ; 
  10 SL0YWCDT SL0YWCDT [15] ; 
end // end SL0YW00

//*** RECORD=SL0YW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record SL0YW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(1624) ; 
    10 XWHCD XWHCD ; 
    10 XWHSABRV XWHSABRV ; 
    10 SL0YWFDT SL0YWFDT ; 
    10 SL0YWTDT SL0YWTDT ; 
    10 SL0YWSCD SL0YWSCD ; 
    10 SL0YWPON SL0YWPON ; 
    10 SL0YWPOI SL0YWPOI ; 
      15 SL0YWPID SL0YWPID ; 
      15 FY1FCTYC FY1FCTYC ; 
    10 PCFSECD PCFSECD ; 
    10 SL0YWTCD SL0YWTCD ; 
    10 SL0YWOMI SL0YWOMI ; 
    10 SL0YMSEL SL0YMSEL [15] ; 
    10 YWSCD YWSCD [15] ; 
    10 YWTCD YWTCD [15] ; 
    10 SL8WONBR SL8WONBR [15] ; 
    10 SL2PALET SL2PALET [15] ; 
    10 SL2CASE SL2CASE [15] ; 
    10 SL8WOGRP SL8WOGRP [15] ; 
    10 SL8FRAR SL8FRAR [15] ; 
    10 SL8FRZN SL8FRZN [15] ; 
    10 SL8FRLC SL8FRLC [15] ; 
    10 SL8TOAR SL8TOAR [15] ; 
    10 SL8TOZN SL8TOZN [15] ; 
    10 SL8TOLC SL8TOLC [15] ; 
    10 SL0YWRDT SL0YWRDT [15] ; 
    10 SL0YWCDT SL0YWCDT [15] ; 
    10 SWEPLLNB SWEPLLNB [15] ; 
    10 SL8WOPY SL8WOPY [15] ; 
    10 SL8CRTBY SL8CRTBY [15] ; 
    10 XGPCD XGPCD [15] ; 
    10 SY1STNBR SY1STNBR [15] ; 
    10 SY2CLRID SY2CLRID [15] ; 
    10 XDMCD XDMCD [15] ; 
    10 XQACD XQACD [15] ; 
    10 PC2INSEG PC2INSEG [15] ; 
    10 XEGCD XEGCD [15] ; 
    10 XSLCD XSLCD [15] ; 
    10 XPGCD XPGCD [15] ; 
    10 XUMCD XUMCD [15] ; 
    10 XOWCD XOWCD [15] ; 
    10 SL0YWPGL SL0YWPGL ; 
end // end SL0YW01

//*** RECORD=SL0YW02 ****
// ------------------------
// Map 002 display storage.
// ------------------------
// ***********************
Record SL0YW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(578) ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 SL0YWPON SL0YWPON ; 
    10 SL0YWPOI SL0YWPOI ; 
    10 PCFSECD PCFSECD ; 
    10 SWEPLLNB SWEPLLNB ; 
    10 SL8WOGRP SL8WOGRP ; 
    10 SL8WONBR SL8WONBR ; 
    10 YWSCD YWSCD ; 
    10 YWTCD YWTCD ; 
    10 SL2PALET SL2PALET ; 
    10 SL2CASE SL2CASE ; 
    10 SL8FRAR SL8FRAR ; 
    10 SL8FRZN SL8FRZN ; 
    10 SL8FRLC SL8FRLC ; 
    10 SL8TOAR SL8TOAR ; 
    10 SL8TOZN SL8TOZN ; 
    10 SL8TOLC SL8TOLC ; 
    10 SL0YWRDT SL0YWRDT ; 
    10 SL0YWCDT SL0YWCDT ; 
    10 SL8WOPY SL8WOPY ; 
    10 SL8CRTBY SL8CRTBY ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XEGCD XEGCD ; 
    10 XSLCD XSLCD ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 XOWCD XOWCD ; 
    10 SY4IDDSC SY4IDDSC [40] ; 
    10 SY5SZID SY5SZID [40] ; 
    10 SL9WOQTY SL9WOQTY [40] ; 
end // end SL0YW02

DataItem SL0YMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cancel complete date
DataItem SL0YWCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current date
DataItem SL0YWCUD char(8)  {
  align = right, fillCharacter = "0", dateFormat = "MM-dd-yy", 
  inputRequired = no
}
end

// Display page switch
DataItem SL0YWDPG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// From date
DataItem SL0YWDTF num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// To date
DataItem SL0YWDTT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// From date
DataItem SL0YWFDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map 002 fields
DataItem SL0YWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem SL0YWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Omit type
DataItem SL0YWOMI char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// page line counter
DataItem SL0YWPGL num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id
DataItem SL0YWPID num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO Id
DataItem SL0YWPOI char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO Nbr
DataItem SL0YWPON num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// type for po id
DataItem SL0YWPTP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// create date
DataItem SL0YWRDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work order status code
DataItem SL0YWSCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current or old flag
DataItem SL0YWSL8 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem SL0YWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem SL0YWSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem SL0YWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem SL0YWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save work order type
DataItem SL0YWSWT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem SL0YWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work order type code
DataItem SL0YWTCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// To date
DataItem SL0YWTDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

