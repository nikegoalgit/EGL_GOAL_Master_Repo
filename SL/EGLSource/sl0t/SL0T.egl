package sl0t;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SL0T ****
// This application allows a user to display plan data for
// a specific warehouse, plan and container.  The data is
// displayed in lane category, lane number, gpc code and P.O.
// number sequence.  All detail totals are accumulated in the
// sequence above.  The container totals are an accumulation
// of the column totals.
// 
// Once the data is viewed and approved, the user may submit
// the create label batch job by pressing PF16.  When the job
// completes, a message will be displayed to the user.
// 
// The user may scroll forward and backward using the
// appropriate PF keys.  The user may exit to any allowed
// application, via fast path or PF key from this screen.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// PK#159   10/31/90  SJOHNS  New application.
// FIX      01/07/91  SPOPA   Correct message display process.
// fix      01/09/91  CENGEL  Added logic to position cursor
//                            in the PO field instead of the
//                            Warehouse field, and blanked-out
//                            Carton Number after print submit
// fix      01/22/91  rchini  1.  Override reprint flag to 'Y'
//                            on SL0TM001.
//                            2.  Allow program to fast path to
//                            SL0TM002 map.
//                            3.  If a printer selection was
//                            made, continue to display the
//                            printer selected after each
//                            submit.
//                            4.  Move the printer selection
//                            from the bottom of the map to the
//                            top of the map on SL0TM001.
// fix      01/24/91  rchini  1.  After TA0P has been executed,
//                            move the printer to the map.
//                            2. Default the reprint flag to
//                            'N' on initial display for both
//                            maps.  If the flag is changed to
//                            'Y', the flag will be reset to
//                            'N'.
//                            3.  The cursor will be set at the
//                            printer destination for initial
//                            display on both maps.
// fix      02/06/91  rchini  1.  Remove pop-up window for
//                            print destination.  TA0P will
//                            care of the printer destination.
//                            2.  Modified map so that 'SL0T'
//                            appears next to the module id
//                            location at the top of the map.
// FIX      02/12/91  SPOPA   Add USER and PASSWORD to JCL
//                            table so CA7 can be bypassed.
// FIX      02/15/91  ryonke  allow labels to be printed from
//                            previous generation datasets.
// FIX      02/27/91  rchini  SL-WO-PRT-FL on dstloc.vwophd01
//                            was not getting updated properly.
//                            SL-WO-PRT-FL should be set to 'y'
//                            if all SL-WO-CRTN-PRT-FL on
//                            dstloc.vwopit01 are all set to
//                            'y'.
// MAINT    01/28/92  GRAY    INITIALIZE ALL RECORDS AND MAPS.
// WILRCV   04/01/93  BGILDE  Changed to use po nbr when whse
//                            = 51 and to use po id when whse
//                            not = 51.
// WILRCV   04/15/93  BGILDE  Added new jcl to print planned
//                            work orders.
// WILRCV   05/05/93  mpluth  fixed a bug that did not load all
//                            of the parameter fields into
//                            the print parm card.
// FIX      10/21/94  MPLUTH  Fixed the size of the SL0TW02
//                            record.
// tscrtnb  06/20/95  RMORGA  Change maps to increase TSOCRTNB
//                            from four to six digits.
// y2kproj  02-03-98  oricha  y2k modifications:  regen to pick
//                            up new version of xx0xs01.
// *********************
Program SL0T type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC3REC PC3REC; // record
  SL0TW00 SL0TW00; // record
  SL0TW01 SL0TW01; // record
  SL0TW02 SL0TW02; // record
  SL0TW03 SL0TW03; // record
  SL0TW05 SL0TW05; // record
  SL0TW06 SL0TW06; // record
  SLLREC SLLREC; // record
  SLMREC SLMREC; // record
  SLOREC SLOREC; // record
  SLSREC SLSREC; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SWEREC SWEREC; // record
  SWVREC SWVREC; // record
  SYCREC SYCREC; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use XGPTBL; // table
  use SL0TT; // table
  use SL0TT01 {deleteAfterUse = yes}; // table
  use SL0TM.SL0TM001,  // forms
      SL0TM.SL0TM002, 
      SL0TM.TA0PM001, 
      SL0TM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SL0TW00 empty; /* Working storage*/
    set SL0TW01 empty; /* M001 display storage*/
    set SL0TW02 empty; /* M001 temporary storage*/
    set SL0TW05 empty; /* batch submit storage*/
    set SL0TW06 empty;
    set SQLCA empty; /* SQL communication area*/
    set ERRSQLCA empty; /* SQL communication area*/
    set SWEREC empty;
    set SWVREC empty;
    set PC3REC empty;
    set SLLREC empty;
    set SLMREC empty;
    set SLOREC empty;
    set SLSREC empty;
    set SYCREC empty;
    set SYPREC empty;
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date routine work area*/
    set TA5REC empty; /* temporary storage area*/
    set TA6REC empty; /* jcl submit work area*/
    set TAEREC empty; /* Error diagnosis information*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set XX0XW02 empty; /* Date/time subroutine parameters*/
    set TA0PM001 initial; /* M001 input/output*/
    set SL0TM001 initial; /* M001 input/output*/
    set SL0TM002 initial; /* M001 input/output*/
    set XX0XM001 initial; /* M001 input/output*/

    SL0TW00.XXXTSLEN = 1200; /* temp storage length*/

    SL0TW00.SL0TWMSW = "1"; /* process sl0tm001*/
    SL0TW00.SL0TWSWR = "N"; /* Request for data switch*/
    SL0TW00.SL0TWSWF = "Y"; /* format screen data switch*/
    SLWREC.XXXAPPID = COMMAREA.CACURRAP;

     /* ---------------------------------------------------*/
     /* set defaults*/
     /* ---------------------------------------------------*/

    SL0TW01.XWHCD = SLWREC.XWHCD; /* whse code*/
    if (SL0TW01.XWHCD in XWHTBL.XWHCD)
      SL0TW01.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    end
    if (SL0TW01.XGPCD == " ") /* if GPC blank*/
      if (SL0TW01.XWHCD == "51") /* if aprl whse*/
        SL0TW01.XGPCD = "03"; /* assign default GPC*/
      else /* if ftwr whse*/
        SL0TW01.XGPCD = "02"; /* assign default GPC*/
      end
    end
    SL0TW01.SL0TMRPT = "N"; /* Reprint flag*/
    SL0TW01.SL0TMPGN = "00"; /* Generation*/

     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/

     /* IF SLWREC.XWHCD NE ' ';*/
      /* AND SLWREC.SWEPLNNB NE 0;*/
      /* AND SLWREC.TSHCNTNR NE 0;*/
      /* MOVE SLWREC.XWHCD TO sl0tM001.XWHCD;*/
      /* MOVE SLWREC.SWEPLNNB TO sl0tM001.SWEPLNNB;*/
      /* MOVE SLWREC.TSHCNTNR TO sl0tM001.TSHCNTNR;*/
      /* MOVE 'Y' TO sl0tW00.sl0tWSWR  ; set data request flag*/
     /* END ;*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SL0T001; /* Converse the main process*/

    SL0T001: SL0T001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SL0T001; /* Converse the main process*/

  end // end main
end // end SL0T

// Inquire/maintain a table row
Function SL0T001()
   /* ------------------------------------------------------------*/
   /* This controls whether sl0tm001 or sl0tm002 will be*/
   /* processed.*/

   /* If the fast path option, check the item.  If the item = 2,*/
   /* then process SL0Tm002 map.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM == "2") /* if 2nd option requested*/

    SL0TW00.SL0TWMSW = "2"; /* move 2 to map switch*/
    COMMAREA.CAITEM = " "; /* reset caitem field*/
    SL0T200(); /* process sl0tm002*/

  else

    if (SL0TW00.SL0TWMSW == "1") /* map switch*/
      SL0T100(); /* process sl0tm001*/
    else
      SL0T200(); /* process sl0tm002*/
    end
  end

end // end SL0T001

// Inquire/maintain a table row
Function SL0T100()
   /* ------------------------------------------------------------*/
                      /* sl0tm001 main process*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SL0T110(); /* Obtain the data to display*/

  SL0T120(); /* Format and display the map*/

  SL0T130(); /* Check attention identifier*/

  SL0T140(); /* Reset fields to normal intensity*/

  SL0T150(); /* Verify the entered data*/

  SL0T160(); /* Process valid input request*/

end // end SL0T100

// Obtain the data to display
Function SL0T110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SL0TW00.SL0TWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  SL0TS01(); /* Purge any temporary storage*/

  SL0TW00.SL0TWIDX = 1; /* init index*/

  set SLOREC empty; /* init dstloc.vwophd02 record*/

   /* -----------------------------------------------*/
   /* load dstloc.vwophd02 key fields*/
   /* -----------------------------------------------*/

  SLOREC.XWHCD = SL0TW01.XWHCD;
  SLOREC.PC3PONBR = SL0TW01.PC3PONBR;
  SL0TW01.SL0TMRPT = "N"; /* move 'n' to reprint flag*/

  SLOREC.TSOCRTNB = SL0TW01.TSOCRTNB;

  if (SL0TW01.XGPCD != " ")
    SLOREC.XGPCD = SL0TW01.XGPCD;
  else
    SLOREC.XGPCD = "*";
  end

  if (SL0TW01.SY1STNBR != " ")
    SLOREC.SY1STNBR = SL0TW01.SY1STNBR;
  else
    SLOREC.SY1STNBR = "*";
  end

  SLOREC.SY2CLRID = "*";
  SLOREC.XDMCD = "*";

  SL0TS04(); /* select set on dstloc.vwoph*/

  SL0T111(); /* get next usable vwophd02 r*/

  while (SQLCA.VAGen_SQLCODE == 0) /* until eof dstloc.vwophd02*/

    /* ------------------------------------------------------------*/
     /* move all fields from record to ts record*/
    /* ------------------------------------------------------------*/

    SL0TSB2(); /* move fields to ts record*/

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (SL0TW00.SL0TWIDX == 11) /* Page is full*/
      SL0TW02.SL0TWNLD = SL0TW00.SL0TWIDX; /* nbr of lines loaded*/
      SL0TS03(); /* Add page to temp storage*/
    else
      SL0TW00.SL0TWIDX = SL0TW00.SL0TWIDX + 1;
    end

    SL0T111(); /* get next usable vwophd02 ro*/
     /* SL0TW00.SL0TWPIX = SL0TW00.SL0TWPIX + 1;*/

  end

  SL0TS06(); /* close dstloc.vwophd02 set*/

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (SL0TW00.SL0TWIDX > 1) /* Page was formatted*/
    SL0TW02.SL0TWNLD = SL0TW00.SL0TWIDX - 1;
    SL0TS03(); /* Add page to temp storage*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, display m002.*/
   /* ------------------------------------------------------------*/

  if (SL0TW00.TA5TSQIX == 0) /* No pages formatted*/

    SL0TSB7(); /* clear the keys*/

    set SL0TW02 empty; /* clear temp storage*/

    SLWREC.XXXLOCID = "110"; /* Module identification*/
    SLWREC.SLWMSGNO = 378; /* no items found for prev map*/
    SL0TW00.SL0TWMSW = "2"; /* flag for map sl0tm002*/
    SL0TW00.SL0TWSWR = "N"; /* request for data*/
    SL0TW00.SL0TWSWF = "Y"; /* format map*/

    exit stack; /* Exit to continue processing*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SL0TW00.XXXTSPAG = 1; /* Desired page number*/
  SL0TW00.SL0TWSWR = "N"; /* Request for data switch*/
  SL0TW00.SL0TWDLF = "Y"; /* data loaded switch*/

end // end SL0T110

// get next usable vwophd02 row
Function SL0T111()
   /* ------------------------------------------------------------*/
   /* get the next usable dstloc.vwophd02.*/
     /* exclude rows if quality code is '02, color was entered*/
       /* and not equal*/
     /* exclude rows whose plan status eq 'rc'*/
   /* ------------------------------------------------------------*/

  SL0TW00.SL0TWRFD = "N"; /* indicate row was found*/

  while (SL0TW00.SL0TWRFD != "Y") /* until usable row is found*/

    SL0TS05(); /* fetch next dstloc.vwophd02 row*/

    if (SQLCA.VAGen_SQLCODE != 0)
      return;
    end

    /* ------------------------------------------------------------*/
     /* exclude rows if quality code is '02, color was entered*/
       /* and not equal*/
    /* ------------------------------------------------------------*/

    if (SLOREC.XQACD != "02"    
     && SL0TW01.SY2CLRID != " " /* color was entered*/
     && SLOREC.SY2CLRID != SL0TW01.SY2CLRID) /* colors not equal*/
       /* next sentence*/
    else
      set SWEREC empty;
      SWEREC.XWHCD = SL0TW01.XWHCD;
      SWEREC.SWEPLLNB = SLOREC.SWEPLLNB;

      SL0TS10(); /* select dstloc.vplnhd01*/

      if (SQLCA.VAGen_SQLCODE == 0)
        if (SWEREC.XRPCD == "RC")
           /* next sentence*/
        else
          SL0TW00.SL0TWRFD = "Y"; /* indicate row was found*/
        end
      end
    end
  end

end // end SL0T111

// Format and converse the map
Function SL0T120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SL0TW00.SL0TWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SL0TW00.SL0TWSWF == "Y") /* Map must be formatted*/

      SL0T121(); /* Format the data on the map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format page, date, and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  if (SL0TW00.TA5TSQIX > 0)
    SL0TM001.XXXTSPAG = SL0TW00.XXXTSPAG; /* Current page*/
    SL0TM001.TA5TSQIX = SL0TW00.TA5TSQIX; /* max pages*/
  end

  SL0TM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SL0TM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SL0TM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SL0TM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SL0TM001.XXXLOCID = SLWREC.XXXLOCID; /* Module identification*/

    set SL0TM001 alarm; /* Indicate sound alarm*/

  end

  converse SL0TM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SL0TM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SL0TM001.CAITEM; /* Application data*/


end // end SL0T120

// Format the display data
Function SL0T121()

   /* ------------------------------------------------------------*/
   /* init map sl0tm001*/
   /* ------------------------------------------------------------*/

  set SL0TM001 initial; /* m001 input/ouput area*/

  SL0TW00.SL0TWSWF = "N"; /* format map switch*/

   /* ------------------------------------------------------------*/
   /* Format sl0tm001 using passed data*/
   /* ------------------------------------------------------------*/

  SL0TM001.XWHCD = SL0TW01.XWHCD;
  SL0TM001.XWHSABRV = SL0TW01.XWHSABRV;
  SL0TM001.PC3PONBR = SL0TW01.PC3PONBR;
  SL0TM001.SL0TMPOI = SL0TW01.SL0TMPOI;
  SL0TM001.PC4ORTYP = SL0TW01.PC4ORTYP;
  SL0TM001.TSOCRTNB = SL0TW01.TSOCRTNB;
  SL0TM001.XGPCD = SL0TW01.XGPCD;
  SL0TM001.SY1STNBR = SL0TW01.SY1STNBR;
  SL0TM001.SY2CLRID = SL0TW01.SY2CLRID;
  SL0TM001.SL0TMRPT = SL0TW01.SL0TMRPT;
  SL0TM001.SL0TMPGN = SL0TW01.SL0TMPGN;
  SL0TM001.XROPDEST = SL0TW01.XROPDEST;

  if (SL0TW01.XWHCD == "51")
    set SL0TM001.SL0TMPOI invisible, protect;
    set SL0TM001.PC4ORTYP invisible, protect;
  else
    set SL0TM001.PC3PONBR invisible, protect;
  end

   /* ------------------------------------------------------------*/
   /* if data has not been loaded bypass load map fields*/
   /* ------------------------------------------------------------*/

  if (SL0TW00.SL0TWDLF != "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* load map using sl0tw01 work record*/
   /* ------------------------------------------------------------*/

  SL0TW00.SL0TWIDX = 1;

  SL0TS02(); /* read temporary storage*/

  while (SL0TW00.SL0TWIDX <= 11) /* process temp*/
    if (SL0TW00.SL0TWIDX <= SL0TW02.SL0TWNLD) /* process temp*/

      SL0TSB3(); /* format detail fields*/

    else
      set SL0TM001.SL0TMSEL[SL0TWIDX] initialAttributes;
    end
    SL0TM001.SL0TMSEL[SL0TWIDX] = " ";
    SL0TW00.SL0TWIDX = SL0TW00.SL0TWIDX + 1; /* increment load*/

  end

  if (SL0TW02.SL0TWNLD == 1 /* only one line displayed*/
   && SL0TW00.XXXTSPAG == 1) /* only one page to display*/
    SL0TM001.SL0TMSEL[1] = "S";
  end


end // end SL0T121

// Check attention identifier
Function SL0T130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* refresh map*/

    set SL0TW01 empty; /* clear keys*/

    SL0TW01.XWHCD = COMMAREA.XWHCD;
    if (COMMAREA.XWHCD in XWHTBL.XWHCD)
      SL0TW01.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    end
    if (COMMAREA.XWHCD == "51")
      SL0TW01.XGPCD = "03";
    else
      SL0TW01.XGPCD = "02";
    end
    SL0TW01.SL0TMPGN = "00";
    SL0TW01.SL0TMRPT = "N";

    SL0TW00.SL0TWSWR = "N"; /* request for data*/
    SL0TW00.SL0TWDLF = "N"; /* data loaded flag*/
    SL0TW00.SL0TWSWF = "Y"; /* format screen m001*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SL0TM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SL0TS01(); /* purge temp storage*/

      XSSL001(); /* Exit to another application*/

      SL0TW00.SL0TWSWR = "N"; /* request for data*/
      SL0TW00.SL0TWSWF = "Y"; /* format screen m001*/

      set SL0TM001.CATOAP cursor, bold; /* Highlight*/

    else

      SLWREC.XXXLOCID = "130"; /* Module identification*/
      converseLib.validationFailed(258); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SL0TM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SW0R"; /* Application find code*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* Application find code*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* Application find code*/
    end

    SL0TS01(); /* purge temp storage*/

    XSSL001(); /* Exit to another application*/

    SL0TW00.SL0TWSWR = "N"; /* request for data*/
    SL0TW00.SL0TWSWF = "Y"; /* format screen m001*/
    SL0TW00.SL0TWDLF = "N"; /* data loaded flag*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf6   /* pf6 was not pressed*/
   && converseVar.eventKey not pf7   /* pf7 was not pressed*/
   && converseVar.eventKey not pf8   /* pf8 was not pressed*/
   && converseVar.eventKey not pf6   /* pf6 was not pressed*/
   && converseVar.eventKey not pf14) /* pf14 was not pressed*/

    SLWREC.XXXLOCID = "130"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

  if (converseVar.eventKey is pf14)

    SL0TW00.SL0TWMSW = "2";
    SL0TW00.SL0TWSWR = "N"; /* request for data*/
    SL0TW00.SL0TWSWF = "Y"; /* format screen m001*/
    SL0TW00.SL0TWDLF = "N"; /* data loaded flag*/
    COMMAREA.CAITEM = " "; /* passed data*/

    SL0TS01(); /* purge temp storage*/

    SL0TSB7(); /* clear the keys*/

    converseLib.clearScreen();
     /* Clear screen before display*/

    exit stack; /* Exit to display map*/
  end



end // end SL0T130

// Reset highlighted fields
Function SL0T140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SL0TM001.XWHCD initialAttributes; /* WHSE CODE*/
  if (SL0TM001.XWHCD == "51")
    set SL0TM001.PC3PONBR initialAttributes; /* po number*/
    set SL0TM001.SL0TMPOI invisible, protect; /* po id*/
    set SL0TM001.PC4ORTYP invisible, protect; /* type*/
    set SL0TM001.PC3PONBR cursor; /* position cursor*/
  else
    set SL0TM001.SL0TMPOI initialAttributes; /* po id*/
    set SL0TM001.PC4ORTYP initialAttributes; /* type*/
    set SL0TM001.PC3PONBR invisible, protect; /* po number*/
    set SL0TM001.SL0TMPOI cursor; /* po id*/
  end
  set SL0TM001.TSOCRTNB initialAttributes; /* container number*/
  set SL0TM001.XGPCD initialAttributes; /* gpc code*/
  set SL0TM001.SY1STNBR initialAttributes; /* style nbr*/
  set SL0TM001.SY2CLRID initialAttributes; /* color id*/
  set SL0TM001.SL0TMRPT initialAttributes; /* reprint*/
  set SL0TM001.SL0TMPGN initialAttributes; /* generation*/
  set SL0TM001.XROPDEST initialAttributes; /* printer*/
  set SL0TM001.CAITEM initialAttributes; /* item*/

  SL0TW00.SL0TWIDX = 1;

  while (SL0TW00.SL0TWIDX <= 11
   && SL0TM001.SL0TMCTN[SL0TWIDX] > 0)
    set SL0TM001.SL0TMSEL[SL0TWIDX] normal;
    SL0TW00.SL0TWIDX = SL0TW00.SL0TWIDX + 1;
  end

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SL0TM001.XWHCD == "?" /* WAREHOUSE CODE*/
   || SL0TM001.XGPCD == "?") /* gpc code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      SLWREC.XXXLOCID = "140"; /* Module identification*/
      converseLib.validationFailed(264);
                                   /* Indicate PF key not valid press enter*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of whse codes*/
   /* ------------------------------------------------------------*/

  if (SL0TM001.XWHCD == "?") /* warehouse codes*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "WAREHOUSE CODES "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      SL0TM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected*/
      SL0TM001.XWHSABRV = XWHTBL.XWHSABRV[XX0XWPIX];

    end

    set SL0TM001.XWHCD cursor; /* Establish cursor position*/

  end


   /* ------------------------------------------------------------*/
   /* If requested, display the list of group codes*/
   /* ------------------------------------------------------------*/

  if (SL0TM001.XGPCD == "?") /* warehouse codes*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "GROUP CODES "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXGP01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      SL0TM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* Selected*/

    end

    set SL0TM001.XGPCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before displa*/

  SLWREC.XXXLOCID = "140"; /* Module identification*/
  converseLib.validationFailed(241); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end SL0T140

// Verify the entered data
Function SL0T150()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "150"; /* Module identification*/
    set SL0TM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(2); /* Enter only with FAST PATH*/
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* check for new key*/
   /* ------------------------------------------------------------*/

  SL0TSB1(); /* same key edits*/

   /* ------------------------------------------------------------*/
   /* if the key has changed*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWSKYSW != "Y")
    SL0TM001.XWHSABRV = " ";
    SL0TW00.SL0TWDLF = "N"; /* data loaded flag*/
    SL0TSB7(); /* clear the key*/
  end

   /* ------------------------------------------------------------*/
   /* check pfkey*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)
    if (SLWREC.SLWSKYSW != "Y")
      SL0T152(); /* validate key fields*/
      if (converseVar.validationMsgNum == 0)
        SL0TW00.SL0TWSWR = "Y"; /* request for data*/
      end
    else
      SL0T153(); /* verify print request*/
    end
  else
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      SL0T151(); /* validate scroll request*/
    else
      if (converseVar.eventKey is pf6)
        SL0T153(); /* verify print request*/
      end
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end

end // end SL0T150

// validate key fields
Function SL0T151()
   /* ------------------------------------------------------------*/
   /* If key has changed, error*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWSKYSW != "Y") /* key has not changed*/

    SLWREC.XXXLOCID = "151"; /* Module identification*/
    converseLib.validationFailed(5); /* change the key on enter*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && SL0TW00.XXXTSPAG < 2)       /* and no previous pages*/

    SLWREC.XXXLOCID = "151"; /* Module identification*/
    converseLib.validationFailed(7); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && SL0TW00.XXXTSPAG >= SL0TW00.TA5TSQIX) /* and no more pages*/

    SLWREC.XXXLOCID = "151"; /* Module identification*/
    converseLib.validationFailed(8); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll request, ensure that rows were not selected.*/
   /* ------------------------------------------------------------*/

  SL0TW00.SL0TWIDX = 11;

  while (SL0TW00.SL0TWIDX > 0) /* until end of lines*/

    if (SL0TM001.SL0TMSEL[SL0TWIDX] > " ")
      set SL0TM001.SL0TMSEL[SL0TWIDX] cursor, bold;
      SLWREC.XXXLOCID = "151"; /* Module identification*/
      converseLib.validationFailed(18); /* selection with enter only*/
    end
    SL0TW00.SL0TWIDX = SL0TW00.SL0TWIDX - 1;
  end

end // end SL0T151

// Verify the Entered Data
Function SL0T152()
   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* if the key hasn't changed, error*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWSKYSW == "Y")
    SLWREC.XXXLOCID = "152";
    converseLib.validationFailed(5); /* change the key*/
    return;
  end


   /* ------------------------------------------------------------*/
   /* verify reprint and generation fields*/
   /* ------------------------------------------------------------*/

  if (SL0TM001.SL0TMPGN == "00"
   || SL0TM001.SL0TMPGN == "-1"
   || SL0TM001.SL0TMPGN == "-2")
     /* next sentence*/
  else
    SLWREC.XXXLOCID = "152";
    set SL0TM001.SL0TMPGN cursor, bold;
    converseLib.validationFailed(11); /* required field*/
  end

  if (SL0TM001.SL0TMRPT == "Y"
   || SL0TM001.SL0TMRPT == "N")
     /* next sentence*/
  else
    SLWREC.XXXLOCID = "152";
    set SL0TM001.SL0TMRPT cursor, bold;
    converseLib.validationFailed(11); /* required field*/
  end

   /* ------------------------------------------------------------*/
   /* check color and style*/
   /* ------------------------------------------------------------*/

  if (SL0TM001.SY2CLRID != " " /* color is entered*/
   && SL0TM001.SY1STNBR == " ") /* style is not entered*/
    SLWREC.XXXLOCID = "152";
    set SL0TM001.SY1STNBR cursor, bold;
    converseLib.validationFailed(56); /* style not valid*/
  end

   /* ------------------------------------------------------------*/
   /* check gpc code*/
   /* ------------------------------------------------------------*/

  if (SL0TM001.XGPCD != " ") /* gpc code is entered*/
    if (SL0TM001.XGPCD in XGPTBL.XGPCD) /* gpc code valid*/
       /* next sentence*/
    else
      SLWREC.XXXLOCID = "152";
      set SL0TM001.XGPCD cursor, bold;
      converseLib.validationFailed(157); /* gpc not valid*/
    end
  else /* gpc code is not entered*/
    SLWREC.XXXLOCID = "152";
    set SL0TM001.XGPCD cursor, bold;
    converseLib.validationFailed(9); /* required field*/
  end

   /* ------------------------------------------------------------*/
   /* check carton nbr*/
   /* ------------------------------------------------------------*/

  if (SL0TM001.TSOCRTNB == 0) /* container is not entered*/
    SLWREC.XXXLOCID = "152";
    set SL0TM001.TSOCRTNB cursor, bold;
    converseLib.validationFailed(9); /* required field*/
  end

   /* ------------------------------------------------------------*/
   /* po nbr or po id required*/
   /* ------------------------------------------------------------*/

  if (SL0TM001.XWHCD == "51") /* if aprl whse*/
    if (SL0TM001.PC3PONBR == 0) /* po nbr is not entered*/
      set SL0TM001.PC3PONBR cursor, bold;
      set SL0TM001.SL0TMPOI invisible, protect;
      set SL0TM001.PC4ORTYP invisible, protect;
      SLWREC.XXXLOCID = "152";
      converseLib.validationFailed(009); /* required field*/
    end
  else
    if (SL0TM001.PC4ORTYP == " ") /* order type not entered*/
      set SL0TM001.PC4ORTYP cursor, bold;
      set SL0TM001.PC3PONBR invisible, protect;
      SLWREC.XXXLOCID = "152";
      converseLib.validationFailed(009); /* required field*/
    end
    if (SL0TM001.SL0TMPOI == " ") /* po id not entered*/
      set SL0TM001.SL0TMPOI cursor, bold;
      set SL0TM001.PC3PONBR invisible, protect;
      SLWREC.XXXLOCID = "152";
      converseLib.validationFailed(009); /* required field*/
    end
  end

   /* ------------------------------------------------------------*/
   /* check warehouse code*/
   /* ------------------------------------------------------------*/

  if (SL0TM001.XWHCD > " ")
    if (SL0TM001.XWHCD in XWHTBL.XWHCD)
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        SL0TW01.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
        SL0TW01.XWHCD = SL0TM001.XWHCD;
      else
        SLWREC.XXXLOCID = "152";
        set SL0TM001.XWHCD cursor, bold;
        converseLib.validationFailed(010); /* status is inactive*/
      end
    else
      SLWREC.XXXLOCID = "152";
      set SL0TM001.XWHCD cursor, bold;
      converseLib.validationFailed(011); /* invalid value*/
    end
  else
    SLWREC.XXXLOCID = "152";
    set SL0TM001.XWHCD cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* validate po nbr against po header table*/
   /* if gpc code is entered*/
   /* ------------------------------------------------------------*/

  if (SL0TM001.XGPCD > " "
   && SL0TM001.PC3PONBR > 0)
    set PC3REC empty;

    PC3REC.XGPCD = SL0TM001.XGPCD; /* gpc code*/
    PC3REC.PC3PONBR = SL0TM001.PC3PONBR; /* po nbr*/

    SL0TS14(); /* sel unique dprodc.vpohdr01*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      SLWREC.XXXLOCID = "152";
      set SL0TM001.PC3PONBR cursor, bold;
      set SL0TM001.XGPCD bold;
      converseLib.validationFailed(272); /* po nbr not found*/
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* if po id entered, convert it to po nbr*/
   /* ------------------------------------------------------------*/

  if (SL0TM001.PC3PONBR == 0
   && SL0TM001.SL0TMPOI > " ")

    set SWVREC empty;
    SWVREC.SWVWFNC = "NO";
    TA1REC.TA1PGMNM = "SL0T152";
    SWVREC.XGPCD = SL0TM001.XGPCD;
    SWVREC.SWVWPOID = SL0TM001.SL0TMPOI;
    SWVREC.PC4ORTYP = SL0TM001.PC4ORTYP;

    XSSLS10(); /* convert poid to ponbr*/

    if (SWVREC.SWVWRTN == 00)
      SL0TW01.PC3PONBR = SWVREC.PC3PONBR;
      SL0TM001.PC3PONBR = SWVREC.PC3PONBR;
    else /* unsuccessful*/
      if (SWVREC.SWVWRTN == 12)
        SLWREC.XXXLOCID = "152";
        set SL0TM001.SL0TMPOI cursor, bold;
        set SL0TM001.PC4ORTYP bold;
        converseLib.validationFailed(213); /* multiple po nbrs*/
      else /* unsuccessful*/
        SLWREC.XXXLOCID = "152";
        set SL0TM001.SL0TMPOI cursor, bold;
        set SL0TM001.PC4ORTYP bold;
        converseLib.validationFailed(329); /* invalid po id/type for gpc*/
      end
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* validate gpc, style and color (if entered) against*/
   /* against dprod.vcolor02*/
   /* ------------------------------------------------------------*/

  if (SL0TM001.XGPCD > " "
   && SL0TM001.SY1STNBR > " ")

    set SYCREC empty;
    SYCREC.XGPCD = SL0TM001.XGPCD;
    SYCREC.SY1STNBR = SL0TM001.SY1STNBR;
    SYCREC.XDMCD = " ";

    if (SL0TM001.SY2CLRID > " ")
      SYCREC.SY2CLRID = SL0TM001.SY2CLRID;
    else
      SYCREC.SY2CLRID = " ";
    end

    SL0TS15(); /* sel set dprod.vcolor02*/

    SL0TS16(); /* fetch dprod.vcolor02*/

    if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
    else
      SLWREC.XXXLOCID = "152";
      set SL0TM001.XGPCD cursor, bold;
      set SL0TM001.SY1STNBR bold;
      if (SL0TM001.SY2CLRID > " ")
        set SL0TM001.SY2CLRID bold;
      end
      converseLib.validationFailed(56); /* invalid style/color*/
    end

    SL0TS17(); /* close dprod.vcolor02*/

  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

end // end SL0T152

// verify print request
Function SL0T153()
   /* ------------------------------------------------------------*/
   /* If key has changed, error*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWSKYSW != "Y") /* key has changed*/

    SLWREC.XXXLOCID = "153"; /* Module identification*/
    converseLib.validationFailed(219); /* cannot change key*/
    return;
  else

    /* ------------------------------------------------------------*/
     /* if no data was displayed last time*/
    /* ------------------------------------------------------------*/

    if (SL0TW00.TA5TSQIX < 1) /* no data*/

      if (SL0TM001.XWHCD == "51") /* if aprl whse*/
        set SL0TM001.PC3PONBR cursor, bold;
        set SL0TM001.SL0TMPOI invisible, protect;
        set SL0TM001.PC4ORTYP invisible, protect;
      else
        set SL0TM001.SL0TMPOI cursor, bold;
        set SL0TM001.PC4ORTYP bold;
        set SL0TM001.PC3PONBR invisible, protect;
      end
      SLWREC.XXXLOCID = "153"; /* Module identification*/
      converseLib.validationFailed(5); /* change the keys*/
      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* verify reprint and generation fields*/
   /* ------------------------------------------------------------*/

  if (SL0TM001.SL0TMPGN == "00"
   || SL0TM001.SL0TMPGN == "-1"
   || SL0TM001.SL0TMPGN == "-2")
     /* next sentence*/
  else
    SLWREC.XXXLOCID = "152";
    set SL0TM001.SL0TMPGN cursor, bold;
    converseLib.validationFailed(11); /* required field*/
  end

  if (SL0TM001.SL0TMRPT == "Y"
   || SL0TM001.SL0TMRPT == "N")
     /* next sentence*/
  else
    SLWREC.XXXLOCID = "152";
    set SL0TM001.SL0TMRPT cursor, bold;
    converseLib.validationFailed(11); /* required field*/
  end

   /* ------------------------------------------------------------*/
   /* verify selected rows*/
   /* ------------------------------------------------------------*/

  SL0TW00.SL0TWPIX = SL0TW02.SL0TWNLD; /* nbr lines on page*/
  SL0TW00.SL0TWLSL = 0; /* nbr of lines selected*/
  SL0TW00.PKDNCSQN = 0; /* carton seq nbr*/
  SL0TW00.SL8WOGRP = 0; /* work order group*/
  SL0TW00.SL8WONBR = 0; /* work order nbr*/
  SL0TW00.SL0TWPLN = 0; /* plan number*/
  SL0TW00.TSHCNTNR = " "; /* container*/
  SL0TW00.SL0TWPIX = 11; /* nbr of lines selected*/

  while (SL0TW00.SL0TWPIX > 0)

    if (SL0TM001.SL0TMSEL[SL0TWPIX] > " ")
      if (SL0TM001.SL0TMSEL[SL0TWPIX] == "S")
        SL0TW00.SL0TWLSL = SL0TW00.SL0TWLSL + 1; /* nbr of lines selected*/
        if (SL0TW00.SL0TWLSL == 1) /* first selected line*/
          SL0TW00.PKDNCSQN = SL0TW02.PKDNCSQN[SL0TWPIX];
          SL0TW00.SLMWCPFL = SL0TW02.SLMWCPFL[SL0TWPIX];
          SL0TW00.SL8WOGRP = SL0TW02.SL8WOGRP[SL0TWPIX];
          SL0TW00.SL8WONBR = SL0TW02.SL8WONBR[SL0TWPIX];
          SL0TW00.SL0TWPLN = SL0TW02.SWEPLLNB[SL0TWPIX];
          SL0TW00.TSHCNTNR = SL0TW02.TSHCNTNR[SL0TWPIX];
        else
          if (SL0TW00.PKDNCSQN != SL0TW02.PKDNCSQN[SL0TWPIX])
            set SL0TM001.SL0TMSEL[SL0TWPIX] cursor, bold;
            SLWREC.XXXLOCID = "153"; /* Module identification*/
            converseLib.validationFailed(276); /* crtns dont have same crtn seq*/
          end
        end
      else
        set SL0TM001.SL0TMSEL[SL0TWPIX] cursor, bold;
        SLWREC.XXXLOCID = "153"; /* Module identification*/
        converseLib.validationFailed(17); /* invalid value*/
      end
    end
    SL0TW00.SL0TWPIX = SL0TW00.SL0TWPIX - 1;

  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

  if (SL0TW00.SL0TWLSL == 0)
    SLWREC.XXXLOCID = "153"; /* Module identification*/
    converseLib.validationFailed(240); /* select a row*/
  else
    if (converseVar.eventKey is enter)
      SLWREC.XXXLOCID = "153"; /* Module identification*/
      converseLib.validationFailed(3); /* selection valid with pf6*/
    end
  end

  if (SL0TW00.SLMWCPFL == "Y" /* label already printed*/
   && SL0TM001.SL0TMRPT != "Y") /* reprint flag*/
    SLWREC.XXXLOCID = "153"; /* Module identification*/
    set SL0TM001.SL0TMRPT cursor, bold;
    converseLib.validationFailed(277); /* label already printed*/
  end


end // end SL0T153

// Process valid input request
Function SL0T160()

  SL0TW00.SL0TWSWF = "Y"; /* format map 002*/

  SL0TW01.XWHCD = SL0TM001.XWHCD;
  COMMAREA.XWHCD = SL0TM001.XWHCD;
  SL0TW01.PC3PONBR = SL0TM001.PC3PONBR;
  SL0TW01.SL0TMPOI = SL0TM001.SL0TMPOI;
  SL0TW01.PC4ORTYP = SL0TM001.PC4ORTYP;
  SL0TW01.TSOCRTNB = SL0TM001.TSOCRTNB;
  SL0TW01.XGPCD = SL0TM001.XGPCD;
  SL0TW01.SY1STNBR = SL0TM001.SY1STNBR;
  SL0TW01.SY2CLRID = SL0TM001.SY2CLRID;
  SL0TW01.SL0TMRPT = SL0TM001.SL0TMRPT;
  SL0TW01.SL0TMPGN = SL0TM001.SL0TMPGN;
  SL0TW01.XROPDEST = SL0TM001.XROPDEST;


  if (converseVar.eventKey is enter
   && SLWREC.SLWSKYSW != "Y") /* KEY DATA MODIFIED{*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* request to scroll backwards*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* display next season*/
    SL0TW00.XXXTSPAG = SL0TW00.XXXTSPAG - 1;
    return;
  end

   /* ------------------------------------------------------------*/
   /* request to scroll foward*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* display next season*/
    SL0TW00.XXXTSPAG = SL0TW00.XXXTSPAG + 1;
    return;
  end

   /* ------------------------------------------------------------*/
   /* pf6 crt lbl has been requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6) /* print option*/

    SL0T161(); /* format/submit batch job*/

    SL0T162(); /* update print flags*/

    SL0TW00.SL0TWIDX = 1;
    while (SL0TW00.SL0TWIDX <= 11) /* clear the sel fields*/
      SL0TM001.SL0TMSEL[SL0TWIDX] = " ";
      SL0TW00.SL0TWIDX = SL0TW00.SL0TWIDX + 1;
    end

    SL0TM001.XROPDEST = SL0TW01.XROPDEST; /* move print dest*/
    SL0TW01.SL0TMRPT = "N"; /* reset reprint flag*/
    SL0TM001.SL0TMRPT = "N"; /* reset reprint flag*/

  end

end // end SL0T160

// Format/submit print request
Function SL0T161()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SL0TW01.XWHCD == "51") /* Warehouse 51*/
      if (SL0TT.TARTYPE[TA6INDEX] == "P" /* Parameters statement*/
       || SL0TT.TARTYPE[TA6INDEX] == "G") /* Parameters statement*/

        if (SL0TT.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/
          set SL0TW05 empty; /* parm work area*/
          SL0TW05.XWHCD = SL0TW01.XWHCD;
          SL0TW05.SL0TWCSN = SL0TW00.PKDNCSQN;
          SL0TW05.SL0TMPGN = SL0TW01.SL0TMPGN;
          TA6REC.TARJCL[TA6INDEX] = SL0TW05.TARJCL; /* Parameters*/
        end

        if (SL0TT.TARTYPE[TA6INDEX] == "G") /* Parameters statement*/
          set SL0TW06 empty; /* parm work area*/
          SL0TW06.SL0TWPJC = "//             GDG=";
          SL0TW06.SL0TWPLT = "'";
          SL0TW06.SL0TMPGN = SL0TW01.SL0TMPGN;
          SL0TW06.SL0TWPRT = "'";
          TA6REC.TARJCL[TA6INDEX] = SL0TW06.TARJCL; /* Parameters*/
        end
      else
        TA6REC.TARJCL[TA6INDEX] = SL0TT.TARJCL[TA6INDEX]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = SL0TT.TARTYPE[TA6INDEX]; /* Type*/
      end
      if (SL0TT.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/
        TA6REC.TA6INDEX = 0; /* Indicate end of table*/
      else
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    else
      if (SL0TT01.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

        if (SL0TT01.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/
          set SL0TW03 empty; /* parm work area*/
          SL0TW03.XWHCD = SL0TW01.XWHCD;
          SL0TW03.TSHCNTNR = SL0TW00.TSHCNTNR;
          SL0TW03.SL0TWOFL = " ";
          SL0TW03.SL0TWCSQ = SL0TW00.PKDNCSQN;
          SL0TW03.SL2PALET = 0;
          SL0TW03.SL5LOCTN = 0;
          SL0TW03.SL0TWPLN = SL0TW00.SL0TWPLN;
          SL0TW03.SL0TWWOG = SL0TW00.SL8WOGRP;
          SL0TW03.SL0TWNBR = SL0TW00.SL8WONBR;
          SL0TW03.SL0TWCRT = COMMAREA.CAUSERID;
          SL0TW03.SL0TWPUW = "C";
          TA6REC.TARJCL[TA6INDEX] = SL0TW03.TARJCL; /* Parameters*/
        end
      else
        TA6REC.TARJCL[TA6INDEX] = SL0TT01.TARJCL[TA6INDEX]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = SL0TT01.TARTYPE[TA6INDEX]; /* Type*/
      end
      if (SL0TT01.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/
        TA6REC.TA6INDEX = 0; /* Indicate end of table*/
      else
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.XURDEST = SL0TW01.XROPDEST; /* Printer identification*/

  if (TA6REC.XURDEST == " ") /* Printer not entered*/

    TA6REC.TA6SUBSW = "Y"; /* Display map ,tailor, submit JCL*/
  else
    TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL (no map)*/

  end

  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Print Request Subroutine*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "161"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    /* MOVE 0 TO SL0TW01.TSOCRTNB;    /* reset Carton Number*/

    SL0TW00.SL0TWSWF = "Y"; /* format the map switch*/
    SL0TW00.SL0TWSWR = "Y"; /* select the data switch*/
    SL0TW00.SL0TWDLF = "N"; /* data loaded flag*/

    SL0TW01.XROPDEST = TA6REC.XURDEST; /* move printer*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end SL0T161

// Update print flags
Function SL0T162()
   /* ------------------------------------------------------------*/
   /* Update print flags*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get current date and time*/

  SL0TWPAG = SL0TW00.XXXTSPAG; /* save current page #*/
  SL0TW00.XXXTSPAG = 0;
  SL0TW00.SWEPLLNB = 0;
  SL0TW00.SL8WONBR = 0;

  while (SL0TW00.XXXTSPAG < SL0TW00.TA5TSQIX)

    SL0TW00.XXXTSPAG = SL0TW00.XXXTSPAG + 1;

    SL0TS02(); /* read temporary storage*/

    SL0TW00.SL0TWIDX = 1;

    while (SL0TW00.SL0TWIDX <= SL0TW02.SL0TWNLD) /* lines per page*/
      if (SL0TW02.PKDNCSQN[SL0TWIDX] == SL0TW00.PKDNCSQN)

        SL0TS20(); /* select vwopit01*/

        if (SLMREC.SLMWCPFL != "Y")
          SL0TS13(); /* update vwopit01*/
        end

        if (SL0TW02.SWEPLLNB[SL0TWIDX] != SL0TW00.SWEPLLNB)
          set SWEREC empty;
          SWEREC.XWHCD = SL0TW01.XWHCD;
          SWEREC.SWEPLLNB = SL0TW02.SWEPLLNB[SL0TWIDX];

          SL0TS10(); /* s1 plan header*/

          if (SWEREC.XRPCD != "IP")
            SL0TS19(); /* update plan header*/
          end

          SL0TW00.SWEPLLNB = SL0TW02.SWEPLLNB[SL0TWIDX];
        end

        if (SL0TW00.SL8WONBR == 0)
          SL0TW00.SL8WONBR = SL0TW02.SL8WONBR[SL0TWIDX];
        end

        if (SL0TW02.SL8WONBR[SL0TWIDX] != SL0TW00.SL8WONBR)
          SL0T163(); /* check wohdr01 print flag*/
          SL0TW00.SL8WONBR = SL0TW02.SL8WONBR[SL0TWIDX];
        end
      end
      SL0TW00.SL0TWIDX = SL0TW00.SL0TWIDX + 1;
    end

  end

  SL0T163(); /* check wohdr01 print flag*/

  if (SL0TW00.SL0TWPAG != SL0TW00.XXXTSPAG) /* current page*/

    SL0TW00.XXXTSPAG = SL0TW00.SL0TWPAG; /* reset page #*/

    SL0TS02(); /* read temporary storage*/

  end

end // end SL0T162

// Update work order print flag
Function SL0T163()
   /* ------------------------------------------------------------*/
   /* Update work order print flag*/

   /* We will update sl-wo-prt-fl (SL8WOPFL) on dstloc.vwophd01*/
   /* if all the sl-wo-crtn-prt-fl (SLMWCPFL) flags on*/
   /* dstloc.vwopit01 were all equal to 'Y'es.  The SL8WOPFL on*/
   /* dstloc.vwophd01 will be updated to 'Y'es.*/
   /* ------------------------------------------------------------*/

  set SLMREC empty;

  SL0TW00.SL0TWPFL = " "; /* initialize flag - spaces for 'Y'es*/

  SLMREC.XWHCD = SL0TW01.XWHCD;
  SLMREC.SL8WONBR = SL0TW00.SL8WONBR;

  SL0TS07(); /* s1 vwopit01*/

  SL0TS08(); /* n1 vwopit01*/

  while (SQLCA.VAGen_SQLCODE == 0) /* check sl-wo-crtn-prt-fl*/

    if (SLMREC.SLMWCPFL != "Y") /* if sl-wo-crtn-prt-fl NE 'Y'*/
      SL0TW00.SL0TWPFL = "Y"; /* move 'Y' to print check flag*/
    end

    SL0TS08(); /* n1 vwopit01*/

  end

  SL0TS09(); /* c1 vwopit01*/

  if (SL0TW00.SL0TWPFL == " ") /* if all the sl-wo-crt-prt-fl = 'y'*/
    set SLLREC empty;

    SLLREC.XWHCD = SL0TW01.XWHCD;
    SLLREC.SL8WONBR = SL0TW00.SL8WONBR;

    SL0TS21(); /* s1 vwophd01*/

    SLLREC.SL8WOPFL = "Y"; /* set sl-wo-prt-fl to 'Y'es*/

    SL0TS12(); /* u  vwophd01*/
  end

end // end SL0T163

// Inquire/maintain a table row
Function SL0T200()
   /* ------------------------------------------------------------*/
                    /* sl0tm002 main process*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SL0T210(); /* Obtain the data to display*/

  SL0T220(); /* Format and display the map*/

  SL0T230(); /* Check attention identifier*/

  SL0T240(); /* Reset fields to normal intensity*/

  SL0T250(); /* Verify the entered data*/

  SL0T260(); /* Process valid input request*/

end // end SL0T200

// Obtain the data to display
Function SL0T210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SL0TW00.SL0TWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  SL0TS01(); /* Purge any temporary storage*/

  SL0TW00.SL0TWIDX = 1; /* init index*/

  set SLOREC empty; /* init dstloc.vwophd02 record*/

   /* -----------------------------------------------*/
   /* load dstloc.vwophd02 key fields*/
   /* -----------------------------------------------*/

  SLOREC.XWHCD = SL0TW01.XWHCD;
  SLOREC.XGPCD = SL0TW01.XGPCD;
  SLOREC.SY1STNBR = SL0TW01.SY1STNBR;
  SLOREC.SY2CLRID = SL0TW01.SY2CLRID;
  SLOREC.SY5SZID = SL0TW01.SY5SZID;
  SL0TW01.SL0TMRPT = "N"; /* move 'n' to reprint flag*/

  SL0TS22(); /* select set on dstloc.vwoph*/

  SL0T211(); /* get next usable vwophd02 r*/

  while (SQLCA.VAGen_SQLCODE == 0) /* until eof dstloc.vwophd02*/

    /* ------------------------------------------------------------*/
     /* move all fields from record to ts record*/
    /* ------------------------------------------------------------*/

    SL0TSB2(); /* move fields to ts record*/

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (SL0TW00.SL0TWIDX == 11) /* Page is full*/
      SL0TW02.SL0TWNLD = SL0TW00.SL0TWIDX; /* nbr of lines loaded*/
      SL0TS03(); /* Add page to temp storage*/
    else
      SL0TW00.SL0TWIDX = SL0TW00.SL0TWIDX + 1;
    end

    SL0T211(); /* get next usable vwophd02 ro*/
    SL0TW00.SL0TWPIX = SL0TW00.SL0TWPIX + 1;

  end

  SL0TS24(); /* close dstloc.vwophd02 set*/

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (SL0TW00.SL0TWIDX > 1) /* Page was formatted*/
    SL0TW02.SL0TWNLD = SL0TW00.SL0TWIDX - 1;
    SL0TS03(); /* Add page to temp storage*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (SL0TW00.TA5TSQIX == 0) /* No pages formatted*/

    COMMAREA.CATOAP = "SL0U";
    COMMAREA.CAMSG = "NO DATA FOUND ON SL0T ";

    XSSL001(); /* exit to another application*/

    SL0TW00.SL0TWSWR = "N";
    SL0TW00.SL0TWSWF = "Y";

    exit stack; /* Exit to continue processing*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SL0TW00.XXXTSPAG = 1; /* Desired page number*/
  SL0TW00.SL0TWSWR = "N"; /* Request for data switch*/
  SL0TW00.SL0TWDLF = "Y"; /* data loaded switch*/

end // end SL0T210

// get next usable vwophd02 row
Function SL0T211()
   /* ------------------------------------------------------------*/
   /* get the next usable dstloc.vwophd02.*/
     /* exclude rows if quality code is '02*/
     /* exclude rows whose plan status eq 'rc'*/
   /* ------------------------------------------------------------*/

  SL0TW00.SL0TWRFD = "N"; /* indicate row was found*/

  while (SL0TW00.SL0TWRFD != "Y") /* until usable row is found*/

    SL0TS23(); /* fetch next dstloc.vwophd02 row*/

    if (SQLCA.VAGen_SQLCODE != 0)
      return;
    end

    /* ------------------------------------------------------------*/
     /* exclude rows if quality code is '02*/
    /* ------------------------------------------------------------*/

    if (SLOREC.XQACD == "02")
       /* next sentence*/
    else
      set SWEREC empty;
      SWEREC.XWHCD = SL0TW01.XWHCD;
      SWEREC.SWEPLLNB = SLOREC.SWEPLLNB;

      SL0TS10(); /* select dstloc.vplnhd01*/

      if (SQLCA.VAGen_SQLCODE == 0)
        if (SWEREC.XRPCD == "RC")
           /* next sentence*/
        else
          SL0TW00.SL0TWRFD = "Y"; /* indicate row was found*/
        end
      end
    end
  end

end // end SL0T211

// Format and converse the map
Function SL0T220()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SL0TW00.SL0TWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SL0TW00.SL0TWSWF == "Y") /* Map must be formatted*/

      SL0T221(); /* Format the data on the map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format page, date, and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  if (SL0TW00.TA5TSQIX > 0)
    SL0TM002.XXXTSPAG = SL0TW00.XXXTSPAG; /* Current page*/
    SL0TM002.TA5TSQIX = SL0TW00.TA5TSQIX; /* max pages*/
  end

  SL0TM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SL0TM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SL0TM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SL0TM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SL0TM002.XXXLOCID = SLWREC.XXXLOCID; /* Module identification*/

    set SL0TM002 alarm; /* Indicate sound alarm*/

  end

  converse SL0TM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SL0TM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SL0TM002.CAITEM; /* Application data*/


end // end SL0T220

// Format the display data
Function SL0T221()

   /* ------------------------------------------------------------*/
   /* init map sl0tm002*/
   /* ------------------------------------------------------------*/

  set SL0TM002 initial; /* m002 input/ouput area*/

  SL0TW00.SL0TWSWF = "N"; /* format map switch*/

   /* ------------------------------------------------------------*/
   /* Format sl0tm002 using passed data*/
   /* ------------------------------------------------------------*/

  SL0TM002.XWHCD = SL0TW01.XWHCD;
  SL0TM002.XWHSABRV = SL0TW01.XWHSABRV;
  SL0TM002.XGPCD = SL0TW01.XGPCD;
  SL0TM002.SY1STNBR = SL0TW01.SY1STNBR;
  SL0TM002.SY2CLRID = SL0TW01.SY2CLRID;
  SL0TM002.SL0TMSIZ = SL0TW01.SL0TMSIZ;
  SL0TM002.SL0TMRPT = SL0TW01.SL0TMRPT;
  SL0TM002.SL0TMPGN = SL0TW01.SL0TMPGN;
  SL0TM002.XROPDEST = SL0TW01.XROPDEST;

   /* ------------------------------------------------------------*/
   /* if data has not been loaded bypass load map fields*/
   /* ------------------------------------------------------------*/

  if (SL0TW00.SL0TWDLF != "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* load map using sl0tw01 work record*/
   /* ------------------------------------------------------------*/

  SL0TW00.SL0TWIDX = 1;

  SL0TS02(); /* read temporary storage*/

  while (SL0TW00.SL0TWIDX <= 11) /* process temp*/
    if (SL0TW00.SL0TWIDX <= SL0TW02.SL0TWNLD) /* process temp*/

      SL0TSB4(); /* format detail fields*/

    else
      set SL0TM002.SL0TMSEL[SL0TWIDX] initialAttributes;
    end
    SL0TM002.SL0TMSEL[SL0TWIDX] = " ";
    SL0TW00.SL0TWIDX = SL0TW00.SL0TWIDX + 1; /* increment load*/

  end

  if (SL0TW02.SL0TWNLD == 1 /* only one line to display*/
   && SL0TW00.XXXTSPAG == 1) /* only one page to display*/
    SL0TM002.SL0TMSEL[1] = "S";
  end

end // end SL0T221

// Check attention identifier
Function SL0T230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* refresh map*/

    set SL0TW01 empty; /* clear keys*/

    SL0TW01.XWHCD = COMMAREA.XWHCD;
    if (COMMAREA.XWHCD in XWHTBL.XWHCD)
      SL0TW01.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    end
    if (COMMAREA.XWHCD == "51")
      SL0TW01.XGPCD = "03";
    else
      SL0TW01.XGPCD = "02";
    end
    SL0TW01.SL0TMPGN = "00";
    SL0TW01.SL0TMRPT = "N";

    SL0TW00.SL0TWSWR = "N"; /* request for data*/
    SL0TW00.SL0TWDLF = "N"; /* data loaded flag*/
    SL0TW00.SL0TWSWF = "Y"; /* format screen m002*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SL0TM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SL0TS01(); /* purge temp storage*/

      XSSL001(); /* Exit to another application*/

      SL0TW00.SL0TWSWR = "N"; /* request for data*/
      SL0TW00.SL0TWSWF = "Y"; /* format screen m002*/
      SL0TW00.SL0TWDLF = "N"; /* data loaded flag*/

      set SL0TM002.CATOAP cursor, bold; /* Highlight*/

    else

      SLWREC.XXXLOCID = "230"; /* Module identification*/
      converseLib.validationFailed(258); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf15) /* or PF15 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SL0TM002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SW0R"; /* Application find code*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* Application find code*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* Application find code*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "SL0U"; /* Application find code*/
    end

    SL0TS01(); /* purge temp storage*/

    XSSL001(); /* Exit to another application*/

    SL0TW00.SL0TWSWR = "N"; /* request for data*/
    SL0TW00.SL0TWSWF = "Y"; /* format screen m002*/
    SL0TW00.SL0TWDLF = "N"; /* data loaded flag*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf6   /* pf6 was not pressed*/
   && converseVar.eventKey not pf7   /* pf7 was not pressed*/
   && converseVar.eventKey not pf8   /* pf8 was not pressed*/
   && converseVar.eventKey not pf13) /* pf13 was not pressed*/

    SLWREC.XXXLOCID = "230"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

  if (converseVar.eventKey is pf13)

    SL0TW00.SL0TWMSW = "1";

    SL0TS01(); /* purge temp storage*/

    SL0TSB7(); /* clear the keys*/

    converseLib.clearScreen();
     /* Clear screen before display*/

    SL0TW00.SL0TWSWR = "N"; /* request for data*/
    SL0TW00.SL0TWSWF = "Y"; /* format screen m001*/
    SL0TW00.SL0TWDLF = "N"; /* data loaded flag*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/
  end



end // end SL0T230

// Reset highlighted fields
Function SL0T240()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SL0TM002.XWHCD initialAttributes; /* WHSE CODE*/
  set SL0TM002.XGPCD initialAttributes; /* gpc code*/
  set SL0TM002.SY1STNBR initialAttributes; /* style nbr*/
  set SL0TM002.SY2CLRID initialAttributes; /* color id*/
  set SL0TM002.SL0TMSIZ initialAttributes; /* size id*/
  set SL0TM002.SL0TMRPT initialAttributes; /* reprint*/
  set SL0TM002.SL0TMPGN initialAttributes; /* generation*/
  set SL0TM002.XROPDEST initialAttributes; /* printer*/
  set SL0TM002.CAITEM initialAttributes; /* item*/

  SL0TW00.SL0TWIDX = 1;

  while (SL0TW00.SL0TWIDX <= 11
   && SL0TM002.SL0TMCTN[SL0TWIDX] > 0)
    set SL0TM002.SL0TMSEL[SL0TWIDX] normal;
    SL0TW00.SL0TWIDX = SL0TW00.SL0TWIDX + 1;
  end

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SL0TM002.XWHCD == "?" /* WAREHOUSE CODE*/
   || SL0TM002.XGPCD == "?") /* gpc code*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      SLWREC.XXXLOCID = "240"; /* Module identification*/
      converseLib.validationFailed(264);
                                   /* Indicate PF key not valid press enter*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of whse codes*/
   /* ------------------------------------------------------------*/

  if (SL0TM002.XWHCD == "?") /* warehouse codes*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "WAREHOUSE CODES "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      SL0TM002.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected*/
      SL0TM002.XWHSABRV = XWHTBL.XWHSABRV[XX0XWPIX];

    end

    set SL0TM002.XWHCD cursor; /* Establish cursor position*/

  end


   /* ------------------------------------------------------------*/
   /* If requested, display the list of group codes*/
   /* ------------------------------------------------------------*/

  if (SL0TM002.XGPCD == "?") /* warehouse codes*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "GROUP CODES "; /* Heading*/

    XX0XW02.XGPCD = COMMAREA.XGPCD;
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXGP01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* No selection made*/

      SL0TM002.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* Selected*/

    end

    set SL0TM002.XWHCD cursor; /* Establish cursor position*/

  end


   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before displa*/

  SLWREC.XXXLOCID = "240"; /* Module identification*/
  converseLib.validationFailed(241); /* Indicate press ENTER*/

  exit stack; /* Exit to display map*/


end // end SL0T240

// Verify the entered data
Function SL0T250()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "250"; /* Module identification*/
    set SL0TM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(2); /* Enter only with FAST PATH*/
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* check for new key*/
   /* ------------------------------------------------------------*/

  SL0TSB5(); /* same key edits*/

  if (SLWREC.SLWSKYSW != "Y")
    SL0TM002.XWHSABRV = " ";
    SL0TW00.SL0TWDLF = "N";
  end

   /* ------------------------------------------------------------*/
   /* check pfkey*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)
    if (SLWREC.SLWSKYSW != "Y")
      SL0T252(); /* validate key fields*/
      if (converseVar.validationMsgNum == 0)
        SL0TW00.SL0TWSWR = "Y"; /* request for data*/
      end
    else
      SL0T253(); /* verify print request*/
    end
  else
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      SL0T251(); /* validate scroll request*/
    else
      if (converseVar.eventKey is pf6)
        SL0T253(); /* verify print request*/
      end
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end

end // end SL0T250

// validate key fields
Function SL0T251()
   /* ------------------------------------------------------------*/
   /* If key has changed, error*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWSKYSW != "Y") /* key has changed*/

    SLWREC.XXXLOCID = "251"; /* Module identification*/
    converseLib.validationFailed(5); /* change the key on enter*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && SL0TW00.XXXTSPAG < 2)       /* and no previous pages*/

    SLWREC.XXXLOCID = "251"; /* Module identification*/
    converseLib.validationFailed(7); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && SL0TW00.XXXTSPAG >= SL0TW00.TA5TSQIX) /* and no more pages*/

    SLWREC.XXXLOCID = "251"; /* Module identification*/
    converseLib.validationFailed(8); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll request, ensure that rows were not selected.*/
   /* ------------------------------------------------------------*/

  SL0TW00.SL0TWIDX = 11;

  while (SL0TW00.SL0TWIDX > 0) /* until end of lines*/

    if (SL0TM002.SL0TMSEL[SL0TWIDX] > " ")
      set SL0TM002.SL0TMSEL[SL0TWIDX] cursor, bold;
      SLWREC.XXXLOCID = "251"; /* Module identification*/
      converseLib.validationFailed(18); /* selection with enter only*/
    end
    SL0TW00.SL0TWIDX = SL0TW00.SL0TWIDX - 1;
  end

end // end SL0T251

// Verify the Entered Data
Function SL0T252()
   /* ------------------------------------------------------------*/
   /* verify the entered data*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* if the key hasn't changed, error*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWSKYSW == "Y")
    SLWREC.XXXLOCID = "252";
    converseLib.validationFailed(5); /* change the key*/
    return;
  end


   /* ------------------------------------------------------------*/
   /* verify reprint and generation fields*/
   /* ------------------------------------------------------------*/

  if (SL0TM002.SL0TMPGN == "00"
   || SL0TM002.SL0TMPGN == "-1"
   || SL0TM002.SL0TMPGN == "-2")
     /* next sentence*/
  else
    SLWREC.XXXLOCID = "252";
    set SL0TM002.SL0TMPGN cursor, bold;
    converseLib.validationFailed(11); /* required field*/
  end

  if (SL0TM002.SL0TMRPT == "Y"
   || SL0TM002.SL0TMRPT == "N")
     /* next sentence*/
  else
    SLWREC.XXXLOCID = "252";
    set SL0TM002.SL0TMRPT cursor, bold;
    converseLib.validationFailed(11); /* required field*/
  end

   /* ------------------------------------------------------------*/
   /* check required key fields*/
   /* ------------------------------------------------------------*/

  if (SL0TM002.SL0TMSIZ <= " ")
    SLWREC.XXXLOCID = "252";
    set SL0TM002.SL0TMSIZ cursor, bold;
    converseLib.validationFailed(9); /* field is required*/
  end

  if (SL0TM002.SY2CLRID <= " ")
    SLWREC.XXXLOCID = "252";
    set SL0TM002.SY2CLRID cursor, bold;
    converseLib.validationFailed(9); /* field is required*/
  end

  if (SL0TM002.SY1STNBR <= " ")
    SLWREC.XXXLOCID = "252";
    set SL0TM002.SY1STNBR cursor, bold;
    converseLib.validationFailed(9); /* field is required*/
  end

   /* ------------------------------------------------------------*/
   /* check gpc code*/
   /* ------------------------------------------------------------*/

  if (SL0TM002.XGPCD > " ")
    if (SL0TM002.XGPCD in XGPTBL.XGPCD)
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        SLWREC.XXXLOCID = "252";
        set SL0TM002.XGPCD cursor, bold;
        converseLib.validationFailed(010); /* status is inactive*/
      end
    else
      SLWREC.XXXLOCID = "252";
      set SL0TM002.XGPCD cursor, bold;
      converseLib.validationFailed(011); /* invalid value*/
    end
  else
    SLWREC.XXXLOCID = "252";
    set SL0TM002.XGPCD cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* check warehouse code*/
   /* ------------------------------------------------------------*/

  if (SL0TM002.XWHCD > " ")
    if (SL0TM002.XWHCD in XWHTBL.XWHCD)
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        SL0TW01.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
        SL0TW01.XWHCD = SL0TM002.XWHCD;
      else
        SLWREC.XXXLOCID = "252";
        set SL0TM002.XWHCD cursor, bold;
        converseLib.validationFailed(010); /* status is inactive*/
      end
    else
      SLWREC.XXXLOCID = "252";
      set SL0TM002.XWHCD cursor, bold;
      converseLib.validationFailed(011); /* invalid value*/
    end
  else
    SLWREC.XXXLOCID = "252";
    set SL0TM002.XWHCD cursor, bold;
    converseLib.validationFailed(009); /* required field*/
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* validate gpc, style and color*/
   /* against dprod.vcolor02*/
   /* ------------------------------------------------------------*/

  set SYCREC empty;
  SYCREC.XGPCD = SL0TM002.XGPCD;
  SYCREC.SY1STNBR = SL0TM002.SY1STNBR;
  SYCREC.XDMCD = " ";
  SYCREC.SY2CLRID = SL0TM002.SY2CLRID;

  SL0TS15(); /* sel set dprod.vcolor02*/

  SL0TS16(); /* fetch dprod.vcolor02*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    SLWREC.XXXLOCID = "252";
    set SL0TM002.XGPCD cursor, bold;
    set SL0TM002.SY1STNBR bold;
    set SL0TM002.SY2CLRID bold;
    converseLib.validationFailed(56); /* invalid style/color*/
  end

  SL0TS17(); /* close dprod.vcolor02*/

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* validate size and convert it to internal*/
   /* ------------------------------------------------------------*/

  SL0TSB6(); /* convert size*/

  if (SYPREC.SYPRC == 0) /* size is ok*/
    SL0TW01.SY5SZID = SYPREC.SY5SZID[1];
    SL0TW01.SY4IDDSC = SL0TM002.SL0TMSIZ;
  else
    if (SYPREC.SYPRC == 10 /* invalid size*/
     || SYPREC.SYPRC == 02) /* invalid size*/
      SLWREC.XXXLOCID = "252";
      set SL0TM002.SL0TMSIZ cursor, bold;
      converseLib.validationFailed(11); /* size is invalid*/
    end
  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end


  SL0TW01.XWHCD = SL0TM002.XWHCD;
  COMMAREA.XWHCD = SL0TM002.XWHCD;
  SL0TW01.XGPCD = SL0TM002.XGPCD;
  SL0TW01.SY1STNBR = SL0TM002.SY1STNBR;
  SL0TW01.SY2CLRID = SL0TM002.SY2CLRID;
  SL0TW01.SL0TMSIZ = SL0TM002.SL0TMSIZ;
  SL0TW01.SL0TMRPT = SL0TM002.SL0TMRPT;
  SL0TW01.SL0TMPGN = SL0TM002.SL0TMPGN;
  SL0TW01.XROPDEST = SL0TM002.XROPDEST;

end // end SL0T252

// verify print request
Function SL0T253()
   /* ------------------------------------------------------------*/
   /* If key has changed, error*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWSKYSW != "Y") /* key has changed*/

    SLWREC.XXXLOCID = "253"; /* Module identification*/
    converseLib.validationFailed(219); /* cannot change key*/

  else

    /* ------------------------------------------------------------*/
     /* if no data was displayed last time*/
    /* ------------------------------------------------------------*/

    if (SL0TW00.TA5TSQIX < 1) /* no data*/

      SLWREC.XXXLOCID = "253"; /* Module identification*/
      converseLib.validationFailed(5); /* change the keys*/

    end
  end

   /* ------------------------------------------------------------*/
   /* verify selected rows*/
   /* ------------------------------------------------------------*/

  SL0TW00.SL0TWPIX = SL0TW02.SL0TWNLD; /* nbr lines on page*/
  SL0TW00.SL0TWLSL = 0; /* nbr of lines selected*/
  SL0TW00.PKDNCSQN = 0; /* pkg seq nbr*/
  SL0TW00.SL8WOGRP = 0; /* work order group*/
  SL0TW00.SL8WONBR = 0; /* work order number*/
  SL0TW00.SL0TWPLN = 0; /* rcv plan number*/
  SL0TW00.TSHCNTNR = " "; /* container number*/

  while (SL0TW00.SL0TWPIX > 0)

    if (SL0TM002.SL0TMSEL[SL0TWPIX] > " ")
      if (SL0TM002.SL0TMSEL[SL0TWPIX] == "S")
        SL0TW00.SL0TWLSL = SL0TW00.SL0TWLSL + 1; /* nbr of lines selected*/
        if (SL0TW00.PKDNCSQN == 0) /* first selected line*/
          SL0TW00.PKDNCSQN = SL0TW02.PKDNCSQN[SL0TWPIX];
          SL0TW00.SLMWCPFL = SL0TW02.SLMWCPFL[SL0TWPIX];
          SL0TW00.SL0TWPLN = SL0TW02.SWEPLLNB[SL0TWPIX];
          SL0TW00.TSHCNTNR = SL0TW02.TSHCNTNR[SL0TWPIX];
          SL0TW00.SL8WOGRP = SL0TW02.SL8WOGRP[SL0TWPIX];
          SL0TW00.SL8WONBR = SL0TW02.SL8WONBR[SL0TWPIX];
        else
          if (SL0TW00.PKDNCSQN != SL0TW02.PKDNCSQN[SL0TWPIX])
            set SL0TM002.SL0TMSEL[SL0TWPIX] cursor, bold;
            SLWREC.XXXLOCID = "253"; /* Module identification*/
            converseLib.validationFailed(276); /* crtns dont have same crtn seq*/
          end
        end
      else
        set SL0TM002.SL0TMSEL[SL0TWPIX] cursor, bold;
        SLWREC.XXXLOCID = "253"; /* Module identification*/
        converseLib.validationFailed(17); /* invalid value*/
      end
    end
    SL0TW00.SL0TWPIX = SL0TW00.SL0TWPIX - 1;

  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

  if (SL0TW00.SL0TWLSL == 0)
    SLWREC.XXXLOCID = "253"; /* Module identification*/
    converseLib.validationFailed(240); /* select a row*/
  else
    if (converseVar.eventKey is enter)
      SLWREC.XXXLOCID = "253"; /* Module identification*/
      converseLib.validationFailed(3); /* selection valid with pf6*/
    end
  end

  if (SL0TW00.SLMWCPFL == "Y" /* label already printed*/
   && SL0TM002.SL0TMRPT != "Y") /* reprint flag*/
    SLWREC.XXXLOCID = "253"; /* Module identification*/
    set SL0TM002.SL0TMRPT cursor, bold;
    converseLib.validationFailed(277); /* label already printed*/
  end


end // end SL0T253

// Process valid input request
Function SL0T260()

  SL0TW00.SL0TWSWF = "Y"; /* format map 002*/

  SL0TW01.XROPDEST = SL0TM002.XROPDEST; /* move print dest*/

   /* ------------------------------------------------------------*/
   /* request to scroll backwards*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* display next season*/
    SL0TW00.XXXTSPAG = SL0TW00.XXXTSPAG - 1;
    return;
  end

   /* ------------------------------------------------------------*/
   /* request to scroll foward*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* display next season*/
    SL0TW00.XXXTSPAG = SL0TW00.XXXTSPAG + 1;
    return;
  end

   /* ------------------------------------------------------------*/
   /* pf6 crt lbl has been requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6) /* print option*/

    SL0T161(); /* format/submit batch job*/

    SL0T262(); /* update print flags*/

    SL0TW00.SL0TWIDX = 1;
    while (SL0TW00.SL0TWIDX <= 11)
      SL0TM002.SL0TMSEL[SL0TWIDX] = " ";
      SL0TW00.SL0TWIDX = SL0TW00.SL0TWIDX + 1;
    end

    SL0TM002.XROPDEST = SL0TW01.XROPDEST; /* move print dest*/
    SL0TW01.SL0TMRPT = "N"; /* reset reprint flag*/
    SL0TM002.SL0TMRPT = "N"; /* reset reprint flag*/

  end


end // end SL0T260

// Update print flags
Function SL0T262()
   /* ------------------------------------------------------------*/
   /* Update print flags*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get current date and time*/

  SL0TW00.SWEPLLNB = 0;
  SL0TW00.SL0TWIDX = 1;

  while (SL0TW00.SL0TWIDX <= SL0TW02.SL0TWNLD) /* lines per page*/

    set SLOREC empty;

    SLOREC.XWHCD = SL0TW01.XWHCD;
    SLOREC.SL8WONBR = SL0TW00.SL8WONBR;
    SLOREC.PKDNCSQN = SL0TW00.PKDNCSQN;

    SL0TS25(); /* sel set vwophd02*/

    SL0TS26(); /* fetch vwophd02 row*/

    while (SQLCA.VAGen_SQLCODE == 0)

      if (SLOREC.SLMWCPFL != "Y")

        SL0TS20(); /* select vwopit01*/

        SL0TS13(); /* update vwopit01*/

        if (SL0TW02.SWEPLLNB[SL0TWIDX] != SL0TW00.SWEPLLNB)
          set SWEREC empty;
          SWEREC.XWHCD = SL0TW01.XWHCD;
          SWEREC.SWEPLLNB = SL0TW02.SWEPLLNB[SL0TWIDX];

          SL0TS10(); /* s1 plan header*/

          if (SWEREC.XRPCD != "IP")
            SL0TS19(); /* update plan header*/
          end

          SL0TW00.SWEPLLNB = SL0TW02.SWEPLLNB[SL0TWIDX];
        end

      end

      SL0TS26(); /* fetch vwophd02 row*/

    end

    SL0TS27(); /* close vwophd02*/

    SL0T163(); /* check wohdr01 print flag*/

    SL0TW00.SL0TWIDX = SL0TW00.SL0TWIDX + 1; /* increment line index*/

  end
end // end SL0T262

// purge temporary storage
Function SL0TS01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SL0TW02 empty; /* temporary storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SL0TW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SL0TW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S01"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0TS01

// read temporary storage
Function SL0TS02()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  SL0TW02.XXXTSLEN = SL0TW00.XXXTSLEN;
  TA5REC.TA5TSQIX = SL0TW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SL0TW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S02"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0TS02

// add temporary storage
Function SL0TS03()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  SL0TW02.XXXTSLEN = SL0TW00.XXXTSLEN;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (SL0TW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set SL0TW02 empty; /* M001 display storage*/

    SL0TW00.SL0TWIDX = 1; /* Display line index*/

    SL0TW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S03"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0TS03

// select 's4' dstloc.vwophd02
Function SL0TS04()
   /* ------------------------------------------------------------*/
   /* key fields are loaded in the calling process*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* select set from dstloc.vwophd02*/
   /* ------------------------------------------------------------*/
  set SLSREC empty;
  SLSREC.SLSFNC = "S4";

  try
    call "IO5460" (SLSREC, SQLCA, SLOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S04"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S1 ON DSTLOC.VWOPHD02";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD02"; /* Table view name*/
   /* MOVE SWFREC.SWFKEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0TS04

// fetch 'n4' dstloc.vwophd02
Function SL0TS05()
   /* ------------------------------------------------------------*/
   /* fetch next row vwophd02*/
   /* ------------------------------------------------------------*/
  SLSREC.SLSFNC = "N4";

  try
    call "IO5460" (SLSREC, SQLCA, SLOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S05"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH DSTLOC.VWOPHD02 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD02"; /* Table view name*/
   /* MOVE SWFREC.SWFKEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0TS05

// c4 dstloc.vwophd02
Function SL0TS06()
   /* ------------------------------------------------------------*/
   /* close dstloc.vwophd02 cursor.*/
   /* ------------------------------------------------------------*/
  SLSREC.SLSFNC = "C4";

  try
    call "IO5460" (SLSREC, SQLCA, SLOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  SLWREC.XXXLOCID = "S06"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C1 DSTLOC.VWOPHD02";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD02"; /* Table view name*/
   /* MOVE SWFREC.SWFKEY TO TA1REC.TA1TBLKE  ; table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0TS06

// select 's1' dstloc.vwopit01
Function SL0TS07()
   /* ------------------------------------------------------------*/
   /* key fields are loaded in the calling process*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* select set dstloc.vwopit01*/
   /* ------------------------------------------------------------*/

  try
    call "IO5410" ("S2", SQLCA, SLMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S07"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S1 ON DSTLOC.VWOPIT01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPIT01"; /* Table view name*/
   /* MOVE SLMREC.SLMKEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0TS07

// fetch 'n1' dstloc.vwopit01
Function SL0TS08()
   /* ------------------------------------------------------------*/
   /* fetch dstloc.vwopit01 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO5410" ("N2", SQLCA, SLMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S08"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DSTLOC.VWOPIT01 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPIT01"; /* Table view name*/
   /* MOVE slmrec.SLLKEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0TS08

// close 'c1' dstloc.vwopit01
Function SL0TS09()
   /* ------------------------------------------------------------*/
   /* close dstloc.vwopit01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5410" ("C2", SQLCA, SLMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  SLWREC.XXXLOCID = "S09"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C1 DSTLOC.VWOPIT01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPIT01"; /* Table view name*/
   /* MOVE slmrec.SLLKEY TO TA1REC.TA1TBLKE  ; table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0TS09

// select 's' dstloc.vplndr01
Function SL0TS10()

   /* ------------------------------------------------------------*/
   /* obtain pln hdr from dstloc.vplndr01*/
   /* ------------------------------------------------------------*/

  try
    call "IO5350" ("S ", SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select s*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before displa*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DSTLOC.VPLNDR01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0TS10

// update dstloc.vwophd01
Function SL0TS12()
   /* ------------------------------------------------------------*/
   /* update dstloc.vwophd01*/
   /* ------------------------------------------------------------*/

  SLLREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  SLLREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO5400" ("U ", SQLCA, SLLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      SL0TW00.SL0TWSWR = "Y"; /* Request for data switch*/

      SLWREC.XXXLOCID = "S12"; /* Module identification*/
      converseLib.validationFailed(32); /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "S12"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE DSTLOC.VWOPHD01 TABLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SLLREC.SLLKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0TS12

// update dstloc.vwopit01 row
Function SL0TS13()
   /* ------------------------------------------------------------*/
   /* update dstloc.vwopit01*/
   /* ------------------------------------------------------------*/

  SLMREC.SLMWCPFL = "Y";

  SLMREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  SLMREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO5410" ("U ", SQLCA, SLMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      SL0TW00.SL0TWSWR = "Y"; /* Request for data switch*/

      SLWREC.XXXLOCID = "S13"; /* Module identification*/
      converseLib.validationFailed(32); /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "S13"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE DSTLOC.VWOPIT01 TABLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = SLMREC.SLMKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0TS13

// select 's' dprodc.vpohdr01
Function SL0TS14()

   /* ------------------------------------------------------------*/
   /* obtain po hdr from dprodc.vpohdr01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3270" ("S ", SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select s*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S14"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before displa*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DPRODC.VPOHDR01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0TS14

// select 'ss' dprod.vcolor02
Function SL0TS15()
   /* ------------------------------------------------------------*/
   /* key fields are loaded in the calling process*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* select set dprod.vcolor02*/
   /* ------------------------------------------------------------*/

  try
    call "IO0560" ("SS", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S15"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SS ON DPROD.VCOLOR02";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCOLOR02"; /* Table view name*/
   /* MOVE SLMREC.SLMKEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0TS15

// fetch 'sn' dprod.vcolor02
Function SL0TS16()
   /* ------------------------------------------------------------*/
   /* fetch dprod.vcolor02 row*/
   /* ------------------------------------------------------------*/

  try
    call "IO0560" ("SN", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S16"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N1 DPROD.VCOLOR02 ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCOLOR02"; /* Table view name*/
   /* MOVE SLLREC.SLLKEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0TS16

// close 'cs' dprod.vcolor02
Function SL0TS17()
   /* ------------------------------------------------------------*/
   /* close dprod.vplcpo01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0560" ("CS", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  SLWREC.XXXLOCID = "S09"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE S1 DPROD.VCOLOR02";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCOLOR02"; /* Table view name*/
   /* MOVE SLLREC.SLLKEY TO TA1REC.TA1TBLKE  ; table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0TS17

// update dstloc.vplnhd01
Function SL0TS19()
   /* ------------------------------------------------------------*/
   /* update dstloc.vplnhd01*/
   /* ------------------------------------------------------------*/

  SWEREC.XRPCD = "IP";

  SWEREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  SWEREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  try
    call "IO5350" ("U ", SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      SL0TW00.SL0TWSWR = "Y"; /* Request for data switch*/

      SLWREC.XXXLOCID = "S19"; /* Module identification*/
      converseLib.validationFailed(32); /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "S19"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE DSTLOC.VPLNHD01 TABLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/
   /* MOVE swerec.SLLKEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0TS19

// select 's' dstloc.vwopit01
Function SL0TS20()
   /* ------------------------------------------------------------*/
   /* obtain work order item from dstloc.wopit01*/
   /* ------------------------------------------------------------*/

  SLMREC.XWHCD = SL0TW01.XWHCD;
  SLMREC.PKDNCSQN = SL0TW02.PKDNCSQN[SL0TWIDX];
  SLMREC.SL8WONBR = SL0TW02.SL8WONBR[SL0TWIDX];
  SLMREC.SY5SZID = SL0TW02.SY5SZID[SL0TWIDX];

  try
    call "IO5410" ("S ", SQLCA, SLMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select s*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S20"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before displa*/
    converseLib.clearScreen();
     /* Clear screen before displa*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DSTLOC.VWOPIT01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPIT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0TS20

// select 's' dstloc.vwophd01
Function SL0TS21()

   /* ------------------------------------------------------------*/
   /* select 's' dstloc.vwophd01*/
   /* ------------------------------------------------------------*/

  try
    call "IO5400" ("S ", SQLCA, SLLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select s*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S21"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before displa*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT DSTLOC.VWOPHD01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0TS21

// select 's5' dstloc.vwophd02
Function SL0TS22()
   /* ------------------------------------------------------------*/
   /* key fields are loaded in the calling process*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* select set from dstloc.vwophd02*/
   /* ------------------------------------------------------------*/
  set SLSREC empty;
  SLSREC.SLSFNC = "S5";

  try
    call "IO5460" (SLSREC, SQLCA, SLOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S22"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S5 ON DSTLOC.VWOPHD02";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD02"; /* Table view name*/
   /* MOVE SWFREC.SWFKEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0TS22

// fetch 'n5' of dsltoc.vwophd02
Function SL0TS23()
   /* ------------------------------------------------------------*/
   /* fetch next row vwophd02*/
   /* ------------------------------------------------------------*/
  SLSREC.SLSFNC = "N5";

  try
    call "IO5460" (SLSREC, SQLCA, SLOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S23"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "N5 DSTLOC.VWOPHD02 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD02"; /* Table view name*/
   /* MOVE SWFREC.SWFKEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0TS23

// c5 dstloc.vwophd02
Function SL0TS24()
   /* ------------------------------------------------------------*/
   /* close dstloc.vwophd02 cursor.*/
   /* ------------------------------------------------------------*/
  SLSREC.SLSFNC = "C5";

  try
    call "IO5460" (SLSREC, SQLCA, SLOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  SLWREC.XXXLOCID = "S24"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C5 DSTLOC.VWOPHD02";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD02"; /* Table view name*/
   /* MOVE SWFREC.SWFKEY TO TA1REC.TA1TBLKE  ; table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0TS24

// select 's6' dstloc.vwophd02
Function SL0TS25()
   /* ------------------------------------------------------------*/
   /* key fields are loaded in the calling process*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* select set from dstloc.vwophd02*/
   /* ------------------------------------------------------------*/
  set SLSREC empty;
  SLSREC.SLSFNC = "S6";

  try
    call "IO5460" (SLSREC, SQLCA, SLOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;

  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S25"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S6 ON DSTLOC.VWOPHD02";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD02"; /* Table view name*/
   /* MOVE SWFREC.SWFKEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0TS25

// fetch 'n6' of dstloc.vwophd02
Function SL0TS26()
   /* ------------------------------------------------------------*/
   /* fetch next row vwophd02*/
   /* ------------------------------------------------------------*/
  SLSREC.SLSFNC = "N6";

  try
    call "IO5460" (SLSREC, SQLCA, SLOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "S26"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "N6 DSTLOC.VWOPHD02 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD02"; /* Table view name*/
   /* MOVE SWFREC.SWFKEY TO TA1REC.TA1TBLKE  ; Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0TS26

// c6 dstloc.vwophd02
Function SL0TS27()
   /* ------------------------------------------------------------*/
   /* close dstloc.vwophd02 cursor.*/
   /* ------------------------------------------------------------*/
  SLSREC.SLSFNC = "C6";

  try
    call "IO5460" (SLSREC, SQLCA, SLOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  converseLib.validationFailed(1); /* error message*/
  SLWREC.XXXLOCID = "S27"; /* Module identification*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE C6 DSTLOC.VWOPHD02";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD02"; /* Table view name*/
   /* MOVE SWFREC.SWFKEY TO TA1REC.TA1TBLKE  ; table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0TS27

// same key edits
Function SL0TSB1()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (sl0tw00) ****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0TM001.XWHCD != SL0TW01.XWHCD) /* warehouse code*/
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0TM001.PC3PONBR != SL0TW01.PC3PONBR) /* po nbr*/
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0TM001.SL0TMPOI != SL0TW01.SL0TMPOI) /* po id*/
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0TM001.PC4ORTYP != SL0TW01.PC4ORTYP) /* type*/
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0TM001.TSOCRTNB != SL0TW01.TSOCRTNB) /* container nbr*/
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0TM001.XGPCD != SL0TW01.XGPCD) /* gpc code*/
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0TM001.SY1STNBR != SL0TW01.SY1STNBR) /* style nbr*/
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0TM001.SY2CLRID != SL0TW01.SY2CLRID) /* color*/
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0TSB1

// move fields to temp storage
Function SL0TSB2()


   /* ************************************************************/
   /* *** move individual fields from dstloc.vwophd02 to      ****/
   /* *** temporary storage sl0tw02.                          ****/
   /* ************************************************************/

  SL0TW02.XWHCD[SL0TWIDX] = SLOREC.XWHCD;
  SL0TW02.SL8WOGRP[SL0TWIDX] = SLOREC.SL8WOGRP;
  SL0TW02.SL8WONBR[SL0TWIDX] = SLOREC.SL8WONBR;
  SL0TW02.SWEPLLNB[SL0TWIDX] = SLOREC.SWEPLLNB;
  SL0TW02.TSHCNTNR[SL0TWIDX] = SLOREC.TSHCNTNR;
  if (SLOREC.XWHCD == "51")
    SL0TW02.PC3PONBR[SL0TWIDX] = SLOREC.PC3PONBR;
  else
    SWVREC.SWVWFNC = "ID";
    SWVREC.XGPCD = SLOREC.XGPCD;
    SWVREC.PC3PONBR = SLOREC.PC3PONBR;
    XSSLS10(); /* obtain po id*/
    if (SWVREC.SWVWRTN == 0)
      SL0TW02.SL0TMPOI[SL0TWIDX] = SWVREC.SWVWPOID;
    end
  end
  SL0TW02.PCFSECD[SL0TWIDX] = SLOREC.PCFSECD;
  SL0TW02.FY1FCTYC[SL0TWIDX] = SLOREC.FY1FCTYC;
  SL0TW02.XGPCD[SL0TWIDX] = SLOREC.XGPCD;
  SL0TW02.SY1STNBR[SL0TWIDX] = SLOREC.SY1STNBR;
  SL0TW02.SY2CLRID[SL0TWIDX] = SLOREC.SY2CLRID;
  SL0TW02.XDMCD[SL0TWIDX] = SLOREC.XDMCD;
  SL0TW02.XQACD[SL0TWIDX] = SLOREC.XQACD;
  SL0TW02.XOWCD[SL0TWIDX] = SLOREC.XOWCD;
  SL0TW02.PC2INSEG[SL0TWIDX] = SLOREC.PC2INSEG;
  SL0TW02.XEGCD[SL0TWIDX] = SLOREC.XEGCD;
  SL0TW02.XPGCD[SL0TWIDX] = SLOREC.XPGCD;
  SL0TW02.XUMCD[SL0TWIDX] = SLOREC.XUMCD;
  SL0TW02.SL8WOPFL[SL0TWIDX] = SLOREC.SL8WOPFL;
  SL0TW02.PKDNCSQN[SL0TWIDX] = SLOREC.PKDNCSQN;
  SL0TW02.TSOCRTNB[SL0TWIDX] = SLOREC.TSOCRTNB;
  SL0TW02.SL9WOQTY[SL0TWIDX] = SLOREC.SL9WOQTY;
  SL0TW02.SLMWCPFL[SL0TWIDX] = SLOREC.SLMWCPFL;

  if (SL0TW00.SL0TWMSW == "1") /* if m001 is displayed*/

    SL0TW02.SY5SZID[SL0TWIDX] = SLOREC.SY5SZID;

    SL0TSB8(); /* convert size to external*/

    if (SYPREC.SYPRC == 0)
      SL0TW02.SY4IDDSC[SL0TWIDX] = SYPREC.SY4IDDSC;
    else
      SL0TW02.SY4IDDSC[SL0TWIDX] = "*NF*";
    end
  else
    SL0TW02.SY5SZID[SL0TWIDX] = SL0TW01.SY5SZID;
    SL0TW02.SY4IDDSC[SL0TWIDX] = SL0TW01.SY4IDDSC;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0TSB2

// move fields from ts to map m1
Function SL0TSB3()


   /* ************************************************************/
   /* *** move individual fields from temp storage to map     ****/
   /* *** m001.                                               ****/
   /* ************************************************************/

  if (SL0TW00.SL0TWIDX == 1)
    set SL0TM001.SL0TMSEL[SL0TWIDX] cursor, normal;
  else
    set SL0TM001.SL0TMSEL[SL0TWIDX] normal;
  end

  SL0TM001.SL0TMPLN[SL0TWIDX] = SL0TW02.SWEPLLNB[SL0TWIDX];
  SL0TM001.SL0TMCNT[SL0TWIDX] = SL0TW02.TSHCNTNR[SL0TWIDX];
  SL0TM001.SL0TMGPC[SL0TWIDX] = SL0TW02.XGPCD[SL0TWIDX];
  SL0TM001.SL0TMSTY[SL0TWIDX] = SL0TW02.SY1STNBR[SL0TWIDX];
  SL0TM001.SL0TMCLR[SL0TWIDX] = SL0TW02.SY2CLRID[SL0TWIDX];
  SL0TM001.SL0TMDIM[SL0TWIDX] = SL0TW02.XDMCD[SL0TWIDX];
  SL0TM001.SL0TMQUA[SL0TWIDX] = SL0TW02.XQACD[SL0TWIDX];
  SL0TM001.SL0TMOGC[SL0TWIDX] = SL0TW02.XOWCD[SL0TWIDX];
  SL0TM001.SL0TMISG[SL0TWIDX] = SL0TW02.PC2INSEG[SL0TWIDX];
  SL0TM001.SL0TMPKG[SL0TWIDX] = SL0TW02.XPGCD[SL0TWIDX];
  SL0TM001.SL0TMUNT[SL0TWIDX] = SL0TW02.XUMCD[SL0TWIDX];
  SL0TM001.SL0TMSIZ[SL0TWIDX] = SL0TW02.SY4IDDSC[SL0TWIDX];
  SL0TM001.SL0TMCTN[SL0TWIDX] = SL0TW02.TSOCRTNB[SL0TWIDX];
  SL0TM001.SL0TMQTY[SL0TWIDX] = SL0TW02.SL9WOQTY[SL0TWIDX];

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0TSB3

// move fields from ts to map m1
Function SL0TSB4()

   /* ************************************************************/
   /* *** move individual fields from temp storage to map     ****/
   /* *** m002.                                               ****/
   /* ************************************************************/

  if (SL0TW00.SL0TWIDX == 1)
    set SL0TM002.SL0TMSEL[SL0TWIDX] cursor, normal;
  else
    set SL0TM002.SL0TMSEL[SL0TWIDX] normal;
  end

  SL0TM002.SL0TMPLN[SL0TWIDX] = SL0TW02.SWEPLLNB[SL0TWIDX];
  SL0TM002.SL0TMCNT[SL0TWIDX] = SL0TW02.TSHCNTNR[SL0TWIDX];
  SL0TM002.SL0TMDIM[SL0TWIDX] = SL0TW02.XDMCD[SL0TWIDX];
  SL0TM002.SL0TMQUA[SL0TWIDX] = SL0TW02.XQACD[SL0TWIDX];
  SL0TM002.SL0TMOGC[SL0TWIDX] = SL0TW02.XOWCD[SL0TWIDX];
  SL0TM002.SL0TMISG[SL0TWIDX] = SL0TW02.PC2INSEG[SL0TWIDX];
  SL0TM002.SL0TMEDF[SL0TWIDX] = SL0TW02.XEGCD[SL0TWIDX];
  SL0TM002.SL0TMPKG[SL0TWIDX] = SL0TW02.XPGCD[SL0TWIDX];
  SL0TM002.SL0TMUNT[SL0TWIDX] = SL0TW02.XUMCD[SL0TWIDX];
  SL0TM002.SL0TMCTN[SL0TWIDX] = SL0TW02.TSOCRTNB[SL0TWIDX];
  SL0TM002.SL0TMQTY[SL0TWIDX] = SL0TW02.SL9WOQTY[SL0TWIDX];
  SL0TW00.SL0TWPNB = SL0TW02.PC3PONBR[SL0TWIDX];
  if (SL0TW02.XWHCD[SL0TWIDX] == "51") /* if aprl whse*/
    SL0TM002.SL0TMPON[SL0TWIDX] = SL0TW00.SL0TWPCH;
  else /* if ftwr whse*/
    SL0TM002.SL0TMPON[SL0TWIDX] = SL0TW02.SL0TMPOI[SL0TWIDX];
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0TSB4

// same key edits
Function SL0TSB5()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (sl0tw00) ****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0TM002.XWHCD != SL0TW01.XWHCD) /* warehouse code*/
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0TM002.XGPCD != SL0TW01.XGPCD) /* gpc code*/
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0TM002.SY1STNBR != SL0TW01.SY1STNBR) /* style nbr*/
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0TM002.SY2CLRID != SL0TW01.SY2CLRID) /* color*/
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0TM002.SL0TMSIZ != SL0TW01.SL0TMSIZ) /* size*/
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0TSB5

// translate size subroutine
Function SL0TSB6()
   /* ************************************************************/
   /* *** obtain internal size                                ****/
   /* ************************************************************/

  set SYPREC empty;

  SYPREC.SYPFC = "EI"; /* external to internal translate*/
  SYPREC.SYPCMPSW = "C"; /* indicate compressed format*/

  SYPREC.XGPCD = SL0TM002.XGPCD;
  SYPREC.SY1STNBR = SL0TM002.SY1STNBR;
  SYPREC.SY2CLRID = SL0TM002.SY2CLRID;
  SYPREC.XDMCD = "00";
  SYPREC.XQACD = "**";
  SYPREC.SY4IDDSC[1] = SL0TM002.SL0TMSIZ;


  TA1REC.TA1LOCAT[2] = "SL0TSB6 ";
  TA1REC.TA1MAP = "SL0TM002";

  XSSYPI1(); /* <=== get size xlations*/

  if (SYPREC.SYPRC == 0
   || SYPREC.SYPRC == 02
   || SYPREC.SYPRC == 10)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SB6";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    else
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "SB6";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0TSB6

// clear saved key fields
Function SL0TSB7()
   /* ************************************************************/
   /* *** clear keys*/
   /* ************************************************************/

  if (COMMAREA.XWHCD == "51")
    SL0TW01.XGPCD = "03";
  else
    SL0TW01.XGPCD = "02";
  end
  SL0TW01.PC3PONBR = 0;
  SL0TW01.SL0TMPOI = " ";
  SL0TW01.PC4ORTYP = " ";
  SL0TW01.TSOCRTNB = 0;
  SL0TW01.SY1STNBR = " ";
  SL0TW01.SY2CLRID = " ";
  SL0TW01.SY5SZID = 0;
  SL0TW01.SL0TMSIZ = " ";
end // end SL0TSB7

// translate size subroutine
Function SL0TSB8()
   /* ************************************************************/
   /* *** obtain external size                                ****/
   /* ************************************************************/

  set SYPREC empty;

  SYPREC.SYPFC = "IE"; /* external to internal translate*/
  SYPREC.SYPCMPSW = "C"; /* indicate compressed format*/

  SYPREC.XGPCD = SL0TW02.XGPCD[SL0TWIDX];
  SYPREC.SY1STNBR = SL0TW02.SY1STNBR[SL0TWIDX];
  SYPREC.SY2CLRID = SL0TW02.SY2CLRID[SL0TWIDX];
  SYPREC.XDMCD = SL0TW02.XDMCD[SL0TWIDX];
  SYPREC.XQACD = SL0TW02.XQACD[SL0TWIDX];
  SYPREC.SY5SZID[1] = SL0TW02.SY5SZID[SL0TWIDX];


  TA1REC.TA1LOCAT[2] = "SL0TSB8 ";
  TA1REC.TA1MAP = "SL0TM001";

  XSSYPI1(); /* <=== get size xlations*/

  if (SYPREC.SYPRC == 0
   || SYPREC.SYPRC == 02
   || SYPREC.SYPRC == 10)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SB8";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    else
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "SB8";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0TSB8

//*** RECORD=SL0TW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// 
// ML Dangelo- added thousands work field FG0HWTH1.  Increased
// size of FG0HWNM1 - 4.   FF1028, FF1029
// ***********************
Record SL0TW00 type basicRecord
  10 SL0TWDCF SL0TWDCF ; 
  10 SL0TWERF SL0TWERF ; 
  10 SL0TWSWR SL0TWSWR ; 
  10 SL0TWSWF SL0TWSWF ; 
  10 SL0TWMSW SL0TWMSW ; 
  10 SL0TWRFD SL0TWRFD ; 
  10 SL0TWDLF SL0TWDLF ; 
  10 SL0TWMOD SL0TWMOD ; 
  10 SL0TWPRF SL0TWPRF ; 
  10 SL0TWPIX SL0TWPIX ; 
  10 SL0TWLSL SL0TWLSL ; 
  10 SL0TWIDX SL0TWIDX ; 
  10 PKDNCSQN PKDNCSQN ; 
  10 SWEPLLNB SWEPLLNB ; 
  10 SL0TWPLN SL0TWPLN ; 
  10 SLMWCPFL SLMWCPFL ; 
  10 SL8WOGRP SL8WOGRP ; 
  10 SL8WONBR SL8WONBR ; 
  10 TSHCNTNR TSHCNTNR ; 
  10 SL0TWWED SL0TWWED ; 
    15 * num(3) ; 
    15 SL0TWECC SL0TWECC ; 
    15 SL0TWEYM SL0TWEYM ; 
      20 SL0TWEYY SL0TWEYY ; 
      20 SL0TWEMM SL0TWEMM ; 
  10 SL0TWCRD SL0TWCRD ; 
  10 SL0TWCD1 SL0TWCD1 ; 
  10 SL0TWCD2 SL0TWCD2 ; 
  10 SL0TWPNB SL0TWPNB ; 
    15 SL0TWPCH SL0TWPCH ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 SL0TWPAG SL0TWPAG ; 
  10 SL0TWSTP SL0TWSTP ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 SL0TWPFL SL0TWPFL ; 
end // end SL0TW00

//*** RECORD=SL0TW01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// 
// 10/4/90  ML D'Angelo - added FG0HWHPS array to hold the
// history percents displayed on the screen so that we can
// determine if they have been changed or not.  FF1029
// ***********************
Record SL0TW01 type basicRecord
  10 XWHCD XWHCD ; 
  10 XWHSABRV XWHSABRV ; 
  10 PC3PONBR PC3PONBR ; 
  10 SL0TMPOI SL0TMPOI ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 TSOCRTNB TSOCRTNB ; 
  10 XGPCD XGPCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 SY5SZID SY5SZID ; 
  10 SY4IDDSC SY4IDDSC ; 
  10 SL0TMSIZ SL0TMSIZ ; 
  10 SL0TMRPT SL0TMRPT ; 
  10 SL0TMPGN SL0TMPGN ; 
  10 XROPDEST XROPDEST ; 
end // end SL0TW01

//*** RECORD=SL0TW02 ****
// ****************  stock locate table  **********************
// 
// TABLE NAME:          join of work order header and item
//                      dstloc.vwophd01 and dstloc.vwopit01
// 
// DB2 TABLE:           dstloc.vwophd02
// 
// COPYLIB MEMBER:      dcl00889
// 
// KEY TO DB2 TABLE:    xwhcd
//                      w.o. group number
//                      w.o. number
// 
// 
// MAINTENANCE LOG:
// 
// DATE      NAME       COMMENTS
// --------  ---------  ------------------------------------
// 11-19-90  ryonke     created csp record
// ************************************************************
// ***********************
Record SL0TW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 SL0TWNLD SL0TWNLD ; 
  5 * char(97) [11] ; 
    10 XWHCD XWHCD ; 
    10 SL8WOGRP SL8WOGRP ; 
    10 SL8WONBR SL8WONBR ; 
    10 SWEPLLNB SWEPLLNB ; 
    10 TSHCNTNR TSHCNTNR ; 
    10 PC3PONBR PC3PONBR ; 
    10 SL0TMPOI SL0TMPOI ; 
    10 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XEGCD XEGCD ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 SL8WOPFL SL8WOPFL ; 
    10 SY4IDDSC SY4IDDSC ; 
    10 SY5SZID SY5SZID ; 
    10 PKDNCSQN PKDNCSQN ; 
    10 TSOCRTNB TSOCRTNB ; 
    10 SL9WOQTY SL9WOQTY ; 
    10 SLMWCPFL SLMWCPFL ; 
end // end SL0TW02

//*** RECORD=SL0TW03 ****
// ------------------------------------------------------------
// Parameters for SL413D - Planned Work Order Creation.
// ------------------------------------------------------------
// ***********************
Record SL0TW03 type basicRecord
  5 TARJCL TARJCL ; 
    10 XWHCD XWHCD ; 
    10 TSHCNTNR TSHCNTNR ; 
    10 SL0TWOFL SL0TWOFL ; 
    10 SL0TWCSQ SL0TWCSQ ; 
    10 SL2PALET SL2PALET ; 
    10 SL5LOCTN SL5LOCTN ; 
    10 SL0TWPLN SL0TWPLN ; 
    10 SL0TWWOG SL0TWWOG ; 
    10 SL0TWNBR SL0TWNBR ; 
    10 SL0TWCRT SL0TWCRT ; 
    10 SL0TWPUW SL0TWPUW ; 
    10 * char(7) ; 
end // end SL0TW03

//*** RECORD=SL0TW05 ****
// --------------------------------
// Parameters to be sent to FF6300.
// --------------------------------
// ***********************
Record SL0TW05 type basicRecord
  5 TARJCL TARJCL ; 
    10 XWHCD XWHCD ; 
    10 SL0TWGRP SL0TWGRP ; 
    10 SL0TWWON SL0TWWON ; 
    10 SL0TWCSN SL0TWCSN ; 
    10 SL0TMPGN SL0TMPGN ; 
    10 * char(49) ; 
end // end SL0TW05

//*** RECORD=SL0TW06 ****
// --------------------------------
// Parameters to be sent to sl4191.
// --------------------------------
// ***********************
Record SL0TW06 type basicRecord
  5 TARJCL TARJCL ; 
    10 SL0TWPJC SL0TWPJC ; 
    10 SL0TWPLT SL0TWPLT ; 
    10 SL0TMPGN SL0TMPGN ; 
    10 SL0TWPRT SL0TWPRT ; 
    10 * char(57) ; 
end // end SL0TW06

// map generation
DataItem SL0TMPGN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id
DataItem SL0TMPOI char(9)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// map reprint flag
DataItem SL0TMRPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size
DataItem SL0TMSIZ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current date -1 month
DataItem SL0TWCD1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date -2 month
DataItem SL0TWCD2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// current date
DataItem SL0TWCRD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// crt user
DataItem SL0TWCRT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// carton seq nbr
DataItem SL0TWCSN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// carton sequence number
DataItem SL0TWCSQ num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// data change flag
DataItem SL0TWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data loaded flag
DataItem SL0TWDLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end century
DataItem SL0TWECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range month
DataItem SL0TWEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error flag
DataItem SL0TWERF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end year and month
DataItem SL0TWEYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end range year
DataItem SL0TWEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group #
DataItem SL0TWGRP num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work index
DataItem SL0TWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// number of lines selected
DataItem SL0TWLSL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// temp storage update switch
DataItem SL0TWMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map1 or map2 switch
DataItem SL0TWMSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work order number
DataItem SL0TWNBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// lines per page
DataItem SL0TWNLD smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work order type flag
DataItem SL0TWOFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current temporary storage page
DataItem SL0TWPAG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_NBR character
DataItem SL0TWPCH char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// flag to check sl-wo-prt-fl
DataItem SL0TWPFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work index
DataItem SL0TWPIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// print gdg jcl
DataItem SL0TWPJC char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// plan number
DataItem SL0TWPLN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// paren left
DataItem SL0TWPLT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_NBR
DataItem SL0TWPNB num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map process flag
DataItem SL0TWPRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// paren right
DataItem SL0TWPRT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// unplanned/planned wo flag
DataItem SL0TWPUW char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// row found switch
DataItem SL0TWRFD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save current temp storage page
DataItem SL0TWSTP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem SL0TWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem SL0TWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work begin date
DataItem SL0TWWED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work oder group nbr
DataItem SL0TWWOG num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work order number
DataItem SL0TWWON num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

