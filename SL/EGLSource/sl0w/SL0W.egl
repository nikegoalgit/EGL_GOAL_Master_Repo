package sl0w;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import pk.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SL0W ****
// This application allows a user to inquire and maintain rows
// in a DB2 table.
// 
// There are two different screens that may be displayed.
// 
// The first screen displayed to the user allows specification
// of the search criteria to be used to list the rows in the
// table.  The list is displayed and the user may page backward
// and forward to view the information.
// 
// When a line is selected on the screen, the second screen is
// displayed, showing all information for that table row.
// 
// If the user has sufficient security to change the data, the
// modifiable fields remain unprotected.  Otherwise, they are
// protected from modification by the user.
// 
// If any data is modified, it is verified and, if complete and
// correct, the table row is updated with the changed data.
// The screen is redisplayed to the user, indicating that the
// update is completed.
// 
// If more that one line was selected on the first screen, the
// next selection is displayed when the user presses the ENTER
// key without making any change to the displayed data.
// 
// When the user exits the second screen (either via PF3 key or
// after all selections have been viewed) the first screen is
// redisplayed, indicating the selections that were viewed.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      11/01/90  MKRAUS  New application.
// 
// e0001    01/11/91  rchini  1.  The program was not checking
//                            the location status code when the
//                            to Area/Zone/Location are all 3
//                            entered.  The location status
//                            must = '01'.
//                            2.  Fixed a temp storage read
//                            problem.
//                            3.  PA2 to clear the map was not
//                            working properly.
//                            4.  The size ids were not getting
//                            converted from numeric to a
//                            character description.
//                            5.  Added the printer destination
//                            to the map.  This field pulls up
//                            a pop-up map to display printers
//                            to select.
// e0002    02/06/91  rchini  1.  Modified map - changed fields
//                            that were displaying green to
//                            blue.
//                            2.  Removed pop-up window
//                            processing for the printer. TA0P
//                            will display printer options.
//          02/12/91  ryonke  program changes for table changes
// SL#0     10/10/91  SPOPA   Change "Allow Implicits" to NO.
//                            Change VUCASE01 processing to
//                            handle multiple units/case rows.
// FIX      10/14/91  SPOPA   Correct minimum/maximum cases per
//                            pallet edit processing.
// MAINT    01/28/92  GRAY    INITIALIZE ALL RECORDS AND MAPS.
//          10/10/92  Ryonke  Code changes due to table changes
// sl#0     10/22/92  Ryonke  Increased size of carton sequence
//                            on screen and decreased size of
//                            quantity field.
// WILSONVILLE
//          03/26/93  GRAY    ADD CALL TO VSYASG01 FOR SINGLE
//                            CARTON WORK ORDERS. ADD JCL FOR
//                            WILSONVILLE.
// sl395    05/10/93  RYONKE  UPDATE LOCATION STATUS ONLY
//                            WHEN LOCATION IS BULK OR HANDSTK.
// sl395    05/14/93  gray    add more edits to sl0w615 and
//                            sl0w670.
// sl395    05/19/93  GRAY    15TH DETAIL WAS GETTING LOST, FIX
//                            INDEXING.
// fix      06/23/93  mpluth  changed SL0W580 to check for the
//                            SWFCPWOF flag = 'n' instead of
//                            'y'.
// SL461    07/31/95  RMORGA  Expand case number to 6 digits,
//                            by removing package type from map
// ASW001   12/29/95  hkempe  Recompiled due to VPLCPO01 table
//                            change.
// ASW001   09/17/97  kheina  Area/zone must be entered for
//                            b grades (quality 02).
// *********************
Program SL0W type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SL0WW00 SL0WW00; // record
  SL0WW01 SL0WW01; // record
  SL0WW03 SL0WW03; // record
  SL0WW04 SL0WW04; // record
  SL1REC SL1REC; // record
  SL2REC SL2REC; // record
  SL4REC SL4REC; // record
  SL5REC SL5REC; // record
  SL7REC SL7REC; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SWEREC SWEREC; // record
  SWFREC SWFREC; // record
  SWPREC SWPREC; // record
  SWVREC SWVREC; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SL0WT07 {deleteAfterUse = yes}; // table
  use SL0WT; // table
  use XROTBL; // table
  use XWHTBL; // table
  use SL0WM.SL0WM001,  // forms
      SL0WM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SL0WM001 initial; /* M001 input/output*/
    set TA0PM001 initial; /* taop input/output*/
    set SL0WW00 empty; /* Working storage*/
    set SL0WW01 empty; /* M001 display storage*/
    set SL0WW03 empty; /* Working storage*/
    set SL0WW04 empty; /* Working storage*/
    set SL1REC empty;
    set SL2REC empty;
    set SL4REC empty;
    set SL5REC empty;
    set SWEREC empty;
    set SWFREC empty;
    set SWPREC empty;
    set SWVREC empty;
    set SYPREC empty;
    set TAEREC empty; /* Error diagnosis parameters*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set TA6REC empty; /* Background job subroutine parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set XX0XW02 empty; /* Date/time subroutine parameters*/
    set SQLCA empty; /* SQL communication area*/
    set ERRSQLCA empty; /* SQL communication area*/

    SL0WW00.SL0WWSWD = "1"; /* Map to be displayed switch*/
    SL0WW00.SL0WWSWF = "Y"; /* Format the map switch*/
    SL0WW00.SL0WWSWR = "N"; /* Request for data switch*/
    SL0WW00.SL0WWSCR = "N"; /* Request for scroll switch*/

     /* ------------------------------------------------------------*/
     /* If data was passed in the COMMAREA, use as the initial key.*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.CAITEM > " ") /* Data was passed*/

      SL0WM001.XWHCD = COMMAREA.XWHCD; /* Warehouse code*/
      SL0WM001.CAITEM = COMMAREA.CAITEM; /* Item*/

      COMMAREA.CAITEM = " "; /* Clear passed data*/

      SL0WW00.SL0WWSWR = "Y"; /* Request for data switch*/

    else

      SL0WM001.XWHCD = COMMAREA.XWHCD; /* Warehouse code*/
      SL0WW01.XWHCD = COMMAREA.XWHCD; /* Warehouse code*/

    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SL0W001; /* Converse the main process*/


    SL0W001: SL0W001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SL0W001; /* Converse the main process*/


  end // end main
end // end SL0W

// Main process to display a map
Function SL0W001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (SL0WW00.SL0WWSWD == "1") /* Map requested*/

    SL0W100(); /* Display map*/

  else

    /* ------------------------------------------------------------*/
     /* Write the error to the Error Diagnosis Reporting Facility.*/
    /* ------------------------------------------------------------*/

    SLWREC.XXXLOCID = "001"; /* Module identification*/
    SLWREC.SLWMSGNO = 1; /* Unexpected error occurred*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
    TA1REC.TA1MAPNO = SL0WW00.SL0WWSWD; /* Map number*/
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    /* ------------------------------------------------------------*/
     /* Exit to display the application system menu.*/
    /* ------------------------------------------------------------*/

    COMMAREA.CATOAP = "SL0W"; /* TO application*/

    XSSL001(); /* Exit to another application*/

    /* ------------------------------------------------------------*/
     /* Abnormally terminate the transaction if the exit failed.*/
    /* ------------------------------------------------------------*/

    TA1REC.TA1FUNC = "ABND"; /* Termination function*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  end


end // end SL0W001

// List the rows in the table
Function SL0W100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SL0W110(); /* Obtain the data to display*/

  SL0W200(); /* Format and display the map*/

  SL0W300(); /* Check attention identifier*/

  SL0W400(); /* Reset fields to normal intensity*/

  SL0W500(); /* Verify the entered data*/

  SL0W600(); /* Process valid input request*/


end // end SL0W100

// Obtain the data to display
Function SL0W110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SL0WW00.SL0WWSWR != "Y" /* Data was not requested*/
   || SLWREC.SLWMSGNO != 0)   /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  SL0WW00.XXXTSLEN = 1068; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* Reset the page number to zero.*/
   /* ------------------------------------------------------------*/

  SL0WW00.XXXTSPAG = 0; /* Page number to display*/
  SL0WW00.TA5TSQIX = 0; /* Max number of pages*/

   /* ------------------------------------------------------------*/
   /* Select the information to display in the map heading.*/
   /* ------------------------------------------------------------*/

  SL0W111(); /* Select the rlhdr information*/

  if (converseVar.validationMsgNum != 0) /* if an error was found return*/
    return;
  end

  SL0WW00.XWHCD = SL1REC.XWHCD; /* Warehouse code*/
  SL0WW00.TS3CNTNR = SL1REC.TS3CNTNR; /* Container*/
  SL0WW00.XARCD = SL1REC.XARCD; /* from area code*/
  SL0WW00.SL4ZONE = SL1REC.SL4ZONE; /* from zone code*/

  SL0WM001.XWHCD = SL1REC.XWHCD; /* Warehouse code*/
  SL0WM001.TS3CNTNR = SL1REC.TS3CNTNR; /* Container*/
  SL0WM001.XARCD = SL1REC.XARCD; /* from area code*/
  SL0WM001.SL4ZONE = SL1REC.SL4ZONE; /* from zone code*/

   /* ------------------------------------------------------------*/
   /* Select single row from Plan Header Table*/
   /* ------------------------------------------------------------*/

  SL0W112();

  if (converseVar.validationMsgNum != 0) /* if an error was found return*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Call for DSTLOC.VRLITM01.*/
   /* ------------------------------------------------------------*/

  set SL2REC empty; /* Clear row storage area*/

  SL2REC.XWHCD = SL1REC.XWHCD; /* Warehouse code*/
  SL2REC.TS3CNTNR = SL1REC.TS3CNTNR; /* Container*/
  SL2REC.SWEPLLNB = SL1REC.SWEPLLNB; /* plan nbr*/
  SL2REC.SL8TOAR = " "; /* to area cd*/
  SL2REC.SL8TOZN = " "; /* to zone cd*/
  SL2REC.SL8TOLC = " "; /* to loc cd*/

  if (SL0WW00.SL5LOCTN > " ") /* use location if entered on map*/
    SL2REC.SL5LOCTN = SL0WW00.SL5LOCTN; /* location*/
  else
    SL2REC.SL5LOCTN = "*"; /* else, wild card the location*/
  end

  SL0W115(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  SL0WW00.SL0WWIXM = 0; /* Display line index*/
  SL0WW00.SL0WWSWC = "N"; /* End of cursor switch*/

  while (SL0WW00.SL0WWSWC == "N") /* Until end of cursor*/

    SL0W117(); /* Fetch next row in the cursor*/

    /* ------------------------------------------------------------*/
     /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/

    if (SL0WW00.SL0WWSWC == "N") /* Not end of cursor*/
      SL0W118(); /* Save data in display storage*/
    end

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (SL0WW00.SL0WWIXM >= 14) /* Page is full*/

      SL0WS03(); /* Add page to temporary storage*/

      SL0WW00.SL0WWIXM = 0; /* Display line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* close the cursor for dstloc.vrlitm01.*/
   /* ------------------------------------------------------------*/

  SL0W119(); /* close the cursor*/

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (SL0WW00.SL0WWIXM > 0) /* Page was formatted*/
    SL0WS03(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* no errors were found*/
    if (SL0WW00.TA5TSQIX == 0) /* No pages formatted*/

      SLWREC.XXXLOCID = "110"; /* Module identification*/
      converseLib.validationFailed(84); /* No data was found to display*/
      SL0WM001.XWHCD = SL0WW00.XWHCD; /* whse cd*/
      SL0WM001.SL0WMPLN = SL0WW00.SWEPLLNB; /* plan nbr*/
      SL0WM001.TS3CNTNR = SL0WW00.TS3CNTNR; /* container*/
      SL0WM001.SL5LOCTN = SL0WW00.SL5LOCTN; /* from loc cd*/
      set SL0WM001.TS3CNTNR cursor, bold; /* highlight cntnr*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* move 1 to the page number.*/
   /* ------------------------------------------------------------*/

  SL0WW00.SL0WWSWR = "N"; /* Request for data switch*/
  SL0WW00.XXXTSPAG = 1; /* Page number to display*/


end // end SL0W110

// Select from dstloc.vrlhdr01
Function SL0W111()
   /* ------------------------------------------------------------*/
   /* Select the requested row from dstloc.vrlhdr01.*/
   /* ------------------------------------------------------------*/

  set SL1REC empty; /* Clear row storage area*/

  SL1REC.XWHCD = SL0WW00.XWHCD; /* Warehouse code*/
  SL1REC.TS3CNTNR = SL0WW00.TS3CNTNR; /* Container*/

  try
    call "IO1570" ("S ", SQLCA, SL1REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        SL0WM001.XWHCD = SL0WW00.XWHCD; /* whse cd*/
        SL0WM001.SL0WMPLN = SL0WW00.SWEPLLNB; /* plan nbr*/
        SL0WM001.TS3CNTNR = SL0WW00.TS3CNTNR; /* container*/
        SL0WM001.SL5LOCTN = SL0WW00.SL5LOCTN; /* from loc cd*/
        SLWREC.XXXLOCID = "111"; /* module identification*/
        converseLib.validationFailed(12); /* Recv. log hdr not found*/
        set SL0WM001.XWHCD cursor, bold; /* highlight warehouse*/
        return; /* Return to previous process*/

      end
    end
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SL0WW00.SL0WWSWD = "1"; /* Map to be displayed switch*/
  SL0WW00.SL0WWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "111"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0W111

// Select from dstloc.vplnhd01
Function SL0W112()
   /* ------------------------------------------------------------*/
   /* Select single row from Plan Header Table*/
   /* DSTLOC.VPLNHD01*/
   /* ------------------------------------------------------------*/

  set SWEREC empty; /* set dstloc.vplnhd01 record empty*/

  SWEREC.XWHCD = SL1REC.XWHCD; /* Warehouse code*/
  SWEREC.SWEPLLNB = SL1REC.SWEPLLNB; /* plan number*/

  try
    call "IO5350" ("S ", SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
  end /* select line*/

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/
      SL0WM001.SL0WMWOG = SWEREC.SL8WOGRP; /* WO group*/
      SL0WW01.SL8WOGRP = SWEREC.SL8WOGRP; /* WO group*/
      SL0WW00.SL8WOGRP = SWEREC.SL8WOGRP; /* WO group*/
      if (SWEREC.XRPCD == "SC"
       || SWEREC.XRPCD == "IP")
        return; /* return to previous process*/
      else
        SLWREC.XXXLOCID = "112"; /* module identification*/
        set SL0WM001.SL0WMPLN cursor, bold; /* highlight plan number*/
        SL0WM001.SL0WMPLN = SWEREC.SWEPLLNB; /* Plan nbr*/
        converseLib.validationFailed(218); /* plan status invalid*/
        return; /* return to previous process*/
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        SL0WM001.XWHCD = SL0WW00.XWHCD; /* whse cd*/
        SL0WM001.SL0WMPLN = SL0WW00.SWEPLLNB; /* plan nbr*/
        SL0WM001.TS3CNTNR = SL0WW00.TS3CNTNR; /* container*/
        SL0WM001.SL5LOCTN = SL0WW00.SL5LOCTN; /* from loc*/
        SLWREC.XXXLOCID = "112"; /* module identification*/
        set SL0WM001.XWHCD cursor, bold; /* highlight whse*/
        converseLib.validationFailed(12); /* record not on database*/
        return; /* return to previous process*/
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SL0WW00.SL0WWSWD = "1"; /* Map to be displayed switch*/
  SL0WW00.SL0WWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0W112

// Select set dstloc.vrlitm01
Function SL0W115()
   /* ------------------------------------------------------------*/
   /* Select table set from DSTLOC.VRLITM01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1580" ("SA", SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SL0WW00.SL0WWSWD = "1"; /* Map to be displayed switch*/
  SL0WW00.SL0WWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "115"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DECLARE CURSOR FOR TABLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0W115

// Fetch next dstloc.vrlitm01 csr
Function SL0W117()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from DSTLOC.VRLITM01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1580" ("NA", SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
        SL0WW00.SL0WWSWC = "Y"; /* Indicate end of cursor*/

        return; /* Return to previous process*/

      end
    end
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SL0WW00.SL0WWSWD = "1"; /* Map to be displayed switch*/
  SL0WW00.SL0WWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "117"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0W117

// Save data in display storage
Function SL0W118()

   /* ------------------------------------------------------------*/
   /* Increment index.*/
   /* ------------------------------------------------------------*/

  SL0WW00.SL0WWIXM = SL0WW00.SL0WWIXM + 1; /* Increment line index*/

   /* ------------------------------------------------------------*/
   /* If index > 14, return to previous process.  If index > 14,*/
   /* then the page is full and the page must be written to*/
   /* temporary storage.*/
   /* ------------------------------------------------------------*/

   /* IF SL0WW00.SL0WWIXM GT 14;       /* is the page full?*/
   /* EZERTN;                        /* return to previous process*/
   /* ;*/

   /* ------------------------------------------------------------*/
   /* If first line, save heading information.*/
   /* ------------------------------------------------------------*/

  if (SL0WW00.SL0WWIXM == 1) /* First line on page*/

    SL0WW01.XWHCD = SL1REC.XWHCD; /* Warehouse code*/
    SL0WW01.SWEPLLNB = SL1REC.SWEPLLNB; /* Plan number*/
    SL0WW01.SL8WOGRP = SWEREC.SL8WOGRP; /* Work order group*/
    SL0WW01.TSHCNTNR = SL1REC.TS3CNTNR; /* Container*/
    if (SL0WM001.XWHCD in XWHTBL.XWHCD) /* Code in table*/
      SL0WW01.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    end
    SL0WW01.XARCD = SL1REC.XARCD; /* from area*/
    SL0WW01.SL4ZONE = SL1REC.SL4ZONE; /* from zone*/
    SL0WW00.XGPCD = SL2REC.XGPCD; /* gpc code*/
    SL0WW00.PC3PONBR = SL2REC.PC3PONBR; /* po nbr*/
  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  SL0WW01.PKDNCSQN[SL0WWIXM] = SL2REC.PKDNCSQN; /* Carton seq*/
  SL0WW01.SL2CASE[SL0WWIXM] = SL2REC.SL2CASE; /* Carton*/
  SL0WW01.PC4ORTYP[SL0WWIXM] = SL2REC.PC4ORTYP; /* po type code*/
  SL0WW01.PC3PONBR[SL0WWIXM] = SL2REC.PC3PONBR; /* po nbr*/
  SL0WW01.XGPCD[SL0WWIXM] = SL2REC.XGPCD; /* gen prod code*/
  SL0WW01.SY1STNBR[SL0WWIXM] = SL2REC.SY1STNBR; /* style nbr*/
  SL0WW01.SY2CLRID[SL0WWIXM] = SL2REC.SY2CLRID; /* color id*/
  SL0WW01.XDMCD[SL0WWIXM] = SL2REC.XDMCD; /* dimension code*/
  SL0WW01.XQACD[SL0WWIXM] = SL2REC.XQACD; /* quality code*/
  SL0WW01.PC2INSEG[SL0WWIXM] = SL2REC.PC2INSEG; /* in seq cd*/
  SL0WW01.XEGCD[SL0WWIXM] = SL2REC.XEGCD; /* engr diff cd*/
  SL0WW01.XSLCD[SL0WWIXM] = SL2REC.XSLCD; /* class cd*/
  SL0WW01.XPGCD[SL0WWIXM] = SL2REC.XPGCD; /* packaging type cd*/
  SL0WW01.XUMCD[SL0WWIXM] = SL2REC.XUMCD; /* unit of measure code*/
  SL0WW01.XOWCD[SL0WWIXM] = SL2REC.XOWCD; /* owner group code*/
  SL0WW01.SL2RCVD[SL0WWIXM] = SL2REC.SL2RCVD; /* received quantity*/
  SL0WW01.PC3PONBR[SL0WWIXM] = SL2REC.PC3PONBR; /* po nbr*/

   /* ------------------------------------------------------------*/
   /* Convert the size id to external for gpc code '03'*/
   /* ------------------------------------------------------------*/
   /* gpc code '03' COMMENTED OUT 04/01/93*/
   /* ------------------------------------------------------------*/
  SL0WW01.SY5SZID[SL0WWIXM] = SL2REC.SY5SZID; /* size id*/

   /* IF SL0WW01.XGPCD(SL0WWIXM) = '03';       /* if apparel gpc cd*/

  SL0W120(); /* convert size id*/

  if (SYPREC.SYPRC == 0) /* if external size id found*/
    SL0WW01.SY4IDDSC[SL0WWIXM] = SYPREC.SY4IDDSC; /* size  id*/
  else
    SL0WW01.SY4IDDSC[SL0WWIXM] = "*NF*"; /* not found*/
  end

   /* END;*/

   /* ------------------------------------------------------------*/
   /* If not warehouse 51 convert elements into PO ID*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1PGMNM = "SL0W"; /* program name*/

  if (SL2REC.XWHCD != "51")
    SWVREC.SWVWFNC = "T2";
    SWVREC.XGPCD = SL2REC.XGPCD;
    SWVREC.PC3POIDT = SL2REC.PC3POIDT;
    SWVREC.PCFSECD = SL2REC.PCFSECD;
    SWVREC.FY1FCTYC = SL2REC.FY1FCTYC;

    /* ------------------------------------------------------------*/
     /* Call subroutine*/
    /* ------------------------------------------------------------*/

    XSSLS10();

    SL0WW01.SL0WWPOI[SL0WWIXM] = SWVREC.SWVWPOID; /* po id*/

  end

  SL0WW01.SY1UNPCS[SL0WWIXM] = SL2REC.SY1UNPCS; /* units per case*/


end // end SL0W118

// close dstloc.vrlitm01 cursor
Function SL0W119()
   /* ------------------------------------------------------------*/
   /* Close the cursor for DSTLOC.VRLITM01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1580" ("CA", SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* close cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SL0WW00.SL0WWSWD = "1"; /* Map to be displayed switch*/
  SL0WW00.SL0WWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "119"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE THE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0W119

// translate size subroutine
Function SL0W120()
   /* ************************************************************/
   /* *** obtain external size                                ****/
   /* ************************************************************/

  set SYPREC empty;

  SYPREC.SYPFC = "IE"; /* external to internal translate*/
  SYPREC.SYPCMPSW = "C"; /* indicate compressed format*/

  SYPREC.XGPCD = SL0WW01.XGPCD[SL0WWIXM];
  SYPREC.SY1STNBR = SL0WW01.SY1STNBR[SL0WWIXM];
  SYPREC.SY2CLRID = SL0WW01.SY2CLRID[SL0WWIXM];
  SYPREC.XDMCD = SL0WW01.XDMCD[SL0WWIXM];
  SYPREC.XQACD = SL0WW01.XQACD[SL0WWIXM];
  SYPREC.SY5SZID[1] = SL0WW01.SY5SZID[SL0WWIXM];


  TA1REC.TA1LOCAT[2] = "SL0W120 ";
  TA1REC.TA1MAP = "SL0WM001";

  XSSYPI1(); /* <=== get size xlations*/

  if (SYPREC.SYPRC == 0
   || SYPREC.SYPRC == 02
   || SYPREC.SYPRC == 10)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "120";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    else
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "120";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** end of process group                                ****/
   /* ************************************************************/


end // end SL0W120

// Format & converse sl0wm001 map
Function SL0W200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If no errors found, format data to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* or no error found*/
    if (SL0WW00.SL0WWSWF == "Y") /* Map must be formatted*/
      SL0W210(); /* Format the data on the map*/
    end
  end

  SL0WW00.SL0WWIXM = 1; /* initialize line index*/

  while (SL0WW00.SL0WWIXM <= 14) /* until all lines checked*/

    if (SL0WM001.SL0WMCSQ[SL0WWIXM] != 0) /* if a carton is in this line*/
      if (SL0WM001.SL0WMSEL[SL0WWIXM] == "*") /* crtn already processed?*/
        set SL0WM001.SL0WMSEL[SL0WWIXM] skip; /* protect select*/
      else
        set SL0WM001.SL0WMSEL[SL0WWIXM] normal; /* unprotect*/
      end
    else
      set SL0WM001.SL0WMSEL[SL0WWIXM] skip, invisible; /* protect select*/
    end

    SL0WW00.SL0WWIXM = SL0WW00.SL0WWIXM + 1; /* increment index*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* Move the current and max pages to the map.*/
   /* ------------------------------------------------------------*/

  SL0WM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  SL0WM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SL0WM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  SL0WM001.XXXTSPAG = SL0WW00.XXXTSPAG; /* current page*/
  SL0WM001.TA5TSQIX = SL0WW00.TA5TSQIX; /* max nbr of pages*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    if (SLWREC.SLWMSGNO != 0) /* Message to display*/
      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SL0WM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
    end
    SL0WM001.XXXLOCID = SLWREC.XXXLOCID; /* Module identification*/
    set SL0WM001 alarm; /* Indicate sound alarm*/
  end

  converse SL0WM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SL0WM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SL0WM001.CAITEM; /* Application data*/


end // end SL0W200

// Format the display data
Function SL0W210()
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SL0WM001 initial; /* M001 input/output area*/

  SL0WW00.SL0WWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (SL0WW00.TA5TSQIX > 0) /* Pages were formatted*/

    SL0WS02(); /* Obtain temporary storage page*/

    /* ------------------------------------------------------------*/
     /* Build the map from the temp storage record.*/
    /* ------------------------------------------------------------*/

    SL0W220();

    set SL0WM001.SL0WMSEL[1] cursor; /* Position cursor*/

  end

  SL0WM001.XWHCD = SL0WW01.XWHCD;


end // end SL0W210

// Format the display data
Function SL0W220()
   /* ------------------------------------------------------------*/
   /* Unprotect area, zone and location.*/
   /* ------------------------------------------------------------*/

  set SL0WM001.SL8TOAR normal; /* Unprotect to area*/
  set SL0WM001.SL8TOZN normal; /* Unprotect to zone*/
  set SL0WM001.SL8TOLC normal; /* Unprotect to location*/

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  SL0WW00.SL0WWIXM = 1; /* Initialize line index*/

  SL0WM001.XWHCD = SL0WW00.XWHCD; /* Warehouse code*/
  SL0WM001.XWHABRV = SL0WW01.XWHSABRV; /* Warehouse abbrev.*/
  SL0WM001.SL0WMPLN = SL0WW00.SWEPLLNB; /* Plan nbr*/
  SL0WM001.SL0WMWOG = SL0WW00.SL8WOGRP; /* Work order group*/
  SL0WM001.TS3CNTNR = SL0WW00.TS3CNTNR; /* Container*/
  SL0WM001.XARCD = SL0WW00.XARCD; /* From area*/
  SL0WM001.SL4ZONE = SL0WW00.SL4ZONE; /* From zone*/
  SL0WM001.SL5LOCTN = SL0WW00.SL5LOCTN; /* From location*/
  SL0WM001.SL8TOAR = SL0WW00.SL8TOAR; /* To area*/
  SL0WM001.SL8TOZN = SL0WW00.SL8TOZN; /* To zone*/
  SL0WM001.SL8TOLC = SL0WW00.SL8TOLC; /* To location*/
  SL0WM001.SL2PALET = SL0WW00.SL2PALET; /* Pallet*/
  SL0WM001.XROPDEST = SL0WW00.XROPDEST; /* print dest*/

  while (SL0WW00.SL0WWIXM <= 14 /* Until screen is full*/
   && SL0WW01.XGPCD[SL0WWIXM] > " ") /* or end of data*/

    SL0WM001.SL0WMSEL[SL0WWIXM] = SL0WW01.SL0WMSEL[SL0WWIXM];
    SL0WM001.SL0WMCSQ[SL0WWIXM] = SL0WW01.PKDNCSQN[SL0WWIXM];
    SL0WW00.SL0WWEDT = SL0WW01.SL2CASE[SL0WWIXM]; /* edit field*/
    SL0WM001.SL0WMRLG[SL0WWIXM] = SL0WW00.SL0WWRLG;

    if (SL0WW01.XWHCD == "51")
      SL0WW00.SL0WWPON = SL0WW01.PC3PONBR[SL0WWIXM];
      SL0WM001.SL0WMPON[SL0WWIXM] = SL0WW00.SL0WWPON;
    else
      SL0WM001.SL0WMPON[SL0WWIXM] = SL0WW01.SL0WWPOI[SL0WWIXM];
    end

    SL0WM001.PC4ORTYP[SL0WWIXM] = SL0WW01.PC4ORTYP[SL0WWIXM];
    SL0WM001.XGPCD[SL0WWIXM] = SL0WW01.XGPCD[SL0WWIXM];
    SL0WM001.SY1STNBR[SL0WWIXM] = SL0WW01.SY1STNBR[SL0WWIXM];
    SL0WM001.SY2CLRID[SL0WWIXM] = SL0WW01.SY2CLRID[SL0WWIXM];
    SL0WM001.XDMCD[SL0WWIXM] = SL0WW01.XDMCD[SL0WWIXM];
    SL0WM001.XQACD[SL0WWIXM] = SL0WW01.XQACD[SL0WWIXM];
    SL0WM001.PC2INSEG[SL0WWIXM] = SL0WW01.PC2INSEG[SL0WWIXM];
    SL0WM001.XEGCD[SL0WWIXM] = SL0WW01.XEGCD[SL0WWIXM];
    /* MOVE SL0WW01.XPGCD(SL0WWIXM) TO SL0WM001.XPGCD(SL0WWIXM);*/
    SL0WM001.XUMCD[SL0WWIXM] = SL0WW01.XUMCD[SL0WWIXM];
    SL0WM001.XOWCD[SL0WWIXM] = SL0WW01.XOWCD[SL0WWIXM];

    /* GPC '03' CODE COMMENTED OUT 04/01/93*/
    /* IF SL0WW01.XGPCD(SL0WWIXM) = '03';     /* if apparel gpc cd*/
    SL0WM001.SY4IDDSC[SL0WWIXM] = SL0WW01.SY4IDDSC[SL0WWIXM];
    /* ELSE;*/
    /* MOVE SL0WW01.SY5SZID(SL0WWIXM) TO SL0WW00.SL0WWSID;*/
    /* MOVE SL0WW00.SL0WWSID TO SL0WM001.SY4IDDSC(SL0WWIXM);*/
    /* END;*/

    SL0WM001.SL2RCVD[SL0WWIXM] = SL0WW01.SL2RCVD[SL0WWIXM];

    SL0WW00.SL0WWIXM = SL0WW00.SL0WWIXM + 1; /* Increment line index*/

  end


end // end SL0W220

// Check attention identifier
Function SL0W300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SL0W310(); /* reset map and working storage empty*/

    SL0WW00.SL0WWSWF = "Y"; /* Format the map switch*/
    SL0WW00.SL0WWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* to application item*/

    SL0WS04(); /* Purge temporary storage*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SL0WM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      COMMAREA.CATOAP = SL0WM001.CATOAP; /* Applicaiton to commarea*/

      XSSL001(); /* Exit to another application*/

      set SL0WM001.CATOAP cursor, bold; /* Highlight*/

    else

      SLWREC.XXXLOCID = "300"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "SL0WM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SW0R"; /* TO application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* TO application*/
    end

    SL0WS04(); /* Purge temporary storage*/

    XSSL001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf6   /* and PF6 was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    SLWREC.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SL0W300

// reset map and working storage
Function SL0W310()


  set SL0WW00 empty; /* clear working storage*/
  set SL0WW01 empty; /* clear working storage*/
  set SL0WM001 initial; /* clear map*/

  SL0WW00.XWHCD = COMMAREA.XWHCD; /* warehouse*/
  SL0WM001.XWHCD = COMMAREA.XWHCD; /* warehouse*/
  SL0WW00.SL0WWSWD = "1"; /* map displayed switch*/

   /* SET SL0WM001.XWHCD DEFINED      ; warehouse code*/
   /* SET SL0WM001.SL0WMPLN CURSOR,DEFINED   ; plan number*/
   /* SET SL0WM001.SL0WMWOG DEFINED   ; work order group code*/
   /* SET SL0WM001.XARCD DEFINED      ; from area code*/
   /* SET SL0WM001.SL4ZONE  DEFINED   ; from zone*/
   /* SET SL0WM001.TS3CNTNR DEFINED   ; container code*/
   /* SET SL0WM001.PC3PONBR DEFINED   ; po number*/
   /* SET SL0WM001.SL0WWPOI DEFINED   ; po id*/
   /* SET SL0WM001.PC4ORTYP DEFINED   ; order type code*/
   /* SET SL0WM001.TSOCRTNB DEFINED   ; carton code*/
   /* SET SL0WM001.SWCLNENB DEFINED   ; lane code*/
   /* SET SL0WM001.XROPDEST DEFINED;*/
   /* SET SL0WM001.XGPCD DEFINED      ; gpc code*/
   /* SET SL0WM001.SY1STNBR DEFINED   ; style code*/
   /* SET SL0WM001.XQACD DEFINED      ; quality code*/
   /* SET SL0WM001.SY2CLRID DEFINED   ; color code*/
   /* SET SL0WM001.XDMCD DEFINED      ; dimension code*/
   /* SET SL0WM001.PC2INSEG DEFINED   ; cust xref code*/
   /* SET SL0WM001.XEGCD DEFINED      ; engineering diff code*/
   /* SET SL0WM001.XPGCD DEFINED      ; package type code*/
   /* SET SL0WM001.XUMCD DEFINED      ; unit of measure code*/
   /* SET SL0WM001.XOWCD DEFINED      ; owner group code*/
   /* SET SL0WM001.XSLCD DEFINED      ; stock locate class code*/


end // end SL0W310

// Reset highlighted fields
Function SL0W400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SL0WM001.XWHCD initialAttributes; /* Warehouse cd*/
  set SL0WM001.SL0WMPLN initialAttributes; /* Plan nbr*/
  set SL0WM001.SL0WMWOG initialAttributes; /* WO group*/
  set SL0WM001.TS3CNTNR initialAttributes; /* Container*/
  set SL0WM001.XARCD initialAttributes; /* From area*/
  set SL0WM001.SL4ZONE initialAttributes; /* From zone*/
  set SL0WM001.SL5LOCTN initialAttributes; /* From location*/
  set SL0WM001.SL8TOAR initialAttributes; /* To area*/
  set SL0WM001.SL8TOZN initialAttributes; /* To zone*/
  set SL0WM001.SL8TOLC initialAttributes; /* To location*/
  set SL0WM001.SL2PALET initialAttributes; /* Pallet*/
  set SL0WM001.XROPDEST initialAttributes; /* Printer destination*/

  SL0WW00.SL0WWIXM = 1; /* Initialize line index*/

  while (SL0WW00.SL0WWIXM <= 14) /* Until end of lines*/

    if (SL0WM001.SL0WMCSQ > 0) /* if crtn seq nbr has a value*/
      set SL0WM001.SL0WMSEL[SL0WWIXM] normal; /* Reset map select*/
    end

    if (SL0WM001.SL0WMSEL == "*")
                                   /* if crtn has been previously processed*/
      set SL0WM001.SL0WMSEL[SL0WWIXM] skip; /* protect select*/
    end

    SL0WW00.SL0WWIXM = SL0WW00.SL0WWIXM + 1; /* Increment line index*/

  end

  set SL0WM001.CATOAP initialAttributes; /* TO application*/
  set SL0WM001.CAITEM initialAttributes; /* Application data*/


end // end SL0W400

// Verify data that was entered
Function SL0W500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (SL0WM001.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SL0WM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(18); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Return to top of program if key fields not entered.*/
   /* ------------------------------------------------------------*/

  if (SL0WM001.TS3CNTNR == " ") /* container*/
    SLWREC.XXXLOCID = "500"; /* location id*/
    set SL0WM001.TS3CNTNR cursor, bold; /* bright*/
    converseLib.validationFailed(9); /* required firld*/
  end

  if (SL0WM001.SL0WMPLN == 0) /* plan nbr*/
    set SL0WM001.SL0WMPLN cursor, bold; /* bright*/
    SLWREC.XXXLOCID = "500"; /* location id*/
    converseLib.validationFailed(9); /* required firld*/
  end

  if (SL0WM001.XWHCD == " ") /* warehouse code*/
    set SL0WM001.XWHCD cursor, bold; /* bright*/
    SLWREC.XXXLOCID = "500"; /* location id*/
    converseLib.validationFailed(9); /* required firld*/
  end

  if (converseVar.validationMsgNum > 0)
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Return to top of program if data entered.*/
   /* ------------------------------------------------------------*/

  if (SL0WM001.XWHCD != SL0WW00.XWHCD       /* warehouse code*/
   || SL0WM001.SL0WMPLN != SL0WW00.SWEPLLNB /* plan nbr*/
   || SL0WM001.TS3CNTNR != SL0WW00.TS3CNTNR /* container*/
   || SL0WM001.SL5LOCTN != SL0WW00.SL5LOCTN /* from location*/
   || SL0WW00.SL0WWSWR == "Y")              /* data not found reload*/

    SL0WS04(); /* purge temp storage*/

    SL0WW00.XXXTSPAG = 0; /* initialize temp storage page cnt*/
    SL0WW00.XARCD = " "; /* from area*/
    SL0WW00.SL4ZONE = " "; /* from zone*/
    SL0WW00.SL5LOCTN = " "; /* from location*/
    SL0WW00.SL8TOAR = " "; /* to area*/
    SL0WW00.SL8TOZN = " "; /* to zone*/
    SL0WW00.SL8TOLC = " "; /* to location*/
    SL0WW00.SL2PALET = " "; /* pallet*/
    SL0WW00.SL0WWTYF = " "; /* pallet / carton wo flag*/
    SL0WW00.SL0WWCF1 = " "; /* counter*/
    SL0WW00.SL0WWPNT = 0; /* pallet counter*/
    SL0WW00.SL0WWCNT = 0; /* carton counter*/
    SL0WW00.XWHCD = SL0WM001.XWHCD; /* warehouse code*/
    SL0WW00.SWEPLLNB = SL0WM001.SL0WMPLN; /* plan nbr*/
    SL0WW00.TS3CNTNR = SL0WM001.TS3CNTNR; /* container*/
    set SL0WW01 empty; /* clear temp storage record*/

    if (SL0WM001.XROPDEST != " ") /* printer dest entered*/
      SL0WW00.XROPDEST = SL0WM001.XROPDEST; /* move printer dest*/
    end

    if (SL0WM001.SL5LOCTN != " ") /* from location entered*/
      SL0WW00.SL5LOCTN = SL0WM001.SL5LOCTN; /* from location*/
    end

    set SL0WM001 initial;

    SL0WW00.SL0WWSWR = "Y"; /* request for data switch*/
    SL0WW00.SL0WWSWF = "Y"; /* format the map switch*/

    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* If error return to top of program.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error has occurred*/
    exit stack;
  end


   /* ------------------------------------------------------------*/
   /* Move the whse, container, etc to working storage.*/
   /* ------------------------------------------------------------*/

  SL0WW00.XWHCD = SL0WM001.XWHCD; /* warehouse code*/
  SL0WW00.SWEPLLNB = SL0WM001.SL0WMPLN; /* plan nbr*/
  SL0WW00.TS3CNTNR = SL0WM001.TS3CNTNR; /* container*/
  SL0WW00.SL5LOCTN = SL0WM001.SL5LOCTN; /* from location*/

   /* ------------------------------------------------------------*/
   /* If a printer destination was selected, move it to*/
   /* working storage.*/
   /* ------------------------------------------------------------*/

  if (SL0WM001.XROPDEST > " " /* was printer entered?*/
   && SL0WM001.XROPDEST != "?") /* and not a question*/
    if (SL0WM001.XROPDEST in XROTBL.XROPDEST /* is printer in table?*/
     && XROTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and printer is active*/
      SL0WW00.XROPDEST = SL0WM001.XROPDEST;
    else
      SLWREC.XXXLOCID = "500"; /* location id*/
      set SL0WM001.XROPDEST cursor, bold; /* highlight field*/
      converseLib.validationFailed(11); /* required field*/
    end
  else
    SL0WW00.XROPDEST = " "; /* move spaces to print dest*/
  end

   /* ------------------------------------------------------------*/
   /* For whse 51, area/zone is required for b grades (quality 02)*/
   /* ------------------------------------------------------------*/
  if (SL0WM001.XWHCD == "51") /* Memphis apparel*/
    if (SL0WM001.XQACD == "02") /* Quality 02*/
      if (SL0WM001.SL8TOAR == "  ") /* to area*/
        set SL0WM001.SL8TOAR cursor, bold; /* highlight field*/
        converseLib.validationFailed(471); /* required field*/
      else
        if (SL0WM001.SL8TOZN == "  ") /* to zone*/
          set SL0WM001.SL8TOZN cursor, bold; /* highlight field*/
          converseLib.validationFailed(472); /* required field*/
        end
      end
    end

    if (converseVar.validationMsgNum > 0)
      exit stack;
    end

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    SL0W510(); /* Verify scroll request*/
    return; /* return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, if page was formatted, verify data in the line.*/
   /* ------------------------------------------------------------*/

  if (SL0WW00.TA5TSQIX > 0) /* Page was formatted*/
    SL0WW00.SL0WWIXM = 14; /* Initialize line index*/
    while (SL0WW00.SL0WWIXM > 0) /* Until end of lines*/
      SL0W520(); /* Verify data in the line*/
      SL0WW00.SL0WWIXM = SL0WW00.SL0WWIXM - 1; /* Decrement line number*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If no errors were found, process*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* no errors*/
    SL0W530(); /* validate carton sequence selection*/
  end


   /* ------------------------------------------------------------*/
   /* read dstloc.vplcpo01 to see if this container has been*/
   /* reconciled already.  if sl-cntnr-po-rcn-fl = 'y'es*/
   /* an error message will be displayed.*/
   /* ------------------------------------------------------------*/

  SL0W580(); /* select row from plan con. po table*/

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end SL0W500

// Verify scroll request
Function SL0W510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && SL0WM001.XXXTSPAG < 2)      /* and no previous pages*/

    SLWREC.XXXLOCID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && SL0WM001.XXXTSPAG >= SL0WW00.TA5TSQIX) /* and no more pages*/

    SLWREC.XXXLOCID = "510"; /* Module identification*/
    converseLib.validationFailed(8); /* No more pages to display*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (SL0WM001.TS3CNTNR != SL0WW01.TSHCNTNR) /* Container changed*/

    SLWREC.XXXLOCID = "510"; /* Module identification*/
    set SL0WM001.TS3CNTNR cursor, bold; /* Highlight*/
    converseLib.validationFailed(227); /* Field may not change*/

  end

  if (SL0WM001.SL0WMPLN != SL0WW01.SWEPLLNB) /* Plan nbr changed*/

    SLWREC.XXXLOCID = "510"; /* Module identification*/
    set SL0WM001.SL0WMPLN cursor, bold; /* Highlight*/
    converseLib.validationFailed(227); /* Field may not change*/

  end

  if (SL0WM001.XWHCD != SL0WW01.XWHCD) /* Warehouse changed*/

    SLWREC.XXXLOCID = "510"; /* Module identification*/
    set SL0WM001.XWHCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(227); /* Field may not change*/

  end


end // end SL0W510

// Verify data in the line
Function SL0W520()
   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "S", indicate that*/
   /* only "S" may be entered to select a line.*/
   /* ------------------------------------------------------------*/

  if (SL0WM001.SL0WMSEL[SL0WWIXM] != "S" /* and is not a "S"*/
   && SL0WM001.SL0WMSEL[SL0WWIXM] != " " /* and is not a space*/
   && SL0WM001.SL0WMSEL[SL0WWIXM] != "*") /* and has not been processed*/

    SLWREC.XXXLOCID = "520"; /* Module identification*/
    set SL0WM001.SL0WMSEL[SL0WWIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(228); /* Only "S" may be entered*/

  end

   /* ------------------------------------------------------------*/
   /* For whse 51, area/zone is required for b grades (quality 02)*/
   /* ------------------------------------------------------------*/
  if (SL0WM001.XWHCD == "51") /* Memphis apparel*/

    if (SL0WM001.SL0WMSEL[SL0WWIXM] == "S") /* Selected*/

      if (SL0WM001.XQACD[SL0WWIXM] == "02") /* Quality 02*/
        if (SL0WM001.SL8TOAR == "  ") /* to area*/
          set SL0WM001.SL8TOAR cursor, bold; /* highlight field*/
          converseLib.validationFailed(471); /* required field*/
        else
          if (SL0WM001.SL8TOZN == "  ") /* to zone*/
            set SL0WM001.SL8TOZN cursor, bold; /* highlight field*/
            converseLib.validationFailed(472); /* required field*/
          end
        end
      end

    end

  end

end // end SL0W520

// validate carton seq nbr
Function SL0W530()
   /* ------------------------------------------------------------*/
   /* validate carton sequence selection*/
   /* ------------------------------------------------------------*/

  SL0WW00.SL0WWIXM = +1; /* set index*/

  SL0WS02(); /* read temp storage*/


  while (SL0WW00.SL0WWIXM <= 14)

    if (SL0WM001.SL0WMSEL[SL0WWIXM] == "S") /* selected carton seq nbr*/
      if (SL0WW00.SL0WWCF1 == " ") /* 1st crtn seq nbr flag*/
        SL0WW00.SL0WWCF1 = "Y";
        SL0WW01.SL0WMSEL[SL0WWIXM] = "S"; /* select crtn seq*/
        SL0WW00.SL0WWTSG = TA5REC.TA5TSQIX; /* save current page*/
        SL0WW00.SY1UNPCS = SL0WW01.SY1UNPCS[SL0WWIXM];
        SL0WW00.SL0WMSEL = SL0WW01.SL0WMSEL[SL0WWIXM];
        SL0WW00.PKDNCSQN = SL0WW01.PKDNCSQN[SL0WWIXM]; /* seq nbr*/
        SL0WW00.XGPCD = SL0WW01.XGPCD[SL0WWIXM]; /* gen prod class*/
        SL0WW00.SY1STNBR = SL0WW01.SY1STNBR[SL0WWIXM]; /* style nbr*/
        SL0WW00.SY2CLRID = SL0WW01.SY2CLRID[SL0WWIXM]; /* color*/
        SL0WW00.XDMCD = SL0WW01.XDMCD[SL0WWIXM]; /* dimension cd*/
        SL0WW00.XQACD = SL0WW01.XQACD[SL0WWIXM]; /* quality cd*/
        SL0WW00.PC2INSEG = SL0WW01.PC2INSEG[SL0WWIXM]; /* iseg cd*/
        SL0WW00.XEGCD = SL0WW01.XEGCD[SL0WWIXM]; /* engr diff cd*/
        /* MOVE SL0WW01.XPGCD(SL0WWIXM) TO*/
             /* SL0WW00.XPGCD;/* packing type cd*/
        SL0WW00.XUMCD = SL0WW01.XUMCD[SL0WWIXM]; /* unit measure cd*/
        SL0WW00.XOWCD = SL0WW01.XOWCD[SL0WWIXM]; /* owner group cd*/
        SL0WW00.SY5SZID = SL0WW01.SY5SZID[SL0WWIXM]; /* size*/
        SL0WW00.SL2RCVD = SL0WW01.SL2RCVD[SL0WWIXM]; /* qty*/
        SL0WW00.PC3PONBR = SL0WW01.PC3PONBR[SL0WWIXM]; /* po nbr*/
        SL0WW00.SL5LOCTN = SL0WW01.SL5LOCTN; /* from location*/
        SL0WW01.SL0WWIFL[SL0WWIXM] = "Y"; /* move yes to item fl*/
   /* test code*/
        SL0WW00.SL0WWTYF = "C"; /* carton work order*/
   /* test code*/
        SL0WW00.SL0WWPNT = 1; /* +1 to pallet count*/
        SL0WW00.SL0WWCNT = 1; /* +1 to carton count*/
      else
        if (SL0WW01.PKDNCSQN[SL0WWIXM] == SL0WW00.PKDNCSQN)
          if (SL0WW01.SL0WWIFL[SL0WWIXM] == " ") /* has the row been counted?*/
            SL0WW01.SL0WWIFL[SL0WWIXM] = "Y"; /* move yes to item fl*/
   /* test code*/
            /* MOVE 'C' TO SL0WW00.SL0WWTYF;  /* carton work order*/
   /* test code*/
            SL0WW01.SL0WMSEL[SL0WWIXM] = "S"; /* select crtn seq*/
            SL0WW00.SL0WWCNT = SL0WW00.SL0WWCNT + 1; /* increment crtn cnt*/
          end
        else
          if (SL0WW01.PKDNCSQN[SL0WWIXM] != SL0WW00.PKDNCSQN /* seq nbr*/
           && SL0WW01.XGPCD[SL0WWIXM] == SL0WW00.XGPCD       /* gen prod*/
           && SL0WW01.SY1STNBR[SL0WWIXM] == SL0WW00.SY1STNBR /* style*/
           && SL0WW01.SY2CLRID[SL0WWIXM] == SL0WW00.SY2CLRID /* color*/
           && SL0WW01.XDMCD[SL0WWIXM] == SL0WW00.XDMCD       /* dimension cd*/
           && SL0WW01.XQACD[SL0WWIXM] == SL0WW00.XQACD       /* quality cd*/
           && SL0WW01.PC2INSEG[SL0WWIXM] == SL0WW00.PC2INSEG /* iseg cd*/
           && SL0WW01.XEGCD[SL0WWIXM] == SL0WW00.XEGCD       /* engr diff cd*/
           /* AND SL0WW01.XPGCD(SL0WWIXM) EQ*/
           /* SL0WW00.XPGCD /* pack type cd*/
           && SL0WW01.XUMCD[SL0WWIXM] == SL0WW00.XUMCD       /* unit msr cd*/
           && SL0WW01.XOWCD[SL0WWIXM] == SL0WW00.XOWCD       /* owner grp cd*/
           && SL0WW01.SY5SZID[SL0WWIXM] == SL0WW00.SY5SZID   /* size*/
           && SL0WW01.SL2RCVD[SL0WWIXM] == SL0WW00.SL2RCVD)  /* qty*/
            if (SL0WW01.SL0WWIFL[SL0WWIXM] == " ") /* has row been counted?*/
              SL0WW01.SL0WWIFL[SL0WWIXM] = "Y";
                                   /* move yes to item fl*/
              SL0WW00.SL0WWTYF = "P"; /* pallet work order*/
              SL0WW01.SL0WMSEL[SL0WWIXM] = "S"; /* select crtn seq*/
              SL0WW00.SL0WWPNT = SL0WW00.SL0WWPNT + 1; /* add to pallet cnt*/
            end
          else
            if (SL0WW01.PKDNCSQN[SL0WWIXM] != SL0WW00.PKDNCSQN /* seq nbr*/
             && SL0WW01.XGPCD[SL0WWIXM] != SL0WW00.XGPCD       /* gpc*/
             && SL0WW01.SY1STNBR[SL0WWIXM] != SL0WW00.SY1STNBR /* style*/
             && SL0WW01.SY2CLRID[SL0WWIXM] != SL0WW00.SY2CLRID /* color*/
             && SL0WW01.XDMCD[SL0WWIXM] != SL0WW00.XDMCD       /* dim cd*/
             && SL0WW01.XQACD[SL0WWIXM] != SL0WW00.XQACD       /* quality cd*/
             && SL0WW01.PC2INSEG[SL0WWIXM] != SL0WW00.PC2INSEG /* iseg*/
             && SL0WW01.XEGCD[SL0WWIXM] != SL0WW00.XEGCD       /* engr diff*/
             /* AND SL0WW01.XPGCD(SL0WWIXM)*/
             /* NE SL0WW00.XPGCD/* pkg type cd*/
             && SL0WW01.XUMCD[SL0WWIXM] != SL0WW00.XUMCD       /* unit msr cd*/
             && SL0WW01.XOWCD[SL0WWIXM] != SL0WW00.XOWCD       /* owner grp*/
             && SL0WW01.SY5SZID[SL0WWIXM] != SL0WW00.SY5SZID   /* size*/
             && SL0WW01.SL2RCVD[SL0WWIXM] != SL0WW00.SL2RCVD)  /* qty*/
              set SL0WM001.SL0WMSEL[SL0WWIXM] cursor, bold;
              converseLib.validationFailed(17); /* invalid selection*/
              SLWREC.XXXLOCID = "530"; /* location id*/
            else
              set SL0WM001.SL0WMSEL[SL0WWIXM] cursor, bold;
              converseLib.validationFailed(17); /* invalid selection*/
              SLWREC.XXXLOCID = "530"; /* location id*/
            end
          end
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* else determine if this carton is to be unselected*/
    /* ------------------------------------------------------------*/

    if (SL0WM001.SL0WMSEL[SL0WWIXM] == " " /* not selected*/
     && SL0WW01.SL0WMSEL[SL0WWIXM] == "S") /* crtn prev selected*/
      SL0WW01.SL0WMSEL[SL0WWIXM] = " "; /* unselect carton*/
      SL0WW01.SL0WWIFL[SL0WWIXM] = " "; /* reset item flag*/
      if (SL0WW00.SL0WWTYF == "C") /* if carton w/o, decrement cnt*/
        if (SL0WW00.SL0WWCNT > 0) /* decrement if greater than 0*/
          SL0WW00.SL0WWCNT = SL0WW00.SL0WWCNT - 1; /* decrement cnt*/
        end
      end
      if (SL0WW00.SL0WWTYF == "P") /* if pallet w/o, decrement cnt*/
        if (SL0WW00.SL0WWPNT > 0) /* decrement if greater than 0*/
          SL0WW00.SL0WWPNT = SL0WW00.SL0WWPNT - 1; /* decrement cnt*/
        end
      end

       /* Now we need to check to see if this carton to be*/
       /* unselected was the first carton requested.  If so,*/
       /* reset the first carton selected flag and the item flag*/
       /* for each item.  Then next time thru this loop, the*/
       /* next carton selected will be tagged as the first*/
       /* carton selected.*/

      if (SL0WW01.PKDNCSQN[SL0WWIXM] == SL0WW00.PKDNCSQN) /* 1st crtn?*/
        SL0WW00.SL0WWCF1 = " "; /* reset first crtn flag*/
        SL0WM001.SL8TOAR = " "; /* reset To Area code*/
        SL0WM001.SL8TOZN = " "; /* reset To Zone code*/
        SL0WM001.SL8TOLC = " "; /* reset To Location code*/
        SL0WW00.SL8TOAR = " "; /* reset To Area code*/
        SL0WW00.SL8TOZN = " "; /* reset To Zone code*/
        SL0WW00.SL8TOLC = " "; /* reset To Location code*/
        SL0WW00.SL0WWTYF = " "; /* reset wo type flag*/
        SL0WW00.SL0WWIX1 = +1; /* move 1 to reset index*/
        while (SL0WW00.SL0WWIX1 <= 14)
          SL0WW01.SL0WWIFL[SL0WWIX1] = " "; /* reset item flag*/
          SL0WW00.SL0WWIX1 = SL0WW00.SL0WWIX1 + 1;
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* else determine if the carton is to be selected for the user*/
    /* ------------------------------------------------------------*/

    if (SL0WW00.SL0WWCF1 == "Y"
     /* if the first carton has been selected*/
     && SL0WW01.SL0WWIFL[SL0WWIXM] == " ") /* row not yet selected*/
      if (SL0WM001.SL0WMSEL[SL0WWIXM] == " ") /* selected carton seq nbr*/
        if (SL0WW01.PKDNCSQN[SL0WWIXM] == SL0WW00.PKDNCSQN)
          SL0WM001.SL0WMSEL[SL0WWIXM] = "S"; /* select for user*/
          SL0WW01.SL0WMSEL[SL0WWIXM] = "S"; /* select for user*/
          SL0WW00.SL0WWTYF = "C"; /* carton work order*/
          SL0WW01.SL0WWIFL[SL0WWIXM] = "Y"; /* move yes to item fl*/
          SL0WW00.SL0WWCNT = SL0WW00.SL0WWCNT + 1; /* increment carton cnt*/
        end
      end
    end

    SL0WW00.SL0WWIXM = SL0WW00.SL0WWIXM + 1;

  end


  SL0WS01(); /* update temporary storage*/


end // end SL0W530

// Select from plan cont. po tbl
Function SL0W580()
   /* ------------------------------------------------------------*/
   /* Select single row from Plan Container PO Table*/
   /* ------------------------------------------------------------*/

  set SWFREC empty; /* initialize record*/

  SWFREC.XWHCD = SL0WM001.XWHCD; /* warehouse code*/
  SWFREC.SWEPLLNB = SL0WM001.SL0WMPLN; /* plan nbr*/
  SWFREC.TSHCNTNR = SL0WM001.TS3CNTNR; /* container*/
  SWFREC.XGPCD = SL0WW00.XGPCD; /* gpc*/
  SWFREC.PC3PONBR = SL0WW00.PC3PONBR; /* po nbr*/

  try
    call "IO5340" ("S ", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* select line*/

  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful read*/
      if (SWFREC.SWFCRCFL == "Y")
        if (converseVar.validationMsgNum == 0)
          SLWREC.XXXLOCID = "580"; /* module identification*/
          converseLib.validationFailed(79); /* carton already updated*/
          set SL0WM001.XWHCD cursor, bold; /* highlight whse cd*/
          return; /* return to previous process*/
        else
          set SL0WM001.XWHCD bold; /* highlight whse cd*/
          return; /* return to previous process*/
        end
      end
      if (SWFREC.SWFCPWOF == "N")
        if (converseVar.validationMsgNum == 0)
          SLWREC.XXXLOCID = "580"; /* module identification*/
          converseLib.validationFailed(225); /* no more unexpected cartons found*/
          set SL0WM001.XWHCD cursor, bold; /* highlight whse cd*/
          return; /* return to previous process*/
        else
          set SL0WM001.XWHCD bold; /* highlight whse cd*/
          return; /* return to previous process*/
        end
      end
      if (SWFREC.SWFCPWOF != "N"
       && SWFREC.SWFCRCFL != "Y")
        return; /* return to previous process*/
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SL0WW00.SL0WWSWD = "1"; /* Map to be displayed switch*/
  SL0WW00.SL0WWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "580"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE PLAN CONT. PO TBL "; /* LOC*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0W580

// Process valid input request
Function SL0W600()
   /* ------------------------------------------------------------*/
   /* Return to previous process if an error was found in the*/
   /* data validations.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* if an error was found*/
    return; /* return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If enter is pressed.*/
   /* ------------------------------------------------------------*/
  SL0WW00.SL0WWSWF = "Y"; /* Format the map switch*/

  if (converseVar.eventKey is enter /* enter requested*/
   || converseVar.eventKey is pf6) 

    SL0W610(); /* perform validations*/

  end

   /* ------------------------------------------------------------*/
   /* If a PF6 was requested.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6       /* PF6 requested*/
   && converseVar.validationMsgNum == 0 /* and no errors found*/
   && SL0WW00.SL0WWCF1 == "Y")          /* and at least 1 carton selected*/

    SL0W650(); /* perform update and submit job*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    SL0WW00.XXXTSPAG = SL0WW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    SL0WW00.XXXTSPAG = SL0WW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* At least 1 carton must be selected.  If the first carton*/
   /* selected flag does not = yes, display an error message.*/
   /* If at least 1 carton was selected, display press pf6 to*/
   /* submit job message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* if no other errors found*/
    if (SL0WW00.SL0WWCF1 != "Y") /* if no cartons selected*/
      converseLib.validationFailed(240); /* select 1 of the lines to submit*/
      set SL0WM001.SL0WMSEL[1] cursor; /* set cursor at first select*/
    else
      converseLib.validationFailed(376); /* press pf6 to submit job*/
      set SL0WM001.SL0WMSEL[1] cursor; /* set cursor at first select*/
    end
  end


end // end SL0W600

// If enter requested
Function SL0W610()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  SL0WW00.SL0WWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Request the data to display.*/
   /* ------------------------------------------------------------*/

  SL0WW00.SL0WWSWR = "N"; /* Request for data switch*/

   /* ------------------------------------------------------------*/
   /* If the first carton was selected, search and update*/
   /* the rest of temp storage for other selections.  Other*/
   /* carton sequence numbers will be selected if the carton*/
   /* sequence number matches the first carton selected.*/
   /* ------------------------------------------------------------*/

  if (SL0WW00.SL0WWCF1 == "Y") /* a carton has been selected*/
    SL0W611(); /* update temp storage pages*/
  end

   /* ------------------------------------------------------------*/
   /* Read DSTLOC.VLOCAT01 for a location.*/
   /* ------------------------------------------------------------*/

  SL0W615(); /* read for TO area, zone, and location*/


   /* ------------------------------------------------------------*/
   /* If a pallet work order is to be created, read*/
   /* DSTLOC.VUCASE01 to determine if number of carton sequence*/
   /* numbers selected fall with a minimum and maximum value.*/
   /* ------------------------------------------------------------*/

  if (SL0WW00.SL0WWTYF == "P") /* if pallet work order*/
    SL0W618(); /* read vucase for min/max ranges*/
  end


end // end SL0W610

// Determine if other selects
Function SL0W611()
   /* ------------------------------------------------------------*/
   /* read temp storage pages to determine if other carton*/
   /* sequence numbers are to be selected.  carton work orders*/
   /* are selected when the carton sequence number matches the*/
   /* very first carton sequence number selected.*/
   /* ------------------------------------------------------------*/

  SL0WW00.SL0WWSPG = SL0WW00.XXXTSPAG; /* save page count*/
  SL0WW00.XXXTSPAG = 1; /* set page cnt to 1*/

  while (SL0WW00.XXXTSPAG <= SL0WW00.TA5TSQIX)
    if (SL0WW00.XXXTSPAG == SL0WW00.SL0WWTSG) /* compare to current page*/
      SL0WW00.XXXTSPAG = SL0WW00.XXXTSPAG + 1; /* increment page cnt*/
    else
      SL0W612(); /* check for other sequence numbers to select*/
      SL0WW00.XXXTSPAG = SL0WW00.XXXTSPAG + 1; /* increment page cnt*/
    end
  end
  SL0WW00.XXXTSPAG = SL0WW00.SL0WWSPG; /* reset page counter*/


end // end SL0W611

// Read temp storage for selects
Function SL0W612()
   /* ------------------------------------------------------------*/
   /* Validate the temporary storage carton sequence numbers.*/
   /* If the temp storage carton sequence number matches the*/
   /* saved carton sequence number, move 's' to the select field.*/
   /* If a carton sequence number was selected, temp storage will*/
   /* be updated.*/
   /* ------------------------------------------------------------*/

  SL0WW00.SL0WWIXM = +1; /* set index*/

  SL0WS02(); /* read temp storage*/

  while (SL0WW00.SL0WWIXM <= 14)

    if (SL0WW01.PKDNCSQN[SL0WWIXM] == SL0WW00.PKDNCSQN
     && SL0WW01.SL0WMSEL[SL0WWIXM] != "*") /* crtn not already processed*/
      SL0WW00.SL0WWTYF = "C"; /* carton work order*/
      SL0WW01.SL0WMSEL[SL0WWIXM] = "S"; /* move 's' to map select fld*/
      SL0WW00.SL0WWCNT = SL0WW00.SL0WWCNT + 1; /* increment carton cnt*/
    end

    SL0WW00.SL0WWIXM = SL0WW00.SL0WWIXM + 1;

  end

   /* ------------------------------------------------------------*/
   /* If a selection was made, update this page in temp storage.*/
   /* ------------------------------------------------------------*/

  if ("S" in SL0WW01.SL0WMSEL)
    SL0WS01(); /* update temporary storage*/
  end
end // end SL0W612

// Select from dstloc.vlocat01
Function SL0W615()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Validate area, zone and location*/
   /* ------------------------------------------------------------*/

   /* if area, zone, and location were all entered, perform*/
   /* select unique on dstloc.vlocat01.*/

  if (SL0WM001.SL8TOAR > " " /* To area entered*/
   && SL0WM001.SL8TOZN > " " /* To zone entered*/
   && SL0WM001.SL8TOLC > " ") /* To location entered*/
    SL5REC.XWHCD = SL0WM001.XWHCD; /* build sl5rec fields*/
    SL5REC.XARCD = SL0WM001.SL8TOAR;
    SL5REC.SL4ZONE = SL0WM001.SL8TOZN;
    SL5REC.SL5LOCTN = SL0WM001.SL8TOLC;
    SL0WW00.SL8TOAR = SL0WM001.SL8TOAR; /* move area to temp storage*/
    SL0WW00.SL8TOZN = SL0WM001.SL8TOZN; /* move zone to temp storage*/
    SL0WW00.SL8TOLC = SL0WM001.SL8TOLC; /* move loc to temp storage*/

    if (SL0WM001.XWHCD == "07")
      if (SL0WM001.SL8TOAR == "03"
       || SL0WM001.SL8TOAR == "04"
       || SL0WM001.SL8TOAR == "09")
        converseLib.validationFailed(402); /* 'TO' area/zone error*/
        SLWREC.XXXLOCID = "615A";
        set SL0WM001.SL8TOAR cursor, bold; /* highlight area*/
        set SL0WM001.SL8TOZN bold; /* highlight zone*/
        set SL0WM001.SL8TOLC bold; /* highlight location*/
        return; /* exit if area is valid*/
      end
    end

    try
      call "IO1490" ("S ", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};
    end /* select unique*/

    if (sysVar.errorCode == "00000000") /* call successful*/
      if (SQLCA.VAGen_SQLCODE == 0) /* area/zone/location found*/
        if (SL5REC.YLSCD != "01") /* NOT EMPTY IS AN ERROR, IF*/
          if (SL5REC.YLTCD == "01" /* BULK*/
           || SL5REC.YLTCD == "22") /* OR HANDSTACK.*/
            if (converseVar.validationMsgNum == 0) /* previous err?*/
              converseLib.validationFailed(120); /* location is not empty*/
              SLWREC.XXXLOCID = "615A";
              set SL0WM001.SL8TOAR cursor, bold; /* highlight area*/
              set SL0WM001.SL8TOZN bold; /* highlight zone*/
              set SL0WM001.SL8TOLC bold; /* highlight location*/
            else /* already had an error*/
              set SL0WM001.SL8TOAR bold; /* highlight area*/
              set SL0WM001.SL8TOZN bold; /* highlight zone*/
              set SL0WM001.SL8TOLC bold; /* highlight location*/
            end
          else /* YLT NE '01' OR '22'*/
                                /* OK IF NOT EMPTY, NEXT SENTENCE.*/
          end
        else /* location is empty*/
          if (SL0WW00.SL0WWTYF == "C" /* if single carton*/
           && SL5REC.YLTCD != "22"    /* and not handstack*/
           && SL0WW00.SL0WWASG == "N") /* location was not assigned*/
            converseLib.validationFailed(400); /* must be handstack*/
            SLWREC.XXXLOCID = "615B";
            set SL0WM001.SL8TOAR cursor, bold; /* highlight area*/
            set SL0WM001.SL8TOZN bold; /* highlight zone*/
            set SL0WM001.SL8TOLC bold; /* highlight location*/
          else
          end /* save off valid location*/
          SL0WM001.SL8TOAR = SL5REC.XARCD; /* area code to map*/
          SL0WM001.SL8TOZN = SL5REC.SL4ZONE; /* zone code to map*/
          SL0WM001.SL8TOLC = SL5REC.SL5LOCTN; /* loc code to map*/
          SL0WW00.SL8TOAR = SL5REC.XARCD; /* area code to ws*/
          SL0WW00.SL8TOZN = SL5REC.SL4ZONE; /* zone code to ws*/
          SL0WW00.SL8TOLC = SL5REC.SL5LOCTN; /* loc code to ws*/
        end
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* end of selected set*/
          if (converseVar.validationMsgNum == 0)
            converseLib.validationFailed(38); /* area/zone/location not found*/
            SLWREC.XXXLOCID = "615C";
            set SL0WM001.SL8TOAR cursor, bold; /* highlight area*/
            set SL0WM001.SL8TOZN bold; /* highlight zone*/
            set SL0WM001.SL8TOLC bold; /* highlight location*/
          else
            set SL0WM001.SL8TOAR bold; /* highlight area*/
            set SL0WM001.SL8TOZN bold; /* highlight zone*/
            set SL0WM001.SL8TOLC bold; /* highlight location*/
          end
        else
          if (SQLCA.VAGen_SQLCODE != 0) /* unexpected error*/
            SLWREC.XXXLOCID = "615D"; /* module identification*/
            TA1REC.TA1TBLKE = SL5REC.SL5KEY; /* table key*/
            TA1REC.TA1LOC = "SELECT UNIQUE STOCK LOCATE TABLE";
            SL0WS09(); /* common error routine*/
          end
        end
      end
      return;
    else /* unexpected error*/
      SLWREC.XXXLOCID = "615E"; /* module identification*/
      TA1REC.TA1TBLKE = SL5REC.SL5KEY; /* table key*/
      TA1REC.TA1LOC = "SELECT UNIQUE STOCK LOCATE TABLE";
      SL0WS09(); /* common error routine*/
      return; /* exit if location is valid*/
    end
  end

   /* ------------------------------------------------------------*/
    /* continue only if work order type flag has been determined.*/
   /* ------------------------------------------------------------*/

  if (SL0WW00.SL0WWTYF == "P" /* pallet work order selected*/
   || SL0WW00.SL0WWTYF == "C") /* carton work order selected*/
  else /* else, exit from this process*/
    return;
  end

   /* ------------------------------------------------------------*/
    /* check to see if case can be sent to picking location.*/
   /* ------------------------------------------------------------*/

  if (SL0WM001.XWHCD == "07") /* Wilsonville ?*/
    if (SL0WW00.SL0WWTYF == "C" /* single carton work order selected*/
     && SL0WM001.SL8TOAR > " "  /* To area entered*/
     && SL0WM001.SL8TOZN > " ") /* To zone entered*/
      SL0W616(); /* Get zone type code, dstloc.vazone01*/
      if (SQLCA.VAGen_SQLCODE == 0) /* area/zone found on vazone01*/
        if (SL4REC.YZTCD == "10" /* and the zone type is*/
         || SL4REC.YZTCD == "26") /* is 10 or 26*/
          SL0W617(); /* Try to get loc from dstloc.vsyasg01*/
          if (SQLCA.VAGen_SQLCODE == 0) /* area/zone/location found on vsyasg01*/
            SL0WM001.SL8TOAR = SL7REC.XARCD; /* area code to map*/
            SL0WM001.SL8TOZN = SL7REC.SL4ZONE; /* zone code to map*/
            SL0WM001.SL8TOLC = SL7REC.SL5LOCTN; /* loc code to map*/
            SL0WW00.SL8TOAR = SL7REC.XARCD; /* area code to ws*/
            SL0WW00.SL8TOZN = SL7REC.SL4ZONE; /* zone code to ws*/
            SL0WW00.SL8TOLC = SL7REC.SL5LOCTN; /* loc code to ws*/
            return; /* got to location, return.*/
          end
        end /* if any of the above conditions are*/
      end /* not met, do a regular single carton*/
    end /* type of default.*/
  end

   /* ------------------------------------------------------------*/
    /* continue with setting up defaults.*/
   /* ------------------------------------------------------------*/

  if (SL0WM001.SL8TOAR == " ") /* To area not entered*/
    if (SL0WW00.SL0WWTYF == "P") /* pallet work order*/
      SL5REC.XARCD = "01"; /* default to 01*/
      SL0WW00.SL8TOAR = "01";
    else
      if (SL0WW00.SL0WWTYF == "C") /* Carton work order*/
        SL5REC.XARCD = "02"; /* default to 02*/
        SL0WW00.SL8TOAR = "02";
      end
    end
  else
    SL5REC.XARCD = SL0WM001.SL8TOAR; /* set up area code*/
    SL0WW00.SL8TOAR = SL0WM001.SL8TOAR;
  end

  if (SL0WM001.SL8TOZN == " ") /* To zone not entered*/
    SL5REC.SL4ZONE = "*"; /* wildcard*/
    SL0WW01.SL8TOZN = "  ";
  else
    SL5REC.SL4ZONE = SL0WM001.SL8TOZN;
    SL0WW00.SL8TOZN = SL0WM001.SL8TOZN;
  end

  SL5REC.XWHCD = SL0WM001.XWHCD; /* warehouse code*/


  SL5REC.YLSCD = "01"; /* location status cd*/
  SL5REC.SL5MPDFL = "N"; /* multiple product flag*/
  SL5REC.SL-LOC-SZ-IND = "N"; /* short pallet flag*/

   /* ------------------------------------------------------------*/
   /* Until the warehouse has hand stack locations, we will be*/
   /* defaulting to a bulk location type code.  The code*/
   /* for hand stack location has been commented out and*/
   /* replaced with a bulk location code.*/
   /* ------------------------------------------------------------*/

  if (SL0WW00.SL0WWTYF == "P") /* Pallet work order*/
    SL5REC.YLTCD = "01"; /* bulk location type code*/
  else
    if (SL0WW00.SL0WWTYF == "C") /* Carton work order*/
      SL5REC.YLTCD = "22"; /* hand stack loc type cd*/
    end
  end

  try
    call "IO1490" ("S1", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};
  end /* declare cursor*/

  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE != 0) /* if the select set was unsuccessful*/
      SLWREC.XXXLOCID = "615F"; /* module identification*/
      TA1REC.TA1TBLKE = SL5REC.SL5KEY; /* table key*/
      TA1REC.TA1LOC = "SELECT SET STOCK LOCATE TABLE";
      SL0WS09(); /* common error routine*/
    end
  else /* unexpected error*/
    SLWREC.XXXLOCID = "615G"; /* module identification*/
    TA1REC.TA1TBLKE = SL5REC.SL5KEY; /* table key*/
    TA1REC.TA1LOC = "SELECT SET STOCK LOCATE TABLE";
    SL0WS09(); /* common error routine*/
  end

    /* fetch the first row*/

  try
    call "IO1490" ("N1", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};
  end /* fetch cursor*/

  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if a location was found*/
      SL0WM001.SL8TOAR = SL5REC.XARCD; /* move area to map*/
      SL0WM001.SL8TOZN = SL5REC.SL4ZONE; /* move zone to map*/
      SL0WM001.SL8TOLC = SL5REC.SL5LOCTN; /* move location to map*/
      SL0WW00.SL8TOAR = SL5REC.XARCD; /* move area to ws*/
      SL0WW00.SL8TOZN = SL5REC.SL4ZONE; /* move zone to ws*/
      SL0WW00.SL8TOLC = SL5REC.SL5LOCTN; /* move loc to ws*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* end of selected set*/
        if (converseVar.validationMsgNum == 0) /* if no other errors found*/
          SLWREC.XXXLOCID = "615H"; /* module identification*/
          converseLib.validationFailed(046); /* no more locations available*/
          set SL0WM001.SL8TOAR cursor, bold; /* highlight area*/
          set SL0WM001.SL8TOZN bold; /* highlight zone*/
          set SL0WM001.SL8TOLC bold; /* highlight location*/
        else
          set SL0WM001.SL8TOAR bold; /* highlight area*/
          set SL0WM001.SL8TOZN bold; /* highlight zone*/
          set SL0WM001.SL8TOLC bold; /* highlight location*/
        end
      else
        if (SQLCA.VAGen_SQLCODE != 0) /* unexpected error*/
          SLWREC.XXXLOCID = "615I"; /* module identification*/
          TA1REC.TA1TBLKE = SL5REC.SL5KEY; /* table key*/
          TA1REC.TA1LOC = "SELECT NEXT STOCK LOCATE TABLE";
          SL0WS09(); /* common error routine*/
        end
      end
    end
  else /* unexpected error*/
    SLWREC.XXXLOCID = "615J"; /* module identification*/
    TA1REC.TA1TBLKE = SL5REC.SL5KEY; /* table key*/
    TA1REC.TA1LOC = "SELECT SET STOCK LOCATE TABLE";
    SL0WS09(); /* common error routine*/
  end

  try
    call "IO1490" ("C1", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};
  end /* close*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and close was successful*/
     /* next sentence*/
  else /* unexpected error*/
    SLWREC.XXXLOCID = "615K"; /* module identification*/
    TA1REC.TA1TBLKE = SL5REC.SL5KEY; /* table key*/
    TA1REC.TA1LOC = "CLOSE THE STOCK LOCATE TABLE CURSOR";
    SL0WS09(); /* common error routine*/
  end

end // end SL0W615

// Select from dstloc.vazone01
Function SL0W616()
   /* ------------------------------------------------------------*/
   /* Try to read dstloc.vazone01 for yzt-zone-typ-cd*/
   /* ------------------------------------------------------------*/

  set SL4REC empty;
  SL4REC.XWHCD = SL0WM001.XWHCD; /* warehouse code*/
  SL4REC.XARCD = SL0WM001.SL8TOAR; /* area code*/
  SL4REC.SL4ZONE = SL0WM001.SL8TOZN; /* zone*/

   /* -------------------------------------------------------------*/
   /* select unique*/
   /* -------------------------------------------------------------*/
   /*  */
  try
    call "IO1480" ("S ", SQLCA, SL4REC) {isNoRefresh = yes, isExternal = yes};
  end /* fetch row*/
  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* area/zone/location found*/
     || SQLCA.VAGen_SQLCODE == 100) /* area/zone/location not found*/
                                  /* next sentence*/
    else
      SLWREC.XXXLOCID = "616A"; /* module identification*/
      TA1REC.TA1TBLKE = SL4REC.SL4KEY; /* table key*/
      TA1REC.TA1LOC = "SELECT UNIQUE VAZONE01 SL0W616";
      set SL0WM001.SL8TOAR cursor, bold; /* highlight area*/
      set SL0WM001.SL8TOZN bold; /* highlight zone*/
      SL0WS13(); /* common error routine*/
    end
  else
    SL0WS13(); /* common error routine*/
  end

end // end SL0W616

// Select from dstloc.vsyasg01
Function SL0W617()
   /* ------------------------------------------------------------*/
   /* Try to read dstloc.vsyasg01 for to location*/
   /* ------------------------------------------------------------*/

  set SL7REC empty;
  SL7REC.XWHCD = SL0WM001.XWHCD; /* warehouse code*/
  SL7REC.XGPCD = SL0WW00.XGPCD; /* GPC code*/
  SL7REC.SY1STNBR = SL0WW00.SY1STNBR; /* style*/
  SL7REC.SY2CLRID = SL0WW00.SY2CLRID; /* color*/
  SL7REC.XDMCD = SL0WW00.XDMCD; /* dim*/
  SL7REC.XQACD = SL0WW00.XQACD; /* qual*/
  SL7REC.XOWCD = SL0WW00.XOWCD; /* owner group*/
  SL7REC.XSDCD = SL0WW00.PC2INSEG; /* spec diff / iseg*/
  SL7REC.XSACD = SL0WW00.XEGCD; /* edif / xsa cd*/
   /* MOVE SL0WW00.XPGCD TO SL7REC.XPGCD;/* pkg typ*/
  SL7REC.XUMCD = SL0WW00.XUMCD; /* unit of measure*/
  SL7REC.SY5SZID = SL0WW00.SY5SZID; /* size*/
  SL7REC.XXXSTAT = "A"; /* status*/
  SL7REC.XARCD = SL0WM001.SL8TOAR; /* area code*/
  SL7REC.SL4ZONE = SL0WM001.SL8TOZN; /* zone*/
  SL7REC.SL5LOCTN = "*"; /* location*/

  SL0WW00.SL0WWASG = "N"; /* initialize assigned location flag*/
   /* -------------------------------------------------------------*/
   /* open cursor*/
   /* -------------------------------------------------------------*/
   /*  */
  try
    call "IO1550" ("S1", SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};
  end /* open cursor*/
  if (sysVar.errorCode == "00000000") /* call successful*/
                                  /* next sentence*/
  else
    SL0WS12(); /* error rtn for vsyasg01*/
  end

   /* -------------------------------------------------------------*/
   /* fetch first row*/
   /* -------------------------------------------------------------*/
   /*  */
  try
    call "IO1550" ("N1", SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};
  end /* fetch row*/
  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* area/zone/location found*/
      SL0WW00.SL0WWASG = "Y"; /* turn on assigned location flag*/
      SL0WM001.SL8TOAR = SL7REC.XARCD; /* area code to map*/
      SL0WM001.SL8TOZN = SL7REC.SL4ZONE; /* zone code to map*/
      SL0WM001.SL8TOLC = SL7REC.SL5LOCTN; /* loc code to map*/
      SL0WW00.SL8TOAR = SL7REC.XARCD; /* area code to ws*/
      SL0WW00.SL8TOZN = SL7REC.SL4ZONE; /* zone code to ws*/
      SL0WW00.SL8TOLC = SL7REC.SL5LOCTN; /* loc code to ws*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* area/zone/location not found*/
        converseLib.validationFailed(86); /* product assignment not found*/
        SLWREC.XXXLOCID = "616A";
        set SL0WM001.SL8TOZN cursor, bold; /* highlight area*/
        SL7REC.SL5LOCTN = " "; /* remove wildcard*/
      else
        SLWREC.XXXLOCID = "616B"; /* module identification*/
        TA1REC.TA1TBLKE = SL7REC.SL7KEY; /* table key*/
        TA1REC.TA1LOC = "FETCH CURSOR VSYASG01 SL0W616";
        set SL0WM001.SL8TOAR cursor, bold; /* highlight area*/
        set SL0WM001.SL8TOZN bold; /* highlight zone*/
        SL0WS12(); /* common error routine*/
      end
    end
  else
    SL0WS12(); /* common error routine*/
  end

   /* -------------------------------------------------------------*/
   /* close cursor*/
   /* -------------------------------------------------------------*/
   /*  */
  try
    call "IO1550" ("C1", SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};
  end /* open cursor*/
  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /**/
   /* next sentence*/
    else
      SLWREC.XXXLOCID = "616C"; /* module identification*/
      TA1REC.TA1TBLKE = SL7REC.SL7KEY; /* table key*/
      TA1REC.TA1LOC = "SELECT UNIQUE STOCK LOCATE TABLE";
      SL0WS12(); /* common error routine*/
    end
  end

end // end SL0W617

// Verify units per case
Function SL0W618()
   /* ------------------------------------------------------------*/
   /* Set the selection criteria for the VUCASE01 cursor.*/
   /* ------------------------------------------------------------*/

  set SWPREC empty; /* Row storage area*/

  SWPREC.XWHCD = SL0WM001.XWHCD; /* Warehouse*/
  SWPREC.XGPCD = SL0WW00.XGPCD; /* GPC*/
  SWPREC.SY1STNBR = SL0WW00.SY1STNBR; /* Style*/
  SWPREC.SY2CLRID = SL0WW00.SY2CLRID; /* Color*/
  SWPREC.XDMCD = SL0WW00.XDMCD; /* Dimension*/

   /* ------------------------------------------------------------*/
   /* Open the cursor for the selected set of VUCASE01 rows.*/
   /* ------------------------------------------------------------*/

  SL0WS05(); /* Open the cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch the selected rows until required units/case is found.*/
   /* ------------------------------------------------------------*/

  SL0WW00.SL0WWUPM = "N"; /* Match found switch*/

  SL0WW00.XXX-REC-SEQ-NBR = 0; /* Sequence number*/

  while (SL0WW00.SL0WWUPC == "N" /* Until end of cursor*/
   && SL0WW00.SL0WWUPM == "N") /* or match found*/

    SL0WS06(); /* Fetch the next row*/

    if (SL0WW00.SL0WWUPC == "N" /* Normal return*/
    )                          
      if (SWPREC.XXX-REC-SEQ-NBR > SL0WW00.XXX-REC-SEQ-NBR)

        SL0WW00.XXX-REC-SEQ-NBR = SWPREC.XXX-REC-SEQ-NBR;
      else
        SL0WW00.SL0WWUPC = "Y"; /* Force end of cursor*/

      end

    end

    if (SL0WW00.SL0WWUPC == "N" /* Normal return*/
     && SWPREC.SY1UNPCS == SL0WW00.SY1UNPCS) /* and same units/case*/

      SL0WW00.SL0WWUPM = "Y"; /* Match found*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If match was found, check minimum/maximum cases per pallet.*/
   /* ------------------------------------------------------------*/

  if (SL0WW00.SL0WWUPM == "N" /* No match found*/
   && SL0WM001.XWHCD != "07") /* bypass whse 07*/

    SLWREC.XXXLOCID = "618"; /* location id*/
    set SL0WM001.TS3CNTNR cursor, bold; /* highlight container*/
    converseLib.validationFailed(232); /* pallet info not found*/

  else

    if (SWPREC.SWPMNCP == 0 /* if the min = zero*/
     && SWPREC.SWPMXCP == 0) /* and the max = 0*/

      if (SL0WW00.SL0WWPNT < 4) /* Pallet count LT 4*/

        SLWREC.XXXLOCID = "618"; /* location id*/
        set SL0WM001.TS3CNTNR cursor, bold; /* highlight cntnr*/
        converseLib.validationFailed(233); /* Pallet count LT minimum*/

      end

      if (SL0WW00.SL0WWPNT > 12) /* Pallet count GT 12*/

        SLWREC.XXXLOCID = "618"; /* location id*/
        set SL0WM001.TS3CNTNR cursor, bold; /* highlight cntnr*/
        converseLib.validationFailed(234); /* Pallet count GT maximum*/

      end

    else

      if (SL0WW00.SL0WWPNT < SWPREC.SWPMNCP) /* Pallet count LT minimum*/

        SLWREC.XXXLOCID = "618"; /* location id*/
        set SL0WM001.TS3CNTNR cursor, bold; /* highlight cntnr*/
        converseLib.validationFailed(233); /* Pallet count LT minimum*/

      end

      if (SL0WW00.SL0WWPNT > SWPREC.SWPMXCP) /* Pallet count GT maximum*/

        SLWREC.XXXLOCID = "618"; /* location id*/
        set SL0WM001.TS3CNTNR cursor, bold; /* highlight cntnr*/
        converseLib.validationFailed(234); /* Pallet count GT maximum*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set of VUCASE01 rows.*/
   /* ------------------------------------------------------------*/

  SL0WS07(); /* Close the cursor*/


end // end SL0W618

// perform update & sub batch job
Function SL0W650()

   /* ------------------------------------------------------------*/
   /* If a printer destination was not selected, call TA0P for*/
   /* the printer destination.*/
   /* ------------------------------------------------------------*/
  if (SL0WW00.XROPDEST == " " /* if no  printer destination selected*/
   || SL0WW00.XROPDEST == "?") /* or no  printer destination selected*/

    TA6REC.TA6SUBSW = "N"; /* display map, do not submit job*/
    XPTA0P(); /* print request information*/

    if (sysVar.errorCode == "00000000") /* if call successful*/
      if (TA6REC.TA6RTNCD == "0") /* if printer was selected*/
        SL0WW00.XROPDEST = TA6REC.XURDEST; /* move printer selected*/
      end
      if (TA6REC.TA6RTNCD == "1") /* if pa2 (cancel) was selected*/
        exit stack; /* go to flow process*/
      end
      if (TA6REC.TA6RTNCD > "1") /* if pa2 (cancel) was selected*/
        converseLib.validationFailed(1); /* unexpected error occurred*/
        exit stack; /* go to flow process*/
      end
    else
      converseLib.validationFailed(1); /* unexpected error occurred*/
      exit stack; /* go to flow process*/
    end

  end


   /* ------------------------------------------------------------*/
   /* If a PF6 was requested.*/
   /* This process will update the databases.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get current system date and time*/


  SWEREC.XWHCD = SL0WM001.XWHCD; /* warehouse cd*/
  SWEREC.SWEPLLNB = SL0WM001.SL0WMPLN; /* plan nbr*/

   /* ------------------------------------------------------------*/
   /* If the work order type has not been determined, default*/
   /* to a carton work order.  If the area, zone, and location*/
   /* have not been obtained at this point, get the information*/
   /* from DSTLOC.VLOCAT01.*/
   /* ------------------------------------------------------------*/

  if (SL0WW00.SL0WWTYF == " ") /* work order type not selected*/

    SL0WW00.SL0WWTYF = "C"; /* default to carton work order*/

    if (SL0WW00.SL8TOAR == " ") /* to area = spaces*/
      SL0W615(); /* obtain area/zone/location data*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, return to previous process*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* ezemno not equal zero*/
    return; /* return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If a pallet work order was requested, get the next pallet*/
   /* number from dstloc.vplnhd01 - plan header.*/
   /* ------------------------------------------------------------*/

  if (SL0WW00.SL0WWTYF == "P") /* pallet work order*/

    SWEREC.XWHCD = SL0WW00.XWHCD; /* whse cd*/
    SWEREC.SWEPLLNB = SL0WW00.SWEPLLNB; /* plan nbr*/

    try
      call "IO5350" ("S ", SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* select single row*/

    if (sysVar.errorCode == "00000000") /* call successful*/
      if (SQLCA.VAGen_SQLCODE == 0) /* call successful*/

        SL0WW00.SL0WWNPL = SWEREC.SWEPPLTN; /* unpack pallet nbr*/
        SL0WW00.SL2PALET = SL0WW00.SL0WWNPL; /* move pallet nbr to ws*/
        SL0WW01.SL2PALET = SL0WW00.SL0WWNPL; /* move pallet nbr*/
        SL0WM001.SL2PALET = SL0WW00.SL0WWNPL; /* pallet nbr to map*/

        SWEREC.SWEPPLTN = SWEREC.SWEPPLTN + 1; /* increment pallet nbr*/

        try
          call "IO5350" ("U ", SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
        end /* update*/

        if (sysVar.errorCode != "00000000" /* call successful*/
         || SQLCA.VAGen_SQLCODE != 0)      /* unexpected error*/
          SLWREC.XXXLOCID = "650"; /* module identification*/
          TA1REC.TA1LOC = "UPDATE UNIQUE PLAN HEADER TABLE"; /* LOC*/
          SL0WS08(); /* common error routine*/
        end

      else /* else    plan header not found*/
        SLWREC.XXXLOCID = "650"; /* module identification*/
        TA1REC.TA1LOC = "SELECT UNIQUE PLAN HEADER TABLE "; /* LOC*/
        SL0WS08(); /* common error routine*/

      end
    end

  end


   /* ------------------------------------------------------------*/
   /* Update all receiving log item rows selected*/
   /* ------------------------------------------------------------*/

  SL0W660(); /* update dstloc.vrlitm01*/


   /* ------------------------------------------------------------*/
   /* Update stock locate information - DSTLOC.VLOCAT01.*/
   /* ------------------------------------------------------------*/

  SL0W670(); /* update dstloc.vlocat01*/

   /* ------------------------------------------------------------*/
   /* If no errors were found, commit the database changes and*/
   /* build jcl and submit the batch job.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    /* ------------------------------------------------------------*/
     /* Build jcl for batch job.*/
    /* ------------------------------------------------------------*/

    if (SL0WM001.XWHCD == "07") /* WILSONVILLE*/
      SL0W681(); /* build jcl for batch job*/
    else
      if (SL0WM001.XWHCD == "51") /* MEMPHIS APPAREL*/
        SL0W680(); /* build jcl for batch job*/
      else
        SL0W680(); /* build jcl for batch job*/
      end

    end

    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

    /* ------------------------------------------------------------*/
     /* Move '*' to the cartons on the map currently displayed to*/
     /* indicate that they have been processed.*/
    /* ------------------------------------------------------------*/

    SL0WW00.SL0WWIXM = +1; /* set index to 1*/

    while (SL0WW00.SL0WWIXM <= 14) /* while index less than 14*/

      if (SL0WM001.SL0WMSEL[SL0WWIXM] == "S") /* if carton selected*/
        SL0WM001.SL0WMSEL[SL0WWIXM] = "*"; /* this crtn processed*/
      end

      SL0WW00.SL0WWIXM = SL0WW00.SL0WWIXM + 1; /* increment index*/
    end

    /* ------------------------------------------------------------*/
     /* Reset key information for the next bunch of selected*/
     /* cartons to create work orders.*/
    /* ------------------------------------------------------------*/

    SL0WW00.SL8TOAR = " "; /* to area*/
    SL0WW00.SL8TOZN = " "; /* to zone*/
    SL0WW00.SL8TOLC = " "; /* to location*/

    SL0WM001.SL8TOAR = " "; /* to area*/
    SL0WM001.SL8TOZN = " "; /* to zone*/
    SL0WM001.SL8TOLC = " "; /* to location*/

    set SL0WM001.SL8TOAR normal; /* to area*/
    set SL0WM001.SL8TOZN normal; /* to zone*/
    set SL0WM001.SL8TOLC normal; /* to location*/

    SL0WW00.SL2PALET = " "; /* pallet*/
    SL0WW00.SL0WWTYF = " "; /* pallet / carton wo flag*/
    SL0WW00.SL0WWASG = " "; /* assigned location flag*/
    SL0WW00.SL0WWCF1 = " "; /* counter*/
    SL0WW00.SL0WWPNT = 0; /* pallet counter*/
    SL0WW00.SL0WWCNT = 0; /* carton counter*/

  end


  exit stack;


end // end SL0W650

// Update RL item rows selected
Function SL0W660()
   /* ------------------------------------------------------------*/
   /* read every page of temp storage for items selected*/
   /* ------------------------------------------------------------*/

  SL0WW00.SL0WWSPG = SL0WW00.XXXTSPAG; /* save page nbr*/
  SL0WW00.XXXTSPAG = 1; /* set page number to 1*/

   /* ------------------------------------------------------------*/
   /* Read thru temp storage from page 1 for carton numbers*/
   /* selected, update corresponding SL Receipt Log Items*/
   /* ------------------------------------------------------------*/

  while (SL0WW00.XXXTSPAG <= SL0WW00.TA5TSQIX)
    SL0WS02(); /* read temp storage*/

    if ("S" in SL0WW01.SL0WMSEL) /* if any cartons selected*/

      SL0WW00.SL0WWIXM = +1; /* set index to +1*/

      while (SL0WW00.SL0WWIXM <= 14)
        if (SL0WW01.SL0WMSEL[SL0WWIXM] == "S") /* selected*/

          /* ------------------------------------------------------------*/
           /* move '*' to map select field to indicate that this carton*/
           /* has been processed.*/
          /* ------------------------------------------------------------*/

          SL0WW01.SL0WMSEL[SL0WWIXM] = "*"; /* crtn now processed*/
          SL0WW01.SL0WWIFL[SL0WWIXM] = " "; /* reset item select fl*/

          /* ------------------------------------------------------------*/
           /* Select the individual receving log item from the table*/
          /* ------------------------------------------------------------*/

          set SL2REC empty; /* Clear row storage area*/

          SL2REC.XWHCD = SL0WW01.XWHCD; /* Warehouse code*/
          SL2REC.SWEPLLNB = SL0WW01.SWEPLLNB; /* Plan number*/
          SL2REC.TS3CNTNR = SL0WW01.TSHCNTNR; /* Container*/
          SL2REC.SL2PALET = " "; /* spaces to pallet number*/
          SL2REC.PKDNCSQN = SL0WW01.PKDNCSQN[SL0WWIXM]; /* crtn seq*/
          SL2REC.SL2CASE = SL0WW01.SL2CASE[SL0WWIXM]; /* sl-rlog-case*/
          SL2REC.PC3PONBR = SL0WW01.PC3PONBR[SL0WWIXM]; /* po nbr*/
          SL2REC.XGPCD = SL0WW01.XGPCD[SL0WWIXM]; /* gpc cd*/
          SL2REC.SY1STNBR = SL0WW01.SY1STNBR[SL0WWIXM]; /* style nbr*/
          SL2REC.SY2CLRID = SL0WW01.SY2CLRID[SL0WWIXM];
                                   /* color cd id*/
          SL2REC.XDMCD = SL0WW01.XDMCD[SL0WWIXM]; /* dim cd*/
          SL2REC.XQACD = SL0WW01.XQACD[SL0WWIXM]; /* qual cd*/
          SL2REC.XOWCD = SL0WW01.XOWCD[SL0WWIXM]; /* own grp cd*/
          SL2REC.PC2INSEG = SL0WW01.PC2INSEG[SL0WWIXM]; /* iseg cd*/
          SL2REC.XEGCD = SL0WW01.XEGCD[SL0WWIXM]; /* engr diff cd*/
          SL2REC.XSLCD = SL0WW01.XSLCD[SL0WWIXM]; /* class cd*/
          SL2REC.XPGCD = SL0WW01.XPGCD[SL0WWIXM]; /* pkg type cd*/
          SL2REC.XUMCD = SL0WW01.XUMCD[SL0WWIXM]; /* unit of measure*/
          SL2REC.SY5SZID = SL0WW01.SY5SZID[SL0WWIXM]; /* size id*/

           /* select unique dstloc.vrlitm01*/

          try
            call "IO1580" ("SB", SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
          end /* Select*/

          if (sysVar.errorCode == "00000000") /* Call successful*/
            if (SQLCA.VAGen_SQLCODE == 0) /* successful*/

              SL0W665(); /* delete and insert new row*/

            else
              SLWREC.XXXLOCID = "660"; /* module identification*/
              TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* table key*/
              TA1REC.TA1LOC = "SELECT UNIQUE RL LOG ITEM"; /* LOC*/
              SL0WS11(); /* common error routine*/
            end
          else
            SLWREC.XXXLOCID = "660"; /* module identification*/
            TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* table key*/
            TA1REC.TA1LOC = "SELECT UNIQUE RL LOG ITEM"; /* LOC*/
            SL0WS11(); /* common error routine*/
          end
        end
        SL0WW00.SL0WWIXM = SL0WW00.SL0WWIXM + 1; /* increment index*/
      end
      SL0WS01(); /* update temp storage page*/
    end
    SL0WW00.XXXTSPAG = SL0WW00.XXXTSPAG + 1; /* increment page number*/
  end

  SL0WW00.XXXTSPAG = SL0WW00.SL0WWSPG; /* reset page nbr*/


end // end SL0W660

// Delete and insert vrlitm01 row
Function SL0W665()

   /* ------------------------------------------------------------*/
   /* delete the receiving log item.*/

   /* move the to area, zone, location, the pallet number, and*/
   /* current date and time to the receiving log item record.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1580" ("D2", SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Delete*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* successful*/

      SL2REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
      SL2REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
      SL2REC.SL8TOAR = SL0WM001.SL8TOAR; /* to zrea code*/
      SL2REC.SL8TOZN = SL0WM001.SL8TOZN; /* to zone code*/
      SL2REC.SL8TOLC = SL0WM001.SL8TOLC; /* to location cd*/
      SL2REC.SL2PALET = SL0WW00.SL2PALET; /* pallet nbr*/

      try
        call "IO1580" ("A ", SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
      end /* Add row*/

      if (sysVar.errorCode != "00000000" /* Call successful*/
       || SQLCA.VAGen_SQLCODE != 0)      /* Not found*/
        SLWREC.XXXLOCID = "665"; /* module identification*/
        TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* table key*/
        TA1REC.TA1LOC = "INSERT RECEIVING LOG ITEM "; /* LOC*/
        SL0WS11(); /* common error routine*/
      end

    else
      SLWREC.XXXLOCID = "665"; /* module identification*/
      TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* table key*/
      TA1REC.TA1LOC = "DELETE UNIQUE RL LOG ITEM"; /* LOC*/
      SL0WS11(); /* common error routine*/
    end
  else
    SLWREC.XXXLOCID = "665"; /* module identification*/
    TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* table key*/
    TA1REC.TA1LOC = "DELETE UNIQUE RL LOG ITEM"; /* LOC*/
    SL0WS11(); /* common error routine*/
  end


end // end SL0W665

// Update dstloc.vlocat01 table
Function SL0W670()
   /* ------------------------------------------------------------*/
   /* update stock locate information (SL5REC)*/
   /* dstloc.vlocat01*/
   /* ------------------------------------------------------------*/

  SL5REC.XWHCD = SL0WM001.XWHCD; /* warehouse cd*/
  SL5REC.XARCD = SL0WM001.SL8TOAR; /* to area*/
  SL5REC.SL4ZONE = SL0WM001.SL8TOZN; /* to zone*/
  SL5REC.SL5LOCTN = SL0WM001.SL8TOLC; /* to location*/

  try
    call "IO1490" ("S ", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};
  end /* select single row*/

  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      SLWREC.XXXLOCID = "670A"; /* module identification*/
      converseLib.validationFailed(235); /* location is not available*/
      set SL0WM001.SL8TOAR cursor, bold; /* highlight to area*/
      set SL0WM001.SL8TOZN bold; /* highlight to area*/
      set SL0WM001.SL8TOLC bold; /* highlight to area*/
      return;

    else
      if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return*/
        SLWREC.XXXLOCID = "670B"; /* module identification*/
        TA1REC.TA1TBLKE = SL5REC.SL5KEY; /* table key*/
        TA1REC.TA1LOC = "SELECT UNIQUE STOCK LOCATE TABLE"; /* LOC*/
        SL0WS09(); /* common error routine*/
      end
    end

  else
    SLWREC.XXXLOCID = "670C"; /* module identification*/
    TA1REC.TA1TBLKE = SL5REC.SL5KEY; /* table key*/
    TA1REC.TA1LOC = "SELECT UNIQUE STOCK LOCATE TABLE"; /* LOC*/
    SL0WS09(); /* common error routine*/
  end

  if (SL5REC.YLTCD == "22" /* IF HANDSTACK*/
   || SL5REC.YLTCD == "01") /* OR BULK*/
                                 /* CONTINUE*/
  else /* ELSE*/
    return; /* DO NOT UPDATE*/
  end

  if (SL5REC.YLSCD == "01")
    SL5REC.YLSCD = "08";

    if (SL0WW00.SL0WWCNT > 0) /* carton wo count*/
      SL5REC.SL5MPDFL = "Y"; /* yes, multiple product flag*/
    else
      SL5REC.SL5MPDFL = "N"; /* no, multiple product flag*/
    end

    try
      call "IO1490" ("U ", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};
    end /* update*/

    if (sysVar.errorCode != "00000000"
     || SQLCA.VAGen_SQLCODE != 0) /* call unsuccessful*/
      SLWREC.XXXLOCID = "670D"; /* module identification*/
      TA1REC.TA1TBLKE = SL5REC.SL5KEY; /* table key*/
      TA1REC.TA1LOC = "UPDATE STOCK LOCATE TABLE"; /* LOC*/
      SL0WS09(); /* common error routine*/
    end

  else
    SLWREC.XXXLOCID = "670E"; /* module identification*/
    converseLib.validationFailed(235); /* location is not available*/
    set SL0WM001.SL8TOAR cursor, bold; /* highlight to area*/
    set SL0WM001.SL8TOZN bold; /* highlight to area*/
    set SL0WM001.SL8TOLC bold; /* highlight to area*/
    return;
  end


end // end SL0W670

// build jcl and submit job
Function SL0W680()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  set SL0WW04 empty; /* Parameters work area*/

  move " " to TA6REC.TA6ROW[1] for all; /* jcl work area*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SL0WT.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      SL0WW04.XWHCD = SL0WW01.XWHCD; /* warehouse code*/
      SL0WW04.TSHCNTNR = SL0WW01.TSHCNTNR; /* container*/

      if (SL0WW00.SL0WWTYF == "P") /* pallet work order*/
        SL0WW04.SL0WWOFL = "P";
      else
        SL0WW04.SL0WWOFL = "C"; /* carton work order*/
      end

      SL0WW04.SL0WWCSQ = SL0WW00.PKDNCSQN; /* seq nbr*/
      SL0WW04.SL2PALET = SL0WW00.SL2PALET; /* pallet nbr*/
      SL0WW04.SL5LOCTN = SL0WW00.SL5LOCTN; /* from location*/
      SL0WW04.SL0WWPLN = SL0WW00.SWEPLLNB; /* plan nbr*/
      SL0WW04.SL0WWWOG = SL0WW00.SL8WOGRP; /* wo grp*/
      SL0WW04.SL0WWNBR = SL0WW00.SL8WONBR; /* wo nbr*/
      SL0WW04.SL0WWCRT = COMMAREA.CAUSERID; /* crt user*/
      SL0WW04.SL0WWPUW = "U"; /* planned/unplanned wo*/

      TA6REC.TARJCL[TA6INDEX] = SL0WW04.TARJCL; /* Parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SL0WT.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SL0WT.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SL0WT.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  if (SL0WW00.XROPDEST == " ")
    TA6REC.TA6SUBSW = "Y"; /* Tailor and submit the JCL*/
  else
    TA6REC.XURDEST = SL0WW00.XROPDEST; /* move dest*/
    TA6REC.TA6SUBSW = "S"; /* don't converse print screen*/
  end

  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* print request subroutine*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    SL0WW00.XROPDEST = TA6REC.XURDEST; /* move dest to ws*/
    SL0WM001.XROPDEST = SL0WW00.XROPDEST; /* move dest to map*/
    SL0WW00.SL0WWSWF = "N"; /* format map switch*/
    SL0WW00.SL0WWSWR = "N"; /* request for data switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end SL0W680

// build jcl and sub job, WHSE 07
Function SL0W681()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  set SL0WW04 empty; /* Parameters work area*/

  move " " to TA6REC.TA6ROW[1] for all; /* jcl work area*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SL0WT07.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      SL0WW04.XWHCD = SL0WW01.XWHCD; /* warehouse code*/
      SL0WW04.TSHCNTNR = SL0WW01.TSHCNTNR; /* container*/

      if (SL0WW00.SL0WWTYF == "P") /* pallet work order*/
        SL0WW04.SL0WWOFL = "P";
      else
        SL0WW04.SL0WWOFL = "C"; /* carton work order*/
      end

      SL0WW04.SL0WWCSQ = SL0WW00.PKDNCSQN; /* seq nbr*/
      SL0WW04.SL2PALET = SL0WW00.SL2PALET; /* pallet nbr*/
      SL0WW04.SL5LOCTN = SL0WW00.SL5LOCTN; /* from location*/
      SL0WW04.SL0WWPLN = SL0WW00.SWEPLLNB; /* plan nbr*/
      SL0WW04.SL0WWWOG = SL0WW00.SL8WOGRP; /* wo grp*/
      SL0WW04.SL0WWNBR = SL0WW00.SL8WONBR; /* wo nbr*/
      SL0WW04.SL0WWCRT = COMMAREA.CAUSERID; /* crt user*/
      SL0WW04.SL0WWPUW = "U"; /* planned/unplanned wo*/

      TA6REC.TARJCL[TA6INDEX] = SL0WW04.TARJCL; /* Parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SL0WT07.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SL0WT07.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SL0WT07.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  if (SL0WW00.XROPDEST == " ")
    TA6REC.TA6SUBSW = "Y"; /* Tailor and submit the JCL*/
  else
    TA6REC.XURDEST = SL0WW00.XROPDEST; /* move dest*/
    TA6REC.TA6SUBSW = "S"; /* don't converse print screen*/
  end

  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* print request subroutine*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    SL0WW00.XROPDEST = TA6REC.XURDEST; /* move dest to ws*/
    SL0WM001.XROPDEST = SL0WW00.XROPDEST; /* move dest to map*/
    SL0WW00.SL0WWSWF = "N"; /* format map switch*/
    SL0WW00.SL0WWSWR = "N"; /* request for data switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end SL0W681

// Update temporary storage page
Function SL0WS01()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (SL0WW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S01 "; /* Module identification*/
  SLWREC.SLWMSGNO = 01; /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0WS01

// Read temporary storage page
Function SL0WS02()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  SL0WW01.XXXTSLEN = SL0WW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = SL0WW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SL0WW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S02 "; /* Module identification*/
  SLWREC.SLWMSGNO = 01; /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0WS02

// Add page to temporary storage
Function SL0WS03()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  SL0WW01.XXXTSLEN = SL0WW00.XXXTSLEN;
                                   /* set temp storage page length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (SL0WW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set SL0WW01 empty; /* M001 display storage*/

    SL0WW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S03"; /* Module identification*/
  SLWREC.SLWMSGNO = 01; /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0WS03

// Purge temporary storage
Function SL0WS04()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SL0WW01 empty; /* M001 display storage*/

  SL0WW00.SL0WWSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SL0WW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SL0WW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S04"; /* Module identification*/
  SLWREC.SLWMSGNO = 01; /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0WS04

// Open the VUCASE01 cursor
Function SL0WS05()
   /* ------------------------------------------------------------*/
   /* Open the cursor for the selected set of VUCASE01 rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0090" ("S2", SQLCA, SWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Open cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return*/

   /* End of cursor switch*/
    SL0WW00.SL0WWUPC = "N";
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "S05"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* And resource not available*/

    SLWREC.SLWMSGNO = 31; /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    SLWREC.SLWMSGNO = 1; /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VUCASE01"; /* Data base view*/
  TA1REC.TA1TBLKE = SWPREC.SWPDATA; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0WS05

// Fetch the next VUCASE01 row
Function SL0WS06()
   /* ------------------------------------------------------------*/
   /* Fetch the next selected VUCASE01 row in the cursor.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0090" ("N2", SQLCA, SWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* No record found*/

      SL0WW00.SL0WWUPC = "Y"; /* End of cursor switch*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "S06"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* And resource not available*/

    SLWREC.SLWMSGNO = 31; /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    SLWREC.SLWMSGNO = 1; /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VUCASE01"; /* Data base view*/
  TA1REC.TA1TBLKE = SWPREC.SWPDATA; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0WS06

// Close the VUCASE01 cursor
Function SL0WS07()
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set of VUCASE01 rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0090" ("C2", SQLCA, SWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "S07"; /* Module identification*/

  SLWREC.SLWMSGNO = 1; /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VUCASE01"; /* Data base view*/
  TA1REC.TA1TBLKE = SWPREC.SWPDATA; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0WS07

// error routine for vplnhd01
Function SL0WS08()

   /* ------------------------------------------------------------*/
   /* Error for dstloc.vplnhd01.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* And resource not available*/
    SLWREC.SLWMSGNO = 31; /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    SLWREC.SLWMSGNO = 01; /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Data base view*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0WS08

// error routine for vlocat01
Function SL0WS09()
   /* ------------------------------------------------------------*/
   /* Error for DSTLOC.VLOCAT01.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* And resource not available*/
    SLWREC.SLWMSGNO = 31; /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 100)    /* Row not found*/
      SLWREC.SLWMSGNO = 316; /* Update unsuccessful*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else
      SLWREC.SLWMSGNO = 01; /* Unexpected error occurred*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLOCAT01"; /* Data base view*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0WS09

// error routine for vrlitm01
Function SL0WS11()

   /* ------------------------------------------------------------*/
   /* Error for dstloc.vrlitm01.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* And resource not available*/
    SLWREC.SLWMSGNO = 31; /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    SLWREC.SLWMSGNO = 01; /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Data base view*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0WS11

// error routine for vsyasg01
Function SL0WS12()
   /* ------------------------------------------------------------*/
   /* Error for DSTLOC.VSYASG01.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* And resource not available*/
    SLWREC.SLWMSGNO = 31; /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    SLWREC.SLWMSGNO = 01; /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYASG01"; /* Data base view*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0WS12

// error routine for vazone01
Function SL0WS13()
   /* ------------------------------------------------------------*/
   /* Error for DSTLOC.VAZONE01.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* And resource not available*/
    SLWREC.SLWMSGNO = 31; /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    SLWREC.SLWMSGNO = 01; /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZONE01"; /* Data base view*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0WS13

//*** RECORD=SL0WW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record SL0WW00 type basicRecord
  10 SL0WWIXM SL0WWIXM ; 
  10 SL0WWIXU SL0WWIXU ; 
  10 SL0WWIX1 SL0WWIX1 ; 
  10 SL0WWSWC SL0WWSWC ; 
  10 SL0WWSWD SL0WWSWD ; 
  10 SL0WWSWF SL0WWSWF ; 
  10 SL0WWSWR SL0WWSWR ; 
  10 SL0WWSWU SL0WWSWU ; 
  10 SL0WWSCR SL0WWSCR ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 SL0WWSPG SL0WWSPG ; 
  10 SL0WWTSG SL0WWTSG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 SL0WWTYF SL0WWTYF ; 
  10 SL0WWASG SL0WWASG ; 
  10 SL0WWCF SL0WWCF ; 
  10 SL0WWCF1 SL0WWCF1 ; 
  10 SL0WWPNT SL0WWPNT ; 
  10 SL0WWCNT SL0WWCNT ; 
  10 XROPDEST XROPDEST ; 
  10 XWHCD XWHCD ; 
  10 XWHSABRV XWHSABRV ; 
  10 SWEPLLNB SWEPLLNB ; 
  10 TS3CNTNR TS3CNTNR ; 
  10 SL0WWNPL SL0WWNPL ; 
  10 SL2PALET SL2PALET ; 
  10 XARCD XARCD ; 
  10 SL4ZONE SL4ZONE ; 
  10 SL5LOCTN SL5LOCTN ; 
  10 SL8TOAR SL8TOAR ; 
  10 SL8TOZN SL8TOZN ; 
  10 SL8TOLC SL8TOLC ; 
  10 SL0WMLFL SL0WMLFL ; 
  10 SL0WMSEL SL0WMSEL ; 
  10 PKDNCSQN PKDNCSQN ; 
  10 XGPCD XGPCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XQACD XQACD ; 
  10 PC2INSEG PC2INSEG ; 
  10 XEGCD XEGCD ; 
  10 XUMCD XUMCD ; 
  10 XOWCD XOWCD ; 
  10 SY5SZID SY5SZID ; 
  10 SL2RCVD SL2RCVD ; 
  10 SL0WWSID SL0WWSID ; 
  10 SL8WONBR SL8WONBR ; 
  10 SL8WOGRP SL8WOGRP ; 
  10 SL0WWPOI SL0WWPOI ; 
  10 SL0WWPON SL0WWPON ; 
  10 PC3PONBR PC3PONBR ; 
  10 SY1UNPCS SY1UNPCS ; 
  10 * char(3) ; 
  10 SL0WWEDT SL0WWEDT ; 
    15 * char(2) ; 
    15 SL0WWRLG SL0WWRLG ; 
  10 SL0WWUPC SL0WWUPC ; 
  10 SL0WWUPM SL0WWUPM ; 
  10 XXX-REC-SEQ-NBR XXX-REC-SEQ-NBR ; 
end // end SL0WW00

//*** RECORD=SL0WW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record SL0WW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(1068) ; 
    10 XWHCD XWHCD ; 
    10 XWHSABRV XWHSABRV ; 
    10 SWEPLLNB SWEPLLNB ; 
    10 SL8WOGRP SL8WOGRP ; 
    10 TSHCNTNR TSHCNTNR ; 
    10 XARCD XARCD ; 
    10 SL4ZONE SL4ZONE ; 
    10 SL5LOCTN SL5LOCTN ; 
    10 SL8TOAR SL8TOAR ; 
    10 SL8TOZN SL8TOZN ; 
    10 SL8TOLC SL8TOLC ; 
    10 SL8WONBR SL8WONBR ; 
    10 SL2PALET SL2PALET ; 
    10 * char(1) ; 
    10 SL0WWITM SL0WWITM [14] ; 
      15 SL0WMSEL SL0WMSEL ; 
      15 PKDNCSQN PKDNCSQN ; 
      15 SL2CASE SL2CASE ; 
      15 SL0WWPOI SL0WWPOI ; 
      15 PC4ORTYP PC4ORTYP ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 PC2INSEG PC2INSEG ; 
      15 XEGCD XEGCD ; 
      15 XSLCD XSLCD ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 XOWCD XOWCD ; 
      15 SY5SZID SY5SZID ; 
      15 SY4IDDSC SY4IDDSC ; 
      15 SL2RCVD SL2RCVD ; 
      15 SY1UNPCS SY1UNPCS ; 
      15 PC3PONBR PC3PONBR ; 
      15 SL0WWIFL SL0WWIFL ; 
end // end SL0WW01

//*** RECORD=SL0WW03 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record SL0WW03 type basicRecord
  10 SL0WMSEL SL0WMSEL [98] ; 
  10 SL0WWIXL SL0WWIXL ; 
  10 SL0WWSWX SL0WWSWX ; 
end // end SL0WW03

//*** RECORD=SL0WW04 ****
// ------------------------------------------------------------
// Parameters for SL4141 - Unexpected Work Order Creation.
// ------------------------------------------------------------
// ***********************
Record SL0WW04 type basicRecord
  5 TARJCL TARJCL ; 
    10 XWHCD XWHCD ; 
    10 TSHCNTNR TSHCNTNR ; 
    10 SL0WWOFL SL0WWOFL ; 
    10 SL0WWCSQ SL0WWCSQ ; 
    10 SL2PALET SL2PALET ; 
    10 SL5LOCTN SL5LOCTN ; 
    10 SL0WWPLN SL0WWPLN ; 
    10 SL0WWWOG SL0WWWOG ; 
    10 SL0WWNBR SL0WWNBR ; 
    10 SL0WWCRT SL0WWCRT ; 
    10 SL0WWPUW SL0WWPUW ; 
    10 * char(7) ; 
end // end SL0WW04

// Multiple location flag
DataItem SL0WMLFL char(1)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

// selection input field
DataItem SL0WMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// location assigned from VSYASG0
DataItem SL0WWASG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// carton work order flag
DataItem SL0WWCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first carton work order flag
DataItem SL0WWCF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Carton wo counter
DataItem SL0WWCNT num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = " ", inputRequired = no
}
end

// crt user
DataItem SL0WWCRT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// carton sequence number
DataItem SL0WWCSQ num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// edit field for sl-rlog-case
DataItem SL0WWEDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// item counted flag
DataItem SL0WWIFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// receiving log item info
DataItem SL0WWITM char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem SL0WWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// limit for map fields index
DataItem SL0WWIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for map fields
DataItem SL0WWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for units per case
DataItem SL0WWIXU smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work order number
DataItem SL0WWNBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// next pallet nbr
DataItem SL0WWNPL num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work order type flag
DataItem SL0WWOFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// plan number
DataItem SL0WWPLN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pallet counter
DataItem SL0WWPNT num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = " ", inputRequired = no
}
end

// po id
DataItem SL0WWPOI char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po nbr
DataItem SL0WWPON num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// unplanned/planned wo flag
DataItem SL0WWPUW char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// sl-rlog-case
DataItem SL0WWRLG char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Scroll switch
DataItem SL0WWSCR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size id unpacked
DataItem SL0WWSID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Save temporary storage page
DataItem SL0WWSPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem SL0WWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem SL0WWSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem SL0WWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem SL0WWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem SL0WWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// exit requested switch
DataItem SL0WWSWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save current page
DataItem SL0WWTSG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work order type flag
DataItem SL0WWTYF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VUCASE01 end of cursor switch
DataItem SL0WWUPC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VUCASE01 match found switch
DataItem SL0WWUPM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work oder group nbr
DataItem SL0WWWOG num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

